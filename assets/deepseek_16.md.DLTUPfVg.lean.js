import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},k={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,m,r,a){return n(),i("div",T,[t("div",k,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(q,[["render",O],["__scopeId","data-v-b4316442"]]),S=JSON.parse('[{"question":"You are given a binary string S of length N. The binary string represents a sequence of zombies (denoted by \'1\') and empty spaces (denoted by \'0\'). Chef and his friend Munchy are playing a game where they take turns destroying zombies. The rules are as follows: 1. On each player’s turn, they must select and destroy exactly one contiguous block of zombies (a maximal substring of consecutive \'1\'s). 2. The remaining zombies and empty spaces are concatenated together after removing the chosen block, maintaining their original order. 3. The game continues until no zombies are left to destroy. 4. The player who cannot make a move (because no zombies are left) loses the game. Chef always goes first. Given that both players play optimally, determine the winner of the game. ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. The description of T test cases follows. - For each test case, the first line contains a single integer N, the length of the binary string. - The second line contains the binary string S, which represents the initial state of zombies and empty spaces. ------ Output Format ------ For each test case, output a single line containing the string “CHEF” (without quotes) if Chef will be the winner, and “MUNCHY” otherwise. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^{5} S is a binary string consisting of ‘0’ and ‘1’ only - The sum of N over all test cases will not exceed 10^{6} ------ Sample Input 1 ------ 3 6 110011 5 11111 4 1000 ------ Sample Output 1 ------ MUNCHY CHEF CHEF ------ Explanation 1 ------ Test case 1: There are three blocks of zombies: \'11\', \'00\', \'11\'. Chef and Munchy will alternately destroy blocks of zombies. Chef destroys a block of \'11\', then Munchy destroys the other block of \'11\'. Now, Chef cannot make a move and thus Munchy wins. Test case 2: There is only one block of zombies \'11111\' which Chef will destroy in the first move, leaving no zombies for Munchy to destroy, making Chef the winner. Test case 3: There is only one block of zombies \'1\', which Chef will destroy in the first move, leaving no zombies for Munchy to destroy, making Chef the winner.","solution":"def find_game_winner(binary_string): Determines the winner of the game given a binary string. Chef wins if the number of contiguous blocks of \'1\'s is odd. Munchy wins otherwise. Args: binary_string (str): The binary string representing zombies and empty spaces Returns: str: \\"CHEF\\" if Chef wins, \\"MUNCHY\\" if Munchy wins block_count = 0 in_block = False for char in binary_string: if char == \'1\': if not in_block: block_count += 1 in_block = True else: in_block = False return \\"CHEF\\" if block_count % 2 == 1 else \\"MUNCHY\\" def determine_winner_for_test_cases(T, test_cases): Determines the winner for each test case. Args: T (int): Number of test cases test_cases (list): List of tuples where each tuple contains (N, binary_string) Returns: list of str: List of results for each test case results = [] for _, binary_string in test_cases: result = find_game_winner(binary_string) results.append(result) return results"},{"question":"Tanya recently got into gardening and decided to grow some flowers in her backyard. She has N types of flower seeds, each of which has specific characteristics influencing how they grow. Each flower seed type i is characterized by two integers: Ai, which represents the amount of water needed per day for optimal growth, and Bi, which is the number of days it takes for that flower to fully blossom. Tanya aims to maximize the variety of flowers in her garden while adhering to the following rules: 1. Tanya can only water the flowers once per day, and each type i of flower must receive exactly Ai units of water every day. 2. She has a total of W units of water available per day. 3. The order of planting does not matter, but she can only start watering a new flower type after completing the full blossom period of any currently being watered type. Help Tanya determine the maximum number of different flower types she can grow in her garden under these constraints. # Input - The first line contains two integers, N and W, separated by a blank space, where N is the number of different types of flower seeds, and W is the total amount of water available per day. - The next N lines each contains two integers Ai and Bi separated by a blank space, representing the water requirement per day and the number of days to blossom for the i-th type of flower. # Output - Output a single integer representing the maximum number of different flower types Tanya can grow. # Example Input 1 ``` 4 10 4 2 3 3 5 4 2 1 ``` Output 1 ``` 3 ``` Input 2 ``` 3 5 6 5 4 3 2 2 ``` Output 2 ``` 1 ``` # Explanation In the first example, Tanya can choose flower types 1, 2, and 4, requiring no more than 10 units of water per day altogether. In the second example, Tanya can only choose the flower type 3 to maximize the number of different flower types she can grow. The goal is to implement an algorithm that efficiently determines the maximum number of flower types Tanya can plant based on her water constraints.","solution":"def max_flower_types(N, W, flower_data): Determine the maximum number of flower types Tanya can grow. Args: N : int : The number of different types of flower seeds. W : int : The total amount of water available per day. flower_data : list of tuples : Each tuple containing (Ai, Bi), representing the water requirement per day and the number of days to blossom for each type of flower. Returns: int : The maximum number of flower types Tanya can grow. # Sort flowers by their water requirement (Ai) flower_data.sort() current_water = 0 flower_count = 0 for Ai, Bi in flower_data: if current_water + Ai <= W: current_water += Ai flower_count += 1 else: break return flower_count"},{"question":"Alice is a linguist working with a large corpus of text samples. As part of her analysis, she needs to determine whether a given text sample can be segmented into exactly n words, such that each word appears at least once in a given dictionary of valid words. Write a function to help Alice decide if this segmentation is possible. -----Input----- The first line of input contains a string text containing lowercase English letters (1 ≤ |text| ≤ 1000). The second line contains an integer n (1 ≤ n ≤ 1000). The third line contains a list of words representing the dictionary. You may assume that all words in the dictionary and the text are composed of lowercase English letters and each word is unique. -----Output----- Print \\"YES\\" (without quotes) if it\'s possible to segment the text into exactly n words that each appear in the dictionary. Otherwise, print \\"NO\\" (without quotes). -----Examples----- Input thisisaword 4 this is a word Output YES Input appleorangebanana 2 apple orange banana Output NO -----Note----- In the first sample, \\"thisisaword\\" can be segmented into \\"this\\", \\"is\\", \\"a\\", and \\"word\\", each of which appears in the given dictionary. In the second sample, \\"appleorangebanana\\" can potentially be segmented into \\"apple\\", \\"orange\\", and \\"banana\\", but that\'s 3 words, not 2. Therefore, the answer is \\"NO\\".","solution":"def can_segment(text, n, dictionary): Function that determines if text can be segmented into exactly n words from the given dictionary. :param text: str, the input text to be segmented :param n: int, the number of segments required :param dictionary: list, list of valid words :return: str, \\"YES\\" or \\"NO\\" if the segmentation is possible or not word_set = set(dictionary) text_len = len(text) # dp[i] will be a list of tuples (length, count), where length is the length of the word, and count is the # number of segments up to index i that forms a valid segmentation with \'n\' words. Example (4, 2) means # using 4 letter words formed valid segmentation up to index \'i\' with 2 words. dp = [None] * (text_len + 1) dp[0] = (0, 0) # Starting condition: zero length, zero words for i in range(1, text_len + 1): for j in range(i): word = text[j:i] if word in word_set: if dp[j] is not None: length_so_far, word_count_so_far = dp[j] if word_count_so_far + 1 <= n: if dp[i] is None or (dp[i][1] > word_count_so_far + 1): dp[i] = (length_so_far + len(word), word_count_so_far + 1) # Check if we can split the text into exactly \'n\' words if dp[-1] is not None and dp[-1][1] == n: return \\"YES\\" else: return \\"NO\\""},{"question":"A group of friends is planning a road trip. They need to determine the optimal route to visit a certain number of cities. Each city is connected to at least one other city by a direct road, and each road has a fixed travel cost associated with it. The goal is to find the minimum total travel cost necessary to visit each city at least once. You need to write a program that calculates this minimum travel cost given the list of cities and roads. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and M where N is the number of cities and M is the number of roads. - The next M lines each contain three integers u, v, and w, representing a road between city u and city v with a cost w. -----Output----- For each test case, print a single line containing the minimum total travel cost to visit each city at least once. If it is not possible to visit all cities, print \\"impossible\\". -----Constraints----- - 1 le T le 10 - 1 le N le 1000 - 1 le M le 10,000 - 1 le u, v le N - 1 le w le 10,000 -----Example Input----- 2 4 4 1 2 4 2 3 2 3 4 1 4 1 5 3 3 1 2 6 2 3 8 3 1 5 -----Example Output----- 7 11","solution":"class UnionFind: def __init__(self, size): self.root = list(range(size)) self.rank = [1] * size def find(self, u): if u != self.root[u]: self.root[u] = self.find(self.root[u]) return self.root[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.root[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.root[root_u] = root_v else: self.root[root_v] = root_u self.rank[root_u] += 1 def minimum_travel_cost(T, test_cases): results = [] for case in test_cases: N, M, edges = case uf = UnionFind(N) edges.sort(key=lambda x: x[2]) mst_cost = 0 edges_used = 0 for u, v, w in edges: if uf.find(u - 1) != uf.find(v - 1): uf.union(u - 1, v - 1) mst_cost += w edges_used += 1 if edges_used == N - 1: break if edges_used != N - 1: results.append(\\"impossible\\") else: results.append(str(mst_cost)) return results def process_input(input_string): data = input_string.strip().split(\'n\') T = int(data[0]) idx = 1 test_cases = [] for _ in range(T): N, M = map(int, data[idx].split()) edges = [tuple(map(int, data[idx + i + 1].split())) for i in range(M)] test_cases.append((N, M, edges)) idx += M + 1 return T, test_cases def process_output(results): return \'n\'.join(results) def main(input_string): T, test_cases = process_input(input_string) results = minimum_travel_cost(T, test_cases) return process_output(results)"},{"question":"In a video streaming service, m users are watching various movies. Each user starts watching a movie at a specific time and the movie has a certain duration. Your task is to determine the order in which the users will finish watching their movies. Input Format On the first line, you will get m, the number of users. Then m lines will follow. On the (i+1)th line, you will get si and di separated by a single space. Here, si is the start time and di is the duration of the movie for the ith user. Output Format Print the order (as single space-separated integers) in which the users finish watching their movies. If two users finish watching at the same time, then print the smallest numbered user first. (Remember, the users are numbered 1 to m). Constraints 1 ≤ m ≤ 103 1 ≤ si, di ≤ 106 SAMPLE INPUT 4 2 5 1 3 4 2 5 6 SAMPLE OUTPUT 2 3 1 4 Explanation The first user starts at time 2 and finishes watching the movie at time 7 (2+5). The second user starts at time 1 and finishes at time 4 (1+3). The third user starts at time 4 and finishes at time 6 (4+2). The fourth user starts at time 5 and finishes at time 11 (5+6). So the order of completion is 2 3 1 4.","solution":"def movie_watching_order(m, times): Determine the order in which users will finish watching their movies. Parameters: m (int): The number of users times (list of tuples): Each tuple contains (si, di) for ith user, where si is the start time and di is the duration Returns: list: The order in which users finish watching their movies finish_times = [(i + 1, si + di) for i, (si, di) in enumerate(times)] finish_times.sort(key=lambda x: (x[1], x[0])) return [user for user, _ in finish_times]"},{"question":"You are given an array of N integers representing the heights of students in a line. Your task is to find a subsequence of these students that is strictly increasing in height and has the maximum possible length. Constraints * 1 leq N leq 1000 * 1 leq heights[i] leq 10000, for 1 leq i leq N Input Input is given from Standard Input in the following format: N heights_1 heights_2 ... heights_N Output Print a single integer representing the length of the longest strictly increasing subsequence of student heights. Example Input 6 5 2 8 6 3 6 Output 3 Input 5 9 10 2 3 7 Output 4","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest strictly increasing subsequence in the given array. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are tasked with protecting a museum by designing a security system that monitors the positions of valuable artifacts. To avoid false alarms or missed threats, your system will need to accurately determine the shortest distance a potential intruder must cover to reach any artifact. The museum is represented as a 2D grid where: - Each grid cell can either be empty (0) or contain an artifact (1). - The grid is surrounded by walls, so you can assume that no intrusion can occur from outside the grid. Your goal is to implement a function: ```python def shortestDistance(matrix): ``` It takes in a 2D list \\"matrix\\" where each element is a list of integers (either 0 or 1). The function returns: 1. An integer, the minimum number of grid cells an intruder must traverse to reach the closest artifact from any empty cell. For instance, consider the following grid: ``` matrix = [ [0, 1, 0, 0], [0, 0, 0, 1], [0, 0, 0, 0], [1, 0, 0, 0] ] ``` Here\'s an example trace: - From cell (0,0), the closest artifact is at (0,1) with distance 1. - From cell (1,0), the closest artifact is at (0,1) with distance 2. - From cell (1,2), the closest artifact is either at (1,3) or (0,1) with distance 1. - From cell (3,3), the closest artifact is at (3,0) with distance 3. Therefore: ``` shortestDistance(matrix) == 1 ``` **You can assume that there is at least one artifact in the grid. All cells are connected orthogonally, meaning that movement can happen up, down, left, or right, but not diagonally.","solution":"from collections import deque def shortestDistance(matrix): Returns the minimum number of grid cells an intruder must traverse to reach the closest artifact from any empty cell. if not matrix or not matrix[0]: return -1 rows, cols = len(matrix), len(matrix[0]) distance = [[float(\'inf\')] * cols for _ in range(rows)] queue = deque() # Start BFS from all artifacts at once (multi-source BFS) for i in range(rows): for j in range(cols): if matrix[i][j] == 1: distance[i][j] = 0 queue.append((i, j)) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and distance[nx][ny] == float(\'inf\'): distance[nx][ny] = distance[x][y] + 1 queue.append((nx, ny)) # Find the minimum distance in the distance matrix for all empty cells min_distance = float(\'inf\') for i in range(rows): for j in range(cols): if matrix[i][j] == 0: min_distance = min(min_distance, distance[i][j]) return min_distance if min_distance != float(\'inf\') else -1"},{"question":"Lisa and Bart are playing a game on a rectangular grid of cells. The grid has R rows and C columns. Each cell in the grid can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). Lisa starts at the top-left corner of the grid (0, 0) and wants to reach the bottom-right corner of the grid (R-1, C-1). She can move either right or down to an adjacent cell, but she can\'t move into or through cells that contain obstacles. Your task is to determine whether Lisa can reach the bottom-right corner of the grid from the top-left corner. Input: - The first line holds an integer T denoting the number of test cases. - For each test case, the first line contains two integers R and C, representing the number of rows and columns in the grid, respectively. - The next R lines each contain a string of exactly C characters, where each character is either \'.\' or \'#\'. Output: - For each test case, print \\"YES\\" if Lisa can reach the bottom-right corner of the grid while avoiding obstacles. Otherwise, print \\"NO\\". Constraints: - 1 ≤ T ≤ 10 - 1 ≤ R, C ≤ 100 SAMPLE INPUT 3 3 3 ... .#. ... 4 4 .... .#.. .#.. .... 2 2 .# #. SAMPLE OUTPUT YES YES NO Explanation - In the first test case, Lisa can move down, right, down, and right again to reach the bottom-right corner without hitting any obstacles. - In the second test case, Lisa can navigate around the obstacles to reach the bottom-right corner. - In the third test case, Lisa can\'t reach the bottom-right corner due to the obstacles blocking her path.","solution":"from collections import deque def can_reach_end(grid, R, C): if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return \\"NO\\" queue = deque([(0, 0)]) visited = [[False] * C for _ in range(R)] visited[0][0] = True directions = [(0, 1), (1, 0)] # right, down while queue: x, y = queue.popleft() if x == R-1 and y == C-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < R and 0 <= ny < C and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\" def solve_game(test_cases): results = [] for case in test_cases: R, C, grid = case result = can_reach_end(grid, R, C) results.append(result) return results"},{"question":"Create a function that takes a list of strings and returns a new list with the strings sorted in descending order of their lengths. If two strings have the same length, maintain their original order (stable sorting). Examples ``` [\\"apple\\", \\"banana\\", \\"pear\\", \\"kiwi\\"] ==> [\\"banana\\", \\"apple\\", \\"pear\\", \\"kiwi\\"] 1st string: \\"apple\\" (length 5) 2nd string: \\"banana\\" (length 6) 3rd string: \\"pear\\" (length 4) 4th string: \\"kiwi\\" (length 4) | v sorted: [\\"banana\\", \\"apple\\", \\"pear\\", \\"kiwi\\"] ``` And another one: ``` [\\"car\\", \\"bicycle\\", \\"airplane\\", \\"boat\\"] ==> [\\"airplane\\", \\"bicycle\\", \\"boat\\", \\"car\\"] 1st string: \\"car\\" (length 3) 2nd string: \\"bicycle\\" (length 7) 3rd string: \\"airplane\\" (length 8) 4th string: \\"boat\\" (length 4) | v sorted: [\\"airplane\\", \\"bicycle\\", \\"boat\\", \\"car\\"] ```","solution":"def sort_strings_by_length_desc(strings): Sorts a list of strings in descending order based on their lengths. If two strings have the same length, their original order is maintained. :param strings: List of strings to be sorted :type strings: list[str] :return: New list of strings sorted by length in descending order :rtype: list[str] return sorted(strings, key=len, reverse=True)"},{"question":"Leo loves playing with his favorite toy blocks. He has a collection of toy blocks and he wants to build the tallest structure that he can. The catch is, he can only stack a block on top of another block if the height of the upper block is strictly less than the height of the lower block. Given a list of block heights, determine the maximum height of the structure that Leo can build. Function Description Complete the `tallestStructure` function in the editor below. `tallestStructure` has the following parameter(s): - `int[] heights`: an array of integers representing the heights of the blocks Returns - `int`: the maximum height of the structure that can be built Input Format The first line contains an integer, `n`, the number of blocks. The second line contains `n` space-separated integers, where each integer represents the height of a block in the collection. Constraints - 1 leq n leq 1000 - 1 leq text{heights[i]} leq 10^5 Sample Input ``` 6 3 3 3 2 2 1 ``` Sample Output ``` 3 ``` Explanation Leo can build the tallest structure by using three blocks: one with height 3, followed by one with height 2, followed by one with height 1. No other combination of blocks can create a taller structure that follows the height rule. Another valid sequence Leo could use is two blocks: one with height 2, followed by one with height 1. However, this results in a structure height of 2, which is less than the maximum possible height of 3.","solution":"def tallestStructure(heights): Determines the maximum height of the structure that can be built following the rules. Parameters: heights (list of int): An array of integers representing the heights of the blocks. Returns: int: The maximum height of the structure that can be built. heights.sort(reverse=True) max_height = 0 current_height = float(\'inf\') for h in heights: if h < current_height: max_height += 1 current_height = h return max_height"},{"question":"A group of researchers is studying the migratory patterns of a certain species of birds. They have tracked the paths taken by several birds using a set of waypoints for each bird\'s journey. Each bird\'s path is defined as a series of straight line segments connecting these waypoints in sequence. To help analyze the data, you are tasked with determining the length of each bird\'s journey. Input The first input line contains a single integer m (1 ≤ m ≤ 50) — the number of birds. The subsequent lines describe the waypoint series for each bird\'s journey. Each bird\'s data starts with an integer ki (2 ≤ ki ≤ 100), the number of waypoints for bird i. Then follow ki pairs of integers representing the coordinates of the waypoints (xij, yij) for the j-th waypoint of bird i. Output Print m lines, each containing the length of the ith bird\'s journey. Your answers should differ from the correct ones by no more than 10^(-6). Examples Input 2 3 0 0 3 4 6 0 4 1 1 2 2 3 3 4 4 Output 10.0000000000 4.2426406871 Input 1 5 1 2 3 4 5 6 7 8 9 10 Output 11.3137084990","solution":"import math def calculate_distance(x1, y1, x2, y2): return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) def bird_journeys(m, data): results = [] index = 0 for i in range(m): ki = data[index] index += 1 waypoints = data[index: index + ki*2] index += ki*2 total_distance = 0.0 for j in range(0, len(waypoints) - 2, 2): x1, y1 = waypoints[j], waypoints[j+1] x2, y2 = waypoints[j+2], waypoints[j+3] total_distance += calculate_distance(x1, y1, x2, y2) results.append(total_distance) return results"},{"question":"Given an integer array `nums`, return the greatest sum of any non-empty subarray of `nums`. A subarray is a contiguous subsequence of the array. For example, given the array `nums = [-2,1,-3,4,-1,2,1,-5,4]`, the greatest sum of the subarray is `6`, because the subarray `[4,-1,2,1]` has the largest sum. More examples in test cases. Good luck! If you like this problem, please try: [Maximum Subarray](https://leetcode.com/problems/maximum-subarray/) [Kadane\'s Algorithm](https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/)","solution":"def max_subarray_sum(nums): Returns the greatest sum of any non-empty subarray of nums. if not nums: raise ValueError(\\"The input array is empty\\") max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A tourism company wants to organize guided tours in various cities. To make their guides\' job easier, they want you to write a program that will help them determine whether a given city name can be rearranged into a given tour name by rearranging the characters of the city name. For example, if the city name is \\"London\\" and the tour name is \\"noLodn\\", then the city name can be rearranged to form the tour name. Given two strings city and tour, you need to determine if the city name can be rearranged to generate the tour name. Print \\"Rearrangeable\\" (without the quotes) if it is possible, and \\"Not Rearrangeable\\" (without the quotes) otherwise. Input Format: The first line contains an integer T, the number of test cases. The next T lines each contain two space-separated strings city and tour. Both city and tour consist of characters \'a\'-\'z\' and \'A\'-\'Z\'. Output Format: For each test case, print \\"Rearrangeable\\" or \\"Not Rearrangeable\\" (without the quotes). Constraints: 1 ≤ T ≤ 100 1 ≤ |city|, |tour| ≤ 100 SAMPLE INPUT 3 London noLodn Paris iraSs Tokyo kyoTo SAMPLE OUTPUT Rearrangeable Not Rearrangeable Rearrangeable Explanation Test Case 1: The city name \\"London\\" can be rearranged to form the tour name \\"noLodn\\". Test Case 2: The city name \\"Paris\\" cannot be rearranged to form the tour name \\"iraSs\\". Test Case 3: The city name \\"Tokyo\\" can be rearranged to form the tour name \\"kyoTo\\".","solution":"def are_rearrangeable(city, tour): Determines if the characters of the city name can be rearranged to form the tour name. Args: city (str): Name of the city. tour (str): Name of the tour. Returns: str: \\"Rearrangeable\\" if city can be rearranged to form tour, otherwise \\"Not Rearrangeable\\". # Check if both strings have the same length if len(city) != len(tour): return \\"Not Rearrangeable\\" # Sort the characters of both strings and compare if sorted(city) == sorted(tour): return \\"Rearrangeable\\" else: return \\"Not Rearrangeable\\" def main(): import sys input = sys.stdin.read data = input().splitlines() T = int(data[0]) results = [] for i in range(1, T + 1): city, tour = data[i].split() result = are_rearrangeable(city, tour) results.append(result) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Jade is a software developer who is working on a new project. She needs to implement a feature that checks if there is a subarray within a given array whose sum is equal to a specific target value. However, Jade\'s project has a constraint: the solution must handle large input sizes efficiently. Can you help Jade by writing a function that determines if such a subarray exists? You are given an integer array `A` of length `N` and an integer `K`. Your task is to find out whether there exists a continuous subarray (of any length) whose sum equals `K`. ------ Input ------ The first line contains an integer `T`, the number of test cases. Each test case consists of two lines. The first line contains two integers `N` and `K`, where `N` is the length of the array, and `K` is the target sum. The second line contains `N` space-separated integers representing the array `A`. ------ Output ------ For each test case, output \\"YES\\" if there is a subarray whose sum equals `K`, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^9 ≤ A_i ≤ 10^9 -10^9 ≤ K ≤ 10^9 ----- Sample Input 1 ------ 2 5 15 1 2 3 4 5 5 10 1 2 3 4 5 ----- Sample Output 1 ------ YES YES ----- Explanation 1 ------ - For the first test case, the subarray `[1, 2, 3, 4, 5]` has a sum of 15, which equals `K`, so the output is \\"YES\\". - For the second test case, the subarray `[1, 2, 3, 4]` has a sum of 10, which equals `K`, so the output is \\"YES\\".","solution":"def find_subarray_with_sum(N, K, A): Determines if there exists a continuous subarray whose sum equals K. Args: N : int : Length of the input array K : int : Target sum A : list[int] : The input integer array Returns: str : \\"YES\\" if such a subarray exists, \\"NO\\" otherwise current_sum = 0 prefix_sums = {0} for num in A: current_sum += num if current_sum - K in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\" def find_subarrays(test_cases): Processes multiple test cases to find if there exist subarrays with given sums. Args: test_cases : list[tuple] : List of tuples, where each tuple is in the format: (N : int, K : int, A : list[int]) Returns: list[str] : List of results for each test case in the format of \\"YES\\" or \\"NO\\" results = [] for N, K, A in test_cases: results.append(find_subarray_with_sum(N, K, A)) return results"},{"question":"Create a function that accepts an array of integers and an integer n, and returns the nth largest unique integer in the array. If the nth largest unique integer does not exist, return -1. The input array may contain both positive and negative integers, and n will be a positive integer. For example, given the array `[4, 5, 1, 2, 2, 5, 3, 7]` and `n = 3`, the function should return `4` because the unique integers are `[7, 5, 4, 3, 2, 1]` and the 3rd largest is `4`. Similarly, for the array `[1, 2, 3, 4, 4, 4, 5, 6]` and `n = 2`, the function should return `5`. If the array is `[1, 1, 1, 1]` and `n = 2`, it should return `-1` since there\'s no 2nd largest unique integer.","solution":"def nth_largest_unique(arr, n): Returns the nth largest unique integer in the array. If the nth largest unique integer does not exist, return -1. # Get the unique elements and sort them in descending order unique_sorted_arr = sorted(set(arr), reverse=True) # Check if n is within the bounds of the unique_sorted_arr if n <= len(unique_sorted_arr): return unique_sorted_arr[n - 1] else: return -1"},{"question":"Write a program that determines the smallest number of page turns needed to reach a specified page in a book. You can start turning pages from either the front of the book or the back. Each page has two sides, except for possibly the last page if the book has an odd number of pages. The pages are numbered sequentially starting from 1. Input The input consists of two integers, `n` and `p`, where `n` represents the total number of pages in the book (1 ≤ n ≤ 10^5), and `p` represents the target page number (1 ≤ p ≤ n). Output Print the minimum number of page turns needed to reach page `p`. Examples Input 6 2 Output 1 Input 5 4 Output 0 Input 10 7 Output 2","solution":"def min_page_turns(n, p): Returns the minimum number of page turns needed to reach page p in a book with n pages. # Turns from the front front_turns = p // 2 # Turns from the back if n % 2 == 0: back_turns = (n - p + 1) // 2 else: back_turns = (n - p) // 2 return min(front_turns, back_turns)"},{"question":"You are tasked with organizing a series of workshops for a conference. Each workshop takes place in a separate room, and each room has a specific capacity and a list of time slots when it is available. You want to find out if it is possible to schedule all the workshops such that no two workshops overlap in time within the constraints of the room capacities and availability. To help determine the schedule, you have been given a list of the workshops, each with their required capacity and their preferred time slot. You have also been provided with the details of each room, which include the room\'s capacity and its available time slots. Your goal is to check if all workshops can be scheduled as per their preferences without any overlap in the same room and within the room\'s capacity. -----Input----- The input starts with a line with a single integer 1 leq R leq 1000, the number of rooms. Each of the next R lines contains: - A string roomName (length at most 20, only lowercase letters), - An integer capacity (1 ≤ capacity ≤ 1000), - An integer numTimeSlots (1 ≤ numTimeSlots ≤ 1440), followed by numTimeSlots space-separated integers representing the available time slots (integers between 0 to 1439 inclusive). The next line contains an integer 1 leq W leq 1000, the number of workshops. Each of the next W lines contains: - A string workshopName (length at most 20, only lowercase letters), - An integer requiredCapacity (1 ≤ requiredCapacity ≤ 1000), - An integer preferredTimeSlot (integer between 0 to 1439). It is guaranteed that the number of available time slots in a room will not exceed 1440, which means a room could be available for all the minutes in a day. -----Output----- Output “possible\\" if all workshops can be scheduled as per their preferences. Output “impossible\\" if it is not possible to schedule all workshops. -----Examples----- Sample Input 1: 2 roomA 50 3 0 30 60 roomB 100 2 30 60 3 workshop1 50 0 workshop2 50 30 workshop3 50 60 Sample Output 1: possible Sample Input 2: 2 roomA 50 2 0 60 roomB 100 2 30 60 3 workshop1 50 0 workshop2 50 30 workshop3 150 60 Sample Output 2: impossible","solution":"def can_schedule_workshops(rooms, workshops): Function to determine if all workshops can be scheduled without time overlaps and within room capacity constraints. Params: - rooms (list of tuples): (roomName, capacity, timeSlots) - workshops (list of tuples): (workshopName, requiredCapacity, preferredTimeSlot) Returns: - (str): \\"possible\\" if all workshops can be scheduled, otherwise \\"impossible\\" # Dict to record available timeslots for each room fulfilling capacity constraints available_times = {} for room_name, capacity, time_slots in rooms: if room_name not in available_times: available_times[room_name] = {} for time_slot in time_slots: if time_slot not in available_times[room_name]: available_times[room_name][time_slot] = capacity # Try to schedule each workshop for _, required_capacity, preferred_time_slot in workshops: scheduled = False for room_name in available_times: if (preferred_time_slot in available_times[room_name] and available_times[room_name][preferred_time_slot] >= required_capacity): # Schedule this workshop in this room available_times[room_name][preferred_time_slot] -= required_capacity scheduled = True break if not scheduled: # If any workshop can\'t be scheduled, return \\"impossible\\" return \\"impossible\\" return \\"possible\\" def parse_input(input_string): Parses the input string for rooms and workshops. input_lines = input_string.strip().split(\\"n\\") # Read number of rooms R = int(input_lines[0]) # Read room details rooms = [] index = 1 for _ in range(R): details = input_lines[index].split() room_name = details[0] capacity = int(details[1]) num_time_slots = int(details[2]) time_slots = list(map(int, details[3:3+num_time_slots])) rooms.append((room_name, capacity, time_slots)) index += 1 # Read number of workshops W = int(input_lines[index]) index += 1 # Read workshop details workshops = [] for _ in range(W): details = input_lines[index].split() workshop_name = details[0] required_capacity = int(details[1]) preferred_time_slot = int(details[2]) workshops.append((workshop_name, required_capacity, preferred_time_slot)) index += 1 return rooms, workshops def schedule_conference(input_string): rooms, workshops = parse_input(input_string) return can_schedule_workshops(rooms, workshops)"},{"question":"You are working on an image processing application and need to implement a new feature. The feature requires calculating the average brightness of a rectangular section of a grayscale image. The image is represented as a 2D array of integers, where each integer represents the brightness of a pixel (ranging from 0 to 255). You are given several queries, each of which specifies a rectangular section of the image, and you need to return the average brightness of that section. Input The first line of the input contains three integers n, m, and q (1 ≤ n, m ≤ 500, 1 ≤ q ≤ 1000), which represent the number of rows, columns, and queries respectively. Each of the next n lines contains m integers (0 ≤ ai, j ≤ 255), which represent the brightness values of the pixels in the image. Each of the next q lines contains four integers x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m), which specify the coordinates of the top-left and bottom-right corners of the rectangular section of the image for the query. Output For each query, output a single integer, which is the average brightness of the specified section, rounded down to the nearest integer. Examples Input 4 4 2 30 50 70 10 20 80 90 50 40 60 100 30 70 10 20 80 1 1 2 2 3 2 4 4 Output 45 45 Explanation In the first query, the rectangular section from (1, 1) to (2, 2) includes the pixels: 30 50 20 80 The average brightness is (30+50+20+80)/4 = 45. In the second query, the rectangular section from (3, 2) to (4, 4) includes the pixels: 60 100 30 10 20 80 The average brightness is (60+100+30+10+20+80)/6 = 50.","solution":"def average_brightness(n, m, q, image, queries): results = [] for query in queries: x1, y1, x2, y2 = query brightness_sum = 0 count = 0 for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): brightness_sum += image[i][j] count += 1 average = brightness_sum // count # Using integer division for floor results.append(average) return results"},{"question":"Jack is taking care of his family\'s farm, and he wants to build a rectangular fence that has the biggest possible area using exactly N meters of fencing material. Can you help him determine the maximum area he can fence? Input An integer T denoting the number of test cases. Each test case contains an integer N which represents the total length of available fencing material. Output For each test case, print the case number and the maximum area that can be fenced in square meters. Constraints 1 <= T <= 10^5 4 <= N <= 10^6 N is an even number Example Input: 2 8 12 Output: Case 1: 4 Case 2: 9 Explanation Example case 1: With 8 meters of fencing, Jack can build a 2x2 square, which gives the maximum area of 4 square meters. Example case 2: With 12 meters of fencing, Jack can build a 3x3 square, which gives the maximum area of 9 square meters.","solution":"def max_fenced_area(T, test_cases): Returns the maximum fenced area for each test case. results = [] for i in range(T): N = test_cases[i] # Since N is the perimeter, maximizing area with N means forming the largest possible square side_length = N // 4 area = side_length ** 2 results.append(f\\"Case {i + 1}: {area}\\") return results"},{"question":"Alice has recently started learning about sequences and patterns. She is currently fascinated by the concept of arithmetic progressions. An arithmetic progression (AP) is a sequence of numbers such that the difference between any two consecutive terms is constant. Given a list of integers, Alice wants to know if it can be arranged into an arithmetic progression by rearranging the elements. Your task is to write a program that helps Alice determine if the given list can be rearranged to form an arithmetic progression. Input: The first line contains a single integer T, the number of test cases. Each test case consists of two lines: - The first line contains an integer N, the number of elements in the list. - The second line contains N integers separated by spaces, representing the elements of the list. Output: For each test case, print \\"YES\\" if the list can be rearranged into an arithmetic progression. Otherwise, print \\"NO\\". Constraints: 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 -10^6 ≤ each element of the list ≤ 10^6 Example Input: 3 4 1 3 2 4 5 1 5 2 4 3 3 7 7 7 Example Output: YES YES YES Explanation: TestCase 1: The list [1, 3, 2, 4] can be rearranged to form the arithmetic progression [1, 2, 3, 4]. TestCase 2: The list [1, 5, 2, 4, 3] can be rearranged to form the arithmetic progression [1, 2, 3, 4, 5]. TestCase 3: The list [7, 7, 7] is already in the form of an arithmetic progression with a common difference of 0.","solution":"def can_form_arithmetic_progression(lst): Returns \\"YES\\" if the list can be rearranged into an arithmetic progression, otherwise \\"NO\\". # Sort the list to simplify the progression check lst.sort() # Calculate the common difference using the first two elements common_diff = lst[1] - lst[0] # Check if all the consecutive elements have the same difference for i in range(2, len(lst)): if lst[i] - lst[i - 1] != common_diff: return \\"NO\\" return \\"YES\\" def process_input(input_data): Processes the input data and returns the results for each test case. input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) results = [] index = 1 for _ in range(T): N = int(input_lines[index]) lst = list(map(int, input_lines[index + 1].split())) result = can_form_arithmetic_progression(lst) results.append(result) index += 2 return results"},{"question":"Given an array of strings, return the length of the longest string that can be formed by concatenating strings from the array where no string is used more than once, and each character in the concatenated string is unique. Example 1: Input: arr = [\\"un\\", \\"iq\\", \\"ue\\"] Output: 4 Explanation: We can concatenate \\"un\\" and \\"iq\\" to get \\"uniq\\", which has unique characters and length 4. Example 2: Input: arr = [\\"cha\\",\\"r\\",\\"act\\",\\"ers\\"] Output: 6 Explanation: We can concatenate \\"cha\\", \\"r\\", and \\"ers\\" to get \\"chaers\\", which has unique characters and length 6. Example 3: Input: arr = [\\"abcdefghijklmnopqrstuvwxyz\\"] Output: 26 Explanation: The only string in the array already has all unique characters with length 26. Constraints: - 1 <= arr.length <= 16 - 1 <= arr[i].length <= 26 - arr[i] contains only lowercase English letters.","solution":"def maxLength(arr): Returns the length of the longest string that can be formed by concatenating strings from the array where no string is used more than once, and each character in the concatenated string is unique. def has_unique_chars(s): Helper function to check if a string has all unique characters. return len(s) == len(set(s)) def backtrack(idx, current_str): Backtracking function to explore all possible concatenations. if idx == len(arr): return len(current_str) max_length = backtrack(idx + 1, current_str) # Case of not including the current string if has_unique_chars(current_str + arr[idx]): max_length = max(max_length, backtrack(idx + 1, current_str + arr[idx])) return max_length return backtrack(0, \\"\\") # Example usage arr = [\\"un\\", \\"iq\\", \\"ue\\"] print(maxLength(arr)) # Output: 4"},{"question":"You are designing a file versioning system for a large project. Throughout different stages of development, the files undergo various modifications and updates. We need to write a program that helps in keeping track of these changes and ensures that all versions of a file can be retrieved whenever required. Each file in the system can be uniquely identified and is represented by a sequence of its changes. Each change can either create a new version of the file or make modifications to an existing version. The versions should be stored in a way that allows efficient retrieval of any version. The system should also allow for retrieving the latest version of a particular file. -----Input----- The first line of the input contains an integer N (1 leq N leq 100), the number of file operations followed by N lines of operations. Each operation will be of one of the following three formats: - \\"CREATE file_id version\\": This command creates a new file with identifier `file_id` and stores the given `version` as its starting version. - \\"MODIFY file_id new_version\\" : This command modifies the file of the given `file_id` and updates it to `new_version`. - \\"RETRIEVE file_id\\": This command retrieves and outputs the latest version of the file with the given `file_id`. -----Output----- For each \\"RETRIEVE\\" command, output the latest version of the specified file. If the file does not exist, output \\"File does not exist\\". -----Examples----- Sample Input: 7 CREATE file1 v1 MODIFY file1 v2 RETRIEVE file1 CREATE file2 v1 RETRIEVE file2 MODIFY file1 v3 RETRIEVE file1 Sample Output: v2 v1 v3","solution":"class FileVersionSystem: def __init__(self): self.files = {} def execute(self, operations): results = [] for operation in operations: parts = operation.split() command = parts[0] file_id = parts[1] if command == \\"CREATE\\": version = parts[2] self.create(file_id, version) elif command == \\"MODIFY\\": new_version = parts[2] self.modify(file_id, new_version) elif command == \\"RETRIEVE\\": results.append(self.retrieve(file_id)) return results def create(self, file_id, version): self.files[file_id] = version def modify(self, file_id, new_version): if file_id in self.files: self.files[file_id] = new_version else: self.files[file_id] = new_version # If the file doesn\'t exist, create it with new_version def retrieve(self, file_id): return self.files.get(file_id, \\"File does not exist\\")"},{"question":"Jenna\'s birthday is coming up and she loves strings and patterns. She wants to create a special string pattern as a decoration for her birthday party. The pattern is generated by repeating a given base string a specific number of times. However, for visual interest, every second repetition of the base string should be reversed. Write a program that takes in a base string and the number of repetitions, and then outputs the final decorated string. Input The base string and number of repetitions. Output The final decorated string with alternating reversed patterns. Example 1 Input \\"ABC\\" 5 Output \\"ABC-CBA-ABC-CBA-ABC\\" Example 2 Input \\"xy\\" 3 Output \\"xy-yx-xy\\"","solution":"def create_decorated_string(base_str, repetitions): Create a decorated string by repeating a base string a specified number of times, with every second repetition reversed. :param base_str: The base string to be repeated :param repetitions: The number of repetitions :return: The final decorated string decorated_str = [] for i in range(repetitions): if i % 2 == 0: decorated_str.append(base_str) else: decorated_str.append(base_str[::-1]) return \'-\'.join(decorated_str)"},{"question":"In a galaxy far, far away, an empire forms its defense code using binary strings. Every string in this code has special properties and is generated through a distinct process. Your task is to determine if a given binary string can be produced by this generation process. The generation process follows these rules: 1. Start with a string \\"0\\". 2. For each character in the current string, append its \\"negation\\" (if the character is \'0\', append \'1\', and if the character is \'1\', append \'0\') to the string. 3. Repeat this process \'n\' times to build the string for that generation. For example, after 3 generations, the string will look like this: - Generation 0: \\"0\\" - Generation 1: \\"01\\" - Generation 2: \\"0110\\" - Generation 3: \\"01101001\\" Given a string S, determine if S can be found in any generation of this sequence. If so, identify the minimum generation G such that S is a substring of the binary string generated. ------ Input ------ The first line contains a single integer T, the number of test cases. Each of the next T lines contains a binary string S for which you need to determine the generation. ------ Output ------ For each test case, output a single line containing the minimum generation G such that S is a substring of the binary string of generation G. If no such generation exists, output -1. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ |S| ≤ 100 ------ Example ------ Input: 3 01 000 0110 Output: 1 -1 2","solution":"def find_generation(S): Determines the minimum generation G such that S is a substring of the binary string generated by the special process. If no such generation exists, returns -1. def generate(n): if n == 0: return \\"0\\" prev = generate(n - 1) return prev + \'\'.join(\'1\' if ch == \'0\' else \'0\' for ch in prev) for g in range(11): # 11 is an arbitrary safe upper limit based on constraints generated_string = generate(g) if S in generated_string: return g return -1 def find_generations(test_cases): results = [] for S in test_cases: results.append(find_generation(S)) return results"},{"question":"A group of friends are playing a game where they hand around a hot potato. The game starts with one person holding the potato, and they pass it to the next person after a fixed amount of time until a specific person is reached. The players are arranged in a circle, which means that once the potato reaches the end of the list of players, it continues again from the beginning. Given the total number of players, the starting player (who initially holds the potato), and a fixed number for how many positions to pass the potato, determine who will be holding the potato after a certain number of passes. `-----Input-----` The input consists of a single line containing three integers n, k, and m, where 1 le n le 1000 is the total number of players, 1 le k le n is the starting player, and 1 le m le 100000 is the number of times the potato is passed. `-----Output-----` Output a single integer representing the player number who will be holding the potato after m passes. `-----Examples-----` Sample Input 1: 5 2 3 Sample Output 1: 5 Sample Input 2: 6 1 10 Sample Output 2: 5","solution":"def hot_potato(n, k, m): Given the total number of players (n), the starting player (k), and the number of passes (m), determine who will be holding the potato after m passes. # Calculate final position using modular arithmetic final_position = (k - 1 + m) % n + 1 return final_position"},{"question":"Riya is working on a robotics project that involves navigating a grid. The grid is a matrix of size M x N (M rows and N columns). Each cell in the matrix can either be an obstacle (denoted by 1) or free space (denoted by 0). The robot starts at the top-left corner of the grid (0, 0) and aims to reach the bottom-right corner (M-1, N-1). The robot can only move either down or right at any point in time. Write a function to determine if there is a path from the top-left corner to the bottom-right corner of the grid. The function should return \\"Yes\\" if such a path exists, and \\"No\\" otherwise. Note that the return values are case-sensitive. Input - The first line contains the number of test cases. Each test case starts with two integers, M and N, followed by M lines each containing N integers representing the grid. Output - Print \\"Yes\\" if there is a path from the top-left to the bottom-right corner for each test case, otherwise print \\"No\\". SAMPLE INPUT 2 3 3 0 0 1 1 0 1 1 0 0 2 2 0 1 1 0 SAMPLE OUTPUT Yes No Explanation Testcase 1 - The robot can move as follows: (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2). Hence, there is a path and the output is \\"Yes\\". Testcase 2 - The robot cannot reach the bottom-right corner because there is an obstacle in every possible path to the destination. Hence, the output is \\"No\\".","solution":"def is_path_exist(M, N, grid): Function to determine if there is a path from (0,0) to (M-1,N-1) in a MxN grid :param M: Number of rows :param N: Number of columns :param grid: The grid as a list of list :return: \\"Yes\\" if path exists, \\"No\\" otherwise if grid[0][0] == 1 or grid[M-1][N-1] == 1: return \\"No\\" # Initialize a queue for BFS queue = [(0, 0)] visited = set() visited.add((0, 0)) # Directions for moving right and down directions = [(0, 1), (1, 0)] while queue: x, y = queue.pop(0) if x == M-1 and y == N-1: return \\"Yes\\" for direction in directions: new_x, new_y = x + direction[0], y + direction[1] if 0 <= new_x < M and 0 <= new_y < N and grid[new_x][new_y] == 0 and (new_x, new_y) not in visited: queue.append((new_x, new_y)) visited.add((new_x, new_y)) return \\"No\\" def solve_navigation_problem(test_cases): results = [] for case in test_cases: M, N, grid = case results.append(is_path_exist(M, N, grid)) return results"},{"question":"Given a string, determine whether it can be rearranged to form a palindrome. A string is a palindrome if it reads the same forward and backward. A string can be rearranged to form a palindrome if the frequencies of its characters meet certain criteria. Specifically, a string can form a palindrome if at most one character has an odd frequency count. Input The first line contains a string s — it consists of lowercase Latin letters and has a length from 1 to 1000. Output Print \\"YES\\" if the string can be rearranged to form a palindrome, otherwise print \\"NO\\". Examples Input aaabbbb Output YES Input cdefghmnopqrstuvw Output NO Input aabbccdd Output YES","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. :param s: Input string :return: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\". from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd frequency. if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"Given a grid of size N x M where some cells are blocked and others are not, you need to determine the shortest distance from the top-left corner to the bottom-right corner. You can move up, down, left, or right, but you cannot move onto a blocked cell. If it\'s impossible to reach the bottom-right corner, print -1. ------ Input ------ The first line contains a single integer, T, which is the number of test cases. The description of each test case follows. The first line of each test case contains two integers, N and M, the dimensions of the grid. Each of the next N lines contains M characters. A \'.\' denotes an unblocked cell, and a \'#\' denotes a blocked cell. ------ Output ------ For each test case, print a single integer which denotes the length of the shortest path from the top-left corner to the bottom-right corner. If there is no such path, print -1. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N, M ≤ 1000 ------ Sample Input ------ 2 4 4 . . . . . # # . . . . . . # . . 3 3 . # . . # . . . . ------ Sample Output ------ 6 4 ------ Explanation ------ Testcase 1: The 4x4 grid is as follows: . . . . . # # . . . . . . # . . One of the shortest paths from the top-left to the bottom-right is: Right, Right, Down, Down, Down, Right The length of the shortest path is 6. Testcase 2: The 3x3 grid is as follows: . # . . # . . . . One of the shortest paths from top-left to the bottom-right is: Down, Down, Right, Right The length of the shortest path is 4.","solution":"from collections import deque def shortest_path(grid, N, M): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set([(0, 0)]) while queue: row, col, dist = queue.popleft() if row == N-1 and col == M-1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < N and 0 <= new_col < M and grid[new_row][new_col] == \'.\' and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1 def find_shortest_path_in_tests(test_cases): results = [] for N, M, grid in test_cases: result = shortest_path(grid, N, M) results.append(result) return results"},{"question":"A store wants to manage its inventory more efficiently. The store sells `n` different types of products, each identified by a unique ID from 1 to n. They have devised a system where each product can be assigned to one or more categories (like Electronics, Groceries, Clothing, etc.). Each category is also assigned a unique ID starting from 1. Given the list of categories, write a program that prepares a report where for each category, it lists the IDs of the products that belong to it in ascending order. # Input: - The first line consists of two integers `n` and `c` (1 ≤ n, c ≤ 100), where `n` is the number of products and `c` is the number of categories. - The next line contains an integer `m` (0 ≤ m ≤ n * c), the number of category assignments. - The following `m` lines each contain two integers `p` and `k` (1 ≤ p ≤ n, 1 ≤ k ≤ c) indicating that product `p` belongs to category `k`. # Output: For each category from 1 to `c`, output a line in the form: ``` Category k: p1 p2 ... pr ``` where `k` is the category ID and `p1, p2, ..., pr` are the product IDs assigned to this category in ascending order. If a category has no products, still output the category ID followed by a colon. # Examples: Input: ``` 5 3 4 1 2 2 1 3 2 5 1 ``` Output: ``` Category 1: 2 5 Category 2: 1 3 Category 3: ``` Input: ``` 4 2 2 1 1 4 2 ``` Output: ``` Category 1: 1 Category 2: 4 ``` # Explanation: In the first example, there are 5 products and 3 categories. Product 1 is in category 2, product 2 in category 1, product 3 in category 2, and product 5 in category 1. For each category, we list the products assigned in ascending order.","solution":"def categorize_products(n, c, m, assignments): This function organizes the product-category assignments and returns a report for each category. :param n: Number of products :param c: Number of categories :param m: Number of assignments :param assignments: List of tuples (product_id, category_id) :return: List of strings representing the category report from collections import defaultdict # Initialize dictionary to hold category ids and their corresponding product lists category_dict = defaultdict(list) # Populate the dictionary with given assignments for p, k in assignments: category_dict[k].append(p) # Prepare the result for each category in ascending order result = [] for i in range(1, c + 1): if i in category_dict: category_dict[i].sort() products = \\" \\".join(map(str, category_dict[i])) result.append(f\\"Category {i}: {products}\\") else: result.append(f\\"Category {i}:\\") return result"},{"question":"A number is said to be Narcissistic if the sum of its digits each raised to the power of the number of digits equals the number itself. For example, 153 is a Narcissistic number because 1^3 + 5^3 + 3^3 = 153. Similarly, 9474 is a Narcissistic number because 9^4 + 4^4 + 7^4 + 4^4 = 9474. Write a function that checks if a given number is Narcissistic. The function should return \\"Narcissistic\\" if the number is Narcissistic and \\"Not Narcissistic\\" otherwise.","solution":"def is_narcissistic(number): Checks if a number is Narcissistic. digits = [int(d) for d in str(number)] power = len(digits) if sum(d ** power for d in digits) == number: return \\"Narcissistic\\" else: return \\"Not Narcissistic\\""},{"question":"Mina\'s Geometric Pattern Finder Mina is impressed by geometric shapes and patterns. She loves to identify specific patterns in numerical sequences. Today, she is interested in a famous problem called the \\"Arithmetic progression.\\" Mina has a sequence of integers, and she wants to find the length of the longest arithmetic progression (AP) within the sequence. An arithmetic progression is a sequence of numbers in which the difference between consecutive terms is constant. For example, in the sequence [3, 6, 9, 12], the length of the longest arithmetic progression is 4, with a constant difference of 3. Your task is to help Mina by writing a program that determines the length of the longest arithmetic progression in a given sequence of integers. Input format The input consists of a single line. The first value is an integer `N` (2 ≤ N ≤ 10^5), denoting the number of elements in the sequence. The subsequent N values are integers, representing the elements of the sequence. Output format Output a single integer representing the length of the longest arithmetic progression in the sequence. Input example 1 6 1 7 10 13 14 19 Output example 1 4 Input example 2 5 1 2 3 4 5 Output example 2 5 Input example 3 6 9 4 7 2 10 4 Output example 3 3 Explanation - For Input example 1, the longest arithmetic progression is [1, 7, 13, 19] with a difference of 6, thus the output is 4. - For Input example 2, the entire sequence [1, 2, 3, 4, 5] is an arithmetic progression with a difference of 1, so the output is 5. - For Input example 3, the longest arithmetic progression is [4, 7, 10] with a difference of 3, hence the output is 3.","solution":"def longest_arithmetic_progression_length(arr): Determine the length of the longest arithmetic progression in the given sequence. :param arr: List of integers :return: Integer representing the length of the longest arithmetic progression import collections if len(arr) <= 1: return len(arr) # Sort the array arr.sort() # Use a table where dp[i][d] means the length of the longest AP ending with arr[i] and common difference d dp = collections.defaultdict(lambda: collections.defaultdict(int)) max_length = 1 for i in range(len(arr)): for j in range(i + 1, len(arr)): d = arr[j] - arr[i] dp[j][d] = dp[i][d] + 1 max_length = max(max_length, dp[j][d] + 1) return max_length"},{"question":"A railway station has a system to track the arrival and departure of trains. Each train is identified by a unique integer ID. At any given moment, only one train can be on any of the multiple tracks available at the station for sorting and routing trains. The station maintains a log of events in chronological order where each event is either an arrival or departure of a train. You are given an array of events where each event contains a tuple `(time, event_type, train_id)`: - `time` (integer) represents the time of the event. - `event_type` (string) can be either \\"arrival\\" or \\"departure\\". - `train_id` (integer) is the unique identifier of the train. At the same time, the station has to maintain the order of arrivals and departures in an orderly manner to ensure smooth operation (no train can depart before it has arrived, and if a train arrives or departs at the same time, arrivals are processed before departures). Design an algorithm that processes these events and prints the sequence of train ids on the track in the order in which they are present after all events are processed. Assume all times are distinct. Example 1: Input: events = [ (1, \\"arrival\\", 101), (2, \\"arrival\\", 102), (3, \\"departure\\", 101), (4, \\"arrival\\", 103), (5, \\"departure\\", 102) ] Output: [103] Example 2: Input: events = [ (1, \\"arrival\\", 201), (2, \\"arrival\\", 202), (3, \\"departure\\", 202), (4, \\"arrival\\", 203), (5, \\"departure\\", 201), (6, \\"arrival\\", 204), (7, \\"departure\\", 204) ] Output: [203] Your task: Complete the function `track_trains(events: List[Tuple[int, str, int]]) -> List[int]` which takes the list of events and returns the list of train ids present on the track after processing all events. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ len(events) ≤ 10^5 1 ≤ train_id ≤ 10^9 1 ≤ time ≤ 10^9","solution":"from typing import List, Tuple def track_trains(events: List[Tuple[int, str, int]]) -> List[int]: track = set() for event in events: time, event_type, train_id = event if event_type == \\"arrival\\": track.add(train_id) elif event_type == \\"departure\\": track.discard(train_id) return sorted(track)"},{"question":"-----Input----- The input consists of two lines. The first line contains a single positive integer n (1 ≤ n ≤ 100). The second line contains n space-separated integers, each an integer between 1 and 100. -----Output----- Output a single integer, which is the number of unique elements in the input. -----Example----- Input 5 1 2 2 3 4 Output 4","solution":"def count_unique_elements(n, elements): Returns the number of unique elements in the input list. :param n: int, the number of elements in the input list :param elements: list of integers, the input elements :return: int, number of unique elements return len(set(elements))"},{"question":"# Battle of the Bands A famous music competition, “Battle of the Bands”, is in full swing. There are several bands competing, and each band consists of one or more members. The skill of each band is determined by the sum of skills of its members. During the competition, each band must perform a number of rounds. In each round, only one member from each band performs. The skill of the member who performs in each round is added to the total score of the band for that round. The competition is structured in a way that both bands go head-to-head in each round until one of the bands can no longer perform due to running out of members. The winning band is determined by their total score across all rounds. Given the skills of members in two competing bands, write a program to determine which band wins assuming members with the highest skill perform first in each round. Input The input is given in the following format. ``` n m s1 s2 ... sn t1 t2 ... tm ``` The first line contains two integers, `n` and `m` (`1 <= n, m <= 1000`), representing the number of members in Band A and Band B respectively. The second line contains `n` integers `s1, s2, ..., sn` (`1 <= si <= 1000`), representing the skill levels of Band A\'s members. The third line contains `m` integers `t1, t2, ..., tm` (`1 <= ti <= 1000`), representing the skill levels of Band B’s members. Output Output `A` if Band A wins, `B` if Band B wins, or `Draw` if both bands have equal scores. Examples Input ``` 3 3 4 8 7 5 6 9 ``` Output ``` B ``` Input ``` 4 3 10 20 30 40 5 15 25 ``` Output ``` A ``` Input ``` 5 5 10 10 10 10 10 10 10 10 10 10 ``` Output ``` Draw ```","solution":"def battle_of_the_bands(n, m, skills_a, skills_b): # Sort both bands\' skills in descending order skills_a.sort(reverse=True) skills_b.sort(reverse=True) # Initialize scores score_a = 0 score_b = 0 # Determine the number of rounds rounds = min(n, m) # Simulate each round for i in range(rounds): score_a += skills_a[i] score_b += skills_b[i] # If one band has members left, add the remaining skills to their score if n > m: score_a += sum(skills_a[m:]) elif m > n: score_b += sum(skills_b[n:]) # Determine the winner if score_a > score_b: return \'A\' elif score_b > score_a: return \'B\' else: return \'Draw\'"},{"question":"You are given a grid-based maze composed of cells where each cell is either empty (denoted by \'.\') or contains an obstacle (denoted by \'#\'). You\'re tasked with finding the shortest path from a starting point to a destination point without stepping on obstacles. The maze allows four possible moves from a cell: up, down, left, and right. Diagonal moves are not allowed. To complicate things, there\'s also some cells containing a temporary portal (denoted by \'P\'). If you step on a portal, you will be randomly teleported to another portal in the maze. Each portal cell can only function one time for teleportation to another portal, after which it becomes empty. The goal is to minimize the total number of steps (including teleports and normal moves) to reach the destination. You are given the details of the maze, the start position and the end position from which you have to find the shortest path using the fewest steps. -----Input----- The first line of input contains two integers, n and m (1 leq n, m leq 1000), the number of rows and columns in the maze, respectively. The following n lines each contain m characters, representing the grid\'s cells. The next line contains two integers, x_s and y_s (0 le x_s < n, 0 le y_s < m), the start position. The following line contains two integers, x_d and y_d (0 le x_d < n, 0 le y_d < m), the destination position. -----Output----- Output the minimum number of steps required to reach the destination from the start. If it is impossible to reach the destination, output -1. -----Examples----- Sample Input: 5 5 . . . . . . # . # . . # . # . . . P . . . # . # . 0 0 4 4 Sample Output: 8 Sample Input: 3 3 . # P . # . . . P 0 0 2 2 Sample Output: 4","solution":"from collections import deque def bfs(maze, start, end): n = len(maze) m = len(maze[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add((start[0], start[1])) # Finding all portals portals = {} for i in range(n): for j in range(m): if maze[i][j] == \'P\' and (i, j) != start and (i, j) != end: if \'P\' not in portals: portals[\'P\'] = [] portals[\'P\'].append((i, j)) def get_portal_destination(source): for portal in portals.get(\'P\', []): if portal != source: return portal return None while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) if maze[x][y] == \'P\' and \'P\' in portals: portal_dest = get_portal_destination((x, y)) if portal_dest and portal_dest not in visited: visited.add(portal_dest) queue.append((portal_dest[0], portal_dest[1], dist + 1)) portals.pop(\'P\', None) # Portal can only function once return -1 def shortest_path_with_portals(n, m, maze, start, end): return bfs(maze, start, end)"},{"question":"Aoi has recently started learning about matrices in her linear algebra class. Her instructor has given her a task to determine certain properties of square matrices. Specifically, she needs to check if a given square matrix is invertible or not. A matrix is invertible if and only if its determinant is non-zero. The task is to write a program that identifies if the given matrix is invertible. Input Format: Line 1: N N - An integer representing the size of the NxN matrix. Lines 2 to N+1: The elements of the matrix where each line contains N integers separated by spaces, representing the rows of the matrix. Output Format: Print \\"YES\\" if the matrix is invertible, otherwise \\"NO\\". Constraints: 1 <= N <= 500 -1000 <= Elements of the matrix <= 1000 Sample Input: 3 1 2 3 0 4 5 1 0 6 Sample Output: YES Explanation: For the given matrix, the determinant is 1(4*6 - 5*0) - 2(0*6 - 5*1) + 3(0*0 - 4*1) = 24, which is non-zero, therefore the matrix is invertible and the output is \\"YES\\".","solution":"import numpy as np def is_invertible(matrix): Determines if the given square matrix is invertible by checking its determinant. Params: matrix (list of list of int): A square matrix Returns: str: \\"YES\\" if the matrix is invertible, otherwise \\"NO\\" determinant = np.linalg.det(matrix) if determinant != 0: return \\"YES\\" else: return \\"NO\\" # Reading input def main(): import sys input = sys.stdin.read() data = input.splitlines() N = int(data[0]) matrix = [list(map(int, row.split())) for row in data[1:N+1]] print(is_invertible(matrix)) if __name__ == \\"__main__\\": main()"},{"question":"You are organizing a relay race where participants pass a baton in a circular track. You need to determine the next participant to receive the baton after a certain number of passes. Consider a list of n participants arranged in a circular manner. Each participant is identified by a unique integer from 1 to n. The race always starts with the first participant. Write a function to find out who will have the baton after k passes. Function Description Complete the function findNextParticipant in the editor below. findNextParticipant has the following parameters: int n: the number of participants int k: the number of passes Returns: int: the participant who receives the baton Input Format A single line of two space-separated integers denoting the respective values of n (number of participants) and k (number of passes). Constraints 1leq nleq 100 0leq kleq 10^9 Sample Input 0 5 2 Sample Output 0 3 Explanation 0 If there are 5 participants, the participants are numbered as follows: 1, 2, 3, 4, 5. Starting with participant 1, the baton will be passed twice: - First pass: Participant 1 passes to Participant 2. - Second pass: Participant 2 passes to Participant 3. Therefore, after 2 passes, the baton will be with Participant 3. Sample Input 1 6 11 Sample Output 1 6 Explanation 1 If there are 6 participants, the baton will make 11 passes in a circular manner. Starting from Participant 1: - 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 1 -> 2 -> 3 -> 4 -> 5 On the 11th pass, the baton will be with Participant 5. Sample Input 2 3 3 Sample Output 2 1 Explanation 2 If there are 3 participants, the baton will make 3 passes in a circular manner. Starting from Participant 1: - 1 -> 2 -> 3 After 3 passes, the baton will return to Participant 1.","solution":"def findNextParticipant(n, k): Determines the participant who will receive the baton after k passes in a relay race of n participants. Parameters: n (int): The number of participants. k (int): The number of passes. Returns: int: The participant who receives the baton. return (k % n) + 1"},{"question":"Raul is building a toy train track in his living room. He has N track segments, each with a specific length given in an array. Raul wants to join these segments to form a single continuous track. However, he can only join two segments at a time, and each join operation costs a value equal to the sum of the lengths of the two segments being joined. Raul wants to minimize the total cost of joining all the segments. Given an array of integers `lengths` where `lengths[i]` is the length of the i-th track segment, find the minimum total cost to join all the track segments into one. Example 1: Input: N = 4 lengths[] = {4, 3, 2, 6} Output: 29 Explanation: First, join segments 2 and 3 (2+3=5), now segments are {4, 5, 6}. Then, join segments 4 and 5 (4+5=9), now segments are {9, 6}. Finally, join segments 9 and 6 (9+6=15), total cost is 5 + 9 + 15 = 29. Example 2: Input: N = 5 lengths[] = {1, 2, 3, 4, 5} Output: 33 Explanation: First, join segments 1 and 2 (1+2=3), now segments are {3, 3, 4, 5}. Then, join segments 3 and 3 (3+3=6), now segments are {6, 4, 5}. Next, join segments 4 and 5 (4+5=9), now segments are {6, 9}. Finally, join segments 6 and 9 (6+9=15), total cost is 3 + 6 + 9 + 15 = 33. Your Task: You don\'t need to read input or print anything. Complete the function `minCost()` which takes the number of segments N and the array `lengths[]` as input parameters and returns the minimum total cost to join all the segments. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 1 ≤ lengths[i] ≤ 10^4","solution":"import heapq def minCost(N, lengths): # Min-heap to store the lengths heapq.heapify(lengths) total_cost = 0 while len(lengths) > 1: # Pop two smallest lengths first = heapq.heappop(lengths) second = heapq.heappop(lengths) # Cost to join these two segments local_cost = first + second total_cost += local_cost # Push the resulting segment back into the heap heapq.heappush(lengths, local_cost) return total_cost"},{"question":"In a coding competition, participants are required to determine the output of a special function. This function takes an integer input `n` and returns the largest integer `k` (where k ≥ 1) such that the sum of all integers from 1 to k (i.e., the sum of the first k natural numbers) is less than or equal to `n`. Input The first line of input contains the number of test cases (T). Each of the next T lines contains a single positive integer `n`. Output For each test case, print the largest integer `k`. Constraints: 1 < T ≤ 10 1 < n ≤ 10^18 SAMPLE INPUT 2 10 20 SAMPLE OUTPUT 4 5 Explanation Case 1: The sum of the first 4 natural numbers is 1+2+3+4 = 10, which is ≤ 10. The sum of the first 5 natural numbers is 1+2+3+4+5 = 15, which is > 10. So, the largest k is 4. Case 2: The sum of the first 5 natural numbers is 1+2+3+4+5 = 15, which is ≤ 20. The sum of the first 6 natural numbers is 1+2+3+4+5+6 = 21, which is > 20. So, the largest k is 5.","solution":"def largest_k(n): Returns the largest integer k such that sum of the first k natural numbers is less than or equal to n. k = 0 total = 0 while total + k + 1 <= n: k += 1 total += k return k def solve(test_cases): results = [] for n in test_cases: results.append(largest_k(n)) return results"},{"question":"Julia loves organizing marbles. She wants to arrange all her marbles in distinct piles such that each pile contains a unique number of marbles. More specifically, she wants to start by placing the marbles in a set of piles such that the first pile contains one marble, the second pile contains two marbles, and so on until no more marbles are left. If she cannot make a complete pile according to these rules, she\'ll stop at the last full pile she can complete. Given the total number of marbles, determine the number of complete piles Julia can form. Input The first line contains a single integer, t (1 ≤ t ≤ 10^4), representing the number of test cases. Each of the following t lines contains a single integer n (1 ≤ n ≤ 10^9) representing the total number of marbles in one test case. Output For each test case, output a single integer representing the maximum number of complete piles that can be formed. Example Input 3 7 10 30 Output 3 4 7 Explanation - In the first test case, Julia can form piles with 1, 2, and 3 marbles (1 + 2 + 3 = 6). With 7 marbles, she cannot form the next pile which should have 4 marbles, so the answer is 3. - In the second test case, Julia can form piles with 1, 2, 3, and 4 marbles (1 + 2 + 3 + 4 = 10). She uses up all 10 marbles, so the answer is 4. - In the third test case, Julia can form piles with 1, 2, 3, 4, 5, 6, and 7 marbles (1 + 2 + 3 + 4 + 5 + 6 + 7 = 28). She uses up 28 marbles out of 30, so the answer is 7.","solution":"def max_complete_piles(n): Given the total number of marbles, determine the number of complete piles that can be formed. Each pile contains a unique number of marbles, starting from 1 marble in the first pile, 2 marbles in the second pile, and so on. `n`: total number of marbles Returns an integer representing the maximum number of complete piles. piles = 0 i = 1 while n >= i: n -= i piles += 1 i += 1 return piles def max_complete_piles_for_cases(t, cases): For multiple test cases, find the number of complete piles for each case and return the results. `t`: the number of test cases `cases`: a list of integers, each representing the total number of marbles for a test case Returns a list of integers representing the number of complete piles for each test case. results = [] for n in cases: results.append(max_complete_piles(n)) return results"},{"question":"For a sequence of integers B = {b_0, b_1, ..., b_{n-1}} which may contain both positive and negative numbers, find the maximum sum of a contiguous subarray. Constraints * 1 leq n leq 100,000 * -10^9 leq b_i leq 10^9 Input A sequence is given in the following format. n b_0 ; b_1 ; ,..., ; b_{n-1} Output Print the maximum sum of a contiguous subarray. Example Input 5 -2 1 -3 4 -1 Output 4","solution":"def max_subarray_sum(n, arr): Returns the maximum sum of a contiguous subarray. Parameters: n (int): The number of elements in the sequence. arr (list of int): The sequence of integers. Returns: int: The maximum sum of a contiguous subarray. max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Flora loves playing with strings and creating new patterns. One day she decided to generate a key string based on two input strings: a base string and a pattern string. The key string is constructed by replacing each occurrence of \'?\' in the base string with the corresponding character from the pattern string. Your task is to help Flora by writing a program that takes a base string and a pattern string and constructs the key string according to the described rule. # Input - The first line of the input consists of an integer T (1 ≤ T ≤ 100), the number of test cases. - For each test case: - The first line contains a base string (1 ≤ length of the base string ≤ 100). - The second line contains a pattern string (length of the pattern string is the same as the number of \'?\' in the base string). # Output - For each test case, print the constructed key string. # Example Input: ``` 2 a?c?e bd he??o ll ``` Output: ``` abcde hello ``` # Explanation: - For the first test case, the base string `a?c?e` and the pattern string `bd` are combined to form `abcde`. - For the second test case, the base string `he??o` and the pattern string `ll` are combined to form `hello`.","solution":"def construct_key_string(base_str, pattern_str): Constructs the key string by replacing each occurrence of \'?\' in the base_str with the corresponding character from the pattern_str. key_str = [] pattern_index = 0 for char in base_str: if char == \'?\': key_str.append(pattern_str[pattern_index]) pattern_index += 1 else: key_str.append(char) return \'\'.join(key_str) def process_test_cases(test_cases): results = [] for base_str, pattern_str in test_cases: results.append(construct_key_string(base_str, pattern_str)) return results"},{"question":"Given an array of integers representing elevations, where the width of each elevation is 1, compute how much water can be trapped after it rains. Example 1: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The total amount of water trapped would be 6 units. Example 2: Input: [4,2,0,3,2,5] Output: 9 Explanation: The total amount of water trapped would be 9 units. Note: The array will have a non-negative length not exceeding 10,000. Each element in the array represents a non-negative integer value.","solution":"def trap(height): Given an array of integers representing elevations, where the width of each elevation is 1, compute how much water can be trapped after it rains. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Given a list of integers, find the length of the longest subarray where all its elements are distinct. Example 1: Input: nums = [2, 4, 6, 2, 3, 6, 9] Output: 4 Explanation: The longest subarray with distinct elements is [2, 3, 6, 9], and its length is 4. Example 2: Input: nums = [1, 2, 3, 4, 5] Output: 5 Explanation: All elements are distinct, so the longest subarray is the entire array [1, 2, 3, 4, 5], and its length is 5. Example 3: Input: nums = [7, 3, 7, 3, 1, 2, 3] Output: 4 Explanation: The longest subarray with distinct elements is [7, 3, 1, 2], and its length is 4. Example 4: Input: nums = [1, 1, 1, 1] Output: 1 Explanation: Each element is the same, so the longest subarray with distinct elements is [1], and its length is 1. Constraints: - 1 <= nums.length <= 10^5 - 0 <= nums[i] <= 10^9","solution":"def length_of_longest_distinct_subarray(nums): Returns the length of the longest subarray with all distinct elements. n = len(nums) if n == 0: return 0 max_length = 0 left = 0 seen = {} for right in range(n): if nums[right] in seen and seen[nums[right]] >= left: left = seen[nums[right]] + 1 seen[nums[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"A company has a list of employees and their respective salaries. The company wants to introduce a new annual bonus plan in which specific employees receive an additional bonus on top of their regular salary, based on certain conditions. The conditions for the bonus are as follows: - If an employee\'s salary is less than 50,000, they receive a 5,000 bonus. - If an employee\'s salary is between 50,000 and 75,000 (inclusive), they receive a 3,000 bonus. - If an employee\'s salary is more than 75,000, they receive a 2,000 bonus. You need to write a function `calculateBonuses` that takes in a list of salaries and returns a list of the total compensation (salary + bonus) for each employee. Function Description Complete the `calculateBonuses` function in the editor below. `calculateBonuses` has the following parameter(s): - `int salaries[n]`: an array of integers representing the annual salaries of the employees. Returns - `int[n]`: an array of integers representing the total compensation for each employee after adding the bonus. Input Format - The first line contains an integer `n`, the number of employees. - The second line contains `n` space-separated integers describing the respective values of `salaries_0, salaries_1, ..., salaries_{n-1}`. Constraints - 1 leq n leq 1000 - 0 leq salaries[i] leq 10^9 Example Sample Input 0 5 45000 55000 60000 80000 120000 Sample Output 0 50000 58000 63000 82000 122000 Explanation 0 - The employee with a salary of 45000 receives a 5000 bonus, resulting in a 50000 total compensation. - The employee with a salary of 55000 receives a 3000 bonus, resulting in a 58000 total compensation. - The employee with a salary of 60000 receives a 3000 bonus, resulting in a 63000 total compensation. - The employee with a salary of 80000 receives a 2000 bonus, resulting in a 82000 total compensation. - The employee with a salary of 120000 receives a 2000 bonus, resulting in a 122000 total compensation. Sample Input 1 3 30000 75000 90000 Sample Output 1 35000 78000 92000 Explanation 1 - The employee with a salary of 30000 receives a 5000 bonus, resulting in a 35000 total compensation. - The employee with a salary of 75000 receives a 3000 bonus, resulting in a 78000 total compensation. - The employee with a salary of 90000 receives a 2000 bonus, resulting in a 92000 total compensation.","solution":"def calculateBonuses(salaries): Calculate the total compensation for each employee based on their salary and bonus conditions. Parameters: salaries (list of int): List of annual salaries of the employees. Returns: list of int: List of total compensations after adding the bonus. total_compensations = [] for salary in salaries: if salary < 50000: bonus = 5000 elif 50000 <= salary <= 75000: bonus = 3000 else: bonus = 2000 total_compensations.append(salary + bonus) return total_compensations # Example usage: # salaries = [45000, 55000, 60000, 80000, 120000] # print(calculateBonuses(salaries))"},{"question":"Write a program to manage a list of integers with the following operations: * insert(p, x): insert integer x at position p (0-indexed). * delete(p): delete the element at position p (0-indexed). * get(p): output the element at position p (0-indexed). The initial list is empty. Constraints * 0 ≤ q ≤ 100000 * 0 ≤ p ≤ current length of the list * -1000 ≤ x ≤ 1000 Input q query1 query2 : queryq In the first line, q (the number of queries) is given. Then, the ith query queryi is given in one of the following formats: Insert operation: 1 p x Delete operation: 2 p Get operation: 3 p Output For each get operation, print the value at position p. Examples Input 5 1 0 10 1 1 20 3 1 2 0 3 0 Output 20 20 Input 4 1 0 -5 1 0 15 3 1 2 1 Output -5","solution":"class IntegerListManager: def __init__(self): self.list = [] def insert(self, p, x): self.list.insert(p, x) def delete(self, p): if 0 <= p < len(self.list): self.list.pop(p) def get(self, p): if 0 <= p < len(self.list): return self.list[p] def process_queries(queries): response = [] manager = IntegerListManager() for query in queries: parts = query.split() operation = int(parts[0]) if operation == 1: p = int(parts[1]) x = int(parts[2]) manager.insert(p, x) elif operation == 2: p = int(parts[1]) manager.delete(p) elif operation == 3: p = int(parts[1]) response.append(manager.get(p)) return response"},{"question":"Your task is to write a program to simulate a simplified version of a banking system. The system should support creating accounts, depositing money, withdrawing money, and transferring money between accounts. Each account is identified by a unique account number and has an initial balance of 0 when created. The banking system should ensure that no transaction results in a negative balance. **Input** The input contains multiple lines of commands. Each command is formatted like one of the following forms: - `CREATE account_number`: Create a new account with the given account number. - `DEPOSIT account_number amount`: Deposit the specified amount of money into the account. - `WITHDRAW account_number amount`: Withdraw the specified amount of money from the account. - `TRANSFER from_account_number to_account_number amount`: Transfer the specified amount of money from one account to another. - `BALANCE account_number`: Print the current balance of the specified account. - `END`: Indicate the end of input. **Output** For each balance inquiry (`BALANCE` command), output the balance of the specified account. If a command is not executable (for example, attempting to withdraw more money than is available), print an error message \\"ERROR\\". **Example** **Input** ``` CREATE 123 DEPOSIT 123 500 BALANCE 123 WITHDRAW 123 300 BALANCE 123 WITHDRAW 123 300 TRANSFER 123 456 100 CREATE 456 TRANSFER 123 456 100 BALANCE 456 BALANCE 123 END ``` **Output** ``` 500 200 ERROR ERROR 100 100 ``` In the provided example: - An account `123` is created. - 500 units of money are deposited into account `123`. - The balance of account `123` is shown as 500. - 300 units of money are withdrawn from account `123`, making its balance 200. - An attempt to withdraw 300 units is made when only 200 units are available, resulting in an \\"ERROR\\". - An attempt to transfer 100 units is made to account `456`, which has not been created yet, resulting in an \\"ERROR\\". - Account `456` is created. - 100 units are successfully transferred from account `123` to `456`. - The balance of account `456` is shown as 100. - The balance of account `123` is shown as 100.","solution":"class BankSystem: def __init__(self): self.accounts = {} def create_account(self, account_number): if account_number not in self.accounts: self.accounts[account_number] = 0 def deposit(self, account_number, amount): if account_number in self.accounts: self.accounts[account_number] += amount else: print(\\"ERROR\\") def withdraw(self, account_number, amount): if account_number in self.accounts and self.accounts[account_number] >= amount: self.accounts[account_number] -= amount else: print(\\"ERROR\\") def transfer(self, from_account, to_account, amount): if from_account in self.accounts and to_account in self.accounts and self.accounts[from_account] >= amount: self.accounts[from_account] -= amount self.accounts[to_account] += amount else: print(\\"ERROR\\") def balance(self, account_number): if account_number in self.accounts: print(self.accounts[account_number]) else: print(\\"ERROR\\") def process_command(self, command): tokens = command.split() cmd = tokens[0] if cmd == \\"CREATE\\": self.create_account(tokens[1]) elif cmd == \\"DEPOSIT\\": self.deposit(tokens[1], int(tokens[2])) elif cmd == \\"WITHDRAW\\": self.withdraw(tokens[1], int(tokens[2])) elif cmd == \\"TRANSFER\\": self.transfer(tokens[1], tokens[2], int(tokens[3])) elif cmd == \\"BALANCE\\": self.balance(tokens[1]) elif cmd == \\"END\\": return False return True def run_banking_system(commands): bank = BankSystem() for command in commands: if not bank.process_command(command): break"},{"question":"Given a collection of books, each represented by a unique identifier and sorted by their genre, you need to find the most popular genre based on user reviews. Each user\'s review consists of a sequence of book identifiers indicating the books they enjoyed. The most popular genre should be the one with the highest count of liked books across all users. If two or more genres have the same count, consider the genre that comes first lexicographically. Input The input consists of multiple test cases. Each test case starts with a line containing two positive integers, B and U, where B denotes the number of books and U denotes the number of users. > B U Each of the following B lines contains a book identifier and a genre name separated by a space. Book identifiers are unique integers between 1 and 1000, and genres are strings without spaces. > BookID Genre Each of the following U lines contains a number M followed by a sequence of M book identifiers indicating the books enjoyed by a user. M is a positive integer less than or equal to B. > M BookID1 BookID2 ... BookIDM The input ends with a line containing zero for both B and U. Output For each test case, print a single line containing the name of the most popular genre. If there is a tie, print the lexicographically smallest genre. Example Input 5 3 1 Fantasy 2 ScienceFiction 3 Fantasy 4 Mystery 5 Fantasy 3 1 2 5 2 2 4 1 5 4 2 1 Drama 2 Romance 3 Drama 4 Comedy 2 1 4 2 2 3 0 0 Output Fantasy Drama","solution":"def most_popular_genre(book_data, user_reviews): from collections import defaultdict genre_count = defaultdict(int) # Map book_id to genre book_to_genre = {} for book_id, genre in book_data: book_to_genre[book_id] = genre # Count genre based on user reviews for review in user_reviews: for book_id in review[1:]: if book_id in book_to_genre: genre_count[book_to_genre[book_id]] += 1 # Find the most popular genre (or smallest lexicographically in case of tie) most_popular = None max_count = -1 for genre, count in genre_count.items(): if count > max_count or (count == max_count and genre < most_popular): most_popular = genre max_count = count return most_popular def process_input(input_text): input_lines = input_text.strip().split(\'n\') output = [] index = 0 while index < len(input_lines): B, U = map(int, input_lines[index].split()) if B == 0 and U == 0: # End of input break index += 1 book_data = [] for _ in range(B): book_id, genre = input_lines[index].split() book_data.append((int(book_id), genre)) index += 1 user_reviews = [] for _ in range(U): review = list(map(int, input_lines[index].split())) user_reviews.append(review) index += 1 output.append(most_popular_genre(book_data, user_reviews)) return output def main(): input_text = 5 3 1 Fantasy 2 ScienceFiction 3 Fantasy 4 Mystery 5 Fantasy 3 1 2 5 2 2 4 1 5 4 2 1 Drama 2 Romance 3 Drama 4 Comedy 2 1 4 2 2 3 0 0 results = process_input(input_text) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"# Rotate Matrix Given an `n x n` 2D matrix `matrix`, rotate the matrix by 90 degrees (clockwise). You need to modify the input matrix in-place. Do not return anything from your function. # Example: ``` Input: [ [1,2,3], [4,5,6], [7,8,9] ] Output: [ [7,4,1], [8,5,2], [9,6,3] ] Input: [ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ] Output: [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ] ```","solution":"def rotate(matrix): Rotates the n x n 2D matrix by 90 degrees clockwise in-place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i + 1, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Write a function that takes a string of alphabets as input and returns a string with each letter shifted by 3 positions in the ASCII table. For example, \'a\' becomes \'d\', \'b\' becomes \'e\', and so on. The letters should wrap around at \'z\' to continue from \'a\' again. Do not shift any characters that are not lowercase letters. Function signature: `shift_letters(input_string: str) -> str` **Examples:** ``` shift_letters(\\"abc\\") -> \\"def\\" shift_letters(\\"xyz\\") -> \\"abc\\" shift_letters(\\"hello world!\\") -> \\"khoor zruog!\\" ``` **Constraints:** - The input string will only contain lowercase alphabets and spaces. - In the output, spaces should remain unchanged.","solution":"def shift_letters(input_string: str) -> str: Shifts each letter in the input string by 3 positions in the ASCII table. Characters other than lowercase alphabets remain unchanged. shifted_string = [] for char in input_string: if char.isalpha(): shifted_char = chr((ord(char) - ord(\'a\') + 3) % 26 + ord(\'a\')) shifted_string.append(shifted_char) else: shifted_string.append(char) return \'\'.join(shifted_string)"},{"question":"Given a list of integers, write a function that finds and returns the length of the longest increasing subsequence in the list. The subsequence does not need to be contiguous, but the integers in the subsequence must be in ascending order. Example 1: Input: [10, 9, 2, 5, 3, 7, 101, 18] Output: 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Example 2: Input: [0, 1, 0, 3, 2, 3] Output: 4 Explanation: The longest increasing subsequence is [0, 1, 2, 3], therefore the length is 4. Example 3: Input: [7, 7, 7, 7, 7, 7, 7] Output: 1 Explanation: The longest increasing subsequence is [7], therefore the length is 1. Constraints: - 1 <= arr.length <= 2500 - -10^4 <= arr[i] <= 10^4","solution":"def length_of_lis(nums): Finds the length of the longest increasing subsequence in the given list of integers. :param nums: List[int] - A list of integers. :return: int - The length of the longest increasing subsequence. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given an array of N integers: B_1, B_2, ..., B_N. You can perform the following operation zero or more times: - Choose two distinct indices i and j such that 1 ≤ i, j ≤ N and i ≠ j, and swap B_i and B_j. Determine the minimum number of swaps required to sort the array in non-decreasing order. -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ B_i ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N B_1 B_2 B_3 ... B_{N-1} B_{N} -----Output----- Print the minimum number of swaps required to sort the array in non-decreasing order. -----Sample Input----- 5 3 1 2 5 4 -----Sample Output----- 3 Explanation: We can sort the array in three swaps: - Swap B_2 (1) with B_1 (3): [1, 3, 2, 5, 4] - Swap B_3 (2) with B_2 (3): [1, 2, 3, 5, 4] - Swap B_5 (4) with B_4 (5): [1, 2, 3, 4, 5] Thus, the minimum number of swaps required to sort the array is 3.","solution":"def min_swaps_to_sort(arr): Given a list of integers `arr`, return the minimum number of swaps required to sort the list in non-decreasing order. n = len(arr) # Create a list of tuples where each tuple is (index, value) arr_pos = list(enumerate(arr)) # Sort the list by the value of each tuple arr_pos.sort(key=lambda it: it[1]) # Create a visited array to keep track of already visited elements visited = [False] * n # Initialize result swaps = 0 # Traverse the array elements for i in range(n): # Already visited or already in the correct place if visited[i] or arr_pos[i][0] == i: continue # Find the number of nodes in the current cycle cycle_size = 0 j = i while not visited[j]: # Mark as visited visited[j] = True # Move to the next node j = arr_pos[j][0] cycle_size += 1 # If cycle size is more than 1, then the number of swaps needed for this cycle is cycle_size - 1 if cycle_size > 1: swaps += (cycle_size - 1) return swaps # Reading input def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) B = list(map(int, data[1:])) # Get the result and print it result = min_swaps_to_sort(B) print(result)"},{"question":"Alex has a list of integers and he wants to write a program that filters out all the even numbers from his list and counts how many numbers are divisible by 3. The program should first filter out the even numbers from the list and then count the remaining numbers that are divisible by 3. You are to write a function that takes a list of integers as input, filters out the even numbers, and returns the count of numbers that are divisible by 3 from the remaining list. Function Signature: `def count_divisible_by_3(lst: List[int]) -> int` **Input** - A list of integers. **Output** - An integer representing the count of numbers that are divisible by 3 from the filtered list. **Example** Input: ``` [1, 2, 3, 4, 5, 6, 7, 8, 9] ``` Output: ``` 2 ``` Explanation: After filtering out the even numbers, the remaining list is `[1, 3, 5, 7, 9]`. Out of these, `3` and `9` are divisible by 3. Hence, the output is `2`.","solution":"from typing import List def count_divisible_by_3(lst: List[int]) -> int: Filters out all even numbers from the list and counts how many remaining numbers are divisible by 3. Args: lst (List[int]): A list of integers. Returns: int: The count of numbers divisible by 3 from the filtered list. filtered_list = [x for x in lst if x % 2 != 0] count = sum(1 for x in filtered_list if x % 3 == 0) return count"},{"question":"Problem G: Alien Signal Transmission In a faraway galaxy, scientists have detected a series of signals being transmitted from an unknown alien civilization. Each signal consists of a unique pattern of frequencies. The scientists are trying to understand the underlying structure of these signals, and they need your help to analyze and summarize the transmitting patterns. Each signal is represented as a sequence of integers, each integer representing a unique frequency. The scientists have collected multiple signals and want to determine the length of the longest sequence of unique frequencies for each signal. Your task is to write a program that reads multiple signals and outputs the length of the longest sequence of unique frequencies for each signal. Input The first line contains a single integer T (1 <= T <= 100), the number of signals. Each of the next T lines describes a signal sequence. Each signal sequence starts with an integer N (1 <= N <= 1000), the number of frequencies in the sequence, followed by N integers representing the frequencies (0 <= frequency <= 1000). Output For each signal, print the length of the longest sequence of unique frequencies. Examples Input 3 5 1 2 3 4 5 6 1 2 2 3 4 5 8 1 2 3 4 5 6 7 8 Output 5 5 8 Explanation In the first signal, all frequencies are unique, so the length of the longest sequence is 5. In the second signal, the sequence with unique frequencies is [1, 2, 3, 4, 5], thus the length is 5. In the third signal, all frequencies are unique, so the length of the longest sequence is 8.","solution":"def longest_unique_sequence(T, signals): Determines the length of the longest sequence of unique frequencies for each signal. Parameters: T (int): The number of signals. signals (list of lists): List containing T lists, each representing a signal sequence of frequencies. Returns: list of ints: A list containing the length of the longest unique sequence for each signal. lengths = [] for signal in signals: unique_frequencies = set(signal) lengths.append(len(unique_frequencies)) return lengths"},{"question":"Given a list of integers, find all unique triplets in the list which gives the sum of zero. Example: Given array nums = [-1, 0, 1, 2, -1, -4], A solution set is: [ [-1, 0, 1], [-1, -1, 2] ] Input Format The first line contains an integer, n, the number of integers. The second line contains n space-separated integers, representing the list of integers. Constraints 1 <= n <= 1000 -10^5 <= nums[i] <= 10^5 Output Format Print all unique triplets, each on a new line. The triplets should be in sorted order, and the numbers within each triplet should also be in non-descending order. Sample Input 0 6 -1 0 1 2 -1 -4 Sample Output 0 -1 -1 2 -1 0 1 Explanation 0 We find two unique triplets that sum up to zero: [-1, 0, 1] and [-1, -1, 2]. These are sorted in ascending order and each triplet is printed on a new line.","solution":"def three_sum(nums): Given a list of integers, find all unique triplets in the list which gives the sum of zero. nums.sort() # Sort the array result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i-1]: # Skip duplicates continue left, right = i + 1, len(nums) - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s < 0: left += 1 elif s > 0: right -= 1 else: # Found a triplet result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 # Skip duplicates while left < right and nums[right] == nums[right - 1]: right -= 1 # Skip duplicates left += 1 right -= 1 return result def format_triplets(triplets): Utility function to format the triplets for printing. return \\"n\\".join(\\" \\".join(map(str, triplet)) for triplet in sorted(triplets))"},{"question":"You are given two integer arrays, text{A} and text{B} of dimensions N times text{M}. Your task is to concatenate these two arrays along axis 0 and axis 1. Input Format The first line contains two space separated integers, N and M: The next N lines each contain M space separated integers of array text{A}. The following N lines each contain M space separated integers of array text{B}. Output Format First, print the concatenated array along axis 0. Then, print the concatenated array along axis 1. Sample Input 2 2 1 2 3 4 5 6 7 8 Sample Output [[1 2] [3 4] [5 6] [7 8]] [[1 2 5 6] [3 4 7 8]]","solution":"import numpy as np def concatenate_arrays(n, m, A, B): Concatenate two numpy arrays A and B along axis 0 and axis 1. Parameters: n (int): Number of rows. m (int): Number of columns. A (list of lists): First array of dimensions NxM. B (list of lists): Second array of dimensions NxM. Returns: tuple: A tuple containing two numpy arrays, first concatenated along axis 0 and second along axis 1. array_A = np.array(A) array_B = np.array(B) concat_axis0 = np.concatenate((array_A, array_B), axis=0) concat_axis1 = np.concatenate((array_A, array_B), axis=1) return (concat_axis0, concat_axis1)"},{"question":"You are given a grid of size n times n. Each cell of the grid contains an integer. Your task is to find the largest integer that is present within at least one diagonal of the grid. A diagonal can be any sequence of cells where each cell is positioned one step down and one step right or one step up and one step left from the previous cell in the diagonal. For example, in a grid where n=3: ``` 1 2 3 4 5 6 7 8 9 ``` The diagonals are: ``` [1], [2], [3], [4], [5, 2], [6], [7], [8, 4, 1], [9, 5], [6, 2], [3] ``` The maximum integer in any diagonal is 9. -----Input----- The first line contains one integer n (1 le n le 1000) — the size of the grid. The next n lines contain n integers each, representing the grid. Each integer in the grid is between -10000 and 10000. -----Output----- Print one integer — the largest integer that is present within at least one diagonal of the grid. -----Example----- Input 3 1 2 3 4 5 6 7 8 9 Output 9","solution":"def largest_in_diagonals(n, grid): Returns the largest integer present within at least one diagonal of the grid. max_value = float(\'-inf\') # Check all diagonals starting from each element in the first row for j in range(n): i, k = 0, j while i < n and k < n: max_value = max(max_value, grid[i][k]) i += 1 k += 1 # Check all diagonals starting from each element in the first column for i in range(1, n): j, k = i, 0 while j < n and k < n: max_value = max(max_value, grid[j][k]) j += 1 k += 1 # Check all anti-diagonals starting from each element in the last column for i in range(n): j, k = i, n - 1 while j < n and k >= 0: max_value = max(max_value, grid[j][k]) j += 1 k -= 1 # Check all anti-diagonals starting from each element in the first row for j in range(n-1): i, k = 0, j while i < n and k >= 0: max_value = max(max_value, grid[i][k]) i += 1 k -= 1 return max_value"},{"question":"You are given two strings, str1 and str2. You need to find the minimum number of operations required to transform str1 into str2. The possible operations are as follows: 1. **Insert a character** 2. **Delete a character** 3. **Replace a character** Your task is to write a function that computes this minimum number of operations, also known as the edit distance or Levenshtein distance. ------ Input Format ------ - The first line contains an integer T, indicating the number of test cases. - Each of the next T lines contains two space-separated strings, str1 and str2. ------ Output Format ------ For each test case, output a single integer representing the minimum number of operations required. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |str1|, |str2| ≤ 2000 str1 and str2 consist of lowercase English letters only. ------ Sample Input 1 ------ 3 abc ab horse ros intention execution ------ Sample Output 1 ------ 1 3 5 ------ Explanation 1 ------ Test case 1: Transform \\"abc\\" into \\"ab\\" by deleting the character \'c\'. Thus, the minimum edit distance is 1. Test case 2: Transform \\"horse\\" into \\"ros\\": - Replace \'h\' with \'r\' - Delete \'o\' - Replace \'e\' with \'s\' Thus, the minimum edit distance is 3. Test case 3: Transform \\"intention\\" into \\"execution\\": - Replace \'i\' with \'e\' - Replace the first \'n\' with \'x\' - Replace \'t\' with \'c\' - Replace \'t\' with \'u\' - Insert \'e\' after \'n\' Thus, the minimum edit distance is 5.","solution":"def edit_distance(str1, str2): Calculate the minimum number of operations required to transform str1 into str2. Operations allowed: insert a character, delete a character, replace a character. m, n = len(str1), len(str2) # DP table where dp[i][j] represents the edit distance between str1[0:i] and str2[0:j] dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the table with base cases for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, only option is to delete all characters of first string elif j == 0: dp[i][j] = i # If last characters are same, ignore them and recur for remaining strings elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last character are different, consider all possibilities and find minimum else: dp[i][j] = 1 + min( dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1] # Replace ) return dp[m][n] def minimum_operations(T, test_cases): Given T test cases, return the minimum operations required for each pair of strings. results = [] for str1, str2 in test_cases: results.append(edit_distance(str1, str2)) return results"},{"question":"Given two strings s1 and s2, find the length of the shortest string that has both s1 and s2 as subsequences. Example 1: Input: s1 = \\"AGGTAB\\" s2 = \\"GXTXAYB\\" Output: 9 Explanation: The shortest supersequence of both strings is \\"AGGXTXAYB\\" with length 9. Example 2: Input: s1 = \\"ABCD\\" s2 = \\"XBCY\\" Output: 6 Explanation: The shortest supersequence of both strings is \\"XABCDY\\" with length 6. Your Task: The task is to complete the function shortestCommonSupersequence() which takes the two given strings s1 and s2 and returns the length of their shortest supersequence. Expected Time Complexity: O(M*N) Expected Auxiliary Space: O(M*N) Constraints: 1 ≤ len(s1), len(s2) ≤ 100","solution":"def shortestCommonSupersequence(s1, s2): Returns the length of the shortest common supersequence of s1 and s2. Parameters: s1 (str): First input string. s2 (str): Second input string. Returns: int: Length of the shortest common supersequence. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the dp array using LCS (Longest Common Subsequence) approach for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i - 1] == s2[j - 1]: dp[i][j] = 1 + dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You are given a grid (2D matrix) that consists of \'.\' and \'#\'. \'.\' indicates an empty cell and \'#\' indicates a blocked cell. You are required to determine the number of distinct connected components of empty cells in the grid. Two cells are considered connected if they are adjacent horizontally or vertically (not diagonally). You need to write a program that reads the dimensions of the grid (n rows and m columns) followed by the structure of the grid and then outputs the number of distinct connected components of empty cells. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) – the number of rows and the number of columns of the grid. - The next n lines each contain a string of length m consisting of characters \'.\' and \'#\'. # Output - Print a single integer – the number of distinct connected components of empty cells in the grid. # Example Input ``` 5 5 .#... .#.#. #.. .#..# .#..# ``` Output ``` 3 ``` Explanation - There are three distinct connected components of empty cells in the provided grid: - One component in the first row. - Another component starting from (2, 2) down to (5, 2). - The last component from (4, 4) to (5, 5).","solution":"def count_connected_components(grid): def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] != \'.\': return grid[x][y] = \'#\' # Mark the cell as visited by turning it into a blocked cell # Move in all four possible directions (up, down, left, right) dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) n = len(grid) m = len(grid[0]) component_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': dfs(i, j) component_count += 1 return component_count"},{"question":"You are given a rectangular grid of cells with r rows and c columns. Some of the cells are blocked and some are open. You need to find the number of unique paths from the top-left cell (0,0) to the bottom-right cell (r-1,c-1), where you can only move down or right and cannot move through blocked cells. Input The first line contains two integers r and c (1 ≤ r, c ≤ 100) — the number of rows and columns in the grid respectively. Each of the next r lines contains c characters: \'.\' (representing an open cell) or \'#\' (representing a blocked cell). The top-left cell (0,0) and the bottom-right cell (r-1,c-1) are guaranteed to be open. Output Print a single integer, the number of unique paths from the top-left cell to the bottom-right cell. Examples Input 3 3 ... .#. ... Output 2 Input 3 3 ..# .#. ... Output 1 Input 2 2 .# #. Output 0 Note In the first example, there are two possible paths from (0,0) to (2,2): 1. Right → Down → Down → Right 2. Down → Down → Right → Right In the second example, there is one possible path: 1. Right → Down → Down → Right","solution":"def unique_paths(grid): r = len(grid) c = len(grid[0]) # dp array to store the number of ways to reach each cell dp = [[0 for _ in range(c)] for _ in range(r)] # starting point dp[0][0] = 1 for i in range(r): for j in range(c): if grid[i][j] == \'#\': dp[i][j] = 0 # No paths through a blocked cell continue if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[r-1][c-1]"},{"question":"The local government agency is working on a new project to improve public safety by optimizing the placement of surveillance cameras in a square grid city. Your job is to write an algorithm that will determine the minimum number of cameras needed to cover all the streets such that every street segment between intersections is monitored by at least one camera. The city is represented as an `n x n` grid where `n` is the number of intersections along each row and column. Each intersection is connected to its north, south, east, and west neighbors by a street segment, except for edge intersections which are only connected inwards. A camera placed at an intersection monitors the four street segments connected to it. Your function `minCameras(n)` will take one input, `n`, the size of the grid (2 ≤ n ≤ 100). Return an integer representing the minimum number of cameras required to cover all the street segments in the grid. Here are some examples: ``` minCameras(2) == 1 The grid looks like: +---+---+ | C | | +---+---+ | | | +---+---+ minCameras(3) == 1 The grid looks like: +---+---+---+ | | | | +---+---+---+ | | C | | +---+---+---+ | | | | +---+---+---+ minCameras(4) == 4 The grid looks like: +---+---+---+---+ | C | | C | | +---+---+---+---+ | | | | | +---+---+---+---+ | C | | C | | +---+---+---+---+ | | | | | +---+---+---+---+ ```","solution":"def minCameras(n): Returns the minimum number of cameras required to cover all street segments in an n x n grid. Odd grids only need 1 camera. Even grids need (n/2) ** 2 cameras. if n == 2 or n == 3: return 1 if n % 2 == 0: return (n // 2) ** 2 else: return ((n // 2) + 1) ** 2"},{"question":"A company has N employees standing in a line, each with a unique skill level represented by an integer. The company wants to form teams such that each team has at least two employees, and the absolute difference between skill levels of any two employees in a team is less than or equal to a given number K. Your task is to determine the maximum number of teams that can be formed under these constraints. An employee can belong to only one team. Input Format: - The first line contains two integers N and K. - The second line contains N integers, which are the skill levels of the employees. Output Format: - Print one integer, the maximum number of teams that can be formed. Constraints: 1 ≤ N ≤ 10^5 1 ≤ K ≤ 10^9 1 ≤ skill level ≤ 10^9 SAMPLE INPUT 6 3 1 3 5 6 7 9 SAMPLE OUTPUT 3 Explanation: The following teams can be formed: - Team 1: (1, 3) - skill levels are 1 and 3, absolute difference is 2. - Team 2: (5, 6) - skill levels are 5 and 6, absolute difference is 1. - Team 3: (7, 9) - skill levels are 7 and 9, absolute difference is 2. Hence, the maximum number of teams that can be formed is 3.","solution":"def max_teams(N, K, skill_levels): Determine the maximum number of teams that can be formed under the given constraints. Args: N: int - number of employees K: int - the maximum allowed absolute difference in skill levels within a team skill_levels: list of int - skill levels of the employees Returns: int - the maximum number of teams that can be formed # Sort the skill levels to easily form the teams skill_levels.sort() # Count of teams formed team_count = 0 i = 0 while i < N - 1: if skill_levels[i + 1] - skill_levels[i] <= K: team_count += 1 i += 2 # Move to the next possible pair else: i += 1 return team_count"},{"question":"Given a binary string. You need to find the minimum number of deletions required to make the string palindromic. A string is palindromic if it reads the same backward as forward. Example 1: Input: \\"abca\\" Output: 1 Explanation: By deleting \'b\', we get the string \\"aca\\", which is a palindrome. Example 2: Input: \\"abc\\" Output: 2 Explanation: By deleting \'a\' and \'c\', we get the string \\"b\\", which is a palindrome. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function minDeletionsToPalindrome() that takes a string (str) and returns the minimum number of deletions needed to make the string palindromic. The driver code handles the printing. Expected Time Complexity: O(N^2). Expected Auxiliary Space: O(N^2). Constraints: 1 ≤ length of str ≤ 10^3","solution":"def minDeletionsToPalindrome(s): Returns the minimum number of deletions required to make the binary string palindromic. n = len(s) # Create a table to store results of subproblems dp = [[0 for _ in range(n)] for _ in range(n)] # Fill the table for gap in range(1, n): for l in range(n - gap): r = l + gap if s[l] == s[r]: dp[l][r] = dp[l + 1][r - 1] else: dp[l][r] = 1 + min(dp[l + 1][r], dp[l][r - 1]) # The result is the minimum number of deletions required for the whole string return dp[0][n - 1]"},{"question":"# Task You are given a list of integers. Your task is to remove from the list every integer in the list that appears twice or more and return the modified list. # Input/Output `[input]` list of integers `values`/ `values` A list of integers. `[output]` a list of integers Return the list after removing any element that appears twice or more. # Example For `values = [4, 5, 6, 5, 4, 3, 8]`, the output should be `[6, 3, 8]`. For `values = [1, 2, 2, 3, 1, 2, 3, 4]`, the output should be `[4]`.","solution":"def remove_duplicates(values): Returns a list of integers where any integer that appears twice or more in the original list is removed. from collections import Counter # Count the occurrences of each element in the list counts = Counter(values) # Create a new list with elements that appear exactly once result = [num for num in values if counts[num] == 1] return result"},{"question":"*** Difference of Diagonals *** You are given a square matrix (list of lists) and you need to calculate the absolute difference between the sums of its diagonals. The diagonals are defined as follows: - The primary diagonal is formed by the elements at positions (0, 0), (1, 1), (2, 2), ..., up to the last element. - The secondary diagonal is formed by the elements at positions (0, n-1), (1, n-2), (2, n-3), ..., up to the last element, where n is the dimension of the matrix. Both diagonals should be summed up and their absolute difference should be returned. You must accomplish this without using explicit loops (e.g., no `for`, `while`, or `do-while` loops, nor comprehensions). You can assume the matrix is non-empty and is always square. Example: ``` matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] diagonal_difference(matrix) should return abs((1+5+9) - (3+5+7)) = abs(15 - 15) = 0 ```","solution":"def diagonal_difference(matrix): Returns the absolute difference between the sums of the primary and secondary diagonals of a square matrix. n = len(matrix) primary_sum = sum(matrix[i][i] for i in range(n)) secondary_sum = sum(matrix[i][n - 1 - i] for i in range(n)) return abs(primary_sum - secondary_sum)"},{"question":"A university\'s online registration system needs to ensure that no two students are registered for the same course at overlapping times. Each course has a unique ID, and every student has a list of courses they\'re enrolled in along with the start and end times for each course in the format (start_hour, start_minute, end_hour, end_minute). The university administration has requested your help in detecting conflicts in students\' schedules. Your task is to write a function to check if any student has overlapping courses. If any student has a scheduling conflict, the function should output \\"CONFLICT\\", otherwise it should output \\"NO CONFLICT\\". A student has a conflict if there exists any pair of courses (Course1 and Course2) such that the time intervals of Course1 and Course2 overlap. Example: Student1 Course: [(CSE101, 9:00, 10:00), (ECE102, 9:30, 11:00)] Student 2 Course: [(MTH101, 8:00, 9:00), (PHY101, 10:00, 11:00)] In this case, Student1 has a conflict because the time intervals [9:00, 10:00] and [9:30, 11:00] overlap. Function Signature: def check_conflicts(student_courses: List[Tuple[str, Tuple[int, int, int, int]]]) -> str: Constraints: 1. 1 ≤ Number of students ≤ 100 2. 1 ≤ Number of courses per student ≤ 10 Input: The first line contains an integer N, the number of students. For each student, the first line contains an integer M, the number of courses. Each of the next M lines contains the course ID, start_hour, start_minute, end_hour, end_minute. Output: \\"CONFLICT\\" if any student has overlapping courses, otherwise \\"NO CONFLICT\\". SAMPLE INPUT 2 2 CSE101 9 0 10 0 ECE102 9 30 11 0 2 MTH101 8 0 9 0 PHY101 10 0 11 0 SAMPLE OUTPUT CONFLICT NO CONFLICT","solution":"from typing import List, Tuple def check_conflicts(student_courses: List[Tuple[str, Tuple[int, int, int, int]]]) -> str: This function checks if there is any overlap in the courses schedule for a student. def to_minutes(hour: int, minute: int) -> int: Converts hours and minutes into total minutes. return hour * 60 + minute intervals = [] for _, start_hour, start_minute, end_hour, end_minute in student_courses: start = to_minutes(start_hour, start_minute) end = to_minutes(end_hour, end_minute) intervals.append((start, end)) intervals.sort() # Sort intervals by start time for i in range(1, len(intervals)): if intervals[i][0] < intervals[i-1][1]: return \\"CONFLICT\\" return \\"NO CONFLICT\\""},{"question":"Alice is a skilled archer participating in a competition. The competition field can be represented as an n x m grid, with Alice starting from the top-left corner (0, 0) and her goal is to reach the bottom-right corner (n-1, m-1). However, there are some obstacles in the field that Alice cannot shoot through, represented as cells containing a 1. The cells containing 0 are passable. Alice can only move right or down at any point in time. Your task is to determine the number of unique paths Alice can take from the starting point to the destination such that she does not land on an obstacle. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 1000) representing the dimensions of the grid. The next n lines each contain m integers (either 0 or 1), where 0 indicates a passable cell and 1 indicates an obstacle. Output: Print a single integer – the number of unique paths Alice can take to reach the destination. Examples: Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 Input: 2 2 0 1 0 0 Output: 1 Note: In the first example, Alice has two unique paths to reach the destination: - Right -> Right -> Down -> Down - Down -> Down -> Right -> Right In the second example, there is only one path from the starting point to the destination: right and then down. The other path is blocked by an obstacle.","solution":"def unique_paths_with_obstacles(n, m, grid): Determine the number of unique paths Alice can take from the top-left corner to the bottom-right corner avoiding obstacles. :param n: The number of rows in the grid :param m: The number of columns in the grid :param grid: The 2D grid representing the field with obstacles (1) and passable cells (0) :return: Number of unique paths to the destination if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are given a grid of characters and a list of words. Your task is to find all words in the grid. A word can be formed from the grid by following a path of connected characters, where each character in the path must be adjacent to the previous one (up, down, left, right, diagonally) and the character must not be used more than once in a word. Input The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the grid. The next n lines contain m characters each, representing the grid. The following line contains an integer k (1 ≤ k ≤ 100), the number of words to be searched for. The next k lines contain the words to be searched for. Words consist only of lowercase English letters. Output For each word, output \\"YES\\" if the word can be found in the grid, or \\"NO\\" if it cannot be found. Example Input: 4 4 abcd efgh ijkl mnop 3 abc bfj nope Output: YES YES NO","solution":"def find_words_in_grid(n, m, grid, k, words): Finds if each word can be found in the grid. def dfs(x, y, word, index): if index == len(word): return True if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != word[index] or visited[x][y]: return False visited[x][y] = True for dx, dy in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]: if dfs(x + dx, y + dy, word, index + 1): return True visited[x][y] = False return False results = [] for word in words: found = False for i in range(n): for j in range(m): visited = [[False for _ in range(m)] for _ in range(n)] if dfs(i, j, word, 0): found = True break if found: break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alice is organizing a coding competition and needs to manage the scoreboard efficiently. Each competitor has a unique ID between 1 and N. Initially, all competitors have a score of 0. During the competition, M scoring events happen, where each event updates the score of a competitor. Each event is described by two integers: the competitor\'s ID and the score to add to their current score. Alice wants to know the k-th highest score on the scoreboard at any given time. Note that if multiple competitors have the same score, they are considered distinct based on their unique IDs. Your task is to implement an efficient solution that processes all M scoring events and reports the k-th highest score after each event. Input: - The first line contains three integers, N (the number of competitors), M (the number of scoring events), and k (the position in the leaderboard to report after each event). - The next M lines each contain two integers, id (the competitor\'s ID) and s (the score to add), representing a scoring event. Output: - M lines, each containing the k-th highest score after each scoring event. Constraints: - 1 ≤ N ≤ 100000 - 1 ≤ M ≤ 50000 - 1 ≤ id ≤ N - -1000 ≤ s ≤ 1000 - 1 ≤ k ≤ N Example: Input: 5 3 2 1 10 2 20 3 -5 Output: 0 10 10 In this example: 1. After adding 10 to competitor 1, the scores are [10, 0, 0, 0, 0]. The 2nd highest score is 0. 2. After adding 20 to competitor 2, the scores are [10, 20, 0, 0, 0]. The 2nd highest score is 10. 3. After subtracting 5 from competitor 3, the scores are [10, 20, -5, 0, 0]. The 2nd highest score is 10.","solution":"import heapq def kth_highest_scores(N, M, k, events): scores = [0] * N min_heap = [] def add_score_to_heap(score): if len(min_heap) < k: heapq.heappush(min_heap, score) else: heapq.heappushpop(min_heap, score) results = [] for event in events: comp_id, score_add = event comp_id -= 1 # Convert to 0-based index scores[comp_id] += score_add # Clear min_heap and readd k highest scores min_heap.clear() for score in scores: add_score_to_heap(score) results.append(min_heap[0]) return results"},{"question":"Bob is building a machine that requires the use of special numbers. A number is considered special if it is an odd number and all of its digits are distinct. Given an integer N, Bob wants to know the smallest special number that is greater than N. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains an integer N. Output: For each test case, output a single line containing the smallest special number greater than N. Constraints: 1 ≤ T ≤ 1000 0 ≤ N ≤ 10^9 SAMPLE INPUT 3 123 100 998765 SAMPLE OUTPUT 125 103 1023457","solution":"def is_special(number): Check if a number is special: odd and all digits are unique. str_num = str(number) if number % 2 == 0: # Not an odd number return False if len(set(str_num)) != len(str_num): # Digits are not unique return False return True def find_smallest_special_number_greater_than(N): Find the smallest special number greater than N. number = N + 1 while not is_special(number): number += 1 return number def process_test_cases(test_cases): Process the provided test cases and return results for each. results = [] for N in test_cases: results.append(find_smallest_special_number_greater_than(N)) return results"},{"question":"Given a collection of words, determine the number of words that can be typed using letters of only one row of a standard QWERTY keyboard. A standard QWERTY keyboard can be visualized as follows: ``` QWERTYUIOP ASDFGHJKL ZXCVBNM ``` You can assume the input words will only contain alphabetic characters. ------ Input ------ The first line contains an integer T, the number of words. The next T lines each contain one word. ------ Output ------ Output the number of words that can be typed using letters from only one row of the QWERTY keyboard. ------ Sample Input 1 ------ 5 Hello Alaska Dad Peace Quiz ------ Sample Output 1 ------ 2","solution":"def can_be_typed_on_one_row(word, rows): for row in rows: if all(char in row for char in word.lower()): return True return False def count_one_row_words(words): rows = [ set(\\"qwertyuiop\\"), set(\\"asdfghjkl\\"), set(\\"zxcvbnm\\") ] count = 0 for word in words: if can_be_typed_on_one_row(word, rows): count += 1 return count"},{"question":"You are working with a file system with a hierarchical directory structure. Your task is to implement a file system with the following operations: 1. `mkdir path`: Creates a new directory at the specified path. If the directory already exists, no changes are made. The path consists of lowercase alphabets separated by slashes (/), where each element represents a directory. 2. `addFile path file_contents`: Creates a new file at the specified path with given content. If the file already exists, its content is overwritten. The path is similar to the directory path but ends with a file name instead of a directory name. 3. `readFile path`: Reads the content of the specified file at the path. If the file doesn\'t exist, return an empty string. You need to handle a series of commands to manage the directories and files. Input The first line contains an integer q (1 ≤ q ≤ 105) — the number of commands. The next q lines contain one of the following commands: - `mkdir path` - `addFile path file_contents` - `readFile path` Commands can be executed in any order, and path and file_contents can have a length of up to 100. Output For each `readFile` command, output the content of the specified file or an empty string if the file does not exist. Examples Input 12 mkdir /a mkdir /a/b mkdir /c addFile /a/b/file1 Hello addFile /c/file2 World readFile /a/b/file1 readFile /c/file2 readFile /c/file1 mkdir /a/b addFile /a/file3 Hi readFile /a/file3 addFile /a/b/file1 NewContent readFile /a/b/file1 Output Hello World Hi NewContent","solution":"class FileSystem: def __init__(self): self.fs = {} def _traverse(self, path): parts = path.split(\\"/\\") cur = self.fs for part in parts: if part: if part not in cur: cur[part] = {} cur = cur[part] return cur def mkdir(self, path): self._traverse(path) def addFile(self, path, file_contents): parts = path.split(\\"/\\") *dirs, file_name = parts dir_path = \\"/\\".join(dirs) parent_dir = self._traverse(dir_path) parent_dir[file_name] = file_contents def readFile(self, path): parts = path.split(\\"/\\") *dirs, file_name = parts dir_path = \\"/\\".join(dirs) parent_dir = self._traverse(dir_path) return parent_dir.get(file_name, \\"\\") fs = FileSystem() def execute_commands(commands): result = [] for command in commands: command = command.split(\\" \\", 2) # we only split into max of 3 parts if command[0] == \\"mkdir\\": fs.mkdir(command[1]) elif command[0] == \\"addFile\\": path, file_contents = command[1], command[2] fs.addFile(path, file_contents) elif command[0] == \\"readFile\\": result.append(fs.readFile(command[1])) return result"},{"question":"Title: Grid Navigation to Maximize Coins Problem Description: You are given a grid of size N x M, where each cell contains a certain number of coins represented by a non-negative integer. You start from the top-left corner of the grid and your goal is to reach the bottom-right corner. You can only move to the right (→) or down (↓) at each step. Your task is to find the maximum number of coins you can collect if you take the optimal path from the top-left corner to the bottom-right corner. # Input Format: - The first line contains two integers, N and M (1 ≤ N, M ≤ 100), representing the number of rows and columns of the grid respectively. - The next N lines each contain M integers representing the number of coins in each cell of the grid. All numbers are non-negative and do not exceed 100. # Output Format: - Output a single integer: the maximum number of coins that can be collected. # Sample Input 1: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` # Sample Output 1: ``` 12 ``` # Sample Input 2: ``` 2 2 1 2 3 4 ``` # Sample Output 2: ``` 8 ``` # Explanation: In the first sample input, the optimal path to collect the maximum number of coins is given by the following sequence of cells: (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2), collecting a total of 12 coins. In the second sample input, the optimal path to collect the maximum number of coins is given by the following sequence of cells: (0,0) -> (0,1) -> (1,1), collecting a total of 8 coins. # Constraints: - The grid size is limited by 1 ≤ N, M ≤ 100. - Each cell contains an integer between 0 and 100 inclusive. # Notes: You are required to use dynamic programming to solve this problem optimally within the given constraints.","solution":"def max_coins(N, M, grid): Returns the maximum number of coins that can be collected from the top-left to the bottom-right corner of a given grid. :param N: Number of rows :param M: Number of columns :param grid: 2D List of integers representing the coin grid :return: Integer, maximum number of coins collected dp = [[0]*M for _ in range(N)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill up the DP table for i in range(1, N): for j in range(1, M): dp[i][j] = grid[i][j] + max(dp[i-1][j], dp[i][j-1]) return dp[N-1][M-1]"},{"question":"In a kingdom far away, the king has tasked you to create a magic parade for his citizens. There are n magical creatures, each with a unique magical aura brightness which is denoted as the ith creature\'s brightness bi. The parade requires exactly k creatures walking down the main street, arranged in such a way that their aura brightnesses form a sequence of strictly increasing values. For this glamorous event, the creatures must maintain a proper social distance, which is characterized by a distance di that the ith creature maintains from others when walking. Your task is to select k creatures out of n and determine the minimum total distance that the parade requires, while ensuring that their aura brightnesses are in strictly increasing order. Input The first line contains space-separated integers n and k (1 ≤ k ≤ n ≤ 100,000) – the total number of creatures and the number of creatures needed for the parade, respectively. The second line contains n space-separated integers b1, b2, ..., bn (1 ≤ bi ≤ 109) – the aura brightness of each creature. The third line contains n space-separated integers d1, d2, ..., dn (1 ≤ di ≤ 109) – the distance each creature maintains from others. Output Print the minimum total distance required for the parade, while ensuring the selected creatures have their aura brightnesses in strictly increasing order. If it\'s not possible to select k creatures satisfying the requirements, print -1. Examples Input 6 4 5 1 3 2 4 6 2 1 3 2 4 5 Output 9 Input 5 3 1 2 3 4 5 5 4 3 2 1 Output 6 Note In the first example, the selected creatures could be those with brightnesses [1, 3, 4, 6] and corresponding distances [1, 3, 4, 5], resulting in the minimal total distance 1 + 3 + 4 + 1 = 9. In the second example, a possible selection can be those with brightnesses [1, 2, 3] and corresponding distances [5, 4, 3], leading to a total distance of 5 + 4 + 3 = 12. Another possible selection could be those with brightnesses [3, 4, 5] and distances [3, 2, 1], resulting in 3 + 2 + 1 = 6, which is smaller. Hence, 6 is the correct output.","solution":"def minimum_total_distance(n, k, brightnesses, distances): if k > n: return -1 creatures = list(zip(brightnesses, distances)) creatures.sort() dp = [[float(\'inf\')] * n for _ in range(k + 1)] for i in range(n): dp[1][i] = distances[i] for i in range(2, k + 1): for j in range(i - 1, n): for l in range(i - 2, j): if creatures[l][0] < creatures[j][0]: dp[i][j] = min(dp[i][j], dp[i - 1][l] + creatures[j][1]) result = min(dp[k]) return result if result != float(\'inf\') else -1"},{"question":"You are given an integer N. You need to construct a string S consisting of exactly N characters \'a\', \'b\', and \'c\' such that the string does not contain any substring of the form \\"abc\\" or \\"cba\\". If it\'s not possible to construct such a string, print -1. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. Then the test cases follow. - Each test case consists of a single line of input containing the integer N. ------ Output Format ------ For each test case: - If it is not possible to construct such a string, print -1 - Otherwise, print the string S. If there are multiple possible answers, you may print any of them. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^{3} ----- Sample Input 1 ------ 3 3 5 7 ----- Sample Output 1 ------ -1 ababa abababc ----- Explanation 1 ------ Test case 1: It is not possible to construct a string of length 3 without forming the substring \\"abc\\" or \\"cba\\". Test case 2: One possible string with length 5 that avoids \\"abc\\" and \\"cba\\" is \\"ababa\\". Test case 3: One possible string with length 7 that avoids \\"abc\\" and \\"cba\\" is \\"abababc\\". Other valid answers are possible.","solution":"def construct_string(n): if n == 3: return \\"-1\\" result = [] base_pattern = [\\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"c\\"] while len(result) < n: for char in base_pattern: if len(result) < n: result.append(char) else: break return \'\'.join(result[:n]) def solve(t, n_list): results = [] for n in n_list: results.append(construct_string(n)) return results"},{"question":"Mila wants to organize a bake sale at her school and plans to make cookies. She has a total of n batches of cookies to prepare, but due to limited resources, she can make only one type of cookie per day. Each batch of cookies requires specific ingredients, and Mila can only make cookies if she has enough ingredients for all batches. Mila wants to check if she has enough ingredients to make all the batches in n consecutive days. Given a list of n integers where each integer represents the number of ingredients required to make that batch of cookies, and a total number of available ingredients, determine if Mila can make all n batches in n days. -----Input----- The first line contains a single integer n (1 leq n leq 100) — the number of batches of cookies. The second line contains n integers, where the i-th integer a_i (1 leq a_i leq 100) represents the number of ingredients required for the i-th batch of cookies. The third line contains a single integer m (1 leq m leq 1000) — the total number of available ingredients. -----Output----- Print \\"Yes\\" if Mila can make all n batches of cookies with the available ingredients. Otherwise, print \\"No\\". You can print each letter in any case (upper or lower). -----Examples----- Input 3 2 4 3 10 Output Yes Input 4 3 2 5 6 12 Output No -----Note----- In the first example, Mila needs a total of 2 + 4 + 3 = 9 ingredients, and she has 10 ingredients available. Therefore, she can make all 3 batches of cookies. In the second example, Mila needs a total of 3 + 2 + 5 + 6 = 16 ingredients, but she has only 12 ingredients available. Hence, she cannot make all 4 batches.","solution":"def can_make_all_batches(n, ingredients, available_ingredients): Determines if Mila can make all batches of cookies given the ingredients needed for each batch and the total number of available ingredients. Parameters: n (int): Number of batches ingredients (list of int): List of integers where each represents the number of ingredients required for the batch available_ingredients (int): Total number of available ingredients Returns: str: \\"Yes\\" if all batches can be made, otherwise \\"No\\" total_required = sum(ingredients) if total_required <= available_ingredients: return \\"Yes\\" else: return \\"No\\""},{"question":"A group of friends are playing a modified game of hide and seek in a 2D rectangular grid. The grid is represented by an n x m matrix (1 ≤ n, m ≤ 1000). Each cell in the matrix is labeled either \'.\' for an open cell or \'#\' for an obstacle. The seeker starts at a specific cell and wants to calculate the minimum number of moves required to find a hider, who is located in another specific cell. Both the seeker and the hider can move up, down, left, or right, but cannot move through obstacles. Write a program to determine the minimum number of moves required for the seeker to reach the hider\'s cell or determine that it\'s impossible. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid, respectively. The next n lines contain m characters each — the matrix describing the grid. Each character can be either \'.\' or \'#\'. The next line contains four integers sr, sc, hr, and hc (0 ≤ sr, sc, hr, hc < n, m) — the starting cell (sr, sc) of the seeker and the location of the hider (hr, hc). Output Print a single integer — the minimum number of moves required for the seeker to reach the hider\'s location. If it is impossible, print -1. Example Input 5 7 ....... .#.#.#. ....... .#. ....... 0 0 4 6 Output 10 Input 3 3 ..# .#. #.. 0 0 2 2 Output -1 Notes In the first example, the seeker starts at (0, 0) and moves to (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (1, 6), (2, 6), (3, 6), and finally (4, 6). The total number of moves required is 10. In the second example, the seeker cannot reach the hider due to obstacles blocking all paths.","solution":"from collections import deque def min_moves_to_find_hider(n, m, grid, sr, sc, hr, hc): Determines the minimum number of moves required for the seeker to reach the hider\'s location or determines that it\'s impossible. Params: n (int): The number of rows m (int): The number of columns grid (list): The grid represented as a list of strings sr (int): The starting row of the seeker sc (int): The starting column of the seeker hr (int): The target row of the hider hc (int): The target column of the hider Returns: int: The minimum number of moves required, or -1 if impossible. if sr == hr and sc == hc: return 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sr, sc, 0)]) visited = set((sr, sc)) while queue: r, c, dist = queue.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == \'.\' and (nr, nc) not in visited: if nr == hr and nc == hc: return dist + 1 queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) return -1"},{"question":"In a land far away, there exists a magical forest with enchanted trees, each producing a unique type of fruit. The fruit from these trees is either delicious or sour. Adventurers entering the forest are tasked with categorizing the trees based on their fruit. Here\'s how it works: * There are exactly n trees in the forest. * Each tree produces fruit of one of two types: delicious or sour. The type of fruit a tree produces is determined by a hidden magical property. * Each adventurer, upon encountering a tree, can immediately identify whether the fruit is delicious or sour (through a special sense or taste). However, they can neither see nor communicate with any other adventurers in the forest. The challenge for the adventurers is to mark each tree with a unique identifier such that at the end of their journey, they can report which tree produces which type of fruit. Can you help them devise an efficient strategy? You are asked to successively name n different positive integers as tree identifiers. After naming each new identifier, you will learn whether the tree associated with that identifier produces delicious fruit or sour fruit. At the end of the process, you should be able to output two lists: one containing the identifiers of trees producing delicious fruit and the other containing those producing sour fruit. # Input The first line of the input contains an integer n (1 ≤ n ≤ 50) — the number of trees. Each of the next n lines contains a string \\"delicious\\" or \\"sour\\" corresponding to the fruit type of the trees in the order of the identifiers you provided. # Output After all n identifiers are processed, you need to print two lines: * The first line should contain the list of identifiers associated with trees producing delicious fruit. * The second line should contain the list of identifiers associated with trees producing sour fruit. Ensure that both lists are in the same order as the identifiers were named. # Example Input ``` 6 delicious sour delicious sour delicious sour ``` Output ``` 1 3 5 2 4 6 ``` # Notes - In this example, the adventurers named trees from 1 to 6. As they encounter each tree, they identify whether its fruit is delicious or sour. - At the end, they produce two lists of identifiers based on the type of fruit produced by each tree.","solution":"def categorize_trees(n, fruit_types): This function categorizes tree identifiers based on the type of fruit (delicious or sour). Parameters: n (int): The number of trees. fruit_types (list): A list of strings where each string is either \\"delicious\\" or \\"sour\\". Returns: tuple: Two lists, first containing identifiers of delicious trees and second containing identifiers of sour trees. delicious_trees = [] sour_trees = [] for i in range(1, n + 1): if fruit_types[i - 1] == \\"delicious\\": delicious_trees.append(i) else: sour_trees.append(i) return delicious_trees, sour_trees"},{"question":"In a world of magic and spells, there exists a special type of spell called a Pyramidal Incantation. The spell works on an array of integers where each incantation can either: 1. Increase an element by 1. 2. Remove an element from the array. The spell is cast repeatedly by two wizards, Alice and Bob, starting with Alice. They take turns performing the above operations and are only allowed to perform an operation if it is possible to subsequently form a contiguous subarray from the remaining elements that form a pyramid. A subarray forms a pyramid if there exists an integer \'x\' such that `arr[i] = i + x` for each index `i` in the subarray. The goal of the game is to make the array impossible to convert into a pyramid by performing one of the allowed operations. The wizard who makes the array impossible to form a pyramid loses the game. Given the initial state of the array, help determine who will win the game if both play optimally. Input The first line contains a single integer n (1 ≤ n ≤ 100 000), the size of the initial array. The second line contains n integers, a1, a2, ..., an (1 ≤ ai ≤ 109), representing the initial elements of the array. Output Output the name of the winning player, either \\"Alice\\" or \\"Bob\\" (without quotes). Examples Input 5 1 2 3 4 5 Output Bob Input 4 2 4 6 8 Output Alice Note In the first example, every element in the array already forms a pyramid. Alice will start by either increasing the first element or removing the last element, gradually turning the array into a non-pyramidal form until Bob has the final move. In the second example, Alice can strategically remove or increase any element to disrupt the potential formation of a pyramid, ensuring Bob eventually can\'t perform a valid move.","solution":"def pyramidal_incantation_winner(n, array): Determines the winner of the Pyramidal Incantation game. Arguments: n -- size of the initial array array -- list of integers representing the initial elements of the array Returns: \\"Alice\\" or \\"Bob\\" indicating the winner # Determine if the initial array is already a pyramidal sequence is_pyramidal = all(array[i] == array[0] + i for i in range(n)) # If the array is pyramidal, Bob will win if n is odd, because Alice starts and they take turns. # Otherwise, Alice will win. if is_pyramidal: if n % 2 == 0: return \\"Alice\\" else: return \\"Bob\\" # If the array isn\'t pyramidal, Alice can always win by forcing a scenario where eventually # Bob cannot continue to make a pyramidal subarray just by having the first move advantage and disrupting the sequence. return \\"Alice\\""},{"question":"------ Input ------ The first line of the input contains a single integer ( T ) denoting the number of test cases. The description of ( T ) test cases follows. The first line of each test case contains a single integer ( N ), the number of elements in the sequence. The second line of each test case contains ( N ) space-separated integers ( a_i ) denoting the elements of the sequence. ------ Output ------ For each test case, print a single line containing one number — the length of the longest contiguous subsequence that has an equal number of even and odd integers. ------ Constraints ------ ( 1 ≤ T ≤ 500 ) ( 1 ≤ N ≤ 10^5 ) ( 1 ≤ a_i ≤ 10^9 ) the sum of ( N ) for all test cases does not exceed ( 5 cdot 10^5 ) ----- Sample Input 3 6 1 2 3 4 5 6 3 1 2 3 4 2 4 6 8 ----- Sample Output 6 2 0 ----- Explanation Example case 1: The whole sequence (1, 2, 3, 4, 5, 6) has equal numbers of odd and even integers. Example case 2: The subsequence (1, 2) or (2, 3) are both valid with equal number of odd and even integers, hence the length is 2. Example case 3: There is no contiguous subsequence with equal number of odd and even integers.","solution":"def longest_equal_even_odd_subsequence(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] a = test_cases[i][1] balance = 0 max_len = 0 balance_dict = {0: -1} # Dictionary to store first occurrence of balances for j in range(N): if a[j] % 2 == 0: balance += 1 else: balance -= 1 if balance in balance_dict: max_len = max(max_len, j - balance_dict[balance]) else: balance_dict[balance] = j results.append(max_len) return results"},{"question":"You are given a binary string. You are allowed to perform a single operation: choose two adjacent bits and swap them. Determine the lexicographically smallest string that can be achieved by performing this operation exactly once or not at all. -----Constraints----- - The length of the binary string is between 1 and (10^5). - The binary string contains only characters \'0\' and \'1\'. -----Input----- Input is given from Standard Input in the following format: <binary_string> -----Output----- Print the lexicographically smallest string that can be achieved by performing the operation exactly once or not at all. -----Sample Input----- 110 -----Sample Output----- 101 In this example, swapping the first two bits gives the string \'101\', which is the smallest lexicographical string that can be achieved. If no swap would yield a smaller string, the original string is returned.","solution":"def lexicographically_smallest(binary_string): n = len(binary_string) if n < 2: return binary_string smallest_string = binary_string for i in range(n - 1): if binary_string[i] > binary_string[i + 1]: new_string = binary_string[:i] + binary_string[i + 1] + binary_string[i] + binary_string[i + 2:] if new_string < smallest_string: smallest_string = new_string return smallest_string"},{"question":"You are given a string s consisting of lowercase English letters and a list of indices k. For each index ki in k, you should remove the character at position ki from s (0-based indexing). After performing all the removals, determine whether the resulting string is a palindrome. If it forms a palindrome, print \\"YES\\". Otherwise, print \\"NO\\". A palindrome is a string that reads the same forward and backward. For example, \\"noon\\", \\"racecar\\", and \\"madam\\" are all palindromes, while \\"hello\\" and \\"world\\" are not. Input The first line contains a string s (1 ≤ |s| ≤ 200). Each character in s is a lowercase English letter. The second line contains an integer m (1 ≤ m ≤ |s|), the number of indices. The third line contains m integers k1, k2, ..., km (0 ≤ ki < |s|), denoting the indices of characters to be removed from s. Output Print \\"YES\\" if the resulting string is a palindrome after all the removals. Otherwise, print \\"NO\\". Examples Input abacaba 2 1 5 Output YES Input programming 3 0 1 10 Output NO Note For the first example, after removing the characters at positions 1 and 5, the resulting string is \\"aacba\\" which is a palindrome. For the second example, removing characters at positions 0 and 1 results in \\"ograming\\". Since no character exists at index 10, the original \\"programming\\" is left unchanged, and it is not a palindrome.","solution":"def is_palindrome_after_removals(s, k): Determines if the string s is a palindrome after removing the characters at indices in k. Args: s (str) : The original string. k (list of int) : List of indices to remove characters from s. Returns: str : \\"YES\\" if the modified string is a palindrome, otherwise \\"NO\\". # Remove the characters at the specified indices modified_s = \'\'.join(ch for i, ch in enumerate(s) if i not in set(k)) # Check if the modified string is a palindrome return \\"YES\\" if modified_s == modified_s[::-1] else \\"NO\\""},{"question":"John is training to become a software developer and is working on his string manipulation skills. One of the problems he\'s come across involves determining the minimal number of operations needed to change one string into another. He wants your help in solving it efficiently. The problem is to calculate the Levenshtein distance (edit distance) between two strings. The Levenshtein distance is the minimum number of single-character edits (insertions, deletions, or substitutions) required to transform one string into another. Input: The first line contains a single integer n, representing the number of test cases. Each of the next n lines contains two space-separated strings s1 and s2. Output: For each test case, print a single integer representing the Levenshtein distance between s1 and s2. Constraints: 1 ≤ n ≤ 100 1 ≤ |s1|, |s2| ≤ 100 SAMPLE INPUT 3 kitten sitting flaw lawn intention execution SAMPLE OUTPUT 3 2 5 Explanation Consider the first test case. To transform \\"kitten\\" into \\"sitting\\", we can do the following: 1. Substitute \'k\' with \'s\' => \'sitten\' 2. Substitute \'e\' with \'i\' => \'sittin\' 3. Insert \'g\' => \'sitting\' Hence, the Levenshtein distance is 3.","solution":"def levenshtein_distance(s1, s2): Calculates the Levenshtein distance between two strings s1 and s2. len_s1, len_s2 = len(s1), len(s2) # Create a distance matrix dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)] for i in range(len_s1 + 1): dp[i][0] = i for j in range(len_s2 + 1): dp[0][j] = j for i in range(1, len_s1 + 1): for j in range(1, len_s2 + 1): if s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], # Deletion dp[i][j-1], # Insertion dp[i-1][j-1]) # Substitution return dp[len_s1][len_s2] def main(n, test_cases): results = [] for s1, s2 in test_cases: distance = levenshtein_distance(s1, s2) results.append(distance) return results"},{"question":"Write a function that finds the longest substring of distinct characters within a given string. ```python def longest_distinct_substring(s: str) -> str: pass # your code here # Test cases print(longest_distinct_substring(\\"abrkaabcdefghijjxxx\\")) # Output should be \\"abcdefghij\\" print(longest_distinct_substring(\\"abcabcbb\\")) # Output should be \\"abc\\" print(longest_distinct_substring(\\"pwwkew\\")) # Output should be \\"wke\\" print(longest_distinct_substring(\\" \\")) # Output should be \\" \\" print(longest_distinct_substring(\\"dvdf\\")) # Output should be \\"vdf\\" ``` The function `longest_distinct_substring` takes a string `s` as input and returns the longest substring that contains only distinct characters. The function should iterate through the string, keeping track of the longest substring found so far and ensuring that each character within this substring is unique. You can utilize a sliding window approach or any other efficient algorithm to solve this problem, maintaining a time complexity of O(n).","solution":"def longest_distinct_substring(s: str) -> str: Finds the longest substring with all distinct characters. longest = \\"\\" chars_seen = {} start = 0 for end, char in enumerate(s): if char in chars_seen and chars_seen[char] >= start: start = chars_seen[char] + 1 chars_seen[char] = end if end - start + 1 > len(longest): longest = s[start:end + 1] return longest"},{"question":"Write a function to generate all unique permutations of a given string. The function should take a single string as input and return a list of all possible unique permutations of that string in lexicographic (dictionary) order. Assume that all characters in the string are unique and there are no repeated characters. # Input The function will receive a single string `s`, where `1 <= len(s) <= 10`. # Output The function should return a list of strings, each string representing a unique permutation of the input string in lexicographic order. # Example ``` Input: \\"abc\\" Output: [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] Input: \\"dog\\" Output: [\\"dgo\\", \\"dog\\", \\"gdo\\", \\"god\\", \\"odg\\", \\"ogd\\"] ``` # Hint - You may need to use recursion or the built-in permutation generation function from libraries. - Ensure that the output list is sorted in lexicographic order before returning.","solution":"from itertools import permutations def generate_unique_permutations(s): Generates and returns all unique permutations of a given string in lexicographic order. Arguments: s -- Input string (with 1 <= len(s) <= 10) Returns: A list of all unique permutations of the input string in lexicographic order. perms = sorted([\'\'.join(p) for p in permutations(s)]) return perms"},{"question":"sum along diagonal The tool diag_sum returns the sum of the values along the diagonal of a square matrix. import numpy my_array = numpy.array([[2, 5], [3, 7]]) print numpy.trace(my_array) # Output: 9 my_array = numpy.array([[2, 5, 7], [3, 7, 6], [1, 3, 9]]) print numpy.trace(my_array) # Output: 18 The numpy.trace function sums elements along the matrix diagonal. You are given a square 2-D array with dimensions NxN. Your task is to compute the sum along the diagonal. Input Format The first line of input contains the value of N. The next N lines contain N space-separated integers each. Output Format Print the sum of the values along the diagonal of the matrix. Sample Input 3 2 5 7 3 7 6 1 3 9 Sample Output 18","solution":"import numpy as np def diag_sum(matrix): Returns the sum of the values along the diagonal of a square matrix. Parameters: matrix (list of list of int): A 2D list representing the matrix. Returns: int: Sum of the values along the diagonal. np_matrix = np.array(matrix) return np.trace(np_matrix)"},{"question":"In a distant kingdom, there is a system of roads connecting various cities. Each road has an associated toll cost and each city is represented by a node in an undirected graph, with roads being the edges between the nodes. The king wishes to optimize travel costs and has tasked you with finding the shortest path from a starting city to a destination city. Write a program that takes as input the number of cities, the number of roads, and the details of each road. Each road is defined by the two cities it connects and the cost to travel that road. The program should then determine the minimum travel cost between a specified starting city and a destination city using Dijkstra\'s algorithm. input The input consists of multiple datasets. Each dataset is provided in the following format: n m s d u1 v1 w1 u2 v2 w2 :: um vm wm The first line contains four positive integers: - n (n ≤ 1000) — number of cities. - m (m ≤ 10000) — number of roads. - s (1 ≤ s ≤ n) — starting city. - d (1 ≤ d ≤ n) — destination city. The next m lines contain three integers each: - ui, vi (1 ≤ ui, vi ≤ n) — cities connected by the ith road. - wi (1 ≤ wi ≤ 10000) — cost to travel the ith road. output For each dataset, output a single integer representing the minimum travel cost from the starting city s to the destination city d. If there is no path from s to d, output -1. Example Input 1 4 5 1 4 1 2 3 1 3 1 2 3 7 3 4 2 2 4 5 Output 3","solution":"import heapq def dijkstra_algorithm(n, m, s, d, roads): Function to find the minimum travel cost from city s to city d using Dijkstra\'s algorithm. :param n: int - Number of cities. :param m: int - Number of roads. :param s: int - Starting city. :param d: int - Destination city. :param roads: list of tuples - Each tuple contains (ui, vi, wi) representing roads. :return: int - Minimum travel cost from city s to city d or -1 if no path exists. graph = {i: [] for i in range(1, n+1)} for u, v, w in roads: graph[u].append((w, v)) graph[v].append((w, u)) priority_queue = [(0, s)] dist = {i: float(\'inf\') for i in range(1, n+1)} dist[s] = 0 visited = set() while priority_queue: current_dist, current_node = heapq.heappop(priority_queue) if current_node in visited: continue visited.add(current_node) for weight, neighbor in graph[current_node]: if neighbor not in visited: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return dist[d] if dist[d] != float(\'inf\') else -1"},{"question":"Your task is to implement a function that decomposes a given integer into a list of its prime factors. Here’s what you need to do: - Write a function that takes an integer `n` as input. - The function should return a list of integers representing the prime factors of `n` in ascending order. - If `n` is less than 2, the function should return an empty list. - The prime factors are the prime numbers that exactly divide the given integer, with each factor appearing as many times as it divides the integer. For example, given the integer `n = 60`, the function should return `[2, 2, 3, 5]` because 60 can be factored as 2 * 2 * 3 * 5. Here\'s a sample implementation to test: ```python def prime_factors(n): if n < 2: return [] factors = [] divisor = 2 while n >= divisor: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors # Example usage: print(prime_factors(60)) # Output: [2, 2, 3, 5] print(prime_factors(13)) # Output: [13] print(prime_factors(1)) # Output: [] ``` Make sure your implementation is optimized for performance for larger values of `n`.","solution":"def prime_factors(n): Returns the list of prime factors of the given integer n in ascending order. if n < 2: return [] factors = [] divisor = 2 while n >= divisor * divisor: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 if n > 1: factors.append(n) return factors"},{"question":"The kingdom of Lynaria is famous for its beautiful landscapes and unique transportation network. The transportation network consists of n cities connected by n-1 bidirectional roads forming a tree. Each road has a certain travel time associated with it. The citizens of Lynaria want to organize a festival. They plan to choose one of the cities as a festival city, and the festival will take place in that city. On the festival day, people from all other cities will travel to the festival city. The government of Lynaria wants to ensure that the longest travel time from any city to the festival city is minimized. Your task is to determine the city that should be chosen as the festival city to achieve this goal. ----Input---- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. For each test case: - The first line contains the integer n (2 le n le 10^5) — the number of cities. - The next n-1 lines each contain three integers u, v, and w (1 le u, v le n, 1 le w le 10^9), representing an undirected road between cities u and v with a travel time w. It\'s guaranteed that the sum of n over all test cases does not exceed 10^6. ----Output---- For each test case, print the city that should be chosen as the festival city such that the longest travel time from any city to the festival city is minimized. ----Example---- Input 3 4 1 2 4 2 3 2 2 4 6 3 1 2 1 1 3 1 5 1 2 5 1 3 1 2 4 2 3 5 3 Output 2 1 1 ----Note---- In the first test case, choosing city 2 as the festival city minimizes the maximum travel time. In the second test case, choosing city 1 as the festival city results in equal travel times for both cities connected to it. In the third test case, choosing city 1 minimizes the maximum travel time for all other cities. --- To solve the problem, you can first notice that the problem reduces to finding the center of the tree (a node close to the middle of the longest path in the tree). Using a combination of Breadth-First Search (BFS) and Depth-First Search (DFS) can efficiently determine the optimal festival city.","solution":"from collections import deque, defaultdict def bfs_farthest(start, n, adj): Utilizes BFS to find the farthest node from the starting node, along with its distance. distance = [-1] * (n + 1) distance[start] = 0 queue = deque([start]) farthest_node = start max_distance = 0 while queue: node = queue.popleft() for neighbor, weight in adj[node]: if distance[neighbor] == -1: # Not visited distance[neighbor] = distance[node] + weight queue.append(neighbor) if distance[neighbor] > max_distance: max_distance = distance[neighbor] farthest_node = neighbor return farthest_node, max_distance, distance def find_festival_city(n, roads): Finds the city that should be chosen as the festival city. if n == 2: return 1 # In case of only two cities, the first one can be the center adj = defaultdict(list) for u, v, w in roads: adj[u].append((v, w)) adj[v].append((u, w)) # Step 1: Find the farthest node from node 1 node_x, _, _ = bfs_farthest(1, n, adj) # Step 2: Find the farthest node from node_x to determine the longest path in the tree node_y, _, distance_from_x = bfs_farthest(node_x, n, adj) # Step 3: Use the distances from node_x to determine the festival city with minimal maximum distance _, _, distance_from_y = bfs_farthest(node_y, n, adj) min_max_distance = float(\'inf\') festival_city = node_x for city in range(1, n + 1): max_distance_from_two_nodes = max(distance_from_x[city], distance_from_y[city]) if max_distance_from_two_nodes < min_max_distance: min_max_distance = max_distance_from_two_nodes festival_city = city return festival_city def process_test_cases(test_cases): results = [] for n, roads in test_cases: results.append(find_festival_city(n, roads)) return results"},{"question":"A group of friends is planning a sports event where everyone will contribute towards the cost of the event. Every participant contributes a different amount. The organizer is responsible for calculating the total amount collected and the average contribution per participant. The organizer also has to handle the case where some participants decide to contribute a higher than average amount to cover for those who may have financial constraints and hence can contribute less. Write a function `calculateContribution` that computes the total amount collected, the average amount contributed, and the number of participants contributing more than the average. Function Description Complete the `calculateContribution` function in the editor below. It should return a tuple containing the total amount collected, the average contribution per participant, and the number of participants contributing more than the average. `calculateContribution` has the following parameter(s): - amounts: a list of integers representing the amount contributed by each participant Input Format The input consists of a single line containing a space-separated list of integers representing the contributions of each participant. Constraints - 1 leq n leq 10^5 where n is the number of participants - 1 leq text{amounts[i]} leq 10^4 for any valid index i Output Format The function should return a tuple in the format: (total_amount, average_amount, count_above_average), where: - `total_amount` is the total amount of money collected from all contributions - `average_amount` is the average contribution per participant (rounded down to the nearest integer) - `count_above_average` is the number of participants who contributed more than the average amount Sample Input 0 ``` 50 100 150 200 ``` Sample Output 0 ``` (500, 125, 2) ``` Explanation 0 The total amount collected from all contributions is 50 + 100 + 150 + 200 = 500. The average contribution per participant is 500 / 4 = 125. There are 2 participants who contributed more than the average amount (150 and 200). Thus, the function should return the tuple (500, 125, 2). Sample Input 1 ``` 10 20 30 40 50 ``` Sample Output 1 ``` (150, 30, 2) ``` Explanation 1 The total amount collected from all contributions is 10 + 20 + 30 + 40 + 50 = 150. The average contribution per participant is 150 / 5 = 30. There are 2 participants who contributed more than the average amount (40 and 50). Thus, the function should return the tuple (150, 30, 2).","solution":"def calculateContribution(amounts): Calculate the total amount collected, the average contribution, and the number of participants contributing more than the average. :param amounts: List of integers representing the contributions of participants :return: Tuple containing the total amount, average contribution, and count of participants contributing more than the average total_amount = sum(amounts) num_participants = len(amounts) average_amount = total_amount // num_participants # Using integer division for rounding down count_above_average = sum(1 for amount in amounts if amount > average_amount) return total_amount, average_amount, count_above_average"},{"question":"You are given an array of integers and a series of queries. Each query provides an integer value, and you need to determine the length of the longest subarray where the sum of the elements is less than or equal to the given value. -----Input----- The first line contains one integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4) — the elements of the array. The third line contains one integer q (1 ≤ q ≤ 10^5) — the number of queries. Then q lines follow. i-th line contains one integer v (1 ≤ v ≤ 10^9) for i-th query - the maximum sum of the subarray. -----Output----- Print q integers, where i-th integer is the answer to i-th query - the length of the longest subarray where the sum of the elements is ≤ v. -----Examples----- Input 5 1 2 3 4 5 3 5 7 10 Output 2 3 4 Input 4 4 4 4 4 2 4 8 Output 1 2","solution":"def longest_subarray_less_than_or_equal(arr, queries): # Function to find the longest subarray with sum <= val using sliding window technique def find_max_length(array, val): left = 0 current_sum = 0 max_length = 0 for right in range(len(array)): current_sum += array[right] while current_sum > val: current_sum -= array[left] left += 1 max_length = max(max_length, right - left + 1) return max_length results = [find_max_length(arr, query) for query in queries] return results"},{"question":"A software development company is working on a new feature for auto-validation of passwords. The passwords need to meet several criteria in order to be considered valid. The criteria are as follows: 1. The password must be at least 8 characters long. 2. The password must contain at least one uppercase letter. 3. The password must contain at least one lowercase letter. 4. The password must contain at least one digit. 5. The password must contain at least one special character from the set: !@#%^&*()-+ Write a program to determine if a given password is valid based on the above criteria. The program should take multiple passwords and evaluate each one separately. Input The input is given in the following format: N password_1 password_2 : password_N The first line provides the number of passwords N (1 ≤ N ≤ 1000). Each of the subsequent N lines provides one password to be validated. Each password consists of a string of printable ASCII characters and has a length between 1 and 100 characters. Output For each password, output a line containing \\"valid\\" if the password meets all the criteria or \\"invalid\\" otherwise. Example Input 3 Passw0rd! password P@ssw0rd Output valid invalid valid","solution":"import re def is_password_valid(password): Validate the password based on the given criteria: 1. at least 8 characters long 2. contains at least one uppercase letter 3. contains at least one lowercase letter 4. contains at least one digit 5. contains at least one special character from the set: !@#%^&*()-+ if len(password) < 8: return \\"invalid\\" if not re.search(r\'[A-Z]\', password): return \\"invalid\\" if not re.search(r\'[a-z]\', password): return \\"invalid\\" if not re.search(r\'[0-9]\', password): return \\"invalid\\" if not re.search(r\'[!@#%^&*()-+]\', password): return \\"invalid\\" return \\"valid\\" def validate_passwords(passwords): Validate a list of passwords. return [is_password_valid(password) for password in passwords]"},{"question":"A palindrome is a string that reads the same forward and backward. Given a string, Cheffina challenges Chef to determine whether it is possible to make it a palindrome by rearranging its characters. If it is possible, print \\"Yes\\", otherwise print \\"No\\". -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, a string S. -----Output:----- For each test case, output in a single line answer. -----Constraints----- - 1 leq T leq 10^3 - 1 leq |S| leq 1000 - S consists of lowercase English letters only. -----Sample Input:----- 3 civic ivicc hello -----Sample Output:----- Yes Yes No","solution":"def can_form_palindrome(s): Checks if the given string s can be rearranged to form a palindrome. char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Check the number of characters with odd count odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # A string can be rearranged to form a palindrome if it has at most one character with an odd count if odd_count <= 1: return \\"Yes\\" else: return \\"No\\" # Handling multiple test cases def palindromic_rearrangement(t, test_cases): results = [] for s in test_cases: results.append(can_form_palindrome(s)) return results # Read input def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) test_cases = data[1:] results = palindromic_rearrangement(t, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Write a function that takes an array of integers and returns the product of all positive integers in the array. If there are no positive integers, return 1. Examples: productOfPositives([1, -4, 7, 12]) -> 84 productOfPositives([-3, -5, -7]) -> 1","solution":"def productOfPositives(arr): Returns the product of all positive integers in the array. If there are no positive integers, return 1. product = 1 has_positive = False for num in arr: if num > 0: product *= num has_positive = True return product if has_positive else 1"},{"question":"You are given an m x n grid representing a maze. Each cell in the maze can either be a wall (#) or a path (.). You want to escape the maze starting from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1). You can move up, down, left, or right, but not diagonally. Determine the minimum number of steps required to reach the bottom-right corner from the top-left corner. If it is not possible to escape the maze, return -1. Constraints: - 1 ≤ m, n ≤ 1000 Input: m n maze_row1 maze_row2 . . maze_rowm Output: Output the minimum number of steps required to escape the maze or -1 if it is impossible. Examples Input 5 5 ..#.# #..#. #..#. .#..# #.#.. Output 8 Input 5 5 . #.# . #.# #.# Output -1","solution":"from collections import deque def min_steps_to_escape_maze(m, n, maze): # Directions for movement: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < m and 0 <= y < n and maze[x][y] == \'.\' # BFS from the top-left corner queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == m - 1 and y == n - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return -1 def solve_maze_escape_problem(m, n, maze): maze = [list(row) for row in maze] return min_steps_to_escape_maze(m, n, maze) # Example usage: # m = 5 # n = 5 # maze = [ # \\"...#.\\", # \\"#..#.\\", # \\"#..#.\\", # \\".#..#\\", # \\"#.#..\\" # ] # print(solve_maze_escape_problem(m, n, maze)) # Output: 8"},{"question":"Given two integers n and k, an array A of size n, create a function findKthSmallest(A, n, k) that returns the k-th smallest element in the array. Example 1: Input: A = [7, 10, 4, 3, 20, 15] n = 6 k = 3 Output: 7 Example 2: Input: A = [7, 10, 4, 3, 20, 15] n = 6 k = 4 Output: 10 Your Task: You don\'t need to read input or print anything. Your task is to complete the function findKthSmallest() which takes an array A, an integer n, and an integer k as input and returns the k-th smallest element in the array. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 1 <= k <= n 1 <= A[i] <= 10^4","solution":"def findKthSmallest(A, n, k): Finds the k-th smallest element in an array. Parameters: - A: List[int], the input array - n: int, the size of the array - k: int, the position of the k-th smallest element to return Returns: - int, the k-th smallest element in the array A.sort() return A[k - 1]"},{"question":"Sagheer is fascinated by numbers and sequences. One day, he came across a challenging problem. He has an array of integers and he wants to select a contiguous subarray such that the sum of the elements in the subarray is as close as possible to a given integer target T. Sagheer needs your help to determine the sum of the subarray that is closest to T. **Input:** The first line contains two integers n and T (1 ≤ n ≤ 10^5, |T| ≤ 10^9) — the size of the array and the target sum. The second line contains n space-separated integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4) — the elements of the array. **Output:** On a single line, print an integer representing the sum of the subarray that is closest to T. **Examples:** Input 5 10 2 -1 2 3 4 Output 10 Input 3 1 -2 2 1 Output 1 Input 4 8 1 3 -1 7 Output 9 **Explanation:** In the first example, the subarray [2, -1, 2, 3, 4] has a sum of 10 which is exactly equal to T. In the second example, the subarray [2, -1, 2] and [1] both have sums close to 1 but [1] is exactly equal to T. In the third example, the subarray [1, 3, -1, 7] has sum 10 but the sum closest to T = 8 is actually the sum of subarray [1, 3, -1, 7] which is 9.","solution":"def find_closest_subarray_sum(n, T, array): Finds the sum of the subarray that is closest to the target T. Parameters: n (int): the size of the array. T (int): the target sum. array (list of int): the elements of the array. Returns: int: the sum of the subarray that is closest to T. closest_sum = float(\'inf\') prefix_sums = {0: -1} current_sum = 0 for i in range(n): current_sum += array[i] # Iterate through all previously seen prefix sums for s in prefix_sums: subarray_sum = current_sum - s if abs(subarray_sum - T) < abs(closest_sum - T): closest_sum = subarray_sum prefix_sums[current_sum] = i return closest_sum"},{"question":"Given an integer n, calculate the sum of the cubes of all integers from 1 to n. Note that the result can be large, so you should return the result modulo (10^9 + 7). Example 1: Input: n = 3 Output: 36 Explanation: The sum of the cubes of integers from 1 to 3 is (1^3 + 2^3 + 3^3 = 1 + 8 + 27 = 36). Example 2: Input: n = 5 Output: 225 Explanation: The sum of the cubes of integers from 1 to 5 is (1^3 + 2^3 + 3^3 + 4^3 + 5^3 = 1 + 8 + 27 + 64 + 125 = 225). Your Task: You don\'t need to read or print anything. Your task is to complete the function sum_of_cubes() which takes an integer n as input parameter and returns the sum of cubes of all integers from 1 to n, modulo (10^9 + 7). Expected Time Complexity: O(1) Expected Space Complexity: O(1) Constraints: 1 <= n <= (10^{18})","solution":"def sum_of_cubes(n): Calculate the sum of the cubes of all integers from 1 to n, and return it modulo 10^9 + 7. MOD = 10**9 + 7 sum_n = (n * (n + 1) // 2) % MOD return (sum_n * sum_n) % MOD"},{"question":"You are given an array of positive integers and a positive integer k. You need to determine whether there exists a subarray (contiguous elements) in the array whose sum is exactly k. A subarray is defined as a non-empty contiguous part of an array. Write a function that takes two parameters: the array of integers and the integer k, and returns a boolean value indicating whether there is a subarray whose sum is k or not. -----Input----- The first line contains two integers n, k (1 le n le 10^5, 1 le k le 10^9), where n is the number of integers in the array, and k is the target sum. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^4) - the elements of the array. -----Output----- Output \\"YES\\" if there exists a subarray whose sum is exactly k, otherwise output \\"NO\\". -----Examples----- Input 5 12 1 2 3 7 5 5 15 1 2 3 7 5 6 9 1 2 1 3 0 2 Output YES YES YES -----Note----- In the first example, there is a subarray with a sum of 12: [2, 3, 7]. In the second example, there is a subarray with a sum of 15: [1, 2, 3, 7, 2]. In the third example, there are subarrays with a sum of 9, such as [1, 2, 1, 3, 2].","solution":"def subarray_sum_exists(arr, k): Determines whether there exists a subarray whose sum is exactly k. Args: arr: List[int] - list of positive integers k: int - target sum to find in the subarray Returns: bool - True if such a subarray exists, otherwise False n = len(arr) current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > k and start <= end: current_sum -= arr[start] start += 1 if current_sum == k: return True return False"},{"question":"Example Input 3 Bob 5 10 15 Output 10 --- Given a list of integers and a string name, output the median of the list of integers. If the list has an even number of elements, output the average of the two middle elements. # Input - A single integer n, representing the number of elements in the subsequent list. - A string name, used simply as a placeholder and can be ignored in the calculations. - A list of n integers separated by spaces. # Output - A single integer representing the median of the input list. If the list has an even number of elements, output the integer average of the two central elements. # Example Input ```plaintext 5 Charlie 4 1 3 5 2 ``` Output ```plaintext 3 ``` Input ```plaintext 4 Dana 8 3 7 4 ``` Output ```plaintext 5 ```","solution":"def find_median(n, name, numbers): Finds the median of a list of numbers, if the length of the list is even, it returns the integer average of the two central numbers. Parameters: n (int) : Number of elements in the list. name (str) : Placeholder name. numbers (List[int]) : List of integers whose median is to be calculated. Returns: int : Median of the list of numbers. sorted_numbers = sorted(numbers) mid = n // 2 if n % 2 == 1: # odd number of elements return sorted_numbers[mid] else: # even number of elements return (sorted_numbers[mid - 1] + sorted_numbers[mid]) // 2"},{"question":"Given a matrix M of dimensions n times n containing integers, you need to perform a set of operations to make all diagonal elements equal. The operations you can perform are: Add 1 to all elements in any row. Add 1 to all elements in any column. Determine if it\'s possible to make all the diagonal elements equal after any number of operations. A diagonal element in M is any element M[i][j] where i = j. -----Input----- The first line contains an integer t (1 leq t leq 100) — the number of test cases. For each test case, the first line contains an integer n (2 leq n leq 50) — the size of the matrix. The next n lines each contain n integers, representing the elements of the matrix M. The element in the i-th row and j-th column of the matrix is M[i][j] (1 leq M[i][j] leq 1000). -----Output----- Output t lines, each containing the answer to the respective test case. As an answer, output \\"YES\\" if it is possible to make all diagonal elements equal, and \\"NO\\" otherwise. You can output the answer in any case (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will be recognized as a positive answer). -----Examples----- Input 2 3 1 2 3 4 5 6 7 8 9 4 1 2 3 4 2 3 4 5 3 4 5 6 4 5 6 7 Output YES YES -----Explanation----- In the first test case, we can increment the second row by 4 and the third row by 8 to make all the diagonal elements equal to 9. In the second test case, we can observe after certain operations, it will be possible to make all diagonal elements equal. This problem tests your ability to manipulate matrix elements through permissible operations to achieve a uniform diagonal, analyzing both row and column-wise adjustments.","solution":"def can_make_diagonal_equal(test_cases): results = [] for case in test_cases: n, matrix = case diagonal_elements = set(matrix[i][i] for i in range(n)) if len(diagonal_elements) == 1: results.append(\\"YES\\") else: results.append(\\"YES\\") return results def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) matrix = [] for i in range(n): row = list(map(int, lines[index + 1 + i].split())) matrix.append(row) test_cases.append((n, matrix)) index += n + 1 return test_cases def format_output(results): return \'n\'.join(results) # Example test case to test the functions input_data = \'\'\'2 3 1 2 3 4 5 6 7 8 9 4 1 2 3 4 2 3 4 5 3 4 5 6 4 5 6 7\'\'\' test_cases = parse_input(input_data) results = can_make_diagonal_equal(test_cases) print(format_output(results)) # expected: YESnYES"},{"question":"replace The replace function in Python allows for the substitution of specified parts of a string with new content. Given a string and specific characters to replace, it can generate a new string with the replacements applied. For example: ``` text = \\"Hello World\\" new_text = text.replace(\\"Hello\\", \\"Goodbye\\") print(new_text) # Output: \\"Goodbye World\\" ``` The above code demonstrates replacing \\"Hello\\" with \\"Goodbye\\" in the provided text. Task You are given a string s, a substring sub1 to find, and a substring sub2 to replace sub1 with. Your task is to perform this replacement and print the new string. Input Format The first line of input contains the string s. The second line contains the substring sub1 to be replaced. The third line contains the substring sub2 that will replace sub1. Output Format Print the new string after performing the replacement. Sample Input apple orange banana apple grape apple kiwi Sample Output kiwi orange banana kiwi grape Explanation The substring \\"apple\\" is replaced with \\"kiwi\\" in the provided string, resulting in the new string \\"kiwi orange banana kiwi grape\\".","solution":"def replace_substring(s, sub1, sub2): Replaces all occurrences of sub1 in string s with sub2. Parameters: s (str): The original string. sub1 (str): The substring to be replaced. sub2 (str): The substring to replace with. Returns: str: The new string after replacement. return s.replace(sub1, sub2)"},{"question":"# Task: Write a function `largest_sum_subarray` which takes an array of integers as input and returns the sum of the largest sum contiguous subarray using the Kadane\'s Algorithm. If the input array is empty, the function should return `0`. # Examples: `largest_sum_subarray([-2, -3, 4, -1, -2, 1, 5, -3])`: 7 `largest_sum_subarray([1, 2, 3, 4, -10])`: 10 `largest_sum_subarray([])`: 0 Hint: Use two variables to track the current subarray sum and the maximum subarray sum. # Note: - The function should handle both positive and negative integers. - The function should have a linear time complexity O(n).","solution":"def largest_sum_subarray(arr): Returns the sum of the largest sum contiguous subarray using Kadane\'s Algorithm. Parameters: arr (list): A list of integers Returns: int: The sum of the largest sum contiguous subarray if not arr: # Handle if the array is empty return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given an array of integers representing the heights of buildings in a row. Each building\'s width is 1. The goal is to determine the maximum area of a rectangular container that can be formed by any two of the buildings, where the two buildings perform the container\'s height. Write a function `maxContainerArea` that receives the array of heights and returns the maximum area of a rectangular container that can be formed. The container\'s width is the difference in the indexes of the two buildings. Example 1: Input: [1, 8, 6, 2, 5, 4, 8, 3, 7] Output: 49 Explaination: The maximum rectangular container is formed by the heights at index 1 and index 8 with width 8-1=7 and height min(8, 7)=7, so the area=7*7=49. Example 2: Input: [1, 2, 1] Output: 2 Explaination: The maximum rectangular container is formed by the heights at index 0 and index 2 with width 2-0=2 and height min(1, 1)=1, so the area=2*1=2. Example 3: Input: [4, 3, 2, 1, 4] Output: 16 Explaination: The maximum rectangular container is formed by the heights at index 0 and index 4 with width 4-0=4 and height min(4, 4)=4, so the area=4*4=16. Example 4: Input: [1, 2, 4, 3] Output: 4 Explaination: The maximum rectangular container is formed by the heights at index 1 and index 2 with width 2-1=1 and height min(2, 4)=2, so the area=1*2=4. Constraints: 1 <= heights.length <= 10^5 1 <= heights[i] <= 10^4 Expected Time Complexity: O(n) Expected Space Complexity: O(1)","solution":"def maxContainerArea(heights): Returns the maximum area of a rectangular container that can be formed by any two buildings. left, right = 0, len(heights) - 1 max_area = 0 while left < right: width = right - left height = min(heights[left], heights[right]) area = width * height max_area = max(max_area, area) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area"},{"question":"Alice loves jumping over hurdles while running on a circular track. The track consists of a series of numbered hurdles placed in a circular manner. Each hurdle has a certain height and each time Alice jumps over a hurdle, she can choose to either jump clockwise or counterclockwise to the next hurdle. Alice\'s goal is to complete one full circle of the track, jumping over each hurdle exactly once and then return to the starting hurdle. She wants your help in determining if this is possible for her given jump height. Input - The first line contains an integer n (1 leq n leq 15) — the number of hurdles. - The second line contains an integer h (1 leq h leq 100) — the maximum height Alice can jump. - The third line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 100), where a_i is the height of each hurdle from 1 to n, in clockwise order. Output If Alice can complete one full circle, jumping over each hurdle exactly once and return to the starting hurdle, print \\"YES\\". Otherwise, print \\"NO\\". Examples # Input ``` 5 10 1 3 2 6 5 ``` # Output ``` YES ``` # Input ``` 4 4 5 6 5 6 ``` # Output ``` NO ``` # Input ``` 3 7 7 10 7 ``` # Output ``` NO ``` # Note In the first example, Alice can easily jump over all hurdles. Regardless of the direction (clockwise / counterclockwise), the heights are within her maximum jump height. In the second example, since all hurdles\' heights are more than her jump height, it is impossible for Alice to jump over any hurdle. In the third example, although Alice can clear the first and the last hurdle, she cannot clear the second hurdle due to its height (10), preventing her from completing the circle.","solution":"def can_complete_circle(n, h, hurdles): Determines if Alice can complete one full circle of the track, jumping over each hurdle exactly once and returning to the starting hurdle. Parameters: n (int): Number of hurdles. h (int): Maximum height Alice can jump. hurdles (list): A list of integers representing the height of each hurdle in clockwise order. Returns: str: \\"YES\\" if Alice can complete the circle, \\"NO\\" otherwise. for height in hurdles: if height > h: return \\"NO\\" return \\"YES\\""},{"question":"Your task is to build a balanced binary search tree (BST) from a given sorted array of unique integers. A balanced BST is a binary tree in which the depth of the two subtrees of every node never differs by more than one. You need to ensure that the tree is height-balanced. Write a function: ```python def sorted_array_to_bst(nums: [int]) -> TreeNode: ``` # Input - `nums`: A list of unique integers sorted in ascending order with length between 0 and 10000. # Output - Return the root node of a height-balanced BST. # Example ```python # Given the sorted array: nums = [-10, -3, 0, 5, 9] # One possible BST result: # 0 # / # -3 9 # / / # -10 5 ``` Note: - The function should be efficient with respect to both time and space. - The TreeNode class is defined as follows: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` Define your function such that it follows the constraints and returns a correctly balanced BST.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def sorted_array_to_bst(nums): if not nums: return None def convert_list_to_bst(left, right): if left > right: return None mid = (left + right) // 2 node = TreeNode(nums[mid]) node.left = convert_list_to_bst(left, mid - 1) node.right = convert_list_to_bst(mid + 1, right) return node return convert_list_to_bst(0, len(nums) - 1)"},{"question":"Write a function that checks whether a given string is a palindrome, considering only alphanumeric characters and ignoring cases. INPUT: First line contains the number of test cases t. For each test case, there is a single line representing a string s. OUTPUT: For each test case, output \\"Yes\\" if the string is a palindrome and \\"No\\" otherwise. Constraints: 1 ≤ t ≤ 100 1 ≤ len(s) ≤ 1000 SAMPLE INPUT 2 A man, a plan, a canal: Panama race a car SAMPLE OUTPUT Yes No","solution":"import re def is_palindrome(s): s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() return s == s[::-1] def check_palindromes(test_cases): results = [] for s in test_cases: if is_palindrome(s): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Alice is organizing a coding contest with a series of problems. Each problem has a distinct difficulty level, represented by an integer. The contest rules dictate that each problem must be solved in order of increasing difficulty. Alice wants to prepare a contest containing exactly `k` problems. To do this, she needs to choose `k` out of the given `n` problems such that the difference between the maximum and minimum difficulties in the chosen problems is minimized. Help Alice determine the smallest possible difference between the maximum and minimum difficulties in the chosen subset of problems. -----Input----- The first line contains two integers `n` (1 ≤ n ≤ 2 × 10^5) and `k` (1 ≤ k ≤ n), representing the number of available problems and the number of problems to choose, respectively. The second line contains `n` integers `d_1, d_2, … , d_n` (1 ≤ d_i ≤ 10^9), where `d_i` is the difficulty level of the `i`-th problem. -----Output----- Print the smallest possible difference between the maximum and minimum difficulties in the chosen subset of `k` problems. -----Examples----- Input 5 3 10 20 30 40 50 Output 20 Input 6 2 1 3 7 10 20 25 Output 2 Input 4 4 8 8 8 8 Output 0 -----Note----- In the first example, by choosing problems with difficulties 10, 20, and 30, the difference between the maximum and minimum difficulties is 20, which is minimal. In the second example, choosing problems with difficulties 1 and 3, the difference is 2, which is minimal. In the third example, all chosen problems have the same difficulty, resulting in a difference of 0.","solution":"def smallest_difficulty_difference(n, k, difficulties): Returns the smallest possible difference between the maximum and minimum difficulties in the chosen subset of k problems. Parameters: n (int): The number of available problems. k (int): The number of problems to choose. difficulties (list): The difficulty levels of the problems. Returns: int: The smallest possible difference. difficulties.sort() min_diff = float(\'inf\') for i in range(n - k + 1): diff = difficulties[i + k - 1] - difficulties[i] if diff < min_diff: min_diff = diff return min_diff"},{"question":"Alice loves playing with sequences of numbers. One day, she decided to create a game where she can perform a specific operation on a sequence to transform it into a sequence of equal elements. The operation she can perform on the sequence is to select any subsequence and increment each element of the selected subsequence by 1. She wonders what is the minimum number of operations needed to transform a given sequence into a sequence where all elements are equal. Help Alice solve this problem by writing a function that computes the minimum number of operations needed to achieve her goal. Input The first line of the input file contains a single integer n (1 ≤ n ≤ 100), representing the number of elements in the sequence. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100), representing the elements of the sequence. Output Print a single integer, the minimum number of operations needed to transform the given sequence into a sequence of equal elements. Examples Input 3 1 2 3 Output 2 Input 5 4 4 4 4 4 Output 0 Input 4 4 3 2 1 Output 3","solution":"def min_operations_to_equal_elements(n, sequence): Returns the minimum number of operations needed to transform the given sequence into a sequence where all elements are equal by selecting any subsequence and incrementing each element of the selected subsequence by 1. :param n: int: number of elements in the sequence :param sequence: list of int: the sequence of elements :return: int: minimum number of operations # The minimum number of operations needed is determined by the difference # between the maximum element in the sequence and the minimum element in the sequence. max_element = max(sequence) min_element = min(sequence) return max_element - min_element"},{"question":"Consider a grid of size `n x m` filled with lowercase English letters. You need to find out if there exists a path in the grid such that by following the path from any letter \'s\' to any letter \'e\', all the characters in the path form the word \\"snake\\", where \'s\' is the starting letter and \'e\' is the ending letter. The path can move one step at a time to the left, right, up, or down, but cannot visit any cell more than once in one path. Write a function to determine if such a path exists in the grid. ------ Input ------ The first line contains two integers `n` and `m` — the number of rows and columns in the grid. Each of the next `n` lines contains a string of `m` length representing the grid filled with lowercase English letters. ------ Output ------ Output \\"YES\\" if there exists a path such that the path spells \\"snake\\", otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ n, m ≤ 1000 ------ Example 1 ------ Input 5 5 saske najnk akepq kspoi ereek Output YES ------ Example 2 ------ Input 4 4 abcd asde sfgh ijkl Output NO Note: In the first example, one possible path is following: - Start at grid[1][1] (Letter \'s\') - Move to grid[1][2] (Letter \'a\') - Move to grid[2][3] (Letter \'n\') - Move to grid[3][2] (Letter \'a\') - Move to grid[3][1] (Letter \'k\') - Move to grid[5][1] (Letter \'e\') Note: In the second example, there is no valid path that spells \\"snake\\".","solution":"def find_path_in_grid(n, m, grid): target = \\"snake\\" target_len = len(target) def is_valid(x, y): return 0 <= x < n and 0 <= y < m def dfs(x, y, index, visited): if index == target_len: return True if not is_valid(x, y) or grid[x][y] != target[index]: return False visited.add((x, y)) neighbors = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)] for nx, ny in neighbors: if (nx, ny) not in visited: if dfs(nx, ny, index+1, visited): return True visited.remove((x, y)) return False for i in range(n): for j in range(m): if grid[i][j] == \'s\': if dfs(i, j, 0, set()): return \\"YES\\" return \\"NO\\" # Example Usage (for unit tests): # result1 = find_path_in_grid(5, 5, [\\"saske\\", \\"najnk\\", \\"akepq\\", \\"kspoi\\", \\"ereek\\"]) # Should return \\"YES\\" # result2 = find_path_in_grid(4, 4, [\\"abcd\\", \\"asde\\", \\"sfgh\\", \\"ijkl\\"]) # Should return \\"NO\\""},{"question":"Divide Work Notebooks Alice works at a stationary store and there are several notebooks to be divided into different work categories for her customers. There are `n` customers and `m` types of work categories. Each customer will receive exactly one notebook in each of the `m` work categories. You are given an array `quantities` of length `m` where `quantities[i]` represents the number of notebooks available in the `i-th` work category. The notebooks should be distributed such that each of the `n` customers gets exactly one notebook from each category. Determine if it is possible to distribute the notebooks to all the customers based on the given conditions. If it is possible, output \\"YES\\", otherwise output \\"NO\\". -----Input----- - The first line contains two integers `n` and `m` (1 le n, m le 10^5). - The second line contains `m` integers where the `i-th` integer is `quantities[i]` (1 le quantities[i] le 10^9). -----Output----- - Print \\"YES\\" if it\'s possible to distribute the notebooks as described, otherwise print \\"NO\\". -----Examples----- Input 3 2 6 9 Output YES Input 4 3 4 2 3 Output NO Input 2 1 2 Output YES -----Note----- In the first example, there are 3 customers and 2 categories of notebooks with 6 and 9 notebooks available respectively. Each customer needs one notebook per category, and we have enough notebooks for all customers, so the answer is \\"YES\\". In the second example, there are 4 customers and 3 categories with 4, 2, and 3 notebooks respectively. Since each customer needs one notebook from each category, and we do not have enough notebooks in the second category (only 2 notebooks for 4 customers), so the answer is \\"NO\\". In the third example, there are 2 customers and 1 category with exactly 2 notebooks which perfectly matches the requirement, thus the answer is \\"YES\\".","solution":"def can_distribute_notebooks(n, m, quantities): Determine if it is possible to distribute notebooks to the customers. Parameters: n (int): Number of customers. m (int): Number of work categories. quantities (list): List of integers where quantities[i] represents the notebooks available in the i-th category. Returns: str: \\"YES\\" if possible to distribute notebooks, otherwise \\"NO\\". for quantity in quantities: if quantity < n: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of N integers. Your task is to find out the length of the longest subarray which is bi-modal. A subarray is called bi-modal if it can be divided into two contiguous subarrays such that the first one is strictly increasing and the second one is strictly decreasing, or vice versa. Input: The first line of input contains an integer T — the number of test cases. T test cases follow. For each test case, the first line contains an integer N — the size of the array. The second line contains N space-separated integers a1, a2, ..., aN — the elements of the array. Output: For each test case, output a single line containing the length of the longest bi-modal subarray. If there is no such subarray, output 0. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 1 ≤ ai ≤ 10^9 SAMPLE INPUT 2 6 1 3 5 4 2 1 7 1 4 3 3 2 1 5 SAMPLE OUTPUT 6 4 Explanation For the first sample: The longest bi-modal subarray is [1, 3, 5, 4, 2, 1]. It increases from 1 to 5 and then decreases from 5 to 1. For the second sample: The longest bi-modal subarray is [4, 3, 3, 2]. One of the valid subarrays is [4, 3, 3, 2]. (Note: The solution expects a proper choice of subarray for exact length calculation and in strict cases, handling may vary as per problem definition.)","solution":"def longest_bimodal_subarray_length(array): n = len(array) if n < 2: return 0 max_length = 0 for i in range(1, n - 1): # Check for increasing followed by decreasing j = i while j - 1 >= 0 and array[j - 1] < array[j]: j -= 1 k = i while k + 1 < n and array[k + 1] < array[k]: k += 1 if j < i and k > i: max_length = max(max_length, k - j + 1) # Check for decreasing followed by increasing j = i while j - 1 >= 0 and array[j - 1] > array[j]: j -= 1 k = i while k + 1 < n and array[k + 1] > array[k]: k += 1 if j < i and k > i: max_length = max(max_length, k - j + 1) return max_length def find_longest_bimodal_subarray(T, test_cases): results = [] for case in test_cases: N, arr = case results.append(longest_bimodal_subarray_length(arr)) return results"},{"question":"Kingdom\'s annual archery competition has just concluded and you, as the head statistician, need to process the results. The competition had N participants, and each participant had a unique ID from 1 to N. The competition consisted of K rounds, where each round recorded the scores of all participants. Now, you are required to determine the top M participants based on their total scores across all rounds. ------ Input ------ The first line of input contains three space-separated integers N, K, and M - the number of participants, the number of rounds, and the number of top participants to be selected, respectively. The next K lines each contain N space-separated integers that represent the scores of all participants in that round. ------ Output ------ Output M unique integers, representing the IDs of the top M participants in descending order of their total scores. If there are ties, participants with smaller IDs should appear earlier. ------ Constraints ------ 1 ≤ N ≤ 10^{3} 1 ≤ K ≤ 10 1 ≤ M ≤ N 0 ≤ text{Score}_{ij} ≤ 1000 (where Score_{ij} is the score of participant i in round j) ------ Sample Input 1 ------ 5 3 3 10 20 30 40 50 25 15 5 45 10 5 10 20 35 40 ------ Sample Output 1 ------ 4 5 1 ------ Explanation 1 ------ The total scores of the participants across all rounds are: - Participant 1: 10 + 25 + 5 = 40 - Participant 2: 20 + 15 + 10 = 45 - Participant 3: 30 + 5 + 20 = 55 - Participant 4: 40 + 45 + 35 = 120 - Participant 5: 50 + 10 + 40 = 100 Therefore, the top 3 participants based on the total scores are participant 4 (120), participant 5 (100), and participant 3 (55). Since we need to select M participants and there are only M=3 participants, no further discretion is needed.","solution":"def top_participants(N, K, M, scores): Returns the IDs of the top M participants based on total scores. total_scores = [0] * N for round_scores in scores: for i in range(N): total_scores[i] += round_scores[i] participants = list(range(1, N + 1)) participants.sort(key=lambda x: (-total_scores[x - 1], x)) return participants[:M]"},{"question":"In a small village, farmers grow a variety of crops and want to optimize their irrigation system based on the seasonal changes in demand for water in different plots. They have built a system that can handle specific requirements for an interval of days. There are two types of operations they can perform on their irrigation system, described as follows: 1. The first type of operation is \\"1 L R X\\", which means to add an amount X to each day\'s demand for water from day L to day R, inclusive. 2. The second type of operation is \\"2 L R\\", which means to find the maximum single day\'s demand for water within the interval from day L to day R, inclusive, after performing all additions. Given a sequence of days with an initial demand for water set to 0 for each day, help the farmers by performing a sequence of operations. # Input The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 100,000), where `n` is the number of days and `m` is the number of operations. The next `m` lines contain the descriptions of the operations. The operation of the first type is given by four integers: `1 L R X` (1 ≤ L ≤ R ≤ n; 0 ≤ X ≤ 10^6). The operation of the second type is given by three integers: `2 L R` (1 ≤ L ≤ R ≤ n). # Output For each operation of the second type, print the maximum demand for water on any single day within the specified interval after all relevant operations have been performed. # Examples Input ``` 5 4 1 1 3 2 2 2 4 1 3 4 3 2 1 5 ``` Output ``` 2 5 ``` Explanation: - After the first operation, the days\' demands become `[2, 2, 2, 0, 0]`. - The maximum demand from day 2 to day 4 is 2. - After the third operation, the days\' demands become `[2, 2, 5, 3, 0]`. - The maximum demand from day 1 to day 5 is 5.","solution":"def irrigation_system(n, operations): demands = [0] * n results = [] for op in operations: op = list(map(int, op.split())) if op[0] == 1: _, L, R, X = op for i in range(L-1, R): demands[i] += X elif op[0] == 2: _, L, R = op max_demand = max(demands[L-1:R]) results.append(max_demand) return results"},{"question":"A company is hosting a rather unusual race where the participants, instead of running or walking, advance based on their coding skills. The race track is a simple straight line that, curiously enough, happens to be represented as an array of integers. Each participant can move from one position to another based on the values in these array elements, which denote the maximum number of steps that can be taken from each respective position. Given an array representing the race track and initial position, you are to determine if a participant can reach the last position (which is the finish line) starting from the given initial position. Write a function `can_reach_end(track, position)` that takes an array `track` and an integer `position` as input parameters and returns `True` if the participant can reach the finish line from that position, and `False` otherwise. # Constraints: - The array `track` will have at least one element and at most 10,000 elements. - Each element in the array will be a non-negative integer, where `track[i]` represents the maximum number of steps that can be taken forward from the position `i`. - The `position` is a non-negative integer that represents the starting position within the array and should be within the range of the array indices. # Example: ```python can_reach_end([3, 2, 1, 0, 4], 0) # Returns: False can_reach_end([2, 3, 1, 1, 4], 0) # Returns: True can_reach_end([3, 2, 1, 0, 4], 2) # Returns: False can_reach_end([3, 2, 1, 2, 0, 4], 1) # Returns: True ``` # Explanation: In the first example, starting from position 0, the participant can jump up to 3 steps forward. However, no matter how the participant advances, they will eventually encounter a 0, which prevents them from reaching the end. In the second example, the participant can start at position 0 and successfully navigate to the end of the array following the allowed step maximums.","solution":"def can_reach_end(track, position): Determines if the participant can reach the last position in the track starting from the given position. :param track: List[int] - array representing the race track. :param position: int - starting position in the array. :return: bool - True if the participant can reach the end, False otherwise. furthest_reach = position last_index = len(track) - 1 for i in range(position, len(track)): if i > furthest_reach: break furthest_reach = max(furthest_reach, i + track[i]) if furthest_reach >= last_index: return True return False"},{"question":"Given a list of integers, rearrange the elements of the list in such a way that the sum of any two consecutive elements is not divisible by a given integer K. If no such arrangement is possible, return an empty list. Example 1: Input: N = 4 K = 3 arr[] = {1, 3, 6, 9} Output: [] Explanation: It\'s not possible to rearrange the array elements such that the sum of any two consecutive elements is not divisible by 3. Example 2: Input: N = 5 K = 4 arr[] = {1, 2, 3, 4, 5} Output: [1, 2, 5, 4, 3] Explanation: One possible arrangement is [1, 2, 5, 4, 3]. Here, the sum of any two consecutive elements is not divisible by 4. Your Task: You don\'t need to print anything. Your task is to complete the function rearrange() which takes the array arr[], its size N, and the integer K as input parameters and returns the rearranged array if possible; otherwise, it returns an empty list. Expected Time Complexity: O(N!) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10 1 ≤ K ≤ 100 1 ≤ arr[] ≤ 100","solution":"from itertools import permutations def rearrange(N, K, arr): for perm in permutations(arr): valid = True for i in range(N - 1): if (perm[i] + perm[i + 1]) % K == 0: valid = False break if valid: return list(perm) return []"},{"question":"Given a string S and a positive integer K, you need to make S a palindrome by deleting exactly K characters from it. If it is possible to make S a palindrome by deleting exactly K characters from it, return \\"YES\\"; otherwise, return \\"NO\\". A palindrome is a word that reads the same backward as forward (e.g., \\"radar\\", \\"level\\"). Input: The first line contains the number of test cases. Each test case consists of a string S and an integer K. Output: Print \\"YES\\" if it is possible to delete exactly K characters to make the string a palindrome. Otherwise, print \\"NO\\". SAMPLE INPUT 3 abcde 2 abbca 1 abc 1 SAMPLE OUTPUT NO YES NO Explanation Testcase 1: By deleting 2 characters, we can\'t make \\"abcde\\" a palindrome. Testcase 2: By deleting 1 character \'a\' from \\"abbca\\", we get \\"bbca\\", which is not a palindrome. Deleting \'c\' from original string, we get \'abba\', making it a palindrome. Hence, answer is YES. Testcase 3: By deleting 1 character from \\"abc\\", it can\'t be made a palindrome.","solution":"def can_form_palindrome(S, K): def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) return dp[0][n-1] longest_palindrome_length = longest_palindromic_subsequence(S) min_deletions_to_palindrome = len(S) - longest_palindrome_length if min_deletions_to_palindrome == K: return \\"YES\\" else: return \\"NO\\" def process_test_cases(test_cases): results = [] for S, K in test_cases: results.append(can_form_palindrome(S, K)) return results"},{"question":"Hannah\'s farm has \'n\' plots arranged in a straight line and she decides to plant different kinds of crops there. However, farming regulations demand that the same type of crop should not be planted adjacently. With the given array, where each element represents the type of crop Hannah intends to plant in that plot, determine the minimum number of changes required to satisfy the regulations. For example, if the farm has \'n\' plots and array c represents the crop type for each plot, Hannah can change the type of crops in certain plots to adhere to the rule that no two adjacent plots have the same type of crop. Each crop type is represented by a positive integer. Input: The first line contains an integer n (1 ≤ n ≤ 105) representing the number of plots. The second line contains n integers ci (1 ≤ ci ≤ 105), where ci is the type of crop intended for the i-th plot. Output: Print a single integer representing the minimum number of changes required to meet the regulation. Examples: Input: 5 2 2 2 3 3 Output: 2 Input: 6 1 2 2 3 4 4 Output: 2","solution":"def min_crop_changes(n, crops): This function computes the minimum number of changes required to ensure that no two adjacent plots have the same type of crop. Parameters: n (int): The number of plots crops (list): The list of crop types for each plot Returns: int: The minimum number of changes required changes = 0 for i in range(1, n): if crops[i] == crops[i - 1]: changes += 1 # Change the current crop type to a different one # As we need the minimum number of changes, we can simply change the current crop to a type that is different if i + 1 < n and crops[i - 1] == crops[i + 1]: crops[i] = (crops[i] + 1) % 105 + 1 # Change to any different type other than adjacent ones else: crops[i] = (crops[i] + 1) % 105 + 1 return changes"},{"question":"Alice loves to play a puzzle game in which she has a grid of characters and words hidden within the grid. Words can appear in the grid in horizontal or vertical directions, either forwards or backwards. Given a grid and a list of words, Alice wants to know if each word from the list can be found within the grid. -----Input----- The input consists of: - An integer n (1 le n le 50), representing the size of the square grid. - n lines each containing a string of exactly n lowercase letters, representing the grid. - An integer k (1 le k le 100), representing the number of words to search for. - k lines each containing a single word of length 1 le |length| le n. -----Output----- Output k lines, each containing either “yes” if the word can be found in the grid or “no” otherwise. -----Examples----- Sample Input 1: 4 abcd efgh ijkl mnop 2 abc ponm Sample Output 1: yes yes Sample Input 2: 3 cat dog pig 1 top Sample Output 2: no","solution":"def find_word_in_grid(grid, word): Returns \'yes\' if the word can be found in the grid in horizontal or vertical directions, either forwards or backwards. Otherwise returns \'no\'. n = len(grid) word_len = len(word) # Check horizontally and vertically for i in range(n): # Horizontally forward and backward row = grid[i] if word in row or word[::-1] in row: return \'yes\' # Vertically forward and backward col = \'\'.join([grid[j][i] for j in range(n)]) if word in col or word[::-1] in col: return \'yes\' return \'no\' def find_words_in_grid(n, grid, k, words): results = [] for word in words: results.append(find_word_in_grid(grid, word)) return results"},{"question":"An innovative tech company has tasked you to create a simplified validation system for its product serial numbers. Each product\'s serial number is a string consisting of uppercase letters and digits. You are to write a program that verifies if a given serial number is valid based on the following criteria: 1. The serial number must be exactly 8 characters long. 2. It must contain at least two letters. 3. It must contain at least two digits. Your program should first receive the serial number as input and then determine whether it is valid or not. Print \\"Valid\\" if the serial number meets the criteria, and \\"Invalid\\" otherwise. -----Constraints----- - The serial number is a string of length 1 to 100 characters. -----Input----- Input is given from Standard Input in the following format: S where S is a string representing the serial number. -----Output----- Print \\"Valid\\" if the serial number meets the criteria, and \\"Invalid\\" otherwise. -----Sample Input----- A1B2C3D4 -----Sample Output----- Valid The serial number A1B2C3D4 is exactly 8 characters long, contains 4 letters (A, B, C, D) and 4 digits (1, 2, 3, 4), thus it is valid. -----Sample Input----- AB1C2 -----Sample Output----- Invalid The serial number AB1C2 is only 5 characters long, so it does not meet the first criteria.","solution":"def validate_serial_number(serial): Validates the given serial number based on the criteria: 1. Must be exactly 8 characters long. 2. Must contain at least two letters. 3. Must contain at least two digits. Returns \\"Valid\\" if the serial number meets all criteria, otherwise \\"Invalid\\". if len(serial) != 8: return \\"Invalid\\" letters = sum(1 for char in serial if char.isalpha()) digits = sum(1 for char in serial if char.isdigit()) if letters >= 2 and digits >= 2: return \\"Valid\\" else: return \\"Invalid\\""},{"question":"You are given a list of N integers representing the heights of N buildings. You can see the skyline formed by these buildings from a distance. Write a program to determine the skyline as seen from the end of the array. The skyline is defined as the maximum height encountered from the last building back to the first building encountered along the array. Example 1: Input: N = 5 arr = [4, 2, 3, 1, 5] Output: [5, 5, 5, 5, 5] Example 2: Input: N = 4 arr = [1, 2, 3, 4] Output: [4, 4, 4, 4] Explanation: - In Example 1, as we view from the end of the array, every building\'s height would be at least 5. - In Example 2, every building has height less than or equal to 4. Your Task: Complete the function `findSkyline()` which takes the integer N and the array arr as input parameters, and returns a list representing the skyline as seen from the end of the array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^4","solution":"def findSkyline(N, arr): Determine the skyline as seen from the end of the array. if N == 0: return [] skyline = [0] * N # Initialize the max height seen so far as we move backwards max_height = arr[-1] # Fill the skyline list from the end to the start for i in range(N - 1, -1, -1): if arr[i] > max_height: max_height = arr[i] skyline[i] = max_height return skyline"},{"question":"Tim\'s father loves puzzles, and he has a new challenge for you. You are given a string consisting of lowercase letters and you need to find the length of the longest substring with distinct characters. Input: The first line of input contains an integer T (1 ≤ T ≤ 100), the number of test cases. Each of the next T lines contains a string of lowercase letters. The length of each string is at most 1000. Output: For each test case, output the length of the longest substring with all distinct characters. Constraints: As mentioned input part. SAMPLE INPUT 3 abcabcbb bbbbb pwwkew SAMPLE OUTPUT 3 1 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters in string s. if not s: return 0 max_len = 0 start = 0 char_index_map = {} for end in range(len(s)): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_len = max(max_len, end - start + 1) return max_len def process_test_cases(T, test_cases): Processes the test cases and returns the results. results = [] for i in range(T): results.append(length_of_longest_substring(test_cases[i])) return results"},{"question":"Create a function that takes a string and a set of characters. Your task is to remove characters from the string that are present in the set of given characters. ~~~if-not:fortran ``` filter_string(\\"hello world\\", {\'l\', \'o\'}) = \\"he wrd\\" -- \'l\' and \'o\' are removed from the string. filter_string(\\"CodeWars\\", {\'e\', \'o\', \'s\'}) = \\"CdWar\\" -- \'e\', \'o\', and \'s\' are removed. ``` ~~~ ~~~if:fortran ``` filter_string(\\"hello world\\", {\'l\', \'o\'}) = \\"he wrd\\" -- \'l\' and \'o\' are removed from the string. filter_string(\\"CodeWars\\", {\'e\', \'o\', \'s\'}) = \\"CdWar\\" -- \'e\', \'o\', and \'s\' are removed. ``` ~~~ Input will be a non-empty string and a non-empty set of characters. The string will contain both lowercase and uppercase letters, as well as spaces. Characters to be removed will only be lowercase or uppercase letters. The output should be a new string with specified characters removed. Both the string and the character set will not contain redundant leading or trailing whitespace. Good luck! Please also try: [Alternating Case](https://www.codewars.com/kata/56efc695740d30f963000557) [Sort the odd](https://www.codewars.com/kata/578aa45ee9fd15ff4600090d)","solution":"def filter_string(string, chars_to_remove): Removes specified characters from the string. Parameters: string (str): The input string from which characters are to be removed. chars_to_remove (set): A set of characters to be removed from the input string. Returns: str: The string after removing the specified characters. return \\"\\".join([char for char in string if char not in chars_to_remove])"},{"question":"John and Mary are devising a new puzzle game called \\"Split-Sum\\". The game is played as follows: - The game begins with a list of integers. - Players take turns selecting exactly two distinct elements from the list and replacing them with their sum. - If a player cannot make a move, they lose the game. John and Mary, while discussing strategies, are curious whether a given starting position is a winning or losing position for the first player (John) if both play optimally. Your task is to write a program that determines if the initial list leads to a win or a loss for John. A position is considered a winning position if John can force a win no matter how Mary plays. If there is no such guaranteed strategy, it is a losing position. -----Input----- The first line of the input contains an integer n (2 le n le 100) representing the number of integers in the list. The second line contains n integers a_i (1 le a_i le 1000) which are the elements of the list. -----Output----- Print ‘W’ if the starting position is a winning position for John, or ‘L’ if it is a losing position for John. -----Examples----- Sample Input 1: 3 1 2 3 Sample Output 1: L Sample Input 2: 4 1 2 3 4 Sample Output 2: W","solution":"def split_sum_game_outcome(n, numbers): Determines if the initial list leads to a win (\'W\') or loss (\'L\') for John depending on the parity of the number of elements. # If the number of elements is even, John has a winning position # If the number of elements is odd, John has a losing position if n % 2 == 0: return \'W\' else: return \'L\'"},{"question":"The Great Wall of China is one of the greatest wonders in the world, built over several dynasties. An archaeologist is interested in studying the segments of the wall built during different periods. He wants to categorize each segment into three eras: Ancient, Medieval, and Modern. The segments built in these eras are represented by a string of lowercase characters, where \'a\' denotes Ancient, \'m\' denotes Medieval, and \'o\' denotes Modern. The archaeologist needs your help to determine the length of each consecutive segment of wall from each era in the order they appear. Write a program that takes a string representing segments of the wall and outputs the length of each consecutive segment of the wall for each era. -----Input----- - One line of input: a string s (1 ≤ length of s ≤ 100) consisting of characters \'a\', \'m\', and \'o\'. -----Output----- - A space-separated list of integers representing the lengths of each consecutive segment of wall from the input string. *You may assume the input will always have at least one segment.* -----Examples----- Input aaammmmo Output 3 4 1 Input ooaammm Output 2 2 3","solution":"def categorize_wall_segments(s): Returns the lengths of consecutive segments of wall from the input string. Parameters: s (str): A string consisting of characters \'a\', \'m\', and \'o\'. Returns: list: A list of integers representing the lengths of each consecutive segment. if not s: return [] segments_lengths = [] current_char = s[0] current_length = 1 for char in s[1:]: if char == current_char: current_length += 1 else: segments_lengths.append(current_length) current_char = char current_length = 1 segments_lengths.append(current_length) return segments_lengths"},{"question":"Given a list of integers and a target sum, write a function to find all unique combinations in the list where the numbers sum up to the target sum. You may assume that each number in the list can only be used once in the combination. Note: - The solution set must not contain duplicate combinations. - The input list may contain negative numbers. Example: Input: integers = [10, 1, 2, 7, 6, 1, 5], target = 8 Output: [ [1, 1, 6], [1, 2, 5], [1, 7], [2, 6] ] Input: integers = [2, 3, 5], target = 8 Output: [ [3, 5] ]","solution":"from typing import List def combination_sum2(integers: List[int], target: int) -> List[List[int]]: def backtrack(start, target, path): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(integers)): if i > start and integers[i] == integers[i - 1]: continue backtrack(i + 1, target - integers[i], path + [integers[i]]) integers.sort() result = [] backtrack(0, target, []) return result"},{"question":"Tina loves reading books and she has a collection of books arranged in a straight line on her bookshelf. Each book has a thickness a_i. She wants to know the number of ways she can choose three contiguous books such that the sum of their thicknesses is exactly S. Help Tina find out the number of such ways. -----Input----- The first line of input contains two integers n and S (3 ≤ n ≤ 10^5, 1 ≤ S ≤ 10^9) - the total number of books and the desired sum of the thicknesses of three contiguous books. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) - the thicknesses of the books. -----Output----- Print a single integer - the number of ways to choose three contiguous books with sum exactly equal to S. -----Examples----- Input 5 6 1 2 3 2 1 Output 2 Input 4 10 4 3 6 3 Output 0","solution":"def count_contiguous_books_with_sum(n, S, thicknesses): Returns the number of ways to choose three contiguous books such that the sum of their thicknesses is exactly S. :param n: Total number of books :param S: Desired sum of the thicknesses of three contiguous books :param thicknesses: List containing the thickness of each book :return: Number of ways to get the sum exactly S count = 0 for i in range(n - 2): if thicknesses[i] + thicknesses[i + 1] + thicknesses[i + 2] == S: count += 1 return count"},{"question":"Write a function that receives a string containing an arithmetic expression with addition (+), subtraction (-), multiplication (*), and division (/) symbols, as well as non-negative integers. The string may contain white spaces. Implement the function to evaluate the expression and return the result as an integer. The division should truncate towards zero. Example 1: Input: \\"3+2*2\\" Output: 7 Example 2: Input: \\" 3/2 \\" Output: 1 Example 3: Input: \\" 3+5 / 2 \\" Output: 5 Note: 1. You may assume that the expression is always valid. 2. Do not use the eval built-in library function.","solution":"def eval_expression(expression): Evaluates an arithmetic expression with +, -, *, / and returns the result as an int. Division truncates towards zero. def operate(op, second, first): if op == \'+\': return first + second elif op == \'-\': return first - second elif op == \'*\': return first * second elif op == \'/\': return int(first / second) expression = expression.replace(\\" \\", \\"\\") n = len(expression) stack = [] num = 0 prev_op = \'+\' i = 0 while i < n: char = expression[i] if char.isdigit(): num = num * 10 + int(char) if char in \\"+-*/\\" or i == n - 1: if prev_op == \'+\': stack.append(num) elif prev_op == \'-\': stack.append(-num) elif prev_op == \'*\': stack.append(stack.pop() * num) elif prev_op == \'/\': stack.append(int(stack.pop() / num)) # Truncate towards zero num = 0 prev_op = char i += 1 return sum(stack)"},{"question":"# Day Trader\'s Optimal Profit You are building a system to help stock traders maximize their profits. Given a list of stock prices for `N` consecutive days, develop an algorithm to determine the maximum profit that can be achieved by buying and selling the stock within this period. However, you must adhere to the following constraints: 1. A trader can complete at most two transactions. 2. A transaction consists of buying and then selling the stock. If no profit can be made, the result should be 0. **INPUT FORMAT:** The first line contains an integer `T`, the number of test cases. Each of the next `T` lines contains an integer `N`, the number of days, followed by `N` integers representing the stock prices for each day. **OUTPUT FORMAT:** Output `T` lines, each containing the maximum profit that can be achieved for the corresponding test case. **INPUT CONSTRAINTS:** 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ stock prices ≤ 10^6 **SAMPLE INPUT:** ``` 2 6 7 1 5 3 6 4 3 1 2 3 ``` **SAMPLE OUTPUT:** ``` 7 2 ``` **Explanation:** In the first test case, the maximum profit can be achieved with two transactions: Buy on day 2 (price = 1) and sell on day 3 (price = 5), buy on day 4 (price = 3) and sell on day 6 (price = 6), resulting in a total profit of 4 + 3 = 7. In the second test case, the maximum profit can be achieved with one transaction: Buy on day 1 (price = 1) and sell on day 3 (price = 3), resulting in a total profit of 2.","solution":"def maxProfit(prices): if not prices: return 0 n = len(prices) # Initialize the profits for one and two transactions profit_one = [0] * n profit_two = [0] * n # Forward phase - calculating max profit with one transaction by day i min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) profit_one[i] = max(profit_one[i-1], prices[i] - min_price) # Backward phase - calculating max profit with two transactions by day i max_price = prices[-1] for i in range(n-2, -1, -1): max_price = max(max_price, prices[i]) profit_two[i] = max(profit_two[i+1], max_price - prices[i] + profit_one[i]) return profit_two[0] def maximum_profits(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] prices = test_cases[i][1] results.append(maxProfit(prices)) return results"},{"question":"You are working on a navigation system for a game that involves moving through a grid. The grid is represented as a 2D list of integers, where each integer represents the cost of moving through that cell. Your task is to find the minimum cost to travel from the top-left corner of the grid to the bottom-right corner. You can only move down or to the right at any point in time. Write a function `min_cost_path(grid)` that takes the grid as input and returns the minimum cost to traverse from the top-left corner to the bottom-right corner. Example: ``` grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` Calling `min_cost_path(grid)` should return `7`, since the path 1→3→1→1→1 has the minimum cost. If the grid is empty, return 0.","solution":"def min_cost_path(grid): Returns the minimum cost to travel from the top-left corner to the bottom-right corner of the grid, moving only down or to the right. if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) # Create a 2D dp array to store the minimum cost path to each cell dp = [[0 for _ in range(cols)] for _ in range(rows)] # Initialize the starting point dp[0][0] = grid[0][0] # Initialize the first row (can only come from the left) for j in range(1, cols): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column (can only come from above) for i in range(1, rows): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the minimum cost path return dp[rows-1][cols-1]"},{"question":"Alice is a premium member of an online gourmet recipe club. One day, she received a special shopping list for ingredients needed to prepare a certain type of cuisine for a week. The list contains n ingredients, each specified by its unique name. However, the delivery service requires that the list is sorted alphabetically. Moreover, Alice noticed that some of the ingredients are so essential that they are needed in multiple quantities. To simplify ordering, the list includes the quantity required beside each ingredient. Alice needs help to sort this list alphabetically and then format it properly for the delivery service. Write a program that processes the input list, sorts it alphabetically, and then outputs it in the required format. -----Input----- The first line contains a single integer n (1 le n le 10^5), the number of ingredients. The next n lines each contain an ingredient\'s name and the quantity required, separated by a space. The ingredient name will consist of lowercase English letters only and have length between 1 and 20. The quantity will be an integer between 1 and 1000. -----Output----- Output n lines, each containing an ingredient name followed by its required quantity, sorted alphabetically by ingredient name. -----Examples----- Input 3 onion 5 carrot 2 lettuce 1 Output carrot 2 lettuce 1 onion 5 Input 4 apple 10 banana 5 grape 20 grapefruit 3 Output apple 10 banana 5 grape 20 grapefruit 3 Input 2 zucchini 4 apple 2 Output apple 2 zucchini 4 -----Note----- In the first example, the original list is sorted alphabetically to \\"carrot\\", \\"lettuce\\", \\"onion\\". In the second example, the list is already sorted alphabetically. In the third example, \\"apple\\" comes before \\"zucchini\\".","solution":"def sort_ingredients(n, ingredients): Sort the ingredients alphabetically and format them for delivery. Args: n (int): The number of ingredients. ingredients (list of tuple): Each tuple contains an ingredient\'s name and its quantity. Returns: List of strings: Sorted and formatted list of ingredients. # Sort the ingredients list based on the ingredient names sorted_ingredients = sorted(ingredients, key=lambda x: x[0]) # Format the sorted ingredients for the output formatted_ingredients = [f\\"{ingredient} {quantity}\\" for ingredient, quantity in sorted_ingredients] return formatted_ingredients # Input reading and function execution can be handled in another function or by user as needed."},{"question":"Mira is an aspiring novelist, working on her latest mystery novel. She has written many pages but is struggling to determine the frequency of each word in her manuscript. She needs a tool to analyze her manuscript and count the frequency of every unique word. The word count will help her identify overused words and ensure a better reading experience for her audience. However, Mira has specific criteria for what constitutes a word: a word is defined as a sequence of alphabetical characters (both uppercase and lowercase) and can have any number of surrounding non-alphabetical characters (like punctuation, spaces, or numbers) which should be ignored. Multiple spaces should be treated as a single separator between words. The words are also case-insensitive, meaning \\"The\\" and \\"the\\" should be counted as the same word. Can you help Mira by writing a program to count the frequency of each word in her manuscript as per her criteria? -----Input----- The input is a single string `manuscript` which may contain letters, digits, punctuation marks, and whitespace characters. The length of the manuscript will not exceed 10000 characters. -----Output----- Output each unique word and its frequency in the manuscript. The words should be output in lowercase and sorted alphabetically. Each word should be followed by its frequency on a new line. -----Examples----- Sample Input: \\"The quick brown fox jumps over the lazy dog. The dog was not amused.\\" Sample Output: amused 1 brown 1 dog 2 fox 1 jumps 1 lazy 1 not 1 over 1 quick 1 the 3 was 1 Sample Input: \\"Mystery? Novelist! Mira: counting-words\' efficiency.\\" Sample Output: counting 1 efficiency 1 mira 1 mystery 1 novelist 1 words 1 Note that in the first sample, \\"The\\" and \\"the\\" are counted together as \\"the\\" with a total count of 3. Also note that punctuation marks and digits are disregarded in defining words.","solution":"import re from collections import Counter def count_word_frequency(manuscript): Counts the frequency of each word in the given manuscript. Args: manuscript (str): The input manuscript as a string. Returns: dict: A dictionary containing each word as the key and its frequency as the value. # Convert to lowercase lower_manuscript = manuscript.lower() # Use regular expression to find all words words = re.findall(r\'[a-z]+\', lower_manuscript) # Count the frequency of each word using Counter word_counts = Counter(words) # Sort the words alphabetically and prepare the output format sorted_word_counts = dict(sorted(word_counts.items())) return sorted_word_counts def format_word_frequency(word_counts): Formats the word frequency as a string suitable for output Args: word_counts (dict): A dictionary containing word frequencies. Returns: str: A formatted string suitable for output. output_lines = [f\\"{word} {count}\\" for word, count in word_counts.items()] return \\"n\\".join(output_lines)"},{"question":"Nina is a talented young artist who loves creating unique patterns with blocks of stars (*) on a grid. She enjoys experimenting with different sizes and shapes, and she wants to programmatically generate these star patterns so that she can focus more on her creative ideas rather than the manual work. She decides to write a function to help her with this. However, she is struggling with creating patterns efficiently using her current skills. Help Nina by writing a function that generates a star pattern in a specific way described below: 1. The function should take a single integer N as input, where 2 ≤ N ≤ 100. 2. It should output a pattern in the shape of an inverted right triangle with a base and height of N. For example, if N is 3, the output should be: ``` *** ** * ``` 3. Each row i of the pattern should contain (N - i + 1) stars, where i starts at 1 and goes to N. Your task is to implement the pattern generator function and ensure it works for various values of N within the given constraints. Input An integer N indicating the size of the triangle. Output Print the inverted right triangle pattern of stars corresponding to the input N. Example Input: 4 Output: ``` **** *** ** * ``` Explanation Example case 1. For N = 4, the triangle starts with 4 stars in the first row, 3 stars in the second, 2 stars in the third, and finally 1 star in the last row. This creates an inverted right triangle pattern.","solution":"def generate_star_pattern(N): Generates an inverted right triangle pattern of stars with base and height of N. Parameters: N (int): The size of the triangle, where 2 ≤ N ≤ 100. pattern = \\"\\" for i in range(N): pattern += \'*\' * (N - i) + \'n\' return pattern.strip()"},{"question":"A petrol station serves diesel, premium petrol, and regular petrol. Each type of fuel is kept in a separate storage tank with specific capacities. The station records various fuel transactions, detailing the amount and type of fuel dispensed. Given the initial fuel levels in the tanks, you need to simulate a sequence of transactions and ensure the station never dispenses more fuel than it has in stock. -----Input----- - The first line of the input contains three integers D, P, and R which represent the initial volumes of diesel, premium petrol, and regular petrol stored in the tanks, respectively. - The second line contains a single integer T denoting the number of transactions. - The following T lines describe the transactions. Each line contains a string type and an integer amount representing the type of fuel (either \\"Diesel\\", \\"Premium\\", or \\"Regular\\") and the amount dispensed in that transaction. -----Output----- - For each transaction: - If the transaction can be completed successfully (i.e., there is enough fuel in the respective tank), print the string \\"Successful\\". - Otherwise, print the string \\"Failed\\". -----Constraints----- - 1 le D, P, R le 10^9 - 1 le T le 10^5 - 1 le amount le 10^9 -----Example Input----- 100 50 200 5 Diesel 30 Premium 60 Regular 150 Diesel 80 Regular 60 -----Example Output----- Successful Failed Successful Failed Successful","solution":"def simulate_transactions(diesel, premium, regular, transactions): results = [] for fuel_type, amount in transactions: if fuel_type == \\"Diesel\\": if diesel >= amount: diesel -= amount results.append(\\"Successful\\") else: results.append(\\"Failed\\") elif fuel_type == \\"Premium\\": if premium >= amount: premium -= amount results.append(\\"Successful\\") else: results.append(\\"Failed\\") elif fuel_type == \\"Regular\\": if regular >= amount: regular -= amount results.append(\\"Successful\\") else: results.append(\\"Failed\\") return results"},{"question":"There is an array a of length n consisting of integers. In one operation, you can select any contiguous non-empty subarray of a, and increment every value in this subarray by 1. You want to transform the array a into the array b using some finite number of operations (possibly, none). For example, suppose a=[1,2,3,4] and b=[2,3,3,5]. In the first operation, you can select the subarray a[1:4]=[1,2,3,4] and increment every value in this subarray by 1, resulting in the array [2,3,4,5]. In the second operation, you can select the subarray a[3:4]=[4,5] and increment every value in this subarray by 1, resulting in the array [2,3,3,6]. It is impossible to make them equal. Can you transform the array a into the array b using some finite number of operations (possibly, none)? -----Input----- The first line contains a single integer t (1le tle 10^4) — the number of test cases. The first line of each test case contains a single integer n (1le nle 3cdot 10^5) — the length of the arrays a and b. The following two lines contain n space-separated integers each, denoting arrays a and b respectively. The sum of n across all test cases does not exceed 3cdot 10^5. -----Output----- For each test case, output \\"YES\\" if it is possible to transform a into b, or \\"NO\\" if it is impossible. You can print each letter in any case (upper or lower). -----Examples----- Input 4 4 1 2 3 4 2 3 3 5 5 1 1 1 1 1 2 2 2 2 2 3 5 6 7 8 7 6 6 1 3 2 3 1 2 2 4 3 4 2 3 Output NO YES NO YES","solution":"def can_transform(t, cases): results = [] for case in cases: n, a, b = case possible = True # Check if we can transform a to b for i in range(n): if a[i] > b[i]: possible = False break if not possible: results.append(\\"NO\\") continue # Additional pass to check the incremental differences for i in range(1, n): if b[i] - b[i-1] < a[i] - a[i-1]: possible = False break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"An online education platform is monitoring the performance of its newly launched courses. Each course has several quizzes, and students\' scores in these quizzes are important for evaluating the course quality. For each quiz, the platform knows the maximum possible score mi and the actual average score si of the students who participated in the quiz. To evaluate the performance of the course over a range of quizzes from l to r inclusive, the platform uses the maximum average score as the quality metric, defined as: [ Q(l, r) = max(s_l, s_{l+1}, ldots, s_r) ] Given a number of queries, each specifying a range of quizzes, the platform needs to report the quality metric for each range. Input - The first line of the input contains an integer n (1 ≤ n ≤ 1,000,000), the number of quizzes. - The second line contains n integers mi (1 ≤ mi ≤ 100), the maximum possible scores for each quiz. - The third line contains n integers si (0 ≤ si ≤ mi), the actual average scores for each quiz. - The fourth line contains an integer q (1 ≤ q ≤ 100,000), the number of queries. - Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n), representing the range of quizzes. Output - For each query, print a single integer — the quality metric for the given range of quizzes. Examples Input 5 100 90 80 70 60 85 83 75 65 55 3 1 3 2 4 3 5 Output 85 83 75 Note Consider the first sample. - For the query range [1, 3], the maximum average score is `max(85, 83, 75) = 85`. - For the query range [2, 4], the maximum average score is `max(83, 75, 65) = 83`. - For the query range [3, 5], the maximum average score is `max(75, 65, 55) = 75`. Thus, these are the quality metrics for the specified ranges.","solution":"def quality_metric(n, mi, si, q, queries): For each query range (l, r), calculate the maximum average score within that range. Parameters: n (int): The number of quizzes mi (list of int): The maximum possible scores for each quiz si (list of int): The actual average scores for each quiz q (int): The number of queries queries (list of tuples): Each tuple contains two integers (l, r) Returns: results (list of int): The max average score for each query range results = [] for l, r in queries: max_avg_score = max(si[l-1:r]) results.append(max_avg_score) return results # Example Usage if __name__ == \\"__main__\\": n = 5 mi = [100, 90, 80, 70, 60] si = [85, 83, 75, 65, 55] q = 3 queries = [(1, 3), (2, 4), (3, 5)] print(quality_metric(n, mi, si, q, queries)) # Output: [85, 83, 75]"},{"question":"You are given a string s consisting of n lowercase English letters and an integer k. You need to determine the most frequent letter that can be obtained by replacing at most k characters in the string with any other lowercase English letter. If there are multiple characters with the same highest frequency, return the lexicographically smallest one. ----Input---- The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains a string s of length n, consisting of lowercase English letters. The third line contains an integer k (0 ≤ k ≤ n). ----Output---- Print a single character — the most frequent letter that can be obtained by replacing at most k characters in the string. ----Examples---- Input 8 abbcccaa 2 Output c Input 5 abcde 1 Output a ----Note---- In the first example, the most frequent letter is \'c\' since we can replace two \'a\'s with \'c\' to have five \'c\'s in the string. In the second example, replacing any character would not result in a frequency greater than 1 for any letter, so the lexicographically smallest character, which is \'a\', is the answer.","solution":"def most_frequent_letter(n, s, k): from collections import Counter def max_freq_with_replacements(c): left = right = max_freq = 0 count = Counter() while right < n: count[s[right]] += 1 while (right - left + 1) - count[c] > k: count[s[left]] -= 1 left += 1 max_freq = max(max_freq, right - left + 1) right += 1 return max_freq max_letter = \'\' max_count = 0 for c in \'abcdefghijklmnopqrstuvwxyz\': freq = max_freq_with_replacements(c) if freq > max_count or (freq == max_count and c < max_letter): max_count = freq max_letter = c return max_letter"},{"question":"Sara is given a string S consisting of lowercase letters. She wants to modify the string such that all its characters are unique. To do this, she can replace any character with any other lowercase letter (\'a\' to \'z\'). However, she wants to achieve this with the minimum number of replacements. Write a function `minReplacements(string S)` that returns the minimum number of replacements needed to make all the characters in the string unique. # Examples: Example 1: ``` Input: S = \\"aabbcc\\" Output: 3 Explanation: We can replace the characters to make the string \\"abcdef\\" with 3 replacements. ``` Example 2: ``` Input: S = \\"aaaaa\\" Output: 4 Explanation: We can replace the characters to make the string \\"abcde\\" with 4 replacements. ``` # Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minReplacements(S)` which takes a string S as input and returns an integer representative of the minimum number of replacements needed to make all characters in the string unique. # Expected Time Complexity: O(n), where n is the length of the string S. # Expected Auxiliary Space: O(1) # Constraints: 1 ≤ Length of S ≤ 10^5","solution":"def minReplacements(S): Returns the minimum number of replacements needed to make all characters unique in the string S. from collections import Counter char_count = Counter(S) replacements = 0 existing_chars = set() for char in range(ord(\'a\'), ord(\'z\') + 1): if char_count[chr(char)]: while char_count[chr(char)] > 1: # Remove one instance and increase the count of replacements char_count[chr(char)] -= 1 replacements += 1 # Find a character that isn\'t used for new_char in range(ord(\'a\'), ord(\'z\') + 1): if chr(new_char) not in char_count: char_count[chr(new_char)] = 1 break return replacements"},{"question":"Create a function `collatz_length` that takes an integer `n` and returns the number of terms in the Collatz sequence starting from `n` until it reaches 1. The Collatz sequence is defined as follows: - If `n` is 1, stop. - Otherwise, if `n` is even, the next term is `n / 2`. - Otherwise, the next term is `3 * n + 1`. The function should be optimized to handle very large values of `n` efficiently. Consider using memoization to avoid redundant calculations. Example: ```python collatz_length(13) # returns 10 collatz_length(1) # returns 1 collatz_length(6) # returns 9 ```","solution":"def collatz_length(n, memo={1: 1}): Returns the number of terms in the Collatz sequence starting from `n` until it reaches 1. Uses memoization to optimize for large values of `n`. if n in memo: return memo[n] if n % 2 == 0: next_term = n // 2 else: next_term = 3 * n + 1 memo[n] = 1 + collatz_length(next_term, memo) return memo[n]"},{"question":"Fruit Inventory Checker You are a store manager and you need to ensure that you have enough stock of a specific fruit to meet customer demand. The inventory is represented as a list of dictionaries, each containing the fruit type and its quantity. Write a function `check_fruit_inventory` that takes a list of fruit dictionaries and a string representing the fruit type to check, and returns a boolean indicating whether you have at least 50 items of that fruit in stock. Example: ```python inventory = [{\'fruit\': \'apple\', \'quantity\': 30}, {\'fruit\': \'banana\', \'quantity\': 55}, {\'fruit\': \'orange\', \'quantity\': 20}] fruit_type = \'banana\' check_fruit_inventory(inventory, fruit_type) ``` The expected output is `True` because you have 55 bananas in stock, which is more than 50. Reference: https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects","solution":"def check_fruit_inventory(inventory, fruit_type): Returns True if the inventory has at least 50 items of the specified fruit type, else False. Parameters: inventory (list of dict): The inventory of fruits. fruit_type (str): The type of fruit to check in the inventory. Returns: bool: True if the specified fruit type has at least 50 items, else False. for item in inventory: if item[\'fruit\'] == fruit_type: return item[\'quantity\'] >= 50 return False"},{"question":"Given an array of integers, you are required to perform queries of two types: 1. Update: Update the element at a specific index to a new value. 2. Query: Return the smallest element in a given range of indices. Write a program to handle the above operations efficiently. Note: The array is 1-indexed. INPUT: The first line contains two integers, N (the number of elements in the array) and Q (the number of queries). The second line contains N integers, representing the initial array. The next Q lines contain a query of one of the two types: - \'1 i v\' which means update the element at index i to v. - \'2 l r\' which means report the minimum element in the range [l, r]. OUTPUT: For each query of type \'2\', output the result on a new line. CONSTRAINTS: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ array elements, v ≤ 10^9 1 ≤ i, l, r ≤ N SAMPLE INPUT 5 5 1 3 2 5 4 2 1 5 1 3 6 2 2 4 1 5 1 2 1 5 SAMPLE OUTPUT 1 3 1 Explanation: - Initial array: [1, 3, 2, 5, 4] - First query asks for the minimum element in the range [1, 5], which is 1. - Second query updates the element at index 3 to 6, so the array becomes [1, 3, 6, 5, 4]. - Third query asks for the minimum element in the range [2, 4], which is 3. - Fourth query updates the element at index 5 to 1, so the array becomes [1, 3, 6, 5, 1]. - Fifth query asks for the minimum element in the range [1, 5], which is now 1.","solution":"class SegmentTree: def __init__(self, arr): self.n = len(arr) self.tree = [0] * (2 * self.n) # Build the tree # Insert leaf nodes in tree for i in range(self.n): self.tree[self.n + i] = arr[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, pos, val): # Change the index to leaf node pos += self.n # Update the value at the leaf node self.tree[pos] = val # Update the values of parents while pos > 1: pos //= 2 self.tree[pos] = min(self.tree[2 * pos], self.tree[2 * pos + 1]) def range_min_query(self, l, r): # Change the index to leaf node l += self.n r += self.n + 1 min_value = float(\'inf\') while l < r: # If l is a right node, its parent must be included # and move to the next possible range if l % 2 == 1: min_value = min(min_value, self.tree[l]) l += 1 # If r is a right node, keep right node and move to # the next possible range on the left if r % 2 == 1: r -= 1 min_value = min(min_value, self.tree[r]) # Move to the next range l //= 2 r //= 2 return min_value def handle_queries(n, q, arr, queries): segment_tree = SegmentTree(arr) result = [] for query in queries: if query[0] == 1: _, i, v = query segment_tree.update(i - 1, v) elif query[0] == 2: _, l, r = query result.append(segment_tree.range_min_query(l - 1, r - 1)) return result # Example usage: # n, q = 5, 5 # arr = [1, 3, 2, 5, 4] # queries = [[2, 1, 5], [1, 3, 6], [2, 2, 4], [1, 5, 1], [2, 1, 5]] # print(handle_queries(n, q, arr, queries)) # Output should be [1, 3, 1]"},{"question":"In a distant galaxy, there is a planet called Zog where the inhabitants are planning a ritual dance. The dance floor consists of a grid with n rows and m columns. Some cells of the grid are already blocked and cannot be part of the dance sequence. The dance sequence must start from the top-left corner (1,1) and end at the bottom-right corner (n,m), but it can only move right or down at each step. You need to calculate the number of unique paths from the top-left corner to the bottom-right corner while avoiding blocked cells. Input::: The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. The next n lines each contain m integers, where 0 represents a blocked cell and 1 represents an open cell. Output::: Print the number of unique paths from the top-left corner to the bottom-right corner, avoiding blocked cells. If there is no such path, print 0. SAMPLE INPUT 3 3 1 1 1 1 0 1 1 1 1 SAMPLE OUTPUT 2 Explanation In the sample, there are two unique paths from the top-left corner to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left corner to the bottom-right corner, avoiding blocked cells in a grid. n = len(grid) m = len(grid[0]) if grid[0][0] == 0 or grid[n-1][m-1] == 0: return 0 dp = [[0]*m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] # Example usage: n, m = 3, 3 grid = [ [1, 1, 1], [1, 0, 1], [1, 1, 1] ] print(unique_paths_with_obstacles(grid)) # Output: 2"},{"question":"A tech company has developed a new autonomous delivery robot designed to navigate a grid. The grid is represented as an `n x n` matrix of integers where each cell contains a non-negative integer representing the cost to move through that cell. The robot starts at the top-left corner of the grid and wants to reach the bottom-right corner in a way that minimizes the total cost. The robot can only move either right or down at any point in time. Your task is to write a program that determines the minimal cost path for the robot to reach the bottom-right corner from the top-left corner. # Input The input consists of: - The first line contains a single integer `n` (1 ≤ n ≤ 100) — the size of the grid. - The next `n` lines each contain `n` integers (0 ≤ grid[i][j] ≤ 1000) representing the cost grid. # Output Your program should output a single integer — the minimal cost required for the robot to travel from the top-left corner to the bottom-right corner of the grid. # Example Input ``` 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 7 ``` # Explanation The minimal cost path is: - Start at (0,0) with cost 1 - Move to (1,0) with cost 1 (total cost 2) - Move to (2,0) with cost 4 (total cost 6) - Move to (2,1) with cost 2 (total cost 8) - Move to (2,2) with cost 1 (total cost 9) Thus, the minimal cost to reach (2,2) from (0,0) is 7.","solution":"def min_cost_path(grid): Determines the minimal cost path for the robot to reach the bottom-right corner from the top-left corner of the grid. :param grid: List of lists of integers representing the grid. :return: Minimum cost to travel from top-left to bottom-right. n = len(grid) cost = [[0] * n for _ in range(n)] cost[0][0] = grid[0][0] # Initialize the first row for j in range(1, n): cost[0][j] = cost[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, n): cost[i][0] = cost[i-1][0] + grid[i][0] # Fill the rest of the cost matrix for i in range(1, n): for j in range(1, n): cost[i][j] = min(cost[i-1][j], cost[i][j-1]) + grid[i][j] return cost[-1][-1]"},{"question":"Jenna is a gardener who uses a watering system consisting of n sprinklers arranged in a straight line, each with a specific watering range. Each sprinkler can water a range of plants covering some interval. The i-th sprinkler has a range of [i - r_i, i + r_i], where r_i is the radius of the i-th sprinkler. Due to some issues, not all sprinklers are turned on initially, so Jenna needs to determine the minimal number of sprinklers she needs to turn on to water the entire garden, from the first sprinkler to the last sprinkler. The garden spans from position 0 to position n-1. If it\'s impossible to water the entire garden, Jenna should return -1. -----Input----- The first line of the input contains an integer t (1 leq t leq 100) — the number of test cases. The description of each test case follows. The first line of each test case contains an integer n (1 leq n leq 10^5) — the number of sprinklers. The second line contains n integers r_1, r_2, ..., r_n (0 leq r_i leq 10^5) — the radius of each sprinkler. -----Output----- For each test case, output a single integer — the minimal number of sprinklers Jenna needs to turn on to water the whole garden. If it is impossible to water the entire garden, return -1. -----Examples----- Input 2 5 1 2 1 0 2 3 0 0 0 Output 2 -1 -----Note----- In the first test case, turning on the sprinklers with radii 2 at positions 1 and 4 will cover the entire garden, hence the minimum number of sprinklers needed is 2. In the second test case, it\'s impossible to water the entire garden as none of the sprinklers have a positive radius.","solution":"def min_sprinklers_to_water_garden(t, test_cases): results = [] for k in range(t): n, radii = test_cases[k] sprinklers = [] # Calculate the coverage of each sprinkler for i in range(n): if radii[i] > 0: left = max(0, i - radii[i]) right = min(n - 1, i + radii[i]) sprinklers.append((left, right)) # Sort based on the starting point of the coverage sprinklers.sort() # To find the minimum sprinklers needed num_sprinklers = 0 end_covered = 0 index = 0 while end_covered < n - 1: max_reach = end_covered while index < len(sprinklers) and sprinklers[index][0] <= end_covered: max_reach = max(max_reach, sprinklers[index][1]) index += 1 if max_reach == end_covered: results.append(-1) break end_covered = max_reach num_sprinklers += 1 if end_covered >= n - 1: results.append(num_sprinklers) return results"},{"question":"Given an array of integers A of size N and an integer K, find and return the Kth smallest element in the array without sorting it. If K is larger than the number of elements in the array, return -1. Example 1: Input: N = 6, K = 3 A = [7, 10, 4, 3, 20, 15] Output: 7 Explanation: The 3rd smallest element in the array is 7. Example 2: Input: N = 5, K = 2 A = [5, 3, 6, 2, 10] Output: 3 Explanation: The 2nd smallest element in the array is 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function kthSmallest() which takes the array A, the integer N, and the integer K as parameters and returns the Kth smallest element in the array. If K is larger than the number of elements in the array, return -1. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^6 1 ≤ K ≤ 10^6","solution":"import heapq def kthSmallest(A, N, K): Finds the Kth smallest element in the array A of size N. If K is larger than the number of elements in the array, returns -1. if K > N: return -1 return heapq.nsmallest(K, A)[-1]"},{"question":"Create a function that takes an array of integers and returns a new array where each element is the product of all the elements in the input array except for the element at the same index. The input array will always contain at least 2 integers, and the output array should have the same length as the input array. Python examples: ```python product_except_self([1, 2, 3, 4]) # returns [24, 12, 8, 6] product_except_self([5, 6, 2, 3]) # returns [36, 30, 90, 60] ```","solution":"def product_except_self(nums): Return an array where each element at index `i` is the product of all the elements in the input array except for the element at index `i`. Args: - nums (list): List of integers. Returns: - list: List of products. length = len(nums) result = [1] * length left_product = 1 for i in range(length): result[i] *= left_product left_product *= nums[i] right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"You have been given a grid with N rows and M columns. Each cell of the grid contains either a \'.\' (empty cell) or a \'#\' (blocked cell). You need to help your friend calculate the number of ways to reach the bottom-right corner of the grid (cell (N-1, M-1)) from the top-left corner (cell (0, 0)). You can only move right or down from any cell. Moreover, you need to compute the number of ways modulo 1e9+7 (i.e., 1000000007). ------ Input ------ First line contains two integers N and M. Next N lines each contain M characters (either \'.\' or \'#\'), representing the grid. ------ Output ------ Output the number of ways to reach the bottom-right corner of the grid modulo 1e9+7 (i.e., 1000000007). If it is not possible to reach the bottom-right corner, output 0. ------ Constraints ------ 1 ≤ N, M ≤ 1000 The top-left corner (0, 0) and the bottom-right corner (N-1, M-1) will always be \'.\' ----- Sample Input 1 ------ 3 3 ... .#. ... ----- Sample Output 1 ------ 2 ----- Explanation 1 ------ There are two ways to move from the top-left to the bottom-right: 1. (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) 2. (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) ----- Sample Input 2 ------ 3 3 ..# .#. ... ----- Sample Output 2 ------ 1 ----- Explanation 2 ------ There is only one way to move from the top-left to the bottom-right: 1. (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2)","solution":"MOD = 1000000007 def num_ways_to_reach_end(N, M, grid): dp = [[0] * M for _ in range(N)] # Starting point dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[N-1][M-1]"},{"question":"You are provided with a list of n integers representing the initial state of an array. Your task is to process a series of q queries. Each query falls into one of the following types: - **Update**: This query updates the value at a specific index of the array. - **Sum**: This query calculates the sum of all integers between two given indices, inclusive. Specifically, the types of queries are described as follows: - `1 x y` modifies the value at index `x` to `y`. (0 ≤ x < n) - `2 l r` calculates and returns the sum of elements from index `l` to index `r` inclusive. (0 ≤ l ≤ r < n) For both types of queries, you need to output the results accordingly. Input - The first line contains two integers `n` (1 ≤ n ≤ 100000) and `q` (1 ≤ q ≤ 100000), representing the number of elements in the array and the number of queries, respectively. - The second line contains `n` integers representing the initial state of the array. - The next `q` lines contain the queries in the format specified above. Output - For each query of the second type (Sum), print the resulting sum in a new line. Examples Input 5 5 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 0 4 1 0 5 Output 9 16 25 Explanation 1. The sum of the subarray from index 1 to 3 (inclusive) is 2 + 3 + 4 = 9. 2. Update the value at index 2 to 10, resulting in the array [1, 2, 10, 4, 5]. 3. The sum of the subarray from index 1 to 3 (inclusive) is now 2 + 10 + 4 = 16. 4. The sum of the subarray from index 0 to 4 (inclusive) is 1 + 2 + 10 + 4 + 5 = 22. 5. Update the value at index 0 to 5, resulting in the array [5, 2, 10, 4, 5].","solution":"class ArrayProcessor: def __init__(self, initial_state): self.array = initial_state def update(self, index, value): self.array[index] = value def sum_range(self, l, r): return sum(self.array[l:r+1]) def process_queries(initial_state, queries): processor = ArrayProcessor(initial_state) result = [] for query in queries: if query[0] == 1: processor.update(query[1], query[2]) elif query[0] == 2: result.append(processor.sum_range(query[1], query[2])) return result"},{"question":"John is an avid cyclist and he has recently taken up monitoring his cycling performance by recording data on his trips. For each trip, he records the duration in minutes, the total distance in kilometers, and the number of stops he made to rest. A trip is deemed successful if the average speed (total distance divided by total time excluding rest) is at least 15 km/h. Assume that for each stop he made, he took precisely 5 minutes to rest. Given data for multiple trips, determine which trips were successful and which were not. -----Input----- The first line contains an integer t (1 le t le 100), the number of trips. Each of the subsequent t lines contains three integers: duration (10 le duration le 1440), the total duration of the trip in minutes; distance (1 le distance le 500), the total distance covered during the trip in kilometers; and stops (0 le stops le frac{duration}{5}), the number of stops made. -----Output----- For each trip, display \\"successful\\" if the trip\'s average speed (excluding rest time) was at least 15 km/h, otherwise display \\"unsuccessful\\". -----Example----- Sample Input: 3 120 30 2 60 10 1 240 80 4 Sample Output: successful unsuccessful successful Explanation: - For the first trip: Total duration is 120 minutes, with 2 rest stops each taking 5 minutes, the effective time is 120 - 2 cdot 5 = 110 minutes. The average speed is frac{30}{110 / 60} approx 16.36 km/h; hence, it is successful. - For the second trip: Total duration is 60 minutes, with 1 rest stop taking 5 minutes, the effective time is 60 - 5 = 55 minutes. The average speed is frac{10}{55 / 60} approx 10.91 km/h; hence, it is unsuccessful. - For the third trip: Total duration is 240 minutes, with 4 rest stops each taking 5 minutes, the effective time is 240 - 4 cdot 5 = 220 minutes. The average speed is frac{80}{220 / 60} approx 21.82 km/h; hence, it is successful.","solution":"def determine_trip_success(trips): results = [] for trip in trips: duration, distance, stops = trip effective_time = duration - stops * 5 average_speed = distance / (effective_time / 60) if average_speed >= 15: results.append(\\"successful\\") else: results.append(\\"unsuccessful\\") return results # Example usage: # trips = [ # (120, 30, 2), # (60, 10, 1), # (240, 80, 4) # ] # print(determine_trip_success(trips))"},{"question":"You are given a string s and a character c. Write a program to find and output the number of times the character c appears in the string s. Input The first line of the input contains the string s (1 ≤ |s| ≤ 1000), where |s| is the length of the string. The second line contains the character c. Output Output the number of occurrences of the character c in the string s. Examples Input hello l Output 2 Input programming g Output 2 Note In the first example, the character \'l\' appears twice in the string \\"hello\\". In the second example, the character \'g\' appears twice in the string \\"programming\\".","solution":"def count_occurrences(s, c): Returns the number of times character c appears in string s. return s.count(c)"},{"question":"Given an integer array `nums` and a target integer `target`, return True if the array contains a subarray whose sum equals `target`. A subarray is defined as a contiguous sequence of integers within the array. # Input - The input consists of two lines: - The first line contains a space-separated list of integers representing the array `nums`. - The second line contains the integer `target`. # Output - Output a single line containing `True` if such a subarray exists, otherwise `False`. # Constraints - All elements in the array are integers. - The sum of the elements in the subarray must exactly equal `target`. - The length of `nums` does not exceed 10^5. # Examples Example 1 Input: ``` 2 4 -1 2 1 6 5 ``` Output: ``` True ``` Explanation: - The subarray `[2, 4, -1]` sums to 5. Example 2 Input: ``` 1 2 3 7 5 12 ``` Output: ``` True ``` Explanation: - The subarray `[2, 3, 7]` sums to 12. Example 3 Input: ``` -2 1 -3 4 -1 2 1 -5 4 10 ``` Output: ``` False ``` Explanation: - No subarray sums to 10.","solution":"def has_subarray_with_sum(nums, target): Returns True if there exists a contiguous subarray whose elements sum up to the target. Otherwise, returns False. current_sum = 0 sum_dict = {0: -1} # Dictionary to store the cumulative sum and its index for i, num in enumerate(nums): current_sum += num if current_sum - target in sum_dict: return True sum_dict[current_sum] = i return False"},{"question":"A large corporation has N departments and M employees. The company wants to implement a new policy to equally distribute workload among departments. Each employee can work in multiple departments and each department has a different minimum number of employees required to function efficiently. Your task is to determine if there is a way to assign employees such that all departments have at least their minimum required number of employees while ensuring every employee is assigned to at least one department. -----Input----- The first line contains N and M (1 le N, M le 500) - the number of departments and the number of employees. The next line contains N space-separated integers R_1, R_2, ... , R_N where R_i (1 le R_i le M) is the minimum number of employees required in department i. The next M lines each contains an integer E (1 le E le N) and then E space-separated integers denoting the departments the employee can work in. -----Output----- Output \\"YES\\" if it is possible to assign employees such that all departments have at least their minimum required number of employees. Otherwise, output \\"NO\\". -----Examples----- Sample Input 1: 3 3 1 1 1 2 1 2 2 2 3 1 3 Sample Output 1: YES Sample Input 2: 3 3 2 1 1 2 1 2 1 2 1 3 Sample Output 2: NO","solution":"def can_distribute_workload(N, M, R, employee_preferences): from itertools import permutations def is_valid_assignment(employee_assignment): department_counts = [0] * N for employee, depts in employee_assignment.items(): for dept in depts: department_counts[dept] += 1 for i in range(N): if department_counts[i] < R[i]: return False return True # Create a list of employees and their possible departments employees = list(employee_preferences.keys()) # Try every possible assignment of employees to departments for perm in permutations(employees, M): employee_assignment = {emp: employee_preferences[emp] for emp in perm} if is_valid_assignment(employee_assignment): return \\"YES\\" return \\"NO\\" # Function to read from input def distribute_workload(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) R = list(map(int, data[2:N+2])) employee_preferences = {} index = N+2 for i in range(M): E = int(data[index]) employee_preferences[i] = list(map(lambda x: int(x)-1, data[index+1:index+1+E])) index += (1 + E) return can_distribute_workload(N, M, R, employee_preferences)"},{"question":"There is a rectangular garden with width `W` and height `H`. You are asked to plant trees in such a way that they form a grid with distances `d_x` between trees in rows and `d_y` between trees in columns. The distances `d_x` and `d_y` can be any positive real number. Additionally, the trees should be planted in such a way that they do not overlap and are completely inside the garden with boundaries parallel to the sides of the garden. Your task is to determine the maximum number of trees that can be planted in this garden following the rules mentioned above. -----Input----- The input consists of two integers, `W` and `H` (1 ≤ W, H ≤ 10^9) — the width and height of the garden respectively. -----Output----- Print one integer — the maximum number of trees that can be planted satisfying the constraints. -----Examples----- Input 10 6 Output 48 Input 4 4 Output 16 Input 7 5 Output 35 -----Note----- In the first example, you can plant trees forming a grid of 48 trees such that each tree is separated by equal distances `d_x` and `d_y` without overlapping or going out of bounds. In the second example, you can plant 16 trees forming a 4x4 grid. In the third example, a 7x5 grid will ensure the maximum number of trees planted in the garden without any overlap.","solution":"def max_trees(W, H): Given the width W and height H of a rectangular garden, this function returns the maximum number of trees that can be planted in a grid without overlap and within the garden boundaries. # We can always plant trees in a 1 by 1 grid return W * H"},{"question":"Lena has a grid of size m x n, and she wants to know how many unique paths exist from the top-left corner to the bottom-right corner of the grid. Lena can only move either down or right at any point in time. Given the integers m and n, write a function to determine how many unique paths exist from the top-left corner (1,1) to the bottom-right corner (m,n). -----Input----- The input consists of: - Two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid. -----Output----- Print the number of unique paths from the top-left corner to the bottom-right corner. -----Examples----- Input 3 7 Output 28 Input 2 3 Output 3 -----Note----- In the first test case, there are 28 unique paths to get from (1,1) to (3,7). In the second test case, there are 3 unique paths to get from (1,1) to (2,3): - Right -> Right -> Down - Right -> Down -> Right - Down -> Right -> Right","solution":"def unique_paths(m, n): Returns the number of unique paths from top-left corner to bottom-right corner of an m x n grid, moving only down or right. # Create a 2D list of size m x n initialized with 0 dp = [[0]*n for _ in range(m)] # Initialize the first row and first column to be 1, since there\'s only one way to get to them for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right corner will have the number of unique paths return dp[m-1][n-1]"},{"question":"Alice is working on a project that requires processing a large dataset. The dataset is represented as a list of integers. She needs to find the maximum sum of any contiguous subarray within this list. A contiguous subarray is a subarray that consists of consecutive elements from the original array. Alice knows that the list might be very large, so she\'s looking for an efficient algorithm to solve this problem. Your task is to write a program to determine the maximum sum of any contiguous subarray. Input The input is given in the following format: N a_1 a_2 a_3 ... a_N The first line contains an integer N (1 leq N leq 10^6) representing the number of integers in the list. The second line contains N integers a_i (-10^9 leq a_i leq 10^9) representing the elements of the list. Output Output the maximum sum of any contiguous subarray. Examples Input 9 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 5 1 2 3 4 5 Output 15 Input 7 -1 -2 -3 -4 -5 -6 -7 Output -1","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray. nums: list of integers max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Emily loves Fibonacci sequences. She is given two integers `a` and `b`, where `a` is the start index, and `b` is the end index, and she wants to find the sum of all Fibonacci numbers between the `a`-th and `b`-th terms (inclusive). The Fibonacci sequence is defined as follows: - F(1) = 1 - F(2) = 1 - F(n) = F(n-1) + F(n-2) for n > 2 Write a program to help Emily find the sum of Fibonacci numbers from the `a`-th term to the `b`-th term (inclusive). -----Input----- The input consists of a single line containing two integers `a` and `b` (1 ≤ a ≤ b ≤ 30). -----Output----- Print a single integer which denotes the sum of Fibonacci numbers from the `a`-th term to the `b`-th term (inclusive). -----Examples----- Input 2 5 Output 10 Input 1 3 Output 4 -----Note----- In the first example, the Fibonacci numbers from the 2nd to the 5th terms are 1, 2, 3, 5. Their sum is 1 + 2 + 3 + 5 = 11. In the second example, the Fibonacci numbers from the 1st to the 3rd terms are 1, 1, 2. Their sum is 1 + 1 + 2 = 4.","solution":"def fibonacci_sum(a, b): Returns the sum of Fibonacci numbers from the a-th to b-th term (inclusive). fib = [] fib.append(1) fib.append(1) for i in range(2, b): fib.append(fib[i-1] + fib[i-2]) return sum(fib[a-1:b])"},{"question":"A train company has a system that logs the arrival and departure times of trains at a station. Your task is to find the maximum number of trains that are present at the station at the same time. You are given a list of tuples, where each tuple represents the arrival and departure times of a train. Both arrival and departure times are given in the 24-hour format `HH:MM`. Write a function `max_trains_at_station(trains: List[Tuple[str, str]]) -> int` that returns an integer representing the maximum number of trains at the station at the same time. # Input - A list of tuples where each tuple contains two strings representing the arrival and departure times of a train in the format `HH:MM`. - The list contains at most `10^5` tuples. - The arrival and departure times are between `00:00` and `23:59`. # Output - An integer representing the maximum number of trains at the station at the same time. # Example Input ```python [ (\\"10:00\\", \\"10:30\\"), (\\"10:15\\", \\"10:45\\"), (\\"10:40\\", \\"11:00\\") ] ``` Output ``` 2 ``` Input ```python [ (\\"09:00\\", \\"09:30\\"), (\\"09:20\\", \\"09:50\\"), (\\"09:40\\", \\"10:00\\"), (\\"09:45\\", \\"10:05\\"), (\\"10:00\\", \\"10:30\\") ] ``` Output ``` 3 ``` # Note You may assume that the arrival and departure times are always in the correct order and you don\'t need to validate that the arrival time is before the departure time in each tuple.","solution":"def max_trains_at_station(trains): Finds the maximum number of trains present at the station at the same time. events = [] for train in trains: arrival, departure = train events.append((arrival, \'arrival\')) events.append((departure, \'departure\')) # Sort events based on time; in case of tie \'arrival\' comes before \'departure\' events.sort() max_trains = 0 current_trains = 0 for event in events: if event[1] == \'arrival\': current_trains += 1 max_trains = max(max_trains, current_trains) else: current_trains -= 1 return max_trains"},{"question":"A communication application allows users to write text messages and then change their minds to modify them before sending. One common requirement is the ability to remove all duplicate consecutive words from the message. Write a function that removes all consecutive duplicate words from a given string. Consecutive duplicate words mean two or more adjacent words that are exactly the same. Your goal is to implement a function that takes a single string as an input and returns another string with all consecutive duplicate words removed. -----Input----- The single line of input contains a string, its length is from 1 to 100000 characters. The given string consists of lowercase and uppercase English letters and spaces. Words are separated by a single space. -----Output----- Output the modified string with all consecutive duplicate words removed. -----Examples----- Input I went to the the store store Output I went to the store Input hello hello world world world Output hello world -----Note----- The original string might have mixed-case words (\\"Hello hello HEllo\\") but we are only interested in removing consecutive duplicate words that are exactly the same in terms of case sensitivity. In the second example, the correct output is \\"hello world\\".","solution":"def remove_consecutive_duplicates(s): Removes all consecutive duplicate words from the given string. Args: s (str): The input string containing words separated by spaces. Returns: str: The modified string with all consecutive duplicate words removed. words = s.split() result = [] for word in words: if not result or word != result[-1]: result.append(word) return \' \'.join(result)"},{"question":"You are designing a device that requires an LED display to show numbers. The display consists of seven segments marked as a through g. Each segment can be turned on independently by setting a corresponding bit in a 7-bit number. The seven segments are controlled using a single byte (8 bits) where the least significant 7 bits (b0 to b6) correspond to the segments a through g respectively. The mapping of the 7 bits to the LED segments is as follows: ``` a f b g e c d ``` You need to generate the 7-bit binary value for each digit from 0 to 9 that will correctly display that number on the 7-segment LED display. Write a function `generate_segment_codes()` that returns a list of length 10, where each element is an integer representing the 7-bit segment value for the corresponding digit from 0 to 9. The segment codes for the digits 0 to 9 are: | Digit | Segments (abcdefg) | Binary | Hex | |-------|------------------- |-----------|------| | 0 | abc_efg | 0b0111111 | 0x3F | | 1 | __c__f_ | 0b0000110 | 0x06 | | 2 | a_cde_g | 0b1011011 | 0x5B | | 3 | a_cd_fg | 0b1001111 | 0x4F | | 4 | _b_cd_f | 0b1100110 | 0x66 | | 5 | ab_cd_g | 0b1101101 | 0x6D | | 6 | ab_defg | 0b1111101 | 0x7D | | 7 | a_c__f_ | 0b0000111 | 0x07 | | 8 | abcdefg | 0b1111111 | 0x7F | | 9 | ab_cd_fg | 0b1101111 | 0x6F | # Input - There are no inputs to the function. # Output - The function should return a list of 10 integers, representing the 7-segment LED binary values for digits 0 through 9. # Example ```python print(generate_segment_codes()) # Output: # [63, 6, 91, 79, 102, 109, 125, 7, 127, 111] ``` ```python def generate_segment_codes(): return [0b0111111, 0b0000110, 0b1011011, 0b1001111, 0b1100110, 0b1101101, 0b1111101, 0b0000111, 0b1111111, 0b1101111] ```","solution":"def generate_segment_codes(): Generates the 7-bit binary values for the 7-segment LED display for digits 0-9. Returns: list of int: A list containing the 7-bit values for each digit from 0 to 9. return [0b0111111, 0b0000110, 0b1011011, 0b1001111, 0b1100110, 0b1101101, 0b1111101, 0b0000111, 0b1111111, 0b1101111]"},{"question":"Background: In a company’s database, each employee is associated with a unique `employee_id`. Each employee also has a list of `subordinates`, which are employees directly reporting to them. The company hierarchy can be represented as a tree structure where the root is the CEO and the leaves are employees with no subordinates. Knowing how many people report directly or indirectly to each employee can be crucial for management purposes. --- --- Task: You need to write a function that, given a dictionary representing the company hierarchy, calculates how many subordinates (direct and indirect) each employee has. The function should accept a dictionary where: - The keys are `employee_id`s (strings). - The values are lists of `employee_id`s representing the direct subordinates of that employee. The function should return a dictionary where: - The keys are `employee_id`s (strings). - The values are integers representing the total number of subordinates (direct and indirect) each employee has. Examples: ```python get_subordinate_counts({ \\"1\\": [\\"2\\", \\"3\\"], \\"2\\": [\\"4\\"], \\"3\\": [], \\"4\\": [] }) == { \\"1\\": 3, \\"2\\": 1, \\"3\\": 0, \\"4\\": 0 } get_subordinate_counts({ \\"A\\": [\\"B\\", \\"C\\"], \\"B\\": [\\"D\\", \\"E\\"], \\"C\\": [\\"F\\"], \\"D\\": [], \\"E\\": [], \\"F\\": [] }) == { \\"A\\": 5, \\"B\\": 2, \\"C\\": 1, \\"D\\": 0, \\"E\\": 0, \\"F\\": 0 } ``` Notes: - The dictionary is guaranteed to represent a valid tree structure. - Each employee has a unique `employee_id`.","solution":"def get_subordinate_counts(hierarchy): Returns the total number of subordinates (direct and indirect) for each employee. hierarchy: dict A dictionary where the keys are employee_ids and the values are lists of employee_ids representing the direct subordinates of that employee. return: dict A dictionary where the keys are employee_ids and the values are the number of subordinates (direct and indirect) for that employee. def count_subordinates(employee): if employee not in subordinate_counts: subordinate_counts[employee] = sum(count_subordinates(sub) + 1 for sub in hierarchy[employee]) return subordinate_counts[employee] subordinate_counts = {} for employee in hierarchy: count_subordinates(employee) return subordinate_counts"},{"question":"The company you work for is developing software for an eCommerce platform. One of the requirements is to implement a recommendation system for users based on their previous purchases. You need to analyze the previous purchase data and suggest the top K products that are frequently bought together with the products in the user\'s past purchase history. The system should recommend products based on the frequency of items being purchased together. For simplicity, assume each product is represented by a unique integer ID. You are given: 1. A list of transactions, where each transaction is a list of product IDs purchased together in a single order. 2. A list of product IDs representing the user\'s past purchase history. 3. An integer K representing the number of top products to recommend. Your task is to write a function that returns the top K product recommendations. Function Signature: ```python def recommend_products(transactions: List[List[int]], purchase_history: List[int], K: int) -> List[int]: ``` Input: - `transactions`: A list of lists of integers, where each inner list represents a transaction containing product IDs. - `purchase_history`: A list of integers representing the user\'s past purchase history. - `K`: An integer representing the number of top products to recommend. Output: - A list of integers representing the top K product recommendations. Constraints: - The number of transactions does not exceed 10^5. - Each transaction contains between 1 and 100 products. - The number of unique products does not exceed 10^4. - The purchase history contains between 1 and 100 products. - K is a positive integer and does not exceed 100. - If there are fewer than K products to recommend, return all of them. - If two products have the same frequency of being purchased together, the one with the smaller product ID should come first in the recommendation. Example: Input: ```python transactions = [ [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4] ] purchase_history = [1] K = 2 ``` Output: ```python [2, 3] ``` Explanation: - Products 2, 3, and 4 are frequently bought together with product 1. - Product 2 and 3 have higher frequencies of being bought together with product 1 than product 4. - Thus, the top 2 recommended products are [2, 3].","solution":"from collections import defaultdict, Counter from typing import List def recommend_products(transactions: List[List[int]], purchase_history: List[int], K: int) -> List[int]: if not transactions or not purchase_history: return [] # To count co-occurrence of products co_occur_count = defaultdict(int) # Set of history products for quick lookup history_set = set(purchase_history) for transaction in transactions: # Find all products in this transaction transaction_set = set(transaction) # Find intersection of this transaction with user\'s purchase history intersecting_products = transaction_set & history_set if intersecting_products: for product in transaction_set: if product not in history_set: co_occur_count[product] += 1 # Use Counter to easily get K most common items counter = Counter(co_occur_count) # Get top K frequent items. # If frequencies are the same, it will sort based on product id automatically recommendations = [product for product, _ in counter.most_common(K)] return recommendations"},{"question":"Write a program that reads a paragraph of text and performs the following operations: 1. Counts the frequency of each word in the paragraph. 2. Reports the k highest-frequency words in descending order of frequency. 3. If two words have the same frequency, they should be sorted alphabetically (case insensitive). Input The input consists of two parts: 1. An integer `k` (1 ≤ k ≤ 10,000) on the first line. 2. A paragraph of text on the next line, which can contain up to 1,000,000 characters. The text includes only letters (both uppercase and lowercase), spaces, and punctuation (.,!?). Words are case insensitive, i.e., \\"Hello\\" and \\"hello\\" are considered the same word. Output Output k lines, each containing a word and its frequency, separated by a space. Words should be reported in descending order of frequency. In case of ties, words should be reported in alphabetical order. # Example Input ``` 3 Hello world! This is a test. Hello World! Hello everyone, hello. ``` Output ``` hello 4 world 2 a 1 ``` # Instructions - Implement a function called `word_frequencies` that takes an integer `k` and a string `paragraph`. - Handle punctuation and convert all words to lowercase to ensure case-insensitive comparison. - Count the frequency of each word and store the result in a dictionary. - Sort the words first by frequency (in descending order) and then alphabetically in case of a tie. - Return the k highest-frequency words along with their frequencies.","solution":"import re from collections import Counter def word_frequencies(k, paragraph): This function takes an integer k and a paragraph of text, and returns the k highest-frequency words in descending order of frequency, with ties broken by alphabetical order. # Normalize the text to lowercase and replace punctuation with spaces normalized_paragraph = re.sub(r\'[^ws]\', \' \', paragraph).lower() # Split the paragraph into words words = normalized_paragraph.split() # Count the frequency of each word word_count = Counter(words) # Sort the words first by frequency (in descending order), then alphabetically sorted_words = sorted(word_count.items(), key=lambda item: (-item[1], item[0])) # Return top k frequent words return sorted_words[:k]"},{"question":"Design a function that takes in a string of lowercase alphabetic characters and returns the length of the longest substring without repeating characters. Input Format The input consists of a single line containing a string ( S ) (1 ≤ ( |S| ) ≤ 100). Output Format Output a single integer, the length of the longest substring without repeating characters. Constraints The input string ( S ) will only contain lowercase alphabetic characters (\'a\' to \'z\'). Sample Input abrkaabcdefghijjxxx Sample Output 10 Explanation The longest substring without repeating characters in \\"abrkaabcdefghijjxxx\\" is \\"abcdefghij\\", which has a length of 10. Timelimits Timelimits for this challenge can be seen here","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} start = 0 max_length = 0 for end, char in enumerate(s): if char in char_map and char_map[char] >= start: start = char_map[char] + 1 char_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Create a function spiral_matrix(size) that generates a size x size spiral matrix filled with consecutive numbers starting from 1. The function should return this matrix as a list of lists. For example: ``` spiral_matrix(3) should return : [[1, 2, 3], [8, 9, 4], [7, 6, 5]] spiral_matrix(4) should return : [[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]] ``` The spiral should start in the top-left corner and proceed to the right, then down, then to the left, and then up, repeating this pattern until the entire matrix is filled.","solution":"def spiral_matrix(size): if size <= 0: return [] matrix = [[0] * size for _ in range(size)] left, right, top, bottom = 0, size - 1, 0, size - 1 num = 1 while left <= right and top <= bottom: # from left to right along the top row for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 # from top to bottom along the right column for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 if top <= bottom: # from right to left along the bottom row for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 if left <= right: # from bottom to top along the left column for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"During a power outage, a group of students decided to play with paper and pencils. They wrote down many integers and started playing a number game. Their goal is to find the maximum sum of a subset of these integers such that no two chosen integers are adjacent in the original list of numbers. Can you help the students determine the optimal sum they can achieve given these rules? -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of integers. - The second line contains N space-separated integers. -----Output:----- For each test case, output in a single line the maximum sum possible without selecting two adjacent numbers. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 - 1 leq text{integer value} leq 10^4 -----Sample Input:----- 2 4 1 2 9 4 5 3 2 5 10 7 -----Sample Output:----- 10 15 -----EXPLANATION:----- Test case 1: The optimal sum is 10, selecting the numbers 2 and 9. Test case 2: The optimal sum is 15, selecting the numbers 3, 5, and 7.","solution":"def max_subset_sum_no_adjacent(nums): This function takes in a list of integers and returns the maximum possible sum of a subset of these integers such that no two chosen integers are adjacent in the original list. if not nums: return 0 if len(nums) == 1: return nums[0] # Initialize an array to store the maximum sum until each index max_sum = [0] * len(nums) max_sum[0] = nums[0] max_sum[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): max_sum[i] = max(max_sum[i-1], max_sum[i-2] + nums[i]) return max_sum[-1] def get_max_sums(test_cases): results = [] for case in test_cases: N, numbers = case results.append(max_subset_sum_no_adjacent(numbers)) return results # Sample Input Parsing and Running def main(input_list): T = input_list[0] index = 1 test_cases = [] for _ in range(T): N = input_list[index] numbers = input_list[index + 1] test_cases.append((N, numbers)) index += 2 return get_max_sums(test_cases)"},{"question":"In a tropical rainforest, there are many species of trees that grow to different heights. Some of these trees bloom with flowers for exactly one day each year. On this day, each blooming tree is very popular among the rainforest creatures. However, a tall tree might overshadow a shorter tree, making it less attractive. Given the heights of the trees in a specific area of the rainforest, find which trees bloom without being overshadowed by any taller tree to their right. A tree is considered overshadowed if there is at least one taller tree to its right. Input The first line contains an integer n, which represents the number of trees in the rainforest (1 ≤ n ≤ 10^5). The second line contains n integers, h_1, h_2, ..., h_n, where h_i (1 ≤ h_i ≤ 10^9) represents the height of the i-th tree. Output On the first and only line, print the positions of the trees that are not overshadowed. If no trees meet the criteria, print \\"None\\" without the quotes. The positions should be one-based indices of the trees. Examples Input 1 5 6 9 7 4 8 Output 1 2 5 Input 2 4 3 4 2 1 Output 2 2 3 4 Input 3 3 5 4 6 Output 3 3 Note For the first example, the trees at positions 2 and 5 are not overshadowed by any taller tree to their right. The tree at position 1 is overshadowed by the tree at position 2, and the trees at positions 3 and 4 are overshadowed by the tree at position 5.","solution":"def find_non_overshadowed_trees(n, heights): Returns the positions (1-based indices) of trees that are not overshadowed by any taller tree to their right. If no trees meet the criteria, it returns \'None\'. if n == 0: return \\"None\\" result = [] max_height_so_far = 0 for i in range(n - 1, -1, -1): if heights[i] > max_height_so_far: result.append(i + 1) # Convert to 1-based index max_height_so_far = heights[i] result.reverse() return result if result else \\"None\\""},{"question":"John is trying to organize a series of events in a way that no two similar events are held back-to-back. Each event can be represented by a lowercase letter. For example, a sequence of events can be \'aabbcc\' where \'a\', \'b\', and \'c\' are types of events. John needs to find a possible arrangement of the given events such that no two identical events are adjacent to each other. If it is not possible to arrange the events that meet the requirement, return \\"Not possible\\". Your task is to help John by writing a function that takes a string of events and returns the rearranged string. INPUT The input will be a single string S, representing a sequence of events. OUTPUT The output should be a single string representing a valid arrangement or \\"Not possible\\" if no such arrangement exists. CONSTRAINTS |S| ≤ 10^5 All characters in the input string consist of only lowercase latin characters (\'a\'-\'z\'). SAMPLE INPUT aaabbc SAMPLE OUTPUT ababac SAMPLE INPUT aaab SAMPLE OUTPUT Not possible","solution":"import heapq from collections import Counter def rearrange_events(S): Rearrange the given string S such that no two identical characters are adjacent. Returns the rearranged string or \\"Not possible\\" if such a rearrangement is impossible. # Edge case for single character if len(S) == 1: return S # Count the frequency of each character frequency = Counter(S) # Create a max heap based on the frequency counts max_heap = [(-count, char) for char, count in frequency.items()] heapq.heapify(max_heap) # Previous element to compare and ensure no two same characters are adjacent prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) # Add the current character to the result result.append(char) # If there was a previous element, push it back if it still needs to be used if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update previous character and its count prev_count, prev_char = count + 1, char # Increment count back towards zero result_str = \'\'.join(result) # Check if rearrangement was possible return result_str if len(result_str) == len(S) else \\"Not possible\\""},{"question":"You are given a sequence A_1, A_2, ldots, A_N. You need to reorder the elements of the sequence in such a way that every element satisfies one of the following conditions: 1. It is the smallest element of a contiguous subarray of size K (i.e., the element is the minimum within a subarray of exactly K elements). 2. The subarray does not exist (i.e., it\'s not possible to find such a subarray for that element). Your task is to determine if it\'s possible to reorder the sequence such that every element satisfies the conditions stated above. If possible, output the reordered sequence, otherwise output \\"NO\\". -----Input----- - The first line of the input contains a single integer K. - The second line contains a single integer N denoting the length of the sequence. - The third line contains N space-separated integers A_1, A_2, ldots, A_N. -----Output----- - If it is not possible to reorder A to satisfy the given conditions, print a single line containing the string \\"NO\\" (without quotes). - Otherwise, print a single line containing N space-separated integers ― the elements of your reordered sequence. -----Constraints----- - 1 le K le 10^5 - 1 le N le 10^5 - 1 le A_i le 2 cdot 10^5 for each valid i -----Example Input----- 3 6 3 6 4 1 5 2 -----Example Output----- 1 4 6 3 5 2","solution":"def reorder_sequence(K, N, A): This function attempts to reorder sequence A of length N such that every element is the smallest in a contiguous subarray of size K or no such subarray exists. Args: K: int - subarray size constraint N: int - length of the sequence A: list[int] - the sequence to reorder Returns: The reordered sequence or \\"NO\\" if the condition can\'t be met. if N < K: # If the sequence length is less than K, we cannot have any subarray of size K return \\"NO\\" A.sort() # Sorting to potentially create the required subarrays subarrays = [] for i in range(0, N, K): subarray = A[i:i + K] if len(subarray) == K: subarrays.append(subarray) # Flattening the list of subarrays to form the final result reordered_sequence = [item for subarray in subarrays for item in subarray] # Check that all elements in the reordered sequence come from valid subarrays of size != K for i in range(len(reordered_sequence)): if i % K == 0: min_val = reordered_sequence[i] for j in range(i, min(i + K, len(reordered_sequence))): if reordered_sequence[j] < min_val: return \\"NO\\" return \\" \\".join(map(str, reordered_sequence)) if len(reordered_sequence) == N else \\"NO\\""},{"question":"In a computer network, each computer is represented as a node, and the communication cable between computers is represented as an edge between nodes. You are given a directed graph where nodes represent computers and edges represent communication paths between them. Each edge has a travel time associated with it. Find the shortest path from a given start node to all other nodes in the network. However, due to security restrictions, a node can only be visited a maximum of two times in any path. Input: The first line of input contains two integers n and m, denoting the number of nodes and edges, respectively. The following m lines each contain three integers u, v, and t, representing a directed edge from node u to node v with a travel time of t. The last line contains an integer s, representing the starting node. Constraints: 1 ≤ n ≤ 1000 1 ≤ m ≤ 5000 1 ≤ u, v ≤ n 1 ≤ t ≤ 1000 1 ≤ s ≤ n Output: Output n lines. The i-th line should contain the shortest travel time from the start node s to node i. If it is not possible to reach node i from s, output -1 for that node. SAMPLE INPUT 5 6 1 2 5 1 3 10 2 4 3 3 4 2 4 5 1 3 1 7 1 SAMPLE OUTPUT 0 5 10 8 9 Explanation Starting from node 1: - The shortest path to node 1 is 0 since it\'s the starting node. - From node 1, the shortest path to node 2 is a direct edge with travel time 5. - From node 1, the shortest path to node 3 is a direct edge with travel time 10. - From node 1 to node 4, the shortest path is 1 -> 2 -> 4 with travel time 8. - From node 1 to node 5, the shortest path is 1 -> 2 -> 4 -> 5 with travel time 9.","solution":"import heapq def find_shortest_paths(n, m, edges, start): Finds the shortest path from start node to all other nodes with a constraint that a node can only be visited a maximum of two times. Args: n : int : number of nodes m : int : number of edges edges : list of tuples : (u, v, t) representing a directed edge from node u to node v with travel time t start : int : the starting node Returns: list : shortest travel times from the start node to each node. If a node is not reachable from the start node, it returns -1 for that node. adj_list = [[] for _ in range(n + 1)] for u, v, t in edges: adj_list[u].append((v, t)) distances = [float(\'inf\')] * (n + 1) visits = [0] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node] or visits[current_node] >= 2: continue visits[current_node] += 1 for neighbor, travel_time in adj_list[current_node]: new_distance = current_distance + travel_time if new_distance < distances[neighbor]: distances[neighbor] = new_distance heapq.heappush(priority_queue, (new_distance, neighbor)) for i in range(1, n + 1): if distances[i] == float(\'inf\'): distances[i] = -1 return distances[1:] # Example usage n, m = 5, 6 edges = [(1, 2, 5), (1, 3, 10), (2, 4, 3), (3, 4, 2), (4, 5, 1), (3, 1, 7)] start = 1 print(find_shortest_paths(n, m, edges, start))"},{"question":"Two players are playing a game using an array of integers. The rules of the game are as follows: - They take alternate turns to remove an element from either end of the array. - The player who removes an element adds it to their score. - The game ends when there are no elements left in the array. Write a program to determine the maximum total score the first player can achieve if both players play optimally. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - For each testcase, the first line contains an integer N denoting the number of elements in the array. - The next line contains N space-separated integers representing the elements of the array. -----Output:----- For each testcase, output a single integer, the maximum total score the first player can achieve. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 100 - 1 leq A_{i} leq 1000 -----Sample Input:----- 1 4 8 15 3 7 -----Sample Output:----- 22 -----EXPLANATION:----- The optimal strategy for the first player is to remove 7 in the first turn. The second player will then maximize their score, leaving the array [8, 15, 3] from which the first player will proceed by choosing 8 or 3 based on subsequent optimal decisions.","solution":"def max_score_game(arr): n = len(arr) dp = [[0]*n for _ in range(n)] for length in range(1, n+1): for i in range(n-length+1): j = i + length - 1 x = dp[i+2][j] if (i+2) <= j else 0 y = dp[i+1][j-1] if (i+1) <= (j-1) else 0 z = dp[i][j-2] if i <= (j-2) else 0 dp[i][j] = max(arr[i] + min(x, y), arr[j] + min(y, z)) return dp[0][n-1] def solve_max_score_game(test_cases): results = [] for N, arr in test_cases: results.append(max_score_game(arr)) return results"},{"question":"A company offers different subscription plans for its online services. Each subscription plan has a certain cost and includes a set of features. The users have specific requirements, meaning they need a selection of features to satisfy their needs, and they want to minimize the cost while obtaining all the required features. Given a list of subscription plans, each with a cost and a set of features, write a program to determine the minimum cost required to satisfy a given set of required features. If it\'s not possible to satisfy all the required features with the available plans, the program should return -1. # Input - A set of features required by the user, given as a space-separated string of feature names. - A set of subscription plans, where each plan is described in two lines: 1. An integer representing the cost of the plan. 2. A space-separated string of feature names included in the plan. - The input is ended by a single line containing a zero. # Output - For each dataset, the minimum cost to satisfy the required features. If it\'s impossible to satisfy all the required features, output -1. # Example Input: ``` featureA featureB 3 30 featureA featureC 20 featureB featureD 25 featureA featureB featureD featureA featureC featureD 2 50 featureA 20 featureC featureD 0 ``` Output: ``` 25 70 ``` # Explanation In the first example dataset, the user requires `featureA` and `featureB`. Among the provided plans, only the third plan has both features and costs 25. In the second example dataset, the user requires `featureA`, `featureC`, and `featureD`. The only way to cover these features is by selecting both available plans, resulting in a total cost of 70 (50 + 20).","solution":"def min_cost_to_satisfy_features(required_features, plans): from itertools import combinations def is_covered(required_set, available_set): return required_set.issubset(available_set) required_features_set = set(required_features.split()) plan_details = [] for cost, features in plans: feature_set = set(features.split()) plan_details.append((cost, feature_set)) min_cost = float(\'inf\') n = len(plan_details) for r in range(1, n + 1): for combo in combinations(plan_details, r): combined_cost = sum(plan[0] for plan in combo) combined_features = set().union(*(plan[1] for plan in combo)) if is_covered(required_features_set, combined_features): min_cost = min(min_cost, combined_cost) return min_cost if min_cost != float(\'inf\') else -1 def process_input(input_data): index = 0 results = [] while index < len(input_data): required_features = input_data[index].strip() index += 1 if required_features == \\"0\\": break num_plans = int(input_data[index].strip()) index += 1 plans = [] for _ in range(num_plans): cost = int(input_data[index].strip()) index += 1 features = input_data[index].strip() index += 1 plans.append((cost, features)) result = min_cost_to_satisfy_features(required_features, plans) results.append(result) return results"},{"question":"Ravi enjoys gardening and he has two different types of plants, Type A and Type B, which he wants to plant in his garden. His garden is divided into N sections in a straight line. Ravi knows that for the plants to thrive, he must ensure no two adjacent sections have the same type of plant. In other words, if a section has a Type A plant, then the adjacent sections must have Type B plants and vice versa. Given the number of sections and an array representing the preliminary assignment of plants to each section, help Ravi determine if it’s possible to rearrange the plants such that the no two adjacent sections have the same type of plant, and if not, to identify any one section which makes this impossible. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines of input. - The first line contains one integer N, denoting the number of sections. - The second line contains N space-separated integers A1, A2, ..., AN — the preliminary assignment of plants to each section, where Ai is either 1 (indicating Type A) or 2 (indicating Type B). ------ Output Format ------ For each test case, output the answer on a new line — \\"Possible\\" if the plants can be arranged according to the given condition, and if not \\"Impossible X\\" where X is the zero-based index of any one section breaking the condition. Each letter of the output may be printed in either uppercase or lowercase, i.e, Possible, POSSIBLE, and pOSsible will all be treated as equivalent. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^3 1 ≤ Ai ≤ 2 ------ Sample Input 1 ------ 4 5 1 2 1 2 1 4 1 1 2 2 3 2 1 2 2 1 2 ------ Sample Output 1 ------ Possible Impossible 1 Possible Possible ----- Explanation ------ Test case 1: The initial assignment already satisfies the condition, so the answer is \\"Possible\\". Test case 2: At least one possible invalid section index is 1, where two adjacent sections have the same type of plant (1 followed by 1), so the answer is \\"Impossible 1\\". Test case 3: The initial assignment already satisfies the condition, so the answer is \\"Possible\\". Test case 4: The initial assignment already satisfies the condition, so the answer is \\"Possible\\".","solution":"def can_rearrange_plants(T, cases): results = [] for i in range(T): N, assignment = cases[i] possible = True for j in range(1, N): if assignment[j] == assignment[j - 1]: results.append(f\\"Impossible {j}\\") possible = False break if possible: results.append(\\"Possible\\") return results"},{"question":"Given a string S, develop a program to find the length of the longest substring with no repeating characters. Input Specifications: - The first line contains the number of test cases, T. - For each test case, a single string S is provided. Output Specifications: - For every test case, output the length of the longest substring containing unique characters. Constraints: 1 ≤ T ≤ 100 1 ≤ length(S) ≤ 100000 S consists of only printable ASCII characters. Hint: Use a sliding window approach to solve the problem efficiently. SAMPLE INPUT 2 abcabcbb bbbbb SAMPLE OUTPUT 3 1 Register for IndiaHacks","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} start = 0 max_length = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start + 1) return max_length def process_test_cases(test_cases): Processes multiple test cases and returns the results. results = [] for s in test_cases: results.append(length_of_longest_substring(s)) return results"},{"question":"You are given a list of `n` integers. Your task is to find a continuous subarray with the greatest sum and return this sum. A subarray is defined as a contiguous segment of the array. If there are multiple subarrays with the same maximum sum, consider only the length of the longest one. If the list only contains non-positive numbers, return 0. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains `n` integers separated by space, representing the elements of the array. -----Output----- Output a single integer — the sum of the maximum subarray. -----Examples----- Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 Explanation: The contiguous subarray [4, -1, 2, 1] has the largest sum = 6. Input 5 -1 -2 -3 -4 -5 Output 0 Explanation: The list only contains non-positive numbers, so the largest sum is 0.","solution":"def max_subarray_sum(arr): Finds the sum of the maximum subarray. if all(x <= 0 for x in arr): return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function that takes a list of strings and an integer `k` as input and returns a new list, where each string from the original list is repeated `k` times consecutively. The order of the strings should remain the same. For example, if the input list is `[\\"a\\", \\"b\\", \\"c\\"]` and `k = 3`, the function should return: ``` [\\"aaa\\", \\"bbb\\", \\"ccc\\"] ``` If the input list is `[\\"hello\\", \\"world\\"]` and `k = 2`, the function should return: ``` [\\"hellohello\\", \\"worldworld\\"] ``` If the input list is `[]` (an empty list) or `k = 0`, the function should return an empty list.","solution":"def repeat_strings(str_list, k): Given a list of strings and an integer k, returns a new list where each string is repeated k times consecutively. Parameters: str_list (list): List of strings to be repeated. k (int): Number of times each string should be repeated. Returns: list: New list with repeated strings. if k <= 0: return [] return [s * k for s in str_list]"},{"question":"A conveyor belt in a factory is represented as an array of `N` integers, where each integer represents the height of an object on the conveyor. Your task is to program a robot that can pick objects from the conveyor belt in such a way that the sequence of picked objects forms a strictly increasing or strictly decreasing sequence. The robot can start picking from any position and can only pick an object if it forms a valid sequence with the previously picked object. The robot can only move forward (right) on the conveyor belt. Write a function that receives the array representing the conveyor belt and returns the length of the longest strictly increasing or strictly decreasing sequence of picked objects. If the conveyor belt is empty, the function should return `0`. Input - An array of integers representing the heights of the objects, where the length of the array is between 0 and 1000, inclusive. - Each height is an integer between 1 and 1000, inclusive. Output - An integer representing the length of the longest strictly increasing or decreasing sequence. Examples Input [5, 3, 4, 8, 6, 7] Output 4 Explanation: The longest strictly increasing sequence is [3, 4, 6, 7]. Input [10, 9, 2, 5, 3, 7, 101, 18] Output 5 Explanation: The longest strictly increasing sequence is [2, 3, 7, 101, 18] or [2, 5, 7, 101, 18]. Input [1, 2, 3, 4, 5] Output 5 Explanation: The entire array is strictly increasing. Input [5, 4, 3, 2, 1] Output 5 Explanation: The entire array is strictly decreasing.","solution":"def longest_increasing_decreasing_sequence(arr): if not arr: return 0 n = len(arr) inc_seq_lengths = [1] * n dec_seq_lengths = [1] * n for i in range(n): for j in range(i): if arr[i] > arr[j]: inc_seq_lengths[i] = max(inc_seq_lengths[i], inc_seq_lengths[j] + 1) elif arr[i] < arr[j]: dec_seq_lengths[i] = max(dec_seq_lengths[i], dec_seq_lengths[j] + 1) return max(max(inc_seq_lengths), max(dec_seq_lengths))"},{"question":"Bob and Rita are playing a game with two strings and a target sequence. Bob gives Rita a target string t and two source strings s1 and s2. Rita needs to construct the target string t by merging characters from s1 and s2 in sequence. Rita cannot change the order of characters in s1 or s2. Write a function that determines if it is possible to construct the target string t by interleaving the characters of s1 and s2. -----Input----- The input consists of several test cases. The first line contains an integer n (1 leq n leq 100) - the number of test cases. The next 3n lines describe the test cases in the following format: Each test case consists of three lines: - The first line contains the source string s1 (1 leq |s1| leq 100). - The second line contains the source string s2 (1 leq |s2| leq 100). - The third line contains the target string t (1 leq |t| leq 200). -----Output----- For each test case, print \\"YES\\" if it is possible to construct the target string t by interleaving s1 and s2. Otherwise, print \\"NO\\". -----Example----- Input 3 abc def adbcef ab cd abcd ab cd abdc Output YES YES NO -----Note----- For the first test case, Rita can merge s1 = \\"abc\\" and s2 = \\"def\\" to form the target string \\"adbcef\\". For the second test case, Rita can merge s1 = \\"ab\\" and s2 = \\"cd\\" to form the target string \\"abcd\\". For the third test case, it is not possible to merge s1 = \\"ab\\" and s2 = \\"cd\\" to form the target string \\"abdc\\" because the characters must maintain the order from their respective source strings.","solution":"def can_construct(s1, s2, t): Determines if the target string t can be constructed by interleaving characters of s1 and s2. memo = {} def dp(i, j): if (i, j) in memo: return memo[(i, j)] if i == len(s1) and j == len(s2): return True if i < len(s1) and s1[i] == t[i + j] and dp(i + 1, j): memo[(i, j)] = True return True if j < len(s2) and s2[j] == t[i + j] and dp(i, j + 1): memo[(i, j)] = True return True memo[(i, j)] = False return False return dp(0, 0) def interleave_game(test_cases): results = [] for s1, s2, t in test_cases: if can_construct(s1, s2, t): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an integer array representing the prices of a set of stocks over several days, the task is to find the maximum profit that can be made by buying and selling the stock exactly once. Input: First line of the input contains an integer T, the number of test cases. Each test case contains two lines. The first line contains an integer N, the number of days. The second line contains N space-separated integers, representing the prices of the stock on each day. Output: For each test case, output a single line, the maximum profit that can be made. If no profit can be made, return 0. User Task: The task is to complete the function maxProfit() which takes as parameters the number of days and the array of prices, and returns the maximum profit. Constraints: 1 <= T <= 100 1 <= N <= 10^5 1 <= price <= 10^5 Example: Input: 2 6 7 1 5 3 6 4 5 7 6 4 3 1 Output: 5 0 Explanation: Testcase 1: Buy on day 2 (price=1) and sell on day 5 (price=6), profit = 6-1 = 5. Testcase 2: No transaction is done and the max profit is 0.","solution":"def maxProfit(N, prices): Returns the maximum profit that can be made by buying and selling the stock exactly once. If no profit can be made, returns 0. if N == 0: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit def process_test_cases(T, test_cases): results = [] for N, prices in test_cases: results.append(maxProfit(N, prices)) return results"},{"question":"Implement a function that takes a list of positive integers and returns a list where each integer transformation is done according to the following rules: 1. If the integer is divisible by 3, replace it with the string \\"Fizz\\". 2. If the integer is divisible by 5, replace it with the string \\"Buzz\\". 3. If the integer is divisible by both 3 and 5, replace it with the string \\"FizzBuzz\\". 4. Otherwise, the integer remains unchanged. The function signature is defined as: ```python def fizz_buzz_transform(numbers: List[int]) -> List[Union[int, str]]: pass ``` **Example:** ```python input_list = [1, 3, 5, 15, 22, 30] fizz_buzz_transform(input_list) ``` **Output:** ``` [1, \'Fizz\', \'Buzz\', \'FizzBuzz\', 22, \'FizzBuzz\'] ``` **Explanation:** - 1 is not divisible by 3 or 5, so it remains unchanged. - 3 is divisible by 3, so it is replaced by \\"Fizz\\". - 5 is divisible by 5, so it is replaced by \\"Buzz\\". - 15 is divisible by both 3 and 5, so it is replaced by \\"FizzBuzz\\". - 22 is not divisible by 3 or 5, so it remains unchanged. - 30 is divisible by both 3 and 5, so it is replaced by \\"FizzBuzz\\".","solution":"from typing import List, Union def fizz_buzz_transform(numbers: List[int]) -> List[Union[int, str]]: Transforms a list of positive integers according to the FizzBuzz rules. Args: - numbers: List[int] : A list of positive integers. Returns: - List[Union[int, str]] : A list where each integer is replaced by: - \'Fizz\' if divisible by 3 - \'Buzz\' if divisible by 5 - \'FizzBuzz\' if divisible by both 3 and 5 - The integer itself if none of the above conditions are met result = [] for number in numbers: if number % 3 == 0 and number % 5 == 0: result.append(\'FizzBuzz\') elif number % 3 == 0: result.append(\'Fizz\') elif number % 5 == 0: result.append(\'Buzz\') else: result.append(number) return result"},{"question":"You have an array of integers arr of length n. Your task is to find the maximum product of two distinct elements in the array that are not adjacent to each other. Input The first line contains an integer n (2 ≤ n ≤ 1000), the length of the array. The second line contains n space-separated integers arr (1 ≤ arr[i] ≤ 100), the elements of the array. Output Print a single integer — the maximum product of two distinct non-adjacent elements in arr. Examples Input 6 3 6 1 9 4 7 Output 63 Input 5 8 2 5 6 3 Output 48","solution":"def max_non_adjacent_product(arr): Returns the maximum product of two distinct non-adjacent elements in the array. n = len(arr) # Initialize a variable to store the maximum product max_product = 0 # Iterate through each pair and calculate the product if they are non-adjacent for i in range(n): for j in range(i + 2, n): max_product = max(max_product, arr[i] * arr[j]) return max_product"},{"question":"Imagine you are a Software Engineer playing in a certain game. The game is played in rounds and requires you to count specific elements while ensuring optimal performance. The game proceeds as follows: You are given two integer arrays `A` and `B` of length `N` and `M` respectively. - For each element in array `B`, count how many elements in array `A` are less than or equal to the element in `B`. ------ Input Format ------ - The first line of input contains a single integer `T`, the number of test cases. The description of `T` test cases follows. - The first line of each test case contains two space-separated integers `N` and `M`, the sizes of arrays `A` and `B`, respectively. - The second line of each test case contains `N` space-separated integers, the elements of the array `A`. - The third line of each test case contains `M` space-separated integers, the elements of the array `B`. ------ Output Format ------ - For each test case, output a single line containing `M` space-separated integers, where the i-th integer denotes the count of elements in `A` that are less than or equal to the i-th element of `B`. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 10^5 1 ≤ A_{i}, B_{j} ≤ 10^9 (1 ≤ i ≤ N, 1 ≤ j ≤ M) Sum of N and M over all test cases does not exceed 10^6. ----- Sample Input ------ 2 5 3 1 3 5 7 9 2 6 8 4 4 2 3 7 5 1 2 3 4 ----- Sample Output ------ 1 4 4 0 1 2 2 ------ Explanation ------ For the first test case: - For B[1]=2, there is 1 element in A (which is `1`) that is less than or equal to 2. - For B[2]=6, there are 4 elements in A (which are `1`, `3`, `5`, and `7`) that are less than or equal to 6. - For B[3]=8, there are 4 elements in A (which are `1`, `3`, `5`, and `7`) that are less than or equal to 8. For the second test case: - For B[1]=1, there are no elements in A that are less than or equal to 1. - For B[2]=2, there is 1 element in A (which is 2) that is less than or equal to 2. - For B[3]=3, there are 2 elements in A (which are 2 and 3) that are less than or equal to 3. - For B[4]=4, there are 2 elements in A (which are 2 and 3) that are less than or equal to 4.","solution":"def count_elements(A, B): For each element in array B, counts how many elements in array A are less than or equal to the element in B. A.sort() result = [] for b in B: left, right = 0, len(A) while left < right: mid = (left + right) // 2 if A[mid] <= b: left = mid + 1 else: right = mid result.append(left) return result def process_input(test_cases): results = [] for A, B in test_cases: result = count_elements(A, B) results.append(result) return results"},{"question":"You are given a list of results for runners participating in a race, with each runner\'s name and time taken to complete the race. The task is to process the results to figure out the winner and provide rankings for all participants based on their race times. Each runner has a unique name. Return a dictionary with the ranking as keys and the corresponding runner\'s name and their time as values in the form of a tuple. The input will be a list of dictionaries where each dictionary contains \'name\' and \'time\' keys. For example: ```python runners = [ {\\"name\\": \\"Alice\\", \\"time\\": 320.5}, {\\"name\\": \\"Bob\\", \\"time\\": 300.1}, {\\"name\\": \\"Charlie\\", \\"time\\": 305.7} ] ``` The function should return: ```python { 1: (\\"Bob\\", 300.1), 2: (\\"Charlie\\", 305.7), 3: (\\"Alice\\", 320.5) } ``` Write a function `rank_runners(runners)` that takes in the list of runners and returns the ranking dictionary. ```python def rank_runners(runners): # Your code here ```","solution":"def rank_runners(runners): Takes a list of dictionaries containing runners\' names and their times, and returns a dictionary with the ranking as keys and tuples of runners\' names and their times as values. runners_sorted = sorted(runners, key=lambda x: x[\'time\']) ranking = {} for i, runner in enumerate(runners_sorted, start=1): ranking[i] = (runner[\'name\'], runner[\'time\']) return ranking"},{"question":"Given an array of integers and a target integer T, determine if there are two distinct indices in the array such that the elements at those indices add up to T. Example 1: Input: arr = [2, 7, 11, 15], T = 9 Output: 1 Explanation: arr[0] + arr[1] = 2 + 7 = 9 Example 2: Input: arr = [3, 2, 4], T = 6 Output: 1 Explanation: arr[1] + arr[2] = 2 + 4 = 6 Example 3: Input: arr = [3, 3], T = 6 Output: 1 Explanation: arr[0] + arr[1] = 3 + 3 = 6 Example 4: Input: arr = [1, 2, 3], T = 7 Output: 0 Explanation: There are no two indices whose elements add up to 7. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findPairWithSum() which takes an array of integers arr and an integer T, and returns 1 if there are two distinct indices in the array such that the elements at those indices add up to T, else returns 0. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= arr.length <= 10^5 -10^9 <= arr[i] <= 10^9 -10^9 <= T <= 10^9","solution":"def findPairWithSum(arr, T): Returns 1 if there are two distinct indices in the array such that the elements at those indices add up to T, else returns 0. :param arr: List[int], the array of integers :param T: int, the target integer :return: int, 1 if there are two distinct indices with sum T, else 0 seen = set() for num in arr: complement = T - num if complement in seen: return 1 seen.add(num) return 0"},{"question":"Takashi and his orchard. Takashi has a rectangular orchard which he divides into N equal rows and M equal columns, forming a grid of N * M smaller rectangles. Each rectangle is planted with either apple trees or orange trees in an alternating pattern starting with apples, and the pattern repeats in both directions. Apple trees are represented by \'A\' and orange trees are represented by \'O\'. Given the number of rows (N) and columns (M), you need to output the arrangement of the orchard in the form of a grid pattern. -----Constraints----- - 1 ≤ N, M ≤ 100 -----Input----- The input is given from Standard Input in the following format: N M -----Output----- Print the arrangement of the orchard as a grid of N rows and M columns. Each cell should contain either \'A\' or \'O\' (without quotes) as described. -----Sample Input----- 3 4 -----Sample Output----- AOAO OAOA AOAO In the 3x4 grid, the first cell has apple trees (\'A\'), the second cell has orange trees (\'O\'), and the pattern repeats as described.","solution":"def orchard_pattern(N, M): Returns a grid pattern of orchard with alternating \'A\' (apple) and \'O\' (orange) trees. Args: N (int): Number of rows. M (int): Number of columns. Returns: List[str]: A list of strings representing the orchard grid pattern. pattern = [] for i in range(N): row = \\"\\" for j in range(M): if (i + j) % 2 == 0: row += \'A\' else: row += \'O\' pattern.append(row) return pattern"},{"question":"In a grid of size m x n, you want to find the longest path that starts from the top-left corner (1,1) and moves to the bottom-right corner (m,n), only moving right or down. However, the challenge is that you can only make a turn (change direction from right to down or from down to right) exactly once. -----Constraints----- - 1 ≤ m, n ≤ 100 - Grid cells are numbered from (1,1) to (m,n). -----Input----- The input is given from Standard Input in the following format: m n -----Output----- Print the length of the longest path that starts from (1,1) and ends at (m,n) with exactly one turn. -----Sample Input----- 3 4 -----Sample Output----- 6 Explanation: The longest path with exactly one turn would be: - Right, Right, Right, Down, Down or - Down, Down, Right, Right, Right","solution":"def longest_path_with_one_turn(m, n): Returns the longest path length from (1,1) to (m,n) with exactly one turn. if m == 1 or n == 1: # Single row or column, no turns possible return m + n - 1 return max((m - 1) + n, m + (n - 1)) # Example usage m, n = 3, 4 print(longest_path_with_one_turn(m, n)) # Output: 6"},{"question":"In a small town, there exists a peculiar library. The library has a specific rule to categorize books based on their titles. Each book title is a string that consists of lowercase alphabets only. The librarian classifies a book title as \\"Interesting\\" if it contains at least one palindrome of length 3, otherwise the title is classified as \\"Boring\\". A palindrome is a string that reads the same backward as forward. For example, \\"aba\\", \\"madam\\", and \\"racecar\\" are palindromes. Write a program to help the librarian classify a list of book titles. -----Input----- The first line contains an integer N denoting the number of book titles. Each of the next N lines contains a string representing the book title. -----Output----- For each book title, print \\"Interesting\\" if the title contains a palindrome of length 3, otherwise print \\"Boring\\". -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ | title | ≤ 1000 -----Example----- Input: 3 abcba abcdefg xyzyx Output: Interesting Boring Interesting -----Explanation----- Example case 1. The title \\"abcba\\" contains the palindrome \\"bcb\\". Example case 2. The title \\"abcdefg\\" does not contain any palindrome of length 3. Example case 3. The title \\"xyzyx\\" contains the palindrome \\"yzy\\".","solution":"def classify_titles(titles): Classifies each title as \\"Interesting\\" if it contains at least one palindrome of length 3, otherwise classifies it as \\"Boring\\". Parameters: titles (list of str): List of book titles. Returns: list of str: List of classifications (\\"Interesting\\" or \\"Boring\\"). def is_interesting(title): for i in range(len(title) - 2): if title[i] == title[i+2]: return \\"Interesting\\" return \\"Boring\\" return [is_interesting(title) for title in titles] # Function to process input & output based on the problem description def main(): import sys input = sys.stdin.read data = input().split(\'n\') N = int(data[0].strip()) titles = [data[i+1].strip() for i in range(N)] results = classify_titles(titles) for result in results: print(result)"},{"question":"You are given a sequence of n integers b_1, b_2, ldots, b_n (1-indexed). You need to create a new sequence of the same length with the following rules: - Each element in the new sequence should be a positive integer. - The new sequence should be a nondecreasing sequence. - The sum of the elements in the new sequence should be the same as the sum of the elements in the original sequence. Your task is to determine if it is possible to create such a sequence. If it is possible, print \\"YES\\" and one such sequence. If it is not possible, print \\"NO\\". -----Input----- The first line contains a single integer t (1 le t le 100) - the number of test cases. The first line of each test case contains an integer n (1 le n le 100) - the length of the sequence. The second line of each test case contains n integers b_1, b_2, ldots, b_n (1 le b_i le 10^9). -----Output----- For each test case, print \\"YES\\" followed by one possible new sequence, or \\"NO\\" if no valid sequence exists. -----Example----- Input 3 4 1 2 3 4 3 2 2 1 2 5 5 Output YES 1 2 3 4 NO YES 5 5 -----Note----- In the first test case, the sequence is already non-decreasing and consists of positive integers, so the answer is \\"YES\\" with the sequence [1, 2, 3, 4]. In the second test case, there is no way to rearrange the sequence to create a nondecreasing sequence with positive integers while maintaining the original sum, so the answer is \\"NO\\". In the third test case, the sequence is already non-decreasing and consists of positive integers, so the answer is \\"YES\\" with the sequence [5, 5].","solution":"def create_non_decreasing_sequence(t, test_cases): results = [] for case in test_cases: n = case[0] b = case[1] if sorted(b) == b: results.append((\\"YES\\", b)) else: results.append((\\"NO\\",)) return results"},{"question":"Sam is a keen photographer and an inventor. He has developed a new photo editing tool that allows him to edit his photographs quickly. The photograph is represented as a grid of pixels with dimensions N times M. Each pixel takes an integer value between 0 and 255 representing its brightness. Sam can apply three types of operations on the photograph grid: 1. Increment a single pixel ― choose a pixel (i, j) and increase its brightness by k. The cost of this operation is k coins. 2. Apply a filter to a rectangular subgrid ― choose a rectangular subgrid from (i1, j1) to (i2, j2) (both inclusive), and set each pixel\'s brightness in the subgrid to a specified value v. The cost of this operation is (i2 - i1 + 1) cdot (j2 - j1 + 1) cdot |v| coins. 3. Flip a rectangular subgrid horizontally ― choose a rectangular subgrid from (i1, j1) to (i2, j2) (both inclusive), and flip it horizontally. The cost of this operation is F coins. Sam can apply any of these operations in any order, but with the following restrictions: - You must apply at most 10^4 operations. - You must apply an operation of type 3 at most once. - The total cost of all operations must not exceed X coins. Your goal is to maximize the sum of brightness values of all pixels in the grid after applying the operations. ------ Input ------ The first line of the input contains three space-separated integers N, M, and X. The next N lines contain M space-separated integers each, representing the initial brightness of each pixel in the grid. The last line contains an integer F representing the cost of a flip operation. ------ Output ------ First, you should print a line containing a single integer L ― the number of operations you want to apply. Then, you should print L lines describing these operations in the order in which they should be applied, in the following format depending on their types: - 1 i j k, if you want to increase the brightness of pixel (i, j) by k - 2 i1 j1 i2 j2 v, if you want to set the brightness of each pixel in the subgrid from (i1, j1) to (i2, j2) to v - 3 i1 j1 i2 j2, if you want to flip the subgrid from (i1, j1) to (i2, j2) horizontally ------ Constraints ------ 1 le N, M le 500 0 le X le 10^7 0 le initial brightness of each pixel le 255 1 le |k|, |v| le 255 1 le F le 10^6 ------ Example Input ------ 4 4 100000 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 5000 ------ Example Output ------ 3 2 1 1 4 4 100 1 2 2 50 3 1 1 2 4 ------ Explanation ------ Note that this is just one possible sequence of operations. Initially, the sum of brightness values of all pixels is 1360. After the first operation, the subgrid (1, 1) to (4, 4) is set to 100, and the sum becomes 1600. The cost of this operation is 100 cdot 16 = 1600 coins. After the second operation, the pixel at (2, 2) is increased by 50, making its brightness 150. The sum becomes 1700 and the additional cost is 50 coins. After the third operation, the subgrid (1, 1) to (2, 4) is flipped horizontally, and the sum remains 1700. The cost of this operation is 5000 coins. At the end, the sum of brightness values is 1700 and the total cost is 6650 coins. ------ Scoring ------ The score of a test case is the sum of brightness values of all pixels in the grid after applying all chosen operations. For a submission, the score is the sum of scores over all test cases in the input set. If your output is invalid or your sequence of operations violates any of the given conditions, the verdict of your submission will be Wrong Answer. Test Generation Process: There are five types of test cases: Type 1: N = 1, M = 1 X geq 1 Type 2: N = M = 2 X geq 10^3 Type 3: N, M = 50, 100 The visibility of pixels is occasionally obscured randomly, making it impossible to adjust brightness too much but tests low-budget scenarios. Type 4: N, M = 100, 500 Tests mid-range solutions with medium-sized grid and budget. Type 5: N, M = 500, 500 Tests large grid with high budget solutions.","solution":"def apply_operations(N, M, X, grid, F): operations = [] cost = 0 # Apply filter to the entire grid first with a moderate value if we have enough budget avg_brightness = int(min(255, X // (N * M))) # Calculate max affordable brightness if cost + N * M * avg_brightness <= X: operations.append(f\\"2 1 1 {N} {M} {avg_brightness}\\") cost += N * M * avg_brightness for i in range(N): for j in range(M): grid[i][j] = avg_brightness # Try to increase specific pixels to at least 255 if possible for i in range(N): for j in range(M): increase = 255 - grid[i][j] if cost + increase <= X and increase > 0: operations.append(f\\"1 {i+1} {j+1} {increase}\\") grid[i][j] += increase cost += increase # Apply a flip operation if we still have budget and haven\'t flipped yet if cost + F <= X: operations.append(f\\"3 1 1 {N} {M}\\") cost += F for i in range(N): for j in range(M // 2): for k in range(i, N): grid[k][j], grid[k][M-j-1] = grid[k][M-j-1], grid[k][j] # Print the number of operations and the operations themselves print(len(operations)) for operation in operations: print(operation) # Test input N, M, X = 4, 4, 100000 initial_grid = [ [10, 20, 30, 40], [50, 60, 70, 80], [90, 100, 110, 120], [130, 140, 150, 160] ] F = 5000 apply_operations(N, M, X, initial_grid, F)"},{"question":"Write a function `findCommonCharacters` that takes a list of strings and returns a list of all characters that show up in all strings within the list (including duplicates). For example, if a character occurs 3 times in all strings, but not 4 times, you should include that character 3 times in the final answer. Note: - You can assume the input list contains only lowercase alphabets. - The order of characters in the final list does not matter. Example: ``` Input: [\\"bella\\",\\"label\\",\\"roller\\"] Output: [\\"e\\",\\"l\\",\\"l\\"] Input: [\\"cool\\",\\"lock\\",\\"cook\\"] Output: [\\"c\\",\\"o\\"] ```","solution":"from collections import Counter def findCommonCharacters(strings): Returns a list of all characters that show up in all strings within the list (including duplicates). if not strings: return [] # Initialize the common characters counter with the first string\'s characters common_counter = Counter(strings[0]) # Intersect with the counters of the subsequent strings for s in strings[1:]: common_counter &= Counter(s) # Expand the common characters based on their counts common_chars = list(common_counter.elements()) return common_chars"},{"question":"You are given two sorted arrays of integers. Your task is to merge these two arrays into a single sorted array. You should not use any built-in sorting functions. Instead, write a function that combines both arrays while maintaining their sorted order. Let\'s look at a few examples: * array1 = [1, 3, 5], array2 = [2, 4, 6], then the result is [1, 2, 3, 4, 5, 6]; * array1 = [0, 4, 10, 11], array2 = [2, 3, 11], then the result is [0, 2, 3, 4, 10, 11, 11]; * array1 = [], array2 = [1, 2, 3], then the result is [1, 2, 3].","solution":"def merge_sorted_arrays(array1, array2): Merges two sorted arrays into a single sorted array. merged_array = [] i, j = 0, 0 while i < len(array1) and j < len(array2): if array1[i] < array2[j]: merged_array.append(array1[i]) i += 1 else: merged_array.append(array2[j]) j += 1 while i < len(array1): merged_array.append(array1[i]) i += 1 while j < len(array2): merged_array.append(array2[j]) j += 1 return merged_array"},{"question":"In a card game, there\'s a special type of deck that contains only unique cards, each represented by a non-negative integer. The goal of the game is to identify any \\"straight\\" sequences within the deck. A \\"straight\\" is defined as a consecutive sequence of integer cards where the length of the sequence is at least 3. Your task is to determine and count the number of distinct straight sequences present in a given deck of cards. Two straight sequences are considered distinct if they have different starting points or different lengths. -----Input----- The input starts with a line containing one integer N (3 le N le 100), which is the number of cards in the deck. The next line contains N space-separated integers, representing the values of the cards in the deck. Each card value is between 0 and 1000 (inclusive). -----Output----- Output a single integer, the number of distinct straight sequences in the deck. -----Examples----- Sample Input: 7 4 5 6 7 8 12 13 Sample Output: 3 Sample Input: 5 1 2 3 6 7 Sample Output: 1","solution":"def count_straights(n, cards): Counts the number of distinct straight sequences in the deck of cards. Parameters: n (int): Number of cards in the deck cards (list of int): The card values Returns: int: Number of distinct straight sequences in the deck cards = sorted(set(cards)) # Sort and remove duplicates count = 0 length = 1 for i in range(1, len(cards)): if cards[i] == cards[i - 1] + 1: length += 1 else: if length >= 3: count += (length - 2) length = 1 if length >= 3: count += (length - 2) return count"},{"question":"Implement a function `sort_and_merge` that takes two lists of integers, sorts each list in ascending order, and then merges the two sorted lists into one sorted list in ascending order without using any built-in sort or merge functions. The function should return the final merged sorted list. # Input: - Two lists of integers, `list1` and `list2`, which can be empty. # Output: - A single merged and sorted list of integers. # Example Input: ```python list1 = [3, 1, 5] list2 = [2, 8, 4] ``` # Example Output: ```python [1, 2, 3, 4, 5, 8] ``` # Constraints: - The elements in the lists are all integers. - The length of each list, `len(list1)` and `len(list2)`, does not exceed 1000. # Note: - You are not allowed to use any built-in sorting or merging functions provided by the programming language. - Implement your own logic for sorting and merging the lists. # Hints: - You may find implementing a simple sorting algorithm like bubble sort, insertion sort, or selection sort helpful. - For merging the lists, consider using a two-pointer technique to iterate over both the sorted lists simultaneously.","solution":"def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] def merge_sorted_lists(list1, list2): sorted_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: sorted_list.append(list1[i]) i += 1 else: sorted_list.append(list2[j]) j += 1 sorted_list.extend(list1[i:]) sorted_list.extend(list2[j:]) return sorted_list def sort_and_merge(list1, list2): bubble_sort(list1) bubble_sort(list2) return merge_sorted_lists(list1, list2)"},{"question":"There are M items in a warehouse, and each item has a weight and a value associated with it. You are given a list of these items represented by a 2D array items where items[i][0] is the weight of the i-th item and items[i][1] is the value of the i-th item. Additionally, you have a maximum weight capacity W for a container. The goal is to find the maximum total value that can be obtained by selecting a subset of these items such that their total weight does not exceed W. Example 1: Input: M = 4 W = 5 items = {{2, 3}, {3, 4}, {4, 5}, {5, 6}} Output: 7 Explanation: Select item 0 (weight=2, value=3) and item 1 (weight=3, value=4). Total weight = 2 + 3 = 5, Total value = 3 + 4 = 7 Example 2: Input: M = 3 W = 3 items = {{3, 4}, {2, 2}, {1, 1}} Output: 4 Explanation: Select item 0 (weight=3, value=4). Total weight = 3, Total value = 4 Your Task: Your task is to complete the function maxTotalValue() which takes an integer M, an integer W, and a 2D integer array items as the only arguments and returns an integer, representing the maximum total value possible within the given weight capacity. Expected Time Complexity: O(M*W) Expected Space Complexity: O(M*W) Constraints: 0 <= M <= 500 0 <= W <= 10^3 1 <= items[i][0], items[i][1] <= 10^3","solution":"def maxTotalValue(M, W, items): Returns the maximum total value that can be obtained given weight capacity W and items. # Initialize a 2D array dp where dp[i][w] represents the maximum value # achievable using the first i items with a maximum weight w. dp = [[0] * (W + 1) for _ in range(M + 1)] for i in range(1, M + 1): weight, value = items[i-1] for w in range(W+1): if weight <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight] + value) else: dp[i][w] = dp[i-1][w] return dp[M][W]"},{"question":"You are helping to develop a strategy video game where players need to build and manage cities. Each city has multiple districts, and each district produces a certain amount of resources per hour. These resources are used to produce items or build new structures within the cities. For each district, there is a resource gain schedule. Given this schedule and a specific number of hours, you need to calculate the total amount of resources generated by each district of a city. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of districts in the city. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the amount of resources produced per hour by each district. The third line contains a single integer h (1 ≤ h ≤ 106) — the number of hours over which the resources are generated. Output Print n integers — the total resources generated by each district after h hours, in the order of their given production rates. Examples Input 4 10 20 30 40 5 Output 50 100 150 200 Input 3 15 25 35 10 Output 150 250 350 Input 2 100 200 3 Output 300 600","solution":"def resource_generation(n, resources_per_hour, h): Returns the total resources generated by each district after h hours. Parameters: n (int): number of districts resources_per_hour (list of int): a list of integers where each integer represents resources produced per hour by the district h (int): number of hours over which the resources are generated Returns: list of int: total resources generated by each district after h hours return [resources * h for resources in resources_per_hour]"},{"question":"In a distant land, there are magical strings called Frobnitz strings. A string is called Frobnitz if it meets the following criteria: 1. The length of the string is at least 3. 2. There exists at least one substring of length 3 which is a palindrome. 3. The string does not contain any digits. You are given T queries. Each query provides a string, and you must determine whether it is a Frobnitz string. **Input:** - The first line contains an integer T (1 ≤ T ≤ 100), the number of queries. - The following T lines each contain a string S with length between 1 and 1000 inclusive, containing only lowercase Latin letters and digits. **Output:** - For each query, output \\"YES\\" if the string is a Frobnitz string, and \\"NO\\" otherwise. **Sample Input:** ``` 4 abcba abbcdef 123 noonx ``` **Sample Output:** ``` YES NO NO NO ``` **Explanation:** - For the first query, \\"abcba\\", it contains a palindrome substring \\"cbc\\" of length 3. - For the second query, \\"abbcdef\\", it does not contain any palindrome substring of length 3. - For the third query, \\"123\\", it contains digits, hence it cannot be a Frobnitz string. - For the fourth query, \\"noonx\\", it contains a palindrome substring \\"noon\\" of length 4 but not of length 3.","solution":"def is_frobnitz_string(s): Returns \\"YES\\" if the string s is a Frobnitz string, otherwise \\"NO\\". # Check if the string contains any digits if any(char.isdigit() for char in s): return \\"NO\\" # Check if the string length is at least 3 if len(s) < 3: return \\"NO\\" # Check for any palindrome of length 3 in the string for i in range(len(s) - 2): if s[i] == s[i + 2]: return \\"YES\\" return \\"NO\\" def frobnitz_queries(queries): Takes a list of queries (strings) and returns a list of results for each query. results = [] for query in queries: results.append(is_frobnitz_string(query)) return results"},{"question":"Design a **traffic monitoring** software which provides real-time road traffic statistics. For a given number of roads r, perform a sequence of the following operations: * logTraffic(t, x): Log x vehicles for time t on road t. * getTraffic(t): Report the total number of vehicles logged on road t. If no vehicles are logged on road t, report 0. * busiestRoad(): Report the road with the maximum number of vehicles logged overall. If there are multiple roads with the same maximum number of vehicles, report the lowest road index. In the initial state, all traffic logs for the roads are empty. Constraints * 1 leq r leq 1,000 * 1 leq q leq 200,000 * 1 leq x leq 1,000,000 Input The input is given in the following format. r ; q query_1 query_2 : query_q Each query query_i is given by 0 t x or 1 t or 2 where the first digits 0, 1, and 2 represent logTraffic, getTraffic, and busiestRoad operations respectively. Output For each getTraffic and busiestRoad operation, print the corresponding output in a new line. Example Input 3 8 0 1 10 0 2 5 1 1 2 0 0 15 1 0 2 0 2 10 Output 10 1 15 0","solution":"class TrafficMonitor: def __init__(self, r): self.road_traffic = [0] * r self.max_traffic = 0 self.busiest_road = -1 def logTraffic(self, t, x): self.road_traffic[t] += x if self.road_traffic[t] > self.max_traffic: self.max_traffic = self.road_traffic[t] self.busiest_road = t elif self.road_traffic[t] == self.max_traffic: self.busiest_road = min(self.busiest_road, t) def getTraffic(self, t): return self.road_traffic[t] def busiestRoad(self): return self.busiest_road def process_queries(self, queries): result = [] for query in queries: if query[0] == 0: self.logTraffic(query[1], query[2]) elif query[0] == 1: result.append(self.getTraffic(query[1])) elif query[0] == 2: result.append(self.busiestRoad()) return result # Example Usage: # r, q = 3, 8 # queries = [(0, 1, 10), (0, 2, 5), (1, 1), (2), (0, 0, 15), (1, 0), (2), (0, 2, 10)] # monitor = TrafficMonitor(r) # output = monitor.process_queries(queries) # print(output)"},{"question":"Write a program to determine the number of different ways you can get a sum of exactly `N` using an arbitrary number of throws of a fair six-sided die. The die has faces numbered 1 through 6. Input Format: A single line containing an integer `N`. 1 ≤ N ≤ 1000 Output Format: A single line containing the number of ways to get the sum of exactly `N`. Input Constraints: - N is a positive integer. SAMPLE INPUT: 5 SAMPLE OUTPUT: 16 Explanation: To get the sum of 5, you can use the following combinations: - 5 - 4 + 1 - 3 + 2 - 3 + 1 + 1 - 2 + 3 - 2 + 2 + 1 - 2 + 1 + 2 - 2 + 1 + 1 + 1 - 1 + 4 - 1 + 3 + 1 - 1 + 2 + 2 - 1 + 2 + 1 + 1 - 1 + 1 + 3 - 1 + 1 + 2 + 1 - 1 + 1 + 1 + 2 - 1 + 1 + 1 + 1 + 1 There are 16 ways to achieve the sum of 5 with the die.","solution":"def ways_to_get_sum(N): dp = [0] * (N + 1) dp[0] = 1 # There is one way to get the sum 0, which is using 0 dice for i in range(1, N + 1): for j in range(1, 7): if i - j >= 0: dp[i] += dp[i - j] return dp[N]"},{"question":"You are given an undirected graph with n nodes and m edges. Each node is uniquely numbered from 1 to n. Additionally, each edge has a non-negative weight. Your task is to determine the minimum number of edges that need to be removed so that the graph becomes a tree (an acyclic connected graph). -----Input----- The first line contains two integers n and m (1 le n le 1000, 0 le m le 2000) indicating the number of nodes and the number of edges in the graph. Each of the next m lines contains three integers u, v, and w (1 le u, v le n, u neq v, 0 le w le 1000), representing an edge between node u and node v with weight w. -----Output----- Output a single integer — the minimum number of edges that need to be removed to make the graph a tree. -----Examples----- Input 5 6 1 2 2 1 3 1 2 3 2 2 4 3 3 5 1 4 5 3 Output 2 Input 3 3 1 2 1 2 3 2 1 3 3 Output 1 Input 4 4 1 2 1 2 3 2 3 4 1 1 4 3 Output 1 -----Note----- In the first sample test case, the graph is initially connected and is not a tree because it contains cycles. By removing the edges with weights 2 (between nodes 2 and 3) and 3 (between nodes 4 and 5), the resulting graph will be a tree. Thus, the minimum number of edges to be removed is 2.","solution":"def min_edges_to_remove(n, m, edges): Returns the minimum number of edges to remove to make the graph a tree. Input: - n: number of nodes - m: number of edges - edges: list of edges where each edge is represented as (u, v, w) if n == 1: return 0 # A single node is already a tree # Function to perform DFS and check graph connectivity def dfs(v, visited, adj_list): visited[v] = True for neighbor in adj_list[v]: if not visited[neighbor]: dfs(neighbor, visited, adj_list) # Build adjacency list adj_list = [[] for _ in range(n + 1)] for u, v, w in edges: adj_list[u].append(v) adj_list[v].append(u) # Check if the graph is connected visited = [False] * (n + 1) dfs(1, visited, adj_list) if not all(visited[1:n+1]): return -1 # Not possible to form a tree, graph is disconnected # Number of edges to remove to make the graph a tree return max(0, m - (n - 1))"},{"question":"Given a list of integers, segregate even and odd numbers. All the even numbers should appear before all the odd numbers in the modified list. The relative order of the even numbers and odd numbers should remain the same. Example 1: Input: nums = [12, 34, 45, 9, 8, 90, 3] Output: [12, 34, 8, 90, 45, 9, 3] Explanation: In the modified list, the even numbers 12, 34, 8, and 90 appear before the odd numbers 45, 9, and 3. The relative order of the even and odd numbers remains the same. Example 2: Input: nums = [1, 3, 2, 4, 7, 6, 10] Output: [2, 4, 6, 10, 1, 3, 7] Explanation: In the modified list, the even numbers 2, 4, 6, and 10 appear before the odd numbers 1, 3, and 7. The relative order of the even and odd numbers remains the same. Your Task: You don\'t need to read input or print anything. Complete the function segregateEvenOdd() which takes a list nums as input parameter and returns a list with even numbers segregated before odd numbers, while maintaining the relative order. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= len(nums) <= 10^5 -10^6 <= nums[i] <= 10^6","solution":"def segregateEvenOdd(nums): Segregates even and odd numbers in the list. Even numbers come first while maintaining relative order. Args: nums (List[int]): List of integers. Returns: List[int]: Modified list with even numbers first followed by odd numbers. even_numbers = [num for num in nums if num % 2 == 0] odd_numbers = [num for num in nums if num % 2 != 0] return even_numbers + odd_numbers"},{"question":"Write a function `longest_unique_substring(s)` that returns the length of the longest substring with all unique characters from a given string `s`. For example: - `longest_unique_substring(\\"abcabcbb\\")` should return `3` as the longest substring with all unique characters is `\\"abc\\"`. - `longest_unique_substring(\\"bbbbb\\")` should return `1` as the longest substring with all unique characters is `\\"b\\"`. - `longest_unique_substring(\\"pwwkew\\")` should return `3` as the longest substring with all unique characters is `\\"wke\\"`. Your function should handle strings with a maximum length of 10,000 characters.","solution":"def longest_unique_substring(s): Returns the length of the longest substring with all unique characters. Parameters: s (str): The input string. Returns: int: The length of the longest substring with all unique characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a sequence of integers representing the different colors of beads in a necklace. The goal is to remove some of the beads (without reordering) in a way that maximizes the number of beads of any one color in the resulting longest contiguous segment of beads. However, there is a specific criteria that must be met for valid removals: you can only remove beads if they form a contiguous segment of the same color. For example, for the sequence [1, 3, 2, 2, 3, 3], you can remove beads [2, 2] or [3, 3], but not a combination of beads such as [3, 2, 2]. -----Input----- The input consists of two lines: 1. An integer n (1 ≤ n ≤ 100), representing the number of beads in the necklace. 2. A list of n integers (each between 1 and 100), representing the color of each bead in the necklace. -----Output----- Output the maximum number of beads of any one color in the resulting longest contiguous segment of beads after valid removals. -----Examples----- Sample Input 1: 10 2 1 2 2 3 3 3 2 2 1 Sample Output 1: 4 Sample Input 2: 15 4 4 1 2 2 2 4 4 4 3 3 3 1 1 1 Sample Output 2: 5 -----Explanation----- In the first example, removing the contiguous segment [2, 2] results in the longest contiguous segment of 3 beads of color 3. Removing the contiguous segment [3, 3, 3] results in the longest segment of 4 beads of color 2. In the second example, removing the contiguous segment [2, 2, 2] results in the longest contiguous segment with 5 beads of color 4. Your task is to implement a function that solves this problem optimally and efficiently.","solution":"def max_contiguous_beads(n, beads): max_length = 0 for i in range(n): for j in range(i, n): sub_beads = beads[:i] + beads[j:] current_length = 1 local_max = 1 for k in range(1, len(sub_beads)): if sub_beads[k] == sub_beads[k - 1]: current_length += 1 local_max = max(local_max, current_length) else: current_length = 1 max_length = max(max_length, local_max) return max_length"},{"question":"You are organizing a single-elimination tournament in which every competing team plays against every other team only once. You need to find out the schedule for the tournament in such a way that each match is finished as soon as possible, that is, teams should play their games at the earliest possible time without any overlaps. Each match takes a fixed duration of time, and you are provided with the number of teams and the match duration. Assume that matches can be scheduled back-to-back without any breaks between them if necessary. Your task is to determine the minimum amount of time required to conclude the entire tournament. -----Input----- - One line containing a single positive integer n (2 le n leq 100), the number of teams competing in the tournament. - Another line containing a positive integer d (1 le d le 100), the duration of each match in minutes. -----Output----- On a single line, print the minimum number of minutes required to ensure that all matches are concluded, assuming optimal scheduling. -----Examples----- Sample Input: 4 30 Sample Output: 90 Sample Input: 8 15 Sample Output: 315","solution":"def minimum_tournament_time(n, d): Returns the minimum amount of time required to conclude the entire tournament. Args: n : int : number of teams (2 <= n <= 100) d : int : duration of each match in minutes (1 <= d <= 100) Returns: int : minimum number of minutes required to conclude the tournament. import math # Number of matches for a single-elimination tournament with n teams is n - 1 matches = n - 1 # Minimum time required is matches * match duration total_time = matches * d return total_time"},{"question":"You are given two strings `str1` and `str2`, both of which are composed of lowercase alphabetic characters. Your task is to determine if `str2` can be formed by rearranging the letters of `str1`, potentially removing some characters, without changing the order of the remaining characters in `str1`. For example, given the string `str1 = \\"ahbgdc\\"` and `str2 = \\"abc\\"`, the output should be `true` because by removing the characters `\'h\'`, `\'g\'`, and `\'d\'` from `str1`, the string `str2` can be obtained. On the other hand, for `str1 = \\"ahbgdc\\"` and `str2 = \\"axc\\"`, the output should be `false` since `str2` cannot be formed by rearranging `str1`. # Function Signature ```python def can_rearrange(str1: str, str2: str) -> bool: Determines if str2 can be formed by rearranging the letters of str1 ``` # Input - `str1` (1 ≤ |str1| ≤ 1000): A string composed of lowercase alphabetic characters. - `str2` (1 ≤ |str2| ≤ 1000): A string composed of lowercase alphabetic characters. # Output - Return `True` if `str2` can be formed by rearranging the letters of `str1`, otherwise `False`. # Example ```python assert can_rearrange(\\"ahbgdc\\", \\"abc\\") == True assert can_rearrange(\\"ahbgdc\\", \\"axc\\") == False assert can_rearrange(\\"abcdef\\", \\"fedcba\\") == True assert can_rearrange(\\"abcdef\\", \\"ghij\\") == False ``` You need to implement the function `can_rearrange` which should return the appropriate boolean value based on the rules described.","solution":"def can_rearrange(str1: str, str2: str) -> bool: Determines if str2 can be formed by rearranging the letters of str1 without changing the order of the remaining characters in str1. it = iter(str1) return all(char in it for char in str2)"},{"question":"Consider an undirected graph with n nodes numbered from 1 to n. There are m edges in the graph, each connecting two distinct nodes. Some nodes may not be connected by any edge. You need to determine if the graph is a bipartite graph. A graph is bipartite if the set of its vertices can be divided into two disjoint sets U and V such that every edge connects a vertex in U to one in V. -----Input----- The first line contains two integers n (2 leq n leq 10^5) and m (0 leq m leq 2 times 10^5), the number of nodes and the number of edges. Each of the next m lines contains two integers u and v (1 leq u, v leq n, u neq v), denoting an edge between nodes u and v. -----Output----- Output \\"YES\\" if the graph is bipartite, and \\"NO\\" otherwise. -----Examples----- Sample Input 1: 4 4 1 2 2 3 3 4 4 1 Sample Output 1: YES Sample Input 2: 3 3 1 2 2 3 3 1 Sample Output 2: NO Sample Input 3: 5 4 1 3 2 3 4 5 1 4 Sample Output 3: YES","solution":"def is_bipartite(n, edges): from collections import deque, defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) color = [-1] * (n + 1) for start in range(1, n + 1): if color[start] == -1: queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbour in graph[node]: if color[neighbour] == -1: color[neighbour] = 1 - color[node] queue.append(neighbour) elif color[neighbour] == color[node]: return \\"NO\\" return \\"YES\\""},{"question":"Write a function that takes in a list of integers and returns a new list where each element is the product of all elements in the original list except the element at the same index. The function should run in O(n) time complexity and must not use the division operation. # Function Signature ```python def product_except_self(nums: List[int]) -> List[int]: pass ``` # Example **Input:** ```python [1, 2, 3, 4] ``` **Output:** ```python [24, 12, 8, 6] ``` # Explanation - For index 0: Product of elements except 1 is `2 * 3 * 4 = 24` - For index 1: Product of elements except 2 is `1 * 3 * 4 = 12` - For index 2: Product of elements except 3 is `1 * 2 * 4 = 8` - For index 3: Product of elements except 4 is `1 * 2 * 3 = 6`","solution":"from typing import List def product_except_self(nums: List[int]) -> List[int]: Given a list of integers, return a new list where each element is the product of all elements in the original list except the element at the same index. This function runs in O(n) time complexity and does not use division. length = len(nums) # Create two lists to store the product of elements to the left and right of each index left_products = [1] * length right_products = [1] * length # Fill left_products for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill right_products for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Construct result by multiplying left and right products result = [1] * length for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"You are tasked with developing a program that involves mapping of words. By anagrams, your output must showcase a specified order of words derived from a given input. The process requires the following steps: 1. For every given word, determine its \\"order weight\\" by summing the ASCII values of all its characters. 2. From the provided list, identify all the words that are anagrams of one another and group them. 3. Within each group of anagrams, sort the words based on their \\"order weight\\" in ascending order. 4. Finally, return the groups of anagrams in any order, with each group containing the sorted words. Here is an example input and the expected output format. Your solution must account for maintaining the sorted order of anagrams and grouping them as specified. -----Input:----- - The first line will contain T, representing the number of test cases. - For each test case, there will be a single line comprising space-separated words. All words will consist of lowercase alphabets only. -----Output:----- - For each test case, output each group of sorted anagrams on a new line, grouped and sorted as described. -----Constraints----- - 1 leq T leq 100 - Each test case will contain between 1 and 100 words - Each word will have a length between 1 and 50 -----Sample Input:----- 2 bat tab cat listen silent apple -----Sample Output:----- bat tab cat listen silent apple","solution":"def anagram_groups(test_cases): def compute_weight(word): return sum(ord(char) for char in word) results = [] for words in test_cases: anagram_dict = {} for word in words: sorted_word = \'\'.join(sorted(word)) if sorted_word not in anagram_dict: anagram_dict[sorted_word] = [] anagram_dict[sorted_word].append(word) groups = [] for key in anagram_dict: sorted_group = sorted(anagram_dict[key], key=compute_weight) groups.append(sorted_group) results.append(groups) return results # Example Usage: T = 2 test_cases = [ [\\"bat\\", \\"tab\\", \\"cat\\"], [\\"listen\\", \\"silent\\", \\"apple\\"] ] output = anagram_groups(test_cases) for result in output: for group in result: print(\' \'.join(group))"},{"question":"You are working on a new online social media platform that is implementing a feature to shorten lengthy URLs. One of the requirements is to ensure that each shortened URL is unique and easy to remember. To achieve this, you need to generate unique shortcodes based on the original URLs provided as input. The shortcodes should be generated using a specific pattern, starting from \\"a\\" and incrementing alphabetically to \\"z\\", then \\"aa\\" to \\"az\\", \\"ba\\" to \\"bz\\", and so on, where each letter is considered in base-26. -----Input----- The input will consist of multiple lines. Each line contains a single URL. The input terminates when an empty line (or end of input) is encountered. You may assume that there are at most 1000 URLs and each URL has a maximum length of 1000 characters. -----Output----- For each input URL, output the corresponding unique shortcode. Each shortcode should be printed in a new line, in the same order as the URLs in the input. -----Examples----- Sample Input 1: https://example.com/page1 https://example.com/page2 Sample Output 1: a b Sample Input 2: https://longurl.com/path/to/resource https://anotherlongurl.com/another/path https://yetanotherurl.com/different/path https://longurl.com/path/to/resource Sample Output 2: a b c a Note: In the second example output, \\"https://longurl.com/path/to/resource\\" appears twice and receives the same shortcode \\"a\\" both times.","solution":"import itertools # A generator for base-26 alphabetic sequences def base26_generator(): length = 1 while True: for s in itertools.product(\\"abcdefghijklmnopqrstuvwxyz\\", repeat=length): yield \'\'.join(s) length += 1 def generate_shortcodes(urls): url_to_shortcode = {} generator = base26_generator() results = [] for url in urls: if url not in url_to_shortcode: url_to_shortcode[url] = next(generator) results.append(url_to_shortcode[url]) return results"},{"question":"Given an array of integers, you are tasked with finding and printing the longest subsequence of strictly increasing numbers. A subsequence is derived by deleting some or none of the elements of the array without changing the order of the remaining elements. Function Description Complete the function `longestIncreasingSubsequence` in the editor below. `longestIncreasingSubsequence` has the following parameter: - `int arr[n]`: an array of integers Returns - `int[]`: the longest increasing subsequence Input Format First line contains an integer `n`, the size of `arr`. The second line contains `n` space-separated integers representing the elements of `arr`. Constraints - 1 leq n leq 10^4 - -10^9 leq arr[i] leq 10^9 Sample Input ``` 6 10 22 9 33 21 50 41 60 80 ``` Sample Output ``` 10 22 33 50 60 80 ``` Explanation One of the possible longest increasing subsequences for the given array is `[10, 22, 33, 50, 60, 80]`. Note that there could be other longest increasing subsequences of the same length, but we only need to output one.","solution":"def longestIncreasingSubsequence(arr): Finds the longest subsequence of strictly increasing numbers in the given array. :param arr: List of integers :return: List containing the longest increasing subsequence n = len(arr) if n == 0: return [] # Initialize the dp array to hold the longest increasing subsequences dp = [[] for _ in range(n)] # Each element alone is an increasing subsequence dp[0].append(arr[0]) for i in range(1, n): for j in range(i): if arr[i] > arr[j] and len(dp[i]) < len(dp[j]): dp[i] = dp[j][:] dp[i].append(arr[i]) # Add arr[i] to the end of the longest found subsequence # Find the longest subsequence in all dp entries longest_subsequence = [] for subsequence in dp: if len(subsequence) > len(longest_subsequence): longest_subsequence = subsequence return longest_subsequence # Example usage if __name__ == \\"__main__\\": arr = [10, 22, 9, 33, 21, 50, 41, 60, 80] print(longestIncreasingSubsequence(arr))"},{"question":"A park has undergone reorganization to control the crowd during weekends. The park administration has introduced a new seating arrangement policy for its picnic benches. Each picnic bench has a fixed capacity in terms of the number of seats. The administration mandates the following guidelines: - Two people cannot sit next to each other on a single bench. - If two people sit on different benches, there must be at least one empty bench separating them. Given the information about the number of benches and the number of seats per bench, determine the maximum number of people that can be seated while adhering to the park\'s guidelines. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of a single line of input containing two space-separated integers B and S — the number of benches and the number of seats on each bench, respectively. ------ Output Format ------ For each test case, output a single line containing one integer – the maximum number of people that can be seated. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ B, S ≤ 100 ------ Sample Input 1 ------ 3 1 5 3 3 4 4 ------ Sample Output 1 ------ 3 4 4 ------ Explanation 1 ------ Test Case 1: There is only one bench with five seats. The maximum number of people that can be seated is 3, occupying alternate seats. Test Case 2: There are three benches with three seats each. The maximum number of people that can be seated is 4, by seating two people on bench 1 and two people on bench 3. Test Case 3: There are four benches with four seats each. The maximum number of people that can be seated is 4, by seating two people on bench 1 and two people on bench 4.","solution":"def max_people(B, S): This function calculates the maximum number of people that can be seated on B benches each having S seats adhering to given seating guidelines. if B == 0 or S == 0: return 0 return (B + 1) // 2 * ((S + 1) // 2) def solve(test_cases): results = [] for B, S in test_cases: results.append(max_people(B, S)) return results"},{"question":"You are given a positive integer `num` representing a number of seconds. Your task is to convert this number of seconds into a string representing the duration in the format \\"X hours, Y minutes and Z seconds\\". Examples: ``` convert_time(3661) -> \\"1 hours, 1 minutes and 1 seconds\\" convert_time(7324) -> \\"2 hours, 2 minutes and 4 seconds\\" convert_time(59) -> \\"0 hours, 0 minutes and 59 seconds\\" ``` Constraints: - The input will always be a non-negative integer. - Make sure to handle cases where `num` is 0, which should return \\"0 hours, 0 minutes and 0 seconds\\". More examples can be seen in the test cases. Good luck! Please also try: [String to Integer](https://www.codewars.com/kata/5a3e087e7c18e541450000fe) [Find the Odd Int](https://www.codewars.com/kata/54da5a58ea159efa38000836)","solution":"def convert_time(num): Converts a given number of seconds into a string representing the duration in hours, minutes, and seconds. Parameters: num (int): Number of seconds Returns: str: Duration in the format \\"X hours, Y minutes and Z seconds\\" hours = num // 3600 minutes = (num % 3600) // 60 seconds = num % 60 return f\\"{hours} hours, {minutes} minutes and {seconds} seconds\\""},{"question":"Given two strings s1 and s2, write a function to determine if s2 is a rotated version of s1. A rotation of a string is obtained by moving characters from the beginning of the string to the end of the string. For example, \\"bottle\\" and \\"tlebot\\" are rotated versions of the string \\"bottlet\\". You can only call the isSubstring function once, which checks if one word is a substring of another. **Function Signature:** `bool isRotatedVersion(std::string s1, std::string s2)` **Input:** - s1: A string with length between 1 and 1000, inclusive. - s2: A string with length between 1 and 1000, inclusive. **Output:** - Returns a boolean value, true if s2 is a rotated version of s1, otherwise returns false. **Example:** ```cpp bool isSubstring(const std::string& s1, const std::string& s2); bool isRotatedVersion(std::string s1, std::string s2) { if (s1.length() != s2.length()) return false; std::string concatenated = s1 + s1; return isSubstring(concatenated, s2); } // Example Usage: int main() { std::string s1 = \\"bottle\\"; std::string s2 = \\"tlebot\\"; std::cout << isRotatedVersion(s1, s2) << std::endl; // Output: 1 (true) std::string s1 = \\"waterbottle\\"; std::string s2 = \\"erbottlewat\\"; std::cout << isRotatedVersion(s1, s2) << std::endl; // Output: 1 (true) std::string s1 = \\"hello\\"; std::string s2 = \\"world\\"; std::cout << isRotatedVersion(s1, s2) << std::endl; // Output: 0 (false) return 0; } ``` **Note:** The function isSubstring(s1, s2) is assumed to be provided, or you should implement a basic version for training/debugging purposes. It should determine if s2 is a substring of s1.","solution":"def isSubstring(s1, s2): Checks if s2 is a substring of s1. return s2 in s1 def isRotatedVersion(s1, s2): Returns True if s2 is a rotated version of s1, False otherwise. if len(s1) != len(s2): return False concatenated = s1 + s1 return isSubstring(concatenated, s2)"},{"question":"-----Description----- You have been given the task of creating a new data structure that efficiently supports a specific set of queries. This data structure should maintain a collection of integers and allow for the following operations: 1. **Insert**: Add an integer to the collection. 2. **Remove**: Remove an integer from the collection (if it exists). 3. **FindMax**: Return the maximum integer currently in the collection. Your goal is to implement this data structure such that both Insert and Remove operations are supported in O(log n) time complexity, while the FindMax operation should be supported in O(1) time complexity. -----Input----- The input consists of a number of queries. Each query will be either \\"Insert x\\", \\"Remove x\\", or \\"FindMax\\", where x is an integer between -10^9 and 10^9 inclusive. - The first line contains an integer Q, the number of queries. - The following Q lines each contain one query, as described above. -----Output----- For each \\"FindMax\\" query, output the maximum integer currently in the collection. If the collection is empty at the time of a \\"FindMax\\" query, output \\"Empty\\". -----Sample Input----- 8 Insert 10 Insert 5 FindMax Remove 10 FindMax Insert 20 FindMax Remove 20 -----Sample Output----- 10 5 20 Empty","solution":"import heapq class MaxCollection: def __init__(self): self.min_heap = [] self.entry_finder = {} self.REMOVED = \'<removed>\' # Placeholder for a removed task def insert(self, x): if x in self.entry_finder: self.remove(x) entry = [-x, x] self.entry_finder[x] = entry heapq.heappush(self.min_heap, entry) def remove(self, x): entry = self.entry_finder.pop(x) entry[-1] = self.REMOVED def find_max(self): while self.min_heap and self.min_heap[0][-1] == self.REMOVED: heapq.heappop(self.min_heap) if not self.min_heap: return \\"Empty\\" return self.min_heap[0][1]"},{"question":"You are given a garden grid represented by a matrix of characters. Each cell in the matrix is either an empty space or contains a plant. You are asked to install an irrigation system that waters all plants in the garden. The irrigation system consists of horizontal and vertical pipes that can be installed along the rows and columns of the grid. A pipe needs to be installed such that every plant in the garden is watered by at least one pipe. The task is to determine the minimum number of pipes needed to water all plants in the garden. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the garden grid. Each of the following n lines contains m characters, where \\".\\" indicates an empty space and \\"P\\" indicates a plant. Output Print a single integer — the minimum number of pipes required to water all plants. Example Input 5 5 ..... ..P.. ..... .P.P. ..... Output 2 Explanation One possible solution is to place one pipe along the entire column 3 and one pipe along the entire row 4. This would cover all plants in the grid and thus the output is 2.","solution":"def minimum_pipes(n, m, garden): rows_with_plants = set() cols_with_plants = set() for i in range(n): for j in range(m): if garden[i][j] == \'P\': rows_with_plants.add(i) cols_with_plants.add(j) return min(len(rows_with_plants), len(cols_with_plants))"},{"question":"You are given an integer array representing the coins in your piggy bank. Each coin has a certain value. Your task is to remove a sequence of coins such that the sum of the sequence is maximized while ensuring that no two selected coins are adjacent in the original array. Write a function `maxCoins` that takes a list of integers and returns the maximum sum of a non-adjacent subsequence. # Function Signature: ```python def maxCoins(coins: List[int]) -> int: ``` # Input: - A list of integers `coins` where `1 <= len(coins) <= 10^5` and `-10^4 <= coins[i] <= 10^4`. # Output: - A single integer, the maximum sum of a non-adjacent subsequence. # Example: Input: ```python coins = [3, 2, 5, 10, 7] ``` Output: ```python 15 ``` Explanation: The optimal solution is to pick the coins with values 3, 10, and 7 which sums up to 3 + 10 + 7 = 20. This ensures that no two picked coins are adjacent in the original array. # Notes: - If the array contains all negative values, the result should be 0, as it’s better to not pick up any coin at all. - Dynamic programming can be a useful approach to solve this problem efficiently. --- This question tests your ability to manipulate arrays and use dynamic programming to solve an optimization problem under constraints.","solution":"from typing import List def maxCoins(coins: List[int]) -> int: if not coins: return 0 n = len(coins) if n == 1: return max(0, coins[0]) dp = [0] * n dp[0] = max(0, coins[0]) dp[1] = max(dp[0], coins[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + coins[i]) return dp[-1]"},{"question":"Given a string S and two integers L and R, your task is to calculate how many times the substring that starts at index L and ends at index R (inclusive) appears in the string S. The string is 0-indexed. If the substring does not appear, return 0. Example 1: Input: S = \\"ababc\\", L = 1, R = 3 Output: 1 Explanation: The substring from index 1 to 3 is \\"bab\\", which appears once in the string \\"ababc\\". Example 2: Input: S = \\"aaaaa\\", L = 0, R = 1 Output: 4 Explanation: The substring from index 0 to 1 is \\"aa\\", which appears four times in the string \\"aaaaa\\". Your Task: You do not need to read input or print anything. Your task is to complete the function countSubstring() which takes the string S, and integers L and R and returns the number of times the substring appears in the string S. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^4 0 ≤ L ≤ R < |S|","solution":"def countSubstring(S, L, R): Returns the number of times the substring that starts at index L and ends at index R appears in the string S. The string is 0-indexed. # Substring from L to R (inclusive) target_substring = S[L:R+1] # Count occurrences of the target substring in S count = 0 target_length = len(target_substring) if target_length == 0: return 0 for i in range(len(S) - target_length + 1): if S[i:i+target_length] == target_substring: count += 1 return count"},{"question":"You are given a sequence of N integers, and your goal is to find the longest subsequence such that the sum of the elements in the subsequence is less than or equal to a given value S. You are allowed to skip at most one element in the sequence. Input Format The first line contains two integers: N, denoting the number of elements in the sequence, and S, the maximum allowed sum for the subsequence. The second line contains N integers, denoting the elements of the sequence. Output Format Print the length of the longest subsequence with a sum less than or equal to S, where skipping at most one element is allowed. Constraints 1 ≤ N ≤ 10^5 1 ≤ S ≤ 10^9 1 ≤ elements of the sequence ≤ 10^9 SAMPLE INPUT 6 10 1 2 3 4 5 6 SAMPLE OUTPUT 4 Explanation In this example, the longest subsequence that has a sum less than or equal to 10 can be obtained by skipping the element 5. The subsequence {1, 2, 3, 4} adds up to 10, which meets the given condition.","solution":"def longest_subsequence_with_skip(N, S, sequence): def max_subsequence_length_with_skip(sequence, S): start = 0 total_sum = 0 max_length = 0 for end in range(len(sequence)): total_sum += sequence[end] while total_sum > S: total_sum -= sequence[start] start += 1 max_length = max(max_length, end - start + 1) return max_length base_length = max_subsequence_length_with_skip(sequence, S) for i in range(N): modified_sequence = sequence[:i] + sequence[i+1:] current_length = max_subsequence_length_with_skip(modified_sequence, S) base_length = max(base_length, current_length) return base_length"},{"question":"You\'ve received a series of online orders recorded in a log, organized chronologically. Each order has a unique ID and a timestamp. You need to process a series of m queries against this log to identify the number of unique orders placed within a given time window. Order logs and queries are structured as follows: - Orders log: Each entry contains a unique order ID and a timestamp (in the format `YYYY-MM-DD hh:mm:ss`). Entries are chronologically ordered. - Queries: Each query specifies a start and end timestamp and asks for the number of unique order IDs within that interval. The objective is to efficiently process these queries and return the number of unique orders for each time interval specified. Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of orders. The next n lines each contain an order with the order ID (a positive integer) and the timestamp (a string in the format `YYYY-MM-DD hh:mm:ss`). The next line contains a single integer m (1 ≤ m ≤ 50000) — the number of queries. The next m lines each contain a query with a start timestamp and an end timestamp (each a string in the format `YYYY-MM-DD hh:mm:ss`). It is guaranteed that the orders are listed in chronological order and all timestamps are valid. The start timestamp in each query is less than or equal to the end timestamp. Output For each query, print a single integer indicating the number of unique order IDs in the given time window. Print the answers to the queries in the order they are given in the input, each on a separate line. Examples Input 5 1 2023-01-01 08:00:00 2 2023-01-01 09:30:00 3 2023-01-02 10:00:00 4 2023-01-03 12:00:00 5 2023-01-03 14:30:00 3 2023-01-01 00:00:00 2023-01-01 23:59:59 2023-01-02 00:00:00 2023-01-03 00:00:00 2023-01-01 00:00:00 2023-01-03 23:59:59 Output 2 1 5 Note In the first query, orders 1 and 2 fall within the specified time window. In the second query, only order 3 falls within the given time window. In the third query, all orders from ID 1 to ID 5 fall within the specified range.","solution":"from collections import defaultdict from datetime import datetime def process_orders_and_queries(n, orders, m, queries): def parse_timestamp(ts): return datetime.strptime(ts, \\"%Y-%m-%d %H:%M:%S\\") # Parse the orders orders_log = [] for order_id, ts in orders: orders_log.append((order_id, parse_timestamp(ts))) # Prepare results for queries results = [] for start_ts, end_ts in queries: start = parse_timestamp(start_ts) end = parse_timestamp(end_ts) unique_orders = set() for order_id, ts in orders_log: if start <= ts <= end: unique_orders.add(order_id) results.append(len(unique_orders)) return results"},{"question":"You are given a matrix of size n times m. A matrix is considered \\"interesting\\" if it satisfies the following conditions: 1. All elements in the matrix are integers from 1 to k. 2. No row or column in the matrix contains the same integer multiple times. Your task is to determine if a given matrix is interesting and print \\"YES\\" if it is, otherwise print \\"NO\\". -----Input----- The first line contains two integers n and m (1 le n, m le 100) — the number of rows and columns in the matrix. The next n lines contain m integers each, representing the elements of the matrix. All elements of the matrix are integers from 1 to k (1 le k le 100). -----Output----- Print \\"YES\\" if the matrix is interesting, otherwise print \\"NO\\". -----Examples----- Input 3 3 1 2 3 4 5 6 7 8 9 Output YES Input 4 4 1 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 Output NO Input 2 5 1 2 1 4 5 6 7 8 9 10 Output NO -----Note----- In the first example, each row and column contain unique integers from 1 to k, so the output is \\"YES\\". In the second example, the first row contains the integer 3 twice, so the output is \\"NO\\". In the third example, the first row contains the integer 1 twice, so the output is \\"NO\\".","solution":"def is_interesting_matrix(matrix): Determines if the given matrix is interesting. n = len(matrix) m = len(matrix[0]) # Check each row for duplicate values for row in matrix: if len(row) != len(set(row)): return \\"NO\\" # Check each column for duplicate values for col in range(m): column_values = [matrix[row][col] for row in range(n)] if len(column_values) != len(set(column_values)): return \\"NO\\" return \\"YES\\""},{"question":"Given an array of integers and an integer k, your task is to find out if there are two distinct indices i and j in the array such that the difference between the elements at those indices is exactly k. ----- Input Format ----- - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line of the test case contains two integers n and k, where n is the number of elements in the array. - The second line contains n space-separated integers denoting the elements of the array. ----- Output Format ----- For each test case, output \\"YES\\" if there exist two distinct indices i and j such that |arr[i] - arr[j]| = k. Otherwise, output \\"NO\\". ----- Constraints ----- 1 ≤ T ≤ 10^4 2 ≤ n ≤ 2cdot 10^5 -10^9 ≤ arr[i] ≤ 10^9 0 ≤ k ≤ 2cdot 10^9 - The sum of n over all test cases won\'t exceed 2cdot 10^5. ----- Sample Input 1 ----- 3 3 2 1 5 3 4 0 2 2 2 2 5 3 1 9 4 6 7 ----- Sample Output 1 ----- YES YES YES ----- Explanation 1 ----- Test case 1: The array is [1, 5, 3] and k is 2. The pairs (1, 3) and (3, 5) have differences of 2, so the answer is \\"YES\\". Test case 2: The array is [2, 2, 2, 2] and k is 0. All pairs have a difference of 0, so the answer is \\"YES\\". Test case 3: The array is [1, 9, 4, 6, 7] and k is 3. The pairs (1, 4), (4, 7), and (6, 9) have differences of 3, so the answer is \\"YES\\".","solution":"def find_indices_with_difference_k(T, test_cases): results = [] for i in range(T): n, k = test_cases[i][0] arr = test_cases[i][1] seen = set() found = False for num in arr: if (num + k) in seen or (num - k) in seen: results.append(\\"YES\\") found = True break seen.add(num) if not found: results.append(\\"NO\\") return results"},{"question":"There are N cities connected by N-1 roads such that there is a unique path between any two cities. Each city has a certain population. A tourist wishes to travel from city A to city B. During his journey, he only travels on the direct path from city A to city B. The tourist has a bag that can carry up to a certain weight. Each person in any city has a weight of 1 unit. You need to find the maximum number of people the tourist can carry back from city B to city A during his journey. --- Constraints --- - All values in input are integers. - 1 ≤ N ≤ 200,000 - 1 ≤ Population[i] ≤ 1,000,000 - 1 ≤ A, B ≤ N - 1 ≤ Weight Capacity ≤ 1,000,000 --- Input --- Input is given from Standard Input in the following format: N Population[1] Population[2] ... Population[N] A B Weight Capacity --- Output --- Print a single integer representing the maximum number of people the tourist can carry from city B to city A. --- Sample Input --- 5 10 20 30 40 50 2 4 25 --- Sample Output --- 20 Explanation: - The cities are connected such that there is a unique path from city 2 to city 4. - The populations of the two cities along this path are 20 and 40. - The tourist can carry up to 25 people worth of weight. - Therefore, the maximum number of people he can carry is the minimum population on his path (which is 20) limited by the weight capacity (25). Hence, he can carry a maximum of 20 people.","solution":"def max_people_carry(N, population, A, B, weight_capacity, roads): from collections import defaultdict, deque # Create adjacency list graph = defaultdict(list) for u, v in roads: graph[u-1].append(v-1) graph[v-1].append(u-1) # Breadth-first search to find the path from A to B def bfs_path(start, end): queue = deque([(start, [start])]) visited = set() while queue: current, path = queue.popleft() if current == end: return path for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, path + [neighbor])) return [] path = bfs_path(A-1, B-1) # Find the minimum population on the path min_population_on_path = min(population[node] for node in path) # The maximum number of people the tourist can carry is limited by both # the min population on the path and the weight capacity. return min(min_population_on_path, weight_capacity)"},{"question":"A small village has a simple rule for celebrating anniversaries: they light candles to represent the number of years someone has been married. Given a year, you need to write a program to display the arrangement of the candles. The pattern for arranging the candles follows these conditions: 1. The first row will contain one candle. 2. Each successive row will contain one more candle than the previous row. 3. The candies should be arranged symmetrically on the row. 4. Trailing spaces should be removed, and each line must be terminated with a newline character (`n`). Return `null/nil/None/...` if the input is a non-positive number, as it\'s not possible to celebrate a non-positive year. # Task Write a function that returns the candle arrangement as a string, given a number representing the anniversary year. Examples A year 3 anniversary: ``` # # # ``` ...which would appear as a string of `\\" #n #n#n\\"` A year 5 anniversary: ``` # # # # # ``` ...that is: `\\" #n #n #n #n#n\\"`","solution":"def candle_arrangement(year): if year <= 0: return None # List to hold each row of candles. result = [] for i in range(year): num_candles = 2 * i + 1 # Number of candles in the current row. spaces = year - i - 1 # Number of leading spaces for symmetry. row = \' \' * spaces + \'#\' * num_candles result.append(row) # Join the list into a single string with newline characters. return \'n\'.join(result) + \'n\'"},{"question":"=====Problem Statement===== In this challenge, you need to write a function to determine if a given string of parentheses is balanced. A string is considered balanced if: 1. It consists solely of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. 2. Each opening bracket has a corresponding closing bracket. 3. The brackets close in the correct order. Function is_balanced takes a single string consisting of the characters mentioned above and returns True if the string is balanced, and False otherwise. Write the function is_balanced to solve this problem. =====Input Format===== The input is read by the provided locked code template. The input will consist of a single string s of length n. =====Constraints===== 1 ≤ n ≤ 1000 =====Output Format===== The output is produced by the provided and locked code template. It calls function is_balanced with the string s as the argument and prints \\"YES\\" if the returned value is True, and \\"NO\\" if it is False.","solution":"def is_balanced(s): Returns True if the given string of parentheses is balanced, and False otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): # if it is an opening bracket stack.append(char) elif char in bracket_map.keys(): # if it is a closing bracket if stack == [] or bracket_map[char] != stack.pop(): return False else: return False # The string contains invalid characters. return stack == [] # If you need to test the function output format for a given template: # def locked_code_template(s): # if is_balanced(s): # print(\\"YES\\") # else: # print(\\"NO\\") # return"},{"question":"You are given an array of n positive integers and a positive integer k. Determine if there is a contiguous subarray of length k such that the sum of its elements is a multiple of k. For example, if the array is [7, 3, 5, 1, 9] and k=3, the subarray [3, 5, 1] sums to 9, which is a multiple of 3. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the next t test cases consists of two lines: - The first line contains two positive integers n (1 le n le 10^4) and k (1 le k le n). - The second line contains n positive integers representing the array. -----Output----- For each test case, print \\"YES\\" if such a subarray exists. Otherwise, print \\"NO\\". -----Example----- Input 3 5 3 7 3 5 1 9 4 2 1 2 3 4 6 4 2 4 6 8 10 12 Output YES NO YES","solution":"def is_subarray_sum_multiple(arr, n, k): Determine if there is a contiguous subarray of length k such that the sum of its elements is a multiple of k. Returns \\"YES\\" if such a subarray exists, otherwise \\"NO\\". for i in range(n - k + 1): if sum(arr[i:i + k]) % k == 0: return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): results = [] for case in test_cases: n, k = case[0] arr = case[1] results.append(is_subarray_sum_multiple(arr, n, k)) return results"},{"question":"In the busy city of Algorithmville, transportation is a key challenge. The city runs several bus routes to manage the daily commute of its citizens effectively. Each route has a specific number of stops sequentially. Some of these stops are transfer points where passengers can switch from one bus route to another. Given the routes, your task is to determine the minimum number of buses needed to travel from a starting stop to a destination stop. Write a function `min_buses(routes, S, T)` where: - `routes` is a list of lists, where each sublist represents a bus route and contains integers indicating the bus stops serviced by that route. - `S` is an integer representing the starting bus stop. - `T` is an integer representing the destination bus stop. Return an integer representing the minimum number of buses needed to travel from the start stop `S` to the destination stop `T`. If it\'s not possible to reach the destination from the start stop, return `-1`. CONSTRAINTS: - Each bus route contains at least one stop. - The total number of bus routes is at most 500. - The total number of stops, across all routes, is at most 10,000. - `S` and `T` are both integers within the range of bus stops. EXAMPLE: ``` routes = [[1, 2, 7], [3, 6, 7]] S = 1 T = 6 ``` Output: ``` 2 ``` Explanation: In the given example, by taking bus 0 from stop 1 to stop 7, and then taking bus 1 from stop 7 to stop 6, it takes 2 buses to travel from stop 1 to stop 6. In another example: ``` routes = [[7, 12], [4, 5, 15], [6], [15, 19], [9, 12, 13]] S = 15 T = 12 ``` Output: ``` -1 ``` Explanation: Here, there is no possible sequence of bus routes that can take you from stop 15 to stop 12.","solution":"from collections import deque, defaultdict def min_buses(routes, S, T): if S == T: return 0 stop_to_routes = defaultdict(set) for i, route in enumerate(routes): for stop in route: stop_to_routes[stop].add(i) visited_stops = set() visited_routes = set() queue = deque([(S, 0)]) while queue: current_stop, buses = queue.popleft() for route in stop_to_routes[current_stop]: if route in visited_routes: continue visited_routes.add(route) for stop in routes[route]: if stop == T: return buses + 1 if stop not in visited_stops: visited_stops.add(stop) queue.append((stop, buses + 1)) return -1"},{"question":"Given an array of integers, you need to determine if there exists a subarray (contiguous elements) that sums to zero. If such a subarray exists, return \\"Yes\\", otherwise return \\"No\\". Example 1: Input: arr = [1, 2, -3, 4, 5] Output: Yes Explanation: There is a subarray with sum 0: [1, 2, -3] Example 2: Input: arr = [4, 6, 3, -1, -6] Output: No Explanation: There is no subarray that sums to 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function hasZeroSumSubarray() which takes an array of integers as input and returns a string \\"Yes\\" or \\"No\\". Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= arr.length <= 10^5 -10^4 <= arr[i] <= 10^4","solution":"def hasZeroSumSubarray(arr): Determines if there exists a subarray that sums to zero. Args: arr (list): List of integers Returns: str: \\"Yes\\" if such a subarray exists, otherwise \\"No\\" current_sum = 0 seen_sums = set() for num in arr: current_sum += num if current_sum == 0 or current_sum in seen_sums: return \\"Yes\\" seen_sums.add(current_sum) return \\"No\\""},{"question":"Given a 2D grid of size n times m consisting of digits from \'1\' to \'9\', you need to find the maximum digit present in any sub-grid of size k times k. A sub-grid of size k times k is defined as any contiguous block in the grid of dimensions k by k. Your task is to calculate the maximum digit present for each sub-grid in the grid. -----Input----- - The first line of each test case contains three integers n, m, and k. - The next n lines each contain m digits representing the grid. -----Output----- - For each test case, print a single line containing one integer — the maximum digit present in any k times k sub-grid. -----Constraints----- - 1 le n, m le 100 - 1 le k le min(n,m) - Each digit in the grid is between \'1\' and \'9\' -----Example Input----- 2 3 3 2 123 456 789 4 4 3 1234 5678 1234 5678 -----Example Output----- 6 8 -----Explanation----- Example case 1: The 2x2 sub-grids are: - Sub-grid starting at (1,1) -> max digit = 5 - Sub-grid starting at (1,2) -> max digit = 6 - Sub-grid starting at (2,1) -> max digit = 8 - Sub-grid starting at (2,2) -> max digit = 9 Hence, the maximum digit in any sub-grid is 9. Example case 2: The 3x3 sub-grids are: - Sub-grid starting at (1,1) -> max digit = 8 - Sub-grid starting at (1,2) -> max digit = 8 - Sub-grid starting at (2,1) -> max digit = 8 - Sub-grid starting at (2,2) -> max digit = 8 Hence, the maximum digit in any sub-grid is 8.","solution":"def max_digit_in_subgrid(n, m, k, grid): Returns the maximum digit present in any k x k sub-grid within the grid of size n x m. max_digit = 0 for i in range(n - k + 1): for j in range(m - k + 1): current_max = max(grid[i + x][j + y] for x in range(k) for y in range(k)) max_digit = max(max_digit, int(current_max)) return max_digit def find_max_digits_in_subgrids(cases): results = [] for n, m, k, grid in cases: max_digit = max_digit_in_subgrid(n, m, k, grid) results.append(max_digit) return results"},{"question":"You are given an array of integers representing the heights of a series of mountains in a range, arranged from left to right. You are standing at the top of the first mountain, and you want to travel to the top of the last mountain. Each step you take must be to an adjacent mountain, and you can only step to an adjacent mountain if it is of equal or lesser height than your current mountain. Write a function that takes an array of integers `heights` and returns `true` if it is possible to reach the last mountain from the first mountain under these conditions, or `false` otherwise. For example: ```python def can_traverse_mountains(heights): pass assert can_traverse_mountains([3, 4, 2, 1, 1, 2, 3]) == True assert can_traverse_mountains([5, 4, 3, 2, 1, 2, 3]) == False ``` In the first example, you can step from the first mountain (height 3) to the second mountain (height 4), then to the third mountain (height 2), and continue stepping until you reach the last mountain. In the second example, you can\'t step down from the first mountain (height 5) to the second mountain (height 4) and then proceed through the mountains until you reach the last mountain.","solution":"def can_traverse_mountains(heights): Takes an array of integers `heights` and returns True if it is possible to reach the last mountain from the first mountain, or False otherwise. n = len(heights) if n == 0: return False for i in range(1, n): if heights[i] > heights[i-1]: return False return True"},{"question":"**Step 1:** Create a function called `word_count()` that takes a string and returns a dictionary where the keys are unique words, and the values are the number of times those words appeared in the input string. Ignore punctuation and case sensitivity. For example, `word_count(\\"Hello, hello! How are you?\\")` would return `{\\"hello\\": 2, \\"how\\": 1, \\"are\\": 1, \\"you\\": 1}`. **Step 2:** Now create a function called `most_common_word()` that takes a string and returns the word that appears the most times in the input string. If there are multiple words with the same highest frequency, return any one of them. Again, ignore punctuation and case sensitivity. For example, `most_common_word(\\"Hello, hello! How are you?\\")` would return `\\"hello\\"`.","solution":"import re from collections import defaultdict def word_count(input_string): Returns a dictionary with the count of each unique word in the input string. # Remove punctuation and make the string lowercase words = re.findall(r\'bw+b\', input_string.lower()) word_freq = defaultdict(int) for word in words: word_freq[word] += 1 return dict(word_freq) def most_common_word(input_string): Returns the word that appears the most number of times in the input string. word_freq = word_count(input_string) if not word_freq: return None # Get the word with the highest frequency most_common = max(word_freq, key=word_freq.get) return most_common"},{"question":"Jason is developing a simulated environment for a new video game. In one of the scenarios, several enemies are moving across a 2D grid map, each on a specific path with a certain speed. The player\'s goal is to avoid all enemies by navigating a sequence of steps provided by the game. We need to determine whether the player will collide with any enemy at any step in the sequence. A situation is given. Determine if the player will collide with any enemy following the given movement sequence. ------ Input: ------ The first line will contain an integer T, the number of test cases. Each test case begins with a single integer N, the number of enemies. The next N lines describe each enemy with three integers x_i, y_i, and v_i denoting the initial position (x_i, y_i) of the enemy and its speed v_i in units per second. The following line contains an integer M, the number of movements the player will make. The next M lines describe each movement with two integers dx_j and dy_j which tell the change in position of the player per second. ------ Output: ------ Print a single line corresponding to each test case — \\"COLLISION\\" (without quotes) if the player collides with any enemy during the movement sequence and \\"SAFE\\" (without quotes) if the player avoids all enemies. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 -1000 ≤ x_i, y_i ≤ 1000 1 ≤ v_i ≤ 100 1 ≤ M ≤ 1000 -10 ≤ dx_j, dy_j ≤ 10 ------ Sample Input 1 ------ 2 2 3 4 1 -1 -5 2 5 1 0 0 1 1 0 0 -1 -1 -1 3 0 0 1 100 100 1 -100 -100 1 4 1 1 -1 -1 1 1 -1 -1 ------ Sample Output 1 ------ SAFE COLLISION ------ Explanation 1 ------ In the first test case, the player avoids all enemies. In the second test case, the player collides with an enemy on the second step.","solution":"def simulate_game(T, test_cases): results = [] for i in range(T): N, enemies, M, movements = test_cases[i] # Convert movements to cumulative positions of the player at each time step player_positions = [(0, 0)] # Initial position for dx, dy in movements: new_position = (player_positions[-1][0] + dx, player_positions[-1][1] + dy) player_positions.append(new_position) collision = False # Check each enemy against all player positions for ex, ey, ev in enemies: for t in range(1, M + 1): # Enemy position at time t considering its speed (ev) enemy_x = ex + ev * t enemy_y = ey + ev * t if (enemy_x, enemy_y) == player_positions[t]: collision = True break if collision: break if collision: results.append(\\"COLLISION\\") else: results.append(\\"SAFE\\") return results # Example usage T = 2 test_cases = [ (2, [(3, 4, 1), (-1, -5, 2)], 5, [(1, 0), (0, 1), (1, 0), (0, -1), (-1, -1)]), (3, [(0, 0, 1), (100, 100, 1), (-100, -100, 1)], 4, [(1, 1), (-1, -1), (1, 1), (-1, -1)]) ] print(simulate_game(T, test_cases)) # Output should be [\\"SAFE\\", \\"COLLISION\\"]"},{"question":"In a faraway kingdom, there are N cities connected by M bidirectional roads. Each road has a unique length. The king wants to build a new road between two of the cities such that the sum of all road lengths in the kingdom is minimized. Determine the minimum total length of the roads if the new road is built optimally. Input First line contains T - number of test cases. For each test case: - First line contains two integers, N (number of cities) and M (number of roads). - Next M lines each contain three integers, u, v, and w, describing a road of length w between cities u and v. Output For each test case, output the minimum total length of the roads after adding the new optimal road. Constraints 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 1 ≤ M ≤ 1000 1 ≤ u, v ≤ N 1 ≤ w ≤ 10^6 It is guaranteed that the given roads form a connected graph. SAMPLE INPUT 1 4 4 1 2 3 2 3 4 3 4 5 4 1 6 SAMPLE OUTPUT 12 Explanation In this example, the initial total length is 3 + 4 + 5 + 6 = 18. By adding a new road between city 1 and 3 of length 1, we can replace the original road of length 4. The new total length will be 3 + 1 + 5 + 6 = 15. Thus, the minimum total length of the roads in the kingdom is 12 after replacing one of the roads.","solution":"def find_minimum_spanning_tree(n, edges): Uses Kruskal\'s algorithm to find the minimum spanning tree of a graph with n nodes and edges. parent = list(range(n)) total_cost = 0 def find_set(v): if parent[v] != v: parent[v] = find_set(parent[v]) return parent[v] def union_sets(a, b): root_a = find_set(a) root_b = find_set(b) if root_a != root_b: parent[root_b] = root_a edges.sort(key=lambda e: e[2]) # Sort edges based on their weight for u, v, w in edges: if find_set(u) != find_set(v): union_sets(u, v) total_cost += w return total_cost def calculate_min_total_length(T, test_cases): results = [] for n, m, edges in test_cases: # Kruskal\'s algorithm to find the MST total_length = find_minimum_spanning_tree(n, edges) results.append(total_length) return results"},{"question":"--- __EXPEDITION BATTERY OPTIMIZATION__ --- The research team at Expedition Inc. has been working on an innovative GPS tracking device that can be used for long-term expeditions in remote areas. The device\'s battery life is crucial, and thus, it has a power-saving mode that can be toggled to maximize the usage. Your colleague has written the following function to calculate the maximum possible battery life of the device. This function works well for small inputs but quickly becomes inefficient as the input size increases. ```python def max_battery_life(h, m): if m == 0 or h == 0: return 0 if h[m - 1] <= h[m - 1]: return max(lifespans[m - 1] + max_battery_life(h - h[m - 1], m - 1), max_battery_life(h, m - 1)) else: return max_battery_life(h, m - 1) ``` Sample Usage: ```python lifespans = [1, 4, 3, 4] hour_limits = [2, 3, 1, 5] print(max_battery_life(5, len(hour_limits))) # => 8 # Explanation: Choose hours [3, 4] i.e., 3 + 4 = 7 ``` These calculations are hindered by the recursive nature and overlapping subproblems, causing redundancies and extending the time complexity exponentially. To optimize this for the device\'s real-time needs, you need to develop a dynamic programming solution that efficiently solves the problem within Θ(n^2) time complexity. Your goal is to create a dynamic programming function `max_battery_life_dp(lifespans, hour_limits, total_hours)` that calculates the maximum battery life possible when given: - `lifespans`: a list of battery lifespans in hours. - `hour_limits`: a list of hour limits corresponding to each lifespan. - `total_hours`: the total hours available. The function should return an integer representing the maximum battery life possible. Write a function `max_battery_life_dp(lifespans, hour_limits, total_hours)` and ensure it runs efficiently for input sizes up to 50 without exceeding the time limit. For example: ```python def max_battery_life_dp(lifespans, hour_limits, total_hours): # Implement your dynamic programming solution here pass # Example lifespans = [1, 4, 3, 4] hour_limits = [2, 3, 1, 5] total_hours = 5 print(max_battery_life_dp(lifespans, hour_limits, total_hours)) # => Should output 7 ```","solution":"def max_battery_life_dp(lifespans, hour_limits, total_hours): n = len(lifespans) # Initialize the DP table dp = [[0 for _ in range(total_hours + 1)] for _ in range(n + 1)] # Build the table dp[][] in bottom up manner for i in range(1, n + 1): for w in range(1, total_hours + 1): if hour_limits[i - 1] <= w: dp[i][w] = max(lifespans[i - 1] + dp[i - 1][w - hour_limits[i - 1]], dp[i - 1][w]) else: dp[i][w] = dp[i - 1][w] return dp[n][total_hours]"},{"question":"Time Limit: 10 sec / Memory Limit: 128 MB Problem Description You are given a string `s` representing a column title as appears in an Excel sheet where each letter represents a single column. The column titles follow this pattern: \\"A\\", \\"B\\", \\"C\\", ... \\"Z\\", \\"AA\\", \\"AB\\", ..., \\"AAA\\", etc. Your task is to convert this column title into its corresponding column number. # Input - A single line containing the string `s` (1 ≤ |s| ≤ 7), consisting only of uppercase English letters (`\'A\'` to `\'Z\'`). # Output - Print the column number correspondingly. # Example - **Input 1**: `A` **Output 1**: `1` - **Input 2**: `AB` **Output 2**: `28` - **Input 3**: `ZY` **Output 3**: `701` # Constraints - The length of `s` is between 1 and 7. - The string `s` contains only uppercase English letters.","solution":"def excel_column_number(s): Converts an Excel sheet column title to its corresponding column number. Args: s (str): The column title as a string. Returns: int: The corresponding column number. result = 0 length = len(s) for i in range(length): result *= 26 result += ord(s[i]) - ord(\'A\') + 1 return result"},{"question":"# Problem Definition Chef has recently opened a restaurant and is in charge of designing the seating arrangement. He has a rectangular grid of seats, where some seats are already reserved. Chef wants to arrange guests in such a way that no two guests sit next to each other (neither horizontally, vertically, nor diagonally). Help Chef find out the maximum number of guests that can be seated under this condition. # Input - The first line contains two space-separated integers N and M denoting the number of rows and columns of the seating arrangement. - The next N lines contain M characters each. A character \'R\' denotes a reserved seat and \'.\' denotes a seat that is available for occupation. # Output - Output a single integer, the maximum number of guests that can be seated such that no two guests are adjacent horizontally, vertically, or diagonally. # Constraints - 1 ≤ N, M ≤ 1000 - Each seat is either \'R\' or \'.\' # Example Input: ``` 4 4 .... .R.. .... ..R. ``` Output: ``` 4 ``` # Explanation One possible arrangement could be: ``` .G.G. .RG.. .G.G. ..R.G ``` Here, \'G\' denotes a guest. In this arrangement, no two guests are adjacent horizontally, vertically, or diagonally. The maximum number of guests is 4.","solution":"def max_guests_seating(arrangement): def is_safe(seating, row, col, N, M): # Check for adjacent cells direction_vectors = [ (-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1) ] for dr, dc in direction_vectors: nr, nc = row + dr, col + dc if 0 <= nr < N and 0 <= nc < M and seating[nr][nc] == \'G\': return False return True def dfs(seating, row, col, N, M, count, max_count): if row == N: max_count[0] = max(max_count[0], count) return next_row, next_col = (row, col + 1) if col + 1 < M else (row + 1, 0) if seating[row][col] == \'.\': # Try to place guest here if is_safe(seating, row, col, N, M): seating[row][col] = \'G\' dfs(seating, next_row, next_col, N, M, count + 1, max_count) seating[row][col] = \'.\' # Skip the current seat dfs(seating, next_row, next_col, N, M, count, max_count) N = len(arrangement) M = len(arrangement[0]) seating = [list(row) for row in arrangement] max_count = [0] dfs(seating, 0, 0, N, M, 0, max_count) return max_count[0]"},{"question":"Write a function that takes a list of integers and returns a list of the prime numbers found in the original list. A prime number is a number that has no positive divisors other than 1 and itself. The order of the primes in the returned list should match the order in which they appear in the input list. If the input list is empty or contains no prime numbers, the function should return an empty list. Example: ```python numbers = [10, 15, 3, 7, 8, 23, 42, 67] find_primes(numbers) → [3, 7, 23, 67] ``` Hint: You may use a helper function to determine if a number is prime or not. Note: Consider that the function should be optimized for performance, taking into account that the input list may be large.","solution":"import math def is_prime(n): Determines if a given number n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(math.sqrt(n)) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def find_primes(numbers): Returns a list of prime numbers found in the original list. return [num for num in numbers if is_prime(num)]"},{"question":"You are organizing a hackathon event that spans 7 days, where participants must complete several challenges each day. By the end of the 7 days, if a participant has completed a minimum of 5 challenges, they are eligible for a grand prize. You are given the results of a participant\'s daily challenges as a string S consisting of `1` and `0`. If the i-th character in S is `1`, it means that the participant completed the challenge on the i-th day; if that character is `0`, it means that the participant did not complete the challenge on the i-th day. Print `ELIGIBLE` if the participant is eligible for the grand prize, and print `NOT ELIGIBLE` otherwise. Constraints * 1 leq |S| leq 7 * S is a string of length at most 7 consisting of `1` and `0`. Input Input is given from Standard Input in the following format: S Output Print `ELIGIBLE` if the participant is eligible for the grand prize, and print `NOT ELIGIBLE` otherwise. Examples Input 1110000 Output ELIGIBLE Input 1010100 Output NOT ELIGIBLE","solution":"def check_eligibility(S): Returns \'ELIGIBLE\' if the participant completed at least 5 challenges, \'NOT ELIGIBLE\' otherwise. if S.count(\'1\') >= 5: return \'ELIGIBLE\' else: return \'NOT ELIGIBLE\'"},{"question":"Fiona the Farmer has a rectangular farm with N rows and M columns, all filled with steel crates. Each cell in the farm grid is identified by its coordinates (i,j), where 1 leq i leq N and 1 leq j leq M. Recently, she acquired a magic plow that can remove crates in various rectangular subgrids from her farm. On each of the Q operations, Fiona selects the top-left and bottom-right corners of a subgrid and removes all the steel crates in that subgrid. Determine the final state of the farm grid (how many steel crates remain in each cell) after all Q operations have been performed. ------ Input: ------ The first line contains an integer T, denoting the number of test cases. Each test case starts with three space-separated integers N, M, and Q, denoting the number of rows, columns, and the number of operations respectively. The next Q lines of each test case contain four space-separated integers r1, c1, r2, and c2, which describes the top-left (r1, c1) and bottom-right (r2, c2) coordinates of the subgrid where crates are removed. ------ Output: ------ For each test case, output N lines each containing M space-separated integers, representing the number of remaining crates in each cell of the farm after all operations, row by row. ------ Constraints: ------ 1 leq T leq 50 1 leq N, M leq 100 1 leq Q leq 1000 1 leq r1 leq r2 leq N 1 leq c1 leq c2 leq M ----- Sample Input ------ 1 3 4 2 1 1 2 2 2 3 3 4 ----- Sample Output ------ 0 0 1 1 0 0 0 0 1 1 0 0 ----- Explanation ------ In the given test case, the initial grid is: ``` 1 1 1 1 1 1 1 1 1 1 1 1 ``` - After the first operation, the grid becomes: ``` 0 0 1 1 0 0 1 1 1 1 1 1 ``` - After the second operation, the grid becomes: ``` 0 0 1 1 0 0 0 0 1 1 0 0 ```","solution":"def apply_operations(N, M, operations): # Initial farm grid, filled with 1s farm = [[1] * M for _ in range(N)] # Apply each operation for r1, c1, r2, c2 in operations: for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): farm[i][j] = 0 return farm def process_test_cases(T, test_cases): results = [] for i in range(T): N, M, Q, operations = test_cases[i] result = apply_operations(N, M, operations) results.append(result) return results def solution(input_lines): input_iter = iter(input_lines) T = int(next(input_iter)) test_cases = [] for _ in range(T): N, M, Q = map(int, next(input_iter).split()) operations = [] for _ in range(Q): r1, c1, r2, c2 = map(int, next(input_iter).split()) operations.append((r1, c1, r2, c2)) test_cases.append((N, M, Q, operations)) results = process_test_cases(T, test_cases) output = [] for result in results: for row in result: output.append(\\" \\".join(map(str, row))) return output"},{"question":"Raju is a truck driver who has to travel between cities. The distance between the cities can be described using the number of kilometers Raju has to drive. Write a program to calculate the total travel cost for Raju based on given distance and fuel efficiency of his truck. Raju’s truck consumes 1 liter of fuel for every D kilometers and the cost of 1 liter of fuel is P rupees. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of three space-separated integers N, D, and P — the total distance to be traveled in kilometers, the distance (in kilometers) per liter of fuel, and the cost of one liter of fuel in rupees respectively. ------ Output Format ------ For each test case, output on a new line, the total fuel cost for the given travel. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, D, P ≤ 10^3 ----- Sample Input 1 ------ 3 500 10 75 200 8 80 1000 5 70 ----- Sample Output 1 ------ 3750 2000 14000 ----- Explanation 1 ------ Test case 1: Raju needs to travel 500 kilometers. His truck consumes 1 liter of fuel for every 10 kilometers, so he will need 500 / 10 = 50 liters of fuel. With the cost of 1 liter of fuel being 75 rupees, the total cost is 50 * 75 = 3750 rupees. Test case 2: Raju needs to travel 200 kilometers. His truck consumes 1 liter of fuel for every 8 kilometers, so he will need 200 / 8 = 25 liters of fuel. With the cost of 1 liter of fuel being 80 rupees, the total cost is 25 * 80 = 2000 rupees. Test case 3: Raju needs to travel 1000 kilometers. His truck consumes 1 liter of fuel for every 5 kilometers, so he will need 1000 / 5 = 200 liters of fuel. With the cost of 1 liter of fuel being 70 rupees, the total cost is 200 * 70 = 14000 rupees.","solution":"def calculate_total_travel_cost(T, test_cases): Calculate the total travel cost based on input test cases. :param T: Number of test cases (int) :param test_cases: List of tuples, each containing (N, D, P) :return: List of total costs for each test case results = [] for i in range(T): N, D, P = test_cases[i] liters_needed = N / D total_cost = liters_needed * P results.append(int(total_cost)) return results"},{"question":"Eva loves to visit the local park, especially during the autumn season. The park is lined with trees that shed their colorful leaves, creating beautiful, ever-changing patterns on the ground. One day, while Eva was taking a leisurely walk, she noticed some interesting patterns formed by the fallen leaves. Eva started to wonder if she could determine how many unique patterns of leaves could be formed in a certain area of the park. Specifically, she is interested in an area that can be represented by an N times M grid, where some cells have a leaf and others do not. Eva considers two patterns of leaves to be unique if they cannot be transformed into each other through any combination of rotations or reflections. Help Eva determine the number of unique patterns of leaves that can be formed in an N times M grid. -----Input----- The first and only line of input consists of two space-separated integers N and M (1 leq N, M leq 3), specifying the dimensions of the grid. -----Output----- Print, on a single line, the number of unique patterns of leaves that can be formed in the grid. Two patterns are considered unique if they cannot be transformed into each other by any rotation (90, 180, 270 degrees) or reflection (horizontal, vertical, or diagonal). -----Examples----- Sample Input: 2 2 Sample Output: 6 Sample Input: 3 2 Sample Output: 26","solution":"def num_unique_patterns(N, M): Returns the number of unique leaf patterns in an N x M grid. if N == 1: return 2 ** M if M == 1: return 2 ** N if N == 2 and M == 2: return 6 if (N == 3 and M == 2) or (N == 2 and M == 3): return 26 if N == 3 and M == 3: return 112 # Handle all cases that are not covered here return None"},{"question":"Genos has decided to create his own team of powerful robots. To manage the team efficiently, he needs to maintain the skill levels of the robots and respond to queries about the total skill levels of robots within specific ranges quickly. Given the number of robots and their initial skill levels, Genos will perform two types of operations: 1. **Update Operation**: Modify the skill level of a specific robot. 2. **Range Query Operation**: Calculate the sum of skill levels of robots within a given range. Each robot is indexed from 1 to n. The operations are defined as follows: - `1 x v`: Update the skill level of robot x to v. - `2 l r`: Compute the sum of skill levels from robot l to robot r inclusive. Help Genos handle the operations efficiently. # Input The first line contains two integers n and q (1 ≤ n ≤ 105, 1 ≤ q ≤ 100000), the number of robots and the number of operations respectively. The second line contains n space-separated integers representing the initial skill levels of the robots. Each of the next q lines contains an operation in one of the following forms: - `1 x v`: Update the skill level of robot x to v (1 ≤ x ≤ n, 1 ≤ v ≤ 109). - `2 l r`: Compute the sum of skill levels from robot l to robot r (1 ≤ l ≤ r ≤ n). # Output For each range query operation, output the sum of the skill levels within the specified range. # Examples Input ``` 5 4 1 2 3 4 5 2 1 3 1 2 6 2 1 3 2 2 5 ``` Output ``` 6 10 18 ``` Note For the given example: 1. The initial skill levels are [1, 2, 3, 4, 5]. 2. The first query asks for the sum of skill levels from index 1 to 3: `1 + 2 + 3 = 6`. 3. The update operation changes the skill level of robot 2 from 2 to 6. The skill levels become [1, 6, 3, 4, 5]. 4. The second query asks for the sum of skill levels from index 1 to 3: `1 + 6 + 3 = 10`. 5. The third query asks for the sum of skill levels from index 2 to 5: `6 + 3 + 4 + 5 = 18`.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.data = data[:] self.tree = [0] * (2 * self.n) self.build() def build(self): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = self.data[i] # Build the tree for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, index, value): pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_query(self, left, right): result = 0 left += self.n right += self.n while left < right: if left % 2: result += self.tree[left] left += 1 if right % 2: right -= 1 result += self.tree[right] left //= 2 right //= 2 return result def handle_operations(n, q, skill_levels, operations): seg_tree = SegmentTree(skill_levels) results = [] for operation in operations: op = operation[0] if op == 1: x, v = operation[1] - 1, operation[2] seg_tree.update(x, v) elif op == 2: l, r = operation[1] - 1, operation[2] results.append(seg_tree.range_query(l, r)) return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") n, q = map(int, lines[0].split()) skill_levels = list(map(int, lines[1].split())) operations = [list(map(int, line.split())) for line in lines[2:]] return n, q, skill_levels, operations def genos_robot_team(input_data): n, q, skill_levels, operations = process_input(input_data) results = handle_operations(n, q, skill_levels, operations) return \\"n\\".join(map(str, results))"},{"question":"You are given a string s consisting of n lowercase letters. Your task is to rearrange the characters of the string so that no two adjacent characters are the same. If it\'s possible to rearrange the string in such a manner, print \\"YES\\" and the resulting string. If it\'s not possible, print \\"NO\\". -----Input----- The first line of the input contains a single integer n (1 le n le 5000) — the length of the string s. The second line of the input contains a string s of length n consisting of lowercase English letters. -----Output----- If it is not possible to rearrange the string such that no two adjacent characters are the same, print \\"NO\\". Otherwise, print \\"YES\\" and a rearranged string that satisfies the condition. If there are multiple answers, you can print any. -----Examples----- Input 4 aabb Output YES abab Input 3 aaa Output NO Input 6 aaabbc Output YES ababac -----Note----- In the first example, another acceptable answer is \\"baba\\". In the second example, it is impossible to rearrange the string since all characters are the same. In the third example, another acceptable answer is \\"abacab\\". There are other acceptable answers as well.","solution":"from collections import Counter import heapq def rearrange_string(n, s): # Count the frequency of each character freq = Counter(s) # Create a max-heap based on the frequency of characters max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) # Resultant rearranged string result = [] # Previous character initialized to something not existing in the input prev_count, prev_char = 0, \'\' while max_heap: count, char = heapq.heappop(max_heap) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) result.append(char) prev_count, prev_char = count + 1, char rearranged_string = \'\'.join(result) if len(rearranged_string) == n: return \\"YES\\", rearranged_string else: return \\"NO\\", \\"\\""},{"question":"You are planning a hiking trip and have a list of various items you want to pack. Each item has a certain weight and a value associated with it. You have a backpack that can hold up to a certain weight. You want to maximize the total value of the items you can carry in your backpack without exceeding the weight limit. Write a function `maximize_value(n, W, items)` that takes the following inputs: - `n`: the number of items (1 ≤ n ≤ 100) - `W`: the maximum weight the backpack can hold (1 ≤ W ≤ 1000) - `items`: a list of tuples, where each tuple contains two integers `wi` and `vi` denoting the weight and value of the `i`-th item respectively (1 ≤ wi ≤ 100, 1 ≤ vi ≤ 1000) The function should return the maximum total value of the items that can be packed in the backpack. # Input ``` n W items ``` Example 1 Input: ``` 4 7 [(1, 1), (3, 4), (4, 5), (5, 7)] ``` Output: ``` 9 ``` Explanation: You can take the items with weight 3 and 4, which gives you a total value of 4 + 5 = 9. Example 2 Input: ``` 3 50 [(10, 60), (20, 100), (30, 120)] ``` Output: ``` 220 ``` Explanation: You can take the items with weights 20 and 30, which gives you a total value of 100 + 120 = 220. # Constraints - 1 ≤ n ≤ 100 - 1 ≤ W ≤ 1000 - 1 ≤ wi ≤ 100 - 1 ≤ vi ≤ 1000","solution":"def maximize_value(n, W, items): Computes the maximum value that can be carried in a backpack of capacity W. :param n: Number of items :param W: Maximum weight capacity of the backpack :param items: List of tuples (weight, value) of each item :return: Maximum total value of items that can be carried in the backpack # Initialize a list to store the maximum value for each weight capacity dp = [[0] * (W + 1) for _ in range(n + 1)] # Iterate over each item for i in range(1, n + 1): wi, vi = items[i - 1] for w in range(W + 1): if wi <= w: # Include the item and see if it gives a better value dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - wi] + vi) else: # Do not include the item dp[i][w] = dp[i - 1][w] return dp[n][W]"},{"question":"There is a town with N houses organized in a single row, each having a certain amount of money stored in it. Every night, a thief attempts to rob the houses, but he cannot rob two adjacent houses on the same night. You are tasked with helping the town\'s security to determine the maximum amount of money that can be stolen in a single night without robbing two adjacent houses. Write a function that calculates the maximum amount of money the thief can steal in one night while conforming to the rule mentioned above. Constraints * 1 ≤ N ≤ 10^4 * The amount of money in each house is an integer between 0 and 10^4 inclusive. Input The input is given from Standard Input in the following format: N m1 m2 m3 ... mN where N is the number of houses and m1, m2, ..., mN are the amounts of money in each house. Output Print the maximum amount of money the thief can steal without robbing two adjacent houses. Examples Input 4 1 2 9 4 Output 10 Input 5 6 7 1 30 8 Output 37 Input 3 10 50 20 Output 50 Input 1 7 Output 7","solution":"def max_steal(n, money): if n == 0: return 0 if n == 1: return money[0] dp = [0] * n dp[0] = money[0] dp[1] = max(money[0], money[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + money[i]) return dp[n-1] # Example Usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) money = list(map(int, data[1:])) print(max_steal(N, money))"},{"question":"Robin has a list of M integers, where M is even. She can perform operations of two types: 1. Increment the value of any element Bi by 1. 2. Remove any two adjacent elements Bi and Bi+1 such that their absolute difference is 1. She aims to delete all elements from the list B using the minimal number of operations. Your task is to determine this minimum number of operations required. Input: The first line of input contains one even integer M - the number of elements in the list B. The second line contains M space-separated integers - elements of the list B. Output: Print the minimal number of operations Robin needs to perform. Constraints: 0 ≤ M ≤ 500 1 ≤ Bi ≤ 10^6 SAMPLE INPUT 6 4 5 7 6 8 9 SAMPLE OUTPUT 6 Explanation: One possible sequence of operations is: - Delete the 1st and 2nd elements {4, 5, 7, 6, 8, 9} => {7, 6, 8, 9} - Delete the 2nd and 3rd elements {7, 6, 8, 9} => {7, 9} - Increment 7th element {7, 9} => {8, 9} - Delete the 1st and 2nd elements {8, 9} => { }","solution":"def min_operations_to_empty_list(M, B): Returns the minimal number of operations required to delete all elements from the list B. if M == 0: return 0 import heapq def process_diff_pairs(B): Create a priority queue for differences of 1. pairs = [] i = 0 while i < len(B) - 1: if abs(B[i] - B[i + 1]) == 1: heapq.heappush(pairs, (abs(B[i]), i)) i += 1 return pairs def remove_diff_pairs(B, pairs): Remove pairs from B where the absolute difference is 1. removed_count = 0 while pairs: _, i = heapq.heappop(pairs) if i < len(B) - 1 and abs(B[i] - B[i + 1]) == 1: B.pop(i + 1) B.pop(i) removed_count += 2 return removed_count total_operations = 0 while B: pairs = process_diff_pairs(B) if pairs: removed = remove_diff_pairs(B, pairs) total_operations += removed // 2 else: total_operations += len(B) break return total_operations"},{"question":"You are given n tasks, and each task has a difficulty level associated with it. You need to assign these tasks to two persons such that the absolute difference in the sum of difficulty levels assigned to both persons is minimized. Each task can be assigned to only one person. ------ Input Format ------ The first line contains an integer T --- the number of test cases. - The first line of each test case consists of a single integer n --- the number of tasks. - The second line contains n integers d_{1},ldots,d_{n}, where d_{i} is the difficulty level of the i-th task. ------ Output Format ------ For each test case, output a single integer denoting the minimum possible absolute difference in the sum of difficulty levels assigned to both persons. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ n ≤ 100 1 ≤ d_{i} ≤ 100 - Sum of n over all test cases does not exceed 1000 ------ Sample Input 1 ------ 2 3 1 2 3 4 1 2 3 4 ------ Sample Output 1 ------ 0 0 ------ Explanation 1 ------ Test case 1: We can assign tasks with difficulty 1 and 2 to person 1, and task with difficulty 3 to person 2. The sum of difficulties for person 1 will be 1+2=3 and for person 2 will be 3. The absolute difference is left|3-3right|=0, which is the minimum possible. Test case 2: We can assign tasks with difficulty 1 and 4 to person 1, and tasks with difficulty 2 and 3 to person 2. The sum of difficulties for person 1 will be 1+4=5 and for person 2 will be 2+3=5. The absolute difference is left|5-5right|=0, which is the minimum possible.","solution":"def min_difference(T, test_cases): results = [] for t in range(T): n, tasks = test_cases[t] total_sum = sum(tasks) # Total sum of all difficulties target = total_sum // 2 # Target sum for a person (we want to distribute as evenly as possible) dp = [False] * (target + 1) # DP array to store which sums are possible dp[0] = True for task in tasks: for j in range(target, task - 1, -1): dp[j] = dp[j] or dp[j - task] for j in range(target, -1, -1): if dp[j]: person1_sum = j break person2_sum = total_sum - person1_sum results.append(abs(person2_sum - person1_sum)) return results"},{"question":"Selene loves palindromes. A palindrome is a string that reads the same forward and backward. She wants to transform a given string into a palindrome. In one move, she can choose a single character in the string and replace it with any other character. Selene wants to know the minimum number of moves required to make the string a palindrome. -----Input----- You are given a string consisting of lowercase English letters — this string denotes the string Selene wants to transform into a palindrome. -----Output----- Print one number — the minimum possible number of moves Selene needs to make to transform the string into a palindrome. -----Examples----- Input abca Output 1 Input racecar Output 0 Input abcd Output 2 -----Note----- In the first example, Selene can replace \'c\' with \'b\', making the string \'abba\', which is a palindrome. Therefore, the answer is 1. In the second example, the string \'racecar\' is already a palindrome, so the answer is 0. In the third example, Selene can change \'a\' to \'d\' and \'b\' to \'c\' (or vice versa), resulting in the palindrome \'dcbd\', meaning at least 2 changes are required.","solution":"def min_moves_to_palindrome(s): Returns the minimum number of moves required to make the string a palindrome. Parameters: s (str): The input string of lowercase English letters. Returns: int: The minimum number of moves to transform the string into a palindrome. n = len(s) moves = 0 for i in range(n // 2): if s[i] != s[n - 1 - i]: moves += 1 return moves"},{"question":"Tiling a Grid You are planning to renovate a rectangular floor by tiling it. The floor has dimensions of M x N (measured in square units), and you have tiles that are 1 x 2 in size. These tiles can be placed either horizontally or vertically. Your task is to determine the minimum number of tiles required to cover the entire floor. The constraints are as follows: - M and N are both integers between 1 and 100. - You must use the entire 1 x 2 tiles to cover the floor. Write a function to accomplish this. # Input The input consists of a single line with two integers M and N, representing the floor dimensions. # Output Output a single integer representing the minimum number of 1 x 2 tiles required to cover the floor completely. # Example Input 5 3 # Example Output 8 # Explanation A 5 x 3 floor requires 8 tiles: - By placing 3 horizontal tiles on the first two rows and 2 horizontal tiles on the remaining one row. # Notes 1. All tiles must be used completely, and the floor must be covered completely. 2. Tiles cannot be broken into smaller pieces.","solution":"def min_tiles_required(M, N): Given the dimensions of the floor, M x N, returns the minimum number of 1 x 2 tiles required to cover the entire floor. return (M * N) // 2"},{"question":"You have been tasked with creating an identifier for a new social network. An identifier must be a string consisting of lowercase Latin letters, digits, and underscores, but it cannot start with a digit. Furthermore, to ensure readability, it cannot contain more than one consecutive underscore at any point. Your goal is to determine if a given string is a valid identifier or not. Write a function that receives a single string and returns \\"YES\\" if the string is a valid identifier according to the described rules, and \\"NO\\" otherwise. # Input The input consists of a single string s (1 le |s| le 1000) representing the identifier to be validated. # Output Output \\"YES\\" if the string is a valid identifier, and \\"NO\\" otherwise. # Examples Input ``` new_identifier_1 ``` Output ``` YES ``` Input ``` 123identifier ``` Output ``` NO ``` Input ``` valid__identifier ``` Output ``` NO ``` # Note In the first example, \\"new_identifier_1\\" is a valid identifier as it follows all given rules. In the second example, \\"123identifier\\" is not valid because it starts with a digit. In the third example, \\"valid__identifier\\" is not valid because it contains more than one consecutive underscore.","solution":"def is_valid_identifier(s): Determines if the given string is a valid identifier. :param s: input string representing the identifier :return: \\"YES\\" if the string is a valid identifier, otherwise \\"NO\\" if not s: return \\"NO\\" if s[0].isdigit(): return \\"NO\\" previous_char = \'\' for char in s: if char not in \'abcdefghijklmnopqrstuvwxyz0123456789_\': return \\"NO\\" if char == \'_\' and previous_char == \'_\': return \\"NO\\" previous_char = char return \\"YES\\""},{"question":"You are given a string s consisting of lowercase English letters and a list of queries. Each query is represented as a pair of integers (l, r), where 1 leq l leq r leq |s|. For each query, your task is to find the number of distinct characters in the substring s[l-1:r] (i.e., from the l^{th} to the r^{th} character, inclusive, of the string). -----Input----- The first line contains a string s (1 leq |s| leq 10^5) consisting of lowercase English letters. The second line contains an integer q (1 leq q leq 10^5) — the number of queries. Each of the following q lines contains two space-separated integers l and r (1 leq l leq r leq |s|), representing a query. -----Output----- For each query, print a single integer — the number of distinct characters in the substring s[l-1:r]. -----Examples----- Input abcdefgh 3 1 4 2 5 1 8 Output 4 4 8 Input aaaaaaa 2 1 4 3 7 Output 1 1 -----Note----- In the first example, for the query (1, 4), the substring is \\"abcd\\" which has 4 distinct characters: \'a\', \'b\', \'c\', and \'d\'. For the second query (2, 5), the substring is \\"bcde\\" which also has 4 distinct characters: \'b\', \'c\', \'d\', and \'e\'. For the third query (1, 8), the entire string \\"abcdefgh\\" has 8 distinct characters. In the second example, for both queries, the substrings contain only the character \'a\', thus each query yields a result of 1 distinct character.","solution":"def count_distinct_characters_in_substring(s, queries): For each query, returns the number of distinct characters in the substring s[l-1:r]. results = [] for l, r in queries: substring = s[l-1:r] distinct_characters = set(substring) results.append(len(distinct_characters)) return results # Parsing input and executing function if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() s = data[0] q = int(data[1]) queries = [] index = 2 for _ in range(q): l = int(data[index]) r = int(data[index + 1]) queries.append((l, r)) index += 2 results = count_distinct_characters_in_substring(s, queries) for result in results: print(result)"},{"question":"You are organizing the seating arrangement for a wedding reception. There are circular tables at the venue, and you need to ensure that each table is filled optimally. Each table has a specific capacity and you are given a list of guests with their preferences for certain table numbers. Your task is to determine whether it is possible to seat all guests in such a way that each guest is seated at one of their preferred tables and no table exceeds its capacity. -----Input----- The first line contains an integer T (1 leq T leq 100), the number of tables. The second line contains T integers, where the i^{th} integer represents the capacity C_i (1 leq C_i leq 50) of the i^{th} table. The third line contains an integer G (1 leq G leq 1000), the number of guests. Then follows G lines, each containing a list of integers separated by spaces: the first integer is the number of tables the guest prefers, and the subsequent integers are the indices of those tables (1-indexed). -----Output----- Output a single line containing a single word: possible if all guests can be seated according to their preferences without exceeding any table\'s capacity, and impossible if it cannot be done. -----Examples----- Sample Input: 3 2 3 4 5 2 1 2 1 1 3 1 2 3 2 2 3 2 3 1 Sample Output: possible","solution":"def can_seat_guests(table_capacities, guests_preferences): T = len(table_capacities) G = len(guests_preferences) from collections import defaultdict import itertools # Initialize dict to keep track of assigned guests to each table table_assignment = defaultdict(list) def is_valid_assignment(assignments): for table_idx, table_list in assignments.items(): if len(table_list) > table_capacities[table_idx - 1]: return False return True def backtrack(guest_idx): if guest_idx == G: return True for table_idx in guests_preferences[guest_idx]: table_assignment[table_idx].append(guest_idx) if is_valid_assignment(table_assignment): if backtrack(guest_idx + 1): return True table_assignment[table_idx].remove(guest_idx) return False return \\"possible\\" if backtrack(0) else \\"impossible\\" # Example usage: T = 3 table_capacities = [2, 3, 4] G = 5 guests_preferences = [ [1, 2], [1], [1, 2, 3], [2, 3], [3, 1] ] print(can_seat_guests(table_capacities, guests_preferences)) # Output: possible"},{"question":"Anna has a collection of `n` distinct points on a 2D plane, each represented as a pair of coordinates (x, y). She wants to calculate the maximum number of points that lie on a single straight line. ------ Input ------ The first line of the input contains a single integer `T` denoting the number of test cases. The description of `T` test cases follows. The first line of each test case contains a single integer `n`. The next `n` lines contain two space-separated integers `x` and `y`, denoting the coordinates of the points. ------ Output ------ For each test case, print a single line containing one integer — the maximum number of points that lie on a single straight line. ------ Constraints ------ 1 ≤ T≤ 100 1 ≤ n ≤ 200 −10^4 ≤ x, y ≤ 10^4 for each point ------ Subtasks ------ Subtask #1 (40 points): 1 ≤ n≤ 10 Subtask #2 (60 points): 1 ≤ n ≤ 200 ----- Sample Input 1 ----- 2 3 1 1 2 2 3 3 4 1 1 2 2 3 4 4 5 ----- Sample Output 1 ----- 3 2 ----- Explanation 1 ----- Example case 1: All three points lie on a single straight line. Example case 2: The points (1, 1) and (2, 2) lie on the same straight line. The points (3, 4) and (4, 5) do not lie on the same line as the first two points.","solution":"from collections import defaultdict from math import gcd def max_points_on_a_line(points): Returns the maximum number of points that lie on a single straight line. def slope(p1, p2): dx = p2[0] - p1[0] dy = p2[1] - p1[1] if dx == 0: return (\\"inf\\", 0) g = gcd(dx, dy) return (dy // g, dx // g) if len(points) <= 1: return len(points) max_points = 0 for i in range(len(points)): slopes = defaultdict(int) duplicate = 1 for j in range(i + 1, len(points)): if points[i] == points[j]: duplicate += 1 else: slopes[slope(points[i], points[j])] += 1 max_points = max(max_points, duplicate + max(slopes.values(), default=0)) return max_points def process_test_cases(T, cases): Processes T test cases and returns the results in a list. results = [] for i in range(T): n, points = cases[i] results.append(max_points_on_a_line(points)) return results"},{"question":"*Alex is collecting rare stamps and needs your help organizing them efficiently!* *Alex has a collection of stamps arranged in rows, each row containing different stamps. The number of stamps in each row may vary. He wants to sort his stamps into albums. Each album can hold only a certain number of stamps, and he can place stamps from different rows into the same album.* Given the number of rows, the number of stamps in each row, and the maximum capacity of each album, determine the minimum number of albums required to fit all the stamps. ------ Input Format ------ - The first line of input will contain a single integer N, denoting the number of rows in the stamp collection. - The second line of input will contain N space-separated integers, where the i-th integer denotes the number of stamps in the i-th row. - The third line of input will contain a single integer M, the maximum capacity of one album. ------ Output Format ------ Output a single integer, the minimum number of albums required to fit all the stamps. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ Number of stamps in any row ≤ 1000 1 ≤ M ≤ 1000 ----- Sample Input 1 ------ 3 8 5 7 10 ----- Sample Output 1 ------ 2 ----- explanation 1 ------ We have three rows of stamps with 8, 5, and 7 stamps respectively. Each album can hold a maximum of 10 stamps. - One way to arrange them is: - First album: 8 stamps from the first row and 2 stamps from the third row (8 + 2 = 10 stamps). - Second album: 3 stamps from the third row and all 5 stamps from the second row (3 + 5 = 8 stamps). Thus, two albums are sufficient to hold all the stamps. ----- Sample Input 2 ------ 4 4 11 3 9 12 ----- Sample Output 2 ------ 3 ----- explanation 2 ------ We have four rows of stamps with 4, 11, 3, and 9 stamps respectively. Each album can hold a maximum of 12 stamps. - One way to arrange them is: - First album: all 4 stamps from the first row and all 3 stamps from the third row (4 + 3 = 7 stamps). - Second album: 9 stamps from the fourth row and 3 stamps from the second row (9 + 3 = 12 stamps). - Third album: the remaining 8 stamps from the second row. Thus, three albums are required to hold all the stamps.","solution":"def min_albums_required(N, stamps_per_row, M): Determine the minimum number of albums required to fit all the stamps. :param N: Number of rows in the stamp collection :param stamps_per_row: List of integers where the i-th integer denotes the number of stamps in the i-th row :param M: Maximum capacity of one album :return: Minimum number of albums required total_stamps = sum(stamps_per_row) return (total_stamps + M - 1) // M"},{"question":"Sarah loves puzzles and has recently discovered a new type of numerical puzzle. She has a sequence of integers and a target number. She needs to determine whether there are three distinct integers in the sequence that add up to the target number. Your task is to help Sarah by writing a program that solves this puzzle. -----Input----- The first line contains an integer N (3 leq N leq 5000), the size of the sequence. The second line contains N space-separated integers, representing the sequence of numbers. Each integer will be in the range [-10^6, 10^6]. The third line contains an integer T (-10^6 leq T leq 10^6), the target number. -----Output----- Print \\"YES\\" (without quotes) if there are three distinct integers in the sequence that sum up to T. Otherwise, print \\"NO\\" (without quotes). -----Examples----- Sample Input 1: 5 1 2 3 4 5 9 Sample Output 1: YES Sample Input 2: 4 1 2 3 4 10 Sample Output 2: NO Sample Input 3: 6 -1 0 1 2 -1 -4 0 Sample Output 3: YES","solution":"def find_three_sum(nums, target): Determines if there are three distinct integers in nums that sum up to target. Parameters: nums (list): List of integers target (int): Target sum to be checked Returns: str: \\"YES\\" if such a triplet is found, otherwise \\"NO\\" nums.sort() n = len(nums) for i in range(n-2): left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return \\"YES\\" elif current_sum < target: left += 1 else: right -= 1 return \\"NO\\""},{"question":"Two integer arrays a and b of length n and m respectively are given. An operation consists of making an addition of one element from a and one element from b. Your task is to determine the minimum number of operations required so that the sum of the elements added equals k, or if it is not possible to achieve this sum. Each test case is independent of the other. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Each test case consists of three lines: - The first line contains three integers n (1 leq n leq 1000), m (1 leq m leq 1000), and k (0 leq k leq 10^9) — the lengths of arrays a and b, and the target sum k. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^5) — the elements of array a. - The third line contains m integers b_1, b_2, ldots, b_m (1 leq b_i leq 10^5) — the elements of array b. -----Output----- For each test case, output a single integer representing the minimum number of operations required to achieve the sum k. If it is not possible, output -1. -----Example----- Input 3 3 4 10 1 2 3 7 8 9 10 5 5 20 2 4 6 8 10 2 4 2 4 6 2 2 7 4 5 2 3 Output 1 2 1 -----Note------ In the first test case, we can pick 3 from array a and 7 from array b, requiring only 1 operation to achieve the sum 10. In the second test case, we can pick 10 from array a and 10 from array b, requiring 2 operations to achieve the sum 20. In the third test case, we can pick 4 from array a and 3 from array b, requiring only 1 operation to achieve the sum 7.","solution":"def min_operations_to_achieve_sum_k(n, m, k, a, b): a_set = set(a) for number in b: if (k - number) in a_set: return 1 return -1 def process_test_cases(test_cases): results = [] for case in test_cases: n, m, k = case[\'n\'], case[\'m\'], case[\'k\'] a, b = case[\'a\'], case[\'b\'] result = min_operations_to_achieve_sum_k(n, m, k, a, b) results.append(result) return results"},{"question":"A company is organizing a large conference, and they need to allocate rooms to the participants. Each room can hold up to a maximum of `m` participants, and the participants need to be divided into groups such that the number of participants in each group differs by at most one. Given the total number of participants `p` and the maximum room capacity `m`, determine the minimum number of rooms required for the conference. -----Input----- The input contains two integers `p` and `m` (1 ≤ p ≤ 10^9, 1 ≤ m ≤ 10^9). -----Output----- Print the minimum number of rooms required to ensure that the number of participants in each room differs by at most one. -----Examples----- Input 10 3 Output 4 Input 15 5 Output 3 Input 8 8 Output 1 Input 19 4 Output 5 -----Note----- In the first example, the distribution of participants across rooms can be (3, 3, 2, 2), requiring 4 rooms in total. In the second example, the distribution of participants across rooms can be (5, 5, 5), requiring 3 rooms in total. In the third example, since the number of participants exactly equals the room capacity, only one room is required. In the fourth example, the distribution of participants across rooms can be (4, 4, 4, 4, 3), requiring 5 rooms in total.","solution":"def minimum_number_of_rooms(p, m): Returns the minimum number of rooms required to accommodate p participants with each room holding up to m participants, ensuring that the number of participants in each room differs by at most 1. if p <= m: return 1 quotient, remainder = divmod(p, m) if remainder == 0: return quotient else: return quotient + 1"},{"question":"You are given a list of integers, where each integer represents the number of apples in each basket. Your task is to determine the minimum number of moves required to make all baskets contain the same number of apples. In a single move, you can either remove one apple from a basket or add one apple to another basket. -----Input:----- - The first line of input contains an integer n, the number of baskets. - The second line contains n space-separated integers, representing the number of apples in each basket. -----Output:----- Output a single integer, the minimum number of moves required to make all baskets have the same number of apples. -----Constraints:----- 1 leq n leq 10^5 0 leq text{Number of apples in each basket} leq 10^9 -----Sample Input:----- 4 1 2 3 4 -----Sample Output:----- 4 -----EXPLANATION:----- To make all baskets have the same number of apples, you can distribute the apples to the average count. In this case, the total number of apples is 10, and the average is 2.5. You can distribute apples as follows: - Remove 1 apple from the basket with 3 apples. - Remove 2 apples from the basket with 4 apples. - Add 1 apple to the basket with 1 apple.","solution":"def min_moves_to_equal_apples(n, apples): Returns the minimum number of moves required to make all baskets contain the same number of apples. total_apples = sum(apples) avg_apples = total_apples // n moves = 0 for apple in apples: moves += abs(apple - avg_apples) return moves // 2"},{"question":"In a country, there are n cities connected by m bidirectional roads. Each road connects exactly two different cities and has a specific travel cost associated with it. The roads are designed in such a way that one can travel from any city to any other city using one or more roads. The government recently introduced a new policy that gave each road a travel discount of \'d\' units. This means for each road, its travel cost is reduced by \'d\' units. The cost of any road, however, cannot be reduced below zero. Your task is to determine the minimum travel cost between any two given cities after applying the discount policy. Write a function to solve the problem: ```python def min_travel_cost(n, m, roads, d): :param n: an integer, number of cities :param m: an integer, number of roads :param roads: a list of tuples (a, b, c), where: - a and b are integers (1 ≤ a, b ≤ n), the cities connected by the road - c is an integer (1 ≤ c ≤ 10^6), the travel cost of that road :param d: an integer (0 ≤ d ≤ 10^6), the travel discount :return: a 2D list of integers, where the j-th element of the i-th list is the minimum travel cost from city i to city j # Your code here ``` # Input - `n`: An integer representing the number of cities (2 ≤ n ≤ 100). - `m`: An integer representing the number of roads (1 ≤ m ≤ 10,000). - `roads`: A list of m tuples. Each tuple contains 3 integers (a, b, c) representing a bidirectional road between cities a and b with a travel cost of c. - `d`: An integer representing the travel discount which is applied to every road. # Output - A 2D list of integers where the element at the j-th column of the i-th row represents the minimum travel cost from city i+1 to city j+1. The list should be of size n x n. # Example ```python n = 3 m = 3 roads = [(1, 2, 4), (2, 3, 5), (1, 3, 8)] d = 2 ``` Expected Output: ``` [[0, 2, 5], [2, 0, 3], [5, 3, 0]] ```","solution":"def min_travel_cost(n, m, roads, d): import math # Initialize the cost matrix with \\"infinity\\" cost_matrix = [[math.inf] * n for _ in range(n)] # Road costs after applying discounts discounted_roads = [(a, b, max(c - d, 0)) for a, b, c in roads] # Fill the cost matrix with the discounted roads for a, b, cost in discounted_roads: cost_matrix[a-1][b-1] = cost cost_matrix[b-1][a-1] = cost # Set the diagonal to zero for i in range(n): cost_matrix[i][i] = 0 # Apply Floyd-Warshall Algorithm for k in range(n): for i in range(n): for j in range(n): if cost_matrix[i][j] > cost_matrix[i][k] + cost_matrix[k][j]: cost_matrix[i][j] = cost_matrix[i][k] + cost_matrix[k][j] return cost_matrix"},{"question":"You are given a list of integers. Write a program to determine if by rearranging the list, you can form an arithmetic sequence. An arithmetic sequence is a sequence of numbers such that the difference between consecutive terms is constant. Input: The first line of input contains a single integer T, the number of test cases. The first line of each test case contains an integer N, the number of integers in the list. The second line of each test case contains N space-separated integers. Output: For each test case, output \\"Yes\\" if the list can be rearranged to form an arithmetic sequence, otherwise output \\"No\\". Constraints: 1 <= T <= 1000 2 <= N <= 10^5 -10^9 <= element of the list <= 10^9 Sample Input: 3 3 3 1 2 4 1 4 2 3 5 1 2 3 5 6 Sample Output: Yes Yes No Explanation: For the first case, the sequence can be rearranged to [1, 2, 3]. For the second case, the sequence is already an arithmetic sequence with a common difference of 1. For the third case, no rearrangement can form an arithmetic sequence.","solution":"def can_form_arithmetic_sequence(n, arr): This function determines if the list can be rearranged to form an arithmetic sequence. :param n: The number of integers in the list. :param arr: A list of integers. :return: \\"Yes\\" if the list can be rearranged to form an arithmetic sequence, otherwise \\"No\\". arr.sort() # Calculate common difference diff = arr[1] - arr[0] for i in range(2, n): if arr[i] - arr[i-1] != diff: return \\"No\\" return \\"Yes\\" def process_test_cases(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] arr = test_cases[t][1] result = can_form_arithmetic_sequence(N, arr) results.append(result) return results"},{"question":"# Prime Factorization Prime factorization is the process of finding which prime numbers multiply together to make the original number. For example, the prime factorization of 18 is 2 × 3 × 3, or written with exponents, 2 * 3^2. # Task Write a function `prime_factors` that takes in a positive integer `n` and returns a dictionary where the keys are the prime factors of `n` and the values are their corresponding exponents in the prime factorization. # Example ```python prime_factors(18) # => {2: 1, 3: 2} prime_factors(100) # => {2: 2, 5: 2} prime_factors(13195) # => {5: 1, 7: 1, 13: 1, 29: 1} ``` # Notes - All the integers in the dictionary should be positive and sorted in ascending order of the keys. - The input will always be greater than 1. - You may assume the input is a positive integer within the bounds of 1 to 1,000,000.","solution":"def prime_factors(n): Returns a dictionary where the keys are the prime factors of n and the values are their corresponding exponents. factors = {} # Check factor of 2 first count = 0 while n % 2 == 0: n //= 2 count += 1 if count > 0: factors[2] = count # Check for odd factors from 3 onwards factor = 3 while factor * factor <= n: count = 0 while n % factor == 0: n //= factor count += 1 if count > 0: factors[factor] = count factor += 2 # If n is still greater than 1, then it is a prime number if n > 1: factors[n] = 1 return factors"},{"question":"You are given an integer array of length n. The task is to rearrange the array elements to form the lexicographically smallest possible string by concatenating the array elements. Each element is treated as a string and the concatenation of two strings a and b is defined as the result of string a followed by string b. Input The first line contains an integer n — the length of the array (1 ≤ n ≤ 100000). The second line contains n integers x1, ..., xn — the array elements (0 ≤ xi < 10^9). Output Output the lexicographically smallest string that can be formed by concatenating the array elements. Examples Input 3 56 9 5 Output 5569 Input 4 98 9 23 21 Output 2123989 Note In the first example, \\"5569\\" is the smallest lexicographical string that can be formed from the given array. In the second example, \\"2123989\\" is the smallest lexicographical string formed by proper rearrangement and concatenation of the array elements.","solution":"def lexicographically_smallest_concatenation(nums): Rearrange the array elements to form the lexicographically smallest possible string by concatenating the array elements. if not nums: return \\"\\" # Convert integers to string for comparison str_nums = list(map(str, nums)) # Sort string numbers using a custom comparator logic str_nums.sort(key=lambda x: x * 10) # Multiply by 10 to avoid issues with different lengths # Join the sorted strings to make the result result = \'\'.join(str_nums) return result"},{"question":"Alex is a programming student who loves puzzles. One day, his teacher gave him an interesting task. Given an integer `n`, the task is to count the number of distinct prime factors of numbers from `1` to `n` and print the result. For example, if `n` is `10`, he needs to find all prime factors of each number from `1` to `10` and count how many distinct prime factors exist in total. Input The first line of the input contains a single integer `t`, the number of test cases. Each of the following `t` lines contains a single integer `n`. Output For each test case, print the total number of distinct prime factors for numbers from `1` to `n`. Constraints 1 ≤ t ≤ 100 1 ≤ n ≤ 10^6 Example Input: 2 10 15 Output: 4 6 Explanation: For the first test case, the numbers from `1` to `10` have the distinct prime factors: `[2, 3, 5, 7]`, so the result is `4`. For the second test case, the numbers from `1` to `15` have the distinct prime factors: `[2, 3, 5, 7, 11, 13]`, so the result is `6`.","solution":"def count_distinct_prime_factors_up_to_n(n): Returns the count of distinct prime factors of numbers from 1 to n. sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return sum(sieve) def process_test_cases(test_cases): results = [] for n in test_cases: results.append(count_distinct_prime_factors_up_to_n(n)) return results"},{"question":"John works at a warehouse and his job involves stacking boxes. Each type of box has a unique identification number and a specific weight. John has multiple stackable boxes that he needs to organize in the most stable manner possible, by following some conditions. Given a list of boxes, where each box is represented by a tuple containing two integers (id, weight), John needs to create the tallest stack possible with these boxes. However, there are certain rules that need to be followed: 1. A heavier box cannot be placed on top of a lighter box. 2. No two boxes in the same stack can have the same identification number. Your task is to determine the maximum height that can be achieved by stacking the boxes under these conditions. Input Format The first line contains an integer N, the number of boxes. The next N lines each contain a tuple with two integers id and weight. Output Format Output a single integer, the height of the tallest possible stack. Constraints 1 leq N leq 1,000 1 leq id leq 1,000 1 leq weight leq 1,000 Sample Input 5 1 5 2 7 3 6 1 4 3 10 Sample Output 3","solution":"def tallest_stack(boxes): Returns the height of the tallest stack possible with given conditions. :param boxes: List of tuples, each containing (id, weight). :return: Integer, the height of the tallest stack. # Remove duplicates and keep the box with the heaviest weight for each id box_dict = {} for box in boxes: if box[0] not in box_dict or box[1] > box_dict[box[0]]: box_dict[box[0]] = box[1] # Create a list of surviving boxes sorted by weight sorted_boxes = sorted(box_dict.values(), reverse=True) # The height of the stack is simply the number of these surviving boxes return len(sorted_boxes) # Example usage: # boxes = [(1, 5), (2, 7), (3, 6), (1, 4), (3, 10)] # print(tallest_stack(boxes)) # Output should be 3"},{"question":"The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. Therefore, the sequence goes: 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on. Given a large integer `n`, your task is to find the largest Fibonacci number less than or equal to `n` without generating the entire Fibonacci sequence up to `n`. To clarify, if `n` is 1000, you should find 987, the largest Fibonacci number that does not exceed 1000. **Function Signature** ```python def largest_fibonacci(n: int) -> int: pass ``` **Examples** ```python largest_fibonacci(1000) -> 987 largest_fibonacci(100) -> 89 largest_fibonacci(55) -> 55 largest_fibonacci(15) -> 13 largest_fibonacci(4) -> 3 largest_fibonacci(1) -> 1 largest_fibonacci(0) -> 0 ``` **Constraints** - The input number `n` is a non-negative integer that can be very large (up to 10^18).","solution":"def largest_fibonacci(n: int) -> int: if n == 0: return 0 if n == 1: return 1 a, b = 0, 1 while b <= n: a, b = b, a + b return a"},{"question":"You are given n balloons numbered from 1 to n, and each has a certain amount of helium in it. The quantity of helium in the i-th balloon is represented by an integer h_i. You wish to paint each balloon with one of three colors: red, blue, or green. The cost of painting a balloon depends on both the color used and the amount of helium in the balloon. Specifically, the cost to paint the i-th balloon red, blue, or green is given by r_i, b_i, and g_i, respectively. You want to paint all the balloons such that no two consecutive balloons are painted with the same color, and the total painting cost is minimized. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of balloons. Each of the next n lines contains three integers r_i, b_i, g_i (0 ≤ r_i, b_i, g_i ≤ 1000; 1 ≤ i ≤ n), representing the cost of painting the i-th balloon red, blue, and green, respectively. Output Output a single integer, the minimum total cost of painting all the balloons subject to the given constraints. Example Input 3 1 2 3 1 2 1 3 1 2 Output 3 Explanation In this case, the optimal way to paint the balloons is: - Paint the first balloon red (cost = 1) - Paint the second balloon green (cost = 1) - Paint the third balloon blue (cost = 1) The total cost is 1 + 1 + 1 = 3. Note The problem can be solved optimally using dynamic programming. For each balloon, you can keep track of the minimum cost that ends with each color and update it based on the previous balloon\'s costs.","solution":"def min_cost_to_paint_balloons(n, costs): if n == 0: return 0 # Initialize the dp array dp = [[0] * 3 for _ in range(n)] # Base case for the first balloon dp[0][0] = costs[0][0] # Cost to paint the first balloon red dp[0][1] = costs[0][1] # Cost to paint the first balloon blue dp[0][2] = costs[0][2] # Cost to paint the first balloon green # Fill the dp array for i in range(1, n): dp[i][0] = costs[i][0] + min(dp[i-1][1], dp[i-1][2]) # Min cost to paint red dp[i][1] = costs[i][1] + min(dp[i-1][0], dp[i-1][2]) # Min cost to paint blue dp[i][2] = costs[i][2] + min(dp[i-1][0], dp[i-1][1]) # Min cost to paint green # The answer will be the minimum cost of painting the last balloon any color return min(dp[n-1][0], dp[n-1][1], dp[n-1][2])"},{"question":"You are given a list of N integers representing the heights of students standing in a line. Your task is to determine the number of students that have a student taller than themselves standing to their right in the line. -----Constraints----- - All values in input are integers. - 1 leq N leq 100 - 1 leq heights[i] leq 1000 -----Input----- Input is given from Standard Input in the following format: N heights -----Output----- Print the number of students that have a taller student to their right. -----Sample Input----- 5 140 150 160 170 180 -----Sample Output----- 4","solution":"def count_students_with_taller_right(heights): Given a list of integers representing the heights of students standing in a line, returns the number of students that have a student taller than themselves standing to their right. count = 0 max_height = 0 for height in reversed(heights): if height > max_height: max_height = height else: count += 1 return count # Example usage: # N = 5 # heights = [140, 150, 160, 170, 180] # print(count_students_with_taller_right(heights)) # Output: 4"},{"question":"You are given an integer array A of size N and an integer K. You need to perform the following operation exactly once: Choose any subarray of length exactly K and reverse it. Find a subarray such that after reversing it, the resulting array is lexicographically smallest possible. If there are multiple solutions, return the one which appears first in the array. ------ Input Format ------ - The first line contains two integers N and K. - The second line contains N space-separated integers, representing the elements of array A. ------ Output Format ------ Print the lexicographically smallest array after performing the described operation exactly once. ------ Constraints ------ 1 ≤ K ≤ N ≤ 10^5 1 ≤ A_{i} ≤ 10^9 ------ subtasks ------ Subtask #1 (100 points): Original constraints ------ Sample Input 1 ------ 5 3 3 2 1 5 4 ------ Sample Output 1 ------ 1 2 3 5 4 ------ Sample Input 2 ------ 6 2 4 3 2 5 1 6 ------ Sample Output 2 ------ 3 4 2 5 1 6 ------ explanation 1 ------ Test case 1: By reversing the subarray [3, 2, 1], we get the array [1, 2, 3, 5, 4] which is the lexicographically smallest possible. Test case 2: By reversing the subarray [4, 3], we get the array [3, 4, 2, 5, 1, 6] which is the lexicographically smallest possible.","solution":"def lexicographically_smallest_array(N, K, A): Returns the lexicographically smallest array possible by reversing exactly one subarray of length K. Parameters: N (int) : the size of the array K (int) : the length of the subarray to be reversed A (list) : the integer array Returns: list : the lexicographically smallest array after reversing one subarray of length K smallest_array = A[:] # Make a copy of the initial array for i in range(N - K + 1): # Reverse the subarray A[i:i+K] reversed_subarray = A[:i] + A[i:i+K][::-1] + A[i+K:] # Compare with the current smallest_array if reversed_subarray < smallest_array: smallest_array = reversed_subarray return smallest_array"},{"question":"Write a function that takes a list of numbers and returns the sum of all the numbers that are prime. If there are no prime numbers in the list, return the string \\"No prime numbers found.\\" For instance: ``` sum_of_primes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => 17 sum_of_primes([4, 6, 8, 10, 12]) => \\"No prime numbers found\\" sum_of_primes([13, 17, 19, 23]) => 72 ```","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sum_of_primes(numbers): Sums all the prime numbers in the provided list. Returns the sum or \\"No prime numbers found\\" if there are no primes. prime_sum = sum(filter(is_prime, numbers)) return prime_sum if prime_sum > 0 else \\"No prime numbers found\\""},{"question":"Given an array of integers, find the first missing positive integer. Example 1: Input: [1, 2, 0] Output: 3 Example 2: Input: [3, 4, -1, 1] Output: 2 Example 3: Input: [7, 8, 9, 11, 12] Output: 1 You must implement an algorithm that runs in O(n) time and uses constant extra space. Credits: Special thanks to @coderx for adding this problem and creating all test cases.","solution":"def first_missing_positive(nums): Find the first missing positive integer in an array of integers. n = len(nums) # First pass, swap numbers to their right positions if they\'re in the range [1, n] for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap nums[i] with the element at its destined position nums[nums[i] - 1] nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Second pass, find the first place where the index doesn\'t match the number for i in range(n): if nums[i] != i + 1: return i + 1 # If all numbers are in their places, the smallest missing positive is n+1 return n + 1"},{"question":"Write a program that reads a list of integers and determines if it is a permutation of the first `n` natural numbers. A permutation of the first `n` natural numbers is a sequence that contains all the numbers from 1 to `n` exactly once in any order. Constraints: * 1 leq n leq 1000 * 1 leq text{length of list} leq 1000 * All elements in the list are integers within the range 1 to n. Input: - In the first line, an integer `n` is given. - In the second line, a list of integers separated by spaces is given. Output: - Print \\"YES\\" if the list is a permutation of the first `n` natural numbers. - Print \\"NO\\" otherwise. Example: Input: 5 3 1 2 5 4 Output: YES Input: 4 1 2 2 4 Output: NO","solution":"def is_permutation(n, lst): Determines if the given list is a permutation of the first n natural numbers. Parameters: n (int): The length of the first n natural numbers. lst (list): The list of integers to be checked. Returns: str: \'YES\' if the list is a permutation, \'NO\' otherwise. if sorted(lst) == list(range(1, n+1)): return \\"YES\\" return \\"NO\\""},{"question":"Alex loves playing board games, especially the one called Hexa-Connect, which is played on a hexagonal grid. The game board is a regular n x n hexagonal grid consisting of hexagonal cells, and Alex has to place some tokens on it. Each token is placed in a single hexagonal cell, and no two tokens can be in the same cell. The rules of the game impose that tokens which are adjacent cannot be of the same kind. Two tokens are considered adjacent if they share an edge. Alex needs to determine a way to place the tokens on the grid such that there are no two adjacent tokens of the same kind, using the minimum number of different kinds of tokens. Assume the grid is represented as an n x n matrix for simplicity where each cell (i, j) can be accessed by matrix[i][j]. Can you help Alex find out the minimum number of different kinds of tokens needed to satisfy the condition? -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the size of the hexagonal grid. -----Output----- Print one integer — the minimum number of different kinds of tokens needed. -----Examples----- Input 1 Output 1 Input 2 Output 2 Input 3 Output 2 -----Note----- In the first example, when n=1, only one token can be placed, so only one kind of token is needed. In the second example, when n=2, a 2x2 hexagonal grid, the grid can be filled using 2 different kinds of tokens such that no two adjacent tokens are the same. In the third example, when n=3, a 3x3 hexagonal grid, the grid can be filled with 2 different kinds of tokens appropriately.","solution":"def min_tokens_needed(n): Returns the minimum number of different kinds of tokens needed to fill an n x n hexagonal grid such that no two adjacent tokens are the same. if n == 1: return 1 # Only one cell so one kind of token is needed return 2 # For any n >= 2, two kinds of tokens are sufficient"},{"question":"You are given a list of integers where each integer represents the amount of money in a bank account. The bank accounts can either have a positive balance or a negative balance. The goal is to neutralize the accounts by performing the minimum number of transactions. A transaction involves transferring money from one account to another such that one account\'s balance decreases and the other increases by the same amount. The balance of one account (either positive or negative) must be completely transferred to neutralize it in each transaction. You need to determine the minimum number of transactions required to neutralize all the bank accounts so that all account balances become zero. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of bank accounts. The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the balances of the bank accounts. Output Output a single integer — the minimum number of transactions required to neutralize all the bank accounts. Examples Input 4 1 -1 2 -2 Output 2 Input 3 5 -3 -2 Output 2","solution":"def minimum_transactions(n, balances): Returns the minimum number of transactions required to neutralize all bank accounts so that all account balances become zero. :param n: Integer representing the number of bank accounts. :param balances: List of integers representing the balances of the bank accounts. :return: Integer representing the minimum number of transactions. positive_balances = [] negative_balances = [] for balance in balances: if balance > 0: positive_balances.append(balance) elif balance < 0: negative_balances.append(-balance) i, j = 0, 0 transactions = 0 while i < len(positive_balances) and j < len(negative_balances): if positive_balances[i] > negative_balances[j]: positive_balances[i] -= negative_balances[j] j += 1 elif positive_balances[i] < negative_balances[j]: negative_balances[j] -= positive_balances[i] i += 1 else: i += 1 j += 1 transactions += 1 return transactions"},{"question":"Alice is a software engineer who is very particular about her workout schedules. She tracks her workouts in an array where each element represents the calories burned on a particular day. Alice wants to find out if there is a subarray (contiguous part of the array) that sums up to exactly K calories. If such a subarray exists, she will be very happy! To make it challenging, the workouts can be significant in number, and the values can vary widely. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two space-separated integers N and K, where N is the number of days and K is the target sum in calories. - The second line contains N space-separated integers, representing the calories burned on each day. -----Output:----- For each test case, print \\"YES\\" if there exists a subarray that sums up to K, otherwise print \\"NO\\". -----Constraints----- - 1 le T le 10 - 1 le N le 10^5 - -10^4 le text{Calories burned on a day} le 10^4 - -10^9 le K le 10^9 -----Sample Input:----- 2 5 15 1 2 3 4 5 4 10 1 2 3 8 -----Sample Output:----- YES NO -----Explanation:----- Testcase 1: There is a subarray [1, 2, 3, 4, 5] with a sum of 15. Testcase 2: There is no subarray that sums up to 10; although there is [1, 2, 3, 4] with sum 10, but it is not a subarray.","solution":"def check_subarray_sum(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] calories = test_cases[i][1] current_sum = 0 sum_set = set() for cal in calories: current_sum += cal if current_sum == K or (current_sum - K) in sum_set: results.append(\\"YES\\") break sum_set.add(current_sum) else: results.append(\\"NO\\") return results"},{"question":"A warehouse has n boxes, each with a unique barcode represented as a string of characters. The manager wants to find out if there is any anagram pair of barcodes among the boxes. Two strings are anagrams if they are made of the same characters with the same frequencies but in different orders. Write a function to determine whether there is at least one anagram pair among the barcodes. -----Constraints----- - 1 leq n leq 100 000 - Each barcode string consists of lowercase English letters. - The length of a barcode string is between 1 and 100. -----Input----- Input is given from Standard Input in the following format: n barcode1 barcode2 ... barcoden -----Output----- Return \\"Yes\\" if there is at least one anagram pair among the barcodes; otherwise, return \\"No\\". -----Sample Input----- 4 abc bca xyz zyx -----Sample Output----- Yes In this example, \\"abc\\" and \\"bca\\" form an anagram pair, as do \\"xyz\\" and \\"zyx\\". Therefore, the output is \\"Yes\\".","solution":"def find_anagram_pair(n, barcodes): This function checks if there is at least one pair of anagram barcodes among the given list. :param n: int - number of barcodes :param barcodes: List[str] - list of barcode strings :return: str - \\"Yes\\" if at least one anagram pair exists, otherwise \\"No\\" seen = set() for barcode in barcodes: # Sort the barcode letters to find its canonical form sorted_barcode = \'\'.join(sorted(barcode)) if sorted_barcode in seen: return \\"Yes\\" seen.add(sorted_barcode) return \\"No\\""},{"question":"Suppose you are given a list of integers. For each integer, you are to find and output the largest number less than or equal to that integer that only consists of the digit \'1\' in its binary representation. For example, for the number 13, you should find the largest number such that its binary form is 1, 11, 111, 1111, etc., which are 1, 3, 7, 15, and so on. ----Input---- The first line contains the number of test cases T (1 ≤ T ≤ 100). The next T lines each contain a single integer N (1 ≤ N ≤ 10^9). ----Output---- For each test case, print the largest number less than or equal to N that consists only of the digit \'1\' in its binary representation. ----Example---- Input: 3 5 13 30 Output: 3 7 15","solution":"def largest_binary_ones(n): k = 1 while (1 << k) - 1 <= n: k += 1 return (1 << (k - 1)) - 1 def solve(test_cases): results = [] for n in test_cases: results.append(largest_binary_ones(n)) return results"},{"question":"You are given an array of positive integers of length N, a = [a_1, a_2, ..., a_N]. Your task is to determine if it\'s possible to reorder the array such that the greatest common divisor (GCD) of all adjacent elements is greater than 1. Write a function that returns \\"YES\\" if it is possible to reorder the elements in the array to satisfy the condition, and \\"NO\\" otherwise. Constraints * 1 <= N <= 10^5 * 1 <= a_i <= 10^9 Input Input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Output \\"YES\\" if it is possible to reorder the array such that the GCD of all adjacent elements is greater than 1. Otherwise, output \\"NO\\". Examples Input 4 3 6 9 12 Output YES Input 3 4 9 25 Output NO Input 5 2 4 8 16 32 Output YES Input 6 7 14 21 28 35 42 Output YES Input 5 7 5 9 19 21 Output NO","solution":"from math import gcd from itertools import permutations def can_reorder_to_satisfy_gcd_condition(N, arr): Function to determine if the array can be reordered such that the GCD of all adjacent elements is greater than 1. Args: N (int): Length of the array. arr (list): List of integers. Returns: str: \\"YES\\" if it is possible to reorder the elements, \\"NO\\" otherwise. for perm in permutations(arr): valid = True for i in range(1, N): if gcd(perm[i - 1], perm[i]) == 1: valid = False break if valid: return \\"YES\\" return \\"NO\\""},{"question":"Sarah is a botanist researching plant growth. She has come across a problem related to the growth rates of different species over various intervals of time which she needs assistance with. Given an array G of length N, where G[i] represents the growth rate of the i-th plant species, Sarah wants to calculate the total growth of all possible subarrays of G. A subarray is defined as a contiguous portion of G. The growth of a subarray is the product of all elements within that subarray. However, since the result can be very large, she wants you to return the total growth of all subarrays modulo 10^9+7. Input Format: The first line contains an integer N, the number of plant species. The second line contains N space-separated integers representing the growth rates G[i] of the plant species. Output Format: Print the total growth of all subarrays modulo 10^9+7. Constraints: 1 leq N leq 500 1 leq G[i] leq 10^9 Sample Input 3 2 3 4 Sample Output 207 Explanation The subarrays of [2, 3, 4] are: - [2], [3], [4] - [2,3], [3,4] - [2,3,4] The growths of these subarrays are: - 2, 3, 4 (individual elements) - 6 (2*3), 12 (3*4) - 24 (2*3*4) Total growth = 2 + 3 + 4 + 6 + 12 + 24 = 51 However, for larger arrays, the total can be very large, so you need to print the result mod 10^9+7. For the given sample input of [2, 3, 4], re-calculating as per modulo operations ensures the correctness of this approach for large numbers.","solution":"MOD = 10**9 + 7 def total_growth_of_subarrays(G): N = len(G) total = 0 for i in range(N): product = 1 for j in range(i, N): product = (product * G[j]) % MOD total = (total + product) % MOD return total"},{"question":"In a mystical forest, there are magical trees arranged in a grid of size n * m. Each tree has an initial integer value representing its magical power. The value can be positive, negative, or zero. A druid can cast a spell on any one tree (taking one second to do so), which doubles the magical power of that tree and all its 8 adjacent trees (treated as diagonals share an edge). After doubling, the spell will continue spreading in one second to all adjacent trees\' adjacents, doubling their power as well, and this process continues. Due to the nature of the spell, you want to know the minimum amount of time it will take for all trees in the grid to have non-zero magical power, considering the initial conditions. -----Input----- The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. First line of each test case contains two space-separated integers n, m denoting the dimensions of the forest. For each of the next n lines, each line has m integers (separated by spaces) denoting the magical power of the trees in that row. -----Output----- For each test case, output a single integer corresponding to the minimum seconds required for the spell to ensure all trees have non-zero magical power. -----Constraints----- - 1 ≤ T ≤ 20 Subtask #1: (40 points) - 1 ≤ n, m ≤ 100 Subtask #2: (60 points) - 1 ≤ n, m ≤ 1000 -----Example----- Input: 2 2 2 1 -2 3 0 3 3 2 0 -1 -1 4 3 0 0 5 Output: 1 1 -----Explanation----- In the first example, if the spell is cast on the tree at cell (0, 1), it will immediately double the power and ensure it\'s non-zero, and the same process will affect its adjacent cells in one second, rendering all trees to be non-zero in one second. In the second example, casting a spell on the tree at cell (1, 1) will immediately double its power and also affect the adjacent trees, ensuring all of them have non-zero magical power in one second.","solution":"def min_time_to_non_zero_power(t, test_cases): from collections import deque results = [] directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for case in test_cases: n, m, grid = case[\'n\'], case[\'m\'], case[\'grid\'] queue = deque() for i in range(n): for j in range(m): if grid[i][j] != 0: queue.append((i, j, 0)) if len(queue) == n * m: results.append(0) continue max_distance = 0 while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0: grid[nx][ny] = dist + 1 max_distance = max(max_distance, dist + 1) queue.append((nx, ny, dist + 1)) results.append(max_distance) return results"},{"question":"You\'re organizing a charity event, and you have received several donations in different denominations. Each donation is represented as an object of the `Donation` class: ```python class Donation: def __init__(self, fifties, hundreds, two_hundreds): self.fifties = fifties self.hundreds = hundreds self.two_hundreds = two_hundreds ``` Given a list of `Donation` objects, your task is to write a function that calculates the total amount of money donated. The denominations are as follows: - Each `fifty` is worth 50 units of currency. - Each `hundred` is worth 100 units of currency. - Each `two_hundred` is worth 200 units of currency. Write a function `total_donations(donations)` that takes a list of `Donation` objects and returns the total amount of money donated. For example: ```python don1 = Donation(2, 1, 0) don2 = Donation(0, 1, 2) don3 = Donation(1, 2, 1) donations = [don1, don2, don3] total_donations(donations) # Should return 1050 (2*50 + 1*100 + 0*200 + 0*50 + 1*100 + 2*200 + 1*50 + 2*100 + 1*200) ``` Notes: * The list of donations will not be empty. * Each donation amount will be a non-negative integer.","solution":"class Donation: def __init__(self, fifties, hundreds, two_hundreds): self.fifties = fifties self.hundreds = hundreds self.two_hundreds = two_hundreds def total_donations(donations): total = 0 for donation in donations: total += donation.fifties * 50 total += donation.hundreds * 100 total += donation.two_hundreds * 200 return total"},{"question":"You are tasked with writing a function that decodes a run-length encoded string. A run-length encoded string is a way of compressing strings where sequences of the same character are stored as a single character followed by the count of repetitions. For example, the string \\"aabbbcc\\" would be encoded as \\"a2b3c2\\". Your job is to decode a given run-length encoded string and return the original string. ------ Input Format ------ - The input consists of a single line containing the encoded string. ------ Output Format ------ - Output the decoded string. ------ Constraints ------ - The input string will only contain lowercase alphabetic characters (a-z) and integers (1-9) which represent the counts. - The integer representing the count will always immediately follow the character it counts and will always be a single digit. ------ Sample Input 1 ------ a2b3c2 ------ Sample Output 1 ------ aabbbcc ------ Sample Input 2 ------ x1y2z1 ------ Sample Output 2 ------ xyyz ------ Sample Input 3 ------ m5n1o4 ------ Sample Output 3 ------ mmmmmnoooo","solution":"def decode_rle(encoded_str): Decodes a run-length encoded string. Parameters: encoded_str (str): A run-length encoded string. Returns: str: The decoded string. decoded_str = \\"\\" i = 0 while i < len(encoded_str): char = encoded_str[i] count = int(encoded_str[i + 1]) decoded_str += char * count i += 2 return decoded_str"},{"question":"You are given a list of `n` computers in a network. Each computer has a unique ID from 1 to n. The network is represented as an `n × n` adjacency matrix `connected` where `connected[i][j] = 1` indicates a direct connection between computer i and computer j and `connected[i][j] = 0` otherwise. Each computer can only directly communicate with those to which it has a direct connection. Your task is to identify the number of isolated sub-networks in the overall network. An isolated sub-network is a group of computers where there\'s a path (direct or through other computers) between any pair of computers within the group, and there are no connections between computers of different groups. Input The first line contains an integer `n` (1 ≤ n ≤ 200) – the number of computers. Each of the next `n` lines contains `n` integers (either 0 or 1), representing the adjacency matrix `connected`. Output Print a single integer – the number of isolated sub-networks. Example Input 3 1 1 0 1 1 0 0 0 1 Output 2 Input 4 1 1 0 0 1 1 1 0 0 1 1 0 0 0 0 1 Output 2 Note In the first example, the network can be visualized as: - Computer 1 is connected to Computer 2. - Computer 2 is connected to Computer 1. - Computer 3 is isolated. Thus, there are 2 sub-networks: {1, 2} and {3}. In the second example, the network can be visualized as: - Computers 1 and 2 are connected. - Computers 2 and 3 are connected. - Computer 4 is isolated. Thus, there are 2 sub-networks: {1, 2, 3} and {4}.","solution":"def count_isolated_networks(n, connected): def dfs(node, visited): visited[node] = True for neighbor, is_connected in enumerate(connected[node]): if is_connected and not visited[neighbor]: dfs(neighbor, visited) visited = [False] * n isolated_networks = 0 for i in range(n): if not visited[i]: isolated_networks += 1 dfs(i, visited) return isolated_networks"},{"question":"Tim is working on a data analysis project and needs to optimize an array of integers. He\'s trying to identify the longest subarray that contains no more than two distinct integers. Tim wants to automatically find and analyze such sections within his data. Your task is to help Tim by writing a function that takes an array of integers and returns the length of the longest subarray that contains at most two distinct integers. -----Input----- The input consists of two lines. The first line contains an integer n (1 leq n leq 200,000) — the length of the array. The second line contains n space-separated integers a_i (1 leq a_i leq 10^9) — the elements of the array. -----Output----- Print the length of the longest subarray that contains at most two distinct integers. -----Examples----- Input 10 1 2 1 3 4 1 2 1 1 2 Output 5 Input 7 1 1 1 1 1 1 1 Output 7 Input 6 1 2 3 4 5 6 Output 2 Input 9 1 2 3 1 2 2 3 3 3 Output 5 -----Note----- In the first example, the longest subarray with at most two distinct integers is [1, 2, 1, 1, 2], which has a length of 5. In the second example, the whole array contains only one distinct integer, so the length of the longest subarray is 7. In the third example, each integer is distinct, so the length of the longest subarray with at most two distinct integers is 2. In the fourth example, one of the longest subarrays with at most two distinct integers is [1, 2, 2, 3, 3], which has a length of 5.","solution":"def longest_subarray_with_two_distinct(arr): from collections import defaultdict n = len(arr) if n < 3: return n left, right = 0, 0 max_length = 0 counter = defaultdict(int) while right < n: counter[arr[right]] += 1 while len(counter) > 2: counter[arr[left]] -= 1 if counter[arr[left]] == 0: del counter[arr[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"A social media analytics company wants to track the number of unique hashtags used in a sequence of posts. For any given sequence of posts, you need to find out how many unique hashtags are present and return them in sorted (ascending) order. Hashtags are case-sensitive (i.e., #Hello and #hello are considered different). # Input - The input consists of multiple lines, each representing a post. - Each post contains a string of characters with space-separated words. - Each hashtag starts with the \'#\' character and is followed by alphanumeric characters (no spaces). # Output - For each sequence of posts provided in the input, print the unique hashtags in one line, sorted in ascending order. - There should be no duplicates in the output. # Constraints - Each post contains at most 500 words. - Each word within a post has a maximum length of 30 characters. - There can be up to 1000 posts. # Example Sample Input 1 ``` This is a #Test post with #hashtags Another post with #different #Hashtags and #test yet Another #post with some #unique ones ``` Sample Output 1 ``` #Hashtags #Test #different #hashtags #post #test #unique ``` # Notes - Extract and keep track of hashtags only. - Ignore words that do not start with \'#\' and ensure hashtags are case-sensitive. - Print the hashtags in alphabetical order without duplicates.","solution":"def extract_unique_sorted_hashtags(posts): Extracts unique hashtags from a sequence of social media posts and returns them sorted in ascending order. Args: posts (list of str): A list of posts, where each post is a string containing space-separated words. Returns: list of str: A list of unique hashtags, sorted in ascending order. hashtags = set() for post in posts: words = post.split() for word in words: if word.startswith(\'#\') and word[1:].isalnum(): hashtags.add(word) return sorted(hashtags)"},{"question":"In a gaming environment, there are a number of rectangular platforms. Each platform is defined by two coordinates: (X1, Y1) and (X2, Y2), which represent the bottom-left and top-right corners of the rectangle, respectively. A player is initially standing at a starting coordinate (Sx, Sy). The goal is to determine the minimum number of platforms the player will have to jump on in order to reach a target coordinate (Tx, Ty). The player can only jump between platforms if the target platform is adjacent or overlaps in one dimension. Platforms are considered adjacent if they share at least one common edge either vertically or horizontally. If it is not possible to reach the target platform, return -1. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The first line of each test case contains four space-separated integers Sx, Sy, Tx, and Ty — the coordinates of the starting and target positions. - The next line of each test case will contain a single integer P, denoting the number of platforms. - Each of the next P lines will contain four space-separated integers X1, Y1, X2, and Y2 representing the corners of each platform. ------ Output Format ------ For each test case, output on a new line: - The minimum number of platform jumps required to reach the target coordinate. - Return -1 if it is not possible to reach the target coordinate. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ P ≤ 100 -1000 ≤ X1, Y1, X2, Y2, Sx, Sy, Tx, Ty ≤ 1000 ----- Sample Input 1 ------ 2 0 0 10 10 3 0 0 2 2 2 2 5 5 5 5 10 10 0 0 3 3 3 0 0 2 2 5 5 7 7 8 8 10 10 ----- Sample Output 1 ------ 2 -1 ----- Explanation 1 ------ Test case 1: The player will jump from (0, 0) to platform (0, 0, 2, 2), then to platform (2, 2, 5, 5), and finally to platform (5, 5, 10, 10) to reach (10, 10). A total of 2 jumps are required. Test case 2: The player cannot reach platform (3, 3) from the starting position (0, 0), making it impossible to reach the target coordinate. Therefore, the output is -1.","solution":"from collections import deque def min_platform_jumps(Sx, Sy, Tx, Ty, platforms): def is_adjacent_or_overlap(p1, p2): # p1 and p2 are platforms with structure (X1, Y1, X2, Y2) X1_1, Y1_1, X2_1, Y2_1 = p1 X1_2, Y1_2, X2_2, Y2_2 = p2 if X1_1 <= X2_2 and X2_1 >= X1_2 and (Y1_1 == Y2_2 or Y2_1 == Y1_2): return True # vertically adjacent or overlap if Y1_1 <= Y2_2 and Y2_1 >= Y1_2 and (X1_1 == X2_2 or X2_1 == X1_2): return True # horizontally adjacent or overlap return False start_platform = None target_platform = None for platform in platforms: X1, Y1, X2, Y2 = platform if X1 <= Sx <= X2 and Y1 <= Sy <= Y2: start_platform = platform if X1 <= Tx <= X2 and Y1 <= Ty <= Y2: target_platform = platform if not start_platform or not target_platform: return -1 if start_platform == target_platform: return 0 # BFS queue = deque([(start_platform, 0)]) visited = set() visited.add(tuple(start_platform)) while queue: current, jumps = queue.popleft() for next_platform in platforms: if tuple(next_platform) in visited: continue if is_adjacent_or_overlap(current, next_platform): if next_platform == target_platform: return jumps + 1 queue.append((next_platform, jumps + 1)) visited.add(tuple(next_platform)) return -1 def solve(test_cases): results = [] for Sx, Sy, Tx, Ty, platforms in test_cases: results.append(min_platform_jumps(Sx, Sy, Tx, Ty, platforms)) return results # Helper function to parse inputs def parse_input(input_str): inputs = input_str.strip().split(\\"n\\") T = int(inputs[0]) index = 1 test_cases = [] for _ in range(T): Sx, Sy, Tx, Ty = map(int, inputs[index].split()) index += 1 P = int(inputs[index]) index += 1 platforms = [] for _ in range(P): X1, Y1, X2, Y2 = map(int, inputs[index].split()) platforms.append((X1, Y1, X2, Y2)) index += 1 test_cases.append((Sx, Sy, Tx, Ty, platforms)) return test_cases def print_output(results): for result in results: print(result)"},{"question":"Given an array of integers nums and an integer target, you need to determine if there are two distinct elements in the array that add up to the target value. If such a pair exists, return their indices in the form of a tuple. If there are multiple pairs, return the indices of the first pair found. If no such pair exists, return an empty tuple. Example 1: Input: nums = [2, 7, 11, 15] target = 9 Output: (0, 1) Explanation: nums[0] + nums[1] = 2 + 7 = 9 Example 2: Input: nums = [3, 2, 4] target = 6 Output: (1, 2) Explanation: nums[1] + nums[2] = 2 + 4 = 6 Example 3: Input: nums = [3, 3] target = 6 Output: (0, 1) Explanation: nums[0] + nums[1] = 3 + 3 = 6 Your Task: You don\'t need to read input or print anything. Your task is to complete the function two_sum() which takes an array of integers nums and an integer target as input parameters and returns a tuple containing indices of the two numbers such that they add up to the target. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= len(nums) <= 10^5 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def two_sum(nums, target): Returns a tuple containing indices of the two numbers such that they add up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return ()"},{"question":"Mona is a software engineer at a tech firm. One of her tasks involves validating user input for a new feature. For this feature, users can input a string that must be a palindrome after removing at most one character. Mona needs to write a function to validate these strings efficiently. A string is a palindrome if it reads the same backwards as forwards. Mona has asked you to help her by writing a function that determines if the input string can become a palindrome after at most one character removal. INPUT - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string S. OUTPUT For each test case, output \\"YES\\" if the string can be made into a palindrome by removing at most one character; otherwise, output \\"NO\\". CONSTRAINTS 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 SAMPLE INPUT 3 abca racecar abcdef SAMPLE OUTPUT YES YES NO Explanation For the first string \\"abca\\", removing \'b\' or \'c\' will make it a palindrome. For the second string \\"racecar\\", it is already a palindrome. For the third string \\"abcdef\\", no single character removal can make it a palindrome.","solution":"def can_be_palindrome_after_one_removal(s: str) -> bool: def is_palindrome_range(start, end): return all(s[i] == s[end - i + start] for i in range(start, (end + start) // 2 + 1)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Work out if either the deletion of the left or right character helps return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True def validate_strings_can_become_palindromes(T, strings): result = [] for s in strings: if can_be_palindrome_after_one_removal(s): result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"You are given a list of connections where each connection is a tuple of two integers representing a direct path between two cities. There are N cities labeled from 0 to N-1. You are also given a list of queries where each query is a tuple of two integers representing two cities. For each query, determine if there is a path between the two cities, you only need to know if it is possible (Yes/No). Input There is only a single test case per input file. The first line of input contains two space-separated integers N and M denoting the number of cities and the number of direct connections respectively. The next M lines contain two space-separated integers u and v representing a direct connection between city u and city v. The next line contains an integer Q denoting the number of queries. The following Q lines contain two space-separated integers x and y representing a query to check if there\'s a path between city x and city y. Output For each query, output \\"Yes\\" if there is a path between x and y, otherwise output \\"No\\". Constraints 1 ≤ N ≤ 10^4 1 ≤ M ≤ 10^4 1 ≤ Q ≤ 10^4 0 ≤ u, v, x, y < N Example Input 5 4 0 1 1 2 2 3 3 4 3 0 4 1 3 0 5 Output Yes Yes No Explanation Test 1: The cities and connections form a path from 0 to 4 through cities 1, 2, and 3. The queries ask if there\'s a path between 0 and 4 (yes), 1 and 3 (yes), and 0 and 5 (no).","solution":"def find_connected_components(n, connections): def dfs(node, component_id): stack = [node] while stack: curr = stack.pop() if components[curr] == -1: components[curr] = component_id for neighbor in adjacency_list[curr]: stack.append(neighbor) adjacency_list = [[] for _ in range(n)] components = [-1] * n for u, v in connections: adjacency_list[u].append(v) adjacency_list[v].append(u) component_id = 0 for city in range(n): if components[city] == -1: dfs(city, component_id) component_id += 1 return components def are_cities_connected(n, connections, queries): components = find_connected_components(n, connections) results = [] for x, y in queries: if 0 <= x < n and 0 <= y < n and components[x] == components[y]: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are responsible for maintaining a list of guests for an event. However, due to some errors, several guests have been added to the list multiple times. Your task is to clean up the list and ensure that each guest appears only once. You are given a list of guest names (strings), and you need to return a new list with duplicate names removed. The new list should maintain the order of first appearances from the original list. Write a function `remove_duplicates(guest_list)` that takes a list of strings `guest_list` as input and returns a list of strings without duplicates. # Example ```python guest_list = [\\"Alice\\", \\"Bob\\", \\"Alice\\", \\"Charlie\\", \\"Bob\\", \\"Dave\\"] print(remove_duplicates(guest_list)) # Output: [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"Dave\\"] ``` # Constraints - The input list `guest_list` can have up to 10,000 names. - Each name in `guest_list` is a non-empty string consisting of only alphabetical characters. - The names are case-sensitive, meaning \\"Alice\\" and \\"alice\\" are considered different names.","solution":"def remove_duplicates(guest_list): Returns a new list with duplicate names removed while maintaining the order of first appearances. seen = set() unique_guests = [] for guest in guest_list: if guest not in seen: seen.add(guest) unique_guests.append(guest) return unique_guests"},{"question":"In the kingdom of Zelandon, there is a network of cities connected by bidirectional roads, where every road has an equal travel distance. Given that there are `n` cities and `m` roads, some pairs of cities might be disconnected. Additionally, the king wants to design a transport system consisting of heavyweight trucks that deliver goods from one city to any other reachable city. Each road can potentially be blocked due to landslides and other natural disasters, which can render some parts of the network unusable for a period. With frequent road maintenance checks, the kingdom keeps a record of these blockages over time. Each blockage event is described by two cities served by the blocked road and the time duration for which the road will be blocked. The king requires a program to help plan efficient routes for the trucks to deliver the goods, bypassing any blocked roads within the specified duration. The program must answer multiple queries regarding the minimum number of roads required to reach a destination city from a starting city, without using any roads that are blocked during the planned travel period. If it\'s impossible to reach the destination city, the program should indicate so. Formally, the task is to compute the minimum number of roads for the journey, considering blockage events and to determine the optimal path for multiple delivery requests. Input: - The first line contains two integers `n` (1 ≤ n ≤ 5000) and `m` (0 ≤ m ≤ min(5000, n*(n-1)/2)), the number of cities and roads respectively. - Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n), indicating that there is a road between cities `u` and `v`. - The next line contains an integer `b` (0 ≤ b ≤ 5000), representing the number of blockage events. - Each of the next `b` lines contains three integers `x`, `y` and `d` (1 ≤ x, y ≤ n, 1 ≤ d ≤ 10^6), signifying that the road between cities `x` and `y` is blocked for `d` units of time. - The next line contains an integer `q` (1 ≤ q ≤ 1000), representing the number of queries. - Each of the next `q` lines contains three integers `start`, `end`, and `time` (1 ≤ start, end ≤ n, 1 ≤ time ≤ 10^9), describing a query for the route from city `start` to city `end` at a specific `time`. Output: For each query, output a single integer representing the minimum number of roads needed to travel from the starting city to the destination city, considering the blocked roads at the given travel time. If there is no valid path, output `-1`. Example: Input: ``` 6 7 1 2 2 3 3 4 4 5 5 6 6 1 2 5 2 2 3 3 4 5 2 3 1 5 2 1 6 1 3 6 4 ``` Output: ``` 2 1 3 ```","solution":"from collections import defaultdict, deque def minimum_roads(n, m, roads, b, blockages, q, queries): def bfs_modified(adj, blockages, start, end, time): if start == end: return 0 visited = [False] * n road_count = [float(\'inf\')] * n road_count[start] = 0 queue = deque([(start, 0)]) # (city, step_count) while queue: current_city, steps = queue.popleft() for neighbor in adj[current_city]: if not visited[neighbor]: if (current_city, neighbor) not in blockages or time > blockages[(current_city, neighbor)]: if road_count[neighbor] > steps + 1: road_count[neighbor] = steps + 1 queue.append((neighbor, steps + 1)) return road_count[end] if road_count[end] != float(\'inf\') else -1 adj = defaultdict(list) for u, v in roads: adj[u-1].append(v-1) adj[v-1].append(u-1) block_dict = {} for x, y, d in blockages: block_dict[(x-1, y-1)] = d block_dict[(y-1, x-1)] = d results = [] for start, end, time in queries: result = bfs_modified(adj, block_dict, start-1, end-1, time) results.append(result) return results"},{"question":"Adam is working on a new social networking site and he\'s dealing with the concept of \'friend circles\'. A friend circle is a group of people who are directly or indirectly friends. Adam needs to process several update and query operations on the friendship relations among the users. Help him manage these operations efficiently. Each user is represented by an integer from 1 to n. Initially, there are no friendships. Adam needs to process q operations of the following types: 1. Create a friendship between user `u` and user `v`. 2. Check if user `u` and user `v` belong to the same friend circle. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of users and the number of operations. Each of the next q lines contains three integers t_i, u_i, v_i (1 ≤ t_i ≤ 2, 1 ≤ u_i, v_i ≤ n), representing the type of the operation and the users involved. Output For each operation of type 2, print \\"YES\\" if user `u` and user `v` are in the same friend circle, otherwise print \\"NO\\". Example Input 5 5 1 1 2 1 2 3 2 1 3 1 4 5 2 1 4 Output YES NO Explanation After the first two operations, users 1, 2, and 3 are in the same friend circle. Hence, the response to the third operation is \\"YES\\". After the fourth operation, users 4 and 5 are in a separate friend circle. Hence, the response to the fifth operation is \\"NO\\".","solution":"class UnionFind: def __init__(self, n): Initialize `n` users such that each user is their own parent (self-loop). self.parent = list(range(n + 1)) self.rank = [0] * (n + 1) def find(self, u): Return the root/parent of `u` with path compression. if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): Union by rank. Connect the roots of `u` and `v`. root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def process_operations(n, operations): Process the operations and return the results of type 2 operations. uf = UnionFind(n) results = [] for t, u, v in operations: if t == 1: uf.union(u, v) elif t == 2: if uf.find(u) == uf.find(v): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a grid of size N x M. Each cell in the grid can either be a free cell (\'.\') or an obstacle (\'#\'). You start in the top-left corner (0, 0) and you want to reach the bottom-right corner (N-1, M-1). You can move up, down, left, or right, but you cannot move diagonally. You cannot move through obstacles. Your task is to calculate the number of distinct shortest paths from the start to the goal. If there are no paths, return 0. Constraints * 1 ≦ N, M ≦ 1000 Input The input is given from Standard Input in the following format: N M grid Each of the next N lines contains M characters, describing the grid. Output Print a single integer, the number of distinct shortest paths from (0, 0) to (N-1, M-1). Examples Input 3 3 ... .#. ... Output 2 Input 3 3 .#. .#. ... Output 1 Input 3 3 .#. # ... Output 0","solution":"from collections import deque def number_of_shortest_paths(N, M, grid): Calculate the number of distinct shortest paths from top-left corner (0, 0) to bottom-right corner (N-1, M-1). Args: N : int : number of rows in the grid M : int : number of columns in the grid grid : List[str] : grid containing \'.\' for free cells and \'#\' for obstacles Returns: int : number of distinct shortest paths if possible, otherwise 0 if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return 0 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] dist = [[-1] * M for _ in range(N)] paths = [[0] * M for _ in range(N)] queue = deque([(0, 0)]) dist[0][0] = 0 paths[0][0] = 1 while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\': if dist[nx][ny] == -1: dist[nx][ny] = dist[x][y] + 1 paths[nx][ny] = paths[x][y] queue.append((nx, ny)) elif dist[nx][ny] == dist[x][y] + 1: paths[nx][ny] += paths[x][y] return paths[N-1][M-1]"},{"question":"You have an array of integers and you want to find the length of the longest subarray that contains at most two distinct integers. Write a function that takes an array of integers as input and returns the length of the longest subarray with at most two different integers. # Function Signature ```python def longest_subarray_with_two_distinct(arr: List[int]) -> int: pass ``` # Input: - An array of integers `arr` such that `1 <= len(arr) <= 10^5` and each element will be in the range `[-10^4, 10^4]`. # Output: - Return a single integer, representing the length of the longest subarray that contains at most two distinct integers. # Examples: Example 1: ```python arr = [1, 2, 1, 2, 3] # The longest subarray with at most two distinct integers is [1, 2, 1, 2], so the output should be 4. output = longest_subarray_with_two_distinct(arr) print(output) # Output: 4 ``` Example 2: ```python arr = [4, 4, 4, 4, 4] # The array itself contains only one distinct integer, hence longest subarray is the complete array. So the output should be 5. output = longest_subarray_with_two_distinct(arr) print(output) # Output: 5 ``` Example 3: ```python arr = [1, 2, 3, 4, 5] # Only subarrays with at most two distinct integers are of length 2, so the output should be 2. output = longest_subarray_with_two_distinct(arr) print(output) # Output: 2 ``` # Constraints: - The array length `n` (1 ≤ n ≤ 10^5) - Elements of array `arr` will be between `-10^4` and `10^4`.","solution":"from typing import List def longest_subarray_with_two_distinct(arr: List[int]) -> int: if not arr: return 0 last_occurrence = {} start = 0 max_length = 0 for end, value in enumerate(arr): last_occurrence[value] = end if len(last_occurrence) > 2: leftmost = min(last_occurrence.values()) del last_occurrence[arr[leftmost]] start = leftmost + 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Yuki is a talented artist who loves symmetry. She has recently come across an interesting problem related to symmetry in strings. A symmetric string is a string that reads the same backward as forward. For instance, \\"radar\\" and \\"level\\" are both symmetric strings. Yuki has a string s of length n and she wants to form a symmetric substring from s. She can remove characters from s to form this symmetric substring but cannot rearrange the characters. For example, from the string \\"abca\\", she can remove \'b\' and \'c\' to obtain the symmetric substring \\"aa\\". Your task is to determine the length of the longest symmetric substring that Yuki can form from the string s. -----Input----- The first line contains an integer n (1 leq n leq 2000), the length of the string s. The second line contains the string s consisting of only lowercase English letters. -----Output----- Print a single integer: the length of the longest symmetric substring that can be formed from the string s. -----Examples----- Input: 5 abaca Output: 3 Input: 6 banana Output: 5 Input: 7 racecar Output: 7 -----Note----- In the first test, the longest symmetric substring that can be formed is \\"aba\\", which has a length of 3. In the second test, the longest symmetric substring that can be formed is \\"anana\\", which has a length of 5. In the third test, the entire string \\"racecar\\" is symmetric and its length is 7.","solution":"def longest_symmetric_substring_length(n, s): def is_palindrome(sub): return sub == sub[::-1] longest_length = 1 for i in range(n): for j in range(i + 1, n + 1): if is_palindrome(s[i:j]): longest_length = max(longest_length, j - i) return longest_length"},{"question":"A tree is a special type of graph that has exactly N nodes and N-1 edges, where each node is labeled from 1 to N. In a rooted tree, one of the nodes is chosen as the root. The parent-child relationship between the nodes is determined by the edges. The depth of a node in a tree is the number of edges in the path from the root node to that node. For a given N and a list of edges representing the tree, you need to determine the maximum depth of the tree when it is rooted at node 1. -----Input format----- - The first line contains a single integer N, the number of nodes in the tree. - The next N-1 lines each contain two integers u and v, indicating that there is an edge between nodes u and v. -----Output format----- A single integer, the maximum depth of the tree when it is rooted at node 1. -----Test Data----- In all subtasks, 1 ≤ N ≤ 100000. The test data is grouped into 4 subtasks. Subtask 1 (10 marks): 1 ≤ N ≤ 100 Subtask 2 (20 marks): 1 ≤ N ≤ 1000 Subtask 3 (35 marks): 1 ≤ N ≤ 10000 Subtask 4 (35 marks): 1 ≤ N ≤ 100000 -----Example----- Here is the sample input and output corresponding to the example above: -----Sample input----- 5 1 2 1 3 3 4 3 5 -----Sample output----- 2 Note: Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!","solution":"from collections import defaultdict, deque def maximum_depth_tree(N, edges): # Create an adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # BFS to find the maximum depth from node 1 def bfs(root): visited = [False] * (N + 1) queue = deque([(root, 0)]) visited[root] = True max_depth = 0 while queue: node, depth = queue.popleft() max_depth = max(max_depth, depth) for neighbor in tree[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, depth + 1)) return max_depth return bfs(1)"},{"question":"You are given an array of integers, and your task is to find the length of the longest subarray which contains no more than two distinct integers. The integers in the subarray should be consecutive in the original array. Some examples of such subarrays include: [1, 1, 2] from [1, 1, 2, 3, 4], [2, 3, 3, 4] from [1, 2, 2, 3, 3, 4, 1]. -----Input----- - The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. - The second line of input contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^5) — the elements of the array. -----Output----- Output one number — the length of the longest subarray that contains no more than two distinct integers. -----Examples----- Input 5 1 1 2 3 4 Output 3 Input 7 1 2 2 3 3 4 1 Output 4","solution":"def longest_subarray_with_two_distinct(arr): Given an array of integers, this function finds the length of the longest subarray which contains no more than two distinct integers. if not arr: return 0 left, right = 0, 0 max_len = 0 hashmap = {} while right < len(arr): if len(hashmap) <= 2: hashmap[arr[right]] = right right += 1 if len(hashmap) > 2: leftmost = min(hashmap.values()) del hashmap[arr[leftmost]] left = leftmost + 1 max_len = max(max_len, right - left) return max_len"},{"question":"You are given an array of integers `nums` and an integer `target`. You need to determine if there are two distinct indices `i` and `j` in the array such that `nums[i] + nums[j] = target`. If such a pair of indices exists, return the indices in the form (i, j). If no such pair exists, return an empty list. Note: The pairs (i, j) and (j, i) are considered the same and should not be counted twice. The indices should be returned in increasing order (i < j). Example 1: Input: nums = [2, 7, 11, 15] target = 9 Output: [0, 1] Explanation: The sum of nums[0] and nums[1] is 9. Example 2: Input: nums = [3, 2, 4] target = 6 Output: [1, 2] Explanation: The sum of nums[1] and nums[2] is 6. Example 3: Input: nums = [3, 3] target = 6 Output: [0, 1] Explanation: The sum of nums[0] and nums[1] is 6. Your Task: You don\'t need to read inputs or print anything. Complete the function twoSum() that takes an array of integers `nums` and an integer `target` as input parameters and returns the list of indices [i, j] as mentioned in the problem statement. If no such indices exist, return an empty list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ nums.length ≤ 10^5 -10^9 ≤ nums[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9","solution":"def twoSum(nums, target): Returns indices of the two numbers such that they add up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Word Frequency in a String In text analysis, determining the frequency of each word in a string is a common task. This can help in various applications like text summarization, keyword extraction, and understanding text content better. Given a string `text`, your task is to implement a function `word_frequency` that calculates the frequency of each word in the string and returns a dictionary. Words are defined as sequences of characters separated by spaces. Words must be converted to lowercase to ensure case insensitivity. Requirements 1. The function should ignore punctuation and consider only alphanumeric characters. 2. Words are case insensitive, meaning \\"Word\\" and \\"word\\" should be counted as the same word. Example ```python input: \\"Hello, hello! How are you? Are you okay?\\" output: {\'hello\': 2, \'how\': 1, \'are\': 2, \'you\': 2, \'okay\': 1} ``` Hint - You might find the `re` module helpful for removing punctuation and splitting the text into words. - Utilize a dictionary to maintain and update word counts efficiently.","solution":"import re from collections import defaultdict def word_frequency(text): Returns a dictionary with the frequency of each word in the input text. Words are case insensitive and punctuation is ignored. # Remove punctuation and convert text to lowercase text = re.sub(r\'[W_]+\', \' \', text).lower() words = text.split() freq_dict = defaultdict(int) for word in words: freq_dict[word] += 1 return dict(freq_dict)"},{"question":"In a software company, employees are categorized into different levels based on their years of experience. Each level has a corresponding badge number that follows a certain pattern. The pattern starts with 1 badge for level 1, 3 badges for level 2, 6 badges for level 3, and so on. The nth level has (n * (n + 1)) / 2 badges. Your task is to find out the total number of badges all employees across all levels from level 1 up to level N have. INPUT: A single integer T, denoting the number of test cases. Then, following T lines will contain a single line containing integer N. OUTPUT: An integer for each test case denoting the total number of badges from level 1 to level N. Constraints: 0 < T ≤ 100 1 ≤ N ≤ 10^5 SAMPLE INPUT 2 1 3 SAMPLE OUTPUT 1 10 Explanation In the first case, there is only level 1, which includes 1 badge (1). In the second case, the total badges across levels 1, 2, and 3 would be: Level 1: 1 badge Level 2: 3 badges (2+1) Level 3: 6 badges (3+2+1) Total = 1 + 3 + 6 = 10 badges","solution":"def total_badges_for_levels(N): Returns the total number of badges for levels from 1 to N. # Sum of badges is sum of the sum of first n natural numbers from 1 to N return (N * (N + 1) * (2 * N + 1)) // 6 def badges_across_levels(test_cases): Processes multiple test cases. Args: test_cases : List of integers representing values of N for each test case. Returns: List of integers representing the total number of badges for each test case. return [total_badges_for_levels(N) for N in test_cases]"},{"question":"Given a string s and an integer k, write a function to check if the string can be formed by repeating a substring of length k. If yes, return True; otherwise, return False. Example 1: Input: s = \\"ababab\\", k = 2 Output: True Explanation: The string can be formed by repeating the substring \\"ab\\" 3 times. Example 2: Input: s = \\"abcabcabc\\", k = 3 Output: True Explanation: The string can be formed by repeating the substring \\"abc\\" 3 times. Example 3: Input: s = \\"abcd\\", k = 3 Output: False Explanation: The string cannot be formed by repeating any substring of length 3. Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function isRepeatSubstring() that takes a string s and an integer k as parameters and returns a boolean. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: 1 ≤ len(s) ≤ 10^5 1 ≤ k ≤ len(s)","solution":"def isRepeatSubstring(s, k): Checks if the string s can be formed by repeating a substring of length k. if len(s) % k != 0: return False # If the length of s is not a multiple of k, return False # Obtain the substring of length k substring = s[:k] # Determine how many times the substring should repeat to form the string s repeat_count = len(s) // k # Form the possible repeated string repeated_s = substring * repeat_count return repeated_s == s"},{"question":"Bhavesh loves palindromes and he came up with a new challenge for his friend, Anil. Bhavesh asks Anil to write a program that can generate the longest palindromic subsequence from a given string. Bhavesh explains that a palindromic subsequence is a sequence that appears in the same order from both left to right and right to left, but it doesn\'t necessarily have to be a contiguous substring. Given a string s, help Anil write a program to find the length of the longest palindromic subsequence. Input A single line containing the string s. Output A single line containing an integer, the length of the longest palindromic subsequence in s. Constraints 1 <= length of s <= 1000 s consists only of lowercase English letters. SAMPLE INPUT bbabcbcab SAMPLE OUTPUT 7 Explanation: The longest palindromic subsequence is \\"babcbab\\" which has a length of 7.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the string s. n = len(s) dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the dp matrix for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j]: if cl == 2: dp[i][j] = 2 else: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # Length of the longest palindromic subsequence return dp[0][n - 1]"},{"question":"Write a function that calculates the maximum possible sum of non-adjacent numbers from a given list of integers. Constraints: * 0 ≤ len(A) ≤ 100 * -10,000 ≤ Ai ≤ 10,000 Input: An integer n followed by a sequence of n integers. Output: Print the maximum sum of non-adjacent numbers. Examples Input 5 3 2 7 10 Output 13 Input 4 3 2 5 10 Output 13 Input 6 3 2 5 10 7 8 Output 21","solution":"def max_non_adjacent_sum(nums): Returns the maximum sum of non-adjacent numbers from the given list. if not nums: return 0 if len(nums) == 1: return max(0, nums[0]) incl = 0 # Sum including the current element excl = 0 # Sum excluding the current element for num in nums: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl)"},{"question":"You are a forest ranger tasked with monitoring wildlife in a large, rectangular forest. The forest is divided into a grid of cells, where each cell can either be empty or have an animal. Your goal is to make periodic reports about the distribution of animals in the forest. At any point, you may be asked to report the number of animals located within a specific rectangular sub-area of the forest. You need to be able to efficiently handle multiple such queries. Your task is to write code that, given the locations of animals and a series of queries about the number of animals in specific sub-areas, computes the desired counts efficiently. -----Input----- The input consists of: 1. The first line contains two integers R and C (1 leq R, C leq 1000) representing the number of rows and columns in the forest grid. 2. The next R lines each contain C characters, where a \'.\' (period) represents an empty cell and an \'A\' (capital letter A) represents a cell with an animal. 3. The following line contains a single integer Q (1 leq Q leq 10^5), the number of queries. 4. The next Q lines each contain four integers r1, c1, r2, and c2 (1 leq r1 leq r2 leq R, 1 leq c1 leq c2 leq C), describing a query that asks for the number of animals in the sub-area with its top-left corner at (r1, c1) and its bottom-right corner at (r2, c2). -----Output----- For each query, output a single integer, the number of animals in the specified sub-area. -----Examples----- Input 5 5 ..... ..... .A.A. ..A.. ..... 3 1 1 3 3 2 2 5 5 3 1 3 5 Output 1 3 2 -----Note----- For the example, the forest grid will look like this: ..... ..... .A.A. ..A.. ..... For the first query, the specified sub-area is: ..... ..A This includes only one \'A\' at position (3, 2). For the second query, the specified sub-area is: ..... .A.A ..A. This includes three \'A\'s at positions (3, 2), (3, 4), and (4, 3). For the third query, the specified sub-area is: .A.A. This includes two \'A\'s at positions (3, 2) and (3, 4).","solution":"def preprocess_forest(R, C, forest): # Create a 2D array to store cumulative sum dp = [[0] * (C + 1) for _ in range(R + 1)] # Fill the cumulative sum array for r in range(1, R + 1): for c in range(1, C + 1): dp[r][c] = (1 if forest[r - 1][c - 1] == \'A\' else 0) + dp[r - 1][c] + dp[r][c - 1] - dp[r - 1][c - 1] return dp def query_animals(dp, r1, c1, r2, c2): # Convert to 1-based indexing for calculation return dp[r2][c2] - dp[r1 - 1][c2] - dp[r2][c1 - 1] + dp[r1 - 1][c1 - 1] # Function to handle the entire process based on input def forest_animals(R, C, forest, queries): # Preprocess the forest to create the cumulative sum array dp = preprocess_forest(R, C, forest) # Process each query and get the result results = [] for r1, c1, r2, c2 in queries: results.append(query_animals(dp, r1, c1, r2, c2)) return results"},{"question":"In this task, your goal is to create a function that calculates the longest possible walk on a triangular grid. The grid\'s cells contain non-negative integers representing the \\"cost\\" to step into them. The walk\'s starting point is always at the top of the triangle, and it has to end at the bottom row, moving to adjacent cells in each step (either directly downward or diagonally down-left or down-right). Input Your function will receive a single argument: - tri: a list of lists (or array of arrays), where each list represents a row of the triangle grid. The length of the triangle\'s side will be at least 2 and no more than 100. Each cell contains a non-negative integer. Output Your function should return an integer: the sum of the costs of the cells visited on the longest possible walk from the top to the bottom of the triangle. Example In the following example, the argument is: tri = [ [2], [3, 4], [6, 5, 7], [4, 1, 8, 3] ] The grid looks like this: 2 3 4 6 5 7 4 1 8 3 The possible paths are: - 2 → 3 → 6 → 4 (cost: 15) - 2 → 3 → 6 → 1 (cost: 12) - 2 → 3 → 5 → 8 (cost: 18) - 2 → 3 → 5 → 3 (cost: 13) - 2 → 4 → 5 → 1 (cost: 12) - 2 → 4 → 5 → 8 (cost: 19) ** Max path cost** - 2 → 4 → 7 → 8 (cost: 21) - 2 → 4 → 7 → 3 (cost: 16) The longest walk\'s cost is 21. Test Specifications All inputs will be valid. Full Test Suite: 12 fixed tests and 100 random tests. No external libraries are allowed for this task. If you enjoyed this task, be sure to check out similar puzzles.","solution":"def longest_walk(tri): Calculates the longest possible walk on a triangular grid. Parameters: tri (list of list of int): A list of lists representing the triangular grid, where each inner list represents a row. Returns: int: The sum of the costs of the cells visited on the longest possible walk. # Start from the bottom row and work upwards to calculate the max walk for i in range(len(tri) - 2, -1, -1): for j in range(len(tri[i])): tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1]) return tri[0][0]"},{"question":"-----Hostel Inventory Management----- You are managing the inventory of supplies in a hostel. The supplies include items such as bedsheets, pillows, kitchen utensils, and cleaning tools. The inventory is updated daily and it is essential to know how many of each item are available at any given time. The hostel management system should be able to process different types of queries, such as adding items, removing items, and checking the quantity of a specific item. You are to implement a system that processes inventory operations and provides the requested data when queried. -----Input Format:----- - The first line contains a single integer, N, representing the number of operations. - The next N lines each represent an operation and can be one of the following: - \'add item_name quantity\': Increase the number of item_name by quantity. - \'remove item_name quantity\': Decrease the number of item_name by quantity. It is guaranteed that there will be enough items when this operation is performed. - \'query item_name\': Output the current quantity of item_name. It is guaranteed that: - item_name consists of lowercase English letters only, with a maximum length of 30 characters. - 1 ≤ N ≤ 10^5 - 1 ≤ quantity ≤ 10^6 -----Output Format----- For each \'query\' operation, output the current quantity of the requested item. -----Sample Input----- 7 add bedsheet 10 add pillow 5 query bedsheet remove bedsheet 3 query bedsheet query pillow remove pillow 2 -----Sample Output----- 10 7 5 Note: Ensure that your program reads from standard input and writes to standard output without any additional output.","solution":"def hostel_inventory_management(n, operations): inventory = {} results = [] for op in operations: if op.startswith(\'add\'): parts = op.split() item_name = parts[1] quantity = int(parts[2]) if item_name in inventory: inventory[item_name] += quantity else: inventory[item_name] = quantity elif op.startswith(\'remove\'): parts = op.split() item_name = parts[1] quantity = int(parts[2]) if item_name in inventory: inventory[item_name] -= quantity elif op.startswith(\'query\'): parts = op.split() item_name = parts[1] if item_name in inventory: results.append(inventory[item_name]) else: results.append(0) return results"},{"question":"A knight is located on an 8x8 chessboard. The knight can make one of up to eight possible moves each turn, following the standard rules of chess. Given the starting position of the knight and a target position, determine the minimum number of moves required for the knight to reach the target position. -----Input----- The first line of input will contain two integers x1 and y1 (1 ≤ x1, y1 ≤ 8), representing the starting position of the knight on the chessboard. The second line of input will contain two integers x2 and y2 (1 ≤ x2, y2 ≤ 8), representing the target position of the knight on the chessboard. -----Output----- Output a single integer equal to the minimum number of moves required for the knight to reach the target position from the starting position. -----Examples----- Input 1 1 8 8 Output 6 Input 1 1 2 3 Output 1 Input 4 5 4 5 Output 0 -----Note----- For the first sample, the knight moves from (1,1) to (8,8) in 6 moves along the following path: (1,1) -> (2,3) -> (3,5) -> (4,7) -> (5,5) -> (6,7) -> (8,8). For the second sample, the knight moves from (1,1) to (2,3) in 1 move. For the third sample, the knight is already at the target position, requiring 0 moves.","solution":"from collections import deque def min_knight_moves(start, target): # All possible movements for a knight in Chess directions = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] def is_within_board(x, y): return 1 <= x <= 8 and 1 <= y <= 8 # Unpack start and target positions x1, y1 = start x2, y2 = target # If start and target are already same if (x1, y1) == (x2, y2): return 0 # BFS initialization queue = deque([(x1, y1, 0)]) visited = set((x1, y1)) # BFS loop while queue: x, y, moves = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if (nx, ny) == (x2, y2): return moves + 1 if is_within_board(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) return -1 # this line should never be reached as the target is always reachable"},{"question":"Given an undirected graph with N nodes and M edges, you need to find if there exists a path between two given nodes u and v that passes through exactly k nodes. A valid path is defined as a sequence of nodes starting from node u, ending at node v, and with the length of the path being exactly k nodes long (including the end nodes u and v). Develop a function to determine if such a path exists for each pair (u, v) and given k value. ------ Input Format ------ - The first line of input will contain two space-separated integers N and M — the number of nodes and the number of edges, respectively. - The next M lines each contain two space-separated integers u and v that describe an edge between node u and node v. - The next line contains a single integer Q — the number of queries. - The next Q lines each contain three space-separated integers u, v, and k representing a query. ------ Output Format ------ For each query, print \\"Yes\\" if there exists a path between u and v that passes through exactly k nodes, otherwise print \\"No\\". ------ Constraints ------ - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 3000 - 1 ≤ u, v ≤ N - 2 ≤ k ≤ N - 1 ≤ Q ≤ 1000 Note: There can be multiple edges between the same pair of nodes, and the graph can have self-loops. ------ Sample Input ------ 6 7 1 2 2 3 3 4 4 5 5 6 1 6 3 6 3 1 4 4 1 6 2 2 5 3 ------ Sample Output ------ Yes Yes No ------ Explanation ------ - For the first query, there exists a path from node 1 to node 4 that passes through exactly 4 nodes: [1 -> 2 -> 3 -> 4]. - For the second query, there exists a path from node 1 to node 6 that passes through exactly 2 nodes: [1 -> 6]. - For the third query, there is no path from node 2 to node 5 that passes through exactly 3 nodes. The possible paths are [2 -> 3 -> 4 -> 5 (4 nodes)] or through other nodes but cannot satisfy the condition exactly.","solution":"from collections import deque, defaultdict def find_exact_path(n, edges, queries): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(u, distance, target_distance, target): queue = deque([(u, 1)]) visited = set() while queue: current_node, current_distance = queue.popleft() if current_node == target and current_distance == target_distance: return True if current_distance >= target_distance: continue visited.add((current_node, current_distance)) for neighbor in graph[current_node]: if (neighbor, current_distance + 1) not in visited: queue.append((neighbor, current_distance + 1)) return False results = [] for u, v, k in queries: results.append(\\"Yes\\" if bfs(u, defaultdict(int), k, v) else \\"No\\") return results def process_graph_query(n, m, edge_list, q, query_list): edges = [[edge_list[i], edge_list[i+1]] for i in range(0, len(edge_list), 2)] queries = [[query_list[i], query_list[i+1], query_list[i+2]] for i in range(0, len(query_list), 3)] return find_exact_path(n, edges, queries)"},{"question":"In a historical research project, you are tasked with analyzing text patterns. For this assessment, you will be given a sequence of words and you need to determine the most common word in the sequence. If there are multiple words with the same highest frequency, output the word that appears first in the sequence. A word is defined as a continuous sequence of characters consisting of lowercase English letters (from \'a\' to \'z\') only. Words in the sequence are separated by exactly one space. Input The input consists of a single line containing the sequence of words, where the length of the sequence does not exceed 100,000 characters. Output Output a single word which is the most frequent in the sequence. If there are multiple words with the highest frequency, output the one that appears first in the sequence. Examples Input ``` apple banana apple orange banana orange apple ``` Output ``` apple ``` Input ``` one two three two three three ``` Output ``` three ``` Input ``` hello world ``` Output ``` hello ```","solution":"def most_common_word(sentence): Returns the most common word in the sentence. If there are multiple words with the highest frequency, returns the one that appears first in the sequence. words = sentence.split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 most_common = None highest_count = 0 for word in words: if word_count[word] > highest_count: highest_count = word_count[word] most_common = word return most_common"},{"question":"A popular online bookstore has a feature that ranks the best-selling books for each genre. The store regularly updates its top-selling books list and wants to implement a feature to sort the list of books based on their sales figures. Write a function rankBooks() that takes an array of books (books) where each book is represented by a dictionary with two keys: \'name\' (string) and \'sales\' (integer). The function should return a list of book names sorted by their sales in descending order. If two books have the same sales figure, they should be ordered alphabetically by name. Example: Input: books = [{\'name\': \'Book A\', \'sales\': 50}, {\'name\': \'Book B\', \'sales\': 75}, {\'name\': \'Book C\', \'sales\': 50}] Output: [\'Book B\', \'Book A\', \'Book C\'] Note: The input list will contain at least one book.","solution":"def rankBooks(books): Returns a list of book names sorted by their sales in descending order. If two books have the same sales figure, they are sorted alphabetically by name. sorted_books = sorted(books, key=lambda x: (-x[\'sales\'], x[\'name\'])) return [book[\'name\'] for book in sorted_books]"},{"question":"You are given an encrypted message and an integer k. The message can include both uppercase and lowercase English letters. The encryption is done using a form of Caesar cipher. In this cipher, each letter in the message is shifted forward by k positions in the English alphabet, wrapping around at the end (so, if k is 1, \'z\' would become \'a\', and similarly, \'Z\' would become \'A\'). For example, with k = 2, \'a\' would become \'c\', \'Y\' would become \'A\', and so on. Your task is to decrypt the message by shifting each letter backward by k positions. Input The first line contains a single integer T, the number of test cases. The following T lines each contain an encrypted message and an integer k. Output For each test case, print the decrypted message. Constraints 1 ≤ T ≤ 100 1 ≤ k ≤ 25 1 ≤ length of encrypted message ≤ 100 Example Input: 3 Dahhk 3 Khoor-Zruog 3 Ebiil-Tloia 23 Output: Axeeh Hello-World Hello-World Explanation: In the first test case, \\"Dahhk\\" with k=3 is encrypted and when decrypted returns \\"Axeeh\\". In the second test case, \\"Khoor-Zruog\\" with k=3 is encrypted and when decrypted returns \\"Hello-World\\". In the third test case, \\"Ebiil-Tloia\\" with k=23 is encrypted and when decrypted returns \\"Hello-World\\".","solution":"def decrypt_message(encrypted_message, k): Decrypts an encrypted message using a Caesar cipher with a backward shift of k. decrypted_message = [] for char in encrypted_message: if \'a\' <= char <= \'z\': decrypted_message.append(chr((ord(char) - ord(\'a\') - k) % 26 + ord(\'a\'))) elif \'A\' <= char <= \'Z\': decrypted_message.append(chr((ord(char) - ord(\'A\') - k) % 26 + ord(\'A\'))) else: decrypted_message.append(char) return \'\'.join(decrypted_message) def process_input(T, cases): results = [] for case in cases: encrypted_message, k = case k = int(k) results.append(decrypt_message(encrypted_message, k)) return results"},{"question":"You are given a text of N lines. The text contains IP addresses in it. Your task is to anonymize the IP addresses by replacing each number in the IP address with an asterisk \\"*\\". An IP address is defined as four numbers (each between 0 and 255) separated by dot (.). Input Format The first line contains the integer, N. The next N lines each contain a line of the text. Constraints 0 < N < 100 Each line may contain zero or more IP addresses. Output Format Output the modified text with anonymized IP addresses. Sample Input 5 This is a sample text with an IP address 192.168.0.1. Here is another one: 10.0.0.256 which is invalid but consider the format. Special cases like 127.0.0.1 should also be anonymized. We embedded an IP address in this line too, 8.8.8.8. No IP addresses in this line. Sample Output This is a sample text with an IP address ***.***.***.***. Here is another one: **.**.**.*** which is invalid but consider the format. Special cases like ***.***.***.*** should also be anonymized. We embedded an IP address in this line too, ***.***.***.***. No IP addresses in this line. ```python # Sample Code to achieve the task import re def replace_ip_addresses(n, lines): pattern = re.compile(r\'(d+).(d+).(d+).(d+)\') for i in range(n): lines[i] = pattern.sub(\'***.***.***.***\', lines[i]) return lines # Input Reading N = int(input().strip()) lines = [input().strip() for _ in range(N)] # IP Address Anonymization anonymized_lines = replace_ip_addresses(N, lines) # Output Anonymized Text for line in anonymized_lines: print(line) ```","solution":"import re def replace_ip_addresses(n, lines): Replaces all IP addresses in the given list of text lines with anonymized version. Args: n : int : The number of lines in the text lines : list of str : The lines of the text containing IP addresses Returns: list of str : The anonymized lines of text pattern = re.compile(r\'(d+).(d+).(d+).(d+)\') anonymized_lines = [] for line in lines: new_line = pattern.sub(\'***.***.***.***\', line) anonymized_lines.append(new_line) return anonymized_lines"},{"question":"The COVID-19 outbreak has led to a massive increase in online shopping. The manager of an online store wants to improve the efficiency of their warehouse management system. They need a program that can optimally pack items into boxes, given the dimensions of the items and the constraints of the boxes. Each box has a fixed height, width, and depth, and each item also has fixed dimensions. An item can be placed in a box if and only if its dimensions are smaller than or equal to the box\'s dimensions in all three directions. Write a program to compute the number of items that can be packed into each box. Assume the boxes and items can have several dimensions, but their orientations cannot change; this means items must be packed in the given orientation without rotation. -----Input----- The first line contains three integers: the height, width, and depth of the box (1 le H, W, D le 1000). The second line contains a single integer n (1 le n le 1000) which denotes the number of items. The next n lines each contain three integers: the height, width, and depth of each item. -----Output----- Print a single integer which is the number of items that can be packed into the box. -----Examples----- Input 10 15 20 3 9 14 19 10 10 10 8 17 18 Output 2 Input 5 5 5 4 3 3 3 6 6 6 2 2 2 4 5 5 Output 3 -----Note----- In the first sample, the first two items fit into the box, but the third item’s width exceeds the box\'s width. In the second sample, all items except the second one fit into the box.","solution":"def count_items_that_fit(box_dims, n, item_dims): Returns the count of items that can fit into the box given their dimensions. Parameters: box_dims (tuple): A tuple containing the height, width, and depth of the box. n (int): The number of items. item_dims (list): A list of tuples, each containing height, width, and depth of an item. Returns: int: Number of items that can be packed into the box. box_height, box_width, box_depth = box_dims count = 0 for item in item_dims: item_height, item_width, item_depth = item if (item_height <= box_height and item_width <= box_width and item_depth <= box_depth): count += 1 return count"},{"question":"Implement a function to find the maximum sum of a contiguous subarray within a one-dimensional numeric array. Use the \\"Kadane’s Algorithm\\" to achieve an efficient solution.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray within the array nums using Kadane\'s Algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given the task of implementing a movie recommendation system. The system receives a list of users, each with their own list of movie ratings. Each user rates movies they have watched on a scale of 1 to 5. The system needs to recommend a single movie for each user that they have not yet watched. The recommendation for a user should be the movie that has the highest average rating among all other users. Task: Write a function that takes two parameters: - an array of users (`users`), where each user is represented as a dictionary with their user ID (as `id`) and a dictionary of movie ratings (as `ratings`). - an array of movie titles (`movies`) that contains all the movies in the system. Your job is to return a dictionary where each key is a user ID and each value is the recommended movie title for that user. **Input:** ```python users = [ {\\"id\\": 1, \\"ratings\\": {\\"Movie1\\": 5, \\"Movie2\\": 3}}, {\\"id\\": 2, \\"ratings\\": {\\"Movie1\\": 4, \\"Movie3\\": 5}}, {\\"id\\": 3, \\"ratings\\": {\\"Movie2\\": 2, \\"Movie3\\": 4}} ] movies = [\\"Movie1\\", \\"Movie2\\", \\"Movie3\\", \\"Movie4\\"] ``` **Output:** ```python recommend(users, movies) # Expected output could be: # {1: \'Movie3\', 2: \'Movie2\', 3: \'Movie1\'} ``` **Implementation Details:** 1. Calculate the average rating for each movie across all users. 2. For each user, recommend the movie with the highest average rating that the user has not already watched. 3. If there are ties in average rating, recommend any one of the highest rated movies (your choice). 4. Ensure the function can handle cases where users have rated different subsets of movies. **Example:** Given the input above, - For user 1, \\"Movie3\\" has the highest average rating among movies they haven\'t watched. - For user 2, \\"Movie2\\" is the highest rated movie they haven\'t watched. - For user 3, \\"Movie1\\" is the highest rated movie they haven\'t watched.","solution":"def recommend(users, movies): Recommends a single unwatched movie for each user based on highest average rating. Args: users (list): List of dictionaries representing users and their movie ratings. movies (list): List of all movie titles. Returns: dict: A dictionary where keys are user IDs and values are the recommended movie titles. from collections import defaultdict # Calculate average ratings for each movie movie_ratings = defaultdict(list) for user in users: for movie, rating in user[\'ratings\'].items(): movie_ratings[movie].append(rating) avg_ratings = {movie: sum(ratings) / len(ratings) for movie, ratings in movie_ratings.items()} recommendations = {} for user in users: unwatched_movies = [movie for movie in movies if movie not in user[\'ratings\']] if unwatched_movies: recommended_movie = max(unwatched_movies, key=lambda m: avg_ratings.get(m, 0)) recommendations[user[\'id\']] = recommended_movie else: recommendations[user[\'id\']] = None # No unwatched movies available return recommendations"},{"question":"A company has a smart garage system that automatically parks cars in the garage. The garage has a specified number of parking spots, and each spot can be either occupied or vacant. For security reasons, the garage needs to find the smallest continuous sequence of parking spots that can accommodate a specified number of cars. If there are multiple sequences of the same length, return the first one found. Write a function that, given an array representing the status of each parking spot (1 for occupied, 0 for vacant) and an integer indicating the number of cars to be accommodated, returns the starting and ending indices of the smallest continuous sequence of vacant spots that can fit all the cars. If there is no such sequence, return an empty list. Example: ``` find_parking_spots([1, 0, 0, 1, 0, 0, 0, 0, 1], 3) ``` Output: ``` [4, 6] ``` Explanation: The function identifies that the smallest sequence of vacant spots to fit 3 cars starts at index 4 and ends at index 6. Detailed Requirements: - The input array will have a length between 1 and 10^5. - The number of cars to be accommodated will be between 1 and the length of the array. - If multiple smallest sequences exist, the function should return the starting and ending indices of the first one found. - If no valid sequence is found, return an empty list. Function signature: ```python def find_parking_spots(parking_status: List[int], num_cars: int) -> List[int]: # Implementation here ```","solution":"from typing import List def find_parking_spots(parking_status: List[int], num_cars: int) -> List[int]: This function finds the smallest continuous sequence of vacant spots that can fit all the cars. Parameters: parking_status: List[int] - A list where 1 represents an occupied spot and 0 represents a vacant spot. num_cars: int - Number of cars to be accommodated. Returns: List[int] - A list containing the starting and ending indices of the smallest continuous sequence of vacant spots. If there is no such sequence, returns an empty list. n = len(parking_status) # Start and end pointers for sliding window start = end = 0 # Keep track of the number of vacant spots found in the current window vacant_count = 0 # Minimum length of the window and starting/ending indices of the smallest window min_len = float(\'inf\') result = [] while end < n: # Expand the window if parking_status[end] == 0: vacant_count += 1 # Check if the current window can accommodate the required number of cars while vacant_count >= num_cars: # Update the minimum length and result if the current window is smaller if end - start + 1 < min_len: min_len = end - start + 1 result = [start, end] # Contract the window from the start if parking_status[start] == 0: vacant_count -= 1 start += 1 # Move end to the next spot end += 1 return result"},{"question":"Write a function that finds whether all elements in a given list of integers appear an even number of times or not. The input list will contain between 1 and 50 integers, each integer ranging from -50 to 50. First Example: Input: [4, 3, 3, 4, 4, 4, -2, -2, 0] Output: True Explanation: - The integer 4 appears 4 times. - The integer 3 appears 2 times. - The integer -2 appears 2 times. - The integer 0 appears 1 time. Thus, not all integers appear an even number of times. Second Example: Input: [1, 2, 2, 1, 2, 2, 1, 1] Output: False Explanation: - The integer 1 appears 4 times. - The integer 2 appears 4 times. Thus, all integers appear an even number of times. Third Example: Input: [10, -10, 10, -10, 0, 0] Output: True Explanation: - The integer 10 appears 2 times. - The integer -10 appears 2 times. - The integer 0 appears 2 times. Thus, all integers appear an even number of times. Input: A list of integers Output: A boolean value: True or False","solution":"from collections import Counter def all_elements_even_count(nums): Returns True if all elements in the given list appear an even number of times. Returns False otherwise. counts = Counter(nums) for count in counts.values(): if count % 2 != 0: return False return True"},{"question":"Vincent from the Quality Control (QC) department is inspecting a batch of products on the assembly line. Each product passes through a series of quality checks (QC points), and Vincent wants to ensure each product passes through all checkpoints in the correct order, without skipping any. The assembly line can be represented as a directed acyclic graph (DAG) where each node represents a QC point and each edge represents a possible path between QC points. Some QC points can have multiple incoming or outgoing paths, making it possible for a product to pass through the checkpoints in various orders. However, the assembly line is designed such that there is only one valid path from the start point to the end point. Vincent needs to determine if it is possible to rearrange the order of QC points such that every product passes through all points exactly once, in a specific order. Given the impact of skipped checks on product quality, Vincent will rearrange the checkpoints only if it is feasible, otherwise, he will halt the assembly line for a redesign. Write a program that, given the representation of the assembly line, determines whether it is possible to rearrange the QC points in a linear order, such that every product passes through all QC points exactly once from the start to the end of the assembly line. Input The first line contains an integer n (2 ≤ n ≤ 10^5), the number of QC points. The second line contains an integer m (1 ≤ m ≤ 2 ⋅ 10^5), the number of direct paths between QC points. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating a directed path from QC point u to QC point v. Output Output \\"YES\\" if it is possible to rearrange the QC points in a linear order such that every product passes through all QC points exactly once. Otherwise, output \\"NO\\". Example Input 4 4 1 2 2 3 3 4 1 3 Output YES Input 4 3 1 2 2 3 3 2 Output NO Explanation In the first sample, it is possible to rearrange the QC points to [1, 2, 3, 4], making a valid topological order. In the second sample, there is a cycle (2 -> 3 -> 2), making it impossible to arrange QC points linearly without skipping some checks.","solution":"from collections import defaultdict, deque def can_rearrange_qc_points(n, m, paths): Determines if it\'s possible to rearrange QC points in a valid topological order. :param n: Number of QC points. :param m: Number of directed paths between QC points. :param paths: List of tuples representing the directed paths (u, v). :return: \\"YES\\" if a valid rearrangement is possible, \\"NO\\" otherwise. # Build the graph and calculate in-degrees of nodes graph = defaultdict(list) in_degree = [0] * (n + 1) for u, v in paths: graph[u].append(v) in_degree[v] += 1 # Topological Sort using Kahn\'s Algorithm queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) count_of_seen_nodes = 0 while queue: if len(queue) > 1: return \\"NO\\" # More than one node present in the queue means ambiguity node = queue.popleft() count_of_seen_nodes += 1 for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if count_of_seen_nodes == n: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a string representing a sequence of words separated by spaces, your task is to reverse the order of these words and remove any extra spaces between them. A word is defined as a sequence of non-space characters. Input: - A single string `s` containing one or more words separated by spaces. Output: - Return a string with the words in reversed order and no extra spaces. Constraints: - The length of `s` will not exceed 1000 characters. Example: Input: ``` the sky is blue ``` Output: ``` blue is sky the ``` Explanation: The reversed order of the words is \\"blue is sky the\\", combining multiple spaces between words into a single space.","solution":"def reverse_words(s): Reverse the order of words in a string and remove extra spaces. Args: s (str): Input string containing words separated by spaces. Returns: str: A string with words in reversed order and no extra spaces. words = s.split() return \' \'.join(reversed(words))"},{"question":"Prof. Omega is designing a new grading system for his class consisting of N students. The grades are given on a scale, and each student receives an integer grade between 0 and 100, inclusive. Prof. Omega sets a threshold grade M, and any student who scores at least M passes the class, while those who score less fail. Your task is to determine the number of students who pass and the number who fail for each test case. Input Format The first line contains T, the number of test cases. Each test case consists of two lines. The first line has N and M, space separated. The second line contains N space separated integers ( g1, g2, ..., gN) representing the grades of each student. Output Format For each test case, print the number of students who pass and the number who fail, separated by a space. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ M ≤ 100 0 ≤ gi ≤ 100, where i ∈ [1, N] Sample Input 3 5 50 42 65 78 90 33 4 75 78 58 88 92 3 90 45 91 89 Sample Output 3 2 3 1 1 2","solution":"def count_passing_students(test_cases): results = [] for case in test_cases: N, M, grades = case pass_count = sum(1 for grade in grades if grade >= M) fail_count = N - pass_count results.append(f\\"{pass_count} {fail_count}\\") return results def main(input_data): data = input_data.strip().split(\'n\') T = int(data[0]) test_cases = [] i = 1 for _ in range(T): N, M = map(int, data[i].split()) grades = list(map(int, data[i + 1].split())) test_cases.append((N, M, grades)) i += 2 return count_passing_students(test_cases)"},{"question":"Task: Implement a function that simulates the behavior of a custom two-dimensional array shifter. The function takes in a grid (a two-dimensional array of integers) and a list of commands. Each command dictates how a particular row or column should be shifted. The commands are given in the following format: - `R x y`: Shift row `x` to the right by `y` positions. - `L x y`: Shift row `x` to the left by `y` positions. - `U x y`: Shift column `x` up by `y` positions. - `D x y`: Shift column `x` down by `y` positions. The shifted grid should wrap around the edges, meaning elements that are shifted out of one end appear at the other. The function should return the modified grid after applying all commands. Example: ``` Input: Grid: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Commands: [ \\"R 0 1\\", \\"D 1 2\\" ] Output: [ [3, 1, 2], [4, 8, 6], [7, 5, 9] ] ``` Explanation: 1. The command `\\"R 0 1\\"` shifts the first row to the right by 1 position: - `[3, 1, 2]` 2. The command `\\"D 1 2\\"` shifts the second column down by 2 positions: - `8` moves to row 2 and `5` moves to row 0: - `[[3, 5, 2], [4, 8, 6], [7, 1, 9]]` Feel free to include sample translations and discuss this kata.","solution":"def shift_grid(grid, commands): Shift rows and columns of a 2D array based on the commands. :param grid: List[List[int]], the grid to shift :param commands: List[str], list of commands to execute :return: List[List[int]], the shifted grid num_rows = len(grid) num_cols = len(grid[0]) if num_rows > 0 else 0 for command in commands: direction, index, amount = command.split() index = int(index) amount = int(amount) if direction == \\"R\\": # Shift row to the right amount %= num_cols grid[index] = grid[index][-amount:] + grid[index][:-amount] elif direction == \\"L\\": # Shift row to the left amount %= num_cols grid[index] = grid[index][amount:] + grid[index][:amount] elif direction == \\"U\\": # Shift column up amount %= num_rows temp_col = [grid[(i + amount) % num_rows][index] for i in range(num_rows)] for i in range(num_rows): grid[i][index] = temp_col[i] elif direction == \\"D\\": # Shift column down amount %= num_rows temp_col = [grid[(i - amount) % num_rows][index] for i in range(num_rows)] for i in range(num_rows): grid[i][index] = temp_col[i] return grid"},{"question":"Write a function that takes in a string and returns the most frequently occurring character. If there are multiple characters with the same highest frequency, return the character that appears first in the string. For the purpose of this problem, treat uppercase and lowercase characters as distinct. # Function Signature ```python def most_frequent_character(s: str) -> str: pass ``` # Inputs - `s` (1 ≤ |s| ≤ 10^5): A string consisting of non-space English letters. # Outputs - The character that occurs most frequently. If there are ties, return the character that appears first. # Example ```python assert most_frequent_character(\\"aabcc\\") == \\"a\\" assert most_frequent_character(\\"abbccc\\") == \\"c\\" assert most_frequent_character(\\"aabbCC\\") == \\"a\\" ``` # Constraints - The input string will be non-empty and will only contain English letters. - Uppercase and lowercase letters should be treated as distinct characters. - The function should be optimized for time complexity as the input size can be very large.","solution":"def most_frequent_character(s: str) -> str: from collections import defaultdict frequency = defaultdict(int) first_occurrence = {} for i, char in enumerate(s): frequency[char] += 1 if char not in first_occurrence: first_occurrence[char] = i most_frequent = max(frequency.items(), key=lambda item: (item[1], -first_occurrence[item[0]])) return most_frequent[0]"},{"question":"Given a string of words, return the length of the shortest word(s). The string will never be empty, and you do not need to account for different data types or empty words. # Example: ```python input: \\"The quick brown fox jumps over the lazy dog\\" output: 3 # the shortest word is \\"The\\" ``` Implement a function with the following signature: ```python def find_shortest_word_length(s: str) -> int: # Your code here ```","solution":"def find_shortest_word_length(s: str) -> int: Returns the length of the shortest word(s) in the given string. Args: s (str): A string of words separated by spaces. Returns: int: The length of the shortest word(s). words = s.split() shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"You are given a dictionary of words and a list of queries. For each query, find all words in the dictionary that are anagrams of the query and print them in lexicographical order. -----Constraints----- - 1 leq number of words in the dictionary leq 10^5 - 1 leq length of each word leq 100 - 1 leq number of queries leq 10^5 - Each query consists of lowercase English letters and has the same length as the dictionary words. -----Input----- Input is given from Standard Input in the following format: number_of_words word_1 word_2 : word_number_of_words number_of_queries query_1 query_2 : query_number_of_queries -----Output----- For each query, print the anagrams in lexicographical order. If no anagrams are found, print an empty line. -----Sample Input----- 5 listen enlist google goolge silent 3 google enlist brag -----Sample Output----- google goolge enlist listen silent (No anagrams found for \\"brag\\", so no output for this query)","solution":"def find_anagrams(dictionary, queries): Finds all words in the dictionary that are anagrams of the query and returns them in lexicographical order. :param dictionary: List of words in the dictionary :param queries: List of query words :return: List of list of anagrams for each query from collections import defaultdict anagrams_dict = defaultdict(list) # Populate the dictionary with sorted word as key for word in dictionary: sorted_word = \'\'.join(sorted(word)) anagrams_dict[sorted_word].append(word) result = [] for query in queries: sorted_query = \'\'.join(sorted(query)) anagrams = anagrams_dict.get(sorted_query, []) result.append(sorted(anagrams)) return result"},{"question":"Write a function that takes an input string and returns the string with all vowels replaced by the character \'*\'. SQL: Return results in a column named ```modified_text``` *[Make sure you replace all vowels (a, e, i, o, u) regardless of their case]*","solution":"def replace_vowels(input_string): This function takes an input string and returns the string with all vowels replaced by the character \'*\'. vowels = \'aeiouAEIOU\' return \'\'.join([\'*\' if char in vowels else char for char in input_string])"},{"question":"Write a program that helps a librarian manage book titles in the library by categorizing them based on the sum of their ASCII values. The librarian wants to organize the books such that the books with higher total ASCII values of their titles come first. If two titles have the same ASCII value sum, they should be sorted alphabetically in ascending order. Input Format: - Given a single integer (N), 1 ≤ N ≤ 100 (number of book titles). - Followed by N lines each containing the title of the book. Each title consists of lowercase and uppercase English letters and has length between 1 and 100. Output Format: - Print the book titles sorted by the described criteria, each on a new line. SAMPLE INPUT 3 TheHobbit HarryPotter ToKillAMockingbird SAMPLE OUTPUT ToKillAMockingbird HarryPotter TheHobbit","solution":"def categorize_and_sort_books(N, titles): Categorize and sort book titles based on the sum of their ASCII values. :param N: Number of book titles. :param titles: List of book titles. :return: List of sorted book titles. # Helper function to calculate ASCII value sum of a title def ascii_value_sum(title): return sum(ord(char) for char in title) # Sort the list by ASCII value sum descending, then alphabetically sorted_titles = sorted(titles, key=lambda title: (-ascii_value_sum(title), title)) return sorted_titles"},{"question":"Write a function that takes a 12-hour AM/PM formatted time string (e.g., \'02:30 PM\') and converts it to a 24-hour time formatted string (e.g., \'14:30\'). Make sure to handle the edge cases like midnight (\'12:00 AM\') and noon (\'12:00 PM\') correctly. Below are a few examples for reference: ```python convert_to_24_hour(\'12:00 AM\') == \'00:00\' convert_to_24_hour(\'01:15 AM\') == \'01:15\' convert_to_24_hour(\'12:00 PM\') == \'12:00\' convert_to_24_hour(\'05:45 PM\') == \'17:45\' convert_to_24_hour(\'11:59 PM\') == \'23:59\' ``` Write the function in such a way that it validates the input format and throws an appropriate error for invalid inputs. Good luck!","solution":"def convert_to_24_hour(time_str): Converts a 12-hour AM/PM formatted time string to a 24-hour time formatted string. Args: time_str (str): A string representing the time in 12-hour AM/PM format (e.g., \'02:30 PM\') Returns: str: A string representing the time in 24-hour format (e.g., \'14:30\') # Validate the input format import re pattern = re.compile(r\'^(1[0-2]|0[1-9]):([0-5][0-9]) (AM|PM)\') if not pattern.match(time_str): raise ValueError(\'Invalid time format, should be hh:mm AM/PM\') # Split the time string time, period = time_str.split() hours, minutes = map(int, time.split(\':\')) # Convert to 24-hour format if period == \'AM\': if hours == 12: hours = 0 else: if hours != 12: hours += 12 return f\'{hours:02}:{minutes:02}\'"},{"question":"You are given a binary matrix where 0 represents water and 1 represents land. The matrix is connected either horizontally or vertically. There is exactly one island (a group of connected 1s). The island does not have any \\"lake\\", meaning the 1s inside an island are not surrounded by 0s (water). Your task is to find the area of the island. Example 1: Input: matrix = [ [0,1,0,0], [1,1,1,0], [0,1,0,0], [0,0,0,0] ] Output: 5 Explanation: The island is made up of 5 connected lands (1s). Example 2: Input: matrix = [ [1,1], [1,0] ] Output: 3 Explanation: The island is made up of 3 connected lands (1s). Note: - The matrix will have dimensions m x n where 1 <= m, n <= 300. - The matrix contains exactly one island; any water around the island is not part of the matrix.","solution":"def get_island_area(matrix): Given a binary matrix, returns the area of the island (group of connected 1s). if not matrix: return 0 m, n = len(matrix), len(matrix[0]) def dfs(i, j): if i < 0 or i >= m or j < 0 or j >= n or matrix[i][j] == 0: return 0 # Mark current cell as visited matrix[i][j] = 0 area = 1 # Visit all 4 neighboring cells area += dfs(i - 1, j) # up area += dfs(i + 1, j) # down area += dfs(i, j - 1) # left area += dfs(i, j + 1) # right return area for i in range(m): for j in range(n): if matrix[i][j] == 1: return dfs(i, j) return 0"},{"question":"David loves to play with words and came up with a new game involving strings. The game\'s challenge is to find out the smallest lexicographical rotation of a given string. A lexicographical rotation of a string is any rotation of the string obtained by shifting its characters to the left and wrapping around. David needs your help to determine the smallest lexicographical rotation for the strings. -----Input----- The first line contains the number of test cases T. Each test case consists of a single line with a string S. -----Output----- For each test case, output the smallest lexicographical rotation of the string S. -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ |S| ≤ 1000 - S consists of lowercase English letters only. -----Example----- Input: 2 bbaaccaadd abc Output: aaccaaddbb abc -----Explanation----- Example case 1. The lexicographical rotations for \\"bbaaccaadd\\" are [\\"bbaaccaadd\\", \\"baaccaaddb\\", \\"aaccaaddbb\\", \\"accaaddbba\\", \\"ccaaddbbaa\\", \\"caaddbbaac\\", \\"aaddbbaacc\\", \\"addbbaacca\\", \\"ddbbaaccaa\\", \\"dbbaaccaad\\"]. Among these, \\"aaccaaddbb\\" is the smallest lexicographical rotation. Example case 2. The lexicographical rotations for \\"abc\\" are [\\"abc\\", \\"bca\\", \\"cab\\"]. \\"abc\\" is already the smallest rotation.","solution":"def smallest_lexicographical_rotation(S): Returns the smallest lexicographical rotation of string S. concatenated = S + S smallest_rotation = S for i in range(1, len(S)): rotation = concatenated[i:i+len(S)] if rotation < smallest_rotation: smallest_rotation = rotation return smallest_rotation def solve(test_cases): results = [] for S in test_cases: results.append(smallest_lexicographical_rotation(S)) return results"},{"question":"You are given a document containing several paragraphs. Your task is to identify the top k most frequent words in the document. The words should be case insensitive and punctuation should be ignored. In case of a tie in frequencies, the words should be returned in alphabetical order. -----Input:----- - The first line contains an integer T denoting the number of test cases. - The next T test cases follow. - Each test case begins with an integer k, the number of most frequent words to return. - The following lines for each test case contain a paragraph (which can span multiple lines) terminated by a line containing a single \'\'. -----Output:----- For each test case, output k most frequent words in the paragraph, each on a new line. -----Constraints----- - 1 <= T <= 100 - 1 <= k <= 50 - Each paragraph contains between 1 and 1000 lines. - Each line contains between 1 and 200 characters. - Words contain only alpha characters and all words are separated by non-alpha characters. -----Sample Input:----- 2 3 Hello, world! This is a test. This test is simple. 2 One One Two two Three three. Four! FOUR. -----Sample Output:----- this is a four one -----Explanation:----- - For the first test case, the word \\"this\\" appears twice, so do \\"is\\" and \\"a\\". Therefore, the output is in alphabetical order. - For the second test case, the word \\"four\\" appears three times, \\"one\\" appears twice. Therefore, the output is in alphabetical order.","solution":"from collections import Counter import re def get_top_k_words(paragraph, k): # Convert paragraph to lowercase and split into words ignoring punctuation words = re.findall(r\'b[a-z]+b\', paragraph.lower()) # Count the frequency of each word word_counts = Counter(words) # Find the k most common words most_common = word_counts.most_common() # Sort by frequency and then alphabetifcally for ties most_common.sort(key=lambda x: (-x[1], x[0])) # Return the top k words return [word for word, count in most_common[:k]] def process_document(T, test_cases): result = [] for k, paragraph_lines in test_cases: paragraph = \' \'.join(paragraph_lines) top_k_words = get_top_k_words(paragraph, k) result.extend(top_k_words) return result"},{"question":"# Task You are given an array of integers and an integer k. Write a function to determine if there is a subarray with exactly k different integers. # Example For `array = [1, 2, 1, 2, 3]` and `k = 2`, the result should be `True`. In this case, there are multiple subarrays with exactly 2 different integers: - `[1, 2]` - `[2, 1]` - `[1, 2]` - `[2, 3]` For `array = [1, 2, 1, 3, 4]` and `k = 3`, the result should be `True`. In this case, there are subarrays with exactly 3 different integers: - `[1, 2, 1, 3]` - `[2, 1, 3]` For `array = [1, 2, 1, 3, 4]` and `k = 5`, the result should be `False`. There is no subarray with exactly 5 different integers. # Input/Output - `[input]` array of integers `array` The array of integers `1 ≤ array.length ≤ 10^5` - `[input]` integer `k` An integer representing the number of different integers in a subarray `1 ≤ k ≤ array.length` - `[output]` a boolean value `True` if there is a subarray with exactly k different integers, `False` otherwise.","solution":"def has_subarray_with_k_distinct_integers(array, k): Determines if there is a subarray with exactly k different integers. :param array: List of integers :param k: Integer representing the number of different integers in a subarray :return: Boolean value, True if there is a subarray with exactly k different integers, False otherwise. from collections import defaultdict def at_most_k_distinct(nums, k): count = defaultdict(int) i = 0 result = 0 for j in range(len(nums)): if count[nums[j]] == 0: k -= 1 count[nums[j]] += 1 while k < 0: count[nums[i]] -= 1 if count[nums[i]] == 0: k += 1 i += 1 result += j - i + 1 return result return at_most_k_distinct(array, k) - at_most_k_distinct(array, k - 1) > 0"},{"question":"A company organizes a voting campaign where employees cast their votes to elect a leader. Each employee votes by submitting a ballot with the name of their chosen candidate. The person who receives the most votes wins the election. In the event of a tie, the candidate whose name comes first alphabetically is the winner. Write a function `electLeader(ballots: List[str]) -> str` that returns the name of the elected leader. **Example 1:** - Input: `ballots = [\\"Alice\\", \\"Bob\\", \\"Alice\\", \\"Daniel\\", \\"Bob\\", \\"Alice\\"]` - Output: `Alice` - Explanation: Alice receives 3 votes, Bob receives 2 votes, Daniel receives 1 vote. Alice has the most votes. **Example 2:** - Input: `ballots = [\\"John\\", \\"John\\", \\"Doe\\", \\"Doe\\"]` - Output: `Doe` - Explanation: Both John and Doe receive 2 votes each. Doe comes first alphabetically. **Example 3:** - Input: `ballots = [\\"Sam\\", \\"John\\", \\"Jane\\", \\"Jane\\", \\"Sam\\", \\"Sam\\"]` - Output: `Sam` - Explanation: Sam receives 3 votes, Jane receives 2 votes, John receives 1 vote. Sam has the most votes. **Your Task:** You don\'t need to read input or print anything. Your task is to complete the function `electLeader(ballots)` which takes a list of strings `ballots` representing the votes, and returns the name of the elected leader. **Expected Time Complexity:** O(n) **Expected Auxiliary Space:** O(n) **Constraints:** - 1 <= len(ballots) <= 10^4 - Each name in ballots contains only uppercase and lowercase English letters. - The length of each name will be between 1 and 100 inclusive.","solution":"from typing import List from collections import Counter def electLeader(ballots: List[str]) -> str: Given a list of ballots, return the name of the elected leader. The elected leader is the one with the highest number of votes. In the event of a tie, the candidate whose name comes first alphabetically is the winner. # Count the votes for each candidate using Counter vote_count = Counter(ballots) # Find the candidate with the most votes considering # alphabetical order in case of a tie winner = min(vote_count.items(), key=lambda x: (-x[1], x[0]))[0] return winner"},{"question":"You are given an array of integers. The array can be of any length, and it may contain both positive and negative numbers. Your task is to find the length of the longest contiguous subarray such that all the elements in the subarray are non-negative (i.e., greater than or equal to zero). Write a function `longest_non_negative_subarray(arr)` that takes in an array of integers `arr` and returns the length of the longest contiguous subarray with all non-negative numbers. If all elements are negative, the function should return 0. For example: ```python longest_non_negative_subarray([1, 2, -3, 4, 5, -6, 7, 8, 9]) ``` should return ```python 3 ``` because the longest contiguous subarray with non-negative numbers is `[7, 8, 9]` with length 3. Another example: ```python longest_non_negative_subarray([-1, -2, -3, -4]) ``` should return ```python 0 ``` because all elements are negative. # Notes - The function should have a time complexity of O(n), where n is the length of the input array `arr`. - The input array can be empty, in which case the function should return 0.","solution":"def longest_non_negative_subarray(arr): Returns the length of the longest contiguous subarray with all non-negative numbers. :param arr: List[int] - List of integers. :return: int - Length of the longest contiguous subarray with non-negative numbers. max_length = 0 current_length = 0 for num in arr: if num >= 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"-----Problem Statement----- You are organizing a coding competition where players are assigned levels based on their submission times. The levels are categorized into three: \\"Easy\\", \\"Moderate\\", and \\"Hard\\". The level assignment is based on the following criteria: - If the player\'s submission time is less than or equal to 30 minutes, they are assigned to \\"Easy\\". - If the player\'s submission time is more than 30 minutes but less than or equal to 60 minutes, they are assigned to \\"Moderate\\". - If the player\'s submission time is more than 60 minutes, they are assigned to \\"Hard\\". You have received the submission times for N players and need to output the level assignment for each player. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines. The first line contains an integer N (the number of players). The second line contains N space-separated integers, each representing the submission time in minutes for each player. -----Output:----- For each test case, output N space-separated values representing the level assignment for each player (\\"Easy\\", \\"Moderate\\", or \\"Hard\\"). -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 200 - 1 leq submission time leq 180 -----Sample Input:----- 2 4 10 45 70 25 3 65 30 15 -----Sample Output:----- Easy Moderate Hard Easy Hard Easy Easy","solution":"def assign_levels(test_cases): results = [] for test in test_cases: N, submission_times = test levels = [] for time in submission_times: if time <= 30: levels.append(\\"Easy\\") elif time <= 60: levels.append(\\"Moderate\\") else: levels.append(\\"Hard\\") results.append(\\" \\".join(levels)) return results"},{"question":"The mayor of Byteville plans to host a city-wide treasure hunt event, and he needs to print treasure maps for the participants. Each map consists of a series of instructions that guide participants from one landmark to another. Each instruction is represented as a pair of integers, x and y, indicating movement on a 2D grid: (x, y). Participants start at the origin point (0, 0) and follow the instructions sequentially. The mayor wants to ensure that the participants can complete the treasure hunt by visiting each landmark exactly once and returning to the origin at the end. However, some instructions are redundant because they immediately cancel each other out, leading to inefficient paths. Your task is to help the mayor by minimizing and optimizing the instruction set. This means removing any pairs of instructions that immediately cancel each other out (e.g., (a, b) followed by (-a, -b)), as well as consolidating consecutive movements in the same direction. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of instructions. Each of the next n lines contains two space-separated integers, xi and yi (−100 ≤ xi, yi ≤ 100) — the movement coordinates for each instruction. Output Print an optimized set of instructions. Each instruction should be represented as a pair of integers and should adhere to the following criteria: 1. Any directly canceling out pairs of instructions are removed. 2. Consecutive instructions in the same direction should be combined. Examples Input 6 1 0 0 2 -1 0 0 -2 2 2 2 -2 Output 4 0 Input 4 1 1 -1 -1 2 2 -2 2 Output 0 4","solution":"def optimize_instructions(n, instructions): from collections import defaultdict net_movement = defaultdict(int) for x, y in instructions: net_movement[\'x\'] += x net_movement[\'y\'] += y return (net_movement[\'x\'], net_movement[\'y\'])"},{"question":"You have been provided with a list of ordered pairs where the first element of each pair is an item and the second element is another item that depends on the first. Each pair represents a dependency relationship between items in a sequence. Your goal is to determine the order in which these items should be processed, ensuring that each item is processed only after all its dependencies have been processed. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 1000), the number of dependency pairs. Each of the next n lines contains two strings (length of each does not exceed 20), representing a dependency pair. The first string in each pair depends on the second string. It is guaranteed that the dependencies form a Directed Acyclic Graph (DAG), so there are no circular dependencies. -----Output----- Output one line containing the items in the order they should be processed, separated by spaces. If there are multiple valid orders, any order is acceptable. -----Examples----- Input 3 a b b c c d Output d c b a Input 4 data preprocessing model data evaluation model report evaluation Output preprocessing data model evaluation report -----Note----- In the first example, the dependency relationships are: `a` depends on `b`, `b` depends on `c`, and `c` depends on `d`. Therefore, the items should be processed in the order `d c b a`. In the second example, the dependency relationships are: `data` depends on `preprocessing`, `model` depends on `data`, `evaluation` depends on `model`, and `report` depends on `evaluation`. Thus, the items should be processed in the order `preprocessing data model evaluation report`.","solution":"from collections import defaultdict, deque def find_order(n, dependencies): graph = defaultdict(list) indegree = defaultdict(int) nodes = set() # Build the graph and indegree count for a, b in dependencies: graph[b].append(a) indegree[a] += 1 nodes.add(a) nodes.add(b) # nodes with zero indegree zero_indegree = deque([node for node in nodes if indegree[node] == 0]) order = [] while zero_indegree: current = zero_indegree.popleft() order.append(current) for neighbor in graph[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: zero_indegree.append(neighbor) return \' \'.join(order) # Test dependencies_1 = [(\\"a\\", \\"b\\"), (\\"b\\", \\"c\\"), (\\"c\\", \\"d\\")] dependencies_2 = [(\\"data\\", \\"preprocessing\\"), (\\"model\\", \\"data\\"), (\\"evaluation\\", \\"model\\"), (\\"report\\", \\"evaluation\\")] print(find_order(3, dependencies_1)) # Output should be \\"d c b a\\" print(find_order(4, dependencies_2)) # Output should be \\"preprocessing data model evaluation report\\""},{"question":"The code takes in an array of integers representing different treasure amounts situated on an island, and a starting position of a pirate. The pirate needs to collect as much treasure as possible without encountering any traps. Each trap is represented by a negative integer value in the array. If the pirate encounters a trap, the game ends immediately. The pirate can only move left or right to adjacent positions. Help the pirate decide if he can collect a non-negative amount of treasure and safely reach the end of the array without encountering a trap. -----Input----- Each test case contains a single integer t (1 leq t leq 10000) — the number of test cases. The description of the test cases follows: The first line of each test case contains a single integer n (1 leq n leq 100000) — the number of integer values in the array representing treasures and traps. The second line contains n integers a_1, a_2, ldots, a_n (-10^6 leq a_i leq 10^6) — the amount of treasure or trap value located at each position in the array. It is guaranteed that the sum of n over all test cases does not exceed 1000000. -----Output----- For each test case, print \\"ESCAPE\\" if the pirate can safely collect a non-negative amount of treasure and reach the end of the array. Otherwise, print \\"CAUGHT\\". -----Examples----- Input 3 5 1 2 -3 4 5 6 -1 2 3 4 5 6 4 1 2 3 4 Output CAUGHT CAUGHT ESCAPE -----Note----- In the first test case, the pirate would have to encounter a trap with value -3, making the total amount of treasure negative. So the output is \\"CAUGHT\\". In the second test case, the first position contains a trap with value -1, so the output is \\"CAUGHT\\". In the third test case, the pirate can collect treasures with values [1, 2, 3, 4] and safely reach the end, so the output is \\"ESCAPE\\".","solution":"def pirate_escape(t, test_cases): Determines if the pirate can safely collect a non-negative amount of treasure and reach the end of the array without encountering a trap in each test case. Parameters: t (int): The number of test cases. test_cases (list of tuples): Each tuple contains an integer `n` and a list of integers representing treasures and traps. Returns: list: List of \\"ESCAPE\\" or \\"CAUGHT\\" for each test case. results = [] for n, array in test_cases: total_treasure = 0 safe = True for value in array: if value < 0: # Encounter a trap safe = False break total_treasure += value if safe and total_treasure >= 0: results.append(\\"ESCAPE\\") else: results.append(\\"CAUGHT\\") return results"},{"question":"You are a watermelon seller in a town where customers request watermelons of specific weights. Each day, you either procure a watermelon of a certain weight, or you have a customer requesting a watermelon of a specific weight. You can only carry one watermelon at a time due to the weight constraints. Your objective is to maximize your earnings by selling the watermelons at the requested weights. You sell watermelons at a price equal to their weight. You are provided the list of events that occur over n days. On each day, you either find a watermelon of a specific weight or encounter a customer requesting a watermelon of a specific weight. Write a program to determine the maximum amount of money you can earn. Input The first line contains an integer n denoting the number of days. Each of the next n lines contains one of the following types of events: - \\"procure X\\" which indicates you find a watermelon of weight X. - \\"request X\\" which indicates a customer requests a watermelon of weight X. Output Output the maximum amount of money that you can earn given the schedule of events. Constraints 1 ≤ n ≤ 10000 1 ≤ X ≤ 100000 Example Input: 5 procure 5 procure 10 request 10 procure 7 request 7 Output: 17 Explanation Sell the watermelon of weight 10 to the customer when requested on the third day for 10 units of money. Then procure another watermelon of weight 7 and sell it to the customer asking for it on the fifth day for 7 units of money, resulting in a total of 17 units of money earned.","solution":"def max_earnings(n, events): Returns the maximum amount of money that can be earned given a sequence of procure and request events. :param n: Number of events :param events: List of strings representing procure and request events :return: Maximum earnings # Initialize inventory as a dictionary to count available watermelons by weight inventory = {} earnings = 0 for event in events: action, weight = event.split() weight = int(weight) if action == \\"procure\\": if weight in inventory: inventory[weight] += 1 else: inventory[weight] = 1 elif action == \\"request\\": if weight in inventory and inventory[weight] > 0: earnings += weight inventory[weight] -= 1 return earnings"},{"question":"Julia and her friends have a unique way of sending secret messages to each other. Each message is divided into segments, and each segment contains a non-negative integer. They enjoy decoding messages by rearranging the segments based on specific rules. You are given a message as a list of non-negative integers. Julia wants to count the number of ways to rearrange the segments such that the sum of the digits in each rearranged segment is divisible by 3. Note that the same digits but in different segments are considered different. Write a function that takes a list of non-negative integers as input and returns the number of ways to rearrange the segments so that the sum of the digits in each rearranged segment is divisible by 3. Since the number can be very large, return it modulo 10^9+7. -----Input----- The first line contains an integer k (1 leq k leq 10^5) — the number of segments in the message. The second line contains a list of k integers a_1, a_2, ldots, a_k (0 leq a_i leq 10^6) — the segments of the message. -----Output----- Print one integer — the number of ways to rearrange the segments so that the sum of the digits in each rearranged segment is divisible by 3, calculated by modulo 10^9+7. -----Examples----- Input 3 123 456 789 Output 6 Input 4 111 222 333 444 Output 24 -----Note----- In the first example, there are 6 rearrangements, all resulting in sums divisible by 3: 123 + 456 + 789 = 1368 (sum of digits = 1+3+6+8=18) 456 + 123 + 789 = 1368 (sum of digits = 1+3+6+8=18) 789 + 123 + 456 = 1368 (sum of digits = 1+3+6+8=18) 123 + 789 + 456 = 1368 (sum of digits = 1+3+6+8=18) 456 + 789 + 123 = 1368 (sum of digits = 1+3+6+8=18) 789 + 456 + 123 = 1368 (sum of digits = 1+3+6+8=18) In the second example, there are 24 rearrangements, all resulting in sums divisible by 3 because each segment sum of digits is itself divisible by 3: 111 + 222 + 333 + 444 = 1110 (sum of digits = 1+1+1+2+2+2+3+3+3+4+4+4=27) And so on for each permutation. Make sure your code handles the modulo operation to prevent overflow issues with large numbers.","solution":"def sum_of_digits(n): return sum(int(d) for d in str(n)) def count_rearrangements(k, segments): MOD = 10**9 + 7 # Count segments by sum of digits % 3 category count_0 = 0 count_1 = 0 count_2 = 0 for segment in segments: sum_digits = sum_of_digits(segment) if sum_digits % 3 == 0: count_0 += 1 elif sum_digits % 3 == 1: count_1 += 1 else: count_2 += 1 # Count the number of permutations from math import factorial total_permutations = factorial(k) result = total_permutations % MOD return result"},{"question":"Amara is organizing a series of workshops and has a sequence of n workshops each tagged with a popularity score. She needs to find out for each workshop if it has higher, lower, or equal popularity compared to the previous workshop in the sequence (from left to right). INPUT: First line consists of a single integer n, the number of workshops. The second line consists of n integers p1, p2, ..., pn denoting the popularity scores of the workshops. OUTPUT: Output a single line consisting of n-1 characters. The i-th character should be \'H\' if the i-th workshop is higher in popularity than the (i-1)-th, \'L\' if it is lower, or \'E\' if it is equal. CONSTRAINTS: 1 ≤ n ≤ 10^5 1 ≤ pi ≤ 10^9 SAMPLE INPUT 5 10 20 20 15 30 SAMPLE OUTPUT HELH Explanation For the 2nd workshop, since 20 > 10, it is marked \'H\'. For the 3rd workshop, since 20 = 20, it is marked \'E\'. For the 4th workshop, since 15 < 20, it is marked \'L\'. For the 5th workshop, since 30 > 15, it is marked \'H\'.","solution":"def workshop_popularity(n, popularities): Determines the popularity trend for workshops compared to the previous workshop. result = [] for i in range(1, n): if popularities[i] > popularities[i - 1]: result.append(\'H\') elif popularities[i] < popularities[i - 1]: result.append(\'L\') else: result.append(\'E\') return \'\'.join(result) # Sample usage for the function: # print(workshop_popularity(5, [10, 20, 20, 15, 30])) # Expected: \'HELH\'"},{"question":"Given a binary tree, determine if it contains a root-to-leaf path such that the sum of the node values in the path equals a given target sum. A leaf is a node with no children. Example 1: Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22 Output: true Explanation: The root-to-leaf path with the sum 22 is as follows: 5 -> 4 -> 11 -> 2, which equals 22. Example 2: Input: root = [1,2,3], targetSum = 5 Output: false Explanation: There are no root-to-leaf paths with sum 5. Example 3: Input: root = [1,2], targetSum = 1 Output: false Explanation: There are no root-to-leaf paths with sum 1. Constraints: - The number of nodes in the tree is in the range [0, 5000]. - -1000 ≤ Node.val ≤ 1000 - -1000 ≤ targetSum ≤ 1000","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def hasPathSum(root, targetSum): Determines if the binary tree has a root-to-leaf path with the given target sum. if not root: return False # Check if it\'s a leaf node if not root.left and not root.right: return root.val == targetSum # Recur down the tree targetSum -= root.val return hasPathSum(root.left, targetSum) or hasPathSum(root.right, targetSum)"},{"question":"Alice has a retail store where she sells various items. She is planning a promotional event to offer discounts on certain items, but she wants to ensure that the discount only applies to items that meet specific criteria. She needs your help to determine which items will get the discount. She provides you with a list of items, and each item has a price and a rating. An item qualifies for the discount if its price is within a given range [minPrice, maxPrice] and its rating is at least `minRating`. Your task is to write a program that takes the list of items and the discount criteria as input, and outputs the total number of items that qualify for the discount. -----Input----- The input consists of: - one line with two integers `n` (1 le n le 100000), the number of items, and `m` (0 le m le 100000), the number of discount criteria; - `n` lines, each containing an integer `p_i` (1 le p_i le 1000000), the price of the i-th item, followed by an integer `r_i` (1 le r_i le 5), the rating of the i-th item; - `m` lines, each containing two integers `minPrice`, `maxPrice` (1 le minPrice le maxPrice le 1000000), and an integer `minRating` (1 le minRating le 5), representing the discount criteria. -----Output----- Output an integer representing the total number of items that qualify for the discount based on any of the given criteria. -----Examples----- Sample Input: 5 2 1000 4 1500 3 2000 5 3000 2 2500 5 1000 2000 4 2000 3000 3 Sample Output: 3 Explanation: - First discount criterion: `minPrice = 1000`, `maxPrice = 2000`, `minRating = 4` - Item 1 (price 1000, rating 4) qualifies - Item 2 (price 1500, rating 3) does not qualify - Item 3 (price 2000, rating 5) qualifies - Second discount criterion: `minPrice = 2000`, `maxPrice = 3000`, `minRating = 3` - Item 3 (price 2000, rating 5) qualifies again - Item 4 (price 3000, rating 2) does not qualify - Item 5 (price 2500, rating 5) qualifies Total qualifying items: 3 Note: - An item can qualify under multiple criteria but will only be counted once.","solution":"def count_discounted_items(n, m, items, criteria): Returns the total number of unique items that qualify for the discount based on the given criteria. Parameters: - n: int, number of items - m: int, number of discount criteria - items: list of tuples (price, rating) - criteria: list of tuples (minPrice, maxPrice, minRating) Returns: - int, total number of items that qualify for the discount qualified_items = set() for min_price, max_price, min_rating in criteria: for i, (price, rating) in enumerate(items): if min_price <= price <= max_price and rating >= min_rating: qualified_items.add(i) return len(qualified_items)"},{"question":"Burenka has decided to test her strength with another challenge before her coronation. She has been given an array of integers and she needs to perform a series of operations to make all array elements equal. The operation is defined as follows: 1. Select two indices l and r, so that 1 le l le r le n. 2. Add an integer x to all elements a_i where l le i le r. It takes exactly 1 second to perform each operation regardless of the number of elements involved. Burenka needs to determine the minimum number of operations required to make all elements of the array equal. -----Input----- The first line contains a single integer t (1 le t le 500) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 10^5) — the size of the array. The second line of each test case contains n integers a_1, a_2, cdots , a_n (-10^9 le a_i le 10^9) — elements of the array. It is guaranteed that the sum of n in all tests does not exceed 10^5. -----Output----- For each test case, output a single number — the minimum number of operations needed to make all elements of the array equal. -----Examples----- Input 3 3 2 4 6 4 1 1 1 1 5 5 7 5 5 7 Output 2 0 2 -----Note----- In the first test case, Burenka can first select segment l = 1, r = 3, and x = 2, turning the array into [4, 6, 8]. Then another operation on the same segment with x = -2 will make the array [2, 4, 6], achieving equality in 2 operations. In the second test case, all elements are already equal, so no operation is needed. In the third test case, Burenka can select segment l = 1, r = 2, and x = 2, resulting in [7, 9, 5, 5, 7] and then segment l = 4, r = 5, and x = 2 to make the array [7, 9, 5, 7, 9]. Finally, one more operation on the entire array with x = -2 will achieve equality in 2 operations.","solution":"def min_operations_to_equalize_array(t, test_cases): results = [] for case in test_cases: n, arr = case if n == 1: results.append(0) continue # Count of each number in the array frequency = {} for num in arr: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 # Max frequency of the most common number max_count = max(frequency.values()) # Minimum operations needed to make all numbers equal (n - max_count) results.append(n - max_count) return results"},{"question":"You are given a grid representing a maze where some cells are passable and some are walls. Your task is to determine the shortest path from the start cell to the target cell. The maze is defined by a matrix with 0\'s and 1\'s — 0 represents a passable cell and 1 represents a wall. You can move up, down, left, or right from a cell. -----Input----- - The first line contains two integers n and m denoting the dimensions of the maze. - The next n lines contain m integers each (either 0 or 1) representing the maze. - The next line contains four integers x_1, y_1, x_2, and y_2, representing the coordinates of the start cell (x_1, y_1) and the target cell (x_2, y_2). The coordinates are zero-indexed. -----Output----- - Output a single integer denoting the length of the shortest path from the start cell to the target cell. If there is no valid path, output -1. -----Constraints----- - 1 le n, m le 100 - The start and target cells are always passable (i.e., contain 0). -----Example Input----- 5 5 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 4 4 -----Example Output----- 8 -----Explanation----- The shortest path in the example maze moves through passable cells as follows: (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) -> (3, 2) -> (4, 2) -> (4, 3) -> (4, 4) This path has a total length of 8.","solution":"from collections import deque def shortest_path_maze(n, m, maze, x1, y1, x2, y2): Returns the length of the shortest path from the start cell (x1, y1) to the target cell (x2, y2) in the maze. if (x1, y1) == (x2, y2): return 0 # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the queue with the start cell queue = deque([(x1, y1, 0)]) visited = set() visited.add((x1, y1)) while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == 0 and (nx, ny) not in visited: if (nx, ny) == (x2, y2): return dist + 1 queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 # Function to parse the input def solve_maze_problem(n, m, grid_data, start_x, start_y, target_x, target_y): maze = [list(map(int, row.split())) for row in grid_data] return shortest_path_maze(n, m, maze, start_x, start_y, target_x, target_y)"},{"question":"In a distant land, cities are connected by roads. The government has decided to upgrade the roads to attract tourists. Each road has a cost associated with upgrading it. The government wants to upgrade a subset of these roads such that every city is reachable from any other city (a connected network), and the total cost of upgrading the roads is minimized. Given n cities and m roads connecting the cities, each road with a specific cost, determine the minimum cost to upgrade the roads so that every city can be reached from any other city. Input The first line contains two integers n and m — the number of cities and the number of roads (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100000). Each of the next m lines contains three integers ui, vi, and ci (1 ≤ ui, vi ≤ n, ui ≠ vi, 1 ≤ ci ≤ 10000), which means there is a road connecting city ui and city vi with an upgrade cost of ci units. Output Print the only number — the minimum cost to upgrade the roads so that each city is reachable from any other city. If it is impossible to create a connected network, print \\"-1\\" (without the quotes). Examples Input 4 4 1 2 1 2 3 4 3 4 3 1 4 5 Output 8 Input 4 2 1 2 3 3 4 2 Output -1 Input 5 6 1 2 2 1 3 2 3 4 3 4 5 1 2 3 4 1 4 3 Output 8 Note In the first test, the minimum cost network to connect all cities is formed by the roads 1-2 (cost 1), 2-3 (cost 4), and 3-4 (cost 3), making the total cost = 1 + 4 + 3 = 8. In the second test, there are not enough roads to connect all the cities, so the answer is -1. In the third example, roads 1-2 (cost 2), 1-3 (cost 2), 3-4 (cost 3), and 4-5 (cost 1) can be chosen to connect all cities with a minimum cost of 2 + 2 + 3 + 1 = 8.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if xroot != yroot: if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, roads): parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = 0 i = 0 e = 0 roads = sorted(roads, key=lambda item: item[2]) while e < n - 1 and i < len(roads): u, v, w = roads[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result = result + w union(parent, rank, x, y) if e != n - 1: return -1 return result def minimum_upgrade_cost(n, m, roads): if m == 0: return -1 if n > 1 else 0 return kruskal(n, roads)"},{"question":"Write a function named `FindMaximumProduct` that takes a list of integers and returns the maximum product of two distinct elements in the list. The list will have at least two integers.","solution":"def FindMaximumProduct(nums): Returns the maximum product of two distinct elements in the list. Arguments: nums -- list of integers (At least two elements) Returns: int -- maximum product of two distinct elements if len(nums) < 2: raise ValueError(\\"List must contain at least two distinct elements.\\") # Sort the list to get the largest and second largest easily nums.sort() return max(nums[-1] * nums[-2], nums[0] * nums[1])"},{"question":"You are given a list of integers nums[]. You need to determine if there exists a non-empty subset of nums such that the sum of its elements is equal to the sum of the remaining elements in the list. Example 1: Input: nums = [1, 5, 11, 5] Output: True Explanation: The array can be partitioned into [1, 5, 5] and [11]. Example 2: Input: nums = [1, 2, 3, 5] Output: False Explanation: The array cannot be partitioned into equal subsets. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canPartition() which takes the list nums[] as input parameter and returns a boolean value, True if the list can be partitioned into subsets with equal sum, otherwise False. Expected Time Complexity: O(N * S) Expected Space Complexity: O(S) Note: - N is the length of the input list nums. - S is the sum of all elements in nums divided by 2. - The list may contain integers between 1 and 100. - The length of the list will be between 1 and 200.","solution":"def canPartition(nums): total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition if total_sum % 2 != 0: return False target = total_sum // 2 # Initialize the dp array to track if the subset sum is achievable dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"You are given a list of strings representing book titles. Each title might contain multiple words. Your task is to determine the book title that appears the most frequently in the list. If there is a tie (i.e., multiple titles with the same highest frequency), return the alphabetically first title among them. Write a function `most_frequent_book_title(titles)` that takes a list of strings as input and returns a string. # Examples ```python inputs outputs [\\"Harry Potter\\", \\"The Hobbit\\", \\"Harry Potter\\", \\"The Hobbit\\", \\"Harry Potter\\"] -> \\"Harry Potter\\" [\\"War and Peace\\", \\"Great Expectations\\", \\"War and Peace\\", \\"War and Peace\\", \\"Great Expectations\\"] -> \\"War and Peace\\" [\\"Moby Dick\\", \\"Pride and Prejudice\\", \\"Moby Dick\\", \\"Great Gatsby\\", \\"Pride and Prejudice\\"] -> \\"Moby Dick\\" ``` # Constraints - Each title in the list will have at least one word and will not be an empty string. - The list will contain at least one book title and at most 1000 titles. - Titles are case-sensitive, meaning \\"Harry Potter\\" and \\"harry potter\\" are considered different titles. - If two or more titles have the same highest frequency, return the title that comes first in alphabetical order.","solution":"from collections import Counter def most_frequent_book_title(titles): Returns the most frequently occurring book title in the list. If there is a tie, returns the alphabetically first title among them. if not titles: return \\"\\" count = Counter(titles) max_frequency = max(count.values()) most_frequent_titles = [title for title, freq in count.items() if freq == max_frequency] return min(most_frequent_titles)"},{"question":"You are given a rectangular grid with M rows and N columns. Each cell in the grid contains an integer representing the elevation at that cell. You are currently standing on the top-left cell (1,1) which is at the highest elevation point in the grid. You plan to move to the bottom-right cell (M,N) which is at the lowest elevation point. Your movement is restricted to only downward or rightward directions. To make your journey easier, you can slide to adjacent cells (rightwards or downwards) only if the elevation of the adjacent cell is equal to or lower than the current cell\'s elevation. Your task is to find the minimum number of steps required to reach the bottom-right cell from the top-left cell. If it is not possible to reach the bottom-right cell following these rules, return -1. Input: The first line contains two integers M and N representing the number of rows and columns in the grid respectively. It is followed by M lines, each consisting of N space-separated integers representing the elevations at each cell. Output: Print a single integer, the minimum number of steps required to reach the bottom-right cell from the top-left cell. If it is not possible, print -1. Constraints: 1 ≤ M, N ≤ 100 1 ≤ Elevations in cells ≤ 1000 Example Input: 3 4 10 8 8 7 9 7 6 5 8 7 5 4 Example Output: 5 Explanation: The path from the top-left to the bottom-right with the minimum number of steps is: (1,1) -> (2,1) -> (2,2) -> (2,3) -> (2,4) -> (3,4) The corresponding elevations are: 10 -> 9 -> 7 -> 6 -> 5 -> 4 So, the minimum number of steps is 5.","solution":"def min_steps_to_reach_bottom_right(M, N, grid): from collections import deque # Directions for moving right and downward directions = [(0, 1), (1, 0)] # BFS Initialization queue = deque([(0, 0, 0)]) # (row, col, steps) visited = [[False] * N for _ in range(M)] visited[0][0] = True while queue: r, c, steps = queue.popleft() # If reached the bottom-right cell if r == M - 1 and c == N - 1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < M and 0 <= nc < N and not visited[nr][nc] and grid[nr][nc] <= grid[r][c]: visited[nr][nc] = True queue.append((nr, nc, steps + 1)) return -1 # If it\'s impossible to reach the target cell # Example usage if __name__ == \\"__main__\\": M, N = 3, 4 grid = [ [10, 8, 8, 7], [9, 7, 6, 5], [8, 7, 5, 4] ] print(min_steps_to_reach_bottom_right(M, N, grid)) # Output: 5"},{"question":"Write a function that takes in a list of integers and returns the smallest number of moves required to make all elements in the list equal. A move is defined as incrementing or decrementing a single element by 1. In other words, for a given list of integers, determine the minimum number of single-step increments or decrements needed so that every number in the list is the same. Examples: ``` [1, 2, 3] => 2 [4, 1, 7] => 6 [10, 10, 10] => 0 [3, 5, 7, 9] => 8 ``` These examples assume that you can move both up and down to reach the target. For instance, in the first example [1, 2, 3], you can increment 1 to 2, then increment 2 to 3, taking 2 moves to make [3, 3, 3].","solution":"def min_moves_to_equal_elements(nums): Calculate the minimum number of moves to make all elements in the list equal. Args: nums: List of integers. Returns: int: Minimum number of moves required. median = sorted(nums)[len(nums) // 2] return sum(abs(num - median) for num in nums)"},{"question":"A conveyor belt has boxes of different weights moving along it. Each box moving past a sensor has its weight measured, and this weight is provided as a list of integers. The goal is to identify if there are any duplicate weights on the conveyor belt. A weight is considered a duplicate if it appears more than once in the list. Write a program that checks for duplicate weights. -----Constraints----- - 1 ≦ N ≦ 10^5 (N is the number of boxes measured) - 1 ≦ weights[i] ≦ 10^6 (weights[i] is the weight of the ith box) -----Input----- The input is given from Standard Input in the following format: N weights_1 weights_2 ... weights_N -----Output----- Print Yes if there are any duplicate weights. Print No otherwise. -----Sample Input----- 5 10 20 30 20 40 -----Sample Output----- Yes In this example, there are 5 weights given. The weight 20 appears twice, so the output should be Yes.","solution":"def check_duplicates(n, weights): Returns \'Yes\' if there are duplicate weights, \'No\' otherwise. Parameters: n (int): Number of weights. weights (list of int): List of weights. Returns: str: \'Yes\' if there are duplicates, \'No\' otherwise. weight_set = set() for weight in weights: if weight in weight_set: return \'Yes\' weight_set.add(weight) return \'No\'"},{"question":"You are given a list of integers. Your task is to determine if the sum of the elements in the list, when divided by the length of the list, results in an integer or not. If it does, return \\"YES\\", otherwise return \\"NO\\". Example 1: Input: arr = [2, 4, 6, 8] Output: \\"YES\\" Explanation: Sum of elements is 20 and length of the list is 4. 20 divided by 4 is 5, which is an integer. Example 2: Input: arr = [1, 2, 3, 5] Output: \\"NO\\" Explanation: Sum of elements is 11 and length of the list is 4. 11 divided by 4 is 2.75, which is not an integer. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isAverageInteger() which takes the list of integers arr as input and returns the answer. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^5 1 ≤ arr[i] ≤ 10^4","solution":"def isAverageInteger(arr): Determines if the average of the list elements is an integer. Parameters: arr (list of int): The list of integers Returns: str: \\"YES\\" if the average is an integer, otherwise \\"NO\\" total_sum = sum(arr) length = len(arr) if total_sum % length == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an integer array called `nums`, and an integer value called `target`. Your task is to determine if there exist three integers in the `nums` array whose sum is exactly equal to the `target` value. If such a combination exists, return `True`; otherwise, return `False`. Write a function `three_sum_equals_target(nums, target)` that takes in the `nums` list of integers and the integer `target`, and returns a boolean value. # Input - `nums`, a list of integers, where 0 <= len(nums) <= 1000 and the integers can be positive, negative, or zero. - `target`, an integer. # Output Return a boolean value: `True` if there exist three integers in the `nums` array whose sum is equal to the `target` value, and `False` otherwise. # Example Example 1 ```python nums = [1, 2, 3, 4, 5] target = 9 ``` Output ```python True ``` Example 2 ```python nums = [1, -1, 2, -2, 3, -3] target = 0 ``` Output ```python True ``` Example 3 ```python nums = [1, 1, 1, 1] target = 10 ``` Output ```python False ```","solution":"def three_sum_equals_target(nums, target): Return True if there are three integers in the nums array whose sum is equal to the target value. nums.sort() for i in range(len(nums) - 2): left, right = i + 1, len(nums) - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Given an integer array of length n, find the most frequently occurring element in the array. If there are multiple elements with the same maximum frequency, return the smallest element among them. Constraints * ( 1 leq n leq 10^6 ) * ( -10^5 leq arr[i] leq 10^5 ) for ( 0 leq i < n ) Input The input is given in the following format. The first line contains a single integer n. The second line contains n integers representing the elements of the array. Output Print the most frequently occurring element. If there are multiple elements with the same maximum frequency, print the smallest one. Example Input 7 4 5 6 4 5 3 4 Output 4 Input 6 1 2 2 3 3 3 Output 3","solution":"def most_frequent_element(arr): Finds the most frequently occurring element in the array. If there are multiple elements with the same maximum frequency, returns the smallest element among them. from collections import Counter count = Counter(arr) max_occurrences = max(count.values()) # Find the smallest element among those with max_occurrences most_frequent = min((num for num in count if count[num] == max_occurrences)) return most_frequent"},{"question":"Given an array of integers nums and an integer k, your task is to complete the function maxAvgSubarray() which finds the contiguous subarray of length k that has the maximum average value and returns that value. Example 1: Input: nums = [1, 12, -5, -6, 50, 3] k = 4 Output: 12.75 Explanation: The subarray [12, -5, -6, 50] has the maximum average value of 12.75. Example 2: Input: nums = [5, 1, -2, 3, 7, 2] k = 3 Output: 4.0 Explanation: The subarray [3, 7, 2] has the maximum average value of 4.0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxAvgSubarray() which takes the reference to the array nums and an integer k as input parameter and returns a double value representing the maximum average of the subarray of length k. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4 1 <= k <= nums.length","solution":"def maxAvgSubarray(nums, k): Finds the contiguous subarray of length k that has the maximum average value. Args: nums (List[int]): List of integers. k (int): Length of the contiguous subarray to check. Returns: float: The maximum average value of the subarray of length k. n = len(nums) max_sum = sum(nums[:k]) current_sum = max_sum for i in range(k, n): current_sum += nums[i] - nums[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum / k"},{"question":"Alice has a number in her mind and loves experimenting with its properties. She has recently become fascinated with palindromic numbers. A palindromic number is a number that remains the same when its digits are reversed. For example, 121 and 1331 are palindromic numbers. Alice is curious about the smallest palindromic number that is greater than a given number ( n ). -----Task----- Given an integer ( n ), find the smallest palindromic number that is greater than ( n ). -----Input----- The input contains one line with one integer ( n ) (1 leq n leq 10^6). -----Output----- Output one line with the smallest palindromic number greater than ( n ). -----Examples----- Sample Input: 123 Sample Output: 131 Sample Input: 808 Sample Output: 818","solution":"def is_palindrome(num): Returns True if num is a palindromic number, False otherwise. return str(num) == str(num)[::-1] def next_palindrome(n): Given an integer n, returns the smallest palindromic number greater than n. n += 1 while not is_palindrome(n): n += 1 return n"},{"question":"Task There is a 3D grid of dimensions (N times M times L). Each cell in the grid can be either empty (`.`) or blocked (`#`). Your task is to determine the length of the shortest path from the starting cell to the target cell. You can move to adjacent cells in the grid, i.e., left, right, forward, backward, up, and down, provided the cell you are moving to is not blocked. The coordinates of the starting cell and the target cell, along with the dimensions of the grid and its contents, will be provided as an input. Input The input consists of: - Three integers (N, M, L) where (1 leq N, M, L leq 50) representing the dimensions of the grid. - An (N times M times L) array representing the grid. - Three integers (x_s, y_s, z_s) representing the coordinates of the starting cell. - Three integers (x_t, y_t, z_t) representing the coordinates of the target cell. You can assume that both the starting cell and the target cell are valid and not blocked. Output Return the length of the shortest path from the starting cell to the target cell. If the target cell is unreachable, return (-1). Example ```python def shortest_path(grid, N, M, L, start, target): # Implement your solution here # Example Input N, M, L = 3, 3, 3 grid = [ [[\'.\',\'.\',\'.\'],[\'#\',\'.\',\'#\'],[\'.\',\'.\',\'.\']], [[\'.\',\'.\',\'.\'],[\'#\',\'.\',\'#\'],[\'.\',\'.\',\'.\']], [[\'.\',\'.\',\'.\'],[\'#\',\'.\',\'#\'],[\'.\',\'.\',\'.\']] ] start = (0, 0, 0) target = (2, 2, 2) # Example Output print(shortest_path(grid, N, M, L, start, target)) # 6 ``` Explanation: The shortest path follows the sequence of coordinates: [(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 1, 2), (0, 2, 2), (1, 2, 2), (2, 2, 2)] which has length 6.","solution":"from collections import deque def is_valid(x, y, z, N, M, L, grid, visited): return 0 <= x < N and 0 <= y < M and 0 <= z < L and grid[x][y][z] == \'.\' and not visited[x][y][z] def shortest_path(grid, N, M, L, start, target): directions = [(1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, -1, 0), (0, 0, 1), (0, 0, -1)] queue = deque([(start, 0)]) visited = [[[False] * L for _ in range(M)] for _ in range(N)] visited[start[0]][start[1]][start[2]] = True while queue: (x, y, z), dist = queue.popleft() if (x, y, z) == target: return dist for dx, dy, dz in directions: nx, ny, nz = x + dx, y + dy, z + dz if is_valid(nx, ny, nz, N, M, L, grid, visited): queue.append(((nx, ny, nz), dist + 1)) visited[nx][ny][nz] = True return -1"},{"question":"Given an array of n positive integers, we define a peak element as an element that is greater than its immediate neighbors. The first and last elements of the array are considered only if they are greater than their one neighbor. The task is to find all the peak elements in the array and determine if the sum of these peak elements is an even number. If the sum is even, print \\"EVEN\\"; otherwise, print \\"ODD\\". For example: Consider an array [1, 3, 2, 7, 6, 5]. The peak elements are 3 and 7 as both are greater than their immediate neighbors. The sum of these peak elements is 10, which is even. Hence, the output should be \\"EVEN\\". Input: The first line of input contains an integer T, the number of test cases. Each of the next T lines contains an integer n representing the size of the array followed by n positive integers representing the elements of the array. Output: For each test case, output a single line that is \\"EVEN\\" if the sum of the peak elements is even, or \\"ODD\\" if it is odd. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 1000, n - number of elements in the array. 1 ≤ array[i] ≤ 10000 SAMPLE INPUT 2 6 1 3 2 7 6 5 5 1 2 3 4 5 SAMPLE OUTPUT EVEN ODD","solution":"def is_sum_of_peaks_even(num_cases, cases): results = [] for case in cases: n, arr = case[0], case[1] peaks = [] if n == 1: peaks.append(arr[0]) if n > 1 and arr[0] > arr[1]: peaks.append(arr[0]) for i in range(1, n-1): if arr[i] > arr[i-1] and arr[i] > arr[i+1]: peaks.append(arr[i]) if n > 1 and arr[n-1] > arr[n-2]: peaks.append(arr[n-1]) sum_peaks = sum(peaks) if sum_peaks % 2 == 0: results.append(\\"EVEN\\") else: results.append(\\"ODD\\") return results"},{"question":"You are tasked with organizing a coding practice session for aspiring computer scientists. The session\'s highlight will be a programming challenge based on arrays and sorting algorithms. The challenge revolves around a unique method of describing word sequences alphabetically. Here is how it works: Each person in the session is given a list of words. They are required to sort the words in lexicographical (alphabetical) order. However, once the words are sorted, they should output the word that would appear in the middle of the sorted list (the median word). If the list contains an even number of words, the word immediately preceding the middle of the list should be considered the median. The task requires participants to write a program that accomplishes this. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of words in the list. The next n lines contain one word each. Each word consists of lowercase English letters only and has a length between 1 and 100 characters inclusive. Output Print the median word after sorting the list lexicographically. For lists with an even number of words, print the word immediately preceding the middle of the list. Examples Input 5 apple banana cherry date elderberry Output cherry Input 4 kiwi orange grape melon Output kiwi","solution":"def find_median_word(n, words): Returns the median word after sorting words lexicographically. For even number of words, returns the word immediately preceding the middle of the list. Parameters: n (int): Number of words words (list of str): List of words to be sorted Returns: str: The median word sorted_words = sorted(words) median_index = (n - 1) // 2 return sorted_words[median_index] # Sample use cases # n = 5 # words = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\", \\"elderberry\\"] # print(find_median_word(n, words)) # Output: cherry # n = 4 # words = [\\"kiwi\\", \\"orange\\", \\"grape\\", \\"melon\\"] # print(find_median_word(n, words)) # Output: kiwi"},{"question":"A palindrome is a string that reads the same forward and backward, e.g., \\"radar\\", \\"level\\", \\"rotor\\". You need to write a program to determine whether a given string can be rearranged into a palindrome. Input The input consists of multiple lines. Each line contains a single string S (1 ≤ |S| ≤ 100). The input ends with a line containing a single character \'*\', which should not be processed. Output For each string, output \\"YES\\" if it is possible to rearrange the string to form a palindrome, otherwise output \\"NO\\". Example Input civic ivicc hello * Output YES YES NO","solution":"def can_rearrange_to_palindrome(s: str) -> str: Determines whether the given string can be rearranged to form a palindrome. :param s: The input string :return: \\"YES\\" if the string can be rearranged to form a palindrome, \\"NO\\" otherwise from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # A string can be rearranged to form a palindrome if # at most one character has an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) if odd_count > 1: return \\"NO\\" else: return \\"YES\\" def process_input(lines): results = [] for line in lines: if line == \'*\': break results.append(can_rearrange_to_palindrome(line.strip())) return results"},{"question":"A park is organizing a unique treasure hunt game. The park is represented as an n x m grid, where each cell contains an integer representing the amount of treasure at that location. Each player starts at the top-left corner of the grid (0,0) and can move either right or down, one cell at a time, until they reach the bottom-right corner of the grid (n-1,m-1). The player\'s goal is to collect the maximum amount of treasure on their path from the top-left to the bottom-right corner. Write a program that computes the maximum amount of treasure a player can collect. # Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns of the grid respectively. The next n lines each contain m integers, representing the amount of treasure in each cell of the grid. The value in each cell is a non-negative integer (0 ≤ treasure ≤ 100). # Output Output a single integer, representing the maximum amount of treasure that can be collected. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 12 ``` Explanation The optimal path that collects the maximum amount of treasure is: 1 → 3 → 5 → 2 → 1. The total treasure collected along this path is 12.","solution":"def max_treasure(n, m, grid): dp = [[0]*m for _ in range(n)] # Initialize the first cell with its own treasure value dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Populate the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to determine if the string can be rearranged to form a palindrome. Return `True` if it\'s possible to rearrange the string to form a palindrome, otherwise return `False`. ``` can_form_palindrome(\\"carrace\\") --> True can_form_palindrome(\\"daily\\") --> False ``` > Note: A palindrome is a word that reads the same backward as forward. For example, \\"racecar\\" and \\"level\\" are palindromes.","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. Args: s (str): A string consisting of lowercase English letters. Returns: bool: True if the string can be rearranged to form a palindrome, otherwise False. from collections import Counter # Count occurrences of each character counter = Counter(s) # A string can be rearranged to form a palindrome if at most one character has an odd count odd_count = sum(1 for count in counter.values() if count % 2 != 0) return odd_count <= 1"},{"question":"You are given a list of integers representing heights of mountains in a linear range. A mountain is defined as a contiguous subarray where the integers strictly increase and then strictly decrease. The minimum length of a mountain is 3. Your task is to find the length of the longest mountain. If there is no mountain, return 0. For example, in the following array: [2, 1, 4, 7, 3, 2, 5] The longest mountain is [1, 4, 7, 3, 2] which has a length of 5. Input First line consists of the number of test cases. Second line of each test case consists of the size of the array N (1 ≤ N ≤ 1000), followed by N integers representing the heights of the mountains in the range. Output For each test case, output the length of the longest mountain. If no mountain exists, output 0. SAMPLE INPUT 2 7 2 1 4 7 3 2 5 6 2 2 2 2 2 2 SAMPLE OUTPUT 5 0","solution":"def longest_mountain(arr): n = len(arr) if n < 3: return 0 longest = 0 for i in range(1, n-1): if arr[i] > arr[i-1] and arr[i] > arr[i+1]: left = i - 1 right = i + 1 while left > 0 and arr[left] > arr[left - 1]: left -= 1 while right < n - 1 and arr[right] > arr[right + 1]: right += 1 longest = max(longest, right - left + 1) return longest def solve(test_cases): results = [] for test in test_cases: N, array = test results.append(longest_mountain(array)) return results"},{"question":"Maria works in a library and needs to organize a collection of n books. Each book has a unique height given in the form of an array h. The height of the ith book is denoted by h[i]. She wants to arrange all the books in a single stack such that no book in the stack is taller than the book placed directly below it. In other words, for any two consecutive books (i, j) in the stack, h[i] geq h[j] must hold true if book i is below book j. The height of the book stack is defined as the sum of the heights of all the books in the stack. Help Maria find the maximum height of a stack that she can form under these constraints. -----Input:----- - The first line contains a single integer n. - The next n lines contain the integer h[i] - the height of the i-th book. -----Output:----- Output a single integer denoting the maximum height of the stack. -----Constraints----- - 1 leq n leq 10^5 - 1 leq h[i] leq 10^5 -----Subtasks----- - 30 points : 1 leq n leq 10^2 - 70 points : 1 leq n leq 10^5 -----Sample Input:----- 6 4 2 3 1 5 2 -----Sample Output:----- 14","solution":"def max_stack_height(n, heights): Returns the maximum height of the stack where no book in the stack is taller than the book placed directly below it. Parameters: n (int): The number of books. heights (list): A list of integers representing the height of each book. Returns: int: The maximum stack height. # Sort the heights in non-increasing order sorted_heights = sorted(heights, reverse=True) # Return the sum of the sorted heights return sum(sorted_heights)"},{"question":"You are given a list of non-negative integers representing the amount of money of each house in a row. Each house is arranged in a straight line and the goal is to rob houses in such a way that it maximizes the total amount of money robbed. However, you cannot rob two adjacent houses because it will trigger the alarm. Write a function `max_robbed_amount` that computes the maximum amount of money that can be robbed without triggering the alarms. Note: The length of the list will be at most 100. Example 1: ``` Input: [1, 2, 3, 1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount robbed = 1 + 3 = 4. ``` Example 2: ``` Input: [2, 7, 9, 3, 1] Output: 12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9), and rob house 5 (money = 1). Total amount robbed = 2 + 9 + 1 = 12. ``` Function Signature: ```python def max_robbed_amount(houses: List[int]) -> int: ```","solution":"def max_robbed_amount(houses): Computes the maximum amount of money that can be robbed without triggering the alarms. :param houses: A list of non-negative integers representing the amount of money in each house. :return: The maximum amount of money that can be robbed. if not houses: return 0 if len(houses) == 1: return houses[0] n = len(houses) dp = [0] * n # Base cases dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) # Fill the dp array for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + houses[i]) return dp[-1]"},{"question":"A company is developing a new software solution and needs to compress data arrays efficiently. To compress an array, you replace each group of identical consecutive elements with a single copy of that element followed by its count. For example, the array [1, 1, 1, 2, 2, 3] would be compressed to [1, 3, 2, 2, 3, 1]. Design an algorithm to compress a given array. Implement a function `compress_array(arr)` that takes a list of non-negative integers and returns the compressed version of the array as a list where each unique consecutive element is followed by its count. -----Input----- The input is a single list of non-negative integers `arr` of length n (1 ≤ n ≤ 10^6). -----Output----- The output is a list of integers representing the compressed version of the input list. -----Examples----- Input [1, 1, 1, 2, 2, 3] Output [1, 3, 2, 2, 3, 1] Input [4, 4, 4, 4, 4, 4, 5, 6, 6, 6] Output [4, 6, 5, 1, 6, 3] Input [7, 7, 8, 8, 8, 9] Output [7, 2, 8, 3, 9, 1] -----Note----- In the first example, the element 1 appears three times, so it is represented as [1, 3]. The element 2 appears twice, so it is represented as [2, 2]. The element 3 appears once, so it is represented as [3, 1]. In the second example, the element 4 appears six times, so it is represented as [4, 6]. The element 5 appears once, so it is represented as [5, 1]. The element 6 appears three times, so it is represented as [6, 3].","solution":"def compress_array(arr): Compresses the input array by replacing each group of identical consecutive elements with a single copy of that element followed by its count. Args: arr (list): The input list of non-negative integers. Returns: list: The compressed version of the input list. if not arr: return [] compressed = [] count = 1 current = arr[0] for i in range(1, len(arr)): if arr[i] == current: count += 1 else: compressed.append(current) compressed.append(count) current = arr[i] count = 1 compressed.append(current) compressed.append(count) return compressed"},{"question":"You are given a sequence of integers, and your task is to answer a series of queries regarding this sequence. The queries can be of two types: 1. Update the value at a given position in the sequence. 2. Find the maximum value in a specified subarray of the sequence. Input The first line contains two integers n and q (1 ≤ n, q ≤ 2·105) — the number of elements in the sequence and the number of queries. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the initial elements of the sequence. Each of the next q lines contains a query in the following format: - For a query of the first type: `1 i x` (1 ≤ i ≤ n, 1 ≤ x ≤ 109), indicating that the value at position i should be updated to x. - For a query of the second type: `2 l r` (1 ≤ l ≤ r ≤ n), asking for the maximum value in the subarray from position l to r (inclusive). Output For each query of the second type, print the maximum value in the specified subarray. Examples Input 5 5 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 2 5 1 4 7 2 1 5 Output 3 10 10","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): # Initialize leaves in the segment tree for i in range(self.n): self.tree[self.n + i] = data[i] # Build the rest of the tree for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, pos, value): pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) def query(self, left, right): left += self.n right += self.n result = 0 while left < right: if left % 2: result = max(result, self.tree[left]) left += 1 if right % 2: right -= 1 result = max(result, self.tree[right]) left //= 2 right //= 2 return result def process_queries(n, q, sequence, queries): segment_tree = SegmentTree(sequence) results = [] for query in queries: if query[0] == 1: _, i, x = query segment_tree.update(i - 1, x) elif query[0] == 2: _, l, r = query results.append(segment_tree.query(l - 1, r)) return results"},{"question":"You are given an array of positive integers, representing the pages of a book that need to be read in sequence. Each page takes a certain amount of time to read. There are M readers available to read the book, and the goal is to determine the minimum time needed for the book to be completely read if the pages can be divided among the readers such that each reader reads a contiguous segment of pages. Each reader has to read at least one page, and no page can be left unread. The readers can start reading at the same time, and each reader reads their assigned segment of pages sequentially. You need to determine the minimum possible maximum time taken by any reader. Constraints * 1 ≤ N ≤ 1000 (the number of pages) * 1 ≤ M ≤ N (the number of readers) * 1 ≤ page[i] ≤ 1000 (time to read page i) Input The input is given from Standard Input in the following format: ``` N M page1 page2 ... pageN ``` Output Print the minimum possible maximum reading time for any reader. Examples Input: ``` 4 2 10 20 30 40 ``` Output: ``` 60 ``` Input: ``` 5 4 4 6 2 10 1 ``` Output: ``` 10 ``` Explanation: In the first example, one way to divide the pages is: - Reader 1: reads pages [10, 20, 30] - Reader 2: reads pages [40] Here, the maximum time any reader spends is 60, which is the minimum possible maximum time. In the second example, one way to divide the pages is: - Reader 1: reads page [4] - Reader 2: reads pages [6] - Reader 3: reads pages [2, 10] - Reader 4: reads pages [1] Here, the maximum time any reader spends is 10, which is the minimum possible maximum time.","solution":"def min_max_time(pages, readers): def is_possible(capacity): num_readers = 1 current_sum = 0 for page in pages: if current_sum + page > capacity: num_readers += 1 current_sum = page if num_readers > readers: return False else: current_sum += page return True low, high = max(pages), sum(pages) while low < high: mid = (low + high) // 2 if is_possible(mid): high = mid else: low = mid + 1 return low def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) pages = list(map(int, data[2:])) print(min_max_time(pages, M))"},{"question":"Given an alphanumeric string, work out the sum of all the numeric characters in the string. Example 1: Input: S = \\"P9a8s7sword1\\" Output: 25 Explanation: The numeric characters are 9, 8, 7, and 1. Their sum is 25. Example 2: Input: S = \\"no4num3er5s\\" Output: 12 Explanation: The numeric characters are 4, 3, and 5. Their sum is 12. Your Task: You need to complete the function sumOfDigits() which takes a single string as input and returns the sum of the digits. You need not take any input or print anything. Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 10^{5}","solution":"def sumOfDigits(S): Returns the sum of all numeric characters in the string S. sum_digits = 0 for char in S: if char.isdigit(): sum_digits += int(char) return sum_digits"},{"question":"A company has a rectangular plot of land that needs to be divided into smaller rectangular plots for development. The company wants to ensure that the smaller plots all have the exact same area and that the total number of smaller plots is maximized. Each smaller plot\'s area must be measured in whole square meters. Write a function `maximize_smaller_plots` that takes two integers `length` and `width` representing the dimensions of the land plot. The function should return the maximum possible number of smaller plots, as well as the side length of the smaller square plots. Function Signature ```python def maximize_smaller_plots(length: int, width: int) -> Tuple[int, int]: ``` Input - `length`: An integer, representing the length of the land plot in meters (1 <= length <= 10^9) - `width`: An integer, representing the width of the land plot in meters (1 <= width <= 10^9) Output - A tuple containing two integers: - The maximum number of smaller square plots that can be created - The side length of each smaller plot in meters # Example ```python print(maximize_smaller_plots(4, 6)) ``` **Output:** ```python (6, 2) ``` **Explanation:** The land plot can be divided into 6 smaller plots of 2x2 meters each. Thus, the maximum number of smaller plots is 6 and the side length is 2 meters.","solution":"from math import gcd from typing import Tuple def maximize_smaller_plots(length: int, width: int) -> Tuple[int, int]: Returns the maximum possible number of smaller square plots and the side length of each plot. Args: length (int): The length of the rectangular plot. width (int): The width of the rectangular plot. Returns: Tuple[int, int]: A tuple where the first element is the maximum number of smaller plots and the second element is the side length of each smaller plot. # Find the greatest common divisor (GCD) of the length and width side_length = gcd(length, width) # Calculate the number of smaller plots num_plots = (length // side_length) * (width // side_length) return num_plots, side_length"},{"question":"Given a list of processes, each process is represented as a substring in a format \\"A->B\\", where process A must occur before process B. You need to determine the shortest ordering of processes that satisfies all the given dependencies, or return an empty string if no such ordering exists. Example 1: Input: processes = [\\"A->B\\", \\"B->C\\", \\"C->D\\"] Output: \\"ABCD\\" Explanation: Process A should occur before B, B before C, and C before D. Thus, the shortest ordering is \\"ABCD\\". Example 2: Input: processes = [\\"X->Y\\", \\"Y->Z\\", \\"Z->X\\"] Output: \\"\\" Explanation: The processes form a cycle, so there is no valid ordering. Example 3: Input: processes = [\\"M->N\\", \\"N->O\\", \\"O->P\\", \\"P->M\\"] Output: \\"\\" Explanation: The processes form a cycle, so there is no valid ordering. Example 4: Input: processes = [\\"A->B\\", \\"A->C\\", \\"B->D\\", \\"C->D\\"] Output: \\"ABCD\\" Explanation: Process A should occur before B and C, and both B and C should occur before D. Thus, the shortest ordering is \\"ABCD\\". Example 5: Input: processes = [\\"X->Y\\", \\"Y->Z\\"] Output: \\"XYZ\\" Explanation: Process X should occur before Y, and Y before Z. Thus, the shortest ordering is \\"XYZ\\". Constraints: 1. The number of processes will not exceed 1000. 2. Each process is given in the format \\"A->B\\" where A and B are distinct single uppercase letters. 3. All given processes are unique.","solution":"from collections import defaultdict, deque def find_order(processes): Determines the shortest ordering of processes that satisfies all dependencies or returns an empty string if no such ordering exists. # Step 1: Parse the processes into the dependencies graph graph = defaultdict(list) indegree = defaultdict(int) for process in processes: first, second = process.split(\'->\') graph[first].append(second) indegree[second] += 1 if first not in indegree: # Ensure all nodes are in the indegree map indegree[first] = 0 # Step 2: Find all nodes with no incoming edges (indegree 0) queue = deque([node for node, degree in indegree.items() if degree == 0]) order = [] # Step 3: Perform topological sort while queue: node = queue.popleft() order.append(node) for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # If the resulting order contains all the unique processes, return it as a string if len(order) == len(indegree): return \'\'.join(order) else: return \\"\\" # Cycle detected or not all nodes have been processed"},{"question":"Create a function that simulates a vending machine. The vending machine should be able to dispense items based on a user’s selection and maintain an inventory of items. It should provide the correct change to the user and notify if an item is out of stock or if there is insufficient balance to make a purchase. Here are the initial set-up parameters and functionality requirements: # Inputs: 1. **Inventory Configuration:** - A dictionary where keys are item names and values are dictionaries containing \'price\' (in cents) and \'stock\' (quantity). ```python inventory = { \'Soda\': {\'price\': 125, \'stock\': 10}, \'Chips\': {\'price\': 75, \'stock\': 15}, \'Candy\': {\'price\': 85, \'stock\': 5} } ``` 2. **User Input:** - A string representing the selected item name. - An integer representing the amount of money (in cents) inserted into the machine. # Outputs: 1. **Item Dispensed Message:** - When a successful transaction happens, return a string indicating the item dispensed and any change given back. ```python \'Dispensed Soda. Change: 50 cents.\' ``` 2. **Out of Stock Message:** - When the selected item is out of stock, return a string indicating the stock issue. ```python \'Chips is out of stock.\' ``` 3. **Insufficient Balance Message:** - When the inserted amount is less than the price of the selected item, return a string indicating the balance issue. ```python \'Insufficient balance for Candy. Required: 85 cents.\' ``` # Function Signature: ```python def vending_machine(item: str, money: int, inventory: dict) -> str: pass ``` # Example Usage: ```python # Given inventory configuration inventory = { \'Soda\': {\'price\': 125, \'stock\': 10}, \'Chips\': {\'price\': 75, \'stock\': 15}, \'Candy\': {\'price\': 85, \'stock\': 5} } print(vending_machine(\'Soda\', 175, inventory)) # Output: \'Dispensed Soda. Change: 50 cents.\' print(vending_machine(\'Chips\', 50, inventory)) # Output: \'Insufficient balance for Chips. Required: 75 cents.\' print(vending_machine(\'Candy\', 85, inventory)) # Output: \'Dispensed Candy. Change: 0 cents.\' print(vending_machine(\'Candy\', 85, inventory)) # If stock of Candy is 1 before the transaction, output: \'Candy is out of stock.\' ```","solution":"def vending_machine(item: str, money: int, inventory: dict) -> str: if item not in inventory: return f\\"{item} is not available in this vending machine.\\" item_info = inventory[item] if item_info[\'stock\'] == 0: return f\\"{item} is out of stock.\\" price = item_info[\'price\'] if money < price: return f\\"Insufficient balance for {item}. Required: {price} cents.\\" # Dispense item and give change change = money - price inventory[item][\'stock\'] -= 1 return f\\"Dispensed {item}. Change: {change} cents.\\""},{"question":"A warehouse manager needs an efficient way to manage incoming shipments and store them in the warehouse. The warehouse can be visualized as a 2D grid of cells, where each cell either contains goods or is empty. A shipment consists of multiple containers, each of which requires a certain number of cells for storage. The manager wants to place all the containers in the warehouse such that they occupy contiguous cells either in a horizontal or vertical line. Write a program that determines the optimal placement of the containers in the warehouse to maximize the number of used cells while ensuring that all containers are stored contiguously. Input The input consists of multiple test cases. Each test case represents the state of the warehouse and the containers to be stored. The format of a test case is as follows: m n grid_row_1 grid_row_2 ... grid_row_m k container_length_1 container_length_2 ... container_length_k The first line contains two integers m and n (1 ≤ m, n ≤ 100) representing the number of rows and columns of the warehouse grid, respectively. The next m lines describe the grid. Each line represents a row of the grid and consists of n characters where \'.\' represents an empty cell and \'#\' represents a cell already containing goods. The next line contains an integer k (1 ≤ k ≤ 100) representing the number of containers. The following k lines contain one integer each, representing the lengths of the containers. The last test case is followed by a line containing a single zero. Output For each test case, output a single line containing the number of cells used by the containers after optimal placement. If it is not possible to place all containers, output -1. Example Input 4 4 .... .... .... .... 3 3 2 2 3 3 ..# .#. ..# 1 3 3 3 ..# .#. ..# 1 4 0 Output 7 3 -1","solution":"def parse_input(input_str): Parses the input string and returns a list of test cases. Each test case is a tuple containing: - the grid (2D list) - the list of container lengths lines = input_str.strip().split(\'n\') cases = [] i = 0 while i < len(lines): if lines[i] == \'0\': break m, n = map(int, lines[i].strip().split()) grid = [list(lines[i + j + 1].strip()) for j in range(m)] k = int(lines[i + m + 1].strip()) containers = [int(lines[i + m + 2 + j].strip()) for j in range(k)] cases.append((grid, containers)) i += m + 2 + k return cases def find_max_cells_used(grid, containers): Tries to determine the maximum number of grid cells that can be used for fitting the containers optimally. Returns the maximum number of cells used or -1 if it is not possible to place all containers. m, n = len(grid), len(grid[0]) containers.sort(reverse=True) # Biggest container first used_cells = 0 for container in containers: placed = False # Try to place container horizontally for i in range(m): for j in range(n - container + 1): if all(grid[i][jj] == \'.\' for jj in range(j, j + container)): for jj in range(j, j + container): grid[i][jj] = \'#\' used_cells += container placed = True break if placed: break if not placed: # Try to place container vertically for j in range(n): for i in range(m - container + 1): if all(grid[ii][j] == \'.\' for ii in range(i, i + container)): for ii in range(i, i + container): grid[ii][j] = \'#\' used_cells += container placed = True break if placed: break if not placed: return -1 return used_cells def optimal_placement(input_str): cases = parse_input(input_str) results = [] for grid, containers in cases: result = find_max_cells_used([row[:] for row in grid], containers) # Deep copy grid for each case results.append(result) return results"},{"question":"Task: You need to write a function **matrixMultiplication** that multiplies two matrices and returns the result as a new matrix. # Rules/Notes: * The function should take two matrices as input, represented as 2D lists of integers. * If the matrices cannot be multiplied (number of columns in the first matrix is not equal to the number of rows in the second matrix), the function should return `None`. * Assume the matrices contain only integers and are non-empty. Examples: matrixMultiplication([[1, 2], [3, 4]], [[5, 6], [7, 8]]): ```plaintext Output: [[19, 22], [43, 50]] Explanation: [1, 2] [5, 6] [1*5 + 2*7, 1*6 + 2*8] [19, 22] [3, 4] * [7, 8] = [3*5 + 4*7, 3*6 + 4*8] = [43, 50] ``` matrixMultiplication([[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]]): ```plaintext Output: [[58, 64], [139, 154]] Explanation: [1, 2, 3] [7, 8] [1*7 + 2*9 + 3*11, 1*8 + 2*10 + 3*12] [58, 64] [4, 5, 6] * [9, 10] = [4*7 + 5*9 + 6*11, 4*8 + 5*10 + 6*12] = [139, 154] [11, 12] ``` matrixMultiplication([[1, 2]], [[3, 4, 5], [6, 7, 8]]): ```plaintext Output: [[15, 18, 21]] Explanation: [1, 2] [3, 4, 5] [1*3 + 2*6, 1*4 + 2*7, 1*5 + 2*8] [15, 18, 21] [BR: Matrix Multiplication Rule Satisfied] [6, 7, 8] ``` matrixMultiplication([[1, 2], [3, 4]], [[5, 6, 7]]): ```plaintext Output: None Explanation: Number of columns of the first matrix (2) is not equal to the number of rows of the second matrix (1) ```","solution":"def matrixMultiplication(matrix1, matrix2): Multiplies two matrices and returns the result as a new matrix. :param matrix1: List of lists of integers, first matrix to be multiplied. :param matrix2: List of lists of integers, second matrix to be multiplied. :return: Resulting matrix after multiplication, or None if the matrices cannot be multiplied. # Check if matrix multiplication is possible if len(matrix1[0]) != len(matrix2): return None # Initialize the resulting matrix with zeros result_matrix = [[0 for _ in range(len(matrix2[0]))] for _ in range(len(matrix1))] # Perform matrix multiplication for i in range(len(matrix1)): for j in range(len(matrix2[0])): for k in range(len(matrix2)): result_matrix[i][j] += matrix1[i][k] * matrix2[k][j] return result_matrix"},{"question":"Given an array of integers nums representing the number of points scored by each player in a game, return the median score. The median is the middle value in a sorted list of numbers. If the list has an even number of elements, the median is the average of the two middle elements. Example 1: Input: nums = [2, 3, 1, 4] Output: 2.5 Explanation: The sorted list is [1, 2, 3, 4]. The median is (2+3)/2 = 2.5 Example 2: Input: nums = [10, 9, 8, 7] Output: 8.5 Explanation: The sorted list is [7, 8, 9, 10]. The median is (8+9)/2 = 8.5 Example 3: Input: nums = [1, 4, 3, 2, 5] Output: 3 Explanation: The sorted list is [1, 2, 3, 4, 5]. The median is 3 Example 4: Input: nums = [10, 20, 30, 40, 50] Output: 30 Explanation: The sorted list is [10, 20, 30, 40, 50]. The median is 30 Constraints: 1 <= nums.length <= 100 -10^4 <= nums[i] <= 10^4","solution":"def find_median(nums): Returns the median score of the given list of numbers. :param nums: List[int] - List of integer numbers representing scores. :return: float - The median score. nums.sort() n = len(nums) if n % 2 == 1: return nums[n // 2] else: return (nums[(n // 2) - 1] + nums[n // 2]) / 2"},{"question":"Sarah is planning a garden layout for her new rectangular vegetable garden with dimensions L and W. She wants to divide the entire garden into smaller square plots. Each plot must be an integer length by integer width square. What is the maximum side length of the square plots that will fill the entire garden without leaving any empty space? ----Input---- The input consists of two integers, L and W (1 leq L, W leq 1000) which represent the length and width of the garden, respectively. ----Output---- Output a single integer that represents the maximum side length of the square plots. ----Examples---- Input 8 12 Output 4 Input 15 25 Output 5 Input 7 9 Output 1 -----Note----- In the first example, the largest square plot that can completely fill the garden without any leftover space is 4 times 4. In the second example, a 5 times 5 square plot can perfectly fit into both dimensions of the garden since the garden can be divided into 3 times 5 squares in length and 5 times 5 squares in width. In the third example, since 7 and 9 are coprime (i.e., their greatest common divisor is 1), the largest square plot that would fill the garden without leftovers is 1 times 1.","solution":"import math def max_square_plot_size(L, W): Returns the maximum side length of square plots that fill the entire garden without leaving any empty space. return math.gcd(L, W)"},{"question":"John is preparing for his programming competition and encounters a challenge related to arranging strings. You, being an experienced programmer, decide to help him out. The task is to determine if a given string can be re-arranged such that the resulting string does not have two adjacent characters being the same. INPUT: The first line will contain the number of test cases T (1 < T < 10000). The next T lines will each contain a string S consisting of lowercase English letters (1 < |S| < 100000). OUTPUT: For each test case, print \\"YES\\" if the string can be rearranged such that no two adjacent characters are the same. Otherwise, print \\"NO\\". SAMPLE INPUT 3 aab aaab abcde SAMPLE OUTPUT YES NO YES Explanation 1. For \\"aab\\", it can be rearranged as \\"aba\\", so the output is \\"YES\\". 2. For \\"aaab\\", there is no way to rearrange it so no two adjacent characters are identical, thus the output is \\"NO\\". 3. For \\"abcde\\", it already has no two adjacent characters being the same, so the output is \\"YES\\".","solution":"from collections import Counter import heapq def can_rearrange_no_adjacent_chars(T, strings): def is_possible_to_rearrange(s): freq = Counter(s) max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_char, prev_count = None, 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char, prev_count = char, count + 1 return len(result) == len(s) results = [] for string in strings: if is_possible_to_rearrange(string): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are tasked with implementing a garden irrigation system for a rectangular garden. The garden is represented by a grid where each cell can either contain a plant (denoted by \'P\') or be an empty space (denoted by \'E\'). Your job is to determine the minimum number of sprinklers needed to water all the plants. Sprinklers can be placed on any cell, plant or empty, and can water all directly adjacent cells (up, down, left, right). Given the configuration of the garden, write a function that returns the minimum number of sprinklers required to water all the plants. # Input The input consists of multiple datasets. Each dataset begins with two integers, `r` and `c` (1 ≤ r, c ≤ 50), representing the number of rows and columns of the garden grid. This is followed by `r` lines, each containing `c` characters (\'P\' for plant and \'E\' for empty). The end of the input is signaled by a line containing \\"0 0\\". # Output For each dataset, output a single integer on a new line representing the minimum number of sprinklers required. # Example Input ``` 3 3 PEP EEE PPP 4 4 PPEP EEEE PEEE PPEP 0 0 ``` Output ``` 3 4 ``` # Explanation In the first dataset, one optimal placement for the sprinklers could be at positions (1, 2), (2, 1), and (3, 2) in the grid, covering all \'P\' cells. In the second dataset, sprinklers could be placed at positions (1, 2), (1, 4), (3, 2), and (4, 3) to cover all \'P\' cells. Thus the minimum number required is 4.","solution":"def min_sprinklers(garden): def valid(x, y): return 0 <= x < len(garden) and 0 <= y < len(garden[0]) def bfs(x, y, visited): queue = [(x, y)] while queue: x, y = queue.pop(0) if garden[x][y] == \'P\' and not visited[x][y]: visited[x][y] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if valid(nx, ny) and garden[nx][ny] == \'P\' and not visited[nx][ny]: queue.append((nx, ny)) visited = [[False for _ in range(len(garden[0]))] for _ in range(len(garden))] sprinklers = 0 for i in range(len(garden)): for j in range(len(garden[0])): if garden[i][j] == \'P\' and not visited[i][j]: bfs(i, j, visited) sprinklers += 1 return sprinklers def parse_input(input_str): lines = input_str.strip().split(\'n\') result = [] i = 0 while i < len(lines): r, c = map(int, lines[i].split()) if r == 0 and c == 0: break garden = [list(lines[i + j + 1]) for j in range(r)] result.append(garden) i += r + 1 return result def main(input_str): datasets = parse_input(input_str) results = [min_sprinklers(garden) for garden in datasets] for result in results: print(result)"},{"question":"You are tasked with creating a software system that can keep track of tasks in a to-do list. Write a function that will take a list of current tasks and a list of completed tasks, and return an updated list of tasks that excludes the completed ones. Each task is a unique string. # Example ```python remaining_tasks([\\"task1\\", \\"task2\\", \\"task3\\"], [\\"task2\\"]) == [\\"task1\\", \\"task3\\"] remaining_tasks([\\"laundry\\", \\"dishes\\", \\"groceries\\"], [\\"dishes\\", \\"laundry\\"]) == [\\"groceries\\"] ``` More info: https://en.wikipedia.org/wiki/To-do_list","solution":"def remaining_tasks(current_tasks, completed_tasks): Returns an updated list of tasks excluding the completed ones. Parameters: - current_tasks (list of str): List of current tasks. - completed_tasks (list of str): List of completed tasks. Returns: - list of str: Updated list of tasks excluding the completed ones. return [task for task in current_tasks if task not in completed_tasks]"},{"question":"You are given a list of integers representing prices of various items and an integer representing total money you have. Your task is to determine if you can buy exactly two items such that their combined price is equal to the total money you have. Input - The first line contains the integer n (2 ≤ n ≤ 10^5), the number of items. - The second line contains n integers, the prices of the items (1 ≤ prices[i] ≤ 10^9). - The third line contains an integer m (1 ≤ m ≤ 10^9), the total money you have. Output - Print \\"YES\\" if you can buy exactly two different items such that their combined price is equal to the total money you have. - Print \\"NO\\" if you cannot. Examples Input 5 11 2 5 7 3 9 Output YES Input 4 2 1 4 3 8 Output NO Note In the first example, you can buy the second item with price 2 and the fourth item with price 7 to get a total of 9, hence the output is \\"YES\\". In the second example, no two items can be combined to equal 8, hence the output is \\"NO\\".","solution":"def can_buy_two_items(prices, m): Determines if two different items can be bought such that their combined price equals m. :param prices: List of integers representing item prices. :param m: Integer representing total money available. :return: \\"YES\\" if two items can be bought with total price equal to m, otherwise \\"NO\\". seen = set() for price in prices: if (m - price) in seen: return \\"YES\\" seen.add(price) return \\"NO\\" # Example usage # n = int(input()) # prices = list(map(int, input().split())) # m = int(input()) # print(can_buy_two_items(prices, m))"},{"question":"You have a list of integers `nums` and an integer `k`. Your task is to determine if the list can be partitioned into exactly `k` non-empty subsets with equal sum. Write a function `canPartition(nums, k)` that takes a list of integers `nums` and an integer `k`, and returns `True` if such a partition is possible, and `False` otherwise. # Constraints: - 1 <= len(nums) <= 16 - 1 <= nums[i] <= 10^4 - 1 <= k <= len(nums) # Examples: Example 1: ```python nums = [4, 3, 2, 3, 5, 2, 1] k = 4 print(canPartition(nums, k)) # Output: True ``` Explanation: The array can be partitioned as (5), (1, 4), (2, 3), (2, 3) with each subset having equal sum of 5. Example 2: ```python nums = [1, 2, 3, 4] k = 3 print(canPartition(nums, k)) # Output: False ``` Explanation: It is not possible to partition the array into 3 subsets of equal sum. # Notes: - The function should be efficient, considering all constraints. - Make sure to handle edge cases such as lists with a single element, lists where the sum is not divisible by `k`, and lists with large numbers that could cause overflow if not handled properly.","solution":"def canPartition(nums, k): Determines if the list can be partitioned into k non-empty subsets with equal sum. def can_partition(start, k, current_sum, target, visited): if k == 1: # Only need one more subset to be equal to target return True if current_sum == target: # Found a subset, move to the next one return can_partition(0, k - 1, 0, target, visited) for i in range(start, len(nums)): if not visited[i] and current_sum + nums[i] <= target: visited[i] = True if can_partition(i + 1, k, current_sum + nums[i], target, visited): return True visited[i] = False return False if sum(nums) % k != 0: return False target = sum(nums) // k visited = [False] * len(nums) nums.sort(reverse=True) # Optimization to consider larger elements first return can_partition(0, k, 0, target, visited)"},{"question":"Create a function that finds the common elements in two arrays of integers while preserving the order of their first occurrence in array `a`. Both arrays may contain duplicate elements. If there are no common elements, the function should return an empty list. ```python def common_elements(a, b): Args: a (list): List of integers. b (list): List of integers. Returns: list: A list containing the common elements between \'a\' and \'b\' in order of their first occurrence in \'a\' # Your code here # Examples: # common_elements([1, 2, 3, 4], [3, 4, 5, 6]) should return [3, 4] # common_elements([7, 8, 9], [10, 11, 12]) should return [] # common_elements([5, 5, 5], [5, 6, 7, 5]) should return [5] ```","solution":"def common_elements(a, b): Finds the common elements between \'a\' and \'b\' in the order of their first occurrence in \'a\'. Args: a (list): List of integers. b (list): List of integers. Returns: list: A list containing the common elements between \'a\' and \'b\' in order of their first occurrence in \'a\'. b_set = set(b) common = [] seen = set() for element in a: if element in b_set and element not in seen: common.append(element) seen.add(element) return common"},{"question":"Given a string S consisting of only digits from \'0\' to \'9\' and lowercase alphabets from \'a\' to \'z\', you need to partition the string into the minimum number of substrings such that each substring is a palindrome. Example 1: Input: S = \\"ababa\\" Output: 1 Explanation: The whole string is a palindrome. Example 2: Input: S = \\"racecarannakayak\\" Output: 3 Explanation: Three palindromes - \\"racecar\\", \\"anna\\", \\"kayak\\". Your Task: You don\'t need to read the input or print anything. Your task is to complete the function minPalinPartitions() which takes the string S as an input and returns the minimum number of palindromic substrings. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 ≤ |S| ≤ 1000","solution":"def minPalinPartitions(S): n = len(S) # A table to store results of subproblems dp = [[0]*n for _ in range(n)] # An auxiliary space to store minimum cuts cuts = [0] * n # Build the dp table for length in range(1, n+1): for i in range(n-length+1): j = i + length - 1 if S[i] == S[j] and (length < 4 or dp[i+1][j-1]): dp[i][j] = True else: dp[i][j] = False # Fill the cuts array for i in range(n): if dp[0][i]: cuts[i] = 0 else: cuts[i] = float(\'inf\') for j in range(i): if dp[j+1][i] and cuts[j] + 1 < cuts[i]: cuts[i] = cuts[j] + 1 return cuts[-1] + 1"},{"question":"Ram is organizing books on a new bookshelf with 3 rows and N columns. Due to the design of the bookshelf, Ram doesn\'t want to place books on two consecutive columns, but he can place books on consecutive rows within a column. He can also decide not to place a book in a section. You are given N and you have to determine the number of ways books can be arranged without violating Ram\'s condition. Input Format: The first line contains T, the number of test cases. Each test case is represented by a single line containing the value of N. Output Format: Output the total ways for each input. SAMPLE INPUT 2 1 2 SAMPLE OUTPUT 8 64 Explanation Case 1: Bookshelf has 3 rows and 1 column each. So, possible ways are: - Don\'t place a book in any section. - Place a book in only the first section. - Place a book in only the second section. - Place a book in only the third section. - Place books in the first and second sections. - Place books in the first and third sections. - Place books in the second and third sections. - Place books in all three sections. Case 2: Bookshelf has 3 rows and 2 columns. Possible ways for one column are PPP, PPN, PNP, NPP, PNN, NPN, NNP, NNN where P represents a book placed, and N represents no book. Total possible ways are 64 because a way to place books in one column can correspond to any of 8 ways in the other column.","solution":"def count_ways(N): Returns the number of ways books can be arranged on a bookshelf with 3 rows and N columns. # Each column can have 8 different states (as each of the 3 rows can be either occupied or unoccupied) return 8 ** N def process_test_cases(T, test_cases): Processes multiple test cases. results = [] for N in test_cases: results.append(count_ways(N)) return results"},{"question":"You are given an array of integers and a target sum. Your task is to determine if any combination of three unique integers from the array can form the target sum. If at least one such combination exists, return the combination as a list of integers. If no such combination exists, return an empty list. Example Given the array as follows [text{1, 2, 3, 4, 5, 6, 7, 8, 9}] and the target sum is 15, there are combinations like [1, 5, 9], [2, 4, 9], and [3, 5, 7] that add up to 15. Your function should return one of these combinations, such as [1, 5, 9]. If the array is [text{-1, 0, 1, 2}] and the target sum is 10, there is no such combination, and your function should return an empty list. Function Description Complete the `threeSum` function in the editor below. The function should return a list of integers representing the combination of three unique integers that form the target sum, or an empty list if no such combination exists. threeSum has the following parameter(s): int[] arr: the array of integers int target: the target sum Returns list: a list of three integers that add up to the target sum, or an empty list if there is no such combination. Input Format The first line contains an integer n, the size of the array. The second line contains n space-separated integers, representing the elements of the array. The third line contains an integer, target, the target sum. Constraints 1 leq n leq 10^3 -10^3 leq text{arr[i]} leq 10^3 -10^3 leq text{target} leq 10^3 Sample Input 6 1 2 3 4 5 6 10 Sample Output [1, 3, 6] Explanation For the provided sample input, the function should return [1, 3, 6], since 1 + 3 + 6 equals 10.","solution":"def threeSum(arr, target): arr.sort() n = len(arr) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return [arr[i], arr[left], arr[right]] elif current_sum < target: left += 1 else: right -= 1 return []"},{"question":"The zoo has a new exhibit with an array of enclosures arranged in a rectangular grid. Each enclosure contains some animals, and the number of animals can vary from enclosure to enclosure. The zookeeper wants to know the maximum number of animals present in any sub-rectangular area of the grid. A sub-rectangular area is defined by selecting two rows and two columns, then counting all the animals in the enclosures that fall between these rows and columns (inclusive). Write a function that takes as input a grid of integers representing the number of animals in each enclosure, and returns the maximum number of animals present in any sub-rectangular area. Input - The first line contains two integers, n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the grid, respectively. - The next n lines each contain m space-separated integers, where each integer aij (0 ≤ aij ≤ 1000) represents the number of animals in the j-th enclosure of the i-th row. Output - Output a single integer, the maximum number of animals in any sub-rectangular area of the grid. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 45 Input 2 2 1 2 3 4 Output 10","solution":"def find_max_animals_in_sub_rectangle(grid): Function to find the maximum number of animals present in any sub-rectangular area of the grid. n = len(grid) m = len(grid[0]) # Compute prefix sums for the grid prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] max_animals = float(\'-inf\') # Iterate through all possible sub-rectangles for i1 in range(1, n + 1): for i2 in range(i1, n + 1): for j1 in range(1, m + 1): for j2 in range(j1, m + 1): current_sum = (prefix_sum[i2][j2] - prefix_sum[i1 - 1][j2] - prefix_sum[i2][j1 - 1] + prefix_sum[i1 - 1][j1 - 1]) if current_sum > max_animals: max_animals = current_sum return max_animals # Example usage # grid = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # print(find_max_animals_in_sub_rectangle(grid)) # Output: 45 # grid = [ # [1, 2], # [3, 4] # ] # print(find_max_animals_in_sub_rectangle(grid)) # Output: 10"},{"question":"Given an array of integers, you are required to rearrange the elements into a sequence such that the difference between any two consecutive elements is maximized. For instance, given an array `[1, 3, 5, 9]`, one possible rearrangement could be `[1, 9, 3, 5]`, which has differences `(9-1), (9-3), and (5-3)`, i.e., `8, 6, and 2`. The objective is to find the maximum possible value of the minimum difference between any two consecutive elements in the array after rearrangement. Input: The input consists of a number T, the number of test cases. Each test case consists of two parts: - The first line contains an integer N, the number of elements in the array. - The second line contains N integers separated by spaces forming the array. Output: For each test case, print the sequence satisfying the required condition on a new line. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Elements of the array ≤ 10^6 SAMPLE INPUT: 2 4 1 5 9 3 5 10 1 7 4 2 SAMPLE OUTPUT: 1 9 3 5 1 10 2 7 4 Explanation: - For the first test case, rearrangement `[1, 9, 3, 5]` maximizes the minimum difference between any two consecutive elements. - For the second test case, rearrangement `[1, 10, 2, 7, 4]` maximizes the minimum difference between any two consecutive elements.","solution":"def rearrange_to_maximize_difference(arr): arr_sorted = sorted(arr) left, right = 0, len(arr) - 1 result = [] while left <= right: if left == right: result.append(arr_sorted[left]) else: result.append(arr_sorted[left]) result.append(arr_sorted[right]) left += 1 right -= 1 return result def process_test_cases(test_cases): results = [] for case in test_cases: n, arr = case results.append(rearrange_to_maximize_difference(arr)) return results # Parsing input and output formatting (consider this as part of the solution for I/O) def main(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0].strip()) test_cases = [] for i in range(1, 2 * T, 2): N = int(input_lines[i].strip()) arr = list(map(int, input_lines[i + 1].strip().split())) test_cases.append((N, arr)) results = process_test_cases(test_cases) output = \\"n\\".join(\\" \\".join(map(str, result)) for result in results) return output # Example usage (you can replace this example input to test it further): example_input = 2 4 1 5 9 3 5 10 1 7 4 2 print(main(example_input))"},{"question":"You are given a matrix of size MxN filled with the integers from 1 to MxN in a spiral order. Your task is to determine if there exists a contiguous subarray that, when flattened into a single row, forms a bitonic sequence. A sequence is called bitonic if it first strictly increases and then strictly decreases. Constraints * 2 ≤ M, N ≤ 100 Input Input is given from Standard Input in the following format: M N Output Print \\"YES\\" if such a subarray exists and \\"NO\\" otherwise. Examples Input 3 3 Output YES Input 4 4 Output NO Input 2 2 Output YES","solution":"def is_bitonic_sequence(arr): Check if a given array forms a bitonic sequence. n = len(arr) if n < 3: return False increasing = True # Find the peak point for i in range(1, n): if increasing: if arr[i] <= arr[i - 1]: increasing = False if i == 1: return False if not increasing: if arr[i] >= arr[i - 1]: return False return not increasing def is_spiral_bitonic_sequence_exists(M, N): Determines if there exists a contiguous subarray that, when flattened into a single row, forms a bitonic sequence in a spiral filled MxN matrix. max_val = M * N if max_val < 3: return \\"NO\\" return \\"YES\\" def is_bitonic_subarray_exists(M, N): return is_spiral_bitonic_sequence_exists(M, N)"},{"question":"Ariel is organizing her bookshelf. She wants to rearrange the books such that no two books with the same genre are adjacent to each other. Each book is represented by a character, such that books of the same genre are denoted by the same character. Write a function that determines if Ariel can rearrange the books to meet her criterion. If it is possible to rearrange the books, return the rearranged sequence; otherwise, return an empty string. INPUT The first line contains t, the total number of test cases. The next t lines each contain a string s representing the arrangement of books on the shelf. 0 < t ≤ 100 1 ≤ |s| ≤ 10^5 OUTPUT For each test case, return either a rearranged sequence of books as a string, or an empty string if it is not possible to rearrange the books accordingly. SAMPLE INPUT 2 aab aaab SAMPLE OUTPUT aba (empty string)","solution":"from heapq import heappop, heappush from collections import Counter def rearrange_books(t, test_cases): results = [] for s in test_cases: freqs = Counter(s) max_heap = [] for char, count in freqs.items(): heappush(max_heap, (-count, char)) prev_char, prev_count = None, 0 result = [] while max_heap or prev_count < 0: if max_heap: count, char = heappop(max_heap) else: count = prev_count if prev_count < 0: heappush(max_heap, (prev_count, prev_char)) result.append(char) prev_char = char prev_count = count + 1 if prev_count == 0: prev_char, prev_count = None, 0 if not max_heap and prev_count < 0: result = [] break rearranged_sequence = \'\'.join(result) if len(rearranged_sequence) == len(s): results.append(rearranged_sequence) else: results.append(\\"\\") return results"},{"question":"# Task You are given an integer `n` representing the length in centimeters of a piece of ribbon. You need to determine the maximum number of pieces of ribbon of length exactly `a`, `b`, or `c` centimeters that can be cut from the piece of ribbon. # Example For `n = 5`, `a = 2`, `b = 1`, and `c = 5`, the result should be `5`. In this case, you can cut: - 5 pieces of 1 cm, - or 2 pieces of 2 cm and 1 piece of 1 cm, - or 1 piece of 5 cm. The maximum number of pieces is 5. For `n = 7`, `a = 3`, `b = 4`, and `c = 2`, the result should be `4`. In this case, you can cut: - 1 piece of 3 cm and 2 pieces of 2 cm, - or 3 pieces of 2 cm and 1 piece of 1 cm (remaining 1 cm cannot be used). The maximum number of pieces is 4. # Input/Output - `[input]` integer `n` `0 <= n <= 10^4` - `[input]` integer `a` `1 <= a <= 10^4` - `[input]` integer `b` `1 <= b <= 10^4` - `[input]` integer `c` `1 <= c <= 10^4` - `[output]` an integer The maximum number of pieces of length exactly `a`, `b`, or `c` centimeters that can be cut from the piece of ribbon.","solution":"def max_pieces_of_ribbon(n, a, b, c): Determines the maximum number of pieces of ribbon of length exactly a, b, or c centimeters that can be cut from a ribbon of length n centimeters. Parameters: n (int): Length of the ribbon. a (int): Length of the first type of piece. b (int): Length of the second type of piece. c (int): Length of the third type of piece. Returns: int: Maximum number of pieces that can be cut from the ribbon. dp = [-1] * (n + 1) dp[0] = 0 # Base case: if the ribbon length is 0, the maximum pieces we can have is 0 for i in range(1, n + 1): if i >= a and dp[i - a] != -1: dp[i] = max(dp[i], dp[i - a] + 1) if i >= b and dp[i - b] != -1: dp[i] = max(dp[i], dp[i - b] + 1) if i >= c and dp[i - c] != -1: dp[i] = max(dp[i], dp[i - c] + 1) return dp[n] if dp[n] != -1 else 0"},{"question":"You are given a binary string consisting only of characters \'0\' and \'1\'. Your task is to find the maximum number of substrings that can be formed from the given string such that each substring contains an equal number of \'0\'s and \'1\'s. If it is not possible to split the string in such a way, return -1. A substring is a contiguous sequence of characters within a string. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each of the following t lines contains a binary string of length n (1 le n le 1000). -----Output----- For each test case, print the maximum number of substrings that can be formed such that each substring contains an equal number of \'0\'s and \'1\'s, or -1 if it is not possible. -----Examples----- Input 3 010101 10101010 111000 Output 3 4 1 -----Note----- In the first example: - \\"01\\", \\"01\\", \\"01\\" are three substrings each containing an equal number of \'0\'s and \'1\'s. In the second example: - \\"10\\", \\"10\\", \\"10\\", \\"10\\" are four substrings each containing an equal number of \'0\'s and \'1\'s. In the third example: - \\"111000\\" is a single substring containing an equal number of \'0\'s and \'1\'s.","solution":"def max_balanced_substrings(t, binary_strings): results = [] for binary_string in binary_strings: count_0s = count_1s = 0 max_substrings = 0 for char in binary_string: if char == \'0\': count_0s += 1 else: count_1s += 1 if count_0s == count_1s: max_substrings += 1 if count_0s != count_1s: # Check if we end up with unequally distributed 0s and 1s. results.append(-1) else: results.append(max_substrings) return results"},{"question":"There is a magical forest filled with various creatures. Each creature is represented as a node, and their pairwise friendships are represented as edges. The forest is considered stable if there is a path between every pair of creatures, meaning the forest forms a connected graph. However, some creatures are mischievous and might break their friendships, leading to disjointed sub-forests. Your task is to identify the \\"bridge\\" friendships in the forest. A bridge friendship is an edge in the graph which, if removed, would increase the number of connected components in the graph. Your goal is to count the number of such bridge friendships in the network. Example 1: Input: N = 5, M = 5 edges = [[1, 2], [1, 3], [3, 2], [3, 4], [4, 5]] Output: 2 Explanation: 1. Removal of edge between 1 and 2 or 1 and 3 or 3 and 2 will not disconnect the graph. 2. Removal of edge between 3 and 4 will create two disconnected components (1-2-3) and (4-5). 3. Removal of edge between 4 and 5 will create two disconnected components (1-2-3-4) and (5). 4. Therefore, there are two bridge friendships: (3, 4) and (4, 5). Example 2: Input: N = 4, M = 4 edges = [[1, 2], [2, 3], [3, 4], [4, 1]] Output: 0 Explanation: 1. The graph is a cycle, removal of any single edge will still keep the graph connected. 2. Therefore, there are no bridge friendships. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function findBridgeFriendships() that takes the number of nodes (N), a number of edges (M), and a 2-D list that contains connections between nodes (edges), and returns the number of bridge friendships in the forest. Expected Time Complexity: O(N + M). Expected Auxiliary Space: O(N + M). Constraints: 1 ≤ N ≤ 30000 1 ≤ M ≤ 30000 1 ≤ u, v ≤ N","solution":"def findBridgeFriendships(N, M, edges): from collections import defaultdict import sys sys.setrecursionlimit(100000) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) ids = [-1] * (N+1) low = [0] * (N+1) visited = [False] * (N+1) bridges = [] id = 0 def dfs(at, parent, id): visited[at] = True ids[at] = low[at] = id id += 1 for to in graph[at]: if to == parent: continue if not visited[to]: dfs(to, at, id) low[at] = min(low[at], low[to]) if ids[at] < low[to]: bridges.append((at, to)) else: low[at] = min(low[at], ids[to]) for i in range(1, N+1): if not visited[i]: dfs(i, -1, id) return len(bridges)"},{"question":"# Problem Description Imagine you are given a rectangular grid with `m` rows and `n` columns, filled with non-negative integers. You are standing at the top-left corner of the grid (position `(0, 0)`) and want to move to the bottom-right corner (position `(m-1, n-1)`). You can only move either down or right at any point in time. Additionally, you must collect all the values of the cells you pass through. Write a function `min_path_sum(grid: List[List[int]]) -> int` that calculates the minimum path sum from the top-left corner to the bottom-right corner. # Constraints - `1 <= m, n <= 100` - `0 <= grid[i][j] <= 100` Your solution should have a time complexity of `O(m*n)` and a space complexity of `O(m*n)`. # Examples ```python # Example 1: # # Input: # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # Output: 7 # # Explanation: # The best path is [1, 3, 1, 1, 1] which gives a total sum of 7. # Example 2: # # Input: # grid = [ # [1, 2, 3], # [4, 5, 6] # ] # Output: 12 # # Explanation: # The best path is [1, 2, 3, 6] which gives a total sum of 12. ``` # Note This problem is inspired by common dynamic programming problems that require optimal path finding through a grid.","solution":"def min_path_sum(grid): Given a rectangular grid filled with non-negative integers, calculates the minimum path sum from the top-left corner to the bottom-right corner, where one can only move either down or right at any point in time. m = len(grid) n = len(grid[0]) # Initialize a 2D list for storing the minimum path sums up to each cell dp = [[0] * n for _ in range(m)] # Populate the dp table with the minimum path sums for i in range(m): for j in range(n): if i == 0 and j == 0: dp[i][j] = grid[i][j] # Starting point elif i == 0: # Top row, can only come from left dp[i][j] = dp[i][j-1] + grid[i][j] elif j == 0: # Left column, can only come from above dp[i][j] = dp[i-1][j] + grid[i][j] else: dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"Alice wants to send a birthday gift to her friend Bob, who lives in another city. She orders the gift online and wants to track its shipment. The delivery service provides Alice with a shipment status update consisting of several events, each event indicating either the addition or removal of a gift in the shipment at a specific timestamp. Your task is to write a program to determine the final list of gifts in the shipment, sorted by the order they were added. The input consists of a series of events. Each event is represented by a string in the format: ``` timestamp action gift ``` Where: - `timestamp` is a positive integer representing the time the event occurred. - `action` is either \\"add\\" or \\"remove\\". - `gift` is the name of the gift being added or removed. The end of the sequence of events is indicated by the string \\"end\\". Your program should print the names of the gifts that remain in the shipment in the order they were added. If the shipment is empty, print \\"empty\\". Input A sequence of event strings ending with the string \\"end\\". Output A list of the names of the gifts in the shipment, one per line. If the shipment is empty, print \\"empty\\". Example Input 1 add TeddyBear 2 add Doll 3 remove TeddyBear 4 add Puzzle 5 add Car 6 remove Doll end Output Puzzle Car","solution":"def track_shipment(events): Given a list of events indicating addition or removal of gifts, returns the final list of gifts sorted by the order they were added. shipment = {} order = [] for event in events: if event == \\"end\\": break timestamp, action, gift = event.split() if action == \\"add\\": if gift not in shipment: shipment[gift] = int(timestamp) order.append(gift) elif action == \\"remove\\": if gift in shipment: order.remove(gift) del shipment[gift] return order if order else [\\"empty\\"] def format_output(gifts): Formats the list of gifts for printing. if gifts == [\\"empty\\"]: print(\\"empty\\") else: for gift in gifts: print(gift) # Example usage: events = [ \\"1 add TeddyBear\\", \\"2 add Doll\\", \\"3 remove TeddyBear\\", \\"4 add Puzzle\\", \\"5 add Car\\", \\"6 remove Doll\\", \\"end\\" ] result = track_shipment(events) format_output(result)"},{"question":"Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police, where adjacent houses have security systems connected. Each house\'s security system will automatically contact the police if two adjacent houses were broken into on the same night. Example 1: Input: [2,3,2] Output: 3 Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses. Example 2: Input: [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Note: Your solution should run in O(n) time and O(1) space.","solution":"def rob(nums): Determine the maximum amount of money you can rob tonight without alerting the police. :param nums: List[int] :return: int if len(nums) == 0: return 0 if len(nums) == 1: return nums[0] # Helper function to rob line of houses specified by the provided range def rob_line(houses): prev_max = 0 curr_max = 0 for money in houses: temp = curr_max curr_max = max(prev_max + money, curr_max) prev_max = temp return curr_max # Since this is a circular street, we need to run the algorithm twice: # 1. Exclude the first house # 2. Exclude the last house return max(rob_line(nums[:-1]), rob_line(nums[1:]))"},{"question":"Given a list of integers, find all possible unique permutations of the list. The order of the permutations doesn\'t matter. Implement a function `generate_permutations` that takes a list of integers as input and returns a list of lists where each inner list is a unique permutation of the input list. Input Format A single line containing space-separated integers, denoting the elements of the list. 1 ≤ Length of the list ≤ 8 -10 ≤ Each element of the list ≤ 10 Output Format A list of lists where each inner list is a permutation of the input list. Sample Input 1 2 3 Sample Output [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] Explanation For the input list [1, 2, 3], there are a total of 6 possible permutations. The order in which these permutations are returned does not matter. The output list should contain all 6 permutations, each as a list of integers.","solution":"from itertools import permutations def generate_permutations(int_list): Generates all unique permutations of the list of integers. :param int_list: A list of integers. :return: A list of lists, where each inner list is a unique permutation of the input list. return [list(p) for p in set(permutations(int_list))]"},{"question":"You are given a string S consisting of lowercase English letters. Your task is to find the length of the longest subsequence in S where all characters are unique and appear in alphabetical order. A subsequence is derived from another string by deleting some or no elements of the latter string without changing the order of the remaining elements. For example, if the input string is \\"abcpqrabc\\", the longest subsequences with unique and alphabetically ordered characters are \\"abc\\", \\"abcpq\\", \\"abcpqr\\", etc., and the maximum length for such subsequences is 6 (i.e., the subsequence \\"abcpqr\\"). Write a function that returns an integer representing the length of this longest alphabetically ordered subsequence with unique characters. -----Input----- - The first line contains an integer t (1 le t le 10) — the number of test cases. - The following t lines contain the string S. The length of each string S is between 1 and 10^5. -----Output----- Print t lines, each representing the length of the longest alphabetically ordered subsequence with unique characters for each test case. -----Examples----- Input 3 abcpqrabc edcba abcdefghijklmn Output 6 1 14 -----Note----- In the first example, \\"abcpqr\\" is the longest subsequence with unique characters in alphabetical order and its length is 6. In the second example, none of the characters are in increasing alphabetical order except any single character itself, and thus the length is 1. In the third example, the entire string \\"abcdefghijklmn\\" is in alphabetical order with unique characters, and its length is 14.","solution":"def longest_alphabet_subseq_length(s): This function returns the length of the longest subsequence in `s` where all characters are unique and appear in alphabetical order. unique_chars = set() result_length = 0 for char in s: if char not in unique_chars and (not result_length or char > s[result_length - 1]): unique_chars.add(char) result_length += 1 return result_length def process_test_cases(test_cases): This function processes multiple test cases and returns the results. results = [] for s in test_cases: results.append(longest_alphabet_subseq_length(s)) return results"},{"question":"A new company wants to create a messaging platform. One of the features they need is to categorize received messages based on the time of day they were received. The three time categories are Morning, Afternoon, and Evening. You are asked to write a function that determines the category for a list of timestamps. **Morning**: 05:00:00 - 11:59:59 **Afternoon**: 12:00:00 - 17:59:59 **Evening**: 18:00:00 - 04:59:59 Write a function `categorize_timestamps(timestamps)` that takes a list of timestamps in the format \\"HH:MM:SS\\" and returns a list of strings indicating the time category for each timestamp. You may assume the input timestamps are valid and in 24-hour format. **Input:** - `timestamps`: a list of strings, each in the format \\"HH:MM:SS\\", representing the time of day messages were received. It is guaranteed that timestamps lists will have between 1 and 1000 timestamps. **Output:** - A list of strings where each element is either \\"Morning\\", \\"Afternoon\\", or \\"Evening\\", corresponding to each input timestamp. **Example:** ```python def categorize_timestamps(timestamps): # Your code goes here # Example Test Case input_timestamps = [\\"05:30:00\\", \\"12:45:10\\", \\"18:01:00\\", \\"23:59:59\\", \\"04:59:00\\"] print(categorize_timestamps(input_timestamps)) ``` **Example Output:** ``` [\\"Morning\\", \\"Afternoon\\", \\"Evening\\", \\"Evening\\", \\"Evening\\"] ```","solution":"def categorize_timestamps(timestamps): Categorize each timestamp into \\"Morning\\", \\"Afternoon\\", or \\"Evening\\". Parameters: timestamps (list): List of strings in \\"HH:MM:SS\\" format. Returns: list: List of time categories (\\"Morning\\", \\"Afternoon\\", \\"Evening\\"). categorized_times = [] for timestamp in timestamps: hour = int(timestamp.split(\':\')[0]) if 5 <= hour <= 11: categorized_times.append(\\"Morning\\") elif 12 <= hour <= 17: categorized_times.append(\\"Afternoon\\") else: categorized_times.append(\\"Evening\\") return categorized_times"},{"question":"The local transportation company is implementing a rewards program for frequent passengers. Each passenger gains points for every ride they take, but their points can also be deducted for delays or other issues. The program needs to compute the passenger\'s total points and determine the passenger with the highest points. If multiple passengers have the highest points, the tie should be broken by selecting the passenger who reached the highest points first during the evaluation period. Input The first line contains an integer t (1 ≤ t ≤ 1000), the number of transactions recorded. Each of the following t lines contains two parts: the passenger\'s name consisting of lowercase Latin letters with the length from 1 to 32, and an integer, the score change for that transaction, which can range from -1000 to 1000 inclusively. Output Print the name of the passenger with the highest points. If there is a tie, print the name of the passenger who reached the highest points earliest during the evaluation. Examples Input 5 alice 10 bob 20 alice -5 bob 10 charlie 15 Output bob Input 4 alice 7 bob 5 alice 1 charlie 8 Output alice","solution":"def find_passenger_with_highest_points(t, transactions): points = {} highest_points = {} # Process each transaction for transaction in transactions: name, score_change = transaction if name not in points: points[name] = 0 points[name] += int(score_change) # Update highest points reached if name not in highest_points or points[name] > highest_points[name]: highest_points[name] = points[name] # Find max points max_points = max(points.values()) candidates = [name for name, point in points.items() if point == max_points] # Determine earliest to reach max points in case of tie earliest = candidates[0] for candidate in candidates: if highest_points[candidate] > highest_points[earliest] or (highest_points[candidate] == highest_points[earliest] and candidate < earliest): earliest = candidate return earliest # Example usage: # t = 4 # transactions = [(\\"alice\\", 7), (\\"bob\\", 5), (\\"alice\\", 1), (\\"charlie\\", 8)] # print(find_passenger_with_highest_points(t, transactions)) # Output: \\"alice\\""},{"question":"Complete the function `calculate_mean` which takes a list of numbers as input and returns the mean (average) of those numbers. If the list is empty, the function should return 0. Example ```python calculate_mean([1, 2, 3, 4, 5]) == 3.0 calculate_mean([]) == 0 ```","solution":"def calculate_mean(numbers): Returns the mean (average) of a list of numbers. If the list is empty, returns 0. if not numbers: return 0 return sum(numbers) / len(numbers)"},{"question":"Wildlife Conservation Group is developing a new web application that tracks the migratory patterns of endangered bird species. You have been asked to write a function that helps identify the most frequently visited locations by a specific species. Each bird\'s tracker records their GPS location every time they land. The records include multiple visits to the same place, represented by coordinates as strings {\\"latitude,longitude\\"}. For instance, {\\"51.5014,-0.1419\\", \\"33.9416,-118.4085\\", \\"51.5014,-0.1419\\", \\"48.8566,2.3522\\"}. To identify the most popular location for a specific species in a given list of coordinates, you should write a function `most_frequent_location` that receives a list of coordinates and returns the location (coordinate string) that appears the most. If two or more locations have the same highest frequency, return the one that appeared first in the list. Function Signature: `def most_frequent_location(coordinates: List[str]) -> str` Example: ``` coordinates = [\\"51.5014,-0.1419\\", \\"33.9416,-118.4085\\", \\"51.5014,-0.1419\\", \\"48.8566,2.3522\\"] most_frequent_location(coordinates) ➞ \\"51.5014,-0.1419\\" ``` Write the function `most_frequent_location` to correctly determine the most frequently visited coordinates from the list provided.","solution":"from typing import List from collections import Counter def most_frequent_location(coordinates: List[str]) -> str: Given a list of coordinates, return the most frequently visited location. If two or more locations have the same highest frequency, return the one that appeared first in the list. if not coordinates: return \\"\\" # Count the frequency of each coordinate frequency = Counter(coordinates) # Find the coordinate with the maximum frequency most_frequent_coord = None max_frequency = -1 for coord in coordinates: if frequency[coord] > max_frequency: most_frequent_coord = coord max_frequency = frequency[coord] return most_frequent_coord"},{"question":"Given a string, s, consisting of alphabetic characters and spaces, write a function that returns the most frequently occurring character from the string. Ignore spaces, and if there is a tie, return the earliest character in the alphabet. Each character comparison should be case insensitive. Function Description Complete the function `mostFrequentCharacter` in the editor below. mostFrequentCharacter has the following parameter(s): - string s: a string consisting of alphabetic characters and spaces Returns - char: the most frequently occurring character (case insensitive), or the earliest character in the alphabet if there\'s a tie. Input Format A single line of text representing the string s. Constraints - ( 1 leq text{length of } s leq 10^4 ) Note - The function should manage case insensitivity but return the character in the form (uppercase/lowercase) it appeared in the string. - Ignore spaces in the string. Examples # Example 1: Input: ``` s = \\"hello world\\" ``` Output: ``` l ``` Explanation: - The character `l` appears 3 times which is more than any other character. # Example 2: Input: ``` s = \\"aabbbb\\" ``` Output: ``` b ``` Explanation: - The character `b` appears 4 times which is more than any other character. # Example 3: Input: ``` s = \\"aabc cba\\" ``` Output: ``` a ``` Explanation: - Both `a` and `b` appear 3 times, but `a` comes first in the alphabet.","solution":"def mostFrequentCharacter(s): Returns the most frequently occurring character (case insensitive) from the string s, ignoring spaces. If there is a tie, the earliest character in the alphabet is returned. from collections import Counter s = s.replace(\\" \\", \\"\\").lower() # Removing spaces and converting to lowercase if not s: return \\"\\" frequency = Counter(s) most_frequent_count = max(frequency.values()) most_frequent_chars = [char for char, count in frequency.items() if count == most_frequent_count] # Returning the first character in alphabet from the tied characters result = sorted(most_frequent_chars)[0] # Find the first occurrence in original string (case insensitive matching) for char in s: if char == result: return char return \\"\\""},{"question":"Given a list of integers, your task is to generate a new list wherein for each integer in the original list, you replace it with the product of all other integers in the list. More formally, the output list at index `i` should be equal to the product of all integers in the input list except for the integer at index `i`. For instance, given an input list `[a, b, c]`, the output should be `[b*c, a*c, a*b]`. You should implement an efficient algorithm that does not require nested loops to calculate each product. Instead, use additional space (i.e., extra arrays) to store intermediate results that can help reach the desired output efficiently. -----Input----- First line contains an integer n (1 leq n leq 10^5) — the number of integers in the list. Second line contains n space-separated integers representing the list. -----Output----- Output a single line with n space-separated integers representing the resulting list where each integer is the product of all other integers in the input list. -----Example----- Input 4 1 2 3 4 Output 24 12 8 6 -----Explanation----- For the input list [1, 2, 3, 4]: - The first element in the output list is 2*3*4 = 24 - The second element in the output list is 1*3*4 = 12 - The third element in the output list is 1*2*4 = 8 - The fourth element in the output list is 1*2*3 = 6","solution":"def product_except_self(nums): n = len(nums) if n == 1: return [1] # Step 1: Create arrays to hold the product of all elements to the left and to the right of each element left_products = [1] * n right_products = [1] * n # Step 2: Fill the left_products array for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Step 3: Fill the right_products array for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Step 4: Calculate the result as the product of left_products and right_products result = [left_products[i] * right_products[i] for i in range(n)] return result"},{"question":"You are given a binary tree with N nodes. Each node has a distinct integer value. You are also given Q queries of the following types: - texttt{1 v x}: Given node v (1 ≤ v ≤ N) and integer x, add the value x to the value of node v. - texttt{2 v}: Given node v (1 ≤ v ≤ N), compute and print the sum of the values of all nodes in the subtree rooted at node v. Initially, the values of the nodes are provided. ------ Input Format ------ - The first line of input contains an integer N, the number of nodes. - The second line contains N integers, where the ith integer represents the value of the ith node. - The next N-1 lines contain two integers u and v each, indicating that node u is the parent of node v. - The next line contains an integer Q, the number of queries. - The next Q lines contain queries, each of one of the two types described above. ------ Output Format ------ For each query of type 2, print the sum of the values of all nodes in the subtree rooted at node v. ------ Constraints ------ 1 ≤N, Q ≤10^{5} -10^9 ≤ text{value of each node} ≤ 10^9 1 ≤u, v ≤N 1 ≤x ≤10^9 ------ Sample Input 1 ------ 5 1 2 3 4 5 1 2 1 3 2 4 2 5 3 2 1 1 3 5 2 1 ------ Sample Output 1 ------ 15 20 ------ Explanation 1 ------ Initial tree structure: ``` 1(1) / 2(2) / 4(4) 5(5) / 3(3) ``` - Query 1: Compute the sum of the values in the subtree rooted at node 1. The values are [1, 2, 3, 4, 5], and their sum is 15. - Query 2: Add 5 to the value of node 3. The new tree structure is: ``` 1(1) / 2(2) / 4(4) 5(5) / 3(8) ``` - Query 3: Compute the sum of the values in the subtree rooted at node 1 again. The values are [1, 2, 8, 4, 5], and their sum is 20.","solution":"class TreeNode: def __init__(self, value=0): self.value = value self.children = [] def add_value_to_node(tree, node_id, value): tree[node_id].value += value def sum_subtree(tree, node_id): def dfs_sum(node): total = node.value for child in node.children: total += dfs_sum(child) return total return dfs_sum(tree[node_id]) def create_tree(values, edges): n = len(values) tree = [TreeNode(values[i]) for i in range(n)] for u, v in edges: tree[u - 1].children.append(tree[v - 1]) return tree def process_queries(n, values, edges, queries): # Create the tree tree = create_tree(values, edges) results = [] for query in queries: if query[0] == 1: node_id, value = query[1], query[2] add_value_to_node(tree, node_id - 1, value) elif query[0] == 2: node_id = query[1] results.append(sum_subtree(tree, node_id - 1)) return results"},{"question":"Given a binary tree, your task is to find the minimum depth of the tree. The minimum depth is the number of nodes along the shortest path from the root node to the nearest leaf node. Example 1: Input: 1 / 2 3 / 4 5 Output: 2 Explanation: The minimum depth is from the root node 1 through the right child 3. Therefore, the minimum depth is 2. Example 2: Input: 1 / 2 / 3 Output: 3 Explanation: The minimum depth is from the root node 1 through left children 2 and 3. Therefore, the minimum depth is 3. Your Task: You do not need to read input or print anything. Your task is to complete the function minDepth() which takes the root node of the binary tree as input and returns an integer representing the minimum depth. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ Number of nodes ≤ 10^4 1 ≤ Node value ≤ 10^5","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def minDepth(root): Find the minimum depth of a binary tree. Args: root (TreeNode): The root node of the binary tree. Returns: int: The minimum depth of the binary tree. if not root: return 0 queue = [(root, 1)] while queue: node, depth = queue.pop(0) # Check if it is a leaf node if not node.left and not node.right: return depth if node.left: queue.append((node.left, depth + 1)) if node.right: queue.append((node.right, depth + 1)) return 0"},{"question":"In a city, there are m vertical streets and n horizontal streets, forming a grid of intersections. Each intersection is identified by two integers (x, y) where x is the number of the vertical street (1 through m) and y is the number of the horizontal street (1 through n). A delivery robot starts at the intersection (1, 1) and can move to any adjacent intersection to the right, down, left, or up. However, there are some blocked intersections that the robot cannot pass through. You are given a sequence of k blocked intersections. Each blocked intersection is represented by a pair of integers (a_i, b_i). Your task is to determine the minimum number of steps required for the robot to reach the intersection (m, n) from the starting point (1, 1). If it is impossible to reach the destination, output -1. Input format: The first line of the input contains three integers m, n, and k — the number of vertical streets, the number of horizontal streets, and the number of blocked intersections, respectively. The next k lines describe the blocked intersections. The i-th blocked intersection contains two integers a_i and b_i — the vertical and horizontal street numbers of the blocked intersection. Output format: Output a single integer representing the minimum number of steps required to reach the intersection (m, n) from the starting point (1, 1). If it is impossible to reach the destination, output -1. Constraints: 1 ≤ m, n ≤ 1,000 0 ≤ k ≤ 10,000 1 ≤ a_i ≤ m 1 ≤ b_i ≤ n SAMPLE INPUT 5 5 3 2 3 4 2 3 4 SAMPLE OUTPUT 8 Explanation: The grid is a 5x5 grid, and the blocked intersections are (2, 3), (4, 2), and (3, 4). The robot needs to navigate around these blocked intersections. The shortest path from (1, 1) to (5, 5) without passing through these blocked intersections takes 8 steps. If there is no possible way to reach the destination, the output would be -1.","solution":"from collections import deque def min_steps_to_reach_destination(m, n, blocked): Determines the minimum number of steps required to reach the intersection (m, n) from the starting point (1, 1) on a grid with blocked intersections. Parameters: - m (int): number of vertical streets. - n (int): number of horizontal streets. - blocked (list of tuple): list of blocked intersections. Returns: - int: minimum number of steps to reach (m, n) or -1 if impossible. if (1, 1) == (m, n): return 0 blocked_set = set(blocked) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(1, 1, 0)]) # (x, y, steps) visited = set((1, 1)) while queue: x, y, steps = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 1 <= nx <= m and 1 <= ny <= n and (nx, ny) not in blocked_set: if (nx, ny) == (m, n): return steps + 1 if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"Problem You are given an array of integers A of length N and Q queries. Each query can be one of two types: 1. Type 1: (1 L R X) - For every integer in the subarray A[L:R], add X to each element. 2. Type 2: (2 L R X) - For every integer in the subarray A[L:R], replace every element with the maximum between the element itself and X. Your task is to process all queries in the order given and output the resulting array after all queries have been executed. Constraints - 1 ≤ N ≤ 100000 - 1 ≤ Q ≤ 100000 - 1 ≤ A[i], X ≤ 100000 - 1 ≤ L ≤ R ≤ N Input The first line contains an integer N, the length of the array. The second line contains N integers: the elements of the array A. The third line contains an integer Q, the number of queries. The next Q lines contain the queries in the format described above. Output Output the final state of the array A after all queries. Examples Input 5 3 1 4 1 5 3 1 1 3 2 2 2 5 4 1 1 5 1 Output 6 5 7 5 6 Input 4 1 2 3 4 2 2 1 2 4 1 3 4 1 Output 4 4 4 5","solution":"def process_queries(N, A, Q, queries): for query in queries: type_ = query[0] L = query[1] - 1 # converting to 0-indexed R = query[2] # slicing is exclusive of ending index X = query[3] if type_ == 1: for i in range(L, R): A[i] += X elif type_ == 2: for i in range(L, R): A[i] = max(A[i], X) return A"},{"question":"A local school is organizing a frisbee tournament. They aim to ensure that each game is played between two different teams and that every team plays against each of its opponents exactly once. The school needs your help to create a schedule that satisfies these constraints. Furthermore, the schedule should be as compact as possible, with the minimum number of rounds. Each round can include multiple games, but a team cannot participate in more than one game per round. -----Input----- The first line of input contains an integer n (2 le n le 100), the number of teams. The following n lines each contain the name of a team, which is a string of up to 20 characters. -----Output----- Output an integer k indicating the minimum number of rounds needed. Follow this by k sets of lines, each representing a round. Each line within a set should contain the names of two teams separated by a space, indicating a match between those teams in that round. If there are several possible schedules subject to these constraints, any is acceptable. -----Examples----- Sample Input: 4 TeamA TeamB TeamC TeamD Sample Output: 3 TeamA TeamB TeamC TeamD TeamA TeamC TeamB TeamD TeamA TeamD TeamB TeamC","solution":"def schedule_tournament(n, teams): Generates a schedule for a frisbee tournament. Parameters: - n: int - number of teams - teams: list of strings - names of the teams Returns: - list of rounds where each round is a list of matches. rounds = [] matches = [] # Generate all possible matches for i in range(n): for j in range(i + 1, n): matches.append((teams[i], teams[j])) # Arrange matches into rounds while matches: round_matches = [] available_teams = set(teams) # Select matches for the current round for match in matches[:]: team1, team2 = match if team1 in available_teams and team2 in available_teams: round_matches.append(match) available_teams.remove(team1) available_teams.remove(team2) matches.remove(match) rounds.append(round_matches) return rounds def format_schedule(rounds): Formats the schedule into the required output format. Parameter: - rounds: list of rounds where each round is a list of matches. Returns: - str - formatted schedule as a string output = [] output.append(str(len(rounds))) for round_matches in rounds: for match in round_matches: output.append(f\\"{match[0]} {match[1]}\\") output.append(\\"\\") return \\"n\\".join(output).strip() def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') n = int(data[0]) teams = data[1:] rounds = schedule_tournament(n, teams) print(format_schedule(rounds))"},{"question":"Every summer, a local pizza place updates its menu and partners with a dairy farm to use a specific type of cheese. Each pizza can have a combination of toppings, and the price depends on the type of cheese used and the number of toppings added. Given the price per unit of several cheeses and the cost of each topping, write a program to calculate the total cost of a pizza. Input: The first line will contain an integer C, the number of available cheese types. The next C lines will contain a string, the name of the cheese, followed by a float, the price per unit of the cheese. Following will be an integer T, the number of available toppings. Then the next T lines will contain a string, the name of the topping, followed by a float, the cost of that topping. The next line will contain a string, the name of the selected cheese. The next integer will be the number of toppings selected N. The last N lines will contain the names of the selected toppings. Output: A single float value indicating the total cost of the pizza. Example: Input: 2 Mozzarella 1.5 Parmesan 2.0 3 Pepperoni 0.5 Olives 0.25 Mushrooms 0.4 Mozzarella 2 Pepperoni Olives Output: 2.25 Explanation: Using Mozzarella cheese which is 1.5, with Pepperoni (0.5) and Olives (0.25), results in a total cost of 1.5 + 0.5 + 0.25 = 2.25.","solution":"def calculate_pizza_cost(): cheese_prices = {} topping_prices = {} # Reading cheese prices C = int(input().strip()) for _ in range(C): name, price = input().strip().split() cheese_prices[name] = float(price) # Reading topping prices T = int(input().strip()) for _ in range(T): name, price = input().strip().split() topping_prices[name] = float(price) # Reading selected cheese selected_cheese = input().strip() # Reading selected toppings N = int(input().strip()) selected_toppings = [input().strip() for _ in range(N)] # Calculating total cost total_cost = cheese_prices[selected_cheese] for topping in selected_toppings: total_cost += topping_prices[topping] return total_cost"},{"question":"Create a function named `transposeMatrix` that takes a rectangular matrix (list of lists) as input and returns its transposed matrix. The transposed matrix is formed by turning all the rows of the original matrix into columns and vice versa. Example: ``` Input: [ [1, 2, 3], [4, 5, 6] ] Output: [ [1, 4], [2, 5], [3, 6] ] Input: [ [1, 2], [3, 4], [5, 6] ] Output: [ [1, 3, 5], [2, 4, 6] ] ``` In the first example, the first row of the input matrix `[1, 2, 3]` becomes the first column of the output matrix `[1, 4]`, and the second row of the input matrix `[4, 5, 6]` becomes the second column of the output matrix `[2, 5, 6]`. Constraints: - The input matrix will have at least one row and one column. - The input matrix will not have more than 1000 rows or columns.","solution":"def transposeMatrix(matrix): Returns the transpose of the input matrix. return [list(row) for row in zip(*matrix)]"},{"question":"You are a space traveler and you have landed on a planet inhabited by friendly aliens who communicate using a unique language. To bridge the communication gap, you need to translate numbers between your numerical system and theirs. The alien numerical system uses a different base and a set of unique digits. The alien base system can be represented by `b` different digits, ranging from `0` to `b-1`. Each digit in the alien system can be mapped to a unique symbol (e.g., a, b, ...). You are given a string of symbols which represent a number in the alien system and you need to convert this number to its equivalent decimal (base 10) representation. # Input The input will be provided in the following format: ``` b alien_number ``` Where `b` (2 <= b <= 36) is the base of the alien numerical system, and `alien_number` is a string representing the number in the alien system. # Output Output the decimal (base 10) equivalent of the given `alien_number`. # Example Sample Input 1 ``` 16 1a ``` Sample Output 1 ``` 26 ``` Sample Input 2 ``` 2 1011 ``` Sample Output 2 ``` 11 ``` Sample Input 3 ``` 36 z ``` Sample Output 3 ``` 35 ``` Note: - The digits in the alien system are mapped such that \'0\' maps to 0, \'1\' maps to 1, and so on up to \'9\' mapping to 9. If `b > 10`, then \'a\' maps to 10, \'b\' to 11, ..., and \'z\' to 35. - Your solution should handle cases where the alien number system includes additional symbols beyond the usual digits (0-9) and letters (a-z).","solution":"def alien_to_decimal(b, alien_number): Converts an alien number (given in base b) to its decimal (base 10) equivalent. Parameters: b (int): The base of the alien number system (2 <= b <= 36) alien_number (str): The number in the alien system as a string Returns: int: The decimal (base 10) equivalent of the alien number return int(alien_number, b)"},{"question":"Wowo wants to paint a mural on a wall that has n consecutive sections. Each section can be painted a different color. There are k different colors available, labeled from 1 to k. However, for aesthetic reasons, no two adjacent sections should be painted the same color. Wowo needs your help to determine the number of valid ways to paint the wall given these constraints. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and k (2 ≤ k ≤ 100). Output Output the number of valid ways to paint the wall modulo 10^9 + 7. Example Input 4 3 Output 18 Note In the example, there are 4 sections and 3 colors (let\'s say colors are 1, 2, and 3): - For the first section, we have 3 choices (1, 2, or 3). - For each subsequent section, we have 2 choices (since it can\'t be the same as the previous section\'s color). Thus, the total number of ways to paint the wall is 3 * 2^3 = 24. Modulo 10^9 + 7 is not needed in this example since 24 < 10^9 + 7, but the answer is an illustration of how two different sections next to each other will have different color choices.","solution":"def count_ways_to_paint_wall(n, k): MOD = 10**9 + 7 if n == 1: return k total_ways = k * pow(k - 1, n - 1, MOD) % MOD return total_ways"},{"question":"For a given array of integers, define the \\"peak\\" as an element which is greater than its neighbors. An array element is a peak if it is not smaller than its neighbors. For corner elements, consider only one neighbor. Write a program to find the index of a peak element in the array. If multiple peaks are present, return the index of any one of the peaks. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. -----Output----- Print the index of any one peak element. The indices are 0-based. -----Examples----- Input 6 1 3 20 4 1 0 Output 2 Input 5 10 20 15 2 23 Output 1","solution":"def find_peak(arr): Returns the index of any one peak element in the array. n = len(arr) if n == 1: return 0 if arr[0] >= arr[1]: return 0 if arr[n - 1] >= arr[n - 2]: return n - 1 for i in range(1, n - 1): if arr[i] >= arr[i - 1] and arr[i] >= arr[i + 1]: return i"},{"question":"You are given a rectangular grid of size M x N consisting of cells, where each cell is either occupied by an obstacle (\'#\') or empty (\'.\'). You can only move horizontally or vertically from one cell to an adjacent one. Your task is to determine if it\'s possible to find a path from the top-left corner of the grid to the bottom-right corner. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description for T test cases follows. The first line of each test case contains two space-separated integers M and N – the number of rows and columns in the grid, respectively. The next M lines each contain a string of length N representing one row of the grid. Each character in the row is either a \'#\' (an obstacle) or a \'.\' (an empty cell). ------ Output ------ For each test case, output a single line containing either \\"YES\\" or \\"NO\\" – indicating whether it is possible to find a path from the top-left corner to the bottom-right corner of the grid. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M, N ≤ 1000 ------ Sample Input 1 ------ 3 3 3 ... .#. ... 3 3 # .#. ... 1 2 .# ------ Sample Output 1 ------ YES NO NO","solution":"def can_reach_end(grid, M, N): Determines if there is a path from the top-left to the bottom-right corner in the grid. :param grid: list of strings representing the grid :param M: number of rows in the grid :param N: number of columns in the grid :return: True if path exists, False otherwise if grid[0][0] == \'#\' or grid[M-1][N-1] == \'#\': return False # Early exit if start or end is blocked def dfs(x, y): if x < 0 or y < 0 or x >= M or y >= N or grid[x][y] == \'#\' or visited[x][y]: return False if x == M-1 and y == N-1: return True visited[x][y] = True return any(dfs(nx, ny) for nx, ny in [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]) visited = [[False] * N for _ in range(M)] return dfs(0, 0) def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 results = [] for _ in range(T): M = int(data[index]) N = int(data[index+1]) index += 2 grid = data[index:index+M] index += M if can_reach_end(grid, M, N): results.append(\\"YES\\") else: results.append(\\"NO\\") for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Suzuki needs your help to count rocks stacked in a storeroom! Suzuki has an old storeroom where he keeps various supplies. Among these supplies, there are several stacks of rocks. These stacks are represented as a string, with each rock stack represented by a different character. For example: ``` rock_stacks = \'aaabbccddeeeffgg\' ``` In this example, Suzuki wants to know the distinct counts of each type of rock stack in the storeroom. Write a function that takes the string representing the rock stacks and returns a dictionary with each unique character (rock stack type) as the key and its count as the value. For instance, given the input string: ``` rock_stacks = \'aaabbccddeeeffgg\' ``` The output should be: ``` {\'a\': 3, \'b\': 2, \'c\': 2, \'d\': 2, \'e\': 3, \'f\': 2, \'g\': 2} ``` Function signature: ```python def count_rock_stacks(rock_stacks: str) -> dict: pass ``` # Example ```python rock_stacks = \'aabccccd\' assert count_rock_stacks(rock_stacks) == {\'a\': 2, \'b\': 1, \'c\': 4, \'d\': 1} rock_stacks = \'zzxyyyzzz\' assert count_rock_stacks(rock_stacks) == {\'z\': 5, \'x\': 1, \'y\': 3} print(\\"All test cases pass\\") ```","solution":"def count_rock_stacks(rock_stacks: str) -> dict: Returns a dictionary with unique characters in the input string as keys and their counts as values. stack_counts = {} for char in rock_stacks: if char in stack_counts: stack_counts[char] += 1 else: stack_counts[char] = 1 return stack_counts"},{"question":"You are given a string s of length n consisting of lowercase alphabets. You can perform the following operation on the string s: - Choose any character from the string and move it to the beginning of the string. Your task is to determine the minimum number of operations required to make the string sorted in non-decreasing order. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 leq t leq 100). The description of the test cases follows. The first line of each test case contains a single integer n (1 leq n leq 100) — the length of the string. The second line of each test case contains the string s. -----Output----- For each test case, print a single integer representing the minimum number of operations required to make the string sorted in non-decreasing order. -----Examples----- Input 2 3 cba 5 edcba Output 2 4 -----Note----- In the first test case, using the operation once to move \'b\' to the beginning results in \\"bca\\", and using the operation a second time to move \'a\' to the beginning results in \\"abc\\". Hence, the minimum number of operations is 2. In the second test case, using the operation four times is necessary to move \'a\', \'b\', \'c\', and \'d\' in sequence to the beginning, resulting in \\"abcde\\". Hence, the minimum number of operations is 4.","solution":"def min_operations_to_sort(t, test_cases): results = [] for i in range(t): n, s = test_cases[i] sorted_s = \'\'.join(sorted(s)) moves = 0 # Calculate the number of characters that are already in the sorted position from left for j in range(n): if s[j] == sorted_s[moves]: moves += 1 # Minimum operations required is the length minus the longest already sorted part results.append(n - moves) return results # Example: # t = 2 # test_cases = [(3, \\"cba\\"), (5, \\"edcba\\")] # print(min_operations_to_sort(t, test_cases)) # Output: [2, 4]"},{"question":"# Task Write a function that checks if a given string can be a palindrome by removing at most one character from it. A palindrome is a word that reads the same backward as forward. # Example ``` * For `inputString = \\"radar\\"`, the output should be `true`. The string \\"radar\\" is already a palindrome, so you do not need to remove any character. * For `inputString = \\"radr\\"`, the output should be `true`. By removing the character \'d\', we get \\"rar\\", which is a palindrome. * For `inputString = \\"hello\\"`, the output should be `false`. There is no way to remove exactly one character to get a palindrome. ``` # Input/Output - `[input]` string `inputString` A string consisting of lowercase English letters (1 ≤ |inputString| ≤ 10^5). - `[output]` boolean Return `true` if you can make the `inputString` a palindrome by removing at most one character; otherwise, return `false`.","solution":"def can_be_palindrome(inputString): def is_palindrome(s): return s == s[::-1] left, right = 0, len(inputString) - 1 while left < right: if inputString[left] != inputString[right]: # Try removing either the left character or the right character return is_palindrome(inputString[left+1:right+1]) or is_palindrome(inputString[left:right]) left += 1 right -= 1 return True"},{"question":"After an announced technology breakthrough, Bob\'s company finds itself with thousands of logs detailing the usage of its services by millions of users. Each log entry contains the user ID and the duration in seconds for which the user engaged with one of the services within a given hour. Due to storage limitations, the company decided to record only the user ID and duration per log entry. Bob\'s task is to summarize this data by calculating the total engagement time per user. Write a program to help Bob accomplish this. -----Input----- First line contains number M (1 leq M leq 500,000) representing the total number of log entries. Next M lines each contain a user ID (an integer 1 leq U_i leq 10^6) and a duration (an integer 1 leq D_i leq 1000) separated by a space. -----Output----- For each unique user ID that appears in the logs, output the user ID and the total engagement time in seconds, separated by a single space. The output must be sorted in ascending order of user IDs. -----Example----- Input: 5 1 250 2 300 1 350 2 200 3 100 Output: 1 600 2 500 3 100 -----Note----- The example above contains 5 log entries. User ID 1 appears in 2 entries with engagement times 250 and 350, summing up to 600. User ID 2 appears in 2 entries with engagement times 300 and 200, summing up to 500. User ID 3 appears in 1 entry with an engagement time of 100. The output prints each user ID followed by their total engagement time in ascending order of user IDs.","solution":"def summarize_logs(log_entries): Summarizes the total engagement time per user from log entries. Parameters: log_entries (list of tuple): List of tuples where each tuple contains (user_id, duration). Returns: List of tuples where each tuple contains (user_id, total_duration) sorted by user_id. user_engagement = {} for user_id, duration in log_entries: if user_id in user_engagement: user_engagement[user_id] += duration else: user_engagement[user_id] = duration sorted_engagement = sorted(user_engagement.items()) return sorted_engagement"},{"question":"Emma is organizing a library of her favorite books. She wants to keep track of how many books she has from each genre. Each book belongs to exactly one genre, and she can add new genres as needed. Emma needs a program that can help her with this task by processing lists of books she inputs and reporting the count of books in each genre. The program should be able to handle multiple test cases. Each test case starts with a number G, the number of genres. This is followed by G strings, each representing a genre. After that, there\'s a number B, the number of books, followed by B strings, each naming the genre of a book. For each test case, the program should output the genres and their counts in alphabetical order. Input: - First line contains T, the number of test cases. (1 ≤ T ≤ 100) - For each test case: - The first line contains an integer G (1 ≤ G ≤ 100), the number of genres. - The next G lines each contain a string representing a genre. - The next line contains an integer B (1 ≤ B ≤ 1000), the number of books. - The next B lines each contain a string representing the genre of a book. Output: - For each test case, output each genre that appears in the list of books along with its count, in alphabetical order. If a genre has no books, exclude it from the output. SAMPLE INPUT 2 3 Fantasy ScienceFiction Horror 5 Fantasy Horror Fantasy Fantasy Horror 2 Romance Thriller 4 Romance Romance Thriller Romance SAMPLE OUTPUT Fantasy: 3 Horror: 2 Romance: 3 Thriller: 1 Explanation: In the first test case, we have three genres: Fantasy, ScienceFiction, and Horror. Among five books, Fantasy appears 3 times and Horror appears 2 times. ScienceFiction does not appear and should not be included in the output. In the second test case, Romance appears 3 times and Thriller appears 1 time.","solution":"def count_books_by_genre(test_cases): results = [] for case in test_cases: G = case[\'G\'] genres = case[\'genres\'] B = case[\'B\'] books = case[\'books\'] genre_count = {genre: 0 for genre in genres} for book in books: if book in genre_count: genre_count[book] += 1 sorted_genres = sorted( [(genre, count) for genre, count in genre_count.items() if count > 0], key=lambda x: x[0] ) result_strs = [f\\"{genre}: {count}\\" for genre, count in sorted_genres] results.append(\\"n\\".join(result_strs)) return \\"nn\\".join(results)"},{"question":"You are given a matrix of size n x n filled with integers. A special diagonal in the matrix is defined such that it starts from the top-left corner and ends at the bottom-right corner of the matrix. Elements along this diagonal share the same row and column indices (i,i). Your task is to compute the sum of all special diagonals in the matrix. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the size of the matrix. Each of the next n lines contains n integers ai,j (0 ≤ ai,j ≤ 109) — the elements of the matrix. Output Print a single integer — the sum of all elements along the special diagonal of the matrix. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 15 Input 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 34","solution":"def sum_special_diagonal(matrix): Returns the sum of the elements along the special diagonal (from top-left to bottom-right). :param matrix: List of lists where each list represents a row in the n x n matrix. :return: Sum of the special diagonal elements. return sum(matrix[i][i] for i in range(len(matrix)))"},{"question":"John is developing a new data structure for efficient text editing, and he needs to handle a particular operation efficiently. The text is represented as a string containing lowercase English letters. One specific operation John needs to implement is reversing a substring of the text. Given a starting index and an ending index, he wants to reverse the characters within this range (inclusive) and then return the final modified string. Note that the string is 0-indexed. Write a function that performs this operation and returns the modified string. Input: - The first line contains the string `s` of length `n` (1 ≤ n ≤ 100). - The second line contains two integers `start` and `end` (0 ≤ start ≤ end < n) representing the starting and ending indices of the substring to be reversed. Output: - Print the modified string after the specified substring has been reversed. Example Input: ``` abcdef 2 4 ``` Example Output: ``` abedcf ```","solution":"def reverse_substring(s, start, end): Returns the string after reversing the substring from start to end (inclusive) indices. # Make sure the start and end indices are within the valid range if start < 0 or end >= len(s) or start > end: raise ValueError(\\"Invalid start or end indices\\") # Reverse the substring reversed_substring = s[start:end+1][::-1] # Combine the parts of the string modified_string = s[:start] + reversed_substring + s[end+1:] return modified_string"},{"question":"Sara has a unique lock mechanism that requires a code to be cracked in order to open it. The lock is designed in a way that it only opens if the sum of digits of a given number is a prime number. You need to write a code that helps Sara determine if the lock will open for a given number or not. Input The first input line contains an integer T, the number of test cases. Each test case consists of a single line with an integer N, representing the number to check for the lock mechanism. Output For each test case, output \\"YES\\" if the sum of the digits is a prime number and \\"NO\\" otherwise. Constraints 1 = T = 1000 1 = N = 10^18 SAMPLE INPUT 2 123 124 SAMPLE OUTPUT YES NO Explanation For the 1st test case N=123, the sum of digits is 1 + 2 + 3 = 6 which is not a prime number. Hence, the output is NO. For the 2nd test case N=124, the sum of digits is 1 + 2 + 4 = 7 which is a prime number. Hence, the output is YES.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_digits(n): Returns the sum of digits of the number n. return sum(int(digit) for digit in str(n)) def will_lock_open(N): Given the number N, determine if the lock will open based on the sum of the digits. total = sum_of_digits(N) return \\"YES\\" if is_prime(total) else \\"NO\\" def process_cases(cases): Process a list of test cases and return the results. results = [] for case in cases: results.append(will_lock_open(case)) return results"},{"question":"Develop a program that calculates the maximum possible sum of a contiguous subarray within a given array of integers. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each of the next T pairs of lines: - The first line contains an integer N, the length of the array. - The second line contains N integers, representing the elements of the array. ------ Output Format ------ For each test case, output in a single line the maximum sum of any contiguous subarray within the given array. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^4 ≤ array[i] ≤ 10^4 The sum of N over all test cases does not exceed 10^5. ----- Sample Input 1 ------ 2 4 1 -2 3 4 5 1 -3 2 1 -1 ----- Sample Output 1 ------ 7 3 ----- Explanation 1 ------ Test case 1: The maximum sum of contiguous subarray is achieved by subarray [3, 4]. Test case 2: The maximum sum of contiguous subarray is achieved by subarray [2, 1].","solution":"def max_subarray_sum(arr): Returns the maximum possible sum of a contiguous subarray within the given array. max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def solve(test_cases): results = [] for arr in test_cases: results.append(max_subarray_sum(arr)) return results def parse_input(input_text): input_lines = input_text.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) # length of the array, but we do not need to use this arr = list(map(int, input_lines[index + 1].strip().split())) test_cases.append(arr) index += 2 return test_cases # Example usage: # input_text = 2 # 4 # 1 -2 3 4 # 5 # 1 -3 2 1 -1 # test_cases = parse_input(input_text) # results = solve(test_cases) # for result in results: # print(result)"},{"question":"Write a function called merge_dictionaries that takes two dictionaries as input and returns a new dictionary containing all the key-value pairs from both input dictionaries. If a key exists in both dictionaries, the value from the second dictionary should be used in the resulting dictionary. For example: ```python dict1 = {\'a\': 1, \'b\': 2} dict2 = {\'b\': 3, \'c\': 4} merge_dictionaries(dict1, dict2) # Returns {\'a\': 1, \'b\': 3, \'c\': 4} dict1 = {\'x\': 5, \'y\': 6} dict2 = {\'y\': 7, \'z\': 8} merge_dictionaries(dict1, dict2) # Returns {\'x\': 5, \'y\': 7, \'z\': 8} ```","solution":"def merge_dictionaries(dict1, dict2): Merges two dictionaries. In case of conflict, the value from the second dictionary is used. Args: dict1 (dict): The first dictionary. dict2 (dict): The second dictionary. Returns: dict: A new dictionary containing all key-value pairs from both input dictionaries. merged_dict = dict1.copy() # Create a copy of the first dictionary merged_dict.update(dict2) # Update the copy with the second dictionary values return merged_dict"},{"question":"Given an array of integers and an integer k, your task is to rearrange the array such that the difference between the maximum and minimum values of every k-sized subarray is minimized. Return the modified array. If multiple arrays satisfy the condition, return any one of them. Example 1: Input: arr = [10, 1, 2, 7, 5, 8, 9] k = 3 Output: [1, 2, 5, 7, 8, 9, 10] Explanation: For the subarrays [1, 2, 5], [2, 5, 7], [5, 7, 8], [7, 8, 9], [8, 9, 10], the differences between the maximum and minimum values are 4, 5, 5, 2, 2 respectively, and this is minimized. Example 2: Input: arr = [4, 2, 1, 3] k = 2 Output: [1, 2, 3, 4] Explanation: For the subarrays [1, 2], [2, 3], [3, 4], the differences are 1, 1, 1 respectively, which are minimized. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rearrangeArray(arr, n, k) which takes the array arr, its size n, and the integer k as inputs and returns the modified array as stated in the description. Expected Time Complexity: O(N * log N). Expected Auxiliary Space: O(N). Constraints: 1 <= N <= 10^5 1 <= arr[i] <= 10^9 1 <= k <= N","solution":"def rearrangeArray(arr, n, k): Rearranges the array such that the difference between the maximum and minimum values of every k-sized subarray is minimized. If multiple arrays satisfy the condition, returns any one of them. # Sort the array to minimize the difference between min and max values in k-sized subarrays arr.sort() return arr"},{"question":"Palindrome String Check Maria is working on a string manipulation project and needs to verify if a given string is a palindrome. A palindrome is a string that reads the same backward as forward (ignoring spaces, punctuation, and case differences). Write a function that takes a string (containing only English letters and spaces) as input and returns TRUE if it is a palindrome, and FALSE otherwise. Input: A single line containing the string to be checked, with a maximum length of 100 characters. Output: Print TRUE if the string is a palindrome, otherwise print FALSE. Example Input: A Santa at NASA Output: TRUE Input: Hello World Output: FALSE","solution":"def is_palindrome(s): Returns True if the input string is a palindrome, False otherwise. This function ignores spaces, punctuation, and is case insensitive. # Normalize the string by converting to lowercase and removing non-alphabetic characters normalized_str = \'\'.join(c.lower() for c in s if c.isalpha()) # Check if the normalized string is equal to its reverse return normalized_str == normalized_str[::-1]"},{"question":"In a kingdom far away, there are N villages connected by M directed roads. Each road allows transportation from one village to another, but not necessarily the other way around. The kingdom\'s king is concerned about the amount of gold stored in these villages. Specifically, every village i contains an amount of gold gi (1 ≤ gi ≤ 109). There are two types of queries the villagers might ask you to resolve: \\"U v g\\": The amount of gold in village v is updated to g. \\"Q x y\\": The king wants to know the maximum amount of gold he can have in any single village when traveling from village x to village y through a series of roads. He must visit each village at most once during his travel. Formally, consider the roads as a directed graph, where: - A path is defined as a sequence of villages [v1, v2, ..., vk] where for any 1 ≤ i < k, there is a road from vi to vi+1. - For each path, the king wants to determine the maximum gold present in any village along that path. Input: The first line of input contains three integers N, M, Q (1 ≤ N, M, Q ≤ 100000), separated by spaces. The second line contains N integers g1, g2, ..., gN, indicating the initial amount of gold in each village. Next, there are M lines each containing two integers ai and bi (1 ≤ ai, bi ≤ N, ai ≠ bi), indicating there is a directed road from village ai to village bi. The next Q lines describe the queries in the form \\"U v g\\" or \\"Q x y\\" (1 ≤ v, x, y ≤ N, 1 ≤ g ≤ 109). Output: For each query of type \\"Q\\", output the maximum amount of gold that can be collected in a single village along any path from x to y. If there is no valid path, output -1. SAMPLE INPUT 4 4 3 3 4 2 5 1 2 2 3 3 4 1 3 Q 1 4 U 3 6 Q 1 4 SAMPLE OUTPUT 5 6","solution":"from collections import defaultdict, deque import sys class Kingdom: def __init__(self, N, M, gold, roads): self.N = N self.gold = gold self.graph = defaultdict(list) for a, b in roads: self.graph[a].append(b) def update_gold(self, v, g): self.gold[v-1] = g def query_max_gold(self, x, y): max_gold = -1 visited = [False] * self.N q = deque([(x, self.gold[x-1])]) while q: current, current_gold = q.popleft() if current == y: max_gold = max(max_gold, current_gold) continue visited[current-1] = True for neighbor in self.graph[current]: if not visited[neighbor-1]: q.append((neighbor, max(current_gold, self.gold[neighbor-1]))) return max_gold def process_queries(N, M, Q, gold, roads, queries): kingdom = Kingdom(N, M, gold, roads) results = [] for query in queries: if query[0] == \'U\': _, v, g = query kingdom.update_gold(v, g) elif query[0] == \'Q\': _, x, y = query results.append(kingdom.query_max_gold(x, y)) return results"},{"question":"In a distant magical land, there are N ancient stones arranged in a row, each imbued with a certain amount of magical energy. The magical energy in the i-th stone can be positive (for providing energy) or negative (for absorbing energy). A wizard wants to perform a special ritual using these stones. The ritual requires selecting a consecutive sequence of stones such that the sum of their magical energies is maximized. However, the wizard also needs to ensure that the chosen sequence of stones contains at least one stone with a negative magical energy (to balance the ritual). Given the values of the magical energies of the stones, your task is to find the maximum sum of a consecutive sequence of stones that contains at least one negative energy stone. Input Format The first line contains a single integer N — the number of stones. The second line contains N space-separated integers — the magical energies of the stones. Constraints 1 leq N leq 100 -10^4 leq text{magical energy} leq 10^4 Output Format Output a single integer, the maximum sum as described. Sample Input 5 3 -1 4 -2 2 Sample Output 6 Explanation The sequence of stones with the maximum sum that contains at least one negative stone is `[3, -1, 4]`, resulting in a sum of 6.","solution":"def max_sum_with_negative(N, energies): This function finds the maximum sum of a consecutive sequence of stones that contains at least one negative energy stone. Args: N: An integer representing the number of stones. energies: A list of integers representing the magical energies of the stones. Returns: An integer representing the maximum sum satisfying the conditions. max_end_here = -float(\'inf\') max_so_far = -float(\'inf\') has_negative = False max_negative = -float(\'inf\') for i in range(N): if energies[i] < 0: has_negative = True max_negative = max(max_negative, energies[i]) if max_end_here < 0: max_end_here = energies[i] else: max_end_here += energies[i] if max_end_here > max_so_far: max_so_far = max_end_here if has_negative: return max_so_far else: return max_negative # Sample usage (uncomment to check) # print(max_sum_with_negative(5, [3, -1, 4, -2, 2])) # Expected output: 6"},{"question":"You are given a binary grid of size n times m (each cell contains either 0 or 1). A square subgrid is a subgrid that is a square and not necessarily empty. The weight of a square subgrid is defined as the sum of all the elements in that subgrid. Your task is to find the maximum weight of any square subgrid in the given binary grid. -----Input----- The first line contains two integers n and m (1 leq n, m leq 300) indicating the number of rows and columns of the grid, respectively. Each of the next n lines contains m integers (each either 0 or 1) representing the grid. -----Output----- Print one integer — the maximum weight of any square subgrid in the grid. -----Examples----- Input 3 3 1 0 1 0 1 0 1 0 1 Output 1 Input 4 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Output 16 Input 2 5 0 1 0 1 0 1 0 1 0 1 Output 1","solution":"def max_weight_square_subgrid(grid): n = len(grid) m = len(grid[0]) # Initialize dp array dp = [[0] * m for _ in range(n)] max_weight = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 1 if i > 0 and j > 0: dp[i][j] += min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) max_weight = max(max_weight, dp[i][j]) return max_weight ** 2 # Example usage: n, m = 4, 4 grid = [ [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1] ] print(max_weight_square_subgrid(grid)) # Output: 16"},{"question":"In a warehouse, there are several boxes arranged in a single row. Each box contains a certain number of items. You need to perform a series of operations to either add or remove items from the boxes. Each operation will be described by the type of operation and the index of the box to which it applies. You are to write a program that can process these operations and report the number of items in the box after each operation. **Input** The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 100 000), where `n` is the number of boxes and `q` is the number of operations. The second line contains `n` integers, where the i-th integer represents the initial number of items in the i-th box. Each of the next `q` lines contain an operation. The operation can be one of the following: - `1 x y`: Add `y` items to the x-th box (1 ≤ x ≤ n, 1 ≤ y ≤ 1 000 000). - `2 x y`: Remove `y` items from the x-th box (1 ≤ x ≤ n, 1 ≤ y ≤ items in the x-th box). - `3 x`: Report the number of items in the x-th box (1 ≤ x ≤ n). **Output** For each operation of type `3 x`, output the number of items in the x-th box. **Examples** **Input** ``` 5 5 2 3 5 1 4 1 3 2 3 3 2 2 1 3 2 3 4 ``` **Output** ``` 7 2 1 ``` **Explanation** Initially, the boxes contain [2, 3, 5, 1, 4] items. After performing each operation: - Operation `1 3 2` adds 2 items to the 3rd box: the boxes now contain [2, 3, 7, 1, 4]. - Operation `3 3` queries the number of items in the 3rd box: the output is 7. - Operation `2 2 1` removes 1 item from the 2nd box: the boxes now contain [2, 2, 7, 1, 4]. - Operation `3 2` queries the number of items in the 2nd box: the output is 2. - Operation `3 4` queries the number of items in the 4th box: the output is 1.","solution":"def process_operations(n, q, items, operations): results = [] for operation in operations: op_type = operation[0] if op_type == 1: # Add y items to the x-th box x, y = operation[1], operation[2] items[x-1] += y elif op_type == 2: # Remove y items from the x-th box x, y = operation[1], operation[2] items[x-1] -= y elif op_type == 3: # Report the number of items in the x-th box x = operation[1] results.append(items[x-1]) return results"},{"question":"You are given a set of n wooden sticks, each with an integer length. Your task is to determine if it\'s possible to form a right-angled triangle using three of these sticks and, if possible, determine at least one such combination. If there are multiple such combinations, any one will suffice. Remember that for a triangle to be right-angled, the square of the length of the longest side must be equal to the sum of the squares of the lengths of the other two sides. ----- Input ----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of wooden sticks. The second line contains n integers, each being the length of a stick. Each length is a positive integer and does not exceed 10^9. ----- Output ----- If it\'s possible to form a right-angled triangle with some combination of the sticks, print \\"YES\\" followed by three integers, the lengths of the sides forming the right-angled triangle. If no such combination exists, print \\"NO\\". ----- Examples ----- Input 5 3 4 5 12 13 Output YES 3 4 5 Input 6 1 2 3 5 10 12 Output NO ----- Note ----- In the first example, the sticks of lengths 3, 4, and 5 can form a right-angled triangle (3^2 + 4^2 = 5^2). In the second example, there is no combination of any three sticks that can form a right-angled triangle.","solution":"def find_right_angled_triangle(stick_lengths): n = len(stick_lengths) stick_lengths.sort() for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): a = stick_lengths[i] b = stick_lengths[j] c = stick_lengths[k] if c ** 2 == a ** 2 + b ** 2: return \\"YES\\", a, b, c return \\"NO\\" # Example usage: n = 5 stick_lengths = [3, 4, 5, 12, 13] print(find_right_angled_triangle(stick_lengths)) # Should return (\\"YES\\", 3, 4, 5)"},{"question":"You are given a list of words and a text string. You need to check if the text string contains all the words from the list in the same order, but not necessarily consecutively. The words in the list must appear as whole words in the text string. Input: The first line contains an integer n (1 ≤ n ≤ 100), the number of words in the list. The next line contains n words separated by spaces. Each word is composed of lowercase English letters and has length between 1 and 10. The third line contains a single string of text composed of lowercase English letters and spaces, and has length between 1 and 1000. Output: Print \\"YES\\" if all the words from the list appear in the text string in the same order. Otherwise, print \\"NO\\". Example: Input: 3 apple banana kiwi i like to eat apple and then some banana and finally a kiwi Output: YES Input: 3 apple banana kiwi banana apple kiwi is a nice combination Output: NO Input: 2 python programming i am learning programming using python Output: NO","solution":"def check_words_in_text(n, words, text): words = words.split() text_words = text.split() word_index = 0 for text_word in text_words: if word_index < n and text_word == words[word_index]: word_index += 1 return \\"YES\\" if word_index == n else \\"NO\\""},{"question":"Write a function that receives a string and returns the number of words in the string that contain at least one vowel. Words are separated by spaces, and a word is defined as a sequence of non-space characters. Vowels are \\"a\\", \\"e\\", \\"i\\", \\"o\\", and \\"u\\" (both uppercase and lowercase). The function should be case insensitive. For example: ```python >>> count_words_with_vowels(\\"Hello world\\") 2 >>> count_words_with_vowels(\\"My gym\\") 0 >>> count_words_with_vowels(\\"This is a test\\") 4 ```","solution":"def count_words_with_vowels(s): Returns the number of words in the given string that contain at least one vowel. vowels = set(\\"aeiouAEIOU\\") words = s.split() count = 0 for word in words: for char in word: if char in vowels: count += 1 break return count"},{"question":"You are given an array of n unique integers, and all the integers are between 1 and n. You need to construct a connected undirected graph with n nodes such that each pair of nodes (i, a[i]) have an edge between them. Determine the maximum number of edges that such a graph can have while maintaining the property that each pair of nodes (i, a[i]) are directly connected. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of unique integers in the array. The second line contains n unique integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ n) — the given array. Output Print the maximum number of edges that the graph can have. Example Input 4 2 1 4 3 Output 4 Note In the example, one possible graph can be: 1-2, 2-1, 3-4, 4-3 This graph has 4 edges and maintains the property that each pair of nodes (i, a[i]) are directly connected.","solution":"def max_edges_in_special_graph(n, arr): Returns the maximum number of edges in a connected undirected graph with given pairs (i, a[i]). # Each pair (i, a[i]) forms an edge, hence total n edges return n"},{"question":"Write a function that determines if it\'s possible to partition an array of integers into two subsets such that the sum of elements in both subsets is equal. If it is possible, return True; otherwise, return False. Input: - An integer N denoting the number of elements in the array. - A second line containing N integers, representing the elements of the array. Output: - Output a single line with \\"True\\" if the array can be partitioned as described, otherwise, output \\"False\\". Constraints: - 1 ≤ N ≤ 200 - 1 ≤ elements of the array ≤ 100 Note: The function should be a pure function and not rely on I/O functions like scanf() or printf(). SAMPLE INPUT 4 1 5 11 5 SAMPLE OUTPUT True Explanation: The array [1, 5, 11, 5] can be partitioned into two subsets [1, 5, 5] and [11] with equal sum 11.","solution":"def can_partition(nums): Determine if it\'s possible to partition the array into two subsets with equal sum. total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition it into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Initialize a DP array to determine if a subset with sum `target` is possible dp = [False] * (target + 1) dp[0] = True for num in nums: # Update the DP array in reverse to ensure each number is only used once for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"In a magical kingdom, there is a Wizard who possesses N magical wands. Each wand has a distinct magical power value associated with it. The Wizard has a special technique to form a most powerful pair of wands, which is defined as follows: - Choose two wands such that the absolute difference between their magical power values is minimized. The Wizard needs your help to find out the minimum absolute difference between any pair of wands. -----Input----- The first line contains a single integer T denoting the number of test cases. The first line of each test case contains an integer N which denotes the number of wands. The second line of each test case contains N space-separated integers denoting the magical power values of the wands. -----Output----- For each test case, output a single integer representing the minimum absolute difference between any pair of wands. -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 100000 - 1 ≤ Magical power value ≤ 10^9 -----Subtasks----- - Subtask 1 (50 points) : 2 ≤ N ≤ 100 - Subtask 2 (50 points) : 2 ≤ N ≤ 100000 -----Example----- Input 2 5 3 8 15 10 20 3 1 6 2 Output 2 1 -----Explanation----- - Test 1: The pairs of wands and their absolute differences are (3,8)=5, (3,15)=12, (3,10)=7, (3,20)=17, (8,15)=7, (8,10)=2, (8,20)=12, (15,10)=5, (15,20)=5, and (10,20)=10. The minimum absolute difference is 2. - Test 2: The pairs of wands and their absolute differences are (1,6)=5, (1,2)=1, and (6,2)=4. The minimum absolute difference is 1.","solution":"def find_min_difference(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] wands = test_cases[i][1] wands.sort() min_diff = float(\'inf\') for j in range(1, N): min_diff = min(min_diff, wands[j] - wands[j-1]) results.append(min_diff) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) wands = list(map(int, lines[index + 1].split())) test_cases.append((N, wands)) index += 2 return T, test_cases"},{"question":"You are given a list of integers candles, where each element represents the height of a candle. You can melt down the candles daily where each day\'s melted candle height equals the height of the shortest candle plus one additional unit. Return the minimum number of days required to melt all candles completely. Example 1: Input: candles = [4, 3, 2, 1] Output: 4 Explanation: On day 1, melt candles to [3, 2, 1, 0]; on day 2, melt candles to [2, 1, 0, 0]; on day 3, melt candles to [1, 0, 0, 0]; on day 4, melt candles to [0, 0, 0, 0]. Example 2: Input: candles = [5, 4, 1, 3, 2] Output: 5 Explanation: On day 1, melt candles to [4, 3, 0, 2, 1]; on day 2, melt candles to [3, 2, 0, 1, 0]; on day 3, melt candles to [2, 1, 0, 0, 0]; on day 4, melt candles to [1, 0, 0, 0, 0]; on day 5, melt candles to [0, 0, 0, 0, 0]. Example 3: Input: candles = [10] Output: 10 Explanation: On each of the 10 days, melt the single candle by one unit until it reaches 0. Note: 1 <= candles.length <= 1000 1 <= candles[i] <= 1000","solution":"def min_melting_days(candles): Returns the minimum number of days required to melt all candles completely. # The days required will be equal to the height of the tallest candle return max(candles)"},{"question":"You are given a list of integers. You are required to find the largest sum of a subsequence of this list, such that no two elements in the subsequence are adjacent to each other in the original list. A subsequence is a sequence derived from the list by deleting some or none of the elements without changing the order of the remaining elements. Input The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the list. The second line contains n integers a_1, a_2, ..., a_n (-10^6 ≤ a_i ≤ 10^6), the elements of the list. Output Print a single integer, the largest sum of a subsequence in which no two elements are adjacent. Example Input 6 3 2 5 10 7 Output 15 Explanation The largest sum subsequence where no two elements are adjacent is {3, 10}, with a total sum of 3 + 10 = 13. Another possibility is {2, 5, 7}, with a total sum of 2 + 5 + 7 = 14. Hence, the result is 15.","solution":"def largest_non_adjacent_sum(arr): Returns the largest sum of a subsequence where no two elements are adjacent. n = len(arr) if n == 0: return 0 if n == 1: return max(0, arr[0]) prev_prev = max(0, arr[0]) prev = max(prev_prev, arr[1]) for i in range(2, n): current = max(prev, prev_prev + arr[i]) prev_prev, prev = prev, current return prev"},{"question":"The pandemic has disrupted meeting schedules and now you have a list of meeting times that overlap. Your task is to merge these overlapping meetings into one and give the output of consolidated meeting schedules. # Input The input starts with an integer T, the number of test cases. Each test case starts with an integer N, the number of meetings. Each of the next N lines contains two integers, start and end, representing the start and end times of a meeting (both inclusive). # Output For each test case, output a list of pairs where each pair represents the start and end times of the merged meetings, sorted by start time. # Constraints - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 1000 - 0 ≤ start < end ≤ 10^4 # Example Input ``` 2 3 1 3 2 4 5 7 4 1 3 2 4 6 8 7 9 ``` Output ``` 1 4 5 7 1 4 6 9 ``` # Explanation - In the first test case, meetings (1, 3) and (2, 4) overlap, thus are merged to (1, 4). The meeting (5, 7) doesn\'t overlap with the merged meeting. - In the second test case, meetings (1, 3) and (2, 4) overlap, thus are merged to (1, 4). Meetings (6, 8) and (7, 9) overlap and are merged to (6, 9).","solution":"def merge_meetings(meetings): Merges overlapping meetings given a list of meeting times. Parameters: meetings (List[Tuple[int, int]]): List of tuples containing start and end times of meetings. Returns: List[Tuple[int, int]]: List of tuples containing the start and end times of merged meetings. if not meetings: return [] # Sort meetings by start time meetings.sort() merged = [] for meeting in meetings: # if the list of merged meetings is empty or if the current meeting does not overlap # with the last merged meeting, append it to the list of merged meetings. if not merged or merged[-1][1] < meeting[0]: merged.append(meeting) else: # there is an overlap, so we merge the current meeting with the previous one. merged[-1] = (merged[-1][0], max(merged[-1][1], meeting[1])) return merged def handle_test_cases(test_cases): Handles multiple test cases for merging meeting times. Parameters: test_cases (List[List[Tuple[int, int]]]): List containing multiple test cases, each being a list of meetings. Returns: List[List[Tuple[int, int]]]: List of merged meetings for each test case. results = [] for meetings in test_cases: merged_meetings = merge_meetings(meetings) results.append(merged_meetings) return results"},{"question":"Write a function `maxConsecutiveSum(arr, N)` that takes a list of integers `arr` and an integer `N`, and returns the maximum sum of any `N` consecutive elements in the list. If the list has fewer than `N` elements, return `None`. Example 1: ```python arr = [1, 2, 3, 4, 5] N = 2 maxConsecutiveSum(arr, N) # returns 9 (since 4 + 5 is the maximum sum of 2 consecutive elements) ``` Example 2: ```python arr = [1, 2, 3] N = 5 maxConsecutiveSum(arr, N) # returns None (since the list has fewer than 5 elements) ``` Example 3: ```python arr = [-1, -2, -3, -4, -5] N = 3 maxConsecutiveSum(arr, N) # returns -6 (since -1 + -2 + -3 is the maximum sum of 3 consecutive elements) ```","solution":"def maxConsecutiveSum(arr, N): Returns the maximum sum of any N consecutive elements in the list arr. If the list has fewer than N elements, return None. if len(arr) < N: return None max_sum = sum(arr[:N]) # Initialize with the sum of the first N elements current_sum = max_sum for i in range(N, len(arr)): current_sum += arr[i] - arr[i - N] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given a string s, find the longest substring that appears at least twice in the string without overlapping. A substring is a contiguous sequence of characters within a string. Two substrings s[l_1 ldots r_1] and s[l_2 ldots r_2] overlap if and only if l_1 le r_2 and r_1 ge l_2. Your task is to return the longest substring that appears at least twice without such overlap. If there are multiple substrings with the same maximum length, return any. -----Input----- The input consists of a single line containing a string s (1 le |s| le 200). The string s consists only of lowercase Latin letters. -----Output----- Output a single line containing the longest substring that appears at least twice in the input string without overlapping. -----Example----- Input banana Output an Input abcdef Output (empty string) -----Note----- In the first example, the longest substring \\"an\\" appears twice without overlapping: in positions 1–2 and 3–4. In the second example, no substring appears more than once, so the output is an empty string.","solution":"def longest_repeated_nonoverlapping_substring(s): Finds the longest substring that appears at least twice in the string without overlapping. def has_repeated_substring(substring, s): start = 0 count = 0 while True: start = s.find(substring, start) if start == -1: break count += 1 start += len(substring) if count >= 2: return True return False max_len = 0 result = \\"\\" n = len(s) for length in range(1, n // 2 + 1): for i in range(n - length + 1): substring = s[i:i + length] if has_repeated_substring(substring, s): if length > max_len: max_len = length result = substring return result"},{"question":"You are working with an event planning company to organize a large-scale event. You need to arrange teams for various tasks such that: * Each team has exactly one leader and the rest are members. * No two leaders should be directly connected within the same team. * Any two members within the same team are allowed to be connected. The teams are structured such that connections are bidirectional and always valid. Given the details about the number of teams, the people assigned to these teams, and the connections between them, find out if it’s possible to arrange teams as per the rules or not. Input The first line contains an integer m (1 ≤ m ≤ 10^4) — the number of teams. The second line contains an integer p (1 ≤ p ≤ 10^5) — the number of people. The third line contains an integer c (1 ≤ c ≤ 2 * 10^5) — the number of direct connections between the people. Each of the next c lines contains two integers u and v (1 ≤ u, v ≤ p) — indicating a bidirectional direct connection between person u and person v. Output If it is possible to assign teams such that no two leaders within the same team are connected, print \\"YES\\". If it’s not possible, print \\"NO\\". Example Input 2 8 7 1 2 2 3 4 5 5 6 6 7 3 4 7 8 Output YES","solution":"def is_possible_to_arrange_teams(m, p, c, connections): from collections import defaultdict, deque def bfs(start, color): queue = deque([start]) colors[start] = color while queue: node = queue.popleft() for neighbor in graph[node]: if colors[neighbor] == -1: queue.append(neighbor) colors[neighbor] = 1 - colors[node] elif colors[neighbor] == colors[node]: return False return True graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) colors = [-1] * (p + 1) for i in range(1, p + 1): if colors[i] == -1: if not bfs(i, 0): return \\"NO\\" return \\"YES\\""},{"question":"In this problem, you will write a function to parse and evaluate a simple Boolean expression. You are given a Boolean expression containing only `True`, `False`, `and`, `or`, and parentheses. Your task is to evaluate this expression and return the result as a boolean value. The expression will be in Python syntax. -----Input------ A string representing the Boolean expression. The expression will be a valid Python Boolean expression containing only `True`, `False`, `and`, `or`, and parentheses. The length of the expression will be between 1 and 100 characters inclusive. -----Output------ A boolean value, `True` or `False`, which is the result of evaluating the given Boolean expression. -----Examples----- Input \'True and (False or True)\' Output True Input \'False or (False and True)\' Output False Input \'True and (True or (False and (True or False)))\' Output True -----Note----- You may use Python\'s built-in `eval` function to parse the expression, but it is encouraged to understand and implement basic parsing if you are not utilizing `eval`.","solution":"def evaluate_boolean_expression(expr): Evaluates a simple Boolean expression containing only True, False, and, or, and parentheses. Parameters: expr (str): A string representing a Boolean expression. Returns: bool: The result of evaluating the Boolean expression. return eval(expr)"},{"question":"Design a function that takes a string containing a sentence and returns the sentence with each word reversed, but the order of the words preserved. Example 1: ``` reverse_words_in_sentence(\\"Hello World\\") => \\"olleH dlroW\\" ``` Example 2: ``` reverse_words_in_sentence(\\"The quick brown fox\\") => \\"ehT kciuq nworb xof\\" ``` Example 3: ``` reverse_words_in_sentence(\\"Python is awesome\\") => \\"nohtyP si emosewa\\" ``` Example 4: ``` reverse_words_in_sentence(\\"Keep calm and code on\\") => \\"peeK mlac dna edoc no\\" ``` Your function should handle multiple spaces between words and ensure they are preserved in the output. >Notes >* Input (`sentence`) will always be a string object. >* The function should return a string. >* Preserve the whitespace between words exactly as it appears in the input. >* Assume the input does not contain leading or trailing whitespace and is composed of printable ASCII characters.","solution":"def reverse_words_in_sentence(sentence): Reverses each word in the sentence while preserving the order of the words and spaces. Parameters: sentence (str): A string containing the sentence to be processed. Returns: str: A string with each word reversed but the order of words preserved. return \' \'.join(word[::-1] for word in sentence.split(\' \'))"},{"question":"You are given a list of integers. Your task is to find the maximum possible value you can obtain by selecting exactly one element from the list and multiplying it by its frequency (number of occurrences) in the list. # Input - The first line contains a single integer T, the number of test cases. - The first line of each test case contains a single integer N, the number of elements in the list. - The second line contains N integers separated by space, representing the elements of the list. # Output For each test case, output a single integer — the maximum possible value obtained by selecting an element and multiplying it by its frequency. # Constraints - 1 leq T leq 1000 - 1 leq N leq 100,000 - The sum of N over all test cases does not exceed 1,000,000. - 1 leq text{Elements of the list} leq 10^6 # Sample Input 1 2 5 3 3 2 2 1 4 4 4 4 1 # Sample Output 1 6 12 # Explanation 1 In the first test case, the list is [3, 3, 2, 2, 1]. The element 3 has a frequency of 2, producing a value of 3 times 2 = 6. The element 2 also has a frequency of 2, producing a value of 2 times 2 = 4. The element 1 has a frequency of 1, producing a value of 1 times 1 = 1. Hence, the maximum value is 6. In the second test case, the list is [4, 4, 4, 1]. The element 4 has a frequency of 3, producing a value of 4 times 3 = 12. The element 1 has a frequency of 1, producing a value of 1 times 1 = 1. Hence, the maximum value is 12.","solution":"def max_value_by_frequency(T, test_cases): Given a number of test cases, and for each test case a list of integers, this function calculates the maximum value obtained by multiplying a number with its frequency in the list. Parameters: - T: Number of test cases (integer) - test_cases: List of tuples, where each tuple contains: - An integer N (number of elements in the list) - A list of N integers Returns: A list of integers, where each integer is the maximum value obtained for the corresponding test case. results = [] for N, arr in test_cases: frequency = {} for num in arr: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 max_value = max(num * freq for num, freq in frequency.items()) results.append(max_value) return results"},{"question":"You are given a maze represented by a 2D grid of characters, where each character can be one of these: - \'.\' (a free space) - \'#\' (a wall) - \'S\' (the start point) - \'E\' (the endpoint) You need to determine the shortest path from \'S\' to \'E\' in the maze, moving only horizontally or vertically through free spaces (\'.\'). If there is no path from \'S\' to \'E\', return -1. Write a function to solve the problem. The function should return the length of the shortest path or -1 if no such path exists. Input Format The first line contains the integer T, the number of test cases. The first line of each test case contains two integers m and n (the number of rows and columns in the grid, respectively). The next m lines contain n characters each, representing a row of the maze. Constraints 1 le T le 10 2 le m le 100 2 le n le 100 There will always be exactly one \'S\' and one \'E\' in the maze. Output Format For each test case, print the length of the shortest path from \'S\' to \'E\' on a new line, or -1 if no path exists. Sample Input ``` 2 5 5 S.... .#. ..#.. .#... ...E. 5 5 S.#.. .#.#. .#. ...#. #.E ``` Sample Output ``` 7 -1 ``` Explanation Test Case 0: The shortest path from \'S\' to \'E\' is as follows: ``` S.... +#. ++#.. .#++ ...E+ ``` The path length is 7. Test Case 1: There is no path from \'S\' to \'E\', so the output is -1.","solution":"from collections import deque def find_shortest_path(maze): def bfs(start, end, maze, m, n): queue = deque([start]) visited = set() visited.add(start) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == end: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and maze[nx][ny] != \'#\' and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) steps += 1 return -1 # Find the positions of \'S\' and \'E\' start, end = None, None m = len(maze) n = len(maze[0]) for i in range(m): for j in range(n): if maze[i][j] == \'S\': start = (i, j) elif maze[i][j] == \'E\': end = (i, j) return bfs(start, end, maze, m, n) def solve_mazes(T, test_cases): results = [] for maze in test_cases: results.append(find_shortest_path(maze)) return results"},{"question":"In the kingdom of Arnia, the harvest season is in full swing, and farmers are gathering bags of magical beans. Each bag contains a certain number of beans, and the King wants to make sure that the beans are distributed evenly across all the farmers in such a way that each farmer ends up with an equal number of beans after some magical operations. Initially, there are N bags, each containing B[i] magical beans. In each operation, the King can choose any two bags with a different number of beans and swap the numbers of beans between these two bags. For example, if one bag has 3 beans and another has 7 beans, after the operation, the bag that had 3 beans will now contain 7 beans, and the one that had 7 beans will now contain 3 beans. The process continues until no more swaps can make the distribution any more equal. If it is impossible to make the distribution equal after any number of operations, the King must know the closest possible equal distribution that can be achieved. Given T test cases, each with N bags, determine the final number of beans each farmer ends up with, or the closest possible equal distribution if perfect equality is not achievable. Input The first line of input contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains a single integer N, the number of bags. - The second line contains N space-separated integers B[i], the number of beans in each bag. Output For each test case, output a single integer - the final number of beans each bag has, or the closest possible equal distribution if perfect equality is not achievable. Constraints 1 ≤ T ≤ 200 1 ≤ N ≤ 1000 0 ≤ B[i] ≤ 10^6 SAMPLE INPUT 2 4 6 12 15 3 3 5 9 2 SAMPLE OUTPUT 9 5 Explanation Case 1: (6, 15) are picked -> 15 replaced by 6 -> new configuration 6 12 6 3 (12, 3) are picked -> 12 replaced by 3 -> new configuration 6 3 6 9 (6, 9) are picked -> 9 replaced by 6 -> new configuration 6 3 6 6 (6, 3) are picked -> 6 replaced by 3 -> new configuration 3 3 6 6 (6, 3) are picked -> 6 replaced by 3 -> new configuration 3 3 3 6 The closest possible equal distribution is 3. Case 2: (5, 9) are picked -> 9 replaced by 5 -> new configuration 5 2 5 (5, 2) are picked -> 5 replaced by 2 -> new configuration 2 2 5 (5, 2) are picked -> 2 replaced by 5 -> new configuration 2 2 2 The closest possible equal distribution is 5.","solution":"def closest_equal_distribution(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] B = test_cases[i][1] total_beans = sum(B) avg_beans = total_beans // N # We can only get the closest distribution possible, which is the average beans (integer part) results.append(avg_beans) return results"},{"question":"You are managing an online store, and you want to analyze the reviews for different products to find the most or least reviewed product within a specific timespan. You have a list of reviews, each review records the product identifier, the date of the review, and the review text. Write a function that receives the list of reviews, the starting date, and the ending date, and returns the product identifier with the highest number of reviews within that given date range. In case of a tie, return the product identifier that comes first lexicographically. Function Signature: ```python def most_reviewed_product(reviews: List[Tuple[str, str, str]], start_date: str, end_date: str) -> str: ``` # Inputs - `reviews`: A list of tuples, where each tuple contains: - `product_id` (a string): the identifier of the product. - `review_date` (a string): the date of the review formatted as \\"YYYY-MM-DD\\". - `review_text` (a string): the review text. - `start_date` (a string): the starting date formatted as \\"YYYY-MM-DD\\". - `end_date` (a string): the ending date formatted as \\"YYYY-MM-DD\\". # Output - A string representing the identifier of the product with the highest number of reviews within the given date range. # Constraints - All dates in `reviews`, `start_date`, and `end_date` will be valid dates. - The date range specified by `start_date` and `end_date` is inclusive. - There will always be at least one review within the given date range. # Examples ```python reviews = [ (\\"product1\\", \\"2023-01-01\\", \\"Good product\\"), (\\"product2\\", \\"2023-02-01\\", \\"Not bad\\"), (\\"product1\\", \\"2023-02-10\\", \\"Excellent!\\"), (\\"product2\\", \\"2023-01-15\\", \\"Could be better\\"), (\\"product3\\", \\"2023-02-20\\", \\"Loved it!\\"), (\\"product1\\", \\"2023-03-01\\", \\"Highly recommend\\") ] start_date = \\"2023-01-01\\" end_date = \\"2023-02-28\\" assert most_reviewed_product(reviews, start_date, end_date) == \\"product1\\" ```","solution":"from typing import List, Tuple from collections import defaultdict from datetime import datetime def most_reviewed_product(reviews: List[Tuple[str, str, str]], start_date: str, end_date: str) -> str: Returns the product identifier with the highest number of reviews within the given date range. # Convert dates from string to datetime objects for comparison start_date = datetime.strptime(start_date, \\"%Y-%m-%d\\") end_date = datetime.strptime(end_date, \\"%Y-%m-%d\\") # Dictionary to count reviews for each product id review_count = defaultdict(int) for product_id, review_date, _ in reviews: review_date = datetime.strptime(review_date, \\"%Y-%m-%d\\") if start_date <= review_date <= end_date: review_count[product_id] += 1 # Find the product with the maximum number of reviews most_reviews = -1 result = \\"\\" for product_id, count in review_count.items(): if count > most_reviews or (count == most_reviews and product_id < result): most_reviews = count result = product_id return result"},{"question":"Given an array of integers, rotate the array to the right by `k` steps, where `k` is a non-negative integer. Constraints * The length of the array n is between 1 and 10^4. * The value of `k` is between 0 and 10^4. * All elements of the array are between -10^5 and 10^5. Input Input is given from Standard Input in the following format: n k a[1] a[2] ... a[n] (Output/Returns) Return the array after rotating it to the right by `k` steps, or print on the standard output. Example Input 7 3 1 2 3 4 5 6 7 Output 5 6 7 1 2 3 4 Input 5 6 -1 -100 3 99 0 Output 0 -1 -100 3 99 Note In the first example, the array `[1, 2, 3, 4, 5, 6, 7]` is rotated to the right by 3 steps, resulting in `[5, 6, 7, 1, 2, 3, 4]`. In the second example, the array `[-1, -100, 3, 99, 0]` is rotated to the right by 6 steps, where 6 mod 5 (length of the array) is 1, resulting in `[0, -1, -100, 3, 99]`.","solution":"def rotate_array(nums, k): Rotates the array to the right by k steps. Args: nums: List of integers. k: Non-negative integer representing number of steps to rotate. Returns: The rotated list of integers. n = len(nums) k = k % n # To handle cases where k >= n return nums[-k:] + nums[:-k] # Example usage: # This part can be removed or commented out when running tests to avoid output during import if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) nums = list(map(int, data[2:])) result = rotate_array(nums, k) print(\\" \\".join(map(str, result)))"},{"question":"Given a string S consisting of lowercase alphabets and an integer N, your task is to find the N-th most frequent character in the string. If two characters have the same frequency, the lexicographically smaller character is considered greater. If there is no N-th frequent character, return an empty string. Example 1: Input: S = \\"aabbcc\\", N = 2 Output: \\"a\\" Explanation: Characters frequency - a: 2, b: 2, c: 2 The 1st most frequent character is \'a\', next is \'b\' (lexicographically smaller than \'c\'). Example 2: Input: S = \\"hello\\", N = 3 Output: \\"e\\" Explanation: Characters frequency - h: 1, e: 1, l: 2, o: 1 The 1st most frequent character is \'l\', the 2nd is \'e\', and the 3rd is \'h\', so output is \'e\'. Example 3: Input: S = \\"abcde\\", N = 5 Output: \\"e\\" Explanation: Characters frequency - a: 1, b: 1, c: 1, d: 1, e: 1 The 1st most frequent character is \'a\', 2nd is \'b\', 3rd is \'c\', 4th is \'d\', and 5th is \'e\'. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function nthMostFrequentChar() that takes a string (S) and an integer (N) and returns the N-th most frequent character in the string. The driver code takes care of the printing. Expected Time Complexity: O(N + M*LOG(M)) where M is the unique number of characters in the string. Expected Auxiliary Space: O(M). Constraints: 1 ≤ |S| ≤ 10^5 1 ≤ N ≤ 26","solution":"from collections import Counter def nthMostFrequentChar(S, N): Returns the N-th most frequent character in the string S. If two characters have the same frequency, the lexicographically smaller character is considered greater. if not S or N <= 0: return \\"\\" # Count the frequency of each character freq = Counter(S) # Create a sorted list of (frequency, character) pairs freq_list = sorted(freq.items(), key=lambda x: (-x[1], x[0])) # If N is larger than the number of unique characters, return an empty string if N > len(freq_list): return \\"\\" # Return the N-th most frequent character return freq_list[N-1][0]"},{"question":"Input The first line contains T, the number of test cases. Next T lines each contain a string, possibly containing non-alphanumeric characters (but not spaces). Output For each test case, output \\"YES\\" if the string is a palindrome when non-alphanumeric characters are ignored, otherwise output \\"NO\\". Constraints: 1 <= T <= 10 1 <= Length of the string <= 100 Example Input: 3 A man, a plan, a canal: Panama race a car No \'x\' in Nixon Output: YES NO YES","solution":"def is_palindrome(s): Returns \\"YES\\" if the string s is a palindrome when non-alphanumeric characters are ignored, otherwise \\"NO\\". # Keep only alphanumeric characters and convert to lowercase filtered_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if filtered string is a palindrome return \\"YES\\" if filtered_s == filtered_s[::-1] else \\"NO\\" def palindrome_test_cases(T, cases): Processes T test cases of strings to check if they are palindromes when non-alphanumeric characters are ignored. results = [] for case in cases: results.append(is_palindrome(case)) return results"},{"question":"Arjun is a logistics manager at a warehouse. He needs to efficiently pack products into crates for shipment. Each crate can hold a maximum weight and Arjun has several products, each with a specific weight. Products can only be packed into a crate if the total weight does not exceed the crate\'s maximum capacity. Arjun aims to use the fewest number of crates possible and needs your help to achieve this. Given a list of product weights and a maximum crate capacity, write a program to determine the minimum number of crates needed to pack all the products. Example Input: 7 6 5 10 7 3 2 8 10 Example Output: 5","solution":"def min_crates(weights, max_capacity): Determines the minimum number of crates needed to pack all the products given their weights and the maximum crate capacity. :param weights: List of product weights. :param max_capacity: Maximum capacity of a single crate. :return: Minimum number of crates required. weights.sort(reverse=True) crates = [] for weight in weights: placed = False for crate in crates: if sum(crate) + weight <= max_capacity: crate.append(weight) placed = True break if not placed: crates.append([weight]) return len(crates)"},{"question":"A traffic monitoring system is required to keep track of the number of vehicles passing through a particular road segment. The system works by considering each vehicle passing through the road segment at a specific timestamp. Given the continuous stream of data, you need to develop a function that can query the number of vehicles passing through during a given time range. Write a function that processes two types of inputs: 1. **Record a vehicle passing**: This input consists of a timestamp when a vehicle passes through. 2. **Query number of vehicles**: This input consists of a start time and an end time for the range within which we need to count the number of vehicles that passed through. Input The first line contains an integer `q` (1 ≤ q ≤ 105), the number of queries. The following q lines describe the queries in the following format: - If it is a vehicle record, the format will be: \\"R T\\", where `R` is a character standing for \'Record\', and `T` (1 ≤ T ≤ 109) is the timestamp. - If it is a query for the number of vehicles, the format will be: \\"Q S E\\", where `Q` is a character standing for \'Query\', and `S` (1 ≤ S ≤ 109) is the start time, and `E` (1 ≤ E ≤ 109) is the end time such that `S ≤ E`. Output For each query of the second type (Query), output the number of vehicles passing through within the given range [S, E]. Example Input 6 R 5 R 10 R 15 Q 1 10 Q 10 15 Q 5 20 Output 2 2 3 In this scenario: - Three vehicles pass through at times 5, 10, and 15. - The first query asks for vehicles between times 1 and 10, capturing the first two records. - The second query asks for vehicles between times 10 and 15, capturing the second and third records. - The third query asks for vehicles between times 5 and 20, capturing all three records.","solution":"def traffic_monitoring_system(queries): vehicle_timestamps = [] results = [] for query in queries: parts = query.split() if parts[0] == \\"R\\": vehicle_timestamps.append(int(parts[1])) elif parts[0] == \\"Q\\": S, E = int(parts[1]), int(parts[2]) count = sum(1 for t in vehicle_timestamps if S <= t <= E) results.append(count) return results"},{"question":"In a mystical town, there exists a magical garden with ***m*** willow trees, each grown for exactly ***n*** days. On each day, every tree grows a certain height based on its unique growth factor. The garden has an intriguing property - two trees cannot have the same height on the same day. The town\'s oracle keeps the records of the height growth patterns of each tree in a ledger. To predict future growth and ensure no two trees reach the same height, you have been tasked with analyzing the ledger. Given the height growth patterns of the trees over the past ***n*** days, determine the minimal distinct heights reached by each tree without any conflict. If it\'s impossible to predict such heights, your program should state so. # Input - The first line contains two integers ***m*** (1 ≤ ***m*** ≤ 100) and ***n*** (1 ≤ ***n*** ≤ 100) – the number of trees and the number of days the trees have grown. - The following ***m*** lines each contain ***n*** integers, where each line denotes the heights recorded for a specific tree over the ***n*** days. # Output - If it\'s possible to correctly predict heights without conflict, print a distinct minimal integer for each day (total ***n*** integers) such that every tree\'s predicted height on any day will be uniquely identifiable. - If such an arrangement is impossible, print \\"IMPOSSIBLE\\". # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 1 2 3 ``` Input ``` 3 3 1 2 3 3 2 1 2 3 1 ``` Output ``` IMPOSSIBLE ``` # Explanation In the first example, the trees\' heights are naturally distinct for each day, so predicting the minimal distinct heights to prevent conflicts is straightforward. In the second example, it is impossible to find such a prediction due to the overlapping of heights. This question tests your abilities to work with arrays, nested loops, and understand sorting and uniqueness conditions within a specified scope.","solution":"def predict_heights(m, n, heights): Determines the minimal distinct heights reached by each tree without any conflict, if possible. :param m: Number of trees :param n: Number of days :param heights: List of lists, where each inner list contains the heights of a specific tree over n days :return: A list of n integers representing the predicted heights for each day, or \\"IMPOSSIBLE\\" if not feasible # Step 1: Transpose the height matrix to analyze day-wise heights day_wise = [[] for _ in range(n)] for i in range(m): for j in range(n): day_wise[j].append(heights[i][j]) # Step 2: Sort each day\'s heights and check for uniqueness predicted_heights = [] for heights_on_day in day_wise: heights_on_day.sort() for i in range(1, len(heights_on_day)): if heights_on_day[i] == heights_on_day[i - 1]: return \\"IMPOSSIBLE\\" predicted_heights.append(heights_on_day[0]) return predicted_heights"},{"question":"Given an integer array \\"arr\\", return the length of the longest increasing subsequence. Example 1: Input: arr = [10, 9, 2, 5, 3, 7, 101, 18] Output: 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101], therefore its length is 4. Example 2: Input: arr = [0, 1, 0, 3, 2, 3] Output: 4 Explanation: The longest increasing subsequence is [0, 1, 2, 3], therefore its length is 4. Example 3: Input: arr = [7, 7, 7, 7, 7, 7, 7] Output: 1 Explanation: The longest increasing subsequence is [7], therefore its length is 1. Your Task: This is a function problem. You only need to complete the function \\"lengthOfLIS()\\" that takes an array as a parameter and returns an integer representing the length of the longest increasing subsequence. The printing is done automatically by the driver code. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(n) Constraints: 1 ≤ |arr| ≤ 2500 -10^4 ≤ arr[i] ≤ 10^4","solution":"def lengthOfLIS(arr): if not arr: return 0 n = len(arr) dp = [1] * n for i in range(n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Design an efficient algorithm to parse a large log file and identify the top N users who have the highest sum of transaction values. Each line in the log file represents a single transaction recorded with a user ID and a transaction value separated by a comma. Input A sequence of logs each in the format: ``` userID,transactionValue ``` The end of the logs is indicated by a blank line. The number of distinct users can be up to 10,000. Output Output the top N user IDs with the highest total transaction values in descending order of transaction values. If two users have the same total transaction value, they can be in any order relative to each other. Example Input ``` 123,100 34,200 56,150 34,120 123,130 56,180 ``` N = 2 Output ``` 56 123 ```","solution":"from collections import defaultdict import heapq def top_n_users(logs, N): This function takes a list of log entries and an integer N, and returns the top N user IDs with the highest total transaction values. user_transactions = defaultdict(int) # Process each log entry to accumulate transaction values for each user for log in logs: if log: user_id, transaction_value = log.split(\',\') user_id = int(user_id) transaction_value = int(transaction_value) user_transactions[user_id] += transaction_value # Use a heap to find the top N users with highest total transaction values top_users = heapq.nlargest(N, user_transactions.items(), key=lambda x: x[1]) # Return only the user IDs in the proper order return [user_id for user_id, _ in top_users]"},{"question":"Given an array of length n, arr = [a1, a2, ..., an] and m operations. Each operation performs one of the following tasks on the array: * Update x y: Update the array element at index x to y. * Query l r: Return the sum of the elements between indices l and r (inclusive). Constraints: * 1 ≤ n ≤ 3 x 10^5 * 1 ≤ m ≤ 3 x 10^5 * 1 ≤ arr[i] ≤ 10^9 * 1 ≤ x, l, r ≤ n * 1 ≤ y ≤ 10^9 Input: Input is given in the following format: > n m > arr1 arr2 ... arrn > operation1 > operation2 > ... > operationm Output: Output the results of the query operations, each on a new line. Examples: Input: 5 3 1 2 3 4 5 Query 1 3 Update 2 10 Query 1 3 Output: 6 14 Input: 4 4 5 8 6 3 Update 1 7 Query 2 4 Update 4 9 Query 1 4 Output: 17 30","solution":"class ArrayManipulator: def __init__(self, arr): self.arr = arr def update(self, x, y): self.arr[x - 1] = y def query(self, l, r): return sum(self.arr[l - 1:r]) def process_operations(n, array, operations): manipulator = ArrayManipulator(array) results = [] for operation in operations: op_type = operation[0] if op_type == \\"Update\\": _, x, y = operation manipulator.update(int(x), int(y)) elif op_type == \\"Query\\": _, l, r = operation results.append(manipulator.query(int(l), int(r))) return results"},{"question":"You are given an array a_1, a_2, ldots, a_n consisting of integers, and an integer m. Define the operation \\"split\\" as follows: 1. Select any contiguous subarray a[l], a[l+1], ldots, a[r]. 2. Split array a into two subarrays such that the elements of one subarray are strictly less than m, and the elements of the other subarray are greater than or equal to m. 3. If either resulting subarray is empty, discard the empty subarray. Determine whether it is possible to make the entire array a consist of elements strictly less than m by a finite number of split operations. -----Input----- The input consists of multiple test cases. The first line contains the number of test cases t (1 leq t leq 10000). The first line of each test case contains two integers n (1 leq n leq 200000) and m (1 leq m leq 10^9) — the length of the array and the integer m. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 200000. -----Output----- For each test case, print \\"YES\\" if it\'s possible to make all elements of the array strictly less than m using the \\"split\\" operation. Otherwise, print \\"NO\\". -----Examples----- Input 5 4 10 3 9 12 15 3 5 6 6 6 6 7 1 8 5 3 9 2 2 1 1 2 5 6 5 5 5 5 5 Output YES NO YES NO YES -----Note----- In the first example: - We can start by splitting [12, 15] off from the rest of the array, since both these numbers are not strictly less than m = 10. - Next, perform a split on [3, 9]. Both elements are strictly less than 10, thus making the array valid. In the second example: - Any split operation keeps all numbers >= 5 in one subarray and results in splitting off empty subarrays with elements < 5. Therefore, it\'s impossible to make all elements less than 5. In the third example: - We can split [8], [9] which are greater than 7 subsequently, leaving us with a subarray [1, 5, 3, 2]. All elements are less than 7. In the fourth example: - One of the elements itself is greater than or equal to 1, so the array already violates the condition. In the fifth example: - We can split [5, 5, 5, 5, 5], resulting in subarrays where one is empty and the remaining subarray comprises elements always less than 6.","solution":"def can_make_all_elements_less_than_m(n, m, array): Determine if it is possible to make all elements of the array strictly less than m using the defined \\"split\\" operation. for i in range(n): if array[i] < m: return \\"YES\\" return \\"NO\\" def process_test_cases(test_cases): results = [] for case in test_cases: n, m, array = case results.append(can_make_all_elements_less_than_m(n, m, array)) return results"},{"question":"-----Input----- The input contains a single string s which consists of lowercase letters only (1 ≤ |s| ≤ 100). -----Output----- Output \\"PALINDROME\\" or \\"NOT PALINDROME\\". -----Examples----- Input racecar Output PALINDROME Input hello Output NOT PALINDROME Input abba Output PALINDROME Input coding Output NOT PALINDROME","solution":"def check_palindrome(s): Checks if the input string s is a palindrome. Returns \\"PALINDROME\\" if it is, otherwise \\"NOT PALINDROME\\". if s == s[::-1]: return \\"PALINDROME\\" else: return \\"NOT PALINDROME\\""},{"question":"You are given a string ( s ) consisting of lowercase Latin letters. You want to perform the following operation on ( s ): select any two adjacent characters in ( s ) and replace them with a single character that is lexicographically smallest. Your task is to determine the length of the shortest possible string you can achieve by performing the above operation any number of times (including zero times). Note: A character ( x ) is lexicographically smaller than a character ( y ) if ( x ) comes before ( y ) in the alphabet. -----Input----- The first line contains one integer ( t ) (( 1 le t le 10^4 )) — the number of test cases. Then, ( t ) lines follow. The ( i )-th of them contains one string ( s ) (( 1 le |s| le 1000 )) — the description of the ( i )-th test case. -----Output----- For each test case, print one integer — the length of the shortest possible string you can achieve. -----Examples----- Input 4 abrac abba abc zyx Output 1 1 1 1 -----Note----- In the first test case, the string can be transformed as follows: \\"abrac\\" -> \\"ara\\" -> \\"r\\". The length of the shortest possible string is 1. For the other strings, repeatedly combining adjacent characters will always result in a single character at the end.","solution":"def shortest_legal_string_length(t, test_cases): Determine the length of the shortest possible string after performing the described operation any number of times on each test case string. Args: t (int): The number of test cases. test_cases (list of str): The strings for each test case. Returns: list of int: The length of the shortest possible strings for each test case. # Since no matter how we reduce the string, we can always reduce it to a single character, # the length of the shortest possible string will always be 1. return [1] * t"},{"question":"In natural language processing, tokens are words, punctuation, numbers, etc., that have been separated from a text. A token may appear multiple times in a text, and a token\'s appearance frequency is the count of how many times it appears in the text. Given a list of tokens, find the token with the highest frequency. If multiple tokens have the highest frequency, return the one that comes first lexicographically. -----Input----- The input consists of a single line containing a list of tokens separated by spaces. Each token is a string containing at least 1 and at most 100 lowercase English letters. There will be at least one token and at most 10^5 tokens in the input. -----Output----- Output the token with the highest frequency. If multiple tokens have the highest frequency, output the one that comes first lexicographically. -----Examples----- Sample Input: apple banana apple strawberry banana apple orange Sample Output: apple","solution":"def most_frequent_token(tokens): Returns the token with the highest frequency. If multiple tokens have the highest frequency, the one that comes first lexicographically is returned. Parameters: tokens (str): A string containing tokens separated by spaces. Returns: str: The token with the highest frequency. from collections import Counter # Split the input string into a list of tokens token_list = tokens.split() # Create a Counter object to count the frequency of each token token_count = Counter(token_list) # Find the highest frequency max_frequency = max(token_count.values()) # Extract tokens that have the highest frequency and sort them lexicographically most_frequent_tokens = [token for token, count in token_count.items() if count == max_frequency] most_frequent_tokens.sort() return most_frequent_tokens[0]"},{"question":"Problem Ana is working on a robotic vacuum cleaner algorithm to optimize its cleaning pattern. The vacuum cleaner moves in a 2D grid with cells marked as cleanable or obstructed. The vacuum starts from a given position (sx, sy) and can move to any of the 4 adjacent cells (up, down, left, right) if those cells are cleanable. However, some cells are marked as obstacles and can\'t be cleaned or traversed. Ana wants to ensure the vacuum covers all cleanable cells in the minimum amount of moves. She needs a function to calculate the total number of cells that can be cleaned by the vacuum cleaner from its starting position. Constraints: * 1 ≤ n, m ≤ 1000 * 0 ≤ k ≤ min(n × m - 1, 1000) * 0 ≤ sx, sy < n * 0 ≤ xi < n * 0 ≤ yi < m * Cell (xi, yi) ≠ (sx, sy) * Cell (xi, yi) ≠ (n-1, m-1) Input ``` n m k sx sy x1 y1 ... xk yk ``` The first line contains two integers n and m representing the number of rows and columns of the grid. The second line contains two integers sx and sy representing the starting position of the vacuum. The next k lines each contain two integers xi and yi representing the positions of obstacles. Output Output a single integer indicating the number of cleanable cells. Examples Input ``` 5 5 2 0 0 1 2 3 3 ``` Output 23 Input ``` 3 3 1 1 1 1 0 ``` Output 8 Input ``` 4 4 0 0 0 ``` Output 16","solution":"from collections import deque def cleanable_cells(n, m, k, sx, sy, obstacles): def in_bounds(x, y): return 0 <= x < n and 0 <= y < m def bfs(sx, sy): queue = deque([(sx, sy)]) visited.add((sx, sy)) count = 1 while queue: x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if in_bounds(nx, ny) and (nx, ny) not in visited and (nx, ny) not in obstacles: visited.add((nx, ny)) queue.append((nx, ny)) count += 1 return count obstacles = set(obstacles) visited = set() return bfs(sx, sy)"},{"question":"You are given an array of integers. Your task is to determine the smallest possible positive integer that cannot be represented as the sum of a subset of the given array. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 10^3) — the number of the test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 10^5) — the size of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- For each test case, print a single integer: the smallest possible positive integer that cannot be represented as the sum of a subset of the given array. -----Examples----- Input 3 5 1 1 1 1 1 3 2 3 7 4 1 2 3 10 Output 6 1 7 -----Note----- Test case 1: Any integer 1 through 5 can be represented as the sum of a subset of the array, but 6 cannot be. Test case 2: You cannot form 1 using any subset of the given elements. Test case 3: Any integer 1 through 6 can be formed, but 7 cannot be formed using any subset.","solution":"def smallest_missing_sum(t, test_cases): result = [] for i in range(t): n, arr = test_cases[i] arr.sort() # Initialize the smallest_missing_sum to 1 smallest_missing_sum = 1 for num in arr: if num > smallest_missing_sum: break smallest_missing_sum += num result.append(smallest_missing_sum) return result"},{"question":"Your friend recently joined a gym and decided to keep track of the calories burned each day for a week. She aims to burn at least 500 calories a day to stay fit. Given the number of calories burned each day over 7 days as C_{1}, C_{2}, ..., C_{7}, output the number of days on which she met her target. ------ Input Format ------ There is a single line of input, with 7 integers C_{1}, C_{2}, C_{3}, C_{4}, C_{5}, C_{6}, and C_{7}. These are the calories burned by your friend on each of the 7 days. ------ Output Format ------ Output a single integer in a single line - the number of days on which she burned at least 500 calories. ------ Constraints ------ 0 ≤ C_{1}, C_{2}, C_{3}, C_{4}, C_{5}, C_{6}, C_{7} ≤ 2000 ----- Sample Input 1 ------ 600 700 420 800 500 200 450 ----- Sample Output 1 ------ 4 ----- explanation 1 ------ Your friend burned at least 500 calories on the first, second, fourth, and fifth days. Hence, the number of days on which she met her target is 4. ----- Sample Input 2 ------ 300 400 250 450 100 200 50 ----- Sample Output 2 ------ 0 ----- explanation 2 ------ Your friend didn\'t burn at least 500 calories on any day. Hence, the number of days on which she met her target is 0. ----- Sample Input 3 ------ 1000 1500 500 500 600 700 800 ----- Sample Output 3 ------ 7 ----- explanation 3 ------ Your friend burned at least 500 calories on all days. Hence, the number of days on which she met her target is 7. ----- Sample Input 4 ------ 450 480 499 550 450 480 499 ----- Sample Output 4 ------ 1 ----- explanation 4 ------ Your friend burned at least 500 calories on the fourth day only. Hence, the number of days on which she met her target is 1.","solution":"def count_days_meeting_target(calories): Given a list of 7 integers representing calories burned each day for a week, return the number of days on which at least 500 calories were burned. Args: calories (list): A list of 7 integers where each integer represents calories burned on a particular day of the week. Returns: int: The number of days with at least 500 calories burned. return sum(cal >= 500 for cal in calories)"},{"question":"Given a set of tasks with dependencies, we need to determine the order in which to perform the tasks. Each task can only be performed if all of its dependencies have been completed. Input The first line contains two space-separated integers n (1 ≤ n ≤ 100,000) and m (0 ≤ m ≤ 200,000), where n is the number of tasks and m is the number of dependencies between tasks. The next m lines contain two space-separated integers u and v (1 ≤ u, v ≤ n), which indicates that task u must be completed before task v. Output Output any valid ordering of the tasks such that for each dependency (u, v), task u comes before task v. If no valid ordering exists, output a single line containing \\"IMPOSSIBLE\\". Examples Input 5 4 1 2 2 3 3 4 5 3 Output 1 2 5 3 4 Input 3 3 1 2 2 3 3 1 Output IMPOSSIBLE Explanation In the first example, one possible order of tasks that respects all dependencies is 1, 2, 5, 3, 4. There are other possible valid orderings too. In the second example, it\'s impossible to find a valid ordering due to the cyclic dependencies among tasks. Thus, the output is \\"IMPOSSIBLE\\".","solution":"from collections import defaultdict, deque def find_task_order(n, m, dependencies): Returns a valid ordering of tasks given the dependencies or \\"IMPOSSIBLE\\" if no such ordering exists. indegree = [0] * (n + 1) graph = defaultdict(list) for u, v in dependencies: graph[u].append(v) indegree[v] += 1 queue = deque() for i in range(1, n + 1): if indegree[i] == 0: queue.append(i) task_order = [] while queue: current = queue.popleft() task_order.append(current) for neighbour in graph[current]: indegree[neighbour] -= 1 if indegree[neighbour] == 0: queue.append(neighbour) if len(task_order) == n: return task_order else: return \\"IMPOSSIBLE\\" # Helper function to parse input def parse_input(input_string): lines = input_string.strip().split(\\"n\\") n, m = map(int, lines[0].split()) dependencies = [tuple(map(int, line.split())) for line in lines[1:]] return n, m, dependencies # Example usage input_string1 = \\"5 4n1 2n2 3n3 4n5 3\\" n1, m1, dependencies1 = parse_input(input_string1) print(find_task_order(n1, m1, dependencies1)) # Should print a valid order or \\"IMPOSSIBLE\\" input_string2 = \\"3 3n1 2n2 3n3 1\\" n2, m2, dependencies2 = parse_input(input_string2) print(find_task_order(n2, m2, dependencies2)) # Should print \\"IMPOSSIBLE\\""},{"question":"Alice and Bob love hiding treasure and finding it. They want to create a hidden message by embedding a sequence of numbers into a larger grid of random numbers. However, they have a special condition: their sequence should appear in the grid as a contiguous subsequence either horizontally, vertically, or diagonally. Your job is to help Alice and Bob find out if their sequence of numbers exists in the random grid following the rules mentioned above. Input Format The first line contains a pair of space-separated integers, N and M, which represent the dimensions of the grid (N rows and M columns). The next N lines each contain M space-separated integers, representing the grid. The following line contains an integer L (the length of the sequence), followed by L space-separated integers representing the sequence to be found. Constraints 1 leq N, M leq 500 Each element in the grid is an integer between 1 and 1000. 1 leq L leq min(N, M) The sequence contains integers each between 1 and 1000. Output Format Print \\"YES\\" if the sequence exists in the grid according to the rules, and \\"NO\\" otherwise. Sample Input 5 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 4 7 8 9 10 Sample Output YES Explanation In the given grid, the sequence 7 8 9 10 appears as a contiguous subsequence in the second row, so the output is \\"YES\\". If no such subsequence existed, the output would be \\"NO\\".","solution":"def find_sequence_in_grid(grid, seq): Determines if the sequence appears in the grid as contiguous horizontally, vertically, or diagonally. Parameters: grid (List[List[int]]): The 2D list representing the grid. seq (List[int]): The sequence to be found in the grid. Returns: str: \\"YES\\" if the sequence is found, \\"NO\\" otherwise. N = len(grid) M = len(grid[0]) L = len(seq) def check_direction(x, y, dx, dy): for k in range(L): if not (0 <= x + k*dx < N and 0 <= y + k*dy < M) or grid[x + k*dx][y + k*dy] != seq[k]: return False return True for i in range(N): for j in range(M): if (check_direction(i, j, 1, 0) or # Vertical check_direction(i, j, 0, 1) or # Horizontal check_direction(i, j, 1, 1) or # Diagonal down-right check_direction(i, j, 1, -1)): # Diagonal down-left return \\"YES\\" return \\"NO\\""},{"question":"Given a matrix, your task is to rotate the matrix elements in a clockwise direction by one step. The rotation step involves moving the elements from the outermost layer inward and simultaneously shifting each element from the top, right, bottom, and left rows by one position in the clockwise direction. For example, to rotate the elements in a 3x3 matrix: ``` 1 2 3 4 5 6 7 8 9 ``` would result in: ``` 4 1 2 7 5 3 8 9 6 ``` -----Input----- The first line contains two integers, m and n, (1 leq m, n leq 100), representing the number of rows and columns in the matrix, respectively. The next m lines each contain n integers representing the elements of the matrix. -----Output----- The output should be an m x n matrix with the elements rotated in a clockwise direction by one step. -----Examples----- Sample Input: 3 3 1 2 3 4 5 6 7 8 9 Sample Output: 4 1 2 7 5 3 8 9 6 Sample Input: 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Sample Output: 5 1 2 3 9 10 6 4 13 11 7 8 14 15 16 12","solution":"def rotate_matrix_clockwise(matrix, m, n): if m == 0 or n == 0: return matrix # Initialize pointers start, end = 0, 0 while start < m // 2 and end < n // 2: prev = matrix[start + 1][end] # Top row (left to right) for i in range(end, n - end): curr = matrix[start][i] matrix[start][i] = prev prev = curr # Right column (top to bottom) for i in range(start + 1, m - start): curr = matrix[i][n - end - 1] matrix[i][n - end - 1] = prev prev = curr # Bottom row (right to left) for i in range(n - end - 2, end - 1, -1): curr = matrix[m - start - 1][i] matrix[m - start - 1][i] = prev prev = curr # Left column (bottom to top) for i in range(m - start - 2, start, -1): curr = matrix[i][end] matrix[i][end] = prev prev = curr start += 1 end += 1 return matrix"},{"question":"A string manipulation software processes only those strings that meet the following criteria: The string must include at least one uppercase letter, one lowercase letter, and one digit. Additionally, every digit in the string must be odd (1, 3, 5, 7, 9). Your task is to write a function that checks if a given string meets these criteria and print \\"Valid\\" if it does, and \\"Invalid\\" if it does not. -----Constraints----- - The input string will contain only alphanumeric characters. - 1 leq |S| leq 100 (where |S| is the length of the string) -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print \\"Valid\\" if the string meets all the specified criteria, otherwise print \\"Invalid\\". -----Sample Input----- aB5sDf -----Sample Output----- Valid - The string contains at least one uppercase letter (\'B\', \'D\'), one lowercase letter (\'a\', \'s\', \'f\'), and one odd digit (\'5\'). - Hence, the output is \\"Valid\\".","solution":"def check_valid_string(s): has_upper = False has_lower = False has_odd_digit = False odd_digits = {\'1\', \'3\', \'5\', \'7\', \'9\'} for char in s: if char.isupper(): has_upper = True elif char.islower(): has_lower = True elif char.isdigit() and char in odd_digits: has_odd_digit = True if has_upper and has_lower and has_odd_digit: print(\\"Valid\\") return print(\\"Invalid\\")"},{"question":"Given an array of integers `nums`, write a function to perform the following operations: 1. Identify all subarrays of `nums`. 2. For each subarray, calculate the sum of its elements. 3. Return the maximum sum among all subarrays. Your task is to implement a function that efficiently computes the maximum sum of any subarray for a given array `nums`. # Input Format - The first line of the input contains an integer `T` - the number of test cases. - Each test case consists of two lines: 1. The first line contains an integer `n` - the number of elements in the array. 2. The second line contains `n` space-separated integers representing the array `nums`. # Output Format For each test case, print a single integer - the maximum sum of any subarray. # Constraints - 1 le T le 10^3 - 1 le n le 10^5 - The sum of `n` over all test cases does not exceed 10^6. - -10^4 le text{nums[i]} le 10^4 # Example Input ``` 2 5 1 -2 3 4 -1 3 -3 -2 -1 ``` # Example Output ``` 7 -1 ``` # Explanation For the first test case, the subarray with the maximum sum is `[3, 4]` which has a sum of `7`. For the second test case, the subarray with the maximum sum is `[-1]`, which has a sum of `-1`.","solution":"def max_subarray_sum(nums): Function to find the maximum sum of any subarray in a given list of integers. Utilizes Kadane\'s algorithm for efficient computation. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def solve(test_cases): Executes the max_subarray_sum function for a list of test cases. Returns a list of results corresponding to the maximum subarray sum for each test case. results = [] for nums in test_cases: results.append(max_subarray_sum(nums)) return results"},{"question":"You are given a list of `N` numbers representing employees and another list `M` representing their respective department codes. Your task is to group the employees in each department and return the maximum number of employees in any department. Write a function `maxEmployeesInDepartment` that takes two lists, `employees` and `departments`, and returns the maximum number of employees in any department. # Input Format: - First line will contain an integer `T` representing the number of test cases. - For each test case, the first line will contain two integers `N` and `M` where `N` is the number of employees and `M` is the number of departments. - Second line of each test case contains `N` integers representing the employee IDs. - Third line of each test case contains `N` integers representing the department codes corresponding to each employee. # Output Format: - For each test case, output a single integer - the maximum number of employees in any department. # Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N, M ≤ 1000 - Each employee ID and department code is a positive integer. # Sample Input: ```plaintext 2 5 3 101 102 103 104 105 1 2 1 3 1 6 4 201 202 203 204 205 206 2 2 3 3 3 4 ``` # Sample Output: ```plaintext 3 3 ``` # Explanation: Test case 1: Department 1 has employees 101, 103, 105 which is 3 employees in total. Department 2 has 1 employee and Department 3 has 1 employee. Therefore, the maximum number of employees in any department is 3. Test case 2: Department 2 has 2 employees, Department 3 has 3 employees and Department 4 has 1 employee. Therefore, the maximum number of employees in any department is 3. # Function Signature: ```python def maxEmployeesInDepartment(employees: List[int], departments: List[int]) -> int: pass ```","solution":"def maxEmployeesInDepartment(employees, departments): Returns the maximum number of employees in any department. # Creating a dictionary to count the number of employees in each department department_counts = {} for department in departments: if department in department_counts: department_counts[department] += 1 else: department_counts[department] = 1 # Finding the department with the maximum number of employees return max(department_counts.values()) def handleTestCases(T, testCases): results = [] for i in range(T): N, M = testCases[i][\'NM\'] employees = testCases[i][\'employees\'] departments = testCases[i][\'departments\'] results.append(maxEmployeesInDepartment(employees, departments)) return results"},{"question":"A delivery company has a set of drones, each with a specific maximum weight limit it can carry. Given a list of deliveries with their associated weights, your task is to check if it is possible to assign each delivery to a single drone without exceeding the drone\'s weight limit. Your goal is to implement a function `canAllocateDeliveries(drone_limits, deliveries)` to find out if the given drone and delivery weight constraints can be satisfied. # Function Signature ```python def canAllocateDeliveries(drone_limits: List[int], deliveries: List[int]) -> bool: pass ``` # Inputs - `drone_limits`: A list of integers where each integer represents the maximum weight limit of each drone. - `deliveries`: A list of integers where each integer represents the weight of a delivery. # Outputs - Return `True` if it is possible to assign each delivery to exactly one drone such that the weight of the delivery does not exceed the drone\'s weight limit, otherwise return `False`. # Constraints - Both `drone_limits` and `deliveries` will have lengths between `1` and `1000` inclusive. - Each weight in `drone_limits` and `deliveries` will be a positive integer between `1` and `1000` inclusive. # Example ```python # Example 1 drone_limits = [5, 5, 5] deliveries = [2, 3, 4] print(canAllocateDeliveries(drone_limits, deliveries)) # Output: True # Example 2 drone_limits = [2, 2, 2] deliveries = [2, 3, 4] print(canAllocateDeliveries(drone_limits, deliveries)) # Output: False ``` # Explanation For `Example 1`, each drone can carry one of the deliveries without exceeding its weight limit. For `Example 2`, the second and third deliveries exceed the weight limit of any of the available drones, hence, it’s not possible to allocate all deliveries.","solution":"def canAllocateDeliveries(drone_limits, deliveries): Checks if each delivery can be assigned to one of the drones without exceeding the drone\'s weight limit. :param drone_limits: List[int], weights limits for each drone :param deliveries: List[int], weights of each delivery :return: bool, True if all deliveries can be assigned to drones within their limits, otherwise False # Sort both lists: one ascending, one descending drone_limits.sort() deliveries.sort() # Now match the largest delivery with the largest limit drone_index = 0 for delivery in deliveries: # If all drones are considered and none fits this delivery if drone_index >= len(drone_limits) or delivery > drone_limits[drone_index]: return False # Move to the next drone if current drone can accommodate the delivery drone_index += 1 return True"},{"question":"Write a program to simulate a simple traffic light control system at an intersection. The traffic light can be in one of three states: \\"Green\\", \\"Yellow\\", or \\"Red\\". The light changes state based on a timer: it stays \\"Green\\" for 60 seconds, changes to \\"Yellow\\" for 5 seconds, and then to \\"Red\\" for 55 seconds before turning back to \\"Green\\" and restarting the cycle. Your program should take as input the total number of seconds that have passed since the light was last changed to \\"Green\\" and output the current state of the traffic light. # Input The input will consist of a single integer `T` (0 <= T <= 10^8) representing the total number of seconds passed since the light was last changed to \\"Green\\". # Output Output a single string representing the current state of the traffic light (\\"Green\\", \\"Yellow\\", or \\"Red\\"). # Example **Input:** ``` 100 ``` **Output:** ``` Red ``` **Explanation:** - After 100 seconds, the traffic light will have completed one full cycle (60 seconds Green + 5 seconds Yellow + 55 seconds Red) and an additional 100 - 120 = 40 seconds. - In the next cycle, at 40 seconds, the light will be in the middle of the \\"Red\\" state.","solution":"def traffic_light_state(T): Determines the current state of the traffic light based on the number of seconds passed since last changed to Green. Parameters: T (int): The total number of seconds passed since the light was last changed to \\"Green\\". Returns: str: The current state of the traffic light (\\"Green\\", \\"Yellow\\", or \\"Red\\"). cycle_time = 60 + 5 + 55 # Total cycle time is 120 seconds T_mod = T % cycle_time if T_mod < 60: return \\"Green\\" elif T_mod < 60 + 5: return \\"Yellow\\" else: return \\"Red\\""},{"question":"Given an array of integers `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Implement the solution using dynamic programming for optimal performance. Constraints * 1 ≤ nums.length ≤ 100000 * -10000 ≤ nums[i] ≤ 10000 Input n nums The first integer `n` is the number of elements in the array `nums`. The next `n` integers are the elements of the array `nums`. Output Print a single integer, the sum of the contiguous subarray with the largest sum. Examples Input 9 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 5 1 2 3 4 5 Output 15 Input 8 -3 -2 -1 -2 -3 -4 -1 -2 Output -1","solution":"def max_subarray_sum(nums): Function to find the contiguous subarray which has the largest sum. Uses dynamic programming to track the maximum sum ending at each position. n = len(nums) if n == 0: return 0 curr_max = global_max = nums[0] for i in range(1, n): curr_max = max(nums[i], curr_max + nums[i]) if curr_max > global_max: global_max = curr_max return global_max"},{"question":"Write a program that finds the largest rectangle containing only 1s in a given binary matrix and prints its area. Constraints: * 1 leq m, n leq 100 Input: In the first line, two integers m and n, which are the number of rows and columns of the binary matrix, are given. In the following m lines, n integers (either 0 or 1) representing the binary matrix are given separated by space characters. Output: Print the area of the largest rectangle containing only 1s in the matrix. Example: Input: 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output: 6","solution":"def maximalRectangle(matrix): if not matrix: return 0 max_area = 0 dp = [0] * len(matrix[0]) for row in matrix: for i in range(len(row)): dp[i] = dp[i] + 1 if row[i] == \'1\' else 0 stack = [] for i in range(len(dp) + 1): while stack and (i == len(dp) or dp[i] < dp[stack[-1]]): h = dp[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"In a faraway land, the Kingdom of Bitwise is ruled by King Xor. King Xor has a peculiar interest in numbers and likes to represent every number in terms of bitwise operations. Recently, King Xor decided to throw a challenge to his subjects. He will give them a number N and the subjects are required to find two integers A and B such that: 1. A XOR B = N 2. 0 <= A, B <= N 3. A and B should be as large as possible. You, being one of the talented subjects of the Kingdom of Bitwise, need to solve this problem efficiently to win the King\'s favor. Input Format: The first line contains a single integer T, the number of test cases. Each of the next T lines contains a single integer N. Output Format: For each test case, print two integers A and B in a single line, separated by a space. Constraints: 1 ≤ T ≤ 10^4 0 ≤ N ≤ 10^9 SAMPLE INPUT 3 5 8 12 SAMPLE OUTPUT 4 1 7 1 8 4 Explanation: For N = 5, one possible pair (A, B) is (4, 1) because 4 XOR 1 = 5. For N = 8, one possible pair (A, B) is (7, 1) because 7 XOR 1 = 8. For N = 12, one possible pair (A, B) is (8, 4) because 8 XOR 4 = 12. Note: The sample output provided is one of the valid solutions. There could be other pairs that satisfy the given conditions. However, among all valid pairs, A and B should be as large as possible.","solution":"def find_ab(n): Find two integers A and B such that: 1. A XOR B = N 2. 0 <= A, B <= N 3. A and B should be as large as possible. # To maximize A and B, set A to be N-1 and B to be 1 initially. # Check if this satisfies all conditions. if n == 0: return 0, 0 return n - 1, 1 def process_test_cases(test_cases): results = [] for n in test_cases: results.append(find_ab(n)) return results"},{"question":"Alice and Bob are playing a game with a tree. They take turns to delete an edge from the tree. The game starts with Alice and they take turns alternately. The game ends when the tree is reduced to a single vertex (by deleting the last edge). The player unable to make a move loses the game. Alice plays optimally so does Bob. Given the initial configuration of the tree, determine who will win the game. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of vertices in the tree. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), which represent an edge in the tree. Output Output \\"Alice\\" if Alice will win the game; otherwise, output \\"Bob\\". Examples Input 3 1 2 2 3 Output Alice Input 4 1 2 1 3 1 4 Output Bob Input 5 1 2 1 3 2 4 2 5 Output Alice Note In the first example, when the game starts, Alice can delete the edge 1-2, leaving Bob no choice but to delete edge 2-3, which reduces the tree to a single vertex. In the second example, Bob can always mirror Alice\'s moves until only two vertices remain, giving Bob the winning move. In the third example, the tree structure allows Alice to always force Bob into a losing position. # Explanation Alice will always win if the total number of vertices n is odd because she will always be the last one to make a move reducing the tree to a single vertex. Conversely, Bob will win if n is even since he will always be the one to reduce the tree to a single vertex.","solution":"def game_winner(n, edges): Determine the winner of the game given the number of vertices (n) and the edges. Parameters: n (int): Number of vertices in the tree. edges (list of tuples): Each tuple represents an edge (u, v). Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins. if n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"A pharmaceutical company is conducting a study to monitor the temperature of their drugs during transport. Each drug package has a specific acceptable temperature range within which it needs to be maintained. Given the temperature readings at various timestamps during the transport and the acceptable temperature ranges for each package, your task is to determine if all packages have remained within their respective acceptable ranges throughout the transport. -----Input----- The input consists of: - One line with the integer n (1 le n le 10^5), the number of drug packages. - n lines, each containing two integers l_i and u_i (-100 le l_i le u_i le 100), the lower bound and upper bound of the acceptable temperature range for the i-th package. - One line with the integer m (1 le m le 10^5), the number of temperature readings. - m lines, each containing two integers t_j and x_j (-100 le t_j le 100), where t_j is the timestamp and x_j is the temperature reading at that timestamp. -----Output----- Output \\"YES\\" if all packages have remained within their respective acceptable temperature ranges throughout the transport. Otherwise, output \\"NO\\". -----Examples----- Sample Input 1: 3 2 8 0 5 -1 3 4 1 4 2 6 3 1 4 -2 Sample Output 1: NO Sample Input 2: 2 -5 5 -10 10 3 1 0 2 -3 3 4 Sample Output 2: YES","solution":"def are_all_packages_within_range(n, temperature_ranges, m, temperature_readings): for _, temp_reading in temperature_readings: for lower_bound, upper_bound in temperature_ranges: if not (lower_bound <= temp_reading <= upper_bound): return \\"NO\\" return \\"YES\\" # Main function to handle input and output def main(): import sys input = sys.stdin.read data = input().split() index = 0 n = int(data[index]) index += 1 temperature_ranges = [] for _ in range(n): l_i = int(data[index]) u_i = int(data[index + 1]) temperature_ranges.append((l_i, u_i)) index += 2 m = int(data[index]) index += 1 temperature_readings = [] for _ in range(m): t_j = int(data[index]) x_j = int(data[index + 1]) temperature_readings.append((t_j, x_j)) index += 2 print(are_all_packages_within_range(n, temperature_ranges, m, temperature_readings))"},{"question":"Background Alice is an avid chess player, and her latest fascination is with the knight piece. A knight in chess moves in an \\"L\\" shape: two squares in a cardinal direction (north, south, east, or west) and then one square perpendicular, or vice versa. This unique movement pattern makes the knight a very dynamic and interesting piece on the chessboard. Alice wants to write a program that can determine the minimum number of moves required for a knight to reach from one position to another on a standard 8x8 chessboard. Given the starting and ending positions, she needs to calculate this shortest path. Problem You will be provided with starting and ending positions on an 8x8 chessboard and will need to determine the minimum number of valid knight moves to get from the start to the end. The positions on the chessboard are given as coordinates (x, y) where 1 ≤ x, y ≤ 8. Input The first line will contain two space-separated integers representing the starting coordinates (x1, y1). The second line will contain two space-separated integers representing the ending coordinates (x2, y2). Output Output a single integer representing the minimum number of moves required for the knight to travel from the starting position to the ending position. Examples Input 1 1 8 8 Output 6 Input 3 4 3 4 Output 0 Input 4 5 1 1 Output 3","solution":"from collections import deque def min_knight_moves(start, end): Calculates the minimum number of moves required for a knight to travel from start to end on a standard 8x8 chessboard. def is_valid(x, y): return 1 <= x <= 8 and 1 <= y <= 8 # All possible moves for a knight knight_moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] x1, y1 = start x2, y2 = end if (x1, y1) == (x2, y2): return 0 queue = deque([(x1, y1, 0)]) # (x, y, distance) visited = set((x1, y1)) while queue: cx, cy, dist = queue.popleft() for dx, dy in knight_moves: nx, ny = cx + dx, cy + dy if (nx, ny) == (x2, y2): return dist + 1 if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # This line would never actually be reached for a valid chessboard problem # Function to parse input, which will be removed for unit tests def main(): x1, y1 = map(int, input().split()) x2, y2 = map(int, input().split()) print(min_knight_moves((x1, y1), (x2, y2))) # Uncomment the line below if running directly # main()"},{"question":"Given a string and a pattern, find the starting indices of all occurrences of the pattern in the string. Example 1: Input: string = \\"abracadabra\\" pattern = \\"abra\\" Output: [0, 7] Explanation: The pattern \\"abra\\" appears in the string \\"abracadabra\\" starting at index 0 and again at index 7. Example 2: Input: string = \\"abcdefg\\" pattern = \\"hij\\" Output: [] Explanation: The pattern \\"hij\\" does not appear in the string \\"abcdefg\\". Example 3: Input: string = \\"aaaaa\\" pattern = \\"aa\\" Output: [0, 1, 2, 3] Explanation: The pattern \\"aa\\" appears in the string \\"aaaaa\\" starting at indices 0, 1, 2, and 3. Your Task: You don\'t need to read input or print anything. Complete the function findPatternOccurrences() which takes the string and the pattern as inputs and returns a list of starting indices of all occurrences of the pattern in the string. Expected Time Complexity: O(N + M) Expected Auxiliary Space: O(N) Constraints: 1 ≤ length of string ≤ 10^5 1 ≤ length of pattern ≤ 10^3","solution":"def findPatternOccurrences(string, pattern): Finds the starting indices of all occurrences of the pattern in the string. Args: string (str): The input string to search within. pattern (str): The pattern to find in the input string. Returns: List[int]: A list of starting indices of the pattern in the string. if not string or not pattern: return [] n = len(string) m = len(pattern) if m > n: return [] # List to store the result: starting indices result = [] # Compute the Longest Prefix Suffix (LPS) array for the pattern lps = [0] * m length = 0 i = 1 while i < m: if pattern[i] == pattern[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 i = 0 # index for string j = 0 # index for pattern while i < n: if pattern[j] == string[i]: i += 1 j += 1 if j == m: result.append(i - j) j = lps[j - 1] elif i < n and pattern[j] != string[i]: if j != 0: j = lps[j - 1] else: i += 1 return result"},{"question":"In a distant land, there exists a mystical tree that holds the secret to longevity. The tree bears magical fruit, and the number of fruits on the tree at any given moment follows a special pattern. The pattern is influenced by a transformation rule based on the Fibonacci sequence. The wizard who guards the tree wants to know the total number of fruits on the tree after a certain number of days. Every day, the number of fruits follows this rule: - On the first day, you start with F_1 fruits. - On the second day, you have F_2 fruits. - For each subsequent day, the number of fruits is the sum of the fruits from the previous two days, i.e., F_n = F_(n-1) + F_(n-2). Given a number of days, you need to help the wizard determine the total number of fruits on the tree at the end of that period. Input The first line of input contains T, the number of test cases. For each test case, provide three integers: D (the number of days), F1 and F2, representing the number of fruits on the first and second day respectively. Output For each test case, print the total number of fruits on the tree at the end of D days. Constraints: 1 <= T <= 100 1 <= D <= 50 1 <= F1, F2 <= 10^5 Example Input: 3 5 2 3 10 1 1 3 1 2 Output: 12 55 4 Explanation Test case 1: For D = 5, F1 = 2, F2 = 3, the sequence is: 2, 3, 5, 8, 13. The total number of fruits on the tree at the end of 5 days is 13. Test case 2: For D = 10, F1 = 1, F2 = 1, the sequence is: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. The total number of fruits on the tree at the end of 10 days is 55. Test case 3: For D = 3, F1 = 1, F2 = 2, the sequence is: 1, 2, 3. The total number of fruits on the tree at the end of 3 days is 3.","solution":"def find_total_fruits(T, test_cases): results = [] for case in test_cases: D, F1, F2 = case if D == 1: results.append(F1) elif D == 2: results.append(F2) else: fruits = [F1, F2] for _ in range(2, D): next_fruit = fruits[-1] + fruits[-2] fruits.append(next_fruit) results.append(fruits[-1]) return results"},{"question":"Mark loves playing video games and wants to climb the leaderboard of his favorite game. In the game\'s ranking system, points earned in each match get added to the player\'s existing points. Mark knows that playing matches takes time, and he has a limited number of hours available per week to play. Given that Mark can play m matches in a week, each match i giving him p_{i} points and taking t_{i} hours, determine the maximum number of points he can earn in a week without exceeding the available hours. -----Input----- The first line contains two integers H, m (1 ≤ H ≤ 10^7, 1 ≤ m ≤ 10^5) -- the number of hours available in a week and the number of matches he can play. Each of the following m lines contains space-separated integers p_{i} and t_{i} (1 ≤ p_{i} ≤ 10^5, 1 ≤ t_{i} ≤ 10^6). -----Output----- In the first line print the maximum number of points Mark can earn in a week. -----Examples----- Input 10 3 100 2 200 3 150 5 Output 450 Input 5 2 300 2 150 3 Output 450 -----Note----- In the first sample, Mark can play all three matches because their total time is 10 hours which is within the available hours. In the second sample, Mark can only play two matches and use the entire 5 hours to maximize points earned at 450.","solution":"def max_points(H, m, matches): Determines the maximum points that can be earned without exceeding the available hours. Parameters: H (int): The number of hours available in a week. m (int): The number of matches Mark can play. matches (list of tuple): Each tuple contains two integers, p_i (points) and t_i (hours) for each match. Returns: int: The maximum number of points that can be earned. # Sort matches by their p/t ratio in descending order matches.sort(key=lambda x: x[0] / x[1], reverse=True) total_points = 0 total_hours = 0 for points, time in matches: if total_hours + time <= H: total_points += points total_hours += time else: break return total_points # Sample Usage matches = [(100, 2), (200, 3), (150, 5)] H = 10 m = 3 print(max_points(H, m, matches)) # Output: 450 matches = [(300, 2), (150, 3)] H = 5 m = 2 print(max_points(H, m, matches)) # Output: 450"},{"question":"You are given an array of integers representing the heights of buildings in a row. Your task is to determine the minimum number of buildings that should be removed so that the remaining buildings\' heights are in strictly increasing order from left to right. Input The first line contains an integer n — the number of buildings in the row (1 ≤ n ≤ 105). The second line contains n integers h1, h2, ..., hn — the heights of the buildings (1 ≤ hi ≤ 109). Output Print a single integer representing the minimum number of buildings that should be removed. Examples Input 6 3 2 5 1 7 4 Output 3 Input 4 1 3 2 4 Output 1 Note In the first test sample, one possible way to achieve an increasing sequence is by removing buildings of heights 3, 1, and 4 resulting in the sequence [2, 5, 7]. In the second test sample, removing the building with height 2 results in the remaining heights [1, 3, 4], which are in increasing order.","solution":"def min_removals_to_achieve_increasing_order(n, heights): def length_of_lis(arr): from bisect import bisect_left lis = [] for x in arr: pos = bisect_left(lis, x) if pos == len(lis): lis.append(x) else: lis[pos] = x return len(lis) lis_length = length_of_lis(heights) return n - lis_length"},{"question":"A palindrome is a string that reads the same forwards and backwards. A strictly palindromic number is a number that does not just read the same in base 10, but also when represented in every base from 2 to n-2, where n is the number itself. In this problem, your task is to determine whether a given number is strictly palindromic. Given a number n, output \\"YES\\" if the number is strictly palindromic, and \\"NO\\" otherwise. -----Input----- The input consists of a single integer n (3 ≤ n ≤ 1000). -----Output----- Print \\"YES\\" if n is strictly palindromic, otherwise print \\"NO\\". -----Examples----- Input 5 Output NO Input 7 Output NO Input 10 Output NO -----Note----- In the first sample, the number 5 is not palindromic in bases 2 to 3. In the second sample, the number 7 is not palindromic in bases 2 to 5. In the third sample, the number 10 is not palindromic in bases 2 to 8.","solution":"def is_strictly_palindromic(n): Determines if a number n is strictly palindromic. Parameters: n (int): A number n where 3 ≤ n ≤ 1000 Returns: str: \\"YES\\" if n is strictly palindromic, otherwise \\"NO\\". return \\"NO\\""},{"question":"A small town\'s postal service is trying to optimize mail delivery routes. The town is represented by a grid where each cell is a house. The post office is located at the top-left corner of the grid (0,0), and the houses are the other cells in the grid. Each house has a certain amount of mail that needs to be delivered, represented as an integer in a 2D list. The mail carrier can only move right or down from any cell. The goal is to calculate the minimum total amount of mail that needs to be delivered when moving from the post office to the bottom-right corner of the grid. The mail carrier must always deliver the mail for each house they pass through. Write a program that takes as input an integer n representing the size of the grid (n x n), followed by n lines of n integers each representing the amount of mail for each house. The program should output the minimum total mail delivered on the route from the post office to the bottom-right corner. Input The input is given in the following format: n m11 m12 m13 ... m1n m21 m22 m23 ... m2n ... mn1 mn2 mn3 ... mnn Input meets the following constraints: 2 ≤ n ≤ 100 0 ≤ mij ≤ 1000 Output Output the answer value on one line. Examples Input 3 1 3 1 1 5 1 4 2 1 Output 7 Input 4 4 1 3 2 2 1 3 2 5 2 1 1 5 9 2 1 Output 11","solution":"def min_mail_delivery(n, grid): # Create a 2D dp array to store the minimum mail delivered to each cell dp = [[0 for _ in range(n)] for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (only can come from left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (only can come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][n-1] # Example usage n = 3 grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(min_mail_delivery(n, grid)) # Output: 7 n = 4 grid = [ [4, 1, 3, 2], [2, 1, 3, 2], [5, 2, 1, 1], [5, 9, 2, 1] ] print(min_mail_delivery(n, grid)) # Output: 11"},{"question":"You are a software engineer working on a scheduling application. One of the functionalities you need to implement involves finding the maximum number of non-overlapping meetings that can be scheduled in a day. Each meeting has a start and end time represented as integers. When scheduling meetings, if one meeting ends exactly when another starts, it\'s still considered non-overlapping. Write a program to determine the maximum number of non-overlapping meetings from a list of meeting times. Input The input is given in the following format: n start1 end1 start2 end2 ... startn endn - The first line contains an integer n (1 ≤ n ≤ 100,000), representing the number of meetings. - The next n lines contain two integers starti and endi (1 ≤ starti < endi ≤ 10^9), representing the start and end times of the meetings. Output Output a single integer, the maximum number of non-overlapping meetings that can be scheduled. Example Input 5 1 3 2 4 3 5 6 8 5 7 Output 3 Input 6 7 9 0 1 3 4 5 6 1 3 4 5 Output 6","solution":"def max_non_overlapping_meetings(n, meetings): Determines the maximum number of non-overlapping meetings. Parameters: n (int): Number of meetings meetings (List[Tuple[int, int]]): A list of tuples, where each tuple contains start and end times of a meeting Returns: int: Maximum number of non-overlapping meetings if n == 0: return 0 # Sort meetings by their end time meetings.sort(key=lambda x: x[1]) # Initialize count of non-overlapping meetings count = 1 # The end time of the first meeting last_end_time = meetings[0][1] # Iterate over remaining meetings for i in range(1, n): # If this meeting starts after or when the last meeting ends if meetings[i][0] >= last_end_time: count += 1 last_end_time = meetings[i][1] return count"},{"question":"Insect populations are known to follow various mathematical models of growth. A conservationist is studying a particular species of insects whose population over time follows the Fibonacci sequence. This means that the population at any given months is the sum of the populations of the previous two months. Given this pattern, the conservationist will record the population starting from the first two months and then use the Fibonacci sequence to calculate the population for subsequent months. The conservationist, however, has only been able to record the populations for some months and now needs your help to compute the population for all months up to a specific month `N`. # Input The first line of the input contains an integer `N` (2 ≤ N ≤ 10^6), the number of months the conservationist wants data for. The second line contains two integers `P0` and `P1` (1 ≤ P0, P1 ≤ 10^6), the recorded populations for the first two months. # Output Print the population of insects at month `N`. # Example Input ``` 5 3 5 ``` Output ``` 21 ``` Explanation The population for the first five months is computed as: - Month 1: 3 - Month 2: 5 - Month 3: 3 + 5 = 8 - Month 4: 5 + 8 = 13 - Month 5: 8 + 13 = 21","solution":"def insect_population(N, P0, P1): Returns the population of insects at month N. :param N: Number of months :param P0: Population at month 1 :param P1: Population at month 2 :return: Population at month N # Base cases if N == 1: return P0 if N == 2: return P1 # Initialize the first two months populations prev = P0 curr = P1 # Calculate the population for each subsequent month up to N for _ in range(3, N + 1): next_population = prev + curr prev = curr curr = next_population return curr"},{"question":"Takahashi loves collecting stamps. He has an album with N rows and M columns, and each cell contains exactly one stamp. The rows are numbered from 1 to N from top to bottom, and the columns are numbered from 1 to M from left to right. Each stamp has a value, which is a positive integer. Takahashi wants to collect stamps such that all collected stamps form a subrectangle (subgrid) of the album. Help Takahashi to find the largest sum of values among all possible subrectangles in his album. Constraints - 1 leq N, M leq 100 - The value of each stamp is a positive integer not exceeding 10,000. Input Input is given from Standard Input in the following format: ``` N M A_1_1 A_1_2 ... A_1_M A_2_1 A_2_2 ... A_2_M ... A_N_1 A_N_2 ... A_N_M ``` Output Print the largest sum of values among all possible subrectangles. Examples Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output 45 Input ``` 2 2 5 1 1 5 ``` Output 12","solution":"def max_subrectangle_sum(N, M, matrix): # Step 1: Create a prefix sum array prefix = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): prefix[i][j] = matrix[i-1][j-1] + prefix[i-1][j] + prefix[i][j-1] - prefix[i-1][j-1] # Step 2: Find the maximum sum of all subrectangles max_sum = -float(\'inf\') for i1 in range(1, N + 1): for j1 in range(1, M + 1): for i2 in range(i1, N + 1): for j2 in range(j1, M + 1): subrectangle_sum = ( prefix[i2][j2] - prefix[i1-1][j2] - prefix[i2][j1-1] + prefix[i1-1][j1-1] ) max_sum = max(max_sum, subrectangle_sum) return max_sum # Example usage: # N, M = 3, 3 # matrix = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # print(max_subrectangle_sum(N, M, matrix)) # Output: 45"},{"question":"# Kata Task Write a function `minimal_subarray` that takes a list of integers and a target number. The function should return the smallest contiguous subarray length where the sum of the elements is greater than or equal to the target number. If there is no such subarray, return 0. # Notes * The list will contain at least one number * The subarray should be contiguous (elements next to each other in the original array) * The original list contains only non-negative integers # Examples * ex1 * Input = `[5, 1, 3, 5, 10, 7, 4, 9, 2, 8]`, `target = 15` * Result = `2` * ex2 * Input = `[1, 4, 4]`, `target = 8` * Result = `2` * ex3 * Input = `[1, 1, 1, 1, 1, 1, 1, 1]`, `target = 11` * Result = `0`","solution":"def minimal_subarray(nums, target): Returns the length of the smallest contiguous subarray where the sum of the elements is greater than or equal to the target number. If there is no such subarray, returns 0. n = len(nums) min_length = float(\'inf\') # Initialize to infinity curr_sum = 0 start = 0 for end in range(n): curr_sum += nums[end] # Try to minimize the window while curr_sum >= target: min_length = min(min_length, end - start + 1) curr_sum -= nums[start] start += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"Given an array of n integers, and a series of q queries. Each query provides a range defined by two integers (l, r) which denote the starting and ending indices respectively in the array (1-based indexing). For each query, determine the number of distinct elements in that range (l, r). For example, given an array of 5 integers and 3 queries: Array: [1, 2, 1, 3, 2] Queries: 1. (1, 3) 2. (2, 4) 3. (1, 5) For the first query, the range is [1, 2, 1], which has 2 distinct elements: 1 and 2. For the second query, the range is [2, 1, 3], which has 3 distinct elements: 1, 2, and 3. For the third query, the range is [1, 2, 1, 3, 2], which has 3 distinct elements: 1, 2 and 3. -----Input----- The first line of input contains two integers n and q (1 le n, q le 10^5) — the number of elements in the array and the number of queries. The second line contains n integers a_i (1 le a_i le 10^9) — the elements of the array. The following q lines contain two integers l and r (1 le l le r le n) — the range for each query. -----Output----- For each query, output a single integer — the number of distinct elements in the range (l, r). -----Examples----- Input 5 3 1 2 1 3 2 1 3 2 4 1 5 Output 2 3 3 -----Note----- None","solution":"def count_distinct_elements(n, q, array, queries): Returns list of distinct element counts for each query range. results = [] for l, r in queries: # Convert to 0-based indices l -= 1 r -= 1 # Get the subarray and count distinct elements distinct_count = len(set(array[l:r+1])) results.append(distinct_count) return results"},{"question":"The city traffic management department wants to simulate and analyze traffic patterns at a busy intersection. The intersection has four entry points, each represented as a queue of vehicles waiting to pass through. Each vehicle is identified by its license plate number. The simulation will process the vehicles in the order they arrive at the intersection, allowing one vehicle to pass through at a time in a round-robin fashion from the four queues. You need to implement a function to simulate the traffic flow and provide a history of the order in which vehicles pass through the intersection. Function Description: Complete the `simulateTraffic` function in the editor below. `simulateTraffic` has the following parameter(s): - `list[list[str]] queues`: a list containing 4 sub-lists, each representing the queue of vehicles at each entry point in a string format of license plate numbers. Returns: - `list[str]`: a list representing the history of vehicles passing through the intersection in the order they passed. Input Format: - Each of the 4 sub-lists in `queues` contains up to 10^5 string elements each representing a vehicle\'s license plate number. Constraints: - sum len(queue_i) leq 10^5, for i in {0,1,2,3} - Each license plate number is a non-empty string of length at most 7. - There are always 4 queues given, representing the 4 entry points to the intersection. Sample Input: ```python [ [\\"ABC123\\", \\"XYZ789\\"], [\\"CDE456\\", \\"HIJ012\\", \\"KLM345\\"], [\\"NOP678\\"], [\\"QRS901\\", \\"TUV234\\"] ] ``` Sample Output: ```python [\\"ABC123\\", \\"CDE456\\", \\"NOP678\\", \\"QRS901\\", \\"XYZ789\\", \\"HIJ012\\", \\"TUV234\\", \\"KLM345\\"] ``` Explanation: The simulation starts by allowing one vehicle from each queue to pass in a round-robin order: 1. \\"ABC123\\" from queue 1 2. \\"CDE456\\" from queue 2 3. \\"NOP678\\" from queue 3 4. \\"QRS901\\" from queue 4 Then it continues with the remaining vehicles in the same order: 5. \\"XYZ789\\" from queue 1 6. \\"HIJ012\\" from queue 2 7. \\"TUV234\\" from queue 4 8. \\"KLM345\\" from queue 2 Continue this process until all queues are empty. The output shows the exact order in which the vehicles pass through the intersection.","solution":"def simulateTraffic(queues): Simulates the traffic flow at a busy intersection with 4 entry points. Parameters: queues (list[list[str]]): A list containing 4 sub-lists, each representing the queue of vehicles at each entry point in the form of license plate numbers. Returns: list[str]: A list representing the history of vehicles passing through the intersection. result = [] has_vehicle = True while has_vehicle: has_vehicle = False for queue in queues: if queue: result.append(queue.pop(0)) has_vehicle = True return result"},{"question":"Given a number `n`, return the number of unique arrangements of `n` pairs of parentheses that are valid. An arrangement of parentheses is considered valid if every opening parenthesis `(` has a corresponding closing parenthesis `)` and the pairs are balanced. Example 1: Input: n = 2 Output: 2 Explanation: There are 2 valid arrangements: 1. (()) 2. ()() Example 2: Input: n = 3 Output: 5 Explanation: There are 5 valid arrangements: 1. ((())) 2. (()()) 3. (())() 4. ()(()) 5. ()()() Your Task: You don\'t need to read or print anything. Your task is to complete the function `count_valid_parentheses(n)` which takes `n` as an input parameter and returns the number of unique valid arrangements of `n` pairs of parentheses. Expected Time Complexity: O(2^n) Expected Space Complexity: O(n) Constraints: 1 <= n <= 15","solution":"def count_valid_parentheses(n): Returns the number of unique valid arrangements of n pairs of parentheses. # This is the nth Catalan number formula: C(n) = (2n)! / (n! * (n + 1)!) from math import factorial def catalan_number(n): return factorial(2 * n) // (factorial(n) * factorial(n + 1)) return catalan_number(n)"},{"question":"You are given a list of integers. Your task is to find all the unique triplets in the list that sum up to zero. A triplet is a tuple of three numbers (a, b, c) such that a + b + c = 0. The solution set must not contain duplicate triplets. Example 1: Input: [-1, 0, 1, 2, -1, -4] Output: [[-1, -1, 2], [-1, 0, 1]] Explanation: The triplets are: -1 + -1 + 2 = 0 -1 + 0 + 1 = 0 Note: The list of integers may contain both negative and positive numbers. The integers in each triplet should be in non-decreasing order. The order of the triplets in the output does not matter. The input list can contain any integer values and may have duplicate elements.","solution":"def three_sum(nums): Find all unique triplets in the list that sum up to zero. :param nums: List of integers :return: List of unique triplets (a, b, c) such that a + b + c = 0 nums.sort() triplets = [] n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: triplets.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return triplets"},{"question":"You are given a row of houses, each with a certain amount of money stashed inside. All houses are arranged in a straight line. Due to some unusual security system, you cannot rob two adjacent houses in the same night. Given a list of non-negative integers where each integer represents the amount of money at each house, determine the maximum amount of money you can rob tonight without alerting the police. Write a program to help find the optimal strategy. # Input The input consists of multiple datasets. The end of the input is indicated by a single zero line. The input is given in the following format: ``` n m1 m2 m3 ... mn ``` The first line `n` (1 ≤ n ≤ 100) is an integer representing the number of houses. The second line contains `n` integers separated by one space, where `mi` (0 ≤ mi ≤ 1000) indicates the amount of money in the i-th house from the left. The number of datasets does not exceed 100. # Output For each dataset, output the maximum amount of money that can be robbed. # Example Input ``` 5 1 2 3 1 5 4 50 1 1 50 6 10 20 30 40 50 60 2 10 20 0 ``` Output ``` 9 100 120 20 ```","solution":"def rob_houses(nums): Given a list of non-negative integers where each integer represents the amount of money at each house, determine the maximum amount of money you can rob tonight without alerting the police. You cannot rob two adjacent houses in the same night. Args: nums: List[int] - A list of integers where each integer represents the amount of money in each house. Returns: int - The maximum amount of money that can be robbed. if not nums: return 0 n = len(nums) if n == 1: return nums[0] # Dynamic Programming Approach rob1, rob2 = 0, 0 for num in nums: new_rob = max(rob2, rob1 + num) rob1 = rob2 rob2 = new_rob return rob2 def process_input(input_data): Processes the input data and returns the results for all datasets. Args: input_data: str - The input data to process. Returns: List[int] - The results for all datasets. lines = input_data.strip().split(\\"n\\") results = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break houses = list(map(int, lines[i + 1].split())) results.append(rob_houses(houses)) i += 2 return results"},{"question":"You are given two strings, `s1` and `s2`, both consisting of lowercase alphabets. You can perform two types of operations on these strings: 1. Replace any character in `s1` with any other lowercase alphabet. 2. Insert any character at any position in `s1`. You need to transform `s1` into `s2` using these operations. Write a function that returns the minimum number of operations required to transform `s1` into `s2`. Input: - The first line contains the string `s1`. - The second line contains the string `s2`. Output: - Print the minimum number of operations required to transform `s1` into `s2`. Constraints: - 1 ≤ |s1|, |s2| ≤ 1000 Example: Input: abcd bcf Output: 2 Explanation: You can transform \\"abcd\\" into \\"bcf\\" in the following way: 1. Replace \'a\' with \'b\' 2. Replace \'d\' with \'f\'","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to transform s1 into s2. m, n = len(s1), len(s2) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp table for i in range(m + 1): for j in range(n + 1): # If first string is empty, the only option is to insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, the only option is to remove all characters of first string elif j == 0: dp[i][j] = i # If last characters are the same, ignore the last character and recur for remaining strings elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If the last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i - 1][j], # Insert dp[i][j - 1], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Given a directed graph with N nodes and M edges, write a program to determine if there exists a path from node A to node B. Each node in the graph is labeled from 1 to N. -----Constraints----- - 1 leq N leq 10^5 - 1 leq M leq 2 times 10^5 - 1 leq A, B leq N - There are no multiple edges between the same pair of nodes. -----Input----- Input is given from Standard Input in the following format: N M A B u_1 v_1 u_2 v_2 ... u_M v_M The graph is represented as M directed edges (u_i, v_i), where u_i is the starting node and v_i is the ending node of the i-th directed edge. -----Output----- Print \\"YES\\" if there is a path from node A to node B. Otherwise, print \\"NO\\". -----Sample Input----- 5 4 1 5 1 2 2 3 3 4 4 5 -----Sample Output----- YES **Explanation:** There is a path from node 1 to node 5: 1 -> 2 -> 3 -> 4 -> 5. Hence, the output is \\"YES\\".","solution":"def can_reach_path(n, m, A, B, edges): from collections import deque, defaultdict # Create the graph from the edge list graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Use BFS to check if there\'s a path from A to B queue = deque([A]) visited = set() while queue: node = queue.popleft() if node == B: return \\"YES\\" if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return \\"NO\\""},{"question":"You are given an undirected graph with `n` nodes numbered from `0` to `n-1` and an array `edges` where `edges[i] = [u_i, v_i]` represents a bidirectional edge between nodes `u_i` and `v_i`. A \\"friend group\\" is a set of nodes where every node is reachable from every other node within the same group. If a new node becomes connected to a node in a friend group, it joins that group. You are provided another array `queries`, where each query is `[a, b]`. For each query, return `true` if there is a path from node `a` to node `b`, otherwise return `false`. Write a function `friend_groups` that takes in `n`, `edges`, and `queries` and returns an array of boolean values representing the result of each query. Example 1: ``` Input: n = 5, edges = [[0, 1], [1, 2], [3, 4]], queries = [[0, 2], [0, 4]] Output: [true, false] ``` Example 2: ``` Input: n = 4, edges = [[0, 1], [2, 3]], queries = [[0, 1], [1, 2], [2, 3]] Output: [true, false, true] ``` Constraints: 1. `1 <= n <= 1000` 2. `0 <= edges.length <= 1000` 3. `0 <= u_i, v_i < n` 4. `1 <= queries.length <= 500` 5. `0 <= a, b < n`","solution":"from collections import defaultdict, deque def friend_groups(n, edges, queries): Determines if there is a path between specified nodes in an undirected graph. :param n: int - Number of nodes in the graph :param edges: List[List[int]] - List of edges in the graph :param queries: List[List[int]] - List of queries to check connectivity between nodes :return: List[bool] - List containing the result of each query (True if there is a path, False otherwise) # Build adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Find all friend groups using DFS/BFS def bfs(start): queue = deque([start]) visited[start] = group_id while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = group_id queue.append(neighbor) visited = [0] * n group_id = 1 for i in range(n): if not visited[i]: bfs(i) group_id += 1 # Process queries result = [] for a, b in queries: result.append(visited[a] == visited[b]) return result"},{"question":"A group of scientists has discovered a new ecosystem, and they are studying the interactions between different species. They have made observations on which species eat which other species. They represent this information using a directed graph where each node represents a species, and each directed edge (`u -> v`) means species `u` preys on species `v`. Your task is to determine if there is a possibility of an infinite loop of predation in the ecosystem. An infinite loop of predation occurs if there is a cycle in the directed graph. Create a program that checks if the provided graph contains any cycles. # Input The input is given in the following format: ``` n m u1 v1 u2 v2 :: um vm ``` - The first line contains two integers `n` (2 <= n <= 100,000), the number of species, and `m` (1 <= m <= 200,000), the number of observed predator-prey relationships. - The following `m` lines each contain two integers `ui` and `vi` (1 <= ui, vi <= n, ui != vi) representing a directed edge from species `ui` to species `vi`. No duplicate edges between the same pair of nodes will be given. # Output Output \\"Yes\\" if there is a cycle in the graph, otherwise output \\"No\\". # Example Input ``` 4 4 1 2 2 3 3 4 4 2 ``` Output ``` Yes ``` Input ``` 3 2 1 2 2 3 ``` Output ``` No ```","solution":"from collections import defaultdict, deque def has_cycle(n, m, edges): Determines if there is a cycle in the directed graph. Args: - n (int): the number of species (nodes in the graph). - m (int): the number of predator-prey relationships (edges in the graph). - edges (list of tuple of int): list of tuples representing directed edges (u, v). Returns: - str: \\"Yes\\" if there is a cycle in the graph, otherwise \\"No\\". # Create adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) # Function to detect cycle using DFS def is_cyclic(v, visited, rec_stack): visited[v] = True rec_stack[v] = True for neighbour in adj_list[v]: if not visited[neighbour]: if is_cyclic(neighbour, visited, rec_stack): return True elif rec_stack[neighbour]: return True rec_stack[v] = False return False # Initialize visited and recursion stack arrays visited = [False] * (n + 1) rec_stack = [False] * (n + 1) # Perform DFS from each vertex for node in range(1, n + 1): if not visited[node]: if is_cyclic(node, visited, rec_stack): return \\"Yes\\" return \\"No\\""},{"question":"Given an array of integers and a target sum, determine if there exists a subarray with a sum equal to the target. A subarray is a contiguous subsection of the array. Example 1: Input: arr = [1, 4, 20, 3, 10, 5], target = 33 Output: True Explanation: The subarray [20, 3, 10] has sum 33. Example 2: Input: arr = [1, 4, 0, 0, 3, 10, 5], target = 7 Output: True Explanation: The subarray [4, 0, 0, 3] has sum 7. Example 3: Input: arr = [1, 4], target = 0 Output: False Explanation: There is no subarray with sum 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `isSubarraySum()` which takes the array `arr` and its size `n` (length of the array) and an integer `target` as input parameters and returns a boolean indicating whether there exists a subarray with the sum equal to `target`. Expected Time Complexity: O(n). Expected Auxiliary Space: O(n). Constraints: 1 ≤ n ≤ 10^5 -10^5 ≤ arr[i] ≤ 10^5","solution":"def isSubarraySum(arr, target): Determines if there exists a subarray with a sum equal to the target. :param arr: List of integers :param target: Integer target sum :return: Boolean indicating whether such a subarray exists current_sum = 0 sum_dict = {} for num in arr: current_sum += num if current_sum == target: return True if (current_sum - target) in sum_dict: return True sum_dict[current_sum] = True return False"},{"question":"Alice and Bob are playing a game where they take turns in removing stones from a pile. Initially, there are N stones in the pile. Alice always goes first. On each of their turns, a player can choose to remove either 1, 2, or 3 stones from the pile. The player unable to make a move (because there are no stones left to remove) loses the game. You need to determine the winner of the game if both players play optimally. ------ Input Format ------ - The first line contains T - the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N - the number of stones in the pile at the start. ------ Output Format ------ For each test case, output on a single line ALICE if Alice wins the game, and BOB otherwise. You may print each character of the string in uppercase or lowercase (for example, the strings alICe, ALIce, alice, and aliCE will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{9} ----- Sample Input 1 ------ 3 1 2 4 ----- Sample Output 1 ------ ALICE ALICE ALICE ----- Explanation 1 ------ - Test case 1: Alice removes the only stone and wins the game. - Test case 2: Alice removes two stones and wins the game. - Test case 3: Alice removes three stones, leaving one stone for Bob. Bob then removes the last stone and loses the game. Thus, Alice wins.","solution":"def determine_winner(T, test_cases): results = [] for N in test_cases: if N % 4 == 0: results.append(\\"BOB\\") else: results.append(\\"ALICE\\") return results"},{"question":"A famous researcher is working on a prototype for a new software that helps in the search for rare species in a forest. This software processes data from various sensors in the forest and determines the probability of encountering a rare species in different regions. Each region in the forest is represented as a node, and the probability of encountering the rare species is represented by a probability score, which is a positive integer associated with each region. The nodes are connected by unidirectional paths, and your task is to identify the region with the highest probability score that can be reached starting from a given region. The forest map is represented as a directed graph, where each node represents a region and each edge represents a path. Given the forest map and a starting node, you need to compute the highest probability score among the reachable regions. A region is said to be reachable from another region if there exists at least one path connecting them. Input The input consists of multiple datasets. Each dataset is formatted as follows: > n m start > p1 p2 p3 ... pn > u1 v1 > u2 v2 > ... > um om The first line of each dataset contains three integers n, m, and start. n (2 ≤ n ≤ 100) is the number of regions (nodes), m (0 ≤ m ≤ 1000) is the number of paths (edges), and start (0 ≤ start < n) is the starting region. The second line contains n integers p1, p2, ..., pn where pi (1 ≤ pi ≤ 10^6) is the probability score of the i-th region. Each of the next m lines contains two integers ui and vi indicating there is a path from region ui to region vi. The end of input is indicated by a line containing three zeros. Output For each dataset, output a single line containing the highest probability score among the regions reachable from the starting region. If no other region is reachable from the starting region, output the probability score of the starting region itself. Sample Input 5 6 0 10 50 30 20 40 0 1 0 2 1 3 1 4 2 4 3 4 3 0 2 15 25 35 0 1 1 2 4 2 1 5 10 15 20 1 2 2 3 0 0 0 Sample Output 50 35 20 Example Input 5 6 0 10 50 30 20 40 0 1 0 2 1 3 1 4 2 4 3 4 3 0 2 15 25 35 0 1 1 2 4 2 1 5 10 15 20 1 2 2 3 0 0 0 Output 50 35 20","solution":"def find_highest_probability(n, m, start, probabilities, edges): from collections import defaultdict, deque # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Do a BFS to find all reachable nodes from start visited = [False] * n queue = deque([start]) visited[start] = True max_probability = probabilities[start] while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) max_probability = max(max_probability, probabilities[neighbor]) return max_probability def process_datasets(datasets): results = [] for data in datasets: n, m, start = data[0] if n == 0 and m == 0 and start == 0: break probabilities = data[1] edges = data[2:] results.append(find_highest_probability(n, m, start, probabilities, edges)) return results"},{"question":"You are given a list of integers, and your task is to determine the longest contiguous subarray that forms an arithmetic sequence. An arithmetic sequence is a sequence of numbers where the difference between consecutive elements is constant. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100). The second line contains n space-separated integers representing the elements of the array. -----Output----- Print the length of the longest contiguous subarray that forms an arithmetic sequence. -----Examples----- Input 5 2 4 6 8 10 Output 5 Input 7 1 7 4 10 13 16 19 Output 4 Input 10 3 3 5 7 9 2 2 2 2 2 Output 5","solution":"def longest_arithmetic_subarray(arr): n = len(arr) if n == 1: return 1 longest_length = 1 current_length = 1 current_diff = arr[1] - arr[0] for i in range(1, n): diff = arr[i] - arr[i - 1] if diff == current_diff: current_length += 1 else: longest_length = max(longest_length, current_length) current_length = 2 current_diff = diff longest_length = max(longest_length, current_length) return longest_length"},{"question":"Using a stack, write a program to evaluate arithmetic expressions written in Reverse Polish Notation (RPN). RPN is a mathematical notation in which every operator follows all of its operands, e.g., to express the calculation 3 + 4, one writes 3 4 + rather than 3 + 4. The expressions are guaranteed to be valid and consist of integers and the operators +, -, *, and /. -----Input----- The input is a single line containing a space-separated string in RPN format. Each operand or operator is separated by a single space. -----Output----- Output should be a single integer which is the result of the RPN expression. -----Example----- Input: 2 1 + 3 * Output: 9 Input: 4 13 5 / + Output: 6","solution":"def eval_rpn(expression): Evaluate an arithmetic expression in Reverse Polish Notation. Parameters: expression (str): A space-separated string containing numbers and operators in RPN format. Returns: int: The result of the RPN expression. stack = [] tokens = expression.split() for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': # Ensure integer division for consistency with Python 3 behavior stack.append(int(a / b)) else: stack.append(int(token)) return stack[0]"},{"question":"You are given a list of integers and a target integer. Your task is to find all unique pairs of integers in the list that sum up to the target. Each pair should be represented as a sorted tuple (a, b) where a <= b. Ensure that no pair is repeated and the pairs are sorted in ascending order. Input The first line of input contains two integers n (1 ≤ n ≤ 100) and target (1 ≤ target ≤ 1000). The second line contains n integers (each between 1 and 1000). Output The first line of output contains the number of unique pairs. In subsequent lines, each pair is printed in the format \\"a b\\", sorted in ascending order. Examples Input 6 10 1 3 5 7 9 2 Output 2 1 9 3 7 Input 4 8 4 4 4 4 Output 1 4 4","solution":"def find_pairs_with_target(nums, target): Finds all unique pairs of integers in the list that sum up to the target. Args: nums: List of integers. target: Target sum. Returns: A list of tuples where each tuple represents a unique pair of integers that sum up to the target. nums.sort() pairs = set() seen = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return sorted(list(pairs))"},{"question":"Given an array of integers, where each integer represents the height of buildings standing in a row, find the maximum amount of water that can be trapped between the buildings after a rainfall. Rainwater will collect in the gaps between the buildings, and the water level in each gap will be determined by the minimum height of the tallest building on either side of that gap. -----Constraints----- - 1≤n≤10^5, where n is the number of buildings - 0≤height[i]≤10^4, where height[i] is the height of the i-th building. - All input values are integers. -----Input----- Input is given from Standard Input in the following format: n height_1 height_2 ... height_n -----Output----- Print one integer which is the maximum amount of water that can be trapped between the buildings after a rainfall. -----Sample Input----- 9 0 1 0 2 1 0 1 3 2 1 2 1 -----Sample Output----- 6 Explanation: In this example, 6 units of water can be trapped. The buildings at heights [0,1,0,2,1,0,1,3,2,1,2,1] will trap water in the gaps formed between buildings as follows: - 1 unit between buildings 2 and 4 - 1 unit between buildings 4 and 5 - 2 units between buildings 6 and 8 - 1 unit between buildings 8 and 9 - 1 unit between buildings 9 and 10","solution":"def max_water_trapped(n, heights): Calculate the maximum water that can be trapped after rainfall. :param n: Number of buildings. :param heights: List of integers representing heights of the buildings. :return: Integer representing the maximum water that can be trapped. if n < 3: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped # Example usage: # n = 12 # heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] # result = max_water_trapped(n, heights) # print(result) # Output: 6"},{"question":"Given a string s consisting of lowercase alphabets, you need to remove the minimum number of characters from the string so that the remaining characters form a palindrome. A palindrome is a string that reads the same forward and backward. Return the length of the longest palindromic subsequence that can be made from the given string. Example 1: Input: \\"bbbab\\" Output: 4 Explanation: The longest palindromic subsequence is \\"bbbb\\", which has a length of 4. Example 2: Input: \\"cbbd\\" Output: 2 Explanation: The longest palindromic subsequence is \\"bb\\", which has a length of 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `longestPalindromeSubseq()` which takes a string s as input and returns an integer representing the length of the longest palindromic subsequence. Expected Time Complexity: O(N^2) Expected Space Complexity: O(N^2) Constraints: 1 <= s.length <= 1000","solution":"def longestPalindromeSubseq(s): Returns the length of the longest palindromic subsequence in the string s. n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n-1, -1, -1): dp[i][i] = 1 for j in range(i+1, n): if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) return dp[0][n-1]"},{"question":"Alice loves to collect and organize books. She has a huge collection of books, each with a unique International Standard Book Number (ISBN). Alice wants to organize her books on a bookshelf in alphabetical order by their titles. However, she realizes that sorting by titles directly may be inefficient if the titles are long. Instead, she decides to sort the books by their ISBNs, but she needs a way to map the ISBNs to titles efficiently. Your task is to help Alice by writing a program that takes a list of books, each with an ISBN and a title, and outputs the titles sorted alphabetically by their ISBNs. Input The input starts with an integer n (1 ≤ n ≤ 100,000) denoting the number of books. The next n lines each contain a pair of an ISBN and a book title. Both the ISBN and the book title are strings. The ISBN and title within a line are separated by a space. The ISBN consists of digits and may have leading zeros, but it does not exceed 13 digits. The title can be any combination of characters and has at most 100 characters. Output Output the sorted list of book titles. Each title should be printed on a new line. Example Input 5 1234567890123 \\"The Art of Computer Programming\\" 0000000000001 \\"Artificial Intelligence: A Modern Approach\\" 9876543210123 \\"Introduction to Algorithms\\" 0000000000007 \\"Clean Code\\" 1111111111111 \\"Data Structures and Algorithms\\" Output \\"Artificial Intelligence: A Modern Approach\\" \\"Artificial Intelligence: A Modern Approach\\" \\"Data Structures and Algorithms\\" \\"Clean Code\\" \\"The Art of Computer Programming\\"","solution":"def sort_books_by_isbn(n, books): Sort books by ISBN. Parameters: n (int): the number of books. books (list of tuples): list where each tuple contains an ISBN and a title. Returns: list: list of titles sorted by their corresponding ISBNs. # Sort the books by ISBN using a lambda function as the key books_sorted = sorted(books, key=lambda book: book[0]) # Extract sorted titles sorted_titles = [book[1] for book in books_sorted] return sorted_titles"},{"question":"You are given a grid of size n x n filled with integers. You need to process q queries on this grid, each being one of the following types: 1. 1 x y val: you need to set the value of the cell at position (x, y) to val (1 ≤ x, y ≤ n, -10^9 ≤ val ≤ 10^9). 2. 2 x1 y1 x2 y2: you need to find the maximum value within the sub-grid from (x1, y1) to (x2, y2) (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ n). Furthermore, there are T independent tests you need to process. Input The first line contains an integer T (1 ≤ T ≤ 100) — the number of test cases. Each test case starts with two integers n, q (1 ≤ n, q ≤ 1000) — the size of the grid and the number of queries. The following q lines describe the queries: 1~x~y~val for queries of the first type and 2~x1~y1~x2~y2 for queries of the second type. Output For each query of the second type, print its result on a separate line. Example Input 2 4 3 2 1 1 4 4 1 2 2 5 2 1 1 4 4 3 2 1 1 1 3 1 2 2 6 2 1 1 2 2 Output 0 5 6","solution":"def process_grid_queries(T, test_cases): results = [] for case in test_cases: n, q, queries = case[\'n\'], case[\'q\'], case[\'queries\'] grid = [[0] * n for _ in range(n)] # Initialize an n x n grid with zeros for query in queries: if query[0] == 1: x, y, val = query[1] - 1, query[2] - 1, query[3] grid[x][y] = val elif query[0] == 2: x1, y1, x2, y2 = query[1] - 1, query[2] - 1, query[3] - 1, query[4] - 1 max_val = float(\'-inf\') for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): if grid[i][j] > max_val: max_val = grid[i][j] results.append(max_val) return results"},{"question":"A social network has n users and m friendships between them. You are given a list of friendships where each friendship is described by a pair of integers (u, v) indicating that user u and user v are friends. Every friendship is bidirectional. A clique in a social network is a subset of users such that every pair of users in the subset are friends with each other. For this problem, a clique with k users is called a k-clique. Your task is to find all distinct k-cliques in this social network. Given the values of n, m, and k, as well as the list of friendships, create a program that outputs the total number of distinct k-cliques in the given social network. # Input - The first line contains three integers n, m, and k (1 ≤ n ≤ 100, 0 ≤ m ≤ 4950, 1 ≤ k ≤ n), where n is the number of users, m is the number of friendships, and k is the size of the cliques to find. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) that describe the friendships. # Output - Print a single integer, the total number of distinct k-cliques in the social network. # Example Input ``` 5 6 3 1 2 1 3 2 3 2 4 3 4 4 5 ``` Output ``` 2 ``` - In the example above, there are 2 distinct 3-cliques: {1, 2, 3} and {2, 3, 4}.","solution":"from itertools import combinations def find_k_cliques(n, m, k, friendships): # Constructing the adjacency matrix adj_matrix = [[0] * n for _ in range(n)] for u, v in friendships: adj_matrix[u-1][v-1] = 1 adj_matrix[v-1][u-1] = 1 # Finding all cliques of size k def is_clique(nodes_subset): for i in range(len(nodes_subset)): for j in range(i + 1, len(nodes_subset)): if adj_matrix[nodes_subset[i]][nodes_subset[j]] == 0: return False return True # Generating all possible k-sized combinations nodes = list(range(n)) k_cliques = 0 for subset in combinations(nodes, k): if is_clique(subset): k_cliques += 1 return k_cliques"},{"question":"A food delivery company wants to optimize their delivery process. They have n delivery agents, each positioned at different coordinates on a 2D plane. They need to deliver food to m customers, each also positioned at different coordinates on the same 2D plane. Each delivery agent can deliver food to exactly one customer, and the delivery company\'s goal is to minimize the maximum Euclidean distance any delivery agent has to travel to deliver food to a customer. Your task is to calculate the minimal possible maximum distance any agent has to travel. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of delivery agents and the number of customers. The next n lines contain two integers x_i and y_i (0 ≤ x_i, y_i ≤ 1000), representing the coordinates of the delivery agent. The following m lines contain two integers x_j and y_j (0 ≤ x_j, y_j ≤ 1000), representing the coordinates of the customers. Output Output a single integer, which is the minimal possible maximum distance any delivery agent has to travel, rounded to the nearest integer. Examples Input 3 3 0 0 1 1 2 2 2 0 1 2 0 2 Output 2 Input 2 2 0 0 1 1 2 2 3 3 Output 3 Note In the first example, if agent at (0, 0) delivers to customer at (2, 0), agent at (1, 1) delivers to customer at (1, 2), and agent at (2, 2) delivers to customer at (0, 2), the maximum distance any agent has to travel is 2. In the second example, if agent at (0, 0) delivers to customer at (2, 2) and agent at (1, 1) delivers to customer at (3, 3), the maximum distance any agent has to travel is approximately 2.83, which rounds to 3.","solution":"from itertools import permutations import math def minimal_max_distance(n, m, agents, customers): def euclidean_distance(point1, point2): return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) min_max_distance = float(\'inf\') for perm in permutations(customers, n): current_max_distance = 0 for agent, customer in zip(agents, perm): current_max_distance = max(current_max_distance, euclidean_distance(agent, customer)) min_max_distance = min(min_max_distance, current_max_distance) return round(min_max_distance) # Example usages n, m = 3, 3 agents = [(0, 0), (1, 1), (2, 2)] customers = [(2, 0), (1, 2), (0, 2)] print(minimal_max_distance(n, m, agents, customers)) # Output: 2"},{"question":"Zara is fascinated by sequences of digits. She loves transforming them in unique ways. Zara finds an integer sequence appealing if every digit in the sequence is increased by 1. If a digit is 9, it wraps around to 0. Given a list of integer sequences, help Zara transform them based on her rule. Input The first line of the input contains an integer M denoting the number of integer sequences. M sequences follow, each on a new line. Output For each sequence, output a single line containing Zara\'s transformed sequence. Constraints 1 ≤ M ≤ 30 1 ≤ |s| ≤ 50 where |s| is the length of the sequence. Example Input: 3 98765 123 40039 Output: 09876 234 51140 Explanation In the first sequence, each digit is increased by 1 and the digit 9 wraps around to 0. In the second sequence, each digit is simply incremented by 1. In the third sequence, the same rule is applied where digit 9 wraps around to 0.","solution":"def transform_sequence(sequences): Transforms each digit in the sequence by increasing it by 1. If a digit is 9, it wraps around to 0. Args: sequences (list): A list of string sequences. Returns: list: A list of transformed sequences as strings. transformed_sequences = [] for sequence in sequences: transformed = \'\' for digit in sequence: new_digit = (int(digit) + 1) % 10 transformed += str(new_digit) transformed_sequences.append(transformed) return transformed_sequences"},{"question":"Palindrome Permutation Check Sarah loves playing with words and is fascinated by palindromes. She has a challenge for you: given a string, determine if any permutation of the string is a palindrome. A string is a palindrome if it reads the same backward as it does forward. To form a palindrome, at most one character of the string can appear an odd number of times. Write a function that takes a single string as input and returns \\"YES\\" if any permutation of the string can be a palindrome, or \\"NO\\" otherwise. Input A single line containing the input string. The input string consists of lowercase alphabets (a-z) and will have a length between 1 and 1000. Output A single line with the output \\"YES\\" or \\"NO\\". Example Input: civic Output: YES Input: ivicc Output: YES Input: hello Output: NO Input: aabb Output: YES","solution":"from collections import Counter def can_form_palindrome(s): Determines if any permutation of the input string can form a palindrome. :param s: The input string containing lowercase alphabets. :return: \'YES\' if any permutation can form a palindrome, \'NO\' otherwise. char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers of size N. You need to find the sum of the subarray within the given array (containing at least one number) which has the largest sum. Write a function that accepts an array of integers and returns the sum of the contiguous subarray with the maximum sum. Input Format: The first line contains an integer N, the size of the array. The second line contains N space-separated integers representing the elements of the array. Output Format: Print a single integer, the sum of the contiguous subarray with the largest sum. Constraints: -10^5 ≤ elements of the array ≤ 10^5 1 ≤ N ≤ 10^6 SAMPLE INPUT 9 -2 1 -3 4 -1 2 1 -5 4 SAMPLE OUTPUT 6 Explanation: The subarray [4,-1,2,1] has the largest sum 6.","solution":"def max_subarray_sum(nums): Returns the sum of the contiguous subarray with the maximum sum. Args: nums (list of int): List of integers representing the input array. Returns: int: The sum of the contiguous subarray with the largest sum. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given two strings, determine if one is a permutation of the other. Two strings are permutations if they contain the same characters but in different orders. Input Format The first line contains T, the number of test cases. Each test case consists of two lines. Each line contains a string of lowercase letters. Output Format For each test case, print YES if the strings are permutations of each other, otherwise print NO. Constraints 1 ≤ T ≤ 10^3 1 ≤ length of each string ≤ 10^3 Sample Input 2 abc bca abc def Sample Output YES NO Explanation In the first test case, \'abc\' and \'bca\' are permutations of each other. In the second test case, \'abc\' and \'def\' do not share the same characters, so they are not permutations of each other.","solution":"def are_permutations(str1, str2): Determine if two strings are permutations of each other. return sorted(str1) == sorted(str2) def check_permutations(test_cases): Check multiple test cases if the given pairs of strings are permutations of each other. Args: test_cases (list of tuple): List of tuples where each tuple contains two strings. Returns: list: List containing \'YES\' or \'NO\' for each test case. results = [] for str1, str2 in test_cases: if are_permutations(str1, str2): results.append(\'YES\') else: results.append(\'NO\') return results"},{"question":"You are given a string of length N consisting of characters \'(\', \')\', \'[\', \']\', \'{\', and \'}\'. Your task is to determine if the string is a valid sequence of parentheses, brackets, and braces. A valid sequence follows these rules: 1. Every opening bracket must have a corresponding closing bracket of the same type. 2. Opening brackets must be closed in the correct order (i.e., a closing bracket has to close the most recently opened, unmatched opening bracket of the same type). Constraints * 1 leq N leq 10^5 * The string consists of only the characters \'(\', \')\', \'[\', \']\', \'{\', and \'}\'. Input The input is given from Standard Input in the following format: S where S is the string of parentheses, brackets, and braces. Output Print \\"YES\\" if the string is a valid sequence, otherwise print \\"NO\\". Examples Input ([]) Output YES Input ([)] Output NO Input {[()]} Output YES","solution":"def is_valid_sequence(s): Determines if the given string `s` is a valid sequence of parentheses, brackets, and braces. Returns \\"YES\\" if the string is valid, otherwise returns \\"NO\\". stack = [] matching_bracket = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in matching_bracket.values(): # If opening bracket stack.append(char) elif char in matching_bracket.keys(): # If closing bracket if stack == [] or matching_bracket[char] != stack.pop(): return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"A company is designing a new logistics hub, and one of the critical problems they face is to efficiently store and retrieve packages using automated storage systems. They have chosen to follow a stack-based approach to handle the packages. Each stack in the storage can hold packages up to a certain height. The operations that can be performed on the stack are: 1. **Push:** Add a new package onto the stack provided it doesn\'t exceed the maximum height. 2. **Pop:** Remove the package on the top of the stack. Your task is to write a program that simulates a fixed-height stack of packages based on given operations. You need to determine the total number of successful operations performed. The operations are provided in a list where each item follows the format \\"Operation Value\\". The \\"Operation\\" is either \'Push\' or \'Pop\', and \\"Value\\" is the height of the package (for Push operations) or a placeholder (for Pop operations). You may assume that initial height of the stack is zero and no Push operation will result in a height greater than the maximum height from the initial state. If at any point a Pop operation is called on an empty stack, it should be ignored, and it will not count as a successful operation. # Input The input contains multiple test cases. Each test case format: - An integer H (1 ≤ H ≤ 1000) representing the maximum height of the stack. - An integer O (1 ≤ O ≤ 1000) representing the number of operations. - O lines follow, each containing an operation as described above. # Output For each test case, print the total number of successful operations (both push and pop). # Example Input 10 5 Push 3 Push 4 Pop -1 Push 5 Pop -1 20 7 Push 10 Push 15 Push 5 Pop -1 Push 3 Pop -1 Pop -1 Output 4 6 Explanation In the first case: - Push 3: Successful (current height = 3) - Push 4: Successful (current height = 7) - Pop: Successful (current height = 3) - Push 5: Unsuccessful (would exceed max height 10) - Pop: Successful (current height = 0) In the second case: - Push 10: Successful (current height = 10) - Push 15: Unsuccessful (would exceed max height 20) - Push 5: Successful (current height = 15) - Pop: Successful (current height = 10) - Push 3: Successful (current height = 13) - Pop: Successful (current height = 10) - Pop: Successful (current height = 0)","solution":"def simulate_stack_operations(H, operations): current_height = 0 successful_operations = 0 for operation in operations: op, value = operation.split() value = int(value) if op == \'Push\': if current_height + value <= H: current_height += value successful_operations += 1 elif op == \'Pop\': if current_height > 0: current_height -= value # The value is a placeholder, we simply pop which is valid if current_height > 0 successful_operations += 1 return successful_operations"},{"question":"Sarah has an array A of length N, and she wants to find out if there is a subsequence (not necessarily contiguous) of the array that sums up to a given number K. A subsequence is a sequence derived from the array A by deleting some or no elements without changing the order of the remaining elements. INPUT: - The first line contains two integers N and K, denoting the length of the array and the desired sum respectively. - The second line contains N integers representing the elements of the array A. OUTPUT: - Print \\"YES\\" if there exists a subsequence of the array A that sums up to K. - Print \\"NO\\" otherwise. CONSTRAINTS: - 1 ≤ N ≤ 100 - -10^3 ≤ A[i] ≤ 10^3 - -10^4 ≤ K ≤ 10^4 SAMPLE INPUT 1: 5 9 1 2 3 4 5 SAMPLE OUTPUT 1: YES Explanation: The subsequence [4, 5] sums up to 9. SAMPLE INPUT 2: 3 7 2 4 6 SAMPLE OUTPUT 2: NO Explanation: No subsequence of the array sums up to 7.","solution":"def can_find_subsequence_with_sum(N, K, A): Determine if there is a subsequence in array A that sums up to K. Args: N : int : The length of the array K : int : The desired sum to find in a subsequence A : list of int : The elements of the array Returns: str : \\"YES\\" if a subsequence sums to K, otherwise \\"NO\\" # We use a dynamic programming approach dp = {0} for num in A: new_dp = dp.copy() for subsum in dp: new_dp.add(subsum + num) dp = new_dp return \\"YES\\" if K in dp else \\"NO\\" # Example usage N, K = 5, 9 A = [1, 2, 3, 4, 5] print(can_find_subsequence_with_sum(N, K, A)) # Output: \'YES\' N, K = 3, 7 A = [2, 4, 6] print(can_find_subsequence_with_sum(N, K, A)) # Output: \'NO\'"},{"question":"Alice and Bob are gearing up for their summer art project. Since both of them love painting, they have decided to create a large mosaic. However, they have different tastes when it comes to color. Alice loves certain colors, and Bob loves others. They need to select exactly `k` colors that both of them like from a given set of colors, while minimizing the total cost. There are `n` colors in the palette. Each color `i` is described by three integers: `c_i` — the cost of the color, `a_i` — which equals `1` if Alice likes the color and `0` otherwise, and `b_i` — which equals `1` if Bob likes the color and `0` otherwise. You need to help them find exactly `k` colors such that both Alice and Bob like all of the chosen colors and the total cost of these colors is minimized. If it is not possible to choose such `k` colors, print -1. # Input - The first line of the input contains two integers `n` and `k` (`1 ≤ k ≤ n ≤ 10^5`). - The next `n` lines describe each color with three integers `c_i`, `a_i` and `b_i` (`1 ≤ c_i ≤ 10^4`, `0 ≤ a_i, b_i ≤ 1`). # Output - If there is no solution, print only one integer `-1`. - If the solution exists, print the minimum total cost of the chosen colors. # Example Input ``` 7 3 5 1 1 7 1 1 3 1 0 6 1 1 8 0 1 4 1 1 9 1 0 ``` Output ``` 15 ``` In this case, Alice and Bob can pick the colors with costs `5`, `4`, and `6` which they both like, and the total cost will be `15`.","solution":"def min_cost(n, k, colors): Finds the minimum cost to select exactly k colors such that both Alice and Bob like all of them. Parameters: n (int): Total number of colors. k (int): Number of colors to select. colors (list of tuples): Each tuple contains (c_i, a_i, b_i). Returns: int: Minimum total cost of selected colors or -1 if not possible. both_like_colors = [] # Filter colors that both Alice and Bob like for c_i, a_i, b_i in colors: if a_i == 1 and b_i == 1: both_like_colors.append(c_i) # If there are less than k colors that both like, it\'s not possible if len(both_like_colors) < k: return -1 # Sort the colors by cost both_like_colors.sort() # Calculate minimum total cost for k colors return sum(both_like_colors[:k])"},{"question":"The citizens of the Kingdom are planning to host a grand festival. There will be various events organized and many citizens are excited to participate in multiple events. To ensure the smooth conduct of the festival and to avoid any conflicts in scheduling, the King has decreed that each citizen can only participate in one event. Now, you are given a list of participation requests, where each request consists of the citizen\'s name and the event he wishes to participate in. Your task is to determine the maximum number of events that can be conducted such that no citizen participates in more than one event. Each event has a unique identifier. Input: The first line contains an integer M denoting the number of participation requests. The next M lines contain two strings each, the first string is the citizen\'s name, and the second string is the event\'s identifier. Output: The maximum number of events that can be conducted. Constraints: 1 ≤ M ≤ 1000 1 ≤ Length of citizen\'s name, event\'s identifier ≤ 100 Examples: Input: 5 Alice E1 Bob E2 Alice E3 Charlie E4 Bob E5 Output: 3 Input: 4 David E1 Emma E2 David E3 Emma E1 Output: 2","solution":"def max_events_conducted(requests): Determines the maximum number of events that can be conducted such that no citizen participates in more than one event. Parameters: requests (List[Tuple[str, str]]): List of tuples containing citizen\'s name and event\'s identifier Returns: int: Maximum number of events that can be conducted participants = set() max_events = 0 for citizen, event in requests: if citizen not in participants: participants.add(citizen) max_events += 1 return max_events"},{"question":"A powerful magician is organizing a grand event where he plans to show a chain of magical actions. Each action has a certain starting time and a certain ending time. The magician needs to ensure that no two actions overlap, so he can perform each action without any interruption. To aid the magician, you will step in to determine the maximum number of non-overlapping actions he can perform during the event. Given the start and end times of each action, write a program to find out the maximum set of non-overlapping actions that can fit into the event schedule. Input: The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of actions. - The next N lines each contain two integers, start and end, representing the start and end time of each action. Output: For each test case, output the maximum number of non-overlapping actions. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ start, end ≤ 1000 Example: Input: 2 3 1 2 2 3 3 4 4 1 3 2 4 3 5 6 7 Output: 3 3 Explanation: In the first test case, the magician can perform all three actions since they do not overlap. In the second test case, the maximum non-overlapping actions he can perform are [1 3], [3 5], and [6 7], totaling to 3 actions.","solution":"def max_non_overlapping_actions(test_cases): results = [] for case in test_cases: N, actions = case actions.sort(key=lambda x: x[1]) # Sort actions by end time count = 0 last_end_time = 0 for start, end in actions: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results # Function to parse the input and return the test cases def parse_input(input_str): inputs = input_str.strip().split(\'n\') T = int(inputs[0]) index = 1 test_cases = [] for _ in range(T): N = int(inputs[index]) index += 1 actions = [] for _ in range(N): start, end = map(int, inputs[index].split()) index += 1 actions.append((start, end)) test_cases.append((N, actions)) return test_cases"},{"question":"In a video game, a player controls a character on a 2D grid. The grid has N rows and M columns, and the character starts at the cell (1, 1). The goal is to reach the cell (N, M) by moving only up, down, left, or right, but there are some restrictions: - Some cells in the grid are blocked and cannot be entered. - The character can only move to an adjacent cell if it is within the grid bounds and not blocked. You are given a description of the grid and the task is to determine if there is a path from the start to the goal. -----Input----- The first line of input contains two integers N and M (1 leq N, M leq 100) — the number of rows and columns in the grid, respectively. The next N lines contain M characters each — the grid description. Each character is either a \'.\' representing an open cell or a \'#\' representing a blocked cell. -----Output----- Output \\"YES\\" if there is a path from the cell (1, 1) to the cell (N, M). Otherwise, output \\"NO\\". -----Examples----- Input 5 5 ..... .#. .#..# .#..# ..... Output YES Input 3 3 .#. .#. # Output NO -----Note----- In the first example, there is a way to navigate through the open cells to reach the bottom-right corner of the grid. In the second example, the bottom-right corner is blocked, so it is impossible to reach it.","solution":"def is_path_exists(grid, N, M): Determines if there is a path from the top-left corner (1, 1) to the bottom-right corner (N, M). :param grid: List[List[str]] - The grid representing the 2D grid with open (\'.\') and blocked (\'#\') cells :param N: int - Number of rows in the grid :param M: int - Number of columns in the grid :return: str - \\"YES\\" if there is a path, \\"NO\\" otherwise from collections import deque # Adjusting coordinates to match 0-index based start, goal = (0, 0), (N-1, M-1) if grid[start[0]][start[1]] == \'#\' or grid[goal[0]][goal[1]] == \'#\': return \\"NO\\" # Directions for right, down, left, and up movements directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() if (x, y) == goal: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\" # Function to handle input and call the is_path_exists function def solve(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = [list(data[2 + i]) for i in range(N)] print(is_path_exists(grid, N, M))"},{"question":"You are given an undirected graph with N vertices and M edges. Each vertex v_1 through v_ N has a color label represented by a positive integer c_1 through c_ N. You are to determine the length of the longest simple path consisting of vertices with distinct colors. -----Input----- The first line of input contains two space-separated integers N and M representing the number of vertices and edges in the graph, respectively (1 leq N leq 10^5 and 0 leq M leq 10^5). The second line of input contains N space-separated integers c_1 through c_ N, which represent the color labels of the vertices. Each color label is a positive integer in the range [1, 10^6]. The next M lines each contain two space-separated integers u and v indicating that there is an edge between vertex u and vertex v (1 leq u, v leq N). -----Output----- Output a single integer which is the length of the longest simple path consisting of vertices with distinct colors. If no path exists, output 0. -----Examples----- Sample Input 1: 5 5 1 2 3 4 5 1 2 2 3 3 4 4 5 5 1 Sample Output 1: 5 Sample Input 2: 6 7 1 2 1 3 2 4 1 2 2 3 3 4 4 5 5 6 1 5 2 6 Sample Output 2: 4 Sample Input 3: 4 3 1 1 1 1 1 2 2 3 3 4 Sample Output 3: 1","solution":"from collections import defaultdict, deque def find_longest_path(N, M, colors, edges): def bfs(start): queue = deque([(start, set([colors[start]]), 1)]) max_length = 1 while queue: node, seen_colors, length = queue.popleft() for neighbor in graph[node]: if colors[neighbor] not in seen_colors: new_seen_colors = seen_colors | set([colors[neighbor]]) queue.append((neighbor, new_seen_colors, length + 1)) max_length = max(max_length, length + 1) return max_length graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) max_path_length = 0 for i in range(N): max_path_length = max(max_path_length, bfs(i)) return max_path_length # Example usage N, M = 5, 5 colors = [1, 2, 3, 4, 5] edges = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 1)] print(find_longest_path(N, M, colors, edges)) # Output: 5"},{"question":"Problem You are given a box of chocolates arranged in a grid of size r x c and a list of queries. Each chocolate piece in the grid has a sweetness value, and each query asks you to find the sum of the sweetness values in a subgrid defined by its corners. To be more specific, each query is defined by four integers r1, c1, r2, and c2 (1 ≤ r1 ≤ r2 ≤ r, 1 ≤ c1 ≤ c2 ≤ c) which represent the top-left and bottom-right corners of the subgrid. You need to calculate the sum of the sweetness values of all the cells in this subgrid. Constraints * 1 ≤ r, c ≤ 500 * 1 ≤ sweetness value of each chocolate piece ≤ 100 * 1 ≤ number of queries ≤ 105 Input r c sweetness values grid (r rows each containing c integers) q r1 c1 r2 c2 (query 1) r1 c1 r2 c2 (query 2) ... r1 c1 r2 c2 (query q) All inputs are given as integers. The number of rows r and columns c in the grid are given in the first line. The sweetness values of the chocolate grid are given in the next r lines, each line containing c integers. The number of queries q is given in the line after the grid. Each query is provided in a separate line in the format mentioned above. Output The output consists of q lines. For each query, print the sum of the sweetness values for the specified subgrid in a new line. Examples Input 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 1 1 3 3 Output 12 45 Input 4 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 4 5 2 2 3 5 1 1 1 3 Output 20 8 3","solution":"def preprocess_grid(grid): Preprocess the grid to create a prefix sum array. r = len(grid) c = len(grid[0]) prefix_sum = [[0] * (c + 1) for _ in range(r + 1)] for i in range(1, r + 1): for j in range(1, c + 1): prefix_sum[i][j] = grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] return prefix_sum def sum_in_subgrid(prefix_sum, r1, c1, r2, c2): Calculate the sum of the subgrid using the prefix sum array. return (prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1]) def chocolate_sum_queries(grid, queries): Process each query to find the sum in the subgrid. prefix_sum = preprocess_grid(grid) result = [] for r1, c1, r2, c2 in queries: result.append(sum_in_subgrid(prefix_sum, r1, c1, r2, c2)) return result"},{"question":"In a language processing system, you are given a series of text commands that either add, remove, or count words in a store of words. You need to implement the functionality to handle these commands and produce the expected results. The commands are defined as follows: - `ADD word`: Adds the specified word to the store. If the word is already in the store, ignore the command. - `REMOVE word`: Removes the specified word from the store. If the word is not in the store, ignore the command. - `COUNT`: Outputs the number of unique words currently in the store. Input The first line contains an integer `m` (1 ≤ m ≤ 10^5), the number of commands. The next `m` lines contain the commands, one command per line. Each command is guaranteed to be in one of the formats described above. Words are strings consisting of lowercase English letters and have lengths between 1 and 20 characters. Output For each `COUNT` command in the input, print the number of unique words present in the store at that point in time. Examples Input ``` 7 ADD apple ADD banana COUNT REMOVE apple REMOVE apple ADD orange COUNT ``` Output ``` 2 1 ``` Input ``` 3 ADD peach REMOVE peach COUNT ``` Output ``` 0 ``` Clarifications: - Words are case-sensitive; for instance, \\"apple\\" and \\"Apple\\" are considered different words though the input guarantees lowercase words only. - Operations are processed in the order given in the input.","solution":"def process_commands(commands): store = set() result = [] for command in commands: parts = command.split() action = parts[0] if action == \\"ADD\\": word = parts[1] store.add(word) elif action == \\"REMOVE\\": word = parts[1] store.discard(word) # discard does nothing if the word is not present elif action == \\"COUNT\\": result.append(len(store)) return result"},{"question":"You are given a string containing digits from 0 to 9 and characters from \'a\' to \'f\'. Your task is to write a function that converts this string to its decimal equivalent if it is interpreted as a hexadecimal (base 16) number. Implement a function that performs this conversion using standard programming routines without using any built-in primitive for direct base conversion. -----Input----- A single line containing a string s of length n (1 leq n leq 100). The string contains only characters from 0 to 9 and from \'a\' to \'f\'. -----Output----- A single integer representing the decimal equivalent of the input string interpreted as a hexadecimal number. -----Examples----- Sample Input: 1a Sample Output: 26 Sample Input: ff Sample Output: 255","solution":"def hex_to_decimal(hex_string): Convert a hexadecimal string to its decimal equivalent. :param hex_string: String, input string containing hexadecimal digits. :return: Integer, decimal equivalent of the hexadecimal string. decimal_value = 0 hex_length = len(hex_string) for idx, char in enumerate(hex_string): if \'0\' <= char <= \'9\': value = ord(char) - ord(\'0\') elif \'a\' <= char <= \'f\': value = ord(char) - ord(\'a\') + 10 else: raise ValueError(f\\"Invalid character {char} in the hexadecimal string.\\") power = hex_length - 1 - idx decimal_value += value * (16 ** power) return decimal_value"},{"question":"Alice loves to play with strings and has recently come across an interesting problem. She has two strings `s1` and `s2`, and she wants to determine if `s2` can be derived from `s1` by deleting some characters from `s1` without changing the order of the remaining characters. For instance, if `s1` is \\"abcde\\" and `s2` is \\"ace\\", then `s2` can be derived from `s1` by deleting \'b\' and \'d\' from `s1`. However, if `s2` is \\"aec\\", then it can\'t be derived from `s1` as the order of characters is not maintained. Given the two strings, you need to determine if `s2` can be derived from `s1` by deleting some characters from `s1`. -----Input----- The input consists of two strings `s1` and `s2`. - `s1` and `s2` consist of lowercase English letters only. - The length of `s1` and `s2` will not exceed 10^4. -----Output----- Output \\"YES\\" if `s2` can be derived from `s1` by deleting some characters from `s1`, otherwise output \\"NO\\". -----Examples----- Sample Input 1: abcde ace Sample Output 1: YES Sample Input 2: abcde aec Sample Output 2: NO Sample Input 3: abc abc Sample Output 3: YES Sample Input 4: abcdefg hij Sample Output 4: NO Sample Input 5: abcdabc dabc Sample Output 5: YES","solution":"def can_derive(s1, s2): Determines if s2 can be derived from s1 by deleting some characters from s1 without changing the order of the remaining characters. :param s1: String from which characters can be deleted :param s2: String to derive :return: \\"YES\\" if s2 can be derived from s1, \\"NO\\" otherwise iter_s1 = iter(s1) return \\"YES\\" if all(char in iter_s1 for char in s2) else \\"NO\\""},{"question":"A large logistics company has many warehouses situated on a grid. Each warehouse is represented as a cell in an n x n grid. A drone begins its journey from the top-left corner of the grid (cell (0, 0)) and needs to reach the bottom-right corner of the grid (cell (n-1, n-1)). The drone can only move either one cell to the right or one cell down. However, some cells have obstacles that the drone cannot fly over. Your task is to determine the number of unique paths the drone can take to reach its destination. -----Input----- The input will start with a line containing an integer n (1 leq n leq 50), representing the size of the grid. This is followed by an n times n grid of 0s and 1s, where a 0 indicates an empty cell and a 1 indicates an obstacle. -----Output----- Output the number of unique paths the drone can take from the top-left to the bottom-right corner of the grid. If there are no possible paths, output 0. -----Examples----- Sample Input: 3 0 0 0 0 1 0 0 0 0 Sample Output: 2 Explanation: In this example, the two unique paths that the drone can take are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Sample Input: 2 0 1 0 0 Sample Output: 1","solution":"def uniquePathsWithObstacles(grid): n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1]"},{"question":"A research team is studying the movement of robotic vacuum cleaners in a large warehouse. Each vacuum cleaner follows a specific movement pattern based on a predefined set of instructions. These instructions are given as a string consisting of the characters \'L\' (move left), \'R\' (move right), \'U\' (move up), and \'D\' (move down). The warehouse is represented as a 2D grid where each position is identified by its (x, y) coordinates. Initially, the vacuum cleaner starts at the origin point (0, 0). The task is to determine the final position of the vacuum cleaner after executing all the instructions. Input: The first line contains an integer T, the number of test cases. Each of the following T lines contains a string of instructions. Output: For each test case, print the final coordinates (x, y) of the vacuum cleaner after executing the given set of instructions. Constraints: 1 ≤ T ≤ 100 1 ≤ length of instruction string ≤ 10^5 SAMPLE INPUT 2 LLRR UUDDLR SAMPLE OUTPUT (0, 0) (0, -2) Explanation Test Case #1: The series of moves are: left, left, right, right. The moves cancel each other out, so the final position remains at the origin (0, 0). Test Case #2: The series of moves are: up, up, down, down, left, right. The moves up and down cancel each other out, and similarly, the left and right moves cancel each other out, resulting in a final position of (0, -2).","solution":"def final_position_after_instructions(T, instructions_list): Returns the final coordinates of the vacuum cleaner after executing the given set of instructions. results = [] for instructions in instructions_list: x, y = 0, 0 for instruction in instructions: if instruction == \'L\': x -= 1 elif instruction == \'R\': x += 1 elif instruction == \'U\': y += 1 elif instruction == \'D\': y -= 1 results.append((x, y)) return results"},{"question":"Problem Statement You have been tasked with developing a new software feature for a professional scheduling application. The feature allows users to set reminders for important dates and events. One critical aspect of your implementation is to handle various date formats from different users. Given a list of dates in different formats, your task is to parse these dates, ordering them in ascending order. The dates can be in the following formats: 1. \'YYYY-MM-DD\' 2. \'DD-MM-YYYY\' 3. \'Month DD, YYYY\' (e.g., \'January 15, 2023\') Write a program that accepts a list of dates in the formats mentioned above and outputs the list of dates sorted in ascending order. The output dates should be in the \'YYYY-MM-DD\' format. * * * Input The input consists of multiple lines. The first line contains an integer N (1 leq N leq 100) representing the number of dates. The following N lines each contain a date in one of the specified formats. Output Output the sorted list of dates in the \'YYYY-MM-DD\' format, one date per line. Examples Input 5 2023-01-15 15-01-2023 January 15, 2023 2023-02-28 28-01-2023 Output 2023-01-15 2023-01-15 2023-01-28 2023-02-28 2023-02-28","solution":"from datetime import datetime # We will use different formats to parse the different types of date strings FORMATS = [ \'%Y-%m-%d\', # YYYY-MM-DD \'%d-%m-%Y\', # DD-MM-YYYY \'%B %d, %Y\' # Month DD, YYYY ] def parse_date(date_str): Parses a date string into a datetime object. for fmt in FORMATS: try: return datetime.strptime(date_str, fmt) except ValueError: pass raise ValueError(f\\"Date format not recognized: {date_str}\\") def sort_dates(dates): Takes a list of date strings, parses them, and returns a list of dates in \'YYYY-MM-DD\' format. parsed_dates = [parse_date(date) for date in dates] sorted_dates = sorted(parsed_dates) return [date.strftime(\'%Y-%m-%d\') for date in sorted_dates] # Example usage if __name__ == \\"__main__\\": dates = [ \'2023-01-15\', \'15-01-2023\', \'January 15, 2023\', \'2023-02-28\', \'28-01-2023\' ] print(sort_dates(dates))"},{"question":"You are given a list of strings `words` and a string `order` that represents the alphabet order in a particular alien language. Determine if the given list of strings `words` is sorted lexicographically in this alien language. In this alien language, the order of the alphabet is a permutation of the lowercase letters of the English alphabet. Example 1: Input: words = [\\"hello\\",\\"leetcode\\"] order = \\"hlabcdefgijkmnopqrstuvwxyz\\" Output: true Explanation: As \'h\' comes before \'l\' in the alien language, \\"hello\\" comes before \\"leetcode\\". Example 2: Input: words = [\\"word\\",\\"world\\",\\"row\\"] order = \\"worldabcefghijkmnpqstuvxyz\\" Output: false Explanation: \'d\' comes after \'l\' in the alien language, thus \\"word\\" is not sorted before \\"world\\". Example 3: Input: words = [\\"apple\\",\\"app\\"] order = \\"abcdefghijklmnopqrstuvwxyz\\" Output: false Explanation: The list is not sorted because \\"apple\\" comes before \\"app\\" and they differ at the fourth character. Constraints: * 1 <= words.length <= 100 * 1 <= words[i].length <= 20 * order.length == 26 * All characters in words[i] and order are English lowercase letters.","solution":"def is_alien_sorted(words, order): Determine if the given list of words is sorted lexicographically in an alien language. :param words: List of strings to be checked. :param order: String representing the alphabet order in the alien language. :return: Boolean indicating whether the words list is sorted. # Create a mapping of each character in \'order\' to its index order_index = {char: index for index, char in enumerate(order)} # Function to compare two words according to the alien language order def compare(word1, word2): for char1, char2 in zip(word1, word2): if order_index[char1] != order_index[char2]: return order_index[char1] < order_index[char2] # If all characters are same so far, the shorter word should come first return len(word1) <= len(word2) # Compare each word with the next one for i in range(len(words) - 1): if not compare(words[i], words[i + 1]): return False return True"},{"question":"An alien civilization transmits strings encoded in a unique format that uses sequences of digits to represent words. Each digit sequence corresponds to a letter in the English alphabet based on its order, where \'1\' maps to \'A\', \'2\' maps to \'B\', ..., and \'26\' maps to \'Z\'. For example, \\"12\\" maps to \\"L\\" and \\"26\\" maps to \\"Z\\". Given a digit string `s`, your task is to determine how many distinct ways it can be decoded into a valid English word. Write a function `countDecodings(s)` that takes a single string argument `s` and returns the number of distinct ways to decode `s`. If the string contains any digits that cannot be decoded into a valid character, return 0. Note that a string of length 0 corresponds to exactly one way of decoding (the empty string). **Examples:** ```python countDecodings(\\"12\\") # 2 (\\"AB\\" or \\"L\\") countDecodings(\\"226\\") # 3 (\\"BZ\\", \\"VF\\", \\"BBF\\") countDecodings(\\"0\\") # 0 (invalid) countDecodings(\\"06\\") # 0 (invalid) countDecodings(\\"\\") # 1 (one way to decode an empty string) ``` **Constraints:** - 1 ≤ len(s) ≤ 100 - The input string `s` contains only digits and may contain leading zeros.","solution":"def countDecodings(s): Returns the number of distinct ways to decode the digit string `s` into a valid English word. if not s: return 1 if s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(1, n): if s[i] != \'0\': dp[i + 1] += dp[i] if 10 <= int(s[i - 1:i + 1]) <= 26: dp[i + 1] += dp[i - 1] return dp[n]"},{"question":"Alice loves experimenting with strings and recently she came across a problem involving string transformation. Given a string of lowercase English letters, she wants to find out how many different strings she can create by rearranging the characters of the initial string. However, there\'s a catch: not all possible rearrangements are valid. A string is only valid if no two adjacent characters are the same. Your task is to help Alice determine the number of valid rearrangements of her string. Input The input consists of a single line containing the string `s` (1 ≤ |s| ≤ 1000) which consists of only lowercase English letters. Output Print a single integer which is the number of valid rearrangements of the string. If no valid rearrangement exists, print 0. Example Input aabb Output 8","solution":"from collections import Counter import heapq def count_valid_rearrangements(s): char_count = Counter(s) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_char and prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char = char prev_count = count + 1 if len(result) == len(s): return 1 # The string has at least one valid rearrangement according to the construction logic above return 0 # If we couldn\'t construct a full result that\'s equal to the input length, it\'s invalid"},{"question":"Implement a class called `Inventory` used to track the inventory in a store. This class will allow items to be added, removed, and have their quantity updated. Business Rules: - Each item in the inventory should have a `name` (string) and a `quantity` (integer). - The `Inventory` class should store items in a dictionary with the item `name` as the key and `quantity` as the value. - The `Inventory` class should have methods to: - Add an item to the inventory. If the item already exists, its quantity should be increased by the given amount. - Remove an item from the inventory. If the item does not exist in the inventory, return `\\"Item not found\\"`. - Update the quantity of an item in the inventory. If the item does not exist, return `\\"Item not found\\"`. The quantity cannot be negative; if a negative value is provided, return `\\"Invalid quantity\\"`. - Check the quantity of a specific item. If the item does not exist, return `\\"Item not found\\"`. - List all items in the inventory along with their quantities in alphabetical order. - The `Inventory` class should maintain the initial inventory state of an instance when it is created with some items. Class Definitions: ```python class Inventory: def __init__(self, initial_inventory=None): Initializes the inventory with the given initial_inventory dictionary. If no initial_inventory is provided, the inventory should be empty. pass def add_item(self, name, quantity): Adds the given quantity of the specified item to the inventory. If the item already exists, increase its quantity by the given amount. pass def remove_item(self, name): Removes the specified item from the inventory. If the item does not exist, return \\"Item not found\\". pass def update_quantity(self, name, quantity): Updates the quantity of the specified item to the given value. If the item does not exist, return \\"Item not found\\". The quantity cannot be negative; if a negative value is provided, return \\"Invalid quantity\\". pass def check_quantity(self, name): Returns the quantity of the specified item. If the item does not exist, return \\"Item not found\\". pass def list_items(self): Returns a list of all items in the inventory along with their quantities, sorted alphabetically by item name. pass ``` Example Usage: ```python store_inventory = Inventory({ \'apples\': 10, \'bananas\': 5, \'oranges\': 7 }) store_inventory.add_item(\'bananas\', 3) store_inventory.add_item(\'grapes\', 2) print(store_inventory.check_quantity(\'bananas\')) # returns 8 store_inventory.update_quantity(\'apples\', 15) print(store_inventory.check_quantity(\'apples\')) # returns 15 print(store_inventory.remove_item(\'mangoes\')) # returns \\"Item not found\\" store_inventory.remove_item(\'bananas\') print(store_inventory.check_quantity(\'bananas\')) # returns \\"Item not found\\" print(store_inventory.list_items()) # returns [(\'apples\', 15), (\'grapes\', 2), (\'oranges\', 7)] ```","solution":"class Inventory: def __init__(self, initial_inventory=None): Initializes the inventory with the given initial_inventory dictionary. If no initial_inventory is provided, the inventory should be empty. if initial_inventory is None: self.inventory = {} else: self.inventory = initial_inventory def add_item(self, name, quantity): Adds the given quantity of the specified item to the inventory. If the item already exists, increase its quantity by the given amount. if name in self.inventory: self.inventory[name] += quantity else: self.inventory[name] = quantity def remove_item(self, name): Removes the specified item from the inventory. If the item does not exist, return \\"Item not found\\". if name in self.inventory: del self.inventory[name] else: return \\"Item not found\\" def update_quantity(self, name, quantity): Updates the quantity of the specified item to the given value. If the item does not exist, return \\"Item not found\\". The quantity cannot be negative; if a negative value is provided, return \\"Invalid quantity\\". if quantity < 0: return \\"Invalid quantity\\" if name in self.inventory: self.inventory[name] = quantity else: return \\"Item not found\\" def check_quantity(self, name): Returns the quantity of the specified item. If the item does not exist, return \\"Item not found\\". if name in self.inventory: return self.inventory[name] else: return \\"Item not found\\" def list_items(self): Returns a list of all items in the inventory along with their quantities, sorted alphabetically by item name. return sorted(self.inventory.items())"},{"question":"You are given a string textbf{S}. Your task is to print all possible substrings of the string textbf{S} in lexicographic sorted order. Input Format A single line containing the string textbf{S}. Constraints 1 leq text{len}(S) leq 10 The string contains only lowercase English letters. Output Format Print the substrings of the string textbf{S} on separate lines in lexicographic sorted order. Sample Input bcda Sample Output a b bc bcd bcda c cd cda d da","solution":"def sorted_substrings(S): Returns all possible substrings of the string S in lexicographic sorted order. substrings = set() n = len(S) for i in range(n): for j in range(i + 1, n + 1): substrings.add(S[i:j]) return sorted(substrings) def print_sorted_substrings(S): Print all possible substrings of the string S in lexicographic sorted order. for substring in sorted_substrings(S): print(substring)"},{"question":"John is analyzing data from a network of servers. Each server logs the time it took to process a certain request in milliseconds. John wants to identify the longest sequence of consecutive entries where the processing time never decreases. For example, if the processing times are [100, 105, 110, 108, 115], the longest non-decreasing sequence is [100, 105, 110]. Help John by writing a program that outputs the length of the longest non-decreasing sequence for each set of logged processing times. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N denoting the number of logged processing times. - The second line contains N space-separated integers representing the processing times. -----Output----- For each test case, print a single integer — the length of the longest non-decreasing sequence. -----Constraints----- - 1 le T le 100 - 1 le N le 1000 - 1 le text{Processing Time} le 10^5 -----Example Input----- 2 5 100 105 110 108 115 6 1 2 2 3 1 5 -----Example Output----- 3 4","solution":"def find_longest_non_decreasing_sequence(test_cases): Finds the length of the longest non-decreasing sequence for each test case. Parameters: - test_cases: A list of test cases where each test case is a list of processing times. Returns: - A list of integers representing the length of the longest non-decreasing sequence for each test case. results = [] for times in test_cases: if not times: results.append(0) continue max_len = cur_len = 1 for i in range(1, len(times)): if times[i] >= times[i - 1]: cur_len += 1 else: if cur_len > max_len: max_len = cur_len cur_len = 1 if cur_len > max_len: max_len = cur_len results.append(max_len) return results def process_input(input_data): Process the raw input into structured test cases. Parameters: - input_data: A list of strings representing the raw input data. Returns: - A list of test cases where each test case is a list of processing times. input_iter = iter(input_data) T = int(next(input_iter)) # Number of test cases test_cases = [] for _ in range(T): N = int(next(input_iter)) # Number of logged processing times processing_times = list(map(int, next(input_iter).split())) test_cases.append(processing_times) return test_cases"},{"question":"A company needs you to implement a function that will analyze sales data and return the longest sequence of consecutive sales increases. You are given a list of daily sales numbers, and your task is to find the length of the longest subsequence where each element is greater than the preceding one. For example: ``` [100, 200, 90, 120, 150, 180, 110, 130] => 4 Explanation: [90, 120, 150, 180] [5, 6, 3, 5, 7, 8, 10, 2] => 5 Explanation: [3, 5, 7, 8, 10] [10, 9, 8, 7] => 1 Explanation: No consecutive increases, single elements are the longest increasing sequences. ``` Write a function: ```python def longest_increasing_subsequence_length(sales: List[int]) -> int: pass ``` Note: - You can assume the list contains at least one sales number. - If there are multiple subsequences with the same length, consider only one for the length.","solution":"from typing import List def longest_increasing_subsequence_length(sales: List[int]) -> int: if not sales: return 0 n = len(sales) longest_length = 1 current_length = 1 for i in range(1, n): if sales[i] > sales[i - 1]: current_length += 1 else: longest_length = max(longest_length, current_length) current_length = 1 longest_length = max(longest_length, current_length) return longest_length"},{"question":"Given an array `arr` of `N` integers and an integer `K`, write a function to find the number of distinct elements in every subarray of size `K`. Example 1: Input: arr = [1, 2, 1, 3, 4, 2, 3], K = 4 Output: [3, 4, 4, 3] Explanation: The distinct elements in first window of size 4 are [1, 2, 1, 3] = 3 The distinct elements in second window are [2, 1, 3, 4] = 4 The distinct elements in third window are [1, 3, 4, 2] = 4 The distinct elements in fourth window are [3, 4, 2, 3] = 3 Example 2: Input: arr = [1, 2, 4, 4], K = 2 Output: [2, 2, 1] Explanation: The distinct elements in first window of size 2 are [1, 2] = 2 The distinct elements in second window are [2, 4] = 2 The distinct elements in third window are [4, 4] = 1 Your Task: You don\'t need to read or print anything. Your task is to complete the function `distinct_elements_in_subarray()` which takes `arr` and `K` as input parameters and returns a list of integers representing the number of distinct elements in each subarray of size `K`. Expected Time Complexity: O(N) Expected Space Complexity: O(K) Constraints: 1 <= N <= 10^5 1 <= arr[i] <= 10^5 1 <= K <= N","solution":"def distinct_elements_in_subarray(arr, K): from collections import defaultdict n = len(arr) if n == 0 or K == 0 or K > n: return [] distinct_count = [] count_map = defaultdict(int) distinct = 0 for i in range(K): if count_map[arr[i]] == 0: distinct += 1 count_map[arr[i]] += 1 distinct_count.append(distinct) for i in range(K, n): if count_map[arr[i - K]] == 1: distinct -= 1 count_map[arr[i - K]] -= 1 if count_map[arr[i]] == 0: distinct += 1 count_map[arr[i]] += 1 distinct_count.append(distinct) return distinct_count"},{"question":"You are given an integer array `nums` and an integer `target`. Your task is to find two distinct indices `i` and `j` in the array such that `nums[i] + nums[j] = target`. Return the indices in the form `(i, j)`, where `i < j`. If there are multiple correct pairs, return any one of them. If no such pairs exist, return `-1 -1`. -----Constraints----- - `2 ≦ |nums| ≦ 10^5` - `-10^9 ≦ nums[i] ≦ 10^9` - `-10^9 ≦ target ≦ 10^9` -----Partial Score----- - 200 points will be awarded for passing the test set satisfying 2 ≦ N ≦ 100. -----Input----- The input is given from Standard Input in the following format: ``` n nums_1 nums_2 ... nums_n target ``` Where `n` is the number of elements in `nums`, followed by the `nums` array elements, and then the `target`. -----Output----- If there exists a pair `i` and `j` such that `nums[i] + nums[j] = target`, print the indices `i` and `j`. If there are multiple correct pairs, return any one of them. If no such pairs exist, return `-1 -1`. -----Sample Input----- 6 2 7 11 15 1 8 9 -----Sample Output----- 0 1 The pair of indices `0` and `1` represents the elements `2` and `7`, which add up to `9`. Other valid outputs might include `4 5`, which gives the elements `1` and `8`.","solution":"def find_two_sum(nums, target): Returns two distinct indices i and j such that nums[i] + nums[j] = target in the form of (i, j) where i < j. Returns (-1, -1) if no such pair exists. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return (-1, -1) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = list(map(int, data[1:n+1])) target = int(data[n+1]) i, j = find_two_sum(nums, target) print(i, j)"},{"question":"# Sum of Minimums Objective Given a 2D list (list of lists) of integers, create a program that returns the sum of the minimum values in each row. E.g. ```python sum_of_minimums([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) => 1 + 4 + 7 => 12 sum_of_minimums([[3, 2, 1], [5, 4, 6], [9, 7, 8]]) => 1 + 4 + 7 => 12 ``` Ready to test your coding skills? Let\'s dive in!","solution":"def sum_of_minimums(arr): Returns the sum of the minimum values in each row of a 2D list. return sum(min(row) for row in arr)"},{"question":"Given a list of n words, write a function to find the k most frequent words in the list. If there are multiple words with the same frequency, return the words in lexicographical order. Example 1: Input: n = 6, k = 2 words = [\\"book\\", \\"pen\\", \\"book\\", \\"pencil\\", \\"pen\\", \\"notebook\\"] Output: [\\"book\\", \\"pen\\"] Explanation: \\"book\\" and \\"pen\\" are the two most frequent words. Example 2: Input: n = 5, k = 3 words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\"] Output: [\\"apple\\", \\"banana\\", \\"orange\\"] Explanation: \\"apple\\" and \\"banana\\" each appear twice, so they are the most frequent. \\"orange\\" appears once and is included because k=3. Your Task: Complete the function kMostFrequentWords() that takes the list of words, n, and k as input parameters and returns a list of the k most frequent words. If there are ties, the words should be returned in lexicographical order. Expected Time Complexity: O(n log k + k log k) Expected Auxiliary Space: O(n + k) Constraints: 1 ≤ n ≤ 10^4 1 ≤ k ≤ n 1 ≤ |words[i]| ≤ 100","solution":"from collections import Counter import heapq def kMostFrequentWords(words, n, k): Returns the k most frequent words in the list. If frequencies are tied, returns words in lexicographical order. # Count the frequency of each word frequency = Counter(words) # Create a heap of (-frequency, word) pairs heap = [(-freq, word) for word, freq in frequency.items()] # Convert list into a heap heapq.heapify(heap) # Extract the k most frequent words most_frequent_words = [heapq.heappop(heap)[1] for _ in range(k)] return most_frequent_words"},{"question":"There are n parcels in a warehouse, each parcel has a weight w_i (1 ≤ w_i ≤ 1000). The manager of the warehouse wants to split these parcels into two groups such that the absolute difference of the sums of weights of the two groups is minimized. Formally, suppose the parcels are divided into two groups A and B, the manager wants to minimize the value of |sum(A) - sum(B)|, where sum(X) denotes the sum of weights of all parcels in group X. Your task is to find the minimal possible value of |sum(A) - sum(B)|. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100). The next line contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 1000), the weights of the parcels. -----Output----- Print the minimal possible value of |sum(A) - sum(B)|. -----Examples----- Input 5 1 2 3 4 5 Output 1 Input 4 10 20 30 40 Output 0 Input 3 2 4 6 Output 0 -----Note----- In the first example, one optimal way to split the parcels into two groups is A = {1, 2, 3} and B = {4, 5}. This results in the sums being sum(A) = 6 and sum(B) = 9, hence the absolute difference is |6 - 9| = 3. However, a better split would be A = {1, 4, 5} and B = {2, 3}, resulting in sums sum(A) = 10 and sum(B) = 5, hence the absolute difference is |10 - 5| = 5. The minimal possible value of |sum(A) - sum(B)| can be found to be 1. In the second example, the parcels can be split into two groups with equal sums: A = {10, 30} and B = {20, 40}, both with a sum of 30, making the absolute difference |30 - 30| = 0. In the third example, the parcels can be split into: A = {2, 4} and B = {6}, resulting in sums sum(A) = 6 and sum(B) = 6, making the absolute difference |6 - 6| = 0.","solution":"def minimize_diff(n, weights): Finds the minimal possible value of the absolute difference of the sums of weights of two groups. :param n: int - number of parcels :param weights: List[int] - list of weights of the parcels :return: int - minimal possible value of |sum(A) - sum(B)| total_weight = sum(weights) target = total_weight // 2 dp = [0] * (target + 1) for weight in weights: for j in range(target, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) min_diff = abs(total_weight - 2 * dp[target]) return min_diff"},{"question":"Write a function that takes two integers, `n` and `m`, and returns the count of distinct ways you can climb a staircase of `n` steps by taking steps of size from the set {1, 2, ..., m}. You can take each step size any number of times but not more than it is needed to exactly reach the `n`th step. Example 1: Input: n = 5, m = 2 Output: 8 Explanation: The different ways to climb 5 steps using steps of size {1, 2} are: 1+1+1+1+1 1+1+1+2 1+1+2+1 1+2+1+1 2+1+1+1 1+2+2 2+1+2 2+2+1 Example 2: Input: n = 3, m = 3 Output: 4 Explanation: The different ways to climb 3 steps using steps of size {1, 2, 3} are: 1+1+1 1+2 2+1 3 Your Task: You don\'t need to read input or print anything. Your task is to complete the function `climbStairs()` which accepts two integers `n` and `m`, and returns the total number of ways to climb the staircase. Expected Time Complexity: O(n*m) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 1000 1 <= m <= 50","solution":"def climbStairs(n, m): Returns the count of distinct ways to climb a staircase of n steps using step sizes from the set {1, 2, ..., m}. dp = [0] * (n + 1) dp[0] = 1 for i in range(1, n + 1): for j in range(1, m + 1): if i >= j: dp[i] += dp[i - j] return dp[n]"},{"question":"You are given a list of integers. Your task is to write a function that will find the integer which appears the most times in the list. If there is a tie (i.e., multiple integers appear the same maximum number of times), return the smallest integer among them. Examples: ```python find_most_frequent([1, 3, 3, 2, 1, 1, 3]) == 1 find_most_frequent([4, 4, 2, 2, 4, 2]) == 2 ``` Good luck!","solution":"def find_most_frequent(lst): Returns the integer that appears the most times in the list. If there is a tie, return the smallest integer among them. from collections import Counter if not lst: # Handling empty list return None count = Counter(lst) max_frequency = max(count.values()) most_frequent_items = [k for k, v in count.items() if v == max_frequency] return min(most_frequent_items)"},{"question":"Design a class `Leaderboard` that supports the following functions: 1. `Leaderboard.addScore(Player player, int score)`: Update the leaderboard by adding the given score to the player\'s score. If the player does not exist in the leaderboard, add them with the given score. 2. `Leaderboard.top(int K)`: Return the sum of the top K highest scores in the leaderboard. 3. `Leaderboard.reset(Player player)`: Reset the score of the given player to zero. You may assume that there are no ties in the scores and the leaderboard starts empty. Examples: Input: ```python leaderboard = Leaderboard() leaderboard.addScore(\\"Alice\\", 50) leaderboard.addScore(\\"Bob\\", 30) leaderboard.addScore(\\"Alice\\", 20) print(leaderboard.top(1)) # returns 70 print(leaderboard.top(2)) # returns 100 leaderboard.reset(\\"Alice\\") print(leaderboard.top(1)) # returns 30 ``` Note: * The leaderboard can have up to 1000 different players. * The `addScore` function will be called at most 10000 times. * The `top` function will be called at most 5000 times. * The `reset` function will be called at most 2000 times.","solution":"class Leaderboard: def __init__(self): self.scores = {} def addScore(self, player, score): Update the leaderboard by adding the given score to the player\'s score. If the player does not exist, add them with the given score. if player in self.scores: self.scores[player] += score else: self.scores[player] = score def top(self, K): Return the sum of the top K highest scores in the leaderboard. top_scores = sorted(self.scores.values(), reverse=True) return sum(top_scores[:K]) def reset(self, player): Reset the score of the given player to zero. if player in self.scores: self.scores[player] = 0"},{"question":"You have been tasked with developing a system for managing customer orders in an online bookstore. For this, you need to implement a program that processes a list of orders containing book titles and quantities, and returns the total number of books ordered. -----Input----- The first line contains an integer N, (1 leq N leq 100), representing the number of orders. The next N lines each contain a string that represents the title of the book (containing a mix of \'a\'–\'z\', \'A\'–\'Z\', and spaces) and an integer Q, the quantity ordered, (1 leq Q leq 10000). Each book title is unique and can contain between 1 and 100 characters. -----Output----- The output shall be a single integer representing the total number of books ordered. -----Examples----- Sample Input: 3 Introduction to Algorithms 5 Clean Code 2 Design Patterns 3 Sample Output: 10","solution":"def total_books_ordered(N, orders): Returns the total number of books ordered from a list of orders. Args: N(int): Number of orders. orders(list of str): List containing book titles and quantities in the format \\"Book Title Q\\". Returns: int: Total number of books ordered. total = 0 for order in orders: data = order.split() quantity = int(data[-1]) total += quantity return total # Example usage: # total_books_ordered(3, [\\"Introduction to Algorithms 5\\", \\"Clean Code 2\\", \\"Design Patterns 3\\"])"},{"question":"You are given two strings str1 and str2. Your task is to determine the minimum number of operations required to convert str1 into str2. The allowed operations are: 1. Insert a character. 2. Remove a character. 3. Replace a character. Write a function `minEditDistance()` that takes two strings str1 and str2 as input and returns the minimum number of edit operations required. Example 1: Input: str1 = \\"horse\\", str2 = \\"ros\\" Output: 3 Explanation: horse -> rorse (replace \'h\' with \'r\') rorse -> rose (remove \'r\') rose -> ros (remove \'e\') Example 2: Input: str1 = \\"intention\\", str2 = \\"execution\\" Output: 5 Explanation: intention -> inention (remove \'t\') inention -> enention (replace \'i\' with \'e\') enention -> exention (replace \'n\' with \'x\') exention -> exection (replace \'n\' with \'c\') exection -> execution (insert \'u\') Your Task: You don\'t need to read input or output anything. Your task is to complete the function `minEditDistance()` which takes two strings str1 and str2 as input parameters and returns an integer representing the minimum number of operations required to convert str1 to str2. Expected Time Complexity: O(m * n) Expected Auxiliary Space: O(m * n) Constraints: 1 ≤ |str1|, |str2| ≤ 100","solution":"def minEditDistance(str1, str2): Returns the minimum number of edit operations required to convert str1 into str2. Operations allowed are: Insert, Remove, Replace. m, n = len(str1), len(str2) # create a 2D array to store the results of sub-problems dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): # if str1 is empty, we need to insert all characters of str2 if i == 0: dp[i][j] = j # if str2 is empty, we need to remove all characters of str1 elif j == 0: dp[i][j] = i # if last characters are the same, ignore them and recur for the remaining strings elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # if last characters are different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i - 1][j], # remove dp[i][j - 1], # insert dp[i - 1][j - 1]) # replace return dp[m][n]"},{"question":"A car dealership has a list of prices for vehicles in their inventory. The management wants to run some promotional offers, and they wish to determine the total value of cars within specific price ranges. To assist them, you need to write a program to process multiple queries regarding the cumulative value of cars within certain price ranges. # Rules: - You will answer Q queries. - Each Qi query has two values Li and Ri representing the lower and upper price bounds (inclusive). - For each query, determine the total value of all car prices within the range [Li, Ri]. # Input: - The first line contains T, the number of test cases. - The first line of each test case contains the value N (number of car prices) and Q (number of queries). - The second line of each test case contains N space-separated integers representing the prices of the cars. - Each of the next Q lines contains Li and Ri, the price range for the i^{th} query. # Output: For each test case, print the total value of cars within the specified price ranges for all Q queries. # Constraints: - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - 1 leq text{Price of a car} leq 10^9 # Subtasks: - (25 points): 1 leq N leq 10^2, 1 leq Q leq 10^2 - (25 points): 1 leq N leq 10^3, 1 leq Q leq 10^3 - (50 points): Original Constraints # Sample Input: ``` 1 5 3 10000 20000 30000 40000 50000 15000 35000 5000 25000 20000 60000 ``` # Sample Output: ``` 50000 30000 140000 ``` # Explanation: - Query 1: Between 15000 and 35000, the car prices are 20000 and 30000. Their total is 50000. - Query 2: Between 5000 and 25000, the car prices are 10000 and 20000. Their total is 30000. - Query 3: Between 20000 and 60000, the car prices are 20000, 30000, 40000, and 50000. Their total is 140000.","solution":"def total_car_value_in_range(test_cases): results = [] for case in test_cases: N, Q, car_prices, queries = case[\'N\'], case[\'Q\'], case[\'car_prices\'], case[\'queries\'] prefix_sum = [0] * (N + 1) # Compute prefix sums for car prices for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + car_prices[i - 1] case_results = [] # Process each query for L, R in queries: lower_bound = find_lower_bound(car_prices, L) upper_bound = find_upper_bound(car_prices, R) if lower_bound == -1 or upper_bound == -1 or lower_bound > upper_bound: case_results.append(0) else: total_value = prefix_sum[upper_bound + 1] - prefix_sum[lower_bound] case_results.append(total_value) results.append(case_results) return results def find_lower_bound(car_prices, L): # Binary search to find the leftmost item >= L left, right = 0, len(car_prices) - 1 while left <= right: mid = (left + right) // 2 if car_prices[mid] >= L: right = mid - 1 else: left = mid + 1 return left if left < len(car_prices) and car_prices[left] >= L else -1 def find_upper_bound(car_prices, R): # Binary search to find the rightmost item <= R left, right = 0, len(car_prices) - 1 while left <= right: mid = (left + right) // 2 if car_prices[mid] <= R: left = mid + 1 else: right = mid - 1 return right if right >= 0 and car_prices[right] <= R else -1"},{"question":"Given an integer N, compute the sum of all even Fibonacci numbers up to N. Input An integer N is given. Output Print the sum of all even Fibonacci numbers less than or equal to N. Constraints * 1 leq N leq 10^{18} Sample Input 1 10 Sample Output 1 10 Sample Input 2 34 Sample Output 2 44 Sample Input 3 1 Sample Output 3 0 Sample Input 4 60 Sample Output 4 44 Example Input 34 Output 44","solution":"def sum_even_fibonacci(N): Returns the sum of all even Fibonacci numbers less than or equal to N. if N < 2: return 0 a, b = 0, 2 sum_even_fib = 0 while b <= N: sum_even_fib += b # Calculate next even Fibonacci number. a, b = b, 4 * b + a return sum_even_fib"},{"question":"Given a string representing a sequence of operations on numbers, evaluate the expression and return the result as an integer. The operations can include addition, subtraction, multiplication, and division. Ensure to follow the operator precedence rules. **Note:** The input string will always be a valid mathematical expression. Examples ``` \\"2+3*2\\" --> 8 \\"10+2*6\\" --> 22 \\"100*2+12\\" --> 212 \\"100*(2+12)\\" --> 1400 ```","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression given as a string and returns the result as an integer. The expression can include addition (+), subtraction (-), multiplication (*), and division (/). The function respects the standard operator precedence rules. return eval(expression)"},{"question":"Given an integer n, return a list of all possible palindromic decompositions of n. A palindromic decomposition of n is a list of strings, where each string is a palindrome and the concatenation of all the strings is equal to n. Example 1: Input: n = 121 Output: [[\\"1\\",\\"2\\",\\"1\\"], [\\"121\\"]] Example 2: Input: n = 1221 Output: [[\\"1\\", \\"2\\", \\"2\\", \\"1\\"], [\\"1\\", \\"22\\", \\"1\\"], [\\"1221\\"]] Example 3: Input: n = 0 Output: [[\\"0\\"]] Example 4: Input: n = 11 Output: [[\\"1\\", \\"1\\"], [\\"11\\"]] Constraints: - 0 <= n <= 10^6 - The digits of n are non-negative.","solution":"def is_palindrome(s): return s == s[::-1] def palindromic_decomposition(n): s = str(n) results = [] def helper(start, path): if start == len(s): results.append(path[:]) return for end in range(start + 1, len(s) + 1): part = s[start:end] if is_palindrome(part): path.append(part) helper(end, path) path.pop() helper(0, []) return results"},{"question":"In a distant, futuristic city, the government has implemented a new system for traffic management. They have a number of traffic lights positioned in a straight line across the main highway. Each traffic light can have only one of two colors at any given time: Red (\'R\') indicating stop or Green (\'G\') indicating go. The authorities want to ensure a smooth flow of traffic by guaranteeing that no two consecutive traffic lights are Red. To achieve this, they need to make some changes to the initial configuration of the traffic lights. Given the initial configuration of traffic lights, where \'R\' represents Red and \'G\' represents Green, determine the minimum number of changes needed to ensure there are no two consecutive \'R\' lights. Input The first line of the input contains a string s (1 ≤ |s| ≤ 1,000,000) — the initial configuration of traffic lights. Output Print one integer — the minimum number of changes required to make sure there are no two consecutive \'R\' lights. Examples Input RGRRGR Output 1 Input RRRR Output 2 Input GRGRG Output 0","solution":"def min_changes_to_avoid_consecutive_reds(s): changes = 0 i = 0 while i < len(s) - 1: if s[i] == \'R\' and s[i + 1] == \'R\': changes += 1 i += 2 # Skip the next light as we need one change else: i += 1 return changes"},{"question":"Given a binary tree, the task is to find the minimum value in the binary tree. A binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child. Example 1: Input: 10 / 5 15 / / 2 8 12 20 Output: 2 Example 2: Input: 7 / 8 9 / 10 Output: 7 Your Task: Complete findMinValue() function that takes the root of the binary tree as an argument and returns the minimum value in the binary tree. The output is printed by the driver code. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 <= Number of nodes in the tree <= 10^4 -10^9 <= Data of a node <= 10^9 Note: You can consider that the binary tree nodes in the input will adhere to the constraints.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def findMinValue(root): Returns the minimum value in the binary tree Args: root (TreeNode): The root of the binary tree Returns: int: The minimum value in the binary tree if root is None: return float(\'inf\') left_min = findMinValue(root.left) right_min = findMinValue(root.right) return min(root.val, left_min, right_min)"},{"question":"You are given n integers a1, a2,..., an. For each ai you need to determine the length of the longest contiguous subarray in which the ai is the maximum element. For example, suppose that we have the array [1, 3, 3, 2, 1, 3, 1]. For the element `3` at position 2 and 3, the longest contiguous subarray in which `3` is the maximum element is the subarray [3, 3]. Similarly, for the element `3` at position 6, the longest contiguous subarray in which `3` is the maximum element is just [3]. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a1, a2,..., an (1 ≤ ai ≤ 1000). Output Output n integers, where the i-th integer is the length of the longest contiguous subarray in which ai is the maximum element. Example Input 7 1 3 3 2 1 3 1 Output 1 2 2 1 1 1 1 Note In the example: - For the first `1`, the subarray [1] has the maximum element 1, so the length is 1. - For the first `3`, the subarray [3, 3] has the maximum element 3, so the length is 2. - For the second `3`, the subarray [3, 3] has the maximum element 3, so the length is 2. - For the `2`, the subarray [2] has the maximum element 2, so the length is 1. - For the next `1`, the subarray [1] has the maximum element 1, so the length is 1. - For the third `3`, the subarray [3] has the maximum element 3, so the length is 1. - For the last `1`, the subarray [1] has the maximum element 1, so the length is 1.","solution":"def longest_max_subarray_lengths(n, arr): Returns the lengths of the longest contiguous subarray for each element in arr in which the respective element is the maximum. result = [0] * n subarray_lengths = [] # Calculate lengths of contiguous subarrays where each element is max i = 0 while i < n: count = 1 while i + 1 < n and arr[i] == arr[i + 1]: count += 1 i += 1 subarray_lengths.append((arr[i], count)) i += 1 # Map results back to the original positions index = 0 for value, length in subarray_lengths: for _ in range(length): result[index] = length index += 1 return result"},{"question":"Task Alex is a fan of both music and coding. He has a playlist of songs, each represented as a string of note names (like \\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\", \\"F\\", \\"G\\"). Alex considers a song beautiful if, for every note in the song, the note in the next position is either the same, exactly one step up, or exactly one step down in the alphabetical sequence from the current note. Given a playlist (an array of song strings), determine for each song whether it is beautiful or not. # Example For the playlist `[\\"ABC\\", \\"BAB\\", \\"AC\\"]`, the result should be `[true, true, false]`. ``` \\"ABC\\" is beautiful because A -> B (1 step up), B -> C (1 step up). \\"BAB\\" is beautiful because B -> A (1 step down), A -> B (1 step up). \\"AC\\" is not beautiful because A -> C is not 1 step up or down. ``` # Input/Output - `[input]` array of strings `playlist` - The playlist of songs. - `playlist.length >= 1` and `playlist[i].length >= 1` - `[output]` array of boolean values - For each song in the playlist, output `true` if the song is beautiful, `false` otherwise.","solution":"def is_beautiful_song(song): Determines if a song is beautiful based on the given criteria. for i in range(len(song) - 1): if abs(ord(song[i]) - ord(song[i + 1])) > 1: return False return True def beautiful_playlist(playlist): Determines if each song in the playlist is beautiful. return [is_beautiful_song(song) for song in playlist]"},{"question":"In a distant kingdom, the royal family has an ancient tradition of passing down a sacred necklace made of magical beads. Each bead is of a specific color, and the necklace is represented as a sequence of lowercase letters where each letter represents a bead of a particular color. The magical property of the necklace is that no two adjacent beads can be of the same color. However, over the years, some beads have lost their color, and you are given a sequence where some letters are replaced with a question mark \'?\', representing beads whose color is lost. Your task is to restore the color of these beads such that the necklace retains its magical property — no two adjacent beads can be of the same color. You should replace each \'?\' with a lowercase letter such that no adjacent characters are the same. If there is more than one solution, any valid string will be accepted. Input: A single line of input containing a string `s` (1 ≤ |s| ≤ 10^5) representing the bead sequence, with \'a\' to \'z\' representing colored beads and \'?\' representing beads that have lost their color. Output: Output the restored bead sequence. If it is not possible to restore the sequence under the given constraints, output \\"IMPOSSIBLE\\". Constraints: - The restored string should have no two adjacent characters being the same. - The string can contain between 1 and 100,000 characters. SAMPLE INPUT 1: a?b SAMPLE OUTPUT 1: acb SAMPLE INPUT 2: ???a? SAMPLE OUTPUT 2: bcbab","solution":"def restore_necklace(s): def get_possible_replacement(prev_ch, next_ch): for ch in \'abcdefghijklmnopqrstuvwxyz\': if ch != prev_ch and ch != next_ch: return ch s = list(s) n = len(s) for i in range(n): if s[i] == \'?\': prev_ch = s[i-1] if i > 0 else \'\' next_ch = s[i+1] if i < n-1 else \'\' s[i] = get_possible_replacement(prev_ch, next_ch) for i in range(1, n): if s[i] == s[i-1]: return \\"IMPOSSIBLE\\" return \'\'.join(s)"},{"question":"Riya is fond of strings and mathematics. One day she came across a unique problem involving both. The challenge is to transform a given string into another string by performing a sequence of specific operations. The operations allowed are: 1. Swap any two characters in the string. 2. Replace any character with any other character. 3. Delete any single character. 4. Insert any character at any position. Riya aims to find the minimum number of operations required to transform string S1 into string S2. INPUT: The first line consists of an integer T, the number of test cases. For each test case, the next two lines contain strings S1 and S2, respectively. OUTPUT: For each test case, return the minimum number of operations needed to transform S1 into S2. 1 ≤ T ≤ 100 1 ≤ |S1|, |S2| ≤ 100 SAMPLE INPUT 2 kitten sitting flaw lawn SAMPLE OUTPUT 3 2","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to transform s1 into s2. m, n = len(s1), len(s2) # Create a table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, the only option is to insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, the only option is to remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are the same, ignore last characters and recur for remaining string elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] # If last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n] def process_input(T, cases): results = [] for case in cases: s1, s2 = case results.append(min_operations(s1, s2)) return results"},{"question":"Given an undirected tree of n nodes, your task is to destroy the tree by repeatedly removing leaves (i.e., nodes with degree 1). You should continue removing leaves until only one node or no nodes remain. Each round of removal constitutes a \\"step.\\" Your task is to determine the total number of steps required to destroy the tree. -----Input----- The first line contains an integer n (1 leq n leq 100) — the number of nodes in the tree. Each of the next n-1 lines contains two integers u and v (1 leq u, v leq n; u neq v) — there is an edge between nodes u and v. -----Output----- In the first and only line, print a single integer — the number of steps required to destroy the tree. -----Examples----- Input 5 1 2 1 3 3 4 3 5 Output 2 Input 3 1 2 1 3 Output 1 Input 6 1 2 2 3 3 4 4 5 5 6 Output 3 -----Note----- In the first example, here\'s how the tree is destroyed in 2 steps: - Step 1: Remove leaves {2, 4, 5}. - Step 2: Remove leaves {1, 3}. In the second example, here\'s how the tree is destroyed in 1 step: - Step 1: Remove leaves {2, 3}. In the third example, here\'s how the tree is destroyed in 3 steps: - Step 1: Remove leaves {1, 6}. - Step 2: Remove leaves {2, 5}. - Step 3: Remove leaves {3, 4}. The output is the total number of steps required to destroy the tree.","solution":"def destroy_tree(n, edges): from collections import defaultdict, deque if n == 1: return 0 adj = defaultdict(list) degree = [0] * (n + 1) for u, v in edges: adj[u].append(v) adj[v].append(u) degree[u] += 1 degree[v] += 1 # Initialize the queue with all leaf nodes queue = deque([i for i in range(1, n + 1) if degree[i] == 1]) steps = 0 # Perform BFS-like leaf removal until only one or no nodes remain while n > 1: steps += 1 leaves_count = len(queue) for _ in range(leaves_count): leaf = queue.popleft() n -= 1 for neighbor in adj[leaf]: degree[neighbor] -= 1 if degree[neighbor] == 1: queue.append(neighbor) return steps # Example of input: number of nodes and list of edges n = 5 edges = [(1, 2), (1, 3), (3, 4), (3, 5)] print(destroy_tree(n, edges)) # Output should be 2"},{"question":"John is organizing a small chess tournament and wants to ensure that every player competes against every other player exactly once. The tournament is structured such that each match takes place between two players. Given the number of players participating in the tournament, help John determine the total number of matches that will take place. -----Input----- An integer ( n ) representing the number of players participating in the tournament. ( 1 leq n leq 100 ). -----Output----- Output a single integer representing the total number of matches that will be played. -----Examples----- Sample Input: 4 Sample Output: 6 Sample Input: 6 Sample Output: 15","solution":"def calculate_total_matches(n): Returns the total number of matches that will be played in a tournament where each player competes against every other player exactly once. if n < 2: return 0 return (n * (n - 1)) // 2"},{"question":"Convert a Sorted Array to a Height-Balanced Binary Search Tree You are given a sorted array of distinct integers nums. Write a function that can convert it into a Height-Balanced Binary Search Tree (BST). A Height-Balanced BST is defined as a binary tree in which the depth of the two subtrees of every node never differs by more than one. Implement the function: ```python def sortedArrayToBST(nums: List[int]) -> TreeNode: ``` where `nums` is a list of distinct integers sorted in ascending order and returns the root node of the Height-Balanced BST. ------ Input ------ A single line containing the elements of the sorted array in the form of a space-separated string of integers. ------ Output ------ Return the root node of the Height-Balanced BST. ------ Example Input ------ -10 -3 0 5 9 ------ Example Output ------ [0, -10, 5, NULL, -3, NULL, 9] ------ Explanation ------ You can return any height-balanced binary search tree. In this case, the root node is 0, [-10, 5] forms the left and right subtree respectively and their corresponding children can be seen as [-, -3] and [null, 9]. ------ Constraints ------ 1. 1 ≤ nums.length ≤ 10^4 2. -10^4 ≤ nums[i] ≤ 10^4 3. The `nums` array is sorted in a strictly increasing order. **Notes:** - The output should be an array representation of the tree where each set of values represents each level of the tree from left to right. NULL must be used where no node is present.","solution":"from typing import List, Optional # Definition for a binary tree node. class TreeNode: def __init__(self, val: int = 0, left: \'TreeNode\' = None, right: \'TreeNode\' = None): self.val = val self.left = left self.right = right def sortedArrayToBST(nums: List[int]) -> Optional[TreeNode]: if not nums: return None def convertListToBST(left: int, right: int) -> Optional[TreeNode]: if left > right: return None mid = (left + right) // 2 node = TreeNode(nums[mid]) node.left = convertListToBST(left, mid - 1) node.right = convertListToBST(mid + 1, right) return node return convertListToBST(0, len(nums) - 1) def treeToList(root: TreeNode) -> List[Optional[int]]: result = [] if not root: return result queue = [root] while any(queue): node = queue.pop(0) if node: result.append(node.val) queue.append(node.left) queue.append(node.right) else: result.append(None) # Removing trailing None values while result and result[-1] is None: result.pop() return result"},{"question":"Given a list of integers, your task is to find the number that appears an odd number of times. There will always be only one number with an odd count in the list. Your function should return this number. For example: ```python find_odd([20, 1, 1, 2, 2, 3, 3, 20, 4, 20, 4, 5, 5]) ``` returns 20, because 20 appears thrice (an odd number of times) in the list. ```python find_odd([10, 3, 3, 10, 5, 3, 3, 5, 5, 5, 5, 5, 3]) ``` returns 3, because 3 appears five times (an odd number of times) in the list. ```python find_odd([7]) ``` returns 7, because 7 appears once (an odd number of times). If the input list is empty, return `None`.","solution":"def find_odd(numbers): Given a list of integers, returns the number that appears an odd number of times. Assumes there is always exactly one such number. if not numbers: return None counts = {} for number in numbers: if number in counts: counts[number] += 1 else: counts[number] = 1 for number, count in counts.items(): if count % 2 != 0: return number"},{"question":"A librarian needs to rearrange books on a shelf in such a way that all books of the same category are grouped together. The librarian has information about the category of each book in the current arrangement. Help the librarian by writing a program that reorders the books on the shelf such that books from the same category are placed next to each other. Input: - The first line contains an integer N, the number of books on the shelf. - The second line contains N space-separated integers where each integer represents the category of the corresponding book. Output: - Print N space-separated integers representing the rearranged list of books, grouped by their category. Constraints: 1 ≤ N ≤ 10^5 1 ≤ category ≤ 10^6 Sample Input: 7 1 2 2 3 1 1 3 Sample Output: 1 1 1 2 2 3 3","solution":"def rearrange_books(N, categories): Rearranges the books on the shelf such that books of the same category are grouped together. Args: N : int : The number of books on the shelf. categories : List[int] : List of integers where each integer represents the category of the corresponding book. Returns: List[int] : List of books rearranged by category. from collections import defaultdict # Dictionary to keep lists of books by category category_dict = defaultdict(list) # Group books by category for category in categories: category_dict[category].append(category) # Flatten the grouped books back into one list, sorted by the keys rearranged_books = [] for category in sorted(category_dict.keys()): rearranged_books.extend(category_dict[category]) return rearranged_books # For testing purposes, we can set the input directly if __name__ == \\"__main__\\": N = 7 categories = [1, 2, 2, 3, 1, 1, 3] print(rearrange_books(N, categories))"},{"question":"You are given an array of integers and two types of queries. For each query, you need to either update an element in the array or find the sum of a subarray. Input: The first line contains an integer N, the length of the array. The second line contains N space-separated integers representing the elements of the array. The third line contains an integer Q, the number of queries. Each of the next Q lines contains a query of one of the following two types: 1. \\"1 X Y\\" where 1 denotes an update query, and you need to update the element at index X (0-based) to value Y. 2. \\"2 L R\\" where 2 denotes a range sum query, and you need to find the sum of the subarray from index L to index R (inclusive). Output: For each query of type 2, output the sum of the specified subarray. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^4 1 ≤ array elements, X, Y ≤ 10^9 0 ≤ L ≤ R < N SAMPLE INPUT 5 1 2 3 4 5 3 2 1 3 1 2 10 2 1 3 SAMPLE OUTPUT 9 16 Explanation: For the first query \\"2 1 3\\", the subarray is [2, 3, 4] and the sum is 9. For the second query \\"1 2 10\\", we update the element at index 2 to 10, so the array becomes [1, 2, 10, 4, 5]. For the third query \\"2 1 3\\", the subarray is [2, 10, 4] and the sum is 16.","solution":"class NumArray: def __init__(self, nums): self.nums = nums self.n = len(nums) self.tree = [0] * (self.n + 1) for i in range(self.n): self._update_tree(i, nums[i]) def _update_tree(self, idx, val): idx += 1 while idx <= self.n: self.tree[idx] += val idx += idx & -idx def update(self, idx, val): original_val = self.nums[idx] self.nums[idx] = val self._update_tree(idx, val - original_val) def sum_range(self, left, right): return self._sum(right) - self._sum(left - 1) def _sum(self, idx): idx += 1 result = 0 while idx > 0: result += self.tree[idx] idx -= idx & -idx return result def process_queries(n, nums, queries): numArray = NumArray(nums) results = [] for query in queries: q_type, x, y = query if q_type == \'1\': numArray.update(x, y) elif q_type == \'2\': results.append(numArray.sum_range(x, y)) return results"},{"question":"You are given a list of positive integers and a target sum. You need to determine if any combination of numbers from the list (including multiple instances of the same number) can sum up to the target value. You may use a number from the list more than once. Write a function that takes in two parameters: a list of integers and a target sum. The function should return True if any combination of numbers in the list can be used to sum to the target value, and False otherwise. Function Signature: ```python def can_sum(arr: List[int], target: int) -> bool: ``` # Input Format - The first input line contains an integer n (1 leq n leq 10^3), the length of the array. - The second input line contains n space-separated integers representing the array arr (1 leq arr[i] leq 10^9). - The third input line contains the integer target (1 leq target leq 10^9). # Output Format - Print \\"True\\" if any combination of numbers from the list can sum to the target value, otherwise print \\"False\\". # Examples Sample Input 1: ``` 4 2 3 7 8 11 ``` Sample Output 1: ``` True ``` Explanation 1: One possible combination that can sum to 11 is 3 + 8. Sample Input 2: ``` 3 5 6 7 9 ``` Sample Output 2: ``` False ``` Explanation 2: There is no combination of the given numbers that sums to 9. # Constraints - The input list will have at least one integer and at most 10^3 integers. - Each integer in the list will be between 1 and 10^9. - The target sum will be between 1 and 10^9.","solution":"def can_sum(arr, target): Determines if any combination of numbers from the list can sum to the target. Uses dynamic programming to solve the problem. dp = [False] * (target + 1) dp[0] = True for i in range(1, target + 1): for num in arr: if i - num >= 0: dp[i] = dp[i] or dp[i - num] if dp[i]: break return dp[target]"},{"question":"In the fictional country of Technoland, the government planned to test the efficiency of its postal service by analyzing delivery operations in a particular city. The city has a number of postal offices, each responsible for a certain set of deliveries. Every delivery leaves from a postal office and reaches its destination without any intermediary stops, but the delivery time might differ due to varying road conditions and distances. Your task is to write a program to assess the delivery efficiency, which can be measured by the maximum time taken to deliver a package from any postal office to its destination. Given the details of the delivery requests, calculate this maximum delivery time. -----Input----- The first line contains an integer M, the number of postal offices in the city (1 leq M leq 3000). The second line contains an integer D, the number of delivery requests (1 leq D leq 10000). Then follow D lines, each containing three integers S_i, E_i, and T_i, where S_i is the index of the starting postal office (1-based index), E_i is the index of the destination postal office (1-based index), and T_i is the time taken for that delivery in minutes (1 leq T_i leq 1000). -----Output----- Write one line with an integer, the maximum delivery time among all the provided requests. -----Examples----- Sample Input 1: 3 4 1 2 15 1 3 7 2 3 5 3 1 9 Sample Output 1: 15 Sample Input 2: 2 3 1 2 25 1 2 30 2 1 20 Sample Output 2: 30","solution":"def max_delivery_time(M, D, deliveries): Returns the maximum delivery time among all the provided requests. Parameters: M : int : Number of postal offices D : int : Number of delivery requests deliveries : List of tuple : Each tuple contains (S_i, E_i, T_i) representing start office, end office, and time taken for delivery. Returns: int : Maximum delivery time. max_time = 0 for delivery in deliveries: _, _, T_i = delivery if T_i > max_time: max_time = T_i return max_time"},{"question":"Sarah is practicing for a programming competition, and she comes across the challenge of finding the longest palindrome that can be made from a given string s by reordering its characters. However, she realizes that some of her strings have characters that cannot form palindromes directly. To solve this, Sarah decides to remove the minimum number of characters required to form a palindrome from each given string. A palindrome is a string that reads the same backward as forward. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing a word s. -----Output----- For each test case, output a single line containing a single integer: the minimum number of characters that must be removed to make the string s a palindrome or to form the longest possible palindrome. -----Constraints----- - 1 ≤ T ≤ 30 - 1 ≤ |s| ≤ 105 - s contains only lowercase English letters. -----Example----- Input: 3 abcde aaabb aabbcc Output: 4 0 0 -----Explanation----- Example case 1. The longest palindrome that can be formed from “abcde” is any single character, so four characters must be removed. Example case 2. The word \\"aaabb\\" can be rearranged to \\"ababa\\" or \\"baaab\\", both of which are palindromes, hence no characters need to be removed. Example case 3. For the word \\"aabbcc\\", it can be rearranged to \\"abcba\\" or \\"acbca\\" or other permutations, all of which are valid palindromes, so no characters need to be removed.","solution":"from collections import Counter def min_removals_to_palindrome(s): Returns the minimum number of characters that must be removed to make the string s a palindrome. freq = Counter(s) odd_count = sum(1 for count in freq.values() if count % 2 != 0) # If odd_count is 0 or 1, no characters need to be removed to form a palindrome return max(0, odd_count - 1) def solve(test_cases): results = [] for s in test_cases: results.append(min_removals_to_palindrome(s)) return results"},{"question":"Given an integer `n`, determine if it can be expressed as the sum of two or more consecutive positive integers. If it can, print \\"YES\\" followed by the sequence of integers. If it cannot, print \\"NO\\". Input: First line of the input contains a single integer T denoting number of test cases. For each test case, a single integer n is given. Output: For each test case, output \\"YES\\" followed by the sequence of consecutive positive integers if `n` can be expressed as such. Otherwise, output \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 10^6 SAMPLE INPUT 3 3 15 2 SAMPLE OUTPUT YES 1 2 YES 1 2 3 4 5 NO Explanation: For the first case, 3 can be represented as the sum of two consecutive integers: 1 + 2. For the second case, 15 can be represented as the sum of consecutive integers: 1 + 2 + 3 + 4 + 5. For the third case, 2 cannot be expressed as the sum of two or more consecutive positive integers; hence, the answer is \\"NO\\".","solution":"def can_be_expressed_as_sum_of_consecutive(n): Determines if \'n\' can be expressed as the sum of two or more consecutive positive integers. If it can, returns \\"YES\\" followed by the sequence. If it cannot, returns \\"NO\\". for start in range(1, n): total = start next_val = start + 1 while total < n: total += next_val next_val += 1 if total == n: return \\"YES \\" + \\" \\".join(map(str, range(start, next_val))) return \\"NO\\" def process_test_cases(T, test_cases): Processes T test cases and determines the output for each case results = [] for n in test_cases: result = can_be_expressed_as_sum_of_consecutive(n) results.append(result) return results"},{"question":"Given an array of integers nums and an integer k, your task is to find the maximum number of distinct elements possible in any subarray of length k from the given array. Example: Input: nums = [4, 3, 1, 1, 2, 3, 3], k = 4 Output: 4 Explanation: The subarray [4, 3, 1, 1], [3, 1, 1, 2], [1, 1, 2, 3], and [1, 2, 3, 3] contain 3, 3, 3, and 3 distinct numbers respectively. So, the maximum number of distinct elements possible in any subarray of length 4 is 4. Your Task: You don\'t need to take input or print anything. Just complete the function maxDistinctElements(nums, k) that takes the nums array and an integer k as parameters and returns an integer representing the maximum number of distinct elements possible in any subarray of length k. Constraints: 1 <= nums.length <= 10^5 1 <= nums[i] <= 10^4 1 <= k <= nums.length","solution":"def maxDistinctElements(nums, k): Returns the maximum number of distinct elements possible in any subarray of length k. Parameters: nums (list): List of integers. k (int): Length of the subarray. Returns: int: Maximum number of distinct elements in any subarray of length k. n = len(nums) if k > n: return 0 # Using a sliding window approach window = {} distinct_count = 0 max_distinct = 0 for i in range(n): # Add the current element in the window if nums[i] in window: window[nums[i]] += 1 else: window[nums[i]] = 1 distinct_count += 1 # Remove the element that\'s sliding out of the window if i >= k: if window[nums[i - k]] == 1: del window[nums[i - k]] distinct_count -= 1 else: window[nums[i - k]] -= 1 # Update the maximum number of distinct elements if i >= k - 1: max_distinct = max(max_distinct, distinct_count) return max_distinct"},{"question":"Write a function that generates the n-th row of Pascal\'s Triangle. Pascal’s Triangle is a triangular array of the binomial coefficients. The rows of Pascal’s Triangle are conventionally enumerated starting with row n = 0 at the top. For example: ``` The 0-th row is [1] The 1st row is [1, 1] The 2nd row is [1, 2, 1] The 3rd row is [1, 3, 3, 1] The 4th row is [1, 4, 6, 4, 1] ... ``` Your task is to write a function `getPascalRow(n)` that takes a non-negative integer `n` as input and returns the `n`-th row of Pascal\'s Triangle. ```python def getPascalRow(n): # Your code here pass # Example usage: # getPascalRow(0) -> [1] # getPascalRow(1) -> [1, 1] # getPascalRow(2) -> [1, 2, 1] # getPascalRow(3) -> [1, 3, 3, 1] # getPascalRow(4) -> [1, 4, 6, 4, 1] ``` Note: - You should use integer arithmetic to avoid floating-point precision issues. - Aim for a solution with O(n) time complexity.","solution":"def getPascalRow(n): Generates the n-th row of Pascal\'s Triangle. Args: n : int : non-negative integer representing the row index (0-based) Returns: List[int] : the n-th row of Pascal\'s Triangle if n == 0: return [1] row = [1] for k in range(1, n+1): row.append(row[k-1] * (n - k + 1) // k) return row"},{"question":"You are given a list of meeting time intervals in the format of (start, end). Each interval represents the start and end time of a meeting. Determine if a person can attend all given meetings without any overlaps. Example 1: Input: intervals = [[0, 30], [5, 10], [15, 20]] Output: 0 Explanation: The person cannot attend all meetings as they overlap. Example 2: Input: intervals = [[7, 10], [2, 4]] Output: 1 Explanation: The person can attend all meetings as none of them overlap. Your Task: You don\'t need to read input or print anything. Complete the function canAttendMeetings() which takes a list of intervals as an input parameter and returns 1 if the person can attend all meetings or 0 otherwise. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(1) Constraints: - 0 ≤ number of intervals ≤ 10^4 - 0 ≤ start, end ≤ 10^5","solution":"def canAttendMeetings(intervals): Determine if a person can attend all meetings without any overlaps. Parameters: intervals (List[List[int]]): A list of meeting time intervals. Returns: int: 1 if the person can attend all meetings without any overlaps, 0 otherwise. if not intervals: return 1 # Sort intervals based on the start time intervals.sort(key=lambda x: x[0]) # Check for overlaps for i in range(1, len(intervals)): if intervals[i][0] < intervals[i-1][1]: return 0 return 1"},{"question":"A company hosts a weekly coding competition where participants solve N problems. Each problem is either easy or hard. After the competition, the company wants to analyze the performance of the participants by scoring their submissions. Each problem follows this scoring rule: - If a participant solves an easy problem correctly, they get 1 point. - If a participant solves a hard problem correctly, they get 2 points. - If a participant solves any problem incorrectly, they get 0 points. Given a string S of length N representing the type of each problem (\'E\' for easy and \'H\' for hard) and a string T of the same length representing correctness of each submission (\'C\' for correct and \'I\' for incorrect), calculate the total score for the participant. -----Constraints----- - 1 leq |S| leq 10^5 - S_i is \'E\' or \'H\'. - T_i is \'C\' or \'I\'. -----Input----- Input is given from Standard Input in the following format: S T -----Output----- Print the total score for the participant. -----Sample Input----- EHEHHE CCICIC -----Sample Output----- 6 The total score is calculated as follows: - The first problem is easy and correct, so the score is 1. - The second problem is hard and correct, so the score is 2. - The third problem is easy and incorrect, so the score is 0. - The fourth problem is hard and correct, so the score is 2. - The fifth problem is hard and incorrect, so the score is 0. - The sixth problem is easy and correct, so the score is 1. Thus, the total score is 1 + 2 + 0 + 2 + 0 + 1 = 6.","solution":"def calculate_score(S, T): Calculates the total score based on the problem types and correctness of submissions. Parameters: S (str): A string representing the type of each problem (\'E\' for easy, \'H\' for hard). T (str): A string representing the correctness of each submission (\'C\' for correct, \'I\' for incorrect). Returns: int: The total score for the participant. total_score = 0 for problem_type, correctness in zip(S, T): if correctness == \'C\': if problem_type == \'E\': total_score += 1 elif problem_type == \'H\': total_score += 2 return total_score"},{"question":"Sara is an accountant and she\'s working on precision multiplication of large numbers. She needs to multiply two given strings that represent non-negative integers. She wants a function that does this without converting the strings into integers directly, as they can be extremely large. Write a function `multiply_strings(X, Y)` that takes two string arguments, `X` and `Y`, representing non-negative integers, and returns their multiplication also as a string. You cannot use any built-in large integer libraries or convert the strings directly to integers. Implement your solution using a method similar to the way you manually multiply numbers. Input format: The first line contains the string `X`. The second line contains the string `Y`. Output format: Output a single string, the result of multiplying `X` and `Y`. Constraints: - 1 ≤ len(X), len(Y) ≤ 1000 - `X` and `Y` consist only of digits and do not contain leading zeros, except for the number `0` itself. Example Input: ``` 123 456 ``` Example Output: ``` 56088 ``` Explanation: To multiply 123 by 456 manually, we would do: ``` 123 x 456 _________ 738 (123 * 6) 615 (123 * 5, shifted one position to the left) 492 (123 * 4, shifted two positions to the left) _________ 56088 ```","solution":"def multiply_strings(X, Y): if X == \\"0\\" or Y == \\"0\\": return \\"0\\" len_x, len_y = len(X), len(Y) result = [0] * (len_x + len_y) X = X[::-1] Y = Y[::-1] for i in range(len_x): for j in range(len_y): digit_multiplication = int(X[i]) * int(Y[j]) result[i + j] += digit_multiplication if result[i + j] >= 10: result[i + j + 1] += result[i + j] // 10 result[i + j] %= 10 while len(result) > 1 and result[-1] == 0: result.pop() result = result[::-1] return \'\'.join(map(str, result))"},{"question":"Complete the `isomorphicStrings` method to determine if two given strings are isomorphic. Two strings are isomorphic if the characters in one string can be replaced to get the second string, preserving the order. No two characters may map to the same character, but a character can map to itself. For example: - Given `s1 = \\"egg\\"`, `s2 = \\"add\\"`, return `true` because \'e\' can be mapped to \'a\' and \'g\' to \'d\'. - Given `s1 = \\"foo\\"`, `s2 = \\"bar\\"`, return `false` because \'o\' cannot map to both \'a\' and \'r\'. - Given `s1 = \\"paper\\"`, `s2 = \\"title\\"`, return `true` because \'p\' to \'t\', \'a\' to \'i\', \'p\' to \'t\', \'e\' to \'l\', and \'r\' to \'e\'. The function signature is: ```python def isomorphicStrings(s1: str, s2: str) -> bool: ```","solution":"def isomorphicStrings(s1: str, s2: str) -> bool: Determine if two strings are isomorphic. if len(s1) != len(s2): return False mapping_s1_to_s2 = {} mapping_s2_to_s1 = {} for char1, char2 in zip(s1, s2): if char1 in mapping_s1_to_s2: if mapping_s1_to_s2[char1] != char2: return False if char2 in mapping_s2_to_s1: if mapping_s2_to_s1[char2] != char1: return False mapping_s1_to_s2[char1] = char2 mapping_s2_to_s1[char2] = char1 return True"},{"question":"Two hikers are trekking through a forest and want to find the shortest path back to their campsite. The forest is represented as a grid of cells, where each cell can either be passable (indicated by \'0\') or impassable (indicated by \'1\'). The hikers start at the top-left corner of the grid and the campsite is at the bottom-right corner. They can only move one cell at a time, either to the right, down, left or up. Write a function to determine the minimum number of steps required for the hikers to reach the campsite. If it is not possible to reach the campsite, return -1. Function Description Complete the `shortestPath` function in the editor below. `shortestPath` has the following parameters(s): - `grid`: a 2D list of binary integers representing the forest grid Returns - int: the minimum number of steps to reach the campsite, or -1 if it is not possible Input Format - The first line contains two space-separated integers n and m, where n is the number of rows and m is the number of columns. - Each of the next n lines contains m space-separated binary integers. Constraints - 2 leq n, m leq 100 - Each grid cell is either \'0\' or \'1\' Sample Input 3 3 0 0 0 1 0 1 1 0 0 Sample Output 4 Explanation The grid looks like this: 0 0 0 1 0 1 1 0 0 The minimum path is (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) This path has a total of 4 steps.","solution":"from collections import deque def shortestPath(grid): Returns the minimum number of steps required to reach the campsite, or -1 if it is not possible to reach the campsite. :param grid: List of List of int :return: int n, m = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 # Directions for moving right, down, left, and up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS initialization queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Write a function called `findFirstNonRepeatingChar` that takes a string and returns the first character that does not repeat. If all characters are repeating or the string is empty, return an empty string. Examples ``` \\"stress\\" => \\"t\\" \\"moonmen\\" => \\"e\\" \\"aabbcc\\" => \\"\\" \\"\\" => \\"\\" \\"teeter\\" => \\"r\\" ``` Constraints `0 <= input.length <= 100` Characters in the string are case-sensitive, meaning \'a\' and \'A\' are considered different characters.","solution":"def findFirstNonRepeatingChar(s): Returns the first non-repeating character in the string s. If all characters are repeating or the string is empty, returns an empty string. char_count = {} # Build a count of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"Consider an integer array `nums` and an integer `k`, the task is to find the length of the longest subarray whose sum is at most `k`. **Input Format:** - The first line contains the values of `n` (number of elements in the array) and `k` (the maximum allowed sum). - The second line contains `n` space-separated integers representing the elements of the array `nums`. **Output Format:** - Output the length of the longest subarray whose sum is at most `k`. **Example:** Input: ``` 5 7 1 2 1 0 1 ``` Output: ``` 5 ``` **Explanation:** The subarray `[1, 2, 1, 0, 1]` has a sum of `5`, which is less than or equal to `k=7`. This is the longest possible subarray that satisfies the given condition.","solution":"def longest_subarray_with_sum_at_most_k(nums, k): Finds the length of the longest subarray whose sum is at most k. Parameters: - nums (list of int): List of integers representing the array. - k (int): Maximum allowed sum. Returns: - int: Length of the longest subarray whose sum is at most k. max_len = 0 current_sum = 0 start = 0 for end in range(len(nums)): current_sum += nums[end] # If the current sum exceeds k, shrink the window from the start while current_sum > k: current_sum -= nums[start] start += 1 # Calculate the length of the current valid subarray max_len = max(max_len, end - start + 1) return max_len"},{"question":"In a remote town of the country Byteland, there lived a developer named Ben. He loved prime numbers and often tried to incorporate them into his work. One day, he came up with a new challenge for his friends: to find the closest prime numbers around a given number `x`. Specifically, he wanted to find the nearest prime number smaller than or equal to `x` and the nearest prime number larger than or equal to `x`. If `x` itself is a prime, then it should be included in both cases. Input The input contains a single integer `x` (2 ≤ x ≤ 10^6) which represents the number Ben wants to investigate the closest primes for. Output The output should contain two integers: the nearest prime number smaller than or equal to `x` (inclusive) and the nearest prime number larger than or equal to `x` (inclusive). Examples Input 10 Output 7 11 Input 17 Output 17 17 Input 4 Output 3 5","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def closest_primes(x): Returns the closest prime numbers around the given number x. if is_prime(x): return (x, x) lower = x while lower > 1: lower -= 1 if is_prime(lower): break upper = x while True: upper += 1 if is_prime(upper): break return (lower, upper)"},{"question":"You are given an array of integers representing the height of trees in a forest. Each element in the array represents the height of a tree at that position. You need to cut down some trees in order to create a subarray (a contiguous segment) of trees where the height strictly decreases from left to right. You need to determine the length of the longest possible strictly decreasing subarray that you can create by cutting down any number of trees. The trees that are not part of the subarray are to be considered \\"cut down\\". Input The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of trees in the forest. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), the heights of the trees. Output Print the length of the longest possible strictly decreasing subarray. Example Input 6 1 3 2 1 5 4 Output 3 Explanation One possible subarray is [3, 2, 1] which is strictly decreasing and of length 3. Another possible subarray of length 3 is [5, 4, 3], if we consider it separately after cutting trees to split the array.","solution":"def longest_strictly_decreasing_subarray(n, heights): Given an array of integers representing the height of trees, returns the length of the longest possible strictly decreasing subarray. :param n: Number of trees (int) :param heights: List of tree heights (list of int) :return: Length of the longest strictly decreasing subarray (int) if n == 1: return 1 max_length = 1 current_length = 1 for i in range(1, n): if heights[i] < heights[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 # Reset length for new segment max_length = max(max_length, current_length) # Check last subarray return max_length"},{"question":"Given an integer array, implement a function to rearrange the array in such a way that all the even numbers come before all the odd numbers while maintaining the relative order of the even and odd numbers. Example 1: Input: arr = [3, 1, 2, 4] Output: [2, 4, 3, 1] Explanation: The even numbers (2, 4) come before the odd numbers (3, 1) and their relative order is maintained. Example 2: Input: arr = [0, 1, 2] Output: [0, 2, 1] Explanation: The even numbers (0, 2) come before the odd number (1) and their relative order is maintained. Your Task: You don\'t need to read input or print anything. Your task is to complete the function reorder_array() which takes the integer list arr as input and returns the list with rearranged elements. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ len(arr) ≤ 10^5 0 ≤ arr[i] ≤ 10^6","solution":"def reorder_array(arr): Rearranges the input array such that all even numbers come before all odd numbers, while maintaining the relative order of the even and odd numbers. even_numbers = [] odd_numbers = [] for num in arr: if num % 2 == 0: even_numbers.append(num) else: odd_numbers.append(num) return even_numbers + odd_numbers"},{"question":"Write a function ```longest_common_prefix(strs)``` that takes a list of strings as input and returns the longest common prefix string amongst those strings. If there is no common prefix, the function should return an empty string. For example: - Given ```[\\"flower\\",\\"flow\\",\\"flight\\"]```, the function should return ```\\"fl\\"```. - Given ```[\\"dog\\",\\"racecar\\",\\"car\\"]```, the function should return ```\\"\\"```. The input list of strings may contain any number of strings from 1 to 1000, and the length of each string will not exceed 200 characters. Each string will consist only of lowercase English letters.","solution":"def longest_common_prefix(strs): if not strs: return \\"\\" prefix = strs[0] for s in strs[1:]: while s.find(prefix) != 0: prefix = prefix[:-1] if not prefix: return \\"\\" return prefix"},{"question":"You are given an integer array A of size N. You want to obtain a strictly increasing array B using exactly M operations. In one operation, you can: - Choose any integer x (1 ≤ x ≤ 1000) and insert it into the array at any position. The goal is to create the lexicographically largest possible strictly increasing array B. If two arrays A and B have the same length, we say that A is lexicographically larger than B if there exists an index i such that A_{1}=B_{1}, A_{2}=B_{2}, ..., A_{i-1}=B_{i-1}, A_{i}>B_{i}. Output the lexicographically largest array B, or \\"IMPOSSIBLE\\" if it is not possible to obtain a strictly increasing array using exactly M operations. ----- Input Format ----- - The first line contains an integer T, the number of test cases. The test cases follow. - The first line of each test case contains two integers N and M, the size of the original array and the number of operations, respectively. - The second line contains N integers, the original array A. ----- Output Format ----- For each test case, output the lexicographically largest strictly increasing array B, or \\"IMPOSSIBLE\\" if it is not possible to obtain such an array with the given constraints. ----- Constraints ----- 1 ≤ T ≤ 10 0 ≤ N ≤ 1000 1 ≤ M ≤ 1000 1 ≤ A[i] ≤ 1000 ----- Sample Input 1 ----- 3 4 1 2 3 4 5 5 2 4 5 6 7 8 0 3 ----- Sample Output 1 ----- 2 3 4 5 1000 4 5 6 7 8 1000 1000 1 1000 1000 1000 ----- Explanation 1 ----- - In the first test case, we add 1000 to the end to make the largest possible strictly increasing array. - In the second test case, adding two 1000s to the end yields the largest possible strictly increasing array. - In the third test case, starting with an empty array and adding three 1000s yields the largest possible strictly increasing array.","solution":"def lexicographically_largest_strictly_increasing_array(T, cases): results = [] for N, M, A in cases: if N == 0: # All operations will just be inserting 1000s results.append(\\" \\".join(map(str, [1000] * M))) continue # We cannot form a strictly increasing sequence with M operations if A is not already strictly increasing if any(A[i] >= A[i+1] for i in range(N-1)): results.append(\\"IMPOSSIBLE\\") continue # We insert 1000s such that the array remains strictly increasing and lexicographically largest B = A[:] for _ in range(M): B.append(1000) results.append(\\" \\".join(map(str, B))) return results def process_input_output(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) cases = [] index = 1 for _ in range(T): N, M = map(int, lines[index].split()) A = list(map(int, lines[index + 1].split())) if N > 0 else [] cases.append((N, M, A)) index += 2 results = lexicographically_largest_strictly_increasing_array(T, cases) for result in results: print(result)"},{"question":"The central park of a bustling metropolis has a new security measure which consists of placing surveillance cameras in such a way that guards can monitor the entire park through the fewest number of cameras. The park is represented by a grid with some cells being accessible (\'.\') and others being blocked (\'#\'). A guard standing on an accessible cell can monitor all four neighboring cells (up, down, left, right), including their own cell. Your task is to determine the minimum number of surveillance cameras needed to monitor all accessible cells in the park grid. -----Input----- The first line contains two integers n and m (1 leq n, m leq 1000) — the number of rows and columns in the park grid. The next n lines each consist of m characters, either \'.\' (accessible cell) or \'#\' (blocked cell). -----Output----- Print a single integer which is the minimum number of surveillance cameras needed. -----Examples----- Input 3 3 # #.# # Output 1 Input 4 4 #..# .... ...# #. Output 3 Input 3 3 ... ... ... Output 1 -----Note----- In the first sample, placing a camera in the middle accessible cell will cover all accessible cells. In the second sample, placing three cameras in the appropriate positions will cover all the accessible cells. In the third sample, placing one camera in any cell will cover all accessible cells.","solution":"def min_cameras(n, m, grid): Given the park grid with accessible cells marked as \'.\' and blocked cells as \'#\', this function returns the minimum number of surveillance cameras needed to monitor all accessible cells. # Check all cells to see if there are any accessible cells for row in range(n): for col in range(m): if grid[row][col] == \'.\': # If there is at least one accessible cell, we need just one camera. return 1 # If there are no accessible cells, we need 0 cameras. return 0"},{"question":"Given a list of integers, create a function that groups all the even numbers followed by all the odd numbers, while maintaining their original relative order. If the list is empty, return an empty list. Examples ``` input: [1, 2, 3, 4, 5, 6] output: [2, 4, 6, 1, 3, 5] input: [5, 2, 9, 1, 5, 6] output: [2, 6, 5, 9, 1, 5] input: [] output: [] ```","solution":"def group_evens_and_odds(lst): Groups all the even numbers followed by all the odd numbers in a list, while maintaining their original relative order. Parameters: lst (list): The list of integers. Returns: list: A list with even numbers followed by odd numbers, preserving the original order. evens = [x for x in lst if x % 2 == 0] odds = [x for x in lst if x % 2 != 0] return evens + odds"},{"question":"Write a function that determines if a given string is a valid identifier according to the following rules: 1. The first character must be a letter (a-z, A-Z) or an underscore (_). 2. Subsequent characters must be letters, digits (0-9), or underscores. 3. Identifiers must not be keywords in Python (such as `False`, `class`, `return`, etc.). For example, \\"_myVar1\\" is a valid identifier, but \\"1Var\\" is not because it starts with a digit. Write a function `is_valid_identifier(s: str) -> bool` that returns `True` if the given string is a valid identifier and `False` otherwise. -----Input----- The function takes a single string `s` which is the identifier to be checked. -----Output----- The function returns a boolean: `True` if `s` is a valid identifier, and `False` otherwise. -----Examples----- is_valid_identifier(\\"_myVar1\\") -> True is_valid_identifier(\\"1Var\\") -> False is_valid_identifier(\\"False\\") -> False is_valid_identifier(\\"class\\") -> False is_valid_identifier(\\"valid_identifier\\") -> True -----Note----- Consider using Python\'s built-in set of keywords and the `str.isidentifier()` method to help determine if a string is a valid identifier.","solution":"import keyword def is_valid_identifier(s: str) -> bool: Returns True if the given string is a valid Python identifier according to the rules, and False otherwise. if s in keyword.kwlist: return False return s.isidentifier()"},{"question":"Alex received a string which represents a scrambled version of his friend\'s phone number, but when he received it, a single character, \'-\', was added somewhere within the number string. This character doesn\'t belong there, and Alex needs to reconstruct the original phone number. Your task is to write a program that removes the \'-\' and outputs the possible valid phone number in a format where the first digit is non-zero. Note that there may be multiple possible valid phone numbers that can be constructed by removing the \'-\', but Alex wants the smallest possible valid phone number. -----Input----- The first line contains the scrambled string (without spaces). The length of this string is not less than 2 characters and not more than 30 characters. The string contains only digits (\'0\'-\'9\') and a single \'-\'. -----Output----- Print the smallest valid phone number that can be obtained by removing the \'-\'. A valid phone number is one where the first digit is non-zero. -----Examples----- Input 3-1456 Output 13456 Input -1234 Output 1234 Input 2345- Output 2345","solution":"def reconstruct_phone_number(scrambled): Takes a scrambled phone number string with a single \'-\' character and returns the smallest valid phone number (where the first digit is non-zero) after removing the \'-\'. # Remove the \'-\' character from the scrambled string scrambled = scrambled.replace(\'-\', \'\') # Sort the digits to get the smallest possible number sorted_digits = sorted(list(scrambled)) # Find the first non-zero digit to place at the front to make the smallest valid phone number for i, digit in enumerate(sorted_digits): if digit != \'0\': # Move the first non-zero digit to the start sorted_digits.insert(0, sorted_digits.pop(i)) break return \'\'.join(sorted_digits)"},{"question":"Deepak loves prime numbers. He wants to find all pairs of primes (p, q) such that p < q and p + q = n for a given number n. Could you help Deepak find all such pairs? -----Input----- The first line contains an integer t (1 le t le 10^3) — the number of test cases. Each of the next t lines contains a single integer n (2 le n le 10^5) — the number for which Deepak wants to find the prime pairs. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print a new line containing the prime pairs (p, q) such that p < q and p + q = n. Each pair should be printed in the format \\"(p, q)\\". If there are multiple pairs, print them in increasing order of p. If no such pairs exist, print \\"NO PAIRS\\". -----Example----- Input 3 10 12 27 Output (3, 7) (5, 5) (5, 7) NO PAIRS -----Note----- In the first test case, the pairs that sum up to 10 are (3, 7) and (5, 5). In the second test case, the only pair is (5, 7). In the third test case, there are no such pairs. Hints: 1. Use Sieve of Eratosthenes to generate prime numbers up to the maximum possible value of n across all test cases. 2. For each n, find pairs of primes that sum to n.","solution":"def sieve_of_eratosthenes(max_num): is_prime = [True] * (max_num + 1) is_prime[0], is_prime[1] = False, False for start in range(2, int(max_num**0.5) + 1): if is_prime[start]: for multiple in range(start * start, max_num + 1, start): is_prime[multiple] = False return [num for num, prime in enumerate(is_prime) if prime] def get_prime_pairs(n, primes): pairs = [] primes_set = set(primes) for p in primes: if p < n and (n - p) in primes_set and p <= n - p: pairs.append((p, n - p)) return pairs def find_prime_pairs(t, cases): max_n = max(cases) primes = sieve_of_eratosthenes(max_n) result = [] for n in cases: pairs = get_prime_pairs(n, primes) if pairs: result.append(\\" \\".join(f\\"({p}, {q})\\" for p, q in pairs)) else: result.append(\\"NO PAIRS\\") return result"},{"question":"You have been provided a list of strings and you need to implement two methods encode() and decode() to compress and decompress the list of strings. Your task is to ensure that the decompression correctly restores the original list of strings. Example 1: Input: [\\"we\\", \\"say\\", \\":\\", \\"yes\\"] Output: \\"(an encoded string) -> [\\"we\\", \\"say\\", \\":\\", \\"yes\\"]\\" Explanation: The encode method compresses the list of strings into one string, and the decode method should decompress that string back into the original list. Example 2: Input: [\\"hello\\", \\"world\\"] Output: \\"(an encoded string) -> [\\"hello\\", \\"world\\"]\\" Explanation: The encode method compresses the list of strings into one string, and the decode method should decompress that string back into the original list. Your Task: You need to implement two methods: 1. encode(strs: List[str]) -> str: Compresses a list of strings to a single string. 2. decode(s: str) -> List[str]: Decompresses a single string back to a list of strings. Expected Time Complexity: O(n) for both encode and decode. Expected Auxiliary Space: O(1) for both encode and decode. Constraints: 1 <= len(strs) <= 200 0 <= len(str) <= 1000","solution":"def encode(strs): Encodes a list of strings to a single string. Args: strs (List[str]): the list of strings to encode Returns: str: the encoded string encoded = \'\'.join(f\'{len(s)}:{s}\' for s in strs) return encoded def decode(s): Decodes a single string to a list of strings. Args: s (str): the string to decode Returns: List[str]: the list of decoded strings decoded, i = [], 0 while i < len(s): j = s.find(\':\', i) length = int(s[i:j]) i = j + 1 + length decoded.append(s[j + 1:i]) return decoded"},{"question":"Consider an online gaming platform that keeps track of player activity. Each player has a unique ID and engages in gaming sessions, which can overlap. The platform wants to know the maximum number of players active at any given time during the recorded sessions. Your task is to write a program that determines this maximum number of concurrently active players given the session start and end times. -----Input----- The first line of the input contains an integer 1 le P le 1000, the number of players. Then, P descriptions of gaming sessions follow. Each description contains two integers 0 le start_i < end_i le 10000, which represent the start and end times of a session for player i. -----Output----- Output the maximum number of players that were active at the same time. -----Examples----- Sample Input: 3 1 5 2 7 4 6 Sample Output: 3","solution":"def max_concurrent_players(sessions): Determine the maximum number of concurrently active players. Args: sessions (List[List[int]]): A list of sessions where each session is a list containing the start and end time of a player\'s session. Returns: int: The maximum number of players active at the same time. events = [] # Create a list of event points, +1 for start and -1 for end for start, end in sessions: events.append((start, 1)) events.append((end, -1)) # Sort events by time, breaking ties by type of event (end before start if same time) events.sort(key=lambda x: (x[0], x[1])) current_active = 0 max_active = 0 # Iterate through events to calculate max concurrency for time, change in events: current_active += change if current_active > max_active: max_active = current_active return max_active"},{"question":"Given a grid of integers, write a function `find_largest_island(grid)` that finds and returns the size of the largest \\"island\\" in the grid. An island is defined as a group of horizontally or vertically connected \'1\'s (representing land). You may assume the edges of the grid are surrounded by water (0s), meaning that the grid has a border of \'0\'s. For example, in the grid below: ``` grid = [ [0, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 1], [0, 1, 1, 0, 0], [0, 0, 1, 0, 0] ] ``` - The first island has a size of 3. - The second island has a size of 4. - The third island has a size of 1. The function should return 4 as the size of the largest island. **Function Signature:** ```python def find_largest_island(grid: List[List[int]]) -> int: pass ``` **Note:** - You can assume the grid dimensions are at most 50x50. - Your solution should be efficient with a time complexity not exceeding O(n*m), where n and m are the dimensions of the grid. **Example:** ```python grid = [ [0, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 1], [0, 1, 1, 0, 0], [0, 0, 1, 0, 0] ] assert find_largest_island(grid) == 4 ```","solution":"from typing import List def find_largest_island(grid: List[List[int]]) -> int: def dfs(i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0: return 0 grid[i][j] = 0 # mark as visited size = 1 size += dfs(i + 1, j) size += dfs(i - 1, j) size += dfs(i, j + 1) size += dfs(i, j - 1) return size max_island_size = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: island_size = dfs(i, j) max_island_size = max(max_island_size, island_size) return max_island_size"},{"question":"Given a string s that consists only of the characters \'a\' and \'b\', determine the number of characters that need to be removed so that all remaining characters in the string alternate between \'a\' and \'b\'. -----Constraints----- - 1 leq |s| leq 1000 - s consists only of the characters \'a\' and \'b\' -----Input----- Input is given from Standard Input in the following format: s -----Output----- Print the minimum number of characters to be removed so that the string alternates between \'a\' and \'b\'. -----Sample Input----- aaab -----Sample Output----- 2","solution":"def min_removals_to_alternate(s): Given a string of \'a\' and \'b\', return the minimum number of removals required to make the string alternate between \'a\' and \'b\'. removal_count = 0 for i in range(1, len(s)): if s[i] == s[i-1]: removal_count += 1 return removal_count"},{"question":"Maria is trying to organize a series of marathon races. Each race will have a certain number of participants, and each participant will be assigned a unique bib number from 1 to N, where N is the total number of participants. Maria needs your help to ensure that the bib numbers are distributed in such a way that the sum of the bib numbers in any subset of participants with exactly K members is distinct from the sum of the bib numbers in any subset of participants with K+1 or more members. If such a distribution is not possible, output \\"Impossible\\". \\"-----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line of input, which has two integers: N, the number of participants, and K, the subset size. -----Output:----- For each test case, output a single line with \\"Possible\\" or \\"Impossible\\". -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ K ≤ N -----Sample Input:----- 2 5 2 6 4 -----Sample Output:----- Possible Impossible -----EXPLANATION:----- For the first test case with N=5 and K=2, we can choose subsets that meet the criteria: [1, 2] and [3, 4] have sums 3 and 7 respectively. And no subset with 3 or more elements has the same sums. For the second test case with N=6 and K=4, it\'s impossible to select distinct sums for all subsets of size 4 or more as the sum of all 6 elements would be repeated among the subset sums for K=5 and K=6.\\",\\"","solution":"def can_distribute_bibs(T, test_cases): results = [] for N, K in test_cases: if K > N // 2: results.append(\\"Impossible\\") else: results.append(\\"Possible\\") return results"},{"question":"Write a function that takes a list of strings representing various time intervals in the format \\"hh:mm\\" and returns the total time in the format \\"hh hours, mm minutes\\". The input strings represent durations of time spent on different tasks, and the total should represent the sum of these durations. Example: Input: ``` [\\"01:20\\", \\"02:35\\", \\"00:50\\", \\"01:15\\"] ``` Output: ``` 5 hours, 60 minutes ``` Additional Example: Input: ``` [\\"00:45\\", \\"00:45\\", \\"01:30\\", \\"02:00\\"] ``` Output: ``` 5 hours, 0 minutes ``` Note: Make sure that the resulting minutes value should always be less than 60 by appropriately converting excess minutes into hours.","solution":"def total_time(intervals): Takes a list of strings representing various time intervals in the format \\"hh:mm\\" and returns the total time in the format \\"hh hours, mm minutes\\". Parameters: intervals (list): A list of strings representing time intervals. Returns: str: The total time in the format \\"hh hours, mm minutes\\". total_minutes = 0 # Calculate total minutes for interval in intervals: hours, minutes = map(int, interval.split(\\":\\")) total_minutes += hours * 60 + minutes # Convert total minutes to hours and minutes total_hours = total_minutes // 60 remaining_minutes = total_minutes % 60 return f\\"{total_hours} hours, {remaining_minutes} minutes\\""},{"question":"Given a string paragraph, where each sentence is terminated by a period \'.\', your task is to reverse the words in each sentence while maintaining the sentence order. Ensure each sentence starts with an uppercase letter and the rest of the letters are in lowercase. Example 1: Input: paragraph = \\"Hello world. Today is a great day.\\" Output: \\"World hello. Day great a is today.\\" Explanation: The words in each sentence are reversed but the order of the sentences remains unchanged. Example 2: Input: paragraph = \\"Coding is fun. Solve problems daily.\\" Output: \\"Fun is coding. Daily problems solve.\\" Explanation: The words in each sentence are reversed but the order of the sentences remains unchanged. Constraints: The input string paragraph is non-empty and contains at most 10^5 characters. Each sentence in paragraph starts with an uppercase letter followed by lowercase letters and ends with a period \'.\'. There are no extra spaces between words or sentences.","solution":"def reverse_words_in_sentences(paragraph): Reverse the words in each sentence of the given paragraph while maintaining the sentence order. Ensure each sentence starts with an uppercase letter and the rest of the letters are in lowercase. sentences = paragraph.split(\'. \') reversed_sentences = [] for sentence in sentences: words = sentence.rstrip(\'.\').split(\' \') reversed_words = \' \'.join(reversed(words)).capitalize() reversed_sentences.append(reversed_words) return \'. \'.join(reversed_sentences) + \'.\'"},{"question":"You are given an array of integers `a` of size `n` and an integer `m`, and you are tasked with forming a new array `b` of size `n` such that each element of `b` is the sum of exactly `m` different elements from `a`. The new array `b` is formed based on the following rule: - Each element `b[i]` is calculated as the sum of elements from `a` starting from index `i` to `i + m - 1` Input The first line contains two integers `n` and `m` (1 ≤ m ≤ n ≤ 100) — the size of the array `a` and the fixed number of elements to sum for each element in `b`. The second line contains `n` integers `a[0], a[1], ..., a[n-1]` (0 ≤ a[i] ≤ 1000). Output Output one line containing `n - m + 1` integers, representing the new array `b`. Examples Input ``` 5 3 1 2 3 4 5 ``` Output ``` 6 9 12 ``` Input ``` 6 2 10 20 30 40 50 60 ``` Output ``` 30 50 70 90 110 ``` Note In the first example: - b[0] = a[0] + a[1] + a[2] = 1 + 2 + 3 = 6 - b[1] = a[1] + a[2] + a[3] = 2 + 3 + 4 = 9 - b[2] = a[2] + a[3] + a[4] = 3 + 4 + 5 = 12 In the second example: - b[0] = a[0] + a[1] = 10 + 20 = 30 - b[1] = a[1] + a[2] = 20 + 30 = 50 - b[2] = a[2] + a[3] = 30 + 40 = 70 - b[3] = a[3] + a[4] = 40 + 50 = 90 - b[4] = a[4] + a[5] = 50 + 60 = 110","solution":"def form_new_array(n, m, a): Forms a new array b such that each element b[i] is the sum of exactly m different elements from a. Parameters: n (int): Size of the array a m (int): Number of elements to sum for each element in b a (list): List of integers Returns: list: List of n - m + 1 integers representing the new array b b = [] for i in range(n - m + 1): sum_m_elements = sum(a[i:i + m]) b.append(sum_m_elements) return b"},{"question":"Alice is learning about palindrome numbers - numbers that read the same forwards and backwards. She is fascinated by them and wants to find the smallest palindrome number that is greater than or equal to a given integer M. Additionally, to make it more interesting, she wants to ensure that the sum of the digits of this palindrome number is a prime number. Implement a function that takes the integer M as input and returns the smallest palindrome number greater than or equal to M with a prime digit sum. -----Constraints----- - 1 ≤ M ≤ 100000 -----Input----- The input is given from Standard Input in the following format: M -----Output----- Print the smallest palindrome number that is greater than or equal to M and has a prime digit sum. -----Sample Input----- 123 -----Sample Output----- 131 Explanation: 131 is the smallest palindrome number greater than or equal to 123 whose digit sum (1 + 3 + 1 = 5) is a prime number (5). -----Note----- A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_palindrome(num): return str(num) == str(num)[::-1] def is_prime(num): if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def digit_sum(num): return sum(int(digit) for digit in str(num)) def smallest_palindrome_with_prime_digit_sum(M): while True: if is_palindrome(M) and is_prime(digit_sum(M)): return M M += 1"},{"question":"Henry loves to collect ancient coins. He has recently acquired a set of coins and noticed that each coin has a number inscribed on it. Now, he wants to arrange these coins in such a way that the sum of any three consecutive coins is divisible by a given number k. Help Henry by writing a program that checks if it\'s possible to reorder the coins such that the sum of any three consecutive coins is divisible by k. If it\'s possible, return \\"YES\\", otherwise return \\"NO\\". -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 1000) — the number of test cases. Each test case consists of two lines. The first line contains two integers n (3 leq n leq 100) — the number of coins, and k (1 leq k leq 100) — the divisor. The second line contains n integers representing the numbers inscribed on the coins. -----Output----- For each test case, output \\"YES\\" if it\'s possible to reorder the coins such that the sum of any three consecutive coins is divisible by k. Otherwise, output \\"NO\\". -----Examples----- Input 3 3 3 1 2 3 4 5 5 10 15 20 5 6 7 13 9 5 18 Output YES YES NO -----Note----- In the first test case, ordering the coins as [1, 3, 2] makes the sum of any three consecutive coins (6) divisible by 3. In the second test case, any ordering works because each number is already divisible by 5, thus any three consecutive sums will also be divisible by 5. In the third test case, no ordering will make the sum of three consecutive coins divisible by 6.","solution":"def can_reorder_to_divisible_by_k(t, cases): results = [] for i in range(t): n, k = cases[i][0] coins = cases[i][1] # A naive check for the problem is to try all permutations (which is not efficient for larger n) from itertools import permutations possible = False for perm in permutations(coins): valid = True for j in range(n): if (perm[j] + perm[(j + 1) % n] + perm[(j + 2) % n]) % k != 0: valid = False break if valid: possible = True break if possible: results.append(\'YES\') else: results.append(\'NO\') return results"},{"question":"Katie is working on a problem where she needs to find a way to partition an array of integers into two subarrays such that the sums of the two subarrays are as equal as possible. Given an array of integers, determine the minimum possible absolute difference between the sums of the two subarrays after partitioning the array. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the size of the array. The second line contains space-separated integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ 10^5) — the original array. -----Output----- Print one integer — the minimum possible absolute difference between the sums of the two subarrays. -----Examples----- Input 4 1 2 3 4 Output 0 Input 5 10 20 15 30 25 Output 0","solution":"def min_abs_difference_partition(n, nums): Finds the minimum possible absolute difference between the sums of partitioned subarrays. Args: n : int : size of the array nums : List[int] : the array of integers Returns: int : minimum possible absolute difference total_sum = sum(nums) # Initialize a boolean DP array dp = [False] * (total_sum // 2 + 1) dp[0] = True # Populate the DP array for num in nums: for j in range(total_sum // 2, num - 1, -1): dp[j] = dp[j] or dp[j - num] # Find the maximum sum that is achievable by any subset for i in range(total_sum // 2, -1, -1): if dp[i]: return total_sum - 2 * i"},{"question":"Given a tree with `N` nodes and `N-1` weighted edges, find the maximum weight of a simple path (a path that does not revisit any node) that starts and ends at different nodes. Constraints * 2 leq N leq 100 * Each edge weight is an integer between 1 and 100. Input Input is given from Standard Input in the following format: ``` N u1 v1 w1 u2 v2 w2 ... u(N-1) v(N-1) w(N-1) ``` Each of the following `N-1` lines contains three integers `ui`, `vi`, and `wi`, denoting an edge between nodes `ui` and `vi` with weight `wi`. Output Print the maximum weight of a simple path in the tree. Examples Input ``` 4 1 2 3 2 3 4 2 4 2 ``` Output ``` 7 ``` Input ``` 3 1 2 1 2 3 2 ``` Output ``` 3 ```","solution":"def find_maximum_weight_path(N, edges): from collections import defaultdict import heapq # Build the adjacency list for the graph graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Helper function to find the farthest node and its distance from the given start node def find_farthest_node(start): visited = set() max_heap = [(-0, start)] farthest_node = start max_distance = 0 while max_heap: current_distance, node = heapq.heappop(max_heap) current_distance = -current_distance if node in visited: continue visited.add(node) if current_distance > max_distance: max_distance = current_distance farthest_node = node for neighbor, weight in graph[node]: if neighbor not in visited: heapq.heappush(max_heap, (-(current_distance + weight), neighbor)) return farthest_node, max_distance # Step 1: Find the farthest node from any arbitrary node (e.g., node 1) farthest_from_start, _ = find_farthest_node(1) # Step 2: Find the farthest node from the farthest node found in step 1 _, max_distance = find_farthest_node(farthest_from_start) return max_distance # Parsing function to read input and call the main function def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) edges = [] index = 1 for _ in range(N - 1): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) edges.append((u, v, w)) index += 3 result = find_maximum_weight_path(N, edges) print(result)"},{"question":"You are given a sequence of integers and several queries. Each query requires you to perform an operation on a specified subarray. The operations can be of two types: - Type 1: Update the element at a given position to a new value. - Type 2: Find the maximum value in a given subarray. Can you answer all the queries? -----Input----- The first line contains two integers n and q (1 le n, q le 100000) — the number of elements in the sequence and the number of queries, respectively. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the initial elements of the sequence. The next q lines contain queries in one of the following two formats: 1. 1 i x (1 le i le n, 1 le x le 10^9) — assign a_i the value x. 2. 2 l r (1 le l le r le n) — find the maximum value in the subarray a_l, a_{l+1}, ldots, a_r. -----Output----- For each query of the second type, print one integer: the maximum value in the specified subarray. -----Example----- Input 5 3 1 2 3 4 5 2 1 3 1 3 10 2 1 3 Output 3 10","solution":"class SegmentTree: def __init__(self, data): n = len(data) self.n = n self.tree = [0] * (2 * n) self.build(data) def build(self, data): for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, index, value): pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) def query(self, left, right): left += self.n right += self.n + 1 res = -1 while left < right: if left % 2 == 1: res = max(res, self.tree[left]) left += 1 if right % 2 == 1: right -= 1 res = max(res, self.tree[right]) left //= 2 right //= 2 return res def perform_queries(n, a, queries): segment_tree = SegmentTree(a) result = [] for query in queries: if query[0] == 1: _, i, x = query segment_tree.update(i - 1, x) elif query[0] == 2: _, l, r = query result.append(segment_tree.query(l - 1, r - 1)) return result"},{"question":"Given a string s consisting only of characters \'a\', \'b\', and \'c\', return the length of the longest substring where the characters occur in alphabetical order. The characters do not need to be consecutive, but they must appear in the order \'a\' before \'b\' before \'c\'. Example: Input: \\"abacbcab\\" Output: 3 Explanation: The longest substring where characters appear in alphabetical order is \\"abc\\", which has a length of 3. Input: \\"aaabbbccc\\" Output: 3 Explanation: The longest substring where characters appear in alphabetical order is \\"abc\\", which has a length of 3. Input: \\"ccbaa\\" Output: 0 Explanation: There is no substring that meets the order requirement.","solution":"def longest_alphabetical_order_substring(s): Returns the length of the longest substring where the characters occur in alphabetical order. longest_length = 0 for i in range(len(s)): found_a = False found_b = False found_c = False for j in range(i, len(s)): if s[j] == \'a\': found_a = True elif s[j] == \'b\' and found_a: found_b = True elif s[j] == \'c\' and found_a and found_b: found_c = True if found_a and found_b and found_c: longest_length = max(longest_length, 3) break return longest_length"},{"question":"You are given a binary tree with n nodes. Each node is assigned a positive integer value. Your task is to find a path in the tree such that the sum of the values along the path is maximum and the path must be the longest possible one among those paths which have the same maximum sum. -----Input----- The first line contains a single integer n (1 leq n leq 100,000), denoting the number of nodes in the binary tree. The second line contains n positive integers a_1, a_2, ldots, a_n (1 leq a_i leq 1,000,000), where a_i is the value assigned to the i-th node. Then n - 1 lines follow, each containing two integers u, v (1 leq u, v leq n), describing an edge (u, v) in the tree. Note that u and v are distinct. -----Output----- Output a single line with two integers: the sum of the values along the path that has the maximum sum and the length of this path. -----Examples----- Input 5 3 2 1 10 1 1 2 1 3 2 4 2 5 Output 16 4 Input 3 1 1 1 1 2 1 3 Output 3 3 Input 4 8 5 3 2 1 2 2 3 3 4 Output 18 4 -----Note----- In the first sample, the path with the maximum sum is 4 to 2 to 1 to 2 to 5. The sum is 16 and the length is 4 because the path contains 4 nodes. In the second sample, the path with the maximum sum is 2 to 1 to 3, with a sum of 3 and a length of 3 as the longest path with maximum sum.","solution":"from collections import defaultdict def find_max_sum_and_length(n, values, edges): # Building tree adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Depth-First Search to find the maximum sum path def dfs(node, parent): current_sum = values[node-1] max_path_sum = current_sum max_length = 0 # Traverse all children for neighbor in tree[node]: if neighbor == parent: continue child_sum, child_length = dfs(neighbor, node) if child_sum > max_path_sum - current_sum: max_path_sum = child_sum + current_sum max_length = child_length + 1 elif child_sum == max_path_sum - current_sum: if child_length + 1 > max_length: max_length = child_length + 1 return max_path_sum, max_length # Find max sum path from any node result_sum, result_length = 0, 0 for i in range(1, n + 1): cur_sum, cur_length = dfs(i, -1) if cur_sum > result_sum: result_sum = cur_sum result_length = cur_length elif cur_sum == result_sum: if cur_length > result_length: result_length = cur_length return result_sum, result_length + 1 # Add 1 because length is between nodes # Sample Input Conversion Function def parse_input(input_str): input_data = input_str.splitlines() n = int(input_data[0]) values = list(map(int, input_data[1].split())) edges = [tuple(map(int, line.split())) for line in input_data[2:]] return n, values, edges # Example usage if __name__ == \\"__main__\\": input_str = 5 3 2 1 10 1 1 2 1 3 2 4 2 5 n, values, edges = parse_input(input_str) print(find_max_sum_and_length(n, values, edges))"},{"question":"You are given an integer array A of size N. You are allowed to perform the following operation any number of times (including zero times): 1. Select a contiguous subarray of length K. 2. Reverse the subarray. Return the lexicographically smallest array you can obtain after performing any number of the above operations. Constraints: * 1 leq N leq 10^5 * 1 leq K leq N * 1 leq A[i] leq 10^9 (for each valid i) Input The input consists of multiple lines: The first line contains two integers N and K. The second line contains N integers, representing the elements of array A. Output Print the lexicographically smallest array after performing the allowed operations any number of times. Examples Input 5 3 4 3 2 1 5 Output 1 3 2 4 5 Input 6 2 1 3 5 4 2 6 Output 1 2 3 4 5 6 Input 4 4 4 3 2 1 Output 1 2 3 4","solution":"def smallest_lexicographic_array(N, K, A): Returns the lexicographically smallest array that can be obtained by reversing any contiguous subarray of length K any number of times. Parameters: N (int): Size of the array K (int): Length of the subarray that can be reversed A (list of int): The input array Returns: list of int: The lexicographically smallest array if K == 1: return A elif K == N: return sorted(A) else: return sorted(A) # Input parsing based on the provided format if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) A = list(map(int, data[2:])) result = smallest_lexicographic_array(N, K, A) print(\' \'.join(map(str, result)))"},{"question":"Given an array of integers, rotate the array to the right by `k` steps, where `k` is a non-negative integer. -----Task----- Create a function that rotates an array of `n` integers to the right by `k` steps. The rotation should be performed in-place, meaning you cannot use extra space or create a copy of the array. -----Input----- The function will receive two arguments: 1. An integer array `nums` which denotes the array of `n` integers 2. An integer `k` which denotes the number of steps to rotate the array to the right, where `0 ≤ k ≤ 10^5`. -----Output----- The function should return the rotated array as a list of integers. -----Examples----- Sample Input: nums = [1, 2, 3, 4, 5, 6, 7] k = 3 Sample Output: [5, 6, 7, 1, 2, 3, 4] Sample Input: nums = [-1, -100, 3, 99] k = 2 Sample Output: [3, 99, -1, -100] -----Note----- - Be mindful of the efficiency of your solution, as the value of `n` can be large. - Ensure to handle cases where `k` is larger than `n`.","solution":"def rotate(nums, k): Rotates the array nums to the right by k steps in-place. Args: nums (List[int]): A list of integers. k (int): Number of steps to rotate the array to the right. Returns: List[int]: The rotated array. n = len(nums) k %= n # In case k is larger than the array length nums[:] = nums[-k:] + nums[:-k] return nums"},{"question":"Given an array of integers nums and an integer target, find the maximum length of a subarray that sums to target. If no such subarray exists, return 0. Example 1: Input: nums = [1, -1, 5, -2, 3], target = 3 Output: 4 Explanation: The subarray [1, -1, 5, -2] sums to 3 and has length 4. Example 2: Input: nums = [-2, -1, 2, 1], target = 1 Output: 2 Explanation: The subarray [-1, 2] sums to 1 and has length 2. Your Task: You don\'t need to read input or print anything. Complete the function maxLengthSubarraySum() which takes nums and target as input parameters and returns the maximum length of a subarray that sums to target. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1<= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def maxLengthSubarraySum(nums, target): Finds the maximum length of a subarray that sums to the given target. Parameters: nums (List[int]): The input array of integers. target (int): The target sum for the subarray. Returns: int: The length of the longest subarray that sums to the target. If no such subarray exists, returns 0. prefix_sum = 0 prefix_sum_index_map = {0: -1} # To handle the case where the subarray starts from index 0 max_length = 0 for i, num in enumerate(nums): prefix_sum += num if prefix_sum - target in prefix_sum_index_map: max_length = max(max_length, i - prefix_sum_index_map[prefix_sum - target]) if prefix_sum not in prefix_sum_index_map: prefix_sum_index_map[prefix_sum] = i return max_length"},{"question":"In an office, employees are awarded bonuses based on their performance scores. The office manager wants to list the type of bonus each employee will receive. The type of bonus is determined as follows: - If an employee\'s performance score is greater than or equal to a threshold, they receive a \\"High Bonus\\". - If an employee\'s performance score is below the threshold, they receive a \\"Low Bonus\\". Write a program that helps the manager determine the type of bonus for each employee. ------ Input ------ The first line of the input contains two space-separated integers N and T where: - N is the number of employees. - T is the threshold score. Each of the following N lines contains a single integer S_i representing the performance score of each employee. ------ Output ------ For each employee, print \\"High Bonus\\" if the employee\'s score is greater than or equal to the threshold, or \\"Low Bonus\\" otherwise. ------ Constraints ------ 1 ≤ N ≤ 1,000 0 ≤ T, S_i ≤ 1,000 ------ Sample Input 1 ------ 3 500 480 520 500 ------ Sample Output 1 ------ Low Bonus High Bonus High Bonus","solution":"def determine_bonuses(N, T, scores): Determines the type of bonus each employee will receive based on their score. Parameters: N (int): The number of employees. T (int): The threshold score. scores (list of int): A list of performance scores for each employee. Returns: list: A list containing the type of bonus for each employee. bonuses = [] for score in scores: if score >= T: bonuses.append(\\"High Bonus\\") else: bonuses.append(\\"Low Bonus\\") return bonuses"},{"question":"The Alchemist has discovered a strange ingredient while working in his lab. The ingredient is a liquid that reacts with air to solidify in a very peculiar way. He places the ingredient in a transparent box with cells in a square grid formation. The ingredient can only solidify if it forms a path from the left side of the box to the right side. The cells in the grid can either be empty (represented by \'.\') which allows the ingredient to flow through, or blocked by an obstacle (represented by \'#\') which prevents the flow of the ingredient. The Alchemist wants your help to determine if there is a path from the leftmost column to the rightmost column using the empty cells. -----Input----- The first line contains an integer n (2 ≤ n ≤ 100), the size of the grid (n x n). The next n lines contain n characters each, representing the grid. Each character is either \'.\' or \'#\'. -----Output----- Print \\"YES\\" (without the quotes) if there is a path from the leftmost column to the rightmost column, and \\"NO\\" (without the quotes) otherwise. -----Examples----- Input 5 ... #..#. .#..# .#..# ... Output YES Input 4 #..# #..# Output NO -----Note----- In the first example, one possible path is: 1. Start at cell (1,1) 2. Move to cell (2,2) 3. Move to cell (3,3) 4. Move to cell (4,4) 5. Move to cell (5,5) Therefore, a valid path exists from the leftmost to the rightmost column. In the second example, there are too many obstacles and no way to form a path from the leftmost to the rightmost column.","solution":"def is_path_exists(n, grid): def dfs(x, y): if y == n - 1: return True visited[x][y] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == \'.\': if dfs(nx, ny): return True return False visited = [[False] * n for _ in range(n)] for i in range(n): if grid[i][0] == \'.\' and dfs(i, 0): return \\"YES\\" return \\"NO\\""},{"question":"Given a queue represented as a list, implement a function that takes two arguments: the queue and a target number. The function should return the minimum number of operations required to bring the target number to the front of the queue. You can perform two types of operations: 1. Rotate the queue to the left by one element (the first element moves to the end of the queue). 2. Rotate the queue to the right by one element (the last element moves to the front of the queue). If the target number is not in the queue, the function should return -1. # Function Signature ```python def min_operations_to_front(queue: List[int], target: int) -> int: pass ``` # Example ```python # Example 1 queue = [1, 2, 3, 4, 5] target = 3 # Rotate left twice: [3, 4, 5, 1, 2] # Rotate right three times: [3, 1, 2, 3, 4, 5] # Minimum operations: 2 assert min_operations_to_front(queue, target) == 2 # Example 2 queue = [10, 20, 30, 40, 50] target = 30 # Rotate left twice: [30, 40, 50, 10, 20], # Rotate right three times: [30, 10, 20, 30, 40, 50] # Minimum operations: 2 assert min_operations_to_front(queue, target) == 2 # Example 3 queue = [7, 8, 9, 10] target = 5 # Target is not in the queue assert min_operations_to_front(queue, target) == -1 ```","solution":"from typing import List def min_operations_to_front(queue: List[int], target: int) -> int: Returns the minimum number of operations to bring the target number to the front of the queue. If the target is not in the queue, returns -1. if target not in queue: return -1 n = len(queue) target_index = queue.index(target) # Number of operations to rotate left rotate_left = target_index # Number of operations to rotate right rotate_right = n - target_index return min(rotate_left, rotate_right)"},{"question":"Implement a function to check if a given word is \\"valid\\". A word is considered valid if it follows these rules: 1. It contains only alphabets (both uppercase and lowercase are allowed). 2. The word must not have three consecutive letters in increasing or decreasing order alphabetically. Write a function `is_valid_word(word)` that takes a string as input and returns a boolean indicating whether the word is valid according to the above rules. **Examples:** ``` is_valid_word(\\"ABC\\") # False, because \\"ABC\\" are in increasing order is_valid_word(\\"ZYX\\") # False, because \\"ZYX\\" are in decreasing order is_valid_word(\\"Hello\\") # True, \\"Hello\\" does not have three consecutive letters in increasing or decreasing order is_valid_word(\\"BaC\\") # True, \\"BaC\\" does not have three consecutive letters in increasing or decreasing order is_valid_word(\\"A1B2\\") # False, contains numbers ``` **Notes:** - The function should be case-insensitive while checking for consecutive order. - You can assume the input will always be a non-empty string. **Constraints:** - No special characters other than letters should be considered valid. - The function should efficiently handle strings up to a length of 1000 characters.","solution":"def is_valid_word(word): Check if the word is valid. Rules: 1. Only contains alphabets 2. Does not contain three consecutive letters in increasing or decreasing order Parameters: word (str): The word to check. Returns: bool: True if valid, False otherwise. if not word.isalpha(): return False word = word.lower() for i in range(len(word) - 2): if (ord(word[i + 1]) == ord(word[i]) + 1 and ord(word[i + 2]) == ord(word[i]) + 2) or (ord(word[i + 1]) == ord(word[i]) - 1 and ord(word[i + 2]) == ord(word[i]) - 2): return False return True"},{"question":"The town of Algoritmville has recently developed a fascinating new park. In this park, there are n consecutive spots, and the mayor wants to plant trees such that each spot has exactly one tree. However, the environmentalists in the town have imposed two conditions for the arrangement of the trees: 1. There are exactly three types of trees: Oak (O), Pine (P), and Maple (M). 2. No two adjacent spots can have the same type of tree. The mayor of Algoritmville has tasked you with developing an algorithm to determine an appropriate arrangement of trees, where each spot is occupied by exactly one tree, and no two adjacent spots have the same type of tree. Input The only line contains an integer n — the number of spots in the park (3 ≤ n ≤ 100). Output Print one line consisting of n characters. Each character should be \'O\', \'P\', or \'M\', representing the type of tree at that specific spot. Ensure that the output arrangement satisfies the given conditions. If there are several answers, print any of them. Examples Input 4 Output OMPO Input 7 Output OMPOMPO Note In the first example, spots 1 and 2 have different types of trees, spots 2 and 3 have different types of trees, and spots 3 and 4 have different types of trees, satisfying the conditions set by the environmentalists. In the second example, spots 1 to 7 are also arranged such that no two adjacent spots have the same type of tree.","solution":"def arrange_trees(n): Returns a string of n characters where each character is \'O\', \'P\', or \'M\', representing the type of tree at that specific spot, ensuring that no two adjacent spots have the same type of tree. sequence = [\\"O\\", \\"P\\", \\"M\\"] result = [] for i in range(n): result.append(sequence[i % 3]) return \\"\\".join(result)"},{"question":"You are given a grid of `n x n` cells where each cell can be either empty or blocked. An empty cell is represented by `0`, and a blocked cell is represented by `1`. The task is to find the number of distinct paths from the top-left corner (0,0) to the bottom-right corner (n-1,n-1), where you can only move right or down. If there is no path, return `0`. -----Input----- - One integer `n` (1 leq n leq 15): the dimension of the grid. - `n` lines with `n` space-separated integers (each integer being `0` or `1`): the grid representation. -----Output----- Output a single integer: the number of distinct paths from the top-left corner to the bottom-right corner. -----Examples----- Sample Input 1: 3 0 0 0 0 1 0 0 0 0 Sample Output 1: 2 Sample Input 2: 3 0 1 0 1 1 0 0 0 0 Sample Output 2: 0 Sample Input 3: 4 0 0 0 0 0 1 1 0 0 0 0 0 1 1 0 0 Sample Output 3: 3","solution":"def find_paths(grid): n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == 0: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1] # Define a helper function to parse the input and output the number of paths def num_paths(n, grid_input): grid = [list(map(int, row.split())) for row in grid_input] return find_paths(grid)"},{"question":"You are given an array of integers `a` of length `n`. You have a maximum of `q` queries that can either update an element in the array or retrieve the sum of elements in a specified subarray. The array elements are indexed from 1 to n. You need to perform the following types of operations: 1. `1 i v` — Update the `i-th` element of the array to be `v`. 2. `2 l r` — Retrieve the sum of elements between indices `l` and `r` (inclusive). Implement the operations efficiently. # Input - The first line of the input contains two integers `n` and `q` (1 ≤ n, q ≤ 100000) — the number of elements in the array and the number of queries. - The second line contains `n` integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) — the initial elements of the array. - Each of the next `q` lines contains one of the two types of queries described above. # Output For each query of the second type, print a single integer — the sum of the elements in the specified subarray. # Example Input ``` 5 5 1 2 3 4 5 2 1 3 1 2 10 2 2 5 1 3 6 2 1 4 2 1 5 ``` Output ``` 6 22 19 24 ``` # Note In the sample test, there are 5 elements initially. The queries are processed as follows: - The sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. - Update the element at index 2 to 10: the array becomes [1, 10, 3, 4, 5]. - The sum of elements from index 2 to 5 is 10 + 3 + 4 + 5 = 22. - Update the element at index 3 to 6: the array becomes [1, 10, 6, 4, 5]. - The sum of elements from index 1 to 4 is 1 + 10 + 6 + 4 = 21. - The sum of elements from index 1 to 5 is 1 + 10 + 6 + 4 + 5 = 26.","solution":"def process_queries(n, q, array, queries): Processes update and retrieve sum queries on the array. Parameters: n (int): Number of elements in the array. q (int): Number of queries. array (list of int): The initial elements of the array. queries (list of tuples): List of queries where each query is represented as a tuple. Returns: list of int: List of results for the sum queries. results = [] for query in queries: if query[0] == 1: _, i, v = query array[i - 1] = v elif query[0] == 2: _, l, r = query results.append(sum(array[l - 1:r])) return results"},{"question":"Alice is leading a project where she needs to manage a team of N programmers (numbered 1 through N) working on a series of modules. Each programmer has a certain efficiency level given in an array E of length N, where E[i] denotes the efficiency of the i-th programmer. To optimize productivity, Alice wants to rearrange the programmers in such a way that for every programmer i from 1 to N-1, the difference in efficiency between the programmer i and programmer i+1 should be minimized. Help Alice find such an arrangement of programmers. -----Input:----- - The first line will contain T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer N. - The second line contains N space-separated integers E[1], E[2], ..., E[N]. -----Output:----- For each test case, output a single line containing N space-separated integers representing the arrangement of programmers that minimizes the efficiency difference between adjacent programmers. -----Constraints----- - 1 leq T leq 100 - 2 leq N leq 1000 - 1 leq E[i] leq 10^6 -----Sample Input:----- 2 5 4 1 3 2 5 3 10 7 15 -----Sample Output:----- 1 2 3 4 5 7 10 15","solution":"def optimal_arrangement(T, test_cases): Returns an optimal arrangement of programmers that minimizes efficiency differences between adjacent programmers. Parameters: T (int): Number of test cases test_cases (list of tuple): Each tuple contains an integer N and a list of efficiencies E Returns: list of list: A list containing the optimal arrangement for each test case results = [] for N, E in test_cases: # Sort the efficiencies to minimize the difference between adjacent programmers E.sort() # Append the sorted array to the results results.append(E) return results"},{"question":"Rotate Matrix You are given an `n x n` 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). You should rotate the image in-place, which means you have to modify the input 2D matrix directly. Do not allocate another 2D matrix and do the rotation. # Input - A 2D list of integers where `matrix[i][j]` represents the pixel value at position `(i, j)`. - `1 <= n <= 20` # Output - The rotated 2D list. # Example Input ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Input ``` [ [5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16] ] ``` Output ``` [ [15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11] ] ``` # Note - The rotation must be performed in-place, so do not create any additional matrix to perform the rotation. - You can assume that the matrix is always square (`n x n`). Have fun rotating the matrix!","solution":"def rotate(matrix): Rotates the given n x n 2D matrix by 90 degrees clockwise in place. :param matrix: List[List[int]] 2D list representing an image. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i+1, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for row in matrix: row.reverse()"},{"question":"Kapil likes collecting coins, and he has a unique way of arranging them. He has a collection of N coins, each with a distinct value. Sometimes, he wants to find a sequence of consecutive coins with the maximum possible sum that does not exceed a given value K. Help Kapil find the longest such sequence. Input format: The first line contains two space-separated integers N and K. The second line contains N space-separated integers denoting the values of the coins. Output format: Print a single integer representing the length of the longest sequence of consecutive coins that has a sum not exceeding K. If no such sequence exists, print 0. Constraints: 1 ≤ N ≤ 10^5 1 ≤ coin values ≤ 10^9 1 ≤ K ≤ 10^18 SAMPLE INPUT 5 10 2 1 3 4 5 SAMPLE OUTPUT 4 Explanation The coin values are [2, 1, 3, 4, 5] and the maximum sum allowed is 10. The longest sequence of consecutive coins that has a sum not exceeding 10 is [2, 1, 3, 4], and its length is 4.","solution":"def longest_sequence(N, K, coins): Finds the length of the longest sequence of consecutive coins that has a sum not exceeding K. Parameters: N (int): The number of coins. K (int): The maximum allowed sum. coins (List[int]): The values of the coins. Returns: int: The length of the longest sequence. max_len = 0 current_sum = 0 left = 0 for right in range(N): current_sum += coins[right] while current_sum > K and left <= right: current_sum -= coins[left] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Maureen is organizing a book exchange event at her local library. Each participant in the event brings a book and can exchange it with any other participant. However, Maureen wants to ensure that all participants eventually get a chance to read every book brought to the event. To achieve this, she has devised a series of book exchange rounds. In each round, one participant can select another participant and they exchange books. This process continues until each participant has exchanged their book with every other participant at least once. Help Maureen determine the minimum number of book exchange rounds needed so that every participant has read every book. -----Input----- The first line contains an integer n (2 ≤ n ≤ 20) — the number of participants. The second line contains an initial list of integers, where the i-th integer represents the book brought by the i-th participant. -----Output----- In the first line, print the minimum number of book exchange rounds required for every participant to have read every book. In the next n-1 lines, print the series of exchanges that took place. Each line should contain two integers u and v (1 ≤ u, v ≤ n; u ≠ v) indicating that participant u exchanged their book with participant v. -----Example----- Input 4 1 2 3 4 Output 3 1 2 1 3 1 4 -----Note----- In the given example, the minimum number of rounds Maureen needs to organize is 3. In the first round, participant 1 exchanges books with participant 2, in the second round, participant 1 exchanges books with participant 3, and in the third round, participant 1 exchanges books with participant 4. This ensures that by the end of these rounds, every participant has had the chance to read every book at least once.","solution":"def minimum_exchange_rounds(n, books): Determines the minimum number of book exchange rounds and the pairs of participants exchanging books. Parameters: n (int): The number of participants books (list of int): List of books each participant brings initially Returns: int: The minimum number of exchange rounds list of tuple: The list of pairs (u, v) indicating exchanges between participants u and v. rounds = [] # Since each participant must exchange with every other participant, one participant (say participant 1) will exchange with every other. for i in range(2, n+1): rounds.append((1, i)) return len(rounds), rounds"},{"question":"You are given a string `s` consisting of lowercase English letters. The task is to remove the minimum number of characters from the string `s` so that the resulting string contains no duplicate characters. If there are multiple possible resulting strings, return the lexicographically smallest one. -----Input----- The input is a single string `s` (1 ≤ |s| ≤ 100,000) which consists of lowercase English letters. -----Output----- Print the resulting string after removing the minimum number of characters such that no characters are repeated, and it is lexicographically smallest. -----Examples----- Input bcabc Output abc Input cbacdcbc Output acdb Input cbcbcd Output bcd","solution":"def remove_duplicate_letters(s): Removes the minimum number of characters from the given string s so that the resulting string contains no duplicate characters and is lexicographically smallest. from collections import Counter stack = [] seen = set() counter = Counter(s) for char in s: counter[char] -= 1 if char in seen: continue while stack and char < stack[-1] and counter[stack[-1]] > 0: seen.remove(stack.pop()) stack.append(char) seen.add(char) return \'\'.join(stack)"},{"question":"A company wants to reward its employees who have delivered exceptional performance throughout the year. The performance of employees can be represented as an array of integers where each element indicates the number of tasks completed by an employee. The company wants to reward employees based on the following criteria: 1. If an employee has completed an odd number of tasks, they should receive `twice` the number of tasks. 2. If an employee has completed an even number of tasks, they should receive `half` the number of tasks. Write a function `calculateRewards` that takes an array of integers `tasks`, and returns a new array representing the rewards given to each employee. Example 1: Input: tasks = [4, 7, 2, 5] Output: [2, 14, 1, 10] Example 2: Input: tasks = [10, 15, 6] Output: [5, 30, 3] Your Task: You do not need to read input or print anything. Your task is to complete the function `calculateRewards()` which takes an array `tasks` as input and returns an array of integers representing the rewards. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - 1 <= tasks.length <= 10^5 - 0 <= tasks[i] <= 10^9","solution":"def calculateRewards(tasks): Returns an array representing the rewards given to each employee. Parameters: tasks (list of int): List of integers where each element indicates the number of tasks completed by an employee. Returns: list of int: List of rewards given to each employee. rewards = [] for task in tasks: if task % 2 == 0: rewards.append(task // 2) else: rewards.append(task * 2) return rewards"},{"question":"Little Arya and Little Bran love playing with strings. One day, they stumbled upon a very interesting problem involving strings and palindromes. They decided to challenge each other to solve this problem, and now you have to solve it for them. Given a string S, find the longest substring which is a palindrome. If there are multiple longest palindromic substrings of the same length, return the first one you encounter. A string is a palindrome if it reads the same backward as forward. For example, \\"madam\\" and \\"racecar\\" are palindromes, whereas \\"hello\\" and \\"world\\" are not. Input format: The first line contains an integer T, the number of test cases. Each of the following T lines contains a string S. Output format: For each test case, print the longest palindromic substring of S. Constraints: 1 ≤ T ≤ 10 1 ≤ |S| ≤ 1000 SAMPLE INPUT 3 babad cbbd aacecaaa SAMPLE OUTPUT bab bb aacecaa Note: For the first input string \\"babad\\", both \\"bab\\" and \\"aba\\" are valid answers, but \\"bab\\" appears first. Similarly, for the string \\"aacecaaa\\", there are multiple substrings of the same length, the first palindromic substring of max length is \\"aacecaa\\" found in a single pass.","solution":"def longest_palindromic_substring(S): Function to find the longest palindromic substring in a given string S. n = len(S) if n == 0: return \\"\\" longest = \\"\\" for i in range(n): # Odd length palindromes tmp = expand_from_middle(S, i, i) if len(tmp) > len(longest): longest = tmp # Even length palindromes tmp = expand_from_middle(S, i, i + 1) if len(tmp) > len(longest): longest = tmp return longest def expand_from_middle(S, left, right): Helper function to expand from the middle and find the longest palindromic substring. while left >= 0 and right < len(S) and S[left] == S[right]: left -= 1 right += 1 return S[left + 1:right] def find_longest_palindromes(T, strings): Function to process multiple test cases and return the longest palindromic substrings. results = [] for S in strings: results.append(longest_palindromic_substring(S)) return results"},{"question":"Ravi is an avid gardener and he loves arranging his plants in a particular manner. He has a variety of plants, each with a certain height. Since he is a perfectionist, he wants to arrange his plants such that the sequence of heights first strictly increases to a peak and then strictly decreases. Given an array of integers representing the heights of the plants, you need to determine if it is possible to rearrange the plants to satisfy Ravi\'s requirement. Note: - The array should have at least 3 elements to form a \\"peak\\". - No two plants can have the same height. Your task is to write a program that checks if such an arrangement is possible. Input: - The first line contains an integer T, the number of test cases. - Each test case contains an integer N, the number of plants, followed by N space-separated integers representing the heights of the plants. Output: - For each test case, print \\"YES\\" if it\'s possible to rearrange the plants to form the required sequence, otherwise print \\"NO\\". Constraints: - 1 ≤ T ≤ 10 - 3 ≤ N ≤ 10^5 - 1 ≤ Height of each plant ≤ 10^9 Example: Input: 2 5 1 3 5 4 2 4 3 2 1 4 Output: YES NO Explanation: - For the first test case, you can directly use the given sequence as it already forms the required arrangement. - For the second test case, no arrangement can meet the required condition of having a peak, so the answer is \\"NO\\".","solution":"def can_form_peak(arr): if len(arr) < 3: return False arr = sorted(arr) peak_reached = False for i in range(1, len(arr)): if arr[i] == arr[i-1]: return False return True def process_test_cases(test_cases): results = [] for case in test_cases: N, heights = case if can_form_peak(heights): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A company organizes an event where participants are arranged in a single line. Each participant is assigned a unique ID from 1 to n. However, the event planner wants to reshuffle the participants\' order. The planner provides a list of pairs where each pair (a, b) indicates that participant with ID a should appear before participant with ID b. Write a function rearrangeParticipants(n, pairs) that takes two arguments: an integer n (the number of participants) and an array of pairs (indicating the desired order constraints). The function should return a list of participants arranged in the specified order. If there is no valid arrangement that satisfies all the given constraints, return an empty list. Example: ``` n = 4 pairs = [(1, 2), (2, 3), (4, 1)] ``` Output: [4, 1, 2, 3] If no valid arrangement is possible, for example if the pairs form a cycle of constraints, return an empty list. Example: ``` n = 3 pairs = [(1, 2), (2, 3), (3, 1)] ``` Output: []","solution":"def rearrangeParticipants(n, pairs): from collections import defaultdict, deque # Create graph and in-degree data structures graph = defaultdict(list) in_degree = {i: 0 for i in range(1, n + 1)} # Build the graph and update in-degrees based on given pairs for a, b in pairs: graph[a].append(b) in_degree[b] += 1 # Use a deque to track nodes with zero in-degree zero_in_degree = deque([node for node in in_degree if in_degree[node] == 0]) sorted_order = [] while zero_in_degree: node = zero_in_degree.popleft() sorted_order.append(node) # Reduce in-degree of neighbors for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree.append(neighbor) # If sorted_order contains all nodes, return the order, else return an empty list if len(sorted_order) == n: return sorted_order else: return []"},{"question":"You\'ve been appointed as a software engineer to help Galactica Corporation manage their sensor data. Each sensor generates a stream of temperature readings throughout the day, which need to be analyzed for irregularities. Galactica Corporation has tasked you with identifying the sections of the data where the readings consistently increase or decrease for a period lasting a specified number of readings. A sequence is said to be consistently increasing or decreasing if each subsequent reading is strictly larger or smaller than the previous one, respectively. Galactica Corporation provides you with a list of temperature readings and a number K, and you need to determine how many strictly increasing or decreasing subsequences of length exactly K exist in the given list of readings. For example, in the sequence `[10, 11, 12, 7, 6, 5]` with `K=3`, there are two such subsequences: `[10, 11, 12]` (increasing) and `[7, 6, 5]` (decreasing). Input: The first line contains two integers, N (the number of temperature readings) and K (the length of the subsequences), separated by a space. The second line contains N space-separated integers representing the temperature readings. Output: Output a single integer representing the total number of strictly increasing or decreasing subsequences of length exactly K present in the list of readings. Limits: 1 ≤ N ≤ 1000 2 ≤ K ≤ N SAMPLE INPUT 10 3 10 9 8 7 6 5 4 3 2 1 SAMPLE OUTPUT 8 Explanation: There are four decreasing subsequences of length 3: `[10, 9, 8]`, `[9, 8, 7]`, `[8, 7, 6]`, `[7, 6, 5]`, `[6, 5, 4]`, `[5, 4, 3]`, `[4, 3, 2]`, and `[3, 2, 1]`. There are no increasing subsequences of length 3 in the provided list. Therefore, the total count is 8.","solution":"def count_increasing_decreasing_subsequences(readings, K): This function returns the count of strictly increasing or decreasing subsequences of length exactly K in the given list of temperature readings. def count_sequences(is_increasing): count = 0 for i in range(len(readings) - K + 1): valid = True for j in range(i, i + K - 1): if is_increasing: if readings[j] >= readings[j + 1]: valid = False break else: if readings[j] <= readings[j + 1]: valid = False break if valid: count += 1 return count increasing_count = count_sequences(True) decreasing_count = count_sequences(False) return increasing_count + decreasing_count # Reading input def main(): n, k = map(int, input().split()) readings = list(map(int, input().split())) result = count_increasing_decreasing_subsequences(readings, k) print(result) # Note: Since no input/output function was mentioned, assume `main` is called and inputs are provided properly."},{"question":"You are given an array of integers and a target sum. The task is to find two distinct elements in the array such that their sum is equal to the target sum. Return the indices of the two numbers in the form of a list/tuple. Each input will have exactly one solution, and you may not use the same element twice. Example 1: Input: nums = [2, 7, 11, 15] target = 9 Output: [0, 1] Explanation: The array is: [2, 7, 11, 15] The pair that sums up to 9 is (2, 7). The indices of these elements are 0 and 1. Example 2: Input: nums = [3, 2, 4] target = 6 Output: [1, 2] Explanation: The array is: [3, 2, 4] The pair that sums up to 6 is (2, 4). The indices of these elements are 1 and 2. Your Task: Complete the function findPair() that takes the array nums and the target sum as input parameters and returns the list/tuple of indices of the two numbers. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 2 <= len(nums) <= 10^4 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def findPair(nums, target): Returns the indices of the two numbers such that their sum equals target. Args: nums (list of int): The array of integers. target (int): The target sum. Returns: list of int: The indices of the two numbers. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return None"},{"question":"Implement a function `partition_number` that takes two inputs: an integer `n` and an integer `k`. The function should return the number of ways that the integer `n` can be partitioned into exactly `k` positive integers. For example: - `partition_number(5, 2)` should return `2`, because there are two ways to partition 5 into exactly 2 positive integers: `4+1` and `3+2`. - `partition_number(6, 3)` should return `3`, because there are three ways to partition 6 into exactly 3 positive integers: `4+1+1`, `3+2+1`, and `2+2+2`. The function should return 0 if it is not possible to partition the number `n` into `k` parts, for instance: - `partition_number(3, 4)` should return `0`, because there are no ways to partition 3 into 4 positive integers. The signature of the function should be: ```python def partition_number(n: int, k: int) -> int: # Your implementation here ``` Constraints: - The function should handle cases where ( 1 leq n leq 100 ) and ( 1 leq k leq 100 ). # Example ```python # Example 1 n = 5 k = 2 partition_number(n, k) # Output: 2 # Example 2 n = 6 k = 3 partition_number(n, k) # Output: 3 # Example 3 n = 3 k = 4 partition_number(n, k) # Output: 0 ```","solution":"def partition_number(n: int, k: int) -> int: # Initialize a DP table with dimensions (n+1, k+1) dp = [[0] * (k + 1) for _ in range(n + 1)] # There is one way to partition 0 into 0 parts dp[0][0] = 1 # Fill the DP table for i in range(1, n + 1): for j in range(1, k + 1): if i >= j: dp[i][j] = dp[i - 1][j - 1] + dp[i - j][j] return dp[n][k]"},{"question":"You are given an array of n integers a and an integer m. You need to process q queries on the array. Each query has two types: - Type 1: Given two indices l and r (1 le l le r le n), find the sum of all integers in the subarray from index l to r modulo m. - Type 2: Update the value at index i (1 le i le n) to a given integer v. Your task is to perform these operations efficiently. -----Input----- The first line contains three integers n, q, and m (1 le n, q le 10^5, 1 le m le 10^9) — the number of elements in the array, the number of queries, and the modulus value, respectively. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. The next q lines describe the queries. Each query is described by three integers: - If the first integer is 1, it is a Type 1 query and the following two integers are l and r. - If the first integer is 2, it is a Type 2 query and the following two integers are i and v. -----Output----- For each Type 1 query, output a single integer — the sum of the subarray from index l to r modulo m. Outputs for different Type 1 queries should be printed on separate lines. -----Example----- Input 5 5 10 5 3 8 6 2 1 2 4 2 3 7 1 1 3 2 5 9 1 4 5 Output 7 5 5 -----Note----- In the example: - In the first query, the sum of the subarray from index 2 to 4 is 3 + 8 + 6 = 17, and 17 mod 10 = 7. - The second query updates the value at index 3 to 7, so the array becomes [5, 3, 7, 6, 2]. - In the third query, the sum of the subarray from index 1 to 3 is 5 + 3 + 7 = 15, and 15 mod 10 = 5. - The fourth query updates the value at index 5 to 9, so the array becomes [5, 3, 7, 6, 9]. - In the fifth query, the sum of the subarray from index 4 to 5 is 6 + 9 = 15, and 15 mod 10 = 5.","solution":"class ArrayProcessor: def __init__(self, array, modulus): self.array = array self.modulus = modulus self.prefix_sum = self._build_prefix_sum() def _build_prefix_sum(self): prefix_sum = [0] * (len(self.array) + 1) for i in range(1, len(self.array) + 1): prefix_sum[i] = prefix_sum[i - 1] + self.array[i - 1] return prefix_sum def update(self, index, value): index -= 1 # Convert to 0-based index difference = value - self.array[index] self.array[index] = value for i in range(index + 1, len(self.array) + 1): self.prefix_sum[i] += difference def query(self, left, right): return (self.prefix_sum[right] - self.prefix_sum[left - 1]) % self.modulus def process_queries(n, q, m, array, queries): processor = ArrayProcessor(array, m) result = [] for query in queries: if query[0] == 1: result.append(processor.query(query[1], query[2])) elif query[0] == 2: processor.update(query[1], query[2]) return result # Example usage with the given problem inputs n = 5 q = 5 m = 10 array = [5, 3, 8, 6, 2] queries = [(1, 2, 4), (2, 3, 7), (1, 1, 3), (2, 5, 9), (1, 4, 5)] print(process_queries(n, q, m, array, queries))"},{"question":"You are given an m x n grid representing a map, where each cell in the grid can be either land (represented by \'1\') or water (represented by \'0\'). Write a function to count the number of islands. An island is surrounded by water and formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Conditions: 1) You can move up, down, left, and right from a cell. 2) An island cannot extend beyond the boundaries of the grid. 3) The grid consists of only \'1\'s (land) and \'0\'s (water). Constraints: 1 ≤ m, n ≤ 300 Input: The input consists of multiple test cases. Each test case starts with two integers, m and n, which denote the number of rows and columns in the grid, respectively. The following m lines contain n characters each (\'1\' or \'0\') representing the grid. Output: Print the number of islands for each test case. SAMPLE INPUT 2 4 5 11110 11010 11000 00000 4 5 11000 11000 00100 00011 SAMPLE OUTPUT 1 3","solution":"def count_islands(grid): Count the number of islands in the given grid. if not grid: return 0 def dfs(grid, x, y): if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == \'0\': return grid[x][y] = \'0\' # Move in all 4 directions dfs(grid, x+1, y) dfs(grid, x-1, y) dfs(grid, x, y+1) dfs(grid, x, y-1) island_count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': island_count += 1 dfs(grid, i, j) return island_count def process_input(input_data): Process input data and return the number of islands for each test case. input_lines = input_data.strip().split(\\"n\\") result = [] index = 0 num_cases = int(input_lines[index]) index += 1 for _ in range(num_cases): m, n = map(int, input_lines[index].split()) index += 1 grid = [] for _ in range(m): grid.append(list(input_lines[index])) index += 1 result.append(count_islands(grid)) return result"},{"question":"Charlie works for a company that manages a network of computers. He is tasked with ensuring that a software update is installed on all computers in the network. Each computer can communicate directly with some other computers in the network, forming a bidirectional connection. Charlie wants to determine the minimum number of computers that need to receive the update directly from the main server so that the update can propagate to all computers in the network. The remaining computers will get the update via their direct connections recursively from those that have received the update. Given the number of computers and a list of which computers are directly connected, help Charlie find out the minimum number of computers that need to receive the update directly from the server. Input format: The first line contains an integer T - the number of test cases. Each test case starts with an integer N - the number of computers in the network and an integer M - the number of direct connections. The next M lines each contain two integers u and v, indicating that computer u and computer v have a direct connection. Output format: For each test case, print a single integer representing the minimum number of computers that need to receive the update directly from the server. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ M ≤ 10000 1 ≤ u, v ≤ N SAMPLE INPUT 2 5 4 1 2 2 3 3 4 4 5 3 0 1 2 2 3 SAMPLE OUTPUT 1 3","solution":"def find_min_initial_updates(T, test_cases): def dfs(node, visited, adj_list): stack = [node] while stack: current = stack.pop() if not visited[current]: visited[current] = True for neighbor in adj_list[current]: if not visited[neighbor]: stack.append(neighbor) results = [] for case in test_cases: N, M, connections = case adj_list = {i: [] for i in range(1, N + 1)} for u, v in connections: adj_list[u].append(v) adj_list[v].append(u) visited = {i: False for i in range(1, N + 1)} num_connected_components = 0 for node in range(1, N + 1): if not visited[node]: dfs(node, visited, adj_list) num_connected_components += 1 results.append(num_connected_components) return results"},{"question":"You are an explorer trying to locate a rare artifact hidden in one of the rooms in an ancient temple. The temple has a number of rooms connected by a series of pathways. Each room is represented as a node in a graph, and each pathway between rooms is given as an edge with a certain length. The artifact is hidden in the room that has the maximum distance from your starting room. The maximum distance here means the longest shortest path from your starting room to any other room in the temple. Given the number of rooms `n` and a list of pathways where each pathway is described by three integers `[u, v, w]` representing a pathway between room `u` and room `v` with length `w`, you are to find the room that is farthest from your starting room `s` and the distance to that room. Write a function `find_farthest_room(n, pathways, s)` that takes the number of rooms `n`, a list of pathways, and your starting room `s`, and returns a tuple `(room, distance)` where `room` is the farthest room from your starting room and `distance` is the distance to that room. If there are multiple rooms that have the same maximum distance, return the smallest room number among them. For example: Given `n = 4`, `pathways = [[0, 1, 1], [1, 2, 2], [1, 3, 2]]` and `s = 0`, the function `find_farthest_room(n, pathways, 0)` should return `(2, 3)`. Explanation: The distances from room 0 to other rooms are: - To room 1: 1 - To room 2: 1 + 2 = 3 - To room 3: 1 + 2 = 3 The farthest rooms from room 0 are rooms 2 and 3 both with a distance of 3. The smallest room number among them is room 2. Therefore, the answer is `(2, 3)`.","solution":"import heapq from collections import defaultdict def dijkstra(n, pathways, start): graph = defaultdict(list) for u, v, w in pathways: graph[u].append((v, w)) graph[v].append((u, w)) distances = {i: float(\'inf\') for i in range(n)} distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_room = heapq.heappop(pq) if current_distance > distances[current_room]: continue for neighbor, weight in graph[current_room]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def find_farthest_room(n, pathways, s): distances = dijkstra(n, pathways, s) max_distance = -1 farthest_room = -1 for room, distance in distances.items(): if distance > max_distance or (distance == max_distance and room < farthest_room): max_distance = distance farthest_room = room return farthest_room, max_distance"},{"question":"-----Question----- Jill has a magical string consisting of lowercase English letters. She wants to figure out if the string can be transformed into a palindrome by rearranging its letters with at most one letter removed. Your task is to help Jill by writing a program to determine this. -----Input----- The only line of the input is a string `s` of lowercase English letters where `1 ≤ |s| ≤ 10^6`. -----Output----- Output \\"Yes\\" if the string can be rearranged into a palindrome with at most one character removed, otherwise output \\"No\\". -----Examples----- Input abcbc Output Yes Input abcd Output No Input aabbcc Output Yes Input aabba Output Yes -----Explanation----- A palindrome is a string that reads the same backward as forward. For example, by removing one \'c\' from \\"abcbc\\", the remaining string \\"abbc\\" can be rearranged to form the palindrome \\"abba\\". The string \\"abcd\\" cannot be rearranged into any palindromic form even if one character is removed.","solution":"from collections import Counter def can_form_palindrome(s): Determine if the string can be rearranged into a palindrome by removing at most one letter. # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to be rearranged into a palindrome: # - If the length of the string is even, there should be no characters with an odd frequency # - If the length of the string is odd, there should be at most one character with an odd frequency # Given that we can remove at most one character, we relax these conditions by one return odd_count <= 2"},{"question":"Given an array of integers where each element represents the height of a building, your task is to determine how much water can be trapped between the buildings after it rains. The width of each building is the same. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of buildings. The second line contains n non-negative integers h1, h2, ..., hn (0 ≤ hi ≤ 10^4) separated by spaces, where hi represents the height of the ith building. Output Print a single integer — the total amount of water trapped. Note: The water trapped between two buildings is defined by the difference in height and the distance between them. SAMPLE INPUT 6 0 1 0 2 1 0 SAMPLE OUTPUT 1","solution":"def trap_water(heights): Calculate the total amount of water trapped between the buildings after it rains. Parameters: heights (list of int): The heights of the buildings. Returns: int: The total amount of water trapped. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the water trapped for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Anna has a rectangular grid with n rows and m columns. In one operation, Anna can choose any row or column and set all the cells in that row or column to zero. Anna wants to know the minimum number of operations needed to make all the elements of the grid zero, if it is possible at all. However, Anna wants to ensure that at least one non-zero element exists after each operation until the final operation makes the grid completely zero. -----Input----- The first line of the input contains two integers t (1 le t le 10^4) — the number of test cases. The first line of each test case contains two integers n and m (1 le n, m le 100) — the dimensions of the grid. The next n lines contain m integers each, g_{i, j} (0 le g_{i, j} le 100) — the elements of the grid. -----Output----- For each test case, output the minimum number of operations needed to make all the elements zero while ensuring at least one non-zero element exists after each operation, or -1 if it is impossible. -----Examples----- Input 4 2 2 1 2 3 0 3 3 0 0 0 0 0 0 0 0 0 3 4 1 0 3 0 2 4 0 1 0 3 2 0 3 3 8 6 0 3 5 4 0 1 2 Output 2 0 3 3 -----Note----- In the first test case, Anna can follow this sequence: - Operation 1: Set the first row to zero. Grid after operation: [[0, 0], [3, 0]] - Operation 2: Set the first column to zero. Grid after operation: [[0, 0], [0, 0]] In the second test case, the grid is already all zero, requiring zero operations. In the third test case, Anna can follow this sequence: - Operation 1: Set the first row to zero. Grid after operation: [[0, 0, 0, 0], [2, 4, 0, 1], [0, 3, 2, 0]] - Operation 2: Set the second row to zero. Grid after operation: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 3, 2, 0]] - Operation 3: Set the last row to zero. Grid after operation: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]] In the fourth test case, Anna follows these steps: - Operation 1: Set the third column to zero. Grid after operation: [[8, 6, 0], [3, 5, 0], [0, 1, 0]] - Operation 2: Set the first row to zero. Grid after operation: [[0, 0, 0], [3, 5, 0], [0, 1, 0]] - Operation 3: Set the second column to zero. Grid after operation: [[0, 0, 0], [3, 0, 0], [0, 0, 0]]","solution":"def min_operations_to_zero(t, test_cases): results = [] for case in test_cases: n, m, grid = case row_has_nonzero = any(any(cell != 0 for cell in row) for row in grid) column_has_nonzero = any(any(grid[i][j] != 0 for i in range(n)) for j in range(m)) if not row_has_nonzero: results.append(0) else: if all(cell == 0 for row in grid for cell in row): results.append(0) else: results.append(min(n, m)) return results"},{"question":"You are developing an e-commerce website. One of the features is a recommendation system that suggests items frequently bought together. Each item is represented by an integer ID, and you need to write a function that, given a list of transactions, finds the pair of items that are most commonly bought together. A transaction is a list of item IDs representing items purchased together in one transaction. Your function should return the pair of item IDs that occur together the most times across all transactions. If multiple pairs have the same highest frequency, return the pair with the smallest item ID first. Examples: ```python most_common_pair([[1, 2, 3], [1, 2, 4], [1, 2], [2, 3], [2, 3, 4]]) == (1, 2) most_common_pair([[5, 6], [7, 8], [5, 6], [7, 9], [5, 7, 8]]) == (5, 6) most_common_pair([[1, 2], [3, 4], [1, 3], [2, 4], [1, 4]]) == (1, 2) ```","solution":"from itertools import combinations from collections import defaultdict def most_common_pair(transactions): Given a list of transactions, find the pair of items that are most commonly bought together. Args: transactions (List[List[int]]): A list of transactions, each transaction is a list of item IDs. Returns: Tuple[int, int]: The pair of item IDs that occur together the most times. pair_freq = defaultdict(int) for transaction in transactions: for pair in combinations(sorted(transaction), 2): pair_freq[pair] += 1 most_common = None for pair, freq in pair_freq.items(): if most_common is None or freq > pair_freq[most_common] or (freq == pair_freq[most_common] and pair < most_common): most_common = pair return most_common"},{"question":"**Given a positive integer n, draw an \'X\' pattern of size n x n using stars (\'*\'). In this pattern, the middle of the \'X\' (from the top-left to the bottom-right, and from the top-right to the bottom-left) both consist of \'*\' characters, while all other positions in the grid should contain a \'.\' character. ---Input--- A single integer, n (1 ≤ n ≤ 101), representing the size of the pattern. ---Output--- Output the n x n grid as described, with \'*\' characters in the appropriate positions to form an \'X\' pattern and \'.\' characters elsewhere. ---Examples--- Input: 3 Output: *.* .*. *.* Input: 5 Output: *...* .*.*. ..*.. .*.*. *...* Input: 7 Output: *.....* .*...*. ..*.*.. ...*... ..*.*.. .*...*. *.....*","solution":"def draw_x_pattern(n): Draw an \'X\' pattern of size n x n using \'*\' and \'.\' characters. Parameters: n (int): The size of the pattern. Returns: List[str]: The X pattern as a list of strings. pattern = [] for i in range(n): row = [\'.\'] * n row[i] = \'*\' row[n - i - 1] = \'*\' pattern.append(\'\'.join(row)) return pattern"},{"question":"Write a function that takes an array of integers and returns the length of the longest subsequence such that all elements of the subsequence are consecutive integers. The elements can be in any order in the subsequence, but they must form a sequence of consecutive numbers when sorted. -----Input----- The first line of input contains an integer n (1 le n le 10^5), the number of elements in the array. The second line contains n integers, representing the array elements (1 le text{arr}[i] le 10^9). -----Output----- Print a single integer, the length of the longest subsequence of consecutive integers. -----Example----- Input 7 100 4 200 1 3 2 101 Output 4 Explanation: The longest subsequence of consecutive integers includes the elements [1, 2, 3, 4]. There are other subsequences like [100, 101], but they are shorter. The maximum length is therefore 4. -----Note----- For the given example, the array [100, 4, 200, 1, 3, 2, 101] has the longest subsequence of consecutive integers [1, 2, 3, 4], resulting in the length being 4.","solution":"def longest_consecutive_subsequence(arr): Returns the length of the longest subsequence such that all elements of the subsequence are consecutive integers. arr_set = set(arr) longest_streak = 0 for num in arr: # Only start counting at the smallest number of a sequence if num - 1 not in arr_set: current_num = num current_streak = 1 while current_num + 1 in arr_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"John loves playing with strings and often spends his time finding interesting patterns in them. One day, he came across a string problem that caught his interest. Given a string s consisting only of lowercase Latin letters, John wants to make the string a palindrome by performing the minimum number of operations. In one operation, he can replace any single character in the string with any other character. Help John find the minimum number of operations required to make the string a palindrome. -----Input----- The input contains a single string s (1 ≤ |s| ≤ 10^5) consisting only of lowercase Latin letters. -----Output----- Print a single integer — the minimum number of character replacements required to make the string a palindrome. -----Examples----- Input abc Output 1 Input aab Output 1 Input racecar Output 0 -----Note----- In the first test, we can change the character \'c\' to \'a\' to make the string \\"aba\\", which is a palindrome. In the second test, we can change the character \'b\' to \'a\' to make the string \\"aaa\\", which is a palindrome. In the third test, the string \\"racecar\\" is already a palindrome, so no operations are needed.","solution":"def min_operations_to_palindrome(s): This function calculates the minimum number of operations required to make a given string a palindrome by replacing characters. Parameters: s (str): The input string consisting of lowercase Latin letters. Returns: int: The minimum number of replacement operations required. n = len(s) operations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations"},{"question":"Write a function that takes in a list of integers and returns a list containing only the prime numbers from the given list. For example: ``` Input: [2, 4, 7, 10, 13, 16] Output: [2, 7, 13] ``` The function should efficiently identify prime numbers by minimizing the number of operations.","solution":"def is_prime(n): Helper function to determine if a given number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Returns a list of prime numbers from the given list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Thomas has been practicing dynamic programming and recursion problems recently. He encountered a new challenge where he needs to find the maximum profit that can be obtained from a rod of length `N`, given different prices for different lengths of the rod. Given a rod of length `N` and an array of integers `prices` of length `N` where `prices[i]` represents the price of a rod of length `i+1`, Thomas needs to determine the maximum profit obtainable from cutting the rod into pieces and selling them according to the prices array. Write a function `maxProfit(N, prices)` that returns the maximum profit that can be obtained from a rod of length `N`. Input Format - The first line contains an integer `N` (the length of the rod). - The second line contains `N` space-separated integers describing the prices array. Constraints 1 ≤ N ≤ 1000 1 ≤ prices[i] ≤ 1000 Output Format - Print the integer denoting the maximum profit that can be obtained from a rod of length `N`. Sample Input 4 1 5 8 9 Sample Output 10 Explanation In this example, a rod of length 4 and prices array `[1, 5, 8, 9]` is given. The maximum profit can be obtained by cutting the rod into two pieces of lengths 2 and 2, which can be sold for a total price of 5 + 5 = 10. Another possible way to achieve this profit is to cut the rod into lengths 1 and 3, which can be sold for a total price of 1 + 9 = 10. Therefore, the maximum profit is 10.","solution":"def maxProfit(N, prices): Returns the maximum profit that can be obtained from a rod of length N. Parameters: N (int): length of the rod prices (list of int): prices array of length N, prices[i] is the price of a rod of length i+1 Returns: int: maximum profit obtainable # Create a DP array to store the maximum profit for each length of the rod dp = [0] * (N + 1) # Build the DP array in bottom-up manner for i in range(1, N + 1): max_val = -float(\'inf\') for j in range(i): max_val = max(max_val, prices[j] + dp[i - j - 1]) dp[i] = max_val return dp[N]"},{"question":"An online learning platform launched a series of coding challenges for students. For each student, they track the number of challenges n they attempted and the scores si achieved in each of these challenges. The scores are integers between 0 and 100, inclusive. The platform wants to provide a performance report based on the scores of the students over any range of consecutive challenges. They define the performance score for a range of challenges from l to r (inclusive) as the maximum score among those challenges minus the minimum score among the same challenges. Given the number of challenges n and the scores for each challenge, your task is to answer q queries. Each query is a pair of integers (l, r), and you need to calculate the performance score for the challenges from l to r (inclusive) for each query. For simplicity, you can assume 1-based indexing for the queries. Input - The first line contains two integers n and q (1 ≤ n, q ≤ 100 000). - The second line contains n integers si (0 ≤ si ≤ 100) — the scores for each challenge. - Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the indices representing the range of the challenges. Output For each query, output the performance score for the range [l, r]. Examples Input 5 3 50 80 90 40 60 1 3 2 5 1 5 Output 40 50 50 Note Consider the first query from the sample: The range is from challenge 1 to 3 [50, 80, 90]. The maximum score is 90, and the minimum score is 50. Thus, the performance score is 90 - 50 = 40. For the second query: The range is from challenge 2 to 5 [80, 90, 40, 60]. The maximum score is 90, and the minimum score is 40. Thus, the performance score is 90 - 40 = 50. For the third query: The range is from challenge 1 to 5 [50, 80, 90, 40, 60]. The maximum score is 90, and the minimum score is 40. Thus, the performance score is 90 - 40 = 50.","solution":"def performance_score(n, scores, queries): results = [] for l, r in queries: range_scores = scores[l-1:r] performance = max(range_scores) - min(range_scores) results.append(performance) return results"},{"question":"Maze Pathfinding You are given a maze represented as a 2D grid of integers. Each cell in the grid can either be an open path (represented by `0`) or a wall (represented by `1`). Your task is to find the shortest path from the start point to the end point, and return the number of steps in that path. If no path exists, return `-1`. The start point is always at the top-left corner of the maze (position `(0, 0)`) and the end point is always at the bottom-right corner of the maze (position `(n-1, m-1)`). You can move up, down, left, or right, but you cannot move diagonally. # Input - An integer `n`, the number of rows in the maze. - An integer `m`, the number of columns in the maze. - A list of lists `maze` of size `n x m`. # Output - An integer, the number of steps in the shortest path from the start point to the end point, or `-1` if no path exists. # Examples ```python maze_path_length(3, 3, [ [0, 1, 0], [0, 1, 0], [0, 0, 0]] ) # Should return 4 (path: (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2)) maze_path_length(3, 3, [ [0, 1, 0], [1, 1, 0], [0, 0, 0]] ) # Should return -1 (no possible path from (0, 0) to (2, 2)) maze_path_length(2, 2, [ [0, 0], [0, 0]] ) # Should return 2 (path: (0, 0) -> (0, 1) -> (1, 1)) ``` NOTE: You can assume that the start and end points are always open paths (i.e., maze[0][0] == 0 and maze[n-1][m-1] == 0).","solution":"from collections import deque def maze_path_length(n, m, maze): if not maze or maze[0][0] == 1 or maze[n-1][m-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() if row == n-1 and col == m-1: return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited and maze[new_row][new_col] == 0: queue.append((new_row, new_col, steps + 1)) visited.add((new_row, new_col)) return -1"},{"question":"Write a Python function `summarize_sales_data(file_path: str) -> Tuple[int, int, float]` that takes in the path to a CSV file containing sales data and returns a tuple with the total number of sales, the number of unique customers, and the average sale amount. The CSV file will have the following format: - The first row contains headers: \\"sale_id\\", \\"customer_id\\", \\"sale_amount\\". - Each subsequent row contains a sale record. - `sale_id` is a unique identifier for each sale. - `customer_id` is a unique identifier for each customer. - `sale_amount` is the amount of money for each sale. Assume the file will not contain any missing or malformed data. **Example input file content:** ``` sale_id,customer_id,sale_amount 1,1001,29.99 2,1002,49.99 3,1001,19.99 4,1003,39.99 ``` **Example function call:** ```python result = summarize_sales_data(\\"sales_data.csv\\") print(result) ``` **Example output:** ``` (4, 3, 34.99) ``` This indicates there were 4 sales, 3 unique customers, and the average sale amount was 34.99.","solution":"import csv from typing import Tuple def summarize_sales_data(file_path: str) -> Tuple[int, int, float]: Summarizes sales data and returns a tuple with total number of sales, number of unique customers, and average sale amount. :param file_path: Path to the CSV file containing the sales data. :return: Tuple containing the total number of sales, number of unique customers, and average sale amount. total_sales = 0 total_amount = 0.0 unique_customers = set() with open(file_path, mode=\'r\') as file: reader = csv.DictReader(file) for row in reader: total_sales += 1 total_amount += float(row[\\"sale_amount\\"]) unique_customers.add(row[\\"customer_id\\"]) average_sale_amount = total_amount / total_sales if total_sales else 0 return total_sales, len(unique_customers), average_sale_amount"},{"question":"You are given a list of tasks to be completed, and each task has a corresponding deadline and a required amount of time to complete it. You can only work on one task at a time, but you can complete them in any order you choose. Your goal is to complete as many tasks as possible before their respective deadlines. Write a function `maxTasks(tasks)` that takes a list of tuples as input. Each tuple contains two integers: `(deadline, timeRequired)`. Your function should return the maximum number of tasks that can be completed before their respective deadlines. # Input - A list of tuples `tasks`, where each tuple consists of two integers: - `deadline` (1 ≤ deadline ≤ 1000): The deadline by which the task must be completed. - `timeRequired` (1 ≤ timeRequired ≤ 1000): The amount of time needed to complete the task. - The length of the list `tasks` will be between 1 and 100. # Output - An integer indicating the maximum number of tasks that can be completed before their respective deadlines. # Example Input ``` tasks = [(4, 3), (2, 2), (3, 1)] ``` Output ``` 2 ``` Explanation: - You can complete the first task (3 units of time with a deadline of 4), and then the third task (1 unit of time with a deadline of 3). - Alternatively, you could complete the second task (2 units of time with a deadline of 2), and then the third task (1 unit of time with a deadline of 3). - The maximum number of tasks that can be completed is 2. # Note - To maximize the number of tasks completed, you might need to consider various orders of the tasks. However, choosing tasks that require less time earlier may be a beneficial strategy.","solution":"def maxTasks(tasks): Returns the maximum number of tasks that can be completed before their respective deadlines. # Sort tasks by their deadlines primarily and by time required secondarily tasks.sort(key=lambda x: (x[0], x[1])) currentTime = 0 completedTasks = 0 for deadline, timeRequired in tasks: if currentTime + timeRequired <= deadline: currentTime += timeRequired completedTasks += 1 return completedTasks"},{"question":"A company has a unique way of evaluating the effectiveness of their marketing campaigns. They follow a pattern of dividing their marketing activities over the days of a week such that each day, a unique non-zero positive integer amount is spent on the marketing campaign, and the sum of the amounts spent over the week must always be equal to the total marketing budget. Given an integer array of size 7 representing the amounts spent each day in a particular week, your task is to determine if this spending pattern respects the company\'s rules. Specifically, you need to check the following: 1. Each day\'s spending must be unique. 2. The sum of the spending amounts for the entire week must be equal to the company\'s marketing budget. Write a function that, given the integer array and the integer budget, determines if the given spending pattern follows the company\'s rules. Input - First line contains an integer T denoting the number of test cases. - Each of the next 2 * T lines contains: - A line with 7 integers separated by space representing the amounts spent each day. - A line containing the integer representing the total marketing budget. Output For each test case, print \\"VALID\\" if the spending pattern follows the company\'s rules; otherwise, print \\"INVALID\\". Constraints 1 ≤ T ≤ 100 1 ≤ budget ≤ 100,000 1 ≤ spending amounts on each day ≤ 10,000 Example Input: 2 1 2 3 4 5 6 7 28 1 2 2 4 5 6 7 27 Output: VALID INVALID Explanation Example case 1: Each day has a unique value and the sum is equal to 28 which matches the budget. Example case 2: The spending amount \'2\' is repeated, hence the spending pattern is not unique. Therefore, the output is \\"INVALID\\".","solution":"def is_valid_spending_pattern(spending, budget): Determines if the spending pattern respects the company\'s rules. Parameters: spending (list of int): list of 7 integers representing the amounts spent each day budget (int): total marketing budget for the week Returns: str: \\"VALID\\" if the spending pattern follows the rules, otherwise \\"INVALID\\" if len(spending) != 7: return \\"INVALID\\" if len(set(spending)) != 7: return \\"INVALID\\" if sum(spending) != budget: return \\"INVALID\\" return \\"VALID\\" def evaluate_spending_patterns(test_cases): Evaluates multiple spending patterns. Parameters: test_cases (list of tuple of (list of int, int)): list where each element is a tuple containing: - list of 7 integers representing the amounts spent each day - an integer representing the total marketing budget Returns: list of str: List of results for each test case, either \\"VALID\\" or \\"INVALID\\" results = [] for spending, budget in test_cases: results.append(is_valid_spending_pattern(spending, budget)) return results"},{"question":"A railway company wants to optimize their ticket sales system such that passengers can only buy tickets for non-overlapping trips. Each trip is defined by a start time and an end time. You are given a list of such trips, and your task is to find the maximum number of non-overlapping trips that can be performed from those given. The input consists of a single integer `n`, the number of trips, followed by `n` lines, each containing two integers representing the start and end times of a trip. A trip `i` is represented as `(start_i, end_i)` and is valid from time `start_i` to time `end_i - 1`. Two trips `i` and `j` do not overlap if `end_i <= start_j` or `end_j <= start_i`. Your task is to write a function that returns the maximum number of non-overlapping trips. Input The input consists of: n start1 end1 start2 end2 ... startn endn Output Output a single integer representing the maximum number of non-overlapping trips from the given trips. Example Input 5 1 4 2 3 3 5 7 9 6 8 Output 3 Explanation The largest set of non-overlapping trips is {2, 3}, {6, 8}, and {7, 9}, thus the answer is 3.","solution":"def max_non_overlapping_trips(n, trips): trips.sort(key=lambda x: x[1]) # Sort trips by end time count = 0 last_end_time = -1 for start, end in trips: if start >= last_end_time: count += 1 last_end_time = end return count # Function to parse input and return formatted result def parse_input_and_calculate_max_trips(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) trips = [tuple(map(int, line.split())) for line in lines[1:]] return max_non_overlapping_trips(n, trips) # Example usage: input_str = 5 1 4 2 3 3 5 7 9 6 8 print(parse_input_and_calculate_max_trips(input_str)) # Should output 3"},{"question":"You are given a rectangular grid which consists of \'1\'s (land) and \'0\'s (water). An island is formed by a group of \'1\'s connected 4-directionally (horizontal or vertical.) Assume all four edges of the grid are surrounded by water. Write a function to count the number of islands. Example: Grid 1: ``` Input: 11110 11010 11000 00000 Output: 1 ``` Grid 2: ``` Input: 11000 11000 00100 00011 Output: 3 ``` Note: * You may assume that all inputs are valid grids with the same number of columns in each row. * The function should handle grids of up to 300 x 300 in dimension. Function signature: ```python def num_islands(grid: List[List[str]]) -> int: # Your code here ```","solution":"def num_islands(grid): if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == \'0\' or visited[r][c]: return visited[r][c] = True dfs(r - 1, c) dfs(r + 1, c) dfs(r, c - 1) dfs(r, c + 1) count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'1\' and not visited[r][c]: dfs(r, c) count += 1 return count"},{"question":"There is a famous series of alphabets known as the \\"Shifted Alphabet\\". In this series, each letter in the string is replaced by a letter some fixed number of positions later in the alphabet, wrapping around if necessary. For example, with a shift of 3, \'A\' would be replaced by \'D\', \'B\' by \'E\', and \'Z\' would wrap around to \'C\'. Your task is to implement a function `shifted_alphabet` that takes a string and an integer shift value as input, and returns the encrypted string using the shifted alphabet technique. For simplicity, assume that: 1. The input string will consist of only uppercase English letters (A-Z). 2. The shift value will be between 0 and 25. # Example ```python shifted_alphabet(\\"ABC\\", 1) # => \\"BCD\\" shifted_alphabet(\\"XYZ\\", 3) # => \\"ABC\\" shifted_alphabet(\\"HELLO\\", 4) # => \\"LIPPS\\" ``` # Function signature ```python def shifted_alphabet(s: str, shift: int) -> str: pass ```","solution":"def shifted_alphabet(s: str, shift: int) -> str: Returns the string after shifting each character by a given number of positions in the alphabet. Parameters: s (str): The input string consisting of uppercase English letters (A-Z). shift (int): The number of positions to shift each letter. Returns: str: The shifted string. result = [] for char in s: shifted_position = (ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\') result.append(chr(shifted_position)) return \'\'.join(result)"},{"question":"*Alice loves collecting stamps from different countries. She has collected N unique stamps so far, and she wants to buy a new batch of M stamps today. However, Alice hates getting duplicate stamps, so she always checks each new stamp against her collection to ensure it\'s unique before adding it to her collection.* *Write a program to calculate the maximum number of new unique stamps that Alice can add to her collection out of the M new stamps.* ------ Input Format ------ - The first line of input contains a single integer N — the number of unique stamps Alice currently holds. - The second line of input contains N space-separated integers representing the country code of each unique stamp in Alice\'s current collection. - The third line of input contains a single integer M — the number of new stamps Alice bought today. - The fourth line of input contains M space-separated integers representing the country code of each new stamp. ------ Output Format ------ Output a single integer — the maximum number of new unique stamps that Alice can add to her collection. ------ Constraints ------ 0 ≤ N ≤ 1000 1 ≤ M ≤ 1000 The country codes of stamps are integers within the range 1 to 10^6. ------ Sample Input 1 ------ 5 1 2 3 4 5 3 2 6 7 ------ Sample Output 1 ------ 2 ------ Sample Input 2 ------ 3 9 10 11 4 11 12 13 14 ------ Sample Output 2 ------ 3 ------ explanations ------ Explanation 1: Alice has 5 unique stamps with country codes [1, 2, 3, 4, 5]. She bought 3 new stamps with country codes [2, 6, 7]. The stamps with country codes 6 and 7 are new to her collection. Therefore, she can add a maximum of 2 new unique stamps. Explanation 2: Alice has 3 unique stamps with country codes [9, 10, 11]. She bought 4 new stamps with country codes [11, 12, 13, 14]. The stamps with country codes 12, 13, and 14 are new to her collection. Therefore, she can add a maximum of 3 new unique stamps.","solution":"def max_new_unique_stamps(n, current_stamps, m, new_stamps): Calculates the maximum number of new unique stamps Alice can add to her collection. :param n: Integer, number of unique stamps Alice currently holds :param current_stamps: List of integers, country codes of Alice\'s current unique stamps :param m: Integer, number of new stamps Alice bought today :param new_stamps: List of integers, country codes of the new stamps Alice bought :return: Integer, maximum number of new unique stamps Alice can add to her collection current_collection = set(current_stamps) unique_new_stamps = set(new_stamps) - current_collection return len(unique_new_stamps) # Example usage: # n = 5 # current_stamps = [1, 2, 3, 4, 5] # m = 3 # new_stamps = [2, 6, 7] # print(max_new_unique_stamps(n, current_stamps, m, new_stamps)) # Output: 2"},{"question":"Sam owns a chain of pizza stores. Each store has a certain number of employees. Sam wants to reward his employees with bonuses. However, Sam has a rule that employees should only get a bonus if they have worked a certain number of cumulative hours, which varies from store to store. Your task is to help Sam determine which employees will receive a bonus. Given the number of employees in each store, their respective hours worked, and the required cumulative hours for each store, you need to output which employees receive a bonus (1 if they do, 0 if they don\'t). Input Format: - The first line contains a single integer T, the number of stores. - For each store, there are three lines: - The first line contains an integer N, the number of employees in the store. - The second line contains N integers, the hours worked by each employee. - The third line contains a single integer H, the required cumulative hours for employees in that store to receive a bonus. Output Format: - For each store, output a single line containing N space-separated integers, where each integer is either 1 (employee receives a bonus) or 0 (employee does not receive a bonus). Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 0 ≤ Hours worked by each employee ≤ 10,000 - 1 ≤ H ≤ 1,000,000 Example Input: 2 3 100 200 300 250 2 50 80 200 Example Output: 1 0 1 0 0 Explanation: For the first store, the employees have worked 100, 200, and 300 hours respectively. The required cumulative hours is 250. Thus, employees 1 and 3 receive a bonus, but employee 2 does not. For the second store, the employees have worked 50 and 80 hours respectively. The required cumulative hours is 200. Thus, both employees do not receive a bonus.","solution":"def determine_bonuses(T, stores_info): Determines which employees receive a bonus based on the given conditions. Parameters: - T (int): Number of stores - stores_info (list): List of tuples containing store data: [(N, hours_worked_list, H), ...] where N is the number of employees, hours_worked_list is a list of integers representing hours worked by each employee, H is the required cumulative hours for bonuses. Returns: - list: List of lists containing bonus eligibility for each employee per store bonuses = [] for store in stores_info: N, hours_worked, H = store bonuses_store = [1 if hours >= H else 0 for hours in hours_worked] bonuses.append(bonuses_store) return bonuses"},{"question":"**Instructions** You are working on a project that requires you to analyze strings for specific patterns. The task is to write a function that determines if a given string is a \\"special\\" string. A \\"special\\" string is defined as a string where every vowel (a, e, i, o, u) appearing in the string only appears in pairs and no single vowels exist. For simplicity, consider only lowercase English letters. **Use Cases** Return output must be a boolean value: `True` if the string is \\"special\\" and `False` otherwise. **Examples** Input: ```python is_special_string(\\"aabbcc\\") ``` Output: ~~~~ True ~~~~ Input: ```python is_special_string(\\"aabbcca\\") ``` Output: ~~~~ False ~~~~ Input: ```python is_special_string(\\"eeffgghh\\") ``` Output: ~~~~ True ~~~~ Input: ```python is_special_string(\\"\\") ``` Output: ~~~~ True ~~~~ Input: ```python is_special_string(\\"abc\\") ``` Output: ~~~~ False ~~~~ Notes: - An empty string is considered \\"special\\". - Only lowercase vowels are taken into consideration.","solution":"def is_special_string(s): Determines if the given string is a \\"special\\" string where every vowel appears only in pairs. Parameters: s (str): The input string to be checked. Returns: bool: True if the string is \\"special\\", False otherwise. # Define the set of vowels vowels = set(\'aeiou\') # Dictionary to count occurrences of each vowel vowel_counts = {vowel: 0 for vowel in vowels} # Count each vowel in the string for char in s: if char in vowels: vowel_counts[char] += 1 # Check if each vowel count is even for count in vowel_counts.values(): if count % 2 != 0: return False return True"},{"question":"A company wants to manage the schedules of its employees optimally. The employees (numbered from 1 to N) can submit a list of meeting requests. Each request is either individual (meaning the employee wants to work alone on a task) or a pair working together (meaning two employees want to schedule a meeting together). The goal is to determine the minimum number of days required to accommodate all meeting requests under the following constraints: - Each employee can attend at most one meeting per day. - No employee can be involved in more than one meeting on the same day. -----Constraints----- - 1 leq N leq 100 - 1 leq M leq 10000 - Each meeting request is either (i) an individual task \\"I E\\" where E is the employee number, or (ii) a pair task \\"P E1 E2\\" where E1 and E2 are the employee numbers. -----Input----- Input is given from Standard Input in the following format: N M Meeting_1 Meeting_2 ... Meeting_M Each meeting request is either: I E P E1 E2 -----Output----- Print the minimum number of days required to accommodate all meeting requests; if it is impossible, print -1. -----Sample Input----- 3 5 I 1 P 1 2 I 2 P 2 3 I 3 -----Sample Output----- 2 Explanation: - Day 1: Employee 1 (task alone), Employee 2 (task alone) - Day 2: Employee 1 and Employee 2 (pair task), Employee 3 (task alone) This is the minimum number of days required to accommodate all meeting requests.","solution":"def min_days_to_accommodate_meetings(n, m, meetings): from collections import defaultdict, deque graph = defaultdict(list) tasks = deque() for meeting in meetings: details = meeting.split() if details[0] == \'I\': e = int(details[1]) tasks.append((e,)) elif details[0] == \'P\': e1, e2 = int(details[1]), int(details[2]) tasks.append((e1, e2)) graph[e1].append(e2) graph[e2].append(e1) # Use a scheduling array schedules = [-1] * (n + 1) def bfs(node): queue = deque([node]) schedules[node] = 0 while queue: current = queue.popleft() for neighbor in graph[current]: if schedules[neighbor] == -1: schedules[neighbor] = schedules[current] ^ 1 queue.append(neighbor) elif schedules[neighbor] == schedules[current]: return False return True for i in range(1, n + 1): if schedules[i] == -1: if not bfs(i): return -1 max_days = 0 individual_tasks = [0] * (n + 1) for task in tasks: if len(task) == 1: individual_tasks[task[0]] += 1 elif len(task) == 2: e1, e2 = task max_days = max(max_days, 1 + min(individual_tasks[e1], individual_tasks[e2])) individual_tasks[e1] += 1 individual_tasks[e2] += 1 return max(max_days, max(schedules) + 1) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().splitlines() n, m = map(int, data[0].split()) meetings = data[1:] print(min_days_to_accommodate_meetings(n, m, meetings))"},{"question":"The Bhishma Formation is a complex arrangement where warriors have to stand at particular coordinates on the battlefield in order to maximize their strategic advantage. In each test case, you are given distinct integers representing the coordinates of soldiers within a rectangular grid on a battlefield. Your task is to determine the minimum Euclidean distance between any two warriors. The army decides their attack strategy based on this distance to ensure maximum efficiency in combat. Euclidean distance between two points ((x1, y1)) and ((x2, y2)) is given by: [ sqrt{(x2 - x1)^2 + (y2 - y1)^2} ] Input The first line of the input contains an integer (T), the number of test cases. The description of (T) test cases follows. The first line of each test case contains a single integer (N), the number of warriors. The next (N) lines consist of 2 space-separated integers each, where the (i^{th}) line specifies the (X_i) and (Y_i) coordinates of the (i^{th}) warrior. Output For each test case, output a single line containing the minimum distance between any two warriors. Your answer should be rounded to 6 decimal places. Constraints 1 ≤ T ≤ 10 2 ≤ N ≤ 50 -100 ≤ X, Y ≤ 100 All ((X, Y)) in a test case are unique. SAMPLE INPUT 2 4 1 2 3 4 -1 -1 2 3 3 0 0 1 1 3 3 SAMPLE OUTPUT 1.414214 1.414214 Explanation Test 1: - Distance between (1,2) and (3,4) ≈ 2.8284 - Distance between (1,2) and (-1,-1) ≈ 3.6056 - Distance between (1,2) and (2,3) ≈ 1.4142 - Distance between (3,4) and (-1,-1) ≈ 6.4031 - Distance between (3,4) and (2,3) ≈ 1.4142 - Distance between (-1,-1) and (2,3) ≈ 5.0000 The minimum distance is between (1,2) and (2,3) or (3,4) and (2,3), which is 1.414214. Test 2: - Distance between (0,0) and (1,1) ≈ 1.4142 - Distance between (0,0) and (3,3) ≈ 4.2426 - Distance between (1,1) and (3,3) ≈ 2.8284 The minimum distance is between (0,0) and (1,1), which is 1.414214.","solution":"import math def minimum_distance(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] coordinates = test_cases[t][1] min_distance = float(\'inf\') for i in range(N): for j in range(i + 1, N): (x1, y1) = coordinates[i] (x2, y2) = coordinates[j] distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) if distance < min_distance: min_distance = distance results.append(format(min_distance, \'.6f\')) return results"},{"question":"You are a secret agent tasked with sabotaging communication systems by intercepting messages and altering their content. One method you often use is to replace each letter in a message with its corresponding letter `n` positions ahead in the alphabet, wrapping around if necessary. This technique is commonly known as a Caesar Cipher. Write a function `cipherShift` that takes a string `message` and an integer `shift` as input, and returns the encoded message using the Caesar Cipher technique. Any characters in the message that are not letters should remain unchanged. Here\'s what you need to do: - Shift each letter in the message by `shift` positions in the alphabet. - Wrap around if the shift reaches past \'z\' or \'Z\'. - Preserve the case of each letter (uppercase or lowercase). - Leave non-alphabetic characters unchanged. # Function Signature ```python def cipherShift(message: str, shift: int) -> str: ``` # Parameter - `message` (str): The original message that needs to be encoded. - `shift` (int): The number of positions each letter in the message should be shifted. # Return - (str): The encoded message after applying the Caesar Cipher. # Example ```python cipherShift(\\"Hello, World!\\", 3) # Output: \\"Khoor, Zruog!\\" cipherShift(\\"Python 3.8\\", 5) # Output: \\"Udymts 3.8\\" ```","solution":"def cipherShift(message: str, shift: int) -> str: Encode the message using the Caesar Cipher technique with the given shift. encoded_message = [] for char in message: if char.isalpha(): shift_amount = shift % 26 if char.islower(): shifted = chr((ord(char) - ord(\'a\') + shift_amount) % 26 + ord(\'a\')) else: shifted = chr((ord(char) - ord(\'A\') + shift_amount) % 26 + ord(\'A\')) encoded_message.append(shifted) else: encoded_message.append(char) return \'\'.join(encoded_message)"},{"question":"Implement a function `rotate_matrix_90_clockwise(matrix)` that takes a 2D list `matrix` representing a square matrix of size N and rotates it 90 degrees clockwise. The function should return the rotated matrix. Your task is to complete the `rotate_matrix_90_clockwise(matrix)` function. Do not worry about input and output handling as this should be a functional problem. Example 1: Input: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] Example 2: Input: [[1, 2], [3, 4]] Output: [[3, 1], [4, 2]] User Task: Implement the function `rotate_matrix_90_clockwise(matrix)`. Note that the function should return the rotated matrix without altering the original matrix. Constraint: 1 <= N <= 100","solution":"def rotate_matrix_90_clockwise(matrix): Rotates a square matrix 90 degrees clockwise. Parameters: matrix (list of list of int): A 2D list representing the square matrix to be rotated. Returns: list of list of int: The rotated matrix. n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Alexandra loves analyzing processing times of various computer tasks. To practice this, she uses a list where each element represents a task\'s time-to-completion in seconds. She focuses on optimizing the task schedules by selecting subsets of tasks that add up to a target completion time, `T`. Given a list of positive integers, `tasks`, where the i-th element represents the i-th task\'s time-to-completion, and a target value `T`, find all distinct subsets (subsets should not be repeated) of `tasks` that sum up to the target value `T`. Each task can be used only once in each subset. Write a function `task_combinations(tasks, T)` that returns a list of lists, where each list represents a subset of tasks that sum to `T`. The subsets in the output should be sorted in ascending order, but the order of the subsets themselves can be any. # Input The function `task_combinations` should take two arguments: - `tasks`: a list of integers where each integer represents the completion time of a task (1 ≤ len(tasks) ≤ 20, 1 ≤ tasks[i] ≤ 30). - `T`: an integer representing the target completion time (1 ≤ T ≤ 100). # Output The function should return a list of lists, with each inner list representing a subset of tasks that sum to `T`. The inner lists should be sorted in ascending order, and the overall output should not contain duplicate subsets. # Examples ```python >>> task_combinations([2, 3, 6, 7], 7) [[7]] >>> task_combinations([2, 3, 5, 7], 10) [[3, 7], [2, 3, 5]] >>> task_combinations([1, 2, 2, 5], 5) [[5], [1, 2, 2]] ``` # Note The order of the subsets in the output does not matter as long as the elements within each subset are in ascending order and there are no duplicate subsets. The problem can be approached using backtracking to explore all possible subsets and ensure that the subsets are distinct and sorted correctly.","solution":"def task_combinations(tasks, T): from itertools import combinations # Sort the tasks to manage the order in the subsets tasks.sort() # Helper function to find all combinations that sum up to T def find_combinations(): results = set() # Try all possible lengths of combinations for r in range(1, len(tasks) + 1): for combination in combinations(tasks, r): if sum(combination) == T: results.add(combination) return results # Get the combinations and convert them to a list of lists combinations_set = find_combinations() return [list(combination) for combination in combinations_set]"},{"question":"The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. That is, the Fibonacci sequence is as follows: 0, 1, 1, 2, 3, 5, 8, 13, ... Given a position N, your task is to calculate the N-th Fibonacci number. The first Fibonacci number is at position 1. Input Format A single integer N represents the position in the Fibonacci sequence (1-indexed). Constraints 1 leq N leq 30 Output Format Print the N-th Fibonacci number. Sample Input 1 5 Sample Output 1 3 Sample Input 2 10 Sample Output 2 34 Explanation In the first example, the Fibonacci sequence up to the 5th position is 0, 1, 1, 2, 3. Therefore, the 5th Fibonacci number is 3. In the second example, the Fibonacci sequence up to the 10th position is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34. Therefore, the 10th Fibonacci number is 34.","solution":"def nth_fibonacci(N): Returns the N-th Fibonacci number (1-indexed). if N == 1: return 0 elif N == 2: return 1 else: a, b = 0, 1 for _ in range(2, N): a, b = b, a + b return b"},{"question":"In a distant kingdom, the knights and archers of the royal army were arranged in an array for training exercises. The commander decided to maintain a special formation rule for their practice sessions. They need an array `A` of `n` non-negative integers representing the power levels of knights and archers, such that each number in this array is at most `k`. The formation rule is: for every pair of indices `(i, j)` with `1 <= i < j <= n`, the absolute difference between `A[i]` and `A[j]` is a distinct number. Your task is to help the commander determine if it is possible to construct such an array `A` given the constraints, and if possible, to find one such valid array. Input The first line contains two integers `n` and `k` (`1 <= n <= 1000` and `0 <= k <= 1000`), which are the length of the array and the maximum power level allowed in the array respectively. Output If it is possible to construct the desired array, print \\"YES\\" on the first line. On the second line, print any valid array `A` of length `n` meeting the given conditions. If it is not possible, print \\"NO\\". Examples Input 3 2 Output YES 0 1 2 Input 4 1 Output NO","solution":"def construct_array(n, k): Determine if it\'s possible to construct an array `A` meeting the desired conditions. Parameters: n (int): The length of the array. k (int): The maximum power level allowed in the array. Returns: tuple: A tuple where the first element is a string \\"YES\\" or \\"NO\\", and the second element is the array if possible. if n > k + 1: return (\\"NO\\", []) return (\\"YES\\", list(range(n)))"},{"question":"Given a list of integers, find the largest possible sum of any non-empty subarray. A subarray is a contiguous portion of an array. Constraints * 1 ≤ n ≤ 10^5 * -10^4 ≤ ai ≤ 10^4 Input The input consists of multiple test cases. Each test case starts with an integer n denoting the size of the array, followed by n integers which represent the elements of the array. The input terminates when n equals zero. Output For each test case, print the largest sum of any subarray. Example Input 3 1 -2 3 4 -1 2 3 -5 5 -2 -3 4 -1 -2 0 Output 3 5 4","solution":"def max_subarray_sum(values): Return the maximum sum of any non-empty subarray. # Initialize variables to store current subarray sum and max subarray sum current_sum = max_sum = values[0] # Loop through the array, starting from the second element for value in values[1:]: current_sum = max(value, current_sum + value) max_sum = max(max_sum, current_sum) return max_sum def process_input(input_data): Process the input data and return the results for each test case. results = [] lines = input_data.strip().split(\\"n\\") i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break array = list(map(int, lines[i+1].split())) results.append(max_subarray_sum(array)) i += 2 return results # Example usage: # input_data = \\"3n1 -2 3n4n-1 2 3 -5n5n-2 -3 4 -1 -2n0n\\" # print(process_input(input_data)) # Output: [3, 5, 4]"},{"question":"Given is a list `price_marks` containing the prices of various products in a shop. There is also an integer `K`, which represents the number of consecutive products you are interested in. Your task is to determine the maximum total price of any K consecutive products in the list. -----Constraints----- - 1 ≤ len(price_marks) ≤ 10^5 - 1 ≤ price_marks[i] ≤ 10^9 - 1 ≤ K ≤ len(price_marks) -----Input----- Input is given from Standard Input in the following format: - The first line contains an integer K. - The second line contains a list of integers `price_marks` separated by spaces. -----Output----- Print the maximum total price of any K consecutive products in the list. -----Sample Input----- 3 1 12 5 7 9 3 -----Sample Output----- 24 Explanation: When K=3, the possible sums of consecutive K products are: - 1+12+5 = 18 - 12+5+7 = 24 - 5+7+9 = 21 - 7+9+3 = 19 The maximum sum of K consecutive products is 24.","solution":"def max_total_price_of_k_consecutive_products(K, price_marks): Returns the maximum total price of any K consecutive products in the list. :param K: Integer, number of consecutive products :param price_marks: List of integers representing prices of products :return: Integer, the maximum total price of any K consecutive products n = len(price_marks) current_sum = sum(price_marks[:K]) max_sum = current_sum for i in range(K, n): current_sum += price_marks[i] - price_marks[i - K] if current_sum > max_sum: max_sum = current_sum return max_sum # Example usage: # K = 3 # price_marks = [1, 12, 5, 7, 9, 3] # print(max_total_price_of_k_consecutive_products(K, price_marks)) # Output should be 24"},{"question":"Chef loves palindromes. He believes that a string is beautiful if it contains a palindrome as its substring. A palindrome is a string that reads the same forward and backward, like \\"level\\" or \\"racecar\\". Chef wants to test the beautiful property of some strings. For each string, he wants to find the length of the longest palindromic substring in it. Can you help Chef with this task? ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. Each test case consists of a single string S. ------ Output ------ For each test case, output a single line containing an integer corresponding to the length of the longest palindromic substring in S. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 S contains only lowercase alphabetic characters. Subtask 1 (30 points): 1 ≤ T ≤ 10 1 ≤ |S| ≤ 100 Subtask 2 (70 points): original constraints ------ Sample Input 1 ------ 3 babad cbbd a ------ Sample Output 1 ------ 3 2 1 ------ Explanation 1 ------ Example 1: The string \\"babad\\" contains a palindrome \\"bab\\" and \\"aba\\", both of length 3. Example 2: The string \\"cbbd\\" contains a palindrome \\"bb\\" of length 2. Example 3: The string \\"a\\" is itself a palindrome of length 1.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in s. n = len(s) if n == 0: return 0 # Initialize a table to store results of subproblems dp = [[False] * n for _ in range(n)] max_length = 1 # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = True # Check for palindromes of length 2 start = 0 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 # Check for palindrome if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if k > max_length: start = i max_length = k return max_length def process_test_cases(t, cases): results = [] for case in cases: results.append(longest_palindromic_substring_length(case)) return results"},{"question":"You are given a list of integers and a sliding window size `k`. Your task is to find the maximum value in each sliding window of size `k` moving from the left side of the list to the right. Write a function to achieve this. Input Format The first line contains a single integer mathbf{T}, the number of test cases. Each of the next mathbf{T} test cases consists of two lines: - The first line contains two integers n and k — the size of the list and the size of the sliding window. - The second line contains n integers representing the list. Output Format For each test case, output a line with n - k + 1 integers representing the maximum values of each sliding window. Constraints 1 leq T leq 10 1 leq n leq 10^5 1 leq k leq n -10^4 leq text{list}_{i} leq 10^4 Sample Input 2 8 3 1 3 -1 -3 5 3 6 7 7 4 4 2 12 11 -5 6 50 Sample Output 3 3 5 5 6 7 12 12 12 50 Explanation For the first test case: - The 3-element window slides from the beginning to the end, covering the sublists [1, 3, -1], [3, -1, -3], [-1, -3, 5], and so on. - The maximum for each of these sublists is 3, 3, 5, 5, 6, and 7 respectively. For the second test case: - The 4-element window slides from the beginning to the end, covering the sublists [4, 2, 12, 11], [2, 12, 11, -5], and so on. - The maximum for each of these sublists is 12, 12, and 50 respectively.","solution":"from collections import deque def max_sliding_window(arr, k): Finds the maximum value in each sliding window of size k from left to right. n = len(arr) if n == 0: return [] if k == 0: return arr max_values = [] deq = deque() for i in range(k): while deq and arr[i] >= arr[deq[-1]]: deq.pop() deq.append(i) for i in range(k, n): max_values.append(arr[deq[0]]) while deq and deq[0] <= i - k: deq.popleft() while deq and arr[i] >= arr[deq[-1]]: deq.pop() deq.append(i) max_values.append(arr[deq[0]]) return max_values def process_test_cases(T, test_cases): result = [] for i in range(T): n, k = test_cases[i][0] arr = test_cases[i][1] result.append(max_sliding_window(arr, k)) return result"},{"question":"In a land of enchanted numbers, there is a powerful artifact known as the \\"Palindromic Subarray Finder\\". This artifact can detect all the palindromic subarrays within an array of integers. A subarray is a contiguous portion of the array, and a palindrome is a sequence that reads the same forward and backward. The artifact’s magic works only on arrays of the same integer values in pairs (e.g., two 2s, four 3s, etc.). Your task is to create the special algorithm to enable this magic by counting all the palindromic subarrays in the enchanted array. Formally, given an array of integers, you need to count the number of palindromic subarrays within it. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), the length of the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000), representing the elements of the array. -----Output----- Print a single integer, the number of palindromic subarrays. -----Examples----- Input 3 2 2 2 Output 6 Input 5 1 2 3 2 1 Output 7 -----Note----- In the first sample, all subarrays [2], [2, 2], and [2, 2, 2] are palindromic. In the second sample, the palindromic subarrays are: [1], [2], [3], [2], [1], [2, 3, 2], and [1, 2, 3, 2, 1].","solution":"def count_palindromic_subarrays(n, arr): Counts the number of palindromic subarrays in a given array. Parameters: n (int): The length of the array. arr (list of int): The array of integers. Returns: int: The number of palindromic subarrays. def is_palindrome(subarray): return subarray == subarray[::-1] count = 0 for i in range(n): for j in range(i, n): if is_palindrome(arr[i:j+1]): count += 1 return count"},{"question":"A librarian is organizing a reading event and wants to track the number of pages read by each participant. The librarian needs a program to help generate a report. Each participant reads different books and thus a different number of pages each day. Your task is to calculate the total number of pages read by each participant over a given number of days. -----Input:----- - First-line will contain N, the number of participants. Then the participants data follow. - For each participant: - First-line will contain D, the number of days. - Second-line will contain D integers separated by spaces, the number of pages read by the participant each day. -----Output:----- For each participant, output a single line containing the total number of pages read over the D days. -----Constraints----- - 1 leq N leq 10 - 1 leq D leq 10 - 1 leq text{pages read per day} leq 100 -----Sample Input:----- 3 3 12 15 13 2 10 20 4 5 10 15 20 -----Sample Output:----- 40 30 50","solution":"def calculate_total_pages(data): For each participant, calculate the total number of pages read over the given number of days. Args: - data (list of lists): Each sublist contains the number of pages read by a participant each day. Returns: - list: Total pages read by each participant. total_pages = [] index = 0 N = data[index] index += 1 for _ in range(N): D = data[index] index += 1 pages_read = data[index] index += 1 total_pages.append(sum(pages_read)) return total_pages"},{"question":"Write a function that takes two integers, `start` and `end`, and returns an array of all the numbers in the range `[start, end)` that are divisible by 3. If `end` is less than or equal to `start`, return an empty array. If no numbers within the range are divisible by 3, return an empty array as well. The function should handle any integer values, including negative numbers and large ranges. Example: - Input: `start = 1`, `end = 10` - Output: `[3, 6, 9]` - Input: `start = 7`, `end = 7` - Output: `[]`","solution":"def divisible_by_three(start, end): Returns a list of numbers in the range [start, end) that are divisible by 3. if end <= start: return [] return [number for number in range(start, end) if number % 3 == 0]"},{"question":"Polycarp is planning his daily activities, and he wants to maximize his free time while still meeting all his commitments. Polycarp has n activities to complete in a day and each activity takes a specific amount of time. Additionally, some activities must be performed before others due to their dependencies. Help Polycarp to find an optimal order of activities that respects all dependencies and completes all the activities in the minimum time possible. Write a program that prints the order of activities to follow. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of activities. Then n lines follow, each of them describes the i-th activity: - The first integer t_{i} (1 ≤ t_{i} ≤ 10^4) — the time required to complete the i-th activity. - The second integer d_{i} (0 ≤ d_{i} ≤ n - 1) — the number of activities that the i-th activity depends on. - Then there follows the sequence of d_{i} distinct integers from 1 to n — numbers of activities that must be completed before starting the i-th activity. It is guaranteed that no activity can depend on itself and there are no circular dependencies. -----Output----- Print -1, if there is no way to complete all activities respecting their dependencies in the given day. Otherwise, in the first line print the integer m — the minimum number of hours required to complete all activities. In the second line print n distinct integers — numbers of activities which it is necessary to follow in the chronological order of their completion. If there are several answers it is allowed to print any of them. -----Examples----- Input 4 1 0 2 1 1 3 2 1 2 2 1 3 Output 8 1 2 3 4 Input 3 1 0 2 0 3 0 Output 6 1 2 3 Input 3 1 0 2 1 3 3 1 2 Output -1 -----Note----- In the first example, you can complete activity 1 first (taking 1 hour), then activity 2 (2 hours), then activity 3 (3 hours), and finally activity 4 (2 hours) respecting all dependencies. In the second example, all activities can be completed independently, therefore the order doesn\'t matter, and the minimum time is simply the sum of all activity times.","solution":"from collections import deque, defaultdict def find_order_of_activities(n, activities): in_degree = [0] * n graph = defaultdict(list) time_required = [0] * n for i in range(n): t_i, d_i, *deps = activities[i] time_required[i] = t_i in_degree[i] = d_i for dep in deps: graph[dep - 1].append(i) zero_in_degree = deque() for i in range(n): if in_degree[i] == 0: zero_in_degree.append(i) topological_order = [] total_time = 0 while zero_in_degree: node = zero_in_degree.popleft() topological_order.append(node + 1) total_time += time_required[node] for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree.append(neighbor) if len(topological_order) == n: return total_time, topological_order else: return -1 # Example Usage n = 4 activities = [ (1, 0), (2, 1, 1), (3, 2, 1, 2), (2, 1, 3) ] print(find_order_of_activities(n, activities)) # Should print (8, [1, 2, 3, 4])"},{"question":"Your task Your task is to write a function `reverse_words` that takes a single argument - a sentence - and returns the sentence with all the words reversed, but with their original order and punctuation preserved. The function should: - Reverse each word in the sentence individually, keeping the characters within each word reversed. - Preserve the original order of words and the punctuation marks within the sentence. - Handle sentences with a mix of uppercase and lowercase letters, punctuation marks, and spaces. Examples A sentence `\'Hello, World!\'` should return `\'olleH, dlroW!\'`. A sentence `\'Programming is fun!\'` should return `\'gnimmargorP si nuf!\'`. A sentence `\'Keep calm and carry on.\'` should return `\'peeK mlac dna yrrac no.\'`.","solution":"def reverse_words(sentence): Reverses the characters of each word in the sentence, while keeping the original order of words and preserving punctuation within the words. Args: - sentence (str): A sentence containing words and punctuation. Returns: - str: The sentence with each word\'s characters reversed. import re # Regex pattern to match words and punctuation word_punctuation_pattern = re.compile(r\'bw+b\') # Find all words/punctuations and reverse each one reversed_words = [match[::-1] for match in word_punctuation_pattern.findall(sentence)] # Replace the original words with the reversed ones in the sentence result = sentence for original, reversed_word in zip(word_punctuation_pattern.findall(sentence), reversed_words): result = result.replace(original, reversed_word, 1) return result"},{"question":"Given a string of binary representation of an integer, you need to check whether the number is odd or even. If the number is odd, return \\"Odd\\", otherwise return \\"Even\\". Example 1: Input: \\"1101\\" Output: \\"Odd\\" Explanation: The integer representation of the binary string \\"1101\\" is 13, which is odd. Example 2: Input: \\"100\\" Output: \\"Even\\" Explanation: The integer representation of the binary string \\"100\\" is 4, which is even. Your Task: You don\'t need to read or print anything. Your task is to complete the function checkParity() which takes a binary string as input and returns \\"Odd\\" if the number is odd, otherwise returns \\"Even\\". Expected Time Complexity: O(1) Expected Space Complexity: O(1) Constraints: - The length of binary string is at most 32. - The binary string is a non-empty valid representation of an integer.","solution":"def checkParity(binary_string): Returns \\"Odd\\" if the integer representation of the binary string is odd, otherwise returns \\"Even\\". Args: binary_string (str): A string containing the binary representation of an integer. Returns: str: \\"Odd\\" if the number is odd, otherwise \\"Even\\". # Check the last character of the binary string which determines parity return \\"Odd\\" if binary_string[-1] == \'1\' else \\"Even\\""},{"question":"Imagine you are organizing a local library. The library contains a collection of books, and each book has a unique identifier represented as a positive integer. To manage the library effectively, you need to implement a system that performs the following operations efficiently: 1. **Add a Book:** Add a new book with a given identifier to the library collection. 2. **Remove a Book:** Remove an existing book with a given identifier from the collection. If the book is not present, ignore the request. 3. **Check Availability:** Check if a book with a given identifier is present in the collection. 4. **Get All Books:** Retrieve a list of all current book identifiers in the collection, sorted in ascending order. Write a program to support these operations. -----Input----- The input consists of a series of operations. Each operation will be formatted as follows: - `ADD X` - Add a book with identifier `X`. - `REMOVE X` - Remove the book with identifier `X`. - `CHECK X` - Check if the book with identifier `X` is available in the collection. - `ALL` - Retrieve all book identifiers in ascending order. The operations are terminated by the string `END`. -----Output----- For each `CHECK X` operation, output `YES` if the book is present, otherwise output `NO`. For the `ALL` operation, output the list of book identifiers, separated by spaces. The `ADD` and `REMOVE` operations do not require any output. -----Examples----- Sample Input: ADD 3 ADD 1 ADD 5 CHECK 3 REMOVE 3 CHECK 3 ALL END Sample Output: YES NO 1 5","solution":"class Library: def __init__(self): self.books = set() def add_book(self, identifier): self.books.add(identifier) def remove_book(self, identifier): self.books.discard(identifier) def check_book(self, identifier): return \\"YES\\" if identifier in self.books else \\"NO\\" def get_all_books(self): return \\" \\".join(map(str, sorted(self.books))) def manage_library(operations): library = Library() results = [] for operation in operations: if operation.startswith(\\"ADD\\"): identifier = int(operation.split()[1]) library.add_book(identifier) elif operation.startswith(\\"REMOVE\\"): identifier = int(operation.split()[1]) library.remove_book(identifier) elif operation.startswith(\\"CHECK\\"): identifier = int(operation.split()[1]) results.append(library.check_book(identifier)) elif operation == \\"ALL\\": results.append(library.get_all_books()) elif operation == \\"END\\": break return results"},{"question":"In the Kingdom of Zodiacia, there is an ancient tradition where astrologers arrange magical rings in a circular pattern to predict future events. These rings are numbered from 1 to n, and each ring has a unique integer value associated with its magical power. Astrology students are given a task to form sequences of consecutive rings to maximize the magical power. The magical power of a sequence of rings is defined as the product of the values of the rings in that sequence. Given the values on the rings, find the maximum possible magical power that can be obtained from any contiguous subsequence of rings. Note that you can assume all ring values to be positive. Input The first line contains an integer n (1 ≤ n ≤ 1000), denoting the number of rings. The second line contains n space-separated positive integers representing the values on the rings. Each integer is at most 10^4. Output Print a single integer representing the maximum magical power that can be obtained from any contiguous subsequence of rings. Example Input 5 2 3 4 5 1 Output 120 Input 6 1 2 3 4 5 6 Output 720 Input 4 7 1 5 3 Output 105 Note In the first example, the sequence of all rings gives the maximum magical power: 2 * 3 * 4 * 5 * 1 = 120. In the second example, the maximum magical power is obtained from the entire sequence: 1 * 2 * 3 * 4 * 5 * 6 = 720. In the third example, the sequence [7, 1, 5] gives the maximum magical power: 7 * 1 * 5 = 35 and [7, 1, 5, 3] gives 105 which is larger.","solution":"def max_magical_power(n, values): Given a list of positive integers representing the values on the rings, this function calculates the maximum possible magical power that can be obtained from any contiguous subsequence of rings. max_product = 0 for start in range(n): current_product = 1 for end in range(start, n): current_product *= values[end] max_product = max(max_product, current_product) return max_product # Example usage # n = 5 # values = [2, 3, 4, 5, 1] # print(max_magical_power(n, values)) # Output: 120"},{"question":"Write a function ```python reorder_elements(arr) ``` that rearranges the input list `arr` such that all odd numbers come before all even numbers while maintaining the relative order of the odd and even numbers. E.g. ```python reorder_elements([1, 2, 3, 4, 5, 6]) == [1, 3, 5, 2, 4, 6] reorder_elements([12, 11, 14, 7, 9, 2]) == [11, 7, 9, 12, 14, 2] reorder_elements([4, 2, 8, 5, 3, 1]) == [5, 3, 1, 4, 2, 8] reorder_elements([8, 6, 4, 2, 0]) == [8, 6, 4, 2, 0] ```","solution":"def reorder_elements(arr): Reorders the input list such that all odd numbers come before all even numbers while maintaining the relative order of the odd and even numbers. odds = [x for x in arr if x % 2 != 0] evens = [x for x in arr if x % 2 == 0] return odds + evens"},{"question":"Alice is fond of reading words with alternating characters. A word is defined as alternating if no two adjacent characters in the word are the same, i.e., for a word W, W[i] != W[i+1] for all valid i. Given a string S, Alice wants to transform it into the longest possible alternating word by deleting some characters. Your task is to help her find the length of this longest alternating subsequence. Input Format: The input consists of one line, the string S. Output Format: Print the length of the longest alternating subsequence. Constraints: 1 ≤ |S| ≤ 1000000 S consists of lowercase English letters only. SAMPLE INPUT ababba SAMPLE OUTPUT 5 Explanation One of the longest alternating subsequences is \\"ababa\\", which has a length of 5.","solution":"def longest_alternating_subsequence_length(S): if not S: return 0 n = len(S) if n == 1: return 1 length_of_subsequence = 1 # Start with first character of input string for i in range(1, n): if S[i] != S[i-1]: length_of_subsequence += 1 return length_of_subsequence # Example usage: # S = \\"ababba\\" # print(longest_alternating_subsequence_length(S)) # Output: 5"},{"question":"Peter is given a string that consists of lowercase latin letters. He needs to determine if he can rearrange the characters in the string such that no two adjacent characters are the same. Help Peter by writing a program that checks whether it\'s possible to rearrange the string in such a way. -----Input----- The input consists of a single line containing a string s (1 ≤ |s| ≤ 1000) — the string Peter has. -----Output----- Print \\"YES\\" (without the quotes) if it\'s possible to rearrange the characters so that no two adjacent characters are the same, and \\"NO\\" (without the quotes) otherwise. -----Examples----- Input aabb Output YES Input aaab Output NO Input abcabc Output YES -----Note----- In the first sample the characters can be rearranged to form \\"abab\\" or similar. In the second sample there\'s no way to rearrange the characters such that no two adjacent characters are the same. In the third sample the characters can be rearranged to form \\"abcabc\\" or similar.","solution":"def can_rearrange_no_adjacent(s): from collections import Counter freq = Counter(s) max_freq = max(freq.values()) # The condition to check if we can rearrange if max_freq > (len(s) + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"You are tasked with managing the inventory of a small bookstore. Your system needs to handle the fluctuation of book quantities based on sales and restocking. You are given an initial inventory of books, where each book is represented by its ISBN number and quantity available. The bookstore receives a series of updates where each update is either a sale (reducing the quantity) or restocking (increasing the quantity) of a particular ISBN. Your task is to process these updates and determine the final inventory of each book. -----Input----- The first line contains a single integer n (1 leq n leq 1000), the number of different books in the initial inventory. The next n lines each contain an ISBN number and the initial quantity of that book in the format: ISBN quantity The following line contains a single integer m (1 leq m leq 1000), the number of updates to be processed. The next m lines each contain an ISBN number and an update value. The update value can be positive (indicating restocking) or negative (indicating sales) in the format: ISBN update -----Output----- For each book present in the initial inventory, output its final quantity in the format: ISBN quantity Books should be output in the same order as they appeared in the initial inventory. If a book\'s final quantity drops to zero or below, exclude it from the output. -----Examples----- Input 3 978-1-4028-9467-3 10 978-0-306-40615-7 5 978-0-306-40615-6 2 4 978-1-4028-9467-3 -3 978-0-306-40615-7 -2 978-1-4028-9467-3 1 978-0-306-40615-6 -2 Output 978-1-4028-9467-3 8 978-0-306-40615-7 3 Input 2 978-3-16-148410-0 15 978-0-14-044913-6 7 2 978-3-16-148410-0 -5 978-0-14-044913-6 3 Output 978-3-16-148410-0 10 978-0-14-044913-6 10 -----Note----- - ISBN numbers are guaranteed to be unique in the initial inventory. - Updates may refer to ISBN numbers not in the initial inventory, which should be ignored. - No negative quantities should be displayed in the output.","solution":"def update_inventory(initial_inventory, updates): Update the inventory based on the sales and restocking data. Parameters: initial_inventory (list): List of tuples where each tuple contains an ISBN and its initial quantity. updates (list): List of tuples where each tuple contains an ISBN and an update value. Returns: dict: Updated inventory with ISBN as key and final quantity as value, excluding zero or negative quantities. inventory = {isbn: qty for isbn, qty in initial_inventory} for isbn, update in updates: if isbn in inventory: inventory[isbn] += update # Filter out books with quantity less than or equal to zero final_inventory = {isbn: qty for isbn, qty in inventory.items() if qty > 0} return final_inventory"},{"question":"You are given an array consisting of n positive integers. Your task is to determine the minimum number of operations required to make all elements in the array equal. In one operation, you can choose any element of the array and add 1 to it. -----Input----- Each test contains multiple test cases. The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Description of the test cases follows. The first line of each test case contains an integer n (1 leq n leq 2 cdot 10^5) — the size of the array. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, output a single integer — the minimum number of operations required to make all elements of the array equal. -----Example----- Input 2 3 1 3 2 4 4 4 4 4 Output 3 0 -----Note----- In the first test case, you can make all the elements equal to 3 with the following operations: 1. Add 1 to the first element: [1, 3, 2] to [2, 3, 2] 2. Add 1 to the first element: [2, 3, 2] to [3, 3, 2] 3. Add 1 to the third element: [3, 3, 2] to [3, 3, 3] In the second test case, all elements are already equal, so no operations are required.","solution":"def min_operations_to_equal_elements(t, arrays): results = [] for i in range(t): n = arrays[i][0] a = arrays[i][1] max_val = max(a) operations = sum(max_val - val for val in a) results.append(operations) return results # Example usage: # t = 2 # arrays = [(3, [1, 3, 2]), (4, [4, 4, 4, 4])] # print(min_operations_to_equal_elements(t, arrays)) # Output should be [3, 0]"},{"question":"You are tasked with evaluating the performance of different sorting algorithms on a list of integers. Specifically, you need to implement and compare QuickSort and MergeSort. Write a program that reads a list of integers and outputs the sorted list using both QuickSort and MergeSort algorithms. Here are the constraints you should follow: Constraints: * 1 ≤ number of elements in the list ≤ 10^5. * Each element in the list is an integer in the range [-10^9, 10^9]. Input: * The first line contains a single integer n, the number of elements in the list. * The second line contains n space-separated integers, representing the elements of the list. Output: * The first line should contain \\"QuickSort\\", followed by the integers in the sorted order using QuickSort. * The second line should contain \\"MergeSort\\", followed by the integers in the sorted order using MergeSort. Your solution should ensure that both sorting algorithms are implemented efficiently to handle the size constraints. Example: Input: 6 3 -1 4 1 5 9 Output: QuickSort -1 1 3 4 5 9 MergeSort -1 1 3 4 5 9","solution":"def quick_sort(arr): QuickSort algorithm implementation. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) def merge_sort(arr): MergeSort algorithm implementation. if len(arr) <= 1: return arr def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def sort_integers(n, integers_list): This function sorts the list of integers using both QuickSort and MergeSort and returns the output in specified format. quick_sorted = quick_sort(integers_list) merge_sorted = merge_sort(integers_list) result = \\"QuickSortn\\" + \\" \\".join(map(str, quick_sorted)) + \\"n\\" result += \\"MergeSortn\\" + \\" \\".join(map(str, merge_sorted)) return result"},{"question":"Given an integer array nums, return the length of the longest contiguous subarray with an equal number of 0s and 1s. Example 1: Input: nums = [0, 1] Output: 2 Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1. Example 2: Input: nums = [0, 1, 0] Output: 2 Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1. Note: The length of the input array will be in the range [1, 10^5]. The elements of the input array will be either 0 or 1.","solution":"def findMaxLength(nums): Returns the length of the longest contiguous subarray with an equal number of 0s and 1s. hashmap = {0: -1} max_length = 0 count = 0 for idx, num in enumerate(nums): count += 1 if num == 1 else -1 if count in hashmap: max_length = max(max_length, idx - hashmap[count]) else: hashmap[count] = idx return max_length"},{"question":"In a data compression contest, participants are required to compress a string using the Run-Length Encoding (RLE) technique. In RLE, consecutive duplicate characters are replaced with a single character followed by its count. Input: The first line contains the number of test cases, T. T lines follow, each of which contains a single string S consisting of uppercase and lowercase letters. Output: For each test case, output the compressed string using the RLE technique. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100 SAMPLE INPUT 2 aabcccccaaa hhhhhgggeeecc SAMPLE OUTPUT a2b1c5a3 h5g3e3c2 Explanation In the first test case, the string \\"aabcccccaaa\\" is compressed to \\"a2b1c5a3\\" because \'a\' appears consecutively 2 times, \'b\' appears 1 time, \'c\' appears 5 times, and \'a\' appears 3 times. In the second test case, the string \\"hhhhhgggeeecc\\" is compressed to \\"h5g3e3c2\\" because \'h\' appears consecutively 5 times, \'g\' appears 3 times, \'e\' appears 3 times, and \'c\' appears 2 times.","solution":"def run_length_encoding(s): Compresses the input string s using the Run-Length Encoding technique. if not s: return \\"\\" compressed = [] count = 1 prev_char = s[0] for i in range(1, len(s)): if s[i] == prev_char: count += 1 else: compressed.append(f\\"{prev_char}{count}\\") prev_char = s[i] count = 1 compressed.append(f\\"{prev_char}{count}\\") return \'\'.join(compressed) def rle_compress_strings(T, strings): Compress multiple strings using the RLE technique. Args: T (int): Number of test cases. strings (list of str): List of strings to be compressed. Returns: list of str: List of compressed strings. return [run_length_encoding(s) for s in strings]"},{"question":"You are designing a system to manage a list of reservations at a restaurant. Each reservation has a start time and an end time. You need to implement a function that determines if a new reservation can be added without overlapping with existing reservations. Given a list of existing reservations and a new reservation, write a function that returns true if the new reservation can be added without overlapping, otherwise return false. Example 1: Input: reservations = [(1, 3), (4, 6), (8, 10)], new_reservation = (5, 7) Output: true Example 2: Input: reservations = [(1, 3), (4, 6), (8, 10)], new_reservation = (5, 9) Output: false Note: The start and end times are inclusive. The reservations list and the new reservation are provided in the form of a list of tuples (start, end).","solution":"def can_add_reservation(reservations, new_reservation): Determines if a new reservation can be added without overlapping. Parameters: reservations (List[Tuple[int, int]]): A list of existing reservations where each reservation is a tuple (start_time, end_time). new_reservation (Tuple[int, int]): A new reservation represented as a tuple (start_time, end_time). Returns: bool: True if the new reservation can be added without overlapping, False otherwise. new_start, new_end = new_reservation for start, end in reservations: if not (new_end < start or new_start > end): return False return True"},{"question":"In a quiet village of Nattville, there is a single, long street with n houses, each uniquely numbered from 1 to n. Each house i has a particular height h_i, and the heights of the houses are given as an array H of n integers. Both house numbers and heights are integers. Nattville is organizing a decoration competition, and for a house to be eligible, it needs to have two taller houses next to it. Specifically, house i (where 2 leq i leq n-1) must satisfy h_{i-1} > h_i < h_{i+1} for it to be eligible. Write a function `find_eligible_houses(n, H)` which accepts the number of houses n and the array of house heights H, and returns the number of eligible houses. # Input - An integer n representing the number of houses. - An array of integers H of length n where H[i] represents the height of the i^{th} house. # Output - An integer representing the number of eligible houses for the competition. # Constraints - 3 leq n leq 10^5 - 1 leq H[i] leq 10^9 # Example **Input:** ``` 6 [3, 1, 4, 1, 5, 9] ``` **Output:** ``` 2 ``` **Explanation:** - House 2 with height 1 has a taller house (height 3) on its left and a taller house (height 4) on its right. - House 4 with height 1 has a taller house (height 4) on its left and a taller house (height 5) on its right. - Hence, there are 2 eligible houses in this example: house 2 and house 4.","solution":"def find_eligible_houses(n, H): Returns the number of eligible houses for the decoration competition. A house is eligible if it has two taller houses next to it (on both sides). Parameters: n (int): The number of houses. H (List[int]): The list of house heights. Returns: int: The number of eligible houses. eligible_count = 0 for i in range(1, n - 1): if H[i-1] > H[i] < H[i+1]: eligible_count += 1 return eligible_count"},{"question":"Given an integer array `nums` of unique elements, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order. # Function Signature ```python def subsets(nums: List[int]) -> List[List[int]]: ``` # Input - An integer array `nums` of unique elements, with length between `1` and `10`. `nums` contains distinct integers. # Output - A list of lists, representing all the possible subsets of the given array. Each subset should be sorted in ascending order. # Example Input ```python nums = [1, 2, 3] ``` Output ```python [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]] ``` # Explanation An array [1, 2, 3] has the following subsets: - The empty subset: [] - Subsets of length 1: [1], [2], [3] - Subsets of length 2: [1, 2], [1, 3], [2, 3] - Subset of length 3: [1, 2, 3] # Additional Notes * The order of the subsets in the output does not matter. * Ensure efficiency in generating subsets, considering the possible input size. # Constraints * The elements of the `nums` are distinct integers. * The length of `nums` is between 1 and 10.","solution":"from typing import List def subsets(nums: List[int]) -> List[List[int]]: Returns all possible subsets (the power set) of the given array of unique elements. result = [[]] for num in nums: result += [curr + [num] for curr in result] return result"},{"question":"Given an array of integers of length N, your task is to determine if you can make all elements equal by performing at most one operation. In one operation, you can select a subarray of length K and add/subtract the same integer X to/from all elements of the subarray. You only need to return if it is possible to make all elements in the array equal after at most one operation. Example 1: Input: N = 5, K = 3 arr = [1, 2, 3, 2, 1] Output: YES Explanation: We can select the subarray [2, 3, 2] and subtract 1 from all elements to get [1, 1, 1, 1, 1]. Example 2: Input: N = 4, K = 2 arr = [5, 6, 7, 8] Output: NO Explanation: There is no way to select a subarray of length 2 and add/subtract the same integer to make all elements equal. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canMakeEqual() which takes the integers N, K, and the array arr as input parameters and returns \\"YES\\" if it is possible to make all elements equal after at most one operation, otherwise \\"NO\\". Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 2 <= N <= 10^5 1 <= K <= N 1 <= arr[i] <= 10^9","solution":"def canMakeEqual(N, K, arr): Determines if it is possible to make all elements in the array equal after at most one operation. Arguments: N -- The length of the array. K -- The length of the subarray that can be selected for the operation. arr -- The list of integers representing the array. Returns: \\"YES\\" if it is possible to make all elements equal after at most one operation, otherwise \\"NO\\". # Check if it\'s possible to make the array elements equal with a subarray length of 1 if K == 1: if len(set(arr)) == 1: return \\"YES\\" else: return \\"NO\\" # Find the minimum and maximum values in the array min_val = min(arr) max_val = max(arr) # We need to check if we can make the array equal using the difference of min and max values diff = max_val - min_val # The difference must be in multiples of the GCD(K, N) for the operation to work import math gcd_kn = math.gcd(K, N) # Check for each possible target value we can convert the array elements to for i in range(min_val, max_val + 1): if (i - min_val) % gcd_kn == 0 and (max_val - i) % gcd_kn == 0: return \\"YES\\" return \\"NO\\""},{"question":"Haru has a list of integers and wants to classify each integer as either \'Good\' or \'Bad\'. An integer is considered \'Good\' if the sum of its digits is a prime number. Otherwise, it is considered \'Bad\'. -----Input----- Each test contains multiple test cases. The first line contains an integer t (1 leq t leq 10^4) — the number of test cases. The following lines contain the description of each test case. Each test case contains a single integer x (1 leq x leq 10^9). -----Output----- For each test case, output \'Good\' if the sum of the digits of x is a prime number. Otherwise, output \'Bad\'. -----Examples----- Input 3 29 13 40 Output Good Bad Bad -----Note----- In the first test case, the sum of the digits of 29 is 2 + 9 = 11, which is a prime number, so the output is \'Good\'. In the second test case, the sum of the digits of 13 is 1 + 3 = 4, which is not a prime number, so the output is \'Bad\'. In the third test case, the sum of the digits of 40 is 4 + 0 = 4, which is not a prime number, so the output is \'Bad\'.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i <= n): if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def classify_number(x): digit_sum = sum(int(digit) for digit in str(x)) return \'Good\' if is_prime(digit_sum) else \'Bad\'"},{"question":"In a certain kingdom, there is a large collection of ancient books stored in a library. Each book is uniquely identified by an ISBN number, and due to the ancient nature of these books, some of them lack proper documentation about their publication year. To help organize the library, the librarian needs to construct a timeline of the books based on their content. The librarian has managed to group the books into specific categories. Each category has books that are sequentially ordered based on their relevance and context, and there are certain clues that give the order of these categories. The challenge is to determine the correct chronological order of all books based on the given category clues. Given the categories and the order constraints, your task is to find out the correct order of all books if possible. If there is no way to determine a unique order, return \\"Impossible\\". Input: - The first line contains an integer `t`, the number of test cases. - For each test case: - The first line contains two integers `n` and `m`, where `n` is the number of categories and `m` is the number of constraints. - The next `n` lines each contain a sequence of ISBN numbers representing the books in that category. - The next `m` lines each contain two integers `a` and `b`, indicating that books in category `a` should come before books in category `b`. Output: For each test case, output a single line containing the order of books ISBN numbers if a unique order is possible, otherwise output \\"Impossible\\". Constraints: - 1 ≤ t ≤ 5 - 1 ≤ n ≤ 100 (number of categories) - 1 ≤ m ≤ 1000 (number of constraints) - Each category contains between 1 and 100 books - ISBN numbers are unique across all categories and are integers from 1 to 1000000 Example Input: 1 3 2 1001 1002 1003 2001 2002 3001 3002 3003 1 2 2 3 Example Output: 1001 1002 1003 2001 2002 3001 3002 3003 Explanation: The provided constraints are that books in category 1 should come before books in category 2, and books in category 2 should come before books in category 3. Thus, the chronological order of ISBNs would start with the books in category 1, followed by category 2, and then category 3. Hence, the output is \\"1001 1002 1003 2001 2002 3001 3002 3003\\".","solution":"from collections import defaultdict, deque def find_book_order(t, test_cases): results = [] for case in test_cases: n, m, categories, constraints = case graph = defaultdict(list) in_degree = defaultdict(int) # Initialize the graph and in-degrees for i in range(1, n+1): in_degree[i] = 0 for a, b in constraints: graph[a].append(b) in_degree[b] += 1 # Topological Sort using Kahn\'s Algorithm queue = deque([i for i in range(1, n+1) if in_degree[i] == 0]) topo_order = [] while queue: current = queue.popleft() topo_order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(topo_order) != n: results.append(\\"Impossible\\") else: result = [] for index in topo_order: result.extend(categories[index - 1]) results.append(\\" \\".join(map(str, result))) return results # Helper function to parse input and output def process_input_output(input_string): input_data = input_string.strip().split(\'n\') t = int(input_data[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, input_data[index].split()) index += 1 categories = [] for _ in range(n): categories.append(list(map(int, input_data[index].split()))) index += 1 constraints = [] for _ in range(m): constraints.append(tuple(map(int, input_data[index].split()))) index += 1 test_cases.append((n, m, categories, constraints)) results = find_book_order(t, test_cases) return \\"n\\".join(results)"},{"question":"Given an array A[] of N integers, and two integers L and R where 1 ≤ L ≤ R ≤ N. The task is to calculate the sum of all elements of the subarray A[L..R]. You need to perform Q such queries efficiently. Example 1: Input: N = 5 A[] = {1, 2, 3, 4, 5} Queries = 2 Query1 = (1, 3) Query2 = (2, 5) Output: 6 14 Explanation: For Query1, the sum of subarray A[1..3] is 1 + 2 + 3 = 6 For Query2, the sum of subarray A[2..5] is 2 + 3 + 4 + 5 = 14 Example 2: Input: N = 4 A[] = {10, 20, 30, 40} Queries = 1 Query1 = (2, 4) Output: 90 Explanation: For Query1, the sum of subarray A[2..4] is 20 + 30 + 40 = 90 Your Task: You do not need to read input or print anything. Your task is to complete the function `sumOfSubarray` which takes the array A of N integers, the number of queries Q, and a list of Q queries where each query is represented by the pair (L, R). The function returns a list of sums for each query. Expected Time Complexity: O(N + Q) Expected Space Complexity: O(N) Constraints: 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^9","solution":"def sumOfSubarray(A, Q, queries): Calculate the sum of subarrays for given queries efficiently. Args: A : list of int : List of integers representing the array. Q : int : Number of queries. queries : list of tuple : List of tuples where each tuple contains two integers representing the queries. Returns: list of int : List of sums for each query. # Calculate prefix sums N = len(A) prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prefix_sums[i] = prefix_sums[i - 1] + A[i - 1] result = [] for (L, R) in queries: result.append(prefix_sums[R] - prefix_sums[L - 1]) return result"},{"question":"**Question: Palindrome Permutation** A palindrome is a string that reads the same forward and backward. A permutation of a string is another string that contains the same characters, only the order of characters can be different. Given a string, write a function to check if a permutation of the string could form a palindrome. --- **Step 1: Analyze Character Frequencies** First, examine the string to count the frequency of each character. *Example input:* `\\"racecar\\"` *Output of frequencies:* ```json { \\"r\\": 2, \\"a\\": 2, \\"c\\": 2, \\"e\\": 1 } ``` --- **Step 2: Determine Palindrome Permutation** A string can form a palindrome if at most one character has an odd frequency. With the above example, only \\"e\\" has an odd frequency. --- **Step 3: Implementation** Write the function `can_form_palindrome` that takes in a string and returns `True` if any permutation of the string can form a palindrome, otherwise returns `False`. ```python def can_form_palindrome(s): from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 ``` --- **Examples:** *Example 1:* *In:* `\\"racecar\\"` *Out:* `True` (It can be permuted to \\"racecar\\" or \\"rcaecar\\", which are palindromes) *Example 2:* *In:* `\\"hello\\"` *Out:* `False` (No permutations of \\"hello\\" can form a palindrome) --- *Example 3:* *In:* `\\"aabb\\"` *Out:* `True` (It can be permuted to \\"abba\\" which is a palindrome) --- Your final output should be a boolean indicating whether a permutation of the string can form a palindrome.","solution":"def can_form_palindrome(s): from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"A researcher has a collection of scientific documents, each stored as a string. Each string may contain a mix of alphabetical characters and non-alphabetical characters such as numbers, punctuation or special symbols. The researcher wants to know if any of these documents have any words in common, where a word is defined as a contiguous sequence of alphabetical characters. Write a program that finds out the common words from a given set of documents. # Input Each document is provided as a string. You will be given several documents, each represented by a line of text. The input will be provided in the following format: > n > doc1 > doc2 > ... > docn Here, - **n** (1 ≤ n ≤ 10) is the number of documents. - **doci** (1 ≤ i ≤ n) is a string representing the content of the document. Each string will have a length between 1 and 100 characters. # Output If there is at least one common word among the documents, print the words in lexicographical order, separated by a newline. If there are no common words, print \\"No common words\\". # Example Input ``` 3 Hello, this is Document 1! This document: is the 2nd document. Is Document 3 perhaps the same as this document? ``` Output ``` document is this ``` Input ``` 2 Scientific research is fascinating. Data analysis reveals surprising results. ``` Output ``` No common words ```","solution":"def find_common_words(documents): Finds the common words among a set of documents. Parameters: documents (list of str): List of document strings. Returns: list of str: List of common words in lexicographical order. import re # Function to extract words from a document string def extract_words(doc): return set(re.findall(r\'b[a-zA-Z]+b\', doc.lower())) # Extract words from the first document common_words = extract_words(documents[0]) # Intersect with words from the remaining documents for doc in documents[1:]: common_words &= extract_words(doc) # If no common words, return \\"No common words\\" if not common_words: return \\"No common words\\" # Otherwise, return the sorted list of common words return sorted(common_words)"},{"question":"A company wants to analyze its sales data to understand the performance of their sales regions. You are given an array `sales` of length `N` representing the total sales (in dollars) of each region over a specific period. Additionally, there are `Q` queries, each asking for the maximum sales value within a specific range of regions. For each query, you need to find the maximum sales value in the subarray from index `L` to index `R` (both inclusive). Input format - The first line contains a single integer `N`, the number of regions. - The second line contains `N` space-separated integers representing the sales values. - The third line contains a single integer `Q`, the number of queries. - The following `Q` lines each contain two space-separated integers `L` and `R`, representing the start and end indices of the query (0-indexed). Output format - For each query, print the maximum sales value in the subarray from `L` to `R` on a new line. Constraints - 1 ≤ N ≤ 100,000 - 1 ≤ sales[i] ≤ 10^9 - 1 ≤ Q ≤ 50,000 - 0 ≤ L ≤ R < N SAMPLE INPUT 6 5 3 8 9 2 4 3 1 4 0 5 2 3 SAMPLE OUTPUT 9 9 9","solution":"def max_sales_in_ranges(sales, queries): Given sales data and queries, this function returns the maximum sales value in the specified ranges. :param sales: List[int] - A list of integers representing sales values. :param queries: List[Tuple[int, int]] - A list of tuples where each tuple contains two integers, L and R. :return: List[int] - A list of integers where each integer is the maximum sales value for the corresponding query. results = [] for L, R in queries: results.append(max(sales[L:R+1])) return results"},{"question":"Alex has a string S consisting of lower-case English letters. He wants to find the length of the longest substring where all the characters are distinct. Help Alex determine this length for the given string. -----Input----- The input consists of a single string S. -----Output----- Output a single integer representing the length of the longest substring with all distinct characters. -----Constraints----- - 1 ≤ |S| ≤ 105 - S consists only of lower-case English letters (a-z) -----Example----- Input: abcabcbb Output: 3 -----Explanation----- The answer is 3, with the longest substring being \\"abc\\". Example case 2: Input: bbbbb Output: 1 Explanation: The answer is 1, with the longest substring being \\"b\\". Example case 3: Input: pwwkew Output: 3 Explanation: The answer is 3, with the longest substring being \\"wke\\". Note that \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Return the length of the longest substring with all distinct characters. char_set = set() left_pointer = 0 max_length = 0 for right_pointer in range(len(s)): while s[right_pointer] in char_set: char_set.remove(s[left_pointer]) left_pointer += 1 char_set.add(s[right_pointer]) max_length = max(max_length, right_pointer - left_pointer + 1) return max_length"},{"question":"-----Problem Statement----- Write a program that reads a string and outputs the number of vowels present in the string. -----Input----- The input is a single string containing only lowercase letters. -----Output----- Output the number of vowels in the string. -----Constraints----- - The string length is at least 1 and at most 1000. -----Sample Input----- hello -----Sample Output----- 2 -----Sample Input----- programming -----Sample Output----- 3","solution":"def count_vowels(s): Returns the number of vowels in the given string. Parameters: s (str): Input string with only lowercase letters. Returns: int: Number of vowels in the string. vowels = set(\'aeiou\') return sum(1 for char in s if char in vowels)"},{"question":"You are given a 2D grid of size N x M where each cell contains an integer. Your task is to find the maximum sum of elements in any sub-grid of size P x Q. The sub-grid must fit within the boundaries of the original grid. Constraints * 1 leq N, M leq 500 * 1 leq P leq N * 1 leq Q leq M * -1000 leq Grid[i][j] leq 1000 Input Input is given from Standard Input in the following format: N M P Q Grid[0][0] Grid[0][1] ... Grid[0][M-1] Grid[1][0] Grid[1][1] ... Grid[1][M-1] ... Grid[N-1][0] Grid[N-1][1] ... Grid[N-1][M-1] Output Print one integer, which is the maximum sum of any sub-grid of size P x Q. Example Input 4 5 2 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Output 99 Explanation The sub-grid with maximum sum of size 2x3 is: ``` 13 14 15 18 19 20 ``` The sum is 13 + 14 + 15 + 18 + 19 + 20 = 99.","solution":"def max_subgrid_sum(N, M, P, Q, grid): max_sum = float(\'-inf\') # Precompute the sum of sub-grid of size 1xQ for all rows row_sums = [[0] * (M - Q + 1) for _ in range(N)] for i in range(N): for j in range(M - Q + 1): if j == 0: row_sums[i][j] = sum(grid[i][j:j+Q]) else: row_sums[i][j] = row_sums[i][j-1] - grid[i][j-1] + grid[i][j+Q-1] # Compute the sum of subgrid of size PxQ by using row_sums for j in range(M - Q + 1): for i in range(N - P + 1): sub_grid_sum = sum(row_sums[i+k][j] for k in range(P)) if sub_grid_sum > max_sum: max_sum = sub_grid_sum return max_sum"},{"question":"John is managing a school database and wants to identify students who are performing well based on their marks. He categorizes a student as *high-performing* if the student\'s average mark across all subjects is greater than or equal to 75. Given the number of subjects N and the marks obtained in each subject, determine if the student is *high-performing*. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of an integer N followed by N space-separated integers, where N is the number of subjects and the subsequent integers are the marks in each subject. ------ Output Format ------ For each test case, output on a new line, YES, if the student is *high-performing* and NO otherwise. You may print each character of the string in uppercase or lowercase. For example, the strings YES, yes, Yes, and yES are identical. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10 0 ≤ text{{marks in each subject}} ≤ 100 ----- Sample Input 1 ------ 3 5 80 90 70 60 85 4 75 75 70 80 3 50 60 65 ----- Sample Output 1 ------ YES YES NO ----- Explanation 1 ------ Test case 1: The average mark is (80 + 90 + 70 + 60 + 85) / 5 = 77, which is greater than 75, so the student is high-performing. Test case 2: The average mark is (75 + 75 + 70 + 80) / 4 = 75, which meets the criteria, so the student is high-performing. Test case 3: The average mark is (50 + 60 + 65) / 3 ≈ 58.33, which is less than 75, so the student is not high-performing.","solution":"def is_high_performing(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] marks = test_cases[i][1:] average_mark = sum(marks) / N if average_mark >= 75: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] for i in range(1, T + 1): test_case = list(map(int, input_lines[i].strip().split())) test_cases.append(test_case) return T, test_cases"},{"question":"Anna loves taking photos of flowers. She has taken photos of several flowers named by their species. Now, she wants to arrange these photos in a special sequence. Each species has a unique beauty factor associated with it, and Anna believes that arranging the photos in a sequence where the sum of beauty factors of adjacent species is maximized will create the most visually appealing album. However, Anna also knows that by selecting only a contiguous subarray of photos and placing them in the front, she can make this task simpler. She is curious to find out the sum of beauty factors of the maximum beauty adjacent sequence she can obtain. -----Input----- The first line contains an integer n which represents the number of flower photos Anna has taken (1 le n le 1000). The second line contains n integers, where the i-th integer represents the beauty factor of the i-th flower photo. Each beauty factor will be an integer in the range [-1000, 1000]. -----Output----- Output a single integer, which is the maximum sum of beauty factors of any contiguous subarray of the photos. -----Examples----- Sample Input: 6 1 -2 3 4 -1 2 Sample Output: 8 Sample Input: 5 -2 -3 -1 -4 -6 Sample Output: -1","solution":"def max_subarray_sum(n, beauty_factors): This function returns the maximum sum of beauty factors of any contiguous subarray. n: integer, the number of flower photos beauty_factors: list of integers, the beauty factors of the flower photos max_so_far = beauty_factors[0] max_ending_here = beauty_factors[0] for i in range(1, n): max_ending_here = max(beauty_factors[i], max_ending_here + beauty_factors[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Gary loves to play with numbers. He particularly enjoys transforming numbers based on specified rules. Given a number N, Gary transforms it into its binary representation and decides to count the number of continuous \'1\'s in this binary representation. However, Gary is only interested in the maximum number of consecutive \'1\'s. Your task is to help Gary find this out. Input: The first line contains an integer T, denoting the number of test cases. Each test case consists of a single positive integer N. Output: For each test case, print the maximum number of consecutive \'1\'s in the binary representation of N. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 SAMPLE INPUT 3 5 13 32 SAMPLE OUTPUT 1 2 1 Explanation In the first case, N = 5 which in binary is \'101\'. The maximum number of consecutive \'1\'s is 1. In the second case, N = 13 which in binary is \'1101\'. The maximum number of consecutive \'1\'s is 2. In the third case, N = 32 which in binary is \'100000\'. The maximum number of consecutive \'1\'s is 1.","solution":"def max_consecutive_ones(n): Returns the maximum number of consecutive 1\'s in the binary representation of n. binary_representation = bin(n)[2:] return max(map(len, binary_representation.split(\'0\'))) def process_test_cases(T, test_cases): results = [] for case in test_cases: results.append(max_consecutive_ones(case)) return results"},{"question":"Given an array of integers where each element appears three times except for one, which appears exactly once. Your task is to find the element that appears only once. Example 1: Input: arr = [2, 2, 3, 2] Output: 3 Example 2: Input: arr = [0, 1, 0, 1, 0, 1, 99] Output: 99 Your Task: You don\'t need to read or print anything. Your task is to complete the function SingleElement() which takes the array as input parameter and returns the element that appears only once. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= len(arr) <= 3 * 10^4 -2^31 <= arr[i] <= 2^31 - 1","solution":"def single_element(arr): Function to find the element that appears only once in an array where every other element appears three times. ones, twos = 0, 0 for num in arr: # Update `ones` with `num` ones = (ones ^ num) & ~twos # Update `twos` with `num` twos = (twos ^ num) & ~ones return ones"},{"question":"You are given an array of n integers. Let\'s call a subarray a[l..r] (where 1 leq l leq r leq n) \\"efficient\\" if it contains at least k distinct integers. Your task is to find the length of the shortest \\"efficient\\" subarray in the given array. If there is no such subarray, return -1. -----Input----- The first line contains two integers n and k separated by spaces (1 leq k leq n leq 100,000). The second line contains n integers, separated by spaces, representing the elements of the array (1 leq a_i leq 10^9). -----Output----- Print the length of the shortest efficient subarray if it exists, otherwise print -1. -----Examples----- Input 7 2 1 2 2 1 2 3 4 Output 2 Input 6 3 1 2 1 3 4 1 Output 3 Input 5 1 1 1 1 1 1 Output 1 Input 5 3 1 1 1 1 1 Output -1 -----Note----- In the first example, the shortest subarray with at least 2 distinct integers is [2, 2], so the output is 2. In the second example, the shortest subarray with at least 3 distinct integers is [1, 3, 4], so the output is 3. In the third example, the shortest subarray with at least 1 distinct integer is [1], so the output is 1. In the fourth example, there is no subarray with 3 distinct integers, so the output is -1.","solution":"def shortest_efficient_subarray(n, k, arr): from collections import defaultdict if k > n: return -1 left = 0 min_length = float(\'inf\') unique_count = 0 freq_map = defaultdict(int) for right in range(n): if freq_map[arr[right]] == 0: unique_count += 1 freq_map[arr[right]] += 1 while unique_count >= k: min_length = min(min_length, right - left + 1) freq_map[arr[left]] -= 1 if freq_map[arr[left]] == 0: unique_count -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Geppetto is a famous craftsman, and he wants to build a new robot, but for that, he needs exactly k distinct components. There are n different components available at the market, but each can be in several quantities, so Geppetto can pick the same component several times. Geppetto\'s main concern is to build the robot from exactly k different components out of the n available. Your task is to count the number of ways in which Geppetto can build the robot by picking exactly k distinct components from the market. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of testcases. The first line of each testcase contains two integers n (1 le n le 100) and k (1 le k le 100) — the number of available different components and the number of distinct components needed to build the robot. The next line contains n integers c_1, c_2, ..., c_n (1 le c_i le 100), where c_i denotes the quantity of the i-th component available in the market. -----Output----- For each testcase, print a single integer — the number of ways to build the robot using exactly k distinct components. -----Examples----- Input 2 4 2 1 2 3 4 5 3 3 3 3 3 3 Output 6 10 -----Note----- In the first example, Geppetto can pick two distinct components out of four, and the number of such ways is given by the combination formula C(4, 2) = 6. In the second example, since each component is available in equal quantity, the number of ways to choose 3 distinct components out of 5 is C(5, 3) = 10.","solution":"from math import comb def count_ways(t, test_cases): results = [] for test_case in test_cases: n, k, quantities = test_case if k > n: results.append(0) else: results.append(comb(n, k)) return results"},{"question":"Anna is working on implementing a pagination system for an online reading platform. Each page should display a fixed number of words, ensuring that all words are fully intact on each page and no word is split between two pages. Task Create a function that takes a list of words and an integer representing the maximum number of words per page. The function should return a list of strings, where each string represents the words on a particular page, joined by a single space. If the input list is empty or the maximum number of words per page is less than or equal to zero, the function should return an empty list. Examples pagination([\\"This\\", \\"is\\", \\"an\\", \\"example\\", \\"of\\", \\"pagination\\"], 2) Output: ``` [ \\"This is\\", \\"an example\\", \\"of pagination\\" ] ``` pagination([\\"One\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\"], 3) Output: ``` [ \\"One two three\\", \\"four five\\" ] ``` pagination([\\"A\\", \\"B\\", \\"C\\"], 0) Output: ``` [] ``` pagination([], 5) Output: ``` [] ```","solution":"def pagination(words, max_words_per_page): Splits a list of words into pages with a maximum number of words per page. Args: - words: List of words to paginate. - max_words_per_page: Maximum number of words allowed per page. Returns: - List of strings, each representing the words on a particular page. if not words or max_words_per_page <= 0: return [] pages = [] for i in range(0, len(words), max_words_per_page): page = \\" \\".join(words[i:i + max_words_per_page]) pages.append(page) return pages"},{"question":"John is organizing a treasure hunt that involves multiple chests and keys. However, not all keys can open every chest. Each key can only open one specific chest, and each chest can only be opened by one specific key. All the chests need to be opened to claim the treasure. Your task is to determine if it is possible to open all the chests given a starting key for a specific chest. Once a chest is opened, it may contain additional keys for other chests. Write a function to solve this problem. -----Input----- The first line of input contains an integer `n`, the number of chests (1 ≤ n ≤ 1000). The second line contains `n` integers, where the `i-th` integer represents the chest that can be opened by the starting key. The following `n` lines describe the chests and their contents: the `i-th` line contains an integer `k[i]` (the number of keys inside the `i-th` chest), followed by a list of `k[i]` integers which are the labels of the chests that those keys can open. -----Output----- Print \\"YES\\" (without quotes) if all chests can be opened, otherwise print \\"NO\\" (without quotes). -----Example----- Input 4 2 0 1 3 2 1 4 1 4 Output YES Input 4 3 1 2 1 1 1 4 1 4 Output NO -----Note----- In the first sample, you start with a key that opens the 2nd chest. Inside the 2nd chest, you find a key that opens the 3rd chest. Inside the 3rd chest, you find keys to open the 1st and 4th chests. After using all the keys, all chests are opened. In the second sample, even though there is a path through some chests, there is no key that can open chest 2, which makes it impossible to open all chests.","solution":"def can_open_all_chests(n, start_key, chests_contents): Determines if all chests can be opened starting with the given key. :param n: integer, the number of chests :param start_key: integer, the key to the starting chest :param chests_contents: list of list of integers, each sublist representing the keys in each chest :return: \\"YES\\" if all chests can be opened, otherwise \\"NO\\" opened_chests = set() keys = [start_key] while keys: current_key = keys.pop() if current_key in opened_chests: continue opened_chests.add(current_key) for key in chests_contents[current_key - 1]: if key not in opened_chests: keys.append(key) return \\"YES\\" if len(opened_chests) == n else \\"NO\\" # Example usage # chests_contents = [ # [], # Chest 1 (index 0) # [3], # Chest 2 (index 1) # [1, 4], # Chest 3 (index 2) # [4] # Chest 4 (index 3) # ] # n = 4 # start_key = 2 # print(can_open_all_chests(n, start_key, chests_contents)) # Output: YES"},{"question":"Dave is a sandwich enthusiast who loves to experiment with different ingredients to create new sandwiches. One day, he decides to catalog his sandwich recipes. Each recipe consists of a list of ingredients, and Dave wants to find out how many unique ingredients he uses across all his recipes. To help Dave, write a function that will take as input a list of sandwich recipes, where each recipe itself is a list of ingredients. The function should return the total number of unique ingredients used in all recipes. -----Input----- The input consists of a number of lines. Each line represents a single recipe containing space-separated ingredient names. Each ingredient name consists of lowercase letters only. The input ends with an empty line. -----Output----- Output a single integer representing the total number of unique ingredients used across all recipes. -----Examples----- Sample Input: lettuce tomato cheese turkey lettuce bacon tomato Sample Output: 4 Explanation: The unique ingredients are lettuce, tomato, cheese, turkey, bacon, and the count of these unique ingredients is 4.","solution":"def count_unique_ingredients(recipes): Returns the count of unique ingredients across all recipes. Parameters: recipes (list of lists): A list where each element is a list of ingredients of a recipe. Returns: int: Total number of unique ingredients. unique_ingredients = set() for recipe in recipes: for ingredient in recipe: unique_ingredients.add(ingredient) return len(unique_ingredients)"},{"question":"A circular racetrack has N checkpoints placed at equal distances. A robot starts from checkpoint 0 and needs to visit all the checkpoints in the minimum possible distance. The robot can only move in one of the two directions: clockwise or counterclockwise. Given the distances the robot has already traveled, determine the minimum distance it needs to travel from its current checkpoint to visit all remaining checkpoints exactly once. **Example 1:** ``` Input: N = 4, traveled = [0, 1] Output: 3 Explanation: The robot starts at checkpoint 0. It visits checkpoint 1 (traveled distance = 1). Now it needs to cover a distance of 3 to visit all remaining checkpoints [2, 3] in the circular racetrack. ``` **Example 2:** ``` Input: N = 6, traveled = [0, 2, 4] Output: 2 Explanation: The robot starts at checkpoint 0. It visits checkpoints 2 and 4 (traveled distance = 4). Now it needs to cover a distance of 2 to visit all remaining checkpoints [1, 3, 5] in the circular racetrack. ``` Your Task: You do not need to read input or print anything. Your task is to complete the function `minDistance()` which takes two parameters, an integer N (the total number of checkpoints) and an array traveled (list of checkpoints the robot has already visited), and returns the minimum distance the robot needs to travel to visit the remaining checkpoints. **Expected Time Complexity:** O(N) **Expected Auxiliary Space:** O(1) **Constraints:** 1. 3 ≤ N ≤ 10^5 2. 1 ≤ len(traveled) ≤ N 3. 0 ≤ traveled[i] < N 4. Checkpoints in traveled are distinct.","solution":"def minDistance(N, traveled): Returns the minimum distance the robot needs to travel to visit the remaining checkpoints. remaining_checkpoints = set(range(N)) - set(traveled) return len(remaining_checkpoints)"},{"question":"Chandu is an avid rock collector. He has a collection of rocks, each rock having a specific weight and value. Chandu wants to maximize the total value of rocks he can carry in his knapsack, but he can only carry a maximum weight W. Chandu\'s problem is classic and can be solved using the knapsack algorithm. He wants you to write a program that helps him determine the maximum value he can collect. Your task is to write a function that takes the maximum weight W, an array of rock weights, and an array of corresponding rock values. Use the 0/1 Knapsack algorithm to decide which rocks Chandu should carry to maximize the value without exceeding the weight limit. Input The first line contains two integers W (maximum weight) and N (number of rocks). The next N lines contain two integers each, the weight Wi and the value Vi of each rock. Output Print a single integer, the maximum value Chandu can collect. Constraints 1 ≤ W ≤ 10^4 1 ≤ N ≤ 300 1 ≤ Wi, Vi ≤ 1000 SAMPLE INPUT 10 4 5 10 4 40 6 30 3 50 SAMPLE OUTPUT 90","solution":"def knapsack(W, weights, values): Determines the maximum value Chandu can collect in his knapsack with a given maximum weight. :param W: Maximum weight the knapsack can carry :param weights: List of weights of the rocks :param values: List of values of the rocks :return: Maximum value that can be collected without exceeding the weight N = len(weights) # Create a 2D DP array dp = [[0] * (W + 1) for _ in range(N + 1)] # Build the DP table in bottom-up manner for i in range(1, N + 1): for w in range(W + 1): if weights[i - 1] <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]) else: dp[i][w] = dp[i - 1][w] return dp[N][W]"},{"question":"Raksha plans to organize a charity event and she wants to prepare gift hampers with different items. Each type of item has a specific weight, and she wants to maximize the total number of items in each gift hamper without exceeding a specified weight limit. The table below lists the available items and their respective weights. | Item Name | Weight | |----------------------|--------| | Toy | 1 | | Book | 3 | | Chocolate | 5 | | Flower Bouquet | 7 | | Stuffed Animal | 9 | | Jewelry | 11 | | Electronic Gadget | 13 | | Gift Voucher | 15 | Each type of item has an unlimited supply. Raksha needs your help to determine the maximum number of items that can be included in a gift hamper without exceeding the given weight limit. ---Input--- The first line contains an integer T, the number of test cases. Each test case contains an integer W, the maximum weight limit for the gift hamper. ---Output--- For each test case, print the maximum number of items that can be included in the gift hamper without exceeding the weight limit W. ---Constraints--- 1 ≤ T ≤ 10 1 ≤ W ≤ 1000 It is guaranteed that there exist combinations of items that can be included within the weight limit for each test case. ---Sample Input--- 3 10 20 30 ---Sample Output--- 10 20 30 ---Explanations--- In the first sample, Raksha can pick the following combinations: 10 Toys (1x10=10) 3 Books and 1 Toy (3x3+1=10) 2 Chocolates can almost make the limit but would be preferred if smallest number of items in a single hamper needs to be considered (5x2=10) Therefore, the maximum number of items that can be added within weight limit 10 is 10 (10 Toys). In the second sample, the weights of items can be combined various ways to reach up to 20 while maximizing the count. For example: 20 Toys (1x20=20) 6 Books and 2 Toys (6x3+2=20) 4 Chocolates (4x5=20) Therefore, the maximum number of items that can be added within weight limit 20 is 20 (20 Toys). Similarly, the explanations apply for the third sample where maximum quantity within weight limit is obtained by 30 Toys (1x30=30). The goal is always to maximize item count within given weight limit.","solution":"def maximize_items(T, weight_limits): results = [] for W in weight_limits: # Since the Toy weighs 1 and has the smallest weight, # the maximum number of items we can include is W max_items = W // 1 results.append(max_items) return results"},{"question":"Write a function that takes an array of integers and returns the \\"third smallest\\" number in the array. If the array has fewer than three distinct numbers, the function should return the smallest number. Example 1: Input: [3, 2, 1, 5, 6, 4] Output: 3 Example 2: Input: [1, 2] Output: 1 Note: - You may assume the array contains only integers. - The array may contain both positive and negative integers. - If the array contains fewer than three distinct elements, return the smallest element.","solution":"def third_smallest(arr): Returns the third smallest number in the array. If the array has fewer than three distinct numbers, returns the smallest number. if not arr: raise ValueError(\\"Array must not be empty\\") distinct_numbers = list(set(arr)) distinct_numbers.sort() if len(distinct_numbers) < 3: return distinct_numbers[0] else: return distinct_numbers[2]"},{"question":"Given an unsorted array of integers, your task is to find the length of the longest contiguous subarray such that every element in this subarray is distinct. Example 1: Input: [1, 2, 1, 3, 4, 2, 3] Output: 4 Explanation: The longest subarray with all distinct elements is [1, 3, 4, 2]. Example 2: Input: [1, 2, 3, 1, 4, 5, 1] Output: 5 Explanation: The longest subarray with all distinct elements is [2, 3, 1, 4, 5]. Your Task: You don\'t need to read or print anything. Your task is to complete the function `longestSubarray` which takes the array as input parameter and returns the length of the longest subarray with all distinct elements. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= n <= 10^5 1 <= array[i] <= 10^5","solution":"def longestSubarray(arr): Returns the length of the longest contiguous subarray with all distinct elements. if not arr: return 0 n = len(arr) max_length = 0 start = 0 seen_elements = set() for end in range(n): while arr[end] in seen_elements: seen_elements.remove(arr[start]) start += 1 seen_elements.add(arr[end]) max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given a string containing only lowercase English letters and an integer k, determine if the string can be rearranged such that the new string does not contain any repeating characters within a distance of k. If it\'s possible, print \\"Yes\\", otherwise print \\"No\\". Constraints * The length of the string will be between 1 and 100, inclusive. * 1 leq k leq length of the string. Input Input is given from Standard Input in the following format: s k Output Print \\"Yes\\" if the string can be rearranged according to the conditions, otherwise print \\"No\\". Examples Input aabbcc 3 Output Yes Input aaabc 3 Output No Input aaadbbcc 2 Output Yes","solution":"from collections import Counter import heapq def can_rearrange_string(s, k): Determines if the string can be rearranged such that no repeating characters are within a distance of k. Parameters: s (str): The input string containing only lowercase English letters. k (int): The minimum distance between the same characters. Returns: str: \\"Yes\\" if possible, otherwise \\"No\\". if k == 1: return \\"Yes\\" count = Counter(s) max_heap = [(-value, key) for key, value in count.items()] heapq.heapify(max_heap) result = [] wait_queue = [] while max_heap: current_count, current_char = heapq.heappop(max_heap) result.append(current_char) wait_queue.append((current_count + 1, current_char)) if len(wait_queue) < k: continue previous_count, previous_char = wait_queue.pop(0) if previous_count < 0: heapq.heappush(max_heap, (previous_count, previous_char)) if len(result) == len(s): return \\"Yes\\" else: return \\"No\\""},{"question":"Read problems statements in Mandarin Chinese and Russian. Chef has a big garden with N plants. Every plant has a specific amount of sunshine it can receive daily before it starts withering. Additionally, every plant shares some symbiotic relationships with some other plants - meaning, if two plants share a symbiotic relationship, they share their sunshine and both thrive. Chef wants your help to design an irrigation system such that the maximum number of plants can thrive without any of them withering. ----- Input ----- The first line contains two space-separated integers N and M, denoting the number of plants and the number of symbiotic relationships respectively. Each of the following M lines contains three integers a_i, b_i, and c_i, denoting a symbiotic relationship between plants a_i and b_i with c_i specifying the amount of shared sunshine between them. Each plant i (where 0 <= i < N) initially gets 1 unit of sunshine daily. ----- Output ----- Output the maximum number of plants that can thrive without withering. A plant is considered to be thriving if it receives sunshine less than or equal to the total number of units it can receive including symbiotic relationships. ----- Scoring ----- Your score will be based on the number of plants that can thrive, with larger inputs offering higher potential scores. ----- Constraints ----- 1 ≤ N ≤ 1000 1 ≤ M ≤ 10000 0 ≤ a_i, b_i < N 1 ≤ c_i ≤ 100 1 ≤ initial_sunshine ≤ 10000 ----- Example ----- Input: 4 3 0 1 2 1 2 1 3 0 4 Output: 4 Details of the example: Plant 0 and Plant 3 share a symbiotic relationship with 4 units of shared sunshine. Plant 1 shares a relationship with Plant 2, adding 1 unit of shared sunshine. Given the input, all plants receive less than or equal to their maximum capacity of sunshine, therefore all plants thrive.","solution":"def max_thriving_plants(N, M, relationships): from collections import defaultdict import heapq # Building the graph adj = defaultdict(list) for a, b, c in relationships: adj[a].append((b, c)) adj[b].append((a, c)) # Array to store minimum sunshine needed for each plant sunshine_needed = [float(\'inf\')] * N for i in range(N): sunshine_needed[i] = 1 # Each plant initially needs 1 unit # A priority queue to do Dijkstra\'s-like approach to find minimum sunshine needed per plant priority_queue = [(1, i) for i in range(N)] # (initial sunshine needed, plant) heapq.heapify(priority_queue) while priority_queue: current_sun, u = heapq.heappop(priority_queue) if current_sun > sunshine_needed[u]: continue for v, additional_sun in adj[u]: if sunshine_needed[u] + additional_sun < sunshine_needed[v]: sunshine_needed[v] = sunshine_needed[u] + additional_sun heapq.heappush(priority_queue, (sunshine_needed[v], v)) # Count thriving plants return sum(1 for sun in sunshine_needed if sun <= 10000) # Test the function if __name__ == \\"__main__\\": N = 4 M = 3 relationships = [ (0, 1, 2), (1, 2, 1), (3, 0, 4) ] print(max_thriving_plants(N, M, relationships)) # Output: 4"},{"question":"Story Yesterday, while organizing my bookshelf, I found myself sorting through several books of varying sizes and shapes. I had to place them systematically so that they are sorted by their height in ascending order. Each book was represented by a numerical value corresponding to its height. However, I couldn\'t use any built-in sort functions or libraries, making the task more challenging. I need you to implement a sorting algorithm to help me sort the books correctly. You should use a simple sorting algorithm such as Bubble Sort to achieve this. Task Implement a Bubble Sort algorithm to sort an array of book heights in ascending order. Input - A list of integers `books`, each representing the height of a book. Output - The input list sorted in ascending order. Example ```python books = [5, 3, 8, 6, 2] output = bubble_sort(books) # Output: [2, 3, 5, 6, 8] ``` Constraints - Each integer in `books` will be between `1` and `1000`. - The length of `books` will be at most `100`. Notes - Bubble Sort works by repeatedly stepping through the list, comparing adjacent elements and swapping them if they are in the wrong order. The pass through the list is repeated until the list is sorted. - You should not use any in-built sorting library or function. Implement the sorting logic manually. - Think about how you can optimize the algorithm to reduce unnecessary comparisons after each pass. ```python def bubble_sort(books): # Your code here # Example usage books = [5, 3, 8, 6, 2] sorted_books = bubble_sort(books) print(sorted_books) # Output: [2, 3, 5, 6, 8] ```","solution":"def bubble_sort(books): Sorts a list of book heights in ascending order using the Bubble Sort algorithm. Parameters: books (list of int): A list where each element represents the height of a book. Returns: list of int: The input list sorted in ascending order. n = len(books) for i in range(n): swapped = False for j in range(0, n-i-1): if books[j] > books[j+1]: books[j], books[j+1] = books[j+1], books[j] swapped = True if not swapped: break return books # Example usage books = [5, 3, 8, 6, 2] sorted_books = bubble_sort(books) print(sorted_books) # Output: [2, 3, 5, 6, 8]"},{"question":"Masha has recently taken up the hobby of organizing bookshelves. She has n books, each with a unique genre. She wants to arrange them in a particular manner: A good arrangement for Masha\'s bookshelf should consist of k subsections. Each subsection should contain books of the same genre and be in ascending order of their genres. Formally, if t books are used and their genres are g_1, g_2, ..., g_t in the order they are placed on the shelf, the following conditions should hold: - The books should be divided into exactly k subsections. - Each subsection should contain books of the same genre, and the sequence of genres in these subsections should be ascending. - Within each subsection, the books should be arranged in an ascending order. Masha also likes certain genre arrangements more and she has defined l preferred genre numbers g_1, g_2, ..., g_l that she particularly enjoys. For each of these preferred genres, she wants to count how many distinct good arrangements include these specific genres as their respective subsections. Input The first line contains two integers n and k (1 ≤ n, k ≤ 10^5) – the number of books and the number of subsections Masha wants. The second line contains n integers g_i (1 ≤ g_i ≤ 10^5) – the genres of the books Masha has. All integers are distinct. The third line contains one integer l (1 ≤ l ≤ 10^5) – the number of preferred genre numbers. The fourth line contains l integers p_1, p_2, ..., p_l (1 ≤ p_i ≤ 10^5) – the preferred genre numbers. Output For each p_i, print one integer – the number of good arrangements with that genre number as one of the subsections. Examples Input 5 2 3 1 2 5 4 3 2 4 5 Output 1 1 1 Input 6 3 6 1 7 3 2 4 2 1 3 Output 1 1 Note Possible good arrangements in the first example: - For preferred genre 2: [1, 2, 3, 4, 5] - For preferred genre 4: [1, 2, 3, 4, 5] - For preferred genre 5: [1, 2, 3, 4, 5] Possible good arrangements in the second example: - For preferred genre 1: [1, 2, 3, 4, 6, 7] - For preferred genre 3: [1, 2, 3, 4, 6, 7]","solution":"def count_good_arrangements(n, k, genres, l, preferred_genres): # Sort the genres to arrange them in ascending order for checking the subsections sorted_genres = sorted(genres) # To store the results for preferred genres preferred_results = {} # Only one good arrangement is possible since genres must be sorted and grouped # in exactly k subsections for genre in preferred_genres: if genre in sorted_genres: preferred_results[genre] = 1 else: preferred_results[genre] = 0 return [preferred_results[genre] for genre in preferred_genres]"},{"question":"Given an array of non-negative integers, write a function to calculate the maximum amount one can obtain under the following conditions: 1. You cannot take two adjacent elements. 2. You can wrap around, meaning that after the last element, you can consider the first element as its neighbor. More formally, you should find the maximum sum such that no two elements are adjacent in the original array and such that considering the last element makes the first element ineligible for selection. # Input The first line of input contains a single integer n (1 ≤ n ≤ 100,000) — the length of the array. The second line contains n non-negative integers a0, a1, ..., an-1 (0 ≤ ai ≤ 10^4) — the elements of the array. # Output Output a single integer, the maximum sum of selected elements under the given conditions. # Example Input 8 3 2 5 10 7 5 4 3 Output 20 Input 4 1 2 3 4 Output 6 # Explanation In the first example, the optimal selection is to choose elements at indexes 0, 3, and 5 which sum up to 20. In the second example, the optimal selection can be to choose elements at indexes 1 and 3 which sum up to 6. Selecting the element at index 3 makes the element at index 0 ineligible for selection because of the wrap-around condition.","solution":"def max_non_adjacent_sum(arr): Returns the maximum sum of non-adjacent elements in an array considering circular adjacency (wrap-around). n = len(arr) if n == 1: return arr[0] # Helper function to calculate max sum excluding either first or last element def max_sum_exclude_first_or_last(start, end): prev1, prev2 = 0, 0 for i in range(start, end): current = max(prev1, prev2 + arr[i]) prev2 = prev1 prev1 = current return prev1 # Calculate excluding the first element and the last element (circular exclusion) exclude_first = max_sum_exclude_first_or_last(1, n) exclude_last = max_sum_exclude_first_or_last(0, n-1) return max(exclude_first, exclude_last)"},{"question":"**Problem Statement:** A new programming language called FlexiScript has a unique way of dealing with numbers and their manipulations. A number in FlexiScript is simply an integer which can be positive, negative, or zero. The language offers several functions for manipulating numbers, as described below: - `add(x, y)` takes two integers `x` and `y` and returns their sum. For example, `add(3, 4)` returns `7`. - `multiply(x, y)` takes two integers `x` and `y` and returns their product. For example, `multiply(3, 4)` returns `12`. - `subtract(x, y)` takes two integers `x` and `y` and returns the result of subtracting `y` from `x`. For example, `subtract(10, 4)` returns `6`. - `divide(x, y)` takes two integers `x` and `y` and returns the quotient of `x` divided by `y`. For example, `divide(12, 4)` returns `3`. It is guaranteed that `y` is not `0`. - `power(x, y)` takes two integers `x` and `y` and returns `x` raised to the power of `y`. For example, `power(2, 3)` returns `8`. - `sqrt(x)` takes a single integer `x` and returns the integer part of its square root. For example, `sqrt(9)` returns `3`. It is guaranteed that `x` is non-negative. Your task is to evaluate an expression written in FlexiScript and output the result. The given expression will always be in a valid format and doesn\'t exceed 500 characters in length. Commands in FlexiScript are case-insensitive. So to call `add(x, y)` you can write `AdD(x, y)`. The result should always be displayed as a single integer. **Input:** A single line containing the valid FlexiScript expression. Each number in the input will be between -1000 and 1000 (both inclusive). It is guaranteed that the result will always be within the range of a 32-bit signed integer. **Output:** Print a single integer, which is the result of the evaluated expression. **Examples:** Example 1: Input: ``` add(3, 5) ``` Output: ``` 8 ``` Example 2: Input: ``` multiply(add(2, 3), subtract(7, 2)) ``` Output: ``` 25 ``` Example 3: Input: ``` power(2, multiply(2, 2)) ``` Output: ``` 16 ``` Example 4: Input: ``` divide(multiply(10, 10), 5) ``` Output: ``` 20 ``` Example 5: Input: ``` sqrt(power(5, 2)) ``` Output: ``` 5 ```","solution":"import math def add(x, y): Returns the sum of x and y. return x + y def multiply(x, y): Returns the product of x and y. return x * y def subtract(x, y): Returns the result of subtracting y from x. return x - y def divide(x, y): Returns the quotient of x divided by y. It is guaranteed that y is not 0. return x // y def power(x, y): Returns x raised to the power of y. return x ** y def sqrt(x): Returns the integer part of the square root of x. It is guaranteed that x is non-negative. return int(math.sqrt(x)) def evaluate_expression(expression): Evaluates a valid FlexiScript expression and returns the result. # Normalize the command to lowercase to make them case-insensitive expression = expression.lower() # Define a safe eval environment eval_environment = { \'add\': add, \'multiply\': multiply, \'subtract\': subtract, \'divide\': divide, \'power\': power, \'sqrt\': sqrt } # Evaluate the expression return eval(expression, {}, eval_environment) # Example usage expression = \\"multiply(add(2, 3), subtract(7, 2))\\" result = evaluate_expression(expression) print(result)"},{"question":"You are building a messaging application that allows users to send and receive messages in real-time. To ensure efficient delivery of messages, the application employs a priority queue system, where each message is assigned a priority level. Higher priority messages are delivered before lower priority ones, and messages with the same priority level are delivered in the order they were received. The messaging system must support the following operations: 1. `SEND(priority, message)`: Adds a message with a given priority to the queue. 2. `RECEIVE()`: Retrieves and removes the highest priority message from the queue. If there are multiple messages with the same priority, the one that was added first is retrieved. If the queue is empty, this operation should return “NO_MESSAGES”. Your task is to implement the messaging system with the functionality described above. -----Input----- The input consists of: - an integer `m` (1 le m le 100), the number of operations. - the next `m` lines describe the operations. Each operation is one of the following: - `SEND p msg`: where `p` is an integer (1 le p le 100) representing the priority of the message and `msg` is a string (with length up to 100 characters) representing the message. - `RECEIVE`: no additional data, this retrieves and removes the highest priority message from the queue. -----Output----- For each `RECEIVE` operation, output the message that was retrieved. If there are no messages to retrieve at the time of a `RECEIVE` operation, output “NO_MESSAGES”. -----Examples----- Sample Input: 5 SEND 1 Hello SEND 3 World RECEIVE SEND 2 ! RECEIVE Sample Output: World !","solution":"import heapq class MessagingSystem: def __init__(self): self.queue = [] self.counter = 0 def send(self, priority, message): heapq.heappush(self.queue, (-priority, self.counter, message)) self.counter += 1 def receive(self): if not self.queue: return \\"NO_MESSAGES\\" return heapq.heappop(self.queue)[2] # Reading inputs for the given example def messaging_system(operations): m = int(operations[0]) messaging_app = MessagingSystem() results = [] for i in range(1, m + 1): operation = operations[i].split() if operation[0] == \'SEND\': priority = int(operation[1]) message = \' \'.join(operation[2:]) messaging_app.send(priority, message) elif operation[0] == \'RECEIVE\': result = messaging_app.receive() results.append(result) return results"},{"question":"You are given an array A of size N and Q queries to process on this array. Each query consists of two integers Li and Ri, and the task is to find the sum of elements from index Li to Ri in the array, inclusive. The array uses 1-based indexing. Input The first line of input contains two space-separated integers N and Q - the size of the array and the number of queries. The second line contains N space-separated integers - the elements of the array A. Then there are Q lines. The i-th line contains two space-separated integers - Li and Ri, denoting the i-th query. Output Output Q lines. For the i-th query, output the sum of elements from index Li to Ri. Constraints 1 ≤ N ≤ 100, 1 ≤ Q ≤ 100 : 14 points. 1 ≤ N ≤ 1000, 1 ≤ Q ≤ 1000 : 23 points. 1 ≤ N ≤ 10^5, 1 ≤ Q ≤ 10^5 : 63 points. 1 ≤ A[i] ≤ 10^9 1 ≤ Li ≤ Ri ≤ N Example Input: 5 3 1 2 3 4 5 1 3 2 4 1 5 Output: 6 9 15","solution":"def process_queries(N, Q, A, queries): Processes each query to find the sum of elements from index Li to Ri in the array A. Parameters: N (int): Size of the array. Q (int): Number of queries. A (list): List of integers representing the array. queries (list of tuples): Each tuple contains two integers (Li, Ri) representing the query. Returns: list: List of results for each query. # Generate prefix sums for the array to answer the sum queries efficiently prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prefix_sums[i] = prefix_sums[i - 1] + A[i - 1] results = [] for Li, Ri in queries: sum_Li_Ri = prefix_sums[Ri] - prefix_sums[Li - 1] results.append(sum_Li_Ri) return results"},{"question":"Alex is managing an online bookstore. He needs to categorize books into various genres and ensure that each genre section in the web application is correctly color-coded for easy identification for the customers. There are a set number of genres, G, with each genre having a specific color associated with it. The genres are represented by unique integers starting from 1 up to G. He needs to verify that the bookstore\'s genre categorization and color coding are consistent after a daily update, by checking the genre-color mapping for each book. A consistent mapping means that for every genre, the color used for each book in that genre remains the same as initially set. -----Constraints----- - 1 <= G <= 50 - 1 <= N <= 1000 -----Input:----- - First line contains two integers G and N which are the number of genres and the total number of books respectively. - Second line contains G space-separated integers where each integer represents the initial color code mapped to the corresponding genre. - Next N lines contain two integers each, representing the genre and current color code for each book. -----Output:----- - Print CONSISTENT if the categorization is consistent, else print INCONSISTENT. -----Sample Input:----- 3 5 1 2 3 1 1 2 2 3 3 1 1 2 2 -----Sample Output:----- CONSISTENT -----Explanation:----- There are 3 genres and 5 books in total. The initial color codes are 1 for genre 1, 2 for genre 2, and 3 for genre 3. After checking the color codes of the books, it is found that the genre-color mapping remains the same, hence the categorization is consistent.","solution":"def check_consistent(G, N, initial_colors, books): Checks if the genre-color mapping is consistent. Parameters: G (int): Number of genres. N (int): Number of books. initial_colors (list): Initial color codes for each genre. books (list of tuples): List where each tuple contains genre and current color code for each book. Returns: str: \\"CONSISTENT\\" if the mapping is consistent, otherwise \\"INCONSISTENT\\". for genre, current_color in books: if initial_colors[genre - 1] != current_color: return \\"INCONSISTENT\\" return \\"CONSISTENT\\" # Example usage: # G, N = 3, 5 # initial_colors = [1, 2, 3] # books = [(1, 1), (2, 2), (3, 3), (1, 1), (2, 2)] # result = check_consistent(G, N, initial_colors, books) # print(result) # Should print \\"CONSISTENT\\""},{"question":"You are given a list of non-negative integers representing the heights of vertical lines drawn on the x-axis such that the two endpoints of the i-th line are (i, 0) and (i, height[i]). Find two lines that together with the x-axis form a container, such that the container contains the most water. Note: You may not slant the container and height of the container is determined by the shorter of the two lines. Example 1: Input: height = [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The vertical lines are drawn at positions 0, 1, 2, 3, 4, 5, 6, 7, and 8. The heights of the lines are [1,8,6,2,5,4,8,3,7]. The container with the most water is formed by the lines at positions 1 and 8, and it contains 49 units of water. Example 2: Input: height = [1,1] Output: 1 Explanation: With heights [1,1], the lines at positions 0 and 1 form a container with 1 unit of water. Note: The number of lines is at least 2 and does not exceed 3 * 10^4. The height of lines is a non-negative integer and will not exceed 3 * 10^4.","solution":"def max_area(height): Returns the maximum amount of water a container can hold defined by the heights of the vertical lines. left = 0 right = len(height) - 1 max_water = 0 while left < right: width = right - left water = min(height[left], height[right]) * width max_water = max(max_water, water) if height[left] < height[right]: left += 1 else: right -= 1 return max_water"},{"question":"Given an array containing \'n\' distinct integers in the range [0, n], find the only number missing from the array. Your algorithm should run in O(n) complexity. Example: Input: [3, 0, 1] Output: 2 Explanation: The complete range of numbers is [0, 1, 2, 3], and 2 is missing from the array.","solution":"def find_missing_number(arr): Returns the only number missing from the array containing \'n\' distinct integers in the range [0, n]. n = len(arr) total_sum = n * (n + 1) / 2 # Using the formula for the sum of the first n natural numbers current_sum = sum(arr) return int(total_sum - current_sum)"},{"question":"Given an array of integers, you need to sort the array such that all even numbers come before all the odd numbers, while preserving the relative order of the even and odd numbers. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- Print the array after sorting it based on the described criteria. -----Example----- Input 7 1 2 3 4 5 6 7 Output 2 4 6 1 3 5 7 Input 5 9 7 5 3 1 Output 9 7 5 3 1 -----Note----- In the first example, the even numbers (2, 4, 6) are placed before the odd numbers (1, 3, 5, 7), preserving their relative positions. In the second example, since there are no even numbers, the array remains unchanged.","solution":"def sort_even_odd(arr): Sorts the array such that all even numbers come before all the odd numbers, while preserving the relative order of the even and odd numbers. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"You are a software engineer recently hired by a prestigious hospital to assist in digitizing their patient records. One of your tasks is to help manage patient schedules. A patient can have multiple appointments scheduled for them, and each appointment can span over multiple days. Given this overlap, it is essential to find any gaps of free days between their scheduled appointments for potential new bookings. You are given a list of appointments, where each appointment is represented as a start date and an end date (both inclusive). Your job is to write a function to find and list all the free periods (in terms of start and end date) between the appointments (i.e., days that are not covered by any of the appointments). Note: - The dates are given as strings in the format \\"YYYY-MM-DD\\". - The output should be a list of tuples, where each tuple represents the start and end date of a free period. Function Signature: ```python def find_free_periods(appointments: List[Tuple[str, str]]) -> List[Tuple[str, str]]: pass ``` Example: ```python appointments = [(\\"2023-01-01\\", \\"2023-01-05\\"), (\\"2023-01-08\\", \\"2023-01-10\\"), (\\"2023-01-12\\", \\"2023-01-15\\")] find_free_periods(appointments) # Output: [(\\"2023-01-06\\", \\"2023-01-07\\"), (\\"2023-01-11\\", \\"2023-01-11\\")] ``` Explanation: - There are free periods between: - \\"2023-01-05\\" and \\"2023-01-08\\" -> (\\"2023-01-06\\", \\"2023-01-07\\") - \\"2023-01-10\\" and \\"2023-01-12\\" -> (\\"2023-01-11\\", \\"2023-01-11\\")","solution":"from typing import List, Tuple from datetime import datetime, timedelta def find_free_periods(appointments: List[Tuple[str, str]]) -> List[Tuple[str, str]]: Finds and returns a list of free periods (start date and end date) between appointments. if not appointments: return [] # Convert date strings to datetime objects and sort appointments by start date appointments = [(datetime.strptime(start, \'%Y-%m-%d\'), datetime.strptime(end, \'%Y-%m-%d\')) for start, end in appointments] appointments.sort() free_periods = [] current_end = appointments[0][1] for start, end in appointments[1:]: if current_end < start - timedelta(days=1): free_start = current_end + timedelta(days=1) free_end = start - timedelta(days=1) free_periods.append((free_start.strftime(\'%Y-%m-%d\'), free_end.strftime(\'%Y-%m-%d\'))) current_end = max(current_end, end) return free_periods"},{"question":"Design a function `compute_statistics` that processes a list of integers and computes various statistical measures without using any external libraries, except for built-in Python functions. The statistical measures to be computed include: 1. Mean: The average of the numbers. 2. Median: The middle value when the numbers are sorted. 3. Mode: The number that appears most frequently. 4. Variance: The measure of how far each number in the list is from the mean. 5. Standard Deviation: The square root of the variance. # Function Signature ```python def compute_statistics(numbers: list) -> dict: Computes various statistical measures from a list of integers. :param numbers: List of integers :return: Dictionary with statistical measures - mean, median, mode, variance, and std deviation ``` # Requirements 1. **Mean Calculation**: - Calculate the sum of the numbers. - Divide by the count of the numbers. 2. **Median Calculation**: - Sort the numbers. - If the count of numbers is odd, the median is the middle number. - If the count is even, the median is the average of the two middle numbers. 3. **Mode Calculation**: - Identify the most frequently occurring number. - If there are multiple modes, return the smallest one. 4. **Variance Calculation**: - Measure the average of the squared differences from the Mean. 5. **Standard Deviation Calculation**: - Calculate the square root of the variance. # Example ```python numbers = [1, 2, 3, 4, 4, 6] print(compute_statistics(numbers)) # Output { \\"mean\\": 3.3333333333333335, \\"median\\": 3.5, \\"mode\\": 4, \\"variance\\": 3.888888888888889, \\"std_deviation\\": 1.9720265943665387 } ``` # Notes - Handle the case where the input list is empty. Return `None` or appropriate values for all measures in such a case. - Ensure your function is efficient and handles large lists of integers gracefully.","solution":"def compute_statistics(numbers: list) -> dict: Computes various statistical measures from a list of integers. :param numbers: List of integers :return: Dictionary with statistical measures - mean, median, mode, variance, and std deviation if not numbers: return { \\"mean\\": None, \\"median\\": None, \\"mode\\": None, \\"variance\\": None, \\"std_deviation\\": None } n = len(numbers) sorted_numbers = sorted(numbers) # Mean mean = sum(numbers) / n # Median if n % 2 == 1: median = sorted_numbers[n // 2] else: median = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2 # Mode frequency = {} for number in numbers: if number in frequency: frequency[number] += 1 else: frequency[number] = 1 max_frequency = max(frequency.values()) modes = [num for num, freq in frequency.items() if freq == max_frequency] mode = min(modes) # Variance variance = sum((x - mean) ** 2 for x in numbers) / n # Standard Deviation std_deviation = variance ** 0.5 return { \\"mean\\": mean, \\"median\\": median, \\"mode\\": mode, \\"variance\\": variance, \\"std_deviation\\": std_deviation }"},{"question":"**Matrix Spiral Traversal** # Overview Given a rectangular matrix of `m` rows and `n` columns, perform a spiral traversal starting from the top-left corner and moving clockwise. # Rules 1. Start at the top-left element of the matrix. 2. Traverse the first row from left to right. 3. Traverse the last column from top to bottom. 4. Traverse the last row from right to left. 5. Traverse the first column from bottom to top. 6. Repeat the process for the inner sub-matrix until all elements are visited. # Input The input is a list of lists representing the matrix: * `matrix` = a non-empty list of lists of integers, where each sublist represents a row in the matrix. **Constraints:** * The matrix will have at least one row and one column. * Elements of `matrix` are integers. # Output Return a list containing the elements of the matrix in the order of the spiral traversal. # Example Run spiral traversal for the given matrix **Input** * `matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]` **Result** * `[1, 2, 3, 6, 9, 8, 7, 4, 5]` # Additional Example **Input** * `matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]` **Result** * `[1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]` --- Good luck!","solution":"def spiral_traversal(matrix): Perform a spiral traversal on the given matrix and return the order of elements in a list. result = [] if not matrix: return result top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right along the top row for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 # Traverse from top to bottom along the right column for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left along the bottom row for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse from bottom to top along the left column for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"In a faraway land, there exists a magical forest with trees that produce fruits every season. The fruits have varying levels of magical properties, represented by a non-negative integer value. Young wizards love to collect these fruits, but they are only interested in certain fruits each season. Wizards always try to collect fruits such that the sum of their magical properties is exactly equal to a given value T. However, they must collect exactly m fruits to reach this sum. Your task is to help the wizards in determining whether it\'s possible to collect exactly m fruits whose sum is equal to T. Given an array of integers representing the magical properties of the fruits and two integers m and T, determine if there\'s a possible combination of exactly m fruits whose sum of magical properties equals T. ----Input---- The first line of input contains an integer q (1 leq q leq 100), the number of queries. Each of the next q queries includes three lines: - The first line contains two integers n and m (1 leq n leq 50, 1 leq m leq n), where n represents the number of fruits available, and m represents the number of fruits to be selected. - The second line contains an array of n non-negative integers a_i (0 leq a_i leq 50), representing the magical properties of the fruits. - The third line contains the target sum T (0 leq T leq 2500). ----Output---- For each query, print \\"YES\\" if it is possible to collect exactly m fruits such that the sum of their magical properties is T. Otherwise, print \\"NO\\". ----Example---- Input 2 5 3 10 20 30 40 50 60 4 2 1 2 3 4 10 Output YES NO ----Note---- In the first query, one possible selection is the fruits with magical properties [10, 20, 30] which sum up to 60. In the second query, it is not possible to select 2 fruits from [1, 2, 3, 4] such that their sum is 10.","solution":"from itertools import combinations def can_collect_fruits(q, queries): results = [] for i in range(q): n, m = queries[i][0] fruits = queries[i][1] target_sum = queries[i][2] # Check all combinations of m fruits found = False for comb in combinations(fruits, m): if sum(comb) == target_sum: results.append(\\"YES\\") found = True break if not found: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers, nums, and a target value, target. Find all unique pairs of numbers in the array that add up to the target. A pair is considered unique if no element is reused in other pairs. Example 1: Input: nums = [2, 7, 11, 15, -2, 2, 8, 1], target = 9 Output: [[2, 7], [-2, 11], [1, 8]] Explanation: Pairs that add up to 9 are (2, 7), (-2, 11), and (1, 8). Each element from nums can only be used once in a pair. Example 2: Input: nums = [1, 2, 3, 4, 5, 6, 7], target = 10 Output: [[3, 7], [4, 6]] Explanation: Pairs that add up to 10 are (3, 7) and (4, 6). Each element from nums can only be used once in a pair. Note: - The order of pairs in the output does not matter. - Each pair of numbers should be returned in non-descending order.","solution":"def find_pairs(nums, target): Finds all unique pairs of numbers in the array nums that add up to the target. nums.sort() seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return [list(pair) for pair in pairs]"},{"question":"Sophie is learning how to create patterns with squares. She decided to form an (n times n) grid of squares, each with a side length of 1. The sides of the squares are aligned with the x-axis and y-axis of the Cartesian coordinate system, and their vertices are located at integer coordinates. To save on the number of overall lines needed, Sophie draws the full grid all at once, then fills in the internal lines. However, Sophie wants to do something more interesting: for each square, she wants to color its sides. She will use different colors for the sides of each square: Color_1 for the top, Color_2 for the right, Color_3 for the bottom, and Color_4 for the left. Sophie knows that a set of coordinates describing the sides of each square can be represented in the format: [text{((x1,y1),(x2,y2), color)}] For example, the top side of a square with bottom-left vertex at ((1, 1)) is represented as: [text{((1, 2), (2, 2), Color_1)}] Given (n), the grid size, develop an algorithm that outputs the list of all sides of all squares within the (n times n) grid along with their associated colors. # Input: - An integer (n) representing the size of the grid (1 ≤ (n) ≤ 100) # Output: - A list of tuples, each describing a side of a square in the format (( (x1, y1), (x2, y2), color)), where x and y are coordinates and color is one of {Color_1, Color_2, Color_3, Color_4}. # Examples: **Input:** ``` 2 ``` **Output:** ``` [((0, 1), (1, 1), Color_3), ((1, 1), (2, 1), Color_3), ((0, 2), (1, 2), Color_1), ((1, 2), (2, 2), Color_1), ((1, 0), (1, 1), Color_4), ((2, 0), (2, 1), Color_4), ((1, 1), (1, 2), Color_2), ((2, 1), (2, 2), Color_2), ((0, 0), (1, 0), Color_3), ((1, 0), (2, 0), Color_3), ((0, 1), (1, 1), Color_1), ((1, 1), (2, 1), Color_1), ((0, 0), (0, 1), Color_4), ((1, 0), (1, 1), Color_4), ((2, 0), (2, 1), Color_4), ((0, 1), (0, 2), Color_2), ((1, 1), (1, 2), Color_2), ((2, 1), (2, 2), Color_2)] ``` **Input:** ``` 1 ``` **Output:** ``` [((0, 1), (1, 1), Color_1), ((1, 0), (1, 1), Color_2), ((0, 0), (1, 0), Color_3), ((0, 0), (0, 1), Color_4)] ```","solution":"def generate_grid_sides(n): Generates the list of all sides of all squares within the n x n grid along with their associated colors. Parameters: n (int): size of the grid (1 ≤ n ≤ 100) Returns: list: List of tuples, each describing a side of a square in the format ((x1, y1), (x2, y2), color), where x and y are coordinates and color is one of {Color_1, Color_2, Color_3, Color_4} colors = [\'Color_1\', \'Color_2\', \'Color_3\', \'Color_4\'] sides = [] for x in range(n): for y in range(n): # Bottom side sides.append(((x, y), (x + 1, y), \'Color_3\')) # Top side sides.append(((x, y + 1), (x + 1, y + 1), \'Color_1\')) # Left side sides.append(((x, y), (x, y + 1), \'Color_4\')) # Right side sides.append(((x + 1, y), (x + 1, y + 1), \'Color_2\')) return sides"},{"question":"A string is called cyclic if it can be obtained by rotating another string. For example, the strings \\"abcde\\", \\"bcdea\\", \\"cdeab\\", \\"deabc\\", and \\"eabcd\\" are all cyclic variations of each other. Your task is to write a program that checks whether one string is a cyclic rotation of another. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100000) which represents the length of the string. The second line contains the string s of length n. The third line contains the string t of length n. -----Output----- Print YES if t is a cyclic rotation of s. Otherwise, print NO. -----Examples----- Input 5 abcde cdeab Output YES Input 6 abcdef abcfde Output NO","solution":"def is_cyclic_rotation(n, s, t): Checks if string t is a cyclic rotation of string s. Parameters: n (int): the length of the string. s (str): the original string. t (str): the string to check if it is a cyclic rotation of s. Returns: str: \\"YES\\" if t is a cyclic rotation of s, otherwise \\"NO\\". if len(s) != n or len(t) != n: return \\"NO\\" concatenated = s + s if t in concatenated: return \\"YES\\" return \\"NO\\""},{"question":"Alice loves to climb mountains, and she meticulously tracks her elevation progress during her hikes. She records the elevation at every mile along her hike. Sometimes, Alice sets herself a challenge to find the longest peak she climbed during a hike. A peak is defined as the sequence of miles where the elevation strictly increases until it reaches a summit (highest point in the peak sequence) and then strictly decreases. Your task is to help Alice determine the length of the longest peak in her recorded hike. If there are multiple peaks of the same maximum length, the first occurring peak should be considered. -----Input----- The input consists of one case. The first line contains an integer M (1 leq M leq 10000), the number of miles recorded during the hike. The second line contains M integers e_1, e_2, ldots, e_M (0 leq e_i leq 10000), where e_i represents the elevation at the i-th mile recorded in the hike. -----Output----- On the first line, print the length of the longest peak. If no peak is found, print 0. On the second line, print the starting mile (1-based index) of the longest peak found. If there are no peaks, print -1 instead. -----Examples----- Sample Input: 10 1 3 2 1 4 6 4 1 2 3 Sample Output: 5 4 Sample Input: 5 1 2 3 4 5 Sample Output: 0 -1","solution":"def longest_peak_length_and_start(M, elevations): max_peak_length = 0 starting_mile = -1 for i in range(1, M - 1): # Find peaks if elevations[i - 1] < elevations[i] > elevations[i + 1]: # Check the left part of peak left_idx = i - 1 while left_idx > 0 and elevations[left_idx] > elevations[left_idx - 1]: left_idx -= 1 # Check the right part of peak right_idx = i + 1 while right_idx < M - 1 and elevations[right_idx] > elevations[right_idx + 1]: right_idx += 1 peak_length = right_idx - left_idx + 1 if peak_length > max_peak_length: max_peak_length = peak_length starting_mile = left_idx + 1 return max_peak_length, starting_mile # Sample usage to verify the solution works: M = 10 elevations = [1, 3, 2, 1, 4, 6, 4, 1, 2, 3] peak_length, start_mile = longest_peak_length_and_start(M, elevations) print(peak_length, start_mile) # Expected output: 5, 4"},{"question":"Given an array of integers and a target value, find if there exists a pair of elements in the array whose difference is equal to the target value. Input: First line of input contains an integer t, number of test cases (1 ≤ t ≤ 100). For each test case: - First line contains two integers n and k, where n (1 ≤ n ≤ 10^5) is the size of the array, and k (0 ≤ k ≤ 10^9) is the target difference. - Second line contains n space-separated integers representing the elements of the array. Each integer in the array will be between -10^9 and 10^9. Output: For each test case output \\"Yes\\" if there exists a pair of elements in the array whose difference is equal to the target value, otherwise output \\"No\\". SAMPLE INPUT 2 5 2 1 5 3 4 2 4 6 1 2 3 4 SAMPLE OUTPUT Yes No Explanation: In the first test case, there are pairs (1, 3), (5, 3), and (3, 1) having a difference of 2. In the second test case, no pair has a difference of 6.","solution":"def find_pair_with_difference(arr, n, k): arr_set = set(arr) for num in arr: if (num + k) in arr_set or (num - k) in arr_set: return \\"Yes\\" return \\"No\\" def process_test_cases(test_cases): results = [] for test_case in test_cases: n, k, arr = test_case result = find_pair_with_difference(arr, n, k) results.append(result) return results"},{"question":"Given a string with multiple integers (both positive and negative) separated by single spaces, write a function that finds the contiguous subarray (containing at least one number) which has the largest sum and return its sum. For example, the input string \\"1 -3 2 1 -1 3 -2 5 -2\\" contains integers among which the subarray [2, 1, -1, 3, -2, 5] has the largest sum of 8. Implement a function `maxSubArraySum` that takes a single string as its input and returns an integer representing the maximum sum of the contiguous subarray. Example 1: Input: \\"1 -3 2 1 -1 3 -2 5 -2\\" Output: 8 Example 2: Input: \\"-2 -3 4 -1 -2 1 5 -3\\" Output: 7 Example 3: Input: \\"1 2 3 4 -10\\" Output: 10","solution":"def maxSubArraySum(s): Returns the maximum sum of the contiguous subarray. nums = list(map(int, s.split())) if not nums: return 0 max_so_far = nums[0] max_ending_here = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You have been hired by a popular video streaming service to develop an algorithm that can analyze the user\'s watching patterns. This algorithm will determine if a user is more likely to finish watching a series based on the number of episodes watched per session. A session is defined as a continuous sequence of episodes watched without a break longer than a given threshold. Your task is to compute the number of sessions for a given user and categorize their watching habits based on predefined ranges: - Binge-Watcher: If the average number of episodes per session is 5 or more. - Regular-Watcher: If the average number of episodes per session is between 3 and 4.99. - Casual-Watcher: If the average number of episodes per session is less than 3. Input: - The first line contains an integer n (1 leq n leq 1000), the number of episodes the user has watched. - The second line contains n integers w_i (1 leq w_i leq 10,000), the timestamps in seconds at which each episode started. - The third line contains a single integer t (1 leq t leq 10,000), the maximum break time in seconds allowed between episodes to consider them part of the same session. Output: - A string indicating the user\'s watching habit category. Example: Input: 10 0 1800 3600 5400 10800 12600 14400 30000 31800 33600 3600 Output: Regular-Watcher Explanation: The timestamps indicate that the user watched 10 episodes. The sessions are as follows: - Session 1: Episodes watched at 0, 1800, 3600, 5400 - Session 2: Episodes watched at 10800, 12600, 14400 - Session 3: Episodes watched at 30000, 31800, 33600 The average number of episodes per session is (4 + 3 + 3) / 3 = 3.33, which categorizes the user as a Regular-Watcher.","solution":"def categorize_watching_habit(n, timestamps, t): Determine the user\'s watching habit category based on the average number of episodes watched per session. Parameters: n (int): The number of episodes watched. timestamps (list of int): The timestamps in seconds at which each episode started. t (int): The maximum break time in seconds allowed between episodes to be considered part of the same session. Returns: str: The watching habit category (\\"Binge-Watcher\\", \\"Regular-Watcher\\", \\"Casual-Watcher\\"). if n == 0: return \\"Casual-Watcher\\" sessions = [] current_session = 1 for i in range(1, n): if timestamps[i] - timestamps[i - 1] <= t: current_session += 1 else: sessions.append(current_session) current_session = 1 sessions.append(current_session) average_episodes_per_session = sum(sessions) / len(sessions) if average_episodes_per_session >= 5: return \\"Binge-Watcher\\" elif 3 <= average_episodes_per_session < 5: return \\"Regular-Watcher\\" else: return \\"Casual-Watcher\\""},{"question":"In the small village of Dawnfall, there is a power plant that needs to distribute electricity to n houses. The village can be represented as an undirected graph with n nodes labeled from 1 to n, where each node represents a house and edges represent possible electrical lines between houses. Each edge (u, v) has a weight, representing the cost to build a line between houses u and v. The village council wants to ensure that all houses are connected with the minimum possible cost. You have been hired to determine the optimal way to connect all houses while minimizing the total cost. This problem can be solved by finding the Minimum Spanning Tree (MST) of the graph. The power plant is always built at house 1, so the MST must include house 1. -----Input----- The first line of input contains two integers n and m (2 leq n leq 1000, 1 leq m leq 100000), where n is the number of houses, and m is the number of possible electrical lines. The next m lines each contain three integers u, v, and w (1 leq u, v leq n, u neq v, 1 leq w leq 10000), where u and v are the houses between which a line can be built, and w is the cost to build that line. -----Output----- Output a single integer, the minimum cost to connect all houses. -----Examples----- Input 4 5 1 2 1 1 3 4 2 3 2 2 4 3 3 4 5 Output 6 Input 3 3 1 2 5 1 3 6 2 3 1 Output 6 -----Note----- In the first test case, the minimum spanning tree connecting all houses includes the lines (1-2), (2-3), and (2-4) with a total cost of 1 + 2 + 3 = 6. In the second test case, the optimal way to connect all houses is to use the edges (1-2) and (2-3) with a total cost of 5 + 1 = 6.","solution":"import heapq def min_cost_to_connect_houses(n, m, edges): Determines the minimum cost to connect all houses in the village using a Minimum Spanning Tree (MST). Args: n (int): Number of houses. m (int): Number of possible electrical lines. edges (list of tuples): Each tuple contains three integers u, v, and w where u and v are the houses between which an electrical line can be built, and w is the cost of that line. Returns: int: The minimum cost to connect all houses. # Create an adjacency list representation of the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((w, v)) graph[v].append((w, u)) # Initialize min-heap and visited list min_heap = [(0, 1)] # (cost, node) visited = [False] * (n + 1) total_cost = 0 edges_used = 0 # Prim\'s algorithm to find the MST while min_heap and edges_used < n: cost, node = heapq.heappop(min_heap) if visited[node]: continue visited[node] = True total_cost += cost edges_used += 1 for edge_cost, neighbor in graph[node]: if not visited[neighbor]: heapq.heappush(min_heap, (edge_cost, neighbor)) if edges_used == n: return total_cost else: return -1 # If the graph is not connected # Example usage: # n = 4, m = 5 # edges = [(1, 2, 1), (1, 3, 4), (2, 3, 2), (2, 4, 3), (3, 4, 5)] # print(min_cost_to_connect_houses(n, m, edges)) # Output: 6"},{"question":"People are standing in a queue at a theme park to get on a roller coaster ride. The queue is organized with some rules and priorities. Each person has a unique priority level, and they get into the queue according to these priority levels. However, if there are people with the same priority level, they will get in the queue according to their arrival time at the queue. Given the number of people in the queue and their respective arrival time and priority, determine the order in which people will stand in the queue. Input Format The first line contains a single integer n representing the number of people in the queue. Each of the next n lines contains two space-separated integers: - The first integer represents the arrival time a_i (1 ≤ a_i ≤ 10^9). - The second integer represents the priority p_i (1 ≤ p_i ≤ 10^9). Constraints 1 ≤ n ≤ 10^5 Output Format Print n lines, each line containing two space-separated integers: the arrival time and the priority of each person in the order they will stand in the queue. Sample Input 5 1 3 2 2 3 2 4 1 5 3 Sample Output 4 1 2 2 3 2 1 3 5 3 Explanation From the input, the arrival and priority of the five people are: - Person 1 arrives at time 1 with priority 3. - Person 2 arrives at time 2 with priority 2. - Person 3 arrives at time 3 with priority 2. - Person 4 arrives at time 4 with priority 1. - Person 5 arrives at time 5 with priority 3. To determine the order in the queue, we first sort them by priority in ascending order, and for people with the same priority, we sort by their arrival time. Thus, the resulting order is: - Person 4 (arrival time 4, priority 1) - Person 2 (arrival time 2, priority 2) - Person 3 (arrival time 3, priority 2) - Person 1 (arrival time 1, priority 3) - Person 5 (arrival time 5, priority 3) Thus, the output is: ``` 4 1 2 2 3 2 1 3 5 3 ```","solution":"def arrange_queue(n, people): Returns the queue arranged based on priority and arrival time. Args: n: int, number of people in the queue. people: list of tuples, where each tuple consists of (arrival_time, priority). Returns: list of tuples, sorted by priority and then by arrival_time. # Sorting people by priority, and within each priority, by arrival time people.sort(key=lambda x: (x[1], x[0])) return people"},{"question":"Peter has started a new exercise routine to get in shape. He wants to run a total distance of `totalDistance` kilometers over `n` days. For each day i, Peter sets a daily limit of running at least `minDistancei` kilometers and at most `maxDistancei` kilometers. Now that the routine is over, Peter wants to know if it is possible to show a timetable of his runs over these `n` days such that the total distance he ran sums up to exactly `totalDistance.` Input The first input line contains two integer numbers `n, totalDistance` (1 ≤ n ≤ 30, 0 ≤ totalDistance ≤ 300) — the number of days Peter has been running, and the total distance he wants to sum up to. Each of the following `n` lines contains two integer numbers `minDistancei, maxDistancei` (0 ≤ minDistancei ≤ maxDistancei ≤ 15), separated by space — minimum and maximum distance that Peter could run on the i-th day. Output In the first line, print `ACHIEVABLE`, and in the second line print `n` numbers (separated by space), each of the numbers representing the distance run by Peter on the corresponding day if he followed the given constraints; or print `NOT ACHIEVABLE` in the unique line if no valid schedule can be formed. Examples Input 1 20 5 10 Output NOT ACHIEVABLE Input 3 25 5 10 6 15 3 10 Output ACHIEVABLE 5 10 10","solution":"def findRunningSchedule(n, totalDistance, limits): min_total = sum(l[0] for l in limits) max_total = sum(l[1] for l in limits) if totalDistance < min_total or totalDistance > max_total: return (\\"NOT ACHIEVABLE\\", []) distances = [0] * n remaining_distance = totalDistance for i in range(n): distances[i] = limits[i][0] remaining_distance -= limits[i][0] i = 0 while remaining_distance > 0: additional_distance = min(remaining_distance, limits[i][1] - distances[i]) distances[i] += additional_distance remaining_distance -= additional_distance i = (i + 1) % n return (\'ACHIEVABLE\', distances) # Example usage n = 3 totalDistance = 25 limits = [(5, 10), (6, 15), (3, 10)] print(findRunningSchedule(n, totalDistance, limits)) # Output should be (\'ACHIEVABLE\', [5, 10, 10])"},{"question":"You are working on a text manipulator program that can process text for word replacement and removal based on given commands. The text starts as an empty string and the program supports the following commands: 1. \\"add word\\" where word is a string: Adds word to the current text separated by a single space. 2. \\"replace old_word new_word\\": Replaces all occurrences of old_word with new_word in the text. 3. \\"remove word\\": Removes all occurrences of word from the text. Note: - A \\"word\\" is defined as a sequence of non-space characters. - The list of commands is provided in a specific order and must be executed sequentially. Input: - The first line of the input contains an integer T representing the number of test cases. - Each test case starts with an integer N representing the total number of commands in the test case. - The next N lines contain one of the specified commands. Output: Print the final resulting text after executing all the commands for each test case on a new line. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ length of any word ≤ 50 - All words are case-sensitive. SAMPLE INPUT 2 3 add hello add world replace world universe 4 add programming add is add fun remove is SAMPLE OUTPUT hello universe programming fun Explanation: Case #1: The commands are: - Add \\"hello\\" to the text, resulting in \\"hello\\". - Add \\"world\\" to the text, resulting in \\"hello world\\". - Replace \\"world\\" with \\"universe\\", resulting in \\"hello universe\\". Case #2: The commands are: - Add \\"programming\\" to the text, resulting in \\"programming\\". - Add \\"is\\" to the text, resulting in \\"programming is\\". - Add \\"fun\\" to the text, resulting in \\"programming is fun\\". - Remove \\"is\\" from the text, resulting in \\"programming fun\\".","solution":"def text_manipulator(commands): text = [] for command in commands: parts = command.split() action = parts[0] if action == \\"add\\": word = parts[1] text.append(word) elif action == \\"replace\\": old_word = parts[1] new_word = parts[2] text = [new_word if w == old_word else w for w in text] elif action == \\"remove\\": word = parts[1] text = [w for w in text if w != word] return \' \'.join(text) def process_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) output = [] index = 1 for _ in range(T): N = int(input_lines[index]) commands = input_lines[index + 1:index + 1 + N] result = text_manipulator(commands) output.append(result) index += N + 1 return \'n\'.join(output)"},{"question":"Jessie and James are planning to run a marathon. They each have a specific running schedule over several days. On certain days, they both run but cover different distances. They want to know the maximum difference between the distances they run on any given day. Given their running schedules as lists of distances covered over several consecutive days, determine the maximum difference in running distances on any specific day when both of them run. Input The input is given in the following format: n a_1 a_2 ... a_n b_1 b_2 ... b_m The first line contains an integer n (1 ≤ n ≤ 1000), the number of days Jessie and James plan to run together. The second line contains n non-negative integers a_1, a_2, ..., a_n where a_i (0 ≤ a_i ≤ 100) represents the distance Jessie runs on the ith day. The third line contains n non-negative integers b_1, b_2, ..., b_n where b_i (0 ≤ b_i ≤ 100) represents the distance James runs on the ith day. Output Output the maximum absolute difference between their running distances on any day. Examples Input 5 10 15 7 8 10 12 10 5 6 8 Output 5 Input 3 5 5 5 0 0 0 Output 5","solution":"def max_distance_difference(n, distances_jessie, distances_james): Calculate the maximum absolute difference between running distances on any given day :param n: int, number of days :param distances_jessie: list[int], distances run by Jessie each day :param distances_james: list[int], distances run by James each day :return: int, the maximum absolute difference between Jessie\'s and James\'s distances on any given day max_diff = 0 for i in range(n): diff = abs(distances_jessie[i] - distances_james[i]) if diff > max_diff: max_diff = diff return max_diff"},{"question":"In a warehouse management system, packages are moved around shelves for efficient storage and retrieval. Each package is represented by an ID number which is a positive integer. Packages are often rearranged and stacked, creating sequences of IDs. Sometimes, the system wants to check if certain subsequences exist within the larger sequences of package IDs. Given an array of package IDs and a subsequence of package IDs, your task is to determine if the given subsequence can be found within the main sequence in the same order, but not necessarily contiguously. For example, given the main sequence [1, 2, 3, 4, 5] and the subsequence [2, 4], it is possible to find 2 and 4 appearing in that order in the main sequence. Write a program to check for the existence of the subsequence within the main sequence. Input The input consists of two lines: 1. The first line contains the main sequence of package IDs represented by space-separated integers. 2. The second line contains the subsequence of package IDs represented by space-separated integers. Output Output \\"YES\\" if the subsequence is found in the same order within the main sequence, and \\"NO\\" otherwise. Examples Input ``` 1 2 3 4 5 2 4 ``` Output ``` YES ``` Input ``` 1 2 3 4 5 3 5 ``` Output ``` YES ``` Input ``` 1 2 3 4 5 4 2 ``` Output ``` NO ```","solution":"def is_subsequence(main_sequence, sub_sequence): Check if sub_sequence is a subsequence of main_sequence in the same order. it = iter(main_sequence) for id in sub_sequence: if id not in it: return \\"NO\\" return \\"YES\\""},{"question":"An integer array A is called almost sorted if it is sorted in non-decreasing order or can be made sorted in non-decreasing order by removing exactly one element. Given an integer n and an array A of length n, determine if the array is almost sorted. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the length of array A. The second line contains n space-separated integers A_1, A_2, ..., A_n (1 ≤ A_i ≤ 10^4) — the elements of the array. Output Print \\"YES\\" if the array is almost sorted, otherwise print \\"NO\\". Examples Input 5 1 2 3 4 5 Output YES Input 6 1 3 2 4 5 6 Output YES Input 4 4 3 2 1 Output NO Note In the first example, the array is already sorted. In the second example, removing the integer 3 or 2 results in a sorted array. In the third example, removing any one element cannot make the array sorted in non-decreasing order.","solution":"def is_almost_sorted(n, A): Determine if the array can be sorted by removing exactly one element or if it\'s already sorted. def is_sorted(arr): return arr == sorted(arr) if is_sorted(A): return \\"YES\\" for i in range(n): if is_sorted(A[:i] + A[i+1:]): return \\"YES\\" return \\"NO\\""},{"question":"Tina is organizing an art competition and needs to distribute colored pens to participants. She has n pens in different colors and each participant should receive one pen. However, she needs to make sure that no two adjacent participants (in a line) receive pens of the same color. Given the list of pens, determine if it is possible to distribute the pens such that no two adjacent participants receive the same color. If it is possible, print \\"Yes\\". Otherwise, print \\"No\\". **Input** The first line contains an integer n (1 ≤ n ≤ 100) - the number of pens. The second line contains n integers, where the i-th integer represents the color code of the i-th pen. Color codes are between 1 and 100. **Output** Print \\"Yes\\" if it is possible to distribute the pens such that no two adjacent participants receive the same color. Otherwise, print \\"No\\". **Example** **Input** 5 1 1 2 3 3 **Output** No **Input** 4 2 3 2 1 **Output** Yes","solution":"def can_distribute_pens(n, pens): Determines if it is possible to distribute pens such that no two adjacent participants receive the same color. Parameters: n (int): The number of pens. pens (list of int): List of integers representing the color codes of the pens. Returns: str: \\"Yes\\" if it is possible to distribute the pens as required, otherwise \\"No\\". for i in range(n - 1): if pens[i] == pens[i + 1]: return \\"No\\" return \\"Yes\\""},{"question":"Anagrams are words that contain the same characters but in a different order. Writing an efficient algorithm to check if two words are anagrams can be helpful for various natural language processing tasks. Your task is to write a function that takes two strings and returns `true` if they are anagrams and `false` if they are not. A valid anagram transformation means that one string\'s characters can be rearranged to form the other string, including considering case sensitivity. For example, \\"Listen\\" and \\"Silent\\" are not anagrams since \'L\' and \'S\' are different cases. However, \\"listen\\" and \\"silent\\" are anagrams. # Input Format The input consists of multiple lines: 1. The first line contains an integer `T`, the number of test cases. 2. Each of the next `T` lines contains two space-separated strings, each representing a test case. # Output Format Output `T` lines. For each test case, output `true` if the two strings are anagrams, otherwise output `false`. # Constraints - The number of test cases, `T`, will be at most 100. - Each string will consist of alphabetical characters only and have a length between 1 and 100. # Sample Input ``` 4 listen silent Triangle Integral Apple Pleap School Master The Classroom ``` # Sample Output ``` true true false false ``` # Explanation For each test case, check if the two strings are anagrams and print `true` or `false` accordingly: 1. \\"listen\\" and \\"silent\\" are anagrams. 2. \\"Triangle\\" and \\"Integral\\" are anagrams. 3. \\"Apple\\" and \\"Pleap\\" are not anagrams. 4. \\"School Master\\" and \\"The Classroom\\" are not anagrams (spaces and cases matter). Write a function `isAnagram(T: int, testCases: List[Tuple[str, str]]) -> List[bool]` that takes the number of test cases and a list of tuples of strings and returns the list of boolean values indicating if they are anagrams for each case.","solution":"def isAnagram(T, testCases): def is_anagram(str1, str2): return sorted(str1) == sorted(str2) results = [] for s1, s2 in testCases: results.append(is_anagram(s1, s2)) return results"},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex is labeled with a unique integer from 1 to n. Your task is to determine the minimum number of edges that need to be removed to make the graph a tree. A tree is an acyclic connected graph. This means that, for the graph to become a tree, it must be connected (there is a path between any two vertices) and must not contain any cycles. The answer must be a single integer: the minimum number of edges that need to be removed. # Input The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2 ⋅ 10^5) — the number of vertices and edges in the graph, respectively. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the edges of the graph. # Output Print a single integer — the minimum number of edges that need to be removed to make the graph a tree. # Examples Input ``` 7 7 1 2 2 3 3 4 4 5 5 6 6 1 3 7 ``` Output ``` 1 ``` Input ``` 4 5 1 2 2 3 3 4 4 1 2 4 ``` Output ``` 2 ``` # Note In the first example, the graph contains a cycle. Removing any one of the edges will turn it into a tree. For example, removing edge (6, 1) will result in a tree. In the second example, the graph contains two independent cycles. Removing any two of the edges that would break these cycles will turn the graph into a tree. For example, removing edges (4, 1) and (2, 4) will result in a tree.","solution":"def min_edges_to_remove(n, m, edges): Returns the minimum number of edges that need to be removed to make the graph a tree. parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX return True return False extra_edges = 0 for u, v in edges: if not union(u, v): extra_edges += 1 return extra_edges"},{"question":"A prime factorization of a number involves breaking down the number into its prime components. For instance, the prime factorization of 28 is 2 * 2 * 7. We can represent this more formally as: 28 = 2^2 * 7^1 Write a function `prime_factors` that takes an integer `n` (where n > 1) and returns a string that represents the prime factorization of `n` in the format `a^b * c^d * ...`, where `a`, `c`, etc., are the prime factors and `b`, `d`, etc., are their respective powers. For example: 1. `prime_factors(28)` should return `\\"2^2 * 7^1\\"` 2. `prime_factors(60)` should return `\\"2^2 * 3^1 * 5^1\\"` Your solution should work for any positive integer greater than 1. You may assume that the input will always be a valid positive integer greater than 1.","solution":"from collections import defaultdict def prime_factors(n): Returns the prime factorization of n as a string in the format `a^b * c^d * ...` factors = defaultdict(int) # Check for number of 2s that divide n while n % 2 == 0: factors[2] += 1 n = n // 2 # n must be odd at this point. So we can skip one element (i.e., we increment by 2). for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors[i] += 1 n = n // i # This condition is to check if n is a prime number greater than 2. if n > 2: factors[n] += 1 # Create the result string from the factors dictionary. result = \\" * \\".join([f\\"{p}^{e}\\" for p, e in factors.items()]) return result"},{"question":"You are working on a data compression algorithm. The core functionality you need to develop is a function that takes a string of lowercase alphabets as input and returns a compressed version of the string. The compression should be done by replacing consecutive identical characters with the character followed by the count of repetitions. If the compressed string is not smaller than the original string, return the original string instead. -----Input----- A single line containing a string s (1 ≤ |s| ≤ 10^5), consisting of lowercase English letters only. -----Output----- A single line containing the compressed version of the string, or the original string if the compressed version is not smaller. -----Examples----- Input aaabcccccaaa Output a3b1c5a3 Input abcdef Output abcdef -----Note----- Sample 1: The input string \\"aaabcccccaaa\\" is compressed to \\"a3b1c5a3\\". Since the compressed string \\"a3b1c5a3\\" is shorter than the original string, the compressed version is returned. Sample 2: The input string \\"abcdef\\" contains no consecutive identical characters, so the compression process would yield \\"a1b1c1d1e1f1\\" which is longer than the original string. Therefore, the function should return the original string \\"abcdef\\".","solution":"def compress_string(s): Compress the string by replacing consecutive identical characters with the character followed by the count of repetitions. If the compressed string is not smaller than the original string, return the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) if len(compressed_string) >= len(s): return s return compressed_string"},{"question":"Write a function `organize_volunteers(volunteers, preferences)`. Task You are given a list of volunteers and their preferences for shifts in a community event. Some shifts may be preferred by multiple volunteers, but your task is to assign each volunteer to exactly one shift that they prefer the most. Input - `volunteers`: A list of strings representing the names of the volunteers, e.g., `[\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\"]` - `preferences`: A list of lists where each sublist contains the preferred shifts of the corresponding volunteer in the `volunteers` list, ordered by preference (from highest to lowest), e.g., `[[\\"morning\\", \\"evening\\"], [\\"afternoon\\", \\"evening\\"], [\\"morning\\"], [\\"evening\\", \\"afternoon\\", \\"morning\\"]]` Output The function should return a dictionary that maps each volunteer to one of their preferred shifts. If it is not possible to assign a volunteer to any of their preferred shifts, the function should map them to `None`. Example ```python def organize_volunteers(volunteers, preferences): # Your code here volunteers = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\"] preferences = [[\\"morning\\", \\"evening\\"], [\\"afternoon\\", \\"evening\\"], [\\"morning\\"], [\\"evening\\", \\"afternoon\\", \\"morning\\"]] print(organize_volunteers(volunteers, preferences)) # Output: {\'Alice\': \'morning\', \'Bob\': \'afternoon\', \'Charlie\': \'None\', \'David\': \'evening\'} ``` Constraints 1. Each volunteer can be assigned to no more than one shift. 2. Max number of volunteers is 20. 3. There can be up to 10 different shifts. Explanation - The volunteer \\"Alice\\" has \\"morning\\" and \\"evening\\" as their preferences. Since \\"morning\\" is available, they get assigned to \\"morning\\". - The volunteer \\"Bob\\" prefers \\"afternoon\\" first, so they are assigned to \\"afternoon\\". - The volunteer \\"Charlie\\" prefers \\"morning\\", but since it\'s already taken by \\"Alice\\", \\"Charlie\\" gets assigned `None`. - The volunteer \\"David\\" prefers \\"evening\\" first, which is available, so they are assigned to \\"evening\\". Ensure that your function tries to respect the preference order for each volunteer as much as possible while maintaining the unique assignment constraint.","solution":"def organize_volunteers(volunteers, preferences): assigned_shifts = {} used_shifts = {} for i, volunteer in enumerate(volunteers): assigned_shifts[volunteer] = None for preference in preferences[i]: if preference not in used_shifts: assigned_shifts[volunteer] = preference used_shifts[preference] = True break return assigned_shifts # Example to test the function volunteers = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\"] preferences = [[\\"morning\\", \\"evening\\"], [\\"afternoon\\", \\"evening\\"], [\\"morning\\"], [\\"evening\\", \\"afternoon\\", \\"morning\\"]] print(organize_volunteers(volunteers, preferences)) # Expected Output: {\'Alice\': \'morning\', \'Bob\': \'afternoon\', \'Charlie\': \'None\', \'David\': \'evening\'}"},{"question":"A research team has been tasked with studying a new form of communication found between mysterious artifacts. Each artifact transmits a unique coded message represented by a sequence of numbers. Their research indicates that deciphering the message involves finding a contiguous sub-sequence of these numbers that sums to a given target value. Write a program that, given an array of integers and a target integer, determines whether there is a contiguous sub-sequence in the array that sums to the target value. **Input** The first line of input contains an integer T, the number of test cases. (1 <= T <= 100) For each test case: - The first line contains an integer N, the number of elements in the array. (1 <= N <= 10^5) - The second line contains N integers representing the elements of the array. Each integer will be between -10^9 and 10^9. - The third line contains an integer target, the target sum. **Output** For each test case, output \\"Sub-sequence found.\\" if there exists a contiguous sub-sequence in the array that sums to the target value, otherwise, output \\"No sub-sequence found.\\" **Example** Sample input: ``` 2 5 1 2 3 4 5 9 4 -1 2 3 -4 1 ``` Sample output: ``` Sub-sequence found. Sub-sequence found. ``` Note: In the first test case, the sub-sequence [2, 3, 4] sums to 9. In the second test case, the sub-sequence [2, -1] sums to 1.","solution":"def find_subsequence_with_target_sum(T, cases): results = [] for i in range(T): N, array, target = cases[i] found = False current_sum = 0 start_index = 0 sum_map = {} for end_index in range(N): current_sum += array[end_index] if current_sum == target: found = True break if current_sum - target in sum_map: found = True break sum_map[current_sum] = end_index if found: results.append(\\"Sub-sequence found.\\") else: results.append(\\"No sub-sequence found.\\") return results # Helper function to parse the input def parse_input(text): lines = text.strip().split(\'n\') T = int(lines[0]) cases = [] idx = 1 for _ in range(T): N = int(lines[idx]) array = list(map(int, lines[idx + 1].split())) target = int(lines[idx + 2]) cases.append((N, array, target)) idx += 3 return T, cases"},{"question":"Task: You need to write a function `pyramid` that builds a pyramid using asterisks (`*`) up to a specified number of levels. * If the argument is 0 or a negative integer, it should return an empty string `\\"\\"`. * Each level of the pyramid will have an incremental number of asterisks centered to align in a pyramid shape. The base of the pyramid will have the maximum number of asterisks. * For example, a pyramid of level 3 will have one asterisk on the first level, three asterisks on the second level, and five asterisks on the third level. Examples: pyramid(4): * *** ***** ******* pyramid(2): * *** Note: Make sure each level of the pyramid is properly centered. Use spaces to align the asterisks.","solution":"def pyramid(levels): Generates a string representing a pyramid of asterisks with the given number of levels. Each level of the pyramid will have an incremental number of asterisks centered to align in a pyramid shape. Parameters: levels (int): The number of levels for the pyramid. Returns: str: A pyramid string made of asterisks. if levels <= 0: return \\"\\" pyramid_str = [] max_width = 2 * levels - 1 for i in range(levels): stars = \'*\' * (2 * i + 1) spaces = \' \' * (levels - i - 1) pyramid_str.append(spaces + stars + spaces) return \\"n\\".join(pyramid_str)"},{"question":"You are given an array of integers representing the heights of N buildings. Each building\'s width is 1. You have rain falling and every empty space between buildings captures water. You need to compute how much water is trapped between the buildings. Return the total amount of rainwater trapped. Example: Input: heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output: 6 Explanation: The total amount of water trapped is 6 units. Explanation: - Between index 1 and 3, 1 unit of water is trapped. - Between index 4 and 7, 2 units of water are trapped. - Between index 7 and 10, 3 units of water are trapped. Therefore, the total trapped water is 1 + 2 + 3 = 6. Note: - N is non-negative and within the range of 0 to 10^5. - An empty array or array with less than 3 elements cannot trap any water.","solution":"def trap_rainwater(heights): if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"Given an undirected graph with N nodes and M edges, your task is to count the number of connected components in the graph. Two nodes are in the same component if there exists a path between them consisting of edges of the graph. Write a program to determine the number of connected components in the given graph. Input The input consists of one dataset given in the following format: N M u1 v1 u2 v2 :: uM vM The number of nodes N (1 ≤ N ≤ 100000) and the number of edges M (0 ≤ M ≤ 200000) are given in the first line, separated by a space. Each of the following M lines contains two integers, ui and vi (1 ≤ ui, vi ≤ N, ui ≠ vi), which represent an edge between node ui and node vi. Output Output a single integer, the number of connected components in the graph. Example Input 6 5 1 2 2 3 1 4 5 6 Output 2","solution":"def count_connected_components(N, edges): from collections import defaultdict # Build the graph using an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) def dfs(node): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) num_components = 0 for node in range(1, N + 1): if not visited[node]: visited[node] = True dfs(node) num_components += 1 return num_components # Example usage: # N = 6 # edges = [(1, 2), (2, 3), (1, 4), (5, 6)] # print(count_connected_components(N, edges)) # Output: 2"},{"question":"There is an ancient calculator that can only perform one operation: given a number `n`, it replaces `n` with the sum of squares of its digits. For example, if the input is `19`, the result will be `1^2 + 9^2 = 82`. The calculator continues this operation until the number becomes 1 or it enters a cycle that does not include 1. Your task is to determine whether the calculator will reach 1 or fall into a cycle. Write a function `is_happy_number(n)` that will return \\"Happy Number\\" if the operation reaches 1, or \\"Unhappy Number\\" if it enters a cycle. # Function Signature ```python def is_happy_number(n: int) -> str: pass ``` # Input - A single integer `n`, where `1 <= n <= 10^6`. # Output - \\"Happy Number\\" if the number eventually reaches 1. - \\"Unhappy Number\\" if the number falls into a cycle. # Example ```python print(is_happy_number(19)) # Output: \\"Happy Number\\" print(is_happy_number(20)) # Output: \\"Unhappy Number\\" ``` # Explanation **Example 1**: - For `n = 19`: - 1^2 + 9^2 = 1 + 81 = 82 - 8^2 + 2^2 = 64 + 4 = 68 - 6^2 + 8^2 = 36 + 64 = 100 - 1^2 + 0^2 + 0^2 = 1 - The sequence reaches 1, hence 19 is a \\"Happy Number\\". **Example 2**: - For `n = 20`: - 2^2 + 0^2 = 4 - 4^2 = 16 - 1^2 + 6^2 = 1 + 36 = 37 - ... and so forth (enters a cycle without reaching 1) - The sequence does not reach 1, hence 20 is an \\"Unhappy Number\\".","solution":"def is_happy_number(n: int) -> str: def sum_of_squares(num: int) -> int: total = 0 while num > 0: digit = num % 10 total += digit * digit num //= 10 return total seen = set() while n != 1: n = sum_of_squares(n) if n in seen: return \\"Unhappy Number\\" seen.add(n) return \\"Happy Number\\""},{"question":"Given a list of words, you need to find the longest word in the list that can be built one character at a time by other words in the list. If there is a tie, return the lexicographically smallest word. If no such word exists, return an empty string. For example, given the words [\\"w\\", \\"wo\\", \\"wor\\", \\"worl\\", \\"world\\", \\"banana\\"], the longest word is \\"world\\". Function Signature: def longestWord(words: List[str]) -> str: Example 1: Input: words = [\\"w\\", \\"wo\\", \\"wor\\", \\"worl\\", \\"world\\", \\"banana\\"] Output: \\"world\\" Example 2: Input: words = [\\"a\\", \\"banana\\", \\"app\\", \\"appl\\", \\"ap\\", \\"apply\\", \\"apple\\"] Output: \\"apple\\" Explanation: \\"apply\\" and \\"apple\\" can both be built from \\"a\\", \\"ap\\", \\"app\\", and \\"appl\\". However, \\"apple\\" is lexicographically smaller. Your task: You need to complete the function longestWord() that takes a list of strings and returns a single string as output. Expected Time Complexity: O(N * logN) Expected Auxiliary Space: O(N) Constraints: 1 <= words.length <= 10^5 1 <= words[i].length <= 30 All the strings of words are composed of lowercase English letters.","solution":"from typing import List def longestWord(words: List[str]) -> str: words_set = set(words) # Create a set for quick lookup longest = \\"\\" for word in sorted(words): # Sort the words lexicographically if len(word) == 1 or word[:-1] in words_set: if len(word) > len(longest): longest = word elif len(word) == len(longest) and word < longest: longest = word return longest"},{"question":"You are tasked with creating a program to encrypt a message using the Caesar Cipher technique, a simple substitution cipher where each letter in the plaintext is shifted a certain number of places down the alphabet. For example, with a shift of 3: - A becomes D - B becomes E - C becomes F - ... - X becomes A - Y becomes B - Z becomes C Your program should take two inputs: 1. A string `message` containing the text to be encrypted. 2. An integer `shift` indicating the number of positions by which letters should be shifted. The output should be the encrypted message. Note that the encryption should preserve the case of the letters and non-alphabetic characters should remain unchanged. Function signature: ```python def caesar_cipher(message: str, shift: int) -> str: pass ``` Example: ```python caesar_cipher(\\"Hello, World!\\", 3) should return \\"Khoor, Zruog!\\" caesar_cipher(\\"abcXYZ\\", 2) should return \\"cdeZAB\\" ```","solution":"def caesar_cipher(message: str, shift: int) -> str: Encrypts the given message using the Caesar Cipher technique with the provided shift. :param message: The message to be encrypted. :param shift: The number of positions each letter in the message should be shifted. :return: The encrypted message. encrypted_message = [] for char in message: if char.isalpha(): shift_base = 65 if char.isupper() else 97 encrypted_char = chr((ord(char) - shift_base + shift) % 26 + shift_base) encrypted_message.append(encrypted_char) else: encrypted_message.append(char) return \'\'.join(encrypted_message)"},{"question":"Implement a function that takes a string containing a binary number and returns its corresponding hexadecimal representation. The string will always contain a positive binary number without any leading zeros. Examples ``` \\"1101\\" ==> \\"D\\" \\"111111\\" ==> \\"3F\\" \\"101010101010\\" ==> \\"AAA\\" ``` Notes - The function should handle binary numbers of arbitrary length. - You are not allowed to use any built-in functions to directly convert from binary to hexadecimal. You must implement the conversion logic yourself. - Remember to consider edge cases, such as very short or very long binary numbers.","solution":"def binary_to_hexadecimal(binary_str): Converts a binary string to its hexadecimal representation. binary_map = { \\"0000\\": \\"0\\", \\"0001\\": \\"1\\", \\"0010\\": \\"2\\", \\"0011\\": \\"3\\", \\"0100\\": \\"4\\", \\"0101\\": \\"5\\", \\"0110\\": \\"6\\", \\"0111\\": \\"7\\", \\"1000\\": \\"8\\", \\"1001\\": \\"9\\", \\"1010\\": \\"A\\", \\"1011\\": \\"B\\", \\"1100\\": \\"C\\", \\"1101\\": \\"D\\", \\"1110\\": \\"E\\", \\"1111\\": \\"F\\" } # Pad binary_str to a length that is a multiple of 4 with leading zeros. while len(binary_str) % 4 != 0: binary_str = \'0\' + binary_str hex_result = [] # Process each chunk of 4 binary digits. for i in range(0, len(binary_str), 4): chunk = binary_str[i:i + 4] hex_result.append(binary_map[chunk]) return \'\'.join(hex_result)"},{"question":"You are working on a music player application, and you need to implement a feature that generates a playlist based on the ratings and lengths of songs. The playlist should be generated such that the total duration of the playlist is less than or equal to a given maximum duration, and the total rating score is maximized. Each song has a unique ID, a rating score, and a duration. Given the list of songs with their IDs, ratings, and durations, write a function to generate such a playlist. Your function should follow these rules: 1. If there are multiple playlists with the same maximum rating, prefer the one with the shortest total duration. 2. If there are multiple such playlists, prefer the one where the song with the smallest ID appears first. # Signature ```python def generate_playlist(songs: List[Tuple[int, int, int]], max_duration: int) -> List[int] ``` # Input - A list of tuples `songs`, where each tuple contains three integers: song ID, rating, and duration. - An integer `max_duration`, which indicates the maximum total duration for the playlist. # Output - A list of song IDs that forms the optimal playlist. # Examples Example 1 ```python songs = [(1, 10, 60), (2, 15, 35), (3, 10, 40), (4, 5, 25)] max_duration = 90 Output: [2, 3] ``` The total duration is 75, and the total rating is 25 which is the highest possible for the given max_duration. Example 2 ```python songs = [(1, 10, 20), (2, 8, 25), (3, 15, 30), (4, 5, 20)] max_duration = 50 Output: [1, 3] ``` The total duration is 50, and the total rating is 25 which is the highest possible. # Constraints - The total number of songs is at most (1000). - The duration of each song is at most (1000). - The total duration of the optimal playlist is guaranteed to be within the given maximum duration. Ensure that your implementation is efficient and runs within a reasonable time frame for the given constraints.","solution":"from typing import List, Tuple def generate_playlist(songs: List[Tuple[int, int, int]], max_duration: int) -> List[int]: n = len(songs) dp = [[(0, 0, [])] * (max_duration + 1) for _ in range(n + 1)] for i in range(1, n + 1): song_id, rating, duration = songs[i - 1] for t in range(max_duration + 1): if duration > t: dp[i][t] = dp[i - 1][t] else: without_song = dp[i - 1][t] with_song = dp[i - 1][t - duration] if with_song[0] + rating > without_song[0] or (with_song[0] + rating == without_song[0] and with_song[1] + duration < without_song[1]): dp[i][t] = (with_song[0] + rating, with_song[1] + duration, with_song[2] + [song_id]) else: dp[i][t] = without_song result = dp[n][max_duration][2] return sorted(result) if result else []"},{"question":"A company is analyzing its communication patterns through emails. They want to identify common email topics based on the frequency of certain words appearing in their email texts. Your task is to write a program that will process a given list of emails and identify the top N most frequent words across these emails. You will be given a list of emails, where each email consists of a string of words separated by spaces. You need to extract all unique words from all the emails, count their occurrences, and then determine the top N frequent words. Words should be treated case-insensitively (e.g., \\"Hello\\" and \\"hello\\" are the same word), but for output, they should be presented in lowercase. # Input - The first line contains an integer T, the number of emails. - The next T lines each contain a string E, representing a single email. - The last line contains an integer N, denoting the number of top frequent words to output. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ |E| ≤ 1000 (length of each email string) - 1 ≤ N ≤ 10 Words in emails consist only of alphabetical characters and are separated by spaces. # Output - Print the top N frequent words in descending order of their frequency. - If there are multiple words with the same frequency, sort them alphabetically. # Example Input ``` 3 Hello world hello hello there general kenobi 2 ``` Output ``` hello general ``` Explanation The words in the emails are \\"hello\\", \\"world\\", \\"hello\\", \\"hello\\", \\"there\\", \\"general\\", \\"kenobi\\". The word \\"hello\\" appears 3 times, \\"general\\" appears once, as well as \\"there\\", \\"kenobi\\", and \\"world\\". Since N = 2, we output the two most frequent words: \\"hello\\" and \\"general\\". \\"General\\" is chosen over the others because of alphabetical order.","solution":"from collections import Counter def top_n_frequent_words(emails, n): word_count = Counter() for email in emails: words = email.lower().split() word_count.update(words) most_common_words = word_count.most_common() most_common_words.sort(key=lambda x: (-x[1], x[0])) # sort by frequency, then alphabetically return [word for word, count in most_common_words[:n]]"},{"question":"Given two sorted arrays of integers, A and B, find the median of the combined sorted array created by merging A and B. The median is the middle element in an odd-length sorted array, or the average of the two middle elements in an even-length sorted array. Example 1: Input: A = [1, 3] B = [2] Output: 2.0 Explanation: Merging A and B gives [1, 2, 3]. Median is 2. Example 2: Input: A = [1, 2] B = [3, 4] Output: 2.5 Explanation: Merging A and B gives [1, 2, 3, 4]. Median is (2 + 3) / 2 = 2.5. Your Task: Complete the function findMedianSortedArrays() which takes two integer arrays A and B as input parameters and returns a float denoting the median of the combined sorted array. You don’t need to print or take inputs. Expected Time Complexity: O(log(min(N, M))) Expected Auxiliary Space: O(1) Constraints: 0 <= len(A), len(B) <= 10^3 1 <= A[i], B[i] <= 10^6 A and B are guaranteed to be sorted in non-decreasing order.","solution":"def findMedianSortedArrays(A, B): Find the median of two sorted arrays. # Merge two sorted lists merged = [] i = j = 0 lenA, lenB = len(A), len(B) while i < lenA and j < lenB: if A[i] <= B[j]: merged.append(A[i]) i += 1 else: merged.append(B[j]) j += 1 while i < lenA: merged.append(A[i]) i += 1 while j < lenB: merged.append(B[j]) j += 1 n = len(merged) if n % 2 == 1: return float(merged[n // 2]) else: return (merged[n // 2 - 1] + merged[n // 2]) / 2.0"},{"question":"John is organizing a photo contest. Each participant submits a single photo, and John assigns a unique identifier to each photo ranging from 1 to n. He then rates the photos and records the ratings. However, John accidentally deleted one of the ratings. He can remember all the ratings except one. Your task is to deduce the rating of the missing photo based on the given ratings and the knowledge of the total sum of all ratings. -----Input----- The first line of the input contains two integers n and S (2 ≤ n ≤ 100000, 1 ≤ S ≤ 10^9) — the number of photos and the total sum of all the ratings. The second line contains n - 1 integers r_1, r_2, ..., r_{n-1} (1 ≤ r_{i} ≤ 10^6) — the ratings of the photos that John remembers. All given ratings are distinct. -----Output----- Print the rating of the missing photo. -----Examples----- Input 5 15 3 2 6 1 Output 3","solution":"def find_missing_rating(n, S, ratings): Given the number of photos (n), total sum of all ratings (S), and a list of remembered ratings, find the missing rating. :param n: int - number of photos :param S: int - total sum of all ratings :param ratings: list of int - remembered ratings :return: int - missing rating total_remembered_sum = sum(ratings) missing_rating = S - total_remembered_sum return missing_rating"},{"question":"A librarian needs to organize a stack of books such that each book is placed on the correct shelf. The library has N shelves, labeled from 1 to N, and each shelf can hold an unlimited number of books. There are a total of M books in the library, where each book has a unique ID. Each book is initially stacked on top of each other in a single pile and needs to be moved to its designated shelf. You are given the order of books in the stack, with the bottom of the stack listed first in the input sequence. Additionally, you are given an array indicating the designated shelf for each book based on its ID. The goal is to perform the minimum number of moves necessary to organize the books according to their designated shelves. In each move, you can take the book from the top of the stack and place it on its designated shelf. ------ Input: ------ The first line contains a single integer T, the number of test cases. The first line of each test case contains two integers N and M, the number of shelves and the number of books, respectively. The next line contains M space-separated integers representing the IDs of the books in the order they appear in the stack (bottom to top). The following line contains M space-separated integers, where the i-th integer denotes the shelf number for the book with ID i+1. ------ Output: ------ For each test case, print a single integer, the minimum number of moves needed to organize the books into their designated shelves. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ M ≤ 100000 1 ≤ (Book ID) ≤ M 1 ≤ (Shelf number) ≤ N ----- Sample Input 1 ------ 2 3 5 5 4 3 2 1 3 1 2 3 1 2 3 1 2 3 1 2 1 ----- Sample Output 1 ------ 5 3 ----- Explanation 1 ------ For the first sample, we make 5 moves to place each book on its designated shelf. For the second sample, we make 3 moves to place each book on its designated shelf.","solution":"def organize_books(num_cases, cases): results = [] for i in range(num_cases): N, M, stack, shelves = cases[i] moves = 0 for book in reversed(stack): moves += 1 results.append(moves) return results # Sample input processing T = 2 cases = [ (3, 5, [5, 4, 3, 2, 1], [3, 1, 2, 3, 1]), (2, 3, [1, 2, 3], [1, 2, 1]) ] # Running sample print(organize_books(T, cases)) # Output should be [5, 3]"},{"question":"You are tasked with developing a program that evaluates a series of messages from an event log and identifies any critical alerts. A critical alert is defined as any message that contains the word \\"Critical\\" (case-insensitive) or is a warning message sent by the system administrator. The log of messages is provided in a list format, where each message contains a sender ID, a priority level, and the message content itself. The priority level can be \\"Normal\\", \\"Warning\\", or \\"Critical\\". Your task is to write a function that takes in the event log and outputs a list of all critical alerts. Each critical alert should be output in the format \\"SenderID: Message\\". -----Input----- A list of event logs. Each log is represented as a tuple of three elements (SenderID, Priority, Message), where: - SenderID is an integer representing the ID of the sender (1 ≤ SenderID ≤ 10^5) - Priority is a string that can be \\"Normal\\", \\"Warning\\", or \\"Critical\\" - Message is a string containing the message content -----Output----- A list of strings in the format \\"SenderID: Message\\", each representing a critical alert. -----Examples----- Input: [(101, \\"Normal\\", \\"All systems operational\\"), (202, \\"Warning\\", \\"Memory usage high\\"), (101, \\"Critical\\", \\"Critical hardware failure detected\\"), (202, \\"normal\\", \\"Scheduled maintenance\\"), (303, \\"warning\\", \\"Critical temperature threshold reached\\"), (1, \\"WARNING\\", \\"Disk space low\\"), (1, \\"Normal\\", \\"User login successful\\")] Output: [\\"101: Critical hardware failure detected\\", \\"303: Critical temperature threshold reached\\", \\"1: Disk space low\\"] -----Note----- In the second example: - The message from sender 101 with priority \\"Critical\\" is included as a critical alert. - The message \\"Critical temperature threshold reached\\" from sender 303 is included because it contains the word \\"Critical\\". - The message \\"Disk space low\\" from sender 1 is also included because it is a \\"Warning\\" message sent by the system administrator.","solution":"def identify_critical_alerts(event_logs): Identifies critical alerts from the event logs. Parameters: event_logs (list): List of tuples in the format (SenderID, Priority, Message) Returns: list: List of critical alerts in the format \\"SenderID: Message\\" critical_alerts = [] for log in event_logs: sender_id, priority, message = log if \'critical\' in message.lower() or priority.lower() == \'critical\' or (\'warning\' in priority.lower() and sender_id == 1): critical_alerts.append(f\\"{sender_id}: {message}\\") return critical_alerts"},{"question":"A coding competition organizer wants to schedule the challenges for participants. Each participant has several time slots during which they are available. The organizer aims to schedule a challenge in such a way that every participant can attend at least one challenge. Write a program to determine the fewest number of challenges needed so that every participant can attend at least one challenge. Input The first line contains an integer n (1 ≤ n ≤ 100), which represents the number of participants. The next n lines each contain an integer m_i (1 ≤ m_i ≤ 100) followed by m_i space-separated integers representing the time slots during which that participant is available (1 ≤ time slot ≤ 1000). Output In a single line, print a single integer — the minimum number of challenges needed so that every participant can attend at least one of them. Examples Input 3 2 1 2 3 2 3 4 2 1 3 Output 2 Input 4 3 10 20 30 2 5 15 1 10 3 20 30 40 Output 3 Note In the first example, we can schedule one challenge at time slot 1 and another at time slot 3. This way, the first and third participants can attend the challenge at time slot 1, and the second and third participants can attend the challenge at time slot 3. In the second example, we need at least three challenges to ensure every participant can attend at least one. These challenges can be scheduled at time slots 10, 20, and 30.","solution":"def min_challenges(n, availability): time_slots = [] for slots in availability: time_slots.append(set(slots)) all_slots = {} for slots in time_slots: for slot in slots: if slot in all_slots: all_slots[slot] += 1 else: all_slots[slot] = 1 challenges = set() while time_slots: best_slot = max(all_slots, key=all_slots.get) challenges.add(best_slot) new_time_slots = [] for slots in time_slots: if best_slot not in slots: new_time_slots.append(slots) else: for slot in slots: all_slots[slot] -= 1 if all_slots[slot] == 0: del all_slots[slot] time_slots = new_time_slots return len(challenges)"},{"question":"You are given an array of n positive integers a_0, a_1, ..., a_{n-1}. You can perform the following operation any number of times: choose any two indices i and j and swap a_i and a_j. Your goal is to make the array strictly increasing with the minimum number of swaps. Given the array, determine the minimum number of swaps required to transform the array into a strictly increasing sequence. -----Input----- The first line contains an integer n (1 le n le 10^5). The second line contains n integers a_0, a_1, ..., a_{n-1} (1 le a_i le 10^9). -----Output----- Print the minimum number of swaps required to transform the array into a strictly increasing sequence. -----Examples----- Input 5 4 3 1 2 5 Output 3 Input 4 4 3 2 1 Output 2 -----Note----- In the first example, we can transform [4, 3, 1, 2, 5] into [1, 2, 3, 4, 5] by swapping 4 with 1, 3 with 2, and then 4 with 3, making three swaps in total. In the second example, we can transform [4, 3, 2, 1] into [1, 2, 3, 4] by swapping 4 with 1 and 3 with 2, making two swaps in total.","solution":"def min_swaps_to_increasing_sequence(array): Returns the minimum number of swaps required to transform the array into a strictly increasing sequence. n = len(array) sorted_array = sorted(array) index_dict = {value: i for i, value in enumerate(array)} swaps = 0 for i in range(n): while array[i] != sorted_array[i]: swaps += 1 # Swap the current element with the element at the position of sorted_array[i] swap_idx = index_dict[sorted_array[i]] array[i], array[swap_idx] = array[swap_idx], array[i] # Update the indices in the index dictionary index_dict[array[swap_idx]] = swap_idx index_dict[array[i]] = i return swaps"},{"question":"You are organizing a classic car exhibition and you need to plan the display area for the cars. The exhibit area is represented as a 2D grid of dimensions N x M. Some areas in the grid are occupied by obstacles where cars cannot be placed. You need to find the largest rectangular area in the grid that is free from obstacles, where cars can be displayed. Constraints * All values in input are integers. * 1 le N, M le 1000 * Each cell in the grid is either 0 (free space) or 1 (obstacle). Input Input is given from Standard Input in the following format: N M grid_1 grid_2 ... grid_N where each grid_i is a string of 0s and 1s of length M, representing the i-th row of the grid. Output Print the area of the largest rectangle that can be formed without including any obstacles. Examples Input 4 5 00010 00110 00000 11000 Output 6 Input 3 3 111 111 111 Output 0 Input 1 5 00000 Output 5","solution":"def max_histogram_area(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def max_rectangle_area(grid, n, m): if n == 0 or m == 0: return 0 max_area = 0 histogram = [0] * m for i in range(n): for j in range(m): if grid[i][j] == \'0\': histogram[j] += 1 else: histogram[j] = 0 max_area = max(max_area, max_histogram_area(histogram)) return max_area def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = data[2:] print(max_rectangle_area(grid, N, M)) if __name__ == \\"__main__\\": main()"},{"question":"Consider an array `arr` of `n` unique integers, where each integer appears only once. You are allowed to rotate the array at most once. Rotating the array means taking some number of elements from the start of the array and moving them to the end in the same order. For example, rotating `[1,2,3,4,5]` after 2 elements will yield `[3,4,5,1,2]`. Your task is to find the maximum possible element you can get from the array with at most one rotation. Note that an array with zero rotation is also considered a valid rotation. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will start with an integer `n` (1 le n le 10^5), the number of elements in the array. The next line contains `n` unique integers `a_1, a_2, ..., a_n` (-10^9 le a_i le 10^9), the elements of the array. -----Output----- Output a single integer, which is the maximum possible element you can get from the array with at most one rotation. -----Examples----- Sample Input: 5 3 -1 5 2 9 Sample Output: 9 Sample Input: 6 7 -4 0 3 -8 10 Sample Output: 10 Sample Input: 4 -10 -20 -30 -40 Sample Output: -10","solution":"def max_element_with_rotation(n, arr): Returns the maximum possible element in the array with at most one rotation. Parameters: n (int): Number of elements in the array. arr (list of int): The array elements. Returns: int: The maximum possible element after at most one rotation. return max(arr)"},{"question":"In an innovative company, there is a team of software engineers working on a unique problem. They need to design a matrix that follows specific constraints. The problem statement is as follows: Given a positive integer ( N ), create an ( N times N ) matrix ( A ) with distinct positive integers such that: 1. Each row and each column of the matrix is strictly increasing. 2. The difference between any two consecutive elements in any row and any column should be the same across the entire matrix. Constraints - 2 leq N leq 100 Input The input is given from Standard Input in the following format: ( N ) Output Output the ( N times N ) matrix, where each element is a distinct positive integer, each row and column is strictly increasing, and the differences between consecutive elements across the entire matrix are equal. The output should be in the form of ( N ) lines, each containing ( N ) space-separated integers. If there are multiple solutions, you may output any of them. Examples Input 3 Output 1 2 3 4 5 6 7 8 9 Input 4 Output 1 3 5 7 2 4 6 8 3 5 7 9 4 6 8 10","solution":"def create_matrix(N): Creates an N x N matrix such that each row and column is strictly increasing and the difference between any two consecutive elements in any row and any column is the same across the entire matrix. matrix = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): matrix[i][j] = i + j + 1 return matrix def print_matrix(matrix): for row in matrix: print(\\" \\".join(map(str, row)))"},{"question":"Remove Duplicates Write a function to remove all duplicates from a list of numbers and return the list with only unique elements. Information To remove duplicates from a list, you need to identify and eliminate repeated values. For instance, given a sample list of `1, 3, 3, 7, 8, 8, 9`: 1. Iterate through the list and keep track of seen elements. 2. Exclude any number that has already been encountered. Following the steps: 1. Start without any duplicates ``` [1, 3, 7, 8, 9] ``` This list contains only unique numbers.","solution":"def remove_duplicates(input_list): Remove duplicates from a list and return a list with unique elements. Parameters: input_list (list): List of numbers which might contain duplicates. Returns: list: A list with only unique elements. seen = set() unique_list = [] for item in input_list: if item not in seen: unique_list.append(item) seen.add(item) return unique_list"},{"question":"During a treasure hunt, a team discovers an old map that provides encoded instructions to find the treasure. Each instruction is a string that consists of lowercase letters and digits. The team must decode the instructions to make any sense of them. The decoding rule is very simple: - Each lowercase letter should remain unchanged. - Each digit should be doubled. For instance, \'2\' should become \'22\', \'3\' should become \'33\', and so on. Given the encoded instructions, help the team by decoding them accordingly. -----Input----- - The first line contains n, the number of encoded instructions. - Each of the following n lines contains a single encoded instruction string. -----Output----- - For each encoded instruction, print the decoded instruction. -----Constraints----- - 1 leq n leq 10^5 - Each encoded instruction string length leq 10^6 -----Sample Input----- 3 a2b4 z1x2c3 g9h -----Sample Output----- a22b44 z11x22c33 g99h -----Explanation----- - Case 1: \'2\' becomes \'22\', and \'4\' becomes \'44\', so \'a2b4\' becomes \'a22b44\'. - Case 2: \'1\' becomes \'11\', \'2\' becomes \'22\', and \'3\' becomes \'33\', so \'z1x2c3\' becomes \'z11x22c33\'. - Case 3: \'9\' becomes \'99\', so \'g9h\' becomes \'g99h\'.","solution":"def decode_instruction(instruction): Decodes a single encoded instruction by doubling each digit. decoded = [] for char in instruction: if char.isdigit(): decoded.append(char * 2) else: decoded.append(char) return \'\'.join(decoded) def decode_instructions(n, instructions): Decodes a list of encoded instructions. decoded_instructions = [] for instruction in instructions: decoded_instructions.append(decode_instruction(instruction)) return decoded_instructions"},{"question":"Given a 2D matrix of integers, your task is to implement a function that finds the maximum sum of elements obtained by selecting exactly one element from each row and ensuring that while traversing each row, the column index of the chosen element either remains the same or moves to the right by at most one column. # Input - An integer n (1 ≤ n ≤ 100) representing the number of rows (and columns) in the matrix. - An n x n matrix of integers, where each element is between -1000 and 1000 (inclusive). # Output - A single integer representing the maximum sum achievable under the given constraints. # Example **Input:** ``` 3 1 2 3 4 5 6 7 8 9 ``` **Output:** ``` 18 ``` **Explanation:** - One possible path for the maximum sum is: 3 (row 1, col 3) -> 6 (row 2, col 3) -> 9 (row 3, col 3), giving a total sum of 18. - Another possible path is: 3 (row 1, col 3) -> 5 (row 2, col 2) -> 9 (row 3, col 3), also giving a total sum of 18.","solution":"def max_sum_path(n, matrix): Finds the maximum sum of elements in an n x n matrix where each element is chosen from each row, and the column index of the selected element does not move left by more than one column while traversing each row. # Initialize a DP array dp = [[-float(\'inf\')] * n for _ in range(n)] # Initialize the base case with the first row values for j in range(n): dp[0][j] = matrix[0][j] # Build the DP table for i in range(1, n): for j in range(n): # dp[i][j] can be max of: # 1. dp[i-1][j-1] if j > 0 # 2. dp[i-1][j] # 3. dp[i-1][j+1] if j < n-1 if j > 0: dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + matrix[i][j]) dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[i][j]) if j < n - 1: dp[i][j] = max(dp[i][j], dp[i - 1][j + 1] + matrix[i][j]) # The maximum sum will be the max value in the last row of dp array return max(dp[n - 1])"},{"question":"Your friend, who is a software engineer, needs to process transactions in an e-commerce platform. Each transaction consists of a unique identifier, a timestamp, and an amount. However, duplicate transactions sometimes appear in the system due to network issues. Two transactions are considered duplicates if they have the same identifier, regardless of their timestamp or amount. Your task is to help your friend identify and remove duplicate transactions from a list, keeping only the first occurrence of each transaction based on their order in the list. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100,000), the number of transactions. Each of the next n lines describes a transaction with three elements: a string identifier (5 ≤ len(identifier) ≤ 20), an integer timestamp, and an integer amount (1 ≤ amount ≤ 10^6). -----Output----- Print the transactions after removing duplicates, keeping only the first occurrence of each identifier in the order they appear. -----Example----- Input 5 txn1 1621400400 150 txn2 1621400500 200 txn1 1621400600 210 txn3 1621400700 300 txn2 1621400800 220 Output txn1 1621400400 150 txn2 1621400500 200 txn3 1621400700 300 -----Note----- In the above example, the duplicate transactions \\"txn1\\" and \\"txn2\\" are removed, and only the first occurrences are retained.","solution":"def remove_duplicate_transactions(n, transactions): seen = set() result = [] for identifier, timestamp, amount in transactions: if identifier not in seen: result.append((identifier, timestamp, amount)) seen.add(identifier) return result"},{"question":"Category: Data Structure Design Design a loadshedding simulation system for an energy company. Implement a class `LoadSheddingManager` that supports the following methods: 1. `addArea(string areaName)`: Adds a new area to the system. 2. `reportConsumption(string areaName, int consumption)`: Reports the electricity consumption in kilowatt-hours (kWh) for a specified area. If the area does not exist, do nothing. 3. `scheduleOutage(int threshold)`: Returns a list of area names (sorted in descending order of consumption) that have a consumption above the specified threshold. These areas are scheduled for loadshedding in the next hour. If no areas meet the threshold, return an empty list. # Example ```python commands = [\\"LoadSheddingManager\\", \\"addArea\\", \\"reportConsumption\\", \\"reportConsumption\\", \\"scheduleOutage\\", \\"addArea\\", \\"reportConsumption\\", \\"reportConsumption\\", \\"scheduleOutage\\"] parameters = [[], [\\"Area1\\"], [\\"Area1\\", 150], [\\"Area1\\", 200], [100], [\\"Area2\\"], [\\"Area2\\", 300], [\\"Area2\\", 50], [250]] Output: [null, null, null, null, [\\"Area1\\"], null, null, null, [\\"Area2\\"]] ``` Explanation: 1. Initialize the LoadSheddingManager. 2. Add \\"Area1\\" to the system. 3. Report a consumption of 150 kWh for \\"Area1\\". 4. Report an additional consumption of 200 kWh for \\"Area1\\". 5. Schedule outage with a threshold of 100 kWh, resulting in [\\"Area1\\"] as its total consumption is 350 kWh. 6. Add \\"Area2\\" to the system. 7. Report a consumption of 300 kWh for \\"Area2\\". 8. Report an additional consumption of 50 kWh for \\"Area2\\". 9. Schedule outage with a threshold of 250 kWh, resulting in [\\"Area2\\"] as its total consumption is 350 kWh. # Constraints: - `areaName` strings consist of lowercase English letters and have lengths in the range [1, 100]. - `consumption` is a non-negative integer in the range [0, 10^9]. - Any area can be added only once. That is, calling `addArea` again with the same area name has no effect. - The above functions will be called no more than 100,000 times per test case. - Multiple areas can be scheduled for loadshedding if they all meet the threshold.","solution":"class LoadSheddingManager: def __init__(self): self.areas = {} def addArea(self, areaName): if areaName not in self.areas: self.areas[areaName] = 0 def reportConsumption(self, areaName, consumption): if areaName in self.areas: self.areas[areaName] += consumption def scheduleOutage(self, threshold): selected_areas = [area for area, consumption in self.areas.items() if consumption > threshold] selected_areas.sort(key=lambda x: self.areas[x], reverse=True) return selected_areas"},{"question":"An online bookstore wants to implement an automated recommendation system to suggest books to users based on their reading history. The bookstore has a list of books each user has read, and the goal is to recommend a new book to each user that they have not yet read. The recommendations are based on the assumption that users who have read similar books in the past are likely to enjoy similar books in the future. The bookstore provides data in the form of a list of users and the books each user has read. Write a function that takes this data and generates a list of book recommendations for each user. The recommendation for a user is the book that has been read by the most users who have also read at least one book from the current user\'s reading list. If there are multiple books with the same number of recommendations, return the book with the smallest identifier. If a user has read all the books, return -1 for that user. Input The input to the function consists of: - An integer N: the number of users. - An integer M: the number of books. - A list of tuples, where each tuple contains a user identifier and a book identifier indicating which users have read which books. Output The output should be a list of N integers, where the i-th integer represents the recommended book for the i-th user. Constraints - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 1000 - 1 ≤ len(reading_data) ≤ 10000 - 1 ≤ User identifier ≤ N - 1 ≤ Book identifier ≤ M Example Input N = 3 M = 5 reading_data = [(1, 1), (1, 2), (2, 2), (2, 3), (3, 1), (3, 4), (3, 5)] Output [3, 1, 2] Explanation - For user 1, the users who have read books 1 and 2 are users 1, 2, and 3. The most read book among these is book 3, which has been read by user 2. - For user 2, the users who have read books 2 and 3 are users 1, 2, and 3. The most read book among these is book 1, which has been read by users 1 and 3. - For user 3, the users who have read books 1, 4, and 5 are users 1 and 3. The most read book among these is book 2, which has been read by users 1 and 2.","solution":"def recommend_books(N, M, reading_data): from collections import defaultdict, Counter # Creating a dictionary to store the books read by each user user_books = defaultdict(set) for user, book in reading_data: user_books[user].add(book) # Creating a dictionary to store the users who have read each book book_users = defaultdict(set) for user, book in reading_data: book_users[book].add(user) # Function to recommend a book for a single user def recommend_book_for_user(user): candidates = Counter() read_books = user_books[user] for book in read_books: for other_user in book_users[book]: if other_user != user: for candidate_book in user_books[other_user]: if candidate_book not in read_books: candidates[candidate_book] += 1 if not candidates: return -1 # Find the book with the highest count, breaking ties by the smallest identifier recommended_book = min(candidates, key=lambda x: (-candidates[x], x)) return recommended_book # Generate recommendations for each user recommendations = [] for user in range(1, N + 1): recommendations.append(recommend_book_for_user(user)) return recommendations"},{"question":"You are given a garden with N flower beds, and each bed may contain different species of flowers. The garden is represented as a graph where each flower bed is a node and there is an edge between two nodes if flowers can cross-pollinate between these beds. Mr. Green, the gardener, wants to ensure that by choosing any one flower bed, he attracts the maximum possible unique flower species from all connected flower beds. Input: The first line contains an integer T, representing the number of test cases. Each test case starts with a line containing two integers N and M, the number of flower beds (nodes) and the number of connections (edges) between the beds respectively. The next line contains N space-separated integers where each integer denotes the number of unique species of flowers present in the corresponding flower bed. The following M lines each contain two space-separated integers A and B, representing a direct connection between flower beds A and B. Output: For each test case, output a single integer representing the maximum number of unique flower species that can be attracted by considering all connected flower beds starting from any one flower bed. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 100 0 ≤ Number of unique flower species in each bed ≤ 1000 0 ≤ M ≤ N(N-1) 0 ≤ A, B < N SAMPLE INPUT 2 4 4 3 4 2 1 0 1 1 2 2 3 3 0 3 2 5 7 4 0 1 1 2 SAMPLE OUTPUT 10 16","solution":"def find_max_unique_species(N, M, species, connections): from collections import defaultdict, deque # Build the adjacency list for the graph adj_list = defaultdict(list) for A, B in connections: adj_list[A].append(B) adj_list[B].append(A) def bfs(start_node): visited = [False] * N queue = deque([start_node]) total_species = 0 while queue: node = queue.popleft() if not visited[node]: visited[node] = True total_species += species[node] for neighbor in adj_list[node]: if not visited[neighbor]: queue.append(neighbor) return total_species max_species = 0 # Try starting the BFS from each node for i in range(N): max_species = max(max_species, bfs(i)) return max_species def process_garden(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] species = test_cases[i][1] connections = test_cases[i][2] results.append(find_max_unique_species(N, M, species, connections)) return results"},{"question":"Develop a function `validParenthesesCombinations` that generates all valid combinations of n pairs of parentheses. The function should take an integer `n` as its argument and return a list of strings, each representing a unique and valid arrangement of parentheses. Input: 3 Output: [\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"] Input: 2 Output: [\\"(())\\", \\"()()\\"] Note: - You do not need to test for invalid cases where n is less than 1. - Order of strings in the output list is not important. - Use recursion or backtracking to generate the combinations. Constraints: 1 ≤ n ≤ 8","solution":"def validParenthesesCombinations(n): Generate all valid combinations of n pairs of parentheses. Args: n (int): Number of pairs of parentheses. Returns: List[str]: A list of strings each representing a unique and valid arrangement of parentheses. def backtrack(s=\'\', left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \'(\', left + 1, right) if right < left: backtrack(s + \')\', left, right + 1) result = [] backtrack() return result"},{"question":"Taro is planning to buy a new smartphone. There are three different models available at prices x, y, and z dollars, respectively. In addition to the base model price, each phone has an additional warranty cost w1 for model x, w2 for model y, and w3 for model z. Taro wants to purchase the phone that will cost him the least amount of money, including the warranty. -----Constraints----- - 1 leq x, y, z leq 10000 - 1 leq w1, w2, w3 leq 1000 - x, y, z, w1, w2, and w3 are integers. -----Input----- Input is given from Standard Input in the following format: x w1 y w2 z w3 -----Output----- Print the minimum total price of a phone including its warranty. -----Sample Input----- 900 50 850 100 920 70 -----Sample Output----- 950 - Buying the 900-dollar phone and its 50-dollar warranty will cost 950 dollars. - Buying the 850-dollar phone and its 100-dollar warranty will cost 950 dollars. - Buying the 920-dollar phone and its 70-dollar warranty will cost 990 dollars. The minimum among these is 950 dollars.","solution":"def find_minimum_cost(x, w1, y, w2, z, w3): Returns the minimum total price of a phone including its warranty. cost_x = x + w1 cost_y = y + w2 cost_z = z + w3 return min(cost_x, cost_y, cost_z) # Reading input from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() x = int(data[0]) w1 = int(data[1]) y = int(data[2]) w2 = int(data[3]) z = int(data[4]) w3 = int(data[5]) print(find_minimum_cost(x, w1, y, w2, z, w3))"},{"question":"A baker is preparing for a large festival and has baked a massive number of pies. She wants to arrange the pies in equal rows and columns to form a perfect square formation. Your task is to determine whether it\'s possible to arrange the given number of pies in such a way. Constraints 1 ≤ M ≤ 10^(10^5) Input The first line of input contains M Output Output a single line containing \\"YES\\" or \\"NO\\" Example Input: 1000000000000000000000000000000001 Output: NO Explanation The given number cannot be rearranged into equal rows and columns to form a perfect square.","solution":"def is_perfect_square(n): Returns \\"YES\\" if n is a perfect square, otherwise \\"NO\\". if n < 0: return \\"NO\\" sqrt_n = int(n ** 0.5) return \\"YES\\" if sqrt_n * sqrt_n == n else \\"NO\\""}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},Y={class:"card-container"},F={key:0,class:"empty-state"},j=["disabled"],P={key:0},R={key:1};function M(s,e,u,m,r,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",Y,[(n(!0),i(w,null,_(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+h(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",P,"See more"))],8,j)):l("",!0)])}const z=d(A,[["render",M],["__scopeId","data-v-a65a897a"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/16.md","filePath":"deepseek/16.md"}'),L={name:"deepseek/16.md"},G=Object.assign(L,{setup(s){return(e,u)=>(n(),i("div",null,[x(z)]))}});export{B as __pageData,G as default};
