import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as _,f as u,F as y,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function A(s,e,l,m,r,a){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const N=d(k,[["render",A],["__scopeId","data-v-32d6ef0b"]]),O=JSON.parse('[{"question":"Scarlet and Violet love solving puzzles together. One day, they came across a sequence puzzle where they have to decide the winner based on a special set of rules. The game consists of a sequence S of N positive integers. The players take turns, with Scarlet going first. In each turn, the player selects an integer from the sequence and removes it, trying to maximize their score. The game has a twist: There is a special number X. The players can choose to skip their turn only if the X-th multiple in the sequence has not been picked yet (where X is a 1-based index). If any player skips their turn, the other player gets back-to-back turns until the sequence is empty. Scarlet always tries to maximize her score such that she can end up with a higher score than Violet. The players can opt to skip their turn only using the given special rule, and they strategize optimally. If Scarlet wins by always adopting this strategy, you need to print \\"WIN\\"; otherwise, print \\"LOSE\\". -----Input----- - The first line contains a single integer T, the number of test cases. - The first line of each test case contains two space-separated integers N and X, the number of elements in the sequence and the special number X. - The second line contains N space-separated integers S_1, S_2, dots, S_N. -----Output----- For each test case, print a single line containing \\"WIN\\" if Scarlet can ensure her victory over Violet or \\"LOSE\\" otherwise. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10,000 - 1 leq X leq N - 1 leq S_i leq 10,000 for each valid i -----Example Input----- 2 5 2 1 3 5 7 9 4 3 5 5 5 5 -----Example Output----- WIN LOSE -----Explanation----- Example Case 1: Scarlet can choose to strategically skip turns ensuring that she can always pick the higher values. Example Case 2: With an optimal strategy and considering the given constraints, Violet can tie or exceed Scarlet in points by equally leveraging the opportunity to skip turns at the right moment.","solution":"def determine_winner(T, test_cases): results = [] for case in test_cases: N, X = case[\'N\'], case[\'X\'] S = case[\'S\'] # Sort the sequence in descending order to prioritize larger values S.sort(reverse=True) # Split S into Scarlet\'s and Violet\'s picks assuming Scarlet starts first scarlet_score = sum(S[0::2]) violet_score = sum(S[1::2]) # Determine the winner if scarlet_score > violet_score: results.append(\\"WIN\\") else: results.append(\\"LOSE\\") return results # Helper function to parse input and process output def parse_input_and_process(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N, X = map(int, lines[idx].split()) S = list(map(int, lines[idx + 1].split())) test_cases.append({\'N\': N, \'X\': X, \'S\': S}) idx += 2 results = determine_winner(T, test_cases) return \'n\'.join(results) # Main function to process the input with determination logic def determine_winner(T, test_cases): results = [] for case in test_cases: N, X = case[\'N\'], case[\'X\'] S = case[\'S\'] # Sort the sequence in descending order to prioritize larger values S.sort(reverse=True) # Split S into Scarlet\'s and Violet\'s picks assuming Scarlet starts first scarlet_score = sum(S[0::2]) violet_score = sum(S[1::2]) # Determine the winner if scarlet_score > violet_score: results.append(\\"WIN\\") else: results.append(\\"LOSE\\") return results"},{"question":"Given an array of integers where each element appears three times except for one, which appears exactly once, find that single one. Example: Input: [2, 2, 3, 2] Output: 3 Input: [0, 1, 0, 1, 0, 1, 99] Output: 99","solution":"def single_number(nums): Finds the number that appears exactly once in an array where every other number appears three times. :param nums: List[int] :return: int ones, twos = 0, 0 for num in nums: ones = (ones ^ num) & ~twos twos = (twos ^ num) & ~ones return ones"},{"question":"Given a string `s` that consists of only lowercase English letters, construct a string `t` by performing the following operations exactly once for each character in `s`: 1. Choose a character in `s` (denoted as `c_i`). 2. Move `c_i` to the front of `t`. Return the lexicographically smallest string `t` that can be constructed by the above operations. Example 1: Input: s = \\"cbacdcbc\\" Output: \\"acdb\\" Explanation: Let\'s reconstruct the string `t` starting with an empty string. By moving the characters as described: - Moving \'a\' to the front gives us \\"a\\". - Moving \'b\' to the front of \\"a\\" gives us \\"ba\\". - Moving \'c\' to the front of \\"ba\\" and so on. The smallest lexicographical string we can get is \\"acdb\\". Example 2: Input: s = \\"bcabc\\" Output: \\"abc\\" Explanation: By moving the characters in the optimal way, the smallest lexicographical string we can get is \\"abc\\". Example 3: Input: s = \\"abacb\\" Output: \\"abc\\" Explanation: By optimally moving characters, the lexicographically smallest string is \\"abc\\". Constraints: - 1 <= s.length <= 10^4 - s consists of only lowercase English letters.","solution":"def remove_duplicate_letters(s): Returns the lexicographically smallest string possible by moving the characters of `s` to the front one by one. stack = [] seen = set() last_occurrence = {char: idx for idx, char in enumerate(s)} for idx, char in enumerate(s): if char not in seen: while stack and char < stack[-1] and idx < last_occurrence[stack[-1]]: seen.remove(stack.pop()) stack.append(char) seen.add(char) return \'\'.join(stack)"},{"question":"You are given a string representing an arithmetic expression that contains only non-negative integers, \'+\', \'-\', \'*\', and \'/\' operators (where \'/\' represents integer division). Implement a function to evaluate the expression and return the result. The input string is valid and follows normal operator precedence rules. Assume the input does not contain any parentheses. Example: Input: \\"3+2*2\\" Output: 7 Explanation: Perform multiplication before addition: 2*2 = 4, then add 3. Example: Input: \\" 3/2 \\" Output: 1 Explanation: Perform integer division 3 / 2 = 1. Example: Input: \\" 3+5 / 2 \\" Output: 5 Explanation: First perform division 5 / 2 = 2, then add 3. Note: - You may assume that the given expression is always valid and contains only non-negative integers. - The function should handle whitespaces and ignore them as necessary. - You should aim to solve the problem in O(n) time complexity, where n is the length of the input string.","solution":"def evaluate_expression(expression): Evaluates a string arithmetic expression containing non-negative integers and \'+\', \'-\', \'*\', and \'/\' operators with normal precedence rules. if not expression: return 0 num, stack, sign = 0, [], \'+\' expression = expression.replace(\' \', \'\') for i, ch in enumerate(expression): if ch.isdigit(): num = num * 10 + int(ch) if ch in \'+-*/\' or i == len(expression) - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack[-1] = stack[-1] * num elif sign == \'/\': stack[-1] = int(stack[-1] / num) # integer division num, sign = 0, ch return sum(stack)"},{"question":"You are organizing a reading challenge where participants read books over a certain period and record their reading progress at the end of each month. Your task is to evaluate the most consistent reader based on their monthly record. Each participant provides their reading progress as a list of integers, where each integer represents the number of pages read in that month. To determine the winner, you should follow these steps: 1. Calculate the variance in the number of pages read each month for each participant. Variance is a measure of the spread between numbers in a dataset. 2. The participant with the smallest variance in their reading progress is considered the most consistent. 3. If two or more participants have the same variance, the participant who has read the most total pages is selected. 4. If there is still a tie, select the participant whose name comes first alphabetically. Given an array records where records[i] is a tuple containing a string representing the participant\'s name and a list of integers representing their monthly reading progress, determine the most consistent reader\'s name. Example 1: Input: records = [(\\"Alice\\", [100, 200, 150, 100]), (\\"Bob\\", [150, 150, 150, 150]), (\\"Charlie\\", [95, 99, 102, 98])] Output: \\"Bob\\" Explanation: Bob has a variance of 0 in his reading progress, which is the smallest possible variance. Example 2: Input: records = [(\\"Dave\\", [120, 130, 140, 150]), (\\"Eve\\", [145, 150, 155, 148]), (\\"Frank\\", [200, 190, 180, 170])] Output: \\"Eve\\" Explanation: Both Dave and Eve have the same variance but Eve read more total pages (598 compared to Dave\'s 540). Example 3: Input: records = [(\\"Grace\\", [100, 110, 105, 115]), (\\"Hank\\", [50, 55, 53, 60]), (\\"Ivy\\", [75, 80, 78, 90])] Output: \\"Hank\\" Explanation: Hank and Ivy both have the same variance, but Hank has read fewer total pages (218 compared to Ivy\'s 323), so Hank is the winner. Constraints: - 1 <= len(records) <= 100 - len(records[i][1]) == 12 (Each participant\'s record will have exactly 12 months of data) - 50 <= records[i][1][j] <= 500 (Participants read between 50 and 500 pages per month) - records[i][0] is a non-empty string of English lowercase and uppercase letters","solution":"import numpy as np def most_consistent_reader(records): Determines the most consistent reader based on the variance of pages read each month. Args: records (list of tuples): each tuple contains a participant\'s name and a list of integers representing their monthly reading progress. Returns: str: The name of the most consistent reader. def variance(pages): Calculates the variance of a list of integers. return np.var(pages) def total_pages(pages): Calculates the total number of pages read. return sum(pages) # Initialize the best reader with default values best_reader = None lowest_variance = float(\'inf\') highest_total_pages = -1 for name, pages in records: var = variance(pages) total = total_pages(pages) if (var < lowest_variance or (var == lowest_variance and total > highest_total_pages) or (var == lowest_variance and total == highest_total_pages and (best_reader is None or name < best_reader))): lowest_variance = var highest_total_pages = total best_reader = name return best_reader"},{"question":"You\'ve been hired to implement a simple ticketing system for a small airport. You need to validate boarding passes. Each boarding pass contains a unique alphanumeric code that follows certain rules. A valid boarding pass code must meet the following criteria: 1. It must be exactly 10 characters long. 2. It must contain at least one uppercase letter. 3. It must contain at least one lowercase letter. 4. It must contain at least one digit. Write a function `validate_boarding_pass` to determine if a given boarding pass code is valid. The function should return `True` if the code is valid, and `False` otherwise. Examples: ```python validate_boarding_pass(\\"A1b3Cdefgh\\") # => True validate_boarding_pass(\\"A1B3CDEFGH\\") # => False (no lowercase letter) validate_boarding_pass(\\"a1c3e6g0k8\\") # => False (no uppercase letter) validate_boarding_pass(\\"A1c3E6K8\\") # => False (not 10 characters) ``` Write the function `validate_boarding_pass` to achieve this validation. Use regular expressions if you find them helpful.","solution":"import re def validate_boarding_pass(code): Validates a boarding pass code based on the given criteria. Parameters: code (str): The boarding pass code to validate. Returns: bool: True if the code is valid, False otherwise. if len(code) != 10: return False if not re.search(r\'[A-Z]\', code): return False if not re.search(r\'[a-z]\', code): return False if not re.search(r\'d\', code): return False return True"},{"question":"Polycarp is arranging a row of n tiles, each being either black or white. He decides to paint some white tiles black. Specifically, he wants to maximize the number of consecutive black tiles in the row. Each tile can be either black (\'B\') or white (\'W\'), at the beginning, and he can paint any white tile black. Your task is to determine the maximum number of consecutive black tiles Polycarp can obtain by painting some of the white tiles black. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. The description of each test case consists of two lines. The first line of each description contains one integer n (1 le n le 10^5) — the number of tiles. The second line contains a string of length n consisting of characters \'B\' and \'W\'. -----Output----- For each test case, print a single integer — the maximum number of consecutive black tiles Polycarp can obtain. -----Example----- Input 3 5 BBBWB 6 WWBWBB 8 WBWBWBWB Output 5 6 8","solution":"def max_consecutive_black_tiles(t, test_cases): results = [] for i in range(t): n, tiles = test_cases[i] results.append(n) return results"},{"question":"Given a string consisting of lowercase alphabets, return the length of the longest substring without repeating characters. Example 1: Input: \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. Example 2: Input: \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. Example 3: Input: \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. Note: The length of the input string will be in range [0, 5 * 104].","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_map = {} left = 0 max_length = 0 for right in range(n): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a collection of intervals. Merging overlapping intervals is required. Example: Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]]","solution":"def merge_intervals(intervals): Merges a collection of overlapping intervals. :param intervals: List of intervals where each interval is represented as [start, end]. :return: List of merged intervals. if not intervals: return [] # Sort intervals by their starting points intervals.sort(key=lambda x: x[0]) merged_intervals = [intervals[0]] for current in intervals[1:]: last_merged = merged_intervals[-1] # If the current interval overlaps with the last merged interval, merge them if current[0] <= last_merged[1]: last_merged[1] = max(last_merged[1], current[1]) else: merged_intervals.append(current) return merged_intervals"},{"question":"=====Problem Statement===== Given a string S, write a function to detect whether it is a palindrome, considering only alphanumeric characters and ignoring case sensitivity. Return True if the string is a palindrome, otherwise return False. =====Example===== Input: \\"A man, a plan, a canal, Panama\\" Output: True Input: \\"race a car\\" Output: False =====Input Format===== A single string S. =====Constraints===== 1 ≤ len(S) ≤ 10^5 =====Output Format===== A boolean value: True if the input string is a palindrome, otherwise False.","solution":"def is_palindrome(S): Returns True if the string S is a palindrome considering only alphanumeric characters and ignoring case sensitivity. Returns False otherwise. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in S if char.isalnum()] # Check if filtered characters form a palindrome return filtered_chars == filtered_chars[::-1]"},{"question":"A group of friends decides to play a game. There are N friends in total, and each friend has a preference for scoring points based on a number sequence. Each friend will only score points if the number they choose is strictly greater than the number chosen by all previous friends who have played. Given this constraint, determine the maximum number of friends who can score points. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers B_1, B_2, ldots, B_N. -----Output----- For each test case, print a single line containing one integer — the maximum number of friends who could score points. -----Constraints----- - 1 le T le 1,000 - 1 le N le 10^5 - 1 le B_i le 10^9 - the sum of N over all test cases does not exceed 10^6 -----Example Input----- 3 5 4 1 3 2 5 4 10 20 30 25 2 6 7 -----Example Output----- 4 3 2 -----Explanation----- Example case 1: The sequence (4, 1, 3, 2, 5) can be re-ordered as (1, 2, 3, 4, 5). The friends picking in the order of 1, 2, 3, 4, and 5 can all score points since each successive number is greater than the previous one. So the maximum number of friends who can score points is 4. Example case 2: The sequence (10, 20, 30, 25) can be reordered as (10, 20, 25, 30). Thus, the friends who pick these numbers in increasing order (10, 20, 25) can score points. The maximum number of friends who can score points is 3. Example case 3: The sequence (6, 7) is already in increasing order. Both friends can score points, so the maximum number of friends who can score points is 2.","solution":"def max_friends_scoring_points(T, test_cases): results = [] for i in range(T): N, B = test_cases[i] # Sort the numbers and remove duplicates sorted_unique_B = sorted(set(B)) results.append(len(sorted_unique_B)) return results"},{"question":"In the kingdom of Algorithms, King Alcom wants to build a network of roads to connect several cities to ensure ease of travel across the kingdom. Each road has a travel cost associated with it. The king wants to minimize the total cost of the roads used while still ensuring that all cities are connected. You are tasked with finding the minimum cost to connect all the cities using the given set of roads. Given a list of roads where each road is represented by three integers u, v, and w indicating a road connecting city u to city v with a travel cost w, determine the minimum cost required to connect all the cities. There might be multiple test cases to process. -----Input----- - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and M denoting the number of cities and the number of roads respectively. - Each of the next M lines contains three integers u, v, and w representing a road between cities u and v with cost w. -----Output----- For each test case, print a single line containing the minimum cost to connect all cities. If it is not possible to connect all the cities, print `-1`. -----Constraints----- - 1 le T le 100 - 2 le N le 100 - 1 le M le binom{N}{2} (at most N*(N-1)/2 edges in a complete graph) - 1 le u, v le N - u ne v - 1 le w le 1000 -----Example Input----- 2 4 5 1 2 3 1 3 4 4 2 5 3 4 6 1 4 10 3 2 1 2 4 2 3 6 -----Example Output----- 12 10 -----Explanation----- Example case 1: The minimum cost to connect all 4 cities is 12, using the roads with costs 3, 4, and 5. Example case 2: The minimum cost to connect all 3 cities is 10, using the roads with costs 4 and 6.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): result = [] i, e = 0, 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: if i >= len(edges): return -1 u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append(w) union(parent, rank, x, y) return sum(result) def minimum_cost_to_connect_cities(T, test_cases): outputs = [] for case in test_cases: N, M, edges = case result = kruskal(N, edges) outputs.append(result) return outputs"},{"question":"You are given a list of rectangles on a Cartesian plane. Each rectangle is defined by its bottom-left corner and top-right corner. Your task is to determine if these rectangles overlap and return a list of rectangles from the input that overlap with at least one other rectangle. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), the number of rectangles. The next n lines each contain four integers x1, y1, x2, y2, where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of a rectangle. It is guaranteed that x1 < x2 and y1 < y2. The coordinates can be negative, and their absolute values do not exceed 10^4. -----Output----- Output each rectangle that overlaps with at least one other rectangle in the same order as they appear in the input. Each rectangle should be printed on a new line in the format x1 y1 x2 y2. If none of the rectangles overlap, print \\"No overlapping rectangles\\". -----Examples----- Input 3 1 1 4 4 2 2 6 6 7 7 10 10 Output 1 1 4 4 2 2 6 6 Input 2 0 0 2 2 3 3 5 5 Output No overlapping rectangles -----Note----- In the first example, the first and second rectangles overlap because their coordinate ranges intersect. The third rectangle does not overlap with any others. Thus, the first and second rectangles are outputted. In the second example, there are only two rectangles, and they do not overlap with each other, so the output is \\"No overlapping rectangles\\". Remember, two rectangles overlap if their projections onto the X-axis and Y-axis intersect. Specifically, rectangles (x1, y1, x2, y2) and (a1, b1, a2, b2) overlap if and only if x1 < a2 and a1 < x2 and y1 < b2 and b1 < y2.","solution":"def is_overlapping(rect1, rect2): Checks if two rectangles overlap. Each rectangle is defined by (x1, y1, x2, y2) Return True if they overlap, False otherwise. x1, y1, x2, y2 = rect1 a1, b1, a2, b2 = rect2 if x1 < a2 and a1 < x2 and y1 < b2 and b1 < y2: return True return False def find_overlapping_rectangles(n, rectangles): Finds all rectangles that overlap with at least one other rectangle. overlapping_rectangles = [] for i in range(n): for j in range(n): if i != j and is_overlapping(rectangles[i], rectangles[j]): overlapping_rectangles.append(rectangles[i]) break return overlapping_rectangles def format_output(overlapping_rectangles): if not overlapping_rectangles: return \\"No overlapping rectangles\\" return \\"n\\".join([\\"{} {} {} {}\\".format(*rect) for rect in overlapping_rectangles]) # Solution function to process input and produce output def solve_overlapping_rectangles(n, rectangles): overlapping_rectangles = find_overlapping_rectangles(n, rectangles) return format_output(overlapping_rectangles)"},{"question":"Given two strings, determine if one is a permutation of the other. A permutation of a string is another string containing the same characters, only the order of characters can be different. - return True if one string is a permutation of the other - return False otherwise Example: is_permutation(\'abc\', \'cab\') == True is_permutation(\'abc\', \'abcd\') == False","solution":"def is_permutation(s1, s2): Determines if one string is a permutation of the other. # If the lengths of the strings are different, they can\'t be permutations if len(s1) != len(s2): return False # Sort both strings and compare return sorted(s1) == sorted(s2)"},{"question":"=====Function Descriptions===== sum The sum tool computes the sum of array elements over a given axis. import numpy my_array = numpy.array([ [1, 2], [3, 4] ]) print numpy.sum(my_array, axis = 0) # Output: [4 6] print numpy.sum(my_array, axis = 1) # Output: [3 7] print numpy.sum(my_array, axis = None) # Output: 10 print numpy.sum(my_array) # Output: 10 By default, the axis is None. Therefore, it computes the sum of the flattened array. prod The prod tool computes the product of array elements over a given axis. import numpy my_array = numpy.array([ [1, 2], [3, 4] ]) print numpy.prod(my_array, axis = 0) # Output: [3 8] print numpy.prod(my_array, axis = 1) # Output: [2 12] print numpy.prod(my_array, axis = None) # Output: 24 print numpy.prod(my_array) # Output: 24 By default, the axis is None. Therefore, it computes the product of the flattened array. cumsum The cumsum tool returns the cumulative sum of the elements along a given axis. import numpy my_array = numpy.array([ [1, 2], [3, 4] ]) print numpy.cumsum(my_array, axis = 0) # Output: [[1 2] [4 6]] print numpy.cumsum(my_array, axis = 1) # Output: [[1 3] [3 7]] print numpy.cumsum(my_array, axis = None) # Output: [1 3 6 10] print numpy.cumsum(my_array) # Output: [1 3 6 10] By default, the axis is None. Therefore, it computes the cumsum of the flattened array. =====Problem Statement===== You are given a 2-D array of size NXM. Your task is to find: The sum along axis 0 The product along axis 1 The cumsum along axis None =====Input Format===== The first line contains the space separated values of N and M. The next N lines contains M space separated integers. =====Output Format===== First, print the sum. Second, print the product. Third, print the cumsum.","solution":"import numpy as np def compute_array_operations(n, m, array): np_array = np.array(array) sum_along_axis_0 = np.sum(np_array, axis=0) prod_along_axis_1 = np.prod(np_array, axis=1) cumsum_along_axis_none = np.cumsum(np_array, axis=None) return sum_along_axis_0, prod_along_axis_1, cumsum_along_axis_none"},{"question":"A company\'s email chat log is represented as a list of strings where each string contains an employee\'s name, a timestamp (in hours), and the message content. The log is sorted by timestamp in ascending order. However, during peak hours (9 AM to 6 PM), the company wants to track the chat activity frequency by employee name and identify anyone who sends more than 10 messages within an hour time window. Given the list of chat logs, return a list of employee names who exhibit this behavior. You may return the answer in any order. Each chat log string chatLogs[i] consists of comma-separated values representing the name, timestamp (in hours), and the message content. Example 1: Input: chatLogs = [\\"alice,9,Hi\\", \\"alice,9,I need help\\", \\"alice,10,Thanks\\", \\"alice,10,See you\\", \\"bob,9,Yes\\", \\"bob,10,No\\", \\"bob,10,Maybe\\"] Output: [] Example 2: Input: chatLogs = [\\"alice,9,Hi\\", \\"alice,9,I need help\\", \\"alice,9,Did you see that?\\", \\"alice,9,That\'s cool\\", \\"bob,9,Yes\\", \\"alice,9,Check this out\\", \\"alice,9,Oh wow\\", \\"alice,9,Really?\\", \\"alice,9,Can you help?\\", \\"alice,9,Thanks\\", \\"alice,9,Okay\\", \\"alice,9,Bye\\"] Output: [\\"alice\\"] Note: - Alice is the only one who sends more than 10 messages between 9 AM and 10 AM. Constraints: - chatLogs.length <= 2000 - Each chatLogs[i] takes the form \\"{name},{timestamp},{message}\\" - Each {name} consists of lowercase English letters, and has a length between 1 and 10. - Each {timestamp} consists of digits, and represents an integer between 0 and 23. - Each {message} is a string of lowercase English letters and spaces, and has a length between 1 and 100. - The log is sorted by timestamp in ascending order.","solution":"def monitor_chat_activity(chatLogs): from collections import defaultdict message_counts = defaultdict(lambda: defaultdict(int)) result = [] # Parse chat logs for log in chatLogs: name, time, _ = log.split(\',\')[0], int(log.split(\',\')[1]), log.split(\',\')[2] message_counts[name][time] += 1 # Check for employees with > 10 messages in an hour for name, counts in message_counts.items(): for time, count in counts.items(): if count > 10: result.append(name) break return result"},{"question":"Write a function `find_missing_number` that takes an unsorted array containing `n-1` distinct numbers in the range from 1 to `n` and returns the missing number from the range. Example: ```python find_missing_number([3, 7, 1, 2, 8, 4, 5]) ``` This example should return `6` since `6` is the number missing in the range from 1 to 8.","solution":"def find_missing_number(arr): Finds the missing number in the array containing n-1 distinct numbers in the range from 1 to n. Parameters: arr (list): List of integers. Returns: int: The missing number. n = len(arr) + 1 total_sum = n * (n + 1) // 2 arr_sum = sum(arr) return total_sum - arr_sum"},{"question":"You are given a grid with n rows and m columns, where each cell in the grid contains either a \'O\' (open cell) or \'X\' (blocked cell). The grid is represented as a list of strings where each string corresponds to a row in the grid. You start at the top-left cell (0, 0) which is always an open cell and you want to move to the bottom-right cell (n-1, m-1), which is also guaranteed to be an open cell. You can move either to the right or down from your current cell. Write a function to determine the number of distinct paths from the top-left to the bottom-right cell, avoiding all blocked cells. If no such path exists, return 0. -----Input----- The function will receive a list of strings representing the grid, where the number of strings is n and the length of each string is m. -----Output----- The function should return an integer representing the number of distinct paths from the top-left to the bottom-right cell. -----Constraints----- - 1 ≤ n, m ≤ 10 - Each cell in the grid is guaranteed to be either \'O\' or \'X\', where \'O\' denotes an open cell and \'X\' denotes a blocked cell. - The top-left cell (0, 0) and the bottom-right cell (n-1, m-1) are always \'O\'. -----Example----- Input: [\\"OOO\\", \\"OXO\\", \\"OOO\\"] Output: 2 -----Explanation----- From the top-left cell, you can go right, right, down, down to reach the bottom-right cell. Another path is right, down, down, right. There are no other paths, so the function should return 2.","solution":"def num_distinct_paths(grid): n = len(grid) m = len(grid[0]) # Create a dp table to store the number of ways to reach each cell dp = [[0] * m for _ in range(n)] # Initialize the starting cell dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == \'X\': dp[i][j] = 0 # No paths through blocked cells else: if i > 0: dp[i][j] += dp[i-1][j] # Paths from the cell above if j > 0: dp[i][j] += dp[i][j-1] # Paths from the cell to the left # The number of paths to the bottom-right cell return dp[n-1][m-1]"},{"question":"Ravi is organizing a programming competition in which multiple participants will be solving problems. Each participant can submit multiple solutions to a problem, but only their best attempt for each problem will be considered for the final score. A participant’s score for a problem is the highest score among all their attempts for that problem. The overall score of a participant is the sum of their best scores across all problems. Given a sequence of submissions, help Ravi calculate the final scores for all participants. Each submission contains the participant\'s name, the problem ID, and the score obtained for that submission. Your task is to output the overall scores of all participants in sorted order by participant names. -----Input----- The first line contains a single integer N denoting the number of submissions. Then N lines follow. Each line consists of a string (the participant’s name), a string (the problem ID), and an integer (the score), separated by spaces. -----Output----- For each participant, output a single line containing the participant\'s name followed by their total score, in alphabetical order by participant’s name. -----Constraints----- 1 ≤ N ≤ 500,000 The name of each participant consists of between 1 and 50 characters. The problem ID consists of between 1 and 10 characters. 0 ≤ score ≤ 100 -----Example----- Input: 7 alice p1 50 bob p2 60 alice p1 70 alice p2 40 bob p2 80 charlie p1 90 charlie p2 100 Output: alice 110 bob 80 charlie 190","solution":"def calculate_final_scores(submissions): from collections import defaultdict participant_scores = defaultdict(lambda: defaultdict(int)) for name, problem, score in submissions: if score > participant_scores[name][problem]: participant_scores[name][problem] = score final_scores = {name: sum(scores.values()) for name, scores in participant_scores.items()} return sorted(final_scores.items()) # Function to parse input and call the calculation function def process_input(input_list): N = int(input_list[0]) submissions = [line.split()[:2] + [int(line.split()[2])] for line in input_list[1:N+1]] return calculate_final_scores(submissions)"},{"question":"# Task Given a string containing only lowercase letters, find the length of the longest substring that contains at most two different types of characters. You need to write a function that takes a string `s` as input and returns the length of the longest substring that meets the criteria. # Example For `s = \\"ccaabbb\\"`, the result should be `5`. ``` s --> c c a a b b b Longest --> a a b b b (length 5) substring ``` # Input/Output - `[input]` string `s` a string containing only lowercase letters with length in the range of [1, 10^5]. - `[output]` an integer the length of the longest substring that contains at most two different types of characters.","solution":"def longestSubstringWithTwoDistinct(s): Returns the length of the longest substring that contains at most two different types of characters. n = len(s) if n <= 2: return n max_len = 0 left = 0 char_count = {} for right in range(n): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Lucy loves strings and puzzles. One day she came across a problem where she has to transform a given string into a palindromic string by making the minimum number of changes. A palindromic string is a string that reads the same backward as forward. She can change any character in the string to any other character. Your task is to help her determine the minimum number of changes required to make the given string a palindrome. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each of the following T lines contains a single string S. -----Output----- For each test case, print a single line containing one integer — the minimum number of changes required to make the string a palindrome. -----Constraints----- - 1 le T le 100 - 1 le |S| le 100 -----Example Input----- 3 abca abcd aabb -----Example Output----- 1 2 2 -----Explanation----- Example case 1: Changing the last character \'a\' to \'c\' transforms the string into \\"abccba\\", which is a palindrome, so only one change is needed. Example case 2: Changing the characters \'b\' , \'c\' to \'a\' , \'d\' respectively transforms the string into \\"abba\\", so two changes are needed. Example case 3: Changing the characters \'a\' , \'b\' to \'b\' , \'a\' respectively transforms the string into \\"abccba\\", so two changes are needed.","solution":"def min_changes_to_palindrome(s: str) -> int: Given a string s, this function returns the minimum number of changes required to make the string a palindrome. changes = 0 length = len(s) # Loop over the string from the start to the middle for i in range(length // 2): if s[i] != s[length - i - 1]: changes += 1 return changes def solve(T, strings): results = [] for i in range(T): results.append(min_changes_to_palindrome(strings[i])) return results"},{"question":"Write a function that takes as input a list of dictionaries representing the inventory stock of different fruit vendors. Each dictionary contains fruit names as keys and their quantities as values. Your goal is to determine if you can gather a specified number of units of a given fruit by buying from one or more vendors. If possible, return \'True\', otherwise return \'False\'. Example: Input: vendors = [ {\\"apple\\": 5, \\"banana\\": 3}, {\\"apple\\": 3, \\"orange\\": 7}, {\\"banana\\": 6, \\"apple\\": 2} ] fruit_name = \\"apple\\" quantity = 10 Output: True Explanation: By summing the quantities of \\"apple\\" from all vendors, we get: 5 (from the first vendor) + 3 (from the second vendor) + 2 (from the third vendor) = 10. Therefore, it is possible to gather 10 \\"apple\\" units. Constraints: - The number of vendors (dictionaries) will not exceed 1000. - Each fruit\'s quantity will be a non-negative integer. - You can assume the fruit_name will always be a string and quantity will always be a non-negative integer.","solution":"def can_gather_fruit(vendors, fruit_name, quantity): Determines if the desired quantity of a specific fruit can be gathered from multiple vendors. Parameters: vendors (list): A list of dictionaries representing each vendor\'s inventory. fruit_name (str): The name of the fruit to gather. quantity (int): The quantity required of the specified fruit. Returns: bool: True if the desired quantity can be gathered, False otherwise. total_quantity = 0 for vendor in vendors: if fruit_name in vendor: total_quantity += vendor[fruit_name] if total_quantity >= quantity: return True return total_quantity >= quantity"},{"question":"Your friend is an enthusiastic crossword puzzle maker and she has designed a brand-new type of crossword. Each word in the list of given words must be placed into a grid either horizontally or vertically such that no two words overlap or cross. Write a function to determine if it is possible to place all the words in the given list into the grid following these rules: 1. Each word can be placed horizontally or vertically. 2. No two words can overlap or cross each other. 3. The grid size is given as an input. Your function should take two inputs: - An integer n representing the size of the grid (n x n). - A list of strings representing the words to be placed in the grid. Your function should return True if it is possible to place all the words into the grid according to the rules, otherwise it should return False. Input: - n (integer): The size of the grid, e.g., 4. - words (list of strings): The list of words to place in the grid, e.g., [\\"WORD\\", \\"GO\\", \\"TREE\\"]. Output: - Return a boolean indicating whether it is possible to place the words into the grid without overlapping or crossing each other. Example: Input: n = 5, words = [\\"HELLO\\", \\"WORLD\\", \\"PYTHON\\"] Output: False Input: n = 4, words = [\\"AB\\", \\"CD\\", \\"EF\\"] Output: True","solution":"def can_place_all_words(n, words): Determines if all words can be placed in an n x n grid either horizontally or vertically without overlapping or crossing. Args: n : int : size of the grid (n x n) words : list of strings : words to be placed in the grid Returns: bool : True if all words can be placed, False otherwise # Function to check if a word fits in a given position and orientation def fits(x, y, word, horizontal): if horizontal: return y + len(word) <= n and all(grid[x][y + i] == 0 for i in range(len(word))) else: return x + len(word) <= n and all(grid[x + i][y] == 0 for i in range(len(word))) # Place the word in the grid def place(x, y, word, horizontal): if horizontal: for i in range(len(word)): grid[x][y + i] = word[i] else: for i in range(len(word)): grid[x + i][y] = word[i] # Remove the word from the grid def remove(x, y, word, horizontal): if horizontal: for i in range(len(word)): grid[x][y + i] = 0 else: for i in range(len(word)): grid[x + i][y] = 0 # Backtracking function to try placing all words def backtrack(index): if index == len(words): return True word = words[index] for x in range(n): for y in range(n): if fits(x, y, word, True): place(x, y, word, True) if backtrack(index + 1): return True remove(x, y, word, True) if fits(x, y, word, False): place(x, y, word, False) if backtrack(index + 1): return True remove(x, y, word, False) return False # Initialize grid grid = [[0] * n for _ in range(n)] # Start backtracking return backtrack(0)"},{"question":"Aria is organizing a gaming tournament and needs to assign each player a unique ID. Each player ID is generated in the form of a string consisting of uppercase English letters only. After a match, a player’s ID might get corrupted with some characters being replaced by asterisks \'*\'. However, to trace back the player, Aria wants to determine the number of possible valid IDs that could match the given corrupted ID. A valid ID is any string that consists of the same length as the corrupted ID and adheres to the restriction that each character should be an uppercase English letter (\'A\' - \'Z\'). -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line containing the corrupted ID. -----Output:----- For each test case, output the number of possible valid IDs. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ |corrupted ID| ≤ 100 -----Sample Input:----- 3 A*C *** AB** -----Sample Output:----- 26 17576 676 Explanation: In the first test case (A*C), the possible valid IDs could be \\"AAC\\", \\"ABC\\", \\"ACC\\", ..., up to \\"AZC\\". There are 26 valid combinations where \'*\' can be replaced by any uppercase letter. In the second test case (***), as every \'*\' can be any of the 26 letters, the total possible valid IDs are 26 * 26 * 26 = 17576. In the third test case (AB**), there are 26 * 26 possible valid IDs as the last two \'*\' could be replaced by any combination of uppercase letters.","solution":"def count_possible_ids(corrupted_id): Returns the number of possible valid IDs that could match the given corrupted ID. # Count the number of \'*\' in the corrupted ID star_count = corrupted_id.count(\'*\') # Each \'*\' can be replaced by any of the 26 uppercase letters possible_ids = 26 ** star_count return possible_ids def main(test_cases): results = [] for corrupted_id in test_cases: results.append(count_possible_ids(corrupted_id)) return results"},{"question":"You need to implement a Sudoku solver. Write a function that takes a partially filled 9x9 Sudoku grid and fills in the empty cells in such a way that each row, each column, and each of the nine 3x3 sub-grids contains all of the digits from 1 to 9 exactly once. The Sudoku grid is represented by a list of lists, and empty cells are represented by the character \'.\'. Your function should modify the input grid in-place. Example: Input: [ [\'5\', \'3\', \'.\', \'.\', \'7\', \'.\', \'.\', \'.\', \'.\'], [\'6\', \'.\', \'.\', \'1\', \'9\', \'5\', \'.\', \'.\', \'.\'], [\'.\', \'9\', \'8\', \'.\', \'.\', \'.\', \'.\', \'6\', \'.\'], [\'8\', \'.\', \'.\', \'.\', \'6\', \'.\', \'.\', \'.\', \'3\'], [\'4\', \'.\', \'.\', \'8\', \'.\', \'3\', \'.\', \'.\', \'1\'], [\'7\', \'.\', \'.\', \'.\', \'2\', \'.\', \'.\', \'.\', \'6\'], [\'.\', \'6\', \'.\', \'.\', \'.\', \'.\', \'2\', \'8\', \'.\'], [\'.\', \'.\', \'.\', \'4\', \'1\', \'9\', \'.\', \'.\', \'5\'], [\'.\', \'.\', \'.\', \'.\', \'8\', \'.\', \'.\', \'7\', \'9\'] ] Output: [ [\'5\', \'3\', \'4\', \'6\', \'7\', \'8\', \'9\', \'1\', \'2\'], [\'6\', \'7\', \'2\', \'1\', \'9\', \'5\', \'3\', \'4\', \'8\'], [\'1\', \'9\', \'8\', \'3\', \'4\', \'2\', \'5\', \'6\', \'7\'], [\'8\', \'5\', \'9\', \'7\', \'6\', \'1\', \'4\', \'2\', \'3\'], [\'4\', \'2\', \'6\', \'8\', \'5\', \'3\', \'7\', \'9\', \'1\'], [\'7\', \'1\', \'3\', \'9\', \'2\', \'4\', \'8\', \'5\', \'6\'], [\'9\', \'6\', \'1\', \'5\', \'3\', \'7\', \'2\', \'8\', \'4\'], [\'2\', \'8\', \'7\', \'4\', \'1\', \'9\', \'6\', \'3\', \'5\'], [\'3\', \'4\', \'5\', \'2\', \'8\', \'6\', \'1\', \'7\', \'9\'] ]","solution":"def solve_sudoku(board): Solves the Sudoku puzzle by filling the empty cells such that each row, each column, and each 3x3 sub-grid contains the digits from 1 to 9 exactly once. The board is modified in-place. def is_valid(board, row, col, num): for i in range(9): if board[row][i] == num or board[i][col] == num or board[row - row % 3 + i // 3][col - col % 3 + i % 3] == num: return False return True def solve(): for row in range(9): for col in range(9): if board[row][col] == \'.\': for num in map(str, range(1, 10)): # iterating over the digits \'1\' to \'9\' if is_valid(board, row, col, num): board[row][col] = num if solve(): return True board[row][col] = \'.\' return False return True solve()"},{"question":"Create a function to validate an International Standard Book Number (ISBN-10). An ISBN-10 (International Standard Book Number) is a ten digit code used as a unique identifier for books. A valid ISBN-10 is a string of 10 characters, which can be digits (0-9) or the letter \'X\' (which represents 10). The last character (the checksum) is calculated based on the first 9 digits using a specific algorithm. Here\'s the validation algorithm for an ISBN-10: 1. Multiply the first digit by 10, the second digit by 9, the third digit by 8, and so on until the ninth digit. 2. Add the results of these multiplications together. 3. Divide the total sum by 11 and obtain the remainder. 4. If the remainder is 0, the ISBN-10 is valid. If the last character is \'X\', consider it as 10. Create a function named `validate_isbn10(isbn: str) -> bool` that takes a string and returns `True` if the string is a valid ISBN-10 and `False` otherwise. Consider the following constraints when implementing your function: - The input should be 10 characters long. - The first 9 characters must be digits (0-9). - The last character can be a digit (0-9) or \'X\'. Examples ``` validate_isbn10(\\"0471958697\\") => True validate_isbn10(\\"123456789X\\") => True validate_isbn10(\\"1234567890\\") => False validate_isbn10(\\"12345\\") => False ```","solution":"def validate_isbn10(isbn: str) -> bool: Validates an ISBN-10 string. Args: isbn (str): The ISBN-10 string to validate. Returns: bool: True if the ISBN-10 is valid, False otherwise. if len(isbn) != 10: return False total = 0 for i in range(9): if not isbn[i].isdigit(): return False total += int(isbn[i]) * (10 - i) if isbn[9] == \'X\': total += 10 elif isbn[9].isdigit(): total += int(isbn[9]) else: return False return total % 11 == 0"},{"question":"# Definition A **_Harshad number_** (or **_Niven number_**) is a positive integer that is divisible by the sum of its digits. ___ # Task **_Given_** a number, **_Find if it is a Harshad number or not_**. ____ # Notes: * The **_number_** passed is always **_Positive_**. * **_Return_** the result as a **_Boolean_**. ___ # Input >> Output Examples ``` isHarshadNumber(18) ==> return (true) ``` **_Explanation_**: **_The sum of 18\'s digits_** `{1 + 8 = 9}` divides 18 evenly: `18 % 9 == 0`. ___ ``` isHarshadNumber(19) ==> return (false) ``` **_Explanation_**: **_The sum of 19\'s digits_** `{1 + 9 = 10}` does not divide 19 evenly: `19 % 10 != 0`. ___ ``` isHarshadNumber(21) ==> return (true) ``` **_Explanation_**: **_The sum of 21\'s digits_** `{2 + 1 = 3}` divides 21 evenly: `21 % 3 == 0`. ___ ``` isHarshadNumber(53) ==> return (false) ``` **_Explanation_**: **_The sum of 53\'s digits_** `{5 + 3 = 8}` does not divide 53 evenly: `53 % 8 != 0`. ___ ___ ___ # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers) # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays) # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored) ___ ALL translations are welcomed Enjoy Learning !! # Zizou","solution":"def isHarshadNumber(number): Returns True if the given number is a Harshad number, otherwise False. Parameters: number (int): A positive integer. Returns: bool: True if the number is a Harshad number, False otherwise. digit_sum = sum(int(digit) for digit in str(number)) return number % digit_sum == 0"},{"question":"A large dataset is often accompanied by an array of unique identification numbers (IDs). To maintain efficient processing of these IDs, it\'s crucial to ensure that they are unique and sorted for quick lookup and retrieval. Your task is to write a function that takes a list of IDs and performs the following operations: 1. Remove duplicate IDs. 2. Sort the IDs in ascending order. The function should be named `process_ids` and adhere to the following signature: ```python def process_ids(ids: List[int]) -> List[int]: ``` # Input: - `ids`: A list of integers, where each integer represents an ID. The list may contain duplicates and is not sorted. # Output: - Your function should return a list of integers. This list should contain only unique IDs from the input, sorted in ascending order. # Constraints: - The length of the `ids` list (n) will be (1 leq n leq 10^6). - Each ID in the list will be a non-negative integer. Example: ```python # Example 1 input_ids = [3, 5, 2, 3, 8, 5] output_ids = process_ids(input_ids) print(output_ids) # Output should be: [2, 3, 5, 8] # Example 2 input_ids = [10, 1, 1, 7, 8, 10, 6, 5] output_ids = process_ids(input_ids) print(output_ids) # Output should be: [1, 5, 6, 7, 8, 10] ``` Feel free to include helper functions if necessary, but the main functionality should be contained within the `process_ids` function. Avoid using any in-built functions that directly perform both deduplication and sorting.","solution":"from typing import List def process_ids(ids: List[int]) -> List[int]: Returns a list of unique IDs from the input, sorted in ascending order. Parameters: - ids: List of integers containing ID numbers, possibly with duplicates. Returns: - List of unique ID numbers sorted in ascending order. unique_ids = set(ids) sorted_unique_ids = sorted(unique_ids) return sorted_unique_ids"},{"question":"A farm owner keeps a record of his animals each day. The record is represented as a dictionary where the keys are the names of the animals (strings) and the values are lists of integers representing the number of that animal he counted each day. The owner wants to find out which animals\' counts are strictly increasing every day. Write a function `strictly_increasing_counts(farm_record)` to help the owner identify such animals. -----Input----- The input will be a dictionary `farm_record` where each key is a string representing the name of the animal and its value is a list of integers (1 ≤ length of the list ≤ 1000), representing the animal count recorded each day. -----Output----- Return a list of strings containing the names of the animals whose counts are strictly increasing every day. -----Example----- Input: { \\"sheep\\": [1, 2, 3, 4], \\"cows\\": [2, 3, 3, 5], \\"chickens\\": [1, 2, 1, 4], \\"ducks\\": [3, 4, 5, 6] } Output: [\\"sheep\\", \\"ducks\\"] Explanation: The counts of \\"sheep\\" ([1, 2, 3, 4]) and \\"ducks\\" ([3, 4, 5, 6]) are strictly increasing. The counts of \\"cows\\" ([2, 3, 3, 5]) and \\"chickens\\" ([1, 2, 1, 4]) are not strictly increasing.","solution":"def strictly_increasing_counts(farm_record): This function takes a dictionary farm_record where keys are the names of animals and values are lists of integers representing the count of each animal recorded each day. It returns a list of strings containing the names of the animals whose counts are strictly increasing every day. increasing_animals = [] for animal, counts in farm_record.items(): if all(counts[i] < counts[i + 1] for i in range(len(counts) - 1)): increasing_animals.append(animal) return increasing_animals"},{"question":"You are tasked with arranging a series of tile pieces to form a row. Each tile has a positive integer value representing its length. You have to determine whether the row of tiles can be split into exactly two parts such that the sum of the lengths of the tiles in both parts is equal. Write a function `can_split_tiles(tiles)` that takes in a list of integers `tiles` representing the lengths of the tiles and returns a boolean indicating whether it\'s possible to partition the list into two subsets with equal sum. # Example ```python print(can_split_tiles([1, 2, 3, 4])) # Output: True print(can_split_tiles([1, 1, 3, 6])) # Output: False print(can_split_tiles([1, 5, 11, 5])) # Output: True print(can_split_tiles([1, 2, 3, 5])) # Output: False ``` # Constraints - The elements in the list are positive integers. - The length of the list is 1 to 100. - The value of each element is between 1 and 100. # Notes - You may assume that the function should return `True` if the function is provided an empty list, as the two empty partitions have equal sums.","solution":"def can_split_tiles(tiles): Determines if the list of tile lengths can be partitioned into two subsets with equal sum. total_sum = sum(tiles) # If total sum is odd, it cannot be equally partitioned if total_sum % 2 != 0: return False target = total_sum // 2 n = len(tiles) # Initialize dp array dp = [False] * (target + 1) dp[0] = True for tile in tiles: for j in range(target, tile - 1, -1): dp[j] = dp[j] or dp[j - tile] return dp[target]"},{"question":"Create a function that takes an array of integers and a target integer. The function should return the length of the longest contiguous subarray that sums up to the target. For example: Input: arr = [1, -1, 5, -2, 3] target = 3 Output: 4 Explanation: The subarray [1, -1, 5, -2] sums up to 3 and has the longest length of 4. Note: Assume the input array contains at least one integer.","solution":"def longest_subarray_with_sum(arr, target): Returns the length of the longest contiguous subarray that sums to the target. sum_map = {0: -1} # Initialize sum_map with 0:-1 for edge case handling total_sum = 0 max_length = 0 for i in range(len(arr)): total_sum += arr[i] if (total_sum - target) in sum_map: max_length = max(max_length, i - sum_map[total_sum - target]) if total_sum not in sum_map: sum_map[total_sum] = i return max_length"},{"question":"Create a function named `reverse_words` that takes a single string as input and returns a new string with the words in reverse order. Note that any leading or trailing whitespaces should be trimmed, and multiple spaces between words should be reduced to a single space in the output. ```python reverse_words(\\" hello world \\") # \\"world hello\\" reverse_words(\\"Python is great\\") # \\"great is Python\\" reverse_words(\\" \\") # \\"\\" reverse_words(\\"Code\\") # \\"Code\\" ``` Implement this function using only standard string manipulation methods. Do not use any external library functions or built-in reverse methods. Ensure that your solution is efficient and handles edge cases appropriately. Example: ```python reverse_words(\\"This is an example\\") # \\"example an is This\\" reverse_words(\\" Another test \\") # \\"test Another\\" reverse_words(\\"\\") # \\"\\" reverse_words(\\" SingleWord \\") # \\"SingleWord\\" ```","solution":"def reverse_words(s): Returns a new string with the words in reverse order, with any leading or trailing whitespaces trimmed, and multiple spaces between words reduced to a single space. words = s.strip().split() return \' \'.join(words[::-1])"},{"question":"You have a list of positive integers. Your task is to return the sum of all even numbers in the list. Example: ```python sum_even([1, 2, 3, 4, 5, 6]) == 12 sum_even([7, 11, 13, 17]) == 0 sum_even([2, 4, 6, 8]) == 20 ``` Input constraints: The list contains at most 1000 elements, each element is a positive integer <= 10,000.","solution":"def sum_even(numbers): Returns the sum of all even numbers in the list. :param numbers: List of positive integers :return: Sum of all even numbers in the list return sum(num for num in numbers if num % 2 == 0)"},{"question":"The chief architect of a leading software company wants to optimize the productivity of the development team. He gave the following problem to test if the team can think critically and solve it efficiently. Can you help the team solve the task and improve their productivity? You are given an array A consisting of N integers. A subarray of this array is defined as any contiguous segment of the array. However, you can choose at most one subarray and you must return its sum of elements. For example, for an array [1, 2, 3], the possible subarrays are: - [1], [2], [3] - [1, 2], [2, 3] - [1, 2, 3] Let us define the sum of the subarray as the sum of all the integers in it. The task is to find the maximum sum among all possible subarrays of the given array A. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. - Each test case consists of two lines: - The first line contains a single integer N, the size of the array. - The second line contains N space-separated integers which form the array A. -----Output----- For each test case, print a single integer corresponding to the maximum sum of any subarray of A. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - -10^4 ≤ Ai ≤ 10^4, where Ai is the i-th integer in the array A. -----Example----- Input: 2 3 1 2 3 4 -1 -2 -3 -4 Output: 6 -1 -----Explanation----- Example case 1. The subarray [1, 2, 3] has the maximum sum 6. Example case 2. The subarray [-1] has the maximum sum -1 (since all elements are negative, the least negative number is considered).","solution":"def max_subarray_sum(arr): This function takes an array and returns the maximum sum of any subarray of the array. max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def max_subarray_sums(test_cases): This function processes multiple test cases and uses max_subarray_sum to find the maximum sum of subarrays for each test case. results = [] for case in test_cases: N, array = case results.append(max_subarray_sum(array)) return results"},{"question":"Implement a function `linked_list_cycle_length(head)` that takes the head of a singly linked list as its argument. The singly linked list might contain a cycle. If the list contains a cycle, your function should return the length of the cycle. If there is no cycle, the function should return 0. You are required to use the Floyd’s Tortoise and Hare algorithm to detect the cycle and then calculate its length. Example: For a linked list with the structure `1 -> 2 -> 3 -> 4 -> 5 -> 3` (cycle starts at node with value 3), `linked_list_cycle_length(head)` should return `3`. For a linked list `1 -> 2 -> 3 -> 4 -> 5`, `linked_list_cycle_length(head)` should return `0`.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def linked_list_cycle_length(head): Detects the cycle in a linked list using Floyd’s Tortoise and Hare algorithm, and returns the length of the cycle if it exists, otherwise returns 0. :param head: ListNode, the head of the singly linked list. :return: int, the length of the cycle or 0 if there\'s no cycle. slow = fast = head # Step 1: Determine if there is a cycle using Tortoise and Hare approach. while fast and fast.next: slow = slow.next fast = fast.next.next # Cycle detected if slow == fast: # Step 2: Determine the length of the cycle current = slow cycle_length = 0 while True: current = current.next cycle_length += 1 if current == slow: return cycle_length # No cycle found return 0"},{"question":"Problem: Substring Repetition Given a string, determine if it can be constructed by repeating a substring of it multiple times. If yes, return the length of the smallest such substring. Otherwise, return -1. # Input - A single string `s` with length between 1 and 1000, inclusive. The string consists of lowercase English letters. # Output - An integer representing the length of the smallest substring that can be repeated to form the given string or `-1` if no such substring exists. # Examples ```py substring_repetition(\\"ababab\\") == 2 # \\"ab\\" can be repeated 3 times to form \\"ababab\\" substring_repetition(\\"aaaa\\") == 1 # \\"a\\" can be repeated 4 times to form \\"aaaa\\" substring_repetition(\\"abcabcabc\\") == 3 # \\"abc\\" can be repeated 3 times to form \\"abcabcabc\\" substring_repetition(\\"abcd\\") == -1 # no substring can be repeated to form \\"abcd\\" ``` # Constraints 1. The length of the input string `s` will be between 1 and 1000. 2. The string `s` will only contain lowercase English letters (`\'a\'` to `\'z\'`).","solution":"def substring_repetition(s): Determines if the string s can be constructed by repeating a substring of it multiple times. Returns the length of the smallest such substring or -1 if no such substring exists. n = len(s) if n == 1: return 1 # A single character string repeats itself. for length in range(1, n // 2 + 1): if n % length == 0: substring = s[:length] if substring * (n // length) == s: return length return -1"},{"question":"Mia has a rectangular grid of size m times n and she wants to reach from the top-left corner to the bottom-right corner. She can only move right or down at each step. However, some cells in the grid are blocked which prevents her from standing on or passing through them. Write a program to determine the number of unique paths Mia can take to reach her destination. Since the number of paths can be large, output your answer modulo 1000000007 (10^9 + 7). -----Input:----- - The first line contains two integers m and n (1 leq m, n leq 1000), representing the dimensions of the grid. - The next m lines each contain n integers (0 or 1), where 1 represents a blocked cell and 0 represents an open cell. -----Output:----- For a given grid, output a single line with the number of unique paths modulo 1000000007. -----Constraints----- - It is guaranteed that the start cell (top-left) and the end cell (bottom-right) are open (i.e., not blocked). -----Sample Input:----- 3 3 0 0 0 0 1 0 0 0 0 -----Sample Output:----- 2 -----EXPLANATION:----- In a 3x3 grid with one blocked cell at (2,2) ([1,1] in zero-indexed list), the two paths are: 1. (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) 2. (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2)","solution":"MOD = 1000000007 def unique_paths_with_obstacles(m, n, grid): if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[m-1][n-1] # Read input data def main(): import sys input = sys.stdin.read data = input().split() m = int(data[0]) n = int(data[1]) grid = [] data_index = 2 for _ in range(m): row = [int(data[data_index + i]) for i in range(n)] grid.append(row) data_index += n print(unique_paths_with_obstacles(m, n, grid)) if __name__ == \\"__main__\\": main()"},{"question":"Given an integer array nums and two integers k and t, return true if there are two distinct indices i and j in the array such that abs(nums[i] - nums[j]) <= t and abs(i - j) <= k. Example 1: Input: nums = [1,2,3,1], k = 3, t = 0 Output: true Explanation: There are two distinct indices i and j in the array such that abs(nums[i] - nums[j]) <= 0 and abs(i - j) <= 3, specifically i = 0 and j = 3. Example 2: Input: nums = [1,0,1,1], k = 1, t = 2 Output: true Explanation: There are two distinct indices i and j in the array such that abs(nums[i] - nums[j]) <= 2 and abs(i - j) <= 1, specifically i = 2 and j = 3. Example 3: Input: nums = [1,5,9,1,5,9], k = 2, t = 3 Output: false Explanation: There are some pairs of distinct indices (i, j) in the array, but none where both abs(nums[i] - nums[j]) <= 3 and abs(i - j) <= 2 are true. Constraints: 1 <= nums.length <= 2 * 10^4 -2^31 <= nums[i] <= 2^31 - 1 0 <= k <= 10^4 0 <= t <= 2^31 - 1","solution":"def containsNearbyAlmostDuplicate(nums, k, t): Returns true if there are two distinct indices i and j in the array such that abs(nums[i] - nums[j]) <= t and abs(i - j) <= k. Otherwise, returns false. if t < 0: return False num_dict = {} width = t + 1 for i, num in enumerate(nums): bucket = num // width if bucket in num_dict: return True if bucket - 1 in num_dict and abs(num - num_dict[bucket - 1]) < width: return True if bucket + 1 in num_dict and abs(num - num_dict[bucket + 1]) < width: return True num_dict[bucket] = num if i >= k: del num_dict[nums[i - k] // width] return False"},{"question":"Write a function that takes a list of integers and returns a list of the same integers, but with all prime numbers replaced by the string \\"prime\\". To briefly explain, a prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. If the function receives an empty list, it should return an empty list. For example, ```python replace_primes([2, 3, 4, 5, 6, 7, 8, 9, 10]) ``` should return ```python [\'prime\', \'prime\', 4, \'prime\', 6, \'prime\', 8, 9, 10] ```","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def replace_primes(lst): Returns a list with all prime numbers replaced by the string \\"prime\\". If the input list is empty, it returns an empty list. return [\'prime\' if is_prime(x) else x for x in lst]"},{"question":"# Task Given a list of points on a 2D plane, find the largest distance between any two points in the list. The distance between two points (x1, y1) and (x2, y2) is defined as the Euclidean distance: [ text{distance} = sqrt{(x2 - x1)^2 + (y2 - y1)^2} ] # Function Signature ```python def largest_distance(points: List[Tuple[int, int]]) -> float: ``` # Input - `points`: A list of tuples, where each tuple (x, y) represents the coordinates of a point on the 2D plane. The list contains at least two points and at most 10,000 points. # Output - Return the largest distance between any two points in the list, as a floating point number. # Example ```python largest_distance([(0,0), (1,1), (2,2)]) ``` Output: ``` 2.8284271247461903 largest_distance([(0,0), (0,3), (4,0)]) ``` Output: ``` 5.0 ``` # Constraints: - Each coordinate will be an integer within the range ([-10^4, 10^4]). - The number of points will be between 2 and 10,000 inclusive. - You can use the `math.sqrt` and `math.pow` functions from Python\'s `math` module.","solution":"import math from typing import List, Tuple def largest_distance(points: List[Tuple[int, int]]) -> float: Returns the largest Euclidean distance between any two points in the list. max_dist = 0 for i in range(len(points)): for j in range(i + 1, len(points)): dist = math.sqrt( (points[j][0] - points[i][0]) ** 2 + (points[j][1] - points[i][1]) ** 2 ) if dist > max_dist: max_dist = dist return max_dist"},{"question":"Write a function that takes a list of integers and returns a new list where each element is the sum of all even numbers up to and including that element in the original list. Example: Input: [1, 2, 3, 4, 5, 6] Output: [0, 2, 2, 6, 6, 12]","solution":"def sum_of_evens_up_to_each_element(nums): Returns a new list where each element is the sum of all even numbers up to and including that element in the original list. Parameters: nums (list of int): Original list of integers. Returns: list of int: New list with sums of all even numbers up to each element. result = [] current_sum = 0 for num in nums: if num % 2 == 0: current_sum += num result.append(current_sum) return result"},{"question":"Description Given a string `s`, determine the length of the longest substring that contains at most `k` distinct characters. For example, given `s = \\"eceba\\"` and `k = 2`, the longest substring with at most 2 distinct characters is `\\"ece\\"` with a length of 3. Write a function `length_of_longest_substring_k_distinct` that takes in a string `s` and an integer `k` and returns the length of the longest substring that contains at most k distinct characters. Example # Input ```python s = \\"eceba\\" k = 2 ``` # Output ```python 3 ``` # Explanation The longest substring with at most 2 distinct characters is `\\"ece\\"`, which has a length of 3. Note Write an algorithm that handles cases efficiently even when `s` is very large or `k` is high.","solution":"def length_of_longest_substring_k_distinct(s, k): Returns the length of the longest substring that contains at most k distinct characters. if k == 0 or not s: return 0 char_map = {} left = 0 max_length = 0 for right in range(len(s)): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given an array of integers, determine if there exists a subarray (contiguous elements) with a sum equal to zero. If such a subarray is found, return the subarray. If no such subarray exists, return an empty array. The subarray must contain at least one element. For example, given the input `[3, 4, -7, 1, 3, 3, 1, -4]`, the function should return `[3, 4, -7]` or any other subarray that sums up to zero from the given array. For input `[1, 2, 3]`, the function should return `[]`, as there is no subarray with sum zero. Consider edge cases where the input array might be empty or contain all zeros.","solution":"def find_zero_sum_subarray(arr): Finds a subarray with sum equal to zero. prefix_sum = 0 seen_sums = {0: -1} # Sum to index mapping, 0 is mapped to -1 to handle the sum starting from index 0 for i, num in enumerate(arr): prefix_sum += num if prefix_sum in seen_sums: # Return the subarray from the index after the previous occurrence of the same prefix sum start_index = seen_sums[prefix_sum] + 1 return arr[start_index:i + 1] seen_sums[prefix_sum] = i return []"},{"question":"Given a matrix `mat` of integers with `n` rows and `m` columns, and a list `queries` where each query is a list `[r1, c1, r2, c2]` representing the top-left and bottom-right corners of a submatrix, your task is to return a list containing the sum of elements for each queried submatrix. Example 1: Input: mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], queries = [[0, 0, 1, 1], [1, 1, 2, 2]] Output: [12, 28] Explanation: - For the first query [0, 0, 1, 1], the submatrix is: [[1, 2], [4, 5]] The sum of these elements is 1 + 2 + 4 + 5 = 12. - For the second query [1, 1, 2, 2], the submatrix is: [[5, 6], [8, 9]] The sum of these elements is 5 + 6 + 8 + 9 = 28. Example 2: Input: mat = [[1, 3], [5, 7]], queries = [[0, 0, 0, 1], [1, 0, 1, 1], [0, 0, 1, 1]] Output: [4, 12, 16] Constraints: - `mat` is an `n x m` matrix where 1 <= n, m <= 1000. - Each element in `mat` is an integer in the range [-10^4, 10^4]. - `queries` is a list of length `q` where 1 <= q <= 10000. - Each query is a list [r1, c1, r2, c2] with 0 <= r1 <= r2 < n and 0 <= c1 <= c2 < m.","solution":"def submatrix_sum(mat, queries): def calculate_prefix_sum(matrix): rows = len(matrix) cols = len(matrix[0]) prefix_sum = [[0] * (cols + 1) for _ in range(rows + 1)] for i in range(1, rows + 1): for j in range(1, cols + 1): prefix_sum[i][j] = (matrix[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1]) return prefix_sum prefix_sum = calculate_prefix_sum(mat) result = [] for r1, c1, r2, c2 in queries: sum_value = (prefix_sum[r2 + 1][c2 + 1] - prefix_sum[r1][c2 + 1] - prefix_sum[r2 + 1][c1] + prefix_sum[r1][c1]) result.append(sum_value) return result"},{"question":"Write a function `areCousins` that determines if two given nodes in a binary tree are cousins. Two nodes are defined as cousins if they are at the same level in the tree, but have different parents. To illustrate: Consider the following binary tree: ``` 1 / 2 3 / 4 5 6 ``` In this tree: - Nodes 4 and 6 are cousins because they are at the same level (level 2), but have different parents (2 and 3 respectively). - Nodes 5 and 6 are also cousins for the same reason. - Nodes 4 and 5 are not cousins because they share the same parent (2). To solve this problem, your function should take the root of the binary tree and the values of the two nodes as arguments. The function should return `True` if the two nodes are cousins, and `False` otherwise. You can assume that all node values are unique and the two given node values are always present in the tree. Example: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def areCousins(root: TreeNode, x: int, y: int) -> bool: # Your code here root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) root.right.right = TreeNode(6) assert areCousins(root, 4, 6) == True assert areCousins(root, 5, 6) == True assert areCousins(root, 4, 5) == False ```","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def areCousins(root: TreeNode, x: int, y: int) -> bool: def find_level_and_parent(node, val, level=0, parent=None): if not node: return None if node.val == val: return (level, parent) left = find_level_and_parent(node.left, val, level + 1, node) if left: return left right = find_level_and_parent(node.right, val, level + 1, node) return right level_x, parent_x = find_level_and_parent(root, x) level_y, parent_y = find_level_and_parent(root, y) return (level_x == level_y) and (parent_x != parent_y)"},{"question":"You are given an array of integers representing the daily prices of a particular stock. Based on these prices, you can decide to only buy and sell the stock once in such a way that you aim to maximize your profit. You need to determine the maximum profit you can achieve by buying and then selling the stock exactly once. Note that you cannot sell a stock before you buy one. -----Input----- - The first line of the input contains a single integer n, the number of elements in the array. - The second line contains n space-separated integers, representing the price of the stock on each day. -----Output----- Print a single integer - the maximum profit possible by buying and selling the stock once. If there is no profit, print 0. -----Constraints----- - 1 le n le 100,000 - 1 le text{prices}[i] le 10,000 -----Example Input----- 6 7 1 5 3 6 4 -----Example Output----- 5 -----Explanation----- Buy the stock on day 2 (price = 1) and sell it on day 5 (price = 6), for a maximum profit of 6 - 1 = 5. [Extended Example] -----Example Input----- 5 7 6 4 3 1 -----Example Output----- 0 -----Explanation----- In this case, no transactions are done and the maximum profit is 0. There is no opportunity to make a profit.","solution":"def max_profit(prices): Returns the maximum profit achievable by buying and selling the stock once. :param prices: List of integers representing daily stock prices. :return: Maximum profit or 0 if no profit can be achieved. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Developer Alina has been working on a new feature which involves processing sequences of characters. She encountered a specific problem where she needs to determine whether a given string can be converted to a palindrome by modifying at most one character. A palindrome is a string that reads the same backward as forward. **Task**: Given a string, determine if it can be transformed into a palindrome by changing at most one character. If it is possible, return \\"YES\\". Otherwise, return \\"NO\\". -----Input----- - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each of the next T lines contains a single string s. -----Output----- For each test case, print a single line containing either \\"YES\\" or \\"NO\\". -----Constraints----- - 1 le T le 10^5 - 1 le |s| le 10^5 - The sum of lengths of all strings does not exceed 10^6. -----Example Input----- 3 abca abcba abcdef -----Example Output----- YES YES NO -----Explanation----- Example case 1: Change \'c\' to \'b\' to make the string a palindrome \\"abba\\". Example case 2: The string is already a palindrome. Example case 3: It is not possible to transform the string into a palindrome by modifying just one character.","solution":"def can_be_palindrome_with_one_change(s): Helper function to determine if a string can become a palindrome by changing at most one character. left, right = 0, len(s) - 1 mismatches = 0 while left < right: if s[left] != s[right]: mismatches += 1 if mismatches > 1: return \\"NO\\" left += 1 right -= 1 return \\"YES\\" def determine_palindromes(T, test_cases): Main function to handle multiple test cases. results = [] for s in test_cases: results.append(can_be_palindrome_with_one_change(s)) return results"},{"question":"Write a function that generates a sequence of \\"square-free\\" numbers. A number is considered square-free if it is not divisible by any perfect square other than 1. Your task is to generate the first `n` square-free numbers. For example, the first 10 square-free numbers are: ``` [1, 2, 3, 5, 6, 7, 10, 11, 13, 14] ``` Write a function that takes a single integer `n` as input and returns a list of the first `n` square-free numbers. If `n == 0`, return an empty list. You can assume `n` is always a non-negative integer. ```python def square_free_numbers(n): # your code here ``` # Example ```python square_free_numbers(10) # Output: [1, 2, 3, 5, 6, 7, 10, 11, 13, 14] ``` # Notes - Pay attention to the efficiency of your approach as `n` can be quite large. - You may use a helper function to determine if a number is square-free. Good luck!","solution":"def is_square_free(num): Determines if a number is square-free. if num == 1: return True for i in range(2, int(num**0.5) + 1): if (num % (i * i)) == 0: return False return True def square_free_numbers(n): Generates the first n square-free numbers. if n == 0: return [] sq_free_nums = [] num = 1 while len(sq_free_nums) < n: if is_square_free(num): sq_free_nums.append(num) num += 1 return sq_free_nums"},{"question":"David is a construction worker tasked with building a series of reinforced concrete walls. He has several types of bricks, each with distinct lengths and widths, but he can only use one specific type of brick for each wall to ensure structural integrity. The walls must be laid out in a strictly rectangular shape, such that the length of the wall is exactly L units, and the width of the wall is exactly W units. David wants to know how many bricks of the chosen type will be required to build each wall. Help David by writing a program that reads the dimensions of several walls and the dimensions of the bricks he can use and then calculates the number of bricks required for each wall. -----Input----- - The first line of the input contains an integer Q denoting the number of queries. - Each query is described by two lines. - The first line of each query contains two integers L and W denoting the length and width of the wall. - The second line contains two integers BL and BW denoting the length and width of the bricks. -----Output----- - For each query, output a single line containing the number of bricks required to build the wall. -----Constraints----- - 1 ≤ Q ≤ 1000 - 1 ≤ L, W, BL, BW ≤ 10000 -----Example----- Input: 2 10 5 2 1 12 8 3 2 Output: 25 16 -----Explanation----- Example case 1: The wall is 10x5 units and the brick is 2x1 units. David will need 25 (10/2 * 5/1) bricks to build this wall. Example case 2: The wall is 12x8 units and the brick is 3x2 units. David will need 16 (12/3 * 8/2) bricks to build this wall.","solution":"def bricks_needed(Q, queries): results = [] for i in range(Q): L, W = queries[i][0] BL, BW = queries[i][1] bricks_count = (L // BL) * (W // BW) results.append(bricks_count) return results"},{"question":"As a security analyst, you are tasked with monitoring the network for potential anomalies in data transfer activities. You need to analyze a list of data transfer records where each record is represented as a tuple containing the following information: (source IP, destination IP, transferred data amount in MB). For each source IP, you must determine the total data transferred and return a list of tuples where each tuple contains a source IP and the corresponding total transferred data amount. The list should be sorted by the total transferred data amount in descending order. If two sources have the same total transferred data amount, sort them by the source IP in ascending lexicographical order. # Function Signature ```python def analyze_data_transfers(transfers: List[Tuple[str, str, int]]) -> List[Tuple[str, int]]: ``` # Input - transfers (List of Tuples[str, str, int]): A list of data transfer records, where each record is a tuple (source IP, destination IP, transferred data amount). # Output - List of Tuples[str, int]: A list of tuples where each tuple contains a source IP and the corresponding total transferred data amount, sorted by the total transferred data amount in descending order, and by the source IP in ascending lexicographical order if two sources have the same total transferred data amount. # Example ```python transfers = [ (\\"192.168.1.1\\", \\"10.0.0.1\\", 500), (\\"192.168.1.1\\", \\"10.0.0.2\\", 300), (\\"10.0.0.1\\", \\"192.168.1.1\\", 200), (\\"10.0.0.2\\", \\"192.168.1.1\\", 100) ] analyze_data_transfers(transfers) ``` # Expected Output ```python [(\\"192.168.1.1\\", 800), (\\"10.0.0.1\\", 200), (\\"10.0.0.2\\", 100)] ```","solution":"def analyze_data_transfers(transfers): from collections import defaultdict # Dictionary to store the total transferred data per source IP data_transfer_summary = defaultdict(int) for source_ip, destination_ip, data_amount in transfers: data_transfer_summary[source_ip] += data_amount # Convert the dictionary to a list of tuples for sorting summary_list = list(data_transfer_summary.items()) # Sort the list by total transferred data in descending order, # and by source IP in ascending lexicographical order if equal summary_list.sort(key=lambda x: (-x[1], x[0])) return summary_list"},{"question":"You are given a string `s` representing a sentence with multiple words separated by spaces. Your task is to reverse the order of words in the sentence while keeping the order of characters within each word the same. For example, given the input string `\\"hello world this is a test\\"`, your function should return `\\"test a is this world hello\\"`. **Input:** - A string `s` consisting of alphabetic characters and spaces only. There will be no leading or trailing spaces, and there will be exactly one space between each pair of consecutive words. **Output:** - A string with the words in reverse order. **Example:** - For the input string `\\"coding is fun\\"`, the output should be `\\"fun is coding\\"`.","solution":"def reverse_words(s): Reverses the order of words in a given sentence. :param s: String representing a sentence with multiple words separated by spaces. :return: String with words in reverse order. words = s.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Alice is an enthusiastic gardener and likes to arrange different varieties of plants in her garden. She has N groups of plants, each group requiring a specific amount of water every day. Alice wants to automate the watering process using a smart irrigation system. The system supports placing watering nodes that can water multiple plant groups simultaneously. Each watering node can water any number of plant groups, but all the groups watered by a node must require the same amount of water per day. Alice wants to minimize the number of watering nodes she needs to use to water all the plant groups. Given the water requirements of all the plant groups, determine the minimum number of watering nodes required. -----Input:----- The first line of the input gives the number of test cases, T. T test cases follow. Each test case begins with a line containing an integer N. Then, another line follows containing N integers, the i-th one is the water requirement Wi for the i-th group of plants. -----Output:----- For each test case, output one line containing an integer Y, where Y is the minimum number of watering nodes required. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 - 1 leq Wi leq 1000 It is guaranteed that it is possible to water all the plant groups. -----Sample Input:----- 3 4 2 3 2 3 5 1 4 1 4 2 3 1 1 1 -----Sample Output:----- 2 3 1 -----EXPLANATION:----- In Sample Case 1, there are N = 4 plant groups with water requirements [2, 3, 2, 3]. Alice could: - Use one watering node for plant groups with 2 units of water (2 groups). - Use another watering node for plant groups with 3 units of water (2 groups). In Sample Case 2, there are N = 5 plant groups with water requirements [1, 4, 1, 4, 2]. Alice could: - Use one watering node for plant groups with 1 unit of water (2 groups). - Use another watering node for plant groups with 4 units of water (2 groups). - Use another watering node for the plant group with 2 units of water. In Sample Case 3, there are N = 3 plant groups with water requirements [1, 1, 1]. Alice could: - Use one watering node for all plant groups with 1 unit of water.","solution":"def min_watering_nodes(test_cases): results = [] for groups in test_cases: # Using a set to find unique water requirements unique_requirements = set(groups) # The number of unique water requirements will be the number of nodes needed results.append(len(unique_requirements)) return results def parse_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) groups = list(map(int, input_lines[index + 1].split())) test_cases.append(groups) index += 2 return test_cases def format_output(results): return \'n\'.join(map(str, results)) def main(input_data): test_cases = parse_input(input_data) results = min_watering_nodes(test_cases) return format_output(results)"},{"question":"**Background** In triangle geometry, one characteristic property is that any side of a triangle is always shorter than the sum of the other two sides and longer than their difference. This is known as the triangle inequality theorem. Given three positive integers, you need to determine whether they can be the lengths of the sides of a triangle. **Task** Write a function `is_triangle(a, b, c)` that takes three positive integers as input, representing the lengths of the sides of a triangle. The function should return `True` if they can form a triangle, and `False` otherwise. Examples: ``` is_triangle(3, 4, 5) -> True is_triangle(1, 1, 2) -> False is_triangle(7, 10, 5) -> True is_triangle(1, 2, 3) -> False ``` **Hints** - The integers provided will always be positive. - The function should first check the triangle inequality theorem: - ( a + b > c ) - ( a + c > b ) - ( b + c > a ) - If all these conditions are met, return `True`; otherwise, return `False`. **Challenges** - Can you implement this function in a way that it also handles large integers efficiently? - Consider edge cases such as when the numbers are almost equal or the sum of two sides is just slightly larger than the third side.","solution":"def is_triangle(a, b, c): Determine if three side lengths can form a triangle based on the triangle inequality theorem. Parameters: a (int): The first side length. b (int): The second side length. c (int): The third side length. Returns: bool: True if the lengths can form a triangle, False otherwise. return a + b > c and a + c > b and b + c > a"},{"question":"A company has a conveyor belt moving boxes from one end to the other. Each box on the conveyor belt is represented by an integer, which denotes the weight of the box. Your task is to reorganize the boxes such that no two adjacent boxes have the same weight. Return any valid arrangement if possible. You can assume that a solution exists if the following condition is met: no weight appears more than the sum of all other weights plus one. Example 1: Input: [3,3,2,2,2,1,1] Output: [2,3,2,1,2,3,1] Example 2: Input: [7,7,7,1,2,2,3,3,3] Output: [7,3,7,2,7,1,3,2,3] Note: - 1 <= boxes.length <= 10000 - 1 <= boxes[i] <= 10000","solution":"from collections import Counter import heapq def reorganize_boxes(boxes): Reorganizes boxes such that no two adjacent boxes have the same weight. # Count frequency of each weight counter = Counter(boxes) # Max heap to order frequencies (negative for max heap) max_heap = [(-count, weight) for weight, count in counter.items()] heapq.heapify(max_heap) prev_count, prev_weight = 0, None result = [] # While there are still elements in the heap while max_heap: count, weight = heapq.heappop(max_heap) # Add the current weight to the result result.append(weight) # Since we are using a heap, reverse the count again by subtracting one if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_weight)) # Update previous weight and its count prev_count, prev_weight = count + 1, weight return result"},{"question":"You are given an integer array `nums` and an integer `k`. In one move, you can choose any subarray of `nums` of length exactly `k` and reverse it. Your goal is to perform this operation such that the resultant array is lexicographically smallest possible. You can perform this operation as many times as you want (possibly zero). -----Input----- - The first line contains an integer t (1 le t le 50), the number of test cases. - The first line of each test case contains an integer n (1 le n le 100) and k (1 le k le n), the length of the array and the length of the subarray to reverse. - The second line of each test case contains n integers, the elements of nums. Each element of `nums` is between 1 and 1000 inclusive. -----Output----- Print t lines: the lexicographically smallest possible array for each test case after any number of reversals. -----Example----- Input 2 3 2 3 2 1 4 2 4 2 3 1 Output 1 3 2 1 2 4 3 -----Note----- In the first test case, you reverse the subarray from index 1 to 2 to get [2, 3, 1]. Then, reverse the subarray from index 2 to 3 to get [2, 1, 3]. Finally, reverse the subarray from index 0 to 1 to get [1, 3, 2]. In the second test case, you reverse the subarray from index 2 to 3 to get [4, 2, 1, 3]. Then, reverse the subarray from index 0 to 1 to get [2, 4, 1, 3]. Finally, reverse the subarray from index 2 to 3 to get [2, 4, 3, 1].","solution":"def lexicographically_smallest_array(t, test_cases): results = [] for case in test_cases: n, k, nums = case if k == 1: # If k is 1, we cannot reverse subarrays of length 1 to make any change, so nums is already the smallest. results.append(nums) else: # Using the property that any permutation is possible by reversing subarrays with length > 1 sorted_nums = sorted(nums) results.append(sorted_nums) return results # Example input t = 2 test_cases = [ (3, 2, [3, 2, 1]), (4, 2, [4, 2, 3, 1]) ] print(lexicographically_smallest_array(t, test_cases))"},{"question":"Mysterious Grid Problem Bucky is intrigued by a mysterious grid that contains numbers. In this grid, each cell (i, j) contains the product of its row number i and column number j, where 1 ≤ i, j ≤ n. Bucky wants to know the sum of all numbers in this n x n grid. Input You are given an integer n; `1 ≤ n ≤ 1000`. Output Output the sum of all numbers in the n x n grid. Example Input 4 Output 100 Explanation The grid for n=4: 1 2 3 4 2 4 6 8 3 6 9 12 4 8 12 16 Sum = 1+2+3+4+2+4+6+8+3+6+9+12+4+8+12+16 = 100","solution":"def mysterious_grid_sum(n): Returns the sum of all numbers in an n x n grid where each cell (i, j) contains the product of its row number i and column number j. total_sum = 0 for i in range(1, n + 1): for j in range(1, n + 1): total_sum += i * j return total_sum"},{"question":"Given a string `s` containing words separated by spaces and a set `forbidden_words` which contains certain words that need to be avoided, you are required to create a function `sanitize_sentence(s, forbidden_words)` that removes all occurrences of the forbidden words from the string while preserving the order of the remaining words. For instance: - If `s = \\"the quick brown fox jumps over the lazy dog\\"` and `forbidden_words = {\\"the\\", \\"jumps\\"}`, the output should be `\\"quick brown fox over lazy dog\\"`. - If `s = \\"hello world!\\"` and `forbidden_words = {\\"world!\\"}`, the output should be `\\"hello\\"`. The function should be case-sensitive, meaning that \\"The\\" and \\"the\\" are considered different words. Function Signature: ```python def sanitize_sentence(s: str, forbidden_words: set) -> str: ``` **Input:** - `s` : A string `s` containing words separated by spaces. - `forbidden_words` : A set of forbidden words. **Output:** - A string where all forbidden words have been removed, and the order of remaining words is maintained. **Constraints:** - The length of string `s` will not exceed 1000 characters. - Each word in the string `s` is guaranteed to be separated by exactly one space. - The `forbidden_words` set will contain between 0 to 100 words. - Words in `forbidden_words` will not exceed 100 characters in length.","solution":"def sanitize_sentence(s: str, forbidden_words: set) -> str: Removes all occurrences of the forbidden words from the string \'s\'. Args: s : str : The input string containing words separated by spaces. forbidden_words : set : A set of words to be removed from the string. Returns: str : The sanitized string with forbidden words removed. return \' \'.join(word for word in s.split() if word not in forbidden_words)"},{"question":"Write a function `items_within_budget` that takes two parameters: 1. A dictionary where the keys are item names (strings) and the values are the prices of the items (floats). 2. A float representing a budget. The function should return a list of item names that can be purchased within the given budget. The item names in the returned list should be sorted in alphabetical order. For example: ```python items = { \\"apple\\": 1.50, \\"banana\\": 0.50, \\"cherry\\": 2.00, \\"date\\": 1.00, \\"elderberry\\": 1.75 } budget = 1.50 items_within_budget(items, budget) ``` This should return: ```python [\'apple\', \'banana\', \'date\'] ``` The function should be case-insensitive when comparing item names.","solution":"def items_within_budget(items, budget): Returns a list of item names that can be purchased within the given budget. Parameters: items (dict): A dictionary where keys are item names (strings) and values are prices (floats). budget (float): The available budget. Returns: list: A list of item names that can be purchased within the budget, sorted in alphabetical order. affordable_items = [] for item, price in items.items(): if price <= budget: affordable_items.append(item.lower()) return sorted(affordable_items)"},{"question":"Your task is to implement a function that processes a string and calculates the frequency of each character in the string. The function should disregard case sensitivity and ignore non-alphabetic characters. The output should list the characters in alphabetical order alongside their frequencies. First Example: Input: \\"Hello, World!\\" Steps: - Ignore non-alphabetic characters: \\"HelloWorld\\" - Convert to lowercase: \\"helloworld\\" - Calculate frequencies: {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} Output: [(\'d\', 1), (\'e\', 1), (\'h\', 1), (\'l\', 3), (\'o\', 2), (\'r\', 1), (\'w\', 1)] Second Example: Input: \\"Programming is fun!\\" Steps: - Ignore non-alphabetic characters: \\"Programmingisfun\\" - Convert to lowercase: \\"programmingisfun\\" - Calculate frequencies: {\'p\': 1, \'r\': 2, \'o\': 1, \'g\': 2, \'a\': 1, \'m\': 2, \'i\': 2, \'n\': 2, \'s\': 1, \'u\': 1} Output: [(\'a\', 1), (\'g\', 2), (\'i\', 2), (\'m\', 2), (\'n\', 2), (\'o\', 1), (\'p\', 1), (\'r\', 2), (\'s\', 1), (\'u\', 1)] Input: string (any printable ASCII characters and spaces) Output: list of tuples containing characters and their respective frequencies","solution":"def char_frequency(s): Process a string and calculates the frequency of each character in the string. Disregards case sensitivity and ignores non-alphabetic characters. Args: s (str): Input string Returns: list: List of tuples containing characters and their frequencies in alphabetical order. # Filter out non-alphabetic characters and convert to lowercase filtered_string = \'\'.join([char.lower() for char in s if char.isalpha()]) # Calculate the frequency of each character frequency_dict = {} for char in filtered_string: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 # Return the sorted list of tuples return sorted(frequency_dict.items())"},{"question":"Write a function to analyze financial transactions. Given an array of transaction objects, where each object contains an id, type (either \'credit\' or \'debit\'), and amount, compute the net balance. Rules: - Sum all credits and subtract all debits to get the net balance. - If there are no transactions, return 0. - Ensure to handle potential floating-point precision issues. Return the net balance rounded to two decimal places. # Example Transaction: ```json [ {\\"id\\": 1, \\"type\\": \\"credit\\", \\"amount\\": 50.50}, {\\"id\\": 2, \\"type\\": \\"debit\\", \\"amount\\": 20.00}, {\\"id\\": 3, \\"type\\": \\"credit\\", \\"amount\\": 30.75} ] ``` # Example Output: ```json 61.25 ``` # Example Transaction: ```json [] ``` # Example Output: ```json 0 ``` Write the function `calculate_net_balance(transactions: List[Dict[str, Union[str, float]]]) -> float`.","solution":"from typing import List, Dict, Union def calculate_net_balance(transactions: List[Dict[str, Union[str, float]]]) -> float: Calculates the net balance from a list of financial transactions. Args: - transactions: List of dictionaries, each containing \\"id\\", \\"type\\", and \\"amount\\". Returns: - Net balance rounded to two decimal places. net_balance = 0.0 for transaction in transactions: if transaction[\'type\'] == \'credit\': net_balance += transaction[\'amount\'] elif transaction[\'type\'] == \'debit\': net_balance -= transaction[\'amount\'] return round(net_balance, 2)"},{"question":"Determine whether a given sentence is a palindrome, ignoring spaces, punctuation, and case. A palindrome is a sentence that reads the same backward as forward. Return `True` if the sentence is a palindrome, and `False` otherwise. Implementation should be case insensitive and should also ignore non-alphanumeric characters. # Examples - Input: `\\"A man, a plan, a canal, Panama\\"` - Output: `True` - Input: `\\"Hello, World!\\"` - Output: `False` - Input: `\\"Madam, in Eden, I’m Adam\\"` - Output: `True` # Constraints - The input string will contain at least 1 character. - The input string will not be more than 1000 characters in length.","solution":"def is_palindrome(sentence): Determines whether a given sentence is a palindrome, ignoring spaces, punctuation, and case. import re # Remove non-alphanumeric characters and convert to lowercase. cleaned_sentence = re.sub(r\'[^a-zA-Z0-9]\', \'\', sentence).lower() # Check if the cleaned sentence is the same forward and backward. return cleaned_sentence == cleaned_sentence[::-1]"},{"question":"You are given a list of integers and you have to find the longest contiguous subarray that forms a strictly increasing sequence. Write a function `longest_increasing_subarray(arr)` that accepts a list of integers `arr` and returns the longest increasing contiguous subarray. If there are multiple subarrays with the same maximum length, return the one that occurs first. # Example: **Input:** ```python [1, 2, 1, 3, 4, 1, 5, 6] ``` **Output:** ```python [1, 3, 4] ``` # Explanation: In the given array, the longest contiguous subarray forming a strictly increasing sequence is `[1, 3, 4]`, occurring before `[1, 5, 6]`. **Input:** ```python [1, 2, 3, 4, 5] ``` **Output:** ```python [1, 2, 3, 4, 5] ``` # Constraints: * The array will always contain at least one element. * Array elements are integers and can be negative.","solution":"def longest_increasing_subarray(arr): Given a list of integers, this function returns the longest contiguous subarray that forms a strictly increasing sequence. If there are multiple subarrays with the same maximum length, it returns the one that occurs first. n = len(arr) if n == 0: return [] max_len = 1 max_start = 0 current_len = 1 current_start = 0 for i in range(1, n): if arr[i] > arr[i - 1]: current_len += 1 else: if current_len > max_len: max_len = current_len max_start = current_start current_start = i current_len = 1 if current_len > max_len: max_len = current_len max_start = current_start return arr[max_start:max_start + max_len]"},{"question":"Given an array of integers `nums` and an integer `p`, divide the array into p non-empty continuous subarrays such that the maximum sum of any subarray is minimized. Return the minimized largest sum among the p subarrays. For example, if the input array `nums` is `[7, 2, 5, 10, 8]` and `p` is 2, the answer should be 18. This is because the array can be split into `[7, 2, 5]` and `[10, 8]`, where the largest sum of the subarrays is minimized to be 18. # Example 1 Input: nums = [7, 2, 5, 10, 8], p = 2 Output: 18 Explanation: The input array can be split into [7, 2, 5] and [10, 8], where the maximum sum among the subarrays is minimized to be 18. # Example 2 Input: nums = [1, 2, 3, 4, 5], p = 2 Output: 9 Explanation: The input array can be split into [1, 2, 3, 4] and [5], where the maximum sum among the subarrays is minimized to be 9. # Example 3 Input: nums = [1, 4, 4], p = 3 Output: 4 Explanation: The input array is split into [1], [4], and [4], where the maximum sum among the subarrays is minimized to be 4. # Constraints: - 1 <= nums.length <= 1000 - 0 <= nums[i] <= 10^6 - 1 <= p <= min(50, nums.length)","solution":"def split_array(nums, p): def can_split(mid): current_sum = 0 count = 1 for num in nums: current_sum += num if current_sum > mid: current_sum = num count += 1 if count > p: return False return True left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if can_split(mid): right = mid else: left = mid + 1 return left"},{"question":"In a given list of integers, there are exactly two elements that appear only once, while all other elements appear exactly twice. You need to write a function `find_unique_numbers(lst)` that finds and returns these two unique elements as a tuple (in any order). # Function Signature ```python def find_unique_numbers(lst: List[int]) -> Tuple[int, int]: pass ``` # Input - `lst` is a list of integers where exactly two unique elements exist, and all other elements appear exactly twice. - `2 <= len(lst) <= 10^4` - -10^6 <= `lst[i]` <= 10^6 # Output - A tuple containing the two unique integers. # Examples 1. `find_unique_numbers([1, 2, 3, 2, 1, 4])` should return `(3, 4)` or `(4, 3)` 2. `find_unique_numbers([ -1, 2, -1, 3, 4, 2])` should return `(3, 4)` or `(4, 3)` 3. `find_unique_numbers([ -1, -2, -1, -3, -4, -2])` should return `(-3, -4)` or `(-4, -3)` # Note: - Do not use sorting as the time complexity is expected to be O(N) and additional space complexity is expected to be O(1).","solution":"from typing import List, Tuple def find_unique_numbers(lst: List[int]) -> Tuple[int, int]: xor_sum = 0 for num in lst: xor_sum ^= num # Get a bit that is set in xor_sum (rightmost set bit) rightmost_set_bit = xor_sum & (-xor_sum) num1, num2 = 0, 0 for num in lst: if num & rightmost_set_bit: num1 ^= num else: num2 ^= num return (num1, num2)"},{"question":"You are given a list of dictionaries, each containing information about a student, including their name and their scores in various subjects. Write a function that returns a new dictionary with student names as keys and their average score as values. For example: ```python students = [ {\\"name\\": \\"Alice\\", \\"math\\": 90, \\"science\\": 85, \\"art\\": 88}, {\\"name\\": \\"Bob\\", \\"math\\": 78, \\"science\\": 82, \\"art\\": 79}, ... ] ``` Your function should return: ```python {\\"Alice\\": 87.67, \\"Bob\\": 79.67, ...} ``` Note: The average score should be rounded to 2 decimal places.","solution":"def compute_student_averages(students): Returns a dictionary with student names as keys and their average score as values. Averages are rounded to 2 decimal places. Args: students (list): A list of dictionaries, each containing a student\'s name and their scores. Returns: dict: A dictionary with student names as keys and their average score as values. averages = {} for student in students: name = student.pop(\\"name\\") scores = student.values() average_score = round(sum(scores) / len(scores), 2) averages[name] = average_score return averages"},{"question":"Lauren is working on a segmentation project and has been given the task to segment a set of integers into groups of consecutive numbers. She needs your help to create a program that will return the list of these groups. The input contains a number of test cases. For each test case, you will be given a list of integers. The task is to identify all groups of consecutive integers in the list. Input: • The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. • The first line of each test case contains a single integer N (the number of integers in the list). • The second line contains N space-separated integers. Output: For each test case, print each group of consecutive integers on a separate line. Each group should be printed as space-separated integers. Consecutive groups should be separated by a blank line. Constraints: • 1 ≤ T ≤ 5 • 1 ≤ N ≤ 100 • -1000 ≤ Ai ≤ 1000 Example Input: 2 6 1 2 3 5 6 8 5 10 11 12 15 16 Example Output: 1 2 3 5 6 8 10 11 12 15 16 Explanation: In the first test case, the input list contains three groups of consecutive integers: {1, 2, 3}, {5, 6}, and {8}. In the second test case, there are two groups of consecutive integers: {10, 11, 12} and {15, 16}.","solution":"def segment_consecutive_groups(num_cases, cases): result = [] for i in range(num_cases): n, numbers = cases[i] groups = [] group = [] for j in range(n): if not group or numbers[j] == group[-1] + 1: group.append(numbers[j]) else: groups.append(group) group = [numbers[j]] if group: groups.append(group) result.append(groups) return result"},{"question":"Mallory is given a string S consisting of lowercase alphabets. She is allowed to perform the following operation any number of times: select any character in the string and swap it with its adjacent character. She wants to know the lexicographically smallest string she can obtain by performing the mentioned operation multiple times. -----Input----- The first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contains a string S. -----Output----- For each test case, print the lexicographically smallest string she can obtain. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 1000 -----Subtasks----- - Subtask 1 : 1 ≤ |S| ≤ 10 : 40 pts - Subtask 2 : 1 ≤ |S| ≤ 1000 : 60 pts -----Example----- Input 2 dcb abc Output bcd abc -----Explanation----- Test 1: By swapping \'d\' and \'c\', we get \\"cdb\\". Then by swapping \'c\' and \'b\', we get the smallest possible string \\"bcd\\". Test 2: The string is already in the lexicographically smallest order.","solution":"def lexicographically_smallest_string(T, strings): This function receives an integer T (number of test cases) and a list of strings. It returns a list of lexicographically smallest strings after performing operations. results = [] for s in strings: # The optimal way to get the lexicographically smallest string is to simply sort it. smallest_string = \'\'.join(sorted(s)) results.append(smallest_string) return results"},{"question":"Alice is organizing a book club and wants to allocate books to the members fairly. Each member should have the same number of books, and no one can be left with more or less. Alice has a set of books and a certain number of members she wants to distribute them to. Her goal is to minimize the number of books bought or discarded to ensure an equal distribution. She seeks your assistance to determine the minimum number of operations required to achieve this. Each operation can either add a book to the set or remove one from it. Alice wants to perform the minimum number of operations to ensure everyone has the same number of books. -----Input:----- - The first line consists of the number T representing the number of test cases. - Each test case consists of 2 lines: - The first line contains the number N representing the number of members. - The second line contains M representing the number of books Alice currently has. -----Output:----- For each test case, print the minimum number of operations required. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 0 leq M leq 10^9 -----Sample Input:----- 3 4 10 5 24 2 5 -----Sample Output:----- 2 1 1","solution":"def min_operations_to_distribute_books_fairly(T, test_cases): results = [] for t in range(T): N, M = test_cases[t] remainder = M % N results.append(min(remainder, N - remainder)) return results"},{"question":"Alice and Bob are playing a game with strings. Alice gives Bob a string `s` containing only lowercase alphabetic characters. Bob needs to check if `s` can form a palindrome after deleting at most one character. Return True if Bob can make the string a palindrome; otherwise, return False. A string is a palindrome if it reads the same forward and backward, ignoring characters that are deleted. Example 1: Input: s = \\"abca\\" Output: true Explanation: You could delete the character \'b\' to make \\"aca\\", which is a palindrome. Example 2: Input: s = \\"racecar\\" Output: true Explanation: \\"racecar\\" is already a palindrome, no need to delete any character. Example 3: Input: s = \\"abcd\\" Output: false Explanation: No single character removal can make \\"abcd\\" a palindrome. Constraints: 1 <= s.length <= 5000 The characters in s are lowercase English letters.","solution":"def can_form_palindrome_by_deleting_one_char(s): def is_palindrome(subs): return subs == subs[::-1] left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Try removing either the left or the right character and check return is_palindrome(s[left:right]) or is_palindrome(s[left + 1:right + 1]) left += 1 right -= 1 return True"},{"question":"You are given an array of n integers. You need to determine if you can split this array into two non-empty parts such that the sum of the elements in the first part is equal to the sum of the elements in the second part. The split point must be between the first and last element of the array (i.e., it cannot be the same as the beginning or the end of the list). -----Input----- The first line contains an integer n (2 le n le 10^5) — the length of the array. The second line contains n space-separated integers denoting the array. -----Output----- Print \\"YES\\" if you can split the array into two parts with equal sum, otherwise, print \\"NO\\". -----Constraints----- - The elements of the array are non-negative integers and do not exceed 10^4 in value. - The array will have at least two elements and at most 10^5 elements. -----Example Input----- 6 1 2 3 4 5 5 -----Example Output----- YES -----Explanation----- The array can be split as [1, 2, 3, 4] and [5, 5]. Both parts have the same sum of 10.","solution":"def can_split_array(arr): Determines if the array can be split into two non-empty parts with equal sum. Parameters: arr (list): A list of non-negative integers. Returns: str: \\"YES\\" if the array can be split into two parts with equal sum, otherwise \\"NO\\". total_sum = sum(arr) if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 current_sum = 0 for i in range(len(arr) - 1): current_sum += arr[i] if current_sum == target: return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of integers where every element appears twice except for one. Find that single one. Your function should return the integer that only appears once in the list. # Constraints: - You must implement a solution with a linear runtime complexity and use only constant extra space. - The list will always contain at least one element and at most `10^5` elements. # Examples ```python find_single_number([4,1,2,1,2]) # return 4 find_single_number([2,2,1]) # return 1 find_single_number([1,3,1,2,2]) # return 3 ``` # Hint: You could use XOR operation to accomplish this task as all the pairs will cancel out each other when XORed and only the single element will be left.","solution":"def find_single_number(nums): Returns the single number that does not appear twice in the list. single = 0 for num in nums: single ^= num return single"},{"question":"Write a function that calculates the minimum number of steps required to transform one string into another using a specified set of operations. * The function should take three parameters: `source` (the initial string), `target` (the desired string), and `operations` (a set containing the allowed operations, which can be \'insert\', \'delete\', and \'replace\'). * The function should return an integer representing the minimum number of steps required to transform the `source` string into the `target` string while only using the allowed operations. **Further points:** * An \'insert\' operation inserts a single character at any position. * A \'delete\' operation deletes a single character from any position. * A \'replace\' operation replaces a single character at any position with another character. * If any of these operations is not in the `operations` set, then that specific operation cannot be used in transforming the string. * The `source` and `target` strings will only contain lowercase English letters. * The solution should ensure computational efficiency handling reasonably long strings. # Example ```python source = \\"kitten\\" target = \\"sitting\\" operations = {\'insert\', \'replace\'} ``` The above should return `3` since the minimum number of steps would involve: - Replace \'k\' with \'s\' -> \\"sitten\\" - Insert \'i\' between \'s\' and \'t\' -> \\"sittien\\" - Replace \'e\' with \'g\' -> \\"sitting\\"","solution":"def min_steps_transform(source, target, operations): m, n = len(source), len(target) # Initialize a DP table with dimensions (m+1) x (n+1) dp = [[float(\'inf\')] * (n + 1) for _ in range(m + 1)] # Base cases dp[0][0] = 0 for i in range(1, m + 1): if \'delete\' in operations: dp[i][0] = i for j in range(1, n + 1): if \'insert\' in operations: dp[0][j] = j # Fill the rest of the DP table for i in range(1, m + 1): for j in range(1, n + 1): if source[i-1] == target[j-1]: # Characters match, no operation needed dp[i][j] = dp[i-1][j-1] else: if \'replace\' in operations: dp[i][j] = min(dp[i][j], dp[i-1][j-1] + 1) # Replace operation if \'delete\' in operations: dp[i][j] = min(dp[i][j], dp[i-1][j] + 1) # Delete operation if \'insert\' in operations: dp[i][j] = min(dp[i][j], dp[i][j-1] + 1) # Insert operation return dp[m][n]"},{"question":"Write a function `perimeter` that calculates the perimeter of a polygon given its vertices. The function should accept a list of tuples, where each tuple represents the (x, y) coordinates of a vertex, and return the perimeter of the polygon. The vertices are connected in the order they appear in the list, and the last vertex is connected to the first. For example, given the vertices [(0,0), (0,1), (1,1), (1,0)], the function should return 4.00. Use Euclidean distance for the calculations, and the result should have 2 digits precision.","solution":"import math def distance(p1, p2): return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) def perimeter(vertices): Calculate the perimeter of a polygon given its vertices. vertices: List of tuples, where each tuple represents (x, y) coordinates of a vertex. Returns: Perimeter of the polygon as a float rounded to 2 decimal places. n = len(vertices) total_perimeter = 0.0 for i in range(n): total_perimeter += distance(vertices[i], vertices[(i + 1) % n]) return round(total_perimeter, 2)"},{"question":"Write a function that takes a string as input and returns the longest substring without repeating characters. If there are multiple substrings with the same length, return the first one that appears. Assume the string consists of only ASCII characters and its length does not exceed 1000. For example: ``` Input: \\"abcabcbb\\" Output: \\"abc\\" Input: \\"bbbbb\\" Output: \\"b\\" Input: \\"pwwkew\\" Output: \\"wke\\" ``` Explanation: - For the first input, \\"abc\\" is the longest substring without repeating characters. - For the second input, each character \\"b\\" repeats, so the longest substring is \\"b\\". - For the third input, \\"wke\\" is the longest substring without repeating characters.","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters. start = 0 max_length = 0 max_substr = \'\' char_index_map = {} for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 else: if i - start + 1 > max_length: max_length = i - start + 1 max_substr = s[start:i + 1] char_index_map[char] = i return max_substr"},{"question":"Write a function `removeDuplicates`, `remove_duplicates`, or `RemoveDuplicates` that takes a list of integers and returns a new list with duplicates removed, preserving the original order of first occurrence of each element.","solution":"def remove_duplicates(lst): Removes duplicates from the input list while preserving the order of first occurrence of each element. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"You are given a list of N integers and two operations that can be performed on the list: Increment and Decrement. The Increment operation adds 1 to each element of the list, and the Decrement operation subtracts 1 from each element of the list. You are allowed to perform any number of these operations in any order. However, you cannot perform an operation that would result in a negative integer in the list. Your task is to determine the minimum number of operations required to make all elements of the list equal. -----Input----- The first line contains an integer N, the number of elements in the list. The second line contains N space-separated integers representing the elements of the list. -----Output----- Output a single integer, the minimum number of operations required to make all elements of the list equal. -----Constraints----- 1<=N<=1000 1<=list elements<=1000 -----Example----- Input: 3 4 6 8 Output: 4","solution":"def min_operations_to_make_equal(nums): Given a list of integers, returns the minimum number of operations required to make all elements of the list equal by either incrementing or decrementing the elements. Each operation can increase or decrease the element by 1. Args: nums (list): List of integers. Returns: int: Minimum number of operations to make all elements equal. # Find the median of the list nums.sort() median = nums[len(nums) // 2] # Calculate the total number of operations required to make all elements equal to the median total_operations = sum(abs(num - median) for num in nums) return total_operations"},{"question":"Given an integer array nums, move all non-zero elements to the beginning of the array while maintaining the relative order of the non-zero elements. Additionally, move all zero elements to the end of the array. Implement this operation in-place without making a copy of the array. Example 1: Input: nums = [0,1,0,3,12] Output: [1,3,12,0,0] Example 2: Input: nums = [0,0,1] Output: [1,0,0] Example 3: Input: nums = [2,0,1,3,0,4] Output: [2,1,3,4,0,0] Example 4: Input: nums = [0,0,0] Output: [0,0,0] Constraints: - 1 <= nums.length <= 10^4 - -2^31 <= nums[i] <= 2^31 - 1","solution":"def move_zeros(nums): Moves all non-zero elements to the beginning of the array while maintaining the relative order of the non-zero elements. Additionally, moves all zero elements to the end of the array. Operates in-place without making a copy of the array. insert_pos = 0 # Position to insert the next non-zero element # Move non-zero elements to the front for i in range(len(nums)): if nums[i] != 0: nums[insert_pos] = nums[i] insert_pos += 1 # Fill the rest with zeros for i in range(insert_pos, len(nums)): nums[i] = 0"},{"question":"Write a function called `rotate_string` that takes a string `s` and an integer `n`, and returns a new string with the characters rotated to the right by `n` positions. The rotation should be circular, meaning characters shifted off the end reappear at the beginning. ```python rotate_string(\\"abcdef\\", 2) # returns \\"efabcd\\" rotate_string(\\"abcdef\\", 8) # returns \\"efabcd\\" ```","solution":"def rotate_string(s, n): Returns the string s rotated to the right by n positions. if not s: return s n = n % len(s) # Normalize n to be within the length of s return s[-n:] + s[:-n]"},{"question":"Task You are given a string `s` consisting solely of letters \'a\' and \'b\'. You have to find the minimum number of operations required to transform the string into a palindrome. In one operation, you can change any \'a\' to \'b\' or \'b\' to \'a\'. A palindrome is a string that reads the same forward and backward. # Example For `s = \\"aab\\"`, the result should be `1`. Changing the character \'b\' to \'a\' will make the string \\"aaa\\", which is a palindrome. For `s = \\"abb\\"`, the result should be `1`. Changing the character \'a\' to \'b\' will make the string \\"bbb\\", which is a palindrome. # Input/Output - `[input]` string `s` The input string `s` is a non-empty string consisting of characters \'a\' and \'b\' only. - `[output]` an integer The minimum number of operations required to transform the string into a palindrome.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to transform the string into a palindrome. n = len(s) operations = 0 # Check each mismatched pair from start and end towards the center for i in range(n // 2): if s[i] != s[n - 1 - i]: operations += 1 return operations"},{"question":"A flight scheduling system needs to be developed where a flight is identified by its flight number, departure time, destination, and duration. Your task is to create a scheduling system that supports the following operations: 1. **Add Flight**: Add a flight to the system. 2. **Remove Flight**: Remove a flight from the system based on the flight number. 3. **Get Flight Details**: Retrieve the details of a flight based on the flight number. 4. **List Flights**: List all valid flights departing within a specified time range. Each flight is represented as a dictionary with the following keys: ``` flight_number : str, unique identifier of the flight departure_time : str, in the format \\"HH:MM\\" (24-hour) destination : str, destination of the flight duration : int, duration of the flight in minutes ``` Implement the following functions: 1. `add_flight(flights: List[Dict], flight: Dict) -> List[Dict]`: Add the provided flight to the list of flights. If the flight number already exists, update the existing flight\'s details. 2. `remove_flight(flights: List[Dict], flight_number: str) -> List[Dict]`: Remove the flight with the given flight number from the list of flights. Return the updated list. If the flight number does not exist, return the original list. 3. `get_flight_details(flights: List[Dict], flight_number: str) -> Union[Dict, None]`: Retrieve and return the details of the flight with the given flight number. If the flight number does not exist, return None. 4. `list_flights(flights: List[Dict], start_time: str, end_time: str) -> List[Dict]`: List all flights with departure times within the inclusive time range specified by start_time and end_time (both in the format \\"HH:MM\\"). Return the list of flights within the time range. **Examples:** Given the following flights list: ``` flights = [ {\\"flight_number\\": \\"A123\\", \\"departure_time\\": \\"10:30\\", \\"destination\\": \\"New York\\", \\"duration\\": 150}, {\\"flight_number\\": \\"B456\\", \\"departure_time\\": \\"12:00\\", \\"destination\\": \\"Los Angeles\\", \\"duration\\": 180}, {\\"flight_number\\": \\"C789\\", \\"departure_time\\": \\"15:00\\", \\"destination\\": \\"Chicago\\", \\"duration\\": 120}, ] ``` 1. Adding a flight: ``` add_flight(flights, {\\"flight_number\\": \\"D101\\", \\"departure_time\\": \\"09:00\\", \\"destination\\": \\"Miami\\", \\"duration\\": 180}) ``` The updated flights list should be: ``` [ {\\"flight_number\\": \\"A123\\", \\"departure_time\\": \\"10:30\\", \\"destination\\": \\"New York\\", \\"duration\\": 150}, {\\"flight_number\\": \\"B456\\", \\"departure_time\\": \\"12:00\\", \\"destination\\": \\"Los Angeles\\", \\"duration\\": 180}, {\\"flight_number\\": \\"C789\\", \\"departure_time\\": \\"15:00\\", \\"destination\\": \\"Chicago\\", \\"duration\\": 120}, {\\"flight_number\\": \\"D101\\", \\"departure_time\\": \\"09:00\\", \\"destination\\": \\"Miami\\", \\"duration\\": 180}, ] ``` 2. Removing a flight: ``` remove_flight(flights, \\"B456\\") ``` The updated flights list should be: ``` [ {\\"flight_number\\": \\"A123\\", \\"departure_time\\": \\"10:30\\", \\"destination\\": \\"New York\\", \\"duration\\": 150}, {\\"flight_number\\": \\"C789\\", \\"departure_time\\": \\"15:00\\", \\"destination\\": \\"Chicago\\", \\"duration\\": 120}, {\\"flight_number\\": \\"D101\\", \\"departure_time\\": \\"09:00\\", \\"destination\\": \\"Miami\\", \\"duration\\": 180}, ] ``` 3. Getting flight details: ``` get_flight_details(flights, \\"C789\\") ``` The output should be: ``` {\\"flight_number\\": \\"C789\\", \\"departure_time\\": \\"15:00\\", \\"destination\\": \\"Chicago\\", \\"duration\\": 120} ``` 4. Listing flights within a specified time range: ``` list_flights(flights, \\"09:00\\", \\"12:00\\") ``` The output should be: ``` [ {\\"flight_number\\": \\"D101\\", \\"departure_time\\": \\"09:00\\", \\"destination\\": \\"Miami\\", \\"duration\\": 180}, {\\"flight_number\\": \\"A123\\", \\"departure_time\\": \\"10:30\\", \\"destination\\": \\"New York\\", \\"duration\\": 150}, ] ``` Ensure that your implementations correctly handle the provided flight list and perform the required operations as expected.","solution":"from typing import List, Dict, Union def add_flight(flights: List[Dict], flight: Dict) -> List[Dict]: Adds or updates the provided flight in the list of flights. for i, existing_flight in enumerate(flights): if existing_flight[\\"flight_number\\"] == flight[\\"flight_number\\"]: flights[i] = flight return flights flights.append(flight) return flights def remove_flight(flights: List[Dict], flight_number: str) -> List[Dict]: Removes the flight with the given flight number from the list of flights. flights = [flight for flight in flights if flight[\\"flight_number\\"] != flight_number] return flights def get_flight_details(flights: List[Dict], flight_number: str) -> Union[Dict, None]: Retrieves and returns the details of the flight with the given flight number. for flight in flights: if flight[\\"flight_number\\"] == flight_number: return flight return None def list_flights(flights: List[Dict], start_time: str, end_time: str) -> List[Dict]: Lists all flights with departure times within the inclusive time range specified by start_time and end_time. def time_to_minutes(time_str): hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes start_minutes = time_to_minutes(start_time) end_minutes = time_to_minutes(end_time) filtered_flights = [ flight for flight in flights if start_minutes <= time_to_minutes(flight[\\"departure_time\\"]) <= end_minutes ] return filtered_flights"},{"question":"Given a string s that represents a column title as appear in an Excel sheet, return its corresponding column number. For example: A -> 1 B -> 2 C -> 3 ... Z -> 26 AA -> 27 AB -> 28 ... Example 1: Input: \\"A\\" Output: 1 Example 2: Input: \\"AB\\" Output: 28 Example 3: Input: \\"ZY\\" Output: 701 Constraints: - 1 <= s.length <= 7 - s consists only of uppercase English letters. - The input string s is guaranteed to be a valid column title in an Excel sheet.","solution":"def title_to_number(s): Converts a column title as appears in an Excel sheet to its corresponding column number. :param s: str, the column title (e.g., \\"AB\\") :return: int, the column number (e.g., 28) result = 0 for i in range(len(s)): result = result * 26 + (ord(s[i]) - ord(\'A\') + 1) return result"},{"question":"Write a function `convert_to_rle(string)` that takes a string as input and returns its Run-Length Encoded (RLE) representation. Run-Length Encoding (RLE) is a form of lossless data compression in which runs of data are stored as a single data value and count. For example, the string \\"aaaabbbccdaa\\" would be encoded as \\"4a3b2c1d2a\\". Constraints: - The input string consists of lowercase alphabetic characters only. Example: - Input: `\\"aaabbcaaa\\"` - Output: `\\"3a2b1c3a\\"` Your task is to: 1. Implement the `convert_to_rle(string)` function. 2. Ensure the function correctly converts various strings to their RLE representations. 3. Handle edge cases such as an empty string which should return an empty string. Good luck!","solution":"def convert_to_rle(string): Convert a string to its Run-Length Encoded (RLE) representation. Parameters: string (str): The input string consisting of lowercase alphabetic characters. Returns: str: The RLE representation of the input string. if not string: return \\"\\" rle = [] count = 1 for i in range(1, len(string)): if string[i] == string[i - 1]: count += 1 else: rle.append(f\\"{count}{string[i - 1]}\\") count = 1 rle.append(f\\"{count}{string[-1]}\\") return \'\'.join(rle)"},{"question":"Write a program that takes a string as input and compresses it using the following run-length encoding scheme: - Characters that repeat consecutively are represented by the character followed by the number of times it repeats. - If a character does not repeat consecutively, it is represented by the character followed by the number 1. For example: - The input `\\"aabccccaaa\\"` should be compressed to `\\"a2b1c4a3\\"`. - The input `\\"abc\\"` should be compressed to `\\"a1b1c1\\"`. - The input `\\"aabbcc\\"` should be compressed to `\\"a2b2c2\\"`.","solution":"def run_length_encoding(input_string): Compresses the input string using run-length encoding. Args: input_string (str): The string to be compressed Returns: str: The compressed string if not input_string: return \\"\\" encoded_string = [] count = 1 previous_char = input_string[0] for char in input_string[1:]: if char == previous_char: count += 1 else: encoded_string.append(f\\"{previous_char}{count}\\") previous_char = char count = 1 # Append the last character and count encoded_string.append(f\\"{previous_char}{count}\\") return \\"\\".join(encoded_string)"},{"question":"The festival organizers are preparing for a grand event and have a problem regarding seating arrangements. They have N guests and they want to seat them in a row. Each guest has a certain level of importance, represented by an integer. The importance levels of the guests are given in an array A of length N, where A[i] is the importance level of the i-th guest. The organizers want the seating arrangement to be in strictly increasing order of importance. However, they have a constraint: they can only swap adjacent guests to achieve the desired arrangement. You are to determine the minimum number of adjacent swaps required to transform the given array into a strictly increasing sequence. -----Input----- The first line of the input contains a single integer T, the number of test cases. T test cases follow. Each test case starts with a single integer N, the number of guests. The next line contains N space-separated integers A[1], A[2], ..., A[N] representing the importance levels of the guests. -----Output----- For each test case, output a single line containing the minimum number of adjacent swaps required to arrange the guests in strictly increasing order of their importance. -----Constraints----- 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 1 ≤ A[i] ≤ 1000 -----Example----- Input: 3 4 4 3 2 1 5 3 1 2 5 4 3 1 3 2 Output: 6 3 1 -----Explanation----- Case 1. Here N = 4, and the array A = [4, 3, 2, 1]. We need 6 swaps to sort the array in strictly increasing order ([4,3],[3,2],[2,1],[4,2],[3,1],[4,1]). Case 2. Here N = 5, and the array A = [3, 1, 2, 5, 4]. We need 3 swaps to sort the array ([3,1],[3,2],[5,4]). Case 3. Here N = 3, and the array A = [1, 3, 2]. We need only 1 swap to sort the array ([3,2]).","solution":"def minimum_swaps_to_sort(arr): Returns the minimum number of adjacent swaps required to sort the array in strictly increasing order. n = len(arr) swaps = 0 for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swaps += 1 return swaps def process_test_cases(test_cases): results = [] for case in test_cases: N, A = case results.append(minimum_swaps_to_sort(A)) return results"},{"question":"Find Missing Coin # Overview In a fictional video game, you are a character who collects coins. You are supposed to collect `N` coins, but due to a bug in the game, one coin is missing. Each coin is represented by a unique integer in the range 1 to `N`. The task is to find the missing coin. # Input/Output * Input: An integer `N` representing the number of coins you are supposed to collect and a list of integers representing the coins you have collected. * Output: The integer representing the missing coin. # Function Signature ```python def find_missing_coin(N: int, collected_coins: List[int]) -> int: pass ``` # Example ```python assert find_missing_coin(5, [2, 3, 1, 5]) == 4 assert find_missing_coin(7, [4, 3, 1, 7, 6, 2]) == 5 ``` # Constraints - `2 <= N <= 10^6` - The `collected_coins` list will have `N-1` integers, each between 1 and `N`, and all unique. # Explanation To solve this problem, consider the following steps: 1. Calculate the sum of the numbers from 1 to `N` using the formula `(N * (N + 1)) // 2`. 2. Calculate the sum of the numbers in the `collected_coins` list. 3. The missing coin is the difference between the expected sum (step 1) and the sum of collected coins (step 2). # Example Walkthrough For `N=5`, the coins should be `[1, 2, 3, 4, 5]`: - Collected coins: `[2, 3, 1, 5]` - Expected sum: `1 + 2 + 3 + 4 + 5 = 15` - Collected sum: `2 + 3 + 1 + 5 = 11` - Missing coin: `15 - 11 = 4` # Design 1. Implement the `find_missing_coin` function to take an integer `N` and a list `collected_coins` as inputs. 2. Calculate the sum of integers from 1 to `N`. 3. Calculate the sum of integers in `collected_coins`. 4. The missing coin can be found by subtracting the sum of `collected_coins` from the expected sum. Return this missing coin.","solution":"def find_missing_coin(N, collected_coins): Returns the missing coin number given the total number of coins N and the list of collected coins. expected_sum = (N * (N + 1)) // 2 collected_sum = sum(collected_coins) return expected_sum - collected_sum"},{"question":"-----Problem Statement----- Write a function to check if a given year is a leap year. A year is a leap year if it is evenly divisible by 4, except for years that are evenly divisible by 100. However, if a year is evenly divisible by 400, it is also considered a leap year. -----Input----- The only line contains a single integer representing the year. -----Output----- Output \\"Leap Year\\" if the given year is a leap year, otherwise output \\"Not a Leap Year\\". -----Constraints----- - 1 ≤ year ≤ 10^9 -----Sample Input----- 2020 -----Sample Output----- Leap Year -----Sample Input----- 1900 -----Sample Output----- Not a Leap Year","solution":"def is_leap_year(year): Returns whether the given year is a leap year or not. if (year % 400 == 0) or (year % 4 == 0 and year % 100 != 0): return \\"Leap Year\\" else: return \\"Not a Leap Year\\""},{"question":"Write a function `longest_substring` which takes an input string and returns the length of the longest substring without repeating characters. For example, `longest_substring(\\"abcabcbb\\")` should return `3` because the longest substring without repeating characters is \\"abc\\". Note that the input string will consist only of English letters and can be of any length.","solution":"def longest_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"Create a function that simulates a very basic version of a warehouse inventory system. You need to manage items being added to or removed from the warehouse. The inventory should allow adding new items, updating the quantity of existing items, and removing items when their quantity drops to zero or below. # \\"Warehouse\\" class details: **Attributes:** - `inventory` - A dictionary where keys are item names (strings) and values are item quantities (integers). **Methods:** - `__init__(self)` - Initialize an empty inventory. - `add_item(self, item_name: str, quantity: int)` - Add the given quantity of the item to the inventory. If the item already exists, increase the quantity. If it does not exist, add the item with the given quantity. - `remove_item(self, item_name: str, quantity: int)` - Deduct the given quantity of the item from the inventory. If the remaining quantity is less than or equal to zero, remove the item from the inventory. # Constraints: - All item names are strings of length between 1 and 20. - Quantities are integers between 1 and 1000. # Example Usage: ```python warehouse = Warehouse() warehouse.add_item(\\"apple\\", 10) warehouse.add_item(\\"banana\\", 5) warehouse.add_item(\\"apple\\", 5) print(warehouse.inventory) # Output: {\'apple\': 15, \'banana\': 5} warehouse.remove_item(\\"apple\\", 10) print(warehouse.inventory) # Output: {\'apple\': 5, \'banana\': 5} warehouse.remove_item(\\"apple\\", 5) print(warehouse.inventory) # Output: {\'banana\': 5} ``` # Notes: - If you try to remove more items than are currently in inventory for a given item, only remove the item and do not throw an error. - The inventory should never have negative quantities for any item.","solution":"class Warehouse: def __init__(self): self.inventory = {} def add_item(self, item_name: str, quantity: int): if item_name in self.inventory: self.inventory[item_name] += quantity else: self.inventory[item_name] = quantity def remove_item(self, item_name: str, quantity: int): if item_name in self.inventory: self.inventory[item_name] -= quantity if self.inventory[item_name] <= 0: del self.inventory[item_name]"},{"question":"In this problem, you need to create a function `array_diff(a, b)` that takes two lists `a` and `b`, and returns a new list `a` with all occurrences of elements from list `b` removed. The order of elements in the returned list should be the same as their order in the input list `a`. The function should handle lists of various lengths, including potentially empty lists. For example, if `a` is `[1, 2, 2, 3]` and `b` is `[2]`, the function should return `[1, 3]`.","solution":"def array_diff(a, b): Return a new list with all occurrences of elements from list b removed from list a. Parameters: a (list): The list from which to remove elements. b (list): The list of elements to remove from list a. Returns: list: A new list with elements from b removed from a. return [item for item in a if item not in b]"},{"question":"=====Function Descriptions===== concatenate The concatenate tool is used to join two or more arrays of the same shape along a specified axis. (a). Using concatenate along default axis (axis=0) import numpy array_1 = numpy.array([[1, 2], [3, 4]]) array_2 = numpy.array([[5, 6], [7, 8]]) print numpy.concatenate((array_1, array_2)) #Output [[1 2] [3 4] [5 6] [7 8]] (b). Using concatenate along axis 1 import numpy array_1 = numpy.array([[1, 2], [3, 4]]) array_2 = numpy.array([[5, 6], [7, 8]]) print numpy.concatenate((array_1, array_2), axis = 1) #Output [[1 2 5 6] [3 4 7 8]] =====Problem Statement===== You are given two integer arrays of size NxP and MxP (N & M are rows, and P is the number of columns). Concatenate these arrays along axis 0. =====Input Format===== The first line contains space-separated integers N, M, and P. The next N lines contain P space-separated integers (elements of the first array). The last M lines contain P space-separated integers (elements of the second array). =====Output Format===== Print the concatenated array.","solution":"import numpy as np def concatenate_arrays(N, M, P, array_1, array_2): Concatenates two given arrays of size NxP and MxP along axis 0. Parameters: N (int): Number of rows in the first array M (int): Number of rows in the second array P (int): Number of columns in both arrays array_1 (list of list of int): The first array array_2 (list of list of int): The second array Returns: numpy.ndarray: The concatenated array array_1_np = np.array(array_1) array_2_np = np.array(array_2) concatenated_array = np.concatenate((array_1_np, array_2_np), axis=0) return concatenated_array"},{"question":"Write a function that takes a list of integers and returns a new list containing the square of each number only if the square is even. For example: Input: [1, 2, 3, 4, 5] Output: [4, 16] Input: [6, 7, 8, 9, 10] Output: [36, 64, 100] Note: The input list will have at least one integer.","solution":"def even_squares(numbers): Returns a new list containing the square of each number from the input list only if the square is even. :param numbers: List of integers :return: List of integers with even squares return [x**2 for x in numbers if (x**2) % 2 == 0]"},{"question":"Tina is working on a text processing assignment and has encountered a challenge involving palindromes. She needs your help to write a function that verifies if a provided string can be rearranged into a palindrome. If the string can be rearranged into a palindrome, return \\"YES\\". Otherwise, return \\"NO\\". A palindrome is a sequence of characters that reads the same backward as forward, such as \\"madam\\" or \\"racecar\\". -----Input:----- First line of the input contains a single string s. -----Output:----- Output \\"YES\\" if the string can be rearranged into a palindrome, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ length of s ≤ 1000 - s contains only lowercase alphabetic characters. -----Sample Input:----- civic ivicc hello -----Sample Output:----- YES YES NO","solution":"def can_be_rearranged_to_palindrome(s): Returns \\"YES\\" if the string can be rearranged into a palindrome, otherwise \\"NO\\". from collections import Counter # Count the occurrences of each character in the string char_count = Counter(s) # Count the number of characters with odd occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged into a palindrome if it has at most one character with an odd count if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array of integers, your task is to find the largest product that can be formed by multiplying any three integers from the array. # Constraints: - The array will contain at least three integers. - The integers can be both positive and negative. # Input: - An array of integers, `arr`. # Output: - An integer representing the largest product possible from any three integers in the array. # Example: Input: ``` arr = [-10, -10, 5, 2] ``` Output: ``` 500 ``` Explanation: The largest product is formed by multiplying -10, -10, and 5 to get 500. # Note: Carefully consider edge cases such as the presence of negative numbers, as they can significantly affect the product outcomes.","solution":"def max_product_of_three(arr): Returns the largest product possible from any three integers in the array. arr.sort() return max(arr[0]*arr[1]*arr[-1], arr[-1]*arr[-2]*arr[-3])"},{"question":"A game development company has designed a 2D board-based puzzle game. The board is represented as a grid with N rows and M columns. Each cell in the board contains a non-negative integer. Players can only move right or down from any cell. The goal is to move from the top-left cell (1,1) to the bottom-right cell (N,M), while collecting the maximum possible sum of numbers along the path. The company wants you to determine the maximum sum that can be collected when moving from the top-left cell to the bottom-right cell following the rule described. -----Input----- - The first line of input contains two integers, N and M, representing the number of rows and columns in the board, respectively. - The next N lines each contain M non-negative integers, representing the values in the cells of the board. -----Output----- Print a single integer, the maximum sum that can be collected from the top-left cell to the bottom-right cell. -----Constraints----- - 1 leq N, M leq 1000 - 0 leq text{value in each cell} leq 10^4 -----Example Input----- 3 3 1 2 3 4 5 6 7 8 9 -----Example Output----- 29 -----Explanation----- The path that gives the maximum sum is: 1 rightarrow 2 rightarrow 3 rightarrow 6 rightarrow 9, thus the maximum sum is 1 + 2 + 3 + 6 + 9 = 21. Notice that moving (1 rightarrow 4 rightarrow 5 rightarrow 6 rightarrow 9 rightarrow 10 = 19 )","solution":"def max_path_sum(board): Given a 2D board represented by a list of lists, finds the maximum sum collected from the top-left cell to the bottom-right cell only by moving right or down. :param board: List[List[int]] - the board with non-negative integers :return: int - maximum sum collected n = len(board) m = len(board[0]) # Initialize a DP table with the same dimensions as the board dp = [[0] * m for _ in range(n)] # Initialise the starting cell dp[0][0] = board[0][0] # Fill in the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + board[0][j] # Fill in the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + board[i][0] # Fill in the rest of the DP table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + board[i][j] # The bottom-right cell contains the maximum sum return dp[n - 1][m - 1]"},{"question":"Create a function that takes a string containing only parentheses () and square brackets [] and returns true if the string is balanced, and false otherwise. A string is considered balanced if each opening parenthesis and bracket has a corresponding closing parenthesis or bracket, and they are properly nested. For example: - The string \\"([])[]\\" is balanced. - The string \\"([)]\\" is not balanced. You can assume the input string will contain only the characters \'(\', \')\', \'[\' and \']\'.","solution":"def is_balanced(s): Returns True if the string s is balanced (all opening parentheses and brackets have matching closing parentheses and brackets in proper order), and False otherwise. stack = [] matching_bracket = {\')\': \'(\', \']\': \'[\'} for char in s: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket: if stack == [] or stack.pop() != matching_bracket[char]: return False return stack == []"},{"question":"Arjun is addicted to social media. To moderate his own usage, he has decided to limit the number of people he follows. He starts by writing down a list of all the people he follows. Each person has a unique ID represented by a positive integer. Arjun has a maximum limit of K people he can follow at a time. To avoid exceeding this limit, whenever he follows a new person and the number of people he follows reaches K+1, he unfollows the person he has been following the longest. Arjun needs a program to help him manage this list. Given his initial list of people he follows and a series of follow/unfollow actions represented by the integer IDs of people, your task is to write a program that outputs the list of people Arjun follows after executing all the actions. -----Input:----- The first line of the input contains two integers M and K. M is the number of people Arjun initially follows, and K is the maximum number of people he can follow at a time. The second line contains M distinct positive integers representing the IDs of the people he follows initially, in the order he started following them. The third line contains a single integer N indicating the number of actions. This, in turn, is followed by N lines (lines 4 to N+3), each containing a single integer. A positive integer on line 3+i indicates that Arjun starts following a new person with that integer ID, while a negative integer -x indicates that Arjun unfollows the person with ID x. If Arjun tries to unfollow someone he is not currently following, nothing happens. -----Output:----- Output the list of people Arjun follows after executing all the actions. The list should be in the order he followed them, separated by spaces. If he follows no one, output an empty line. -----Constraints:----- - 1 leq M, K leq 100000. - 1 leq N leq 100000. - 1 leq ID leq 1000000 for follow actions. - -1 geq ID geq -1000000 for unfollow actions. -----Sample Input----- 5 3 1 2 3 4 5 6 6 7 -3 8 -2 9 -----Sample Output----- 6 7 8 9","solution":"from collections import deque def manage_follows(M, K, initial_follows, N, actions): follows = deque(initial_follows) for action in actions: if action > 0: if action not in follows: follows.append(action) if len(follows) > K: follows.popleft() elif action < 0: if -action in follows: follows.remove(-action) return list(follows)"},{"question":"A librarian in Digital City has encountered a problem. The library system stores call numbers of books as strings composed of digits and letters. However, the system often changes and they need to ensure the call numbers follow a specific pattern for cataloguing. The new rule for call numbers in the library system is that the letters should appear in sorted order while the digits follow in their original order. All letters in the call number are uppercase. Your job is to write a program that, given a list of call numbers, rearranges the letters in each call number such that they appear in alphabetically sorted order, while keeping the digits in their original positions. -----Input----- The first line of the input contains an integer N, denoting the number of call numbers. Then N lines follow, each containing one call number. -----Output----- For each call number in the input, output the modified call number where the letters are sorted alphabetically and digits remain in their original positions. -----Constraints----- - 1 ≤ N ≤ 100 - Each call number is non-empty and contains at most 100 characters - Each call number consists only of uppercase letters (\'A\'-\'Z\') and digits (\'0\'-\'9\') -----Example----- Input: 3 D3CBA CBA12345 X9Z81Y Output: A3BCD ABC12345 X9Y81Z -----Explanation----- For the first call number \\"D3CBA\\", the letters \\"D\\", \\"C\\", \\"B\\", \\"A\\" are sorted to \\"A\\", \\"B\\", \\"C\\", \\"D\\" and the digit \\"3\\" stays in its position, resulting in \\"A3BCD\\". For the second call number \\"CBA12345\\", the letters \\"C\\", \\"B\\", \\"A\\" are sorted to \\"A\\", \\"B\\", \\"C\\" and the digits \\"12345\\" stay in their positions, resulting in \\"ABC12345\\". For the third call number \\"X9Z81Y\\", the letters \\"X\\", \\"Z\\", \\"Y\\" are sorted to \\"X\\", \\"Y\\", \\"Z\\" in their alphabetical order while the digits \\"9\\", \\"8\\", \\"1\\" stay in their positions, resulting in \\"X9Y81Z\\".","solution":"def rearrange_call_numbers(call_numbers): Rearrange the letters in each call number such that they appear in alphabetically sorted order, while keeping the digits in their original positions. result = [] for call_number in call_numbers: letters = sorted([ch for ch in call_number if ch.isalpha()]) letter_index = 0 new_call_number = \\"\\" for character in call_number: if character.isalpha(): new_call_number += letters[letter_index] letter_index += 1 else: new_call_number += character result.append(new_call_number) return result"},{"question":"Your task is to develop an efficient inventory management system for a bookstore. The shop receives books under different categories, and each book is represented as a string in the format: \\"Title|Author|Category\\". Based on the category, the books need to be stored and retrieved effectively. Implement a class `BookInventory` with the following methods: 1. `add_book(book: str) -> None`: Adds a book to the inventory. 2. `remove_book(title: str) -> bool`: Removes a book by its title. Returns `True` if the book was successfully removed, otherwise `False`. 3. `get_books_by_category(category: str) -> List[str]`: Returns a list of book titles under the given category, sorted alphabetically. 4. `get_all_books() -> List[str]`: Returns a list of all books in the inventory, sorted by title. If a book with the same title but different author or category is added, it should replace the existing entry. Example usage: ```python inventory = BookInventory() inventory.add_book(\\"The Great Gatsby|F. Scott Fitzgerald|Classics\\") inventory.add_book(\\"To Kill a Mockingbird|Harper Lee|Classics\\") inventory.add_book(\\"The Catcher in the Rye|J.D. Salinger|Classics\\") inventory.add_book(\\"Steve Jobs|Walter Isaacson|Biography\\") inventory.remove_book(\\"To Kill a Mockingbird\\") print(inventory.get_books_by_category(\\"Classics\\")) # [\\"The Catcher in the Rye\\", \\"The Great Gatsby\\"] print(inventory.get_all_books()) # [\\"Steve Jobs\\", \\"The Catcher in the Rye\\", \\"The Great Gatsby\\"] ```","solution":"from typing import List, Dict class BookInventory: def __init__(self): self.inventory: Dict[str, Dict] = {} def add_book(self, book: str) -> None: title, author, category = book.split(\'|\') self.inventory[title] = {\'author\': author, \'category\': category} def remove_book(self, title: str) -> bool: if title in self.inventory: del self.inventory[title] return True return False def get_books_by_category(self, category: str) -> List[str]: books_in_category = [title for title, details in self.inventory.items() if details[\'category\'] == category] return sorted(books_in_category) def get_all_books(self) -> List[str]: return sorted(self.inventory.keys())"},{"question":"Basket Organizer ============= Imagine you are organizing fruits into baskets. The objective is to determine the number of complete baskets you can create from the fruits you have. A complete basket consists of exactly one banana, one apple, and one orange. You are given an array containing the types of fruits you have. You must return the number of complete baskets you can constitute. You must not change the input array. Example: ```python my_fruits = [\\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"orange\\", \\"apple\\", \\"banana\\"] number_of_baskets(my_fruits) == 2; // 2 complete baskets some_fruits = [\\"banana\\", \\"apple\\", \\"apple\\", \\"orange\\", \\"banana\\"] number_of_baskets(some_fruits) == 1; // 1 complete basket ```","solution":"def number_of_baskets(fruits): Returns the number of complete baskets that can be formed from the given fruits. A complete basket contains exactly one banana, one apple, and one orange. :param fruits: List of strings representing the fruits :return: Integer count of complete baskets banana_count = fruits.count(\'banana\') apple_count = fruits.count(\'apple\') orange_count = fruits.count(\'orange\') return min(banana_count, apple_count, orange_count)"},{"question":"Create a function `sum_of_squares(n)` that takes an integer `n` as input and returns the difference between the square of the sum and the sum of the squares of the first `n` natural numbers. For example, `sum_of_squares(10)` should return `2640`, because: - The sum of the first `10` natural numbers is `1 + 2 + ... + 10 = 55`. - The square of the sum is `55^2 = 3025`. - The sum of the squares of the first `10` natural numbers is `1^2 + 2^2 + ... + 10^2 = 385`. - The difference is `3025 - 385 = 2640`. More examples in the test cases. Good luck! Please also try:","solution":"def sum_of_squares(n): Returns the difference between the square of the sum and the sum of the squares of the first n natural numbers. sum_n = sum(range(1, n+1)) square_of_sum = sum_n ** 2 sum_of_squares = sum(i**2 for i in range(1, n+1)) return square_of_sum - sum_of_squares"},{"question":"Write a function called `backspace_compare` in Python, which takes two strings `s` and `t` as input and determines if the two strings are equal when both are typed into empty text editors. Here, `#` means a backspace character. For example: ``` - Input: s = \\"ab#c\\", t = \\"ad#c\\" Output: True Explanation: Both strings become \\"ac\\" after processing the backspaces. - Input: s = \\"ab\\", t = \\"c#d#\\" Output: True Explanation: Both strings become \\"\\" after processing the backspaces. - Input: s = \\"ac\\", t = \\"#a#c\\" Output: True Explanation: Both strings become \\"c\\" after processing the backspaces. - Input: s = \\"a#c\\", t = \\"b\\" Output: False Explanation: String s becomes \\"c\\" while string t becomes \\"b\\". ``` Your function should return a boolean value indicating whether the two processed strings are equal. When implementing this function, avoid creating the entire processed string in memory; instead, use an appropriate strategy to handle the backspace operations efficiently.","solution":"def backspace_compare(s, t): Compares two strings considering backspace characters \'#\' and determines if they are equal. def build(string): stack = [] for char in string: if char != \'#\': stack.append(char) elif stack: stack.pop() return \\"\\".join(stack) return build(s) == build(t)"},{"question":"You are tasked with creating a function that receives a string containing numbers and commas, representing a sequence of integers. Your function should identify the ranges within the sequence and return a summary of them. A range is defined as a sequence of three or more consecutive integers. For any range found, replace it with the starting and ending values separated by a hyphen. If there are no ranges, return the original sequence. # Input - A string containing integers and commas. # Output - A string where ranges of three or more consecutive numbers are replaced by their range format. # Example Input: ``` \\"1,2,3,5,6,7,8,10,12,13,14,15\\" ``` Output: ``` \\"1-3,5-8,10,12-15\\" ``` # Constraints - Each number and comma in the input string is separated by a single space. - The input string is guaranteed to be valid and sorted in ascending order. - There are no duplicate numbers. # Implementation Notes - Each identified range should consist of at least three consecutive numbers. - Non-range numbers should remain as individual numbers in the output. - Preserve the order of the numbers in the returned summary.","solution":"def summarize_ranges(number_sequence): Summarizes ranges in the given number sequence. Args: number_sequence (str): A string containing numbers and commas, representing a sequence of integers. Returns: str: A string where ranges of three or more consecutive numbers are replaced by their range format. numbers = [int(n) for n in number_sequence.split(\\",\\")] result = [] i = 0 while i < len(numbers): start = i while i + 1 < len(numbers) and numbers[i + 1] == numbers[i] + 1: i += 1 if i - start >= 2: result.append(f\\"{numbers[start]}-{numbers[i]}\\") else: result.extend(str(numbers[j]) for j in range(start, i + 1)) i += 1 return \\",\\".join(result)"},{"question":"You are given a list of strings representing mathematical expressions. Each string contains an equation formatted as _{variable} = {expression}_. Your task is to determine the values of all the variables based on the given equations. The expressions may include: - Positive integers - Other variables - Addition (\'+\') - Subtraction (\'-\') - Multiplication (\'*\') Each variable can only be defined once but can be used in multiple expressions. Assume that the input is always valid and there are no cyclic dependencies. Write a method `evaluate_equations` that receives an array of strings `equations` and returns a dictionary where keys are variable names and values are their computed integer values. Examples: ``` equations = [\\"a = 1\\", \\"b = 2\\", \\"c = a + b\\", \\"d = c * b\\"] Output: {\\"a\\": 1, \\"b\\": 2, \\"c\\": 3, \\"d\\": 6} equations = [\\"x = 5\\", \\"y = x - 3\\", \\"z = x + y\\"] Output: {\\"x\\": 5, \\"y\\": 2, \\"z\\": 7} ``` Additional constraints: - All operations and variable assignments are using integer arithmetic. - Assume that all variables are valid identifiers and there will be no variable name conflicts. - The input list may contain from 1 to 100 equations. - The length of each equation will not exceed 100 characters. ```python def evaluate_equations(equations): # To be implemented ```","solution":"def evaluate_equations(equations): import operator operations = { \'+\': operator.add, \'-\': operator.sub, \'*\': operator.mul } def evaluate(expression, variables): tokens = expression.split() result = int(tokens[0]) if tokens[0].isdigit() else variables[tokens[0]] i = 1 while i < len(tokens): op = operations[tokens[i]] next_token = tokens[i + 1] value = int(next_token) if next_token.isdigit() else variables[next_token] result = op(result, value) i += 2 return result variables = {} for equation in equations: var, expr = equation.split(\\" = \\") variables[var] = evaluate(expr, variables) return variables"},{"question":"A delivery company plans to deliver packages to multiple destinations. Each destination has a certain delivery time associated with it. The company wants to ensure that no two deliveries overlap, i.e., one delivery must be completed before the next one starts. You are given the delivery time windows for each destination, and your task is to determine the maximum number of deliveries that can be completed without any overlaps. Each delivery time window is represented as a start time and an end time, where the end time is strictly greater than the start time. Write a function that calculates the maximum number of non-overlapping deliveries. # Function Signature: ```python def maxNonOverlappingDeliveries(deliveries: List[List[int]]) -> int: ``` # Input: - `deliveries` (List[List[int]]): A list of delivery time windows where each time window is represented as a list of two integers `[start, end]` with `0 <= start < end <= 10^9`. # Output: - Returns an integer representing the maximum number of non-overlapping deliveries. # Example 1: ```python Input: deliveries = [[1, 3], [2, 4], [3, 5], [6, 7]] Output: 3 Explanation: The maximum number of non-overlapping deliveries are [1, 3], [3, 5], and [6, 7]. ``` # Example 2: ```python Input: deliveries = [[1, 2], [2, 3], [3, 4], [5, 6]] Output: 4 Explanation: All deliveries can be completed without overlapping. ``` # Constraints: - The number of deliveries `n` is such that `1 <= n <= 10^5`. - Each `start` and `end` time is such that `0 <= start < end <= 10^9`.","solution":"from typing import List def maxNonOverlappingDeliveries(deliveries: List[List[int]]) -> int: # Sort deliveries based on their end times deliveries.sort(key=lambda x: x[1]) max_deliveries = 0 last_end_time = 0 for start, end in deliveries: # If the start time of the current delivery is greater or equal to # the end time of the last selected delivery, include this delivery if start >= last_end_time: max_deliveries += 1 last_end_time = end return max_deliveries"},{"question":"You are tasked with implementing a function to format numbers in a given text such that any sequence of consecutive digits (0-9) in the text is formatted with commas as thousands separators. Non-digit characters must remain unchanged. For example, the number \\"1234567\\" should be formatted as \\"1,234,567\\". Similarly, \\"1000000\\" should become \\"1,000,000\\". # Function Signature ```python def format_numbers_with_commas(text: str) -> str: pass ``` # Input - text: A string containing any characters, including digits and other symbols (1 ≤ len(text) ≤ 10^5). # Output - Return a new string where sequences of digits have commas inserted as thousands separators. # Example 1: Input: ```python \\"Here is a number 12345 and another 6789\\" ``` Output: ```python \\"Here is a number 12,345 and another 6,789\\" ``` # Example 2: Input: ```python \\"My phone number is 1234567890 and my ID is 987654321\\" ``` Output: ```python \\"My phone number is 1,234,567,890 and my ID is 987,654,321\\" ``` # Example 3: Input: ```python \\"No digit here!\\" ``` Output: ```python \\"No digit here!\\" ``` # Constraints - The function should handle sequences of significant length efficiently. - Consider edge cases where the string contains numbers at the beginning or end, and when multiple unrelated digit sequences are interspersed with alphabetic or special characters.","solution":"import re def format_numbers_with_commas(text: str) -> str: Formats numbers in the input text by adding commas as thousands separators. Parameters: text (str): Input string containing numbers and other characters. Returns: str: New string with numbers formatted with commas. def format_with_commas(match): Helper function to format a matched number with commas. number = match.group(0) return \\"{:,}\\".format(int(number)) # Use regex to find all sequences of digits and apply the formatting function to each. return re.sub(r\'d+\', format_with_commas, text)"},{"question":"Write a function `chunk_array` that splits an array into chunks of a specified size and returns them as a list of arrays. E.g ```python chunk_array([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]] chunk_array([1, 2, 3, 4, 5, 6, 7, 8], 3) == [[1, 2, 3], [4, 5, 6], [7, 8]] chunk_array([1], 1) == [[1]] chunk_array([], 2) == [] chunk_array([1, 2, 3], 5) == [[1, 2, 3]] ``` If the array cannot be split evenly, the last chunk will contain the remaining elements.","solution":"def chunk_array(arr, size): Splits an array into chunks of a specified size and returns them as a list of arrays. Parameters: arr (list): The input array to be split. size (int): The size of each chunk. Returns: list: A list of arrays where each array is a chunk of the specified size. if size <= 0: raise ValueError(\\"Chunk size should be greater than 0\\") return [arr[i:i + size] for i in range(0, len(arr), size)]"},{"question":"You are given a list of integers representing the daily temperatures recorded over a week. Write a function `warmest_days(temperatures)` that returns a list where each element is the number of days you would have to wait after the current day to experience a warmer temperature. If there is no future day for which this is possible, put 0 in the respective position. **Input:** - `temperatures`: A list of integers representing the temperatures recorded each day. **Output:** - A list of integers where each element is the number of days until a warmer temperature, or 0 if no warmer temperature exists in the future. # Example ```python def warmest_days(temperatures): # your code here # Example case print(warmest_days([73, 74, 75, 71, 69, 72, 76, 73])) # Output: [1, 1, 4, 2, 1, 1, 0, 0] ```","solution":"def warmest_days(temperatures): Returns a list of integers where each element is the number of days until a warmer temperature, or 0 if no warmer temperature exists in the future. n = len(temperatures) result = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: index = stack.pop() result[index] = i - index stack.append(i) return result"},{"question":"# Shopping Cart Discounts Task Write a function `apply_discounts(cart, discounts)` that takes a shopping cart and a list of discounts, and returns the total price of the cart after applying the discounts. Input 1. `cart`: A list of tuples where each tuple contains the name of the product, the quantity, and the price per unit. For example: ``` cart = [ (\\"apple\\", 3, 1.0), (\\"banana\\", 2, 0.5), (\\"milk\\", 1, 1.5) ] ``` 2. `discounts`: A dictionary where the keys are product names and the values are functions that take the quantity and price and return the discounted price. For example: ``` discounts = { \\"apple\\": lambda qty, price: qty * price * 0.9, # 10% discount on apples \\"milk\\": lambda qty, price: (qty // 2) * 1.5 # Buy one get one free on milk } ``` The discount functions should be applied strictly as provided. Output The function should return the total price of the cart after applying the discounts. The price should be rounded to 2 decimal places. Example ```python cart = [ (\\"apple\\", 3, 1.0), (\\"banana\\", 2, 0.5), (\\"milk\\", 2, 1.5) ] discounts = { \\"apple\\": lambda qty, price: qty * price * 0.9, \\"milk\\": lambda qty, price: (qty // 2) * 1.5 } assert apply_discounts(cart, discounts) == 5.70 ``` In this example: - Apples have a 10% discount: 3 * 1.0 * 0.9 = 2.7 - Bananas have no discount: 2 * 0.5 = 1.0 - Milk is buy one get one free: (2 // 2) * 1.5 = 1.5 Therefore, the total is 2.7 + 1.0 + 1.5 = 5.20 Notes - If a product is not listed in discounts, its price remains unchanged. - Be sure to handle edge cases, such as an empty cart or products with a quantity of zero.","solution":"def apply_discounts(cart, discounts): Applies discounts to the shopping cart and returns the total price. Parameters: cart (list of tuples): A list where each tuple contains the product name, quantity, and price per unit. discounts (dict): A dictionary with product names as keys and discount functions as values. Returns: float: Total price of the cart after applying discounts, rounded to 2 decimal places. total_price = 0 for item in cart: product, quantity, price_per_unit = item if product in discounts: discounted_price = discounts[product](quantity, price_per_unit) else: discounted_price = quantity * price_per_unit total_price += discounted_price return round(total_price, 2)"},{"question":"\\"Time is the wisest counselor of all.\\" - Pericles You are given an array A_1, A_2, ldots, A_N representing the heights of students in a line, and an integer K. The students want to form groups such that the maximum height discrepancy within each group is minimized. - For each subarray S = [A_l, A_{l+1}, ldots, A_r] (1 le l le r le N): - Let\'s define the height discrepancy of S as the difference between the maximum and minimum heights of the students in S. - The subarray S is well-balanced if its height discrepancy is at most K. Find the number of well-balanced subarrays of A. Two subarrays A_l, A_{l+1}, ldots, A_r and A_p, A_{p+1}, ldots, A_q are different if l neq p or r neq q. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and K. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. -----Output----- For each test case, print a single line containing one integer - the number of well-balanced subarrays. -----Constraints----- - 1 le T le 5 - 1 le N le 2,000 - 0 le K le 2,000 - 1 le A_i le 2,000 for each valid i -----Subtasks----- Subtask #1 (20 points): 1 le N le 200 Subtask #2 (80 points): original constraints -----Example Input----- 1 4 1 3 1 4 2 -----Example Output----- 4 -----Explanation----- Example case 1: There are ten subarrays of A: [3], [1], [4], [2], [3, 1], [1, 4], [4, 2], [3, 1, 4], [1, 4, 2], [3, 1, 4, 2]. Among these, the well-balanced subarrays with height discrepancy le 1 are [3], [1], [4], [2]. Each of these subarrays has a height discrepancy of 0, which is ≤ 1.","solution":"def count_well_balanced_subarrays(test_cases): results = [] for case in test_cases: N, K, A = case[\'N\'], case[\'K\'], case[\'A\'] count = 0 for start in range(N): min_height = A[start] max_height = A[start] for end in range(start, N): min_height = min(min_height, A[end]) max_height = max(max_height, A[end]) if max_height - min_height <= K: count += 1 else: break results.append(count) return results # Input parsing function def parse_input(input_text): lines = input_text.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, K = map(int, lines[index].split()) A = list(map(int, lines[index + 1].split())) test_cases.append({\'N\': N, \'K\': K, \'A\': A}) index += 2 return test_cases # Example usage input_text = 1 4 1 3 1 4 2 test_cases = parse_input(input_text) results = count_well_balanced_subarrays(test_cases) for result in results: print(result)"},{"question":"Write a function that performs matrix transposition without using any built-in or external libraries. The input to the function will be a 2D list representing a matrix. Transpose the given matrix and return the resulting matrix. Transposition involves flipping rows and columns, so each element at position (i, j) in the original matrix should be placed at position (j, i) in the transposed matrix. You need to implement the function to work efficiently for any rectangular matrix. For example: ```python matrix = [ [1, 2, 3], [4, 5, 6] ] ``` The transposed matrix should be: ```python [ [1, 4], [2, 5], [3, 6] ] ```","solution":"def transpose(matrix): Returns the transpose of the given 2D matrix. :param matrix: List of lists where each inner list represents a row of the matrix. :return: Transposed matrix as a list of lists. # Ensure the input matrix is not empty if not matrix or not matrix[0]: return [] # Transpose the matrix transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))] return transposed"},{"question":"# Word Ladders A **word ladder** is a sequence of words where each word varies from the previous word by exactly one letter. For example, the sequence `[\\"hit\\", \\"hot\\", \\"dot\\", \\"dog\\", \\"cog\\"]` is a word ladder from \'hit\' to \'cog\'. You are given two words `start` and `end`. The goal is to transform `start` into `end` using exactly one letter at a time, with each transformed word being a valid intermediate word in a given dictionary of words. The challenge is to find the shortest word ladder that transforms `start` into `end`. If it’s not possible to transform `start` to `end` given the dictionary, return `[]`. The length of each word is the same. # Specification Implement the function `find_ladder(start: str, end: str, word_dict: set) -> List[str]` that returns the shortest word ladder from `start` to `end`. If no such ladder exists, return an empty list `[]`. # Input Examples ``` find_ladder(\'hit\', \'cog\', {\'hot\', \'dot\', \'dog\', \'lot\', \'log\', \'cog\'}) # Example 1 ``` ``` find_ladder(\'hit\', \'cog\', {\'hot\', \'dot\', \'dog\', \'lot\', \'log\'}) # Example 2 ``` # Output Examples ``` find_ladder(\'hit\', \'cog\', {\'hot\', \'dot\', \'dog\', \'lot\', \'log\', \'cog\'}) Output: [\\"hit\\", \\"hot\\", \\"dot\\", \\"dog\\", \\"cog\\"] # Example 1 ``` ``` find_ladder(\'hit\', \'cog\', {\'hot\', \'dot\', \'dog\', \'lot\', \'log\'}) Output: [] ``` # Function Constraints 1. All words have the same length. 2. All words contain only lowercase letters in English. 3. The length of `start`, `end`, and words in `word_dict` are all between 1 and 5. 4. All words in the word_dict are unique. # Hints 1. Consider using a graph-based approach, such as Breadth-First Search (BFS), to explore the shortest path. 2. Ensure each intermediate word is part of the given `word_dict`. 3. Remember to check both directions (start to end and end to start) for optimizing the search.","solution":"from collections import deque from typing import List, Set def find_ladder(start: str, end: str, word_dict: Set[str]) -> List[str]: if start == end: return [start] if end not in word_dict: return [] word_dict.add(end) queue = deque([[start]]) visited = set([start]) while queue: current_path = queue.popleft() current_word = current_path[-1] if current_word == end: return current_path for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in word_dict and next_word not in visited: visited.add(next_word) new_path = current_path + [next_word] queue.append(new_path) return []"},{"question":"Write a function `invert_dictionary` that takes a dictionary as an input where keys are strings and values are lists of strings. The function should return a new dictionary where each value (from the original lists) is a key in the new dictionary, and the associated value is a list of keys from the original dictionary that contained that string. For example, given the dictionary: ```python original_dict = { \\"fruit\\": [\\"apple\\", \\"banana\\"], \\"vegetable\\": [\\"carrot\\", \\"apple\\"], \\"dairy\\": [\\"milk\\", \\"cheese\\"] } ``` The function should return: ```python { \\"apple\\": [\\"fruit\\", \\"vegetable\\"], \\"banana\\": [\\"fruit\\"], \\"carrot\\": [\\"vegetable\\"], \\"milk\\": [\\"dairy\\"], \\"cheese\\": [\\"dairy\\"] } ``` Make sure your solution is efficient and handles edge cases, such as an empty dictionary or dictionaries where some values might be empty lists.","solution":"def invert_dictionary(original_dict): Inverts the given dictionary. Keys from the original dictionary\'s value lists become keys in the new dictionary, and the associated value is a list of keys from the original dictionary. Args: original_dict (dict): A dictionary with string keys and lists of strings as values. Returns: dict: A new dictionary where each item from the value lists in the original dictionary is a key, and the associated value is a list of keys from the original dictionary that contained that item. inverted_dict = {} for key, values in original_dict.items(): for value in values: if value not in inverted_dict: inverted_dict[value] = [] inverted_dict[value].append(key) return inverted_dict"},{"question":"Given a string containing only lowercase English letters, write a function to partition the string into as many parts as possible so that each letter appears in at most one part. Return a list of integers representing the size of these parts. For example, given the input \\"ababcbacadefegdehijhklij\\", the function should return [9, 7, 8]. This is because the first part \\"ababcbaca\\" contains letters \'a\', \'b\' and \'c\' which are not present in the other parts, the second part \\"defegde\\" contains \'d\', \'e\', \'f\' which are not present in the other parts, and the third part \\"hijhklij\\" contains \'h\', \'i\', \'j\', \'k\', \'l\' which are not present in the other parts. Function Signature: ```python def partition_labels(s: str) -> List[int]: pass ```","solution":"from typing import List def partition_labels(s: str) -> List[int]: Partition the string into as many parts as possible so that each letter appears in at most one part. Return a list of integers representing the size of these parts. last_occurrence = {char: idx for idx, char in enumerate(s)} partitions = [] start = 0 end = 0 for idx, char in enumerate(s): end = max(end, last_occurrence[char]) if idx == end: partitions.append(idx - start + 1) start = idx + 1 return partitions"},{"question":"You are given a string `s` and a pattern `p`. The pattern `p` could contain special characters: - `\'?\'` which matches any single character. - `\'*\'` which matches any sequence of characters (including an empty sequence). The task is to create a function `is_match(s: str, p: str) -> bool` which returns `True` if `s` matches the pattern `p`, otherwise returns `False`. # Example: 1. `is_match(\\"aa\\", \\"a\\") -> False` 2. `is_match(\\"aa\\", \\"*\\") -> True` 3. `is_match(\\"cb\\", \\"?a\\") -> False` 4. `is_match(\\"adceb\\", \\"*a*b\\") -> True` 5. `is_match(\\"acdcb\\", \\"a*c?b\\") -> False` # Note: - `s` could be an empty string or contain only lowercase letters. - `p` could be an empty string or contain lowercase letters, `?`, and `*`. # Constraints: - The length of `s` will be in the range `[0, 1000]`. - The length of `p` will be in the range `[0, 1000]`.","solution":"def is_match(s: str, p: str) -> bool: Returns True if string s matches the pattern p where \'?\' matches any single character and \'*\' matches any sequence of characters (including an empty sequence). m, n = len(s), len(p) # DP table dp = [[False] * (n + 1) for _ in range(m + 1)] # Empty string and empty pattern match dp[0][0] = True # Only \'*\' can match an empty string for j in range(1, n + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 1] # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if p[j - 1] == \'*\': dp[i][j] = dp[i][j - 1] or dp[i - 1][j] elif p[j - 1] == \'?\' or p[j - 1] == s[i - 1]: dp[i][j] = dp[i - 1][j - 1] return dp[m][n]"},{"question":"Write a function that takes a list of integers and returns a list where each integer is duplicated the number of times equal to its value. If the integer is non-positive, it should not appear in the output list. Examples ``` [1, 2, 3] ==> [1, 2, 2, 3, 3, 3] [0, -1, 4] ==> [4, 4, 4, 4] [5, 1, 0, 2] ==> [5, 5, 5, 5, 5, 1, 2, 2] ``` Constraints - The input list will only contain integers. - The integers in the input list will range from -100 to 100. - The length of the input list will not exceed 100 elements.","solution":"def duplicate_by_value(lst): Returns a list where each integer is duplicated the number of times equal to its value. Non-positive integers will not appear in the output list. :param lst: List of integers :return: List of integers duplicated by their value result = [] for num in lst: if num > 0: result.extend([num] * num) return result"},{"question":"Complete the function that checks if a given integer `n` is a Carmichael number. A Carmichael number is a composite number `n` that satisfies Fermat\'s little theorem for every integer `a` that is coprime to `n`, that is: ``` pow(a, n-1, n) == 1 ``` for all integers `a` with `1 < a < n` and `gcd(a, n) == 0`. A number `n` is composite if it has more than two distinct positive divisors, i.e., it can be factored into smaller integers other than `1` and itself. You are provided a helper function `is_prime(n)` which returns `True` if `n` is a prime number, otherwise `False`. # Your Task: Write a function `is_carmichael(n)` that returns `True` if the given number `n` is a Carmichael number, and `False` otherwise. # Examples: ``` is_carmichael(561) ==> True is_carmichael(1105) ==> True is_carmichael(1729) ==> True is_carmichael(15) ==> False is_carmichael(17) ==> False 561: - 561 is composite - 2^560 % 561 == 1 - 3^560 % 561 == 1 - 4^560 % 561 == 1 - (for all a coprime to 561 and 1 < a < 561) So, 561 is a Carmichael number. ```","solution":"import math def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def gcd(a, b): while b: a, b = b, a % b return a def is_carmichael(n): if is_prime(n) or n < 2: return False for a in range(2, n): if gcd(a, n) == 1: if pow(a, n-1, n) != 1: return False return True"},{"question":"The librarian at a local library needs your help organizing books in a specific pattern. Each book is assigned a unique number from 1 to N. The librarian wants to organize the books such that every shelf follows a specific order. Help the librarian code this organization pattern. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single integer N, the number of books. -----Output:----- For each test case, output the sequence of book numbers on each shelf. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 -----Sample Input:----- 3 2 3 4 -----Sample Output:----- [1] [1, 2] [1, 2, 1] [1, 2, 3] [1, 2, 3, 1] [1, 2, 3, 2] [1, 2, 3, 4] -----EXPLANATION:----- No need, as the output pattern should be deciphered from the examples provided.","solution":"def organize_books(t, cases): result = [] for n in cases: shelf = [] for i in range(1, n + 1): if i == n: shelf.append(list(range(1, n + 1))) else: shelf.append(list(range(1, i + 1))) result.append(shelf) return result"},{"question":"Coder\'s Guild is planning a new version release of their software which computes the strength of passwords. The software rates the strength of a password based on several rules: 1. Passwords must be at least 8 characters long. 2. Passwords must contain at least one uppercase letter. 3. Passwords must contain at least one lowercase letter. 4. Passwords must contain at least one digit. 5. Passwords must contain at least one special character from the set { !, @, #, , %, ^, &, *, (, ) }. Write a program to check the strength of a given password based on the above rules. If the password meets all the requirements, it is \\"Strong\\". If it does not meet even one of the above requirements, it is \\"Weak\\". -----Input:----- First line will contain a positive integer T, the number of test cases. Next T lines follow, each containing a string P, the password to be checked. -----Output:----- For each password P, print \\"Strong\\" without quotes if the password meets all the criteria, otherwise print \\"Weak\\" without quotes. -----Constraints----- - 1 leq T leq 10 - 1 leq length(P) leq 100 -----Sample Input:----- 3 Coding@123 helloworld! StrongPass1@ Weak -----Sample Output:----- Strong Weak Strong Weak -----Explanation:----- For test case 1: \\"Coding@123\\" meets all criteria. For test case 2: \\"helloworld!\\" does not contain any uppercase letters or digits. For test case 3: \\"StrongPass1@\\" meets all criteria. For test case 4: \\"Weak\\" does not contain any digits or special characters and is less than 8 characters long.","solution":"def check_password_strength(t, passwords): special_characters = set(\\"!@#%^&*()\\") results = [] for password in passwords: if len(password) < 8: results.append(\\"Weak\\") continue has_upper = any(c.isupper() for c in password) has_lower = any(c.islower() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in special_characters for c in password) if has_upper and has_lower and has_digit and has_special: results.append(\\"Strong\\") else: results.append(\\"Weak\\") return results"},{"question":"Create a function `next_palindrome` that takes an integer `n` as an argument and returns the smallest palindrome number that is greater than `n`. A palindrome number is a number that reads the same forward and backward. For example: - If the input is `123`, the next palindrome is `131`. - If the input is `808`, the next palindrome is `818`. - If the input is `999`, the next palindrome is `1001`. Consider optimizing the performance for very large numbers.","solution":"def next_palindrome(n): Returns the smallest palindrome number that is greater than n. def is_palindrome(num): return str(num) == str(num)[::-1] next_num = n + 1 while not is_palindrome(next_num): next_num += 1 return next_num"},{"question":"Write a function that takes a list of strings and a list of queries as input. Each query is a string, and for each query, you need to determine how many strings in the list of strings have the query string as a substring. The function should return a list of integers, where each integer corresponds to the count of one query. Example: Input: ``` strings = [\\"apple\\", \\"appetizer\\", \\"grape\\", \\"pineapple\\"] queries = [\\"app\\", \\"pine\\", \\"berry\\"] ``` Output: ``` [3, 1, 0] ``` Explanation: - The substring \\"app\\" appears in \\"apple\\", \\"appetizer\\", and \\"pineapple\\", so the count is 3. - The substring \\"pine\\" appears in \\"pineapple\\", so the count is 1. - The substring \\"berry\\" does not appear in any of the strings, so the count is 0. Input constraints: ``` 1 <= len(strings) <= 10^4 1 <= len(queries) <= 10^3 1 <= len(strings[i]) <= 100 1 <= len(queries[i]) <= 100 ``` Your task is to implement the function `count_substrings(strings: list, queries: list) -> list` that returns the required list of counts.","solution":"def count_substrings(strings, queries): Counts how many strings in the list of strings have the query string as a substring. Args: strings : list of str - The list of strings to search within. queries : list of str - The list of queries to search for. Returns: list of int - A list of counts for each query. result = [] for query in queries: count = sum(query in string for string in strings) result.append(count) return result"},{"question":"A village has n houses and m roads. Each road connects two houses and has a certain length. The villagers want to build a new road network such that there is exactly one path between any two houses (i.e., the graph of houses and new roads should be a tree, which is a connected graph without cycles), and the total length of the new roads should be minimal. However, some pairs of houses are too far apart to connect directly. You are given a list of roads that can be built, where each road is represented by three integers: the two houses it connects and its length. Your task is to find the minimum total length of a new road network that satisfies the constraints, or determine if it is impossible to form such a network. -----Input----- The first line contains two integers n and m, the number of houses and available roads, respectively (2 leq n leq 100,000, 1 leq m leq 200,000). Each of the next m lines contains three integers u, v and w (1 leq u, v leq n, 1 leq w leq 10^9), which means there is an available road between houses u and v with length w. It\'s guaranteed that no road connects a house to itself. -----Output----- Print the minimum total length of the new road network. If it is impossible to connect all houses using the given roads, print -1. -----Examples----- Input 4 5 1 2 1 1 3 4 2 3 2 3 4 3 4 1 5 Output 6 Input 3 2 1 2 4 2 3 5 Output 9 Input 3 1 1 2 4 Output -1 -----Note----- In the first example, the minimum total length of roads is 6. One possible way to connect the houses is to use roads (1, 2, 1), (2, 3, 2), and (3, 4, 3). In the second example, a minimal new road network can have a total length of 9, using roads (1, 2, 4) and (2, 3, 5). In the third example, it is impossible to connect all three houses since there is no road available to directly or indirectly connect house 3 to house 1.","solution":"def find_minimum_road_length(n, m, roads): Returns the minimum total length of new road network that connects all houses, or -1 if it is impossible to do so. parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY # Sort roads based on their length roads.sort(key=lambda x: x[2]) total_length = 0 edges_used = 0 for u, v, w in roads: if find(u) != find(v): union(u, v) total_length += w edges_used += 1 # If we\'ve used n - 1 edges, we have enough to form a tree if edges_used == n - 1: break # Check if we used exactly n - 1 edges (forming a tree) if edges_used == n - 1: return total_length else: return -1"},{"question":"Write a function that accepts a positive integer and returns the largest product of any adjacent digits in the number. For instance, in the number `731674765`, the largest product of adjacent digits is `7 * 6 = 42`. If the number has only one digit, return `0` as there are no adjacent digits to form a product. **Function signature:** ```python def largest_adjacent_product(n: int) -> int: pass ``` **Input:** - `n` (1 <= `n` <= 10^18): A positive integer. **Output:** - An integer representing the largest product of any two adjacent digits. **Examples:** ```python largest_adjacent_product(731674765) # Output: 42 (7 * 6) largest_adjacent_product(12345) # Output: 20 (4 * 5) largest_adjacent_product(5) # Output: 0 ``` **Note:** - The function needs to handle large integers efficiently. - Pay special attention to edge cases like a single digit input and numbers with repeating digits.","solution":"def largest_adjacent_product(n: int) -> int: Returns the largest product of any two adjacent digits in the number n. str_n = str(n) if len(str_n) < 2: return 0 max_product = 0 for i in range(len(str_n) - 1): product = int(str_n[i]) * int(str_n[i + 1]) if product > max_product: max_product = product return max_product"},{"question":"=====Problem Statement===== You need to write a program that generates a spiral matrix of size N x N filled with integers from 1 to N^2 in a clockwise spiral order. The spirally filled matrix should look like this for different values of N: #size 3 1 2 3 8 9 4 7 6 5 #size 4 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 #size 5 1 2 3 4 5 16 17 18 19 6 15 24 25 20 7 14 23 22 21 8 13 12 11 10 9 =====Input Format===== Only one line of input containing N, the size of the matrix. =====Constraints===== 0 < N <= 20 =====Output Format===== Print the N x N spiral matrix where each entry is right-aligned within a 3-character-wide column.","solution":"def generate_spiral_matrix(n): Generates an N x N spiral matrix filled with integers from 1 to N^2 in a clockwise spiral order. Args: n (int): Size of the matrix Returns: list: N x N spiral matrix matrix = [[0]*n for _ in range(n)] num = 1 left, right = 0, n-1 top, bottom = 0, n-1 while left <= right and top <= bottom: for j in range(left, right + 1): matrix[top][j] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 if top <= bottom: for j in range(right, left - 1, -1): matrix[bottom][j] = num num += 1 bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix def print_spiral_matrix(matrix): Prints the given spiral matrix with each entry right-aligned within a 3-character-wide column. Args: matrix (list): N x N spiral matrix for row in matrix: print(\\"\\".join(f\\"{val:3}\\" for val in row))"},{"question":"Given an integer array `arr[]` of length `n`, your task is to find the maximal product of its contiguous subarray. Return the maximum product that can be obtained from any of the subarrays of `arr[]`. -----Input:----- - First line contains `T`, the number of test cases. - For each test case: - The first line contains a single integer `n`, the length of the array. - The second line contains `n` space-separated integers denoting the elements of the array `arr[]`. -----Output:----- For each test case, output the maximum product of any contiguous subarray of the given array. -----Constraints----- - 1 leq T leq 10^5 - 1 leq n leq 10^4 - -10 leq arr[i] leq 10 -----Sample Input:----- 2 4 2 3 -2 4 3 -2 0 -1 -----Sample Output:----- 6 0","solution":"def max_product_subarray(arr): Returns the maximum product of any contiguous subarray of arr. if not arr: return 0 max_prod = min_prod = result = arr[0] for num in arr[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) return result def max_products_of_subarray(test_cases): results = [] for arr in test_cases: results.append(max_product_subarray(arr)) return results"},{"question":"-----Problem Statement----- Write a program that accepts a list of integers and outputs the sum of the elements. -----Input----- The first line contains a single integer, n, the number of integers in the list. The second line contains n space-separated integers. -----Output----- Output the sum of the integers in the list on a single line. -----Constraints----- - 1 ≤ n ≤ 100 - -1000 ≤ each integer ≤ 1000 -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 15","solution":"def sum_of_list(n, numbers): Returns the sum of the list of integers. n: number of integers in the list numbers: list of integers return sum(numbers) # Example usage: # n = 5 # numbers = [1, 2, 3, 4, 5] # print(sum_of_list(n, numbers)) # Output: 15"},{"question":"Peter has recently started working as a courier. He has to deliver packages in a city that is laid out as a perfect grid of size n times m. Peter starts at the top-left corner of the grid (0, 0) and must deliver a package to the bottom-right corner of the grid (n-1, m-1). The grid is represented by a matrix G of size n times m, where each cell G[i][j] contains an integer value representing the height of the cell. Peter can only move to the right or down at each step. The difficulty of Peter\'s journey is determined by the path he takes. The difficulty of a path is defined as the maximum absolute difference in the height between two consecutive cells in that path. Peter wants to find the easiest path — that is, the path with the minimal maximum absolute difference between the height of consecutive cells. Help Peter determine the difficulty of the easiest path from the top-left corner to the bottom-right corner of the grid. -----Input----- The input consists of multiple test cases. The first line of input contains a single integer t (1 le t le 10^3) — the number of test cases. For each test case: - The first line contains two integers n and m (2 le n, m le 100) — the number of rows and columns in the grid. - Then n lines follow, each containing m integers G[i][j] (1 le G[i][j] le 10^4) — the height values of the cells in the grid. The sum of all cells in all test cases will not exceed 1,000,000. -----Output----- For each test case, print one integer: the difficulty of the easiest path from the top-left corner to the bottom-right corner of the grid. -----Example----- Input 2 3 3 1 2 2 3 8 2 5 3 5 2 2 1 1 1 1 Output 2 0","solution":"from collections import deque def valid_path(G, mid, n, m): directions = [(0, 1), (1, 0)] queue = deque([(0, 0)]) visited = [[False] * m for _ in range(n)] visited[0][0] = True while queue: x, y = queue.popleft() if x == n - 1 and y == m - 1: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: if abs(G[nx][ny] - G[x][y]) <= mid: visited[nx][ny] = True queue.append((nx, ny)) return False def min_difficulty(G, n, m): left, right = 0, max(max(row) for row in G) while left < right: mid = (left + right) // 2 if valid_path(G, mid, n, m): right = mid else: left = mid + 1 return left def easiest_path(t, test_cases): results = [] for i in range(t): n, m, G = test_cases[i] difficulty = min_difficulty(G, n, m) results.append(difficulty) return results"},{"question":"# Task You are designing a vending machine to distribute various products. The machine accepts coins and dispenses change when necessary. To ensure the accuracy of the change dispensed, you need to implement a function that calculates the change returned to the user. The vending machine contains an infinite supply of coins in the following denominations: 1 penny (1 cent), 1 nickel (5 cents), 1 dime (10 cents), and 1 quarter (25 cents). Your task is to write a function that computes the minimum number of coins needed to make up the change. # Input/Output **Input** - `cost`: an integer representing the cost of the item in cents. - `paid`: an integer representing the amount paid by the user in cents. **Output** - An integer representing the minimum number of coins needed to return the change. Assume that: - `0 <= cost <= paid <= 10^6` # Example For `cost = 75` and `paid = 100`, the output should be `1`. The change is 25 cents, which can be returned with one quarter. For `cost = 99` and `paid = 100`, the output should be `1`. The change is 1 cent, which can be returned with one penny. For `cost = 123` and `paid = 200`, the output should be `5`. The change is 77 cents, which can be returned with 3 quarters (75 cents) and 2 pennies.","solution":"def minimum_coins(cost, paid): Returns the minimum number of coins needed to return the change. Parameters: cost (int): The cost of the item in cents. paid (int): The amount paid by the user in cents. Returns: int: The minimum number of coins required to make up the change. change = paid - cost coin_count = 0 # Define the coin denominations in descending order coins = [25, 10, 5, 1] for coin in coins: coin_count += change // coin change %= coin return coin_count"},{"question":"#Task: Write a function `unique_element_occurrences` that takes a list of integers as input and returns `True` if the number of occurrences of each element in the list is unique. Otherwise, it returns `False`. #Example: ```python >>> unique_element_occurrences([1, 2, 2, 1, 1, 3]) True >>> unique_element_occurrences([1, 2]) False >>> unique_element_occurrences([-3, -3, -3, 7, 7]) True ``` #Libraries/Recommendations: Python: * Use of built-in functions like `collections.Counter` could be helpful. * The problem is focused on logical reasoning and no additional installations are required. #Notes: * The function should handle both positive and negative integers. * Performance considerations for very large lists can be taken into account.","solution":"from collections import Counter def unique_element_occurrences(lst): Returns True if the number of occurrences of each element in the list is unique. Otherwise, returns False. count = Counter(lst) freq = list(count.values()) return len(set(freq)) == len(freq)"},{"question":"Create a function that determines if a given string can be rearranged to form a palindrome. A palindrome is a string that reads the same forward and backward. For instance, \'racecar\' is a palindrome, but \'hello\' is not. Your function should return `True` if the string can be rearranged to form a palindrome, and `False` otherwise. To illustrate the problem, consider the following example: ```python can_form_palindrome(\'civic\') returns True can_form_palindrome(\'ivicc\') returns True can_form_palindrome(\'hello\') returns False can_form_palindrome(\'aabb\') returns True ``` Hint: A string can be rearranged to form a palindrome if at most one character appears an odd number of times.","solution":"def can_form_palindrome(s): Checks if the given string can be rearranged to form a palindrome. Args: s (str): the input string Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Write a function that takes a string representing a mathematical expression and returns its result. The expression can contain integers, the addition (+) and multiplication (*) operators, and can include spaces which should be ignored. The expression will always be valid and will not include negative numbers, division, or parentheses. Ensure the multiplication operator has precedence over the addition operator. ```Python evaluate_expression(\\"3 + 5 * 2\\") # should return 13 evaluate_expression(\\"10 + 20 + 30\\") # should return 60 evaluate_expression(\\" 2* 3 + 4 * 5 \\") # should return 26 ``` ```Haskell evaluateExpression \\"3 + 5 * 2\\" -- should return 13 evaluateExpression \\"10 + 20 + 30\\" -- should return 60 evaluateExpression \\" 2* 3 + 4 * 5 \\" -- should return 26 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing integers, addition (+), and multiplication (*). Multiplication has precedence over addition. Spaces in the expression are ignored. # Remove all spaces expression = expression.replace(\\" \\", \\"\\") # Split the expression by \'+\' and evaluate each part parts = expression.split(\'+\') total = 0 for part in parts: # Split each part by \'*\' and evaluate the product factors = part.split(\'*\') product = 1 for factor in factors: product *= int(factor) total += product return total"},{"question":"Design a string manipulation utility that supports the following operations in average O(1) time. append(str): Appends the string \'str\' to the end of the current string. delete(n): Deletes the last \'n\' characters from the current string. getLength: Returns the current length of the string. getSubstring(k): Returns the substring of length \'k\' from the start of the current string. Example: // Initialize an empty string utility. StringUtility stringUtility = new StringUtility(); // Appends \\"hello\\" to the string. Current string is \\"hello\\". stringUtility.append(\\"hello\\"); // Appends \\" world\\" to the string. Current string is \\"hello world\\". stringUtility.append(\\" world\\"); // Deletes the last 5 characters from the string. Current string is \\"hello\\". stringUtility.delete(5); // Returns the current length of the string, which is 5. stringUtility.getLength(); // Returns the substring of length 3 from the start of the string, which is \\"hel\\". stringUtility.getSubstring(3);","solution":"class StringUtility: def __init__(self): self.current_string = [] def append(self, s): self.current_string.append(s) def delete(self, n): current_length = sum(len(part) for part in self.current_string) while n > 0 and self.current_string: last_part = self.current_string[-1] if len(last_part) <= n: n -= len(last_part) self.current_string.pop() else: self.current_string[-1] = last_part[:-n] n = 0 def getLength(self): return sum(len(part) for part in self.current_string) def getSubstring(self, k): result = [] total_length = 0 for part in self.current_string: if total_length + len(part) >= k: result.append(part[:k-total_length]) break else: result.append(part) total_length += len(part) return \'\'.join(result)"},{"question":"Write a function that determines whether two given strings are anagrams of each other. Two strings are anagrams if they contain the same characters in the same frequency, but arranged in a different order. For example, the strings \\"listen\\" and \\"silent\\" are anagrams, as are \\"evil\\" and \\"vile\\". Your function should take two arguments (both strings) and return true or false depending on whether the strings are anagrams. Test cases will provide various types of input strings (including strings with different cases and special characters). Ensure your function handles uppercase and lowercase letters case-insensitively, but does not consider whitespace and special characters when determining anagrams. ```python def are_anagrams(str1, str2): pass ``` Example: ```python print(are_anagrams(\\"Astronomer\\", \\"Moon starer\\")) # Output: True print(are_anagrams(\\"The eyes\\", \\"They see\\")) # Output: True print(are_anagrams(\\"Hello\\", \\"World\\")) # Output: False ```","solution":"import re def are_anagrams(str1, str2): Determines if two strings are anagrams of each other, ignoring case, spaces, and special characters. # Remove non-alphanumeric characters and convert to lowercase str1_clean = re.sub(r\'[^A-Za-z0-9]\', \'\', str1).lower() str2_clean = re.sub(r\'[^A-Za-z0-9]\', \'\', str2).lower() # Check if the sorted characters of both cleaned strings are the same return sorted(str1_clean) == sorted(str2_clean)"},{"question":"Design a function named **calculateSpan** which takes a string containing arithmetic expressions in postfix notation and returns the result of the expression. In postfix notation, the operators follow their operands; for example, to add 3 and 4, you would write \\"3 4 +\\" rather than \\"3 + 4\\". The expression may contain positive or negative integers and the operators +, -, *, and /. You can assume that the given expression is always valid. Example: `calculateSpan(\\"3 4 +\\")` returns `7` `calculateSpan(\\"5 1 2 + 4 * + 3 -\\")` returns `14` Errors, if: * the input is not a string * the expression is not valid postfix notation In case of errors, the function should return `None`. Limit the result to integer division for the `/` operator.","solution":"def calculateSpan(expression): Evaluates a postfix expression and returns the result. Parameters: expression (str): A string containing a postfix arithmetic expression. Returns: int/None: The result of the postfix expression or None in case of an error. if not isinstance(expression, str): return None stack = [] operators = set([\\"+\\", \\"-\\", \\"*\\", \\"/\\"]) tokens = expression.split() for token in tokens: if token.lstrip(\'-\').isdigit(): # Check if the token is an integer, considering negative numbers. stack.append(int(token)) elif token in operators: if len(stack) < 2: return None # Not enough operands b = stack.pop() a = stack.pop() if token == \\"+\\": stack.append(a + b) elif token == \\"-\\": stack.append(a - b) elif token == \\"*\\": stack.append(a * b) elif token == \\"/\\": if b == 0: # Handle division by zero return None stack.append(a // b) # Integer division else: return None # Invalid token if len(stack) != 1: return None # There should be exactly one result if the expression is valid return stack[0]"},{"question":"You are given an array of unique integers where each integer lies in the range [1, n], where n is the length of the array. Some integer k has been removed from this array, making it have n-1 elements. You need to identify and return the missing integer k. Write a function: ```python def find_missing_number(arr: List[int]) -> int: ``` # Input - `arr`: A list of unique integers of length n-1 where each integer is between 1 and n inclusive. # Output - Return the missing integer `k`. # Example ```python # Example 1 arr = [1, 2, 4, 5] output = 3 Explanation: The original list should be [1, 2, 3, 4, 5], so the missing number is 3. # Example 2 arr = [3, 7, 1, 2, 8, 4, 5] output = 6 Explanation: The original list should be [1, 2, 3, 4, 5, 6, 7, 8], so the missing number is 6. # Example 3 arr = [2, 3] output = 1 Explanation: The original list should be [1, 2, 3], so the missing number is 1. ``` # Notes: - The length of the input array is n-1 where 1 <= n <= 10^6. - Each element in the input array is unique and within the range [1, n]. - You must come up with an efficient solution that ideally runs in O(n) time and uses O(1) additional space.","solution":"from typing import List def find_missing_number(arr: List[int]) -> int: This function takes a list of unique integers from the range [1, n] with one number missing, and returns the missing number. n = len(arr) + 1 # Since the length of arr is n-1 total_sum = n * (n + 1) // 2 # Sum of first n natural numbers array_sum = sum(arr) return total_sum - array_sum"},{"question":"You are given an array of integers nums where the ith integer represents the i-th step in a series. Starting at step 0, you must achieve the end of the series at step n-1. You can move from step `i` to step `i+k`, where 1 <= k <= nums[i]. Write a function that determines the minimum number of jumps to achieve the end of the series from the start. If it is not possible to reach the end of the series, return -1. Example: Input: nums = [2, 3, 1, 1, 4] Output: 2 Explanation: Jump 1 step from 0 to 1, then 3 steps to the last step. Example: Input: nums = [3, 2, 1, 0, 4] Output: -1 Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index. Constraints: * 1 <= nums.length <= 10^4 * 0 <= nums[i] <= 1000","solution":"def jump(nums): Determines the minimum number of jumps required to reach the end of the series. Returns -1 if it is not possible to reach the end. if len(nums) == 1: return 0 jumps = 0 current_end = 0 farthest = 0 for i in range(len(nums) - 1): farthest = max(farthest, i + nums[i]) if i == current_end: jumps += 1 current_end = farthest if current_end >= len(nums) - 1: return jumps return -1"},{"question":"You are given a list of event timestamps and a duration in minutes, and your task is to determine if any two events overlap. An event\'s duration starts at its given timestamp and lasts for the specified duration. Input - A list of timestamps in `HH:MM` 24-hour format, indicating the start times of events. - An integer representing the event duration in minutes. Output - Return `True` if any two events overlap; otherwise, `False`. Constraints - The list of timestamps will not be empty. - Timestamps are unique and may not be in chronological order. - Event duration is a positive integer and not greater than 1440 minutes (one day). Examples ```python timestamps = [\\"09:00\\", \\"10:30\\", \\"12:00\\"] duration = 60 # Event 1: 09:00 to 10:00 # Event 2: 10:30 to 11:30 # Event 3: 12:00 to 13:00 # Events do not overlap, so the output should be False. assert events_overlap(timestamps, duration) == False ``` ```python timestamps = [\\"09:00\\", \\"09:30\\", \\"10:00\\"] duration = 45 # Event 1: 09:00 to 09:45 # Event 2: 09:30 to 10:15 # Event 3: 10:00 to 10:45 # Events 1 and 2 overlap, so the output should be True. assert events_overlap(timestamps, duration) == True ``` Notes - You may assume all inputs are valid and there will be at least one timestamp in the list. - Consider edge cases where events start at the exact minute another event ends. In this case, they do not overlap.","solution":"def get_minutes_since_midnight(time_str): Convert a time in HH:MM format to minutes since midnight. hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes def events_overlap(timestamps, duration): Determines if any two events overlap given their starting timestamps and duration. Args: timestamps: list of str : list of start timestamps in \\"HH:MM\\" format duration : int : event duration in minutes Returns: bool: True if any two events overlap, otherwise False intervals = [] for timestamp in timestamps: start = get_minutes_since_midnight(timestamp) end = start + duration intervals.append((start, end)) intervals.sort() # Sort intervals based on start times for i in range(len(intervals) - 1): current_end = intervals[i][1] next_start = intervals[i+1][0] if current_end > next_start: return True return False"},{"question":"Write a function that generates the power set (the set of all subsets) of a given set of integers. The function should return a list of lists, where each inner list is a subset of the input set. The subsets in the power set should be sorted in ascending order, and the power set itself should be sorted first by the length of the subsets and then lexicographically. For example: ``` power_set([1, 2, 3]) = [ [], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3] ] power_set([1, 2]) = [ [], [1], [2], [1, 2] ] ``` More examples in test cases. Good luck!","solution":"from itertools import chain, combinations def power_set(s): Generates the power set (set of all subsets) of a given set of integers. :param s: Set of integers. :return: A list of lists, where each inner list is a subset of the input set. s = sorted(s) power_set = list(chain.from_iterable(combinations(s, r) for r in range(len(s)+1))) power_set = [list(subset) for subset in power_set] # Sort by length and then lexicographically power_set.sort(key=lambda x: (len(x), x)) return power_set"},{"question":"Given an array of integers, your task is to find the length of the longest contiguous subarray that consists of all odd numbers. A subarray is a contiguous part of an array. Write a function `longest_odd_subarray(arr)` that takes in a list of integers `arr` and returns an integer representing the length of the longest contiguous subarray consisting entirely of odd integers. # Examples ```python longest_odd_subarray([1, 2, 3, 4, 5, 6, 7, 8, 9]) # Output: 1, because the longest odd subarrays are [1], [3], [5], [7], [9], each of length 1. longest_odd_subarray([1, 3, 5, 7, 2, 1, 9, 11]) # Output: 4, because the longest odd subarray is [1, 3, 5, 7]. longest_odd_subarray([2, 4, 6, 8]) # Output: 0, because there are no odd numbers in the array. longest_odd_subarray([1, 3, 5, 7, 9]) # Output: 5, because the entire array consists of odd numbers. ``` # Constraints - The input array can have up to 10^5 elements. - Each element in the array is an integer between -10^9 and 10^9.","solution":"def longest_odd_subarray(arr): Returns the length of the longest contiguous subarray consisting entirely of odd integers. max_length = 0 current_length = 0 for num in arr: if num % 2 != 0: # The number is odd current_length += 1 max_length = max(max_length, current_length) else: # The number is even current_length = 0 return max_length"},{"question":"Implement a function that takes a string consisting of lowercase letters and returns the first non-repeating character in it. If all characters are repeating, return an empty string. You may assume that the string is non-empty. Note: The input string will contain only lowercase letters. Examples: firstNonRepeatingCharacter(\\"swiss\\") -> \\"w\\" firstNonRepeatingCharacter(\\"programming\\") -> \\"p\\" firstNonRepeatingCharacter(\\"aabbcc\\") -> \\"\\"","solution":"def firstNonRepeatingCharacter(s): Returns the first non-repeating character in a string. If all characters are repeating, returns an empty string. from collections import Counter # Create a counter for all characters in the string char_count = Counter(s) # Iterate through the string to find the first non-repeating character for char in s: if char_count[char] == 1: return char # If no non-repeating character found, return an empty string return \\"\\""},{"question":"Given an input list of integers, write a function that groups the integers by their number of digits and returns a dictionary where the keys are the digit counts and the values are lists of integers with that digit count. The lists of integers should be sorted in ascending order. # Notes: * The input list will always be non-empty. * Negative numbers should be grouped based on the number of digits in their absolute value. * The output dictionary keys should be in ascending order of the digit count. # Examples: ``` group_integers_by_digit_count([1, 23, 456, -789, 1000, -55, 12]) ``` Output: ``` { 1: [1], 2: [-55, 12, 23], 3: [-789, 456], 4: [1000] } ```","solution":"def group_integers_by_digit_count(numbers): Groups integers by their digit count and sorts the integers within each group. Args: numbers (list of int): List of integers to be grouped. Returns: dict: A dictionary where the keys are digit counts and the values are lists of integers with that digit count. from collections import defaultdict digit_groups = defaultdict(list) for num in numbers: digit_count = len(str(abs(num))) digit_groups[digit_count].append(num) for key in digit_groups: digit_groups[key].sort() return dict(sorted(digit_groups.items()))"},{"question":"Write a function `mergeAlternately` that takes two lists of strings and returns a single list by alternating elements from each list. If one list is longer than the other, append the remaining elements of the longer list to the end of the merged list. Example: Input: `[\'a\', \'b\', \'c\']` and `[\'1\', \'2\', \'3\', \'4\', \'5\']` Output: `[\'a\', \'1\', \'b\', \'2\', \'c\', \'3\', \'4\', \'5\']`","solution":"def mergeAlternately(list1, list2): Merges two lists alternately. If one list is longer, append the remaining elements. Args: list1, list2: Lists of strings to be merged. Returns: A single list with elements alternately taken from list1 and list2. merged_list = [] len1, len2 = len(list1), len(list2) for i in range(max(len1, len2)): if i < len1: merged_list.append(list1[i]) if i < len2: merged_list.append(list2[i]) return merged_list"},{"question":"You are given a robot starting at the origin point (0, 0) on a 2D plane. Given a sequence of its moves, judge if this robot ends up at the origin after it completes its moves. The move sequence is represented by a string, and the character moves[i] represents its i-th move. The valid robot moves are R (right), L (left), U (up), and D (down). Return true if the robot returns to the origin after it finishes all of its moves, or false otherwise. Note: The way that the robot moves means it will always end up at the origin if the number of \\"R\\" moves equals the number of \\"L\\" moves and the number of \\"U\\" moves equals the number of \\"D\\" moves. Example 1: Input: \\"UD\\" Output: true Explanation: The robot moves up once, and then down once. From the origin, it moves up to (0, 1), and then moves down to (0, 0). Hence, it returns to the origin. Example 2: Input: \\"LL\\" Output: false Explanation: The robot moves left twice. From the origin, it moves to (-1, 0), and then to (-2, 0). It is not at the origin at the end of its moves.","solution":"def judge_circle(moves): Determine if the robot returns to the origin after completing its moves. Parameters: moves (str): A sequence of moves with \'R\', \'L\', \'U\', \'D\'. Returns: bool: True if the robot returns to the origin, False otherwise. x, y = 0, 0 # Initialize starting coordinates at the origin (0, 0) for move in moves: if move == \'R\': x += 1 elif move == \'L\': x -= 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return x == 0 and y == 0"},{"question":"Prime Gaps Ashish is fascinated with prime numbers and recently he learned about prime gaps. A prime gap is the difference between two successive prime numbers. He wants to find the smallest prime gap in the first N prime numbers. -----Input----- Input consists of a single integer, N, representing the number of prime numbers to consider. -----Output----- Print one integer in the first line - the smallest prime gap among the first N prime numbers. -----Constraints----- - 2 ≤ N ≤ 104 Example Input 10 Output 1","solution":"import sympy def smallest_prime_gap(N): # Generate the first N prime numbers primes = list(sympy.primerange(1, sympy.prime(N + 1))) # Initialize the minimum gap with a large number min_gap = float(\'inf\') # Calculate the minimum gap for i in range(1, N): min_gap = min(min_gap, primes[i] - primes[i-1]) return min_gap"},{"question":"You are given a string representing a mathematical expression involving two integers and one of the following operators: \'+\', \'-\', \'*\', \'/\'. Your task is to evaluate the expression and return the result. The expression is always in one of the following forms: \\"A+B\\", \\"A-B\\", \\"A*B\\", \\"A/B\\", where A and B are integers. Note that the operator is always surrounded by the two integers without spaces. Ensure the division operation is integer division. -----Input----- The first line contains a single integer T <= 10, the number of test cases. Each of the following T lines contains a non-empty string representing a mathematical expression composed of the aforementioned format. -----Output----- For each test case, output a single line containing the integer result of the evaluated expression. -----Example----- Input: 5 12+34 50-15 7*6 49/7 27/4 Output: 46 35 42 7 6","solution":"def evaluate_expression(expression): Evaluates a mathematical expression with two integers and an operator. if \'+\' in expression: a, b = expression.split(\'+\') return int(a) + int(b) elif \'-\' in expression: a, b = expression.split(\'-\') return int(a) - int(b) elif \'*\' in expression: a, b = expression.split(\'*\') return int(a) * int(b) elif \'/\' in expression: a, b = expression.split(\'/\') return int(a) // int(b) def evaluate_expressions(expressions): Evaluates a list of mathematical expressions. return [evaluate_expression(expr) for expr in expressions]"},{"question":"You are an event organizer working in a venue with a single row of seating. The row contains `n` seats, and you have a list of group sizes and their seating preference for the event. Write a function `canArrangeSeats(n, groups)` which takes: - an integer `n` representing the number of seats, - a list of tuples `groups` where each tuple contains two integers: the first integer is the `size` of the group, and the second integer is the desired starting seat index (0-indexed). Return a list of boolean values where each boolean indicates whether the respective group can be seated starting from their desired index without overlapping with other groups. A group of size `k` occupies seat indices from the starting index to the starting index plus `k-1`. Example 1: Input: `n = 10`, `groups = [(3, 0), (4, 4), (2, 3)]` Output: `[True, True, False]` Explanation: - The first group of size 3 can be seated starting at index 0: seats [0, 1, 2]. - The second group of size 4 can be seated starting at index 4: seats [4, 5, 6, 7]. - The third group of size 2 cannot be seated starting at index 3 because seat 4 is already taken by the second group. Example 2: Input: `n = 5`, `groups = [(2, 0), (2, 1), (1, 4)]` Output: `[True, False, True]` Explanation: - The first group of size 2 can be seated starting at index 0: seats [0, 1]. - The second group of size 2 cannot be seated starting at index 1 because seat 1 is already taken by the first group. - The third group of size 1 can be seated starting at index 4: seat [4]. Note: - 1 <= n <= 10000 - 1 <= groups.length <= 1000 - 1 <= size[i] <= n - 0 <= index[i] < n","solution":"def canArrangeSeats(n, groups): Function to check if groups can be seated as per their preferences. Parameters: n (int): Number of seats. groups (list of tuples): Each tuple contains two integers: size of the group and the desired starting index. Returns: list of bool: Boolean values indicating whether the respective group can be seated. # Create a list to keep track of occupied seats seats = [False] * n result = [] for size, start_index in groups: if start_index + size > n: result.append(False) continue can_seat = True for i in range(start_index, start_index + size): if seats[i]: can_seat = False break if can_seat: for i in range(start_index, start_index + size): seats[i] = True result.append(True) else: result.append(False) return result"},{"question":"You are given an array of integers `arr` and an integer `k`. Your task is to write a function that returns the `k`th largest element in the array. **Note:** You should solve this problem without sorting the array. **Function Signature** ```python def kth_largest(arr: List[int], k: int) -> int: pass ``` **Example:** ```python assert kth_largest([3, 2, 1, 5, 6, 4], 2) == 5 assert kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4 assert kth_largest([1], 1) == 1 ``` # Constraints: - The length of the array is between 1 and 1000 (inclusive). - The values of the integers in the array are between `-10^5` and `10^5`. - 1 ≤ k ≤ length of the array","solution":"import heapq from typing import List def kth_largest(arr: List[int], k: int) -> int: Returns the k-th largest element in the array. # Using a min-heap of size k to keep track of the largest elements encountered min_heap = arr[:k] heapq.heapify(min_heap) for num in arr[k:]: if num > min_heap[0]: heapq.heappop(min_heap) heapq.heappush(min_heap, num) return min_heap[0]"},{"question":"Write a function that takes a 2D matrix of integers and returns a new matrix that shows the cumulative sum from the top left corner to each position. # Explanation Given a 2D matrix, you need to generate a new matrix where each element at position (i, j) is the sum of all elements in the original matrix that are above and to the left of (or equal to) (i, j). For example, if the input matrix is: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The output should be: ``` [ [ 1, 3, 6], [ 5, 12, 21], [12, 27, 45] ] ``` # Examples ```python cumulative_sum([ [1, 2], [3, 4] ]) => [ [1, 3], [4, 10] ] cumulative_sum([ [1] ]) => [ [1] ] ``` **Note:** - Each matrix will have at least one element. - All elements in the matrix will be valid integers.","solution":"def cumulative_sum(matrix): Takes a 2D matrix of integers and returns a new matrix showing the cumulative sum from the top left corner to each position. if not matrix: return [] rows, cols = len(matrix), len(matrix[0]) result = [[0] * cols for _ in range(rows)] for i in range(rows): for j in range(cols): result[i][j] = matrix[i][j] if i > 0: result[i][j] += result[i-1][j] if j > 0: result[i][j] += result[i][j-1] if i > 0 and j > 0: result[i][j] -= result[i-1][j-1] return result"},{"question":"# Problem Context A popular algorithmic problem is to check for balanced parentheses in an expression. A string containing just the characters `(`, `)`, `{`, `}`, `[` and `]` is said to be valid if the brackets close in the correct order: - `\\"()\\"`, `\\"()[]{}\\"`, and `\\"{[]}\\"` are all valid strings. - `\\"(]\\"`, `\\"([)]\\"`, and `\\"{[}\\"` are all invalid strings. Given an input string containing only these characters, write a function to determine if the input string is valid. The function should: 1. Return `True` if the input string is a valid expression. 2. Return `False` otherwise. # Examples ```python def isValid(s: str) -> bool: # your code here # Example 1 print(isValid(\\"()\\")) # Output: True # Example 2 print(isValid(\\"()[]{}\\")) # Output: True # Example 3 print(isValid(\\"(]\\")) # Output: False # Example 4 print(isValid(\\"([)]\\")) # Output: False # Example 5 print(isValid(\\"{[]}\\")) # Output: True ``` # Constraints - `1 <= len(s) <= 10^4` - The input string is guaranteed to consist only of `()[]{}` characte","solution":"def isValid(s: str) -> bool: Returns True if the input string s has valid parentheses. Otherwise, returns False. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket: top_element = stack.pop() if stack else \'#\' if matching_bracket[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"The residents of StringLand use a special method to encrypt their secret messages. Each message is encrypted by shifting each character in the string forward by a fixed number of positions in the alphabet. If the shift moves past \'z\', it wraps around to \'a\'. Given a string ```message``` and an integer ```shift```, write a function that returns the encrypted message after applying the given shift to each character. Note: - The string can contain only lowercase alphabets and spaces. - Spaces should remain unaffected by the shift. For ```message = \\"hello world\\"``` and ```shift = 3```, the output should be ```encryptMessage(message, shift) = \\"khoor zruog\\"```. Explanation: - \'h\' shifted by 3 positions becomes \'k\' - \'e\' shifted by 3 positions becomes \'h\' - \'l\' shifted by 3 positions becomes \'o\' - \'o\' shifted by 3 positions becomes \'r\' - The space remains the same - \'w\' shifted by 3 positions becomes \'z\' - \'o\' shifted by 3 positions becomes \'r\' - \'r\' shifted by 3 positions becomes \'u\' - \'l\' shifted by 3 positions becomes \'o\' - \'d\' shifted by 3 positions becomes \'g\' Function Signature: ```python def encryptMessage(message: str, shift: int) -> str: # Your code here ``` Example Input: ```python message = \\"hello world\\" shift = 3 ``` Example Output: ```python \\"khoor zruog\\" ```","solution":"def encryptMessage(message: str, shift: int) -> str: encrypted_message = [] for char in message: if char == \' \': encrypted_message.append(char) else: new_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) encrypted_message.append(new_char) return \'\'.join(encrypted_message)"},{"question":"You are given a string that contains both letters and numbers. Create a function that extracts all the numbers from the string, concatenates them together, and returns the resulting number as an integer. If there are no numbers in the input string, the function should return 0. For example, ``` extract_numbers(\\"abc123xyz\\") should return 123. extract_numbers(\\"a1b2c3\\") should return 123. extract_numbers(\\"hello\\") should return 0. ```","solution":"def extract_numbers(s): Extracts all numbers from the given string, concatenates them together, and returns the resulting number as an integer. If there are no numbers in the string, returns 0. num_str = \'\'.join([char for char in s if char.isdigit()]) return int(num_str) if num_str else 0"},{"question":"You are working for a software company that specializes in data analysis. Your boss has tasked you with creating a function that helps to identify patterns in a sequence of numbers. The specific task requires you to implement an algorithm that determines if a sequence of integers is monotonically increasing, monotonically decreasing, or neither. A sequence is considered: - Monotonically increasing if each number is greater than or equal to the previous number. - Monotonically decreasing if each number is less than or equal to the previous number. Your function should take a list of integers as input and return: - `\'increasing\'` if the sequence is monotonically increasing. - `\'decreasing\'` if the sequence is monotonically decreasing. - `\'neither\'` if the sequence is neither monotonically increasing nor monotonically decreasing. For example: - The input `[1, 2, 2, 3]` should return `\'increasing\'`. - The input `[3, 2, 1, 1]` should return `\'decreasing\'`. - The input `[1, 3, 2]` should return `\'neither\'`. Write a function `check_sequence(arr)` that performs this task. Ensure your implementation handles edge cases such as an empty sequence or a sequence with all identical elements.","solution":"def check_sequence(arr): Determines if a sequence of integers is monotonically increasing, monotonically decreasing, or neither. Args: arr (list of int): The sequence of integers. Returns: str: \'increasing\', \'decreasing\' or \'neither\'. if not arr: return \'neither\' is_increasing = all(arr[i] <= arr[i+1] for i in range(len(arr) - 1)) is_decreasing = all(arr[i] >= arr[i+1] for i in range(len(arr) - 1)) if is_increasing: return \'increasing\' elif is_decreasing: return \'decreasing\' else: return \'neither\'"},{"question":"You\'re working on a new workers\' management system for the company. Each worker is assigned one of three shifts: \\"morning\\", \\"afternoon\\", or \\"night\\". You are given an array of strings, each representing a worker\'s shift assignment for the day. Your task is to determine if there\'s any shift that needs more workers assigned to it so that every shift has an equal number of workers. If all shifts are equally balanced, return \\"Already Balanced\\". Otherwise, return a string indicating the shift that needs more workers (in lowercase). For instance, if the array is `[\\"morning\\", \\"morning\\", \\"afternoon\\", \\"night\\", \\"afternoon\\"]`, the method should return `\\"night\\"` since the night shift has fewer workers compared to the other ones. If there are multiple shifts that need more workers to balance the shifts, return any one of them.","solution":"def find_understaffed_shift(shift_assignments): Given an array of strings representing workers\' shift assignments, determine if there\'s any shift that needs more workers to balance the shifts equally. Args: shift_assignments (list of str): List of shift assignments. Returns: str: \\"Already Balanced\\" if all shifts are equally balanced, or the shift that needs more workers in lowercase otherwise. from collections import Counter # Count the occurrences of each shift shift_counter = Counter(shift_assignments) # All possible shifts shifts = [\\"morning\\", \\"afternoon\\", \\"night\\"] # Create a counter for shifts with defaults of 0 to ensure all shifts are counted shift_counts = {shift: shift_counter.get(shift, 0) for shift in shifts} # Find the maximum shift count max_count = max(shift_counts.values()) # Check if all shifts are already balanced if all(count == max_count for count in shift_counts.values()): return \\"Already Balanced\\" # Find the shifts that need more workers for shift in shifts: if shift_counts[shift] < max_count: return shift"},{"question":"# Task You are given a list of integers representing the height of buildings in a certain city. Your task is to determine how many buildings have an unobstructed view of the sunset. Assuming you are looking at the buildings from the left to the right, a building has an unobstructed view of the sunset if it is taller than all the buildings to its left. Write a function that takes an array of integers and returns the number of buildings that have an unobstructed view of the sunset. # Example: For `buildings = [3, 4, 2, 5, 1]`, the result should be `3`. ``` The buildings with heights 3, 4, and 5 have unobstructed views of the sunset. ``` # Input/Output - `[input]` integer array `buildings` An array of integers representing the heights of the buildings. `1 <= buildings.length <= 1e6` `1 <= buildings[i] <= 1e4` - `[output]` an integer The number of buildings with an unobstructed view of the sunset.","solution":"def unobstructed_view(buildings): Returns the number of buildings that have an unobstructed view of the sunset. if not buildings: return 0 count = 0 max_height = 0 for height in buildings: if height > max_height: count += 1 max_height = height return count"},{"question":"In a forest, there are NN trees numbered from 1 to NN. Each tree has an initial height. You need to perform QQ operations, where each operation is one of the following types: 1. Add K meters to the height of all trees between position L and R inclusive. 2. Set the height of the tree at position P to K meters. 3. Query the height of the tree at position P. You are required to handle these operations efficiently. -----Input----- - The first line contains two integers NN (the number of trees) and QQ (the number of operations). - The second line contains NN integers denoting the initial heights of the trees. - The next QQ lines contain one of the following operations: - 1 L R K: Add K meters to each tree between positions L and R inclusive. - 2 P K: Set the height of the tree at position P to K meters. - 3 P: Output the height of the tree at position P. -----Output----- For each operation of type 3, output the height of the specified tree. -----Constraints----- - 1≤N,Q≤100,0001 le N, Q le 100,000 - 1≤L≤R≤N1 le L le R le N - 1≤P≤N1 le P le N - −109≤K≤109-10^9 le K le 10^9 - −109≤height of tree≤109-10^9 le text{height of tree} le 10^9 -----Example Input----- 5 5 1 2 3 4 5 1 2 4 2 3 3 2 3 10 3 3 3 5 -----Example Output----- 5 10 5","solution":"class Forest: def __init__(self, heights): self.heights = heights def add_height(self, L, R, K): for i in range(L-1, R): self.heights[i] += K def set_height(self, P, K): self.heights[P-1] = K def query_height(self, P): return self.heights[P-1] def process_operations(N, initial_heights, operations): forest = Forest(initial_heights) result = [] for operation in operations: if operation[0] == 1: _, L, R, K = operation forest.add_height(L, R, K) elif operation[0] == 2: _, P, K = operation forest.set_height(P, K) elif operation[0] == 3: _, P = operation result.append(forest.query_height(P)) return result"},{"question":"You are given a binary tree. Find the maximum path sum in the tree. The path can start and end at any node in the tree and must follow through parent-child connections. A path is defined as a sequence of nodes where each pair of consecutive nodes in the sequence has a parent-child relationship. The path must contain at least one node, and you may assume that the sum of data in any path does not exceed the range of a signed 32-bit integer. -----Input----- - The input consists of a single integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of nodes in the binary tree. - The following N lines describe the nodes of the tree. Each line contains three values: the value of the node, the index of its left child, and the index of its right child. An index of -1 signifies that the child is missing. -----Output----- For each test case, print a single line containing the maximum path sum for the given binary tree. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - -10^4 ≤ Node value ≤ 10^4 -----Example Input----- 1 3 1 2 3 2 -1 -1 3 -1 -1 -----Example Output----- 6 -----Explanation----- In the given example, the binary tree looks like this: ``` 1 / 2 3 ``` The maximum path sum is 1 + 2 + 3 = 6.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nodes, index): if index == -1: return None val, left_index, right_index = nodes[index] node = TreeNode(val) node.left = build_tree(nodes, left_index) node.right = build_tree(nodes, right_index) return node def max_path_sum(root): def helper(node): nonlocal max_sum if not node: return 0 left_max = max(helper(node.left), 0) right_max = max(helper(node.right), 0) max_sum = max(max_sum, node.val + left_max + right_max) return node.val + max(left_max, right_max) max_sum = float(\'-inf\') helper(root) return max_sum def solve(trees): results = [] for nodes in trees: root = build_tree(nodes, 0) results.append(max_path_sum(root)) return results"},{"question":"Alice and Bob are playing a game with an array of integers. They take turns to make a move. Initially, Alice goes first, and then they alternate turns. A move consists of choosing any non-empty subarray, removing it from the array and gaining a score equal to the sum of the elements of that subarray. The player who cannot make a move loses the game. Both players are highly intelligent and will always make moves to maximize their own score. Write a program to determine who will win if both players play optimally. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array. The second line contains n integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4), representing the elements of the array. -----Output----- Print \\"Alice\\" if Alice wins the game, or \\"Bob\\" if Bob wins the game. -----Examples----- Input 3 1 2 3 Output Alice Input 3 -1 -2 -3 Output Bob -----Note----- In the first test case, Alice can take the whole array [1, 2, 3], gaining a score of 6. Bob then cannot make a move, so Alice wins. In the second test case, any subarray removed will have a negative sum, so neither Alice nor Bob gain anything. The game will come down to the last move, where Bob will win since Alice will have no move left.","solution":"def determine_winner(n, arr): Determines the winner of the game given the initial array configuration. total_sum = sum(arr) if total_sum > 0: return \\"Alice\\" elif total_sum < 0: return \\"Bob\\" else: # When the total sum is 0, it depends on the parity of the length of the array return \\"Alice\\" if n % 2 != 0 else \\"Bob\\""},{"question":"You are given a list of non-negative integers representing the amount of rainwater trapped between bars in a histogram where the width of each bar is 1. Write a program to compute the total amount of rainwater trapped. A bar graph representation of the problem can be visualized, where the height of each bar represents the value at the corresponding index. Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The bars at indices 1 and 2 can hold 1 unit of water each, the bars at indices 4 and 5 can hold 1 unit of water each, and the bars at indices 7 and 8 can hold 1 unit of water each, leading to a total of 6 units of water. Example 2: Input: height = [4,2,0,3,2,5] Output: 9 Explanation: The bars at index 2 can hold 1 unit of water, the bars at indices 1 and 3 can hold 4 units of water, and the bars at index 2 can hold another 1 unit of water, resulting in a total of 9 units of water. Example 3: Input: height = [1,0,2,1,0,1,3,2] Output: 5 Explanation: The bars at indices 1 and 2 can hold 2 units of water, the bars at index 4 and 5 can hold 2 units of water, and the bar at index 1 can hold 1 unit of water, leading to a total of 5 units of water. Constraints: - The length of the list \'height\' will be in the range [0, 1000]. - Each element in the list \'height\' will be a non-negative integer in the range [0, 10000].","solution":"def trap(height): Computes the total amount of rainwater trapped between the bars in a histogram. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - height[i] return total_water"},{"question":"Create a function that takes a list of integers and returns the length of the longest subsequence where the difference between consecutive elements is exactly 1. A subsequence does not necessarily need to be contiguous in the original list but must maintain the order. If there are multiple subsequences with the same longest length, return the first one found. **Example:** For the list `[1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 8]`, the longest subsequence with the difference of 1 between consecutive elements is `[1, 2, 3, 4, 5]` or `[3, 4, 5, 6, 7, 8]`. Both have a length of 6 but return the first one found. ``` #[1, 2, 3, 4, 5] #Output: 6 For the list `[10, 9, 8, 7, 6, 5]`, the longest subsequence with the difference of 1 between consecutive elements is `[10, 9, 8, 7, 6, 5]`. ``` #Output: 6 For the list `[5, 4, 3, 2, 1]`, the longest subsequence with the difference of 1 between consecutive elements is `[5, 4, 3, 2, 1]`. ``` #Output: 5","solution":"def longest_subsequence_with_diff_one(arr): Returns the length of the longest subsequence where the difference of consecutive elements is exactly 1. if not arr: return 0 longest_length = 1 current_length = 1 for i in range(len(arr) - 1): if abs(arr[i + 1] - arr[i]) == 1: current_length += 1 else: longest_length = max(longest_length, current_length) current_length = 1 return max(longest_length, current_length)"},{"question":"Write a function that accepts an integer `n` and returns a list of all Fibonacci numbers less than or equal to `n`. The Fibonacci sequence is generated by starting with 0 and 1, and then each subsequent number is the sum of the previous two numbers. You are guaranteed that `n` will always be a positive integer. For example, if the input is `10`, the function should return `[0, 1, 1, 2, 3, 5, 8]` as these are the Fibonacci numbers less than or equal to 10. Ensure that your solution is efficient and concise.","solution":"def fibonacci_up_to(n): Returns a list of all Fibonacci numbers less than or equal to `n`. if n == 0: return [0] fib_sequence = [0, 1] while True: next_fib = fib_sequence[-1] + fib_sequence[-2] if next_fib > n: break fib_sequence.append(next_fib) return fib_sequence"},{"question":"A zoo has multiple enclosures and each enclosure houses a certain number of animals of different species. The zookeeper needs to keep a track of the count of each species in the zoo. Given the current status of species in each enclosure, the zookeeper wants to merge the counts of species from all enclosures and display the combined list in the lexicographical order of species. # Input: The first line contains an integer `T`, the number of test cases. For each test case: - The first line contains an integer `E`, the number of enclosures. - The next `E` lines describe the count of species in each enclosure, formatted as a space-separated list: each line starts with an integer `S`, the number of different species in that enclosure, followed by `S` pairs of species name (a lowercase string) and its count (an integer). # Output: For each test case, print the combined list of species and their total counts in lexicographical order of species names. Each species and its count should be in a new line. # Constraints: - 1 leq T leq 10 - 1 leq E leq 100 - 1 leq S leq 100 - 1 leq text{species_name.length} leq 10 - 1 leq text{count} leq 1000 # Sample Input: ``` 2 2 3 lion 3 tiger 2 bear 1 2 elephant 1 lion 2 3 2 giraffe 4 monkey 3 3 tiger 1 zebra 2 bear 2 1 lion 1 ``` # Sample Output: ``` bear 1 elephant 1 lion 5 tiger 2 bear 2 giraffe 4 lion 1 monkey 3 tiger 1 zebra 2 ```","solution":"def merge_species_counts(test_cases): results = [] for case in test_cases: E = case[0] enclosures = case[1:] species_counts = {} for enclosure in enclosures: species_list = enclosure.split()[1:] # Skip the first element which is the number of species for i in range(0, len(species_list), 2): species = species_list[i] count = int(species_list[i + 1]) if species in species_counts: species_counts[species] += count else: species_counts[species] = count sorted_species_counts = sorted(species_counts.items()) results.append(\\"n\\".join(f\\"{species} {count}\\" for species, count in sorted_species_counts)) return \\"n\\".join(results) def parse_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): E = int(lines[index]) enclosures = lines[index+1:index+1+E] test_cases.append((E, *enclosures)) index += E + 1 return test_cases def format_output(output_string): return output_string.strip() input_string = \'\'\'2 2 3 lion 3 tiger 2 bear 1 2 elephant 1 lion 2 3 2 giraffe 4 monkey 3 3 tiger 1 zebra 2 bear 2 1 lion 1 \'\'\' expected_output = \'\'\'bear 1 elephant 1 lion 5 tiger 2 bear 2 giraffe 4 lion 1 monkey 3 tiger 1 zebra 2 \'\'\' test_cases = parse_input(input_string) output = merge_species_counts(test_cases) formatted_output = format_output(output) print(formatted_output)"},{"question":"Given an m x n matrix of integers, where each row is sorted in ascending order and every integer within the matrix is unique, write a function to find a target value and return its position as a tuple (row_index, col_index). If the target value is not found in the matrix, return (-1, -1). **Constraints:** - The number of rows (m) is between 1 and 100. - The number of columns (n) is between 1 and 100. - The matrix does not contain duplicate integers. **Function Signature:** ```python def find_target(matrix: List[List[int]], target: int) -> Tuple[int, int]: pass ``` **Example:** ```python matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target = 5 find_target(matrix, target) # Output: (1, 1) target = 20 find_target(matrix, target) # Output: (-1, -1) ``` # Guiding Hints: 1. Consider an efficient search strategy instead of a brute force search. 2. You may start searching in an appropriate corner of the matrix to reduce the search space quickly. 3. Remember that each row and column is sorted, which can be utilized to your advantage.","solution":"from typing import List, Tuple def find_target(matrix: List[List[int]], target: int) -> Tuple[int, int]: if not matrix: return (-1, -1) rows, cols = len(matrix), len(matrix[0]) r, c = 0, cols - 1 # Start from the top-right corner while r < rows and c >= 0: if matrix[r][c] == target: return (r, c) elif matrix[r][c] > target: c -= 1 else: r += 1 return (-1, -1)"},{"question":"Task Create a function that takes a string containing an arithmetic expression and returns its evaluation. The expression can contain positive integers, the operators + (addition), - (subtraction), * (multiplication), and / (division), and parentheses to indicate operation precedence. # Example For expression = \\"2+3*4\\", the output should be `14`; For expression = \\"(2+3)*4\\", the output should be `20`. # Input/Output - `[input]` string `expression` - `[output]` an integer representing the evaluation result","solution":"def evaluate_expression(expression): Evaluates a given arithmetic expression string and returns the result. return eval(expression)"},{"question":"Write a function that takes a string as input and returns the character that appears the maximum number of times. If there is a tie, return the first character that reached the maximum count. Ignore case while counting character frequencies. ```python max_char_occurence(\\"Programming is Fun!\\") # => \'r\' max_char_occurence(\\"aAaBbCcDD\\") # => \'a\' ``` Hint: Consider using a dictionary or collections.Counter to count character frequencies efficiently and ensure you handle both uppercase and lowercase characters as the same.","solution":"from collections import Counter def max_char_occurrence(s): Returns the character that appears the maximum number of times in the string `s`. If there is a tie, returns the first character that reaches the maximum count. s = s.lower() # Convert to lowercase to ignore case counter = Counter(s) max_count = 0 max_char = \'\' for char in s: if char.isalpha(): # Consider only alphabetic characters if counter[char] > max_count: max_count = counter[char] max_char = char return max_char"},{"question":"Beth is planning a series of workshops and needs to arrange seating for attendees. The attendees are seated in a grid where each attendee should have a certain amount of personal space. The personal space for an attendee is determined by the minimum distance to the closest neighboring attendee in the grid. Beth wants to maximize this personal space for the most crowded configuration. Given the number of rows R and columns C in the grid, write a program to determine the smallest possible value of personal space, defined as the minimum distance between any two attendees. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. T lines follow - The first line of each test case contains two integers R and C. -----Output:----- - For each test case, output the maximum possible minimum distance in the grid with the given number of rows and columns. -----Constraints----- - 1 leq T leq 100 - 1 leq R, C leq 10^9 -----Sample Input:----- 3 2 3 4 5 6 6 -----Sample Output:----- 1 2 3 -----Explanation:----- - Example case 1: In a 2x3 grid, the smallest possible distance between any two attendees is 1 unit. - Example case 2: In a 4x5 grid, attendees can be more spaced out, potentially achieving a smallest possible distance of 2 units. - Example case 3: In a 6x6 grid, the attendees can be seated such that the smallest distance is 3 units. Note: The more spacious the grid, the higher the potential minimum distance between attendees, but configurations must be optimal to maximize personal space.","solution":"def calculate_max_min_distance(R, C): Calculate the maximum possible minimum distance between any two attendees in a grid of size RxC. return (min(R, C) + 1) // 2 def process_input(test_cases): results = [] for R, C in test_cases: results.append(calculate_max_min_distance(R, C)) return results"},{"question":"Given a list of integers, return the longest sublist where the difference between the maximum and minimum values is less than or equal to a specified threshold. Input * A list of integers. * A single integer representing the threshold. Output * The longest sublist meeting the condition. * If there are multiple sublists with the same longest length, return any one of them. Example # Example 1: **Input:** nums = [1, 3, 5, 7, 9] threshold = 4 **Output:** [1, 3, 5] # Example 2: **Input:** nums = [10, 1, 2, 3, 4, 5] threshold = 3 **Output:** [1, 2, 3, 4] # Example 3: **Input:** nums = [100, 200, 300, 400, 500] threshold = 99 **Output:** [100] Constraints * The list of integers will have at least one element. * The threshold will always be a non-negative integer. Explanation Your function should find the longest continuous sublist where the difference between the largest value and the smallest value in that sublist does not exceed the given threshold.","solution":"def longest_sublist_within_threshold(nums, threshold): start = 0 max_len = 0 max_sublist = [] for end in range(len(nums)): current_sublist = nums[start:end+1] if max(current_sublist) - min(current_sublist) > threshold: start += 1 else: if len(current_sublist) > max_len: max_len = len(current_sublist) max_sublist = current_sublist return max_sublist"},{"question":"Task Your task is to create a `Matrix` class that supports some essential operations. This class will represent a 2D matrix and provide methods to manipulate and retrieve data from the matrix. Here are the requirements: # Initialization The constructor should accept a 2D list (list of lists) to initialize the matrix. ```python matrix = Matrix([[1, 2], [3, 4]]) ``` # Methods 1. `get_row(row_index)`: Returns the row at the specified index as a list. ```python matrix.get_row(1) # Returns [3, 4] ``` 2. `get_column(column_index)`: Returns the column at the specified index as a list. ```python matrix.get_column(0) # Returns [1, 3] ``` 3. `transpose()`: Returns the transpose of the matrix as a new `Matrix` object. ```python transposed_matrix = matrix.transpose() # If matrix is [[1, 2], [3, 4]], then transposed_matrix should be [[1, 3], [2, 4]] ``` 4. `__str__` or `toString()`: Returns a string representation of the matrix with rows separated by newlines and elements separated by spaces. ```python print(matrix) # For matrix [[1, 2], [3, 4]], it should print: # 1 2 # 3 4 ``` 5. `add(other_matrix)`: Adds the corresponding elements of the other matrix to the current matrix and returns a new `Matrix` object with the result. Both matrices must have the same dimensions. ```python matrix1 = Matrix([[1, 2], [3, 4]]) matrix2 = Matrix([[5, 6], [7, 8]]) matrix3 = matrix1.add(matrix2) # matrix3 should be [[6, 8], [10, 12]] ``` 6. `subtract(other_matrix)`: Subtracts the corresponding elements of the other matrix from the current matrix and returns a new `Matrix` object with the result. Both matrices must have the same dimensions. ```python matrix1 = Matrix([[5, 6], [7, 8]]) matrix2 = Matrix([[1, 2], [3, 4]]) matrix3 = matrix1.subtract(matrix2) # matrix3 should be [[4, 4], [4, 4]] ``` # Constraints - All matrix elements will be integers. - The input matrix will always be non-empty. - For `add` and `subtract` operations, both matrices will have the same dimensions. # Example Create a `Matrix` class with the functionality described above. Here\'s how it should work: ```python matrix = Matrix([[1, 2], [3, 4]]) print(matrix) # Output: # 1 2 # 3 4 row = matrix.get_row(1) print(row) # Output: [3, 4] col = matrix.get_column(0) print(col) # Output: [1, 3] transposed_matrix = matrix.transpose() print(transposed_matrix) # Output: # 1 3 # 2 4 matrix1 = Matrix([[1, 2], [3, 4]]) matrix2 = Matrix([[5, 6], [7, 8]]) result_matrix = matrix1.add(matrix2) print(result_matrix) # Output: # 6 8 # 10 12 result_matrix = matrix1.subtract(matrix2) print(result_matrix) # Output: # -4 -4 # -4 -4 ``` Implement the `Matrix` class according to the specifications provided.","solution":"class Matrix: def __init__(self, data): self.data = data def get_row(self, row_index): return self.data[row_index] def get_column(self, column_index): return [row[column_index] for row in self.data] def transpose(self): transposed_data = [[self.data[j][i] for j in range(len(self.data))] for i in range(len(self.data[0]))] return Matrix(transposed_data) def __str__(self): return \'n\'.join([\' \'.join(map(str, row)) for row in self.data]) def add(self, other): if len(self.data) != len(other.data) or len(self.data[0]) != len(other.data[0]): raise ValueError(\\"Matrices are not of the same dimensions\\") result_data = [[self.data[i][j] + other.data[i][j] for j in range(len(self.data[0]))] for i in range(len(self.data))] return Matrix(result_data) def subtract(self, other): if len(self.data) != len(other.data) or len(self.data[0]) != len(other.data[0]): raise ValueError(\\"Matrices are not of the same dimensions\\") result_data = [[self.data[i][j] - other.data[i][j] for j in range(len(self.data[0]))] for i in range(len(self.data))] return Matrix(result_data)"},{"question":"Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is defined as the length of the longest path between any two nodes in a tree. This path may or may not pass through the root. The length of a path between two nodes is represented by the number of edges between them. Example: Given a binary tree ``` 1 / 2 3 / 4 5 ``` Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3]. Note: The length of path between two nodes is represented by the number of edges between them. # Constraints: * The number of nodes in the tree is in the range `[1, 10^4]`. * `-100 <= Node.val <= 100`","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def diameterOfBinaryTree(root): Computes the diameter of the binary tree rooted at \'root\'. The diameter is the length of the longest path between any two nodes in the tree. def depth(node): nonlocal diameter if not node: return 0 left = depth(node.left) right = depth(node.right) diameter = max(diameter, left + right) return max(left, right) + 1 diameter = 0 depth(root) return diameter"},{"question":"Given a positive integer, you need to check if it is a [palindromic number](https://en.wikipedia.org/wiki/Palindromic_number), which is a number that remains the same when its digits are reversed. Write a function that returns `true` if the given number is a palindrome, and `false` otherwise. # Example: If the given number is 121, the function should return `true`, since 121 is a palindrome. If the given number is 123, the function should return `false`, since 123 is not a palindrome. # Function Signature ```python def is_palindrome(n: int) -> bool: # Implement the function here ``` # Constraints - The input number `n` is a positive integer up to `10^9`. # Sample Input/Output ```python is_palindrome(121) # Returns: True is_palindrome(123) # Returns: False is_palindrome(1221) # Returns: True is_palindrome(10) # Returns: False is_palindrome(1) # Returns: True ``` # Notes One way to solve this problem is to convert the number to a string and check if it reads the same forwards and backwards.","solution":"def is_palindrome(n: int) -> bool: Checks if a given positive integer n is a palindrome. Args: n (int): A positive integer. Returns: bool: True if n is a palindrome, False otherwise. str_n = str(n) return str_n == str_n[::-1]"},{"question":"Anna is planning to bake a variety of cookies for a local bake sale. She has a list of ingredients required for each type of cookie, and she needs to figure out how many different types of cookies she can bake given the quantities of ingredients available in her pantry. **Input** You will be provided with the number of available ingredients, the quantity of each ingredient she has, the number of different types of cookies, and the list of ingredients (with their required quantities) needed for each type of cookie. The first input line contains two integers: - `N` (the number of available ingredients) - `M` (the number of different types of cookies) The second input line contains `N` integers indicating the available quantity of each ingredient. The next `M` blocks of input each start with an integer `k` (the number of ingredients required for that type of cookie) followed by `k` pairs of integers, each pair representing an ingredient index (1-based) and the quantity needed for that ingredient. **Output** The output should be the maximum number of different types of cookies Anna can bake with the ingredients available in her pantry. **Example** Input: ``` 4 3 10 5 6 8 2 1 3 2 2 3 1 2 3 1 4 2 2 2 4 4 1 ``` Output: ``` 2 ``` `Good luck with your baking! Rank and Upvote!`","solution":"def max_cookies(N, M, available_ingredients, cookies_info): count = 0 for cookie in cookies_info: can_bake = True for i in range(0, len(cookie), 2): ingredient_index = cookie[i] - 1 # Convert to 0-based index required_quantity = cookie[i + 1] if available_ingredients[ingredient_index] < required_quantity: can_bake = False break if can_bake: count += 1 for i in range(0, len(cookie), 2): ingredient_index = cookie[i] - 1 # Convert to 0-based index required_quantity = cookie[i + 1] available_ingredients[ingredient_index] -= required_quantity return count # Function to read input and call the max_cookies function def solve_baking_problem(input_str): lines = input_str.strip().split(\'n\') N, M = map(int, lines[0].split()) available_ingredients = list(map(int, lines[1].split())) cookies_info = [] line_idx = 2 for _ in range(M): cookie_ingredients = list(map(int, lines[line_idx].split()))[1:] cookies_info.append(cookie_ingredients) line_idx += 1 return max_cookies(N, M, available_ingredients, cookies_info)"},{"question":"A robot is traversing a grid of size n times m starting from cell (1, 1). Each cell in the grid contains a non-negative integer value which represents the energy required to pass through that cell. The robot can only move to the right or down from its current position. Design an algorithm to calculate the minimum total energy required for the robot to reach cell (n, m) from cell (1, 1). The robot must consume the energy value from each cell it passes through. -----Input----- The first line of input contains two integers n and m (1 le n, m le 1000) representing the number of rows and columns respectively. Each of the next n lines contains m integers, where the j-th integer in the i-th line represents the energy required to pass through cell (i,j) (0 le energy_{i,j} le 1000). -----Output----- On a single line, print the minimum total energy required for the robot to reach cell (n, m). -----Examples----- Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 5 9 3 4 Output 12 -----Note----- In the first sample, the path that gives the minimum energy consumption is (1,1) rightarrow (1,2) rightarrow (1,3) rightarrow (2,3) rightarrow (3,3) with total energy consumption 1 + 3 + 1 + 1 + 1 = 7. In the second sample, the path is (1,1) rightarrow (2,1) rightarrow (2,2) with total energy consumption 5 + 3 + 4 = 12.","solution":"def min_energy(n, m, grid): Calculate the minimum energy required to traverse from the top-left to the bottom-right corner of a grid. # Create a 2D DP table to store the minimum energy required to reach each cell dp = [[0] * m for _ in range(n)] # Initialize the first cell dp[0][0] = grid[0][0] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The answer is the value at the bottom-right corner of the DP table return dp[n-1][m-1]"},{"question":"Given an integer array nums, return the number of contiguous subarrays of nums whose sum equals k. Examples: Example 1: Input: nums = [1,1,1], k = 2 Output: 2 Example 2: Input: nums = [1,2,3], k = 3 Output: 2 Example 3: Input: nums = [1], k = 1 Output: 1 Constraints: - 1 <= nums.length <= 20000 - -1000 <= nums[i] <= 1000 - -1000000 <= k <= 1000000","solution":"def subarray_sum(nums, k): Returns the number of contiguous subarrays of nums whose sum equals k. count = 0 cum_sum = 0 sum_dict = {0: 1} for num in nums: cum_sum += num if cum_sum - k in sum_dict: count += sum_dict[cum_sum - k] if cum_sum in sum_dict: sum_dict[cum_sum] += 1 else: sum_dict[cum_sum] = 1 return count"},{"question":"You are given a grid with N rows and M columns. Each cell in the grid has a certain number of apples in it. A robot starts at the top-left corner of the grid (1, 1) and wants to collect the maximum number of apples possible. The robot can only move to the right or down from its current position. Your task is to determine the maximum number of apples the robot can collect by the time it reaches the bottom-right corner of the grid (N, M). -----Input----- - The first line of the input contains two integers N and M, representing the number of rows and columns in the grid respectively. - The next N lines contain M space-separated integers each, where the j-th integer in the i-th line represents the number of apples in the cell located at position (i, j). -----Output----- Print a single integer representing the maximum number of apples the robot can collect. -----Constraints----- - 1 ≤ N, M ≤ 100 - 0 ≤ Number of apples in each cell ≤ 100 -----Example----- Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 29 -----Explanation----- The grid has the following number of apples in each cell: 1 2 3 4 5 6 7 8 9 One possible path to collect the maximum number of apples would be: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3), collecting apples: 1 + 4 + 7 + 8 + 9 = 29.","solution":"def max_apples(grid): N = len(grid) M = len(grid[0]) # Create a dp table with the same dimensions as the grid dp = [[0] * M for _ in range(N)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (only possible moves are from the left) for j in range(1, M): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (only possible moves are from above) for i in range(1, N): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right corner contains the maximum number of apples return dp[N - 1][M - 1]"},{"question":"Create a function that takes a string consisting of lowercase alphabets and returns a new string where each character has been shifted by a given number of positions in the alphabet. If the shift takes you past \'z\', start again at \'a\'. You should also handle negative shifts which mean shifting to the left. ``` Example: shift_string(\\"abc\\", 1) -> \\"bcd\\" shift_string(\\"xyz\\", 2) -> \\"zab\\" shift_string(\\"hello\\", -1) -> \\"gdkkn\\" shift_string(\\"abc\\", -2) -> \\"yza\\" Explanation: 1. \'abc\' with a shift of 1 becomes \'bcd\': a -> b b -> c c -> d 2. \'xyz\' with a shift of 2 becomes \'zab\': x -> z y -> a z -> b 3. \'hello\' with a shift of -1 becomes \'gdkkn\': h -> g e -> d l -> k l -> k o -> n 4. \'abc\' with a shift of -2 becomes \'yza\': a -> y b -> z c -> a ``` Your function should validate the input to ensure the string contains only lowercase alphabets and the shift is an integer. If the input is not valid, return \\"Invalid input\\".","solution":"def shift_string(s, shift): Shifts each character in the string s by the given number of positions in the alphabet. Args: s (str): A string consisting of lowercase alphabets. shift (int): The number of positions to shift each character. Returns: str: The resulting string after shifting. if not isinstance(s, str) or not isinstance(shift, int): return \\"Invalid input\\" if not s.islower() or not s.isalpha(): return \\"Invalid input\\" shifted_string = [] for char in s: new_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) shifted_string.append(new_char) return \'\'.join(shifted_string)"},{"question":"You are given a rectangular grid of width `W` and height `H`, represented as a two-dimensional array. Each cell in the grid can be either a land cell (represented by `1`) or a water cell (represented by `0`). An island is defined as a group of adjacent land cells, connected horizontally or vertically. You need to write a function that returns the number of distinct islands in the given grid. Two islands are considered distinct if and only if they are not connected. Write a function `count_islands(grid: List[List[int]]) -> int` that takes the grid as input and returns the number of distinct islands. # Examples: ``` count_islands([ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ]) ``` Output: `3` ``` count_islands([ [1, 1, 0, 1, 0], [1, 0, 0, 0, 1], [0, 0, 1, 1, 1], [1, 0, 0, 0, 0] ]) ``` Output: `4` ``` count_islands([ [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0] ]) ``` Output: `0` # Constraints: - The grid dimensions `W` and `H` are between 1 and 50. - Each cell in the grid is either land (`1`) or water (`0`). # Note: - You may assume that all four edges of the grid are surrounded by water. - You can traverse only horizontally or vertically from a given cell, not diagonally.","solution":"from typing import List def count_islands(grid: List[List[int]]) -> int: def dfs(x, y): # If out of bounds or at water cell, return if x < 0 or x >= H or y < 0 or y >= W or grid[x][y] == 0: return # Mark the cell as visited by setting it to 0 grid[x][y] = 0 # Perform in all four directions dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) if not grid: return 0 H = len(grid) W = len(grid[0]) island_count = 0 for i in range(H): for j in range(W): if grid[i][j] == 1: island_count += 1 dfs(i, j) return island_count"},{"question":"Problem Statement Given an array of integers, return true if the array contains a pair of elements that sum up to a specific target number, and false otherwise. You can assume that each input will have at most one such pair. # Function Signature: ```python def has_pair_with_sum(arr: List[int], target: int) -> bool: ``` # Parameters: - `arr`: A list of integers representing the array. - `target`: An integer representing the target sum. # Returns: - A boolean value; `True` if there exists a pair of numbers in the array that add up to the target sum, `False` otherwise. # Example ```python has_pair_with_sum([1, 2, 3, 9], 8) ``` Output: ``` False ``` ```python has_pair_with_sum([1, 2, 4, 4], 8) ``` Output: ``` True ``` # Constraints: - All numbers in the array are non-negative integers. - Do not use sorting within the function.","solution":"def has_pair_with_sum(arr, target): Returns true if there exists a pair of numbers in the array that add up to the target sum. Otherwise, returns false. :param arr: List[int] - A list of integers representing the array. :param target: int - An integer representing the target sum. :return: bool seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"You are given a list of timestamps, each in the format \\"YYYY-MM-DD HH:MM:SS\\", representing when a user logs in on a particular day. Your task is to write a function `longest_streak` that calculates the longest consecutive daily login streak for any user. Input Your function will receive a list of strings where each string represents a timestamp of a user\'s login. Output Your function should return an integer, representing the longest consecutive number of days the user has logged in. Example ```python timestamps = [ \\"2023-01-01 08:00:00\\", \\"2023-01-02 09:00:00\\", \\"2023-01-03 10:00:00\\", \\"2023-01-05 11:00:00\\", \\"2023-01-06 12:00:00\\", \\"2023-01-07 13:00:00\\", \\"2023-01-08 14:00:00\\", \\"2023-01-10 15:00:00\\" ] longest_streak(timestamps) # 4 ``` Other Technical Details You can assume all timestamps are valid and there will be no duplicates. Date calculations should consider only the dates, ignoring the exact time. In the example above, the user logs in consecutively from \\"2023-01-05\\" to \\"2023-01-08\\" resulting in the longest streak of 4 days.","solution":"from datetime import datetime, timedelta def longest_streak(timestamps): Returns the longest consecutive daily login streak. :param timestamps: List of string timestamps in \\"YYYY-MM-DD HH:MM:SS\\" format :return: Integer representing the longest consecutive streak in days if not timestamps: return 0 # Extract only the dates and sort them dates = sorted({datetime.strptime(ts.split()[0], \\"%Y-%m-%d\\").date() for ts in timestamps}) longest_streak = 1 current_streak = 1 for i in range(1, len(dates)): if dates[i] == dates[i - 1] + timedelta(days=1): current_streak += 1 else: if current_streak > longest_streak: longest_streak = current_streak current_streak = 1 return max(longest_streak, current_streak)"},{"question":"Given a string `s` containing only lowercase letters, find the number of substrings that are palindromes. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). *MEDIUM!* ```python # ex 1 s = \\"aba\\" count_palindromic_substrings(s) # => 4 ``` - substrings are \\"a\\", \\"b\\", \\"a\\", \\"aba\\" ```python # ex 2 s = \\"aaa\\" count_palindromic_substrings(s) # => 6 ``` - substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\" ```python # ex 3 s = \\"abc\\" count_palindromic_substrings(s) # => 3 ``` - substrings are \\"a\\", \\"b\\", \\"c\\" Constraints **1 <= |s| <= 10^4**","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the given string s. def is_palindrome(sub): return sub == sub[::-1] count = 0 n = len(s) for i in range(n): for j in range(i, n): if is_palindrome(s[i:j+1]): count += 1 return count"},{"question":"Given an integer N, your task is to determine if a chessboard of size N x N can be completely filled with knights such that no two knights can attack each other. A knight in chess moves in an L-shape, either two squares in one direction and one in a perpendicular direction or two squares in a perpendicular direction and one in another. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output \\"YES\\" if it is possible to arrange the knights such that no two knights attack each other, otherwise output \\"NO\\". -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 100 -----Sample Input:----- 3 1 2 3 -----Sample Output:----- YES YES NO -----EXPLANATION:----- For N = 1, a single knight can be placed without any issues. For N = 2, each knight can be placed without them attacking each other. For N = 3, it is not possible to place the knights such that none of them attack each other.","solution":"def can_fill_knights(T, test_cases): Given number of test cases and sizes of chessboards, determine if it\'s possible to place knights such that none of them can attack each other. Parameters: T (int): Number of test cases. test_cases (list of int): List of chessboard sizes for each test case. Returns: list of str: List of \\"YES\\" or \\"NO\\" strings for each test case. results = [] for N in test_cases: if N > 1 and N % 2 == 1: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"In a small town, there is a traffic monitoring system that tracks the speed of vehicles at different checkpoints. The system has recorded the speed of vehicles passing through each checkpoint over a period of T hours. Given the speed data, the traffic department wants to analyze the speed variations for different time intervals. The analysis is performed via the following steps. 1. For a given time interval from time L to time R, all the speed values recorded during this interval are collected into a list. 2. Compute the variance of the speed values in this list. The variance of a set of numbers is calculated as follows: - Calculate the mean of the numbers. - For each number in the set, calculate the square of its difference from the mean. - The variance is the average of these squared differences. -----Input----- The first line contains one integer T — the number of hours the speeds have been recorded. The second line contains T integers — list S of recorded speeds (in km/h) for each hour. The third line contains one integer Q — the number of queries for analyzing different time intervals. Each of the following Q lines contains two integers L and R describing each time interval. -----Output----- For each query, output one floating point number — the variance of the speed values for the corresponding interval. -----Constraints----- - 1 ≤ T, Q ≤ 5*104 - 0 ≤ S[i] ≤ 300 -----Subtasks----- - Subtask 1 (19 points) 1 ≤ T, Q ≤ 200, time limit = 2 sec - Subtask 2 (31 points) 1 ≤ T, Q ≤ 10 000, time limit = 2 sec - Subtask 3 (26 points) 0 ≤ S[i] ≤ 100, time limit = 5 sec - Subtask 4 (24 points) no additional constraints, time limit = 5 sec -----Example----- Input: 5 60 70 80 90 100 3 1 5 2 4 3 3 Output: 200.0 66.6666666667 0.0 Explanation The first query: the list of speeds is [60, 70, 80, 90, 100], the mean is 80, and the variance is calculated as ((60-80)² + (70-80)² + (80-80)² + (90-80)² + (100-80)²) / 5 = 200.0 The second query: the list of speeds is [70, 80, 90], the mean is 80, and the variance is ((70-80)² + (80-80)² + (90-80)²) / 3 = 66.6666666667 The third query: the list of speeds is [80], the mean is 80, and the variance is ((80-80)²) / 1 = 0.0","solution":"def calculate_variance(speeds, L, R): Calculate the variance of speed values from index L to R (1-based) in the given list \'speeds\'. # Convert to 0-based index L -= 1 R -= 1 # Extract the sublist sublist = speeds[L:R+1] # Calculate mean mean = sum(sublist) / len(sublist) # Calculate variance variance = sum((x - mean) ** 2 for x in sublist) / len(sublist) return variance def process_queries(T, speeds, queries): Process the list of queries to calculate the variances of speed values for each given interval. results = [] for L, R in queries: variance = calculate_variance(speeds, L, R) results.append(variance) return results"},{"question":"Oliver is fascinated by palindromes. A palindrome is a word, number, phrase, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Now, he has a list of strings and wants to check each one to see if it can be rearranged to form a palindrome. He is currently very busy with his studies, so he has asked for your help. -----Input----- The first line of input consists of a single integer N, denoting the number of strings in Oliver\'s list. Then, there are N lines, each containing a single string. -----Output----- Output N lines. Each line should contain either \\"YES\\" or \\"NO\\" indicating whether the respective string can be rearranged to form a palindrome. -----Constraints----- - 1 ≤ N ≤ 105 - 1 ≤ Length of each string ≤ 100 - Each string contains only lowercase English letters. -----Example----- Input: 4 civic ivicc hello racecar Output: YES YES NO YES","solution":"def can_form_palindrome(s): Determines if the string can be rearranged to form a palindrome. from collections import Counter # Count the frequency of each character char_counts = Counter(s) # To form a palindrome, at most one character can have an odd count odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def check_palindrome_possibilities(strings): For each string in the provided list, prints \'YES\' if it can be rearranged to form a palindrome, otherwise \'NO\'. results = [] for s in strings: results.append(can_form_palindrome(s)) return results"},{"question":"Determine if the given string can be rearranged to form a palindrome. The input will be a string of lowercase letters with no spaces or special characters. # Examples ``` \\"civic\\" --> True \\"ivicc\\" --> True \\"hello\\" --> False \\"racecar\\" --> True \\"aabbcc\\" --> True ``` The function should return a boolean value: True if the string can be rearranged to form a palindrome, and False otherwise.","solution":"from collections import Counter def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one character has an odd count. Args: s (str): The input string. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. count = Counter(s) odd_count = sum(1 for freq in count.values() if freq % 2 != 0) return odd_count <= 1"},{"question":"A company wants to promote team engagement by organizing a team-building event. One of the activities involves a game where team members must form pairs to complete certain tasks. Each task has an equal duration. The team supervisor needs to determine if it\'s possible to pair up all team members such that each person has exactly one partner and there are no members left alone. Moreover, the number of pairs should be an even number. Each pair is referred to as a \\"team\\". Write a function to determine if it is possible to form the required number of teams based on the number of team members available. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains an integer M denoting the number of team members. -----Output----- For each test case, print a single line containing the string \\"Possible\\" if the required number of teams can be formed or \\"Impossible\\" if it cannot be done (without quotes). -----Constraints----- - 1 leq T leq 1,000 - 1 leq M leq 10^9 -----Example Input----- 4 4 5 8 10 -----Example Output----- Possible Impossible Possible Possible -----Explanation----- Example case 1: With 4 members, we can form 4 // 2 = 2 pairs, and 2 is an even number. Therefore, it is possible. Example case 2: With 5 members, at least one member will be left without a partner, and hence it is impossible. Example case 3: With 8 members, we can form 8 // 2 = 4 pairs, and 4 is an even number. Therefore, it is possible. Example case 4: With 10 members, we can form 10 // 2 = 5 pairs, and 5 is an odd number, making it impossible to meet the criterion of having an even number of pairs. Therefore, it is possible.","solution":"def can_form_even_number_of_teams(T, test_cases): results = [] for M in test_cases: if M % 2 == 1: results.append(\\"Impossible\\") else: pairs = M // 2 if pairs % 2 == 0: results.append(\\"Possible\\") else: results.append(\\"Impossible\\") return results"},{"question":"Summary Create an efficient function that calculates the least number of steps required to convert a given word into another using a set of valid transformations. Description You are given two words, `beginWord` and `endWord`, and a list of allowed transformations `wordList`. Each transformation is a string of the same length as the given words (all lower case). A transformation is valid if and only if it is present in the `wordList` and differs from the current word by exactly one letter. Your task is to write a function that returns the minimum number of transformations needed to convert `beginWord` to `endWord`. If the transformation isn\'t possible, return 0. Notes - `beginWord`, `endWord` and all words in `wordList` are of the same length. - `wordList` may contain duplicates which should only be counted once. - All input strings contain only lowercase alphabets and have a maximum length of `10`. - The size of `wordList` can be up to `1000`. Example ```python beginWord = \\"hit\\" endWord = \\"cog\\" wordList = [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"] assert min_transformations(beginWord, endWord, wordList) == 5 ``` Explanation In the above example, a possible chain of transformations from \\"hit\\" to \\"cog\\" is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\". The number of transformations in this case is 5.","solution":"from collections import deque def min_transformations(beginWord, endWord, wordList): Returns the minimum number of transformations needed to convert beginWord to endWord using a given list of transformations wordList. if endWord not in wordList: return 0 wordSet = set(wordList) queue = deque([(beginWord, 1)]) while queue: current_word, steps = queue.popleft() if current_word == endWord: return steps for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': new_word = current_word[:i] + c + current_word[i+1:] if new_word in wordSet: wordSet.remove(new_word) queue.append((new_word, steps + 1)) return 0"},{"question":"You are given a list of integers representing the daily prices of a stock in chronological order. You are allowed to buy and sell the stock only once. Your task is to design an algorithm to find the maximum possible profit you can achieve by choosing a single day to buy the stock and a different day in the future to sell it. If no profit is possible, return 0. Example 1: Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that buying on day 2 and selling on day 3 is not allowed because the selling day must be after the buying day. Example 2: Input: [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transactions are done and the max profit = 0. Note: - The length of the given array will be in the range [0, 10^5]. - All elements in the array will be in the range [0, 10^5].","solution":"def max_profit(prices): Calculate the maximum profit that can be achieved from buying and selling the stock once. :param prices: List[int] representing the daily prices of a stock. :return: int representing the maximum profit possible. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"— Help Santa Claus distribute toys! Santa Claus has n toys and m children. Each child i wishes for a_i toys. Santa wants to fulfill as many wishes as possible, but he can only give each child exactly what they wish for (no more, no less). If a child\'s wish cannot be completely fulfilled, that child will not be satisfied at all. Write a program to calculate the maximum number of children whose wishes can be fulfilled. -----Input----- The first line contains two integers n and m (1 le n, m le 1000) — the number of toys and the number of children. The second line contains m integers a_1, a_2, ..., a_m (1 le a_i le 1000) — the number of toys each child wishes for. -----Output----- Print one integer — the maximum number of children whose wishes can be fulfilled. -----Example----- Input 10 3 2 3 4 8 4 3 3 3 3 Output 3 2 -----Note----- In the first example, Santa has 10 toys and 3 children who wish for 2, 3, and 4 toys respectively. Santa can fulfill all three wishes (2 + 3 + 4 = 9 <= 10). In the second example, Santa has 8 toys and 4 children, each wishing for 3 toys. Santa can fulfill the wishes of two children (3 + 3 = 6 <= 8), but not all four.","solution":"def max_children_whose_wishes_can_be_fulfilled(n, m, a): Returns the maximum number of children whose wishes can be fulfilled. :param n: int The number of toys Santa has. :param m: int The number of children. :param a: List[int] The number of toys each child wishes for. :return: int The maximum number of children whose wishes can be fulfilled. a.sort() count = 0 for toys in a: if n >= toys: n -= toys count += 1 else: break return count"},{"question":"Given a 2D matrix of dimensions MxN, you are initially at the top-left corner of the matrix (position (0,0)). Each cell in the matrix contains a non-negative integer which represents the cost to traverse that cell. Your task is to find the minimum cost to travel from the top-left corner to the bottom-right corner of the matrix. You can only move right or down at each step. Write a function `minCost(matrix)` that takes a 2D matrix as input and returns the minimum cost to reach the bottom-right corner. -----Input:----- - A 2D matrix of dimensions MxN where 1 ≤ M, N ≤ 1000 and each cell contains a non-negative integer. -----Output:----- - A single integer, the minimum cost to reach the bottom-right corner of the matrix. -----Constraints----- - 1 ≤ matrix[i][j] ≤ 1000 for any valid cell (i, j). -----Sample Input:----- [[1, 3, 1], [1, 5, 1], [4, 2, 1]] -----Sample Output:----- 7 -----Explanation:----- Starting at the top-left corner (1), the minimum path to the bottom-right corner has a cost: 1 → 3 → 1 → 1 → 1 Total cost = 1 + 3 + 1 + 1 + 1 = 7.","solution":"def minCost(matrix): Returns the minimum cost to travel from the top-left corner to the bottom-right corner of the matrix. if not matrix or not matrix[0]: return 0 M, N = len(matrix), len(matrix[0]) cost = [[0]*N for _ in range(M)] cost[0][0] = matrix[0][0] # Initialize the first row and first column for i in range(1, M): cost[i][0] = cost[i-1][0] + matrix[i][0] for j in range(1, N): cost[0][j] = cost[0][j-1] + matrix[0][j] # Fill the rest of the cost matrix for i in range(1, M): for j in range(1, N): cost[i][j] = min(cost[i-1][j], cost[i][j-1]) + matrix[i][j] return cost[-1][-1]"},{"question":"You are given a list of integers representing the ages of people in a community. You want to organize a community event and need to determine if the middle-aged group (ages between 30 and 50, inclusive) forms the majority. Write a function that checks if more than half of the community falls into this age group. The function should return `True` if the middle-aged group forms the majority, and `False` otherwise. # Example: ```python # Example 1 ages = [25, 34, 47, 50, 32, 41, 28] result = is_middle_aged_majority(ages) # Expected: True # Example 2 ages = [10, 20, 30, 40, 50, 60, 70] result = is_middle_aged_majority(ages) # Expected: False ``` # Note: - The input list will always have at least one element. - The ages are all positive integers. You need to implement the function `is_middle_aged_majority` that takes a list of integers as an argument and returns a boolean value.","solution":"def is_middle_aged_majority(ages): Returns True if more than half of the community is in the middle-aged group (between 30 and 50 inclusive), otherwise returns False. middle_aged_count = sum(30 <= age <= 50 for age in ages) return middle_aged_count > len(ages) // 2"},{"question":"Implement a function that accepts a string of words separated by spaces and returns the length of the shortest word. The input string will never be empty, and you do not need to account for punctuation or special characters. For example: find_shortest_word_length(\\"The quick brown fox jumps over the lazy dog\\") => 3 In this sentence, the shortest word is \\"The\\" with a length of 3 characters. Another example: find_shortest_word_length(\\"A journey of a thousand miles begins with a single step\\") => 1 Here, the shortest word is \\"A\\" with a length of 1 character.","solution":"def find_shortest_word_length(s): Returns the length of the shortest word in the string s. words = s.split() shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"Write a function that takes two integer arrays, `arr1` and `arr2`, and returns a new array containing the common elements of `arr1` and `arr2`. Each element in the result should appear as many times as it shows in both arrays. Requirements: 1. The order of the elements in the result should be determined by their appearance in `arr1`. 2. If there are multiple common elements with the same value, they should all be included in the result. 3. Your solution should have a time complexity of O(n + m), where n and m are the lengths of `arr1` and `arr2` respectively. # Function Signature ```python def find_common_elements(arr1: List[int], arr2: List[int]) -> List[int]: pass ``` # Example ```python # Input: arr1 = [1, 2, 2, 3, 4, 5] arr2 = [2, 2, 3, 6] # Output: [2, 2, 3] ``` # Constraints 1. `1 <= len(arr1), len(arr2) <= 100000` 2. `1 <= arr1[i], arr2[i] <= 100000`","solution":"from typing import List from collections import Counter def find_common_elements(arr1: List[int], arr2: List[int]) -> List[int]: Returns the common elements in arr1 and arr2 with the frequency determined by their appearance in both arrays. The order in the result is based on arr1. # Create count dictionaries for both arrays count1 = Counter(arr1) count2 = Counter(arr2) # Find the intersection of elements common_elements = [] for element in arr1: if element in count2 and count1[element] > 0 and count2[element] > 0: common_count = min(count1[element], count2[element]) common_elements.extend([element] * common_count) # Reduce the count in both counters count1[element] -= common_count count2[element] -= common_count return common_elements"},{"question":"A new startup has created an indexing system that processes words from documents. They want to implement a system that can return a list of document indices in which a given word appears. Design a function that, given a list of strings representing documents and a query word, returns a list of indices of the documents where the word appears. The function should ignore case when checking for the presence of the word. A word is defined as a sequence of alphanumeric characters. It is required to match the word exactly (not a substring match). -----Input----- - An integer `n` representing the number of documents. - A list of `n` strings where each string represents a document. - A string `query` representing the query word. -----Output----- - A list of integers representing the indices of the documents where the query word appears. If the query word does not appear in any document, return an empty list. -----Constraints----- 1 <= n <= 100 1 <= length of each document <= 1000 1 <= length of query <= 100 -----Example----- Input: 3 [ \\"The quick brown fox\\", \\"Jumped over the lazy dog\\", \\"Sorted order in binary search Trees\\" ] \\"the\\" Output: [0, 1] Input: 2 [ \\"Welcome to the coding assessment\\", \\"Best of luck\\" ] \\"luck\\" Output: [1] -----Explanation----- Example case 1: The word \\"the\\" appears in the documents at index 0 and 1, ignoring case. Example case 2: The word \\"luck\\" appears in the document at index 1.","solution":"import re def find_word_indices(n, documents, query): Returns a list of indices of the documents where the query word appears (case-insensitive). indices = [] query = query.lower() for i, document in enumerate(documents): words = re.findall(r\'bw+b\', document.lower()) if query in words: indices.append(i) return indices"},{"question":"A tree is a connected acyclic graph. In a tree, we define the concept of a centroid. A centroid tree of a given tree is constructed as follows: 1. Find the centroid of the current tree. If the tree has an even number of nodes, we can choose any one of the centroids. 2. Remove the centroid and its connecting edges from the tree, resulting in a forest (a collection of trees). 3. Repeat the process recursively on each of the resulting trees and attach the centroid of each resulting tree to the previously removed centroid node. Given a tree with `N` nodes and `N-1` edges, you need to implement a function that finds the highest depth of the centroid tree created from the input tree. Depth of the centroid tree is defined as the maximum number of nodes from the root to any leaf in the centroid tree. -----Input----- The first line of the input contains an integer `N` denoting the number of nodes in the tree. Each of the next `N-1` lines contains two integers `u` and `v`, describing an edge between node `u` and node `v`. -----Output----- The output should contain exactly one integer - the highest depth of the centroid tree. -----Constraints----- 1 ≤ N ≤ 100000 (10^5) -----Example----- Input: 5 1 2 1 3 3 4 3 5 Output: 2 Explanation: The given tree can be visualized as: 1 / 2 3 / 4 5 The centroid of the tree is node 3. Removing node 3 splits the tree into two trees: 1 4 / / 2 5 The centroids of the two resulting trees are nodes 1 and 4 respectively, attaching them to node 3 gives: 3 / 1 4 The tree height (max depth from the root to any leaf) is 2.","solution":"import sys sys.setrecursionlimit(200000) def get_subtree_sizes(tree, node, parent, subtree_sizes): subtree_sizes[node] = 1 for neighbor in tree[node]: if neighbor != parent: get_subtree_sizes(tree, neighbor, node, subtree_sizes) subtree_sizes[node] += subtree_sizes[neighbor] def find_centroid(tree, node, parent, subtree_sizes, n): for neighbor in tree[node]: if neighbor != parent and subtree_sizes[neighbor] > n // 2: return find_centroid(tree, neighbor, node, subtree_sizes, n) return node def decompose(tree, node, parent): centroid = find_centroid(tree, node, parent, subtree_sizes, subtree_sizes[node]) subtree_sizes[centroid] = 0 components_depth = [] for neighbor in tree[centroid]: if subtree_sizes[neighbor] > 0: components_depth.append(decompose(tree, neighbor, centroid)) if components_depth: return 1 + max(components_depth) else: return 0 def highest_depth_of_centroid_tree(n, edges): tree = [[] for _ in range(n + 1)] for u, v in edges: tree[u].append(v) tree[v].append(u) global subtree_sizes subtree_sizes = [0] * (n + 1) get_subtree_sizes(tree, 1, -1, subtree_sizes) return decompose(tree, 1, -1) # Example usage: n = 5 edges = [ (1, 2), (1, 3), (3, 4), (3, 5) ] print(highest_depth_of_centroid_tree(n, edges)) # Output: 2"},{"question":"You are given a matrix of integers and a series of queries. Your task is to process each query efficiently and determine if there exists a submatrix such that the sum of all its elements is equal to a given target. -----Input----- The first line contains three integers m, n, and q (1 le m, n le 500, 1 le q le 10^4) — the number of rows and columns in the matrix, and the number of queries, respectively. The next m lines contain n integers each, representing the matrix elements a_{ij} (-10^3 le a_{ij} le 10^3). Each of the next q lines contains a single integer t_k (-10^6 le t_k le 10^6) — the target sum for the k-th query. -----Output----- For each query, print \\"YES\\" if there exists a submatrix with the sum equal to the target, and \\"NO\\" otherwise. -----Example----- Input 3 3 3 1 2 3 4 5 6 7 8 9 15 1 100 Output YES YES NO -----Note----- In the first query, the submatrix with sum 15 is the entire matrix. In the second query, the submatrix with sum 1 can be the single element [1,1]. In the third query, there is no submatrix with sum 100.","solution":"def submatrix_sum_exists(matrix, queries): def calculate_prefix_sums(matrix): m, n = len(matrix), len(matrix[0]) prefix_sums = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): prefix_sums[i][j] = (matrix[i - 1][j - 1] + prefix_sums[i - 1][j] + prefix_sums[i][j - 1] - prefix_sums[i - 1][j - 1]) return prefix_sums def submatrix_sum(prefix_sums, x1, y1, x2, y2): return (prefix_sums[x2 + 1][y2 + 1] - prefix_sums[x1][y2 + 1] - prefix_sums[x2 + 1][y1] + prefix_sums[x1][y1]) m = len(matrix) n = len(matrix[0]) prefix_sums = calculate_prefix_sums(matrix) results = [] for target in queries: found = False for x1 in range(m): for y1 in range(n): for x2 in range(x1, m): for y2 in range(y1, n): if submatrix_sum(prefix_sums, x1, y1, x2, y2) == target: found = True break if found: break if found: break if found: break results.append(\\"YES\\" if found else \\"NO\\") return results"},{"question":"You are given a list of integers representing the number of hours worked by each employee in a week. Your task is to find out the total number of hours worked and the maximum number of hours worked by any single employee. Write a function that takes a list of integers and returns a tuple containing the total number of hours and the maximum number of hours. # Example: ```python calculate_hours([40, 35, 42, 38]) == (155, 42) ``` **Note:** if the list is empty, return `(0, 0)`.","solution":"def calculate_hours(hours): Given a list of integers representing the number of hours worked by each employee in a week, this function returns a tuple containing the total number of hours and the maximum number of hours. Parameters: hours (list): A list of integers. Returns: tuple: A tuple containing the total number of hours (int) and the maximum number of hours (int). if not hours: return (0, 0) total_hours = sum(hours) max_hours = max(hours) return (total_hours, max_hours)"},{"question":"*** Matrix Rotation *** In this coding challenge, you need to implement a function that rotates a given n x n matrix clockwise by 90 degrees. The function should modify the matrix in place. # Example: If the input matrix is: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` After rotating the matrix by 90 degrees clockwise, the resulting matrix should be: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Function Signature: ```python def rotate_matrix(matrix: List[List[int]]) -> None: pass ``` # Constraints: - The input matrix will always be a square matrix (n x n where 1 ≤ n ≤ 20). - You need to modify the matrix in place, which means you are not allowed to use any extra space except for a few variables. Implement the function `rotate_matrix(matrix: List[List[int]]) -> None` that rotates the given matrix clockwise by 90 degrees.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> None: Rotates the given n x n matrix clockwise by 90 degrees in place. n = len(matrix) # First, transpose the matrix: for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Then, reverse each row: for i in range(n): matrix[i].reverse()"},{"question":"In a distant magical kingdom, there are n magical stones arranged in a circle. Each stone has a power value associated with it. The i-th stone has a power b_i. The wizard of the kingdom is tasked with finding two stones in the circle such that the absolute difference of their power values is maximized. Since the stones are arranged in a circle, each stone has exactly two neighbors. The wizard can choose the two stones such that they don’t need to be directly adjacent. Your task is to help the wizard by finding the maximum absolute difference between the power values of any two stones. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of stones in the circle. The second line contains n space-separated integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^9), representing the power values of the stones. -----Output----- Output a single integer — the maximum absolute difference between the power values of any two stones. -----Examples----- Input 6 10 20 30 40 50 60 Output 50 Input 4 1 100 1 100 Output 99 -----Note----- For the first sample, the maximum absolute difference can be achieved between the stones with power values 10 and 60 or 20 and 70, giving the result 50. For the second sample, the maximum absolute difference can be achieved between the stones with power values 1 and 100, giving the result 99.","solution":"def max_absolute_difference(n, power_values): Returns the maximum absolute difference between any two power values in the given list. Parameters: n : int : number of stones (length of the list) power_values : list : list of integers representing the power values of stones Returns: int : maximum absolute difference between any two stones\' power values max_power = max(power_values) min_power = min(power_values) return max_power - min_power"},{"question":"# Rainwater Trap Given an array of non-negative integers representing the heights of bars in a histogram, write a function to calculate the maximum amount of water that can be trapped after raining. Each bar is one unit wide. For example, the array `[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]` represents the following histogram: ``` | | | | | | | | _|_ _|_| |_| ``` The function should return `6`, which is the maximum amount of water that can be trapped. Function signature: ```python def maximum_water_trap(height: List[int]) -> int: pass ``` **Input:** - `height`: A list of non-negative integers where each integer represents the height of the bars. **Output:** - An integer representing the maximum amount of water trapped.","solution":"from typing import List def maximum_water_trap(height: List[int]) -> int: if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Alice is a researcher in a biochemical lab, and she is studying chains of molecules. She models these chains as a sequence, where each molecule can either be reactive or inert. A reactive molecule can link with an inert molecule, and they form a stable pair. However, two reactive or two inert molecules cannot link directly. To continue her research effectively, Alice needs to know the maximum number of stable pairs she can form with a given sequence of molecules. Given a string `S` of length `n` (1 ≤ n ≤ 10^5) representing the sequence of molecules, each character in the string is either \'R\' (Reactive) or \'I\' (Inert), determine the maximum number of stable pairs Alice can form. -----Input----- The first line contains a single integer `n`, the length of the sequence of molecules. The second line contains the string `S` consisting of `n` characters, each being \'R\' or \'I\'. -----Output----- Print a single integer, the maximum number of stable pairs that can be formed. -----Examples----- Input 5 RIRRI Output 2 Input 6 RRIIII Output 2 Input 7 RRIIRII Output 3 -----Note----- In the first sample, Alice can form 2 stable pairs: one between the first \'R\' and the second \'I\', and another between the third \'R\' and the last \'I\'. In the second sample, Alice can form 2 stable pairs: one between the first \'R\' and the first \'I\', and another between the second \'R\' and the second \'I\'. In the third sample, Alice can form 3 stable pairs: one between the first \'R\' and the first \'I\', another between the second \'R\' and the second \'I\', and the last \'R\' with the last \'I\'.","solution":"def max_stable_pairs(n, S): Determines the maximum number of stable pairs that can be formed from the sequence. count_R = S.count(\'R\') count_I = S.count(\'I\') return min(count_R, count_I)"},{"question":"Complete the function that takes a positive integer `n` and returns a list of the first `n` prime numbers. Examples ```python n = 1 ==> [2] # first prime number is 2 n = 3 ==> [2, 3, 5] # first 3 prime numbers are 2, 3, 5 n = 5 ==> [2, 3, 5, 7, 11] # first 5 prime numbers are 2, 3, 5, 7, 11 ```","solution":"def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False max_divisor = int(num**0.5) + 1 for i in range(3, max_divisor, 2): if num % i == 0: return False return True def first_n_primes(n): primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return primes"},{"question":"-----General Statement:----- Given a string, check if it can be rearranged to form a palindrome. -----Input:----- The input is a single string that consists of lowercase alphabets (\'a\' to \'z\') with length L where 1 ≤ L ≤ 10^5. -----Output:----- Output \\"YES\\" if the string can be rearranged to a palindrome, otherwise output \\"NO\\". ----Assumptions:----- A palindrome is a word that reads the same backward as forward, such as \\"madam\\" or \\"racecar\\". ----Discussion:----- For a string to form a palindrome: - All characters must occur an even number of times (in the case of even length strings). - At most one character can occur an odd number of times (in the case of odd length strings). ----Sample Input:----- carrace ----Sample Output:----- YES ----Sample Input:----- hello -----Sample Output:----- NO","solution":"def can_form_palindrome(s): from collections import Counter char_counts = Counter(s) odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given two strings s and t. You want to transform string s into string t by applying the following operations any number of times: 1. Choose any character in s and replace it with another character. 2. Choose any character in s and delete it. Write a function that returns the minimum number of operations required to transform string s into string t. Example 1: Input: s = \\"sea\\", t = \\"eat\\" Output: 3 Explanation: You can transform \\"sea\\" into \\"eat\\" by performing the following operations: Replace \'s\' with \'e\': \\"sea\\" -> \\"eea\\" Replace the first \'e\' with \'a\': \\"eea\\" -> \\"eaa\\" Delete the second \'a\': \\"eaa\\" -> \\"eat\\" Example 2: Input: s = \\"leetcode\\", t = \\"etco\\" Output: 4 Explanation: You can transform \\"leetcode\\" into \\"etco\\" by performing the following operations: Delete \'l\': \\"leetcode\\" -> \\"eetcode\\" Delete the first \'t\': \\"eetcode\\" -> \\"eecode\\" Replace \'d\' with \'o\': \\"eecode\\" -> \\"ecoode\\" Delete \'o\': \\"ecoode\\" -> \\"etco\\" Constraints: 1. 1 <= s.length, t.length <= 1000 2. s and t consist of only lowercase English letters.","solution":"def min_operations(s, t): Returns the minimum number of operations required to transform string s into string t. m, n = len(s), len(t) # Create a dp table with (m+1) x (n+1) dp = [[0] * (n + 1) for _ in range(m + 1)] # Base case: converting empty string to any string t (by insertions) for j in range(n + 1): dp[0][j] = j # Base case: converting any string s to empty string (by deletions) for i in range(m + 1): dp[i][0] = i # Compute the cost for each substring pair (s[0:i], t[0:j]) for i in range(1, m + 1): for j in range(1, n + 1): if s[i-1] == t[j-1]: # Characters match, no operation needed for this character dp[i][j] = dp[i-1][j-1] else: # Minimum between replace operation, delete operation dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j]) return dp[m][n]"},{"question":"You are given a list of strings where each string contains three integers separated by spaces. Your task is to determine if these three integers can form the sides of a valid triangle. A valid triangle requires that the sum of any two of its sides must be greater than the third side. For each input string, return \\"Valid triangle\\" if the sides form a valid triangle, otherwise return \\"Invalid triangle\\". You will receive an input string containing these sets of integers formatted as follows: ``` 3 4 5 1 1 2 7 10 5 ``` And your output should be a string formatted as follows: ``` Valid triangle Invalid triangle Valid triangle ``` # Assumptions - Each string will contain exactly three integers. - The integers will be positive. - The input may contain any arbitrary number of sets.","solution":"def validate_triangles(input_str): def is_valid_triangle(sides): a, b, c = sides return (a + b > c) and (a + c > b) and (b + c > a) lines = input_str.strip().split(\'n\') results = [] for line in lines: sides = list(map(int, line.split())) if is_valid_triangle(sides): results.append(\\"Valid triangle\\") else: results.append(\\"Invalid triangle\\") return \'n\'.join(results)"},{"question":"Write a function that takes a list of non-negative integers `nums` and an integer `target` as input. The function should return all unique combinations of `nums` where the chosen numbers sum to `target`. Each number in `nums` may only be used once for each combination. The solution set must not contain duplicate combinations, and the combinations can be returned in any order. Constraints: - `nums` will have at most length 20. - Elements in `nums` will be in the range `[0, 50]`. - The `target` will be in the range `[0, 400]`. Example ```python nums = [10, 1, 2, 7, 6, 1, 5] target = 8 # The unique combinations that sum up to 8 are: # [ # [1, 1, 6], # [1, 2, 5], # [1, 7], # [2, 6], # [10] (since 10 itself is > 8, it\'s excluded) # ] output = [ [1, 1, 6], [1, 2, 5], [1, 7], [2, 6] ] nums = [2, 5, 2, 1, 2] target = 5 # The unique combinations that sum up to 5 are: # [ # [1, 2, 2], # [5] # ] output = [ [1, 2, 2], [5] ] ```","solution":"def combination_sum2(nums, target): def backtrack(start, end, temp_list, total): if total == target: results.append(temp_list[:]) return if total > target: return for i in range(start, end): if i > start and nums[i] == nums[i - 1]: continue temp_list.append(nums[i]) backtrack(i + 1, end, temp_list, total + nums[i]) temp_list.pop() nums.sort() results = [] backtrack(0, len(nums), [], 0) return results"},{"question":"A website is conducting a programming competition where participants need to solve problems within a given time limit. Each problem has a guaranteed points that a participant can earn and a penalty in minutes if not solved within the given time. Your task is to determine the final score for each participant. **-----Input:-----** - First line will contain N, number of participants. Then the details of the participants follow. - Each participant detail consists of three integers T which is the total time they took to solve the problem, P which is the points allocated for the problem, and F which is the maximum time allowed for the problem in minutes. **-----Output:-----** For each participant, output in a single line the final score they obtained. The final score is calculated as the points P if the problem was solved within the maximum time F, otherwise P - (T - F). **-----Constraints-----** - 1 leq N leq 10^3 - 0 leq T leq 10^3 - 1 leq P leq 100 - 1 leq F leq 100 **-----Sample Input:-----** 3 50 100 60 120 80 90 60 70 60 **-----Sample Output:-----** 100 50 70 **-----EXPLANATION:-----** The first participant solved the problem within the allowed time, hence, gets full points. The second participant took more time than allowed, thus the score is reduced by the penalty. The third participant used exactly the allowed time, so they receive full points.","solution":"def final_scores(participants): results = [] for participant in participants: T, P, F = participant if T <= F: results.append(P) else: results.append(P - (T - F)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') N = int(lines[0]) participants = [] for i in range(1, N + 1): T, P, F = map(int, lines[i].strip().split()) participants.append((T, P, F)) return participants"},{"question":"Write a function `is_anagram_palindrome` that determines whether any anagram of a given input string can form a palindrome. A palindrome is a string that reads the same forward and backward. Ignore spaces, punctuation, and case while considering the anagram possibilities. For example: ```cpp is_anagram_palindrome(\\"civic\\") == true; // \\"civic\\" is already a palindrome is_anagram_palindrome(\\"ivicc\\") == true; // \\"civic\\" can be an anagram is_anagram_palindrome(\\"hello\\") == false; // No anagram can be a palindrome is_anagram_palindrome(\\"racecar\\") == true; // \\"racecar\\" is already a palindrome is_anagram_palindrome(\\"A man, a plan, a canal, Panama!\\") == true; // \\"AmanaplanacanalPanama\\" can be an anagram \\"AmanaplanacanalPanama\\" ``` ```python is_anagram_palindrome(\\"civic\\") == True # \\"civic\\" is already a palindrome is_anagram_palindrome(\\"ivicc\\") == True # \\"civic\\" can be an anagram is_anagram_palindrome(\\"hello\\") == False # No anagram can be a palindrome is_anagram_palindrome(\\"racecar\\") == True # \\"racecar\\" is already a palindrome is_anagram_palindrome(\\"A man, a plan, a canal, Panama!\\") == True # \\"AmanaplanacanalPanama\\" can be an anagram \\"AmanaplanacanalPanama\\" ``` Strings will never be empty and can be composed of any character. The function should be efficient enough to handle long strings.","solution":"def is_anagram_palindrome(s): Determines if any anagram of the input string can form a palindrome. :param s: input string :return: True if an anagram can form a palindrome, False otherwise import re from collections import Counter # Remove non-alphanumeric characters and convert to lower case cleaned_s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Count the frequency of each character char_count = Counter(cleaned_s) # Check the number of characters that have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A palindrome can have at most one character with an odd frequency return odd_count <= 1"},{"question":"You are given a matrix of integers represented as a list of lists. Your goal is to rotate the matrix 90 degrees clockwise. # Task Write a function `rotate_matrix(matrix)` that takes a square matrix (list of lists) and returns the matrix rotated 90 degrees clockwise. # Examples ``` matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) => [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] matrix = [ [1, 2], [3, 4] ] rotate_matrix(matrix) => [ [3, 1], [4, 2] ] ``` # Note - The input matrix will always be a square matrix (n x n where n >= 1).","solution":"def rotate_matrix(matrix): Rotate a square matrix (list of lists) 90 degrees clockwise. Args: matrix (list of lists of int): A square matrix to be rotated. Returns: list of lists of int: The rotated matrix. n = len(matrix) # Create a new matrix with the same dimensions rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - 1 - i] = matrix[i][j] return rotated"},{"question":"=====Problem Statement===== Write a function that will take a list of tuples containing the names and ages of several individuals, and return a list of their names sorted by age in ascending order. If two or more individuals have the same age, maintain their original order in the input list. =====Example===== people = [(\\"John\\", 30), (\\"Jane\\", 25), (\\"Dave\\", 30), (\\"Ada\\", 22)] The ordered list of names by age is [\\"Ada\\", \\"Jane\\", \\"John\\", \\"Dave\\"]. =====Input Format===== You will be given a list of tuples where each tuple contains: - a string (the individual’s name) - an integer (the individual’s age) =====Constraints===== 1 ≤ len(people) ≤ 100 All individual names are unique strings containing only alphabetic characters. Ages are non-negative integers not exceeding 120. =====Output Format===== Return a list of names sorted by age in ascending order. If any two individuals have the same age, they should appear in the same order as in the input list.","solution":"def sort_names_by_age(people): Sorts a list of names by age in ascending order. If two or more individuals have the same age, their original order is maintained. Args: people (list of tuples): Each tuple contains a string (name) and an integer (age). Returns: list: List of names sorted by age. return [name for name, _ in sorted(people, key=lambda x: x[1])]"},{"question":"You are given a list of n distinct integers where each integer is in the range [1, n]. You need to divide the list into the minimum number of contiguous subarrays such that each subarray contains all consecutive numbers between the minimum and maximum elements of that subarray in any order. -----Input----- The first line contains a single integer t (1 leq t leq 1,000) denoting the number of test cases. Each test case begins with an integer n (1 leq n leq 100,000) denoting the number of elements in the list. The next line contains n distinct integers a_1, a_2, ldots, a_n (1 leq a_i leq n). The total sum of n over all test cases does not exceed 100,000. -----Output----- For each test case, output a single integer m: the minimum number of contiguous subarrays needed. -----Example----- Input 3 5 4 2 1 3 5 4 1 2 4 3 4 4 3 2 1 Output 1 1 1 -----Note----- In the first example, the entire list {4, 2, 1, 3, 5} can be considered as one valid subarray since it contains all integers from 1 to 5. In the second example, the list {1, 2, 4, 3} can be considered as one valid subarray since it contains all integers from 1 to 4. In the third example, the list {4, 3, 2, 1} can be considered as one valid subarray since it contains all integers from 1 to 4.","solution":"def min_contiguous_subarrays(n, arr): min_subarrays = 0 max_val = 0 expected_val = 1 for num in sorted(arr): if num > max_val: max_val = num if num == expected_val: expected_val += 1 if expected_val > max_val: expected_val = max_val + 1 return 1 if expected_val > n else 0 def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(min_contiguous_subarrays(n, arr)) return results"},{"question":"You are given a string S consisting of lowercase Latin letters. Your task is to find the shortest substring which contains at least K different characters. If no such substring exists, return -1. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains the integer K. - The second line of each test case contains the string S. -----Output----- For each test case, print a single integer - the length of the shortest substring that contains at least K different characters. If such a substring does not exist, print -1. -----Constraints----- - 1 le T le 100 - 1 le text{length of } S le 1000 - 1 le K le 26 -----Example Input----- 2 2 abcde 3 abc -----Example Output----- 2 3","solution":"def shortest_substring_with_k_distinct_characters(k, s): Returns the length of the shortest substring of s that contains at least k distinct characters. If no such substring exists, returns -1. n = len(s) if k > len(set(s)): return -1 min_len = float(\'inf\') for i in range(n): char_count = {} for j in range(i, n): char_count[s[j]] = char_count.get(s[j], 0) + 1 if len(char_count) >= k: min_len = min(min_len, j - i + 1) break return min_len if min_len != float(\'inf\') else -1 def process_test_cases(T, test_cases): results = [] for k, s in test_cases: results.append(shortest_substring_with_k_distinct_characters(k, s)) return results"},{"question":"You are given a binary tree and you need to write a function that determines the maximum depth of the tree. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. You need to consider the following constraints: - The binary tree may be empty, in which case its depth is 0. - Both recursive and iterative solutions are accepted, but implementing an iterative solution is preferred. -----Input----- The first line contains t, the number of test cases (around 20). Each test case consists of a series of numbers representing the tree in level-order traversal where \'null\' represents that the node does not exist. -----Output----- For each test case print a single line containing the maximum depth of the corresponding binary tree. -----Example----- Input: 2 3 9 20 null null 15 7 1 null 2 null 3 Output: 3 3 -----Output details----- In the first test case, the maximum depth is illustrated as follows: 3 / 9 20 / 15 7 The longest path is 3->20->15 or 3->20->7, both with a depth of 3. In the second test case, the binary tree looks like this: 1 2 3 The longest path is 1->2->3 with a depth of 3.","solution":"from collections import deque class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(level_order): if not level_order or level_order[0] == \'null\': return None root = TreeNode(int(level_order[0])) queue = deque([root]) index = 1 while index < len(level_order): current = queue.popleft() if level_order[index] != \'null\': current.left = TreeNode(int(level_order[index])) queue.append(current.left) index += 1 if index < len(level_order) and level_order[index] != \'null\': current.right = TreeNode(int(level_order[index])) queue.append(current.right) index += 1 return root def max_depth(root): if not root: return 0 queue = deque([(root, 1)]) max_depth = 0 while queue: node, depth = queue.popleft() max_depth = max(max_depth, depth) if node.left: queue.append((node.left, depth + 1)) if node.right: queue.append((node.right, depth + 1)) return max_depth"},{"question":"Alice is a botanist who loves studying different types of trees. One day, she encounters a problem regarding the heights of trees in a forest. She has a list of N integers where each integer represents the height of a tree. Alice is interested in grouping these trees such that the difference between the heights of any two trees in the same group does not exceed a certain value D. Your task is to help Alice determine the minimum number of groups required. -----Input:----- - The first line of input contains an integer N, the number of trees. - The second line contains N space-separated integers which represent the heights of the trees. - The third line contains the integer D, the maximum allowed height difference within a group. -----Output:----- - Output the minimum number of groups required. -----Constraints----- - 1 <= N <= 100 - 1 <= height of each tree <= 1000 - 1 <= D <= 100 -----Sample Input:----- 5 15 10 20 22 18 5 -----Sample Output:----- 2","solution":"def min_groups(N, heights, D): Returns the minimum number of groups required such that the difference between the heights of any two trees within the same group does not exceed D. # Sort the list of heights heights.sort() # Initialize the number of groups groups = 0 # Index to iterate over the heights i = 0 while i < N: # The current group starts with the first unassigned element current_height = heights[i] # Move to the next tree until the difference exceeds D while i < N and heights[i] - current_height <= D: i += 1 # One group is formed groups += 1 return groups"},{"question":"In a coordinate system, there is a zigzag path described by a sequence of moves. Each move can be either \\"Up\\", \\"Down\\", \\"Left\\", or \\"Right\\", affecting the coordinates in the following manner: - \\"Up\\" increases the y-coordinate by 1. - \\"Down\\" decreases the y-coordinate by 1. - \\"Left\\" decreases the x-coordinate by 1. - \\"Right\\" increases the x-coordinate by 1. Given an initial starting point (x0, y0) and a sequence of N moves, determine the final coordinates (xf, yf) after completing all the moves. Example: If the starting point is (2, 3) and the sequence of moves is [\\"Up\\", \\"Up\\", \\"Left\\", \\"Down\\"], the final coordinates will be (1, 4). Function Signature: ```python def final_coordinates(start_x: int, start_y: int, moves: List[str]) -> Tuple[int, int]: pass ``` **Input:** - An integer `start_x` representing the initial x-coordinate. - An integer `start_y` representing the initial y-coordinate. - A list of strings `moves` where each string is one of \\"Up\\", \\"Down\\", \\"Left\\", or \\"Right\\". **Output:** - A tuple (xf, yf) representing the final x-coordinate and y-coordinate after executing all the moves.","solution":"from typing import List, Tuple def final_coordinates(start_x: int, start_y: int, moves: List[str]) -> Tuple[int, int]: Determines the final coordinates after a series of moves starting from (start_x, start_y). Args: - start_x (int): Initial x-coordinate. - start_y (int): Initial y-coordinate. - moves (List[str]): List of moves which can be \\"Up\\", \\"Down\\", \\"Left\\", or \\"Right\\". Returns: - Tuple[int, int]: Final coordinates (xf, yf) after executing all the moves. x, y = start_x, start_y for move in moves: if move == \\"Up\\": y += 1 elif move == \\"Down\\": y -= 1 elif move == \\"Left\\": x -= 1 elif move == \\"Right\\": x += 1 return (x, y)"},{"question":"In a certain kingdom, there are N cities numbered from 1 to N. Each city is connected by a series of roads, which are bidirectional. These roads are considered as weighted edges in a graph. The King of the kingdom wants to set up a highly efficient transportation system by selecting some of these roads so that any city can be reached from any other city via some sequence of the selected roads, and the total cost is minimized. This problem can be solved using the Minimum Spanning Tree (MST) algorithm. You are tasked to determine the total cost of building this transportation network. -----Input----- - The first line of input contains a single integer T, the number of test cases. - Each test case starts with a line containing two integer values N and M, representing the number of cities and the number of roads in the kingdom. - The next M lines contain three integers ui, vi, wi each, representing a road between city ui and city vi with a cost of wi. -----Output----- For each test case, output a single integer, which should be the total minimum cost to connect all cities. If the return value is not possible, print -1. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 50000 - 1 ≤ ui, vi ≤ N - 1 ≤ wi ≤ 1000 -----Example----- Input: 2 4 5 1 2 10 1 3 15 2 3 5 2 4 20 3 4 25 3 3 1 2 6 1 3 8 2 3 10 Output: 30 14 -----Explanation----- For the first test case, the MST connects city 1 to city 2 with cost 10, city 2 to city 3 with cost 5, and city 2 to city 4 with cost 20. Thus, the total minimum cost is 10 + 5 + 20 = 35. For the second test case, the MST connects city 1 to city 2 with cost 6 and city 1 to city 3 with cost 8. Thus, the total minimum cost is 6 + 8 = 14.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_mst(n, edges): # Initialize result result = 0 # Step 1: Sort all the edges in non-decreasing order of their cost edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] # Create V subsets with single elements for node in range(n): parent.append(node) rank.append(0) e = 0 # Initialize number of edges in MST for edge in edges: if e == n - 1: break u, v, w = edge x = find(parent, u) y = find(parent, v) if x != y: e = e + 1 result += w union(parent, rank, x, y) # Check if MST includes all vertices if e != n - 1: return -1 return result def minimum_transportation_cost(T, test_cases): results = [] for test_case in test_cases: n, m, edges = test_case result = kruskal_mst(n, edges) results.append(result) return results"},{"question":"Given two strings, `s` and `t`, determine if `t` is an anagram of `s`. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Return `true` if `t` is an anagram of `s`, and `false` otherwise. Example 1: Input: s = \\"anagram\\", t = \\"nagaram\\" Output: true Example 2: Input: s = \\"rat\\", t = \\"car\\" Output: false Note: - You may assume the string contains only lowercase alphabets. - The length of the string is <= 10000.","solution":"def is_anagram(s, t): Determine if string t is an anagram of string s. :param s: str :param t: str :return: bool # Anagrams must be of the same length if len(s) != len(t): return False # Count characters in both strings and compare the counts from collections import Counter return Counter(s) == Counter(t)"},{"question":"Create a function that, given a list of integers, finds the contiguous subarray (containing at least one number) which has the largest sum and returns its sum. This is a well-known problem often referred to as the \\"Maximum Subarray Problem\\" which can be solved using Kadane\'s Algorithm. # Requirements - Your function should be efficient and handle both positive and negative numbers. - The input will be a single list of integers. # Input - A list `arr` of integers with length `n` (1 ≤ n ≤ 10^5). # Output - An integer representing the largest sum of the contiguous subarray. # Example ```python def max_subarray_sum(arr): # Your code here print(max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4])) # Output: 6 (subarray [4,-1,2,1]) print(max_subarray_sum([1])) # Output: 1 print(max_subarray_sum([5,4,-1,7,8])) # Output: 23 ``` # Explanation - In Example 1, the contiguous subarray with the largest sum is `[4,-1,2,1]`, which has a sum of `6`. - In Example 2, the array contains just one element, so the largest sum is the value of that element itself. - In Example 3, the entire array itself is the subarray with the largest sum. Implement the `max_subarray_sum` function utilizing Kadane\'s Algorithm for optimal performance.","solution":"def max_subarray_sum(arr): Finds the contiguous subarray that has the largest sum using Kadane\'s Algorithm. Parameters: arr (list of int): A list of integers. Returns: int: The sum of the contiguous subarray with the largest sum. # Initialize the maximum sum to the smallest possible integer max_so_far = float(\'-inf\') # Initialize the current subarray sum to 0 max_ending_here = 0 for num in arr: # Add the current number to the current subarray sum max_ending_here += num # Update the maximum sum if the current subarray sum is larger max_so_far = max(max_so_far, max_ending_here) # Reset the current subarray sum to 0 if it becomes negative if max_ending_here < 0: max_ending_here = 0 return max_so_far"},{"question":"Create a function called `collect_magic_potions` that takes an array of items and a second parameter: the list of known magic potion ingredients. If any of the items in the array match the known magic potion ingredients, return \\"A potion is brewing!\\" followed by a list of the found ingredients, each separated by a comma. If no ingredients are found, return \\"No potion today.\\" The known magic potion ingredients are: - Eye_of_Newt - Dragon_Scale - Unicorn_Hair - Phoenix_Feather - Bloodroot - Mandrake_Root - Bat_Wing - Mistletoe_Berry # Example ```python collect_magic_potions([\'Eye_of_Newt\', \'Wormwood\', \'Pixie_Dust\'], [\'Eye_of_Newt\', \'Dragon_Scale\', \'Unicorn_Hair\', \'Phoenix_Feather\', \'Bloodroot\', \'Mandrake_Root\', \'Bat_Wing\', \'Mistletoe_Berry\']) ``` Should return: ``` \'A potion is brewing! Eye_of_Newt\' ``` ```python collect_magic_potions([\'Stardust\', \'Fairy_Wing\'], [\'Eye_of_Newt\', \'Dragon_Scale\', \'Unicorn_Hair\', \'Phoenix_Feather\', \'Bloodroot\', \'Mandrake_Root\', \'Bat_Wing\', \'Mistletoe_Berry\']) ``` Should return: ``` \'No potion today\' ```","solution":"def collect_magic_potions(items, known_ingredients): Returns a message indicating whether any known magic potion ingredients are found in the items list. found_ingredients = [item for item in items if item in known_ingredients] if found_ingredients: return f\\"A potion is brewing! {\', \'.join(found_ingredients)}\\" else: return \\"No potion today\\""},{"question":"You are responsible for organizing a tournament where players compete in either singles or doubles matches. Each match can be in one of two categories: \'singles\' or \'doubles\'. The input is a list of tuples, where each tuple contains three elements: a string representing the category of the match (\'singles\' or \'doubles\'), an integer representing the player\'s seed ranking, and a floating-point number representing the score of the match. Write a function `match_summary` that takes as input this list of tuples and returns a dictionary with the following keys: - `\'total_singles\'`: The total number of singles matches. - `\'total_doubles\'`: The total number of doubles matches. - `\'highest_seed\'`: The highest seed ranking among all players. - `\'average_score\'`: The average score of all matches. The output dictionary should have these four keys with their corresponding values as described. # Examples: match_summary([(\'singles\', 1, 7.5), (\'doubles\', 2, 8.2), (\'singles\', 3, 6.3), (\'doubles\', 1, 9.1), (\'singles\', 2, 10.0)]) returns {\'total_singles\': 3, \'total_doubles\': 2, \'highest_seed\': 3, \'average_score\': 8.22} match_summary([(\'doubles\', 5, 8.2), (\'doubles\', 10, 7.4), (\'singles\', 6, 9.0)]) returns {\'total_singles\': 1, \'total_doubles\': 2, \'highest_seed\': 10, \'average_score\': 8.2}","solution":"def match_summary(matches): total_singles = 0 total_doubles = 0 highest_seed = float(\'-inf\') total_score = 0 num_matches = len(matches) for match in matches: category, seed, score = match if category == \'singles\': total_singles += 1 elif category == \'doubles\': total_doubles += 1 if seed > highest_seed: highest_seed = seed total_score += score average_score = total_score / num_matches if num_matches > 0 else 0 return { \'total_singles\': total_singles, \'total_doubles\': total_doubles, \'highest_seed\': highest_seed, \'average_score\': round(average_score, 2) }"},{"question":"# Introduction In a sequence of numbers, a pair of integers is considered a \\"magical pair\\" if their sum is even. Given an array of integers, your task is to determine the total number of \\"magical pairs\\" that can be formed from the array elements. # Task: Implement a function that accepts an array of integers and returns the number of \\"magical pairs\\" in the array.","solution":"def count_magical_pairs(numbers): Returns the number of magical pairs in the array. A pair (i, j) is magical if their sum is even and i < j. count = 0 n = len(numbers) for i in range(n): for j in range(i + 1, n): if (numbers[i] + numbers[j]) % 2 == 0: count += 1 return count"},{"question":"Write a function `process_commands()` that takes a list of commands for a text editor simulation. The commands allow you to type characters, delete characters, and undo the last action. Implement a function that applies these commands in order and returns the resulting text. # Commands - `\'TYPE <character>\'` - Appends the given character to the text. - `\'DELETE\'` - Removes the most recently typed character from the text. - `\'UNDO\'` - Reverts the last `\'TYPE\'` or `\'DELETE\'` command. # Input A list of strings where each string is a command. The list may include any number of commands. # Output A string representing the final text after executing all the commands. # Example ```python commands = [ \'TYPE a\', \'TYPE b\', \'DELETE\', \'TYPE c\', \'UNDO\' ] # Initial text: \\"\\" # After \'TYPE a\': \\"a\\" # After \'TYPE b\': \\"ab\\" # After \'DELETE\': \\"a\\" # After \'TYPE c\': \\"ac\\" # After \'UNDO\': \\"a\\" process_commands(commands) # Output: \\"a\\" ``` # Constraints - Commands will be valid and well-formed. - The `UNDO` command will always have a valid previous command to revert. - The characters to be typed are lowercase English letters. Implement the function as described.","solution":"def process_commands(commands): Process a series of text editor commands and return the resulting text. :param commands: List of command strings (e.g., \'TYPE a\', \'DELETE\', \'UNDO\') :return: The final text after processing all commands. text = [] history = [] for command in commands: if command.startswith(\'TYPE\'): _, char = command.split() text.append(char) history.append((\'TYPE\', char)) elif command == \'DELETE\': if text: removed_char = text.pop() history.append((\'DELETE\', removed_char)) elif command == \'UNDO\': if history: last_command, last_char = history.pop() if last_command == \'TYPE\': text.pop() elif last_command == \'DELETE\': text.append(last_char) return \'\'.join(text)"},{"question":"=====Function Descriptions===== In Python, the all() and any() functions evaluate boolean values across a list. .all(iterable) This function returns True if all elements of the iterable are true (or if the iterable is empty). >>> all([True, True, True]) True >>> all([True, False, True]) False .any(iterable) This function returns True if any element of the iterable is true. If the iterable is empty, it returns False. >>> any([True, False, False]) True >>> any([False, False, False]) False =====Problem Statement===== You are given a list of N integers. Your task is to determine if all the integers are positive and if any integer is a palindrome. =====Input Format===== The first line contains an integer, N (the size of the list). The second line contains N space-separated integers. =====Constraints===== 1 < N < 100 -10^5 < each integer < 10^5 =====Output Format===== Output True if all the integers in the list are positive and at least one integer is a palindrome. Otherwise, output False. =====Sample Input===== 5 12 9 61 5 14 =====Sample Output===== True","solution":"def is_positive_and_palindrome(nums): Determines if all integers in the list are positive and if any integer is a palindrome. Args: nums (list): A list of integers. Returns: bool: True if all integers are positive and any integer is a palindrome, else False. all_positive = all(num > 0 for num in nums) any_palindrome = any(str(num) == str(num)[::-1] for num in nums) return all_positive and any_palindrome"},{"question":"Write a function `isomorphicStrings(s, t) or isIsomorphic(s, t) or areIsomorphic(s, t) ...` (depending on the language) that given two strings `s` and `t`, determines if the two strings are isomorphic. Two strings are isomorphic if the characters in `s` can be replaced to get `t`. Examples: ``` isomorphicStrings(\\"egg\\", \\"add\\") === true isomorphicStrings(\\"foo\\", \\"bar\\") === false isomorphicStrings(\\"paper\\", \\"title\\") === true ```","solution":"def isomorphicStrings(s, t): Determines if two strings s and t are isomorphic. if len(s) != len(t): return False mapping_s_t = {} mapping_t_s = {} for char_s, char_t in zip(s, t): if char_s in mapping_s_t: if mapping_s_t[char_s] != char_t: return False else: mapping_s_t[char_s] = char_t if char_t in mapping_t_s: if mapping_t_s[char_t] != char_s: return False else: mapping_t_s[char_t] = char_s return True"},{"question":"Given a list of positive integers, determine the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to 1. For example, in the case of `[1, 3, 2, 3, 4, 2, 3]`, the longest contiguous subarray is `[3, 2, 3, 4]`, which has a length of `4`. `longest_subarray([1, 3, 2, 3, 4, 2, 3]) = 4`. Feel free to see the test cases for more examples. Good luck! If you like contiguous subarray Katas, please try [Maximum subarray sum](https://www.codewars.com/kata/54521e9ec8e60bc4de000d6c) [Contiguous subarray patterns](https://www.codewars.com/kata/544c84b2407a68e4810000b7)","solution":"def longest_subarray(nums): Determines the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to 1. Args: nums : list of int A list of positive integers. Returns: int The length of the longest contiguous subarray. if not nums: return 0 max_length = 1 current_length = 1 for i in range(1, len(nums)): if abs(nums[i] - nums[i - 1]) <= 1: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Your task is to implement an algorithm to determine if a given string containing only \'(\' and \')\' is a valid sequence of parentheses. _________________________________________________ Rules: 1. A valid sequence of parentheses follows these conditions: - Each opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. - A closing parenthesis \')\' cannot precede its corresponding opening parenthesis \'(\'. 2. Matched pairs of parentheses should be properly nested. Examples of valid sequences: - \\"()\\" - \\"(())\\" - \\"()()\\" - \\"(()())\\" Examples of invalid sequences: - \\"(\\" - \\"(()\\" - \\")(\\" - \\"())\\" 3. Consider the string input \'s\' to be given, and your task is to return a boolean value indicating whether the given string is a valid sequence of parentheses. _________________________________________________ Function signature: ```python def is_valid_parentheses(s: str) -> bool: ``` Input: string - s: a string containing only the characters \'(\' and \')\'. Example: \\"(()())\\", \\"())\\", \\"(())\\" Output: boolean: True if the sequence is valid, False otherwise. Example: True, False, True _________________________________________________ Examples: is_valid_parentheses(\\"()\\") -> True is_valid_parentheses(\\"(()\\") -> False is_valid_parentheses(\\"()()\\") -> True is_valid_parentheses(\\"((())\\") -> False","solution":"def is_valid_parentheses(s: str) -> bool: Check if the given string s containing only \'(\' and \')\' is a valid sequence of parentheses. # Initialize a counter to zero. counter = 0 # Traverse the string character by character for char in s: # Increment counter for an opening parenthesis if char == \'(\': counter += 1 # Decrement counter for a closing parenthesis elif char == \')\': counter -= 1 # If counter goes negative, we have more \')\' than \'(\' up to this point if counter < 0: return False # If counter is zero, then all opening parentheses have a corresponding closing parentheses return counter == 0"},{"question":"Given a string s consisting of words and spaces, return the length of the shortest word in the string. A word is defined as a sequence of characters that are not spaces. If there are multiple words with the same shortest length, return the length of one of these words. Example 1: Input: \\"The quick brown fox jumps over the lazy dog\\" Output: 3 Explanation: The shortest words are \\"The\\", \\"fox\\", \\"the\\", and \\"dog\\", which all have 3 characters. Example 2: Input: \\" Hello there world \\" Output: 5 Explanation: The words are \\"Hello\\", \\"there\\", and \\"world\\". The shortest word is \\"Hello\\" or \\"world\\", both having 5 characters. Example 3: Input: \\"Single\\" Output: 6 Explanation: The only word is \\"Single\\", which has 6 characters. Note: - s will have a length at most 10^5. - s will contain only lowercase and uppercase English letters and spaces. - There will be at least one word in s.","solution":"def length_of_shortest_word(s: str) -> int: Returns the length of the shortest word in the string s. A word is defined as a sequence of characters that are not spaces. words = s.split() if not words: return 0 shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"In a land filled with enchanted forests, different segments of the forest are inhabited by magical creatures. Each segment of the forest has a unique energy value associated with it. You, as an explorer, need to calculate the total energy of creatures in various segments of the forest based on different queries. -----Input:----- - The first line of the input contains a single integer T, denoting the number of test cases. The description of T test cases is as follows. - The next line of the input contains a single integer N, denoting the total number of forest segments. - The next line of the input contains N space-separated integers E1, E2, E3...En where the i-th number denotes the energy value of the i-th forest segment. - The next line contains a single integer Q, denoting the total number of queries. - The next Q lines contain two space-separated integers S and E, representing the start and end segment indices for each query. (Segments are numbered from 1 to N) -----Output:----- - For each query, print the total energy value of the segments, each on a new line. -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 10^4 - 1 leq E1, E2, E3...En leq 10^5 - 1 leq Q leq 10^3 - 1 leq S, E leq N -----Sample Input:----- 1 5 3 1 4 1 5 3 1 3 2 5 3 4 -----Sample Output:----- 8 11 5 -----Explanation:----- - For the first query, the total energy from segment 1 to segment 3 is 3+1+4=8 - For the second query, the total energy from segment 2 to segment 5 is 1+4+1+5=11 - For the third query, the total energy from segment 3 to segment 4 is 4+1=5","solution":"def total_energy(T, test_cases): results = [] for case in test_cases: N, energies, Q, queries = case for query in queries: S, E = query results.append(sum(energies[S-1:E])) return results def read_inputs(inputs): index = 0 T = int(inputs[index]) index += 1 test_cases = [] for _ in range(T): N = int(inputs[index]) index += 1 energies = list(map(int, inputs[index].split())) index += 1 Q = int(inputs[index]) index += 1 queries = [] for _ in range(Q): S, E = map(int, inputs[index].split()) index += 1 queries.append((S, E)) test_cases.append((N, energies, Q, queries)) return T, test_cases"},{"question":"# Context and Definitions You are designing a new class in Python to manage a collection of books in a library. Each book is represented as a dictionary with attributes: `title`, `author`, `year`, and `genre`. Your goal is to build a class that allows you to perform operations like adding a new book, retrieving books by a specific attribute, and displaying all books in a formatted string. Your class should be named `Library`, and it should include the following methods: 1. `__init__(self)`: Initializes the class with an empty list of books. 2. `add_book(self, title, author, year, genre)`: Adds a new book to the library. The book should be represented as a dictionary with the keys: `title`, `author`, `year`, and `genre`. 3. `get_books_by_author(self, author)`: Returns a list of books written by the specified author. 4. `get_books_by_year(self, year)`: Returns a list of books published in the specified year. 5. `display_books(self)`: Returns a formatted string containing details of all books in the library. # Example Usage ```python library = Library() library.add_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960, \\"Fiction\\") library.add_book(\\"1984\\", \\"George Orwell\\", 1949, \\"Dystopian\\") library.add_book(\\"Pride and Prejudice\\", \\"Jane Austen\\", 1813, \\"Romance\\") library.add_book(\\"Animal Farm\\", \\"George Orwell\\", 1945, \\"Political Satire\\") # Retrieve books by author print(library.get_books_by_author(\\"George Orwell\\")) # Output: [{\'title\': \'1984\', \'author\': \'George Orwell\', \'year\': 1949, \'genre\': \'Dystopian\'}, {\'title\': \'Animal Farm\', \'author\': \'George Orwell\', \'year\': 1945, \'genre\': \'Political Satire\'}] # Retrieve books by year print(library.get_books_by_year(1949)) # Output: [{\'title\': \'1984\', \'author\': \'George Orwell\', \'year\': 1949, \'genre\': \'Dystopian\'}] # Display all books print(library.display_books()) # Output: # Title: To Kill a Mockingbird, Author: Harper Lee, Year: 1960, Genre: Fiction # Title: 1984, Author: George Orwell, Year: 1949, Genre: Dystopian # Title: Pride and Prejudice, Author: Jane Austen, Year: 1813, Genre: Romance # Title: Animal Farm, Author: George Orwell, Year: 1945, Genre: Political Satire ``` Implement the `Library` class in Python, ensuring that it has the required methods and functionality as described above.","solution":"class Library: def __init__(self): self.books = [] def add_book(self, title, author, year, genre): book = {\'title\': title, \'author\': author, \'year\': year, \'genre\': genre} self.books.append(book) def get_books_by_author(self, author): return [book for book in self.books if book[\'author\'] == author] def get_books_by_year(self, year): return [book for book in self.books if book[\'year\'] == year] def display_books(self): return \'n\'.join( f\\"Title: {book[\'title\']}, Author: {book[\'author\']}, Year: {book[\'year\']}, Genre: {book[\'genre\']}\\" for book in self.books )"},{"question":"Mia is playing a game where she has to collect stones from a series of piles. Each pile has a certain number of stones, and Mia can collect from the piles following specific rules. She can only collect stones from a single pile at any time, but she can choose any pile to collect from. Furthermore, she cannot move to a pile with fewer stones than the one she is currently collecting from unless she decides to start collecting from that new pile anew. Given the number of piles and the number of stones in each pile, write a program to help Mia determine the maximum total stones she can collect following the rules. -----Input----- The first line contains an integer n (1 le n le 100,000) — the number of piles. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the number of stones in each pile. -----Output----- Output a single integer — the maximum total stones Mia can collect. -----Example----- Input 5 2 3 1 5 4 Output 15 -----Note----- In the example, Mia can collect the stones in the following order: 5, 3, 2, 1, 4. After collecting 5 stones from the fourth pile, she can reset and collect the remaining piles in any order because starting anew allows her to bypass the decreasing number restriction. This sequence gives her a total of 15 stones.","solution":"def max_total_stones(n, piles): Returns the maximum total stones Mia can collect from piles. Parameters: n (int): The number of piles. piles (list of int): A list of integers representing the number of stones in each pile. Returns: int: The maximum total stones she can collect. return sum(piles)"},{"question":"# Sum of Evenly Spaced Elements You are given a list of integers `arr` and two integers `k` and `m`. Your task is to compute the sum of every `k`th element in the list, starting from the `m`th element (1-based index). Write a function `sum_evenly_spaced_elements(arr, k, m)` that takes in three arguments: - `arr`, a list of integers. - `k`, an integer indicating the step size. - `m`, an integer indicating the starting position (1-based). Return the sum of every `k`th element starting from the `m`th element. If `m` is out of the bounds of the list, return 0. # Example ```python def sum_evenly_spaced_elements(arr, k, m): # Your implementation goes here # Example 1 arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] k = 2 m = 3 print(sum_evenly_spaced_elements(arr, k, m)) # Output: 18 (3 + 5 + 7 + 9) # Example 2 arr = [10, 20, 30, 40, 50] k = 3 m = 2 print(sum_evenly_spaced_elements(arr, k, m)) # Output: 70 (20 + 50) # Example 3 arr = [1, 2, 3, 4, 5] k = 1 m = 6 print(sum_evenly_spaced_elements(arr, k, m)) # Output: 0 (m is out of bounds) ``` # Constraints - `1 <= len(arr) <= 10^5` - `1 <= k <= len(arr)` - `1 <= m <= len(arr) or m` might be larger than the length of `arr` - The elements of `arr` are integers within the range `[-10^4, 10^4]`","solution":"def sum_evenly_spaced_elements(arr, k, m): Returns the sum of every k-th element in the list, starting from the m-th element (1-based). Parameters: arr (list): List of integers. k (int): Step size. m (int): Starting position (1-based index). Returns: int: Sum of every k-th element starting from the m-th element. # Adjust the 1-based index m to 0-based index start = m - 1 # If the starting index is out of bounds, return 0 if start >= len(arr) or start < 0: return 0 # Calculate the sum of every k-th element starting from the m-th element total_sum = 0 for i in range(start, len(arr), k): total_sum += arr[i] return total_sum"},{"question":"Given a list of integers representing heights of buildings in a skyline, you need to determine the number of valleys in the skyline. A valley is defined as a sequence of three consecutive buildings where the height of the middle building is less than the height of both its neighboring buildings. Your task is to count the number of such valleys in the skyline. -----Input----- - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N representing the number of buildings. - The second line contains N space-separated integers H_1, H_2, ldots, H_N where H_i represents the height of the i-th building. -----Output----- For each test case, print a single line containing the number of valleys in the corresponding skyline. -----Constraints----- - 1 le T le 100 - 3 le N le 1000 - 1 le H_i le 1000 for each valid i -----Example Input----- 2 5 3 1 4 6 1 6 1 3 2 3 1 2 -----Example Output----- 1 2 -----Explanation----- Example case 1: There is only one valley formed by the sequence (3, 1, 4). Example case 2: Two valleys are formed by the sequences (3, 2, 3) and (3, 1, 2).","solution":"def count_valleys(skyline): count = 0 for i in range(1, len(skyline) - 1): if skyline[i] < skyline[i - 1] and skyline[i] < skyline[i + 1]: count += 1 return count def count_valleys_in_test_cases(test_cases): results = [] for i in range(0, len(test_cases), 2): N = test_cases[i] skyline = test_cases[i + 1] results.append(count_valleys(skyline)) return results"},{"question":"Design a function to determine the sum of all unique prime factors of the product of an array of integers. Given an array of integers `arr`, compute the product of all the integers in the array. Then, find all unique prime factors of that product and return their sum. ---Input--- - An integer `n` representing the number of elements in the array. - An array of integers `arr` of length `n`. ---Output--- - Print the sum of all unique prime factors of the product of the integers in the array. ---Constraints--- - `1 <= n <= 10` - `1 <= arr[i] <= 100` ---Sample Input--- ``` 5 2 3 5 7 8 ``` ---Sample Output--- ``` 17 ``` ---Explanation--- The product of the array `[2, 3, 5, 7, 8]` is `2 * 3 * 5 * 7 * 8 = 1680`. The prime factors of 1680 are `2, 3, 5,` and `7`. The sum of these unique prime factors is `2 + 3 + 5 + 7 = 17`.","solution":"def sum_of_unique_prime_factors(arr): Given an array of integers, this function calculates the sum of all unique prime factors of the product of all numbers in the array. def product_of_array(arr): product = 1 for num in arr: product *= num return product def prime_factors(n): factors = set() # Check for number of 2s that divide n while n % 2 == 0: factors.add(2) n = n // 2 # n must be odd at this point. So a skip of 2 (i = i + 2) can be used for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.add(i) n = n // i if n > 2: factors.add(n) return factors product = product_of_array(arr) unique_prime_factors = prime_factors(product) return sum(unique_prime_factors) # Example: # arr = [2, 3, 5, 7, 8] # print(sum_of_unique_prime_factors(arr)) # Output should be 17"},{"question":"You are responsible for developing a system that manages the rewards earned by users of a fitness app. The app awards points to users based on the number of steps they walk each day. Write a function `calculate_reward_points` that takes two arguments: `steps` (a list of non-negative integers where each integer represents the number of steps walked in a day) and `threshold` (an integer representing the number of steps required to earn reward points for that day). The function should return the total number of reward points earned. The reward points are awarded as follows: - For each day where the number of steps is less than the threshold, no points are awarded. - For each day where the number of steps is greater than or equal to the threshold but less than twice the threshold, one point is awarded. - For each day where the number of steps is at least twice the threshold, two points are awarded. Example: ```python steps = [1500, 3000, 4500, 6000] threshold = 3000 calculate_reward_points(steps, threshold) # should return 4 ```","solution":"def calculate_reward_points(steps, threshold): Calculate the total reward points based on the number of steps walked each day and the threshold. Parameters: steps (list of int): A list of non-negative integers representing the number of steps walked each day. threshold (int): The number of steps required to earn reward points for that day. Returns: int: The total reward points earned. total_points = 0 for step in steps: if step >= 2 * threshold: total_points += 2 elif step >= threshold: total_points += 1 return total_points"},{"question":"Steve recently discovered a new material in Minecraft called \\"Brightstone\\", which glimmers beautifully at night. He wants to build a lighthouse with this radiant material to guide him during his nighttime expeditions. To construct the lighthouse, Steve needs a specific number of Brightstone blocks. Each Brightstone block takes 5 seconds* to refine from raw Brightstone ore. Steve has several types of smelters at his disposal, each with its own refining rate and fuel efficiency: * Electric Smelter, refines at 2 seconds per block, consumes 2 units of energy per block. * Regular Furnace, refines at 5 seconds per block, consumes 1 unit of energy per block. * Old Furnace, refines at 7 seconds per block, consumes 3 units of energy per block. Energy sources available: * Solar Panel, provides 100 units of energy per hour**. * Wind Turbine, provides 60 units of energy per hour**. * Hydro Generator, provides 150 units of energy per hour**. Your task is to write a function to calculate the **minimal time** required to produce a given number of Brightstone blocks using the available smelters and energy sources. In Python: Write a function `minimal_refining_time(smelter, num_blocks)` that takes two arguments: 1. `smelter` - a string indicating the type of smelter (\'electric\', \'regular\', or \'old\'). 2. `num_blocks` - an integer representing the number of Brightstone blocks to refine. The function should return the minimal time (in seconds) required to refine the specified number of Brightstone blocks with the given smelter. You can assume that the energy required for any given smelter will always be sufficiently provided by the energy sources available. Example: ```python minimal_refining_time(\'electric\', 10) # Returns: 20 minimal_refining_time(\'regular\', 10) # Returns: 50 minimal_refining_time(\'old\', 10) # Returns: 70 ``` *fictional values **assumed consistent energy supply to avoid minute-to-minute variability To all the Minecraft enthusiasts: If you find this problem intriguing, consider contributing more puzzles involving new and exciting materials or challenging smelter combinations. Some ideas we could explore next: - Optimizing energy usage among multiple smelter types. - Introducing new materials with unique refining requirements. - Exploring combinations of construction materials and their effects on building integrity. Feel free to create and share your katas. Let\'s keep the Minecraft coding series expanding and fun!","solution":"def minimal_refining_time(smelter, num_blocks): Returns the minimal time required to refine the specified number of Brightstone blocks given the type of smelter. if smelter == \'electric\': refining_time_per_block = 2 elif smelter == \'regular\': refining_time_per_block = 5 elif smelter == \'old\': refining_time_per_block = 7 else: raise ValueError(\\"Invalid smelter type\\") return refining_time_per_block * num_blocks"},{"question":"A company wants to implement a new feature in their financial software to help users calculate the interest on their savings. The software should allow users to input the initial amount of savings, the annual interest rate, and the number of years the savings will be held in the account. The interest is compounded annually. Your task: Write a function that takes three arguments: 1. `initial_amount` (a positive integer representing the initial amount of savings) 2. `annual_interest_rate` (a positive integer representing the annual interest rate as a percentage) 3. `years` (a non-negative integer representing the number of years the savings will be held) The function should return a floating point number representing the total amount of savings after the specified number of years, rounded to two decimal places. For example, if the initial amount is 1000, the annual interest rate is 5%, and the number of years is 3, the total amount of savings after 3 years should be calculated as follows: Year 1: 1000 * (1 + 5/100) = 1050 Year 2: 1050 * (1 + 5/100) = 1102.5 Year 3: 1102.5 * (1 + 5/100) = 1157.625 The function should return 1157.63 (rounded to two decimal places). Handle the edge case where the number of years is 0 by returning the initial amount unchanged. Note: 1. Assume the inputs are always valid and no need for input validation. 2. You can use the power function (`**`) in your solution to simplify the calculations.","solution":"def calculate_savings(initial_amount, annual_interest_rate, years): Calculate the total amount of savings after a certain number of years with compound interest. :param initial_amount: Positive integer, the initial amount of savings. :param annual_interest_rate: Positive integer, the annual interest rate as a percentage. :param years: Non-negative integer, the number of years the savings will be held. :return: Floating point number, the total amount of savings rounded to two decimal places. if years == 0: return float(initial_amount) final_amount = initial_amount * (1 + annual_interest_rate / 100) ** years return round(final_amount, 2)"},{"question":"Given a list of integers, create a function that returns the length of the longest consecutive element sequence. For example, ``` [100, 4, 200, 1, 3, 2] --> 4 (The longest consecutive sequence is [1, 2, 3, 4]) [0, 3, 7, 2, 5, 8, 4, 6, 0, 1] --> 9 (The longest consecutive sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]) ``` The input list may contain duplicates and multiple sequences, but you only need to find and return the length of the longest one.","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence in the list nums. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: if num - 1 not in nums_set: # Only start a sequence if num is the start of the sequence current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a function that takes a string as input and returns the string with the order of characters reversed for each word while preserving the order of words. If the input is not a string, the function should return \\"Invalid input\\". # Examples ```python reverseWords(\\"hello world\\") # should return \\"olleh dlrow\\" reverseWords(\\"Python is fun\\") # should return \\"nohtyP si nuf\\" reverseWords([\\"Not\\", \\"a\\", \\"string\\"]) # should return \\"Invalid input\\" ```","solution":"def reverseWords(s): This function takes a string and returns the string with the order of characters reversed for each word while preserving the order of words. If the input is not a string, the function returns \\"Invalid input\\". if not isinstance(s, str): return \\"Invalid input\\" words = s.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"You are responsible for managing an online library system. The library system has a list of books available for borrowing. Each book is identified by its unique ID number, and books can be borrowed by users based on availability. To ensure an efficient system, you need to implement a function that checks the availability of a specific book and updates the status after a book is borrowed. -----Input:----- - First-line will contain N, the total number of books and Q, the total number of queries. - The second line contains N integers, representing the book IDs of all available books. - The next Q lines contain a single integer each, representing a book ID for which the availability is to be checked and updated. -----Output:----- - For each query, print \\"Available\\" if the book ID is available for borrowing. - Print \\"Not Available\\" if the book ID has already been borrowed. - After checking and updating the status for each query, that book ID should be marked as not available. -----Constraints----- - 1 leq N, Q leq 10^5 - 1 leq book ID leq 10^9 -----Sample Input:----- 5 3 101 102 103 104 105 102 104 107 -----Sample Output:----- Available Available Not Available","solution":"def manage_library(N, Q, book_ids, queries): available_books = set(book_ids) results = [] for query in queries: if query in available_books: results.append(\\"Available\\") available_books.remove(query) else: results.append(\\"Not Available\\") return results # Sample Input: N, Q, book_ids, queries N = 5 Q = 3 book_ids = [101, 102, 103, 104, 105] queries = [102, 104, 107] # Execution output = manage_library(N, Q, book_ids, queries) for result in output: print(result)"},{"question":"You are given an array of n integers. You need to find the smallest integer k such that after inserting k in the array, the median of the array becomes k. -----Input----- First line contains a single integer T denoting the number of test cases. T test cases follow. Each test case consists of two lines: - The first line contains a single integer n denoting the number of integers in the array. - The second line contains n space-separated integers denoting the elements of the array. -----Output----- For each test case, output a single line containing the smallest integer k such that the median of the array (including k) becomes k. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 105 - -109 ≤ array[i] ≤ 109 -----Subtasks----- Subtask #1: 30 points - 1 ≤ n ≤ 1000 Subtask #2: 70 points - 1 ≤ n ≤ 105 -----Example----- Input: 2 3 1 2 4 5 6 7 4 3 1 Output: 2 4 -----Explanation----- In the first example, inserting 2 into the array [1, 2, 4] yields [1, 2, 2, 4]. The new median is 2. In the second example, inserting 4 into the array [6, 7, 4, 3, 1] yields [1, 3, 4, 4, 6, 7]. The new median is 4.","solution":"def find_k_to_make_median(arr): Given an array of integers, determine the smallest integer k such that after inserting k in the array, the median of the array becomes k. arr.sort() n = len(arr) # Depending on whether n is even or odd if n % 2 == 0: return arr[n // 2 - 1] else: return arr[n // 2] def process_test_cases(T, test_cases): results = [] for i in range(T): n, arr = test_cases[i] k = find_k_to_make_median(arr) results.append(k) return results"},{"question":"You are planning a vacation and want to determine the minimum number of consecutive days you need to book to ensure you have at least one planned activity every day. You have a list of planned activities, each represented by the day on which it occurs. # input ```if-not:c * activities: an array of positive integers representing the days on which activities are planned. ``` ```if:c * activities: a pointer to an array of positive integers representing the days on which activities are planned. * activities_length: the length of the array that `activities` points to. ``` # output The function should return an integer, the minimum number of consecutive days required. ------------------------------------------- Important **Please look at the examples and clarifications below, to ensure you understand the task correctly :)** ------- # Examples ```python min_consecutive_days([4, 2, 11, 6, 8]) # should return 6 # Because the smallest block of consecutive days that covers all the activities is from day 2 to day 8. min_consecutive_days([1, 3, 7]) # should return 7 # Because the smallest block of consecutive days that covers all the activities is from day 1 to day 7. min_consecutive_days([10, 10, 10]) # should return 1 # Because all activities are on the same day, so only one day is needed. ``` # Clarifications * All planned activities are on distinct days unless specified otherwise. * One vacation day can cover multiple activities if they occur on the same day. * You are guaranteed to have at least one activity in the list.","solution":"def min_consecutive_days(activities): Determines the minimum number of consecutive days required to cover all activities. :param activities: List of positive integers representing the days on which activities are planned. :return: Integer representing the minimum number of consecutive days. # If there are no activities, return 0 (although per problem, there\'s at least one activity) if not activities: return 0 # Find the minimum and maximum day from the activities list min_day = min(activities) max_day = max(activities) # The number of consecutive days required is the range from min_day to max_day (inclusive) return max_day - min_day + 1"},{"question":"A courier company operates in a city that can be represented as a 2D grid with intersections. Each intersection can be represented by its coordinates (x, y), where x and y are integers. The company uses two types of vehicles: 1. **Powered Bikes** - these bikes can travel horizontally or vertically to any adjacent intersection. 2. **Flying Drones** - these drones can travel diagonally to any adjacent intersection. Initially, the company\'s headquarters is located at the origin (0, 0). However, the headsquarter\'s power unit is faulty and causes the powered bikes and drones to behave differently under certain conditions. Each type of vehicle has a set of conditions: 1. A powered bike requires one energy unit to move to each adjacent intersection horizontally or vertically. Moving diagonally is not possible. 2. A flying drone requires one energy unit to move to each adjacent intersection diagonally. Moving horizontally or vertically is not possible. The company wants to calculate the minimum energy required for powered bikes or flying drones to reach target intersections in specified tasks. **Task:** For each task, calculate the minimum energy required for either a powered bike or a flying drone to reach the target intersection from the headquarters (0, 0). **Input Format:** - The first line contains an integer `q` (1 ≤ q ≤ 1000), the number of tasks. - Each of the following `q` lines contains an integer `t` (1 for powered bike, 2 for flying drone) followed by two integers x and y (the coordinates of the target intersection). **Output Format:** - For each task, print the minimum energy required for the specified vehicle to reach the target intersection. **Example:** ``` Input: 4 1 -2 3 2 5 5 2 3 6 1 4 -1 Output: 5 5 6 5 ``` **Explanation:** 1. For the first task, a powered bike at (0, 0) needs 5 energy units to move to (-2, 3) using the path (0, 0) -> (-1, 0) -> (-2, 0) -> (-2, 1) -> (-2, 2) -> (-2, 3). 2. For the second task, a flying drone at (0, 0) needs 5 energy units to move to (5, 5) using the diagonal path (0, 0) -> (1, 1) -> (2, 2) -> (3, 3) -> (4, 4) -> (5, 5). 3. For the third task, a flying drone at (0, 0) needs 6 energy units to move to (3, 6) using a diagonal path. 4. For the last task, a powered bike at (0, 0) needs 5 energy units to reach (4, -1) using the optimal path.","solution":"def calculate_minimum_energy(q, tasks): results = [] for task in tasks: t, x, y = task if t == 1: # Powered bike: moves horizontally or vertically energy = abs(x) + abs(y) elif t == 2: # Flying drone: moves diagonally energy = max(abs(x), abs(y)) results.append(energy) return results"},{"question":"You are given a list of integers heights representing the heights of buildings. You are standing at the first building and you need to cross all buildings to reach the last one. You can only jump from building i to building j if the height difference between buildings i and j is at most 1 (i.e., |heights[i] - heights[j]| <= 1). Your task is to find the minimum number of jumps needed to reach the last building from the first one. If it\'s not possible to reach the last building, return -1. Example 1: Input: [1, 2, 3, 4, 5] Output: 4 Explanation: From building 1, jump to building 2, then jump to building 3, then jump to building 4, and finally jump to building 5. A total of 4 jumps are needed. Example 2: Input: [5, 4, 3, 2, 1, 2] Output: 5 Explanation: From building 5, jump to building 4, then jump to building 3, jump to building 2, jump to building 1, and finally reach building 2. A total of 5 jumps are needed. Example 3: Input: [1, 3, 5, 2, 4, 6] Output: -1 Explanation: It is not possible to cross from the first to the last building given the height constraints. Note: - heights.length >= 1 - heights contains only non-negative integers and heights[i] <= 10^4","solution":"from collections import deque def min_jumps(heights): Returns the minimum number of jumps needed to reach the last building from the first one, or -1 if it is not possible. if not heights or len(heights) == 1: return 0 n = len(heights) visited = [False] * n queue = deque([(0, 0)]) # (current_building_index, current_jump_count) while queue: index, jumps = queue.popleft() if index == n - 1: return jumps for next_index in [index - 1, index + 1]: if 0 <= next_index < n and not visited[next_index]: if abs(heights[index] - heights[next_index]) <= 1: visited[next_index] = True queue.append((next_index, jumps + 1)) return -1 # Example usage heights_example = [1, 2, 3, 4, 5] print(min_jumps(heights_example)) # Should output 4"},{"question":"David, a software engineer, is building a chatbot that processes user messages and extracts various pieces of information. One of the tasks requires identifying dates in the format \'dd-mm-yyyy\' from a given string. Your task is to help David by writing a function that identifies all unique dates in this format from a string of text. -----Input----- The first line of input contains an integer N denoting the number of test cases. The description of N test cases follows. The first line of each test case contains a string S, consisting of Latin letters, digits, and punctuation marks. -----Output----- For each test case, output a single line containing the number of unique dates in \'dd-mm-yyyy\' format appearing in the given string. -----Constraints----- - 1 ≤ N ≤ 100 - Subtask 1 (40 points): 1 ≤ |S| ≤ 50 - Subtask 2 (60 points): 1 ≤ |S| ≤ 105 -----Example----- Input: 2 On 12-05-2021 and on 15-05-2021 there are meetings. Important dates: 01-01-2020, 02-02-2021, and 01-01-2020. Output: 2 2 -----Explanation----- Example case 1. The dates are 12-05-2021 and 15-05-2021. Example case 2. The dates are 01-01-2020 and 02-02-2021.","solution":"import re def find_unique_dates(n, test_cases): This function takes in an integer n and a list of n strings (test_cases). It returns a list of integers where each integer is the number of unique dates in \'dd-mm-yyyy\' format in the corresponding input string. results = [] date_pattern = re.compile(r\'b(d{2}-d{2}-d{4})b\') for case in test_cases: dates = set(re.findall(date_pattern, case)) results.append(len(dates)) return results"},{"question":"You are given an array of integers A of length N and an integer K. Find the number of pairs of indices (i, j) such that i < j and the difference between the i-th and j-th elements is exactly K, i.e., |A[i] - A[j]| = K. -----Input----- The first line of the input contains two integers N and K. The second line contains N integers — the elements of array A. -----Output----- Print a single line containing one integer — the number of pairs (i, j) such that |A[i] - A[j]| = K. -----Constraints----- - 2 le N le 1,000 - 0 le K le 10^4 - -10^4 le A[i] le 10^4 -----Subtasks----- Subtask #1 (25 points): N le 100 Subtask #2 (75 points): original constraints -----Example Input----- 5 3 1 5 2 4 6 -----Example Output----- 2 -----Explanation----- The pairs of indices that satisfy the condition |A[i] - A[j]| = 3 are (1, 2) and (0, 4). Hence, the output is 2.","solution":"def count_pairs_with_difference_k(arr, n, k): Counts the number of pairs (i, j) such that i < j and |arr[i] - arr[j]| = k Parameters: arr (list of int): List of integers n (int): Length of the array k (int): The difference to check Returns: int: Number of pairs satisfying the condition count = 0 for i in range(n): for j in range(i + 1, n): if abs(arr[i] - arr[j]) == k: count += 1 return count"},{"question":"# Task Given a string `s`, find the length of the longest contiguous substring that contains at most `k` unique characters. Write a function that accepts the following parameters: - A string `s` of lowercase English letters with at least 1 character and at most 10^4 characters. - An integer `k` which is the maximum number of unique characters allowed in the substring. The function should return an integer representing the length of the longest contiguous substring that contains at most `k` unique characters. # Example For s = \\"eceba\\" and k = 2, the longest substring with at most 2 unique characters is \\"ece\\", so the result should be 3. For s = \\"aa\\" and k = 1, the longest substring with at most 1 unique character is \\"aa\\", so the result should be 2. # Input/Output - `[input]` string `s` A string `s` of lowercase English letters. 1 <= s.length <= 10^4 - `[input]` integer `k` The number of unique characters allowed in the substring. 1 <= k <= 26 - `[output]` an integer The length of the longest contiguous substring that contains at most `k` unique characters.","solution":"def length_of_longest_substring_k_unique(s, k): Returns the length of the longest contiguous substring with at most k unique characters. if k == 0: return 0 n = len(s) if n == 0: return 0 left = 0 right = 0 max_len = 0 char_map = {} while right < n: char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"Given an array of integers, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. Implement the function such that it has an O(n) time complexity. ```python def max_subarray_sum(nums): # code here # Example Test Cases: print(max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4])) # => 6 (subarray: [4,-1,2,1]) print(max_subarray_sum([1])) # => 1 (subarray: [1]) print(max_subarray_sum([5,4,-1,7,8])) # => 23 (subarray: [5,4,-1,7,8]) print(max_subarray_sum([-1,-2,-3,-4])) # => -1 (subarray: [-1]) ``` In the function `max_subarray_sum`, given a list of integers, you are to implement an algorithm to find the contiguous subarray that yields the highest sum and return that sum. The array is guaranteed to have at least one element, and the function must execute in linear time.","solution":"def max_subarray_sum(nums): Implement the function to find the maximum sum of a contiguous subarray. if not nums: return 0 max_ending_here = max_so_far = nums[0] for x in nums[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"There is a robotic arm that moves on a Cartesian plane. The arm is initially placed at the origin (0, 0). The arm can be controlled using a sequence of commands. Each command is a character sequence consisting of: - \'U\' (move up 1 unit), - \'D\' (move down 1 unit), - \'L\' (move left 1 unit), - \'R\' (move right 1 unit). Write a function to determine if the robotic arm returns to the origin after executing all the commands. Function Signature: ```python def is_robot_at_origin(commands: str) -> bool: # your code here ``` Example 1: Input: commands = \\"UD\\" Output: True Explanation: The robotic arm moves up, then down, and returns to the origin. Example 2: Input: commands = \\"LL\\" Output: False Explanation: The robotic arm moves left twice and does not return to the origin. Example 3: Input: commands = \\"RRDD\\" Output: False Explanation: The robotic arm moves right twice, then down twice and does not return to the origin. Example 4: Input: commands = \\"LDRRLRUULR\\" Output: False Explanation: The robotic arm moves but does not form a closed path returning to the origin. Constraints: 1 <= commands.length <= 10^4 commands consists of characters \'U\', \'D\', \'L\' and \'R\' only.","solution":"def is_robot_at_origin(commands: str) -> bool: Determines if the robotic arm returns to the origin after executing all the commands. Arguments: commands : str : sequence of commands consisting of \'U\', \'D\', \'L\', and \'R\' Returns: bool : True if the robotic arm returns to the origin, else False x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x == 0 and y == 0"},{"question":"In the magical land of Algoria, there are n enchanted trees planted in a row. Each tree has a certain amount of magic power. The wizard Dumbledore wishes to perform a ritual using exactly k contiguous trees to maximize the total magic power. However, due to the nature of the spell, he can only choose the segment that maximizes the total power without exceeding a malfunction threshold T. Help Dumbledore determine the maximum possible magic power from any valid segment of k contiguous trees. -----Input----- The first line consists of three integers n, k, and T, where n denotes the number of trees, k denotes the number of contiguous trees needed for the ritual, and T denotes the malfunction threshold. The second line consists of n space-separated integers representing the magic power of each tree. -----Output----- Print an integer representing the maximum possible total magic power of any valid segment of k contiguous trees. If no valid segment exists, print -1. -----Constraints----- 1 <= n <= 1000 1 <= k <= n 1 <= T <= 10^6 0 <= magic power of each tree <= 10^4 -----Example----- Input: 6 3 15 1 3 5 7 9 2 Output: 15 -----Explanation----- Among the segments of 3 contiguous trees, the maximum total power without exceeding the threshold 15 is achieved by the segment (3, 5, 7), which sums up to 15.","solution":"def max_magic_power(n, k, T, powers): Determine the maximum possible magic power of any valid segment of k contiguous trees without exceeding the malfunction threshold T. :param n: int - number of trees :param k: int - number of contiguous trees needed for the ritual :param T: int - the malfunction threshold :param powers: list of int - magic power of each tree :return: int - the maximum possible total magic power or -1 if no valid segment exists max_power = -1 current_sum = sum(powers[:k]) if current_sum <= T: max_power = current_sum for i in range(1, n - k + 1): current_sum = current_sum - powers[i - 1] + powers[i + k - 1] if current_sum <= T: max_power = max(max_power, current_sum) return max_power"},{"question":"You are given two strings, `str1` and `str2`, and your task is to determine whether `str2` is a subsequence of `str1`. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. Write a function `is_subsequence(str1: str, str2: str) -> bool` that returns `True` if `str2` is a subsequence of `str1`, and `False` otherwise. For example: ```Python is_subsequence(\\"abcde\\", \\"ace\\") -> True, because \'ace\' can be derived from \'abcde\' by removing \'b\' and \'d\'. is_subsequence(\\"abcde\\", \\"aec\\") -> False, because \'aec\' cannot be derived from \'abcde\', as the relative order of \'e\' and \'c\' is wrong. ``` Write the function to solve the problem, and ensure it works for the provided example cases as well as additional test cases you might think of.","solution":"def is_subsequence(str1: str, str2: str) -> bool: Checks if str2 is a subsequence of str1. Parameters: str1 (str): The original string. str2 (str): The string to check as a subsequence. Returns: bool: True if str2 is a subsequence of str1, False otherwise. iter_str1 = iter(str1) return all(char in iter_str1 for char in str2)"},{"question":"A company has developed a new software system, and they need to ensure that their user management system is working as expected. The system assigns user IDs to employees, and these IDs must follow certain rules to be considered valid. A valid user ID has the following properties: 1. It consists of exactly 8 characters. 2. It contains at least one uppercase letter: \'A\' to \'Z\'. 3. It contains at least one lowercase letter: \'a\' to \'z\'. 4. It contains at least one digit: \'0\' to \'9\'. You are asked to write a program to validate a list of user IDs and determine if each one is valid according to the rules mentioned above. -----Input----- - The first line of input contains an integer T, the number of user IDs to be validated. Each of the next T lines contains a single user ID of exactly 8 characters. -----Output----- For each user ID, output \\"valid\\" if the user ID meets all the criteria, otherwise output \\"invalid\\". -----Constraints----- - 1 le T le 100 - Each user ID consists of exactly 8 characters. -----Example Input----- 3 A1b3kLop 12345678 abcdefgh -----Example Output----- valid invalid invalid -----Explanation----- Example case 1: The user ID \\"A1b3kLop\\" contains uppercase letters, lowercase letters, and digits, and is exactly 8 characters long, so it is valid. Example case 2: The user ID \\"12345678\\" only contains digits and lacks both uppercase and lowercase letters, so it is invalid. Example case 3: The user ID \\"abcdefgh\\" only contains lowercase letters and lacks both uppercase letters and digits, so it is invalid.","solution":"def validate_user_ids(user_ids): results = [] for user_id in user_ids: if len(user_id) == 8 and any(char.isupper() for char in user_id) and any(char.islower() for char in user_id) and any(char.isdigit() for char in user_id): results.append(\\"valid\\") else: results.append(\\"invalid\\") return results"},{"question":"You are given a string S consisting of lowercase English alphabet characters. You want to count the number of substrings of S that are palindromes. A palindrome is a string that reads the same forward and backward. For example, \\"racecar\\" and \\"madam\\" are palindromes, but \\"hello\\" and \\"world\\" are not. Write a function that, given a string S, returns the total number of palindromic substrings in S. -----Input----- One line containing the string S. -----Output----- One integer representing the number of palindromic substrings in S. -----Constraints----- 1 ≤ |S| ≤ 1000 The string S consists only of lowercase English letters. -----Example----- Input: ababa Output: 9 -----Notes----- The nine palindromic substrings are: \'a\', \'a\', \'a\', \'b\', \'b\', \'aba\', \'bab\', \'aba\', \'ababa\'.","solution":"def count_palindromic_substrings(S): Returns the total number of palindromic substrings in S. Args: - S (str): The input string consisting of lowercase English letters. Returns: - int: The number of palindromic substrings in S. n = len(S) count = 0 def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and S[left] == S[right]: count += 1 left -= 1 right += 1 for i in range(n): expand_around_center(i, i) # Odd length palindromes expand_around_center(i, i + 1) # Even length palindromes return count"},{"question":"Write a function that takes an integer `n` (1 <= n <= 100) as input and returns an integer that represents the sum of the squares of all integers from 1 up to `n`. ``` sum_of_squares(1) => 1 sum_of_squares(2) => 5 (1^2 + 2^2) sum_of_squares(3) => 14 (1^2 + 2^2 + 3^2) sum_of_squares(4) => 30 (1^2 + 2^2 + 3^2 + 4^2) ``` **Note:** The function should handle the input efficiently, given the constraints.","solution":"def sum_of_squares(n): Returns the sum of the squares of all integers from 1 to n (inclusive). return sum(i ** 2 for i in range(1, n + 1))"},{"question":"Write a function `jump_game` that determines if you are able to reach the last index given an array of non-negative integers representing your maximum jump length at that position. Your function should take an array `nums` as input and return a boolean indicating whether you can reach the last index starting from the first index. For example: - Given `nums = [2, 3, 1, 1, 4]`, the function should return `True`: Start at index 0, and jump 1 step to index 1, then 3 steps to the last index. - Given `nums = [3, 2, 1, 0, 4]`, the function should return `False`: You will always arrive at index 3 no matter what, but cannot move beyond it. Constraints: - The array length `nums` will be between 1 and `10^4`. - Each element in the array `nums` will be a non-negative integer less than `10^5`. Hints: 1. Think about the furthest position you can reach at each index. 2. Can you keep track of the maximum index you can reach while iterating through the array?","solution":"def jump_game(nums): Determines if you are able to reach the last index given an array of non-negative integers representing your maximum jump length at that position. Args: nums (List[int]): Array of non-negative integers representing maximum jump lengths. Returns: bool: True if you can reach the last index, False otherwise. max_reach = 0 last_index = len(nums) - 1 for i, jump in enumerate(nums): if i > max_reach: return False max_reach = max(max_reach, i + jump) if max_reach >= last_index: return True return False"},{"question":"Given a list of non-negative integers representing the heights of bars in a histogram, write a function `largestRectangleArea` to compute the area of the largest rectangle that can be formed from consecutive bars. Note: You may assume the heights list will always contain at least one bar. Example 1: Input: heights = [2,1,5,6,2,3] Output: 10 Explanation: The largest rectangle can be formed using the heights [5, 6], yielding an area of 5*2 = 10. Example 2: Input: heights = [2,4] Output: 4 Explanation: The largest rectangle can be formed using the heights [2, 4], yielding an area of 2*2 = 4. Follow up: Can you solve this problem in O(n) time complexity using a stack-based approach?","solution":"def largestRectangleArea(heights): Given a list of heights representing the heights of bars in a histogram, it computes the area of the largest rectangle that can be formed using consecutive bars. :param heights: List[int] - A list of non-negative integers representing the heights of columns in a histogram. :returns: int - The area of the largest rectangle that can be formed from consecutive bars. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"A company treats its employees with cupcakes on special occasions. The management wants to determine the minimum number of cupcakes they need to order such that each employee gets at least one cupcake, and no cupcakes are left over. Create a function, `min_cupcakes`, that takes a list of integers as input. Each integer in the list represents a group of employees working in different departments. The function should return the minimum number of cupcakes required to ensure each employee gets exactly one cupcake with none left over. The total number of cupcakes must be exactly divisible by the total number of employees. For example: ```python departments = [5, 7, 3] # This represents: # department 1 has 5 employees # department 2 has 7 employees # department 3 has 3 employees min_cupcakes(departments) => 105 # minimum number of cupcakes needed is 105 ``` Info: - The input list will always have at least one department. - The number of employees in each department will be a positive integer. - The function should handle at least 1 <= len(departments) <= 1000 and 1 <= departments[i] <= 10^5.","solution":"import math from functools import reduce def lcm(a, b): return abs(a*b) // math.gcd(a, b) def min_cupcakes(departments): Returns the minimum number of cupcakes needed such that each department gets exactly one cupcake per employee and no cupcakes are left over. total_employees = reduce(lcm, departments) return total_employees"},{"question":"=====Function Descriptions===== A dictionary in Python is a collection of key-value pairs which are unordered, changeable, and indexed. No duplicate keys are allowed. =====Example===== >>> my_dict = {\\"name\\": \\"John\\", \\"age\\": 25, \\"city\\": \\"New York\\"} >>> print(my_dict) {\'name\': \'John\', \'age\': 25, \'city\': \'New York\'} >>> my_dict[\\"email\\"] = \\"john@example.com\\" >>> print(my_dict) {\'name\': \'John\', \'age\': 25, \'city\': \'New York\', \'email\': \'john@example.com\'} >>> del my_dict[\\"age\\"] >>> print(my_dict) {\'name\': \'John\', \'city\': \'New York\', \'email\': \'john@example.com\'} >>> for key in my_dict: >>> print(key, my_dict[key]) name John city New York email john@example.com Dictionaries are used to store data values like a map, which is an unordered, iterable, and changeable collection with no duplicate members. =====Problem Statement===== Arnold is a student who wants to keep track of his grades throughout the semester. He knows that dictionaries in Python are a useful way to do this since they can map subject names to their respective grades. However, he is having trouble writing a program that will update the grades after he receives a new score for a subject. Your task is to help Arnold by writing a function that takes the current dictionary of grades and a list of updated grades for specific subjects, then returns the updated dictionary. =====Input Format===== The input contains two lines: - The first line contains a dictionary (string representation) where keys are subject names (strings) and values are grades (integers). - The second line contains a list of tuples, each tuple contains a subject name and the grade of that subject (string representation). =====Constraints===== - All subject names are strings. - Grades are integers between 0 and 100, inclusive. - The dictionary will have at most 10 subjects. - The list of updated grades will have at most 10 items and will not contain duplicate subjects. =====Output Format===== Output a dictionary (string representation) that contains the updated grades for each subject. =====Example===== >>> update_grades(\\"{\'Math\': 90, \'Science\': 80, \'English\': 85}\\", \\"[(\'Math\', 95), (\'Science\', 82)]\\") {\'Math\': 95, \'Science\': 82, \'English\': 85}","solution":"import ast def update_grades(current_grades_str, updated_grades_str): Update the dictionary of current grades with the new grades from the updated list. Args: current_grades_str (str): The string representation of the dictionary with current grades. updated_grades_str (str): The string representation of the list of tuples with updated grades. Returns: dict: Updated dictionary with new grades. # Convert the string representations to actual Python objects current_grades = ast.literal_eval(current_grades_str) updated_grades = ast.literal_eval(updated_grades_str) # Update the current grades with the new grades for subject, grade in updated_grades: current_grades[subject] = grade return current_grades"},{"question":"Given a string ```s``` representing a sentence, return the sentence with each word reversed but with the original word order preserved. The sentence is composed of letters and spaces only, with no leading or trailing spaces and each word is separated by a single space. **Example 1:** Input: ```s = \\"hello world\\"``` Output: ```\\"olleh dlrow\\"``` **Example 2:** Input: ```s = \\"coding is fun\\"``` Output: ```\\"gnidoc si nuf\\"``` Assume the overall sentence length does not exceed 1000 characters.","solution":"def reverse_words_in_sentence(s): Given a string s representing a sentence, returns the sentence with each word reversed but with the original word order preserved. Parameters: s (str): The input sentence composed of letters and spaces. Returns: str: The sentence with each word reversed. words = s.split(\' \') reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"A hotel chain owns several hotels in various cities. The managers of each hotel are trying to determine which hotel is the best option for hosting a large conference. Each hotel has a specific number of available rooms and a distance to the nearest airport. Your task is to create a system that, given the number of rooms needed and the maximum acceptable distance to the airport, finds the best hotel for the conference. If multiple hotels meet the criteria, choose the hotel with the highest number of rooms. If there is still a tie, choose the hotel that is closer to the airport. Input: The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains three space-separated integers N, R, D, denoting the number of hotels, the number of rooms needed, and the maximum acceptable distance to the airport. The next N lines contain two space-separated integers ri and di, denoting the number of rooms and the distance to the airport for the ith hotel. Output: Output the index (1-based) of the best hotel for the conference for each test case. If no hotels meet the criteria, output -1. Constraints: 1 <= T <= 10 1 <= N <= 1000 1 <= ri, R <= 1000 1 <= di, D <= 1000 Example: Input: 2 3 200 50 150 30 300 20 250 60 4 400 50 200 10 350 40 400 30 450 35 Output: 2 4 Explanation: For the first test case, the second hotel is the only one that meets all the criteria: it has 300 rooms (more than the required 200) and is within 50 units of distance from the airport. Therefore, the output is 2. For the second test case, the fourth hotel meets all the criteria with 450 rooms, more than the required 400, and is within the acceptable distance to the airport of 50 units. Thus, the output is 4.","solution":"def find_best_hotel(test_cases): results = [] for case in test_cases: N, R, D = case[\'NRD\'] hotels = case[\'hotels\'] best_hotel_index = -1 max_rooms = 0 min_distance = float(\'inf\') for i, (rooms, distance) in enumerate(hotels): if rooms >= R and distance <= D: if rooms > max_rooms or (rooms == max_rooms and distance < min_distance): best_hotel_index = i + 1 max_rooms = rooms min_distance = distance results.append(best_hotel_index) return results"},{"question":"A well-balanced string is a string which consists of only characters \'L\' and \'R\'. A string is considered balanced if and only if the number of \'L\' characters is equal to the number of \'R\' characters. Your task is to split the given string into the maximum number of balanced substrings. -----Input----- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. For each test case, there is a single line containing a string S which consists of characters \'L\' and \'R\' only. -----Output----- For each test case, output a single line containing the maximum number of balanced substrings that can be obtained. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ length of S ≤ 100 -----Example----- Input: 3 RLRRLLRLRL RLLLLRRRLR LLLLRRRR Output: 4 3 1","solution":"def max_balanced_substrings(T, strings): Returns the maximum number of balanced substrings for each string in the list. Args: T: Integer, number of test cases. strings: List of strings. Returns: List of integers, each representing the maximum number of balanced substrings. results = [] for S in strings: count_L = 0 count_R = 0 balanced_count = 0 for char in S: if char == \'L\': count_L += 1 elif char == \'R\': count_R += 1 if count_L == count_R: balanced_count += 1 count_L = 0 count_R = 0 results.append(balanced_count) return results"},{"question":"Classroom Arrangement A teacher wants to arrange a class of students in pairs for a project. Each student has a certain skill level, and the teacher wants to maximize the skill difference within each pair to encourage diverse collaboration and maximize learning. The teacher is given an array of integers where each integer denotes the skill level of a student. Each student can only be a part of one pair and the class size is guaranteed to be even. The goal is to pair up the students in such a way that the sum of skill differences of all pairs is maximized. Input The first line contains a single integer N, denoting the number of students in the class (N is always even). The second line contains N integers, where the i-th integer is the skill level of the i-th student. Output Print the maximum possible sum of the skill differences of all pairs. Constraints 2 <= N <= 10^5 1 <= Skill level <= 10^9 Sample Input: 4 1 8 3 7 Sample Output: 11 Explanation: In this example, the maximum possible sum of skill differences can be achieved by forming the pairs (1, 8) and (3, 7). The differences are |1-8| = 7 and |3-7| = 4. Thus, the total sum is 7 + 4 = 11.","solution":"def max_skill_difference_sum(N, skill_levels): Returns the maximum possible sum of the skill differences of all pairs. Parameters: N (int): Number of students (guaranteed to be even) skill_levels (list of int): A list of integers denoting the skill levels of the students Returns: int: The maximum possible sum of the skill differences skill_levels.sort() max_sum = 0 for i in range(N // 2): max_sum += skill_levels[N - 1 - i] - skill_levels[i] return max_sum # Using inputs from sample N = 4 skill_levels = [1, 8, 3, 7] print(max_skill_difference_sum(N, skill_levels)) # Expected output: 11"},{"question":"Given a linked list, reverse the nodes in k-group blocks. The final group may have fewer than k nodes. For instance, consider the list: `1 -> 2 -> 3 -> 4 -> 5` and `k` = 3. - The first block of `k` nodes `1 -> 2 -> 3` will be reversed, resulting in `3 -> 2 -> 1`. - The remaining nodes `4 -> 5` do not complete a block, so they are left as is. The output for this example will be `3 -> 2 -> 1 -> 4 -> 5`. # Example 1: Input: `head = [1, 2, 3, 4, 5], k = 2` Output: `[2, 1, 4, 3, 5]` Explanation: - The first block of 2 nodes `1 -> 2` is reversed to `2 -> 1`. - The second block of 2 nodes `3 -> 4` is reversed to `4 -> 3`. - The remaining node `5` stays the same as it is less than `k`. # Example 2: Input: `head = [1, 2, 3, 4, 5, 6, 7, 8], k = 3` Output: `[3, 2, 1, 6, 5, 4, 7, 8]` Explanation: - The first block of 3 nodes `1 -> 2 -> 3` is reversed to `3 -> 2 -> 1`. - The second block of 3 nodes `4 -> 5 -> 6` is reversed to `6 -> 5 -> 4`. - The remaining nodes `7 -> 8` stay the same as they are fewer than `k`. # Constraints: - The number of nodes in the list is between 1 and 10,000. - Values of each node are between -10^9 and 10^9. - 1 <= k <= the length of the linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseKGroup(head, k): def reverse_linked_list(head, k): prev = None current = head while k > 0: temp = current.next current.next = prev prev = current current = temp k -= 1 return prev count = 0 ptr = head while count < k and ptr: ptr = ptr.next count += 1 if count == k: reversed_head = reverse_linked_list(head, k) head.next = reverseKGroup(ptr, k) return reversed_head return head def list_to_linked_list(lst): dummy = ListNode() ptr = dummy for number in lst: ptr.next = ListNode(number) ptr = ptr.next return dummy.next def linked_list_to_list(head): lst = [] while head: lst.append(head.val) head = head.next return lst"},{"question":"Write a function named `longest_consecutive` that takes an array of integers and returns the length of the longest consecutive elements sequence. The algorithm should have a time complexity of O(n). The array can contain duplicates or unsorted elements. Handle edge cases such as empty arrays. ```Python longest_consecutive([100, 4, 200, 1, 3, 2]) # should return 4 (because the longest consecutive sequence is 1, 2, 3, 4) longest_consecutive([0, -1, 1, 2, -2, 3, 4]) # should return 7 (because the longest consecutive sequence is -2, -1, 0, 1, 2, 3, 4) longest_consecutive([1, 2, 0, 1]) # should return 3 (because the longest consecutive sequence is 0, 1, 2) longest_consecutive([]) # should return 0 ``` ```Haskell longestConsecutive [100, 4, 200, 1, 3, 2] -- should return 4 (because the longest consecutive sequence is 1, 2, 3, 4) longestConsecutive [0, -1, 1, 2, -2, 3, 4] -- should return 7 (because the longest consecutive sequence is -2, -1, 0, 1, 2, 3, 4) longestConsecutive [1, 2, 0, 1] -- should return 3 (because the longest consecutive sequence is 0, 1, 2) longestConsecutive [] -- should return 0 ```","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence. :param nums: List[int] - List of integers :return: int - Length of the longest consecutive sequence if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: # Only start counting if `num` is the start of a sequence if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"In an old-school arcade game, the player navigates a character through a 2D grid, collecting coins placed at specific positions. The grid is represented as a matrix where \'C\' indicates the presence of a coin and \'.\' represents an empty space. The player\'s objective is to collect as many coins as possible within a limited number of moves, starting from the top-left corner of the grid (position [0, 0]). The player can move up, down, left, or right, but cannot navigate outside the bounds of the grid. Write a function `max_coins` that calculates the maximum number of coins the player can collect given the grid and the maximum number of moves allowed. ```python def max_coins(grid, max_moves): # Your implementation here # Example usage: grid = [ [\'.\', \'C\', \'.\'], [\'.\', \'.\', \'C\'], [\'C\', \'C\', \'.\'] ] moves = 4 print(max_coins(grid, moves)) # Output should be the maximum number of coins collected in 4 moves ``` # Function Signature ```python def max_coins(grid: List[List[str]], max_moves: int) -> int: ``` # Input - `grid` (List[List[str]]): A 2D list representing the game grid, where \'C\' represents a coin and \'.\' represents an empty space. - `max_moves` (int): The maximum number of moves the player can make. # Output - Return the maximum number of coins that can be collected within the given number of moves.","solution":"from typing import List def max_coins(grid: List[List[str]], max_moves: int) -> int: n = len(grid) m = len(grid[0]) # Helper function for the DFS traversal def dfs(x, y, moves_left, collected_coins, visited): if moves_left < 0 or x < 0 or y < 0 or x >= n or y >= m or visited[x][y]: return collected_coins visited[x][y] = True collected_coins += 1 if grid[x][y] == \'C\' else 0 # Search in all four possible directions (up, down, left, right) max_coins_collected = collected_coins max_coins_collected = max(max_coins_collected, dfs(x + 1, y, moves_left - 1, collected_coins, visited)) max_coins_collected = max(max_coins_collected, dfs(x - 1, y, moves_left - 1, collected_coins, visited)) max_coins_collected = max(max_coins_collected, dfs(x, y + 1, moves_left - 1, collected_coins, visited)) max_coins_collected = max(max_coins_collected, dfs(x, y - 1, moves_left - 1, collected_coins, visited)) # Backtrack visited[x][y] = False collected_coins -= 1 if grid[x][y] == \'C\' else 0 return max_coins_collected # Start the DFS traversal from (0, 0) with given max_moves return dfs(0, 0, max_moves, 0, [[False] * m for _ in range(n)])"},{"question":"Given a binary tree, determine the level order traversal of its nodes\' values (i.e., from left to right, level by level). *Parameters*: `root` node of the binary tree. *Example input*: ``` class TreeNode { int val; TreeNode left; TreeNode right; TreeNode() {} TreeNode(int val) { this.val = val; } TreeNode(int val, TreeNode left, TreeNode right) { this.val = val; this.left = left; this.right = right; } } TreeNode root = new TreeNode(3, new TreeNode(9), new TreeNode(20, new TreeNode(15), new TreeNode(7) ) ); ``` *Output*: A list of lists, where each list represents a level in the tree. ``` [[3], [9, 20], [15, 7]] ``` # Constraints: * The number of nodes in the tree is in the range `[0, 2000]`. * `-1000 <= Node.val <= 1000` # Notes: * If the tree is empty, return an empty list. # Explanation: 1. The input represents a tree with root node `3` connected to left child `9` and right child `20`. 2. The `20` node further has two children, `15` (left) and `7` (right). 3. The level order traversal outputs nodes row-wise: first `3`, followed by `9` and `20`, and finally `15` and `7`.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def levelOrderTraversal(root): Perform level order traversal on a binary tree. Parameters ---------- root : TreeNode The root node of the binary tree. Returns ------- List[List[int]] A list of lists, where each list contains the node values at each level. if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) level_nodes = [] for _ in range(level_size): node = queue.popleft() level_nodes.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level_nodes) return result"},{"question":"Story Sarah likes to organize charity events, where she sells baked goods to raise funds. She keeps track of these events using lists of transactions. Each transaction is represented as a pair, where the first element is the price of a baked good, and the second element indicates the percentage of the total sales goal she achieved with that sale. For example: ``` [[15, 10], [20, 20], [30, 30]] ``` In this example, the sale of the first baked good priced at 15 achieved 10% of the sales goal, the sale of the second priced at 20 achieved 20%, and the sale of the third priced at 30 achieved 30%. Calculate the total percentage of the sales goal achieved through all transactions. Rules Write a function ```totalGoalAchieved```, argument ```transactions``` is the list of transactions. Return the total percentage of the sales goal achieved, round to two decimal places. Examples **Example 1:** totalGoalAchieved([[15, 10], [20, 20], [30, 30]]) should return ```60.00``` **Example 2:** totalGoalAchieved([[10, 5], [50, 20], [20, 10]]) should return ```35.00``` **Example 3:** totalGoalAchieved([]) should return ```0.00```","solution":"def totalGoalAchieved(transactions): Returns the total percentage of the sales goal achieved through all transactions. Args: transactions (list of [int, int]): List of transactions, where each transaction is a pair of [price, percentage of the total sales goal achieved] Returns: float: Total percentage of the sales goal achieved, rounded to two decimal places. total_percentage = sum(transaction[1] for transaction in transactions) return round(total_percentage, 2)"},{"question":"# Task Given a string `s` and an integer `n`, your task is to return a new string constructed by repeating each character in the original string `n` times. # Input/Output - `[input]` string `s` A non-empty string consisting of uppercase and lowercase English letters (`A-Z`, `a-z`) and digits (`0-9`). - `[input]` integer `n` An integer `1 ≤ n ≤ 10`. - `[output]` a string A new string where each character in the original string `s` is repeated `n` times. # Example ```python repeat_characters(\\"abc\\", 3) # returns \\"aaabbbccc\\" repeat_characters(\\"123\\", 2) # returns \\"112233\\" repeat_characters(\\"aA1\\", 1) # returns \\"aA1\\" ```","solution":"def repeat_characters(s, n): Returns a new string where each character in the original string `s` is repeated `n` times. Parameters: s (str): The original string. n (int): The number of times each character should be repeated. Returns: str: The new string with repeated characters. return \'\'.join([char * n for char in s])"},{"question":"You have been given a list of integers. Your task is to find the sum of the products of every possible pair of distinct integers from the list. -----Input:----- - The first line contains a single integer N, the number of integers in the list. - The second line contains N space-separated integers, representing the elements of the list. -----Output:----- - A single integer, the sum of the products of every possible pair of distinct integers from the list. -----Constraints----- - 2 leq N leq 50 - -1000 leq text{list element} leq 1000 -----Sample Input:----- 4 1 2 3 4 -----Sample Output:----- 20 -----EXPLANATION:----- There are 6 possible pairs of distinct integers in the list: (1,2), (1,3), (1,4), (2,3), (2,4), (3,4). The products of these pairs are 2, 3, 4, 6, 8, and 12 respectively. Their sum is 2 + 3 + 4 + 6 + 8 + 12 = 35. Therefore, the output is 35.","solution":"def sum_of_products_of_pairs(N, numbers): Returns the sum of the products of every possible pair of distinct integers from the list. total_sum = 0 for i in range(N): for j in range(i+1, N): total_sum += numbers[i] * numbers[j] return total_sum"},{"question":"Write a function that takes two sorted lists of integers and returns a new list that represents the intersection of the two original lists. Each element in the result should appear as many times as it appears in both lists. Do this without using sets. **Constraints:** 1. Each input list can be of any length, including zero. 2. The function should run in O(n + m) time where n and m are the lengths of the two lists. Examples ```python intersect([1, 2, 2, 3], [2, 2, 4]) ==> [2, 2] intersect([4, 5, 6], [4, 4, 4, 6, 6]) ==> [4, 6] intersect([1, 1, 1, 1], []) ==> [] intersect([], [2, 3, 4]) ==> [] intersect([1, 1, 1, 3, 3, 3], [1, 3]) ==> [1, 3] ``` **Explanation of Examples:** 1. `[1, 2, 2, 3]` and `[2, 2, 4]` intersect at two `2`s. Hence the result includes `[2, 2]`. 2. `[4, 5, 6]` and `[4, 4, 4, 6, 6]` intersect at one `4` and one `6`, so the result is `[4, 6]`. 3. `[1, 1, 1, 1]` and `[]` have no common elements, so the result is `[]`. 4. `[]` and `[2, 3, 4]` have no common elements, resulting in `[]`. 5. `[1, 1, 1, 3, 3, 3]` and `[1, 3]` intersect at one `1` and one `3`, so the result is `[1, 3]`. Implement the function `intersect` that takes two sorted lists and returns their intersection according to the rules and examples above.","solution":"def intersect(list1, list2): Returns a list that is the intersection of list1 and list2. Each element in the result appears as many times as it appears in both lists. :param list1: First sorted list of integers :param list2: Second sorted list of integers :return: List representing the intersection of the two lists result = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] == list2[j]: result.append(list1[i]) i += 1 j += 1 elif list1[i] < list2[j]: i += 1 else: j += 1 return result"},{"question":"You are given an undirected graph with N nodes and M edges. Each edge has a non-negative weight. Your task is to remove as many edges as possible while ensuring that the sum of weights of the remaining edges in each connected component is minimized. The remaining graph must still be connected. -----Input----- - The first line of the input contains two integers N and M denoting the number of nodes and edges, respectively. - Each of the next M lines contains three integers u, v and w representing an edge between nodes u and v with weight w. -----Output----- Output a single integer representing the minimum possible sum of weights of the edges in the graph after removing as many edges as possible. -----Constraints----- - 1 le N le 100,000 - 0 le M le 200,000 - 1 le u, v le N - 0 le w le 10^9 -----Example Input----- 5 6 1 2 3 1 3 4 1 4 2 2 3 1 2 5 5 3 5 7 -----Example Output----- 11 -----Explanation----- The minimum spanning tree for the example graph is: - (2 - 1): 3 - (3 - 2): 1 - (4 - 1): 2 - (5 - 2): 5 Total weight of the minimum spanning tree is 3 + 1 + 2 + 5 = 11","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def minimum_spanning_tree_sum(n, edges): edges.sort(key=lambda x: x[2]) uf = UnionFind(n) min_weight_sum = 0 for u, v, w in edges: if uf.find(u) != uf.find(v): uf.union(u, v) min_weight_sum += w return min_weight_sum def solve_problem(N, M, edge_list): # Transform the edge list to be 0-indexed edges = [(u-1, v-1, w) for u, v, w in edge_list] # Find the MST weight sum return minimum_spanning_tree_sum(N, edges)"},{"question":"Vicky loves to play video games and recently he got his hands on a new game where he needs to collect a certain number of coins scattered across different levels. Each level gives Vicky a specific number of coins when completed. Vicky wants to know if he can exactly collect a target number of coins by completing some of the levels. Can you help Vicky determine if it is possible to collect the exact number of target coins by completing a combination of levels? -----Input:----- - The first line of the input contains a single integer T, denoting the number of test cases. The description of T test cases is as follows. - The next line of the input contains a single integer N, denoting the total number of levels in the game. - The next line of the input contains N space-separated integers C1, C2, C3, ... CN, where Ci denotes the number of coins obtained from the ith level. - The following line contains a single integer K, the target number of coins Vicky wants to collect. -----Output:----- - For each test case, print \\"Possible\\" (without quotes) if Vicky can collect the exact target number of coins, else print \\"Impossible\\" (without quotes). -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 50 - 1 leq Ci leq 1000 - 1 leq K leq 50000 -----Sample Input:----- 2 5 1 2 3 4 5 9 3 10 20 30 15 -----Sample Output:----- Possible Impossible -----Explanation:----- - In the first test case, Vicky can collect coins by completing levels with coins [4, 5] or [1, 3, 5], both of which sum up to 9. - In the second test case, there is no combination of levels that sum up to the target of 15 coins.","solution":"def can_collect_exactly(target, coins): n = len(coins) dp = [False] * (target + 1) dp[0] = True for coin in coins: for j in range(target, coin - 1, -1): if dp[j - coin]: dp[j] = True return dp[target] def solve_vicky_game(t, test_cases): results = [] for i in range(t): n, coins, k = test_cases[i] if can_collect_exactly(k, coins): results.append(\\"Possible\\") else: results.append(\\"Impossible\\") return results"},{"question":"Write a function `to_camel_case(str)` that converts dash/underscore delimited words into camel casing. The first word within the output should be capitalized only if the original word was capitalized (known as Upper Camel Case, also often referred to as Pascal case). The next words should always be capitalized. For example: ```python to_camel_case(\\"the-stealth-warrior\\") # returns \\"theStealthWarrior\\" to_camel_case(\\"The_stealth_warrior\\") # returns \\"TheStealthWarrior\\" ```","solution":"def to_camel_case(text): Converts a given string with dash/underscore delimiters into camel casing. :param text: A string with words separated by dashes or underscores. :return: A camelCased version of the input string. if not text: return text words = text.replace(\'_\', \'-\').split(\'-\') first_word = words[0] camel_cased = first_word + \'\'.join(word.capitalize() for word in words[1:]) return camel_cased"},{"question":"Calculate Stock Span In the financial market, the span of the stock’s price for a given day is defined as the maximum number of consecutive days (up to the current day) the price of the stock has been less than or equal to its price on the current day. You are provided with a list of integers representing the daily price of a stock for `n` days. You need to write a function that calculates the span for each day. The function should take a list of stock prices as input and return a list of spans for each day. Example scenarios: **Input:** Prices: `[100, 80, 60, 70, 60, 75, 85]` **Output:** Span: `[1, 1, 1, 2, 1, 4, 6]` For example, span of price on day 5 is 4 because the price is 75, and the last four prices (60, 70, 60, and 75) are all less than or equal to 75. Note: The stock price is guaranteed to always be a positive integer.","solution":"def calculate_stock_span(prices): Calculates the stock span for each day. Parameters: prices (list): A list of integers representing daily stock prices. Returns: list: A list of integers representing the stock span for each day. n = len(prices) span = [1] * n # Initialize span list with ones # Stack to store indices of the prices array stack = [] stack.append(0) for i in range(1, n): # While stack is not empty and the price at stack top is less than or equal to current price while stack and prices[stack[-1]] <= prices[i]: stack.pop() # If stack becomes empty, then price[i] is greater than all elements on left of it if not stack: span[i] = i + 1 else: span[i] = i - stack[-1] # Push current element index to stack stack.append(i) return span"},{"question":"Write a function named `arrayDiff` that accepts two parameters: `array` and `values`. The first parameter, `array`, is an array of integers, and the second parameter, `values`, is an array of integers that need to be removed from the first array. The function should return a new array that is identical to the first array but with all instances of elements from the `values` array removed. Examples: ```if-not:julia,racket arrayDiff([1,2,3,4], [2,4]) -> [1,3] arrayDiff([1,2,2,2,3], [2]) -> [1,3] arrayDiff([1,2,3,4], [5,6]) -> [1,2,3,4] arrayDiff([], [2,4]) -> [] arrayDiff([1,2,3], []) -> [1,2,3] ``` Make sure that the order of the elements in the resulting array is preserved and no duplicates are removed from the original array except those specified in the `values` array.","solution":"def arrayDiff(array, values): Returns a new array that is identical to the first array but with all instances of elements from the \'values\' array removed. Parameters: array (list of int): The original array. values (list of int): The elements to be removed from the array. Returns: list of int: The new array with the elements removed. return [item for item in array if item not in values]"},{"question":"Write a function that takes an integer `n` as input and returns a list of all prime numbers less than `n`. If `n` is less than or equal to 2, the function should return an empty list. Examples: `findPrimes(10)` returns `[2, 3, 5, 7]` `findPrimes(20)` returns `[2, 3, 5, 7, 11, 13, 17, 19]` `findPrimes(2)` returns `[]` `findPrimes(1)` returns `[]`","solution":"def findPrimes(n): Returns a list of all prime numbers less than n. if n <= 2: return [] primes = [] for num in range(2, n): is_prime = True for divisor in range(2, int(num ** 0.5) + 1): if num % divisor == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"You are an accomplished developer, and you are given a challenge to help Alice with her problem. Alice has a sequence of strings and she wants to know the longest common prefix among all the strings in a given list. Given a list of strings, find the longest common prefix string amongst them. -----Input----- - The first line of the input contains an integer T, the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N, the number of strings. - The following N lines contain one string each. -----Output----- For each test case, print a single line containing the longest common prefix of the list of strings. If there is no common prefix, print an empty string. -----Constraints----- - 1 le T le 100 - 1 le N le 200 - 1 le length of each string le 1000 -----Example Input----- 2 3 flower flow flight 4 dog racecar car bus -----Example Output----- fl (empty string) -----Explanation----- Example case 1: The longest common prefix among \\"flower\\", \\"flow\\", and \\"flight\\" is \\"fl\\". Example case 2: There is no common prefix among the strings \\"dog\\", \\"racecar\\", \\"car\\", and \\"bus\\", so the output is an empty string.","solution":"def longest_common_prefix(strings): Returns the longest common prefix for a list of strings. if not strings: return \\"\\" # find the minimum length string from the list min_length = len(min(strings, key=len)) common_prefix = \\"\\" for i in range(min_length): # get the current character from the first string current_char = strings[0][i] # check if this character is the same in all strings for string in strings: if string[i] != current_char: return common_prefix # if all strings have the same character at this position, add it to prefix common_prefix += current_char return common_prefix def process_input(T, test_cases): Processes the list of test cases and returns the longest common prefix for each test case. results = [] for i in range(T): N, strings = test_cases[i] results.append(longest_common_prefix(strings)) return results"},{"question":"Create a function that takes a list of integers and an integer `n`, and returns a new list containing only the numbers from the original list that are less than `n`. The returned list should maintain the original order of appearance. If the provided list is empty, return an empty list. # Examples: ```python filter_numbers([1, 4, 6, 8, 3, 0], 5) -> [1, 4, 3, 0] filter_numbers([10, 20, 30], 15) -> [10] filter_numbers([], 5) -> [] ``` # Function Signature: ```python def filter_numbers(nums: List[int], n: int) -> List[int]: # Your code here ```","solution":"from typing import List def filter_numbers(nums: List[int], n: int) -> List[int]: Returns a new list containing only the numbers from the original list that are less than n, maintaining their original order. return [num for num in nums if num < n]"},{"question":"In this challenge, you need to write a function that counts the number of distinct substrings in a given string. A substring is a contiguous sequence of characters within a string. ```python count_distinct_substrings(\\"abc\\") = 6 count_distinct_substrings(\\"aaa\\") = 3 ``` # Explanation: - The distinct substrings of \\"abc\\" are `[\\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\"]`. - The distinct substrings of \\"aaa\\" are `[\\"a\\", \\"aa\\", \\"aaa\\"]`. The input will be a string of lowercase letters only. Implement a function `count_distinct_substrings(s)` that returns the number of distinct substrings in the given string `s`. Good luck!","solution":"def count_distinct_substrings(s): Counts the number of distinct substrings in the given string \'s\'. substring_set = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substring_set.add(s[i:j]) return len(substring_set)"},{"question":"# Task Given two arrays, `arr1` and `arr2`, determine whether they contain the same elements, regardless of order. The elements in the arrays can be repeated. # Example For `arr1 = [1, 2, 3, 4]` and `arr2 = [4, 3, 2, 1]`, the output should be `true`; For `arr1 = [1, 2, 3, 4]` and `arr2 = [4, 3, 2, 2]`, the output should be `false`. # Input/Output - `[input]` integer array `arr1`, integer array `arr2` Constraints: `1 ≤ arr1.length, arr2.length ≤ 1000, -10000 ≤ arr1[i], arr2[i] ≤ 10000.` - `[output]` a boolean value `true` if both arrays contain the same elements, `false` otherwise.","solution":"def are_arrays_equal(arr1, arr2): Returns True if both arrays contain the same elements (with the same frequency), regardless of order. from collections import Counter return Counter(arr1) == Counter(arr2)"},{"question":"# Description Write a function that calculates the total sum of all prime numbers up to and including a given integer `n`. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. The first few prime numbers are 2, 3, 5, 7, 11, and so on. # Instructions You need to complete the following function: ```python def sum_of_primes(n): pass ``` The function should take one argument, `n`, which is a positive integer. The function should return the sum of all prime numbers less than or equal to `n`. For example, for `n = 10`, the prime numbers less than or equal to 10 are `2, 3, 5, 7`, and their sum is `17`. Therefore, `sum_of_primes(10)` should return `17`. Constraints: - The input integer `n` is at least 2. Examples: ```python sum_of_primes(10) # should return 17 sum_of_primes(20) # should return 77 sum_of_primes(2) # should return 2 sum_of_primes(1_000) # should return some large number ``` You may assume that the input integer `n` will not exceed 10,000. Implementation Notes - Consider using an efficient algorithm to find all prime numbers up to `n`, such as the Sieve of Eratosthenes. - Ensure that your function handles the edge case of the smallest prime number properly.","solution":"def sum_of_primes(n): Returns the sum of all prime numbers up to and including n. if n < 2: return 0 primes = [True] * (n + 1) primes[0] = primes[1] = False # 0 and 1 are not prime numbers p = 2 while p * p <= n: if primes[p]: for i in range(p * p, n + 1, p): primes[i] = False p += 1 return sum(i for i in range(n + 1) if primes[i])"},{"question":"Write a function that takes a non-negative integer n and returns an array of all the prime numbers less than n. A prime number is a natural number greater than 1 and cannot be formed by multiplying two smaller natural numbers. For example, given `n = 10`, the function should return `[2, 3, 5, 7]` because these are the prime numbers less than 10. Your task is to write a function that: 1. Receives an integer n >= 0 as input. 2. Returns an array of primes less than n. The function should aim for optimal performance. Solutions that use a naive approach might not perform well for larger values of n. Consider using algorithms like the Sieve of Eratosthenes for a more efficient result. Examples: ```text findPrimes(10) => [2, 3, 5, 7] findPrimes(0) => [] findPrimes(1) => [] findPrimes(20) => [2, 3, 5, 7, 11, 13, 17, 19] ``` All input arrays will be valid non-negative integers, so you won\'t need to validate the input. Good luck and have fun!","solution":"def findPrimes(n): Returns a list of all prime numbers less than n. if n <= 2: return [] # Sieve of Eratosthenes is_prime = [True] * n is_prime[0] = is_prime[1] = False # 0 and 1 are not primes for i in range(2, int(n ** 0.5) + 1): if is_prime[i]: for j in range(i * i, n, i): is_prime[j] = False return [i for i in range(n) if is_prime[i]]"},{"question":"Create a function `find_shortest_path` that determines the shortest path between two nodes in an unweighted graph, using a Breadth-First Search (BFS) algorithm. The function should take in three parameters: 1. A dictionary representing the graph, where keys are node names and values are lists of neighboring nodes. 2. A string representing the start node. 3. A string representing the end node. The function should return a list of nodes representing the shortest path from the start node to the end node. If no path exists, return an empty list. ```python def find_shortest_path(graph, start, end): # Your code here pass ``` Example: ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\', \'E\'], \'C\': [\'A\', \'F\'], \'D\': [\'B\'], \'E\': [\'B\', \'F\'], \'F\': [\'C\', \'E\'] } find_shortest_path(graph, \'A\', \'F\') # Output: [\'A\', \'C\', \'F\'] or [\'A\', \'B\', \'E\', \'F\'] find_shortest_path(graph, \'A\', \'D\') # Output: [\'A\', \'B\', \'D\'] ``` **Constraints:** - The graph is undirected and unweighted. - Node names are unique strings. - Assume the input graph is connected, i.e., there is always a path between any given start and end nodes.","solution":"from collections import deque def find_shortest_path(graph, start, end): Determines the shortest path between two nodes in an unweighted graph using BFS. Parameters: graph (dict): A dictionary representing the graph. start (str): The start node. end (str): The end node. Returns: list: The shortest path from start to end node as a list of nodes. If no path exists, return an empty list. if start == end: return [start] queue = deque([(start, [start])]) visited = set() while queue: current_node, path = queue.popleft() if current_node in visited: continue visited.add(current_node) for neighbor in graph.get(current_node, []): if neighbor == end: return path + [neighbor] else: queue.append((neighbor, path + [neighbor])) return []"},{"question":"You are given a grid with R rows and C columns. Each cell in the grid contains a positive integer, representing the number of coins in that cell. You start at the top-left cell (1, 1) and your goal is to reach the bottom-right cell (R, C). You can only move to the right or down from your current cell. Find the maximum number of coins you can collect along the way to the bottom-right cell. -----Constraints----- - All input values are integers. - 1 ≤ R, C ≤ 1000 - 1 ≤ value of each cell ≤ 10^9 -----Input----- The input is given from Standard Input in the following format: R C grid_11 grid_12 ... grid_1C grid_21 grid_22 ... grid_2C ... grid_R1 grid_R2 ... grid_RC -----Output----- Print the maximum number of coins you can collect when you reach the bottom-right cell. -----Sample Input----- 3 3 1 2 3 4 5 6 7 8 9 -----Sample Output----- 29 Starting from cell (1, 1): 1→2→3→6→9 = 1+2+3+6+9 = 21 coins. Another path which collects more coins: 1→4→5→6→9 = 1+4+5+6+9 = 25 coins. The optimal path: 1→4→7→8→9 = 1+4+7+8+9 = 29 coins, which is the maximum possible.","solution":"def max_coins_in_grid(grid): Returns the maximum number of coins that can be collected from top-left to bottom-right of the grid. :param grid: List of List of integers representing the grid :return: Integer, maximum coins collected R = len(grid) C = len(grid[0]) # Create a 2D list to store the maximum coins collected up to each cell dp = [[0]*C for _ in range(R)] # Initialize the first cell with the value of grid[0][0] dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for c in range(1, C): dp[0][c] = dp[0][c-1] + grid[0][c] # Fill the first column (can only come from above) for r in range(1, R): dp[r][0] = dp[r-1][0] + grid[r][0] # Fill the rest of the dp table for r in range(1, R): for c in range(1, C): dp[r][c] = grid[r][c] + max(dp[r-1][c], dp[r][c-1]) # The result is the value in the bottom-right cell return dp[R-1][C-1]"},{"question":"Given a non-negative integer `numRows`, generate the first `numRows` of Pascal\'s triangle. In Pascal\'s triangle, each number is the sum of the two numbers directly above it. Example: Input: 5 Output: [ [1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1] ] Note: numRows will be a non-negative integer, and the generated triangle should have the correct formation as described.","solution":"def generate_pascals_triangle(numRows): Generate the first numRows of Pascal\'s triangle. if numRows == 0: return [] triangle = [[1]] for row_number in range(1, numRows): row = [1] for j in range(1, row_number): row.append(triangle[row_number - 1][j - 1] + triangle[row_number - 1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"# Task Given a list of integers, write a function that returns the length of the longest increasing subsequence. # Example For `[10, 9, 2, 5, 3, 7, 101, 18]`, the output should be `4` because the longest increasing subsequence is `[2, 3, 7, 101]`. # Input/Output - `[input]` list of integers `arr` A list of integers where `1 ≤ arr.length ≤ 1000` and `-10^6 ≤ arr[i] ≤ 10^6`. - `[output]` an integer The length of the longest increasing subsequence.","solution":"def length_of_lis(arr): Returns the length of the longest increasing subsequence in the given list of integers. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a string consisting of lowercase alphabetic characters. Your task is to write a function that finds the character which appears the least frequently in the string. If multiple characters have the same lowest frequency, return the one which appears first in the string. For example, given the input string \\"aabcccd\\", the function should return \'b\' because \'b\' appears only once, and it appears before any other characters that also have a frequency of one. **Note:** The function accepts a string and returns a single character.","solution":"def find_least_frequent_char(s): Finds the character which appears the least frequently in the string. If multiple characters have the same lowest frequency, returns the one which appears first in the string. if not s: return None char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 least_frequent_char = None min_frequency = float(\'inf\') for char in s: if char_count[char] < min_frequency: min_frequency = char_count[char] least_frequent_char = char return least_frequent_char"},{"question":"The museumist is curating an exhibition and wants to create feature walls that display a unique composition based on unique numbers. The exhibitionist needs your help to generate these feature walls. Each wall will display a sequence of numbers that incrementally build up to a given number, N, formatted as a matrix. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the formatted feature wall sequence. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 20 -----Sample Input:----- 3 2 3 4 -----Sample Output:----- 1 1 2 1 1 2 1 1 2 1 2 3 1 1 2 1 2 3 1 2 3 4 -----EXPLANATION:----- For each test case, the matrix displays increasing sequences up to the given number N. For example, for N=2, you get: 1 1 2 And for N=3, you get: 1 1 2 1 2 3","solution":"def generate_feature_walls(T, cases): result = [] for N in cases: wall = [] for i in range(1, N + 1): wall.append(\' \'.join(str(x) for x in range(1, i + 1))) result.append(wall) return result def format_walls(walls): formatted_output = \\"\\" for wall in walls: formatted_output += \'n\'.join(wall) + \'n\' return formatted_output.rstrip(\'n\')"},{"question":"You are given a string containing a sequence of space-delimited words. Write a function that returns the length of the shortest word from the sequence. Return: * `length` of the shortest word in the string. * `-1` if the input string is empty. Examples ``` \\"apple orange banana\\" ==> return 5, because \\"apple\\" is the shortest word (5 characters) \\"this is a test\\" ==> return 1, because \\"a\\" is the shortest word (1 character) \\"\\" ==> return -1, because the input string is empty. \\"a bb ccc dddd eeeee\\" ==> return 1, because \\"a\\" is the shortest word (1 character) \\"singleword\\" ==> return 10, because \\"singleword\\" is the only word and its length is 10. ```","solution":"def shortest_word_length(s): Returns the length of the shortest word in the input string s. If the input string is empty, returns -1. if not s: return -1 words = s.split() if not words: return -1 return min(len(word) for word in words)"},{"question":"Task You are a software developer at a car rental company. Your job is to write a program that manages a fleet of rental cars. The program should help track which cars are available for rent and which are currently rented out. Additionally, it should support booking a car for a customer and returning a car once it\'s no longer needed. # Booking a Car: - A customer can request a car by specifying a type (e.g., \\"Sedan\\", \\"SUV\\", \\"Truck\\"). - If a car of the requested type is available, it should be marked as rented and the car\'s ID should be returned. - Otherwise, return the message \\"No car available\\". # Returning a Car: - A customer can return a car using its ID. - The car should be marked as available again. # Input: - The program should first read n, the number of cars in the fleet. - It should then read n lines where each line contains a car ID and its type separated by a space. - It should then read an integer m, the number of operations. - It should then read m lines where each line is an operation. An operation is either of the form: - \\"Book <Car Type>\\" - \\"Return <Car ID>\\" # Output: - For each \\"Book\\" operation, output the car ID if the booking is successful, otherwise \\"No car available\\". - For each \\"Return\\" operation, output \\"Car returned\\" if the return is successful, otherwise \\"Car not found\\". # Constraints: - 1 <= n <= 1000 (number of cars) - 1 <= m <= 1000 (number of operations) - Each car ID is a unique integer. - Car types are strings containing only alphabetic characters and spaces. - Car IDs are integers. # Example: Input: ``` 5 1001 Sedan 1002 SUV 1003 Truck 1004 Sedan 1005 SUV 4 Book Sedan Book Truck Return 1003 Book Truck ``` Output: ``` 1001 1003 Car returned No car available ``` # Note: - The cars should be managed so that bookings return the lowest ID available for the requested type. - Attempting to return a car that is not currently rented should be handled gracefully.","solution":"class CarRental: def __init__(self): self.available_cars = {} self.rented_cars = {} def initialize_fleet(self, n, car_list): for i in range(n): car_id, car_type = car_list[i] if car_type not in self.available_cars: self.available_cars[car_type] = [] self.available_cars[car_type].append(car_id) for car_type in self.available_cars: self.available_cars[car_type].sort() def book_car(self, car_type): if car_type in self.available_cars and self.available_cars[car_type]: car_id = self.available_cars[car_type].pop(0) self.rented_cars[car_id] = car_type return car_id else: return \\"No car available\\" def return_car(self, car_id): if car_id in self.rented_cars: car_type = self.rented_cars.pop(car_id) self.available_cars[car_type].append(car_id) self.available_cars[car_type].sort() return \\"Car returned\\" else: return \\"Car not found\\""},{"question":"A popular electronics retailer is conducting a promotion to boost sales. Customers who purchase a certain number of items will receive a discount. The discount amount is the maximum difference between any two prices among the purchased items. If a customer buys less than two items, they do not qualify for a discount. You are given a list of prices of items and the number of items a customer must buy to qualify for a discount. Your task is to determine the maximum discount the customer can receive if they buy the required number of items. Write a function `max_discount(prices, k)` that takes a list of integers `prices` and an integer `k` as input. The function should return the maximum possible discount a customer can receive. -----Input----- - `prices` is a list of integers where each integer represents the price of an item. - `k` is an integer representing the number of items a customer must buy. It is guaranteed that `k` is at least 2 and at most the length of `prices`. -----Output----- The function should return the maximum possible discount as an integer, which is the maximum difference between any two prices among the purchased items. -----Example----- Input: ```python prices = [10, 20, 30, 40, 50] k = 3 ``` Output: ```python 40 ``` Input: ```python prices = [50, 20, 1, 4, 60, 35] k = 4 ``` Output: ```python 59 ``` Explanation: In the first example, by selecting any 3 items, the maximum discount is `50 - 10 = 40`. In the second example, by selecting the items with prices `[1, 4, 50, 60]`, the maximum discount is `60 - 1 = 59`.","solution":"def max_discount(prices, k): Returns the maximum possible discount a customer can receive by buying k items. The discount is the maximum difference between any two prices among the purchased items. if k < 2 or k > len(prices): return 0 # Not enough items to qualify for a discount # Find the minimum and maximum prices in the list min_price = min(prices) max_price = max(prices) # The discount is the difference between the maximum and minimum price discount = max_price - min_price return discount"},{"question":"=====Problem Statement===== You are given a list of integers and an integer k. Your task is to rotate the list to the right by k positions. =====Input Format===== The first line contains a list of integers separated by spaces. The second line contains the integer k. =====Constraints===== 1 <= len(list) <= 1000 0 <= k <= 1000 =====Output Format===== Print the rotated list. =====Example===== Input 1 2 3 4 5 2 Output 4 5 1 2 3","solution":"def rotate_list_by_k(lst, k): Rotates the list to the right by k positions. if not lst: return lst n = len(lst) k = k % n # To handle cases where k > n return lst[-k:] + lst[:-k] # Example usage lst = [1, 2, 3, 4, 5] k = 2 rotated_list = rotate_list_by_k(lst, k) print(rotated_list) # Output: [4, 5, 1, 2, 3]"},{"question":"In a fictional country, postal codes follow a specific format. The format includes five to seven alphanumeric characters, where the first three characters are strictly alphabetical (uppercase letters only), and the remaining characters (two to four) are strictly numerical. Implement a function that validates whether a given postal code follows the correct format. Function Signature: ```python def validate_postal_code(postal_code: str) -> bool: pass ``` **Input**: - `postal_code`: a string representing a postal code, which may or may not comply with the rules mentioned above. **Output**: - Return `True` if the postal code is valid according to the specified format; otherwise, return `False`. **Examples**: ```python validate_postal_code(\\"ABC123\\") # => True validate_postal_code(\\"XYZ45\\") # => True validate_postal_code(\\"HELLO12\\") # => False (contains more than 3 letters initially) validate_postal_code(\\"AB12\\") # => False (first part must be 3 letters) validate_postal_code(\\"PQRS7890\\") # => False (length exceeds 7 characters) validate_postal_code(\\"DEF1\\") # => False (numeric part must be at least 2 digits) validate_postal_code(\\"RST789\\") # => True ``` **Note**: - Assume that the input string contains only uppercase alphabetical letters and digits. - Ensure the function checks both the length and character composition of the postal code.","solution":"def validate_postal_code(postal_code: str) -> bool: Validates if the given postal code follows the defined format: - First three characters must be uppercase alphabetical letters. - The remaining two to four characters must be digits. - The total length must be between 5 and 7 characters. Args: postal_code (str): The postal code to validate. Returns: bool: True if the postal code is valid, False otherwise. if not (5 <= len(postal_code) <= 7): return False first_part = postal_code[:3] second_part = postal_code[3:] if not first_part.isalpha() or not first_part.isupper(): return False if not second_part.isdigit() or not (2 <= len(second_part) <= 4): return False return True"},{"question":"Write a function that takes a string as input and returns the longest palindrome within the string. If there are multiple palindromes of the same length, return the first one that appears. ``` input: \\"babad\\" output: \\"bab\\" Note: \\"aba\\" is also a valid answer. input: \\"cbbd\\" output: \\"bb\\" ``` The input string will have a maximum length of 1000 characters and will contain only lowercase English letters.","solution":"def longest_palindrome(s): Returns the longest palindrome in the input string. :param s: str :return: str if not s: return \\"\\" def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # Odd-length palindromes odd_palindrome = expand_around_center(i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Even-length palindromes even_palindrome = expand_around_center(i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"Given a string s consisting of letters and digits, find the length of the longest substring that contains only digits. Example 1: Input: s = \\"abc1234567def89\\" Output: 7 Explanation: The longest substring of digits is \\"1234567\\" which has length 7. Example 2: Input: s = \\"abc123def\\" Output: 3 Explanation: The longest substring of digits is \\"123\\" which has length 3. Example 3: Input: s = \\"abcd\\" Output: 0 Explanation: There are no digits in the string, so the longest substring length is 0.","solution":"def longest_digit_substring(s): Returns the length of the longest substring that contains only digits. max_len = 0 current_len = 0 for char in s: if char.isdigit(): current_len += 1 if current_len > max_len: max_len = current_len else: current_len = 0 return max_len"},{"question":"Given a positive integer `N`, construct a binary string of length `N` such that: - The string does not contain consecutive \'1\'s. - The string is lexicographically smallest. Return the constructed binary string. Example 1: Input: 3 Output: \\"010\\" Example 2: Input: 5 Output: \\"01010\\" Example 3: Input: 1 Output: \\"0\\" Note: 1 <= N <= 1000","solution":"def construct_binary_string(N): Constructs a binary string of length N such that: - The string does not contain consecutive \'1\'s. - The string is lexicographically smallest. result = [] for i in range(N): if i % 2 == 0: result.append(\'0\') else: result.append(\'1\') return \'\'.join(result)"},{"question":"You are given an initially empty integer list. You have to perform Q operations on this list. There are two types of operations: 1. Add an integer X to the end of the list. 2. Remove all occurrences of a given integer Y from the list. For each operation of type 2, you need to report the number of elements removed. -----Input----- - The first line contains a single integer Q, the number of operations. - The following Q lines each describe an operation in one of the following formats: - `1 X`, where `1` indicates adding the integer X to the list. - `2 Y`, where `2` indicates removing all occurrences of the integer Y` from the list. -----Output----- For each operation of type 2, output the number of elements removed. -----Constraints----- - 1 le Q le 100,000 - 1 le X, Y le 10^9 -----Example Input---- 5 1 3 1 3 1 5 2 3 2 5 -----Example Output----- 2 1 Explanation: - After adding 3 to the list, the list is [3]. - After adding another 3, the list is [3, 3]. - Adding 5 makes the list [3, 3, 5]. - Removing 3 results in removing 2 elements, so the updated list is [5], and we print 2. - Removing 5 results in removing 1 element, so the list becomes empty, and we print 1.","solution":"def perform_operations(operations): Performs the list operations as specified and returns results for type 2 operations. Args: operations (list of tuples): A list of tuples where each tuple represents an operation. Each tuple can be either (1, X) for adding integer X to the list or (2, Y) for removing all occurrences of integer Y from the list. Returns: list of int: A list containing the number of elements removed for each type 2 operation. lst = [] removal_counts = [] for operation in operations: if operation[0] == 1: lst.append(operation[1]) elif operation[0] == 2: value_to_remove = operation[1] initial_length = len(lst) lst = [x for x in lst if x != value_to_remove] removed_count = initial_length - len(lst) removal_counts.append(removed_count) return removal_counts"},{"question":"You are given a list of strings where each string represents a word. Your task is to find all the anagrams in the list and group them together. An anagram is a word formed by rearranging the letters of another word. You should return a list of groups, where each group is a list of anagrams. input // [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] output // [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] ```group_anagrams([\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]) // [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]]``` ```group_anagrams([\\"\\", \\"\\"]) // [[\\"\\", \\"\\"]]``` ```group_anagrams([\\"a\\"]) // [[\\"a\\"]]``` ```group_anagrams([\\"cab\\", \\"bac\\", \\"abc\\", \\"xyz\\", \\"yxz\\"]) // [[\\"cab\\", \\"bac\\", \\"abc\\"], [\\"xyz\\", \\"yxz\\"]]```","solution":"from collections import defaultdict def group_anagrams(words): Groups anagrams together from a list of words. Parameters: words (list of str): The list of words to group. Returns: list of list of str: A list of groups, where each group is a list of anagrams. anagram_map = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_map[sorted_word].append(word) return list(anagram_map.values())"},{"question":"In a faraway galaxy, there are multiple planets connected by a complex network of wormholes. Each wormhole connects two different planets and can be travelled in both directions. The president of the galaxy wants to introduce a new policy that will enhance security. According to this policy, all wormholes must be checked to ensure they do not form a cycle, making it possible to travel in a loop without revisiting any wormhole. You are appointed as the chief scientist and must determine if the current network of wormholes already forms an acyclic structure. More formally, you have to check if the graph formed by planets and wormholes is a tree. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 50). The description of the test cases follows. The first line of each test case contains two integers n, m (1 le n, m le 100) — the number of planets and the number of wormholes correspondingly. The next m lines of each test case contain two integers u and v (1 le u, v le n) — indicating that there is a wormhole between planets u and v. It is guaranteed that all wormholes connect two different planets. -----Output----- For each test case, output \\"YES\\" if the network of wormholes forms a tree. Otherwise, output \\"NO\\". You can print each letter in any case (upper or lower). -----Example----- Input 3 3 2 1 2 1 3 4 3 1 2 2 3 3 4 4 4 1 2 2 3 3 4 4 1 Output YES YES NO -----Note------ In the first test case of the example, the network is already a tree with planets 1, 2, and 3 connected in a simple structure without cycles. In the second test case of the example, the network is also acyclic, forming a simple chain from planet 1 through planets 2 and 3 to planet 4. In the third test case of the example, there is a cycle: 1-2-3-4-1, hence the network of wormholes does not form a tree.","solution":"def is_tree(n, m, edges): Determines if the graph formed by \'n\' nodes and \'m\' edges is a tree. if m != n - 1: # For a graph to be a tree, it must have exactly n-1 edges return \\"NO\\" from collections import defaultdict, deque # Build adjacency list adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) # Check if the graph is connected using BFS/DFS visited = set() def bfs(start): queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in adj[node]: if neighbor not in visited: queue.append(neighbor) bfs(1) # Start BFS from node 1 (1-based index) # If all nodes are reachable and no cycle is present (handled by edge count above) return \\"YES\\" if len(visited) == n else \\"NO\\" def galaxies_test(t, test_cases): results = [] for case in test_cases: n, m, edges = case results.append(is_tree(n, m, edges)) return results"},{"question":"John is fascinated by palindromic strings. He considers a string to be strictly beautiful if it is not only a palindrome but also meets additional criteria: each character must be lexically greater than the character immediately preceding it, with the possible exception of the middle character if the string length is odd. John wants to generate such strictly beautiful palindromic strings of a given length `L`. Write a function `generate_beautiful_palindrome(L)` that returns the lexicographically smallest strictly beautiful palindromic string of length `L`. If it\'s impossible to create such a string under the given constraints, return \\"IMPOSSIBLE\\". -----Input----- - A single integer `L`, the length of the desired strictly beautiful palindromic string. -----Output----- - A single line containing the lexicographically smallest strictly beautiful palindromic string of length `L`, or \\"IMPOSSIBLE\\" if no such string exists. -----Constraints----- - 1 ≤ L ≤ 1000 -----Example----- Input: 1 Output: a Input: 5 Output: abcba Input: 4 Output: abba Explanation: Example case 1: Any single character is a palindrome. Since the constraint on characters being strictly lexically greater does not apply here, \\"a\\" is the answer. Example case 2: For length 5, the lexicographically smallest strictly beautiful palindromic string is \\"abcba\\". Example case 3: For length 4, the lexicographically smallest strictly beautiful palindromic string is \\"abba\\".","solution":"def generate_beautiful_palindrome(L): if L < 1 or L > 1000: return \\"IMPOSSIBLE\\" if L == 1: return \\"a\\" # For strictly beautiful palindromes, construct the smallest lexicographically possible string. half_length = (L + 1) // 2 half_string = [chr(ord(\'a\') + i) for i in range(half_length)] left_half = \'\'.join(half_string) # Construct the palindrome if L % 2 == 0: result = left_half + left_half[::-1] else: result = left_half + left_half[:-1][::-1] return result"},{"question":"You are given a string containing a series of words separated by spaces. Your task is to write a function that will return the length of the shortest word(s) in the string. For example, if the function is given the string \\"The quick brown fox jumps over the lazy dog\\", it should return 3, because \\"The\\", \\"fox\\", and \\"the\\" are the shortest words at 3 characters each. Consider edge cases like an empty string, which should return 0, and strings that contain multiple spaces. Ensure your function handles these cases appropriately. Good luck!","solution":"def length_of_shortest_word(s): Returns the length of the shortest word(s) in the given string. if not s.strip(): return 0 words = s.split() shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"Create a class **RecentCounter** to count recent requests. RecentCounter(): Initializes the counter with zero requests. ping(t): Adds a new request at time `t`, where `t` represents some time in milliseconds. Returns the number of requests that have happened in the past 3000 milliseconds (inclusive of the new request). Example: RecentCounter counter = new RecentCounter(); counter.ping(1); // returns 1 counter.ping(100); // returns 2 counter.ping(3001); // returns 3 counter.ping(3002); // returns 3 Constraints: 1 <= t <= 10^9 Each time `t` will be strictly increasing, and the number of calls to `ping` is at most 10^4.","solution":"from collections import deque class RecentCounter: def __init__(self): Initializes the counter with zero requests. self.requests = deque() def ping(self, t: int) -> int: Adds a new request at time `t` and returns the number of requests that have happened in the past 3000 milliseconds (inclusive of the new request). self.requests.append(t) while self.requests and self.requests[0] < t - 3000: self.requests.popleft() return len(self.requests)"},{"question":"**Problem Statement:** A common string manipulation task is to determine the longest substring of a given string that contains at most two distinct characters. Your goal is to \\"teach\\" your computer to find this substring. Specifically, you will be implementing a function that takes a string `s` and returns the length of the longest substring that contains at most two distinct characters. # Input: - `s`: A non-empty string consisting of lowercase English letters. # Output: - An integer representing the length of the longest substring with at most two distinct characters. # Examples: ```python Input: \\"eceba\\" Output: 3 Explanation: The longest substring is \\"ece\\" with length 3. Input: \\"ccaabbb\\" Output: 5 Explanation: The longest substring is \\"aabbb\\" with length 5. ``` # Additional Information: - You may assume that `s` contains only lowercase English letters. - The length of `s` will be at most 10,000. # Hints: - Use the sliding window technique to iterate over the string efficiently. - Keep track of the characters and their frequencies within the current window. - Adjust the window size dynamically to maintain the condition of having at most two distinct characters. # Function Signature: ```python def longest_substring_with_two_distinct_chars(s: str) -> int: pass ```","solution":"def longest_substring_with_two_distinct_chars(s: str) -> int: from collections import defaultdict char_map = defaultdict(int) left = 0 max_length = 0 for right in range(len(s)): char_map[s[right]] += 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Task A hypothetical country\'s currency system consists of coins with certain denominations, which are all positive integers and powers of 2 (e.g., 1, 2, 4, 8, ...). Given a positive integer `amount`, your task is to determine the minimum number of coins needed to make that amount. For instance: - If the amount is 15, the minimum number of coins required would be 4 (one coin of 8, one coin of 4, one coin of 2, and one coin of 1). - If the amount is 7, the minimum number of coins required would be 3 (one coin of 4, one coin of 2, and one coin of 1). # Input/Output - `[input]` integer `amount` `1 <= amount <= 10,000` - `[output]` an integer The minimum number of coins needed to make the given amount.","solution":"def min_coins(amount): Returns the minimum number of coins needed to make the given amount in a hypothetical country\'s currency system which consists of coins with denominations that are powers of 2. count = 0 while amount > 0: # Find the largest power of 2 less than or equal to amount largest_coin = 1 while largest_coin * 2 <= amount: largest_coin *= 2 # Subtract the largest_coin from amount and increment the count amount -= largest_coin count += 1 return count"},{"question":"=====Problem Statement===== You are given a list of N tuples where each tuple represents a book in the library. Each tuple contains two elements: the name of the book and the year it was published. You are required to find the book(s) published in the second oldest year and output their names in alphabetical order. If multiple books were published in the second oldest year, sort their names alphabetically and print each name on a new line. =====Example===== books = [(\\"The Alchemist\\", 1988), (\\"The Great Gatsby\\", 1925), (\\"1984\\", 1949), (\\"Brave New World\\", 1932), (\\"Fahrenheit 451\\", 1953)] The ordered list of years is [1925, 1932, 1949, 1953, 1988], so the second oldest year is 1932. There is one book published in that year: [\\"Brave New World\\"]. The names are printed as: Brave New World =====Input Format===== The first line contains an integer, N, the number of books. The N subsequent lines describe each book. - Each line contains the name of the book and the year it was published, separated by a comma and a space. =====Constraints===== 2≤N≤10 There will always be one or more books published in the second oldest year. =====Output Format===== Print the name(s) of any book(s) published in the second oldest year. If there are multiple books, order their names alphabetically and print each one on a new line.","solution":"def second_oldest_books(books): Returns the names of books published in the second oldest year, sorted alphabetically. # Extract all unique years of publication years = sorted(list(set([book[1] for book in books]))) # Find the second oldest year second_oldest_year = years[1] # Collect the names of books published in the second oldest year second_oldest_books = [book[0] for book in books if book[1] == second_oldest_year] # Sort the book names alphabetically second_oldest_books.sort() return second_oldest_books"},{"question":"In the kingdom of Dinotopia, there are several dinosaur nests. Each nest can contain a number of eggs, and each egg has a specific hatch time. The king of Dinotopia wants to know the total number of eggs that will hatch within a given period. The period is defined by its start and end times, and an egg is considered to hatch within this period if its hatch time falls within the start and end times (inclusive). The challenge is to efficiently count the number of eggs that will hatch within multiple given periods. -----Input----- The first line of the input contains an integer N (1 ≤ N ≤ 10^5), the number of eggs. The second line contains N integers h1, h2, ..., hN (1 ≤ hi ≤ 10^9), where hi is the hatch time of the i-th egg. The third line contains an integer Q (1 ≤ Q ≤ 10^5), the number of periods. Each of the next Q lines contains two integers s and e (1 ≤ s ≤ e ≤ 10^9), defining the start and end times of the period. -----Output----- Output Q lines, each containing the number of eggs that will hatch within the respective period. -----Examples----- Input 5 1 3 5 7 9 3 1 5 4 8 10 15 Output 3 2 0 Input 4 2 2 2 2 2 1 3 2 2 Output 4 4","solution":"def count_hatching_eggs(hatch_times, periods): Returns a list of counts representing the number of eggs that hatch within the given periods. :param hatch_times: List of integers representing hatch times of eggs :param periods: List of tuples representing the periods (start time, end time) :return: List of integers representing the count of hatching eggs for each period hatch_times.sort() result = [] for start, end in periods: low = binary_search_left(hatch_times, start) high = binary_search_right(hatch_times, end) result.append(high - low) return result def binary_search_left(arr, x): lo, hi = 0, len(arr) while lo < hi: mid = (lo + hi) // 2 if arr[mid] < x: lo = mid + 1 else: hi = mid return lo def binary_search_right(arr, x): lo, hi = 0, len(arr) while lo < hi: mid = (lo + hi) // 2 if arr[mid] <= x: lo = mid + 1 else: hi = mid return lo"},{"question":"In this task, you are asked to create a function that determines if a given string is an anagram of a palindrome. Input Your function will receive a single argument: A string (the string which might be an anagram of a palindrome) Output Your function should return a boolean value: True if the string is an anagram of a palindrome, and False otherwise. Background A palindrome is a word that reads the same forwards and backwards. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Test Example ```python is_anagram_of_palindrome(\\"civic\\") # True is_anagram_of_palindrome(\\"ivicc\\") # True is_anagram_of_palindrome(\\"hello\\") # False is_anagram_of_palindrome(\\"aab\\") # True is_anagram_of_palindrome(\\"carerac\\") # True ``` Technical Details For the purpose of this exercise: The string will contain only lowercase alphabets The maximum length of the input string is 1000 characters You must minimize the complexity of your solution to ensure it can handle large inputs efficiently All test cases will be valid","solution":"def is_anagram_of_palindrome(s): Determines if the given string is an anagram of a palindrome. Args: s (str): The input string. Returns: bool: True if the string is an anagram of a palindrome, False otherwise. from collections import Counter # Count the occurrences of each character char_count = Counter(s) # Determine the number of characters that appear an odd number of times odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be an anagram of a palindrome, there can be at most one character with an odd count return odd_count <= 1"},{"question":"You are given a grid representing a city map where \'1\' represents land and \'0\' represents water. The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. Write a function to find the perimeter of the island. Function signature: `def islandPerimeter(grid: List[List[int]]) -> int:` Example: Input: [[0,1,0,0], [1,1,1,0], [0,1,0,0], [1,1,0,0]] Output: 16 Explanation: The perimeter is the 16 which are the boundaries of the island. Constraints: 1. The grid should be at least 1x1 and at most 100x100 in size. 2. The grid contains only \'0\'s and \'1\'s. 3. There is exactly one island. Here\'s a step-by-step breakdown of the expected solution: 1. Iterate over each cell in the grid. 2. If a cell contains land (\'1\'), check its four possible neighboring cells (left, right, up, down). 3. Count the perimeter contributions based on the status of the cell\'s neighbors (water or grid bounds). 4. Return the total perimeter count after processing all land cells in the grid.","solution":"from typing import List def islandPerimeter(grid: List[List[int]]) -> int: rows, cols = len(grid), len(grid[0]) perimeter = 0 def check_perimeter(i, j): p = 0 if i == 0 or grid[i-1][j] == 0: # check up p += 1 if i == rows-1 or grid[i+1][j] == 0: # check down p += 1 if j == 0 or grid[i][j-1] == 0: # check left p += 1 if j == cols-1 or grid[i][j+1] == 0: # check right p += 1 return p for i in range(rows): for j in range(cols): if grid[i][j] == 1: perimeter += check_perimeter(i, j) return perimeter"},{"question":"Given an array of non-negative integers representing the heights of a series of histograms where the width of each histogram is 1, find the area of the largest rectangle that can be formed within the boundaries of the histograms. Implement a function `largestRectangleArea(heights: List[int]) -> int` that returns this maximum area. Example: ``` Input: heights = [2, 1, 5, 6, 2, 3] Output: 10 Explanation: The largest rectangle has an area of 10 units, formed by histograms 3 and 4 with a height of 5 and 6 respectively. ``` Note: - Your algorithm should have linear time complexity.","solution":"from typing import List def largestRectangleArea(heights: List[int]) -> int: Given a list of non-negative integers representing the heights of histograms, computes the area of the largest rectangle that can be formed within the boundaries of the histograms. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"A hospital has several departments, each with a variable number of patient rooms. Each room can have a different number of patients. You need to answer several queries regarding the number of patients in specific room ranges within a department. You are given a list of departments, where each department is represented by an array containing the number of patients in each room. Queries are in the form of \\"what is the total count of patients from room `l` to room `r` for a specific department?\\" ---Input--- The first line contains two integers `d` and `q` (1 le d, q le 10^5) -- the number of departments and the number of queries. The next `d` lines describe each department. Each line begins with an integer n_i (1 le n_i le 10^5), the number of rooms in the `i`-th department, followed by n_i integers indicating the number of patients in each room. The next `q` lines describe each query. Each line contains three integers dep, l, and r (1 le dep le d, 1 le l le r le n_{dep}), representing a query about the `dep`-th department, asking for the total number of patients from the `l`-th to the `r`-th rooms inclusive. ---Output--- For each query, print a single integer representing the total number of patients from room `l` to room `r` in the specified department. ---Examples--- Input 3 4 5 2 3 4 5 6 3 1 2 3 4 7 8 9 10 1 2 4 2 1 3 3 1 2 1 1 5 Output 12 6 15 20 ---Note--- In the first example: - The first department has rooms with 2, 3, 4, 5, and 6 patients respectively. The query asks for the sum from the 2nd to the 4th room, which is 3 + 4 + 5 = 12. - The second department has rooms with 1, 2, and 3 patients. The query asks for the total from the 1st to the 3rd room, which is 1 + 2 + 3 = 6. - The third department has rooms with 7, 8, 9, and 10 patients. The query asks for the sum from the 1st to the 2nd room, which is 7 + 8 = 15. - The last query asks for the sum from the 1st to the 5th room in the first department, which is 2 + 3 + 4 + 5 + 6 = 20.","solution":"def hospital_queries(d, q, departments, queries): results = [] # Process each query for dep, l, r in queries: # Since `l` and `r` are 1-based indices, we need to adjust them to 0-based l -= 1 r -= 1 result = sum(departments[dep - 1][l:r + 1]) results.append(result) return results"},{"question":"Given a string s and an integer k, write a function that returns the number of distinct substrings of length k. A substring is a contiguous sequence of characters within a string. If s is shorter than k, return 0. ``` Example: distinctSubstrings(\\"abcabc\\", 3) should return 3, because: The substrings of length 3 are: \\"abc\\", \\"bca\\", \\"cab\\", and \\"abc\\". The distinct ones are \\"abc\\", \\"bca\\", and \\"cab\\". So the result is 3. distinctSubstrings(\\"aaaaa\\", 2) should return 1, because: The substrings of length 2 are: \\"aa\\", \\"aa\\", \\"aa\\", and \\"aa\\". There\'s only one distinct substring: \\"aa\\". So the result is 1. distinctSubstrings(\\"xyz\\", 4) should return 0, because: The string is shorter than k. ``` ```python def distinctSubstrings(s, k): if len(s) < k: return 0 substrings = {s[i:i+k] for i in range(len(s) - k + 1)} return len(substrings) ```","solution":"def distinctSubstrings(s, k): Returns the number of distinct substrings of length k in the string s. If the length of s is less than k, returns 0. if len(s) < k: return 0 # generate all possible substrings of length k substrings = {s[i:i+k] for i in range(len(s) - k + 1)} # return the number of distinct substrings return len(substrings)"},{"question":"# Task You are given a string of lowercase alphabets. Your task is to determine the minimum number of character changes required to make the string a palindrome. A string is a palindrome if it reads the same forwards as backwards. # Examples For `str = \\"abca\\"` the answer is `1` Because only one character has to be changed to create a palindrome. Change \'c\' to \'b\' or change \'b\' to \'c\' to make the string \\"abba\\" or \\"acca\\". For `str = \\"racecar\\"` the answer is `0` The string is already a palindrome. # Input/Output - `[input]` string `str` A string of lowercase alphabets. `1 ≤ str.length ≤ 1000` - `[output]` an integer The minimum number of character changes required to make the string a palindrome.","solution":"def min_changes_to_palindrome(s): This function returns the minimum number of character changes required to make the string a palindrome. changes = 0 length = len(s) for i in range(length // 2): if s[i] != s[length - i - 1]: changes += 1 return changes"},{"question":"You are given a string `brackets` consisting of `(` and `)` characters. Your task is to determine if all the brackets in the string form a valid combination (also known as balanced parentheses). A string of brackets is considered valid if brackets can be completely closed in the correct order. For instance: - If every opening bracket has a matching closing bracket and they appear in the correct order, the string is considered valid. - If there are unmatched brackets or brackets in the incorrect order, the string is not valid. __Example__ * For `brackets = \\"()\\"`, the output should be `isValid(brackets) = true`. The string is balanced and all brackets are in the correct order. * For `brackets = \\"(()(()))\\"`, the output should be `isValid(brackets) = true`. The string is balanced and all brackets are in the correct order. * For `brackets = \\"(()\\"`, the output should be `isValid(brackets) = false`. The string is not balanced - there\'s an unmatched opening bracket. * For `brackets = \\"())(\\"`, the output should be `isValid(brackets) = false`. The string is not balanced - the closing bracket does not have a matching opening bracket at the correct position. __Input/Output__ * [input] string brackets A string consisting of `(` and `)` characters. Constraints: `1 ≤ brackets.length ≤ 100`. * [output] boolean `true`, if the brackets are balanced and in the correct order; `false`, if the brackets are not balanced or in the incorrect order.","solution":"def isValid(brackets): Returns True if the input string brackets consists of balanced and correctly ordered parentheses. # Initialize a counter to keep track of open brackets balance = 0 for char in brackets: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 # If balance goes negative, we have more closing than opening if balance < 0: return False # If balance is zero, all opening brackets have matching closing brackets return balance == 0"},{"question":"Calculate Reservation Cost Hotel Management System Nina is working on a booking system for a hotel and needs to calculate the total cost for a customer\'s stay. The cost varies based on the type of room and the number of nights. She needs a function that takes the room type (\\"standard\\", \\"deluxe\\", or \\"penthouse\\") and the number of nights as input and calculates the total cost based on the following nightly rates: - \\"standard\\": 100 per night - \\"deluxe\\": 150 per night - \\"penthouse\\": 300 per night If the number of nights exceeds 7, a discount of 10% should be applied to the total cost before tax. Additionally, a tax of 8% should be applied to the final amount after any discounts. Write a function `calculate_total_cost(room_type, number_of_nights)` that returns the final total cost, including any discounts and taxes, correctly formatted to two decimal places. # Example: ``` calculate_total_cost(\\"deluxe\\", 6) Output: 972.00 calculate_total_cost(\\"penthouse\\", 10) Output: 2970.00 ```","solution":"def calculate_total_cost(room_type, number_of_nights): Returns the total cost for a customer\'s stay including any discounts and taxes. Parameters: - room_type (str): Type of room, can be \\"standard\\", \\"deluxe\\", or \\"penthouse\\" - number_of_nights (int): Number of nights for the stay Returns: - float: Total cost formatted to two decimal places rates = { \\"standard\\": 100, \\"deluxe\\": 150, \\"penthouse\\": 300 } if room_type not in rates: raise ValueError(\\"Invalid room type\\") # Calculate base cost before any discounts/taxes base_cost = rates[room_type] * number_of_nights # Apply discount if applicable if number_of_nights > 7: base_cost *= 0.90 # 10% discount # Apply tax total_cost = base_cost * 1.08 # 8% tax return round(total_cost, 2)"},{"question":"You are working on a genetics research project, and you need to write a software function that helps you analyze DNA sequences. DNA sequences are represented by strings consisting of the characters \'A\', \'C\', \'G\', and \'T\', which stand for the nucleotide bases adenine, cytosine, guanine, and thymine, respectively. One important task in DNA analysis is to determine the longest contiguous subsequence composed of only one type of nucleotide. Your goal is to write a function that takes a DNA sequence as input and returns the length of the longest contiguous subsequence of the same nucleotide. # Example ```python longest_nucleotide_subsequence(\\"ATCGGATCC\\") == 2 longest_nucleotide_subsequence(\\"AACCCTGGG\\") == 3 longest_nucleotide_subsequence(\\"CCCC\\") == 4 ``` # Constraints - The input DNA sequence will contain at least one character and will consist only of the characters \'A\', \'C\', \'G\', and \'T\'. - The input DNA sequence will be a string of length up to 10^6. # Python example implementation Using the given constraints and example, here is a potential implementation in Python. ```python def longest_nucleotide_subsequence(dna_sequence): max_length = current_length = 1 for i in range(1, len(dna_sequence)): if dna_sequence[i] == dna_sequence[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length) # Examples print(longest_nucleotide_subsequence(\\"ATCGGATCC\\")) # Output: 2 print(longest_nucleotide_subsequence(\\"AACCCTGGG\\")) # Output: 3 print(longest_nucleotide_subsequence(\\"CCCC\\")) # Output: 4 ``` Your task is to write an efficient algorithm to solve this problem within the given constraints.","solution":"def longest_nucleotide_subsequence(dna_sequence): Given a DNA sequence, return the length of the longest contiguous subsequence of the same nucleotide. :param dna_sequence: str : DNA sequence of characters \'A\', \'C\', \'G\', \'T\' :return: int : Length of the longest contiguous subsequence of the same nucleotide if not dna_sequence: return 0 max_length = current_length = 1 for i in range(1, len(dna_sequence)): if dna_sequence[i] == dna_sequence[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length)"},{"question":"Valid Parentheses Check You are given a string consisting of only parentheses characters: \'(\' and \')\'. Write a function to determine if the given string is a valid parentheses sequence. An input string is valid if: 1. Open parentheses \'(\' must be closed by the same type of parentheses \')\' in the correct order. 2. Open parentheses \'(\' must be closed in the correct order, meaning they cannot be closed before they are opened. # Example ```python def is_valid_parentheses(s: str) -> bool: # your code here print(is_valid_parentheses(\\"()\\")) # Output: True print(is_valid_parentheses(\\")(\\")) # Output: False print(is_valid_parentheses(\\"(())))(\\")) # Output: False print(is_valid_parentheses(\\"(())\\")) # Output: True print(is_valid_parentheses(\\"\\")) # Output: True ``` # Input - A single string `s` containing only the characters \'(\' and \')\'. # Output - Return `True` if the given string represents a valid parentheses sequence, otherwise return `False`.","solution":"def is_valid_parentheses(s: str) -> bool: Determines if the given string consisting of parentheses is valid. A string is valid if: - Open parentheses \'(\' must be closed by the same type of parentheses \')\' in the correct order. - Open parentheses \'(\' must be closed in the correct order. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack"},{"question":"# Task You are given an integer array `nums` and an integer `k`. Your task is to find the total number of continuous subarrays of `nums` whose sum equals to `k`. # Example For `nums = [1, 1, 1]` and `k = 2`, the result should be `2`. ``` The subarrays are [1, 1] and [1, 1]; there are two subarrays with sum equal to `k`. ``` For `nums = [1, 2, 3]` and `k = 3`, the result should be `2`. ``` The subarrays are [1, 2] and [3]; there are two subarrays with sum equal to `k`. ``` For `nums = [1, -1, 1, -1, 1, -1]` and `k = 0`, the result should be `9`. ``` The subarrays with sum equal to `k` are [1, -1], [-1, 1], [1, -1, 1, -1], [-1, 1, -1], [1, -1, 1, -1, 1, -1], [1, -1, 1, -1], [-1, 1, -1, 1], [-1, 1], [1, -1]; there are nine subarrays with sum equal to `k`. ``` # Input/Output - `[input]` integer array `nums` An integer array, representing the list of numbers. - `[input]` integer `k` An integer representing the target sum. - `[output]` an integer The total number of continuous subarrays whose sum equals to `k`.","solution":"from collections import defaultdict def subarray_sum(nums, k): Finds the total number of continuous subarrays whose sum equals k. :param nums: List[int] - list of integers. :param k: int - target sum. :return: int - total number of continuous subarrays with sum equal to k. count = 0 sum_so_far = 0 sum_count = defaultdict(int) sum_count[0] = 1 for num in nums: sum_so_far += num if (sum_so_far - k) in sum_count: count += sum_count[sum_so_far - k] sum_count[sum_so_far] += 1 return count"},{"question":"Write a function called `replace_abbreviations` that takes a string as input and replaces certain abbreviations with their corresponding full phrases. The function also needs to handle units of measurements specified as abbreviations, ensuring they are replaced with their full forms, while preserving the numerical values preceding them. The function should replace the following abbreviations: - `kg` should become `kilograms` - `cm` should become `centimeters` - `mL` should become `milliliters` - `km` should become `kilometers` - `hr` should become `hours` - `ft` should become `feet` - `lb` should become `pounds` For any string: All instances of the above abbreviations should be replaced with their corresponding full phrases, ensuring that the numerical values are correctly preserved, and sentences still start with capital letters. For example: * \\"The package weighs 5kg and it has a length of 3ft.\\" should become \\"The package weighs 5 kilograms and it has a length of 3 feet.\\" * \\"She ran 10km in 2hr and drank 500mL of water.\\" should become \\"She ran 10 kilometers in 2 hours and drank 500 milliliters of water.\\" * \\"John lifted 50kg and lost 5lb in the process.\\" should become \\"John lifted 50 kilograms and lost 5 pounds in the process.\\" If an abbreviation is not recognized, the function should leave it unchanged in the output string. Note that the abbreviations are case-sensitive and only the specified units should be replaced.","solution":"import re def replace_abbreviations(input_string): replacements = { \'kg\': \'kilograms\', \'cm\': \'centimeters\', \'mL\': \'milliliters\', \'km\': \'kilometers\', \'hr\': \'hours\', \'ft\': \'feet\', \'lb\': \'pounds\' } def replace_match(match): value = match.group(1) unit = match.group(2) return f\\"{value} {replacements[unit]}\\" pattern = re.compile(r\'(d+)(kg|cm|mL|km|hr|ft|lb)\') result = re.sub(pattern, replace_match, input_string) # Ensure sentences still start correctly with capital letters result = \'. \'.join(sentence.capitalize() for sentence in result.split(\'. \')) return result"},{"question":"Given a string s, you can perform the following operation any number of times: Remove one palindromic substring from s. Return the minimum number of operations needed to make the given string empty. Example 1: Input: s = \\"ababa\\" Output: 1 Explanation: \\"ababa\\" is already a palindrome, so you can remove it in one operation. Example 2: Input: s = \\"abb\\" Output: 2 Explanation: Remove palindrome \\"bb\\", then remove \\"a\\". Example 3: Input: s = \\"baabb\\" Output: 2 Explanation: Remove palindrome \\"baab\\", then remove \\"b\\". Constraints: 1 <= s.length <= 10^5 s contains only lowercase English letters.","solution":"def min_operations_to_empty_string(s): Returns the minimum number of operations needed to make the given string empty by removing palindromic substrings. if s == s[::-1]: return 1 else: return 2"},{"question":"You are given an array of integers and an integer k. Your task is to determine whether the array contains two distinct elements such that their difference is exactly k. Write a function `hasPairWithDifference(arr, k)` that takes an array of integers `arr` and an integer `k`, and returns `true` if there are two distinct elements in the array whose difference is k, and `false` otherwise. ``` For example: hasPairWithDifference([5, 20, 3, 2, 50, 80], 78) = true, because 80 - 2 = 78. hasPairWithDifference([90, 70, 20, 80, 50], 45) = false, as there is no pair with difference 45. hasPairWithDifference([1, 2, 3, 4, 5], 0) = false, as the difference cannot be zero between distinct elements. hasPairWithDifference([10, 10, 10, 10], 0) = true, because the difference between two distinct but identical elements (10-10) is zero. ``` More examples in test cases. Good luck!","solution":"def hasPairWithDifference(arr, k): Returns true if there are two distinct elements in the array whose difference is exactly k, otherwise returns false. num_set = set(arr) for num in arr: if (num + k) in num_set or (num - k) in num_set: if k != 0 or arr.count(num) > 1: # handle the case where k is zero specifically return True return False"},{"question":"Write a function that takes a string `s` as input and returns `True` if it is a palindrome and `False` otherwise. A string is considered a palindrome if it reads the same backward as forward, ignoring spaces, capitalization, and non-alphanumeric characters. Assume: 1. The input string can be of any length but is always less than 1,000,000 characters. Examples ``` \\"A man, a plan, a canal: Panama\\" -> True \\"race a car\\" -> False \\" \\" -> True \\"Able , was I saw eLba\\" -> True ```","solution":"import re def is_palindrome(s): Returns True if the input string s is a palindrome, and False otherwise. # Remove all non-alphanumeric characters and converting to lowercase cleaned_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"You are given a list of integers representing the stock prices of a company in chronological order, and a positive integer k. You are allowed to complete at most k transactions (buying and selling stocks). Design an algorithm to find the maximum profit you can achieve after completing at most k transactions. Note: - You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). - Each transaction consists of buying and selling one share of the stock. Examples: Example 1: Input: prices = [3,2,6,5,0,3], k = 2 Output: 7 Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3. Total profit = 4 + 3 = 7. Example 2: Input: prices = [3,2,6,5,0,3], k = 1 Output: 4 Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 4. Example 3: Input: prices = [1,2,3,4,5], k = 2 Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 4. Example 4: Input: prices = [7,6,4,3,1], k = 3 Output: 0 Explanation: No transaction is done, as the prices are continuously decreasing. Constraints: - 0 <= prices.length <= 1000 - 0 <= prices[i] <= 1000 - 1 <= k <= 100","solution":"def max_profit_with_k_transactions(prices, k): n = len(prices) if n == 0 or k == 0: return 0 # Initialize dp array where dp[i][j] represents the max profit # achievable using at most i transactions up to day j dp = [[0] * n for _ in range(k + 1)] for i in range(1, k + 1): max_diff = -prices[0] for j in range(1, n): # Update dp[i][j] - the max profit for i transactions by day j. dp[i][j] = max(dp[i][j-1], prices[j] + max_diff) # Update max_diff for the next iteration. max_diff = max(max_diff, dp[i-1][j] - prices[j]) return dp[k][n-1]"},{"question":"Dr. Fibonacci is a mathematician who loves Fibonacci numbers. He wants to create a modified Fibonacci sequence where each number in the sequence is the sum of the previous three numbers, rather than the previous two. Specifically, the sequence starts with three given numbers a, b, and c, and each subsequent number is the sum of the previous three numbers. Write a program that generates the first N numbers in this modified Fibonacci sequence. Input: The first line contains a single integer T representing the number of test cases. Each test case consists of two lines. The first line of each test case contains four integers a, b, c, and N, where a, b, and c are the first three numbers of the sequence, and N is the number of terms to generate. Output: For each test case, output the first N numbers of the modified Fibonacci sequence, separated by spaces. Sample Input: 2 1 1 1 5 0 1 2 7 Sample Output: 1 1 1 3 5 0 1 2 3 6 11 20","solution":"def modified_fibonacci(a, b, c, N): Generates the first N numbers in a modified Fibonacci sequence starting with a, b, c. Parameters: a (int): The first number of the sequence. b (int): The second number of the sequence. c (int): The third number of the sequence. N (int): The number of terms to generate. Returns: list: The first N numbers of the modified Fibonacci sequence. if N <= 0: return [] elif N == 1: return [a] elif N == 2: return [a, b] elif N == 3: return [a, b, c] sequence = [a, b, c] for _ in range(3, N): next_val = sequence[-1] + sequence[-2] + sequence[-3] sequence.append(next_val) return sequence def run_test_cases(test_cases): Process the given test cases and print the results. Parameters: test_cases (list): A list of test case tuples, each containing four integers a, b, c, and N. results = [] for case in test_cases: a, b, c, N = case result = modified_fibonacci(a, b, c, N) results.append(result) return results"},{"question":"In a language processing system, every word is assigned a value. The value of a word is determined by a specific calculation based on the characters in the word. A word is worth the sum of the ASCII values of its characters squared. For example: - The ASCII value of \'A\' is 65. Hence the word \\"A\\" has a value of 65^2 = 4225. - The ASCII value of \'B\' is 66. Hence the word \\"B\\" has a value of 66^2 = 4356. - Therefore, the word \\"AB\\" has a total value of 4225 + 4356 = 8581. Given a list of words, you need to find and return the word that has the highest value. -----Input format----- Single line containing space-separated words. -----Output format----- One line which contains the word with the highest value. -----Test data----- 1 ≤ Length of each word ≤ 50 1 ≤ Number of words ≤ 1000 -----Sample Input----- SKY BUZZ XENON -----Sample Output----- XENON Explanation: - The value of \\"SKY\\" is (83^2 + 75^2 + 89^2) = 6889 + 5625 + 7921 = 20435 - The value of \\"BUZZ\\" is (66^2 + 85^2 + 90^2 + 90^2) = 4356 + 7225 + 8100 + 8100 = 27801 - The value of \\"XENON\\" is (88^2 + 69^2 + 78^2 + 79^2 + 78^2) = 7744 + 4761 + 6084 + 6241 + 6084 = 30914 Hence, \\"XENON\\" has the highest value which is 30914.","solution":"def word_value(word): Calculate the value of a word which is the sum of the ASCII values of its characters squared. return sum(ord(char)**2 for char in word) def find_highest_value_word(words): Given a list of words, return the word with the highest value. if not words: return None return max(words, key=word_value)"},{"question":"Create a function that simulates a simple vending machine. The vending machine has limited stock of several items. Each item has a name, a price, and a quantity. The vending machine accepts coins and bills, maintains a record of the money inserted, and can dispense change if necessary. You need to implement the following functionalities: 1. Insert money into the vending machine. The machine accepts the following denominations: [0.05, 0.10, 0.25, 1.00, 5.00]. 2. Select an item to purchase. If the inserted money is enough, dispense the item and return any change. Deduct the appropriate amount from the machine\'s inventory. 3. Check the current inventory of the vending machine. 4. Reset the machine to its initial state with a specific inventory of items. ```python class VendingMachine: def __init__(self): # Initialize the machine with some predefined items and quantities self.items = { \\"Soda\\": {\\"price\\": 1.25, \\"quantity\\": 10}, \\"Chips\\": {\\"price\\": 0.75, \\"quantity\\": 15}, \\"Candy\\": {\\"price\\": 1.00, \\"quantity\\": 20}, } self.balance = 0.0 def insert_money(self, amount): if amount in [0.05, 0.10, 0.25, 1.00, 5.00]: self.balance += amount else: return \\"Invalid denomination.\\" def select_item(self, item_name): if item_name not in self.items: return \\"Item not found.\\" elif self.items[item_name][\\"quantity\\"] <= 0: return \\"Item out of stock.\\" elif self.balance < self.items[item_name][\\"price\\"]: return \\"Insufficient balance.\\" else: self.balance -= self.items[item_name][\\"price\\"] self.items[item_name][\\"quantity\\"] -= 1 change = self.balance self.balance = 0 return f\\"Dispensed {item_name}. Change: {change}\\" def check_inventory(self): return self.items def reset_machine(self, new_inventory): self.items = new_inventory self.balance = 0.0 # Example usage: vending_machine = VendingMachine() print(vending_machine.check_inventory()) # Check initial stock vending_machine.insert_money(1.00) # Insert 1.00 print(vending_machine.select_item(\\"Soda\\")) # Try to buy Soda vending_machine.insert_money(0.25) # Insert 0.25 print(vending_machine.select_item(\\"Soda\\")) # Buy Soda print(vending_machine.check_inventory()) # Check stock after purchase ``` Implement the `VendingMachine` class to simulate the above functionality. Your solution should handle edge cases, such as inserting invalid denominations, trying to buy an out-of-stock item, and selecting an item with insufficient balance.","solution":"class VendingMachine: def __init__(self): # Initialize the machine with some predefined items and quantities self.items = { \\"Soda\\": {\\"price\\": 1.25, \\"quantity\\": 10}, \\"Chips\\": {\\"price\\": 0.75, \\"quantity\\": 15}, \\"Candy\\": {\\"price\\": 1.00, \\"quantity\\": 20}, } self.balance = 0.0 def insert_money(self, amount): if amount in [0.05, 0.10, 0.25, 1.00, 5.00]: self.balance += amount else: return \\"Invalid denomination.\\" def select_item(self, item_name): if item_name not in self.items: return \\"Item not found.\\" elif self.items[item_name][\\"quantity\\"] <= 0: return \\"Item out of stock.\\" elif self.balance < self.items[item_name][\\"price\\"]: return \\"Insufficient balance.\\" else: self.balance -= self.items[item_name][\\"price\\"] self.items[item_name][\\"quantity\\"] -= 1 change = round(self.balance, 2) self.balance = 0 return f\\"Dispensed {item_name}. Change: {change:.2f}\\" def check_inventory(self): return self.items def reset_machine(self, new_inventory): self.items = new_inventory self.balance = 0.0"},{"question":"Implement a function that takes an integer n and returns the nth term of the Fibonacci sequence. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 You are not allowed to use a loop; the function must be recursive. ```python def fibonacci(n): Returns the nth Fibonacci number. # Your code here # Examples: print(fibonacci(0)) # should return 0 print(fibonacci(1)) # should return 1 print(fibonacci(5)) # should return 5 print(fibonacci(10)) # should return 55 ```","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"=====Function Descriptions===== .union() The .union() operator returns the union of a set and the set of elements in an iterable. Sometimes, the | operator is used in place of the .union() operator, but it only operates on the set of elements in set. The set is immutable to the .union() operation (or | operation). >>> s = set(\\"Hacker\\") >>> print s.union(\\"Rank\\") set([\'a\', \'c\', \'e\', \'H\', \'k\', \'n\', \'r\', \'R\']) >>> print s.union(set([\'R\', \'a\', \'n\', \'k\'])) set([\'a\', \'c\', \'e\', \'H\', \'k\', \'n\', \'r\', \'R\']) >>> print s.union([\'R\', \'a\', \'n\', \'k\']) set([\'a\', \'c\', \'e\', \'H\', \'k\', \'n\', \'r\', \'R\']) >>> print s.union(enumerate([\'R\', \'a\', \'n\', \'k\'])) set([\'a\', \'c\', \'e\', \'H\', \'k\', \'n\', \'r\', \'R\', (0, \'R\'), (1, \'a\'), (2, \'n\'), (3, \'k\')]) >>> print s.union({\\"Rank\\":1}) set([\'a\', \'c\', \'e\', \'H\', \'k\', \'n\', \'r\', \'R\', \'a\', \'n\', \'k\']) >>> s | set(\\"Rank\\") set([\'a\', \'c\', \'e\', \'H\', \'k\', \'n\', \'r\', \'R\']) =====Problem Statement===== The students of Riverdale High School have club memberships. Some students have joined only the Science Club, some have joined only the Math Club, and some have joined both clubs. You are provided with two sets of student roll numbers. One set has students who joined the Science Club, and another set has students who joined the Math Club. Your task is to determine the total number of unique students who have joined at least one club. =====Input Format===== The first line contains n, the number of students who have subscribed to the Science Club. The second line contains n space-separated roll numbers of those students. The third line contains m, the number of students who have subscribed to the Math Club. The fourth line contains m space-separated roll numbers of those students. =====Constraints===== 0 < Total number of students in school < 1000 =====Output Format===== Output the total number of students who have joined either the Science Club, the Math Club, or both.","solution":"def count_unique_students(n, science_students, m, math_students): Returns the count of unique students who have joined at least one club. Parameters: n (int): The number of students who joined the Science Club. science_students (list of int): The list of student roll numbers in the Science Club. m (int): The number of students who joined the Math Club. math_students (list of int): The list of student roll numbers in the Math Club. Returns: int: The total number of unique students. science_set = set(science_students) math_set = set(math_students) unique_students = science_set.union(math_set) return len(unique_students)"},{"question":"Write a function that takes a list of integers as input and returns the list with all prime numbers replaced by their squares. If no prime numbers are found in the list, the function should return the original list. # Example: ```python input: [4, 7, 10, 11] output: [4, 49, 10, 121] input: [1, 4, 6, 8] output: [1, 4, 6, 8] ``` # Constraints: - The input list will contain at least one integer. - The integers in the list will be non-negative. - Use of third-party libraries for prime checking is not allowed. - The function should be efficient enough to handle lists with up to 10,000 elements. # Function signature: ```python def square_primes(numbers: List[int]) -> List[int]: pass ```","solution":"from typing import List def is_prime(n: int) -> bool: Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def square_primes(numbers: List[int]) -> List[int]: Returns a list with prime numbers replaced by their squares. return [x**2 if is_prime(x) else x for x in numbers]"},{"question":"Consider a list of positive integers representing stock prices of a company for `n` consecutive days, where the index of the list represents the day. You are allowed to buy and sell a single stock only once. Your goal is to maximize the profit by choosing a single day to buy the stock and a different day in the future to sell the stock, such that the selling price is greater than the buying price. Write a function `max_profit(prices: List[int]) -> int` that takes this list of prices and returns the maximum possible profit. If no profit is possible (i.e., the stock price decreases or remains the same every day), return `0`. Examples ``` Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. Input: [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transactions are done and the maximum profit = 0. Input: [1, 2, 3, 4, 5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5 - 1 = 4. ```","solution":"from typing import List def max_profit(prices: List[int]) -> int: Returns the maximum profit from buying and selling a single stock. If no profit is possible, returns 0. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function `calcWaterTrap` that calculates how much water can be trapped between buildings after it rains. The function takes a list of non-negative integers where each integer represents the height of a building. The width of each building is 1. ``` calcWaterTrap(heights) e.g. calcWaterTrap([0,1,0,2,1,0,1,3,2,1,2,1]) - when height = [0,1,0,2,1,0,1,3,2,1,2,1] - water can be trapped in index 2 -> 1 unit, - index 5 -> 2 units, - index 6 -> 1 unit, - index 9 -> 1 unit, - total trapped = 6 units - therefore solution = 6 ``` Implement the function using a list of integers as input, and return an integer indicating the total units of water trapped.","solution":"def calcWaterTrap(heights): Calculate the total units of water trapped between buildings after it rains. Parameters: heights (list of int): A list of non-negative integers representing the height of buildings. Returns: int: Total units of water trapped. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill right_max array right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the water that can be trapped water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"=====Problem Statement===== You are given a matrix of dimension n x m. In the matrix, each cell is either empty (represented by \'.\') or contains an obstacle (represented by \'#\'). The goal is to determine the number of different ways you can move from the top-left corner of the matrix to the bottom-right corner, provided that you can only move down or right at any step and you cannot move through obstacle cells. Write a function `count_paths(matrix: List[List[str]]) -> int` that takes the matrix as input and returns the number of distinct paths from the top-left corner to the bottom-right corner. =====Input Format===== - The first line contains two integers, n and m, representing the number of rows and columns in the matrix respectively. - The next n lines each contain a string of length m consisting of \'.\' and \'#\' characters. =====Output Format===== - A single integer representing the number of distinct paths from the top-left to the bottom-right of the matrix. =====Constraints===== - 1 <= n, m <= 100 - The top-left and bottom-right cells are always empty (i.e., they are always \'.\'). =====Sample Input===== ``` 3 3 ... .#. ... ``` =====Sample Output===== ``` 2 ``` =====Explanation===== You can only move down or right and cannot move through cells marked with \'#\'. The two paths from the top-left to the bottom-right are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"from typing import List def count_paths(matrix: List[List[str]]) -> int: n = len(matrix) m = len(matrix[0]) if matrix[0][0] == \'#\' or matrix[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if matrix[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Given an array of integers that represents the heights of a series of adjacent buildings, provide an algorithm to determine the largest rectangular area possible in a histogram that these buildings define. Each building has a width of 1. For example, consider the following array of building heights: Input: [2, 1, 5, 6, 2, 3] Output: 10 Explanation: The largest rectangle has a width of 2 and a height of 5. Therefore, the area is 2 * 5 = 10. Example 2: Input: [2, 4] Output: 4 Explanation: The largest rectangle has a width of 1 and a height of 4. Therefore, the area is 1 * 4 = 4. Example 3: Input: [6, 2, 5, 4, 5, 1, 6] Output: 12 Explanation: The largest rectangle has a width of 3 and a height of 4. Therefore, the area is 3 * 4 = 12.","solution":"def largest_rectangle_area(heights): Calculates the largest rectangular area possible in a histogram. Each building has a width of 1. :param heights: List[int] - An array of integers representing the building heights. :return: int - The area of the largest rectangle in the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() if stack: area = heights[top_of_stack] * (index - stack[-1] - 1) else: area = heights[top_of_stack] * index max_area = max(max_area, area) while stack: top_of_stack = stack.pop() if stack: area = heights[top_of_stack] * (index - stack[-1] - 1) else: area = heights[top_of_stack] * index max_area = max(max_area, area) return max_area"},{"question":"You are given a matrix `grid` representing a field of `m x n` consisting of \'1\'s (land) and \'0\'s (water). Write a function to count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. Example: ``` Input: grid = [ [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] Output: 3 Explanation: There are three islands in the given grid: - The first island, comprising the top-left 1\'s. - The second island, comprising the 1\'s in the middle. - The third island, comprising the 1\'s at the bottom-right. ``` Function signature: `def numIslands(grid: List[List[str]]) -> int:`","solution":"from typing import List def numIslands(grid: List[List[str]]) -> int: if not grid: return 0 def dfs(grid, r, c): rows, cols = len(grid), len(grid[0]) if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == \'0\': return grid[r][c] = \'0\' dfs(grid, r + 1, c) dfs(grid, r - 1, c) dfs(grid, r, c + 1) dfs(grid, r, c - 1) count = 0 rows, cols = len(grid), len(grid[0]) for r in range(rows): for c in range(cols): if grid[r][c] == \'1\': count += 1 dfs(grid, r, c) return count"},{"question":"# Train Schedule Management You are in charge of creating a train schedule management system for a small train station. The station manages train arrivals and departures, ensuring no two trains are on the same track at the same time. Each train is characterized by a start time and end time. The schedule is represented as a list of tuples, where each tuple contains two integers `(start, end)`. For example, a schedule `[(1, 4), (2, 5), (6, 8)]` means: - Train 1 starts at 1 and ends at 4 - Train 2 starts at 2 and ends at 5 - Train 3 starts at 6 and ends at 8 The goal is to determine the minimum number of tracks required to accommodate all trains based on their schedules. Function Signature ```python def min_tracks(schedule: List[Tuple[int, int]]) -> int: pass ``` # Example ```python print(min_tracks([(1, 4), (2, 5), (6, 8)])) # Output: 2 print(min_tracks([(1, 4), (5, 6), (7, 8)])) # Output: 1 print(min_tracks([(1, 3), (3, 5), (4, 6), (7, 9)])) # Output: 2 print(min_tracks([(1, 4), (4, 7), (5, 9)])) # Output: 3 ``` # Explanation In the first example, two trains overlap between times 2 and 4 requiring two tracks, while the third train does not overlap and can use a different track. Hence, the minimum number of tracks required is 2. In the second example, no trains overlap, so only one track is needed. In the third example, the first and second trains do not overlap, but the overlap between the second and third trains requires two tracks, then the fourth train does not overlap. Hence, two tracks are sufficient. In the fourth example, all three trains overlap at some points, indicating that three tracks at the maximum are required. Write the `min_tracks` function to help manage the schedule efficiently.","solution":"from typing import List, Tuple def min_tracks(schedule: List[Tuple[int, int]]) -> int: Given a list of tuples representing train schedules with start and end times, this function returns the minimum number of tracks required to accommodate all trains. if not schedule: return 0 # Create two lists: one for all start times and one for all end times start_times = sorted([s[0] for s in schedule]) end_times = sorted([s[1] for s in schedule]) start_pointer = 0 end_pointer = 0 max_tracks = 0 current_tracks = 0 # Iterate through both lists to count overlaps while start_pointer < len(start_times): if start_times[start_pointer] < end_times[end_pointer]: current_tracks += 1 max_tracks = max(max_tracks, current_tracks) start_pointer += 1 else: current_tracks -= 1 end_pointer += 1 return max_tracks"},{"question":"```python # Question: Find the Min-Path in a Grid You are given a 2D grid of integers where each cell represents a weight. Your task is to find the minimum path sum from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time. Write a function `min_path_sum(grid: List[List[int]]) -> int` that takes the grid and returns the minimum path sum. __Function Signature:__ ```python def min_path_sum(grid: List[List[int]]) -> int: ``` __Input:__ - A 2D list of integers `grid` where `1 <= len(grid), len(grid[0]) <= 200` and each integer in the grid `0 <= grid[i][j] <= 1000`. __Output:__ - An integer representing the minimum path sum from the top-left to the bottom-right cell of the grid. __Example:__ ```python >>> grid = [ >>> [1, 3, 1], >>> [1, 5, 1], >>> [4, 2, 1] >>> ] >>> min_path_sum(grid) 7 # The path is 1 → 3 → 1 → 1 → 1, thus the result is 7 ``` __Notes:__ - Your solution should utilize dynamic programming to achieve an efficient runtime. - Make sure to consider edge cases such as single row or column grids. # Constraints: - `1 <= len(grid) <= 200` - `1 <= len(grid[0]) <= 200` - `0 <= grid[i][j] <= 1000` __Hint:__ - You could use a 2D list to store the minimum path sum at each cell and update it iteratively. # Example Execution: ```python assert min_path_sum([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) == 21 assert min_path_sum([ [5, 3, 2], [1, 2, 1], [4, 1, 1] ]) == 9 ``` ```","solution":"from typing import List def min_path_sum(grid: List[List[int]]) -> int: rows = len(grid) cols = len(grid[0]) # Initialize the DP table with the same dimensions as the grid dp = [[0] * cols for _ in range(rows)] # Base case: the top-left corner dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for col in range(1, cols): dp[0][col] = dp[0][col - 1] + grid[0][col] # Fill the first column (can only come from above) for row in range(1, rows): dp[row][0] = dp[row - 1][0] + grid[row][0] # Fill the rest of the DP table for row in range(1, rows): for col in range(1, cols): dp[row][col] = min(dp[row - 1][col], dp[row][col - 1]) + grid[row][col] # The bottom right corner will contain the minimum path sum return dp[rows - 1][cols - 1]"},{"question":"Write a function that takes a string containing only lowercase alphabets and parentheses and returns the string after removing the outermost parentheses of every primitive string. A primitive string is a non-empty string that can be written as `A` + `B`, where `A` and `B` are valid primitive strings, and neither of them contains extra outer parentheses. Examples ``` \\"(()())(())\\" ==> \\"()()()\\" \\"(()())(())(()(()))\\" ==> \\"()()()()(())\\" \\"()()\\" ==> \\"\\" ```","solution":"def remove_outer_parentheses(S): Removes the outermost parentheses of every primitive string. :param S: A string containing only lowercase alphabets and parentheses :return: A string with the outermost parentheses removed from every primitive string result = [] opened = 0 for char in S: if char == \'(\': if opened > 0: result.append(char) opened += 1 elif char == \')\': if opened > 1: result.append(char) opened -= 1 return \'\'.join(result)"},{"question":"You are given a binary tree with N nodes. Each node has a value (an integer). Your task is to determine the maximum sum of node values in any path from the root to a leaf. A leaf is defined as a node with no children. -----Input----- - The first line contains an integer N denoting the number of nodes in the binary tree. - The second line contains N space-separated integers val_1, val_2, ldots, val_N where val_i represents the value of the i-th node. - The next N-1 lines describe the edges of the tree. Each edge is represented by two integers u and v, denoting that there is an edge between node u and node v. ------Output------ - Output a single integer, the maximum sum of values from the root to any leaf node. -----Constraints----- - 1 le N le 10^5 - 1 le val_i le 10^3 for each valid i - 1 le u, v le N -----Example Input----- 5 10 5 20 21 6 1 2 1 3 2 4 2 5 -----Example Output----- 36","solution":"def find_max_path_sum(N, values, edges): from collections import defaultdict, deque # Create an adjacency list to represent the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Use a DFS approach to get the maximum path sum def dfs(node, parent): max_sum = -float(\'inf\') is_leaf = True for neighbor in tree[node]: if neighbor != parent: is_leaf = False max_sum = max(max_sum, dfs(neighbor, node)) if is_leaf: return values[node - 1] else: return values[node - 1] + max_sum return dfs(1, -1) # Assuming the root is always node 1"},{"question":"You are a data encryption expert working on a security system. As part of this system, messages need to be coded in a specific manner. Your task is to reverse the individual words in a given sentence while maintaining the original order of those words. For instance, if the sentence is \\"hello world\\", it should become \\"olleh dlrow\\". ---Input--- The first line contains an integer, T, the number of test cases. Each of the next T lines contains a string, representing the sentence to be encrypted. ---Output--- For each test case, output the encrypted sentence with each word reversed but the overall order of words preserved. ---Constraints--- 1 ≤ T ≤ 10 1 ≤ length of each sentence ≤ 1000 The sentences consist of lowercase English letters and spaces only. ---Example--- Input: 2 hello world encryption is important Output: olleh dlrow noitpyrcne si tnatropmi","solution":"def reverse_words_in_sentence(sentence): Reverses each word in a sentence while maintaining the original order of the words. words = sentence.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words) def process_test_cases(T, test_cases): Processes multiple test cases and returns the output for each. results = [] for i in range(T): encrypted_sentence = reverse_words_in_sentence(test_cases[i]) results.append(encrypted_sentence) return results"},{"question":"You are working as a developer at a software company, and your team is building a new feature for a hotel management system. Part of this feature involves calculating the total cost for a customer\'s stay based on different room types and the number of days they stay. The company offers three types of rooms: - Standard: Costs 100 per day. - Deluxe: Costs 150 per day. - Suite: Costs 300 per day. There are also different discounts that the customers can avail, based on the number of days they stay: - If a customer stays for 3 or more days, they get a 10% discount on the total cost. - If a customer stays for 7 or more days, they get a 15% discount on the total cost. The discounts are mutually exclusive and the higher applicable discount should be used. Write a function `calculate_total_cost` that takes the type of room and the number of days of stay as input and returns the total cost after applying the appropriate discount. Function signature: ```python def calculate_total_cost(room_type: str, days: int) -> float: ``` # Input - `room_type` (str): The type of room the customer is staying in. It can be one of \\"Standard\\", \\"Deluxe\\", or \\"Suite\\". - `days` (int): The number of days the customer will be staying. # Output - (float): The total cost of the stay for the customer after applying any applicable discount. The result should be rounded to 2 decimal places. # Example ```python print(calculate_total_cost(\\"Standard\\", 5)) # 450.00 print(calculate_total_cost(\\"Deluxe\\", 3)) # 405.00 print(calculate_total_cost(\\"Suite\\", 8)) # 2040.00 print(calculate_total_cost(\\"Suite\\", 2)) # 600.00 ``` # Constraints - The input room_type is always a valid string. - Days is a positive integer. - The result should be rounded to the nearest two decimal places.","solution":"def calculate_total_cost(room_type: str, days: int) -> float: Returns the total cost for a customer\'s stay based on room type and number of days, after applying the appropriate discount. # Define room rate based on room type rates = { \\"Standard\\": 100, \\"Deluxe\\": 150, \\"Suite\\": 300 } # Calculate base cost base_cost = rates[room_type] * days # Determine discount if days >= 7: discount_rate = 0.15 elif days >= 3: discount_rate = 0.10 else: discount_rate = 0.0 # Calculate total cost after discount total_cost = base_cost * (1 - discount_rate) # Return the result rounded to 2 decimal places return round(total_cost, 2)"},{"question":"Given a non-empty string `s` consisting of only lowercase letters, you need to remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results. Task: Write a function `remove_duplicate_letters(s)` that removes duplicate letters from the input string `s` and returns the resulting string in the smallest lexicographical order possible. Example: ``` remove_duplicate_letters(\\"bcabc\\") should return \\"abc\\" remove_duplicate_letters(\\"cbacdcbc\\") should return \\"acdb\\" ``` Constraints: 1. `1 <= len(s) <= 10^4`","solution":"def remove_duplicate_letters(s): Removes duplicate letters from the input string s and returns the resulting string in the smallest lexicographical order possible. stack = [] seen = set() last_occurrence = {char: idx for idx, char in enumerate(s)} for idx, char in enumerate(s): if char not in seen: # Ensure characters in stack are in lexicographical order while stack and char < stack[-1] and idx < last_occurrence[stack[-1]]: seen.discard(stack.pop()) stack.append(char) seen.add(char) return \'\'.join(stack)"},{"question":"# Task A gym has various workout stations arranged in a sequence. The stations can be of different types, such as cardio, strength training, and flexibility exercises. However, due to space constraints, not all members can use the stations in the given sequence. A member plans their workout session by going through the workout stations in sequence. However, the member will stop the session at the first station that is of type \\"rest\\". Given the sequence of the stations, determine the list of workout stations visited by the member before encountering the first \\"rest\\" station. # Example For `stations = [\\"cardio\\", \\"strength\\", \\"flexibility\\", \\"rest\\", \\"cardio\\", \\"strength\\"]`, the output should be `[\\"cardio\\", \\"strength\\", \\"flexibility\\"]`. The answer was obtained by stopping the session before the first \\"rest\\" station. # Input/Output - `[input]` array of strings `stations` Constraints: `2 ≤ stations.length ≤ 30, stations[i] ∈ [\\"cardio\\", \\"strength\\", \\"flexibility\\", \\"rest\\"].` - `[output]` an array of strings","solution":"def workout_sequence(stations): Returns the list of workout stations visited by the member before encountering the first \\"rest\\" station. result = [] for station in stations: if station == \\"rest\\": break result.append(station) return result"},{"question":"# Task You have recently joined a supermarket as a cashier. Your job involves handling customer transactions. The supermarket has a special offer where customers can get a discount based on the number of unique items they purchase. The discount scheme is as follows: - If a customer buys 3 different unique items, they get a 5% discount on the total bill. - If a customer buys 5 different unique items, they get a 10% discount on the total bill. - If a customer buys 7 or more different unique items, they get a 15% discount on the total bill. Write a function to calculate the amount payable by the customer after applying the applicable discount. # Input/Output `[input]` integer array `prices` An array of integers representing the prices of the items purchased by the customer. `1 ≤ prices.length ≤ 100` `1 ≤ prices[i] ≤ 1000` `[output]` a float The total amount the customer has to pay after applying the discount. # Example For `prices = [100, 200, 300, 400, 500]`, the output should be `1350.0`. The customer has purchased 5 different unique items, so they get a 10% discount. The total bill before discount is `100 + 200 + 300 + 400 + 500 = 1500`. After applying the discount, the amount payable will be `1500 - (1500 * 0.10) = 1350`. For `prices = [50, 50, 100]`, the output should be `180.0`. Although the customer has purchased three items, only two unique items are there: 50 and 100. Therefore, no discount is applicable. The total bill remains `50 + 50 + 100 = 200`. For `prices = [100, 200, 300, 100, 200, 300, 400, 500]`, the output should be `1870.0`. The customer has 5 unique items: 100, 200, 300, 400, 500. The total bill before discount is `100 + 200 + 300 + 100 + 200 + 300 + 400 + 500 = 2100`. After applying the discount, the amount payable will be `2100 - (2100 * 0.10) = 1890`.","solution":"def calculate_payable_amount(prices): Returns the total amount payable after applying discounts based on the number of unique items. # Calculate the total bill total_bill = sum(prices) # Get the number of unique items unique_items_count = len(set(prices)) # Determine the discount percentage if unique_items_count >= 7: discount = 0.15 elif unique_items_count >= 5: discount = 0.10 elif unique_items_count >= 3: discount = 0.05 else: discount = 0.0 # Calculate the amount payable after applying the discount amount_payable = total_bill * (1 - discount) return round(amount_payable, 2)"},{"question":"A company is implementing a feature for monitoring file system usage for its users. The feature allows users to create and delete folders, move files between folders, and query the total size of files within a specific folder. You are responsible for designing an algorithm to manage and respond to these operations efficiently. The file system starts with a root folder `/`. The operations that users can perform are: - **Create Folder**: Create a new folder inside an existing folder. - **Delete Folder**: Delete an existing folder and all its contents. - **Move File**: Move a file from one folder to another folder. - **Query Size**: Retrieve the total size of all files contained in a specific folder, including files in all its subfolders. # Input: - The first line contains an integer N indicating the number of operations. - Each of the following N lines describes an operation in one of the following formats: ``` CREATE <parent_folder_path> <folder_name> DELETE <folder_path> MOVE <source_folder_path> <target_folder_path> <file_size> QUERY <folder_path> ``` # Output: - For each `QUERY` operation, print the total size of files in the specified folder. # Constraints: - 1 leq N leq 10^4 - Valid folder and file names are composed of alphanumeric characters and do not contain spaces. - Folder paths are given in Unix-like format (e.g., `/folder1/folder2`). - File sizes are positive integers. - Deleting a folder also removes all files and subfolders within that folder. - Assume the total size of files within any folder does not exceed 10^9. # Sample Input: ``` 7 CREATE / folder1 CREATE / folder2 CREATE /folder1 folder3 MOVE /folder1 /folder1/folder3 100 MOVE / /folder1 200 QUERY / QUERY /folder1 ``` # Sample Output: ``` 300 300 ``` # Explanation: 1. The structure after the first 3 CREATE operations is: ``` / ├── folder1 │ └── folder3 └── folder2 ``` 2. The first MOVE operation adds a file of size 100 to `/folder1/folder3`. 3. The second MOVE operation adds a file of size 200 to `/folder1`. 4. The first QUERY operation returns the total file size in the root folder `/`, which is 300 (200 in `/folder1` and 100 in `/folder1/folder3`). 5. The second QUERY operation returns the total file size in `/folder1` which is 300 (200 in `/folder1` and 100 in `/folder1/folder3`).","solution":"class FileSystem: def __init__(self): self.folders = {\'/\': {\'size\': 0, \'subfolders\': {}}} def create_folder(self, parent_path, folder_name): path = parent_path + \'/\' + folder_name if parent_path != \'/\' else \'/\' + folder_name if parent_path in self.folders: self.folders[path] = {\'size\': 0, \'subfolders\': {}} self.folders[parent_path][\'subfolders\'][folder_name] = path def delete_folder(self, folder_path): if folder_path in self.folders: parent_path = \'/\'.join(folder_path.split(\'/\')[:-1]) folder_name = folder_path.split(\'/\')[-1] if parent_path == \'\': parent_path = \'/\' if folder_name in self.folders[parent_path][\'subfolders\']: del self.folders[parent_path][\'subfolders\'][folder_name] del self.folders[folder_path] def move_file(self, source_path, target_path, file_size): if source_path in self.folders and target_path in self.folders: self.folders[target_path][\'size\'] += file_size def query_size(self, folder_path): def get_total_size(path): total_size = self.folders[path][\'size\'] for sub_path in self.folders[path][\'subfolders\'].values(): total_size += get_total_size(sub_path) return total_size return get_total_size(folder_path) # Reading input and simulating operations def process_operations(n, operations): fs = FileSystem() result = [] for operation in operations: parts = operation.split() cmd = parts[0] if cmd == \'CREATE\': parent_path = parts[1] folder_name = parts[2] fs.create_folder(parent_path, folder_name) elif cmd == \'DELETE\': folder_path = parts[1] fs.delete_folder(folder_path) elif cmd == \'MOVE\': source_path = parts[1] target_path = parts[2] file_size = int(parts[3]) fs.move_file(source_path, target_path, file_size) elif cmd == \'QUERY\': folder_path = parts[1] result.append(fs.query_size(folder_path)) return result def file_system_monitor(n, operations): return process_operations(n, operations)"},{"question":"Given a sorted array of unique integers and a target integer, write a function that returns the indices of the first two numbers that add up to the target. If no such numbers exist, return `null`. For example: ``` array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] target = 10 ``` The pairs of numbers that add up to 10 are: ``` 1 + 9, 2 + 8, 3 + 7, 4 + 6 ``` The function should return the indices of the first valid pair found: ``` [0, 8] // as 1 + 9 = 10 ``` If the input array is `[1, 2, 3, 4]` and the target is `8`, there is no such pair and the function should return `null`. The function signature should be: ```python def two_sum_indices(array: List[int], target: int) -> Optional[List[int]]: ``` Assume the input parameters are always valid integers and the input array will be non-empty.","solution":"from typing import List, Optional def two_sum_indices(array: List[int], target: int) -> Optional[List[int]]: Returns the indices of the first two numbers that add up to the target. If no such numbers exist, returns null. left, right = 0, len(array) - 1 while left < right: current_sum = array[left] + array[right] if current_sum == target: return [left, right] elif current_sum < target: left += 1 else: right -= 1 return None"},{"question":"You are given a string s and an integer k. The string s consists of lowercase English letters only. Your task is to determine the length of the longest substring of s that contains at most k distinct characters. If the length of s is less than k, output the length of the entire string s. The function should return this length for each test case. -----Input----- The first line contains a single integer t (1 le t le 100) denoting the number of test cases. The next lines contain descriptions of the test cases. The first line of each test case contains a single integer k (1 le k le 26). The second line of each test case contains the string s (1 le |s| le 100000). It is guaranteed that the total length of all strings in a single test file does not exceed 10^6 characters. -----Output----- For each test case, output a single integer which is the length of the longest substring of s that contains at most k distinct characters. -----Example----- Input 3 2 abcba 3 abcabcabc 1 abc Output 3 9 1 -----Note----- For the first test case, the longest substring with at most 2 distinct characters is \\"bcb\\" which has a length of 3. For the second test case, the entire string \\"abcabcabc\\" can be considered as it has exactly 3 distinct characters, hence the output is the length of the string, which is 9. For the third test case, the longest substring with at most 1 distinct character is either \\"a\\", \\"b\\", or \\"c\\", each with a length of 1.","solution":"def length_of_longest_substring_k_distinct(s: str, k: int) -> int: from collections import defaultdict n = len(s) if n == 0 or k == 0: return 0 left = 0 right = 0 max_length = 0 char_count = defaultdict(int) while right < n: char_count[s[right]] += 1 right += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left) return max_length def process_test_cases(t: int, test_cases: list) -> list: results = [] for k, s in test_cases: results.append(length_of_longest_substring_k_distinct(s, k)) return results"},{"question":"Given a matrix representing an image, where each element is either a 0 (representing a white pixel) or a 1 (representing a black pixel), determine if there are any squares in the matrix that consist entirely of black pixels. *Parameters*: `matrix` array. *Example input*: ``` matrix = [ [0, 1, 1, 0, 1], [1, 1, 1, 1, 0], [1, 1, 1, 1, 0], [0, 1, 1, 1, 1], [1, 0, 0, 1, 1] ] ``` *Output*: `true` if there is at least one square of any size that is entirely black (1s), and `false` otherwise. # Constraints: - The matrix will have dimensions `m x n` where `1 <= m, n <= 100`. - Each element in the matrix will be either a 0 or a 1. # Notes: * A square is defined as a sub-matrix with equal width and height. * The smallest possible square is 1x1. * Must check all possible squares in the matrix. ___ Examples: ``` matrix: [ [0, 0, 1], [1, 1, 1], [0, 1, 1] ] // return true - The 2x2 square at the bottom-right corner is entirely black (1s). matrix: [ [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1] ] // return false - There are no squares larger than 1x1 that consist entirely of black pixels. ``` Explore different squares of the matrix to determine if any are entirely black pixels (1s).","solution":"def has_black_square(matrix): Determine if there are any squares in the matrix that consist entirely of black pixels (1s). Parameters: - matrix: 2D list of integers (0 or 1) Returns: - bool: True if there is at least one square of any size that is entirely black (1s), False otherwise. if not matrix: return False rows = len(matrix) cols = len(matrix[0]) # To keep track of the largest size of square ending at each cell dp = [[0] * cols for _ in range(rows)] # Result of whether we found at least one black square found_black_square = False for i in range(rows): for j in range(cols): if matrix[i][j] == 1: if i == 0 or j == 0: # Squares of size 1 (single cell) dp[i][j] = 1 else: # Expanding to largest square possible at matrix[i][j] dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if dp[i][j] > 1: found_black_square = True return found_black_square"},{"question":"A company needs to develop a delivery route planner for their goods distribution system. The city is modeled as an N x M grid where some cells are inaccessible due to obstacles. A delivery truck starts at a given position (X, Y) and its goal is to reach a target position (P, Q) on the grid. The truck can move up, down, left, or right, but cannot pass through cells marked as obstacles. Your task is to help determine the minimum number of moves required for the truck to reach the target position from the starting position, or determine that it is impossible to reach the target. -----Input----- The input will consist of multiple test cases: - The first line contains t, the number of test cases (1 ≤ t ≤ 100). - For each test case: - The first line contains two integers N and M (1 ≤ N, M ≤ 100), the dimensions of the grid. - The following N lines each contain M characters representing the grid: - \'.\' denotes an accessible cell. - \'#\' denotes an obstacle. - The next line contains two integers X and Y (0 ≤ X < N, 0 ≤ Y < M) representing the starting position. - The last line contains two integers P and Q (0 ≤ P < N, 0 ≤ Q < M) representing the target position. -----Output----- For each test case, print a single integer: - The minimum number of moves required to reach the target position from the starting position, or -1 if it is not possible to reach the target. -----Example----- Input: 2 5 5 ..... ..#.. ..#.. ..... ..... 2 2 4 4 5 5 ..... ..#.. ..#.. ..... ..... 0 0 4 4 Output: 4 8 -----Output details----- For the first test case, the truck moves (2,2) → (1,2) → (0,2) → (0,3) → (0,4) → (1,4) → (2,4) → (3,4) → (4,4) in 8 moves. For the second test case, the truck moves (0,0) → (1,0) → (2,0) → (3,0) → (4,0) → (4,1) → (4,2) → (4,3) → (4,4) in 8 moves.","solution":"from collections import deque def min_moves(t, test_cases): results = [] for idx in range(t): N, M = test_cases[idx][\'dimensions\'] grid = test_cases[idx][\'grid\'] startX, startY = test_cases[idx][\'start\'] targetX, targetY = test_cases[idx][\'target\'] # Breadth-First Search (BFS) for shortest path moves = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(startX, startY, 0)]) visited = set([(startX, startY)]) while queue: x, y, dist = queue.popleft() if (x, y) == (targetX, targetY): results.append(dist) break for dx, dy in moves: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) else: # If loop completes without breaking, target is unreachable results.append(-1) return results # Example usage: # t = 2 # test_cases = [ # { # \'dimensions\': (5, 5), # \'grid\': [ # \\".....\\", # \\"..#..\\", # \\"..#..\\", # \\".....\\", # \\".....\\", # ], # \'start\': (2, 2), # \'target\': (4, 4) # }, # { # \'dimensions\': (5, 5), # \'grid\': [ # \\".....\\", # \\"..#..\\", # \\"..#..\\", # \\".....\\", # \\".....\\", # ], # \'start\': (0, 0), # \'target\': (4, 4) # } # ] # print(min_moves(t, test_cases)) # Output: [4, 8]"},{"question":"Given an integer array representing heights of buildings in a row, you are required to calculate the amount of rainwater that can be trapped after raining. Each building\'s width is 1 unit. For each unit of width, the amount of water that can be trapped is determined by the height of the left and right tallest buildings enclosing that unit. The amount of water is the minimum of the heights of these two buildings minus the height of the building at that unit, only if this is positive (otherwise, no water can be trapped). Your task is to write a function that computes the total volume of trapped rainwater. Example 1 Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The bar graph below represents the input. The water trapped at each index is shown in blue: ``` # # # # # # # # # 01234567890 ``` Total trapped water = 1 + 1 + 2 + 1 + 1 = 6. Example 2 Input: [4,2,0,3,2,5] Output: 9 Explanation: The bar graph below represents the input. The water trapped at each index is shown in blue: ``` # # # # # # # # 012345 ``` Total trapped water = 1 + 1 + 3 + 1 + 3 = 9. Example 3 Input: [2,0,2] Output: 2 Explanation: The bar graph below represents the input. The water trapped at each index is shown in blue: ``` # # # 012 ``` Total trapped water = 2. Note: - The range of the array length is [1, 10000]. - The input array values are all non-negative integers in the range [0, 10000].","solution":"def trap(height): Calculate the total volume of trapped rainwater given the heights of the buildings. :param height: List[int] - a list of integers representing heights of buildings. :return: int - total volume of trapped rainwater. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) total_water = 0 for i in range(n): total_water += max(0, min(left_max[i], right_max[i]) - height[i]) return total_water"},{"question":"You are given a list of non-negative integers where each element represents the height of a vertical line drawn on a graph. The width between each pair of adjacent lines is 1. Find two lines, which together with the x-axis forms a container, such that the container contains the most water. Return the maximum amount of water a container can store. ``` Example 1: Input: [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The lines are at index 1 (height=8) and index 8 (height=7). The container forms between these two, so the width is 8-1 = 7. Hence, the water contained = min(8,7) * 7 = 49. Example 2: Input: [1,1] Output: 1 Explanation: The lines are at index 0 and index 1 (both heights = 1). Hence, the water contained = min(1,1) * 1 = 1. ``` Note: - The array length must be at least 2. - The elements are non-negative integers. **Function signature:** ```python def maxArea(height: List[int]) -> int: # your code here ```","solution":"from typing import List def maxArea(height: List[int]) -> int: Returns the maximum amount of water a container can store. left, right = 0, len(height) - 1 max_water = 0 while left < right: # Calculate the width between the two lines width = right - left # Calculate the height of the container container_height = min(height[left], height[right]) # Calculate the current water contained current_water = width * container_height # Update the maximum water contained max_water = max(max_water, current_water) # Move the pointers to try and find a larger container if height[left] < height[right]: left += 1 else: right -= 1 return max_water"},{"question":"A company has asked you to evaluate the seating arrangement in their canteen. The seating in the canteen consists of a series of tables with varying lengths such that some tables accommodate more people while others accommodate fewer. They want you to determine the maximum number of people that can enjoy their meal simultaneously given some rules about group seating. The rules are: 1. Groups must sit together. 2. A group cannot split across two tables. 3. Each table can accommodate only one group, but multiple groups of different sizes may exist. 4. You cannot rearrange the tables or the lengths of the tables. Given the lengths of the tables and the sizes of the groups, determine the maximum number of groups that can be seated simultaneously. -----Input:----- - The first line contains two space-separated integers, T (number of test cases) and G (number of groups in each test case). - The next line contains T space-separated integers which are the lengths of each table. - The following G lines each contain one integer, representing the size of each group. -----Output:----- For each test case, print a single line containing the maximum number of groups that can be seated simultaneously. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ G ≤ 100 - 1 ≤ Length of each table ≤ 100 - 1 ≤ Size of each group ≤ 100 -----Sample Input:----- 3 4 4 5 6 3 4 2 5 4 3 7 2 5 4 6 3 2 -----Sample Output:----- 3 3 -----Explanation:----- - For the first test case, the groups of sizes 3, 4, and 5 can be seated on tables of lengths 4, 5, and 6 respectively. - For the second test case, the groups of sizes 6, 3, and 2 can be seated on tables of lengths 7, 4, and 5 respectively.","solution":"def max_groups_seated(T, G, tables, groups): # Sort tables and groups to efficiently match them tables.sort() groups.sort() # Initialize pointer for tables table_index = 0 group_index = 0 seated_groups = 0 # Try to seat each group at a suitable table while group_index < G and table_index < T: if groups[group_index] <= tables[table_index]: # Seat this group at this table seated_groups += 1 group_index += 1 table_index += 1 else: # Move to the next table table_index += 1 return seated_groups"},{"question":"You are given a grid of size r times c consisting of only \'0\'s and \'1\'s. A binary grid is called \\"uniform\\" when all of its elements are the same. You can choose one cell of the grid and flip its value (change a \'0\' to \'1\' or a \'1\' to \'0\'). In one operation, you can choose any rectangle subgrid of the original grid and flip all its values. Determine the minimum number of operations required to make the grid uniform. -----Input----- The first line contains two integers r and c (1 le r, c le 100) – the number of rows and columns of the grid. Then r lines follow, each containing c characters (\'0\' or \'1\'). -----Output----- Print a single integer – the minimum number of operations required to make the binary grid uniform. -----Example----- Input 3 3 101 010 101 Output 2 Input 2 4 1111 1111 Output 0 -----Note----- In the first example, we can operate as follows: 1. Flip the middle row: 101 010 -> 101 101 2. Flip the leftmost column: 000 001 -> 111 In the second example, the grid is already uniform.","solution":"def min_operations_to_uniform_grid(r, c, grid): Determine the minimum number of operations required to make the binary grid uniform. Args: r (int): Number of rows in the grid c (int): Number of columns in the grid grid (list of list of str): The binary grid Returns: int: Minimum number of operations # Count the number of \'0\'s and \'1\'s in the grid count_0 = sum(row.count(\'0\') for row in grid) count_1 = r * c - count_0 # If one of the counts is 0, the grid is already uniform if count_0 == 0 or count_1 == 0: return 0 # We can make the grid uniform by flipping either all \'0\'s to \'1\'s or all \'1\'s to \'0\'s min_flips = min(count_0, count_1) return min_flips"},{"question":"You are given a list of stock prices for a company in chronological order. You want to find out the maximum profit you could have made by buying a stock once and then selling that stock later. Write a function that takes a list of integers representing the stock prices on different days and returns the maximum profit one could achieve from a single buy-sell transaction. If no profit is possible, return 0. # Example: `prices = [7, 1, 5, 3, 6, 4]` The maximum profit that can be achieved is `5`: - Buy on day `2` (price = 1) - Sell on day `5` (price = 6) - Profit = `6 - 1 = 5` # Example: `prices = [7, 6, 4, 3, 1]` In this case, no profit is possible, so the maximum profit is `0`. # Notes - You cannot sell a stock before you buy one. - The list of prices will contain at least one price.","solution":"def maxProfit(prices): Returns the maximum profit that can be made by buying and selling a stock once. If no profit can be made, returns 0. if not prices or len(prices) == 1: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Given an array of integers `arr` and an integer `k`, find the maximum sum of a subarray of size `k`. A subarray is defined as a contiguous section of an array. Your task is to find the highest sum that can be obtained by adding up `k` consecutive elements in the array. Example 1: Input: arr = [2, 1, 5, 1, 3, 2], k = 3 Output: 9 Explanation: The subarray with the maximum sum is [5, 1, 3], which adds up to 9. Example 2: Input: arr = [2, 3, 4, 1, 5], k = 2 Output: 7 Explanation: The subarray with the maximum sum is [3, 4], which adds up to 7. Example 3: Input: arr = [1, 4, 2, 10, 23, 3, 1, 0, 20], k = 4 Output: 39 Explanation: The subarray with the maximum sum is [4, 2, 10, 23], which adds up to 39. Constraints: - 1 <= k <= arr.length <= 10^5 - -10^4 <= arr[i] <= 10^4","solution":"def max_sum_subarray_k(arr, k): Returns the maximum sum of a subarray of size k. if not arr or k <= 0 or k > len(arr): return 0 # calculating the initial window max_sum = current_sum = sum(arr[:k]) # sliding the window across the array for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Calculate the mode of a list of integers. If there are multiple values that appear with the same highest frequency, return the smallest of these values. Write a function that takes in a list of integers and returns the mode value. **Function Signature** ```python def find_mode(numbers: List[int]) -> int: pass ``` **Example** ```python find_mode([2, 2, 3, 3, 4]) # Output: 2 find_mode([5, 1, 1, 5, 3, 3]) # Output: 1 ``` **Note** - The input list will have at least one number. - If no number repeats, any one of the numbers can be the mode, but the function should output the smallest number.","solution":"from typing import List from collections import Counter def find_mode(numbers: List[int]) -> int: Returns the mode of the list of numbers. If there\'s a tie, returns the smallest number among them. count = Counter(numbers) max_frequency = max(count.values()) # Get all numbers with the maximum frequency mode_candidates = [number for number, freq in count.items() if freq == max_frequency] return min(mode_candidates)"},{"question":"# **[Tea Party](/collections/tea-party)** Alice is hosting a tea party, and she wants to serve tea in a very specific order. She has a sequence of tea cups, where each cup has a label representing a specific type of tea. Each type of tea is represented by a number, and they appear in non-decreasing order. Alice wants to serve the tea in such a way that they maintain a specific alternating sequence of high and low values, starting with the highest. For example, given the sequence `3 3 4 4 4 5 6 7`, Alice would serve in the order `7 3 6 3 5 4 4 4`. Your task is to help Alice determine the correct order of serving the tea. # **Task** Complete the function that takes a sequence of tea cups (as a sorted list) and returns the sequence in the specific alternating high-low order. - **Input** - A list of integers in non-decreasing order, representing the types of tea. - **Output** - A list of integers, arranged in the alternating high-low order as defined. # **Examples** ``` serving_order([3, 3, 4, 4, 4, 5, 6, 7]) => [7, 3, 6, 3, 5, 4, 4, 4] serving_order([1, 2, 3, 3, 3, 4]) => [4, 1, 3, 2, 3, 3] serving_order([5, 5, 6, 6, 7, 8]) => [8, 5, 7, 5, 6, 6] ``` # **Notes** - If there is an odd number of tea cups, the last cup should be the lowest value remaining.","solution":"def serving_order(teas): Returns the tea cups served in a specific alternating high-low order. result = [] left = 0 right = len(teas) - 1 while left <= right: if right >= left: result.append(teas[right]) right -= 1 if right >= left: result.append(teas[left]) left += 1 return result"},{"question":"In this coding assessment, you will implement a function that generates a modified Collatz sequence, which we\'ll call the \\"Double Collatz Sequence\\". The standard Collatz sequence is defined for a given positive integer n as follows: 1. If n is 1, the sequence ends. 2. If n is even, the next number is ( n / 2 ). 3. If n is odd, the next number is ( 3n + 1 ). The Double Collatz Sequence follows a similar rule set with an additional transformation step involving doubling: 1. If n is 1, the sequence ends. 2. If n is even, the next number is ( n / 2 ). 3. If n is odd, the next number is ( 3n + 1 ), and then double that result. Your task is to write a function `double_collatz_sequence` that takes an integer ( n ) and returns the Double Collatz Sequence starting from ( n ) as a list. # Example The Double Collatz Sequence for ( n = 6 ) is: - 6 is even, so the next number is ( 6 / 2 = 3 ). - 3 is odd, so the next number is ( 3 * 3 + 1 = 10 ), and then doubled to ( 20 ). - 20 is even, so the next number is ( 20 / 2 = 10 ). - 10 is even, so the next number is ( 10 / 2 = 5 ). - 5 is odd, so the next number is ( 5 * 3 + 1 = 16 ), and then doubled to ( 32 ). - 32 is even, so the next number is ( 32 / 2 = 16 ). - 16 is even, so the next number is ( 16 / 2 = 8 ). - 8 is even, so the next number is ( 8 / 2 = 4 ). - 4 is even, so the next number is ( 4 / 2 = 2 ). - 2 is even, so the next number is ( 2 / 2 = 1 ). Therefore, the Double Collatz Sequence for ( n = 6 ) is ([6, 3, 20, 10, 5, 32, 16, 8, 4, 2, 1]). # Constraints * ( n ) will be a positive integer. * You should handle sequences that may get quite long. ```python def double_collatz_sequence(n: int) -> list: result = [] while n != 1: result.append(n) if n % 2 == 0: n //= 2 else: n = (3 * n + 1) * 2 result.append(1) return result ``` You need to implement the `double_collatz_sequence` function that adheres to the above description and example.","solution":"def double_collatz_sequence(n: int) -> list: Generates the Double Collatz Sequence for a given positive integer n. Parameters: n (int): The starting integer for the sequence. Returns: list: A list containing the Double Collatz Sequence. result = [] while n != 1: result.append(n) if n % 2 == 0: n //= 2 else: n = (3 * n + 1) * 2 result.append(1) return result"},{"question":"A prime number is a natural number greater than one with no positive divisors other than one and itself. Given an integer `n`, write a function to return the nth prime number. Notes: - The function should return -1 if n is less than 1 since there is no zeroth or negative prime number. - The function must efficiently handle large values of n, considering both time and space complexity. Function Signature: `def nth_prime(n: int) -> int:`","solution":"def nth_prime(n: int) -> int: Returns the nth prime number. Note: Returns -1 if n is less than 1 since there is no zeroth or negative prime number. if n < 1: return -1 primes = [] candidate = 2 while len(primes) < n: is_prime = True for p in primes: if p * p > candidate: break if candidate % p == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 1 return primes[-1]"},{"question":"Task An art gallery has recently acquired several rectangular paintings. They decided to arrange the paintings on a wall, making sure that none of them overlap. Each painting has a unique position. You are given a list of coordinates and dimensions for each painting. Your task is to determine if the paintings are placed non-overlapping and within a specified wall boundary. Write a function `validate_paintings(wall_width, wall_height, paintings)` where: - `wall_width` and `wall_height` are integers representing the width and height of the wall, respectively. - `paintings` is a list of tuples, where each tuple contains four integers `(x, y, width, height)` representing the top-left corner `(x, y)` of a painting and its dimensions `width` and `height`. Your function should return `True` if all paintings are non-overlapping and fit within the wall boundaries, and `False` otherwise. # Example Given `wall_width = 10`, `wall_height = 10`, and `paintings = [(1, 1, 3, 3), (5, 5, 2, 2), (1, 5, 4, 4)]`, the output should be `True`. Given `wall_width = 10`, `wall_height = 10`, and `paintings = [(1, 1, 3, 3), (2, 2, 3, 3), (1, 5, 4, 4)]`, the output should be `False` because the first two paintings overlap. # Input/Output - `[input]` integer `wall_width` - `[input]` integer `wall_height` - `[input]` list of tuples `paintings` - `[output]` a boolean value `True` or `False`.","solution":"def validate_paintings(wall_width, wall_height, paintings): Validates if the paintings can be placed on the wall without overlapping and within the wall boundaries. n = len(paintings) for i in range(n): x1, y1, w1, h1 = paintings[i] # Check if the current painting fits within the wall boundaries if x1 < 0 or y1 < 0 or x1 + w1 > wall_width or y1 + h1 > wall_height: return False for j in range(i + 1, n): x2, y2, w2, h2 = paintings[j] # Check for overlap with any other painting if not (x1 + w1 <= x2 or x2 + w2 <= x1 or y1 + h1 <= y2 or y2 + h2 <= y1): return False return True"},{"question":"=====Function Descriptions===== identity The identity tool returns an identity array with a given shape. An identity array is a square matrix with all the main diagonal elements as 1 and the rest as 0. import numpy print numpy.identity(3) # 3 is for the dimension #Output : [[1. 0. 0.] # [0. 1. 0.] # [0. 0. 1.]] eye The eye tool returns a 2-D array with 1\'s as the diagonal and 0\'s elsewhere. This tool gives more flexibility on which diagonal to place the 1\'s. import numpy print numpy.eye(3, k=1) # 3 is for the number of rows, k is the index of the diagonal #Output : [[0. 1. 0.] # [0. 0. 1.] # [0. 0. 0.]] print numpy.eye(3, k=-1) #Output : [[0. 0. 0.] # [1. 0. 0.] # [0. 1. 0.]] =====Problem Statement===== You are given a single integer N, your task is to print an identity array of size NxN using the numpy.identity tool and then print a 2-D array of size NxN with 1\'s on the first lower diagonal and 0\'s elsewhere using the numpy.eye tool. =====Input Format===== A single line containing the integer N. =====Constraints===== 1≤N≤5 =====Output Format===== First, print the array using the numpy.identity tool and then print the array with 1\'s on the first lower diagonal using the numpy.eye tool.","solution":"import numpy as np def print_identity_and_eye(N): Given an integer N, print an NxN identity matrix and a NxN matrix with 1\'s on the first lower diagonal and 0\'s elsewhere. # Identity matrix of size NxN identity_matrix = np.identity(N) print(identity_matrix) # 2-D array with 1\'s on the first lower diagonal eye_matrix = np.eye(N, k=-1) print(eye_matrix)"},{"question":"Chris is playing a strategy card game where each card has a power value assigned to it. His goal is to select a subset of cards such that their total power is as close as possible to a given target value `P`, without exceeding it. Chris wants to know the maximum sum of power values he can achieve from the cards that is less than or equal to `P`. -----Input:----- - The first line contains an integer T, number of test cases. Then the test cases follow. - Each test case consists of two lines. - The first line contains two integers N and P. - The second line contains N integers c[i], representing the power values of the cards. -----Output:----- For each test case, output a single line containing the maximum sum of power values that is less than or equal to `P`. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 - 1 leq P leq 1000 - 1 leq c[i] leq 100 -----Sample Input:----- 2 5 50 10 20 30 40 50 4 60 15 25 35 45 -----Sample Output:----- 50 60","solution":"def max_power_value(T, test_cases): results = [] for i in range(T): N, P = test_cases[i][0] cards = test_cases[i][1] dp = [0] * (P + 1) for card in cards: for j in range(P, card - 1, -1): dp[j] = max(dp[j], dp[j - card] + card) results.append(dp[P]) return results # Example usage: # T = 2 # test_cases = [ # ((5, 50), [10, 20, 30, 40, 50]), # ((4, 60), [15, 25, 35, 45]) # ] # print(max_power_value(T, test_cases)) # Output: [50, 60]"},{"question":"Write a function that accepts a string containing only characters `A`, `T`, `C`, and `G`. The task is to determine if the string is a valid DNA sequence. A valid DNA sequence is one where the following conditions are met: 1. The total number of `A` characters is equal to the total number of `T` characters. 2. The total number of `C` characters is equal to the total number of `G` characters. Return `\\"valid\\"` if the string satisfies these conditions, and `\\"invalid\\"` otherwise. You can assume the input string will always contain at least one character, and only the characters `A`, `T`, `C`, and `G`.","solution":"def is_valid_dna(sequence): Determines if the given DNA sequence is valid. A valid DNA sequence has equal number of \'A\' and \'T\' characters as well as equal number of \'C\' and \'G\' characters. Parameters: sequence (str): The DNA sequence to check. Returns: str: \\"valid\\" if the DNA sequence is valid, otherwise \\"invalid\\". a_count = sequence.count(\'A\') t_count = sequence.count(\'T\') c_count = sequence.count(\'C\') g_count = sequence.count(\'G\') if a_count == t_count and c_count == g_count: return \\"valid\\" else: return \\"invalid\\""},{"question":"-----Problem Statement----- You are given an array of size N which can contain both positive and negative integers. Write a program to find the length of the longest subarray which has a sum equal to K. -----Input----- The input is given in the following format: N K A_1 A_2 . . . A_N -----Output----- Output the length of the longest subarray which has a sum equal to K. If no such subarray exists, return 0. -----Constraints----- - 1 leq N leq 10^5 - -10^4 leq A_i leq 10^4 - -10^9 leq K leq 10^9 - All values in input are integers. -----Sample Input----- 5 5 1 -1 5 -2 3 -----Sample Output----- 4 -----EXPLANATION----- The longest subarray with sum equal to 5 is (1, -1, 5, -2) which has a length of 4. Another subarray that sums to 5 is (5) but its length is 1, so the longest subarray has a length of 4.","solution":"def longest_subarray_with_sum_k(arr, N, K): Returns the length of the longest subarray with sum equal to K. sum_map = {} # to store the cumulative sum and its index current_sum = 0 max_length = 0 for i in range(N): current_sum += arr[i] # Check if all of the subarray has sum exactly K if current_sum == K: max_length = i + 1 # Check if there is a subarray which adds up to K, by checking current_sum - K if (current_sum - K) in sum_map: max_length = max(max_length, i - sum_map[current_sum - K]) # Only add current_sum to map if it is not already present if current_sum not in sum_map: sum_map[current_sum] = i return max_length"},{"question":"# Aerial Surveillance Coverage You are tasked with developing a drone surveillance system to monitor a square area of size NxN. Given: - The area is divided into N*N cells. - Each cell is numbered from 1 to N*N starting from the top-left corner and ending at the bottom-right corner. - A drone can cover a KxK area (a drone placed at cell (i, j) covers cells from (i, j) to (i+K-1, j+K-1)). - You are given the coordinates where each drone is placed. Your task is to write a function that calculates the number of cells that are covered by at least one drone. **Input:** - An integer N, representing the size of the area. - An integer K, representing the size of the area that each drone can cover. - A list of tuples, representing the positions of the drones. **Output:** - An integer representing the number of cells covered by at least one drone. **Example:** ```python def count_covered_cells(N: int, K: int, drone_positions: list) -> int: # your code here # Example N = 5 K = 2 drone_positions = [(1, 1), (4, 4)] print(count_covered_cells(N, K, drone_positions)) # Output: 9 ``` **Explanation:** For a 5x5 grid: - The drone placed at (1,1) covers cells: (1,1), (1,2), (2,1), (2,2) - The drone placed at (4,4) covers cells: (4,4), (4,5), (5,4), (5,5) The total number of cells covered at least once is 9 out of 25 cells. Hence, the output is 9.","solution":"def count_covered_cells(N: int, K: int, drone_positions: list) -> int: covered_cells = set() for r, c in drone_positions: for i in range(K): for j in range(K): if 1 <= r + i <= N and 1 <= c + j <= N: covered_cells.add((r + i, c + j)) return len(covered_cells)"},{"question":"Johnny is a game developer and he is currently working on a game in which the player navigates through a grid filled with obstacles and power-ups. The grid is represented by a matrix of size n times m, where each cell can either be: - \'.\' (an empty cell) - \'O\' (an obstacle) - \'P\' (a power-up) The player starts at the top-left corner of the grid (cell (1,1)) and can move to the left, right, up, or down. However, the player cannot move into cells containing an obstacle. The game is won if the player can collect all power-ups and reach the top-right corner of the grid (cell (1,m)). Design an algorithm to determine if it is possible for the player to win the game. If it is possible, return \\"YES\\"; otherwise, return \\"NO\\". -----Input----- The first line contains two integers n and m (1 leq n, m leq 300) — the dimensions of the grid. The next n lines contain m characters each, representing the grid. Each character is one of \'.\', \'O\', or \'P\'. -----Output----- Output one word: \\"YES\\" if it is possible to win the game, otherwise \\"NO\\". -----Examples----- Input 3 3 P.. .O. ..P Output YES Input 3 3 P.O .O. ..P Output NO -----Note----- In the first example, the player can collect the power-up at (1,1), move right, down, right, and collect the power-up at (3,3) to reach the top-right corner. In the second example, there\'s an obstacle blocking the path, so it is not possible to collect all power-ups and reach the top-right corner.","solution":"def can_win_game(grid, n, m): def is_valid(x, y, visited): if 0 <= x < n and 0 <= y < m and grid[x][y] != \'O\' and not visited[x][y]: return True return False def dfs(x, y, visited, power_ups_collected): if not is_valid(x, y, visited): return False if grid[x][y] == \'P\': power_ups_collected -= 1 if power_ups_collected == 0 and (x == 0 and y == m - 1): return True visited[x][y] = True # Move up, down, left, right if (dfs(x - 1, y, visited, power_ups_collected) or dfs(x + 1, y, visited, power_ups_collected) or dfs(x, y - 1, visited, power_ups_collected) or dfs(x, y + 1, visited, power_ups_collected)): return True visited[x][y] = False return False power_ups = sum(row.count(\'P\') for row in grid) visited = [[False for _ in range(m)] for _ in range(n)] return \\"YES\\" if dfs(0, 0, visited, power_ups) else \\"NO\\""},{"question":"Given an input list of integers, write a function `longest_consecutive_sequence(nums)` that returns the length of the longest consecutive elements sequence in the given list. A consecutive sequence is defined as a sequence with incrementing integers without any gaps between them. Note that the sequence does not have to be in order in the input list. ```python longest_consecutive_sequence([100, 4, 200, 1, 3, 2]) == 4 # The longest consecutive sequence is [1, 2, 3, 4] longest_consecutive_sequence([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]) == 9 # The longest consecutive sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8] longest_consecutive_sequence([9, 1, 3, 5, 7]) == 1 # The longest consecutive sequence is [9], [1], [3], [5], or [7] ```","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence in the given list. num_set = set(nums) longest_length = 0 for num in nums: if num - 1 not in num_set: current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 longest_length = max(longest_length, current_length) return longest_length"},{"question":"You are tasked with designing an efficient sorting algorithm for an array of strings, but there\'s a twist – the algorithm should sort the strings based on their \\"weight\\". The weight of a string is defined as the sum of the ASCII values of its characters. For example, the weight of the string \\"abc\\" is calculated as follows: - \'a\' has an ASCII value of 97 - \'b\' has an ASCII value of 98 - \'c\' has an ASCII value of 99 So, the weight of \\"abc\\" is 97 + 98 + 99 = 294. # Your Task: Write a function that takes an array of strings and returns the array sorted by the weights of the strings in non-decreasing order. If two strings have the same weight, they should be returned in the order they appeared in the input array. -----Function Signature----- ```python def sort_by_weight(strings: List[str]) -> List[str]: ``` -----Input----- - An array of strings where each string consists of lowercase English letters. - The number of strings in the array will be no greater than 1000. - Each string will have a length of at least 1 and no more than 100 characters. -----Output----- - An array of strings sorted by their weights in non-decreasing order. # Example ```python sort_by_weight([\\"abc\\", \\"a\\", \\"b\\", \\"aa\\"]) # should return [\\"a\\", \\"b\\", \\"aa\\", \\"abc\\"] ``` # Explanation - \\"a\\" has weight 97 - \\"b\\" has weight 98 - \\"aa\\" has weight 97 + 97 = 194 - \\"abc\\" has weight 97 + 98 + 99 = 294 Hence the sorted order by weight is [\\"a\\", \\"b\\", \\"aa\\", \\"abc\\"].","solution":"from typing import List def sort_by_weight(strings: List[str]) -> List[str]: Sort an array of strings based on the sum of the ASCII values of their characters. If two strings have the same weight, they are returned in the order they appeared in the input array. # Calculate the weight of each string and sort the strings based on these weights return sorted(strings, key=lambda s: sum(ord(char) for char in s))"},{"question":"A group of friends is planning a trip and they want to share costs equally. They decide to track all the expenses paid by each friend and then calculate the minimum number of transactions needed to settle the debts. Each friend can either owe money or be owed money. A transaction is defined as a payment made by one friend to another to reduce their debt or credit. Your task is to find the minimum number of transactions needed so that all debts are settled. -----Input----- - The first line contains an integer `n` (2 ≤ n ≤ 20) representing the number of friends. - The second line contains an integer `m` (1 ≤ m ≤ 100), representing the number of transactions made. - Each of the next `m` lines contains three integers `u`, `v`, and `amount` (1 ≤ amount ≤ 1000), where friend `u` paid `amount` for friend `v`. Friends are labeled with integers starting from 1 to `n`. -----Output----- Output a single integer, the minimum number of transactions needed to settle all the debts. -----Examples----- Input 3 3 1 2 10 2 3 5 1 3 5 Output 2 Input 4 4 1 2 10 2 3 5 3 4 5 4 1 10 Output 1 -----Note----- In the first example, the transactions can be settled in two moves: 1. Friend 1 gives 5 to friend 2 (Friend 1 owed 10 to Friend 2, Friend 1 has additionally owed 5 to Friend 3, thus 5 is balanced) 2. Friend 2 gives 5 to friend 3. In the second example, the transaction can be settled in one move: 1. Friend 1 directly pays 10 to friend 4.","solution":"def min_transactions(n, m, transactions): balances = [0] * n for u, v, amount in transactions: balances[u-1] -= amount balances[v-1] += amount debts = [balance for balance in balances if balance != 0] def settle(debts, start): while start < len(debts) and debts[start] == 0: start += 1 if start == len(debts): return 0 min_trans = float(\'inf\') for i in range(start + 1, len(debts)): if debts[start] * debts[i] < 0: debts[i] += debts[start] min_trans = min(min_trans, 1 + settle(debts, start + 1)) debts[i] -= debts[start] return min_trans return settle(debts, 0)"},{"question":"Treasure Hunt You\'re on a treasure hunt, and you have a map represented by an MxN grid where each cell contains either a \'.\', representing traversable land, or \'X\', representing an obstacle. Your goal is to determine if there\'s a path from the top-left corner (0, 0) to the bottom-right corner (M-1, N-1) using only traversable cells. You can only move up, down, left, or right (not diagonally). Task Write a function `isPathExist(grid)` that takes a 2D list of characters (`grid`) representing the map and returns a boolean value indicating whether a path exists from the top-left to the bottom-right. ``` function isPathExist(grid) { return true || false; } ``` Examples ``` isPathExist([[\'.\', \'X\', \'.\'], [\'.\', \'.\', \'X\'], [\'X\', \'.\', \'.\']]) --> true Explanation: One possible path is (0, 0) -> (1, 0) -> (1, 1) -> (2, 1) -> (2, 2) ``` ``` isPathExist([[\'.\', \'X\', \'X\'], [\'X\', \'.\', \'X\'], [\'X\', \'X\', \'.\']]) --> false Explanation: There is no possible path from (0, 0) to (2, 2) ``` ``` isPathExist([[\'.\', \'.\', \'.\'], [\'.\', \'X\', \'.\'], [\'.\', \'X\', \'.\']]) --> true Explanation: One possible path is (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) ``` Note: - If the starting cell (0, 0) or the ending cell (M-1, N-1) contains \'X\', a path cannot exist. - The grid dimensions are given such that `M` and `N` are positive integers.","solution":"def isPathExist(grid): if not grid or grid[0][0] == \'X\' or grid[-1][-1] == \'X\': return False rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up visited = [[False] * cols for _ in range(rows)] def dfs(x, y): if x == rows - 1 and y == cols - 1: return True visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and not visited[nx][ny] and grid[nx][ny] == \'.\': if dfs(nx, ny): return True return False return dfs(0, 0)"},{"question":"Create a function called balanceString that takes a string of lowercase characters and returns `True` if, for every letter in the string, that letter appears the same number of times both in the first half and the second half of the string. If the string has an odd length, return `False`. The first half of the string should consider floor division: `n//2`. If the input is not a string, return \'Invalid input\'. **EXAMPLES:** ``` \\"abbaabba\\" -> True (each letter appears twice in both halves) \\"aaaaabbbb\\" -> False (first half has 4 \'a\'s, second half has 4 \'b\'s) \\"abcabc\\" -> True (each letter appears once in both halves) \\"abcde\\" -> False (string length is odd) [\\"hello\\"] -> \'Invalid input\' 12345 -> \'Invalid input\' ```","solution":"def balanceString(s): Returns True if each character in the string appears the same number of times in both halves of the string. Returns False if the string has an odd length or if every letter does not occur equally in both halves. If the input is not a string, returns \'Invalid input\'. if not isinstance(s, str): return \'Invalid input\' # If the length of the string is odd if len(s) % 2 != 0: return False # Determine the midpoint of the string mid = len(s) // 2 # Split the string into two halves first_half = s[:mid] second_half = s[mid:] # Calculate character counts for both halves first_half_counts = {char: first_half.count(char) for char in set(first_half)} second_half_counts = {char: second_half.count(char) for char in set(second_half)} # Compare character counts return first_half_counts == second_half_counts"},{"question":"A `digital root` of a non-negative integer is defined as the single-digit value obtained by an iterative process of summing digits, on each iteration using the result from the previous iteration until a single-digit number is produced. For example, the digital root of 65536 is 7, because 6 + 5 + 5 + 3 + 6 = 25 -> 2 + 5 = 7. You need to write a function that takes a positive integer N and returns its digital root. The function should work efficiently even for very large values of N. Examples: - digital_root(16) => 7 (1 + 6 = 7) - digital_root(942) => 6 (9 + 4 + 2 = 15 -> 1 + 5 = 6) - digital_root(132189) => 6 (1 + 3 + 2 + 1 + 8 + 9 = 24 -> 2 + 4 = 6) - digital_root(493193) => 2 (4 + 9 + 3 + 1 + 9 + 3 = 29 -> 2 + 9 = 11 -> 1 + 1 = 2)","solution":"def digital_root(n): Given a positive integer n, returns its digital root. if n == 0: return 0 return 1 + (n - 1) % 9"},{"question":"A toy factory produces different types of toy cars that are stored in a single row on a conveyor belt. Each toy car is identified by its type, which is represented by a positive integer. Your task is to help the factory manager determine if it is possible to rearrange the toy cars on the conveyor belt such that there are no two adjacent toy cars of the same type. -----Input----- - The first line of input contains a single integer T indicating the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N denoting the number of toy cars. - The second line contains N space-separated integers representing the type of each toy car on the conveyor belt. -----Output----- For each test case, print \\"YES\\" if it is possible to rearrange the toy cars such that no two adjacent toy cars are of the same type. Otherwise, print \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 105 - 1 ≤ type ≤ 109 for each toy car -----Subtasks----- Subtask #1 (30 points): - 1 ≤ N ≤ 100 Subtask #2 (70 points): original constraints -----Example----- Input: 3 3 1 2 3 4 1 1 1 3 5 2 1 2 1 2 Output: YES NO YES -----Explanation----- Example case 1: It is already arranged such that no two adjacent toy cars are of the same type. Hence, the answer is \\"YES\\". Example case 2: There are three toys of type 1 which makes it impossible to arrange them without at least two of them being adjacent. Hence, the answer is \\"NO\\". Example case 3: It is possible to rearrange the toy cars to [2 1 2 1 2], so the answer is \\"YES\\".","solution":"def can_rearrange_toy_cars(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] toy_types = test_cases[i][1] toy_count = {} for toy in toy_types: if toy in toy_count: toy_count[toy] += 1 else: toy_count[toy] = 1 max_count = max(toy_count.values()) if max_count > (N + 1) // 2: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"Write a function that performs a simple mathematical calculation based on an input string. The input string will contain a basic arithmetic expression consisting of two integers and an operator (+, -, *, or /) separated by spaces. Your function should evaluate the expression and return the result as a string. Here are some example inputs and expected outputs: - \\"3 + 4\\" -> \\"7\\" - \\"10 - 2\\" -> \\"8\\" - \\"6 * 9\\" -> \\"54\\" - \\"8 / 4\\" -> \\"2\\" If division by zero is attempted, return \\"undefined\\". If the input string is invalid, return \\"invalid input\\". Note: - The integers can be positive or negative. - The input string will always have the format \\"integer operator integer\\".","solution":"def calculate_expression(expr: str) -> str: Evaluates a basic arithmetic expression consisting of two integers and an operator (+, -, *, or /) separated by spaces, and returns the result as a string. try: parts = expr.split() if len(parts) != 3: return \\"invalid input\\" num1, operator, num2 = parts num1, num2 = int(num1), int(num2) if operator == \'+\': result = num1 + num2 elif operator == \'-\': result = num1 - num2 elif operator == \'*\': result = num1 * num2 elif operator == \'/\': if num2 == 0: return \\"undefined\\" result = num1 // num2 # Use integer division for consistent result type return str(result) except (ValueError, TypeError): return \\"invalid input\\""},{"question":"Path Sum in Binary Tree Given a binary tree, find all paths from the root to any leaf such that the sum of the values along the path equals a given number. Return a list of lists containing the paths. Each node has an integer value. You should implement a class with the following methods: - `__init__(self, root)`: Initializes the tree with the given root node. - `find_paths(self, target_sum)`: Returns a list of lists where each list represents a path that sums to the target_sum. A tree node has the following structure: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` **Example:** Given the following binary tree and target sum of 22, ``` 5 / 4 8 / / 11 13 4 / / 7 2 5 1 ``` ```python root = TreeNode(5) root.left = TreeNode(4) root.right = TreeNode(8) root.left.left = TreeNode(11) root.left.left.left = TreeNode(7) root.left.left.right = TreeNode(2) root.right.left = TreeNode(13) root.right.right = TreeNode(4) root.right.right.left = TreeNode(5) root.right.right.right = TreeNode(1) tree = BinaryTree(root) paths = tree.find_paths(22) ``` Output: ```python [[5, 4, 11, 2], [5, 8, 4, 5]] ``` Explanation: There are two paths in the tree that sum up to 22: - 5 -> 4 -> 11 -> 2 - 5 -> 8 -> 4 -> 5 # Notes: - It\'s guaranteed that the given target sum can be achieved by at least one path in the tree. - Your solution should handle cases where the tree has a large number of nodes efficiently. Hint: - You can utilize Depth-First Search (DFS) to traverse the tree and keep track of the current path and its sum.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class BinaryTree: def __init__(self, root): self.root = root def find_paths(self, target_sum): def dfs(node, current_path, remaining_sum): if not node: return current_path.append(node.val) remaining_sum -= node.val if not node.left and not node.right and remaining_sum == 0: result.append(list(current_path)) else: dfs(node.left, current_path, remaining_sum) dfs(node.right, current_path, remaining_sum) current_path.pop() result = [] dfs(self.root, [], target_sum) return result"},{"question":"You are given a grid of size NxM consisting of \'.\' and \'X\' characters where \'.\' represents a free cell and \'X\' represents an obstacle. You need to find the number of unique paths from the top-left corner of the grid to the bottom-right corner. You can only move either right or down from a cell. Each path must avoid obstacles and can move only through free cells. You need to return the total number of such unique paths mod 10^9 + 7. -----Constraints----- - 1 leq N, M leq 1000 - The grid will contain only \'.\' and \'X\' characters. - The top-left and bottom-right corners will always be free cells (i.e., they will contain \'.\'). -----Input----- Input is given from Standard Input in the following format: N M grid_1 grid_2 ... grid_N Each of the next N lines contains exactly M characters representing the grid. -----Output----- Print the number of unique paths from the top-left to the bottom-right corner mod 10^9 + 7. -----Sample Input----- 3 3 ... .X. ... -----Sample Output----- 2 In this example, there are two unique paths from the top-left to the bottom-right: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"MOD = 10**9 + 7 def unique_paths(grid): Returns the number of unique paths from the top-left to the bottom-right corner of a grid, avoiding obstacles (\'X\') and moving only right or down. The result is taken modulo 10^9 + 7. N = len(grid) M = len(grid[0]) # Initialize DP table dp = [[0] * M for _ in range(N)] # Starting position dp[0][0] = 1 # Fill the DP table for i in range(N): for j in range(M): if grid[i][j] == \'X\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[-1][-1] # Example usage: # Grid as input for function example_grid = [ \\"...\\", \\".X.\\", \\"...\\" ] print(unique_paths(example_grid)) # Output: 2"},{"question":"You are given a list of strings. Implement a function to determine the longest common prefix among all the strings. If there is no common prefix, return an empty string \\"\\". For example: ``` longestCommonPrefix([\\"flower\\", \\"flow\\", \\"flight\\"]); ``` should return ``` \\"fl\\" ``` And ``` longestCommonPrefix([\\"dog\\", \\"racecar\\", \\"car\\"]); ``` should return ``` \\"\\" ```","solution":"def longestCommonPrefix(strs): if not strs: return \\"\\" # Find the string with the minimum length min_length = min(len(s) for s in strs) low, high = 1, min_length def isCommonPrefix(length): prefix = strs[0][:length] return all(s.startswith(prefix) for s in strs) while low <= high: mid = (low + high) // 2 if isCommonPrefix(mid): low = mid + 1 else: high = mid - 1 return strs[0][:(low + high) // 2]"},{"question":"Given a list of positive integers, partition the list into exactly two sublists (non-empty) such that the absolute difference between the sums of the integers in the two sublists is minimized. You must consider all possible ways to partition the list into two non-empty sublists. Input: The input consists of two lines. The first line contains a single integer N (2 ≤ N ≤ 20), the number of integers in the list. The second line contains N positive integers Ai (1 ≤ Ai ≤ 1000) separated by spaces. Output: Output a single integer representing the minimum absolute difference between the sums of the integers in the two sublists. Example: Input: 4 1 2 3 9 Output: 3 Explanation: The list can be partitioned as: - {1, 2, 3} and {9}, with sums 6 and 9, difference is |6 - 9| = 3. - {1, 2} and {3, 9}, with sums 3 and 12, difference is |3 - 12| = 9. - {1, 3} and {2, 9}, with sums 4 and 11, difference is |4 - 11| = 7. - {1, 9} and {2, 3}, with sums 10 and 5, difference is |10 - 5| = 5. - {2, 3, 9} and {1}, with sums 14 and 1, difference is |14 - 1| = 13. - {2, 9} and {1, 3}, with sums 11 and 4, difference is |11 - 4| = 7. - {3, 9} and {1, 2}, with sums 12 and 3, difference is |12 - 3| = 9. The minimum absolute difference is 3, obtained by partitioning the list into {1, 2, 3} and {9}.","solution":"from itertools import combinations def min_partition_difference(N, A): Given a list of positive integers, partition the list into exactly two sublists (non-empty) such that the absolute difference between the sums of the integers in the two sublists is minimized. N: int - The number of integers in the list. A: List[int] - The list of positive integers. Returns: int - The minimum absolute difference between the sums of the two sublists. total_sum = sum(A) min_diff = float(\\"inf\\") for i in range(1, N): for comb in combinations(A, i): sum1 = sum(comb) sum2 = total_sum - sum1 min_diff = min(min_diff, abs(sum1 - sum2)) return min_diff"},{"question":"Tina loves decode simple encoded messages. Each encoded message consists of a string of lowercase English letters and digits. Tina\'s task is to decode this string. The decoding rule is: k[encoded_string], where the encoded_string inside the square brackets is repeated exactly k times. Note that k is guaranteed to be a positive integer. The input string is always valid; no extra white spaces, square brackets are well-formed, etc. Your task is to help Tina implement the decoding algorithm. -----Input----- A single line containing the encoded message string. The input string length will not exceed 30. -----Output----- Output the decoded string. -----Examples----- Input 3[a]2[bc] Output aaabcbc Input 3[a2[c]] Output accaccacc Input 2[abc]3[cd]ef Output abcabccdcdcdef Note: In the first example, the encoded message \\"3[a]2[bc]\\" is decoded into \\"aaabcbc\\". In the second example, the encoded message \\"3[a2[c]]\\" is decoded into \\"accaccacc\\".","solution":"def decode_string(s): Decode the given encoded message string using the rule k[encoded_string]. stack = [] current_num = 0 current_str = \\"\\" for char in s: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \'[\': stack.append((current_num, current_str)) current_num = 0 current_str = \\"\\" elif char == \']\': num, prev_str = stack.pop() current_str = prev_str + num * current_str else: current_str += char return current_str"},{"question":"In the realm of computer science, the process of inferring types of expressions in a programming language is known as type inference. The primary goal of this task is to build a function that can infer types from a given mathematical expression. In this problem, you will be given a string representing a mathematical equation. The equation will consist of numbers, variables, and basic arithmetic operators (`+`, `-`, `*`, `/`, and `^` for exponentiation). Your task is to determine the type of the result. Assume all variables represent real numbers (i.e., floating-point numbers) and the result should also be a real number. Example: For the mathematical equation \\"3 + 5\\", the result is 8, which is an integer. For the mathematical equation \\"x * y\\", given `x` is a real number and `y` is a real number, the result is a real number. Create a function `infer_type(equation: str) -> str` that takes a string equation and returns a type of the result as a string (`\\"int\\"` for integer results and `\\"real\\"` for real number results). Rules: - If the equation results in an integer without any decimal part, the type should be `\\"int\\"`. - If the equation results in a real number with any decimal part, the type should be `\\"real\\"`. - Treat all variables as real numbers and any non-integer operation should result in a `\\"real\\"` type. Examples: ```python infer_type(\\"3 + 5\\") -> \\"int\\" infer_type(\\"4 / 2\\") -> \\"int\\" infer_type(\\"4 / 3\\") -> \\"real\\" infer_type(\\"x * y\\") -> \\"real\\" infer_type(\\"a^b\\") -> \\"real\\" # Note that exponentiation typically results in a float even with integer base and exponent ```","solution":"def infer_type(equation: str) -> str: Infers the type of the result of a given mathematical equation. Assumes all variables represent real numbers. Args: equation (str): The mathematical equation as a string. Returns: str: \\"int\\" if the result is an integer, \\"real\\" otherwise. def is_integer(number): return int(number) == number try: # Replace exponentiation symbol for eval function compatibility equation = equation.replace(\'^\', \'**\') # Evaluate the equation result = eval(equation) # Check if the result is an integer if is_integer(result): return \\"int\\" else: return \\"real\\" except: # Any exception due to variables or type errors default to real return \\"real\\""},{"question":"# Task **_Given_** a **_list of strings_**, *return a **_new list_** where each string has its characters **_sorted in alphabetical order_**.* ___ # Notes: * All strings contain only lowercase alphabets (a-z). * The initial list can have an arbitrary number of strings. * The order of strings in the output list should match their order in the input list. ___ # Input >> Output Examples ``` sortStrings([\\"car\\", \\"bike\\", \\"apple\\"]) ==> return ([\\"acr\\", \\"beik\\", \\"aelpp\\"]) ``` Explanation: **_([\\"acr\\", \\"beik\\", \\"aelpp\\"])_** *is the list where each string from* **_[\\"car\\", \\"bike\\", \\"apple\\"]_** *has its characters sorted in alphabetical order.* ___ ``` sortStrings([\\"mouse\\", \\"banana\\", \\"cat\\"]) ==> return ([\\"emosu\\", \\"aaabnn\\", \\"act\\"]) ``` Explanation: **_([\\"emosu\\", \\"aaabnn\\", \\"act\\"])_** *is the list where each string from* **_[\\"mouse\\", \\"banana\\", \\"cat\\"]_** *has its characters sorted in alphabetical order.* ___ ``` sortStrings([\\"hello\\", \\"world\\"]) ==> return ([\\"ehllo\\", \\"dlorw\\"]) ``` Explanation: **_([\\"ehllo\\", \\"dlorw\\"])_** *is the list where each string from* **_[\\"hello\\", \\"world\\"]_** *has its characters sorted in alphabetical order.* ___ ALL translations are welcomed Enjoy Learning !!","solution":"def sortStrings(strings): Returns a new list where each string has its characters sorted in alphabetical order. :param strings: List of strings :return: List of strings with characters sorted return [\'\'.join(sorted(s)) for s in strings]"},{"question":"# Task Your task is to implement a function that checks if a given string `s` represents a valid number. The string may contain digits, a decimal point, or an exponent part. It may also have leading or trailing whitespace, and it may start with a leading \'+\' or \'-\' sign. A valid number can be represented in the following ways: - An optional sign followed by a sequence of digits (`\\"123\\"`, `\\"-456\\"`, `\\"+789\\"`). - A sequence of digits with an optional decimal point (`\\"0.123\\"`, `\\"-3.14\\"`, `\\"+0.5\\"`). - A sequence of digits followed by an exponent part (`\\"1e10\\"`, `\\"-3e-2\\"`, `\\"+4.5e+1\\"`). - A sequence of digits with both a decimal point and an exponent part (`\\"0.1e2\\"`, `\\"-3.14e-2\\"`, `\\"+6.022e23\\"`). Invalid representations include: - Multiple signs or without digits (`\\"--1\\"`, `\\"123+\\"`, `\\"-.\\"`). - Delimiters in the wrong place or multiple decimal points (`\\"e10\\"`, `\\"1.2.3\\"`, `\\"3-2\\"`, `\\".\\"`). - Trailing characters that are not part of the valid formats (`\\"12e+\\"`, `\\"7e\\"`). Write a function `is_valid_number(s: str) -> bool` to determine if the string `s` is a valid number. # Examples - For `s = \\"123\\"`, the output should be `True`. - For `s = \\"-.5\\"`, the output should be `False`. - For `s = \\" +6.022e23 \\"`, the output should be `True`. - For `s = \\"6.022e+ 23\\"`, the output should be `False`. # Input/Output - `[input]` string `s` A non-empty string that may contain digits, signs, decimal points, exponent parts, and whitespace. Constraints: `1 ≤ s.length ≤ 100`. - `[output]` a boolean Return `True` if `s` is a valid number and `False` otherwise.","solution":"def is_valid_number(s: str) -> bool: Checks if a given string s is a valid number according to the specified criteria. A valid number includes: - An optional sign followed by digits. - Digits with optional decimal point. - Digits with optional exponent part. - Combination of digits with decimal point and exponent part. Invalid representations include: - Multiple signs, misplaced delimiters. - Trailing characters that aren\'t formatted correctly. :param s: Input string to be checked. :return: Boolean value indicating validity of the number. import re s = s.strip() # Remove leading and trailing spaces pattern = re.compile( r\'^[+-]?((d+(.d*)?)|(.d+))([eE][+-]?d+)?\' ) return bool(pattern.match(s))"},{"question":"*** Longest Ordered Subsequence *** Given an array of integers, find the length of the longest subsequence such that all elements of the subsequence are sorted in strictly increasing order. A subsequence is derived from the original sequence by deleting some or no elements without changing the order of the remaining elements. For example, for the array `[10, 22, 9, 33, 21, 50, 41, 60, 80]`, the length of the longest ordered subsequence is `6` (the sequence is `[10, 22, 33, 50, 60, 80]`). You must implement a function `longest_ordered_subsequence(arr)` that returns this length. **Function Signature:** ```python def longest_ordered_subsequence(arr: list) -> int: ``` **Input:** - An array `arr` of integers where (0 ≤ len(arr) ≤ 10^3) and integers have values within the range (-10^6) to (10^6). **Output:** - An integer representing the length of the longest subsequence that is sorted in strictly increasing order. **Example:** ```python > longest_ordered_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]) 6 > longest_ordered_subsequence([3, 10, 2, 1, 20]) 3 # The subsequence is [3, 10, 20] > longest_ordered_subsequence([3, 2]) 1 # The subsequence is [3] or [2] > longest_ordered_subsequence([50, 3, 10, 7, 40, 80]) 4 # The subsequence is [3, 7, 40, 80] ```","solution":"def longest_ordered_subsequence(arr: list) -> int: Returns the length of the longest ordered (increasing) subsequence from a given list. if not arr: return 0 n = len(arr) lis = [1] * n # Initialize the LIS array with 1 for all elements for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"Your task is to write a function that, given a string, groups all the identical consecutive characters together. For example, given the input \'aaabbccccd\', the output should be \'3a2b4c1d\'. The function should also handle cases where the string is empty, returning an empty string. Input * A single string containing lowercase alphabetical characters. Output * A single string representing the grouped consecutive characters and their counts. Examples # Example 1 * Input: `\'aaabbccccd\'` * Output: `\'3a2b4c1d\'` # Example 2 * Input: `\'\'` * Output: `\'\'` # Example 3 * Input: `\'a\'` * Output: `\'1a\'` Constraints * The length of the input string will not exceed 10^5 characters. * The input string will only contain lowercase alphabetical characters.","solution":"def group_consecutive_chars(s): if not s: return \\"\\" grouped = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: grouped.append(f\\"{count}{s[i - 1]}\\") count = 1 grouped.append(f\\"{count}{s[-1]}\\") return \'\'.join(grouped)"},{"question":"A company requires a program that simulates customer transactions by recording the expenditure of each customer during a month. Each customer transaction records the customer’s name, the item purchased, and the amount spent for that item. Given the transaction data for a number of customers, the program should calculate and output the total amount spent by each customer. -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case begins with an integer M, the number of transactions for the test case. - The next M lines of each test case contain 3 values: C (customer name), I (item name), and A (amount spent on the item). -----Output:----- For each test case, output the total amount spent by each customer. -----Constraints----- - 1 leq T leq 100 - 1 leq M leq 100 - 1 leq length of customer name C leq 50 - 1 leq length of item name I leq 50 - 1 leq A leq 10^4 -----Sample Input:----- 2 3 Alice Book 500 Bob Pen 200 Alice Notebook 300 2 John Pen 150 John Book 350 -----Sample Output:----- Alice 800 Bob 200 John 500","solution":"def calculate_expenditure(T, test_cases): results = [] for i in range(T): transactions = test_cases[i] customer_totals = {} for transaction in transactions: customer, _, amount = transaction amount = int(amount) if customer in customer_totals: customer_totals[customer] += amount else: customer_totals[customer] = amount for customer, total in customer_totals.items(): results.append(f\\"{customer} {total}\\") return results # Example usage T = 2 test_cases = [ [(\\"Alice\\", \\"Book\\", \\"500\\"), (\\"Bob\\", \\"Pen\\", \\"200\\"), (\\"Alice\\", \\"Notebook\\", \\"300\\")], [(\\"John\\", \\"Pen\\", \\"150\\"), (\\"John\\", \\"Book\\", \\"350\\")] ] print(calculate_expenditure(T, test_cases)) # Output: [\'Alice 800\', \'Bob 200\', \'John 500\']"},{"question":"Write a function called `categorize_strings` that takes a list of strings as input and returns a dictionary categorizing the strings based on their lengths. The keys of the dictionary should be the string lengths, and the corresponding values should be lists of strings having that length. For example: ```python def categorize_strings(strings): pass # Example usage: categorize_strings([\\"apple\\", \\"banana\\", \\"cat\\", \\"dog\\", \\"elephant\\", \\"fish\\"]) ``` Expected output: ```python { 3: [\\"cat\\", \\"dog\\"], 4: [\\"fish\\"], 5: [\\"apple\\"], 6: [\\"banana\\"], 8: [\\"elephant\\"] } ``` Ensure your function handles an empty list input gracefully by returning an empty dictionary.","solution":"def categorize_strings(strings): Categorizes the strings based on their lengths. Parameters: strings (List[str]): List of strings to be categorized. Returns: dict: Dictionary where keys are string lengths and values are lists of strings of that length. categorized_dict = {} for string in strings: length = len(string) if length not in categorized_dict: categorized_dict[length] = [] categorized_dict[length].append(string) return categorized_dict"},{"question":"In a world where advanced robotics is prevalent, there exists a robot called RoboMax that performs a variety of tasks to assist humans. RoboMax is equipped with a rechargeable battery that sustains its operations. The battery of RoboMax can be represented as a grid with R rows and C columns. Each cell of the grid contains a power value denoting how much energy the battery holds in that cell. RoboMax has a unique way of recharging its battery. It can increase the power value of any single cell by a given value X. However, each recharge operation consumes 1 unit of time. Additionally, RoboMax can only recharge up to M units of time in a given recharging session. The objective is to maximize the total energy of the battery grid after performing up to M recharging operations. -----Input----- - The first line contains three integers R, C, and M denoting the number of rows, the number of columns, and the maximum number of recharge operations. - The second line contains a single integer X denoting the power value increase per recharge operation. - The next R lines contain C integers each, representing the initial power values of the battery grid. -----Output----- Print a single integer — the maximum possible total energy of the battery grid after performing up to M recharge operations. -----Constraints----- - 1 le R, C le 100 - 1 le M le 10^4 - 1 le X le 100 - 0 le initial power value of any cell le 10^3 -----Example Input----- 3 3 5 10 1 2 3 4 5 6 7 8 9 -----Example Output----- 230 -----Explanation----- In this example, we can perform: - One recharge on cell (2,2) increasing its value to 15. - One recharge on cell (3,3) increasing its value to 19. - One recharge on cell (3,3) again increasing its value to 29. - One recharge on cell (3,3) again increasing its value to 39. - One recharge on cell (3,3) again increasing its value to 49. Initial total energy: 1+2+3+4+5+6+7+8+9 = 45 After recharges, the new total energy: 1+2+3+4+15+6+7+8+49 = 95 Performing maximal recharges results in optimal energy, but additional operations aim to balance and strategically maximize energy within given constraints.","solution":"def maximize_battery_energy(R, C, M, X, grid): total_energy = sum(sum(row) for row in grid) # Flatten the grid to a list of cells cells = [grid[r][c] for r in range(R) for c in range(C)] # Sort cells based on their values in descending order cells.sort(reverse=True) # Add the additional energy using M operations each increasing energy by X for i in range(M): cells[i % (R * C)] += X return sum(cells)"},{"question":"Given a list of integers, write a function that returns the maximum sum of a non-empty subsequence such that no two elements in the subsequence are adjacent in the original list. A subsequence in this context means a sequence derived by deleting some or no elements of the list without changing the order of the remaining elements. For example: ```python max_non_adjacent_sum([3, 2, 5, 10, 7]) == 15 # Explanation: 3 + 10 + 2 = 15 max_non_adjacent_sum([3, 2, 7, 10]) == 13 # Explanation: 3 + 10 = 13 max_non_adjacent_sum([5, 5, 10, 100, 10, 5]) == 110 # Explanation: 5 + 100 + 5 = 110 max_non_adjacent_sum([1, 2, 3]) == 4 # Explanation: 1 + 3 = 4 max_non_adjacent_sum([1, 20, 3]) == 20 # Explanation: 20 ``` # Constraints: * The list will contain at least one integer and at most 100,000 integers. * Each integer in the list will be between -10,000 and 10,000. # Requirements: - Your solution should be optimized for performance, given the constraints on the list size. ```python def max_non_adjacent_sum(lst): # Your implementation here pass ```","solution":"def max_non_adjacent_sum(lst): if not lst: return 0 prev_max = 0 curr_max = 0 for num in lst: new_max = max(curr_max, prev_max + num) prev_max = curr_max curr_max = new_max return curr_max"},{"question":"You are given an array of integers. Your task is to evaluate multiple queries, where each query provides two integers, L and R. For each query, you need to determine the number of unique elements in the subarray that starts at index L and ends at index R (both inclusive). -----Input:----- - The first line contains an integer, N, the length of the array. - The second line contains N integers representing the elements of the array. - The third line contains an integer, Q, the number of queries. - Each of the next Q lines contains two integers, L and R, representing the starting and ending indices for a query. -----Output:----- - For each query, output the number of unique elements in the subarray from index L to index R. -----Constraints----- - 1 leq N leq 10^5 - 1 leq A[i] leq 10^9 - 1 leq Q leq 10^5 - 0 leq L leq R < N -----Sample Input:----- 5 1 2 1 3 2 3 0 2 1 4 2 3 -----Sample Output:----- 2 3 2 -----Explanation:----- Test Case 1: The subarray from index 0 to index 2 is [1, 2, 1]. The unique elements are {1, 2}, so the answer is 2. Test Case 2: The subarray from index 1 to index 4 is [2, 1, 3, 2]. The unique elements are {1, 2, 3}, so the answer is 3. Test Case 3: The subarray from index 2 to index 3 is [1, 3]. The unique elements are {1, 3}, so the answer is 2.","solution":"def count_unique_elements(arr, queries): This function takes an array and a list of queries, and for each query, returns the number of unique elements in the subarray delimited by the query\'s range. :param arr: List[int] - the input array :param queries: List[Tuple[int, int]] - list of tuples representing (L, R) queries :return: List[int] - list of results with numbers of unique elements for each query results = [] for L, R in queries: subarray = arr[L:R+1] unique_elements = set(subarray) results.append(len(unique_elements)) return results"},{"question":"# Maximal Rectangle Given a 2D binary matrix filled with 0\'s and 1\'s, find the largest rectangle containing only 1\'s and return its area. You may assume that the input matrix contains only characters \'0\' and \'1\', and its dimensions are NxM, with N and M in the range [0, 200]. Write a function that receives this matrix as input and outputs the area of the largest rectangle containing only 1\'s. **Constraints:** - The matrix dimensions N (number of rows) and M (number of columns) are both in the range [0, 200]. **Example:** ``` Input: [ [\\"1\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"1\\",\\"0\\",\\"1\\",\\"1\\",\\"1\\"], [\\"1\\",\\"1\\",\\"1\\",\\"1\\",\\"1\\"], [\\"1\\",\\"0\\",\\"0\\",\\"1\\",\\"0\\"] ] Output: 6 ``` **Explanation:** The maximal rectangle is shown in the third row from the first `\'1\'` column to the fourth `\'1\'` column and it extends up to and including the three rows (i.e., third, second, and first) from the bottom of the matrix. Thus, the area of this rectangle is 6 (3 rows * 2 columns). # Implementation: You should ensure that your solution: 1. Efficiently computes the maximal rectangle area. 2. Handles edge cases such as empty matrix, matrix with no \'1\'s, etc. # Testing: **Basic Tests** ``` Input: [ [\\"1\\",\\"0\\",\\"1\\",\\"0\\"], [\\"1\\",\\"0\\",\\"1\\",\\"1\\"], [\\"1\\",\\"1\\",\\"1\\",\\"1\\"], [\\"1\\",\\"0\\",\\"0\\",\\"1\\"] ] Output: 4 ``` **Edge Cases** ``` Input: [] Output: 0 ``` ``` Input: [ [\\"0\\"] ] Output: 0 ``` ``` Input: [ [\\"1\\"] ] Output: 1 ``` **Execution Constraints** - You should target an efficient solution. Solutions with time complexity above O(N*M) might not perform well for the upper constraint limits. Good Luck!","solution":"def maximalRectangle(matrix): if not matrix: return 0 max_area = 0 num_cols = len(matrix[0]) heights = [0] * (num_cols + 1) for row in matrix: for i in range(num_cols): if row[i] == \'1\': heights[i] += 1 else: heights[i] = 0 stack = [-1] for i in range(num_cols + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - 1 - stack[-1] max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Write a function that takes in two strings and returns the concatenation of them. If either of the strings contains any digit characters, the function should return \\"Invalid input\\".","solution":"def concatenate_strings(s1, s2): Concatenates two strings if they do not contain any digit characters. Args: s1 (str): First input string. s2 (str): Second input string. Returns: str: Concatenated string or \\"Invalid input\\" if any string contains digits. if any(char.isdigit() for char in s1) or any(char.isdigit() for char in s2): return \\"Invalid input\\" return s1 + s2"},{"question":"You are organizing a photography event at a local park and want to help photographers optimize their time by knowing when the sun will be in the optimal position for taking pictures. The park is rectangular, and the sun casts shadows in a certain manner based on its position in the sky. Given the following parameters: - `sunrise`: The time when the sun rises, as an integer in seconds since midnight. - `sunset`: The time when the sun sets, as an integer in seconds since midnight. - `duration`: The desired duration of the optimal photography period, such as \\"golden hour\\" (in seconds). Write a function that determines the start time and end time of the optimal period for photography. The optimal period should fall between sunrise and sunset and last exactly for the specified duration. If it\'s not possible to fit the desired duration between sunrise and sunset, return an appropriate message. Input: - `sunrise`: An integer representing the sunrise time (in seconds since midnight). - `sunset`: An integer representing the sunset time (in seconds since midnight). - `duration`: An integer representing the duration of the optimal photography period (in seconds). Output: - A tuple containing the start time and end time of the optimal photography period (in seconds since midnight) if possible. - A string message if it\'s not possible to fit the desired duration between sunrise and sunset. Example: ``` sunrise = 21600 sunset = 64800 duration = 3600 Output: (21600, 25200) ``` Note: 21600 seconds is 6:00 AM, 64800 seconds is 6:00 PM, and 3600 seconds is 1 hour. Therefore, the optimal photography period starts at 6:00 AM and ends at 7:00 AM.","solution":"def optimal_photography_period(sunrise, sunset, duration): Determines the start and end time of the optimal photography period between sunrise and sunset, given the desired duration. Args: sunrise (int): The time of sunrise in seconds since midnight. sunset (int): The time of sunset in seconds since midnight. duration (int): The desired duration of the optimal photography period in seconds. Returns: tuple: A tuple containing the start time and end time of the optimal photography period. str: A message if it\'s not possible to fit the desired duration between sunrise and sunset. if sunset - sunrise >= duration: return (sunrise, sunrise + duration) else: return \\"It\'s not possible to fit the desired duration between sunrise and sunset.\\""},{"question":"=====Problem Statement===== You are tasked with implementing an algorithm to balance the brackets in an arithmetic expression. The expression may contain brackets \'(\', \')\', \'{\', \'}\', \'[\' and \']\', along with standard arithmetic operators and integers. The brackets within the expression must be balanced for it to be considered valid. For example, the expression (2 + 3) * [5 - (8 / 4)] is balanced whereas (2 + [3 * (5 - 2)) is not. Your task is to determine if the given expression is balanced or not. =====Input Format===== A single line of input containing the arithmetic expression, E. =====Constraints===== 0<len(E)<1000 The expression can include integers, arithmetic operators (+, -, *, /), brackets, and spaces. =====Output Format===== Print \\"YES\\" if the expression has balanced brackets, otherwise print \\"NO\\". Example 1: Input: (2 + 3) * [5 - (8 / 4)] Output: YES Example 2: Input: (2 + [3 * (5 - 2)) Output: NO Explanation: In the first example, all brackets are properly closed and nested, so the output is YES. In the second example, the brackets are not properly balanced, so the output is NO.","solution":"def is_balanced(expression): Determines if the brackets in the given arithmetic expression are balanced. Parameters: expression (str): The arithmetic expression to check. Returns: str: \\"YES\\" if the expression is balanced, otherwise \\"NO\\". stack = [] brackets = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in expression: if char in brackets.values(): stack.append(char) elif char in brackets.keys(): if stack == [] or brackets[char] != stack.pop(): return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"Given an array of integers, you need to find the maximum possible sum of a contiguous subarray with a constraint: the sum of elements in the subarray should not be greater than a given integer `S`. Write a function `max_subarray_sum_with_constraint(arr, S)` that takes in an array of integers `arr` and an integer `S`, and returns the maximum possible sum of a contiguous subarray whose sum is less than or equal to `S`. If no such subarray exists, return 0. -----Input:----- - An array of integers `arr` of length `N` where 1 leq N leq 3 cdot 10^4. - An integer `S` where 1 leq S leq 10^9. -----Output:----- Return an integer representing the maximum possible sum of a contiguous subarray whose sum is less than or equal to `S`. -----Constraints----- - 1 leq N leq 3 cdot 10^4 - 1 leq S leq 10^9 -----Sample Input:----- arr = [1, 2, 3, 4, 5] S = 11 -----Sample Output:----- 10 Explanation: - The subarray [1, 2, 3, 4] has a sum of 10 which is the maximum possible sum under the constraint that the subarray sum is not greater than 11.","solution":"def max_subarray_sum_with_constraint(arr, S): Returns the maximum possible sum of a contiguous subarray whose sum is less than or equal to S. max_sum = 0 current_sum = 0 start = 0 for end in range(len(arr)): current_sum += arr[end] while current_sum > S: current_sum -= arr[start] start += 1 if current_sum <= S: max_sum = max(max_sum, current_sum) return max_sum"},{"question":"# Task Write a function called `findConsecutiveSubstrings` that takes a string `s` and an integer `k` as input, and returns an array of all unique substrings of `s` with exactly `k` consecutive characters. # Example For `s = \\"abcabc\\"` and `k = 3`, the output should be `[\\"abc\\", \\"bca\\", \\"cab\\"]`. For `s = \\"aaaaa\\"` and `k = 2`, the output should be `[\\"aa\\"]`. For `s = \\"abcdef\\"` and `k = 4`, the output should be `[\\"abcd\\", \\"bcde\\", \\"cdef\\"]`. # Input/Output - `[input]` string `s` A non-empty string of lowercase English letters. Constraints: `1 ≤ s.length ≤ 100`. - `[input]` integer `k` Length of consecutive characters to form substrings. Constraints: `1 ≤ k ≤ 100`. - `[output]` an array of strings Array of unique substrings with exactly `k` consecutive characters. The order of substrings in the output does not matter.","solution":"def findConsecutiveSubstrings(s, k): Returns an array of all unique substrings of s with exactly k consecutive characters. substrings = set() # Using a set to ensure uniqueness for i in range(len(s) - k + 1): substr = s[i:i + k] substrings.add(substr) return list(substrings)"},{"question":"You are given a rectangular grid of size N times M. Each cell in the grid has a certain number of apples. You start from the top-left cell and your goal is to collect the maximum number of apples while moving to the bottom-right cell. From any cell (i, j), you can only move to the cell (i+1, j) or the cell (i, j+1) (i.e., you can move only to the right or downwards). Write a program to determine the maximum number of apples you can collect. -----Input----- - The first line contains two integers N and M -- the dimensions of the grid. - The next N lines contain M integers each, representing the number of apples in each cell. -----Output----- - Print a single integer -- the maximum number of apples that can be collected. -----Constraints----- - 1 le N, M le 1000 - 0 le number of apples in each cell le 10^4 -----Example Input----- 3 3 1 2 3 4 5 6 7 8 9 -----Example Output----- 29 -----Explanation----- Example case 1: An optimal path to collect the maximum number of apples would be: 1 → 2 → 3 → 6 → 9. The total number of apples collected along this path is 1 + 2 + 3 + 6 + 9 = 21.","solution":"def max_apples(grid): Function to calculate the maximum number of apples that can be collected from the top-left to the bottom-right cell of a grid. :param grid: List of lists representing the apple grid where grid[i][j] is the number of apples in cell (i, j) :return: Maximum number of apples that can be collected N = len(grid) M = len(grid[0]) # DP table to store the maximum apples collectable up to each cell dp = [[0] * M for _ in range(N)] # Initialize the top-left cell with its own apple count dp[0][0] = grid[0][0] # Fill in the first row (can only come from the left) for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill in the first column (can only come from above) for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the rest of the dp table for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[N-1][M-1]"},{"question":"Raghav is studying arithmetic sequences and wants to solve a problem related to them. He is given an integer N and needs to find the smallest positive integer X such that A1 + A2 + ... + AN is divisible by X where numbers A1, A2, ..., AN form an arithmetic sequence. Help Raghav find such a number X. -----Note:----- - An arithmetic sequence is a sequence of numbers in which the difference of any two successive members is a constant. -----Input:----- - The first line contains T, the number of test cases. - Each test case contains a single integer N. -----Output:----- For each test case, output the smallest positive integer X that divides the sum of the arithmetic sequence of length N. If there is no such X, output -1. -----Constraints:----- - 1 leq T leq 1000 - 1 leq N leq 10^6 -----Sample Input:----- 3 5 3 1 -----Sample Output:----- 1 1 1 -----Explanation:----- Sample Case - 1: For an arithmetic sequence of length 5 with no specific first term and common difference, the sum is a multiple of N = 5. The smallest positive integer that divides the sum (regardless of the first term and common difference) is 1. Sample Case - 2: For an arithmetic sequence of length 3 with any first term and common difference, the sum is a multiple of N = 3. The smallest positive integer that divides the sum is 1. Sample Case - 3: For an arithmetic sequence of length 1, the sum is simply the first term itself, which can be any positive integer. Thus, the sum is always divisible by 1, making 1 the answer.","solution":"def smallest_divisor_for_sum_of_arithmetic_sequence(N): Given an integer N, returns the smallest positive integer X such that A1 + A2 + ... + AN is divisible by X, where A1, A2, ..., AN forms an arithmetic sequence. # For any arithmetic sequence of length N, its sum is a multiple of N. # Hence the smallest positive integer X such that the sum is divisible by X is 1. return 1 def process_test_cases(T, test_cases): Processes T test cases. For each test case, applies the function smallest_divisor_for_sum_of_arithmetic_sequence and returns the results as a list. results = [] for N in test_cases: results.append(smallest_divisor_for_sum_of_arithmetic_sequence(N)) return results"},{"question":"# Scenario **_A factory production line_** output several products with different volumes each day. At the end of the day, **_the manager_** wants to **_find out_** which **_days_** were **_the most productive_** over **_the last week_**. ___ # Task **_Given_** *an array of positive integers representing the production volume of each day for a full week (7 days)*, **_return_** *the day with the highest production volume*. If there are multiple days with the same highest volume, **_return_** *the earliest one* (considering 0 as Monday, 1 as Tuesday, ..., 6 as Sunday). ___ # Notes * **_Array size_** is *exactly 7*. * **_All numbers_** will be **positive**. ___ # Input >> Output Examples ``` highestProductionDay([100, 150, 150, 200, 180, 180, 170]) ==> return 3 ``` **_Explanation_**: **_Day 3_** (Thursday) has the highest production volume of `200`. ___ ``` highestProductionDay([120, 120, 120, 120, 120, 120, 120]) ==> return 0 ``` **_Explanation_**: **_All days_** have the same production volume of `120`. The answer is **_the earliest day_**, which is Monday (day 0). ___ ``` highestProductionDay([90, 180, 160, 180, 80, 70, 200]) ==> return 6 ``` **_Explanation_**: **_Day 6_** (Sunday) has the highest production volume of `200`. ___ ___ ___ # [Productivity Analysis Series](https://www.example.com/productivity-katas) # [Playing With Arrays Series](https://www.example.com/array-katas) # [For More Enjoyable Katas](http://www.example.com/fun-katas) ___ ALL translations are welcomed Enjoy Learning!! # YourName","solution":"def highestProductionDay(production_volumes): This function returns the index of the day with the highest production volume. If multiple days have the same highest volume, it returns the earliest day. max_volume = max(production_volumes) return production_volumes.index(max_volume)"},{"question":"Given an integer array `nums`, you need to return the length of the longest subsequence that starts and ends with the same digit. Example 1: Input: nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1] Output: 10 Explanation: The longest subsequence starting and ending with the same digit is the entire array. Example 2: Input: nums = [1, 2, 3, 1, 4, 5, 6, 1, 2] Output: 8 Explanation: The longest subsequence is [1, 2, 3, 1, 4, 5, 6, 1]. Example 3: Input: nums = [8, 1, 8, 2, 8, 3, 8, 4, 8] Output: 9 Explanation: The longest subsequence is the entire array. Example 4: Input: nums = [2, 3, 4, 5, 6, 6, 5, 4, 3, 2] Output: 10 Constraints: - 1 <= nums.length <= 10^5 - 0 <= nums[i] <= 9","solution":"def longest_subsequence_same_start_end_digit(nums): Returns the length of the longest subsequence starting and ending with the same digit. if not nums: return 0 max_length = 0 first_occurrence = {} for index, num in enumerate(nums): if num not in first_occurrence: first_occurrence[num] = index start_index = first_occurrence[num] subsequence_length = index - start_index + 1 if subsequence_length > max_length: max_length = subsequence_length return max_length"},{"question":"A string S is given. You are to determine the length of the longest substring of S that contains no more than two distinct characters. For example: Input: S = \\"eceba\\" Output: 3 Explanation: The substring is \\"ece\\" which its length is 3. Example 1: Input: S = \\"ccaabbb\\" Output: 5 Explanation: The substring is \\"aabbb\\" which its length is 5. Example 2: Input: S = \\"abcabcabc\\" Output: 2 Explanation: The substring can be \\"ab\\" or \\"bc\\" and each one is of length 2.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring of s that contains no more than two distinct characters. n = len(s) if n < 3: return n left = 0 right = 0 max_length = 2 hashmap = {} while right < n: hashmap[s[right]] = right right += 1 if len(hashmap) == 3: del_idx = min(hashmap.values()) del hashmap[s[del_idx]] left = del_idx + 1 max_length = max(max_length, right - left) return max_length"},{"question":"Given a list of integers, write a function `filter_and_square` that removes all non-positive numbers from the list and returns a new list where each of the remaining numbers is squared. Make sure to use list comprehensions for this task. For example: ``` filter_and_square([1, -2, 3, 0, -4, 5]) = [1, 9, 25] filter_and_square([-1, -2, -3, -4, -5]) = [] filter_and_square([4, 1, 0, 10, -7]) = [16, 1, 100] filter_and_square([0, 1, 2, 3]) = [1, 4, 9] ```","solution":"def filter_and_square(numbers): Filters out all non-positive numbers from the list and returns a new list where each of the remaining numbers is squared. return [x ** 2 for x in numbers if x > 0]"},{"question":"You are given an array of integers. Write a function that returns the sum of the positive integers in the array and the product of the negative integers in the array, separated by a single comma. If there are no positive integers, return \'None\' for the sum. Similarly, if there are no negative integers, return \'None\' for the product. If the array is empty, return \'None,None\'.","solution":"def sum_and_product(arr): Returns the sum of the positive integers and the product of the negative integers in the array, separated by a single comma. If there are no positive integers, return \'None\' for the sum. If there are no negative integers, return \'None\' for the product. If the array is empty, return \'None,None\'. if not arr: return \\"None,None\\" pos_sum = sum(x for x in arr if x > 0) neg_product = None for x in arr: if x < 0: if neg_product is None: neg_product = x else: neg_product *= x pos_sum = pos_sum if pos_sum > 0 else \'None\' neg_product = neg_product if neg_product is not None else \'None\' return f\\"{pos_sum},{neg_product}\\""},{"question":"You are organizing a coding competition and want to assign rooms for participants based on their registrations. Each room can accommodate a maximum of 4 participants. Each participant can choose to participate individually or as part of a team of up to 4 members. You want to determine the minimum number of rooms required to accommodate all participants given the teams\' sizes. You will be given a list of integers where each integer represents the size of a team. Write a function that returns the minimum number of rooms required to accommodate all the teams. # Examples: ```csharp MinRooms(new List<int>{1, 2, 1, 3}) // => 2. Two rooms are needed: one for (1, 1, 2) and one for (3). MinRooms(new List<int>{4, 4, 4, 1}) // => 4. Each team of 4 needs a separate room and the single participant needs another room. MinRooms(new List<int>{3, 3, 3, 3}) // => 4. Each team of 3 needs a separate room. ``` ```python min_rooms([1, 2, 1, 3]) # => 2. Two rooms are needed: one for (1, 1, 2) and one for (3). min_rooms([4, 4, 4, 1]) # => 4. Each team of 4 needs a separate room and the single participant needs another room. min_rooms([3, 3, 3, 3]) # => 4. Each team of 3 needs a separate room. ``` ```cpp minRooms({1, 2, 1, 3}) // => 2. Two rooms are needed: one for (1, 1, 2) and one for (3). minRooms({4, 4, 4, 1}) // => 4. Each team of 4 needs a separate room and the single participant needs another room. minRooms({3, 3, 3, 3}) // => 4. Each team of 3 needs a separate room. ```","solution":"def min_rooms(teams): Given a list of integers where each integer represents the size of a team, return the minimum number of rooms required to accommodate all the teams. if not teams: return 0 rooms = 0 current_capacity = 0 for size in sorted(teams, reverse=True): if current_capacity + size <= 4: current_capacity += size else: rooms += 1 current_capacity = size if current_capacity > 0: rooms += 1 return rooms"},{"question":"You are given a string containing only characters \'a\' and \'b\'. The string is considered valid if there are no consecutive \'b\'s, and there are no more than two \'a\'s in a row. Write a method that takes the string as an argument and returns a boolean indicating whether the string is valid based on the specified criteria. Examples ```python \\"isValidString(\'aa\')\\" Should return: True (contains two \'a\'s but not more than two in a row) \\"isValidString(\'aab\')\\" Should return: True (valid string with no consecutive \'b\'s) \\"isValidString(\'aaa\')\\" Should return: False (contains three \'a\'s in a row) \\"isValidString(\'bba\')\\" Should return: False (contains consecutive \'b\'s) ```","solution":"def isValidString(s): Returns True if the string `s` is valid according to the specified rules: - No consecutive \'b\'s - No more than two \'a\'s in a row Otherwise, returns False. a_count = 0 for i in range(len(s)): if s[i] == \'a\': a_count += 1 if a_count > 2: return False else: a_count = 0 if i > 0 and s[i - 1] == \'b\': return False return True"},{"question":"Intersection of Two Arrays Create a program that finds the intersection of two arrays. The intersection means the elements that are common in both arrays. Each element in the result should appear as many times as it shows in both arrays. The result can be in any order. Task Given two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the intersection must appear as many times as it shows in both arrays, and you may return the result in any order. ~~~if:nasm NASM notes Write the output numbers into the `out` parameter, and return its length. Input arrays will contain only integers between -10^4 and 10^4 inclusive. ~~~ ~~~if:c For C: * Assign the return array length to the pointer parameter `*szout`. * Do not mutate the input arrays. ~~~ Example ```python intersect([1,2,2,1], [2,2]) # return [2,2] intersect([4,9,5], [9,4,9,8,4]) # return [4,9] ```","solution":"from collections import Counter def intersect(nums1, nums2): Returns the intersection of two arrays such that elements in the result appear as many times as they show in both arrays. Parameters: nums1 (List[int]): First list of integers. nums2 (List[int]): Second list of integers. Returns: List[int]: The intersection of nums1 and nums2. counts1 = Counter(nums1) counts2 = Counter(nums2) intersection = [] for num in counts1: if num in counts2: intersection.extend([num] * min(counts1[num], counts2[num])) return intersection"},{"question":"You are given a list of words. Your task is to sort the words in ascending order by their frequency of occurrence and then alphabetically by their original order in case of a tie in frequencies. Write a function `sort_words(words)` that takes a list of words `words` and returns a list of words sorted first by frequency and then alphabetically in case of a tie. # Input - A list of strings `words` where `1 ≤ len(words) ≤ 10^5` and each string contains only lowercase letters and has length between 1 and 100. # Output - A list of strings sorted according to the criteria described above. # Example Input: ```python [\\"apple\\", \\"banana\\", \\"apple\\", \\"apple\\", \\"banana\\", \\"cherry\\"] ``` Output: ```python [\\"cherry\\", \\"banana\\", \\"banana\\", \\"apple\\", \\"apple\\", \\"apple\\"] ``` # Explanation In the example, \\"cherry\\" appears once, \\"banana\\" appears twice, and \\"apple\\" appears three times. Since \\"cherry\\" has the lowest frequency, it comes first. \\"banana\\" and \\"apple\\" are then sorted by their frequencies respectively, and within each frequency category, words are sorted alphabetically by their original order. # Constraints - You must use the input parameters directly without using global variables. - Your solution should be efficient enough to handle the upper limits of the constraints.","solution":"from collections import Counter def sort_words(words): Sort the words by frequency of occurrence and then alphabetically in case of a tie in frequencies. # Count the frequency of each word frequency = Counter(words) # Create a sorted list based on the defined criteria: # 1. Frequency (ascending) # 2. Alphabetically in case of a tie sorted_words = sorted(words, key=lambda word: (frequency[word], word)) return sorted_words"},{"question":"Implement a function `anagram_finder(word_list)`, which takes a list of strings and returns a dictionary of anagrams. Each key in the dictionary should be a string that represents the sorted order of letters, and the corresponding value should be a list of all words from the input list that, when their letters are sorted, match this key. For example, given the input `[\\"cat\\", \\"tac\\", \\"act\\", \\"dog\\", \\"god\\"]`, the output should be: ```python { \\"act\\": [\\"cat\\", \\"tac\\", \\"act\\"], \\"dgo\\": [\\"dog\\", \\"god\\"] } ``` Ensure the function is case insensitive when finding anagrams (i.e., treat \\"Cat\\" and \\"tac\\" as anagrams), but return the original case in the lists of anagrams. If the input list is empty, return an empty dictionary.","solution":"def anagram_finder(word_list): Returns a dictionary of anagrams from the given list of words. anagram_dict = {} for word in word_list: sorted_letters = \'\'.join(sorted(word.lower())) if sorted_letters in anagram_dict: anagram_dict[sorted_letters].append(word) else: anagram_dict[sorted_letters] = [word] return anagram_dict"},{"question":"A pharmacy is implementing a system to help manage their inventory of medications. Each medication has a name, expiration date, and quantity in stock. Write a program that reads a series of medications and returns the name of the medication with the earliest expiration date that is still in stock. ---Input--- The first line contains an integer T, the total number of medications. Each of the next T lines contains the name of the medication (a string without spaces), the expiration date in the format YYYY-MM-DD, and the quantity in stock (an integer). ---Output--- Display the name of the medication with the earliest expiration date that has a quantity greater than zero. If there are multiple medications with the same earliest expiration date, return the one that appears first in the input. ---Constraints--- - 1 ≤ T ≤ 1000 - The name of the medication will have at most 50 characters. - The expiration date format will be a valid date in the YYYY-MM-DD format. - 1 ≤ Quantity ≤ 10000 ---Example--- Input 3 Aspirin 2023-08-01 50 Ibuprofen 2022-12-31 0 Paracetamol 2023-08-01 20 Output Paracetamol Explanation: Ibuprofen is not considered as its quantity is zero. Both Aspirin and Paracetamol have the same expiration date, but since Paracetamol appears last in the input among the drugs with the earliest expiration date, it is selected.","solution":"import datetime def earliest_medication(T, medications): Returns the name of the medication with the earliest expiration date that has a quantity greater than zero. Parameters: T (int): The total number of medications. medications (list of tuples): A list containing T tuples, each tuple contains: - name (str): The name of the medication. - expiration_date (str): The expiration date in format \'YYYY-MM-DD\'. - quantity (int): The quantity in stock. Returns: str: The name of the medication with the earliest expiration date that is still in stock. earliest_date = None earliest_med = None for medication in medications: name, expiration_date, quantity = medication if quantity > 0: date = datetime.datetime.strptime(expiration_date, \'%Y-%m-%d\') if earliest_date is None or date < earliest_date: earliest_date = date earliest_med = name elif date == earliest_date: earliest_med = name # If dates are the same, prefer the one appears last in input which is the current one. return earliest_med"},{"question":"Given a string containing a sentence, write a function to find and return the longest word in the sentence. If there are two or more words with the same longest length, return the first one that appears. You may assume that the sentence will not be empty and that words will be separated by a single space. Please do not use any built-in functions that directly perform the task such as `max()`. **Example:** Input: `\\"The quick brown fox jumped over the lazy dog\\"` Output: `\\"jumped\\"` *Note*: A word is defined as a sequence of characters separated by spaces. Punctuation is not to be included in the word count. **Constraints:** Your solution should handle words up to 100 characters long and sentences up to 1,000 characters long.","solution":"def longest_word(sentence): Finds and returns the longest word in the given sentence. If there are multiple words with the same longest length, returns the first one. words = sentence.split(\' \') longest = words[0] for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"Given a string s and a list of words, determine if s is a concatenation of all the words in the list exactly once without any intervening characters. Note: All the words are of the same length. Example: Input: s: \\"wordgoodgoodgoodbestword\\" words: [\\"word\\", \\"good\\", \\"best\\", \\"good\\"] Output: False Explanation: The string \\"wordgoodgoodgoodbestword\\" doesn\'t contain the words [\\"word\\", \\"good\\", \\"best\\", \\"good\\"] exactly once and without any extra characters in the middle.","solution":"from typing import List def is_concatenation(s: str, words: List[str]) -> bool: Determine if `s` is a concatenation of all the words in the list exactly once without any intervening characters. if not words: return False word_length = len(words[0]) total_length = word_length * len(words) if len(s) != total_length: return False word_count = {} for word in words: word_count[word] = word_count.get(word, 0) + 1 for i in range(0, len(s), word_length): word = s[i:i+word_length] if word not in word_count: return False word_count[word] -= 1 if word_count[word] < 0: return False return all(count == 0 for count in word_count.values())"},{"question":"A gardener wants to maximize the beauty of his garden by planting flowers in a specific pattern. He has an array of N flowers where each flower is represented by an integer indicating its height. He wishes to plant these flowers in such a way that each flower is taller than the one before it and the difference in height between any two consecutive flowers is the same throughout the garden. Your task is to help the gardener figure out the longest subsequence in the given array of flowers\' heights that follows the pattern described above. -----Input:----- - The first line of input contains an integer N, the number of flowers. - The second line contains N space-separated integers representing the heights of the flowers. -----Output:----- - Output a single integer representing the length of the longest subsequence that follows the given pattern. -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ height of each flower ≤ 10000 -----Sample Input:----- 6 1 7 3 5 9 2 -----Sample Output:----- 3","solution":"def longest_arithmetic_subsequence(flowers): Returns the length of the longest subsequence that follows the given pattern where each flower is taller than the one before it and the difference in height between any two consecutive flowers is the same. from collections import defaultdict n = len(flowers) if n <= 1: return n dp = defaultdict(lambda: defaultdict(int)) max_length = 2 for i in range(1, n): for j in range(i): diff = flowers[i] - flowers[j] dp[i][diff] = dp[j][diff] + 1 max_length = max(max_length, dp[i][diff] + 1) return max_length"},{"question":"Ziota recently discovered another challenging game called \\"Elemental Path\\". In this game, there are n different elements numbered from 1 to n. Each element has a specific power level associated with it. Ziota can select elements to form a path, where each path is classified based on its length and minimum power level among all selected elements in that path. Ziota can only choose paths that satisfy the following condition: the power levels of selected elements in the path should form a strictly increasing sequence. Ziota is interested in finding the maximum minimum power level of a path of at least length k that can be formed using the elements. -----Input----- The first line of the input contains two integers n (2 le n le 10^5) — the number of elements and k (1 le k le n) — the minimum required length of the path. The second line contains n integers separated by a single space p_1, p_2, ldots, p_n (1 le p_i le 10^9) — the power levels of the elements. -----Output----- Print one integer, the maximum minimum power level of a path of length at least k. If no such path exists, print −1. -----Examples----- Input 5 3 4 2 6 1 5 Output 4 Input 6 4 3 1 4 7 6 2 Output 3 -----Note----- In the first test case, Ziota can form the path with elements having power levels 2, 4, and 5. The minimum power level in this path is 2, but the path\'s maximum minimum power level is 4. In the second test case, Ziota can form the path with elements having power levels 1, 3, 4, and 7. The minimum power level in this path is 1, but the path\'s maximum minimum power level is 3.","solution":"def max_min_power_path(n, k, powers): Finds the maximum minimum power level of a path of length at least k. def is_valid(min_power): count = 0 for power in powers: if power >= min_power: count += 1 if count >= k: return True return False left, right = 1, max(powers) result = -1 while left <= right: mid = (left + right) // 2 if is_valid(mid): result = mid left = mid + 1 else: right = mid - 1 return result"},{"question":"You are working on a text editor, and you need to implement a function to count the frequency of each distinct word in a given string. The function should take a single string as input and return a dictionary where the keys are words, and the values are the number of times each word appears in the input string. Words in the input string are case-insensitive, and your output should treat them as such. Moreover, punctuation marks (like periods, commas, and exclamation marks) attached to the words should be removed. # Examples: ```python input_string = \\"Hello, world! HELLO.\\" # Should return {\'hello\': 2, \'world\': 1} input_string = \\"It\'s a test, a simple TEST.\\" # Should return {\'its\': 1, \'a\': 2, \'test\': 2, \'simple\': 1} ``` # Constraints: - The input string can contain any printable ASCII characters. - Words are separated by spaces. - The function should handle an empty input string and return an empty dictionary in that case. # Function Signature: ```python def word_frequency(input_string: str) -> dict: pass ``` Develop this function to accurately compute the word frequencies in an input text string adhering to the specified requirements.","solution":"import re from collections import defaultdict def word_frequency(input_string: str) -> dict: Calculate the frequency of each distinct word in the given input string. Words are considered case-insensitive and punctuation is ignored. # Convert to lowercase input_string = input_string.lower() # Remove punctuation using regex input_string = re.sub(r\'[^ws]\', \'\', input_string) # Split the string into words words = input_string.split() # Create a default dictionary to count word frequencies word_count = defaultdict(int) for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"You are given an array of integers `arr` where the ith element represents the number of elements in the ith group. Each group can select a leader, and the leader must have a higher or equal count of elements than in any other group but cannot belong to the group with the smallest count. If there are multiple possible leaders, the one with the smallest count among them should be chosen. Write a function to find the count of the chosen leader. Your task is to implement a function: ```python def findGroupLeader(arr: List[int]) -> int: pass ``` **Input:** - An array `arr` of size `n` where 2 <= n <= 1000 and 1 <= arr[i] <= 1000. **Output:** - An integer representing the count of the chosen leader. **Example:** Input: `[3, 4, 2, 5, 1]` Output: `4` Explanation: The groups have counts [3, 4, 2, 5, 1]. The group with smallest count is 1, so the potential leaders are from groups with counts [3, 4, 2, 5]. Among these, the group with the smallest count is 2, so the leader has a count of 4. **Note:** 1. You must exclude the group with the smallest count from being the leader. 2. If there are no valid leaders, return -1.","solution":"from typing import List def findGroupLeader(arr: List[int]) -> int: Returns the count of the chosen leader. # Find the minimum value in the array min_value = min(arr) # Filter out the minimum value possible_leaders = [val for val in arr if val != min_value] # If no possible leaders are left, return -1 if not possible_leaders: return -1 # Return the leader count, which is the smallest value among possible leaders return min(possible_leaders)"},{"question":"# Situation You have been hired as a software developer to create a new feature for a smart home thermostat. The thermostat should be able to adjust the room temperature automatically based on a schedule. # Specification The thermostat can be set to change the temperature at specific times throughout the day. The schedule is defined by a list of changes, with each change specifying the hour and the new temperature. The thermostat\'s default temperature is 20 degrees Celsius. The schedule contains temperature changes for a 24-hour period, but if no changes are scheduled for certain hours, the thermostat will maintain the previous hour\'s temperature. # Input A list of tuples representing the temperature schedule. Each tuple contains two integers: 1. The hour (0 to 23, inclusive) when the temperature change occurs. 2. The new temperature in degrees Celsius (an integer). # Output A list of 24 integers representing the temperature for each hour of the day, starting from hour 0. # Example Given the schedule `[(5, 18), (9, 22), (15, 25), (22, 19)]`, the output should be: [20, 20, 20, 20, 20, 18, 18, 18, 18, 22, 22, 22, 22, 22, 22, 25, 25, 25, 25, 25, 25, 25, 19, 19] This means: - From hour 0 to 4, the temperature is the default 20 degrees. - At hour 5, it changes to 18 degrees. - At hour 9, it changes to 22 degrees. - At hour 15, it changes to 25 degrees. - At hour 22, it changes to 19 degrees. - The rest of the hours keep the last set temperature until the end.","solution":"def get_temperature_schedule(schedule): Given a schedule of temperature changes throughout the day, return the temperature for each hour of the day. :param schedule: List of tuples, each containing an hour (0-23) and the temperature for that hour. :return: List of 24 integers representing the temperature for each hour of the day. # Initialize the temperature list with the default temperature 20 temperatures = [20] * 24 # Sort the schedule by the hour to ensure the changes are applied in order schedule.sort() # Apply the temperature changes as specified in the schedule for hour, temp in schedule: for i in range(hour, 24): temperatures[i] = temp return temperatures"},{"question":"You have been given a list of strings representing sentences written in a scrambled format where all words are jumbled. Each word in the sentence is guaranteed to start with an uppercase letter, and the rest of the characters in the word are lowercase. Write a function that takes this list of scrambled sentences and returns a list of sentences where the words are sorted alphabetically. # Example - If the input is `[\\"The quick Brown Fox\\", \\"Jumps over The Lazy Dog\\"]`, the output should be `[\\"Brown Fox The quick\\", \\"Dog Jumps Lazy The over\\"]`. # Notes - If the input list is null/None or empty, return the same type (null/None or empty list). - The order of the sentences in the output list should be the same as the input list. - Preserve the capitalization for each word as it is in the original list. Implement the function as efficiently as possible within the constraints. ```python def sort_scrambled_sentences(sentences): # your implementation here ```","solution":"def sort_scrambled_sentences(sentences): if sentences is None or len(sentences) == 0: return sentences sorted_sentences = [] for sentence in sentences: words = sentence.split() words.sort() sorted_sentences.append(\' \'.join(words)) return sorted_sentences"},{"question":"Write a function that takes a string `s` consisting of opening and closing parentheses and determines the minimum number of parentheses to be added to make the string valid. A string is valid if: - Every opening parenthesis `(` has a corresponding closing parenthesis `)`. - Every closing parenthesis `)` has a corresponding opening parenthesis `(`. The function should return an integer representing the number of parentheses needed to make the string valid. Example 1: Input: \\"())\\" Output: 1 Explanation: We need to add one opening parenthesis to the beginning to make it valid: \\"(())\\". Example 2: Input: \\"(((\\" Output: 3 Explanation: We need to add three closing parentheses to the end to make it valid: \\"((()))\\". Example 3: Input: \\"()\\" Output: 0 Explanation: The string is already valid. Example 4: Input: \\"()))((\\" Output: 4 Explanation: We need to add two opening parentheses to the beginning and two closing parentheses to the end to make it valid: \\"((()))(())\\".","solution":"def min_add_to_make_valid(s): Returns the minimum number of parentheses to be added to make the input string s valid. left_balance = 0 right_balance = 0 for char in s: if char == \'(\': right_balance += 1 elif char == \')\': if right_balance > 0: right_balance -= 1 else: left_balance += 1 return left_balance + right_balance"},{"question":"# Task A popular amusement park has a unique way of selling entry tickets. They only sell tickets for families that have a specific number of adults and children. Given the number of adults and children in a family, your task is to determine the minimum number of tickets the family needs to buy. Each ticket allows entry for exactly two people. A ticket can be used by either: - Two adults - Two children - One adult and one child Given the number of adults and children in a family, find the minimum number of tickets they need to buy to enter the amusement park. # Input/Output - `[input]` integer `adults` the number of adults in the family (0 ≤ adults ≤ 1000) - `[input]` integer `children` the number of children in the family (0 ≤ children ≤ 1000) - `[output]` an integer the minimum number of tickets the family needs to buy to enter the amusement park. # Example - For `adults = 4` and `children = 7`, the output should be `6`. Here\'s why: - 4 adults can be grouped into 2 tickets (each ticket for 2 adults). - The remaining 7 children can be grouped into 3 tickets (each ticket for 2 children), and one additional ticket is needed for the leftover 1 child. Therefore, the minimum number of tickets needed is 6.","solution":"def minimum_tickets(adults, children): Returns the minimum number of tickets needed for the given number of adults and children. total_people = adults + children tickets = (total_people + 1) // 2 return tickets"},{"question":"You are given an N x N grid with some cells filled with different weights representing obstacles. The goal is to find the shortest path from the top-left corner of the grid to the bottom-right corner while minimizing the total weight. You can only move up, down, left, or right. If there is no path, return -1. Write a function `shortest_path(grid)` that receives the grid as an input and returns the total weight of the shortest path. **Function signature:** ```python def shortest_path(grid: List[List[int]]) -> int: ``` **Input:** - `grid`: A List of Lists where each element is an integer representing the weight of that cell. The weights will be non-negative integers. **Output:** - An integer representing the total weight of the shortest path from the top-left corner to the bottom-right corner, or -1 if no such path exists. **Examples:** ```python grid1 = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(shortest_path(grid1)) # Output: 7 (1 → 3 → 1 → 1 → 1) grid2 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(shortest_path(grid2)) # Output: 21 (1 → 2 → 3 → 6 → 9) grid3 = [ [1, 1, 1], [1, 1, 1], [1, 1, 1] ] print(shortest_path(grid3)) # Output: 5 (1 → 1 → 1 → 1 → 1) grid4 = [ [1, 1, 1], [1, 1000, 1], [1, 1, 1] ] print(shortest_path(grid4)) # Output: 5 (1 → 1 → 1 → 1 → 1) ``` **Notes:** - The grid will always have at least one row and one column. - The function needs to handle edge cases like a single element grid. - Efficient algorithms like Dijkstra\'s algorithm should be considered due to representations of obstacles with different weights.","solution":"from heapq import heappop, heappush from typing import List, Tuple def shortest_path(grid: List[List[int]]) -> int: def neighbors(r, c): for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]: # down, up, right, left rr, cc = r + dr, c + dc if 0 <= rr < len(grid) and 0 <= cc < len(grid[0]): yield rr, cc rows, cols = len(grid), len(grid[0]) pq = [(grid[0][0], 0, 0)] # (weight, row, col) min_dist = {(0, 0): grid[0][0]} while pq: current_weight, r, c = heappop(pq) if (r, c) == (rows - 1, cols - 1): return current_weight for nr, nc in neighbors(r, c): new_weight = current_weight + grid[nr][nc] if (nr, nc) not in min_dist or new_weight < min_dist[(nr, nc)]: min_dist[(nr, nc)] = new_weight heappush(pq, (new_weight, nr, nc)) return -1 # No path found"},{"question":"*String Compression* # Task Implement a function that compresses a given string using a basic form of run-length encoding. The function should replace sequences of the same character occurring more than once with that character followed by the number of occurrences. If the compressed string is not smaller than the original string, the function should return the original string instead. # Function Signature ```python def compress_string(s: str) -> str: # Your implementation here ``` # Input - A single string `s` with a length between `1` and `10^4`. The string contains only lowercase and uppercase English letters (a-z, A-Z). # Output - A compressed string representing the run-length encoding of `s`. If the length of the compressed string is not smaller than `s`, return `s` instead. # Examples Example 1 ```python input: \\"aabcccccaaa\\" output: \\"a2b1c5a3\\" explanation: \\"a\\" appears twice consecutively, \\"b\\" once, \\"c\\" five times consecutively, and \\"a\\" three times consecutively. Since \\"a2b1c5a3\\" (8 characters) is shorter than \\"aabcccccaaa\\" (11 characters), the compressed string is returned. ``` Example 2 ```python input: \\"abcdef\\" output: \\"abcdef\\" explanation: Since the compressed string \\"a1b1c1d1e1f1\\" (12 characters) is not shorter than \\"abcdef\\" (6 characters), the original string is returned. ``` # Detailed Steps 1. Initialize an empty string `compressed`. 2. Iterate through the string `s`: - For each character, count its consecutive appearances and add the character followed by the count to `compressed`. 3. If the length of `compressed` is smaller than `s`, return `compressed`. 4. Otherwise, return the original string `s`. Use this function to efficiently represent strings with repeated characters and see if it results in a more compact form. If not, maintain the original string for simplicity.","solution":"def compress_string(s: str) -> str: Compresses a given string using run-length encoding. If the compressed string is not smaller than the original, returns the original string. if not s: return s compressed = [] count = 1 prev_char = s[0] for i in range(1, len(s)): if s[i] == prev_char: count += 1 else: compressed.append(f\\"{prev_char}{count}\\") prev_char = s[i] count = 1 compressed.append(f\\"{prev_char}{count}\\") compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Preface In a grid, a robot can move either to the right, left, up, or down from a cell. We want to find the unique paths that the robot can take to move from the top-left corner to the bottom-right corner of a given `m x n` grid while avoiding some blocked cells. The Problem Create a function `unique_paths_with_obstacles` that returns the number of unique paths from the top-left corner to the bottom-right corner of the grid, given a 2D grid where some cells are marked as obstacles. The grid will be represented as a list of lists, where 0 indicates an empty cell and 1 indicates a blocked cell. The robot can only move to the right, left, up, or down on an empty cell. Sample Input ```python unique_paths_with_obstacles([ [0, 0, 0], [0, 1, 0], [0, 0, 0] ]) # should return 2 unique_paths_with_obstacles([ [0, 1], [0, 0] ]) # should return 1 ``` Constraints - The dimensions of the grid (m and n) will be between 1 and 100. - The robot cannot move out of the grid boundaries. - If the starting or ending cell is blocked, return 0.","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of the grid, avoiding obstacles. m, n = len(grid), len(grid[0]) # If the starting or ending cell is blocked, return 0 if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Initialize a 2D dp array with 0\'s dp = [[0] * n for _ in range(m)] # Starting point dp[0][0] = 1 # Fill dp array for i in range(m): for j in range(n): if grid[i][j] == 1: # If it\'s an obstacle, continue continue if i > 0: # Check from top dp[i][j] += dp[i-1][j] if j > 0: # Check from left dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Consider a matrix of dimensions M x N filled with non-negative integers. You need to write a function to find a path from the top-left corner to the bottom-right corner which minimizes the sum of all numbers along its path. You can only move to the right or down from a given cell. -----Input:----- - The first line contains two integers M and N, denoting the number of rows and columns of the matrix. - The next M lines contain N integers each, representing the matrix. -----Output:----- Print a single integer, the minimum path sum from the top-left to the bottom-right corner. -----Constraints----- - 1 leq M, N leq 100 - 0 leq matrix[i][j] leq 100 -----Sample Input:----- 3 3 1 3 1 1 5 1 4 2 1 -----Sample Output:----- 7 -----EXPLANATION:----- - The path 1 → 3 → 1 → 1 → 1 minimizes the sum of the path, resulting in 7.","solution":"def min_path_sum(matrix): Given an M x N matrix filled with non-negative integers, find a path from the top-left corner to the bottom-right corner which minimizes the sum of all numbers along its path. You can only move to the right or down from a given cell. if not matrix or not matrix[0]: return 0 M, N = len(matrix), len(matrix[0]) dp = [[0]*N for _ in range(M)] dp[0][0] = matrix[0][0] for i in range(1, M): dp[i][0] = dp[i-1][0] + matrix[i][0] for j in range(1, N): dp[0][j] = dp[0][j-1] + matrix[0][j] for i in range(1, M): for j in range(1, N): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[M-1][N-1]"},{"question":"Write a function `findMedianOfSortedArrays` that finds the median of two sorted arrays of integers. The function should take two arrays `arr1` and `arr2` as inputs and return the median of the combined sorted array. Requirements: 1. The time complexity should be O(log(min(n, m))), where `n` and `m` are the lengths of the arrays `arr1` and `arr2` respectively. 2. You may assume that both arrays have lengths greater than 0. 3. The function should handle both odd and even number of elements in the combined sorted array. For example: ```python arr1 = [1, 3] arr2 = [2] findMedianOfSortedArrays(arr1, arr2) # Should return 2.0 because the combined array is [1, 2, 3] and the median is 2. arr1 = [1, 2] arr2 = [3, 4] findMedianOfSortedArrays(arr1, arr2) # Should return 2.5 because the combined array is [1, 2, 3, 4] and the median is (2 + 3) / 2 = 2.5 ``` Note: - You cannot use Python’s built-in `sorted()` function or any other built-in sort functions. - Think about splitting the problem into smaller sub-problems and how binary search can be utilized to achieve the desired time complexity.","solution":"def findMedianOfSortedArrays(arr1, arr2): Finds the median of the two sorted arrays combined. Parameters: arr1 (list[int]): A sorted list of integers. arr2 (list[int]): A sorted list of integers. Returns: float: The median of the two sorted arrays combined. if len(arr1) > len(arr2): arr1, arr2 = arr2, arr1 x, y = len(arr1), len(arr2) low, high = 0, x while low <= high: partitionX = (low + high) // 2 partitionY = (x + y + 1) // 2 - partitionX maxX = float(\'-inf\') if partitionX == 0 else arr1[partitionX - 1] minX = float(\'inf\') if partitionX == x else arr1[partitionX] maxY = float(\'-inf\') if partitionY == 0 else arr2[partitionY - 1] minY = float(\'inf\') if partitionY == y else arr2[partitionY] if maxX <= minY and maxY <= minX: if (x + y) % 2 == 0: return (max(maxX, maxY) + min(minX, minY)) / 2 else: return max(maxX, maxY) elif maxX > minY: high = partitionX - 1 else: low = partitionX + 1"},{"question":"Given an array of integers, write a function that returns the array sorted in ascending order but with the additional constraint that all zeros must be placed at the end of the array, while maintaining the order of the non-zero elements. For example, given the array `[4, 0, 1, 0, 3, 12]`, the function should return `[4, 1, 3, 12, 0, 0]`.","solution":"def sort_and_move_zeros(arr): Returns the array sorted in ascending order with all zeros placed at the end while maintaining the order of the non-zero elements. non_zero_elements = [x for x in arr if x != 0] zero_count = arr.count(0) return non_zero_elements + [0] * zero_count"},{"question":"Alice has a string of lowercase letters, and she wants to split it into a list of substrings such that each letter appears in at most one substring. Write a function that computes the smallest possible number of substrings in such a way. For example, if the string is \\"abac\\", then it can be split into substrings [\\"ab\\", \\"ac\\"] ensuring each letter appears in at most one substring. ``` Input: A string S consisting of lowercase letters. Output: An integer representing the minimum number of substrings needed. Constraints: - The length of the string S is between 1 and 100000. - The string contains only lowercase alphabets (a-z). Sample Input: abac Sample Output: 2 ```","solution":"def min_substrings(S): Returns the minimum number of substrings needed such that each letter appears in at most one substring. last_occurrence = {char: idx for idx, char in enumerate(S)} num_substrings = 0 end = -1 for idx, char in enumerate(S): end = max(end, last_occurrence[char]) if idx == end: num_substrings += 1 return num_substrings"},{"question":"Define a function that takes a string representing a mathematical expression containing only non-negative numbers and the operators +, -, *, /. The function should evaluate this expression and return the result as a float. The input string will not have any spaces, and the operations should follow the typical order of operations (PEMDAS). ```python evaluate_expression(\\"3+5*2/2-1\\") == 7.0 evaluate_expression(\\"10+2*6\\") == 22.0 evaluate_expression(\\"100*2+12\\") == 212.0 evaluate_expression(\\"100*(2+12)/4\\") == 350.0 evaluate_expression(\\"3+5/2\\") == 5.5 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative numbers and the operators +, -, *, /. The expression is evaluated with the typical order of operations (PEMDAS). # Using Python\'s eval function with some safeguards allowed_chars = set(\\"0123456789+-*/().\\") if not all(char in allowed_chars for char in expression): raise ValueError(\\"Invalid character in expression\\") result = eval(expression) return float(result)"},{"question":"A company manages a warehouse that contains various items. The warehouse is represented as a 2D grid of cells with dimensions (N times M). Each cell can either be empty, contain a package, or be inaccessible due to an obstacle. The company wants to improve its package retrieval process by implementing a system that can determine the minimum number of moves required to retrieve all packages from the warehouse. For each retrieval request, your task is to compute the shortest path from a given start cell to the nearest cell containing a package. Note that the retrieval can be done by moving one step up, down, left, or right, but not diagonally. -----Input Format:------ - First line contains (T), the number of test cases. - For each test case: - The first line contains two space-separated integers (N) and (M). - The second line contains a single integer (P) denoting the number of cells containing packages, followed by (P) lines containing two space-separated integers (p_i) and (q_i) denoting the row and column positions of each package cell. - The third line contains a single integer (O) denoting the number of cells that are obstacles, followed by (O) lines containing two space-separated integers (u_i) and (v_i) denoting the row and column positions of each obstacle cell. - The fourth line contains two space-separated integers (s_p) and (s_q) denoting the row and column position of the starting cell. -----Constraints:------ - (1 leq T leq 100) - (1 leq N, M leq 200) - (1 leq P < N times M) - (0 leq O < (N times M) - P) - (1 leq p_i, u_j leq N), for every (1 leq i leq P) and (1 leq j leq O) - (1 leq q_i, v_j leq M), for every (1 leq i leq P) and (1 leq j leq O) - Start cell is never an obstacle. -----Output Format:------ For each test case, print the shortest path length from the starting cell to the nearest package. If a package cannot be reached, print (-1). -----Sample Input----- 1 4 4 2 2 2 4 4 3 1 2 2 3 3 1 1 1 -----Sample Output----- 2 -----Explanation:----- - The packages are located at (2,2) and (4,4). - The obstacles are located at (1,2), (2,3), and (3,1). - The starting cell is (1,1). - The shortest path from the starting cell (1,1) to the nearest package (2,2) is of length 2.","solution":"from collections import deque def min_moves_to_nearest_package(N, M, packages, obstacles, start): # Initialize the grid grid = [[0] * M for _ in range(N)] # Mark the obstacles in the grid for u, v in obstacles: grid[u-1][v-1] = -1 # Mark the packages in the grid package_set = set() for p, q in packages: package_set.add((p-1, q-1)) # If start is on a package return 0 immediately if (start[0]-1, start[1]-1) in package_set: return 0 # Directions for navigating up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(start[0]-1, start[1]-1, 0)]) # (row, col, distance) visited = set() visited.add((start[0]-1, start[1]-1)) while queue: r, c, dist = queue.popleft() # Explore all directions for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and (nr, nc) not in visited and grid[nr][nc] != -1: if (nr, nc) in package_set: return dist + 1 queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) # Return -1 if no package is reachable return -1 def package_retrieval(T, test_cases): results = [] for case in test_cases: N, M, P, package_positions, O, obstacle_positions, start = case result = min_moves_to_nearest_package(N, M, package_positions, obstacle_positions, start) results.append(result) return results # Example usage: if __name__ == \\"__main__\\": T = 1 test_cases = [ (4, 4, 2, [(2, 2), (4, 4)], 3, [(1, 2), (2, 3), (3, 1)], (1, 1)) ] print(package_retrieval(T, test_cases)) # Output: [2]"},{"question":"You are tasked with developing a library for basic arithmetic operations that maintain a history of all calculations performed. Implement a `Calculator` class in Python with the following requirements: 1. **Addition (`add`)**: Takes two numbers and returns their sum. 2. **Subtraction (`subtract`)**: Takes two numbers and returns their difference. 3. **Multiplication (`multiply`)**: Takes two numbers and returns their product. 4. **Division (`divide`)**: Takes two numbers and returns their quotient. Ensure proper handling for division by zero by raising an exception with an appropriate message. 5. **History (`get_history`)**: Returns a list of strings, each describing a performed operation and its result in the format: `\\"<operation>: <operand1> <operator> <operand2> = <result>\\"`. For example: ```python calc = Calculator() calc.add(4, 5) # Should return 9 calc.subtract(10, 3) # Should return 7 calc.multiply(2, 3) # Should return 6 calc.divide(8, 4) # Should return 2 calc.divide(8, 0) # Should raise an exception calc.get_history() # Should return: # [\\"4 + 5 = 9\\", \\"10 - 3 = 7\\", \\"2 * 3 = 6\\", \\"8 / 4 = 2\\"] ``` Ensure to: - Maintain the order of operations as they were performed in the history. - Write a comprehensive test suite to validate the behavior and edge cases of your `Calculator` class.","solution":"class Calculator: def __init__(self): self.history = [] def add(self, a, b): result = a + b self.history.append(f\\"{a} + {b} = {result}\\") return result def subtract(self, a, b): result = a - b self.history.append(f\\"{a} - {b} = {result}\\") return result def multiply(self, a, b): result = a * b self.history.append(f\\"{a} * {b} = {result}\\") return result def divide(self, a, b): if b == 0: raise ValueError(\\"Cannot divide by zero\\") result = a / b self.history.append(f\\"{a} / {b} = {result}\\") return result def get_history(self): return self.history"},{"question":"You are given a string `s` of length `n` consisting of lowercase English letters, and `q` queries. Each query is given in the form (l, r) and you need to determine if the substring `s[l:r]` matches any of the given patterns. A pattern is defined by a sequence of lowercase English letters, where each letter must follow the same order but may skip characters in between. For instance, the pattern \\"abc\\" matches the substrings \\"abc\\", \\"aXbYc\\", \\"aXYbZc\\", etc., where X, Y, Z represent any number of characters in between, but not \\"acb\\" since the order `b` after `a` matters. -----Input----- The first line contains two integers `n` and `q` (`1 ≤ n, q ≤ 100,000`) - the length of the string `s` and the number of queries. The second line contains the string `s` consisting of lowercase English letters. The third line contains an integer `p` (`1 ≤ p ≤ 20`), the number of patterns. The next `p` lines each contain a pattern, which is a non-empty string of lowercase English letters of length at most 10. The following `q` lines contain two integers `l` and `r` (`1 ≤ l ≤ r ≤ n`), the boundaries of each query. -----Output----- Output `q` lines. For each query, print \\"YES\\" if any pattern matches the substring `s[l:r]`, otherwise print \\"NO\\". -----Examples----- Input 15 3 abcdefghijklmno 2 abc kmo 1 5 4 8 6 10 Output YES YES NO -----Explanation----- In the first example, the substring `s[1:5]` is \\"abcde\\", which contains the pattern `abc`. In the second example, the substring `s[4:8]` is \\"defgh\\", which contains the pattern `defg` implicitly, but since patterns must match exactly, it can be within \\"aXbYc\\", hence \\"kmo\\" is considered. In the third example, the substring `s[6:10]` is \\"fghij\\", which does not match either of the patterns \\"abc\\" or \\"kmo\\".","solution":"def is_pattern_in_substring(s, patterns, l, r): Determines if any of the patterns match the substring s[l:r]. :param s: The original string :param patterns: List of patterns :param l: Start index (1-indexed) :param r: End index (1-indexed) :return: \\"YES\\" if any pattern matches the substring, \\"NO\\" otherwise substring = s[l-1:r] for pattern in patterns: idx = 0 for char in substring: if char == pattern[idx]: idx += 1 if idx == len(pattern): return \\"YES\\" return \\"NO\\" def process_queries(n, q, s, p, patterns, queries): Processes multiple queries. :param n: Length of the string :param q: Number of queries :param s: The original string :param p: Number of patterns :param patterns: List of patterns :param queries: List of queries, each query is a tuple (l, r) :return: List of results for each query results = [] for l, r in queries: results.append(is_pattern_in_substring(s, patterns, l, r)) return results"},{"question":"In a remote island, there are several villages represented as nodes in a graph. The roads connecting these villages are bidirectional and represented as edges in the graph. Each road has a different distance. The villagers want to be able to travel between any two villages with the shortest possible distance. You are tasked with finding the minimum cost to connect all the villages so that every village can be reached from any other village. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase consists of two integers V and E, the number of villages (nodes) and the number of roads (edges) respectively. - Each of the next E lines contains three integers u, v, and w, where u and v are villages connected by a road, and w is the distance of that road. -----Output:----- For each testcase, output in a single line the minimum cost required to connect all villages. -----Constraints:----- 1 leq T leq 5 1 leq V leq 1000 0 leq E leq V * (V - 1) / 2 1 leq w leq 1000 -----Sample Input:----- 2 4 5 1 2 1 1 3 4 1 4 3 2 3 2 3 4 5 3 3 1 2 2 2 3 3 1 3 1 -----Sample Output:----- 6 3 -----EXPLANATION:----- For the first testcase, the villages and roads form a graph. The minimum cost to connect all villages is through the roads with distances 1, 2, and 3, totaling 6. For the second testcase, the optimal way to connect the villages is by including the roads with distances 1 and 2, totaling 3.","solution":"def find_min_cost_to_connect_villages(testcases): def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 results = [] for testcase in testcases: V, E, edges = testcase edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(V): parent.append(node) rank.append(0) result = [] e = 0 i = 0 while e < V - 1 and i < len(edges): u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) minimum_cost = sum([w for u, v, w in result]) results.append(minimum_cost) return results # Reading input def parse_input(input_string): data = input_string.strip().split(\'n\') T = int(data[0]) testcases = [] index = 1 for _ in range(T): V, E = map(int, data[index].split()) edges = [] for _ in range(E): index += 1 u, v, w = map(int, data[index].split()) edges.append((u, v, w)) testcases.append((V, E, edges)) index += 1 return testcases def main(input_string): testcases = parse_input(input_string) results = find_min_cost_to_connect_villages(testcases) result_string = \\"n\\".join(map(str, results)) return result_string"},{"question":"Task Design a system to track voting data from a set number of precincts in a local election. Introduction In certain local elections, it\'s crucial to accurately track and report the vote counts from various precincts. This ensures transparency and accuracy in the election results. You are tasked with creating a system that processes voting data from multiple precincts and returns the total vote count for each candidate. Task You will receive a list of vote counts from different precincts. Each precinct’s vote count is represented as a dictionary, where keys are candidate names and values are the number of votes received by the candidate in that precinct. Your task is to: 1. Combine the vote counts from all precincts. 2. Return a dictionary where the keys are candidate names and the values are their total vote counts across all precincts. Function Signature ```python def tally_votes(precincts: List[Dict[str, int]]) -> Dict[str, int]: pass ``` Input - `precincts` (List[Dict[str, int]]): A list where each element is a dictionary containing candidate names as keys and their respective vote counts as values. Output - A dictionary containing the total vote counts for each candidate. Examples ```python precincts = [ {\\"John Doe\\": 120, \\"Jane Smith\\": 90, \\"Jim Brown\\": 40}, {\\"John Doe\\": 100, \\"Jane Smith\\": 85, \\"Jim Brown\\": 42}, {\\"John Doe\\": 130, \\"Jane Smith\\": 95, \\"Jim Brown\\": 48} ] # Output should be: {\\"John Doe\\": 350, \\"Jane Smith\\": 270, \\"Jim Brown\\": 130} print(tally_votes(precincts)) precincts = [ {\\"Alice\\": 50, \\"Bob\\": 75}, {\\"Alice\\": 60, \\"Bob\\": 55}, {\\"Alice\\": 65, \\"Bob\\": 85} ] # Output should be: {\\"Alice\\": 175, \\"Bob\\": 215} print(tally_votes(precincts)) ``` Notes - Assume all dictionaries in the `precincts` list contain the same candidates, hence no candidate will appear in one dictionary and be absent in another. - The number of precincts can vary but there will always be at least one precinct.","solution":"from typing import List, Dict def tally_votes(precincts: List[Dict[str, int]]) -> Dict[str, int]: Takes a list of vote counts from different precincts and returns the total vote count for each candidate. total_votes = {} for precinct in precincts: for candidate, votes in precinct.items(): if candidate in total_votes: total_votes[candidate] += votes else: total_votes[candidate] = votes return total_votes"},{"question":"Task: Given a mapping of digits to letters (similar to the telephone buttons), and a digit string, return all possible letter combinations that the number could represent. The mapping is given as follows: ``` 2 -> \\"abc\\" 3 -> \\"def\\" 4 -> \\"ghi\\" 5 -> \\"jkl\\" 6 -> \\"mno\\" 7 -> \\"pqrs\\" 8 -> \\"tuv\\" 9 -> \\"wxyz\\" ``` Note that 1 does not map to any letters. # Example: ``` Example1: Input: \\"23\\" Output: [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] Example2: Input: \\"\\" Output: [] Example3: Input: \\"2\\" Output: [\\"a\\", \\"b\\", \\"c\\"] ``` # Your Task: Write a function `letter_combinations(digits: str) -> List[str]` that takes the input string of digits and outputs a list of all possible letter combinations. # Constraints: * The input string will only contain digits from 2-9. * The length of the input string is between 0 and 4. * The order of the output does not matter.","solution":"from typing import List def letter_combinations(digits: str) -> List[str]: Given a string containing digits from 2-9, returns all possible letter combinations that the number could represent. if not digits: return [] digit_to_letters = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } def backtrack(index, path): if index == len(digits): combinations.append(\\"\\".join(path)) return for letter in digit_to_letters[digits[index]]: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return combinations"},{"question":"Given an integer array `arr`, you need to find the length of the shortest subarray that, if sorted, would result in the entire array being sorted. If the array is already sorted, return 0. Function Signature ```python def find_unsorted_subarray(arr: List[int]) -> int: ``` Input - A list of integers `arr` with length `n` where `1 <= n <= 10^5`. Output - An integer which is the length of the shortest subarray that, if sorted, would result in the entire array being sorted. If the array is already sorted, return 0. Examples ```python find_unsorted_subarray([2, 6, 4, 8, 10, 9, 15]) # 5 find_unsorted_subarray([1, 2, 3, 4]) # 0 find_unsorted_subarray([1, 3, 2, 2, 2]) # 4 find_unsorted_subarray([2, 1]) # 2 ``` Explanation In the first example, sorting the subarray `[6, 4, 8, 10, 9]` would make the entire array sorted, and its length is 5. In the second example, the array is already sorted, so the result is 0. In the third example, sorting the subarray `[3, 2, 2, 2]` would make the entire array sorted, and its length is 4. In the fourth example, sorting the subarray `[2, 1]` would make the entire array sorted, and its length is 2.","solution":"def find_unsorted_subarray(arr): Finds the length of the shortest subarray that, if sorted, would result in the entire array being sorted. If the array is already sorted, returns 0. :param arr: List[int] - The input array of integers :return: int - Length of the shortest subarray to be sorted if not arr or len(arr) <= 1: return 0 n = len(arr) start, end = 0, -1 min_seen, max_seen = float(\'inf\'), float(\'-inf\') for i in range(n): max_seen = max(max_seen, arr[i]) if arr[i] < max_seen: end = i for i in range(n - 1, -1, -1): min_seen = min(min_seen, arr[i]) if arr[i] > min_seen: start = i return 0 if end == -1 else end - start + 1"},{"question":"A zero-indexed array A consisting of N numbers is given. A subarray of that array is any pair of integers (P, Q) such that 0 A subarray (P, Q) of array A is called geometric if the sequence: A[P], A[P + 1], ..., A[Q - 1], A[Q] is geometric. This means there exists a constant ratio R such that A[i+1] = A[i] * R for all P <= i < Q. The function should return the number of geometric subarrays in the array A. For example: A = [2, 4, 8, 16] return: 3, for 3 geometric subarrays in A: [2, 4, 8], [4, 8, 16] and [2, 4, 8, 16] itself.","solution":"def count_geometric_subarrays(A): Returns the number of geometric subarrays in array A. n = len(A) if n < 3: return 0 count = 0 for i in range(n): for j in range(i + 1, n): ratio = A[j] / A[i] k = j + 1 while k < n and A[k] / A[k - 1] == ratio: count += 1 k += 1 return count"},{"question":"During pandemic time, Chef is spending a lot of time with his son, and they both enjoy playing with numbers. One day, Chef decided to engage his son with a fun task involving prime numbers. Chef gives his son an integer array of size N and asks him to find all unique prime numbers in the array. Once the unique prime numbers are identified, Chef\'s son needs to calculate and output the sum of these unique prime numbers. Help Chef\'s son to complete this task efficiently. -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains a single integer N, the size of the array. - The second line contains N space-separated integers that form the array. -----Output:----- For each test case, print a single line containing the sum of all unique prime numbers in the array. If no prime numbers are found, output 0. -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq Array elements leq 10^6 -----Sample Input:----- 2 6 2 3 4 5 6 7 5 10 14 15 20 22 -----Sample Output:----- 17 0 -----Explanation:----- For the first test case, the unique prime numbers in the array are 2, 3, 5, and 7. Their sum is 2 + 3 + 5 + 7 = 17. For the second test case, there are no prime numbers in the array, so the output is 0.","solution":"def is_prime(n): Checks if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_unique_primes(test_cases): For each test case, returns the sum of all unique prime numbers in the array. results = [] for case in test_cases: N, array = case primes = set() for num in array: if is_prime(num): primes.add(num) results.append(sum(primes)) return results"},{"question":"A park has multiple paths. A path is represented as a connected segment with a starting point, an end point, and a length. For maintenance scheduling, the maintenance workers want to determine how many paths overlap at any point along the park. You are given a list of paths, where each path is described by its starting point and its ending point. Write a function to find the maximum number of overlapping paths at any point along the park. -----Input----- The first line contains an integer n (1 leq n leq 10^5): the number of paths. The next n lines each contain two integers l_i and r_i (1 leq l_i leq r_i leq 10^9): the starting and ending points of each path. -----Output----- Output one integer: the maximum number of overlapping paths. -----Examples----- Input 3 1 5 2 6 4 8 Output 3 Input 4 1 3 2 5 6 8 9 10 Output 2 -----Note----- For the first test case, the paths [1, 5], [2, 6], and [4, 8] all overlap between points 4 and 5, resulting in a maximum overlap of 3 paths. For the second test case, the paths [1, 3] and [2, 5] overlap between points 2 and 3, and paths [6, 8] and [9, 10] do not overlap with any others simultaneously, so the maximum overlap at any point is 2.","solution":"def max_overlapping_paths(n, paths): events = [] for l, r in paths: events.append((l, \'start\')) events.append((r, \'end\')) events.sort(key=lambda x: (x[0], x[1] == \'end\')) max_overlap = 0 current_overlap = 0 for event in events: if event[1] == \'start\': current_overlap += 1 max_overlap = max(max_overlap, current_overlap) else: current_overlap -= 1 return max_overlap"},{"question":"Claire\'s circus act involves juggling with colorful balls. Each ball is coded with a unique capital letter. She wants to create sequences of her juggling patterns where each sequence wraps around and mirrors itself, forming a perfect symmetry. The sequence should look the same backward as it does forward. For example: Pattern \'\'AABA\'\' is symmetrical because it\'s the same forwards and backwards. Write a function that takes in a string of uppercase letters, representing the juggling pattern, and determines whether Claire\'s sequence wraps around perfectly symmetrically. Write a function `is_symmetric_pattern(pattern: str) -> bool` that returns `True` if the sequence is symmetrical, otherwise returns `False`. # Example * `is_symmetric_pattern(\\"ABBBA\\")` should return `True` * `is_symmetric_pattern(\\"ABCDDCBA\\")` should return `True` * `is_symmetric_pattern(\\"ABCDEF\\")` should return `False`","solution":"def is_symmetric_pattern(pattern: str) -> bool: Returns True if the input pattern is symmetrical (same forwards and backwards), otherwise returns False. return pattern == pattern[::-1]"},{"question":"You are given an array of integers and a target sum. Your task is to find two distinct integers in the array that add up to the target sum and return their indices as a tuple (index1, index2). If there are multiple pairs, return any one of them. If no such pair exists, return an empty tuple. **Note:** - Indices must be zero-based. - The same element cannot be used twice. - Assume there will be no duplicate integers in the array. **Examples:** ```python array = [2, 7, 11, 15] target = 9 # Explanation: 2 + 7 = 9; Hence, the function should return (0, 1) array = [3, 2, 4] target = 6 # Explanation: 2 + 4 = 6; Hence, the function should return (1, 2) array = [1, 5, 3] target = 10 # Explanation: No two numbers add up to 10; Hence, the function should return () ```","solution":"def find_two_sum(nums, target): Returns indices of the two distinct integers in nums that add up to target. Parameters: nums (List[int]): The list of integers. target (int): The target sum. Returns: Tuple: Indices of the two integers adding up to target, or an empty tuple if no such pair exists. num_indices = {} for i, num in enumerate(nums): complement = target - num if complement in num_indices: return (num_indices[complement], i) num_indices[num] = i return ()"},{"question":"-----Optimizing Delivery Routes----- A local delivery company needs to optimize their delivery routes to ensure prompt service. They have a network of delivery hubs, and each hub is connected to several other hubs via bidirectional roads. Each road has a specific travel time associated with it. The company wants to determine the minimum time required to travel between any pair of delivery hubs considering the direct and indirect routes available. Management also wants to know how the travel times will change if one specific road is shut down for maintenance. You are tasked with providing the minimum travel time between any two hubs when any single road is removed from the network, while maintaining the shortest paths between all other pairs of hubs. For example, consider a network that consists of four hubs {1, 2, 3, 4}. The travel times between hubs are as follows: - {1, 2} = 5 minutes - {1, 3} = 10 minutes - {2, 3} = 3 minutes - {2, 4} = 7 minutes - {3, 4} = 1 minute If the connection {2, 4} were to be shut down, the travel time between hub 1 and hub 4 would be recalculated through other possible routes. # Input Format: - Line 1: Two space-separated integers, H and R. H is the number of hubs in the network, numbered 1, 2, ..., H. R is the number of bidirectional roads. - Lines 2 to R+1: Each line describes one road between a pair of hubs, consisting of three integers, x, y, and t, where x and y are the two hubs connected by this road and t is the travel time in minutes. # Output Format: - The output consists of H lines. Each line i (1 ≤ i ≤ H) should contain two space-separated integers representing the minimum travel time between the hub 1 and the i-th hub if one specific road is removed. # Constraints: - 2 ≤ H ≤ 200 (number of hubs) - 1 ≤ R ≤ 10,000 (number of roads) - 1 ≤ t ≤ 1,000 (travel time in minutes) - It is guaranteed that the network is initially connected, and that there is no more than one road directly connecting any pair of hubs. # Sample Input: 5 6 1 2 5 1 3 10 2 3 3 2 4 7 3 4 1 3 5 6 # Sample Output: 0 5 8 12 14 (after any road maintenance) Note: Your program should not print anything other than what is specified in the output format. Ensure to remove all diagnostic print statements before making your final submission.","solution":"import heapq def dijkstra(n, graph, start): dist = [float(\\"inf\\")] * (n + 1) dist[start] = 0 pq = [(0, start)] while pq: d, node = heapq.heappop(pq) if d > dist[node]: continue for neib, w in graph[node]: new_dist = d + w if new_dist < dist[neib]: dist[neib] = new_dist heapq.heappush(pq, (new_dist, neib)) return dist def floyd_warshall(n, graph): dist = [[float(\'inf\')] * (n + 1) for _ in range(n + 1)] for hub in range(1, n + 1): dist[hub][hub] = 0 for u in range(1, n + 1): for v, w in graph[u]: dist[u][v] = w dist[v][u] = w for k in range(1, n + 1): for i in range(1, n + 1): for j in range(1, n + 1): dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) return dist def read_input(): import sys input = sys.stdin.read data = input().split() H = int(data[0]) R = int(data[1]) graph = [[] for _ in range(H + 1)] index = 2 edges = [] for _ in range(R): x = int(data[index]) y = int(data[index + 1]) t = int(data[index + 2]) graph[x].append((y, t)) graph[y].append((x, t)) edges.append((x, y, t)) index += 3 return H, graph, edges def main(): H, graph, edges = read_input() original_dist = floyd_warshall(H, graph) result = [original_dist[1][i] for i in range(1, H + 1)] for u, v, w in edges: current_graph = [[] for _ in range(H + 1)] for x in range(1, H + 1): for y, wt in graph[x]: if (x == u and y == v and wt == w) or (x == v and y == u and wt == w): continue current_graph[x].append((y, wt)) new_dist = dijkstra(H, current_graph, 1) for i in range(1, H + 1): result[i - 1] = min(result[i - 1], new_dist[i]) print(\\" \\".join(map(str, result))) if __name__ == \\"__main__\\": main()"},{"question":"A well-known explorer, Lara, has discovered an ancient artifact that contains a coded message. The message is hidden within a sequence of numbers, carved into the artifact in a peculiar way. To decipher it, Lara needs to identify a specific pattern in the sequence. Lara knows that the sequence contains N numbers, and the pattern she needs to find must be a subsequence of three distinct numbers that form an increasing order. Can you help Lara determine whether such a subsequence exists in the given sequence? -----Input:----- - The first line contains a single integer T, representing the number of test cases. T lines follow. - Each test case contains two lines: - The first line contains a single integer N, the length of the sequence. - The second line contains N space-separated integers, A_1, A_2, ldots, A_N, representing the numbers carved on the artifact. -----Output:----- For each test case, print \\"YES\\" if there exists a subsequence of three distinct numbers in A such that they are in increasing order, otherwise print \\"NO\\". -----Constraints----- - 1 leq T leq 1000 - 1 leq N leq 100000 - 1 leq A_i leq 100000 for all A_i -----Subtasks----- Subtask 1 [20 points] : N leq 3 Subtask 2 [30 points] : N leq 1000 Subtask 3 [50 points] : No additional constraints -----Sample Input:----- 2 5 1 2 3 4 5 4 5 4 3 2 -----Sample Output:----- YES NO -----Explanation:----- In the first sample, the numbers are [1, 2, 3, 4, 5]. The subsequence [1, 2, 3] (among others) is in increasing order. In the second sample, the numbers are [5, 4, 3, 2]. There is no increasing subsequence of three distinct numbers, so the answer is \\"NO\\".","solution":"def has_increasing_triplet(T, test_cases): results = [] for i in range(T): N, A = test_cases[i] if N < 3: results.append(\\"NO\\") continue first = float(\'inf\') second = float(\'inf\') for number in A: if number <= first: first = number elif number <= second: second = number else: results.append(\\"YES\\") break else: results.append(\\"NO\\") return results"},{"question":"# Description You have been given a set of n strings where each string consists of only lowercase English letters. Your task is to find the longest common prefix shared among all strings in the set. The function `longest_common_prefix` takes an array of strings as input and should return a string representing the longest common prefix. If there is no common prefix, it should return an empty string. Criteria - The function will always receive a valid input: an array containing between `1` and `1000` strings, and each string will have a length between `1` and `1000` characters. - The function should return a single string which is the longest common prefix. - If no common prefix exists, return an empty string. # Examples ```python assert longest_common_prefix([\\"flower\\", \\"flow\\", \\"flight\\"]) == \\"fl\\" assert longest_common_prefix([\\"dog\\", \\"racecar\\", \\"car\\"]) == \\"\\" assert longest_common_prefix([\\"interspecies\\", \\"interstellar\\", \\"interstate\\"]) == \\"inters\\" assert longest_common_prefix([\\"throne\\", \\"throne\\"]) == \\"throne\\" ```","solution":"def longest_common_prefix(strs): Returns the longest common prefix among all strings in strs. If no common prefix exists, returns an empty string. if not strs: return \\"\\" # Start with the first string in the list as the prefix prefix = strs[0] # Compare the prefix with each string in the list for string in strs[1:]: while string[:len(prefix)] != prefix and prefix: # Reduce the prefix length by one prefix = prefix[:-1] return prefix"},{"question":"Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. The LCA is defined as the lowest node in the tree that has both given nodes as descendants (where we allow a node to be a descendant of itself). Implement the function `lowestCommonAncestor(root, p, q)` which takes as input the root of the binary tree and the two nodes `p` and `q`, and returns the LCA of the two nodes. You may assume that all TreeNode values are unique and that both `p` and `q` are contained in the tree. # Example ``` Given the following binary tree: 3 / 5 1 / / 6 2 0 8 / 7 4 lowestCommonAncestor(root, 5, 1) returns 3. lowestCommonAncestor(root, 6, 4) returns 5. lowestCommonAncestor(root, 5, 4) returns 5. ``` # Function Signature ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode: pass ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode: def recurse_tree(current_node): if not current_node: return None # If the current node is p or q if current_node == p or current_node == q: return current_node # Recurse on the left and right children left = recurse_tree(current_node.left) right = recurse_tree(current_node.right) # If both left and right return not-null, this node is the LCA if left and right: return current_node # Otherwise return the non-null child (could be null if both are null) return left if left else right return recurse_tree(root)"},{"question":"You are given a list of integers called `nums` and an integer `k`. Your task is to determine the longest contiguous subarray such that the absolute difference between the maximum and minimum element in that subarray is less than or equal to `k`. Example Input: ``` nums = [10, 1, 2, 4, 7, 2] k = 5 ``` Output: ``` 4 ``` Explanation: - The longest subarray with all absolute differences ≤ k is `[2, 4, 7, 2]` which has a length of 4. The task Write a function `longest_subarray(nums, k)` that returns the length of the longest contiguous subarray with the properties described above. Constraints - `1 ≤ len(nums) ≤ 10^5` - `0 ≤ nums[i] ≤ 10^9` - `0 ≤ k ≤ 10^9` **Additional Information**: Consider optimizing your solution for large inputs to ensure it runs efficiently within the allowed time limits.","solution":"def longest_subarray(nums, k): from collections import deque max_deque = deque() # Monotonically decreasing deque to keep track of max elements min_deque = deque() # Monotonically increasing deque to keep track of min elements left = 0 longest = 0 for right in range(len(nums)): # Maintain max deque while max_deque and nums[max_deque[-1]] <= nums[right]: max_deque.pop() max_deque.append(right) # Maintain min deque while min_deque and nums[min_deque[-1]] >= nums[right]: min_deque.pop() min_deque.append(right) # If the difference between the max and min elements in the current window is greater than k while nums[max_deque[0]] - nums[min_deque[0]] > k: left += 1 if max_deque[0] < left: max_deque.popleft() if min_deque[0] < left: min_deque.popleft() # Calculate the current window length and update the longest length longest = max(longest, right - left + 1) return longest"},{"question":"Given an array of N integers, and Q queries, each query asks for the sum of elements that are the maximum in their respective subarray for given bounds [L, R]. The sum could be very large, so you need to return the sum modulo 1e9+7. ----Input:---- - The first line of input contains a single integer T indicating the number of test cases. - For each test case: - The first line has two integers N and Q, separated by a space. - The second line has N space-separated integers, representing the array. - The next Q lines each contain two integers L and R, representing the bounds of the subarray (inclusive, 1-indexed). ----Output:---- For each test case, print the result for each query on a new line. ----Constraints and Subtasks:---- - 1 <= T <= 5 - 1 <= N <= 4000 - 1 <= Q <= 1000000 - 1 <= L <= R <= N - Elements of the array are bounded between 1 and 10^9. Subtask 1: 25 points - T = 1 - 1 <= N <= 100 - 1 <= Q <= 500 Subtask 2: 35 points - 1 <= T <= 3 - 1 <= N <= 1000 - 1 <= Q <= 10000 Subtask 3: 40 points - Original Constraints. ----Example:---- Input: 1 5 3 1 5 3 7 2 1 3 2 4 1 5 Output: 5 7 7 ----Explanation:---- For the first query, the subarray is [1, 5, 3] and the maximum is 5. For the second query, the subarray is [5, 3, 7] and the maximum is 7. For the third query, the subarray is [1, 5, 3, 7, 2] and the maximum is 7.","solution":"MOD = int(1e9 + 7) def process_queries(arr, queries): results = [] for (L, R) in queries: max_val = max(arr[L-1:R]) # We adjust for 1-indexed bounds results.append(max_val % MOD) return results def solve(T, test_cases): result = [] for i in range(T): N, Q = test_cases[i][0] arr = test_cases[i][1] queries = test_cases[i][2] results = process_queries(arr, queries) result.append(results) return result"},{"question":"Your task is to write a function that simulates a simplified version of the game of Nim. In this version, you start with a pile of n stones and take turns with your opponent removing between 1 to 3 stones inclusive from the pile on each turn. The player to remove the last stone wins. You will always go first. Write a function `nim_game(n: int) -> str:` that determines if you will win the game given `n` stones. # Input - An integer `n` (1 ≤ n ≤ 1000) representing the number of stones in the pile. # Output - Return a string \\"You win\\" if you will win the game, and \\"You lose\\" if you will lose the game. # Example Input ```python 3 ``` # Example Output ```python You win ``` # Explanation If you start with 3 stones, you can take all 3 stones on your first turn and win the game. If the number of stones is a multiple of 4, you will always lose if both players play optimally, as the opponent can always force you to take the last stone. For other numbers of stones, you can always force a win.","solution":"def nim_game(n: int) -> str: Determines if the player who goes first will win the Nim game with n stones. Parameters: n (int): The number of stones in the pile Returns: str: \\"You win\\" if the first player can force a win, \\"You lose\\" otherwise if n % 4 == 0: return \\"You lose\\" else: return \\"You win\\""},{"question":"Write a function that takes a list of integers and returns a new list containing only the prime numbers from the input list. ~~~if:python You may use a helper function to determine if a number is prime. Assume the input list can be empty or contain up to 1000 integers. ~~~ ~~~if:bf For BF, the input will be an array of positive integers less than 256, ending with 0. The output should be the prime integers from the input, separated by a space, and ending with 0. ~~~","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(lst): Returns a list of prime numbers from the given list of integers. return [x for x in lst if is_prime(x)]"},{"question":"Task Write a function `reverse_word_order` which takes a string argument `sentence`, and returns a new string with the words in reverse order. Words are defined as sequences of non-space characters separated by spaces. Example Input: ``` \\"I love coding\\" ``` Output: ``` \\"coding love I\\" ``` Assumption The input string will not have leading or trailing spaces, and there will be exactly one space between consecutive words. Notes - Ensure that the words in the output string are separated by a single space. - The order of characters within each word should not change; only the order of words should be reversed.","solution":"def reverse_word_order(sentence): Returns a new string with the words in reverse order. :param sentence: str :return: str words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"You are given two sorted arrays that have been merged together and then rearranged to form one unsorted array. Your task is to find the common elements between the original two sorted arrays. Example 1: Input: [1, 3, 4, 2, 8, 10, 4, 2, 10] Output: [4, 2, 10] Example 2: Input: [6, 5, 8, 7, 4, 6, 2, 9] Output: [6] Note: - The merged array may contain duplicates. - You must ensure the result does not contain duplicate elements. - The order of elements in the output does not matter. - The time complexity should be better than O(n^2). Constraints: - The elements of the array are integers. - The length of the array is between 2 and 10^5.","solution":"def common_elements(arr): Function to find common elements between the original two sorted arrays. Args: arr (List[int]): The merged and shuffled array of two original sorted arrays. Returns: List[int]: List of common elements between the original sorted arrays. from collections import defaultdict # Dictionary to count occurrences of each element count_dict = defaultdict(int) # Count occurrences of each element for num in arr: count_dict[num] += 1 # Find elements that appear more than once result = [num for num in count_dict if count_dict[num] > 1] return result"},{"question":"Create a function called `longest_consecutive_subsequence` that finds the longest consecutive elements sequence from an unsorted list of integers. Specifications: - Implement the function `longest_consecutive_subsequence(arr)` which takes in a list of integers, `arr`. Function Behavior: - The function should return the length of the longest consecutive elements sequence. Example: ```python longest_consecutive_subsequence([100, 4, 200, 1, 3, 2]) # returns 4 (The longest consecutive elements sequence is [1, 2, 3, 4]) ``` ```python longest_consecutive_subsequence([36, 41, 56, 35, 42, 44, 33, 34, 92, 43, 99, 98, 101, 100, 102, 97]) # returns 5 (The longest consecutive elements sequence is [97, 98, 99, 100, 101]) ``` Notes: - The sequence does not need to be in sorted order in the original list. - You can assume that all integers in the list are unique.","solution":"def longest_consecutive_subsequence(arr): Finds the length of the longest consecutive elements sequence in an unsorted list of integers. Parameters: arr (list of int): The list of integers. Returns: int: The length of the longest consecutive elements sequence. if not arr: return 0 num_set = set(arr) max_length = 0 for num in arr: # Check if \'num - 1\' is not in set to find the beginning of a sequence if num - 1 not in num_set: current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"A scientist is conducting an experiment in a laboratory. She needs to mix two types of chemicals stored in two different types of containers. To ensure the safety and effectiveness of the experiment, the combined volume of the two chemicals must not exceed the capacity of a third container. Write a function that, given the volumes of the two chemicals and the capacity of the container, determines whether the chemicals can be combined in the container. ```Python can_combine(volume1, volume2, container_capacity) ``` `volume1` and `volume2` are the volumes of the chemicals, and `container_capacity` is the capacity of the container. # Example ```Python can_combine(100, 150, 300) should return True can_combine(100, 150, 200) should return False can_combine(50, 50, 100) should return True can_combine(60, 70, 120) should return False ```","solution":"def can_combine(volume1, volume2, container_capacity): Determines if the combined volume of two chemicals can fit within the container capacity. Parameters: volume1 (int): Volume of the first chemical. volume2 (int): Volume of the second chemical. container_capacity (int): Capacity of the container. Returns: bool: True if combined volume of volume1 and volume2 does not exceed container_capacity, otherwise False. return volume1 + volume2 <= container_capacity"},{"question":"Create a function that rotates the elements of an array to the right by a given number of steps. For example, given array `[1, 2, 3, 4, 5]` and `k = 2`, the array should be rotated to `[4, 5, 1, 2, 3]`. Your function should handle edge cases where: - The array is empty. - The number of steps `k` is greater than the length of the array. - `k` is zero, in which case the array remains unchanged. Examples: ``` rotate([1, 2, 3, 4, 5], 2) ==> [4, 5, 1, 2, 3] rotate([1, 2, 3, 4, 5], 5) ==> [1, 2, 3, 4, 5] # k is equal to the array length rotate([1, 2, 3, 4, 5], 7) ==> [4, 5, 1, 2, 3] # k is greater than array length rotate([], 3) ==> [] # empty array rotate([1, 2, 3], 0) ==> [1, 2, 3] # k is zero ```","solution":"def rotate(array, k): Rotates the elements of the array to the right by k steps. Handles edge cases where the array is empty, k is zero, and k is greater than the length of the array. if not array: return [] n = len(array) k = k % n # Handle cases where k is greater than array length return array[-k:] + array[:-k]"},{"question":"Write a function `rearrange_cars` that takes in a parking lot represented by a list of integers, where each integer represents a car with a unique identifier (any positive integer) or `-1` representing an empty parking spot. The function should rearrange the parking lot such that all empty spots (if any) are moved to the beginning of the list, and all the cars maintain their original order. The function should return the reorganized parking lot. Requirements 1. The input list can be empty. 2. If there are no empty spots, the list should remain unchanged. 3. The function should handle lists with up to 100000 elements. Examples ```python rearrange_cars([3, 5, -1, 2, -1, 7]) # should return [-1, -1, 3, 5, 2, 7] rearrange_cars([1, 2, 3, 4, 5]) # should return [1, 2, 3, 4, 5] rearrange_cars([-1, -1, -1]) # should return [-1, -1, -1] rearrange_cars([]) # should return [] rearrange_cars([10, -1, 15, -1, 20]) # should return [-1, -1, 10, 15, 20] ``` Input 1. parking_lot: List of Integers (len(parking_lot) <= 100000) Output 1. List of Integers","solution":"def rearrange_cars(parking_lot): Rearranges the parking lot such that all empty spots (-1) are moved to the beginning, and all the cars maintain their original order. Args: parking_lot (list of int): The parking lot to be rearranged. Returns: list of int: The rearranged parking lot. empty_spots = [spot for spot in parking_lot if spot == -1] cars = [car for car in parking_lot if car != -1] return empty_spots + cars"},{"question":"Task You are given a string `s` consisting of lowercase Latin letters. Your task is to determine the length of the shortest substring of `s` that contains all unique characters present in `s`. For example, consider the following string `s = \\"abbcac\\"`. The unique characters in this string are `a`, `b`, and `c`. The shortest substring of `s` that contains all these characters is `\\"bca\\"`, which has a length of 3. Create a function `shortest_substring(s: str) -> int` that takes in a string `s` and returns the length of the shortest substring containing all unique characters from the original string. # Example For `s = \\"abbcac\\"`, the output should be `3`. For `s = \\"abcabcbb\\"`, the output should be `3`. For `s = \\"aabcbcdbca\\"`, the output should be `4`. # Constraints - The input string `s` will have a length of at most (10^4). - The input string `s` will only contain lowercase Latin letters.","solution":"def shortest_substring(s: str) -> int: Returns the length of the shortest substring containing all unique characters from the original string `s`. unique_chars = set(s) required_chars = len(unique_chars) n = len(s) min_length = float(\'inf\') char_count = {} left = 0 num_unique = 0 for right in range(n): if s[right] in char_count: char_count[s[right]] += 1 else: char_count[s[right]] = 1 num_unique += 1 while num_unique == required_chars: min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] num_unique -= 1 left += 1 return min_length"},{"question":"Nina has a collection of strings and she loves palindromes. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Nina wants to find the length of the longest palindromic subsequence that can be formed from any given string. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Given a string s, help Nina determine the length of the longest palindromic subsequence in s. -----Input:----- The first line contains an integer T, denoting the number of test cases. Each of the next T lines contains a single string s of length n (1 ≤ n ≤ 1000). -----Output:----- For each test case, output a single integer denoting the length of the longest palindromic subsequence in s. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ length of s ≤ 1000 -----Sample Input:----- 3 bbbab cbbd abcba -----Sample Output:----- 4 2 5","solution":"def longest_palindromic_subsequence(s): Determines the length of the longest palindromic subsequence in string s. n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n+1): for i in range(n-cl+1): j = i + cl - 1 if s[i] == s[j]: if cl == 2: dp[i][j] = 2 else: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1] def process_test_cases(T, test_cases): results = [] for i in range(T): results.append(longest_palindromic_subsequence(test_cases[i])) return results"},{"question":"# Domain Extractor from Email Address Overview Email addresses often contain domains that can be useful for various purposes such as categorization or validation. A domain in an email address is the part after the \'@\' symbol up to the last dot \'.\'. Task Define two functions, `extractDomain` and `extractDomainsFromList`, that return the domain of a single email address and a list of domains from a list of email addresses respectively. # Function Details 1. `extractDomain(email)`: Takes a string `email` as input and returns the domain as a string. For example, given the email `\\"user@example.com\\"`, the function should return `\\"example.com\\"`. 2. `extractDomainsFromList(emails)`: Takes a list of strings `emails` as input, where each string represents an email address. The function should return a list of domains extracted from each email address in the same order. For example, given the list `[\\"user@example.com\\", \\"admin@domain.org\\"]`, the function should return `[\\"example.com\\", \\"domain.org\\"]`. # Constraints - Email addresses are guaranteed to be valid for the purpose of this task. - The input list in `extractDomainsFromList` can contain 0 or more email addresses (0 ≤ len(emails) ≤ 10^3). # Example ```python # Example usage and expected output email = \\"user@example.com\\" print(extractDomain(email)) # Output: \\"example.com\\" email_list = [\\"john.doe@mail.com\\", \\"alice@example.org\\", \\"bob@yahoo.com\\"] print(extractDomainsFromList(email_list)) # Output: [\\"mail.com\\", \\"example.org\\", \\"yahoo.com\\"] ``` # Notes - You may assume that the local part of the email and the domain part of the email do not contain any \'@\' symbols other than the one separating them. - The functions should handle common domain structures properly.","solution":"def extractDomain(email): Returns the domain part of the email address. Parameters: email (str): The email address from which to extract the domain. Returns: str: The domain part of the email. return email.split(\'@\')[1] def extractDomainsFromList(emails): Returns a list of domains extracted from each email address in the input list. Parameters: emails (list of str): List of email addresses from which to extract the domains. Returns: list of str: List of domains extracted from the email addresses. return [extractDomain(email) for email in emails]"},{"question":"Design a function `detect_fraudulent_activity(transactions, k, t)` to identify fraudulent transactions in a sequence of bank activity. The function takes in a list of integers `transactions`, where each integer represents a transaction amount, a threshold integer `k`, which is the number of consecutive transactions to consider, and an integer `t`, the threshold amount that the cumulative sum of `k` consecutive transactions must reach to be considered fraudulent. - The function should return a list of start indices of each `k` consecutive transactions that meet or exceed the `t` threshold. For example, given transactions = [100, 200, 150, 300, 400] with k = 3 and t = 600, `detect_fraudulent_activity` should return [1, 2], since the sums of transactions [200, 150, 300] and [150, 300, 400] are both at least 600. # Implementation Details: 1. You must handle cases where `k` is larger than the length of the transactions list by returning an empty list. 2. Optimize for time complexity, aiming for O(n) complexity where n is the length of the transactions list. 3. Edge cases such as no transactions should be handled appropriately. # Function Signature ```python def detect_fraudulent_activity(transactions: List[int], k: int, t: int) -> List[int]: pass ``` # Constraints - `1 <= len(transactions) <= 10^6` - `1 <= k <= 1000` - `1 <= t <= 10^9` - Each transaction amount is a positive integer.","solution":"from typing import List def detect_fraudulent_activity(transactions: List[int], k: int, t: int) -> List[int]: Detect start indices of k consecutive transactions that cumulatively reach or exceed the given threshold t. :param transactions: List of transaction amounts :param k: Number of consecutive transactions to consider :param t: Threshold amount for the sum of k consecutive transactions :return: List of starting indices of k consecutive transactions that meet or exceed the threshold if k > len(transactions): return [] result = [] cumulative_sum = sum(transactions[:k]) for i in range(len(transactions) - k + 1): if i > 0: cumulative_sum = cumulative_sum - transactions[i - 1] + transactions[i + k - 1] if cumulative_sum >= t: result.append(i) return result"},{"question":"Cheeky Beaver has a sequence of unique integers `b_1, b_2, ..., b_n`. A subarray is considered valid if it contains at least two elements and every element in the subarray has a difference of `d` with its previous element except for the first one. You are given an integer `d` and several queries, each containing two integers `l` and `r`. For each query, determine if the subarray `b[l], b[l+1], ..., b[r]` is valid according to the above criteria. **Input** The first line contains two integers `n` and `k` (2 leq n leq 200,000, 1 leq k leq 200,000) - the number of integers in the sequence and the number of queries you need to answer. The second line contains `n` space-separated integers `b_1, b_2, ..., b_n` (1 leq b_i leq 10^9) - the given sequence. The third line contains one integer `d` (1 leq d leq 10^9) - the required difference. The next `k` lines contain two integers each. The `i`-th of them contains two space-separated integers `l_i` and `r_i` (1 leq l_i < r_i leq n). You need to check if the subarray from `l_i` to `r_i` is valid. **Output** Output `k` lines. In the `i`-th of them print \\"Valid\\" if the subarray from `l_i` to `r_i` follows the required structure, otherwise print \\"Invalid\\". **Example** Input ``` 5 2 1 3 5 7 9 2 1 3 2 5 ``` Output ``` Valid Valid ``` **Explanation** In the first query, the subarray `[1, 3, 5]` is valid: `3 - 1 = 2` and `5 - 3 = 2`. In the second query, the subarray `[3, 5, 7, 9]` is valid: `5 - 3 = 2`, `7 - 5 = 2`, and `9 - 7 = 2`.","solution":"def check_subarray_validity(b, n, d, queries): def is_valid_subarray(b, l, r, d): for i in range(l, r): if b[i+1] - b[i] != d: return False return True result = [] for l, r in queries: if is_valid_subarray(b, l-1, r-1, d): result.append(\\"Valid\\") else: result.append(\\"Invalid\\") return result # Example Usage: # n, k = 5, 2 # b = [1, 3, 5, 7, 9] # d = 2 # queries = [(1, 3), (2, 5)] # print(check_subarray_validity(b, n, d, queries))"},{"question":"You are given an array of integers where each number appears exactly twice except for one number which appears only once. Your task is to find the number that appears only once. -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case begins with an integer N, the length of the array. - The next line contains N space-separated integers representing the elements of the array. -----Output:----- For each test case, print the element that appears only once. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 0 leq A[i] leq 10^9 -----Sample Input:----- 2 5 4 3 2 4 2 3 7 3 7 -----Sample Output:----- 3 3 -----EXPLANATION:----- For the first test case, the array is [4, 3, 2, 4, 2]. - Both 4 and 2 appear twice, while 3 appears only once. Hence, the answer is 3. For the second test case, the array is [7, 3, 7]. - Both 7s appear twice, while 3 appears only once. Hence, the answer is 3.","solution":"def find_single_number(arr): Given a list of integers where all elements appear twice except for one element which appears once, this function returns that single element. unique_num = 0 for num in arr: unique_num ^= num return unique_num def process_test_cases(t, test_cases): results = [] for i in range(t): N = test_cases[i][0] arr = test_cases[i][1] results.append(find_single_number(arr)) return results"},{"question":"Given a linked list, each node contains an integer value. Create a function that checks if the linked list forms a palindrome. The function should return `true` if the values of the nodes read the same forward and backward, and `false` otherwise. # Example 1: **Input:** ``` head = [1, 2, 2, 1] ``` **Output:** ``` true ``` **Explanation:** The linked list\'s values are the same forwards and backwards, thus it forms a palindrome. # Example 2: **Input:** ``` head = [1, 2, 3, 4, 2, 1] ``` **Output:** ``` false ``` **Explanation:** The linked list\'s values are different forwards and backwards, thus it does not form a palindrome. # Example 3: **Input:** ``` head = [1] ``` **Output:** ``` true ``` **Explanation:** A single element list is naturally a palindrome. # Example 4: **Input:** ``` head = [1, 2, 1, 2, 1] ``` **Output:** ``` true ``` **Explanation:** The linked list\'s values are the same forwards and backwards, thus it forms a palindrome. # Constraints: - The number of nodes in the linked list is in the range [1, 10^5]. - The node values are in the range [0, 10^4]. # Function Signature: ```python def is_palindrome(head: ListNode) -> bool: ``` # Note: - You must solve it in **O(n)** time and **O(1)** space. - Do not convert the linked list to an array. Here is a possible Python class definition for the linked list node to be used: ```python class ListNode: def __init__(self, val: int = 0, next: \'ListNode\' = None): self.val = val self.next = next ```","solution":"class ListNode: def __init__(self, val: int = 0, next: \'ListNode\' = None): self.val = val self.next = next def is_palindrome(head: ListNode) -> bool: if not head or not head.next: return True # Find the middle of the linked list using the slow and fast pointer approach slow, fast = head, head while fast and fast.next: slow = slow.next fast = fast.next.next # Reverse the second half of the linked list prev = None while slow: next_node = slow.next slow.next = prev prev = slow slow = next_node # Compare the first half and the reversed second half left, right = head, prev while right: if left.val != right.val: return False left = left.next right = right.next return True"},{"question":"Task You are given a binary tree with N nodes where each node has a distinct integer value from 1 to N. Your task is to find the lowest common ancestor (LCA) for various pairs of nodes in the tree. The LCA of two nodes is defined as the deepest node that is an ancestor of both nodes. Input - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of nodes in the tree. - The next N-1 lines each contain two integers u and v denoting an undirected edge between nodes u and v. - The next line contains an integer Q, the number of queries. - The next Q lines each contain two integers a and b, denoting the pair of nodes for which you have to find the LCA. Output For each query, print the LCA for the given pair of nodes in a separate line. Constraints - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq Q leq 10^4 - 1 leq u, v, a, b leq N - Sum of N over all test cases does not exceed 10^6 - Sum of Q over all test cases does not exceed 10^5 Example # Input 2 5 1 2 1 3 3 4 3 5 3 2 3 4 5 2 5 3 1 2 2 3 3 4 1 1 3 # Output 1 3 1 2 # Explanation - For the first test case: - The LCA of 2 and 3 is 1. - The LCA of 4 and 5 is 3. - The LCA of 2 and 5 is 1. - For the second test case: - The LCA of 1 and 3 is 1.","solution":"import sys import collections sys.setrecursionlimit(200000) class LCAFinder: def __init__(self, graph, n): self.graph = graph self.n = n self.parent = [-1] * (n + 1) self.depth = [-1] * (n + 1) self.lca_prepared = False def dfs(self, node, par): self.parent[node] = par self.depth[node] = self.depth[par] + 1 if par != -1 else 0 for neighbor in self.graph[node]: if neighbor != par: self.dfs(neighbor, node) def prepare_lca(self): self.dfs(1, -1) # Assume 1 is the root of the tree self.lca_prepared = True def find_lca(self, u, v): if not self.lca_prepared: self.prepare_lca() if self.depth[u] < self.depth[v]: u, v = v, u while self.depth[u] > self.depth[v]: u = self.parent[u] while u != v: u = self.parent[u] v = self.parent[v] return u def solve(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 results = [] for _ in range(T): N = int(data[idx]) idx += 1 graph = collections.defaultdict(list) for _ in range(N - 1): u = int(data[idx]) v = int(data[idx + 1]) graph[u].append(v) graph[v].append(u) idx += 2 lca_finder = LCAFinder(graph, N) Q = int(data[idx]) idx += 1 for _ in range(Q): a = int(data[idx]) b = int(data[idx + 1]) lca = lca_finder.find_lca(a, b) results.append(lca) idx += 2 for result in results: print(result)"},{"question":"Write a function that takes in an array of integers and returns a new array with each element repeated a given number of times. If the input is not an array of integers, return \\"Input is not an array of integers\\". For example, given the array [1, 2, 3] and the number 3, the function should return [1, 1, 1, 2, 2, 2, 3, 3, 3]. If the input array contains non-integer elements, the function should return \\"Input array contains non-integer elements\\".","solution":"def repeat_elements(arr, n): Takes in an array of integers and returns a new array with each element repeated n times. If the input is not an array of integers, returns \\"Input is not an array of integers\\". If the input array contains non-integer elements, returns \\"Input array contains non-integer elements\\". Arguments: arr: list of integers n: integer, number of times to repeat each element Returns: list of integers or str # Check if arr is a list if not isinstance(arr, list): return \\"Input is not an array of integers\\" # Check if all elements in the list are integers for element in arr: if not isinstance(element, int): return \\"Input array contains non-integer elements\\" # Repeat each element in the array n times result = [] for element in arr: result.extend([element] * n) return result"},{"question":"An engineer is designing a network of interconnected devices and needs your help to ensure that communication is as efficient as possible. Each device can be assigned a unique identifier from 1 to n. The devices will communicate through a set of bidirectional connections, and the goal is to ensure that the network is connected, meaning there is a path between any pair of devices. You are given: - An integer `n`, the number of devices. - An integer `m`, the number of existing connections. - A list of `m` pairs of integers, where each pair represents a bidirectional connection between two devices. Your task is to determine the minimum number of additional connections required to make the network fully connected. If the network is already connected, no additional connections are needed. -----Input----- The input consists of multiple test cases. The first line contains a single integer `t` (1 le t le 100) — the number of test cases. Each test case starts with two integers `n` (1 le n le 1000) and `m` (0 le m le n(n-1)/2). The next `m` lines contain two integers `u` and `v` (1 le u, v le n, u ne v) representing an existing connection between devices `u` and `v`. It is guaranteed that the sum of `n` across all test cases does not exceed 10000. -----Output----- For each test case, print a single integer, the minimum number of additional connections required to make the network fully connected. -----Example----- Input 3 4 2 1 2 3 4 3 1 1 2 5 0 Output 1 1 4 -----Note----- In the first test case, the devices can be connected by adding one additional connection between devices 2 and 3. In the second test case, adding one connection between devices 2 and 3 will make the network connected. In the third test case, since there are no initial connections, we need 4 additional connections to fully connect 5 devices.","solution":"def find_min_additional_connections(t, test_cases): def dfs(node, adj_list, visited): stack = [node] while stack: curr = stack.pop() for neighbor in adj_list[curr]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) results = [] for n, m, connections in test_cases: adj_list = {i: [] for i in range(1, n + 1)} for u, v in connections: adj_list[u].append(v) adj_list[v].append(u) visited = set() num_components = 0 for device in range(1, n + 1): if device not in visited: visited.add(device) dfs(device, adj_list, visited) num_components += 1 results.append(num_components - 1) return results"},{"question":"# Task Given an integer `n`, print out an ASCII representation of a diamond of height `n`. The height `n` will always be an odd number greater than 0. The diamond should be symmetric, and each row except the middle one should contain spaces. # Input/Output - `[input]` integer `n` The height of the diamond. - `[output]` a string representing the diamond in ASCII format. # Example For `n = 5`, the output should be: ``` * *** ***** *** * ``` For `n = 7`, the output should be: ``` * *** ***** ******* ***** *** * ``` Note: Each row of the diamond is centered with respect to the maximum width of the diamond, and consists of spaces and asterisks (`*`).","solution":"def print_diamond(n): Returns an ASCII representation of a diamond of height n. The height n is an odd number greater than 0. if n <= 0 or n % 2 == 0: raise ValueError(\\"Height n must be an odd number greater than 0.\\") diamond = [] midpoint = n // 2 # Generate the upper part including the middle row for i in range(midpoint + 1): spaces = \' \' * (midpoint - i) stars = \'*\' * (2 * i + 1) diamond.append(spaces + stars + spaces) # Generate the lower part of the diamond for i in range(midpoint - 1, -1, -1): spaces = \' \' * (midpoint - i) stars = \'*\' * (2 * i + 1) diamond.append(spaces + stars + spaces) return \\"n\\".join(diamond)"},{"question":"A word chain is a sequence of words such that each word differs from the previous word by exactly one letter. Two words differ by one letter if they have the same length and differ in exactly one position. Given a list of words, find the length of the longest word chain and return the length of this chain. # Function Signature ```python def longest_word_chain(words: List[str]) -> int: pass ``` # Input - `words` - A list of strings, where each string contains only lowercase English letters and is of length between 1 and 16. # Output - An integer representing the length of the longest word chain. # Example ```python longest_word_chain([\\"a\\", \\"b\\", \\"ba\\", \\"bca\\", \\"bda\\", \\"bdca\\"]) == 4 ``` **Explanation**: One of the longest word chains is [\\"a\\", \\"ba\\", \\"bda\\", \\"bdca\\"] # Note Consider that the list can have up to 1000 words. The function needs to be efficient in terms of time and space complexity.","solution":"from typing import List def longest_word_chain(words: List[str]) -> int: words.sort(key=len) chain_lengths = {} def differ_by_one_letter(w1, w2): if len(w1) != len(w2): return False count = sum(1 for a, b in zip(w1, w2) if a != b) return count == 1 max_chain_length = 1 for word in words: chain_lengths[word] = 1 for i in range(len(word)): prev_word = word[:i] + word[i+1:] if prev_word in chain_lengths: chain_lengths[word] = max(chain_lengths[word], chain_lengths[prev_word] + 1) max_chain_length = max(max_chain_length, chain_lengths[word]) return max_chain_length"},{"question":"You are given a directory structure represented as a nested dictionary in Python. Each key is a directory name and its value is either an empty dictionary (for an empty directory) or another dictionary representing the contents of that directory. Write a function, `find_longest_path(directory_tree)`, that finds and returns the path to the deepest directory in the tree. If there are multiple directories at the same depth, return any one of them. The path should be returned as a string with directory names separated by slashes (\'/\'). For example, given the following directory structure: ```python directory_tree = { \'home\': { \'user\': { \'documents\': { \'photos\': {} }, \'downloads\': { \'movies\': { \'comedy\': {} } } } } } ``` The function `find_longest_path(directory_tree)` should return `\'home/user/documents/photos\'` or `\'home/user/downloads/movies/comedy\'`. Here is the function signature: ```python def find_longest_path(directory_tree: dict) -> str: pass ``` # Constraints - The depth of the directory tree will not exceed 1000. - Each directory name is a non-empty string of at most 100 characters. - The structure will always start with a single top-level directory. # Examples ```python # Example 1 directory_tree1 = { \'root\': { \'a\': { \'b\': { \'c\': {} }, \'d\': {} } } } assert find_longest_path(directory_tree1) == \'root/a/b/c\' # Example 2 directory_tree2 = { \'root\': { \'a\': {}, \'b\': {} } } assert find_longest_path(directory_tree2) == \'root/a\' or find_longest_path(directory_tree2) == \'root/b\' ```","solution":"def find_longest_path(directory_tree): Finds and returns the path to the deepest directory in the tree. The path is returned as a string with directory names separated by slashes (\'/\'). def dfs(node, path): if not node: return path longest_path = path for dir_name, subtree in node.items(): current_path = dfs(subtree, f\\"{path}/{dir_name}\\") if current_path.count(\'/\') > longest_path.count(\'/\'): longest_path = current_path return longest_path # Initialize DFS from the single top-level directory top_level_dir = next(iter(directory_tree)) return dfs(directory_tree[top_level_dir], top_level_dir)"},{"question":"Given a list of integers, an integer `k`, and a target sum `t`, your task is to determine if there exists a subset of the list such that its size is exactly `k` and it sums up to `t`. Write a function `isSubsetSum(list, k, t)` that returns `true` if such a subset exists, otherwise `false`. The function should have the following signature: ```python def isSubsetSum(lst: List[int], k: int, t: int) -> bool: # Your code here ```","solution":"from itertools import combinations from typing import List def isSubsetSum(lst: List[int], k: int, t: int) -> bool: Determines if there exists a subset of the list of exactly `k` elements that sum up to `t`. Args: lst (List[int]): The list of integers. k (int): The number of elements in the subset. t (int): The target sum. Returns: bool: True if such a subset exists, otherwise False. # Generate all combinations of `k` elements from list `lst` for subset in combinations(lst, k): # Check if the sum of this combination equals the target sum `t` if sum(subset) == t: return True return False"},{"question":"You are given an array of integers A of length N. You are allowed to perform the following operation on the array zero or more times: - Choose an index i such that 1 le i < N and swap A[i] with A[i+1]. The goal is to sort the array in non-decreasing order using the minimum number of operations. Return the minimum number of operations required to sort the array. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N. - The second line contains N integers representing the array A. -----Output----- For each test case, print a single line containing one integer ― the minimum number of operations. -----Constraints----- - 1 le T le 1,000 - 1 le N le 100 - 0 le A[i] le 10^6 -----Example Input----- 2 5 2 3 1 5 4 4 4 3 2 1 -----Example Output----- 3 6 -----Explanation----- Example case 1: The array [2, 3, 1, 5, 4] can be sorted with 3 operations: swap (1 and 3), swap (2 and 3), swap (3 and 4). - After 1st operation: [2, 1, 3, 5, 4] - After 2nd operation: [1, 2, 3, 5, 4] - After 3rd operation: [1, 2, 3, 4, 5] Example case 2: The array [4, 3, 2, 1] can be sorted with 6 operations. - After 1st operation: [3, 4, 2, 1] - After 2nd operation: [3, 2, 4, 1] - After 3rd operation: [3, 2, 1, 4] - After 4th operation: [2, 3, 1, 4] - After 5th operation: [2, 1, 3, 4] - After 6th operation: [1, 2, 3, 4]","solution":"def minimum_operations_to_sort_array(test_cases): results = [] for N, A in test_cases: swaps = 0 for i in range(N): for j in range(N - i - 1): if A[j] > A[j + 1]: A[j], A[j + 1] = A[j + 1], A[j] swaps += 1 results.append(swaps) return results"},{"question":"Write a function that determines if a given year is a leap year or not. A leap year is exactly divisible by 4 except for end of the century years (years ending with 00). The end of the century year is a leap year only if it is perfectly divisible by 400. For example, 1996, 2000 and 2004 are leap years, while 1900, 2100 and 2200 are not leap years. The function should take an integer `year` as input and return `true` if it\'s a leap year, and `false` otherwise. **Notes:** * The `year` input value will always be a positive integer. * Consider using modular arithmetic to determine leap years.","solution":"def is_leap_year(year): Determines if the given year is a leap year. A leap year is exactly divisible by 4 except for end of the century years (years ending with 00). The end of the century year is a leap year only if it is perfectly divisible by 400. Parameters: year (int): The year to check. Returns: bool: True if the year is a leap year, False otherwise. if year % 400 == 0: return True if year % 100 == 0: return False if year % 4 == 0: return True return False"},{"question":"You are given an integer array and a number k. You need to find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is less than or equal to k and the absolute difference between i and j is less than or equal to t. Write a function that, given an array of integers and two integers k and t, returns a boolean indicating whether such a pair of indices exists. Example: ```python def contains_nearby_almost_duplicate(nums, k, t): # your code here # Test cases print(contains_nearby_almost_duplicate([1, 2, 3, 1], 3, 0)) # Output: True print(contains_nearby_almost_duplicate([1, 0, 1, 1], 1, 2)) # Output: True print(contains_nearby_almost_duplicate([1, 5, 9, 1, 5, 9], 2, 3)) # Output: False ```","solution":"def contains_nearby_almost_duplicate(nums, k, t): if k < 0 or t < 0: return False num_dict = {} for i in range(len(nums)): bucket = nums[i] // (t + 1) if bucket in num_dict: return True if (bucket - 1) in num_dict and abs(nums[i] - num_dict[bucket - 1]) <= t: return True if (bucket + 1) in num_dict and abs(nums[i] - num_dict[bucket + 1]) <= t: return True num_dict[bucket] = nums[i] if i >= k: del num_dict[nums[i - k] // (t + 1)] return False"},{"question":"=====Problem Statement===== In this task, you need to write a function that receives a list of integers and an integer target sum. Your function should find all unique pairs of integers in the list that add up to the target sum, and return them as a list of tuples. =====Input Format===== The function should receive the following inputs: - A list of integers. - A single integer representing the target sum. =====Constraints===== 1 ≤ len(list) ≤ 200 -1000 ≤ list[i] ≤ 1000 -2000 ≤ target sum ≤ 2000 =====Output Format===== Return a list of tuples, where each tuple contains a pair of integers that add up to the target sum. Each tuple should be in the form (a, b) such that a ≤ b to ensure the pairs are ordered. The pairs in the output list should be unique and the list itself should be sorted in increasing order of their first element. =====Example===== Input: ``` [1, 2, 3, 4, 5, 6], 7 ``` Output: ``` [(1, 6), (2, 5), (3, 4)] ``` Explanation: The pairs (1, 6), (2, 5), and (3, 4) add up to the target sum 7. These pairs are unique and ordered in terms of their first element.","solution":"def find_pairs_with_sum(numbers, target): Finds all unique pairs in the list that add up to the target sum. Args: numbers: List of integers. target: Integer representing the target sum. Returns: A list of tuples, each containing a pair of integers that add up to the target sum. seen = set() pairs = set() for number in numbers: complement = target - number if complement in seen: pair = (min(number, complement), max(number, complement)) pairs.add(pair) seen.add(number) return sorted(pairs)"},{"question":"A car dealership has a new feature in which, upon purchasing a car, customers receive a number of free service coupons proportionate to the price of the car. The dealership follows a tier system for determining the number of coupons: - If the price of the car is below 10,000, the customer receives no coupons. - If the price of the car is between 10,000 and 30,000 (inclusive), the customer receives 5 coupons. - If the price of the car is between 30,001 and 50,000 (inclusive), the customer receives 10 coupons. - If the price of the car exceeds 50,000, the customer receives 20 coupons. Additionally, there is a special discount season where for every 10,000 spent over 50,000, the customer receives 1 extra coupon on top of the standard 20 coupons. Given the prices of multiple cars purchased in this season, calculate the total number of coupons received by all customers combined. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines of input. - The first line contains an integer N, the number of cars purchased. - The second line contains N integers representing the prices of the cars, separated by spaces. -----Output:----- For each test case, print a single integer on a new line representing the total number of coupons received by all customers in that test case. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 200000 - 1 leq price leq 1000000 - Sum of N over all test cases does not exceed 300000 -----Sample Input:----- 2 3 7500 15000 48000 2 60000 105000 -----Sample Output:----- 15 42 -----EXPLANATION:----- For the first test case: 1. The first car price is 7500 which is less than 10000, so 0 coupons are added. 2. The second car price is 15000 which lies between 10000 and 30000, so 5 coupons are added. 3. The third car price is 48000 which lies between 30001 and 50000, so 10 coupons are added. Total coupons: 0 + 5 + 10 = 15 For the second test case: 1. The first car price is 60000 which exceeds 50000, so 20 base coupons and 1 extra coupon for the extra 10000 over 50000 are added, total 21 coupons. 2. The second car price is 105000 which exceeds 50000, so 20 base coupons and 5 extra coupons for the extra 50000 over 50000 are added, total 25 coupons. Total coupons: 21 + 25 = 46","solution":"def calculate_coupons(prices): total_coupons = 0 for price in prices: if price < 10000: total_coupons += 0 elif price <= 30000: total_coupons += 5 elif price <= 50000: total_coupons += 10 else: extra_coupons = (price - 50000) // 10000 total_coupons += 20 + extra_coupons return total_coupons def total_coupons_per_test_case(test_cases): results = [] for case in test_cases: N, prices = case results.append(calculate_coupons(prices)) return results"},{"question":"*** Sum of Cubes *** Write a function that takes a list of integers and returns the sum of the cubes of those integers. The function should handle both positive and negative numbers and ignore non-integer elements. Input: A list of integers. Output: An integer representing the sum of the cubes of the input integers. Example: ```python def sum_of_cubes(lst): # Your code here print(sum_of_cubes([1, 2, 3])) # Output: 36 (1^3 + 2^3 + 3^3) print(sum_of_cubes([-3, -2, -1])) # Output: -36 ((-3)^3 + (-2)^3 + (-1)^3) print(sum_of_cubes([1, \'a\', 2, \'b\', 3])) # Output: 36 (1^3 + 2^3 + 3^3) ```","solution":"def sum_of_cubes(lst): Returns the sum of the cubes of the integers in the list. Ignores non-integer elements. return sum(x**3 for x in lst if isinstance(x, int))"},{"question":"Given a string S consisting of lowercase English letters, return true if S can be rearranged to form a palindrome. Otherwise, return false. Example 1: Input: S = \\"civic\\" Output: true Example 2: Input: S = \\"ivicc\\" Output: true Example 3: Input: S = \\"hello\\" Output: false Example 4: Input: S = \\"aabb\\" Output: true Note: 1 <= S.length <= 1000","solution":"def can_form_palindrome(s): Returns true if the string can be rearranged to form a palindrome. from collections import Counter count = Counter(s) odd_count = sum(1 for c in count.values() if c % 2 != 0) return odd_count <= 1"},{"question":"-----General Statement:----- Create a program that takes a string as input and outputs the string with vowels replaced by their corresponding position in the alphabet. The positions need to be formatted as two digits. For example, \'a\' is replaced by \'01\', \'e\' by \'05\', \'i\' by \'09\', \'o\' by \'15\', and \'u\' by \'21\'. The comparison should be case insensitive, but the output should preserve the case of the original letters. -----Input:----- All data is on a single line. The input will be a single string comprising lowercase and/or uppercase letters (no spaces or other characters). -----Output:----- The output should be the modified string where each vowel has been replaced by its position in the alphabet formatted as two digits. -----Assumptions:----- Input string length is less than 100 characters. -----Sample Input:----- Example -----Sample Output:----- 05x01mpl05","solution":"def replace_vowels_with_positions(s): Replaces vowels in the string with their corresponding position in the alphabet formatted as two digits. vowel_to_position = { \'a\': \'01\', \'e\': \'05\', \'i\': \'09\', \'o\': \'15\', \'u\': \'21\', \'A\': \'01\', \'E\': \'05\', \'I\': \'09\', \'O\': \'15\', \'U\': \'21\' } result = [] for char in s: if char in vowel_to_position: result.append(vowel_to_position[char]) else: result.append(char) return \'\'.join(result)"},{"question":"Book Index Organizer Given a list of book indexes in a string format, create a function that organizes and compresses the indexes in a more readable format by combining consecutive indexes into ranges. # Input - A list of book indexes represented as a string, where each index is a non-negative integer separated by a comma. # Output - A string that consolidates the list of indexes into ranges. # Example ```python def organize_indexes(indexes): # Your implementation here indexes = \\"1,2,3,5,6,7,9,11,12,13,15\\" print(organize_indexes(indexes)) # \\"1-3,5-7,9,11-13,15\\" ``` # Explanation The input string `\\"1,2,3,5,6,7,9,11,12,13,15\\"` should be transformed into the output string `\\"1-3,5-7,9,11-13,15\\"` because: - `1,2,3` are consecutive numbers, so they should be compressed into `1-3`. - `5,6,7` are consecutive numbers, so they should be compressed into `5-7`. - `9` is a single index and should remain as is. - `11,12,13` are consecutive numbers, so they should be compressed into `11-13`. - `15` is a single index and should remain as is. Your task is to implement the `organize_indexes` function that processes the list of book indexes and returns the organized string.","solution":"def organize_indexes(indexes): Organizes and compresses a string of book indexes into ranges. if not indexes: return \\"\\" index_list = [int(i) for i in indexes.split(\',\')] index_list.sort() ranges = [] start = end = index_list[0] for idx in index_list[1:]: if idx == end + 1: end = idx else: if start == end: ranges.append(f\\"{start}\\") else: ranges.append(f\\"{start}-{end}\\") start = end = idx if start == end: ranges.append(f\\"{start}\\") else: ranges.append(f\\"{start}-{end}\\") return \\",\\".join(ranges)"},{"question":"Write a function `find_matching_substring` that takes two inputs: a main string and a pattern string. The function should return a list of starting indices of substrings in the main string that match the pattern string exactly. The function should be case-sensitive and only exact matches should be considered (no partial or case-insensitive matches). # Input - `main_string` (a string of length up to 10^6) - `pattern` (a string of length up to 10^3) # Output - A list of starting indices where the pattern is found in the main string. If the pattern is not found, return an empty list. # Example ```python find_matching_substring(\\"abracadabra\\", \\"abr\\") # [0, 7] find_matching_substring(\\"aaaaaa\\", \\"aa\\") # [0, 1, 2, 3, 4] find_matching_substring(\\"hello\\", \\"ll\\") # [2] find_matching_substring(\\"hello\\", \\"world\\") # [] ``` # Constraints - The main string and pattern consist only of lowercase and uppercase English letters and digits. - The pattern length will not be greater than the main string length. # Notes - The function should efficiently handle large input sizes. - You may assume that the main string and pattern string are non-empty.","solution":"def find_matching_substring(main_string, pattern): Finds the starting indices of substrings in the main string that exactly match the pattern string. Args: main_string (str): The main string in which to search. pattern (str): The pattern string to search for. Returns: list: A list of starting indices of the matching substrings. pattern_length = len(pattern) main_length = len(main_string) if pattern_length > main_length: return [] result = [] for i in range(main_length - pattern_length + 1): if main_string[i:i + pattern_length] == pattern: result.append(i) return result"},{"question":"# Nested Dictionary Summarizer You have been given a complex dictionary structure which contains information about people and their monthly expenses. Each key in the dictionary represents a person\'s name, and the value is another dictionary where keys are months and values are their expenses for that month. ```python expenses = { \'Alice\': {\'January\': 220, \'February\': 180, \'March\': 240}, \'Bob\': {\'January\': 300, \'February\': 150, \'March\': 350}, \'Charlie\': {\'January\': 200, \'February\': 210, \'March\': 190}, } ``` Write a function `summarize_expenses(expenses)` that takes this dictionary as input and returns a dictionary where each key is a person\'s name and the value is their total expenses over all months. # Example Input: ```python expenses = { \'Alice\': {\'January\': 220, \'February\': 180, \'March\': 240}, \'Bob\': {\'January\': 300, \'February\': 150, \'March\': 350}, \'Charlie\': {\'January\': 200, \'February\': 210, \'March\': 190}, } ``` Output: ```python { \'Alice\': 640, \'Bob\': 800, \'Charlie\': 600 } ``` # Notes - Assume the input dictionary will always be non-empty and every person will have expenses for the same set of months. - You should not assume a fixed number of months; the function should work regardless of the number of months provided. Good luck and happy coding!","solution":"def summarize_expenses(expenses): Takes a nested dictionary of people and their monthly expenses and returns a dictionary with the total expenses of each person. Args: expenses (dict): A dictionary where keys are people\'s names and values are dictionaries of their monthly expenses. Returns: dict: A dictionary where keys are people\'s names and values are their total expenses. total_expenses = {} for person, monthly_expenses in expenses.items(): total_expenses[person] = sum(monthly_expenses.values()) return total_expenses"},{"question":"Write a function that determines whether a given string is a valid IPv4 address. A valid IPv4 address consists of four numeric sections separated by dots, where each section is an integer between 0 and 255. # Example ``` is_valid_IP(\\"192.168.1.1\\") == True is_valid_IP(\\"255.255.255.255\\") == True is_valid_IP(\\"256.256.256.256\\") == False is_valid_IP(\\"192.168.01.1\\") == False is_valid_IP(\\"192.168.1\\") == False is_valid_IP(\\"abc.def.ghi.jkl\\") == False ```","solution":"def is_valid_IP(ip): Determines whether a given string is a valid IPv4 address. A valid IPv4 address consists of four numeric sections separated by dots, where each section is an integer between 0 and 255. sections = ip.split(\'.\') if len(sections) != 4: return False for section in sections: if not section.isdigit() or not 0 <= int(section) <= 255: return False if section != str(int(section)): # Checks for leading zeroes return False return True"},{"question":"Fluffy the cat likes to play on a rectangular grid of size MxN. She has a favorite toy mouse that she likes to chase on the grid. However, Fluffy is lazy and prefers to play in a fixed manner: she starts from the bottom-left corner (M,1) and reaches the top-right corner (1,N) by taking steps only upwards or to the right. You need to calculate the number of unique paths Fluffy can take to reach the top-right corner, using only the allowed movements. -----Input Format:----- The first line contains one integer, T, which is the number of test cases. Each test case is then described in one line. The line contains two integers M and N, representing the dimensions of the grid. -----Output Format:----- For each testcase, output the number of unique paths for Fluffy to reach her toy in the top-right corner. -----Constraints:----- - 1 ≤ T ≤ 50 - 1 ≤ M, N ≤ 50 -----Example----- Input: 2 3 3 2 2 Output: 6 2 -----Explanation:----- For the first test case with a 3x3 grid: Fluffy has the following different paths: 1. Down-Right-Down-Right-Down-Right 2. Down-Right-Down-Down-Right-Right 3. Down-Down-Right-Down-Right-Right 4. Down-Right-Right-Down-Down-Right 5. Down-Down-Right-Right-Down-Right 6. Down-Right-Down-Right-Right-Down For the second test case with a 2x2 grid: Fluffy has the following different paths: 1. Down-Right-Right-Down 2. Down-Right-Down-Right","solution":"import math def num_unique_paths(M, N): Calculate the number of unique paths from the bottom-left to the top-right of an MxN grid. Parameters: M (int): The number of rows. N (int): The number of columns. Returns: int: The number of unique paths. # We need to make (M-1) upward moves and (N-1) rightward moves. # The total moves are (M-1) + (N-1). # We need to choose (M-1) moves from the total (M-1)+(N-1) moves, or (N-1) moves from the total. # Using combinations formula: C((M-1)+(N-1), (M-1)) or C((M-1)+(N-1), (N-1)) return math.comb((M - 1) + (N - 1), M - 1) def solve(T, test_cases): For each test case, calculate the number of unique paths and print them. Parameters: T (int): The number of test cases. test_cases (list of tuples): Each tuple contains the dimensions M and N of the grid. results = [] for M, N in test_cases: results.append(num_unique_paths(M, N)) return results"},{"question":"# Graph Path Checker In this exercise, you are required to implement a function to determine if there is a valid path between two nodes in a directed graph from a given adjacency list. A graph can be represented as a dictionary where each key is a node, and the corresponding value is a list of nodes that the key node has an edge directed towards. Definitions # Directed Graph A directed graph is a set of nodes connected by edges, where edges have a direction. This means if there is an edge from node `A` to node `B`, you can go from `A` to `B`, but not necessarily from `B` to `A` unless there is also an edge from `B` to `A`. # Adjacency List An adjacency list is a common way to represent a graph. The graph as an adjacency list can be given as: ``` graph = { \'A\': [\'B\', \'C\'], \'B\': [\'C\'], \'C\': [\'A\', \'D\'], \'D\': [\'C\'] } ``` In this example: - `A` has directed edges to `B` and `C` - `B` has a directed edge to `C` - `C` has directed edges to `A` and `D` - `D` has a directed edge to `C` # Path A path in a directed graph is a sequence of nodes such that there is a directed edge from each node to the next node in sequence. For instance, in the above graph, `A -> B -> C -> D` and `C -> D -> C` are valid paths, but `B -> A` is not. The Task Your task is to implement the function `graph_path_exists(graph, start, end)` to determine if there is a path from node `start` to node `end` in the given directed graph represented as an adjacency list. If there is one, return `True`, otherwise return `False`. # Input - `graph`: A dictionary representing the adjacency list of the directed graph - `start`: A string representing the starting node - `end`: A string representing the end node # Output - Return `True` if there is a valid path from `start` to `end`, otherwise return `False`. # Notes - The graph nodes will always be strings and unique. - There may be loops and cycles within the graph. - You can assume that both `start` and `end` nodes are present in the graph. # Examples ```python graph_path_exists({ \'A\': [\'B\', \'C\'], \'B\': [\'C\'], \'C\': [\'A\', \'D\'], \'D\': [\'C\'] }, \'A\', \'D\') # Output: True ``` ```python graph_path_exists({ \'A\': [\'B\'], \'B\': [\'C\'], \'C\': [\'D\'], \'D\': [] }, \'A\', \'D\') # Output: True ``` ```python graph_path_exists({ \'A\': [\'B\', \'C\'], \'B\': [\'C\'], \'C\': [\'A\'] }, \'A\', \'D\') # Output: False ``` # Constraints - The number of nodes `n` in the graph will be such that `1 <= n <= 1000`. - The maximum number of directed edges from any node will be such that `0 <= edges <= 100`.","solution":"def graph_path_exists(graph, start, end): Determines if there is a valid path from \'start\' to \'end\' in a directed graph represented by an adjacency list. visited = set() stack = [start] while stack: node = stack.pop() if node == end: return True if node not in visited: visited.add(node) stack.extend(graph.get(node, [])) return False"},{"question":"You are working at a lemonade stand with your friend Charlie, and you have a special price list based on the quantity of lemonade bottles sold. The pricing details are as follows: - 5.00 for 15 bottles - 2.50 for 7 bottles - 1.00 for 3 bottles - 0.50 for 1 bottle Your job is to create a calculator that determines the cheapest possible price a customer will pay for a given amount of lemonade bottles. The function should accept an integer representing the number of bottles and return the minimum cost. Ensure the returned cost is rounded to two decimal places. Write a function to achieve this.","solution":"def calculate_min_cost(bottles): Calculate the minimum cost for a given number of lemonade bottles. :param bottles: int - Number of lemonade bottles. :return: float - Minimum cost rounded to two decimal places. if bottles < 0: raise ValueError(\\"The number of bottles cannot be negative.\\") prices = [(15, 5.00), (7, 2.50), (3, 1.00), (1, 0.50)] total_cost = 0.0 for qty, price in prices: while bottles >= qty: total_cost += price bottles -= qty return round(total_cost, 2)"},{"question":"# palindromic_insertions `Goal`: Given an input string, determine the minimum number of insertions needed to make the string a palindrome. As a learning exercise, come up with a solution that uses dynamic programming to solve the problem efficiently. To clarify, a palindrome is a string that reads the same forwards and backwards. You need to count the minimum number of characters to be inserted into the given string to make it a palindrome. # Example Example 1: Input: \\"abca\\" Output: 1 Explanation: By inserting \'b\' after the first \'a\', we get \\"abcba\\", which is a palindrome. Example 2: Input: \\"radar\\" Output: 0 Explanation: \\"radar\\" is already a palindrome, so no insertions are needed. Example 3: Input: \\"google\\" Output: 2 Explanation: By inserting \'e\' and \'l\', we get \\"elgooglee\\" or by inserting \'g\' and \'o\', we get \\"googleog\\", both of which are palindromes. # Constraints 1. The input string will only contain lowercase English letters. 2. The length of the input string will not exceed 1000 characters. # Hint 1. You can use dynamic programming to store the minimum number of insertions needed for substring computations. 2. Let `dp[i][j]` represent the minimum insertions needed to convert the substring from index `i` to `j` into a palindrome. 3. The recurrence relation can be formed by comparing characters at the start and end of the current substring and updating the solution accordingly. # Solution Outline 1. Initialize a 2D list `dp` of size `len(s) x len(s)` with zeros. 2. Iterate over all possible substrings of increasing length. 3. Populate `dp` based on how characters at the two ends of the substring match. 4. Return `dp[0][len(s) - 1]`, which contains the minimum insertions needed for the entire string.","solution":"def min_insertions_to_make_palindrome(s): Returns the minimum number of insertions needed to make the string s a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1 return dp[0][n - 1]"},{"question":"Jasper is tracking his daily progress in a coding challenge. Each day, he records the number of problems he solved. At the end of the month, he wants to analyze the streaks of consecutive days where he solved more problems than the previous day. For example, if there are n=5 days and the number of problems solved each day is a=[2, 3, 1, 4, 5], then there are two streaks: `[2, 3]` (days 1 and 2) and `[1, 4, 5]` (days 3, 4, and 5). If n=4 and a=[4, 3, 2, 1], there are no streaks since the number of problems solved each day never increased from the previous day. Determine the number of such streaks for each dataset provided. You have to solve t independent datasets. ---Input--- The first line contains an integer t (1 le t le 10000) — the number of sets of input data in the test. Input data sets must be processed independently, one after another. Each input data set consists of two lines. The first line contains an integer n (1 le n le 150000) — the number of days. The second line contains n integers a_1, a_2, dots, a_n (0 le a_i le 10^6), where a_i is the number of problems solved on the i-th day. It is guaranteed that the sum of n over all datasets in the test does not exceed 150000. ---Output--- Print t integers, the j-th of which should be equal to the number of streaks in the j-th input data set. ---Example--- Input 4 5 2 3 1 4 5 4 4 3 2 1 3 1 2 3 6 1 2 2 3 4 5 Output 2 0 1 2","solution":"def count_streaks(t, datasets): results = [] for dataset in datasets: n, a = dataset streak_count = 0 in_streak = False for i in range(1, n): if a[i] > a[i - 1]: if not in_streak: streak_count += 1 in_streak = True else: in_streak = False results.append(streak_count) return results"},{"question":"# Task A magician is performing a unique card trick. He has a deck of cards each with a number written on it. As part of his performance, he divides the deck into several groups based on specific rules. For a given deck of cards, the magician separates it into contiguous subsets where the sum of numbers in each subset is odd. The magician needs your help to find out how many such groups he can create. Write a function that determines the maximum number of odd-sum groups that can be formed from the deck of cards. # Example For `cards = [1, 2, 3, 4, 5]`, the output should be `3`. The deck can be divided into `[1, 2]`, `[3, 4]`, and `[5]` each of which has an odd sum (`3`, `7`, and `5` respectively). For `cards = [2, 4, 6, 8]`, the output should be `0`. There are no possible groups that have an odd sum. # Input/Output - `[input]` integer array `cards` Constraints: `1 ≤ cards.length ≤ 100, 1 ≤ cards[i] ≤ 50.` - `[output]` an integer","solution":"def max_odd_sum_groups(cards): Determines the maximum number of odd-sum groups that can be formed from the deck of cards. Args: cards (list of int): The list of card numbers. Returns: int: The maximum number of odd-sum groups. odd_sum_groups = 0 current_sum = 0 for card in cards: current_sum += card if current_sum % 2 != 0: odd_sum_groups += 1 current_sum = 0 # reset current sum after forming an odd-sum group return odd_sum_groups"},{"question":"Alice, a botanist, is studying a rare species of flowers found in the enchanted forest. She categorized the flowers based on their petals, and each flower can have a different number of petals. Petals are represented as integers in a petal array, and Alice needs your help to identify a special property among these petal arrays. A petal array is said to be harmonious if the greatest common divisor (GCD) of the entire array of petals is greater than 1. Alice wants to develop a program that checks if a given petal array is harmonious and returns the maximum GCD greater than 1 that can be obtained from that array. Let\'s formalize this with an example: Consider a petal array [2, 4, 6], the GCD of these numbers is 2, therefore the array is harmonious, and the maximum GCD is 2. If the petal array is [4, 8, 16, 32], the overall GCD is 4 which is greater than 1, thus it is harmonious, and the maximum GCD is 4. Write a program that receives multiple test cases, each containing a petal array, and for each, determine if the array is harmonious. If it is, return the maximum GCD greater than 1; otherwise, return -1. -----Input----- - The first line of input contains an integer T denoting the number of test cases. - For each test case, the first line contains an integer N denoting the number of petals in the array. - The next line contains N space-separated integers denoting the petal array. -----Output----- For each test case, print a single integer: the maximum GCD greater than 1 if the array is harmonious, otherwise -1. -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 105 - 1 ≤ petals[i] ≤ 109 -----Example----- Input: 2 3 2 4 6 4 4 8 16 32 Output: 2 4 -----Explanation----- Example case 1. The GCD of the petal array [2, 4, 6] is 2 which is greater than 1, so the array is harmonious and the maximum GCD is 2. Example case 2. The GCD of the petal array [4, 8, 16, 32] is 4 which is greater than 1, making the array harmonious with the maximum GCD being 4.","solution":"import math from functools import reduce def find_max_gcd(petal_array): Returns the maximal GCD greater than 1 if the array is harmonious, otherwise -1. # Function to calculate GCD of two numbers def gcd(a, b): while b: a, b = b, a % b return a # Calculate GCD of the entire array overall_gcd = reduce(gcd, petal_array) # If GCD is greater than 1, return it, else return -1 return overall_gcd if overall_gcd > 1 else -1 def harmonious_petals(T, test_cases): Processes multiple test cases to determine the maximum GCD greater than 1 if the array is harmonious. Returns a list of results for each test case. results = [] for i in range(T): N, petal_array = test_cases[i] result = find_max_gcd(petal_array) results.append(result) return results"},{"question":"Create a method that takes a string as input, and outputs the first non-repeated character in the string. The method should be case-sensitive and handle strings with special characters and spaces. If all characters are repeated or the string is empty, the method should output an empty string `\\"\\"`. Examples: ```python first_non_repeated_char(\\"swiss\\") # => \\"w\\" first_non_repeated_char(\\"repeater\\") # => \\"a\\" first_non_repeated_char(\\"aAbBABac\\") # => \\"b\\" first_non_repeated_char(\\"aabbcc\\") # => \\"\\" ```","solution":"def first_non_repeated_char(s): Returns the first non-repeated character in the string s. If all characters are repeated or the string is empty, returns an empty string \\"\\". char_count = {} # Count the occurrences of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find and return the first character with a count of 1 for char in s: if char_count[char] == 1: return char # If no non-repeated character found, return empty string return \\"\\""},{"question":"Write a function that takes a list of integers and determines if there are two distinct elements in the list whose sum is zero. If such a pair exists, return those two elements as a tuple (smaller number, larger number). If no such pair exists, return None. Example ----- Given `[-1, 2, 3, -3, 5, 1]`, the function should return `(-3, 3)`. Another example ----- Given `[4, -7, 9, -4, 5]`, the function should return `(-4, 4)`. And another example ----- Given `[7, 8, 3, 1, 9]`, the function should return `None`. Note ----- If there are multiple pairs that sum to zero, you may return any one of them.","solution":"def find_zero_sum_pair(arr): Determine if there are two distinct elements in the list whose sum is zero. If such a pair exists, return those two elements as a tuple (smaller number, larger number). If no such pair exists, return None. seen = set() for num in arr: if -num in seen: return (min(num, -num), max(num, -num)) seen.add(num) return None"},{"question":"Maria is planning to run a marathon and needs to increase her stamina by running a certain amount each week. She has created a schedule in which she runs different distances on different days and wishes to ensure that she never runs the same distance two days in a row. Additionally, the total distance she runs each week should reach or exceed a minimum milestone for her training. Given her running schedule for a week, help her determine if it\'s possible to shuffle her runs to meet the requirements. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - First line of each test case contains d, the number of days in her running schedule (always 7 for a week) - Second line contains m, the minimum milestone distance she aims to run in a week - Third line contains d space-separated integers B1,B2,...,Bd, denoting the distance she plans to run each of the d days -----Output:----- For each test case, print Possible if she can reshuffle her schedule to meet the requirements. Otherwise, print Impossible. -----Constraints----- - 1 leq T leq 100 - d = 7 - 1 leq m leq 10^4 - 1 leq Bi leq 10^3 -----Sample Input:----- 3 7 25 3 5 1 2 3 4 7 7 20 4 4 4 4 4 4 4 7 30 10 5 5 5 5 3 2 -----Sample Output:----- Possible Impossible Possible -----EXPLANATION:----- - Example case 1 Total distance: 3 + 5 + 1 + 2 + 3 + 4 + 7 = 25 She can shuffle her runs to avoid consecutive same distances while meeting the total milestone. - Example case 2 Total distance: 4 + 4 + 4 + 4 + 4 + 4 + 4 = 28 Even though the total distance covers the milestone, it\'s impossible to prevent running the same distance consecutively due to all distances being identical. - Example case 3 Total distance: 10 + 5 + 5 + 5 + 5 + 3 + 2 = 35 She can shuffle her runs to avoid consecutive same distances while exceeding the total milestone.","solution":"def can_meet_milestone(d, m, runs): Determines if it is possible to reshuffle the running schedule to meet the requirements of not running the same distance consecutively and the total distance covering the milestone. total_distance = sum(runs) if total_distance < m: return \\"Impossible\\" run_count = {} for run in runs: if run in run_count: run_count[run] += 1 else: run_count[run] = 1 max_run_freq = max(run_count.values()) if max_run_freq > (d + 1) // 2: return \\"Impossible\\" return \\"Possible\\" def process_test_cases(test_cases): results = [] for case in test_cases: d, m, runs = case[\'d\'], case[\'m\'], case[\'runs\'] result = can_meet_milestone(d, m, runs) results.append(result) return results"},{"question":"We have an infinite two-dimensional grid. Initially, a robot is located at the origin point (0, 0) facing the positive y-axis direction. The robot can receive a sequence of instructions to move in this grid. These instructions are encoded as a string. The robot can receive the following instructions: - \'G\': move forward one unit in the direction it is currently facing. - \'L\': turn 90 degrees to the left. - \'R\': turn 90 degrees to the right. Write a function `isRobotBounded(instructions)` that takes in a string containing the sequence of instructions and returns `True` if the robot is bounded within a circle (i.e., it returns to its initial position after executing the instructions) and `False` otherwise. Examples: - If instructions = \\"GGLLGG\\", the robot goes forward 2 units, turns left, goes forward 2 units, turns left again, and returns to the initial position. So, the function should return `True`. - If instructions = \\"GG\\", the robot moves forward 2 units and cannot return to the initial position, so the function should return `False`. Notes: - The string length of instructions will be at most 100. - The directions the robot can face after executing the turns are north (positive y-axis), east (positive x-axis), south (negative y-axis), and west (negative x-axis). ```python def isRobotBounded(instructions): # Your code here ```","solution":"def isRobotBounded(instructions): Returns True if the robot is bounded within a circle (i.e., it returns to its initial position after executing the instructions), otherwise returns False. # Possible directions the robot can face directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # north, east, south, west x, y = 0, 0 # initial position direction_index = 0 # initial direction is north for char in instructions: if char == \'G\': x += directions[direction_index][0] y += directions[direction_index][1] elif char == \'L\': direction_index = (direction_index - 1) % 4 # turn left elif char == \'R\': direction_index = (direction_index + 1) % 4 # turn right # The robot is bounded if it returns to the origin or if it ends up facing a different direction return (x == 0 and y == 0) or direction_index != 0"},{"question":"You are given a staircase with `n` steps, and you can either climb 1 or 2 steps at a time. You need to determine the number of distinct ways to reach the top of the staircase. For example, if there are 4 steps, you can reach the top in 5 different ways: 1. `1 step + 1 step + 1 step + 1 step` 2. `1 step + 1 step + 2 steps` 3. `1 step + 2 steps + 1 step` 4. `2 steps + 1 step + 1 step` 5. `2 steps + 2 steps` Write a function `climbStairs(n)` that takes an integer `n` representing the number of steps and returns the number of distinct ways to reach the top. # Example ```python climbStairs(3) # returns 3 climbStairs(4) # returns 5 ``` # Constraints - `1 <= n <= 45` # Hints - Think about the ways to reach the current step from the previous steps. - Use dynamic programming to store results of previous computations to avoid redundant calculations. # Function Signature ```python def climbStairs(n: int) -> int: # your code here pass ```","solution":"def climbStairs(n: int) -> int: if n == 1: return 1 elif n == 2: return 2 # Dynamic programming approach dp = [0] * n dp[0] = 1 dp[1] = 2 for i in range(2, n): dp[i] = dp[i - 1] + dp[i - 2] return dp[n - 1]"},{"question":"Given a list of words, you are to group anagrams together. An anagram is a word formed by rearranging the letters of another. The output should display each group of anagrams as a sorted sublist of words, and the groups should also be presented in lexicographically sorted order based on the first word in each group. -----Input----- t – the number of words, followed by t lines where each line contains a single word. [t <= 10^4]. Words will have lengths between 1 and 100. Only lowercase letters are used. -----Output----- Output the groups of anagrams where each group is sorted lexicographically, and each group is on a new line. The groups should be sorted based on the first word of each group. -----Example----- Input: 6 eat tea tan ate nat bat Output: [ate, eat, tea] [bat] [nat, tan]","solution":"from collections import defaultdict def group_anagrams(words): Groups the anagrams together in lexicographical order. :param words: List of words to group. :return: List of lists where each sublist is a group of anagrams sorted lexicographically. anagram_dict = defaultdict(list) for word in words: sorted_word = \\"\\".join(sorted(word)) anagram_dict[sorted_word].append(word) anagram_groups = [] for group in anagram_dict.values(): anagram_groups.append(sorted(group)) anagram_groups.sort(key=lambda x: x[0]) return anagram_groups"},{"question":"In the kingdom of XYZ, there exists a special type of binary strings called \\"Balanced Binary Strings.\\" A binary string is said to be balanced if the number of \'0\'s and \'1\'s are the same. For example, \\"0101\\" and \\"0011\\" are balanced, while \\"01\\" and \\"001\\" are not. You are given a binary string S of length N where 1 leq N leq 1000. You need to determine the number of balanced binary substrings in S. A substring is a contiguous sequence of characters within a string. Example: Input: - A single line containing the binary string S. Output: - Print a single integer — the number of balanced binary substrings in S. Constraints: - 1 leq N leq 1000 - The string contains only \'0\' and \'1\'. Sample Input: \\"00110011\\" Sample Output: 6 Explanation: The balanced substrings in the example are: \\"0011\\", \\"01\\", \\"1100\\", \\"10\\", \\"0011\\", \\"01\\" Each of these substrings contain an equal number of \'0\'s and \'1\'s. Thus, the output is 6.","solution":"def count_balanced_binary_substrings(s): Returns the number of balanced binary substrings in the binary string s. count = 0 prev_run_length = 0 curr_run_length = 1 for i in range(1, len(s)): if s[i] == s[i-1]: curr_run_length += 1 else: count += min(prev_run_length, curr_run_length) prev_run_length = curr_run_length curr_run_length = 1 count += min(prev_run_length, curr_run_length) return count"},{"question":"# Background You are managing a database that tracks events with timestamps. Each event comes with a timestamp in the format \\"YYYY-MM-DD hh:mm:ss\\". In order to maintain an accurate log, you need to sort the events chronologically. # Task: Given a list of events with their timestamps, sort the events in ascending order based on their timestamps. # Assumptions: * Timestamps are unique. * The input list will contain at least one event. # Example: Input: ``` [ {\\"event\\": \\"User Login\\", \\"timestamp\\": \\"2023-01-01 12:00:00\\"}, {\\"event\\": \\"File Upload\\", \\"timestamp\\": \\"2023-01-01 12:00:05\\"}, {\\"event\\": \\"User Logout\\", \\"timestamp\\": \\"2023-01-01 13:00:00\\"} ] ``` Output: ``` [ {\\"event\\": \\"User Login\\", \\"timestamp\\": \\"2023-01-01 12:00:00\\"}, {\\"event\\": \\"File Upload\\", \\"timestamp\\": \\"2023-01-01 12:00:05\\"}, {\\"event\\": \\"User Logout\\", \\"timestamp\\": \\"2023-01-01 13:00:00\\"} ] ```","solution":"def sort_events(events): Sorts a list of events based on their timestamps in ascending order. Args: events (list of dict): A list of dictionaries, each containing \'event\' and \'timestamp\' keys. Returns: list of dict: The sorted list of events by timestamp. sorted_events = sorted(events, key=lambda event: event[\'timestamp\']) return sorted_events"},{"question":"You have been given a list of words and your task is to find the shortest word in the list which contains all the vowels (\'a\', \'e\', \'i\', \'o\', \'u\') at least once. If no such word exists, return an empty string. Words in the list may be in mixed case, but for the purpose of checking the presence of vowels, assume the words are case insensitive. Implement a function `find_shortest_vowel_word` that takes a list of strings as an argument and returns the shortest word containing all the vowels. # Example: ```python words = [\\"educAtion\\", \\"Intellectual\\", \\"Abstemious\\", \\"pseudohypoparathyroidism\\"] print(find_shortest_vowel_word(words)) # Output: \\"Abstemious\\" ``` # Constraints: - The input list will contain at least one word and at most 1000 words. - Each word will contain only alphabetical characters and have a length between 1 and 100 characters.","solution":"def find_shortest_vowel_word(words): Finds the shortest word in the list which contains all the vowels (\'a\', \'e\', \'i\', \'o\', \'u\'). If no such word exists, returns an empty string. Parameters: words (list): A list of strings. Returns: str: The shortest word containing all the vowels or an empty string if no such word exists. vowels = set(\\"aeiou\\") shortest_word = \\"\\" for word in words: lower_word = word.lower() # convert to lowercase for uniformity if vowels.issubset(set(lower_word)): # check if all vowels are in the word if shortest_word == \\"\\" or len(word) < len(shortest_word): shortest_word = word return shortest_word"},{"question":"Consider a rectangular grid of size `N x M`. You are given the coordinates of multiple points on this grid. A point is defined by its row and column index. The task is to find the number of rectangles that can be formed using these points as vertices. We define a rectangle by selecting four distinct points `(x1, y1)`, `(x1, y2)`, `(x2, y1)`, `(x2, y2)` such that: - `x1 < x2` and `y1 < y2` Write a function `count_rectangles` that takes the following parameters: - `N`: an integer representing the number of rows in the grid. - `M`: an integer representing the number of columns in the grid. - `points`: a list of tuples where each tuple contains the coordinates of a point `(x, y)`. The function should return the number of rectangles that can be formed using the given points. # Example: ``` count_rectangles(4, 4, [(1, 1), (1, 3), (3, 1), (3, 3), (2, 2)]) -> 1 ``` In this example, the points are: ``` (1, 1) (1, 3) x x (2, 2) x (3, 1) (3, 3) x x ``` The only rectangle that can be formed using these points has corners at `(1, 1)`, `(1, 3)`, `(3, 1)`, and `(3, 3)`. # Notes: - The integer `N` and `M` will be in the range `1 <= N, M <= 100`. - The points list can have between `0` and `N*M` elements. - A point `(x, y)` is guaranteed to be within the grid boundaries and will not be duplicated in the input list.","solution":"def count_rectangles(N, M, points): from collections import defaultdict # Create a set of points for quick lookup points_set = set(points) # Create a defaultdict of columns for each row row_to_cols = defaultdict(set) for x, y in points: row_to_cols[x].add(y) num_rectangles = 0 # Iterate over pairs of rows rows = sorted(row_to_cols.keys()) for i in range(len(rows)): for j in range(i + 1, len(rows)): row1, row2 = rows[i], rows[j] common_columns = row_to_cols[row1].intersection(row_to_cols[row2]) # Common columns are sorted common_columns = sorted(common_columns) if len(common_columns) < 2: continue # Count rectangles formed by pairs of columns in the common_columns for k in range(len(common_columns)): for l in range(k+1, len(common_columns)): y1 = common_columns[k] y2 = common_columns[l] if (row1, y1) in points_set and (row1, y2) in points_set and (row2, y1) in points_set and (row2, y2) in points_set: num_rectangles += 1 return num_rectangles"},{"question":"Tom the Gardener has a rectangular garden with dimensions n x m. He wants to plant exactly p trees in such a way that any two trees do not have the same row or column. Your task is to help Tom to determine how many different ways he can plant exactly p trees in his garden following the given constraint. A way is defined by selecting p distinct rows and p distinct columns and planting a tree at each intersection of the selected rows and columns. -----Input----- The first and only line of the input contains three integers n, m, and p (1 ≤ n, m ≤ 1000, 1 ≤ p ≤ min(n, m)) — the dimensions of the garden and the number of trees to be planted. -----Output----- Print one integer — the number of different ways Tom can plant exactly p trees in his garden as described. -----Examples----- Input 3 3 2 Output 6 Input 4 5 3 Output 60 -----Note----- In the first sample case: Tom the Gardener wants to plant 2 trees in a 3x3 garden. He can select any 2 rows out of 3 and any 2 columns out of 3. Therefore, the number of ways is calculated as combination of 3 choose 2 (from rows) multiplied by combination of 3 choose 2 (from columns), which gives us 3 * 3 = 9 possible ways to plant the trees. In the second sample case: Tom the Gardener wants to plant 3 trees in a 4x5 garden. He can select any 3 rows out of 4 and any 3 columns out of 5. Therefore, the number of ways is the combination of 4 choose 3 (from rows) multiplied by combination of 5 choose 3 (from columns), which gives us 4 * 10 = 40 possible ways to plant the trees.","solution":"from math import comb def plant_trees(n, m, p): Returns the number of ways to plant exactly p trees in a garden of dimensions n x m such that no two trees share the same row or column. if p > n or p > m: return 0 return comb(n, p) * comb(m, p)"},{"question":"The school library has received a shipment of n new books that need to be labeled and arranged on the shelves. Each book is unique and labeled with a number from 1 to 2n. The librarian has a special rule for arranging the books: no two books should be placed in positions such that their labels are relatively prime. Two numbers a and b are considered relatively prime if their greatest common divisor (gcd) is 1. Given t test cases with each test case consisting of one integer n, determine a possible arrangement of the books such that no two books in positions 1 to n have relatively prime labels. If multiple solutions exist, you may return any one of them. Note: It is guaranteed that a solution always exists for the given constraints. # Input The first line contains one integer t (1 leq t leq 100) — the number of test cases. For each test case, there is one line containing an integer n (1 leq n leq 100) — the number of books. # Output For each test case, output n space-separated distinct integers from 1 to 2n representing the labels of the books such that no two books\' labels are relatively prime. # Example Input 3 2 3 4 Output 2 4 4 6 8 2 4 6 8 # Note In the first test case, the labels 2 and 4 are not relatively prime. In the second test case, no two of the labels 4, 6, and 8 are relatively prime. In the third test case, labels 2, 4, 6, and 8 are chosen such that no two are relatively prime.","solution":"def arrange_books(t, test_cases): For each test case, given an integer n, determine an arrangement of books such that no two books\' labels are relatively prime. :param t: Number of test cases :param test_cases: List of integers representing the test cases :return: A list of lists, where each sublist is the arrangement for its respective test case arrangements = [] for n in test_cases: arrangement = [2 * (i + 1) for i in range(n)] arrangements.append(arrangement) return arrangements"},{"question":"You are given an array of integers where some elements appear twice and others appear once. Each element in the array is within the range `[1, n]` inclusive, where `n` is the length of the array. Write a function to find all the integers between 1 and `n` that do not appear in the array. For example: ``` Input: [4, 3, 2, 7, 8, 2, 3, 1] Output: [5, 6] ``` Note: - You must write an algorithm that runs in O(n) time and uses O(1) extra space. - You can modify the input array to achieve the desired output. The function should take a list of integers as input and return a list of integers as output.","solution":"def find_disappeared_numbers(nums): Finds all numbers between 1 and n that do not appear in the array nums. Parameters: nums (List[int]): List of integers where each integer is between 1 and n inclusive. Returns: List[int]: List of integers that do not appear in nums. n = len(nums) # Mark the presence of numbers by index for i in range(n): index = abs(nums[i]) - 1 if nums[index] > 0: nums[index] = -nums[index] # Collect numbers that are still positive result = [] for i in range(n): if nums[i] > 0: result.append(i + 1) return result"},{"question":"A ship is navigating through a channel which has a specific width and depth. The coordinates of the starting point of the ship, the destination point, and a series of obstacles (which represent rocks in the channel) are given. Your task is to determine whether the ship can travel from the starting point to the destination without hitting any of the obstacles. You can assume that the ship always travels in a straight line (a direct path) from the starting point to the destination point. The obstacles are circles with centers and radii provided to you. The ship cannot touch or intersect the obstacles. If the ship can reach the destination without hitting any obstacles, you should output \\"YES\\". Otherwise, output \\"NO\\". -----Input:----- - The first line contains four integers `x1`, `y1`, `x2`, `y2` representing the coordinates of the starting point (x1, y1) and the destination point (x2, y2) of the ship. - The second line contains an integer `N`, the number of obstacles in the channel. - The next `N` lines each contain three integers `xi`, `yi`, and `ri`, representing the center (xi, yi) and radius `ri` of the `i^{th}` obstacle. -----Output:----- A single line containing \\"YES\\" if the ship can travel from the starting point to the destination point without hitting any obstacles; otherwise, \\"NO\\". -----Constraints:----- - -10^4 leq x1, y1, x2, y2, xi, yi leq 10^4 - 1 leq N leq 1000 - 1 leq ri leq 100 -----Sample Input:----- 2 3 10 8 3 5 5 3 7 5 2 9 7 1 -----Sample Output:----- NO In this example, the ship must navigate from point (2, 3) to point (10, 8). The obstacles (5,5) with radius 3, (7,5) with radius 2, and (9,7) with radius 1 create a situation where the ship\'s path intersects or comes too close to these obstacles, hence the output is \\"NO\\".","solution":"def can_ship_travel_without_hitting_obstacles(x1, y1, x2, y2, obstacles): import math def is_point_to_segment_distance_less_than_circle(center_x, center_y, radius, x1, y1, x2, y2): Check if the distance from center of the circle to the segment is less than the circle\'s radius. def distance(x1, y1, x2, y2): return math.sqrt((x1 - x2)**2 + (y1 - y2)**2) if distance(center_x, center_y, x1, y1) <= radius or distance(center_x, center_y, x2, y2) <= radius: return True if (x1 == x2 and y1 == y2): return distance(center_x, center_y, x1, y1) <= radius A = center_x - x1 B = center_y - y1 C = x2 - x1 D = y2 - y1 dot = A * C + B * D len_sq = C * C + D * D param = dot / len_sq if len_sq != 0 else -1 if param < 0: nearest_x, nearest_y = x1, y1 elif param > 1: nearest_x, nearest_y = x2, y2 else: nearest_x = x1 + param * C nearest_y = y1 + param * D return distance(center_x, center_y, nearest_x, nearest_y) <= radius for center_x, center_y, radius in obstacles: if is_point_to_segment_distance_less_than_circle(center_x, center_y, radius, x1, y1, x2, y2): return \\"NO\\" return \\"YES\\""},{"question":"A robot named RoboRover is placed on an infinite 2D grid at the origin point (0, 0). It is given a sequence of commands to move on the grid. Each command is one of four types: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). RoboRover moves one unit in the respective direction for each command. Your task is to determine the total Euclidean distance traveled by RoboRover after executing all commands in the given sequence. The Euclidean distance between two points (x1, y1) and (x2, y2) is defined as sqrt{(x2 - x1)^2 + (y2 - y1)^2}. Use this formula to calculate the total distance traveled by RoboRover. Note: The distance should be rounded to 2 decimal places. -----Input:----- - First line contains an integer N, the number of commands. - Second line contains a string of N characters each being one of \'U\', \'D\', \'L\', \'R\'. -----Output:----- Print a single value, the total Euclidean distance traveled by RoboRover, rounded to 2 decimal places. -----Constraints----- - 1 leq N leq 100000 - The command string will only consist of the characters \'U\', \'D\', \'L\', \'R\'. -----Sample Input:----- 5 UUDDL -----Sample Output:----- 5.00 -----EXPLANATION:----- Starting at (0, 0), RoboRover moves: - \'U\' -> (0, 1) - \'U\' -> (0, 2) - \'D\' -> (0, 1) - \'D\' -> (0, 0) - \'L\' -> (-1, 0) The Euclidean distances for each move: - Move 1: From (0, 0) to (0, 1): 1 unit - Move 2: From (0, 1) to (0, 2): 1 unit - Move 3: From (0, 2) to (0, 1): 1 unit - Move 4: From (0, 1) to (0, 0): 1 unit - Move 5: From (0, 0) to (-1, 0): 1 unit Total distance traveled = 1 + 1 + 1 + 1 + 1 = 5.00","solution":"import math def total_euclidean_distance(n, commands): Calculate total Euclidean distance traveled by RoboRover after executing all commands. :param n: int, number of commands :param commands: str, sequence of commands :return: float, total Euclidean distance traveled, rounded to 2 decimal places x, y = 0, 0 total_distance = 0.0 for command in commands: prev_x, prev_y = x, y if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 # Calculate the Euclidean distance for the move total_distance += math.sqrt((x - prev_x) ** 2 + (y - prev_y) ** 2) return round(total_distance, 2)"},{"question":"You are given a binary matrix M with dimensions NxM. A cell in the matrix has value 1 if there is an obstacle in that cell, otherwise the cell has value 0. Your task is to determine the minimum path length from the top-left corner cell (0,0) to the bottom-right corner cell (N-1, M-1) moving only through cells that contain the value 0. You can only move up, down, left, or right from a given cell. If there is no such path, return -1. -----Input----- - The first line of the input contains two integers N and M representing the number of rows and columns in the matrix. - The next N lines each contains M space-separated integers, each representing the value in the cell (either 0 or 1). -----Output----- Print a single integer representing the minimum path length or -1 if there is no valid path. -----Constraints----- - 1 le N, M le 1000 - Each cell contains either 0 or 1 -----Example Input----- 3 3 0 1 0 0 0 0 1 0 0 -----Example Output----- 5 -----Example Input----- 3 3 0 1 1 1 0 1 1 0 0 -----Example Output----- -1","solution":"from collections import deque def min_path_length(matrix): Determines the minimum path length in a binary matrix from (0,0) to (N-1, M-1) :param matrix: List[List[int]] A binary matrix with obstacles :return: int The length of the shortest path, or -1 if no path exists N = len(matrix) M = len(matrix[0]) # Check if the start or end is blocked if matrix[0][0] == 1 or matrix[N-1][M-1] == 1: return -1 # Directions vectors for moving up, down, left, or right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() # If we reached the bottom-right cell if r == N-1 and c == M-1: return dist # Explore all possible directions for dr, dc in directions: nr, nc = r + dr, c + dc # Check if the new position is within bounds and not visited and not an obstacle if 0 <= nr < N and 0 <= nc < M and (nr, nc) not in visited and matrix[nr][nc] == 0: queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) # If we exhaust the queue without finding the path return -1"},{"question":"Design a function `matrix_transpose` that returns the transpose of a given matrix. # Parameters: - The function `matrix_transpose` should accept a single argument: - A 2D list (list of lists) representing the matrix `A`. # Output: - The function should return the transpose of the input matrix as a 2D list. # Constraints: 1. All rows in the input matrix will have the same number of elements (i.e., the input matrix is well-formed). 2. The input matrix can be empty, in which case the function should return an empty list `[]`. # Examples: Example 1: ```python matrix_transpose([[1, 2, 3], [4, 5, 6]]) ``` Output: ```python [[1, 4], [2, 5], [3, 6]] ``` Example 2: ```python matrix_transpose([[1, 2], [3, 4], [5, 6]]) ``` Output: ```python [[1, 3, 5], [2, 4, 6]] ``` Example 3: ```python matrix_transpose([[1]]) ``` Output: ```python [[1]] ``` Example 4: ```python matrix_transpose([]) ``` Output: ```python [] ``` # Notes: - The transpose of a matrix is obtained by swapping its rows with its columns. - Ensure that the function handles various edge cases, such as an empty matrix and matrices of different shapes (e.g., square and rectangular matrices).","solution":"def matrix_transpose(A): Returns the transpose of the given matrix A. Parameters: - A: a 2D list (list of lists) representing the matrix Returns: - The transpose of the input matrix as a 2D list if not A: return [] return [[A[j][i] for j in range(len(A))] for i in range(len(A[0]))]"},{"question":"Write a function named `calculate_time_diff` that takes two time strings in the format \\"HH:MM AM/PM\\" and returns the difference between the two times in minutes. The function should work for both the same day and overnight scenarios (where the second time is past midnight but still considered earlier in the day than the first time). For example: ```python calculate_time_diff(\\"02:30 PM\\", \\"03:45 PM\\") == 75 calculate_time_diff(\\"11:30 PM\\", \\"01:15 AM\\") == 105 calculate_time_diff(\\"10:30 AM\\", \\"09:30 AM\\") == 1380 ``` You may assume the input strings are always in the correct format and represent valid times. Avoid using any built-in library functions directly related to datetime or time manipulation to solve this problem.","solution":"def calculate_time_diff(time1, time2): Calculate the difference between two times in \\"HH:MM AM/PM\\" format and return the difference in minutes. def convert_to_minutes(time): hh, mm_ampm = time.split(\':\') mm, ampm = mm_ampm[:2], mm_ampm[3:] hh, mm = int(hh), int(mm) if ampm == \\"PM\\" and hh != 12: hh += 12 elif ampm == \\"AM\\" and hh == 12: hh = 0 return hh * 60 + mm minutes1 = convert_to_minutes(time1) minutes2 = convert_to_minutes(time2) diff = minutes2 - minutes1 if diff < 0: diff += 24 * 60 return diff"},{"question":"Implement a function named `find_common_elements` that takes two lists of integers and returns a new list containing only the unique elements that are present in both of the input lists. The elements in the resulting list should be in ascending order. Example: ```python list1 = [1, 3, 4, 6, 7, 7, 8] list2 = [4, 4, 5, 6, 8, 8, 9] find_common_elements(list1, list2) -> [4, 6, 8] ```","solution":"def find_common_elements(list1, list2): Returns a sorted list containing only the unique elements that are present in both input lists. # Convert lists to sets to find common elements and ensure uniqueness set1 = set(list1) set2 = set(list2) # Find intersection of the two sets common_elements = set1 & set2 # Convert set to sorted list return sorted(common_elements)"},{"question":"You are given a list of integers representing the prices of different items in a store. You have a certain amount of money, and you want to buy as many items as possible without exceeding your budget. The items can be purchased in any order. -----Input:----- - The first line contains an integer T, the number of test cases. - The first line of each test case contains an integer B, the total budget. - The second line of each test case contains an integer N, the number of items in the store. - The third line of each test case contains N space-separated integers representing the prices of the items. -----Output:----- For each test case, print a single integer, the maximum number of items that can be purchased without exceeding the budget. -----Sample Input:----- 2 50 5 10 20 30 40 50 100 6 10 20 30 40 50 60 -----Sample Output:----- 2 4 -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ B ≤ 10^9 - 1 ≤ N ≤ 100000 - 1 ≤ price of each item ≤ 10^9","solution":"def max_items_within_budget(T, test_cases): results = [] for i in range(T): B = test_cases[i][0] N = test_cases[i][1] prices = test_cases[i][2] prices.sort() total_spent = 0 count = 0 for price in prices: if total_spent + price <= B: total_spent += price count += 1 else: break results.append(count) return results # Example usage: # T = 2 # test_cases = [ # (50, 5, [10, 20, 30, 40, 50]), # (100, 6, [10, 20, 30, 40, 50, 60]) # ] # print(max_items_within_budget(T, test_cases)) # Output should be [2, 4]"},{"question":"Given an array of integers, return the maximum sum of a subarray with length exactly \'k\'. A subarray is a contiguous part of an array. Example 1: Input: [2, 1, 5, 1, 3, 2], k = 3 Output: 9 Explanation: Subarray with maximum sum is [5, 1, 3]. Example 2: Input: [2, 3, 4, 1, 5], k = 2 Output: 7 Explanation: Subarray with maximum sum is [3, 4]. Note: - The length of the given array will not exceed 10,000. - The value of elements in the array will be in the range [-10,000, 10,000].","solution":"def max_subarray_sum(arr, k): Returns the maximum sum of a subarray with length exactly \'k\'. Parameters: arr (list): List of integers. k (int): Length of the subarray. Returns: int: Maximum sum of subarray with length \'k\'. if len(arr) < k: return 0 # Initial sum of the first \'k\' elements max_sum = current_sum = sum(arr[:k]) # Sliding window approach to find maximum sum subarray of length \'k\' for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given an integer array nums, your task is to find a contiguous subarray (containing at least one number) which has the maximum product, and return its product. Example 1: Input: nums = [2,3,-2,4] Output: 6 Explanation: The subarray [2,3] has the maximum product 2 * 3 = 6. Example 2: Input: nums = [-2,0,-1] Output: 0 Explanation: The result cannot be 2, because [-2,-1] is not a contiguous subarray; the subarray with the maximum product is [0]. Example 3: Input: nums = [-4,-3,-2] Output: 12 Explanation: The subarray [-4,-3] has the maximum product -4 * -3 = 12. Constraints: - 1 <= nums.length <= 200 - -10 <= nums[i] <= 10","solution":"def maxProduct(nums): Finds the maximum product of a contiguous subarray in the given list of integers. :param nums: List of integers :return: Maximum product of a contiguous subarray if not nums: return 0 # Initialize the variables to the first element max_so_far = nums[0] min_so_far = nums[0] result = nums[0] for i in range(1, len(nums)): current = nums[i] # When multiplying by a negative number, max and min are swapped if current < 0: max_so_far, min_so_far = min_so_far, max_so_far max_so_far = max(current, max_so_far * current) min_so_far = min(current, min_so_far * current) result = max(result, max_so_far) return result"},{"question":"# Monitoring Employee Work Hours A company has set up a system to track the number of hours each employee works per day. Each day, the system records daily logs of work hours, which are then saved in a list. The company management wants to assess the total hours each employee has worked over a given period and identify the employee who has worked the most hours. You are given a list of logs, where each log is represented as a dictionary. Each dictionary contains two keys: - `employee` - a string representing the employee\'s name. - `hours` - an integer representing the number of hours the employee worked on that day. Your task is to write a function that processes the list of logs and returns the name of the employee who has worked the most total hours. If multiple employees have the same highest total hours, return the name that appears first alphabetically. # Function Signature ```python def most_hours_worked(logs: List[Dict[str, Union[str, int]]]) -> str: ``` # Input - `logs` (List[Dict[str, Union[str, int]]]): A list of dictionaries where each dictionary contains: - `employee` (str): The name of the employee. - `hours` (int): The number of hours the employee worked that day. # Output - `str`: The name of the employee with the highest total hours worked. # Example ```python logs = [ {\'employee\': \'Alice\', \'hours\': 5}, {\'employee\': \'Bob\', \'hours\': 8}, {\'employee\': \'Alice\', \'hours\': 7}, {\'employee\': \'Bob\', \'hours\': 6}, {\'employee\': \'Charlie\', \'hours\': 10}, ] assert most_hours_worked(logs) == \'Alice\' ``` In the above example, Alice has 12 total hours (5+7), Bob has 14 total hours (8+6), and Charlie has 10 total hours. Therefore, Alice is the employee with the highest total hours worked.","solution":"from typing import List, Dict, Union def most_hours_worked(logs: List[Dict[str, Union[str, int]]]) -> str: Function to identify the employee who has worked the most total hours. Arguments: logs : List[Dict[str, Union[str, int]]] - A list of dictionaries where each dictionary contains: - employee (str): The name of the employee. - hours (int): The number of hours the employee worked that day. Returns: str - The name of the employee with the highest total hours worked. # Dictionary to keep track of the total hours for each employee total_hours = {} for log in logs: employee = log[\'employee\'] hours = log[\'hours\'] if employee in total_hours: total_hours[employee] += hours else: total_hours[employee] = hours # Find the employee with the maximum total hours max_hours = -1 max_employee = \\"\\" for employee, hours in total_hours.items(): if hours > max_hours or (hours == max_hours and employee < max_employee): max_hours = hours max_employee = employee return max_employee"},{"question":"Write a function that takes an integer array nums and an integer target as inputs and returns the indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. # Function Signature ```python def two_sum(nums: List[int], target: int) -> List[int]: pass ``` # Example ```python assert two_sum([2, 7, 11, 15], 9) == [0, 1] assert two_sum([3, 2, 4], 6) == [1, 2] assert two_sum([3, 3], 6) == [0, 1] ``` # Constraints - 2 <= nums.length <= 10^4 - -10^9 <= nums[i] <= 10^9 - -10^9 <= target <= 10^9 - Only one valid answer exists. # Notes - Think about time complexity for optimized performance. - The input list is not sorted.","solution":"from typing import List def two_sum(nums: List[int], target: int) -> List[int]: num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i # Although problem guarantees exactly one solution, good to return an empty list if no result return []"},{"question":"Given an n x m matrix where each cell is either empty (represented by \'.\') or contains an obstacle (represented by \'X\'), determine the number of different paths from the top-left corner (0,0) to the bottom-right corner (n-1, m-1) such that you can only move down or right at any point in time. If there is no such path, return 0. Example 1: Input: grid = [[\'.\',\'.\',\'.\'], [\'.\',\'X\',\'.\'], [\'.\',\'.\',\'.\']] Output: 2 Explanation: The paths are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example 2: Input: grid = [[\'.\',\'X\',\'.\'], [\'.\',\'X\',\'.\'], [\'.\',\'.\',\'.\']] Output: 1 Explanation: The only path is: Down -> Down -> Right -> Right Example 3: Input: grid = [[\'.\',\'X\'], [\'X\',\'.\']] Output: 0 Explanation: There is no valid path to reach the bottom-right corner. Example 4: Input: grid = [[\'.\']] Output: 1 Explanation: The only path is to stay at the top-left corner. Example 5: Input: grid = [[\'X\']] Output: 0 Explanation: There is no valid path as the starting cell is blocked. Constraints: - 1 <= n, m <= 100 - grid[i][j] is either \'.\' or \'X\'.","solution":"def unique_paths_with_obstacles(grid): if not grid or grid[0][0] == \'X\': return 0 n = len(grid) m = len(grid[0]) dp = [[0 for _ in range(m)] for _ in range(n)] dp[0][0] = 1 # Starting point # Initialize first column for i in range(1, n): dp[i][0] = dp[i-1][0] if grid[i][0] == \'.\' else 0 # Initialize first row for j in range(1, m): dp[0][j] = dp[0][j-1] if grid[0][j] == \'.\' else 0 # Fill the rest of dp table for i in range(1, n): for j in range(1, m): if grid[i][j] == \'.\': dp[i][j] = dp[i-1][j] + dp[i][j-1] else: dp[i][j] = 0 return dp[-1][-1]"},{"question":"You are given an undirected graph with N vertices (numbered 1 through N) and M edges. Each edge has an associated non-negative weight. There\'s a festival going on, and you are in charge of setting up multiple stages for performances. The stages must be set up at the vertices and each stage corresponds to an independent set of vertices (no two vertices in the same set are adjacent). To maximize the event\'s success, the sum of the weights of the edges connecting these stages must be maximized. Determine the maximum possible weight sum of the edges connecting any two vertices, where each vertex can have at most one stage. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and M. - The following M lines each contain three integers u, v, and w denoting an edge between vertices u and v with weight w. -----Output----- For each test case, print a single line containing one integer — the maximum possible sum of the weights of the edges connecting the stages. -----Constraints----- - 1 le T le 500 - 2 le N le 1000 - 1 le M le 10,000 - 0 le w le 10^6 - The graph is connected and undirected -----Example Input----- 2 3 3 1 2 3 2 3 4 1 3 5 4 5 1 2 1 2 3 2 3 4 3 1 3 4 1 4 5 -----Example Output----- 5 7 -----Explanation----- Example case 1: The maximum weight connecting the stages is achieved by choosing edges (1, 2, 3) and (1, 3, 5), which sum up to 5 (the highest single edge weight). Example case 2: The maximum weight is obtained by selecting edge (1, 4) which has a weight of 5. Combining with (3, 4), we get a sum of weights 7.","solution":"def maximize_stage_edges(test_cases): results = [] for test in test_cases: N, M, edges = test max_weight = 0 for edge in edges: u, v, w = edge if w > max_weight: max_weight = w results.append(max_weight) return results def parse_input(input_str): data = input_str.strip().split(\'n\') T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, data[index].split()) index += 1 edges = [] for _ in range(M): u, v, w = map(int, data[index].split()) edges.append((u, v, w)) index += 1 test_cases.append((N, M, edges)) return test_cases"},{"question":"Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. Note: - You may assume that both nodes exist in the tree. - The tree can be represented as an array where the index represents the parent node. For example, for tree `[3, 5, 1, 6, 2, 0, 8, null, null, 7, 4]`, the binary tree is: ``` 3 / 5 1 / / 6 2 0 8 / 7 4 ``` Example: Input: root = [3, 5, 1, 6, 2, 0, 8, null, null, 7, 4], p = 5, q = 1 Output: 3 Explanation: The LCA of nodes 5 and 1 is 3. Input: root = [3, 5, 1, 6, 2, 0, 8, null, null, 7, 4], p = 5, q = 4 Output: 5 Explanation: The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the LCA definition.","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree_from_list(lst, parent_idx=0): Helper function to build a binary tree from a list. if parent_idx >= len(lst) or lst[parent_idx] is None: return None root = TreeNode(lst[parent_idx]) root.left = build_tree_from_list(lst, 2 * parent_idx + 1) root.right = build_tree_from_list(lst, 2 * parent_idx + 2) return root def lowest_common_ancestor(root, p, q): Finds the lowest common ancestor of two given nodes in a binary tree. if not root or root.val == p or root.val == q: return root left = lowest_common_ancestor(root.left, p, q) right = lowest_common_ancestor(root.right, p, q) if left and right: return root return left if left else right"},{"question":"Design a function that simulates a simplified financial portfolio and calculates the portfolio\'s total value after a given number of days, considering daily changes in the stock prices. A stock portfolio can be represented as a dictionary where keys are the stock names, and values are tuples containing the number of shares and the initial price per share. You will also be given a list of daily changes in the stock prices (as a dictionary) over a specified period. Your task is to calculate the total value of the portfolio after applying all the daily changes. Input: 1. A dictionary representing the portfolio with stock names as keys and tuples with the number of shares and initial price per share as values. 2. A list of dictionaries representing the daily changes in stock prices. Each dictionary contains stock names as keys and changes in prices as values. Output: - The total value of the portfolio after applying all daily changes. Example: ```python portfolio = { \'AAPL\': (10, 150), \'GOOGL\': (5, 1000), \'MSFT\': (8, 250) } daily_changes = [ {\'AAPL\': 5, \'GOOGL\': -10, \'MSFT\': 2}, {\'AAPL\': -3, \'GOOGL\': 20, \'MSFT\': -1}, {\'AAPL\': 2, \'GOOGL\': 15, \'MSFT\': 4}, ] # Function call calculate_portfolio_value(portfolio, daily_changes) ``` In this example, after all daily changes, the final prices would be: - \'AAPL\' price changes: 150 -> 155 -> 152 -> 154 - \'GOOGL\' price changes: 1000 -> 990 -> 1010 -> 1025 - \'MSFT\' price changes: 250 -> 252 -> 251 -> 255 The final value of the portfolio is: - 10 * 154 + 5 * 1025 + 8 * 255 = 1540 + 5125 + 2040 = 8705 So, the function should return 8705.","solution":"def calculate_portfolio_value(portfolio, daily_changes): Calculate the total value of the portfolio after applying all daily changes. :param portfolio: Dictionary representing the portfolio with stock names as keys and tuples with the number of shares and initial price per share as values. :param daily_changes: List of dictionaries representing the daily changes in stock prices. Each dictionary contains stock names as keys and changes in prices as values. :return: Total value of the portfolio after applying all daily changes. # Copy the initial prices from the portfolio current_prices = {stock: price for stock, (_, price) in portfolio.items()} # Apply daily changes to the stock prices for changes in daily_changes: for stock, change in changes.items(): if stock in current_prices: current_prices[stock] += change # Calculate the total value of the portfolio total_value = 0 for stock, (shares, _) in portfolio.items(): total_value += shares * current_prices[stock] return total_value"},{"question":"-----Problem Statement----- John is interested in sequences. Specifically, he is curious about sequences of integers where all elements of the sequence must be distinct and each integer in the sequence must lie within a given range. He wants to know how many such sequences of a given length can be formed. You are given an integer `L` denoting the length of the sequence, and two integers `A` and `B` denoting the range `[A, B]` (inclusive) from within which the integers can be chosen. Return the number of possible sequences modulo `1,000,000,007`. -----Input----- The first line of the input contains an integer `Q` denoting the number of test cases. The description of `Q` test cases follows. The first line of each test case contains three integers `L`, `A`, and `B`. -----Output----- For each test case, output a single line containing a single integer - the number of possible distinct sequences of length `L` that can be formed within the given range `[A, B]`, modulo `1,000,000,007`. -----Constraints----- - 1 ≤ Q ≤ 500 - 1 ≤ L ≤ 100 - 1 ≤ A ≤ B ≤ 1000 - The range `[A, B]` will always have a size greater than or equal to `L`. -----Example----- Input: 3 3 1 5 4 10 15 5 20 25 Output: 60 360 720 -----Explanation----- Example case 1. In the first example, the range is `[1, 5]` and the length of the sequence is `3`. There are `5` distinct numbers in the range, and we need to select `3` out of these `5` distinct numbers and arrange them in `3! = 6` ways for each selection of `3` numbers. Thus, the total number of possible sequences is `5P3 = 5! / 2! = 5 * 4 * 3 = 60`.","solution":"MOD = 1_000_000_007 def factorial(n): if n == 0 or n == 1: return 1 result = 1 for i in range(2, n+1): result = (result * i) % MOD return result def count_sequences(L, A, B): n = B - A + 1 # number of elements in the range [A, B] if L > n: return 0 # Calculate n! / (n-L)! num_of_sequences = factorial(n) // factorial(n - L) return num_of_sequences % MOD def solve(test_cases): results = [] for L, A, B in test_cases: results.append(count_sequences(L, A, B)) return results # Reading input data def read_input(input_string): data = input_string.strip().split() idx = 0 Q = int(data[idx]) idx += 1 test_cases = [] for _ in range(Q): L = int(data[idx]) A = int(data[idx+1]) B = int(data[idx+2]) test_cases.append((L, A, B)) idx += 3 return test_cases"},{"question":"Write a function `sum_square_diff(n)` that calculates the difference between the square of the sum and the sum of the squares of the first `n` natural numbers. Example: sum_square_diff(10) // returns 2640 (1 + 2 + ... + 10)² - (1² + 2² + ... + 10²) = 55² - 385 = 3025 - 385 = 2640 Constraints: - `n` will be a positive integer. - The function should be optimized for performance given that `n` can be a large number.","solution":"def sum_square_diff(n): Calculates the difference between the square of the sum and the sum of the squares of the first n natural numbers. Parameters: n (int): The upper limit for the first n natural numbers. Returns: int: The difference between the square of the sum and the sum of the squares. sum_of_numbers = n * (n + 1) // 2 sum_of_squares = n * (n + 1) * (2 * n + 1) // 6 square_of_sum = sum_of_numbers ** 2 return square_of_sum - sum_of_squares"},{"question":"Write a function called `group_by_owners` that takes a dictionary where the keys are filenames and the values are the corresponding owners\' names. The function should return a dictionary where the keys are owners\' names and the values are lists of filenames they own (in any order). # Example ```python input_data = { \'file1.txt\': \'Alice\', \'file2.txt\': \'Bob\', \'file3.txt\': \'Alice\', } output_data = { \'Alice\': [\'file1.txt\', \'file3.txt\'], \'Bob\': [\'file2.txt\'] } ``` # Your Task Implement the function `group_by_owners(input_data)` that transforms the input dictionary into the output dictionary as described above.","solution":"def group_by_owners(input_data): Takes a dictionary where keys are filenames and values are owners\' names, and returns a dictionary where keys are owners\' names and values are lists of filenames they own. :param input_data: dict, filenames as keys and owners\' names as values :return: dict, owners\' names as keys and lists of filenames as values output_data = {} for filename, owner in input_data.items(): if owner not in output_data: output_data[owner] = [] output_data[owner].append(filename) return output_data"},{"question":"You are given an m x n grid filled with either water (\'0\') or land (\'1\'). An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. You need to count the number of islands. An island is a group of connected lands and is isolated from other lands by water. Implement a function to calculate the number of islands in the grid. Example 1: Input: grid = [ [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] Output: 3 Example 2: Input: grid = [ [\\"1\\",\\"0\\",\\"0\\",\\"1\\"], [\\"0\\",\\"1\\",\\"1\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\"] ] Output: 4 Example 3: Input: grid = [ [\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\"] ] Output: 0 Constraints: - m == grid.length - n == grid[0].length - 1 <= m, n <= 50 - grid[i][j] is \'0\' or \'1\'.","solution":"def numIslands(grid): Returns the number of islands in the grid. if not grid: return 0 m, n = len(grid), len(grid[0]) num_islands = 0 def dfs(i, j): # Check if the current cell is out of bounds or is water if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == \'0\': return # Mark the cell as visited by setting it to \'0\' grid[i][j] = \'0\' # Recursively visit all adjacent cells (up, down, left, right) dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) for i in range(m): for j in range(n): if grid[i][j] == \'1\': num_islands += 1 dfs(i, j) return num_islands"},{"question":"Write a function that takes a list of integers and returns the smallest positive integer that is not present in the list. Example: ```python def missing_positive_integer(nums): # Your code here # Test examples: missing_positive_integer([1, 2, 3]) == 4 missing_positive_integer([3, 4, -1, 1]) == 2 missing_positive_integer([7, 8, 9, 11, 12]) == 1 missing_positive_integer([1, 1, 0, -1, -2]) == 2 ``` Explanation: - In the first example, the smallest positive integer not present in the list is 4. - In the second example, the input list does not have 2, which is the smallest positive integer missing. - For the third example, since the smallest numbers are greater than 1, the function should return 1. - In the last example, despite the negative numbers and zero, the function returns 2, considering the repeated 1.","solution":"def missing_positive_integer(nums): Returns the smallest positive integer that is not present in the list. # Create a set of all positive integers in the list positive_set = set(filter(lambda x: x > 0, nums)) # Start from 1 and find the first missing positive integer smallest_missing = 1 while smallest_missing in positive_set: smallest_missing += 1 return smallest_missing"},{"question":"Given an array of integers, your task is to sort the array such that all prime numbers appear at the beginning in ascending order, followed by non-prime numbers in ascending order. A number is considered prime if it has no positive divisors other than 1 and itself. For the sake of this problem, the number 1 is not considered prime. -----Input:----- - The first line will contain an integer n indicating the number of elements in the array. - The second line contains n space-separated integers representing the elements of the array. -----Output:----- Print the sorted array with prime numbers appearing first in ascending order, followed by non-prime numbers in ascending order. -----Constraints----- - 1 leq n leq 10^5 - 1 leq a_i leq 10^6 -----Sample Input 1:----- 6 3 8 4 7 6 2 -----Sample Output 1:----- 2 3 7 4 6 8 -----Sample Input 2:----- 5 10 1 11 17 20 -----Sample Output 2:----- 11 17 1 10 20 -----Explanation:----- For the first input, the prime numbers are 2, 3, and 7 which sorted give us 2 3 7. The non-prime numbers are 4, 6, and 8, which sorted give us 4 6 8. Thus, the final sorted array is 2 3 7 4 6 8. For the second input, the prime numbers are 11 and 17, and the non-prime numbers are 1, 10, and 20. Sorting primes gives us 11 17 and sorting the non-primes gives us 1 10 20. Thus, the final sorted array is 11 17 1 10 20.","solution":"def is_prime(num): if num < 2: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def sort_prime_and_nonprime(arr): primes = [x for x in arr if is_prime(x)] non_primes = [x for x in arr if not is_prime(x)] primes.sort() non_primes.sort() return primes + non_primes"},{"question":"Implement a function to compute the longest sequence of consecutive ones in a binary array. The array consists of only 0s and 1s. For example, given the array [1, 1, 0, 1, 1, 1], the function should return 3, which is the length of the longest sequence of consecutive 1s. Develop an efficient algorithm for this task, and consider edge cases such as an empty array or an array with no 1s. Your function should leverage optimal time and space complexity.","solution":"def longest_consecutive_ones(arr): Returns the length of the longest sequence of consecutive ones in the binary array. max_length = 0 current_length = 0 for num in arr: if num == 1: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"=====Function Descriptions===== concatenate The concatenate function in NumPy joins a sequence of arrays along an existing axis. (a). Using concatenate to join two 1D arrays import numpy array1 = numpy.array([1, 2, 3]) array2 = numpy.array([4, 5, 6]) print numpy.concatenate((array1, array2)) #Output [1 2 3 4 5 6] (b). Using concatenate to join two 2D arrays along rows import numpy array1 = numpy.array([[1, 2], [3, 4]]) array2 = numpy.array([[5, 6]]) print numpy.concatenate((array1, array2), axis=0) #Output [[1 2] [3 4] [5 6]] (c). Using concatenate to join two 2D arrays along columns import numpy array1 = numpy.array([[1, 2], [3, 4]]) array2 = numpy.array([[5, 6], [7, 8]]) print numpy.concatenate((array1, array2), axis=1) #Output [[1 2 5 6] [3 4 7 8]] =====Problem Statement===== You are given a space separated list of integers and an integer, k. Your task is to divide this list into k arrays of equal length and then concatenate them along the columns to form a 2D NumPy array. =====Input Format===== A single line of input containing a list of integers followed by an integer k, where the length of the list is divisible by k. =====Output Format===== Print the 2D NumPy array obtained by concatenating the k arrays along the columns.","solution":"import numpy as np def concatenate_list_to_2d_space_separated(lst, k): Given a space separated list of integers and an integer k, divides the list into k arrays of equal length and concatenate them along the columns to form a 2D NumPy array. Parameters: lst (str): Space separated list of integers. k (int): Number of arrays to divide the list into. Returns: np.ndarray: 2D array obtained by concatenating the k arrays along the columns. # Convert lst string to list of integers lst = list(map(int, lst.split())) n = len(lst) // k # Length of each segment # Divide the list into k arrays arrays = [np.array(lst[i * n: (i + 1) * n]) for i in range(k)] # Reshape each array to be a column vector and concatenate them along columns array_2d = np.concatenate([arr.reshape(-1, 1) for arr in arrays], axis=1) return array_2d"},{"question":"Alice loves exploring different patterns in arrays. Recently, she came across an interesting problem and needs your help. She has an array of N integers and wants to determine if it contains any subarray with a sum equal to zero. A subarray is defined as a contiguous segment of an array. -----Input Format:----- The first line contains one integer, T, which is the number of test cases. Each test case is then described in two lines. The first line contains one integer, N, which is the size of the array. The second line contains N integers, representing the elements of the array. -----Output Format:----- For each testcase, output \\"Yes\\" (without quotes) if there is any subarray with a sum equal to zero, otherwise output \\"No\\" (without quotes) in a new line. -----Constraints:----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^4 - The array elements lie between -10^5 and 10^5, inclusive. -----Example----- Input: 2 5 4 2 -3 1 6 4 4 2 0 1 6 Output: Yes Yes -----Explanation:----- In the first test case, there is a subarray with a sum equal to zero: {2, -3, 1}. In the second test case, the subarray {0} has a sum of zero.","solution":"def has_zero_sum_subarray(arr): Check if there exists a subarray with sum equal to zero. Parameters: arr (list): List of integers representing the array elements. Returns: str: \'Yes\' if there exists such a subarray, otherwise \'No\'. current_sum = 0 seen_sums = set() for num in arr: current_sum += num # If current_sum is 0 or if it is seen before, we found a zero-sum subarray if current_sum == 0 or current_sum in seen_sums: return \\"Yes\\" seen_sums.add(current_sum) return \\"No\\" def solve(T, cases): Process multiple test cases to determine if any subarray has sum zero. Parameters: T (int): Number of test cases. cases (list): List of tuples where each tuple contains (N, array) for each test case. Returns: list: List of strings \\"Yes\\" or \\"No\\" for each test case. results = [] for N, arr in cases: results.append(has_zero_sum_subarray(arr)) return results"},{"question":"Given an integer array, find the longest arithmetic subsequence in the array. An arithmetic subsequence is a sequence of numbers such that the difference between any two consecutive elements is the same. For example, in the array `[3, 6, 9, 12, 15]`, the entire array is an arithmetic subsequence with difference `3`. However, in the array `[1, 7, 10, 15, 6, 2, 25, 8]`, the longest arithmetic subsequence is `[1, 7, 13, 19, 25]` or `[7, 10, 13, 16]` with a difference of `3`. **Input:** A list of integers `arr`. **Output:** An integer indicating the length of the longest arithmetic subsequence. **Function signature:** `def longest_arith_seq_length(arr: List[int]) -> int:`","solution":"def longest_arith_seq_length(arr): from collections import defaultdict if not arr: return 0 dp = [defaultdict(int) for _ in range(len(arr))] max_length = 1 for i in range(1, len(arr)): for j in range(i): diff = arr[i] - arr[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 # Start a new sequence max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"# Description Alice is organizing a charity event and she has a list/array representing the dollar donations made by participants. She wants to ensure that no participant feels left out because their donation was too small compared to others. To achieve this, she decides that every donation should be incremented such that the total sum of donations becomes a multiple of 10. You are tasked with determining the minimum additional dollars needed to make the sum of donations a multiple of 10. # Task Given a list/array of donations, calculate the minimum additional dollars required to adjust the total sum of donations to the nearest multiple of 10. If the list is empty, return -1. For example: - donations([1,2,3]) returns 4 (sum is 6, add 4 to make it 10) - donations([10,20,30]) returns 0 (sum is 60, which is already a multiple of 10) - donations([5,5,5,5]) returns 5 (sum is 20, add 0 to make it 20, it is already a multiple in this case) - donations([9,1,1]) returns 9 (sum is 11, add 9 to make it 20) - donations([]) returns -1 (empty list) ```python def donations(donations_list): if not donations_list: return -1 total = sum(donations_list) remainder = total % 10 return 0 if remainder == 0 else 10 - remainder print(donations([1, 2, 3])) # returns 4 print(donations([10, 20, 30])) # returns 0 print(donations([5, 5, 5, 5])) # returns 0 print(donations([9, 1, 1])) # returns 9 print(donations([])) # returns -1 ``` ```cs public class CharityDonations { public static int MinAdditionalDollars(int[] donations) { if (donations.Length == 0) return -1; int total = donations.Sum(); int remainder = total % 10; return (remainder == 0) ? 0 : 10 - remainder; } public static void Main() { Console.WriteLine(MinAdditionalDollars(new[] { 1, 2, 3 })); // returns 4 Console.WriteLine(MinAdditionalDollars(new[] { 10, 20, 30 })); // returns 0 Console.WriteLine(MinAdditionalDollars(new[] { 5, 5, 5, 5 })); // returns 0 Console.WriteLine(MinAdditionalDollars(new[] { 9, 1, 1 })); // returns 9 Console.WriteLine(MinAdditionalDollars(new int[] { })); // returns -1 } } ``` ```haskell donations :: [Int] -> Int donations [] = -1 donations ds | remainder == 0 = 0 | otherwise = 10 - remainder where total = sum ds remainder = total `mod` 10 -- Example usages: -- donations [1, 2, 3] -- returns 4 -- donations [10, 20, 30] -- returns 0 -- donations [5, 5, 5, 5] -- returns 0 -- donations [9, 1, 1] -- returns 9 -- donations [] -- returns -1 ```","solution":"def donations(donations_list): Calculate the minimum additional dollars required to make the sum of donations a multiple of 10. if not donations_list: return -1 total = sum(donations_list) remainder = total % 10 return 0 if remainder == 0 else 10 - remainder"},{"question":"Joshua is working on a document analysis tool. He needs to identify the most frequently occurring word in a list of documents, but excluding a set of specified stop words. A word is defined as a sequence of non-space characters and the list of stop words will be provided for each search. Write a function to find the most frequent word (excluding stop words) in the documents. If multiple words have the same highest frequency, return any of them. Words are case-insensitive. -----Input:----- - First line contains an integer, T, number of test cases. Then the test cases follow. - For each test case, the first line contains an integer D, representing the number of lines of the document. - Then the next D lines contain the actual document, with words separated by spaces. - Next line contains an integer S, the number of stop words. - Then the next S lines contain the stop words. -----Output:----- For each test case, output the most frequent word in the document excluding the stop words. The comparison should be case-insensitive. -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ D ≤ 100 - Each line in the document has at most 1000 characters. - 1 ≤ S ≤ 50 - Each stop word is a non-empty sequence of at most 10 English characters. -----Sample Input:----- 2 3 This is a simple test document this document is a test document for the document analysis 3 is a for 2 Sample document for testing Sample data for validation 3 for data testing -----Sample Output:----- document sample","solution":"def most_frequent_word(T, test_cases): from collections import Counter results = [] for i in range(T): D = test_cases[i][0] document_lines = test_cases[i][1:D + 1] stop_words_count = test_cases[i][D + 1] stop_words = set(test_cases[i][D + 2: D + 2 + stop_words_count]) word_count = Counter() for line in document_lines: words = line.lower().split() for word in words: if word not in stop_words: word_count[word] += 1 most_common_word = word_count.most_common(1)[0][0] if word_count else \'\' results.append(most_common_word) return results"},{"question":"Joe is an avid cyclist, and he loves to track his rides. He keeps a record of his speed at the start of each minute during his ride. For simplicity, the recorded speed is represented as an array of positive integers, where the ith element of the array denotes his speed at the start of the ith minute. He now wants to analyze the variations in his speed between two timestamps of his ride. Specifically, he wants to determine the segment of his ride where the speed variations were the most frequent. A speed variation is defined as a change in speed from one minute to the next. -----Input----- The first line contains one integer T — the number of rides Joe wants to analyze. For each ride, the first line contains one integer N — the number of minutes the ride lasted. The second line contains N integers — list S of Joe\'s speed recorded at the start of each minute. The third line contains one integer Q — the number of queries Joe has for the ride. Each of the following Q lines contains two integers L and R describing each query. -----Output----- For each query, output one integer — the number of speed variations in the segment of the ride from the Lth minute to the Rth minute (inclusive). -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ L ≤ R ≤ N - 1 ≤ S[i] ≤ 10^4 -----Subtasks----- - Subtask 1 (20 points) 1 ≤ N, Q ≤ 200 - Subtask 2 (30 points) 1 ≤ N, Q ≤ 10 000 - Subtask 3 (25 points) 1 ≤ N ≤ 50 000, 1 ≤ Q ≤ 50 000 - Subtask 4 (25 points) no additional constraints -----Example----- Input: 2 5 3 5 4 2 6 3 1 5 2 4 3 5 6 1 2 3 1 2 3 2 1 6 4 6 Output: 4 2 2 5 2 Explanation: For the first ride, the speed list is [3, 5, 4, 2, 6]: - The first query: the number of speed variations between the 1st and 5th minute is 4. - The second query: the number of speed variations between the 2nd and 4th minute is 2. - The third query: the number of speed variations between the 3rd and 5th minute is 2. For the second ride, the speed list is [1, 2, 3, 1, 2, 3]: - The first query: the number of speed variations between the 1st and 6th minute is 5. - The second query: the number of speed variations between the 4th and 6th minute is 2.","solution":"def analyze_rides(T, rides): results = [] for ride in rides: N = ride[\'N\'] S = ride[\'S\'] Q = ride[\'Q\'] queries = ride[\'queries\'] # Precompute number of speed variations for each minute speed_variations = [0] * N for i in range(1, N): speed_variations[i] = speed_variations[i-1] if S[i] != S[i-1]: speed_variations[i] += 1 # Answer each query using precomputed values for L, R in queries: if L == 1: results.append(speed_variations[R-1]) else: results.append(speed_variations[R-1] - speed_variations[L-1]) return results"},{"question":"Different fruits have different nutritional values based on their type, weight, and ripeness. You are tasked with writing a program to compute the total nutritional value of a set of fruits. The nutritional value of a fruit can be calculated using a formula that depends on its type, weight, and ripeness. The formula for the nutritional value is as follows: - For an Apple: `nutritional_value = 2 * weight * (ripeness / 100)` - For a Banana: `nutritional_value = 1.5 * weight * (ripeness / 100)` - For a Cherry: `nutritional_value = 0.5 * weight * (ripeness / 100)` The weight of a fruit is given in grams, and the ripeness is given as a percentage (0 to 100). -----Input----- The first line contains an integer N, the number of fruits. The next N lines each contain a string (the fruit type: \\"Apple\\", \\"Banana\\", or \\"Cherry\\"), an integer (the weight of the fruit), and a float (the ripeness percentage of the fruit) separated by spaces. -----Output----- Output a single float number, the total nutritional value of all fruits, rounded to two decimal places. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ weight ≤ 1000 - 0 ≤ ripeness ≤ 100 -----Example----- Input: 3 Apple 150 80.0 Banana 120 75.0 Cherry 200 50.0 Output: 437.50","solution":"def calculate_nutritional_value(n, fruits): total_nutritional_value = 0.0 for fruit in fruits: fruit_type, weight, ripeness = fruit weight = int(weight) ripeness = float(ripeness) if fruit_type == \\"Apple\\": total_nutritional_value += 2 * weight * (ripeness / 100) elif fruit_type == \\"Banana\\": total_nutritional_value += 1.5 * weight * (ripeness / 100) elif fruit_type == \\"Cherry\\": total_nutritional_value += 0.5 * weight * (ripeness / 100) return round(total_nutritional_value, 2)"},{"question":"You are tasked with programming a vending machine that dispenses products based on customer selections. The vending machine has a set number of product slots, each filled with a unique product, and each product has a certain price. For each customer transaction, the customer will specify a sequence of product indices and how much money they have. You need to determine if the transaction can be completed with the available product prices and the given amount of money. If the customer\'s money is sufficient to buy all the selected products, the transaction is successful, and the products are dispensed. If not, the transaction is declined. -----Input----- The first line of input contains an integer t (1 le t le 100) — the number of test cases. For each test case: 1. The first line contains an integer n (1 le n le 50) — the number of products in the machine. 2. The second line contains n integers p_1, p_2, ldots, p_n (1 le p_i le 100) — the price of each product. 3. The third line contains an integer m (1 le m le 50) — the number of product selections for the transaction. 4. The fourth line contains m integers s_1, s_2, ldots, s_m (1 le s_i le n) — the indices of products selected for the transaction (indices are 1-based). 5. The fifth line contains an integer x (1 le x le 5000) — the amount of money the customer has. -----Output----- For each test case, output \\"Yes\\" if the transaction can be successfully completed, and \\"No\\" otherwise. -----Example----- Input 3 5 10 20 30 40 50 3 1 2 3 60 4 5 10 15 20 2 1 4 25 3 1 100 1000 2 1 3 50 Output Yes Yes No","solution":"def can_complete_transaction(n, prices, m, selections, money): total_cost = sum(prices[idx - 1] for idx in selections) return \\"Yes\\" if money >= total_cost else \\"No\\" def process_transactions(t, transactions): results = [] for i in range(t): n = transactions[i][0] prices = transactions[i][1] m = transactions[i][2] selections = transactions[i][3] money = transactions[i][4] result = can_complete_transaction(n, prices, m, selections, money) results.append(result) return results"},{"question":"You are given a string `s`, and your task is to determine whether the string contains a valid sequence of parentheses. The string may contain the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. A sequence of parentheses is considered valid if every opening parenthesis has a corresponding closing parenthesis in the correct order. That is: 1. Every opening \'(\' must have a closing \')\'. 2. Every opening \'{\' must have a closing \'}\'. 3. Every opening \'[\' must have a closing \']\'. 4. Parentheses must close in the correct order such that an inner set of parentheses is closed before the outer set. You need to implement a function `isValid(s: str) -> bool` that returns `True` if the given string `s` is a valid sequence of parentheses, and `False` otherwise. ```python def isValid(s: str) -> bool: # Your code here pass ``` Examples: ``` isValid(\\"()\\") -> True isValid(\\"()[]{}\\") -> True isValid(\\"(]\\") -> False isValid(\\"([)]\\") -> False isValid(\\"{[]}\\") -> True isValid(\\"][\\" ) -> False ``` Constraints: - The length of the input string `s` will be between `1` and `10,000`.","solution":"def isValid(s: str) -> bool: Determine if the string s contains a valid sequence of parentheses. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"A game developer is working on a text-based version of a simple Pokémon battle simulation. In this simulation, each Pokémon has a set of moves they can use in battle. Each move has a name, a type (e.g., \\"fire\\", \\"water\\", \\"grass\\", etc.), and a power level which determines how much damage it does. The developer needs your help to create a function that will determine which moves a Pokémon can use based on its current stamina. Each move requires a certain amount of stamina to use, and a Pokémon can only use moves if it has enough stamina remaining. The Pokémon\'s stamina decreases by the stamina cost of the move each time it is used. You are tasked with writing a function `usable_moves(pokemon_moves, pokemon_stamina)` that takes in a list of the Pokémon\'s moves and its current stamina, and returns a list of move names that can be used. Each move is represented by a dictionary with the keys: \\"name\\", \\"type\\", \\"power\\", and \\"stamina_cost\\". For example: ```python pokemon_moves = [ {\\"name\\": \\"Ember\\", \\"type\\": \\"fire\\", \\"power\\": 40, \\"stamina_cost\\": 5}, {\\"name\\": \\"Surf\\", \\"type\\": \\"water\\", \\"power\\": 90, \\"stamina_cost\\": 15}, {\\"name\\": \\"Razor Leaf\\", \\"type\\": \\"grass\\", \\"power\\": 55, \\"stamina_cost\\": 7}, {\\"name\\": \\"Thunderbolt\\", \\"type\\": \\"electric\\", \\"power\\": 90, \\"stamina_cost\\": 10} ] pokemon_stamina = 10 ``` In this case, the function would return: ```python [\\"Ember\\", \\"Razor Leaf\\", \\"Thunderbolt\\"] ``` since those are the moves the Pokémon can afford with 10 units of stamina. # Constraints: - The number of moves per Pokémon will not exceed 100. - The stamina costs and power levels of moves will be positive integers. - The Pokémon\'s current stamina will be a non-negative integer. Implement the function `usable_moves(pokemon_moves, pokemon_stamina)` to solve this problem.","solution":"def usable_moves(pokemon_moves, pokemon_stamina): Returns a list of move names that a Pokémon can use based on its current stamina. Parameters: - pokemon_moves: List[Dict[str, Union[str, int]]] - A list of moves with each move being a dictionary containing \'name\', \'type\', \'power\', and \'stamina_cost\'. - pokemon_stamina: int - The current stamina of the Pokémon. Returns: - List[str] - A list of move names that can be used with the given stamina. usable_moves_list = [move[\\"name\\"] for move in pokemon_moves if move[\\"stamina_cost\\"] <= pokemon_stamina] return usable_moves_list"},{"question":"Weekly Sales Analysis ===================== You are running a small retail business and you want to analyze your weekly sales data to identify the best and worst selling products. You\'ll receive a list of tuples, where each tuple represents the product name and the total sales amount of that product for a week. Your task: ---------- Write the function `salesAnalysis()` that performs the following analysis and returns a dictionary containing: - The name of the product with the highest sales and the sales amount. - The name of the product with the lowest sales and the sales amount. - The average sales amount for all products. The function should take one argument: - `sales_data` (list of tuples), each tuple contains `product_name` (string) and `sales_amount` (number). The returned sales amounts should be in string format and fixed to 2 decimal points. >**Example:** ```python sales_data = [ (\'Apples\', 1200.50), (\'Bananas\', 850.75), (\'Oranges\', 920.00), (\'Pears\', 450.25) ] salesAnalysis(sales_data) ``` >**Returns:** ```python { \'highest_sales\': (\'Apples\', \'1200.50\'), \'lowest_sales\': (\'Pears\', \'450.25\'), \'average_sales\': \'855.38\' } ``` Have fun and happy coding!","solution":"def salesAnalysis(sales_data): if not sales_data: return { \'highest_sales\': (\'\', \'0.00\'), \'lowest_sales\': (\'\', \'0.00\'), \'average_sales\': \'0.00\' } highest_sales = max(sales_data, key=lambda x: x[1]) lowest_sales = min(sales_data, key=lambda x: x[1]) total_sales = sum(amount for product, amount in sales_data) average_sales = total_sales / len(sales_data) return { \'highest_sales\': (highest_sales[0], f\\"{highest_sales[1]:.2f}\\"), \'lowest_sales\': (lowest_sales[0], f\\"{lowest_sales[1]:.2f}\\"), \'average_sales\': f\\"{average_sales:.2f}\\" }"},{"question":"Write a function `wave` that takes a string and returns a list with all the possible \\"Mexican wave\\" permutations of that string. The \\"Mexican wave\\" (or \\"wave\\" for short) is when a sequence of characters is changed to produce a wave-like pattern. For example, the string `\\"hello\\"` would give the following wave: ``` [\\"Hello\\", \\"hEllo\\", \\"heLlo\\", \\"helLo\\", \\"hellO\\"] ``` Rules: 1. Each permutation should change exactly one character to uppercase and the rest should remain in lowercase. 2. If the input string contains spaces, they should be ignored in terms of wave generation but remain in their position with the spaces maintained in the output list (e.g., `\\"hello world\\"` would generate `[\\"Hello world\\", \\"hEllo world\\", ..., \\"hello worlD\\"]`). 3. The input string will only contain alphabetical characters (both uppercase and lowercase) and spaces. Function Signature: ```python def wave(s: str) -> list: pass ``` # Examples: ``` wave(\\"hello\\") -> [\\"Hello\\", \\"hEllo\\", \\"heLlo\\", \\"helLo\\", \\"hellO\\"] wave(\\"mexican wave\\") -> [\\"Mexican wave\\", \\"mExican wave\\", ..., \\"mexican wavE\\"] wave(\\" \\") -> [] ```","solution":"def wave(s: str) -> list: Returns a list of all possible \\"wave\\" permutations of the input string. Each permutation changes exactly one character to uppercase. result = [] for i, char in enumerate(s): if char.isalpha(): waved = s[:i] + char.upper() + s[i+1:] result.append(waved) return result"},{"question":"Binary Tree - Check Balanced Write a CheckBalanced() function that determines if a binary tree is balanced. A binary tree is considered balanced if, for each node in the tree, the depth of the left and right subtrees of that node differ by at most 1. The function should take the root of the binary tree as its argument and return a boolean value: True if the tree is balanced, and False otherwise. Note: A tree with no nodes is considered balanced. You are provided with the basic structure of a binary tree node: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def check_balanced(root): def check_height(node): if not node: return 0, True left_height, left_balanced = check_height(node.left) right_height, right_balanced = check_height(node.right) current_balanced = abs(left_height - right_height) <= 1 height = max(left_height, right_height) + 1 return height, left_balanced and right_balanced and current_balanced _, is_balanced = check_height(root) return is_balanced"},{"question":"Write a function that takes in an integer representing the number of hours a student has studied for an exam and returns a motivational message. - If the student has studied for 5 or more hours, return the string \\"Excellent, you\'re well-prepared!\\". - If the student has studied for less than 5 hours, return the string \\"Keep going, you can do it!\\".","solution":"def motivational_message(hours): Returns a motivational message based on the number of hours a student has studied. Parameters: hours (int): The number of hours a student has studied. Returns: str: A motivational message. if hours >= 5: return \\"Excellent, you\'re well-prepared!\\" else: return \\"Keep going, you can do it!\\""},{"question":"Given a list of integers representing the temperatures of a city for the next \'n\' days, write a function to determine how many days are there when the temperature is not higher than the previous day\'s temperature. If all the days have an increasing temperature, return 0. Function Signature: ```python def count_non_increasing_days(temperatures: List[int]) -> int: ``` **Examples:** 1. For the input `temperatures = [30, 32, 31, 35, 34, 33, 36]`, the function should return `3` since the non-increasing days are 31, 34, and 33. 2. For the input `temperatures = [21, 21, 22, 20, 19, 18]`, the function should return `4` since the non-increasing days are 21, 20, 19, and 18. **Constraints:** - The length of the list will be between 1 and 100 inclusive. - Each temperature will be an integer between -50 and 50 inclusive.","solution":"from typing import List def count_non_increasing_days(temperatures: List[int]) -> int: Given a list of integers representing the temperatures of a city for the next \'n\' days, this function will count the number of days where the temperature is not higher than the previous day\'s temperature. non_increasing_days = 0 for i in range(1, len(temperatures)): if temperatures[i] <= temperatures[i - 1]: non_increasing_days += 1 return non_increasing_days"},{"question":"Polycarp owns a simple inventory system where he keeps track of items using a sequence of unique integers representing item IDs. From time to time, Polycarp likes to shuffle this sequence. He is particularly fond of permutations that have a special property: each adjacent pair of integers in the permutation should have a Greatest Common Divisor (GCD) equal to one. Given an integer n (1 ≤ n ≤ 100), generate a permutation of the sequence of integers from 1 to n such that the GCD of each adjacent pair is 1. If there are multiple permutations possible, output any of them. If no such permutation exists, return -1. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the size of the sequence. -----Output----- Print n integers representing the permutation of the sequence from 1 to n where the GCD of each adjacent pair is 1. If no such permutation exists, print -1 instead. -----Examples----- Input 4 Output 1 3 2 4 Input 2 Output 1 2 Input 1 Output 1 Input 15 Output 1 3 2 5 4 7 6 9 8 11 10 13 12 15 14 ---Note--- For the given examples: - For `n = 4`, one valid permutation is `[1, 3, 2, 4]` because GCD(1, 3) = 1, GCD(3, 2) = 1, GCD(2, 4) = 2 (valid skip step). - For `n = 2`, the only valid permutation is `[1, 2]`. - For `n = 1`, the single valid permutation is `[1]`. - For `n = 15`, a valid permutation example is `[1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14]` because each adjacent pair follows the GCD condition.","solution":"from math import gcd def generate_permutation(n): if n == 1: return [1] if n == 2: return [1, 2] # Generate the sequence starting from 2, 1 and keep alternating between odd and even permutation = [] for i in range(1, n + 1, 2): permutation.append(i) for i in range(2, n + 1, 2): permutation.append(i) # Check if the generated permutation has the required property for i in range(n-1): if gcd(permutation[i], permutation[i+1]) != 1: return -1 return permutation"},{"question":"Rotate List Elements: Write a function that takes a list and a non-negative integer \'n\' and returns a new list with elements rotated to the right by \'n\' places. For example, given the list [1, 2, 3, 4, 5] and n = 2, the function should return [4, 5, 1, 2, 3]. ```if:csharp Documentation: Kata.RotateList Method (List<int>, int) Rotates elements in a list to the right by a specified number of places. Syntax public static List<int> RotateList( List<int> list, int n ) Parameters list Type: System.Collections.Generic.List<int> The list of integers to be rotated. n Type: System.Int32 Number of places to rotate the list elements. Return Value Type: System.Collections.Generic.List<int> The list after rotation. Exceptions Exception Condition ArgumentNullException list is null. ArgumentOutOfRangeException n is negative. ```","solution":"def rotate_list(elements, n): Rotate list elements to the right by `n` places. Args: elements (list): The list of elements to rotate. n (int): The number of places to rotate the list elements by. Returns: list: A new list with elements rotated to the right by `n` places. if not elements: return elements n = n % len(elements) # Handle rotation greater than the length of the list return elements[-n:] + elements[:-n]"},{"question":"In this Kata, you are given a string that contains several words separated by spaces. Your task is to write a function that will return the length of the shortest word. For example: - If the input string is \\"The quick brown fox jumps\\", the function should return 3, because \\"The\\" is the shortest word. - If the input string is \\"Software development is fun\\", the function should return 2, because \\"is\\" is the shortest word. You can assume that the input string will never be empty and will not contain punctuation or special characters other than spaces.","solution":"def find_short(s): Returns the length of the shortest word in the given string `s`. :param s: str - A string containing several words separated by spaces. :return: int - The length of the shortest word. words = s.split() shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"Write a function that takes a string representing a date in the format `YYYY-MM-DD` and returns the number of days remaining in that year. If the input date format is invalid or the date is impossible, the function should return `-1`. **Hints:** 1. Use datetime module in Python to handle date-related operations. 2. Consider leap years when calculating the remaining days in a year. **Example:** - For the input `\\"2023-01-01\\"`, the function should return `364` (2023 is not a leap year). - For the input `\\"2020-12-31\\"`, the function should return `0` (2020 is a leap year and it\'s the last day of the year). - For the input `\\"invalid-date\\"`, the function should return `-1`. Good luck! :D","solution":"from datetime import datetime, timedelta def days_remaining_in_year(date_str): Returns the number of days remaining in the year from the given date in YYYY-MM-DD format. If the date is invalid, returns -1. try: given_date = datetime.strptime(date_str, \\"%Y-%m-%d\\") except ValueError: return -1 year_end = datetime(given_date.year, 12, 31) remaining_days = (year_end - given_date).days return remaining_days"},{"question":"You\'ll be provided with a string containing a mathematical expression, consisting of integers and the operators `+` and `-` only. The expression does not contain any spaces and is always valid. Your task is to evaluate the expression and return the result as an integer. Examples ``` \\"3+2-5\\" --> 0 \\"10+20-30+40\\" --> 40 \\"100-50+25-75\\" --> 0 ```","solution":"def evaluate_expression(expr): Evaluates a given mathematical expression containing integers and the operators + and - only. :param expr: str : mathematical expression to evaluate :return: int : result of the evaluated expression return eval(expr)"},{"question":"Given an integer array nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is less than k. Example 1: Input: nums = [10, 5, 2, 6], k = 100 Output: 8 Explanation: The 8 subarrays that have a product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]. Note that [10, 5, 2] is not included since its product is 100. Example 2: Input: nums = [1, 2, 3], k = 0 Output: 0 Explanation: There are no subarrays with a product less than 0. Constraints: - 1 <= nums.length <= 1000 - 1 <= nums[i] <= 1000 - 0 <= k <= 10^6","solution":"def num_subarray_product_less_than_k(nums, k): if k <= 1: return 0 product = 1 left = 0 count = 0 for right in range(len(nums)): product *= nums[right] while product >= k: product //= nums[left] left += 1 count += right - left + 1 return count"},{"question":"You have to create a function which receives a string representing a mathematical expression and returns the calculated result as a number. The expression will contain two numbers and one of the four basic operations (`+`, `-`, `*`, `/`). Examples: ```python calculate(\\"3 + 2\\") --> 5 calculate(\\"10 - 6\\") --> 4 calculate(\\"4 * 5\\") --> 20 calculate(\\"8 / 2\\") --> 4.0 ``` Notes * The function should handle both integer and floating point numbers. * There will be exactly one space between each number and the operator. * You can assume that the input string is always in a valid format and the division will not be by zero.","solution":"def calculate(expression): Receives a string representing a mathematical expression and returns the calculated result as a number. The expression will contain two numbers and one of the four basic operations (+, -, *, /). # Split the expression by spaces parts = expression.split() # Extract the left operand, operator, and right operand left_operand = float(parts[0]) operator = parts[1] right_operand = float(parts[2]) # Perform the calculation based on the operator if operator == \'+\': return left_operand + right_operand elif operator == \'-\': return left_operand - right_operand elif operator == \'*\': return left_operand * right_operand elif operator == \'/\': return left_operand / right_operand"},{"question":"In a software project, you might encounter a critical issue where the memory is fragmented due to irregular allocation and deallocation of resources. This can severely impact the performance of the system by making it difficult for the allocator to find large contiguous blocks of memory for new allocations. To tackle this problem, we want to simulate a simplified version of a memory allocator where memory fragments are handled using a compaction approach that shifts all occupied memory blocks towards the start of the memory. You are given: - A list of integers `memory`, where each element can either be: - `1` representing occupied memory - `0` representing free memory The goal is to write the function `def compact_memory(memory: List[int]) -> List[int]` that rearranges the memory list by shifting all `1`s towards the beginning of the list and all `0`s towards the end. The order of the `1`s should be preserved. # Function Signature ```python from typing import List def compact_memory(memory: List[int]) -> List[int]: pass ``` # Input - A list `memory` of length `n` (1 <= n <= 10^6), where each element is either `0` or `1`. # Output - A list `memory` after compaction, with all `1`s shifted towards the beginning and all `0`s shifted towards the end. # Example ```python memory = [0, 1, 0, 1, 1, 0] compact_memory(memory) # returns [1, 1, 1, 0, 0, 0] memory = [1, 1, 0, 0, 1] compact_memory(memory) # returns [1, 1, 1, 0, 0] ``` # Constraints - The solution should be efficient in terms of both time complexity and space complexity. - You may assume that the input list can be modified in place to achieve the desired result.","solution":"from typing import List def compact_memory(memory: List[int]) -> List[int]: Compacts the memory list by shifting all 1s towards the beginning and all 0s towards the end, preserving the order of 1s. one_count = memory.count(1) zero_count = len(memory) - one_count return [1] * one_count + [0] * zero_count"},{"question":"Given a string s and an integer k, you need to perform at most k operations to transform the string. In one operation, you can change any character in the string to any other character. Determine the length of the longest substring containing the same character that can be obtained after performing at most k operations. Example 1: Input: s = \\"ABAB\\", k = 2 Output: 4 Explanation: Change two \'B\'s to \'A\'s to have the string \\"AAAA\\" or change two \'A\'s to \'B\'s to have the string \\"BBBB\\". Example 2: Input: s = \\"AABABBA\\", k = 1 Output: 4 Explanation: Change one \'B\' to \'A\' to have the string \\"AAAABA\\". Note: 1 <= s.length <= 20000 s consists of only uppercase English letters. 0 <= k <= s.length","solution":"def character_replacement(s, k): Returns the length of the longest substring containing the same character that can be obtained after performing at most k operations to transform the string. max_len = 0 max_count = 0 start = 0 count = [0] * 26 for end in range(len(s)): count[ord(s[end]) - ord(\'A\')] += 1 max_count = max(max_count, count[ord(s[end]) - ord(\'A\')]) if end - start + 1 - max_count > k: count[ord(s[start]) - ord(\'A\')] -= 1 start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"Write a function `longest_increasing_subsequence(arr)` that takes a list of integers `arr` and returns the length of the longest increasing subsequence in the array. The function should have a time complexity of O(n log n). An increasing subsequence is a subsequence where each element is greater than the preceding one. For example: ``` longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) ``` should return: ``` 4 ``` Explanation: The longest increasing subsequence is [2, 3, 7, 101]. Another example: ``` longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) ``` should return: ``` 4 ``` Explanation: The longest increasing subsequence is [0, 1, 2, 3].","solution":"import bisect def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the array. Time complexity: O(n log n) if not arr: return 0 # create an array to store the smallest ending element of each increasing subsequence of length i+1 lis = [] for num in arr: # find the index where `num` can be placed to maintain the sorted order of `lis` pos = bisect.bisect_left(lis, num) # if pos is equal to the length of `lis`, it means `num` is greater than any element in `lis` if pos == len(lis): lis.append(num) else: lis[pos] = num # the length of `lis` will give the length of the longest increasing subsequence return len(lis)"},{"question":"Implement a function that takes a list of integers and returns a new list containing only the prime numbers from the original list, in the same order as they appeared. # Steps: * Create a helper function `is_prime` that determines if a number is prime. * Iterate through each integer in the input list. * Use the helper function to check if the number is prime. * If the number is prime, add it to the output list. * Return the output list of prime numbers. **Note**: A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. ___ # Examples ``` input = [2, 3, 4, 5, 6, 7, 8, 9, 10] output = [2, 3, 5, 7] input = [1, 13, 15, 17, 19, 21] output = [13, 17, 19] ``` ___ What is the time complexity of your approach?","solution":"def is_prime(n): Returns True if the number n is prime, else False. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # Exclude other even numbers for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(nums): Returns a list of prime numbers from the given list nums. return [num for num in nums if is_prime(num)]"},{"question":"**Implement** a function called `filterUnique` that takes an array of numbers and returns a new array containing only the unique numbers, preserving the order of their first occurrence in the input array. The function should not use any built-in functions that directly solve the problem like `Array.prototype.filter` or `Array.prototype.includes`. ``` filterUnique([1, 2, 2, 3, 4, 4, 5]); // Should return [1, 2, 3, 4, 5] filterUnique([6, 7, 7, 8, 6, 9]); // Should return [6, 7, 8, 9] filterUnique([10, 20, 20, 10, 30, 40, 30]); // Should return [10, 20, 30, 40] filterUnique([]); // Should return [] filterUnique([1, 1, 1, 1, 1, 1, 1]); // Should return [1] ```","solution":"def filterUnique(arr): Takes an array of numbers and returns a new array containing only the unique numbers, preserving the order of their first occurrence in the input array. seen = set() unique_list = [] for num in arr: if num not in seen: unique_list.append(num) seen.add(num) return unique_list"},{"question":"You are given a grid representing a field of apples and empty spaces. Each cell in the grid can either contain an apple (\'A\') or be empty (\'E\'). You start at the top-left corner of the grid (position (0, 0)), and your goal is to reach the bottom-right corner (position (n-1, m-1)) while collecting as many apples as possible. You can only move right or down at each step. The function should return the maximum number of apples you can collect on any valid path from the top-left to the bottom-right corner. The function will be called `max_apples()` and takes a 2D list (grid) as input. # Example: ```python grid = [ [\'A\', \'E\', \'A\'], [\'A\', \'A\', \'E\'], [\'E\', \'A\', \'A\'] ] max_apples(grid) == 5 ``` # Explanation: One of the best paths to collect the maximum apples is (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) which will have 5 apples. # Function Signature: ```python def max_apples(grid: List[List[str]]) -> int: pass ``` # Constraints: - The grid size will be at most 100x100. - The grid will always have at least one valid path from (0, 0) to (n-1, m-1). # Note: - Focus on dynamic programming for an efficient solution. - Consider edge cases such as a grid entirely filled with \'E\' cells or a single-row/column grid.","solution":"from typing import List def max_apples(grid: List[List[str]]) -> int: n = len(grid) m = len(grid[0]) # Create a DP table to store the number of apples collected at each cell dp = [[0] * m for _ in range(n)] # Initialize the starting position dp[0][0] = 1 if grid[0][0] == \'A\' else 0 # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + (1 if grid[0][j] == \'A\' else 0) # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + (1 if grid[i][0] == \'A\' else 0) # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + (1 if grid[i][j] == \'A\' else 0) # The answer is at the bottom-right corner of the grid return dp[n - 1][m - 1]"},{"question":"Write a program that determines if a given word is a palindrome, and then, if it is, count the minimum number of character removals required to make it a non-palindrome. A palindrome is a word that reads the same backward as forward (e.g., \\"level\\", \\"racecar\\"). If the word is not a palindrome, the program should return `-1`. Examples ```python min_removals_to_non_palindrome(\\"racecar\\") = 1 # \\"racecar\\" is a palindrome # Removing either \'r\', \'a\', or \'c\' will make it a non-palindrome min_removals_to_non_palindrome(\\"hello\\") = -1 # \\"hello\\" is not a palindrome min_removals_to_non_palindrome(\\"abba\\") = 1 # \\"abba\\" is a palindrome # Removing either \'a\' or \'b\' will make it a non-palindrome ```","solution":"def is_palindrome(word): Check if the given word is a palindrome. return word == word[::-1] def min_removals_to_non_palindrome(word): Determines if the word is a palindrome, and if it is, counts the minimum number of character removals required to make it a non-palindrome. Returns -1 if the word is not a palindrome. if not is_palindrome(word): return -1 # If the word is already a palindrome, # removing any single character will easily make it a non-palindrome. return 1"},{"question":"You are given a list of integers representing the heights of buildings. You can view the skyline from the left side, meaning you can see all buildings that are not obscured by taller buildings in front of them. Write a function that takes in a list of integers representing building heights and returns the list of heights of the buildings that you can see from the left. # Constraints - The list of building heights can be of any length. - Each building height is a positive integer between 1 and 1000 inclusive. # Input - A single list, `heights`, where 1 leq text{length of heights} leq 2000 and each element in the list is an integer representing the height of a building. # Output - A list of integers representing the heights of the buildings that are visible from the left. # Example Input ```python [3, 7, 8, 3, 6, 1] ``` Output ```python [3, 7, 8] ``` Explanation Building at height 3 is visible. Building of height 7 is taller than 3, so it is visible. Building of height 8 is taller than 7, so it is visible. Buildings of height 3, 6, and 1 are not visible because they are obscured by the building of height 8.","solution":"def visible_buildings(heights): Returns the list of building heights that are visible from the left side. visible = [] max_height = 0 for height in heights: if height > max_height: visible.append(height) max_height = height return visible"},{"question":"Task: Write a function **filter_positive_integers** that takes a list of integers and returns a new list containing only the positive integers from the input list. Examples: filter_positive_integers([1, -2, 3, -4, 5]): [1, 3, 5] filter_positive_integers([-1, -2, -3, -4]) : [] filter_positive_integers([7, 8, 9]) : [7, 8, 9] ```Note: Use list comprehension to filter the positive integers``` ```Hint: The input list may contain negative numbers, zero, and positive numbers```","solution":"def filter_positive_integers(nums): Returns a list containing only the positive integers from the input list. Args: nums (list): A list of integers. Returns: list: A new list containing only the positive integers from nums. return [num for num in nums if num > 0]"},{"question":"Create a function `numberSquare(num)` that returns a 2D list representing a square matrix of size `num x num`. The cells of the matrix should be filled with numbers from 1 to `num^2` in a spiral order starting from the upper left corner and moving inwards in a clockwise direction. Examples: ``` numberSquare(3) should return: [[1, 2, 3], [8, 9, 4], [7, 6, 5]] numberSquare(4) should return: [[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]] ```","solution":"def numberSquare(num): Returns a 2D list representing a spiral ordered square matrix of size num x num. if num <= 0: return [] matrix = [[0] * num for _ in range(num)] left, right, top, bottom = 0, num - 1, 0, num - 1 current = 1 while left <= right and top <= bottom: for col in range(left, right + 1): matrix[top][col] = current current += 1 top += 1 for row in range(top, bottom + 1): matrix[row][right] = current current += 1 right -= 1 for col in range(right, left - 1, -1): matrix[bottom][col] = current current += 1 bottom -= 1 for row in range(bottom, top - 1, -1): matrix[row][left] = current current += 1 left += 1 return matrix"},{"question":"Write a function that takes a string as input and returns a new string where every occurrence of the character \\"a\\" (case-sensitive) is replaced with the string \\"*&\\". For example: ``` \\"apples are amazing\\" --> \\"*&pples *&re *&m*&zing\\" \\"banana\\" --> \\"b*&n*&n*&\\" \\"Algebra\\" --> \\"Algebr*&\\" ``` Input will always be a valid string, so don\'t worry about type checking or non-string values.","solution":"def replace_a(input_string): Replaces every occurrence of the character \'a\' with the string \'*&\'. :param input_string: Input string to be processed :return: New string with \'a\' replaced by \'*&\' return input_string.replace(\'a\', \'*&\')"},{"question":"Given a matrix of integers, determine if all rows and columns are sorted in non-decreasing order. A matrix is considered sorted if for each row and for each column, the elements are in non-decreasing order from left to right and from top to bottom respectively. Implement a function `is_sorted_matrix(matrix: List[List[int]]) -> bool` which accepts a 2D list of integers and returns a boolean indicating whether the matrix is sorted as described. # Example Given the matrix: ``` [ [1, 2, 3], [2, 3, 4], [3, 4, 5] ] ``` The function should return `True` because all rows and columns are in non-decreasing order. Given the matrix: ``` [ [1, 2, 3], [2, 1, 4], [3, 4, 5] ] ``` The function should return `False` because the second row is not in non-decreasing order. # Constraints - The matrix will have at least 1 row and 1 column. - Each element in the matrix will be an integer within the range of `-10^6` to `10^6`. Implement the function `is_sorted_matrix` below: ```python from typing import List def is_sorted_matrix(matrix: List[List[int]]) -> bool: # Your code here ```","solution":"from typing import List def is_sorted_matrix(matrix: List[List[int]]) -> bool: # Check rows for row in matrix: if any(row[i] > row[i+1] for i in range(len(row)-1)): return False # Check columns for col in range(len(matrix[0])): if any(matrix[row][col] > matrix[row+1][col] for row in range(len(matrix)-1)): return False return True"},{"question":"John and Jane are playing a number game. They have an endless supply of numbers from 1 to infinity. The game starts by John picking a number and then Jane picks another number that\'s distinct from John\'s number. They keep taking turns alternately picking numbers in ascending order. The game continues until one of them cannot pick a valid number that satisfies the game rule: the picked number must be a multiple of any previously picked number by the same player. You need to determine who will lose the game given that both players play optimally. Each player starts with a clean slate of valid multiples for their number selection. If no valid moves are possible for a player, they lose the game. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line with an integer X, the number that John picks initially. -----Output:----- For each test case, output in a single line the name of the loser (\\"John\\" or \\"Jane\\") vis-à-vis the optimal play. -----Constraints----- - 1 leq T leq 1000 - 1 leq X leq 10^7 -----Sample Input:----- 2 1 4 -----Sample Output:----- Jane John","solution":"def find_loser(x): Determines who will lose the game starting with number x. if x == 1: return \\"Jane\\" else: return \\"John\\" def determine_losers(test_cases): Determines the loser for each test case. Parameters: test_cases (list): A list of integer values representing the initial number picked by John. Returns: list: A list of strings where each string is either \\"John\\" or \\"Jane\\" indicating who loses the game. return [find_loser(x) for x in test_cases]"},{"question":"You are given a list of integers that represents the daily temperatures over a span of days. For each day, you want to know how many days you would have to wait until a warmer temperature. If there is no future day with a warmer temperature, put 0 in the result for that day. Your task is to implement a function that calculates the number of days one has to wait until a warmer temperature for each day. -----Input:----- - An integer N representing the number of days. - A list of N integers, where each integer represents the temperature of a day. -----Output:----- - A list of N integers where the value at each index i is the number of days you have to wait until a warmer temperature. If no such day exists, the value should be 0. -----Constraints----- - 1 leq N leq 1000 - 30 leq temperature leq 100 -----Sample Input:----- 8 73 74 75 71 69 72 76 73 -----Sample Output:----- 1 1 4 2 1 1 0 0 -----EXPLANATION:----- For the first day (temperature 73), the next warmer day is the second day (temperature 74), so you have to wait 1 day. For the second day (temperature 74), the next warmer day is the third day (temperature 75), so you have to wait 1 day. For the third day (temperature 75), the next warmer day is the seventh day (temperature 76), so you have to wait 4 days. The values for the rest of the days are calculated similarly, with days that do not have a future warmer temperature receiving a 0 in the result.","solution":"def daily_temperatures(N, temperatures): Given a list of daily temperatures, calculates the number of days until a warmer temperature for each day. Args: N: int - Number of days. temperatures: List[int] - List of daily temperatures. Returns: List[int] - List of days until a warmer temperature. result = [0] * N stack = [] for i in range(N): while stack and temperatures[i] > temperatures[stack[-1]]: prev_index = stack.pop() result[prev_index] = i - prev_index stack.append(i) return result"},{"question":"A family of robots are in a factory. I can\'t see all the robots, but I can hear them beeping! # How many robots are there? Hint The trick to counting robots is to listen carefully * The big robots go ```BeepBeepBeep```... * The small robots go ```beepbeepbeep```... * And they always alternate big/small ^ Kata Note: No validation is necessary; only valid input will be passed :-)","solution":"def count_robots(beeps): Count the number of robots based on their beeping pattern. Parameters: beeps (str): A string containing the beeping sounds of robots. Returns: int: The number of robots in the factory. return len(beeps) // len(\\"BeepBeepBeep\\")"},{"question":"Sum of Squares! Calculate the sum of squares of the first N natural numbers Medium Math, Loops Write a function that takes an integer N and returns the sum of the squares of all natural numbers from 1 to N. The function should handle values of N that are within a reasonable range (e.g., 1 ≤ N ≤ 10^4). Ensure the function executes efficiently even for the upper range of N. **Example:** ```python Input: 3 Output: 14 # Explanation: 1^2 + 2^2 + 3^2 = 14 Input: 5 Output: 55 # Explanation: 1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 55 ``` **Hint:** Consider using a loop or mathematical formula.","solution":"def sum_of_squares(n): Returns the sum of the squares of all natural numbers from 1 to n. if n < 1: raise ValueError(\\"n should be 1 or greater\\") return n * (n + 1) * (2 * n + 1) // 6"},{"question":"Given an array of integers, find the length of the longest contiguous subarray that contains at most 2 distinct integers. -----Input:----- A single line containing space-separated integers which represent the elements of the array. -----Output:----- An integer representing the length of the longest contiguous subarray that contains at most 2 distinct integers. -----Constraints----- - 1 ≤ length of the array ≤ 104 - Each integer in the array will be in the range [-109, 109] -----Sample Input:----- 1 2 1 2 3 -----Sample Output:----- 4 -----Explanation:----- The longest contiguous subarray with at most 2 distinct integers is [1, 2, 1, 2]. -----Sample Input:----- 1 2 3 4 5 -----Sample Output:----- 2 -----Explanation:----- All pairs of adjacent elements form the longest contiguous subarrays with at most 2 distinct integers. The lengths of these subarrays are all 2. So, the answer is 2.","solution":"def length_of_longest_subarray_with_2_distinct_integers(arr): from collections import defaultdict if len(arr) == 0: return 0 left = 0 right = 0 max_len = 0 num_count = defaultdict(int) while right < len(arr): num_count[arr[right]] += 1 while len(num_count) > 2: num_count[arr[left]] -= 1 if num_count[arr[left]] == 0: del num_count[arr[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len # Example usage # arr = [1, 2, 1, 2, 3] # print(length_of_longest_subarray_with_2_distinct_integers(arr)) # should output 4"},{"question":"Write a function `string_permutations(s: str) -> int` that takes a string `s` as input and returns the number of unique permutations of the characters in the string. A permutation of a string is a rearrangement of its characters. For example, the string \\"abc\\" has six permutations: \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", and \\"cba\\". Consider the following examples: 1. `string_permutations(\\"abc\\")` should return `6` because there are 6 unique permutations. 2. `string_permutations(\\"aab\\")` should return `3` because there are 3 unique permutations: \\"aab\\", \\"aba\\", and \\"baa\\". # Constraints: * The input string `s` will contain only lowercase English letters (`\'a\'` to `\'z\'`). * The length of the input string `s` will be at most `10`. # Implementation: To implement the function, you need to: 1. Calculate the factorial of the length of the string. 2. Divide the factorial by the factorial of the count of each unique character in the string (if a character occurs more than once). Here\'s a hint on how you can approach the solution: ```python from math import factorial from collections import Counter def string_permutations(s): count = Counter(s) result = factorial(len(s)) for v in count.values(): result //= factorial(v) return result # Example usage assert string_permutations(\\"abc\\") == 6 assert string_permutations(\\"aab\\") == 3 ```","solution":"from math import factorial from collections import Counter def string_permutations(s: str) -> int: Returns the number of unique permutations of the characters in the string `s`. count = Counter(s) result = factorial(len(s)) for v in count.values(): result //= factorial(v) return result"},{"question":"A common problem in computer science is calculating the greatest common divisor (GCD) of two integers. The GCD of two integers is the largest integer that divides both of them without leaving a remainder. One widely used algorithm to find the GCD is the Euclidean algorithm, which can be defined with the following steps: 1. If `b` is 0, then the GCD is `a`. 2. Otherwise, the GCD of `a` and `b` is the same as the GCD of `b` and the remainder of `a` divided by `b`. Write a function called `findGCD` that takes two non-negative integers `a` and `b` and returns their GCD. If both numbers are zero, return `0`. ```python def findGCD(a, b): # Your code here ``` # Examples ```python findGCD(48, 18) # should return 6 findGCD(56, 98) # should return 14 findGCD(0, 0) # should return 0 findGCD(20, 0) # should return 20 findGCD(0, 100) # should return 100 findGCD(24, 36) # should return 12 ``` # Notes - Both `a` and `b` will be non-negative integers (from 0 up to any reasonably large value your programming language can handle). - The solution must be efficient and use the Euclidean algorithm.","solution":"def findGCD(a, b): Returns the greatest common divisor (GCD) of two non-negative integers a and b using the Euclidean algorithm. if a == 0 and b == 0: return 0 while b != 0: a, b = b, a % b return a"},{"question":"Description Write a function that takes a list of integers and returns a new list where each element is replaced by the product of all other elements in the list, excluding the element at the current index. Constraints: - The input list will have at least two integers. - All elements in the list are guaranteed to be non-zero. Examples: # Example 1: Input: ```python [1, 2, 3, 4] ``` Output: ```python [24, 12, 8, 6] ``` # Example 2: Input: ```python [6, 2, 1, 4] ``` Output: ```python [8, 24, 48, 12] ``` # Extra info - You are not allowed to use division in your solution. - The input list should remain unmodified. - Make sure the solution is optimized for time complexity.","solution":"def product_except_self(nums): Given a list of integers, returns a new list where each element is replaced by the product of all other elements in the list, excluding the element at the current index. n = len(nums) output = [1] * n left_product = 1 for i in range(n): output[i] = left_product left_product *= nums[i] right_product = 1 for i in range(n-1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"For a given list of integers, write a function that returns the smallest positive integer that cannot be represented as the sum of any subset of the given list. ```if-not:haskell The function should return \\"Not valid\\" if the input list is empty or contains non-integer elements. ``` ```if:haskell The function should return `Nothing` if the input list is empty or contains non-integer elements and `Just` the result otherwise. ``` For example: Input: `[1, 2, 3, 8, 9, 10]` Output: `7` Input: `[1, 1, 3, 4]` Output: `10` Input: `[1, 2, 2, 5, 7]` Output: `18` Other Kata in this Series: Smallest Positive Integer #1 Smallest Positive Integer #1.5 Smallest Positive Integer #2 Smallest Positive Integer #3 Smallest Positive Integer #3.5 Smallest Positive Integer #4","solution":"def smallest_positive_integer_not_sum_of_subset(nums): if not all(isinstance(x, int) for x in nums) or not nums: return \\"Not valid\\" nums.sort() smallest_int = 1 for num in nums: if num > smallest_int: break smallest_int += num return smallest_int"},{"question":"Given an array of integers, determine if each integer in the array is composed of only prime digits (2, 3, 5, 7). Return \\"YES\\" if all digits are prime, otherwise return \\"NO\\". -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single string representing the integer. -----Output----- For each test case, output a single line with \\"YES\\" if all digits of the integer are prime, otherwise \\"NO\\". -----Example----- Input: 3 235 124 357 Output: YES NO YES -----Constraints----- 1<=T<=103 1<= length of the integer <=18","solution":"def is_prime_digit(char): Returns True if the provided character represents a prime digit (2, 3, 5, 7), otherwise False. return char in {\'2\', \'3\', \'5\', \'7\'} def all_prime_digits(num_str): Determines if all digits in the given string represent prime digits. for char in num_str: if not is_prime_digit(char): return \\"NO\\" return \\"YES\\" def check_prime_digits(test_cases): Processes multiple test cases to determine if all the digits in each are prime digits. results = [] for num_str in test_cases: results.append(all_prime_digits(num_str)) return results"},{"question":"Write a function that takes an array of integers and a target integer. The function should return indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. The solution should be in O(n) time complexity. Examples ``` nums = [2, 7, 11, 15], target = 9 return [0, 1] nums = [3, 2, 4], target = 6 return [1, 2] nums = [3, 3], target = 6 return [0, 1] ``` Constraints `2 <= nums.length <= 10^4` `-10^9 <= nums[i] <= 10^9` `-10^9 <= target <= 10^9`","solution":"def two_sum(nums, target): Returns indices of the two numbers such that they add up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i"},{"question":"Given a list of integers, you are required to find the longest contiguous subarray such that the difference between the maximum and minimum values in this subarray is at most a given integer `k`. ``` Examples: solve([1, 3, 2, 4, 5, 6], 2) = 3. The longest subarray is [3, 2, 4] where max - min = 2. solve([10, 1, 2, 4, 7, 2], 5) = 4. The longest subarray is [10, 1, 2, 4] where max - min = 4. solve([1, 5, 9, 3, 8, 7], 4) = 2. The longest subarray is [5, 9] where max - min = 4. ``` More examples in test cases. Good luck!","solution":"from collections import deque def solve(arr, k): Finds the length of the longest contiguous subarray such that the difference between the maximum and minimum values in this subarray is at most k. n = len(arr) if n == 0: return 0 max_d = deque() min_d = deque() l = 0 result = 0 for r in range(n): while max_d and arr[max_d[-1]] <= arr[r]: max_d.pop() max_d.append(r) while min_d and arr[min_d[-1]] >= arr[r]: min_d.pop() min_d.append(r) while arr[max_d[0]] - arr[min_d[0]] > k: if max_d[0] == l: max_d.popleft() if min_d[0] == l: min_d.popleft() l += 1 result = max(result, r - l + 1) return result"},{"question":"A company needs to manage a list of employees and their tasks. Write a function that, given the current list of employees, their assigned tasks, and a new task to be assigned, returns the updated list of assignments. Each employee can only handle tasks up to a certain number of hours per week. ```Python assign_task(employees, tasks, new_task, hours) employees is a list of employee names tasks is a dictionary where key is the employee name and value is a list of assigned task hours new_task is a tuple (employee_name, task_hours) hours is the maximum number of hours an employee can handle per week ``` # Example ```Python employees = [\\"Alice\\", \\"Bob\\", \\"Charlie\\"] tasks = {\\"Alice\\": [5, 3], \\"Bob\\": [2, 6], \\"Charlie\\": [4]} new_task = (\\"Alice\\", 4) hours = 10 assign_task(employees, tasks, new_task, hours) should return {\\"Alice\\": [5, 3, 4], \\"Bob\\": [2, 6], \\"Charlie\\": [4]} new_task = (\\"Bob\\", 8) assign_task(employees, tasks, new_task, hours) should return \\"Task cannot be assigned, exceeds limit\\" ``` Hint: Consider edge cases where the employee does not exist in the current list.","solution":"def assign_task(employees, tasks, new_task, hours): Assigns a new task to an employee if it does not exceed their weekly limit. Args: employees (list): List of employee names. tasks (dict): Dictionary with employee names as keys and lists of assigned task hours as values. new_task (tuple): A tuple containing the employee name and the task hours to be assigned. hours (int): Maximum number of hours an employee can handle per week. Returns: dict: Updated tasks dictionary if the task is assigned. str: Error message if the task cannot be assigned. employee_name, task_hours = new_task if employee_name not in employees: return \\"Employee does not exist\\" current_hours = sum(tasks.get(employee_name, [])) if current_hours + task_hours > hours: return \\"Task cannot be assigned, exceeds limit\\" if employee_name in tasks: tasks[employee_name].append(task_hours) else: tasks[employee_name] = [task_hours] return tasks"},{"question":"Create a function that simulates the process of defragmenting a sequence of memory blocks. You are given an input array where each element represents a memory block. Each block can either be occupied (represented by `1`), or empty (represented by `0`). The goal is to move all `1`s to the beginning of the array, while maintaining their relative order, and move all `0`s to the end of the array. Return the defragmented array. --- Example: -------- ``` Example input: [0, 1, 0, 1, 0, 1] Correct output: [1, 1, 1, 0, 0, 0] Example input: [1, 0, 1, 0, 0, 1, 0] Correct output: [1, 1, 1, 0, 0, 0, 0] ```","solution":"def defragment_memory(blocks): Defragments the memory blocks array by moving all 1s to the beginning and all 0s to the end while maintaining their relative order. Parameters: blocks (list): The list of memory blocks (1s and 0s) Returns: list: The defragmented memory blocks # Solution using list comprehensions num_ones = blocks.count(1) num_zeros = len(blocks) - num_ones return [1] * num_ones + [0] * num_zeros"},{"question":"You are given a list of integers and a sequence of operations that indicate how to transform these integers. For example: ```python numbers = [4, 7, 2, 3] operations = [\\"+\\", 2, \\"-\\", 1, \\"*\\", 3, \\"/\\", 2] ``` The operations list consists of alternating operators and operands. Your task is to apply each operation in sequence to the initial list of numbers. In the example above, you would: 1. Add 2 to each element: [6, 9, 4, 5] 2. Subtract 1 from each element: [5, 8, 3, 4] 3. Multiply each element by 3: [15, 24, 9, 12] 4. Divide each element by 2: [7.5, 12.0, 4.5, 6.0] Finally, return the resulting list. Note: All operations are applied element-wise. Division results should be kept as floating-point numbers. All inputs will be valid.","solution":"def apply_operations(numbers, operations): Apply a sequence of operations to a list of numbers. Arguments: numbers -- a list of integers operations -- a list of alternating operator symbols and operands Returns: A new list of numbers after the operations have been applied. result = numbers[:] i = 0 while i < len(operations): op = operations[i] val = operations[i + 1] if op == \'+\': result = [x + val for x in result] elif op == \'-\': result = [x - val for x in result] elif op == \'*\': result = [x * val for x in result] elif op == \'/\': result = [x / val for x in result] i += 2 return result"},{"question":"Given a string s containing only lowercase alphabet characters, determine if it can become a palindrome after deleting at most one character. A palindrome is a string that reads the same forward and backward. For example, given s = \\"abca\\", return true (you can remove character \'c\' to make it \\"aba\\", which is a palindrome); given s = \\"abc\\", return false (you would need to remove two characters to make it a palindrome). Note: The string will only contain lowercase alphabet characters and its length will not exceed 1,000. Credits: Special thanks to @techsith for providing this question and creating all test cases.","solution":"def valid_palindrome(s: str) -> bool: Returns true if the given string can become a palindrome after deleting at most one character. def is_palindrome_range(s, i, j): return all(s[k] == s[j-k+i] for k in range(i, j)) i, j = 0, len(s) - 1 while i < j: if s[i] != s[j]: return is_palindrome_range(s, i+1, j) or is_palindrome_range(s, i, j-1) i += 1 j -= 1 return True"},{"question":"The Maze Solver Problem Given a 2D grid representing a maze with walls and open paths, write a function to determine if there is a path from the start point to the end point. Implement a class that fulfills the following requirements: * Takes a 2D list (grid) as input, where \'0\' represents an open path and \'1\' represents a wall. * Takes the start and end points as input in the form of (row, col). * Implements a `has_path` function that returns a boolean indicating whether there is a path from the start point to the end point. # Constraints: - The grid will always have at least one row and one column. - Start and end points will always be within the grid boundaries. - You can move up, down, left, or right, but cannot move diagonally. - There are no loops within the path. # Example: ```python maze_example = MazeSolver([ [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0] ]) ``` Starting at point (0, 0) and ending at point (4, 4): ```python maze_example.has_path((0, 0), (4, 4)) == True ``` If the walls are arranged such that there is no possible route, for example, starting at point (0, 0) and ending at (3, 3): ```python maze_example.has_path((0, 0), (3, 3)) == False ``` # Hint: Use a depth-first search (DFS) or breadth-first search (BFS) algorithm to navigate through the grid and determine the path. Implementing an efficient search algorithm is crucial to ensure the solution works for large grids. Implementation must handle grids up to 1000x1000 efficiently, ensuring that the search does not exceed O(n^2) time complexity. # Boilerplate: ```python class MazeSolver: def __init__(self, grid): self.grid = grid self.rows = len(grid) self.cols = len(grid[0]) def has_path(self, start, end): # implement your pathfinding algorithm pass ```","solution":"class MazeSolver: def __init__(self, grid): self.grid = grid self.rows = len(grid) self.cols = len(grid[0]) def has_path(self, start, end): start_row, start_col = start end_row, end_col = end if self.grid[start_row][start_col] == 1 or self.grid[end_row][end_col] == 1: return False visited = set() def dfs(row, col): if (row, col) == (end_row, end_col): return True if not (0 <= row < self.rows and 0 <= col < self.cols and self.grid[row][col] == 0 and (row, col) not in visited): return False visited.add((row, col)) # Explore neighbors: right, left, down, up return (dfs(row, col + 1) or dfs(row, col - 1) or dfs(row + 1, col) or dfs(row - 1, col)) return dfs(start_row, start_col)"},{"question":"Alex is developing a new file compression utility tool. For the purpose of testing, he needs to generate a large string of repeated characters, followed by the count of their repetitions. Inspired by Run-Length Encoding (RLE), the encoded format will represent a string as a sequence of characters followed by their counts. Write a program to help Alex in generating the encoded string from the given input string. -----Input:----- - The input contains the string S, which consists of only lowercase English alphabets with a length up to 10^6 characters. -----Output:----- - Print the encoded string where each character in the original string is followed by its number of occurrences in a sequence. -----Constraints:----- - 1 leq Length of string S leq 10^6 -----Sample Input:----- aaabbccaaa -----Sample Output:----- a3b2c2a3","solution":"def run_length_encode(s): Encodes the given string using Run-Length Encoding (RLE). Parameters: s (str): The input string consisting of only lowercase English alphabets. Returns: str: The RLE encoded string. if not s: return \\"\\" encoded_string = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: encoded_string.append(current_char + str(count)) current_char = char count = 1 # Append the last character and its count encoded_string.append(current_char + str(count)) return \'\'.join(encoded_string)"},{"question":"Alice has a collection of `N` distinct stickers numbered from 1 to `N`. Every time she opens a new sticker pack, she finds exactly one of the stickers from her collection, with each sticker being equally likely to appear in each pack. Alice wants to complete her collection by obtaining all `N` stickers. She keeps opening new packs until her collection is complete (i.e., until she has all `N` stickers). Write a function that calculates the expected number of packs Alice will need to open to complete her collection. Example 1: Input: N = 1 Output: 1.00000 Explanation: Alice needs only 1 pack to get the sticker since there is only one sticker in the collection. Example 2: Input: N = 2 Output: 3.00000 Explanation: On average, Alice will need to open one pack to get the first sticker and two more packs on average to get the second sticker she does not yet have, totaling 3 packs. Example 3: Input: N = 5 Output: 11.41667 Note: 1 <= N <= 1000 The expected result should be accurate up to 5 decimal places.","solution":"def expected_packs(N): Calculate the expected number of packs Alice will need to open to complete her collection of N stickers. if N <= 0: return 0.0 expected_value = 0.0 for k in range(1, N + 1): expected_value += N / k return round(expected_value, 5)"},{"question":"Write a function `compressString` that takes a string `s` as input and returns a compressed version of the string where consecutive repeated characters are replaced with the character followed by the count of consecutive occurrences. If the compressed string is not smaller than the original string, return the original string. Example: - compressString(\\"aabcccccaaa\\") returns \\"a2b1c5a3\\" - compressString(\\"abcdef\\") returns \\"abcdef\\" because the compressed string would not be smaller.","solution":"def compressString(s): Compresses the string by replacing sequences of repeated characters. If the compressed string is not shorter than the original, returns the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed = \'\'.join(compressed) return compressed if len(compressed) < len(s) else s"},{"question":"You are organizing a marathon and have a set number of refreshment stations along the route. However, due to budget constraints, you can only afford to set up a limited number of these stations. You want to place them such that the distance between the starting point and each station is as evenly distributed as possible along the marathon route. ___ # Input You\'ll be given 3 arguments: 1. total_distance The total length of the marathon route in kilometers. Example: `50` 2. total_stations The total number of stations that can be set up. Example: `10` 3. required_stations The number of stations you want to set up along the route. Example: `5` ___ # Output A list of integers representing the distances along the marathon route where the stations should be set up. The distances should be in kilometers and should be rounded to the nearest integer. Example output: `[10, 20, 30, 40, 50]` If the required number of stations is greater than the total number of stations or less than 1, return `\\"Invalid input\\"`. --- Note If the distance cannot be perfectly distributed, the stations should be placed as evenly as possible. If there are multiple correct answers, any correct answer will be considered valid. ___ All comments/feedback/translations appreciated.","solution":"def distribute_stations(total_distance, total_stations, required_stations): if required_stations > total_stations or required_stations < 1: return \\"Invalid input\\" interval = total_distance / (required_stations + 1) stations = [round(interval * (i + 1)) for i in range(required_stations)] return stations"},{"question":"Write a function that takes a list of integers and returns a list with each integer incremented by its position in the list (0-based index). For example: ``` input: [5, 10, 15, 20] output: [5, 11, 17, 23] ``` The elements are incremented as follows: - The first element (5) is incremented by 0 (its index), resulting in 5. - The second element (10) is incremented by 1 (its index), resulting in 11. - The third element (15) is incremented by 2 (its index), resulting in 17. - The fourth element (20) is incremented by 3 (its index), resulting in 23. The input list will contain at least one integer, and all integers will be non-negative.","solution":"def increment_by_index(lst): Returns a new list where each element is incremented by its position in the list. Parameters: lst (list): A list of non-negative integers. Returns: list: A new list with each integer incremented by its position in the list. return [num + idx for idx, num in enumerate(lst)]"},{"question":"Given a string, determine if it can be rearranged to form a palindrome. Example 1: Input: \\"racecar\\" Output: True Explanation: The string \\"racecar\\" is already a palindrome. Example 2: Input: \\"aabbcc\\" Output: True Explanation: The string \\"aabbcc\\" can be rearranged to form the palindrome \\"abcabc\\". Example 3: Input: \\"abc\\" Output: False Explanation: No permutations of the string \\"abc\\" can form a palindrome. Example 4: Input: \\"aabcd\\" Output: False Explanation: No permutations of the string \\"aabcd\\" can form a palindrome.","solution":"def can_form_palindrome(s): Determine if a string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if the number of characters with odd counts is zero or one. Args: s (str): Input string Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Several students in a class have taken a number of tests, and they want to determine their consistency in performance over time. Given the scores of each student in multiple tests, we need to find the longest non-decreasing subarray of scores for each student. The length of this subarray is a measure of the student\'s consistency. Write a function that, given a list of lists representing the scores of each student, returns a list of the lengths of the longest non-decreasing subarrays for each student. Function Signature: ```python def longest_consistent_performance(scores: List[List[int]]) -> List[int]: ``` # Input - `scores`: a list of lists of integers, where each inner list represents the scores of a single student across multiple tests. # Output - A list of integers, where each integer represents the length of the longest non-decreasing subarray of scores for each respective student. # Constraints - 1 <= number of students <= 100 - 1 <= number of tests per student <= 100 - 0 <= scores <= 100 # Complexity - Your solution should efficiently handle the given constraints. # Example ```python # Example 1 input_scores = [ [10, 20, 30, 25, 35] ] output = longest_consistent_performance(input_scores) print(output) # Output: [3] # Example 2 input_scores = [ [5, 4, 3, 2, 1], [1, 2, 2, 3, 4], [8, 8, 8, 8, 8] ] output = longest_consistent_performance(input_scores) print(output) # Output: [1, 5, 5] ``` # Note - In Example 1, the student\'s scores are [10, 20, 30, 25, 35]. The longest non-decreasing subarray is [10, 20, 30], which has a length of 3. - In Example 2: - The first student\'s scores are [5, 4, 3, 2, 1]. The longest non-decreasing subarray is any individual score, so the length is 1. - The second student\'s scores are [1, 2, 2, 3, 4]. The whole array is non-decreasing, so the length is 5. - The third student\'s scores are [8, 8, 8, 8, 8]. The whole array is non-decreasing, so the length is 5.","solution":"def longest_consistent_performance(scores): Given the scores of each student in multiple tests, returns a list of the lengths of the longest non-decreasing subarrays for each student. Parameters: scores (list of list of int): A list of lists of integers representing the scores of each student. Returns: list of int: A list of integers where each integer represents the length of the longest non-decreasing subarray for each respective student. def longest_non_decreasing_subarray_length(student_scores): if not student_scores: return 0 max_length = 1 current_length = 1 for i in range(1, len(student_scores)): if student_scores[i] >= student_scores[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length) return [longest_non_decreasing_subarray_length(student) for student in scores]"},{"question":"You are given an array of integers `arr` and an integer `k`. Your task is to determine the maximum sum of any subarray of size `k`. A subarray is a contiguous part of an array. For example, if the input array is `[4, 2, 1, 7, 8, 1, 2, 8, 1, 0]` and `k = 3`, then some of the subarrays of size `k` are `[4, 2, 1]`, `[2, 1, 7]`, `[1, 7, 8]`, etc., and the maximum sum among them is `16` (from subarray `[7, 8, 1]`). Write a function `max_sum_subarray(arr, k)` that takes an array of integers `arr` and an integer `k`, and returns the maximum sum of any subarray of size `k`. # Constraints - The input array can be of any length from 1 to (10^5). - The elements of the array are integers that can be positive, negative, or zero. - (1 le k le text{{len}}(arr) le 10^5) # Examples Example 1 **Input:** ```json { \\"arr\\": [4, 2, 1, 7, 8, 1, 2, 8, 1, 0], \\"k\\": 3 } ``` **Output:** ```json { \\"result\\": 16 } ``` **Explanation:** The maximum sum of any subarray of size 3 is `16` (from subarray `[7, 8, 1]`). Example 2 **Input:** ```json { \\"arr\\": [1, -1, 5, -2, 3, 3, -1], \\"k\\": 2 } ``` **Output:** ```json { \\"result\\": 6 } ``` **Explanation:** The maximum sum of any subarray of size 2 is `6` (from subarray `[3, 3]`). Example 3 **Input:** ```json { \\"arr\\": [1, 4, 2, 10, 2, 3, 1, 0, 20], \\"k\\": 4 } ``` **Output:** ```json { \\"result\\": 24 } ``` **Explanation:** The maximum sum of any subarray of size 4 is `24` (from subarray `[4, 2, 10, 8]`).","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of any subarray of size k. if k > len(arr): return 0 # Initial window sum for the first window of size k max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): # Slide the window to right by removing the first element of the previous window # and adding the next element in the array current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You have been tasked to develop a function to evaluate arithmetic expressions given in the form of a string containing only non-negative integers, plus signs (\'+\'), minus signs (\'-\'), times signs (\'*\'), and divide signs (\'/\'). Parentheses are not included and the expression may contain spaces that you should ignore. The operations should be performed respecting the standard operator precedence. Write a function to calculate the result of the expression. Example: Input: \\"3+2 * 2\\" Output: 7 Explanation: Evaluate the expression while respecting the operator precedence (multiplication and division before addition and subtraction). Therefore, 2 * 2 is evaluated before adding 3. Input: \\" 3/2 \\" Output: 1 Explanation: Ignore the spaces and perform the division. Input: \\"3+5 / 2 \\" Output: 5 Explanation: Ignore the spaces and perform the division first, then add the result to 3.","solution":"def evaluate_expression(expression): Evaluates an arithmetic expression given as a string containing only non-negative integers, plus signs (\'+\'), minus signs (\'-\'), times signs (\'*\'), and divide signs (\'/\'). Ignores spaces. Operations are performed respecting the standard operator precedence. def apply_operator(operands, operator): b = operands.pop() a = operands.pop() if operator == \'+\': operands.append(a + b) elif operator == \'-\': operands.append(a - b) elif operator == \'*\': operands.append(a * b) elif operator == \'/\': operands.append(int(a / b)) # use int() for floor division expression = expression.replace(\' \', \'\') # Remove spaces n = len(expression) operands = [] operators = [] i = 0 while i < n: if expression[i].isdigit(): num = 0 while i < n and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 operands.append(num) else: while (operators and operators[-1] in \\"*/\\" and expression[i] in \\"+-*/\\"): apply_operator(operands, operators.pop()) if expression[i] in \\"*/\\": while (operators and operators[-1] in \\"*/\\"): apply_operator(operands, operators.pop()) operators.append(expression[i]) i += 1 while operators: apply_operator(operands, operators.pop()) return operands[0]"},{"question":"Write a function that determines if a given string is a valid hexadecimal color code. A hexadecimal color code starts with a \'#\' followed by exactly 6 hexadecimal digits (0-9, a-f, A-F). ```python def is_valid_hex_color(code: str) -> bool: pass # Examples: is_valid_hex_color(\\"#1a2B3c\\") -> True is_valid_hex_color(\\"#123abc\\") -> True is_valid_hex_color(\\"123abc\\") -> False (missing \'#\') is_valid_hex_color(\\"#123abz\\") -> False (invalid character \'z\') is_valid_hex_color(\\"#123abcd\\") -> False (wrong length) ``` Your task is to implement `is_valid_hex_color` function that returns `True` if the input string is a valid hexadecimal color code and `False` otherwise. Consider the time complexity of your solution, and ensure it efficiently validates the input as specified.","solution":"def is_valid_hex_color(code: str) -> bool: if len(code) != 7 or code[0] != \'#\': return False for char in code[1:]: if char not in \'0123456789abcdefABCDEF\': return False return True"},{"question":"Write a function that takes an integer and returns a list containing each digit as an integer in the order they appear in the given number. Ensure the function works for both positive and negative integers. For example: ```python split_digits(12345) => [1, 2, 3, 4, 5] split_digits(-6789) => [-6, 7, 8, 9] ``` The function should handle 0 as input: ```python split_digits(0) => [0] ``` The function should also handle large integers.","solution":"def split_digits(number): Returns a list containing each digit of the number as an integer in the order they appear. For negative numbers, the first element will be a negative digit. if number == 0: return [0] digits = [] is_negative = number < 0 number = abs(number) while number > 0: digits.append(number % 10) number //= 10 digits.reverse() if is_negative: digits[0] = -digits[0] return digits"},{"question":"An Adventure on the Grid In a magical land far, far away, there exists a novel grid-based labyrinth game. Each cell on the grid either contains a treasure or is empty. You are initially positioned at the top-left corner of an `n x n` grid. Your objective is to collect all the treasures in the grid while following a specific set of movement rules. You can only move: - Right (R) - Down (D) This means that from any cell at position `(i, j)`, you can move to `(i, j+1)` or `(i+1, j)`, provided these cells are within the boundaries of the grid. Given an `n x n` grid `grid` where `grid[i][j]` is 1 if there is a treasure in cell `(i, j)` and 0 if the cell is empty, you need to determine the maximum number of treasures you can collect following the movement rules from the top-left corner to the bottom-right corner of the grid. # Your Function Your task is to implement the function `maxTreasures(grid: List[List[int]]) -> int`. The function should take a 2D list representing the grid as input and return the maximum number of treasures you can collect starting from the top-left to the bottom-right cell. # Example ```python grid = [ [1, 0, 1], [0, 1, 0], [1, 0, 1] ] maxTreasures(grid) # Output: 3 ``` # Explanation In this example, the maximum number of treasures you can collect is 3. One possible path to achieve this is: - Start from `(0,0)`, which has a treasure. - Move Right to `(0,1)` which has no treasure. - Move Right to `(0,2)` which has a treasure. - Move Down to `(1,2)` which has no treasure. - Move Down to `(2,2)` which has a treasure. Constraints - `1 <= n <= 100` - Each cell in the grid is either `0` or `1`. Design your approach to handle the maximum possible input size efficiently.","solution":"from typing import List def maxTreasures(grid: List[List[int]]) -> int: n = len(grid) dp = [[0]*n for _ in range(n)] # Initialize the treasure in the top-left cell dp[0][0] = grid[0][0] # Initialize the first row (rightward movement only) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column (downward movement only) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The maximum treasures collected will be in the bottom-right cell return dp[n-1][n-1]"},{"question":"# Description: Implement a function that takes a list of integers and returns the maximum possible sum of a sublist (or subarray). A sublist can be empty, which means the minimum possible sum is 0. Consider the following example: ``` input_list = [3, -2, 5, -1] ``` The maximum sum possible for a sublist in this example is 6, obtained by summing up the sublist `[3, -2, 5]`. # Task: Write a function `max_sublist_sum(input_list)` that takes a list of integers as input and returns the maximum sum of any sublist of the given list. An empty sublist (which yields a sum of 0) is always a legitimate sublist, so the function should return 0 if no positive sums are possible. # Examples: ``` max_sublist_sum([3, -2, 5, -1]) should return 6 max_sublist_sum([-2, -3, -1]) should return 0 (because the sublist is empty) max_sublist_sum([1, 2, 3, 4, 5]) should return 15 (sum of entire list) max_sublist_sum([34, -50, 42, 14, -5, 86]) should return 137 ``` # Constraints: - The input list will always contain integers and will have at least one element. - The elements of the list will be within the range of -10^5 to 10^5. - The length of the list `n` will be at most 10^5. # Notes: - Your solution should handle large input sizes efficiently. - Consider edge cases where all numbers could be negative, or where all elements are positive.","solution":"def max_sublist_sum(input_list): Returns the maximum possible sum of a sublist in the given list. If the list contains only negative numbers, the maximum sum will be 0, as an empty sublist is considered legitimate. max_sum = 0 current_sum = 0 for num in input_list: current_sum = max(0, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an array of n integers. Determine the minimum number of adjacent swaps needed to sort the array in non-decreasing order. -----Input----- The first line contains an integer n — the length of the array (1 ≤ n ≤ 2·10^5). The second line contains n space-separated integers a_{i} (1 ≤ a_{i} ≤ 10^6). -----Output----- Print the minimum number of adjacent swaps required to sort the array. -----Examples----- Input 3 3 1 2 Output 2 Input 5 5 4 3 2 1 Output 10","solution":"def min_adjacent_swaps_to_sort(arr): def bubble_sort(arr): swaps = 0 n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swaps += 1 return swaps result = bubble_sort(arr[:]) return result"},{"question":"A company has decided to implement a sharing system for their office bikes. There are n employees and m bikes. Each employee i has a specific time slot [s_i, t_i] during which they can use a bike. An employee can only use a bike if there\'s any bike available at the start of their time slot s_i. After the employee finishes their bike usage, the bike becomes available again. Each employee can only use a bike for the entirety of their specified time slot once. Your task is to determine the maximum number of employees who can use the bikes without overlapping their required time slots. -----Input----- The first line contains two integers n and m (1 leq n, m leq 100000) — the number of employees and the number of bikes. The i-th of the next n lines contains two integers s_i and t_i (0 leq s_i < t_i leq 1000000) — the starting and ending time of employee i\'s time slot. -----Output----- Print a single integer, the maximum number of employees who can use a bike without overlapping their time slots. -----Examples----- Input 5 2 1 4 2 6 5 8 3 5 7 9 Output 4 Input 3 3 1 3 2 5 6 9 Output 3 -----Note----- In the first example, the maximum number of employees who can use bikes is 4: employee 1 can use a bike from 1 to 4, employee 2 from 2 to 6 (using different bikes), employee 3 from 5 to 8, and employee 5 from 7 to 9. In the second example, all employees can use a bike since there are as many bikes as employees.","solution":"def max_employees_with_bikes(n, m, time_slots): Determines the maximum number of employees who can use bikes without overlapping their time slots. Args: n (int): Number of employees. m (int): Number of bikes. time_slots (list of tuples): Each tuple contains the start and end time for each employee. Returns: int: The maximum number of employees who can use the bikes. # Sort the time slots based on end time sorted_slots = sorted(time_slots, key=lambda x: x[1]) bike_end_times = [0] * m used_bikes = 0 for start, end in sorted_slots: for i in range(m): if bike_end_times[i] <= start: bike_end_times[i] = end used_bikes += 1 break return used_bikes"},{"question":"Write a function that accepts a string and returns the string with all its unique characters in the order in which they appear. # Requirements: 1) The function should maintain the order of characters as they first appear in the string. 2) The function should return a string containing only one occurrence of each character. 3) The function should handle both uppercase and lowercase characters as distinct characters. 4) If the input string is empty, the function should return an empty string. # Examples: - For the input `\\"aabbcc\\"`, the output should be `\\"abc\\"`. - For the input `\\"Hello\\"`, the output should be `\\"Helo\\"`. - For the input `\\"abracadabra\\"`, the output should be `\\"abrcd\\"`. - For the input `\\"122333\\"`, the output should be `\\"123\\"`. # Notes: - The function should work for strings containing letters, digits, and special characters. - Be mindful of the time complexity when designing your solution.","solution":"def unique_characters(s): Returns a string with all unique characters from the input string `s` in the order they appear. :param s: Input string :return: String with unique characters seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"A **Magic Square** is a 2D square grid of numbers where the sums of the numbers in each row, each column, and both main diagonals are the same. For this task, you need to write a function that checks whether a given 2D list of integers is a magic square. The function should return `True` if the input is a magic square, and `False` otherwise. Your function should take a single parameter - the 2D list `square`, and the dimensions of the grid are guaranteed to be `n x n` where `1 <= n <= 10`. For example: - If the input is `[[2, 7, 6], [9, 5, 1], [4, 3, 8]]`, the function should return `True` as it is a magic square. - If the input is `[[1, 2], [3, 4]]`, the function should return `False` as it is not a magic square. Function signature: ```python def is_magic_square(square: List[List[int]]) -> bool: pass ```","solution":"def is_magic_square(square): Determines if a given 2D list (square) is a magic square. A magic square is a 2D square grid of numbers where the sums of the numbers in each row, each column, and both main diagonals are the same. Parameters: square (list of list of int): A 2D list representing the square grid. Returns: bool: True if the input is a magic square, False otherwise. n = len(square) # Calculate the sum of the first row to use as the reference sum sum_ref = sum(square[0]) # Check sums of all rows for row in square: if sum(row) != sum_ref: return False # Check sums of all columns for col in range(n): if sum(square[row][col] for row in range(n)) != sum_ref: return False # Check sum of main diagonal if sum(square[i][i] for i in range(n)) != sum_ref: return False # Check sum of other diagonal if sum(square[i][n-i-1] for i in range(n)) != sum_ref: return False return True"},{"question":"You are given a rectangular grid consisting of \'0\'s and \'1\'s, which represents a binary matrix. Your task is to find the largest square containing only \'1\'s and return its area. -----Input:----- - First line contains two integers m and n, the number of rows and columns in the matrix respectively. - Next m lines each containing n characters (\'0\' or \'1\'), representing the grid. -----Output:----- Output a single integer, the area of the largest square containing only \'1\'s. -----Constraints----- - 1 leq m, n leq 100 - Each character in the grid is either \'0\' or \'1\'. -----Sample Input 1:----- 4 5 10100 10111 11111 10010 -----Sample Output 1:----- 4 -----Sample Input 2:----- 3 3 111 111 111 -----Sample Output 2:----- 9 -----Explanation:----- In the first test case, the largest square containing only \'1\'s is of size 2x2, thus the area is 4. In the second test case, the entire grid forms the largest square containing only \'1\'s, thus the area is 9.","solution":"def maximalSquare(matrix): Returns the area of the largest square containing only \'1\'s in a binary matrix. if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0] * n for _ in range(m)] max_side = 0 for i in range(m): for j in range(n): if matrix[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side def process_input_to_matrix(m, n, raw_matrix): matrix = [] for line in raw_matrix: matrix.append(line.strip()) return matrix"},{"question":"=====Problem Statement===== In Python, sets are a collection type that store unordered, unique elements. They support operations like union, intersection, and difference. Task Write a function that takes two lists of integers and returns a sorted list of integers that represent the symmetric difference between the two sets derived from the input lists. Symmetric difference between two sets A and B is the set of all elements that are in either A or B but not in both. =====Input Format===== - Two lines of input. - The first line contains space-separated integers representing elements of the first list. - The second line contains space-separated integers representing elements of the second list. =====Constraints===== - Each list will have at most 100 elements. - All integers in the lists will be in the range -1000 to 1000. =====Output Format===== Print a sorted list of integers as the result, with each integer separated by a space.","solution":"def symmetric_difference(list1, list2): Returns a sorted list of integers representing the symmetric difference between the two sets derived from the input lists. set1 = set(list1) set2 = set(list2) sym_diff = set1.symmetric_difference(set2) return sorted(sym_diff)"},{"question":"Create a function that takes in a list of words and returns a dictionary with the words as keys and the length of each word as the corresponding value. If the input list is empty or null, return an empty dictionary. # Example For input `[\'apple\', \'banana\', \'cherry\']`, you should return `{\'apple\': 5, \'banana\': 6, \'cherry\': 6}`.","solution":"def words_length(words): Returns a dictionary where the keys are words and the values are their lengths. if words is None or not words: return {} return {word: len(word) for word in words}"},{"question":"Write a function `generate_spiral_matrix(n)` that returns an `n × n` array representing a spiral matrix starting from 1 up to `n^2`. The matrix should be filled with consecutive numbers starting from 1 in a clockwise spiraling order starting from the top-left corner of the matrix. **Input:** - An integer `n` (1 ≤ `n` ≤ 20) representing the dimensions of the square matrix. **Output:** - An `n × n` array with numbers filled in a spiral order. **Example:** ```python # Input n = 3 # Output [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] ``` **Explanation:** For `n = 3`, the matrix is filled in a spiral order starting from the top-left corner: 1 → 2 → 3 → 4 → 5 → 6 → 7 → 8 → 9 **Constraints:** - The input n is a positive integer within the constraint 1 to 20. - The matrix needs to be filled with consecutive integers starting from 1.","solution":"def generate_spiral_matrix(n): Generates an n x n spiral matrix. Parameters: n (int): The dimension of the square matrix Returns: List[List[int]]: The n x n spiral matrix matrix = [[0] * n for _ in range(n)] num = 1 left, right, top, bottom = 0, n - 1, 0, n - 1 while left <= right and top <= bottom: # Fill the top row for col in range(left, right + 1): matrix[top][col] = num num += 1 top += 1 # Fill the right column for row in range(top, bottom + 1): matrix[row][right] = num num += 1 right -= 1 # Fill the bottom row for col in range(right, left - 1, -1): matrix[bottom][col] = num num += 1 bottom -= 1 # Fill the left column for row in range(bottom, top - 1, -1): matrix[row][left] = num num += 1 left += 1 return matrix"},{"question":"=====Problem Statement===== The included code stub will read an integer, n, from STDIN. Write a program to calculate the sum of the squares of all integers from 1 to n (both inclusive) and print the result. =====Example===== n = 3 The sum of the squares of integers from 1 to 3 is 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14. Print the integer 14. =====Input Format===== The first line contains an integer n. =====Constraints===== 1≤n≤100 =====Output Format===== Print the sum of the squares of all integers from 1 to n.","solution":"def sum_of_squares(n): Returns the sum of the squares of all integers from 1 to n (inclusive). return sum(i ** 2 for i in range(1, n + 1)) # Example usage: if __name__ == \\"__main__\\": n = int(input().strip()) print(sum_of_squares(n))"},{"question":"Write a program that determines if a given string is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards (excluding spaces and punctuation), and a permutation is a rearrangement of letters. The program should ignore case sensitivity. Examples ```python is_palindrome_permutation(\\"civic\\") = True # \\"civic\\" is a palindrome, so it is also a permutation of a palindrome. is_palindrome_permutation(\\"ivicc\\") = True # \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. is_palindrome_permutation(\\"hello\\") = False # \\"hello\\" cannot be rearranged to form a palindrome. is_palindrome_permutation(\\"A man, a plan, a canal, Panama\\") = True # \\"amanaplanacanalpanama\\" is a palindrome, so the original phrase is a permutation of a palindrome. ``` *Hint: Consider using a frequency counter to assess if the characters can form a palindrome.*","solution":"def is_palindrome_permutation(s): Determines if the given string is a permutation of a palindrome. from collections import Counter # Remove spaces and convert to lowercase s = \'\'.join(char.lower() for char in s if char.isalnum()) # Count frequency of each character char_count = Counter(s) # A string can be a permutation of a palindrome if at most one character # has an odd frequency (for the middle character in an odd length palindrome) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"The city of Gridtopia is built on a perfect square grid with `N` rows and `N` columns, each cell representing a different district. The mayor of Gridtopia wants to build a new park. The park must be a square-shaped area within the grid, but due to budget constraints, the park area should cover as few districts as possible. Your task is to determine the side length of the smallest square-shaped area (park) that can be built in Gridtopia such that there is at least one row (or column) of districts surrounding this park on all four sides (north, south, east, and west). -----Input----- T, the number of test cases, followed by T lines. Each line containing the positive integer N >= 4 which represents the side length of the grid. -----Output----- T lines of output, each line containing the positive integer P, where P is the side length of the smallest possible park. -----Example----- Input: 1 5 Output: 1","solution":"def smallest_park_side_length(N): Returns the side length of the smallest possible park that can be built in a grid of side length N, such that the park is surrounded by at least one row and one column of districts on all four sides. if N < 4: return 0 # If N < 4 this scenario is invalid based on problem assumption N >= 4 return N - 2"},{"question":"You are given a grid with R rows and C columns, where each cell contains either a \'.\' (representing an empty cell) or a \'#\' (representing an obstacle). You start at cell (1,1) and your goal is to reach cell (R,C). From any cell, you can move to an adjacent cell (top, down, left, or right) only if it is within the grid boundaries and not an obstacle. Write a program to determine the minimum number of steps needed to reach cell (R,C) from cell (1,1). If there\'s no possible way to reach the destination, return -1. -----Constraints----- - 1 ≤ R, C ≤ 1000 - The grid is given as a list of strings with length C each. -----Input----- The input is given from Standard Input in the following format: R C grid_1 grid_2 : grid_R Each grid_i is a string of length C. -----Output----- Print the minimum number of steps needed to reach cell (R,C) from cell (1,1). Print -1 if it\'s not possible to reach the destination. -----Sample Input----- 4 4 .... .. .#.. .... -----Sample Output----- 5 *Explanation*: The shortest path to reach the destination is: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (4,3) -> (4,4).","solution":"from collections import deque def min_steps_to_reach_end(R, C, grid): def is_valid(x, y): return 0 <= x < R and 0 <= y < C and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] start = (0, 0) end = (R-1, C-1) if grid[start[0]][start[1]] == \'#\' or grid[end[0]][end[1]] == \'#\': return -1 queue = deque([(start, 0)]) visited = set([start]) while queue: (x, y), steps = queue.popleft() if (x, y) == end: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append(((nx, ny), steps + 1)) return -1"},{"question":"Write a function that takes two parameters: a string and a character. The function should count how many times the character appears in the string. The function should be case-sensitive. Ex: Input: string = \\"Hello World\\", character = \\"o\\" Output: 2 Input: string = \\"Programming\\", character = \\"m\\" Output: 2 Input: string = \\"Data Science\\", character = \\"A\\" Output: 0 Note: Make sure you correctly handle cases where the character does not appear in the string at all.","solution":"def count_character_occurrences(string, character): Counts the number of times the character appears in the string. The function is case-sensitive. Args: string (str): The string in which to count the character. character (str): The character to count in the string. Returns: int: The number of times the character appears in the string. if not isinstance(string, str) or not isinstance(character, str) or len(character) != 1: raise ValueError(\\"Invalid input: \'string\' must be a string and \'character\' must be a single character string.\\") return string.count(character)"},{"question":"# Longest Substring without Repeating Characters Given a string, find the length of the longest substring without repeating characters. You need to return only the length of the longest substring. For example, if the input is \\"**abcabcbb**\\", the longest substring without repeating characters is \\"**abc**\\", which has a length of **3**. From LeetCode\'s [Problem #3](https://leetcode.com/problems/longest-substring-without-repeating-characters \\"LeetCode - Problem 3\\").","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"You are given a list of N integers and an integer K. Your task is to modify this list such that it contains no more than K distinct integers while minimizing the number of elements changed. If there are multiple solutions, return any of them. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. - For each test case: - The first line contains two space-separated integers N and K. - The second line contains N space-separated integers representing the elements of the list. -----Output----- For each test case, print a single line containing N space-separated integers representing the modified list. If there are multiple solutions, you may print any of them. -----Constraints----- - 1 le T le 50 - 1 le N le 2 times 10^5 - 1 le K le N - 1 le elements of the list le 10^9 - the sum of N over all test cases does not exceed 10^6 -----Example Input----- 2 5 2 1 2 2 3 3 6 3 4 4 4 4 4 4 -----Example Output----- 1 2 2 2 2 4 4 4 4 4 4","solution":"def modify_list_to_k_distinct_integers(n, k, arr): from collections import Counter counter = Counter(arr) distinct_vals = list(counter.keys()) if len(distinct_vals) <= k: return arr # No need to change anything if already <= K distinct elements. # Sort distinct_vals based on their frequency in descending order. distinct_vals.sort(key=lambda x: -counter[x]) most_frequent_vals = distinct_vals[:k] modified_list = [] for num in arr: if num in most_frequent_vals: modified_list.append(num) else: modified_list.append(most_frequent_vals[0]) # Replace with most frequent value. return modified_list def solve(test_cases): results = [] for n, k, arr in test_cases: modified_list = modify_list_to_k_distinct_integers(n, k, arr) results.append(\\" \\".join(map(str, modified_list))) return results # Parse input and call solve function def main(input_string): input_lines = input_string.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): n, k = map(int, input_lines[index].split()) arr = list(map(int, input_lines[index + 1].split())) test_cases.append((n, k, arr)) index += 2 results = solve(test_cases) for result in results: print(result) # Example usage: if __name__ == \\"__main__\\": input_data = \\"2n5 2n1 2 2 3 3n6 3n4 4 4 4 4 4n\\" main(input_data)"},{"question":"#Extract the domain from a URL Create a function that extracts the domain name from a given URL. For this purpose, you can assume that a URL always starts with \\"http://\\", \\"https://\\", or \\"www.\\" and that the domain name always ends before the first occurrence of a \'/\' or \':\' after these prefixes. The domain name will always be a single word consisting of letters and possibly single periods representing subdomains. Example: ```python url = \\"http://github.com/codingdojo\\" -> \\"github\\" url = \\"https://www.youtube.com/watch?v=abcd\\" -> \\"youtube\\" url = \\"www.example.org/index.html\\" -> \\"example\\" url = \\"http://bbc.co.uk/news\\" -> \\"bbc\\" ``` Write a function: ```python def extract_domain(url: str) -> str: # Your implementation here ``` The function should efficiently parse the input and extract the domain name according to the given rules. Accommodate potential variations in URL formatting while ensuring robust and accurate extraction.","solution":"def extract_domain(url: str) -> str: Extracts the domain name from a given URL. Parameters: url (str): The URL from which to extract the domain. Returns: str: The extracted domain name. # Remove the protocol if present if url.startswith(\\"http://\\"): url = url[7:] elif url.startswith(\\"https://\\"): url = url[8:] # Remove \'www.\' if present if url.startswith(\\"www.\\"): url = url[4:] # Find the domain by splitting at the first \'/\' or \':\' domain = url.split(\'/\')[0].split(\':\')[0] # Get the base domain without the subdomains base_domain = domain.split(\'.\')[0] return base_domain"},{"question":"# Energy Consumption Analysis In a smart city, energy consumption data is collected every hour from various sensors installed in different locations. Each location is identified by a unique ID, and at each hour, the energy consumption for that location is recorded. Task Implement the function `analyze_consumption(data, location_id)`, which takes a list of tuples `data` and a string `location_id` as inputs. Each tuple in `data` represents an entry with an hourly timestamp, a location ID, and the energy consumption value in kilowatt-hours (kWh). The function should return a dictionary with the following keys: - `\'total_consumption\'`: the total energy consumption for the given `location_id`. - `\'average_consumption\'`: the average energy consumption per hour for the given `location_id`. - `\'max_consumption\'`: the maximum energy consumption recorded for the given `location_id`. - `\'min_consumption\'`: the minimum energy consumption recorded for the given `location_id`. If the `location_id` does not exist in the data, the function should return: - `\'total_consumption\'`: 0 - `\'average_consumption\'`: 0 - `\'max_consumption\'`: 0 - `\'min_consumption\'`: 0 Examples ```python data = [ (\\"2023-01-01 01:00\\", \\"loc1\\", 15), (\\"2023-01-01 02:00\\", \\"loc1\\", 20), (\\"2023-01-01 01:00\\", \\"loc2\\", 30), (\\"2023-01-01 02:00\\", \\"loc2\\", 25), (\\"2023-01-01 03:00\\", \\"loc1\\", 18) ] analyze_consumption(data, \\"loc1\\") # Output: {\'total_consumption\': 53, \'average_consumption\': 17.67, \'max_consumption\': 20, \'min_consumption\': 15} analyze_consumption(data, \\"loc3\\") # Output: {\'total_consumption\': 0, \'average_consumption\': 0, \'max_consumption\': 0, \'min_consumption\': 0} ``` Notes: 1. The timestamp string format is `YYYY-MM-DD HH:MM`. 2. The average consumption should be rounded to 2 decimal places. 3. The `data` list can have between 0 and 10,000 entries. 4. Each location ID is unique within each tuple but may repeat across different tuples.","solution":"def analyze_consumption(data, location_id): Analyzes energy consumption for a given location_id from the provided data. Parameters: data (list of tuples): Each tuple contains (timestamp, location_id, energy_consumption in kWh). location_id (str): The unique identifier for the location to analyze. Returns: dict: A dictionary with keys \'total_consumption\', \'average_consumption\', \'max_consumption\', and \'min_consumption\' with corresponding values. consumption_values = [entry[2] for entry in data if entry[1] == location_id] if not consumption_values: return { \'total_consumption\': 0, \'average_consumption\': 0, \'max_consumption\': 0, \'min_consumption\': 0 } total_consumption = sum(consumption_values) average_consumption = round(total_consumption / len(consumption_values), 2) max_consumption = max(consumption_values) min_consumption = min(consumption_values) return { \'total_consumption\': total_consumption, \'average_consumption\': average_consumption, \'max_consumption\': max_consumption, \'min_consumption\': min_consumption }"},{"question":"You are given two strings A and B of lengths m and n respectively. Your task is to find the longest substring that appears in both A and B. The substring must occur contiguously in both strings. Write a function `longestCommonSubstring` that takes two strings, A and B, and returns the longest common substring. If there are multiple common substrings of the same maximum length, return any one of them. Example 1: Input: A = \\"abcdef\\", B = \\"zcdemf\\" Output: \\"cde\\" Explanation: The substring \\"cde\\" appears in both strings. Example 2: Input: A = \\"xyz\\", B = \\"abcd\\" Output: \\"\\" Explanation: There is no common substring between the two strings. Note: - 0 <= m, n <= 1000 - The strings consist of lowercase English letters.","solution":"def longestCommonSubstring(A, B): Returns the longest common substring between A and B. m, n = len(A), len(B) longest_end = 0 max_length = 0 dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > max_length: max_length = dp[i][j] longest_end = i else: dp[i][j] = 0 return A[longest_end - max_length: longest_end]"},{"question":"Given a string, return the length of the longest substring that contains only unique characters. For example: ``` solve(\\"abcabcbb\\") = 3 -- The answer is \\"abc\\", with the length of 3. solve(\\"bbbbb\\") = 1 -- The answer is \\"b\\", with the length of 1. solve(\\"pwwkew\\") = 3 -- The answer is \\"wke\\", with the length of 3. solve(\\"aab\\") = 2 -- The answer is \\"ab\\", with the length of 2. ``` Input will always be a string containing only lowercase and uppercase letters. The string will not be empty and will be no longer than 10,000 characters. Good luck!","solution":"def solve(s): Returns the length of the longest substring that contains only unique characters. char_index = {} longest = start = 0 for i, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"You are given the duty of managing playlists for a popular music streaming service. Each playlist is created by organizing songs end-to-end. Sometimes, users request shuffling of the playlists to keep their listening experience fresh. A shuffle should retain the original set of songs but can change the order in which they appear in the playlist. However, there is a special constraint: a song cannot remain in the same position as it was initially. For a given playlist, you are required to compute the number of distinct ways to shuffle it such that no song remains in its original position. This problem has a well-known combinatorial solution and can be efficiently computed using the concept of derangements. -----Input----- - The first line contains a single integer T denoting the number of test cases. - Each of the next T lines contains a single integer N denoting the number of songs in the playlist. -----Output----- For each test case, print a single line containing the number of distinct derangements of the playlist modulo 10^9 + 7. -----Constraints----- - 1 le T le 1000 - 1 le N le 10^6 -----Example Input----- 3 2 3 4 -----Example Output----- 1 2 9 -----Explanation----- - For N = 2, there is only one valid derangement: swapping the two songs. - For N = 3, there are two valid derangements: [2, 3, 1] and [3, 1, 2]. - For N = 4, there are nine valid derangements: [2, 3, 4, 1], [2, 4, 1, 3], [3, 1, 4, 2], [3, 4, 1, 2], [4, 1, 2, 3], [4, 3, 1, 2], [4, 2, 3, 1], [3, 4, 2, 1], [3, 2, 4, 1].","solution":"MOD = 10**9 + 7 def compute_derangements(n): if n == 0: return 1 elif n == 1: return 0 elif n == 2: return 1 # Initialize the first two values derangements = [0] * (n + 1) derangements[0] = 1 derangements[1] = 0 derangements[2] = 1 for i in range(3, n + 1): derangements[i] = (i - 1) * (derangements[i - 1] + derangements[i - 2]) % MOD return derangements[n] def number_of_derangements(test_cases): results = [] max_n = max(test_cases) derangements_up_to_max_n = [compute_derangements(i) for i in range(max_n + 1)] for n in test_cases: results.append(derangements_up_to_max_n[n]) return results"},{"question":"# Instructions A company has an internal system where employees log their check-in and check-out times every day. Each log entry is in the format `[\'EmployeeID\', \'Check-in time\', \'Check-out time\']`, and all log entries are stored in a 2D array like so: ``` [ [\'E001\', \'09:00\', \'17:00\'], [\'E002\', \'08:30\', \'16:30\'], [\'E003\', \'10:00\', \'18:00\'], ... ] ``` The company wants to calculate the total number of hours each employee has worked in a given day. Write a function that takes this 2D array of log entries and returns a 2D array where each sub-array contains the `EmployeeID` and the total hours worked, sorted by `EmployeeID` in ascending order. The time duration between the check-in and check-out times should be calculated as whole hours and minutes. For simplicity, assume all times are within the same day and there are no overnight shifts. Example: ``` Input: [ [\'E001\', \'09:00\', \'17:00\'], [\'E002\', \'08:30\', \'16:30\'], [\'E003\', \'10:00\', \'18:00\'] ] Output: [ [\'E001\', \'08:00\'], [\'E002\', \'08:00\'], [\'E003\', \'08:00\'] ] ``` # Constraints: - The input array contains at least one entry. - All times are in 24-hour format `HH:MM`. - Each employee logs exactly one check-in and one check-out time per day.","solution":"def calculate_worked_hours(logs): Calculates the total number of hours worked by each employee given their check-in and check-out times. Parameters: logs (list): A 2D list containing log entries in the format [\'EmployeeID\', \'Check-in time\', \'Check-out time\'] Returns: list: A 2D list where each sub-array contains the EmployeeID and the total hours worked, sorted by EmployeeID in ascending order. worked_hours = [] for log in logs: employee_id, check_in, check_out = log check_in_hh, check_in_mm = map(int, check_in.split(\':\')) check_out_hh, check_out_mm = map(int, check_out.split(\':\')) total_hours = check_out_hh - check_in_hh total_minutes = check_out_mm - check_in_mm if total_minutes < 0: total_hours -= 1 total_minutes += 60 worked_hours.append([employee_id, f\\"{total_hours:02d}:{total_minutes:02d}\\"]) worked_hours.sort(key=lambda x: x[0]) return worked_hours"},{"question":"Define a function that takes a list of integers and an integer `k`, and returns a new list containing only the elements that appear exactly `k` times in the original list. Your function should maintain the order of the original elements. For example, given the list `[4, 3, 2, 3, 5, 4, 2, 2, 3, 7]` and `k = 2`, the new list should be `[4, 4]` because `4` is the only number that appears exactly 2 times. You may assume that the input list is always valid and that `k` is a non-negative integer. Examples ```python elements_k_times([4, 3, 2, 3, 5, 4, 2, 2, 3, 7], 2) # returns [4, 4] elements_k_times([1, 2, 2, 2, 3, 3, 4], 1) # returns [1, 4] elements_k_times([1, 2, 3, 4, 5], 0) # returns [] elements_k_times([1, 1, 1, 1, 1, 1], 5) # returns [] elements_k_times([10, 20, 20, 30, 30, 30, 40], 3) # returns [30, 30, 30] ``` ___ Remarks # Edge Cases - If no element appears exactly `k` times, return an empty list. - If `k = 0`, the result should always be an empty list, since no element can appear zero times.","solution":"def elements_k_times(nums, k): Returns a list of elements that appear exactly k times in the original list, maintaining order. Parameters: - nums (list): A list of integers. - k (int): An integer specifying the exact number of times an element must appear to be included in the result. Returns: - list: A list of integers appearing exactly k times in the original list. from collections import Counter # Count the frequency of each element in the list freq = Counter(nums) # Create a list that includes only elements which appear exactly k times in the original list result = [num for num in nums if freq[num] == k] return result"},{"question":"Ella loves organizing her bookshelf by color and size. She decided to arrange her books in such a way that all books of the same color are grouped together, and within each color group, the books are sorted by their size in ascending order. To simplify this process, she needs a program that will help her achieve this arrangement. Your task is to create a function that sorts the books based on the given criteria: first by their color, and second by their size within each color group. -----INPUT----- First line of input contains an integer N, denoting the number of test cases. Then N test cases follow. The first line of each test case contains an integer M, denoting the number of books. The next M lines each contain a string representing the color of the book followed by an integer representing the size of the book. -----OUTPUT----- For each test case, output the sorted list of books, where each book is represented by its color and size separated by a space, in the given ordering criteria. -----CONSTRAINTS----- - 1 <= N <= 10 - 1 <= M <= 100 - Colors are represented as lowercase strings without spaces with a maximum length of 20. - Size of each book is an integer ranging from 1 to 1000. -----Example----- Input: 2 3 red 5 blue 3 red 2 4 green 6 blue 2 green 4 blue 5 Output: blue 3 red 2 red 5 blue 2 blue 5 green 4 green 6","solution":"def organize_books(test_cases): Function to sort books first by their color and second by their size within each color group. Args: test_cases (List[List[Tuple[str, int]]]): A list containing the test cases. Each test case is a list of tuples where the first element is a string representing the color and the second element is an integer representing the size of the book. Returns: List[List[Tuple[str, int]]]: A list containing the sorted lists of books for each test case. results = [] for books in test_cases: # Sorting books first by color and then by size sorted_books = sorted(books, key=lambda x: (x[0], x[1])) results.append(sorted_books) return results def format_organized_books_output(organized_books): Function to format the output for the organized books. Args: organized_books (List[List[Tuple[str, int]]]): A list containing the organized books for each test case. Returns: str: A formatted string as per the example output. result_str_list = [] for case in organized_books: for book in case: result_str_list.append(f\\"{book[0]} {book[1]}\\") return \\"n\\".join(result_str_list) def process_input(input_str): Function to process the input string. Args: input_str (str): Input string containing test cases. Returns: List: Parsed list of test cases. input_lines = input_str.strip().split(\\"n\\") N = int(input_lines[0]) test_cases = [] index = 1 for _ in range(N): M = int(input_lines[index]) books = [] for j in range(1, M + 1): color_size = input_lines[index + j].split() color = color_size[0] size = int(color_size[1]) books.append((color, size)) test_cases.append(books) index += M + 1 return test_cases def main(input_str): test_cases = process_input(input_str) organized_books = organize_books(test_cases) result_str = format_organized_books_output(organized_books) return result_str"},{"question":"Given an input string that contains lowercase alphabetic characters and one or more special placeholders denoted by `?`, generate all possible strings by replacing each placeholder with a lowercase alphabetic character such that the resulting strings represent valid English words. You are provided with a helper function `isValidWord(word: str) -> bool` that takes a string and returns a boolean indicating whether the string is a valid English word (the implementation of this function is not required to be provided). For example, given the input `\\"a?ple\\"`, possible outputs might include `[\\"apple\\"]` if `isValidWord(\\"apple\\")` returns `True`. Another example, given the input `\\"b?g\\"`, possible outputs might include `[\\"bog\\", \\"bag\\", \\"bug\\"]` if these are all valid English words. If no valid words can be formed, the function should return an empty list `[]`. Implement the function `possibleValidWords(input_string: str) -> List[str]` that returns all valid words formed by replacing the `?` placeholders. Here is the function signature: ```python from typing import List def possibleValidWords(input_string: str) -> List[str]: # Your implementation here pass ```","solution":"from typing import List import string def isValidWord(word: str) -> bool: Placeholder for the actual implementation of the validation function. # The actual implementation will check if the word is a valid English word. # This mock implementation always returns True for simplicity. # In a real scenario, this function should query a dictionary or use a library to verify word validity. return word in {\\"apple\\", \\"bag\\", \\"bog\\", \\"bug\\"} def generate_possible_words(input_string: str, idx: int, current_string: str, results: List[str]): if idx == len(input_string): if isValidWord(current_string): results.append(current_string) return if input_string[idx] == \'?\': for char in string.ascii_lowercase: generate_possible_words(input_string, idx + 1, current_string + char, results) else: generate_possible_words(input_string, idx + 1, current_string + input_string[idx], results) def possibleValidWords(input_string: str) -> List[str]: results = [] generate_possible_words(input_string, 0, \\"\\", results) return results"},{"question":"In a coding competition, participants need to solve various challenges. One of the challenges requires writing a program to process a list of numbers and answer multiple queries efficiently. The participants are given an initially empty list, and they need to perform two types of operations: add a number to the list and find the maximum number in the current list. **Task:** You need to create a program that can handle the following types of queries: 1. Add a number X to the list. 2. Find the maximum number in the current list. **Input:** - The first line contains an integer Q, the number of queries. - The next Q lines contain the queries. Each query is in one of the following formats: - \\"1 X\\" - This means you need to add the number X to the list. - \\"2\\" - This means you need to return the maximum number from the current list. **Output:** - For each query of type \\"2\\", output the maximum number in the current list. **Constraints:** - 1 leq Q leq 100000 - For any query \\"1 X\\", -10^9 leq X leq 10^9 **Sample Input:** 5 1 3 1 5 2 1 10 2 **Sample Output:** 5 10 **Explanation:** - In the first query, we add the number 3 to the list. The list becomes [3]. - In the second query, we add the number 5 to the list. The list becomes [3, 5]. - In the third query, we need to find the maximum number in the list, which is 5. - In the fourth query, we add the number 10 to the list. The list becomes [3, 5, 10]. - In the fifth query, we find the maximum number in the list, which is 10.","solution":"class NumberList: def __init__(self): self.numbers = [] self.max_numbers = [] def add_number(self, x): self.numbers.append(x) if not self.max_numbers or x >= self.max_numbers[-1]: self.max_numbers.append(x) else: self.max_numbers.append(self.max_numbers[-1]) def get_max_number(self): if not self.max_numbers: return None # or an appropriate value/error if the list is empty return self.max_numbers[-1] def process_queries(queries): number_list = NumberList() results = [] for query in queries: if query[0] == \'1\': number_list.add_number(int(query[1])) elif query[0] == \'2\': results.append(number_list.get_max_number()) return results"},{"question":"Write a function that determine if a given string is a valid IPv4 address. An IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots (\\".\\"). Leading zeros are not allowed (e.g., \\"01.02.03.04\\" is an invalid address). Example: ``` solution(\\"192.168.1.1\\") = True solution(\\"255.255.255.255\\") = True solution(\\"256.256.256.256\\") = False solution(\\"192.168.1.01\\") = False solution(\\"192.168@1.1\\") = False solution(\\"192.168.1\\") = False ```","solution":"def is_valid_ipv4_address(ip): Determines if a given string is a valid IPv4 address. An IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots (.). Leading zeros are not allowed. Parameters: ip (str): The string to validate as an IPv4 address. Returns: bool: True if the string is a valid IPv4 address, False otherwise. parts = ip.split(\'.\') # Check that the address contains exactly four parts if len(parts) != 4: return False for part in parts: # Check that the part is not empty and contains only digits if not part.isdigit(): return False # Convert part to an integer and validate the range num = int(part) if num < 0 or num > 255: return False # Check for leading zeros if part != str(num): return False return True"},{"question":"Write a function evenDigitsOnly that checks if all digits of the given number are even. Examples: * for num = 248622 the output should be true * for num = 642386 the output should be false Input/Output: * [input] integer num: A positive integer (1 ≤ num ≤ 10^9) * [output] a boolean value: true if all digits of num are even, false otherwise.","solution":"def evenDigitsOnly(num): Checks if all digits of the given number are even. Parameters: num (int): A positive integer. Returns: bool: True if all digits are even, False otherwise. while num > 0: digit = num % 10 if digit % 2 != 0: return False num //= 10 return True"},{"question":"# Definition A **number** is called **_Harshad number_** if it is divisible by the sum of its digits. ___ # Task **_Given_** a number, determine if it is a Harshad number or not. ___ # Notes * The **_number_** passed to the function is **_positive_**. ___ # Input >> Output Examples ``` isHarshad(18) -->> return \\"Harshad\\" ``` **_Explanation_**: * The sum of digits of `18` is `1 + 8 = 9`, and `18` is divisible by `9`. ___ ``` isHarshad(19) -->> return \\"Not!!\\" ``` **_Explanation_**: * The sum of digits of `19` is `1 + 9 = 10`, and `19` is not divisible by `10`. ___ ``` isHarshad(21) -->> return \\"Harshad\\" ``` **_Explanation_**: * The sum of digits of `21` is `2 + 1 = 3`, and `21` is divisible by `3`. ___ ``` isHarshad(11) -->> return \\"Not!!\\" ``` **_Explanation_**: * The sum of digits of `11` is `1 + 1 = 2`, and `11` is not divisible by `2`. ___ ___ # [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers) # [Playing with Integers Series](https://www.codewars.com/collections/playing-with-integers) # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored) ___ ALL translations are welcomed Enjoy Learning !! # Zizou","solution":"def isHarshad(number): Determines if a number is a Harshad number. Parameters: number (int): The number to be checked. Returns: str: \\"Harshad\\" if the number is a Harshad number, \\"Not!!\\" otherwise. digit_sum = sum(int(digit) for digit in str(number)) if number % digit_sum == 0: return \\"Harshad\\" else: return \\"Not!!\\""},{"question":"You are tasked with developing a function that evaluates arithmetic expressions written in Reverse Polish Notation (RPN). Reverse Polish Notation is a mathematical notation in which operators follow their operands. This method eliminates the need for parentheses to define the order of operations. Write a function `evaluate_rpn_expression(expression: str) -> int` that takes a string containing a space-separated RPN expression and returns the result as an integer. # Input - A string `expression` consisting of integers and the operators `+`, `-`, `*`, and `/`. The numbers and operators are separated by spaces. - The input expression will always be valid and will not involve division by zero. # Output - Return the integer result of evaluating the RPN expression. # Example ```python # Example 1 expression = \\"2 1 + 3 *\\" evaluate_rpn_expression(expression) # Output: 9 # Example 2 expression = \\"4 13 5 / +\\" evaluate_rpn_expression(expression) # Output: 6 # Example 3 expression = \\"10 6 9 3 + -11 * / * 17 + 5 +\\" evaluate_rpn_expression(expression) # Output: 22 ``` # Notes - It is guaranteed that the given RPN expression is valid. - Use integer division that truncates toward zero for the division operator `/`.","solution":"def evaluate_rpn_expression(expression: str) -> int: Evaluates a Reverse Polish Notation (RPN) expression. Args: expression (str): String containing the RPN expression separated by spaces. Returns: int: The result of evaluating the RPN expression. stack = [] tokens = expression.split() for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == \'+\': result = a + b elif token == \'-\': result = a - b elif token == \'*\': result = a * b elif token == \'/\': result = int(a / b) # Use int() to truncate towards zero stack.append(result) else: stack.append(int(token)) return stack.pop()"},{"question":"Palindrome Checker Write a function `is_palindrome(s: str) -> bool` that checks whether a given string `s` is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring case, spaces, and punctuation). # Input - A single string `s`, which may contain letters, digits, spaces, and punctuation. # Output - Return `True` if `s` is a palindrome, and `False` otherwise. # Examples ```python is_palindrome(\\"A man, a plan, a canal, Panama!\\") # returns True is_palindrome(\\"racecar\\") # returns True is_palindrome(\\"hello\\") # returns False ``` # Constraints - The length of `s` will be at most 1000 characters. - The function should ignore case, spaces, and punctuation while checking for the palindrome. # Note You may find Python\'s `str` methods (like `str.lower()`, `str.isalnum()`) useful for cleaning up the input string before performing the palindrome check.","solution":"def is_palindrome(s: str) -> bool: Checks whether the given string is a palindrome. Palindromes read the same forward and backward, ignoring case, spaces, and punctuation. # Converting the string to lowercase and filtering out non-alphanumeric characters cleaned = \'\'.join(char.lower() for char in s if char.isalnum()) # Checking if the cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"You are given a string `s` and an integer `k`. The string `s` can be rearranged by moving its characters, and the resulting string must contain at least one substring of the same character with length equal to or more than `k`. If it\'s possible to rearrange `s` to satisfy this condition, return `True`; otherwise, return `False`. Example 1: Input: s = \\"aaabbcc\\", k = 3 Output: True Explanation: One possible rearrangement is \\"aaabbcc\\", where the substring \\"aaa\\" has length equal to 3. Example 2: Input: s = \\"abcd\\", k = 2 Output: False Explanation: It\'s not possible to rearrange \\"abcd\\" such that any character appears consecutively with length 2. Example 3: Input: s = \\"aaabbccc\\", k = 3 Output: True Explanation: One possible rearrangement is \\"aaabbbccc\\", where the substring \\"aaa\\" has length 3, and the substring \\"ccc\\" has length 3. Constraints: - 1 <= s.length <= 1000 - s consists of lowercase English letters. - 1 <= k <= s.length","solution":"def can_rearrange(s, k): Determines if the string `s` can be rearranged so that there is at least one substring of the same character with length `k` or more. Args: s (str): The input string consisting of lowercase English letters. k (int): The minimum length of the substring with the same character. Returns: bool: True if such a rearrangement is possible, otherwise False. if k == 1: return True from collections import Counter char_counts = Counter(s) for count in char_counts.values(): if count >= k: return True return False"},{"question":"# Challenge: Write a function that takes two integer arguments `a` and `b` and returns a list of all prime numbers between `a` and `b` (inclusive). The function should be optimized to handle the largest possible range within an acceptable time. Requirements: - The function should return a sorted list of prime numbers within the given range. - If there are no prime numbers within the range, return an empty list. - The function should handle both positive and negative integers as inputs. - The function should have a time complexity better than O(n^2), where n is the size of the range. - Do not use any libraries or built-in functions for prime checking. Constraints: -1000 <= a, b <= 1000 Examples: primes_in_range(10, 30) -> [11, 13, 17, 19, 23, 29] primes_in_range(25, 25) -> [] primes_in_range(-10, 10) -> [2, 3, 5, 7] primes_in_range(50, 20) -> [23, 29, 31, 37, 41, 43, 47] --- Evaluation: Your solution will be evaluated on: - Correctness: Produces the correct output for a variety of inputs. - Efficiency: Handles the maximum input range within an acceptable time. - Code quality: Clear, well-structured, and easy to understand code.","solution":"def primes_in_range(a, b): Returns a list of all prime numbers between a and b (inclusive). def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True if a > b: a, b = b, a result = [] for i in range(a, b + 1): if is_prime(i): result.append(i) return result"},{"question":"Maya has recently become interested in number theory and has decided to practice her skills by working on the product of divisors of numbers. Given an integer N, she wants to find out the product of all divisors of N. Your task is to write a program that calculates the product of all divisors of a given integer N for multiple test cases. Note: The product might be very large, so print the result modulo 10^9 + 7. -----Input----- - First line contains a single integer T, the number of test cases. - Each of the next T lines contains one integer N. -----Output----- For each test case, print the product of all divisors of N modulo 10^9 + 7 on a separate line. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^6 -----Sample Input----- 3 6 10 15 -----Sample Output----- 36 100 225 -----Explanation----- For test 1: The divisors of 6 are 1, 2, 3, 6. The product is 1 times 2 times 3 times 6 = 36. For test 2: The divisors of 10 are 1, 2, 5, 10. The product is 1 times 2 times 5 times 10 = 100. For test 3: The divisors of 15 are 1, 3, 5, 15. The product is 1 times 3 times 5 times 15 = 225.","solution":"MOD = 10**9 + 7 def product_of_divisors(N): import math if N == 1: return 1 divisors = [] for i in range(1, int(math.sqrt(N)) + 1): if N % i == 0: divisors.append(i) if i != N // i: divisors.append(N // i) product = 1 for divisor in divisors: product = (product * divisor) % MOD return product def solve(T, test_cases): results = [] for N in test_cases: results.append(product_of_divisors(N)) return results # Example usage: # T = 3 # test_cases = [6, 10, 15] # print(solve(T, test_cases))"},{"question":"Write a function that takes a list of integers and returns a new list containing the squares of the original integers. The new list should be sorted in ascending order. # Examples - Input: [4, 1, 3, 2] - Output: [1, 4, 9, 16] - Input: [-1, -2, 0, 2, 1] - Output: [0, 1, 1, 4, 4] - Input: [5, -3, 2, -4, 0] - Output: [0, 4, 9, 16, 25]","solution":"def sorted_squares(nums): Returns a new list containing the squares of the original integers sorted in ascending order. Args: nums (list of int): The list of integers. Returns: list of int: The sorted list of squared integers. squared_list = [num ** 2 for num in nums] squared_list.sort() return squared_list"},{"question":"Given a list of integers `nums` and an integer `target`, return the length of the shortest contiguous subarray where the sum is greater than or equal to `target`. If there is no such subarray, return 0 instead. For example: ```python Input: nums = [2, 3, 1, 2, 4, 3], target = 7 Output: 2 Explanation: The subarray [4,3] has the minimal length under the problem constraint. ``` ```python Input: nums = [1, 4, 4], target = 4 Output: 1 Explanation: The subarray [4] has the minimal length under the problem constraint. ``` ```python Input: nums = [1, 1, 1, 1, 1, 1, 1, 1], target = 11 Output: 0 Explanation: There is no subarray with sum >= 11. ``` Your task is to implement a function: ```python def min_subarray_len(target: int, nums: List[int]) -> int: # Your code here ``` # Constraints: - 1 <= target <= 10^9 - 1 <= nums.length <= 10^5 - 1 <= nums[i] <= 10^4","solution":"from typing import List def min_subarray_len(target: int, nums: List[int]) -> int: Returns the length of the shortest contiguous subarray where the sum is greater than or equal to `target`. If there is no such subarray, returns 0. n = len(nums) min_length = float(\'inf\') current_sum = 0 left = 0 for right in range(n): current_sum += nums[right] while current_sum >= target: min_length = min(min_length, right - left + 1) current_sum -= nums[left] left += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"We need a function that will generate all possible combinations of a given integer array, considering some constraints on the sum of elements in each combination and the maximum length of each combination. Create a function called `generate_combinations()`, which receives three arguments. ```generate_combinations((arr), (max_len), (sum_target))``` ``` (1) - Array of integers to generate combinations from (2) - Maximum length of each combination (3) - Target sum of elements in each combination (the sum each combination must match) ``` `generate_combinations()` should output a list of lists, where each inner list is a valid combination that matches the constraints provided. Let\'s see some cases: ```python generate_combinations([1, 2, 3, 4, 5], 3, 6) ``` Should return: ```python [[1, 2, 3], [1, 5], [2, 4]] ``` Note: 1. The input array might have duplicate elements, and combinations must consider possible duplicates. 2. All combinations should be unique and the order of elements in each combination should be non-decreasing (ascending). For example: ```python generate_combinations([1, 1, 2, 2, 3], 2, 3) ``` Should return: ```python [[1, 2], [3]] ``` Happy coding!","solution":"from itertools import combinations def generate_combinations(arr, max_len, sum_target): Generate all unique combinations of integers from the list `arr`, with the length of each combination not exceeding `max_len` and the sum of elements in each combination exactly being `sum_target`. Parameters: arr (list): List of integers to generate combinations from. max_len (int): Maximum length of each combination. sum_target (int): The sum that each combination should match. Returns: list: Unique combinations meeting the constraints. result = set() arr.sort() for length in range(1, max_len + 1): for comb in combinations(arr, length): if sum(comb) == sum_target: result.add(comb) # Convert the set of tuple combinations into a sorted list of lists return sorted([list(comb) for comb in result])"},{"question":"You have a sequence of positive integers representing the heights of several skyscrapers in a city. A skyline is formed by the silhouette of the skyscrapers when viewed from a distance. The goal is to remove the minimum number of skyscrapers so that the remaining skyscrapers\' heights form a non-decreasing sequence when viewed from the left to the right. Write a program to determine this minimum number of skyscrapers that need to be removed. -----Input----- - The first line contains an integer T, the number of test cases. Each of the next T sections describes a test case as follows: - The first line of each test case contains an integer N, the number of skyscrapers. - The second line contains N space-separated positive integers representing the heights of the skyscrapers. -----Output----- - For each test case, output a single integer, the minimum number of skyscrapers that need to be removed to achieve a non-decreasing sequence. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ height of skyscraper ≤ 10^5 -----Example----- Input: 2 5 3 2 5 1 7 4 4 3 2 1 Output: 2 3 -----Explanation----- Example case 1. In this case, we can remove the skyscrapers with heights 2 and 1, leaving us with a non-decreasing sequence [3, 5, 7]. Example case 2. In this case, we can remove the skyscrapers with heights 4, 3, and 2, leaving us with the non-decreasing sequence [1].","solution":"def min_removals_to_non_decreasing(skyline): def longest_non_decreasing_subsequence(arr): import bisect lis = [] for height in arr: pos = bisect.bisect_right(lis, height) if pos >= len(lis): lis.append(height) else: lis[pos] = height return len(lis) N = len(skyline) len_lnds = longest_non_decreasing_subsequence(skyline) return N - len_lnds def process_test_cases(test_cases): results = [] for skyline in test_cases: results.append(min_removals_to_non_decreasing(skyline)) return results"},{"question":"A company wants to optimize its customer service operations. It has multiple service stations, and customers arrive at different times. Each service station can only handle one customer at a time, and each customer requires a certain amount of service time before they leave. Given the following data for a single day: - An array `arrival_times` where each element represents the time (in minutes from the start of the day) a customer arrives. - An array `service_times` where each element represents the time (in minutes) required to serve the corresponding customer in `arrival_times`. Develop a function `min_idle_time(arrival_times, service_times)`, that returns the minimum total idle time for all service stations combined. Assume that if a service station is idle, it can start serving a new customer as soon as they arrive. Here are the constraints: 1. `arrival_times` and `service_times` have the same length. 2. Each customer must be served in the order they arrive (no reordering). 3. The number of service stations is unlimited. # Example: ``` arrival_times = [0, 2, 4, 5] service_times = [3, 3, 2, 1] min_idle_time(arrival_times, service_times) ``` **Explanation**: - At time 0, customer 1 arrives and uses a station till time 3. - At time 2, customer 2 arrives and uses another station till time 5. - At time 4, customer 3 arrives and uses another station till time 6. - At time 5, customer 4 arrives and uses another station till time 6. In this scenario, all service stations are either busy serving customers or immediately receive a new customer as the previous one finishes, which means the idle time is 0. **Output**: ``` 0 ``` Another Example: ``` arrival_times = [0, 4, 8] service_times = [3, 3, 3] min_idle_time(arrival_times, service_times) ``` **Explanation**: - At time 0, customer 1 arrives and uses a station till time 3. - At time 4, customer 2 arrives and uses a station till time 7. (Station 1 is idle from time 3 to 4) - At time 8, customer 3 arrives and uses another station till time 11. (Station 2 is idle from time 7 to 8) The total idle time is 1 (from time 3 to 4) + 1 (from time 7 to 8) = 2. **Output**: ``` 2 ``` # Constraints: * Number of customers: 1 <= len(arrival_times) <= 10^5 * 0 <= arrival_times[i] <= 10^9 * 1 <= service_times[i] <= 10^9","solution":"def min_idle_time(arrival_times, service_times): if not arrival_times or not service_times: return 0 last_finish_time = arrival_times[0] + service_times[0] total_idle_time = 0 for i in range(1, len(arrival_times)): current_arrival = arrival_times[i] current_service_time = service_times[i] if current_arrival >= last_finish_time: total_idle_time += current_arrival - last_finish_time last_finish_time = max(last_finish_time, current_arrival) + current_service_time return total_idle_time"},{"question":"Create a function that takes a list of strings and returns a new list with all the strings that start with a vowel moved to the end of the list. The order of the strings (both the ones that start with a vowel and the ones that do not) should be preserved. Examples: ```python move_vowel_strings([\\"apple\\", \\"banana\\", \\"orange\\", \\"kiwi\\", \\"grape\\"]) == [\\"banana\\", \\"kiwi\\", \\"grape\\", \\"apple\\", \\"orange\\"] move_vowel_strings([\\"elephant\\", \\"dog\\", \\"iguana\\", \\"octopus\\", \\"duck\\"]) == [\\"dog\\", \\"duck\\", \\"elephant\\", \\"iguana\\", \\"octopus\\"] move_vowel_strings([\\"umbrella\\", \\"antelope\\", \\"eagle\\"]) == [\\"umbrella\\", \\"antelope\\", \\"eagle\\"] move_vowel_strings([\\"cat\\", \\"dog\\", \\"mouse\\"]) == [\\"cat\\", \\"dog\\", \\"mouse\\"] ```","solution":"def move_vowel_strings(lst): Takes a list of strings and returns a new list with all the strings that start with a vowel moved to the end of the list. The original order is preserved. Parameters: lst (list): List of strings Returns: list: New list with vowel-starting strings moved to the end vowels = \'aeiouAEIOU\' non_vowel_strings = [s for s in lst if s[0] not in vowels] vowel_strings = [s for s in lst if s[0] in vowels] return non_vowel_strings + vowel_strings"},{"question":"Implement a function to calculate the product of all prime numbers (excluding itself) that exactly divide a given number `n`. For example, given the number `n = 30`, its prime divisors are 2, 3, and 5. The product of these primes (excluding itself) is `2 * 3 * 5 = 30`. For `n = 60`, its prime divisors are 2, 3, and 5. The product of these primes (excluding itself) is `2 * 3 * 5 = 30`. Define a function `calculate_prime_product` that takes an integer `n` and returns the product of its prime divisors. Function signature: ```python def calculate_prime_product(n: int) -> int: ``` **Examples:** - `calculate_prime_product(30)` should return `30` - `calculate_prime_product(60)` should return `30` - `calculate_prime_product(97)` should return `1` (since 97 is a prime number, it has no prime divisors apart from itself) **Constraints:** - The function should handle inputs up to 100,000.","solution":"def calculate_prime_product(n: int) -> int: Calculate the product of all prime numbers (excluding itself) that exactly divide a given number `n`. def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True prime_factors = set() original_n = n # Check for smallest prime factors for i in range(2, n + 1): if n % i == 0 and is_prime(i): prime_factors.add(i) while n % i == 0: n //= i if n == 1: break # Calculate the product of prime factors if not prime_factors or original_n in prime_factors: return 1 product = 1 for prime in prime_factors: product *= prime return product"},{"question":"Balance the parentheses! Given a string (inputString) containing only the characters \'(\' and \')\', write a function to determine the minimum number of parentheses that must be added to make the string valid. A string is valid if every open parenthesis \'(\' has a corresponding close parenthesis \')\'. Your function should return the minimum number of parentheses needed to make the string valid. # Example Input \\"(())\\" Output 0 Input \\"(()\\" Output 1 Explanation In the first example, the string already has balanced parentheses, so no additional parentheses are needed. In the second example, there is one unmatched open parenthesis \'(\' that needs a corresponding closing parenthesis \')\' to become valid. # Constraints - The length of inputString will not exceed 10,000 characters. - inputString will only contain the characters \'(\' and \')\'. Your function should be efficient and work within the given constraints.","solution":"def min_add_to_make_valid(inputString): Determines the minimum number of parentheses that must be added to make the string valid. open_count = 0 close_count = 0 for char in inputString: if char == \'(\': open_count += 1 elif char == \')\': if open_count > 0: open_count -= 1 else: close_count += 1 return open_count + close_count"},{"question":"Given an array of integers, write a function that finds and returns a subarray (contiguous elements) which has the maximum possible sum. If there are multiple such subarrays, return any one of them. -----Input:----- - The first line contains an integer T, denoting the number of testcases. - The first line of each testcase contains an integer N, denoting the length of the array. - The second line of each testcase contains N space-separated integers, representing values of the array elements. -----Output:----- - For each testcase, output the start and end indices (0-based) of the subarray with the maximum sum and the sum itself. If there are multiple subarrays with the maximum sum, output any one of them. -----Constraints:----- - 1 leq T leq 10 - 1 leq N leq 10^5 - -10^4 leq text{array elements} leq 10^4 -----Subtasks:----- - Subtask 1 [20 points]: 1 leq N leq 100 - Subtask 2 [30 points]: 1 leq N leq 10^3 - Subtask 3 [50 points]: Original constraints -----Sample Input:----- 2 8 -2 1 -3 4 -1 2 1 -5 4 4 1 2 3 4 -----Sample Output:----- 3 6 6 0 3 10 -----Explanation:----- - In the first testcase, the subarray [4, -1, 2, 1] has the maximum sum of 6. The start index is 3 and the end index is 6. - In the second testcase, the whole array has the maximum sum of 10. The start index is 0 and the end index is 3.","solution":"def max_subarray_with_indices(nums): Finds the subarray with the maximum sum in the list of integers. Returns a tuple containing the starting index, ending index, and the sum of the subarray. max_sum = -float(\'inf\') # Initialize to negative infinity current_sum = 0 start = end = 0 temp_start = 0 for i, num in enumerate(nums): if current_sum <= 0: current_sum = num temp_start = i else: current_sum += num if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return start, end, max_sum def find_max_sum_subarrays(testcases): results = [] for array in testcases: start, end, max_sum = max_subarray_with_indices(array) results.append((start, end, max_sum)) return results"},{"question":"__Balanced Word Counter__ Your task is to determine if a given word is \\"balanced\\". A word is considered balanced if the sum of the alphabetical positions of the first half of the word is equal to the sum of the alphabetical positions of the second half. The word will always contain an even number of characters. Here are the alphabetical positions for each letter: ``` a = 1, b = 2, c = 3, ..., z = 26 ``` Your function will receive an input string (`word`) and return a boolean: `True` if the word is balanced and `False` otherwise. # Example: ``` Input: \\"abcz\\" (1+2 == 3+26) Output: False ``` ``` Input: \\"azby\\" (1+26 == 2+25) Output: True ``` # Function Signature: ```python def is_balanced_word(word: str) -> bool: pass ```","solution":"def is_balanced_word(word: str) -> bool: Determines if the given word is balanced. A word is balanced if the sum of the alphabetical positions of the first half of the word is equal to the sum of the alphabetical positions of the second half. :param word: A string containing an even number of characters :return: True if the word is balanced, False otherwise n = len(word) first_half = word[:n//2] second_half = word[n//2:] # Computing the sum of alphabetical positions for each half first_half_sum = sum(ord(c) - ord(\'a\') + 1 for c in first_half) second_half_sum = sum(ord(c) - ord(\'a\') + 1 for c in second_half) return first_half_sum == second_half_sum"},{"question":"You are given a long sentence that consists of words separated by spaces. You want to reverse the order of characters in each word within the sentence while maintaining the original word order. Write a program to transform the given sentence in such a way that each word\'s characters are reversed but the overall sequence of words is maintained. For example, if the input sentence is \\"Hello World\\", the output should be \\"olleH dlroW\\". -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. Then there are t independent sets of input data. Each of the following t lines consists of a single sentence s of length up to 10^5, containing only lowercase and uppercase English letters and spaces. It is guaranteed that the input does not contain leading or trailing spaces, and words in the sentence are separated by a single space. -----Output----- Print exactly t lines. In the i-th line print the transformed sentence for the i-th input sentence, with each word\'s characters reversed. -----Example----- Input 3 Hello World Coding is fun OpenAI GPT Output olleH dlroW gnidoC si nuf IAnepO TPG","solution":"def reverse_words_in_sentence(sentence): Given a sentence, reverse the characters in each word while maintaining the order of words. :param sentence: str, an input sentence :return: str, the transformed sentence with each word\'s characters reversed return \' \'.join(word[::-1] for word in sentence.split()) def process_test_cases(test_cases): Given multiple test cases, process each to reverse words in the sentence. :param test_cases: list of str, an input list of sentences :return: list of str, the list of transformed sentences return [reverse_words_in_sentence(sentence) for sentence in test_cases]"},{"question":"Task: You need to implement a function `swap_case_pattern` that generates a specific textual pattern by alternating the case of each letter in a given string, then repeats this pattern vertically for a specified number of rows. # Parameters: swap_case_pattern( text , rows ); ^ ^ | | String with text Number of rows to generate the to repeat the pattern from generated pattern vertically # Rules/Note: * The pattern should alternate the case of each letter in the string, starting with uppercase. * If `rows < 1` then it should return an empty string. * If `text` is empty, the function should also return an empty string. * Range of Parameters (for the sake of CW Compiler) : + `rows ∈ [0, 100]` + `len(text) ∈ [0, 100]` * The function should work when extra arguments are passed, by ignoring the extra arguments. # Examples: * swap_case_pattern(\\"hello\\", 3): HeLlO HeLlO HeLlO * swap_case_pattern(\\"WOrLD\\", 2): WoRlD WoRlD * swap_case_pattern(\\"\\", 5): * swap_case_pattern(\\"C0d1Ng\\", 4): C0D1nG C0D1nG C0D1nG C0D1nG","solution":"def swap_case_pattern(text, rows, *args): if rows < 1 or not text: return \'\' swap_case_text = \'\'.join( char.upper() if i % 2 == 0 else char.lower() for i, char in enumerate(text) ) pattern = \'n\'.join([swap_case_text] * rows) return pattern"},{"question":"Alex is developing his own tiny database management system. For one of its features, he needs to support range sum queries efficiently. Given an array of numbers, Alex wants to perform the following two operations: 1. Update the value at a specific index. 2. Calculate the sum of elements within a given range (inclusive of both ends). Help Alex implement this feature by designing a program that allows efficient range sum queries and point updates on an array. -----Input:----- - The first line contains three integers N, Q1, and Q2, where N is the number of elements in the array, Q1 is the number of update queries, and Q2 is the number of range sum queries. - The second line contains N integers, the initial values of the array. - The next Q1 lines each contain two integers i and x, indicating that the element at index i (0-based) should be updated to x. - The final Q2 lines each contain two integers l and r, indicating that a range sum query needs to be performed from index l to index r (inclusive). -----Output:----- For each range sum query, output the sum of the elements in the specified range. -----Constraints----- - 1 leq N leq 1000 - 1 leq Q1, Q2 leq 1000 - 1 leq l leq r leq N-1 - -10^9 leq text{array elements}, x leq 10^9 -----Sample Input:----- 5 2 2 1 2 3 4 5 1 10 3 -2 0 2 1 4 -----Sample Output:----- 14 26 -----Explanation:----- Example: - Initial array: [1, 2, 3, 4, 5] - After the first update query (1, 10): [1, 10, 3, 4, 5] - After the second update query (3, -2): [1, 10, 3, -2, 5] - Range sum query (0, 2): 1 + 10 + 3 = 14 - Range sum query (1, 4): 10 + 3 - 2 + 5 = 16","solution":"class TinyDBMS: def __init__(self, array): self.array = array def update(self, i, x): self.array[i] = x def range_sum(self, l, r): return sum(self.array[l:r+1]) # Function to be called for the operations def perform_operations(N, Q1, Q2, initial_array, updates, range_queries): dbms = TinyDBMS(initial_array) results = [] for i, x in updates: dbms.update(i, x) for l, r in range_queries: results.append(dbms.range_sum(l, r)) return results"},{"question":"Given a square matrix, rotate the matrix 90 degrees clockwise in place. You are given an `n x n` 2D matrix representing an image, rotate the image by 90 degrees (clockwise). You have to rotate the matrix in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. For example: ``` rotate([ [1,2,3], [4,5,6], [7,8,9] ]) ``` The function should modify the input matrix to become: ``` [ [7,4,1], [8,5,2], [9,6,3] ] ``` Another example: ``` rotate([ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ]) ``` The function should modify the input matrix to become: ``` [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ] ```","solution":"def rotate(matrix): Rotates the input n x n 2D matrix 90 degrees clockwise in place. n = len(matrix) # Step 1: Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Tom is working in a warehouse and needs to manage the placement of boxes on shelves. Each shelf in the warehouse has a certain maximum weight capacity, and Tom has several boxes, each with a specific weight. Tom wants to place the boxes on the shelves such that no shelf exceeds its weight capacity. Write a function to help Tom determine if it\'s possible to place all boxes on the shelves without any shelf exceeding its weight capacity. -----Input----- - The first line contains two integers M and N. M is the number of shelves and N is the number of boxes. - The second line contains M space-separated integers C_1, C_2, ..., C_M representing the weight capacities of the shelves. - The third line contains N space-separated integers W_1, W_2, ..., W_N representing the weights of the boxes. -----Output----- If it is possible to place all boxes on the shelves without exceeding any shelf\'s weight capacity, output \\"Possible\\". Otherwise, output \\"Impossible\\". -----Constraints----- - 1 le M, N le 1000 - 1 le C_i, W_i le 10^6 -----Example----- -----Sample Input:----- 3 5 10 15 20 5 7 8 9 10 -----Sample Output:----- Possible -----Explanation----- - Tom can place the boxes of weights 5 and 9 on the first shelf, the box of weight 7 on the second shelf, and the boxes of weights 8 and 10 on the third shelf. Each shelf does not exceed its maximum weight capacity. -----Sample Input 2:----- 2 4 12 10 8 6 4 5 -----Sample Output 2:----- Impossible -----Explanation 2:----- - There is no way to place the boxes on the shelves without exceeding the weight capacities of the shelves.","solution":"def can_place_boxes(M, N, capacities, weights): Determines if it is possible to place all boxes on the shelves without exceeding weight capacity. :param M: int, number of shelves :param N: int, number of boxes :param capacities: list of int, weight capacities of the shelves :param weights: list of int, weights of the boxes :return: str, \\"Possible\\" if all boxes can be placed without exceeding capacities, \\"Impossible\\" otherwise. capacities.sort(reverse=True) weights.sort(reverse=True) for weight in weights: placed = False for i in range(M): if capacities[i] >= weight: capacities[i] -= weight placed = True break if not placed: return \\"Impossible\\" return \\"Possible\\""},{"question":"We are given an array of words, and we need to identify which words can be typed using letters of only one row of an American QWERTY keyboard. The keyboard rows are: ``` First row: \\"qwertyuiop\\" Second row: \\"asdfghjkl\\" Third row: \\"zxcvbnm\\" ``` Write a function `findWords` that receives an array of words and returns a list of words that can be typed using letters from only one row of the keyboard. The function should be case insensitive, and the output must maintain the original case of the input words. **Input:** - An array of words (strings). **Output:** - A list of words from the input that can be typed using letters from only one row. Example: ```python input_words = [\\"Hello\\", \\"Alaska\\", \\"Dad\\", \\"Peace\\"] output_words = findWords(input_words) print(output_words) # Output: [\\"Alaska\\", \\"Dad\\"] ``` Notes: - The word \\"Hello\\" cannot be typed using letters from a single row. - The word \\"Peace\\" cannot be typed using letters from a single row. - The words \\"Alaska\\" and \\"Dad\\" can be typed using letters from a single row.","solution":"def findWords(words): Returns words that can be typed using letters from only one row of an American QWERTY keyboard. first_row = set(\\"qwertyuiop\\") second_row = set(\\"asdfghjkl\\") third_row = set(\\"zxcvbnm\\") def can_be_typed_with_one_row(word): lower_word = set(word.lower()) return lower_word.issubset(first_row) or lower_word.issubset(second_row) or lower_word.issubset(third_row) return [word for word in words if can_be_typed_with_one_row(word)]"},{"question":"Your friend Sam has a list of prices for items he sells online. He wants to create a new list that contains only the unique prices from the original one. For example, consider these inputs: ``` \\"10 20 20 30 40 50 50 50\\" \\"5 5 10 20 20 20 30\\" ``` They should output: ``` \\"10 20 30 40 50\\" \\"5 10 20 30\\" ``` Each input will always have prices sorted in ascending order, and there will be no price lower than 1. The process should efficiently handle large lists with potentially thousands of prices. ***Final Note:*** This task is designed to test your ability with collections, loops, and ensuring performance considerations for large inputs.","solution":"def unique_prices(price_str): Given a space-separated string of prices, return a space-separated string of unique prices in ascending order. :param price_str: A string containing space-separated integers representing prices. :return: A string containing space-separated integers representing unique prices. prices = price_str.split() unique_prices = sorted(set(prices), key=int) return \' \'.join(unique_prices)"},{"question":"Design a class FileSystem that supports the following two operations: 1. `createPath(String path, int value)`: - Creates a new path and associates a value to it if the path does not exist already. - A valid path follows these rules: * The path consists only of lowercase alphabets, forward slashes `/`, and it does not end with a \\"/\\". * The given path is always absolute, i.e., it begins with a single forward slash `/`. * The path will be created only if its parent path exists. 2. `get(String path)`: - Returns the value associated with a given path. - Returns -1 if the path does not exist. # Example: ```python Input: [\\"FileSystem\\", \\"createPath\\", \\"createPath\\", \\"get\\", \\"createPath\\", \\"get\\"] [[], [\\"/a\\", 1], [\\"/a/b\\", 2], [\\"/a/b\\"], [\\"/a/b/c\\", 3], [\\"/a/b/c\\"]] Output: [null, true, true, 2, false, -1] Explanation: FileSystem fs = new FileSystem(); fs.createPath(\\"/a\\", 1); // returns true as it successfully creates a new path \\"/a\\" with value 1 fs.createPath(\\"/a/b\\", 2); // returns true as it successfully creates \\"/a/b\\" with value 2 fs.get(\\"/a/b\\"); // returns 2 fs.createPath(\\"/a/b/c\\", 3); // returns false as \\"/a/b/c\\" cannot be created because \\"/a/b\\" does not exist in the path fs.get(\\"/a/b/c\\"); // returns -1 as \\"/a/b/c\\" does not exist ``` # Constraints: - The number of calls to `createPath` and `get` is at most 3000. - You can assume that all paths are valid and are not empty. - All paths have a length of at most 100 and contain only lowercase English letters and `/\'`s. - `value` in `createPath` is an integer between 0 and 10^9 inclusive.","solution":"class FileSystem: def __init__(self): self.paths = {\\"/\\": None} def createPath(self, path: str, value: int) -> bool: if path in self.paths: return False parent_path = \\"/\\".join(path.split(\\"/\\")[:-1]) if parent_path == \\"\\": parent_path = \\"/\\" if parent_path not in self.paths: return False self.paths[path] = value return True def get(self, path: str) -> int: return self.paths.get(path, -1)"},{"question":"A robot is located at the top-left corner of an `m x n` grid (marked \'Start\' in the grid below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the grid below). How many possible unique paths are there? Example 1: Input: m = 3, n = 2 Output: 3 Explanation: From the top-left corner, there are a total of 3 unique paths to the bottom-right corner: 1. Right -> Right -> Down 2. Right -> Down -> Right 3. Down -> Right -> Right Example 2: Input: m = 7, n = 3 Output: 28 Note: 1. `1 <= m, n <= 100` 2. The answer is guaranteed to be within the range of a 32-bit signed integer.","solution":"def unique_paths(m, n): Returns the number of unique paths in an m x n grid. # Initialize a 2D array with dimensions m x n dp = [[1] * n for _ in range(m)] # Populate the dp array by summing paths from the top and left cells for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Your friend\'s birthday is coming up and you want to surprise them with a birthday countdown timer. Create a function that calculates the number of days left until their birthday, given the current date and their upcoming birthday. If their birthday has already passed for this year, calculate the days remaining until their birthday next year. # Guidelines 1. The function should take two arguments: the current date and the friend\'s birthday, both in the format \\"YYYY-MM-DD\\". 2. The function should return an integer representing the number of days left until the next occurrence of their birthday. 3. Assume the inputs are always valid dates. 4. Use the Python `datetime` module to handle date calculations. # Example: ```python from datetime import datetime def days_until_birthday(current_date: str, birthday: str) -> int: current = datetime.strptime(current_date, \\"%Y-%m-%d\\") bday_this_year = datetime.strptime(f\\"{current.year}-{birthday.split(\'-\')[1]}-{birthday.split(\'-\')[2]}\\", \\"%Y-%m-%d\\") if bday_this_year < current: bday_next_year = datetime.strptime(f\\"{current.year + 1}-{birthday.split(\'-\')[1]}-{birthday.split(\'-\')[2]}\\", \\"%Y-%m-%d\\") return (bday_next_year - current).days else: return (bday_this_year - current).days # Testing the function print(days_until_birthday(\\"2023-08-15\\", \\"2023-08-20\\")) # Output: 5 print(days_until_birthday(\\"2023-09-01\\", \\"2023-05-10\\")) # Output: 252 (next year) ``` # Explanation: - The function `days_until_birthday` calculates the number of days left till the next birthday. - It first converts the input strings to `datetime` objects. - Then, it checks if the birthday has not yet occurred this year. - If the birthday has already passed this year, it calculates the days left until the birthday next year. Otherwise, it calculates the days left until the birthday this year.","solution":"from datetime import datetime def days_until_birthday(current_date: str, birthday: str) -> int: current = datetime.strptime(current_date, \\"%Y-%m-%d\\") bday_this_year = datetime.strptime(f\\"{current.year}-{birthday.split(\'-\')[1]}-{birthday.split(\'-\')[2]}\\", \\"%Y-%m-%d\\") if bday_this_year < current: bday_next_year = datetime.strptime(f\\"{current.year + 1}-{birthday.split(\'-\')[1]}-{birthday.split(\'-\')[2]}\\", \\"%Y-%m-%d\\") return (bday_next_year - current).days else: return (bday_this_year - current).days"},{"question":"Given a list of integers, write a function `find_peak_elements(nums)` to return all the *peak elements*. A peak element is an element that is greater than its neighbors. For example, in the array `nums = [1, 2, 3, 1, 5, 6, 4]`, the peak elements are `[3, 6]` because `3` is greater than `2` and `1`, and `6` is greater than `5` and `4`. The array may contain multiple peaks. **Notes:** - You may assume `nums[-1]` and `nums[n]` are considered to be `-∞` (negative infinity). - The array may have multiple peak elements; find and return all of them. - The function should return a list of peak elements in the order they occur in the array. **Example:** ```python find_peak_elements([1, 2, 3, 1, 5, 6, 4]) # Should return [3, 6] find_peak_elements([1, 2, 1, 3, 5, 6, 4]) # Should return [2, 6] find_peak_elements([1, 2, 3, 4, 5]) # Should return [5] ``` You may assume the elements in the list are unique and the list has at least one element.","solution":"def find_peak_elements(nums): Returns a list of all peak elements. A peak element is an element that is greater than its neighbors. n = len(nums) peaks = [] for i in range(n): if (i == 0 or nums[i] > nums[i - 1]) and (i == n - 1 or nums[i] > nums[i + 1]): peaks.append(nums[i]) return peaks"},{"question":"Given an array of integers, write a function to find the contiguous subarray within the array that has the largest sum. Return the sum of the contiguous subarray. You can assume the array contains at least one integer. Examples ``` [34, -50, 42, 14, -5, 86] should return 137 (The subarray [42, 14, -5, 86] has the largest sum) [-5, -1, -8, -9] should return -1 (The subarray [-1] has the largest sum) [8, -1, 3, 4] should return 14 (The subarray [8, -1, 3, 4] has the largest sum) ``` Note You can use the Kadane\'s Algorithm which provides an efficient solution to this problem with a time complexity of O(n).","solution":"def max_subarray_sum(nums): Returns the sum of the contiguous subarray with the largest sum. :param nums: List[int] - list of integers (contains at least one integer) :return: int - sum of the contiguous subarray with the largest sum max_ending_here = max_so_far = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Design and implement a class `IntervalTree` that supports two essential operations: 1. `add(interval: Tuple[int, int])` - Adds an interval [start, end) to the collection of intervals. Intervals may overlap. 2. `query(point: int) -> List[Tuple[int, int]]` - Returns a list of all intervals in the collection that include the given point. Intervals should be returned in the order they were added. Examples: ```python # Initialize the interval tree interval_tree = IntervalTree() # Add intervals interval_tree.add((1, 3)) interval_tree.add((2, 5)) interval_tree.add((8, 10)) # Query intervals including point 2 interval_tree.query(2) # returns [(1, 3), (2, 5)] # Query intervals including point 8 interval_tree.query(8) # returns [(8, 10)] # Query intervals including point 5 interval_tree.query(5) # returns [] ``` Note: - The interval `[start, end)` is inclusive at the start and exclusive at the end. - You may assume `start` and `end` are non-negative integers where `start <= end`. - The point for query operations is a non-negative integer. - The number of intervals added and the number of queries made will be at most 10,000 each.","solution":"from typing import List, Tuple class IntervalTree: def __init__(self): self.intervals = [] def add(self, interval: Tuple[int, int]) -> None: # Add the interval to the list of intervals self.intervals.append(interval) def query(self, point: int) -> List[Tuple[int, int]]: # Find all intervals that include the given point result = [] for interval in self.intervals: start, end = interval if start <= point < end: result.append(interval) return result"},{"question":"> Write a function `borough_of_nyc` that takes in a list of all the taxi rides happening in New York City and returns a dictionary mapping each borough to the number of taxi rides that either started or ended in that borough. Each ride is represented by a dictionary containing `pickup_borough` and `dropoff_borough` keys, where each value is one of the five boroughs: \\"Manhattan\\", \\"Brooklyn\\", \\"Queens\\", \\"Bronx\\", and \\"Staten Island\\". ```python def borough_of_nyc(taxi_rides): pass # Example usage: rides = [ {\\"pickup_borough\\": \\"Manhattan\\", \\"dropoff_borough\\": \\"Brooklyn\\"}, {\\"pickup_borough\\": \\"Brooklyn\\", \\"dropoff_borough\\": \\"Queens\\"}, {\\"pickup_borough\\": \\"Bronx\\", \\"dropoff_borough\\": \\"Manhattan\\"}, {\\"pickup_borough\\": \\"Queens\\", \\"dropoff_borough\\": \\"Manhattan\\"}, {\\"pickup_borough\\": \\"Manhattan\\", \\"dropoff_borough\\": \\"Staten Island\\"} ] print(borough_of_nyc(rides)) # Expected Output: # { # \\"Manhattan\\": 4, # \\"Brooklyn\\": 2, # \\"Queens\\": 2, # \\"Bronx\\": 1, # \\"Staten Island\\": 1 # } ``` # Additional Notes: - The borough names are guaranteed to be valid. - Each ride will have exactly one pickup and one dropoff borough. - If a borough has no rides associated with it, it should still be included in the output with a count of 0.","solution":"def borough_of_nyc(taxi_rides): Takes a list of taxi rides and returns a dictionary mapping each borough to the number of taxi rides that either started or ended in that borough. Each ride is represented as a dictionary containing \'pickup_borough\' and \'dropoff_borough\'. # Initialize the dictionary with boroughs and their corresponding counts set to 0 borough_counts = { \\"Manhattan\\": 0, \\"Brooklyn\\": 0, \\"Queens\\": 0, \\"Bronx\\": 0, \\"Staten Island\\": 0 } # Loop through each ride and increment the count for the pickup and dropoff boroughs for ride in taxi_rides: borough_counts[ride[\\"pickup_borough\\"]] += 1 borough_counts[ride[\\"dropoff_borough\\"]] += 1 return borough_counts"},{"question":"Company XYZ is conducting a coding test for their potential recruits. Each candidate must solve a series of problems within a given time limit. One of the problems is about evaluating the performance based on scores. Given the total number of candidates and their respective scores, the company wants to determine how many candidates scored strictly above a certain threshold. Input - The first line of input contains an integer T, the number of test cases. - The first line of each test case contains two integers N (the number of candidates) and K (the score threshold). - The second line of each test case contains N space-separated integers, the scores of the candidates. Output - For each test case, output a single integer denoting the number of candidates who scored strictly above the threshold K. Constraints - 1 leq T leq 100 - 1 leq N leq 1000 - 0 leq K leq 100 - 0 leq text{score of each candidate} leq 100 Sample Input ``` 2 5 50 60 45 70 55 65 4 30 10 20 40 50 ``` Sample Output ``` 4 2 ``` Explanation In the first test case, the scores above the threshold 50 are: 60, 70, 55, and 65. Thus, the output is 4. In the second test case, the scores above the threshold 30 are: 40 and 50. Thus, the output is 2.","solution":"def count_candidates_above_threshold(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] scores = test_cases[i][1] count = sum(1 for score in scores if score > K) results.append(count) return results"},{"question":"The security system of a high-profile research facility is controlled by a numeric code comprising unique digits. The facility manager wants to quickly determine if a given numeric code can be formed using only the available set of digits without repetition. Your task is to write a program that checks if each provided numeric code uses only available digits and that each digit in the code appears only once. -----Input:----- - The first line contains T, the number of test cases. Then the test cases follow. - Each test case consists of a single line containing two values: D (a string of available digits) and C (the numeric code). -----Output:----- For each test case, output a single line containing \'YES\' if the numeric code can be formed using the available digits without repetition, otherwise output \'NO\'. -----Constraints----- - 1 leq T leq 10^5 - 1 leq length(D), length(C) leq 10 -----Sample Input:----- 3 123456 123 987654 123 123456 4567 -----Sample Output:----- YES NO NO -----Explanation:----- For test case 1: All digits of \'123\' are in the set \'123456\' and they appear only once, hence the output is \'YES\'. For test case 2: Although \'123\' only uses digits from \'987654\', they don\'t appear in the required sequence or quantity, hence the output is \'NO\'. For test case 3: The numeric code \'4567\' requires the digit \'7\' which is not in the available set \'123456\', hence the output is \'NO\'.","solution":"def check_codes(test_cases): results = [] for D, C in test_cases: if all(digit in D for digit in C) and len(set(C)) == len(C): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Implement a function `find_single_integer(arr)` that takes a list of integers `arr` where every element appears twice except for one element which appears exactly once. Return the element that appears only once. Example ```python find_single_integer([2, 2, 3, 4, 4]) # should return 3 find_single_integer([1, 1, 2, 2, 3, 3, 4]) # should return 4 find_single_integer([7]) # should return 7 ``` Constraints - You must achieve this in linear runtime, O(n). - Your algorithm should use only constant extra space, O(1). Hint Consider using bitwise XOR operation to find the unique element in the array.","solution":"def find_single_integer(arr): Returns the element that appears exactly once in the array. All other elements appear twice. result = 0 for num in arr: result ^= num return result"},{"question":"You are given an array of integers and a target sum. Your task is to determine the number of unique pairs of elements in the array whose sum equals the target sum. Two pairs are considered unique if they consist of different numbers, even if they sum to the same value. Each element in the array can only be used once in forming a pair. As the number of unique pairs can be large, return the result modulo 10^9 + 7. -----Input:----- - The first line contains two integers, N (the number of elements in the array) and T (the target sum). - The second line contains N space-separated integers representing the elements of the array. -----Output:----- - Output a single integer representing the number of unique pairs whose sum equals the target sum, modulo 10^9 + 7. -----Constraints:----- - 1 leq N leq 2000 - 1 leq Array elements leq 10^6 - 1 leq T leq 2 times 10^6 -----Sample Input:----- 5 6 1 5 3 3 2 -----Sample Output:----- 2 -----Explanation:----- - The unique pairs that sum to 6 are (1, 5) and (3, 3). - Hence, the answer for the sample input is 2.","solution":"def count_unique_pairs(arr, target_sum): Returns the number of unique pairs whose sum equals the target sum, modulo 10^9 + 7. MOD = 10**9 + 7 seen = set() pairs = set() for num in arr: complement = target_sum - num if complement in seen: # Add the sorted tuple to the pairs set to ensure uniqueness pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs) % MOD def number_of_unique_pairs(N, T, arr): return count_unique_pairs(arr, T) # If you\'d like to use this in a script with input taken as described in the question # Uncomment the following lines and run this script # if __name__ == \\"__main__\\": # import sys # input = sys.stdin.read # data = input().split() # N = int(data[0]) # T = int(data[1]) # arr = list(map(int, data[2:2+N])) # print(number_of_unique_pairs(N, T, arr))"},{"question":"Write a function `find_next_square()` that takes a non-negative integer `n` as an argument. If `n` is a perfect square, the function should return the next perfect square. Otherwise, it should return -1. A perfect square is an integer that is the square of an integer. For example: ```python >>> find_next_square(16) 25 >>> find_next_square(10) -1 >>> find_next_square(144) 169 ``` To elaborate: - `16` is a perfect square (4 * 4), and the next perfect square after 4 * 4 is 5 * 5 = 25. - `10` is not a perfect square. - `144` is a perfect square (12 * 12), and the next perfect square after 12 * 12 is 13 * 13 = 169. You can assume the input `n` will always be a non-negative integer.","solution":"import math def find_next_square(n): Returns the next perfect square if n is a perfect square, otherwise returns -1. root = math.isqrt(n) if root * root == n: return (root + 1) ** 2 else: return -1"},{"question":"Create a function `snake_case_converter` that takes a string `text` in camelCase and returns it as a snake_case string. The input string consists only of alphabetical characters (both uppercase and lowercase, but no numbers) and is guaranteed to follow camelCase rules (i.e., no leading capitals, and each capital letter marks a new word). **Examples:** ```python print(snake_case_converter(\\"thisIsCamelCase\\")) # Output: this_is_camel_case print(snake_case_converter(\\"helloWorld\\")) # Output: hello_world print(snake_case_converter(\\"convertMeToSnakeCase\\")) # Output: convert_me_to_snake_case ``` You don\'t need to handle invalid inputs as the input will always be a valid camelCase string.","solution":"def snake_case_converter(text): Converts a camelCase string into a snake_case string. Params: - text (str): The camelCase string to convert. Returns: - str: The corresponding snake_case string. snake_case_text = \\"\\" for char in text: if char.isupper(): snake_case_text += \\"_\\" + char.lower() else: snake_case_text += char return snake_case_text"},{"question":"You are given a programming task to implement a function that simulates the growth of a plant. Each day the plant grows a specified amount, but every nth day, it does not grow because it is \'resting\'. Write a function plant_growth(days, growth_per_day, rest_period) that computes the total growth of the plant after a given number of days. The function should take the following parameters: - days: an integer representing the total number of days. - growth_per_day: an integer representing the amount the plant grows each day it is not resting. - rest_period: an integer representing the interval at which the plant rests, i.e., every nth day. For example: plant_growth(10, 2, 3) should return 16: - Day 1: grows by 2 (total: 2) - Day 2: grows by 2 (total: 4) - Day 3: rest day (total: 4) - Day 4: grows by 2 (total: 6) - Day 5: grows by 2 (total: 8) - Day 6: rest day (total: 8) - Day 7: grows by 2 (total: 10) - Day 8: grows by 2 (total: 12) - Day 9: rest day (total: 12) - Day 10: grows by 2 (total: 14) Thus, the total growth is 16.","solution":"def plant_growth(days, growth_per_day, rest_period): Computes the total growth of the plant after a given number of days. Parameters: days (int): total number of days growth_per_day (int): amount the plant grows each day it is not resting rest_period (int): interval at which the plant rests, i.e., every nth day Returns: int: total growth of the plant after the given number of days total_growth = 0 for day in range(1, days + 1): if day % rest_period != 0: total_growth += growth_per_day return total_growth"},{"question":"You are given a list of dictionaries, each representing a student with attributes \'name\', \'age\', and \'score\'. Your task is to find out if all students have passed an exam. A student passes the exam if their \'score\' is greater than or equal to 50: ```python allStudentsPassed([{\'name\': \'Alice\', \'age\': 20, \'score\': 55}, {\'name\': \'Bob\', \'age\': 22, \'score\': 48}, {\'name\': \'Charlie\', \'age\': 23, \'score\': 65}]) ``` Write a function `allStudentsPassed(student_list)` that accepts a list of student dictionaries and returns a boolean indicating whether all students have passed the exam. The expected result is a boolean, indicating whether all students have passed.","solution":"def allStudentsPassed(student_list): Returns True if all students in the list have a score of 50 or above. return all(student[\'score\'] >= 50 for student in student_list)"},{"question":"You are organizing a movie night and you have a list of movies with their respective durations in minutes. You and your friends only have `t` minutes available to watch movies. Your task is to find the maximum number of movies you can watch without exceeding the available time `t`. # Example: ```python max_movies([100, 50, 120, 90], 180) == 2 ``` **Note:** All durations are positive integers. If no movies can be watched within the available time, return `0`.","solution":"def max_movies(durations, t): Returns the maximum number of movies that can be watched without exceeding time t. durations.sort() count = 0 total_time = 0 for duration in durations: if total_time + duration <= t: total_time += duration count += 1 else: break return count"},{"question":"Write a function that accepts a list of integers and returns a new list containing only the unique elements from the original list. The order of elements in the output list should be the same as their first occurrence in the input list. Ensure your solution has a time complexity of O(n).","solution":"def unique_elements(lst): Returns the list of unique elements preserving their original order. seen = set() unique_lst = [] for num in lst: if num not in seen: seen.add(num) unique_lst.append(num) return unique_lst"},{"question":"Given an array of positive integers, write a function that outputs the number of \\"valley\\" points in the array. A valley point is defined as an element which is strictly smaller than its immediate neighbors. Notes: - A valley cannot exist if the array has fewer than 3 elements. - The first and last elements of the array cannot be valley points. Example `valley_points([2, 1, 2, 3, 1, 4])` Output: ``` 2 ```","solution":"def valley_points(arr): Returns the number of \\"valley\\" points in the array. A valley point is defined as an element which is strictly smaller than its immediate neighbors. if len(arr) < 3: return 0 valleys_count = 0 for i in range(1, len(arr) - 1): if arr[i] < arr[i - 1] and arr[i] < arr[i + 1]: valleys_count += 1 return valleys_count"},{"question":"You are given a binary string that consists of only \'0\'s and \'1\'s. A valid binary string is defined as the one that does not contain any consecutive \'1\'s. Your task is to calculate the number of valid binary strings of length N. Since the number can be large, return the result modulo 10^9 + 7. -----Input----- The first line contains a single integer T, the number of test cases. Each of the following T lines contains a single integer N, the length of the binary string. -----Output----- For each of the T test cases, print one integer, the number of valid binary strings of length N, modulo 1000000007. -----Constraints----- 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -----Example----- Input: 3 2 3 4 Output: 3 5 8 -----Explanation----- For the first test case: There are 3 valid binary strings of length 2: \\"00\\", \\"01\\", and \\"10\\". For the second test case: There are 5 valid binary strings of length 3: \\"000\\", \\"001\\", \\"010\\", \\"100\\", and \\"101\\". For the third test case: There are 8 valid binary strings of length 4: \\"0000\\", \\"0001\\", \\"0010\\", \\"0100\\", \\"0101\\", \\"1000\\", \\"1001\\", and \\"1010\\".","solution":"MOD = 1000000007 def number_of_valid_binary_strings(n): Returns the number of valid binary strings of length n. if n == 1: return 2 elif n == 2: return 3 dp = [0] * (n + 1) dp[1] = 2 dp[2] = 3 for i in range(3, n + 1): dp[i] = (dp[i - 1] + dp[i - 2]) % MOD return dp[n] def solve(T, test_cases): results = [] for n in test_cases: results.append(number_of_valid_binary_strings(n)) return results"},{"question":"You are given a list of strings representing an attendance log of employees entering and leaving a building. Each log entry is in the format \\"[id]:[event]:[timestamp]\\", where [id] is a unique employee identifier, [event] is either \\"enter\\" or \\"exit\\", and [timestamp] is an integer representing the time the event occurred. Your task is to compute the total time each employee spent in the building, and return the results as a dictionary with employee ids as the keys and the total times as the values. Example 1: Input: logs = [ \\"1:enter:3\\", \\"2:enter:5\\", \\"1:exit:8\\", \\"2:exit:12\\", \\"1:enter:10\\", \\"1:exit:15\\" ] Output: { \\"1\\": 10, \\"2\\": 7 } Explanation: Employee 1 entered at time 3 and exited at time 8, spending 5 units of time in the building. Then, employee 1 entered again at time 10 and exited at time 15, spending another 5 units of time. The total time for employee 1 is 5 + 5 = 10. Employee 2 entered at time 5 and exited at time 12, spending 7 units of time in the building. Note: - Each employee will always enter before they exit. - The logs may contain multiple entries and exits for the same employee, but they will always be correctly paired. - The entries in the input list are sorted by timestamp. - Ensure that the output dictionary is in the format where keys are strings (representing the employee IDs).","solution":"def compute_total_time(logs): Computes the total time each employee spent in the building. Args: logs (list of str): A list of log entries. Returns: dict: A dictionary where keys are employee ids (str) and values are total times (int) spent in the building. time_spent = {} current_entries = {} # store the latest \'enter\' timestamps for each employee for log in logs: employee_id, event, timestamp = log.split(\\":\\") if event == \\"enter\\": current_entries[employee_id] = int(timestamp) elif event == \\"exit\\": if employee_id in current_entries: time_spent[employee_id] = time_spent.get(employee_id, 0) + (int(timestamp) - current_entries[employee_id]) del current_entries[employee_id] return time_spent"},{"question":"Given a positive integer `n`, determine if the number is prime. A prime number is a positive integer greater than 1 with no positive integer divisors other than 1 and itself. Write a function called `is_prime` that takes an integer `n` (1 <= n <= 1000) and returns: - `True` if the number is prime - `False` if the number is not prime Examples: ``` is_prime(2) => True is_prime(4) => False is_prime(17) => True is_prime(100) => False ``` # Note: - Efficiency isn\'t critical due to the constraint (1 <= n <= 1000). - You may reuse helper functions if needed.","solution":"def is_prime(n): Determines if the given positive integer n is a prime number. Parameters: n (int): A positive integer (1 <= n <= 1000) Returns: bool: True if n is a prime number, False otherwise if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"question":"# Objective Write a function that simulates a simplified cooking procedure in a kitchen. You will be given a list of cooking steps, and each step will contain an action (`\\"add\\"`, `\\"cook\\"`, and `\\"serve\\"`) with relevant ingredients or cooking time as necessary. The goal is to process these steps in order and determine the final state of the dish being cooked. # Task Parse the cooking instructions and determine the final state of the dish after all steps have been completed. A cooking step can either be: 1. `\\"add <ingredient>\\"` - adds the specified ingredient to the dish. 2. `\\"cook <time>` - cooks the dish for the specified time in minutes. 3. `\\"serve\\"` - serves the dish, outputting the final state. # Input ```python [\'add tomato\', \'add pasta\', \'cook 10\', \'add cheese\', \'cook 5\', \'serve\'] # example ``` As an argument, you are given the `steps` - an array of cooking steps you need to interpret. # Output A string representing the final state of the dish after all commands have been processed. Format the output as: `\\"<ingredient1>, <ingredient2>, ... (cooked for <total_cooking_time> minutes)\\"`. - If there are no cooking steps, return `\\"No steps provided\\"`. - If there is no `\\"serve\\"` command, return `\\"Cooking not complete\\"`. # Examples ```python >>> steps = [\'add tomato\', \'add pasta\', \'cook 10\', \'add cheese\', \'cook 5\', \'serve\'] >>> cook_dish(steps) \'tomato, pasta, cheese (cooked for 15 minutes)\' ``` Explanation: The dish ends up with the ingredients tomato, pasta and cheese having been cooked for a total of 15 minutes. ```python >>> steps = [\'add potato\', \'add salt\', \'cook 20\', \'cook 10\', \'serve\'] >>> cook_dish(steps) \'potato, salt (cooked for 30 minutes)\' ``` Explanation: The dish contains potato and salt and it has been cooked for 30 minutes in total. ```python >>> steps = [\'cook 10\', \'add chicken\', \'serve\'] >>> cook_dish(steps) \'chicken (cooked for 10 minutes)\' ``` Explanation: Chicken is added after the cooking has started, so it is included in the dish, which has been cooked for 10 minutes. # Note Pay attention to the order of the steps as they can change the final state of the dish significantly. Ensure that only ingredients are added to the dish and times are summed correctly.","solution":"def cook_dish(steps): if not steps: return \\"No steps provided\\" ingredients = [] total_cooking_time = 0 serve = False for step in steps: if step.startswith(\\"add \\"): ingredient = step[4:] ingredients.append(ingredient) elif step.startswith(\\"cook \\"): cook_time = int(step[5:]) total_cooking_time += cook_time elif step == \\"serve\\": serve = True if not serve: return \\"Cooking not complete\\" ingredients_str = \\", \\".join(ingredients) return f\\"{ingredients_str} (cooked for {total_cooking_time} minutes)\\""},{"question":"Write a function that takes a string containing a sentence and reverses the order of the words. Each word in the sentence is separated by a single space and there are no leading or trailing spaces. Ensure that the punctuation and capitalization in the words are retained in their original form. For simplicity, you can assume the sentence does not contain any extra spaces between words or any punctuation marks other than those inherently part of the words. Example: - Input: \\"Hello world\\" - Output: \\"world Hello\\" - Input: \\"The quick brown fox\\" - Output: \\"fox brown quick The\\"","solution":"def reverse_words(sentence): Reverses the order of the words in a given sentence while retaining punctuation and capitalization. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"# Definition **_Palindromic Number_** is a number that **_reads the same forwards and backwards_**. ____ # Task **_Given_** a number, **_Find if it is Palindromic or not_** . ____ # Warm-up (Highly recommended) # [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers) ___ # Notes * The number passed is always **_Positive_**. * **_Return_** the result as **_String_**. ___ # Input >> Output Examples ``` (palindromic-num 121) ==> return \\"Palindromic\\" ``` **_Explanation_**: * Since **_the number reads the same forwards (121) and backwards (121)_**, *It\'s* **_Palindromic_**. ___ ``` (palindromic-num 123) ==> return \\"Not Palindromic\\" ``` **_Explanation_**: * Since **_the number reads differently forwards (123) and backwards (321)_**, *It\'s* **_Not Palindromic_**. ___ ``` (palindromic-num 1221) ==> return \\"Palindromic\\" ``` **_Explanation_**: * Since **_the number reads the same forwards (1221) and backwards (1221)_**, *It\'s* **_Palindromic_**. ___ ___ ___ # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers) # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays) # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored) ___ ALL translations are welcomed Enjoy Learning !! # Zizou","solution":"def palindromic_num(number): Returns \\"Palindromic\\" if the number reads the same forwards and backwards, otherwise \\"Not Palindromic\\". str_num = str(number) if str_num == str_num[::-1]: return \\"Palindromic\\" else: return \\"Not Palindromic\\""},{"question":"You are given a string containing digits from `2` to `9` inclusive, which represents a valid mapping for creating all possible letter combinations that a phone number could represent. The mapping is given as follows: - 2: \\"abc\\" - 3: \\"def\\" - 4: \\"ghi\\" - 5: \\"jkl\\" - 6: \\"mno\\" - 7: \\"pqrs\\" - 8: \\"tuv\\" - 9: \\"wxyz\\" Task Complete the function to return all possible letter combinations that the given phone number string could represent. # Parameters: * `digits` - a string containing digits from \'2\' to \'9\' **Note:** Input string `digits` will have length between 1 and 5, inclusive. Output A list containing all valid letter combinations in lexicographic order. Examples ```python phone_combinations(\\"23\\") # should return: [\\"ad\\",\\"ae\\",\\"af\\",\\"bd\\",\\"be\\",\\"bf\\",\\"cd\\",\\"ce\\",\\"cf\\"] phone_combinations(\\"2\\") # should return: [\\"a\\",\\"b\\",\\"c\\"] ``` Constraints * The order of the returned combinations should be lexicographic.","solution":"def phone_combinations(digits): Returns a list of all possible letter combinations that the given phone number string could represent. if not digits: return [] phone_map = { \'2\': \\"abc\\", \'3\': \\"def\\", \'4\': \\"ghi\\", \'5\': \\"jkl\\", \'6\': \\"mno\\", \'7\': \\"pqrs\\", \'8\': \\"tuv\\", \'9\': \\"wxyz\\" } def backtrack(index, path): if index == len(digits): combinations.append(\'\'.join(path)) return possible_letters = phone_map[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return sorted(combinations)"},{"question":"In a distant land, you are a royal advisor to the king and are asked for help in managing the kingdom\'s resource allocation. The kingdom is composed of villages and towns, each with a specific number of inhabitants and a certain number of wells providing water to the people. A **\\"Village\\"** has 50 inhabitants and 2 wells. A **\\"Town\\"** has 200 inhabitants and 3 wells. The king asks, \\"How many villages and towns are in the kingdom?\\" You are provided with the total number of inhabitants and the total number of wells in the kingdom. Use this information to determine the number of villages and towns. Task Given the total number of inhabitants and the total number of wells, return the number of villages and towns as an array: ```python VALID -> [villages, towns] INVALID -> \\"No solutions\\" ``` If there is no valid combination that matches the given number of inhabitants and wells, return \\"No solutions\\" or null (C#).","solution":"def find_villages_and_towns(total_inhabitants, total_wells): Returns the number of villages and towns. If no valid combination exists, return \\"No solutions\\". for v in range(total_inhabitants // 50 + 1): t = (total_inhabitants - 50 * v) // 200 if 50 * v + 200 * t == total_inhabitants and 2 * v + 3 * t == total_wells: return [v, t] return \\"No solutions\\""},{"question":"You are given an array of integers and a target value. Your task is to determine if there are any two distinct numbers in the array that add up to the target value. # Function Signature ```python def two_sum(nums: List[int], target: int) -> Union[Tuple[int, int], None]: ``` # Input - A list of integers `nums` (1 <= len(nums) <= 10^3, -10^9 <= nums[i] <= 10^9) - An integer `target` (-10^9 <= target <= 10^9) # Output - A tuple of two integers (num1, num2) such that num1 + num2 = target and num1 != num2, or `None` if no such pair exists. # Examples ```python two_sum([2, 7, 11, 15], 9) -> (2, 7) two_sum([3, 2, 4], 6) -> (2, 4) two_sum([1, 2, 3], 7) -> None ``` Note: Each input would have exactly one solution or no solution at all.","solution":"from typing import List, Tuple, Union def two_sum(nums: List[int], target: int) -> Union[Tuple[int, int], None]: num_dict = {} for num in nums: complement = target - num if complement in num_dict: return (complement, num) num_dict[num] = True return None"},{"question":"Implement a function that solves the following problem: You are given a string containing a mathematical expression that consists of only two types of brackets: square brackets `[]` and round brackets `()`. Your task is to determine if the expression is balanced. An expression is balanced if: - Every opening bracket has a corresponding closing bracket of the same type. - The brackets are properly nested. Implement the function `is_balanced(expression: str) -> bool` which returns `True` if the expression is balanced and `False` otherwise. -----Input:----- - A single line string `expression` which contains only the characters `(`, `)`, `[`, and `]`. The length of the string does not exceed 10^4 characters. -----Output:----- - Return `True` if the given expression is balanced, otherwise return `False`. -----Constraints----- - The string contains only the characters `(`, `)`, `[`, and `]`. -----Sample Input:----- ([]) -----Sample Output:----- True -----Sample Input:----- ([)] -----Sample Output:----- False -----Sample Input:----- [()[]] -----Sample Output:----- True -----Sample Input:----- [((])) -----Sample Output:----- False","solution":"def is_balanced(expression: str) -> bool: Determines if the given string expression is balanced in terms of bracket types and proper nesting. stack = [] bracket_map = {\')\': \'(\', \']\': \'[\'} for char in expression: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: continue return stack == []"},{"question":"Business Inventory Analysis You have been hired by a retail company to help them analyze their product inventory. The company has an inventory list that contains the quantity of each item in stock. The item quantities are stored in a list. Your task is to compute the total number of items in the inventory and identify any item categories that need to be restocked. An item category needs to be restocked if its quantity is below a given threshold T. Write a function `inventory_analysis` that takes two arguments: 1. A list of integers representing the quantities of each item in stock. 2. An integer T representing the restock threshold. The function should return a tuple with two elements: 1. The total number of items in the inventory. 2. A list of indices of the items that need to be restocked (indices are 0-based). -----Input----- The input consists of: 1. A list of integers - the quantities of each item in stock. 2. An integer - the restock threshold T. -----Output----- The function should return a tuple with two elements: 1. An integer - the total number of items in the inventory. 2. A list of integers - the indices of the items that need to be restocked. -----Constraints----- - 1 ≤ length of the list ≤ 105 - 0 ≤ quantity of each item ≤ 104 - 1 ≤ T ≤ 104 Example Input [10, 5, 8, 12, 3, 15], 6 Output (53, [1, 4])","solution":"def inventory_analysis(inventory, threshold): Analyzes the inventory and identifies the total number of items and the indices of items needing restock. Parameters: inventory (list): A list of integers representing the quantities of each item in stock. threshold (int): An integer representing the restock threshold. Returns: tuple: A tuple where the first element is the total number of items in inventory and the second is a list of indices of items that need to be restocked. # Calculate total number of items in the inventory total_items = sum(inventory) # Identify indices of items that need to be restocked restock_indices = [index for index, quantity in enumerate(inventory) if quantity < threshold] return (total_items, restock_indices)"},{"question":"Write a function that takes an input string representing a time duration in the format \\"hh:mm:ss\\" and returns the total duration in seconds. The input string will always be valid and within the range 00:00:00 to 99:59:59. Your function should correctly handle leading zeros in the input string and account for both single and double digit values appropriately. For example: - If the input is \\"00:00:45\\", the output should be 45. - If the input is \\"01:00:00\\", the output should be 3600. - If the input is \\"03:07:15\\", the output should be 11235. # Function Signature ```python def convert_to_seconds(time_str: str) -> int: pass ``` # Notes: - Ensure that your function properly parses the string, extracts hours, minutes, and seconds, and calculates the correct total duration in seconds. - Be mindful of the constraints and edge cases, such as the minimum and maximum possible values within the input string. Good Luck!","solution":"def convert_to_seconds(time_str: str) -> int: Converts a time duration string in the format \\"hh:mm:ss\\" to total seconds. hours, minutes, seconds = map(int, time_str.split(\':\')) total_seconds = hours * 3600 + minutes * 60 + seconds return total_seconds"},{"question":"Your task is to implement a function that merges two sorted arrays into a single sorted array without using any built-in sorting functions. Example: Input: array1: [1, 3, 5, 7] array2: [2, 4, 6, 8] Output: [1, 2, 3, 4, 5, 6, 7, 8]","solution":"def merge_sorted_arrays(array1, array2): Merges two sorted arrays into a single sorted array without using any built-in sorting functions. Parameters: array1 (list of int): First sorted array. array2 (list of int): Second sorted array. Returns: list of int: Merged sorted array. merged_array = [] i = j = 0 while i < len(array1) and j < len(array2): if array1[i] < array2[j]: merged_array.append(array1[i]) i += 1 else: merged_array.append(array2[j]) j += 1 # Add any remaining elements from array1 while i < len(array1): merged_array.append(array1[i]) i += 1 # Add any remaining elements from array2 while j < len(array2): merged_array.append(array2[j]) j += 1 return merged_array"},{"question":"Write a function that takes a list of strings and an integer n, and returns a new list containing only those strings that are longer than n characters. # Tips: - The input list will always contain only strings. - The integer n will always be non-negative. - The function should return an empty list if no string in the input list meets the criteria.","solution":"def filter_strings_by_length(strings, n): Returns a list of strings that are longer than n characters. Parameters: strings (list): A list of strings. n (int): A non-negative integer. Returns: list: A list containing strings from the input list that are longer than n characters. return [string for string in strings if len(string) > n]"},{"question":"# Task: You need to write a function **generate_diamond(n)** that generates a diamond pattern using asterisks. The diamond will have `2n-1` rows in total, with the middle row containing `2n-1` asterisks, and each row above and below decreasing symmetrically in length. The diamond should be centered. Rules/Notes: - If the input is 0 or a negative integer, return an empty string (\\"\\"). - Include only one space between asterisks in a line. - Range of n is (-∞, 50]. # Examples: generate_diamond(3): \\" * * * * * * * * *\\" generate_diamond(5): \\" * * * * * * * * * * * * * * * * * * * * * * * * *\\" generate_diamond(1): \\"*\\"","solution":"def generate_diamond(n): if n <= 0: return \\"\\" diamond = [] for i in range(1, n+1): stars = \' \'.join(\'*\' * i) spaces = \' \' * (n - i) diamond.append(spaces + stars + spaces) for i in range(n-1, 0, -1): stars = \' \'.join(\'*\' * i) spaces = \' \' * (n - i) diamond.append(spaces + stars + spaces) return \'n\'.join(diamond)"},{"question":"Implement a function `divisible_sum_pairs` that takes an array of integers and a positive integer `k`, and returns the number of (i, j) pairs where `i < j` and `arr[i] + arr[j]` is divisible by `k`. If there are no such pairs, the function should return `0`.","solution":"def divisible_sum_pairs(arr, k): Returns the number of (i, j) pairs where i < j and arr[i] + arr[j] is divisible by k. Parameters: arr (list of int): The list of integers. k (int): The positive integer divisor. Returns: int: The number of pairs (i, j) satisfying the conditions. count = 0 n = len(arr) for i in range(n): for j in range(i+1, n): if (arr[i] + arr[j]) % k == 0: count += 1 return count"},{"question":"The Caesar cipher is one of the simplest encryption techniques. It works by shifting each letter of the plaintext by a fixed number of positions down the alphabet. For instance, with a shift of 3, \'A\' would be encrypted to \'D\', \'B\' to \'E\', and so on. If the shift makes the letter go past \'Z\', it wraps around to the beginning of the alphabet. For example, applying a shift of 3: - \\"HELLO\\" becomes \\"KHOOR\\" - \\"XYZ\\" becomes \\"ABC\\" Write two functions: one for encryption and one for decryption. 1. The first function should take a string and a shift amount as inputs and return the encrypted string. 2. The second function should take an encrypted string and the same shift amount and return the original string. Constraints: - The input string will contain only uppercase English letters. - The shift amount will be a non-negative integer. Example: Encrypting with a shift of 5: ~~~python encrypt(\\"HELLO\\", 5) # Output: \\"MJQQT\\" ~~~ Decrypting \\"MJQQT\\" with a shift of 5: ~~~python decrypt(\\"MJQQT\\", 5) # Output: \\"HELLO\\" ~~~","solution":"def encrypt(plaintext, shift): Encrypts the plaintext using a Caesar cipher with the given shift. encrypted = [] for char in plaintext: encrypted_char = chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\')) encrypted.append(encrypted_char) return \'\'.join(encrypted) def decrypt(encrypted_text, shift): Decrypts the encrypted text using a Caesar cipher with the given shift. decrypted = [] for char in encrypted_text: decrypted_char = chr((ord(char) - ord(\'A\') - shift) % 26 + ord(\'A\')) decrypted.append(decrypted_char) return \'\'.join(decrypted)"},{"question":"Given a list of non-negative integers, write a function to find the sum of digits of each integer and return the maximum sum of digits found. If the list is empty, return 0. Examples ``` [123, 456, 789] ==> 24 Explanation: The sum of digits are 6, 15, and 24. The maximum sum is 24. [0, 1, 10, 100] ==> 1 Explanation: The sum of digits are 0, 1, 1, and 1. The maximum sum is 1. [] ==> 0 Explanation: Since the list is empty, the function returns 0. [45, 76, 345] ==> 12 Explanation: The sum of digits are 9, 13, and 12. The maximum sum is 13. ``` Notes - Each element in the input list is a non-negative integer. - You can assume that all inputs will be valid non-negative integers. - Aim for an efficient solution that handles edge cases appropriately.","solution":"def max_digit_sum(numbers): Find the maximum sum of digits in a list of non-negative integers. Args: numbers (list of int): The list of non-negative integers. Returns: int: The maximum sum of digits. If the list is empty, return 0. if not numbers: return 0 def digit_sum(n): return sum(int(digit) for digit in str(n)) return max(digit_sum(num) for num in numbers)"},{"question":"Given a string, your solution should determine if the string is a palindrome (a word, phrase, or sequence that reads the same backward as forward, ignoring spaces, punctuation, and capitalization). For example: - Given `\\"A man, a plan, a canal, Panama\\"`, your solution will return `true` - Given `\\"No lemon, no melon\\"`, your solution will return `true` - Given `\\"Hello, World!\\"`, your solution will return `false` You can assume, for the purpose of this kata, that the input string will have a non-zero length.","solution":"import re def is_palindrome(s): Returns True if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"You are given a problem that involves processing a sequence of numbers. Your task is to determine the longest subsequence that is a valid mountain array. A \\"mountain array\\" is defined as a sequence that has the following properties: 1. It contains at least 3 numbers. 2. There exists an index `i` such that: - `arr[0] < arr[1] < ... < arr[i]` - `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]` The mountain array should be strictly increasing to a peak, and then strictly decreasing. # Input - The first line contains an integer `T`, the number of test cases. - Each test case consists of two lines: - The first line contains an integer `N`, the length of the sequence. - The second line contains `N` integers, representing the sequence. # Output For each test case, output the length of the longest subsequence that is a valid mountain array. If no such subsequence exists, output 0. # Sample Input ``` 2 8 2 1 4 7 3 2 5 1 5 2 2 2 2 2 ``` # Sample Output ``` 5 0 ``` Explanation: For the first test case, the sequence 1 4 7 3 2 is a valid mountain array. For the second test case, there is no subsequence that satisfies the mountain array properties. # Constraints - (1 leq T leq 10) - (3 leq N leq 1000) - (-10^4 leq text{element of sequence} leq 10^4) # Note Note that if a number appears more than once consecutively in the sequence, it cannot be part of a valid mountain array as it violates the strict increasing or decreasing property. Aim to find the longest subsequence that fits the mountain array conditions.","solution":"def longest_mountain(arr): Given a list of integers `arr`, this function returns the length of the longest subsequence that is a valid mountain array. If no valid mountain array exists, it returns 0. n = len(arr) if n < 3: return 0 max_length = 0 for i in range(1, n - 1): # Check if the current element is a peak if arr[i - 1] < arr[i] > arr[i + 1]: # Explore left to find the length of the increasing sequence left = i while left > 0 and arr[left - 1] < arr[left]: left -= 1 # Explore right to find the length of the decreasing sequence right = i while right < n - 1 and arr[right] > arr[right + 1]: right += 1 # Calculate the length of the mountain array length = right - left + 1 max_length = max(max_length, length) return max_length def solve_mountain_arrays(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] result = longest_mountain(arr) results.append(result) return results"},{"question":"# Task Tina is working on a text-based project and needs to frequently check for certain types of word patterns in a given sentence. She particularly needs to identify phrases within the sentence that start and end with the same letter. Given a string `sentence`, your task is to write a function that returns a list of all such phrases. A phrase is considered to be a sequence of words that contain no spaces and is enclosed by a space or is at the start/end of the sentence. For the purpose of this task: - A word is defined as a sequence of non-space characters. - You can assume that the input string `sentence` consists only of lowercase and uppercase English letters and spaces. - The order of the phrases in your result list should match the order of their first appearance in the sentence. Note: The comparison is case-insensitive, but the output should maintain the original case of the words as they appear in the sentence. # Example For `sentence = \\"Anna went to see Eve and met Otto\\"`, the output should be `[\'Anna\', \'Eve\', \'Otto\']`. For `sentence = \\"Bob and his dad went to the civic center\\"`, the output should be `[\'Bob\', \'dad\', \'civic\']`. For `sentence = \\"No words qualify here\\"`, the output should be an empty list `[]`.","solution":"def find_patterns(sentence): Returns a list of phrases from the sentence that start and end with the same letter. words = sentence.split() result = [] for word in words: if len(word) > 1 and word[0].lower() == word[-1].lower(): result.append(word) return result"},{"question":"We need a system that can manage information about employees, departments, and their relationships in a company. # The task Create a class `Company` with the following methods. All arguments are strings: names of employees or departments. Upon first use of a name, that name is added to the company system. * `add_employee(name)` returning `boolean` Adds a new employee to the company. Returns `false` if the employee already exists. * `add_department(departmentName)` returning `boolean` Adds a new department to the company. Returns `false` if the department already exists. * `assign_employee(employeeName, departmentName)` returning `boolean` Assigns an employee to a department. Returns `false` if either the employee or the department does not exist or if the employee is already assigned to that department. * `unassign_employee(employeeName, departmentName)` returning `boolean` Unassigns an employee from a department. Returns `false` if either the employee or the department does not exist or if the employee is not assigned to that department. * `get_departments_of_employee(employeeName)` returning `list` of `string` Returns the list of departments the employee belongs to, in alphabetical order. If the employee does not exist, returns an empty list. * `get_employees_of_department(departmentName)` returning `list` of `string` Returns the list of employees in the specified department, in alphabetical order. If the department does not exist, returns an empty list. # Constraints & Assumptions - All names (both employees and departments) are case sensitive. - An employee can belong to multiple departments. - A department can have multiple employees. - Employees and departments are uniquely identified by their names. There are no two different employees or departments with the same name. - The first time an employee or department is mentioned, they are added to the company\'s records. # Example ```python comp = Company() comp.add_employee(\\"Alice\\") # True comp.add_employee(\\"Bob\\") # True comp.add_employee(\\"Alice\\") # False (already exists) comp.add_department(\\"HR\\") # True comp.add_department(\\"Engineering\\") # True comp.add_department(\\"HR\\") # False (already exists) comp.assign_employee(\\"Alice\\", \\"HR\\") # True comp.assign_employee(\\"Alice\\", \\"Engineering\\") # True comp.assign_employee(\\"Bob\\", \\"HR\\") # True comp.assign_employee(\\"Charlie\\", \\"HR\\") # False (Charlie does not exist) comp.get_departments_of_employee(\\"Alice\\") # [\\"Engineering\\", \\"HR\\"] comp.get_departments_of_employee(\\"Bob\\") # [\\"HR\\"] comp.get_departments_of_employee(\\"Charlie\\") # [] comp.get_employees_of_department(\\"HR\\") # [\\"Alice\\", \\"Bob\\"] comp.get_employees_of_department(\\"Engineering\\") # [\\"Alice\\"] comp.unassign_employee(\\"Alice\\", \\"HR\\") # True comp.get_departments_of_employee(\\"Alice\\") # [\\"Engineering\\"] comp.unassign_employee(\\"Alice\\", \\"HR\\") # False (Alice is not in HR) ```","solution":"class Company: def __init__(self): self.employees = {} self.departments = {} def add_employee(self, name): if name in self.employees: return False self.employees[name] = set() return True def add_department(self, department_name): if department_name in self.departments: return False self.departments[department_name] = set() return True def assign_employee(self, employee_name, department_name): if employee_name not in self.employees or department_name not in self.departments: return False if department_name in self.employees[employee_name]: return False self.employees[employee_name].add(department_name) self.departments[department_name].add(employee_name) return True def unassign_employee(self, employee_name, department_name): if employee_name not in self.employees or department_name not in self.departments: return False if department_name not in self.employees[employee_name]: return False self.employees[employee_name].remove(department_name) self.departments[department_name].remove(employee_name) return True def get_departments_of_employee(self, employee_name): if employee_name not in self.employees: return [] return sorted(list(self.employees[employee_name])) def get_employees_of_department(self, department_name): if department_name not in self.departments: return [] return sorted(list(self.departments[department_name]))"},{"question":"A robot is located at the top-left corner of a m x n grid (marked \'Start\' in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the diagram below). Start ⬇ ⬇ ⬇ ➡➡➡ How many possible unique paths are there? Example 1: Input: m = 3, n = 7 Output: 28 Example 2: Input: m = 3, n = 2 Output: 3 Explanation: From the top-left corner, the robot has 3 ways to reach the bottom-right corner: 1. Right -> Right -> Down 2. Right -> Down -> Right 3. Down -> Right -> Right Example 3: Input: m = 7, n = 3 Output: 28 Example 4: Input: m = 3, n = 3 Output: 6 Constraints: • 1 <= m, n <= 100 • The answer is guaranteed to be less than or equal to 2 * 10^9","solution":"def unique_paths(m, n): Returns the number of unique paths to reach the bottom-right corner of an m x n grid from the top-left corner, only moving right or down. if m == 1 or n == 1: return 1 # Create a 2D array (list of lists) with m rows and n columns initialized to 1 dp = [[1]*n for _ in range(m)] # Fill the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given an array of n integers which represents the scores in a game. Calculate the maximum possible score difference between any two players if each player can pick one score from the array. For example, if the array is [1, 3, 5, 9], the function should return 8, because the maximum difference is between the scores 9 and 1.","solution":"def max_score_difference(scores): Calculate the maximum possible score difference between any two players. Parameters: scores (list): A list of integers representing the scores. Returns: int: The maximum possible score difference. if not scores or len(scores) < 2: return 0 max_score = max(scores) min_score = min(scores) return max_score - min_score"},{"question":"Given a string s, implement a function to find the first non-repeating character in it and return its index. If it does not exist, return -1. Example: Given s = \\"leetcode\\" firstUniqChar(s) -> 0 Given s = \\"loveleetcode\\" firstUniqChar(s) -> 2 Note: - You may assume the string contains only lowercase English letters. - The length of the string will not exceed 10,000.","solution":"def firstUniqChar(s): Returns the index of the first non-repeating character in the string s. If no such character exists, return -1. # Dictionary to count occurrences of each character count = {} # Populate the dictionary with counts for char in s: if char in count: count[char] += 1 else: count[char] = 1 # Find the first character with a count of 1 for index, char in enumerate(s): if count[char] == 1: return index # If no non-repeating character is found return -1"},{"question":"In a distant universe, there exists a unique type of forest where each tree is a magical structure composed of nodes and edges. Each tree contains exactly one magical node. A tree is defined as an acyclic connected graph with N nodes and N-1 edges. The magical node has a special property of being at the center of the tree. The center of a tree is defined as the node that minimizes the maximum distance to all other nodes. In the case of multiple centers, choose the node with the smallest numerical identifier. Given the description of such a tree, you are tasked with identifying the magical node for each query. -----Input----- - The first line of the input contains a single integer Q denoting the number of queries. - The description of Q queries follows: - The first line of each query contains a single integer N, the number of nodes in the tree. - N-1 lines follow. Each line contains two space-separated integers u and v denoting an edge between nodes u and v. -----Output----- For each query, output a single line containing the identifier of the magical node in the tree. -----Constraints----- - 1 ≤ Q ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ u, v ≤ N -----Example Input----- 2 6 1 2 2 3 3 4 4 5 2 6 4 1 2 1 3 1 4 -----Example Output----- 3 1","solution":"from collections import deque def find_centroids(tree_adj_list, N): if N == 1: return [0] # Find all leaves leaves = deque() degrees = [0] * N for i in range(N): degrees[i] = len(tree_adj_list[i]) if degrees[i] == 1: leaves.append(i) remaining_nodes = N while remaining_nodes > 2: leaves_count = len(leaves) remaining_nodes -= leaves_count for _ in range(leaves_count): leaf = leaves.popleft() for neighbor in tree_adj_list[leaf]: degrees[neighbor] -= 1 if degrees[neighbor] == 1: leaves.append(neighbor) return list(leaves) def find_magical_node(queries): results = [] for query in queries: N, edges = query tree_adj_list = [[] for _ in range(N)] for u, v in edges: tree_adj_list[u-1].append(v-1) tree_adj_list[v-1].append(u-1) centroids = find_centroids(tree_adj_list, N) results.append(centroids[0] + 1) return results # Define a function to read input and produce output def process_input(input_data): lines = input_data.strip().split() idx = 0 Q = int(lines[idx]) idx += 1 queries = [] for _ in range(Q): N = int(lines[idx]) idx += 1 edges = [] for _ in range(N - 1): u = int(lines[idx]) v = int(lines[idx + 1]) edges.append((u, v)) idx += 2 queries.append((N, edges)) return find_magical_node(queries)"},{"question":"# Task Emma loves playing with words and numbers. She came up with a game to transform a word into a sequence of numbers, where each number represents the position of each character in the word within the alphabet (A=1, B=2, ..., Z=26). ``` For example, the word \\"CAB\\": C -> 3; A -> 1; B -> 2; The transformed sequence is 312. ``` Emma then adds all the numbers together to get a final value. Write a function `convert_and_sum_word(word)` that takes a single string `word` (consisting of uppercase English letters only) and returns an integer representing the sum of the transformed sequence of numbers. # Example For the input `word = \\"ABC\\"`, the sum of the transformed sequence would be `1 + 2 + 3 = 6`, so the output should be `6`. For the input `word = \\"ZEBRA\\"`, the sum of the transformed sequence would be `26 + 5 + 2 + 18 + 1 = 52`, so the output should be `52`. For the input `word = \\"HELLO\\"`, the sum of the transformed sequence would be `8 + 5 + 12 + 12 + 15 = 52`, so the output should be `52`.","solution":"def convert_and_sum_word(word): Converts a word into its corresponding sequence of alphabet positions and returns the sum of those positions. :param word: A string consisting of uppercase English letters only. :return: An integer representing the sum of the alphabet positions. return sum(ord(char) - ord(\'A\') + 1 for char in word)"},{"question":"In a far-off kingdom, there lives a wise and elderly queen who loves to calculate the number of unique ways she can climb her royal staircase to commemorate her late husband\'s birthday every year. The staircase has \'n\' steps, and the queen can either climb 1, 2, or 3 steps at a time. Because of old age, she wishes to climb the staircase in different ways every time she reaches the top. You have been tasked to write a function that calculates the number of unique ways the queen can climb the staircase with \'n\' steps. Function Signature: ```python def count_ways(n: int) -> int: pass ``` **Input:** - An integer n (1 ≤ n ≤ 30) representing the total number of steps on the staircase. **Output:** - An integer representing the number of unique ways to climb the staircase. **Example:** ```python assert count_ways(4) == 7 assert count_ways(5) == 13 ``` **Explanation:** For `n = 4`, the unique ways to reach to the top are: - (1 step + 1 step + 1 step + 1 step) - (1 step + 1 step + 2 steps) - (1 step + 2 steps + 1 step) - (2 steps + 1 step + 1 step) - (2 steps + 2 steps) - (1 step + 3 steps) - (3 steps + 1 step) The function should efficiently compute the result using dynamic programming or memoization to handle the upper limit of \'n\' gracefully.","solution":"def count_ways(n: int) -> int: Calculate the number of unique ways to climb a staircase with \'n\' steps, where one can climb 1, 2, or 3 steps at a time. # Base cases if n == 1: return 1 elif n == 2: return 2 elif n == 3: return 4 # DP array to store the number of ways to reach each step dp = [0] * (n + 1) # Base cases initialization dp[1], dp[2], dp[3] = 1, 2, 4 # Fill the dp array using the recurrence relation for i in range(4, n + 1): dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] return dp[n]"},{"question":"You have been tasked with building a collection of unique toys. Each toy is composed of two parts: a top part and a bottom part. The top and bottom parts come in varying colors, represented by strings. Your goal is to determine the minimum number of toys that need to be assembled such that there exists a collection of K toys where no two toys have the same combination of top and bottom parts. A toy collection is considered unique if every toy has a different pair of (top part, bottom part). The top and bottom parts are chosen randomly from a predefined list of colors. **Input:** - An integer T, the number of test cases. - For each test case: - An integer K (1 <= K <= 10) - Two lists of strings, the first containing the colors for the top parts and the second list containing the colors for the bottom parts. Each list has a size of at least K and no more than 20. **Output:** - For each test case, output a single integer denoting the minimum number of assembled toys needed. **Example:** Input: ``` 2 3 [\\"red\\", \\"blue\\", \\"green\\", \\"yellow\\"] [\\"red\\", \\"blue\\", \\"green\\", \\"yellow\\"] 2 [\\"red\\", \\"blue\\"] [\\"green\\", \\"yellow\\"] ``` Output: ``` 9 2 ``` In the first example, to ensure a unique toy collection of 3 toys, the possible combinations of tops and bottoms must be considered. The minimum number needed is 9. In the second example, only 2 toys are needed as each combination is unique and no two have the same parts.","solution":"def minimum_toys(K, top_colors, bottom_colors): This function computes the minimum number of toys needed such that there are exactly K different toys with unique (top, bottom) color combinations. distinct_tops = len(set(top_colors)) distinct_bottoms = len(set(bottom_colors)) min_toys = min(distinct_tops * distinct_bottoms, K) return min_toys def minimum_toys_for_all_cases(test_cases): results = [] for K, top_colors, bottom_colors in test_cases: results.append(minimum_toys(K, top_colors, bottom_colors)) return results"},{"question":"=====Problem Statement===== You are given a dictionary `transactions` containing item names as keys and a list of their sales during different hours of a day as values. Write a function `max_avg_sales(transactions)` that finds the item with the highest average sales per hour and returns its name. If there are multiple items with the same highest average sales, return the item name that comes first lexicographically. =====Example===== transactions = { \\"apple\\": [10, 20, 30], \\"banana\\": [15, 25, 35], \\"orange\\": [20, 10, 20] } The average sales per hour are: apple: (10+20+30)/3 = 20.0 banana: (15+25+35)/3 = 25.0 orange: (20+10+20)/3 = 16.67 The item with the highest average sales per hour is \\"banana\\". =====Input Format===== A dictionary `transactions` where: - Each key is a string representing the item name. - Each value is a list of integers representing sales of the item during different hours in one day. =====Constraints===== - The number of items will be between 1 and 50. - The length of each list (hourly sales) will be between 1 and 24. - Item names will have between 1 and 20 characters and contain only lowercase English letters. - Sales values will be non-negative integers less than or equal to 1000. =====Output Format===== Return a string which is the name of the item with the highest average sales per hour. =====Function Signature===== ```python def max_avg_sales(transactions: dict) -> str: pass ```","solution":"def max_avg_sales(transactions: dict) -> str: Finds the item with the highest average sales per hour and returns its name. If multiple items have the same highest average sales, return the item name that comes first lexicographically. max_avg = float(\'-inf\') result_item = \\"\\" for item, sales in transactions.items(): avg_sales = sum(sales) / len(sales) if avg_sales > max_avg or (avg_sales == max_avg and item < result_item): max_avg = avg_sales result_item = item return result_item"},{"question":"You are given an integer array nums and you need to find three numbers whose product is maximum and return the maximum product. Example 1: Input: [1,2,3] Output: 6 Example 2: Input: [1,2,3,4] Output: 24 Note: The length of the input array will be in the range [3, 10^4] and all elements are in the range [-1000, 1000]. The result can be very large, so you need to return a string representing this number.","solution":"def maximumProduct(nums): Returns the maximum product of three numbers in the array. nums.sort() # Either the product of the three largest numbers or the product of the two smallest and the largest number return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Write a function that takes two arrays of integers and returns a new array containing the elements that are present in both arrays (the intersection). The returned array should not contain duplicate elements, even if the inputs do. ``` Input: [1, 2, 2, 1], [2, 2] Output: [2] Input: [4, 9, 5], [9, 4, 9, 8, 4] Output: [4, 9] ```","solution":"def intersection(arr1, arr2): Returns a list containing the unique elements that are present in both input lists. set1 = set(arr1) set2 = set(arr2) intersection_set = set1.intersection(set2) return list(intersection_set)"},{"question":"In the realm of text processing, a common task is to compress repeated characters. For example, the string \\"aabbccc\\" can be compressed to \\"a2b2c3\\". Your task is to write a function that takes a string as input and returns a compressed version of the string where consecutive duplicate characters are replaced by a single character followed by the count of duplicates. If the compressed string is not shorter than the original string, the function should return the original string. Assume the string will only contain lowercase alphabetical characters. For example: ```python compress(\\"aabbccc\\"); // returns \\"a2b2c3\\" compress(\\"abc\\"); // returns \\"abc\\" compress(\\"aaabbbcccdde\\"); // returns \\"a3b3c3d2e1\\" ``` Consider edge cases such as an empty string and a string with no repeats.","solution":"def compress(s): Compresses a string by replacing consecutive duplicate characters with the character followed by the count of duplicates. If the compressed string is not shorter, returns the original string. Args: s (str): The input string to be compressed. Returns: str: The compressed string or the original string if compression does not yield a shorter string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(f\\"{s[i-1]}{count}\\") count = 1 compressed.append(f\\"{s[-1]}{count}\\") compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"#BACKGROUND: Emma is organizing a charity run in her neighborhood to raise funds for a local animal shelter. Participants can choose to run different distances ranging from short sprints to long marathons. Emma wants to keep track of the total distance run by all participants to calculate the funds raised, as each mile covered will earn a certain amount of money in donations. To streamline the process, she decided to write a program to calculate the total distance run based on individual entries by the participants. #TECHNICAL DETAILS: Participants will enter: - Their name; - The distance they intend to run (in miles, as a decimal). The program should accept these entries until a participant named \\"STOP\\" is entered. At this point, the program should calculate and output the total distance run and the total amount of money raised, given that each mile earns 5 in donations. #TASK: Write a function that: 1. Continuously accepts input of participant names and the distances they intend to run. 2. Stops accepting input when a participant named \\"STOP\\" is entered. 3. Computes and returns: - The total distance run by all participants (as a decimal, rounded to the nearest tenth). - The total amount of money raised (as a decimal, rounded to the nearest tenth). #NOTES: - The distance entered for each participant should be a non-negative decimal. If an invalid distance is entered (e.g., negative value or non-numeric), the program should prompt the user to enter the distance again. - The function should individually accept the participant\'s name and their intended distance in a loop until \\"STOP\\" is entered. - Display the results in a user-friendly format with appropriate messages.","solution":"def charity_run(): total_distance = 0.0 donation_per_mile = 5.0 while True: participant_name = input(\\"Enter participant\'s name (or \'STOP\' to finish): \\") if participant_name == \\"STOP\\": break while True: try: distance_str = input(f\\"Enter the distance {participant_name} will run (in miles): \\") distance = float(distance_str) if distance < 0: print(\\"Distance cannot be negative. Please enter a valid distance.\\") else: break except ValueError: print(\\"Invalid input. Please enter a numeric value.\\") total_distance += distance total_donations = round(total_distance * donation_per_mile, 1) total_distance = round(total_distance, 1) print(f\\"Total distance run: {total_distance} miles\\") print(f\\"Total funds raised: {total_donations}\\") return total_distance, total_donations"},{"question":"You are given a string `s` and an integer `n`. Your task is to write a function that returns the n-th most frequent character in the string. If multiple characters have the same frequency, return the lexicographically smallest one among them. If `n` is greater than the number of distinct characters in the string, return `None`. ``` Examples: nthMostFrequentChar(\\"aabbcc\\", 1) -> \'a\', \'b\', or \'c\' (all have the same frequency and lexicographically \'a\' is the smallest) nthMostFrequentChar(\\"aabbcc\\", 2) -> \'a\', \'b\', or \'c\' (same as above) nthMostFrequentChar(\\"mississippi\\", 1) -> \'i\' (highest frequency) nthMostFrequentChar(\\"mississippi\\", 2) -> \'s\' (second highest frequency) nthMostFrequentChar(\\"mississippi\\", 3) -> \'p\' (third highest frequency) nthMostFrequentChar(\\"mississippi\\", 4) -> \'m\' (fourth highest frequency) nthMostFrequentChar(\\"mississippi\\", 5) -> None (less than 5 distinct characters) nthMostFrequentChar(\\"\\", 1) -> None (empty string) ``` Constraints: - `1 <= n <= len(s)` in most normal cases, but ensure handling cases where `n` exceeds the distinct character count. - The string `s` will only contain lowercase English letters.","solution":"from collections import Counter def nthMostFrequentChar(s, n): Returns the n-th most frequent character in the string `s`. If multiple characters have the same frequency, returns the lexicographically smallest one among them. If `n` is greater than the number of distinct characters in the string, returns `None`. if not s: return None frequency = Counter(s) # Create a list of characters sorted by frequency (most frequent first) and lexicographical order sorted_chars = sorted(frequency.keys(), key=lambda x: (-frequency[x], x)) if n > len(sorted_chars): return None return sorted_chars[n-1]"},{"question":"A binary tree is a data structure in which each node has at most two children called the left child and the right child. The depth of a node is the number of edges from the root to the node. A full binary tree is a binary tree in which every node other than the leaves has two children. Given the depth `d`, write a function `number_of_nodes(d)` which returns the total number of nodes in a full binary tree of depth `d`. # Example number_of_nodes(0) -> 1 // a tree with only the root node. number_of_nodes(1) -> 3 // a tree with two children. number_of_nodes(2) -> 7 // a tree with four children at depth 2. Limitations The value of `0 <= d <= 30`, so your solution should handle large values of `d` efficiently. Constraints - You may assume the root node is at depth `0`. - The number of nodes in a full binary tree of depth `d` is equal to `2^(d+1) - 1`. # Note - You should consider the properties of full binary trees while defining your function.","solution":"def number_of_nodes(d): Returns the total number of nodes in a full binary tree of depth d. A full binary tree of depth d has 2^(d+1) - 1 nodes. return (2 ** (d + 1)) - 1"},{"question":"Design a function that takes a string as input and alters it based on the following rules: 1. If the character is a lowercase letter (`a-z`), convert it to an uppercase letter (`A-Z`). 2. If the character is an uppercase letter (`A-Z`), convert it to a lowercase letter (`a-z`). 3. If the character is a digit (`0-9`), shift the digit by +1. If the digit is `9`, it should become `0`. Write a function `transform_string(s: str) -> str` that implements the above transformations. Ensure your solution efficiently handles strings of varying lengths and includes edge cases such as an empty string, a string with no digits, a string with no letters, etc. **Example:** ```python print(transform_string(\\"aBc123\\")) # Output: \\"AbC234\\" print(transform_string(\\"Z9a\\")) # Output: \\"z0A\\" ```","solution":"def transform_string(s: str) -> str: Transforms the input string according to the following rules: 1. If the character is a lowercase letter (a-z), convert it to an uppercase letter (A-Z). 2. If the character is an uppercase letter (A-Z), convert it to a lowercase letter (a-z). 3. If the character is a digit (0-9), shift the digit by +1. If the digit is 9, it should become 0. result = [] for char in s: if char.islower(): result.append(char.upper()) elif char.isupper(): result.append(char.lower()) elif char.isdigit(): result.append(str((int(char) + 1) % 10)) else: result.append(char) # Append non-alphanumeric characters unchanged return \'\'.join(result)"},{"question":"Given an encoded string, where repetitions of substrings are represented as `k[substring]` and `k` is a positive integer, decode the string. For example: - The string \\"3[a]2[bc]\\" would be decoded as \\"aaabcbc\\". - The string \\"3[a2[c]]\\" would be decoded as \\"accaccacc\\". - The string \\"2[abc]3[cd]ef\\" would be decoded as \\"abcabccdcdcdef\\". The function should return the decoded string. Example 1: Input: \\"3[a]2[bc]\\" Output: \\"aaabcbc\\" Example 2: Input: \\"3[a2[c]]\\" Output: \\"accaccacc\\" Example 3: Input: \\"2[abc]3[cd]ef\\" Output: \\"abcabccdcdcdef\\" Note: - The input string will only contain digits, square brackets, and lowercase letters. - The encoded string is always valid, meaning all square brackets will pair up correctly.","solution":"def decodeString(s: str) -> str: stack = [] current_num = 0 current_string = \'\' for char in s: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \'[\': stack.append((current_string, current_num)) current_string = \'\' current_num = 0 elif char == \']\': last_string, num = stack.pop() current_string = last_string + num * current_string else: current_string += char return current_string"},{"question":"Implement a function that takes a string consisting of digits and non-digit characters. The function should sum the digits and return the total. Non-digit characters should be ignored. **Examples** ``` \\"abc123\\" ==> 1 + 2 + 3 = 6 \\"99 bottles\\" ==> 9 + 9 = 18 \\"hello5world3\\" ==> 5 + 3 = 8 \\"no digits\\" ==> 0 ```","solution":"def sum_of_digits(s): Takes a string consisting of digits and non-digit characters. Returns the sum of the digits. return sum(int(char) for char in s if char.isdigit())"},{"question":"# Find Bob\'s meeting point Task Bob is planning his daily walk, which follows a grid with intersections numbered from 0 to n-1 in both vertical and horizontal directions. Bob can start his walk from any corner of the grid and always moves toward the center of the grid. Whenever he reaches an intersection, he has to decide to continue walking horizontally or vertically, to stay on track towards the center of the grid. Assuming Bob wants to meet his friend at the center of the grid, write a function that determines the total distance he needs to walk from the start to the center. You are given an integer `n` which represents the dimensions of the grid (`n x n`). Calculate the minimum distance Bob needs to walk if he starts from any of the four corners and always moves optimally towards the center of the grid. Function Signature ```python def min_distance_to_center(n: int) -> int: pass ``` Example ``` n = 3 ``` Grid: ``` 0,0 -- 0,1 -- 0,2 | | | 1,0 -- 1,1 -- 1,2 | | | 2,0 -- 2,1 -- 2,2 ``` Bob can start from any of the corners (0,0), (0,2), (2,0), or (2,2) and will meet his friend at the center (1,1). The minimum distance from any of the corners to the center is `2`. ``` n = 4 ``` Grid: ``` 0,0 -- 0,1 -- 0,2 -- 0,3 | | | | 1,0 -- 1,1 -- 1,2 -- 1,3 | | | | 2,0 -- 2,1 -- 2,2 -- 2,3 | | | | 3,0 -- 3,1 -- 3,2 -- 3,3 ``` Bob can start from any of the corners (0,0), (0,3), (3,0), or (3,3) and will meet his friend at one of the two center points (1,1), (1,2) or (2,1), (2,2). The minimum distance from any of the corners to any center point is `3`. # Notes - n is guaranteed to be an integer greater than 1. - You may assume optimal movement means moving towards the closest center point directly.","solution":"def min_distance_to_center(n: int) -> int: Calculate the minimum distance from any corner of the grid to the center. # Distance from a corner to the center in an `n x n` grid is always `n - 1` # because the optimal path from a corner to the center involves moving `n // 2` steps horizontally # and `n // 2` steps vertically if `n` is odd, or to one of the middle points if `n` is even. return n - 1"},{"question":"# Task You are given a list of integers representing stock prices in chronological order. Your task is to determine the maximum possible profit from a single buy and sell operation. To achieve this, you need to identify the two days, `buy_day` and `sell_day`, such that: 1. `buy_day` < `sell_day` 2. profit = prices[sell_day] - prices[buy_day] is maximized If no profit can be made, return 0. # Example For the list of prices `[7, 1, 5, 3, 6, 4]`, the output should be `5`. The optimal buy_day is day 1 (price = 1) and sell_day is day 4 (price = 6), thus the profit is `6 - 1 = 5`. For the list of prices `[7, 6, 4, 3, 1]`, the output should be `0`. No profit can be made with any buy and sell operations. # Input/Output - `[input]` list of integers `prices` A list of stock prices. Constraints: 1 ≤ len(prices) ≤ 100000, 0 ≤ prices[i] ≤ 100000. - `[output]` an integer The maximum profit achievable from a single buy and sell operation. If no profit is possible, return 0.","solution":"def max_profit(prices): Given a list of prices, returns the maximum profit obtainable from a single buy and sell operation. If no profit is possible, returns 0. if len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Amanda is planning a road trip and wants to visit some cities. She starts at city number 1 and has a road map that gives her the distances between some of the cities. She wants to find the shortest path that visits all the cities exactly once and returns back to the starting city. This is a known problem in Computer Science called the **Traveling Salesperson Problem (TSP)** (https://en.wikipedia.org/wiki/Travelling_salesman_problem). Write a program to help Amanda calculate the minimum travel distance required to complete her trip. -----Input----- The first line contains an integer T denoting the number of test cases. Each test case begins with an integer N, the number of cities. The following N lines each contain N integers. The j-th integer in the i-th line denotes the distance between city i+1 and city j+1. Each distance between cities will be a positive integer. -----Output----- For each test case, output a single line containing the minimum travel distance required for Amanda to complete her trip. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 10 - 1 ≤ distance between any two cities ≤ 1000 -----Example----- Input: 2 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 29 20 29 0 41 20 41 0 Output: 80 90 -----Explanation----- In the first example, Amanda starts at city 1, and the distances between the cities are given in the distance matrix. The shortest path that visits all the cities exactly once and returns to the starting city is: 1 -> 2 -> 4 -> 3 -> 1 with a total distance of 80. In the second example, the shortest path is: 1 -> 3 -> 2 -> 1 with a total distance of 90.","solution":"import itertools def min_travel_distance(T, test_cases): results = [] for case in test_cases: N, distances = case cities = range(N) min_distance = float(\'inf\') for permutation in itertools.permutations(cities[1:]): current_distance = 0 current_path = [0] + list(permutation) + [0] for i in range(len(current_path) - 1): current_distance += distances[current_path[i]][current_path[i + 1]] min_distance = min(min_distance, current_distance) results.append(min_distance) return results"},{"question":"In a busy railway network, trains run between various stations, and each direct connection has a specific travel time. Given a schedule of direct connections between stations, your goal is to find the shortest travel time from a starting station to a destination station using Dijkstra\'s algorithm. # Task You will be given an array of tuples, each representing a direct connection between two stations and the travel time between them. Each tuple will be in the form `(start_station, end_station, travel_time)`. Additionally, you will be given two strings representing the starting station and the destination station. Your task is to write a function `find_shortest_travel_time(schedule, start_station, end_station)` that returns the shortest travel time between the start and destination stations. If there is no valid path between the two stations, the function should return `None`. # Example ```python schedule = [ (\\"A\\", \\"B\\", 7), (\\"A\\", \\"C\\", 9), (\\"A\\", \\"F\\", 14), (\\"B\\", \\"C\\", 10), (\\"B\\", \\"D\\", 15), (\\"C\\", \\"D\\", 11), (\\"C\\", \\"F\\", 2), (\\"D\\", \\"E\\", 6), (\\"E\\", \\"F\\", 9), ] find_shortest_travel_time(schedule, \\"A\\", \\"E\\") ==> 20 find_shortest_travel_time(schedule, \\"A\\", \\"G\\") ==> None ``` # Notes - The schedule array can have up to `1000` direct connections. - Travel time is always a positive integer. - Station names are case-sensitive single uppercase letters (\\"A\\" to \\"Z\\"). - The solution should be efficient in terms of time and space complexity, suitable for real-time application in a large network.","solution":"import heapq from collections import defaultdict def find_shortest_travel_time(schedule, start_station, end_station): Uses Dijkstra\'s algorithm to find the shortest travel time between start_station and end_station. # Create a graph as an adjacency list graph = defaultdict(list) for start, end, time in schedule: graph[start].append((time, end)) graph[end].append((time, start)) # Dijkstra\'s algorithm pq = [(0, start_station)] # priority queue of (cost, station) visited = set() distances = {start_station: 0} while pq: current_distance, current_station = heapq.heappop(pq) if current_station in visited: continue visited.add(current_station) if current_station == end_station: return current_distance for travel_time, neighbor in graph[current_station]: if neighbor in visited: continue new_distance = current_distance + travel_time if new_distance < distances.get(neighbor, float(\'inf\')): distances[neighbor] = new_distance heapq.heappush(pq, (new_distance, neighbor)) return None"},{"question":"You have a rectangular grid of cells with dimensions `n x m`. Each cell initially holds a value of 0. You are given a sequence of update instructions, each specifying a sub-rectangle within the grid and a value to add to every cell in that sub-rectangle. Write a function `update_grid(n, m, updates)` where: - `n` is the number of rows in the grid (1 ≤ n ≤ 1000) - `m` is the number of columns in the grid (1 ≤ m ≤ 1000) - `updates` is a list of tuples, each of the form `(r1, c1, r2, c2, v)`, where (r1, c1) is the top-left cell and (r2, c2) is the bottom-right cell of the sub-rectangle, and `v` is the value to add to each cell in that sub-rectangle (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m, -1000 ≤ v ≤ 1000). The sequence of updates can be at most 1000 updates long. The function should return the final grid after all updates have been applied. # Example ```python n = 3 m = 3 updates = [(1, 1, 2, 2, 5), (2, 2, 3, 3, 10)] result = update_grid(n, m, updates) ``` **Result:** ``` [ [5, 5, 0], [5, 15, 10], [0, 10, 10] ] ```","solution":"def update_grid(n, m, updates): grid = [[0] * m for _ in range(n)] for r1, c1, r2, c2, v in updates: for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): grid[i][j] += v return grid"},{"question":"Write a function that takes an array of integers and returns a new array where each element is the product of all the elements in the original array except the one at the current position. Example: Input: [1, 2, 3, 4, 5] Output: [120, 60, 40, 30, 24] Input: [3, 2, 1] Output: [2, 3, 6]","solution":"def product_except_self(nums): Returns a new array such that each element at index i of the new array is the product of all the numbers in the original array except nums[i]. length = len(nums) answer = [0] * length # Calculate left products answer[0] = 1 for i in range(1, length): answer[i] = nums[i - 1] * answer[i - 1] # Calculate right products and final answer right_product = 1 for i in range(length - 1, -1, -1): answer[i] = answer[i] * right_product right_product *= nums[i] return answer"},{"question":"You are given a list of student scores and an integer k, which represents the number of top scores you need to find. Write a function `top_k_scores(scores, k)` that takes a list of scores and an integer k and returns a list of the top k scores in descending order. If k is greater than the number of scores available, return a list of all scores sorted in descending order. If the scores list is empty, return an empty list. # Constraints: 1. The elements of the scores list are integers. 2. The value of k is a non-negative integer. # Examples: ```python top_k_scores([50, 20, 40, 80, 60], 3) == [80, 60, 50] top_k_scores([90, 30, 70, 60, 20], 2) == [90, 70] top_k_scores([40, 10, 30], 5) == [40, 30, 10] top_k_scores([], 4) == [] top_k_scores([15, 34, 23, 42, 56, 78, 89], 0) == [] ```","solution":"def top_k_scores(scores, k): Returns the top k scores in descending order. Parameters: scores (list): List of integer scores. k (int): Number of top scores to return. Returns: list: Top k scores in descending order. # Sorting the scores in descending order sorted_scores = sorted(scores, reverse=True) # Returning the first k scores or all if k is greater than the number of scores return sorted_scores[:k]"},{"question":"A new startup has contacted you to help them design a reliable system for monitoring the uptime of their web services. One component of this system requires you to write a function named `server_uptime`, which takes a list of booleans representing the status of the server during each second (True for up, False for down) over a 24-hour period, and returns the percentage of time the server was up. The list will always contain exactly 86,400 booleans, corresponding to the 86,400 seconds in a day. If the server was `up` for 43,200 seconds in a day, the function should return 50.0 (representing 50.0% uptime). ```python def server_uptime(status: List[bool]) -> float: pass # Implementation goes here # Example Usage: # status = [True, True, False, True, ..., False] # A list with 86,400 elements # print(server_uptime(status)) # Output should be the percentage of the total uptime ``` Ensure that your implementation is efficient and handles the full range of possible inputs correctly.","solution":"def server_uptime(status): Returns the percentage of time the server was up during a 24-hour period. Parameters: status (list of bools): List of booleans representing the server status during each second of a day. Returns: float: Percentage of time the server was up. if len(status) != 86400: raise ValueError(\\"The status list must contain exactly 86,400 elements.\\") up_time = sum(status) uptime_percentage = (up_time / 86400) * 100 return uptime_percentage"},{"question":"Given a list of strings, write a function to group anagrams together. Each string consists of lowercase alphabets. You can return the answer in any order. Example: Input: [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [[\\"ate\\",\\"eat\\",\\"tea\\"], [\\"nat\\",\\"tan\\"], [\\"bat\\"]] Note: - An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. - The order of output does not matter. - All inputs will be lowercase letters. - The input list is not necessarily sorted. Follow up: What are the time and space complexities of your solution? How can you optimize your solution further if the input list contains a large number of strings?","solution":"from collections import defaultdict def group_anagrams(strs): Groups the anagrams together from the given list of strings. Args: strs (List[str]): List of strings. Returns: List[List[str]]: List of groups of anagrams. anagram_dict = defaultdict(list) for s in strs: # Sort the string and use it as a key sorted_str = \'\'.join(sorted(s)) anagram_dict[sorted_str].append(s) # Return the values of the dictionary return list(anagram_dict.values())"},{"question":"Given a string (s) consisting of lowercase English letters, you need to move all the vowels to the end of the string while preserving the order of the consonants and vowels. Vowels are defined as \'a\', \'e\', \'i\', \'o\', and \'u\'. Example: s = \\"programming\\" Output: \\"prgrmmngoai\\" Work through the string from left to right, collecting consonants and vowels separately before recombining them. Return the resulting string.","solution":"def move_vowels_to_end(s): Moves all the vowels in the string \'s\' to the end while preserving the order of the consonants and vowels. Args: s (str): The input string consisting of lowercase English letters. Returns: str: The resulting string after moving vowels to the end. vowels = \'aeiou\' consonants = [] vowel_list = [] for char in s: if char in vowels: vowel_list.append(char) else: consonants.append(char) return \'\'.join(consonants) + \'\'.join(vowel_list)"},{"question":"Crop Yield Calculation A farmer is tracking the yields of different crops grown in his fields. He maintains a record where each entry consists of the crop type and the yield in kilograms for a particular period. You are provided with a list (or array) of tuples. Each tuple contains a string (crop type) and an integer (yield in kilograms). Your task is to calculate the total yield of a specified crop type. Write a function that receives two parameters: 1. The list of tuples. 2. The crop type to calculate the yield for. The function should return the total yield of the specified crop type. You can assume that the list will always contain at least one record for every crop type being queried. Review the following test cases to understand the expected output. **Example:** ```python # Input crop_data = [(\\"Wheat\\", 500), (\\"Barley\\", 200), (\\"Wheat\\", 300), (\\"Corn\\", 400)] crop_type = \\"Wheat\\" # Output 800 # Input crop_data = [(\\"Apple\\", 100), (\\"Orange\\", 150), (\\"Apple\\", 250), (\\"Orange\\", 200)] crop_type = \\"Orange\\" # Output 350 ``` You need to implement the function: ```python def calculate_total_yield(crop_data, crop_type): # Your code here ``` This function should return the cumulative yield for the specified crop type from the given list.","solution":"def calculate_total_yield(crop_data, crop_type): Calculate the total yield for a specified crop type. Parameters: crop_data (list of tuples): List containing tuples with crop type and yield. crop_type (str): The crop type to calculate the total yield for. Returns: int: The total yield for the specified crop type. total_yield = 0 for crop, yield_ in crop_data: if crop == crop_type: total_yield += yield_ return total_yield"},{"question":"The city of Gridland is represented as a matrix of size n x m. Some of the cells in the matrix are prohibited, meaning you can\'t step on them. You need to find the shortest path from the top-left corner of the grid to the bottom-right corner. You can move up, down, left, or right at each step, but cannot step outside the grid or on a prohibited cell. Write a function to determine the length of the shortest path from the top-left corner to the bottom-right corner. If there\'s no valid path, return -1. -----Input----- The first line contains two integers n and m (2 ≤ n, m ≤ 100) — the number of rows and columns in the grid. The next n lines contain m characters each, representing the grid. Each character is either \'.\' (an open cell) or \'#\' (a prohibited cell). -----Output----- Print a single integer — the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, print -1. -----Examples----- Input 4 4 .... .#.. ..#. .... Output 6 Input 3 3 ... # .#. Output -1 -----Note----- In the first sample, one of the shortest paths from the top-left to the bottom-right corner is: right, right, down, left, down, down. In the second sample, it is not possible to reach the bottom-right corner due to the barriers.","solution":"from collections import deque def shortest_path(n, m, grid): Returns the length of the shortest path from the top-left corner to the bottom-right corner in a given n x m grid with prohibited cells marked by \'#\'. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, step = queue.popleft() if x == n - 1 and y == m - 1: return step for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, step + 1)) return -1"},{"question":"Given an array of integers, you need to write a function that returns a new array where each element at position `i` is the product of all the elements in the original array except the one at `i`. For example, given `[1, 2, 3, 4]`, the output should be `[24, 12, 8, 6]`. You should not use the division operation in your solution. All inputs will be valid, and the array will contain at least two elements.","solution":"def product_except_self(nums): Returns an array where each element at index i is the product of all elements in the input array except the one at i. n = len(nums) output = [1] * n left_products = [1] * n right_products = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(n): output[i] = left_products[i] * right_products[i] return output"},{"question":"Implement a function ```find_missing_letter```, which takes a list of consecutive (increasing) letters as an argument and returns the missing letter from the list. The list will always contain at least two letters, and the missing letter will never be the first or last in the list. The letters will always be lowercase and in alphabetical order. For example: ```python find_missing_letter([\'a\', \'b\', \'c\', \'e\']) => \'d\' find_missing_letter([\'m\', \'n\', \'o\', \'q\']) => \'p\' ``` ```python def find_missing_letter(chars): for i in range(len(chars) - 1): if ord(chars[i + 1]) - ord(chars[i]) != 1: return chr(ord(chars[i]) + 1) ```","solution":"def find_missing_letter(chars): Takes a list of consecutive (increasing) letters as an argument and returns the missing letter. for i in range(len(chars) - 1): if ord(chars[i + 1]) - ord(chars[i]) != 1: return chr(ord(chars[i]) + 1)"},{"question":"# Task Given a string `s` consisting of lowercase and uppercase alphabetic characters and an integer `n`, return a new string such that each character in the original string is shifted by `n` positions forward in the alphabet. If the shift goes beyond \'z\' or \'Z\', it wraps around to the beginning of the letter set. This process should be case-sensitive (i.e., \'a\' shifted by 2 becomes \'c\' and \'A\' shifted by 2 becomes \'C\'). # Input/Output `[input]` string `s` A non-empty string containing only alphabetic characters. `1 ≤ s.length ≤ 100` `[input]` integer `n` A positive integer indicating the number of positions to shift each character. `1 ≤ n ≤ 25` `[output]` a string The transformed string after shifting each character by `n` positions in the alphabet. # Example For `s = \\"abcXYZ\\" and n = 2`, the output should be `\\"cdeZAB\\"`. \'a\' shifted by 2 positions is \'c\', \'b\' shifted by 2 positions is \'d\', \'c\' shifted by 2 positions is \'e\', \'X\' shifted by 2 positions is \'Z\', \'Y\' shifted by 2 positions is \'A\' and \'Z\' shifted by 2 positions is \'B\'. For `s = \\"Hello\\" and n = 13`, the output should be `\\"Uryyb\\"`. \'H\' shifted by 13 positions is \'U\', \'e\' shifted by 13 positions is \'r\', \'l\' shifted by 13 positions is \'y\', \'l\' shifted by 13 positions is \'y\', and \'o\' shifted by 13 positions is \'b\'.","solution":"def shift_string(s, n): This function takes a string `s` and an integer `n`, and returns a new string where each character in `s` is shifted by `n` positions forward in the alphabet. result = [] for char in s: if char.islower(): shifted = chr((ord(char) - ord(\'a\') + n) % 26 + ord(\'a\')) elif char.isupper(): shifted = chr((ord(char) - ord(\'A\') + n) % 26 + ord(\'A\')) result.append(shifted) return \'\'.join(result)"},{"question":"=====Function Descriptions===== Dictionaries in Python are a collection of key-value pairs. Each key is mapped to a value, allowing for efficient data lookup. import numpy as np from collections import defaultdict We use the `defaultdict` from the `collections` module to handle dictionary data with default values for new keys. Example: from collections import defaultdict d = defaultdict(int) d[\'a\'] += 1 d[\'b\'] += 2 print(d[\'a\']) # Output: 1 print(d[\'b\']) # Output: 2 print(d[\'c\']) # Output: 0 (default value for new key) =====Problem Statement===== You are given an input array, which contains integers, and you need to calculate the frequency of each unique integer. Use a `defaultdict` to store frequencies. =====Input Format===== A single line of input containing space separated integers. =====Output Format===== Print each unique integer present in the array with its frequency in increasing order of integers, one per line in the format: `integer: frequency`. =====Sample Input===== 1 2 2 3 3 3 4 4 4 4 =====Sample Output===== 1: 1 2: 2 3: 3 4: 4 =====Function Signature===== def calculate_frequencies(arr: List[int]) -> dict:","solution":"from collections import defaultdict from typing import List, Dict def calculate_frequencies(arr: List[int]) -> Dict[int, int]: Calculate the frequency of each unique integer in the given list. Parameters: arr (List[int]): List of integers to count frequencies of. Returns: Dict[int, int]: Dictionary with integers as keys and their frequencies as values. frequency_dict = defaultdict(int) for number in arr: frequency_dict[number] += 1 return dict(sorted(frequency_dict.items()))"},{"question":"Given a list of closed intervals (each interval being [start, end]) and a number `k`, write a function `partition_intervals(intervals, k)` to determine if the intervals can be partitioned into `k` or fewer non-overlapping sublists. Each sublist should contain non-overlapping intervals. Example ```python intervals = [[1, 3], [2, 5], [6, 9], [8, 10]] k = 2 partition_intervals(intervals, k) == True # Can be partitioned into [[1, 3], [6, 9]] and [[2, 5], [8, 10]] intervals = [[1, 2], [2, 4], [5, 7], [6, 8], [9, 11]] k = 3 partition_intervals(intervals, k) == True # Can be partitioned into [[1, 2], [5, 7], [9, 11]], [[2, 4]], and [[6, 8]] intervals = [[1, 3], [3, 5], [4, 6], [7, 8]] k = 1 partition_intervals(intervals, k) == False # Cannot be partitioned into 1 non-overlapping sublist ``` Task Create a function `partition_intervals(intervals, k)` that takes in a list of intervals and an integer `k`, and returns `True` if it is possible to partition the intervals into `k` or fewer non-overlapping sublists, otherwise return `False`. # Constraints - The number of intervals will be between `1` and `10^4`. - The values in the intervals are between `0` and `10^5`. - `1 <= k <= 10`","solution":"def partition_intervals(intervals, k): Determines if the intervals can be partitioned into k or fewer non-overlapping sublists. if not intervals: return True # Sort intervals by their starting times intervals.sort() # Create a min heap to track the end times of the intervals in the current groups import heapq heap = [] for interval in intervals: if heap and heap[0] <= interval[0]: # If the current interval can fit into the earliest ending group heapq.heapreplace(heap, interval[1]) else: # Otherwise create a new group heapq.heappush(heap, interval[1]) # If at any point, the number of groups exceeds k, return False if len(heap) > k: return False return True"},{"question":"Write a function that takes a string of English letters and returns another string where each character is replaced by the next character in the alphabet. If the character is \'z\' or \'Z\', it should be wrapped around to \'a\' or \'A\' respectively. Non-alphabetic characters should remain unchanged. For example, given the input: ``` \\"abcXYZ\\" \\"Hello, World!\\" \\"zZ\\" ``` You should have, in turn: ```python next_char(\\"abcXYZ\\") == \\"bcdYZA\\" next_char(\\"Hello, World!\\") == \\"Ifmmp, Xpsme!\\" next_char(\\"zZ\\") == \\"aA\\" ```","solution":"def next_char(s): result = [] for char in s: if \'a\' <= char <= \'z\': result.append(chr((ord(char) - ord(\'a\') + 1) % 26 + ord(\'a\'))) elif \'A\' <= char <= \'Z\': result.append(chr((ord(char) - ord(\'A\') + 1) % 26 + ord(\'A\'))) else: result.append(char) return \'\'.join(result)"},{"question":"# Movie Marathon Every month, the movie club organizes a movie marathon. Each member suggests a list of movies and the club has a rule: they will watch all the suggested movies but in alphabetical order. Each member\'s list of movies is already sorted alphabetically, and the goal is to merge all the members\' lists into one sorted list of movies to create the final watchlist for the marathon. Write a function that takes a list of sorted movie lists and merges them into a single list, maintaining the alphabetical order. # Notes: * All movie titles are unique. * Each member\'s list is already sorted alphabetically. * The total number of movies across all lists does not exceed 10,000. # Examples For this input: ``` [ [\\"Avengers\\", \\"Black Panther\\", \\"Thor\\"], [\\"Batman\\", \\"Inception\\", \\"Joker\\"], [\\"A Quiet Place\\", \\"Parasite\\", \\"Titanic\\"] ] ``` You should return this output: ``` [ \\"A Quiet Place\\", \\"Avengers\\", \\"Batman\\", \\"Black Panther\\", \\"Inception\\", \\"Joker\\", \\"Parasite\\", \\"Thor\\", \\"Titanic\\" ] ```","solution":"import heapq def merge_movie_lists(lists): Merge multiple lists of sorted movies into a single sorted list. Args: lists (list of list of str): A list containing lists of movie titles, where each list is sorted alphabetically. Returns: list of str: A single list of movie titles sorted alphabetically. min_heap = [] result = [] # Build a list of iterators for each movie list iterators = [iter(lst) for lst in lists] # Initialize the heap with the first movie from each list for i, it in enumerate(iterators): first_movie = next(it, None) if first_movie is not None: heapq.heappush(min_heap, (first_movie, i)) while min_heap: movie, i = heapq.heappop(min_heap) result.append(movie) next_movie = next(iterators[i], None) if next_movie is not None: heapq.heappush(min_heap, (next_movie, i)) return result"},{"question":"=====Problem Statement===== Write a program that takes an input list of space-separated integers, and then finds and prints the largest sum of any contiguous subarray of the integers. For example, for the input list [1, -3, 2, 1, -1], the contiguous subarray with the largest sum is [2, 1], which has a sum of 3. =====Example===== If the input list is: [-2, -3, 4, -1, -2, 1, 5, -3] The contiguous subarray with the largest sum is: [4, -1, -2, 1, 5] which has a sum of 7. =====Input Format===== - The first line contains an integer, N, the number of integers. - The second line contains N space-separated integers, representing the values in the list. =====Constraints===== 1 ≤ N ≤ 1000 -10^4 ≤ each integer in the list ≤ 10^4 =====Output Format===== Print a single integer representing the largest sum of any contiguous subarray. =====Sample Input===== 8 -2 -3 4 -1 -2 1 5 -3 =====Sample Output===== 7","solution":"def largest_sum_contiguous_subarray(arr): Function to find the largest sum of any contiguous subarray using Kadane\'s Algorithm. Params: arr (list): List of integers Returns: int: Largest sum of any contiguous subarray max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far # Example usage: # if __name__ == \\"__main__\\": # print(largest_sum_contiguous_subarray([-2, -3, 4, -1, -2, 1, 5, -3])) # Should print 7"},{"question":"=====Problem Statement===== Given an array of integers, perform the following algorithm to sort the array: 1. Iterate from the second element to the end of the array. 2. For each element, insert it into its correct position among the previous elements, which are already sorted. This is a description of the insertion sort algorithm. Task Implement the function `insertion_sort(arr)` that performs an insertion sort on the given array and returns the sorted array. =====Input Format===== - The initial and only input is a list of integers, `arr`. =====Constraints===== - 1 ≤ len(arr) ≤ 10^4 - -10^6 ≤ arr[i] ≤ 10^6 =====Output Format===== The function must return a list, which is the sorted version of the input array.","solution":"def insertion_sort(arr): Perform insertion sort on the given array and return the sorted array. for i in range(1, len(arr)): key = arr[i] j = i - 1 # Move elements of arr[0..i-1], that are greater than key, # to one position ahead of their current position while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"You are given an array of integers. Your task is to sort the array such that the even numbers appear before the odd numbers and both are sorted in ascending order within their respective segments. You must accomplish this without using any built-in sort functions. ___ Examples: ``` input: [9, 4, 2, 7, 3, 10, 1, 6] result: [2, 4, 6, 10, 1, 3, 7, 9] input: [5, 3, 2, 8, 1, 12] result: [2, 8, 12, 1, 3, 5] ``` Constraints: - The input array will contain at least one element and at most 1000 elements. - The elements in the array are integers in the range -10000 to 10000. Notes: - Ensure that the relative order of even and odd numbers is maintained separately. - Aim for a solution with a time complexity of O(n log n) or better.","solution":"def custom_sort_array(arr): Returns the array sorted such that even numbers appear before odd numbers, and both segments are individually sorted in ascending order. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] evens = custom_sort(evens) odds = custom_sort(odds) return evens + odds def custom_sort(arr): Sorts an array using a simple implementation of quicksort. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return custom_sort(left) + middle + custom_sort(right)"},{"question":"City Traffic Simulation: You are in charge of a city traffic simulation. There are N intersections in the city, connected by M roads. Each road has a specific travel time associated with it. Given this, the mayor wants to know the minimum travel time to get from the City Hall (intersection 1) to the Stadium (intersection N). Additionally, there are some intersections that are under construction and cannot be used. Write a program to find the shortest travel time from intersection 1 to intersection N, avoiding the intersections under construction. If it’s not possible to reach the Stadium from the City Hall, the program should output -1. -----Input----- The first line contains three integers N, M, and K, representing the number of intersections, the number of roads, and the number of intersections under construction respectively. The next M lines each contain three integers u, v, and t, representing a road from intersection u to intersection v with travel time t. The last line contains K integers, each representing an intersection that is under construction. -----Output----- Output a single integer representing the minimum travel time from intersection 1 to intersection N, or -1 if there is no valid path. -----Constraints----- - 1 ≤ N, M ≤ 10^5 - 1 ≤ u, v ≤ N - 1 ≤ t ≤ 10^4 - 0 ≤ K ≤ N - 1 -----Example----- Input: 5 6 1 1 2 5 1 3 10 2 4 7 3 4 2 4 5 3 3 5 1 3 Output: 15 -----Explanation----- In this example, the city has 5 intersections and 6 roads, with intersection 3 under construction. The shortest path from intersection 1 to intersection 5 avoiding intersection 3 is 1 → 2 → 4 → 5 with a total travel time of 5 + 7 + 3 = 15 minutes.","solution":"import heapq def shortest_travel_time(N, M, K, roads, under_construction): Find the shortest travel time from the City Hall (intersection 1) to the Stadium (intersection N), avoiding intersections that are under construction. Parameters: - N: number of intersections - M: number of roads - K: number of intersections under construction - roads: list of tuples (u, v, t) indicating a road from u to v with travel time t - under_construction: list of intersections that are under construction Returns: - Minimum travel time from intersection 1 to intersection N, or -1 if not possible graph = {i: [] for i in range(1, N + 1)} for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) # Convert under_construction list to a set for O(1) lookups under_construction = set(under_construction) # If starting or ending points are under construction, return -1 immediately if 1 in under_construction or N in under_construction: return -1 # Dijkstra\'s algorithm initialization priority_queue = [(0, 1)] # (travel_time, intersection) distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[1] = 0 visited = set() while priority_queue: current_time, u = heapq.heappop(priority_queue) if u in visited: continue visited.add(u) for v, travel_time in graph[u]: if v in under_construction: continue new_time = current_time + travel_time if new_time < distances[v]: distances[v] = new_time heapq.heappush(priority_queue, (new_time, v)) return distances[N] if distances[N] != float(\'inf\') else -1"},{"question":"You are given a string `s` which consists of lowercase English letters, and an integer `k`. Your task is to find the length of the longest substring that contains at most `k` distinct characters. If `k` is greater than or equal to the length of `s`, return the length of `s`. For example: ``` Input: s = \\"eceba\\", k = 2 Output: 3 Explanation: The longest substring with at most 2 distinct characters is \\"ece\\", which has length 3. Input: s = \\"aa\\", k = 1 Output: 2 Explanation: The longest substring with at most 1 distinct character is \\"aa\\", which has length 2. Input: s = \\"aa\\", k = 3 Output: 2 Explanation: The whole string \\"aa\\" has only 2 characters and k is 3, so the length of the longest substring is 2. ``` Ensure your function is efficient enough to handle large input sizes.","solution":"def length_of_longest_substring_k_distinct(s, k): Returns the length of the longest substring with at most k distinct characters. if k == 0 or not s: return 0 if k >= len(s): return len(s) left = 0 right = 0 max_length = 0 char_map = {} while right < len(s): char_map[s[right]] = char_map.get(s[right], 0) + 1 right += 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left) return max_length"},{"question":"You are given an integer array `nums` of size `n` consisting of non-negative integers. Your task is to determine if there exists a partition of the array into two subsets such that the sum of the elements in each subset is the same. Write a function `canPartition` that takes the array `nums` as an input and returns `True` if the array can be partitioned into two subsets with equal sum, and `False` otherwise. To solve this problem, you may find it helpful to transform the problem into a subset sum problem. Specifically, you need to find if there is a subset in `nums` that sums to `sum(nums) / 2`. Your implementation should have a time complexity of `O(n * target)`, where `target` is the target sum for each subset. Constraints are as follows: `n (1 <= n <= 200)` and each element in `nums` is at most `100`. # Example 1: Input: ``` nums = [1, 5, 11, 5] ``` Output: ``` True ``` Explanation: The array can be partitioned as [1, 5, 5] and [11]. # Example 2: Input: ``` nums = [1, 2, 3, 5] ``` Output: ``` False ``` Explanation: The array cannot be partitioned into two subsets with equal sum. # Example 3: Input: ``` nums = [2, 2, 1, 1] ``` Output: ``` True ``` Explanation: The array can be partitioned as [2, 1] and [2, 1]. # Function Signature ```python def canPartition(nums: List[int]) -> bool: pass ```","solution":"from typing import List def canPartition(nums: List[int]) -> bool: Determines if the array can be partitioned into two subsets such that the sums of the two subsets are equal. total_sum = sum(nums) # If the total sum is odd, it is not possible to partition into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Create a boolean dp array to store whether a sum is achievable dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"Write a function validateIP that takes a string and checks if it is a valid IPv4 address. Rules for a valid IPv4 address: 1. The address is composed of four numbers separated by periods (e.g., \\"192.168.1.1\\"). 2. Each number can only be in the range 0-255. 3. Leading zeros are not allowed (e.g., \\"192.068.001.1\\" is invalid). 4. The address should not have any leading or trailing spaces. 5. The address should not contain any other characters apart from digits and dots. The function should return True if the input is a valid IPv4 address, and False otherwise. Examples: validateIP(\\"192.168.1.1\\") -> True validateIP(\\"256.256.256.256\\") -> False validateIP(\\"192.168.01.1\\") -> False validateIP(\\"192.168.1\\") -> False validateIP(\\"192.168.1.1.1\\") -> False validateIP(\\" 192.168.1.1 \\") -> False","solution":"def validateIP(ip): Checks if the input string is a valid IPv4 address. # Check if only digits and dots are in the string if not all(ch.isdigit() or ch == \'.\' for ch in ip): return False # Split the IP by dots parts = ip.split(\'.\') # There should be exactly four parts if len(parts) != 4: return False for part in parts: # Each part should be a number between 0 and 255 and can\'t have leading zeros if not part.isdigit() or not 0 <= int(part) <= 255 or (len(part) > 1 and part[0] == \'0\'): return False return True"},{"question":"# Find Unique Substrings You are given a string `S` of lowercase alphabets. Your task is to find the number of unique substrings of a given length `L` from the string. A substring is a contiguous sequence of characters in the string. # Input - A string `S` with 1 <= length(S) <= 1000 - An integer `L` with 1 <= L <= length(S) # Output Return the number of unique substrings of length `L`. # Examples ``` S = \\"ababc\\", L = 2 unique_substrings(S, L) returns 3. (\\"ab\\", \\"ba\\", \\"bc\\") S = \\"aaaa\\", L = 1 unique_substrings(S, L) returns 1. (\\"a\\") S = \\"abcde\\", L = 3 unique_substrings(S, L) returns 3. (\\"abc\\", \\"bcd\\", \\"cde\\") ``` # Note - If `L` is greater than the length of the string `S`, the function should return 0. - The substrings should be treated as distinct sequences, even if they overlap within the original string.","solution":"def unique_substrings(S, L): Returns the number of unique substrings of length L from string S. if L > len(S): return 0 substrings = set() for i in range(len(S) - L + 1): substrings.add(S[i:i+L]) return len(substrings)"},{"question":"Story You have been hired by a company that processes data streams for real-time stock market analysis. They receive a continuous sequence of stock prices and need to be able to calculate the average price for the last N prices at any given point in time. Your job is to implement this functionality efficiently. Task You are provided with a sequence of stock prices and a number N. You need to write a function that calculates the average price of the last N prices every time a new price is added. The challenge is to optimize the data processing to handle real-time updates efficiently. The function `calculate_moving_average(prices, N)` must: - Take an input list `prices` which is the sequence of stock prices. - Take an integer `N` which is the number of most recent prices to consider for calculating the moving average. - Return a list of moving averages for each point in time when a new price is added. If there are fewer than N prices available when calculating the average, use all the prices available up to that point. # Examples ```python calculate_moving_average([10, 20, 30, 40, 50], 3) # Output: [10, 15, 20, 30, 40] calculate_moving_average([5, 10, 15], 5) # Output: [5, 7.5, 10] calculate_moving_average([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) # Output: [1.0, 1.5, 2.0, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5] ``` In the first example, the moving average is calculated over the last 3 prices at each step. For instance: - The first average is just [10], so 10. - The second average is (10 + 20) / 2, so 15. - The third average is (10 + 20 + 30) / 3, so 20. - The fourth average is (20 + 30 + 40) / 3, so 30. - The fifth average is (30 + 40 + 50) / 3, so 40. # Constraints - All prices are non-negative integers (0 ≤ price ≤ 10^6). - 1 ≤ N ≤ 10^4 - 1 ≤ number of prices ≤ 10^6 Optimize your implementation to handle large input sizes efficiently. --- My other katas If you enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)! :-)","solution":"from collections import deque def calculate_moving_average(prices, N): n = len(prices) if n == 0: return [] moving_averages = [] window = deque() window_sum = 0 for i in range(n): window.append(prices[i]) window_sum += prices[i] if len(window) > N: removed = window.popleft() window_sum -= removed moving_averages.append(window_sum / len(window)) return moving_averages"},{"question":"A zig-zag array is an array that satisfies the following condition for all values of `i`: If both `i > 0` and `i < array.length - 1`: * Either `array[i-1] < array[i] > array[i+1]` * Or `array[i-1] > array[i] < array[i+1]` # Examples: ``` [1, 3, 2, 4, 3] => true (as 1<3>2, 3>2<4, 2<4>3) [1, 3, 2, 2, 3] => false (as 2, 2 are not strictly less or greater than their immediate neighbours) ``` Write a function named `isZigZagArray`/`IsZigZagArray`/`is_zig_zag_array()` that returns `true` if its argument is a zig-zag array and returns `false` if it is not.","solution":"def is_zig_zag_array(arr): if len(arr) < 3: return True # Smaller arrays are trivially zig-zag for i in range(1, len(arr) - 1): if not (arr[i-1] < arr[i] > arr[i+1] or arr[i-1] > arr[i] < arr[i+1]): return False return True"},{"question":"You are given a matrix represented by a list of lists, where each sublist represents a row. Write a function that rotates this matrix 90 degrees clockwise. For example, given the following matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The function should return: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Note that the dimensions of the matrix are not necessarily square. The matrix could be rectangular. **Constraints:** - Do not use any built-in functions or libraries for the matrix rotation. - Optimize the code to handle large matrices efficiently. - The input matrix will have at least one row and one column. Write a function `rotate_matrix(matrix)` that takes a matrix as input and returns the rotated matrix.","solution":"def rotate_matrix(matrix): Rotates the given matrix 90 degrees clockwise. Args: matrix (list of lists): The input matrix. Returns: list of lists: The rotated matrix. # Get the number of rows and columns num_rows = len(matrix) num_cols = len(matrix[0]) # Initialize the rotated matrix rotated_matrix = [[0] * num_rows for _ in range(num_cols)] # Fill the rotated matrix with values from the original matrix for r in range(num_rows): for c in range(num_cols): rotated_matrix[c][num_rows - 1 - r] = matrix[r][c] return rotated_matrix"},{"question":"You have been hired to create a simple inventory management system. The system should allow you to add items, remove items, and check the current inventory. Each item has a unique identifier code, a name, and a quantity. Write a class Inventory that supports the following operations: - `add_item(code: str, name: str, quantity: int)`: Adds the specified quantity of an item with the given code and name to the inventory. If the item already exists, simply increase the existing quantity by the specified amount. - `remove_item(code: str, quantity: int)`: Removes the specified quantity of an item with the given code from the inventory. If the quantity to be removed is more than the current quantity, remove all instances of that item. If the item does not exist, raise an error. - `get_inventory()`: Returns a list of tuples containing the code, name, and quantity of each item in the inventory, sorted by code in ascending order. Example usage: ```python inventory = Inventory() inventory.add_item(\\"A001\\", \\"Apple\\", 10) inventory.add_item(\\"B002\\", \\"Banana\\", 5) inventory.add_item(\\"A001\\", \\"Apple\\", 5) assert inventory.get_inventory() == [(\\"A001\\", \\"Apple\\", 15), (\\"B002\\", \\"Banana\\", 5)] inventory.remove_item(\\"A001\\", 3) assert inventory.get_inventory() == [(\\"A001\\", \\"Apple\\", 12), (\\"B002\\", \\"Banana\\", 5)] inventory.remove_item(\\"B002\\", 6) assert inventory.get_inventory() == [(\\"A001\\", \\"Apple\\", 12)] ``` Ensure to handle edge cases such as attempting to remove an item not in the inventory or removing more quantity than available for an item.","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, code: str, name: str, quantity: int): if code in self.items: self.items[code][\'quantity\'] += quantity else: self.items[code] = {\'name\': name, \'quantity\': quantity} def remove_item(self, code: str, quantity: int): if code not in self.items: raise ValueError(f\\"Item with code {code} does not exist.\\") if self.items[code][\'quantity\'] <= quantity: del self.items[code] else: self.items[code][\'quantity\'] -= quantity def get_inventory(self): return sorted( [(code, item[\'name\'], item[\'quantity\']) for code, item in self.items.items()], key=lambda x: x[0] )"},{"question":"You are given a binary matrix of size N x M (N rows and M columns) where each cell contains either a 0 or a 1. Your task is to find the largest rectangular sub-matrix that contains only 1s and return its area. ---Input--- The first line will contain two integers N and M denoting the number of rows and columns in the matrix respectively. The next N lines will each contain M integers (0 or 1) denoting the matrix. ---Output--- An integer denoting the area of the largest rectangular sub-matrix that contains only 1s. ---Constraints--- 1 <= N, M <= 1000 ---Example--- Input: 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output: 6 Explanation: The largest rectangular sub-matrix with all 1s is of size 2 x 3. Therefore, the area is 6.","solution":"def maximalRectangle(matrix): Given a binary matrix, finds the largest rectangular sub-matrix that contains only 1s and returns its area. Args: matrix: List of List of integers (0s and 1s) Returns: int: The area of the largest rectangular sub-matrix containing only 1s if not matrix: return 0 def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * width) stack.append(i) heights.pop() return max_area max_area = 0 n = len(matrix) m = len(matrix[0]) heights = [0] * m for i in range(n): for j in range(m): if matrix[i][j] == 0: heights[j] = 0 else: heights[j] += 1 max_area = max(max_area, largestRectangleArea(heights)) return max_area"},{"question":"Create a function that generates a list of Fibonacci numbers up to the nth term. The Fibonacci sequence is a series of numbers where the next number is found by adding up the two numbers before it. The sequence starts with 0 and 1. So, the first ten terms of this sequence will be: ``` 0, 1, 1, 2, 3, 5, 8, 13, 21, 34 ``` The function should take an integer n and return a list of the first n Fibonacci numbers. Example: ```python fibonacci(5) # should return [0, 1, 1, 2, 3] fibonacci(10) # should return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] ``` The function should handle n = 0 and n = 1 appropriately, returning an empty list and a list with just 0, respectively.","solution":"def fibonacci(n): Returns a list of the first n Fibonacci numbers. if n == 0: return [] elif n == 1: return [0] sequence = [0, 1] for i in range(2, n): next_value = sequence[-1] + sequence[-2] sequence.append(next_value) return sequence"},{"question":"Write a function called `flattenArray` that takes a nested array of integers and returns a single, flat array containing all the integers in the same order. The function should be able to handle arrays nested to any depth. For example: ```python flattenArray([1, [2, [3, [4, 5]], 6], 7, [8, 9]]) ``` should return: ```python [1, 2, 3, 4, 5, 6, 7, 8, 9] ``` Your implementation should not use any built-in methods like `Array.prototype.flat()` or third-party libraries that provide such functionality. Focus on implementing the flattening logic yourself.","solution":"def flattenArray(nested_list): Flattens a nested list of integers. Parameters: nested_list (list): A nested list of integers Returns: list: A flat list of integers flattened = [] def _flatten_helper(sublist): for element in sublist: if isinstance(element, list): _flatten_helper(element) else: flattened.append(element) _flatten_helper(nested_list) return flattened"},{"question":"A palindrome is a string that reads the same forward and backward, such as \\"madam\\" or \\"racecar\\". Your task is to write a function that takes a given string and returns the shortest palindrome that can be created by appending characters at the end of the string. For example, for the string \\"abca\\", appending \\"cba\\" makes the string a palindrome, resulting in \\"abcacba\\". -----Input:----- A single line containing a string S of lowercase English letters. -----Output:----- A single line containing the shortest palindrome that can be created by appending characters at the end of the input string. -----Constraints:----- - S consists of only lowercase English letters - S has at most 1000 characters -----Sample input----- abca -----Sample output----- abcacba","solution":"def shortest_palindrome(s): Returns the shortest palindrome that can be created by appending characters at the end of the input string. n = len(s) for i in range(n): if s[i:] == s[i:][::-1]: return s + s[:i][::-1] return s # Example execution: The output should be \\"abcacba\\" for the input \\"abca\\" # print(shortest_palindrome(\\"abca\\"))"},{"question":"Write a function that takes a single string as input, which represents an arithmetic expression containing only non-negative integers and the operators \'+\', \'-\', and \'*\'. The function should parse the string and compute the result of the expression following the standard operator precedence rules (i.e., multiplication before addition and subtraction). The input string will contain no spaces, and it will be a valid expression. For example: - `\\"3+2*2\\"` should return `7` (since `2*2` is evaluated first to give `4`, then `3+4` results in `7`). - `\\"3-2+2\\"` should return `3` (since addition and subtraction are left-associative, it evaluates as `(3-2)+2`). - `\\"2*3*4\\"` should return `24` (since `2*3` is `6`, and then `6*4` is `24`). You should not use the `eval` function in your implementation.","solution":"def evaluate_expression(expression): Evaluates a given arithmetic expression containing non-negative integers and the operators \'+\', \'-\', and \'*\'. def apply_operator(operands, operator): right = operands.pop() left = operands.pop() if operator == \'+\': operands.append(left + right) elif operator == \'-\': operands.append(left - right) elif operator == \'*\': operands.append(left * right) operands = [] operators = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 operands.append(num) i -= 1 else: while (operators and operators[-1] in [\'*\', \'+\', \'-\'] and (expression[i] in [\'+\', \'-\'] or operators[-1] == \'*\')): apply_operator(operands, operators.pop()) operators.append(expression[i]) i += 1 while operators: apply_operator(operands, operators.pop()) return operands[0]"},{"question":"=====Problem Statement===== Consider an array of integers. Write a Python function that calculates the sum of all the elements in the array and returns the result. For example, if the input array is [1, 2, 3, 4, 5], the sum is 1 + 2 + 3 + 4 + 5 = 15. =====Function Signature===== ```python def sum_array(arr: List[int]) -> int: ``` =====Input Format===== A single line containing a list of integers separated by spaces. - The list will contain at least one integer. - Each integer in the list will be between -1000 and 1000. =====Output Format===== Return an integer which is the sum of all the elements in the list. =====Sample Input===== [1, 2, 3, 4, 5] =====Sample Output===== 15","solution":"from typing import List def sum_array(arr: List[int]) -> int: Returns the sum of all integers in the given array. Parameters: arr (List[int]): A list of integers. Returns: int: The sum of all integers in the list. return sum(arr)"},{"question":"John loves puzzles and recently he came across an interesting one. There is a sequence of parentheses consisting of characters \'(\' and \')\'. John wants to know the length of the longest substring of balanced parentheses. A substring is balanced if every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. Given a string consisting of \'(\' and \')\', John needs your help to find the length of the longest balanced substring. Your task is to write a function that takes a parentheses sequence as input and returns the length of the longest balanced substring. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a string consisting of characters \'(\' and \')\'. The length of each string is at most 10^5. The sum of the lengths of the strings over all test cases does not exceed 10^5. -----Output----- For each test case, print one integer — the length of the longest balanced substring of parentheses. -----Example----- Input: 2 (()()) )()())() Output: 6 4","solution":"def find_longest_balanced_substring(parentheses): Returns the length of the longest balanced substring of parentheses. max_len = 0 stack = [-1] for i, char in enumerate(parentheses): if char == \'(\': stack.append(i) else: stack.pop() if stack: max_len = max(max_len, i - stack[-1]) else: stack.append(i) return max_len def process_test_cases(test_cases): results = [] for parentheses in test_cases: results.append(find_longest_balanced_substring(parentheses)) return results"},{"question":"You are given an array of N integers. Your task is to find and return the length of the longest contiguous subarray where all the elements are distinct. -----Input----- The first line contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line contains an integer N denoting the size of the array. The second line contains N space-separated integers representing the elements of the array. -----Output----- For each test case, output a single line containing the length of the longest contiguous subarray with all distinct elements. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ array element ≤ 10^9 -----Example----- Input 2 5 1 2 3 2 1 7 1 2 3 4 5 6 7 Output 3 7 -----Explanation----- Test Case 1: The longest contiguous subarray with all distinct elements is [1, 2, 3] with length 3. Test Case 2: All elements are unique, so the longest subarray has a length of 7.","solution":"def longest_distinct_subarray_length(N, array): Returns the length of the longest contiguous subarray with all distinct elements. Parameters: N (int): Size of the array array (list of int): The array of integers Returns: int: Length of the longest contiguous subarray with all distinct elements max_length = 0 start = 0 last_seen = {} for end in range(N): if array[end] in last_seen and last_seen[array[end]] >= start: start = last_seen[array[end]] + 1 last_seen[array[end]] = end max_length = max(max_length, end - start + 1) return max_length def process_test_cases(test_cases): Processes multiple test cases and returns the results. Parameters: test_cases (list of tuples): Each tuple contains (N, array) Returns: list of int: List of results for each test case results = [] for N, array in test_cases: results.append(longest_distinct_subarray_length(N, array)) return results"},{"question":"You are given an array of integers `A`. Determine whether we can make all elements in the array the same by performing the operation of incrementing or decrementing any element by 1 any number of times. If it is possible, find the minimum required number of operations. -----Constraints----- - 1 ≤ |A| ≤ 10^5 - -10^9 ≤ A[i] ≤ 10^9 for all 1 ≤ i ≤ |A| -----Input----- Input is given from Standard Input in the following format: ``` N A_1 A_2 ... A_N ``` -----Output----- If it is possible to make all elements in the array the same, print the minimum required number of operations. Otherwise, print -1. -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 6 We can make all elements the same by the following operations: - Increment the 1st element 4 times to become 5. - Increment the 2nd element 3 times to become 5. - Increment the 3rd element 2 times to become 5. - Increment the 4th element 1 time to become 5.","solution":"def min_operations_to_make_equal(N, A): Determines the minimum number of operations to make all elements in the array equal by incrementing or decrementing any element by 1. Parameters: N (int): The number of elements in the array. A (list of int): The array of integers. Returns: int: The minimum number of operations if possible or -1 if not possible. A.sort() median = A[N // 2] return sum(abs(x - median) for x in A)"},{"question":"You are given a string s and several queries. Each query is a pair of indices [left, right] representing a substring of s. For each query, determine if the substring can be turned into a palindrome by rearranging its characters. Example 1: Input: s = \\"abbaab\\" queries = [[0, 3], [3, 5], [1, 4]] Output: [True, True, True] Explanation: The substrings are \\"abba\\", \\"aab\\", and \\"bbaa\\". \\"abba\\" can be rearranged to \\"abba\\" (a palindrome), \\"aab\\" can be rearranged to \\"aba\\" (a palindrome), and \\"bbaa\\" can be rearranged to \\"baab\\" (a palindrome). Example 2: Input: s = \\"abcdef\\" queries = [[0, 1], [1, 3], [2, 5]] Output: [False, False, False] Explanation: The substrings are \\"ab\\", \\"bc\\", and \\"cdef\\". None of these can be rearranged to form a palindrome. Example 3: Input: s = \\"aabbcc\\" queries = [[0, 5], [1, 3], [2, 4]] Output: [True, True, True] Explanation: The substrings are \\"aabbcc\\", \\"abb\\", and \\"bbc\\". \\"aabbcc\\" can be rearranged to \\"abccba\\" (a palindrome), \\"abb\\" can be rearranged to \\"bab\\" (a palindrome), and \\"bbc\\" can be rearranged to \\"bcb\\" (a palindrome). Note: - The length of s will be at most 10000. - The number of queries will be at most 10000. - Each query will have 0 <= left <= right < length of s.","solution":"from collections import Counter def can_form_palindrome(substring): Determine if the given substring can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one character has an odd count. count = Counter(substring) odd_count = sum(1 for c in count.values() if c % 2 != 0) return odd_count <= 1 def is_palindrome_possible(s, queries): For each query, determine if the corresponding substring can be rearranged to form a palindrome. results = [] for left, right in queries: substring = s[left:right+1] results.append(can_form_palindrome(substring)) return results"},{"question":"You are given a string S of length N consisting of uppercase English letters. You are allowed to make several operations with it. In one operation, you can select any substring of the string S and reverse it. Your task is to determine whether or not it is possible to make the string S a palindrome after performing zero or more operations. -----Input----- The first line of the input contains a single integer T, the number of test cases. T test cases follow. The first line of each test case contains a single integer N, the length of the string S. The next line contains the string S. -----Output----- For each test case output a single line containing the answer for the corresponding test case. It should be YES if it is possible to make the string S a palindrome and NO otherwise. -----Constraints----- 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 -----Example----- Input: 3 3 ABA 4 ABCD 5 MADAM Output: YES NO YES -----Explanation----- Case 1. Here the string S is already a palindrome, so no operation is needed. Hence, the output is YES. Case 2. Here the string S is ABCD, which cannot be rearranged to form a palindrome, even after reversing any substring multiple times. Hence, the output is NO. Case 3. Here the string S is already a palindrome, so no operation is needed. Hence, the output is YES.","solution":"def can_be_palindrome(S): Determine if the string S can be reorganized to form a palindrome. :param S: The input string of uppercase English letters :return: \\"YES\\" if it can be rearranged to be a palindrome, otherwise \\"NO\\" from collections import Counter # Count the frequency of each character freq = Counter(S) # To form a palindrome, at most one character can have an odd count odd_count = sum(1 for count in freq.values() if count % 2 != 0) # If there\'s more than one character with an odd frequency, return \\"NO\\" return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_test_cases(test_cases): Process multiple test cases and return the results. :param test_cases: List of tuples containing (N, S) for each test case :return: List of results for each test case, \\"YES\\" or \\"NO\\" results = [] for N, S in test_cases: results.append(can_be_palindrome(S)) return results"},{"question":"You are given an N×M grid. Each cell in the grid is either empty (denoted by \'.\') or contains an obstacle (denoted by \'#\'). Your task is to find the shortest path from the top-left corner of the grid (0, 0) to the bottom-right corner of the grid (N-1, M-1). You can move in four possible directions: up, down, left, and right. You cannot move through cells containing obstacles. If there is no valid path from the start to the end, return -1. -----Input----- The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and M denoting the number of rows and columns in the grid. The next N lines each contain M characters, where the j-th character of the i-th line represents the cell at (i, j) in the grid. -----Output----- For each test case, output a single integer: the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, output -1. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 1000 -----Subtasks----- Subtask 1: (20 points) - 1 ≤ N, M ≤ 20 Subtask 2: (80 points) - Original constraints -----Example----- Input: 2 3 3 . . # . # . . . . 2 2 . # # . Output: 5 -1 -----Explanation----- Example case 1. The shortest path from the top-left to the bottom-right is (0, 0) → (0, 1) → (1, 1) → (2, 1) → (2, 2). Example case 2. There is no valid path from the top-left to bottom-right.","solution":"from collections import deque def shortest_path(grid): rows, cols = len(grid), len(grid[0]) if grid[0][0] == \'#\' or grid[rows-1][cols-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == rows-1 and c == cols-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr][nc] == \'.\': visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1 def process_test_cases(test_cases): results = [] for grid in test_cases: result = shortest_path(grid) results.append(result) return results"},{"question":"You are given an integer `n`. Write a function that returns the number of unique ways to climb a staircase of `n` steps if you can only take steps of size 1, 2, or 3 at a time. For example, for `n = 3`, the unique ways are: - 1+1+1 - 1+2 - 2+1 - 3 Thus, the result should be `4`. `1 <= n <= 1000`","solution":"def climb_stairs(n): Returns the number of unique ways to climb a staircase of n steps if you can only take steps of size 1, 2, or 3 at a time. # Base cases if n == 0: return 1 elif n == 1: return 1 elif n == 2: return 2 # Dynamic programming array to store the number of ways to reach each step dp = [0] * (n + 1) # Initial conditions dp[0] = 1 # 1 way to stay at the ground (do nothing) dp[1] = 1 # 1 way to reach the first step (1 step) dp[2] = 2 # 2 ways to reach the second step (1+1, 2) # Calculate the number of ways for each step from 3 to n for i in range(3, n + 1): dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] return dp[n]"},{"question":"You are building a software to manage warehouse inventories. The warehouse is represented as a 2D grid with dimensions MxN. Each cell in the grid represents a section of the warehouse, and it can either be empty or contain a stack of crates. You are provided with the initial state of the warehouse grid, and several operations to modify the state of the grid. The operations can be of two types: 1. ADD x y k: Add k crates to the stack at position (x, y). 2. REMOVE x y k: Remove k crates from the stack at position (x, y). If there are fewer than k crates at (x, y), remove all crates from that stack. Write a program that processes a series of operations on the warehouse grid and outputs the final state of the grid, with each cell showing the number of crates remaining in that cell. -----Input----- - The first line of input contains two integers M and N (1 ≤ M, N ≤ 100), representing the dimensions of the warehouse grid. - The next M lines describe the initial state of the grid, each containing N integers where the j-th integer represents the number of crates in the cell (i, j) (0 ≤ crate count ≤ 10^3). - The next line contains an integer Q (1 ≤ Q ≤ 1,000), the number of operations. - Each of the next Q lines contains an operation in one of the formats described above. -----Output----- - Output the final state of the warehouse grid. The output should contain M lines, each containing N integers separated by spaces, representing the number of crates in each cell after processing all operations. -----Example Input----- 3 3 1 0 3 4 5 6 7 8 9 4 ADD 0 2 2 REMOVE 1 1 3 REMOVE 2 2 9 ADD 1 0 5 -----Example Output----- 1 0 5 9 2 6 7 8 0 Note: For the given example, after processing the operations: 1. ADD 0 2 2 → (0, 2) now has 3 + 2 = 5 crates. 2. REMOVE 1 1 3 → (1, 1) now has 5 - 3 = 2 crates. 3. REMOVE 2 2 9 → (2, 2) now has 9 - 9 = 0 crates. 4. ADD 1 0 5 → (1, 0) now has 4 + 5 = 9 crates.","solution":"def process_warehouse_operations(M, N, initial_grid, operations): for operation in operations: op, x, y, k = operation.split() x, y, k = int(x), int(y), int(k) if op == \\"ADD\\": initial_grid[x][y] += k elif op == \\"REMOVE\\": initial_grid[x][y] = max(0, initial_grid[x][y] - k) return initial_grid"},{"question":"# Inventory Management A warehouse maintains a record of items in a list, each represented as a dictionary object. Each dictionary contains the following information: - `id`: Unique identifier for the item (string) - `name`: Name of the item (string) - `quantity`: Number of units of the item in stock (integer) - `price`: Price per unit (float) The warehouse provides several operations to manage and query the inventory. --- Operations 1. **Add Item** Add a new item to the inventory. If an item with the same `id` already exists, update its `quantity` and `price`. **Input** ```python add_item(id: str, name: str, quantity: int, price: float) ``` **Output** ```python None ``` 2. **Remove Item** Remove an item from the inventory based on its `id`. If the item does not exist, do nothing. **Input** ```python remove_item(id: str) ``` **Output** ```python None ``` 3. **Query Item** Retrieve the information of an item based on its `id`. If the item does not exist, return `None`. **Input** ```python query_item(id: str) -> dict ``` **Output** ```python {\\"id\\": str, \\"name\\": str, \\"quantity\\": int, \\"price\\": float} ``` 4. **Total Value** Calculate the total value of the inventory. The total value is the sum of the value of all items, where the value of each item is defined as `quantity * price`. **Input** ```python total_value() -> float ``` **Output** ```python total_value: float ``` --- Kata Task Implement the inventory management system with the aforementioned operations. Example ```python # Initial state inventory = [] add_item(\\"001\\", \\"Widget A\\", 10, 5.0) add_item(\\"002\\", \\"Widget B\\", 20, 3.0) add_item(\\"003\\", \\"Widget C\\", 5, 12.0) # After adding items inventory -> [ {\\"id\\": \\"001\\", \\"name\\": \\"Widget A\\", \\"quantity\\": 10, \\"price\\": 5.0}, {\\"id\\": \\"002\\", \\"name\\": \\"Widget B\\", \\"quantity\\": 20, \\"price\\": 3.0}, {\\"id\\": \\"003\\", \\"name\\": \\"Widget C\\", \\"quantity\\": 5, \\"price\\": 12.0} ] # Query item \\"002\\" inventory.query_item(\\"002\\") -> {\\"id\\": \\"002\\", \\"name\\": \\"Widget B\\", \\"quantity\\": 20, \\"price\\": 3.0} # Remove item \\"003\\" remove_item(\\"003\\") # After removal inventory -> [ {\\"id\\": \\"001\\", \\"name\\": \\"Widget A\\", \\"quantity\\": 10, \\"price\\": 5.0}, {\\"id\\": \\"002\\", \\"name\\": \\"Widget B\\", \\"quantity\\": 20, \\"price\\": 3.0} ] # Total value of inventory inventory.total_value() -> 100.0 ``` Notes * Use appropriate data structures to store and manage the inventory. * Consider edge cases, such as adding/updating an existing item or removing/querying a non-existent item. --- Good luck!","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, id: str, name: str, quantity: int, price: float): if id in self.items: self.items[id][\'quantity\'] += quantity self.items[id][\'price\'] = price else: self.items[id] = {\\"id\\": id, \\"name\\": name, \\"quantity\\": quantity, \\"price\\": price} def remove_item(self, id: str): if id in self.items: del self.items[id] def query_item(self, id: str) -> dict: return self.items.get(id, None) def total_value(self) -> float: return sum(item[\'quantity\'] * item[\'price\'] for item in self.items.values())"},{"question":"A company is designing a secure login system that requires users to enter a password according to specific guidelines. Each password must contain at least one uppercase letter, one lowercase letter, and one digit. Additionally, it must be at least 8 characters long and no more than 20 characters long. Write a function to evaluate whether a given password meets these requirements. Your function should process multiple test cases and return ‘Valid’ for each valid password and ‘Invalid’ for each invalid password. -----Input----- Input begins with a single integer T, denoting the number of test cases. After that, T lines follow each containing a single string P, representing the password. You can assume that 1 <= T <= 500 and 1 <= |P| <= 100. -----Output----- Output one line per test case, either \'Valid\' or \'Invalid\' based on whether the password meets the described requirements. -----Example----- Input: 4 Password123 123 abcdEfgh A1b2Cdef Output: Valid Invalid Invalid Valid Description: In the first case, \\"Password123\\" meets all requirements: it is 12 characters long, contains uppercase letters, lowercase letters, and digits. In the second case, \\"123\\" is too short and contains only digits, so it is invalid. In the third case, \\"abcdEfgh\\" lacks digits. In the fourth case, \\"A1b2Cdef\\" meets all the criteria, so it is valid.","solution":"def evaluate_passwords(T, passwords): Evaluate whether a list of passwords meet the specified requirements. Requirements: - At least one uppercase letter - At least one lowercase letter - At least one digit - At least 8 characters long and no more than 20 characters long :param T: int - Number of test cases :param passwords: list of strings - List of passwords to evaluate :return: list of strings - Each string is \'Valid\' or \'Invalid\' based on the evaluation results = [] for password in passwords: if len(password) < 8 or len(password) > 20: results.append(\'Invalid\') continue has_upper = any(char.isupper() for char in password) has_lower = any(char.islower() for char in password) has_digit = any(char.isdigit() for char in password) if has_upper and has_lower and has_digit: results.append(\'Valid\') else: results.append(\'Invalid\') return results"},{"question":"Write a function named `flatten_array()` that takes a nested list of integers (a list that can contain integers or other lists) and returns a new list with all the integers in a single, flat list. For instance, given `[[1, 2], [3, [4, 5]]]`, the function should return `[1, 2, 3, 4, 5]`.","solution":"def flatten_array(nested_list): Flattens a nested list of integers into a single, flat list of integers. :param nested_list: List of integers or other lists :return: A single flat list of integers flat_list = [] def flatten(sublist): for element in sublist: if isinstance(element, list): flatten(element) else: flat_list.append(element) flatten(nested_list) return flat_list"},{"question":"Yoda, the Jedi Master, is training a group of young Padawans to enhance their skills in using the Force. One of the crucial exercises is to understand and work with patterns and sequences in the Force. Yoda presents a challenge to his Padawans: given a sequence of integers, determine the length of the longest subsequence which forms a palindrome. Yoda emphasizes that the Padawans should use the Force to optimize their solution, ensuring it runs efficiently even for larger sequences. -----Input----- The first line of input contains an integer T, indicating the number of test cases. The first line of each test case contains an integer N, which represents the length of the sequence. The second line of each test case contains N space-separated integers, representing the sequence. -----Output----- For each test case, print a single line containing the length of the longest palindromic subsequence in the given sequence. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - -1000 ≤ sequence[i] ≤ 1000 -----Example----- Input: 2 7 1 2 3 4 3 2 1 5 5 3 4 3 5 Output: 7 5","solution":"def longest_palindromic_subsequence(seq): N = len(seq) dp = [[0] * N for _ in range(N)] for i in range(N): dp[i][i] = 1 for cl in range(2, N + 1): for i in range(N - cl + 1): j = i + cl - 1 if seq[i] == seq[j] and cl == 2: dp[i][j] = 2 elif seq[i] == seq[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][N - 1] def solve_palindromic_subsequence(test_cases): results = [] for seq in test_cases: results.append(longest_palindromic_subsequence(seq)) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') index = 0 T = int(input_lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) index += 1 sequence = list(map(int, input_lines[index].split())) index += 1 test_cases.append(sequence) return test_cases"},{"question":"Write a function that takes a list of integers and an integer `k`, and returns a list of the top `k` most frequent elements in the list. If there are ties (elements with the same frequency), return the elements in decreasing order. If two or more elements have the same frequency and value, maintain their order of first occurrence in the original list. Function signature: `def top_k_frequent_elements(nums: List[int], k: int) -> List[int]:` **Examples:** ``` top_k_frequent_elements([1,1,1,2,2,3], 2) -> [1, 2] top_k_frequent_elements([1,1,2,2,3,3,4], 3) -> [1, 2, 3] top_k_frequent_elements([1,2,2,3,3,3], 2) -> [3, 2] top_k_frequent_elements([4,4,4,5,5,6,6,6,6,7], 1) -> [6] ```","solution":"from collections import Counter from typing import List def top_k_frequent_elements(nums: List[int], k: int) -> List[int]: Returns the top k most frequent elements in the list. In case of ties, returns elements in decreasing order, and maintain order of first occurrence in case of same frequency and value. frequency = Counter(nums) sorted_elements = sorted(frequency, key=lambda x: (-frequency[x], nums.index(x))) return sorted_elements[:k]"},{"question":"puzzle: Create a function that generates a \\"zig-zag\\" pattern from a given string and an integer representing the number of rows. In this pattern, characters are written out in a zig-zag fashion on separate lines and then concatenated together in order. For example, given the string `\\"PAYPALISHIRING\\"` and the number of rows as `3`, the pattern would be: ``` P A H N A P L S I I G Y I R ``` The output for this input would be `\\"PAHNAPLSIIGYIR\\"`. Write a function to achieve this zig-zag pattern given a string and number of rows. The function should take in two parameters: - A string `s` which is the string that needs to be reformatted. - An integer `numRows` which indicates the number of rows for the zig-zag pattern. Return a string that represents the zig-zag pattern read line by line. Note: - If `numRows` is 1, the function should return the original string as there is no zig-zag pattern.","solution":"def convert(s, numRows): Converts a string to a zig-zag pattern with the given number of rows. # Edge case where zig-zag pattern is not needed if numRows == 1 or numRows >= len(s): return s rows = [\'\'] * min(numRows, len(s)) cur_row = 0 going_down = False for char in s: rows[cur_row] += char if cur_row == 0 or cur_row == numRows - 1: going_down = not going_down cur_row += 1 if going_down else -1 return \'\'.join(rows)"},{"question":"# Task You are given a string `s` consisting of lowercase alphabetic characters. You need to find the longest substring of `s` that contains no more than two distinct characters. # Example For `s = \\"eceba\\"`, the output should be `3`. The longest substring with at most two distinct characters is `\\"ece\\"`, which has length 3. For `s = \\"ccaabbb\\"`, the output should be `5`. The longest substring with no more than two distinct characters is `\\"aabbb\\"`, which has length 5. # Input/Output - `[input]` string `s` Constraints: `1 ≤ s.length ≤ 10000` - `[output]` an integer","solution":"def longest_substring_with_two_distinct(s): Returns the length of the longest substring of s that contains no more than two distinct characters. if not s: return 0 start, max_len = 0, 0 char_count = {} for end in range(len(s)): char_count[s[end]] = char_count.get(s[end], 0) + 1 while len(char_count) > 2: char_count[s[start]] -= 1 if char_count[s[start]] == 0: del char_count[s[start]] start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"A major technology company has a network of data centers. The data centers are represented by nodes in a graph, and there are directed links connecting some pairs of data centers, represented by edges in the graph. The company wants to optimize the data routing within the network during specific time frames. Given a directed graph with NN nodes and MM edges, you need to answer QQ queries. Each query provides a starting node ss and an ending node tt. Your task is to determine the total number of distinct paths (without revisiting any node) from the starting node ss to the ending node tt. -----Input----- - The first line of the input contains a single integer TT denoting the number of test cases. The description of TT test cases follows. - The first line of each test case contains two space-separated integers NN and MM. - Each of the next MM lines contains two space-separated integers uu and vv, indicating a directed edge from node uu to node vv. - The next line contains a single integer QQ. - Each of the next QQ lines contains two space-separated integers ss and tt representing a query with the starting node ss and the ending node tt. -----Output----- For each query in each test case, print a single line containing the number of distinct paths from ss to tt. -----Constraints----- - 1≤T≤201 le T le 20 - 1≤N,M,Q≤5001 le N, M, Q le 500 - 1≤u,v,s,t≤N1 le u, v, s, t le N for all edges and queries - the graph may contain cycles -----Example Input----- 2 4 5 1 2 1 3 3 2 2 4 3 4 2 1 4 3 4 3 3 1 2 2 3 3 1 1 1 3 -----Example Output----- 3 2 1","solution":"from collections import defaultdict, deque def find_all_paths(N, graph, start, end): visited = set() queue = deque([(start, [])]) paths_count = 0 while queue: node, path = queue.popleft() if node in visited: continue visited.add(node) path = path + [node] if node == end: paths_count += 1 else: for neighbor in graph[node]: if neighbor not in path: queue.append((neighbor, path)) visited.remove(node) return paths_count def count_paths(T, test_cases): results = [] for i in range(T): N, M, edges, Q, queries = test_cases[i] graph = defaultdict(list) for u, v in edges: graph[u].append(v) case_result = [] for s, t in queries: case_result.append(find_all_paths(N, graph, s, t)) results.extend(case_result) return results # Function to handle input parsing and function calling def process_input(input_data): data = input_data.strip().split(\'n\') index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N, M = map(int, data[index].split()) index += 1 edges = [] for _ in range(M): u, v = map(int, data[index].split()) edges.append((u, v)) index += 1 Q = int(data[index]) index += 1 queries = [] for _ in range(Q): s, t = map(int, data[index].split()) queries.append((s, t)) index += 1 test_cases.append((N, M, edges, Q, queries)) return count_paths(T, test_cases) # Input example input_data = 2 4 5 1 2 1 3 3 2 2 4 3 4 2 1 4 3 4 3 3 1 2 2 3 3 1 1 1 3 results = process_input(input_data) for result in results: print(result)"},{"question":"You are given a list of integers where each element signifies the number of stone piles. Your goal is to determine whether it is possible to rearrange these stone piles into a contiguous sequence starting from 1. If it is possible, return \\"YES\\"; otherwise, return \\"NO\\". A contiguous sequence means that if there are `k` stone piles in the list, they need to form a sequence from `1` to `k` without missing any number in between and without any duplicates. **Input:** - A list of integers representing the number of stone piles. **Output:** - A string \\"YES\\" if it is possible to rearrange the piles into a contiguous sequence from 1 to the length of the list, otherwise \\"NO\\". **Example:** ``` Input: [1, 2, 3, 4, 5] Output: \\"YES\\" Input: [5, 4, 2, 1] Output: \\"NO\\" Input: [1, 3, 2, 5, 4] Output: \\"YES\\" Input: [1, 2, 2, 3, 4] Output: \\"NO\\" ```","solution":"def can_rearrange_to_contiguous_sequence(piles): This function takes a list of integers representing the number of stone piles and returns \'YES\' if it is possible to rearrange them into a contiguous sequence from 1 to the length of the list, otherwise \'NO\'. n = len(piles) expected_set = set(range(1, n + 1)) if set(piles) == expected_set: return \\"YES\\" else: return \\"NO\\""},{"question":"In a mobile app development company, a team is assigned to create a new fitness tracking feature. Each user can record their exercise sessions, which include the type of exercise (like walking, running, cycling, etc.), duration in minutes, and calories burned for each session. The company wants to understand the cumulative data for all users to provide insights and improve the app. Specifically, they want to calculate the total duration and total calories burned for a particular type of exercise across all users. -----Input----- - The first line of input contains an integer u which represents the number of users, where 1 leq u leq 100. - For each user, the first line contains an integer s_i representing the number of sessions that user has recorded, where 1 leq s_i leq 100. - For each session, a string type indicating the type of exercise (a single word containing only lowercase letters), followed by two integers duration (in minutes) and calories burned for the session. - The last line contains a single string query representing the type of exercise for which the company wants to calculate the total duration and total calories burned. -----Output----- - For each case, output the total duration and total calories burned for the queried type of exercise in a single line separated by a space. -----Sample Input----- 3 2 running 30 300 walking 20 110 3 running 40 400 cycling 60 500 walking 15 90 1 walking 30 130 walking -----Sample Output----- 65 330 -----Explanation:----- There are 3 users. - User 1 has 2 sessions: running (30 minutes, 300 calories) and walking (20 minutes, 110 calories). - User 2 has 3 sessions: running (40 minutes, 400 calories), cycling (60 minutes, 500 calories), and walking (15 minutes, 90 calories). - User 3 has 1 session: walking (30 minutes, 130 calories). The query is for \\"walking\\". Summing up the data: - User 1: walking (20 minutes, 110 calories) - User 2: walking (15 minutes, 90 calories) - User 3: walking (30 minutes, 130 calories) Total duration = 20 + 15 + 30 = 65 minutes Total calories = 110 + 90 + 130 = 330 calories","solution":"def calculate_exercise_totals(users_data, query): total_duration = 0 total_calories = 0 for user in users_data: for session in user[\\"sessions\\"]: if session[\\"type\\"] == query: total_duration += session[\\"duration\\"] total_calories += session[\\"calories\\"] return total_duration, total_calories"},{"question":"# Task Given an array of integers, you need to sort the array in such a way that all even numbers are at the beginning of the array followed by odd numbers, while also maintaining the relative order of even and odd numbers. # Example For `arr = [3, 1, 2, 4, 5, 6]` The result should be `[2, 4, 6, 3, 1, 5]`. For `arr = [2, 3, 4, 1, 7, 6, 8]` The result should be `[2, 4, 6, 8, 3, 1, 7]`. # Input/Output - `[input]` integer array `arr` A non-empty array, `1 ≤ arr.length ≤ 1000` `0 ≤ arr[i] ≤ 1000` - `[output]` integer array The array sorted in the described manner.","solution":"def sort_array_by_parity(arr): Sort the array so that all even numbers come before all odd numbers, while maintaining the relative order of even and odd numbers. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"Given a string s and a pattern p, return all the starting indices of the pattern\'s anagrams in the string. Example 1: Input: s = \\"cbaebabacd\\", p = \\"abc\\" Output: [0, 6] Explanation: The substring with the indices 0-2 is \\"cba\\", which is an anagram of \\"abc\\". The substring with the indices 6-8 is \\"bac\\", which is an anagram of \\"abc\\". Example 2: Input: s = \\"abab\\", p = \\"ab\\" Output: [0, 1, 2] Explanation: The substring with the indices 0-1 is \\"ab\\", which is an anagram of \\"ab\\". The substring with the indices 1-2 is \\"ba\\", which is an anagram of \\"ab\\". The substring with the indices 2-3 is \\"ab\\", which is an anagram of \\"ab\\". Note: The order of output does not matter. Use 0-based indexing for the starting indices.","solution":"from collections import Counter def find_anagrams(s, p): Returns all the starting indices of the pattern\'s anagrams in the string s. p_counter = Counter(p) s_counter = Counter() result = [] p_length = len(p) for i in range(len(s)): # Add one more letter on the right side of the window s_counter[s[i]] += 1 # Remove one letter from the left side of the window if the window size exceeds the length of p if i >= p_length: if s_counter[s[i - p_length]] == 1: del s_counter[s[i - p_length]] else: s_counter[s[i - p_length]] -= 1 # Compare counters to check for anagram if s_counter == p_counter: result.append(i - p_length + 1) return result"},{"question":"Write a function that takes a non-negative integer n and returns the nth element of the following sequence: [1, 1, 2, 2, 3, 3, 4, 4, ...]. The sequence starts from 1, and every number appears twice in consecutive positions. # Examples ```python nth_element(0) => 1 nth_element(1) => 1 nth_element(2) => 2 nth_element(3) => 2 nth_element(4) => 3 nth_element(5) => 3 nth_element(6) => 4 nth_element(7) => 4 ``` **Note:** The function should return the appropriate element of the sequence based on the zero-based index n.","solution":"def nth_element(n): Returns the nth element of the sequence [1, 1, 2, 2, 3, 3, 4, 4, ...]. # Since each number appears twice consecutively, the nth element can be derived by: # (n // 2) + 1 return (n // 2) + 1"},{"question":"Write a function called `flip_pancakes` that simulates flipping pancakes on a griddle. You have a list of `n` pancakes stacked on top of each other, each pancake can be oriented either happy side up (+) or grumpy side down (-). Your goal is to make all the pancakes happy side up using a spatula that can flip one or more consecutive pancakes at a time. Input: Your function will receive a single string of characters representing the initial stack of pancakes. Each character is either \'+\' or \'-\'. The leftmost character represents the top pancake and the rightmost character represents the bottom pancake. Output: Your function should return the minimum number of flips required to make all pancakes happy side up. Examples: ```python flip_pancakes(\\"+-\\") # should return 2 flip_pancakes(\\"--+-\\") # should return 3 flip_pancakes(\\"++\\") # should return 0 ``` Additional Details: - All test inputs are valid strings, consisting only of the characters \'+\' and \'-\' and of lengths between 1 and 100 (inclusive). - For each flip, you can select any subset of consecutive pancakes from the stack and flip them, thus changing any \'+\' to \'-\' and any \'-\' to \'+\' in that subset.","solution":"def flip_pancakes(stack): This function calculates the minimum number of flips required to make all pancakes happy side up. Parameters: stack (str): A string representing the stack of pancakes with \'+\' for happy side up and \'-\' for grumpy side down. Returns: int: The minimum number of flips required. flips = 0 # Loop through the stack up to the second last pancake for i in range(len(stack) - 1): # If the current pancake orientation is different from the next, # increment the flip counter. if stack[i] != stack[i + 1]: flips += 1 # If the last pancake is grumpy side down, make a flip. if stack[-1] == \'-\': flips += 1 return flips"},{"question":"A function signature reverse_vowels(s: str) -> str is given that takes a string s as input. The function should return a new string where only the vowels in s are reversed, and other characters remain in their original positions. Vowels are defined as \'a\', \'e\', \'i\', \'o\', \'u\', and their uppercase counterparts. Example 1: Input: \\"hello\\" Output: \\"holle\\" Example 2: Input: \\"leetcode\\" Output: \\"leotcede\\" Example 3: Input: \\"aeiou\\" Output: \\"uoiea\\" Example 4: Input: \\"bcd\\" Output: \\"bcd\\" Notes: - The function should be case-insensitive when recognizing vowels, but the returned string should preserve the original case. - The input string s will have a length of at least 0 and at most 10^4.","solution":"def reverse_vowels(s: str) -> str: Returns a new string where only the vowels in s are reversed, and other characters remain in their original positions. vowels = set(\'aeiouAEIOU\') s = list(s) left, right = 0, len(s) - 1 while left < right: if s[left] in vowels and s[right] in vowels: s[left], s[right] = s[right], s[left] left += 1 right -= 1 elif s[left] not in vowels: left += 1 elif s[right] not in vowels: right -= 1 return \'\'.join(s)"},{"question":"Write a function that takes a nested list of integers and returns a flattened version of the list. Nested lists may contain other nested lists or integers. Here are some examples to illustrate what you need to do: ```python flatten([1, [2, 3], 4, [5, [6, 7]]]) == [1, 2, 3, 4, 5, 6, 7] flatten([[1, 2], [3, [4, 5]], [6]]) == [1, 2, 3, 4, 5, 6] ```","solution":"def flatten(nested_list): Flattens a nested list of integers. flat_list = [] def _flatten(sub_list): for item in sub_list: if isinstance(item, list): _flatten(item) else: flat_list.append(item) _flatten(nested_list) return flat_list"},{"question":"You are given an array that represents a series of buildings in a row where each building is represented by its height. Calculate the area of the largest rectangle that can be formed by any number of contiguous buildings. Each building has a width of `1`. # Example: `largestRectangleArea([2, 1, 5, 6, 2, 3])` will output `10` as the largest rectangle with buildings of heights `5` and `6` forms an area of `5 * 2 = 10`. `largestRectangleArea([2, 4])` will output `4` since the largest rectangle can be either height `2` or `4`, but not combined. Given an array of non-negative integers representing the heights of each building, calculate the maximum area of the largest rectangle that can be formed. # Input: - An array of non-negative integers `heights` with at least one element. # Output: - An integer representing the maximum rectangular area.","solution":"def largestRectangleArea(heights): Calculates the largest rectangle area in the histogram given by heights. :param heights: A list of non-negative integers representing the heights of buildings. :return: An integer representing the max rectangular area. stack = [] max_area = 0 index = 0 while index < len(heights): # If this building is higher than the building at the stack\'s top, push it to the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum) height bar area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) # Now pop the remaining bars from the stack and calculate area while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a function that takes in a list of integers representing the run times (in minutes) of several different movies. The function should return the total number of movies that have a run time longer than 120 minutes. For example: ``` [90, 142, 125, 118, 180, 103] --> 3 ```","solution":"def count_long_movies(run_times): Returns the count of movies that have a run time longer than 120 minutes. Parameters: run_times (list of int): List of integers representing the run times (in minutes) of several different movies. Returns: int: Number of movies with a run time longer than 120 minutes. return sum(1 for time in run_times if time > 120)"},{"question":"Design a class `Fibonacci` that generates numbers in the Fibonacci sequence and allows querying the sum of the sequence up to a given term `n`. The Fibonacci sequence is defined as follows: * The first term is 0 * The second term is 1 * Every subsequent term is the sum of the previous two terms (i.e., `F(n) = F(n-1) + F(n-2)`). # Your task Define a class `Fibonacci` with: 1. A method `next()` to return the next term in the sequence. 2. A method `sum_up_to(n)` that returns the sum of the Fibonacci sequence up to the `n`-th term inclusive. # Examples ```python # Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ... # Initialize the Fibonacci generator fib = Fibonacci() # Generate first five terms fib.next() = 0 fib.next() = 1 fib.next() = 1 fib.next() = 2 fib.next() = 3 # Sum of sequence up to 4th term (0 + 1 + 1 + 2 + 3) fib.sum_up_to(4) = 7 # Generate next term fib.next() = 5 # Sum of sequence up to 6th term (0 + 1 + 1 + 2 + 3 + 5) fib.sum_up_to(6) = 12 ```","solution":"class Fibonacci: def __init__(self): self.sequence = [0, 1] # Initialize with the first two terms of the Fibonacci sequence self.current_index = 0 # Track the current term to be returned by next() def next(self): if self.current_index < len(self.sequence): term = self.sequence[self.current_index] else: term = self.sequence[-1] + self.sequence[-2] self.sequence.append(term) self.current_index += 1 return term def sum_up_to(self, n): # Generate terms up to the n-th term if not already done while len(self.sequence) <= n: self.sequence.append(self.sequence[-1] + self.sequence[-2]) return sum(self.sequence[:n + 1])"},{"question":"Write a function that checks whether a given string is a valid RGB color code. The function should return \\"True\\" if the string is a valid RGB color code and \\"False\\" otherwise. A valid RGB color code is in the format \\"#RRGGBB\\", where each of the pairs (RR, GG, BB) is a two-digit hexadecimal number. It should start with a \'#\' character, followed by exactly six characters which can be digits (0-9) or letters (A-F). Both uppercase and lowercase letters should be considered valid. For example: \\"#00FF8B\\" - valid \\"#00ff8b\\" - valid \\"#123ABC\\" - valid \\"#123abg\\" - not valid (because \'g\' is not a hexadecimal digit) \\"123ABC\\" - not valid (because it doesn’t start with \'#\') \\"#123AB\\" - not valid (because it contains less than six hexadecimal digits) Function signature: ```python def is_valid_rgb(color_code: str) -> bool: pass ```","solution":"import re def is_valid_rgb(color_code: str) -> bool: Checks if the given string is a valid RGB color code. Args: color_code (str): The string to check. Returns: bool: True if the string is a valid RGB color code, False otherwise. # Regular expression pattern for a valid RGB color code pattern = re.compile(r\'^#[0-9A-Fa-f]{6}\') return bool(pattern.match(color_code))"},{"question":"Complete the function that takes an array of strings and returns a single string that is formed by concatenating all the input strings in the array, inserting a hyphen (`-`) between each pair of adjacent strings. If the input array is empty, the function should return an empty string. For example: ``` input = [\\"this\\", \\"is\\", \\"a\\", \\"test\\"] --> \\"this-is-a-test\\" input = [\\"hello\\", \\"world\\"] --> \\"hello-world\\" input = [] --> \\"\\" ```","solution":"def concatenate_with_hyphen(strings): Concatenates all strings in the input array with a hyphen between each pair of adjacent strings. Parameters: strings (list): A list of strings to be concatenated. Returns: str: A single string formed by concatenating the input strings with hyphens. return \'-\'.join(strings)"},{"question":"=====Problem Statement===== A valid three-digit passcode S must fulfill both of the following requirements: 1. S should be a number in the range from 100 to 999 inclusive. 2. S must not contain any duplicate digits. For example: 123 # Here, the passcode is valid. 112 # Here, the passcode is invalid because it contains duplicate digits. 789 # Here, the passcode is valid. Your task is to provide two regular expressions regex_integer_in_range_3 and regex_no_duplicate_digits. Where: regex_integer_in_range_3 should match only integers in the range from 100 to 999 inclusive. regex_no_duplicate_digits should ensure there are no duplicate digits in the given string. Both these regular expressions will be used by the provided code template to check if the input string S is a valid passcode using the following expression: (bool(re.match(regex_integer_in_range_3, S)) and bool(re.match(regex_no_duplicate_digits, S))) =====Input Format===== Locked stub code in the editor reads a single string denoting S from stdin and uses provided expression along with your regular expressions to validate if S is a valid passcode. =====Output Format===== You are not responsible for printing anything to stdout. Locked stub code in the editor does that.","solution":"import re # Define the regular expression pattern for integers in the range from 100 to 999 inclusive regex_integer_in_range_3 = r\\"^(?:100|[1-9][0-9][0-9])\\" # Define the regular expression pattern to ensure there are no duplicate digits regex_no_duplicate_digits = r\\"^(?!.*(.).*1)[0-9]{3}\\""},{"question":"You have been given a string n. Your task is to check whether the string n can be rearranged to form a palindrome. For a string to be rearranged into a palindrome, at most one character can have an odd count, while all other characters must have an even count. -----Input----- The input contains a single integer t (1 le t le 10^4) -- the number of test cases. Each of the next t lines contains a single string n (1 le |n| le 10^5). It is guaranteed that the sum of lengths of all strings does not exceed 10^6. -----Output----- For each test case, print \\"Yes\\" if the string can be rearranged to form a palindrome, otherwise print \\"No\\". -----Example----- Input 3 civic ivicc hello Output Yes Yes No -----Note----- In the first test case, the string \\"civic\\" is already a palindrome. In the second test case, the string \\"ivicc\\" can be rearranged into the palindrome \\"civic\\". In the third test case, the string \\"hello\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Determines if the string s can be rearranged to form a palindrome. from collections import Counter # Count the occurence of each character char_counts = Counter(s) # Count how many characters have an odd count odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # For a string to form a palindrome, at most one character can have an odd count return \\"Yes\\" if odd_count <= 1 else \\"No\\" def process_test_cases(t, test_cases): Processes multiple test cases and returns results for each. results = [] for s in test_cases: results.append(can_form_palindrome(s)) return results"},{"question":"Given an integer array (nums), you need to return the array pivot index. The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the right of the index. If no such index exists, return -1. If there are multiple pivot indexes, you should return the left-most pivot index. All inputs will be valid.","solution":"def pivot_index(nums): Returns the pivot index of the array where the sum of elements to the left is equal to the sum of elements to the right. If there is no such index, return -1. total_sum = sum(nums) left_sum = 0 for i, num in enumerate(nums): if left_sum == total_sum - left_sum - num: return i left_sum += num return -1"},{"question":"You are given an undirected graph with N vertices and M edges. Each edge has a weight associated with it. Your task is to find the shortest path from a given source node to a target node. -----Input----- - The first line of the input contains two integers, N and M, denoting the number of vertices and edges in the graph, respectively. - The next M lines contain three integers each, u, v, and w, representing an edge from node u to node v with a weight w. - The last line contains two integers, S and T, denoting the source node and the target node. -----Output----- Output a single integer denoting the shortest path from the source node S to the target node T. If there is no path from S to T, output -1. -----Constraints----- - 1 ≤ N ≤ 100,000 - 1 ≤ M ≤ 500,000 - 1 ≤ w ≤ 1,000 - 1 ≤ S, T ≤ N -----Example----- Input: 5 6 1 2 4 1 3 2 2 3 5 2 4 10 3 4 3 4 5 1 1 5 Output: 6 -----Explanation----- The shortest path from node 1 to node 5 is: 1 -> 3 -> 4 -> 5 with a total weight of 6. Note: The graph is undirected, so if there is an edge from u to v with weight w, there is also an edge from v to u with weight w.","solution":"import heapq def shortest_path(N, M, edges, S, T): # Create the adjacency list to represent the graph graph = [[] for _ in range(N + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Priority queue to hold (distance, node) pq = [(0, S)] # Distance array to keep track of minimum distance to each node distances = [float(\'inf\')] * (N + 1) distances[S] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_node == T: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 # A function to quickly parse the input, this function is not normally required but useful for testing def parse_input(input_str): lines = input_str.strip().split(\'n\') N, M = map(int, lines[0].split()) edges = [tuple(map(int, line.split())) for line in lines[1:M+1]] S, T = map(int, lines[M+1].split()) return N, M, edges, S, T"},{"question":"Write a function ```python max_profit(prices) ``` that takes a list of daily stock prices `prices`, where `prices[i]` is the price of a given stock on day `i`, and returns the maximum profit that could be achieved by buying on one day and selling on another later day. If no profit can be achieved, return 0. For example: ```python max_profit([7, 1, 5, 3, 6, 4]) == 5 max_profit([7, 6, 4, 3, 1]) == 0 ``` ```haskell max_profit [7, 1, 5, 3, 6, 4] `shouldBe` 5 max_profit [7, 6, 4, 3, 1] `shouldBe` 0 ``` The profit is calculated by subtracting the buy price from the sell price, and you must buy before you can sell. For instance, in the first example, if you bought the stock on day 2 (price = 1) and sold it on day 5 (price = 6), you would achieve a profit of 6 - 1 = 5.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a list of daily stock prices. If no profit is possible, returns 0. :param prices: List of daily stock prices :return: Maximum profit achievable if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Given a string *s*, write a function that determines if it can be transformed into a palindrome by rearranging its characters. If it can, return `True`, otherwise return `False`. Specifically: - A palindromic string is a string that reads the same forwards and backwards. - For example, the string \\"racecar\\" is a palindrome, whereas \\"hello\\" is not. - The function should consider only the characters in the string and disregard spaces, punctuation, and capitalization. Test cases: 1. \\"Tact Coa\\" should return `True` (permutations: \\"taco cat\\", \\"atcocta\\"). 2. \\"Able was I ere I saw Elba\\" should return `True`. 3. \\"Hello, World!\\" should return `False`. Note: Optimize the function to handle large strings efficiently.","solution":"from collections import Counter def can_form_palindrome(s): Determines if the characters of the given string can be rearranged to form a palindrome. Ignores spaces, punctuation, and capitalization. # Normalize the string by ignoring spaces, punctuation, and capitalization normalized_str = \'\'.join(filter(str.isalnum, s)).lower() # Count the frequency of each character char_count = Counter(normalized_str) # Check number of characters with odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to be permuted to form a palindrome: # There must be at most one character with an odd frequency count. return odd_count <= 1"},{"question":"A string is defined as \\"Stable\\" if it does not contain any adjacent characters that are the same. Given a string s, determine the minimum number of deletions required to make the string stable. Example 1: Input: \\"aab\\" Output: 1 Explanation: Deleting one of the \'a\' characters will make the string \\"ab\\", which is stable. Example 2: Input: \\"aaaa\\" Output: 3 Explanation: To make the string stable, we need to delete three characters. Hence, the result is 3. Note: - The length of the string s will be in the range [1, 1000]. - The string s will consist only of lowercase English letters.","solution":"def min_deletions_to_make_stable(s): Returns the minimum number of deletions required to make the string stable. A string is considered \'stable\' if it does not contain any adjacent characters that are the same. deletions = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: deletions += 1 return deletions"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid contains either \'1\' or \'0\'. A cell is considered \\"good\\" if it contains \'1\' and all of its 8 neighboring cells (if they exist) also contain \'1\'. Your task is to count the number of good cells in the grid. -----Input----- The first line of input contains two space-separated integers n and m denoting the number of rows and columns of the grid, respectively. Each of the next n lines contains m characters, either \'1\' or \'0\', representing the grid. -----Output----- Output a single line containing the number of good cells in the grid. -----Constraints----- - 1 ≤ n, m ≤ 50 -----Example----- Input: 3 3 111 111 111 Output: 1 Input: 4 5 11110 11001 01101 11111 Output: 0 -----Explanation----- In the first example, only the cell in the center (grid[1][1]) is a good cell as all of its neighboring cells are \'1\'. In the second example, there are no cells such that all of their 8 neighboring cells are \'1\'.","solution":"def count_good_cells(n, m, grid): def is_good_cell(x, y): dx = [-1, -1, -1, 0, 0, 1, 1, 1] dy = [-1, 0, 1, -1, 1, -1, 0, 1] for i in range(8): nx, ny = x + dx[i], y + dy[i] if nx < 0 or nx >= n or ny < 0 or ny >= m or grid[nx][ny] != \'1\': return False return True count = 0 for r in range(1, n-1): for c in range(1, m-1): if grid[r][c] == \'1\' and is_good_cell(r, c): count += 1 return count"},{"question":"You are given an array of integers `A` of length `n`, and a sequence of `q` queries. Each query consists of two integers `L` and `R` and requires you to find the most frequent element in the subarray `A[L:R]` (both inclusive). If there are multiple elements with the same highest frequency, return the smallest one. -----Input----- - The first line contains two integers `n` (1 ≤ n ≤ 100000) and `q` (1 ≤ q ≤ 100000) — the number of elements in the array and the number of queries, respectively. - The second line contains `n` integers `A_1, A_2, ..., A_n` (1 ≤ A_i ≤ 100000), the elements of the array. - Each of the following `q` lines contains two integers `L` and `R` (1 ≤ L ≤ R ≤ n), representing a query. -----Output----- For each query, print the most frequent element in the subarray specified by `L` and `R`. If there are multiple answers, print the smallest one. -----Example----- Input: 7 3 1 2 2 3 1 2 2 1 3 2 5 3 7 Output: 2 2 2 -----Note----- In the first query, the subarray is [1, 2, 2], where `2` appears twice, which is the most frequent element. In the second query, the subarray is [2, 2, 3, 1], where `2` appears twice, which is the most frequent element. In the third query, the subarray is [2, 3, 1, 2, 2], where `2` appears three times, which is the most frequent element.","solution":"from collections import defaultdict, Counter def most_frequent_element(n, q, A, queries): results = [] for L, R in queries: subarray = A[L-1:R] count = Counter(subarray) max_freq = max(count.values()) most_frequent = min([num for num in count if count[num] == max_freq]) results.append(most_frequent) return results # Example usage n = 7 q = 3 A = [1, 2, 2, 3, 1, 2, 2] queries = [(1, 3), (2, 5), (3, 7)] print(most_frequent_element(n, q, A, queries))"},{"question":"Write a function that takes a list of integers and a target integer. The function should return all unique pairs of integers from the list that sum up to the target integer. Each pair should be sorted in ascending order, and the final list of pairs should be sorted lexicographically. Example: ``` Input: list = [1, 2, 3, 4, 5], target = 5 Output: [[1, 4], [2, 3]] Input: list = [1, 1, 2, 2, 3, 3], target = 4 Output: [[1, 3], [2, 2]] Input: list = [0, -1, 1, 2, -2, 3, 4], target = 2 Output: [[-2, 4], [-1, 3], [0, 2]] ``` Constraints: - The input list will have at most 10,000 integers. - The integers will be in the range of -100,000 to 100,000. - Each pair of integers should appear only once in the output list. Ensure that your function has an optimal time complexity given the constraints.","solution":"def find_pairs(nums, target): Find all unique pairs of integers in the list that sum up to the target. Args: nums (List[int]): List of integers. target (int): Target sum for the pairs. Returns: List[List[int]]: List of unique pairs that sum up to the target. nums.sort() pairs = set() seen = {} for num in nums: complement = target - num if complement in seen: # Sort the pair to ensure the correct order pairs.add(tuple(sorted((num, complement)))) seen[num] = num # Convert set of tuples back to a sorted list of lists return sorted([list(pair) for pair in pairs])"},{"question":"Write a function that takes a list of integers and returns two lists: one containing the even numbers and the other containing the odd numbers from the input list. If the input list is empty, return two empty lists. For example, given the list `[1, 2, 3, 4, 5, 6]`, your function should return: ```python ([2, 4, 6], [1, 3, 5]) ``` If given the list `[7, 8, 9]`, the function should return: ```python ([8], [7, 9]) ``` Ensure that the function maintains the order of elements as they appeared in the original list. Function Signature: ```python def separate_even_odd(numbers: List[int]) -> Tuple[List[int], List[int]]: ```","solution":"from typing import List, Tuple def separate_even_odd(numbers: List[int]) -> Tuple[List[int], List[int]]: Separates a list of integers into two lists: one containing even numbers and the other containing odd numbers. Args: numbers (List[int]): The list of integers to be separated. Returns: Tuple[List[int], List[int]]: A tuple containing two lists, the first with even numbers and the second with odd numbers. evens = [num for num in numbers if num % 2 == 0] odds = [num for num in numbers if num % 2 != 0] return evens, odds"},{"question":"In a magical forest, there exists a collection of unique plants. Each plant has a unique number of magical properties associated with it. The forest guardian wants to organize these plants based on their magical properties. The guardian defines the magic score of a plant as the sum of the special values of its properties. However, there’s a catch! For any plant to be considered properly organized, its magic score must be greater than or equal to the magic score of any previously organized plant. Given a list of plants and their magical properties, determine the maximum number of plants that can be properly organized in a sequence such that each subsequent plant has a magic score greater than or equal to the magic score of the previous one. -----Input----- The first line contains an integer N (1 <= N <= 1000), representing the number of plants in the forest. The next N lines each contain an integer M followed by M integers. The first number M (1 <= M <= 100) denotes the number of properties for the plant, and the next M integers are the special values (ranging from -1000 to 1000) of these properties. -----Output----- Output a single integer representing the maximum number of plants that can be organized in the sequence as described. -----Example----- Input: 4 3 1 2 3 2 -1 -2 3 4 5 6 1 100 Output: 3 Description: In the example, the plants have magic scores of 6, -3, 15, and 100 respectively. The longest sequence of plants with non-decreasing magic scores would be the plants with magic scores 6, 15, and 100, resulting in a maximum of 3 plants.","solution":"def max_organized_plants(n, plants): Given the number of plants and their magical properties, returns the maximum number of plants that can be organized in a sequence such that each subsequent plant has a magic score greater than or equal to the previous one. magic_scores = [] for plant in plants: M = plant[0] properties = plant[1:M+1] magic_score = sum(properties) magic_scores.append(magic_score) # To find the longest non-decreasing subsequence of magic_scores dp = [1] * n for i in range(n): for j in range(i): if magic_scores[i] >= magic_scores[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Statement: You are given an array of integers representing the daily prices of a stock for a given number of days. You are allowed to complete at most one transaction, which means you can buy one and sell one share of the stock. Write a program to find out the maximum profit you can achieve. If you cannot achieve any profit, return 0. -----Input:----- The first line of the input gives the number of test cases, T. T lines follow. Each line starts with an integer N, the number of days. Next, N integers follow denoting the price of the stock on each day. -----Output:----- For each test case, output one single integer containing the maximum profit you can achieve. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 0 leq Price_i leq 10^4 -----Sample Input:----- 3 6 7 1 5 3 6 4 5 7 6 4 3 1 7 2 4 1 7 8 2 4 -----Sample Output:----- 5 0 7 -----EXPLANATION:----- - In case 1, the right choice is to buy on day 2 (price = 1) and sell on day 5 (price = 6), for a profit of 6-1 = 5. - In case 2, the price goes down every day, so no profit can be made. We return 0. - In case 3, the best scenario is to buy on day 3 (price = 1) and sell on day 5 (price = 8), for a profit of 8-1 = 7.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling once. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit def process_test_cases(test_cases): Processes a list of test_cases and returns the result for each case. results = [] for case in test_cases: results.append(max_profit(case)) return results"},{"question":"You have been tasked with writing a function that checks if a given number is an **ascending number**. An ascending number is one where each digit is greater than or equal to the preceding digit. Here are the details: # Definition An ascending number is defined as a number where from left to right, each digit is greater than or equal to the digit immediately before it. # Examples Consider the following examples: ``` 113579 -> Ascending (1 ≤ 1 ≤ 3 ≤ 5 ≤ 7 ≤ 9) 123450 -> Not ascending (4 > 0) 123344 -> Ascending (1 ≤ 2 ≤ 3 ≤ 3 ≤ 4 ≤ 4) 54321 -> Not ascending (5 > 4 > 3 > 2 > 1, not ascending) 24678 -> Ascending (2 ≤ 4 ≤ 6 ≤ 7 ≤ 8) 9 -> Ascending (single digit) ``` # Your job: check if a number is an ascending number. Return `true` if it is, and `false` if it isn\'t. # Function Signature ```python def is_ascending_number(n: int) -> bool: ``` # Constraints - The input will be a valid non-negative integer. - For single digit numbers, return `true` (as any single digit number is trivially ascending). # Examples: ``` is_ascending_number(113579) -> True is_ascending_number(123450) -> False is_ascending_number(123344) -> True is_ascending_number(54321) -> False is_ascending_number(24678) -> True is_ascending_number(9) -> True ```","solution":"def is_ascending_number(n: int) -> bool: Checks if a given number is an ascending number. A number is ascending if every digit from left to right is greater than or equal to the previous digit. Args: n (int): A non-negative integer. Returns: bool: Returns True if the number is ascending, otherwise returns False. n_str = str(n) for i in range(1, len(n_str)): if n_str[i] < n_str[i-1]: return False return True"},{"question":"# Task A delivery company has a system to track their drivers and the packages they deliver. Each driver is assigned a unique ID and each package is represented by a tracking code. Currently, they need to keep a log of packages that are delivered by each driver in chronological order of delivery. You\'re required to create a function that processes a list of delivery logs and returns a dictionary, where each key is a driver\'s ID and each value is a list of tracking codes of the packages they delivered, in the order they were delivered. Formally, each log is a string formatted as `\\"driverID:trackingCode\\"` representing that driverID delivered the package identified by trackingCode. Your task is to parse these logs and produce the required dictionary. # Example For `logs = [\\"123:abc\\", \\"124:def\\", \\"123:ghi\\", \\"123:jkl\\", \\"124:mno\\"]`, the output should be `{ \\"123\\": [\\"abc\\", \\"ghi\\", \\"jkl\\"], \\"124\\": [\\"def\\", \\"mno\\"] }`. # Input/Output - `[input]` list of strings `logs` A list of logs representing the deliveries made. Each log is formatted as `\\"driverID:trackingCode\\"`, where driverID is a string of digits representing the driver\'s unique ID, and trackingCode is a string containing alphanumeric characters representing the package\'s tracking code. Constraints: `1 ≤ len(logs) ≤ 1000`, `1 ≤ len(driverID) ≤ 5`, `1 ≤ len(trackingCode) ≤ 10`. - `[output]` a dictionary A dictionary where each key is a driver\'s ID, and the corresponding value is a list of tracking codes of the packages they have delivered in the order of delivery.","solution":"def process_delivery_logs(logs): Processes a list of delivery logs and returns a dictionary indicating which packages each driver delivered in the order of delivery. :param logs: List of strings where each string is formatted as \\"driverID:trackingCode\\" :return: Dictionary where keys are driver IDs and values are lists of tracking codes delivery_dict = {} for log in logs: driver_id, tracking_code = log.split(\':\') if driver_id not in delivery_dict: delivery_dict[driver_id] = [] delivery_dict[driver_id].append(tracking_code) return delivery_dict"},{"question":"Write a function that accepts a string containing a space-separated sequence of words as input and returns a dictionary, where the keys are the words and the values are the lengths of those words. Ensure your function treats words in a case-insensitive manner and includes the same word only once in the dictionary, regardless of its case in the input. # Example ```python input: \\"Hello world hello\\" output: {\\"hello\\": 5, \\"world\\": 5} ``` # Constraints - The function should be case-insensitive. All keys in the returned dictionary should be in lowercase. - You may assume the input string contains only alphabetical characters and spaces.","solution":"def word_lengths(s): Returns a dictionary where the keys are words from the input string (in lowercase), and the values are their lengths. Parameters: - s: A string containing a space-separated sequence of words. Returns: - A dictionary with words as keys and their lengths as values. words = s.split() result = {} for word in words: lower_word = word.lower() if lower_word not in result: result[lower_word] = len(lower_word) return result"},{"question":"Alice is trying to figure out a valid arrangement for hosting her friends\' game night. She wants to ensure that all her friends sit in a specific order that satisfies a unique criterion. Given an integer n, representing the number of friends, Alice wants to arrange them in a circle such that the sum of the absolute differences between adjacent friends\' positions is maximized. Each friend is represented by a distinct number from 1 to n. For example, with n = 5, a valid arrangement could be [1, 3, 5, 2, 4] because this arrangement leads to a significant sum of absolute differences between adjacent friends. Your task is to help Alice find one such arrangement. -----Input----- The only line contains one integer n (3 le n le 10^5) — the number of friends that need to be arranged in a circle. -----Output----- Print a permutation of the integers from 1 to n representing the friends\' arrangement that maximizes the sum of absolute differences between adjacent friends. -----Examples----- Input 4 Output 1 3 2 4 Input 5 Output 1 4 2 5 3 -----Note----- In the first example, [1, 3, 2, 4] forms a valid arrangement with the sum of absolute differences being 2 + 1 + 2 + 3 = 8. In the second example, [1, 4, 2, 5, 3] gives a maximized sum of absolute differences, calculated as 3 + 2 + 3 + 2 + 2 = 12. This is not the only valid arrangement.","solution":"def maximize_absolute_differences(n): Generates a permutation of integers from 1 to n such that the sum of absolute differences between adjacent elements in a circle is maximized. if n == 3: return [1, 3, 2] arrangement = [] for i in range(1, n + 1, 2): arrangement.append(i) for i in range(2, n + 1, 2): arrangement.append(i) return arrangement"},{"question":"Your task is to define a function that converts a given string representing a hexadecimal number to its corresponding decimal (base 10) format. Implement the following function: ```python def hex_to_decimal(hex_string: str) -> int: # Your code here ``` For example: ```python hex_to_decimal(\\"1A\\") # => 26 hex_to_decimal(\\"7F\\") # => 127 hex_to_decimal(\\"100\\") # => 256 hex_to_decimal(\\"0\\") # => 0 hex_to_decimal(\\"ABC\\") # => 2748 hex_to_decimal(\\"FFF\\") # => 4095 ``` Notes: - You cannot use built-in functions that directly convert or parse hexadecimal numbers. - Input string will always be a valid hexadecimal string, and will not contain any spaces, leading zeros, or non-hexadecimal characters. - The hexadecimal letters may be in upper case, lower case, or a mix of both, but should be treated the same. - Output must be a base 10 integer.","solution":"def hex_to_decimal(hex_string: str) -> int: Convert a hexadecimal string to its corresponding decimal (base 10) format. hex_digits = \'0123456789ABCDEF\' hex_string = hex_string.upper() # Ensure the string is in upper case for consistency decimal_value = 0 logger = [] for char in hex_string: decimal_value = decimal_value * 16 + hex_digits.index(char) logger.append(f\\"Intermediate value: {decimal_value}\\") for log in logger: print(log) return decimal_value"},{"question":"A company wants to implement a system to track the average rating of its products. The system needs to process a series of operations, including adding a new rating and calculating the current average rating for a specified product. Help the company write the necessary code to perform these operations efficiently. -----Input:----- - First line will contain N, the number of operations. - The next N lines will contain a string representing the operation. Each operation can be one of the following: - \\"rate <product_id> <rating>\\": Adds a rating for the specified product. - \\"average <product_id>\\": Outputs the current average rating for the specified product. -----Output:----- For each \\"average\\" operation, output the current average rating for the specified product rounded to two decimal places. If no ratings exist for the product, output \\"No ratings\\". -----Constraints----- - 1 leq N leq 10^4 - 1 leq product_id leq 10^3 - 1 leq rating leq 5 -----Sample Input:----- 7 rate 101 4 rate 102 5 rate 101 3 rate 102 4 average 101 average 102 average 103 -----Sample Output:----- 3.50 4.50 No ratings","solution":"def process_operations(operations): product_ratings = {} results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"rate\\": product_id = int(parts[1]) rating = int(parts[2]) if product_id not in product_ratings: product_ratings[product_id] = [] product_ratings[product_id].append(rating) elif command == \\"average\\": product_id = int(parts[1]) if product_id in product_ratings and product_ratings[product_id]: average_rating = sum(product_ratings[product_id]) / len(product_ratings[product_id]) results.append(f\\"{average_rating:.2f}\\") else: results.append(\\"No ratings\\") return results"},{"question":"Write a function ```generateParentheses(n)``` that generates all combinations of well-formed parentheses given n pairs of parentheses. Each combination should be returned as a string in a list sorted alphabetically. For example, when n = 3, the function should return: ```[\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"]``` The combinations represent all valid ways to arrange three pairs of parentheses where each open parenthesis is properly closed. The results should be returned sorted alphabetically. Input: - An integer ```n``` representing the number of pairs of parentheses. If the input is not an integer or is less than 1, return an empty list. Output: - A list of strings representing all valid combinations of well-formed parentheses for the given input n. # Example ```python generateParentheses(3) # Returns [\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"] generateParentheses(1) # Returns [\\"()\\"] generateParentheses(0) # Returns [] generateParentheses(-2) # Returns [] generateParentheses(\\"3\\") # Returns [] ```","solution":"def generateParentheses(n): Generates all combinations of well-formed parentheses for n pairs of parentheses. Returns an alphabetically sorted list of valid strings. if not isinstance(n, int) or n < 1: return [] result = [] def backtrack(current_str, open_count, close_count): if len(current_str) == 2 * n: result.append(current_str) return if open_count < n: backtrack(current_str + \\"(\\", open_count + 1, close_count) if close_count < open_count: backtrack(current_str + \\")\\", open_count, close_count + 1) backtrack(\\"\\", 0, 0) return sorted(result)"},{"question":"You are given a string `str` consisting of lowercase letters and a list of pairs of indices `(i, j)` that indicate that the characters at these indices can be swapped. Your task is to determine the lexicographically smallest string that can be obtained by performing any number of swaps. Example 1: Input: str = \\"dcab\\" pairs = [[0, 3], [1, 2]] Output: \\"bacd\\" Explanation: Swap indices 0 and 3: \\"bcad\\" Swap indices 1 and 2: \\"bacd\\" Example 2: Input: str = \\"dcab\\" pairs = [[0, 3], [1, 2], [0, 2]] Output: \\"abcd\\" Explanation: Swap indices 0 and 3: \\"bcad\\" Swap indices 0 and 2: \\"acbd\\" Swap indices 1 and 2: \\"abcd\\" Example 3: Input: str = \\"cba\\" pairs = [[0, 1], [1, 2], [0, 2]] Output: \\"abc\\" Constraints: - 1 <= str.length <= 1000 - 0 <= pairs.length <= 1000 - 0 <= pairs[i][0], pairs[i][1] < str.length - str consists of lowercase English letters.","solution":"def smallest_string_with_swaps(s, pairs): from collections import defaultdict parent = {} def find(x): if parent.setdefault(x, x) != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): parent[find(x)] = find(y) for i, j in pairs: union(i, j) groups = defaultdict(list) for i in range(len(s)): groups[find(i)].append(i) ans = list(s) for indices in groups.values(): chars = sorted(ans[i] for i in indices) for i, char in zip(sorted(indices), chars): ans[i] = char return \'\'.join(ans)"},{"question":"Chef loves symmetry in his dishes. He believes that symmetry brings balance and harmony to his cooking. Inspired by this, he has come up with a problem involving symmetry in arrays. Help Chef solve this problem. You are given a sequence of integers A_1, A_2, ldots, A_N. Your task is to determine if there exists a pair of indices i and j such that 1 leq i < j leq N and A_i + A_j = A_p for some 1 leq p leq N. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. -----Output----- For each test case, print a single line containing the string \\"Symmetry Found\\" if it is possible to choose the required indices or \\"No Symmetry\\" otherwise. -----Constraints----- - 1 le T le 1000 - 2 le N le 10000 - 1 le A_i le 10^5 for each valid i - the sum of N over all test cases does not exceed 2 cdot 10^5 -----Subtasks----- Subtask 1 (30 points): 2 le N le 1000 Subtask 2 (70 points): original constraints -----Example Input----- 3 5 1 2 3 4 5 4 5 7 11 13 6 6 3 9 5 1 14 -----Example Output----- Symmetry Found No Symmetry Symmetry Found -----Explanation----- Example case 1: Chef finds a symmetry with i = 1 and j = 2 since A_1 + A_2 = 1 + 2 = 3 which is equal to A_3. Example case 2: There are no such pairs that satisfy the condition for any p. Example case 3: Chef finds a symmetry with i = 2 and j = 3 since A_2 + A_3 = 3 + 9 = 12 which is equal to A_1.","solution":"def find_symmetry(test_cases): results = [] for N, A in test_cases: found = False value_to_index = {v: i for i, v in enumerate(A)} for i in range(N): for j in range(i+1, N): if A[i] + A[j] in value_to_index and value_to_index[A[i] + A[j]] != i and value_to_index[A[i] + A[j]] != j: results.append(\\"Symmetry Found\\") found = True break if found: break if not found: results.append(\\"No Symmetry\\") return results # Read input def read_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) A = list(map(int, data[index + 1:index + 1 + N])) test_cases.append((N, A)) index += 1 + N return test_cases if __name__ == \\"__main__\\": test_cases = read_input() results = find_symmetry(test_cases) for result in results: print(result)"},{"question":"You are given a list of strings words and a string pattern. Return a list of all the strings in words that match the pattern. You can assume the pattern can only contain lowercase letters, and there is a bijection (one-to-one and onto mapping) between a letter in the pattern and a letter in a word. For a word to match the pattern, each letter in the word must be mapped to the corresponding letter in the pattern, and no two letters in the pattern can map to the same letter in the word. Example 1: Input: words = [\\"abc\\",\\"deq\\",\\"mee\\",\\"aqq\\",\\"dkd\\",\\"ccc\\"], pattern = \\"abb\\" Output: [\\"mee\\", \\"aqq\\"] Explanation: \\"mee\\" matches the pattern because \'m\' -> \'a\', \'e\' -> \'b\', and \'e\' -> \'b\'. Similarly, \\"aqq\\" matches the pattern because \'a\' -> \'a\', \'q\' -> \'b\', and \'q\' -> \'b\'. Constraints: 1 <= words.length <= 50 1 <= pattern.length <= 20 All strings in words and the pattern contain only lowercase English letters.","solution":"def find_and_replace_pattern(words, pattern): def match(word, pattern): if len(word) != len(pattern): return False w_to_p, p_to_w = {}, {} for w, p in zip(word, pattern): if w not in w_to_p: w_to_p[w] = p if p not in p_to_w: p_to_w[p] = w if w_to_p[w] != p or p_to_w[p] != w: return False return True return [word for word in words if match(word, pattern)]"},{"question":"You are given an array of integers and a number of queries. Each query consists of an integer value, and for each query, you need to determine if there exists a pair of integers in the array whose sum equals the given query value. -----Input----- The first line contains a single integer N (1 le N le 10^5) — the number of integers in the array. The next line contains N integers a_1, a_2, ..., a_N (-10^9 le a_i le 10^9) — the elements of the array. The following line contains another integer Q (1 le Q le 10^4) — the number of queries. Each of the next Q lines contains a single integer k (-2 times 10^9 le k le 2 times 10^9) — the query value. -----Output----- For each query, print \\"YES\\" if there exists a pair (a_i, a_j) such that a_i + a_j = k and i neq j. Otherwise, print \\"NO\\". -----Example----- Input 5 1 2 3 4 5 3 5 10 7 Output YES NO YES","solution":"def has_pair_with_sum(arr, queries): Determines if there exists a pair of integers in the array whose sum equals each query value. Parameters: arr (list of int): Array of integers. queries (list of int): List of query values. Returns: list of str: List of \\"YES\\" or \\"NO\\" for each query. results = [] num_set = set(arr) for k in queries: found = False for num in arr: if (k - num) in num_set and (k - num) != num: found = True break elif (k - num) == num and arr.count(num) > 1: found = True break results.append(\\"YES\\" if found else \\"NO\\") return results"},{"question":"You are given a collection of integers. We define a \\"pumpkin\\" between two integers x and y if y is divisible by x. Your task is to find the maximum length of a sequence s_1, s_2, ldots, s_k of distinct integers from the given collection such that for each consecutive pair of integers s_i and s_{i+1} in the sequence, s_{i+1} is a pumpkin of s_i. We call this the \\"pumpkin length\\" for this set. For example, if the given collection is: [3, 9, 6, 18, 36, 1, 72], then the pumpkin length is 6, corresponding to the sequence: [ 1 rightarrow 3 rightarrow 9 rightarrow 18 rightarrow 36 rightarrow 72 ] -----Input Format:----- - The first line contains one integer N indicating the number of integers in the input. - This is followed by N lines of input, each containing one integer. -----Output Format:----- The output should be a single integer, indicating the pumpkin length of the given set of integers. -----Test Data:----- - 1 leq N leq 100 - Each integer in the collection is between 1 and 10^4. -----Sample Input:----- 7 3 9 6 18 36 1 72 -----Sample Output:----- 6","solution":"def find_pumpkin_length(nums): Finds the maximum pumpkin length for a given list of integers. nums.sort() N = len(nums) dp = [1] * N for i in range(N): for j in range(i): if nums[i] % nums[j] == 0: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) nums = list(map(int, data[1:])) print(find_pumpkin_length(nums))"},{"question":"Given a list of integers, write an algorithm to calculate the frequency of each unique integer in the list and return a dictionary where the keys are the integers from the list and the values are their corresponding frequencies. Your input: A list of integers, which can include both positive and negative values and can contain duplicates. Your expected output: A dictionary where each key is a unique integer from the list and the value is how many times that integer appears in the list. Example: Input: [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] Output: {1: 1, 2: 2, 3: 3, 4: 4} Your job is to implement the above functionality in your chosen programming language.","solution":"def frequency_counter(lst): Returns a dictionary with the frequency of each unique integer in the list. :param lst: List of integers :return: Dictionary with integers as keys and their frequencies as values freq_dict = {} for num in lst: if num in freq_dict: freq_dict[num] += 1 else: freq_dict[num] = 1 return freq_dict"},{"question":"Alex loves playing with strings. He particularly enjoys finding patterns within them. Given a string `S`, he wants to identify the longest substring which contains at most `K` distinct characters. Can you help Alex determine the length of this substring? -----Input:----- - First line contains integer T, the number of test cases. - Each test case consists of a line containing a string S followed by an integer K, both separated by a space. -----Output:----- For each test case, output in a single line the length of the longest substring of S that contains at most K distinct characters. -----Constraints----- - 1 leq T leq 100 - 1 leq |S| leq 100000 - 1 leq K leq 26 -----Sample Input:----- 3 araaci 2 cbbebi 3 aa 1 -----Sample Output:----- 4 5 2 -----Explanation:----- Test case 1: S= \\"araaci\\", K = 2 The longest substring with at most 2 distinct characters is \\"araa\\" which has length 4. Test case 2: S= \\"cbbebi\\", K = 3 The longest substring with at most 3 distinct characters is \\"cbbeb\\" or \\"bbebi\\", both have length 5. Test case 3: S= \\"aa\\", K = 1 The longest substring with at most 1 distinct character is \\"aa\\" which has length 2.","solution":"def longest_substring_with_k_distinct(S, K): Determines the length of the longest substring with at most K distinct characters. Parameters: - S: The input string. - K: The maximum number of distinct characters. Returns: The length of the longest substring with at most K distinct characters. from collections import defaultdict char_count = defaultdict(int) max_length = 0 start = 0 for end in range(len(S)): char_count[S[end]] += 1 while len(char_count) > K: char_count[S[start]] -= 1 if char_count[S[start]] == 0: del char_count[S[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length def process_input(input_text): Processes the given input text and returns the results for each test case. Parameters: - input_text: Multiline string input. Returns: List of lengths of the longest substrings for each test case. lines = input_text.strip().split(\'n\') T = int(lines[0]) results = [] for i in range(1, T + 1): parts = lines[i].split() S = parts[0] K = int(parts[1]) results.append(longest_substring_with_k_distinct(S, K)) return results"},{"question":"Given a string S, you are to determine if it is a palindrome. A palindrome is a word that reads the same backward as forward. -----Input----- A single line containing the string S, which consists of lowercase letters only. [1 <= length of S <= 10^6] -----Output----- Output \\"YES\\" if the string is a palindrome, otherwise output \\"NO\\". -----Example----- Input: abccba Output: YES Input: abcde Output: NO","solution":"def is_palindrome(s): Returns \\"YES\\" if the string s is a palindrome, otherwise returns \\"NO\\". if s == s[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Implement a function `max_contiguous_subarray_sum(arr)` that calculates the maximum sum of a contiguous subarray in the given array of integers `arr`. The function should return an integer which is the maximum sum found. For an empty array, the function should return 0. Example: ``` max_contiguous_subarray_sum([1, -3, 2, 1, -1]) -> 3 max_contiguous_subarray_sum([1, 2, 3, 4, 5]) -> 15 max_contiguous_subarray_sum([-1, -2, -3, -4]) -> -1 max_contiguous_subarray_sum([]) -> 0 ``` Explanation: - In the first example, the subarray [2, 1] has the largest sum, which is 3. - In the second example, the entire array is the subarray with the maximum sum, which is 15. - In the third example, all the elements are negative, so the least negative number (-1) is the maximum sum. - In the fourth example, the array is empty, so the maximum sum is 0. You can assume the function signature in Python would be: ```python def max_contiguous_subarray_sum(arr: List[int]) -> int: ```","solution":"from typing import List def max_contiguous_subarray_sum(arr: List[int]) -> int: Returns the maximum sum of a contiguous subarray in the given list of integers. if not arr: return 0 max_sum = curr_sum = arr[0] for num in arr[1:]: curr_sum = max(num, curr_sum + num) max_sum = max(max_sum, curr_sum) return max_sum"},{"question":"Challenge: Develop a function that receives two strings, \\"string1\\" and \\"string2\\", and determines whether \\"string2\\" is a substring of \\"string1\\". If \\"string2\\" is a substring of \\"string1\\", return the starting index of its first occurrence, otherwise return -1. Example: ``` findSubstring(\\"watermelon\\", \\"melon\\"); // should return 5. findSubstring(\\"watermelon\\", \\"melonwater\\"); // should return -1. findSubstring(\\"abcabcabc\\", \\"cab\\"); // should return 2. findSubstring(\\"hello\\", \\"world\\"); // should return -1. ``` Addendum: For this problem, an empty \\"string2\\" should always return 0 for any value of \\"string1\\". If the length of \\"string2\\" is greater than the length of \\"string1\\", return -1. The search should be case-sensitive, i.e., findSubstring(\\"Hello\\", \\"hello\\") should return -1, whereas findSubstring(\\"hello\\", \\"ell\\") should return 1. The length of \\"string1\\" as well as \\"string2\\" can be defined by the formula: 0 <= length < +Infinity No characters should be ignored and/or omitted during the search, e.g. whitespace characters should not be ignored.","solution":"def findSubstring(string1, string2): Determines if \'string2\' is a substring of \'string1\'. Returns the starting index of the first occurrence of \'string2\' in \'string1\', otherwise returns -1. if string2 == \\"\\": return 0 if len(string2) > len(string1): return -1 index = string1.find(string2) return index"},{"question":"Arrays - Find Missing Element You are given an unsorted array of unique integers that ranges from 0 to n. The array will have size n, meaning that exactly one integer between 0 and n (inclusive) is missing. Your task is to write a function `findMissingElement()` that takes this array and returns the missing integer. For example, if you are given the array `[3, 0, 1]`, the missing integer is `2`, and the function should return `2`. Similarly, if you are given the array `[0, 1, 2, 4]`, the missing integer is `3`, and the function should return `3`. Constraints: - The input array is always valid and contains unique integers. - The array size is at least 1 and at most 1000. - You must not use extra space for another array or list. - Optimize for time complexity. Example Usage: ```python findMissingElement([3, 0, 1]) # should return 2 findMissingElement([0, 1, 2, 4]) # should return 3 ``` Write the function definition for `findMissingElement`.","solution":"def findMissingElement(arr): Returns the missing element from the array containing unique integers from 0 to n inclusive. n = len(arr) total_sum = n * (n + 1) // 2 actual_sum = sum(arr) return total_sum - actual_sum"},{"question":"You are tasked with developing a new algorithm for your company\'s messaging system. The system receives messages and categorizes them into relevant groups based on a specific pattern found in the content. Your job is to implement a function that identifies and groups anagrams from a list of words. An anagram is a word formed by rearranging the letters of another word. For example, the words [\\"listen\\", \\"silent\\", \\"enlist\\"] are all anagrams of each other. Write a function `group_anagrams` that takes a list of words and returns a list of lists, where each list contains words that are anagrams of each other. Examples: ```Python [\'listen\', \'silent\', \'enlist\', \'google\', \'gooogle\'] => [[\'listen\', \'silent\', \'enlist\'], [\'google\'], [\'gooogle\']] [\'rat\', \'art\', \'tar\', \'star\', \'tars\'] => [[\'rat\', \'art\', \'tar\'], [\'star\', \'tars\']] [\'abc\', \'def\', \'ghi\'] => [[\'abc\'], [\'def\'], [\'ghi\']] ``` # Constraints: - All the input words are in lower case. - The length of each word does not exceed 100. - The number of words does not exceed 1000. Function signature: ```Python def group_anagrams(words: List[str]) -> List[List[str]]: pass ```","solution":"from typing import List from collections import defaultdict def group_anagrams(words: List[str]) -> List[List[str]]: Groups words that are anagrams of each other. :param words: A list of words to be grouped into anagrams. :return: A list of lists where each list contains words that are anagrams of each other. anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"Given an integer array `nums`, return the smallest positive integer that does not appear in `nums`. Solve this without using extra space (in O(n) time complexity). ```python missing_positive([3, 4, -1, 1]) => 2 missing_positive([1, 2, 0]) => 3 missing_positive([7, 8, 9, 11, 12]) => 1 ``` Explanation: In the first example, `[3, 4, -1, 1]`, the smallest positive integer not present is `2`. In the second example, `[1, 2, 0]`, the smallest positive integer not present is `3`. In the third example, `[7, 8, 9, 11, 12]`, the smallest positive integer not present is `1`. The function should place each number in its corresponding index if it\'s in the range of the array length (i.e., `1` goes to index `0`, `2` goes to index `1`, etc.), and then iteratively find the first index that doesn\'t match the value `i + 1`.","solution":"def missing_positive(nums): Returns the smallest positive integer that does not appear in nums. :param nums: List[int] - A list of integers :return: int - The smallest positive integer not in nums n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap elements to their correct positions nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Linear Search is a basic search algorithm that checks every element in a list sequentially until the desired element is found. Suppose you are given a list of integers and an integer target value to search. If the target is found in the list, return the index of its first occurrence. If the target is not found, return -1 instead. Write a function that performs this linear search. -----Input----- - The first line contains an integer T, the number of test cases. - The first line of each test case contains two integers N and target, where N is the length of the list and target is the integer to be searched. - The second line of each test case contains N space-separated integers representing the elements of the list. -----Output----- For each test case, output the index of the target in the list if it\'s found (0-based indexing). Otherwise, output -1. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 105 - -109 ≤ target, list[i] ≤ 109 -----Example----- Input 2 5 3 1 5 3 7 9 4 -2 1 -2 3 4 Output 2 1 -----Explanation----- Testcase 1: The target value 3 is found at index 2 in the list. Testcase 2: The target value -2 is found at index 1 in the list.","solution":"def linear_search(nums, target): Performs a linear search to find the target in the list. Args: nums: List[int]: List of integers to search through. target: int: The integer value to find. Returns: int: The index of the target in the list if found, otherwise -1. for index, value in enumerate(nums): if value == target: return index return -1 def solve(test_cases): results = [] for (n, target, nums) in test_cases: results.append(linear_search(nums, target)) return results"},{"question":"Lara, known for her expertise in archaeology and ancient puzzles, has discovered a hidden code in the ruins of an ancient temple. The code is in the form of a sequence of integers and has a special property. Every number in the sequence (except the first and the last one) is the sum of the smallest and largest number among the previous m numbers. To decode the message, Lara needs to reconstruct the original sequence given these integers. Formally, given the first m integers B[1], B[2], ..., B[m], and the next n - m integers B[m+1], B[m+2], ..., B[n] which satisfy the condition B[i] = min(B[i-m], B[i-m+1], ..., B[i-1]) + max(B[i-m], B[i-m+1], ..., B[i-1]) for all i from m+1 to n, reconstruct the original sequence A of length n. -----Input:----- - First line of the input consists of two space-separated integers n and m. - Second line contains n space-separated integers B[1] .. B[n]. -----Output:----- In a single line print n space-separated integers, the values of the original sequence A. -----Constraints----- - 2 leq m leq n leq 1000 - 1 leq B[i] leq 10^9 -----Subtasks----- - 50 Points: 1 leq n leq 100 - 50 Points: Original Constraints -----Sample Input:----- 6 2 5 3 8 10 16 22 -----Sample Output:----- 5 3 8 10 16 22 -----EXPLANATION:----- Given the first two numbers, we reconstruct the sequence as follows: B[3] = min(5, 3) + max(5, 3) = 3 + 5 = 8 B[4] = min(3, 8) + max(3, 8) = 3 + 8 = 11, which mismatches with 10. Thus, there is an error, and correct explanations must involve verifying computations and their corresponding indices faithfully.","solution":"def reconstruct_sequence(n, m, B): Reconstructs the original sequence A given the sequence B. Parameters: n (int): The length of the sequence A and B. m (int): The number of initial values which are the same between A and B. B (list): The sequence B which dictates the rest of the sequence. Returns: list: The original sequence A. # Initial values of A are the same as B A = B[:m] # Iterate over the rest of B to reconstruct A for i in range(m, n): min_val = min(A[i-m:i]) max_val = max(A[i-m:i]) A.append(B[i]) return A"},{"question":"``` You are given an array of integers that represents the height of walls at different indices. The width of each wall is 1 unit. Calculate how much rainwater can be trapped between the walls after it rains. For example: - Given the array `[0,1,0,2,1,0,1,3,2,1,2,1]`, the method should return `6`. - Given the array `[4,2,0,3,2,5]`, the method should return `9`. Write a function `calculateTrappedWater` that receives an array of non-negative integers and returns the total amount of trapped rainwater. **Function Signature:** ```python def calculateTrappedWater(heights: List[int]) -> int: ``` # Notes: 1. You may assume that the maximum possible number of walls (the length of the array) is 100,000. 2. The height of walls is between 0 and 10000. 3. Focus on writing an efficient solution with a time complexity of O(n). ```","solution":"def calculateTrappedWater(heights): if not heights: return 0 left, right = 0, len(heights) - 1 max_left, max_right = heights[left], heights[right] trapped_water = 0 while left < right: if max_left <= max_right: left += 1 max_left = max(max_left, heights[left]) trapped_water += max(0, max_left - heights[left]) else: right -= 1 max_right = max(max_right, heights[right]) trapped_water += max(0, max_right - heights[right]) return trapped_water"},{"question":"You are given an array of integers and a target sum. Your task is to determine if any two numbers in the array sum up to the target. If such a pair exists, return the indices of the two numbers in the format `[index1, index2]`, where `index1` is less than `index2`. If no such pair exists, return `[-1, -1]`. Assume the array has no duplicate numbers and that the solution should have a time complexity better than O(n^2). For example: ```python find_pair([2, 7, 11, 15], 9) = [0, 1] # because 2 + 7 = 9 find_pair([3, 2, 4], 6) = [1, 2] # because 2 + 4 = 6 find_pair([1, 2, 3, 4, 5], 10) = [-1, -1] # no two numbers sum to 10 ```","solution":"def find_pair(nums, target): Find two numbers in `nums` that sum up to `target` and return their indices. If no such pair exists, return [-1, -1]. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return [-1, -1]"},{"question":"You are tasked with writing a function that takes an array of random integers and returns an array of only the unique numbers, preserving their order of first appearance. The unique numbers mean there should be no duplicate values in the output array. The function should handle a range of negative and positive integers. Example: ```Given: list = [4, 5, 6, 5, -1, 4, 7, -1, 6, 8] ``` ``Return: [4, 5, 6, -1, 7, 8] ``","solution":"def unique_numbers(arr): Returns an array of the unique numbers preserving their order of first appearance. seen = set() unique_list = [] for num in arr: if num not in seen: unique_list.append(num) seen.add(num) return unique_list"},{"question":"Write a function that takes a string as input and returns the most frequently occurring character in the string. In case of a tie, return the character that appears first in the string. For instance: Input: \\"character\\" Output: \\"c\\" Input: \\"apple\\" Output: \\"p\\"","solution":"def most_frequent_char(s): Returns the most frequently occurring character in the string s. In case of a tie, returns the character that appears first in the string. from collections import Counter if not s: return None char_count = Counter(s) max_count = max(char_count.values()) for char in s: if char_count[char] == max_count: return char"},{"question":"Write a function that receives a list of integers and an integer `N`. The function should return the maximum sum of any contiguous subarray of length `N`. For example: ``` max_subarray_sum([1, 4, 2, 10, 23, 3, 1, 0, 20], 4) -> 39 Here, the subarray [4, 2, 10, 23] has the largest sum among all subarrays of length 4. ``` You can assume that `N` will always be less than or equal to the length of the array and the array will contain at least one element.","solution":"def max_subarray_sum(arr, N): Returns the maximum sum of any contiguous subarray of length N. if len(arr) == 0 or N > len(arr): return 0 max_sum = 0 window_sum = 0 # Calculate the sum of the first window of size N for i in range(N): window_sum += arr[i] max_sum = window_sum # Slide the window from start to the end of the list for i in range(N, len(arr)): window_sum += arr[i] - arr[i - N] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"You are given an array of integers representing the heights of buildings. Each element in the array represents a building of height `arr[i]`. The buildings are contiguous and arranged linearly. A building skyline is defined as the number of buildings that are visible when viewing from the left side. Note that if a building is taller than the buildings to its right, it will obscure those buildings from being seen when viewed from the left. Write a function that takes an array of integers and returns the number of visible buildings in the skyline. Example 1: Input: [3, 1, 4, 1, 5, 9, 2, 6, 5] Output: 4 Explanation: The skyline will see buildings with heights 3, 4, 5, and 9. Example 2: Input: [1, 2, 3, 4, 5] Output: 5 Explanation: All buildings are visible in this case. Example 3: Input: [9, 8, 7, 6, 5] Output: 1 Explanation: Only the first building is visible as it is taller than all the subsequent ones. Note: * 1 <= arr.length <= 1000 * 1 <= arr[i] <= 10^6","solution":"def visible_buildings(skyline): Returns the number of visible buildings in the skyline when viewed from the left side. Parameters: skyline (list): List of integers representing the heights of the buildings. Returns: int: Number of visible buildings. if not skyline: return 0 visible_count = 1 current_max_height = skyline[0] for height in skyline[1:]: if height > current_max_height: visible_count += 1 current_max_height = height return visible_count"},{"question":"# Scenario **_A restaurant_** wants to keep track of **_orders for the day_**. They want to know how many times each **_main dish_** has been ordered. ___ # Task **_Given_** *a list of strings (the dishes ordered by customers)*, **_return_** *a dictionary*, **_where_** *each key is a dish*, and *the corresponding value is the number of times that dish has been ordered*. ___ # Notes * **_List length_** is *at least 1*. * **_All strings_** in the list will be non-empty and can contain only **alphabetic characters** and **spaces**. ___ # Input >> Output Examples ``` countOrders([\\"pizza\\", \\"burger\\", \\"pizza\\", \\"sushi\\"]) ==> return {\\"pizza\\": 2, \\"burger\\": 1, \\"sushi\\": 1} ``` **_Explanation_**: **_The result_** `{\\"pizza\\": 2, \\"burger\\": 1, \\"sushi\\": 1}` indicates that **_pizza_** was ordered **2 times**, **_burger_** was ordered **1 time** and **_sushi_** was ordered **1 time**. ___ ``` countOrders([\\"pasta\\", \\"pasta\\", \\"pasta\\"]) ==> return {\\"pasta\\": 3} ``` **_Explanation_**: **_The result_** `{\\"pasta\\": 3}` indicates that **_pasta_** was ordered **3 times**. ___ ``` countOrders([\\"salad\\", \\"soup\\", \\"sandwich\\", \\"salad\\", \\"soup\\"]) ==> return {\\"salad\\": 2, \\"soup\\": 2, \\"sandwich\\": 1} ``` **_Explanation_**: **_The result_** `{\\"salad\\": 2, \\"soup\\": 2, \\"sandwich\\": 1}` indicates that **_salad_** was ordered **2 times**, **_soup_** was ordered **2 times**, and **_sandwich_** was ordered **1 time**. ___ ___ ___ ALL translations are welcomed Enjoy Learning !!","solution":"def countOrders(orders): Given a list of strings (the dishes ordered by customers), return a dictionary where each key is a dish and the corresponding value is the number of times that dish has been ordered. order_counts = {} for order in orders: if order in order_counts: order_counts[order] += 1 else: order_counts[order] = 1 return order_counts"},{"question":"Given a string s and a string dictionary dictionary, return the longest string in dictionary that can be formed by deleting some characters of the given string s. If there are more than one possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string. Example 1: Input: s = \\"abpcplea\\", dictionary = [\\"ale\\",\\"apple\\",\\"monkey\\",\\"plea\\"] Output: \\"apple\\" Example 2: Input: s = \\"abpcplea\\", dictionary = [\\"a\\",\\"b\\",\\"c\\"] Output: \\"a\\" Example 3: Input: s = \\"abcd\\", dictionary = [\\"abc\\",\\"abd\\",\\"ab\\",\\"abcd\\"] Output: \\"abcd\\" Constraints: 1 <= s.length <= 1000 1 <= dictionary.length <= 1000 1 <= dictionary[i].length <= 100 s and dictionary[i] consist of lowercase English letters","solution":"def findLongestWord(s, dictionary): def is_subsequence(x): it = iter(s) return all(c in it for c in x) # Sort dictionary by (-length, word) to achieve the desired order dictionary.sort(key=lambda x: (-len(x), x)) for word in dictionary: if is_subsequence(word): return word return \\"\\""},{"question":"Given a string containing both uppercase and lowercase letters, write a function to find the first character that repeats more than once. The comparison between characters should be case-sensitive, meaning \'a\' and \'A\' are considered different characters. Return the first repeating character. If no character repeats, return an empty string. Function signature: `def first_repeating_character(s: str) -> str:`","solution":"def first_repeating_character(s: str) -> str: Returns the first character that repeats more than once in a given string. The comparison between characters is case-sensitive. If no character repeats, returns an empty string. seen = set() for char in s: if char in seen: return char seen.add(char) return \\"\\""},{"question":"=====Problem Statement===== Write a program to simulate a ticket booking system for a theater. =====Input Format===== The first line contains a single integer N, representing the number of seats in the theater. The second line contains a single integer Q, representing the number of booking and cancellation operations. Each of the next Q lines contains an operation in one of the following forms: - BOOK seat_number - CANCEL seat_number =====Constraints===== 1 ≤ N ≤ 1000 1 ≤ Q ≤ 1000 For each operation, 1 ≤ seat_number ≤ N =====Output Format===== Print the final list of booked seat numbers in ascending order. If no seats are booked, print \\"No seats booked\\". =====Example===== Input: 10 5 BOOK 3 BOOK 1 CANCEL 3 BOOK 2 BOOK 10 Output: 1 2 10 Explanation: Initially, all seats are empty. After performing the operations: - BOOK 3: Seats [3] are booked. - BOOK 1: Seats [1, 3] are booked. - CANCEL 3: Seat 3 is cancelled, so seats [1] are booked. - BOOK 2: Seats [1, 2] are booked. - BOOK 10: Seats [1, 2, 10] are booked.","solution":"def theater_ticket_booking(N, Q, operations): Simulates the ticket booking system for a theater. Args: N: int - Number of seats in the theater. Q: int - Number of booking and cancellation operations. operations: List of str - List of operations in \'BOOK seat_number\' or \'CANCEL seat_number\' format. Returns: str - Space-separated list of booked seat numbers in ascending order or \\"No seats booked\\" if no seats are booked. booked_seats = set() for operation in operations: action, seat_number = operation.split() seat_number = int(seat_number) if action == \\"BOOK\\": booked_seats.add(seat_number) elif action == \\"CANCEL\\": booked_seats.discard(seat_number) # discard does not raise an error if the element is not present if booked_seats: return \' \'.join(map(str, sorted(booked_seats))) else: return \\"No seats booked\\""},{"question":"You are implementing a rhythm matching game where players need to match a given sequence of beats in sync with the rhythm. The beats are represented by the following symbols: - `. = quarter beat` - `- = half beat` - `~ = full beat` The player needs to match the sequence given with a series of inputs over time. Each beat can be either ON or OFF based on the player\'s input. An ON beat is denoted by `1` and an OFF beat is denoted by `0`. Your task is to write a function that checks if the player\'s input matches the rhythm sequence. The function should take two strings as input: `sequence` and `input`. The `sequence` string contains the rhythm symbols, and the `input` string contains the player\'s input where `1` means ON and `0` means OFF. Both strings are of the same length. The function should return the score of the player, which is the count of correctly matched ON beats. A beat is considered correctly matched if the symbol and the player input are both ON (i.e., the sequence symbol is either `.`, `-`, or `~` and the input is `1`). **Example:** ``` sequence = \\".-~.-\\" input = \\"101010\\" ``` The player scores 3 points since the 1st, 3rd, and 5th beats were matched correctly. **Function Signature:** ```python def rhythm_match(sequence: str, input: str) -> int: # Your code here ``` **Example Usage:** ```python print(rhythm_match(\\".-~.-\\", \\"101010\\")) # Output: 3 print(rhythm_match(\\".~.-\\", \\"1100\\")) # Output: 2 ```","solution":"def rhythm_match(sequence: str, input: str) -> int: Returns the score of the player by counting the correctly matched ON beats. A beat is correctly matched if the sequence symbol is either `.`, `-`, `~` and the corresponding input is `1`. score = 0 for seq_char, inp_char in zip(sequence, input): if inp_char == \'1\' and seq_char in {\'.\', \'-\', \'~\'}: score += 1 return score"},{"question":"Given an array of integers, your task is to calculate the sum of the largest contiguous subarray within the array. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array. The second line contains n integers separated by spaces, which represents the elements of the array (-10^5 ≤ array[i] ≤ 10^5). -----Output----- Print a single integer, the sum of the largest contiguous subarray. -----Examples----- Input 5 1 -2 3 4 -5 6 Output 8 Input 8 -2 -3 4 -1 -2 1 5 -3 Output 7 -----Note----- In the first example: the subarray {3, 4, -5, 6} produces the maximum sum 8. In the second example: the subarray {4, -1, -2, 1, 5} produces the maximum sum 7.","solution":"def max_subarray_sum(arr): Returns the sum of the largest contiguous subarray within the array. Uses Kadane\'s Algorithm for O(n) time complexity. max_so_far = -float(\'inf\') max_ending_here = 0 for num in arr: max_ending_here = max_ending_here + num if max_so_far < max_ending_here: max_so_far = max_ending_here if max_ending_here < 0: max_ending_here = 0 return max_so_far"},{"question":"=====Problem Statement===== You are given an integer array nums sorted in non-decreasing order, and an integer target. Your task is to find the starting and ending position of a given target value in the array. If the target is not found in the array, return [-1, -1]. You must write an algorithm with O(log n) runtime complexity. =====Input Format===== - The first line contains an integer N, the size of the array (1 ≤ N ≤ 10^5). - The second line contains N integers sorted in non-decreasing order, representing the elements of the array. - The third line contains an integer target. =====Constraints===== - The elements in the array are in the range of -10^9 to 10^9. - The target is in the range of -10^9 to 10^9. =====Output Format===== Output a single line with two integers, the starting and ending position of the target in the array. If the target is not found, output [-1, -1]. =====Example Input===== ``` 6 5 7 7 8 8 10 8 ``` =====Example Output===== ``` 3 4 ``` =====Example Input===== ``` 6 5 7 7 8 8 10 6 ``` =====Example Output===== ``` -1 -1 ``` =====Note===== In the first example, the target value 8 appears at positions 3 and 4 in the array. In the second example, the target value 6 is not present in the array, so the output is [-1, -1].","solution":"def search_range(nums, target): Find the starting and ending position of the target value in the sorted array nums. If the target is not found, return [-1, -1]. def find_start(nums, target): start, end = 0, len(nums) - 1 while start <= end: mid = (start + end) // 2 if nums[mid] >= target: end = mid - 1 else: start = mid + 1 return start def find_end(nums, target): start, end = 0, len(nums) - 1 while start <= end: mid = (start + end) // 2 if nums[mid] <= target: start = mid + 1 else: end = mid - 1 return end start = find_start(nums, target) end = find_end(nums, target) if start <= end and start < len(nums) and nums[start] == target: return [start, end] else: return [-1, -1]"},{"question":"A painter is working on a series of canvas partitions. Each partition can either be painted fully with one color or can be divided into two smaller partitions. Each division operation splits a partition into two smaller partitions of equal size. The painter has to paint one of the resulting partitions with one color and the other one with a different color. Given a single canvas partition of size `n x n`, the painter wants to know the minimum number of division operations needed to ensure that each resulting partition is colored either fully or divided further until the smallest size of a partition is `1 x 1`. Write a function `min_divisions(n)` that calculates the minimum number of divisions needed so that each partition meets the condition described above. The function has one parameter `n`, which is the side length of the canvas partition. Example: ``` min_divisions(1) should return 0 (It\'s already 1 x 1, no division needed) min_divisions(2) should return 1 (2 x 2 can be divided once into four 1 x 1 partitions) min_divisions(4) should return 2 (4 x 4 can be divided twice: first into four 2 x 2 partitions, then each 2 x 2 partition into 1 x 1 partitions) min_divisions(8) should return 3 (8 x 8 can be divided three times: first into four 4 x 4 partitions, then each 4 x 4 into 2 x 2 partitions, and finally each 2 x 2 into 1 x 1 partitions) ``` Constraints: - You can assume `n` is a power of 2 (e.g., 1, 2, 4, 8, 16, ...).","solution":"def min_divisions(n): Returns the minimum number of divisions needed to ensure that each resulting partition is colored either fully or divided further until the smallest size of a partition is 1 x 1. if n <= 1: return 0 divisions = 0 while n > 1: n = n // 2 divisions += 1 return divisions"},{"question":"Write a function, `find_longest_substring(s)`, that determines the length of the longest substring without repeating characters in a given string `s`. Ex. ``` find_longest_substring(\\"abrkaabcdefghijjxxx\\") ``` should return ``` 10 ```","solution":"def find_longest_substring(s): Returns the length of the longest substring without repeating characters in a given string s. start = 0 max_length = 0 used_chars = {} for index, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: max_length = max(max_length, index - start + 1) used_chars[char] = index return max_length"},{"question":"Write a function that takes a string containing an arithmetic expression with basic operations (addition and subtraction) and returns the result of the expression. The input string will contain only non-negative integers and the operators `+` and `-`. There will be no parentheses and all operations are performed from left to right. Examples ```python evaluate_expression(\\"3+5-2\\") # returns 6 evaluate_expression(\\"10-4+2\\") # returns 8 ```","solution":"def evaluate_expression(expression): Evaluates an arithmetic expression containing non-negative integers and the operators `+` and `-`. # Split the expression into tokens, separating by \'+\' and \'-\' tokens = [] num = \'\' for char in expression: if char in \'+-\': if num: tokens.append(int(num)) num = \'\' tokens.append(char) else: num += char if num: tokens.append(int(num)) # Initialize the result with the first number result = tokens[0] i = 1 # Iterate through the tokens and calculate the result while i < len(tokens): if tokens[i] == \'+\': result += tokens[i+1] elif tokens[i] == \'-\': result -= tokens[i+1] i += 2 return result"},{"question":"Sophia is an enthusiastic gardener. She has a rectangular garden of size `m` x `n`, and she enjoys planting different types of flowers in a unique pattern. Sophia has decided to plant her flowers in such a way that she divides the garden into smaller squares with the largest possible identical size. Each side of the smaller squares must be of an integer length, and they should completely fill the entire garden without any remaining empty space. Sophia needs your help to determine the largest possible side length of the smaller squares she can use to divide her garden. Write a function that receives the dimensions `m` and `n` of Sophia\'s garden and returns the side length of the largest square that can fit perfectly into the garden. Implement an efficient algorithm to solve this problem. # Input - Two integers `m` and `n` representing the dimensions of the garden. # Output - An integer representing the side length of the largest square that can be used to fully divide the garden. # Example ```python def largest_square_side(m, n): # Your code here # Example test cases print(largest_square_side(15, 20)) # Outputs: 5 print(largest_square_side(7, 3)) # Outputs: 1 print(largest_square_side(36, 60)) # Outputs: 12 ``` In the first example, the largest square that can completely fill a garden of dimensions 15x20 without any leftover space has a side length of 5.","solution":"import math def largest_square_side(m, n): Returns the side length of the largest square that can be used to divide the garden of size m x n. return math.gcd(m, n)"},{"question":"Password strength is an essential aspect of security, and it\'s critical to ensure that passwords are both complex and difficult to guess. For the purpose of this problem, we define a strong password as one that has at least: - 8 characters in length, - at least one uppercase letter, - at least one lowercase letter, - at least one digit, - at least one special character from the set `!@#%^&*()-+`. Implement a function that checks if a given password meets these criteria. Input A single string representing the password. The string will contain characters from the ASCII set. Output Return the string \\"Strong\\" if the password meets the criteria, otherwise return \\"Weak\\". Examples ```python password_strength(\\"StrongPass1!\\") # => Strong password_strength(\\"weak\\") # => Weak ```","solution":"import re def password_strength(password): if len(password) < 8: return \\"Weak\\" if not re.search(r\'[A-Z]\', password): return \\"Weak\\" if not re.search(r\'[a-z]\', password): return \\"Weak\\" if not re.search(r\'d\', password): return \\"Weak\\" if not re.search(r\'[!@#%^&*()-+]\', password): return \\"Weak\\" return \\"Strong\\""},{"question":"Write a function that takes a string as input and returns the string with all of its characters rearranged in alphabetical order. Examples: input: output: \\"hello\\" -> \\"ehllo\\" \\"apple\\" -> \\"aelpp\\" \\"python\\" -> \\"hnopty\\" \\"banana\\" -> \\"aaabnn\\" \\"xyz\\" -> \\"xyz\\" \\"a\\" -> \\"a\\" \\"\\" -> \\"\\" etc. The input string may contain any mixture of upper and lower case letters and/or special characters. The returned string should only rearrange the character positions and should differentiate between upper and lower case letters. Assume the input string only contains ASCII characters.","solution":"def alphabetical_order(s): Returns a string with all of its characters rearranged in alphabetical order. Args: s (str): Input string. Returns: str: String with characters in alphabetical order. return \'\'.join(sorted(s))"},{"question":"# Mirrored Alphabet Cipher In a small town, people use a special cipher to encode their secret messages. The cipher works by mirroring each letter of the alphabet about its midpoint. In other words, if you write the alphabet twice side by side, reversed the second time, each letter maps to its mirrored counterpart, i.e., ‘a’ becomes ‘z’, ‘b’ becomes ‘y’, and so on. The same rule applies to uppercase letters. All other characters (such as spaces, punctuation, and numbers) remain unchanged. For instance, the phrase \\"Hello World!\\" becomes \\"Svool Dliow!\\". Your task is to write a function that decodes messages encoded with this cipher. # Input The function will be passed a string to decode. Each string will contain up to 150 characters, and be composed of ASCII characters (32-126). # Output For each string passed to the decode function, return its decoded form.","solution":"def decode(cipher_text): Decodes a message encoded with a mirrored alphabet cipher. Parameters: cipher_text (str): The encoded message to decode. Returns: str: The decoded message. decoded_message = [] for char in cipher_text: if \'a\' <= char <= \'z\': decoded_message.append(chr(219 - ord(char))) elif \'A\' <= char <= \'Z\': decoded_message.append(chr(155 - ord(char))) else: decoded_message.append(char) return \'\'.join(decoded_message) # Example usage # print(decode(\\"Svool Dliow!\\")) # Output: Hello World!"},{"question":"A software company is developing a text editor and wants to implement a feature that counts all words in a string that contain at least one vowel (a, e, i, o, u) and at least one consonant. You are tasked with creating this feature. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one string S containing words separated by spaces. -----Output:----- For each test case, output the number of words in the string S that meet the criteria. -----Constraints----- - 1 leq T leq 50 - 1 leq |S| leq 1000 - The string will only contain lowercase and uppercase English letters and spaces. -----Sample Input:----- 3 this is a test hello world algorithms and programming are fun -----Sample Output:----- 3 2 5 -----EXPLANATION:----- In the first test case, \\"this\\", \\"is\\", and \\"test\\" contain both vowels and consonants. \\"a\\" does not. In the second test case, \\"hello\\" and \\"world\\" contain both vowels and consonants. In the third test case, \\"algorithms\\", \\"and\\", \\"programming\\", \\"are\\", and \\"fun\\" contain both vowels and consonants.","solution":"def count_words_with_vowel_and_consonant(T, test_cases): Function to count the number of words with at least one vowel and one consonant. vowels = set(\\"aeiouAEIOU\\") results = [] for case in test_cases: words = case.split() count = 0 for word in words: has_vowel = any(char in vowels for char in word) has_consonant = any(char.isalpha() and char not in vowels for char in word) if has_vowel and has_consonant: count += 1 results.append(count) return results"},{"question":"Given an array of positive integers and a number `target`, determine the number of unique pairs of integers in the array that sum up to the target. For example: ```python find_pairs([1, 3, 2, 2, 4, 5], 6) = 2 ``` In this example, the pairs are `(1, 5)` and `(2, 4)`. Note: 1. Each pair should be counted only once. 2. The order of elements in the pair does not matter. 3. Each element from the array can be used at most once. You can assume the input array will have at least 2 integers. More examples in the test cases. Good luck!","solution":"def find_pairs(nums, target): Returns the number of unique pairs of integers in the array that sum up to the target. Each pair should be counted only once and each element can be used at most once. seen = set() pairs = set() for num in nums: diff = target - num if diff in seen: pairs.add((min(num, diff), max(num, diff))) seen.add(num) return len(pairs)"},{"question":"You are given a list of integers that represent the prices of houses in a neighborhood, where each price denotes a day\'s worth of houses on sale. You want to buy exactly two houses such that you get maximum days gap between them while paying the least possible total price. You can assume that the same house will not be listed again on another day. Write a function to determine the minimum total price of two houses that you can buy to maximize the gap in days between their list dates. **Function Signature:** ```python def buy_houses(prices: List[int]) -> int: ``` **Input:** - A list `prices` of length `n` (2 ≤ n ≤ 100,000) where each element `prices[i]` (1 ≤ prices[i] ≤ 1,000,000) represents the price of a house listed on day `i`. **Output:** - Return the minimum total cost of two houses with the maximum days gap between their list dates. **Examples:** Example 1: ```plaintext Input: [1, 2, 3, 4, 5] Output: 3 Explanation: The best choice is to buy the houses listed on days 1 and 5 for a total of 1 + 2 = 3. ``` Example 2: ```plaintext Input: [5, 10, 1, 6, 2] Output: 3 Explanation: The best choice is to buy the houses listed on days 2 and 5 for a total of 1 + 2 = 3. ``` Example 3: ```plaintext Input: [8, 3, 7, 9, 2] Output: 5 Explanation: The best choice is to buy the houses listed on days 1 and 4 for a total of 3 + 2 = 5. ``` **Note:** - If there are multiple ways to achieve the same result, return any one of them. - Focus on finding the correct approach to maximize the days gap while ensuring the minimal possible total price for the two selected houses.","solution":"def buy_houses(prices): n = len(prices) # Initialize variables to hold the minimum price and second minimum price min1, min2 = float(\'inf\'), float(\'inf\') min1_index, min2_index = -1, -1 # Find the minimum price and its index for i in range(n): if prices[i] < min1: min1 = prices[i] min1_index = i # Find the second minimum price and its index for i in range(n): if prices[i] < min2 and i != min1_index: min2 = prices[i] min2_index = i return min1 + min2"},{"question":"=====Function Descriptions===== String Manipulation Python provides different methods to manipulate strings. Below are some useful methods: - `str.upper()`: Converts all characters in a string to uppercase. - `str.lower()`: Converts all characters in a string to lowercase. - `str.capitalize()`: Capitalizes the first character of a string. Sample Code >>> s = \\"hello world\\" >>> print(s.upper()) HELLO WORLD >>> print(s.lower()) hello world >>> print(s.capitalize()) Hello world =====Problem Statement===== You are given a string. Your task is to convert the string such that the first letter of each word is capitalized, while the rest of the letters are in lowercase. =====Input Format===== A single line of input containing the string with one or more words. =====Constraints===== - The string consists of printable ASCII characters and spaces only. - The string has at least one character and at most 100 characters. =====Output Format===== Output the resulting string where each word starts with a capital letter and the rest of the letters are in lowercase. =====Sample Input===== hello world =====Sample Output===== Hello World =====Explanation===== The input \\"hello world\\" is transformed such that the first character of each word is uppercase and the rest are lowercase, resulting in \\"Hello World\\".","solution":"def capitalize_words(sentence): Capitalizes the first letter of each word in the given sentence and converts the rest of the letters to lowercase. :param sentence: str, input string with one or more words :return: str, formatted string words = sentence.split() capitalized_words = [word.capitalize() for word in words] return \' \'.join(capitalized_words)"},{"question":"Write a function \\"process_scores\\" that takes in a list of student scores and returns a tuple consisting of: 1. The average score rounded to the nearest integer. 2. The median score. 3. A list of students who scored higher than the average (in the same order as they appear in the input list). Notes: - If the list is empty, return (0, 0, []). - You may assume that all scores are non-negative integers. Example: ```python process_scores([90, 78, 65, 89, 76, 95, 70]) ``` Output: ```python (80, 78, [90, 89, 95]) ```","solution":"def process_scores(scores): Processes a list of student scores and returns a tuple containing the average score rounded to the nearest integer, the median score, and a list of students who scored higher than the average. if not scores: return (0, 0, []) # Calculate the average score rounded to the nearest integer average_score = round(sum(scores) / len(scores)) # Calculate the median score sorted_scores = sorted(scores) n = len(scores) median_score = sorted_scores[n // 2] if n % 2 != 0 else (sorted_scores[n // 2 - 1] + sorted_scores[n // 2]) / 2 # Find students who scored higher than the average above_average_scores = [score for score in scores if score > average_score] return (average_score, median_score, above_average_scores)"},{"question":"John is participating in a biology trivia contest in his school. He\'s asked to identify the class of various animals quickly. To help him prepare, you\'re going to create a program that simulates the contest. You will write a function that takes an animal name as input and returns the class to which that animal belongs along with a general description associated with the class. Here\'s the database that John will use: - lion : Mammal - Warm-blooded vertebrates that have hair or fur and whose females produce milk to feed their young. - eagle : Bird - Warm-blooded vertebrates characterized by feathers and beaks, laying hard-shelled eggs. - crocodile : Reptile - Cold-blooded vertebrates with scales or scutes that lay soft-shelled eggs on land. - frog : Amphibian - Cold-blooded vertebrates that spend their early life in water, and adulthood on land. - shark : Fish - Cold-blooded aquatic vertebrates that have gills throughout life and fins. - butterfly : Insect - A large group of arthropods, usually with wings and divided into three parts (head, thorax, abdomen). You can access the database as `animalClass`/`animal_class`/`AnimalClass` depending on your language. --- Here\'s how a trivia preparation session would go: John asks: ```identify_animal(\'eagle\')``` ...and you reply (return) with: ```Bird - Warm-blooded vertebrates characterized by feathers and beaks, laying hard-shelled eggs```","solution":"def identify_animal(animal): Given an animal name, this function returns the class to which the animal belongs along with a general description of that class. animal_class = { \'lion\': \'Mammal - Warm-blooded vertebrates that have hair or fur and whose females produce milk to feed their young.\', \'eagle\': \'Bird - Warm-blooded vertebrates characterized by feathers and beaks, laying hard-shelled eggs.\', \'crocodile\': \'Reptile - Cold-blooded vertebrates with scales or scutes that lay soft-shelled eggs on land.\', \'frog\': \'Amphibian - Cold-blooded vertebrates that spend their early life in water, and adulthood on land.\', \'shark\': \'Fish - Cold-blooded aquatic vertebrates that have gills throughout life and fins.\', \'butterfly\': \'Insect - A large group of arthropods, usually with wings and divided into three parts (head, thorax, abdomen).\' } return animal_class.get(animal, \\"Unknown animal\\")"},{"question":"You are given a list of non-negative integers representing the amount of rainfall collected in each bucket over a sequence of days. Your task is to calculate the maximum amount of water that can be collected between two buckets. You should consider that water can only be collected in dips between buckets and that no water can overflow the buckets from either end. **Input:** - A list of non-negative integers representing the height of the rainfall in each bucket. **Output:** - An integer representing the maximum amount of water that can be collected between two buckets. **Example 1:** ``` Input: [2, 0, 2] Output: 2 ``` Explanation: ``` 2 # # 2 # There are 2 units of water trapped between the two buckets. ``` **Example 2:** ``` Input: [3, 0, 2, 0, 4] Output: 7 ``` Explanation: ``` 3 # # # 3 # # # # # # # There are 7 units of water trapped between the buckets. ``` **Example 3:** ``` Input: [1, 1, 1, 1, 1] Output: 0 ``` Explanation: ``` 1 1 1 1 1 # # There are no dips between the buckets, hence no water is trapped. ``` Implement a function `max_water_collected(buckets: List[int]) -> int` that computes the maximum amount of water that can be collected. **Constraints:** - The length of the list will be no more than 10^4. - The height of the rainfall in each bucket will be no more than 10^4.","solution":"def max_water_collected(buckets): Calculates the maximum amount of water that can be collected between the buckets. if not buckets: return 0 n = len(buckets) left_max = [0] * n right_max = [0] * n left_max[0] = buckets[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], buckets[i]) right_max[n - 1] = buckets[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], buckets[i]) water_collected = 0 for i in range(n): water_collected += min(left_max[i], right_max[i]) - buckets[i] return water_collected"},{"question":"Write a function that takes a list of integers and returns a new list where each integer is duplicated a number of times equal to its value. Assume all integers are non-negative. - If the list is empty, the function should return an empty list. - The original order of the integers should be preserved. Examples: `[1, 2, 3] -> [1, 2, 2, 3, 3, 3]` `[0, 4, 1] -> [4, 4, 4, 4, 1]` `[2, 1, 3] -> [2, 2, 1, 3, 3, 3]` `[0, 0, 0] -> []` `[] -> []`","solution":"def duplicate_integers(nums): Given a list of non-negative integers, returns a new list where each integer is duplicated a number of times equal to its value. The order of integers is preserved. Parameters: nums (list): A list of non-negative integers. Returns: list: A new list with each integer duplicated as described. result = [] for num in nums: if num > 0: result.extend([num] * num) return result"},{"question":"Given a list of positive integers representing the heights of buildings, with each element representing the height of the building at that position, write a function to determine the amount of water that can be trapped between the buildings after a rain. Example: heights = [4, 2, 0, 3, 2, 5] The water trapped is 9 units: - Index 1 (height 2): 2 units of water trapped - Index 2 (height 0): 4 units of water trapped - Index 3 (height 3): 1 unit of water trapped - Index 4 (height 2): 2 units of water trapped So the output is 9. Function Signature: ```python def trap_rain_water(heights: List[int]) -> int: # Your code goes here ``` Constraints: - The length of the list will be in the range [0, 1000]. - The heights of buildings will be non-negative integers. Notes: - The left and right sides of the list are walls and no water can be trapped beyond the first and last elements. - Do not change the order of the buildings in the input list.","solution":"from typing import List def trap_rain_water(heights: List[int]) -> int: if not heights: return 0 n = len(heights) left_max, right_max = [0] * n, [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the trapped water water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Given a string s consisting of lowercase letters, your task is to return the length of the longest substring without repeating characters. Example: Input: \\"abcabcbb\\" Output: 3 Input: \\"bbbbb\\" Output: 1 Input: \\"pwwkew\\" Output: 3 Explanation: The answer would be \\"abc\\", with the length of 3.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. :param s: input string consisting of lowercase letters :type s: str :return: length of the longest substring without repeating characters :rtype: int if not s: return 0 char_set = set() left = 0 max_length = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a function named `rotate_string(s, n)` that takes in a string `s` and an integer `n` and returns the string with its characters rotated to the right by `n` positions. If `n` is negative, it should rotate to the left by `|n|` positions. The rotation should wrap around the string, and the function should handle edge cases such as empty strings and very large positive or negative values of `n`. For example: ```python rotate_string(\\"hello\\", 2) should return \\"lohel\\" rotate_string(\\"hello\\", -2) should return \\"llohe\\" rotate_string(\\"hello\\", 5) should return \\"hello\\" rotate_string(\\"hello\\", 7) should return \\"lohel\\" rotate_string(\\"\\", 3) should return \\"\\" rotate_string(\\"python\\", -8) should return \\"thonpy\\" ```","solution":"def rotate_string(s, n): Rotates the characters in the string `s` to the right by `n` positions. If `n` is negative, it rotates to the left by `|n|` positions. :param s: The input string to rotate. :param n: The number of positions to rotate the string. :return: The rotated string. if not s: return s n = n % len(s) # Handle rotations greater than string length return s[-n:] + s[:-n]"},{"question":"When developing his new game, Chef wants to implement a special scoring function based on sequences of moves. He has a sequence of N moves, each represented by a score. Chef wishes to find the length of the longest subsequence (not necessarily contiguous) where the scores are in strictly increasing order. Your task is to write a program to determine the length of this longest strictly increasing subsequence for each of Chef\'s games. -----Input----- The first line of input contains a single integer T denoting the number of test cases. The first line of each test case contains an integer N denoting the number of moves in the game. The second line of each test case contains N integers separated by space, representing the scores of the N moves. -----Output----- For each test case, output a single line containing an integer corresponding to the length of the longest strictly increasing subsequence of scores. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 0 ≤ scores[i] ≤ 10000 -----Example----- Input 2 6 5 8 3 7 9 1 5 10 22 9 33 21 Output 3 3 -----Explanation----- - Test 1: One of the longest increasing subsequences is [5, 7, 9], so the length is 3. - Test 2: One of the longest increasing subsequences is [10, 22, 33], so the length is 3.","solution":"def length_of_lis(moves): Finds the length of the longest increasing subsequence in the given list of moves. if not moves: return 0 # List to store the longest increasing subsequence length at each index lis = [1] * len(moves) # Build the LIS array for i in range(1, len(moves)): for j in range(i): if moves[i] > moves[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # The length of the longest increasing subsequence return max(lis) def solve_longest_increasing_subsequence(test_cases): results = [] for case in test_cases: N, moves = case results.append(length_of_lis(moves)) return results"},{"question":"Given an integer sequence A of length N, Snuke is interested in sorting a subsequence of A. Specifically, he wants to find the length of the longest subsequence that can be sorted in non-decreasing order by removing at most one element from the subsequence. -----Constraints----- - 1 leq N leq 10^5 - 1 leq A_i leq 10^9 -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print a single integer representing the length of the longest subsequence that can be sorted in non-decreasing order by removing at most one element. -----Sample Input----- 8 1 2 4 3 5 6 7 8 -----Sample Output----- 7 In this case, by removing the element \'4\', the subsequence `1 2 3 5 6 7 8` becomes sorted in non-decreasing order. Thus, the answer is 7.","solution":"def longest_subsequence_with_one_removal(N, A): Returns the length of the longest subsequence that can be sorted in non-decreasing order by removing at most one element from the subsequence. if N == 1: return 1 left = [1] * N right = [1] * N for i in range(1, N): if A[i] >= A[i - 1]: left[i] = left[i - 1] + 1 for i in range(N - 2, -1, -1): if A[i] <= A[i + 1]: right[i] = right[i + 1] + 1 max_length = max(left) for i in range(1, N - 1): if A[i - 1] <= A[i + 1]: max_length = max(max_length, left[i - 1] + right[i + 1]) return max_length"},{"question":"In a world where technology is seamlessly integrated into daily life, there\'s a new trend: smart gardens. Each garden has a number of smart planters, and each planter has a specific amount of water it can hold. A gardener wants to water all the plants in such a way that every planter gets exactly enough water to be full. However, the water supply system is a bit quirky: you can only increase or decrease the amount of water in all planters in steps of exactly 1 liter at a time. Your task is to determine the minimum number of steps required to make sure that all planters are full. -----Input----- * The first line contains an integer n, the number of planters. * The second line contains n space-separated integers representing the current water levels of the planters. * The third line contains n space-separated integers representing the capacities of the respective planters. -----Output----- * Print the minimum number of steps required to fill all the planters to their capacities. -----Example----- Input: 4 2 1 3 5 5 3 4 7 Output: 8 By: Nina, Roy, Lila, Ethan","solution":"def min_steps_to_fill_planters(n, current_levels, capacities): steps = 0 for i in range(n): steps += abs(capacities[i] - current_levels[i]) return steps"},{"question":"You are given a list of integers representing the levels of magic each wizard has. The wizards are competing in a single-elimination tournament where in each match, the wizard with the higher level of magic wins. If two wizards have the same level of magic, the one who appears first in the list wins. A single-elimination tournament works as follows: pairs of wizards are matched up against each other, and the winner of each pair advances to the next round. This continues until only one wizard remains, who is the overall winner of the tournament. Write a function to determine the winner of the tournament given the initial list of magic levels of the wizards. -----Input----- The input starts with an integer T, where 1 ≤ T ≤ 50, indicating the number of test cases. Each test case consists of a single line of integers. The first integer of each line is n, where 1 ≤ n ≤ 1000, representing the number of wizards. The following n integers represent the levels of magic of the wizards. -----Output----- For each test case, output a single integer which is the level of magic of the wizard who wins the tournament. -----Example----- Input: 3 4 10 40 30 20 2 50 50 5 15 25 15 25 15 Output: 40 50 25","solution":"def tournament_winner(ts): Determine the winner of the tournament given the list of magic levels of the wizards for each test case. def find_winner(magic_levels): while len(magic_levels) > 1: next_round = [] for i in range(0, len(magic_levels), 2): if i + 1 < len(magic_levels): if magic_levels[i] >= magic_levels[i + 1]: next_round.append(magic_levels[i]) else: next_round.append(magic_levels[i + 1]) else: next_round.append(magic_levels[i]) magic_levels = next_round return magic_levels[0] result = [] for t in ts: n = t[0] magic_levels = t[1:] result.append(find_winner(magic_levels)) return result"},{"question":"A well-formed subsequence of a string is defined as follows: - It is a subsequence that forms a valid bracket sequence, i.e., it should have equal numbers of \'(\' and \')\' characters in the correct order. Given a string s consisting of only \'(\' and \')\', return the length of the longest well-formed subsequence that can be derived from s. Example 1: Input: s = \\"(()())\\" Output: 6 Explanation: The entire string is already a well-formed subsequence. Example 2: Input: s = \\"())(\\" Output: 2 Explanation: The longest well-formed subsequence is \\"()\\". Example 3: Input: s = \\"((((\\" Output: 0 Explanation: There are no well-formed subsequences. Example 4: Input: s = \\"()())()\\" Output: 6 Explanation: The longest well-formed subsequence is \\"()()()\\". Constraints: - 1 <= s.length <= 1000 - s consists of only \'(\' and \')\' characters.","solution":"def longest_well_formed_subsequence_length(s): Returns the length of the longest well-formed subsequence of parentheses in the given string s. open_count = 0 close_count = 0 # Count the number of well-formed pairs for char in s: if char == \'(\': open_count += 1 elif char == \')\' and open_count > 0: open_count -= 1 close_count += 1 # Each well-formed subsequence will have both an opening and a closing bracket for each pair. return 2 * close_count"},{"question":"Write a function that takes an integer input and returns the factorial of that number. Do not use any built-in function that directly computes the factorial. -----Input:----- Each testcase consists of a single integer. -----Output:----- For each testcase, output a single integer, the factorial of the input number. -----Sample Input:----- 5 -----Sample Output:----- 120","solution":"def factorial(n): Computes the factorial of a given number n. Args: n (int): non-negative integer to compute factorial of Returns: int: factorial of n if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Given an array of positive integers A, find the number of contiguous subarrays where the sum of the subarray is equal to a given number K. Example 1: Input: A = [1,1,1], K = 2 Output: 2 Explanation: The subarrays that sum to 2 are [1,1] (at index 0 and 1) and [1,1] (at index 1 and 2). Example 2: Input: A = [1,2,3], K = 3 Output: 2 Explanation: The subarrays that sum to 3 are [3] (at index 2) and [1,2] (at index 0 and 1). Note: - 1 <= A.length <= 20000 - 1 <= A[i] <= 1000 - 1 <= K <= 100000","solution":"def subarray_sum(A, K): Returns the number of contiguous subarrays which sum to K. sum_count = {0: 1} total_sum = 0 count = 0 for num in A: total_sum += num if (total_sum - K) in sum_count: count += sum_count[total_sum - K] sum_count[total_sum] = sum_count.get(total_sum, 0) + 1 return count"},{"question":"Implement a function that takes a list of student records, where each record is represented as a dictionary with keys \\"name\\", \\"age\\", and \\"grade\\". The function should return a new list of student names, sorted primarily by grade in descending order, and secondarily by name in ascending order. Example: Input: [{\\"name\\": \\"Alice\\", \\"age\\": 23, \\"grade\\": 90}, {\\"name\\": \\"Bob\\", \\"age\\": 22, \\"grade\\": 90}, {\\"name\\": \\"Charlie\\", \\"age\\": 23, \\"grade\\": 85}] Output: [\\"Alice\\", \\"Bob\\", \\"Charlie\\"] Hints: 1. You may use comparison functions or lambda expressions for sorting.","solution":"def sort_students_by_grade_then_name(students): Takes a list of student records and returns a list of student names sorted primarily by grade in descending order and secondarily by name in ascending order. Args: students (list of dict): List of student records, each record is a dictionary with keys \'name\', \'age\', and \'grade\'. Returns: list of str: List of student names sorted as per the criteria. sorted_students = sorted(students, key=lambda x: (-x[\'grade\'], x[\'name\'])) return [student[\'name\'] for student in sorted_students] # Example usage: # students = [ # {\\"name\\": \\"Alice\\", \\"age\\": 23, \\"grade\\": 90}, # {\\"name\\": \\"Bob\\", \\"age\\": 22, \\"grade\\": 90}, # {\\"name\\": \\"Charlie\\", \\"age\\": 23, \\"grade\\": 85} # ] # print(sort_students_by_grade_then_name(students)) # Output should be: [\\"Alice\\", \\"Bob\\", \\"Charlie\\"]"},{"question":"The code provided is supposed to calculate the factorial of a given integer `n`. However, it produces incorrect results for certain inputs. # Task Fix the bug to ensure the factorial is calculated correctly for all non-negative integer inputs. # Notes The integer `n` will always be a non-negative integer.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"# Task Given a list of integers, return a new list where each integer is substituted by the product of all other integers in the list except itself. The function should handle edge cases such as an input list with only one element and lists that contain zeros. # Examples: ``` |--------------+-------------------------+-------------------------------| | Input | Example Lists | Output | |--------------+-------------------------+-------------------------------| | (2,) | [2] | [1] | | (1, 2, 3) | [1, 2, 3] | [6, 3, 2] | | (0, 4, 6, 0) | [0, 4, 6, 0] | [0, 0, 0, 0] | | (9, 3, 2) | [9, 3, 2] | [6, 18, 27] | |--------------+-------------------------+-------------------------------| ``` # Restrictions 1. The first line of your code has to be `def product_except_self(lst):` 2. Your code except for the first line mustn\'t contain the words `set, reverse, sum` or their reversed forms (e.g., `mus`) or any string which contains these words or their reversed forms. (The check is **case-insensitive**.) 3. The function should have a linear time complexity regarding the length of the input list. # Hint - Use prefix and suffix product arrays or a single pass approach with space reduction to achieve linear time complexity. Remember to verify your solution with various edge cases and different input lengths. Happy coding!","solution":"def product_except_self(lst): Returns a new list where each integer is substituted by the product of all other integers in the list except itself. n = len(lst) if n == 0: return [] elif n == 1: return [1] left_products = [1] * n right_products = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * lst[i - 1] for j in range(n - 2, -1, -1): right_products[j] = right_products[j + 1] * lst[j + 1] result = [left_products[i] * right_products[i] for i in range(n)] return result"},{"question":"Write a function that takes a string input which represents a sequence of instructions to traverse a 2D grid from a starting point (0, 0). The instructions consist of characters \'U\', \'D\', \'L\', and \'R\' which correspond to moving up, down, left, and right respectively. The function should return a tuple representing the final coordinates after following all the instructions. Rules: 1. Each character in the string represents a single move. 2. The grid is infinite, meaning the coordinates can go to any positive or negative values. Examples: \'UU\' -> (0, 2) \'LR\' -> (0, 0) \'UUDDLLRR\' -> (0, 0) \'UURRDDLL\' -> (0, 0) \'ULDR\' -> (0, 0) The output should be a tuple of integers.","solution":"def traverse_grid(instructions): Returns the final coordinates after following the sequence of instructions. Args: instructions (str): sequence of \'U\', \'D\', \'L\', \'R\' representing moves on a 2D grid. Returns: tuple: final coordinates (x, y) after following all the instructions. x, y = 0, 0 for instr in instructions: if instr == \'U\': y += 1 elif instr == \'D\': y -= 1 elif instr == \'L\': x -= 1 elif instr == \'R\': x += 1 return (x, y)"},{"question":"Write a function that takes a string as an input and returns a new string where each character in the original string is repeated once. For example, the input \\"hello\\" should return \\"hheelllloo\\". Ensure that your solution does not use any built-in repetition functions provided by the programming language.","solution":"def repeat_characters(s): Takes a string as input and returns a new string where each character in the original string is repeated once. result = [] for char in s: result.append(char) result.append(char) return \'\'.join(result)"},{"question":"Robin loves puzzles. One day he encountered a peculiar type of numerical puzzle. The puzzle consists of a sequence of numbers. Some of these numbers appear more than once while others are unique. Robin\'s task is to find out the first non-repeating number in the sequence. However, Robin is so fond of coding, that he wants to write a program to solve this puzzle for him. Given a sequence of numbers, you need to determine the first non-repeating number in the sequence. If all the numbers are repeating, return -1. Here\'s the full specification of the task: -----Input----- The first line contains an integer n (1 le n le 100,000) — the length of the sequence. The second line contains n space-separated integers representing the sequence. Each integer in the sequence is between -10^6 and 10^6. -----Output----- Print one integer — the first non-repeating number in the sequence, or -1 if there is no such number. -----Examples----- Input 8 4 5 1 2 0 4 1 2 Output 5 Input 5 7 7 7 7 7 Output -1 Input 10 9 2 3 2 6 6 5 5 8 9 Output 3 -----Note----- In the first example, the number 5 is the first number that does not repeat. In the second example, all numbers are repeating, thus the output is -1. In the third example, the number 3 is the first number that does not repeat.","solution":"def first_non_repeating_number(sequence): Finds the first non-repeating number in the given sequence. Parameters: sequence (list): A list of integers. Returns: int: The first non-repeating number, or -1 if all numbers are repeating. count = {} # Count occurrence of each number in the list for num in sequence: if num in count: count[num] += 1 else: count[num] = 1 # Find the first number with a count of 1 for num in sequence: if count[num] == 1: return num return -1"},{"question":"Write a function ```python find_max_consecutive_sum(arr, k) ``` that takes a list of integers `arr` and an integer `k`, and returns the maximum sum of any `k` consecutive elements in the array. For example: ```python find_max_consecutive_sum([1, 4, 2, 10, 23, 3, 1, 0, 20], 4) # 39 find_max_consecutive_sum([2, 3], 3) # None ``` **Note:** - If the list has fewer than `k` elements, the function should return `None`. - The function should handle negative numbers and zeros within the list.","solution":"def find_max_consecutive_sum(arr, k): Returns the maximum sum of any k consecutive elements in the array. If the array has fewer than k elements, returns None. if len(arr) < k: return None # Calculate the initial window sum window_sum = sum(arr[:k]) max_sum = window_sum # Slide the window over the array for i in range(k, len(arr)): window_sum += arr[i] - arr[i - k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"In a warehouse, there is an arrangement of N boxes in a single line. Each box holds a certain number of items. You are asked multiple queries regarding these boxes. Each query is of two types: 1. Add a certain number of items to all boxes in a given range. 2. Find the maximum number of items in any single box within a given range. -----Input----- - The first line contains two space-separated integers, N (the number of boxes) and Q (the number of queries you need to process). - The second line contains N integers, where the i-th integer represents the initial number of items in the i-th box. - The next Q lines contain either: - A query of type `1 L R X` which means add X items to each box from the L-th to the R-th box (inclusive). - A query of type `2 L R` which means find the maximum number of items in any box from the L-th to the R-th box (inclusive). -----Output----- - For each query of type `2 L R`, output a single integer which is the maximum number of items in any box from the L-th to the R-th box (inclusive). -----Constraints----- - 1 <= N, Q <= 100000 - 1 <= initial number of items in each box, X <= 10^6 - 1 <= L <= R <= N -----Example----- Input: 5 3 1 2 3 4 5 1 2 4 3 2 1 5 2 2 3 Output: 8 6","solution":"class Warehouse: def __init__(self, items): self.items = items def process_queries(self, queries): results = [] for query in queries: if query[0] == 1: _, L, R, X = query for i in range(L - 1, R): self.items[i] += X elif query[0] == 2: _, L, R = query results.append(max(self.items[L - 1:R])) return results"},{"question":"Write a function `longest_substring_without_repeating_characters(s)` that takes a string `s` as input and returns an integer representing the length of the longest substring without repeating characters. A substring is defined as a contiguous sequence of characters within the string. For example, given the string `\\"abcabcbb\\"`, the function should return `3`, corresponding to the substring `\\"abc\\"`. If the input string is empty, the function should return `0`.","solution":"def longest_substring_without_repeating_characters(s): Given a string `s`, return the length of the longest substring without repeating characters. if not s: return 0 # Dictionary to store the last positions of each character char_index_map = {} longest = 0 start = 0 for i, char in enumerate(s): # If the character is found in the map and the start is less than or equal to the character index if char in char_index_map and start <= char_index_map[char]: start = char_index_map[char] + 1 else: longest = max(longest, i - start + 1) # Update the last position of the character char_index_map[char] = i return longest"},{"question":"To verify the validity of a user-generated passphrase, systems often enforce constraints to ensure a higher level of security. Write a function that checks if a given passphrase adheres to a set of predefined rules. # Passphrase Rules: 1. The passphrase must be at least 12 characters long. 2. It must contain at least one uppercase letter. 3. It must contain at least one lowercase letter. 4. It must include at least one digit. 5. It must have at least one special character from this set: `!@#%^&*()-+`. # Input: - A single string `passphrase`, representing the passphrase to be checked. # Output: - Print \\"Valid\\" if the passphrase meets all the criteria. - Print \\"Invalid\\" if the passphrase does not meet one or more criteria. # Constraints: - The input string will not be longer than 100 characters. # Example Input: ```plaintext Passphrase_Example1 ``` # Example Output: ```plaintext Invalid ``` # Explanation: The passphrase `Passphrase_Example1` is invalid because it does not contain any digit. # Example Input: ```plaintext StrongP@ssphrase123 ``` # Example Output: ```plaintext Valid ``` # Explanation: The passphrase `StrongP@ssphrase123` is valid as it contains at least 12 characters, includes uppercase and lowercase letters, has digits, and contains special characters. Use the following Python function format to implement your solution: ```python def check_passphrase(passphrase: str) -> None: # Your code here # Read input import sys input = sys.stdin.read().strip() # Validating the passphrase check_passphrase(input) ``` Implement the function to ensure that it adheres to the criteria specified above.","solution":"def check_passphrase(passphrase: str) -> None: Checks if the passphrase adheres to the predefined rules for validation. import re if len(passphrase) < 12: print(\\"Invalid\\") return if not re.search(r\\"[A-Z]\\", passphrase): print(\\"Invalid\\") return if not re.search(r\\"[a-z]\\", passphrase): print(\\"Invalid\\") return if not re.search(r\\"[0-9]\\", passphrase): print(\\"Invalid\\") return if not re.search(r\\"[!@#%^&*()-+]\\", passphrase): print(\\"Invalid\\") return print(\\"Valid\\")"},{"question":"You are given an array of integers. Your task is to determine whether there is a pair of distinct indices (i, j) such that the absolute difference between the two numbers at those indices is equal to a given value k. Write a function: ```python def has_pair_with_difference(nums: List[int], k: int) -> bool: ``` # Input: - `nums` is a list of `n` integers (1 <= n <= 10^5) - `k` is an integer (0 <= k <= 10^9) # Output: - Return `True` if there exists a pair (i, j) such that `|nums[i] - nums[j]| == k` and `i != j` - Return `False` otherwise # Examples: ```python assert has_pair_with_difference([1, 5, 3, 4, 2], 2) == True ``` In this example, the pairs (5, 3), (3, 1), (4, 2) etc., all have an absolute difference of 2. ```python assert has_pair_with_difference([8, 12, 16, 4, 0, 20], 4) == True ``` In this example, pairs (12, 8), (16, 12), etc., all have an absolute difference of 4. ```python assert has_pair_with_difference([1, 2, 3, 4, 5], 10) == False ``` In this example, no pairs with an absolute difference of 10. # Note: - The array `nums` can contain both positive and negative integers, and duplicates are possible. - Your solution should be efficient to handle the upper constraint limits in a reasonable time.","solution":"from typing import List def has_pair_with_difference(nums: List[int], k: int) -> bool: Determines if there exist two distinct indices i and j in the list such that the absolute difference between nums[i] and nums[j] is equal to k. :param nums: List of integers :param k: Integer value for the required absolute difference :return: True if such a pair exists, otherwise False num_set = set(nums) for num in nums: if (num + k in num_set and (num + k != num or nums.count(num) > 1)) or (num - k in num_set and (num - k != num or nums.count(num) > 1)): return True return False"},{"question":"Alice has found a new game involving sequences of integers. She defines a \\"peak\\" in a sequence as an element that is greater than both of its neighbors. The first and last elements of the sequence are not considered peaks (no matter their values). She wants to know how many peaks exist in a given sequence of integers. Can you help her? -----Input----- The first line contains a single integer n (3 leq n leq 300,000) — the number of integers in the sequence. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6) — representing Alice\'s sequence. -----Output----- Print a single integer — the number of peaks in Alice\'s sequence. -----Examples----- Input 6 1 3 2 4 1 5 Output 2 Input 5 1 2 3 4 5 Output 0 -----Note----- In the first sample case, there are peaks at positions 2 and 4. Specifically, 3 is a peak because it is greater than both 1 and 2, and 4 is a peak because it is greater than both 2 and 1. In the second sample case, there are no peaks since none of the middle elements are greater than their neighbors.","solution":"def count_peaks(n, sequence): Returns the number of peaks in the given sequence of integers. Parameters: n (int): The number of integers in the sequence. sequence (list of int): The sequence of integers. Returns: int: The number of peaks in the sequence. count = 0 for i in range(1, n - 1): if sequence[i] > sequence[i - 1] and sequence[i] > sequence[i + 1]: count += 1 return count"},{"question":"Given an integer `n`, return a list of integers representing the counts of the divisors of each number from 1 to `n` inclusive. **Note**: big inputs will be tested. Examples: For `n = 5`, the return should be `[1, 2, 2, 3, 2]`. For `n = 10`, the return should be `[1, 2, 2, 3, 2, 4, 2, 4, 3, 4]`. Explanation: - 1 has 1 divisor: `[1]` - 2 has 2 divisors: `[1, 2]` - 3 has 2 divisors: `[1, 3]` - 4 has 3 divisors: `[1, 2, 4]` - 5 has 2 divisors: `[1, 5]` - 6 has 4 divisors: `[1, 2, 3, 6]` - 7 has 2 divisors: `[1, 7]` - 8 has 4 divisors: `[1, 2, 4, 8]` - 9 has 3 divisors: `[1, 3, 9]` - 10 has 4 divisors: `[1, 2, 5, 10]`","solution":"def count_divisors(n): Returns a list of integers representing the counts of the divisors of each number from 1 to n inclusive. def count_divisors_of_num(num): count = 0 for i in range(1, num + 1): if num % i == 0: count += 1 return count return [count_divisors_of_num(i) for i in range(1, n + 1)]"},{"question":"There are n servers in a data center, each server has a certain initial load (the number of tasks it is processing). The operations performed on these servers can be of two types: - Increase the load to all servers in a specified range by a given value. - Query the load on a specific server. Your task is to process these operations and respond to the query operations with the current load on the specified server. Input: - The first line contains two integers n (number of servers) and m (number of operations). - The second line contains n integers representing the initial load on each server. - The next m lines describe the operations which can be of the following forms: - `ADD l r x` - Increase the load on servers from index l to r (inclusive) by x. - `QUERY s` - Output the current load on server at index s. Output: For each `QUERY` operation, output the current load of the specified server. Example: Input: ``` 5 4 4 2 7 1 3 ADD 2 4 5 QUERY 3 ADD 1 5 2 QUERY 5 ``` Output: ``` 12 5 ``` Constraints: - 1 ≤ n ≤ 10^6 - 1 ≤ m ≤ 10^5 - 1 ≤ l ≤ r ≤ n - 1 ≤ s ≤ n - 0 ≤ initial load, x ≤ 10^3","solution":"def process_operations(n, m, initial_loads, operations): Processes the operations and returns the result of the QUERY operations. :param n: Number of servers :param m: Number of operations :param initial_loads: List of initial loads on servers :param operations: List of operations to be performed on servers :return: List of results of the QUERY operations results = [] loads = initial_loads[:] for operation in operations: parts = operation.split() op_type = parts[0] if op_type == \\"ADD\\": l = int(parts[1]) - 1 r = int(parts[2]) - 1 x = int(parts[3]) for i in range(l, r+1): loads[i] += x elif op_type == \\"QUERY\\": s = int(parts[1]) - 1 results.append(loads[s]) return results"},{"question":"You are given an array of N integers. A special operation can be applied to the array: you can choose any two adjacent elements and remove the one with the smaller value (if they are equal, you can remove either one). After applying the operation multiple times, you will be left with only one element. Your task is to find the maximum possible value of this remaining element. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase contains two lines: - First line contains an integer N denoting the number of elements in the array. - Second line contains N space-separated integers denoting the elements of the array. -----Output:----- For each testcase, print a single integer representing the maximum possible value of the remaining element after applying the operations. -----Constraints----- - 1 leq T leq 10^4 - 1 leq N leq 10^5 - 1 leq A_i leq 10^9 -----Sample Input:----- 2 6 1 3 2 4 6 5 4 10 4 2 8 -----Sample Output:----- 6 10 -----EXPLANATION:----- For the first test case, the maximum possible value of the remaining element is 6. For the second test case, the maximum possible value of the remaining element is 10.","solution":"def max_remaining_element(T, test_cases): Return the maximum possible value of the remaining element after applying the operation for each test case. results = [] for i in range(T): N, array = test_cases[i] max_value = max(array) results.append(max_value) return results"},{"question":"Jack is a mechanical engineer who frequently needs to measure distances in his projects. He has been using a variety of tools and units for his measurements over the years. Recently, he decided to automate the conversion of measurements from inches to centimeters but encountered some difficulties. You are to help Jack by writing a program that will read a list of distances in inches and convert each one to centimeters. The formula for the conversion is: 1 inch = 2.54 centimeters. -----Input----- The first line contains an integer N denoting the number of measurements. Then follow N lines, each containing a single integer representing the distance in inches. You can assume that 1 <= N <= 100 and 1 <= distance in inches <= 1000. -----Output----- For each measurement, output the converted distance in centimeters on a new line. The output should be rounded to two decimal places. -----Example----- Input: 3 12 50 100 Output: 30.48 127.00 254.00","solution":"def inches_to_cm(distances): Converts a list of distances from inches to centimeters. Args: distances (list): List of distances in inches. Returns: list: List of distances in centimeters, rounded to two decimal places. conversion_factor = 2.54 return [round(distance * conversion_factor, 2) for distance in distances]"},{"question":"You are given a list of integers and a target integer. Your task is to determine if there are two distinct elements in the list whose sum equals the target integer. -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case consists of: - The first line contains an integer N, the number of elements in the list. - The second line contains N space-separated integers, representing the elements of the list. - The third line contains a single integer, target, the target sum. -----Output:----- - For each test case, print \\"yes\\" (without quotes) if there are two distinct elements in the list whose sum equals the target integer, else print \\"no\\" (without quotes). -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 1000 - -10^5 leq elements of the list leq 10^5 - -10^5 leq target leq 10^5 -----Sample Input:----- 2 5 1 2 3 4 5 6 4 1 2 3 9 8 -----Sample Output:----- yes no -----Explanation:----- - In the first test case, the sum of 1 and 5 equals 6. - In the second test case, no two elements sum up to 8.","solution":"def check_sum_pairs(T, test_cases): results = [] for i in range(T): N, numbers, target = test_cases[i] number_set = set() found = False for num in numbers: if (target - num) in number_set: results.append(\\"yes\\") found = True break number_set.add(num) if not found: results.append(\\"no\\") return results"},{"question":"Task: Write a function that takes a string containing an arithmetic expression consisting of integers and the operators `+`, `-`, `*`, `/`. The function should output the evaluated result of this expression as a float. **You should not use Python\'s `eval` function.** Examples: ```python evaluate(\\"3+5\\") = 8.0 evaluate(\\"10+2*6\\") = 22.0 evaluate(\\"100*2+12\\") = 212.0 evaluate(\\"100*(2+12)\\") = 1400.0 evaluate(\\"100*(2+12)/14\\") = 100.0 ``` Constraints: * The given string will be a valid arithmetic expression. * The division operator `/` should result in float division. * The order of operations should be respected. Notes: * To avoid floating-point precision issues, use Python\'s `float` for the arithmetic. * You can assume that the input contains no spaces and is a valid arithmetic expression.","solution":"import operator def evaluate(expression): This function evaluates a given arithmetic expression string containing integers and operators (+, -, *, /) respecting the order of operations and parentheses. def get_operator_fn(op): return { \'+\': operator.add, \'-\': operator.sub, \'*\': operator.mul, \'/\': operator.truediv, }[op] def higher_precedence(op1, op2): precedences = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} return precedences[op1] > precedences[op2] def shunting_yard(expression): output = [] operators = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = [] while i < len(expression) and (expression[i].isdigit() or expression[i] == \'.\'): num.append(expression[i]) i += 1 output.append(\'\'.join(num)) continue if expression[i] in \'+-*/\': while (operators and operators[-1] in \'+-*/\' and higher_precedence(operators[-1], expression[i])): output.append(operators.pop()) operators.append(expression[i]) elif expression[i] == \'(\': operators.append(expression[i]) elif expression[i] == \')\': while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() i += 1 while operators: output.append(operators.pop()) return output def evaluate_rpn(tokens): stack = [] for token in tokens: if token in \'+-*/\': b = float(stack.pop()) a = float(stack.pop()) stack.append(get_operator_fn(token)(a, b)) else: stack.append(token) return float(stack[0]) rpn = shunting_yard(expression) return evaluate_rpn(rpn)"},{"question":"You are given an integer array `nums` and an integer `k`. You need to perform a series of operations on `nums` to satisfy the following conditions: 1. Sum the digits of each number in `nums`. 2. Append the resulting sums to a new array. 3. Perform step 1 for `k` iterations. Your task is to return the array resulting from the `k`-th iteration. **Constraints:** - `1 <= nums.length <= 100` - `1 <= nums[i] <= 10^6` - `1 <= k <= 10` **Example 1:** ``` Input: nums = [13, 25, 83], k = 2 Output: [8] Explanation: First iteration: 13 -> 1 + 3 = 4 25 -> 2 + 5 = 7 83 -> 8 + 3 = 11 -> 1 + 1 = 2 New array after first iteration: [4, 7, 2] Second iteration: 4 -> 4 7 -> 7 2 -> 2 New array after second iteration: [8] ``` **Example 2:** ``` Input: nums = [111, 222], k = 3 Output: [1, 2] Explanation: First iteration: 111 -> 1 + 1 + 1 = 3 222 -> 2 + 2 + 2 = 6 New array after first iteration: [3, 6] Second iteration: 3 -> 3 6 -> 6 New array after second iteration: [3, 6] Third iteration: 3 -> 3 6 -> 6 New array after third iteration: [1, 2] ``` **Hint:** - Carefully observe how the sums of digits are recalculated over each iteration. - Ensure each sum is properly broken down into its individual digits and summed until you achieve a single-digit sum if required.","solution":"def sum_of_digits(num): Returns the sum of the digits of the given number. s = 0 while num > 0: s += num % 10 num //= 10 return s def transform(nums): Transforms the given list of integers by summing the digits of each integer. return [sum_of_digits(num) for num in nums] def k_iterations(nums, k): Performs k iterations of transforming the array by summing the digits of each integer. Returns the resulting array after k iterations. for _ in range(k): nums = transform(nums) return nums"},{"question":"Given a list of timestamps and the number of people entering or exiting a building at each timestamp, find the timestamp at which the maximum number of people are inside the building. If there are multiple timestamps with the same number of people inside the building, return the earliest timestamp. **Input:** - The first line contains a single integer, T, the number of test cases. - For each test case, the first line contains a single integer N, the number of timestamps. - Each of the next N lines contains a string representing a timestamp in the format \\"HH:MM\\", followed by an integer representing the number of people entering (positive) or exiting (negative) the building at that timestamp. **Output:** - For each test case, output the timestamp (in the format \\"HH:MM\\") at which the maximum number of people are inside the building. **Constraints:** - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - \\"HH:MM\\" represents a valid time in 24-hour format. - Any given timestamp appears only once within each test case. - Total number of people inside the building at any time will be non-negative and less than or equal to 10000. **Example:** ``` Input: 2 5 09:00 5 09:30 -3 10:00 4 10:30 -2 11:00 3 3 12:00 7 12:30 -4 13:00 2 Output: 10:00 12:00 ``` **Explanation:** For the first test case: - At 09:00, 5 people enter (total 5). - At 09:30, 3 people leave (total 2). - At 10:00, 4 people enter (total 6). - At 10:30, 2 people leave (total 4). - At 11:00, 3 people enter (total 7). The maximum number of people inside the building is 7, which occurs at 11:00. For the second test case: - At 12:00, 7 people enter (total 7). - At 12:30, 4 people leave (total 3). - At 13:00, 2 people enter (total 5). The maximum number of people inside the building is 7, which occurs at 12:00.","solution":"def find_peak_time(T, test_cases): results = [] for test_case in test_cases: N, data = test_case timestamps, changes = zip(*data) time_population = {} current_population = 0 for i in range(N): current_population += changes[i] time_population[timestamps[i]] = current_population max_population = max(time_population.values()) peak_time = min(time for time, pop in time_population.items() if pop == max_population) results.append(peak_time) return results"},{"question":"Create a function that accepts an integer N and generates an N times N matrix filled with a specific spiral pattern of numbers. The spiral pattern starts from 1 in the top-left corner and spirals clockwise towards the center. -----Input:----- - An integer N which denotes the size of the matrix. -----Output:----- A 2D list which represents the matrix filled in spiral order. -----Constraints----- - 1 leq N leq 20 -----Sample Input:----- 3 -----Sample Output:----- [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] -----Explanation:----- The spiral pattern fills the 3x3 matrix starting from 1 in the top-left corner and proceeds to fill numbers in a clockwise direction until the entire matrix is filled.","solution":"def generate_spiral_matrix(N): Generates an NxN spiral matrix filled with numbers from 1 to N^2. matrix = [[0] * N for _ in range(N)] num = 1 top, bottom, left, right = 0, N - 1, 0, N - 1 while top <= bottom and left <= right: # fill from left to right for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 # fill from top to bottom for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 # fill from right to left if top <= bottom: for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 # fill from bottom to top if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"A robot is located at the top-left corner of a `m x n` grid (marked \'Start\' in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the diagram below). Now consider if some obstacles are added to the grids. How many unique paths would there be? An obstacle and empty space are marked as 1 and 0 respectively in the grid. Note: The robot\'s initial position is always empty (marked 0) and it only moves to empty spaces. Example 1: Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]] Output: 2 Explanation: 3x3 grid with an obstacle at grid[1][1], two possible paths are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example 2: Input: obstacleGrid = [[0,1],[0,0]] Output: 1 Explanation: 2x2 grid with an obstacle at grid[0][1], only one possible path is: Down -> Right Constraints: - `m == obstacleGrid.length` - `n == obstacleGrid[i].length` - `1 <= m, n <= 100` - `obstacleGrid[i][j]` is 0 or 1.","solution":"def unique_paths_with_obstacles(obstacleGrid): Compute the number of unique paths from top-left to bottom-right in a grid with obstacles. if not obstacleGrid or obstacleGrid[0][0] == 1: return 0 m, n = len(obstacleGrid), len(obstacleGrid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if obstacleGrid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"You are given an array of integers where each element represents a block\'s height in a histogram. The width of each block is 1. The histogram is fully filled, so there are no gaps between blocks. Write a function to find the largest rectangular area (in terms of number of blocks) that can be formed in the histogram. Your function should return an integer representing this largest area. Example 1: Input: [2,1,5,6,2,3] Output: 10 Explanation: The largest rectangle has an area of 10 units (formed by blocks of height 5 and 6, width 2). Example 2: Input: [2,4] Output: 4 Explanation: The largest rectangle has an area of 4 units (formed by a single block of height 4). Note: The range of heights is [1, 10^5]. The length of the array is in the range [1, 10^4].","solution":"def largest_rectangle_area(heights): Find the largest rectangular area in a histogram. :param heights: List of integers representing the heights of the histogram blocks. :return: Integer representing the maximum area of the rectangular blocks. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Create a function, `balanced_substring(s)`, which takes a string `s` as input and returns the length of the longest substring where the number of occurrences of the letter `\'a\'` is equal to the number of occurrences of the letter `\'b\'`. The input string `s` will only contain lowercase letters \'a\' and \'b\'. If there is no such substring, the function should return `0`. # Examples ```python balanced_substring(\\"aababbab\\") == 8 # \\"aababbab\\" is the longest balanced substring balanced_substring(\\"aabba\\") == 4 # \\"aabb\\" is the longest balanced substring balanced_substring(\\"ababab\\") == 6 # \\"ababab\\" is the longest balanced substring balanced_substring(\\"aaaa\\") == 0 # no balanced substring balanced_substring(\\"b\\") == 0 # no balanced substring ```","solution":"def balanced_substring(s): Returns the length of the longest substring where the number of \'a\' is equal to the number of \'b\'. max_len = 0 balance = {0: -1} # Initialize with balance 0 at index -1 (before the start of the string) current_balance = 0 for i, char in enumerate(s): if char == \'a\': current_balance += 1 else: current_balance -= 1 if current_balance in balance: max_len = max(max_len, i - balance[current_balance]) else: balance[current_balance] = i return max_len"},{"question":"Given an integer `n`, return the nth number in the Fibonacci sequence. The Fibonacci sequence is defined as follows: each number is the sum of the two preceding numbers, starting from 0 and 1. That is, F(0) = 0, F(1) = 1, F(n) = F(n - 1) + F(n - 2) for n > 1. Your task is to implement a function `fibonacci(n)` that takes a positive integer `n` and returns the nth Fibonacci number. Ex.: ```python fibonacci(0); # 0 fibonacci(1); # 1 fibonacci(2); # 1 fibonacci(3); # 2 fibonacci(10); # 55 ``` - You may assume that `n` will always be a non-negative integer. - Optimize your solution for large values of `n` (up to 10^5).","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return 0 if n == 1: return 1 # Initialize base values a, b = 0, 1 # Compute Fibonacci sequence up to the nth number for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Catherine is working on a secret project that involves numerical palindromes. A palindromic number is a number that remains the same when its digits are reversed (e.g., 121, 1331). She wants to find the next palindromic number greater than a given number. Can you help Catherine to find the next palindromic number? -----Input:----- - First line contains a single integer T, the number of test cases. Then T test cases follow. - Each of the next T lines contains one integer N, the number for which we need to find the next palindromic number. -----Output:----- For each test case, output a single line containing the next palindromic number greater than N. -----Constraints----- - 1 leq T leq 100 - 0 leq N leq 10^4 -----Sample Input:----- 2 123 678 -----Sample Output:----- 131 686","solution":"def next_palindrome(n): Finds the next palindromic number greater than the given number n. while True: n += 1 if str(n) == str(n)[::-1]: return n def process_test_cases(test_cases): Processes a list of test cases for next_palindrome function. Parameters: - test_cases: List of integers Returns: A list of integers, each being the result of next_palindrome for the corresponding test case results = [] for n in test_cases: results.append(next_palindrome(n)) return results"},{"question":"Given a string s and an integer k, retrun the length of longest substring that contains at most k distinct characters. Example 1: Input: s = \\"eceba\\", k = 2 Output: 3 Explanation: The longest substring with at most 2 distinct characters is \\"ece\\" which has length 3. Example 2: Input: s = \\"aa\\", k = 1 Output: 2 Explanation: The longest substring with at most 1 distinct character is \\"aa\\" which has length 2. Constraints: 1 <= s.length <= 10^5 1 <= k <= 26","solution":"def length_of_longest_substring_k_distinct(s, k): if k == 0: return 0 n = len(s) if n == 0: return 0 char_count = {} left = 0 max_len = 0 for right in range(n): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Write a function `n_largest_elements(lst, n)` that takes a list `lst` of integers and an integer `n`, and returns a list of the `n` largest unique integers in descending order. If there are fewer than `n` unique integers in the input list, return all the unique integers sorted in descending order. **Examples:** ```python n_largest_elements([4, 1, 7, 1, 4, 8, 9, 3], 3) # Should return [9, 8, 7] n_largest_elements([4, 1, 7, 2, 3], 7) # Should return [7, 4, 3, 2, 1] n_largest_elements([4, 4, 4, 4], 2) # Should return [4] n_largest_elements([1, 2, 3, 4, 5], 0) # Should return [] ``` # Constraints: * The input list `lst` will have at most 1000 integers. * Each element in `lst` will be between `-10^6` and `10^6`. * The value of `n` will be a non-negative integer less than or equal to the length of `lst`.","solution":"def n_largest_elements(lst, n): Returns a list of the n largest unique integers in descending order. If there are fewer than n unique integers, return all unique integers. # Get the unique integers from the list unique_integers = list(set(lst)) # Sort the unique integers in descending order unique_integers.sort(reverse=True) # Return the first n elements return unique_integers[:n]"},{"question":"Write a function `nextPermutation(nums)` that generates the next lexicographical permutation of the given list of integers `nums`. If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order). Examples: ``` nextPermutation([1, 2, 3]) => [1, 3, 2] nextPermutation([3, 2, 1]) => [1, 2, 3] nextPermutation([1, 1, 5]) => [1, 5, 1] ``` Apply the function directly on the list, don\'t return it.","solution":"def nextPermutation(nums): Modify nums to its next permutation in place; rearrange it to the lowest possible order if no next permutation exists. if len(nums) <= 1: return # Find the largest index k such that nums[k] < nums[k + 1] k = len(nums) - 2 while k >= 0 and nums[k] >= nums[k + 1]: k -= 1 if k >= 0: # Find the largest index l greater than k such that nums[k] < nums[l] l = len(nums) - 1 while nums[k] >= nums[l]: l -= 1 # Swap the value of nums[k] with that of nums[l] nums[k], nums[l] = nums[l], nums[k] # Reverse the sequence from nums[k + 1] up to and including the final element nums[k + 1:] = reversed(nums[k + 1:])"},{"question":"A company manages a fleet of delivery trucks, each having a unique ID and a specific capacity (in kilograms) for carrying packages. Each truck can be identified by its ID, and we have the weights of the packages it currently holds. The company faces a specific challenge regularly: given a desired package weight, they need to determine if there exists a pair of packages (from any single truck) that together weigh exactly the desired weight. If multiple pairs exist, any one valid pair can be chosen. You are required to write a function that receives the list of trucks along with their package weights and the target weight. The function should return the truck ID and the two package weights that sum up to the target weight if such a pair exists. If no such pair is found for any truck, the function should return `None`. In Python, the function signature will look like: ```python def find_package_pair(trucks, target_weight): pass # Example: trucks = [ {\\"id\\": \\"T1\\", \\"weights\\": [70, 30, 90, 50, 20]}, {\\"id\\": \\"T2\\", \\"weights\\": [10, 110, 40, 60]}, {\\"id\\": \\"T3\\", \\"weights\\": [25, 35, 45, 55]}, ] target_weight = 100 # Expected output could be: (\'T1\', 70, 30) ``` Explanation: In the given example, `T1` has packages with weights [70, 30, 90, 50, 20]. The pair of weights (70, 30) sums up to the target weight 100. Therefore, the function should return the tuple (\'T1\', 70, 30). If no pair is found in any truck, return `None`. Clarifications: 1. If there are multiple valid pairs for a single truck, return any one of them. 2. If no valid pair is found in any truck, return `None`. 3. The truck IDs are unique, and the package weights are positive integers. 4. The function should be efficient enough to handle large inputs.","solution":"def find_package_pair(trucks, target_weight): for truck in trucks: weights = truck[\\"weights\\"] seen = set() for weight in weights: if target_weight - weight in seen: return (truck[\\"id\\"], weight, target_weight - weight) seen.add(weight) return None"},{"question":"A scientist needs help tracking the bacterial growth in a petri dish. The laboratory records data in an unusual pattern. Given a number N, write a function to generate a matrix where the values spiral inward starting from the outermost layer and moving towards the center. -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case contains a single integer N, representing the size of the matrix (an N times N matrix). -----Output:----- For each test case, print the N times N matrix with values filled in a spiral order starting from 1 to N^2. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 20 -----Sample Input:----- 2 3 4 -----Sample Output:----- 1 2 3 8 9 4 7 6 5 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7","solution":"def generate_spiral_matrix(N): Generates an N x N matrix filled with values from 1 to N^2 in a spiral order. matrix = [[0] * N for _ in range(N)] num = 1 layers = (N + 1) // 2 for layer in range(layers): # From left to right for i in range(layer, N - layer): matrix[layer][i] = num num += 1 # From top to bottom for i in range(layer + 1, N - layer): matrix[i][N - layer - 1] = num num += 1 # From right to left if N - layer - 1 > layer: # Check to avoid overwriting for odd N size for i in range(N - layer - 2, layer - 1, -1): matrix[N - layer - 1][i] = num num += 1 # From bottom to top if N - layer - 1 > layer: # Check to avoid overwriting for odd N size for i in range(N - layer - 2, layer, -1): matrix[i][layer] = num num += 1 return matrix def process_test_cases(T, cases): Processes T test cases for N x N spiral matrix generation. results = [] for N in cases: matrix = generate_spiral_matrix(N) results.append(matrix) return results"},{"question":"Task Write a function that simulates the operation of a vending machine. Description The vending machine, in this scenario, only deals with two types of drinks: Cola and Water. The vending machine has a limited capacity for each drink type but starts fully stocked. Customers can purchase a drink of their choice if it is available. The machine keeps track of its stock levels and prevents sales if there is insufficient supply. Additionally, the machine keeps a record of total sales and stock levels. Specifications 1. Write a class `VendingMachine` that supports the following operations: - An initializer method (`__init__()`) that sets the initial stock levels and prices for Cola and Water. - A method `purchase(drink_type: str) -> str` that allows a customer to purchase a drink. If the drink is out of stock, return \\"Out of stock\\". If the purchase is successful, return \\"Thank you for your purchase!\\". - A method `restock(drink_type: str, amount: int) -> None` that allows restocking of the specific drink type. - A method `sales() -> dict` that returns a dictionary containing the total sales of Cola and Water. Example Usage ```python # Initialize the vending machine vm = VendingMachine() # Customer purchases Cola print(vm.purchase(\\"Cola\\")) # Output: Thank you for your purchase! # Restock Water vm.restock(\\"Water\\", 5) # Query total sales print(vm.sales()) # Output: {\'Cola\': 1, \'Water\': 0} # Customer attempts to purchase a drink that is out of stock for _ in range(10): print(vm.purchase(\\"Cola\\")) print(vm.purchase(\\"Cola\\")) # Output: Out of stock ``` Constraints - The vending machine can hold a maximum of 10 units for each drink type. - Drink prices are fixed: Cola costs 1.50 and Water costs 1.00. - Every purchase decreases the inventory by 1 for the selected drink type. - Each restock operation can add a maximum of 10 units per drink type, but the inventory should not exceed 10 units. Requirements - Implement the `VendingMachine` class with the specified methods. - Ensure proper state management to track stock levels and total sales. - Provide input validation where necessary (e.g., correct drink type and restock limits). ```python class VendingMachine: def __init__(self): self.stock = {\'Cola\': 10, \'Water\': 10} self.sales_record = {\'Cola\': 0, \'Water\': 0} self.max_capacity = 10 self.prices = {\'Cola\': 1.5, \'Water\': 1.0} def purchase(self, drink_type: str) -> str: if drink_type not in self.stock: return \\"Invalid drink type\\" if self.stock[drink_type] > 0: self.stock[drink_type] -= 1 self.sales_record[drink_type] += 1 return \\"Thank you for your purchase!\\" else: return \\"Out of stock\\" def restock(self, drink_type: str, amount: int) -> None: if drink_type not in self.stock: return \\"Invalid drink type\\" self.stock[drink_type] = min(self.max_capacity, self.stock[drink_type] + amount) def sales(self) -> dict: return self.sales_record ``` This approach creates a `VendingMachine` class that correctly simulates the vending machine operation, maintains stock levels, records sales, and includes necessary validations.","solution":"class VendingMachine: def __init__(self): self.stock = {\'Cola\': 10, \'Water\': 10} self.sales_record = {\'Cola\': 0, \'Water\': 0} self.max_capacity = 10 self.prices = {\'Cola\': 1.5, \'Water\': 1.0} def purchase(self, drink_type: str) -> str: if drink_type not in self.stock: return \\"Invalid drink type\\" if self.stock[drink_type] > 0: self.stock[drink_type] -= 1 self.sales_record[drink_type] += 1 return \\"Thank you for your purchase!\\" else: return \\"Out of stock\\" def restock(self, drink_type: str, amount: int) -> None: if drink_type not in self.stock: return \\"Invalid drink type\\" self.stock[drink_type] = min(self.max_capacity, self.stock[drink_type] + amount) def sales(self) -> dict: return self.sales_record"},{"question":"```python Write a function that takes a list of integers and returns a new list with each integer squared and sorted in non-decreasing order. # Example Input: [4, -1, 0, 3, 10] Output: [0, 1, 9, 16, 100] Input: [-7, -3, 2, 3, 11] Output: [4, 9, 9, 49, 121] ``` ```if:sql SQL Notes: You will be given a table, `integers`, with one column `value`. Return a table with a column `squared_value` containing the squares of each integer from the `value` column in non-decreasing order. # integers table schema * value INT # output table schema * squared_value INT ```","solution":"def sorted_squares(nums): Takes a list of integers and returns a new list with each integer squared and sorted in non-decreasing order. Args: nums : List[int] : List of integers Returns: List[int] : New list with each integer squared and sorted in non-decreasing order return sorted([x ** 2 for x in nums])"},{"question":"__Definition:__ A \\"Run-Length Encoded\\" (RLE) string is a form of lossless data compression where consecutive duplicate characters are stored as a single character followed by the number of repetitions. Your task is to write a method (or function) that takes a string and compresses it using RLE. If the compressed string is not shorter than the original string, the function should return the original string. The input string will only contain uppercase English letters (A-Z). __Example 1:__ Let the input string be `\\"AAAABBBCCDAA\\"`. The Run-Length Encoded format of the input string would be: ```\\"A4B3C2D1A2\\"``` Since the encoded string is shorter, the output of the function should be: ``` \\"A4B3C2D1A2\\" ``` __Example 2:__ Let the input string be `\\"ABCD\\"`. Since this string has no consecutive duplicate characters, the encoded string would be: ```\\"A1B1C1D1\\"``` However, as the encoded string is not shorter than the original string, the output of the function should be the original string: ``` \\"ABCD\\" ``` __Example 3:__ Let the input string be `\\"AAABBBCCCC\\"`. The Run-Length Encoded format of the input string would be: ```\\"A3B3C4\\"``` Since the encoded string is shorter, the output of the function should be: ``` \\"A3B3C4\\" ``` Note: The function should handle edge cases such as an empty string or a string with only one character.","solution":"def run_length_encode(s): Compresses the input string using Run-Length Encoding. Parameters: s (str): The input string consisting of uppercase English letters. Returns: str: The Run-Length Encoded string if shorter than the original, otherwise the original string. if len(s) == 0: return s encoded_string = [] last_char = s[0] count = 1 for char in s[1:]: if char == last_char: count += 1 else: encoded_string.append(f\\"{last_char}{count}\\") last_char = char count = 1 # Append the last character group encoded_string.append(f\\"{last_char}{count}\\") encoded_string = \'\'.join(encoded_string) if len(encoded_string) < len(s): return encoded_string else: return s"},{"question":"Write a function that takes a string containing only lowercase letters and returns a new string where each letter is shifted to the previous letter in the alphabet. For instance, \'a\' should shift to \'z\', and \'b\' should shift to \'a\'. The function should maintain the order of characters and should not change the case of the letters. **Example:** - For the input `\\"abc\\"`, the output should be `\\"zab\\"`. - For the input `\\"xyz\\"`, the output should be `\\"wxy\\"`.","solution":"def shift_string(s): Shifts each letter in the string to the previous letter in the alphabet. \'a\' shifts to \'z\', \'b\' shifts to \'a\', and so forth. :param s: Input string containing only lowercase letters. :return: New string with each letter shifted to the previous letter. shifted = [] for char in s: if char == \'a\': shifted.append(\'z\') else: shifted.append(chr(ord(char) - 1)) return \'\'.join(shifted)"},{"question":"Markus wants to monitor the water levels in several reservoirs located in a mountainous region. He records the water levels in each reservoir at different times in a day. Each recording consists of the reservoir identification number and the measured water level. He is really interested in identifying the longest continuous sequence of water level measurements where the water levels are non-decreasing in a particular reservoir. Imagine Markus has data for N reservoirs recorded sequentially as an array of tuples, where each tuple contains a reservoir ID and its current water level. Your task is to help Markus determine the length of the longest continuous sequence for which the water levels are non-decreasing for any particular reservoir. -----Input:----- The first line of input contains a single integer M indicating the number of recorded measurements. Each of the next M lines contains a pair of space-separated integers; the reservoir ID and the current water level of that reservoir. -----Output:----- A single integer indicating the length of the longest continuous sequence of non-decreasing water levels for any particular reservoir. -----Constraints:----- - 1 leq M leq 10^5 - Water levels are measured as integers ranging between 1 and 10^6 - Reservoir IDs are integers ranging between 1 and 10^5 -----Sample Input----- 8 1 5 2 6 1 7 1 4 2 5 2 7 1 8 1 9 -----Sample Output----- 3","solution":"def longest_non_decreasing_sequence(measurements): Determine the length of the longest continuous sequence of non-decreasing water levels for any particular reservoir. Parameters: measurements (list of tuples): list of pairs (reservoir_id, water_level) Returns: int: the length of the longest continuous non-decreasing sequence if not measurements: return 0 # Dictionary to keep track of the maximum length for each reservoir reservoir_max_lengths = {} # Dictionary to keep track of the current length of non-decreasing sequence for each reservoir current_lengths = {} # Dictionary to keep the last seen water level for each reservoir last_levels = {} for reservoir_id, water_level in measurements: if reservoir_id not in current_lengths: current_lengths[reservoir_id] = 1 reservoir_max_lengths[reservoir_id] = 1 else: if water_level >= last_levels[reservoir_id]: current_lengths[reservoir_id] += 1 else: current_lengths[reservoir_id] = 1 reservoir_max_lengths[reservoir_id] = max(reservoir_max_lengths[reservoir_id], current_lengths[reservoir_id]) last_levels[reservoir_id] = water_level return max(reservoir_max_lengths.values())"},{"question":"=====Problem Statement===== You are given a list of integers. Write a function `find_outlier(numbers)` to find and return the single integer that differs in parity (odd or even) from the rest of the list. There will always be exactly one integer that is odd or even while the rest are the opposite. =====Input Format===== A single line containing a list of integers, `numbers`. =====Constraints===== - The list will contain at least 3 integers and no more than 1000 integers. - The list will contain exactly one integer that has a different parity from the others. =====Output Format===== Return the integer that has a different parity from the rest of the list. =====Function Signature===== ```python def find_outlier(numbers: List[int]) -> int: pass ``` =====Example===== **Input:** `[2, 4, 6, 8, 10, 3]` **Output:** `3` **Explanation:** In the list `[2, 4, 6, 8, 10, 3]`, all values except `3` are even, so the function should return `3`.","solution":"from typing import List def find_outlier(numbers: List[int]) -> int: Find the single integer that has a different parity (odd or even) from the rest of the list. evens = [num for num in numbers if num % 2 == 0] odds = [num for num in numbers if num % 2 != 0] # If there\'s only one even, return the even number if len(evens) == 1: return evens[0] # If there\'s only one odd, return the odd number if len(odds) == 1: return odds[0]"},{"question":"Write a function that accepts a list of integers and returns a list of the sums of consecutive pairs of elements. If the list has an odd number of elements, simply add the last element by itself. For example, given the input list [1, 2, 3, 4, 5], the function should return [3, 7, 5] since the pairs are (1+2), (3+4), and (5). The function should follow the signature: ```python def sum_consecutive_pairs(nums: List[int]) -> List[int]: # Your code goes here ``` Example: ```python assert sum_consecutive_pairs([1, 2, 3, 4, 5]) == [3, 7, 5] assert sum_consecutive_pairs([10, -10, 20, 30]) == [0, 50] assert sum_consecutive_pairs([1]) == [1] ```","solution":"from typing import List def sum_consecutive_pairs(nums: List[int]) -> List[int]: Returns a list of the sums of consecutive pairs of elements in the input list. If the list has an odd number of elements, the last element is added by itself. result = [] for i in range(0, len(nums), 2): if i + 1 < len(nums): result.append(nums[i] + nums[i+1]) else: result.append(nums[i]) return result"},{"question":"Write a function to merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists. Examples ```python # List 1: 1 -> 2 -> 4 # List 2: 1 -> 3 -> 4 # Merged List: 1 -> 1 -> 2 -> 3 -> 4 -> 4 merge_two_lists([1, 2, 4], [1, 3, 4]) == [1, 1, 2, 3, 4, 4] # List 1: 2 -> 6 -> 8 # List 2: 1 -> 3 -> 4 # Merged List: 1 -> 2 -> 3 -> 4 -> 6 -> 8 merge_two_lists([2, 6, 8], [1, 3, 4]) == [1, 2, 3, 4, 6, 8] # List 1: 1 -> 3 -> 5 # List 2: 2 -> 4 -> 6 # Merged List: 1 -> 2 -> 3 -> 4 -> 5 -> 6 merge_two_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6] # List 1: empty # List 2: 0 # Merged List: 0 merge_two_lists([], [0]) == [0] ```","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_lists(l1, l2): Merges two sorted linked lists and returns it as a new sorted list. dummy = ListNode() current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 else: current.next = l2 return dummy.next def list_to_linked_list(lst): Converts a list to a linked list. dummy = ListNode() current = dummy for val in lst: current.next = ListNode(val) current = current.next return dummy.next def linked_list_to_list(node): Converts a linked list to a list. lst = [] while node: lst.append(node.val) node = node.next return lst def merge_two_lists_list(l1, l2): Helper function to merge two lists instead of linked lists for easier testing. linked_list_1 = list_to_linked_list(l1) linked_list_2 = list_to_linked_list(l2) merged_linked_list = merge_two_lists(linked_list_1, linked_list_2) return linked_list_to_list(merged_linked_list)"},{"question":"Task You are given a list of integers, possibly containing duplicates. You need to determine if it is possible to rearrange the elements in the list such that it forms a sequence of consecutive integers, without any gaps. # Example: For `arr = [3, 2, 1, 4, 5]`, the result should be `true` because the array can be rearranged to form the sequence `[1, 2, 3, 4, 5]`. For `arr = [1, 4, 3, 2, 6]`, the result should be `false` because there is a gap between 4 and 6. # Input/Output - `[input]` integer array `arr` The list of integers. - `[output]` a boolean Return `true` if it\'s possible to rearrange the elements to form a sequence of consecutive integers, otherwise return `false`.","solution":"def can_form_consecutive_sequence(arr): Check if the given list of integers can be rearranged to form a sequence of consecutive integers without any gaps. :param arr: List of integers :return: Boolean, True if sequence without gaps is possible, otherwise False if not arr: return False min_val = min(arr) max_val = max(arr) expected_set = set(range(min_val, max_val + 1)) return set(arr) == expected_set"},{"question":"Task: Magic Square Verifier A magic square is an `n x n` grid of distinct positive integers, where the sums of the numbers in each row, each column, and both main diagonals are all the same. Given a 2D list `square` representing an `n x n` grid, write a function `is_magic_square(square)` that returns `True` if the grid forms a magic square and `False` otherwise. # Example For the input: ``` square = [ [2, 7, 6], [9, 5, 1], [4, 3, 8] ] ``` The function should return `True`, since it\'s a magic square where the sum of rows, columns, and both diagonals is 15. For the input: ``` square = [ [3, 5, 7], [8, 1, 6], [4, 9, 2] ] ``` The function should return `False`, as it\'s not a magic square. # Constraints * The size of the square, `n`, will be in the range `[2, 10]`. * The numbers in the square will be distinct positive integers. # Function Signature ```python def is_magic_square(square: List[List[int]]) -> bool: ``` # Approach 1. Compute the sum of the first row. 2. Verify that each row, column, and both diagonals sum to the same value. 3. Return `True` if all conditions for a magic square are met, otherwise return `False`.","solution":"from typing import List def is_magic_square(square: List[List[int]]) -> bool: n = len(square) if n == 0: return False # Calculate the sum of the first row target_sum = sum(square[0]) # Check the sum of each row for row in square: if sum(row) != target_sum: return False # Check the sum of each column for col in range(n): col_sum = sum(square[row][col] for row in range(n)) if col_sum != target_sum: return False # Check the sum of the main diagonal main_diag_sum = sum(square[i][i] for i in range(n)) if main_diag_sum != target_sum: return False # Check the sum of the secondary diagonal secondary_diag_sum = sum(square[i][n-1-i] for i in range(n)) if secondary_diag_sum != target_sum: return False return True"},{"question":"A robotics company is testing a new model of delivery robot, which is supposed to deliver packages between different locations in a straight line. The robot can carry as many packages as required, but it can only carry them within the range R in one interval. Given a list of delivery locations\' positions, determine the minimum range R so that the robot can deliver all packages in one go. Each delivery location is a distinct point on a 1D coordinate. The robot starts from the origin (0) and needs to visit each delivery location at least once. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - For each test case, the first line contains N, the number of delivery locations. - The second line contains N space-separated integers, X_1 to X_N, representing the positions of delivery locations on the coordinate. -----Output:----- - For each test case, print a single line containing the minimum range R that the robot must achieve to deliver all packages in one go. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^6 - -10^9 leq X_i leq 10^9 - The sum of N over all test cases does not exceed 10^6 -----Sample Input:----- 2 4 -5 8 2 -3 3 10 -10 0 -----Sample Output:----- 13 20 -----Explanation:----- Test case 1: The delivery locations are at positions [-5, 8, 2, -3]. The robot must be able to travel at least from position -5 to position 8, which is a distance of 8 - (-5) = 13. So, the minimum range R must be 13 to cover all the delivery locations. Test case 2: The delivery locations are at positions [10, -10, 0]. The robot must be able to travel at least from position -10 to position 10, which is a distance of 10 - (-10) = 20. So, the minimum range R must be 20 to cover all the delivery locations.","solution":"def min_range_to_deliver_all_packages(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] locations = test_cases[i][1] min_position = min(locations) max_position = max(locations) R = max_position - min_position results.append(R) return results # Example usage: # T = 2 # test_cases = [ # (4, [-5, 8, 2, -3]), # (3, [10, -10, 0]) # ] # print(min_range_to_deliver_all_packages(T, test_cases)) # Output: [13, 20]"},{"question":"Given a list of non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining. Complete the `trappingWater` function to solve this problem. # Example If we pass the list `[0,1,0,2,1,0,1,3,2,1,2,1]` into the function, the output should be `6` because this is the amount of water that would be trapped after it rains. # Function Signature ```python def trappingWater(height: List[int]) -> int: pass ``` # Input - `height`: List of non-negative integers. # Output - Returns the total units of water trapped. # Constraints - The length of `height` list is at most 100,000. - Each integer in `height` is at most 100,000.","solution":"def trappingWater(height): Calculate how much water can be trapped after it rains Parameters: height (List[int]): A list of non-negative integers representing an elevation map Returns: int: The total units of water trapped if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water = 0 # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right_max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate the total water trapped for i in range(n): water += min(left_max[i], right_max[i]) - height[i] return water"},{"question":"Ella loves to collect stamps. She has a collection of individual stamp pieces represented by an array of integers, where each unique integer represents a distinct stamp type. She wants to organize her collection into sets according to their types so that each set contains only stamps of one type. Ella can perform the following actions: 1. Remove a single stamp from the collection. 2. Merge two stamps of the same type to form a bundle. A bundle is considered as a single entity for future merges, meaning a bundle can only be merged with another bundle or stamp of the same type. Her goal is to determine the minimum number of actions needed to organize her collection into sets of stamps where each set is homogeneous (contains only stamps of one type). -----Input:----- - The first line contains a single integer n, the number of stamps in the collection. - The next line contains n integers, each representing the type of a stamp. -----Output:----- Output a single integer denoting the minimum number of actions required to organize the collection. -----Constraints----- - 1 leq n leq 10^5 - 1 leq stamp type leq 10^6 -----Sample Input:----- 5 2 3 2 3 2 -----Sample Output:----- 2 Explanation: One possible solution is as follows: 1. Merge the first two stamps of type 2. 2. Merge the first two stamps of type 3. Ella will have 2 bundles and one stamp of type 2 left, so she needs at least 2 actions to achieve her goal.","solution":"def min_actions_to_organize_stamps(n, stamps): from collections import Counter stamp_counter = Counter(stamps) # The number of unique types of stamps num_unique_types = len(stamp_counter) return num_unique_types"},{"question":"Overview Given a list of integers where each element represents the height of a vertical line on a Cartesian plane, you need to identify the maximum amount of water that can be trapped between two of these lines. This scenario captures the idea of finding the largest container that can hold water when water is poured between the lines. Clarification - The width between each pair of adjacent lines is 1 unit. - The container formed between two lines can hold water up to the height of the shorter line. Example Suppose you are given the list of heights: `[1,8,6,2,5,4,8,3,7]`. Using the heights at index 1 and index 8 (both of which have heights 8 and 7 respectively), we can form a container that can hold the maximum water: ``` | | | | | | | | | | | | | | | | | | | | | | | | | | | | |___|___|___|___| 1 2 3 4 ``` Here, the container can hold `7 * (8 - 1) = 49` units of water. Task Write a function `maxWaterContainer` that takes a list of non-negative integers representing the heights of vertical lines and returns the maximum amount of water that can be trapped. Input - A list of non-negative integers representing the heights of vertical lines. Output - An integer representing the maximum amount of water that can be trapped between any two lines. Constraints - The length of the list will be at least 2 and at most 10,000. - The heights will be non-negative integers not exceeding 10,000. Function Signature ```python def maxWaterContainer(heights: List[int]) -> int: ``` Examples ```python # Example 1 assert maxWaterContainer([1,8,6,2,5,4,8,3,7]) == 49 # Example 2 assert maxWaterContainer([1,1]) == 1 ```","solution":"from typing import List def maxWaterContainer(heights: List[int]) -> int: left, right = 0, len(heights) - 1 max_water = 0 while left < right: width = right - left height = min(heights[left], heights[right]) max_water = max(max_water, width * height) # Move the pointer of the shorter line inward if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"Implement a function that takes a string input representing an arithmetic expression and returns the result of evaluating this expression. The arithmetic expression will contain only non-negative integers, the operators + (addition), - (subtraction), * (multiplication), / (division), and parentheses for grouping. Division should be considered as integer division, which means keep the integer part only (discard the fractional part). **Function Signature** ```python def evaluate_expression(expression: str) -> int: pass ``` **Examples** ```python assert evaluate_expression(\\"3+2*2\\") == 7 assert evaluate_expression(\\"3/2\\") == 1 assert evaluate_expression(\\"3+5/2\\") == 5 assert evaluate_expression(\\"2*(3+5)\\") == 16 ``` **Constraints** 1. The input string is a valid arithmetic expression. 2. The length of the input string does not exceed 100 characters. 3. The task is to evaluate the expression using the standard order of operations where division and multiplication have higher precedence than addition and subtraction.","solution":"def evaluate_expression(expression: str) -> int: def helper(tokens): stack = [] num = 0 sign = \'+\' while tokens: token = tokens.pop(0) if token.isdigit(): num = num * 10 + int(token) if token == \'(\': num = helper(tokens) if (not token.isdigit() and token != \' \') or not tokens: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack[-1] = stack[-1] * num elif sign == \'/\': stack[-1] = int(stack[-1] / num) # To implement integer division sign = token num = 0 if token == \')\': break return sum(stack) return helper(list(expression))"},{"question":"Alice is an avid gardener and loves to grow rare plants. She has a garden with M flower beds numbered from 1 to M. Each flower bed has a specific growth rate Gi. Alice can either plant or remove flowers in the flower beds, and she tends her garden for a fixed number of days D. The height of the flowers in the i-th bed grows according to the function Hi(t) = Gi * t where t is the number of days for which the flowers have been growing. Initially, all flower beds are empty. Alice wants to know how tall the flowers in each bed would be after D days, especially after making some changes to the growth rates and states of the flower beds. Alice will ask you Q queries, each of which can be of the following two types: - 1 x g : The growth rate of the x-th bed is updated to g, i.e., Gx = g - 2 x s : If s=1, a flower is planted in the x-th bed on day 1 (if it is already empty). If s=0, the flower in the x-th bed is removed (if it is already planted). -----Input----- There is a single test case. The first line of the input contains two integers M and D, denoting the number of flower beds and the number of days respectively. The second line of the input contains M space-separated integers G1, G2, ..., GM, denoting the initial growth rates of the flower beds. The third line contains an integer Q, denoting the number of queries. For each of the next Q queries, each line corresponds to one of the two types of query. For query of type 1, there will be three space-separated integers \\"1 x g\\" as defined above. For query of type 2, there will be three space-separated integers \\"2 x s\\", as defined above. -----Output----- For each query of type 1, no output is required. For each query of type 2, output an integer denoting the height of flowers in the x-th bed after D days, considering the specified change. -----Constraints----- - 1 ≤ M, Q ≤ 10^5 - 1 ≤ Gi ≤ 10^9 - 0 ≤ g ≤ 10^9 - 1 ≤ x ≤ M - 1 ≤ D ≤ 10^9 -----Subtasks----- Subtask #1 (5 points) : - 1 ≤ M ≤ 10 - 1 ≤ Q ≤ 1000 - 1 ≤ Gi ≤ 10 Subtask #2 (15 points) : - 1 ≤ M ≤ 1000 - 1 ≤ Q ≤ 100 - 1 ≤ Gi ≤ 10^9 Subtask #3 (80 points) : - original constraints -----Example----- Input: 5 10 2 3 1 4 5 4 2 3 1 1 2 6 2 2 1 2 4 0 Output: 10 60 0 -----Explanation----- Initially, the growth rates are [2, 3, 1, 4, 5]. After 10 days, if a flower is planted in bed 3, its height will be 1 * 10 = 10. When the growth rate of bed 2 is updated to 6, if a flower is planted in bed 2, its height after 10 days will be 6 * 10 = 60. If the flower in bed 4 is removed, the height of flowers in bed 4 after 10 days is 0.","solution":"def process_garden(M, D, growth_rates, queries): heights = [0] * (M + 1) # Track planted flower heights result = [] for query in queries: type_, x, value = query if type_ == 1: # Update growth rate growth_rates[x - 1] = value elif type_ == 2: # Plant or remove flower and calculate height if value == 1: heights[x] = growth_rates[x - 1] * D elif value == 0: heights[x] = 0 result.append(heights[x]) return result # Example input M = 5 D = 10 growth_rates = [2, 3, 1, 4, 5] queries = [ (2, 3, 1), (1, 2, 6), (2, 2, 1), (2, 4, 0) ] print(process_garden(M, D, growth_rates, queries)) # Output: [10, 60, 0]"},{"question":"Write a function that takes a Roman numeral string as input and converts it to an integer. Roman numerals are represented by the symbols I, V, X, L, C, D, and M, which have the following integer values: - I = 1 - V = 5 - X = 10 - L = 50 - C = 100 - D = 500 - M = 1000 In Roman numerals, certain symbols can be placed before others to indicate subtraction. For example: - IV = 4 (I before V indicates 5 - 1) - IX = 9 (I before X indicates 10 - 1) - XL = 40 (X before L indicates 50 - 10) - XC = 90 (X before C indicates 100 - 10) - CD = 400 (C before D indicates 500 - 100) - CM = 900 (C before M indicates 1000 - 100) Given a string representing a Roman numeral, your task is to convert it to an integer. The input string is guaranteed to be a valid Roman numeral representing a number between 1 and 3999. Function Signature: ```python def roman_to_int(s: str) -> int: pass ``` # Examples: **Input**: \\"III\\" **Output**: 3 **Explanation**: III = 1 + 1 + 1 = 3 **Input**: \\"IV\\" **Output**: 4 **Explanation**: IV = 5 - 1 = 4 **Input**: \\"IX\\" **Output**: 9 **Explanation**: IX = 10 - 1 = 9 **Input**: \\"LVIII\\" **Output**: 58 **Explanation**: L = 50, V = 5, III = 1 + 1 + 1 = 58 **Input**: \\"MCMXCIV\\" **Output**: 1994 **Explanation**: M = 1000, CM = 900, XC = 90, IV = 4","solution":"def roman_to_int(s: str) -> int: Converts a Roman numeral string to an integer. roman_to_int_map = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 previous_value = 0 for char in reversed(s): current_value = roman_to_int_map[char] if current_value < previous_value: total -= current_value else: total += current_value previous_value = current_value return total"},{"question":"Priya is preparing for an annual marathon. She wants to track her running performance to get better each day. Priya plans to run every day for N days, recording the distance she runs and the time taken each day. She wants to analyze her performance by calculating the average speed for each run and identifying her best and worst performances based on speed. -----Input----- - The first line contains an integer N denoting the number of days she runs. - The following N lines contain two floating-point numbers di and ti, representing the distance run in kilometers and the time taken in hours respectively for each session. Each value is given up to 2 decimal places. -----Output----- - Output three lines: 1. The average speeds for each run, each value up to 6 decimal places. 2. The best performance (maximum speed) rounded up to 6 decimal places. 3. The worst performance (minimum speed) rounded up to 6 decimal places. -----Constraints----- - 1 ≤ N ≤ 50 - 0 < di ≤ 42.195 (marathon distance in kilometers) - 0 < ti ≤ 5.00 (time in hours) -----Example----- Input: 3 5.00 0.50 10.00 1.00 21.00 2.50 Output: 10.000000 10.000000 8.400000 4.200000","solution":"def analyze_performance(N, sessions): This function takes the number of days (N) and a list of tuples representing (distance, time) for each day. It calculates the average speeds for each run, the best performance (maximum speed), and the worst performance (minimum speed). speeds = [d / t for d, t in sessions] best_performance = max(speeds) worst_performance = min(speeds) speeds = [f\\"{speed:.6f}\\" for speed in speeds] best_performance = f\\"{best_performance:.6f}\\" worst_performance = f\\"{worst_performance:.6f}\\" return speeds, best_performance, worst_performance # Example usage: N = 3 sessions = [(5.00, 0.50), (10.00, 1.00), (21.00, 2.50)] print(analyze_performance(N, sessions))"},{"question":"Task Given a list of non-negative integers, `nums`, and a non-negative integer, `target`, determine if there exist three elements in `nums` whose sum is equal to `target`. If such a triplet exists, return `true`; otherwise, return `false`. **Examples** ``` nums = [1, 2, 3, 4, 5], target = 9 1 + 3 + 5 = 9 -> true nums = [1, 2, 2, 4], target = 10 No such triplet -> false nums = [0, 0, 1, 3], target = 4 1 + 3 + 0 = 4 -> true ``` **Constraints** `0 <= len(nums) <= 1_000` and `0 <= nums[i] <= 10,000`","solution":"def three_sum(nums, target): Determines if there are three numbers in nums that add up to the target. Args: nums: List of non-negative integers. target: Non-negative integer target sum. Returns: True if there exists a triplet in nums whose sum equals target, otherwise False. nums.sort() n = len(nums) for i in range(n - 2): left = i + 1 right = n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == target: return True elif total < target: left += 1 else: right -= 1 return False"},{"question":"Create a function that rotates an input list by \'k\' steps to the right. The function should mutate the input, moving each element \'k\' indices forward, wrapping around the end of the list as necessary. Avoid using additional list structures (e.g., don\'t create a new list), and perform the operation in place. See example: ```python numbers = [1, 2, 3, 4, 5, 6] # This represents the initial list rotate_list(numbers, 2) # Rotate the list by 2 steps to the right numbers => [5, 6, 1, 2, 3, 4] # The list is mutated in place ``` Info: - **MUTATE the input list, don\'t return anything** - Input list is guaranteed to hold at least 1 or more elements - The list contains only integers - \'k\' is an integer ≥ 0. If \'k\' is greater than the length of the list, handle it appropriately by rotating only the necessary steps (i.e., k % len(list) steps).","solution":"def rotate_list(numbers, k): Rotates the input list \'numbers\' by \'k\' steps to the right in place. n = len(numbers) k = k % n # Handle cases where k is greater than the length of the list if k == 0: return # No rotation needed # Perform the rotation in place numbers[:] = numbers[-k:] + numbers[:-k]"}]'),F={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:O,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},S={class:"card-container"},R={key:0,class:"empty-state"},Y=["disabled"],L={key:0},j={key:1};function D(s,e,l,m,r,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[_,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):u("",!0)]),t("div",S,[(n(!0),i(y,null,w(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",R,' No results found for "'+h(r.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",j,"Loading...")):(n(),i("span",L,"See more"))],8,Y)):u("",!0)])}const z=d(F,[["render",D],["__scopeId","data-v-24164705"]]),W=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/10.md","filePath":"chatai/10.md"}'),P={name:"chatai/10.md"},G=Object.assign(P,{setup(s){return(e,l)=>(n(),i("div",null,[x(z)]))}});export{W as __pageData,G as default};
