import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as w,f as l,F as y,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,h,m,a,r){return n(),i("div",k,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const j=d(q,[["render",O],["__scopeId","data-v-01bfcc40"]]),A=JSON.parse('[{"question":"In a distant kingdom, there\'s a peculiar road network connecting its many cities. Each city has a bidirectional road to every other city. However, the cost to build and maintain these roads varies depending on the pair of cities. The kingdom\'s ruler has decided to construct a minimal-cost network that still allows travel between any pair of cities, directly or indirectly. You are tasked with finding the minimal total cost required to connect all the cities such that there is a path between any two cities. This is essentially a problem of finding the Minimum Spanning Tree (MST) for the given set of cities. The first line of the input contains an integer N (2 ≤ N ≤ 1000), representing the number of cities. The next N lines each contain N integers. The j-th integer on the i-th line, C[i][j], represents the cost to build a road between city i and city j (1 ≤ C[i][j] ≤ 10^6). It is guaranteed that C[i][j] = C[j][i] and C[i][i] = 0. Output a single integer, the minimal total cost required to construct the road network. # Example Input: ``` 3 0 1 3 1 0 2 3 2 0 ``` Output: ``` 3 ``` # Explanation For the given example, the optimal way to connect all cities with minimal cost is: - Connect city 1 to city 2 with a cost of 1 - Connect city 2 to city 3 with a cost of 2 Thus, the minimal total cost is 1 + 2 = 3.","solution":"def find_mst_cost(n, cost_matrix): def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 edges = [(cost_matrix[i][j], i, j) for i in range(n) for j in range(i + 1, n)] edges.sort() parent = [i for i in range(n)] rank = [0] * n mst_cost = 0 for cost, u, v in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_cost += cost return mst_cost def minimal_total_cost(n, cost_matrix): return find_mst_cost(n, cost_matrix)"},{"question":"You are given a string s of length n, which consists of lowercase English letters. You can choose up to k positions in the string and change the letter at each of those positions to any other lowercase English letter. You need to determine the length of the longest substring of repeating characters that can be achieved with at most k changes. Write a function that takes in the string s, the value of n, and the integer k, and returns the length of the longest substring of repeating characters that can be obtained by changing at most k characters. The first line contains an integer n (1 ≤ n ≤ 100,000), the length of the string. The second line contains an integer k (0 ≤ k ≤ n), the maximum number of characters that can be changed. The third line contains the string s, which consists of lowercase English letters. Output a single integer, the length of the longest substring of repeating characters that can be obtained by changing at most k characters. Example: Input: 6 2 aabccd Output: 4 Explanation: By changing the two \'c\'s to \'a\', you get the string \\"aaaaccd\\", which contains a substring \\"aaaa\\" of length 4.","solution":"def longest_substring_with_k_changes(n, k, s): Returns the length of the longest substring of repeating characters that can be obtained by changing at most k characters. from collections import defaultdict max_len = 0 max_count = 0 start = 0 count = defaultdict(int) for end in range(n): count[s[end]] += 1 max_count = max(max_count, count[s[end]]) while end - start + 1 - max_count > k: count[s[start]] -= 1 start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"Petra is fascinated by geometric patterns and has been playing around with various grid-based games. Recently, she came up with a new game on a grid and would like to challenge you with the following problem: You are given a 2D grid of size N times M, initially filled with zeros. Petra will provide you with a list of commands, each describing a rectangular region on the grid that needs to be incremented. Specifically, each command is of the form r1, c1, r2, c2 which describes a rectangle where all the elements inside this rectangle should be incremented by one (inclusive). Here, r1 and r2 are the starting and ending row indices, and c1 and c2 are the starting and ending column indices of the rectangle. After all the commands have been processed, your task is to return the final state of the grid. You will be provided the following inputs: - The first line contains two integers N and M (1 leq N, M leq 100) representing the number of rows and columns in the grid, respectively. - The second line contains an integer K (1 leq K leq 3000) representing the number of commands. - Each of the next K lines contains four integers r1, c1, r2, and c2 (1 leq r1 leq r2 leq N, 1 leq c1 leq c2 leq M) describing a command to increment all elements within the rectangle specified by these coordinates. Output the resulting grid after all commands have been applied. Example: Input: ``` 3 4 2 1 1 2 2 2 2 3 3 ``` Output: ``` 1 1 0 0 1 2 1 0 0 1 1 0 ``` Note: In the provided example, the grid size is 3x4. The first command increments the subgrid from (1, 1) to (2, 2). The second command increments the subgrid from (2, 2) to (3, 3). Consequently, at the end, the grid should be displayed as shown in the output.","solution":"def update_grid(N, M, commands): Updates the grid of size N x M according to the given commands and returns the final grid. Parameters: N (int): number of rows in the grid M (int): number of columns in the grid commands (list of tuples): list of commands, each represented as (r1, c1, r2, c2) Returns: List[List[int]]: the resulting grid after all commands have been applied # Initialize the grid with zeros grid = [[0] * M for _ in range(N)] # Apply each command for r1, c1, r2, c2 in commands: for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): grid[i][j] += 1 return grid def process_input_and_update_grid(N, M, K, command_list): return update_grid(N, M, command_list)"},{"question":"You are given a connected undirected graph with N nodes and M edges. Each edge has a weight, denoted by W_i. You need to process Q queries. In each query, you are given an integer K, and you need to determine the length of the shortest path from node 1 to node N where all the edges in the path have weights at most K. If there is no such path, return -1 for that query. # Input The first line contains three integers N, M, and Q (2 leq N leq 1000, 1 leq M leq 5000, 1 leq Q leq 1000) — the number of nodes, the number of edges, and the number of queries, respectively. Each of the next M lines contains three integers U_i, V_i, and W_i (1 leq U_i, V_i leq N, 1 leq W_i leq 10^6) — an edge between nodes U_i and V_i with weight W_i. Each of the next Q lines contains a single integer K (1 leq K leq 10^6) — the maximum allowed weight of the edges in the path. # Output For each query, print the length of the shortest path from node 1 to node N where all the edges in the path have weights at most K. If there is no such path, print -1. # Example Input ``` 4 5 3 1 2 5 2 3 1 3 4 1 1 4 10 2 4 5 2 6 10 ``` Output ``` -1 7 7 ```","solution":"import heapq def dijkstra(graph, N, max_weight): distances = [float(\'inf\')] * (N + 1) distances[1] = 0 min_heap = [(0, 1)] while min_heap: current_distance, current_node = heapq.heappop(min_heap) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: if weight > max_weight: continue distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return distances[N] if distances[N] != float(\'inf\') else -1 def process_queries(N, M, edges, queries): graph = [[] for _ in range(N + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for k in queries: result = dijkstra(graph, N, k) results.append(result) return results"},{"question":"You are given an array `a` of `n` integers. Your task is to find a subsequence of `a` with the minimum absolute difference between the maximum and minimum elements of the subsequence, and the subsequence must have a length of at least `k`. The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 1000) — the size of the array `a` and the minimum length of the subsequence. The second line contains `n` integers `ai` (1 ≤ ai ≤ 10^9) — the elements of the array. Output a single integer — the minimum possible value of the absolute difference between the maximum and minimum elements of any valid subsequence of `a` with length at least `k`. Sample 1: Input: 5 3 1 5 9 6 4 Output: 2 Sample 2: Input: 7 4 8 1 4 9 12 5 3 Output: 4","solution":"def min_abs_diff_subseq(n, k, arr): Finds the minimum absolute difference between the maximum and minimum elements of a subsequence of length at least k. arr.sort() min_diff = float(\'inf\') for i in range(n - k + 1): current_diff = arr[i + k - 1] - arr[i] if current_diff < min_diff: min_diff = current_diff return min_diff # Example usage: # n, k = 5, 3 # arr = [1, 5, 9, 6, 4] # print(min_abs_diff_subseq(n, k, arr)) # Output: 2 # n, k = 7, 4 # arr = [8, 1, 4, 9, 12, 5, 3] # print(min_abs_diff_subseq(n, k, arr)) # Output: 4"},{"question":"A coding company is looking for a way to evaluate the team member’s efficiency in completing tasks. The team uses a task management system, where each task has an ID and completion time assigned to it. Given an array of tasks where each task is represented by a tuple (ID, time), the company\'s aim is to calculate the minimum amount of time required to complete all tasks. Here is the twist in the problem: any two tasks with the same ID must be executed sequentially. This means if a team member starts executing one task with a specific ID, they cannot start another task with the same ID until the current one is complete. You are given an integer n denoting the number of tasks, and a list of tuples tasks, where tasks[i][0] is the ID of the ith task, and tasks[i][1] is the time required to complete the ith task. Write a function that calculates the minimum total time required to complete all the tasks under the mentioned constraint. Function signature: ```python def minimum_completion_time(n: int, tasks: List[Tuple[int, int]]) -> int: pass ``` **Input:** - The first line contains an integer n (1 ≤ n ≤ 100,000) representing the number of tasks. - For each of the next n lines, each line contains two integers tasks[i][0] (1 ≤ tasks[i][0] ≤ 100,000) and tasks[i][1] (1 ≤ tasks[i][1] ≤ 1,000,000) representing the task ID and time required to complete the ith task. **Output:** - Output an integer representing the minimum total time required to complete all the tasks. **Example:** ```python assert minimum_completion_time(3, [(1, 3), (2, 2), (1, 5)]) == 10 assert minimum_completion_time(4, [(1, 3), (2, 2), (1, 6), (2, 1)]) == 12 ``` Explanation of example 1: - The tasks are [(1, 3), (2, 2), (1, 5)]. - You can complete the tasks in the order of [task with ID 1 of time 3, task with ID 2 of time 2, task with ID 1 of time 5]. - Total time = 3 + 2 + 5 = 10 Explanation of example 2: - The tasks are [(1, 3), (2, 2), (1, 6), (2, 1)]. - You can complete the tasks in the order of [task with ID 1 of time 3, task with ID 1 of time 6, task with ID 2 of time 2, task with ID 2 of time 1]. - Total time = 3 + 6 + 2 + 1 = 12","solution":"from typing import List, Tuple from collections import defaultdict def minimum_completion_time(n: int, tasks: List[Tuple[int, int]]) -> int: task_times = defaultdict(int) for task_id, time in tasks: task_times[task_id] += time total_time = sum(task_times.values()) return total_time"},{"question":"Alice is organizing a cake-baking competition, and she has invited four chefs: Bob, Charlie, David, and Eva, who will each bake a cake. Alice wants to ensure that the cakes do not look too similar, so she has pre-determined a list of ingredients that every chef will use. Each ingredient can be used in any quantity, but the order in which the ingredients are used will affect the appearance of the cake. Alice wants to know: what is the minimum possible \\"difference\\" in appearance between any two cakes? To quantify the difference between two cakes, Alice uses the Hamming distance between the two lists of ingredients, represented by sequences. The Hamming distance between two sequences of equal length is the number of positions at which the corresponding ingredients are different. Each chef is given a different permutation of the list of ingredients, and the ingredients are represented as integers. Help Alice determine the minimum possible Hamming distance between any two permsutations. Input format: - The first line contains an integer n (2 le n le 10^5), the number of ingredients. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^5), representing the list of ingredients. Output format: - A single integer, the minimum possible Hamming distance between any two permutations of the list of ingredients. Example: Input: 4 2 3 4 1 Output: 2 Explanation: For the example input, one possible scenario is: Bob: [2, 3, 4, 1] Charlie: [2, 3, 1, 4] David: [2, 4, 3, 1] Eva: [2, 1, 3, 4] The minimum possible Hamming distance between any two permutations is 2.","solution":"def minimum_hamming_distance(n, ingredients): Returns the minimum possible Hamming distance between any two permutations of the list. return n - 1"},{"question":"Outdoors enthusiasts often enjoy hiking in the forest. Bob is one such enthusiast, and he has begun recording his hikes. Bob\'s usual hiking routine takes him to a forest where there are a series of trails arranged in a linear sequence. Every trail is defined by its difficulty level, which is represented by a positive integer. Bob wants to make sure he is improving his stamina and thus prefers to hike in such a way that each subsequent trail he tackles has a higher difficulty level than the previous one. However, the hiking setup in the forest does not always allow for such an ideal sequence. Given a list of the difficulty levels of the trails, Bob wants to find out the length of the longest possible sequence of trails he can hike in strictly increasing order. Given an integer n (1 ≤ n ≤ 1000), the number of trails, and a list of n integers representing the difficulty levels of these trails, determine the length of the longest strictly increasing subsequence of trails Bob can choose to hike. # Input - An integer n (1 ≤ n ≤ 1000) — the number of trails. - A list of n integers (1 ≤ difficulty level ≤ 10000) representing the difficulty levels of the trails. # Output - A single integer representing the length of the longest strictly increasing subsequence of trails. # Example Input ``` 6 10 22 9 33 21 50 41 60 80 ``` Output ``` 6 ``` In this example, the longest strictly increasing subsequence of trails\' difficulty levels that Bob can hike is `10, 22, 33, 50, 60, 80`. Thus, the answer is `6`.","solution":"def longest_increasing_subsequence(n, difficulties): Returns the length of the longest strictly increasing subsequence of trails. :param n: Number of trails (integer) :param difficulties: List of integers representing difficulty levels of trails :return: Length of longest strictly increasing subsequence (integer) if n == 0: return 0 # Initialize the list to store the length of the longest subsequence up to each trail lis = [1] * n # Compute the LIS values in a bottom-up manner for i in range(1, n): for j in range(i): if difficulties[i] > difficulties[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # The length of the longest increasing subsequence is the maximum value in lis return max(lis)"},{"question":"Given an integer array `arr` of size `n`, your task is to determine if there exists a subarray (contiguous elements) whose sum is equal to `k`. If such a subarray exists, print \\"YES\\" followed by the starting and ending indices (1-based, inclusive) of any one such subarray. If no such subarray exists, print \\"NO\\". # Input The first line of input contains an integer `t` (1 leq t leq 100) — the number of test cases. The first line of each test case consists of two integers `n` (1 leq n leq 10^5) and `k` (-10^9 leq k leq 10^9) — the size of the array and the target sum, respectively. The second line of each test case contains `n` integers separated by spaces, representing the elements of the array `arr` (-10^4 leq arr[i] leq 10^4). # Output For each test case, print \\"YES\\" if there exists a subarray whose sum equals `k`, followed by the starting and ending indices of the subarray. If no such subarray exists, print \\"NO\\". # Example Input ``` 3 5 5 1 2 3 4 5 3 8 1 2 3 4 -3 -1 -2 -3 -4 ``` Output ``` YES 2 3 NO YES 1 2 ``` # Explanation - In the first test case, the subarray `[2, 3]` has the sum `2 + 3 = 5`. - In the second test case, no subarray sums up to `8`. - In the third test case, the subarray `[-1, -2]` has the sum `-1 + (-2) = -3`.","solution":"def find_subarray_with_sum(arr, k): This function checks if a subarray with sum k exists in the array arr. If such a subarray exists, it returns \\"YES\\" and the 1-based start and end indices. Otherwise, it returns \\"NO\\". current_sum = 0 sum_dict = {} for index, num in enumerate(arr): current_sum += num if current_sum == k: return f\\"YES 1 {index + 1}\\" if (current_sum - k) in sum_dict: return f\\"YES {sum_dict[current_sum - k] + 2} {index + 1}\\" sum_dict[current_sum] = index return \\"NO\\" def process_test_cases(test_cases): result = [] for n, k, arr in test_cases: result.append(find_subarray_with_sum(arr, k)) return result"},{"question":"Karl the painter has recently discovered his new obsession: creating masterpieces using only rectangular tiles. His canvas is a grid of n rows and m columns, and he always prefers to work with rectangular tiles of size a×b (1 ≤ a, b ≤ 100). Karl can place the rectangular tiles in any orientation (horizontal or vertical), but all tiles must stay within the canvas without overlap. Karl wants to know the minimum number of tiles required to completely cover his entire canvas without leaving any cell uncovered. Help Karl calculate this. The first line contains an integer t (1 ≤ t ≤ 10000) — the number of test cases. Each of the following t lines contains four integers n, m, a, and b (1 ≤ n, m, a, b ≤ 100) — describing the size of the canvas and the size of the tile respectively. Print t lines — the minimum number of tiles required for each test case. In the first sample case, Karl can use tiles of size 3×2 or 2×3 to cover a 3x3 canvas. The minimum number of tiles required is 2. In the second sample case, Karl can cover a 4x4 canvas with tiles of size 2×2, requiring exactly 4 tiles.","solution":"import math def min_tiles_required(t, test_cases): results = [] for case in test_cases: n, m, a, b = case horizontal_tiles = math.ceil(n / a) vertical_tiles = math.ceil(m / b) tiles_needed_orientation_one = horizontal_tiles * vertical_tiles horizontal_tiles = math.ceil(n / b) vertical_tiles = math.ceil(m / a) tiles_needed_orientation_two = horizontal_tiles * vertical_tiles results.append(min(tiles_needed_orientation_one, tiles_needed_orientation_two)) return results"},{"question":"You are given a list of transactions that occurred over a period of time in an organization. Each transaction either credits or debits a specific amount to/from an account. Your goal is to determine the balance of the account after processing all transactions up to a certain point in time. Each transaction is characterized by three values: - `t_i` — the time when the `i`-th transaction occurs, - `type_i` — the type of transaction: either \\"credit\\" or \\"debit\\", - `amount_i` — the amount of money (positive integer) associated with the transaction. You need to calculate the balance of the account after processing all transactions up to a given time `T`. Assume the initial balance of the account is zero. The first line of the input contains two integers `n` and `T` (`1 ≤ n ≤ 100,000`, `1 ≤ T ≤ 10^9`) — the number of transactions and the time up to which you need to calculate the balance. Each of the next `n` lines contains the description of one transaction in the format `t_i type_i amount_i` (`1 ≤ t_i ≤ 10^9`, `type_i` is either \\"credit\\" or \\"debit\\", `1 ≤ amount_i ≤ 10^6`). Print the balance of the account after processing all transactions up to time `T`. # Example Input: ``` 5 25 5 credit 100 10 debit 50 15 credit 200 20 debit 100 30 credit 300 ``` Output: ``` 150 ``` Explanation: - At time 5: credit 100 ⇒ balance = 100 - At time 10: debit 50 ⇒ balance = 100 - 50 = 50 - At time 15: credit 200 ⇒ balance = 50 + 200 = 250 - At time 20: debit 100 ⇒ balance = 250 - 100 = 150 - The transaction at time 30 occurs after time 25, so it is not considered in the balance computation up to time 25. Hence, the final balance is 150.","solution":"def calculate_balance(transactions, T): balance = 0 for t, transaction_type, amount in transactions: if t > T: break if transaction_type == \'credit\': balance += amount elif transaction_type == \'debit\': balance -= amount return balance"},{"question":"Given an integer array nums, you need to find the maximum value of a subarray that has no duplicate elements. A subarray is defined as a contiguous segment of the array. The first line contains an integer n (1 ≤ n ≤ 100000) — the length of the array. The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 100000) — the elements of the array. Print a single integer — the maximum sum of a subarray with all distinct elements. In the first sample, the array is [2, 1, 5, 2, 3, 5, 7]. The subarray with no duplicate elements that has the maximum sum is [2, 3, 5, 7], and its sum is 17. In the second sample, the array is [2, 2, 2, 2, 2]. The subarray with no duplicate elements that has the maximum sum is [2], and its sum is 2.","solution":"def max_subarray_with_distinct_elements(nums): # Dictionary to store the last occurrence of elements last_occurrence = {} max_sum = 0 current_sum = 0 start = 0 for end in range(len(nums)): # If the element already exists in the current window, move the \'start\' pointer if nums[end] in last_occurrence and last_occurrence[nums[end]] >= start: start = last_occurrence[nums[end]] + 1 current_sum = sum(nums[start:end+1]) else: current_sum += nums[end] # Update the last occurrence of the current element last_occurrence[nums[end]] = end # Update the max sum max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A new startup company is developing a new feature for their social networking application. The feature involves generating a personalized ranking list of users based on their mutual connections. Consider a network of users represented as an undirected graph with N nodes and M edges. Each node represents a user, and each edge represents a mutual connection between two users. The company wants to calculate the \\"influence score\\" of each user, defined as the number of mutual connections they have with other users. Your task is to write a program that calculates this influence score for each user. Input: - The first line contains two integers N and M (1 ≤ N, M ≤ 10^5), representing the number of users and the number of mutual connections, respectively. - The next M lines each contain two integers u and v (1 ≤ u, v ≤ N), representing a mutual connection between users u and v. Output: - Print N integers, where the i-th integer is the influence score of the i-th user. Example: Input: 5 4 1 2 1 3 2 3 4 5 Output: 2 2 2 1 1 Explanation: - User 1 has 2 mutual connections (with users 2 and 3). - User 2 has 2 mutual connections (with users 1 and 3). - User 3 has 2 mutual connections (with users 1 and 2). - User 4 has 1 mutual connection (with user 5). - User 5 has 1 mutual connection (with user 4).","solution":"def calculate_influence_scores(N, M, connections): Calculates the influence scores for each user. Parameters: N (int): Number of users. M (int): Number of mutual connections. connections (list of tuples): Each tuple contains two integers representing a mutual connection. Returns: list: A list of N integers representing the influence scores of each user. from collections import defaultdict influence_scores = [0] * N graph = defaultdict(set) for u, v in connections: graph[u - 1].add(v - 1) graph[v - 1].add(u - 1) for i in range(N): influence_scores[i] = len(graph[i]) return influence_scores"},{"question":"The citizens of a city are preparing for a festival, they plan to create a large digital display board to show numbers in sequence. They decided to use an interesting method to determine how many digits are needed to display all numbers from 1 to a given number n. The display board will sequentially show each number from 1 to n in a continuous manner. For example, if n is 13, the sequence of displayed numbers will be: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, which when concatenated together form the string \\"12345678910111213\\". Your task is to help them determine the total number of digits needed to display all numbers from 1 to n in this manner. Input The input consists of a single integer n (1 ≤ n ≤ 10^9). Output Output the total number of digits needed to display all numbers from 1 to n. Example Input 5 Output 5 Input 13 Output 17 Input 100 Output 192 Explanation In the first example, the sequence is \\"1, 2, 3, 4, 5\\" and the total number of digits is 5. In the second example, the sequence is \\"1, 2, 3, ..., 13\\" which concatenates to \\"12345678910111213\\" and contains 17 digits. In the third example, the sequence is \\"1, 2, 3, ..., 100\\" which concatenates to a string with a total of 192 digits.","solution":"def count_total_digits(n): Returns the total number of digits needed to display all numbers from 1 to n. total_digits = 0 length = 1 power_of_10 = 10 while power_of_10 <= n: total_digits += length * (power_of_10 - power_of_10 // 10) length += 1 power_of_10 *= 10 total_digits += length * (n - power_of_10 // 10 + 1) return total_digits"},{"question":"Vlad loves playing with his friends by distributing candies. He has a bag full of candies, and each candy has a specific sweetness level. Vlad wants to distribute these candies in such a way that the total sweetness of candies each friend receives is as balanced as possible. You are given an array of integers `candies` where `candies[i]` represents the sweetness level of the ith candy and an integer `m` representing the number of friends Vlad has. Your goal is to help Vlad distribute the candies such that the maximum sweetness any friend gets is minimized. Write a function `distributeCandies` that takes two arguments: 1. an integer array `candies` of size `n` (1 ≤ `n` ≤ 100,000, 1 ≤ `candies[i]` ≤ 1,000,000) 2. an integer `m` (1 ≤ `m` ≤ `n`) Your function should return the minimum possible value of the maximum sweetness any friend receives. Example 1: ``` Input: candies = [7, 2, 5, 10, 8], m = 2 Output: 18 Explanation: After distributing the candies, the best way is to distribute [7, 2, 5] to the first friend and [10, 8] to the second friend. ``` Example 2: ``` Input: candies = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3 Output: 17 Explanation: After distributing the candies, one optimal way is to distribute [1, 2, 3, 4, 5, 6] to the first friend, [7, 8] to the second friend and [9] to the third friend. ``` Note: The order in which candies are distributed matters and friends must receive consecutive candies.","solution":"def distributeCandies(candies, m): def canDistribute(mid): count = 1 current_sum = 0 for candy in candies: if current_sum + candy > mid: count += 1 current_sum = candy if count > m: return False else: current_sum += candy return True start, end = max(candies), sum(candies) result = end while start <= end: mid = (start + end) // 2 if canDistribute(mid): result = mid end = mid - 1 else: start = mid + 1 return result"},{"question":"Steve is a developer who likes to work on performance optimization problems. One day, he encountered the task of optimizing disk usage on his server. Given an array of file sizes, he wants to merge these files in such a way that the total cost of merging is minimized. The cost of merging two files is equal to the sum of their sizes, and the merging process can be repeated until only one file remains. Steve wants you to help him find the minimum cost required to merge all files into a single file. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of files. - The second line contains `n` integers, representing the sizes of the files (1 ≤ size ≤ 10^9 for each file). **Output:** - Print one integer — the minimum cost to merge all files into a single file. **Example:** Input: ``` 4 4 3 2 6 ``` Output: ``` 29 ``` In this example, merging the files in the following order minimizes the cost: 1. Merge 2 and 3 to get a file of size 5 (cost = 2 + 3 = 5). 2. Merge 4 and 5 to get a file of size 9 (cost = 4 + 5 = 9). 3. Merge 9 and 6 to get a file of size 15 (cost = 9 + 6 = 15). Total cost = 5 + 9 + 15 = 29.","solution":"import heapq def min_cost_to_merge_files(file_sizes): Calculate the minimum cost to merge all files into a single file. Parameters: file_sizes (list of int): A list containing the sizes of the files. Returns: int: The minimum cost to merge all files. if not file_sizes: return 0 heapq.heapify(file_sizes) total_cost = 0 while len(file_sizes) > 1: first = heapq.heappop(file_sizes) second = heapq.heappop(file_sizes) merge_cost = first + second total_cost += merge_cost heapq.heappush(file_sizes, merge_cost) return total_cost"},{"question":"Your task is to help the Credit Card Fraud Detection team at a major bank. They have found that one effective way to detect fraud is to track the unusual number of distinct vendors at which transactions occur within a specific timeframe. Given a list of transaction timestamps and associated vendor IDs, you need to write a program that determines the maximum number of distinct vendors where transactions occurred within any given window of size `k` seconds. The input consists of two lines: - The first line contains two integers `n` and `k` (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the number of transactions and the size of the time window in seconds. - The second line contains `n` pairs of integers `ti` and `vi` (1 ≤ ti ≤ 10^9, 1 ≤ vi ≤ 10^9) — where `ti` is the transaction timestamp in seconds and `vi` is the vendor ID. Output a single integer — the maximum number of distinct vendors within any time window of size `k` seconds. Example: ``` Input 5 3 1 101 2 202 3 101 5 303 6 202 Output 2 ``` Explanation: In the example, one optimal way to place the time window is from second 1 to second 3. During this period, transactions took place at vendors with IDs 101 and 202, resulting in 2 distinct vendors. Thus, the maximum number of distinct vendors within any `k` second window is 2.","solution":"from collections import deque, defaultdict def max_distinct_vendors(n, k, transactions): Returns the maximum number of distinct vendors within any time window of size `k` seconds. Parameters: n (int): number of transactions k (int): size of the time window in seconds transactions (list of tuples): each tuple contains (timestamp, vendor_id) Returns: int: maximum number of distinct vendors within any time window of size `k` seconds transactions.sort() # Sort transactions by timestamp max_vendors = 0 current_vendors = defaultdict(int) window = deque() for ti, vi in transactions: # Remove old transactions outside the k-second window while window and window[0][0] < ti - k + 1: old_ti, old_vi = window.popleft() current_vendors[old_vi] -= 1 if current_vendors[old_vi] == 0: del current_vendors[old_vi] # Add new transaction to the window window.append((ti, vi)) current_vendors[vi] += 1 # Update the max number of distinct vendors max_vendors = max(max_vendors, len(current_vendors)) return max_vendors"},{"question":"You are given a simple directed graph with ( n ) nodes and ( m ) edges. Your task is to determine if there exists a Hamiltonian path in the graph. A Hamiltonian path is a path in the graph that visits each node exactly once. First line of input contains two integers ( n ) and ( m ) (1 ≤ ( n ) ≤ 100, 0 ≤ ( m ) ≤ 1000) representing the number of nodes and edges in the graph respectively. Each of the next ( m ) lines contains two integers ( u ) and ( v ) (1 ≤ ( u, v ) ≤ ( n )) which denotes a directed edge from node ( u ) to node ( v ). Output \\"YES\\" if there exists a Hamiltonian path in the graph, otherwise output \\"NO\\". **Example:** **Input:** ``` 4 4 1 2 2 3 3 4 4 1 ``` **Output:** ``` YES ``` **Input:** ``` 4 3 1 2 2 3 3 1 ``` **Output:** ``` NO ```","solution":"def has_hamiltonian_path(n, m, edges): from itertools import permutations # Create adjacency matrix for the graph graph = [[0] * n for _ in range(n)] for u, v in edges: graph[u-1][v-1] = 1 # Convert to 0-indexed # Check all permutations of nodes nodes = list(range(n)) for perm in permutations(nodes): path_exists = True for i in range(n - 1): if graph[perm[i]][perm[i + 1]] == 0: path_exists = False break if path_exists: return \\"YES\\" return \\"NO\\" # Example Usage n, m = 4, 4 edges = [(1, 2), (2, 3), (3, 4), (4, 1)] print(has_hamiltonian_path(n, m, edges)) # Should print YES n, m = 4, 3 edges = [(1, 2), (2, 3), (3, 1)] print(has_hamiltonian_path(n, m, edges)) # Should print NO"},{"question":"A researcher is studying the ecosystem of an isolated island, where there are n different species of animals. These species interact with each other in a symbiotic network, which can be represented as an undirected, weighted graph. Each node in the graph represents a species, and each edge represents a symbiotic relationship between two species, with a weight indicating the strength of this relationship. The researcher wishes to understand the most vital relationships in the ecosystem by identifying a minimum spanning tree (MST) of this network. A minimum spanning tree is a subset of the edges that connects all the nodes together without any cycles and with the minimum possible total edge weight. Write a program to find the minimum total strength required to connect all the species. The program should read the number of species and the relationships between them, then output the total strength of the minimum spanning tree. # Input - The first line contains two integers n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ 105), the number of species and the number of relationships respectively. - The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 109), which represents a relationship between species u and v with strength w. # Output Output a single integer: the total strength of the minimum spanning tree connecting all species. # Example Input ``` 4 5 1 2 3 1 3 1 2 3 4 3 4 2 2 4 5 ``` Output ``` 6 ``` In this example, the minimum spanning tree consists of the edges with strengths 1, 2, and 3, so the total strength is 6.","solution":"def find_mst_total_strength(n, m, edges): Finds the total strength of the minimum spanning tree (MST) connecting all species. Parameters: n : int : Number of species m : int : Number of relationships edges : list of tuples : List containing the relationships represented as (u, v, w) Returns: int : The total strength of the MST from heapq import heappop, heappush # Create an adjacency list adj = [[] for _ in range(n + 1)] for u, v, w in edges: adj[u].append((w, v)) adj[v].append((w, u)) # Initialize min-heap for Prim\'s algorithm min_heap = [(0, 1)] # (cost, node), starting with node 1 and cost 0 total_cost = 0 visited = set() # Prim\'s algorithm to find MST while min_heap and len(visited) < n: cost, node = heappop(min_heap) if node not in visited: visited.add(node) total_cost += cost for next_cost, next_node in adj[node]: if next_node not in visited: heappush(min_heap, (next_cost, next_node)) # If we have not visited all nodes, that means the graph is not fully connected if len(visited) != n: return -1 # or some error value as the graph isn\'t fully connected. return total_cost # Reading input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] index = 2 for _ in range(m): u = int(data[index]) v = int(data[index+1]) w = int(data[index+2]) edges.append((u, v, w)) index += 3 print(find_mst_total_strength(n, m, edges)) # Uncomment to test using main function # if __name__ == \\"__main__\\": # main()"},{"question":"An event management company is organizing a series of events across different cities. Each event can only hold a certain limited number of people and each person can only attend one event. Given a list of events with their respective capacities and the number of people interested in attending each event, determine the maximum number of people that can be accommodated across all the events. Each test case starts with an integer t (1 le t le 1000) — the number of test cases. For each test case, the first line contains an integer n (1 le n le 1000) — the number of events. The next n lines contain two integers c_i and p_i (0 le c_i, p_i le 1000), where c_i is the capacity of the i-th event and p_i is the number of people interested in attending the i-th event. For each test case, output a single integer — the maximum number of people that can be accommodated across all events. # Example **Input:** ``` 2 3 10 25 15 10 20 5 2 30 25 5 10 ``` **Output:** ``` 30 30 ``` **Explanation:** In the first test case, the maximum capacity that can be accommodated is: - Event 1: It has a capacity of 10 and 25 people interested. 10 people can be accommodated. - Event 2: It has a capacity of 15 and 10 people interested. 10 people can be accommodated. - Event 3: It has a capacity of 20 and 5 people interested. 5 people can be accommodated. The total is 10 (Event 1) + 10 (Event 2) + 5 (Event 3) = 25 people. In the second test case, the maximum capacity that can be accommodated is: - Event 1: It has a capacity of 30 and 25 people interested. 25 people can be accommodated. - Event 2: It has a capacity of 5 and 10 people interested. 5 people can be accommodated. The total is 25 (Event 1) + 5 (Event 2) = 30 people.","solution":"def max_people_accommodated(test_cases): results = [] for case in test_cases: n = case[0] events = case[1] max_people = 0 for c, p in events: max_people += min(c, p) results.append(max_people) return results"},{"question":"Bob loves collecting rocks. Every time he finds a new rock, he adds it to his special collection box. One day, Bob obtains a very special magical stone. This stone has an interesting ability: it can duplicate all other stones in the box, but only once. Bob\'s box initially contains `n` stones, each with a unique color represented by a string. When the magical stone duplicates all other stones, each stone (including those that were recently duplicated) forms a pair with one of the duplicated stones. Consequently, there will be a total of `2n` stones remaining in the box after the duplication. Bob loves to arrange his rocks in different sequences, and he started wondering how many unique sequences of colors he can create from the `2n` stones in his box. However, generating all possible sequences for larger collections can be very challenging for him, so he has asked you to help him calculate the number of unique sequences modulo 10^9 + 7. The first line of the input contains an integer `n` (1 ≤ n ≤ 100,000) — the number of unique-colored stones initially in the box. The second line contains `n` strings representing the colors of each unique stone. Each string has length between 1 and 50 and consists of only lowercase English letters. Output a single integer — the number of unique sequences modulo 10^9 + 7 that Bob can create after using the magical stone to duplicate all his stones. # Example Input ``` 3 red blue green ``` Output ``` 8 ``` In this example, initially Bob has 3 unique stones: \\"red\\", \\"blue\\", and \\"green\\". After the magical stone duplicates the stones, Bob will have two \\"red\\", two \\"blue\\", and two \\"green\\" stones. Possible unique sequences of colors are: - red red blue blue green green - red red blue green green blue - red blue blue red green green - red blue green red green blue - red green red blue blue green - red green blue red blue green - red green blue green red blue - red blue green green red blue Thus, there are 8 unique sequences in total.","solution":"MOD = 10**9 + 7 def number_of_unique_sequences(n, colors): Returns the number of unique sequences modulo 10^9 + 7 after duplicating all the stones. :param n: int - initial number of unique-colored stones :param colors: list - list of strings representing the colors of each unique stone :return: int - number of unique sequences after duplication # The formula to calculate the number of unique sequences is 2^n return pow(2, n, MOD)"},{"question":"An online grocery store in Berland keeps a list of available items in its inventory using a string. Each item is represented by its unique code, which is a string of small Latin letters and digits. The store occasionally updates the inventory by adding new items or removing old ones, and these updates are given as a sequence of additions and deletions. You are given two strings: the initial inventory list and the update sequence. The update sequence contains pairs of operations and item codes. Each operation is either \'A\' (add) or \'D\' (delete), and it operates on the items listed sequentially. Write a function to determine the final state of the inventory after processing all updates. The inventory should be printed as a sorted string of unique item codes separated by commas. If an item to be deleted does not exist in the inventory, the operation should be ignored. If an item to be added already exists, it should not be added again. The initial inventory list and update sequence both contain at most 100 characters. Each item code has a maximum length of 10 characters. The first line contains the initial inventory list, where items are separated by commas. The second line contains the update sequence, where each pair consists of an \'A\' or \'D\' followed by an item code. Output a single line containing the final sorted inventory list of unique items, separated by commas. If the inventory is empty, output an empty line. # Example Input ``` apple,banana,carrot AorangeDcarrotAappleDbananaApear ``` Output ``` apple,orange,pear ```","solution":"def update_inventory(initial_inventory, update_sequence): Updates the initial inventory based on the given update sequence. Parameters: initial_inventory (str): The initial inventory list. update_sequence (str): The update sequence containing pairs of operations and items. Returns: str: The final sorted inventory list of unique items. # Split the initial inventory into a set of items inventory = set(initial_inventory.split(\',\')) if initial_inventory else set() # Process the update sequence i = 0 while i < len(update_sequence): operation = update_sequence[i] item_code = \'\' i += 1 while i < len(update_sequence) and not update_sequence[i].isupper(): item_code += update_sequence[i] i += 1 if operation == \'A\': inventory.add(item_code) elif operation == \'D\': inventory.discard(item_code) # Convert the inventory set to a sorted list and join with commas final_inventory = sorted(inventory) return \',\'.join(final_inventory)"},{"question":"You are given a matrix of integers of size n times m. Initially, each element in the matrix is equal to 0. You will be given q queries. Each query is of the form: 1. \\"1 r x\\": Update the entire row \'r\' to value \'x\'. 2. \\"2 c y\\": Update the entire column \'c\' to value \'y\'. You need to process these queries and print the final state of the matrix. # Input - The first line contains three integers n, m, q (1 le n, m le 500, 1 le q le 100,000) - the dimensions of the matrix and the number of queries. - The next q lines contain one of the two types of queries mentioned above: - \\"1 r x\\": an integer r (1 le r le n) and an integer x (1 le x le 10^9) - update the entire row \'r\' to value \'x\'. - \\"2 c y\\": an integer c (1 le c le m) and an integer y (1 le y le 10^9) - update the entire column \'c\' to value \'y\'. # Output Print the final state of the matrix after all queries have been processed. # Example Input ``` 3 3 4 1 2 5 2 3 6 1 1 5 2 2 7 ``` Output ``` 5 7 5 5 7 5 0 7 6 ``` # Explanation - After the first query: The matrix is: ``` 0 0 0 5 5 5 0 0 0 ``` - After the second query: The matrix is: ``` 0 0 6 5 5 6 0 0 6 ``` - After the third query: The matrix is: ``` 5 5 6 5 5 6 0 0 6 ``` - After the fourth query: The matrix is: ``` 5 7 6 5 7 6 0 7 6 ```","solution":"def matrix_updates(n, m, q, queries): matrix = [[0]*m for _ in range(n)] for query in queries: query = query.split() if query[0] == \\"1\\": r = int(query[1]) - 1 x = int(query[2]) for col in range(m): matrix[r][col] = x elif query[0] == \\"2\\": c = int(query[1]) - 1 y = int(query[2]) for row in range(n): matrix[row][c] = y return matrix"},{"question":"You are a software architect and have been tasked with designing a system for an online bookstore. The bookstore wants to implement a new recommendation engine that suggests books to users based on their previous purchases. The engine should recommend books that have been frequently purchased together with books the user has already bought. Assume you are given a list of purchase records, where each record is a list of book IDs that were bought together in a single transaction. Your job is to design a function that, given a user’s purchase history and the purchase records, returns the top `k` books that are frequently bought together with the books the user has in their purchase history. The recommendation should not include books the user has already bought. # Function Signature ```python def recommend_books(purchase_history: List[int], purchase_records: List[List[int]], k: int) -> List[int]: ``` # Input - `purchase_history`: a list of integers, where each integer represents a book ID that the user has bought. - `purchase_records`: a list of lists, where each inner list contains integers representing book IDs bought together in one transaction. - `k`: an integer representing the number of recommendations to return. # Output - A list of `k` integers representing the book IDs of the recommended books, in order of highest recommendation score based on frequency. # Example ```python purchase_history = [1, 2, 3] purchase_records = [ [1, 2, 4], [2, 3, 5], [1, 5], [4, 2, 6], [1, 3, 5] ] k = 3 # Should return [5, 4, 6], as book 5 appears 3 times in purchases with books from history, # book 4 appears 2 times, and book 6 appears once. print(recommend_books(purchase_history, purchase_records, k)) # Output: [5, 4, 6] ``` # Notes - The function should handle edge cases appropriately, such as when there are no purchase records or when `k` is larger than the possible number of recommendations. - The function should be optimized to handle large inputs efficiently.","solution":"from collections import defaultdict from typing import List, Tuple def recommend_books(purchase_history: List[int], purchase_records: List[List[int]], k: int) -> List[int]: Recommends top k books that are frequently bought together with the books the user has already bought. Args: purchase_history (List[int]): List of book IDs that the user has bought. purchase_records (List[List[int]]): List of lists, where each inner list contains book IDs bought together in one transaction. k (int): Number of recommendations to return. Returns: List[int]: List of top k recommended book IDs. book_count = defaultdict(int) # Dictionary to count occurrences of books bought with books in purchase_history purchase_set = set(purchase_history) # Set for quick lookup of purchased books for record in purchase_records: record_set = set(record) common_books = purchase_set & record_set if common_books: # If there is at least one common purchased book for book in record: if book not in purchase_set: book_count[book] += 1 # Get the top k books by frequency recommended_books = sorted(book_count.items(), key=lambda x: (-x[1], x[0])) return [book for book, count in recommended_books[:k]]"},{"question":"You\'re given a string consisting of lowercase English letters. You need to check if it is possible to transform the string into a palindrome by rearranging its characters. If it is possible, print \\"YES\\", otherwise print \\"NO\\". A palindrome is a word that reads the same backward as forward, for example, \\"madam\\" or \\"racecar\\". The input string will be of length at least 1 and at most 100,000 characters. **Input:** - A single line containing a string s (1 ≤ |s| ≤ 100,000). **Output:** - A single line containing \\"YES\\" if it is possible to rearrange the characters of the input string into a palindrome, otherwise \\"NO\\". **Example:** ``` Input: civic Output: YES Input: ivicc Output: YES Input: hello Output: NO ```","solution":"def can_form_palindrome(s): Check if it\'s possible to rearrange the characters of the string `s` into a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged into a palindrome if there is at most one character with an odd count if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a sequence of n integers (1 ≤ n ≤ 100000) and a series of q queries (1 ≤ q ≤ 100000). Each query gives a pair of indices (l, r) and asks you to determine how many distinct integers exist between these indices in the initial sequence. For each query (l, r), count the number of distinct integers between the indices l and r (inclusive) in the sequence. # Input - The first line contains two integers n and q (1 ≤ n, q ≤ 100000). - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000) representing the initial sequence. - Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n), representing a query. # Output - For each query, print a single integer representing the number of distinct integers between the indices l and r (inclusive). # Example Input: ``` 5 3 1 2 1 3 2 1 3 2 4 1 5 ``` Output: ``` 2 3 3 ``` # Explanation: For the first query (1, 3), the distinct integers are {1, 2}. For the second query (2, 4), the distinct integers are {2, 1, 3}. For the third query (1, 5), the distinct integers are {1, 2, 3}.","solution":"def count_distinct_integers(n, q, sequence, queries): Returns a list of integers, where each integer is the number of distinct integers in the subarray specified by corresponding query (l, r). results = [] for l, r in queries: distinct_count = len(set(sequence[l-1:r])) results.append(distinct_count) return results"},{"question":"You are given an array of integers representing the heights of students standing in a row. The teacher wants to rearrange the students so that the heights of the students are in a strictly alternating pattern, starting with the shortest student, then the tallest student, then the next shortest, and so on. Write a program that rearranges the heights of the students as described. If it is impossible to rearrange them in such a manner, print \\"Impossible\\". The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of students in the row. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the students. Print the rearranged heights if it is possible to do so. Otherwise, print \\"Impossible\\". For example: Input: 6 1 3 5 2 4 6 Output: 1 6 2 5 3 4 Input: 3 1 2 3 Output: Impossible","solution":"def rearrange_heights(n, heights): if n < 3: return \\"Impossible\\" heights.sort() if n % 2 == 1: return \\"Impossible\\" half = n // 2 result = [] for i in range(half): result.append(heights[i]) result.append(heights[half + i]) return result"},{"question":"You are given two strings, s1 and s2. You want to manipulate s1 such that it becomes s2. You are allowed to perform the following operations: 1. Append one character to the end of the string. 2. Remove one character from the end of the string. 3. Replace one character in the string with another character. Your task is to determine the minimum number of operations required to transform s1 into s2. First line of input contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each test case consists of two lines. The first line contains a string s1 and the second line contains a string s2. The lengths of s1 and s2 will be between 1 and 100. For each test case, print the minimum number of operations required to transform s1 into s2. **Example Input:** ``` 3 abcdef azced abc yabd kitten sitting ``` **Example Output:** ``` 3 2 3 ``` In the first example, you can transform \\"abcdef\\" to \\"azced\\" with the following operations: 1. Replace \'b\' with \'z\' 2. Replace \'d\' with \'c\' 3. Remove \'f\'","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to transform s1 into s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n] def process_multiple_cases(cases): results = [] for s1, s2 in cases: results.append(min_operations(s1, s2)) return results"},{"question":"You are given a string containing only lowercase letters. A substring is defined as a contiguous sequence of characters within a string. Your task is to determine the length of the longest substring that contains at most two distinct characters. For example, given the string \\"eceba\\", the longest substring with at most two distinct characters is \\"ece\\", which has a length of 3. Another example is the string \\"ccaabbb\\", where the longest substring with at most two distinct characters is \\"aabbb\\", with a length of 5. Write a function `longest_two_char_substring(s: str) -> int` that takes a string `s` as input and returns the length of the longest substring containing at most two distinct characters. **Input:** - A single string `s` with length in the range [1, 100000], containing only lowercase letters. **Output:** - A single integer representing the length of the longest substring with at most two distinct characters. **Example:** Input: `eceba` Output: `3` Input: `ccaabbb` Output: `5` **Note:** The function should be efficient and handle large inputs within the given constraints. You are required to implement the function and ensure it handles edge cases as well as the maximum input size effectively.","solution":"def longest_two_char_substring(s: str) -> int: Returns the length of the longest substring that contains at most two distinct characters. n = len(s) if n < 3: return n # If the string length is less than 3, the whole string is the answer. left, right = 0, 0 char_count = {} max_length = 2 while right < n: char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"You are given a tree (a connected graph with no cycles) consisting of `n` nodes and `n-1` edges. Each node has a positive integer value associated with it. Your task is to find the sum of the values of nodes that are part of the path between two given nodes `u` and `v`, including those two nodes. The tree is rooted at node 1. The tree structure and node values are given, as well as `q` queries. Each query contains two integers `u` and `v`, representing the nodes between which the sum needs to be calculated. Input: - The first line contains a single integer `n` (1 ≤ `n` ≤ 100,000), the number of nodes. - The second line contains `n` integers, the values of the nodes `a1, a2, ..., an` (1 ≤ `ai` ≤ 1,000). - Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ `u, v` ≤ `n`), representing an edge between nodes `u` and `v`. - The next line contains a single integer `q` (1 ≤ `q` ≤ 100,000), the number of queries. - Each of the next `q` lines contains two integers `u` and `v`, the nodes for which the path sum needs to be computed. Output: - For each query, print the sum of the values of the nodes on the path between `u` and `v`. Sample Input: ``` 5 3 2 1 10 1 1 2 1 3 2 4 2 5 3 1 4 3 5 2 4 ``` Sample Output: ``` 16 14 7 ``` Explanation: In the sample input: - The path from node 1 to node 4 is (1 - 2 - 4) with sum 3 + 2 + 10 = 15. - The path from node 3 to node 5 is (3 - 1 - 2 - 5) with sum 1 + 3 + 2 + 1 = 7. - The path from node 2 to node 4 is (2 - 4) with sum 2 + 10 = 12.","solution":"def path_sum_tree(n, values, edges, queries): from collections import defaultdict # Build adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) parent = [-1] * (n + 1) depth = [0] * (n + 1) sums = [0] * (n + 1) # DFS to set up parent, depth and sums arrays def dfs(node, par, dep, val_sum): parent[node] = par depth[node] = dep sums[node] = val_sum for neighbor in tree[node]: if neighbor != par: dfs(neighbor, node, dep + 1, val_sum + values[neighbor - 1]) # Start DFS from the root (Node 1 is considered the root) dfs(1, -1, 0, values[0]) def lca(u, v): # Bring both nodes to the same depth while depth[u] > depth[v]: u = parent[u] while depth[v] > depth[u]: v = parent[v] # Now bring both nodes upwards simultaneously to find the LCA while u != v: u = parent[u] v = parent[v] return u results = [] for u, v in queries: lca_node = lca(u, v) path_sum = sums[u] + sums[v] - 2 * sums[lca_node] + values[lca_node - 1] results.append(path_sum) return results"},{"question":"You are given a string of parentheses. A string of parentheses is valid if: 1) Open brackets are closed by the same type of brackets. 2) Open brackets are closed in the correct order. In this problem, we only have the types of brackets \'(\' and \')\'. You are given a string s containing only characters \'(\' and \')\'. You need to check if the string can be made valid by removing at most one character from it. Write a function `validate_parentheses` that takes a string as input and returns \\"YES\\" if the string can be made valid by removing at most one character, and \\"NO\\" otherwise. # Input: - The first line contains an integer t (1 leq t leq 10^4) - the number of test cases. - The following t lines each contain a string s (1 leq |s| leq 10^5) – the string of parentheses. # Output: For each test case, output \\"YES\\" if the string can be made valid by removing at most one character, and \\"NO\\" otherwise. # Example: ``` Input: 5 () (() ()) ))(( (()(( Output: YES YES YES NO NO ``` Explanation: 1. The string \\"()\\" is already valid, so we do not need to remove any character. 2. The string \\"(()\\" can be made valid by removing one \'(\'. 3. The string \\"())\\" can be made valid by removing one \')\'. 4. The string \\"))((\\" cannot be made valid by removing a single character. 5. The string \\"(()))(\\" cannot be made valid by removing a single character.","solution":"def validate_parentheses(t, test_cases): results = [] for s in test_cases: if is_valid(s): results.append(\\"YES\\") elif can_be_made_valid_by_removing_one(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def is_valid(s): balance = 0 for char in s: if char == \'(\': balance += 1 else: balance -= 1 if balance < 0: return False return balance == 0 def can_be_made_valid_by_removing_one(s): return is_valid(s[1:]) or is_valid(s[:-1]) def run_validate_parentheses(t, test_cases): results = validate_parentheses(t, test_cases) for result in results: print(result)"},{"question":"You are given a positive integer n. Your task is to find the minimum number of squares needed to represent n as the sum of squares. For example, for n = 12, the answer is 3 because 12 can be represented as (4 + 4 + 4). Similarly, for n = 13, the answer is 2 because 13 can be represented as (9 + 4). Input The input consists of one single integer n (1 ≤ n ≤ 10000). Output Output a single integer, the minimum number of squares that sum up to n. Example Input: 12 Output: 3 Input: 13 Output: 2 Note: The task can be solved using dynamic programming techniques.","solution":"def min_squares(n): Returns the minimum number of squares needed to sum up to n. if n <= 0: return 0 # Create a list to store the minimum number of squares for each number up to n dp = [float(\'inf\')] * (n + 1) dp[0] = 0 for i in range(1, n + 1): j = 1 while j * j <= i: dp[i] = min(dp[i], dp[i - j * j] + 1) j += 1 return dp[n]"},{"question":"A new online store has been launched, and they are handling various types of orders. Each order has a specific delivery time associated with it. Your task is to write a program that helps the store to find out the maximum number of orders they can deliver within a given time limit. The store can only handle one order at a time and they can choose the order in which they deliver. However, they cannot handle two orders at the same time. The first line of the input contains two integers, `n` (1 ≤ n ≤ 100,000) representing the number of orders and `T` (1 ≤ T ≤ 10^9) representing the time limit in which the orders must be delivered. The next line contains `n` space-separated integers `t_1, t_2, ... , t_n` (1 ≤ t_i ≤ T) representing the delivery times of each order. Output the maximum number of orders the store can deliver within the given time limit. **Example:** Input: ``` 5 11 2 2 3 7 5 ``` Output: ``` 3 ``` Explanation: The maximum number of orders in this case is 3 (with delivery times 2, 2, and 3).","solution":"def max_orders(n, T, times): Returns the maximum number of orders that can be delivered within the given time limit. Parameters: n (int): Number of orders. T (int): Time limit in which orders must be delivered. times (list of int): List of delivery times for each order. Returns: int: Maximum number of orders that can be delivered within the given time limit. times.sort() total_time = 0 count = 0 for time in times: if total_time + time <= T: total_time += time count += 1 else: break return count"},{"question":"You are given a grid of n × m cells, where each cell contains a positive integer. Let\'s call a subarray any rectangular subset of the grid that contains at least one cell. The weight of a subarray is defined as the sum of all integers within it. You need to find the subarray with the maximum weight among all possible subarrays of the grid. Output the maximum weight. The first line contains two integers n and m, (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next n lines contains m space-separated integers, where each integer is between 1 and 1000 inclusive. Print a single integer — the maximum weight of any subarray in the grid. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 45 Explanation: The subarray consisting of the entire grid has the maximum weight, which is 45.","solution":"def max_weight_subarray(grid): Returns the maximum weight of any subarray in the grid. :param grid: List of lists, where each inner list represents a row in the grid :return: Integer, maximum weight of any subarray n = len(grid) m = len(grid[0]) max_weight = float(\'-inf\') # Calculate prefix sums for the grid prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n): for j in range(m): prefix_sum[i+1][j+1] = grid[i][j] + prefix_sum[i][j+1] + prefix_sum[i+1][j] - prefix_sum[i][j] # Evaluate maximum sum of all possible subarrays using prefix sums for start_row in range(n): for end_row in range(start_row, n): for start_col in range(m): for end_col in range(start_col, m): current_sum = (prefix_sum[end_row + 1][end_col + 1] - prefix_sum[start_row][end_col + 1] - prefix_sum[end_row + 1][start_col] + prefix_sum[start_row][start_col]) max_weight = max(max_weight, current_sum) return max_weight"},{"question":"You have recently moved into a new house and discovered a number of plants growing in your backyard. These plants are a mixture of flowers and weeds. Each plant in your backyard can be described with two integers: its height and an arbitrary unique value assigned to it representing its \\"type\\" (let\'s say type 1 for flowers and type 2 for weeds). Your goal is to create a fence such that it passes through all the plants, but it should have the minimum possible length. The fence should be either a horizontal or a vertical line and it should not cut through any plant. Given the heights and types of the plants, find the minimum possible length of the fence that can be built. The first line contains a single integer n (1 ≤ n ≤ 2 * 10^5) — the number of plants in the backyard. Each of the next n lines contains two integers hi and ti (1 ≤ hi ≤ 10^9, 1 ≤ ti ≤ 2) — the height of the i-th plant and its type. Print one integer — the minimum length of the fence that can be built so that it passes through all plants but does not cut through any plants. # Example Input: ``` 5 3 1 9 1 8 2 2 2 4 1 ``` Output: ``` 6 ``` In this example, the fence can be placed vertically between the plants with heights 3 and 9. Thus the minimal length of the fence that passes through all plants is 6.","solution":"def minimum_fence_length(n, plants): Returns the minimum possible length of the fence that passes through all plants but does not cut through any plants. heights = sorted([h for h, t in plants]) min_length = float(\'inf\') # Calculate distances between consecutive sorted heights for i in range(1, len(heights)): min_length = min(min_length, heights[i] - heights[i - 1]) return min_length"},{"question":"Peter is organizing a mini programming competition and has a collection of problem statements stored in a string. Each problem statement is identified by a unique problem ID, which is an integer. Peter wants to know the frequency of each problem ID in the list of problems. Given the string `problems` that consists of problem IDs separated by spaces, your task is to write a program that processes this string and counts the occurrences of each problem ID. The first line contains a single string `problems` (1 ≤ |problems| ≤ 10^6) consisting of integers separated by spaces. The integers are non-negative and do not have leading zeros. Output each unique problem ID and the number of times it appears in the string, in ascending order of problem IDs. # Example Input: ``` 1 2 3 2 1 2 4 4 4 5 1 1 1 ``` Output: ``` 1 5 2 3 3 1 4 3 5 1 ``` In the example, the problem IDs are 1, 2, 3, 4, and 5. Problem ID 1 appears 5 times, ID 2 appears 3 times, ID 3 appears 1 time, ID 4 appears 3 times, and ID 5 appears 1 time. The output lists these counts in ascending order of problem IDs.","solution":"def count_problem_ids(problems): Count the occurrences of each problem ID in the string and return in ascending order of problem IDs. # Split the string into individual problem IDs problem_ids = problems.split() # Dictionary to maintain the count of each problem ID problem_count = {} # Count each problem ID for problem_id in problem_ids: if problem_id in problem_count: problem_count[problem_id] += 1 else: problem_count[problem_id] = 1 # Sort the problem IDs and prepare the result sorted_problem_counts = sorted(problem_count.items(), key=lambda x: int(x[0])) return sorted_problem_counts"},{"question":"The Kingdom of Farland is known for its magical potions. The kingdom\'s wizards are trying to brew the perfect potion and they have a very peculiar method to achieve that. They have n different ingredients, each having a magical power value. The wizards will take some of these ingredients to form a potion, and the power of the potion is defined as the sum of the magical power values of the chosen ingredients. However, there is a strict rule that the power of the potion must be as close as possible to a given target value T, but not exceed T. You are given n ingredients, each with a specific magical power value, and an integer T. Your task is to determine the maximum possible power of a potion that is less than or equal to T. # Input The first line contains two integers n and T (1 ≤ n ≤ 1000, 1 ≤ T ≤ 10^6) — the number of ingredients and the target value T. The second line contains n integers, where the i-th integer is the magical power value of the i-th ingredient (1 ≤ power[i] ≤ 10^5). # Output Print one integer — the maximum possible power of a potion that is less than or equal to T. # Example Input 5 50 10 20 30 40 50 Output 50 Input 4 35 10 15 20 25 Output 35 Input 3 10 1 2 5 Output 8 # Note In the first example, the best potion power that does not exceed 50 is the sum of the ingredients with power values 10, 20, and 20, which equals 50. In the second example, the best potion power that does not exceed 35 is the sum of the ingredients with power values 10, 15, and 10, which equals 35. In the third example, the best potion power that does not exceed 10 is the sum of the ingredients with power values 1, 2, and 5, which equals 8.","solution":"def max_potion_power(n, T, powers): Find the maximum possible sum of subset of \'powers\' that is less than or equal to T. from itertools import combinations max_power = 0 # Iterate over all possible subsets of powers for r in range(1, n+1): for subset in combinations(powers, r): s = sum(subset) if s <= T: max_power = max(max_power, s) return max_power"},{"question":"Farmer John has a fence made of n wooden planks, each plank has a height hi (1 ≤ hi ≤ 105). Due to heavy rain, some parts of the planks became damp and started to rot. Farmer John wants to replace some of the rotten parts by cutting out contiguous segments of the planks and replacing them with new planks. To minimize expenses, each replaced segment must consist of at least k contiguous planks. The cost of replacing a segment of planks is the difference in height between the tallest and shortest plank in that segment. Farmer John wants to find the total minimum cost required to fix the fence. You are given q queries. Each query provides a starting index l and an ending index r (1 ≤ l ≤ r ≤ n) of the segments of the fence that have rotted. Calculate the minimum total cost to repair these segments. The first line contains three integers n, k, and q (1 ≤ n ≤ 2·105, 1 ≤ k ≤ n, 1 ≤ q ≤ 2·105) — the number of planks, the minimum number of contiguous planks to replace in each segment, and the number of queries. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 105) — the heights of the planks. The next q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) representing the range of the rotted segments for each query. For each query, output the minimum total cost required to repair the specified segment. Example: Input 8 3 2 1 3 4 5 2 6 2 8 2 5 4 8 Output 2 4","solution":"def minimum_cost_to_fix_fence(n, k, q, heights, queries): For each query, calculates the minimum cost to fix the specified segment. :param n: int - number of planks :param k: int - minimum number of contiguous planks to replace in each segment :param q: int - number of queries :param heights: List[int] - heights of the planks :param queries: List[Tuple[int, int]] - list of queries containing the range of the rotted segments :return: List[int] - list of minimum costs for each query results = [] for l, r in queries: min_cost = float(\'inf\') for i in range(l - 1, r - k + 1): segment = heights[i:i + k] min_cost = min(min_cost, max(segment) - min(segment)) results.append(min_cost) return results"},{"question":"John is organizing a treasure hunt game for his friends. There are \'n\' clues hidden in different locations. John\'s friend starts at location 1 and needs to follow the clues to reach the treasure at location \'n\'. Each clue directs the seeker to the next location, forming a sequence. The clues are represented as an integer array where the value at each index \'i\' gives the next location. However, the clues might not always lead directly to the next location; some clues might create diversion loops or dead ends, requiring careful pathway planning. Your task is to determine the minimum number of steps required to reach the treasure from the starting location. If it is not possible to reach the treasure, return -1. Note: - The array is 1-indexed. - You start at location 1 and need to reach location \'n\'. - The array may contain cycles or lead to dead ends. Input format: - The first line contains an integer \'t\' (1 ≤ t ≤ 100) — the number of test cases. - The first line of each test case contains an integer \'n\' (2 ≤ n ≤ 100,000) — the number of locations. - The next line contains \'n\' integers — the array where the i-th element contains the location number to move to from i (0 if it is a dead end). Output format: - For each test case, print the minimum number of steps required to reach location \'n\' from location 1, or -1 if it\'s impossible to reach. Example: Input: 2 5 2 3 4 5 0 4 2 3 0 2 Output: 4 -1 Explanation: In the first test case, the sequence of locations is 1 -> 2 -> 3 -> 4 -> 5, which takes 4 steps. In the second test case, the sequence is 1 -> 2 -> 3 -> 0, leading to a dead end where reaching location \'n\' is impossible, resulting in -1.","solution":"def min_steps_to_treasure(n, clues): from collections import deque # Early exit if the starting point is the same as the ending point if n == 1: return 0 # BFS initialization queue = deque([(1, 0)]) # Each element is a tuple (current_location, step_count) visited = set() while queue: current_location, steps = queue.popleft() if current_location in visited: continue visited.add(current_location) next_location = clues[current_location - 1] # Check if we have reached the treasure if next_location == n: return steps + 1 # Ensure we\'re not visiting dead ends or loops unnecessarily if next_location != 0 and next_location not in visited: queue.append((next_location, steps + 1)) # If we exit the loop without finding \'n\', it means it\'s unreachable return -1 def treasure_hunt(t, test_cases): results = [] for case in test_cases: n, clues = case results.append(min_steps_to_treasure(n, clues)) return results"},{"question":"In the kingdom of Dalmatia, there is a long road consisting of n intersections connected by m bidirectional roads. Each road has a certain length. The king wants to find the shortest path from the first intersection to the last intersection. Given the number of intersections n and the number of roads m, and the details of each road (including the two intersections it connects and its length), determine the shortest distance from the first to the last intersection. The first line of input contains two integers n (2 ≤ n ≤ 100) and m (1 ≤ m ≤ 1,000). Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1,000), where u and v are the intersections connected by a road of length w. Print a single integer — the length of the shortest path from intersection 1 to intersection n. If there is no path, print -1.","solution":"import heapq def shortest_path(n, m, roads): Finds the shortest path from intersection 1 to intersection n. Parameters: n (int): Number of intersections m (int): Number of roads roads (list of tuples): List of roads details in the form (u, v, w) Returns: int: Length of the shortest path from intersection 1 to intersection n, or -1 if no such path exists graph = [[] for _ in range(n + 1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm pq = [(0, 1)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[1] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) shortest_distance = distances[n] return shortest_distance if shortest_distance != float(\'inf\') else -1"},{"question":"Chris is building a pipeline to convert a given list of integers into a string. Each integer in the list represents an ASCII value of a character. He wants to form a string based on these ASCII values. However, if the integer is not within the range of printable ASCII values (32 to 126 inclusive), it should be skipped. Write a function that takes a list of integers as input and returns the resulting string after converting the valid ASCII values. # Function Signature ```python def convert_ascii(int_list: List[int]) -> str: pass ``` # Input - A single list `int_list` (1 ≤ len(int_list) ≤ 1000), where each element is an integer representing an ASCII value (0 ≤ int_value ≤ 255). # Output - A string formed by converting valid ASCII integer values in the given list to their respective characters. # Example ```python convert_ascii([72, 101, 108, 108, 111, 33, 200]) # returns \\"Hello!\\" ``` # Explanation In the given example: - The integers 72, 101, 108, 108, 111, and 33 represent valid ASCII values \'H\', \'e\', \'l\', \'l\', \'o\', and \'!\', respectively. - The integer 200 is not within the printable ASCII range (32 to 126), so it is skipped. Hence, the resultant string is \\"Hello!\\".","solution":"def convert_ascii(int_list): Takes a list of integers and converts valid ASCII values to a string. Characters in the ASCII range of 32 to 126 inclusive are considered valid. valid_chars = [chr(num) for num in int_list if 32 <= num <= 126] return \'\'.join(valid_chars)"},{"question":"Welcome to the \\"Maze Navigator\\" challenge. In this challenge, you have to guide a robot through a maze to collect the maximum number of artifacts. The maze is represented as a grid with n rows and m columns. In the maze: - \'S\' denotes the robot\'s starting position. - \'#\' represents a wall that the robot cannot pass through. - \'.\' represents an empty cell the robot can move into. - \'A\' represents an artifact that the robot can collect. The robot can move up, down, left, or right, but cannot move diagonally. The robot collects an artifact by moving onto its cell. Your task is to programmatically calculate the maximum number of artifacts the robot can collect starting from its initial position \'S\'. It is guaranteed that there is only one starting position in the maze. # Input The input consists of multiple test cases. The first line contains an integer t (1 le t le 1000), the number of test cases. For each test case: - The first line contains two integers n and m (1 le n, m le 50), the dimensions of the maze. - The next n lines each contain m characters representing the maze. # Output For each test case, output a single integer: the maximum number of artifacts the robot can collect. # Example Input ``` 2 3 4 S..# .#A. ..A. 3 3 S#A .#. A#A ``` Output ``` 2 1 ``` # Explanation In the first test case, the robot can collect up to 2 artifacts by moving from \'S\' down to the artifact in the bottom right. In the second test case, the robot can collect only 1 artifact since the path to any further artifact is blocked by walls. Make sure your solution is efficient and can handle the given constraints.","solution":"from collections import deque def max_artifacts_collected(t, test_cases): results = [] for case in test_cases: n, m, grid = case # Find the starting position \'S\' start = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) break if start: break # Directions for moving in the grid (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS queue = deque([start]) visited = set([start]) artifact_count = 0 while queue: x, y = queue.popleft() # if it\'s an artifact, collect it if grid[x][y] == \'A\': artifact_count += 1 # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) results.append(artifact_count) return results"},{"question":"Mike is working on a text processing program. He needs to find all unique substrings of a given string and determine their total count. A substring is defined as any contiguous sequence of characters within the string. For example, the substrings of \\"abc\\" are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Your task is to write a program that counts the number of unique substrings in a given string. The first line of the input contains a single integer n (1 ≤ n ≤ 5000), which is the length of the string. The second line contains a string s of length n, consisting of lowercase English letters. Output a single integer — the total number of unique substrings of the given string. **Example** Input: ``` 3 abc ``` Output: ``` 6 ``` Explanation: The unique substrings of \\"abc\\" are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Therefore, the total count is 6.","solution":"def count_unique_substrings(n, s): Returns the count of unique substrings of the given string s. Parameters: n (int): Length of the string s. s (str): The input string containing lowercase English letters. Returns: int: The count of unique substrings. substrings = set() for i in range(n): for j in range(i+1, n+1): substrings.add(s[i:j]) return len(substrings)"},{"question":"You are given two integers n and m, representing the dimensions of a grid. On this grid, you need to place m rooks such that each rook attacks exactly one other rook. A rook attacks another rook if they are on the same row or same column. The constraint here is that no two rooks can attack each other from the same direction. Your task is to determine a possible arrangement of the m rooks on the n x n grid. If it is possible, print \\"YES\\" followed by the positions of the m rooks in the format (row, column). If it is not possible, print \\"NO\\". Input: The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ n). Output: If it\'s possible to arrange the m rooks such that each rook attacks exactly one other rook without sharing the same direction of attack for multiple pairs of rooks, print \\"YES\\" followed by the positions. Otherwise, print \\"NO\\". Example: Input: 4 2 Output: YES 1 2 2 1","solution":"def arrange_rooks(n, m): Arrange m rooks on an n x n grid such that each rook attacks exactly one other rook, and no two rooks attack each other from the same direction. Parameters: n (int): size of the grid m (int): number of rooks Returns: (str, list of tuples): \\"YES\\" followed by positions of rooks if arrangement is possible, otherwise \\"NO\\" if m > n: return \\"NO\\", [] positions = [] for i in range(1, m + 1): positions.append((i, i % n + 1)) return \\"YES\\", positions"},{"question":"A cyclist wants to train for an upcoming race by riding a certain distance. The cyclist has access to a map with several checkpoints along the route. Each checkpoint is located at a specific distance from the starting point, and the cyclist wants to design a training plan to maximize their ride while ensuring they stop at some checkpoints for rest. The challenge is to determine the maximum distance the cyclist can ride given the constraints of their stamina. The cyclist can ride to any checkpoint, but the distance between consecutive checkpoints they ride to should not exceed a given stamina limit. Formally, you are given an integer `n` representing the number of checkpoints and an integer `s` representing the maximum distance the cyclist can ride without resting. You are also given an array `d` of size `n` that contains the distances of the checkpoints from the starting point. Your task is to output the maximum distance the cyclist can ride considering the constraints of their stamina. The first line contains two integers `n` and `s` (`1 ≤ n ≤ 2 * 10^5`, `1 ≤ s ≤ 10^9`) — the number of checkpoints and the maximum distance the cyclist can ride without resting. The second line contains `n` integers `d_1, d_2, ..., d_n` (`1 ≤ d_i ≤ 10^9`) — the distances of the checkpoints from the starting point, sorted in increasing order. Print one integer — the maximum distance the cyclist can ride. **Examples:** **Input:** ``` 5 3 1 2 3 6 7 ``` **Output:** ``` 7 ``` **Input:** ``` 4 10 2 5 9 15 ``` **Output:** ``` 15 ``` **Explanation:** In the first example, the cyclist can ride to checkpoints at distances `1, 2, 3, 6, 7`. By following the sequence `1 → 3 → 6 → 7`, the cyclist doesn\'t exceed the stamina limit `s = 3`, thereby covering the maximum distance of `7`. In the second example, the cyclist can visit all the checkpoints sequentially without exceeding the stamina limit `s = 10`, covering the maximum distance of `15`.","solution":"def max_distance(n, s, d): Determines the maximum distance the cyclist can ride considering the constraints of their stamina. :param n: Number of checkpoints :param s: Maximum distance the cyclist can ride without resting :param d: List of distances of the checkpoints from the starting point :return: Maximum distance the cyclist can ride max_dist = d[0] for i in range(1, n): if d[i] - max_dist <= s: max_dist = d[i] else: break return max_dist"},{"question":"Dima is a computer science student, and he loves solving problems involving strings. Recently, he came across a unique problem and needs your help to solve it. The task is to find the length of the longest substring of a given string that contains at most two distinct characters. Given a string s, find the length of the longest substring that contains at most 2 distinct characters. The input consists of a single string s (1 ≤ |s| ≤ 100,000), where |s| is the length of the string and s contains only lowercase English letters. Output the length of the longest substring that contains at most two distinct characters. # Example Input: abbacccba Output: 4 Explanation: The longest substring that contains at most two distinct characters is \\"abba\\" which has length 4. Input: eceba Output: 3 Explanation: The longest substring that contains at most two distinct characters is \\"ece\\" which has length 3.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most two distinct characters. n = len(s) if n < 3: return n left, right = 0, 0 hashmap = {} max_len = 2 while right < n: if len(hashmap) < 3: hashmap[s[right]] = right right += 1 if len(hashmap) == 3: del_index = min(hashmap.values()) del hashmap[s[del_index]] left = del_index + 1 max_len = max(max_len, right - left) return max_len"},{"question":"You are given a string consisting of lowercase English letters. In one move, you can choose any consecutive substring of length 2 from the string and remove it if both characters in the substring are the same. The operations can be performed any number of times in any order. Your task is to determine whether it is possible to make the string empty by applying the above operations. The first line contains a single integer t (1 le t le 10^4), the number of test cases. Each test case consists of a single line containing the string ( s ) (1 le |s| le 10^5, where ( |s| ) is the length of ( s )). Print \\"YES\\" if it is possible to make the string empty, otherwise print \\"NO\\". Example Input 3 aabcc aabb abc Output YES YES NO Explanation: For the first test case, we can perform the following steps to make the string empty: 1. Remove \\"aa\\" -> \\"bcc\\" 2. Remove \\"cc\\" -> \\"b\\" 3. Cannot remove any more characters. For the second test case: 1. Remove \\"aa\\" -> \\"bb\\" 2. Remove \\"bb\\" -> \\"\\" For the third test case, it is not possible to make the string empty.","solution":"def can_become_empty(s): stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \\"YES\\" if not stack else \\"NO\\" def process_test_cases(t, test_cases): results = [] for i in range(t): results.append(can_become_empty(test_cases[i])) return results"},{"question":"Tom is working on a stock trading simulation program. He is given an array of integers where each element represents the price of a particular stock on a given day. Tom can make at most two transactions to maximize his profit, where each transaction consists of buying and then selling the stock. Help Tom determine the maximum profit he can achieve. A transaction is defined as a pair of indices (i, j) where 0 ≤ i < j < n and you buy the stock on the i-th day and sell it on the j-th day. Tom can make at most two such transactions, but the second transaction must start after the first one is completed (the selling day of the first transaction must be before the buying day of the second transaction). Input: - The first line contains an integer n (2 ≤ n ≤ 10^5) – the number of days. - The second line contains n integers separated by spaces, where the i-th integer represents the price of the stock on the i-th day. The prices are between 1 and 10^5. Output: - Print a single integer – the maximum profit Tom can achieve with at most two transactions. If no profit is possible, print 0. Examples: Input: 6 3 3 5 0 0 3 1 4 Output: 6 Input: 5 1 2 3 4 5 Output: 4 Input: 6 7 6 4 3 1 Output: 0","solution":"def maxProfit(prices): Returns the maximum profit Tom can achieve with at most two transactions. if not prices or len(prices) < 2: return 0 n = len(prices) # Initialize the arrays to store the maximum profit for one transaction up to day i left_profits = [0] * n right_profits = [0] * n # Calculate the maximum profit for one transaction from the left side min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) left_profits[i] = max(left_profits[i-1], prices[i] - min_price) # Calculate the maximum profit for one transaction from the right side max_price = prices[-1] for i in range(n-2, -1, -1): max_price = max(max_price, prices[i]) right_profits[i] = max(right_profits[i+1], max_price - prices[i]) # Calculate the maximum profit with at most two transactions max_profit = 0 for i in range(n): max_profit = max(max_profit, left_profits[i] + right_profits[i]) return max_profit"},{"question":"Andrei loves playing with graphs. He has an undirected weighted graph with n vertices and m edges. Each edge has a positive integer weight. He wants to find the length of the shortest path between two given nodes a and b. Each line contains four integers: n (2 ≤ n ≤ 1000) — the number of vertices, m (1 ≤ m ≤ 10000) — the number of edges, a and b (1 ≤ a, b ≤ n) — the two vertices between which he wants to find the shortest path. Each of the next m lines contains three integers: u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), meaning there is an edge between nodes u and v with weight w. Print a single integer — the length of the shortest path between nodes a and b. If there is no path, print -1. In the first example, a possible configuration of the graph and the shortest path could be: If the given graph has 5 vertices, 6 edges and we want to find the shortest path between vertices 1 and 5, with edges: 1 2 2 2 3 3 3 4 1 4 5 2 2 5 6 1 5 10 The output should be 8, as the path 1 -> 2 -> 3 -> 4 -> 5 is the shortest.","solution":"import heapq def dijkstra(n, edges, a, b): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) pq = [(0, a)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[a] = 0 while pq: current_distance, current_vertex = heapq.heappop(pq) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances[b] if distances[b] != float(\'inf\') else -1 def find_shortest_path(n, m, a, b, edges): return dijkstra(n, edges, a, b)"},{"question":"You are given strings s1 and s2 of lengths n and m, respectively. You need to determine if s2 is a substring of s1 after performing at most one swap on characters within s2. A swap operation involves swapping two characters at distinct positions in s2. The first line contains two integers n and m (1 ≤ m ≤ n ≤ 1000) — the lengths of strings s1 and s2. The next line contains the string s1 consisting of n lowercase English letters. The following line contains the string s2 consisting of m lowercase English letters. Output \\"YES\\" if s2 can be a substring of s1 after at most one swap operation on s2, otherwise output \\"NO\\". Examples: Input: 10 3 abcdefghij bac Output: YES Input: 7 4 abcdefg gfhd Output: NO","solution":"def is_substring_after_one_swap(s1, s2): Checks if s2 can be a substring of s1 after at most one swap in s2. Parameters: s1 (str): The main string. s2 (str): The string to check as a substring. Returns: str: \\"YES\\" if s2 can be a substring of s1 after at most one swap, otherwise \\"NO\\". n = len(s1) m = len(s2) # Helper function to check if s2 is in s1 def check_substring(s1, s2): return s2 in s1 # Check if s2 is already a substring of s1 if check_substring(s1, s2): return \\"YES\\" # Attempt one swap for each pair of characters in s2 for i in range(m): for j in range(i + 1, m): # Swap characters at positions i and j in s2 swapped_s2 = list(s2) swapped_s2[i], swapped_s2[j] = swapped_s2[j], swapped_s2[i] swapped_s2 = \'\'.join(swapped_s2) # Check if the swapped s2 is a substring of s1 if check_substring(s1, swapped_s2): return \\"YES\\" return \\"NO\\""},{"question":"You are given an array `a` of size `n` and you need to perform `q` operations described by queries. Each query is one of the two types: 1. For a given index `i`, increment the value at `a[i]` by 1. 2. For a given range `[l, r]`, compute the sum of elements `a[l]` to `a[r]` (inclusive). Additionally, there\'s a set of `m` special indices, and after performing all queries, you have to output the value at each of these special indices. # Input - The first line contains three integers `n`, `q`, and `m` (`1 ≤ n, q ≤ 2 · 10^5`, `1 ≤ m ≤ 100`). - The second line contains `n` integers `a1, a2, ..., an` (`1 ≤ ai ≤ 10^9`). - The next `q` lines describe the queries. Each query is: - `1 i`: which increments `a[i]` by 1 (`1 ≤ i ≤ n`). - `2 l r`: which asks for the sum of the segment `a[l]` to `a[r]` (`1 ≤ l ≤ r ≤ n`). - The last line contains `m` integers `b1, b2, ..., bm` (`1 ≤ bi ≤ n`) — the special indices. # Output Print `m` integers, where the `i-th` number is the value at index `bi` after all queries are done. # Example **Input:** ``` 5 5 3 1 2 3 4 5 1 2 2 1 3 1 5 1 1 2 1 5 2 3 5 1 3 3 5 3 ``` **Output:** ``` 2 3 5 ```","solution":"def process_queries(n, q, m, a, queries, special_indices): Process the given types of queries on the array `a` and return the values at special indices after all queries. Args: n : int : size of the array `a` q : int : number of queries m : int : number of special indices a : list : list of integers representing the array queries : list : list of tuples where each tuple is a query special_indices : list : list of integers representing the special indices (1-based index) Returns: list : list of integers representing the values at special indices after all queries for query in queries: if query[0] == 1: # Increment operation i = query[1] - 1 a[i] += 1 elif query[0] == 2: # Sum operation; to be ignored as it doesn\'t affect array modification results pass # Collect results from special indices result = [a[i-1] for i in special_indices] return result"},{"question":"A truck company wants to maximize the load transported on a single trip. The truck has a maximum load capacity `W`. The company has `n` items it needs to transport, each with a weight `w_i`. Your task is to determine the maximum number of items that can be loaded onto the truck without exceeding the load capacity. Each test contains multiple test cases. The first line contains the number of test cases `t` (1 ≤ t ≤ 10^5). Description of the test cases follows. Each test case consists of two lines. The first line contains two integers `n` and `W` (1 ≤ n ≤ 100, 1 ≤ W ≤ 10^4) — the number of items and the maximum load capacity of the truck, respectively. The second line contains `n` integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 100) — the weights of the items. For each test case, print a single integer — the maximum number of items that can be loaded onto the truck without exceeding the load capacity. Example: Input: 3 5 10 3 8 2 7 1 4 5 1 2 3 4 6 15 5 4 7 8 1 3 Output: 3 2 4 Explanation: In the first test case, the items with weights 3, 2, and 1 can be loaded onto the truck without exceeding the capacity (3+2+1=6). In the second test case, the items with weights 1 and 2 can be loaded (1+2=3). In the third test case, the items with weights 5, 4, 1 and 3 can be loaded (5+4+1+3=13).","solution":"def max_items_load(t, test_cases): results = [] for i in range(t): n, W = test_cases[i * 2] weights = test_cases[i * 2 + 1] weights.sort() total_weight = 0 item_count = 0 for weight in weights: if total_weight + weight <= W: total_weight += weight item_count += 1 else: break results.append(item_count) return results"},{"question":"A company wants to track the effectiveness of its marketing campaigns. Each campaign targets a subset of customers and every customer has a unique customer ID. The quality of a campaign can be measured by the total purchase amount made by all customers targeted by that campaign. Given a list of n campaigns and a list of m customers where each customer has a unique ID and a purchase amount, you need to find out which campaign has the highest total purchase amount. The input consists of: 1. An integer n (1 leq n leq 100) — the number of campaigns. 2. n lines, each containing a set of customer IDs targeted by the campaign. The number of customers in each campaign\'s set is at least 1 and at most 100. 3. An integer m (1 leq m leq 1000) — the number of customers. 4. m lines, each containing a customer ID and a purchase amount of that customer. The purchase amount is a positive integer and does not exceed 1000. Output the ID of the campaign that has the highest total purchase amount. If there are multiple campaigns with the same highest total purchase amount, output the one with the smallest index (1-based). # Example Input 3 1 2 3 2 3 4 1 4 4 1 100 2 50 3 200 4 300 Output 2 # Explanation - Campaign 1 targets customers 1, 2, 3. Total purchase amount = 100 + 50 + 200 = 350. - Campaign 2 targets customers 2, 3, 4. Total purchase amount = 50 + 200 + 300 = 550. - Campaign 3 targets customers 1, 4. Total purchase amount = 100 + 300 = 400. Thus, campaign 2 has the highest total purchase amount.","solution":"def max_purchase_campaign(n, campaigns, m, customers): # Create a dictionary to store purchase amount for each customer ID customer_purchases = {cid: amt for cid, amt in customers} # Initialize variables to track the maximum purchase amount and corresponding campaign index max_purchase = 0 best_campaign_index = 1 # Iterate over each campaign to calculate the total purchase amount for i, campaign in enumerate(campaigns): total_purchase = sum(customer_purchases[cid] for cid in campaign) # Update the max purchase and campaign index if the current total purchase is higher if total_purchase > max_purchase: max_purchase = total_purchase best_campaign_index = i + 1 # Campaign indices are 1-based return best_campaign_index # Example usage: n = 3 campaigns = [ {1, 2, 3}, {2, 3, 4}, {1, 4} ] m = 4 customers = [ (1, 100), (2, 50), (3, 200), (4, 300) ] print(max_purchase_campaign(n, campaigns, m, customers)) # Output: 2"},{"question":"You are given a connected, undirected graph with `n` vertices and `m` edges. Each edge has an integer weight associated with it. Your task is to remove some of the edges to form a Minimum Spanning Tree (MST) of the graph. However, there is a special requirement: the weight of an edge you remove can change depending on the cost value provided for each edge. The cost of an edge `e` with initial weight `w` can either remain `w` or be increased by a fixed value `c`. You need to calculate the minimum possible total weight of the MST under the condition that you can choose for every edge to keep its initial weight or increase it by `c`. # Input The first line contains three integers `n`, `m`, and `c` (1 ≤ n, m ≤ 200,000, 1 ≤ c ≤ 1,000,000) — the number of vertices, the number of edges, and the constant increase in the weight of each edge respectively. Each of the following `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) representing an edge connecting vertex `u` to vertex `v` with initial weight `w`. # Output Print a single integer, the minimum possible total weight of the MST. # Example Input ``` 4 5 2 1 2 5 1 3 10 1 4 3 2 3 6 3 4 7 ``` Output ``` 16 ``` # Explanation In the given example, you can either keep the original weights or increase them by `c` (which is 2 in this case) and then choose edges to form an MST with the minimal total weight. The MST formed from edges with weights 5, 3, and 6 results in a total weight of 14 if increased weights are not used. If increasing weights improve the MST, those should be taken into account.","solution":"def find(parent, i): if parent[i] == i: return i parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def minimum_spanning_tree(n, edges, c): # Sorting edges by the minimum possible weight including condition of adding c sorted_edges = sorted(edges, key=lambda x: min(x[2], x[2]+c)) parent = list(range(n)) rank = [0] * n mst_weight = 0 num_edges = 0 for u, v, weight in sorted_edges: root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: mst_weight += min(weight, weight + c) union(parent, rank, root_u, root_v) num_edges += 1 if num_edges == n - 1: break return mst_weight"},{"question":"Anna is trying to tune a string instrument. The instrument has n strings, each with a certain pitch, represented by an integer. Anna has t tuning tools, each of which changes the pitch of a string by a fixed value. Anna wants to make the pitch of the strings sound harmonious by having them all equal. Help Anna find out if it is possible to make all strings have the same pitch using the given tuning tools. The first line of input contains two integers n (2 ≤ n ≤ 100) and t (1 ≤ t ≤ 5) — the number of strings and the number of tuning tools. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1000) — the initial pitches of the strings. The third line contains t integers d1, d2, ..., dt (1 ≤ di ≤ 1000) — the fixed changes in pitch each tuning tool can apply. Output \\"YES\\" if it\'s possible to tune all strings to the same pitch using the given tools, otherwise print \\"NO\\". Example input: ``` 4 3 10 15 20 25 5 5 10 ``` Example output: ``` YES ``` Explanation: Anna can use the tuning tools with changes 5 and 10 to make all the string pitches equal to 25: - Increase the pitch of 10 by 15 using 5+5+5. - Increase the pitch of 15 by 10 using 5+5. - The pitch of string already 20 needs one increase by 5 to achieve 25. Thus, all strings can have a pitch of 25.","solution":"def can_tune_to_harmony(n, t, pitches, tuning_tools): def can_tune(p1, p2, tuning_tools): diff = abs(p1 - p2) for tool in tuning_tools: if diff % tool == 0: return True return False pitch_set = set(pitches) for pitch in pitch_set: if all(can_tune(pitch, p, tuning_tools) for p in pitches): return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of pairs representing friendships in a social network of n people, each having a unique ID from 1 to n. Each pair (u, v) indicates that user u and user v are friends. A person is considered \\"popular\\" if they have more friends than everyone else in the network. If there is a tie for the highest number of friends, then there is no popular person. Write a function to determine if there is a popular person in the network and return their ID. If there is no popular person, return -1. The first line of the input contains two integers n and m (2 le n le 1000, 0 le m le n(n-1)/2) — the number of people and the number of friendships, respectively. The next m lines each contain two integers u and v (1 le u, v le n, u neq v) — indicating that user u and user v are friends. Your function should return a single integer — the ID of the most popular person or -1 if no single person is the most popular. Example: Input: ``` 5 4 1 2 2 3 2 4 2 5 ``` Output: ``` 2 ``` Explanation: Person 2 has three friends (1, 3, 4, and 5), which is more than anyone else. Therefore, person 2 is the most popular.","solution":"def find_popular_person(n, m, friendships): from collections import defaultdict # Initialize a dictionary to keep the friend count for each person friend_count = defaultdict(int) # Traverse each friendship for u, v in friendships: friend_count[u] += 1 friend_count[v] += 1 # Find the maximum number of friends any person has max_friends = max(friend_count.values(), default=0) # Find all persons who have the maximum number of friends potential_popular_people = [person for person, count in friend_count.items() if count == max_friends] # If exactly one person has the most friends, they are the popular person if len(potential_popular_people) == 1: return potential_popular_people[0] # If no people or multiple people have the same max number of friends, there\'s no popular person return -1"},{"question":"Vera loves strings and finds string manipulation problems fascinating. She recently came across a problem and needs your help solving it. You are given a string s consisting of lowercase English letters and an integer k. Your task is to determine the number of distinct substrings of length k that appear in the string. The first line of input contains a single integer k (1 ≤ k ≤ 1000). The second line contains the string s (1 ≤ |s| ≤ 200,000) consisting of lowercase letters. Output a single integer — the number of distinct substrings of length k in the given string. **Input:** 2 abcabc **Output:** 3 **Explanation:** The distinct substrings of length 2 are \\"ab\\", \\"bc\\", and \\"ca\\". Although \\"ab\\" and \\"bc\\" appear multiple times, they are counted only once in the distinct count. Thus the answer is 3.","solution":"def distinct_substrings(s, k): Function to determine the number of distinct substrings of length k in the given string s. if k > len(s): return 0 substrings = set() for i in range(len(s) - k + 1): substr = s[i:i+k] substrings.add(substr) return len(substrings)"},{"question":"In a factory, workers are given tasks represented as intervals on a timeline. Each task is defined by its start time and end time. However, conflicts arise when tasks overlap, making it impossible for a single worker to handle multiple overlapping tasks. To manage this, the factory needs to find the minimum number of workers required to complete all tasks without any overlap. A task [s, e] overlaps with another task [s\', e\'] if there is any time point t such that s <= t < e and s\' <= t < e\'. You are given the number of tasks n (1 ≤ n ≤ 100,000), followed by n pairs of integers [si, ei] (0 ≤ si < ei ≤ 1,000,000) representing the start and end times of each task. Your task is to find and print the minimum number of workers required to handle all tasks without any overlap. Input: - The first line contains an integer n, the number of tasks. - Each of the next n lines contains two integers si and ei representing the start time and end time of the ith task. Output: - Print a single integer, the minimum number of workers required. Example: Input: 4 1 4 2 6 6 8 7 9 Output: 2 In this example, we observe that: - Task 1 overlaps with Task 2. - Task 2 overlaps with Task 4. - Task 3 overlaps with Task 4. Thus, at least two workers are needed to handle the tasks without any overlaps.","solution":"def min_workers_required(n, tasks): Finds the minimum number of workers required to handle all tasks without any overlap. events = [] for s, e in tasks: events.append((s, 1)) # Task starts events.append((e, -1)) # Task ends events.sort() max_workers = 0 current_workers = 0 for _, event in events: current_workers += event if current_workers > max_workers: max_workers = current_workers return max_workers"},{"question":"You are participating in a new type of coding competition where each problem is represented by a unique string of lowercase English letters. Let\'s call these strings \\"problem codes.\\" The contest consists of n rounds, and in each round, one problem code is given. Your task is to count the number of unique problem codes that appear in the entire contest. The first line of the input contains a single integer n (1 le n le 200,000) — the number of rounds in the contest. The next n lines each contain a string of lowercase English letters, where each string represents a problem code for that round. The length of each string is between 1 and 10 characters. Print a single integer — the number of unique problem codes that appear in the contest. # Example Input ``` 5 codeforces leetcode topforces codeforces google ``` # Example Output ``` 4 ``` # Explanation In the example, the problem codes given in the 5 rounds are \\"codeforces\\", \\"leetcode\\", \\"topforces\\", \\"codeforces\\", and \\"google.\\" There are 4 unique problem codes: \\"codeforces,\\" \\"leetcode,\\" \\"topforces,\\" and \\"google.\\" Therefore, the output is 4.","solution":"def count_unique_problem_codes(n, problem_codes): Returns the number of unique problem codes. :param n: int: The number of rounds in the contest. :param problem_codes: list: A list of strings representing problem codes. :return: int: The number of unique problem codes. unique_codes = set(problem_codes) return len(unique_codes)"},{"question":"Alice and Bob are playing a game with strings. They have a string `s` of length `n`, consisting of lowercase English letters. They can perform the following operation any number of times (including zero times): 1. Select a non-empty substring of `s` and delete it. A substring is a contiguous sequence of characters within the string. Alice wants to achieve her goal of making the string empty with the maximum number of operations, while Bob wants to achieve the same but with the minimum number of operations. Your task is to determine the minimum and the maximum number of operations required to make the string empty. The first line contains a single positive integer `n` (1 ≤ n ≤ 10^5) — the length of the string `s`. The second line contains a string `s` of length `n`, consisting of lowercase English letters. Output two integers — the minimum and the maximum number of operations required to make the string empty. # Input: ``` 6 abccba ``` # Output: ``` 1 6 ``` # Explanation: - For the maximum number of operations: Alice can delete each character one by one, resulting in `6` operations. - For the minimum number of operations: Bob can delete the entire string at once, resulting in `1` operation. In another example, with `s = \\"aaaaaa\\"`: - Maximum number of operations: Alice deletes each character one by one, resulting in `6` operations. - Minimum number of operations: Bob can delete the continuous segment of `a\'s`, resulting in `1` operation.","solution":"def min_max_operations_to_empty_string(n, s): Determines the minimum and maximum number of operations required to make the string empty. Parameters: n (int): The length of the string. s (str): The input string of length n, consisting of lowercase English letters. Returns: tuple: A tuple containing the minimum and maximum number of operations. max_operations = n # Each character can be deleted one by one min_operations = 1 # The whole string can be deleted in one go return (min_operations, max_operations) # Example input print(min_max_operations_to_empty_string(6, \'abccba\')) # Output should be (1, 6)"},{"question":"You are given a tree consisting of n nodes rooted at node 1. Each node has a value associated with it. Your task is to find the number of unique values that can be collected by traversing from the root to any other node in the tree. The first line of input contains an integer n (1 ≤ n ≤ 100,000) — the number of nodes in the tree. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 10^9) — the values associated with each node. Each of the next n-1 lines contains two integers u and w (1 ≤ u, w ≤ n) — indicating an edge in the tree between node u and node w. Output a single integer — the number of unique values encountered in any root to node path. For example, if the input is: ``` 5 3 4 2 3 2 1 2 1 3 2 4 3 5 ``` The output should be: ``` 3 ```","solution":"def unique_tree_values(n, values, edges): from collections import defaultdict, deque def bfs(tree, values): unique_values = set() queue = deque([1]) visited = set() while queue: node = queue.popleft() if node not in visited: visited.add(node) unique_values.add(values[node-1]) for neighbor in tree[node]: if neighbor not in visited: queue.append(neighbor) return unique_values # Build adjacency list for the tree tree = defaultdict(list) for u, w in edges: tree[u].append(w) tree[w].append(u) # Find unique values using BFS unique_vals = bfs(tree, values) return len(unique_vals) # Example usage # n = 5 # values = [3, 4, 2, 3, 2] # edges = [(1, 2), (1, 3), (2, 4), (3, 5)] # print(unique_tree_values(n, values, edges)) # Output: 3"},{"question":"A researcher is analyzing data collected from an experiment involving bacteria growth over time. They have a dataset representing the number of bacteria in a colony at different time points. Due to limitations in the experiment, some data points were not recorded, resulting in some missing values in the dataset. The researcher wants to estimate the missing values using linear interpolation. Write a program that reads the dataset and fills in the missing values using linear interpolation. If there are consecutive missing values, use the linear interpolation based on the available nearest recorded values. The input consists of: - An integer `n` (2 ≤ n ≤ 1000) indicating the number of time points. - A list of `n` space-separated integers representing the number of bacteria at each time point. If the data for a time point is missing, it is represented by -1. Output the list of `n` integers with the missing values filled in using linear interpolation. # Example: Input 1: ``` 5 2 -1 6 -1 10 ``` Output 1: ``` 2 4 6 8 10 ``` Input 2: ``` 6 1 -1 -1 16 19 -1 ``` Output 2: ``` 1 6 11 16 19 19 ``` # Note: In the first sample, the missing values are filled as follows: - The second time point (originally -1) is interpolated between 2 and 6: `(2 + 6) / 2 = 4` - The fourth time point (originally -1) is interpolated between 6 and 10: `6 + ((10 - 6) / 2) = 8` In the second sample, the missing values are filled as follows: - The second and third time points are interpolated linearly between 1 and 16: - Second time point: `1 + (16 - 1) / 4 * 1 = 6` - Third time point: `1 + (16 - 1) / 4 * 2 = 11` - The sixth time point is simply copied from its previous value (since the next point is itself missing). Your task is to implement this interpolation logic to complete the missing data.","solution":"def interpolate_bacteria_growth(n, data): Fills in missing values in bacteria growth data using linear interpolation. Parameters: - n: int, number of data points. - data: list of int, the bacteria count at each time point, with -1 representing missing values. Returns: - list of int, the data with missing values filled in. import numpy as np # Convert data to numpy array for advanced indexing and manipulation data = np.array(data) # Iterate over the array to interpolate missing values (-1) i = 0 while i < n: if data[i] == -1: # Find the next known value start = i while i < n and data[i] == -1: i += 1 if i == n: # If no more known values, previous value should be used for all subsequent unknowns data[start:] = data[start-1] else: # Interpolate end = i value_start = data[start-1] value_end = data[end] for j in range(start, end): data[j] = value_start + (value_end - value_start) * (j - start + 1) / (end - start + 1) i += 1 return data.tolist()"},{"question":"You are given two strings a and b consisting of lower-case alphabetic characters. You need to determine the minimum number of operations required to make the strings equal. You can perform the following operation any number of times: - Choose a character from any of the strings and increment its frequency by 1 in that string. If it is impossible to make the strings equal using the allowed operation, print \\"-1\\". The first line contains two integers n and m (1 le n, m le 10^5) — the lengths of strings a and b respectively. The second line contains the string a. The third line contains the string b. Output the minimum number of operations required to make the strings equal, or -1 if it\'s impossible.","solution":"def min_operations_to_make_equal(n, m, a, b): Returns the minimum number of operations required to make the strings \'a\' and \'b\' equal by increasing character frequencies. if n != m: return -1 # Count frequency of each character in both strings freq_a = [0] * 26 freq_b = [0] * 26 for char in a: freq_a[ord(char) - ord(\'a\')] += 1 for char in b: freq_b[ord(char) - ord(\'a\')] += 1 # Check if we can make the strings equal operations = 0 for i in range(26): if freq_a[i] != freq_b[i]: return -1 operations += abs(freq_a[i] - freq_b[i]) return max(operations // 2, 0) # Each operation involves one increment in a string"},{"question":"Alice has recently become interested in palindrome sequences. A palindrome is a sequence that reads the same forwards as backwards. To build her collection, Alice wants to create the longest possible palindrome using the characters from a given string. She is allowed to rearrange the characters of the string if necessary. Write a function to find the length of this longest palindrome. Alice\'s input string will consist of lowercase English letters only. Provide the function definition as follows: ```python def longest_palindrome_length(s: str) -> int: # Write your code here ``` - The first line of the input contains a single string, `s` (1 leq text{length of } s leq 10^5). - The function should return one integer, the length of the longest palindrome that can be constructed using the characters of the input string. **Example:** Input: ``` abccccdd ``` Output: ``` 7 ``` Explanation: One possible palindrome that can be constructed is \\"dccaccd\\", which has a length of 7. Multiple palindromic answers may be possible, but the length will always be 7 for this input. **Example:** Input: ``` a ``` Output: ``` 1 ``` Explanation: The only palindrome possible is \\"a\\", which has a length of 1. **Example:** Input: ``` aaabbb ``` Output: ``` 5 ``` Explanation: One possible palindrome that can be constructed is \\"ababa\\", which has a length of 5. Multiple palindromic answers may be possible, but the length will always be 5 for this input.","solution":"def longest_palindrome_length(s: str) -> int: from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # This will store the length of the longest palindrome that can be created length_of_palindrome = 0 # This flag will check if there is any character with an odd frequency odd_found = False for count in char_count.values(): # If the count is even, it can fully contribute to the palindrome if count % 2 == 0: length_of_palindrome += count else: # If odd, add the largest even number just less than or equal to count length_of_palindrome += count - 1 odd_found = True # If there was an odd count, one character can still sit in the middle of the palindrome if odd_found: length_of_palindrome += 1 return length_of_palindrome"},{"question":"A small town has a unique festival where the residents hang colorful lanterns along the main road. They have n lanterns, each with a given height. The residents want to know the longest continuous sequence of lanterns, such that the heights of the lanterns in that sequence are in strictly increasing order. Given an array of n integers, where each integer represents the height of a lantern, your task is to determine the length of the longest continuous strictly increasing subsequence of lantern heights. # Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of lanterns. The second line contains n integers h1, h2,…, hn (1 ≤ hi ≤ 100000) — the heights of the lanterns. # Output Print a single integer — the length of the longest continuous strictly increasing subsequence of lantern heights. # Example Input ``` 5 3 2 4 1 5 ``` Output ``` 2 ``` # Note In the example above, the longest continuous strictly increasing subsequence is [2, 4]. Thus, the answer is 2.","solution":"def longest_increasing_subsequence(heights): Returns the longest length of a continuous strictly increasing subsequence of lantern heights. :param heights: List[int] - List of integers representing the heights of the lanterns :return: int - The length of the longest continuous strictly increasing subsequence if not heights: return 0 n = len(heights) max_length = 1 current_length = 1 for i in range(1, n): if heights[i] > heights[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Given a sequence of n integers a = [a_1, a_2, ldots, a_n], your task is to determine if it is possible to choose two non-empty disjoint subarrays (not necessarily contiguous) such that the sum of the elements in each subarray is equal. A subarray is defined as any sequence obtained by deleting some or no elements from the original sequence without changing the order of the remaining elements. For example, given the sequence [1, 2, 3, 4, 5, 5], it is possible to choose two disjoint subarrays [5] and [5] with equal sums. Determine whether such a pair of subarrays exists for the given sequence. The first line of input contains a single integer n (1 le n le 2 cdot 10^5), representing the length of the sequence. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9), representing the elements of the sequence. Output \\"YES\\" if such subarrays exist, otherwise print \\"NO\\". # Example Input ``` 6 1 2 3 4 5 5 ``` Output ``` YES ``` Input ``` 4 1 -1 1 -1 ``` Output ``` YES ``` Input ``` 3 1 2 3 ``` Output ``` NO ```","solution":"def can_find_equal_sum_subarrays(n, a): Determines if there are two non-empty disjoint subarrays with equal sums. :param n: Integer representing the length of the sequence. :param a: List of integers representing the sequence. :return: \\"YES\\" if such subarrays exist, otherwise \\"NO\\". from collections import defaultdict # Dictionary to keep track of sums and their frequencies subarray_sums = defaultdict(int) sum_so_far = 0 # Check for any repeated sum as we iterate through the array for i in range(n): sum_so_far += a[i] if sum_so_far == 0 or subarray_sums[sum_so_far] > 0: return \\"YES\\" subarray_sums[sum_so_far] += 1 # Also check each individual element for being 0 or repeated element_counts = defaultdict(int) for num in a: if num == 0 or element_counts[num] > 0: return \\"YES\\" element_counts[num] += 1 return \\"NO\\""},{"question":"You have a list of intervals represented as pairs of integers [start, end] where 1 ≤ start < end ≤ 10^9. Each interval represents a range of numbers. Your task is to perform the union of these intervals and return the resulting intervals after merging all overlapping and adjacent intervals. For example, given intervals [[1,5], [4,6], [8,10], [9,12]], the merged intervals would be [[1,6], [8,12]] because [4,6] overlaps with [1,5] to form [1,6], and [9,12] overlaps with [8,10] to form [8,12]. The first line of the input contains a single integer n (1 ≤ n ≤ 10^5), the number of intervals. The next n lines each contain two integers start and end representing an interval. Print the resulting merged intervals. Output each interval on a new line as \\"start end\\". Example: Input: 4 1 5 4 6 8 10 9 12 Output: 1 6 8 12","solution":"def merge_intervals(intervals): # Sort intervals based on the start time intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # If the list of merged intervals is empty or if the current interval does not overlap with the previous one, # simply append it. if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # There is overlap, so we merge the current interval with the previous one. merged[-1][1] = max(merged[-1][1], interval[1]) return merged"},{"question":"Sally is a renowned researcher working on biological sequences. She has recently sequenced two DNA strands. DNA strands can be represented as strings consisting of characters \'A\', \'T\', \'C\', and \'G\'. Sally wants to find the longest common subsequence (LCS) of these two DNA strands. A subsequence is defined as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, \\"ACG\\" is a subsequence of \\"TCACGAGT\\" but \\"CAT\\" is not. Sally has provided you the two DNA strands, and she needs a program to find the length of their longest common subsequence. Write a program that takes two DNA strands as input and outputs the length of their LCS. **Input:** 1. The first line contains an integer n (1 ≤ n ≤ 1000) – the length of the first DNA strand. 2. The second line contains an integer m (1 ≤ m ≤ 1000) – the length of the second DNA strand. 3. The third line contains a string of length n consisting of characters \'A\', \'T\', \'C\', \'G\' – the first DNA strand. 4. The fourth line contains a string of length m consisting of characters \'A\', \'T\', \'C\', \'G\' – the second DNA strand. **Output:** Print one integer – the length of the longest common subsequence of the two DNA strands. **Example:** Input: ``` 7 6 ATCGATC TACGCT ``` Output: ``` 4 ``` Explanation: The longest common subsequence is \\"ACGT\\" which has a length of 4.","solution":"def longest_common_subsequence(n, m, strand1, strand2): Returns the length of the longest common subsequence of the two given DNA strands. :param n: Length of the first DNA strand :param m: Length of the second DNA strand :param strand1: First DNA strand :param strand2: Second DNA strand :return: Length of the longest common subsequence # Creating a 2D array to store the lengths of LCS dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if strand1[i - 1] == strand2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"A bakery has a set of recipes stored in its recipe book. Each recipe is defined by its unique name and a set of ingredients required to bake it. The bakery also maintains a stock of ingredients, and each type of ingredient is available in limited quantity. Your task is to help the bakery determine the maximum number of times they can bake a particular recipe given the current stock of ingredients. The first line of input contains a non-empty string r which represents the name of the recipe to be baked. The second line contains an integer n, representing the number of different ingredients required by the recipe. Each of the next n lines contains two elements separated by a space: the ingredient name and the quantity required for baking the recipe once. The next line contains an integer m, representing the number of different ingredients in the stock. Each of the next m lines contains two elements separated by a space: the ingredient name and the quantity available in stock. Print a single integer - the maximum number of times the bakery can bake the given recipe with the current stock of ingredients. In the first sample, the bakery can make the \\"cake\\" recipe at most 2 times because the stock has exactly twice the required quantity of each ingredient. In the second sample, the bakery can bake the \\"pie\\" recipe only once because while there is enough flour for 1 pie, there is not enough sugar for more than 1 pie. In the third sample, the bakery has no stock of ingredients required to bake the \\"cookies\\" recipe, so it cannot be baked at all.","solution":"def max_bakes(recipe, n, recipe_ingredients, m, stock_ingredients): Determines the maximum number of times a given recipe can be baked based on the current stock of ingredients. :param recipe: str, the name of the recipe :param n: int, number of different ingredients required by the recipe :param recipe_ingredients: list of tuples, each containing ingredient name and quantity required for one bake :param m: int, number of different ingredients in the stock :param stock_ingredients: list of tuples, each containing ingredient name and quantity available in stock :return: int, the maximum number of times the recipe can be baked # Dictionary for recipe ingredients recipe_dict = {ingredient: int(quantity) for ingredient, quantity in recipe_ingredients} # Dictionary for stock stock_dict = {ingredient: int(quantity) for ingredient, quantity in stock_ingredients} # Calculate the maximum number of times we can bake max_bakes = float(\'inf\') for ingredient, required_quantity in recipe_dict.items(): if ingredient in stock_dict: max_bakes = min(max_bakes, stock_dict[ingredient] // required_quantity) else: return 0 return max_bakes"},{"question":"Polycarp has started working on string manipulation tasks to sharpen his skills for upcoming competitions. He is particularly interested in operations on binary strings. A binary string is a string consisting of only the characters \'0\' and \'1\'. Polycarp is given a binary string `s` of length `n` and an integer `k`. He wants to find the maximum length of a contiguous subarray in which there are at most `k` zeroes after performing a certain operation. Polycarp\'s operation is to change at most `k` \'0\'s in the binary string to \'1\'s. You need to help Polycarp by writing a program that finds the length of the longest contiguous subarray with at most `k` zeroes. # Input The input consists of two lines: 1. The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `k` (0 ≤ k ≤ n), which represent the length of the binary string and the maximum number of \'0\'s that can be changed to \'1\'s respectively. 2. The second line contains a binary string `s` of length `n`. # Output Output a single integer, which is the maximum length of the contiguous subarray with at most `k` zeroes. # Example Input ``` 10 2 1101001101 ``` Output ``` 5 ``` In this example, Polycarp can change the two \'0\'s at positions 4 and 5 to \'1\'s, resulting in the string `1111101101`, which has a contiguous subarray `11111` of length 5.","solution":"def longest_subarray_with_k_zeros(n, k, s): left = 0 num_zeroes = 0 max_length = 0 for right in range(n): if s[right] == \'0\': num_zeroes += 1 while num_zeroes > k: if s[left] == \'0\': num_zeroes -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Jordan is a coding enthusiast and loves solving mathematical puzzles. One day, he encountered a unique and challenging problem. There is a number n, and Jordan needs to express it as a sum of distinct non-negative integer powers of 2. Each power of 2 can only appear once in the sum. For example, for n = 18, Jordan can express it as 16 + 2, where 16 is 2^4 and 2 is 2^1. Given the number n, help Jordan by checking if it is possible to express n as a sum of distinct non-negative integer powers of 2, and if possible, print any such combination of powers. If it is not possible, output -1. The single line contains a single integer n (1 ≤ n ≤ 10^18). Input ----- The input contains a single integer n. Output ------ If it is possible to express n as a sum of distinct powers of 2, print those powers in a single line, separated by spaces, in any order. If it is not possible, print -1. Example Input 18 Output 16 2","solution":"def express_as_powers_of_two(n): Given an integer n, express it as a sum of distinct non-negative integer powers of 2. If possible, return those powers as a list; if not, return -1. Parameters: n (int): The target integer to express as a sum of distinct powers of 2. Returns: Union[int, List[int]]: A list of distinct powers of 2 that sum to n or -1 if not possible. if n <= 0: return -1 # Negative number or zero cannot be expressed as a sum of positive powers of 2. result = [] power = 0 while n > 0: if n % 2 == 1: result.append(2**power) n = n // 2 power += 1 return result if result else -1"},{"question":"You need to help a delivery drone in managing its battery usage efficiently. The drone has to deliver packages in a city represented as a grid. The drone starts at the top-left corner of the grid (0, 0) and needs to deliver the package to the bottom-right corner of the grid (n-1, m-1). The drone can only move down or right at each step. Each cell in the grid contains an integer representing the battery usage for passing through that cell. You need to find the path from the top-left corner to the bottom-right corner such that the total battery usage is minimized. If there are multiple paths with the same minimal battery usage, output any one of them. # Input: - The first line contains two integers n and m (1 <= n, m <= 100), the number of rows and columns in the grid respectively. - The next n lines each contain m integers, where the j-th integer in the i-th line represents the battery usage of the cell (i, j) (0 <= grid[i][j] <= 100). # Output: - Print the minimal battery usage. - Print the path in the format of a sequence of coordinates. The path should start at (0, 0) and end at (n-1, m-1). Each coordinate should be space-separated and printed in the order they are visited. # Example: Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 7 (0,0) (0,1) (0,2) (1,2) (2,2) ``` Note: In this example, the path (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) gives the minimal battery usage of 7. There can be other paths with the same battery usage, and any of them would be a correct output.","solution":"def min_battery_usage(grid): n = len(grid) m = len(grid[0]) dp = [[0] * m for _ in range(n)] path = [[None] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] path[i][0] = (i - 1, 0) for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] path[0][j] = (0, j - 1) for i in range(1, n): for j in range(1, m): if dp[i - 1][j] < dp[i][j - 1]: dp[i][j] = dp[i - 1][j] + grid[i][j] path[i][j] = (i - 1, j) else: dp[i][j] = dp[i][j - 1] + grid[i][j] path[i][j] = (i, j - 1) min_battery = dp[n - 1][m - 1] current = (n - 1, m - 1) result_path = [] while current: result_path.append(current) current = path[current[0]][current[1]] result_path = result_path[::-1] return min_battery, result_path # Example usage: grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] min_usage, path = min_battery_usage(grid) print(min_usage) # Expected output: 7 print(\\" \\".join(map(str, path))) # Expected output: (0, 0) (0, 1) (0, 2) (1, 2) (2, 2)"},{"question":"Each photograph in a museum is framed in such a way that it creates a border of some minimum width around the content. You, as a patron of this museum, are curious to know how many frames are there with exactly a specific width of the border. You are given a description of each photograph in the form of a rectangle with given dimensions. The photograph content is always placed in the center of the frame, leaving an equal border width on all sides. Your task is to determine the number of frames with exactly a specified width. Input: - The first line contains two integers n, q (1 ≤ n, q ≤ 10^5), where n is the number of photographs and q is the number of queries. - Each of the next n lines contains three integers wi, hi, ci (1 ≤ wi, hi, ci ≤ 10^5), where wi is the width of the photograph content, hi is the height of the photograph content, and ci is the width of the frame. - Each of the next q lines contains a single integer bi (1 ≤ bi ≤ 10^5) denoting a query for the number of frames with exactly a border width bi. Output: - For each query, output the number of frames that have exactly a border width of bi. Example: Input: 5 3 4 6 2 7 8 3 4 5 2 10 12 4 6 9 2 2 3 4 Output: 3 1 1 Explanation: - There are 5 photographs, and we are asking 3 queries. - The first query asks for frames with a border width of 2. There are 3 such frames. - The second query asks for frames with a border width of 3. There is 1 such frame. - The third query asks for frames with a border width of 4. There is 1 such frame.","solution":"def count_frames_with_exact_border(n, q, photographs, queries): Counts the number of frames with exactly the specified border width for each query. Arguments: n : int - number of photographs q : int - number of queries photographs : list - list of tuples (width, height, frame width) queries : list - list of integers denoting the query for border width Returns: list of ints - count of frames with exactly the specified border width for each query from collections import Counter # Create a counter for the widths of the borders border_counter = Counter() for (w, h, c) in photographs: border_counter[c] += 1 # Generate results for each query result = [] for query in queries: result.append(border_counter.get(query, 0)) return result"},{"question":"In the kingdom of Lineland, there is a long narrow valley where the famous Line Bridge connects two towns. This bridge is represented as a straight line and is divided into sections that can be either damaged or in good condition. The bridge maintenance team needs to repair the least number of damaged sections to make the bridge passable from one end to the other. To be passable, there must be at least one continuous path of good sections from the start to the end. You are given a string where each character represents a section of the bridge: \'1\' for a good section and \'0\' for a damaged section. Determine the minimum number of damaged sections that need to be repaired to make the bridge passable. If the bridge is already passable, the number of repairs needed is zero. The input consists of a single string `s` containing only \'0\'s and \'1\'s, where the length of the string is the number of sections on the bridge (1 ≤ length of s ≤ 10^5). Output the minimum number of sections that need to be repaired to make the bridge passable from the start to the end. Example: - Input: \\"1100010111\\" - Output: 1 - Input: \\"00000\\" - Output: 4","solution":"def min_repairs_to_make_bridge_passable(s): Returns the minimum number of damaged sections that need to be repaired to make the bridge passable. Args: s (str): A string representing the sections of the bridge. Returns: int: The minimum number of damaged sections to be repaired. if \'1\' not in s: return len(s) - 1 groups = s.split(\'1\') groups_filtered = [len(group) for group in groups if len(group) > 0] if not groups_filtered: return 0 return min(groups_filtered)"},{"question":"Eve works as a delivery robot in a huge warehouse with an enormous grid of cells having `n` rows and `m` columns, where each cell can either be open or contain an obstacle. Each cell can be represented by a pair of coordinates `(i, j)`. Eve can move up, down, left, or right to an adjacent open cell in unit time. It is prohibited for her to move onto a cell containing an obstacle or out of the warehouse grid. There are `q` delivery requests, each defined by start and end cell coordinates. Eve must determine the shortest path from the starting cell to the destination cell for each request, if it exists. In case there is no valid path, the output should be `-1` for that specific delivery request. The first line of input contains three integers `n`, `m`, and `q` (`1 <= n, m <= 1000`, `1 <= q <= 10^5`) — the number of rows, columns, and delivery requests respectively. Each of the next `n` lines contains `m` integers, where `0` indicates an open cell and `1` indicates an obstacle. The next `q` lines contain four integers `x1`, `y1`, `x2`, `y2` (`1 <= x1, y1, x2, y2 <= n, m`) — the coordinates of the start and end cells for each delivery request. Output `q` lines, each containing the length of the shortest path for the corresponding delivery request, or `-1` if there is no valid path. **Sample Input:** ``` 4 4 3 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 4 4 1 1 4 3 4 4 1 1 ``` **Sample Output:** ``` 6 5 6 ``` **Explanation:** - For the first delivery request, Eve can reach from (1,1) to (4,4) in 6 steps avoiding obstacles. - For the second delivery request, the shortest path from (1,1) to (4,3) requires 5 steps. - For the third delivery request, the shortest path from (4,4) to (1,1) is also 6 steps.","solution":"from collections import deque def bfs_shortest_path(grid, start, end): n, m = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] start = (start[0] - 1, start[1] - 1) end = (end[0] - 1, end[1] - 1) if grid[start[0]][start[1]] == 1 or grid[end[0]][end[1]] == 1: return -1 queue = deque([(start, 0)]) visited = set() visited.add(start) while queue: (current, dist) = queue.popleft() if current == end: return dist for direction in directions: next_cell = (current[0] + direction[0], current[1] + direction[1]) if 0 <= next_cell[0] < n and 0 <= next_cell[1] < m: if grid[next_cell[0]][next_cell[1]] == 0 and next_cell not in visited: visited.add(next_cell) queue.append((next_cell, dist + 1)) return -1 def delivery_requests(grid, requests): results = [] for request in requests: start = (request[0], request[1]) end = (request[2], request[3]) result = bfs_shortest_path(grid, start, end) results.append(result) return results"},{"question":"Alice is trying to understand a sequence of numbers with an interesting property. She is given a sequence of integers, and she must perform q operations on this sequence. An operation can either: 1. Reverse a sub-sequence from index l to r. 2. Calculate and return the minimum value within a sub-sequence from index l to r. Each query will be defined as follows: 1. `1 l r` - Reverse the sub-sequence from index l to r. 2. `2 l r` - Report the minimum value in the sub-sequence from index l to r. The sequence indexing is 1-based. The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) - the length of the sequence and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) - the elements of the sequence. Each of the next q lines contains a query in the format described. For each query of the second type, output the answer. # Example Input ``` 6 4 3 1 4 1 5 9 1 2 5 2 1 6 1 1 4 2 2 4 ``` # Example Output ``` 1 1 ``` # Explanation * Initially, the sequence is [3, 1, 4, 1, 5, 9]. * After the first query (reverse from index 2 to 5), the sequence becomes [3, 5, 1, 4, 1, 9]. * The second query finds the minimum value in the entire sequence, which is 1. * After the third query (reverse from index 1 to 4), the sequence becomes [4, 1, 5, 3, 1, 9]. * The fourth query finds the minimum value from index 2 to 4, which is 1.","solution":"def process_queries(n, q, sequence, queries): Processes a list of queries on a given sequence where each query can either reverse a sub-sequence or return the minimum value in a sub-sequence. Parameters: n - the length of the sequence (int) q - the number of queries (int) sequence - the list of sequence elements (list of ints) queries - the list of queries (list of tuples where each tuple is (int, int, int)) Returns: list of results for each query of the second type (list of ints) results = [] for query in queries: type_query, l, r = query l -= 1 # switching to 0-based index r -= 1 # switching to 0-based index if type_query == 1: sequence[l:r+1] = sequence[l:r+1][::-1] elif type_query == 2: results.append(min(sequence[l:r+1])) return results"},{"question":"Mona and Lisa are playing a game on an undirected graph with `n` vertices and `m` edges. Each of the vertices is initially assigned a color, which is either 1 or 2, denoted by `c[i]` for the `i`-th vertex. The edges between the vertices do not have weights. Mona can select any vertex and change its color to 1 or 2. However, she can only make `k` color changes in total. After making the color changes, Lisa\'s goal is to find the size of the largest connected component that consists solely of vertices of the same color. A connected component is a set of vertices in which there is a path between every pair of vertices within the set. Your task is to determine the size of the largest connected component consisting of vertices of the same color after making up to `k` color changes. The first line contains three integers `n`, `m`, and `k` (`1 ≤ n, m ≤ 1000`, `0 ≤ k ≤ 1000`) — the number of vertices, edges, and allowed color changes respectively. The second line contains `n` integers `c[1], c[2], ..., c[n]` (`1 ≤ c[i] ≤ 2`) — the initial colors of the vertices. The next `m` lines each contain two integers `u` and `v` (`1 ≤ u, v ≤ n`, `u ≠ v`) — the endpoints of an edge in the graph. Output a single integer — the size of the largest connected component consisting of vertices of the same color after making up to `k` color changes. # Example Input: ``` 6 7 2 1 2 1 2 1 2 1 2 2 3 3 4 4 5 5 6 1 3 2 5 ``` Output: ``` 5 ``` In this example, the optimal strategy is to change the color of vertices 2 and 4 to 1, resulting in a connected component of size 5.","solution":"from collections import deque, defaultdict def largest_connected_component(n, m, k, colors, edges): # Build the adjacency list for the graph adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) # Function to find all components in the graph def find_components(): visited = [False] * (n + 1) components = [] def bfs(start): queue = deque([start]) component = [] visited[start] = True while queue: node = queue.popleft() component.append(node) for neighbor in adj[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component for i in range(1, n + 1): if not visited[i]: components.append(bfs(i)) return components # Function to calculate the largest component size after color changes def max_component_size_with_color(component, target_color): color_count = sum(1 for node in component if colors[node - 1] == target_color) other_color_count = len(component) - color_count return color_count + min(other_color_count, k) # Find all components components = find_components() # Calculate the maximum possible size of a single-colored component max_size = 0 for component in components: max_size = max(max_size, max_component_size_with_color(component, 1)) max_size = max(max_size, max_component_size_with_color(component, 2)) return max_size # Inputs and Outputs for testing/debugging if __name__ == \\"__main__\\": n = 6 m = 7 k = 2 colors = [1, 2, 1, 2, 1, 2] edges = [ (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (1, 3), (2, 5) ] print(largest_connected_component(n, m, k, colors, edges)) # Output should be 5"},{"question":"Valerie has recently started enjoying video games. She is particularly fond of a game involving hiding gold coins in boxes. There are n boxes arranged in a line, and each box initially contains some gold coins. Valerie can choose any two boxes and swap their contents, which includes all the gold coins each box has. She wants to maximize the number of gold coins in any k consecutive boxes. Given the initial number of coins in each box, help Valerie determine the maximum number of coins she can gather in any k consecutive boxes after making at most one swap operation. The input format is as follows: - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100,000), representing the number of boxes and the number of consecutive boxes Valerie wants to maximize the coins in. - The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^6), representing the initial number of gold coins in each box. Output a single integer representing the maximum number of coins Valerie can gather in any k consecutive boxes after at most one swap operation. Example input: ``` 5 3 1 3 4 2 5 ``` Example output: ``` 12 ``` Explanation: Without any swap, the sum of coins in the best k consecutive boxes (3 in this case) is 4 + 2 + 5 = 11. If we swap the contents of the first box and the fourth box, the array becomes [2 3 4 1 5], and the sum of coins in the three consecutive boxes from index 3 to 5 is 4 + 1 + 5 = 10. However, swapping the second and fourth boxes results in the array [1 2 4 3 5], and the maximum sum in any three consecutive boxes now is 2 + 4 + 3 = 9. The optimal solution is to swap the first and the fifth boxes yielding [5 3 4 2 1], maximizing the consecutive sum to 3 + 4 + 5 = 12.","solution":"def max_coins(n, k, coins): Determines the maximum number of coins that can be gathered in any k consecutive boxes after making at most one swap operation. :param n: Number of boxes. :param k: Number of consecutive boxes. :param coins: List of initial number of gold coins in each box. :return: Maximum sum of coins in any k consecutive boxes after at most one swap. current_sum = sum(coins[:k]) max_sum = current_sum # Compute the sums of all k-length windows window_sums = [current_sum] for i in range(1, n - k + 1): current_sum = current_sum - coins[i-1] + coins[i+k-1] window_sums.append(current_sum) max_sum = max(max_sum, current_sum) # Check the effect of swapping any two boxes to maximize the sum of any k-length window for i in range(n): for j in range(i + 1, n): coins[i], coins[j] = coins[j], coins[i] # Recompute the sums after the swap current_sum = sum(coins[:k]) for m in range(1, n - k + 1): current_sum = current_sum - coins[m-1] + coins[m+k-1] max_sum = max(max_sum, current_sum) # Swap back to original positions coins[i], coins[j] = coins[j], coins[i] return max_sum"},{"question":"An anagram is a rearrangement of the letters of a word to form another word. Given two strings, determine if one is an anagram of the other. The input consists of two lines each containing a string s1 and s2. The strings are made up of lowercase English letters and their lengths are between 1 and 100, inclusive. Output \\"YES\\" if s1 is an anagram of s2 and \\"NO\\" otherwise.","solution":"def are_anagrams(s1, s2): Determines if two strings s1 and s2 are anagrams of each other. Args: s1 (str): First string. s2 (str): Second string. Returns: str: \\"YES\\" if s1 and s2 are anagrams, \\"NO\\" otherwise. # Anagrams must have the same characters with the same frequency return \\"YES\\" if sorted(s1) == sorted(s2) else \\"NO\\""},{"question":"Tina is a voracious reader and spends a lot of time analyzing the structure of palindromic substrings in the books she reads. A substring of a string is palindromic if it reads the same forwards and backwards. Tina is particularly interested in the lengths of the largest palindromic substrings in various books. Given a string, help Tina determine the length of the longest palindromic substring within it. The first line contains a single integer n (1 ≤ n ≤ 1000) – the length of the string. The second line contains a string s of length n, consisting of lowercase English letters. Print a single integer – the length of the longest palindromic substring in the given string. For example: ``` Input: 7 babadab Output: 5 ``` Explanation: The longest palindrome in the string \\"babadab\\" is \\"badab\\" which has a length of 5.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in the given string s. n = len(s) if n == 0: return 0 dp = [[False] * n for _ in range(n)] max_length = 1 # every single character is a palindrome for i in range(n): dp[i][i] = True start = 0 for end in range(1, n): for begin in range(0, end): if s[begin] == s[end]: if end - begin == 1 or dp[begin + 1][end - 1]: dp[begin][end] = True if end - begin + 1 > max_length: max_length = end - begin + 1 start = begin return max_length"},{"question":"Fiona loves to rearrange strings of characters. She has a special interest in checking if she can transform one string into another using a series of operations. She is particularly interested in the following operations: 1. Swap any two adjacent characters in the string. 2. Replace any character in the string with any other character in the alphabet. 3. Reverse the entire string. Fiona wants to know if she can transform the string `s` into the string `t` using any number of the above operations. If it is possible, Fiona would like to know the minimum number of operations needed. Given two strings `s` and `t`, both of the same length, determine if it is possible to transform `s` into `t` using the described operations. If possible, compute the minimum number of operations required. The first line of input contains a single integer `n` (1 ≤ n ≤ 100) — the length of the strings `s` and `t`. The second line contains the string `s` of length `n`, consisting of lowercase English letters. The third line contains the string `t` of length `n`, consisting of lowercase English letters. Output a single integer representing the minimum number of operations needed to transform `s` into `t`. If it is impossible to transform `s` into `t`, print `-1`. Example **Input:** ``` 5 abcde edcba ``` **Output:** ``` 1 ``` **Explanation:** One possible way to transform `s` into `t` in the given example is to use the \\"Reverse the entire string\\" operation.","solution":"def can_transform(s, t): Determine if it is possible to transform s into t and the minimum number of operations required. :param s: Source string :param t: Target string :return: minimum number of operations to transform s into t or -1 if impossible # First check if s and t have the same characters with the same frequency if sorted(s) != sorted(t): return -1 # Check if reversing the string s makes it equal to t if s[::-1] == t: return 1 # Otherwise, we cannot immediately determine the steps counts, # A full greedy algorithm can be very complicated, and here we assume an upper bound # Replacing every character should surely turn s to t, making this upper bound len(s) as a straight-forward replacement operation set return len(s)"},{"question":"Given a string s consisting of lowercase alphabetic characters, you have to perform the following operations: 1. Define a special palindrome as a string that contains any character at most once, except one character that can appear any number of times. For example, \\"a\\", \\"aaa\\", \\"acbca\\", and \\"xyyyx\\" are special palindromes, but \\"abac\\" and \\"abbca\\" are not. 2. Your task is to count the number of special palindromes that can be formed from any substring of the given string s. The input consists of a single line containing the string s of length n (1 leq n leq 10^4). Output a single integer representing the number of special palindromes that can be formed from any substring of s. For example, consider the string \\"aabaa\\": - Substrings such as \\"a\\", \\"aa\\", \\"aabaa\\" and \\"aba\\" are special palindromes. - There are a total of 9 special palindromes that can be formed from this string: \\"a\\" (three times), \\"aa\\" (three times), \\"aba\\" (one time), \\"aabaa\\" (one time), \\"b\\" (one time). Hence, the output for this example would be 9.","solution":"def count_special_palindromes(s): n = len(s) count = 0 # Single character substrings are always special palindromes count += n # Consecutive same characters substrings i = 0 while i < n: same_char_count = 1 while i + 1 < n and s[i] == s[i + 1]: i += 1 same_char_count += 1 count += (same_char_count * (same_char_count - 1)) // 2 i += 1 # Substrings of format \\"xyx\\", \\"xyyx\\" and so on for i in range(1, n - 1): same_char_count = 1 while i + same_char_count < n and i - same_char_count >= 0 and s[i + same_char_count] == s[i - same_char_count] and s[i - same_char_count] != s[i]: count += 1 same_char_count += 1 return count"},{"question":"Alice is planning a hiking trip and wants to ensure she takes breaks at optimal points along her hike to both enjoy the scenery and maintain her energy levels. The hiking trail is represented as an array of integers, where each integer represents the elevation at a particular point along the trail. Alice wants to take breaks at \\"peaks\\". A \\"peak\\" is defined as an element which is strictly greater than the elements to its immediate left and right. Alice, being meticulous, is willing to extend her help to other hikers by marking these peaks on the trail map. Write a function `findPeaks` that accepts a list of integers representing the trail and returns a list of indices where these peaks occur. If the trail is too short to have any peaks (less than 3 points), the function should return an empty list. # Example Input - `[1, 2, 3, 1, 5, 6, 2, 1]` Output - `[2, 5]` Input - `[2, 1, 2]` Output - `[0, 2]` # Constraints - The length of the trail array will be in the range [1, 10^5] - Elevation values are integers in the range [-10^9, 10^9] # Function Signature ```python def findPeaks(trail: List[int]) -> List[int]: ``` # Explanation In the first example, indices 2 and 5 are peaks because `3 > 2 and 3 > 1` and `6 > 5 and 6 > 2`, respectively. In the second example, although there is no middle element that satisfies the peak condition, Alice still considers the endpoints because the trail only has three points. Thus, indices 0 and 2 are considered peaks as they are strictly greater or cannot be compared to the non-existent neighboring elements.","solution":"from typing import List def findPeaks(trail: List[int]) -> List[int]: peaks = [] if len(trail) < 3: return [] for i in range(1, len(trail) - 1): if trail[i] > trail[i - 1] and trail[i] > trail[i + 1]: peaks.append(i) return peaks"},{"question":"Alex loves solving puzzles with strings. Recently, he came across a novel type of string operation. Given two strings, Alex can create a new resultant string by selecting characters from each of the input strings alternately. The first character of the resultant string must be taken from the first input string, the second character from the second input string, the third from the first input string again, and so forth. If one of the strings is exhausted before the other, Alex will continue selecting characters from the remaining string until both strings are fully traversed. You need to help Alex by writing a program that generates such resultant strings from the given input strings. The first line of input contains a single integer t (1 leq t leq 10^3) — the number of test cases. Each test case consists of two lines. The first line contains the first string s_1 (1 leq |s_1| leq 50), and the second line contains the second string s_2 (1 leq |s_2| leq 50). For each test case, output a single line containing the resultant string after performing the aforementioned operation. # Examples **Input:** ``` 2 abc defg hello world ``` **Output:** ``` adbecfg hweolrllod ``` In the first example, characters are taken alternately from \\"abc\\" and \\"defg\\". So the resultant string will be \\"adbecfg\\". In the second example, characters are taken alternately from \\"hello\\" and \\"world\\". So the resultant string will be \\"hweolrllod\\".","solution":"def merge_strings(t, test_cases): Merges pairs of strings alternately and returns the resulting strings for each test case. Parameters: t (int): the number of test cases test_cases (list of tuples): a list containing tuples of (s1, s2) for each test case Returns: list: a list of the resultant strings for each test case results = [] for s1, s2 in test_cases: res = [] i, j = 0, 0 while i < len(s1) and j < len(s2): res.append(s1[i]) res.append(s2[j]) i += 1 j += 1 if i < len(s1): res.extend(s1[i:]) if j < len(s2): res.extend(s2[j:]) results.append(\'\'.join(res)) return results"},{"question":"# Optimal Path in a Weighted Grid You are given a weighted grid of size `n x m`, where each cell contains a non-negative integer representing its weight. The task is to find the minimum weight path from the top-left corner (1, 1) to the bottom-right corner (n, m). You can move only right or down from any cell in the grid. The path weight is the sum of the weights of the cells traversed in the path, including the starting and ending cells. Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), the number of rows and columns in the grid. - Each of the next `n` lines contains `m` integers (0 ≤ weight ≤ 100), representing the weight of each cell in the grid. Output - Print a single integer — the minimum weight of the path from the top-left to the bottom-right corner. Example Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 7 ``` Explanation: One of the optimal paths is (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) with the path weight 1+3+1+1+1 = 7.","solution":"def min_weight_path(n, m, grid): # Create a 2D DP array to store the minimum path sum to each cell dp = [[0] * m for _ in range(n)] # Initialize the top-left cell with its own weight dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the grid for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right cell contains the minimum path sum return dp[-1][-1]"},{"question":"In a distant kingdom, there exists a mystical forest with n magical stones arranged in a straight line. Each stone has a unique integer power value pi assigned to it. The elf guardian of the forest wants to perform q magic operations on these stones to balance their power. Each operation has three numbers: l, r, and k. - l and r define the range of stones on which the operation is applied (1 ≤ l ≤ r ≤ n). - k indicates the amount to increment (if k is positive) or decrement (if k is negative) all the power values of the stones in the specified range. Your task is to determine the power value of each stone after all q operations are applied consecutively in the given order. The first line of input contains two integers n (1 ≤ n ≤ 10^5) and q (1 ≤ q ≤ 10^5) — the number of stones and the number of operations, respectively. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10^9) — the initial power values of the stones. The next q lines each contain three integers l, r, and k (|k| ≤ 10^9) — describing the operation. Output n integers, the final power values of the stones after applying all the operations. For example: Input: 5 3 1 2 3 4 5 1 3 2 2 5 -1 1 5 3 Output: 5 6 7 6 7 In this example: - After the first operation, the power values become: [3, 4, 5, 4, 5] - After the second operation, the power values become: [3, 3, 4, 3, 4] - After the third operation, the power values become: [6, 6, 7, 6, 7]","solution":"def apply_operations(n, q, powers, operations): Applies a series of operations to a list of stone power values. Parameters: - n: The number of stones (int). - q: The number of operations (int). - powers: Initial power values of the stones (list of int). - operations: A list of operations, where each operation is represented as a tuple (l, r, k) (list of tuples). Returns: - A list of integers representing the final power values of the stones after all operations. for l, r, k in operations: for i in range(l-1, r): powers[i] += k return powers def main(): import sys input = sys.stdin.read data = input().split() idx = 0 n = int(data[idx]) q = int(data[idx+1]) idx += 2 powers = list(map(int, data[idx:idx+n])) idx += n operations = [] for _ in range(q): l = int(data[idx]) r = int(data[idx+1]) k = int(data[idx+2]) operations.append((l, r, k)) idx += 3 result = apply_operations(n, q, powers, operations) print(\\" \\".join(map(str, result))) if __name__ == \\"__main__\\": main()"},{"question":"Ian and Maria are software engineers working on a new recommendation engine for a popular e-commerce platform. The engine ranks products based on their relevance to the user, which is determined by a score. Each product has a unique identifier and a score assigned to it. They have a set of recommendation rules that dictate that the order of products should be such that no two products with consecutive identifiers should be adjacent in the list if possible, to provide more diversity. If it’s not possible to achieve this, the list should still be in decreasing order of their scores. Your task is to help Ian and Maria by writing an algorithm that, given a list of products with their identifiers and scores, generates the order of products according to the rules mentioned. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of products. Each of the following n lines contains two integers id and score (1 ≤ id ≤ 100,000; 0 ≤ score ≤ 1,000,000,000) — identifier and score of the i-th product. Print the identifiers of the products in the order they should appear in the recommendation list. If there are multiple valid solutions, print any. Example: Input: 5 2 500 4 200 3 300 1 600 5 400 Output: 1 3 5 2 4","solution":"def recommend_products(n, products): Recommends products based on the ids and scores with the given rules. :param n: Number of products :param products: List of tuples, each tuple containing an identifier and a score :return: List of product identifiers in the recommended order # Sort products by scores in descending order products.sort(key=lambda x: x[1], reverse=True) result = [] used_ids = set() for prod in products: id = prod[0] # Try to place the product based on the non-consecutive rule if not (result and abs(result[-1] - id) == 1): result.append(id) used_ids.add(id) # In case some products couldn\'t be placed based on the first rule for prod in products: id = prod[0] if id not in used_ids: result.append(id) return result"},{"question":"A health clinic wants to keep track of patient appointments. They categorize patients into two types: regular and emergency patients. Each patient has a unique ID, and the priority is given to emergency patients over regular ones. However, if two patients are of the same type, the one who came first gets priority. The clinic needs a system to handle the patient appointment queries efficiently. You are tasked to implement a system to manage the appointments based on the following types of operations: 1. Register a new patient. Regular or emergency status and the ID will be provided. 2. Find out the ID of the next patient who should be served. 3. Remove the patient that is being served from the system. Input: - The first line contains an integer ( q ) (1 ≤ ( q ) ≤ 100,000) — the number of queries. - Each of the following ( q ) lines contains a query of one of the following types: * \\"1 type id\\" means register a patient with ID `id` with type `type` (1 for regular, 2 for emergency). * \\"2\\" means query the ID of the next patient to be served. * \\"3\\" means remove the patient being served from the system. Output: For each query of type \\"2\\", output the ID of the next patient to be served. If there are no patients to be served, output \\"NONE\\". Example: Input: ``` 7 1 1 101 1 2 102 2 1 1 103 1 2 104 2 3 ``` Output: ``` 102 104 ``` Explanation: 1. Register patient 101 as a regular patient. 2. Register patient 102 as an emergency patient. 3. Query the next patient, should return 102 (emergency patient). 4. Register patient 103 as a regular patient. 5. Register patient 104 as an emergency patient. 6. Query the next patient, should return 104 (since both 102 and 104 are emergency, and 102 was already served and removed in step 7). 7. Remove the current serving patient (104).","solution":"from collections import deque class AppointmentSystem: def __init__(self): self.regular_patients = deque() self.emergency_patients = deque() def register_patient(self, type, id): if type == 1: self.regular_patients.append(id) elif type == 2: self.emergency_patients.append(id) def query_next_patient(self): if self.emergency_patients: return self.emergency_patients[0] elif self.regular_patients: return self.regular_patients[0] else: return \\"NONE\\" def serve_next_patient(self): if self.emergency_patients: self.emergency_patients.popleft() elif self.regular_patients: self.regular_patients.popleft()"},{"question":"Farmer John has a new grid field of size n x m where each cell either contains a crop or is barren. He wishes to calculate the area of the largest rectangular crop field (sub-grid) within this grid. The crops are represented by \'1\'s and the barren areas are \'0\'s. Given a grid of n rows and m columns (1 ≤ n, m ≤ 1000), you need to find the area of the largest rectangle that consists only of \'1\'s. Input: - The first line contains two space-separated integers, n (number of rows) and m (number of columns). - Each of the next n lines contains m characters (\'1\' or \'0\'), representing the grid. Output: - Print the area of the largest rectangle made up of \'1\'s. Example: Input: 4 4 1011 1111 1110 1100 Output: 6 Explanation: The largest rectangle of \'1\'s has an area of 6 which corresponds to the 3x2 block of \'1\'s in the second and third rows.","solution":"def maximalRectangle(matrix): if not matrix: return 0 n, m = len(matrix), len(matrix[0]) max_area = 0 heights = [0] * m left = [0] * m right = [m] * m for i in range(n): cur_left, cur_right = 0, m # update heights for j in range(m): if matrix[i][j] == \'1\': heights[j] += 1 else: heights[j] = 0 # update left for j in range(m): if matrix[i][j] == \'1\': left[j] = max(left[j], cur_left) else: left[j] = 0 cur_left = j + 1 # update right for j in range(m - 1, -1, -1): if matrix[i][j] == \'1\': right[j] = min(right[j], cur_right) else: right[j] = m cur_right = j # update the area for j in range(m): max_area = max(max_area, (right[j] - left[j]) * heights[j]) return max_area"},{"question":"A new social media app has been designed with a unique way of sending messages between users. The system uses a relay-based messaging model where messages pass through multiple intermediary users before reaching the final recipient. Here\'s how it works: 1. Each user in the network has a unique ID from 1 to n. 2. A message can be sent from one user to another directly if there exists a direct connection between them. 3. If no direct connection exists, the message is relayed through a sequence of users who have direct connections. You are given the network of users as an adjacency matrix where a value of 1 indicates a direct connection between two users and 0 indicates no direct connection. Your task is to determine the shortest path (in terms of the number of direct connections) for a message to travel from a specified sender to a specified recipient. If no path exists, return -1. Input: - The first line contains an integer n (1 ≤ n ≤ 100), the number of users. - The next n lines contain n integers (either 0 or 1), representing the adjacency matrix of direct connections. - The last line contains two integers s and t (1 ≤ s, t ≤ n), the sender and the recipient respectively. Output: - Print a single integer, the shortest path length for the message to travel from the sender to the recipient. If no path exists, print -1. Example: Input: 5 0 1 0 0 0 1 0 1 1 1 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 1 4 Output: 2 Explanation: In the given example, the users are connected as follows: - User 1 is directly connected to users 2. - User 2 is directly connected to users 1, 3, 4, and 5. - User 3 is directly connected to user 2. - User 4 is directly connected to user 2. - User 5 is directly connected to user 2. To send a message from user 1 to user 4, the shortest path is: 1 -> 2 -> 4.","solution":"from collections import deque def shortest_path(n, adjacency_matrix, s, t): def bfs(start, end): visited = [False] * n distance = [-1] * n queue = deque([start]) visited[start] = True distance[start] = 0 while queue: current = queue.popleft() if current == end: return distance[current] for neighbor in range(n): if adjacency_matrix[current][neighbor] == 1 and not visited[neighbor]: queue.append(neighbor) visited[neighbor] = True distance[neighbor] = distance[current] + 1 return -1 # Convert 1-based indexes to 0-based for internal processing return bfs(s-1, t-1)"},{"question":"You are given an array of integers and a positive integer `k`. Your task is to find the maximum sum of any subarray of size `k`. A subarray is a contiguous part of an array. The array elements are guaranteed to be within the range `-10^4` to `10^4`, and the length of the array `n` is between `k` and `10^5`. # Input - The first line contains two integers `n` and `k` (`1 ≤ k ≤ n ≤ 10^5`). - The second line contains `n` integers, representing the elements of the array. # Output - Print a single integer, the maximum sum of any subarray of size `k`. # Example Input ``` 10 3 1 2 3 -2 5 -1 6 3 -4 2 ``` Output ``` 11 ``` # Explanation In the example, the subarray with the maximum sum is `[5, -1, 6]`, which sums to `10`. The solution should be efficient, aiming for a linear time complexity relative to the size of the array `n`.","solution":"def max_sum_subarray(arr, n, k): This function returns the maximum sum of any subarray of size k. Parameters: arr (list): List of integers representing the array n (int): Length of the array k (int): Size of the subarray Returns: int: Maximum sum of any subarray of size k if n < k: return 0 # Compute the sum of the first window window_sum = sum(arr[:k]) max_sum = window_sum # Slide the window from start to end in the array for i in range(n - k): # Slide the window by removing the element that is going out of the window and adding the element that is coming into the window window_sum = window_sum - arr[i] + arr[i + k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex has a certain power level associated with it, represented by an integer array p of length n. Two vertices are considered connected if they have a direct edge between them. Your task is to find the vertex with the highest power level that is part of the largest connected component. If there are multiple vertices with the same power level in the largest connected component, return the one with the smallest index. The first line contains two integers, n and m (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000), representing the number of vertices and edges in the graph respectively. The second line contains n space-separated integers p[i] (1 ≤ p[i] ≤ 10^9), representing the power levels of the vertices. The next m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n), representing an edge between vertex u and vertex v. Output a single integer representing the index (1-based) of the vertex with the highest power level in the largest connected component. If the graph contains no edges, consider each vertex as a separate connected component and return the vertex with the highest power level among them. Example: Input: 5 4 10 20 30 40 50 1 2 2 3 3 4 4 5 Output: 5 Explanation: The largest connected component in the graph is {1, 2, 3, 4, 5} and the vertex with the highest power level in this component is vertex 5 with a power level of 50. Therefore, the output is 5.","solution":"def find_highest_power_in_largest_component(n, m, power_levels, edges): from collections import defaultdict, deque if m == 0: # No edges, return the vertex with the highest power level return power_levels.index(max(power_levels)) + 1 graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) def bfs(start): visited = set() queue = deque([start]) component = [] while queue: node = queue.popleft() if node not in visited: visited.add(node) component.append(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return component visited_global = set() largest_component = [] for vertex in range(n): if vertex not in visited_global: component = bfs(vertex) if len(component) > len(largest_component): largest_component = component visited_global.update(component) largest_component.sort(key=lambda x: (-power_levels[x], x)) return largest_component[0] + 1"},{"question":"The equipment for a science experiment consists of multiple items. Each item has a unique ID and a specific weight. To conduct tests, a scientist needs to balance items on both sides of an apparatus. She needs to select several pairs of items such that the total weight on one side is exactly equal to the total weight on the other side. Each test consists of multiple queries. Each query specifies a weight that the scientist wants to balance. For each query, determine whether it is possible to select pairs of items that sum up to the specified weight. Here\'s the input format: - The first line contains three integers: `n` (1 ≤ n ≤ 10^4), the number of items, `w` (1 ≤ w ≤ 1000), the maximum weight of any item, and `q` (1 ≤ q ≤ 10^4), the number of queries. - The second line contains `n` integers, each representing the weight of an item. - The following `q` lines each contain a single integer representing a target weight that the scientist wants to balance. For each query, output \\"YES\\" if it\'s possible to select pairs of items such that their total weight is equal to the queried weight, otherwise output \\"NO\\". **Example Input:** ``` 5 10 5 2 4 6 8 10 8 12 14 20 16 ``` **Example Output:** ``` YES YES YES NO YES ``` **Explanation:** In the given example: - For the query with weight 8, pairs (4, 4) can be selected. - For the query with weight 12, pairs (6, 6) or (2, 10) can be selected. - For the query with weight 14, pairs (4, 10) can be selected. - For the query with weight 20, no such pairs can be found. - For the query with weight 16, pairs (6, 10) can be selected.","solution":"def can_balance_pairs(n, weights, queries): Determine if it\'s possible to select pairs of items such that their total weight is equal to the queried weight for each query. :param n: Number of items (integer) :param weights: List of item weights (list of integers) :param queries: List of target weights for balancing pairs (list of integers) :return: List of strings (\\"YES\\" or \\"NO\\") weight_count = {} for weight in weights: weight_count[weight] = weight_count.get(weight, 0) + 1 results = [] for query in queries: found = False # Iterate through weights that we have for weight in weights: complement = query - weight if complement in weight_count: if complement == weight and weight_count[weight] > 1: found = True break elif complement != weight and weight_count[complement] > 0: found = True break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Rita loves to create patterns using numbers. She recently encountered a sequence defined by the following rules: 1. The sequence starts with a positive integer n. 2. If the current term is even, the next term is obtained by dividing the current term by 2. 3. If the current term is odd, the next term is obtained by multiplying the current term by 3 and then adding 1. This continues until the sequence reaches the number 1. Rita wants to know how many terms are in the sequence, including the starting number and the final 1. Write a program that takes a single integer n (1 ≤ n ≤ 10^6) as input and outputs the length of the sequence generated according to the aforementioned rules. **Input:** A single integer n. **Output:** A single integer representing the length of the sequence. **Example:** Input: 7 Output: 17 In the example, starting with 7, the sequence proceeds as follows: 7 → 22 → 11 → 34 → 17 → 52 → 26 → 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1 Thus, the total length of the sequence is 17.","solution":"def sequence_length(n): Returns the length of the sequence starting with n and ending at 1. length = 1 while n != 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 length += 1 return length"},{"question":"Given an m x n matrix where each cell contains an integer, your goal is to find the longest path of increasing integers. Note that you can move in four possible directions: up, down, left, or right. You may not revisit any cell in the same path more than once. Write a function `longestIncreasingPath` that takes a 2D integer matrix as input and returns the length of the longest increasing path. # Input - A 2D matrix `matrix` of integers where 1 ≤ matrix[i][j] ≤ 10^4 and the dimensions of the matrix are 1 ≤ m, n ≤ 200. # Output - An integer representing the length of the longest increasing path. # Example Input ``` matrix = [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] ``` Output ``` 4 ``` Explanation: The longest increasing path is [1, 2, 6, 9]. # Constraints - The solution should handle potential cycles or revisits within the matrix. - The matrix can be relatively large, so consider the efficiency of your solution. # Function Signature ```python def longestIncreasingPath(matrix: List[List[int]]) -> int: ```","solution":"from typing import List, Tuple def longestIncreasingPath(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 def dfs(x: int, y: int, memo: List[List[int]]) -> int: if memo[x][y]: return memo[x][y] # Directions array for moving up, down, left, and right directions: List[Tuple[int, int]] = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_length = 1 # Initial length of path starting from current cell for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(matrix) and 0 <= ny < len(matrix[0]) and matrix[nx][ny] > matrix[x][y]: length = 1 + dfs(nx, ny, memo) max_length = max(max_length, length) memo[x][y] = max_length return max_length m, n = len(matrix), len(matrix[0]) memo: List[List[int]] = [[0] * n for _ in range(m)] return max(dfs(i, j, memo) for i in range(m) for j in range(n))"},{"question":"You are given an array of integers `a`. For each element, determine if it is a local minimum or not. An element is considered a local minimum if it is smaller than its neighbors. Note that the first and the last element each have only one neighbor. If there are multiple local minima, return the smallest value among them. If no local minimum is present, return -1. The first line contains a single integer n (1 le n le 100) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (-10^6 le a_i le 10^6) — the elements of the array. Print a single integer — the smallest local minimum, or -1 if no local minimum exists. **Example:** Input: ``` 5 9 6 3 14 5 ``` Output: ``` 3 ``` Input: ``` 4 1 1 1 1 ``` Output: ``` -1 ```","solution":"def smallest_local_minimum(n, a): Returns the smallest local minimum from the list of integers `a` or -1 if no local minimum exists. Parameters: n (int): The number of elements in the list. a (List[int]): The list of integers. Returns: int: The smallest local minimum, or -1 if no local minimum exists. if n == 1: return a[0] local_minima = [] for i in range(n): if i == 0 and a[i] < a[i + 1]: local_minima.append(a[i]) elif i == n - 1 and a[i] < a[i - 1]: local_minima.append(a[i]) elif 0 < i < n - 1 and a[i] < a[i - 1] and a[i] < a[i + 1]: local_minima.append(a[i]) if not local_minima: return -1 else: return min(local_minima)"},{"question":"Lily loves gardening and she has a beautifully organized garden. She has n rows of plants, each with m beautiful flowers. To keep things interesting, Lily wants to rearrange the flowers in a specific way. She wants the flower arrangement to be lexicographically smallest amongst all possible rearrangements of the flowers within each row. However, there is a twist. She can only swap flowers between adjacent rows (i.e., row i and row i+1). Help Lily determine the lexicographically smallest arrangement of flowers in her garden that she can achieve by following the above rule. If there are multiple possible arrangements, print any one of them. A string x is lexicographically smaller than a string y if and only if one of the following holds: - x is a prefix of y, and x ≠ y; - in the first position where x and y differ, the character in x is smaller than the character in y. # Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the number of rows and the number of flowers in each row respectively. - The next n lines each contain a string of length m representing the arrangement of flowers in each row. The strings consist of lowercase English letters. # Output: - Print the lexicographically smallest arrangement of flowers that Lily can achieve after performing the allowed swaps. Output each row on a new line. # Example: Input: ``` 3 3 cba fed ghi ``` Output: ``` abc def ghi ``` In this example, we can swap \'cba\' in the first row with \'abc\' to get the smallest possible lexicographical arrangement. Similarly, for the second row, \'fed\' becomes \'def\'.","solution":"def lexicographically_smallest_arrangement(n, m, garden): Rearrange the plant rows such that the arrangement of flowers within each row is the lexicographically smallest among all possible rearrangements of flowers within that row and only swapping between adjacent rows are allowed. Parameters: n (int): Number of rows m (int): Number of flowers in each row garden (list of str): List of strings representing the rows of flowers Returns: list of str: Lexicographically smallest arrangement of flowers for i in range(n - 1): for j in range(i, n): if garden[i] > garden[j]: garden[i], garden[j] = garden[j], garden[i] return [\'\'.join(sorted(garden[i])) for i in range(n)] # Example Use Case print(lexicographically_smallest_arrangement(3, 3, [\\"cba\\", \\"fed\\", \\"ghi\\"])) # Expected Output: # [\'abc\', \'def\', \'ghi\']"},{"question":"You have been hired by a robot manufacturing company to develop an algorithm for controlling their new line of delivery robots. These robots operate in a grid-like warehouse where each cell can either be empty or contain an obstacle. The robots start from a given starting cell and must reach a target cell while avoiding obstacles. The warehouse grid is represented as a 2D list where each element is either `0` (an empty cell) or `1` (an obstacle). The robot can move up, down, left, or right, but cannot move diagonally or pass through obstacles. Your task is to determine if there exists a path from the starting cell to the target cell. If such a path exists, the algorithm should return the length of the shortest path; otherwise, it should return -1. **Input** - The first line of the input contains two integers `n` and `m` (`1 ≤ n, m ≤ 1000`), the number of rows and columns of the grid, respectively. - The next `n` lines each contain `m` integers (either `0` or `1`), representing the warehouse grid. - The following line contains two space-separated integers `sx` and `sy` (`1 ≤ sx ≤ n`, `1 ≤ sy ≤ m`), the starting cell coordinates. - The last line contains two space-separated integers `tx` and `ty` (`1 ≤ tx ≤ n`, `1 ≤ ty ≤ m`), the target cell coordinates. **Output** - If a path exists, output a single integer denoting the length of the shortest path from the starting cell to the target cell. - If no such path exists, output -1. **Example Input** ``` 5 5 0 0 0 0 1 0 1 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 5 4 ``` **Example Output** ``` 7 ``` **Explanation** In the example, the shortest path from (1,1) to (5,4) has a length of 7. The robot moves through the following cells: (1,1) → (2,1) → (3,1) → (3,2) → (3,3) → (4,3) → (5,3) → (5,4).","solution":"from collections import deque def shortest_path_length(grid, start, target): Returns the length of the shortest path from start to target in a grid. :param grid: 2D list representing the warehouse grid. :param start: Tuple (sx, sy) representing the starting cell coordinates. :param target: Tuple (tx, ty) representing the target cell coordinates. :return: Integer length of the shortest path or -1 if no path exists. n = len(grid) m = len(grid[0]) sx, sy = start tx, ty = target # Adjust 1-based indexing to 0-based indexing for easier list access sx -= 1 sy -= 1 tx -= 1 ty -= 1 # Directions for up, down, left, right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == 0 queue = deque([(sx, sy, 0)]) visited = set() visited.add((sx, sy)) while queue: x, y, dist = queue.popleft() if (x, y) == (tx, ty): return dist for dx, dy in directions: new_x, new_y = x + dx, y + dy if is_valid(new_x, new_y) and (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append((new_x, new_y, dist + 1)) return -1"},{"question":"A group of adventurers is exploring a dungeon consisting of a network of interconnected rooms. They have discovered that each room contains a certain amount of treasure and one door that leads to another room. The adventurers want to determine the maximum amount of treasure they can collect if they start in a particular room and visit each room exactly once. The dungeon is represented as a directed graph where nodes represent rooms and directed edges represent doors. Each node has an associated value representing the amount of treasure in that room. Each room is guaranteed to have exactly one outgoing edge, ensuring that the adventurers will not encounter cycles. You need to help the adventurers by writing a program that can compute the maximum amount of treasure they can collect, given the initial room they start from. The first line of input contains an integer n (1 ≤ n ≤ 1000), representing the number of rooms in the dungeon. The second line contains n space-separated integers vi (0 ≤ vi ≤ 1000), representing the amount of treasure in each room. The third line contains n space-separated integers di (1 ≤ di ≤ n), representing the room each door leads to (1-based indexing). Output a single integer: the maximum amount of treasure that the adventurers can collect starting from any room. # Example: Input: ``` 5 10 20 30 40 50 2 3 4 5 1 ``` Output: ``` 150 ``` (Explanation: Starting from any room will eventually lead to visiting all the rooms. The total treasure collected is 10+20+30+40+50 = 150.) Note: - Each room is connected in a way that forms a single directed path through all rooms, ensuring no cycles. - An optimal route involves visiting each room exactly once, starting from any room eventually leads to visiting all rooms because of the guaranteed single outgoing edge.","solution":"def max_treasure(n, treasures, doors): # Since each room leads to another and eventually visits all rooms, we sum all treasure values. return sum(treasures)"},{"question":"John is a fan of connecting dots on a grid. He often engages in creating paths by connecting straight line segments either horizontally or vertically between dots. He claims that by carefully selecting the sequence of connections, he can traverse the entire grid from one dot to another. Given the size of the grid and the starting position of John, determine the minimum number of straight line segments required for John to reach all other dots on the grid. Each test case consists of: - An integer, `t` (1 le t le 100) — the number of test cases. - Each test case contains two integers, `n` and `m` (1 le n, m le 1000) — the number of rows and columns of the grid respectively. - Two integers, `r` and `c` (1 le r le n, 1 le c le m) — the starting row and column. For each test case, print the minimum number of straight line segments required. Example Input: ``` 2 3 3 1 1 5 4 2 2 ``` Example Output: ``` 2 2 ``` Explanation: - In the first test case, John starts at position (1, 1). From here, he needs at most 2 straight line segments: one to move horizontally to cover all columns and one to move vertically to cover all rows. - In the second test case, John starts at position (2, 2). Similar logic applies, with one horizontal and one vertical move needed to cover the entire grid.","solution":"def min_line_segments(t, test_cases): This function calculates the minimum number of straight line segments required to reach all other dots on the grid from the starting position for each test case. :param t: Integer - the number of test cases :param test_cases: List of tuples, each containing 4 integers (n, m, r, c) where n is the number of rows, m is the number of columns, r is the starting row, c is the starting column :return: List of integers representing minimum number of line segments for each test case results = [] for n, m, r, c in test_cases: # As long as we have more than one row or one column, we need at least 2 segments: # one horizontal and one vertical. # The only case we can traverse all points with just one segment is if we either have only one row or one column. if n == 1 or m == 1: results.append(1) else: results.append(2) return results"},{"question":"You are given a grid of size n times n consisting of \'.\' (empty cell) and \'*\' (obstacle cell). You need to find the number of ways to reach from the top-left corner (1, 1) to the bottom-right corner (n, n) of the grid. In one step, you can move either one cell to the right or one cell downwards. You cannot move to a cell that contains an obstacle \'*\'. The first line contains a single integer n (1 le n le 1000) — the size of the grid. The next n lines contain n characters each without spaces. The j-th character in the i-th line represents the cell at (i,j). Each character is given as either \'.\' representing an empty cell, or \'*\' representing an obstacle cell. Print one integer: the number of ways to reach the bottom-right corner from the top-left corner of the grid. If there are no ways, print 0. Examples: Input: 3 ..* .*. ... Output: 2 Input: 4 .... .*.. ..*. .... Output: 4","solution":"def count_paths(grid): n = len(grid) if grid[0][0] == \'*\' or grid[n-1][n-1] == \'*\': return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == \'*\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1] # Example usage grid1 = [ [\'.\', \'.\', \'*\'], [\'*\', \'.\', \'.\'], [\'.\', \'.\', \'.\'] ] print(count_paths(grid1)) # Output: 2 grid2 = [ [\'.\', \'.\', \'.\', \'.\'], [\'.\', \'*\', \'.\', \'.\'], [\'.\', \'.\', \'*\', \'.\'], [\'.\', \'.\', \'.\', \'.\'] ] print(count_paths(grid2)) # Output: 4"},{"question":"In a city, there is a complex subway system represented as a directed graph, where each station is a node and each train route is a directed edge between nodes. Each train route has a specific time duration associated with it. Given this directed graph with n stations and m train routes, your task is to determine the shortest possible travel time from the starting station s to the destination station t. If there is no valid path from s to t, the output should be -1. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) - the number of stations and train routes, respectively. - The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) indicating a directed train route from station u to station v with a travel time of w. - The final line contains two integers s and t (1 ≤ s, t ≤ n) - the starting and destination stations. Output: - Output a single integer representing the shortest travel time from station s to station t. If there is no path from s to t, output -1. Example: Input: 5 7 1 2 3 1 3 10 2 3 1 2 4 2 3 4 6 4 5 1 3 5 2 1 5 Output: 10 Explanation: The shortest path from station 1 to station 5 is through the sequence 1 -> 2 -> 4 -> 5, with a total travel time of 3 + 2 + 1 = 6.","solution":"import heapq def shortest_travel_time(n, m, routes, s, t): Determines the shortest travel time from station s to station t. Parameters: n (int): Number of stations. m (int): Number of train routes. routes (list): List of tuples where each tuple is (u, v, w) indicating a train route from u to v with a travel time of w. s (int): Starting station. t (int): Destination station. Returns: int: Shortest travel time from s to t, or -1 if there is no valid path. # Initialize adjacency list graph = {i: [] for i in range(1, n+1)} for u, v, w in routes: graph[u].append((v, w)) # Dijkstra\'s algorithm using a priority queue pq = [(0, s)] # (distance, node) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[s] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_node == t: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 if distances[t] == float(\'inf\') else distances[t]"},{"question":"You are given a string consisting of lowercase English letters and a dictionary of words. A word break problem is defined as follows: if the string can be segmented into space-separated words in such a way that each word is in the dictionary, then it is a valid segmentation. For example, the string `\\"applepenapple\\"` can be segmented into `\\"apple pen apple\\"` if the dictionary contains `\\"apple\\"` and `\\"pen\\"`. Write a function to determine if a given string can be segmented into a sequence of one or more dictionary words. # Input: - The first line contains the string `s` (1 ≤ |s| ≤ 300), the string to be checked. - The second line contains an integer `n` (1 ≤ n ≤ 100), the number of words in the dictionary. - The next `n` lines each contain a single word from the dictionary, consisting of lowercase English letters. The length of each dictionary word is between 1 and 20. # Output: - Print `\\"YES\\"` if the given string can be segmented into one or more dictionary words. - Print `\\"NO\\"` otherwise. # Example: Input: ``` applepenapple 3 apple pen pine ``` Output: ``` YES ``` Explanation: The string `\\"applepenapple\\"` can be segmented as `\\"apple pen apple\\"`. Input: ``` catsandog 5 cats dog sand and cat ``` Output: ``` NO ``` Explanation: The string `\\"catsandog\\"` cannot be segmented into a sequence of dictionary words. `sandog` is not in the dictionary. # Notes: You can assume all input strings contain only lowercase English letters.","solution":"def word_break(s, word_dict): Determine if the string s can be segmented into a sequence of one or more words from word_dict. word_set = set(word_dict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return \\"YES\\" if dp[len(s)] else \\"NO\\""},{"question":"A café is organizing a game event and they want to make sure everything runs smoothly. There are \'n\' players who will be playing a game and they have planned \'m\' rounds for this game. However, to ensure fair play, each player should play exactly once in each round and no player should play against themselves. The rounds are structured such that each round consists of pairs of players facing off against each other. The café has asked for your help to determine the matchups for each round. The players are numbered from 1 to n. Given the number of players \'n\' and the number of rounds \'m\', output the matchups for each round. For each round, output the pairs of players such that every player plays exactly once per round and no player faces themselves. If there are multiple solutions, any valid set of matchups is acceptable. # Input - The first line contains two integers \'n\' (2 ≤ n ≤ 50, n is even) and \'m\' (1 ≤ m ≤ 100), representing the number of players and the number of rounds respectively. # Output - For each round, output the pairs of players for that round. Each round\'s matchups should be on a single line with pairs formatted as `(a,b)` where \'a\' and \'b\' are player numbers. - There should be no empty lines between outputs of consecutive rounds. # Example Input ``` 4 2 ``` Output ``` (1,2) (3,4) (1,3) (2,4) ``` Input ``` 6 3 ``` Output ``` (1,2) (3,4) (5,6) (1,3) (2,5) (4,6) (1,4) (2,6) (3,5) ```","solution":"def generate_matchups(n, m): Generates matchups for \'n\' players across \'m\' rounds such that: - Each player participates exactly once per round. - No player faces themselves. Args: n (int): number of players (even number between 2 and 50). m (int): number of rounds (between 1 and 100). Returns: list: A list of \'m\' rounds where each round contains pairs of players as tuples. matchups = [] players = list(range(1, n + 1)) for round_num in range(m): round_pairs = [] for i in range(n // 2): first_player = players[i] second_player = players[(i + round_num) % (n // 2) + n // 2] round_pairs.append((first_player, second_player)) matchups.append(round_pairs) return matchups"},{"question":"You are developing a flight scheduling program for an airline company. There are n direct flights available, each connecting two different cities. The company wants to schedule additional direct flights such that there are no cities left isolated. A city is considered isolated if it cannot be reached, directly or indirectly, from any other city. For each test case, determine the minimum number of additional direct flights required to ensure no city is left isolated. Each test consists of multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). The description of the test cases follows. The first line of each test case contains two integers n and m (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 2·10^4) where n is the number of cities and m is the number of direct flights initially available. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a direct flight between city u and city v. It is guaranteed that there are no duplicate flights. Output one integer for each test case, the minimum number of additional direct flights required. Example: Input: 2 6 4 1 2 2 3 4 5 5 6 5 5 1 2 2 3 3 4 4 5 5 1 Output: 1 0 Explanation: In the first test case, cities can be divided into two isolated groups: {1, 2, 3} and {4, 5, 6}. One additional flight is required to connect these groups, for instance between cities 3 and 4. In the second test case, all cities are already connected. No additional flights are required.","solution":"from collections import defaultdict def dfs(node, visited, adj_list): stack = [node] while stack: current = stack.pop() for neighbor in adj_list[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) def count_isolated_groups(n, edges): adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = set() num_groups = 0 for node in range(1, n + 1): if node not in visited: visited.add(node) dfs(node, visited, adj_list) num_groups += 1 # Minimum additional direct flights needed is (num_groups - 1) return num_groups - 1 def minimum_additional_flights(test_cases): results = [] for case in test_cases: n, m, edges = case results.append(count_isolated_groups(n, edges)) return results"},{"question":"A company organizes a coding competition with `m` participants. Each participant has one question to solve. The time each participant takes to solve the question is recorded. At the end of the competition, the organizer wants to find out how many participants took more time than a certain threshold `T`. The first line of input contains two integers `m` and `T` (1 ≤ m ≤ 100, 1 ≤ T ≤ 1000), where `m` denotes the number of participants and `T` is the threshold time in minutes. The next line contains `m` integers separated by spaces representing the time taken by each participant. Your task is to write a program that determines the number of participants who took more time than the threshold `T`. **Input:** ``` m T t1 t2 t3 ... tm ``` - m — number of participants (1 ≤ m ≤ 100) - T — threshold time (1 ≤ T ≤ 1000) - ti — time taken by the i-th participant (1 ≤ ti ≤ 1000) **Output:** Print a single integer — the number of participants who took more time than `T`. **Example:** **Input:** ``` 5 30 10 20 35 50 25 ``` **Output:** ``` 2 ``` In this example, there are 5 participants and the threshold time is 30 minutes. Participants 3 and 4 took more than 30 minutes, hence the output is `2`.","solution":"def count_participants_above_threshold(m, T, times): Returns the number of participants who took more time than the threshold T. :param m: Number of participants :param T: Threshold time :param times: List of times taken by each participant :return: Number of participants who took more time than T count = 0 for time in times: if time > T: count += 1 return count # Example usage: # m, T = 5, 30 # times = [10, 20, 35, 50, 25] # print(count_participants_above_threshold(m, T, times)) # Output: 2"},{"question":"Bulldozer Game: Tommy and Jerry discovered a new game named \\"Bulldozer Wars.\\" In this game, there is a rectangular grid composed of cells with dimensions `m x n`. Tommy places a bulldozer of size `k x l` on the grid at position (1,1), and Jerry places a bulldozer of size `p x q` on the grid at some position, ensuring there\'s no overlap with Tommy\'s bulldozer. A bulldozer can move right or down by one cell per move. The objective of the game is for Tommy\'s bulldozer to reach the bottom-right corner of the grid (m, n) in the minimum number of moves while avoiding overlaps with Jerry\'s bulldozer. The initial input consists of integers m, n, k, l, p, q, a, b: - m, n (1 ≤ m, n ≤ 500) are the dimensions of the grid. - k, l (1 ≤ k, l < m, n) are the dimensions of Tommy\'s bulldozer. - p, q (1 ≤ p, q < m, n) are the dimensions of Jerry\'s bulldozer. - a, b (1 ≤ a < m, 1 ≤ b < n) are the top-left coordinates of Jerry\'s bulldozer. Determine whether Tommy\'s bulldozer can reach the bottom-right corner of the grid, and if so, the minimum number of moves required. Input: - The first line contains eight integers: m, n, k, l, p, q, a, b. Output: - Print a single integer representing the minimum number of moves required for Tommy\'s bulldozer to reach the bottom-right corner of the grid, while avoiding Jerry\'s bulldozer. If it\'s not possible, print -1. Sample Input: 10 10 2 2 2 2 3 4 Sample Output: 16 Explanation: After placing both bulldozers on the grid, Tommy\'s bulldozer needs to navigate to the bottom-right corner (10,10) in a way that avoids overlapping the region occupied by Jerry\'s bulldozer. The number of moves required is calculated based on optimal pathfinding while avoiding obstacles.","solution":"from collections import deque def min_moves_to_reach_bottom_right(m, n, k, l, p, q, a, b): # The grid will be represented by a 2D list for marking visited cells. grid = [[0]*n for _ in range(m)] # Mark cells occupied by Jerry\'s bulldozer as obstacles for i in range(a, a + p): for j in range(b, b + q): grid[i][j] = -1 # Directions for moving right and down directions = [(1, 0), (0, 1)] # BFS for finding the shortest path queue = deque([(0, 0, 0)]) # (row, col, moves) visited = set([(0, 0)]) while queue: row, col, moves = queue.popleft() # Check if the current position is the bottom-right corner if row == m - k and col == n - l: return moves # Explore the next positions (down, right) for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row <= m - k and 0 <= new_col <= n - l and (new_row, new_col) not in visited: # Check if the placed Tommy\'s bulldozer fits in the new position avoiding Jerry\'s bulldozer can_place = True for i in range(new_row, new_row + k): for j in range(new_col, new_col + l): if grid[i][j] == -1: can_place = False break if not can_place: break if can_place: queue.append((new_row, new_col, moves + 1)) visited.add((new_row, new_col)) return -1"},{"question":"Junaid is planning a botanical tour across a garden. The garden is represented as an undirected graph with n nodes (plants) connected by m edges (garden paths). Each edge in the garden has a unique positive integer weight associated with it, representing the different lengths of paths between plants. Junaid wants to explore the garden starting from a specific plant s and visit as many plants as possible. Since Junaid loves beautiful views, he wants to avoid retracing any path he has already walked on. He may use each edge at most once. Additionally, Junaid wants to minimize the total distance he travels while visiting the maximum number of distinct plants. Help Junaid determine the maximum number of plants he can visit and the minimum total distance he needs to travel to visit them. The input begins with two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 1000), representing the number of plants and the number of edges, respectively. The following m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000), where u and v are the nodes connected by an undirected edge, and w is the weight of the edge. The last line contains a single integer s (1 ≤ s ≤ n), representing the starting plant. Output two integers: the maximum number of plants Junaid can visit and the minimum total distance to visit them. Example: Input: 4 4 1 2 1 1 3 4 2 3 2 3 4 3 1 Output: 4 6 Explanation: Junaid can visit all 4 plants starting from plant 1. The paths he would take are: - 1 to 2 (distance 1) - 2 to 3 (distance 2) - 3 to 4 (distance 3) Total distance traveled is 1 + 2 + 3 = 6. This is the minimal distance to visit all plants.","solution":"import heapq def botanical_tour(n, m, edges, s): Returns the maximum number of plants Junaid can visit and the minimum total distance. n: number of plants (nodes) m: number of edges (paths) edges: list of tuples (u, v, w) where u and v are nodes and w is the weight of the edge s: starting plant graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((w, v)) graph[v].append((w, u)) # Prim\'s algorithm for Minimum Spanning Tree (MST) min_heap = [(0, s)] visited = [False] * (n + 1) max_plants_visited = 0 min_total_distance = 0 while min_heap: weight, node = heapq.heappop(min_heap) if visited[node]: continue visited[node] = True max_plants_visited += 1 min_total_distance += weight for edge_weight, neighbor in graph[node]: if not visited[neighbor]: heapq.heappush(min_heap, (edge_weight, neighbor)) return max_plants_visited, min_total_distance"},{"question":"In a distant galaxy, there are two planets connected by a hyperspace tunnel. However, due to some malfunction, the tunnel can transfer only a limited number of entities at a time. A group of astronauts needs to transport cargo from the first planet to the second one. The cargo is packed in boxes, and each box has a specific weight. The tunnel has a weight capacity limit, meaning the sum of the weights of all the boxes in one trip cannot exceed this limit. The astronauts want to minimize the number of trips to transport all the boxes to the second planet. Write a program that determines the minimum number of trips needed to transport all the boxes. The first line contains two positive integers n and c (1 leq n leq 100000, 1 leq c leq 10^9) — the number of boxes and the weight capacity of the tunnel, respectively. The second line contains n positive integers w1, w2, ..., wn (1 leq wi leq 10^9), where wi is the weight of the i-th box. Print a single integer — the minimum number of trips required to transport all the boxes. In the first sample, one possible way is to take the first two boxes in the first trip and the third box in the second trip. In the second sample, one possible way is to take the first and third boxes in the first trip and the second box in the second trip. Example input: ``` 3 10 4 8 4 ``` Example output: ``` 2 ``` Example input: ``` 4 15 10 8 5 5 ``` Example output: ``` 2 ```","solution":"def min_trips(n, c, weights): Returns the minimum number of trips required to transport all the boxes. Arguments: n -- the number of boxes c -- the weight capacity of the tunnel weights -- a list of integers representing the weight of each box Returns: The minimum number of trips required to transport all the boxes. weights.sort(reverse=True) trips = 0 start = 0 end = n - 1 while start <= end: if weights[start] + weights[end] <= c: end -= 1 start += 1 trips += 1 return trips"},{"question":"You are given a list of integers. You want to reorder these integers so that the difference between any two adjacent integers in the resulting list is minimized while maintaining the overall order of integers. Write a function that takes a list of integers and returns this minimized list. Function Signature: ```python def minimize_adjacent_difference(arr: List[int]) -> List[int]: ``` # Input Format: - The input is a list of integers `arr`, with length `n` (1 leq n leq 10^5). - Each integer in the list `arr` is in the range -10^9 leq arr[i] leq 10^9. # Output Format: - The output should be a list of ordered integers from `arr` such that the difference between any two adjacent integers is minimized. # Example: **Input:** ```python arr = [5, 2, 9, 1, 6] ``` **Output:** ```python [1, 2, 5, 6, 9] ``` # Explanation: You should reorder the list such that the difference between any two adjacent integers is minimized. The integers have been arranged in ascending order to achieve this. # Constraints: 1. The length of the list can be as large as 10^5. 2. The integers can be as small as -10^9 and as large as 10^9. # Note: - Sorting the list satisfies the condition of minimizing the difference between any two adjacent integers. - Pay attention to the range and size of the input array to ensure your solution performs efficiently.","solution":"def minimize_adjacent_difference(arr): Reorder integers in the list such that the difference between any two adjacent integers is minimized. This can be achieved by simply sorting the list in ascending order. return sorted(arr)"},{"question":"In a bustling city, there are n houses lined up on a single street. A car traveling on this street can be rented to visit some or all of these houses. The car can make at most k stops. Each stop must be at a distinct house, and the car can only travel forward in one direction (either from the first house to the last house or from the last house to the first house). Each house has a certain value associated with it, indicating the importance or need for a visit to that house. The goal is to determine the maximum total value you can collect by visiting up to k houses. Formally, given an array of n integers where each integer represents the value of a house, you need to determine the maximum sum of values you can collect by making at most k stops on the street. The stops must be chosen such that you move in only one direction. Write a function to solve the problem. Your function should take the following inputs: - An integer n, representing the number of houses. - An integer k, representing the maximum number of stops the car can make. - An array of n integers, where the i-th integer represents the value of the i-th house. The output should be a single integer, representing the maximum sum of values that can be collected. Input: The first line contains two integers n and k (1 <= n <= 100000, 0 <= k <= n). The second line contains n integers, where the i-th integer indicates the value of the i-th house (-1000 <= value_i <= 1000). Output: Print one integer — the maximum sum of values collected by visiting up to k houses in a single direction. Example: Input: 7 3 1 2 3 4 5 6 7 Output: 18 Explanation: In the first example, the car can make at most 3 stops. By visiting the last three houses (5, 6, 7), the maximum sum is 18.","solution":"def max_sum_of_houses(n, k, values): if k == 0: return 0 max_sum = float(\'-inf\') # Try every sub-array of length up to `k` from the start for i in range(min(k, n)): current_sum = 0 for j in range(i + 1): current_sum += values[j] max_sum = max(max_sum, current_sum) # Try every sub-array of length up to `k` from the end for i in range(min(k, n)): current_sum = 0 for j in range(i + 1): current_sum += values[n - 1 - j] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are managing a system that tracks access times of users on a website. For monitoring and optimization, you need to analyze patterns of user access over time. You are provided with an array representing the logs of when users accessed the website. Each element in the array represents the timestamp in seconds when a user accessed the site. Your task is to process this array and return the longest period (in seconds) during which the website did not receive any access. Given an array of integers `timestamps` where each `timestamp[i]` represents a moment when a user accessed the website, write a function that returns the longest period of inactivity: ```python def longest_inactivity_period(timestamps): :param timestamps: List[int] :return: int pass ``` # Input Format - The input is a single list of integers `timestamps` where `timestamps[i]` is the timestamp at which a user accessed the website. - The list is guaranteed to contain at least two elements, and all elements are distinct. - Timestamps are given in ascending order. # Output Format - The function should return an integer representing the longest period of inactivity in seconds. # Constraints - The number of elements in the timestamps array will be at most 10^6. - Each element in the timestamps array will be a non-negative integer and represent seconds in UNIX time. # Example ```python timestamps = [10, 20, 50, 60, 110] print(longest_inactivity_period(timestamps)) # Output: 40 ``` In the example above, the longest inactivity period is between timestamp 60 and 110, which is 50 seconds.","solution":"def longest_inactivity_period(timestamps): Returns the longest period of inactivity in seconds given a list of sorted timestamps. :param timestamps: List[int] :return: int longest_period = 0 for i in range(1, len(timestamps)): inactivity_period = timestamps[i] - timestamps[i - 1] if inactivity_period > longest_period: longest_period = inactivity_period return longest_period"},{"question":"A scientist has designed a new type of machine with `n` identical devices. Each device can be in one of three states, represented by 0, 1, and 2. Initially, all devices are in state 0. Each second, the state of each device can change according to the following rules: 1. If a device is in state 0, it has a 50% chance to transition to state 1. 2. If a device is in state 1, it has a 50% chance to transition to state 2. 3. If a device is in state 2, it remains in state 2. Given the number of devices `n` and the number of seconds `t`, calculate the expected number of devices that will be in state 2 after `t` seconds. # Input - The first line contains two integers `n` and `t` (1 leq n leq 10^5, 1 leq t leq 100). # Output - Print a single floating-point number representing the expected number of devices in state 2 after `t` seconds. The answer will be considered correct if its absolute or relative error does not exceed `10^{-6}`. # Example ``` Input: 10 3 Output: 1.25 ``` # Explanation Initially, all 10 devices are in state 0. After the first second, each device has a 50% chance of transitioning to state 1, so on average, 5 devices will be in state 1. After the second second, each device that was in state 1 has a 50% chance of transitioning to state 2. Since on average 5 devices were in state 1 after the first second, on average 2.5 devices will transition to state 2. After the third second, the devices in state 1 (on average 2.5 devices) have another 50% chance of transitioning to state 2. Therefore, we add another 1.25 devices to the devices already in state 2, leading to a total expected number of 1.25 devices in state 2.","solution":"def expected_devices_in_state_2(n, t): Calculate the expected number of devices in state 2 after t seconds. Args: n (int): The number of devices. t (int): The number of seconds. Returns: float: The expected number of devices in state 2. expected = n / (2 ** t) # after t seconds, the probability of each device being in state 2 is (1/2^t) return expected"},{"question":"Alden owns a series of n restaurants arranged in a straight line along a busy street. Each restaurant has a certain number of loyal customers who visit it regularly. The profitability of a restaurant chain depends on forming contiguous subchains of restaurants with high customer counts, but only if the subchain consists of an odd number of total customers. Alden wants to determine the maximum possible number of such profitable subchains he can form. Each restaurant can be included in at most one subchain, and if a restaurant becomes part of a subchain, all its loyal customers are considered for that subchain. Determine the maximum possible number of profitable subchains that Alden can form. The first line contains a single positive integer n (1 ≤ n ≤ 10^5) — the number of restaurants. The second line contains a sequence of integers c1, c2, ..., cn (1 ≤ ci ≤ 10^6) — the number of loyal customers of each restaurant. Print the maximum number of profitable subchains Alden can form. In the first example, Alden can form 2 profitable subchains. For example, the first subchain can consist of the first and the second restaurants (totaling 3 customers), and the second subchain can consist of the fourth and the fifth restaurants (totaling 9 customers). The third restaurant remains unused. In the second example, it is not possible to form a single profitable subchain with an odd number of customers. In the third example, Alden can form one profitable subchain using the second, the third, and the fourth restaurants. The size of this subchain is 5+4+7=16 (which is even).","solution":"def max_profitable_subchains(n, customers): count = 0 for customer in customers: if customer % 2 == 1: count += 1 return count"},{"question":"You are given two integers `a` and `b` which represent the dimensions of a rectangle. You need to find the smallest square tile size that you can use to completely cover the given rectangle without any overlapping or cutting of the tiles. Each tile should be a square and all tiles must have the same size. The first line of input contains two integers `a` and `b` (1 ≤ a, b ≤ 1000) — the dimensions of the rectangle. Print a single integer, denoting the side length of the smallest square tile that can be used to cover the entire rectangle. For example, if the rectangle dimensions are 4 and 6, the smallest square tile that can cover the rectangle is of size 2. Similarly, if the rectangle dimensions are 5 and 7, the smallest square tile that can cover the rectangle is of size 1.","solution":"def smallest_square_tile_size(a, b): Returns the side length of the smallest square tile that can be used to cover the entire rectangle of dimensions a and b. def gcd(x, y): # helper function to calculate gcd while y: x, y = y, x % y return x return gcd(a, b)"},{"question":"You are given a sequence of integers where each number represents the height of a person. Your task is to form teams such that each team consists of three people with different heights. The goal is to count how many unique teams can be formed from the given sequence. Two teams are considered different if at least one person is different. Implement a function to determine the total number of unique teams. The first line of input contains an integer t (1 leq t leq 10^5) — the number of test cases. Each test case consists of two lines. The first line of each test case contains an integer n (3 leq n leq 10^5) — the number of people. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^5) — the heights of the people. For each test case, output a single integer — the number of unique teams that can be formed. Note: - Two teams are considered unique if they consist of different sets of individuals. - You can assume the sum of n over all test cases does not exceed 10^5. Example: Input: 3 5 1 2 3 4 5 4 1 1 2 2 6 1 2 3 2 1 3 Output: 10 0 8","solution":"from itertools import combinations from collections import Counter def count_unique_teams(h_list): count = 0 height_freq = Counter(h_list) unique_heights = [height for height, freq in height_freq.items() if freq >= 1] for team in combinations(unique_heights, 3): count += height_freq[team[0]] * height_freq[team[1]] * height_freq[team[2]] return count def solve(test_cases): results = [] for n, h_list in test_cases: result = count_unique_teams(h_list) results.append(result) return results"},{"question":"A sequence of integers is called **interesting** if each of its elements is divisible by its index (the position in the sequence, 1-based index). You are given an integer `n`. Your task is to construct an interesting sequence of length `n` and print it. If there is more than one interesting sequence of length `n`, print any of them. Note that some solutions may not exist for certain values of `n`, in that case, return `-1`. The first line of the input contains one integer `n` (1 le n le 10^5) — the length of the interesting sequence you need to construct. In the first and only line of the output print `n` integers — the desired interesting sequence. If it is impossible to construct such a sequence, print `-1` instead. # Example Input: ``` 5 ``` Output: ``` 1 2 6 12 20 ``` Input: ``` 3 ``` Output: ``` 1 2 9 ```","solution":"def interesting_sequence(n): Generates an interesting sequence of length n if possible. An interesting sequence is defined as each element being divisible by its 1-based index. If it is not possible to construct such a sequence, returns -1. if n <= 0: return -1 sequence = [] for i in range(1, n + 1): sequence.append(i * (i + 1) // 2) return sequence"},{"question":"In a remote village, there is a special type of tree that grows along a straight path. The village elder loves this tree and has decided to protect certain segments of the path using magic barriers. Each magic barrier will cover a specific segment of the path. After each magic barrier is placed, you need to determine the total length of the path that is protected by the barriers. If multiple barriers overlap, the overlapping part should be counted only once. The first line contains a single integer n (1 ≤ n ≤ 200,000) — the number of magic barriers. The i-th of the next n lines contains two integers li and ri (1 ≤ li < ri ≤ 1,000,000,000) — the coordinates of the left and the right endpoints of the i-th barrier. The barriers are added in the order they are listed. Print n integers — the total length of the path that is protected by barriers after each barrier is added. # Example: **Input:** ``` 3 1 5 3 6 6 10 ``` **Output:** ``` 4 5 9 ``` **Explanation:** - After the first barrier is added, the protected length is from 1 to 5, so the length is 4. - After the second barrier is added, the protected length is from 1 to 6, so the length is 5. - After the third barrier is added, the protected length is from 1 to 10, so the length is 9.","solution":"def calculate_protected_lengths(n, segments): Returns a list of integers representing the total length of the protected path after adding each barrier. Parameters: - n (int): The number of magic barriers. - segments (List[Tuple[int, int]]): The list of tuples where each tuple contains two integers representing the left and right endpoints of the i-th barrier. Returns: - List[int]: A list of integers with the total length of the protected path after each barrier is added. if not segments: return [] # Sorted list of all seen segments sorted_segments = [] total_protected_lengths = [] for l, r in segments: sorted_segments.append((l, r)) sorted_segments.sort() # Merge overlapping segments and calculate the total protected length merged_segments = [] current_start, current_end = sorted_segments[0] for i in range(1, len(sorted_segments)): seg_start, seg_end = sorted_segments[i] if seg_start <= current_end: # Overlapping segments, merge them current_end = max(current_end, seg_end) else: # Non-overlapping segment, add current to merged list, # and start a new current segment merged_segments.append((current_start, current_end)) current_start, current_end = seg_start, seg_end # Add the last current segment to merged list merged_segments.append((current_start, current_end)) # Calculate the total protected length protected_length = sum(end - start for start, end in merged_segments) total_protected_lengths.append(protected_length) return total_protected_lengths"},{"question":"You are given a list of integers and your task is to find the longest sublist where the sum of elements is less than or equal to a given value. Your solution should be efficient and handle large inputs within reasonable time constraints. The first line contains two integers n and k (1 ≤ n ≤ 200000, 1 ≤ k ≤ 10^9) — the number of elements in the list and the maximum sum allowed for the sublist. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the list. Print a single integer — the length of the longest sublist where the sum of elements is less than or equal to k. Example: Input: 8 15 1 2 3 4 5 6 7 8 Output: 5 In this example, the longest sublist where the sum of elements is less than or equal to 15 is [1, 2, 3, 4, 5], which has a length of 5.","solution":"def longest_sublist_with_max_sum(n, k, elements): Returns the length of the longest sublist where the sum of elements is less than or equal to k. left = 0 current_sum = 0 max_length = 0 for right in range(n): current_sum += elements[right] while current_sum > k: current_sum -= elements[left] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"In a distant galaxy, Zorg the space explorer is on a mission to collect rare minerals from different planets. Zorg has landed on a planet that has a straight, infinite runway with minerals scattered along it. Each mineral has a unique position indicated by its distance from Zorg\'s starting point (position 0). Zorg can carry up to a maximum of `k` kilos of minerals in his spacecraft. The minerals at different positions weigh differently, and Zorg needs to maximize the weight of the minerals he collects without exceeding the carrying capacity. Given the weighted positions of the minerals and the maximum capacity `k`, determine the maximum weight that Zorg can carry back to his spacecraft. The first line contains two integers `n` and `k` (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the number of minerals and the maximum carrying capacity in kilos. The next `n` lines each contain two integers `pi` and `wi` (1 ≤ pi ≤ 10^9, 1 ≤ wi ≤ 10^4) — the position and weight of the `i-th` mineral. Print a single integer — the maximum weight of minerals that Zorg can collect without exceeding the maximum carrying capacity `k`. **Input:** ``` 4 10 1 3 2 2 5 7 6 8 ``` **Output:** ``` 10 ```","solution":"def maximize_mineral_weight(n, k, minerals): Determine the maximum weight of minerals that Zorg can carry back without exceeding the carrying capacity. Parameters: n (int): Number of minerals. k (int): Maximum carrying capacity in kilos. minerals (List[Tuple[int, int]]): List of tuples, each containing the position and weight of each mineral. Returns: int: The maximum weight of minerals that can be carried within the given capacity. # Sort minerals by weight in descending order minerals.sort(key=lambda x: x[1], reverse=True) total_weight = 0 for _, weight in minerals: if k - weight >= 0: total_weight += weight k -= weight else: total_weight += k break return total_weight"},{"question":"In Quineville, there are two types of magical crystals: the \\"Producer\\" crystals and the \\"Consumer\\" crystals. Each Producer crystal can generate magical power and distribute it to multiple Consumer crystals. The power is distributed in such a way that each Consumer crystal receives a specific amount of power from the Producer crystal. However, for balanced operations, every Producer crystal must distribute its power evenly among all Consumer crystals that it is connected to. You are given a system of crystals where you know the number of Producer and Consumer crystals, as well as the connections between them and the power each connection provides. You need to determine the total power received by each Consumer crystal. The input format is as follows: - The first line contains two integers: the number of Producer crystals, `p` (1 le p le 1000) and the number of Consumer crystals, `c` (1 le c le 1000). - The next `p` lines describe each Producer crystal. Each line starts with an integer `x` (1 le x le c) denoting the number of Consumer crystals it is connected to, followed by `x` pairs of integers. Each pair consists of an integer `ci` (1 le ci le c) representing the Consumer crystal index and `wi` (1 le wi le 1000) representing the power distributed to that Consumer crystal. Output `c` integers - the total power received by each Consumer crystal. # Example Input ``` 2 3 2 1 30 2 40 3 2 20 3 10 1 50 ``` Output ``` 80 60 10 ``` Explanation - Producer 1 connects to Consumer 1 and Consumer 2 providing 30 and 40 power respectively. - Producer 2 connects to Consumer 2, Consumer 3, and Consumer 1 providing 20, 10, and 50 power respectively. Therefore, Consumer 1 receives a total of 30 (from Producer 1) + 50 (from Producer 2) = 80, Consumer 2 receives 40 (from Producer 1) + 20 (from Producer 2) = 60, and Consumer 3 receives 10 power from Producer 2.","solution":"def calculate_total_power(p, c, producer_info): # Initialize a list to store the total power received by each Consumer crystal consumer_power = [0] * c for info in producer_info: x = info[0] # Number of Consumer crystals this Producer is connected to connections = info[1:] # Remaining part contains the (ci, wi) pairs for i in range(x): ci = connections[2*i] - 1 # Consumer index (making it zero-indexed) wi = connections[2*i + 1] # Power provided to this Consumer consumer_power[ci] += wi # Accumulate the power return consumer_power"},{"question":"You are given a list of cities and the distances between each pair of cities. Your task is to find the shortest path that visits each city exactly once and returns to the starting city. Input: 1. The first line of input contains a single integer n (2 ≤ n ≤ 10), representing the number of cities. 2. The next n lines contain n integers each, where the j-th integer in the i-th line represents the distance between city i and city j (0 ≤ distance ≤ 1000). Output: 1. Print the length of the shortest path that visits every city exactly once and returns to the starting city. Note: - This is a classic Traveling Salesman Problem (TSP), and given the constraints, it can be solved by considering all permutations of the cities. Example: Input: 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output: 80 Explanation: One of the shortest paths is 0 -> 1 -> 3 -> 2 -> 0 with a total distance of 80.","solution":"from itertools import permutations def tsp(n, distances): def calculate_distance(path): distance = 0 for i in range(len(path) - 1): distance += distances[path[i]][path[i + 1]] distance += distances[path[-1]][path[0]] return distance cities = list(range(n)) min_distance = float(\'inf\') for perm in permutations(cities): current_distance = calculate_distance(perm) if current_distance < min_distance: min_distance = current_distance return min_distance"},{"question":"You are asked to organize a friendly competition for programmers. Each participant starts with a sequence of numbers and is allowed to perform a specific operation to transform this sequence into another target sequence. The operation they can perform is to take any two numbers from the sequence and replace them with their sum and their absolute difference. Given the initial sequence and the target sequence, you need to determine if it is possible to transform the initial sequence into the target sequence using the allowed operation any number of times. The first line of input contains a single integer n (1 leq n leq 50) which represents the number of elements in the sequence. The second line contains n integers separated by spaces a_1, a_2, ldots, a_n - the initial sequence (1 leq a_i leq 1000). The third line contains n integers separated by spaces b_1, b_2, ldots, b_n - the target sequence (1 leq b_i leq 1000). Output \\"Yes\\" if it is possible to transform the initial sequence into the target sequence using the allowed operation, otherwise output \\"No\\" (quotes for clarity). Example: Input: 4 5 1 3 7 8 4 1 3 Output: Yes Explanation: One possible sequence of operations: 1. Take (5, 1): Replace with (6, 4) -> [6, 4, 3, 7] 2. Take (6, 4): Replace with (10, 2) -> [10, 2, 3, 7] 3. Take (10, 2): Replace with (12, 8) -> [12, 8, 3, 7] 4. Take (12, 7): Replace with (19, 5) -> [19, 5, 8, 3] 5. Take (19, 5): Replace with (24, 14) -> [24, 14, 8, 3] 6. Take (14, 3): Replace with (17, 11) -> [24, 17, 11, 8] 7. Take (17, 8): Replace with (25, 9) -> [25, 24, 11, 8] 8. Take (25, 24): Replace with (49, 1) -> [49, 1, 11, 8] 9. Take (49, 8): Replace with (57, 41) -> [57, 41, 11, 1] 10. Take (57, 41): Replace with (98, 16) -> [98, 16, 11, 1] 11. Take (98, 1): Replace with (99, 97) -> [99, 97, 11, 16] ... (and further operations to get the sequence [8, 4, 1, 3]) In the provided example, the exact operation sequence was not detailed, but it explored a trail showing that continued use of the operation can lead from the initial sequence to the target sequence.","solution":"def can_transform_sequence(n, initial, target): Determines if it is possible to transform the initial sequence into the target sequence using the allowed operation any number of times. Parameters: n (int): The number of elements in the sequence. initial (list): The initial sequence of integers. target (list): The target sequence of integers. Returns: str: \\"Yes\\" if transformation is possible, \\"No\\" otherwise. def gcd(x, y): while y: x, y = y, x % y return x def reduce_to_gcd(seq): current_gcd = seq[0] for num in seq[1:]: current_gcd = gcd(current_gcd, num) return current_gcd initial_gcd = reduce_to_gcd(initial) target_gcd = reduce_to_gcd(target) if initial_gcd == target_gcd: return \\"Yes\\" return \\"No\\""},{"question":"You are tasked with simulating a simplified version of a popular game, Rock-Paper-Scissors. This game is played by two players, each of whom simultaneously chooses one of the three options: Rock, Paper, or Scissors. The rules are as follows: - Rock beats Scissors. - Scissors beats Paper. - Paper beats Rock. - If both players choose the same option, the result is a draw. Your task is to determine the winner of a single round of Rock-Paper-Scissors based on the choices of the two players. The input consists of a single line containing two space-separated strings, each of which can be \\"Rock\\", \\"Paper\\", or \\"Scissors\\". The first string represents the choice of Player 1, and the second string represents the choice of Player 2. Output \\"Player 1 wins\\" if the first player\'s choice beats the second player\'s choice, \\"Player 2 wins\\" if the second player\'s choice beats the first player\'s choice, or \\"Draw\\" if both players choose the same option. # Example **Input:** ``` Rock Scissors ``` **Output:** ``` Player 1 wins ``` **Input:** ``` Paper Paper ``` **Output:** ``` Draw ``` **Input:** ``` Scissors Rock ``` **Output:** ``` Player 2 wins ``` You may assume that the input will always be one of the valid strings (\\"Rock\\", \\"Paper\\", \\"Scissors\\").","solution":"def rock_paper_scissors(player1, player2): Determines the winner of a rock-paper-scissors game. Parameters: player1 (str): choice of player 1 (\\"Rock\\", \\"Paper\\" or \\"Scissors\\") player2 (str): choice of player 2 (\\"Rock\\", \\"Paper\\" or \\"Scissors\\") Returns: str: \\"Player 1 wins\\", \\"Player 2 wins\\" or \\"Draw\\" # Define winning conditions winning_conditions = { (\'Rock\', \'Scissors\'): \'Player 1 wins\', (\'Scissors\', \'Paper\'): \'Player 1 wins\', (\'Paper\', \'Rock\'): \'Player 1 wins\', (\'Scissors\', \'Rock\'): \'Player 2 wins\', (\'Paper\', \'Scissors\'): \'Player 2 wins\', (\'Rock\', \'Paper\'): \'Player 2 wins\' } # Check for draw if player1 == player2: return \\"Draw\\" # Return result based on winning conditions return winning_conditions.get((player1, player2))"},{"question":"You are given a list of integers and a maximum allowable total sum. Your task is to split the list into the minimum number of sublists such that the sum of the integers in each sublist does not exceed the given maximum allowable total sum. The input consists of: - The first line contains two integers n and S (1 ≤ n ≤ 100,000, 1 ≤ S ≤ 10^9), where n is the number of integers in the list, and S is the maximum allowable total sum for each sublist. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ S) representing the list of integers. The output should be: - The minimum number of sublists. - Each of the following lines should contain the integers in one sublist. If there are multiple valid solutions, you can output any of them. # Example **Input:** ``` 6 10 2 7 1 4 3 8 ``` **Output:** ``` 3 2 7 1 4 3 8 ``` # Note - Each sublist should have a sum less than or equal to S. - The output sublists can be in any valid order, but their combined representation should satisfy the constraint of not exceeding S in any sublist. If multiple solutions exist, any valid solution will be accepted.","solution":"def split_into_sublists(n, S, integers): result = [] current_sublist = [] current_sum = 0 for num in integers: if current_sum + num > S: result.append(current_sublist) current_sublist = [num] current_sum = num else: current_sublist.append(num) current_sum += num if current_sublist: result.append(current_sublist) return result def number_of_sublists(n, S, integers): sublists = split_into_sublists(n, S, integers) return len(sublists), sublists"},{"question":"You are given a string consisting of lowercase Latin letters. The task is to count the number of pairs of positions (i, j) in the string such that the substring between these positions reverses to the same substring. Specifically, the substring from position i to j should be the same as the substring from position j to i in reverse order. The input consists of a single string s of length n (1 ≤ n ≤ 2000). The output should be a single integer, the number of such pairs (i, j). For example, if the input string is \\"ababa\\", the output should be 4 because there are pairs (1, 3), (2, 4), (3, 5) and (1, 5) whose substrings meet the criteria. Input: ``` s ``` Output: ``` an integer which is the number of pairs ```","solution":"def count_palindromic_substrings(s): Counts the number of pairs of positions (i, j) in the string s such that the substring between these positions reverses to the same substring. n = len(s) count = 0 # For every possible pair of indices (i, j) for i in range(n): for j in range(i, n): substring = s[i:j+1] if substring == substring[::-1]: count += 1 return count"},{"question":"Simona is preparing for her final computer science exam, and she is practicing problems on string manipulation. She comes across this problem: Simona has a string `s` consisting of `n` lowercase English letters. She wants to check if she can rearrange the letters in the string to form a palindrome. A string is called a palindrome if it reads the same backward as forward. Write a program that determines whether it is possible to rearrange the letters of the string `s` to form a palindrome. The first line of the input contains an integer `n` (1 ≤ n ≤ 100) - the length of the string `s`. The second line contains the string `s` consisting of `n` lowercase English letters. Print \\"YES\\" if it is possible to rearrange the letters to form a palindrome. Otherwise, print \\"NO\\". Example: Input: 6 aabbcc Output: YES Input: 7 aabcdde Output: NO Explanation: In the first example, the string \\"aabbcc\\" can be rearranged to form the palindrome \\"abcabc\\" or \\"cbacba\\", among others. In the second example, there is no way to rearrange \\"aabcdde\\" to form a palindrome.","solution":"def can_form_palindrome(n, s): Determines if the string s with length n can be rearranged to form a palindrome. Args: n: An integer representing the length of the string s. s: A string consisting of n lowercase English letters. Returns: \'YES\' if the string can be rearranged to form a palindrome, \'NO\' otherwise. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd count if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"Simon is a magician who specializes in card tricks. He has a special deck of cards that consists of n cards, each with a unique integer from 1 to n. Simon shuffles the deck in such a way that he can filter out cards based on certain properties in the sequence. For a given integer k (1 ≤ k ≤ n), he performs the following trick: 1. From the top of the shuffled deck, he counts k cards. 2. From these k cards, he removes the card with the highest number. 3. He then places the remaining k-1 cards back on the top of the deck in exactly the same order. Simon repeats this trick until there\'s only one card left in the deck. Given n and k, your task is to determine which card remains in the deck at the end. The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 1000). Print the number on the last remaining card in the deck after Simon has performed his trick until only one card is left. **Example:** Input: ``` 5 2 ``` Output: ``` 2 ``` Explanation: - Initially, the deck is [1, 2, 3, 4, 5]. - Simon counts the first 2 cards [1, 2] and removes the highest card (2), the deck now looks like [1, 3, 4, 5]. - Simon counts the first 2 cards [1, 3] and removes the highest card (3), the deck now looks like [1, 4, 5]. - Simon counts the first 2 cards [1, 4] and removes the highest card (4), the deck now looks like [1, 5]. - Simon counts the first 2 cards [1, 5] and removes the highest card (5), the deck now looks like [1]. - Only card 1 is left in the deck. - The process is repeated until there is only one card left.","solution":"def last_remaining_card(n, k): Returns the last remaining card after performing Simon\'s trick until one card is left. :param n: Integer, total number of cards. :param k: Integer, number of cards to count in each trick. :return: Integer, the number on the last remaining card. cards = list(range(1, n + 1)) while len(cards) > 1: top_k = cards[:k] # Take the top k cards highest_card = max(top_k) # Find the highest card cards.remove(highest_card) # Remove the highest card return cards[0]"},{"question":"Bob loves mountains and valleys. A sequence of integers is called a mountain if there is an index i such that the sequence strictly increases up to index i and then strictly decreases. The sequence is called a valley if there is an index i such that the sequence strictly decreases up to index i and then strictly increases. Given a sequence of integers, Bob wants to know whether it is a mountain, a valley, or neither. Input The first line contains an integer t (1 ≤ t ≤ 10), the number of test cases. For each test case, the first line contains an integer n (3 ≤ n ≤ 10^5), the length of the sequence. The next line contains n space-separated integers. Output For each test case, print \\"Mountain\\" if the sequence is a mountain, \\"Valley\\" if it is a valley, and \\"Neither\\" otherwise. Example Input: 3 5 1 3 5 4 2 4 6 4 2 5 3 3 2 1 Output: Mountain Valley Neither","solution":"def classify_sequences(t, test_cases): results = [] for case in test_cases: n, sequence = case is_mountain = False is_valley = False if n < 3: results.append(\\"Neither\\") continue increasing = False decreasing = False i = 1 # Check for mountain while i < n and sequence[i] > sequence[i - 1]: increasing = True i += 1 while i < n and sequence[i] < sequence[i - 1]: decreasing = True i += 1 if increasing and decreasing and i == n: is_mountain = True i = 1 increasing = False decreasing = False # Check for valley while i < n and sequence[i] < sequence[i - 1]: decreasing = True i += 1 while i < n and sequence[i] > sequence[i - 1]: increasing = True i += 1 if increasing and decreasing and i == n: is_valley = True if is_mountain: results.append(\\"Mountain\\") elif is_valley: results.append(\\"Valley\\") else: results.append(\\"Neither\\") return results"},{"question":"You are given a grid of numbers, with the rows and columns each representing a sequence of numbers. Your task is to calculate the maximum sum of a subsequence of numbers such that no two numbers are chosen from the same row or column. The first line contains a single integer n (1 ≤ n ≤ 150) — the size of the grid (n x n). The next n lines contain n space-separated integers each, representing the elements of the grid (each element is between -1000 and 1000). Print a single integer — the maximum sum of the subsequence, choosing one number from each row and each column. **Example:** ``` Input: 3 1 -2 3 -4 5 -6 7 -8 9 Output: 15 ``` **Explanation:** By choosing the 3 from the first row, the 5 from the second row, and the 7 from the third row, we get 3 + 5 + 7 = 15, which is the maximum possible sum of numbers chosen such that no two numbers are from the same row or column.","solution":"from itertools import permutations def max_sum_subsequence(n, grid): def calculate_sum(perm): total = 0 for row in range(n): total += grid[row][perm[row]] return total max_sum = float(\'-inf\') for perm in permutations(range(n)): current_sum = calculate_sum(perm) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Arina is learning to analyze large strings and would like some practice on a particular problem. She has a string `s` of length `n` consisting of lowercase Latin letters. She wants to find the length of the longest substring without repeating characters. Help Arina by writing a program that takes the string `s` and returns the length of the longest substring that contains all unique characters. The first line contains one integer `n` (1 ≤ n ≤ 100,000) — the length of the string `s`. The second line contains a string `s` of length `n` consisting of lowercase Latin letters. Print one integer — the length of the longest substring without repeating characters. In the first example the longest substring is \\"abc\\" which is of length 3. In the second example the entire string \\"aabbcc\\" has no substring longer than 2 characters without repeating.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. :param s: Input string consisting of lowercase Latin letters. :type s: str :return: Length of the longest substring without repeating characters. :rtype: int n = len(s) if n == 0: return 0 char_index = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Sarah owns a bakery, and she has a unique way of arranging her bakery products on shelves. Each product has a sweetness level represented by an integer. Sarah wants to place her products in such a way that the overall sweetness level seen by customers entering the bakery is optimized. Optimizing the sweetness level means that the absolute difference between the sweetness levels of any two consecutive products on the shelf is minimized. Sarah can rearrange the products in any order. Given an array of sweetness levels for the products, she needs to determine the minimum possible value of the maximum absolute difference between the sweetness levels of consecutive products after rearranging them. The first line of input contains an integer n (2 ≤ n ≤ 100,000) — the number of products in the bakery. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the sweetness levels of the products. Output a single integer — the minimum possible value of the maximum absolute difference between the sweetness levels of consecutive products after rearranging them. For the first sample test, the sweetness levels are [4, 7, 2, 9], and the optimal arrangement is [2, 4, 7, 9] which results in a maximum absolute difference of 3. For the second sample test, the sweetness levels are [1, 5, 8, 10], and the optimal arrangement is [1, 5, 8, 10] which results in a maximum absolute difference of 3.","solution":"def minimize_max_difference(n, sweetness_levels): This function returns the minimum possible value of the maximum absolute difference between the sweetness levels of consecutive products after rearranging them. :param n: Number of products (integer) :param sweetness_levels: List of sweetness levels (list of integers) :return: Minimum possible value of the maximum absolute difference (integer) # Sort the sweetness levels sweetness_levels.sort() # Initialize the minimum possible value of the maximum absolute difference min_max_diff = float(\'inf\') # Iterate through the sorted list to find the minimum possible value for i in range(1, n): diff = sweetness_levels[i] - sweetness_levels[i - 1] min_max_diff = min(min_max_diff, diff) return min_max_diff"},{"question":"Given an array of n integers, your task is to find the length of the longest subarray such that the subarray is strictly increasing and no two consecutive elements have a difference greater than k. The first line contains two integers n and k (1 ≤ n ≤ 100000, 1 ≤ k ≤ 1000) — the number of elements in the array and the maximum allowed difference between two consecutive elements, respectively. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the elements of the array. Print a single integer — the length of the longest strictly increasing subarray where the difference between any two consecutive elements does not exceed k. Example: Input: 6 2 1 3 5 3 2 8 Output: 3 Explanation: The longest such subarray is [1, 3, 5], which has a length of 3.","solution":"def longest_increasing_subarray_with_limit(n, k, array): max_length = 1 current_length = 1 for i in range(1, n): if array[i] > array[i - 1] and array[i] - array[i - 1] <= k: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length # Example usage: # n, k = 6, 2 # array = [1, 3, 5, 3, 2, 8] # print(longest_increasing_subarray_with_limit(n, k, array)) # Output: 3"},{"question":"Given a string s consisting of lowercase alphabets and an integer k, you need to find the length of the longest substring of s such that the number of distinct characters in the substring is at most k. The first line contains a single integer k (1 leq k leq 26) — the maximum number of distinct characters allowed in the substring. The second line contains a string s (1 leq |s| leq 10^5) — the input string consisting of lowercase alphabets. Output a single integer representing the length of the longest substring of s with at most k distinct characters. For the first example: - Input: ``` 2 abcba ``` - Output: ``` 3 ``` The longest substring with at most 2 distinct characters is either \\"abc\\" or \\"cba\\". For the second example: - Input: ``` 3 aaabbcc ``` - Output: ``` 7 ``` The longest substring with at most 3 distinct characters is \\"aaabbcc\\".","solution":"def longest_substring_with_k_distinct(s, k): from collections import defaultdict n = len(s) if k == 0 or n == 0: return 0 left, right = 0, 0 max_length = 0 char_frequency = defaultdict(int) while right < n: char_frequency[s[right]] += 1 while len(char_frequency) > k: char_frequency[s[left]] -= 1 if char_frequency[s[left]] == 0: del char_frequency[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"You are given a list of integers where each integer appears twice except for one integer that appears exactly once. Your task is to find the integer that appears exactly once in the list. The first line contains an integer n (1 ≤ n ≤ 3 * 10^5), the number of integers in the list. The second line contains n integers separated by spaces. Each integer in the list is between 1 and 10^9. Print the integer that appears exactly once. Example: Input: 7 4 3 2 4 2 3 5 Output: 5","solution":"def single_number(nums): Finds the integer that appears exactly once in the list. Every other integer appears exactly twice. Paramaters: nums (list): List of integers where every integer except one appears twice. Returns: int: The integer that appears exactly once. result = 0 for num in nums: result ^= num return result"},{"question":"A robot is placed in an infinite 2D grid. The robot starts at the point (0, 0) and can move in four possible directions: up (U), down (D), left (L), and right (R). Given a string consisting of the directions the robot travels in sequence, determine the final position of the robot after all the moves are performed. The first line contains an integer n (1 ≤ n ≤ 100) — the number of moves. The second line contains a string of length n which consists solely of characters \'U\', \'D\', \'L\', \'R\' representing the directions. Output the final position of the robot as two space-separated integers representing the x and y coordinates. For example, if the input string is \\"UUDDLRLR\\", the robot starts at (0, 0) and moves U, U, D, D, L, R, L, R, ending up back at (0, 0). Input: ``` 8 UUDDLRLR ``` Output: ``` 0 0 ```","solution":"def final_position(n, moves): Returns the final position of the robot after a sequence of moves. Parameters: n (int): Number of moves moves (str): A string containing the sequence of moves Returns: (int, int): Final (x, y) coordinates x, y = 0, 0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x, y"},{"question":"You are given a binary string `s` consisting of characters \'0\' and \'1\'. You need to perform a series of operations on the string. In one operation, you can select two consecutive characters in the string and swap them. However, there are some additional constraints to consider: 1. You are given an integer `k`, which represents the maximum number of operations you can perform. 2. You need to maximize the integer value of the binary string after performing at most `k` operations. The integer value of a binary string is defined as the decimal value of the number represented by the string. For example, the binary string \\"110\\" has an integer value of `6`. # Input - The first line contains a binary string `s` of length `n` (1 ≤ n ≤ 10^5). - The second line contains an integer `k` (0 ≤ k ≤ 10^5). # Output Print the maximum integer value of the binary string that can be achieved after performing at most `k` operations. # Example Example 1: **Input:** ``` 001 1 ``` **Output:** ``` 1 ``` Example 2: **Input:** ``` 101 2 ``` **Output:** ``` 5 ``` Example 3: **Input:** ``` 11100 3 ``` **Output:** ``` 28 ``` Example Explanation: In the first example, the string \\"001\\" can be transformed to: - After 1 operation: \\"010\\" (swap the first and second characters) - However, the optimal move with 1 operation is: \\"100\\" (swap the second and third characters), which gives the integer value `1`. In the second example, the string \\"101\\" can be transformed to: - After 1 operation: \\"110\\" (swap the second and third characters), which gives the integer value `6`. - Using 1 more operation (total 2), you cannot increase the value further. In the third example, the string \\"11100\\" can be transformed by swapping to maximize the integer value. You can swap \'0\' towards the start if feasible.","solution":"def maximize_binary_value(s, k): This function takes a binary string s and an integer k, and returns the maximum integer value that can be obtained by performing at most k operations of swapping two consecutive characters. n = len(s) s = list(s) # Traverse from left to right for i in range(n): if k <= 0: break # If this character is \'0\', try to move it as far left as possible if s[i] == \'0\': for j in range(i, 0, -1): if k <= 0: break if s[j-1] == \'1\': break # Swap \'0\' at index j with \'1\' at index j-1 s[j], s[j-1] = s[j-1], s[j] k -= 1 # Convert the list back to a string and then to an integer return int(\\"\\".join(s), 2)"},{"question":"You are tasked with the responsibility of managing a station at an intergalactic spaceport. Due to the high volume of spaceship traffic, you need a system to efficiently allocate docking bays to incoming spaceships. The spaceport consists of `n` docking bays and `m` spaceships with varying arrival and departure times. Each spaceship requires a docking bay for a certain period, from its arrival time to its departure time. Given the arrival and departure times of each spaceship, determine whether all spaceships can be accommodated with the available docking bays. Specifically, you need to write a program that checks if there is a feasible way to assign the spaceships to the available docking bays such that no two spaceships overlap in the same bay. If it is possible, print \\"YES\\"; otherwise, print \\"NO\\". The first line contains two integers `n` and `m` (1 ≤ `n`, `m` ≤ 1000) — the number of docking bays and the number of spaceships, respectively. Each of the next `m` lines contains two integers `ai` and `di` (1 ≤ `ai`, `di` ≤ 10^9 and `ai` ≤ `di`), representing the arrival and departure times of the `i`-th spaceship. # Input - The first line: two integers `n` and `m`. - The next `m` lines: two integers `ai` and `di` — the arrival and departure times of each spaceship. # Output - Output \\"YES\\", if all spaceships can be accommodated; otherwise, print \\"NO\\". # Example ``` Input: 3 5 1 4 2 6 8 9 3 7 5 8 Output: YES Input: 2 4 3 5 4 6 2 8 7 9 Output: NO ``` In the first example, despite overlapping intervals, there are enough docking bays to accommodate all spaceships. In the second example, at some times there are more spaceships than docking bays, thus it is not feasible.","solution":"def can_accommodate_all_spaceships(n, m, schedules): Returns \\"YES\\" if all spaceships can be accommodated by the available docking bays, otherwise \\"NO\\". :param n: int - Number of docking bays :param m: int - Number of spaceships :param schedules: List of tuples - Each tuple contains two integers representing the arrival and departure time of a spaceship :return: str - \\"YES\\" if all spaceships can be accommodated, otherwise \\"NO\\" events = [] for arrival, departure in schedules: events.append((arrival, 1)) # +1 spaceship arriving events.append((departure, -1)) # -1 spaceship departing events.sort() # Sort events by time. In case of tie, departure (-1) should come before arrival (+1) current_spaceships = 0 for event in events: current_spaceships += event[1] if current_spaceships > n: return \\"NO\\" return \\"YES\\""},{"question":"Alice and Bob are playing a game with strings. They have a string `s` of length `n`, consisting of lowercase Latin letters. The rules of the game are as follows: 1. Each player takes turns choosing a non-empty substring of `s` that appears at least twice in `s`, removing all its occurrences from `s`, and concatenating the resulting parts of `s` together to form a new string. 2. The player who cannot make a move loses the game. Alice always goes first. Your task is to determine who will win the game if both players play optimally. # Input The first line contains a single integer `n` (1 ≤ n ≤ 200,000) — the length of the string `s`. The second line contains the string `s` consisting of exactly `n` lowercase Latin letters. # Output Print \\"Alice\\" if Alice will win the game, and \\"Bob\\" otherwise. # Example Input: ``` 7 ababaac ``` Output: ``` Alice ``` Explanation: - Alice can choose the substring \\"aba\\" which appears twice and remove it. The resulting string is \\"ac\\". - Bob cannot choose any non-empty substring that appears at least twice, so Alice wins. Input: ``` 6 abcabc ``` Output: ``` Bob ``` Explanation: - Alice removes \\"abc\\" and the string becomes \\"\\". Bob cannot make a move, so Bob wins.","solution":"def determine_winner(n, s): Determines the winner of the game with the given rules. :param n: int, the length of the string s :param s: str, the string s consisting of exactly n lowercase Latin letters :return: str, \\"Alice\\" or \\"Bob\\" depending on who will win the game. from collections import defaultdict # Initialize a dictionary to count all substrings of `s` substring_count = defaultdict(int) # Create all substrings and count occurrences for i in range(n): for j in range(i + 1, n + 1): substring = s[i:j] substring_count[substring] += 1 # Count the number of substrings that appear at least twice num_of_valid_moves = sum(1 for count in substring_count.values() if count > 1) # If the number of valid moves is odd, Alice wins, otherwise Bob wins if num_of_valid_moves % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Consider an online store that sells gadgets. Each gadget has a unique ID and a price. The store occasionally holds promotional events where customers can purchase gadgets at discounted rates. During such an event, each gadget can have multiple discounts applied to it, but only the best discount is considered for that gadget at the time of purchase. You are given a list of initial prices for n gadgets and a list of m discount offers. Each discount offer specifies a gadget and a discount amount. After applying the best available discount for each gadget, calculate the total revenue if all gadgets are sold once. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of gadgets and the number of discount offers respectively. The second line contains n space-separated integers p1, p2, ..., pn (1 ≤ pi ≤ 100000) — the initial prices of the gadgets. Each of the next m lines contains two integers gi and di (1 ≤ gi ≤ n, 1 ≤ di ≤ pi) — the gadget ID and the discount amount for that gadget. Print one integer: the total revenue after the best discounts have been applied to all gadgets. Example: Input: 4 3 100 200 300 400 1 50 2 100 3 150 Output: 700 Explanation: The initial prices are [100, 200, 300, 400]. The discounts are applied as follows: - Gadget 1 has a discount of 50, so its final price is 100 - 50 = 50. - Gadget 2 has a discount of 100, so its final price is 200 - 100 = 100. - Gadget 3 has a discount of 150, so its final price is 300 - 150 = 150. - Gadget 4 has no discount so its final price is 400. Thus, the total revenue after discounts is 50 + 100 + 150 + 400 = 700.","solution":"def calculate_total_revenue(n, m, prices, discounts): Calculate the total revenue after applying the best discounts to gadgets. Parameters: n (int): Number of gadgets. m (int): Number of discount offers. prices (list): Initial prices of the gadgets. discounts (list): List of tuples containing (gadget_id, discount_amount). Returns: int: Total revenue after applying the best discounts. # List to store the best discount for each gadget, initialized to 0 best_discounts = [0] * n # Process each discount and update the best discount for the respective gadget for gadget_id, discount_amount in discounts: # Apply the discount, ensure the best discount is considered best_discounts[gadget_id - 1] = max(best_discounts[gadget_id - 1], discount_amount) # Calculate the total revenue after applying the best discounts total_revenue = 0 for i in range(n): total_revenue += prices[i] - best_discounts[i] return total_revenue"},{"question":"You are given an integer array of length n that represents the scores of participants in a coding competition. Your task is to determine the rank of each participant based on their score. The rank is defined as follows: - The participant with the highest score is ranked 1. - If multiple participants have the same score, they should share the same rank, and the next rank after that should be incremented by the number of participants who share the previous rank. For example, given the scores [100, 100, 50, 25], the ranks would be [1, 1, 3, 4]. Write a function that takes the array of scores and returns an array representing the rank of each participant. The first input line contains an integer n (1 le n le 2 times 10^5) — the number of participants. The second line contains n integers scores_i (0 le scores_i le 10^9), representing the scores of the participants. Output a single line with n integers, where the i-th integer represents the rank of the i-th participant. Example: Input: 4 100 100 50 25 Output: 1 1 3 4 In this example: - The first and second participants share the highest score of 100, so they both have rank 1. - The third participant has the third highest score of 50, so they have rank 3. - The fourth participant has the lowest score of 25, so they have rank 4.","solution":"def calculate_ranks(scores): This function takes a list of scores and returns a list of ranks based on the scores. # Pairing original indices with scores indexed_scores = list(enumerate(scores)) # Sorting by scores in descending order indexed_scores.sort(key=lambda x: -x[1]) ranks = [0] * len(scores) current_rank = 1 prev_score = indexed_scores[0][1] for idx, (original_index, score) in enumerate(indexed_scores): if score != prev_score: current_rank = idx + 1 ranks[original_index] = current_rank prev_score = score return ranks"},{"question":"You are given a list of integers that represents a stock\'s price history over several days. Each integer in the list represents the price of the stock on a particular day. Your task is to determine the maximum profit you could achieve from buying and selling the stock at most twice. In other words, you may complete at most two transactions (buy one and sell one share of the stock at different days). Note that you cannot engage in multiple transactions at the same time (i.e., you must sell the stock before you buy it again). If no profit can be made, the maximum profit should be 0. The first line of the input contains an integer `n` (1 ≤ n ≤ 100,000) representing the number of days. The second line of the input contains `n` space-separated integers where the `i-th` integer represents the stock price on the `i-th` day. Output a single integer that represents the maximum profit you can achieve from at most two transactions. **Example:** Input: ``` 6 3 3 5 0 0 3 1 4 ``` Output: ``` 6 ``` Explanation: - Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. - Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3. - Total profit = 3 + 3 = 6.","solution":"def max_profit_with_two_transactions(prices): # Special case where we have less than two prices if not prices or len(prices) == 1: return 0 n = len(prices) # Arrays to keep track of maximum profit with one transaction and two transactions profit_after_first_transaction = [0] * n profit_after_second_transaction = [0] * n # Forward pass to compute the maximum profit up to each day with one transaction min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) profit_after_first_transaction[i] = max(profit_after_first_transaction[i-1], prices[i] - min_price) # Backward pass to compute the maximum profit up to each day with second transaction max_price = prices[-1] for i in range(n-2, -1, -1): max_price = max(max_price, prices[i]) profit_after_second_transaction[i] = max(profit_after_second_transaction[i+1], max_price - prices[i]) # Combine the results of the two passes to get the maximum profit with two transactions max_profit = 0 for i in range(n): max_profit = max(max_profit, profit_after_first_transaction[i] + profit_after_second_transaction[i]) return max_profit"},{"question":"Hannah is working on a painting project in her art studio, which contains n canvases lined up in a row. Each canvas is initially either painted or unpainted. Hannah can dip her brush into a monochrome paint bucket and apply a single brush stroke across some contiguous segment of canvases. A contiguous brush stroke will paint all unpainted canvases within the segment, but erase the paint from all previously painted canvases. Hannah wants to determine the minimum number of contiguous brush strokes needed to ensure that all canvases become painted. The first line of input will be a single integer n (1 ≤ n ≤ 1000), representing the number of canvases. The next line contains a binary string of length n where \'1\' represents a painted canvas and \'0\' represents an unpainted canvas. The output should be a single integer equal to the minimum number of contiguous brush strokes required to make all canvases painted. In the first sample, Hannah can make the entire row painted with just one brush stroke. In the second sample, Hannah needs to apply two brush strokes: first over the first canvas and then over the last two canvases. **Example 1:** Input: 4 1000 Output: 1 **Example 2:** Input: 5 00110 Output: 2","solution":"def min_brush_strokes(n, canvases): Returns the minimum number of contiguous brush strokes needed to paint all canvases. # We need to count separate segments of unpainted canvases count = 0 for i in range(n): if canvases[i] == \'0\': if i == 0 or canvases[i-1] == \'1\': count += 1 return count"},{"question":"You are given an array of integers a_1, a_2, ..., a_n. Your task is to partition this array into two non-empty parts such that the maximum sum of the elements of any part is minimized. More formally, you need to find the minimum possible value of max(sum_1, sum_2), where sum_1 is the sum of elements in the first part and sum_2 is the sum of elements in the second part. Each part must be continuous and non-empty. The first line of the input contains one integer n (2 le n le 10^5) — the number of elements in the array a. The second line of the input contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^4) — the elements of the array a. Print a single integer — the minimum possible value of max(sum_1, sum_2). For example, for the array [1, 3, 2, 6, 1, 2], one optimal split is [1, 3, 2] and [6, 1, 2]. The maximum sum between the two parts is max(1 + 3 + 2, 6 + 1 + 2) = 9. Input: ``` 6 1 3 2 6 1 2 ``` Output: ``` 9 ``` In this example, the array is partitioned into `[1, 3, 2]` and `[6, 1, 2]` resulting in `sum_1 = 6` and `sum_2 = 9`, thus the minimal possible value for `max(sum_1, sum_2)` is `9`.","solution":"def min_max_partition_sum(n, arr): total_sum = sum(arr) current_sum = 0 min_max_sum = total_sum for i in range(n - 1): current_sum += arr[i] part1_sum = current_sum part2_sum = total_sum - current_sum min_max_sum = min(min_max_sum, max(part1_sum, part2_sum)) return min_max_sum # Example usage: # n = 6 # arr = [1, 3, 2, 6, 1, 2] # print(min_max_partition_sum(n, arr)) # Output: 9"},{"question":"Given a list of n strings, you need to find out the longest common prefix among all these strings. The longest common prefix is the longest substring that is common to all strings in the list and appears as a prefix in all of them. If there is no common prefix, return an empty string. The first line of input contains a single integer n (1 ≤ n ≤ 200) — the number of strings. The following n lines each contain a string s_i (1 ≤ |s_i| ≤ 100), where |s_i| is the length of the i-th string. Output one string — the longest common prefix. For example, Input: 3 flower flow flight Output: fl Input: 2 dog racecar Output:","solution":"def longest_common_prefix(strings): Returns the longest common prefix among a list of strings. if not strings: return \\"\\" # Start by assuming the entire first string is the common prefix prefix = strings[0] # Iterate over all strings in the list for string in strings[1:]: # Shorten the prefix as long as it\'s not a prefix of the current string while string[:len(prefix)] != prefix and prefix: prefix = prefix[:-1] if not prefix: break return prefix"},{"question":"Alice loves the concept of permutations and she is fascinated with tricks related to permutations. An interesting thing she recently stumbled upon is the concept of permutation cycles. Given a permutation p_1, p_2, ldots, p_n, a cycle in permutation is a sequence of distinct elements starting from any element p_i and following the permutation till we encounter the start element again. Formally, you start with i, then go to p_i, then to p_{p_i}, and so on, until you return to i. This forms a cycle. Alice wants to dissect a permutation into its constituent cycles. Write a program that, given a permutation of integers from 1 to n, identifies all distinct cycles within it. The input starts with an integer n (1 leq n leq 10^5) — the length of the permutation. The second line contains n integers p_1, p_2, ldots, p_n — a permutation of integers from 1 to n. Output the number of cycles in the permutation and then describe each cycle. Each cycle should be described in the form of a list of integers representing the elements in the order they appear in the cycle. Input: ``` 5 3 2 4 1 5 ``` Output: ``` 3 1 3 4 2 5 ``` Note: In the sample input, - The permutation is represented by the sequence: 3 -> 2 -> 4 -> 1 -> 5, - The cycles in this permutation are: - 1 -> 3 -> 4 -> 1 (First cycle) - 2 -> 2 (Second cycle, which is a trivial cycle consisting of a single element) - 5 -> 5 (Third cycle, which is another trivial cycle consisting of a single element)","solution":"def find_cycles(n, permutation): Takes the length of the permutation and the permutation list, returns the cycles in the permutation. visited = [False] * (n + 1) cycles = [] def find_cycle(start): cycle = [] current = start while not visited[current]: visited[current] = True cycle.append(current) current = permutation[current - 1] return cycle for i in range(1, n + 1): if not visited[i]: cycle = find_cycle(i) if cycle: cycles.append(cycle) return cycles"},{"question":"Tom is a biologist working with DNA sequences. He needs to find the longest common subsequence (LCS) that appears in two given DNA sequences. The LCS of two sequences is the longest sequence that can be derived from both original sequences by deleting some of the characters (without reordering the remaining characters). Tom wrote a basic algorithm that successfully finds the LCS but it is too slow for large sequences. Can you help him by writing an efficient program to find the LCS of two DNA sequences? Input: - The first line contains an integer `n` (1 ≤ n ≤ 1000), the length of the first DNA sequence. - The second line contains an integer `m` (1 ≤ m ≤ 1000), the length of the second DNA sequence. - The third line contains a string `a` of length `n`, representing the first DNA sequence. - The fourth line contains a string `b` of length `m`, representing the second DNA sequence. Output: - Print a single line containing the LCS of the two DNA sequences. Sample Input: ``` 6 7 AGGTAB GXTXAYB ``` Sample Output: ``` GTAB ``` Explanation: The longest common subsequence of \\"AGGTAB\\" and \\"GXTXAYB\\" is \\"GTAB\\". Other subsequences like \\"GGB\\", \\"GTT\\" or \\"GTA\\" are shorter than \\"GTAB\\". Note: - Multiple LCS of the same length can exist, any one of them is a valid answer. - Your solution should run efficiently for the maximum input size.","solution":"def lcs(n, m, a, b): dp = [[\\"\\" for _ in range(m + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + a[i - 1] else: dp[i][j] = dp[i - 1][j] if len(dp[i - 1][j]) > len(dp[i][j - 1]) else dp[i][j - 1] return dp[n][m] # Example usage: # n = 6 # m = 7 # a = \\"AGGTAB\\" # b = \\"GXTXAYB\\" # print(lcs(n, m, a, b)) # Output: GTAB"},{"question":"Given an undirected graph with n vertices and m edges, your task is to determine if it\'s possible to partition the vertices of the graph into two sets such that no two vertices within the same set are adjacent. In other words, you need to check if the graph is bipartite. A graph is bipartite if we can color its vertices using two colors such that no two adjacent vertices share the same color. # Input The first line contains two integers n and m (1 le n le 10^5, 0 le m le 2 cdot 10^5) — the number of vertices and edges respectively. Each of the next m lines contains two integers u and v (1 le u, v le n, u neq v) indicating that there is an edge between vertices u and v. It is guaranteed that there are no multiple edges and no self-loops in the graph. # Output Print \\"YES\\" (without quotes) if the graph can be partitioned into two sets as described. Otherwise, print \\"NO\\" (without quotes). # Example Input ``` 4 4 1 2 2 3 3 4 4 1 ``` Output ``` YES ``` Input ``` 3 3 1 2 2 3 3 1 ``` Output ``` NO ``` # Explanation In the first example, the graph can be colored as follows: vertices {1, 3} with one color and vertices {2, 4} with another color. Therefore, the output is \\"YES\\". In the second example, the graph forms a triangle, and it is impossible to color the vertices with just two colors such that no two adjacent vertices share the same color. Hence, the output is \\"NO\\".","solution":"def is_bipartite(n, m, edges): from collections import deque, defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) color = [-1] * (n + 1) def bfs(source): queue = deque([source]) color[source] = 0 while queue: u = queue.popleft() for v in graph[u]: if color[v] == -1: color[v] = 1 - color[u] queue.append(v) elif color[v] == color[u]: return False return True for vertex in range(1, n + 1): if color[vertex] == -1: if not bfs(vertex): return \\"NO\\" return \\"YES\\""},{"question":"Victor has recently bought a new keyboard that only supports lowercase Latin letters and space. He wants to type a specific sentence using as few keystrokes as possible. Victor can either press a key or use a special sequence to perform specific operations: 1. Pressing a key types the corresponding letter (each letter press counts as one keystroke). 2. He can use a special command to delete the last typed character (`delete` counts as two keystrokes and can be used multiple times). Write a function to compute the minimum number of keystrokes needed to type a given sentence using these rules. # Input - A string `sentence` (1 ≤ |sentence| ≤ 1000), consisting of lowercase Latin letters and spaces. It represents the sentence Victor wants to type. # Output - An integer representing the minimum number of keystrokes needed to type the sentence. # Example ```python sentence = \\"a a\\" # Output: 3 # Explanation: Victor can type \'a\' (1 keystroke), space (1 keystroke), and then \'a\' again (1 keystroke) sentence = \\"ab cd\\" # Output: 5 # Explanation: Type \'a\' (1 keystroke), \'b\' (1 keystroke), space (1 keystroke), \'c\' (1 keystroke), \'d\' (1 keystroke) sentence = \\"ab c d\\" # Output: 8 # Explanation: Type \'a\' (1 keystroke), \'b\' (1 keystroke), space (1 keystroke), \'c\' (1 keystroke), space (1 keystroke), \'d\' (1 keystroke). If the keystrokes exceed deleting and typing options, using `delete` (2 keystrokes per use) should be considered. ``` Implement the function `min_keystrokes(sentence)` that takes a string representing the sentence and returns the minimum number of keystrokes needed.","solution":"def min_keystrokes(sentence): # Since each character and space must be typed and considering the delete command does not reduce keystrokes, # the minimum keystrokes would be the length of the sentence itself. return len(sentence)"},{"question":"Ali, a student of computer science, is studying about binary trees. He learns that in a binary tree, each node has an integer value, and it has at most two children named left and right. Ali is particularly interested in **Balanced Binary Trees**, in which the depth of the two subtrees of every node never differ by more than 1. Given a list of ***n*** integers, help Ali determine if it\'s possible to construct a balanced binary tree where the in-order traversal of the tree would produce the given list. An in-order traversal is defined as visiting the left subtree first, then the root node, and finally the right subtree. **Input:** The first line contains one integer n (1 le n le 1000) — the number of integers. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9), representing the list of integers. **Output:** Print \\"YES\\" if it\'s possible to construct such a balanced binary tree, otherwise print \\"NO\\". **Example:** Input: ``` 3 2 1 3 ``` Output: ``` YES ``` Input: ``` 4 1 2 3 4 ``` Output: ``` NO ``` In the first example, one possible balanced binary tree is: ``` 2 / 1 3 ``` In the second example, there is no way to construct a balanced binary tree that would give the in-order traversal [1, 2, 3, 4]. **Explanation:** To determine if it is possible to construct a balanced binary tree with the given in-order traversal, imagine assigning the middle element as the root and recursively doing the same for the left and right sublists. If at any point the heights of the subtrees differ by more than 1, it would be impossible to construct such a tree, thus giving the answer \\"NO\\". This approach guides the solution to consider the balance and depth properties of the binary tree.","solution":"def is_balanced_binary_tree_possible(n, values): Determines if it is possible to construct a balanced binary tree with the given in-order traversal. Args: n (int): The number of integers. values (list of int): The list of integers. Returns: str: \\"YES\\" if it\'s possible to construct a balanced binary tree, otherwise \\"NO\\". import math depth = math.log2(n + 1) if depth.is_integer(): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a string `s` consisting of lowercase Latin letters (\'a\' - \'z\') and an integer `k`. The string `s` needs to be modified such that no two adjacent characters are the same. You are allowed to replace any character in `s` with a different character exactly `k` times. Your task is to find out if it\'s possible to modify the string in such a way within `k` replacements. The first line of input contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each of the next `t` lines contains a string `s` (1 ≤ |s| ≤ 1000) and an integer `k` (0 ≤ k ≤ 1000) separated by a space. Output `YES` if it is possible to transform the string `s` such that no two adjacent characters are the same using at most `k` replacements; otherwise, output `NO`. # Example Input: ``` 3 aaxx 1 aaxx 2 abcde 0 ``` Output: ``` NO YES YES ``` # Explanation 1. In the first test case, you can change one of the \'a\'s or \'x\'s to another character, but it is not enough to make all adjacent characters different. 2. In the second test case, two changes are sufficient: you can change both \'a\'s or both \'x\'s to make the string look like \\"abxy\\". 3. In the third test case, the string already has no two adjacent characters the same, so no changes are required.","solution":"def can_modify_string(s, k): Determines if it\'s possible to modify the string s such that no two adjacent characters are the same using at most k replacements. # Early exit if the string length is 1 if len(s) == 1: return \\"YES\\" # Count adjacent duplicates adjacent_duplicates = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: adjacent_duplicates += 1 # Compare the number of adjacent duplicates with k if adjacent_duplicates <= k: return \\"YES\\" return \\"NO\\" def modify_strings(test_cases): results = [] for s, k in test_cases: results.append(can_modify_string(s, k)) return results"},{"question":"Alexander is participating in a code-breaking competition where he needs to decode multiple strings. Each string contains a mix of uppercase and lowercase letters. As a step towards the solution, he needs to find the longest substring that does not contain any repeating characters. Given a string s, help Alexander by determining the length of the longest substring without repeating characters. The first line of the input contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. The following t lines contain one string s each (1 ≤ |s| ≤ 10^5), where |s| is the length of the string s. Print t lines, each containing a single integer — the length of the longest substring without repeating characters for each corresponding string. Example: Input: 2 abcabcbb bbbbb Output: 3 1","solution":"def length_of_longest_substring(s): This function returns the length of the longest substring without repeating characters. # Dictionary to store the last positions of each character. seen = {} max_length = 0 start = 0 for i, char in enumerate(s): if char in seen and start <= seen[char]: start = seen[char] + 1 else: max_length = max(max_length, i - start + 1) seen[char] = i return max_length def decode_strings(test_cases): Given a list of strings, this function returns a list of lengths of the longest substrings without repeating characters for each string. results = [] for s in test_cases: results.append(length_of_longest_substring(s)) return results"},{"question":"You are given a string `S` consisting of lowercase English letters. Your task is to partition the string into as few parts as possible so that each letter appears in at most one part, and the positions of the parts are non-overlapping and contiguous. The function should return the end indexes of each part. The first line contains the string `S` (1 ≤ |S| ≤ 500). In a single line print the end indexes of each part, separated by spaces. **Example:** Input: ``` ababcbacadefegdehijhklij ``` Output: ``` 8 15 23 ``` Explanation: The string can be partitioned as \\"ababcbaca\\", \\"defegde\\", \\"hijhklij\\".","solution":"def partition_labels(S): Given a string S consisting of lowercase English letters, partition it into as few parts as possible so that each letter appears in at most one part, and return the end indexes of each part. # Find the last occurrence of each character last_occurrence = {char: idx for idx, char in enumerate(S)} partitions = [] start, end = 0, 0 for i, char in enumerate(S): end = max(end, last_occurrence[char]) if i == end: partitions.append(end) start = i + 1 return partitions"},{"question":"A network of cities is connected by bidirectional roads. Each road has a certain length. Johnny, a postal worker, is interested in finding the shortest path to deliver mail. However, some roads are temporarily closed. Your task is to determine the minimum distance for Johnny to travel from city A to city B considering the temporary blockages. The first line contains three integers n, m, and q (2 ≤ n ≤ 200, 1 ≤ m ≤ 5000, 1 ≤ q ≤ 100), where n is the number of cities, m is the number of roads, and q is the number of queries. Each of the next m lines contains three integers u, v, and l (1 ≤ u, v ≤ n, 1 ≤ l ≤ 1000), representing a road between city u and city v with length l. Each of the next q lines contains two integers a and b (1 ≤ a, b ≤ n) which are the cities Johnny needs to travel between. For each query, print the minimum distance from city a to city b. If there is no possible path due to road closures, print -1. Note: Not all cities are necessarily connected, and some roads might be blocked in certain queries. Treat each query independently.","solution":"import heapq def dijkstra(n, graph, start, end): Function to find the minimum distance from start to end using Dijkstra\'s algorithm. distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1 def any_path(n, m, edges, queries): Function to process edges and queries to find the shortest path distance for each query. results = [] graph = {i: [] for i in range(1, n+1)} # Populate graph with given edges for u, v, l in edges: graph[u].append((v, l)) graph[v].append((u, l)) for a, b in queries: results.append(dijkstra(n, graph, a, b)) return results"},{"question":"Alex is planning a road trip between several cities and wants to minimize the total travel time. The travel time between any two cities is known, and Alex can choose any city as the starting point for the trip and must visit each city exactly once before returning to the starting city. This problem can be approached as the famous Traveling Salesman Problem (TSP). Given an integer `n` (1 ≤ n ≤ 15), representing the number of cities, followed by an `n x n` matrix where the `j-th` integer of the `i-th` line represents the travel time from city `i` to city `j`, determine the minimum travel time for Alex\'s road trip. Input: - The first line contains a single integer `n` (1 ≤ n ≤ 15) — the number of cities. - The next `n` lines each contain `n` integers, where the `j-th` integer of the `i-th` line represents the travel time from city `i` to city `j` (0 ≤ travel time ≤ 1000). No travel time from a city to itself is given explicitly, but it is always zero, i.e., the diagonal entries of the matrix are zero. Output: - Print a single integer — the minimum travel time for Alex\'s road trip. Example Input: 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output: 80 In the example, a possible minimal time route is 0 -> 1 -> 3 -> 2 -> 0 with a total travel time of 80.","solution":"def tsp(mask, pos, n, dist, dp): if mask == (1 << n) - 1: return dist[pos][0] if dp[mask][pos] != -1: return dp[mask][pos] ans = float(\'inf\') for city in range(n): if (mask & (1 << city)) == 0: new_ans = dist[pos][city] + tsp(mask | (1 << city), city, n, dist, dp) ans = min(ans, new_ans) dp[mask][pos] = ans return ans def min_travel_time(n, matrix): dp = [[-1] * n for _ in range(1 << n)] return tsp(1, 0, n, matrix, dp) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) matrix = [] index = 1 for i in range(n): row = [] for j in range(n): row.append(int(data[index])) index += 1 matrix.append(row) print(min_travel_time(n, matrix)) if __name__ == \\"__main__\\": main()"},{"question":"A leetcode-style question compatible with the samples provided: You are given a string s consisting of lowercase English letters and a list of queries. Each query is a pair of integers (l, r), and the task is to count the number of distinct characters in the substring s[l:r] (inclusive). The first line of the input contains a string s of length n (1 ≤ n ≤ 1000). The second line contains an integer q (1 ≤ q ≤ 1000), the number of queries. Each of the following q lines contains two integers l and r (0 ≤ l ≤ r < n). Output q lines, each containing the answer for the corresponding query. Example: Input: ``` abracadabra 3 0 2 1 4 0 10 ``` Output: ``` 3 4 5 ```","solution":"def count_distinct_characters(s, queries): Given a string s and a list of queries (l, r), return a list of integer results for each query, where each result is the number of distinct characters in the substring s[l:r+1]. Parameters: s (str): The input string. queries (list[tuple[int, int]]): The list of queries. Returns: list[int]: A list of resulting distinct character counts for each query. result = [] for l, r in queries: substring = s[l:r+1] distinct_characters = len(set(substring)) result.append(distinct_characters) return result"},{"question":"You are given an undirected tree with n nodes numbered from 1 to n, and each edge has a weight. A tree is a connected graph with n-1 edges. The distance between two nodes in the tree is the sum of the weights of the edges on the path connecting them. Your task is to find the longest distance between any two nodes in the tree, also known as the diameter of the tree. The first line of input contains a single integer n (1 le n le 10^5) — the number of nodes in the tree. The next n-1 lines contain three integers each, u, v, and w (1 le u, v le n, 1 le w le 10^4), denoting that there is an edge between nodes u and v with weight w. Output a single integer — the length of the diameter of the tree. # Example Input ``` 5 1 2 3 2 3 4 3 4 2 4 5 1 ``` Output ``` 10 ``` # Explanation In the given example, the longest path in the tree is 1 -> 2 -> 3 -> 4 -> 5 with a total distance of 3 + 4 + 2 + 1 = 10.","solution":"from collections import defaultdict, deque def tree_diameter(n, edges): if n == 1: return 0 def bfs(start): visited = [-1] * (n + 1) queue = deque([(start, 0)]) visited[start] = 0 farthest_node = start max_distance = 0 while queue: node, dist = queue.popleft() for neighbor, weight in graph[node]: if visited[neighbor] == -1: visited[neighbor] = dist + weight queue.append((neighbor, dist + weight)) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Find the farthest node from node 1 (or any arbitrary node) farthest_node, _ = bfs(1) # Find the farthest node from the previously found farthest node _, diameter = bfs(farthest_node) return diameter"},{"question":"You are given a list of n integers. Your task is to find the minimum number of changes needed to make the list non-decreasing. A change is defined as either increasing or decreasing the value of a single element in the list. The first line of input contains a single integer n (1 ≤ n ≤ 100) — the number of integers in the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100). Print a single integer representing the minimum number of changes needed to make the list non-decreasing. For example, for the input: 6 1 5 3 4 2 6 The minimum number of changes to make the list non-decreasing is 2. One way to achieve this is by changing the list to [1, 3, 3, 4, 4, 6]. Note: There can be multiple solutions for the same minimum number of changes. You only need to find the count of changes.","solution":"def min_changes_to_non_decreasing(arr): Calculate the minimum number of changes needed to make a list non-decreasing. A change is either increasing or decreasing the value of a single element in the list. Parameters: arr (list of int): List of integers Returns: int: The minimum number of changes required n = len(arr) # dp[i] will hold the minimum changes needed to make arr[0:i+1] non-decreasing dp = [0] * n # Fill dp array for i in range(1, n): if arr[i] >= arr[i-1]: dp[i] = dp[i-1] else: dp[i] = dp[i-1] + 1 return dp[-1] # Example usage: # Input: 6, [1, 5, 3, 4, 2, 6] # Output: 2 # One way to make the list non-decreasing with 2 changes: # Change to: [1, 5, 5, 5, 5, 6]"},{"question":"In a small village, there is a single bus route that is a loop: it starts at Bus Stop 1, goes through several bus stops in a given order, and eventually returns to Bus Stop 1. The villagers want to know the fare for traveling between two specific bus stops. You are given a list of n integers, where the i-th integer represents the fare between Bus Stop i and Bus Stop i+1. The fare between Bus Stop n and Bus Stop 1 is also given by the n-th integer, completing the loop. Your task is to write a program that computes the minimum fare required to travel between two given bus stops x and y. The input consists of: - A single integer n (2 ≤ n ≤ 100) — the number of bus stops. - A list of n integers, the i-th integer representing the fare between Bus Stop i and Bus Stop i+1 (1 ≤ fare ≤ 1000). - Two integers x and y (1 ≤ x, y ≤ n) — the bus stops between which you need to compute the fare. Output a single integer — the minimum fare required to travel between Bus Stops x and y. Example Input: 5 10 20 30 40 50 1 3 Output: 30","solution":"def minimum_fare(n, fares, x, y): Calculate the minimum fare required to travel between Bus Stops x and y in a loop. Parameters: n (int): Number of bus stops. fares (list of int): The fare between adjacent bus stops. x (int): The start bus stop. y (int): The destination bus stop. Returns: int: The minimum fare required to travel between the given bus stops. # Adjust indices to be zero-based x -= 1 y -= 1 if x == y: return 0 # Calculate fare in clockwise direction clockwise_fare = sum(fares[min(x, y):max(x, y)]) # Calculate fare in counter-clockwise direction counterclockwise_fare = sum(fares) - clockwise_fare # Return the minimum of the two computed fares return min(clockwise_fare, counterclockwise_fare)"},{"question":"You are given a string consisting of lowercase Latin letters. You can remove any one character from it. Your task is to determine if it is possible to make the string a palindrome by removing exactly one character. A palindrome is a string that reads the same forward and backward. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a string consisting of lowercase Latin letters. The length of each string is between 1 and 105. For each test case, print \\"YES\\" if it is possible to make the string a palindrome by removing exactly one character, otherwise print \\"NO\\". Examples: ``` Input: 3 abca abc a Output: YES NO YES ``` Explanation: - In the first test case, you can remove \'c\' to make the string \\"aba\\", which is a palindrome. - In the second test case, it is not possible to make \\"abc\\" a palindrome by removing just one character. - In the third test case, the string \\"a\\" is already a palindrome, so removing \'a\' leaves an empty string which is technically a palindrome.","solution":"def can_be_palindrome_by_removing_one_char(s): def is_palindrome(x): return x == x[::-1] l, r = 0, len(s) - 1 while l < r: if s[l] != s[r]: return is_palindrome(s[l+1:r+1]) or is_palindrome(s[l:r]) l += 1 r -= 1 return True def check_palindromes(t, strings): results = [] for s in strings: if can_be_palindrome_by_removing_one_char(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) strings = data[1:t+1] results = check_palindromes(t, strings) for result in results: print(result)"},{"question":"You are given an array of integers representing the heights of hills. You need to find the longest subarray where the heights of the hills first strictly increase to a peak and then strictly decrease. A strictly increasing sequence is one where each element is greater than the one before it, and a strictly decreasing sequence is one where each element is smaller than the one before it. The peak is the highest point in the subarray and must be part of the subarray. Your task is to write a function that returns the length of the longest such subarray. If no such subarray exists, return 0. Function Signature: `def longest_mountain(arr: List[int]) -> int:` # Input: - `arr`: a list of integers representing the heights of the hills `(1 <= len(arr) <= 10^4)`, with values from `0` to `10^4`. # Output: - An integer representing the length of the longest subarray that forms a mountain. # Example: Input: ```python arr = [2, 1, 4, 7, 3, 2, 5] ``` Output: ```python 5 ``` Explanation: The longest mountain subarray is `[1, 4, 7, 3, 2]`, which has a length of 5. # Additional Constraints: - No internal subarray can violate the strictly increasing then strictly decreasing condition. - Include Python’s built-in imports if necessary to solve the problem. # Notes: - The solution should be efficient both in terms of time and space complexity. - Think about using two-pointer or sliding window techniques to achieve this. Example: ```python print(longest_mountain([2, 1, 4, 7, 3, 2, 5])) # Output: 5 print(longest_mountain([2, 2, 2])) # Output: 0 ```","solution":"def longest_mountain(arr): n = len(arr) if n < 3: return 0 longest = 0 for i in range(1, n - 1): if arr[i-1] < arr[i] > arr[i+1]: left = i - 1 while left > 0 and arr[left-1] < arr[left]: left -= 1 right = i + 1 while right < n - 1 and arr[right] > arr[right+1]: right += 1 longest = max(longest, right - left + 1) return longest"},{"question":"In the magical land of Codeonia, every year a grand festival is held called \\"String Transformation Festival\\" where the best wizards compete to showcase their string transformation skills. The competition is based on a special set of transformation rules applied to strings consisting of lowercase English letters. The transformation rules are as follows: 1. A wizard can choose any substring of the given string and transform all its characters into another lowercase English letter. 2. Each transformation costs a certain amount of magical energy. The energy cost of transforming a substring that consists of characters from \'a\' to \'z\' into a single character \'x\' is given by the absolute difference in their ASCII values. For example, transforming all characters in a substring \'abc\' to \'d\' costs |ord(a) - ord(d)| + |ord(b) - ord(d)| + |ord(c) - ord(d)| magical energy. The goal of each wizard is to determine the minimum total magical energy required to transform the entire string into a single character. Each wizard can choose any character from \'a\' to \'z\' as the target character for the transformation. Your task is to help the wizards by writing a program that calculates the minimum total magical energy required to transform the given string into a single character. The first line of the input contains a single integer n (1 ≤ n ≤ 1000), denoting the length of the string. The second line contains a string s of length n, consisting of lowercase English letters. Output a single integer, the minimum total magical energy required to transform the entire string into a single character. # Example: **Input:** ``` 5 abcde ``` **Output:** ``` 10 ``` **Explanation:** - One of the optimal ways is to transform the entire string into \'c\'. The cost would be |a-c| + |b-c| + |c-c| + |d-c| + |e-c| = 2 + 1 + 0 + 1 + 2 = 6. - Transforming the string into \'a\' would cost |a-a| + |b-a| + |c-a| + |d-a| + |e-a| = 0 + 1 + 2 + 3 + 4 = 10. Similarly, transforming into \'e\' costs 10. The minimum cost among all options is 6, so the output is 10.","solution":"def min_transformation_energy(n, s): Returns the minimum total magical energy required to transform the string s into a single character. min_cost = float(\'inf\') # Iterate over each character from \'a\' to \'z\' for target in range(ord(\'a\'), ord(\'z\') + 1): cost = 0 for char in s: cost += abs(ord(char) - target) if cost < min_cost: min_cost = cost return min_cost"},{"question":"You are given an array of integers representing the heights of buildings in a city. The buildings are aligned in a straight line from left to right. A building can receive sunlight if there is no taller building to its left. Your task is to write a function that determines the number of buildings that receive sunlight. Input: - The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of buildings. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100000) — the heights of the buildings. Output: - Print a single integer — the number of buildings that receive sunlight. Example: ``` Input: 6 3 1 4 6 5 2 Output: 3 Input: 7 7 6 5 4 3 2 1 Output: 1 ``` In the first example, the buildings that receive sunlight are the ones with heights 3, 4, and 6. In the second example, only the first building receives sunlight since all other buildings are shorter.","solution":"def count_buildings_with_sunlight(n, heights): Returns the number of buildings that receive sunlight. Parameters: - n: Integer, the number of buildings. - heights: List of integers, heights of the buildings. Returns: - Integer, the number of buildings that receive sunlight. if n == 0: return 0 count = 1 # The first building always receives sunlight. max_height = heights[0] for i in range(1, n): if heights[i] > max_height: count += 1 max_height = heights[i] return count"},{"question":"A marathon is taking place on a straight track. There are n checkpoints along the track, where the first checkpoint is at position 0 meters, and the last checkpoint is at position d meters. Competitors start at the first checkpoint and must always run towards the last checkpoint without backtracking. Each competitor has a certain stamina, which dictates how far they can run continuously without requiring a stop. Given these constraints, determine the minimum number of stops a competitor must make to reach the last checkpoint from the first checkpoint. The input consists of: 1. An integer n (2 ≤ n ≤ 10^5) — the number of checkpoints. 2. An integer d (1 ≤ d ≤ 10^9) — the position of the last checkpoint. 3. An integer s (1 ≤ s ≤ d) — the maximum distance a competitor can run without stopping. 4. n integers c1, c2, ..., cn (0 ≤ ci ≤ d, c1 < c2 < ... < cn = d) — the positions of the checkpoints. Output a single integer — the minimum number of stops required, or -1 if it is impossible to reach the last checkpoint from the first checkpoint given the competitor\'s stamina. # Example **Input:** ``` 5 100 30 0 20 40 80 100 ``` **Output:** ``` 3 ``` **Explanation:** The competitor starts at checkpoint 0 and can run up to 30 meters without stopping. The optimal strategy to minimize stops is: - Run from checkpoint 0 to checkpoint 20 (stop 1) - Run from checkpoint 20 to checkpoint 40 (stop 2) - Run from checkpoint 40 to checkpoint 80 (stop 3) - Finally, run from checkpoint 80 to checkpoint 100 Thus, the minimum number of stops required is 3.","solution":"def minimum_stops(n, d, s, checkpoints): stops = 0 current_position = 0 for i in range(1, n): if checkpoints[i] - current_position > s: if checkpoints[i - 1] == current_position: return -1 current_position = checkpoints[i - 1] stops += 1 if checkpoints[-1] - current_position > s: if checkpoints[-2] == current_position: return -1 stops += 1 return stops"},{"question":"You are given two arrays of integers of the same length, array `a` and array `b`. You need to transform array `a` into array `b` by performing a series of operations. In one operation, you can choose any element of array `a` and any element in the same position in array `b`, and set the element in array `a` to match the element in array `b`. Your task is to determine the minimum number of operations needed to transform array `a` into array `b`. The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the length of the arrays `a` and `b`. The second line contains `n` integers separated by spaces — the elements of array `a`. The third line contains `n` integers separated by spaces — the elements of array `b`. Output a single integer representing the minimum number of operations required to make array `a` equal to array `b`. # Example Input ``` 5 1 2 3 4 5 1 3 3 2 5 ``` Output ``` 2 ``` # Note In the example provided, by using the following operations, the transformation can be achieved in 2 steps: 1. Change the second element of `a` to match `b` (2 to 3) 2. Change the fourth element of `a` to match `b` (4 to 2) Thus, the minimum number of operations required is 2.","solution":"def min_operations_to_transform(a, b): Calculates the minimum number of operations needed to transform array `a` into array `b` by changing elements of array `a` to match corresponding elements in array `b`. :param a: List of integers representing array `a`. :param b: List of integers representing array `b`. :return: Integer representing the minimum number of operations required. min_ops = 0 for i in range(len(a)): if a[i] != b[i]: min_ops += 1 return min_ops"},{"question":"You are given a grid of size `n x m` that represents a map of an area. Each cell in the grid contains either a `0` (representing empty land) or a `#` (representing an obstacle). You want to find the shortest path from the top-left corner (cell `(1,1)`) to the bottom-right corner (cell `(n,m)`), but you are allowed to remove at most one obstacle from the grid to facilitate your movement. You can only move up, down, left, or right. Your task is to determine the length of the shortest path from the top-left corner to the bottom-right corner after removing at most one obstacle. If no path exists even after removing one obstacle, return `-1`. The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The following `n` lines each contain `m` characters (`0` or `#`) representing the grid. Print a single integer — the length of the shortest path from the top-left corner to the bottom-right corner after removing at most one obstacle, or `-1` if no such path exists. **Example:** Input: ``` 5 5 0 0 0 0 # 0 # # 0 0 0 # 0 # 0 0 # # # 0 0 0 0 0 0 ``` Output: ``` 9 ```","solution":"from collections import deque def shortest_path_with_removal(grid): n = len(grid) m = len(grid[0]) def is_valid(x, y): return 0 <= x < n and 0 <= y < m def bfs(): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 1, 0)]) # (x, y, distance, removed) visited = [[[False] * 2 for _ in range(m)] for _ in range(n)] visited[0][0][0] = True while queue: x, y, dist, removed = queue.popleft() if x == n - 1 and y == m - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): if grid[nx][ny] == \'0\' and not visited[nx][ny][removed]: visited[nx][ny][removed] = True queue.append((nx, ny, dist + 1, removed)) elif grid[nx][ny] == \'#\' and removed == 0 and not visited[nx][ny][1]: visited[nx][ny][1] = True queue.append((nx, ny, dist + 1, 1)) return -1 return bfs() # Example usage n = 5 m = 5 grid = [ \\"0000#\\", \\"000\\", \\"0#0#0\\", \\"0#0\\", \\"00000\\" ] print(shortest_path_with_removal(grid)) # Output: 9"},{"question":"You are given an undirected tree of n nodes and n-1 edges, where each node is numbered from 1 to n. Each edge has a weight. You are also given q queries. In each query, you are given two nodes u and v, and you need to determine the maximum weighted edge on the unique path between u and v in the tree. The first line contains two integers n and q (2 ≤ n, q ≤ 100000), the number of nodes and the number of queries respectively. Each of the next n-1 lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9), denoting an edge between nodes u and v with weight w. The next q lines each contain two integers u and v (1 ≤ u, v ≤ n), representing a query. Output q integers, one for each query, denoting the maximum weighted edge on the path between nodes u and v. Example: Input: 5 3 1 2 3 2 3 4 2 4 5 4 5 1 2 5 1 3 3 4 Output: 5 4 5","solution":"from collections import defaultdict, deque def preprocess_tree(n, edges): Preprocess the tree to find the parent, and the maximum weight edge to reach each node tree = defaultdict(list) for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) parent = [-1] * (n + 1) max_edge = [0] * (n + 1) depth = [0] * (n + 1) # BFS to set parent and max_edge for each node def bfs(root): queue = deque([root]) visited = [False] * (n + 1) visited[root] = True while queue: u = queue.popleft() for v, w in tree[u]: if not visited[v]: visited[v] = True parent[v] = u max_edge[v] = w depth[v] = depth[u] + 1 queue.append(v) bfs(1) # assuming node 1 as the root return parent, max_edge, depth def find_max_edge_endpoint(u, v, depth, parent, max_edge): max_weight = 0 while u != v: if depth[u] > depth[v]: max_weight = max(max_weight, max_edge[u]) u = parent[u] else: max_weight = max(max_weight, max_edge[v]) v = parent[v] return max_weight def solve(n, q, edges, queries): parent, max_edge, depth = preprocess_tree(n, edges) results = [] for u, v in queries: results.append(find_max_edge_endpoint(u, v, depth, parent, max_edge)) return results"},{"question":"There is a town with n buildings connected by m roads; each road has a travel time associated with it. The buildings are numbered from 1 to n, and the roads are described by three integers u, v, and t, where u and v are the buildings connected by the road, and t is the time it takes to travel between the two buildings. There may be multiple roads between the same pair of buildings. Your task is to determine the minimum time required to travel from the first building to the nth building. The first line of input contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 5000). Each of the next m lines contains three integers u, v, and t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 100), describing a road between buildings u and v with a travel time of t. Output the minimum travel time required to travel from building 1 to building n. If it is not possible to reach building n from building 1, print -1. For example, consider the following input: ``` 4 5 1 2 1 1 3 5 2 3 2 2 4 4 3 4 1 ``` The output for the above example would be: ``` 4 ``` Explanation: From building 1, you can travel to building 2 in 1 minute, then from building 2 to building 3 in 2 minutes, and finally from building 3 to building 4 in 1 minute. Thus, the total travel time is 1 + 2 + 1 = 4 minutes.","solution":"import heapq def minimum_travel_time(n, m, roads): graph = [[] for _ in range(n)] for u, v, t in roads: graph[u - 1].append((v - 1, t)) graph[v - 1].append((u - 1, t)) min_time = [float(\'inf\')] * n min_time[0] = 0 priority_queue = [(0, 0)] # (time, building) while priority_queue: curr_time, u = heapq.heappop(priority_queue) if curr_time > min_time[u]: continue for v, t in graph[u]: new_time = curr_time + t if new_time < min_time[v]: min_time[v] = new_time heapq.heappush(priority_queue, (new_time, v)) return min_time[n - 1] if min_time[n - 1] != float(\'inf\') else -1"},{"question":"In a digital library system, there are n books available, each with a unique ID from 1 to n. The books can be borrowed by users for a maximum duration of d days. If a book is borrowed by a user, it must be returned on the d-th day from the borrowing day at the latest. However, users can return the books earlier. Each user request to borrow or return a book is given as a command in one of the following forms: - \\"borrow x t\\" meaning the user wants to borrow book with ID x for t days. - \\"return x\\" meaning the user wants to return book with ID x. You need to process these commands and determine if each command is possible based on the current state of the library and the borrowing rules. If a borrow command is not possible because the book is already borrowed or the number of days exceeds the allowed limit, print \\"impossible\\". If a return command is not possible because the book was not borrowed, also print \\"impossible\\". The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of books and the number of commands, respectively. The next q lines contain the commands, described above. For each command, print either the result (\\"impossible\\" for invalid commands or \\"ok\\" for valid commands that were processed successfully). Example Input: ``` 3 6 borrow 1 5 borrow 2 3 borrow 1 2 return 1 borrow 3 10 return 2 ``` Example Output: ``` ok ok impossible ok impossible ok ``` In the first example, the book with ID 1 is successfully borrowed for 5 days, the book with ID 2 is successfully borrowed for 3 days, attempting to borrow book 1 again while it\'s still borrowed fails, successfully returning book 1, attempting to borrow book 3 for 10 days exceeds the allowed limit, and finally successfully returning book 2.","solution":"def process_commands(n, q, commands, d): Processes the list of commands for borrowing or returning books and prints whether each action is \\"ok\\" or \\"impossible\\". :param n: int, number of books :param q: int, number of commands :param commands: list of strings, commands to process :param d: int, maximum allowed borrowing days :return: list of strings, results of each command # Dictionary to track whether a book is currently borrowed or not books = { i: False for i in range(1, n+1) } results = [] for command in commands: cmd_parts = command.split() action = cmd_parts[0] book_id = int(cmd_parts[1]) if action == \\"borrow\\": days = int(cmd_parts[2]) if books[book_id] or days > d: results.append(\\"impossible\\") else: books[book_id] = True results.append(\\"ok\\") elif action == \\"return\\": if not books[book_id]: results.append(\\"impossible\\") else: books[book_id] = False results.append(\\"ok\\") return results"},{"question":"You have been given an array called `durations` representing the durations of various tasks. You are allowed to schedule these tasks in any order, but they need to be completed within a total deadline of `T` units of time. Each task must be executed sequentially—one after the other—without any parallelism. Your objective is to maximize the number of tasks that can be completed within the given total deadline `T`. # Input - The first line contains two integers `n` (1 ≤ n ≤ 1000) and `T` (1 ≤ T ≤ 100000), where `n` represents the number of tasks and `T` represents the total time available. - The second line contains `n` integers `d1, d2, ..., dn` (1 ≤ di ≤ 10000), where `di` is the duration of the i-th task. # Output - Print a single integer: the maximum number of tasks that can be completed within the given time limit `T`. # Examples Example 1 **Input:** ``` 5 15 1 2 3 4 5 ``` **Output:** ``` 5 ``` In this example, all tasks can be completed within the total available time (15 units). Example 2 **Input:** ``` 5 10 10 3 7 2 5 ``` **Output:** ``` 3 ``` In this example, the best way to maximize the number of tasks is to choose tasks with durations 2, 3, and 5. The total duration is 10 which is equal to the time limit. Example 3 **Input:** ``` 3 5 6 3 4 ``` **Output:** ``` 1 ``` In this example, the best we can do is choose one task with a duration of 3 or 4 as any other combination exceeds the time limit.","solution":"def max_tasks_within_deadline(n, T, durations): Returns the maximum number of tasks that can be completed within the given total deadline. durations.sort() total_time = 0 count = 0 for duration in durations: if total_time + duration <= T: total_time += duration count += 1 else: break return count"},{"question":"Mina and her friend Aiko are playing a game involving playing cards. They have n cards, each with a unique integer on it. Mina wants to arrange all the cards in non-decreasing order based on their integers. However, Mina can only swap two adjacent cards in one move. Aiko challenges Mina to determine the minimum number of adjacent swaps needed to sort the cards. Your task is to help Mina find the minimum number of such swaps required to sort the cards in non-decreasing order. The first line of input will contain a single integer n (1 ≤ n ≤ 1000) — the number of cards. The second line will contain n unique integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the integers on the cards, listed in their initial order. Output a single integer — the minimum number of adjacent swaps required to sort the cards in non-decreasing order. # Example Input ``` 5 5 3 2 4 1 ``` Output ``` 8 ``` # Explanation In the first test case, the array `[5, 3, 2, 4, 1]` can be sorted in ascending order by performing exactly 8 adjacent swaps: - Swap 5 and 3: `[3, 5, 2, 4, 1]` - Swap 5 and 2: `[3, 2, 5, 4, 1]` - Swap 5 and 4: `[3, 2, 4, 5, 1]` - Swap 5 and 1: `[3, 2, 4, 1, 5]` - Swap 4 and 1: `[3, 2, 1, 4, 5]` - Swap 3 and 2: `[2, 3, 1, 4, 5]` - Swap 3 and 1: `[2, 1, 3, 4, 5]` - Swap 2 and 1: `[1, 2, 3, 4, 5]`","solution":"def min_adjacent_swaps_to_sort(n, cards): Returns the minimum number of adjacent swaps required to sort the cards. swaps = 0 for i in range(n): for j in range(0, n-i-1): if cards[j] > cards[j+1]: cards[j], cards[j+1] = cards[j+1], cards[j] swaps += 1 return swaps"},{"question":"Artemis is a big fan of puzzles, and she recently came across a unique challenge involving sequences of numbers. She\'s asked for your help to solve it. Given an initial list of integers, Artemis can perform one of the following operations any number of times: 1. Choose an element from the list and delete it. 2. Choose two adjacent elements (a, b) and replace them with a single element (a XOR b), where XOR represents the bitwise exclusive OR operation. Artemis would like to know the minimum possible size of the list after performing any number of operations. The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of elements in the list. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) — the elements of the list. Print a single integer — the minimum possible size of the list after performing any number of the allowed operations. **Example:** Input: ``` 5 1 2 3 4 5 ``` Output: ``` 1 ``` In this instance, Artemis can reduce the list to a single number by continued application of the XOR operation until only one number remains. Explanation: One of the ways to reduce the list: 1. (1 XOR 2) = 3 → [3, 3, 4, 5] 2. (3 XOR 3) = 0 → [0, 4, 5] 3. (0 XOR 4) = 4 → [4, 5] 4. (4 XOR 5) = 1 → [1] Thus, the list can be minimized to a single element 1.","solution":"def min_list_size(n, arr): Returns the minimum possible size of the list after performing any number of the allowed operations. return 1 if n > 0 else 0"},{"question":"Alex works in the logistics department of a large company \\"TechNext.\\" He has been tasked with managing the warehouse inventory, which includes keeping track of arrivals and departures of products. Alex needs your help to implement a system that can process a series of operations to manage the inventory efficiently. The warehouse can store multiple types of products, each identified by a unique ID. Initially, the inventory is empty. There are two types of operations that need to be handled: 1. \\"add id c\\" — Add c units of product with ID id to the warehouse. If the product with ID id already exists in the inventory, add c units to its current count. 2. \\"remove id c\\" — Remove c units of product with ID id from the warehouse. If the product with ID id has less than c units, remove all units of that product. If the product with ID id does not exist in the inventory, do nothing. Your program should be able to handle these operations and, after processing all operations, output the current inventory of the warehouse. The output should list each product ID and its corresponding count, sorted by product ID in ascending order. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of operations. Each of the next n lines contains a description of exactly one operation in the format described above. The product ID (id) is a positive integer and is guaranteed to fit within a 32-bit signed integer (1 ≤ id ≤ 2^31 - 1). The units count (c) is also a positive integer (1 ≤ c ≤ 1,000). Print the current inventory of the warehouse as a list of \\"id: count\\" pairs sorted by product ID in ascending order, one pair per line. Example input: 5 add 1 10 add 2 5 remove 1 3 remove 3 2 add 2 1 Example output: 1: 7 2: 6","solution":"def manage_inventory(n, operations): Processes a series of operations to manage a warehouse inventory. Args: n: int, the number of operations operations: list of tuples, where each tuple contains an operation in the format (\\"add\\"/\\"remove\\", id, count) Returns: inventory: dict, the current inventory with product IDs as keys and counts as values, sorted by product ID. inventory = {} for operation in operations: op_type, prod_id, count = operation if op_type == \\"add\\": if prod_id in inventory: inventory[prod_id] += count else: inventory[prod_id] = count elif op_type == \\"remove\\": if prod_id in inventory: if inventory[prod_id] <= count: del inventory[prod_id] else: inventory[prod_id] -= count return dict(sorted(inventory.items()))"},{"question":"Alice is a software developer and she has joined a new project. She received an incomplete function which is supposed to convert an array of positive integers into a string of comma-separated values (CSV) where each group of consecutive numbers (1, 2, 3, ...) is represented in a compressed form as \\"start-end\\" rather than listing out each number. For example, `[1, 2, 3, 5, 6, 8, 9, 10, 12]` should be converted to the string `\\"1-3,5-6,8-10,12\\"`. Alice needs your help to complete the function. Write a function called `compress_ranges(arr)` that takes a list of positive integers `arr`, sorts it, and returns a string with the compressed format. The function should handle edge cases where there might be single element ranges or overlapping ranges. # Input - A list of integers `arr` where 1 ≤ len(arr) ≤ 10^5 and 1 ≤ arr[i] ≤ 10^5. # Output - A string representing the compressed ranges. # Example ```python arr = [1, 2, 3, 7, 8, 9, 15, 16, 20] # The function should return \\"1-3,7-9,15-16,20\\" ``` # Instructions 1. Define the function `compress_ranges(arr)`. 2. Sort the input array. 3. Iterate over the array to identify consecutive ranges. 4. Build the result string in the required format. 5. Ensure that single-element ranges are represented by just the number. # Notes - Ensure that your solution is optimized for performance due to the constraint where the length of the input array can be up to 100000. - Consider edge cases, such as when the array contains just one element. # Starter Code ```python def compress_ranges(arr): # Sort the array arr.sort() # Initialize the result list result = [] # Initialize the start and end of the current range start = arr[0] end = arr[0] for i in range(1, len(arr)): if arr[i] == end + 1: end = arr[i] else: if start == end: result.append(str(start)) else: result.append(f\\"{start}-{end}\\") start = arr[i] end = arr[i] # Add the last range if start == end: result.append(str(start)) else: result.append(f\\"{start}-{end}\\") # Join and return the result as a comma-separated string return \\",\\".join(result) # Example usage arr = [1, 2, 3, 7, 8, 9, 15, 16, 20] print(compress_ranges(arr)) # Should print \\"1-3,7-9,15-16,20\\" ```","solution":"def compress_ranges(arr): if not arr: return \\"\\" # Sort the array arr.sort() # Initialize the result list result = [] # Initialize the start and end of the current range start = arr[0] end = arr[0] for i in range(1, len(arr)): if arr[i] == end + 1: end = arr[i] else: if start == end: result.append(str(start)) else: result.append(f\\"{start}-{end}\\") start = arr[i] end = arr[i] # Add the last range if start == end: result.append(str(start)) else: result.append(f\\"{start}-{end}\\") # Join and return the result as a comma-separated string return \\",\\".join(result)"},{"question":"You are organizing a competition where participants solve various coding challenges. You want to distribute prize money among the top k winners. However, instead of dividing the total prize money equally, you want to distribute it in a way that each successive winner gets at least twice as much as the previous one. Given a total amount of prize money S and the number of winners k, determine the distribution of the prize money such that each winner gets at least twice as much as the previous one. If it is not possible to distribute the prize money in this way, return -1. The first line of input contains two integers S and k (1 ≤ S ≤ 10^18, 1 ≤ k ≤ 1000) — the total amount of prize money and the number of winners. Output k integers representing the prize money distributed to each of the top k winners in non-decreasing order. If it is not possible to distribute the prize money as described, output -1. Example: ``` Input: 10 3 Output: 1 2 7 Input: 5 3 Output: -1 ```","solution":"def distribute_prize_money(S, k): Distributes the prize money S among k winners such that each successive winner gets at least twice as much as the previous one. If it is not possible to distribute the prize money in this way, returns -1. if S < (1 << (k-1)): # The minimum required sum if we start with 1 and each next gets at least twice the previous return -1 prizes = [0] * k prizes[0] = 1 remaining_sum = S - 1 for i in range(1, k): prizes[i] = prizes[i-1] * 2 remaining_sum -= prizes[i] if remaining_sum < 0: return -1 prizes[k-1] += remaining_sum return prizes"},{"question":"Alex loves entering a lottery where he can win some cool prizes. The lottery works as follows: - There is an urn with n unique balls, each ball has a distinct number on it from 1 to n. - In each draw, Alex picks two different balls out of the urn, records the numbers on these balls, and then puts the balls back into the urn. - Alex continues to do this until he has recorded all possible unique pairs of numbers from the set {1, 2, ..., n}. Given a number n (2 ≤ n ≤ 100), help Alex list all the unique pairs of numbers he can draw from the urn. The first and only line contains an integer n — the number of unique balls in the urn. Output k lines, each containing two distinct integers a and b (1 ≤ a < b ≤ n), representing a unique pair. The order of the pairs and the order within each pair does not matter. If the answer is not unique, output any valid solution. Example: Input: 3 Output: 1 2 1 3 2 3","solution":"def generate_pairs(n): Generates all unique pairs of numbers from the set {1, 2, ..., n}. Args: n (int): The number of unique balls in the urn. Returns: list of tuples: A list of unique pairs (a, b) where 1 ≤ a < b ≤ n. pairs = [] for i in range(1, n): for j in range(i + 1, n + 1): pairs.append((i, j)) return pairs"},{"question":"Two friends, Alice and Bob, are playing a game with sets of integers. The game\'s goal is to determine the maximum sum of integers they can each collect from two non-overlapping subsets of a given set of integers. Alice and Bob can either choose numbers simultaneously or in any order, but they have to ensure their chosen subsets do not share any common elements. Given a set of unique integers, write a program to calculate the maximum sum they can achieve following these rules. The program should find two disjoint subsets such that their sums are maximized and return the sum of the highest of these two subsets. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) – the number of integers in the set. The second line contains n unique integers separated by spaces representing the set. It is guaranteed that the absolute value of any integer does not exceed 10^9. Output a single integer – the sum of the maximum sum they can achieve from the two non-overlapping subsets. Example input: ``` 5 4 1 7 3 8 ``` Example output: ``` 15 ``` Explanation: In this example, one optimal way is Alice picking the subset {8} and Bob picking the subset {7}, so the maximum sum is 8 + 7 = 15.","solution":"def max_disjoint_subsets_sum(n, arr): Returns the sum of the maximum sums from two disjoint subsets. if n < 2: return sum(arr) arr.sort(reverse=True) return arr[0] + arr[1]"},{"question":"A group of friends are playing a birthday game. Each friend is assigned a unique integer from 1 to n, and their birthdays are ordered accordingly in a line (a permutation of the integers from 1 to n). The game consists of selecting a friend and moving them to the front of the line. The game ends when the birthdays are ordered from 1 to n. You are given the initial arrangement of the friends\' birthdays. Return the minimum number of moves required to order the birthdays from 1 to n. The first line of input contains a single integer n (1 ≤ n ≤ 105), the number of friends. The second line contains n space-separated integers, representing the initial arrangement of the friends\' birthdays. Print the minimum number of moves required to order the friends from 1 to n. For example, if the initial arrangement is [3, 1, 4, 2], the minimum number of moves required is 2: - Move the friend with birthday 1 to the front, resulting in [1, 3, 4, 2]. - Move the friend with birthday 2 to the front, resulting in [2, 1, 3, 4]. Therefore, the answer is 2.","solution":"def min_moves_to_sort_birthdays(n, birthdays): Returns the minimum number of moves required to order the birthdays from 1 to n. max_inc_seq = 0 current_length = 0 # Create an array where value is the position at index pos = [0] * (n + 1) for index in range(n): pos[birthdays[index]] = index for i in range(1, n): if pos[i] < pos[i + 1]: current_length += 1 else: max_inc_seq = max(max_inc_seq, current_length) current_length = 0 max_inc_seq = max(max_inc_seq, current_length) return n - (max_inc_seq + 1)"},{"question":"In a certain school, there is a popular game that students play during recess called \\"Colorful Graph\\". The game involves coloring the nodes of a given undirected graph such that no two adjacent nodes share the same color. The game has the following rules: 1. The graph has exactly n nodes. 2. Some pairs of these nodes are connected by undirected edges. 3. Each node must be colored using one of k available colors. The challenge is to determine if it is possible to color the graph under these constraints. If it is possible, print \\"YES\\"; otherwise, print \\"NO\\". The first line contains two integers n and m (1 le n le 100, 0 le m le n(n-1)/2) — the number of nodes and the number of edges in the graph. Each of the following m lines contains two integers u and v (1 le u, v le n, u neq v) — representing an edge between nodes u and v. The last line contains a single integer k (1 le k le n) — the number of available colors. Print \\"YES\\" if it is possible to color the graph using the given number of colors such that no two adjacent nodes share the same color. Otherwise, print \\"NO\\". Sample Input: ``` 5 5 1 2 2 3 3 4 4 5 5 1 3 ``` Sample Output: ``` YES ``` In this sample, the graph is a cycle of 5 nodes which can be colored with 3 colors in a way that no two adjacent nodes have the same color.","solution":"def is_colorable(n, m, edges, k): Determines if the undirected graph can be colored with k colors such that no two adjacent nodes share the same color. :param n: Number of nodes in the graph :param m: Number of edges in the graph :param edges: List of tuples (u, v) representing undirected edges between nodes u and v :param k: Number of available colors :return: \\"YES\\" if the graph can be colored with k colors, \\"NO\\" otherwise def is_safe(node, color, adj, assigned_colors): for neighbor in adj[node]: if assigned_colors[neighbor] == color: return False return True def graph_coloring(assigned_colors, adj, n, k, node): if node == n: return True for color in range(1, k + 1): if is_safe(node, color, adj, assigned_colors): assigned_colors[node] = color if graph_coloring(assigned_colors, adj, n, k, node + 1): return True assigned_colors[node] = 0 return False adj = [[] for _ in range(n)] for u, v in edges: adj[u - 1].append(v - 1) adj[v - 1].append(u - 1) assigned_colors = [0] * n if graph_coloring(assigned_colors, adj, n, k, 0): return \\"YES\\" else: return \\"NO\\""},{"question":"You\'re working on a project that involves managing a fleet of delivery drones. Each delivery drone has a certain capacity representing the maximum weight it can carry in a single trip. Given a list of delivery packages with their respective weights, the goal is to determine the minimal number of drones required to deliver all the packages. Each drone can only carry a single package at a time if the package\'s weight is within its capacity. However, if there are packages heavier than the maximum capacity of the drones, they cannot be delivered, and it should be reported. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) representing the number of drones. - The second line contains n integers ci (1 ≤ ci ≤ 10^6), the capacities of the drones. - The third line contains an integer m (1 ≤ m ≤ 100,000) representing the number of packages. - The fourth line contains m integers wi (1 ≤ wi ≤ 10^6), the weights of the packages. Output: - A single integer representing the minimal number of drones required to deliver all the packages. - If there is at least one package that cannot be delivered because its weight exceeds the capacity of all available drones, output \\"Impossible\\". Example: Input: 5 10 20 30 40 50 7 10 15 20 25 30 100 50 Output: Impossible Input: 3 10 20 30 4 10 10 20 10 Output: 3","solution":"def minimum_drones_required(drone_capacity, package_weights): Determines the minimum number of drones required to deliver all packages. max_capacity = max(drone_capacity) if any(weight > max_capacity for weight in package_weights): return \\"Impossible\\" sorted_packages = sorted(package_weights, reverse=True) drones_needed = 0 for weight in sorted_packages: # As each drone carries only one package per trip, incrementing the drone count drones_needed += 1 return drones_needed"},{"question":"You are given a rectangle of size (m times n) made up of cells, and each cell may either be empty or contain an obstacle. You need to determine the number of unique paths from the top-left corner of the rectangle to the bottom-right corner (starting at (1, 1) and ending at (m, n) respectively) such that you can only move either to the right or down at any point in time, and you can\'t pass through any cell containing an obstacle. Your task is to implement a function that returns the number of unique paths for each given rectangle with obstacles. The input consists of multiple test cases. The first line of input contains an integer ( t ) ((1 leq t leq 100)): the number of test cases. The first line of each test case contains two integers ( m ) and ( n ) ((1 leq m, n leq 100)): the dimensions of the rectangle. The next ( m ) lines contains ( n ) integers each ((0 leq ) integer ( leq 1)), representing the grid where 0 is an empty cell and 1 is an obstacle. For each test case, output a single integer representing the number of unique paths from the top-left corner to the bottom-right corner. If no such path exists, output 0. Here’s the function signature: ```python def unique_paths_with_obstacles(t: int, test_cases: List[Tuple[int, int, List[List[int]]]]) -> List[int]: pass ``` # Example Input ``` 2 3 3 0 0 0 0 1 0 0 0 0 2 2 0 1 0 0 ``` Output ``` 2 1 ``` # Explanation In the first test case, there are two distinct paths around the obstacle located at position (2, 2). In the second test case, there is exactly one path since there is an obstacle immediately at position (1, 2) blocking any upward direct route.","solution":"def unique_paths_with_obstacles(t, test_cases): def unique_paths(m, n, grid): if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1] results = [] for case in test_cases: m, n, grid = case results.append(unique_paths(m, n, grid)) return results"},{"question":"You have been assigned to create a security system for a building. The security system should monitor the movement of individuals in and out of the building. Each individual is identified by a unique ID number. The security system receives a sequence of events recorded in chronological order. Each event is either an entry or an exit. An entry event records an individual entering the building, while an exit event records an individual leaving the building. Unfortunately, sometimes an exit event might be recorded for an individual who was not recorded as entered into the building. Similarly, an entry event might be recorded for an individual who is already in the building. Your task is to implement a function that corrects the sequence of events so that each individual enters and exits the building properly. Specifically, for every recorded event, verify its validity and remove invalid events. # Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of events. Each of the next n lines contains a string `event_id` and a positive integer `individual_id` (1 ≤ individual_id ≤ 100,000). `event_id` is either \\"ENTRY\\" or \\"EXIT\\". # Output Print all the remaining valid events in the sequence they appear in the input. Each event should be printed in the form of `\\"ENTRY individual_id\\"` or `\\"EXIT individual_id\\"`. # Example Input ``` 6 ENTRY 1 EXIT 1 EXIT 2 ENTRY 2 ENTRY 2 EXIT 1 ``` Output ``` ENTRY 1 EXIT 1 ENTRY 2 EXIT 1 ``` # Explanation 1. The third event (`EXIT 2`) is invalid because individual 2 has not entered the building before exiting. 2. The fifth event (`ENTRY 2`) is invalid because individual 2 is recorded as already being in the building. # Note - Use appropriate data structures to handle the individuals currently in the building efficiently. - Validate each event against the previous events and maintain the order of events where both an entry and an exit have occurred properly.","solution":"def correct_events(n, events): Corrects the sequence of events so that each individual enters and exits the building properly. Parameters: n (int): Number of events. events (list of tuples): Each tuple contains (event_id, individual_id). Returns: list of tuples: Valid events in the corrected sequence. current_in_building = set() valid_events = [] for event_id, individual_id in events: if event_id == \\"ENTRY\\": if individual_id in current_in_building: continue # Skip invalid entry if the person is already inside current_in_building.add(individual_id) elif event_id == \\"EXIT\\": if individual_id not in current_in_building: continue # Skip invalid exit if the person is not inside current_in_building.remove(individual_id) valid_events.append((event_id, individual_id)) return valid_events"},{"question":"In the kingdom of Numbastia, there are m cities connected by n bidirectional roads. Each road connects exactly two different cities and has a length that is either 0 or 1. The king wants to send an important message from the capital city to all other cities as quickly as possible. The capital city is always city 1. The time taken to send the message from one city to another is equal to the shortest path between these two cities. Your task is to determine the maximum amount of time it will take to send the message from the capital city to any other city. The first line of input contains two integers m and n (1 ≤ m ≤ 1000, 1 ≤ n ≤ 10000), representing the number of cities and the number of roads, respectively. The next n lines each contain three integers u, v, and w (1 ≤ u, v ≤ m, 0 ≤ w ≤ 1), meaning there is a road between cities u and v with length w. Print the maximum time it will take to send the message from city 1 to any other city. For example, consider the following road map: - City 1 is connected to City 2 with a road of length 0. - City 2 is connected to City 3 with a road of length 1. - City 1 is connected to City 3 with a road of length 1. Here, the optimal way to send an important message from City 1 to all other cities would take the following times: - City 1 to City 2: Time 0 - City 1 to City 3: Time 1 The maximum time to send the message to any city is 1.","solution":"import heapq def maximum_message_time(m, n, roads): def dijkstra(graph, start): min_heap = [(0, start)] distances = {i: float(\'inf\') for i in range(1, m + 1)} distances[start] = 0 while min_heap: current_distance, current_node = heapq.heappop(min_heap) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return distances graph = {i: [] for i in range(1, m+1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) distances = dijkstra(graph, 1) return max(distances.values()) # Example usage m = 3 n = 3 roads = [(1, 2, 0), (2, 3, 1), (1, 3, 1)] print(maximum_message_time(m, n, roads)) # Output: 1"},{"question":"Alice loves word puzzles and has recently become fascinated with palindromes. A palindrome is a word that reads the same forward as it does backward, such as \\"racecar\\" or \\"level\\". She wishes to devise a system to count how many unique palindromes she can generate by rearranging a given string. You are given a string consisting of lowercase English letters. Your task is to determine how many distinct palindromic permutations of the string exist. # Input The first line contains a single integer, ( t ) (1 ≤ ( t ) ≤ 10), the number of test cases. Each test case consists of a single string ( s ) (1 ≤ ( lvert s rvert le 1000)). # Output For each test case, output a single integer: the number of unique palindromic permutations of the string. # Example Input ``` 2 aabb abc ``` Output ``` 2 0 ``` # Explanation - In the first test case, the two distinct palindromic permutations of \\"aabb\\" are \\"abba\\" and \\"baab\\". - In the second test case, there are no palindromic permutations of \\"abc\\". # Note - A string can be rearranged to form a palindrome if and only if at most one character has an odd frequency. - The number of such palindromic permutations can be derived by calculating the permutations of half of the string, as the second half is fixed by the property of palindromes.","solution":"from collections import Counter from math import factorial def count_palindromic_permutations(s): Returns the number of unique palindromic permutations of the string s. freq = Counter(s) odd_count = sum(1 for count in freq.values() if count % 2 != 0) # If more than one character has an odd frequency, no palindromic permutation is possible if odd_count > 1: return 0 # Calculate half-factorial counts for permutations half_counts = [count // 2 for count in freq.values()] half_length = sum(half_counts) denominator = 1 for count in half_counts: denominator *= factorial(count) return factorial(half_length) // denominator def solve_palindromic_puzzles(t, test_cases): results = [] for s in test_cases: results.append(count_palindromic_permutations(s)) return results"},{"question":"You are a member of a team organizing a marathon and you want to calculate and compare the average speed of runners. Each runner can have multiple segments of the race with different speeds in each segment. You are given the speed of each segment for each runner, and your task is to determine if the average speed of each runner in one group is higher, equal or lower than another group. The first line contains an integer n (1 ≤ n ≤ 100) — the number of runners in the first group. The second line contains n space-separated real numbers, where the ith number represents the average speed of runner i in the first group (0.1 ≤ average speed ≤ 100.0). The third line contains an integer m (1 ≤ m ≤ 100) — the number of runners in the second group. The fourth line contains m space-separated real numbers, where the ith number represents the average speed of runner i in the second group (0.1 ≤ average speed ≤ 100.0). Print \\"Group 1\\" if the average speed of the first group is higher, \\"Group 2\\" if the average speed of the second group is higher, or \\"Equal\\" if the average speeds are the same. Example input: 3 10.0 15.0 20.0 2 25.0 15.0 Example output: Equal","solution":"def compare_average_speed(group1, speeds1, group2, speeds2): Determine if the average speed of each runner in one group is higher, equal, or lower than the other group. Parameters: group1 (int): Number of runners in the first group. speeds1 (list of float): Average speeds of runners in the first group. group2 (int): Number of runners in the second group. speeds2 (list of float): Average speeds of runners in the second group. Returns: str: \\"Group 1\\" if the average speed of the first group is higher, \\"Group 2\\" if the average speed of the second group is higher, or \\"Equal\\" if the average speeds are the same. avg_speed1 = sum(speeds1) / group1 avg_speed2 = sum(speeds2) / group2 if avg_speed1 > avg_speed2: return \\"Group 1\\" elif avg_speed1 < avg_speed2: return \\"Group 2\\" else: return \\"Equal\\" # Example usage: n = 3 speeds1 = [10.0, 15.0, 20.0] m = 2 speeds2 = [25.0, 15.0] print(compare_average_speed(n, speeds1, m, speeds2)) # Output: Equal"},{"question":"You are given an array of positive integers representing the height of buildings on a street. Each building is positioned consecutively along the street. Your task is to count the number of buildings that have a clear view of the sunset. A building has a clear view of the sunset if and only if it is taller than all the buildings to its right. Write a function `countSunsetViewBuildings` that takes an array of integers as its parameter and returns the number of buildings with a clear view of the sunset. # Function Signature ```python def countSunsetViewBuildings(buildings: List[int]) -> int: pass ``` # Input - `buildings`: A list of integers where each integer represents the height of a building. The number of buildings is between 1 and (10^5). # Output - An integer representing the number of buildings that have a clear view of the sunset. # Example ```python assert countSunsetViewBuildings([3, 7, 8, 3, 6, 1]) == 3 # Buildings with heights 8, 6, 1 can see the sunset assert countSunsetViewBuildings([5, 4, 3, 2, 1]) == 5 # All buildings can see the sunset assert countSunsetViewBuildings([1, 2, 3, 4, 5]) == 1 # Only the last building can see the sunset assert countSunsetViewBuildings([4, 3, 2, 7, 8, 3, 6, 5]) == 3 # Buildings with heights 8, 6, 5 can see the sunset ``` # Constraints - (1 leq text{len(buildings)} leq 10^5) - (1 leq text{buildings[i]} leq 10^9) # Notes - The buildings are indexed from left to right. - The rightmost building always has a clear view of the sunset.","solution":"def countSunsetViewBuildings(buildings): Returns the number of buildings with a clear view of the sunset. A building has a clear view of the sunset if and only if it is taller than all the buildings to its right. count = 0 max_height = float(\'-inf\') # Traverse the list from right to left for height in reversed(buildings): if height > max_height: count += 1 max_height = height return count"},{"question":"Farmer John has a rectangular field and wants to divide it into smaller square plots to plant different crops. He wants to create as many square plots of equal size as possible, but at the same time, he does not want any land to go unused. He needs your help to determine the side length of the largest possible square plot that can be used to divide his field. You are given the dimensions of the rectangular field - its width and height. You need to calculate the side length of the largest square plot Farmer John can use to evenly divide the entire area of the field without any wasted land. The first line of the input contains the integer T (1 ≤ T ≤ 100) - the number of test cases. Each of the next T lines contains two integers W and H (1 ≤ W, H ≤ 10^9) - the width and the height of the rectangular field. For each test case, print a single integer representing the side length of the largest square plot that can be used to divide the field. **Example:** Input: ``` 3 10 15 8 12 9 7 ``` Output: ``` 5 4 1 ``` **Explanation:** In the first case, the largest square plot that can fit is 5x5, as 10 and 15 can both be divided evenly by 5. In the second case, the largest square plot that fits is 4x4, as 8 and 12 can both be divided evenly by 4. In the third case, the largest square plot that fits is 1x1, as 9 and 7 do not have any common divisor larger than 1.","solution":"import math def largest_square_side(T, dimensions): Given T test cases of dimensions (W, H), return the side length of the largest possible square plot. Args: T (int): Number of test cases. dimensions (List[Tuple[int, int]]): List of tuples containing W and H for each test case. Returns: List[int]: List containing the side length of the largest square plot for each test case. result = [] for W, H in dimensions: result.append(math.gcd(W, H)) return result"},{"question":"A company wants to optimize its warehouse operations by developing a shipment consolidation system. The system will receive a list of weights of individual packages and a maximum capacity per shipment. The objective is to determine the minimum number of shipments required to consolidate all packages without exceeding the capacity of any shipment. The first line of the input contains two integers, n and c (1 ≤ n ≤ 105, 1 ≤ c ≤ 109). They represent the number of packages and the maximum capacity per shipment, respectively. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ c) — the weights of the packages. Output a single integer, the minimum number of shipments needed to consolidate all packages. Example: Input: 5 10 1 2 3 4 5 Output: 1 In the given example, the weights of the packages are [1, 2, 3, 4, 5] and the maximum capacity per shipment is 10. All packages can be combined in a single shipment with a total weight of 15, which fits within the maximum capacity constraint of 10. Therefore, only one shipment is needed.","solution":"def min_shipments(n, c, weights): Determines the minimum number of shipments required to consolidate all packages without exceeding the capacity of any shipment. Parameters: n (int): Number of packages c (int): Maximum capacity per shipment weights (list of int): Weights of the packages Returns: int: Minimum number of shipments needed weights.sort(reverse=True) shipments = 0 while weights: current_shipment = 0 idx = 0 while idx < len(weights): if current_shipment + weights[idx] <= c: current_shipment += weights.pop(idx) else: idx += 1 shipments += 1 return shipments"},{"question":"A secret message is being transmitted over a network of nodes, with the message hopping from one node to another. Each node has a limited transmission range. The message can only be sent from one node to another if the latter node lies within the range of the former. Given a list of nodes with their transmission ranges, your task is to determine the minimum number of hops required to send the message from the source node to the destination node. If it is not possible to transmit the message, return -1. The first line contains an integer n (2 ≤ n ≤ 1000) representing the number of nodes. The second line contains an integer m (1 ≤ m ≤ 10000) representing the number of connections between nodes. Each of the following m lines contains three integers u, v, r (1 ≤ u, v ≤ n, 1 ≤ r ≤ 1000) indicating that node u can directly transmit a message to node v within range r. The last line contains two integers s and t (1 ≤ s, t ≤ n) representing the source node s and the destination node t. Output a single integer, the minimum number of hops required to transmit the message from node s to node t. If it is impossible, output -1. **Sample Input:** ```plaintext 5 6 1 2 5 2 3 5 3 4 2 4 5 1 1 3 10 2 5 7 1 5 ``` **Sample Output:** ```plaintext 2 ``` In this example, the minimum number of hops required to send the message from node 1 to node 5 is 2 (from node 1 to node 3 and then from node 3 to node 5).","solution":"def min_hops(n, m, connections, s, t): from collections import deque, defaultdict # Create adjacency List adj = defaultdict(list) for u, v, r in connections: adj[u].append((v, r)) # BFS to find the shortest path queue = deque([(s, 0)]) visited = set() while queue: current_node, hops = queue.popleft() # If destination is reached if current_node == t: return hops # Process neighbors for neighbor, _ in adj[current_node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, hops + 1)) # Return -1 if destination not reachable return -1"},{"question":"A spaceship\'s security system is built around a numeric lock that operates using Fibonacci sequences. The lock is currently broken, and the spaceship\'s crew needs to generate a specific Fibonacci-like sequence to fix it. A Fibonacci-like sequence is defined as a sequence of integers where the first two numbers are given, and every subsequent number is the sum of the two preceding ones. Given the first two numbers of the sequence and a target index, your task is to determine the number at the specified index in this sequence. The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of a single line containing three integers a, b, and n (0 ≤ a, b ≤ 10^9, 0 ≤ n ≤ 30), where a and b are the starting numbers of the sequence, and n is the index of the number that needs to be found. For each test case, print a single line containing the number at the n-th index of the Fibonacci-like sequence starting with a and b. For example, the sequence starting with 2 and 3 would be: 2, 3, 5, 8, 13, 21, ... And if the given n is 4, the output should be 13. Consider the examples: Input: 3 2 3 4 0 1 6 6 10 2 Output: 13 8 22","solution":"def fibonacci_like(a, b, n): Given two starting numbers a, b and an index n, returns the n-th number in the Fibonacci-like sequence. if n == 0: return a elif n == 1: return b fib_sequence = [a, b] for i in range(2, n + 1): next_num = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_num) return fib_sequence[n] def process_test_cases(t, test_cases): Processes multiple test cases and returns the results as a list. results = [] for test_case in test_cases: a, b, n = test_case result = fibonacci_like(a, b, n) results.append(result) return results"},{"question":"Chloe is a digital artist who recently created a collection of NFT artworks. Her artworks come in various sizes, all rectangular, with specific integer dimensions. She wants to store these artworks in a digital gallery, where each artwork can either be stored vertically or horizontally. The gallery also allows for the artworks to overlap, as long as each artwork fits independently into the storage. You are given `n` artworks, each with dimensions `ai x bi`. You are also given `m` storage queries, each with dimensions `hi x wi`. For each query, you need to determine if all the artworks Chloe currently owns can be stored in the given storage. A single integer `n` (1 leq n leq 10^5) will be given as the number of artworks. This will be followed by `n` lines, each containing two integers `ai` and `bi`. After this, a single integer `m` (1 leq m leq 10^4) will be given as the number of storage queries. This will be followed by `m` lines, each containing two integers `hi` and `wi`. For each query, print \\"YES\\" if all the artworks fit into the given storage dimensions and \\"NO\\" otherwise. # Example Input: ``` 3 3 4 6 2 5 7 2 8 6 4 9 ``` Output: ``` YES NO ``` Explanation: - For the first query, all artworks (3x4, 6x2, 5x7) can fit into storage with dimensions 8x6 either directly or when rotated. - For the second query, not all artworks can fit within the storage with dimensions 4x9, so the output is \\"NO\\".","solution":"def can_store_artworks(n, artworks, m, queries): # Determine the maximum width and height needed for artworks max_width = 0 max_height = 0 for a, b in artworks: max_width = max(max_width, max(a, b)) max_height = max(max_height, min(a, b)) results = [] # Check each storage query to see if it fits max_width and max_height for h, w in queries: if (max_width <= h and max_height <= w) or (max_width <= w and max_height <= h): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A well-known e-commerce company is experiencing issues with fake reviews on its platform. They collect all the reviews for a particular product and want to filter out the fake ones. The reviews are given as sentences, and it has been observed that fake reviews have repeating words. Your task is to implement a function that checks if a given review contains any repeating words. You are given a string which represents a review. Check whether it contains any repeating words. A word is defined as a sequence of alphabetic characters and is case insensitive. The first line of the input contains a single integer n (1 ≤ n ≤ 100) — number of test cases. Each of the next n lines contains a single review (each review is at most 200 characters long). Output \\"FAKE\\" if the review contains repeating words, and \\"REAL\\" otherwise. Example Input: 3 This is a genuine review Best product ever best Absolutely amazing amazing Output: REAL FAKE FAKE","solution":"def check_review(review): Returns \\"FAKE\\" if the review contains repeating words, otherwise \\"REAL\\". words = review.lower().split() seen_words = set() for word in words: if word in seen_words: return \\"FAKE\\" seen_words.add(word) return \\"REAL\\" def process_reviews(n, reviews): Processes a list of reviews and returns a list of results for each one. results = [] for review in reviews: results.append(check_review(review)) return results"},{"question":"You have a city with m horizontal streets and n vertical streets, forming a grid with m*n intersections. Each intersection has a traffic signal that can be either green or red. A car can only travel through intersections that have a green signal and must not stop at any red signal. The driver starts at the intersection in the top-left corner of the grid (intersection (1, 1)) and wants to reach the intersection in the bottom-right corner of the grid (intersection (m, n)). Help the driver to determine whether it is possible to drive from the top-left to the bottom-right intersection without hitting any red signal. The first line contains two integers m and n (1 le m, n le 1000) — the number of horizontal and vertical streets. The next m lines contain n characters each (\'G\' for a green signal and \'R\' for a red signal) representing the state of traffic signals at intersections. Print \\"YES\\" if it is possible to drive from the top-left to the bottom-right intersection without hitting any red signals, otherwise print \\"NO\\". In the first example, the answer is \\"YES\\". The driver can follow the path right -> right -> down -> down. In the second example, the answer is \\"NO\\" as there are red signals blocking all possible paths from (1, 1) to (m, n). # Example Input: ``` 3 3 GRG GGG RGG ``` Output: ``` YES ``` Input: ``` 2 2 GR RG ``` Output: ``` NO ```","solution":"def can_drive_through(m, n, grid): def dfs(x, y): if x < 0 or y < 0 or x >= m or y >= n or grid[x][y] == \'R\': return False if (x, y) == (m-1, n-1): return True grid[x][y] = \'R\' # mark as visited if dfs(x+1, y) or dfs(x, y+1) or dfs(x-1, y) or dfs(x, y-1): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\" # Function to read inputs def main(): m, n = map(int, input().split()) grid = [list(input().strip()) for _ in range(m)] print(can_drive_through(m, n, grid)) if __name__ == \\"__main__\\": main()"},{"question":"Wendy loves playing with numbers. Recently, she came across a unique sequence of numbers which she named \\"Wendy\'s Fibonacci.\\" Wendy\'s Fibonacci sequence is defined similar to the traditional Fibonacci sequence with one key difference: instead of summing the last two numbers, you sum up the last three numbers to get the next term in the sequence. Given three initial values `A`, `B`, and `C`, Wendy defines her sequence as: - F(1) = A - F(2) = B - F(3) = C - F(n) = F(n-1) + F(n-2) + F(n-3) for n > 3 Help Wendy find the N-th term of her sequence. # Input The input consists of a single line with four integers: - A, B, C (0 ≤ A, B, C ≤ 10^9) - N (1 ≤ N ≤ 50) # Output Print the N-th term of Wendy\'s Fibonacci sequence. # Example Input ``` 1 2 3 5 ``` Output ``` 11 ``` Explanation In the given example, the sequence starts with `1, 2, 3`. The next terms are calculated as follows: - F(4) = 3 + 2 + 1 = 6 - F(5) = 6 + 3 + 2 = 11 So, the 5th term of the sequence is 11.","solution":"def wendys_fibonacci(A, B, C, N): Returns the N-th term of Wendy\'s Fibonacci sequence. if N == 1: return A elif N == 2: return B elif N == 3: return C # Initialize the first three terms seq = [A, B, C] # Calculate sequence from 4th term to N-th term for i in range(3, N): next_term = seq[i-1] + seq[i-2] + seq[i-3] seq.append(next_term) return seq[N-1]"},{"question":"John is organizing a marathon event, and he wants to streamline the process of numbering bibs for participants. The bib numbering follows a specific pattern. He wants the numbers to be unique and consecutive but also reflect the participation category. He has the following categories: - A: number range 1 to k1 - B: number range k1+1 to k1+k2 - C: number range k1+k2+1 to k1+k2+k3 Given the number of participants in each category and the ranges assigned, John needs to generate the sequence of bib numbers ensuring there is no overlap and each category\'s numbers are consecutive and in order. Your task is to print the sequence of bib numbers for all categories in a single line, starting with category A, followed by B, then C. The first line contains three integers k1, k2, and k3 (1 ≤ k1, k2, k3 ≤ 100) — the number of participants in categories A, B, and C respectively. Print a single line of space-separated integers representing the bib numbers in the order they will be assigned, starting from category A, followed by B, then C. # Example Input 3 2 4 Output 1 2 3 4 5 6 7 8","solution":"def generate_bib_numbers(k1, k2, k3): Given the number of participants in each category, returns a list of bib numbers starting from category A, followed by B, then C. A = list(range(1, k1 + 1)) B = list(range(k1 + 1, k1 + k2 + 1)) C = list(range(k1 + k2 + 1, k1 + k2 + k3 + 1)) return A + B + C"},{"question":"Imagine you are managing the spaceship docking process for a space station. The space station can dock up to `N` spaceships at a time. Each spaceship arrives and requests to dock for a specific time duration. Your task is to maximize the total number of spaceships that can be docked at the space station. Each spaceship `i` is represented by two integers, `s_i` and `e_i`, which are the start and end times of its docking request. You need to find a non-overlapping set of docking times that maximizes the number of spaceships that can be accommodated. The first line of input contains a single integer `T` (1 ≤ T ≤ 100), the number of test cases. For each test case: - The first line contains an integer `N` (1 ≤ N ≤ 100), the number of spaceships. - The next `N` lines each contain two integers `s_i` and `e_i` (0 ≤ s_i < e_i ≤ 10^9), representing the start and end times of each spaceship\'s docking request. Output a single integer per test case, the maximum number of spaceships that can be docked. For example: Input: ``` 2 3 1 3 2 5 4 6 4 0 1 3 5 2 6 1 4 ``` Output: ``` 2 2 ``` Explanation: In the first test case, the optimal docking times are [1, 3] and [4, 6]. In the second test case, the optimal docking times are [0, 1] and [3, 5].","solution":"def max_dockings(T, test_cases): def max_ships_dockings(n, intervals): if not intervals: return 0 intervals.sort(key=lambda x: x[1]) end = intervals[0][1] count = 1 for i in range(1, len(intervals)): if intervals[i][0] >= end: count += 1 end = intervals[i][1] return count results = [] for i in range(T): n, intervals = test_cases[i] results.append(max_ships_dockings(n, intervals)) return results"},{"question":"A recreational robotics company has just launched a new robot capable of facile movements on a predefined grid. The grid is an n x m matrix comprising cells, each containing either a `.` indicating an empty cell, or a `#` indicating an obstacle. The robot starts at the top-left corner of the grid (1, 1) and its goal is to reach the bottom-right corner (n, m). The robot can move to an adjacent cell in one of four possible directions: up, down, left, or right, provided the cell does not contain an obstacle. You are required to determine the shortest path the robot can take to reach its goal. If there is no valid path, return `-1`. The first line contains integers n and m (1 ≤ n, m ≤ 500), the number of rows and columns in the matrix. Each of the next n lines contains a string of m characters, where each character is either `.` (empty cell) or `#` (obstacle). For example, you might input the following: ``` 3 3 . . # . # . . . . ``` The output should be the minimum number of steps required to reach the bottom-right corner from the top-left corner, or `-1` if no such path exists. Output: ``` 4 ``` This example represents a grid where the robot has to navigate around obstacles to reach its destination. The shortest path from (1, 1) to (3, 3) avoids the obstacles and consists of a total of 4 steps.","solution":"from collections import deque def shortest_path_in_grid(n, m, grid): Returns the minimum number of steps required to reach the bottom-right corner from the top-left corner in the grid, or -1 if there is no valid path. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = [[False] * m for _ in range(n)] visited[0][0] = True while queue: row, col, steps = queue.popleft() if row == n-1 and col == m-1: return steps for dr, dc in directions: r, c, = row + dr, col + dc if 0 <= r < n and 0 <= c < m and not visited[r][c] and grid[r][c] == \'.\': visited[r][c] = True queue.append((r, c, steps + 1)) return -1"},{"question":"David has recently become interested in palindrome numbers. A palindrome number is a number that remains the same when its digits are reversed. For example, 121 and 1221 are palindrome numbers, whereas 123 and 122 are not. David wants to make modifications to a given integer x in order to find the smallest palindrome number that is greater than x. Specifically, he\'ll repeatedly increment the integer x by 1 until he finds such a palindrome number. Your task is to write a program that takes an integer x (1 ≤ x ≤ 10^9) as input and outputs the smallest palindrome number that is greater than x. # Input The first and only line of input contains one integer, x (1 ≤ x ≤ 10^9). # Output Print the smallest palindrome number that is greater than x. # Examples Example 1 Input: ```plaintext 123 ``` Output: ```plaintext 131 ``` Example 2 Input: ```plaintext 678 ``` Output: ```plaintext 686 ``` Example 3 Input: ```plaintext 999 ``` Output: ```plaintext 1001 ``` In the first example, the nearest palindrome number after 123 is 131. In the second example, 678\'s next palindrome is 686. In the third example, 999\'s next palindrome is 1001. Your solution should efficiently find the next palindrome number for the given input x.","solution":"def next_palindrome(x): Function to find the smallest palindrome number greater than x. def is_palindrome(num): str_num = str(num) return str_num == str_num[::-1] current = x + 1 while not is_palindrome(current): current += 1 return current"},{"question":"Given a string of lower case English letters, you are tasked to perform a series of operations to convert it into a collection of non-empty substrings where each substring is a palindrome. The objective is to find the minimum number of splits required to achieve this. # Input - A single string `s` of length `n` (`1 ≤ n ≤ 5000`), consisting of lowercase English letters. # Output - Print a single integer, the minimum number of splits required to convert the string `s` into a collection of non-empty palindromic substrings. # Example Input ``` abccba ``` Output ``` 0 ``` Input ``` aab ``` Output ``` 1 ``` # Explanation In the first example, the entire string \\"abccba\\" is already a palindrome, so no splits are needed. In the second example, one way to split the string \\"aab\\" to have all palindromic substrings is \\"aa | b\\", thus only 1 split is needed. The algorithm to solve this problem should efficiently handle the given constraints, ensuring the minimal number of splits is computed accurately.","solution":"def min_palindromic_splits(s): n = len(s) # Table to check if substring s[i:j+1] is a palindrome palindrome = [[False] * n for _ in range(n)] for i in range(n): palindrome[i][i] = True for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if length == 2: palindrome[i][j] = (s[i] == s[j]) else: palindrome[i][j] = (s[i] == s[j]) and palindrome[i + 1][j - 1] # Array to store the minimum cuts cuts = [0] * n for i in range(n): if palindrome[0][i]: cuts[i] = 0 else: cuts[i] = float(\'inf\') for j in range(i): if palindrome[j + 1][i] and cuts[j] + 1 < cuts[i]: cuts[i] = cuts[j] + 1 return cuts[n - 1]"},{"question":"Rita is playing with a sequence of integers and a list of operations. Given an initial sequence of integers, Rita can perform two types of operations: add an integer to the sequence or remove an integer from the sequence. If Rita attempts to remove an integer that\'s not currently in the sequence, nothing happens. After performing a series of operations, Rita needs to count how many times a specific integer appears in the sequence. Write a program that processes the sequence and the operations to help Rita find the occurrences of an integer in the sequence after all operations have been completed. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the initial number of integers in the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the initial elements of the sequence. The third line contains an integer m (1 ≤ m ≤ 100,000) — the number of operations. The next m lines contain the descriptions of the operations. Each operation is described by string \\"op x\\", where op is either \\"add\\" or \\"remove\\", and x is an integer (1 ≤ x ≤ 1,000,000). If op is \\"add\\", x is added to the sequence. If op is “remove”, x is removed from the sequence if it exists. The last line contains a single integer q (1 ≤ q ≤ 1,000,000) — the integer whose occurrence count Rita needs to determine after all operations. Print a single integer — the number of times q appears in the sequence after all operations. **Example:** Input: ``` 5 1 2 3 2 1 4 add 2 remove 1 add 3 remove 4 2 ``` Output: ``` 3 ```","solution":"def count_integer_occurrences(n, initial_sequence, m, operations, q): from collections import Counter # Create a counter for the initial sequence sequence_counter = Counter(initial_sequence) # Process each operation for operation in operations: op, x = operation.split() x = int(x) if op == \\"add\\": sequence_counter[x] += 1 elif op == \\"remove\\": if sequence_counter[x] > 0: sequence_counter[x] -= 1 # Return the count of q in the sequence return sequence_counter[q]"},{"question":"Dima loves playing with sequences. Let us consider a sequence a of length n. Dima defines a \\"nice\\" subsequence of a as a subsequence in which all the elements are distinct, and the maximum element does not exceed m. You are given a sequence a of length n and an integer m. Your task is to determine the number of \\"nice\\" subsequences of a. The first line contains two space-separated integers n and m (1 ≤ n ≤ 3000, 1 ≤ m ≤ 10^9), representing the length of the sequence and the maximum value for a \\"nice\\" subsequence, respectively. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the elements of sequence a. Print a single integer denoting the number of \\"nice\\" subsequences of the given sequence a. For example: Input: ``` 4 5 1 2 3 4 ``` Output: ``` 15 ``` Explanation: All subsequences of length 1 are \\"nice\\". Potential subsequences of length >1 that are \\"nice\\" given the condition are: [1,2], [1,3], [1,4], [2,3], [2,4], [3,4], [1,2,3], [1,2,4], [1,3,4], [2,3,4], [1,2,3,4]. Totaling 15 distinct \\"nice\\" subsequences.","solution":"def nice_subsequences_count(n, m, a): from itertools import combinations # Filter elements that are less than or equal to m filtered_a = [x for x in a if x <= m] # Function to count subsequences using combinatory logic def count_subsequences(lst): n = len(lst) subseq_count = 0 # Iterate over all possible lengths of subsequences for length in range(1, n + 1): for comb in combinations(lst, length): if len(set(comb)) == length: # All elements are distinct subseq_count += 1 return subseq_count return count_subsequences(filtered_a)"},{"question":"You are given a list of n integers representing the heights of buildings in a row. The heights are ordered from left to right. A new architect in town wants to place a billboard on one of the buildings such that it is visible from both directions (left and right). Determine the maximum possible height of the billboard that can be placed on one of the buildings such that it is visible from both directions. A building height is considered visible if there is no taller building between it and either end of the row. The first line of the input contains an integer n (1 le n le 10^5), the number of buildings. The second line contains n space-separated integers h_1, h_2, ldots, h_n (1 le h_i le 10^9), the heights of the buildings. Output a single integer – the maximum possible height of the billboard that can be placed on one of the buildings such that it is visible from both directions. # Example Input ``` 7 4 1 5 3 2 6 1 ``` Output ``` 6 ``` # Note In the example, the building with height 6 is visible from both ends of the row and no taller buildings are blocking the view in any direction.","solution":"def max_visible_billboard(n, heights): Returns the maximum height of a billboard that can be placed on a building such that it is visible from both directions. :param n: int, the number of buildings :param heights: list of int, the heights of the buildings :return: int, the maximum possible height of the billboard max_to_left = [0] * n max_to_right = [0] * n # Fill max_to_left array max_to_left[0] = heights[0] for i in range(1, n): max_to_left[i] = max(max_to_left[i - 1], heights[i]) # Fill max_to_right array max_to_right[-1] = heights[-1] for i in range(n - 2, -1, -1): max_to_right[i] = max(max_to_right[i + 1], heights[i]) # Find the maximum height of the billboard max_height = 0 for i in range(n): if heights[i] >= max_to_left[i] and heights[i] >= max_to_right[i]: max_height = max(max_height, heights[i]) return max_height"},{"question":"Alice and Bob have a strange interest in prime numbers. One day, they decided to play a game with them. Given an integer n (2 le n le 10^5), they want to count how many prime numbers are there between 2 and n (both inclusive). A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. You are supposed to help them by writing a program that will determine the count of prime numbers for a given n. # Input - The input consists of a single integer n. # Output - Print the count of prime numbers between 2 and n. # Example ```input 10 ``` ```output 4 ``` ```input 30 ``` ```output 10 ``` # Explanation For the first example, the prime numbers between 2 and 10 are 2, 3, 5, and 7. Hence, the output is 4. For the second example, the prime numbers between 2 and 30 are 2, 3, 5, 7, 11, 13, 17, 19, 23, and 29. Hence, the output is 10. # Note Consider using the Sieve of Eratosthenes algorithm for an efficient solution.","solution":"def count_primes(n): Returns the count of prime numbers between 2 and n (both inclusive). Uses the Sieve of Eratosthenes algorithm for efficient computation. if n < 2: return 0 sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for i in range(2, int(n**0.5) + 1): if sieve[i]: for j in range(i*i, n + 1, i): sieve[j] = False return sum(sieve)"},{"question":"You are given an integer array a of length n and an integer m. The array a is initially sorted in non-decreasing order. You are allowed to perform exactly one operation of the following type on a: - Choose any integer x, and add it to each element of a subarray (a contiguous segment of the array). Your task is to find the maximum possible sum of the array a after performing the operation. The first line contains two integers n and m (1 le n le 10^5, 1 le m le 10^9) — the length of the array and the integer value that can be added to each element of a subarray. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the initial array. Print a single integer — the maximum possible sum of the array after performing the operation. For example, if the initial array is a = [1, 2, 3, 4, 5] and m = 2, one potential operation is to add 2 to each element of the subarray [2, 3, 4], resulting in the array [1, 4, 5, 6, 5] with a maximum sum of 21. In a different case, if a = [-3, -1, 0, 2, 4] and m = 6, adding 6 to the subarray [2, 4] results in the array [-3, -1, 6, 8, 10] with a maximum sum of 20. In yet another example, if a = [3, 3, 3, 3] and m = 5, adding 5 to the entire array results in [8, 8, 8, 8] with a maximum sum of 32.","solution":"def max_possible_sum(arr, n, m): Function to find the maximum possible sum of the array after performing one operation. :param arr: List[int] - Initial array of integers :param n: int - Length of the array :param m: int - Integer value that can be added to a subarray :return: int - The maximum possible sum of the array after performing the operation # Calculate the initial sum of the array total_sum = sum(arr) # Find the minimum element of the array min_element = min(arr) # Add \'m\' to the whole array and calculate the sum max_sum_after_operation = total_sum + m * n return max_sum_after_operation"},{"question":"Anna is a keen botanist working on her new project to analyze plant growth over a period of time. She has planted several trees in her greenhouse and monitors their height daily. Anna has realized that certain plants might be influenced by neighboring plants and their growth patterns. Help Anna by writing a program that identifies the plant that has grown the most when compared to its immediate neighbors over a given period. Anna provides the following data: - The number of days `d` she monitored the plants. - The heights of the plants recorded each day in a grid, where `H[i][j]` represents the height of the plant in position `j` on day `i`. Your task is to identify the plant that had the maximum height increase when compared to the heights of its immediate neighbors on the last day. Return the index of the plant (0-based) and the height increase. # Input: - The first line contains an integer `d` (1 ≤ d ≤ 1,000) — the number of days the heights were monitored. - The second line contains an integer `n` (2 ≤ n ≤ 100) — the number of plants in the greenhouse. - The next `d` lines contain `n` integers each, representing the heights of the plants on each day. # Output: - Output two integers: the index of the plant with the maximum height increase compared to its immediate neighbors on the last day, and the value of this height difference. # Example: Input: ``` 3 5 1 3 2 4 1 2 4 3 5 3 3 6 4 7 2 ``` Output: ``` 3 4 ``` # Explanation: The final day’s heights are [3, 6, 4, 7, 2]. - Plant 0: increase compared to Plant 1 is 3 - 6 = -3 - Plant 1: increase compared to Plants 0 and 2 is 6 - 3 = 3 and 6 - 4 = 2 (min increase = 2) - Plant 2: increase compared to Plants 1 and 3 is 4 - 6 = -2 and 4 - 7 = -3 (min increase = -3) - Plant 3: increase compared to Plants 2 and 4 is 7 - 4 = 3 and 7 - 2 = 5 (min increase = 3) - Plant 4: increase compared to Plant 3 is 2 - 7 = -5 Plant 3 has the maximum height increase of 4 compared to its immediate neighbors.","solution":"def find_max_growth_plant(d, n, heights): last_day_heights = heights[-1] max_increase = float(\'-inf\') max_index = -1 for i in range(n): if i == 0: increase = last_day_heights[i] - last_day_heights[i+1] elif i == n-1: increase = last_day_heights[i] - last_day_heights[i-1] else: increase = min(last_day_heights[i] - last_day_heights[i-1], last_day_heights[i] - last_day_heights[i+1]) if increase > max_increase: max_increase = increase max_index = i return (max_index, max_increase)"},{"question":"Mark is playing with strings. He has two strings, ( s ) and ( t ), of equal length ( n ). He is allowed to perform one operation on ( s ): swap any two characters of ( s ). Mark wants to know if he can make ( s equal to ( t by reordering the characters in ( s using any number of swaps. Write a function `canTransform(s: str, t: str) -> str` that determines if ( s ) can be transformed into ( t ) through reordering (or swapping any two characters any number of times). # Input - The first line contains a single integer ( n ) (( 1 leq n leq 10^5 )) – the length of strings ( s ) and ( t ). - The second line contains a string ( s ) of length ( n ), consisting of lowercase English letters. - The third line contains a string ( t ) of length ( n ), consisting of lowercase English letters. # Output - Print \\"YES\\" (without quotes) if ( s can be transformed into ( t ). Otherwise, print \\"NO\\" (without quotes). # Example Input ``` 5 abcde edcba ``` Output ``` YES ``` Input ``` 4 abcd abcf ``` Output ``` NO ``` # Note In the first example, ( s = \\"abcde\\" ) can be transformed into ( t = \\"edcba\\" ) by swapping characters. In the second example, since the character \'f\' is not present in ( s ), it is impossible to transform ( s ) into ( t ).","solution":"def canTransform(n, s, t): Determines if string s can be transformed into string t by some reordering of its characters. Parameters: n (int): Length of the strings s and t. s (str): The source string to be transformed. t (str): The target string to be matched. Returns: str: \\"YES\\" if s can be transformed into t, otherwise \\"NO\\". return \\"YES\\" if sorted(s) == sorted(t) else \\"NO\\""},{"question":"Sara is an enthusiastic gardener and she wants to beautify her garden by planting flowers in a row. She has a row of n flower beds, all of which are initially empty. Sara has m types of flowers, each type labeled from 1 to m. She also has an array of the same length as the flower bed, describing which types of flowers can be planted in specific flower beds. Sara wants to fill all flower beds according to her preferences such that each flower bed gets exactly one flower and only a type allowed in that bed. Determine whether it is possible to plant the flowers in the required way, and if it is, provide one possible configuration. The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 1000) — the number of flower beds and the number of flower types. Each of the next n lines contains an integer k followed by k space-separated integers. The first integer k represents the number of flower types that can be planted in the current flower bed, and the next k integers represent the allowed flower types for that bed. Output \\"YES\\" and a valid configuration if it is possible to plant the flowers as required, or \\"NO\\" if it is impossible. # Sample Input ``` 3 3 2 1 2 2 2 3 2 1 3 ``` # Sample Output ``` YES 1 2 3 ``` # Explanation Sara can plant: - Type 1 flower in the first bed, - Type 2 flower in the second bed, - Type 3 flower in the third bed. The order of flower types in the output can vary as long as it satisfies the constraints for each flower bed. If there\'s no way to plant the flowers in a valid configuration, you should output \\"NO\\".","solution":"def can_plant_flowers(n, m, flower_beds): Determine if it\'s possible to plant flowers in the required way, and if possible, provide a valid configuration. from collections import defaultdict flower_assignments = [-1] * n used_flowers = set() def assign_flower(bed_idx): for flower in flower_beds[bed_idx]: if flower not in used_flowers: flower_assignments[bed_idx] = flower used_flowers.add(flower) return True return False for i in range(n): if not assign_flower(i): return \\"NO\\", [] return \\"YES\\", flower_assignments"},{"question":"Marina is interested in string manipulation. She has a string consisting of lowercase English letters and wants to perform actions to maximize the number of distinct substrings of a given length. Marina defines a substring as a contiguous sequence of characters within the string. For instance, in the string \\"abc\\", the substrings of length 2 are \\"ab\\" and \\"bc\\". She wants to maximize the number of distinct substrings of a specified length by at most k character substitutions in the string. Given a string s, a number k (0 ≤ k ≤ |s|), and a length l (1 ≤ l ≤ |s|), determine the maximum number of distinct substrings of length l that can be achieved by modifying up to k characters in the string. The first line contains the string s (1 ≤ |s| ≤ 105) — the string to be analyzed. The second line contains two integers l and k — the length of the substrings and the maximum number of character modifications allowed, respectively. Print the maximum number of distinct substrings of length l that can be obtained. In the first sample, by modifying one character, \\"abcda\\" can become \\"abxya\\", creating the distinct substrings \\"ab\\", \\"bx\\", \\"xy\\", and \\"ya\\". In the second sample, no character needs to be modified as the distinct substrings are already maximized.","solution":"def max_distinct_substrings(s, l, k): Returns the maximum number of distinct substrings of length l that can be achieved by modifying up to k characters. from collections import defaultdict, deque n = len(s) if l > n: return 0 substr_count = defaultdict(int) substrs = [] for i in range(n - l + 1): substrs.append(s[i:i+l]) substrs = deque(substrs) max_distinct = len(set(substrs)) if k == 0: return max_distinct for i in range(n): for j in range(26): modified_s = list(s) modified_s[i] = chr(97 + j) modified_s = \'\'.join(modified_s) substr_set = set() for m in range(n - l + 1): substr_set.add(modified_s[m:m+l]) max_distinct = max(max_distinct, len(substr_set)) if i >= k: break return max_distinct"},{"question":"A software company is organizing a competitive coding event, and they have designed a sequence challenge for participants. The task is to analyze a given sequence of integers and identify the longest subsequence with a specific balance property. Here is the problem statement: You are given a sequence of integers consisting only of the values -1 and 1. A subsequence is called balanced if the sum of its elements is equal to zero. Your task is to find the longest balanced subsequence and return its length. # Input Format: - The first line contains an integer `t` (1 leq t leq 10^3) — the number of test cases. - Each of the next `t` lines contains a sequence of integers consisting only of -1 and 1. # Output Format: For each test case, print the length of the longest balanced subsequence. # Constraints: - The length of each sequence can be up to 10^5. - The sum of lengths of all sequences does not exceed 10^6. # Example: Input: 2 -1 1 -1 1 -1 1 1 -1 1 -1 1 -1 1 Output: 6 6 # Explanation: In the first example, the entire sequence is balanced and its length is 6. In the second example, the entire sequence is balanced and its length is 6. # Note: A balanced subsequence does not necessarily need to be contiguous. It simply needs to have an equal number of -1\'s and 1\'s. Write code to solve the problem described above and output the correct lengths for the given sequences.","solution":"def longest_balanced_subsequence(sequence): Returns the length of the longest balanced subsequence of the given sequence of -1s and 1s. count_1 = sequence.count(1) count_minus_1 = sequence.count(-1) # The longest balanced subsequence will have pairs of 1 and -1 return min(count_1, count_minus_1) * 2 def solve(test_cases): Processes multiple test cases and returns the lengths of the longest balanced subsequences. results = [] for sequence in test_cases: results.append(longest_balanced_subsequence(sequence)) return results"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to find and print the longest substring of `s` which is both a palindrome and has at least one vowel (\'a\', \'e\', \'i\', \'o\', \'u\'). If no such substring exists, print `-1`. If there are multiple longest palindromic substrings with at least one vowel, print the lexicographically smallest one. A palindrome is a string that reads the same forward and backward. # Input - The first and only line contains a string `s` (1 ≤ |s| ≤ 1000). # Output - Output the longest palindromic substring of `s` that contains at least one vowel. If multiple substrings satisfy the condition, print the lexicographically smallest one. If no substrings satisfy the condition, print `-1`. # Examples Example 1 **Input:** `civic` **Output:** `civic` Example 2 **Input:** `abracadabra` **Output:** `aca` Example 3 **Input:** `bcdf` **Output:** `-1` # Explanation In the first example, `civic` is already a palindrome and contains a vowel `i`. In the second example, the palindromic substrings are `aba`, `aca`, and `ara`. Among them, `aca` is the longest. In the third example, there are no palindromic substrings containing a vowel.","solution":"def longest_palindrome_with_vowel(s): Find the longest palindromic substring containing at least one vowel. If there are multiple longest palindromic substrings with at least one vowel, returns the lexicographically smallest one. If no such substring exists, returns \\"-1\\". def is_palindrome(sub): return sub == sub[::-1] vowels = set(\'aeiou\') n = len(s) longest = \\"\\" for i in range(n): for j in range(i, n): substring = s[i:j+1] if is_palindrome(substring) and any(char in vowels for char in substring): if len(substring) > len(longest) or (len(substring) == len(longest) and substring < longest): longest = substring return longest if longest else \\"-1\\""},{"question":"You have been tasked with managing a warehouse inventory system. Each item in the warehouse is identified by a unique item code and categorized. The inventory system allows performing a series of operations: 1. \\"Add x y z\\" - Add an item with code `x` to category `y` and quantity `z`. 2. \\"Remove x z\\" - Remove `z` quantity of item with code `x`. If the total quantity of the item becomes zero or negative, the item should be completely removed from the inventory. 3. \\"Move x y\\" - Move an item with code `x` to category `y`. 4. \\"Total y\\" - Return the total quantity of all items in category `y`. 5. \\"Count y\\" - Return the number of unique items in category `y`. Your task is to implement a system that processes these operations. The system will be given an integer `n` denoting the number of operations, followed by `n` lines describing the operations. You should output the results of each \\"Total\\" and \\"Count\\" operation. # Input The first line contains a single integer `n` (1 ≤ n ≤ 10^5), the number of operations. The next `n` lines describe the operations, each in one of the following formats: - \\"Add x y z\\" where x is a string (1 ≤ |x| ≤ 10), y is a string (1 ≤ |y| ≤ 10), and z is an integer (1 ≤ z ≤ 10^6). - \\"Remove x z\\" where x is a string (1 ≤ |x| ≤ 10) and z is an integer (1 ≤ z ≤ 10^6). - \\"Move x y\\" where x is a string (1 ≤ |x| ≤ 10) and y is a string (1 ≤ |y| ≤ 10). - \\"Total y\\" where y is a string (1 ≤ |y| ≤ 10). - \\"Count y\\" where y is a string (1 ≤ |y| ≤ 10). # Output For each \\"Total\\" and \\"Count\\" operation, output the result in a new line corresponding to the given category `y`. # Example Input ``` 8 Add A electronics 100 Add B electronics 50 Move A household Total electronics Remove B 30 Total electronics Count electronics Count household ``` Output ``` 50 20 1 1 ``` # Explanation - The first operation adds 100 units of item \\"A\\" to the category \\"electronics\\". - The second operation adds 50 units of item \\"B\\" to the category \\"electronics\\". - The third operation moves item \\"A\\" from \\"electronics\\" to \\"household\\". - The fourth operation queries the total quantity in \\"electronics\\", which is now 50. - The fifth operation removes 30 units of item \\"B\\". The remaining quantity of \\"B\\" in \\"electronics\\" is now 20. - The sixth operation queries the total quantity in \\"electronics\\", which is now 20. - The seventh operation counts the number of unique items in \\"electronics\\", which is now 1. - The eighth operation counts the number of unique items in \\"household\\", which is 1 since item \\"A\\" was moved there.","solution":"class WarehouseInventory: def __init__(self): self.inventory = {} self.category_map = {} def add_item(self, x, y, z): if x not in self.inventory: self.inventory[x] = {\'category\': y, \'quantity\': z} else: self.inventory[x][\'quantity\'] += z if y not in self.category_map: self.category_map[y] = {} self.category_map[y][x] = self.inventory[x][\'quantity\'] def remove_item(self, x, z): if x in self.inventory: self.inventory[x][\'quantity\'] -= z if self.inventory[x][\'quantity\'] <= 0: category = self.inventory[x][\'category\'] del self.category_map[category][x] del self.inventory[x] else: category = self.inventory[x][\'category\'] self.category_map[category][x] = self.inventory[x][\'quantity\'] def move_item(self, x, y): if x in self.inventory: old_category = self.inventory[x][\'category\'] del self.category_map[old_category][x] self.inventory[x][\'category\'] = y if y not in self.category_map: self.category_map[y] = {} self.category_map[y][x] = self.inventory[x][\'quantity\'] def total_quantity(self, y): if y in self.category_map: return sum(self.category_map[y].values()) return 0 def count_unique_items(self, y): if y in self.category_map: return len(self.category_map[y]) return 0 def process_operations(n, operations): warehouse = WarehouseInventory() results = [] for operation in operations: parts = operation.split() action = parts[0] if action == \\"Add\\": x, y, z = parts[1], parts[2], int(parts[3]) warehouse.add_item(x, y, z) elif action == \\"Remove\\": x, z = parts[1], int(parts[2]) warehouse.remove_item(x, z) elif action == \\"Move\\": x, y = parts[1], parts[2] warehouse.move_item(x, y) elif action == \\"Total\\": y = parts[1] results.append(warehouse.total_quantity(y)) elif action == \\"Count\\": y = parts[1] results.append(warehouse.count_unique_items(y)) return results # Example usage: n = 8 operations = [ \\"Add A electronics 100\\", \\"Add B electronics 50\\", \\"Move A household\\", \\"Total electronics\\", \\"Remove B 30\\", \\"Total electronics\\", \\"Count electronics\\", \\"Count household\\" ] print(process_operations(n, operations)) # Output should be [50, 20, 1, 1]"},{"question":"You are given a list of items, each with a unique integer identifier and a value. You are also given a capacity value which limits the total number of items that can be selected. Your task is to maximize the sum of the values of the selected items without exceeding the capacity. Each item can either be included or excluded from the selection. Write a function that takes in two arguments: - `items`: a list of tuples where each tuple consists of two integers, the identifier and the value of an item. - `capacity`: an integer representing the maximum number of items that can be selected. The function should return a tuple with two elements: - A list of identifiers of the selected items which maximize the total value. - The total value of the selected items. # Input Format - The first argument is a list of tuples `items`, where each tuple contains two integers `(identifier, value)` and the length of the list will be between 1 and 1000 inclusive. - The second argument is an integer `capacity` (1 ≤ capacity ≤ 1000). # Output Format The function should return a tuple: - A list of integers representing the identifiers of the selected items. - An integer representing the total value of the selected items. # Example ```python items = [(1, 60), (2, 100), (3, 120)] capacity = 2 ``` Output: ```python ([2, 3], 220) ``` In this example, selecting items with identifiers 2 and 3 yields the maximum total value of 220. # Constraints - Items cannot be divided, each item is either included or excluded. - There may be multiple correct solutions, any valid optimal selection of identifiers is acceptable.","solution":"def maximize_value(items, capacity): Maximizes the sum of the values of the selected items without exceeding the capacity. Args: items (list): A list of tuples where each tuple consists of two integers, the identifier and the value of an item. capacity (int): An integer representing the maximum number of items that can be selected. Returns: tuple: A tuple containing a list of identifiers of the selected items and the total value of the selected items. # Sort items by their values in descending order items_sorted = sorted(items, key=lambda x: x[1], reverse=True) selected_items = [] total_value = 0 current_capacity = 0 for item in items_sorted: if current_capacity < capacity: selected_items.append(item[0]) total_value += item[1] current_capacity += 1 else: break return selected_items, total_value"},{"question":"# Problem Statement: Movie Scheduling and Watching You are organizing a movie marathon event and have a schedule of n movies. Each movie has a start time and an end time. To ensure the best experience for the audience, you would like to maximize the number of movies that can be watched without any overlap. Each movie must be watched entirely, meaning you cannot watch a movie partially or leave it in the middle to watch another. You need to determine the maximum number of non-overlapping movies that can be scheduled. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of movies. - The next n lines each contain two integers start_i and end_i (0 ≤ start_i < end_i ≤ 10^5) — the start and end times of the i-th movie. Output: - Print a single integer — the maximum number of non-overlapping movies that can be watched. Example: ``` Input: 4 1 4 3 5 0 6 5 7 Output: 2 Explanation: The best way is to watch the movies [1, 4] and [5, 7]. The total number of movies watched is 2. ```","solution":"def max_non_overlapping_movies(n, intervals): Returns the maximum number of non-overlapping movies that can be watched. :param n: Number of movies :param intervals: List of tuples where each tuple contains (start_time, end_time) :return: Maximum number of non-overlapping movies # Sort movies by their end times intervals.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in intervals: if start >= last_end_time: count += 1 last_end_time = end return count # Example usage: # n = 4 # intervals = [(1, 4), (3, 5), (0, 6), (5, 7)] # print(max_non_overlapping_movies(n, intervals)) # Output: 2"},{"question":"Liza is organizing a series of competitions and wants to keep track of the scores of participants. She has a list of participants, each with a unique ID, and their scores recorded progressively after each round. Liza wants to know the top k participant IDs with the highest scores at any given moment. To help Liza with this, you need to implement a system that can: 1. Register the score of a participant after a round. 2. Output the top k participant IDs based on their current total scores. If two participants have the same score, the participant with the smallest ID should be ranked higher. The task involves processing q queries of two types: 1. \\"1 id score\\" - where id (1 ≤ id ≤ 10^9) is the participant ID and score (-10^3 ≤ score ≤ 10^3) is the score to be added to their current total. 2. \\"2 k\\" - where k (1 ≤ k ≤ 10^5) is the number of top participant IDs to output. Each query must be processed in the order given. # Input Format: - The first line contains an integer q (1 ≤ q ≤ 10^5), the number of queries. - The next q lines each contain a query of one of the two types described above. # Output Format: - For each query of type \\"2 k\\", output the top k participant IDs sorted by their scores in descending order. If there are fewer than k participants, output all participants sorted by their scores in descending order. # Example: Input: ``` 10 1 1001 50 1 1002 80 1 1001 20 2 2 1 1003 60 2 3 1 1002 -30 2 2 1 1004 90 2 3 ``` Output: ``` 1002 1001 1001 1003 1002 1001 1003 1004 1001 1003 ``` # Explanation: 1. In the first three queries, participant 1001 accumulates a score of 70 (50+20) and participant 1002 has 80. 2. The first \\"2 2\\" query then asks for the top 2 participants, which are 1002 and 1001. 3. Next, participant 1003 is registered with a score of 60. 4. The second \\"2 3\\" query asks for the top 3 participants, now being 1001, 1003, 1002. 5. Participant 1002\'s score is reduced by 30, resulting in 50. 6. The third \\"2 2\\" query now shows the top 2 participants as 1001 and 1003. 7. Participant 1004 is registered with a score of 90. 8. The final \\"2 3\\" query shows the top 3 participants as 1004, 1001, and 1003.","solution":"import heapq from collections import defaultdict class CompetitionScores: def __init__(self): self.scores = defaultdict(int) self.sorted_list = [] def process(self, query): query_type = query[0] if query_type == 1: participant_id = query[1] score = query[2] self.register_score(participant_id, score) elif query_type == 2: k = query[1] return self.get_top_k(k) def register_score(self, participant_id, score): self.scores[participant_id] += score # Since we don\'t need to keep scores sorted during registration, # we\'ll re-sort when retrieving the top k. def get_top_k(self, k): sorted_scores = sorted(self.scores.items(), key=lambda x: (-x[1], x[0])) return [participant_id for participant_id, score in sorted_scores[:k]] def process_queries(queries): competition = CompetitionScores() results = [] for query in queries: result = competition.process(query) if result is not None: results.append(\\" \\".join(map(str, result))) return results"},{"question":"You are given a grid of integers with n rows and m columns. You can perform any number of operations on the grid. In one operation, you can choose any subgrid and increase all its elements by 1. Your task is to determine if it is possible to make all the elements of the grid the same by applying the given operation any number of times. The first line contains one integer t (1 le t le 1000) — the number of test cases. Then, t test cases follow. Each test case begins with two integers n and m (1 le n, m le 100) — the number of rows and columns of the grid. Each of the next n lines contains m integers a_{i, j} (1 le a_{i, j} le 100) — the elements of the grid. For each test case, print \\"YES\\" if it\'s possible to make all elements of the grid the same by applying the operations any number of times, and \\"NO\\" otherwise.","solution":"def can_make_all_elements_equal(grid): n = len(grid) m = len(grid[0]) # Calculate the difference of each grid element with the top left element base = grid[0][0] for i in range(n): for j in range(m): if (grid[i][j] - base) % 2 != 0: return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): results = [] for case in test_cases: n, m, grid = case result = can_make_all_elements_equal(grid) results.append(result) return results # Assuming the input function will provide the input data as needed def main(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n, m = map(int, lines[index].split()) grid = [] for i in range(n): grid.append(list(map(int, lines[index + 1 + i].split()))) test_cases.append((n, m, grid)) index += n + 1 results = process_test_cases(t, test_cases) return \\"n\\".join(results)"},{"question":"Alice likes to build and play with pyramids made of blocks. She has an unlimited number of blocks and a desired height for her pyramid. A pyramid of height `h` consists of `h` layers, where the top layer (layer 1) has 1 block, layer 2 has 2 blocks, and so on, up to the bottom layer (layer `h`) which has `h` blocks. The total number of blocks required to build a pyramid of height `h` is `1 + 2 + 3 + ... + h`. Alice can only build a pyramid if she has the exact number of blocks needed. She wants to determine how many different heights of pyramids she can build if she is given exactly `n` blocks. Given an integer `n` (1 ≤ n ≤ 10^9), write a program to calculate the number of different heights `h` such that it’s possible to build a pyramid of height `h` using exactly `n` blocks. # Input - A single integer `n` – the number of blocks. # Output - A single integer – the number of different heights of pyramids that can be built with exactly `n` blocks. # Example Input ``` 5 ``` Output ``` 2 ``` Explanation With 5 blocks, you can build: - A pyramid of height 2 (1 block on top layer + 2 blocks on second layer = 1 + 2 = 3 blocks). - A pyramid of height 3 (1 block + 2 blocks + 3 blocks = 6 blocks, but there\'s no exact way to reach 5 with another height configuration other than height 2 for 3 blocks). Therefore, the output is 2.","solution":"def count_pyramid_heights(n): count = 0 height = 1 total_blocks = 0 while total_blocks < n: total_blocks += height if total_blocks <= n: count += 1 height += 1 return count"},{"question":"You are given a list of integers and need to determine the length of the longest contiguous subarray where the sum of the subarray is even. The first line contains an integer t (1 le t le 10): the number of test cases. For each test case: The first line contains a single integer n (1 le n le 1000): the number of integers in the array. The second line contains n space-separated integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9): the elements of the array. For each test case, print a single integer: the length of the longest contiguous subarray where the sum of the subarray is even. # Example Input ``` 3 5 1 2 3 4 5 3 1 1 1 4 2 4 6 10 ``` Output ``` 4 2 4 ``` # Explanation - In the first test case, the longest contiguous subarray with an even sum is [2, 3, 4, 5], which has a length of 4. - In the second test case, the longest contiguous subarray with an even sum is [1, 1], which has a length of 2. - In the third test case, the entire array is a contiguous subarray with an even sum, and its length is 4.","solution":"def longest_even_sum_subarray_length(arr): n = len(arr) max_length = 0 for i in range(n): curr_sum = 0 for j in range(i, n): curr_sum += arr[j] if curr_sum % 2 == 0: max_length = max(max_length, j - i + 1) return max_length def process_test_cases(test_cases): results = [] for case in test_cases: n, arr = case results.append(longest_even_sum_subarray_length(arr)) return results"},{"question":"Lara is a superhero who has a mission to save the city. The city is represented as a grid of size N x N, where some cells are empty, and some have obstacles. Lara can move up, down, left, or right, but she cannot pass through obstacles. Lara starts at the top-left corner of the grid and needs to reach the bottom-right corner. However, due to the recent increase in villain activities, the cells she visits will turn into obstacles immediately after she moves out of them. Lara needs to find a safe path to the destination avoiding being trapped by the newly formed obstacles. Determine the minimum number of steps Lara needs to reach the destination. If it’s not possible for her to reach the endpoint, return -1. The first line contains one integer N (2 ≤ N ≤ 500) — the size of the grid. The next N lines contain N characters each, representing the grid. A \'.\' indicates an empty cell, and a \'#\' indicates an obstacle. Output a single integer: the minimum number of steps needed to reach the bottom-right corner, or -1 if it is not possible. In the first test case, the grid might look like this: ``` 3 ... .#. ... ``` Lara can navigate the grid as `start (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2)`, resulting in 4 steps. In the second test case, the grid might look like this: ``` 3 .#. .#. ..# ``` There is no path for Lara to reach the bottom-right corner, hence the output would be -1.","solution":"from collections import deque def min_steps_to_reach_destination(N, grid): Finds the minimum number of steps to reach from the top-left to the bottom-right corner of the grid. Returns -1 if there is no possible path. def is_valid(x, y): Checks if a position (x, y) is within bounds and not an obstacle. return 0 <= x < N and 0 <= y < N and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (x, y, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if (x, y) == (N-1, N-1): # Reached destination return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) # Mark current cell as an obstacle grid[x][y] = \'#\' return -1"},{"question":"Sam is an avid book collector, and he recently stumbled upon a collection of ancient texts. Each text consists of a string of lowercase Latin letters. One day, Sam decided that he wants to categorize his texts by finding their \\"core\\" strings. A core string is defined as the smallest substring that can be repeated (one or more times) to recreate the original string. Given a string, your task is to determine the length of its core string. Input: The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains a string s of length n consisting of only lowercase Latin letters. Output: Print a single integer representing the length of the core string of s. Example: Input: 12 abcabcabcabc Output: 3 Explanation: The core string \\"abc\\" can be repeated 4 times to recreate the original string \\"abcabcabcabc\\". Input: 8 abababab Output: 2 Explanation: The core string \\"ab\\" can be repeated 4 times to recreate the original string \\"abababab\\".","solution":"def core_string_length(n, s): Determines the length of the core string for input string `s`. Parameters: - n (int): The length of the string - s (str): The input string consisting of lowercase Latin letters Returns: - int: Length of the core string for i in range(1, n + 1): if n % i == 0: # i must be a divisor of n sub = s[:i] multiplier = n // i if sub * multiplier == s: return i return n"},{"question":"Borya and Hanabi game strikes again, but this time with a twist! In this version of the game, there are query rounds where Borya can experiment flipping cards, and your task is to help determine the minimum number of rounds required. Borya has n cards placed in a sequence face down. Each card has a distinct number from 1 to n written on it, but Borya doesn\'t know the initial arrangement of these cards. During each round, Borya can choose any k cards and flip them, revealing the numbers. After observing the numbers, Borya puts them back without changing their initial positions. Borya\'s goal is to determine the initial position of every card with the least amount of rounds. Your task is to find out the minimum number of rounds Borya needs to be certain about the initial positions of all n cards. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100) — the number of cards and the number of cards Borya can flip in one round. Print a single integer — the minimum number of rounds required for Borya to be sure about the initial positions of all the cards. Sample Input 1: 4 2 Sample Output 1: 2 Sample Input 2: 5 1 Sample Output 2: 5 Explanation: In the first sample, Borya can flip a pair of cards each round. In the worst case, Borya might need to flip two pairs in two different rounds to determine the exact positions of all cards. In the second sample, Borya flips single cards, meaning he has to flip each card in separate rounds, hence five rounds are needed.","solution":"def minimum_rounds(n, k): Calculate the minimum number of rounds required for Borya to determine the initial positions of all n cards by flipping any k cards in each round. if k == 1: return n if n <= k: return 1 return (n + k - 1) // k"},{"question":"You are given a vase filled with k flowers, each of which has a certain height. When the vase is tipped over, the flowers bend under their own weight, resulting in an irregular shape. The bent shape of the flowers is defined by a series of new, lower heights determined by the following rule: - For each flower at position i, its new height is equal to the minimum height among itself and all subsequent flowers (including itself). Formally, given a sequence of heights h_1, h_2, dots, h_k, compute a new sequence of heights b_1, b_2, dots, b_k such that: - b_i = minlimits_{j in [i, k]} h_j Your task is to determine the new bent sequence of flower heights for a given vase. The first line contains a single integer t (1 le t le 1000) — the number of test cases. Each of the following sets of lines contains: - A single integer k (1 le k le 1000) — the number of flowers in the vase. - A line with k space-separated integers h_1, h_2, dots, h_k (1 le h_i le 10^6) — the initial heights of the flowers. For each test case, print a single line with k integers — the new bent heights of the flowers. # Example Input ``` 2 5 4 7 5 8 6 3 3 1 4 ``` Output ``` 4 5 5 6 6 1 1 4 ``` In the first test case, starting from the rightmost flower and moving to the left, we realize the new heights by taking the minimum of itself and all the flowers to its right. Similarly, for the second test case.","solution":"def bent_heights(t, test_cases): result = [] for k, heights in test_cases: b = [0] * k b[-1] = heights[-1] for i in range(k-2, -1, -1): b[i] = min(heights[i], b[i+1]) result.append(b) return result"},{"question":"Suppose you are given a grid of n times m dimensions, initially filled with 0, and a set of operations which either paint a rectangle or query a subgrid. Each paint operation is defined by four integers x1, y1, x2, y2, c, where 1 le x1 le x2 le n, 1 le y1 le y2 le m, and 1 le c le 10^6. This operation paints all grid cells from row x1 to row x2 and from column y1 to column y2 with color c. Each query operation is defined by four integers: x1, y1, x2, y2, where 1 le x1 le x2 le n and 1 le y1 le y2 le m. This operation queries the subgrid and returns the number of distinct colors in that subgrid. Your task is to efficiently handle a sequence of these operations and queries. The first line of the input consists of three integers n, m, and q (1 le n, m le 500, 1 le q le 10^4) — the number of rows, the number of columns, and the number of operations/queries, respectively. Each of the next q lines describes either a paint operation or a query operation: - A paint operation is described by: `P x1 y1 x2 y2 c`, where `P` stands for \\"paint\\". - A query operation is described by: `Q x1 y1 x2 y2`, where `Q` stands for \\"query\\". For each query operation, output the number of distinct colors in the specified subgrid. **Example:** Input: ``` 3 3 6 P 1 1 2 2 1 Q 1 1 3 3 P 2 2 3 3 2 Q 1 1 3 3 P 3 3 3 3 3 Q 2 2 3 3 ``` Output: ``` 1 2 2 ```","solution":"def process_operations(n, m, operations): from collections import defaultdict grid = [[0] * m for _ in range(n)] results = [] for op in operations: tokens = op.split() if tokens[0] == \'P\': # Paint operation x1, y1, x2, y2, c = map(int, tokens[1:]) for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): grid[i][j] = c elif tokens[0] == \'Q\': # Query operation x1, y1, x2, y2 = map(int, tokens[1:]) color_set = set() for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): if grid[i][j] != 0: color_set.add(grid[i][j]) results.append(len(color_set)) return results"},{"question":"In a land of binary digits, there is a kingdom ruled by a binary king. One day, the binary king ordered his subjects to organize a grand parade. The parade must have exactly N banners, each represented by a binary string of length M. The binary king loves symmetry and has ordered that each banner in the parade should either be symmetrical (i.e., it reads the same forward and backward) or should be an acceptable rotation of a symmetrical string. A rotation of a string is defined as shifting its characters cyclically right or left. Your task is to determine the maximum number of unique symmetric or rotationally symmetric banners you can create with a given length M. Write a program to determine the maximum number of unique binary banners of length M that meet the binary king’s requirement. Input: The first line of input contains an integer M (1 ≤ M ≤ 100,000), representing the length of each binary banner. Output: The output should be a single integer — the maximum number of unique banners that are symmetric or rotationally symmetric. Example: Input: 5 Output: 8 Explanation: For M = 5, some of the symmetric banners are: - 00000 - 11111 - 01010 - 10101 Some possible rotationally symmetric banners include: - 00100 (rotations include: 00100, 00010, 00001, 10000, 01000)","solution":"def count_symmetric_banners(M): This function takes an integer M and returns the maximum number of unique binary banners of length M that are symmetric or rotationally symmetric. if M % 2 == 0: # For even M, we can create 2^(M/2) symmetric banners return 2 ** (M // 2) else: # For odd M, we can create 2^((M//2)+1) symmetric banners return 2 ** ((M // 2) + 1) # Example usage: M = 5 print(count_symmetric_banners(M)) # Output should be 8"},{"question":"In a faraway kingdom, there exist p castles connected by q roads. Each road connects two different castles, allowing travel in both directions. However, the kingdom\'s transportation system is unique. Each road has a toll associated with it – some roads are free (toll of zero) while others cost a certain number of gold coins. The kingdom’s ruler has decided to hold a tournament. Knights will travel between castles, and they aim to minimize their travel expenses. Therefore, they wish to use the minimum number of toll roads to move from one castle to another. If multiple routes with the same number of toll roads exist, then they aim to spend the fewest gold coins. You are tasked to help the knights determine the minimal travel expenses for each pair of castles. Given the castles, roads, and their tolls, compute the minimum travel expenses in gold coins for each possible pair of castles. The first line contains two integers, p (1 ≤ p ≤ 500) and q (0 ≤ q ≤ 10,000), representing the number of castles and roads respectively. The next q lines each contain three integers a, b, and c (1 ≤ a, b ≤ p, 0 ≤ c ≤ 1,000), representing a road between castles a and b with a toll of c gold coins. Print a p x p matrix, where the kth element of the jth line contains the minimum cost in gold coins to travel from castle j to castle k. If there\'s no possible route between two castles, print \\"INF\\" for that position. # Example: Input: ``` 4 5 1 2 1 2 3 2 3 4 1 4 1 2 1 3 1 ``` Output: ``` 0 1 1 2 1 0 2 3 1 2 0 1 2 3 1 0 ``` In this example, the minimum cost to travel between castles 1 and 3 is 1 gold coin (using the direct road). The minimum cost to travel between castles 1 and 4 is 2 gold coins (using the roads 1-2 and 2-4 with respective tolls). If no route exists between two castles, \\"INF\\" should be printed.","solution":"def floyd_warshall(p, q, roads): INF = float(\'inf\') dist = [[INF] * p for _ in range(p)] for i in range(p): dist[i][i] = 0 for a, b, c in roads: dist[a-1][b-1] = c dist[b-1][a-1] = c for k in range(p): for i in range(p): for j in range(p): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] for i in range(p): for j in range(p): if dist[i][j] == INF: dist[i][j] = \\"INF\\" return dist def parse_input(input_data): lines = input_data.strip().split(\\"n\\") p, q = map(int, lines[0].split()) roads = [tuple(map(int, line.split())) for line in lines[1:]] return p, q, roads def find_minimum_travel_expenses(input_data): p, q, roads = parse_input(input_data) return floyd_warshall(p, q, roads)"},{"question":"David is a software developer with a penchant for simplified coding solutions. As he was working late one night, he encountered a unique scenario involving lighting up segments on an electronic billboard. The billboard consists of a significant number of vertical columns, each capable of displaying numbers from 1 to a specified maximum value. The billboard updates its displayed numbers every second. David observed that as the numbers increment, some columns undergo minimal changes, while others change almost all of their segments. David\'s curiosity drove him to find out the seconds at which a maximum number of segments change simultaneously. The billboard timing and updates can be described as follows: 1. The billboard shows time in seconds in a given format. 2. Every second, the time is displayed across n columns, with each column displaying a digit from 0 to the maximum m. 3. David wants to determine how frequently k or more segments change from one second to the next during a given time period. For instance, comparing \\"128\\" to \\"129,\\" only one segment changes, but going from \\"129\\" to \\"130,\\" more segments change. Write a program that simulates this billboard from a starting time to an ending time and counts how many times k or more segments change at the same second. # Input - The first line contains four integers n, m, k, and t (`1 <= n <= 8`, `1 <= m <= 9`, `1 <= k <= 20`, `1 <= t <= 1,000,000`) -- the number of columns, the maximum digit value each column can display, the minimum number of segment changes of interest, and the total duration in seconds for which to observe the billboard. - The second line contains the initial time t1 that the billboard starts displaying (`0 <= t1 < t`). - The third line contains the final time t2 that the billboard stops displaying (`0 <= t2 < t`, t1 <= t2). # Output - Print a single number: the count of seconds where k or more segments change simultaneously. # Example Input: ``` 3 9 4 10000 120 129 ``` Output: ``` 2 ``` # Explanation In this example, the billboard has 3 columns that display digits up to 9. David observes the board from 120 seconds to 129 seconds. We need to count how many times 4 or more segments change simultaneously. The output, 2, indicates that within this range, there are two instances where at least 4 segments change as the numbers increment.","solution":"def count_segment_changes(n, m, k, t, t1, t2): segment_changes = { \\"0\\": 6, \\"1\\": 2, \\"2\\": 5, \\"3\\": 5, \\"4\\": 4, \\"5\\": 5, \\"6\\": 6, \\"7\\": 3, \\"8\\": 7, \\"9\\": 6 } def count_changes(digit1, digit2): changes = sum(1 for d1, d2 in zip(digit1, digit2) if d1 != d2) return changes def str_padded(num, length): return str(num).zfill(length) count = 0 for second in range(t1 + 1, t2 + 1): prev = str_padded(second - 1, n) curr = str_padded(second, n) changes = 0 for p, c in zip(prev, curr): if p != c: changes += abs(segment_changes[p] - segment_changes[c]) if changes >= k: count += 1 return count"},{"question":"Polycarpus is exploring a large grid of cells, represented by a 2D array of integers with `N` rows and `M` columns. Each cell in the grid can either be empty (represented by 0) or contain an obstacle (represented by 1). Polycarpus can move horizontally or vertically between adjacent cells but cannot move diagonally, and he cannot move through obstacles. Polycarpus starts at the top-left corner of the grid (0, 0) and wants to reach the bottom-right corner (N-1, M-1). However, he is also interested in the number of unique paths he can take to reach the destination. A unique path is defined as a sequence of moves from the start to the end that does not involve revisiting any cell already visited in that path. Help Polycarpus by writing a program to calculate the number of unique paths from the start to the end, avoiding obstacles. If there is no valid path, return 0. The answer might be large, so return it modulo 1000000007 (10^9 + 7). # Input: - The first line contains two space-separated integers N and M (1 ≤ N, M ≤ 1000) — the number of rows and columns in the grid. - Each of the next N lines contains M space-separated integers (either 0 or 1) — the grid representation. # Output: - Print a single integer — the number of unique paths from (0, 0) to (N-1, M-1) modulo 1000000007. # Example: Input: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` Input: ``` 2 2 0 1 1 0 ``` Output: ``` 0 ``` In the first example, there are 2 unique paths from the start to the end: 1. (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) 2. (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) In the second example, there is no possible path because the cells either adjacent to the starting point or the destination have obstacles.","solution":"def unique_paths_with_obstacles(grid): MOD = 1000000007 N = len(grid) M = len(grid[0]) if grid[0][0] == 1 or grid[N-1][M-1] == 1: return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[N-1][M-1]"},{"question":"Patty is a famous pastry chef in SweetLand. She loves to bake delicious cakes and enjoys solving puzzles related to pastries. One day, Patty encountered an interesting problem and she needs your help to solve it. Patty has a set of cupcakes, each with a certain sweetness level. She wants to divide these cupcakes into two groups such that the absolute difference between the total sweetness levels of the two groups is minimized. You are given a list of positive integers representing the sweetness levels of cupcakes. Your task is to write a program that determines the minimum possible absolute difference between the sweetness levels of two groups when divided optimally. The first line contains an integer n (1 ≤ n ≤ 1000), representing the number of cupcakes. The second line contains n space-separated integers, each representing the sweetness level of a cupcake. The sweetness levels are between 1 and 1000 inclusive. Output a single integer, the minimum possible absolute difference between the total sweetness levels of the two groups. Example: Input: 5 1 3 4 8 20 Output: 4 Explanation: One optimal way to divide the cupcakes is into two groups: {1, 4, 20} and {3, 8}, where the total sweetness levels are 25 and 11, respectively. The absolute difference is 14. Another configuration such as {1, 8} and {3, 4, 20} gives total sweetness levels as 9 and 23 with an absolute difference of 14. The minimum absolute difference achievable is 4 by another optimal division.","solution":"def min_sweetness_difference(n, sweetness_levels): Determines the minimum possible absolute difference between the total sweetness levels of two groups. :param n: int :param sweetness_levels: List[int] :return: int total_sum = sum(sweetness_levels) dp = [0] * (total_sum // 2 + 1) for sweetness in sweetness_levels: for j in range(total_sum // 2, sweetness - 1, -1): dp[j] = max(dp[j], dp[j - sweetness] + sweetness) return total_sum - 2 * dp[total_sum // 2]"},{"question":"There are two planets in a distant galaxy that are in the process of establishing a direct communication link. The communication between the two planets can occur only through a sequence of satellite nodes. Each satellite node is uniquely positioned and has a direct communication link with some other satellite nodes. The communication network can be represented as an undirected graph where nodes represent satellites, and edges represent direct communication links between these satellites. However, due to the instability of the cosmic electromagnetic waves, each direct communication link has a delay associated with it. The residents of the planets wish to determine the minimum total communication delay to send a message from one planet to the other. The first line of input contains two integers n and m (1 leq n leq 1000; 0 leq m leq 10000) — the number of satellite nodes and the number of direct communication links respectively. Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n; 1 leq w leq 1000) — there is a direct link between satellites u and v with a delay w. The two planets are located at satellite nodes 1 and n. Output the minimum total communication delay if there is a path from satellite 1 to satellite n. If there is no such path, output -1. Input: ``` 4 4 1 2 5 2 3 3 3 4 4 1 4 10 ``` Output: ``` 10 ``` In this example, there are four satellite nodes and four direct communication links. The minimum communication delay from satellite node 1 to satellite node 4 is 10, which can be achieved by the direct link between these nodes.","solution":"import heapq def minimum_communication_delay(n, m, edges): Returns the minimum total communication delay from node 1 to node n. If there is no path, returns -1. :param n: Number of nodes :param m: Number of edges :param edges: List of tuples (u, v, w) representing edges and their weights :return: Minimum communication delay or -1 if no path exists graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm to find the shortest path pq = [(0, 1)] min_delay = [float(\'inf\')] * (n + 1) min_delay[1] = 0 while pq: current_delay, u = heapq.heappop(pq) if current_delay > min_delay[u]: continue for v, delay in graph[u]: total_delay = current_delay + delay if total_delay < min_delay[v]: min_delay[v] = total_delay heapq.heappush(pq, (total_delay, v)) return min_delay[n] if min_delay[n] != float(\'inf\') else -1"},{"question":"Alice has a special type of candy shop where candies are arranged in a linear fashion and each candy has a distinct integer sweetness value. She likes to organize the candies in such a way that they are sorted in strictly increasing order of sweetness from left to right. However, she can only swap the positions of exactly two candies at a time, and she can make at most K swaps. Given the initial arrangement of sweetness values, help Alice determine the minimum possible number of swaps required to sort the candies in strictly increasing order. If it\'s not possible to achieve this by making at most K swaps, return -1. The first line of input contains two integers N and K (1 leq N leq 10^5, 0 leq K leq 10^9), where N is the number of candies and K is the maximum number of swaps allowed. The second line contains N distinct integers a_1, a_2, ..., a_N (1 leq a_i leq 10^9) representing the sweetness values of the candies. Output a single integer, the minimum number of swaps required to sort the candies in strictly increasing order under the constraint of making at most K swaps. If it is not possible, return -1. Example 1: ``` Input: 5 5 5 1 3 2 4 Output: 3 ``` Example 2: ``` Input: 4 0 4 3 2 1 Output: -1 ``` Explanation: In the first example, the minimum number of swaps required to sort the array is 3 as follows: 1. Swap 5 with 1 -> [1, 5, 3, 2, 4] 2. Swap 5 with 2 -> [1, 2, 3, 5, 4] 3. Swap 5 with 4 -> [1, 2, 3, 4, 5] In the second example, since no swaps are allowed (K = 0), it is impossible to sort the array, thus the output is -1.","solution":"def min_swaps_to_sort(N, K, sweetness): # Create a list of tuples where each tuple is (sweetness value, original index) arr_pos = list(enumerate(sweetness)) # Sort the array by sweetness values arr_pos.sort(key=lambda it: it[1]) # Initialize variables visited = {k: False for k in range(N)} swaps = 0 # Traverse the array elements for i in range(N): # If the element is already visited or in the correct position, continue if visited[i] or arr_pos[i][0] == i: continue # Initialize cycle size cycle_size = 0 j = i while not visited[j]: # Mark the node as visited visited[j] = True # Move to the next node j = arr_pos[j][0] cycle_size += 1 # If we have a cycle, add (cycle_size - 1) to swaps if cycle_size > 0: swaps += (cycle_size - 1) # Check if the number of swaps exceeds the allowed K swaps if swaps <= K: return swaps else: return -1"},{"question":"A popular board game called \\"Island Adventure\\" involves players collecting resources and building structures. Each round, players draw a certain number of cards from a shared deck which includes \'Wood\', \'Stone\', and \'Gold\'. To build one structure, a player needs at least two different types of resources and a total of exactly three cards. For example, a player can build a structure if they have cards [Wood, Wood, Stone], [Stone, Gold, Gold], etc., but not if they have [Wood, Wood, Wood]. You are given the number of Wood, Stone, and Gold cards available. Your task is to find the maximum number of structures that can be built using the resources. Write a program that takes the count of each type of card and returns the maximum number of structures that can be built. The first line contains three integers W, S, and G (0 ≤ W, S, G ≤ 2·10^9) — the number of Wood, Stone, and Gold cards, respectively. Output a single integer — the maximum number of structures that can be built. Example: Input: 3 2 1 Output: 2 Explanation: We can build a structure using [Wood, Wood, Stone] and another using [Stone, Gold, Wood]. Therefore, the maximum number of structures is 2.","solution":"def max_structures(W, S, G): This function calculates the maximum number of structures that can be built. Parameters: W (int): The number of Wood cards. S (int): The number of Stone cards. G (int): The number of Gold cards. Returns: int: The maximum number of structures that can be built. min_two_diff = (W + S + G) // 3 return min(min_two_diff, W + S, S + G, W + G)"},{"question":"A factory has n machines and each machine can produce different types of products. The production matrix P consists of n rows and m columns where Pi, j = 1 if the i-th machine can produce the j-th product, and Pi, j = 0 if the i-th machine cannot produce the j-th product. The factory does not need to produce all types of products. Instead, it needs to fulfill a production quota that requires producing at least one of k different specific products. Given this quota, the goal is to determine the minimum number of machines required to meet the production quota. If it is not possible to meet the quota with any subset of machines, print \\"Impossible\\". The first line of the input contains three integers n, m, and k (1 ≤ n, m, k ≤ 2000) — the number of machines, the number of different products, and the number of specific products in the production quota, respectively. The next n lines contain m characters each. The character Pi, j is equal to \'1\' if the i-th machine can produce the j-th product and \'0\' otherwise. The last line contains k space-separated integers q1, q2, ..., qk (1 ≤ q1, q2, ..., qk ≤ m), denoting the indices of the specific products required in the production quota. Print a single integer, the minimum number of machines required to meet the production quota. If it is not possible to meet the quota, print \\"Impossible\\". In the first sample, the optimal solution is to use the 1st and 3rd machines. In the second sample, it is impossible to meet the quota with any subset of machines.","solution":"def min_machines_to_meet_quota(n, m, k, production_matrix, quota_products): from itertools import combinations # Convert quota_products indices to be 0-indexed quota_products = [q - 1 for q in quota_products] # Check if a given set of machines can meet the quota def can_meet_quota(machines): covered_products = set() for i in machines: for j in range(m): if production_matrix[i][j] == \'1\': covered_products.add(j) return all(product in covered_products for product in quota_products) # Try all possible combinations of machines in increasing size for num_machines in range(1, n + 1): for machine_set in combinations(range(n), num_machines): if can_meet_quota(machine_set): return num_machines return \\"Impossible\\" # Example usage: # n = 3 # m = 3 # k = 2 # production_matrix = [ # \\"101\\", # \\"000\\", # \\"110\\" # ] # quota_products = [2, 3] # print(min_machines_to_meet_quota(n, m, k, production_matrix, quota_products)) # Output: 2"},{"question":"You have recently started working at a company that processes large volumes of text data, and your task is to develop an efficient program that compresses these texts. One of the simplest but efficient algorithms for text compression is the Run-length encoding (RLE) algorithm. Run-length encoding works by replacing consecutive repeating characters with a single character followed by the number of repeats. For example, the string \\"aaabbb\\" would be compressed to \\"a3b3\\". If a character does not repeat, it is left as is. For instance, the string \\"abc\\" would remain \\"abc\\" under RLE. Your task is to write a function called `run_length_encoding` that takes a string `s` and returns its compressed form using the RLE algorithm. # Input - The input consists of a single string `s` with length constraints: (1 leq |s| leq 10^5). - The input string `s` will only contain lowercase English letters. # Output - The output should be the run-length encoded version of the input string. # Example **Input:** ``` aaabbbcccaaa ``` **Output:** ``` a3b3c3a3 ``` **Input:** ``` abcd ``` **Output:** ``` abcd ``` # Notes - In the case where the compressed version of the string is longer than or equal to the original string, your function should return the original string. - Your solution should handle large input sizes efficiently, with a linear time complexity relative to the length of the input string.","solution":"def run_length_encoding(s): Compresses the input string using the Run-Length Encoding (RLE) algorithm. Args: s (str): The input string consisting of lowercase English letters. Returns: str: The run-length encoded version of the input string if it\'s shorter in length than the original string, otherwise returns the original string. if not s: return \\"\\" encoded = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: encoded.append(s[i - 1] + str(count) if count > 1 else s[i - 1]) count = 1 # Append the last character (or sequence of characters) encoded.append(s[-1] + str(count) if count > 1 else s[-1]) encoded_string = \'\'.join(encoded) return encoded_string if len(encoded_string) < len(s) else s"},{"question":"David is organizing a new card game. In this game, each card has a value represented by an integer. David wants to choose a subset of these cards such that the sum of their values is maximized, but there is a catch: the sum must be even. Help David find the maximum possible even sum for a given set of cards. The first line contains an integer n (1 ≤ n ≤ 100) — the number of cards. The second line contains n space-separated integers a1, a2, ..., an, where ai (1 ≤ ai ≤ 1000) represents the value of the i-th card. Print a single integer — the maximum possible even sum of the values of the cards. If it is impossible to achieve an even sum, print 0. Example: Input: 5 3 2 5 6 8 Output: 24 Explanation: David can choose the subset {2, 6, 8, 3, 5} which gives 24 as the sum and it is even.","solution":"def max_even_sum(cards): total_sum = sum(cards) if total_sum % 2 == 0: return total_sum min_odd = float(\'inf\') for card in cards: if card % 2 != 0: min_odd = min(min_odd, card) return total_sum - min_odd if min_odd != float(\'inf\') else 0 # Example usage if __name__ == \\"__main__\\": n = int(input().strip()) cards = list(map(int, input().strip().split())) print(max_even_sum(cards))"},{"question":"In a small town, there is an advanced surveillance system installed to monitor all residents. The system performs two main tasks: adding a new camera and processing requests to detect the number of cameras currently covering a given location. Each camera has a fixed range that it covers along the main street, which can be represented as an interval [a, b] meaning the camera covers from position a to position b inclusively. You are tasked with building a system to handle the following queries: 1. Add a new camera with a range [a, b]. 2. Given a position x, determine how many cameras are covering that specific position. The system should efficiently handle multiple queries, ensuring that it responds quickly even with a large number of cameras and queries. Input: - The first line contains two integers n and q (1 ≤ n, q ≤ 10^6), the number of cameras to be added and the number of queries, respectively. - The next n lines each contain two integers a and b (1 ≤ a ≤ b ≤ 10^9), representing the range of a new camera. - The next q lines each contain one integer x (1 ≤ x ≤ 10^9), the position for which the number of covering cameras is to be determined. Output: - For each query, print the number of cameras covering position x on a new line. Example: Input: 4 3 1 5 2 6 8 10 3 4 4 7 9 Output: 3 0 1 Explanation: - Camera 1 covers positions [1, 5] - Camera 2 covers positions [2, 6] - Camera 3 covers positions [8, 10] - Camera 4 covers positions [3, 4] - Position 4 is covered by Camera 1, Camera 2, and Camera 4, so the output is 3. - Position 7 is not covered by any camera, so the output is 0. - Position 9 is only covered by Camera 3, so the output is 1.","solution":"def add_camera(cameras, a, b): cameras.append((a, b)) def count_cameras(cameras, x): count = 0 for a, b in cameras: if a <= x <= b: count += 1 return count def process_camera_queries(n, q, cameras_data, queries): cameras = [] for a, b in cameras_data: add_camera(cameras, a, b) results = [] for x in queries: results.append(count_cameras(cameras, x)) return results"},{"question":"You are given an array of n integers. You are allowed to perform a specific operation on this array: in one move, you can choose any two adjacent elements and swap them if and only if the left element is greater than the right one. Your task is to sort the array in non-decreasing order using the minimum number of such moves. Write a program to determine the minimum number of moves required to sort the array. The first line contains a single integer n (1 ≤ n ≤ 100 000) — the size of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Print a single integer — the minimum number of moves required to sort the array. In the example, the array [3, 2, 1] can be sorted in two moves: first swap 3 and 2 to get [2, 3, 1], and then swap 3 and 1 to get [2, 1, 3]. Finally, swap 2 and 1 to obtain the sorted array [1, 2, 3]. Thus, the minimum number of moves is 2.","solution":"def minimum_moves_to_sort(arr): Returns the minimum number of moves required to sort the array using adjacent swaps. n = len(arr) swaps = 0 for i in range(n): for j in range(n - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swaps += 1 return swaps"},{"question":"An ancient kingdom is known for its skilled artisans and metalworkers. They have n artisans and m different materials. The materials are numbered from 1 to m, and each artisan can work with a certain subset of these materials. An artisan can only work with a given material if they are proficient in it. The kingdom has received an order that requires the simultaneous use of all m materials. To fulfill the order, they need to form a team of artisans such that for every material from 1 to m, at least one artisan in the team is proficient in it. Your task is to determine the minimum number of artisans required to form such a team. The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) — the number of test cases. The following t test cases are specified as follows: The first line of each test case contains two integers n and m (1 le n, m le 20) — the number of artisans and the number of materials, respectively. The next n lines describe which materials each artisan can work with. The i-th line contains a binary string of length m, where the j-th character is \'1\' if the i-th artisan can work with the j-th material and \'0\' otherwise. For each test case, print the minimum number of artisans required to form a team such that every material from 1 to m is covered. If it is not possible to cover all materials, print -1. Example input: ``` 2 3 3 101 110 011 2 2 10 01 ``` Example output: ``` 2 2 ```","solution":"from itertools import combinations def min_artisans_needed(t, cases): results = [] for n, m, skills in cases: # Function to check if a combination covers all materials def covers_all_materials(comb): covered = [False] * m for artisan in comb: for i in range(m): if artisan[i] == \'1\': covered[i] = True return all(covered) artisans = [skill for skill in skills] # Try combinations from smallest size to the total number of artisans for r in range(1, n+1): for comb in combinations(artisans, r): if covers_all_materials(comb): results.append(r) break else: continue break else: results.append(-1) return results"},{"question":"Alice is exploring different substrings of a string that are palindromic. A substring is called palindromic if it reads the same backward as forward. Alice wants to find the longest palindromic substring in the given string. If there are multiple substrings of maximum length, you need to return the one that appears first. The input contains a single line string s (1 ≤ |s| ≤ 1000). The string consists of only lowercase English letters. Print the longest palindromic substring. If there are multiple possible answers, print the one that appears first in the string. In the first sample, the longest palindromic substring is \\"aba\\". In the second sample, the longest palindromic substring from left is \\"anana\\", so it must be the output.","solution":"def longest_palindromic_substring(s): This function returns the longest palindromic substring. :param s: The input string containing only lowercase English letters. :return: The longest palindromic substring. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] if not s: return \\"\\" longest = \\"\\" for i in range(len(s)): # Check for odd length palindromes pal1 = expand_around_center(s, i, i) if len(pal1) > len(longest): longest = pal1 # Check for even length palindromes pal2 = expand_around_center(s, i, i + 1) if len(pal2) > len(longest): longest = pal2 return longest"},{"question":"A group of friends frequently organize movie nights together. Each of the friends has a different set of preferences regarding which movie to watch. To avoid disagreements, they decide to determine the most popular movie using a voting system. Each friend will vote for exactly one movie, and the movie with the most votes will be chosen. If multiple movies receive the same maximum number of votes, the one with the smallest lexicographical order will be selected. Given the list of friends\' votes, determine the movie that will be watched during the movie night. The first line of input contains an integer `n` (1 ≤ n ≤ 100,000), the number of friends. The next `n` lines each contain a string of lowercase English letters, where the `i-th` line represents the movie voted by the `i-th` friend. Each movie name has a length of at most 100 characters. Output a single line containing the name of the movie that will be chosen. # Example Input: ``` 5 titanic avengers inception avengers inception ``` Output: ``` avengers ``` Explanation: - The movie \\"avengers\\" receives 2 votes. - The movie \\"inception\\" also receives 2 votes. - The movie \\"titanic\\" receives 1 vote. - Since \\"avengers\\" and \\"inception\\" are tied with 2 votes each, \\"avengers\\" is chosen because \\"avengers\\" comes before \\"inception\\" lexicographically.","solution":"from collections import Counter def most_voted_movie(n, votes): Determine the most popular movie based on friends\' votes. Parameters: n (int): Number of friends votes (list of str): List of movies voted by each friend Returns: str: Name of the movie that will be chosen vote_counts = Counter(votes) max_votes = max(vote_counts.values()) # Find the lexicographically smallest movie with maximum votes most_popular = min(movie for movie in vote_counts if vote_counts[movie] == max_votes) return most_popular"},{"question":"Given a matrix of integers where each row represents the inventory of a store and each column represents a specific product, you need to find the store that has the most diverse inventory. The most diverse inventory is defined as the row with the maximum number of distinct values (i.e., unique items in the store). If multiple stores have the same number of distinct values, return the index of the first such store. Input: - The first line contains two integers, m and n (1 le m, n le 1000), representing the number of rows and the number of columns in the matrix, respectively. - The next m lines each contain n integers representing the inventory values for each store. Each integer a_{ij} (1 le a_{ij} le 10^9) represents the quantity of the product j in store i. Output: - A single integer representing the index (0-based) of the store with the most diverse inventory. Example: Input: ``` 3 4 1 2 3 4 2 3 4 4 1 1 1 1 ``` Output: ``` 0 ``` Explanation: - The first store has distinct values {1, 2, 3, 4} (4 distinct values). - The second store has distinct values {2, 3, 4} (3 distinct values). - The third store has distinct value {1} (1 distinct value). So, the first store (index 0) has the most diverse inventory.","solution":"def most_diverse_inventory(matrix): Returns the index of the store with the most diverse inventory. max_unique_count = 0 max_unique_index = 0 for i, row in enumerate(matrix): unique_items = len(set(row)) if unique_items > max_unique_count: max_unique_count = unique_items max_unique_index = i return max_unique_index"},{"question":"You are given a set of n points in a 2D plane, each point represented by its coordinates (xi, yi). Your task is to determine the closest pair of points among the given set. The distance between two points (xi, yi) and (xj, yj) is defined as the Euclidean distance: [d((xi, yi), (xj, yj)) = sqrt{(xi - xj)^2 + (yi - yj)^2}] Write a function that takes the list of points and returns the minimum distance between any two points in the set. # Input - The first line contains a single integer n (2 ≤ n ≤ 100,000) — the number of points. - The next n lines each contain two integers xi and yi (−10^9 ≤ xi, yi ≤ 10^9) — the coordinates of the points. # Output Print a single real number — the minimum distance between two points. The answer will be considered correct if its absolute or relative error does not exceed 10^-6. # Example Input: ``` 4 0 0 3 4 7 7 3 0 ``` Output: ``` 4.000000 ``` # Note: In the example given, the closest pair of points is (0, 0) and (3, 0), with a distance of 4.","solution":"import math def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def closest_pair_of_points(points): points = sorted(points, key=lambda x: x[0]) def closest_pair_rec(start, end): if end - start <= 3: min_dist = float(\'inf\') for i in range(start, end): for j in range(i + 1, end): min_dist = min(min_dist, euclidean_distance(points[i], points[j])) return min_dist mid = (start + end) // 2 mid_x = points[mid][0] min_dist = min(closest_pair_rec(start, mid), closest_pair_rec(mid, end)) strip = [] for i in range(start, end): if abs(points[i][0] - mid_x) < min_dist: strip.append(points[i]) strip = sorted(strip, key=lambda x: x[1]) for i in range(len(strip)): for j in range(i + 1, len(strip)): if (strip[j][1] - strip[i][1]) >= min_dist: break min_dist = min(min_dist, euclidean_distance(strip[i], strip[j])) return min_dist return closest_pair_rec(0, len(points))"},{"question":"You are given an integer array a of length n. You are allowed to perform at most one operation on this array. In one operation, you can replace any element of the array with any integer value. Your goal is to make the array non-decreasing with the minimum number of operations. An array is considered non-decreasing if for every i (1 le i < n), a[i-1] le a[i]. You need to determine the minimum possible value of the maximum element in the resulting non-decreasing array after at most one operation is performed. The first line contains a single integer n (1 le n leq 10^5), the length of the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), the elements of the array. Print a single integer — the minimum possible value of the maximum element in the array after making it non-decreasing with at most one operation. Consider the first example. If the array is [5, 3, 6, 7], we can replace the element 3 with 5 to make the array [5, 5, 6, 7], which is non-decreasing. The maximum element remains 7. In the second example, the array is already non-decreasing, so no operation is necessary.","solution":"def minimum_possible_max(n, a): Determine the minimum possible value of the maximum element in the array after making it non-decreasing with at most one operation. :param n: int - the length of array :param a: list of int - the elements of the array :return: int - the minimum possible value of the maximum element # Arrays with only one element are already non-decreasing if n == 1: return a[0] max_val_before = max(a) # max value before any operation operations_needed = [] # collect possible values for operation for i in range(n - 1): if a[i] > a[i + 1]: # only one operation is allowed, find min possible max with current suggestion # we can either replace a[i] with a[i+1] (keeping the min possible value in a[i+1]) # or replace a[i+1] with a[i] (keeping the min possible value in a[i]) new_max1 = max(a[:i] + [a[i + 1]] + a[i + 1:]) new_max2 = max(a[:i + 1] + [a[i]] + a[i + 2:]) operations_needed.append(min(new_max1, new_max2)) if not operations_needed: return max_val_before # if no operation is needed, return original max return min(operations_needed)"},{"question":"Alice has an array of integers. She wants to perform a series of operations on the array to sort its elements in non-decreasing order. In one operation, she can select any subarray and move it to the beginning of the array. Alice can perform this operation as many times as she needs. Given the initial configuration of the array, determine the minimum number of operations Alice needs to sort the array. The first line of input contains a single integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 le n le 10^4) — the length of the array. The second line contains n space-separated integers (a_1, a_2, ldots, a_n) (1 le a_i le 10^9) — the elements of the array. Output t lines, each containing a single integer: the minimum number of operations needed to sort the array for each test case. **Example:** Input: ``` 3 3 3 1 2 4 4 3 2 1 5 1 2 3 4 5 ``` Output: ``` 2 3 0 ``` **Explanation of Examples:** - In the first test case, one optimal way is to first move the subarray [1, 2] to the beginning (one operation), resulting in [1, 2, 3], which is sorted. - In the second test case, an optimal way is: - Move the subarray [1] to the beginning, resulting in [1, 4, 3, 2] - Move the subarray [2] to the beginning, resulting in [2, 1, 4, 3] - Move the subarray [3, 4] to the beginning, resulting in [3, 4, 1, 2] - In the third test case, the array is already sorted, so no operations are needed.","solution":"def min_operations_to_sort(t, test_cases): Determines the minimum number of operations needed to sort the array for each test case by moving subarrays to the beginning of the array. results = [] for n, array in test_cases: count = 0 while sorted(array) != array: max_unordered_idx = 0 for i in range(n - 1): if array[i] > array[i + 1]: max_unordered_idx = i + 1 break subarray = array[:max_unordered_idx + 1] subarray.sort() array = subarray + array[max_unordered_idx + 1:] count += 1 results.append(count) return results"},{"question":"In a faraway land, there exists a unique programming competition held every year. The competition involves solving a series of challenges, each rewarding a certain number of points. A participant\'s performance during the competition is measured by their total score, which is simply the sum of the points from all solved challenges. However, the competition organizers want to encourage participants who steadily improve their skills. To this end, they have introduced a new rule: if a participant\'s score for a challenge exceeds their score in the previous challenge, they receive a bonus equal to the difference. Given the scores of a participant in consecutive challenges, calculate the total score, including any bonuses, they would receive by the end of the competition. The first line of the input contains an integer n (1 ≤ n ≤ 100,000), representing the number of challenges. The second line contains n integers separated by spaces, where each integer si (−10^6 ≤ si ≤ 10^6) denotes the score the participant achieved in the i-th challenge. Output a single integer – the total score including bonuses. **Sample Input 1:** ``` 5 10 20 15 25 30 ``` **Sample Output 1:** ``` 95 ``` **Explanation 1:** The participant\'s scores are [10, 20, 15, 25, 30]. The differences that result in bonuses are: - 20 - 10 = 10 (bonus) - 25 - 15 = 10 (bonus) - 30 - 25 = 5 (bonus) The total score including bonuses: 10 + 20 + 15 + 25 + 30 + 10 + 10 + 5 = 125. **Sample Input 2:** ``` 4 5 4 6 7 ``` **Sample Output 2:** ``` 27 ``` **Explanation 2:** The participant\'s scores are [5, 4, 6, 7]. The differences that result in bonuses are: - 6 - 4 = 2 (bonus) - 7 - 6 = 1 (bonus) The total score including bonuses: 5 + 4 + 6 + 7 + 2 + 1 = 25. In case the participant\'s scores do not increase in a challenge following the first one, they do not receive a bonus for that challenge.","solution":"def calculate_total_score(n, scores): Calculate the total score including bonuses. :param n: Integer, number of challenges :param scores: List of integers, scores in each challenge :return: Integer, total score including bonuses total_score = scores[0] # Initialize the total score with the score of the first challenge for i in range(1, n): total_score += scores[i] if scores[i] > scores[i - 1]: total_score += (scores[i] - scores[i - 1]) return total_score"},{"question":"You are given two integers x and y, and a string s of length n consisting of characters \'0\', \'1\', and \'?\'. The string represents a binary number with some digits possibly missing (denoted by \'?\'). Your goal is to replace each \'?\' in the string with either \'0\' or \'1\' such that the resulting binary number is minimal when interpreted as a binary value. The cost to replace a \'?\' with \'0\' is x, and the cost to replace a \'?\' with \'1\' is y. Determine the minimum cost needed to convert the string into a valid binary number. The first line contains three positive integers, n, x, and y (1 leq n leq 10000, 1 leq x, y leq 1000) — the length of the string, the cost to replace \'?\' with \'0\', and the cost to replace \'?\' with \'1\'. The second line contains a string s of length n consisting of characters \'0\', \'1\', and \'?\'. Output a single integer — the minimum cost needed to convert the string into a valid binary number. # Example Input: ``` 5 3 2 1??10 ``` Output: ``` 4 ``` Explanation: In the string \\"1??10\\", replacing both \'?\' with \'0\' results in \\"10010\\". The cost is 3 + 3 = 6 if we replace both \'?\' with \'0\'. However, if we replace the first \'?\' with \'0\' and the second \'?\' with \'1\', we get \\"10110\\", with a cost of 3 + 2 = 5. The minimal cost to convert the string into a valid binary number would be \\"10010\\", which gives us the cost of 6 (3+3). Hence, the correct answer is 4.","solution":"def minimal_conversion_cost(n, x, y, s): Returns the minimum cost needed to convert the string s into a valid binary number by replacing \'?\' with either \'0\' or \'1\'. Parameters: n (int): Length of the string x (int): Cost to replace \'?\' with \'0\' y (int): Cost to replace \'?\' with \'1\' s (str): Input string with \'0\', \'1\', and \'?\' Returns: int: Minimum cost to convert s into a valid binary number min_cost = 0 for char in s: if char == \'?\': min_cost += min(x, y) return min_cost"},{"question":"You are given a string consisting of lowercase English letters. Your task is to find the length of the longest substring that contains at most k distinct characters. For example, consider the string \\"abcba\\" with k = 2. The longest substring with at most 2 distinct characters is \\"bcb\\", which has a length of 3. The first line of the input contains an integer k (0 ≤ k ≤ 26) – the maximum number of distinct characters. The second line contains a string s (1 ≤ |s| ≤ 100000) – the string you need to evaluate. Output the length of the longest substring that contains at most k distinct characters. # Input ``` 2 abcba ``` # Output ``` 3 ``` # Note In this example, the longest substring with at most 2 distinct characters is \\"bcb\\", which has a length of 3. # Explanation To solve this problem, you can use a sliding window approach. Initialize two pointers, both starting at the beginning of the string, and use a dictionary to keep track of the characters in the current window. Expand the window by moving the end pointer, and if the condition of having more than k distinct characters is violated, move the start pointer to restore the condition. Keep track of the maximum length of the window that satisfies the condition during the process.","solution":"def length_of_longest_substring_k_distinct(k, s): Returns the length of the longest substring with at most k distinct characters. n = len(s) if k == 0 or n == 0: return 0 left = 0 right = 0 max_length = 0 char_count = {} while right < n: char_count[s[right]] = char_count.get(s[right], 0) + 1 right += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left) return max_length"},{"question":"You are given an array of integers representing the value of coins in your possession. Your goal is to use these coins to match a target sum using the minimum number of coins possible. In this problem, you need to determine the minimum number of coins required to achieve exactly the target sum. If it is not possible to form the target sum using the given coins, return -1. The first line of input contains two integers n and T (1 ≤ n ≤ 100, 1 ≤ T ≤ 10,000) — the number of coins and the target sum. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 10,000) — the value of each coin. Print one integer — the minimum number of coins required to achieve the target sum T. If it is not possible to achieve the target sum, print -1. For example, given the coins [1, 2, 5] and a target sum of 11, the optimal solution is to use [5, 5, 1], which totals to 3 coins. Example 1: ``` Input: 3 11 1 2 5 Output: 3 ``` Example 2: ``` Input: 3 7 3 4 5 Output: 2 ``` In the first example, you can form the target sum 11 using 3 coins (5 + 5 + 1 = 11). In the second example, you can form the target sum 7 using 2 coins (3 + 4 = 7).","solution":"def min_coins_to_target(n, T, coins): Returns the minimum number of coins needed to achieve the target sum T, or -1 if it is not possible to achieve T with the given coins. max_value = T + 1 dp = [max_value] * (T + 1) dp[0] = 0 for i in range(1, T + 1): for coin in coins: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[T] if dp[T] != max_value else -1 # Example usage: # n = 3, T = 11, coins = [1, 2, 5] # print(min_coins_to_target(3, 11, [1, 2, 5])) # Output: 3"},{"question":"In a distant land, there is a magical forest inhabited by n squirrels. These squirrels love collecting acorns, and each squirrel lives in a distinct tree. One day, a strange magical wind blows through the forest, causing some acorns to fall from the trees. Each squirrel will try to collect the acorns from their tree, but there\'s a problem: some squirrels are more agile than others, and they can collect more acorns than their less agile friends. You have an array of n integers, where the i-th integer represents the number of acorns the i-th squirrel can collect from their tree. Your task is to determine the maximum number of acorns the squirrels can collect if they work together in the most optimal way. For example, if n = 5 and the array is [10, 20, 15, 25, 30], then the squirrels could collect a total of 100 acorns if they all work together. The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each of the next t test cases contains two lines: - The first line contains one integer n (1 ≤ n ≤ 2 * 10^5) — the number of squirrels (and trees) in the forest. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the number of acorns each squirrel can collect. It is guaranteed that the sum of n over all test cases does not exceed 2 * 10^5. For each test case, output a single integer on a new line — the maximum total number of acorns the squirrels can collect. # Input ``` t n a_1 a_2 ... a_n ``` # Output ``` Maximum total number of acorns ``` # Example Input ``` 2 5 10 20 15 25 30 3 5 10 15 ``` Output ``` 100 30 ```","solution":"def max_acorns(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] acorns = test_cases[i][1] results.append(sum(acorns)) return results"},{"question":"You are given an array of integers representing a row of bricks. Each brick can either be yellow, red, or blue, denoted by numbers 1, 2, and 3 respectively. The goal is to find the minimum number of yellow bricks (denoted by 1) to remove so that no two adjacent bricks are of the same color. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of bricks in the row. The second line contains n integers, each of which is 1, 2, or 3, representing the color of each brick in the row. Output the minimum number of yellow bricks you need to remove to ensure that no two adjacent bricks are of the same color. **Example:** Input: 7 1 1 2 2 3 1 1 Output: 2 Explanation: You can remove two yellow bricks to get the row 1 2 2 3 1, which has no two adjacent bricks of the same color.","solution":"def min_yellow_bricks_to_remove(n, bricks): removals = 0 for i in range(1, n): if bricks[i] == 1 and bricks[i] == bricks[i-1]: removals += 1 return removals"},{"question":"You are given an array of integers, and you must perform the following operation exactly k times: select any segment of the array [l, r] (inclusive) and reverse it. After performing k operations, if the resulting array is sorted in non-decreasing order, print \\"YES\\". Otherwise, print \\"NO\\". The first line of the input contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100), the number of elements in the array and the number of operations you have to perform. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), the elements of the array. Print \\"YES\\" if it is possible to sort the array in non-decreasing order by performing exactly k reverse operations. Otherwise, print \\"NO\\". Example: Input: 5 2 3 1 4 2 5 Output: YES Explanation: 1. Reverse the segment [2, 4]: The array becomes [3, 2, 4, 1, 5] 2. Reverse the segment [1, 4]: The array becomes [1, 4, 2, 3, 5] The array is now sorted in non-decreasing order after exactly 2 operations. Input: 4 1 4 3 2 1 Output: NO Explanation: 1. Reverse any segment: The array becomes [1, 2, 3, 4] or its permutations, but it requires more than 1 operation to sort in non-decreasing order. Remember that the final array must be sorted after exactly k operations.","solution":"def can_sort_by_reversing_k_segments(n, k, arr): Determines if we can sort the array in non-decreasing order by reversing exactly k segments. if k >= 2: return \\"YES\\" elif k == 1: return \\"YES\\" if arr == sorted(arr) else \\"NO\\" else: return \\"NO\\" # Example usage print(can_sort_by_reversing_k_segments(5, 2, [3, 1, 4, 2, 5])) # Output: \\"YES\\" print(can_sort_by_reversing_k_segments(4, 1, [4, 3, 2, 1])) # Output: \\"NO\\""},{"question":"You are given a matrix with `n` rows and `m` columns that consists of positive integers. You want to sort each row of the matrix in non-decreasing order by only allowing one operation: you can arbitrarily swap any two elements of the same column. Print the sorted matrix after performing the minimum number of such operations. # Input The first line contains two integers, `n` and `m` (`1 ≤ n, m ≤ 100`), representing the number of rows and columns of the matrix, respectively. The following `n` lines each contain `m` integers representing the elements of the matrix. # Output Output the matrix after sorting each row in non-decreasing order using the minimum number of operations allowed. # Example ```plaintext Input 3 3 3 1 2 9 8 7 6 4 5 Output 1 2 3 7 8 9 4 5 6 ``` # Explanation - In the first row, you would swap the numbers in the second column from different rows to sort the first row. - In the second row, you would swap the numbers in the second column to sort the second row. - In the third row, swapping the second and third columns sorts the third row. - The final output matrix is sorted row-wise.","solution":"def sort_matrix_rows(matrix): n = len(matrix) m = len(matrix[0]) # Sort each row for i in range(n): matrix[i].sort() return matrix"},{"question":"You are a manager of a warehouse and you are in charge of organizing the delivery routes for shipping products to various locations. Each location can be reached by a series of roads that have different travel times associated with them. Your objective is to ensure the quickest delivery route for each location. The warehouse is represented by a single source node (node 1) and there are n locations in total, including the warehouse. Each road is bi-directional, meaning you can travel back and forth. You need to determine the shortest travel time from the warehouse to each of the other locations. The first line contains two integers n (2 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000) — the number of locations and the number of roads, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n; 1 ≤ w ≤ 1000) indicating that there is a road between locations u and v that requires w units of travel time. Print n-1 lines — the shortest travel time from the warehouse to each of the other locations in ascending order of the location numbers. If a location is unreachable, print -1 for that location. Example: Input: 4 4 1 2 2 2 3 4 1 3 5 3 4 1 Output: 2 5 6","solution":"import heapq def shortest_delivery_times(n, m, roads): Returns the shortest delivery times from the warehouse (node 1) to each of the other locations. Parameters: n (int): The number of locations. m (int): The number of roads. roads (List[Tuple[int, int, int]]): A list of tuples where each tuple contains three integers u, v, and w indicating there is a road between locations u and v that requires w units of travel time. Returns: List[int]: The shortest travel time from the warehouse to each of the other locations. # Create adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm to find shortest path from source (node 1) pq = [(0, 1)] # (distance, node) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[1] = 0 visited = set() while pq: current_distance, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return [distances[i] if distances[i] != float(\'inf\') else -1 for i in range(2, n + 1)]"},{"question":"An international company has a series of warehouses located along a straight highway. Each warehouse can have varying stock levels of a particular product. The company wants to optimize its logistics by ensuring that if a truck starts at any warehouse, it can carry enough stock to meet a critical demand within a specified range of warehouses. Given the stock levels of the warehouses and a range length, determine the maximum stock level the truck can collect by selecting a continuous subarray of warehouses of the specified length. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) - the number of warehouses and the length of the range respectively. The second line contains n integers a_i (0 ≤ a_i ≤ 10^9) - the stock level of each warehouse. Output a single integer: the maximum stock level the truck can collect from any continuous subarray of length k. # Example Input: ``` 7 3 2 1 5 3 6 7 1 ``` Output: ``` 16 ``` Explanation: In this example, the subarray with the maximum stock level is [3, 6, 7], which sums to 16.","solution":"def max_stock_by_range(n, k, stock_levels): Returns the maximum stock level that can be collected from any continuous subarray of length k. Parameters: n (int): The number of warehouses. k (int): The length of the range. stock_levels (list of int): The stock levels of each warehouse. Returns: int: The maximum stock level. max_stock = 0 current_stock = 0 # Calculate the first window\'s stock level for i in range(k): current_stock += stock_levels[i] max_stock = current_stock # Slide the window, one element at a time for i in range(k, n): current_stock += stock_levels[i] - stock_levels[i - k] max_stock = max(max_stock, current_stock) return max_stock"},{"question":"Alan is organizing a marathon in his city, and as an event organizer, he wants to set different checkpoints for the participants. Each checkpoint is identified by a positive integer. To make the marathon more interesting, Alan has decided to ensure that no two adjacent checkpoints along the route differ by more than a certain value d. Alan has a list of n checkpoints, initially placed at positions given by array A. Each of these positions is an integer and are sorted in ascending order. He wants to know, given the constraints, the total number of possible unique positions you can place these checkpoints such that the difference between any two adjacent checkpoints does not exceed d. Write a function that will consider the integer array A and value d and return the total number of unique positions that satisfy the given conditions. The first line of input contains two space-separated integers n and d (1 ≤ n ≤ 10^5, 1 ≤ d ≤ 10^4) — the number of checkpoints and the maximum allowed difference between any two adjacent checkpoints. The second line contains an array of n space-separated integers A1, A2, ..., An (1 ≤ Ai ≤ 10^9) representing the initial positions of the checkpoints in ascending order. Output a single integer — the total number of unique positions you can place these checkpoints such that the difference between any two adjacent checkpoints does not exceed d. # Examples: Example 1: **Input:** ``` 5 2 1 3 5 7 9 ``` **Output:** ``` 5 ``` **Explanation:** In this case, all positions are already valid as each difference is exactly 2. Example 2: **Input:** ``` 6 4 1 6 10 14 18 20 ``` **Output:** ``` 6 ``` **Explanation:** Here, the differences 5, 4, 4, 4, and 2 are all less than or equal to 4. # Note: - The input array A is always sorted in ascending order. - The function should be efficient in terms of time complexity to handle large inputs.","solution":"def count_valid_checkpoint_positions(n, d, A): Returns the count of valid checkpoint positions given the constraints. n : int : number of checkpoints d : int : maximum allowed difference between adjacent checkpoints A : list : list of initial positions sorted in ascending order # Since the checkpoints are already in A, all these positions are valid # This is derived from problem statement, which does not require any modification as it\'s all about counting # the already given checkpoints. return n"},{"question":"A circus company has decided to organize a special act consisting of trapeze artists. The act involves the artists forming different configurations by connecting to each other using ropes. A configuration is successful if it forms a single connected component and each artist is connected to exactly two other artists, i.e., it forms a cycle. You are given integer values n and m, where n is the number of trapeze artists and m is the number of ropes currently available. Each rope connects two distinct artists. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) – denoting a rope between artists u and v. Write a program that determines if the current set of ropes can form a successful configuration (a single cycle involving all artists). If it is possible, print \\"YES\\", otherwise print \\"NO\\". # Input: The first line of the input contains two integers n and m (3 ≤ n ≤ 100, 1 ≤ m ≤ 100). Each of the next m lines contains two integers u and v — the endpoints of a rope. # Output: Print \\"YES\\" if it\'s possible to form a single cycle involving all the trapeze artists with the given ropes. Otherwise, print \\"NO\\". # Example: Input: ``` 5 5 1 2 2 3 3 4 4 5 5 1 ``` Output: ``` YES ``` Input: ``` 4 4 1 2 2 3 3 4 1 3 ``` Output: ``` NO ```","solution":"def is_cycle(n, m, ropes): if m != n: return \\"NO\\" from collections import defaultdict, deque adjacent = defaultdict(list) for u, v in ropes: adjacent[u].append(v) adjacent[v].append(u) for key in adjacent: if len(adjacent[key]) != 2: return \\"NO\\" # Function for BFS to check connectivity def bfs(source): visited = set() queue = deque([source]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in adjacent[node]: if neighbor not in visited: queue.append(neighbor) return visited # Check if all nodes are connected visited = bfs(1) return \\"YES\\" if len(visited) == n else \\"NO\\""},{"question":"You are given an array of positive integers that represents the quantity of unique candies in individual piles. You are tasked with distributing the candies into exactly two separate groups such that the difference between the total quantities of candies in the two groups is minimized. The first line contains a single integer n (1 ≤ n ≤ 2000), the number of piles of candies. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5), the quantities of candies in each pile. Output a single integer—the minimum possible value of the difference between the two groups\' total quantities of candies. Example: Input: 6 1 2 3 4 5 6 Output: 1 Explanation: One optimal way to split the candies is into groups {1, 6, 5} and {2, 3, 4} which have sums 12 and 9, respectively. The difference between their sums is 3.","solution":"def min_difference_of_candies(n, piles): Given an array of piles of candies, this function calculates the minimum difference between the sums of two groups when the piles are divided into exactly two groups. :param n: int, the number of piles of candies :param piles: list of int, the quantities of candies in each pile :return: int, the minimum possible value of the difference between the two groups\' total quantities total = sum(piles) half = total // 2 # Create a DP array to store the possible sums up to \'half\' dp = [0] * (half + 1) for pile in piles: for j in range(half, pile - 1, -1): dp[j] = max(dp[j], dp[j - pile] + pile) # The closest sum to \'half\' we can get closest_sum = dp[half] return abs(total - 2 * closest_sum)"},{"question":"In a distant galaxy, there are n planets that form a galactic network connected by m bidirectional paths. Each path directly connects two planets and has a certain travel cost associated with it. The Galactic Federation has decided to establish a central command on one of these planets, from which they will be able to send commands to all other planets. For efficient communication, they aim to minimize the maximum travel cost from the central command to any other planet. You are given the task to find the optimal planet for the central command such that the maximum travel cost to all other planets is minimized. The first line of the input contains two integers n and m (2 ≤ n ≤ 100,000, 1 ≤ m ≤ 200,000), representing the number of planets and the number of paths, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), representing a path between planets u and v with travel cost w. Output a single integer — the minimum possible value of the maximum travel cost from the optimal central command planet to any other planet. Note: If there are multiple optimal planets, output the minimum numbered planet. Example: Input: 5 6 1 2 3 1 3 4 2 4 2 2 5 3 3 4 1 4 5 5 Output: 2 Explanation: By setting the central command on planet 2, the maximum travel cost to any other planet is minimized, making it the optimal choice.","solution":"import heapq import sys def dijkstra(graph, n, start): # Initial distances are set to infinity distances = [sys.maxsize] * (n + 1) distances[start] = 0 # Priority queue to process nodes priority_queue = [(0, start)] while priority_queue: current_distance, u = heapq.heappop(priority_queue) # If we already found a shorter path before, continue if current_distance > distances[u]: continue # Process neighbors for neighbor, weight in graph[u]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def find_optimal_planet(n, edges): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) min_max_distance = sys.maxsize optimal_planet = 1 for i in range(1, n + 1): distances = dijkstra(graph, n, i) max_distance = max(distances[1:]) if max_distance < min_max_distance: min_max_distance = max_distance optimal_planet = i elif max_distance == min_max_distance: optimal_planet = min(optimal_planet, i) return optimal_planet"},{"question":"Consider a video game in which there is a grid map with n rows and m columns. Each cell of the grid can have a value of 0 (representing a walkable terrain) or 1 (representing an obstacle). You can move from one cell to another if they are adjacent (i.e., up, down, left, or right) and the destination cell is a walkable terrain. Given the starting cell (sx, sy) and the destination cell (dx, dy), determine the minimum number of moves required to reach the destination from the starting point. If it is not possible to reach the destination from the starting point, return -1. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid, respectively. The next n lines contain m integers each, where each integer is either 0 or 1, describing the grid. The last line contains four integers sx, sy, dx, dy (1 ≤ sx, sy, dx, dy ≤ n, m) (1-indexed) — the coordinates of the starting cell and the destination cell, respectively. It is guaranteed that both the starting cell and the destination cell are walkable terrains. Output a single integer — the minimum number of moves required to reach the destination, or -1 if it is not possible. Example: Input: 5 5 0 0 0 0 1 1 1 1 0 1 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 1 5 5 Output: 8","solution":"from collections import deque def min_moves_to_reach(n, m, grid, sx, sy, dx, dy): # Directions for Up, Down, Left, Right moves directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Adjust for 1-indexed coordinates sx -= 1 sy -= 1 dx -= 1 dy -= 1 # Initialize visit matrix visited = [[False] * m for _ in range(n)] visited[sx][sy] = True # Initialize queue with starting position and 0 moves queue = deque([(sx, sy, 0)]) while queue: x, y, moves = queue.popleft() # If we have reached destination if x == dx and y == dy: return moves # Check all 4 possible directions for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == 0: visited[nx][ny] = True queue.append((nx, ny, moves + 1)) # If we exhaust the queue without finding the destination return -1"},{"question":"A newly built running track allows athletes to check their progress at predefined intervals during their run. The track is marked with various checkpoints at specific distances from the start line. These checkpoints are not necessarily equidistant. An athlete is looking for a way to know, at each checkpoint, the total distance they have covered from the start line to that checkpoint and also the total distance from that checkpoint to the end of the track. You are given the total length of the track and an array of distances of these checkpoints from the start line. Write a function that, for each checkpoint, computes and returns the distance from the start line to that checkpoint and the remaining distance from that checkpoint to the end of the track. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 100,000), representing the number of checkpoints. - The second line contains an integer `L` (1 ≤ L ≤ 1,000,000,000), representing the total length of the track. - The third line contains `n` integers `d1, d2, ..., dn` (0 ≤ di ≤ L), where `di` represents the distance of the i-th checkpoint from the start line. The checkpoints are given in a strictly increasing order. **Output:** - Print `n` lines, each containing two integers `start_distance` and `end_distance` for each checkpoint. **Example:** **Input:** ``` 3 100 10 50 80 ``` **Output:** ``` 10 90 50 50 80 20 ``` **Explanation:** - For the first checkpoint at distance 10 from the start, the distance from start to checkpoint is 10 and from checkpoint to end is 100 - 10 = 90. - For the second checkpoint at distance 50 from the start, the distance from start to checkpoint is 50 and from checkpoint to end is 100 - 50 = 50. - For the third checkpoint at distance 80 from the start, the distance from start to checkpoint is 80 and from checkpoint to end is 100 - 80 = 20.","solution":"def checkpoint_distances(n, L, distances): Returns a list of tuples where each tuple contains the distance from the start line to a checkpoint and the remaining distance from that checkpoint to the end of the track. :param n: Number of checkpoints :param L: Total length of the track :param distances: List of distances of checkpoints from the start line :return: List of tuples (start_distance, end_distance) result = [] for d in distances: start_distance = d end_distance = L - d result.append((start_distance, end_distance)) return result"},{"question":"A Spartant city is being besieged by an enemy army. The city is surrounded by a series of walls connected in a circular manner. Each wall segment is guarded by a different unit of Spartan warriors. Due to the unique circular arrangement, each wall\'s defense capability is dependent on the number of warriors present. Given the circular layout of the walls, each guard unit can only retreat to an adjacent wall segment if the target segment is currently unguarded. If a wall segment is empty, a guard unit can be moved to this empty segment, thus strengthening that segment. The goal is to exhaustively rearrange the guards to achieve the maximum defense capability for any single wall segment while considering that only one unit can occupy a segment at any time. The input consists of two lines. The first line contains an integer n (3 ≤ n ≤ 100), which is the number of wall segments arranged in a circle. The second line contains n integers where each integer wi (1 ≤ wi ≤ 100) represents the number of warriors in each corresponding segment. Output a single integer, which is the maximum number of warriors that can be gathered on a single wall segment after the optimal redistribution of warriors while respecting the movement constraints. # Example: Input: 6 1 2 3 4 1 2 Output: 7 Explanation: One optimal way to achieve this is: - Move the warriors from segment 6 to segment 1, resulting in [3, 2, 3, 4, 1, 0] - Move the warriors from segment 5 to segment 4, resulting in [3, 2, 3, 5, 0, 0] - Move the warriors from segment 3 to segment 4, resulting in [3, 2, 0, 8, 0, 0] The maximum number of warriors gathered on a single segment is 8.","solution":"def max_defense_capability(n, warriors): max_warriors = max(warriors) return max_warriors # Example usage n = 6 warriors = [1, 2, 3, 4, 1, 2] print(max_defense_capability(n, warriors)) # Expected output: 4"},{"question":"Stacy has a unique way of representing numbers with the help of lowercase English alphabets. Every character in the string corresponds to a digit from 1 to 9 and is represented as follows: \'a\' -> 1, \'b\' -> 2, \'c\' -> 3, ..., \'i\' -> 9. She has a string consisting of these characters, and she can perform the following operation any number of times: choose two adjacent characters in the string and replace them with a single character — the sum of their corresponding digit values mod 9. For example, if the string is \\"ab\\": \'a\' represents 1, and \'b\' represents 2, their sum is 3, thus we can replace \\"ab\\" with \'c\'. The goal is to find out the lexicographically smallest string that can be produced using this operation. A string a is lexicographically smaller than a string b if at the first position where a and b differ the string a has a letter that appears earlier in the alphabet than the corresponding letter in b. The first line contains a single integer n (1 ≤ n ≤ 1000) which is the length of the string. The second line contains the string s of length n, consisting only of characters from \'a\' to \'i\'. Output the lexicographically smallest string achievable by reducing the string s using the described operation. For example, if we start with the string \\"ab\\", we can reduce it to \\"c\\", which represents the number 3. This is the lexicographically smallest string possible for the given operations.","solution":"def smallest_string(n, s): Returns the lexicographically smallest string that can be produced by reducing the string `s` using the described operation. # The minimum character in the string s can always be achieved # directly because any two characters can sum up to at most 17 # which ends up being one character after modulo reduction. min_char = min(s) return min_char"},{"question":"Given an array of n integers, you need to determine if it\'s possible to reorder the array such that the sum of every two consecutive elements is odd. Note that a sum of two integers is odd if and only if one of them is even and the other one is odd. The first line of the input contains an integer n (1 ≤ n ≤ 100000) — the number of integers in the array. The second line of the input contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) — the elements of the array. Print \\"YES\\" if it\'s possible to reorder the array such that the sum of every two consecutive elements is odd. Otherwise, print \\"NO\\". In example 1, the input is: 4 1 2 3 4 Output is: YES In example 2, the input is: 3 2 4 6 Output is: NO Explanation: In the first example, an array {1, 2, 3, 4} can be reordered to {1, 2, 3, 4} or {1, 4, 3, 2}, both of which satisfy the condition of having sums of consecutive elements that are odd. In the second example, an array {2, 4, 6} cannot be reordered to meet the condition because all elements are even.","solution":"def can_reorder_for_odd_sums(n, arr): Determines if it\'s possible to reorder the array such that the sum of every two consecutive elements is odd. # Count the number of odd and even numbers odd_count = sum(1 for x in arr if x % 2 != 0) even_count = n - odd_count # It is possible to reorder if and only if we have at least one odd and one even number if odd_count > 0 and even_count > 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Iahub and Iahubina discovered a new game that involves a grid of size r times c. Each cell in the grid is either contaminated or not contaminated. A non-contaminated cell can become contaminated if at least one of its adjacent cells (up, down, left, right) is contaminated. The game aims to determine the minimum number of moves required to make the entire grid contaminated, starting from an initial configuration of contaminated cells. You are given an initial configuration of the grid where each cell is either contaminated (denoted by 1) or not contaminated (denoted by 0). In each move, all currently contaminated cells spread their contamination to their adjacent cells. The first line of the input contains two integers r and c (1 le r, c leq 10^3), representing the number of rows and columns in the grid, respectively. The next r lines each contain c integers (either 0 or 1), representing the initial state of the grid. Output a single integer representing the minimum number of moves required to completely contaminate the grid. If it is not possible to contaminate the entire grid, print -1. Example: Input: 3 3 1 0 0 0 0 0 0 0 1 Output: 2 Explanation: After the first move: 1 1 0 1 0 0 0 1 1 After the second move: 1 1 1 1 1 0 1 1 1 Now, all cells are contaminated. The entire grid is contaminated in 2 moves.","solution":"from collections import deque def min_moves_to_contaminate(r, c, grid): # Directions for the adjacent cells directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initial grid setup to find contaminated cells queue = deque() non_contaminated_count = 0 for i in range(r): for j in range(c): if grid[i][j] == 1: queue.append((i, j)) else: non_contaminated_count += 1 # If all cells are already contaminated if non_contaminated_count == 0: return 0 moves = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < r and 0 <= ny < c and grid[nx][ny] == 0: grid[nx][ny] = 1 queue.append((nx, ny)) non_contaminated_count -= 1 if non_contaminated_count == 0: return moves + 1 moves += 1 # If there are still non-contaminated cells remaining after all possible moves return -1"},{"question":"Given an array of integers, your task is to determine the number of contiguous subarrays that have a sum exactly equal to a given target value. # Input The first line contains an integer n (1 le n le 10^5) — the length of the array. The second line contains n integers a_i (-10^9 le a_i le 10^9) — the elements of the array. The third line contains a single integer k (-10^{18} le k le 10^{18}) — the target sum. # Output Output a single integer — the number of contiguous subarrays that have a sum exactly equal to k. # Example **Input:** ``` 5 1 2 3 -2 1 3 ``` **Output:** ``` 3 ``` **Explanation:** The three subarrays that sum to 3 are: - [1, 2] - [3] - [2, 3, -2] # Note - The input array can contain negative numbers. - Ensure your solution is efficient enough to handle the upper limits of the constraints.","solution":"def count_subarrays_with_sum(arr, k): Returns the number of contiguous subarrays that have a sum exactly equal to k. from collections import defaultdict count = 0 current_sum = 0 prefix_sums = defaultdict(int) prefix_sums[0] = 1 # To handle the case when subarray starts from index 0 for num in arr: current_sum += num # Find if there is a prefix sum that we can subtract to get the sum k if (current_sum - k) in prefix_sums: count += prefix_sums[current_sum - k] # Update the prefix sums with the current sum prefix_sums[current_sum] += 1 return count"},{"question":"Alice has a collection of light bulbs, arranged in a single row from position 1 to position n. Each bulb can be either on or off. Alice wants to perform a series of operations on this row to achieve a specific configuration where all light bulbs are off, but she can only toggle groups of bulbs. The allowed operation is to select a continuous segment of bulbs and toggle them, which means if a bulb is on, it will be turned off, and if it is off, it will be turned on. Given an initial configuration of the bulbs, represented by a string of length n, where \'1\' represents an on bulb and \'0\' represents an off bulb, determine the minimum number of operations required to turn all bulbs off. The first line contains a single integer n (1 leq n leq 1000) – the number of bulbs. The second line contains a string of length n consisting of \'0\' and \'1\' characters representing the initial state of the bulbs. Output a single integer, the minimum number of operations required to make all bulbs off. **Example:** **Input:** ``` 7 0101010 ``` **Output:** ``` 3 ``` **Explanation:** 1. Toggle bulbs from position 2 to 7, resulting in `0010101`. 2. Toggle bulbs from position 3 to 6, resulting in `0000010`. 3. Toggle bulb at position 7, resulting in `0000000`.","solution":"def min_operations_to_turn_off_bulbs(n, bulbs): Determines the minimum number of operations required to turn all bulbs off. Each operation consists of selecting a continuous segment of bulbs and toggling them. Args: n (int): Number of bulbs. bulbs (str): String representing the initial state of the bulbs; \'1\' is on, \'0\' is off. Returns: int: Minimum number of operations required to make all bulbs off. # Edge case for quick return if bulbs == \'0\' * n: return 0 operations = 0 i = 0 while i < n: # Skip off bulbs while i < n and bulbs[i] == \'0\': i += 1 # If we find an on bulb, we will need at least one operation if i < n and bulbs[i] == \'1\': operations += 1 # Move i to the end of this segment of on bulbs while i < n and bulbs[i] == \'1\': i += 1 return operations"},{"question":"You have a grid of size n times m initially filled with zeros. There are q queries, each query specifies a rectangle within this grid that you need to increment by 1. Rectangles are specified by two coordinates: the top-left corner and the bottom-right corner. You need to process all queries and determine the final state of the grid after all operations. Formally, each query is described by four integers x1, y1, x2, y2 (1 le x1 le x2 le n, 1 le y1 le y2 le m). For each query, you increment all cells within the sub-grid ranging from (x1, y1) to (x2, y2) inclusive. After processing all queries, print the final grid. The first line of input contains three integers n, m, q (1 le n, m le 1000, 1 le q le 100,000) - the dimensions of the grid and the number of queries. Each of the next q lines contains four integers representing a single query: x1, y1, x2, y2. For each query, print the final grid of size n times m. # Example Input: ``` 3 3 3 1 1 2 2 2 2 3 3 1 3 3 3 ``` Output: ``` 1 1 2 1 2 3 0 1 2 ```","solution":"def process_queries(n, m, q, queries): Processes a list of queries on a grid of given dimensions. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. q (int): Number of queries. queries (list): List of queries, each being a tuple (x1, y1, x2, y2). Returns: list: The final grid after processing all queries. grid = [[0] * m for _ in range(n)] for query in queries: x1, y1, x2, y2 = query for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): grid[i][j] += 1 return grid # Example usage: n, m, q = 3, 3, 3 queries = [ (1, 1, 2, 2), (2, 2, 3, 3), (1, 3, 3, 3) ] output_grid = process_queries(n, m, q, queries) for row in output_grid: print(\' \'.join(map(str, row)))"},{"question":"Given a string `s` of length `n`, you are allowed to delete exactly one character from it. Your goal is to determine whether it is possible to make the resulting string a palindrome. A string is a palindrome if it reads the same backward as forward. For example, \\"radar\\" is a palindrome, but \\"hello\\" is not. Your task is to write a function that checks if it is possible to make the string a palindrome by removing exactly one character. **Input Format:** The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. The following `t` lines each contain a string `s` of length `n` (1 ≤ n ≤ 10^5) representing the string to be analyzed. **Output Format:** For each test case, print \\"YES\\" if it is possible to make the string a palindrome by deleting exactly one character, otherwise print \\"NO\\". **Example:** Input: ``` 3 abca abcba abcd ``` Output: ``` YES YES NO ``` **Explanation:** 1. In the first test case, by removing \'b\' from \\"abca\\", we get \\"aca\\", which is a palindrome. 2. In the second test case, \\"abcba\\" is already a palindrome, so removing any one character such as the middle \'c\' still leaves a palindrome. 3. In the third test case, no single character removal will result in a palindrome, so the answer is \\"NO\\".","solution":"def can_form_palindrome_by_removing_one_char(s): def is_palindrome(st): return st == st[::-1] n = len(s) if n <= 1: return False l, r = 0, n - 1 while l < r: if s[l] != s[r]: # Two cases: delete character at position l or r return is_palindrome(s[l+1:r+1]) or is_palindrome(s[l:r]) l += 1 r -= 1 return True def process_test_cases(t, test_cases): results = [] for i in range(t): if can_form_palindrome_by_removing_one_char(test_cases[i]): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"With technology companies becoming increasingly dependent on complex cloud infrastructure, analyzing traffic patterns and detecting anomalies in a high-speed network has become a task of paramount importance. You are tasked with developing a simplified traffic monitoring system for a company\'s internal network, where each computing node is identified by a unique name and can generate traffic to any other node in the network. The system should support the following operations: 1. Register a new node in the network. 2. Record traffic data between two nodes. 3. Retrieve the total incoming or outgoing traffic for a specific node. Write a program to implement this system. The operations will be represented by strings in the following format: - \\"add <node_name>\\" - this operation registers a new node with the specified unique name (a string of lowercase Latin letters). - \\"traffic <source_node> <destination_node> <bytes>\\" - this operation records the number of bytes sent from the source node to the destination node. - \\"total_in <node_name>\\" - this operation retrieves the total incoming traffic for the specified node. - \\"total_out <node_name>\\" - this operation retrieves the total outgoing traffic for the specified node. Assume all node names in the operations are valid and predefined. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of operations. - The next n lines contain one operation per line. Output: - For each \\"total_in\\" and \\"total_out\\" operation, print the requested traffic value on a new line. Example: ``` Input: 8 add node1 add node2 traffic node1 node2 50 traffic node2 node1 30 total_in node1 total_out node1 total_in node2 total_out node2 Output: 30 50 50 30 ``` In this example, the first two commands register nodes \\"node1\\" and \\"node2\\". The third command registers 50 bytes of traffic from \\"node1\\" to \\"node2\\", and the fourth command registers 30 bytes of traffic from \\"node2\\" to \\"node1\\". The subsequent commands retrieve the total incoming and outgoing traffic for both nodes.","solution":"class TrafficMonitoringSystem: def __init__(self): self.nodes = {} self.incoming_traffic = {} self.outgoing_traffic = {} def add_node(self, node_name): self.nodes[node_name] = True self.incoming_traffic[node_name] = 0 self.outgoing_traffic[node_name] = 0 def record_traffic(self, source_node, destination_node, bytes): self.outgoing_traffic[source_node] += int(bytes) self.incoming_traffic[destination_node] += int(bytes) def total_in(self, node_name): return self.incoming_traffic[node_name] def total_out(self, node_name): return self.outgoing_traffic[node_name]"},{"question":"You are given a weighted graph with v vertices and e edges. The vertices are numbered from 0 to v-1. Each edge has a positive weight. Your task is to find the weight of the minimum spanning tree (MST) of the graph. A spanning tree of a connected graph is a subgraph that includes all vertices and is a single connected tree. The weight of a spanning tree is the sum of the weights of its edges, and the minimum spanning tree is the spanning tree with the minimum weight. **Input:** The first line contains two integers v and e (1 le v le 1000, v-1 le e le frac{v(v-1)}{2}) — the number of vertices and edges, respectively. The next e lines contain three integers u, w, and weight (0 le u, w < v, 1 le weight le 10^6) — indicating that there is an edge between vertex u and vertex w with the given weight. **Output:** Output one integer — the weight of the minimum spanning tree. **Examples:** **Example 1:** Input: ``` 4 5 0 1 10 0 2 6 0 3 5 1 3 15 2 3 4 ``` Output: ``` 19 ``` Example Explanation: In this example, the edges in the minimum spanning tree are (2, 3), (0, 3), and (0, 1). **Example 2:** Input: ``` 3 3 0 1 1 1 2 5 0 2 4 ``` Output: ``` 5 ``` Example Explanation: In this example, the edges in the minimum spanning tree are (0, 1) and (0, 2). **Note:** Use Kruskal\'s or Prim\'s algorithm to solve the problem.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst(v, e, edges): parent = [] rank = [] mst_weight = 0 edges = sorted(edges, key=lambda item: item[2]) for node in range(v): parent.append(node) rank.append(0) mst_edges = 0 for edge in edges: if mst_edges == v - 1: break u, w, weight = edge root_u = find(parent, u) root_w = find(parent, w) if root_u != root_w: mst_edges += 1 mst_weight += weight union(parent, rank, root_u, root_w) return mst_weight def minimum_spanning_tree(v, e, edges): return kruskal_mst(v, e, edges)"},{"question":"Alice and Bob are playing a game with strings. They each have a string of length n, where Alice\'s string is denoted by \\"a\\" and Bob\'s string is denoted by \\"b\\". They define the \\"match score\\" of two strings as the sum of absolute differences of ASCII values of their corresponding characters. For example, if Alice\'s string is \\"abc\\" and Bob\'s string is \\"xyz\\", the match score would be: |ord(\'a\') - ord(\'x\')| + |ord(\'b\') - ord(\'y\')| + |ord(\'c\') - ord(\'z\')| Alice and Bob want to know the minimum match score possible after performing some operations. They can either: 1. Swap any two characters in Alice\'s string. 2. Swap any two characters in Bob\'s string. Alice and Bob can perform these operations as many times as they want in order to achieve the minimum match score. Your task is to determine this minimum match score. The first line contains an integer n (1 ≤ n ≤ 100,000), the length of both strings. The second line contains a string \\"a\\" of length n. The third line contains a string \\"b\\" of length n. Output a single integer: the minimum match score. # Sample Input: ``` 3 abc xyz ``` # Sample Output: ``` 48 ``` # Explanation: In the given example, the ASCII values of the characters are: \'a\' = 97, \'b\' = 98, \'c\' = 99 and \'x\' = 120, \'y\' = 121, \'z\' = 122. Without any swaps, the match score would be: |97 - 120| + |98 - 121| + |99 - 122| = 23 + 23 + 23 = 69 However, by sorting both strings, we get: \'a\' = 97, \'b\' = 98, \'c\' = 99 and \'x\' = 120, \'y\' = 121, \'z\' = 122. The match score after sorting: |97 - 120| + |98 - 121| + |99 - 122| = 23 + 23 + 23 = 69 Here, the minimum match score remains the same after swapping to sort both strings.","solution":"def minimum_match_score(n, a, b): Returns the minimum match score possible after reordering characters in strings a and b. # Sort both strings to align the smallest ASCII values with each other sorted_a = sorted(a) sorted_b = sorted(b) # Calculate the minimum match score min_score = sum(abs(ord(sorted_a[i]) - ord(sorted_b[i])) for i in range(n)) return min_score"},{"question":"A company has a system for awarding its employees for exceptional performance. Each employee is given a certain number of points in recognition of their work. The company wants to distribute awards based on the points, where each award requires a certain minimally distinct number of points. An award is considered as distinct if the exact number of awards given satisfies a specific property. Let\'s define the award to be good if for every chosen integer d (1 ≤ d ≤ 5), there are exactly d number of employees who have been given an award. Given the array p1, p2, ..., pn where pi represents the points of the i-th employee, determine the maximum number of good awards the company can distribute. Note that an employee can only get one award. The first line contains a single integer n (1 ≤ n ≤ 105) — the number of employees. The second line contains n integers: p1, p2, ..., pn (0 ≤ pi ≤ 109). Print a single integer representing the maximum number of good awards that can be distributed. Example: Input 10 1 2 3 4 5 6 7 8 9 10 Output 15","solution":"def max_good_awards(n, points): Given the number of employees and their points, determine the maximum number of good awards. A \\"good\\" award is one where for each integer d (1 ≤ d ≤ 5), there are exactly d number of employees. if n < 15: return 0 return n // 15 * 15"},{"question":"Alicia is playing a game where she needs to arrange a series of events in chronological order. Each event is represented by a time interval [start, end] where start and end are inclusive, and events can overlap. Alicia wants to calculate the maximum number of overlapping events at any point in time to ensure she can handle the busiest times appropriately. The input consists of an integer n (1 ≤ n ≤ 105), the number of events. This is followed by n lines, each containing two integers start and end (1 ≤ start ≤ end ≤ 109), representing the start and end times of an event. Output a single integer, the maximum number of overlapping events at any point in time. For example, given the input: ``` 5 1 3 2 5 4 6 5 8 7 9 ``` The output should be: ``` 3 ``` Explanation: The maximum overlap occurs at time 5 with three events overlapping ([2 5], [4 6], and [5 8]).","solution":"def max_overlapping_events(n, events): This function calculates the maximum number of overlapping events at any point in time. Parameters: n (int): Number of events events (List[Tuple[int, int]]): List of tuples where each tuple represents (start, end) of an event Returns: int: The maximum number of overlapping events times = [] for start, end in events: times.append((start, 1)) # Event starting times.append((end + 1, -1)) # Event ending times.sort() max_overlap = 0 current_overlap = 0 for time, increment in times: current_overlap += increment max_overlap = max(max_overlap, current_overlap) return max_overlap"},{"question":"You are given a list of integers and a set of commands to perform on that list. Each command can either update a value in the list or query the minimum value within a specified range. Your task is to support these operations efficiently. The first line of the input contains two integers, N and Q (1 leq N, Q leq 100,000), representing the number of elements in the list and the number of commands, respectively. The second line contains N integers representing the initial values of the list. Each of the next Q lines contains one of the two commands: 1. `1 x y` — update the element at position x (1-indexed) to value y (1 le x le N, -10^9 le y le 10^9). 2. `2 l r` — query the minimum value in the range from position l to r (1-indexed and inclusive) (1 le l le r le N). The output for each query command should be the minimum value in the specified range. The output can be large, so you need to optimize the response time for each command. # Input: ``` N Q a1 a2 ... aN command1 command2 ... commandQ ``` # Output: For each query command `2 l r`, output one integer (the minimum value in the range `[l, r]`). # Example: Input: ``` 5 3 1 3 5 7 9 2 1 3 1 2 2 2 1 3 ``` Output: ``` 1 1 ``` Explanation: - Initially, the list is `[1, 3, 5, 7, 9]`. The minimum value between position 1 and 3 is 1. - After updating the second element to 2, the list becomes `[1, 2, 5, 7, 9]`. The minimum value between position 1 and 3 is still 1.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): # Initialize leaves in the tree for i in range(self.n): self.tree[self.n + i] = data[i] # Create internal nodes for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, pos, value): pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = min(self.tree[2 * pos], self.tree[2 * pos + 1]) def query(self, left, right): res = float(\'inf\') left += self.n right += self.n while left <= right: if left % 2 == 1: res = min(res, self.tree[left]) left += 1 if right % 2 == 0: res = min(res, self.tree[right]) right -= 1 left //= 2 right //= 2 return res def process_commands(n, q, arr, commands): seg_tree = SegmentTree(arr) result = [] for command in commands: cmd = command.split() if cmd[0] == \'1\': # Update command x = int(cmd[1]) - 1 y = int(cmd[2]) seg_tree.update(x, y) elif cmd[0] == \'2\': # Query command l = int(cmd[1]) - 1 r = int(cmd[2]) - 1 result.append(seg_tree.query(l, r)) return result"},{"question":"Alice is a competitive programmer who loves challenges and exploring different algorithms. She recently came across an interesting problem related to binary trees, and she needs your help to solve it. Alice has a binary tree with `n` nodes. Each node in the binary tree has a unique integer value from `1` to `n`. She wants to know the length of the longest path in the tree where she never visits a node with a value that is smaller than any node previously visited on that path. More formally, find the length of the longest path starting from the root of the tree, such that for any node on the path, all nodes previously visited on this path have values less than or equal to the value of the current node. The input consists of: - An integer `n` (`1 ≤ n ≤ 10^4`), the number of nodes in the binary tree. - `n` integers `parent[i]` (`parent[1]` is always `-1`, representing the root), where `parent[i]` represents the parent node of the `i`-th node (1-based index). The output should be a single integer representing the length of the longest path satisfying the given condition. Example: ``` Input: 5 -1 1 1 3 3 Output: 3 ``` In the example, the binary tree structure is as follows: ``` 1 / 2 3 / 4 5 ``` One of the longest paths satisfying the condition is `1 -> 3 -> 5`, with a length of `3`. Note: Node values correspond to their indices in the input, and the parent array defines the tree structure.","solution":"def longest_increasing_path(n, parent): from collections import defaultdict, deque # Build the tree from the parent array tree = defaultdict(list) for child in range(2, n + 1): tree[parent[child - 1]].append(child) def dfs(node, prev_val, depth): max_length = depth for child in tree[node]: if child >= prev_val: max_length = max(max_length, dfs(child, child, depth + 1)) return max_length # Start DFS traversal from the root node 1 return dfs(1, 1, 1)"},{"question":"You are given an array of positive integers (a = [a_1, a_2, ..., a_n]). You can perform the following operation on the array: - Choose two distinct indices (i) and (j) (1 ≤ i, j ≤ n) with (a_i neq a_j) and replace (a_i) with the greatest common divisor (GCD) of (a_i) and (a_j). Your task is to determine the maximum possible value that can appear in the array after performing any number of operations. The first line contains an integer (t) (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains an integer (n) (1 ≤ n ≤ 100) — the size of the array. The second line of each test case contains (n) positive integers (a_1, a_2, ..., a_n) (1 ≤ a_i ≤ 10^9). For each test case, print the maximum possible value that can appear in the array after performing any number of operations. Example: Input: 2 4 2 4 6 8 3 4 5 6 Output: 8 6 Explanation: In the first test case, one of the possible sequences is: - Choose indices 1 and 2: gcd(2, 4) = 2, the array remains [2, 4, 6, 8] - Choose indices 3 and 4: gcd(6, 8) = 2, the array becomes [2, 4, 2, 8] - Choose indices 1 and 4: gcd(2, 8) = 2, the array remains [2, 4, 2, 8] The maximum value in the array is 8. In the second test case, choose any two indices: - Choose indices 2 and 3: gcd(5, 6) = 1, the array becomes [4, 1, 6] The maximum value in the array is 6.","solution":"import math def max_possible_value(arr): Given a list of integers, determine the maximum possible value that can appear in the list after performing any number of GCD operations. # The maximum value that can appear in the array is the largest element in the original array. max_val = max(arr) return max_val def solve(test_cases): results = [] for n, array in test_cases: results.append(max_possible_value(array)) return results"},{"question":"Imagine you are given a connected, undirected graph with n vertices and m edges. Each edge in the graph has an integer weight. You want to determine the minimum cost to remove some edges from the graph so that the remaining graph becomes a spanning tree. A spanning tree is a subgraph that is a tree and connects all the vertices together. In other words, it is a subset of the graph that has all the vertices connected with the minimum possible number of edges (which is n-1 edges for n vertices). The task is to find the minimum total weight of the edges that need to be removed to achieve a spanning tree. # Input - The first line contains two integers n and m (2 le n le 100, n-1 le m le 4950) — the number of vertices and the number of edges. - The next m lines each contain three integers u, v, and w (1 le u, v le n, 1 le w le 10^4), representing an edge between vertices u and v with weight w. # Output - A single integer — the minimum total weight of the edges that need to be removed. # Note - The input graph is guaranteed to be connected. # Example Input ``` 4 5 1 2 3 1 3 2 1 4 4 2 3 1 3 4 5 ``` Output ``` 8 ``` # Explanation In the given example, the initial graph is: 1 - 2 (weight 3) 1 - 3 (weight 2) 1 - 4 (weight 4) 2 - 3 (weight 1) 3 - 4 (weight 5) One potential minimum spanning tree could be: 1 - 3 (weight 2) 2 - 3 (weight 1) 1 - 4 (weight 4) To achieve this, we keep edges with total weight 2 + 1 + 4 = 7 and remove edges with weights 3 and 5, giving a total removed weight of 8. # Constraints - Your solution should not exceed O(n^2 log n) in time complexity.","solution":"import heapq def minimum_removed_weight(n, m, edges): This function computes the minimum total weight of the edges that need to be removed so that the remaining graph becomes a spanning tree. Parameters: n (int): number of vertices m (int): number of edges edges (List[Tuple[int, int, int]]): list of edges where each edge is represented as a tuple (u, v, w) Returns: int: the minimum total weight of the edges to be removed # Using Kruskal\'s algorithm to find the weight of the minimum spanning tree (MST) # Sort all edges in non-decreasing order edges.sort(key=lambda x: x[2]) # Helper function to find the root of a vertex def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) # Helper function to perform union of two sets def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_weight = 0 mst_edges = [] for edge in edges: u, v, w = edge u -= 1 v -= 1 uroot = find(parent, u) vroot = find(parent, v) if uroot != vroot: mst_weight += w mst_edges.append(edge) union(parent, rank, uroot, vroot) # Calculate the total weight of all edges total_weight = sum(w for u, v, w in edges) # The result is the total weight of all edges minus the weight of MST return total_weight - mst_weight"},{"question":"You are given a matrix of dimensions n times m. The matrix is initially filled with zeros. You need to perform a series of operations on this matrix. Each operation specifies a submatrix (a continuous block within the matrix) and a value v to add to each element of this submatrix. After performing all the operations, you need to output the final state of the matrix. Each operation is specified by four integers x1, y1, x2, y2 (1 leq x1 leq x2 leq n, 1 leq y1 leq y2 leq m) which define the top-left corner (x1, y1) and bottom-right corner (x2, y2) of the submatrix and an integer v (-10^4 leq v leq 10^4) which is the value to be added to each element of the submatrix. The first line contains two integers n (1 leq n leq 500) and m (1 leq m leq 500), the dimensions of the matrix. The second line contains an integer k (1 leq k leq 100000), the number of operations. Each of the next k lines contains five integers x1, y1, x2, y2, and v, the parameters of the operation. Output n lines, each containing m integers, the final state of the matrix after performing all the operations. # Example Input: ``` 3 3 3 1 1 2 2 1 2 2 3 3 2 1 3 3 3 3 ``` Output: ``` 1 1 3 1 3 5 0 2 5 ```","solution":"def update_matrix(n, m, operations): # Initialize matrix with zeros matrix = [[0 for _ in range(m)] for _ in range(n)] # Apply each operation for x1, y1, x2, y2, v in operations: for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): matrix[i][j] += v return matrix # Function to parse input and return the final matrix def process_operations(n, m, k, operations): return update_matrix(n, m, operations) # Example usage: # matrix = process_operations(3, 3, 3, [(1, 1, 2, 2, 1), (2, 2, 3, 3, 2), (1, 3, 3, 3, 3)]) # for row in matrix: # print(\\" \\".join(map(str, row)))"},{"question":"Implement an algorithm that takes a string s and a list of words, and determines if s can be segmented into a sequence of one or more dictionary words from the given list. A dictionary word can be used multiple times in the segmentation. More formally, given a string s and a dictionary of words dict, return true if s can be segmented into a sequence of one or more words from dict, otherwise return false. For example, given: * s = \\"leetcode\\" * dict = [\\"leet\\", \\"code\\"] Return true because \\"leetcode\\" can be segmented as \\"leet code\\". Similarly, given: * s = \\"applepenapple\\" * dict = [\\"apple\\", \\"pen\\"] Return true because \\"applepenapple\\" can be segmented as \\"apple pen apple\\". However, given: * s = \\"catsandog\\" * dict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Return false because you cannot segment \\"catsandog\\" into a sequence of one or more dictionary words. The first line contains the string s. The second line contains an integer n, the number of dictionary words. Each of the next n lines contains a single word from the dictionary. Output \\"true\\" or \\"false\\" based on whether the string can be segmented using the given dictionary words. # Input Format ``` line 1: string (1 ≤ |s| ≤ 300) line 2: integer n (1 ≤ n ≤ 100) lines 3 to (2+n): strings representing dictionary words (1 ≤ |word| ≤ 20) ``` # Output Format ``` \\"true\\" or \\"false\\" ``` # Example Input: ``` leetcode 2 leet code ``` Output: ``` true ```","solution":"def word_break(s, word_dict): Determines if the string s can be segmented into a sequence of one or more dictionary words from the given list. :param s: str, the input string :param word_dict: list of str, the list of dictionary words :return: bool, true if s can be segmented, otherwise false word_set = set(word_dict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[-1]"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Your task is to calculate the minimum number of edges that need to be removed in such a way that the graph is divided into exactly `k` connected components. The graph does not contain multiple edges between the same pair of nodes, and no edge connects a node to itself. The first line of the input contains three integers `n`, `m`, and `k` (2 ≤ n ≤ 100,000, 1 ≤ m ≤ 100,000, 1 ≤ k ≤ n) — the number of nodes, the number of edges, and the desired number of connected components, respectively. The next `m` lines contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) describing an edge between nodes `u` and `v`. Output a single integer — the minimum number of edges that need to be removed to divide the graph into exactly `k` connected components. If it is impossible to achieve exactly `k` connected components, print `-1`.","solution":"def min_edges_to_remove(n, m, k, edges): from collections import defaultdict, deque # Helper function to perform BFS and find connected components def bfs(start, visited, adj_list): queue = deque([start]) visited[start] = True component_size = 0 while queue: node = queue.popleft() component_size += 1 for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component_size # Create the adjacency list representation of the graph adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (n + 1) connected_components = 0 component_sizes = [] # Find the connected components using BFS for i in range(1, n + 1): if not visited[i]: component_size = bfs(i, visited, adj_list) component_sizes.append(component_size) connected_components += 1 # If we already have less components than k, it\'s impossible to reach exactly k components if connected_components > k: return -1 # We need to explore the possibility to split some of the larger components # Sort the component_sizes in reverse order to analyze largest components first component_sizes.sort(reverse=True) extra_components = 0 edges_removed = 0 for size in component_sizes: if connected_components >= k: break # We can split each component at most (size - 1) times (because a single node can\'t be split further) if size > 1: components_to_add = min(size - 1, k - connected_components) connected_components += components_to_add edges_removed += components_to_add # Check if we managed to reach exactly k components if connected_components != k: return -1 return edges_removed"},{"question":"Given an array of integers, you are required to answer few queries where each query contains two integers left and right. For each query, you need to find subarray sum and the minimum element in the range from left to right (inclusive). The array does not change over multiple queries. You should preprocess the array to answer each query efficiently. Input: - The first line contains an integer ( n ) (1 leq n leq 10^5) — the size of the array. - The second line contains ( n ) integers ( a[i] ) (1 leq a[i] leq 10^9) — the elements of the array. - The third line contains an integer ( q ) (1 leq q leq 10^5) — number of queries. - The next ( q ) lines contain two integers ( left ) and ( right ) (1 leq left leq right leq n) — the query range. Output: - For each query, print two space-separated integers — the sum of the subarray and the minimum element in the range. Example: Input 8 1 2 7 4 5 3 6 8 3 1 4 2 6 3 8 Output 14 1 21 2 33 3","solution":"def preprocess_array(arr): n = len(arr) # Preprocess prefix sums prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] # Preprocess segment tree for range minima queries import math st = [[0] * (math.ceil(math.log2(n))+1) for _ in range(n)] # Initialize leaves of segment tree for i in range(n): st[i][0] = arr[i] j = 1 while (1 << j) <= n: i = 0 while (i + (1 << j) - 1) < n: st[i][j] = min(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]) i += 1 j += 1 return prefix_sum, st def range_sum(prefix_sum, left, right): return prefix_sum[right + 1] - prefix_sum[left] def range_minimum(st, left, right): import math j = int(math.log2(right - left + 1)) return min(st[left][j], st[right - (1 << j) + 1][j]) def answer_queries(arr, queries): n = len(arr) prefix_sum, st = preprocess_array(arr) results = [] for left, right in queries: sum_range = range_sum(prefix_sum, left - 1, right - 1) min_range = range_minimum(st, left - 1, right - 1) results.append((sum_range, min_range)) return results"},{"question":"Alice and Bob are playing a game with an array of integers. They start with an array `a` of length `n`. Each player can perform one of two operations on their turn: 1. Remove any single element from the array. 2. Choose any two elements from the array, remove them both, and append their sum to the array. The game ends when there are no more legal moves left, i.e., when the array is empty. Alice always goes first, and both players play optimally. The player who cannot make a move loses. Given the initial array, determine if Alice has a winning strategy. The first line of input contains an integer `n` (1 ≤ n ≤ 100) — the number of elements in the array `a`. The second line contains `n` space-separated integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9) — the elements of the array. Output \\"Alice\\" if Alice has a winning strategy, or \\"Bob\\" otherwise. Example: Input: 4 1 2 3 4 Output: Alice Input: 3 2 2 2 Output: Bob","solution":"def game_strategy(n, a): Determines if Alice has a winning strategy given array a of length n. Parameters: n (int): The number of elements in the array. a (list): A list of integers. Returns: str: \\"Alice\\" if Alice has a winning strategy, \\"Bob\\" otherwise. return \\"Alice\\" if n % 2 == 1 else \\"Bob\\""},{"question":"You are given two strings, s1 and s2, both consisting of lowercase English letters. Your task is to determine if you can reorder the characters of s1 to match s2. However, there\'s a constraint: you can only move each character up to k positions to its left or right in s1. If it\'s possible to reorder s1 into s2 under these constraints, print \\"YES\\". Otherwise, print \\"NO\\". The first line contains an integer k (0 ≤ k ≤ 100), which indicates the maximum number of positions each character in s1 can move. The second line contains the string s1. The third line contains the string s2. It\'s guaranteed that s1 and s2 are of the same length and consist only of lowercase English letters. Print \\"YES\\" or \\"NO\\" based on whether you can reorder s1 into s2 under the given constraints. Example: Input: 2 abcdef abcfed Output: YES In this example, if you move \'d\' from position 4 to position 5, \'e\' from position 5 to position 4, and \'f\' from position 6 to position 3, s1 becomes s2.","solution":"def can_reorder_within_k(s1, s2, k): Determines if s1 can be reordered to match s2 with each character moved up to k positions left or right. s1: str - The original string to be reordered s2: str - The target string to match after reordering k: int - The maximum number of positions each character can be moved Returns: str - \\"YES\\" if s1 can be reordered to match s2 within the constraints, otherwise \\"NO\\" n = len(s1) # Check each character in s2 for i in range(n): if s1[i] == s2[i]: continue found = False # Check up to k positions left and right for j in range(max(0, i - k), min(n, i + k + 1)): if s1[j] == s2[i]: s1 = s1[:i] + s1[j] + s1[i + 1:j] + s1[i] + s1[j + 1:] found = True break if not found: return \\"NO\\" return \\"YES\\""},{"question":"You are given an integer array a consisting of n integers. Your task is to find the minimum number of elements to remove from the array such that the remaining array is strictly increasing. In other words, you need to make the remaining array such that for any two consecutive elements a_i and a_{i+1}, a_i < a_{i+1}. The first line of the input contains one integer n (1 le n le 2000) — the number of elements in a. The second line of the input contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), where a_i is the i-th element of a. Print one integer — the minimum number of elements to remove to make the array strictly increasing. In the first example, by removing the element 9, the resulting array is [1, 2, 3, 4], which is strictly increasing. In the second example, by removing the elements 10 and 22, the resulting array is [1, 2, 8], which is strictly increasing.","solution":"def min_removals_to_increasing(arr): This function takes an array of integers and returns the minimum number of elements to remove to make the array strictly increasing. n = len(arr) # dp[i] will be the length of the longest increasing subsequence that ends with arr[i] dp = [1] * n for i in range(n): for j in range(i): if arr[j] < arr[i]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence lis_length = max(dp) # Minimum deletions is the array length minus the length of the LIS return n - lis_length"},{"question":"Sneak Peak is a famous street artist known for his intricate murals. He is planning a series of public artworks along a grid of alleyways. In this grid, Sneak Peak has marked some cells as passable (P) and others as impassable (I). Starting from the top-left corner of the grid, Sneak Peak wants to find the number of possible ways to reach the bottom-right corner without passing through any impassable cells. You are given multiple grids representing different areas where Sneak Peak might paint. For each grid, determine the number of unique paths from the top-left corner (1, 1) to the bottom-right corner (n, m). Note that Sneak Peak can only move right or down, and cells marked with \'I\' are completely impassable. If there are no valid paths, return 0 for that grid. The first line of the input contains an integer t (1 ≤ t ≤ 50), the number of grids. Each grid starts with two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. The next n lines each contain a string of m characters, representing the grid where \'P\' denotes passable cells and \'I\' denotes impassable cells. Grids are separated by an empty line. Output t lines, each containing the number of unique paths for the corresponding grid. For example: Input: 2 3 3 PPP PIP PPP 2 2 PI PP Output: 2 1","solution":"def unique_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'I\' or grid[n-1][m-1] == \'I\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'I\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] def solve(t, grids): results = [] for grid in grids: results.append(unique_paths(grid)) return results # Function to parse the input and run the solution def main(input_data): data = input_data.split(\'n\') t = int(data[0]) grids = [] index = 1 for _ in range(t): if data[index] == \'\': index += 1 n, m = map(int, data[index].split()) grid = [] for i in range(n): grid.append(data[index + 1 + i]) grids.append(grid) index += n + 1 results = solve(t, grids) for result in results: print(result)"},{"question":"Ayesha is organizing a series of coding contests. Each contest has a specific difficulty level, and she wants to make sure that no two consecutive contests have the same difficulty level. You are given a list of contests with their difficulty levels. Your task is to reorder the contests in a way that no two consecutive contests have the same difficulty level. If it is impossible to reorder the contests in such a way, return \\"NO\\". Otherwise, return \\"YES\\" and the new order of contests. The input starts with an integer t (1 <= t <= 100) - the number of test cases. Each test case begins with an integer n (1 <= n <= 100) - the number of contests. The next line contains n integers, where each integer di (1 <= di <= 1000) represents the difficulty level of the i-th contest. For each test case, if it is possible to reorder the contests so that no two consecutive contests have the same difficulty level, print \\"YES\\" on one line and on the next line, print the reordered difficulty levels. If it is not possible, print \\"NO\\". # Input ``` 2 3 1 1 2 4 1 1 1 3 ``` # Output ``` YES 1 2 1 NO ``` Explanation: - In the first test case, the contests can be reordered to `[1, 2, 1]` ensuring no two consecutive contests have the same difficulty level. - In the second test case, it is impossible to reorder the contests to meet the condition, hence the output is \\"NO\\".","solution":"def can_reorder_contests(t, test_cases): Determine if contests can be reordered so that no two consecutive contests have the same difficulty level. :param t: Number of test cases :param test_cases: List of test cases, where each test case is a tuple (n, difficulties) :return: List of results for each test case containing \\"YES\\" or \\"NO\\" and the ordering if \\"YES\\" from collections import Counter import heapq results = [] for n, difficulties in test_cases: counter = Counter(difficulties) max_heap = [(-count, diff) for diff, count in counter.items()] heapq.heapify(max_heap) result = [] prev_count, prev_diff = 0, None while max_heap: count, diff = heapq.heappop(max_heap) result.append(diff) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_diff)) count += 1 prev_count, prev_diff = count, diff if len(result) == n: results.append((\\"YES\\", result)) else: results.append((\\"NO\\",)) return results def handle_input_output(): t = int(input()) test_cases = [] for _ in range(t): n = int(input()) difficulties = list(map(int, input().split())) test_cases.append((n, difficulties)) results = can_reorder_contests(t, test_cases) for result in results: if result[0] == \\"NO\\": print(\\"NO\\") else: print(\\"YES\\") print(\\" \\".join(map(str, result[1])))"},{"question":"Given an undirected graph with n vertices and m edges, determine whether it is possible to color the graph using only two colors such that no two adjacent vertices share the same color. The first line of input contains two integers n and m (1 ≤ n ≤ 200, 0 ≤ m ≤ n*(n-1)/2) — the number of vertices and edges in the graph. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating an edge between vertices u and v. If it is possible to color the graph with two colors in the required manner, print \\"Yes\\" followed by the color of each vertex (either 1 or 2). If there are multiple valid colorings, any one of them will be accepted. If it is not possible, print \\"No\\".","solution":"def is_bipartite(n, m, edges): from collections import deque # Initialize graph as adjacency list graph = [[] for _ in range(n)] for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) # Initialization of color array, -1 means uncolored color = [-1] * n # Helper function to perform BFS def bfs(start): queue = deque([start]) color[start] = 0 # Start coloring with one color while queue: vertex = queue.popleft() for neighbor in graph[vertex]: if color[neighbor] == -1: # If the neighbor has not been colored color[neighbor] = 1 - color[vertex] # Assign opposite color queue.append(neighbor) elif color[neighbor] == color[vertex]: # Conflict detected return False return True # Perform BFS on each component for i in range(n): if color[i] == -1: # Unvisited node if not bfs(i): return \\"No\\" # Convert color array to 1-indexed coloring result = [\\"Yes\\"] + [col + 1 for col in color] return result"},{"question":"You are given an array of integers and your goal is to rearrange the array such that the difference between the largest and the smallest elements in the new array is minimized. You can perform the following operation any number of times: Choose two elements from the array and swap them. Write a function `minimize_gap(arr)` that takes an array of integers `arr`, and returns the minimum possible difference between the largest and the smallest elements after any number of swaps. # Function Signature ```python def minimize_gap(arr: List[int]) -> int: ``` # Input - An array `arr` of integers (1 ≤ |arr| ≤ 100,000, 1 ≤ arr[i] ≤ 10^9). # Output - An integer representing the minimum difference between the largest and the smallest elements in the rearranged array. # Examples Example 1 ```python arr = [3, 1, 4, 1, 5, 9] print(minimize_gap(arr)) # Output: 8 ``` Explanation: The largest element is 9 and the smallest element is 1. No matter the permutation, the minimum difference is 9 - 1 = 8. Example 2 ```python arr = [1, 3, 2] print(minimize_gap(arr)) # Output: 2 ``` Explanation: The largest element is 3 and the smallest element is 1. No matter the permutation, the minimum difference is 3 - 1 = 2. # Note In both examples, the difference between the largest and smallest elements of any permutation of the array remains the same. Thus, the minimum difference we can get is the absolute difference between the maximum and the minimum values in the array.","solution":"from typing import List def minimize_gap(arr: List[int]) -> int: Returns the minimum possible difference between the largest and the smallest elements after any number of swaps. return max(arr) - min(arr)"},{"question":"Polycarp and Vasiliy are at it again, but this time they have a new game on a rectangular grid of size n x m. Polycarp starts at the top-left corner (1, 1) and needs to reach the bottom-right corner (n, m). Similarly, Vasiliy starts at the bottom-right corner (n, m) and needs to reach the top-left corner (1, 1). They take turns to move, with Polycarp moving first. In each turn, a player can move one cell up, down, left, or right, but cannot move to a cell that the opponent has already visited or is visiting. Your task is to determine if Polycarp can win if both play optimally. A player wins if they reach their destination first. The first and only line of input contains two integers n and m (2 ≤ n, m ≤ 105), the dimensions of the grid. If Polycarp has a winning strategy, output \\"Polycarp\\". Otherwise, output \\"Vasiliy\\". In the first sample test, Polycarp would start from (1, 1) and can immediately move to (1, 2) or (2, 1). Given the optimal moves, determine the outcome.","solution":"def determine_winner(n, m): This function checks if Polycarp can win the game on a grid of size n x m. return \\"Polycarp\\""},{"question":"You are given a sequence of integers where each integer represents a height of a building in a row of buildings. The goal is to find the total number of buildings that have a view of the sunset, where the view of the sunset is only possible when no building to its left has a greater height. A building can see the sunset if all of the buildings to its left are shorter than the building itself. Let\'s denote the sequence of building heights as h_1, h_2, ldots, h_n. Write a function that receives the sequence of building heights and returns the number of buildings with a sunset view. The first line of input contains an integer n (1 le n le 10^5) — the number of buildings. The second line contains n space-separated integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) — the heights of the buildings. Output a single integer — the number of buildings that have a view of the sunset. **Example** Input: ``` 5 3 7 8 3 6 ``` Output: ``` 3 ``` Explanation: In the example, the buildings at positions 1, 2, and 3 have a sunset view. The first building can always see the sunset, the second building is taller than the first, and the third building is taller than both the first and the second building. The fourth building cannot see the sunset because it is shorter than the third building. The fifth building cannot see the sunset because the third building is taller.","solution":"def count_sunset_buildings(buildings): Returns the number of buildings with a sunset view. Parameters: buildings (list): A list of integers representing the heights of the buildings. Returns: int: The number of buildings that have a sunset view. count = 0 max_height = float(\'-inf\') for height in buildings: if height > max_height: count += 1 max_height = height return count"},{"question":"You are given a rectangular grid with `n` rows and `m` columns, where some of the cells are marked as blocked cells and the rest are open cells. You can start from any open cell in the first column and you need to reach any open cell in the last column. You can move from one cell to another if they are adjacent (up, down, left, right) and both cells are open. Your task is to determine if there exists a path from any open cell in the first column to any open cell in the last column. **Input:** The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 500), the number of rows and columns, respectively. The next `n` lines each contain `m` characters, representing the grid. A `.` denotes an open cell and a `#` denotes a blocked cell. **Output:** Output \\"YES\\" if there exists a path from any open cell in the first column to any open cell in the last column. Otherwise, output \\"NO\\". **Example:** ```plaintext Input: 4 5 ..... .#... ..#.. ..... Output: YES ``` ```plaintext Input: 3 4 .#.. .#.. .#.. Output: NO ``` **Explanation:** In the first example, there are multiple paths from the first to the last column. For instance, you can start at (1,1) and follow the path right-right-right-right to reach (1,5). In the second example, it is not possible to reach the last column from the first column as all possible paths are blocked.","solution":"def can_reach_last_column(n, m, grid): from collections import deque def bfs(starting_points): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = set(starting_points) queue = deque(starting_points) while queue: x, y = queue.popleft() if y == m - 1: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False starting_points = [(i, 0) for i in range(n) if grid[i][0] == \'.\'] if not starting_points: return \\"NO\\" if bfs(starting_points): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a string `s` consisting of lowercase English letters and an integer `k`. Your task is to determine the length of the longest subsequence of `s` such that it contains at most `k` distinct characters. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, given `s = \\"abcba\\"` and `k = 2`, one of the longest subsequences containing at most 2 distinct characters is \\"abba\\", and its length is 4. # Input The input consists of multiple test cases. The first line contains an integer `t` (1 leq t leq 1000) — the number of test cases. The following are descriptions of the `t` test cases. Each test case consists of two lines: - The first line contains a string `s` (1 leq |s| leq 1000) — the string to be analyzed. - The second line contains an integer `k` (1 leq k leq 26) — the maximum number of distinct characters allowed. # Output For each test case, output a single integer — the length of the longest subsequence of `s` that contains at most `k` distinct characters. # Example Input: ``` 2 abcba 2 aabbcc 1 ``` Output: ``` 4 2 ``` Note: 1. In the first test case, one of the longest subsequences containing at most 2 distinct characters is \\"abba\\". 2. In the second test case, one of the longest subsequences containing at most 1 distinct character is \\"aa\\" or \\"bb\\" or \\"cc\\". All have a length of 2.","solution":"from collections import defaultdict def longest_subsequence_with_k_distinct(s, k): Returns the length of the longest subsequence of string s that contains at most k distinct characters. if not s or k == 0: return 0 n = len(s) freq = defaultdict(int) max_len = 0 left = 0 distinct_count = 0 for right in range(n): if freq[s[right]] == 0: distinct_count += 1 freq[s[right]] += 1 while distinct_count > k: freq[s[left]] -= 1 if freq[s[left]] == 0: distinct_count -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len def solve_longest_subsequence(test_cases): results = [] for s, k in test_cases: results.append(longest_subsequence_with_k_distinct(s, k)) return results"},{"question":"Draco is learning to play an ancient chess-like board game. The game is played on an n x n board, and it involves only one piece, called a dragon. Initially, the dragon is placed in the top-left corner of the board, at position (1, 1). The objective of the game is to move the dragon to the bottom-right corner of the board, at position (n, n). The dragon can only move either one step to the right or one step down at any given move. Given the size of the board n, you need to compute the number of distinct paths the dragon can take to reach the bottom-right corner from the top-left corner. The first line of input contains a single integer n (1 ≤ n ≤ 15) – the size of the board. Output a single integer – the number of distinct paths the dragon can take to reach the bottom-right corner of the board. # Example Input 3 Output 6 Input 4 Output 20 # Note In the first example, there are 6 unique paths for a 3x3 board: 1. (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) 2. (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) 3. (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) 4. (1,1) -> (2,1) -> (2,2) -> (2,3) -> (3,3) 5. (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) 6. (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3)","solution":"def num_paths(n): Returns the number of distinct paths in an n x n board from top-left corner to bottom-right corner, while only moving right or down. # Create a 2D dp array with dimensions (n + 1) x (n + 1) dp = [[0] * (n + 1) for _ in range(n + 1)] # Starting position (1, 1) dp[1][1] = 1 for i in range(1, n + 1): for j in range(1, n + 1): if i == 1 and j == 1: continue # The number of ways to reach (i, j) is the sum of ways to reach (i-1, j) and (i, j-1) dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[n][n]"},{"question":"Alice and Bob are playing a game with two integers. Initially, Alice has an integer `a`, and Bob has an integer `b`. The game proceeds in a series of rounds, where in each round: - Alice can either increase her integer `a` by 1, subtract 1 from `a`, or leave `a` unchanged. - Bob can perform the same actions on his integer `b`. The objective of Alice and Bob is to make their integers equal to each other using the fewest number of moves possible. They take turns alternately, with Alice going first. Given the initial values of `a` and `b`, determine the minimum number of moves required for Alice and Bob to make their integers equal. The first and only line of input contains two integers, `a` and `b` (-10^9 leq a, b leq 10^9). Output a single integer — the minimum number of moves required for Alice and Bob to make their integers equal. # Example Input ``` 5 8 ``` Output ``` 3 ``` Input ``` -3 4 ``` Output ``` 7 ``` # Note In the first example, Alice can increase her integer from 5 to 6 in the first move, Bob can decrease his integer from 8 to 7 in the second move, and Alice can increase her integer from 6 to 7 in the third move, making their integers equal. Thus, three moves are required. In the second example, Alice needs to increase her integer from -3 to 0 in three moves, and Bob needs to decrease his integer from 4 to 0 in four moves, requiring a total of seven moves.","solution":"def minimum_moves(a, b): Returns the minimum number of moves required for Alice and Bob to make their integers equal. return abs(a - b)"},{"question":"A popular online game consist of multiple levels arranged in a peculiar way. Each level is a node, and there are directed edges between some pairs of nodes indicating that a player can move from one level to another. Each node has a certain score associated with it. A player begins at a specific starting level and must proceed to a designated finishing level, accumulating scores along the way. However, the player can visit each level at most once. The objective is to determine the maximum possible score the player can attain by starting at the starting level and ending at the finishing level. The first line contains three space-separated integers n, m, and k (2 ≤ n ≤ 1000, 1 ≤ m ≤ 5000, 1 ≤ k ≤ 1000) — the number of levels, the number of directed edges, and the number of queries. The second line contains n space-separated integers s1, s2, ..., sn (1 ≤ si ≤ 100) — the scores of each level. Each of the next m lines contains two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating a directed edge from level u to level v. Each query in the k subsequent lines contains two space-separated integers start and finish (1 ≤ start, finish ≤ n) — the starting and finishing levels for that query. For each query, print the maximum possible score the player can attain. If there is no valid path from the starting level to the finishing level, print \\"-1\\" (without quotes). In the first sample, the maximum score from starting level 1 to finishing level 3 could be obtained by visiting levels 1, 2, and 3 in succession. In the second sample, there might be no valid path from starting level 4 to finishing level 2. In such cases, the program should output \\"-1\\". Example: Input: 5 6 2 10 20 30 40 50 1 2 2 3 1 3 3 4 4 5 2 5 1 3 4 2 Output: 60 -1","solution":"from collections import defaultdict, deque def bfs_max_score(n, scores, adj, start, finish): # Early return if start is finish if start == finish: return scores[start - 1] # Initialize distances with -1 indicating unreachable dist = [-1] * n dist[start - 1] = scores[start - 1] # BFS queue queue = deque([start - 1]) while queue: current = queue.popleft() for neighbor in adj[current]: # Calculate the potential new score if taking the path to the neighbor potential_score = dist[current] + scores[neighbor] if potential_score > dist[neighbor]: dist[neighbor] = potential_score queue.append(neighbor) return dist[finish - 1] def max_scores_from_queries(n, m, k, scores, edges, queries): adj = defaultdict(list) for u, v in edges: adj[u - 1].append(v - 1) results = [] for start, finish in queries: max_score = bfs_max_score(n, scores, adj, start, finish) results.append(max_score if max_score != -1 else -1) return results"},{"question":"Given an array of integers, determine if you can rearrange the elements of the array into a strictly increasing sequence by removing at most one element. If it is possible, return \\"YES\\"; otherwise, return \\"NO\\". The first line contains one integer t (1 le t le 100) — the number of test cases. Each of the following t lines contains the description of a test case. Each test case includes two lines: the first line contains one integer n (2 le n le 10^5), the length of the array. The second line contains n distinct integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. Print \\"YES\\" if you can rearrange the array into a strictly increasing sequence by removing at most one element from the array, otherwise, print \\"NO\\". In the first test case, you can remove the element 4, and rearrange the remaining elements to obtain the strictly increasing sequence [1, 2, 3]. In the second test case, it’s not possible to rearrange the elements into a strictly increasing sequence even if you remove one element, so the answer is \\"NO\\". In the third test case, you don’t need to remove any elements, as the array is already in a strictly increasing order. So the answer is \\"YES\\".","solution":"def can_rearrange(arr): Determines if you can rearrange the elements of the array into a strictly increasing sequence by removing at most one element. def is_strictly_increasing(sub_arr): return all(sub_arr[i] < sub_arr[i + 1] for i in range(len(sub_arr) - 1)) n = len(arr) if is_strictly_increasing(arr): return \\"YES\\" for i in range(n): if is_strictly_increasing(arr[:i] + arr[i+1:]): return \\"YES\\" return \\"NO\\" def solve(test_cases): results = [] for n, arr in test_cases: results.append(can_rearrange(arr)) return results"},{"question":"Fiona loves collecting stamps from different countries. She has a collection of n unique stamp albums, each with a certain number of stamps. Each album can be represented as a node in a graph, and Fiona\'s travel to acquire new stamps can be represented as edges between these nodes. However, there are some restrictions on her travel path. Fiona wants to know the maximum number of albums she can visit if she must start her journey from a specific album, end at any album, and visit each album exactly once. The first line of input contains an integer n (1 le n le 10^5), the number of albums. The second line contains another integer m (0 le m le 2 cdot 10^5), the number of bidirectional paths between albums. Each of the next m lines contains two integers u and v (1 le u, v le n; u ne v) representing a bidirectional path between albums u and v. It is guaranteed that there is at most one direct path between any two albums. The last line contains a single integer s (1 le s le n), which is the album Fiona starts her journey from. Output a single integer, the maximum number of albums Fiona can visit from the starting album s. Example: ``` Input: 5 4 1 2 1 3 3 4 2 5 1 Output: 4 ``` Explanation: One possible path starting from album 1 is: 1 -> 2 -> 5 or 1 -> 3 -> 4. Another path could be: 1 -> 2 -> 5 -> 3. The maximum number of unique albums visited is 4 in this scenario.","solution":"from collections import deque, defaultdict def max_albums_visited(n, m, edges, s): def bfs(start): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True count = 0 while queue: album = queue.popleft() count += 1 for neighbor in graph[album]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return count graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) return bfs(s) # Input parsing def parse_input(input_string): input_lines = input_string.strip().split(\'n\') n = int(input_lines[0]) m = int(input_lines[1]) edges = [] for i in range(2, 2 + m): u, v = map(int, input_lines[i].split()) edges.append((u, v)) s = int(input_lines[2 + m]) return n, m, edges, s def main(input_string): n, m, edges, s = parse_input(input_string) print(max_albums_visited(n, m, edges, s)) # Example for manual test input_string = 5 4 1 2 1 3 3 4 2 5 1 main(input_string)"},{"question":"Sophia has recently discovered a new game that involves paths on a grid. She has an m x n grid (m rows and n columns) and wants to determine the number of unique paths from the top-left corner to the bottom-right corner. However, there\'s a twist: she can only move right or down one step at a time, and certain cells in the grid are blocked, meaning she cannot step on those cells. Given the dimensions of the grid and the positions of the blocked cells, determine the number of unique paths Sophia can take to reach the bottom-right corner of the grid from the top-left corner. The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns in the grid. The second line contains an integer k (0 ≤ k ≤ 100,000) — the number of blocked cells. Each of the next k lines contains two integers r_i and c_i (1 ≤ r_i ≤ m, 1 ≤ c_i ≤ n) — the row and column indices of each blocked cell. Note that (r_i, c_i) are 1-based indices. Print a single integer — the number of unique paths from the top-left corner to the bottom-right corner of the grid, considering the blocked cells. If no such path exists, print 0. For example: - In the first sample, the grid is 3x3 and no cells are blocked. There are 6 unique paths from (1,1) to (3,3). - In the second sample, the grid is 3x3 with blocked cells at (2,2). There are 2 unique paths from (1,1) to (3,3). ```plaintext Input: 3 3 0 Output: 6 Input: 3 3 1 2 2 Output: 2 ```","solution":"def unique_paths(m, n, k, blocked_cells): Determine the number of unique paths from the top-left to the bottom-right of a m x n grid, considering blocked cells where she cannot step. # Create a dp table with all zeros dp = [[0] * n for _ in range(m)] # Create a set for quick lookup of blocked cells blocked = set((r-1, c-1) for r, c in blocked_cells) # Start position (0,0) shouldn\'t be blocked if (0, 0) in blocked: return 0 # Initialize the starting point dp[0][0] = 1 # Fill the dp table considering blocked cells for i in range(m): for j in range(n): if (i, j) in blocked: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] # The bottom-right cell has the number of unique paths return dp[m-1][n-1]"},{"question":"Theresa is planning a trip and wants to optimize her backpack space. She has a list of items, each with a specific weight and a value associated with it. She wants to maximize the total value of the items she can carry, given that the total weight of the items she takes with her must not exceed a certain limit. You need to help Theresa by determining the maximum value she can carry with her in the backpack. The first line of the input contains two integers n and W (1 ≤ n ≤ 1000, 1 ≤ W ≤ 1000) — the number of items and the maximum weight that Theresa\'s backpack can carry, respectively. The next n lines each contain two integers w_i and v_i (1 ≤ w_i, v_i ≤ 1000) — the weight and the value of the i-th item. Print the maximum value of items that Theresa can carry in the backpack. For example, consider the following input: ``` 4 5 2 3 3 4 4 5 5 6 ``` In this case, Theresa can choose items with weights and values (2, 3) and (3, 4), resulting in a total weight of 5 and a total value of 7. Thus, the output should be: ``` 7 ```","solution":"def knapsack(n, W, items): Function to determine the maximum value that can be achieved with given weight limit. :param n: int - number of items :param W: int - maximum weight capacity of the backpack :param items: list of tuples - each tuple containing (weight, value) of an item :return: int - maximum value of items that can be carried # Creating a dp array for storing intermediate results dp = [[0] * (W + 1) for _ in range(n + 1)] # Filling the dp array for i in range(1, n + 1): for w in range(1, W + 1): if items[i-1][0] <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-items[i-1][0]] + items[i-1][1]) else: dp[i][w] = dp[i-1][w] return dp[n][W] # Example usage: n = 4 W = 5 items = [(2, 3), (3, 4), (4, 5), (5, 6)] print(knapsack(n, W, items)) # Output: 7"},{"question":"Eva loves collecting various types of gems. She has recently come across a peculiar shop that engages customers with a unique offer: it allows purchasers to buy a set of gem types based on predefined packs. However, each pack can only be bought once, and once a pack is bought, the customer can’t return it. Eva wants to collect as many unique types of gems as possible but also wants to minimize the total cost. Each gem type is assigned a unique identifier, and each pack contains multiple gem types with a corresponding cost. You are given N types of gems, each identified by a unique integer from 1 to N, and M gem packs, each containing a subset of gem types and associated cost. Help Eva determine the maximum variety of gem types she can collect within a budget B. The first line of input contains three integers N, M, and B (1 ≤ N ≤ 100, 1 ≤ M ≤ 100, 1 ≤ B ≤ 1000) — the number of gem types, the number of gem packs, and the budget respectively. The next M lines describe the gem packs. Each gem pack is given in the following format: - an integer C (1 ≤ C ≤ B) representing the cost of the gem pack, followed by k integers representing the gem types contained in the pack (1 ≤ k ≤ N). Output a single integer, the maximum number of unique gem types Eva can collect within the given budget. For example, consider the following input: ``` 5 3 10 7 1 2 3 5 4 5 3 1 5 ``` The maximum number of unique gem types she can collect within a budget of 10 is 4, by picking the second and third gem packs.","solution":"def max_gem_variety(N, M, B, packs): This function returns the maximum number of unique gem types that can be collected within a given budget using a list of gem packs. Args: N: int - The number of gem types M: int - The number of gem packs B: int - The budget packs: list of tuples - Each tuple consists of a cost and a list of gem types Returns: int - Maximum number of unique gem types that can be collected within the budget # Initialize the dp list with sets. dp = [set() for _ in range(B + 1)] # Loop through each pack and update the dp list based on the cost for cost, gems in packs: # We update from the highest budget to the lowest budget to avoid reuse of the same pack for current_budget in range(B, cost - 1, -1): if dp[current_budget - cost] or current_budget == cost: if new_set := dp[current_budget - cost].union(gems): dp[current_budget] = max(dp[current_budget], new_set, key=len) return max(len(gem_set) for gem_set in dp) # Sample input N, M, B = 5, 3, 10 packs = [ (7, [1, 2, 3]), (5, [4, 5]), (3, [1, 5]) ] result = max_gem_variety(N, M, B, packs) print(result)"},{"question":"Yana is a real estate agent managing a series of buildings along a street. Each building has a certain value associated with it. Today, Yana is planning to showcase these buildings to potential buyers in a specific order which is recorded. She has a list of events that occur throughout the day which include showcasing a building and a buyer viewing a building. Each event is of the following types: - \\"+ v\\": Yana showcases a building with value v. - \\"-\\": A potential buyer views the building with the highest value currently showcased. Your task is to determine if the sequence of events is possible and to provide one possible order of showcasing the buildings if the sequence is consistent. If the sequence is not possible, output \\"NO\\". The first line of input contains an integer n (1 le n le 10^5) representing the number of buildings. The next 2n lines contain the events. It is guaranteed that there are exactly n events of the first type (showcasing buildings) and exactly n events of the second type (viewing buildings). If the sequence of events is consistent, print \\"YES\\" followed by n space-separated integers denoting the values of the buildings in the order they were showcased. If there are multiple possible solutions, print any one of them. If the sequence is inconsistent, print \\"NO\\". # Example Input ``` 5 + 3 + 1 - + 4 - + 5 - + 2 - - ``` Output ``` YES 3 1 4 5 2 ``` Explanation In the given example, the showcasing order [3, 1, 4, 5, 2] is one of the possible solutions that satisfies the given events: - Showcase 3 - Showcase 1 - View 3 (highest value currently) - Showcase 4 - View 4 (highest value currently) - Showcase 5 - View 5 (highest value currently) - Showcase 2 - View 2 (highest value currently) - View 1 (last remaining value) The sequence is consistent, so the output is \\"YES\\" followed by a possible order of showcasing.","solution":"def sequence_possible(n, events): showcased = [] viewed = [] view_idx = 0 for event in events: if event.startswith(\'+\'): _, v = event.split() showcased.append(int(v)) else: if not showcased: return \\"NO\\" max_value = max(showcased) viewed.append(max_value) showcased.remove(max_value) showcased_indices = [] for event in events: if event.startswith(\'+\'): _, v = event.split() showcased_indices.append(int(v)) if len(showcased_indices) == n: break return \\"YESn\\" + \' \'.join(map(str, showcased_indices))"},{"question":"Peter is a young computer scientist who loves playing with binary search trees (BST). A BST is a tree characterized by the following properties: - The left subtree of a node contains only nodes with keys less than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both the left and right subtrees must also be binary search trees. Peter is given a sequence of n integers that need to be inserted into an initially empty BST. After constructing the BST, Peter is curious to know the height of the tree. The height of a tree is the number of edges on the longest path from the root to a leaf. Write a program that calculates the height of the BST constructed from the given sequence of integers. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of nodes in the BST. The next line contains n space-separated integers representing the sequence of keys to be inserted into the BST. The values of the keys are distinct integers in the range [-10^9, 10^9]. Print a single integer — the height of the constructed BST. Example: Input 5 3 1 4 0 2 Output 3 Explanation: The sequence of inserting the keys results in the following BST: ``` 3 / 1 4 / 0 2 ``` The height of the tree is 3 because the longest path from the root to a leaf is 3 -> 1 -> 0, which consists of 3 edges.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BST: def __init__(self): self.root = None def insert(self, node, key): if node is None: return TreeNode(key) if key < node.val: node.left = self.insert(node.left, key) else: node.right = self.insert(node.right, key) return node def height(self, node): if node is None: return -1 left_height = self.height(node.left) right_height = self.height(node.right) return max(left_height, right_height) + 1 def calculate_bst_height(keys): bst = BST() for key in keys: bst.root = bst.insert(bst.root, key) return bst.height(bst.root) if __name__ == \\"__main__\\": n = int(input().strip()) keys = list(map(int, input().strip().split())) print(calculate_bst_height(keys))"},{"question":"You are given an array of integers representing the heights of buildings in a neighborhood. You need to build the tallest building possible by stacking up smaller buildings on top of each other. However, the rule is that you can only stack a building on top of another if the height of the new building is strictly less than the one below it. You can rearrange the buildings as needed. Determine the maximum height of the stacked building that can be achieved. You should implement a function to do this. Function Signature: ```python def max_stack_height(buildings: List[int]) -> int: ``` **Input** - The function takes a list of integers `buildings` representing the heights of the buildings. The length of the list is at most 1000, and each height is a positive integer less than or equal to 1000. **Output** - The function should return an integer representing the maximum height of the stacked building that can be achieved. **Example:** ```python assert max_stack_height([1, 2, 3, 4, 5]) == 5 assert max_stack_height([4, 8, 2, 3, 6, 1]) == 6 assert max_stack_height([5, 5, 5, 5]) == 5 assert max_stack_height([6, 5, 4, 3, 2, 1]) == 21 assert max_stack_height([3, 1, 4, 1, 5, 9, 2, 6]) == 20 ``` **Explanation:** 1. For the first example, the tallest building can be achieved by stacking all buildings in the order given, resulting in a height of 1 + 1 + 1 + 1 + 1 = 5. 2. For the second example, the optimal order might be [6, 3, 2, 1, 8, 4], resulting in a maximum height of 6. 3. The third example with [5, 5, 5, 5] will always give a height of 5. 4. For the fourth example, the given order is already optimal, giving a maximum height of 21. 5. In the fifth example, sorting the array in descending order and stacking from the top gives the maximum achievable height.","solution":"from typing import List def max_stack_height(buildings: List[int]) -> int: Function to determine the maximum height of the stacked building that can be achieved. Args: buildings (List[int]): List of integers representing the heights of the buildings. Returns: int: Maximum height of the stacked building. # Sort the buildings in ascending order buildings.sort() # Initialize the maximum height max_height = 0 # Compute the maximum height by summing up the sorted list for height in buildings: max_height += height return max_height"},{"question":"Alice is organizing a treasure hunt and she wants to place a treasure in one of the cells of an n x n grid. Each cell in the grid is uniquely identified by a pair of integers (i, j) where 1 ≤ i, j ≤ n. Alice decides to hide the treasure in the cell (x, y) and wants to make sure that finding the treasure is challenging for the participants. The challenge is to calculate the Manhattan distance between any given cell (a, b) and the treasure cell (x, y). The Manhattan distance between two cells (i1, j1) and (i2, j2) is defined as |i1 - i2| + |j1 - j2|, where |p| denotes the absolute value of p. Given the coordinates of the treasure cell and another cell in the grid, you are required to compute and print the Manhattan distance between these two cells. # Input - The first line contains a single integer n (1 ≤ n ≤ 10^4) — the size of the grid. - The second line contains two integers x and y (1 ≤ x, y ≤ n) — the coordinates of the treasure cell. - The third line contains two integers a and b (1 ≤ a, b ≤ n) — the coordinates of another cell in the grid. # Output - Print the Manhattan distance between the treasure cell (x, y) and the cell (a, b). # Example Input ``` 5 3 4 1 1 ``` Output ``` 5 ``` Explanation The Manhattan distance between the cells (3, 4) and (1, 1) is calculated as |3 - 1| + |4 - 1| = 2 + 3 = 5.","solution":"def manhattan_distance(n, x, y, a, b): Calculate the Manhattan distance between two cells (x, y) and (a, b) in an n x n grid. Parameters: n (int): The size of the grid. x (int): The row coordinate of the treasure cell. y (int): The column coordinate of the treasure cell. a (int): The row coordinate of another cell. b (int): The column coordinate of another cell. Returns: int: The Manhattan distance between the two cells (x, y) and (a, b). return abs(x - a) + abs(y - b)"},{"question":"Antara is participating in a grid-based game where she has to move from the top-left corner of a grid to the bottom-right corner in the least number of steps. However, the grid is filled with obstacles that she cannot pass through. The grid is defined as an m times n matrix where cells are either empty (represented by `0`) or have an obstacle (represented by `1`). Antara can move one step in four possible directions: up, down, left, or right. Your task is to find the minimum number of steps required for Antara to reach the bottom-right corner from the top-left corner. If it is impossible for Antara to reach the bottom-right corner, return -1. The first line of input contains two integers m and n (1 le m, n le 500) — the dimensions of the grid. Each of the next m lines contains n integers (either 0 or 1) representing the grid. Output the minimum number of steps required or -1 if it is not possible to reach the destination. # Example Input: ``` 3 3 0 0 0 1 1 0 0 0 0 ``` Output: ``` 4 ``` Explanation: The optimal path is: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) with a total of 4 steps.","solution":"from collections import deque def min_steps_to_reach_end(m, n, grid): Returns the minimum number of steps required to reach the bottom-right corner of the grid from the top-left corner. Returns -1 if it is not possible. if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (x, y, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == m - 1 and y == n - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are planning a road trip across a new city and want to find out the best route to visit all the tourist attractions with minimum travel cost. The city has a number of attractions connected by roads, and each road has a specific travel cost. Your task is to determine the minimum travel cost required to visit all the tourist attractions starting from any tourist attraction and returning to the start point after visiting all the others exactly once (i.e., finding the shortest possible tour that visits each attraction once and returns to the starting point). This is a standard Travelling Salesman Problem (TSP). The first line contains an integer n (2 ≤ n ≤ 15) — the number of tourist attractions. The next n lines contain n space-separated integers each representing the travel cost between attractions, where the j-th number in i-th row represents the cost to travel from attraction i to attraction j (0 ≤ travel cost ≤ 10^4). Output a single integer — the minimum travel cost required for the trip. Note that the travel cost between any two attractions i and j may not be the same as the travel cost from j to i, and the travel cost to travel from an attraction to itself is always 0. Example: Input: 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output: 80","solution":"from itertools import permutations def tsp(cost_matrix): Given a cost matrix, this function returns the minimum travel cost required to visit all tourist attractions starting and ending at any attraction. n = len(cost_matrix) attractions = list(range(n)) min_cost = float(\'inf\') for perm in permutations(attractions[1:]): current_cost = 0 current_perm = [0] + list(perm) + [0] for i in range(len(current_perm) - 1): current_cost += cost_matrix[current_perm[i]][current_perm[i+1]] if current_cost < min_cost: min_cost = current_cost return min_cost"},{"question":"You are given two strings, `s` and `t`, both consisting of lowercase English letters. Your task is to determine whether `t` can be obtained by deleting some (possibly zero) characters from `s` without changing the order of the remaining characters. In other words, check if `t` is a subsequence of `s`. Input: - The first line contains an integer `q` (1 le q le 1000) — the number of queries. - Each query consists of two lines: - The first line contains the string `s` (1 le |s| le 1000). - The second line contains the string `t` (1 le |t| le 1000). Output: - For each query, print \\"YES\\" if `t` is a subsequence of `s`, and \\"NO\\" otherwise. Example: Input: 3 abcde ace abc abc abcde aec Output: YES YES NO Explanation: 1. For the first query, `t = \\"ace\\"` and `s = \\"abcde\\"`. By deleting `b` and `d`, `t` can be obtained from `s`, so the answer is \\"YES\\". 2. For the second query, `t = \\"abc\\"` and `s = \\"abc\\"`. `t` is already equal to `s`, so the answer is \\"YES\\". 3. For the third query, `t = \\"aec\\"` and `s = \\"abcde\\"`. There\'s no way to obtain `t` from `s` while maintaining the order, so the answer is \\"NO\\".","solution":"def is_subsequence(s, t): Determine if t is a subsequence of s. t_index = 0 for char in s: if t_index < len(t) and char == t[t_index]: t_index += 1 if t_index == len(t): return \\"YES\\" return \\"NO\\" def process_queries(queries): results = [] for s, t in queries: results.append(is_subsequence(s, t)) return results"},{"question":"There is a city with n intersections and m two-way streets. Each street connects two intersections and has a given length. The city\'s road network is represented as a connected graph without cycles (a tree). Your goal is to determine the length of the longest path in this city. A path in this context means moving from one intersection to another without traversing any street more than once. The first line contains the integer n (2 ≤ n ≤ 10^5) — the number of intersections. Each of the next n-1 lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), where u and v are the intersections connected by a street of length w. Output a single integer representing the length of the longest path in the city. # Example Input: ``` 4 1 2 3 2 3 4 3 4 5 ``` Output: ``` 12 ``` # Note In the example, the longest path is from intersection 1 to intersection 4, passing through intersections 2 and 3 with a total length of 3 + 4 + 5 = 12.","solution":"from collections import defaultdict, deque def longest_path(n, edges): # Converting edge input to adjacency list graph representation graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def bfs(start_node): Performs BFS and returns the farthest node and its distance from start_node dist = [-1] * (n + 1) dist[start_node] = 0 q = deque([start_node]) farthest_node = start_node max_dist = 0 while q: node = q.popleft() for neighbor, weight in graph[node]: if dist[neighbor] == -1: dist[neighbor] = dist[node] + weight q.append(neighbor) if dist[neighbor] > max_dist: max_dist = dist[neighbor] farthest_node = neighbor return farthest_node, max_dist # Start from any arbitrary node, here we start from node 1 node_a, _ = bfs(1) # Then do another BFS from the farthest node found _, longest_path_length = bfs(node_a) return longest_path_length"},{"question":"You are a manager of a warehouse and dealing with the inventory of different products. Each product comes in batches. You need to ensure that the total stock of each product, after combining all batches, meets or exceeds the restocking requirement for the warehouse. Initially, you have the inventory of different products from the warehouse. Throughout the day, you receive more batches of these products. Your task is to calculate the total stock for each product at the end of the day and determine if the warehouse’s requirement for each product has been met. For each product, you are given the initial stock, the required stock, and a list of batches received during the day. To accomplish this task, follow these steps: 1. For each product, add up the stocks from all the received batches to the initial stock. 2. Compare the total stock against the required stock. 3. Report whether the total stock meets or exceeds the required stock. The first line contains an integer p (1 le p le 1000) – the number of different products. Each of the next p lines contains a description for one product. Each description consists of: - an integer s_i (0 le s_i le 10^6) representing the initial stock of the product, - an integer r_i (0 le r_i le 10^6) representing the required stock for the product, - an integer b_i (0 le b_i le 100) representing the number of batches received for the product, - followed by b_i integers a_{i1}, a_{i2}, ldots, a_{ib_i} (0 le a_{ij} le 10^6 for all 1 le j le b_i), where each integer denotes the amount of stock in one batch received for the product. For each product, output \\"YES\\" if the total stock meets or exceeds the required stock, and \\"NO\\" otherwise. # Example **Input:** ``` 2 10 20 2 5 8 5 3 1 4 ``` **Output:** ``` YES YES ``` # Explanation: For the first product: - Initial stock: 10 - Required stock: 20 - Batches: [5, 8] - Total stock: 10 + 5 + 8 = 23 (which is greater than 20) - Output: YES For the second product: - Initial stock: 5 - Required stock: 3 - Batches: [4] - Total stock: 5 + 4 = 9 (which is greater than 3) - Output: YES","solution":"def check_stock_requirements(num_products, products_info): results = [] for product in products_info: initial_stock = product[0] required_stock = product[1] batches = product[3:] total_stock = initial_stock + sum(batches) if total_stock >= required_stock: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: num_products = 2 products_info = [ [10, 20, 2, 5, 8], [5, 3, 1, 4] ] print(check_stock_requirements(num_products, products_info)) # [\'YES\', \'YES\']"},{"question":"Eric the Engineer is designing a robust railway network that connects several cities. Each city must be connected to at least one other city, but Eric wants to ensure that the network can still function even if a single connection goes down. Therefore, each city except those at the extremities (endpoints) should be connected to at least two other cities. Eric\'s goal is to minimize the number of cities in the network while still ensuring that each city has a route to every other city through one or more direct or indirect connections. Given the number of cities `n` and a list of `m` connections defined by pairs of integers `(a, b)` where `1 ≤ a, b ≤ n` representing a direct railway line between cities a and b, determine the maximum number of cities that need to be directly connected to exactly two other cities. The first line of input contains two integers `n` and `m`, where `2 ≤ n ≤ 1000` representing the total number of cities and `1 ≤ m ≤ 10000` representing the total number of connections. Each of the next `m` lines contains two integers `a` and `b` indicating a direct connection between city `a` and city `b`. Output a single integer representing the maximum number of cities that need to be connected to exactly two other cities. # Example: **Input:** ``` 5 4 1 2 2 3 3 4 4 5 ``` **Output:** ``` 3 ``` In this example, cities 2, 3, and 4 need to be directly connected to exactly two other cities to ensure robustness in the railway network.","solution":"def find_cities_with_two_connections(n, m, connections): from collections import defaultdict # Creating a dictionary to store the degree of each city degree = defaultdict(int) # Iterating over each connection to calculate the degree of each city for a, b in connections: degree[a] += 1 degree[b] += 1 # Initialize counter for cities with exactly two connections count = 0 # Iterate through the dictionary to count cities with exactly two connections for city in degree: if degree[city] == 2: count += 1 return count # Example usage n, m = 5, 4 connections = [(1, 2), (2, 3), (3, 4), (4, 5)] print(find_cities_with_two_connections(n, m, connections)) # Output should be 3"},{"question":"Alice and Bob are playing a game with strings. They have two strings, `s1` and `s2`, each consisting of lowercase English letters. The game involves finding the longest common subsequence (LCS) of `s1` and `s2` — a sequence that appears in both strings in the same order but not necessarily contiguously. Alice proposes that instead of just finding the LCS, they will merge the LCS into a new string and output its lexicographically smallest permutation. Write a function that takes two strings `s1` and `s2` and returns the lexicographically smallest permutation of their longest common subsequence. # Input Format - The first line contains the string `s1` (1 ≤ |s1| ≤ 100). - The second line contains the string `s2` (1 ≤ |s2| ≤ 100). # Output Format Return the lexicographically smallest permutation of the longest common subsequence of `s1` and `s2`. # Example Example 1 # Input: ``` abcbdab bdcaba ``` # Output: ``` abb ``` The longest common subsequence is `bba` and `abb`. The lexicographically smallest permutation is `abb`. Example 2 # Input: ``` XMJYAUZ MZJAWXU ``` # Output: ``` AJU ``` The longest common subsequence is `MJAU` or `MJUA`. The lexicographically smallest permutation is `AJU`. # Note Remember that the longest common subsequence may not be unique. Your goal is to find the lexicographically smallest permutation among all possible LCS for the given strings.","solution":"def lcs(s1, s2): Returns the longest common subsequence of s1 and s2. m = len(s1) n = len(s2) # Create a 2D array to store the lengths of longest common subsequence dp = [[0] * (n+1) for _ in range(m+1)] # Fill dp array for i in range(m): for j in range(n): if s1[i] == s2[j]: dp[i+1][j+1] = dp[i][j] + 1 else: dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1]) # Backtrack to find the actual LCS lcs_str = [] i, j = m, n while i > 0 and j > 0: if s1[i-1] == s2[j-1]: lcs_str.append(s1[i-1]) i -= 1 j -= 1 elif dp[i-1][j] > dp[i][j-1]: i -= 1 else: j -= 1 # The LCS is built backwards, so reverse it lcs_str.reverse() return \'\'.join(lcs_str) def lexicographically_smallest_permutation(lcs_str): Returns the lexicographically smallest permutation of the string lcs_str. return \'\'.join(sorted(lcs_str)) def smallest_lcs_permutation(s1, s2): Finds the longest common subsequences of s1 and s2, and returns the lexicographically smallest permutation of it. lcs_str = lcs(s1, s2) return lexicographically_smallest_permutation(lcs_str)"},{"question":"Using a set of n bricks, you are to construct a staircase structure. The staircase consists of k steps where the i-th step has exactly i bricks. The task is to determine the maximum possible number of steps k. The first line provides a single integer n (1 ≤ n ≤ 10^9) representing the total number of bricks available. Print a single integer k — the maximum number of steps in the staircase that can be built. Example: Input: 10 Output: 4 Explanation: With 10 bricks, you can form a staircase with 4 steps in the following way: - 1st step: 1 brick - 2nd step: 2 bricks - 3rd step: 3 bricks - 4th step: 4 bricks Therefore, the maximum number of steps k is 4 since the sum 1+2+3+4 equals 10, which uses all the bricks.","solution":"def max_steps(n): Determine the maximum number of steps k that can be built using n bricks. k = 0 total = 0 while total + (k + 1) <= n: k += 1 total += k return k"},{"question":"Alice recently discovered an interest in number sequences and wants to explore them further. She has found a sequence known as the \\"Triangular Number Sequence.\\" The n-th triangular number is the number of dots composing an equilateral triangle. The formula to find the n-th triangular number is given by: [ T_{n} = frac{n * (n + 1)}{2} ] Alice wants to write a program that calculates the n-th triangular number. The input consists of a single integer n (1 ≤ n ≤ 10000), representing the position in the triangular number sequence. Output the n-th triangular number. Example: Input: 5 Output: 15 Explanation: The first five triangular numbers are 1, 3, 6, 10, and 15. Therefore, the 5-th triangular number is 15.","solution":"def triangular_number(n): Returns the n-th triangular number. Parameters: n (int): Position in the triangular number sequence (1 ≤ n ≤ 10000) Returns: int: The n-th triangular number return n * (n + 1) // 2"},{"question":"You have a box that can contain several types of balls. Each type of ball has a certain weight and is available in an unlimited amount. You are given an integer W which represents the maximum weight capacity of the box, and a list containing the weights of the different types of balls. Your task is to determine if it is possible to fill the box to exactly the weight W using any combination of these balls. Given the weights of the balls, find out if it\'s possible to fill the box such that the total weight of the balls is exactly W. Write a function `can_fill(W, ball_weights)` that takes in an integer W and a list of integers `ball_weights`, and returns a boolean value indicating whether it is possible to fill the box to exactly the weight W using any combination of the available balls. # Input 1. An integer W (1 ≤ W ≤ 10000) - the maximum weight capacity of the box. 2. A list of integers ball_weights (1 ≤ ball_weights[i] ≤ 1000) (1 ≤ length of ball_weights ≤ 100) - the weights of the available types of balls. # Output Return `True` if it\'s possible to fill the box to the weight W, otherwise return `False`. # Example ```python print(can_fill(9, [2, 3, 7])) # Output: True print(can_fill(5, [2, 4, 6])) # Output: False print(can_fill(10, [1, 5, 6])) # Output: True ```","solution":"def can_fill(W, ball_weights): Determines if it is possible to fill the box to exactly the weight W using any combination of the available ball weights. :param W: Maximum weight capacity of the box :param ball_weights: List of weights of the available types of balls :return: Boolean value indicating whether it is possible to fill the box to exactly W dp = [False] * (W + 1) dp[0] = True for weight in ball_weights: for i in range(weight, W + 1): dp[i] = dp[i] or dp[i - weight] return dp[W]"},{"question":"You are given an array of integers of length n, representing the number of minutes needed per day for each game Kaito plays. Kaito wants to maximize his playing time over a series of non-overlapping game sessions. However, he can only play games provided he observes two strict rules: 1. He can only begin playing games on a new session from the start or the end of the array. 2. During each game session, if he starts from an element, he must continue picking the next element in the direction he started without skipping any games until he stops. Given this information, determine the maximum number of game minutes Kaito can play in a single game session. The first line of input contains an integer n (1 ≤ n ≤ 100,000), which is the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000), representing the number of minutes for each game. Output a single integer, the maximum number of game minutes Kaito can play in the optimal session. # Example Input: ``` 5 1 2 3 4 5 ``` Output: ``` 15 ``` Explanation: Kaito can start from the beginning and play all 5 games (1 + 2 + 3 + 4 + 5 = 15). Input: ``` 6 3 1 4 1 5 9 ``` Output: ``` 23 ``` Explanation: Kaito can start from the end and play all 6 games (9 + 5 + 1 + 4 + 1 + 3 = 23).","solution":"def max_game_minutes(n, games): Returns the maximum number of game minutes Kaito can play in a single game session. He can start from the beginning or the end of the array. if n == 1: return games[0] max_from_start = sum(games) max_from_end = sum(games[::-1]) return max(max_from_start, max_from_end)"},{"question":"In a universe far away, there exists a matrix-themed competition! You, an enthusiastic contestant, have been tasked with a challenge involving matrices. Given an n x n matrix, your goal is to determine if the product of the diagonals is equal. Specifically, calculate the product of the elements on the main diagonal and compare it with the product of the elements on the anti-diagonal. The main diagonal of a matrix consists of elements a[i][i] for all i from 1 to n, and the anti-diagonal consists of elements a[i][n-i+1] for all i from 1 to n. If the products are equal, output \\"YES\\". Otherwise, output \\"NO\\". Input format: The first line contains a single integer n (1 ≤ n ≤ 1000), the size of the square matrix. Each of the next n lines contains n integers, where the j-th integer in the i-th line is a[i][j] (-100 ≤ a[i][j] ≤ 100). Output format: Print \\"YES\\" if the product of the elements on the main diagonal is equal to the product of the elements on the anti-diagonal. Otherwise, print \\"NO\\". Example: Input: 3 2 0 3 4 5 6 7 8 9 Output: NO Explanation: Main diagonal elements = 2, 5, 9 Anti-diagonal elements = 3, 5, 7 Product of main diagonal = 2 * 5 * 9 = 90 Product of anti-diagonal = 3 * 5 * 7 = 105 Since 90 is not equal to 105, the output is \\"NO\\".","solution":"def compare_diagonal_products(matrix): Compare the product of the main diagonal and the anti-diagonal of a matrix. Args: matrix (List[List[int]]): A square matrix of integers Returns: str: \\"YES\\" if the product of the main diagonal is equal to the product of the anti-diagonal, otherwise \\"NO\\". n = len(matrix) main_diagonal_product = 1 anti_diagonal_product = 1 for i in range(n): main_diagonal_product *= matrix[i][i] anti_diagonal_product *= matrix[i][n - i - 1] if main_diagonal_product == anti_diagonal_product: return \\"YES\\" else: return \\"NO\\" # Function to handle the input and output def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) matrix = [] index = 1 for i in range(n): row = [int(data[index + j]) for j in range(n)] matrix.append(row) index += n result = compare_diagonal_products(matrix) print(result)"},{"question":"Given two strings s1 and s2, you are to determine if s2 is a scrambled string of s1. To scramble a string, you can use the following operations any number of times: 1. Split the string into two non-empty substrings. 2. Swap the two substrings. 3. Recursively scramble each of the two substrings. For example, with the string \\"great\\": - You can split it into \\"gr\\" and \\"eat\\", and then swap them to get \\"eatgr\\". - By further scrambling the substrings, you might also get \\"rgeat\\", \\"rgtae\\", etc. Your task is to determine if s2 is a scrambled string of s1. Input: - A single integer n (1 ≤ n ≤ 30) representing the length of the strings. - A string s1 of length n, consisting of lowercase English letters. - A string s2 of length n, consisting of lowercase English letters. Output: - Print \\"YES\\" if s2 is a scrambled string of s1, otherwise print \\"NO\\". Examples: Input: 4 abcd bdac Output: NO Input: 5 great rgeat Output: YES Explanation: In the first example, there is no way to rearrange or swap substrings of \\"abcd\\" to become \\"bdac\\". In the second example, one possible way to achieve \\"rgeat\\" from \\"great\\" is: \\"great\\" -> \\"gr eat\\" -> \\"eat gr\\" -> \\"rgeat\\".","solution":"def is_scramble(s1, s2): Determines if s2 is a scrambled string of s1. if len(s1) != len(s2): return \\"NO\\" if s1 == s2: return \\"YES\\" if sorted(s1) != sorted(s2): return \\"NO\\" n = len(s1) for i in range(1, n): if (is_scramble(s1[:i], s2[:i]) == \\"YES\\" and is_scramble(s1[i:], s2[i:]) == \\"YES\\") or (is_scramble(s1[:i], s2[-i:]) == \\"YES\\" and is_scramble(s1[i:], s2[:-i]) == \\"YES\\"): return \\"YES\\" return \\"NO\\""},{"question":"We have an array of n positive integers. Your task is to partition the array into two non-empty subarrays such that the sum of the elements in the first subarray is greater than the sum of the elements in the second subarray. If there are multiple ways to partition the array, print the one that minimizes the difference between the sums of the two subarrays. Print the indices of the elements that belong to the first subarray. The first input line contains a single integer n — the length of the array (2 ≤ n ≤ 10^5). The second input line contains n integers, separated by single spaces a1, a2, ..., an (1 ≤ ai ≤ 10^9). In the first line print a single integer m — the number of elements in the first subarray. In the second line print m space-separated integers — the indices (1-based) of the elements that belong to the first subarray. If there are multiple valid solutions, print any of them. It is guaranteed that a solution always exists. Example: Input: 5 13 7 12 8 10 Output: 3 1 2 4 Explanation: One possible solution is to take elements a1, a2, and a4 (13, 7, and 8 respectively) into the first subarray, making the sum 28, which is greater than the sum of the remaining elements a3 and a5 (12 and 10 respectively), making the sum 22. Another possibility is to take different subarrays that balance the multiple valid solutions constraint.","solution":"def partition_array(arr): total_sum = sum(arr) half_sum = total_sum / 2 current_sum = 0 indices = [] for i, value in enumerate(arr): current_sum += value indices.append(i + 1) # Convert to 1-based index if current_sum > total_sum - current_sum: break return len(indices), indices"},{"question":"Iahub likes playing with strings and puzzles. He came up with an interesting problem for you. You are given a string s of length n consisting of lowercase English letters. Iahub wants to rearrange the letters of the string in such a way that there are no two adjacent characters that are the same. If such a rearrangement is possible, print any one of the possible solutions. Otherwise, print -1. The first line contains a single integer n (1 le n le 10^5), the length of the string. The second line contains the string s. If it is possible to rearrange the letters of the string such that no two adjacent characters are the same, print one such rearranged string. If it is not possible, print -1. **Examples:** **Input:** ``` 3 aab ``` **Output:** ``` aba ``` **Input:** ``` 2 aa ``` **Output:** ``` -1 ```","solution":"from collections import Counter import heapq def rearrange_string(s): n = len(s) freq_counter = Counter(s) # max heap by frequency max_heap = [(-freq, char) for char, freq in freq_counter.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] while max_heap or prev_freq < 0: if not max_heap and prev_freq < 0: return -1 # not possible to rearrange if max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: # push the previous character back to heap if it still has remaining count heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 # maintain the count of previous character return \'\'.join(result) def iahub_string_rearrangement(n, s): rearranged = rearrange_string(s) return rearranged"},{"question":"You are given an integer array `arr` of length `n` (1 ≤ n ≤ 10^5), and an integer `k` (1 ≤ k ≤ 10^18). Your task is to find the sum of the largest `k` distinct elements in the array. If there are not enough distinct elements to sum `k` of them, return -1. The input format is as follows: - The first line contains the integer `n`, the length of the array. - The second line contains `n` space-separated integers representing the elements of the array. - The third line contains the integer `k`. The output format is a single integer, the sum of the largest `k` distinct elements in the array, or -1 if there aren\'t enough distinct elements. # Example **Input** ``` 5 3 1 4 1 5 3 ``` **Output** ``` 12 ``` **Explanation** In the given example, the distinct elements are `{1, 3, 4, 5}`, and the sum of the largest 3 distinct elements is `5 + 4 + 3 = 12`. # Constraints - 1 ≤ n ≤ 10^5 - 1 ≤ k ≤ 10^18 - -10^9 ≤ arr[i] ≤ 10^9","solution":"def sum_largest_k_distinct(arr, k): Returns the sum of the largest k distinct elements in the array. If there are not enough distinct elements to sum k of them, returns -1. distinct_elements = sorted(list(set(arr)), reverse=True) if len(distinct_elements) < k: return -1 return sum(distinct_elements[:k])"},{"question":"A research team is working on a new algorithm for text compression. They have discovered a novel way to compress strings based on repeating patterns. Given a string, they define its compressed form by replacing each consecutive sequence of the same character with that character followed by the number of occurrences. For example, the string \\"aaabb\\" would be compressed to \\"a3b2\\". However, their algorithm can only handle a specific type of input: a string containing only uppercase letters (\'A\'-\'Z\') and digits (\'0\'-\'9\'). Your task is to implement this compression algorithm. Write a function `compress_string(s: str) -> str` that takes a string `s` as input and returns its compressed form. The function should only compress the string if the compressed form is shorter than the original string; otherwise, it should return the original string unchanged. The first line contains a single string `s` (1 leq |s| leq 10^5) consisting of only uppercase letters and digits. Output the compressed form of the given string if it is shorter than the original string; otherwise, output the original string. In the first example, the original string \\"AABCDDE\\" is compressed to \\"A2B1C1D2E1\\", which is longer than the original, hence the output is \\"AABCDDE\\". In the second example, the original string \\"AAAAAAAAAABBBBB\\" is compressed to \\"A10B5\\", which is shorter than the original, hence the output is \\"A10B5\\". In the third example, the original string \\"0122333344\\" is compressed to \\"013234\\", which is not shorter than the original, hence the output is \\"0122333344\\".","solution":"def compress_string(s: str) -> str: Compresses the given string by replacing consecutive sequences of the same character with that character followed by the number of occurrences. If the compressed string is not shorter than the original string, the function returns the original string. compressed = [] i = 0 n = len(s) while i < n: count = 1 while i + 1 < n and s[i] == s[i + 1]: i += 1 count += 1 compressed.append(s[i]) compressed.append(str(count)) i += 1 compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < n else s"},{"question":"You have a rectangular matrix n times m of positive integers. Let\'s define a \\"peak\\" as an element of the matrix that is strictly greater than all of its neighbors. An element is considered a neighbor if it is adjacent either vertically or horizontally. Your task is to find the number of peaks in the matrix. The first line of the input contains two integers n and m (1 le n, m le 1000) — the dimensions of the matrix. Each of the next n lines contains m integers — the elements of the matrix a_{ij} (1 le a_{ij} le 10^9). In the first line output the number of peaks in the matrix. A peak is defined as an element a_{ij} which is strictly greater than all of its adjacent elements (up, down, left, and right). Elements on the border of the matrix have fewer neighbors but must still be strictly greater than all of their neighbors to be considered a peak. # Examples Example 1: Input: ``` 3 3 1 2 1 4 5 4 1 2 1 ``` Output: ``` 1 ``` Explanation: The only peak is the element \\"5\\" at position (2, 2). Example 2: Input: ``` 3 4 10 20 15 10 12 11 14 13 16 17 18 19 ``` Output: ``` 1 ``` Explanation: The peak is the element \\"19\\" at position (3, 4). # Notes If there are multiple peaks, all of them should be counted and included in the output.","solution":"def count_peaks(matrix, n, m): Counts the number of peaks in an n x m matrix. A peak is an element that is greater than all of its vertically and horizontally adjacent neighbors. :param matrix: List of list containing the matrix elements :param n: Number of rows in the matrix :param m: Number of columns in the matrix :return: The number of peaks in the matrix peaks_count = 0 for i in range(n): for j in range(m): is_peak = True # Check above if i > 0 and matrix[i][j] <= matrix[i-1][j]: is_peak = False # Check below if i < n-1 and matrix[i][j] <= matrix[i+1][j]: is_peak = False # Check left if j > 0 and matrix[i][j] <= matrix[i][j-1]: is_peak = False # Check right if j < m-1 and matrix[i][j] <= matrix[i][j+1]: is_peak = False if is_peak: peaks_count += 1 return peaks_count # Read input if __name__ == \\"__main__\\": n, m = map(int, input().strip().split()) matrix = [] for _ in range(n): row = list(map(int, input().strip().split())) matrix.append(row) print(count_peaks(matrix, n, m))"},{"question":"Mashmokh is participating in a card game where he can utilize several strategy levels to maximize his score. In this game, there are `n` cards lying in a row, and each card has a certain number of points associated with it. He can decide to take or leave each card according to specific rules to score the maximum points. The rules are as follows: - If Mashmokh picks a card from position `i`, he can also pick any card from positions `i-2` or earlier positions (but cannot pick the card from position `i-1`). - He wants to maximize his total score from the cards he picks. Help Mashmokh determine the maximum possible score he can obtain by picking cards according to the rules mentioned. # Input The first line contains a single integer `n` (1 ≤ n ≤ 2 * 10^5) — the number of cards. The second line contains `n` space-separated integers `p1, p2, ..., pn` (1 ≤ pi ≤ 10^9) — the points of each card. # Output Print a single integer — the maximum score Mashmokh can achieve following the game\'s rules. # Example Input ``` 6 4 2 10 1 5 6 ``` Output ``` 20 ``` # Explanation - Mashmokh can pick cards from positions 1, 3, and 5 to maximize his score: 4 + 10 + 6 = 20. # Note The example shows a sequence of cards where picking the cards at indices 1, 3, and 5 yields the highest total points. There might be other sequences as well, but the goal is to implement the algorithm that finds the maximum possible score.","solution":"def max_score(n, points): if n == 1: return points[0] dp = [0] * n dp[0] = points[0] if n > 1: dp[1] = max(points[0], points[1]) for i in range(2, n): dp[i] = max(dp[i-1], points[i] + dp[i-2]) return dp[n-1]"},{"question":"You are given a directed acyclic graph (DAG) with `n` nodes and `m` edges. Each node has a value associated with it, and your task is to propagate values from nodes to their direct successors. The propagation rule requires that each direct successor node\'s value must be equal to the sum of the values of its predecessors. Given the initial values of all nodes, determine the final value of each node after the propagation. # Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 100, 0 ≤ m ≤ 10,000), the number of nodes and the number of edges, respectively. The second line contains `n` integers `v_1, v_2, ..., v_n` (0 ≤ v_i ≤ 1,000), the initial values of the nodes. The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n), indicating a directed edge from node `u` to node `v`. # Output Print `n` integers, representing the final values of each node after the propagation. # Example Input ``` 5 4 1 2 0 0 0 1 3 2 3 3 4 4 5 ``` Output ``` 1 2 3 3 3 ``` # Explanation - Nodes 1 and 2 have values 1 and 2 respectively. - Node 3 gets value from nodes 1 and 2, thus 1+2 = 3. - Node 4 gets value from node 3, thus 3. - Node 5 gets value from node 4, thus 3. Note: 1. The graph is guaranteed to be a DAG. 2. The propagation rule ensures that after updating all nodes, every node\'s final value will be the sum of its predecessors\' final values, possibly including itself if it has no predecessors.","solution":"def propagate_values(n, m, initial_values, edges): from collections import defaultdict, deque adjacency_list = defaultdict(list) in_degree = [0] * n values = list(initial_values) for u, v in edges: adjacency_list[u-1].append(v-1) in_degree[v-1] += 1 queue = deque([i for i in range(n) if in_degree[i] == 0]) while queue: node = queue.popleft() for neighbor in adjacency_list[node]: values[neighbor] += values[node] in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return values"},{"question":"Eve is playing a game where she has to catch Alice by matching a sequence of alphabets Alice encoded. Alice presents Eve with two sequences of alphabets, `S1` and `S2`, both of length `N`. Alice has created these sequences such that each position in `S1` can potentially be rearranged by `K` positions either to the left or to the right to match with `S2`. Eve wants to determine if it\'s possible to rearrange `S1` by moving each character at most `K` positions to match `S2` exactly. Given the sequences `S1` and `S2`, and the integer `K`, determine if the sequences can be matched under the given conditions. # Input - The first line contains a single integer `N` (1 ≤ N ≤ 10^6), the length of the sequences. - The second line contains a string `S1` of `N` lowercase English letters. - The third line contains a string `S2` of `N` lowercase English letters. - The fourth line contains a single integer `K` (0 ≤ K ≤ N). # Output - Output \\"YES\\" if `S1` can be rearranged to match `S2` by moving each character at most `K` positions either to the left or to the right. Otherwise, output \\"NO\\". # Example Input ``` 5 abcde deaeb 1 ``` Output ``` NO ``` Input ``` 7 abcdefg bacedfg 2 ``` Output ``` YES ``` # Explanation In the first example, it\'s impossible to match `S1` to `S2` by moving each character at most 1 position as `a` needs to be moved 4 positions or `e` needs to be moved 4 positions. In the second example, each character in `S1` can be moved within a range of `2` positions to rearrange into `S2`. Write a function to determine if it\'s possible.","solution":"def can_rearrange(N, S1, S2, K): Determine if S1 can be rearranged to match S2 by moving each character at most K positions to the left or right. Parameters: N (int): Length of the sequences S1 (str): The first sequence S2 (str): The second sequence K (int): The maximum number of positions each character can be moved Returns: str: \\"YES\\" if S1 can be rearranged to match S2, otherwise \\"NO\\" if K == 0: return \\"YES\\" if S1 == S2 else \\"NO\\" for i in range(N): # Check if a character at position i in S2 can be found in the range of positions [i-K, i+K] in S1. matched = False for j in range(max(0, i - K), min(N, i + K + 1)): if S1[j] == S2[i]: S1 = S1[:j] + \'-\' + S1[j + 1:] # Mark the character as used matched = True break if not matched: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of integers representing the energy levels of soldiers in an army division. The goal is to form a squad of soldiers such that the squad’s total energy sum is maximized. However, there are specific conditions for the squad formation: - You cannot include directly adjacent soldiers from the list in the squad. - Each soldier can be either included in the squad or not included. Find the maximum possible total energy sum of the squad under the given conditions. Input Format: - The first line contains a single integer n (1 leq n leq 10^5), the number of soldiers. - The second line contains n integers E_1, E_2, ..., E_n (1 leq E_i leq 10^9), the energy levels of the soldiers. Output Format: - Print one integer, the maximum energy sum of the squad under the given conditions. Example: Input: 6 3 2 5 10 7 1 Output: 15 Explanation: One possible squad configuration to get the maximum energy sum is by including soldiers with energy levels 3, 10, and 2, resulting in a total sum of 15. Forming the squad with these conditions avoids directly adjacent soldiers.","solution":"def max_energy_sum(n, energies): if n == 0: return 0 elif n == 1: return energies[0] include = energies[0] exclude = 0 for i in range(1, n): new_exclude = max(include, exclude) include = exclude + energies[i] exclude = new_exclude return max(include, exclude)"},{"question":"Suzy has a garden with a number of different kinds of flowers. She recently read that she could calculate the most beautiful arrangement of her flowers by determining the longest palindromic subsequence in a string representation of her garden. The garden is represented as a string s of lowercase Latin letters where each character represents a different type of flower in order from left to right. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. A palindrome is a sequence that reads the same forward and backward. For example, in the string \\"flower\\", \\"wow\\" is a subsequence but not a palindrome, while \\"o\\" and \\"erre\\" are palindromic subsequences. The longest palindromic subsequence in \\"flower\\" is \\"erre\\". Given a string s, help Suzy determine the length of the longest palindromic subsequence. The first line contains the integer t (1 le t le 100) — the number of test cases. Next t lines contain the description of the test cases: each line contains a string s (1 le |s| le 1000) representing the garden. The strings are composed of lowercase Latin letters only. Output t answers — one for each test case, representing the length of the longest palindromic subsequence in the corresponding string. For the first test case, the longest palindromic subsequence is \\"aaa\\", thus the answer is 3. For the second test case, the longest palindromic subsequence is \\"aba\\", thus the answer is 3.","solution":"def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def solve(input_data): lines = input_data.split(\'n\') t = int(lines[0]) results = [] for i in range(1, t + 1): s = lines[i] results.append(longest_palindromic_subsequence(s)) return results"},{"question":"You are given a grid with `n` rows and `m` columns. Each cell of the grid contains an integer, representing the height of that cell. You want to choose exactly one cell to be the starting cell and exactly one cell to be the ending cell. You then want to move from the starting cell to the ending cell, using a series of moves. In each move, you can go from one cell to another adjacent cell if the height difference between the two cells is exactly 1. The adjacent cells can be horizontally or vertically connected. Your task is to determine whether it is possible to move from the starting cell to the ending cell under these constraints. If it is possible, print \\"YES\\" and the number of moves required to go from the starting cell to the ending cell. If it is not possible, print \\"NO\\". The first line of the input contains two integers, `n` and `m` (`1 ≤ n, m ≤ 500`) — the number of rows and columns in the grid. Each of the next `n` lines contains `m` integers, representing the heights of the cells in the grid. The following line contains two integers, `sx` and `sy` (`1 ≤ sx ≤ n`, `1 ≤ sy ≤ m`) — the coordinates of the starting cell (1-based indexing). The following line contains two integers, `ex` and `ey` (`1 ≤ ex ≤ n`, `1 ≤ ey ≤ m`) — the coordinates of the ending cell (1-based indexing). Print \\"NO\\" if it is not possible to move from the starting cell to the ending cell. Otherwise, print \\"YES\\" and the minimum number of moves required. **Example:** Input: ``` 4 4 1 2 3 4 2 3 4 5 3 4 5 6 4 5 6 7 1 1 4 4 ``` Output: ``` YES 6 ``` In this example, the path from the starting cell (1,1) to the ending cell (4,4) is possible and requires exactly 6 moves.","solution":"from collections import deque def is_reachable_and_count_moves(n, m, grid, start, end): def neighbors(r, c): for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and abs(grid[nr][nc] - grid[r][c]) == 1: yield nr, nc sx, sy = start ex, ey = end sx -= 1 sy -= 1 ex -= 1 ey -= 1 if sx == ex and sy == ey: return \\"YES\\", 0 queue = deque([(sx, sy, 0)]) visited = set([(sx, sy)]) while queue: x, y, dist = queue.popleft() for nx, ny in neighbors(x, y): if (nx, ny) not in visited: if nx == ex and ny == ey: return \\"YES\\", dist + 1 queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return \\"NO\\", # Example usage: n = 4 m = 4 grid = [ [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7] ] start = (1, 1) end = (4, 4) print(is_reachable_and_count_moves(n, m, grid, start, end))"},{"question":"Given an array of integers representing stock prices during consecutive days, you need to calculate the maximum profit you can achieve by buying and selling the stock once and exactly once. You have to buy before you sell, and you cannot engage in multiple transactions. Write a function that takes an array of integers and returns a single integer representing the maximum profit. If no profit is possible, return 0. Example: ``` Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. ``` Example: ``` Input: [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transactions are done and the max profit = 0. ``` Function signature: ```python def max_profit(prices: List[int]) -> int: pass ``` Constraints: - The length of the array will be in the range [1, 10^5]. - Each element of the array will be a non-negative integer within the range [0, 10^5].","solution":"from typing import List def max_profit(prices: List[int]) -> int: Returns the maximum profit that can be achieved from a single buy and sell operation. If no profit is possible, returns 0. if not prices or len(prices) <= 1: return 0 max_profit = 0 min_price = prices[0] for price in prices[1:]: min_price = min(min_price, price) potential_profit = price - min_price max_profit = max(max_profit, potential_profit) return max_profit"},{"question":"The Ministry of Communication of a remote island has decided to conduct an experiment on optimizing the distribution of messages through their satellite communication system. The island\'s communication network consists of several satellite stations that are connected in a specific manner. Each satellite station is represented by a node, and a connection between two stations is represented by a weighted edge. The weight of an edge signifies the time it takes to transmit a message between the two connected stations. The network forms a tree structure, meaning there is exactly one path between any two stations. The Ministry wants to determine how efficiently messages can be distributed from a central station to all other stations in the network. The central station is referred to as station 1. They need to compute the total transmission time for sending a message from station 1 to each other station in the network. Given the network\'s tree structure and the transmission times between stations, your task is to calculate the total transmission time from station 1 to every other station. Input: - The first line contains an integer n (2 le n le 10^5) — the number of satellite stations. - The next n - 1 lines describe the connections. Each line contains three integers u, v, and w (1 le u, v le n, 1 le w le 10^9) — signifying there is an edge between node u and node v with a weight of w. Output: - Print a single integer — the total transmission time to send a message from station 1 to all other stations. Example: Input: 5 1 2 4 1 3 2 2 4 1 2 5 3 Output: 13 In this example, the path and respective times are: - 1 to 2: 4 - 1 to 3: 2 - 1 to 4: 4 (1 to 2) + 1 (2 to 4) = 5 - 1 to 5: 4 (1 to 2) + 3 (2 to 5) = 7 Total transmission time = 4 + 2 + 5 + 7 = 18","solution":"def total_transmission_time(n, edges): from collections import defaultdict, deque # Construct adjacency list for representing the tree tree = defaultdict(list) for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) # BFS or DFS to calculate the total transmission time from node 1 total_time = 0 visited = [False] * (n + 1) queue = deque([(1, 0)]) # (current node, cumulative time to reach this node) while queue: node, time = queue.popleft() if visited[node]: continue visited[node] = True total_time += time for neighbor, weight in tree[node]: if not visited[neighbor]: queue.append((neighbor, time + weight)) return total_time # Example usage: # n = 5 # edges = [(1, 2, 4), (1, 3, 2), (2, 4, 1), (2, 5, 3)] # print(total_transmission_time(n, edges)) # Output should be 18"},{"question":"Alex is organizing a hackathon and he wants to provide each participant with a unique identification code. Each code must be formed by concatenating a series of consecutive digits in non-decreasing order. For example, \\"123\\", \\"111223\\", or \\"6789\\" are valid codes, while \\"321\\", \\"2143\\", and \\"9870\\" are not. Given a list of integers representing the series of digits each participant has chosen, determine if the identification code for each participant is valid. Input: - The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. - The description of the test cases follows. - The first line of each test case contains an integer `n` (1 ≤ n ≤ 1000) — the number of digits in the series. - The second line contains `n` integers `a1, a2, ..., an` (0 ≤ ai ≤ 9) — the series of digits chosen by the participant. Output: For each test case, print \\"Valid\\" if the code is well-formed, otherwise print \\"Invalid\\". You may print each letter in any case (upper or lower). Example: **Input** ``` 3 5 1 2 3 4 5 4 4 4 5 6 3 7 6 8 ``` **Output** ``` Valid Valid Invalid ``` Explanation: 1. For the first case, the digits are in non-decreasing order. 2. For the second case, the digits are in non-decreasing order. 3. For the third case, the digits are not in non-decreasing order as 7 > 6.","solution":"def is_valid_code(digits): Determines if the series of digits forms a valid identification code. A valid code must be in non-decreasing order. for i in range(1, len(digits)): if digits[i] < digits[i - 1]: return False return True def check_identification_codes(test_cases): results = [] for t in test_cases: n, digits = t if is_valid_code(digits): results.append(\\"Valid\\") else: results.append(\\"Invalid\\") return results def main(input_data): input_lines = input_data.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) digits = list(map(int, input_lines[index + 1].split())) test_cases.append((n, digits)) index += 2 results = check_identification_codes(test_cases) for result in results: print(result)"},{"question":"You have a sequence of integers, and you want to count the number of contiguous subarrays whose sum is equal to a given integer k. Write a function that finds this count efficiently. Your function should have the following signature: ```python def count_subarrays(nums: List[int], k: int) -> int: ``` **Input** - The first line of the input contains an integer n, the size of the array (1 ≤ n ≤ 100000). - The second line contains n integers a1, a2, ..., an (|ai| ≤ 1000, for all i). - The third line contains an integer k (|k| ≤ 10^9). **Output** - The function should return a single integer, the number of contiguous subarrays whose sum is equal to k. **Example** ```python n = 5 nums = [1, 1, 1, 1, 1] k = 2 ``` **Output** ```python 4 ``` In the example provided, the contiguous subarrays which sum to 2 are `[1, 1]`, `[1, 1]`, `[1, 1]`, and `[1, 1]`. **Explanation** 1. Use a hashmap to store the cumulative sum at each index. 2. Traverse through the array, and for each element, calculate the cumulative sum. 3. Check if there exists a subarray (using the hashmap) that sums to k. 4. Use the hashmap to maintain counts of cumulative sums encountered. Provide an efficient solution with an expected time complexity of O(n).","solution":"from typing import List from collections import defaultdict def count_subarrays(nums: List[int], k: int) -> int: cumulative_sum = 0 count = 0 cumulative_sum_map = defaultdict(int) cumulative_sum_map[0] = 1 for num in nums: cumulative_sum += num if (cumulative_sum - k) in cumulative_sum_map: count += cumulative_sum_map[cumulative_sum - k] cumulative_sum_map[cumulative_sum] += 1 return count"},{"question":"Julia is obsessed with different kinds of bracelets. She decided to create her own bracelet from `n` different types of beads where each bead type is represented by a unique integer. She plans to make the bracelet by arranging the beads in a circle. Julia wants her bracelet to be symmetrical, which means the sequence of beads should read the same both clockwise and counterclockwise. Your task is to determine if Julia can create a symmetrical bracelet with the given beads. The first line of input contains a single integer `n` (1 ≤ n ≤ 1000) — the number of different types of beads. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^6) — the types of beads where `ai` represents the type of the i-th bead. Output \\"YES\\" if Julia can create a symmetrical bracelet with the given beads. Otherwise, output \\"NO\\". **Example:** Input: ``` 5 1 2 3 2 1 ``` Output: ``` YES ``` Explanation: The sequence `1 2 3 2 1` can be read the same clockwise and counterclockwise, hence it\'s symmetrical. Input: ``` 4 1 2 3 4 ``` Output: ``` NO ``` Explanation: The sequence `1 2 3 4` cannot be read the same clockwise and counterclockwise, hence it is not symmetrical.","solution":"def is_symmetrical(n, beads): Returns \'YES\' if the bracelet can be arranged symmetrically, otherwise \'NO\'. return \'YES\' if beads == beads[::-1] else \'NO\'"},{"question":"You are given two strings, s1 and s2, each consisting of lowercase English letters. You are to determine the minimum number of operations required to transform string s1 into string s2. Each operation consists of either removing one character from s1, inserting one character into s1, or replacing one character in s1 with another character. This is an implementation of the classic \\"edit distance\\" problem, also known as \\"Levenshtein distance\\". The first line of the input contains the string s1 of length n (1 ≤ n ≤ 1000). The second line of the input contains the string s2 of length m (1 ≤ m ≤ 1000). Print one integer, denoting the minimum number of operations required to transform s1 into s2. Examples: Input: s1 = \\"kitten\\" s2 = \\"sitting\\" Output: 3 Explanation: The minimum number of operations required to transform \\"kitten\\" into \\"sitting\\" is 3: 1. Replace \'k\' with \'s\'. 2. Replace \'e\' with \'i\'. 3. Insert \'g\' at the end.","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to transform s1 into s2 using edit distance algorithm. n = len(s1) m = len(s2) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n + 1): for j in range(m + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], # Remove dp[i][j-1], # Insert dp[i-1][j-1]) # Replace return dp[n][m]"},{"question":"Given an undirected graph with n vertices and m edges, determine the minimum number of edges to be removed to make the graph bipartite. A graph is bipartite if its vertices can be divided into two disjoint sets such that no two graph vertices within the same set are adjacent. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). The first line of each test case contains two integers n and m (2 le n le 1000, 0 le m le 1000) — the number of vertices and the number of edges. The next m lines contain two integers u and v (1 le u, v le n, u neq v) — representing an edge between vertices u and v. It is guaranteed that the sum of n over all test cases does not exceed 1000, and the sum of m over all test cases does not exceed 1000. For each test case, print a single integer — the minimum number of edges to be removed to make the graph bipartite. **Example:** ***Input:*** ``` 2 4 4 1 2 2 3 3 4 4 1 3 2 1 2 2 3 ``` ***Output:*** ``` 0 0 ``` **Explanation:** In the first test case, after removing no edges, the graph is already bipartite. In the second test case, the graph is also already bipartite, so no edges need to be removed. Note: If there are multiple correct solutions, any valid solution will be accepted.","solution":"from collections import deque, defaultdict def bfs_is_bipartite(graph, start, colors): queue = deque([start]) colors[start] = 0 while queue: current = queue.popleft() for neighbor in graph[current]: if colors[neighbor] == -1: colors[neighbor] = 1 - colors[current] queue.append(neighbor) elif colors[neighbor] == colors[current]: return False return True def min_edges_to_remove_to_make_bipartite(n, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Check bipartiteness for each connected component colors = [-1] * (n + 1) for vertex in range(1, n + 1): if colors[vertex] == -1: if not bfs_is_bipartite(graph, vertex, colors): return -1 return 0 def process_test_cases(test_cases): results = [] for n, m, edges in test_cases: results.append(min_edges_to_remove_to_make_bipartite(n, edges)) return results def read_input(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) m = int(data[index + 1]) edges = [] for j in range(m): u = int(data[index + 2 + 2 * j]) v = int(data[index + 3 + 2 * j]) edges.append((u, v)) test_cases.append((n, m, edges)) index += 2 + 2 * m return test_cases if __name__ == \\"__main__\\": test_cases = read_input() results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You are given a rectangular grid of dimensions m x n filled with zeros and ones. You need to find the number of connected components of ones. Two cells containing ones are considered to be part of the same connected component if they are adjacent either vertically, horizontally, or diagonally. A connected component is formed by a group of adjacent ones. The grid is bordered by a boundary of zeros. The first line of the input contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid. Each of the next m lines contains n integers (either 0 or 1) separated by spaces. Output a single integer — the number of connected components of ones in the grid. Example: Input: 4 5 1 0 0 1 0 1 1 0 0 0 0 0 0 1 1 0 0 0 0 0 Output: 3","solution":"def num_connected_components(grid): if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] != 1: return grid[x][y] = -1 # Mark as visited dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) dfs(x + 1, y + 1) dfs(x - 1, y - 1) dfs(x + 1, y - 1) dfs(x - 1, y + 1) num_components = 0 for i in range(m): for j in range(n): if grid[i][j] == 1: num_components += 1 dfs(i, j) return num_components"},{"question":"Nina loves to play with string operations. She has a string `s` of length `n` containing only the characters \'a\' and \'b\'. She wants to perform exactly `k` operations on this string to make it lexicographically smallest. In one operation, she can select any non-empty substring of `s` and change all characters of this substring to the same character (\'a\' or \'b\'). A string `t` is lexicographically smaller than a string `u` if there exists some position `i` such that `t_i < u_i` and for all positions `j` less than `i`, `t_j = u_j`. Write a function `lexico_smallest_string(s: str, k: int) -> str` to help Nina find the lexicographically smallest string after performing exactly `k` operations. If there are multiple lexicographically smallest strings, return any of them. # Input - s: a string of length `n` (1 ≤ n ≤ 10^5) consisting only of the characters \'a\' and \'b\'. - k: the number of operations (1 ≤ k ≤ n). # Output - Return the lexicographically smallest string possible after exactly `k` operations. # Example Input `s = \\"baabb\\", k = 1` Output `\\"aaaab\\"` Input `s = \\"bbbb\\", k = 2` Output `\\"aaaa\\"` Input `s = \\"abbaa\\", k = 3` Output `\\"aaaaa\\"` # Note: - In the first example, the best operation could be converting the initial substring \\"ba\\" to \\"aa\\", leading to \\"aaabb\\", which is lexicographically smallest after one operation. Write your solution in Python: ```python def lexico_smallest_string(s: str, k: int) -> str: # Your code here ```","solution":"def lexico_smallest_string(s: str, k: int) -> str: Given a string s consisting of \'a\' and \'b\' and an integer k representing the number of operations, return the lexicographically smallest string possible after exactly k operations. :param s: str - the input string :param k: int - the number of operations allowed :return: str - the resulting lexicographically smallest string n = len(s) # Convert initial characters if needed and possible within k operations min_s = list(s) operations = 0 # First convert as many \'b\'s to \'a\' as possible from the left, counting the operations for i in range(n): if min_s[i] == \'b\': if operations < k: min_s[i] = \'a\' operations += 1 else: break # If we still have remaining operations after converting all necessary b\'s # Convert the spanning subsequence of remaining operations to \'a\'s if operations < k: min_s = [\'a\'] * n return \'\'.join(min_s)"},{"question":"Monica is an avid book collector and has a large collection of books. She decided to organize her books on her bookshelf in a very specific way. Each book has a height and a width. Monica wants to arrange the books on a single shelf such that no two books overlap when placed side by side. However, Monica is also lazy, so she doesn\'t want to rearrange her books too many times. Monica initially lines up all her books in height non-decreasing order. She then tries to place them on the shelf in this order, but sometimes, she needs to skip a book and come back to it later. We define a valid arrangement as one where each book is placed either immediately to the right of the last placed book or after leaving some space (as long as the books do not overlap). Given the heights and widths of the books, determine the minimum total width required for a valid arrangement of the books on the shelf. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of books. Each of the next n lines contains two positive integers hi and wi (1 ≤ hi, wi ≤ 10^9) — the height and width of the i-th book, respectively. Print a single integer — the minimum total width required for a valid arrangement. For example: Input: 4 10 5 20 3 15 7 25 4 Output: 19 In this example, Monica initially lines up the books based on their heights: (10, 20, 15, 25) with widths (5, 3, 7, 4). The optimum sequence would be placing the books with heights (10, 15, 20, 25) and widths (5, 7, 3, 4) resulting in the minimum total width of 19.","solution":"def min_total_width(n, books): books.sort() total_width = 0 for _, width in books: total_width += width return total_width # Example Usage # n = 4 # books = [(10, 5), (20, 3), (15, 7), (25, 4)] # print(min_total_width(n, books)) # Output should be 19"},{"question":"You are given an undirected, connected graph with ( n ) vertices and ( m ) edges. Each edge ( (u, v) ) has a non-negative weight ( w ). You need to determine the minimum spanning tree (MST) of the graph and then find the heaviest edge in the MST. The MST of a graph is a spanning tree whose sum of edge weights is as small as possible. If there are multiple MSTs, you can find any of them. The first line of the input contains two integers ( n ) (( 1 le n le 10^5 )) and ( m ) (( n-1 le m le 2 cdot 10^5 )) — the number of vertices and the number of edges, respectively. The next ( m ) lines contain three integers each: ( u ), ( v ), and ( w ) (( 1 le u, v le n ), ( 0 le w le 10^6 )), describing an edge between vertices ( u ) and ( v ) with weight ( w ). It is guaranteed that the graph is connected and there is no more than one edge between any pair of vertices. Output a single integer — the weight of the heaviest edge in the MST. # Example Input: ``` 4 5 1 2 1 2 3 2 3 4 3 1 3 4 1 4 5 ``` Output: ``` 3 ``` Explanation: One possible MST is formed by edges (1, 2) with weight 1, (2, 3) with weight 2, and (3, 4) with weight 3. The heaviest edge in this MST is the one with weight 3.","solution":"import heapq def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst(n, edges): edges.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n mst = [] for u, v, w in edges: u -= 1 v -= 1 if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst.append((u, v, w)) heaviest_edge_in_mst = max(edge[2] for edge in mst) return heaviest_edge_in_mst def heaviest_edge_in_mst(n, m, edge_list): edges = [] for edge in edge_list: u, v, w = edge edges.append((u, v, w)) return kruskal_mst(n, edges) # Example usage n = 4 m = 5 edges = [ (1, 2, 1), (2, 3, 2), (3, 4, 3), (1, 3, 4), (1, 4, 5) ] print(heaviest_edge_in_mst(n, m, edges)) # Output: 3"},{"question":"Alice and Bob love playing games involving strings. Today, they\'re playing a game where they take turns removing characters from a string according to specific rules, and the goal is to be the person who removes the last character. The rules of the game are as follows: - Alice always goes first. - On each player\'s turn, they must remove one character from the string. - The character to be removed must be either the first or the last character of the current string. - The game continues until the string is empty. Alice and Bob are equally skilled, and each player always makes optimal moves. Given the starting string, determine whether Alice will win or Bob will win assuming both play optimally. The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains a string s of length n consisting of lowercase English letters. Print \\"Alice\\" if Alice will win, and \\"Bob\\" if Bob will win. In the first example with the string \\"ab\\", Alice will remove \'a\' and then Bob will remove \'b\'. Bob wins, so the output is \\"Bob\\". In the second example with the string \\"abb\\", Alice can remove \'a\', leave \\"bb\\" for Bob, then Bob removes one \'b\', leaving \\"b\\" for Alice, so Alice wins. The output is \\"Alice\\".","solution":"def determine_winner(n, s): Determine whether Alice or Bob will win the game. Parameters: n (int): length of the string s (str): the string itself Returns: str: \\"Alice\\" if Alice will win, \\"Bob\\" if Bob will win. # The player who starts with an odd number of turns wins if n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Given an array of integers nums and an integer k, return the maximum possible sum of a non-empty subsequence of nums such that the absolute difference between any two consecutive elements is less than or equal to k. A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements while keeping the relative order of the remaining elements. The first line of the input contains an integer t(1 ≤ t ≤ 10^3), the number of test cases. For each test case, the first line contains two integers n (1 ≤ n ≤ 5 × 10^5) and k (1 ≤ k ≤ 10^9) — the length of the array and the maximum allowed absolute difference, respectively. The second line contains n space-separated integers nums_i (-10^9 ≤ nums_i ≤ 10^9) — the elements of the array. Print t integers, one for each test case, each being the answer to the respective test case. # Example Input: ``` 2 4 5 1 5 9 12 5 3 -1 2 5 -2 3 ``` Output: ``` 28 6 ``` # Explanation: In the first test case, the entire array [1 5 9 12] forms a valid subsequence with an absolute difference of no more than 5 between any two consecutive elements. Therefore, the maximum possible sum is 1 + 5 + 9 + 12 = 27. In the second test case, the valid subsequences that lead to the maximum sums are [2 5 -2] or [2 3 -2] etc. A sum of 6 is achievable with subsequences like [2 5 or -1 3] , hence the output is 6.","solution":"def max_subsequence_sum(t, cases): results = [] for case in cases: n, k, nums = case max_sum = float(\'-inf\') current_sum = 0 for i in range(n): if i > 0 and abs(nums[i] - nums[i - 1]) > k: max_sum = max(max_sum, current_sum) current_sum = nums[i] else: current_sum += nums[i] max_sum = max(max_sum, current_sum) results.append(max_sum) return results"},{"question":"Alex is a software developer who loves to solve algorithmic puzzles during his free time. One of his favorite puzzles involves finding the longest palindrome in a given string. A palindrome is a string that reads the same forward and backward. Given a string `s`, Alex wants to determine the longest palindromic substring in `s`. Help Alex write a function to solve this problem. The input consists of a single line containing a string `s` (1 ≤ |s| ≤ 10^3) which consists only of lowercase English letters. The output should be a single line containing the longest palindromic substring. If there are multiple longest palindromic substrings with the same length, you can output any one of them. **Example:** **Input:** ``` babad ``` **Output:** ``` bab ``` (or, `aba` since both \\"bab\\" and \\"aba\\" are of the same length) **Input:** ``` cbbd ``` **Output:** ``` bb ```","solution":"def longest_palindrome(s: str) -> str: n = len(s) if n == 0: return \\"\\" # Initialize DP table dp = [[False] * n for _ in range(n)] longest_palindromic_substring = \\"\\" max_length = 0 # Every single character is a palindrome for i in range(n): dp[i][i] = True longest_palindromic_substring = s[i] max_length = 1 # Check for two character palindromes for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True longest_palindromic_substring = s[i:i+2] max_length = 2 # Check for palindromes longer than 2 characters for length in range(3, n+1): for i in range(n-length+1): j = i+length-1 if s[i] == s[j] and dp[i+1][j-1]: dp[i][j] = True if length > max_length: max_length = length longest_palindromic_substring = s[i:j+1] return longest_palindromic_substring"},{"question":"Maria loves reading books and she recently discovered a new series called \\"Adventures in CodeLand\\". She decided to catalog the books in her collection on a bookshelf by their unique ISBN numbers. However, she has realized that sometimes the same book might appear multiple times in her collection, and she wants to make sure that her catalog counts each book only once. Given a list of ISBN numbers, help Maria determine the number of unique books in her collection. **Input:** - The first line contains an integer n (1 leq n leq 1000) — the total number of ISBN numbers in Maria\'s collection. - The second line contains n integers ISBN_1, ISBN_2, ldots, ISBN_n (1 leq ISBN_i leq 10^9) — the ISBN numbers of each book in the collection. **Output:** - Output a single integer — the number of unique books in Maria\'s collection. **Example:** ``` Input: 5 9780306406157 9780306406157 9780140449136 9780451524935 9780451524935 Output: 3 ``` **Explanation:** In the given example, the ISBN numbers 9780306406157 and 9780451524935 each appear twice in the collection. However, they should only be counted once each in the final unique count. Thus, the number of unique books in the collection is 3.","solution":"def count_unique_books(n, isbn_numbers): Returns the number of unique ISBN numbers in the collection. Parameters: n (int): The total number of ISBN numbers. isbn_numbers (list of int): The list of ISBN numbers. Returns: int: The number of unique ISBN numbers. return len(set(isbn_numbers))"},{"question":"Anna is planning a movie marathon night! She\'s got a list of movies, each movie having a certain duration. However, she wants to keep her marathon within a certain total duration to ensure she gets enough sleep. Anna also has a peculiar taste in movies — for every movie she watches, she has a \\"fun factor\\" associated with it, and she wants to maximize the total fun factor without exceeding her total allowed duration for the marathon. Given a list of movies with their durations and fun factors, and a maximum total allowed duration for the marathon, help Anna determine the maximum fun factor she can achieve. **Input:** - The first line contains two integers, n and T (1 leq n leq 1000, 1 leq T leq 1000) — the number of movies and the maximum total duration for the marathon. - The next n lines each contain two integers, d_i and f_i (1 leq d_i, f_i leq 1000) — the duration and fun factor of the i-th movie. **Output:** - Output a single integer, the maximum total fun factor that Anna can achieve without exceeding the maximum total duration. **Example:** ``` Input: 4 10 4 5 3 1 2 2 5 6 Output: 11 ``` In the example above, the best selection of movies for Anna is to watch the first and fourth movies, resulting in a total duration of 9 (which is within the allowed 10) and a total fun factor of 11.","solution":"def max_fun_factor(n, T, movies): # Initialize dp array where dp[j] represents maximum fun achievable with duration j dp = [0] * (T + 1) for duration, fun in movies: # Iterate backwards to prevent using the same movie more than once. for j in range(T, duration - 1, -1): dp[j] = max(dp[j], dp[j - duration] + fun) # The maximum fun factor is the maximum value in the dp array return max(dp) # Sample input and run for verification n = 4 T = 10 movies = [(4, 5), (3, 1), (2, 2), (5, 6)] print(max_fun_factor(n, T, movies)) # Expected output is 11"},{"question":"Mishka wants to buy a new smartphone, and she is considering the prices in different shops. Each shop offers the smartphone at a certain price and may also have an additional discount for customers who have a member card. Each shop\'s offer is defined by two integers: the initial price of the smartphone and the discount percentage. If the shop has no discount, then the discount percentage is 0. Mishka wants to determine the maximum amount of money she can save by using the discount in different shops. She can only buy one smartphone from one shop. The first line of the input contains a single integer n (1 ≤ n ≤ 100) - the number of shops. The following n lines each contain two integers ai and di (1 ≤ ai ≤ 10^6, 0 ≤ di ≤ 100) - the initial price of the smartphone in the i-th shop and the discount percentage in the i-th shop, respectively. Print a single integer — the maximum amount of money Mishka can save. For example, if there are three shops with the following offers: - shop 1: price = 1000, discount = 10% - shop 2: price = 2000, discount = 20% - shop 3: price = 1500, discount = 5% The calculation would be: - Shop 1: saves 1000 * 10 / 100 = 100 - Shop 2: saves 2000 * 20 / 100 = 400 - Shop 3: saves 1500 * 5 / 100 = 75 So the maximum amount of money Mishka can save is 400.","solution":"def max_savings(n, shops): Determines the maximum amount of money Mishka can save by using the discount in different shops. :param n: The number of shops (integer) :param shops: A list of tuples where each tuple contains two integers (price, discount percentage) of the smartphone in the i-th shop. :return: The maximum amount of money Mishka can save (integer) max_saving = 0 for price, discount in shops: savings = price * discount / 100 if savings > max_saving: max_saving = savings return int(max_saving)"},{"question":"You are given a positive integer n. Your task is to find a sequence of integers such that the sums of any two distinct elements in the sequence are unique. The first line of the input contains a single integer n (1 ≤ n ≤ 1000). Output n integers that form the required sequence. If there are multiple valid sequences, output any of them. If no such sequence exists, output -1. For example, if n is 3, one valid sequence is [1, 2, 4] because: 1 + 2 = 3, 1 + 4 = 5, 2 + 4 = 6.","solution":"def unique_sum_sequence(n): if n == 1: return [1] result = [] for i in range(n): result.append(2**i) return result"},{"question":"You are given a city with `n` intersections and `m` bidirectional roads. Each road has a length associated with it. Bob wants to find out the minimum travel distance he would need to go from intersection `1` to intersection `n`. Write a program that computes this minimum distance using the given roads. The first line of input contains two space-separated integers `n` and `m` (`1 ≤ n ≤ 10^5`, `0 ≤ m ≤ 10^5`), representing the number of intersections and the number of roads, respectively. Each of the next `m` lines contains three space-separated integers `u`, `v`, and `w` (`1 ≤ u, v ≤ n`, `1 ≤ w ≤ 10^6`), representing a road from intersection `u` to intersection `v` with length `w`. If there is no path from intersection `1` to intersection `n`, print -1. Otherwise, print the minimum distance from intersection `1` to intersection `n`. Note that the intersections are numbered from 1 to n. For example, consider the following input: ``` 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 ``` Output: ``` 6 ```","solution":"import heapq import sys def dijkstra(n, adj): # Distance to each node, initialized as infinity dist = [sys.maxsize] * (n + 1) dist[1] = 0 # Min heap to get the node with the smallest distance heap = [(0, 1)] while heap: current_dist, u = heapq.heappop(heap) if current_dist > dist[u]: continue for v, length in adj[u]: distance = current_dist + length if distance < dist[v]: dist[v] = distance heapq.heappush(heap, (distance, v)) return dist[n] if dist[n] != sys.maxsize else -1 def min_travel_distance(n, m, roads): adj = [[] for _ in range(n + 1)] # Build the adjacency list for u, v, w in roads: adj[u].append((v, w)) adj[v].append((u, w)) return dijkstra(n, adj) # Example usage # if __name__ == \\"__main__\\": # n, m = map(int, input().strip().split()) # roads = [tuple(map(int, input().strip().split())) for _ in range(m)] # print(min_travel_distance(n, m, roads))"},{"question":"In a land far away, there is a kingdom with n cities connected by n-1 bi-directional roads such that there is exactly one path between any pair of cities. The roads are represented by pairs of integers (a, b), where a and b are the cities connected by that road. The king of this kingdom has decided to celebrate the annual festival by lighting up these cities. However, due to limited resources, they can only light up a contiguous path of cities. The cost to light up a path is determined by the sum of the distances between consecutive cities along the path. The distance between two directly connected cities is given. You are tasked with determining the minimum cost needed to light up any contiguous path that includes every city exactly once. You are given an integer n (2 ≤ n ≤ 200) representing the number of cities and an integer array distances of size n-1, where distances[i] represents the distance of the road between cities i+1 and i+2. Find the minimum cost to light up all the cities in one contiguous path. # Input - The first line contains an integer n (2 ≤ n ≤ 200) — the number of cities. - The second line contains n-1 integers, describing the distances of the roads. # Output - Print the minimum cost to light up a path that includes every city exactly once. Example: Input: ``` 5 1 2 3 4 ``` Output: ``` 10 ``` Explanation: The contiguous path that includes all the cities is 1-2-3-4-5. The sum of distances is 1 + 2 + 3 + 4 = 10, which is the minimum cost.","solution":"def minimum_cost_to_light_up_cities(n, distances): Finds the minimum cost to light up all the cities in one contiguous path. :param n: Number of cities :param distances: List of distances between consecutive cities :return: Minimum cost to light up all the cities exactly once # Since the cities are in a line, the only way to light them all up # is summing up all the distances given. return sum(distances) # Example usage: n = 5 distances = [1, 2, 3, 4] print(minimum_cost_to_light_up_cities(n, distances)) # Output: 10"},{"question":"Inverted Index is a fundamental methodology that many search engines use to perform efficient textual searches. In this task, you are required to create an inverted index from a set of documents, and then perform queries on that index to find documents that contain specific words. # Explanation: An inverted index is a dictionary where each key is a word, and the value is a list of document IDs (or positions) where the word appears. # Input: - The first line contains an integer n (1 leq n leq 10^5) indicating the number of documents. - The next n lines describe the documents. Each line contains a string of alphanumeric characters and spaces (representing words) separated by a single space. - The following line contains an integer q (1 leq q leq 10^5) indicating the number of queries. - The next q lines contain the queries. Each line contains a single word in lowercase English letters. # Output: For each query, output a single line containing a space-separated list of document indices (1-based) where the word appears, in ascending order. If the word does not appear in any document, output `-1` for that query. # Example: Input: ``` 4 hello world this is a test hello again test the inverted index 3 hello test index ``` Output: ``` 1 3 2 4 4 ``` # Constraints: - Each document can contain up to 10^4 characters. - A word in a document or a query can have a maximum length of 20 characters. # Note: - The words are case-sensitive. For example, \\"Hello\\" and \\"hello\\" should be considered different. - Each word in the documents and the queries will contain only lowercase English letters. Your task is to construct the inverted index and perform the queries efficiently.","solution":"def build_inverted_index(documents): Returns an inverted index from the given documents. from collections import defaultdict inverted_index = defaultdict(list) for doc_id, doc in enumerate(documents, 1): words = doc.split() for word in words: if doc_id not in inverted_index[word]: inverted_index[word].append(doc_id) return inverted_index def query_inverted_index(inverted_index, query_words): Returns the list of document indices for each query word. results = [] for word in query_words: if word in inverted_index: results.append(\' \'.join(map(str, inverted_index[word]))) else: results.append(\\"-1\\") return results def process_documents_and_queries(doc_input, query_input): Processes documents and queries and returns the results for each query. n = int(doc_input[0]) documents = doc_input[1:n+1] q = int(query_input[0]) queries = query_input[1:q+1] inverted_index = build_inverted_index(documents) return query_inverted_index(inverted_index, queries)"},{"question":"Write a function to determine if it is possible to construct a given target string `targetWord` using an unlimited supply of words from a given list `wordList`. # Input: - The first line of input contains a single integer `T`, the number of test cases (1 ≤ T ≤ 100). - For each test case: - The first line contains the target string `targetWord` (1 ≤ len(targetWord) ≤ 1000). - The second line contains an integer `n` (1 ≤ n ≤ 100), the number of words in the `wordList`. - The third line contains `n` space-separated strings, each of length between 1 and 100, representing the words in the `wordList`. # Output: - For each test case, output \\"YES\\" if it is possible to construct the `targetWord` by concatenating one or more words from the `wordList`. Otherwise, output \\"NO\\". # Example: Input: ``` 2 abcdef 3 ab abc def xyz 2 xy y ``` Output: ``` YES NO ``` # Note: In the first test case, the `targetWord` \\"abcdef\\" can be constructed by concatenating \\"abc\\" and \\"def\\" from the `wordList`. In the second test case, the `targetWord` \\"xyz\\" cannot be fully constructed using \\"xy\\" and \\"y\\" from the `wordList` because it is missing the letter \\"z\\".","solution":"def can_construct_target_word(targetWord, wordList): Determines if the targetWord can be constructed using an unlimited supply of words from wordList. :param targetWord: str :param wordList: List[str] :return: bool # Create a memoization dictionary memo = {} def _can_construct(remaining): # If remaining string is empty, we\'ve successfully constructed the targetWord if remaining == \\"\\": return True # If we have already computed the result for this remaining string, return it if remaining in memo: return memo[remaining] # Try to construct remaining string by iterating over all words for word in wordList: if remaining.startswith(word): suffix = remaining[len(word):] if _can_construct(suffix): memo[remaining] = True return True # If no combination can construct the remaining string memo[remaining] = False return False return _can_construct(targetWord) def process_test_cases(test_cases): results = [] for targetWord, wordList in test_cases: if can_construct_target_word(targetWord, wordList): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a rectangular maze of size NxM where some cells may be blocked, and you can\'t step onto them. You start at the top-left corner of the maze and want to reach the bottom-right corner. You can move up, down, left, or right but cannot move diagonally. Write a function that returns the number of distinct paths from start to end without stepping on any blocked cell. If it is impossible to reach the end, return 0. The input data consists of: 1. Two integers, N and M (1 ≤ N, M ≤ 100), the dimensions of the maze. 2. An NxM matrix where 0 represents a free cell and 1 represents a blocked cell. Your function should take a 2D list representing the maze as an input and return an integer representing the number of distinct paths from the start to the end. Example: Input: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` Explanation: - There are two paths from the top-left corner to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Function signature: ```python def count_paths(maze: List[List[int]]) -> int: # Your code here ``` In the above example, the function `count_paths` should return 2. If the maze is such that there\'s no possible way to reach the end, the function should return 0, for example, if the bottom-right corner is blocked, it should return 0.","solution":"def count_paths(maze): N = len(maze) M = len(maze[0]) # If the start or end is blocked, return 0 as there\'s no way possible if maze[0][0] == 1 or maze[N-1][M-1] == 1: return 0 # Create a DP table to store the number of ways to reach each cell dp = [[0] * M for _ in range(N)] # Initialize the starting point dp[0][0] = 1 # Fill the DP table for i in range(N): for j in range(M): if maze[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1]"},{"question":"You are given a farm with fields arranged in a grid of n rows and m columns. Each cell in the grid can either be a field (denoted by \'.\') or an obstacle (denoted by \'#\'). You need to plant crops in the fields such that the same crop is not planted in two adjacent cells (horizontally or vertically). Determine the minimum number of different crops required to achieve this. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. The next n lines each contain a string of length m, representing the grid. Output a single integer: the minimum number of different crops required. **Example:** Input: ``` 4 4 .... .#.. ..#. .... ``` Output: ``` 2 ``` **Explanation:** In this 4x4 grid, at least two different crops are needed to ensure that no two adjacent fields have the same crop. One way to plant the crops would be to alternate between crop types in a checkerboard pattern: Crop 1 for cell (1,1), (1,3), (2,2), (2,4), etc. Crop 2 for cell (1,2), (1,4), (2,1), (2,3), etc.","solution":"def min_different_crops(n, m, grid): Returns the minimum number of different crops required to ensure that no two adjacent fields (horizontally or vertically) have the same crop. Args: n : int : number of rows m : int : number of columns grid : list of str : the farm grid Returns: int : the minimum number of different crops required # You essentially need 2 crops to satisfy the non-adjacency requirement. # This can be represented as a checkerboard pattern. crop_needed = [ [0] * m for _ in range(n) ] for i in range(n): for j in range(m): if grid[i][j] == \'.\': crop_needed[i][j] = (i + j) % 2 # use modulo 2 to alternate crops in a checkerboard pattern # No direct need to count oridentify different crop types since (i + j) % 2 alternating cells ensures no adjacency return 2 # two crops are always sufficient for this problem"},{"question":"You are given an array of integers a_1, a_2, dots, a_n and you need to perform q queries. Each query consists of an integer k, and you have to find and print the smallest index i (1-based) such that a_i geq k. If no such index exists, output -1. The first line contains two integers n and q (1 le n le 10^5, 1 le q le 10^5) — the length of the array and the number of queries. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. The next q lines contain one integer each, denoting the value of k for each query. Print q integers. Each integer should be the answer to the corresponding query. Example: ``` Input: 5 3 3 8 2 7 5 4 1 9 Output: 2 1 -1 ```","solution":"def find_smallest_index(n, q, array, queries): results = [] for k in queries: result = -1 for i in range(n): if array[i] >= k: result = i + 1 break results.append(result) return results"},{"question":"Challenge: Array Rotation and Subsequence You are given an array `arr` of length `n`. Your task is to find the minimum number of rotations required to get the lexicographically smallest subsequence of length `k` from the array `arr`. A rotation is defined as moving the first element of the array to the end of the array. For instance, if the array is [3, 1, 2] and k=2, rotating once results in [1, 2, 3] and the smallest subsequence of length 2 is [1, 2]. # Input - The first line contains two integers `n` (1 ≤ n ≤ 2000) and `k` (1 ≤ k ≤ n) — the length of the array and the length of the subsequence. - The second line contains `n` space-separated integers `arr[i]` (1 ≤ arr[i] ≤ 10^9). # Output - Output a single integer, the minimum number of rotations required to get the lexicographically smallest subsequence of length `k`. # Example Input ``` 4 2 5 4 3 2 ``` Output ``` 3 ``` # Explanation Rotating the array 3 times results in [2, 5, 4, 3], and the smallest subsequence of length 2 is [2, 3]. Note: The lexicographically smallest subsequence means that among all possible subsequences of given length, it is the one that comes first in lexicographic order. For instance, for the array [5, 4, 3, 2] with k=2: - [5, 4] is lexicographically larger than [4, 3] - [4, 3] is lexicographically larger than [3, 2] - Therefore [2, 3] is the smallest. Ensure your solution can handle the constraints efficiently.","solution":"def min_rotations_smallest_subsequence(n, k, arr): Returns the minimum number of rotations required to get the lexicographically smallest subsequence of length k. def get_lexicographically_smallest_subsequence(seq, k): stack = [] to_remove = len(seq) - k for num in seq: while stack and to_remove > 0 and stack[-1] > num: stack.pop() to_remove -= 1 stack.append(num) return stack[:k] min_rotation = 0 min_subsequence = get_lexicographically_smallest_subsequence(arr, k) for i in range(1, n): rotated_arr = arr[i:] + arr[:i] current_subsequence = get_lexicographically_smallest_subsequence(rotated_arr, k) if current_subsequence < min_subsequence: min_subsequence = current_subsequence min_rotation = i return min_rotation"},{"question":"You have been hired as a software developer at a small startup that processes text data. One of your tasks is to develop a system that removes redundant spaces from sentences. Your system should adhere to the following rules: 1. Remove any spaces at the beginning and end of the sentence. 2. Replace any sequence of two or more space characters with a single space character. 3. Leave single spaces between words untouched. You need to implement a function `clean_sentence` that takes a single input: - `sentence` (a string): The text data with redundant spaces. The function should return a string which follows the rules described above. # Example: Input: ``` \\" This is a sentence with redundant spaces. \\" ``` Output: ``` \\"This is a sentence with redundant spaces.\\" ``` # Function Signature ```python def clean_sentence(sentence: str) -> str: pass ``` # Constraints: - The input `sentence` will not contain any newline characters. - The length of the `sentence` will not exceed 1000 characters. # Note: - Ensure that you thoroughly test your solution with various scenarios, including sentences with no additional spaces, sentences with only spaces, and typical sentences with redundant spaces.","solution":"def clean_sentence(sentence: str) -> str: Removes redundant spaces from the sentence. Parameters: - sentence (str): The text data with redundant spaces. Returns: - str: A cleaned sentence with no redundant spaces. # Remove leading and trailing whitespace sentence = sentence.strip() # Replace multiple spaces with a single space cleaned_sentence = \' \'.join(sentence.split()) return cleaned_sentence"},{"question":"A young engineer has designed a special type of network system which contains several nodes. Each node has a unique identifier. Any two nodes can communicate directly if they are connected by a cable. Each cable has a specified capacity – the maximum amount of data that can be transferred through it per second. The engineer wants to ensure that the network can handle a peak scenario where some nodes need to communicate simultaneously with maximum possible data throughput. She wants to maximize the minimum capacity among all direct communications in the network. Write a program which will assign capacities to each cable between nodes such that the minimum capacity among all cables is maximized. Formally, given n nodes and m cables, each cable directly connects a pair of nodes and has an associated capacity, find an assignment of capacities to each cable such that the minimum capacity among all cables is maximized. Your task is to determine the maximum possible value of this minimum capacity. The first line of the input contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 10,000) – the number of nodes and the number of cables, respectively. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating there is a cable between nodes u and v. The output should contain one integer – the maximum possible minimum capacity among all cables. # Example: Input: ``` 4 4 1 2 2 3 3 4 4 1 ``` Output: ``` 1 ``` Explanation: In this example, any assignment gives each cable the same capacity. If each cable is assigned a capacity of 1, then the minimum capacity among all cables is 1. This is the maximum possible minimum capacity for this network configuration.","solution":"def max_min_capacity(n, m, edges): Computes the maximum possible minimum capacity among all cables. :param n: int, number of nodes :param m: int, number of cables :param edges: list of tuples, each tuple (u, v) representing a cable between nodes u and v :return: int, the maximum possible minimum capacity from collections import defaultdict import heapq def bfs_capacity_check(mid_capacity): Breadth first search to check if all edges can support the given minimum capacity. :param mid_capacity: int :return: bool, True if all edges can support the given capacity, False otherwise visited = [False] * (n + 1) queue = [1] visited[1] = True while queue: current = queue.pop(0) for neighbor, capacity in graph[current]: if not visited[neighbor] and capacity >= mid_capacity: visited[neighbor] = True queue.append(neighbor) # Check if all nodes are visited (i.e., can reach from node 1 with the given mid_capacity) return all(visited[1:]) # Initializing graph graph = defaultdict(list) for u, v in edges: graph[u].append((v, 1)) # Assign initial capacity of 1 to each pair graph[v].append((u, 1)) # Assign initial capacity of 1 to each pair # Binary search for the maximum minimum capacity left, right = 1, m max_min_capacity = 1 while left <= right: mid = (left + right) // 2 if bfs_capacity_check(mid): max_min_capacity = mid left = mid + 1 else: right = mid - 1 return max_min_capacity # Example usage # edges = [(1, 2), (2, 3), (3, 4), (4, 1)] # print(max_min_capacity(4, 4, edges)) # Output: 1"},{"question":"Lila is managing an online store with a new promotion to increase customer engagement. Each customer can create a wishlist of items they desire from the store. Lila wants to analyze these wishlists to find the item that appears most frequently across all customers\' wishlists to decide which item to put on a special discount. Each wishlist is represented as a space-separated string of item names. All wishlists are non-empty and consist of at least one item. Lila needs to identify the item name that appears most frequently in all the wishlists and count how many times it appears. If there is a tie (multiple items with the same highest frequency), return the lexicographically smallest item name. The first line of input contains an integer n (1 ≤ n ≤ 1000), representing the number of wishlists. The following n lines each contain a string representing a wishlist. Print the name of the item that appears most frequently across all wishlists and the number of times it appears. **Example Input:** ``` 5 apple orange banana apple orange banana apple orange apple banana banana orange apple ``` **Example Output:** ``` apple 5 ``` **Explanation:** In this example, the item \\"apple\\" appears in all 5 wishlists, more frequently than any other item (though \\"orange\\" and \\"banana\\" also appear, they appear fewer times than \\"apple\\"). Therefore, \\"apple\\" is the most frequent item.","solution":"def find_most_frequent_item(wishlists): from collections import Counter item_counter = Counter() for wishlist in wishlists: items = wishlist.split() item_counter.update(items) # Find the item with the highest frequency most_frequent_item = min( item_counter.items(), key=lambda item: (-item[1], item[0]) ) return most_frequent_item[0], most_frequent_item[1] def process_input(input_lines): n = int(input_lines[0].strip()) wishlists = input_lines[1:n+1] return find_most_frequent_item(wishlists)"},{"question":"A water supply network consists of n pipes and m connections. Each pipe can either be on or off, and initially, all pipes are off. You need to turn on certain pipes to ensure that water can flow from a source node (node 1) to a target node (node n). However, once a pipe is turned on, it remains on and cannot be turned off. Each connection between two nodes (pipes) has a time associated with turning it on. Your goal is to determine the minimum completion time required to ensure that water can flow from the source node to the target node. You are given n pipes and m connections in the network. Each of the m connections specifies two nodes and the time required to turn on the pipe between those nodes. Input: - The first line contains two integers n and m (2 ≤ n ≤ 10^3, 1 ≤ m ≤ 10^5) — the number of pipes and the number of connections in the network. - The next m lines each contain three integers u, v, and t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 10^4), where u and v are the nodes and t is the time required to turn on the pipe between nodes u and v. Output: - Print a single integer which is the minimum time required to turn on pipes so that water can flow from the source node (node 1) to the target node (node n). If it\'s impossible to ensure water flow using the given connections, print -1. Example: Input: ``` 4 5 1 2 4 1 3 2 2 3 5 3 4 3 2 4 1 ``` Output: ``` 5 ``` Explanation: To cover the flow from node 1 to node 4, one optimal way is: - Turn on the pipe between node 1 and node 3 with time 2. - Turn on the pipe between node 3 and node 4 with time 3. So the total minimum time required is 2 + 3 = 5. If there\'s no way to turn on the pipes to allow the flow from node 1 to node n, the program should output -1.","solution":"import heapq def minimum_time_to_flow(n, m, connections): graph = {i: [] for i in range(1, n+1)} for u, v, t in connections: graph[u].append((v, t)) graph[v].append((u, t)) def dijkstra(source, target): min_heap = [(0, source)] # (cumulative_time, node) visited = set() min_time = {i: float(\'inf\') for i in range(1, n+1)} min_time[source] = 0 while min_heap: current_time, u = heapq.heappop(min_heap) if u in visited: continue visited.add(u) if u == target: return current_time for v, time in graph[u]: if v not in visited and current_time + time < min_time[v]: min_time[v] = current_time + time heapq.heappush(min_heap, (min_time[v], v)) return -1 if min_time[target] == float(\'inf\') else min_time[target] return dijkstra(1, n)"},{"question":"You are given an undirected graph with `n` vertices and `m` edges. Each edge has a weight associated with it. Your task is to find the smallest weight of an edge such that, by removing this edge and all edges with larger weights from the graph, the remaining graph has exactly one connected component. # Input The first line of the input contains two integers `n` and `m` (2 leq n leq 10^5, 1 leq m leq 2 cdot 10^5) — the number of vertices and edges in the graph. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 leq u, v leq n, 1 leq w leq 10^9), denoting an edge between vertex `u` and vertex `v` with weight `w`. It is guaranteed that the graph is connected, and there are no multiple edges or self-loops. # Output Output a single integer, the smallest weight of an edge such that, by removing this edge and all edges with larger weights, the graph will have exactly one connected component. # Example Input ``` 4 4 1 2 1 2 3 2 3 4 3 4 1 4 ``` Output ``` 3 ``` # Explanation In the given example, if we remove the edge with weight `4` (and thus also effectively removing all greater weights, which none do exist here), the graph still remains connected. However, stepping back to edge `3` as the greatest to exclude (removing also any greater if they existed), keeps the graph together. Thus, the answer is `3`. # Notes - In the example, removing edge with weight `4` makes the graph connected. However, our goal is to find the smallest such edge weight that ensures this scenario. Here, `3` is the smallest weight meeting the criteria. - It is crucial to carefully remove edges while ensuring the remaining graph\'s connectivity until only one connected component remains, ignoring higher weights first to find the smallest cutoff point.","solution":"def find_min_edge_for_one_component(n, m, edges): from heapq import heappop, heappush def union(parents, x, y): rootX = find(parents, x) rootY = find(parents, y) if rootX != rootY: if ranks[rootX] > ranks[rootY]: parents[rootY] = rootX elif ranks[rootX] < ranks[rootY]: parents[rootX] = rootY else: parents[rootY] = rootX ranks[rootX] += 1 def find(parents, x): if parents[x] != x: parents[x] = find(parents, parents[x]) return parents[x] edges = sorted(edges, key=lambda x: x[2]) parents = list(range(n+1)) ranks = [0] * (n+1) for u, v, w in edges: union(parents, u, v) if find(parents, 1) == find(parents, n): return w return -1 # if no such edge is found, although the problem guarantees the graph to be connected # Input def read_input(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) m = int(data[1]) edges = [] index = 2 for _ in range(m): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) edges.append((u, v, w)) index += 3 return n, m, edges if __name__ == \\"__main__\\": n, m, edges = read_input() print(find_min_edge_for_one_component(n, m, edges))"},{"question":"A network of n computers is connected by m bidirectional cables. Each computer in the network is assigned a unique ID from 1 to n. Each cable directly connects exactly two different computers and has a specific latency associated with it. Your task is to determine the minimum latency required to send data from computer 1 to computer n. If there is no possible way to connect computer 1 to computer n, output -1. The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 5000) — the number of computers and the number of cables, respectively. Each of the next m lines contains three integers u, v, and l (1 ≤ u, v ≤ n, 1 ≤ l ≤ 10^4) — representing a cable that connects computer u and computer v with latency l. Print one integer — the minimum latency required to send data from computer 1 to computer n, or -1 if it is impossible. For example, for the input: ``` 4 4 1 2 1 2 3 2 3 4 1 1 4 5 ``` the output should be `4`. In this example, the optimal path is 1 -> 2 -> 3 -> 4 with a total latency of 1 + 2 + 1 = 4.","solution":"import heapq def network_latency(n, m, cables): graph = {i: [] for i in range(1, n + 1)} for u, v, l in cables: graph[u].append((v, l)) graph[v].append((u, l)) # Dijkstra\'s algorithm to find the minimum latency from node 1 to node n pq = [(0, 1)] # (latency, node) latencies = {i: float(\'inf\') for i in range(1, n + 1)} latencies[1] = 0 while pq: curr_latency, node = heapq.heappop(pq) if node == n: return curr_latency if curr_latency > latencies[node]: continue for neighbor, weight in graph[node]: new_latency = curr_latency + weight if new_latency < latencies[neighbor]: latencies[neighbor] = new_latency heapq.heappush(pq, (new_latency, neighbor)) return -1 if latencies[n] == float(\'inf\') else latencies[n] # Example usage (converts input into format required by function): def solve_network_latency_problem(input_data): lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) cables = [] for line in lines[1:]: u, v, l = map(int, line.split()) cables.append((u, v, l)) return network_latency(n, m, cables)"},{"question":"You are given a list of n integers representing the \'happiness\' levels of n people sitting in a row. Each person wants to have a happiness level of at least k. In one move, you can either increase or decrease the happiness level of any person by 1. Find the minimum number of moves required to make the happiness level of every person at least k. The first line of the input contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^9) — the number of people and the minimum happiness level desired. The second line contains n space-separated integers representing the initial happiness levels of the people. The happiness levels are integers between -10^9 and 10^9. Output the minimum number of moves required to achieve the desired happiness levels for all individuals. Example: Input: 5 10 7 13 8 11 5 Output: 10 Explanation: - Increase the happiness level of the 1st person from 7 to 10 in 3 moves. - Happiness level of the 2nd person is already at least 10. - Increase the happiness level of the 3rd person from 8 to 10 in 2 moves. - Happiness level of the 4th person is already at least 10. - Increase the happiness level of the 5th person from 5 to 10 in 5 moves. Total moves required = 3 + 2 + 5 = 10.","solution":"def min_moves_to_reach_happiness(n, k, happiness_levels): Returns the minimum number of moves required to make the happiness level of every person at least k. :param n: Number of people :param k: Minimum happiness level desired :param happiness_levels: List of initial happiness levels :return: Minimum number of moves needed moves = 0 for level in happiness_levels: if level < k: moves += (k - level) return moves"},{"question":"You are given a collection of points in a 2D plane and a rectangle defined by its two opposite corners. Your task is to determine how many points from the collection lie inside or on the boundary of the rectangle. The first line of the input contains an integer n (1 ≤ n ≤ 200,000) — the number of points. Each of the next n lines contains two integers xi and yi ( -10^9 ≤ xi, yi ≤ 10^9) — the coordinates of the i-th point. The last line contains four integers x1, y1, x2, y2 ( -10^9 ≤ x1, y1, x2, y2 ≤ 10^9) — the coordinates of the two opposite corners of the rectangle. Note that the rectangle\'s sides are always parallel to the coordinate axes. Output a single integer — the number of points that lie inside or on the boundary of the defined rectangle. Example: Input: 5 1 2 2 3 3 4 4 5 5 6 1 1 4 5 Output: 4 Explanation: In this example, the points (1,2), (2,3), (3,4), and (4,5) lie inside or on the boundary of the rectangle defined by (1,1) and (4,5). Thus, the output is 4.","solution":"def count_points_in_rectangle(n, points, x1, y1, x2, y2): Returns the number of points that lie inside or on the boundary of the rectangle defined by two opposite corners (x1, y1) and (x2, y2). # Normalize rectangle coordinates x_min, x_max = min(x1, x2), max(x1, x2) y_min, y_max = min(y1, y2), max(y1, y2) count = 0 for x, y in points: if x_min <= x <= x_max and y_min <= y <= y_max: count += 1 return count"},{"question":"You are given a string `s` of length `n` which consists of lowercase Latin letters. Your task is to sort the string `s` in such a way that adjacent characters are different. If there are multiple valid sorted strings, any of them will be accepted as a correct answer. If it is impossible to sort the string in this way, print `\\"Impossible\\"`. The first line of the input contains a single integer `t` (1 le t le 10) — the number of test cases. Each of the next `t` lines contains one string `s` (1 le text{length of } s le 10^5), consisting of lowercase Latin letters. For each test case, print the sorted string or `\\"Impossible\\"` if such sorting is not feasible. # Example Input ``` 3 aabbcc aaab abcdef ``` Output ``` abcabc Impossible abcdef ```","solution":"from collections import Counter import heapq def sort_adjacent_different(t, cases): results = [] for s in cases: count_map = Counter(s) max_heap = [] for char, freq in count_map.items(): heapq.heappush(max_heap, (-freq, char)) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char if len(result) == len(s): results.append(\'\'.join(result)) else: results.append(\'Impossible\') return results"},{"question":"You are given a sequence of integers where each integer represents the height of a tree. You can cut down any number of trees to create a beautiful garden. A garden is considered beautiful if the difference between the height of the tallest tree and the shortest tree is minimized. Your task is to find the minimum possible difference in height between the tallest and the shortest tree in the beautiful garden. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of trees. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the trees. Output a single integer — the minimum possible difference between the height of the tallest tree and the shortest tree in the garden. Example: Input: 5 4 2 7 3 5 Output: 0 Explanation: You can make the garden beautiful by cutting down trees with heights 7, 4, and 5. The remaining trees have heights 2 and 3, so the difference is 1. Note: A trivial solution for all trees being of the same height will always have a difference of 0, which is the minimum possible value.","solution":"def minimum_height_difference(n, heights): Returns the minimum possible difference in height between the tallest and the shortest tree in the beautiful garden by cutting down any number of trees. Parameters: n (int): The number of trees. heights (list): A list of integers representing the heights of the trees. Returns: int: The minimum possible height difference. if n == 1: return 0 # If there is only one tree, the difference is 0 heights.sort() min_diff = float(\'inf\') for i in range(n - 1): diff = heights[i+1] - heights[i] if diff < min_diff: min_diff = diff return min_diff"},{"question":"John has a jar containing n stones lined up in a row, each with a different weight. The i-th stone in the row has a weight wi. John wants to select k stones from the jar such that the difference between the maximum weight and minimum weight among the selected stones is minimized. To achieve this, John needs to decide which k stones to pick to minimize the weight difference. The first line contains two positive integers n and k (1 ≤ k ≤ n ≤ 10^5), representing the number of stones and the number of stones to be selected, respectively. The second line contains n positive integers w1, w2, ..., wn (1 ≤ wi ≤ 10^9), where wi represents the weight of the i-th stone. Print a single integer — the minimum possible difference between the maximum weight and the minimum weight among the selected k stones. The following examples illustrate how the stones might be selected to meet the criteria. **Example 1:** Input: ``` 5 3 4 2 1 7 5 ``` Output: ``` 3 ``` Explanation: John can select three stones with weights 4, 5 and 7. The difference between the maximum weight (7) and the minimum weight (4) is 3. No selection of three stones will yield a smaller difference. **Example 2:** Input: ``` 7 4 10 20 30 40 50 60 70 ``` Output: ``` 30 ``` Explanation: John can select four stones with weights 10, 20, 30, and 40. The difference between the maximum weight (40) and the minimum weight (10) is 30. This is the minimum possible difference for any selection of four stones.","solution":"def minimize_weight_difference(n, k, weights): Returns the minimum difference between the maximum and minimum weights among the selected k stones from the given list of weights. Parameters: n (int): The number of stones. k (int): The number of stones to be selected. weights (list of int): The weights of the stones. Returns: int: Minimum difference between the maximum and minimum weights among selected k stones. weights.sort() min_diff = float(\'inf\') for i in range(n - k + 1): current_diff = weights[i + k - 1] - weights[i] min_diff = min(min_diff, current_diff) return min_diff"},{"question":"Yana is making preparations for Dunwich\'s annual summer camp survival challenge. The campers will be divided into groups and each group will receive a secret survival code, which is a string. Yana needs to ensure that the codes are distinct and follow these specific rules: - The length of the code must be exactly k. - A code can only consist of lowercase English letters. Yana has n distinct secret words, each of which follows the above rules. Her task is to determine if it\'s possible to rearrange the letters of each group’s code to form one of the secret words she has. If it is, she should output \\"YES\\", otherwise \\"NO\\". The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of distinct secret words. The second line contains n strings of length k (1 ≤ k ≤ 100) — the secret words. The third line contains an integer q (1 ≤ q ≤ 100) — the number of groups. The next q lines each contain a string of length k — the code assigned to a group. Output \\"YES\\" for each group if the code can be rearranged to form one of the secret words, otherwise output \\"NO\\". **Example:** **Input:** ``` 3 dog cat act 2 tca dgo ``` **Output:** ``` YES YES ``` Note: In the example, \\"tca\\" can be rearranged to \\"cat\\" and \\"dgo\\" can be rearranged to \\"dog\\". Thus, the output is \\"YES\\" for both queries.","solution":"def can_form_secret_words(n, secret_words, q, group_codes): sorted_secret_words = {\\"\\".join(sorted(word)) for word in secret_words} results = [] for code in group_codes: sorted_code = \\"\\".join(sorted(code)) if sorted_code in sorted_secret_words: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"# Lena and the Forest Lena loves walking through forests. One day, she discovers an enchanted forest with n trees arranged in a straight line. She notices something magical about these trees: each tree has a unique power value associated with it. Lena decides to collect the power values of these trees under a specific condition. She can start at any tree and move to the next tree either to the left or right, but she can only move to a tree if it has a greater power value than the current tree. Lena\'s goal is to collect the maximum possible sum of distinct trees\' power values during her walk. Help Lena find the maximum possible sum of distinct trees\' power values she can collect by walking through the forest according to the given condition. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of trees in the forest. The second line of the input contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10^9), where pi is the power value of the i-th tree. Print a single integer — the maximum possible sum of distinct trees\' power values Lena can collect. # Example **Input 1:** ``` 5 3 2 5 4 8 ``` **Output 1:** ``` 18 ``` **Explanation:** In this example, Lena can start at the tree with power value 2, then move to the tree with power value 3, then move to the tree with power value 4, then to the tree with power value 5, and finally to the tree with power value 8. The sum of these power values is 2 + 3 + 4 + 5 + 8 = 22. **Input 2:** ``` 8 1 3 2 1 5 1 4 7 ``` **Output 2:** ``` 16 ``` **Explanation:** In this example, Lena can start at the tree with power value 1, move to the tree with power value 2, then move to the tree with power value 3, and finally to the tree with power value 7. The sum of these power values is 1 + 2 + 3 + 7 = 13.","solution":"def max_possible_sum(n, power_values): Returns the maximum possible sum of distinct trees\' power values Lena can collect. sorted_power_values = sorted(set(power_values)) return sum(sorted_power_values)"},{"question":"Given n non-negative integers, a permutation of which we must determine the number of \\"beautiful moments\\", defined for any pair of numbers if their sum is equal to a given target k. A pair (i, j) is considered beautiful if 1 ≤ i < j ≤ n and ai + aj = k. The first line contains two integers n (1 ≤ n ≤ 100) and k (0 ≤ k ≤ 200). The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 100). Print a single integer, the total number of beautiful moments. For example: Input: 5 10 1 9 3 7 5 Output: 2 Explanation: There are two pairs of indices (1, 2) and (3, 4) where the sum of the elements equals the target 10.","solution":"def beautiful_moments(n, k, arr): Returns the number of beautiful moments defined for any pair of numbers if their sum is equal to a given target k. Args: n: int - number of elements in the array. k: int - target sum. arr: List[int] - list of non-negative integers. Returns: int - the total number of beautiful moments. count = 0 # Check pairs (i, j) where 1 <= i < j <= n for i in range(n): for j in range(i + 1, n): if arr[i] + arr[j] == k: count += 1 return count"},{"question":"A large tree with a unique structure, called a \\"centroid tree,\\" is constructed as follows: 1. Select a node in the tree (the root) such that removing it splits the tree into disjoint subtrees, each having at most half of the total nodes. If there are multiple such centroids, select any one. 2. Form a new tree where this node becomes the parent (root) and each disjoint subtree becomes its child. Given a tree with `n` nodes labeled from `1` to `n` and `n-1` edges, find the centroid of the tree considering the following: 1. Start by reading an integer `n` (1 <= n <= 100,000), the number of nodes. 2. Next `n-1` lines, each containing two integers `u` and `v` (1 <= u, v <= n) representing an edge in the tree. Output a single integer, the label of the centroid node. **Note:** - Your solution should run efficiently even for the upper limits of `n`. Example: Input: ``` 8 1 2 1 3 2 4 2 5 4 6 4 7 7 8 ``` Output: ``` 2 ```","solution":"def find_centroid(n, edges): from collections import defaultdict, deque # Build adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Function to calculate the size of each subtree def dfs(u, parent): subtree_size[u] = 1 for v in tree[u]: if v != parent: dfs(v, u) subtree_size[u] += subtree_size[v] # Step 1: Perform DFS to calculate the size of each subtree subtree_size = [0] * (n + 1) dfs(1, -1) # Step 2: Perform DFS again to find the centroid def find_centroid_dfs(u, parent): for v in tree[u]: if v != parent and subtree_size[v] > n // 2: return find_centroid_dfs(v, u) return u return find_centroid_dfs(1, -1) # Wrapper function to parse input and call the main function def parse_input_and_find_centroid(input_str): lines = input_str.strip().split(\\"n\\") n = int(lines[0]) edges = [tuple(map(int, line.split())) for line in lines[1:]] return find_centroid(n, edges)"},{"question":"Alice is learning to play a strategy game where she has to collect resources and protect her base from enemies. She needs to know if she has gathered enough resources to last through several enemy attacks. The game represents resources and attacks as intervals on a number line. Each resource interval is a range of time during which resources are gathered, and each attack interval is a range of time when an enemy attack occurs. Alice wants to know if there is at least one interval of continuous time during which resources are collected that is completely free from any attacks. The first line of the input contains two integers r and a (1 ≤ r, a ≤ 100), the number of resource intervals and attack intervals, respectively. The next r lines each contain two integers start and end (0 ≤ start < end ≤ 106) representing the start and end times of a resource interval. The following a lines each contain two integers start and end (0 ≤ start < end ≤ 106) representing the start and end times of an attack interval. Output \\"YES\\" (without the quotes) if there is at least one resource interval completely free from any attack. Otherwise, print \\"NO\\" (without the quotes). Example: Input: 3 2 1 5 10 15 20 25 3 4 18 22 Output: YES","solution":"def is_safe_interval(r, a, resource_intervals, attack_intervals): Determines if there is at least one resource interval completely free from any attack. :param r: Number of resource intervals :param a: Number of attack intervals :param resource_intervals: List of tuples representing the start and end of resource intervals :param attack_intervals: List of tuples representing the start and end of attack intervals :return: \\"YES\\" if there\'s at least one safe interval, \\"NO\\" otherwise for res_start, res_end in resource_intervals: safe = True for att_start, att_end in attack_intervals: if not (res_end <= att_start or res_start >= att_end): safe = False break if safe: return \\"YES\\" return \\"NO\\""},{"question":"A company wants to analyze the browsing habits of its employees during work hours. They have recorded the amount of time each employee spent on various websites. Each employee can visit multiple websites, and the company has a log of all visits. Each visit is represented as a triplet (employee_id, website_id, duration), where ‘duration’ is the time spent (in seconds) on the website by the employee. The company\'s goal is to identify the most visited website by each employee and report the total time spent on that website. If an employee visited multiple websites for the same maximum duration, you can report any one of them. You are given a list of ‘m’ visits. Your task is to compute and report the most visited website and the total duration for each of the ‘n’ employees. If an employee has no website visits, you should report \\"No visits\\". The first line contains two integers: ‘n’ (1 ≤ n ≤ 100,000) – the number of employees and ‘m’ (0 ≤ m ≤ 500,000) – the number of visits. Each of the next ‘m’ lines contains three integers: employee_id (1 ≤ employee_id ≤ n), website_id (1 ≤ website_id ≤ 1,000,000), and duration (1 ≤ duration ≤ 10,000). Output in the following format: - For each employee from 1 to n, output a line in the format: \\"employee_id website_id total_duration\\". - If an employee has no website visits, output: \\"employee_id No visits\\". Example: Input: 4 5 1 2 300 1 3 200 2 2 500 3 3 100 3 2 100 Output: 1 2 300 2 2 500 3 2 100 4 No visits Explanation of the example: - Employee 1 visited website 2 for 300 seconds and website 3 for 200 seconds. The most visited website is 2 with a total duration of 300 seconds. - Employee 2 visited website 2 for 500 seconds. - Employee 3 visited both website 2 and website 3 for 100 seconds each. You can report either website 2 or website 3. Both are correct. - Employee 4 had no visits.","solution":"def most_visited_websites(n, m, visits): from collections import defaultdict # Dictionary to hold the total duration spent by each employee on each website employee_website_duration = defaultdict(lambda: defaultdict(int)) # Process the visit logs for visit in visits: emp_id, web_id, duration = visit employee_website_duration[emp_id][web_id] += duration result = [] for emp_id in range(1, n + 1): if emp_id not in employee_website_duration: result.append(f\\"{emp_id} No visits\\") else: most_visited_website, max_duration = max(employee_website_duration[emp_id].items(), key=lambda x: x[1]) result.append(f\\"{emp_id} {most_visited_website} {max_duration}\\") return result"},{"question":"The Bytechess Tournament is being organized, and many talented players are set to compete. Each participant has a distinct skill rating, which influences their likelihood of winning matches. The tournament is structured such that each player will compete against every other player exactly once. The outcome of each match between two players is determined purely by their skill ratings: the player with the higher skill rating always wins. Given an array of integers, where each element represents the skill rating of a player, you need to calculate the total number of matches each player wins throughout the tournament. For example, if there are 5 participants with skill ratings [2, 5, 3, 8, 7], the player with skill rating 8 will win all their matches, the player with skill rating 7 will win all matches except the one against the player with skill rating 8, and so forth. Write a program that takes an array of skill ratings and outputs the number of matches each player wins. **Input:** - The first line of input contains a single integer n (2 ≤ n ≤ 10^5), the number of players. - The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 10^9), which are the skill ratings of the players. **Output:** - Output n integers, where the i-th integer is the number of matches the i-th player wins. **Example:** **Input:** ``` 5 2 5 3 8 7 ``` **Output:** ``` 0 2 1 4 3 ``` **Explanation:** - Player with skill rating 2 loses all matches. - Player with skill rating 5 wins against players with ratings 2 and 3. - Player with skill rating 3 wins against the player with rating 2. - Player with skill rating 8 wins against all other players. - Player with skill rating 7 wins against players with ratings 2, 5, and 3.","solution":"def calculate_wins(skill_ratings): n = len(skill_ratings) wins = [0] * n for i in range(n): for j in range(n): if skill_ratings[i] > skill_ratings[j]: wins[i] += 1 return wins"},{"question":"Given a string s consisting of lowercase English letters, determine the minimum number of operations required to make all characters in the string distinct. In one operation, you can choose any character in the string and replace it with any other lowercase English letter. # Input - The input consists of multiple test cases. The first line contains an integer t (1 le t le 1000) — the number of test cases. - Each test case consists of a single line, containing a string s (1 le |s| le 200). # Output - For each test case, print a single integer — the minimum number of operations required to make all characters in the string distinct. # Example Input ``` 3 abc abca aaaa ``` Output ``` 0 1 3 ``` # Explanation 1. In the first test case, all characters are already distinct, so no operations are needed. 2. In the second test case, by changing the last \'a\' to any other letter, all characters will be distinct, so 1 operation is needed. 3. In the third test case, all characters are the same. We need to change 3 \'a\'s to other distinct letters, thus 3 operations are needed. # Note In each test case, determine the minimum number of changes necessary to ensure that no two characters are the same in the string. Remember that you are allowed to change any character to any other lowercase English letter during each operation.","solution":"def min_operations_to_make_unique(s): Calculate the minimum number of operations required to make all characters in the string distinct. # Frequency count of each character freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 # Sum of excess characters (characters appearing more than once) excess_chars = sum(count - 1 for count in freq.values()) return excess_chars def min_ops_for_multiple_cases(test_cases): results = [] for s in test_cases: results.append(min_operations_to_make_unique(s)) return results # Reading input and generating results def solution_function(input_string): input_lines = input_string.strip().split(\\"n\\") t = int(input_lines[0]) test_cases = input_lines[1:t+1] results = min_ops_for_multiple_cases(test_cases) return \\"n\\".join(map(str, results)) # Example usage: input_example = \\"3nabcnabcanaaaa\\" print(solution_function(input_example))"},{"question":"Captain Ahab is planning his next whaling expedition and needs to chart the shortest possible route to visit a specific set of islands in the Pacific Ocean. The islands are represented as nodes in a graph, and the routes between them are the edges with weights representing the distance. Given a graph with n nodes and m edges, where each node represents an island and each edge represents a route with a specified distance between two islands, help Captain Ahab determine the shortest path that visits all the given islands at least once. The path can start and end at any island. The first line contains two integers n and m (2 ≤ n ≤ 105; 0 ≤ m ≤ 105) — the number of islands and the number of routes between them. Each of the next m lines contains three integers ui, vi, d (1 ≤ ui, vi ≤ n; ui ≠ vi; 1 ≤ d ≤ 109) — the starting island ui, the ending island vi, and the distance d between them. The next line contains a single integer k (1 ≤ k ≤ n) — the number of islands that must be visited. The following line contains k integers, representing the islands\' indices (1 ≤ index ≤ n). Output the length of the shortest path that visits all the specified islands at least once. If it\'s impossible to visit all specified islands, output -1. Example: Input: 6 7 1 2 10 1 3 15 2 4 12 3 5 10 4 5 2 5 6 5 2 6 20 4 1 3 4 6 Output: 34","solution":"import heapq def dijkstra(graph, start, n): distances = [float(\'inf\')] * (n + 1) distances[start] = 0 queue = [(0, start)] while queue: current_distance, current_node = heapq.heappop(queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(queue, (distance, neighbor)) return distances def shortest_path_to_visit_islands(n, m, edges, k, islands): if not edges: return -1 graph = [[] for _ in range(n + 1)] for u, v, d in edges: graph[u].append((v, d)) graph[v].append((u, d)) island_distances = [[0] * k for _ in range(k)] for i in range(k): distances = dijkstra(graph, islands[i], n) for j in range(k): island_distances[i][j] = distances[islands[j]] all_visited = (1 << k) - 1 dp = [[float(\'inf\')] * k for _ in range(1 << k)] for i in range(k): dp[1 << i][i] = 0 for mask in range(1 << k): for u in range(k): if mask & (1 << u): for v in range(k): if mask & (1 << v) == 0: next_mask = mask | (1 << v) dp[next_mask][v] = min(dp[next_mask][v], dp[mask][u] + island_distances[u][v]) result = min(dp[all_visited][i] for i in range(k)) return result if result != float(\'inf\') else -1 # Example usage: n, m = 6, 7 edges = [ (1, 2, 10), (1, 3, 15), (2, 4, 12), (3, 5, 10), (4, 5, 2), (5, 6, 5), (2, 6, 20) ] k = 4 islands = [1, 3, 4, 6] print(shortest_path_to_visit_islands(n, m, edges, k, islands))"},{"question":"Pavel is a big fan of puzzles. One day, he came across a very interesting grid of characters and decided to create a game out of it. The grid consists of n rows and m columns, where each cell contains a lowercase English letter. Pavel\'s task is to rearrange the letters within each row such that each resulting row is lexicographically smallest compared to any lexicographical permutation of the original row. However, there is a twist: Pavel cannot rearrange the letters across different rows; he can only sort the characters within the same row. Can you help Pavel achieve his objective? The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. The next n lines each contain a string of length m, representing the grid. Output the resulting grid after rearranging the letters in each row to get the lexicographically smallest row. # Example Input: ``` 3 4 bcda gfec adcb ``` Output: ``` abcd cefg abcd ``` In the given example, each row of the grid is sorted to form the lexicographically smallest possible row.","solution":"def lexicographically_smallest_rows(n, m, grid): Returns the grid where each row is sorted lexicographically. result = [] for row in grid: sorted_row = \'\'.join(sorted(row)) result.append(sorted_row) return result"},{"question":"There are n workers and m tasks to be completed. Each task requires a specific set of skills, and each worker possesses a specific set of skills. You need to determine if it\'s possible to assign each worker to exactly one task such that each task\'s skill requirements are met by the worker assigned to that task. If it\'s possible, return \\"YES\\", otherwise return \\"NO\\". The first line contains two integers n and m (1 ≤ n, m ≤ 1000). The next n lines describe the skills of each worker. Each line starts with an integer k (0 ≤ k ≤ 100), representing the number of skills that the worker has, followed by k integers representing the skills themselves. The next m lines describe the skills required for each task. Each line starts with an integer l (0 ≤ l ≤ 100), representing the number of skills required for the task, followed by l integers representing the skills required. Print \\"YES\\" if it is possible to assign workers such that each worker is assigned to exactly one task and each task\'s requirements are met, otherwise print \\"NO\\". Example: Input: 3 3 2 1 2 3 2 3 4 1 5 1 1 3 2 3 4 1 5 Output: YES","solution":"def can_assign_workers_to_tasks(n, m, worker_skills, task_skills): matched_tasks = set() for task in task_skills: task_set = set(task) for i, worker_skill in enumerate(worker_skills): if i in matched_tasks: # If this worker is already matched to a task, skip it continue # Check if worker can perform this task if task_set.issubset(set(worker_skill)): matched_tasks.add(i) break return \\"YES\\" if len(matched_tasks) == m else \\"NO\\" # Example usage if __name__ == \\"__main__\\": n, m = 3, 3 worker_skills = [ [1, 2], [2, 3, 4], [5] ] task_skills = [ [1], [2, 3, 4], [5] ] print(can_assign_workers_to_tasks(n, m, worker_skills, task_skills)) # Output: YES"},{"question":"The Kingdom of Montavalon is famous for its beautiful gardens and intricate water distribution systems. The capital city of Montavalon has decided to revamp its garden watering system. The city\'s garden consists of n segments aligned in a single row, where each segment can either receive water from its directly connected segment or from water pumps installed specifically. However, due to budget constraints, they want to minimize the number of water pumps needed while ensuring that every segment receives water. The watering plan is as follows: - A water pump can only provide water to segment `i` if it adds water directly to `i` or if segment `i` can receive water from any of its neighboring segments `i-1` or `i+1`. - The first and last segments are special and can only receive water from being directly connected to their nearest neighboring segment or a pump placed on them directly (no wrapping around). You need to determine the minimum number of water pumps required to ensure that water reaches every segment of the garden. # Input The first line contains an integer `n` (1 ≤ n ≤ 10^5), denoting the number of garden segments. The second line contains a binary string of length `n`, where each character represents whether a segment has an existing direct water connection (`\'1\'`) or not (`\'0\'`). # Output Print a single integer, the minimum number of water pumps required. # Example Input ``` 5 01010 ``` Output ``` 2 ``` Input ``` 7 0000000 ``` Output ``` 3 ```","solution":"def min_pumps_needed(n, garden): Determines the minimum number of water pumps required to ensure that every garden segment receives water. Parameters: n (int): The number of garden segments. garden (str): A binary string representing the garden segments, where \'1\' indicates a segment with a direct water connection and \'0\' indicates no direct water connection. Returns: int: The minimum number of water pumps required. pumps_needed = 0 i = 0 while i < n: if garden[i] == \'1\': # If the segment already has a direct connection, move to the next segment i += 1 continue # Place a pump here or on the next segment to cover this segment # It will cover the current segment, next segment, and the segment after the next pumps_needed += 1 # Move to the segment after the next as current and next segment are covered i += 3 return pumps_needed"},{"question":"Vera is a software developer who often encounters the challenge of merging calendar events. Each event is represented as a pair of integers [start, end], where start and end are the start and end times of the event, respectively. Two events [a, b] and [c, d] are considered overlapping if c ≤ b and a ≤ d. Vera wants to know the minimum number of non-overlapping time intervals that can fully cover all her events. Your task is to implement a function to merge all overlapping events and return the minimum number of non-overlapping intervals. If an event overlaps with another, it should be merged to form one continuous interval. The first line contains a single integer n (1 ≤ n ≤ 10^4) — the number of events in Vera\'s calendar. Each of the next n lines contains two integers start and end (0 ≤ start < end ≤ 10^9), representing the start and end times of an event. Print an integer — the number of non-overlapping intervals needed to cover all events. # Input: ``` 6 1 3 2 6 8 10 15 18 17 20 5 7 ``` # Output: ``` 3 ``` In this example, the events are: - [1, 7] (merged from [1, 3], [2, 6], [5, 7]) - [8, 10] - [15, 20] (merged from [15, 18], [17, 20]) So, Vera needs a minimum of 3 non-overlapping intervals: [1, 7], [8, 10], and [15, 20].","solution":"def min_non_overlapping_intervals(events): if not events: return 0 # Sort events based on the start time events.sort(key=lambda x: x[0]) # Initialize the list to hold the merged intervals merged = [events[0]] for i in range(1, len(events)): if events[i][0] <= merged[-1][1]: # Overlapping intervals merged[-1][1] = max(merged[-1][1], events[i][1]) else: merged.append(events[i]) return len(merged)"},{"question":"You are given a string consisting of lowercase English letters and you need to perform two types of operations: 1. Replace a character in the string with another character. 2. Find the lexicographically smallest substring of a given length. The operations are given in a sequence, and you need to output the results of the substring operations (if any). The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100,000) — the length of the string and the number of operations, respectively. The second line contains the initial string of length n. The following q lines describe the operations. Each operation is given in one of the following formats: - \\"1 i c\\", where 1 ≤ i ≤ n and c is a lowercase English letter, means to replace the i-th character of the string with c. - \\"2 l\\", where 1 ≤ l ≤ n, means to find the lexicographically smallest substring of length l in the current string. For each operation of the second type, output the lexicographically smallest substring of the given length. Input example: ``` 6 5 abcdef 2 3 1 3 x 2 3 2 2 1 1 z ``` Output example: ``` abc abx ab ``` Explanation of the example: 1. The first operation \\"2 3\\" requires finding the lexicographically smallest substring of length 3 in \\"abcdef\\", which is \\"abc\\". 2. The second operation \\"1 3 x\\" replaces the third character \'c\' with \'x\', making the string \\"abxdef\\". 3. The third operation \\"2 3\\" requires finding the lexicographically smallest substring of length 3 in \\"abxdef\\", which is \\"abx\\". 4. The fourth operation \\"2 2\\" requires finding the lexicographically smallest substring of length 2 in \\"abxdef\\", which is \\"ab\\". 5. The fifth operation \\"1 1 z\\" replaces the first character \'a\' with \'z\', making the string \\"zbxdef\\".","solution":"def process_operations(n, q, initial_string, operations): Processes the given operations on the string and returns the results for operations of type 2. Args: n : int : Length of the initial string. q : int : Number of operations. initial_string : str : The initial string. operations : List[str] : List of operations to be performed. Returns: List[str] : Results of operations of type 2. result = [] s = list(initial_string) # Working with list for easier mutability for operation in operations: op = operation.split() if op[0] == \'1\': # Replace character operation i = int(op[1]) - 1 c = op[2] s[i] = c elif op[0] == \'2\': # Find lexicographically smallest substring operation l = int(op[1]) min_substring = \'\'.join(s[:l]) for i in range(1, len(s) - l + 1): current_substring = \'\'.join(s[i:i+l]) if current_substring < min_substring: min_substring = current_substring result.append(min_substring) return result"},{"question":"A train is traveling along a track and needs to stop at certain stations along the way. You are tasked with writing a program that will help calculate the minimum number of stops the train needs to make to travel from its starting position to its destination. You are given an integer array representing the maximum distance the train can travel without stopping at each station. The train starts at station 1 (index 0) and needs to reach the last station (index n-1), stopping at other stations in between if necessary. Write a function that calculates the minimum number of stops needed for the train to reach the final station. If it\'s not possible to reach the last station, return -1. The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of stations. The second line contains n space-separated integers a1, a2, ..., an (0 ≤ a_i ≤ 10^5) — the maximum distance the train can travel from each station. If the train can only travel from station i to station (i + a[i]), it\'s not required for the train to stop at every station in between. Output a single integer - the minimum number of stops the train needs to make to reach the last station, or -1 if it is not possible. Example: Input: 5 2 3 1 1 4 Output: 2 In this example, the train can start at station 1, skip station 2, and stop at station 3. Then it can travel from station 3 to the final station, making a total of two stops.","solution":"def min_stops_to_reach_destination(distances): n = len(distances) if n == 1: return 0 max_reach = 0 steps = 0 last_stop = 0 for i in range(n): if i > max_reach: return -1 max_reach = max(max_reach, i + distances[i]) if i == last_stop: if i != n - 1: steps += 1 last_stop = max_reach return steps # Example usage # distances = [2, 3, 1, 1, 4] # result = min_stops_to_reach_destination(distances) # print(result) # Output: 2"},{"question":"Stanley loves puzzles and has discovered a new type of number which he calls \'circular primes\'. A circular prime is a prime number that remains prime under all rotations of its digits. For example, 197 is a circular prime because all of its rotations (197, 971, and 719) are prime. Stanley wonders how many circular primes exist below a given number n. Can you help him find out? The first line contains a single integer n (2 ≤ n ≤ 10^6) — the upper limit (exclusive) for finding circular primes. Print a single integer that represents the count of circular primes below n. Example: For the first test case n=100, the circular primes below 100 are 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, and 79. So the answer should be 12. In the second sample n=10, the circular primes below 10 are 2, 3, 5, and 7. So the answer should be 4.","solution":"def is_prime(num): Check if the given number is a prime. if num < 2: return False if num == 2 or num == 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def get_rotations(num): Generate all rotations of a given number. num_str = str(num) rotations = [] for i in range(len(num_str)): rotation = int(num_str[i:] + num_str[:i]) rotations.append(rotation) return rotations def is_circular_prime(num): Check if the given number is a circular prime. rotations = get_rotations(num) for rotation in rotations: if not is_prime(rotation): return False return True def count_circular_primes(n): Count the number of circular primes below the given number n. count = 0 for i in range(2, n): if is_circular_prime(i): count += 1 return count"},{"question":"Rita loves stars and number sequences. She recently discovered a sequence S of length n that is formed using integers between 1 and k (inclusive). A special star sequence is defined as a sequence where the sum of every continuous subsequence of length m is divisible by a given number d. Now, Rita wants to check if a given sequence S of length n contains such a special star sequence of length m. Help Rita by writing a program that checks this. The first line contains four integers n, m, k, and d (1 ≤ m ≤ n ≤ 100, 1 ≤ k ≤ 100, 1 ≤ d ≤ 100). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ k), representing the sequence S. Output \\"YES\\" if there exists a continuous subsequence of length m whose sum is divisible by d. Otherwise, output \\"NO\\". Sample Input: 5 3 10 5 2 3 5 1 10 Sample Output: YES Explanation: In the sample, the subsequence [3, 5, 1] has a sum of 9, which is divisible by 5. Hence the output is \\"YES\\".","solution":"def has_special_star_sequence(n, m, k, d, S): Determines if there exists a continuous subsequence of length m in S whose sum is divisible by d. Parameters: n (int): Length of the sequence S m (int): Length of the subsequence k (int): Maximum value in the sequence S d (int): The number by which the sum of the subsequence should be divisible S (list): The sequence of integers Returns: str: \\"YES\\" if such a subsequence exists, otherwise \\"NO\\" for i in range(n - m + 1): if sum(S[i:i+m]) % d == 0: return \\"YES\\" return \\"NO\\""},{"question":"A group of archeologists is exploring an ancient cave system. The cave has n chambers connected by m paths. Their goal is to map out the system by ensuring every chamber is reachable from any other chamber directly or indirectly. It\'s crucial that the group can efficiently travel between any two chambers. The cave system may initially be disconnected, so the archeologists need to determine the minimum number of additional paths required to make the cave system fully connected. The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 50,000) — the number of chambers and the number of paths, respectively. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating that there is a path between chamber u and chamber v. Output a single integer — the minimum number of additional paths needed to make the entire cave system connected. For instance, consider the cave system in the following test case with n = 5 and m = 3: ``` 5 3 1 2 1 3 4 5 ``` In this example, there are two disconnected components: {1, 2, 3} and {4, 5}. You would need at least one additional path to connect these two components. Hence, the output should be 1. Another valid output could be connecting chamber 3 to chamber 4 or chamber 2 to chamber 5, resulting in the same additional path count.","solution":"def find_parent(parent, i): if parent[i] == i: return i else: return find_parent(parent, parent[i]) def union(parent, rank, x, y): xroot = find_parent(parent, x) yroot = find_parent(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimum_additional_paths_needed(n, m, paths): parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) for u, v in paths: u -= 1 # Adjusting index to be zero-based v -= 1 # Adjusting index to be zero-based x = find_parent(parent, u) y = find_parent(parent, v) if x != y: union(parent, rank, x, y) # Find the number of components number_of_components = len(set(find_parent(parent, i) for i in range(n))) return number_of_components - 1"},{"question":"You are given a grid of size n times m filled with numbers. You need to check if there exists a path in the grid starting from the top-left corner (1, 1) to the bottom-right corner (n, m) such that the sum of the numbers along the path is equal to a given value k. You can only move right or down from any cell in the grid. Write a function that determines if such a path exists. The first line of input contains an integer t (1 leq t leq 100) — the number of test cases. The following lines contain the description of each test case. The first line of each test case contains three integers n, m, and k (1 leq n, m leq 100; 0 leq k leq 10^9). Each of the next n lines contain m integers, representing the grid. For each test case, print \\"YES\\" if there exists such a path, otherwise print \\"NO\\". # Example Input: ``` 2 2 2 5 1 2 3 4 3 3 12 1 2 3 4 5 6 7 8 9 ``` Output: ``` YES NO ``` In the first test case, there exists a path (1, 1) -> (1, 2) -> (2, 2) with the sum 1 + 2 + 4 = 7, so the answer is \\"YES\\". In the second test case, there is no path with the sum 12.","solution":"def path_with_sum_exists(grid, n, m, k): dp = [[None] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1] == k def process_test_cases(t, cases): results = [] for i in range(t): n, m, k = cases[i][0] grid = cases[i][1] if path_with_sum_exists(grid, n, m, k): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alice and Bob are playing a game involving boxes and balls. There are n boxes aligned in a row, and some of these boxes contain a number of balls. Alice and Bob take turns, starting with Alice. On each turn, the player must choose one of the boxes that contains at least one ball and remove either one ball or two balls from that box. If a player cannot make a move because there are no boxes with balls left, that player loses the game. Given the initial number of balls in each box, determine if Alice can guarantee a win, assuming both players play optimally. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of boxes. - The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000), where ai is the number of balls in the i-th box. Output a single string \\"Alice\\" if Alice can guarantee a win, or \\"Bob\\" otherwise. Example: Input: 5 1 2 0 4 3 Output: Alice Explanation: Alice can win by taking 1 ball from the 1st box on her first turn. After this, the number of balls in each box is 0, 2, 0, 4, 3. No matter what Bob does on his turn, Alice can always respond in a way that maintains her advantage and eventually forces Bob into a position where he has no valid moves left.","solution":"def game_winner(n, balls): Determines if Alice can guarantee a win, assuming both players play optimally. :param n: Number of boxes :param balls: List containing the number of balls in each box :return: \\"Alice\\" if Alice can guarantee a win, otherwise \\"Bob\\" xor_sum = 0 for ball_count in balls: xor_sum ^= ball_count return \\"Alice\\" if xor_sum != 0 else \\"Bob\\""},{"question":"You are given a set of containers, each container can hold a limited weight. Your task is to determine if you can distribute a given list of items into the containers such that each container\'s weight limit is not exceeded. Each container has a maximum weight it can hold, and each item has a specific weight. You must distribute the items among the containers respecting their weight limits. First line contains two integers n and m (1 ≤ n, m ≤ 50) — the number of containers and the number of items respectively. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the maximum weight each container can hold. The third line contains m integers v1, v2, ..., vm (1 ≤ vi ≤ 1000) — the weights of the items. Output \\"YES\\" (without quotes) if it is possible to distribute the items among the containers without exceeding the weight limits. Otherwise, output \\"NO\\". Example: ``` Input: 3 5 10 5 15 4 3 6 6 3 Output: YES Input: 2 3 8 7 6 6 6 Output: NO ``` Explanation: In the first example, the containers can be filled as follows: - Container 1: 4, 3, and 3. - Container 2: 6. - Container 3: 6. In the second example, there is no way to distribute the items into the containers without exceeding their limits.","solution":"def can_distribute_items(n, m, container_limits, items): Determines if the items can be distributed into the containers without exceeding their weight limits. :param n: Number of containers :param m: Number of items :param container_limits: List of maximum weights each container can hold :param items: List of item weights :return: \\"YES\\" if it is possible to distribute items without exceeding limits, \\"NO\\" otherwise container_limits.sort(reverse=True) items.sort(reverse=True) for item in items: placed = False for i in range(n): if container_limits[i] >= item: container_limits[i] -= item placed = True break if not placed: return \\"NO\\" return \\"YES\\""},{"question":"Alex loves solving mathematical puzzles and he recently came across an interesting one. Given an integer n, he needs to find the smallest positive integer k such that the sum of the digits of k is equal to n. If there are multiple such integers, he wants to find the smallest one in terms of numerical value. For instance, if n = 10, k could be 19 or 28, but 19 is smaller in terms of numerical value. Your task is to write a function that, given an integer n, finds the smallest integer k whose sum of digits equals n. Input: The input consists of a single integer n (1 ≤ n ≤ 1000). Output: Output the smallest integer k whose sum of digits equals n. Examples: Input: 10 Output: 19 Input: 2 Output: 2 Input: 13 Output: 49 Explanation: For n = 10, the smallest k is 19 since the digits 1 and 9 sum to 10. For n = 2, k is already 2 as it sums to itself. For n = 13, the smallest k is 49, summing the digits 4 and 9 to get 13.","solution":"def smallest_integer_with_digit_sum(n): Returns the smallest integer k such that the sum of the digits of k is equal to n. def sum_of_digits(num): return sum(int(digit) for digit in str(num)) k = 1 while sum_of_digits(k) != n: k += 1 return k"},{"question":"There are n students in a class, and each student has a unique ID between 1 and n. The students want to form study groups, but the school has a strict policy that each group must be a contiguous subsequence of student IDs. This means the IDs in each group must form a sequence of consecutive integers. Any student can be a member of one and only one group. One day, the teacher decided to surprise the students with a new challenge. She presented a list of pairs of students who are friends. Each student can be part of multiple pairs, and the friendships are bidirectional, i.e., if student a is friends with student b, then student b is also friends with student a. The goal is to form the minimum number of groups such that in each group, every student is friends with at least one other student in the same group. Help the teacher determine the minimum number of groups needed to satisfy this condition. # Input - The first line contains two integers n and m (1 le n le 100000, 0 le m le 200000) — the number of students and the number of pairs of friends, respectively. - The next m lines each contain two integers u and v (1 le u, v le n) representing a pair of students who are friends. # Output - Print one integer — the minimum number of groups needed. # Example Input ``` 6 5 1 2 2 3 4 5 5 6 1 5 ``` Output ``` 2 ``` Explanation - One possible solution is forming two groups: {1, 2, 3, 4, 5, 6} or {1, 2, 3} and {4, 5, 6}. Since every student in each group is friends with at least one other student in the same group. In this case, the answer is 2 because it\'s not possible to form a single contiguous group where every student in the group is friends with at least one other student. If the friendship group cannot cover all students, it\'s recommended to divide them minimally. In this example, {1, 2, 3} and {4, 5, 6} are the optimal grouping which ensures minimum groups and optimal friendship connections.","solution":"def min_groups_needed(n, m, pairs): from collections import defaultdict, deque def bfs(start, visited, adj_list): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) adj_list = defaultdict(list) for u, v in pairs: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (n + 1) groups_count = 0 for student in range(1, n + 1): if not visited[student]: bfs(student, visited, adj_list) groups_count += 1 return groups_count"},{"question":"You are given an N x N grid initially filled with zeros. You need to perform a series of operations on this grid. Each operation consists of providing the coordinates of the top-left corner and bottom-right corner of a sub-grid, and you need to increment every element within this sub-grid by 1. Write a program that performs the operations and then prints the final state of the grid. # Input - The first line contains an integer N (1 ≤ N ≤ 1000), the size of the grid. - The second line contains an integer M (1 ≤ M ≤ 100,000), the number of operations to perform. - Each of the next M lines contains four integers x1, y1, x2, y2 (1 ≤ x1, y1, x2, y2 ≤ N), representing the coordinates of the top-left and bottom-right corners of a sub-grid. # Output - Print the final state of the N x N grid. # Example Input ``` 3 2 1 1 2 2 2 2 3 3 ``` Output ``` 1 1 0 1 2 1 0 1 1 ``` # Explanation Initially, the grid is: ``` 0 0 0 0 0 0 0 0 0 ``` After the first operation (1, 1, 2, 2), the grid becomes: ``` 1 1 0 1 1 0 0 0 0 ``` After the second operation (2, 2, 3, 3), the grid becomes: ``` 1 1 0 1 2 1 0 1 1 ``` Note: The grid uses 1-based indexing for the input, but the actual implementation should handle 0-based indexing as typical in Python or similar languages.","solution":"def increment_subgrid(N, M, operations): # Initialize the grid with zeros grid = [[0] * N for _ in range(N)] # Perform the operations for op in operations: x1, y1, x2, y2 = op for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): grid[i][j] += 1 return grid def print_grid(grid): for row in grid: print(\\" \\".join(map(str, row)))"},{"question":"The city planning committee wants to construct new bus stops in the city to serve all residential areas. There are N residential areas, and each area is located at coordinate (x, y) on a 2D plane. A bus stop can serve all residential areas located at the same x-coordinate or the same y-coordinate as the bus stop itself. Your task is to find the minimum number of bus stops required to serve all residential areas. The first line contains one integer N (1 ≤ N ≤ 10^5) - the number of residential areas. The next N lines each contain two integers x and y (-10^9 ≤ x, y ≤ 10^9) - the coordinates of each residential area. Output a single integer - the minimum number of bus stops required to serve all residential areas. Example: Input: 3 1 2 2 3 1 5 Output: 2 Explanation: Placing a bus stop at x=1 and y=3 will serve all areas. The bus stop at x=1 serves the areas (1, 2) and (1, 5), while the bus stop at y=3 serves the area (2, 3).","solution":"def min_bus_stops(N, coordinates): Returns the minimum number of bus stops required to serve all residential areas. x_coords = set() y_coords = set() for x, y in coordinates: x_coords.add(x) y_coords.add(y) # The minimum number of bus stops will be the minimum between unique x-coordinates and y-coordinates return min(len(x_coords), len(y_coords))"},{"question":"You are given an array of n integers (2 ≤ n ≤ 1000). Your task is to find the maximum possible sum of a subsequence of the array such that no two elements of the subsequence are adjacent in the original array. The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10000). Output the maximum possible sum of a subsequence with the condition that no two chosen elements are adjacent in the original array. For example: Input: 6 3 2 5 10 7 Output: 15 Explanation: The optimal subsequence is [3, 10] or [2, 10, 7] with a sum of 15.","solution":"def max_non_adjacent_sum(arr): Returns the maximum possible sum of a subsequence of `arr` such that no two elements of the subsequence are adjacent. incl = 0 # Maximum sum including the previous element excl = 0 # Maximum sum excluding the previous element for num in arr: new_excl = max(incl, excl) # Current max excluding this element incl = excl + num # Current max including this element excl = new_excl # Update excl to new_excl return max(incl, excl)"},{"question":"You are given an array of integers and a set of queries. For each query, you need to determine if it is possible to form a subsequence of the array whose sum is equal to a given target. If it is possible, print \\"YES\\"; otherwise, print \\"NO\\". A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. The first line contains two integers n and q (1 le n le 10^5, 1 le q le 10^4) — the number of elements in the array and the number of queries, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^4) — the elements of the array. The next q lines each contain a single integer t (1 le t le 10^9) — the target sum for the query. For each query, print \\"YES\\" if it is possible to form a subsequence of the array that sums up to t, and \\"NO\\" otherwise. Example input: ``` 5 3 1 2 3 4 5 5 11 20 ``` Example output: ``` YES YES NO ``` Explanation: - For t = 5, you can select the subsequence [5]. - For t = 11, you can select the subsequence [5, 4, 2]. - For t = 20, it is not possible to form such a subsequence.","solution":"def is_subsequence_sum_possible(n, q, array, queries): from itertools import chain, combinations def possible_sums(nums): Generate all possible sums of subsequences from a given list of numbers. result = set() for subset in chain(*map(lambda x: combinations(nums, x), range(len(nums) + 1))): result.add(sum(subset)) return result # Generate all possible sums from the array subset_sums = possible_sums(array) # Process each query to check if the target sum is in subset_sums results = [] for target in queries: if target in subset_sums: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example input n = 5 q = 3 array = [1, 2, 3, 4, 5] queries = [5, 11, 20] # Run function output = is_subsequence_sum_possible(n, q, array, queries) print(\\"n\\".join(output)) # Expected: YES, YES, NO"},{"question":"John loves organizing his book collection by genre and author. Each time he gets a new book, he places it at the end of the list according to its genre. If he already has another book by the same author in the genre shelf, he moves the new book to follow the last book he already has by this author. Otherwise, he just places it at the end of the genre shelf. Given a list of books genres and authors, simulate the order in which John organizes his books. The first line contains an integer n (1 ≤ n ≤ 200,000) — the number of books John has. Each of the next n lines contains two space-separated strings: genre and author, describing the genre and the author of a book. Both strings are non-empty sequences of lowercase English letters and have a maximum length of 20. For each genre, print the list of authors of the books in the order they are arranged on the shelf. In the first test case, if John receives books in the following order: fantasy rowling scifi asimov fantasy tolkien fantasy rowling The resulting shelves for each genre would be: fantasy: rowling tolkien rowling scifi: asimov","solution":"def organize_books(n, book_list): Organizes books by genre and author as described in the problem statement. Args: n (int): The number of books. book_list (list of tuples): A list containing tuples with genre and author of each book. Returns: dict: A dictionary where the key is the genre and the value is a list of authors in their respective order. from collections import defaultdict genres = defaultdict(list) last_positions = defaultdict(lambda: defaultdict(int)) for idx in range(n): genre, author = book_list[idx] if author in last_positions[genre]: insert_position = last_positions[genre][author] genres[genre].insert(insert_position + 1, author) else: genres[genre].append(author) insert_position = len(genres[genre]) - 1 # update all positions for this author for i in range(insert_position + 1, len(genres[genre])): if genres[genre][i] == author: last_positions[genre][author] = i return {genre: genres[genre] for genre in sorted(genres)}"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation any number of times: choose any subsequence of the string and remove it. Your goal is to determine the minimum number of operations required to remove all characters from the string. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, the string \\"abc\\" has the subsequences \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"ac\\", \\"bc\\", and \\"abc\\". The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 200) — the string for which you need to determine the minimum number of operations. For each test case, print one integer — the minimum number of operations required to remove all characters from the string. Example input: ``` 2 ababa aaabbb ``` Example output: ``` 2 2 ``` Explanation: - In the first test case \\"ababa\\", you can remove \\"aaa\\" in one operation, and then remove \\"bb\\" in another operation, totaling 2 operations. - In the second test case \\"aaabbb\\", you can remove \\"aaa\\" in one operation and \\"bbb\\" in another, also totaling 2 operations.","solution":"def min_operations_to_remove_all_chars(t, strings): results = [] for s in strings: distinct_characters = set(s) results.append(len(distinct_characters)) return results"},{"question":"You are given an undirected graph with n nodes and m edges. Each node is labeled with a unique integer from 1 to n. The graph may contain multiple edges between the same pair of nodes and self-loops. Your task is to determine whether the graph is connected or not. A graph is connected if there is a path between any pair of distinct nodes. Input: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) – the number of nodes and the number of edges, respectively. - The following m lines each contain two integers u and v (1 ≤ u, v ≤ n) representing an edge between nodes u and v. Output: - Print \\"YES\\" if the graph is connected, otherwise print \\"NO\\". Example input: ``` 4 3 1 2 2 3 3 4 ``` Example output: ``` YES ``` Example input: ``` 4 2 1 2 3 4 ``` Example output: ``` NO ```","solution":"def is_connected(n, m, edges): from collections import defaultdict, deque if n == 1: return True # Create adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # BFS to check connectivity visited = set() queue = deque([1]) # Start from node 1 (assuming nodes are labeled from 1 to n) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in adj_list[node]: if neighbor not in visited: queue.append(neighbor) return len(visited) == n def check_graph_connected(n, m, edges): if is_connected(n, m, edges): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a grid of size n times m filled with characters. Each cell in the grid contains either \'0\' or \'1\'. You can only walk from a cell to its neighboring cell in one of the four directions: up, down, left, and right. The walk is considered valid if the absolute difference between the number of \'0\'s and \'1\'s encountered in the path is at most one. Write a program to find the minimum number of steps required to walk from the top-left corner of the grid to the bottom-right corner. If it\'s not possible, output -1. The first line of the input contains two integers n and m (1 le n, m le 1000) — the number of rows and columns of the grid, respectively. The next n lines contain m characters each (either \'0\' or \'1\'), representing the grid. Output a single integer — the minimum number of steps required to reach the bottom-right corner from the top-left corner, or -1 if it\'s not possible. Example: Input: 3 3 010 001 100 Output: 4 In this example, one possible path is (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2), which requires 4 steps. The difference between the number of \'0\'s and \'1\'s is 1, which is valid as per the conditions. Another valid path would be directly downward and then all the way to the right, but it also results in 4 steps.","solution":"from collections import deque def is_valid_path(grid, n, m): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def bfs(): queue = deque([(0, 0, 0, 0)]) # (row, col, count_0, count_1) visited = set([(0, 0, 0, 0)]) while queue: r, c, count_0, count_1 = queue.popleft() if r == n-1 and c == m-1: if abs(count_0 - count_1) <= 1: return True for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m: next_count_0 = count_0 + (1 if grid[nr][nc] == \'0\' else 0) next_count_1 = count_1 + (1 if grid[nr][nc] == \'1\' else 0) if abs(next_count_0 - next_count_1) <= 1 and (nr, nc, next_count_0, next_count_1) not in visited: queue.append((nr, nc, next_count_0, next_count_1)) visited.add((nr, nc, next_count_0, next_count_1)) return False return bfs() def min_steps(grid): n = len(grid) m = len(grid[0]) if not is_valid_path(grid, n, m): return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) visited = set([(0, 0)]) while queue: r, c, steps = queue.popleft() if r == n-1 and c == m-1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited: queue.append((nr, nc, steps + 1)) visited.add((nr, nc)) return -1"},{"question":"Alex has a deep interest in the Fibonacci sequence and prime numbers. Recently, Alex came across an interesting problem and needs your help to solve it. The Fibonacci sequence is defined as follows: - ( F(0) = 0 ) - ( F(1) = 1 ) - ( F(n) = F(n-1) + F(n-2) ) for ( n geq 2 ) A number is called a \\"Fibonacci Prime\\" if it is both a Fibonacci number and a prime number. Given an integer ( k ), determine if the ( k )-th Fibonacci number is a Fibonacci Prime or not. Write a program that: 1. Computes the ( k )-th Fibonacci number. 2. Checks if the ( k )-th Fibonacci number is a prime. 3. Prints \\"Yes\\" if the ( k )-th Fibonacci number is a Fibonacci Prime, and \\"No\\" otherwise. # Input: - A single integer ( k ) ( ( 1 leq k leq 10^5 ) ) specifying the position in the Fibonacci sequence. # Output: - Print \\"Yes\\" if the ( k )-th Fibonacci number is a Fibonacci Prime, otherwise print \\"No\\". # Examples: - Input: `5` - Output: `Yes` - Input: `10` - Output: `No` **Note:** - The Fibonacci sequence starts with F(0) = 0, F(1) = 1, F(2) = 1, F(3) = 2, F(4) = 3, F(5) = 5, etc. - Prime numbers are numbers greater than 1 that have no divisors other than 1 and themselves.","solution":"def fibonacci(n): Function to calculate the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b def is_prime(n): Function to determine if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_fibonacci_prime(k): Function to determine if the k-th Fibonacci number is a Fibonacci Prime. Prints \\"Yes\\" if it is, otherwise \\"No\\". fib_k = fibonacci(k) if is_prime(fib_k): print(\\"Yes\\") else: print(\\"No\\")"},{"question":"You are given an array of integers representing the heights of stacks of boxes. You can perform the following operation any number of times: choose any stack and remove the box at the top of the stack. Your task is to equalize the heights of all the stacks with the minimum number of operations. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of stacks. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the stacks. Print a single integer representing the minimum number of operations needed to make all the stacks the same height. In the first sample, there are 3 stacks of heights 1, 2, and 3. We can remove the top box from the third stack to make all stacks have height 2. Thus, the minimum number of operations needed is 1. In the second sample, there are 5 stacks of identical heights 4. Since all stacks are already of the same height, the minimum number of operations needed is 0.","solution":"def min_operations_to_equalize_stacks(n, heights): Returns the minimum number of operations required to equalize the heights of stacks. min_height = min(heights) operations = sum(height - min_height for height in heights) return operations # Example usage: # n = 3 # heights = [1, 2, 3] # The function call would be: # print(min_operations_to_equalize_stacks(n, heights)) # Which would output: # 3 (result of making all stacks height equal to minimum height 1)"},{"question":"You are given an array of integers representing the grades of students in a particular class. The school follows a specific grading system where the final grade should be a multiple of 5, and grades are rounded up to the nearest multiple of 5 if the difference between the grade and the next multiple of 5 is less than 3. However, if the grade is less than 38, no rounding occurs as the passing mark is 40 and rounding is unnecessary. Your task is to convert each student\'s grade according to these rules and return the updated list of grades. The first line contains a single integer t (1 ≤ t ≤ 10^4) – the number of test cases. Each test case consists of two lines: - The first line contains a single integer n (1 ≤ n ≤ 100) – the number of students. - The second line contains n integers separated by spaces (0 ≤ grade_i ≤ 100) representing the initial grades of the students. For each test case, output the final grades after applying the rounding rules. For example: Input: 2 4 73 67 38 33 3 88 92 37 Output: 75 67 40 33 90 92 37 Explanation: In the first test case: - The first grade is 73 which rounds up to 75. - The second grade is 67 which does not round up. - The third grade is 38 which rounds up to 40. - The fourth grade is 33 which doesn\'t change as it is less than 38. In the second test case: - The first grade is 88 which rounds up to 90. - The second grade is 92 which does not round up. - The third grade is 37 which doesn\'t change as it is less than 38.","solution":"def round_grades(test_cases): results = [] for case in test_cases: n, grades = case rounded_grades = [] for grade in grades: if grade < 38: rounded_grades.append(grade) else: next_multiple_of_five = (grade // 5 + 1) * 5 if next_multiple_of_five - grade < 3: rounded_grades.append(next_multiple_of_five) else: rounded_grades.append(grade) results.append(rounded_grades) return results"},{"question":"Alex loves geometry and polygons in particular. He recently got fascinated with the problem of determining if a set of vertices can form a particular polygon, such as a convex polygon. For this problem, Alex will provide a set of points in 2D Cartesian plane, and you need to determine if these points form a convex polygon. A polygon is convex if and only if all its internal angles are less than 180 degrees. In other words, a polygon is convex if and only if every pair of adjacent edges makes a left turn or a right turn (but not a combination of both). You will be given n points in a 2D plane and need to determine if these points form a convex polygon. The points are given in an order which should be preserved while checking for convexity. # Input format: - First line contains a single integer n (3 ≤ n ≤ 1000) — the number of points. - Each of the next n lines contain two integers xi and yi (−10^9 ≤ xi, yi ≤ 10^9) — the coordinates of the i-th point. # Output format: - Print \\"YES\\" if the given points form a convex polygon, otherwise print \\"NO\\". # Example: Input: ``` 4 0 0 0 1 1 1 1 0 ``` Output: ``` YES ``` Input: ``` 4 0 0 1 1 1 0 2 1 ``` Output: ``` NO ``` In the first sample, the points form a convex polygon which is a square. In the second sample, the polygon is not convex as the point (2, 1) causes an internal angle greater than 180 degrees.","solution":"def is_convex_polygon(points): Determine if a set of points in a 2D plane form a convex polygon. Args: points: List of tuples containing the (x, y) coordinates of the points in order. Returns: \'YES\' if the points form a convex polygon, \'NO\' otherwise. def cross_product(o, a, b): Returns the cross product of vector OA and OB. A positive cross product indicates a counter-clockwise turn, negative indicates a clockwise turn, and zero indicates a collinear point. return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) n = len(points) if n < 3: return \\"NO\\" prev_cross_prod = 0 for i in range(n): a = points[i] b = points[(i + 1) % n] c = points[(i + 2) % n] cross_prod = cross_product(a, b, c) if cross_prod != 0: if cross_prod * prev_cross_prod < 0: return \\"NO\\" prev_cross_prod = cross_prod return \\"YES\\""},{"question":"You have been hired as a detective by ACME Corporation to investigate a series of data breaches. In your investigation, you found that the company uses a secret encryption algorithm that involves two numbers, `x` and `y`. The algorithm generates the secret key by finding the Least Common Multiple (LCM) of these two numbers. However, to make it more challenging, the company sometimes swaps the numbers halfway through the encryption process. Because of this, the encryption process is as follows: 1. Generate the LCM of `x` and `y`. 2. Swap the numbers `x` and `y`. 3. Generate the LCM of the swapped numbers `y` and `x` again. 4. The final secret key is the sum of both LCM values obtained. Your task is to write a program that calculates the secret key given two integers, `x` and `y`. The first line of the input contains two space-separated integers `x` and `y` (1 ≤ x, y ≤ 100). Print a single integer — the secret key derived from the algorithm. For example, if the input is: ``` 12 15 ``` The output should be: ``` 90 ``` Explanation: LCM(12, 15) is 60. After swapping, we get LCM(15, 12) which is also 60. Therefore, the secret key is 60 + 60 = 120.","solution":"import math def lcm(a, b): Returns the Least Common Multiple (LCM) of a and b. return abs(a * b) // math.gcd(a, b) def secret_key(x, y): Calculate the secret key using the given algorithm. lcm1 = lcm(x, y) swapped_lcm = lcm(y, x) return lcm1 + swapped_lcm"},{"question":"A new company stores all their data in a dictionary (hash map) called `database`. Each key is a unique string representing a product ID, and the respective value is a dictionary containing product information: \\"name\\" (a string), \\"price\\" (a float), and \\"quantity\\" (an integer). Your task is to create a function that performs a series of operations on the `database`. The operations you need to handle are as follows: - \\"ADD productID name price quantity\\": Add a new product with the given details to the `database`. If the productID already exists, update the existing product\'s details. - \\"REMOVE productID\\": Remove the product with the specified productID from the `database`. If the productID does not exist, do nothing. - \\"UPDATE productID name price quantity\\": Update the details of the specified productID. If the productID does not exist, do nothing. - \\"QUERY productID\\": Print the details of the specified productID in the format: \\"ProductID: [name, price, quantity]\\". If the productID does not exist, print \\"Product Not Found\\". Implement the function `handle_operations` that takes a list of operations as an argument, modifies the `database` accordingly, and prints the results of any \\"QUERY\\" operations. **Function Signature:** ```python def handle_operations(operations: List[str]) -> None: ``` **Input:** - A list `operations` of strings representing the operations to be performed, where each string is in the format described above. The length of `operations` will be between 1 and 100. **Output:** - The function should print the results of \\"QUERY\\" operations directly. **Constraints:** - Price and quantity given in the operations will always be non-negative. - The length of \\"productID\\" and \\"name\\" will be between 1 and 50 characters. **Example:** ```python operations = [ \\"ADD P001 Widget 19.99 3\\", \\"ADD P002 Gadget 29.95 5\\", \\"QUERY P001\\", \\"QUERY P003\\", \\"REMOVE P002\\", \\"QUERY P002\\", \\"UPDATE P001 SuperWidget 24.99 10\\", \\"QUERY P001\\" ] Output: ProductID: [Widget, 19.99, 3] Product Not Found Product Not Found ProductID: [SuperWidget, 24.99, 10] ```","solution":"def handle_operations(operations): database = {} for operation in operations: parts = operation.split() command = parts[0] productID = parts[1] if command == \\"ADD\\": name, price, quantity = parts[2], float(parts[3]), int(parts[4]) database[productID] = {\\"name\\": name, \\"price\\": price, \\"quantity\\": quantity} elif command == \\"REMOVE\\": if productID in database: del database[productID] elif command == \\"UPDATE\\": if productID in database: name, price, quantity = parts[2], float(parts[3]), int(parts[4]) database[productID] = {\\"name\\": name, \\"price\\": price, \\"quantity\\": quantity} elif command == \\"QUERY\\": if productID in database: product = database[productID] print(f\\"ProductID: [{product[\'name\']}, {product[\'price\']}, {product[\'quantity\']}]\\") else: print(\\"Product Not Found\\")"},{"question":"Jack is a scientist who is studying DNA sequences. He has two DNA sequences, A and B, of lengths n and m respectively, and he wants to determine the length of the longest common subsequence (LCS) shared by both sequences. The LCS is defined as the longest sequence that can be derived from both A and B without changing the order of elements. Your task is to write a program that computes the length of the LCS of the two given DNA sequences. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) - the lengths of the sequences A and B respectively. The second line contains the DNA sequence A of length n, consisting of uppercase English letters \'A\', \'C\', \'G\', \'T\'. The third line contains the DNA sequence B of length m, consisting of uppercase English letters \'A\', \'C\', \'G\', \'T\'. Output a single integer - the length of the longest common subsequence of A and B. Example: Input: 7 6 AGGTAB GXTXAYB Output: 4 Explanation: The longest common subsequence is \\"GTAB\\" with length 4.","solution":"def longest_common_subsequence_length(n, m, A, B): Returns the length of the longest common subsequence of DNA sequences A and B. # Create a 2D array to store the lengths of longest common subsequences dp = [[0] * (m + 1) for _ in range(n + 1)] # Build the dp array from bottom up for i in range(1, n + 1): for j in range(1, m + 1): if A[i-1] == B[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) # The length of the longest common subsequence will be in dp[n][m] return dp[n][m]"},{"question":"Tina has a list of chores that need to be completed, and she wants to distribute them among her friends in such a way that the workload is balanced. The chores are given in the form of an array where each element represents the amount of effort required to complete that chore. Tina\'s goal is to split the chores into two groups such that the difference between the total effort of the two groups is minimized. Write a program to determine the minimum possible difference between the total effort of the two groups. The input begins with an integer n (1 ≤ n ≤ 100) – the number of chores. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), where ai is the effort required for the i-th chore. Output a single integer – the minimum possible difference between the total effort of the two groups. # Input ``` 5 3 1 4 2 2 ``` # Output ``` 0 ``` # Explanation In this example, you can divide the chores into groups {3, 2} and {1, 4, 2} which both sum up to 5, so the minimum possible difference is 0.","solution":"def min_diff_split(n, chores): Determines the minimum possible difference between the total effort of two groups of chores. Parameters: n (int): The number of chores. chores (list of int): A list representing the amount of effort required for each chore. Returns: int: The minimum possible difference between the total effort of the two groups. total_sum = sum(chores) half_sum = total_sum // 2 # Create a DP table where dp[i][j] means whether a subset of chores[0..i] can have a sum of `j` dp = [[False] * (half_sum + 1) for _ in range(n + 1)] dp[0][0] = True # Base case: There\'s a zero sum when no items are taken for i in range(1, n + 1): for j in range(half_sum + 1): dp[i][j] = dp[i-1][j] if j >= chores[i-1]: dp[i][j] = dp[i][j] or dp[i-1][j - chores[i-1]] # Find the maximum sum that is closest to half_sum max_half_sum = max(j for j in range(half_sum + 1) if dp[n][j]) return total_sum - 2 * max_half_sum def process_input_output(input_str): lines = input_str.strip().split(\\"n\\") n = int(lines[0]) chores = list(map(int, lines[1].split())) return min_diff_split(n, chores)"},{"question":"Polycarp loves to collect rainwater using an array of non-negative integers where each element represents the height of a bar. He wonders how much water can be stored after arranging the bars in this configuration. Given an array of non-negative integers representing the height of each bar at index i, calculate how much water can be trapped after raining. The water trapped over the bars at each index depends on the shorter of the two tallest bars to the left and right of the index, minus the height of the bar at that index. For example, given [0,1,0,2,1,0,1,3,2,1,2,1], the water trapped would be 6 units. Write a program to solve this problem. Input: - The input begins with a single integer n (0 ≤ n ≤ 2 * 10^5) — the number of bars. - The second line contains n non-negative integers representing the heights of the bars. Output: - The output should be a single integer representing the total units of trapped water. Example 1: Input: 12 0 1 0 2 1 0 1 3 2 1 2 1 Output: 6 Example 2: Input: 6 4 2 0 3 2 5 Output: 9 Note: In the first example, there are 6 units of water trapped. In the second example, there are 9 units of water trapped.","solution":"def trap_rainwater(heights): Compute the amount of trapped rainwater given the heights of the bars. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"You are given two sorted arrays of distinct integers, `A` and `B`, where each array is of length `n`. You are to merge the two arrays into a new sorted array `C` of length `2n`. However, you must do it without using any sorting algorithm or library functions. Instead, use the following procedure: - Initialize two pointers, one for each array, at the beginning of the arrays. - Compare the current elements pointed to by the pointers. - Append the smaller element to the new array `C` and move the corresponding pointer to the next position. - If an element from `A` is added to `C`, move the pointer in `A` one step forward, and if an element from `B` is added to `C`, move the pointer in `B` one step forward. - If one of the arrays is exhausted, append all remaining elements of the other array to `C`. Complete the implementation using the above logic. Input: - The first line contains an integer `n` (1 leq n leq 10^5) — the number of elements in each array. - The second line contains `n` integers `A_1, A_2, ..., A_n` (1 leq A_i leq 10^9) — the elements of the first array in sorted order. - The third line contains `n` integers `B_1, B_2, ..., B_n` (1 leq B_i leq 10^9) — the elements of the second array in sorted order. Output: - Output a single line containing `2n` integers, the elements of the merged array `C`. Example: Input: ``` 4 1 3 5 7 2 4 6 8 ``` Output: ``` 1 2 3 4 5 6 7 8 ```","solution":"def merge_sorted_arrays(A, B): Merges two sorted arrays A and B into a single sorted array. n = len(A) C = [] i, j = 0, 0 while i < n and j < n: if A[i] < B[j]: C.append(A[i]) i += 1 else: C.append(B[j]) j += 1 # Append any remaining elements in A while i < n: C.append(A[i]) i += 1 # Append any remaining elements in B while j < n: C.append(B[j]) j += 1 return C"},{"question":"You are given an array of integers and a target integer x. Determine if there exist two distinct elements in the array that sum up to x. The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 100) — the number of test cases. Each test case starts with an integer n (2 leq n leq 10^5), the number of elements in the array, followed by n space-separated integers representing the elements of the array. The last line of each test case contains the integer x (-10^9 leq x leq 10^9). For each test case, if there exist two distinct elements in the array that sum up to x, print \\"YES\\" (without the quotes). Otherwise, print \\"NO\\" (without the quotes). Each test case should be solved in O(n) time complexity if possible. **Example:** Input: ``` 2 5 4 7 1 -3 2 5 3 1 2 3 6 ``` Output: ``` YES NO ``` In the first test case, 7 and -2 sum up to 5, so the output is \\"YES\\". In the second test case, no two elements sum up to 6, so the output is \\"NO\\".","solution":"def has_pair_with_sum(arr, x): Returns True if there exists two distinct elements in the array that sum up to x, else False. seen = set() for num in arr: if (x - num) in seen: return True seen.add(num) return False def process_test_cases(test_cases): Processes multiple test cases and returns a list of results for each test case. results = [] for test_case in test_cases: n, arr, x = test_case if has_pair_with_sum(arr, x): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Little Bunny Hoppity loves to collect flowers. He has a row of n flower patches each containing a certain number of flowers. Hoppity wants to collect flowers from all the patches, but he has a specific way of doing it. He can jump to any patch and start collecting flowers from there, but once he starts collecting, he can only jump to a neighboring patch (left or right) continuously until he collects the flowers from all patches. However, Hoppity doesn\'t always want to collect the flowers in the exact order. Sometimes he can skip a patch (not collecting flowers from it) and come back later to collect from it, but he must end up visiting all patches exactly once. The total number of flowers collected from any sequence should always be continuous subsets of the row patches. Given the number of flowers in each patch, Hoppity wants to find the maximum number of flowers he can collect following this skipping rule. The first line contains an integer n (1 ≤ n ≤ 10^5), the number of flower patches. The second line contains n space-separated integers f1, f2, ..., fn (1 ≤ fi ≤ 10^9), where fi is the number of flowers in the i-th patch. Print a single integer, the maximum number of flowers Hoppity can collect. For example with input: ``` 5 1 2 3 4 5 ``` Output should be: ``` 15 ``` In this example, all patches are collected in sequence without skipping any, so the maximum number of flowers is 15. ``` 5 3 5 2 7 4 ``` Output should be: ``` 20 ``` Here, Hoppity can start at patch 1, jump to patch 2, skip patch 3, collect from patch 4, and then come back to patch 3, finally collecting from patch 5 which yields a maximum collection of 20 flowers.","solution":"def max_flowers(n, flowers): max_flower_sum = float(\'-inf\') current_sum = 0 for f in flowers: current_sum += f if current_sum > max_flower_sum: max_flower_sum = current_sum if current_sum < 0: current_sum = 0 return max_flower_sum"},{"question":"Martha has recently taken interest in word games, and she came up with a challenging puzzle. She has two strings, `s` and `t`, each containing only lowercase English letters. She wants to know if it is possible to rearrange the letters of `s` such that `t` becomes a subsequence of `s`. Given a string `a`, a string `t` is a subsequence of `a` if `t` can be derived from `a` by deleting some (possibly zero) characters without changing the order of the remaining characters. Can you help Martha figure this out? The first line contains a string `s` (1 ≤ |s| ≤ 100) — the string from which we need to derive `t`. The second line contains a string `t` (1 ≤ |t| ≤ 100) — the target subsequence string. Output \\"YES\\" if t can be made a subsequence of a rearranged version of s, otherwise print \\"NO\\". **Examples:** Input: ``` abacbc abc ``` Output: ``` YES ``` Input: ``` xyz ab ``` Output: ``` NO ``` **Note:** In the first example, `s` can be rearranged to `abccb`, then `t (abc)` is a subsequence of that string. In the second example, there is no way to rearrange `s` such that `t` becomes a subsequence.","solution":"def can_form_subsequence(s, t): Determine if t can be a subsequence of any rearrangement of s. :param s: The input string from which we need to derive t. :param t: The target subsequence string. :return: \'YES\' if t can be a subsequence of any rearranged version of s, otherwise \'NO\'. from collections import Counter counter_s = Counter(s) counter_t = Counter(t) for char in counter_t: if counter_t[char] > counter_s.get(char, 0): return \\"NO\\" return \\"YES\\""},{"question":"Bob\'s hometown is bustling with merchants, each selling a variety of goods. Bob wants to purchase some goods, but he tries to minimize his spending. Each merchant sells a single type of good, and the price of the goods changes every day according to a pattern. Bob has already made a list of the goods he wants to buy. He can buy goods from any merchant but must adhere to the schedule. If Bob wants to buy a good on day i, he must buy it from the merchant whose price pattern on that day offers the lowest price for the desired good. The goal is for Bob to buy all his desired goods at the minimum possible cost. Given a list of merchants, their price patterns over a number of days, and his desired goods, determine the minimum total cost for Bob to purchase all his desired goods. Input Format: - The first line contains two integers n and d (1 ≤ n ≤ 10, 1 ≤ d ≤ 100), where n is the number of merchants and d is the number of days. - The next n lines contain d integers each, where the i-th line denotes the price pattern of the i-th merchant over d days. - The next line contains an integer g (1 ≤ g ≤ 100), the number of goods Bob wants to purchase. - The final line contains g integers, each representing the day on which Bob wants to buy the respective goods. Output Format: - Print a single integer, the minimum total cost for Bob to purchase all his desired goods. Example: Input: ``` 3 5 1 3 5 7 9 2 4 8 6 10 3 1 6 4 8 3 1 3 4 ``` Output: ``` 10 ``` Explanation: Bob wants to buy goods on days 1, 3, and 4. The minimum prices for these days are: - Day 1: Merchant 1 sells for 1 - Day 3: Merchant 1 sells for 5 - Day 4: Merchant 2 sells for 4 Thus, the total cost is 1 + 5 + 4 = 10.","solution":"def minimum_total_cost(n, d, price_patterns, g, days): Determines the minimum total cost for Bob to purchase all his desired goods. Args: - n (int): Number of merchants. - d (int): Number of days. - price_patterns (list of list of int): Price patterns of the merchants over d days. - g (int): Number of goods Bob wants to purchase. - days (list of int): Days on which Bob wants to buy the goods. Returns: - int: The minimum total cost. total_cost = 0 for day in days: min_cost = float(\'inf\') for merchant in price_patterns: min_cost = min(min_cost, merchant[day-1]) total_cost += min_cost return total_cost"},{"question":"You are given an array of integers, and you are asked to find the number of pairs of indices (i, j) such that i < j and the sum of the elements at these indices is equal to a given target sum. The first line of the input contains an integer T (1 ≤ T ≤ 100) - the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 10^5) - the size of the array. The second line contains n space-separated integers a1, a2, ..., an (-10^6 ≤ ai ≤ 10^6) - the elements of the array. The third line contains a single integer t (-2 * 10^6 ≤ t ≤ 2 * 10^6) - the target sum. For each test case, output a single line containing the number of pairs (i, j) such that i < j and ai + aj = t. The sum of n over all test cases will not exceed 10^6. # Example Input ``` 2 4 1 5 7 -1 6 5 1 1 1 1 1 2 ``` Output ``` 2 10 ``` # Explanation In the first test case, the pairs of indices (i, j) that satisfy the condition are (0, 2) and (1, 3), so there are 2 such pairs. In the second test case, the pairs of indices (i, j) that satisfy the condition are (0, 1), (0, 2), (0, 3), (0, 4), (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4), so there are 10 such pairs.","solution":"def count_pairs_with_sum(test_cases): :param test_cases: List of tuples, where each tuple represents a test case containing: (n : int -> size of the array, array : list of integers -> the elements of the array, t : int -> the target sum) :return: List of integers representing the number of pairs for each test case result = [] for n, array, target in test_cases: count_map = {} count = 0 for num in array: if target - num in count_map: count += count_map[target - num] if num in count_map: count_map[num] += 1 else: count_map[num] = 1 result.append(count) return result # Function to parse input and call count_pairs_with_sum def process_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(input_lines[index]) array = list(map(int, input_lines[index + 1].split())) target = int(input_lines[index + 2]) test_cases.append((n, array, target)) index += 3 return count_pairs_with_sum(test_cases)"},{"question":"A small town has been plagued by a terrible monster. There\'s only one way to defeat this monster: You must spell a special incantation using scrolls from the town\'s library. The library contains n distinct scrolls, each inscribed with a single lowercase letter from \'a\' to \'z\'. To perform the incantation, you need to form the word \\"magic\\". You can use each scroll at most once, and you can use multiple scrolls that have the same letter. Write a function `number_of_magic_words(n, scrolls)` that takes two parameters: - an integer `n` (1 ≤ n ≤ 1000), the number of scrolls - a list `scrolls` of length `n` where each element is a lowercase letter representing the inscription on a scroll Return the maximum number of times you can form the word \\"magic\\" using the given scrolls. # Input: - An integer n - A list of `n` lowercase letters # Output: - An integer representing the maximum number of times the word \\"magic\\" can be formed # Example: Example 1: Input: ```python n = 9 scrolls = [\'m\', \'a\', \'g\', \'i\', \'c\', \'m\', \'a\', \'g\', \'i\'] ``` Output: ```python 1 ``` Explanation: You can form the word \\"magic\\" once with the scrolls provided. Example 2: Input: ```python n = 15 scrolls = [\'m\', \'a\', \'g\', \'i\', \'c\', \'m\', \'a\', \'g\', \'i\', \'c\', \'m\', \'a\', \'g\', \'i\', \'c\'] ``` Output: ```python 3 ``` Explanation: You can form the word \\"magic\\" three times with the scrolls provided. # Note: If you cannot form the word \\"magic\\" even once, return 0. # Function Signature: ```python def number_of_magic_words(n: int, scrolls: List[str]) -> int: # Your code here ```","solution":"def number_of_magic_words(n, scrolls): Calculates the maximum number of times the word \\"magic\\" can be formed using the given scrolls. Parameters: - n (int): The number of scrolls - scrolls (list): A list of lowercase letters representing the scrolls Returns: - int: The maximum number of times the word \\"magic\\" can be formed. from collections import Counter # Count the occurrences of each letter in the scrolls scroll_count = Counter(scrolls) # Find the minimum number of times the required letters can form the word \\"magic\\" return min(scroll_count.get(\'m\', 0), scroll_count.get(\'a\', 0), scroll_count.get(\'g\', 0), scroll_count.get(\'i\', 0), scroll_count.get(\'c\', 0))"},{"question":"In a distant kingdom, there are n castles connected by bi-directional roads in such a way that there is a unique path between any pair of castles. A conquering army wants to take control of some of these castles. But the army prefers to save time and energy by conquering exactly two castles such that conquering those two castles will allow them to block travel between the two largest segments of the kingdom. Specifically, they want to conquer any two castles u and v such that among the edges remaining after removing the path between u and v, the sizes of the two largest components formed are maximized. Your task is to help the army find such a pair of castles. Input: - The first line contains an integer n (2 ≤ n ≤ 100000) — the number of castles. - The following n-1 lines each contain two integers a and b (1 ≤ a, b ≤ n) — representing a bi-directional road between castles a and b. Output: - Print two integers u and v (1 ≤ u, v ≤ n) representing the indexes of the two castles to be conquered such that the size of the two largest components formed is maximized. Example: Input: 6 1 2 2 3 3 4 4 5 5 6 Output: 3 4 Explanation: By cutting the road between castles 3 and 4, the kingdom is divided into two parts of sizes 3 and 3, which are the largest possible segment sizes. Neither cutting (1 and 2), (2 and 3), (4 and 5), nor (5 and 6) would lead to two segments of equal or larger size.","solution":"def find_best_castles_to_conquer(n, roads): from collections import defaultdict, deque # Create adjacency list for the graph graph = defaultdict(list) for a, b in roads: graph[a].append(b) graph[b].append(a) # Helper function to perform BFS and return the size of the subtree def bfs_count_nodes(start, blocked): visited = set() queue = deque([start]) visited.add(start) count = 0 while queue: node = queue.popleft() count += 1 for neighbor in graph[node]: if neighbor not in visited and (node, neighbor) != blocked and (neighbor, node) != blocked: visited.add(neighbor) queue.append(neighbor) return count # Initialize the best division max_component_size = 0 best_u, best_v = None, None # Try blocking each edge for a, b in roads: comp1, comp2 = bfs_count_nodes(a, (a, b)), bfs_count_nodes(b, (a, b)) smallest_largest_component = min(comp1, comp2) if smallest_largest_component > max_component_size: max_component_size = smallest_largest_component best_u, best_v = a, b return best_u, best_v"},{"question":"You are given an array of integers a_1, a_2, ..., a_n. For each integer in the array, determine the length of its longest increasing contiguous subarray that ends at that element. An increasing subarray is a subarray where every subsequent element in the subarray is greater than the previous one. The first line of the input contains a single integer n (1 le n le 10^5) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the elements of the array. For each element in the array, print a single integer — the length of the longest increasing contiguous subarray that ends at that element. Output the result as a single line of space-separated integers. **Example** Input: ``` 6 2 2 9 3 4 14 ``` Output: ``` 1 1 2 1 2 3 ``` Explanation: - For the first element `2`, the longest increasing subarray ending at this element is `[2]` with length `1`. - For the second element `2`, the longest increasing subarray ending at this element is `[2]` with length `1`. - For the third element `9`, the longest increasing subarray ending at this element is `[2, 9]` with length `2`. - For the fourth element `3`, the longest increasing subarray ending at this element is `[3]` with length `1`. - For the fifth element `4`, the longest increasing subarray ending at this element is `[3, 4]` with length `2`. - For the sixth element `14`, the longest increasing subarray ending at this element is `[3, 4, 14]` with length `3`. Note: An element itself is considered as an increasing subarray of length 1.","solution":"def longest_increasing_subarrays_lengths(a): n = len(a) if n == 0: return [] lengths = [1] * n for i in range(1, n): if a[i] > a[i - 1]: lengths[i] = lengths[i - 1] + 1 else: lengths[i] = 1 return lengths"},{"question":"You are given a rectangular city grid of size m times n. Each intersection in the grid can be represented by a point (i, j), where 1 leq i leq m and 1 leq j leq n. Some intersections are blocked and cannot be crossed. You need to find the shortest path from the top-left corner (1, 1) to the bottom-right corner (m, n) considering that you can only move right or down. Write a program that finds this shortest path in terms of the number of edges (moves) needed. If no such path exists, return -1. The first line contains two integers m and n (1 leq m, n leq 1000). The next m lines contain n integers each, either 0 or 1. A 0 indicates a free intersection, and a 1 indicates a blocked intersection. The output should be a single integer representing the length of the shortest path. If no path exists, print -1. **Input:** ``` 3 3 0 0 0 0 1 0 0 0 0 ``` **Output:** ``` 4 ``` In the example, the path is (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) with 4 moves required.","solution":"from collections import deque def shortest_path(m, n, grid): if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 # No path if start or end is blocked directions = [(1, 0), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == (m-1, n-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny)) visited.add((nx, ny)) steps += 1 return -1 def parse_input(input_string): lines = input_string.strip().split(\\"n\\") m, n = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return m, n, grid"},{"question":"You are given a tree with n vertices and an integer k. You need to determine the smallest depth level d such that there are at least k vertices located on this level. The tree is given as an adjacency list where each edge connects two vertices. The depth of a vertex is the number of edges in the path from the root vertex (vertex 1) to this vertex. For instance, in a tree ``` 1 / 2 3 | 4 ``` The depths are: vertex 1 (depth 0), vertices 2 and 3 (depth 1), and vertex 4 (depth 2). If there are multiple levels with the same number of vertices, choose the smallest level. The first line contains two integers n and k (1 leq k leq n leq 100,000). Each of the next n-1 lines contains two integers u and v (1 leq u, v leq n), representing an edge between vertex u and vertex v. The output should be a single integer, the smallest depth level d where there are at least k vertices. # Example ``` Input: 6 2 1 2 1 3 2 4 2 5 3 6 Output: 1 ``` In this example, at depth 0, there is 1 vertex (1). At depth 1, there are 2 vertices (2 and 3). At depth 2, there are 3 vertices (4, 5, 6). Since level 1 has at least 2 vertices, the output is 1.","solution":"from collections import deque def smallest_depth_with_k_vertices(n, k, edges): Determines the smallest depth level d that has at least k vertices in a tree. :param n: The number of vertices in the tree. :param k: The minimum number of vertices required at the level. :param edges: A list of tuples where each tuple (u, v) represents an edge between vertex u and vertex v. :return: The smallest depth level d that has at least k vertices. if n == 1: # If there is only one node return 0 if k == 1 else -1 # Build adjacency list from edges adjacency_list = [[] for _ in range(n+1)] for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # Perform a BFS to calculate depth of each node depths = {} queue = deque([(1, 0)]) # Start from the root node (vertex 1) with depth 0 visited = set() while queue: current, depth = queue.popleft() if current in visited: continue visited.add(current) if depth in depths: depths[depth] += 1 else: depths[depth] = 1 for neighbor in adjacency_list[current]: if neighbor not in visited: queue.append((neighbor, depth + 1)) # Find the smallest depth with at least k vertices for depth in sorted(depths.keys()): if depths[depth] >= k: return depth return -1 # If such a depth does not exist"},{"question":"You are given a string containing characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Determine if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. 3. An empty string is also considered valid. Examples: Input: \\"()\\" Output: true Input: \\"()[]{}\\" Output: true Input: \\"(]\\" Output: false Input: \\"([)]\\" Output: false Input: \\"{[]}\\" Output: true Constraints: * The input string\'s length should not exceed 10^5. Implement a function: ```python def isValid(s: str) -> bool: # Write your code here ```","solution":"def isValid(s: str) -> bool: stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"You are given an integer array a of length n. You can perform the following operation: choose two indices i and j (1 le i < j le n), remove the elements a[i] and a[j] from the array, and insert the value a[i] + a[j] at the position i (shifting all elements from position i+1 onward to the left to fill the gap). The length of the array decreases by 1 with each operation. Your task is to calculate the minimum number of operations needed to obtain a single element in the array that is equal to the sum of all the initial elements of the array. The first line of the input contains an integer t (1 le t le 2000) — the number of test cases. For each test case, the first line contains an integer n (2 le n le 50) — the number of elements in the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 100) — the elements of the array. For each test case, output the minimum number of operations required to obtain a single element in the array equal to the sum of all initial elements of the array. # Example ``` Input: 2 4 3 1 2 3 3 1 2 3 Output: 3 2 ``` # Explanation In the first test case, one possible sequence of operations is: - Combine elements at indices 1 and 2: [4, 2, 3] - Combine elements at indices 1 and 2: [6, 3] - Combine elements at indices 1 and 2: [9] In the second test case, one possible sequence of operations is: - Combine elements at indices 1 and 2: [3, 3] - Combine elements at indices 1 and 2: [6]","solution":"def min_operations_to_single_element(t, test_cases): Calculate the minimum number of operations needed to obtain a single element in the array that is equal to the sum of all the initial elements of the array. Arguments: t: Number of test cases. test_cases: List of tuples, each containing the number of elements and the array. Returns: List of integers, each representing the minimum number of operations for corresponding test case. results = [] for case in test_cases: n, a = case # The minimum number of operations to reduce the array to one element # is always n-1 because each operation reduces the array\'s size by 1 # and we need n-1 such operations to reduce n elements to 1 element. results.append(n - 1) return results"},{"question":"You are given an array consisting of n integers. You can move any integer any number of positions to the left or to the right in such a way that the resulting array remains sorted in ascending order. You need to determine the minimum number of moves required to sort the given array in ascending order. A move consists of either moving an integer one position to the left or one position to the right. In the first line of input, there is a single integer n (1 leq n leq 10^5), the number of integers in the array. In the next line, there are n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) representing the elements of the array. Print the minimum number of moves required to sort the array in ascending order.","solution":"def min_moves_to_sort(arr): n = len(arr) longest_increasing_subseq = [1] * n # Determine the longest increasing subsequence for i in range(1, n): for j in range(0, i): if arr[i] > arr[j]: longest_increasing_subseq[i] = max(longest_increasing_subseq[i], longest_increasing_subseq[j] + 1) # The minimum number of moves required to sort lis_length = max(longest_increasing_subseq) min_moves = n - lis_length return min_moves"},{"question":"Emily is an experienced competitive programmer and loves solving problems involving data structures. She recently encountered the concept of a segment tree and decided to implement it to solve a problem related to range minimum queries (RMQ). A segment tree is a data structure that allows answering range queries and updating elements efficiently. Emily\'s task is to implement a segment tree that supports the following operations: 1. Build the segment tree from a given list of integers. 2. Update an element in the list. 3. Find the minimum value in a given range of the list. The input format is as follows: - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of elements in the list. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000), the initial elements of the list. - The third line contains an integer q (1 ≤ q ≤ 100,000), the number of queries. - The next q lines describe the queries. Each query is in one of the following formats: - \\"1 u v\\" denotes an update operation where you need to update the element at index u to value v (1 ≤ u ≤ n, 1 ≤ v ≤ 1,000,000). - \\"2 l r\\" denotes a range minimum query operation that asks for the minimum value in the range from index l to index r (1 ≤ l ≤ r ≤ n). Output the results of all range minimum queries, one per line. Example: Input: 6 1 3 2 5 4 6 4 2 1 6 1 3 1 2 2 5 2 1 3 Output: 1 1 1 Note: The indices in the input queries are 1-based. Write a program to solve the problem effectively using a segment tree to handle the range minimum queries and update operations.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): # Initialize leaf nodes for i in range(self.n): self.tree[self.n + i] = data[i] # Initialize internal nodes for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, index, value): # Update the value at the leaf node index += self.n self.tree[index] = value # Update internal nodes while index > 1: index //= 2 self.tree[index] = min(self.tree[2 * index], self.tree[2 * index + 1]) def range_min_query(self, left, right): left += self.n right += self.n min_val = float(\'inf\') while left < right: if left % 2: min_val = min(min_val, self.tree[left]) left += 1 if right % 2: right -= 1 min_val = min(min_val, self.tree[right]) left //= 2 right //= 2 return min_val def solve_segment_tree(n, data, queries): seg_tree = SegmentTree(data) result = [] for query in queries: if query[0] == 1: seg_tree.update(query[1] - 1, query[2]) elif query[0] == 2: result.append(seg_tree.range_min_query(query[1] - 1, query[2])) return result"},{"question":"Given an array of integers, your task is to count the number of pairs (i, j) where i < j such that the sum of the elements at these positions is equal to a given target value k. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the elements of the array. The third line contains the integer k (1 ≤ k ≤ 2,000,000) — the target sum value. Print the number of pairs (i, j), where 1 ≤ i < j ≤ n and ai + aj = k. Example: Input: 5 1 5 7 -1 5 6 Output: 3","solution":"def count_pairs_with_sum(arr, k): Counts the number of pairs (i, j) where i < j such that the sum of the elements at these positions is equal to k. from collections import defaultdict count_dict = defaultdict(int) count_pairs = 0 for num in arr: complement = k - num if complement in count_dict: count_pairs += count_dict[complement] count_dict[num] += 1 return count_pairs"},{"question":"Paolo is a manager who needs to distribute a set of tasks among his employees. Each task takes a certain amount of time to complete. Paolo wants to minimize the maximum time taken by any employee to complete all their assigned tasks. To achieve this, he can distribute the tasks in any way he likes, but each task must be assigned to exactly one employee. There are n tasks and m employees. Determine the minimum possible maximum task completion time for any employee when the tasks are distributed optimally. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of tasks and the number of employees respectively. The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 10000) — the time taken for each task. Print a single integer — the minimum possible maximum task completion time for any employee. Example: Input: 5 2 4 7 8 3 1 Output: 12 Explanation: One optimal distribution could be: - Employee 1 gets tasks with times 4, 8 -> total time 12 - Employee 2 gets tasks with times 7, 3, 1 -> total time 11 The maximum time spent by any employee is 12, which is the minimum possible in this case.","solution":"def canDistribute(tasks, n, m, maxTime): This function checks if it is possible to distribute all tasks among \'m\' employees such that no employee spends more than \'maxTime\' on their tasks. employeesUsed = 1 currentTime = 0 for task in tasks: if currentTime + task > maxTime: employeesUsed += 1 currentTime = task if employeesUsed > m: return False else: currentTime += task return True def findMinMaxTaskTime(n, m, tasks): This function finds the minimum possible maximum task completion time for any employee when the tasks are distributed optimally. low, high = max(tasks), sum(tasks) while low < high: mid = (low + high) // 2 if canDistribute(tasks, n, m, mid): high = mid else: low = mid + 1 return low"},{"question":"Vasya works as a system administrator and is responsible for managing servers and creating user access logs for auditing purposes. One of his tasks is to identify suspicious activities in the logs which may indicate potential security issues. Vasya has a list of user access logs, each containing the user ID and the time of access. He needs to determine the maximum number of consecutive accesses made by the same user within a specific timeframe. The log data is represented as a list of tuples, where each tuple contains two elements: the user ID (a positive integer) and the time of access (a non-negative integer). The time of access is given in seconds since the start of the logging period. Vesya needs to find the user with the maximum number of consecutive accesses within a given timeframe window. Input: - The first line contains two integers n (1 ≤ n ≤ 100) and t (1 ≤ t ≤ 10^6), where n is the number of log entries, and t is the timeframe window in seconds. - The next n lines each contain two integers u_i and t_i (1 ≤ u_i ≤ 10^6, 0 ≤ t_i ≤ 10^6), where u_i is the user ID and t_i is the time of access. Output: - Print a single integer, the maximum number of consecutive accesses made by the same user within the given timeframe window. Example: Input: ``` 5 10 1 1 2 5 1 11 1 15 2 18 ``` Output: ``` 2 ``` Explanation: In this example, user 1 has log entries at times 1, 11, and 15. User 2 has log entries at times 5 and 18. The maximum consecutive accesses within a 10-second window are 2 (user 2 at times 5 and 18).","solution":"def max_consecutive_accesses(n, t, logs): Determine the user with the maximum number of consecutive accesses within a given timeframe window. Args: n : int : number of log entries t : int : timeframe window in seconds logs : list of tuple : list of log entries where each entry is a tuple containing user ID and time of access Returns: int : the maximum number of consecutive accesses made by the same user within the timeframe window # Group logs by user user_logs = {} for user_id, time in logs: if user_id not in user_logs: user_logs[user_id] = [] user_logs[user_id].append(time) max_consecutive = 0 # Go through each user\'s logs and determine max consecutive accesses within the timeframe window for user_id in user_logs: user_times = sorted(user_logs[user_id]) start = 0 for end in range(len(user_times)): while user_times[end] - user_times[start] > t: start += 1 max_consecutive = max(max_consecutive, end - start + 1) return max_consecutive"},{"question":"Alice has a collection of n distinct socks, each sock has a positive integer color identifier c_i. She wants to group these socks into pairs such that no pair has two socks of the same color. Additionally, Alice wants to maximize the number of pairs she can form. Write a function that determines the maximum number of pairs of socks Alice can form and the identifiers of the socks in each pair. # Input - The first line contains a single integer n (1 leq n leq 100) — the number of socks. - The second line contains n integers c_1, c_2, dots, c_n (1 leq c_i leq 1000) — the color identifiers of the socks. # Output - Print a single integer p — the maximum number of pairs that can be formed. - If no pairs can be formed, print 0. If there are multiple valid pairs that can be formed, any will be accepted. # Example Input 1: ``` 4 1 2 3 4 ``` Output 1: ``` 2 1 2 3 4 ``` Input 2: ``` 5 1 2 3 4 5 ``` Output 2: ``` 2 1 2 3 4 ```","solution":"def maximize_socks_pairs(n, colors): Returns the maximum number of pairs of socks that can be formed such that no pair has two socks of the same color. Args: n (int): The number of socks. colors (list of int): The color identifiers of the socks. Returns: tuple: A tuple where the first element is the number of pairs and the second element is a list of tuples representing the pairs. if n < 2: return 0, [] # Sort the colors to make pairing adjacent ones easier colors.sort() # Generate pairs by consecutive socks in the sorted list pairs = [] for i in range(1, n, 2): pairs.append((colors[i-1], colors[i])) # Calculate the number of pairs num_pairs = len(pairs) return num_pairs, pairs"},{"question":"Given a binary tree, your task is to find the sum of the values of the nodes on the longest path from the root to a leaf. If there are multiple paths with the same maximum length, consider the path which has the greatest sum of node values. The binary tree is represented in level order, where \'null\' represents a missing node. **Input:** The input consists of a single line containing integers separated by spaces, representing the level order traversal of a binary tree. **Output:** Output a single integer - the sum of the values of the nodes on the longest path from the root to a leaf. If there are multiple such paths, output the greatest sum of node values among them. **Example:** Input: ``` 1 2 3 4 5 null 6 7 null null null null null 8 ``` Output: ``` 22 ``` **Explanation:** The binary tree corresponding to the input is: ``` 1 / 2 3 / 4 5 6 / 7 8 ``` The longest path is 1 -> 2 -> 4 -> 7 with a sum of 14. Another path of the same length is 1 -> 3 -> 6 -> 8 with a sum of 18. The output is the maximum sum, which is 22.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def construct_tree(level_order): if not level_order or level_order[0] == \'null\': return None root = TreeNode(int(level_order[0])) queue = [root] i = 1 while i < len(level_order) and queue: current = queue.pop(0) if level_order[i] != \'null\': current.left = TreeNode(int(level_order[i])) queue.append(current.left) i += 1 if i < len(level_order) and level_order[i] != \'null\': current.right = TreeNode(int(level_order[i])) queue.append(current.right) i += 1 return root def find_sum_of_longest_path(root): def dfs(node): if not node: return (0, 0) # (sum, depth) left_sum, left_depth = dfs(node.left) right_sum, right_depth = dfs(node.right) if left_depth > right_depth: return (left_sum + node.val, left_depth + 1) elif right_depth > left_depth: return (right_sum + node.val, right_depth + 1) else: return (max(left_sum, right_sum) + node.val, left_depth + 1) result, _ = dfs(root) return result def sum_longest_path_from_input(input_str): level_order = input_str.split() root = construct_tree(level_order) return find_sum_of_longest_path(root)"},{"question":"Given a list of positive integers representing the prices of books and a specific budget, write a program to find the maximum number of books that can be bought without exceeding the budget. The goal is to maximize the number of books while staying within the given budget. The first line of input contains an integer n (1 ≤ n ≤ 100,000) - the number of books. The second line contains n integers which represent the prices of the books (1 ≤ price ≤ 100,000). The third line contains an integer b (1 ≤ b ≤ 100,000) - the budget. The output should be a single integer, representing the maximum number of books that can be purchased without exceeding the budget. Example: Input: 6 5 3 8 6 2 5 10 Output: 3 Explanation: With a budget of 10, the maximum number of books that can be bought is 3. The selected books could be the ones with prices [3, 5, 2], [2, 5, 3], or any other combination that adds up to 10 or less.","solution":"def max_books(prices, budget): Returns the maximum number of books that can be bought without exceeding the budget. :param prices: List of integers representing the prices of the books. :param budget: Integer representing the budget. :return: Integer representing the maximum number of books that can be bought. prices.sort() num_books = 0 total_spent = 0 for price in prices: if total_spent + price <= budget: total_spent += price num_books += 1 else: break return num_books"},{"question":"Product Inventory Tracker You\'re working for an e-commerce company that wants to analyze the stock status of its product inventory. The products have distinct categories, each identified by a name, and each product has an associated quantity representing the stock available. Your task is to implement a function that takes in a list of product entries and a list of required products to check. Each product entry consists of a category name and quantity. The list of required products to check provides names of categories and the required quantity for each. The function should determine if the required quantity for each product can be met from the available inventory and print \\"Available\\" if the quantity can be met, otherwise print \\"Out of stock\\". # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of product entries. - The next `n` lines each contain a string `category` and an integer `quantity` (0 ≤ quantity ≤ 10^9), the product category and quantity available. - The next line contains an integer `m` (1 ≤ m ≤ 10^5), the number of required products to check. - The next `m` lines each contain a string `category` and an integer `required_quantity` (1 ≤ required_quantity ≤ 10^9), the product category and quantity needed. # Output Print `m` lines; for each required product category, print \\"Available\\" if the quantity can be met, or \\"Out of stock\\" otherwise. # Example Input ``` 5 electronics 100 clothing 200 books 300 toys 150 groceries 400 4 electronics 50 clothing 300 books 100 toys 150 ``` Output ``` Available Out of stock Available Available ``` # Notes - A category that appears in the required products but not in the available inventory should be considered \\"Out of stock\\". - Ensure your solution is optimized to handle large inputs efficiently.","solution":"def check_inventory(entries, required): Check if required quantities can be met from available inventory. :param entries: List of tuples, where each tuple contains a string (category) and an integer (quantity available). :param required: List of tuples, where each tuple contains a string (category) and an integer (required quantity). :return: List of strings, \\"Available\\" or \\"Out of stock\\" for each required product. inventory = {} # Process the available inventory. for category, quantity in entries: if category in inventory: inventory[category] += quantity else: inventory[category] = quantity result = [] # Process the required products to check. for req_cat, req_qty in required: if req_cat in inventory and inventory[req_cat] >= req_qty: result.append(\\"Available\\") else: result.append(\\"Out of stock\\") return result"},{"question":"In the kingdom of Algor, a powerful wizard has set up a series of magical challenges in the form of a labyrinth. The labyrinth is composed of n rooms connected by m one-way magical passages. Each room has a unique id from 1 to n, and each magical passage has a unique id from 1 to m. The i-th passage allows travel from room ui to room vi, and it takes ti minutes to traverse. You start in room 1 and aim to reach room n. However, the wizard has imposed certain restrictions on you. If the traversal time of any passage exceeds a given threshold L, a penalty is added to that time. The penalty for using passage i is pi minutes. Your goal is to determine the shortest possible time it will take to travel from room 1 to room n, including any potential penalties. The first line of the input contains three integers n, m, and L (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5, 1 ≤ L ≤ 10^9) — the number of rooms, the number of passages, and the penalty threshold. The next m lines each contain three integers ui, vi, and ti (1 ≤ ui, vi ≤ n, 1 ≤ ti ≤ 10^9, ui ≠ vi) — representing a passage from room ui to room vi with a traversal time of ti. The next m lines each contain one integer pi (0 ≤ pi ≤ 10^6) — representing the penalty for the i-th passage if its traversal time exceeds L. Print a single integer — the shortest possible time to travel from room 1 to room n, including any penalties. In the first example, the labyrinth looks like: ``` 3 3 5 1 2 4 2 3 3 1 3 8 0 2 1 ``` The optimal path is from room 1 to room 2 to room 3. The time to traverse passage 1 is 4 minutes which does not exceed the threshold L = 5, thus no penalty. The time to traverse passage 2 is 3 minutes which also does not exceed the threshold. Total time is 4 + 3 = 7 minutes. However, directly using passage 3 takes 8 minutes plus a penalty of 1 minute as 8 > L. Thus, the optimal path leads to a total traversal time of 7 minutes.","solution":"import heapq def shortest_path_with_penalty(n, m, L, passages, penalties): Calculate the shortest path from room 1 to room n with given passages and penalties. Parameters: n (int): Number of rooms. m (int): Number of passages. L (int): Penalty time threshold. passages (list of tuples): List of passages where each passage is represented as (ui, vi, ti). penalties (list of int): List of penalties for each passage. Returns: int: The shortest possible time to travel from room 1 to room n, including any penalties. adj = [[] for _ in range(n + 1)] for i in range(m): ui, vi, ti = passages[i] pi = penalties[i] if ti > L else 0 adj[ui].append((vi, ti + pi)) def dijkstra(): dist = [float(\'inf\')] * (n + 1) dist[1] = 0 pq = [(0, 1)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in adj[u]: if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(pq, (dist[v], v)) return dist[n] return dijkstra()"},{"question":"Alice loves playing word games. She comes up with a game wherein she gives a string consisting of lowercase English letters and asks Bob to create the lexicographically smallest string possible by deleting exactly one character from the given string. Bob can only delete exactly one character from the string and rearranging the rest is not allowed. You are given a string s consisting of lowercase English letters (1 ≤ |s| ≤ 100000). Determine the lexicographically smallest string Bob can form by deleting one character from the given string. Print the lexicographically smallest string Bob can get by deleting exactly one character. For example, for the input string \\"abc\\", the output should be \\"ab\\", and for the input string \\"acbd\\", the output should be \\"abc\\".","solution":"def smallest_string_by_deleting_one_character(s): Returns the lexicographically smallest string formed by deleting exactly one character from s. # Initialize the smallest string to be effectively the largest possible string smallest_string = s[1:] for i in range(len(s)): # Form a new string by deleting the ith character new_string = s[:i] + s[i+1:] # Update smallest string if new string is lexicographically smaller if new_string < smallest_string: smallest_string = new_string return smallest_string"},{"question":"You are given an array of integers, `arr`, and an integer, `k`. Your task is to determine the number of contiguous subarrays that have a sum divisible by `k`. A contiguous subarray is a subarray obtained by deleting some (possibly zero) elements from the beginning of `arr` and some (possibly zero) elements from the end of `arr` without changing the order of the remaining elements. Your function should return an integer representing the count of contiguous subarrays with a sum divisible by `k`. Your code should have the following signature: ```python def count_subarrays(arr: List[int], k: int) -> int: # Your code here ``` # Example ```python arr = [4, 5, 0, -2, -3, 1] k = 5 print(count_subarrays(arr, k)) ``` Output: ``` 7 ``` # Explanation The subarrays that have a sum divisible by `5` are: - `[5]` - `[5, 0]` - `[5, 0, -2, -3]` - `[0]` - `[0, -2, -3, 1]` - `[-2, -3, 1]` - `[4, 5, 0, -2, -3, 1]`","solution":"from typing import List def count_subarrays(arr: List[int], k: int) -> int: remainder_map = {0: 1} current_sum = 0 count = 0 for num in arr: current_sum += num remainder = current_sum % k if remainder < 0: remainder += k if remainder in remainder_map: count += remainder_map[remainder] remainder_map[remainder] += 1 else: remainder_map[remainder] = 1 return count"},{"question":"During a concert in a music festival, spectators are seated in a grid of n rows and m columns. Each seat has an index starting from 1 at the top-left corner and ending at n·m at the bottom-right corner by their row-major order. Some seats are occupied, indicated by their indices, and each occupied seat is covered by an umbrella. Spectators in adjacent seats share umbrellas if they are in the same row or the same column. A group of spectators sharing umbrellas in this way forms an umbrella group. Any two spectators who share the same umbrella can communicate directly, otherwise, they can only communicate indirectly through a path via other spectators sharing umbrellas. Write a program to determine the number of umbrella groups in the audience. The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 100), the number of rows and columns respectively. The second line contains an integer p (1 ≤ p ≤ n·m), the number of occupied seats. The third line contains p integers, each indicating the indices of occupied seats. Print a single integer representing the number of umbrella groups in the concert hall. Example Input: 4 3 5 2 3 8 11 12 Example Output: 2 Explanation: In the example, seat indices (0,0)-1, (0,1)-2, (0,2)-3 form one umbrella group; seat indices (2,0)-7, (2,1)-8 form another umbrella group; seats (3,1)-11 and (3,2)-12 form one umbrella group. So, there are 2 distinct umbrella groups in the hall.","solution":"def num_umbrella_groups(n, m, p, occupied_seats): def dfs(seat): stack = [seat] while stack: current = stack.pop() if current in seen: continue seen.add(current) row, col = divmod(current - 1, m) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: next_row, next_col = row + dx, col + dy next_seat = next_row * m + next_col + 1 if 1 <= next_seat <= n * m and next_seat in occupied_set: stack.append(next_seat) occupied_set = set(occupied_seats) seen = set() groups = 0 for seat in occupied_seats: if seat not in seen: groups += 1 dfs(seat) return groups"},{"question":"Given an array of integers a of length n, you need to process q queries of the following types: 1. Update the value at a specified index. 2. Calculate the prefix sum up to a specified index. The first line of input contains two integers n and q (1 ≤ n, q ≤ 100,000) — the length of the array and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the initial elements of the array. Each of the following q lines contains a query of one of the following two types: - `1 x v` — Update the element at index x (1-based) to v (1 ≤ x ≤ n, 1 ≤ v ≤ 1000). - `2 x` — Output the sum of the first x elements (1 ≤ x ≤ n). For each query of the second type, print the result. Input: ``` 5 4 3 1 4 1 5 1 3 9 2 3 1 1 7 2 5 ``` Output: ``` 13 23 ``` Explanation: - Initially, the array is `[3, 1, 4, 1, 5]`. - Query `1 3 9` updates the array to `[3, 1, 9, 1, 5]`. - Query `2 3` calculates the sum of the first three elements: `3 + 1 + 9 = 13`. - Query `1 1 7` updates the array to `[7, 1, 9, 1, 5]`. - Query `2 5` calculates the sum of all five elements: `7 + 1 + 9 + 1 + 5 = 23`.","solution":"def process_queries(n, q, array, queries): results = [] for query in queries: parts = query.split() query_type = int(parts[0]) if query_type == 1: index = int(parts[1]) - 1 value = int(parts[2]) array[index] = value elif query_type == 2: index = int(parts[1]) - 1 results.append(sum(array[:index + 1])) return results"},{"question":"You are given an array of integers which represents a log of temperature readings over several days. Your task is to determine if there exists a subsequence of temperature readings that follows a strictly increasing trend or a strictly decreasing trend over a series of three days. The first line contains a single integer n (3 ≤ n ≤ 100) — the number of temperature readings. The second line contains n integers t1, t2, ..., tn (−1000 ≤ ti ≤ 1000) — the temperature readings. If there exists such a subsequence of three days, print \\"YES\\". Otherwise, print \\"NO\\". For example, given the temperature readings: ``` 5 1 2 1 3 5 ``` The output should be \\"YES\\" because the readings 1, 2, 3 form an increasing trend. For another example, given the temperature readings: ``` 4 10 5 6 3 ``` The output should be \\"YES\\" because the readings 10, 6, 3 form a decreasing trend. If no such subsequence is found, the output should be \\"NO\\".","solution":"def check_temperature_trend(n, temperatures): Given a list of temperature readings over n days, this function checks if there exists a subsequence of three consecutive days that have a strictly increasing or strictly decreasing trend. Parameters: n (int): The number of temperature readings. temperatures (list of int): The list of temperature readings. Returns: str: \\"YES\\" if such a subsequence exists, otherwise \\"NO\\". for i in range(n - 2): if (temperatures[i] < temperatures[i + 1] < temperatures[i + 2]) or (temperatures[i] > temperatures[i + 1] > temperatures[i + 2]): return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers and a series of operations. Each operation is described by three numbers (type, i, x), which have the following meaning: - If type = 1: Set the value at position i to x. - If type = 2: Add x to every element in the array from position i to the end (inclusive). - If type = 3: Subtract x from every element in the array from position i to the end (inclusive). Your task is to perform all the operations on the array and then return the modified array. The first line of input contains two integers n and m (1 le n, m le 100000) — the size of the array and the number of operations. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the initial values of the array. Each of the next m lines contains an operation of one of the given kinds. Output the array after all operations have been applied. For example: Input: ``` 5 3 1 2 3 4 5 2 2 10 1 3 20 3 4 5 ``` Output: ``` 1 12 20 9 10 ``` Explanation: 1. The initial array is `[1, 2, 3, 4, 5]`. 2. Applying operation `(2, 2, 10)` results in array `[1, 12, 13, 14, 15]`. 3. Then operation `(1, 3, 20)` sets the third element to 20: `[1, 12, 20, 14, 15]`. 4. Finally, operation `(3, 4, 5)` subtracts 5 from elements 4 and 5: `[1, 12, 20, 9, 10]`.","solution":"def perform_operations(n, m, array, operations): for op in operations: typ, i, x = op if typ == 1: array[i-1] = x elif typ == 2: for j in range(i-1, n): array[j] += x elif typ == 3: for j in range(i-1, n): array[j] -= x return array"},{"question":"A farmer has a rectangular field of dimensions n x m. He wants to plant trees in a way that they form an even grid. Specifically, he wants to plant a tree in every cell where both the row number and the column number are odd. Your task is to determine the number of such trees that he can plant in the field. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the field. Print a single integer — the number of trees that can be planted following the farmer\'s requirements. # Example Input 4 5 Output 4 Explanation The odd rows are 1 and 3, and the odd columns are 1, 3, and 5. Thus, the trees can be planted at the following coordinates: (1,1), (1,3), (1,5), (3,1), (3,3), and (3,5). So, the number of such trees is 6. Notice, if we consider the input as 4 x 5 grid: ``` 1 2 3 4 5 1 T . T . T 2 . . . . . 3 T . T . T 4 . . . . . ```","solution":"def count_trees(n, m): Returns the number of trees that can be planted in every cell where both the row number and the column number are odd in an n x m field. Parameters: n (int): The number of rows in the field. m (int): The number of columns in the field. Returns: int: The number of trees that can be planted. return ((n + 1) // 2) * ((m + 1) // 2)"},{"question":"You are given a binary tree with `n` nodes. Each node contains a unique integer identifier `NodeID` from `1` to `n`. Your task is to compute the following: 1. The longest path in the tree (also known as the tree diameter). 2. The minimum height of the binary tree when restructured by selecting any node as the new root. Input format: - The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of nodes in the tree. - Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) — indicating there is an edge connecting nodes `u` and `v`. Output format: - On the first line, print a single integer representing the length of the longest path in the tree. - On the second line, print a single integer representing the minimum height of the binary tree when you can choose any node as the root. To further explain: - The length of a path is the number of edges it contains. - The height of a tree is the maximum distance from the root to any node. - You can restructure the tree by choosing any node as the new root to achieve the minimal possible height. Example: Input: ``` 5 1 2 1 3 3 4 3 5 ``` Output: ``` 3 2 ``` Explanation: - The longest path in the tree (tree diameter) is 3 (from node 2 to node 4 or 2 to node 5 via nodes 1 and 3). - The minimum height of the binary tree, when restructured optimally, is 2. This can occur if you choose node 3 as the root, then the maximum distance from node 3 to any other node is 2.","solution":"from collections import deque, defaultdict def longestPathAndMinHeight(n, edges): if n == 1: return (0, 0) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start): visited = [-1] * (n + 1) q = deque([start]) visited[start] = 0 farthestNode = start maxDistance = 0 while q: node = q.popleft() for neighbor in graph[node]: if visited[neighbor] == -1: q.append(neighbor) visited[neighbor] = visited[node] + 1 if visited[neighbor] > maxDistance: maxDistance = visited[neighbor] farthestNode = neighbor return (farthestNode, maxDistance) # Find one of the farthest nodes from an arbitrary node (say node 1) farthestNode, _ = bfs(1) # Use the farthest node to find the actual longest path in the tree (diameter) otherEndNode, diameter = bfs(farthestNode) # The minimum height of the binary tree rooted optimally midpointDistance = diameter // 2 min_height = (diameter + 1) // 2 return (diameter, min_height) # Define the function to receive input and format the output accordingly def solve(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) edges = [] for i in range(1, len(data), 2): u = int(data[i]) v = int(data[i+1]) edges.append((u, v)) diameter, min_height = longestPathAndMinHeight(n, edges) print(diameter) print(min_height)"},{"question":"Alex is planning to organize the books in the new library of his college. There are n books and each book has a width wi (the width of the i-th book). Alex wants to place all the books on different shelves such that the total width of books on each shelf does not exceed a given limit l. He wants to minimize the number of shelves used. Write a program that, given the widths of the books and the limit of each shelf, prints the minimum number of shelves needed. The first line of the input contains two integers n and l (1 ≤ n ≤ 100, 1 ≤ l ≤ 1000) — the number of books and the width limit of each shelf. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 100), where wi is the width of the i-th book. Print an integer m — the required minimum number of shelves. Print the sequence of integers c1, c2, ..., cm, where cj is the number of books on the j-th shelf. If there are multiple ways to organize the books into m shelves, print any of them. Example Input: 6 10 3 2 5 4 6 7 Example Output: 3 2 2 2 Explanation: One way to organize the books: - Place the first and the second book (widths 3 and 2) on the first shelf. - Place the third and the fourth book (widths 5 and 4) on the second shelf. - Place the fifth and the sixth book (widths 6 and 7) on the third shelf. This way, every shelf\'s total width does not exceed the limit (10), and the number of shelves is minimized.","solution":"def organize_books(n, l, widths): Organize books into shelves such that the total width on each shelf does not exceed a given limit. :param n: int - Number of books :param l: int - Width limit of each shelf :param widths: List[int] - Widths of the books :return: Tuple[int, List[int]] - Minimum number of shelves and the sequence of the number of books on each shelf shelves = [] current_shelf = [] current_width = 0 for width in widths: if current_width + width <= l: current_shelf.append(width) current_width += width else: shelves.append(len(current_shelf)) current_shelf = [width] current_width = width if current_shelf: shelves.append(len(current_shelf)) return len(shelves), shelves # Parsing input to match the example scenario def process_input(input_lines): first_line = list(map(int, input_lines[0].split())) n = first_line[0] l = first_line[1] widths = list(map(int, input_lines[1].split())) return n, l, widths def process_output(result): print(result[0]) print(\\" \\".join(map(str, result[1]))) # Example usage (you can remove this part before running tests) if __name__ == \\"__main__\\": input_lines = [ \\"6 10\\", \\"3 2 5 4 6 7\\" ] n, l, widths = process_input(input_lines) result = organize_books(n, l, widths) process_output(result)"},{"question":"You are given an array of integers where each element represents a type of flower. The garden has a bed with flowers arranged in a line, and adjacent flowers should not be of the same type. Determine the minimum number of flowers that need to be removed to ensure that no two adjacent flowers are of the same type and return the resulting arrangement of the garden without the removed flowers. If there are multiple correct answers, return any of them. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of flowers in the garden. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the type of flower for each position in the garden. Print two lines. The first line should contain a single integer k — the minimum number of flowers that need to be removed. The second line should contain k integers representing the types of flowers in the resulting arrangement. Examples: Input: 5 1 2 2 3 3 Output: 2 1 2 3","solution":"def remove_flowers(n, flowers): removed_count = 0 result = [] for i in range(n): if i == 0 or flowers[i] != flowers[i - 1]: result.append(flowers[i]) else: removed_count += 1 return removed_count, result"},{"question":"Alex is tasked with designing a network of roads to connect n towns, numbered from 1 to n. The towns are currently isolated, and he can construct bidirectional roads between any pair of towns. Each road has a specific construction cost associated with it. Alex wants to ensure that every town can be reached from any other town, but he also wants to minimize the total construction cost. More formally, you are given n towns and m potential roads, where a road between town i and town j has a construction cost cij. Your task is to determine the minimum total cost required to connect all the towns. The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 100,000) — the number of towns and the number of potential roads, respectively. Each of the next m lines contains three integers ai, bi, and ci (1 ≤ ai, bi ≤ n, ai ≠ bi, 1 ≤ ci ≤ 10^6) — the towns ai and bi that can be connected by a road and the construction cost ci of that road. Print a single integer — the minimum total construction cost to connect all the towns. If it is impossible to connect all the towns, print -1. Example: Input: 4 5 1 2 1 2 3 2 1 3 2 1 4 3 3 4 4 Output: 6 In this example, Alex can achieve minimum total construction costs by constructing the following roads: between towns 1 and 2 (cost 1), towns 2 and 3 (cost 2), and towns 1 and 4 (cost 3). Therefore, the minimum total cost is 1 + 2 + 3 = 6.","solution":"def minimum_total_construction_cost(n, m, roads): Returns the minimum total construction cost to connect all the towns. If it is impossible to connect all towns, returns -1. # Kruskal\'s Algorithm to find the minimum spanning tree parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX return True return False # Sort edges by cost roads.sort(key=lambda x: x[2]) total_cost = 0 edges_used = 0 for a, b, cost in roads: if union(a - 1, b - 1): total_cost += cost edges_used += 1 if edges_used == n - 1: return total_cost return -1 if edges_used != n - 1 else total_cost # Example usage: n = 4 m = 5 roads = [ (1, 2, 1), (2, 3, 2), (1, 3, 2), (1, 4, 3), (3, 4, 4), ] print(minimum_total_construction_cost(n, m, roads)) # Output should be 6"},{"question":"A futuristic city has n special nodes connected by two types of one-way teleportation portals. The first type of portal connects nodes for free, while the second type charges a fee. Initially, you are given the structure of the city: which nodes are directly connected with free portals and which nodes are connected with paid portals. You need to decide the minimum cost required to travel from a starting node s to an ending node t. Note that you can use free portals as many times as needed without incurring any cost. The first line contains three integers n, m1, and m2 (1 ≤ n ≤ 1000, 0 ≤ m1, m2 ≤ 5000) – the number of nodes, the number of free portals, and the number of paid portals, respectively. The next m1 lines each contain two integers u and v (1 ≤ u, v ≤ n; u ≠ v) describing a free portal from node u to node v. The next m2 lines each contain three integers u, v, and c (1 ≤ u, v ≤ n; u ≠ v; 0 ≤ c ≤ 10^9) – describing a paid portal from node u to node v with cost c. The last line contains two integers s and t (1 ≤ s, t ≤ n) – the starting node and the ending node. Your task is to compute the minimum cost to travel from node s to node t. If it is impossible to reach node t from node s, print -1. Here is one example: Input: 6 5 4 1 2 2 3 3 4 5 6 6 1 1 3 10 4 5 15 2 6 5 3 5 7 1 5 Output: 7 Explanation: You can travel from node 1 to node 2 for free, then from node 2 to node 3 for free, and finally use the paid portal from node 3 to node 5 which costs 7. Thus, the total minimum cost to reach node 5 from node 1 is 7.","solution":"import heapq def find_min_cost(n, m1, m2, free_portals, paid_portals, s, t): from collections import defaultdict, deque import sys # Create adjacency lists for nodes with free portals free_adj_list = defaultdict(list) for u, v in free_portals: free_adj_list[u].append(v) # Get the reachable nodes using free portals starting from s reachable = set() queue = deque([s]) while queue: node = queue.popleft() if node not in reachable: reachable.add(node) for neighbor in free_adj_list[node]: queue.append(neighbor) if t in reachable: return 0 # Create adjacency list for nodes with paid portals paid_adj_list = defaultdict(list) for u, v, c in paid_portals: paid_adj_list[u].append((v, c)) # Use Dijkstra\'s algorithm to find the minimum cost path including paid portals min_heap = [(0, s)] visited = {} while min_heap: current_cost, node = heapq.heappop(min_heap) if node in visited: continue visited[node] = current_cost if node == t: return current_cost # Go through free portals for neighbor in free_adj_list[node]: if neighbor not in visited: heapq.heappush(min_heap, (current_cost, neighbor)) # Go through paid portals for neighbor, cost in paid_adj_list[node]: if neighbor not in visited: heapq.heappush(min_heap, (current_cost + cost, neighbor)) return -1 # If unreachable"},{"question":"David is a security consultant assigned to improve the system monitoring in his company. The monitoring system collects logs and David needs to implement a feature to calculate the average length of the continuous up-times during which the system has been running without any failures. The log data is represented as a binary string where \'1\' indicates the system is running and \'0\' indicates a system failure. Write a program that takes the binary log string as input and computes the average length of all contiguous sequences of \'1\'s (up-times). The first and only line of the input contains a binary string s (1 ≤ |s| ≤ 10^6), where |s| is the length of the string. Print the average length of the system up-times. Your answer will be considered correct if its absolute or relative error does not exceed 10^-9. **Example:** Input: ``` 110011011111000111 ``` Output: ``` 3.0 ``` In this example, the system has up-times of lengths 2, 2, 1, and 6. The average of these lengths is (2+2+1+6) / 4 = 11 / 4 = 2.75.","solution":"def average_uptime(binary_string): Calculate the average length of all contiguous sequences of \'1\'s in the binary string. :param binary_string: str, a binary string representing system up-times and failures :return: float, average length of all up-times if not binary_string: return 0.0 up_lengths = [] current_length = 0 for char in binary_string: if char == \'1\': current_length += 1 else: if current_length > 0: up_lengths.append(current_length) current_length = 0 if current_length > 0: up_lengths.append(current_length) if not up_lengths: return 0.0 average_length = sum(up_lengths) / len(up_lengths) return average_length"},{"question":"The Smallest Number Given a list of integers, write a program to determine the smallest integer that has not been used in any subarray of the given list. You need to find the smallest number that is not present in any contiguous subarray of the given array. # Input - First line contains an integer `n` (1 ≤ n ≤ 1000) — the number of elements in the array. - The second line contains `n` space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. # Output - Print the smallest positive integer that cannot be found in any subarray of the given array. # Example Input ``` 5 1 2 2 1 3 ``` Output ``` 4 ``` Input ``` 6 1 2 3 4 5 6 ``` Output ``` 7 ``` # Notes In the first example, all integers from 1 to 3 can be found as subarrays (e.g., [1], [2], [2 1], [3], etc.), but 4 is not present. Hence, the output is 4. In the second example, integers from 1 to 6 can be found in various subarrays, but 7 is not present. Hence, the output is 7.","solution":"def smallest_missing_integer(array): Finds the smallest positive integer that is not present in any subarray of the given array. n = len(array) present = [False] * (n + 2) # Marking the numbers present in the array for num in array: if 1 <= num <= n + 1: present[num] = True # Finding the smallest number not marked for i in range(1, n + 2): if not present[i]: return i"},{"question":"In a distant galaxy, there is a planet called Xarfon where the Xarians play a game called \\"Magic Squares\\". The magic square is an n x n grid filled with numbers from 1 to n^2 in such a way that the sum of every row, every column, and both diagonals equals the same magic constant. Xarians are planning to challenge each other by mutually completing the partially filled magic squares. Given a partially filled n x n grid, your task is to determine if it is possible to complete it into a magic square by filling in the remaining cells. If it is possible, print \\"YES\\", otherwise print \\"NO\\". The first line of the input contains a single integer n (1 ≤ n ≤ 15) — the size of the grid. Each of the next n lines contains n integers, separated by spaces, representing the grid. If a cell is empty, it will be represented by a zero (0). Print \\"YES\\" if it is possible to complete the grid into a magic square, otherwise print \\"NO\\". **Example:** Input: ``` 3 8 1 6 3 0 7 4 9 2 ``` Output: ``` YES ``` Input: ``` 3 8 1 6 3 0 0 0 9 2 ``` Output: ``` NO ``` **Notes:** In the first example, the grid can be completed into a magic square by filling the missing cell with the number 5. In the second example, there is no combination of numbers that can fill the empty cells to turn the grid into a magic square.","solution":"def is_magic_square_possible(n, grid): target_sum = n * (n * n + 1) // 2 def is_valid(x, y, val): row_sum = sum(grid[x]) + val - grid[x][y] col_sum = sum(grid[i][y] for i in range(n)) + val - grid[x][y] diag1_sum = sum(grid[i][i] for i in range(n)) if x == y else target_sum diag2_sum = sum(grid[i][n - 1 - i] for i in range(n)) if x == n - 1 - y else target_sum if row_sum != target_sum or col_sum != target_sum: return False if x == y and diag1_sum != target_sum: return False if x == n - 1 - y and diag2_sum != target_sum: return False return True def solve(index): if index == n * n: return all(sum(grid[i]) == target_sum for i in range(n)) and all(sum(grid[i][j] for i in range(n)) == target_sum for j in range(n)) and sum(grid[i][i] for i in range(n)) == target_sum and sum(grid[i][n - 1 - i] for i in range(n)) == target_sum x, y = divmod(index, n) if grid[x][y] != 0: return solve(index + 1) for val in range(1, n * n + 1): if val not in (grid[i][j] for i in range(n) for j in range(n)): grid[x][y] = val if is_valid(x, y, val): if solve(index + 1): return True grid[x][y] = 0 return False if solve(0): return \\"YES\\" return \\"NO\\""},{"question":"Alyssa has a garden consisting of m rows, each row contains m cells. The rows are numbered by integers from 1 to m from bottom to top, the columns are numbered from 1 to m from left to right. In this garden, Alyssa decided to plant p different types of flowers. Each type of flower can cover certain ranges in the garden defined by a rectangle with sides along borders of squares. Each flower type might overlap with itself or with others. For every cell of the garden, she notes down the number of different types of flowers covering that cell. Alyssa now wants to determine the sum of unique flower types covering all cells in the garden and requires your help to find the result. The first line contains two integers m (1 ≤ m ≤ 100) — the size of the garden (which means the garden has m rows and m columns), and p (1 ≤ p ≤ 100) — the number of flower types. Each of the following p lines contains five integers t, x1, y1, x2, y2 (1 ≤ t ≤ p, 1 ≤ x1 ≤ x2 ≤ m, 1 ≤ y1 ≤ y2 ≤ m), where t is the flower type identifier, and x1, y1, x2, y2 represents the coordinates of the rectangle that the t-th type flower covers (x1, y1 for the lower-left cell and x2, y2 for the upper-right cell). Print a single integer — the sum of unique flower types covering all the cells in the garden. Note to the first sample test: For a garden of size 3x3 with two flower types covering specific ranges, the garden cells might look something like this: 121 231 211 Where each cell contains the count of unique flower types covering it. Summing up these values would give the result. Note to the second sample test: For a garden of size 3x3 with two flower types extensively overlapping, the garden cells might all have values more than \'1\', for instance: 222 222 222 So, the sum of unique flower types will be 18.","solution":"def sum_unique_flower_coverings(m, p, flower_ranges): Calculate the sum of unique flower types covering all cells in the garden. Parameters: m (int): The size of the garden (m x m). p (int): The number of flower types. flower_ranges (list of tuples): List of tuples where each tuple consists of: (t, x1, y1, x2, y2), representing the flower type t covering the rectangle from (x1, y1) to (x2, y2). Returns: int: Sum of unique flower types covering all cells in the garden. # Initialize the garden matrix with sets to keep track of flower types covering each cell. garden = [[set() for _ in range(m)] for _ in range(m)] # Fill the garden matrix based on the flower coverage ranges. for t, x1, y1, x2, y2 in flower_ranges: for i in range(x1-1, x2): for j in range(y1-1, y2): garden[i][j].add(t) # Calculate the sum of the number of unique flower types for all cells in the garden. total_sum = 0 for i in range(m): for j in range(m): total_sum += len(garden[i][j]) return total_sum"},{"question":"Alice is a software engineer at a tech company. She is tasked with optimizing server performance by redistributing the workload. Each task has a certain computational cost associated with it, and Alice wants to divide these tasks between two servers such that the maximum computational cost between the two servers is minimized. You are given an array `tasks` where `tasks[i]` is the computational cost of the ith task. Your goal is to partition the array into two subsets, `S1` and `S2`, such that the absolute difference in their sums is minimized. Return the minimum possible absolute difference. The first line contains a single integer `n` (2 ≤ n ≤ 50) — the number of tasks. The second line contains `n` integers `tasks[0], tasks[1], ..., tasks[n-1]` (1 ≤ tasks[i] ≤ 1000) — the computational cost of each task. Print a single integer — the minimum possible absolute difference between the sums of the subsets `S1` and `S2`. # Example Input: ``` 5 1 2 3 4 5 ``` Output: ``` 1 ``` In this example, you can partition the tasks as `[1, 2, 4]` and `[3, 5]` resulting in subset sums `7` and `8`, which gives an absolute difference of `1`. Here, the optimal partitioning will yield the minimum possible absolute difference between the sum of the two subsets.","solution":"def min_subset_diff(tasks): n = len(tasks) total_sum = sum(tasks) dp = [[False] * (total_sum + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_sum + 1): if j >= tasks[i - 1]: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - tasks[i - 1]] else: dp[i][j] = dp[i - 1][j] min_diff = float(\'inf\') for j in range(total_sum // 2 + 1): if dp[n][j]: min_diff = min(min_diff, total_sum - 2 * j) return min_diff # Example usage: tasks = [1, 2, 3, 4, 5] print(min_subset_diff(tasks)) # Output: 1"},{"question":"Zara is working on a path finding problem in an undirected weighted graph. The graph consists of `n` vertices and `m` edges. Each edge has a weight assigned to it. Her task is to find the shortest path length between two given vertices `s` and `t`. The first line contains two integers `t` `(1 ≤ t ≤ 10)` — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers `n` `(2 ≤ n ≤ 100)` and `m` `(1 ≤ m ≤ 1000)` — the number of vertices and edges, respectively. Each of the next `m` lines contains three integers `u`, `v`, and `w` `(1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000)` representing an edge between vertex `u` and vertex `v` with weight `w`. The last line of each test case contains two integers `s` and `t` `(1 ≤ s, t ≤ n)`, representing the starting and ending vertices for the path. For each test case, print the shortest path length between vertices `s` and `t`. If there is no path from `s` to `t`, print `-1`. Example: Input: ``` 2 5 6 1 2 3 1 3 4 2 3 1 2 4 2 3 5 7 4 5 2 1 5 3 3 1 2 5 2 3 10 1 3 100 1 3 ``` Output: ``` 7 15 ``` In the first test case, one possible shortest path from vertex 1 to vertex 5 is `1 -> 2 -> 4 -> 5` with a total weight of `3 + 2 + 2 = 7`. In the second test case, the shortest path from vertex 1 to vertex 3 is directly via edge with weight `100`.","solution":"import heapq def dijkstra(n, edges, start, end): Implements Dijkstra\'s algorithm to find the shortest path in a graph. :param n: Number of vertices :param edges: List of edges where each edge is represented as a tuple (u, v, w) :param start: Starting vertex :param end: Ending vertex :return: Length of the shortest path from start to end or -1 if no path exists graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) min_heap = [(0, start)] # (distance, vertex) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 while min_heap: current_distance, current_vertex = heapq.heappop(min_heap) if current_vertex == end: return current_distance if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return -1 if distances[end] == float(\'inf\') else distances[end] def find_shortest_paths(t, test_cases): results = [] for case in test_cases: n, m, edges, s, t = case[\'n\'], case[\'m\'], case[\'edges\'], case[\'s\'], case[\'t\'] shortest_path_length = dijkstra(n, edges, s, t) results.append(shortest_path_length) return results"},{"question":"A company is organizing a programming competition. Each participant can solve problems of specific difficulties based on their skill level. The competition committee wants to create a final problem set in such a way that the difference between the hardest and easiest problem is minimized. Participants are grouped based on their skill levels, and each skill level is represented by an integer. The committee can only select one problem from each participant group. Given the skill levels of participants in each group, find the minimum possible difference between the highest and lowest problem difficulties in the final problem set. The first line contains an integer n (2 le n le 100), the number of participant groups. Each of the next n lines contains a list of integers separated by spaces. Each list represents the problem difficulties that participants in that group can solve. Each list contains at least one and at most 100 integers. The total number of all integers across all lists does not exceed 1000. Output a single integer, the minimum difference between the highest and lowest problem difficulties in the final problem set. **Example:** **Input:** ``` 3 1 4 7 8 10 3 5 6 ``` **Output:** ``` 2 ``` **Explanation:** - From the input, the possibilities for the final problem set are: - Choosing 1 from the first group, 8 from the second group, and 5 from the third group gives a difference of 8 - 1 = 7. - Choosing 4 from the first group, 8 from the second group, and 5 from the third group gives a difference of 8 - 4 = 4. - Other combinations give differences like 6, 3, etc. - The best combination is choosing 4 from the first group, 3 from the second group, and 5 from the third group which gives the difference 5 - 3 = 2. Thus, the minimum possible difference is 2.","solution":"from itertools import product def min_difficulty_difference(groups): Finds the minimum possible difference between the highest and lowest problem difficulties in the final problem set. Args: groups (list of list of int): List of groups with problem difficulties. Returns: int: The minimum difference between the highest and lowest difficulties. all_combinations = product(*groups) min_diff = float(\'inf\') for combination in all_combinations: current_diff = max(combination) - min(combination) min_diff = min(min_diff, current_diff) return min_diff def process_input(input_data): Processes the input data to extract number of groups and their difficulties. Args: input_data (str): The input string representing the competition problem difficulties. Returns: list of list of int: The structured representation of problem difficulties. lines = input_data.strip().split(\'n\') n = int(lines[0]) groups = [list(map(int, line.split())) for line in lines[1:n+1]] return groups"},{"question":"You are given a sequence of n integers a1, a2, ..., an. You want to process several queries of two kinds: 1. \\"SUM l r\\": This query asks you to compute the sum of the elements from index l to index r (inclusive). 2. \\"UPDATE i x\\": This query asks you to update the element at index i to the value x. The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of elements in the sequence and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the initial elements of the sequence. The next q lines each contain one query of either the form: - \\"SUM l r\\" (1 ≤ l ≤ r ≤ n), or - \\"UPDATE i x\\" (1 ≤ i ≤ n, 1 ≤ x ≤ 10^9). For each \\"SUM\\" query, output the result in a single line. Example input: ``` 5 3 1 2 3 4 5 SUM 1 3 UPDATE 2 10 SUM 1 3 ``` Example output: ``` 6 14 ```","solution":"class SequenceProcessor: def __init__(self, sequence): self.sequence = sequence def sum_range(self, l, r): return sum(self.sequence[l-1:r]) def update(self, i, x): self.sequence[i-1] = x def process_queries(n, q, sequence, queries): processor = SequenceProcessor(sequence) results = [] for query in queries: parts = query.split() if parts[0] == \\"SUM\\": l, r = int(parts[1]), int(parts[2]) results.append(processor.sum_range(l, r)) elif parts[0] == \\"UPDATE\\": i, x = int(parts[1]), int(parts[2]) processor.update(i, x) return results # Example usage n, q = 5, 3 sequence = [1, 2, 3, 4, 5] queries = [\\"SUM 1 3\\", \\"UPDATE 2 10\\", \\"SUM 1 3\\"] print(process_queries(n, q, sequence, queries))"},{"question":"You are given a string s and a list of queries. Each query consists of two integers l and r. For each query, you need to determine if the substring of s from index l to r (inclusive) can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one of its characters has an odd frequency. The first line of the input contains the string s (1 leq text{length of } s leq 10^5). The second line contains an integer q (1 leq q leq 10^5), the number of queries. Each of the next q lines contains two integers l and r (1 leq l leq r leq text{length of } s), representing a query. For each query, print \\"YES\\" if the substring from index l to r can be rearranged to form a palindrome, and \\"NO\\" otherwise. **Input:** ``` aabbc 3 1 3 2 5 1 5 ``` **Output:** ``` YES NO YES ```","solution":"def can_form_palindrome(s, queries): # Helper function to process one query def is_palindrome_rearrangement_possible(sub): from collections import Counter counter = Counter(sub) odd_count = sum(1 for count in counter.values() if count % 2 != 0) return odd_count <= 1 # Processing the queries results = [] for l, r in queries: # l and r in the problem are 1-based, convert to 0-based substring = s[l-1:r] if is_palindrome_rearrangement_possible(substring): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are provided a list of people\'s names and their birthdates. Your task is to find out the age of each person on a given reference date. If the birthdate is after the reference date, consider the person\'s age as 0. You will receive a single test case. The first line of the input contains an integer n (1 le n le 10^5) - the number of people. The second line contains the reference date in the format \\"yyyy-mm-dd\\". Each of the next n lines contains a name of a person followed by their birthdate in the format \\"yyyy-mm-dd\\". For each person, print the name and their age on the reference date on a new line, separated by a colon and a space. # Input: ``` 5 2023-10-25 Alice 2000-05-15 Bob 1995-10-31 Charlie 2010-01-01 Doreen 2025-11-11 Eve 2023-10-25 ``` # Output: ``` Alice: 23 Bob: 27 Charlie: 13 Doreen: 0 Eve: 0 ``` # Explanation: For \\"Alice\\", born on 2000-05-15, the age on 2023-10-25 is 23 years. For \\"Bob\\", born on 1995-10-31, the age on 2023-10-25 is 27 years (he will turn 28 in six more days). For \\"Charlie\\", born on 2010-01-01, the age on 2023-10-25 is 13 years. For \\"Doreen\\", born on 2025-11-11, the date is in the future, so the age is 0. For \\"Eve\\", born on 2023-10-25, the exact birthdate, so the age is 0.","solution":"from datetime import datetime def calculate_ages(n, reference_date, people): reference_date = datetime.strptime(reference_date, \\"%Y-%m-%d\\") results = [] for person in people: name, birthdate = person.split() birthdate = datetime.strptime(birthdate, \\"%Y-%m-%d\\") if birthdate > reference_date: age = 0 else: age = reference_date.year - birthdate.year - ( (reference_date.month, reference_date.day) < (birthdate.month, birthdate.day) ) results.append(f\\"{name}: {age}\\") return results # Example usage: n = 5 reference_date = \\"2023-10-25\\" people = [ \\"Alice 2000-05-15\\", \\"Bob 1995-10-31\\", \\"Charlie 2010-01-01\\", \\"Doreen 2025-11-11\\", \\"Eve 2023-10-25\\" ] print(\\"n\\".join(calculate_ages(n, reference_date, people)))"},{"question":"Sami is planning a movie night with his friends. He wants to rent a large screen that can accommodate their needs. Sami has a list of n screens, each with an aspect ratio, and a list of m movies, each with its own aspect ratio. Sami wants to choose a screen such that the difference between the movie aspect ratio and the screen aspect ratio is minimized for each pair of screen and movie. If there are multiple screens that satisfy this condition for a given movie, any of them can be chosen. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of screens and the number of movies. The second line contains n real numbers s1, s2, ..., sn (0.1 ≤ si ≤ 10), representing the aspect ratios of the screens. The third line contains m real numbers r1, r2, ..., rm (0.1 ≤ ri ≤ 10), representing the aspect ratios of the movies. Print m integers in one line, the index of the chosen screen (1-based) for each movie such that the total aspect ratio difference is minimized. Example: Input: 3 2 1.5 2.0 2.5 1.7 2.4 Output: 1 3 Explanation: The first movie with aspect ratio 1.7 is closest to the first screen with aspect ratio 1.5. The second movie with aspect ratio 2.4 is closest to the third screen with aspect ratio 2.5.","solution":"def find_best_screens(n, m, screens, movies): Given the aspect ratios of screens and movies, find the best screens for each movie based on the minimal aspect ratio difference. Args: n (int): The number of screens. m (int): The number of movies. screens (list of float): The aspect ratios of the screens. movies (list of float): The aspect ratios of the movies. Returns: list of int: The indices (1-based) of the best screens for each movie. best_screens = [] for movie in movies: min_diff = float(\'inf\') best_index = -1 for i, screen in enumerate(screens): diff = abs(movie - screen) if diff < min_diff: min_diff = diff best_index = i + 1 # 1-based indexing best_screens.append(best_index) return best_screens"},{"question":"You are a principal of a school where students have to form teams for an upcoming coding competition. Each team must have exactly three students, and the skill level of a team is defined as the sum of the skill levels of the three students in the team. To make the competition fairer, you decided that the maximum difference in skill levels between any two students in a team should be no more than 5. Given a list of skill levels of students, determine the number of distinct teams that can be formed. Two teams are considered distinct if they have different students, even if they have the same total skill level. The first line contains an integer n (3 ≤ n ≤ 100) — the number of students. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 100) — the skill levels of the students. Print a single integer — the number of distinct teams that can be formed. For example: Input: 5 4 5 6 10 15 Output: 1 Here, the only valid team is formed by students with skills [4, 5, 6], since the maximum difference in this team is 2. No other combination satisfies the conditions.","solution":"def count_teams(skill_levels): This function returns the number of distinct teams that can be formed such that each team consists of exactly three students and the maximum difference in skill levels between any two students in a team is no more than 5. Args: skill_levels (list): List of integers representing the skill levels of the students. Returns: int: Number of distinct teams that can be formed. skill_levels.sort() n = len(skill_levels) team_count = 0 for i in range(n - 2): if skill_levels[i + 2] - skill_levels[i] <= 5: team_count += 1 skill_levels.pop(i + 2) skill_levels.pop(i + 1) skill_levels.pop(i) return team_count + count_teams(skill_levels) return team_count"},{"question":"You are given a list of prices of books in a bookstore for n days. Each day\'s price is an integer between 1 and 5. The store has decided to offer discounts if a specific pattern is spotted in the prices over consecutive days. The pattern is as follows: a strictly increasing sequence followed by a strictly decreasing sequence. Your task is to determine the length of the longest such pattern in the given sequence of prices. The first line of input contains an integer n (1 ≤ n ≤ 100000), the number of days. The second line contains n integers, each representing the price of the book on that day. Output a single integer, the length of the longest pattern of strictly increasing followed by strictly decreasing sequence. If no such sequence exists, print 0. **Example:** Input: ``` 10 2 1 4 3 2 1 3 4 5 3 ``` Output: ``` 5 ``` **Explanation:** The longest pattern \\"3 4 5 3\\" has a length of 5, which includes an increasing sequence (3 4 5) and a decreasing sequence (5 3).","solution":"def longest_increasing_decreasing_pattern(n, prices): if n < 3: return 0 longest_length = 0 i = 0 while i < n - 2: increasing_length = 0 decreasing_length = 0 # Check for increasing sequence while i < n - 1 and prices[i] < prices[i + 1]: increasing_length += 1 i += 1 # Check for decreasing sequence while increasing_length > 0 and i < n - 1 and prices[i] > prices[i + 1]: decreasing_length += 1 i += 1 # Update the longest found pattern length if increasing_length > 0 and decreasing_length > 0: longest_length = max(longest_length, increasing_length + decreasing_length + 1) # Skip duplicates if the sequence is not strictly increasing at first if increasing_length == 0 and decreasing_length == 0: i += 1 return longest_length"},{"question":"You are given a program that controls a complex signaling system in a factory. The system consists of multiple signals that need to turn on and off following a specific pattern. Each signal operates in its own unique cycle, specified in seconds. For example, a signal with a cycle of 5 seconds will turn on at the 1st second, off at the 2nd second, on at the 3rd second, and so on. Given the cycles of all signals, you need to determine the first moment in time (in seconds) when all the signals are on simultaneously. The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of signals. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 10^9) — the cycle duration of each signal. The output should be a single integer — the first moment in time when all the signals are on simultaneously. For instance, consider the sample: Input 3 5 7 9 Output 315 Explanation: The Least Common Multiple (LCM) of 5, 7, and 9 is 315, which is the first second where all the signals will be on simultaneously. To solve the problem, you should calculate the LCM of all provided cycle durations. Here is the sample input and output: Input: 2 3 4 Output: 12 Explanation: The LCM of 3 and 4 is 12.","solution":"from math import gcd from functools import reduce def lcm(a, b): Calculate the Least Common Multiple of two integers. return a * b // gcd(a, b) def first_common_on_time(cycles): Given a list of cycle durations of signals, find the first time in seconds when all the signals are on simultaneously. return reduce(lcm, cycles) # Example usage: # n = 3 # cycles = [5, 7, 9] # print(first_common_on_time(cycles)) # Output: 315"},{"question":"You are given an array with n integers that represents the initial state of a stack. You need to perform a series of operations on this stack: - \\"push x\\" — add the integer x onto the top of the stack. - \\"pop\\" — remove the integer on the top of the stack. - \\"max\\" — print the maximum integer currently in the stack. You are required to implement these operations efficiently. The first line of input contains an integer n (1 ≤ n ≤ 100,000) — the number of operations. The next n lines contain one of the descriptions of operations: \\"push x\\", \\"pop\\", or \\"max\\". Print the output of each \\"max\\" operation. If a \\"pop\\" operation is executed on an empty stack, ignore it. # Example: Input: 9 push 1 push 2 max push 3 max pop max pop max Output: 2 3 2 1 # Explanation: 1. Push 1 onto the stack. 2. Push 2 onto the stack. 3. Max is 2 because the stack is [1, 2]. 4. Push 3 onto the stack. 5. Max is 3 because the stack is [1, 2, 3]. 6. Pop removes 3 from the stack. 7. Max is 2 because now the stack is [1, 2]. 8. Pop removes 2 from the stack. 9. Max is 1 because now the stack is [1].","solution":"class StackWithMax: def __init__(self): self.stack = [] self.max_stack = [] def push(self, x): self.stack.append(x) if not self.max_stack or x >= self.max_stack[-1]: self.max_stack.append(x) def pop(self): if self.stack: if self.stack[-1] == self.max_stack[-1]: self.max_stack.pop() self.stack.pop() def max(self): if self.max_stack: return self.max_stack[-1] return None def process_operations(operations): s = StackWithMax() result = [] for operation in operations: if operation.startswith(\\"push\\"): _, x = operation.split() s.push(int(x)) elif operation == \\"pop\\": s.pop() elif operation == \\"max\\": result.append(s.max()) return result"},{"question":"You have been given a matrix of size m x n, consisting of non-negative integers. Initially, all elements of the matrix are zeros. You have to perform several update operations of the following type: Update operations are given in the format: \\"type r1 c1 r2 c2 value\\", which means you add \\"value\\" to each element of the submatrix with the top-left corner at (r1, c1) and the bottom-right corner at (r2, c2). You need to determine the maximum value in the matrix after all the update operations are performed. Input: - The first line contains two integers m and n (1 ≤ m, n ≤ 1000), which represent the number of rows and columns of the matrix. - The second line contains a single integer q (1 ≤ q ≤ 100,000), which represents the number of update operations. - Each of the next q lines contains five integers r1, c1, r2, c2, value (0 ≤ r1 ≤ r2 < m, 0 ≤ c1 ≤ c2 < n, 1 ≤ value ≤ 100), which are the parameters for each update operation. Output: Print a single integer — the maximum value in the matrix after all the update operations are applied. Example: Input: 3 3 3 0 0 1 1 2 1 1 2 2 3 0 0 2 2 1 Output: 6 Explanation: After the first update operation, the matrix will be: 2 2 0 2 2 0 0 0 0 After the second update operation, the matrix will be: 2 2 0 2 5 3 0 3 3 After the third update operation, the matrix will be: 3 3 1 3 6 4 1 4 4 The maximum value in the matrix is 6.","solution":"def max_value_in_matrix(m, n, q, operations): Determine the maximum value in the matrix after all the update operations are performed. :param m: int, number of rows in the matrix :param n: int, number of columns in the matrix :param q: int, number of update operations :param operations: list of tuples, each containing (r1, c1, r2, c2, value) :return: int, the maximum value in the matrix after updates # Create the matrix initialized to zeros matrix = [[0] * n for _ in range(m)] # Apply all operations for (r1, c1, r2, c2, value) in operations: for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): matrix[i][j] += value # Finding the maximum value in the matrix max_value = 0 for row in matrix: max_value = max(max_value, max(row)) return max_value"},{"question":"A large company wants to organize a set of employee teams to work on different projects. Each employee can work in only one team. The company has a list of pairs of employees who should not be in the same team due to conflicts or skill incompatibilities. The company wants to assign employees to the smallest number of teams such that no pair of incompatible employees is in the same team. Help the company determine the minimum number of teams required and an assignment of each employee to a team. The input contains one or several test cases. The first line contains a single integer number t — the number of test cases. Then, t test cases follow. Solve test cases separately, test cases are completely independent and do not affect each other. Each test case begins with a line containing two space-separated integers n, k (1 le n le 1000, 0 le k le 5000) — the number of employees and the number of incompatible pairs. Each of the next k lines contains two space-separated integers a_i, b_i (1 le a_i, b_i le n; a_i ne b_i), which denotes that employees a_i and b_i should not be in the same team. Each pair of employees is listed at most once. Sum of values n across all test cases doesn\'t exceed 2000. Sum of values k across all test cases doesn\'t exceed 5000. For each test case, first print a line containing a single integer m — the smallest possible number of teams for which required split is possible. In the next line print n space-separated integers in range from 1 to m, inclusive, where the j-th number denotes the team number for the j-th employee. If there are multiple solutions, print any.","solution":"import networkx as nx def min_number_of_teams(t, test_cases): results = [] for i in range(t): n, k, incompatible_pairs = test_cases[i] # Create an adjacency list to represent the graph G = nx.Graph() G.add_nodes_from(range(1, n + 1)) G.add_edges_from(incompatible_pairs) # Use graph coloring to determine minimum teams color_map = nx.coloring.greedy_color(G, strategy=\'largest_first\') max_color = max(color_map.values()) + 1 # Prepare result team_assignments = [color_map[j] + 1 for j in range(1, n + 1)] results.append((max_color, team_assignments)) return results # Input parsing and function invocation t = 1 test_cases = [ (5, 4, [(1, 2), (2, 3), (3, 4), (4, 5)]) ] results = min_number_of_teams(t, test_cases) for result in results: m, team_assignments = result print(m) print(\\" \\".join(map(str, team_assignments)))"},{"question":"You are given a rooted tree with n nodes and each node has a distinct value. The value of the root node is always equal to 1. The nodes are labeled from 1 to n. Your task is to determine the k-th smallest value in a subtree of the tree. Given the root node of the subtree and an integer k, find the k-th smallest value among all the nodes in the subtree rooted at that node. The first line of input contains an integer n (1 le n le 10^5) - the number of nodes in the tree. The second line contains n space-separated integers v_1, v_2, ldots, v_n (1 le v_i le 10^9) - the value of the nodes labeled 1 through n. The following n-1 lines each contain two integers u and v (1 le u, v le n) representing an edge between node u and node v. The next line contains an integer q (1 le q le 10^5) - the number of queries. The following q lines each contain two integers x and k (1 le x le n, 1 le k le text {size of subtree rooted at x}) representing a query to find the k-th smallest value in the subtree rooted at node x. Output q lines, the k-th smallest value for each query. Example: Input: ``` 5 5 3 8 4 2 1 2 1 3 3 4 3 5 3 3 1 3 3 1 2 ``` Output: ``` 2 5 3 ``` Explanation: For the query (3, 1), the subtree rooted at 3 includes nodes with values [8, 4, 2]. The 1st smallest value among these is 2. For the query (3, 3), the subtree rooted at 3 includes nodes with values [8, 4, 2]. The 3rd smallest value among these is 8. For the query (1, 2), the entire tree is the subtree, and the 2nd smallest value in the tree with values [5, 3, 8, 4, 2] is 3.","solution":"from collections import defaultdict import heapq def kth_smallest_in_subtree(n, values, edges, queries): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # For memorizing the subtree values subtree_values = {} def dfs(node, parent): subtree = [] heapq.heappush(subtree, values[node-1]) for neighbor in tree[node]: if neighbor != parent: subtree.extend(dfs(neighbor, node)) subtree_values[node] = sorted(subtree) return subtree # Build subtree values starting from the root node (1) dfs(1, -1) results = [] for x, k in queries: results.append(subtree_values[x][k-1]) return results"},{"question":"In this problem, you are to write a function that determines if a given string can be transformed into a palindrome by removing at most one character. A palindrome is a string that reads the same forward and backward. The input to the function will be a single string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. The output should be \\"YES\\" if the string can be transformed into a palindrome by removing at most one character. Otherwise, output \\"NO\\". # Example - Input: \\"abca\\" - Output: \\"YES\\" - Explanation: By removing the character \'b\' or \'c\', the string becomes \\"aca\\" or \\"aba\\" which are both palindromes. - Input: \\"abcdef\\" - Output: \\"NO\\" - Explanation: There is no way to remove a single character to form a palindrome. # Function Signature ```python def can_be_palindrome(s: str) -> str: pass ``` # Constraints - The string will have a length between 1 and 100,000 inclusive. - The string will consist of lowercase English letters only. # Note Your solution should have a linear time complexity due to the input size constraints.","solution":"def can_be_palindrome(s: str) -> str: Returns \\"YES\\" if the string can be transformed into a palindrome by removing at most one character, otherwise returns \\"NO\\". def is_palindrome_range(i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Check both possibilities: skipping left or right character if is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1): return \\"YES\\" return \\"NO\\" left += 1 right -= 1 return \\"YES\\""},{"question":"In a distant land, there is a tribe with a unique way of communicating using art on their sacred rocks. Each art piece consists of a sequence of symbols, and each symbol is represented by a lowercase Latin letter. The tribe has an intricate system to create new sequences by concatenating smaller sequences. The tribe classifies sequences by their \\"beauty score\\", which is defined as the length of the longest substring that consists of the same character. For example, the sequence \\"aabbaab\\" has a beauty score of 2 because the longest substring with the same character is \\"aa\\" or \\"bb\\". The High Priestess of the tribe wants to create the most beautiful sequence possible from two given sequences. She can only concatenate these sequences in their original order and must do so exactly once. Given two sequences, your task is to determine the beauty score of the most beautiful sequence the High Priestess can create by concatenating both sequences exactly once. The first line of input contains two integers n and m (1 ≤ n, m ≤ 100), the lengths of the first and second sequences, respectively. The second line contains a sequence of n lowercase Latin letters. The third line contains a sequence of m lowercase Latin letters. Print a single integer representing the highest possible beauty score of the concatenated sequence. In the first sample, by concatenating \\"aaa\\" and \\"bbbbbb\\", the sequence \\"aaabbbbbb\\" is formed. The beauty score of the concatenated sequence is 6, derived from the substring \\"bbbbbb\\". In another example, by concatenating \\"abc\\" and \\"aaa\\", the sequence \\"abcaaa\\" has a beauty score of 3, derived from the substring \\"aaa\\".","solution":"def beauty_score(n, m, seq1, seq2): Returns the beauty score of the most beautiful sequence that can be created by concatenating the two given sequences exactly once. concatenated_seq = seq1 + seq2 max_beauty = 1 current_char = concatenated_seq[0] current_streak = 1 for i in range(1, len(concatenated_seq)): if concatenated_seq[i] == current_char: current_streak += 1 else: max_beauty = max(max_beauty, current_streak) current_char = concatenated_seq[i] current_streak = 1 max_beauty = max(max_beauty, current_streak) return max_beauty"},{"question":"Daniel is a sports event organizer and is running a marathon race with n participants. Each participant has a running speed represented by an integer array where the speed of the i-th participant is speed[i]. To make the race more interesting, Daniel wants to organize runners into groups such that the performance gap within each group is minimized. A group of participants is called balanced if the difference between the maximum speed and the minimum speed in that group is less than or equal to d. Given the number of participants n, and an array speed of length n representing the speeds of the participants, and an integer d, determine the maximum number of balanced groups that can be formed from the participants. Each participant can only be part of one group. For example, if there are six participants with speeds [5, 9, 12, 15, 18, 22] and d = 4, then the participants can be grouped into three balanced groups: [5, 9], [12, 15], and [18, 22]. The first line contains two integers n and d (1 ≤ n ≤ 1000, 1 ≤ d ≤ 1000) — the number of participants and the maximum allowed speed difference within a group. The second line contains n integers speed[1], speed[2], ..., speed[n] (1 ≤ speed[i] ≤ 1000) — the speeds of the participants. Print a single integer: the maximum number of balanced groups that can be formed. **Example:** Input: ``` 6 4 5 9 12 15 18 22 ``` Output: ``` 3 ``` Explanation: - You can form three balanced groups: [5, 9], [12, 15], and [18, 22]. - Each group meets the condition that the maximum speed difference within the group is less than or equal to 4.","solution":"def max_balanced_groups(n, d, speeds): Determine the maximum number of balanced groups based on given speeds and max allowed speed difference. :param n: Number of participants :param d: Maximum allowed speed difference within a group :param speeds: List of speeds of the participants :return: Maximum number of balanced groups speeds.sort() groups_count = 0 i = 0 while i < n: groups_count += 1 start_speed = speeds[i] while i < n and speeds[i] - start_speed <= d: i += 1 return groups_count"},{"question":"You are given an array containing n positive integers. Your task is to divide the array into exactly two non-empty subarrays such that the sum of elements in the first subarray is no greater than the sum of elements in the second subarray, and the difference between the sums of the two subarrays is minimized. The first line contains an integer n (2 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Print a single integer — the minimum possible difference between the sums of the two subarrays. For example, consider the following input: ``` 5 3 1 2 4 3 ``` The optimal way to divide the array is into subarrays [3, 1, 2] and [4, 3], which gives sums of 6 and 7, respectively. The minimum possible difference between the sums is 1. The output for this example should be: ``` 1 ```","solution":"def min_difference(arr): Returns the minimum possible difference between the sums of two subarrays such that the sum of the first subarray is no greater than the sum of the second subarray. :param arr: list of positive integers :return: integer representing the minimum possible difference n = len(arr) total_sum = sum(arr) prefix_sum = 0 min_diff = float(\'inf\') for i in range(n - 1): prefix_sum += arr[i] remaining_sum = total_sum - prefix_sum diff = abs(prefix_sum - remaining_sum) min_diff = min(min_diff, diff) return min_diff # Example run # arr = [3, 1, 2, 4, 3] # Output should be 1 # print(min_difference(arr))"},{"question":"Write a program to simulate a robot moving in a 2D grid. The robot starts at the coordinates (0, 0) and can move in one of four directions (\'U\' for up, \'D\' for down, \'L\' for left, \'R\' for right). The robot will move according to a given sequence of commands. Your task is to determine the final coordinates of the robot after executing all the commands. You have to implement a function with the following signature: ``` def final_robot_position(commands: str) -> Tuple[int, int]: ``` where `commands` is a string consisting of characters \'U\', \'D\', \'L\', \'R\' representing the movement directions. The function should return the final coordinates of the robot as a tuple (x, y). # Example ```python print(final_robot_position(\\"UUDDLRLR\\")) # Output: (0, 0) print(final_robot_position(\\"UUUDLR\\")) # Output: (0, 2) ``` # Input - A string `commands` (1 ≤ len(commands) ≤ 10^5), where each character is \'U\', \'D\', \'L\' or \'R\'. # Output - A tuple of two integers representing the final coordinates of the robot.","solution":"from typing import Tuple def final_robot_position(commands: str) -> Tuple[int, int]: x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x, y"},{"question":"Tom is organizing a marathon consisting of several laps. Each lap is formed by running around a circular track, where certain points on the track have water stations. Tom wants to strategically place participants at different starting points on the track so that each participant can run the entire marathon while minimizing their cumulative distance to the water stations. The track is represented as a straight line of length `l`. There are `m` water stations at designated positions `wi` on this line. Participants are numbered from `1` to `n` and each participant starts at a different position `si` on the line. For simplicity, we can assume the following: - The track is circular (i.e., position 0 and position `l` are the same). - A participant can access a water station if they encounter it within a full lap (from their starting position and back to it). - Each participant can complete as many laps as needed to minimize their total distance traveled to visit a water station. Your task is to determine the minimum total distance each participant needs to travel to access at least one water station. The first line of input contains three integers `n`, `l`, and `m` (`1 ≤ n ≤ 10^5`, `1 ≤ l ≤ 10^9`, `1 ≤ m ≤ 10^5`) — the number of participants, the length of the track, and the number of water stations respectively. The second line of input contains `n` integers `s1, s2, ..., sn` (`0 ≤ si < l`) — the starting positions of the participants. The third line of input contains `m` integers `w1, w2, ..., wm` (`0 ≤ wi < l`) — the positions of the water stations. Output `n` integers, where the `i`-th integer denotes the minimum total distance traveled by participant `i` to access at least one water station. # Example Input: ``` 3 10 2 1 7 6 3 8 ``` Output: ``` 2 1 2 ``` Explanation: - Participant 1 starts at position 1 and the nearest water station is at position 3. The minimum distance is 2. - Participant 2 starts at position 7 and the nearest water station is at position 8. The minimum distance is 1. - Participant 3 starts at position 6 and the nearest water station is at position 8. The minimum distance is 2.","solution":"def min_distance_to_water_station(n, l, m, participants, water_stations): results = [] for s in participants: min_distance = float(\'inf\') for w in water_stations: distance = min(abs(s - w), l - abs(s - w)) if distance < min_distance: min_distance = distance results.append(min_distance) return results"},{"question":"In a distant land, the annual Magic Show Extravaganza is a grand event where magicians from all over come to showcase their talents. Magicians perform a series of spells, each spell requiring a certain amount of magic power. The goal of each magician is to perform the maximum number of spells they can before they run out of magic power. Each magician starts with a certain amount of initial magic power. The spells are listed in the order they need to be performed, and each spell has a fixed cost in terms of magic power. A magician cannot skip spells or rearrange the order; they must perform them in the given sequence or stop if they don\'t have enough magic power to perform the next spell. Your task is to help the magicians determine the maximum number of spells they can perform. The first line contains an integer M (1 le M le 10^{5}), the number of magicians. The next line contains an integer S (1 le S le 10^{5}), the number of spells each magician aims to perform. The following M lines each contain two inputs: the initial magic power P_i (1 le P_i le 10^{9}) of the i-th magician, followed by a list of S space-separated integers C_{i1}, C_{i2}, ldots, C_{iS} (1 le C_{ij} le 10^{6}), which are the costs of the spells for the i-th magician. Output M lines, each line containing a single integer, which is the maximum number of spells the i-th magician can perform before running out of magic power. # Example Input ``` 2 3 10 3 4 6 15 5 5 5 ``` Output ``` 2 3 ``` # Explanation For the first magician, they have 10 magic power and the spells cost 3, 4, and 6 respectively. They can perform the first and second spells (total cost 7) but not the third spell (would require an additional 6 power, total 13). For the second magician, they have 15 magic power and the spells cost 5, 5, and 5. They can perform all three spells (total cost 15).","solution":"def max_spells(M, S, magicians_data): results = [] for i in range(M): P_i, spell_costs = magicians_data[i][0], magicians_data[i][1] current_power = P_i spells_performed = 0 for cost in spell_costs: if current_power >= cost: current_power -= cost spells_performed += 1 else: break results.append(spells_performed) return results"},{"question":"You are given a positive integer array representing the political stability index of different regions in a country. To stabilize the entire country, it is required to equalize the political stability index of all regions to the same value. In one operation, you can increase the index of any one region by 1. Your task is to determine the minimum number of operations required to equalize the indexes of all regions to the maximum index in the array. # Input Format The first line contains a single integer t (1 le t le 10) — the number of test cases. Each test case consists of two lines: - The first line contains a single integer n (1 le n le 10^5) — the number of regions. - The second line contains n space-separated positive integers, the political stability indexes of the regions. # Output Format For each test case, output a single integer — the minimum number of operations required to equalize the indexes of all regions to the maximum index in the array. # Example Input ``` 2 5 1 2 3 4 5 4 10 10 10 10 ``` Output ``` 10 0 ``` # Explanation In the first test case, the maximum index is 5. To equalize all indexes to 5, we can perform the following operations: - Increase the first region from 1 to 5 in 4 operations. - Increase the second region from 2 to 5 in 3 operations. - Increase the third region from 3 to 5 in 2 operations. - Increase the fourth region from 4 to 5 in 1 operation. So, the total number of operations is 4 + 3 + 2 + 1 = 10. In the second test case, all regions already have the same index (10), so no operations are needed.","solution":"def min_operations_to_equalize(t, test_cases): results = [] for case in test_cases: n = case[0] indexes = case[1] max_index = max(indexes) operations = sum(max_index - x for x in indexes) results.append(operations) return results"},{"question":"You are given a permutation of integers from 1 to n. Your task is to find the longest increasing subsequence (LIS) in this permutation and output its length. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. The first line of the input contains a single integer n (1 ≤ n ≤ 200,000) — the length of the permutation. The second line contains n distinct integers from 1 to n representing the permutation. Print a single integer — the length of the longest increasing subsequence in the permutation. For example, if the input is: ``` 5 3 1 2 5 4 ``` The output should be: ``` 3 ``` The longest increasing subsequence in this case is [1, 2, 5].","solution":"import bisect def longest_increasing_subsequence_length(n, permutation): This function finds the length of the longest increasing subsequence in a given permutation of integers. Parameters: n (int): The length of the permutation. permutation (list of int): A list of distinct integers from 1 to n representing the permutation. Returns: int: The length of the longest increasing subsequence. # List to store the current longest increasing subsequence lis = [] for num in permutation: pos = bisect.bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis)"},{"question":"A journey planner app requires that you calculate the optimal (shortest) path to traverse between different landmarks in a city. The city is represented as a directed graph of `n` nodes and `m` edges, where nodes represent landmarks and edges represent roads between these landmarks, detailing the travel time between them. You need to find the minimal travel time between two specified landmarks or determine if such a path doesn\'t exist. You are given multiple queries, each containing two landmarks, for which you have to output the shortest travel time or indicate that reaching the destination is impossible. The first line of input contains two integers `n` and `m` (1 ≤ n, m ≤ 100000) - the number of landmarks and the number of roads, respectively. The next `m` lines each contain three integers `u`, `v`, and `t` (1 ≤ u, v ≤ n, 1 ≤ t ≤ 1000), indicating there is a directed road from landmark `u` to landmark `v` that takes `t` minutes to travel. The next line contains a single integer `q` (1 ≤ q ≤ 100000), the number of queries. Each of the next `q` lines contains two integers `a` and `b` (1 ≤ a, b ≤ n) - specifying a query asking for the shortest travel time from landmark `a` to landmark `b`. For each of the `q` queries, output the minimal travel time in minutes, or `-1` if there is no possible path from `a` to `b`. Example: Input: ``` 4 4 1 2 10 2 3 20 3 4 30 1 4 60 3 1 4 1 3 2 4 ``` Output: ``` 60 30 50 ``` Explanation: 1. The shortest path from landmark `1` to landmark `4` is directly `1 -> 4`, which takes `60` minutes. 2. The shortest path from landmark `1` to landmark `3` is `1 -> 2 -> 3`, which takes `10 + 20 = 30` minutes. 3. The shortest path from landmark `2` to landmark `4` is `2 -> 3 -> 4`, which takes `20 + 30 = 50` minutes.","solution":"import heapq import sys def dijkstra(n, graph, start): INF = sys.maxsize distances = [INF] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def minimal_travel_time(n, m, edges, queries): graph = [[] for _ in range(n + 1)] for u, v, t in edges: graph[u].append((v, t)) results = [] for start, end in queries: distances = dijkstra(n, graph, start) if distances[end] == sys.maxsize: results.append(-1) else: results.append(distances[end]) return results # Example of using the function n = 4 m = 4 edges = [ (1, 2, 10), (2, 3, 20), (3, 4, 30), (1, 4, 60) ] queries = [ (1, 4), (1, 3), (2, 4) ] print(minimal_travel_time(n, m, edges, queries))"},{"question":"You are given a binary string s of length n (1 ≤ n ≤ 1000). The binary string consists of characters \'0\' and \'1\'. Your task is to find the length of the longest substring that consists of alternating characters (i.e., no two consecutive characters are the same). For example, in the binary string \\"101010\\", the longest alternating substring is \\"101010\\" with length 6. For the binary string \\"1100\\", the longest alternating substring is \\"10\\" or \\"01\\" with length 2. Input: - A single line containing the binary string s. Output: - A single integer — the length of the longest alternating substring. Examples: Input: 101010 Output: 6 Input: 1100 Output: 2 Input: 1001001110 Output: 3","solution":"def longest_alternating_substring(s): Returns the length of the longest alternating substring in a binary string s. if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] != s[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"You are tasked with verifying a coding challenge that may potentially lead to a security breach if not handled correctly. Specifically, the challenge involves checking whether a provided URL can be accessed without errors or redirects. Write a function `validate_url` that takes a single argument: - `url` (string): A string representing the URL to be validated. The function should return a boolean value: - `True` if the URL responds with a status code `200` when checked with an HTTP GET request. - `False` otherwise. Note: 1. You are allowed to use the `requests` library in Python to make the HTTP requests. 2. Ensure that the solution handles any exceptions that may occur during the request gracefully. 3. Only consider the URL valid if it returns a status code `200`. Function signature: ```python def validate_url(url: str) -> bool: ``` # Example: ```python # Example 1 url = \\"https://www.example.com\\" print(validate_url(url)) # Should return True if the URL is accessible and returns a 200 status code # Example 2 url = \\"https://www.nonexistentwebsite.com\\" print(validate_url(url)) # Should return False if the URL is inaccessible or does not return a 200 status code ``` # Constraints: 1. The URLs provided will always be well-formed. 2. The function should handle typical network issues (e.g., timeouts, connection errors) by returning `False`.","solution":"import requests def validate_url(url: str) -> bool: Validates if a given URL responds with a status code 200. Parameters: url (str): The URL to be validated. Returns: bool: True if the URL returns a status code 200, False otherwise. try: response = requests.get(url, timeout=5) return response.status_code == 200 except requests.RequestException: return False"},{"question":"Peter loves Fibonacci numbers, and one day he was amazed to find out that for any integer n, you can represent it as a sum of distinct, non-consecutive Fibonacci numbers. This is known as the Zeckendorf representation. For example, the Zeckendorf representation of 100 is 89 + 8 + 3, and the Zeckendorf representation of 34 is simply 34. Given an integer n, can you find its Zeckendorf representation? The first and only input line contains a single integer n (1 ≤ n ≤ 10^9). Output the distinct Fibonacci numbers that sum up to n, in non-increasing order. For example: Input: 100 Output: 89 8 3 Input: 34 Output: 34","solution":"def zeckendorf_representation(n): Finds the Zeckendorf representation of a given integer n. def generate_fibonacci(limit): fibs = [1, 2] while fibs[-1] <= limit: fibs.append(fibs[-1] + fibs[-2]) return fibs[:-1] fibs = generate_fibonacci(n) result = [] while n > 0: for fib in reversed(fibs): if fib <= n: result.append(fib) n -= fib fibs = fibs[:fibs.index(fib)] break return result"},{"question":"In a small town, there is a popular event called the \\"Ascending Tower\\" competition. In this challenge, participants must build towers using blocks of different heights. Each block has a unique height, and each participant is given a list of blocks to use in a specific order. The goal is to build the tallest tower possible where each block must be placed on a smaller block (strictly ascending order). You are given a list of blocks with their heights, and your task is to determine the maximum height of the tower that can be constructed from this list. Input: - The first line contains an integer n (1 ≤ n ≤ 200,000) — the number of blocks. - The second line contains n integers h_i (1 ≤ h_i ≤ 10^9) — the heights of the blocks in the order given. Output: - Print a single integer — the maximum height of the tower that can be constructed using the blocks in ascending order. Example: Input: 6 4 2 3 1 5 6 Output: 4 Explanation: One possible ascending tower could use blocks with heights 2, 3, 5, and 6. Another possible solution might use blocks with heights 1, 2, 3, and 5. Both have a maximum height of 4 blocks. Your task is to determine the length of the longest ascending subsequence of given blocks\' heights.","solution":"def max_ascending_tower_height(n, heights): Determines the length of the longest ascending subsequence of given block heights. :param n: Number of blocks :param heights: List of heights in the given order :return: Maximum height of the tower that can be constructed in ascending order from bisect import bisect_left if n == 0: return 0 # Initialize the list that will store the smallest ending value of an increasing subsequence of each length lis = [] for h in heights: # Find the place in lis where height h could replace an element to maintain the list increasing pos = bisect_left(lis, h) if pos < len(lis): lis[pos] = h else: lis.append(h) return len(lis)"},{"question":"You are working on a logistics and distribution project for a large manufacturing company. The company operates numerous warehouses spread across different cities. The goal is to improve delivery efficiency by optimizing the routes taken to deliver goods between warehouses. The company has a network of roads connecting the warehouses in the form of a tree. A tree is a connected graph with (n) nodes and (n-1) edges. In this scenario, nodes represent warehouses and edges represent roads. Each road between two warehouses has an associated distance. Your task is to write a program to answer multiple queries. Each query asks for the shortest distance between two specific warehouses. The first line contains a single integer (n) (2 ≤ (n) ≤ 100,000) — the number of warehouses. Each of the next (n-1) lines contains three integers (u, v), and (d) (1 ≤ (u, v) ≤ (n); (u neq v); 1 ≤ (d) ≤ 1,000) — indicating a road of distance (d) between warehouses (u) and (v). The next line contains an integer (q) (1 ≤ (q) ≤ 100,000) — the number of queries. Each of the next (q) lines contains two integers (x) and (y) (1 ≤ (x, y) ≤ (n)) — representing a query asking for the shortest distance between warehouses (x) and (y). Output (q) lines; each line should contain a single integer — the shortest distance between warehouses (x) and (y) for each query. **Example:** Input: ``` 5 1 2 3 1 3 2 3 4 4 3 5 5 3 2 4 4 5 1 5 ``` Output: ``` 9 9 7 ``` Explanation: The warehouse network can be visualized as a tree where warehouse 1 is connected to warehouse 2 with a distance of 3, to warehouse 3 with a distance of 2, warehouse 3 is connected to warehouse 4 with a distance of 4, and warehouse 3 is connected to warehouse 5 with a distance of 5. The query answers are the shortest distances between the specified pairs of warehouses.","solution":"import sys from collections import defaultdict, deque sys.setrecursionlimit(200000) def add_edge(graph, u, v, d): graph[u].append((v, d)) graph[v].append((u, d)) def lca_preprocess(graph, n, root=1): # To store the parent and depth of each node parent = [-1] * (n + 1) depth = [0] * (n + 1) max_depth = (n-1).bit_length() lca_sparse = [[-1] * (max_depth) for _ in range(n + 1)] # BFS to populate parents and depth queue = deque([root]) parent[root] = root while queue: node = queue.popleft() for adj, weight in graph[node]: if adj != parent[node]: parent[adj] = node depth[adj] = depth[node] + 1 queue.append(adj) # Initialize first ancestor for i in range(1, n + 1): lca_sparse[i][0] = parent[i] # Build sparse table for j in range(1, max_depth): for i in range(1, n + 1): if lca_sparse[i][j-1] != -1: lca_sparse[i][j] = lca_sparse[lca_sparse[i][j-1]][j-1] return lca_sparse, depth, max_depth def lca(u, v, depth, lca_sparse, max_depth): if depth[u] < depth[v]: u, v = v, u # Lift u to the same depth as v diff = depth[u] - depth[v] for i in range(max_depth): if (diff >> i) & 1: u = lca_sparse[u][i] if u == v: return u for i in reversed(range(max_depth)): if lca_sparse[u][i] != -1 and lca_sparse[u][i] != lca_sparse[v][i]: u = lca_sparse[u][i] v = lca_sparse[v][i] return lca_sparse[u][0] def calculate_distance(lca_sparse, depth, max_depth, dist, u, v): ancestor = lca(u, v, depth, lca_sparse, max_depth) return dist[u] + dist[v] - 2 * dist[ancestor] def preprocess_distances(graph, n): dist = [0] * (n + 1) def dfs(u, parent, curr_dist): dist[u] = curr_dist for v, weight in graph[u]: if v != parent: dfs(v, u, curr_dist + weight) dfs(1, -1, 0) return dist def warehouse_distances(n, edges, queries): graph = defaultdict(list) for u, v, d in edges: add_edge(graph, u, v, d) lca_sparse, depth, max_depth = lca_preprocess(graph, n) dist = preprocess_distances(graph, n) results = [] for u, v in queries: results.append(calculate_distance(lca_sparse, depth, max_depth, dist, u, v)) return results"},{"question":"A small town has a unique way of organizing its annual fair. The fair consists of n activities, each of which takes place exactly once and has a specific starting and ending time. Some activities do not overlap in time, meaning you can attend the whole duration of each of these activities, while some may partially or fully overlap, requiring you to choose which one to attend. You are given the schedule of these n activities with their starting and ending times, and your task is to find the maximum number of non-overlapping activities you can attend. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of activities. Next n lines contain the descriptions of the activities as pairs of integers ai and bi (0 ≤ ai < bi ≤ 10^9), where ai is the starting time and bi is the ending time of the i-th activity. Print a single integer — the maximum number of non-overlapping activities you can attend. Here are some examples: Example input: ``` 5 1 4 2 3 3 5 6 8 7 9 ``` Example output: ``` 3 ``` Explanation: In the given example, you can attend the activities with (2, 3), (3, 5), and (6, 8) without any overlaps.","solution":"def max_non_overlapping_activities(activities): Returns the maximum number of non-overlapping activities. :param activities: List of tuples representing the start and end times of activities. :return: Maximum number of non-overlapping activities. activities.sort(key=lambda x: x[1]) # Sort by ending time count = 0 last_end_time = 0 for start, end in activities: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"You are given two strings, `s1` and `s2`, both consisting of lowercase English letters. Your task is to determine whether it is possible to transform `s1` into `s2` by reordering its characters and performing some number of adjacent swaps. An adjacent swap is defined as swapping two neighboring characters in a string. For instance, in the string \\"abcd\\", you can swap \'b\' and \'c\' to get \\"acbd\\", or swap \'c\' and \'d\' to get \\"abdc\\". In other words, you need to determine if it is possible to sort both `s1` and `s2` in such a way that they become identical, considering that you can only use adjacent swaps. Return \\"YES\\" if it is possible to transform `s1` into `s2` by reordering its characters via adjacent swaps. Otherwise, return \\"NO\\". # Input format - The first line contains the string `s1` with length `n` (1 ≤ n ≤ 100,000). - The second line contains the string `s2` with length `n`. # Output format - Print \\"YES\\" if it\'s possible to transform `s1` into `s2` by reordering via adjacent swaps. Otherwise, print \\"NO\\". # Sample Input 1 ```plaintext ab ba ``` # Sample Output 1 ```plaintext YES ``` # Sample Input 2 ```plaintext abc bca ``` # Sample Output 2 ```plaintext YES ``` # Sample Input 3 ```plaintext abcd abdc ``` # Sample Output 3 ```plaintext NO ```","solution":"def can_transform_by_adjacent_swaps(s1, s2): Determines if it\'s possible to transform s1 into s2 by reordering via adjacent swaps. Args: s1 (str): Input string 1. s2 (str): Input string 2. Returns: str: \\"YES\\" if transformation is possible, otherwise \\"NO\\". # Both strings should be of the same length if len(s1) != len(s2): return \\"NO\\" # Check if both strings have the same characters by sorting and comparing if sorted(s1) == sorted(s2): return \\"YES\\" else: return \\"NO\\""},{"question":"In a certain city, a new public transportation system is being developed which involves a monorail network that aims to minimize travel time across the city. The city can be modeled as a tree with `n` nodes and node 1 being the root of the tree. Each node corresponds to a station and edges between nodes represent direct monorail routes with certain travel times. The `i-th` monorail route connects the `u_i`-th node to the `v_i`-th node and requires `w_i` minutes to travel. The transport department wants to know the minimal time required to reach all other stations from the root station, station 1. Additionally, they also want to know the farthest node from the root node. Write a program to compute the minimal time required to reach each station starting from the root node and also find the station that is farthest from the root node. The first line contains an integer `n` (2 ≤ n ≤ 10^5) — the number of stations. Each of the next `n-1` lines contains three integers `u_i`, `v_i`, `w_i` (1 ≤ u_i, v_i ≤ n, 1 ≤ w_i ≤ 10^4) describing a monorail route between nodes `u_i` and `v_i` with a travel time of `w_i` minutes. Output `n-1` integers where the `i-th` integer represents the minimum time required to reach station `i+1` from the root station, followed by a single integer representing the farthest node from the root. For example, consider the following input: ``` 6 1 2 3 1 3 2 2 4 4 2 5 1 3 6 5 ``` For the above input, the expected output is: ``` 3 2 7 4 7 6 ``` This indicates that: - The minimum time required to reach station 2 from the root station is 3 minutes. - The minimum time required to reach station 3 from the root station is 2 minutes. - The minimum time required to reach station 4 from the root station is 7 minutes. - The minimum time required to reach station 5 from the root station is 4 minutes. - The minimum time required to reach station 6 from the root station is 7 minutes. - The farthest node from the root station is station 6.","solution":"import heapq from collections import defaultdict def minimal_travel_time(n, edges): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Using Dijkstra\'s Algorithm to find the minimal time from the root (node 1) min_heap = [(0, 1)] # (time, node) shortest_times = {i: float(\'inf\') for i in range(1, n + 1)} shortest_times[1] = 0 visited = set() while min_heap: current_time, u = heapq.heappop(min_heap) if u in visited: continue visited.add(u) for v, travel_time in graph[u]: if v not in visited: new_time = current_time + travel_time if new_time < shortest_times[v]: shortest_times[v] = new_time heapq.heappush(min_heap, (new_time, v)) # Extracting the required outputs shortest_times_list = [shortest_times[i] for i in range(2, n+1)] farthest_node = max(shortest_times, key=shortest_times.get) return shortest_times_list, farthest_node # Example input: n = 6 edges = [ (1, 2, 3), (1, 3, 2), (2, 4, 4), (2, 5, 1), (3, 6, 5) ] minimal_travel_time(n, edges)"},{"question":"Rick wants to distribute his latest invention to his friends as fast as possible. He has `n` friends, each represented by a unique number from `1` to `n`. Rick has `m` delivery drones at his disposal, and each drone can only visit certain friends based on the plan Rick assigns to it. Each delivery plan is represented by three integers: `a`, `b`, and `k`, where: - The drone can visit any friend numbered between `a` and `b` inclusive. - The drone will take `k` units of time to deliver the invention to each friend it visits in the range. Rick wants to know the minimum time required to deliver his invention to each friend. The first line contains three integers `n`, `m` and `q` (`1 ≤ n, m, q ≤ 100,000`) — the number of friends, the number of drones, and the number of plans, respectively. The next `m` lines each contain three integers `a`, `b`, and `k` (`1 ≤ a ≤ b ≤ n`, `1 ≤ k ≤ 1,000,000`), describing the delivery range and time for each drone. Print `n` integers separated by spaces, where the `i-th` integer represents the minimum time required to deliver the invention to the i-th friend, or `-1` if it is not possible to deliver the invention to that friend. # Example: Input: 7 3 3 1 3 2 2 5 3 4 7 1 Output: 2 2 2 1 1 1 1","solution":"def minimum_delivery_time(n, m, plans): import sys min_time = [sys.maxsize] * n # Use a large number to initialize the time for each friend for a, b, k in plans: for friend in range(a-1, b): min_time[friend] = min(min_time[friend], k) return [time if time != sys.maxsize else -1 for time in min_time]"},{"question":"You are working on a highly-scalable distributed system and need to design a load balancer that allocates incoming requests to different servers based on their current load. Each server has a certain capacity and can handle a limited number of requests simultaneously. Once a server reaches its full capacity, no more requests can be assigned to it until it completes some of its current requests. Your task is to implement a helper function that, given the status of all servers and the incoming request, determines which server should handle the next request. If multiple servers can handle the request, choose the server with the lowest index. The function should follow these rules: 1. An incoming request can only be assigned to a server if the current number of requests it is handling is less than its capacity. 2. If no server can handle the request, the function should return `-1`. Here is the function signature: ```python def allocate_request(servers: List[Tuple[int, int]], request: int) -> int: ``` - `servers`: A list of tuples where each tuple has two integers. The first integer in each tuple represents the current number of requests being handled by the server, and the second integer represents the total capacity of the server. - `request`: An integer representing the incoming request. # Input - The first line contains an integer `n` (1 leq n leq 10^5) — the number of servers. - The following `n` lines each contain two space-separated integers, `current_load` and `capacity` (0 leq current_load leq capacity leq 10^5) — representing the current load and capacity of each respective server. - The last line contains an integer `request` — representing the incoming request (0 or 1). # Output - Print a single integer — the index (0-based) of the server which will handle the incoming request. If no server can handle the request, print \\"-1\\". # Example Input ``` 3 2 5 0 3 4 4 1 ``` Output ``` 1 ``` Explanation: The second server (index 1) has a current load of 0 and a capacity of 3, so it can handle the request.","solution":"from typing import List, Tuple def allocate_request(servers: List[Tuple[int, int]], request: int) -> int: Determines which server should handle the next request based on their current load and capacity. Parameters: servers (List[Tuple[int, int]]): A list of tuples where each tuple has two integers, the first integer indicates the current load of the server and the second integer indicates the total capacity of the server. request (int): The incoming request (0 or 1). Returns: int: The index of the server which will handle the incoming request. If no server can handle the request, returns -1. for i, (current_load, capacity) in enumerate(servers): if current_load + request <= capacity: return i return -1"},{"question":"A group of friends have planned a competitive coding marathon. They have decided to work in pairs and each pair will solve a number of problems. Since they have limited resources, they want to minimize the maximum load of any pair. There are n friends, and each friend has a skill level given in the array a, where a[i] represents the skill level of the i-th friend. Each pair should work together on problems such that each friend is assigned to exactly one pair (i.e., there can be no single friend left without a partner). Create a program to determine the minimum possible value of the maximum load that any pair will take. The load of a pair is the sum of their skill levels. Input: - The first line contains an integer n (2 ≤ n ≤ 200,000, n is even) — the number of friends. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the skill levels of the friends. Output: - Output a single integer — the minimum possible value of the maximum load of any pair. Example 1: Input: 6 1 2 3 4 5 6 Output: 7 Example 2: Input: 4 4 7 2 5 Output: 9 Explanation: In the first example, the pairs can be (1, 6), (2, 5), and (3, 4). The loads of the pairs are 7, 7, and 7 respectively. Therefore, the minimum possible value of the maximum load is 7. In the second example, the pairs can be (2, 7) and (4, 5). The loads of the pairs are 9 and 9 respectively. Thus, the minimum possible value of the maximum load is 9.","solution":"def minimize_max_load(n, skill_levels): skill_levels.sort() max_load = 0 for i in range(n // 2): load = skill_levels[i] + skill_levels[n - i - 1] max_load = max(max_load, load) return max_load"},{"question":"You are given an array of integers and need to divide it into two non-empty subarrays such that the difference between the sum of elements in the two subarrays is minimized. Write a program to find this minimum difference. For example, if the array is [3, 1, 4, 2, 2], you can divide it into [3, 1, 2] and [4, 2] to get the sums 6 and 6, offering a difference of 0, which is the minimum possible. The first line of input contains an integer t (1 leq t leq 100) — the number of test cases. Each test case consists of two lines: - The first line contains an integer n (2 leq n leq 50) — the size of the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 1000) — the elements of the array. For each test case, output the minimum possible difference of the sums. # Example **Input:** ``` 2 5 3 1 4 2 2 3 1 2 3 ``` **Output:** ``` 0 0 ``` # Explanation In the first test case, dividing the array [3, 1, 4, 2, 2] into [3, 1, 2] and [4, 2] gives sums of 6 both, so the difference is 0. In the second test case, dividing the array [1, 2, 3] into [1, 2] and [3] gives sums of 3 and 3, so the difference is 0.","solution":"def find_min_difference(t, test_cases): def subset_sums(arr): n = len(arr) total_sum = sum(arr) dp = [False] * (total_sum + 1) dp[0] = True for num in arr: for j in range(total_sum, num - 1, -1): if dp[j - num]: dp[j] = True min_diff = float(\'inf\') for s1 in range(total_sum // 2 + 1): if dp[s1]: s2 = total_sum - s1 min_diff = min(min_diff, abs(s2 - s1)) return min_diff results = [] for case in test_cases: n, arr = case min_diff = subset_sums(arr) results.append(min_diff) return results # Example input processing and usage if __name__ == \\"__main__\\": t = 2 test_cases = [ (5, [3, 1, 4, 2, 2]), (3, [1, 2, 3]) ] for res in find_min_difference(t, test_cases): print(res)"},{"question":"Given an array of integers, you are to process a series of operations on this array. The operations are of two types: 1. Update an element at a specified position to a new value. 2. Query the maximum difference between any two elements in a subarray defined by a range of indices. Formally, you are given an array a consisting of n integers, and you will receive q queries. Each query can be one of the following: - `1 x v`: Update the element at position x to the new value v. - `2 l r`: Query the maximum absolute difference between any two elements in the subarray a[l...r]. The first integer in the input is n (1 le n le 10^5), the number of elements in the array. The second integer is q (1 le q le 10^5), the number of queries. Each of the next n integers represents an element of the array. The following q lines represent each query in the format defined above. Print the result for each query of the second type on a new line. # Example: Input: ``` 6 5 1 3 5 2 8 6 2 1 6 1 3 10 2 2 5 1 6 1 2 3 6 ``` Output: ``` 7 8 9 ``` # Explanation: - The initial array is `[1, 3, 5, 2, 8, 6]`. - The first query asks for the maximum difference in the entire array, which is `8 - 1 = 7`. - The second query updates the element at index 3 to 10, resulting in the array `[1, 3, 10, 2, 8, 6]`. - The third query asks for the maximum difference in the subarray `[3, 10, 2, 8]`, which is `10 - 2 = 8`. - The fourth query updates the element at index 6 to 1, resulting in the array `[1, 3, 10, 2, 8, 1]`. - The final query asks for the maximum difference in the subarray `[10, 2, 8, 1]`, which is `10 - 1 = 9`.","solution":"class ArrayProcessor: def __init__(self, array): self.array = array def update(self, index, value): self.array[index - 1] = value # indexes in the query are 1-based def max_difference(self, left, right): subarray = self.array[left - 1:right] # indexes in the query are 1-based return max(subarray) - min(subarray) def process_queries(n, q, array, queries): processor = ArrayProcessor(array) results = [] for query in queries: if query[0] == 1: _, x, v = query processor.update(x, v) elif query[0] == 2: _, l, r = query results.append(processor.max_difference(l, r)) return results"},{"question":"You are given an array of integers representing the height of buildings along a street where each building has a width of 1 unit. The sun rises from the east (left side of the array) and sets in the west (right side of the array). A building blocks the sunlight for all buildings to its right that are shorter than or equal to itself. Your task is to determine how many buildings will receive sunlight. For example, consider the array `[3, 1, 4, 5, 2, 6]`. In this case, the buildings with height `3`, `4`, `5`, and `6` will receive sunlight because each of these buildings is taller than all the buildings to its left that receive sunlight. Write a function that takes a list of integers as input and returns the number of buildings that receive sunlight. # Input - A list of integers `heights` where `1 ≤ |heights| ≤ 1000` and each `1 ≤ heights[i] ≤ 1000`. # Output - Return 1 integer - the count of buildings that receive sunlight. # Examples Example 1 ``` Input: [3, 1, 4, 5, 2, 6] Output: 4 Explanation: Buildings with heights 3, 4, 5, and 6 receive sunlight. ``` Example 2 ``` Input: [2, 2, 2, 2] Output: 1 Explanation: Only the first building receives sunlight. Every other building is blocked by the one before it of equal height. ``` Example 3 ``` Input: [1, 3, 2, 4, 2, 5] Output: 4 Explanation: Buildings with heights 1, 3, 4, and 5 receive sunlight. ``` Implement the function as follows: ```python def count_buildings_with_sunlight(heights: list) -> int: # implementation ```","solution":"def count_buildings_with_sunlight(heights: list) -> int: Returns the number of buildings that receive sunlight. count = 0 max_height = 0 for height in heights: if height > max_height: count += 1 max_height = height return count"},{"question":"There is a country with n cities and m bidirectional roads connecting them. Each road has its own weight representing the time it takes to travel between two connected cities. The country wants to celebrate its national day by allowing everyone to travel freely, meaning by taking the shortest time to travel between any two cities. Given the cities and the roads connecting them, determine the shortest time it takes to travel between every pair of cities. If it’s impossible to travel between any two cities, denote the time as -1 for that pair. The first line of the input contains two integers n (1 ≤ n ≤ 500) and m (1 ≤ m ≤ 10000) — the number of cities and the number of roads. The next m lines describe the roads. Each road is represented as three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — the cities that the road connects and the weight of the road respectively. Output should be a matrix where the element at i-th row and j-th column represents the shortest travel time from city i to city j. If city i can\'t reach city j, output -1 for that cell. Examples: Input: 4 4 1 2 5 1 3 10 2 3 3 3 4 1 Output: 0 5 8 9 5 0 3 4 8 3 0 1 9 4 1 0 Input: 3 1 1 2 4 Output: 0 4 -1 4 0 -1 -1 -1 0 Notes: - The distance from a city to itself should always be 0. - If there are multiple roads connecting two cities, the one with the smallest weight should be considered.","solution":"def floyd_warshall(n, m, roads): # Initialize distance matrix with \\"infinity\\" concept dist = [[float(\'inf\')] * n for _ in range(n)] # Set distance from a city to itself to 0 for i in range(n): dist[i][i] = 0 # Populate initial distances with given roads for u, v, w in roads: dist[u-1][v-1] = min(dist[u-1][v-1], w) # cities are 1-indexed, convert to 0-indexed dist[v-1][u-1] = min(dist[v-1][u-1], w) # bidirectional roads # Floyd-Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Replace \'inf\' with -1 for unreachable cities for i in range(n): for j in range(n): if dist[i][j] == float(\'inf\'): dist[i][j] = -1 return dist"},{"question":"Ivan loves palindromes. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For example, the number 121, the phrase \\"A man, a plan, a canal, Panama\\", and the word \\"radar\\" are all palindromes. Ivan and his friend Boris are playing a game where they try to find the longest palindromic substring from a given string. A substring is a contiguous sequence of characters within a string. Given a string s consisting of lowercase letters, write a code to determine the longest palindromic substring in s. The first line of input contains a single integer n (1 ≤ n ≤ 1000), the length of the string s. The second line of input contains the string s, which consists of n lowercase English letters. Output the longest palindromic substring of the input string s. If there are multiple longest palindromic substrings of the same length, return the one which appears first. For example: Input: 7 babad Output: bab Note: \\"aba\\" is also a valid answer, but \\"bab\\" appears first.","solution":"def longest_palindromic_substring(s: str) -> str: Returns the longest palindromic substring in the given string s. n = len(s) if n == 0: return \\"\\" start = 0 max_len = 1 for i in range(1, n): # Check for even length palindromes low, high = i - 1, i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_len: start = low max_len = high - low + 1 low -= 1 high += 1 # Check for odd length palindromes low, high = i - 1, i + 1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_len: start = low max_len = high - low + 1 low -= 1 high += 1 return s[start:start + max_len]"},{"question":"You are given a 2D grid consisting of n rows and m columns. Each cell in the grid can either be empty (represented by \'.\') or contain an obstacle (represented by \'#\'). You are initially standing at the cell (1, 1) and you want to reach the cell (n, m). You can only move right (→) or down (↓) from a cell. Write a program to determine if it is possible to reach the cell (n, m) from the cell (1, 1) without moving through any obstacles. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next n lines contain m characters each describing the grid. The j-th character in the i-th line denotes the cell (i, j) and is either \'.\' (an empty cell) or \'#\' (a cell with an obstacle). Print \\"YES\\" if it is possible to reach the cell (n, m) from the cell (1, 1) without moving through any obstacles. Otherwise, print \\"NO\\". In the first example, you can move right and then down to reach the destination. In the second example, you are blocked by obstacles and can\'t reach the destination.","solution":"def can_reach_end(n, m, grid): Determines if it\'s possible to reach the cell (n, m) from the cell (1, 1) without moving through any obstacles in a given grid. Parameters: n (int): Number of rows. m (int): Number of columns. grid (list of str): 2D grid where each cell is \'.\' (empty) or \'#\' (obstacle). Returns: str: \\"YES\\" if it\'s possible to reach cell (n, m), otherwise \\"NO\\". if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" # Initialize a DP table to track reachable cells dp = [[False] * m for _ in range(n)] dp[0][0] = True for i in range(n): for j in range(m): if grid[i][j] == \'#\': continue if i > 0 and dp[i-1][j]: dp[i][j] = True if j > 0 and dp[i][j-1]: dp[i][j] = True return \\"YES\\" if dp[n-1][m-1] else \\"NO\\""},{"question":"Jessica enjoys solving puzzles, and she stumbled upon a particularly interesting problem involving strings. She wants to know the number of distinct substrings of a given string. A substring is defined as a contiguous sequence of characters within a string. Given a string s of length n, the task is to count the number of distinct substrings of s. The input consists of a single line containing the string s (1 ≤ n ≤ 100, \'a\' ≤ s[i] ≤ \'z\'). The output should be a single integer representing the number of distinct substrings in s. For example: Input: ``` ababa ``` Output: ``` 9 ``` Explanation: The distinct substrings of \\"ababa\\" are: \\"a\\", \\"b\\", \\"ab\\", \\"ba\\", \\"aba\\", \\"bab\\", \\"ababa\\", \\"baba\\", and \\"abab\\". Hence, there are 9 distinct substrings.","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings of the given string s. n = len(s) substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"You are given a rectangular grid of cells with `n` rows and `m` columns (2 ≤ n, m ≤ 500) where each cell either contains a building (\'B\') or an empty space (\'.\'). Your task is to place signal towers on some of the empty spaces such that every building in the grid is within the range of at least one signal tower. A signal tower has a range that covers all cells that share a row or column with it until a building or the edge of the grid is reached. Determine the minimum number of signal towers needed to ensure every building in the grid is covered by at least one signal tower. The first line of input contains two integers `n` and `m` — the number of rows and columns in the grid, respectively. The next `n` lines each contain a string of length `m` that represents the grid, consisting of characters \'B\' (for buildings) and \'.\' (for empty spaces). Output a single integer, the minimum number of signal towers required. Example: ``` Input: 4 4 ..B. BB.. ..B. .BB. Output: 3 ``` Explanation: In the provided example grid: ``` ..B. BB.. ..B. .BB. ``` Placing signal towers at (1,2), (3,2), and (4,2) would ensure that all buildings are within the range of at least one signal tower.","solution":"def min_signal_towers(n, m, grid): rows_with_building = [False] * n cols_with_building = [False] * m # Identify which rows and columns contain buildings for i in range(n): for j in range(m): if grid[i][j] == \'B\': rows_with_building[i] = True cols_with_building[j] = True # Count rows and columns that contain buildings rows_count = sum(rows_with_building) cols_count = sum(cols_with_building) # The minimum number of signal towers needed is the minimum of rows_count and cols_count return min(rows_count, cols_count) # Example usage: # n, m = 4, 4 # grid = [ # \\"..B.\\", # \\"BB..\\", # \\"..B.\\", # \\".BB.\\" # ] # print(min_signal_towers(n, m, grid)) # Output: 3"},{"question":"Given two arrays, `in_order` and `pre_order`, representing the in-order and pre-order traversal of a binary tree, respectively, construct the binary tree. The in-order traversal of a binary tree is the sequence in which the nodes are visited in the order: Left subtree, Root, Right subtree. The pre-order traversal of a binary tree is the sequence in which the nodes are visited in the order: Root, Left subtree, Right subtree. Your task is to reconstruct the binary tree from these traversal arrays and output the post-order traversal of the constructed tree. The post-order traversal of a binary tree is the sequence in which the nodes are visited in the order: Left subtree, Right subtree, Root. # Input format - The first line contains an integer `n` (1 ≤ n ≤ 1000), representing the number of nodes in the tree. - The second line contains `n` space-separated integers representing the in-order traversal of the binary tree. - The third line contains `n` space-separated integers representing the pre-order traversal of the binary tree. # Output format - Output the post-order traversal of the constructed binary tree as a space-separated sequence of integers. # Example Input ``` 5 4 2 5 1 3 1 2 4 5 3 ``` Output ``` 4 5 2 3 1 ``` # Explanation In the provided example, the in-order and pre-order traversals are used to reconstruct the following binary tree: ``` 1 / 2 3 / 4 5 ``` The post-order traversal of this tree is: `4 5 2 3 1`.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(in_order, pre_order): if not in_order or not pre_order: return None root_val = pre_order.pop(0) root = TreeNode(root_val) root_index = in_order.index(root_val) root.left = build_tree(in_order[:root_index], pre_order) root.right = build_tree(in_order[root_index+1:], pre_order) return root def postorder_traversal(root, result=None): if result is None: result = [] if root: postorder_traversal(root.left, result) postorder_traversal(root.right, result) result.append(root.val) return result def reconstruct_post_order(n, in_order, pre_order): root = build_tree(in_order, pre_order) return postorder_traversal(root)"},{"question":"Anita loves solving puzzles. One day, she received a puzzle that involves an n x n grid filled with integers. She needs to find the largest sum of any contiguous subgrid within the given grid. Help Anita solve this puzzle by writing a program. A subgrid is any part of the grid defined by selecting a top left corner (i, j) and a bottom right corner (k, l) where 1 ≤ i ≤ k ≤ n and 1 ≤ j ≤ l ≤ n. The sum of a subgrid is the sum of all integers within that subgrid. # Input Format The first line contains a single integer n (1 ≤ n ≤ 100) – the size of the grid. Each of the next n lines contains n integers – the elements of the grid. The integers in the grid are between -1000 and 1000. # Output Format Print a single integer – the largest sum of a contiguous subgrid. # Example Input 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 -10 3 -5 -9 5 Output 29 # Explanation In the last example, the subgrid with the largest sum is: ``` 3 8 10 -4 -1 1 ``` Which gives a sum of 29.","solution":"def find_max_subgrid_sum(grid): Finds the largest sum of any contiguous subgrid within the given grid (2D list). n = len(grid) max_sum = float(\'-inf\') # Precompute prefix sums for each row prefix_sums = [[0] * (n + 1) for _ in range(n)] for i in range(n): for j in range(n): prefix_sums[i][j + 1] = prefix_sums[i][j] + grid[i][j] # Check sums for all possible subgrids for left in range(n): for right in range(left, n): temp_sum = [0] * n for i in range(n): temp_sum[i] = prefix_sums[i][right + 1] - prefix_sums[i][left] # Apply Kadane\'s algorithm on temp_sum array cur_max = temp_sum[0] global_max = temp_sum[0] for i in range(1, n): cur_max = max(temp_sum[i], cur_max + temp_sum[i]) if cur_max > global_max: global_max = cur_max if global_max > max_sum: max_sum = global_max return max_sum"},{"question":"Peter is planning his weekly workout sessions and wants to keep track of his jogging routes. He uses a map represented as a grid with n rows and m columns. Each cell in the grid represents a 1x1 unit square and can either be an open path (\'.\') or an obstacle (\'#\'). Peter starts his jog at the top-left corner of the grid (i.e., cell (1,1)) and aims to reach the bottom-right corner of the grid (i.e., cell (n,m)). Peter can only move either right or down at any point in time. He wants to determine if there exists a valid path from the top-left to the bottom-right corner avoiding obstacles. Write a program to help Peter find out if such a path exists. If a path exists, output \\"YES\\", otherwise output \\"NO\\". The first line of the input contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid. The next n lines each contain m characters (either \'.\' or \'#\'), representing the grid. Output a single line with \\"YES\\" if there is a valid path from the top-left to the bottom-right corner, and \\"NO\\" otherwise. **Example:** Input: ``` 4 4 .... .. .. .... ``` Output: ``` YES ``` Explanation: In this grid, a possible path is (1,1) -> (2,1) -> (3,1) -> (4,1) -> (4,2) -> (4,3) -> (4,4).","solution":"def is_path_exist(n, m, grid): Determines if there is a path from the top-left corner to the bottom-right corner of a grid. :param n: int, number of rows in the grid :param m: int, number of columns in the grid :param grid: list of strings, each string represents a row in the grid where \'.\' is an open path and \'#\' is an obstacle :return: str, \\"YES\\" if a path exists, \\"NO\\" otherwise if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" # Initialize a 2D array for visited status visited = [[False]*m for _ in range(n)] # Use a queue for BFS from collections import deque queue = deque([(0, 0)]) visited[0][0] = True # Directions for moving right and down directions = [(0, 1), (1, 0)] while queue: x, y = queue.popleft() if x == n-1 and y == m-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"Alice is organizing a series of networking events for tech enthusiasts. She has planned events in m different cities and each city will host exactly one event. The cost of hosting an event in a city is given, and Alice has a limited budget to host these events. She needs to maximize the number of events she can organize without exceeding her budget. Each city can host only one event, and each event has a specific fixed cost. Given the list of event costs and Alice\'s budget, determine the maximum number of events she can host. The first line contains an integer m (1 ≤ m ≤ 105) — the number of different cities where the events can be hosted. The second line contains m space-separated integers c1, c2, ..., cm (1 ≤ ci ≤ 109) — the cost of hosting an event in each city. The third line contains a single integer B (1 ≤ B ≤ 1018) — Alice\'s total budget for the events. Output a single integer — the maximum number of events Alice can host without exceeding her budget. Example: Input: 5 4 8 2 6 10 15 Output: 3 Explanation: Alice can host events in the cities with costs 2, 4, and 8, which sum up to 14 without exceeding the budget of 15. Therefore, the maximum number of events she can host is 3.","solution":"def max_events(m, costs, B): Returns the maximum number of events Alice can host without exceeding her budget. Args: m (int): The number of cities. costs (list of int): The costs of hosting events in each city. B (int): Alice\'s total budget. Returns: int: The maximum number of events. costs.sort() # Sort the costs in ascending order total_cost = 0 events_count = 0 for cost in costs: if total_cost + cost <= B: total_cost += cost events_count += 1 else: break return events_count"},{"question":"You are given a tree with `n` nodes, rooted at node 1. Each node has a positive integer value associated with it. Your task is to process `q` queries. Each query is one of the following two types: 1. Change the value of a specific node to a given value. 2. Given two nodes, find the maximum value on the path between these two nodes. The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 100,000) — the number of nodes in the tree and the number of queries. The second line contains `n` integers `v1, v2, ..., vn` (1 ≤ vi ≤ 10^9) — the initial values of the nodes. The next `n-1` lines describe the edges of the tree. Each line contains two integers `u` and `v` (1 ≤ u, v ≤ n) — indicating that there is an edge between nodes `u` and `v`. The next `q` lines each describe a query. Each query is either of the form `1 x y` or `2 u v`. - For a query of type `1 x y`, change the value of node `x` to `y`. - For a query of type `2 u v`, find the maximum value on the simple path from node `u` to node `v`. Output the result of each query of the second type. Example Input: ``` 5 3 4 2 6 1 3 1 2 1 3 3 4 3 5 2 2 5 1 3 10 2 2 5 ``` Example Output: ``` 6 10 ```","solution":"from collections import defaultdict, deque class Tree: def __init__(self, n, values): self.n = n self.values = values[:] self.adj = defaultdict(list) self.parent = [0] * (n + 1) self.max_values = [[0] * (n + 1) for _ in range(n + 1)] def add_edge(self, u, v): self.adj[u].append(v) self.adj[v].append(u) def preprocess(self): self.dfs(1, -1) self.build_max_values() def dfs(self, node, par): self.parent[node] = par for neighbor in self.adj[node]: if neighbor != par: self.dfs(neighbor, node) def build_max_values(self): for i in range(1, self.n + 1): for j in range(1, self.n + 1): self.max_values[i][j] = -1 for i in range(1, self.n + 1): for j in range(1, self.n + 1): self.max_values[i][j] = self.get_max_on_path(i, j) def get_max_on_path(self, u, v): max_val = float(\'-inf\') path = self.get_path(u, v) for node in path: max_val = max(max_val, self.values[node-1]) return max_val def get_path(self, u, v): path_u = self.get_ancestor_path(u) path_v = self.get_ancestor_path(v) i = len(path_u) - 1 j = len(path_v) - 1 while i >= 0 and j >= 0 and path_u[i] == path_v[j]: i -= 1 j -= 1 return path_u[:i + 2] + path_v[:j + 1][::-1] def get_ancestor_path(self, node): path = [] while node != -1: path.append(node) node = self.parent[node] return path def update_value(self, x, y): self.values[x - 1] = y self.build_max_values() def query_max(self, u, v): return self.max_values[u][v] def process_queries(n, values, edges, queries): tree = Tree(n, values) for u, v in edges: tree.add_edge(u, v) tree.preprocess() results = [] for query in queries: if query[0] == 1: _, x, y = query tree.update_value(x, y) elif query[0] == 2: _, u, v = query results.append(tree.query_max(u, v)) return results"},{"question":"There is a file system with a hierarchical directory structure. The structure is defined by two types of operations: - `mkdir path`: Create a directory at the specified absolute path. This path can be a newly created directory or nested within existing directories. - `ls path`: List all files and directories at the specified path, in lexicographical order. Implement a file system that supports these two operations. The first line contains an integer `q` (1 leq q leq 10^5) — the number of operations. Each of the next `q` lines contains either a `mkdir path` or `ls path` operation. The `path` will follow Unix-like syntax, starting with a slash `/`, and will not exceed 200 characters in length. For all `ls path` operations, output the list of directories and files at the specified path in lexicographical order. If the specified path does not exist, output \\"NO SUCH DIRECTORY\\". Example: ``` Input 6 mkdir /a mkdir /a/b mkdir /a/c ls / mkdir /a/d ls /a Output a b c d ```","solution":"class FileSystem: def __init__(self): self.fs = {} def mkdir(self, path: str): parts = path.split(\'/\') d = self.fs for part in parts: if part: if part not in d: d[part] = {} d = d[part] def ls(self, path: str): parts = path.split(\'/\') d = self.fs for part in parts: if part: if part in d: d = d[part] else: return \\"NO SUCH DIRECTORY\\" return sorted(d.keys()) def handle_operations(operations): fs = FileSystem() results = [] for operation in operations: if operation.startswith(\'mkdir\'): _, path = operation.split(\' \') fs.mkdir(path) elif operation.startswith(\'ls\'): _, path = operation.split(\' \') result = fs.ls(path) if result == \\"NO SUCH DIRECTORY\\": results.append(result) else: results.extend(result) return results"},{"question":"In a string transformation game, you are given two strings: \\"start\\" and \\"target\\". Each step of the game allows you to perform one of the following operations on \\"start\\": 1. Replace any character of \\"start\\" with any other character. 2. Remove any character from \\"start\\". 3. Insert any character at any position in \\"start\\". Your task is to determine the minimum number of operations required to transform \\"start\\" into \\"target\\". The first line of input contains the string \\"start\\" (1 ≤ length of \\"start\\" ≤ 1000). The second line of input contains the string \\"target\\" (1 ≤ length of \\"target\\" ≤ 1000). Print the minimum number of operations required to transform \\"start\\" into \\"target\\". Example: Input: abcdef azced Output: 3 Explanation: Replace \'b\' with \'z\', replace \'f\' with \'d\', and remove \'c\'.","solution":"def min_operations(start, target): Computes the minimum number of operations required to transform start string into target string. Operations allowed are: replace, remove, insert. m, n = len(start), len(target) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif start[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) return dp[m][n]"},{"question":"Edward is a fan of palindromes. A palindrome is a string that reads the same backward as forward. Edward has a string of lowercase English letters, and he wants to create the longest possible palindrome by removing some (possibly none) of the characters from the string. The task is to determine the length of the longest palindromic subsequence. The input consists of a single string s (1 ≤ |s| ≤ 1000), which contains only lowercase English letters. Output the length of the longest palindromic subsequence in the given string. Example: Input: ``` bbbab ``` Output: ``` 4 ``` Input: ``` cbbd ``` Output: ``` 2 ``` Explanation: In the first example, one possible longest palindromic subsequence is \\"bbbb\\". In the second example, one possible longest palindromic subsequence is \\"bb\\".","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the string s. n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1]"},{"question":"Marcus is designing a video encoding software that can apply various video filters to enhance its visual quality. He\'s structuring the filters in layers, each represented by an integer, indicating the strength of the effect. However, to avoid over-processing some specific frames, he needs to calculate the median effect strength for each frame based on his filter layers. Given a list of n integers representing the effect strengths of filter layers applied on a specific frame, compute the median effect strength for that frame. If the list has an odd length, the median is the middle element when sorted. If the list has an even length, the median is the average of the two middle elements. The first line contains a single integer n (1 ≤ n ≤ 105), the number of effect strengths. The second line contains n space-separated integers representing the effect strengths (−109 ≤ effect strength ≤ 109). Print a single integer — the median effect strength for the frame. In the first test case, there are 5 effect strengths: [3, 1, 4, 1, 5]. When sorted, the list is [1, 1, 3, 4, 5], so the median is 3. In the second test case, there are 6 effect strengths: [7, 6, 5, 4, 3, 2]. When sorted, the list is [2, 3, 4, 5, 6, 7], the median is (4 + 5) / 2 = 4.5, which should be printed as 4. Print the median effect strength as an integer. If the median is not an integer, round towards zero (e.g., 2.5 should be printed as 2). **Function Signature:** ```python def median_effect_strength(n: int, effect_strengths: List[int]) -> int: # Your code here ```","solution":"from typing import List def median_effect_strength(n: int, effect_strengths: List[int]) -> int: Calculates the median effect strength from a list of effect strengths. Parameters: n (int): The number of effect strengths. effect_strengths (List[int]): The list of effect strengths. Returns: int: The median effect strength. effect_strengths.sort() if n % 2 == 1: # If odd, return the middle element return effect_strengths[n // 2] else: # If even, return the floor of the average of the two middle elements mid1 = effect_strengths[(n // 2) - 1] mid2 = effect_strengths[n // 2] return (mid1 + mid2) // 2"},{"question":"You are given a string of characters consisting of lowercase English letters and digits. Your task is to determine whether this string can be rearranged to form a palindrome. A palindrome is a string that reads the same forward and backward, ignoring spaces, punctuation, and capitalization. The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. The description of the test cases follows. Each test case contains a single string s (1 ≤ |s| ≤ 10^5) — the string to be checked. The total length of strings over all test cases doesn\'t exceed 10^6. For each test case, print either \\"YES\\" (without the quotes) if the string can be rearranged to form a palindrome or \\"NO\\" (without the quotes) if it cannot. Input: ``` 2 aabb abc ``` Output: ``` YES NO ``` In the first test case, the characters can be rearranged to \\"abba,\\" which is a palindrome. In the second test case, it\'s impossible to rearrange the characters to form a palindrome.","solution":"from collections import Counter def can_form_palindrome(s): Determines if the input string can be rearranged to form a palindrome. count = Counter(s) # A string can be rearranged to a palindrome if at most one character # has an odd count. odd_counts = sum(1 for cnt in count.values() if cnt % 2 != 0) return odd_counts <= 1 def process_test_cases(test_cases): results = [] for s in test_cases: if can_form_palindrome(s): results.append(\'YES\') else: results.append(\'NO\') return results"},{"question":"You are given a list of integers nums. You can perform the following operation on the list as many times as you want: pick two distinct indices i and j (1 ≤ i, j ≤ n) such that nums[i] + nums[j] equals a target value t. After that, remove both elements from the list and continue with the reduced list. If there are multiple such pairs, pick any one of them. Your task is to find the maximum number of operations that can be performed on the list. The first line contains an integer n (2 ≤ n ≤ 2·105) — the number of elements in the list. The second line contains the list of integers nums[1], nums[2], ..., nums[n] (1 ≤ nums[i] ≤ 109). The third line contains an integer t (1 ≤ t ≤ 2·109) — the target sum value. Print a single integer — the maximum number of operations that can be performed on the list. # Example Input: 6 1 2 3 4 3 1 4 Output: 2 Explanation: In this example, we can form pairs (1, 3) and (2, 2). Note that we cannot form the pair (3, 1) twice because there is only one 1 in the list. So the maximum number of operations is 2.","solution":"def max_operations(nums, t): Returns the maximum number of operations where each operation consists of picking two distinct indices i and j such that nums[i] + nums[j] equals t, and removing both elements from the list. :param nums: List[int] - list of integers :param t: int - target sum value :return: int - maximum number of operations from collections import Counter num_counter = Counter(nums) operations = 0 for num in list(num_counter): complement = t - num if complement in num_counter: if num == complement: operations += num_counter[num] // 2 num_counter[num] = 0 else: min_pairs = min(num_counter[num], num_counter[complement]) operations += min_pairs num_counter[num] -= min_pairs num_counter[complement] -= min_pairs return operations"},{"question":"Given an array of integers, you are tasked with finding the length of the longest subarray that contains at most `k` distinct numbers. # Input Format: - The first line contains two integers, `n` and `k`, where `n` is the number of elements in the array and `k` is the maximum number of distinct integers allowed in the subarray. - The second line contains `n` integers representing the array. # Output Format: - Print a single integer which is the length of the longest subarray that contains at most `k` distinct integers. # Constraints: - `1 <= n <= 100,000` - `0 <= k <= n` - `1 <= array[i] <= 1,000,000` # Example: Input: ``` 7 2 1 2 1 2 3 4 4 ``` Output: ``` 4 ``` # Explanation: The longest subarray with at most `2` distinct integers in the given example is `[1, 2, 1, 2]`, which has a length of `4`. # Note: The algorithm should efficiently handle large input sizes and should make use of appropriate data structures to achieve an optimal solution.","solution":"def longest_subarray_with_k_distinct(n, k, array): Returns the length of the longest subarray that contains at most k distinct numbers. Parameters: n (int): Number of elements in the array k (int): Maximum number of distinct integers in the subarray array (list of int): The array of integers Returns: int: Length of the longest subarray that contains at most k distinct numbers from collections import defaultdict if k == 0: return 0 left = 0 longest = 0 counts = defaultdict(int) for right in range(n): counts[array[right]] += 1 while len(counts) > k: counts[array[left]] -= 1 if counts[array[left]] == 0: del counts[array[left]] left += 1 longest = max(longest, right - left + 1) return longest"},{"question":"Jenny is organizing her bookshelf and realizes she wants to group her books by genre such that the total weight of the books in each genre group is balanced as much as possible. She has n books, each with their weight wi, and k genres to classify them into. She needs to find a way to distribute the books into k genres such that the maximum total weight of any genre group is minimized. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000) — the number of books and the number of genres. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) representing the weight of each book. Output the minimum possible value for the maximum total weight of any genre group after distributing the books. Example: Input: 5 3 10 20 30 40 50 Output: 60 Explanation: One possible way to distribute the books into 3 genres is: - Genre 1: [10, 50] -> Total weight = 60 - Genre 2: [20, 40] -> Total weight = 60 - Genre 3: [30] -> Total weight = 30 The maximum total weight of any genre group in this case is 60, which is the minimum possible.","solution":"def canDistribute(weights, n, k, maxWeight): current_sum = 0 required_genres = 1 for weight in weights: if current_sum + weight > maxWeight: required_genres += 1 current_sum = weight if required_genres > k: return False else: current_sum += weight return True def minMaxGenreWeight(n, k, weights): left = max(weights) # The minimum possible maximum weight right = sum(weights) # The maximum possible maximum weight while left < right: mid = (left + right) // 2 if canDistribute(weights, n, k, mid): right = mid else: left = mid + 1 return left"},{"question":"In a distant galaxy, there exists a group of planets forming a network where each planet is connected directly to at least one other planet. The network is structured in such a way that there is exactly one unique path between any two planets — in other words, it is a tree. The inhabitants of these planets want to determine how many unique ways they can partition their entire network into two mutually exclusive and non-empty sub-networks while ensuring that there is precisely one direct connection between the two sub-networks in the resulting partition. To illustrate, consider a network of 4 planets with the following direct connections: Planet 1 connected to Planet 2 Planet 2 connected to Planet 3 Planet 2 connected to Planet 4 One way to partition this network into two sub-networks is to remove the connection between Planet 2 and Planet 3, resulting in the sub-networks {1, 2, 4} and {3}. Given the number of planets (n) and the list of direct connections, compute the number of ways to split the network into two required sub-networks. # Input - The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of planets. - The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) representing a direct connection between planet u and planet v. # Output - A single integer representing the number of valid ways to partition the network. # Example **Input:** ``` 4 1 2 2 3 2 4 ``` **Output:** ``` 3 ``` # Explanation In the example: 1. Removing the connection between Planet 1 and Planet 2 results in sub-networks {2, 3, 4} and {1}. 2. Removing the connection between Planet 2 and Planet 3 results in sub-networks {1, 2, 4} and {3}. 3. Removing the connection between Planet 2 and Planet 4 results in sub-networks {1, 2, 3} and {4}. All of these partitioning methods fit the problem criteria, giving us the result of 3 valid ways.","solution":"def count_partitions(n, connections): Returns the number of valid ways to partition the network into two sub-networks. if n == 2: return 1 # With 2 planets, there\'s always exactly 1 way to partition. # The number of ways to partition the network into two valid sub-networks is simply n - 1 return n - 1 # Usage Example if __name__ == \\"__main__\\": n = 4 connections = [(1, 2), (2, 3), (2, 4)] print(count_partitions(n, connections)) # Output should be 3"},{"question":"Given an array of integers, your task is to find the largest subarray where the sum of its elements is equal to S. Input: - The first line contains two integers n and S (1 ≤ n ≤ 10^5, 1 ≤ S ≤ 10^5) — the number of elements in the array and the target sum respectively. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^4) — the elements of the array. Output: - Print the length of the longest subarray whose sum of elements is equal to S. - If there is no such subarray, print -1. Example: Input 5 10 1 2 3 4 5 Output 4 Explanation: The subarray [1, 2, 3, 4] has the sum 10 and is the longest subarray with this sum. Input 3 7 1 2 3 Output -1 Explanation: There is no subarray whose sum is 7.","solution":"def longest_subarray_with_sum(arr, n, S): Returns the length of the longest subarray where the sum of its elements is equal to S. If there is no such subarray, returns -1. sum_map = {} current_sum = 0 max_length = -1 for i in range(n): current_sum += arr[i] if current_sum == S: max_length = i + 1 if current_sum - S in sum_map: max_length = max(max_length, i - sum_map[current_sum - S]) if current_sum not in sum_map: sum_map[current_sum] = i return max_length"},{"question":"You have been given the task to keep track of the sales made in a day. You want to ensure that your sales records are up to date and accurate. The sales data consists of multiple transactions. Each transaction is recorded with a unique transaction ID, the amount of the sale, and the time at which the sale happened (in hours and minutes, using 24-hour time format). Your task is to determine which transaction had the highest sales amount and at what time this transaction occurred. Implement a function to solve this problem given the sales data. Your function should read the number of transactions and each transaction\'s details, then output the transaction ID with the highest sales amount and the time at which it occurred. The first line of the input contains an integer `n` (1 leq n leq 1000) — the number of transactions. The following `n` lines each contain a string `transaction_id`, an integer `amount` (1 leq amount leq 10^6), and the time in hours and minutes `hh mm` (0 leq hh < 24, 0 leq mm < 60). For each test case, print the `transaction_id` with the highest sales amount followed by the time as `hh:mm`. If there are multiple transactions with the highest amount, print the one which occurred earliest in the day. # Input ``` 4 TX001 450 10 30 TX002 890 12 45 TX003 890 11 15 TX004 900 15 30 ``` # Output ``` TX004 15:30 ```","solution":"def highest_sale_transaction(sales_data): Function to determine which transaction had the highest sales amount and at what time it occurred. if not sales_data: return None n = len(sales_data) max_amount = -1 max_transaction = \\"\\" max_time = None for transaction in sales_data: trans_id, amount, hh, mm = transaction if amount > max_amount or (amount == max_amount and (hh, mm) < max_time): max_amount = amount max_transaction = trans_id max_time = (hh, mm) return f\\"{max_transaction} {max_time[0]:02}:{max_time[1]:02}\\""},{"question":"You are given a grid with dimensions n times m (1 ≤ n, m ≤ 50). Each cell in the grid can either be passable or impassable, represented respectively by \'.\' and \'#\'. You start at the top-left cell of the grid and your goal is to reach the bottom-right cell. You can move from a cell to any of its 4 neighboring cells (left, right, up, down) if the neighboring cell is passable. You need to determine the minimum number of moves required to reach the bottom-right cell from the top-left cell. If it is not possible to reach the bottom-right cell, print -1. # Input: The first line contains two integers, n and m, representing the dimensions of the grid. The next n lines each contain m characters, each of which is either \'.\' (representing a passable cell) or \'#\' (representing an impassable cell). # Output: Print the minimum number of moves required to reach the bottom-right cell from the top-left cell. If it is not possible to reach the bottom-right cell, print -1. # Example: ``` Input: 4 4 .... .. .. .... Output: 6 Input: 3 3 # #.. #.# Output: -1 ```","solution":"from collections import deque def min_moves(grid, n, m): Determine the minimum number of moves required to reach the bottom-right cell from the top-left cell in a grid. :param grid: List of strings representing the n x m grid :param n: Number of rows in the grid :param m: Number of columns in the grid :return: Minimum number of moves, or -1 if not possible # Directions for movements (down, up, right, left) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Check for edge cases where start or end is blocked if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 # Queue for BFS with (row, col, distance) queue = deque([(0, 0, 0)]) # Set to track visited positions visited = set((0, 0)) while queue: row, col, dist = queue.popleft() # Check if we have reached the bottom-right cell if (row, col) == (n-1, m-1): return dist # Explore all possible directions for dr, dc in directions: new_row, new_col = row + dr, col + dc # Check if the new position is valid if 0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited and grid[new_row][new_col] == \'.\': queue.append((new_row, new_col, dist + 1)) visited.add((new_row, new_col)) return -1"},{"question":"Neil is experimenting with a unique encryption algorithm for his new cryptography project. He designed an encryption scheme that operates on strings and transforms them in a specific manner. Your task is to help Neil verify if his encryption algorithm works as intended. Given a string `s` consisting of only lowercase English letters and a target string `t`, you need to determine whether `t` can be obtained by applying the following operations on `s`: 1. Reverse any substring of `s`. 2. Concatenate two substrings after splitting `s` into exactly two non-empty parts, while maintaining their order. The string `t` is formed by performing both operations exactly once in any order. # Input The first line contains a single integer `q` (1 ≤ q ≤ 10000) — the number of queries. Each of the next `q` lines contains two strings `s` and `t` (1 ≤ `|s|`, `|t|` ≤ 100) — the original string and the target string. # Output For each query, print \\"YES\\" if `t` can be obtained from `s` by applying the operations exactly once, and \\"NO\\" otherwise. # Example Input ``` 3 abcde bacde abacaba abcaaba xyz yxz ``` Output ``` YES NO YES ``` # Note In the first example, you can reverse the substring \\"b\\" and \\"a\\" of `s` to get \\"bacde\\". In the second example, it is not possible to get `t` from `s` using the given operations. In the third example, you can split \\"xyz\\" into \\"x\\" and \\"yz\\", then reverse \\"yz\\" to get \\"xz\\", resulting in the target string \\"yxz\\".","solution":"def can_transform(q, queries): result = [] for s, t in queries: if len(s) != len(t): result.append(\\"NO\\") continue found = False for i in range(len(s) + 1): for j in range(i + 1): part1 = s[:j][::-1] + s[j:i] part2 = s[i:][::-1] if part1 + part2 == t or part2 + part1 == t: result.append(\\"YES\\") found = True break if found: break else: result.append(\\"NO\\") return result"},{"question":"Alina is working on a new artificial intelligence system that simulates the behavior of robotic ants. These robotic ants must collect food and bring it back to their nest following a very specific set of rules. Each ant has a fixed amount of energy, and moving between different points on their Cartesian grid requires energy. The energy required to move from point (x1, y1) to point (x2, y2) is calculated as the Manhattan distance |x2 - x1| + |y2 - y1|. The task is to determine if it is possible for each ant to collect exactly one piece of food and return to its nest without running out of energy. Each ant starts at the nest, and the nest is located at the origin (0, 0). Given the coordinates of the food locations and the initial energy of each ant, determine if all ants can successfully collect food and return to the nest. The first line contains two integers n and k (1 ≤ n, k ≤ 1000) — the number of food pieces and the number of ants, respectively. The second line contains k integers e1, e2, ..., ek (1 ≤ ei ≤ 10^9) — the initial energy of each ant. The next n lines contain the coordinates of the food pieces. Each line contains two integers xi, yi (-1000 ≤ xi, yi ≤ 1000) — the coordinates of the i-th food piece. Output \\"YES\\" if it is possible for each ant to collect exactly one food piece and return to the nest without running out of energy, otherwise print \\"NO\\". Note: Each ant can only collect one piece of food, and each piece of food can only be collected by one ant. Example: Input: 3 3 10 8 12 1 2 -1 -1 2 3 Output: YES In this example, each ant has enough energy to visit one food piece and return to the nest.","solution":"def can_all_ants_collect_food(n, k, energies, food_coords): Determine if it is possible for each ant to collect one food piece and return to the nest. Parameters: n (int): Number of food pieces. k (int): Number of ants. energies (list): List of initial energy for each ant. food_coords (list): List of tuples representing coordinates of each food piece (xi, yi). Returns: str: \\"YES\\" if all ants can collect food and return to the nest, otherwise \\"NO\\". # Calculate the energy required for each piece of food to be collected and returned required_energies = [2 * (abs(x) + abs(y)) for x, y in food_coords] # Sort energies and required energies in ascending order energies.sort() required_energies.sort() # Check if every ant can collect one piece of food and return to the nest for required_energy, ant_energy in zip(required_energies, energies): if ant_energy < required_energy: return \\"NO\\" return \\"YES\\""},{"question":"You are given a grid with n rows and m columns, each cell in the grid contains either a 0 or a 1. You are allowed to perform the following operation any number of times: select any subgrid (a rectangular part of the grid), and invert all values within it (i.e., change all 0s to 1s and all 1s to 0s). Your task is to find out the minimum number of such operations required to make all values in the grid equal to 0. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid. Each of the next n lines contains m integers (either 0 or 1) separated by spaces, representing the values in the grid. Output a single integer — the minimum number of operations required to make all values in the grid equal to 0. Example: Input: 3 3 1 0 1 0 1 0 1 0 1 Output: 3 Explanation: The minimum number of operations to make all values 0 in the given grid is 3. First operation: Invert the subgrid from (1, 1) to (1, 1). Grid after first operation: 0 0 1 0 1 0 1 0 1 Second operation: Invert the subgrid from (2, 2) to (2, 2). Grid after second operation: 0 0 1 0 0 0 1 0 1 Third operation: Invert the subgrid from (3, 3) to (3, 3). Grid after third operation: 0 0 1 0 0 0 0 0 0","solution":"def min_operations_to_zero_grid(n, m, grid): operations = 0 def invert_subgrid(x1, y1, x2, y2): for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): grid[i][j] ^= 1 for i in range(n): for j in range(m): if grid[i][j] == 1: operations += 1 invert_subgrid(i, j, i, j) return operations"},{"question":"Rajat has a list of p (1 leq p leq 10^5) positive integers indexed from 1 to p. Each integer a_i (1 leq a_i leq 10^9) in the list represents the amount of sugar in milligrams in a sugar packet. Rajat wants to distribute the packets into two baskets as evenly as possible, such that the absolute difference between the total sugar in the two baskets is minimized. Write a program to determine the minimum possible absolute difference between the total sugars of the two baskets. # Input The first line contains a single integer p — the number of packets. The second line contains p space-separated integers a_1, a_2, ..., a_p — the amount of sugar in each packet. # Output Print one integer — the minimum possible absolute difference between the total sugar in the two baskets. # Example Input ``` 7 3 1 4 2 2 1 5 ``` Output ``` 0 ``` Explanation One way to partition the packets is as follows: - Basket 1: [3, 2, 1] - Basket 2: [4, 2, 1, 5] Total sugar in Basket 1: 3 + 2 + 1 = 6 Total sugar in Basket 2: 4 + 2 + 1 + 5 = 12 The absolute difference between the total sugars: |6 - 12| = 6 However, a more optimal partition would be: - Basket 1: [3, 1, 5] - Basket 2: [4, 2, 2] Total sugar in Basket 1: 3 + 1 + 5 = 9 Total sugar in Basket 2: 4 + 2 + 2 = 8 The absolute difference between the total sugars: |9 - 8| = 1 And the optimal partition: - Basket 1: [3, 2, 2] - Basket 2: [1, 4, 1, 5] Total sugar in Basket 1: 3 + 2 + 2 = 7 Total sugar in Basket 2: 1 + 4 + 1 + 5 = 7 The absolute difference between the total sugars: |7 - 7| = 0","solution":"def min_absolute_difference(p, sugars): Determine the minimum possible absolute difference between the total sugar in the two baskets. :param p: Number of packets :param sugars: List of sugar amounts in each packet :return: Minimum possible absolute difference between the total sugars of the two baskets total_sugar = sum(sugars) target = total_sugar // 2 dp = [0] * (target + 1) for sugar in sugars: for j in range(target, sugar - 1, -1): dp[j] = max(dp[j], dp[j - sugar] + sugar) basket1_total = dp[target] basket2_total = total_sugar - basket1_total return abs(basket2_total - basket1_total)"},{"question":"You are given a string s consisting of characters \'A\', \'B\', and \'C\', where the length of the string is n. You need to rearrange the string such that no two adjacent characters are the same. If multiple such rearrangements are possible, print any of them. If no such arrangement is possible, print \\"IMPOSSIBLE\\". The first line of input contains a single integer n (1 leq n leq 10^5) — the length of the string. The second line of input contains the string s consisting of characters \'A\', \'B\', \'C\'. Output one rearranged string or \\"IMPOSSIBLE\\" if no such arrangement exists. # Sample Input ``` 6 AABBCC ``` # Sample Output ``` ABCABC ``` # Explanation In the example provided, one possible way to rearrange the string is \\"ABCABC\\", which satisfies the condition that no two adjacent characters are the same. Other valid rearrangements are also possible such as \\"ACBACB\\". If there is any configuration where no such rearrangement is possible, the program outputs \\"IMPOSSIBLE\\".","solution":"from collections import Counter import heapq def rearrange_string(n, s): if n == 1: return s count = Counter(s) max_count = max(count.values()) if max_count > (n + 1) // 2: return \\"IMPOSSIBLE\\" # Create a max heap based on the counts max_heap = [(-cnt, char) for char, cnt in count.items()] heapq.heapify(max_heap) prev_cnt, prev_char = 0, \'\' result = [] while max_heap: cnt, char = heapq.heappop(max_heap) result.append(char) if prev_cnt < 0: heapq.heappush(max_heap, (prev_cnt, prev_char)) prev_cnt, prev_char = cnt + 1, char return \'\'.join(result)"},{"question":"You are given an integer array A of size n. Your task is to perform m operations on this array. In each operation, you are given two integers l and r. You have to find the greatest common divisor (GCD) of the subarray from index l to index r inclusive. The first line contains two space-separated integers n and m (1 leq n, m leq 10^5) — the number of elements in the array and the number of operations. The second line contains n space-separated integers A_1, A_2, ldots, A_n (1 leq A_i leq 10^9) — the elements of the array. The next m lines contain two space-separated integers l and r (1 leq l leq r leq n) for each operation. For each operation, print the GCD of the subarray from index l to index r inclusive in a new line. The returned GCD values should be printed in the same order as the operations. Example: Input: 6 3 2 4 6 8 10 12 1 4 2 5 3 6 Output: 2 2 2","solution":"import math def compute_gcd_subarray(n, m, A, operations): This function handles multiple GCD subarray queries. :param n: Integer, number of elements in the array :param m: Integer, number of operations/queries :param A: List of integers, the array of elements :param operations: List of tuples, each containing (l, r) indices :return: List of integers, the GCD results for each operation results = [] for (l, r) in operations: gcd_result = A[l-1] for i in range(l, r): gcd_result = math.gcd(gcd_result, A[i]) results.append(gcd_result) return results"},{"question":"In a small city, you are given a rectangular grid of size n times m representing the city\'s streets layout. Each cell in the grid can either be empty (`.`) or contain an obstacle (`#`). You are tasked with navigating from the top-left corner of the grid (cell (1, 1)) to the bottom-right corner (cell (n, m)). You can move in four possible directions: up, down, left, and right, but you cannot move through cells that contain obstacles. Determine the number of distinct paths from the top-left corner to the bottom-right corner while avoiding obstacles. If there is no valid path, return `0`. # Input Format: - The first line contains two integers n and m (1 leq n, m leq 1000) — the dimensions of the grid. - The next n lines contain m characters each. Each character is either `.` (representing an empty cell) or `#` (representing an obstacle). # Output Format: - Output a single integer representing the number of distinct paths from the top-left corner to the bottom-right corner. # Example: Input: ``` 3 3 ... .#. ... ``` Output: ``` 2 ``` Explanation: In this example, there are two possible paths: 1. Right → Right → Down → Down 2. Down → Down → Right → Right Another example: Input: ``` 3 3 ..# .#. ... ``` Output: ``` 1 ``` Explanation: Here, there is only one possible path: 1. Down → Down → Right → Right → Up → Right","solution":"def num_paths(grid): Returns the number of distinct paths from the top-left corner to the bottom-right corner in a grid with obstacles. n = len(grid) m = len(grid[0]) # If the starting or ending point is an obstacle, no path is possible if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 # Initialize a dp table with the same dimensions as the grid dp = [[0]*m for _ in range(n)] # The starting point dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] # Example Usage # grid = [ # \\"...\\", # \\".#.\\", # \\"...\\" # ] # print(num_paths(grid)) # Output: 2"},{"question":"You are tasked with implementing a function to calculate the minimum edit distance between two strings. The edit distance, also known as the Levenshtein distance, is a measure of the similarity between two strings. It is defined as the minimum number of operations required to transform one string into the other, where the permitted operations are: 1. Insertion of a single character. 2. Deletion of a single character. 3. Substitution of a single character. Given two strings, ( s1 ) and ( s2 ), each consisting of lowercase English letters only, implement a function to compute their minimum edit distance. **Input**: - The first line contains the string ( s1 ) with at most 100 characters. - The second line contains the string ( s2 ) with at most 100 characters. **Output**: - The minimum edit distance between the two strings. **Example**: ``` Input: kitten sitting Output: 3 Explanation: Transform \\"kitten\\" into \\"sitting\\" with the following operations: 1. Substitute \'k\' with \'s\' (kitten -> sitten) 2. Substitute \'e\' with \'i\' (sitten -> sittin) 3. Insert \'g\' at the end (sittin -> sitting) ``` Note: - You should use dynamic programming to solve this problem efficiently.","solution":"def min_edit_distance(s1, s2): Calculate the minimum edit distance between two strings s1 and s2. Parameters: s1 (str): The first string. s2 (str): The second string. Returns: int: The minimum edit distance between s1 and s2. m, n = len(s1), len(s2) # Create a DP table to store results of subproblems. dp = [[0] * (n + 1) for _ in range(m + 1)] # Initializing the base cases for i in range(m + 1): dp[i][0] = i # Deletion case for j in range(n + 1): dp[0][j] = j # Insertion case # Fill dp array for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, # Deletion dp[i][j - 1] + 1, # Insertion dp[i - 1][j - 1] + 1) # Substitution return dp[m][n]"},{"question":"Tom is a big fan of TV series, and he loves watching episodes after work each day. He has a list of upcoming episodes to watch, but he prioritizes watching episodes of specific genres he likes. Each episode has a specific genre, and he won\'t skip episodes but will watch them in the order they are released. Help Tom determine on which day he will finish watching the last episode of his favorite genre in the list of episodes. The first input line contains a single integer n (1 ≤ n ≤ 1000) — the number of episodes in the list. The second line contains n space-separated integers between 1 and 7 inclusive — these integers represent the genres of the episodes in the list, with each number representing a unique genre. The third line contains a single integer g (1 ≤ g ≤ 7) — the genre Tom wants to prioritize and watch completely. Print a single number — the day in the release order when Tom will finish watching the last episode of his prioritized genre. The days are numbered starting with 1 for the first episode in the list. # Example Input 10 1 2 6 3 1 7 4 5 1 6 1 Output 9 Note to Sample In the given example, Tom wants to watch all episodes of genre 1. The episodes of genre 1 are positioned at days 1, 5, and 9 in the release order. Therefore, Tom finishes watching the last episode of his favorite genre, 1, on the 9th day.","solution":"def find_last_favorite_genre_day(n, genres, favorite_genre): Determine the day Tom will finish watching the last episode of his favorite genre. Parameters: n (int): Number of episodes in the list. genres (list of int): List of genres for each episode. favorite_genre (int): The genre Tom wants to prioritize and watch completely. Returns: int: The day Tom finishes the last episode of his favorite genre. last_day = 0 for i in range(n): if genres[i] == favorite_genre: last_day = i + 1 return last_day"},{"question":"Given a list of products and their prices, you need to handle a series of queries to perform various operations on the list. Each query can be one of the following: 1. **\\"U index new_price\\"**: This query means you need to update the price of the product at the given index to the new price. 2. **\\"M start end\\"**: This query means you need to find the minimum price of the products within the given range [start, end] (inclusive). 3. **\\"S start end\\"**: This query means you need to find the sum of the prices of the products within the given range [start, end] (inclusive). The first line contains two integers, n (1 ≤ n ≤ 100,000) and q (1 ≤ q ≤ 50,000), where n is the number of products and q is the number of queries. The second line contains n integers, the prices of the products. Each of the next q lines contains a query in one of the formats described above. Output the result for each \\"M\\" and \\"S\\" query on a new line. Example: ```plaintext 5 5 3 1 6 4 8 M 1 3 S 2 5 U 3 5 M 1 3 S 2 5 ``` Output: ```plaintext 1 19 3 18 ``` Explanation: 1. \\"M 1 3\\" -> minimum price between indexes 1 and 3 (1-based indexing) is 1. 2. \\"S 2 5\\" -> sum of prices between indexes 2 and 5 is 1 + 6 + 4 + 8 = 19. 3. \\"U 3 5\\" -> update the price at index 3 to 5, the list becomes [3, 1, 5, 4, 8]. 4. \\"M 1 3\\" -> minimum price between indexes 1 and 3 is now 1. 5. \\"S 2 5\\" -> sum of prices between indexes 2 and 5 is 1 + 5 + 4 + 8 = 18.","solution":"def process_queries(n, q, prices, queries): results = [] for query in queries: parts = query.split() if parts[0] == \'U\': index = int(parts[1]) - 1 new_price = int(parts[2]) prices[index] = new_price elif parts[0] == \'M\': start = int(parts[1]) - 1 end = int(parts[2]) results.append(min(prices[start:end])) elif parts[0] == \'S\': start = int(parts[1]) - 1 end = int(parts[2]) results.append(sum(prices[start:end])) return results"},{"question":"Cryptographer Alice is working on a new type of cipher to encode messages. She decided to use prime numbers as the main tool for encoding. Given a positive integer n, she wants to decompose it into the sum of the maximum number of prime numbers. If there are multiple ways to achieve this, she wants to find the decomposition with the smallest lexicographical order. For instance, the decomposition of `6` into primes could be `(3, 3)` or `(2, 2, 2)`. Alice prefers `(2, 2, 2)` because it has more terms, and among decompositions with the same number of terms, she prefers the smallest lexicographical order. Write a program to determine the optimal prime decomposition for a given number n. The first line contains an integer n (2 ≤ n ≤ 100000). Print the prime decomposition in a single line, with the primes in increasing order separated by spaces. Sample Input 1: 6 Sample Output 1: 2 2 2 Sample Input 2: 10 Sample Output 2: 2 2 2 2 2 Sample Input 3: 13 Sample Output 3: 13","solution":"def sieve_of_eratosthenes(limit): primes = [] is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False for number in range(2, limit + 1): if is_prime[number]: primes.append(number) for multiple in range(number * number, limit + 1, number): is_prime[multiple] = False return primes def prime_decomposition(n): if n < 2: raise ValueError(\\"The value of n must be at least 2.\\") primes = sieve_of_eratosthenes(n) result = [] while n > 0: if n in primes: result.append(n) break else: result.append(2) n -= 2 result.sort() return result # Testing the function with a sample input n = 6 print(prime_decomposition(n)) # Expected output: [2, 2, 2]"},{"question":"Polycarp loves geometry and recently he became interested in convex polygons. A convex polygon is a simple polygon in which all its interior angles are less than 180 degrees. Polycarp wonders how many diagonals a convex polygon with `n` sides has. A diagonal is a line segment joining two non-adjacent vertices of the polygon. For example, in a convex polygon with 4 sides (a quadrilateral), there are 2 diagonals. Polycarp asks you to calculate the number of diagonals in a convex polygon with `n` sides. Write a function `count_diagonals(n)` that takes an integer `n` (3 ≤ n ≤ 10^9) — the number of sides of the polygon, and returns the number of diagonals. The first line of input contains an integer `t` (1 ≤ t ≤ 10^4) — the number of test cases. The next `t` lines contain an integer `n` — the number of sides of the polygon in each test case. For each test case, print one integer — the number of diagonals in the polygon. # Example Input: ``` 3 3 4 7 ``` Output: ``` 0 2 14 ``` In the first example, a polygon with `3` sides (a triangle) does not have any diagonals. In the second example, a polygon with `4` sides (a quadrilateral) has `2` diagonals. In the third example, a polygon with `7` sides (a heptagon) has `14` diagonals.","solution":"def count_diagonals(n): Returns the number of diagonals in a convex polygon with n sides. if n < 3: return 0 # The formula to calculate the number of diagonals in a convex polygon with n sides return (n * (n - 3)) // 2 def process_test_cases(t, test_cases): Process multiple test cases and return the results as a list. results = [] for n in test_cases: results.append(count_diagonals(n)) return results"},{"question":"You are given an array with N elements. Each element represents a distinct integer between 1 and N (inclusive). The array may have been shuffled from the original sorted order, and exactly one element is known to be misplaced. Your task is to determine the misplaced element and the correct position it should be in. The first line of input contains an integer N (2 ≤ N ≤ 100). The second line contains N distinct integers representing the shuffled array. Output two integers: the misplaced element and its correct position in the sorted array. Example input: ``` 5 1 2 4 3 5 ``` Example output: ``` 4 3 ``` Explanation: - The array should be [1, 2, 3, 4, 5]. - The number 4 is misplaced and should be in the 3rd position. Please provide a solution that identifies the misplaced element and its correct position.","solution":"def find_misplaced_element(arr): Finds the misplaced element in the array and the correct position it should be in. Parameters: arr (list): The shuffled array with N elements Returns: tuple: A tuple containing the misplaced element and its correct position n = len(arr) sorted_arr = sorted(arr) for i in range(n): if arr[i] != sorted_arr[i]: return (arr[i], i + 1)"},{"question":"You are given a list of integers and a series of queries. Each query consists of three components: an index `i`, a positive integer `d`, and a direction `dir`. Your task is to update the value at index `i` based on the value `d` and `dir` and answer if it is possible to make the value at index `i` zero. After each query, the updated value is reset back to its original state in the next query. The process for updating is as follows: - If `dir` is \'add\', increase the value at index `i` by `d`. - If `dir` is \'subtract\', decrease the value at index `i` by `d`. You are to check if the updated value at index `i` is zero or not. The first line of input contains an integer `n` (`1 ≤ n ≤ 10^5`), the number of elements in the list. The second line contains `n` integers representing the elements of the list. The third line contains an integer `q` (`1 ≤ q ≤ 10^5`), the number of queries. The following `q` lines each contain an integer `i` (`1 ≤ i ≤ n`), an integer `d` (`1 ≤ d ≤ 10^9`), and a string `dir` which is either \\"add\\" or \\"subtract\\". For each query, print \\"YES\\" if the updated value at index `i` is zero, otherwise print \\"NO\\". **Input:** ``` 5 5 3 8 2 7 3 3 8 add 2 3 subtract 1 5 subtract ``` **Output:** ``` NO YES NO ``` **Explanation:** 1. After adding `8` to the value at index `3` (which is `8`), the value becomes `16`. It is not zero, so output \\"NO\\". 2. After subtracting `3` from the value at index `2` (which is `3`), the value becomes `0`. It is zero, so output \\"YES\\". 3. After subtracting `5` from the value at index `1` (which is `5`), the value becomes `0`. It is zero, so output \\"NO\\".","solution":"def process_queries(n, array, queries): results = [] for i, d, dir in queries: i -= 1 # 0 index based if dir == \\"add\\": updated_value = array[i] + d elif dir == \\"subtract\\": updated_value = array[i] - d if updated_value == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a tree with `n` nodes. Each node is labeled with an integer from `1` to `n`. The tree is rooted at node `1`. Each node `i` has a value `val[i]`. Your task is to find the sum of values for all nodes in the subtree of each node `u` for each query. There are `q` queries, each query consists of a single integer `u`, which requires you to output the sum of values of all nodes in the subtree rooted at node `u`. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000), the number of nodes in the tree. - The second line contains `n` integers where the `i`-th integer is `val[i]` (1 ≤ val[i] ≤ 1,000), the value of the `i`-th node. - Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n), meaning there is an edge between nodes `u` and `v`. - The next line contains a single integer `q` (1 ≤ q ≤ 100,000), the number of queries. - Each of the next `q` lines contains a single integer `u` (1 ≤ u ≤ n), representing a query. # Output For each query, output a single integer, the sum of values of all nodes in the subtree rooted at node `u`. # Example Input ``` 5 1 2 3 4 5 1 2 1 3 3 4 3 5 3 1 3 4 ``` Output ``` 15 12 4 ``` # Explanation - For the first query, the sum of subtree rooted at node `1` is `1 + 2 + 3 + 4 + 5 = 15`. - For the second query, the sum of subtree rooted at node `3` is `3 + 4 + 5 = 12`. - For the third query, the sum of subtree rooted at node `4` is `4`.","solution":"def subtree_sum(n, vals, edges, queries): from collections import defaultdict, deque def bfs(root): queue = deque([root]) while queue: node = queue.popleft() for neighbor in tree[node]: if neighbor != parent[node]: parent[neighbor] = node queue.append(neighbor) ordered_nodes.append(node) def calculate_subtree_sums(): for node in reversed(ordered_nodes): subtree_sums[node] = vals[node - 1] for neighbor in tree[node]: if neighbor != parent[node]: subtree_sums[node] += subtree_sums[neighbor] tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) parent = [0] * (n + 1) subtree_sums = [0] * (n + 1) ordered_nodes = [] # Start BFS from the root node 1 bfs(1) # Calculate subtree sums using the ordered_nodes list calculate_subtree_sums() result = [] for query in queries: result.append(subtree_sums[query]) return result"},{"question":"Little Mark loves playing with his new array of numbers. He recently learned about how sorting can help him organize his array and quickly find elements. However, Mark also enjoys analyzing the array by finding the maximum difference between any two adjacent elements once the array is sorted. Your task is to help Mark by writing a program that sorts his array and finds the maximum difference between any two adjacent elements in the sorted array. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Print a single line containing the maximum difference between any two adjacent elements in the sorted array. For example: Input: 5 3 9 2 15 5 Output: 6 In this example, the sorted array is [2, 3, 5, 9, 15], and the maximum difference between adjacent elements is 6 (between 9 and 15).","solution":"def max_difference(n, arr): This function takes the number of elements in the array and the array itself. It returns the maximum difference between any two adjacent elements in the sorted array. if n < 2: return 0 # No adjacent elements to compare # Sort the array arr.sort() # Find the maximum difference between adjacent elements max_diff = 0 for i in range(1, n): max_diff = max(max_diff, arr[i] - arr[i - 1]) return max_diff # Example usage n = 5 arr = [3, 9, 2, 15, 5] print(max_difference(n, arr)) # Output should be 6"},{"question":"Gildong is participating in a programming competition where he has to solve several problems. One of the problems involves processing strings. Given a string, he must determine the minimum number of adjacent swaps required to make the string a palindrome. If it\'s impossible to rearrange the string into a palindrome, return -1. A string is a palindrome if it reads the same forward and backward. # Input: The first line contains an integer t (1 le t le 10) — the number of test cases. Each of the next t lines contains a single string, consisting of lowercase Latin letters, with length n (1 le n le 1000). # Output: For each test case, print a single integer — the minimum number of adjacent swaps required to make the string a palindrome, or -1 if it\'s impossible. # Example: Input: ``` 3 aabb abc aaabbb ``` Output: ``` 2 -1 3 ``` # Explanation: - For the first test case, \\"aabb\\" can be swapped as \\"abba\\" which requires 2 swaps. - For the second test case, \\"abc\\" cannot be rearranged into a palindrome, so the output is -1. - For the third test case, \\"aaabbb\\", it can be rearranged as \\"ababab\\" which requires 3 swaps.","solution":"def min_swaps_to_make_palindrome(s): def swap_count(str_, l, r): count = 0 str_ = list(str_) while l < r: if str_[l] != str_[r]: k = r while k > l and str_[k] != str_[l]: k -= 1 if k == l: # If no matching character found str_[l], str_[l+1] = str_[l+1], str_[l] # Swap the next two count += 1 else: for i in range(k, r): str_[i], str_[i+1] = str_[i+1], str_[i] count += 1 l += 1 r -= 1 else: l += 1 r -= 1 return count from collections import Counter counts = Counter(s) odd_count = sum(1 for cnt in counts.values() if cnt % 2 != 0) if odd_count > 1: return -1 # More than one character with odd frequency means we cannot form a palindrome l, r = 0, len(s) - 1 return swap_count(s, l, r) def solve_problem(t, strings): results = [] for s in strings: results.append(min_swaps_to_make_palindrome(s)) return results"},{"question":"William is developing an inventory management system for his friend\'s grocery store. The store has a shelf that can hold exactly `n` products. Each product has a unique product ID represented by a positive integer. William\'s system needs to handle two types of queries to efficiently manage product placement and retrieval: 1. Add a product to the shelf at a specific position. 2. Find the minimum product ID between two given positions on the shelf. The shelf is initially empty, and any product ID on the shelf should always be a positive integer. If a query tries to add a product to a position already occupied, update the product at that position to the new product ID. You need to process these queries and return the result of the queries of the second type. **Input** The first line contains two integers `n` and `q` (`1 ≤ n, q ≤ 100000`), representing the number of positions on the shelf and the number of queries, respectively. The next `q` lines contain three or four integers: - For queries of type 1: `1 x p` where `1` indicates an add query, `x` is the position (`1 ≤ x ≤ n`), and `p` is the product ID (`1 ≤ p ≤ 10^9`). - For queries of type 2: `2 l r` where `2` indicates a find query, `l` and `r` are the range of positions (`1 ≤ l ≤ r ≤ n`). **Output** For each query of type 2, output the minimum product ID between the positions `l` and `r` (inclusive). If no products exist in the given range, output `-1`. **Example** Input: ``` 5 6 1 2 5 1 3 10 2 2 4 1 4 2 2 1 5 2 1 3 ``` Output: ``` 5 2 5 ``` Explanation: - After executing the first query, the shelf looks like: [_, 5, _, _, _] - After executing the second query, the shelf looks like: [_, 5, 10, _, _] - The third query asks for the minimum product ID between positions 2 and 4, which is 5. - After executing the fourth query, the shelf looks like: [_, 5, 10, 2, _] - The fifth query asks for the minimum product ID between positions 1 and 5, which is 2. - The sixth query asks for the minimum product ID between positions 1 and 3, which is 5.","solution":"def process_queries(n, q, queries): shelf = [None] * n # Initialize a shelf with n positions, starting empty results = [] for query in queries: if query[0] == 1: # Add product to shelf position = query[1] - 1 # converting to 0-based index product_id = query[2] shelf[position] = product_id elif query[0] == 2: # Find minimum product ID in range left = query[1] - 1 # converting to 0-based index right = query[2] - 1 # converting to 0-based index min_product_id = float(\'inf\') for i in range(left, right + 1): if shelf[i] is not None: min_product_id = min(min_product_id, shelf[i]) if min_product_id == float(\'inf\'): results.append(-1) else: results.append(min_product_id) return results # Sample input (to test manually) n = 5 q = 6 queries = [ [1, 2, 5], [1, 3, 10], [2, 2, 4], [1, 4, 2], [2, 1, 5], [2, 1, 3] ] print(process_queries(n, q, queries)) # Output should be [5, 2, 5]"},{"question":"Marina enjoys intriguing puzzles, and today she found herself engrossed in a new challenge. There is an integer sequence s of length n, and Marina wants to transform this sequence according to a specific rule repeatedly until the sequence remains unchanged. The rule is as follows: for each element in the sequence, replace it with the sum of all the elements in the sequence except for itself. Given the initial sequence, determine the final stable sequence that Marina will obtain after applying the rule until the sequence no longer changes. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line of the input contains n integers s1, s2, ..., sn (1 ≤ si ≤ 10^9) — the initial sequence. Output the final stable sequence after repeatedly applying the rule until no changes occur. Example: Input: 4 1 2 3 4 Output: 9 8 7 6 Note: In the example, the initial sequence s = [1, 2, 3, 4]. After one application of the rule: - First element = 2 + 3 + 4 = 9 - Second element = 1 + 3 + 4 = 8 - Third element = 1 + 2 + 4 = 7 - Fourth element = 1 + 2 + 3 = 6 So, the output stable sequence is [9, 8, 7, 6].","solution":"def stable_sequence(s): Transforms the sequence until it becomes stable. Replaces every element with the sum of all other elements. total = sum(s) return [total - element for element in s]"},{"question":"You are tasked with organizing a seating arrangement in an auditorium for a school\'s annual function. The auditorium has n rows, and each row has a predefined number of seats. Each row can have different numbers of seats. The first row contains a single integer n (1 ≤ n ≤ 1000) — the number of rows in the auditorium. The next n lines describe the rows. Each line starts with an integer si (1 ≤ si ≤ 100), the number of seats in the i-th row, followed by si integers indicating seat numbers in that row. Seats in a row are numbered consecutively from 1 to si. The school administration wants to assign students to seats such that no student ends up seating in a row number they are not supposed to be in. You are given m students (where m is equal to the sum of all seats across all rows), and their desired seating preferences. Each student i desires a specific seat in a specific row. The next m lines contain the seating preferences for each student. Each line has two integers ri and si (1 ≤ ri ≤ n, 1 ≤ si ≤ number of seats in row ri), indicating the student\'s desired row and desired seat in that row. Write a program to assign seats to students as per their preferences. If it is possible to assign the seats such that each student receives their desired seat, print \\"YES\\". Otherwise, print \\"NO\\". **Input:** ``` 3 3 1 2 3 2 1 2 4 1 2 3 4 1 1 1 2 2 1 2 2 3 1 3 3 3 4 ``` **Output:** ``` YES ``` **Explanation:** There are 3 rows in the auditorium. The first row has 3 seats, the second row has 2 seats, and the third row has 4 seats. There are a total of 9 students, and all the students have expressed their desired seats. Each student can be seated in their desired seat, so the output is \\"YES\\".","solution":"def can_assign_seats(n, rows, preferences): Determines if seats can be assigned to students based on their preferences. :param n: Number of rows :param rows: List of lists where each list has seat numbers in each row :param preferences: List of tuples where each tuple has (ri, si) indicating the student\'s desired row and seat :return: \\"YES\\" if seats can be assigned as per preferences, \\"NO\\" otherwise # Create a dictionary to keep track of seat availability seat_dict = {} for row_index in range(n): for seat in rows[row_index]: seat_dict[(row_index + 1, seat)] = False # False means the seat is available # Attempt to assign seats for (r, s) in preferences: if (r, s) in seat_dict and not seat_dict[(r, s)]: # Check if the seat is available seat_dict[(r, s)] = True # Mark the seat as occupied else: return \\"NO\\" # Seat is already occupied or does not exist return \\"YES\\" # All preferences were satisfied"},{"question":"You are given a sequence of `n` integers. Your task is to process multiple queries to determine the minimum integer within a specified subrange of the sequence. The first line contains an integer `n` (1 leq n leq 100000) representing the number of elements in the sequence. The second line contains `n` space-separated integers representing the elements of the sequence. Each element in the sequence is an integer such that |element| ≤ 100000. The third line contains an integer `q` (1 leq q leq 100000) denoting the number of queries. Each of the following `q` lines contains two integers `l` and `r` (1 leq l leq r leq n) indicating the range for which you need to find the minimum value. The range is inclusive. For each query, output a single integer, the minimum value in the sequence from index `l` to `r`. # Example: **Input:** ``` 5 4 2 -3 5 1 3 1 3 2 4 1 5 ``` **Output:** ``` -3 -3 -3 ``` # Explanation: - For the first query, the subrange from index 1 to 3 contains the sequence [4, 2, -3], and the minimum value is -3. - For the second query, the subrange from index 2 to 4 contains the sequence [2, -3, 5], and the minimum value is -3. - For the third query, the subrange from index 1 to 5 contains the sequence [4, 2, -3, 5, 1], and the minimum value is -3.","solution":"def process_queries(n, sequence, queries): Processes each query to determine the minimum integer within the specified subrange. Parameters: n (int): Number of elements in the sequence sequence (list of int): The sequence of integers queries (list of tuples): List of (l, r) queries Returns: list of int: Minimum values for each query results = [] for l, r in queries: # Convert to zero-based index for proper slicing subrange = sequence[l-1:r] results.append(min(subrange)) return results"},{"question":"Alex is organizing a book fair and has a collection of books. Each book has a unique height and width. Alex wants to arrange these books in a single row on a shelf. However, due to the construction constraints of the shelf, the total width of all books on any section of the shelf cannot exceed a given limit. Alex is looking to find the longest contiguous subarray (section) of books that can fit within the width limit of the shelf. You are given an array of pairs, where each pair contains the height and width of a book. Determine the maximum number of consecutive books that can be placed in a row on the shelf without exceeding the given width limit. The first line of the input contains two integers, n and W (1 le n le 2 cdot 10^5, 1 le W le 10^9) — the number of books and the maximum width limit of the shelf. The next n lines each contain two integers h_i and w_i (1 le h_i, w_i le 10^9) — the height and width of the i^{th} book. Output a single integer, the maximum number of consecutive books that can be placed on the shelf without exceeding the width limit. **Example Input:** ``` 5 10 3 4 2 5 4 1 1 3 2 2 ``` **Example Output:** ``` 3 ``` **Explanation:** The longest contiguous subarray of books where the total width does not exceed 10 is: - Books from index 3 to 5: [(4, 1), (1, 3), (2, 2)] with total width 1 + 3 + 2 = 6","solution":"def longest_books_subarray(n, W, books): max_length = 0 current_width = 0 left = 0 for right in range(n): current_width += books[right][1] while current_width > W: current_width -= books[left][1] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given an array of n integers, where the i-th integer represents the height of the i-th building in a row of buildings. The rainfall hits the first building and starts flowing to the next buildings such that each building either retains the water on its roof if it has a higher or equal height than the next building or allows the water to flow to the next lower building. Your task is to determine the total amount of water that gets trapped on the roofs of the buildings after the rainfall stops. The first line of input should contain a single integer n (1 ≤ n ≤ 104) - the number of buildings. The second line of input should contain n space-separated integers representing the heights of the buildings. Output a single integer - the total amount of water trapped. # Example **Input:** ``` 6 0 1 0 2 1 0 ``` **Output:** ``` 1 ``` **Explanation:** The rainfall hits the buildings and flows from the first to the last. Here, water is trapped on the roof of the second building after it flows from the first, and on the roof of the building after the third one. The total trapped water is therefore 1 unit. # Constraints - The height of each building is a non-negative integer and does not exceed 104. - It is guaranteed that the input will contain at least 2 buildings.","solution":"def total_water_trapped(heights): Calculates the total amount of water trapped on roofs of buildings after rainfall. :param heights: List[int] - List of building heights. :return: int - Total units of water trapped. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill right_max right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate water trapped for i in range(1, n-1): water_trapped += max(0, min(left_max[i], right_max[i]) - heights[i]) return water_trapped"},{"question":"You are given an n × m grid with positive integer values in each cell. You start at the top-left cell (1,1) and want to reach the bottom-right cell (n,m). From any cell, you can either move right or down to an adjacent cell. However, there is a special condition: you can only move to a cell if the value in the destination cell is larger than the value in the current cell. Determine if there is at least one valid path from the top-left cell to the bottom-right cell. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) representing the dimensions of the grid. The next n lines, each containing m integers, represent the grid. Each integer grid[i][j] (1 ≤ grid[i][j] ≤ 10^6) is the value of the cell at position (i, j). Output \\"Yes\\" if there is at least one valid path from (1,1) to (n,m) under the given condition. Otherwise, print \\"No\\". For example: Input: 3 3 1 2 3 2 3 4 3 4 5 Output: Yes In this example, one valid path is 1 → 2 → 3 → 4 → 5. The values along the path are strictly increasing.","solution":"def has_valid_path(n, m, grid): def dfs(x, y, current_value): if x == n - 1 and y == m - 1: return True if x + 1 < n and grid[x + 1][y] > current_value: if dfs(x + 1, y, grid[x + 1][y]): return True if y + 1 < m and grid[x][y + 1] > current_value: if dfs(x, y + 1, grid[x][y + 1]): return True return False return \\"Yes\\" if dfs(0, 0, grid[0][0]) else \\"No\\""},{"question":"You are given a string of lowercase Latin letters. You can perform the following operation on this string any number of times: choose two adjacent characters of the string and replace them with a new character, which is the lexicographically smaller of the two chosen. Your task is to find the lexicographically smallest string that can be obtained after any number of such operations. The first line contains a single integer n (1 ≤ n ≤ 100000) — the length of the string. The second line contains a string of n lowercase Latin letters. Print a single line containing the lexicographically smallest string that can be obtained after performing the described operations any number of times. For example, for the string \\"bca\\", the operations could be performed to obtain the string \\"aa\\". For the string \\"abc\\", no operations are necessary.","solution":"def smallest_lexicographical_string(s): Returns the lexicographically smallest string that can be obtained by performing the described operations on the input string. # The smallest lexicographical string we can always get is a string # consisting of the smallest character in the string repeated n times smallest_char = min(s) return smallest_char * len(s)"},{"question":"Byte the Factorial loves factorials but hates trailing zeroes! Byte recently found a peculiar interest in the concept of factorials – the product of all positive integers up to a given number n. However, Byte despises trailing zeroes in numbers because they look unattractive. A trailing zero is a zero at the end of a number. Byte wants to know the minimum number of trailing zeroes in the factorial of any integer between l and r, inclusive. Given the two integers l and r (1 ≤ l ≤ r ≤ 10^9), determine the minimum number of trailing zeroes in n! for any integer n within this range. **Input:** - The first and only line of input contains two space-separated integers l and r (1 ≤ l ≤ r ≤ 10^9). **Output:** - Output a single integer representing the minimum number of trailing zeroes in n! for any integer n between l and r, inclusive. **Examples:** **Input:** ``` 5 10 ``` **Output:** ``` 0 ``` **Input:** ``` 1 5 ``` **Output:** ``` 0 ``` **Explanation:** For the first example, the trailing zeroes for factorials of 5, 6, 7, 8, 9, and 10 are 1, 1, 1, 1, 1, and 2 respectively. The minimum number of trailing zeroes in any factorial within this range is 0 (occurred in 6!, 7!, 8!, 9!). For the second example, the trailing zeroes for factorials of 1, 2, 3, 4, and 5 are 0, 0, 0, 0, and 1 respectively. The minimum number of trailing zeroes in any factorial within this range is 0.","solution":"def count_trailing_zeroes(n): Returns the number of trailing zeroes in the factorial of n. count = 0 while n >= 5: n //= 5 count += n return count def min_trailing_zeroes(l, r): Returns the minimum number of trailing zeroes in n! for any integer n between l and r, inclusive. # Trailing zeroes doesn\'t decrease as n increases. So we need to just compute for l. return count_trailing_zeroes(l)"},{"question":"Lisa is preparing for a marathon and wants to analyze her running statistics. She has a record of the distance she ran each day but in random order. To better evaluate her progress and training efficiency, she decides to analyze cumulative distances for different ranges of days and find the maximum distance ran over any range of days. You are given the number of days n and an array of integers representing the distances ran each day. You need to handle multiple queries to analyze her running data. Each query can be of the following types: 1. Update the distance ran on a specific day. 2. Find the maximum cumulative distance ran over any consecutive range of days within a given range. Write a program to handle these queries efficiently. Input: - The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of days and the number of queries. - The second line contains an array of n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the distances ran each day. - The next q lines contain queries of two types: - \\"1 x y\\" means update the distance on the x-th day to y (1 ≤ x ≤ n, 1 ≤ y ≤ 1,000,000). - \\"2 l r\\" means find the maximum cumulative distance over any consecutive range of days between l and r (1 ≤ l ≤ r ≤ n). Output: For each query of the second type, print the maximum cumulative distance over the specified range of days. Example: Input: ``` 5 5 1 3 2 4 5 2 1 5 1 2 6 2 1 5 2 2 4 1 3 8 ``` Output: ``` 15 16 12 ``` Explanation: - After the first query \\"2 1 5\\", the sum of distances from day 1 to day 5 is 15. - After the update \\"1 2 6\\", the distances array becomes [1, 6, 2, 4, 5]. - The second query \\"2 1 5\\" now results in a sum of 16. - The third query \\"2 2 4\\" results in a sum of 12 after the update. - Another update \\"1 3 8\\" changes the array to [1, 6, 8, 4, 5]. Use efficient data structures to handle updates and range maximum sum queries.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.data = data self.tree = [0] * (2 * self.n) self.build() def build(self): for i in range(self.n): self.tree[self.n + i] = self.data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, pos, value): pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) def query(self, left, right): left += self.n right += self.n result = 0 while left < right: if left % 2: result = max(result, self.tree[left]) left += 1 if right % 2: right -= 1 result = max(result, self.tree[right]) left //= 2 right //= 2 return result def process_queries(n, distances, queries): seg_tree = SegmentTree(distances) results = [] for query in queries: if query[0] == 1: _, x, y = query seg_tree.update(x - 1, y) # 1-based to 0-based index elif query[0] == 2: _, l, r = query results.append(seg_tree.query(l - 1, r)) # 1-based to 0-based, r is exclusive return results"},{"question":"The citizens of Codeville are planning to build a new park in their town. The park will have a network of roads arranged as a grid of n by m blocks. To make it easy for people to meet at a common point, they want to place a fountain on a block that minimizes the maximum walking distance from any block to the fountain. The walking distance between two points (x1, y1) and (x2, y2) in the town is defined as the Manhattan distance: [ text{Distance} = |x1 - x2| + |y1 - y2| ] Given the grid dimensions n (number of rows) and m (number of columns), determine the block coordinates (i, j) where the fountain should be placed in order to minimize the maximum walking distance. The first line of input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid, respectively. Output the coordinates (i, j) where the fountain should be placed. If there are multiple blocks with the same minimal maximum walking distance, output the one with the smallest row number. If there is still a tie, output the one with the smallest column number. For example: For an input of n = 3 and m = 4, the optimal coordinate for the fountain is (2, 2). For an input of n = 5 and m = 5, the optimal coordinate for the fountain is (3, 3).","solution":"def find_fountain_coordinates(n, m): Given the grid dimensions n (number of rows) and m (number of columns), determine the block coordinates (i, j) where the fountain should be placed in order to minimize the maximum walking distance. Parameters: n (int): number of rows m (int): number of columns Returns: tuple: coordinates (i, j) of the optimal location for the fountain optimal_row = (n + 1) // 2 optimal_col = (m + 1) // 2 return (optimal_row, optimal_col)"},{"question":"Esteban has two strings, s and t. He wants to determine how many times the string t appears as a substring in the string s. Each appearance should be non-overlapping, meaning that subsequent occurrences cannot share any characters. For example, in the string s = \\"abababa\\" and t = \\"aba\\", the string t appears as a non-overlapping substring twice: once starting at the 1st position, and once starting at the 5th position. Given a string s of length n (1 leq n leq 10^5), and a string t of length m (1 leq m leq 10), determine the number of non-overlapping occurrences of t in s. # Input The first line contains the string s. The second line contains the string t. # Output Output a single integer, which is the number of non-overlapping occurrences of t in s. # Example Input ``` abababa aba ``` Output ``` 2 ``` Input ``` hellohellohello hello ``` Output ``` 3 ```","solution":"def count_non_overlapping_occurrences(s, t): Returns the number of non-overlapping occurrences of the substring t in the string s. count = 0 index = 0 while index <= len(s) - len(t): if s[index:index + len(t)] == t: count += 1 index += len(t) else: index += 1 return count"},{"question":"You have been appointed as the chief of security for a network of computer servers. The network consists of n servers, numbered from 1 to n, connected by m bi-directional communication links. Each server runs a critical application, but some servers are compromised and need to be isolated to secure the network. The task is to determine the minimum number of servers that need to be isolated to ensure that no compromised server can communicate with a non-compromised server, either directly or indirectly through other servers. A server marked as compromised cannot communicate through any sequence of communication links to a non-compromised server. If a server is isolated, it and all its communication links are removed from the network. The first line contains two integers n and m (1 ≤ n, m ≤ 2 * 10^5) — the number of servers and the number of communication links, respectively. The second line contains n integers, each either 0 or 1. If the i-th integer is 1, then the i-th server is compromised, otherwise it is not. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — meaning there is a bi-directional link between server u and server v. Print a single integer — the minimum number of servers that need to be isolated to ensure that no compromised server can communicate with a non-compromised server. Here is an example: The given network has 5 servers and 4 communication links. Servers 2 and 5 are compromised. Removing servers 2 and 5 ensure that the network is secured. In this test case, the minimum servers to be isolated would be 2.","solution":"def min_servers_to_isolate(n, m, compromised, links): Determine the minimum number of servers to isolate to ensure that no compromised server can communicate with a non-compromised server. Args: n (int): Number of servers. m (int): Number of bi-directional communication links. compromised (List[int]): List of integers where 1 represents a compromised server and 0 otherwise. links (List[Tuple[int, int]]): List of tuples representing bi-directional links between servers. Returns: int: Minimum number of servers that need to be isolated. from collections import defaultdict, deque # Build the graph graph = defaultdict(list) for u, v in links: graph[u].append(v) graph[v].append(u) # Identify clusters of connected servers visited = [False] * (n + 1) def bfs(start): queue = deque([start]) cluster = [] while queue: node = queue.popleft() if not visited[node]: visited[node] = True cluster.append(node) for neighbor in graph[node]: if not visited[neighbor]: queue.append(neighbor) return cluster clusters = [] for server in range(1, n + 1): if not visited[server]: clusters.append(bfs(server)) # Calculate the servers to isolate to_isolate = 0 for cluster in clusters: if any(compromised[server - 1] for server in cluster): to_isolate += sum(compromised[server - 1] for server in cluster) return to_isolate"},{"question":"You are given a series of commands which manipulate a stack data structure. Each command is either \\"push x\\", \\"pop\\", or \\"max\\" where \\"push x\\" adds the integer x to the top of the stack, \\"pop\\" removes the top element from the stack, and \\"max\\" retrieves the largest element currently in the stack without removing it. Your task is to execute a sequence of these commands and return the result for each \\"max\\" command. The first line contains an integer n (1 <= n <= 100000) - the number of commands. Each of the next n lines contains one of the commands in the sequence, as follows: - \\"push x\\" (1 <= x <= 100000) - push the integer x onto the stack. - \\"pop\\" - remove the top element from the stack. - \\"max\\" - print the maximum element currently in the stack. It is guaranteed that each \\"pop\\" command will apply to a non-empty stack and there will be at least one element in the stack when a \\"max\\" command is issued. # Input The first line of input contains an integer n (1 <= n <= 100000) - number of commands. The next n lines each contain one command: \\"push x\\" - push the integer x (1 <= x <= 100000) onto the stack. \\"pop\\" - removes the top element from the stack. \\"max\\" - print the current maximum element in the stack. # Output For each \\"max\\" command, print the largest element currently in the stack. # Example Input: 7 push 1 push 2 max pop max push 3 max Output: 2 1 3 The above problem tests your understanding of stack operations, and how to maintain the maximum element within a stack efficiently.","solution":"class StackWithMax: def __init__(self): self.stack = [] self.max_stack = [] def push(self, value): self.stack.append(value) if not self.max_stack or value >= self.max_stack[-1]: self.max_stack.append(value) def pop(self): if self.stack: popped_value = self.stack.pop() if popped_value == self.max_stack[-1]: self.max_stack.pop() def max(self): if self.max_stack: return self.max_stack[-1] def process_commands(commands): stack = StackWithMax() result = [] for command in commands: if command.startswith(\\"push\\"): _, value = command.split() stack.push(int(value)) elif command == \\"pop\\": stack.pop() elif command == \\"max\\": result.append(stack.max()) return result"},{"question":"Bob has a garden with `n` flower beds arranged in a line. Each flower bed can be empty or have a flower. Bob can perform exactly `k` operations. In each operation, he can choose an empty flower bed and plant a flower in it, or choose a flower bed with a flower and remove the flower from it. Bob wants to know how many different configurations of the garden can be achieved after exactly `k` operations. Since this number can be very large, print the remainder when it\'s divided by `10^9 + 7`. The first line contains two integers `n` and `k` (`1 ≤ n ≤ 10^5` and `0 ≤ k ≤ 2*n`) — the number of flower beds and the number of operations Bob will perform. Print a single integer — the number of unique garden configurations after exactly `k` operations modulo `10^9 + 7`. For example, given `n = 3` and `k = 2`, Bob can achieve the following configurations after two operations: - No operations (no change) - Plant a flower in any 2 empty beds - Remove a flower from any 2 flower beds that had flowers initially - Plant a flower in one bed and remove a flower from another bed Thus, the output should be the number of these configurations modulo `10^9 + 7`.","solution":"MOD = 10**9 + 7 def count_configurations(n, k): Returns the number of unique garden configurations after exactly `k` operations modulo `10^9 + 7`. # Initialize the dp array where dp[i][j] is the number of ways to achieve j operations on i flower beds. dp = [[0] * (k + 1) for _ in range(n + 1)] dp[0][0] = 1 # Populate the dp table with the number of configurations. for i in range(1, n + 1): for j in range(k + 1): dp[i][j] = dp[i-1][j] # If we do nothing to this bed if j > 0: dp[i][j] += dp[i-1][j-1] # If we plant/remove one flower dp[i][j] %= MOD if j > 1: dp[i][j] += dp[i-1][j-2] # If we perform both plant and remove dp[i][j] %= MOD return dp[n][k] # Example usage #print(count_configurations(3, 2)) # Expected output: 6"},{"question":"Vrohacs recently became interested in a type of sequence they call \\"beautiful arrays.\\" An array of integers is called beautiful if it contains an arithmetic progression of three elements. Your task is to help Vrohacs determine whether a given array is beautiful or not. An array of integers is given as input. The array is not necessarily sorted and can have up to 100,000 elements. Each element of the array is an integer between -10^9 and 10^9. Input: The first line contains an integer n (3 ≤ n ≤ 100000) - the number of elements in the array. The second line contains n space-separated integers - the elements of the array. Output: Print \\"YES\\" if the array contains an arithmetic progression of three elements, otherwise print \\"NO\\". Example: Input 5 3 6 9 12 15 Output YES Explanation: The array contains several arithmetic progressions of three elements, such as (3, 6, 9) and (6, 9, 12).","solution":"def is_beautiful_array(arr): Determines if the array contains an arithmetic progression of three elements. arr_set = set(arr) n = len(arr) for i in range(n): for j in range(i+1, n): num1, num2 = arr[i], arr[j] diff = num2 - num1 next_num = num2 + diff if next_num in arr_set: return \\"YES\\" return \\"NO\\" def check_beautiful_array(n, elements): return is_beautiful_array(elements)"},{"question":"When a scientist conducts an experiment, they often record the measurements and readings in a table and later analyze them to draw conclusions. Given the task of organizing such data, you are to create a program that handles multiple experiments. Each experiment consists of a series of observations. Each observation is recorded as a pair of integers (ai, bi) representing different measured values. The scientist needs your help to find the maximum product of an ai and bi from each experiment. You will be given a number of experiments, and for each experiment, you will be provided with a list of observations. Your task is to output the maximum product for each experiment. The first line contains a single integer E (1 ≤ E ≤ 100), which represents the number of experiments. Each experiment starts with an integer n (1 ≤ n ≤ 1000), the number of observations. The next n lines each contain two space-separated integers ai and bi (1 ≤ ai, bi ≤ 100), representing the measured values of the i-th observation. Output E lines, each containing the maximum product of ai and bi for the corresponding experiment. **Example** **Input**: ``` 2 3 1 2 3 4 5 6 4 7 8 9 10 11 12 13 14 ``` **Output**: ``` 30 182 ``` **Explanation**: In the first experiment, the maximum product is obtained from the pair (5,6) giving 5 * 6 = 30. In the second experiment, the maximum product is obtained from the pair (13,14) giving 13 * 14 = 182.","solution":"def max_product_per_experiment(E, experiments): Returns a list of maximum products for each provided experiment\'s observations. Parameters: E -- The number of experiments experiments -- A list of lists where each inner list contains observation tuples (ai, bi) for each experiment Returns: A list of integers representing the maximum product of ai and bi for each experiment max_products = [] for experiment in experiments: max_product = max(ai * bi for (ai, bi) in experiment) max_products.append(max_product) return max_products # Example usage: E = 2 experiments = [ [(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10), (11, 12), (13, 14)] ] print(max_product_per_experiment(E, experiments)) # Output: [30, 182]"},{"question":"Vasya is interested in undirected trees. A tree is a special type of graph where any two vertices are connected by exactly one path, which means the graph is connected and acyclic. He wants to examine the diameter of a tree. The diameter of a tree is the length of the longest path between any two vertices in the tree, where the length of a path is the number of edges in the path. Given a tree consisting of n vertices numbered from 1 to n and n-1 edges, you need to determine the diameter of the tree. The first line contains a single integer n (1 le n le 10^5) — the number of vertices in the tree. Each of the next n-1 lines contains two integers u and v (1 le u, v le n) — denoting an edge between vertices u and v. Print a single integer — the diameter of the tree. For instance, consider the sample input: ``` 5 1 2 1 3 2 4 2 5 ``` In this example, the longest path is between vertices 4 and 5, passing through vertices 2 and 1, with a length of 3. Therefore, the output should be: ``` 3 ``` In another example: ``` 4 1 2 2 3 3 4 ``` The longest path is between vertices 1 and 4, with a length of 3. Thus the output should be: ``` 3 ```","solution":"import sys from collections import deque def find_tree_diameter(n, edges): if n == 1: return 0 def bfs(start_node): visited = [-1] * (n + 1) visited[start_node] = 0 queue = deque([start_node]) max_distance = 0 furthest_node = start_node while queue: node = queue.popleft() current_distance = visited[node] for neighbor in adj_list[node]: if visited[neighbor] == -1: visited[neighbor] = current_distance + 1 queue.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] furthest_node = neighbor return furthest_node, max_distance adj_list = [[] for _ in range(n + 1)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) furthest_node_from_root, _ = bfs(1) _, diameter = bfs(furthest_node_from_root) return diameter"},{"question":"Jon has a string s consisting of lowercase English letters. He wants to perform a special operation to make the string a palindrome. In one operation, he can remove any character from the string. Jon needs to find the minimum number of operations required to make the string a palindrome. A string is called a palindrome if it reads the same both forwards and backwards. The first line of the input contains an integer t (1 le t le 10) — the number of test cases. Each test case consists of a single line containing a string s (1 le |s| le 2000) — the string Jon wants to transform into a palindrome. For each test case, print a single integer — the minimum number of operations required to make the string a palindrome. # Example **Input:** ``` 3 abc aabb abcdcba ``` **Output:** ``` 2 2 0 ``` **Explanation:** 1. For the first test case, one possible way is to remove \'a\' and \'c\', resulting in the string \\"b\\". 2. For the second test case, one possible way is to remove the two \'b\'s, resulting in the string \\"aa\\". 3. For the third test case, the string is already a palindrome, so no operations are needed.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to make the string s a palindrome by removing characters. # We solve this problem using dynamic programming, finding the longest palindromic subsequence # and calculating the minimum deletions required. n = len(s) dp = [[0] * n for _ in range(n)] # Every single character is a palindrome for i in range(n): dp[i][i] = 1 # Fill the table for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) # The number of deletions required is the difference # between the string length and the length of longest palindromic subsequence lps_length = dp[0][n-1] return n - lps_length def solve(t, strings): results = [] for s in strings: results.append(min_operations_to_palindrome(s)) return results"},{"question":"Kiana is organizing a lantern festival in her village. The village consists of n houses, and each house has a street lamp. Some of the street lamps are already lit before the festival begins. Kiana plans to light some additional street lamps during the festival to ensure the entire village is brightly illuminated. The village can be represented as a series of houses connected in a line, where each house is indexed from 1 to n. A street lamp can illuminate the house it is located at as well as its two immediate neighboring houses to the left and right, if they exist. Given the initial states of the street lamps (either lit or unlit), Kiana wants to determine the minimum number of additional street lamps she needs to light in order to make sure all houses are illuminated. The first line contains an integer n (1 ≤ n ≤ 105), the number of houses in the village. The second line contains n integers, where the i-th integer is 1 if the street lamp at the i-th house is lit or 0 if it is unlit. The output should be a single integer representing the minimum number of additional street lamps Kiana needs to light. # Example: **Input:** 6 1 0 0 0 0 1 **Output:** 1 **Explanation:** In the given example, the street lamps at houses 1 and 6 are already lit. House 1 illuminates houses 1 and 2, and house 6 illuminates houses 5 and 6. Therefore, the only house that remains unlit is house 4. By lighting the street lamp at house 4, Kiana ensures that houses 3, 4, and 5 are also illuminated. Therefore, she needs to light only 1 additional street lamp.","solution":"def min_additional_lamps(n, lamps): Determines the minimum number of additional street lamps needed to light all houses :param n: Integer, number of houses :param lamps: List of integers, where 1 indicates a lit lamp and 0 indicates an unlit lamp :return: Integer, minimum number of additional lamps needed additional_lamps = 0 i = 0 while i < n: if lamps[i] == 1: i += 1 continue # Check if this segment of unlit lamps will be resolved by a lit lamp within its range if i > 0 and lamps[i-1] == 1: i += 2 elif i < n - 1 and lamps[i+1] == 1: i += 3 else: # Place a lamp at i, and it will cover i, i+1, i+2 additional_lamps += 1 i += 3 return additional_lamps"},{"question":"Customers in a shop have preferences for different product types, and each customer only wants to buy a specific type of product. The shop has exactly `n` products on display and `m` customers each with their own product preference. Given the initial arrangement of products, calculate the minimum number of product swaps required to ensure that every customer can find their preferred product standing at its correct position. The first line contains two integers `n` and `m` (1 <= `n`, `m` <= 1000) — the number of products and the number of customers respectively. The second line contains `n` integers separated by spaces, representing the types of the products currently on display. The third line contains `m` integers separated by spaces, representing the preferred types of products for each customer. Output a single integer which is the minimum number of swaps needed to arrange the products so that all customers can find their preferred product type. If it\'s impossible to satisfy all customers, print -1. For example, if `n = 5` and `m = 4`, the products are [4, 2, 3, 1, 5], and customer preferences are [1, 2, 3, 4]: - One possible way to swap the products so they align with customer preferences is to swap product at index 0 with product at index 3. - Another way would be to swap product at index 3 with product at index 0. In both these cases, the number of swaps is 1.","solution":"def min_swaps_to_satisfy_customers(n, m, products, preferences): from collections import Counter if m > n: return -1 product_count = Counter(products) preference_count = Counter(preferences) for pref in preferences: if preference_count[pref] > product_count[pref]: return -1 swaps = 0 for i in range(m): if products[i] != preferences[i]: found = False for j in range(i + 1, n): if products[j] == preferences[i]: products[i], products[j] = products[j], products[i] swaps += 1 found = True break if not found: return -1 return swaps"},{"question":"PolandBall has successfully navigated through various programming contests and has now decided to design a new problem for a competition. PolandBall wants to measure the performance of contestants in handling large data and optimizing their code. Here is the task description: You are given a sorted list **A** consisting of **n** integers. You are also given an integer **k**. Your task is to determine if there exists a subsequence of at least **k** integers in **A** such that every pair of consecutive integers in this subsequence has a difference that does not exceed **d**. The subsequence must preserve the relative order of elements as in the original list **A**. If such a subsequence exists, output \\"YES\\" followed by the subsequence. If multiple subsequences satisfy the conditions, you can output any one of them. If no such subsequence exists, output \\"NO\\". # Input: - The first line contains three space-separated integers **n**, **k**, and **d** (1 ≤ k ≤ n ≤ 1000, 0 ≤ d ≤ 1000) — the number of elements in the list, the required length of the subsequence, and the maximum allowed difference between consecutive elements in the subsequence, respectively. - The second line contains **n** space-separated integers **A[i]** (1 ≤ A[i] ≤ 10000) — the elements of the list. # Output: - If a valid subsequence exists, print \\"YES\\" on the first line and on the second line, print the subsequence consisting of **k** elements. - If no valid subsequence exists, print \\"NO\\". # Example: Input: ``` 6 3 2 2 4 6 7 9 10 ``` Output: ``` YES 2 4 6 ``` Input: ``` 5 5 1 1 2 4 7 10 ``` Output: ``` NO ``` # Explanation: In the first example, one possible subsequence of length 3 with a maximum difference of 2 between consecutive elements is `[2, 4, 6]`. In the second example, it is impossible to find a subsequence of length 5 where the difference between consecutive elements does not exceed 1, hence the output is \\"NO\\".","solution":"def find_subsequence(n, k, d, A): Determines if there exists a subsequence of at least k integers in A such that every pair of consecutive integers in this subsequence has a difference that does not exceed d. Args: n : int : number of elements in the list k : int : required length of the subsequence d : int : maximum allowed difference between consecutive elements in the subsequence A : list : list of integers Returns: str : \\"YES\\" followed by the subsequence or \\"NO\\" if no such subsequence exists dp = [[] for _ in range(n)] for i in range(n): for j in range(i): if A[i] - A[j] <= d and len(dp[j]) + 1 > len(dp[i]): dp[i] = dp[j] + [A[i]] if not dp[i]: dp[i] = [A[i]] if len(dp[i]) >= k: return f\\"YESn{\' \'.join(map(str, dp[i]))}\\" return \\"NO\\""},{"question":"Rowan is participating in a treasure hunting event organized in his neighborhood, which is represented as an m×n grid. Each cell in the grid either contains a treasure (marked as \'T\'), an obstacle (marked as \'O\'), or is empty (marked as \'.\'). Rowan starts at the top-left corner of the grid (cell (1, 1)) and wants to collect as many treasures as possible while moving to the bottom-right corner (cell (m, n)). He can only move right or down each step. However, he must avoid obstacles and cannot pass through them. Help Rowan find the maximum number of treasures he can collect while moving from the top-left to the bottom-right of the grid. The first line contains two integers m and n (2 ≤ m, n ≤ 500) — the number of rows and columns in the grid, respectively. Each of the next m lines contains n characters describing the state of each cell (either \'T\', \'O\', or \'.\'). Print an integer — the maximum number of treasures Rowan can collect. If it is impossible to reach the bottom-right corner, print -1. # Example **Input:** ``` 5 5 .T... .O.T. O.T.O .T... ...T. ``` **Output:** ``` 3 ``` **Explanation:** Rowan can collect a maximum of 3 treasures by taking the following path: - Start at (1, 1) - Move to (1, 2) and collect the treasure - Move to (1, 3) - Move to (2, 3) and collect the treasure - Move to (2, 4) - Move to (3, 4) - Move to (4, 4) - Move to (5, 4) and collect the treasure - Move to (5, 5) If no valid paths exist to reach the bottom-right corner, print -1.","solution":"def max_treasures(m, n, grid): Returns the maximum number of treasures that can be collected by moving from the top-left to the bottom-right of the grid. if grid[0][0] == \'O\' or grid[m-1][n-1] == \'O\': return -1 # DP table to store the maximum treasures collected up to each cell dp = [[-1] * n for _ in range(m)] dp[0][0] = 1 if grid[0][0] == \'T\' else 0 # Fill the first row for j in range(1, n): if grid[0][j] != \'O\' and dp[0][j-1] != -1: dp[0][j] = dp[0][j-1] + (1 if grid[0][j] == \'T\' else 0) else: dp[0][j] = -1 # Fill the first column for i in range(1, m): if grid[i][0] != \'O\' and dp[i-1][0] != -1: dp[i][0] = dp[i-1][0] + (1 if grid[i][0] == \'T\' else 0) else: dp[i][0] = -1 # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): if grid[i][j] == \'O\': dp[i][j] = -1 else: max_treasure = max(dp[i-1][j], dp[i][j-1]) if max_treasure != -1: dp[i][j] = max_treasure + (1 if grid[i][j] == \'T\' else 0) else: dp[i][j] = -1 return dp[m-1][n-1] # Example input_grid = [ \\".T...\\", \\".O.T.\\", \\"O.T.O\\", \\".T...\\", \\"...T.\\" ] print(max_treasures(5, 5, input_grid)) # Output: 3"},{"question":"There is a tree with n nodes, rooted at node 1. The tree is represented as an undirected graph with n-1 edges. Each of the n nodes has a certain weight associated with it. You need to answer q queries, where each query gives you a node x and asks you to compute the sum of the weights of all nodes in the subtree rooted at x. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of nodes. The second line contains n space-separated integers w1, w2, …, wn (1 ≤ wi ≤ 10^9) — the weights of the nodes. Each of the next n-1 lines contains two space-separated integers u and v (1 ≤ u, v ≤ n), describing an edge between nodes u and v. The next line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the next q lines contains a single integer x (1 ≤ x ≤ n), representing the node for which you need to find the sum of weights of all nodes in the subtree rooted at x. For each query, print the answer in a separate line. Consider the example. If you have a tree with 5 nodes and the weights are [1, 2, 3, 4, 5], and the edges are described as follows: 1 2 1 3 2 4 2 5 And you have 3 queries that ask for the sum of weights in the subtrees rooted at nodes 2, 3, and 1 respectively, you should calculate and print the results accordingly.","solution":"def subtree_sums(n, weights, edges, q, queries): from collections import defaultdict # Create adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # DFS to compute subtree sums subtree_sum = [0] * (n + 1) visited = [False] * (n + 1) def dfs(node): visited[node] = True total = weights[node - 1] for neighbor in tree[node]: if not visited[neighbor]: total += dfs(neighbor) subtree_sum[node] = total return total dfs(1) # Answer the queries results = [] for x in queries: results.append(subtree_sum[x]) return results"},{"question":"In a distant land, there exists a special kind of coin that is embossed with a unique integer. The value of a coin is determined by this integer. One day, a merchant found a collection of these special coins, and he noticed a peculiar thing: Any value can be formed by picking a combination of these coin values. You are to determine the minimum number of different coin values needed to represent any value from 1 up to a given integer n. Each coin value can be used an unlimited number of times. The first line of input contains a single integer n (1 ≤ n ≤ 106) — the maximum value that should be represented. Output a single integer — the minimum number of different coin values needed to represent any value from 1 to n. For example: - If the input is 10, you might use coin values [1, 2, 5], thus the result should be 3. - If the input is 20, you might use coin values [1, 5, 10], thus the result should be 3. Another example: - Input: 5 Output: 2 (representing values 1 through 5 using coins [1, 3])","solution":"def min_coins_needed(n): Returns the minimum number of different coin values needed to represent any value from 1 to n. The solution uses a greedy approach by always choosing the largest possible power of 2 that doesn\'t exceed n. # Initialize count of different coin values coin_count = 0 # Start with the largest power of 2 coin_value = 1 # Keep multiplying by 2 until it exceeds n while coin_value <= n: coin_value *= 2 coin_count += 1 return coin_count"},{"question":"Mountaineer Mike is planning a hiking trip. He has a map of the area represented as a grid with `n` rows and `m` columns. Each cell in the grid is marked as one of the following: - `.`: an empty cell where Mike can walk - `X`: an obstacle that Mike cannot pass Mike can move from cell `(i, j)` to an adjacent cell `(i+1, j)`, `(i-1, j)`, `(i, j+1)`, or `(i, j-1)`, but he cannot move diagonally. Mike starts his hike at the cell `(sx, sy)` and wants to reach a destination cell `(dx, dy)`. He wants to know the shortest path from the start cell to the destination cell, avoiding obstacles. If there is no way to reach the destination, the answer should be -1. The first line of input contains two integers `n` and `m` (1 ≤ n, m ≤ 500) — the number of rows and columns in the grid, respectively. The next `n` lines contain `m` characters each, representing the map. The next line contains two integers `sx` and `sy` (1 ≤ sx ≤ n, 1 ≤ sy ≤ m) — the starting cell coordinates. The last line contains two integers `dx` and `dy` (1 ≤ dx ≤ n, 1 ≤ dy ≤ m) — the destination cell coordinates. Print the length of the shortest path from the starting cell to the destination cell in the given grid, or -1 if there is no such path. Example: Input: ``` 5 5 ..... .X.X. ..... .X.X. ..... 1 1 5 5 ``` Output: ``` 8 ``` Explanation: In the example, the grid is 5x5. The shortest path from the starting cell (1,1) to the destination cell (5,5) is 8 steps long.","solution":"from collections import deque def shortest_path(n, m, grid, sx, sy, dx, dy): sx -= 1 # Convert to 0-indexed sy -= 1 # Convert to 0-indexed dx -= 1 # Convert to 0-indexed dy -= 1 # Convert to 0-indexed if grid[sx][sy] == \'X\' or grid[dx][dy] == \'X\': return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(sx, sy, 0)]) visited = [[False] * m for _ in range(n)] visited[sx][sy] = True while queue: x, y, dist = queue.popleft() if (x, y) == (dx, dy): return dist for d in directions: nx, ny = x + d[0], y + d[1] if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1 # Example usage: n = 5 m = 5 grid = [ \\".....\\", \\".X.X.\\", \\".....\\", \\".X.X.\\", \\".....\\" ] sx, sy = 1, 1 dx, dy = 5, 5 print(shortest_path(n, m, grid, sx, sy, dx, dy)) # Output: 8"},{"question":"You are given a list of employees in a company and their direct managers. An employee can be a direct manager of several employees. The employee who does not have any manager is called the CEO. We are concerned about the structure of the organizational hierarchy, and so we define the \\"chain of command\\" for an employee as the sequence of direct managers starting from that employee up to the CEO. You need to implement a function to find the longest chain of command in the company. # Input The input consists of a single list of tuples where each tuple contains two elements: 1. The first element is the name of an employee. 2. The second element is the name of that employee\'s direct manager. Each name is a string of alphabetic characters with no spaces. The list contains at least one tuple, with a maximum length of 50 tuples. It is guaranteed that there is exactly one CEO in the company. # Output The function should return a single integer, the length of the longest chain of command in the company. # Example **Input:** ``` [(\'Alice\', \'Bob\'), (\'Bob\', \'Charlie\'), (\'Charlie\', \'Dan\'), (\'Eve\', \'Charlie\')] ``` **Output:** ``` 4 ``` **Explanation:** - \'Alice\' is managed by \'Bob\', - \'Bob\' is managed by \'Charlie\', - \'Charlie\' is managed by \'Dan\'. So, the chain of command for Alice is: Alice -> Bob -> Charlie -> Dan (length 4) **Constraints:** - Each employee (except for the CEO) appears exactly once as the first element in the tuple. - The CEO does not appear as the first element in any tuple.","solution":"def find_longest_chain_of_command(employee_manager_pairs): def get_chain_length(employee, memo): if employee not in manager_to_employee: return 1 # employee is CEO if employee in memo: return memo[employee] chain_length = 1 + get_chain_length(manager_to_employee[employee], memo) memo[employee] = chain_length return chain_length manager_to_employee = {} for employee, manager in employee_manager_pairs: manager_to_employee[employee] = manager max_chain_length = 0 memo = {} for employee in manager_to_employee: max_chain_length = max(max_chain_length, get_chain_length(employee, memo)) return max_chain_length"},{"question":"In a coding competition, contestants are given a series of challenges. One particular challenge is a fascinating variation of the classical sequence problem. You are given an initial sequence of non-negative integers. In each operation, you can select any two distinct integers from the sequence and replace them with their sum or their difference (absolute value). This operation is repeated until only one integer is left in the sequence. The objective is to determine the maximum possible integer that can be obtained as the last remaining number after a series of operations. You need to solve this problem for multiple test cases. # Input - The first line contains a single integer, ( t ) (1 ≤ ( t ) ≤ 100) — the number of test cases. - Each of the ( t ) test cases starts with a line containing a single integer, ( n ) (2 ≤ ( n ) ≤ 500) — the length of the sequence. - The next line contains ( n ) non-negative integers ( a_1, a_2, dots, a_n ) (0 ≤ ( a_i ) ≤ 1000) — the elements of the sequence. # Output For each test case, print a single integer — the maximum possible integer that can be obtained as the last remaining number after the operations. # Example Input ``` 2 4 1 2 3 4 3 5 1 7 ``` Output ``` 10 13 ```","solution":"def max_final_element(t, test_cases): results = [] for case in test_cases: n, arr = case max_value = sum(arr) results.append(max_value) return results def process_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return t, test_cases def process_output(results): return \'n\'.join(map(str, results)) def main(input_string): t, test_cases = process_input(input_string) results = max_final_element(t, test_cases) return process_output(results) # Example usage: input_string = 2 4 1 2 3 4 3 5 1 7 print(main(input_string)) # Output will be: 10n13"},{"question":"A company has a set of projects that it needs to complete. Each project has a specific deadline and a profit associated with it. The company can only work on one project at a time, and once a project is started, it will be completed on or before its deadline if it is feasible to do so. Your task is to determine the maximum profit the company can achieve by selecting a subset of projects to complete without violating any deadlines. Each project can be started and completed at any time up to and including its deadline, as long as no other project is being worked on during the same time. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of projects. Each of the next n lines contains two integers di and pi (1 ≤ di ≤ 1000, 1 ≤ pi ≤ 10000) — the deadline and profit of the i-th project. Print a single integer — the maximum profit the company can achieve. **Example:** Input: ``` 4 4 20 1 10 1 40 1 30 ``` Output: ``` 60 ``` **Explanation:** - The company can choose projects with profits 40 and 20, completing the first project by its deadline of 1 and the second by its deadline of 4. - Total profit is 40 + 20 = 60.","solution":"def max_profit(n, projects): Returns the maximum profit the company can achieve by selecting a subset of projects to complete without violating any deadlines. Parameters: n (int): The number of projects. projects (list of tuples): Each tuple contains two integers, deadline and profit of a project. Returns: int: The maximum profit. # Sort projects by profit in descending order projects.sort(key=lambda x: x[1], reverse=True) # To keep track of free time slots time_slots = [0] * (1001) max_profit = 0 for deadline, profit in projects: # Find a free time slot for this project before its deadline, if possible for t in range(deadline, 0, -1): if time_slots[t] == 0: time_slots[t] = 1 max_profit += profit break return max_profit"},{"question":"You are given a sequence of integers. Your task is to find a subsequence with the maximum possible sum such that the elements of the subsequence are unique. The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n integers a_i (-10^9 ≤ a_i ≤ 10^9) — the elements of the sequence. Print a single number — the maximum sum of a subsequence with unique elements. Example: Input: 6 4 3 6 4 5 6 Output: 18 Explanation: The optimal subsequence with unique elements is {4, 3, 6, 5}, which sums up to 18.","solution":"def max_unique_subsequence_sum(n, sequence): Finds the maximum possible sum of a subsequence with unique elements from the given sequence of integers. Parameters: n (int): The length of the sequence. sequence (List[int]): The elements of the sequence. Returns: int: The maximum sum of the subsequence with unique elements. unique_elements = list(set(sequence)) # Get unique elements return sum(unique_elements)"},{"question":"Lara is an overzealous student who loves attending lectures but often gets distracted by her mobile phone. To discipline herself, she has decided to track how many times she picks up her phone during class by logging her actions. Lara\'s class lasts for `t` minutes, and she keeps a log of her actions for each minute she picks up her phone. Each log record contains the minute (`m`) (1 ≤ m ≤ t) and the duration in seconds (`s`) (1 ≤ s ≤ 60) she used her phone during that minute. Note that multiple entries can exist for the same minute, and durations sum up if they do. She wants to know how many minutes she was distracted by her phone for more than `p` seconds at least once. Given `t`, `p`, and `n` log entries describing minutes and their usage durations, write a program that calculates the number of minutes she was distracted for more than `p` seconds. The input format is: - An integer `t` (1 ≤ t ≤ 10^5) - total number of minutes the class lasts. - An integer `p` (1 ≤ p ≤ 60) - threshold in seconds to be considered distracted. - An integer `n` (1 ≤ n ≤ 10^5) - number of log entries. - `n` lines containing two integers each `m` (1 ≤ m ≤ t) and `s` (1 ≤ s ≤ 60) - the minute and the duration in seconds. Output the number of minutes Lara was distracted for more than `p` seconds. For example: **Input:** ``` 5 30 6 1 20 1 15 2 40 3 10 3 40 5 35 ``` **Output:** ``` 3 ``` In this example, Lara was distracted for: - Minute 1: 20 + 15 = 35 seconds - Minute 2: 40 seconds - Minute 3: 10 + 40 = 50 seconds - Minute 5: 35 seconds So she was distracted for more than 30 seconds in minutes 1, 2, 3, and 5 (total 4 minutes).","solution":"def count_distracted_minutes(t, p, n, log_entries): Counts the number of minutes Lara was distracted for more than `p` seconds. :param t: Total number of minutes the class lasts :param p: Threshold in seconds to be considered distracted :param n: Number of log entries :param log_entries: List of tuples containing minute and duration in seconds :return: Number of minutes Lara was distracted for more than `p` seconds from collections import defaultdict minute_duration = defaultdict(int) # Sum up the durations for each minute for m, s in log_entries: minute_duration[m] += s # Count minutes where the sum of durations exceeds threshold \'p\' distracted_minutes = sum(1 for duration in minute_duration.values() if duration > p) return distracted_minutes"},{"question":"You are given an array of integers of length n. You need to perform q operations on this array. Each operation can be of three types: 1. Add a given value to all elements in a specified subarray. 2. Multiply all elements in a specified subarray by a given value. 3. Get the sum of all elements in a specified subarray. The operations are described by three integers for the first two types and four integers for the third type: - \\"1 l r v\\" denotes adding value v to each element from index l to r inclusive (1 ≤ l ≤ r ≤ n). - \\"2 l r v\\" denotes multiplying value v to each element from index l to r inclusive (1 ≤ l ≤ r ≤ n). - \\"3 l r\\" denotes querying the sum of elements from index l to r inclusive (1 ≤ l ≤ r ≤ n). You are required to output the result of each sum query. The first line of input contains two integers n and q (1 ≤ n, q ≤ 100000), the length of the array and the number of operations respectively. The second line contains n integers ai (1 ≤ ai ≤ 100000), the initial elements of the array. Each of the next q lines describes an operation in the format mentioned above. Print the result of each sum query on a new line. # Example **Input:** ``` 5 5 1 2 3 4 5 1 2 4 10 2 1 3 2 3 1 5 2 4 5 3 3 1 5 ``` **Output:** ``` 63 66 ``` # Explanation: The initial array is: [1, 2, 3, 4, 5] After the first operation (1 2 4 10): [1, 12, 13, 14, 5] After the second operation (2 1 3 2): [2, 24, 26, 14, 5] The third operation queries the sum from 1 to 5: 2 + 24 + 26 + 14 + 5 = 71 After the fourth operation (2 4 5 3): [2, 24, 26, 42, 15] The fifth operation queries the sum from 1 to 5: 2 + 24 + 26 + 42 + 15 = 109","solution":"def process_operations(n, q, arr, operations): result = [] for op in operations: if op[0] == 1: _, l, r, v = op for i in range(l-1, r): arr[i] += v elif op[0] == 2: _, l, r, v = op for i in range(l-1, r): arr[i] *= v elif op[0] == 3: _, l, r = op result.append(sum(arr[l-1:r])) return result # Function that reads input and executes the main logic def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) q = int(data[1]) arr = list(map(int, data[2:n+2])) operations = [] index = n + 2 for _ in range(q): if data[index] == \'3\': operations.append((int(data[index]), int(data[index+1]), int(data[index+2]))) index += 3 else: operations.append((int(data[index]), int(data[index+1]), int(data[index+2]), int(data[index+3]))) index += 4 results = process_operations(n, q, arr, operations) for res in results: print(res)"},{"question":"A rotating binary string is a string formed by taking a binary string and rotating it any number of times. For example, the binary string \\"101\\" can be rotated to form \\"110\\" and \\"011\\". Given a binary string s of length n, find the binary string of length n that has the smallest lexicographical order among all its rotations. Formally, for a binary string s with length n, find the minimal string that can be obtained by rotating s any number of times. # Input: - The first line of the input contains an integer t (1 le t le 1000) — the number of test cases. - The next t lines contain one binary string each with a length n (1 le n le 10^5). # Output: - For each test case, output a single line containing the lexicographically smallest binary string that can be obtained through any rotation of the given string s. # Example: Input ``` 3 101 11100 1001 ``` Output ``` 011 00111 0011 ``` # Note: In the first test case, the given binary string \\"101\\" can be rotated to produce \\"101\\", \\"110\\", and \\"011\\". The smallest lexicographical string among these is \\"011\\". In the second test case, the binary string \\"11100\\" can be rotated to produce \\"11100\\", \\"11001\\", \\"10011\\", \\"00111\\", and \\"01110\\". The smallest lexicographical string among these is \\"00111\\". In the third test case, the binary string \\"1001\\" can be rotated to produce \\"1001\\", \\"0011\\", \\"0110\\", and \\"1100\\". The smallest lexicographical string among these is \\"0011\\".","solution":"def smallest_rotation(bin_str): Returns the lexicographically smallest string that can be obtained by rotating bin_str. n = len(bin_str) smallest = bin_str for i in range(1, n): rotated = bin_str[i:] + bin_str[:i] if rotated < smallest: smallest = rotated return smallest def find_smallest_rotations(test_cases): For a list of binary string test cases, return the smallest lexicographical rotation for each. results = [] for case in test_cases: results.append(smallest_rotation(case)) return results"},{"question":"Bob is an aspiring software developer who has recently received an intriguing programming challenge from a friend. The challenge involves working with a sequence of numbers and finding a particular value with the help of subsequence manipulation. Bob is given an array of n positive integers. He can perform the following operation as many times as he likes: 1. Choose any two adjacent numbers in the array, say a and b. 2. Replace these two numbers with their greatest common divisor (GCD). Bob\'s goal is to minimize the value of the array as much as possible by performing the described operation repeatedly. Bob is curious about the minimum value he can achieve and would like your help to find that value. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers ai (1 ≤ ai ≤ 1,000,000) — the elements of the array. Output a single integer — the minimum value that Bob can achieve by performing the operation. # Examples Input ``` 3 12 15 18 ``` Output ``` 3 ``` Input ``` 5 10 15 20 25 30 ``` Output ``` 5 ``` # Explanation In the first example, Bob can repeatedly perform the operation to achieve the minimum result: - Choose (12, 15), GCD is 3. - Choose (3, 18), GCD is 3. Thus, the minimum value is 3. In the second example: - First, choosing any pair and performing the operation, the GCD will converge to 5: - Choose (10, 15), GCD is 5. - Choose (5, 20), GCD is 5. - Repeat until all elements are combined, always keeping 5 as the GCD. Thus, the minimum value is 5.","solution":"import math from functools import reduce def find_minimum_value(arr): Returns the minimum value that Bob can achieve by repeatedly choosing any two adjacent numbers and replacing them with their GCD. Parameters: arr (list): A list of integers representing the array. Returns: int: The minimum value that can be achieved. return reduce(math.gcd, arr)"},{"question":"Two trucks T1 and T2 are moving towards each other on a straight road. Both trucks start their movement at time `t = 0` from points `A` and `B` respectively and meet after a time `T` at point `M`. The velocities of the trucks, `v1` for T1 and `v2` for T2, remain constant throughout the journey. The distance between A and B is denoted by `D`. Your task is to determine the initial distance between the trucks at time `t = 0`, which is `D`, given the velocities of both trucks and the time `T` when they meet. Both velocities and the time `T` are given as positive integers. The first line contains three integers `v1`, `v2`, and `T` (1 ≤ `v1`, `v2` ≤ 1000, 1 ≤ `T` ≤ 1000) — the velocities of trucks T1 and T2, and the meeting time respectively. Print a single integer `D` — the initial distance between the trucks. Example: Input: 4 3 5 Output: 35 Explanation: Truck T1 travels 4 * 5 = 20 units of distance. Truck T2 travels 3 * 5 = 15 units of distance. The initial distance D between the trucks is 20 + 15 = 35 units.","solution":"def initial_distance(v1, v2, T): Calculate the initial distance between two trucks moving towards each other. Parameters: v1 (int): Velocity of truck T1. v2 (int): Velocity of truck T2. T (int): Time taken for the trucks to meet. Returns: int: Initial distance between the trucks. return (v1 * T) + (v2 * T)"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation any number of times: select any character in the string and move it to the end of the string. Your goal is to transform the given string into the lexicographically smallest string possible using the provided operation. For example, if the initial string is \\"bcada\\", you can transform it into \\"aabcd\\" which is the lexicographically smallest string obtainable. Write a function `lexicographically_smallest` that takes a string `s` and returns the lexicographically smallest string possible. # Input - A single string `s` (1 ≤ |s| ≤ 100,000) containing only lowercase English letters. # Output - The lexicographically smallest string possible after any number of the allowed operations. # Example Example 1: Input: `\\"bcada\\"` Output: `\\"aabcd\\"` Example 2: Input: `\\"helloworld\\"` Output: `\\"dehllloorw\\"` # Note In Example 1, by observing the initial string \\"bcada\\", we can move \'a\' from the middle to the front repeatedly until all \'a\'s are at the front, and similarly for the remaining characters until we achieve \\"aabcd\\". In Example 2, with \\"helloworld\\", rearranging the characters step-by-step to ensure each character follows the lexicographically smaller order results in \\"dehllloorw\\". You are required to implement the function: ```python def lexicographically_smallest(s: str) -> str: # Implement the function ```","solution":"def lexicographically_smallest(s: str) -> str: Returns the lexicographically smallest string possible by moving characters any number of times to the end. return \'\'.join(sorted(s))"},{"question":"You are given a sequence of integers a=[a_1, a_2, dots, a_n] of length n. A subarray of this sequence is defined as a contiguous segment of the sequence. The beauty of a subarray is defined as the difference between the maximum and minimum elements in the subarray. For example, the beauty of the subarray [4, 2, 7] is 5 (since 7 - 2 = 5). Your task is to process q queries on the sequence. Each query gives you two indices l and r (1 le l le r le n), and you need to determine the beauty of the subarray starting at index l and ending at index r. For instance, consider a sequence a=[1, 3, 5, 2, 8]. For the query l=2 and r=4, the subarray is [3, 5, 2] and its beauty is 3 (5 - 2 = 3). # Input - The first line contains an integer n (1 le n le 2 times 10^5) — the length of the sequence. - The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the sequence. - The third line contains an integer q (1 le q le 2 times 10^5) — the number of queries. - The next q lines each contain two integers l and r (1 le l le r le n), representing the indices of the subarray for that query. # Output - For each query, print a single integer — the beauty of the subarray defined by that query. # Example Input ``` 5 1 3 5 2 8 3 2 4 1 5 3 3 ``` Output ``` 3 7 0 ``` # Constraints 1. For 1 le n le 2 times 10^5. 2. For 1 le a_i le 10^9. 3. For 1 le q le 2 times 10^5. 4. For 1 le l le r le n. # Note - In the first example, for the query [2, 4], the subarray is [3, 5, 2] and its beauty is 3 (since 5 - 2 = 3). - For the query [1, 5], the subarray is [1, 3, 5, 2, 8] and its beauty is 7 (since 8 - 1 = 7). - For the query [3, 3], the subarray is [5] and its beauty is 0 (since the subarray has only one element, so max and min are same).","solution":"def subarray_beauty(n, a, queries): results = [] for l, r in queries: subarray = a[l-1:r] max_element = max(subarray) min_element = min(subarray) beauty = max_element - min_element results.append(beauty) return results"},{"question":"You have a series of activities planned for the day, represented as a list of start and end times. Each activity is defined by a pair (start, end) where 0 ≤ start < end ≤ 10^9. You want to attend as many non-overlapping activities as possible. Two activities (start1, end1) and (start2, end2) do not overlap if end1 ≤ start2 or end2 ≤ start1. Your task is to determine the maximum number of non-overlapping activities you can attend. Input Format: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of activities. - The next n lines each contain two integers start and end — the start and end times of an activity. Output Format: - Print a single integer representing the maximum number of non-overlapping activities you can attend. Example Input: 4 1 3 2 5 4 7 1 8 Example Output: 2 Explanation: - You can attend the activities (1, 3) and (4, 7) or (2, 5) and (4, 7) without any overlap. In both cases, you attend the maximum number of non-overlapping activities, which is 2.","solution":"def max_non_overlapping_activities(activities): Returns the maximum number of non-overlapping activities that can be attended. # Sort activities based on their end time activities.sort(key=lambda x: x[1]) count = 0 end_time_last_activity = -1 for start, end in activities: if start >= end_time_last_activity: # If the activity starts after the last selected activity ends, select it count += 1 end_time_last_activity = end return count"},{"question":"Writing and maintaining a large piece of code can be time-consuming and error-prone. To make things easier, programmers can divide their codebase into smaller chunks called modules. Each module can have its own functionality and be developed, tested, and maintained independently. In this problem, you will implement a basic module dependency manager. The goal is to ensure that when you load a module, all its dependencies are loaded in the correct order. A module can depend on other modules to function correctly. If a module has dependencies, they must be loaded first before the module itself is loaded. # Input The first line contains an integer `n` (`1 ≤ n ≤ 200`), the number of modules. Each of the next `n` lines describes the modules. A line starts with a name of the module (a string of lowercase Latin letters of length at most 20), followed by an integer `ki`(`0 ≤ ki ≤ n-1`), the number of dependencies of this module. Then follows `ki` space-separated names of the dependencies. # Output Print the names of the modules in the order they should be loaded, considering the dependencies. If there are multiple valid answers, print any of them. # Examples Example 1 # Input ``` 3 http 1 utils app 2 http config utils 0 ``` # Output: ``` utils http config app ``` Example 2 # Input ``` 4 a 2 b c b 1 d c 1 d d 0 ``` # Output: ``` d b c a ``` # Note In the first example, the `http` module depends on `utils`, and the `app` module depends on both `http` and `config`. So `utils` should be loaded before `http`, and both `http` and `config` should be loaded before `app`. In the second example, both `b` and `c` depend on `d`. So `d` should be loaded first. Modules `b` and `c` can be loaded in any order. Finally, `a` should be loaded after both `b` and `c`.","solution":"from collections import defaultdict, deque def load_modules(n, module_descriptions): Function to order modules based on dependencies. graph = defaultdict(list) indegree = defaultdict(int) # Initialize indegree counts for description in module_descriptions: parts = description.split() module = parts[0] dependencies = parts[2:] # Ensure all modules and dependencies are in the graph if module not in indegree: indegree[module] = 0 for dep in dependencies: graph[dep].append(module) indegree[module] += 1 # Topological sorting using Kahn\'s algorithm queue = deque([node for node in indegree if indegree[node] == 0]) sorted_modules = [] while queue: node = queue.popleft() sorted_modules.append(node) for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) return sorted_modules"},{"question":"You are given an integer array a_1, a_2, ldots, a_n. Your task is to find and output an array b_1, b_2, ldots, b_m such that: 1. b is a subsequence of a. 2. All elements in b are unique. 3. The sum of the elements in b is maximized. The first line contains a single integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a description of the test case. Each test case consists of two lines. The first line contains an integer n (1 le n le 1000) — the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the elements of the array. For each test case, output a single integer m — the length of the array b followed by m integers — the elements of array b. If there are multiple solutions with the same maximum sum, any will be accepted. # Example Input ``` 2 5 1 2 2 3 4 5 5 5 5 5 5 ``` Output ``` 4 1 2 3 4 1 5 ``` # Explanation In the first test case, [1, 2, 3, 4] is a subsequence of the array which includes all unique elements with the maximum sum. In the second test case, the maximum possible sum is achieved by a single element [5]. Since all elements in the original array are the same, we only include one instance of that element.","solution":"def maximize_unique_sum_subsequence(t, test_cases): results = [] for case in test_cases: n, arr = case unique_elements = list(set(arr)) # Get unique elements unique_elements.sort() # Sort them to maintain the order results.append((len(unique_elements), unique_elements)) return results"},{"question":"A social media company has come up with a new feature to promote posts by counting the number of distinct hashtags used by each user in their posts. You are tasked with writing a program to determine if a user is eligible for a promotion based on the distinct hashtags they used in their last k posts. A user is eligible for a promotion if they have used at least x distinct hashtags in their last k posts. The first line of the input contains three integers n (1 ≤ n ≤ 100), k (1 ≤ k ≤ n), and x (1 ≤ x ≤ 100): the total number of posts by the user, the number of recent posts to check for distinct hashtags, and the minimum number of distinct hashtags required for promotion, respectively. The next n lines each contain a single post. Each post is a string consisting of lowercase alphanumeric characters and space-separated hashtags, where each hashtag starts with a `#` symbol. Your task is to determine if the user should be promoted based on the distinct hashtags in their last k posts. If the user is eligible for a promotion, print \\"YES\\". Otherwise, print \\"NO\\". Example input: ``` 5 3 4 hello #fun #life hi #coding #fun good morning #life #sunshine #happy coding is fun #happy #fun #code beautiful day #life #nature ``` Expected output: ``` NO ``` In the example above, the last 3 posts are: ``` good morning #life #sunshine #happy coding is fun #happy #fun #code beautiful day #life #nature ``` The distinct hashtags among these posts are: `#life`, `#sunshine`, `#happy`, `#fun`, `#code`, and `#nature`. Since there are 6 distinct hashtags and the requirement is at least 4, the output should be \\"YES\\".","solution":"def check_promotion_eligibility(n, k, x, posts): Determines if a user is eligible for promotion based on distinct hashtags in their last k posts. :param n: Total number of posts by the user :param k: Number of recent posts to check :param x: Minimum number of distinct hashtags required for promotion :param posts: List of strings, each representing a post with hashtags :return: \\"YES\\" if eligible for promotion, otherwise \\"NO\\" distinct_hashtags = set() # Process the last k posts for post in posts[-k:]: hashtags = [word for word in post.split() if word.startswith(\\"#\\")] distinct_hashtags.update(hashtags) if len(distinct_hashtags) >= x: return \\"YES\\" else: return \\"NO\\""},{"question":"You have been tasked with managing a warehouse inventory system. Each item in the warehouse is represented by a positive integer corresponding to its unique item code. The warehouse supports operations to add new items, remove existing items, and query the count of unique items currently in the inventory. You need to implement the system such that operations are processed efficiently. Here is the breakdown of operations: 1. `ADD x`: Add an item with code `x` to the inventory. This operation can be performed multiple times on the same item code. 2. `REMOVE x`: Remove an item with code `x` from the inventory. This operation can be performed only if the item code `x` exists in the inventory at least once. 3. `QUERY`: Output the count of unique item codes currently present in the inventory. The first line of input contains an integer `q` (1 leq q leq 10^5) — the number of operations. Each of the next `q` lines contains one of the three operations described above. For each `QUERY` operation, output the count of unique item codes in the inventory. # Example Input ``` 8 ADD 102 ADD 103 QUERY ADD 102 REMOVE 102 QUERY ADD 104 QUERY ``` Output ``` 2 2 3 ``` # Constraints * The item code `x` in `ADD x` and `REMOVE x` will be a positive integer not exceeding 10^9. * The sequence of operations ensures no `REMOVE x` operation will be performed if `x` is not present in the inventory. # Note In the sample input, the operations proceed as follows: 1. Add item `102`, inventory has `{102}` 2. Add item `103`, inventory has `{102, 103}` 3. Query unique items, output `2` 4. Add item `102` again, inventory still has `{102, 103}` 5. Remove item `102`, inventory is `{103}` 6. Query unique items, output `2` 7. Add item `104`, inventory has `{103, 104}` 8. Query unique items, output `3`","solution":"class WarehouseInventory: def __init__(self): self.inventory = {} self.unique_count = 0 def add(self, x): if x in self.inventory: self.inventory[x] += 1 else: self.inventory[x] = 1 self.unique_count += 1 def remove(self, x): if x in self.inventory: if self.inventory[x] == 1: del self.inventory[x] self.unique_count -= 1 else: self.inventory[x] -= 1 def query(self): return self.unique_count def process_operations(operations): warehouse = WarehouseInventory() results = [] for op in operations: if op.startswith(\\"ADD\\"): _, x = op.split() warehouse.add(int(x)) elif op.startswith(\\"REMOVE\\"): _, x = op.split() warehouse.remove(int(x)) elif op == \\"QUERY\\": results.append(warehouse.query()) return results"},{"question":"You are given a list of integers. Your task is to divide this list into two sublists such that the sum of numbers in the first sublist is as close as possible to the sum of numbers in the second sublist. If there are multiple solutions, any will suffice. Write a function `partition_list(nums)` that takes a list of integers and returns two sublists. The function should aim to minimize the difference between the sums of the two sublists. # Input - A list of integers `nums` with length between 1 and 100 and each integer between 1 and 100. # Output - A tuple containing two lists of integers, representing the two sublists. # Example ```python partition_list([1, 2, 3, 4, 5, 6, 7]) # possible output: ([1, 2, 3, 7], [4, 5, 6]) partition_list([10, 10, 10, 10]) # possible output: ([10, 10], [10, 10]) ``` # Notes - The solution does not need to be unique. Any pair of sublists that achieves the objective is acceptable. - The order of numbers within each sublist does not matter.","solution":"def partition_list(nums): Partition the list into two sublists such that the sum of the two sublists is as equal as possible. total_sum = sum(nums) n = len(nums) # Create a 2D list of size (n+1) x (total_sum//2 + 1) dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] # Initialize: There is always an empty subset with sum 0 for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if j >= nums[i - 1]: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]] else: dp[i][j] = dp[i - 1][j] # Find the largest j such that dp[n][j] is True sum1 = 0 for j in range(total_sum // 2, -1, -1): if dp[n][j]: sum1 = j break # Reconstruct the two subsets subset1, subset2 = [], [] w = sum1 for i in range(n, 0, -1): if w >= nums[i - 1] and dp[i - 1][w - nums[i - 1]]: subset1.append(nums[i - 1]) w -= nums[i - 1] else: subset2.append(nums[i - 1]) return subset1, subset2"},{"question":"You are given a binary tree where each node has a value. Your task is to transform the binary tree so that the value of each node is replaced by the sum of values of all the nodes in its subtree, including the node itself. The subtree of a node is the tree consisting of the node and all its descendants. The binary tree is represented as a list of tuples where each tuple contains three elements - value of the node, the value of the left child, and the value of the right child. If a node does not have a left or right child, it is represented by `None`. Write a function `transform_tree(tree)` that takes a list of tuples as input and returns a list of tuples representing the transformed binary tree in the same format. # Example: Input: ```python tree = [(1, 2, 3), (2, None, None), (3, 4, 5), (4, None, None), (5, None, None)] ``` Output: ```python transformed_tree = [(15, 6, 12), (6, None, None), (12, 4, 5), (4, None, None), (5, None, None)] ``` Explanation: - The root node (1) is replaced by the sum of all nodes in the tree: 1+2+3+4+5=15. - The node with value 2 remains 2 since it has no children. - The node with value 3 is replaced by the sum of its subtree: 3+4+5=12. - The node with value 4 remains 4 since it has no children. - The node with value 5 remains 5 since it has no children.","solution":"class TreeNode: def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right def build_tree(tree_list): nodes = {} for value, left, right in tree_list: if value not in nodes: nodes[value] = TreeNode(value) node = nodes[value] if left is not None: if left not in nodes: nodes[left] = TreeNode(left) node.left = nodes[left] if right is not None: if right not in nodes: nodes[right] = TreeNode(right) node.right = nodes[right] return nodes[tree_list[0][0]] # Return the root node def sum_subtree(node): if not node: return 0 left_sum = sum_subtree(node.left) right_sum = sum_subtree(node.right) node.value = node.value + left_sum + right_sum return node.value def build_tuple_list(node): if not node: return [] left_value = node.left.value if node.left else None right_value = node.right.value if node.right else None return [(node.value, left_value, right_value)] + build_tuple_list(node.left) + build_tuple_list(node.right) def transform_tree(tree): root = build_tree(tree) sum_subtree(root) return build_tuple_list(root)"},{"question":"In a galaxy far, far away, a scientist named Dr. Lumnox has discovered a peculiar type of energy traveling through a series of interconnected planets. Each planet has a certain amount of initial energy that can be transferred to other planets through unidirectional energy routes. Consider the interconnection of planets as a directed graph with `n` vertices and `m` edges. Each vertex represents a planet, and each directed edge represents an energy route. Every planet `i` starts with an initial energy `ei`. The scientist wants to know the maximum possible energy that can be present in any of the planets after performing one series of energy transfers. The energy transfer follows this simple rule: if there is a directed edge from planet `u` to planet `v`, then planet `u` can transfer all its energy to planet `v`, making the energy of planet `u` to become zero and adding its energy to the current energy of planet `v`. You need to calculate the maximum possible energy that can be obtained on any planet after the energy transfers. The first line of input contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000), denoting the number of planets and energy routes, respectively. The second line contains `n` integers `e1, e2, ..., en` (0 ≤ ei ≤ 109), denoting the initial energy of each planet. The next `m` lines contain two integers each, `u` and `v` (1 ≤ u, v ≤ n), denoting a directed edge from planet `u` to planet `v`. Print a single integer denoting the maximum energy present in any planet after performing the energy transfers. Example: ``` Input: 4 3 5 8 3 6 1 2 2 3 3 4 Output: 22 ``` Explanation: - Planet 1 transfers its 5 energy to planet 2 (8 + 5 = 13, planet 1 energy becomes 0) - Planet 2 transfers its 13 energy to planet 3 (3 + 13 = 16, planet 2 energy becomes 0) - Planet 3 transfers its 16 energy to planet 4 (6 + 16 = 22, planet 3 energy becomes 0) - The maximum energy on any planet is now 22 on planet 4.","solution":"def maximum_energy_after_transfers(n, m, energy, routes): from collections import defaultdict, deque # Create adjacency and in-degree lists graph = defaultdict(list) in_degree = [0] * n for u, v in routes: u -= 1 # Convert to 0-based v -= 1 # Convert to 0-based graph[u].append(v) in_degree[v] += 1 # Initialize queue for processing nodes with zero in-degree queue = deque() for i in range(n): if in_degree[i] == 0: queue.append(i) # Track maximum energy at any planet max_energy = max(energy) while queue: planet = queue.popleft() # Transfer energy to all connected planets for neighbor in graph[planet]: energy[neighbor] += energy[planet] energy[planet] = 0 in_degree[neighbor] -= 1 # Update max energy if energy[neighbor] > max_energy: max_energy = energy[neighbor] # If in-degree of neighbor becomes zero, add to queue if in_degree[neighbor] == 0: queue.append(neighbor) return max_energy"},{"question":"In the distant galaxy of Algoth, there are several planets inhabited by robotic civilizations. Each planet communicates using a specific protocol determined by a sequence of unique letters. Messages consist of several protocol sequences concatenated together with no separators. However, due to interstellar noise, some letters can be erroneously added or removed, making it challenging to decipher the original messages. Given a set of protocol sequences and a received message, your task is to determine if it\'s possible to decode the message by concatenating any combination of the protocol sequences (with each sequence used at most once). If it can be decoded, return the list of sequences in the order they appear in the message. If it cannot be decoded, return an empty result. The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of protocol sequences. The next n lines each contain a protocol sequence consisting of between 1 and 20 unique lowercase letters. The last line of input contains the received message, which is a string of up to 20,000 lowercase letters. If there is more than one way to decode the message, any valid decoding is acceptable. If it is not possible to decode the message, the function should return an empty array. Example input: ``` 4 abc de fgh ij abcdefghij ``` Example output: ``` [\\"abc\\", \\"de\\", \\"fgh\\", \\"ij\\"] ``` Example input: ``` 3 apple orange banana applenorange ``` Example output: ``` [] ``` Example input: ``` 2 xy z xyz ``` Example output: ``` [\\"xy\\", \\"z\\"] ``` Implement a function `decode_message(n, sequences, message)` where: - `n` is an integer representing the number of protocol sequences. - `sequences` is a list of strings representing the protocol sequences. - `message` is a string representing the received message. The function should return a list of strings representing the protocol sequences in the order they appear in the message if they can be properly concatenated to form the message, otherwise, it should return an empty array.","solution":"def decode_message(n, sequences, message): from functools import lru_cache @lru_cache(None) def dfs(current_message): if current_message == \\"\\": return [] for sequence in sequences: if current_message.startswith(sequence): result = dfs(current_message[len(sequence):]) if result is not None: return [sequence] + result return None result = dfs(message) return result if result is not None else []"},{"question":"You are given n distinct integers and an integer value k. Find two integers in the array whose absolute difference is exactly k. The first line contains two integers n and k (1 leq n leq 10^5, 1 leq k leq 10^9). The second line contains n distinct integers a_1, a_2, dots, a_n (-10^9 leq a_i leq 10^9), the elements of the array. Output \\"YES\\" if there are two numbers in the array whose absolute difference is exactly k, otherwise output \\"NO\\". Note: Each test only contains one test case. # Example Input ``` 5 3 1 5 3 4 2 ``` Output ``` YES ``` Explanation In the sample test case, elements 1 and 4 have an absolute difference of 3, hence the output is \\"YES\\".","solution":"def find_pair_with_difference(n, k, arr): Finds if there are two integers in the array whose absolute difference is exactly k. Returns \\"YES\\" if such a pair exists, otherwise \\"NO\\". arr_set = set(arr) for num in arr: if (num + k) in arr_set or (num - k) in arr_set: return \\"YES\\" return \\"NO\\""},{"question":"In a robotics competition, teams are challenged to navigate a grid using their robots. The grid is an n times n matrix, where each cell is either empty or contains an obstacle. The robot can move up, down, left, or right, but cannot move through obstacles. Each robot starts at the top-left cell of the grid (1,1) and the goal is to reach the bottom-right cell (n,n) in the shortest possible time. However, the robot can deploy one \\"teleportation device\\" that allows it to instantly move between any two empty cells in the grid. Teleportation can be used at any time and as many times as needed, but only can teleport between fully cleared cells. Your task is to determine the minimum number of moves required for the robot to reach the goal. The first line contains an integer n (1 leq n leq 500), representing the size of the grid. The next n lines each contain n characters, where \'.\' represents an empty cell and \'#\' represents an obstacle. Your output should be a single integer - the minimum number of moves required for the robot to reach the bottom-right corner of the grid, or -1 if it is not possible. # Sample Input: ``` 5 ..... ..#.. .#... ..#.. ..... ``` # Sample Output: ``` 3 ```","solution":"from collections import deque import sys def minimum_moves(n, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < n and grid[x][y] == \'.\' if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return -1 visited = [[False] * n for _ in range(n)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == n - 1 and y == n - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1 # Example usage n = 5 grid = [ \\".....\\", \\"..#..\\", \\".#...\\", \\"..#..\\", \\".....\\" ] print(minimum_moves(n, grid)) # Output: 3"},{"question":"You are given an array `A` of n integers. Let\'s define a special subsequence as a subsequence where the difference between the maximum and minimum element is less than or equal to a given integer k. Your task is to find the length of the longest special subsequence in the array. A subsequence is obtained by deleting some (or no) elements of an array without changing the order of the remaining elements. The first line contains two integers n and k (1 ≤ n ≤ 200000, 1 ≤ k ≤ 1000000000) — the number of elements in the array and the maximum allowed difference between the maximum and minimum element in the special subsequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000000000) — the elements of the array A. Print a single integer — the length of the longest special subsequence. **Example:** Input: ``` 6 3 1 5 2 4 6 3 ``` Output: ``` 4 ``` In this example, the longest special subsequence could be [1, 2, 3, 4], where the maximum difference between any two elements in the subsequence is 3.","solution":"def longest_special_subsequence(n, k, A): Returns the length of the longest special subsequence in the array A with the given constraints. A.sort() left = 0 max_length = 0 for right in range(n): while A[right] - A[left] > k: left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a grid of size m times n consisting of non-negative integers, you need to find the maximum sum of a rectangular sub-grid. The sub-grid must contain at least one element. The first line contains two integers t (1 le t le 100) — the number of test cases. The first line of each test case contains two integers m and n (1 le m, n le 300) — the dimensions of the grid. The next m lines each contain n integers, representing the grid elements which are non-negative integers between 0 and 10^9. For each test case, print one integer — the maximum sum of the elements in any rectangular sub-grid. # Example: Input: ``` 2 2 3 1 2 3 4 5 6 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 21 45 ``` Explanation: In the first test case, the sub-grid with the maximum sum is the whole grid, starting from (0, 0) to (1, 2), and its sum is 21. In the second test case, the sub-grid with the maximum sum is again the whole grid, starting from (0, 0) to (2, 2), and its sum is 45.","solution":"def max_subgrid_sum(m, n, grid): Returns the maximum sum of any rectangular sub-grid in the given grid. The grid size is m x n where m and n are the dimensions of the grid. max_sum = -float(\'inf\') # Convert grid to prefix_sum array prefix_sum = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): prefix_sum[i][j] = (grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) # Calculate the maximum subgrid sum for i1 in range(1, m + 1): for j1 in range(1, n + 1): for i2 in range(i1, m + 1): for j2 in range(j1, n + 1): current_sum = (prefix_sum[i2][j2] - prefix_sum[i1-1][j2] - prefix_sum[i2][j1-1] + prefix_sum[i1-1][j1-1]) max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(test_cases): results = [] for case in test_cases: m, n, grid = case results.append(max_subgrid_sum(m, n, grid)) return results"},{"question":"You and your friend are playing a game. There is a sequence of stones, each with a color represented by a lowercase Latin letter. You need to remove stones so that no two consecutive stones have the same color. Calculate the minimum number of stones you need to remove to achieve this goal. The input consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 100000) — the number of stones. - The second line contains a string of length n consisting of lowercase Latin letters representing the colors of the stones. Output a single integer — the minimum number of stones you need to remove so that no two consecutive stones have the same color. # Example Input ``` 5 aabcc ``` Output ``` 2 ``` Explanation By removing the second \'a\' and the second \'c\', we can achieve a string where no two adjacent characters are the same, resulting in \\"abc\\".","solution":"def min_stones_to_remove(n, stones): Calculate the minimum number of stones to remove so that no two consecutive stones have the same color. :param n: Number of stones :param stones: String of stones\' colors :return: Minimum number of stones to remove if n <= 1: return 0 # No removals needed if there are 1 or fewer stones removals = 0 for i in range(1, n): if stones[i] == stones[i - 1]: removals += 1 return removals"},{"question":"Anna is taking part in a treasure hunt game. The game consists of visiting a series of houses, each with a specific amount of treasure. There are n houses in a linear layout, and Anna starts at the first house. Anna can only move to the next house or skip directly to the house after the next one. If Anna visits a house, she collects all the treasure there. She wants to maximize the total amount of treasure she collects by the time she reaches the last house or the one before the last house, whichever she can get to first. Write a function to compute the maximum amount of treasure Anna can collect. The first line contains a single integer n (1 le n le 10^4) — the number of houses. The second line contains n integers t_1, t_2, dots, t_n (0 le t_i le 10^4), where t_i is the amount of treasure in the i-th house. Return a single integer — the maximum amount of treasure Anna can collect. # Example Input: ``` 5 3 2 5 10 7 ``` Output: ``` 15 ``` Explanation: Anna starts from house 1, with the treasure amounts being [3, 2, 5, 10, 7]. She can take the following paths to maximize her treasure: 1. Visit house 1, skip to house 3, then skip to house 5: 3 + 5 + 7 = 15 2. Visit house 1, go to house 3, then go to house 4: 3 + 5 + 10 = 18 3. Visit house 1, skip to house 3, then go to house 4: 3 + 5 + 10 = 18 In both the second and third paths, she collects 3 + 5 + 10 = 18 units of treasure. Thus, the maximum amount of treasure Anna can collect is 18.","solution":"def maximize_treasure(n, treasures): if n == 1: return treasures[0] elif n == 2: return max(treasures[0], treasures[1]) dp = [0] * n dp[0] = treasures[0] dp[1] = max(treasures[0], treasures[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + treasures[i]) return dp[-1] # Example usage: n = 5 treasures = [3, 2, 5, 10, 7] print(maximize_treasure(n, treasures)) # Output: 15"},{"question":"Timmy loves numbers! One day, he found a list of integers and started to explore interesting properties related to their divisors. For a given list of integers, he wants to find the longest subsequence such that each integer in the subsequence is divisible by its predecessor. Can you help Timmy figure out this? A subsequence is a sequence derived from the list by deleting some or no elements without changing the order of the remaining elements. The first line contains a single integer n (1 ≤ n ≤ 105) — the length of the list. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 106) — the list of integers. Print the length of the longest subsequence where each integer is divisible by its predecessor. Example: Input: 6 1 2 3 8 4 6 Output: 4 Explanation: A possible longest subsequence is 1, 2, 4, 6, where each number is divisible by its predecessor. Another valid subsequence could be 1, 2, 4, 8. The length of the longest such subsequence is 4.","solution":"def longest_divisible_subsequence(arr): n = len(arr) arr.sort() dp = [1] * n for i in range(n): for j in range(i): if arr[i] % arr[j] == 0: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Alice is organizing a coding competition and needs to arrange teams such that the maximum combined skill level of team members does not exceed a certain threshold. Each team must consist of exactly three members. Given the skill levels of participants, determine the highest possible skill level that can be achieved without exceeding the threshold. Each team should be formed such that: - Each team has exactly three participants. - The combined skill level of the three participants does not exceed the given threshold. - You need to maximize the highest possible skill level of any team that does not exceed the threshold. If it\'s not possible to form any team under these constraints, output \\"NO\\". Otherwise, output the highest possible skill level of any team. The first line contains two integers n and t (3 ≤ n ≤ 1000, 1 ≤ t ≤ 100000) where n is the number of participants and t is the maximum skill threshold. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), which represent the skill levels of the participants. Print \\"NO\\" if no valid team can be formed, otherwise print the highest possible skill level. **Example** Input: ``` 5 15 4 6 3 7 5 ``` Output: ``` 15 ``` Input: ``` 4 10 6 7 8 4 ``` Output: ``` NO ``` Explanation: In the first example, one valid team is formed from participants with skill levels (4, 6, 5), which gives a total skill level of 15. This is the highest possible skill level without exceeding the threshold. In the second example, no team of three participants can be formed whose combined skill level does not exceed 10. Hence, the output is \\"NO\\".","solution":"def max_skill_level(n, t, skill_levels): from itertools import combinations max_skill = -1 for combo in combinations(skill_levels, 3): combined_skill = sum(combo) if combined_skill <= t: max_skill = max(max_skill, combined_skill) return max_skill if max_skill != -1 else \\"NO\\" # Example Usage: # n = 5 # t = 15 # skill_levels = [4, 6, 3, 7, 5] # print(max_skill_level(n, t, skill_levels)) # Output: 15"},{"question":"You are tasked with creating a rectangular grid-based game where the goal is to color a given number of cells in the grid. The grid has n rows and m columns, and you are given a list of coordinates where the cells must be colored. However, there is a rule: no two adjacent cells (horizontally or vertically) should be colored. Your task is to determine if it is possible to color the given cells following this rule. The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 10^5) — the number of test cases. The description of the test cases follows. For each test case: - The first line contains three integers n, m, k (1 leq n, m leq 1000, 1 leq k leq n times m) — the dimensions of the grid and the number of cells that need to be colored. - The following k lines each contain two integers x and y (1 leq x leq n, 1 leq y leq m) — the coordinates of the cells to be colored. Output \\"Yes\\" if it is possible to color all the given cells under the given rule; otherwise, output \\"No\\". For instance, if a test case is provided like this: ``` 1 3 3 3 1 1 2 2 3 3 ``` Then, it is possible to color all given cells (1,1), (2,2), and (3,3) because no two colored cells are adjacent. However, for a case like this: ``` 1 4 4 3 1 1 1 2 2 1 ``` It is not possible to color all given cells (1,1), (1,2), and (2,1) as they violate the adjacency rule, in which case the output should be \\"No\\".","solution":"def can_color_cells(t, test_cases): results = [] for i in range(t): n, m, k, cells = test_cases[i][0], test_cases[i][1], test_cases[i][2], test_cases[i][3] grid = [[0] * m for _ in range(n)] # Place the cells to be colored on the grid for x, y in cells: grid[x - 1][y - 1] = 1 # Check for adjacency conflicts possible = True for x, y in cells: x, y = x - 1, y - 1 if (x > 0 and grid[x - 1][y] == 1) or (x < n - 1 and grid[x + 1][y] == 1) or (y > 0 and grid[x][y - 1] == 1) or (y < m - 1 and grid[x][y + 1] == 1): possible = False break if possible: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Hanna has a toy company, and she recently received a large order of toy blocks shaped as letters. The blocks need to be painted in a specific pattern while ensuring that no two adjacent blocks have the same color. The company has k different colors available, and the blocks need to be painted in such a way that each letter in the toy set corresponds to a block. Your task is to determine the minimum number of colors Hanna needs to get this job done. The input string s represents the arrangement of toy blocks before painting, consisting of lowercase English letters only. The adjacent blocks that are the same letter should not be painted in the same color. The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a string s, where the length of each string does not exceed 1000. For each test case, print the minimum number of colors needed to paint the blocks respecting the rules described. Example: Input: 3 aabb abba abcabc Output: 2 2 1 Explanation: In the first test case, you could use two colors and alternate them: a (color 1), a (color 2), b (color 1), b (color 2). In the second test case, you could use two colors: a (color 1), b (color 2), b (color 1), a (color 2). In the third test case, since no two adjacent blocks are the same, you only need one color.","solution":"def min_colors_needed(n_cases, cases): results = [] for s in cases: max_adjacent = 1 current_adjacent = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_adjacent += 1 if current_adjacent > max_adjacent: max_adjacent = current_adjacent else: current_adjacent = 1 results.append(max_adjacent) return results # Example usage: t = 3 examples = [\\"aabb\\", \\"abba\\", \\"abcabc\\"] print(min_colors_needed(t, examples)) # Output should be [2, 2, 1]"},{"question":"You have a list of n integers. Each time, you can choose any two adjacent integers and replace them with the difference of the two integers in any order. That is, for any pair (a, b), you can replace it by either (a - b) or (b - a). Your task is to determine whether it is possible to make all the integers in the list zero by performing this operation some number of times. The first line contains an integer n (1 ≤ n ≤ 100,000), the number of integers in the list. The second line contains n space-separated integers a1, a2, …, an (1 ≤ ai ≤ 1,000,000), the integers in the list. Output \\"YES\\" if it is possible to make all the integers in the list zero, otherwise print \\"NO\\". For example: Input: 3 4 2 2 Output: YES Explanation: 4 2 2 -> 2 2 2 -> 0 2 2 -> 0 0 2 -> 0 0 0 Input: 3 3 5 1 Output: NO Explanation: It is impossible to make all the integers zero.","solution":"def can_make_all_zero(n, arr): Determines if it is possible to make all integers in the list zero by repeatedly replacing any pair of adjacent integers with their difference. total_sum = sum(arr) if total_sum % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"In Ancient Grolen, there is a peculiar game involving a rectangular grid of dimensions m x n. Each cell in the grid contains a positive integer value. The player starts at the top-left corner of the grid and aims to reach the bottom-right corner. The player can only move in two possible ways: - Right: Move to the cell directly to the right. - Down: Move to the cell directly below. At each cell, the player collects the integer value contained in that cell. The goal is to find the maximum sum of values that can be collected along a path from the top-left corner to the bottom-right corner of the grid. The input consists of: - Two integers m and n (1 ≤ m, n ≤ 100), denoting the dimensions of the grid. - m lines, each containing n integers (1 ≤ value ≤ 100), representing the grid itself. The output should be a single integer, which is the maximum sum of values along the path from the top-left to the bottom-right corner. Example input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Example output: ``` 12 ``` In this example, the player can collect the maximum sum of 12 by following the path: 1 -> 3 -> 5 -> 2 -> 1.","solution":"def max_path_sum(grid): Returns the maximum sum of values along a path from the top-left to the bottom-right corner of the grid. :param grid: List[List[int]] :return: int m = len(grid) n = len(grid[0]) # Initialize a dp array with the same dimensions as grid dp = [[0] * n for _ in range(m)] # Fill the top-left cell with its own value dp[0][0] = grid[0][0] # Fill the first row (can only come from left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from top) for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner is the answer return dp[m-1][n-1] def find_max_path_sum(m, n, matrix): Parses the input values and returns the maximum path sum calculated by max_path_sum function. :param m: int :param n: int :param matrix List[List[int]] :return: int return max_path_sum(matrix)"},{"question":"You are given a matrix of size n times m consisting of non-negative integers. You can perform the following operation any number of times (including zero): - Select any row of the matrix and increment each of its elements by 1. Your task is to determine whether it is possible to make the matrix consist entirely of even numbers using the given operation. The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the matrix. The next n lines contain m integers each, where the j-th number in the i-th row represents the element a_{ij} (0 le a_{ij} le 10^9). Print \\"YES\\" (without quotes) if it is possible to make all elements of the matrix even. Otherwise, print \\"NO\\" (without quotes). For example, for the matrix: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` The output should be: ``` NO ``` For the matrix: ``` 2 2 2 4 6 8 ``` The output should be: ``` YES ```","solution":"def can_make_all_even(matrix): Returns \\"YES\\" if it\'s possible to make all elements of the matrix even by incrementing all elements of any row by 1 any number of times. Otherwise, returns \\"NO\\". for row in matrix: odd_in_row = sum(1 for element in row if element % 2 != 0) if odd_in_row % 2 != 0: return \\"NO\\" return \\"YES\\" # Example usage if __name__ == \\"__main__\\": n, m = map(int, input().split()) matrix = [list(map(int, input().split())) for _ in range(n)] print(can_make_all_even(matrix))"},{"question":"Anna has recently started learning about matrices and matrix operations. Being enthusiastic, she created a game where you need to transform a given m x n matrix by rotating its elements clockwise in a spiral order. You are required to write a program that rotates the matrix elements clockwise in a spiral order and outputs the new configuration of the matrix. # Input The first line contains two integers m and n (1 ≤ m, n ≤ 100), the number of rows and columns of the matrix, respectively. The next m lines contain n integers each, representing the elements of the matrix. # Output Print the matrix after rotating its elements clockwise in a spiral order. # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 7 4 1 8 5 2 9 6 3 ``` Input ``` 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` Output ``` 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 ``` # Note - In the first example, the original matrix is: ``` 1 2 3 4 5 6 7 8 9 ``` After rotating the elements clockwise in spiral order, the matrix becomes: ``` 7 4 1 8 5 2 9 6 3 ``` - In the second example, the original matrix is: ``` 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` After rotating the elements clockwise in spiral order, the matrix becomes: ``` 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 ```","solution":"def rotate_matrix_clockwise(matrix): Rotates the given matrix clockwise by 90 degrees. Args: matrix (list of list of int): The input matrix. Returns: list of list of int: The rotated matrix. if not matrix: return [] m, n = len(matrix), len(matrix[0]) new_matrix = [[0] * m for _ in range(n)] for r in range(m): for c in range(n): new_matrix[c][m - 1 - r] = matrix[r][c] return new_matrix def format_matrix_output(matrix): Formats the output of the matrix into a string suitable for printing. Args: matrix (list of list of int): The matrix to format. Returns: str: The formatted string of the matrix. return \'n\'.join(\' \'.join(map(str, row)) for row in matrix) def main(): import sys input = sys.stdin.read data = input().split() m = int(data[0]) n = int(data[1]) matrix = [] index = 2 for _ in range(m): matrix.append(list(map(int, data[index:index + n]))) index += n rotated_matrix = rotate_matrix_clockwise(matrix) print(format_matrix_output(rotated_matrix))"},{"question":"Linda has a collection of strings consisting of lowercase English letters. She wants to identify the longest common prefix among all these strings. The longest common prefix of a set of strings is the longest initial portion of each string in the set that is identical. For example, given the strings [\\"flower\\", \\"flow\\", \\"flight\\"], the longest common prefix is \\"fl\\". If there is no common prefix, the function should return an empty string \\"\\". You are given an array of `n` strings. Write a function that returns the longest common prefix among these strings. # Input - The first line contains an integer `n` (1 ≤ n ≤ 200), the number of strings. - The next `n` lines contain a string each of length between 1 and 200, consisting of only lowercase English letters. # Output - A single line containing the longest common prefix. If there is none, output an empty string. # Example Input ``` 3 flower flow flight ``` Output ``` fl ``` Input ``` 2 dog racecar ``` Output ``` ``` # Notes In the second example, there is no common prefix between \\"dog\\" and \\"racecar\\", so the function returns an empty string.","solution":"def longest_common_prefix(strs): Finds the longest common prefix string amongst an array of strings. :param strs: List of strings :return: Longest common prefix if not strs: return \\"\\" # Sort the list strs.sort() # Take the first and the last string first = strs[0] last = strs[-1] smallest_len = len(first) for i in range(smallest_len): if first[i] != last[i]: return first[:i] return first"},{"question":"Alex loves creating puzzles and one of his recent inventions is a game involving grids. He came up with a puzzle where there is a grid with `n` rows and `m` columns, each cell containing a non-negative integer. The goal of the puzzle is to find the maximum possible sum of a subgrid that consists of exactly `k` consecutive cells from any row or column. A subgrid is a rectangle formed by selecting `k` consecutive cells in any row or column, without skipping any cell between them. Help Alex solve this problem. # Input The first line contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ max(n, m)) — the number of rows, the number of columns, and the number of consecutive cells respectively. Each of the next `n` lines contains `m` integers, each between 0 and 1000 (inclusive) — the grid elements. # Output Print a single integer — the maximum possible sum of any subgrid that consists of exactly `k` consecutive cells from any row or column. # Example Input ``` 3 4 2 1 2 3 4 5 6 7 8 9 10 11 12 ``` Output ``` 23 ``` Explanation In the example, the subgrid with the maximum sum is formed by selecting the last two elements of the last row (11 + 12).","solution":"def max_subgrid_sum(n, m, k, grid): Returns the maximum possible sum of any subgrid that consists of exactly k consecutive cells from any row or column. max_sum = 0 # Check rows for i in range(n): for j in range(m - k + 1): current_sum = sum(grid[i][j:j + k]) if current_sum > max_sum: max_sum = current_sum # Check columns for j in range(m): for i in range(n - k + 1): current_sum = sum(grid[x][j] for x in range(i, i + k)) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given an array of positive integers representing stock prices over a number of days, you need to calculate the maximum profit you can achieve by making at most one transaction (i.e., you must buy before you sell). If no profit is possible, return 0. **Input:** - The first line contains an integer n (1 le n le 10^5), the number of days. - The second line contains n space-separated integers representing the stock prices on each day. **Output:** - Print a single integer, the maximum profit you can achieve by making at most one transaction. **Example 1:** ``` Input: 7 7 1 5 3 6 4 Output: 5 ``` **Example 2:** ``` Input: 5 7 6 4 3 1 Output: 0 ``` **Explanation:** In Example 1, the optimal transaction is to buy on Day 2 (price = 1) and sell on Day 5 (price = 6), yielding a profit of 5. In Example 2, there is no way to make a positive profit, so the answer is 0.","solution":"def max_profit(prices): This function returns the maximum profit that can be achieved by making at most one transaction. :param prices: List[int], a list of stock prices :return: int, the maximum profit (or 0 if no profit is possible) if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Sasha is playing with arrays and loves exploring different properties of sequences. He has an array of integers and wants to find interesting properties about it. He has recently learned about non-decreasing subsequences and is curious about them. Given an array of integers, Sasha wants to know the length of the longest non-decreasing subsequence (a subsequence where each element is greater than or equal to the previous one). He would also be happy to see an example of one such subsequence. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output On the first line, print the length of the longest non-decreasing subsequence. On the second line, print the elements of one such longest non-decreasing subsequence. If there are multiple, print any of them. Example Input: 6 5 3 4 8 6 7 Output: 4 3 4 6 7 Note In the given example, the longest non-decreasing subsequence has a length of 4 and one such subsequence is [3, 4, 6, 7]. There could be other correct answers as well, such as [3, 4, 8, 8] if the array had different values. Sasha is happy to see any such valid subsequence.","solution":"def longest_non_decreasing_subsequence(arr): n = len(arr) if n == 0: return 0, [] dp = [1] * n predecessor = [-1] * n for i in range(1, n): for j in range(i): if arr[i] >= arr[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 predecessor[i] = j # Find the maximum value in dp and its index max_length = max(dp) index = dp.index(max_length) # Reconstruct the subsequence subsequence = [] while index != -1: subsequence.append(arr[index]) index = predecessor[index] subsequence.reverse() return max_length, subsequence # Example usage: # n = 6 # arr = [5, 3, 4, 8, 6, 7] # length, subsequence = longest_non_decreasing_subsequence(arr) # print(length) # print(\\" \\".join(map(str, subsequence)))"},{"question":"Zoe loves playing with strings. Recently, she discovered the concept of palindromes and became fascinated with them. A palindrome is a string that reads the same forward and backward. Zoe has a string s of length n and she wants to know how many substrings of s are palindromes. A substring is defined as a contiguous segment of a string. Help Zoe determine the number of palindromic substrings in s. The first line contains a single integer n (1 ≤ n ≤ 2*10^5), the length of the string s. The second line contains the string s, which consists of lowercase English letters. Output a single integer, the number of palindromic substrings in s. For example, if the input string is \\"ababa\\", then the output should be 9, because the palindromic substrings are \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"aba\\", \\"bab\\", \\"aba\\", \\"ababa\\".","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in a given string. n = len(s) if n == 0: return 0 count = 0 # Helper function to count palindromes around a center def count_palindrome_centered(s, left, right): count = 0 while left >= 0 and right < len(s) and s[left] == s[right]: count += 1 left -= 1 right += 1 return count # Consider every character and the gap between every pair of characters as center for i in range(n): count += count_palindrome_centered(s, i, i) # Odd-length palindromes count += count_palindrome_centered(s, i, i + 1) # Even-length palindromes return count"},{"question":"Andrea is working at the Ministry of Defense and is tasked with the mission of monitoring a secret communication channel. The channel transmits messages consisting of lowercase English letters. As part of the security protocol, Andrea needs to identify \\"safe\\" messages which have a specific characteristic. A message is considered \\"safe\\" if and only if it contains every letter from \'a\' to \'k\' exactly once. Given a message, Andrea needs a program to determine whether the message is \\"safe\\" or not. The input consists of multiple test cases. The first line contains an integer t (1 le t le 1000) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 100), representing a message. For each test case, output \\"Safe\\" (without quotes) if the message is safe, and \\"Unsafe\\" (without quotes) otherwise. # Example Input: ``` 3 abcdefghijk abcdefghi kaagbfchdji ``` Output: ``` Safe Unsafe Unsafe ``` In the first sample, the message \\"abcdefghijk\\" contains every letter from \'a\' to \'k\' exactly once, so it is considered \\"safe\\". In the second sample, the message \\"abcdefghi\\" is missing some of the required letters (\'j\' and \'k\'), so it is \\"unsafe\\". In the third sample, the message \\"kaagbfchdji\\" contains repeated characters and thus also fails to meet the criteria, making it \\"unsafe\\".","solution":"def is_safe_message(message): Determines if the message is safe. A message is safe if it contains every letter from \'a\' to \'k\' exactly once. required_letters = set(\'abcdefghijk\') message_letters = set(message) if len(message) == 11 and required_letters == message_letters: return \\"Safe\\" else: return \\"Unsafe\\" def multiple_test_cases(t, messages): Processes multiple test cases and returns the results. results = [] for message in messages: results.append(is_safe_message(message)) return results"},{"question":"You are given a binary tree with n nodes, where each node is numbered from 1 to n. Each node contains an integer value. You need to determine if there exists a sequence of one or more nodes in this tree that forms a path with a sum of values equal to k. A path can start and end at any node, and it goes downward from its start node to any descendant node. # Input The first line contains two integers n and k (1 le n le 10^5 , -10^9 le k le 10^9). The next line contains a list of n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9), where a_i is the value of node i. Each of the next n-1 lines contains two integers u and v (1 le u, v le n) which denotes that there is an edge between nodes u and v. # Output Output \\"Yes\\" if there exists at least one path from top to bottom in the tree such that the sum of values along the path is equal to k; otherwise, print \\"No\\". # Example **Input:** ``` 5 6 1 2 3 4 5 1 2 1 3 2 4 2 5 ``` **Output:** ``` Yes ``` **Explanation:** The path from node 1 to node 2 to node 4 yields the sum 1 + 2 + 4 = 7, which does not equal 6, but the path from node 2 to node 5 equals 2 + 4 = 6, hence the output is \\"Yes\\".","solution":"def has_path_sum(n, k, node_values, edges): from collections import defaultdict # Building the tree as adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) def dfs(node, current_sum): nonlocal found visited.add(node) current_sum += node_values[node - 1] if current_sum == k: found = True for neighbor in tree[node]: if neighbor not in visited: dfs(neighbor, current_sum) visited.remove(node) visited = set() found = False for i in range(1, n + 1): # Considering paths starting from each node dfs(i, 0) if found: return \\"Yes\\" return \\"No\\""},{"question":"Consider a cook preparing dishes in a kitchen. The cook has a list of recipes with each recipe needing a certain number of ingredients to be ready. At some moments during the cooking process, the cook receives requests for preparing recipes. Each request specifies a certain recipe that the cook should start preparing. The cook can only work on one recipe at a time and must complete it fully before starting another one. Also, the cook will always choose to prepare the recipe that was requested the earliest among the pending requests. You need to determine the order in which the cook will complete the recipes based on the requests received. The input consists of: - An integer `m` (1 ≤ m ≤ 50,000) representing the number of different recipes. - An integer `n` (1 ≤ n ≤ 100,000) representing the number of requests the cook received. - A line containing `m` integers where the `i-th` integer represents the number of ingredients required for the `i-th` recipe (1 ≤ ingredients[i] ≤ 1,000). - `n` lines, each containing an integer ri (1 ≤ ri ≤ m), representing that a request for the `ri-th` recipe was made at a specific moment. The output should: - Output a single line containing `n` integers where the `i-th` integer represents the moment the cook completed the i-th request. Example: Input: ``` 3 7 2 3 5 1 2 3 1 3 2 3 ``` Output: ``` 2 5 10 12 15 18 23 ``` Explanation: 1. The cook starts with the first request for recipe 1 which requires 2 ingredients and finishes at time 2. 2. The cook then moves to the next request for recipe 2 which requires 3 ingredients and finishes it at time 5. 3. The next in line is recipe 3 which requires 5 ingredients, finishing at time 10. 4. The second request for recipe 1 comes next, requiring 2 ingredients and finishing at time 12. 5. The fourth request for recipe 3 requires 5 ingredients, finishing at time 15. 6. Next, the third request for recipe 2 requires 3 ingredients, finishing at time 18. 7. Finally, the fifth request for recipe 3 requires 5 ingredients, finishing at time 23.","solution":"def cooking_order(m, n, ingredients, requests): Returns the order in which the cook will complete the recipes based on the requests received. Parameters: m (int): Number of different recipes n (int): Number of requests ingredients (list): List of integers representing number of ingredients required for each recipe requests (list): List of integers representing the requests for recipes Returns: list: List of integers indicating the completion times for each request completion_times = [] current_time = 0 for request in requests: current_time += ingredients[request - 1] completion_times.append(current_time) return completion_times"},{"question":"There is a number sequence that is initially empty. You are given n operations to perform on this sequence. Each operation can be one of the following two types: 1. \\"add x\\" - This operation adds the integer x to the end of the sequence. 2. \\"remove\\" - This operation removes the integer at the end of the sequence (if the sequence is not empty). After performing all n operations, determine the sum of the integers in the sequence. If the sequence is empty, the sum is considered to be 0. The first line contains a single integer n (1 ≤ n ≤ 1000) - the number of operations. Each of the next n lines contains a string describing one of the operations. Output the sum of the integers in the sequence after performing all operations. Example: Input: 5 add 3 add 7 remove add 2 add 5 Output: 10","solution":"def sequence_operations(n, operations): Performs a series of add and remove operations on a sequence and returns the sum of the integers in the sequence. Args: n (int): Number of operations. operations (list of str): A list of operations, each being either \\"add x\\" or \\"remove\\". Returns: int: Sum of the integers in the sequence after all operations. sequence = [] for operation in operations: if operation.startswith(\\"add\\"): _, x = operation.split() sequence.append(int(x)) elif operation == \\"remove\\" and sequence: sequence.pop() return sum(sequence)"},{"question":"Henry is the head guard of a large bank and he\'s in charge of security. The bank has n security checkpoints and these checkpoints are connected by m bidirectional corridors. Each corridor has a certain length. The bank\'s corridors form a connected graph. Henry needs to ensure that it is possible to get from any checkpoint to any other checkpoint. Henry has been asked to make the shortest path from checkpoint 1 to checkpoint n as short as possible by adjusting the length of at most one of the corridors. Since the bank is very secure, this adjustment must be done carefully. Specifically, he can either decrease the length of any corridor by up to 1 unit or increase the length of any corridor by up to 1 unit. Your task is to help Henry determine the minimum possible shortest path length from checkpoint 1 to checkpoint n after adjusting at most one corridor. The input consists of: - The first line contains two integers n and m (2 ≤ n ≤ 300 and 1 ≤ m ≤ 300) representing the number of checkpoints and corridors respectively. - Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) indicating that there is a corridor between checkpoints u and v with length w. The output should contain a single integer — the minimum possible shortest path length from checkpoint 1 to checkpoint n after adjusting at most one corridor. Example Input: ``` 5 5 1 2 3 2 3 4 3 4 5 4 5 2 1 5 10 ``` Example Output: ``` 9 ``` Explanation: The shortest path from checkpoint 1 to checkpoint 5 in the original graph is through the corridor with a length of 10. By reducing the length of this corridor to 9, the shortest path from checkpoint 1 to checkpoint 5 becomes 9.","solution":"import heapq def dijkstra(adj_list, start, n): Runs Dijkstra\'s algorithm and returns the shortest distances from start to all nodes. dist = [float(\'inf\')] * (n + 1) dist[start] = 0 min_heap = [(0, start)] while min_heap: current_dist, u = heapq.heappop(min_heap) if current_dist > dist[u]: continue for weight, v in adj_list[u]: if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(min_heap, (dist[v], v)) return dist def shortest_path_after_adjustment(n, m, edges): # Create adjacency list adj_list = [[] for _ in range(n + 1)] for u, v, w in edges: adj_list[u].append((w, v)) adj_list[v].append((w, u)) # Get initial shortest path from 1 to n using Dijkstra dist_from_1 = dijkstra(adj_list, 1, n) original_path_len = dist_from_1[n] min_path_len = original_path_len # Try adjusting each edge by -1 and +1 and find the new shortest path for u, v, w in edges: # Adjust edge (u, v) by -1 if w > 1: adj_list[u].remove((w, v)) adj_list[v].remove((w, u)) adj_list[u].append((w-1, v)) adj_list[v].append((w-1, u)) dist_from_1 = dijkstra(adj_list, 1, n) min_path_len = min(min_path_len, dist_from_1[n]) adj_list[u].remove((w-1, v)) adj_list[v].remove((w-1, u)) adj_list[u].append((w, v)) adj_list[v].append((w, u)) # Adjust edge (u, v) by +1 adj_list[u].remove((w, v)) adj_list[v].remove((w, u)) adj_list[u].append((w+1, v)) adj_list[v].append((w+1, u)) dist_from_1 = dijkstra(adj_list, 1, n) min_path_len = min(min_path_len, dist_from_1[n]) adj_list[u].remove((w+1, v)) adj_list[v].remove((w+1, u)) adj_list[u].append((w, v)) adj_list[v].append((w, u)) return min_path_len"},{"question":"A company maintains a central log system where different applications log their messages in the format <timestamp> <application_id> <severity> <message>. Each log entry consists of: 1. A timestamp, which consists of an integer number of seconds since the epoch. 2. An application id, which is a string without spaces. 3. A severity level, which is one of the predefined strings: \\"INFO\\", \\"WARNING\\", \\"ERROR\\". 4. An arbitrary message string which may contain spaces. You have been tasked to write a program that processes these log entries to find how many different applications have logged a message of a specific severity level within a given time range. The first line of input contains three integers: start_time, end_time, and severity_level_count (0 ≤ start_time < end_time ≤ 2^31, 1 ≤ severity_level_count ≤ 3). The second line contains severity_level_count space-separated severity levels. The third line contains an integer n (1 ≤ n ≤ 100,000) — the number of log entries. The following n lines each contain one log entry formatted as described earlier. Output a single integer indicating the number of distinct applications that have logged at least one message with the specified severity level(s) within the given time range. For example, given input: ``` 1609459200 1609459300 2 INFO ERROR 4 1609459201 app1 INFO Application started 1609459202 app2 WARNING Unresponsive service 1609459203 app1 ERROR Failed to connect to database 1609459250 app3 INFO User logged in ``` The output should be: ``` 2 ```","solution":"def count_distinct_applications(start_time, end_time, severity_levels, log_entries): severity_levels_set = set(severity_levels) distinct_apps = set() for entry in log_entries: parts = entry.split(maxsplit=3) timestamp = int(parts[0]) application_id = parts[1] severity_level = parts[2] if start_time <= timestamp < end_time and severity_level in severity_levels_set: distinct_apps.add(application_id) return len(distinct_apps)"},{"question":"You are given an undirected, weighted graph with n nodes and m edges. Each edge has a positive integer weight. Your task is to find the shortest path from node 1 to node n using at most k edges. If there is no such path, output -1. The first line contains three integers n, m, and k (2 leq n leq 1000, 1 leq m leq 10000, 1 leq k leq n-1). Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 10^9) representing an edge between nodes u and v with weight w. Print the minimum weight of a path from node 1 to node n using at most k edges. If no such path exists, print \\"-1\\". Example: Input: 6 7 3 1 2 5 2 3 10 1 4 2 4 5 3 5 6 8 3 6 1 2 6 4 Output: 14 In the example, the shortest path from node 1 to node 6 using at most 3 edges is 1 -> 2 -> 6, with a total weight of 5 + 4 = 9. Another valid path is 1 -> 4 -> 5 -> 6, with a total weight of 2 + 3 + 8 = 13. However, the one with lesser weight is chosen. Hence the minimum weight path from node 1 to node 6 is 14, achievable within 3 edges.","solution":"import heapq def shortest_path_with_k_edges(n, m, k, edges): # Initialize adjacency list graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # (dist, node, edges_used) pq = [(0, 1, 0)] # Start from node 1 with distance 0 and 0 edges used distances = {} while pq: dist, node, edges_used = heapq.heappop(pq) if edges_used > k: continue if (node, edges_used) in distances: continue distances[(node, edges_used)] = dist if node == n: return dist for neighbor, weight in graph[node]: new_dist = dist + weight heapq.heappush(pq, (new_dist, neighbor, edges_used + 1)) return -1 # Function to parse input and run the solution function def find_shortest_path(n, m, k, edge_list): return shortest_path_with_k_edges(n, m, k, edge_list)"},{"question":"Given a string s consisting of lowercase English letters, you have to find a substring of s that is the longest and consists of repeated occurrences of only one distinct character. If there are multiple such substrings, return the first one found. Write a function called `longest_repeated_char_substring(s: str) -> str` that takes in a string s and returns the longest substring composed of a single repeated character. # Input - The string s (1 ≤ |s| ≤ 10^5). # Output - Return the longest substring composed of a single repeated character. If multiple substrings have the same length, return the one that appears first. # Example Input: ```plaintext aaabbbbcc ``` Output: ```plaintext bbbb ``` Input: ```plaintext abcdddeee ``` Output: ```plaintext ddd ``` # Constraints - The string will consist only of lowercase English letters. - The length of the string will be at least 1 and at most 100,000 characters.","solution":"def longest_repeated_char_substring(s: str) -> str: Returns the longest substring composed of a single repeated character. max_len = 0 max_substring = \\"\\" current_len = 0 current_char = \\"\\" for char in s: if char == current_char: current_len += 1 else: if current_len > max_len: max_len = current_len max_substring = current_char * current_len current_char = char current_len = 1 if current_len > max_len: max_substring = current_char * current_len return max_substring"},{"question":"Alpha loves prime numbers and regularly checks if numbers are prime. He has recently been intrigued by numbers that can be expressed as the sum of prime numbers in consecutive order. For example, the number 41 can be expressed as 2 + 3 + 5 + 7 + 11 + 13. Given a number n, Alpha wants to know if it can be represented as the sum of one or more consecutive prime numbers. Write a program to determine if such a representation exists. # Input: - The input contains a single integer n (2 ≤ n ≤ 10^6). # Output: - Print \\"YES\\" if n can be expressed as the sum of one or more consecutive prime numbers. - Print \\"NO\\" otherwise. # Example: Input: ``` 41 ``` Output: ``` YES ``` Input: ``` 20 ``` Output: ``` NO ```","solution":"def is_prime(num): if num < 2: return False elif num == 2: return True elif num % 2 == 0: return False sqrt_n = int(num**0.5) + 1 for i in range(3, sqrt_n, 2): if num % i == 0: return False return True def consecutive_prime_sum(n): primes = [] sum_primes = 0 # Generate consecutive primes and their cumulative sums i = 2 while sum_primes < n: if is_prime(i): primes.append(i) sum_primes += i i += 1 # Check if any consecutive sum equals n for i in range(len(primes)): sum_consecutive = 0 for j in range(i, len(primes)): sum_consecutive += primes[j] if sum_consecutive == n: return \\"YES\\" if sum_consecutive > n: break return \\"NO\\" # Example usage: # n = int(input().strip()) # print(consecutive_prime_sum(n))"},{"question":"You are given two strings s and t of equal length n. A substring of a string is obtained by removing some (possibly zero) characters from the beginning of the string and some (possibly zero) characters from the end of the string. The goal is to find the length of the longest common substring of s and t. The first line contains an integer n (1 le n le 10^5). The second line contains the string s of length n consisting of lowercase Latin letters. The third line contains the string t of length n consisting of lowercase Latin letters. Print one integer — the length of the longest common substring of s and t. For example: Input: ``` 5 abcde bcdae ``` Output: ``` 3 ``` Explanation: The longest common substring is \\"bcd\\". Input: ``` 6 abcdef ghijkl ``` Output: ``` 0 ``` Explanation: There is no common substring between \\"abcdef\\" and \\"ghijkl\\".","solution":"def longest_common_substring_length(n, s, t): Returns the length of the longest common substring of s and t. :param n: Length of strings s and t. :param s: String s of length n. :param t: String t of length n. :return: Length of the longest common substring of s and t. # Create a DP table to store the lengths of longest common suffixes dp = [[0] * (n + 1) for _ in range(n + 1)] # Result to store the maximum length of the common substring result = 0 # Building the table in bottom-up manner for i in range(1, n + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 result = max(result, dp[i][j]) else: dp[i][j] = 0 return result"},{"question":"Given an n x n grid where some cells are blocked and some are unblocked, you have to find the shortest path from the top-left cell to the bottom-right cell. The path can only be constructed from cells that are unblocked, and you can move in four possible directions: up, down, left, and right. Each move from one cell to an adjacent cell counts as one step. Write a function that determines the length of the shortest path from the top-left cell to the bottom-right cell. If there is no such path, return -1. You are given an n x n binary matrix grid where 0 represents a blocked cell and 1 represents an unblocked cell. Assume that both the top-left and bottom-right cells are always unblocked. **Input**: - The first line contains an integer n (1 ≤ n ≤ 200). - The next n lines contain n space-separated integers 0 or 1 representing the grid. **Output**: - Print the length of the shortest path from the top-left cell to the bottom-right cell. If there is no such path, print -1. **Example**: ```plaintext Input: 4 1 1 0 0 0 1 1 0 0 0 1 0 1 1 1 1 Output: 7 ``` ```plaintext Input: 3 1 0 0 0 0 0 0 0 1 Output: -1 ```","solution":"from collections import deque def shortest_path_binary_matrix(grid): Find the shortest path from the top-left to the bottom-right cell in a binary matrix. :param grid: List of lists representing the grid where 0 is blocked and 1 is unblocked :return: Length of the shortest path or -1 if no path exists n = len(grid) if grid[0][0] == 0 or grid[n-1][n-1] == 0: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (x, y, distance) grid[0][0] = 0 # mark as visited by setting to 0 while queue: x, y, dist = queue.popleft() if x == n-1 and y == n-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 1: queue.append((nx, ny, dist + 1)) grid[nx][ny] = 0 # mark as visited return -1"},{"question":"Given a large warehouse where packages arrive continuously, you need to manage the inventory effectively. Each package has a unique identifier, a type, and an arrival timestamp. You are required to implement a system that supports the following operations efficiently: 1. **Add a Package:** - Add a new package to the inventory with its unique identifier, type, and arrival timestamp. 2. **Remove a Package:** - Remove a package from the inventory using its unique identifier. 3. **Query by Type:** - Given a specific type, return the list of identifiers of packages of that type, in order of their arrival timestamps. 4. **Query by Time Range:** - Given a time range [start, end], return the list of identifiers of packages that arrived within this time range, in order of their arrival timestamps. Implement the system with the following commands: - `1 id type timestamp`: Add a package. - `2 id`: Remove a package. - `3 type`: Query by type. - `4 start end`: Query by time range. The first line of the input will be the number of operations `q` (1 ≤ `q` ≤ 10^5). The following `q` lines will contain the operations as described. Output the results of queries in the same order as they are requested. # Input Format - The first line contains an integer `q` - number of operations. - Each of the next `q` lines contains an operation in one of the four formats described above. # Output Format - For each query (operations 3 and 4), output the list of identifiers meeting the conditions in a single line, separated by spaces. If no packages meet the query conditions, output an empty line. # Constraints - `1 ≤ id ≤ 10^9` - `1 ≤ type ≤ 10^3` - `1 ≤ timestamp ≤ 10^9` # Sample Input ``` 7 1 101 1 100 1 102 1 200 1 103 2 150 4 50 150 3 1 2 101 3 1 ``` # Sample Output ``` 101 103 101 102 102 ```","solution":"class InventorySystem: def __init__(self): self.inventory = {} # Maps id to (type, timestamp) self.type_map = {} # Maps type to list of (timestamp, id) self.time_list = [] # List of (timestamp, id) def add_package(self, id, type, timestamp): if id in self.inventory: return # Avoid duplicate IDs self.inventory[id] = (type, timestamp) if type not in self.type_map: self.type_map[type] = [] self.type_map[type].append((timestamp, id)) self.time_list.append((timestamp, id)) def remove_package(self, id): if id not in self.inventory: return type, timestamp = self.inventory[id] self.inventory.pop(id) if type in self.type_map: self.type_map[type] = [(ts, id_) for ts, id_ in self.type_map[type] if id_ != id] self.time_list = [(ts, id_) for ts, id_ in self.time_list if id_ != id] def query_by_type(self, type): if type not in self.type_map: return [] # Sort by timestamp return [id for ts, id in sorted(self.type_map[type], key=lambda x: x[0])] def query_by_time_range(self, start, end): filtered = [id for ts, id in sorted(self.time_list, key=lambda x: x[0]) if start <= ts <= end] return filtered def process_operations(operations): system = InventorySystem() results = [] for operation in operations: op = list(map(int, operation.split())) if op[0] == 1: system.add_package(op[1], op[2], op[3]) elif op[0] == 2: system.remove_package(op[1]) elif op[0] == 3: result = system.query_by_type(op[1]) results.append(\\" \\".join(map(str, result))) elif op[0] == 4: result = system.query_by_time_range(op[1], op[2]) results.append(\\" \\".join(map(str, result))) return results"},{"question":"Vera loves sequences! She is fascinated by palindromes and wonders if she can transform any sequence into a palindromic sequence. A sequence of integers is called palindromic if it reads the same backward as forward. For example, [3, 1, 2, 1, 3] is a palindromic sequence. You are given a sequence of integers, and Vera wants to make it palindromic by performing a series of operations. In one operation, she can choose any pair of adjacent elements in the sequence and either increase or decrease only one element of the pair by 1. Help Vera determine the minimum number of operations required to transform the given sequence into a palindromic sequence. The first line contains an integer n (1 ≤ n ≤ 1000), the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), the initial sequence. Output a single integer - the minimum number of operations required to transform the sequence into a palindromic sequence. Example: Input: 5 3 1 2 1 3 Output: 0 Explanation: The given sequence [3, 1, 2, 1, 3] is already a palindromic sequence, so no operations are required.","solution":"def min_operations_to_make_palindrome(sequence): Returns the minimum number of operations required to transform the given sequence into a palindromic sequence where one operation is defined as adjusting one element of any pair of adjacent elements by +/- 1. n = len(sequence) operations = 0 left = 0 right = n - 1 while left < right: if sequence[left] != sequence[right]: # We need to make sequence[left] == sequence[right]. diff = abs(sequence[left] - sequence[right]) operations += diff left += 1 right -= 1 return operations"},{"question":"Sam is learning how to play a game called \\"Energy Crystals\\". The game features a 2D grid of size n times m with each cell either having an energy crystal or being empty. Each crystal is of a certain type represented by a positive integer. Sam can collect energy crystals by selecting a rectangular sub-grid from the grid. The score of the selected sub-grid is the sum of the values of the unique crystal types that appear at least once in this sub-grid. To maximize the score, Sam can choose any rectangular sub-grid. However, to avoid overwhelming Sam, you have to help him determine the maximum score for a given grid. The first line contains two integers n and m (1 leq n, m leq 2000), representing the number of rows and columns of the grid, respectively. Each of the next n lines contains m integers a_{ij} (0 leq a_{ij} leq 10^6), representing the value of the crystal in the cell (i, j) or 0 if the cell is empty. Print a single integer — the maximum score Sam can achieve by selecting any rectangular sub-grid. # Example Input ``` 3 3 1 2 3 4 0 5 6 7 8 ``` Output ``` 36 ``` Explanation: The entire grid is selected as the sub-grid, containing all unique crystal values from 1 to 8. The sum is 1+2+3+4+5+6+7+8 = 36.","solution":"def max_score(n, m, grid): unique_crystals = set() for i in range(n): for j in range(m): if grid[i][j] != 0: unique_crystals.add(grid[i][j]) return sum(unique_crystals) # Reading input (for demonstration purposes) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] index = 2 for i in range(n): row = [] for j in range(m): row.append(int(data[index])) index += 1 grid.append(row) print(max_score(n, m, grid))"},{"question":"In a kingdom far away, there are n castles connected by m bidirectional roads. Each road connects two castles (u, v) and has a certain length (d). The kingdom needs to maintain an efficient and safe route system to ensure that all castles can communicate with one another directly or indirectly. The king wants to know how many such routes are needed to connect all the castles with the minimal total road length. This problem can be expressed as finding the Minimum Spanning Tree (MST) of the graph formed by the castles and roads. Given the castles and roads, your task is to compute the total length of the MST. The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of castles and roads, respectively. The next m lines describe the roads. Each of these m lines contains three integers u, v, d (1 ≤ u, v ≤ n, 1 ≤ d ≤ 10000) indicating that there is a road between castle u and castle v with length d. You must output the total length required to connect all the castles in the minimal way using roads. If there are no roads but more than one castle, output “Impossible” as it is not feasible to connect all castles. If there is just one castle, the total length is 0. Example 1: Input: 4 5 1 2 4 1 3 3 1 4 2 2 3 5 3 4 1 Output: 7 Example 2: Input: 3 0 Output: Impossible","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_mst(n, edges): result = [] i = 0 e = 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: if i >= len(edges): return \\"Impossible\\" u, v, w = edges[i] i = i + 1 x = find(parent, u-1) y = find(parent, v-1) if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) total_length = sum([w for u, v, w in result]) return total_length def minimum_total_length(n, m, edges): if n == 1: return 0 if m == 0: return \\"Impossible\\" return kruskal_mst(n, edges)"},{"question":"Little Z is designing an arcade game for his friends. The game consists of a series of challenges, where each challenge has a fixed completion time. Players can either complete a challenge or forfeit it. However, forfeiting a challenge incurs a time penalty. Little Z wants to find the optimal strategy to minimize the total time spent playing the game, including any forfeited challenges and penalties. Given an integer array `times` representing the time required to complete each of the `n` challenges, and an integer `penalty` representing the time penalty for forfeiting a challenge, determine the minimum total time required to complete all challenges. Players may choose to forfeit any number of challenges. # Input - The first line of the input contains two integers `n` and `penalty` (1 ≤ n ≤ 1000, 1 ≤ penalty ≤ 10^6). - The second line contains `n` space-separated integers `times[i]` (1 ≤ times[i] ≤ 10^6), which represent the completion time for each challenge. # Output - Print a single integer representing the minimum total time required to complete all challenges, considering that players can forfeit any challenges and incur the penalty. # Example Input ``` 5 10 1 2 3 4 5 ``` Output ``` 15 ``` # Note In the example: - Players choose to complete all challenges because the penalty for forfeiting (10) is higher than the completion times (1, 2, 3, 4, 5). - Therefore, the minimum total time is calculated as the sum of all completion times: `1 + 2 + 3 + 4 + 5 = 15`.","solution":"def min_total_time(n, penalty, times): Returns the minimum total time to complete challenges considering forfeiting with penalties. :param n: int, number of challenges :param penalty: int, time penalty for forfeiting a challenge :param times: List[int], list of completion times for each challenge :return: int, the minimum total time total_time = 0 for time in times: if time <= penalty: total_time += time else: total_time += penalty return total_time"},{"question":"You are playing a puzzle game where you need to move a character through a grid to a target destination. The grid consists of cells that may be either walkable or blocked. You can move the character up, down, left, or right to an adjacent walkable cell. Diagonal movements are not allowed. The game starts with the character at a given starting position, and the target is located at a given destination position. Your task is to determine the minimum number of moves required to reach the destination from the starting position. If it is not possible to reach the destination, return -1. The grid is represented by an `n x m` matrix where `0` denotes a walkable cell and `1` denotes a blocked cell. The starting and target positions are guaranteed to be walkable. Input Format: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. - The following `n` lines each contain `m` integers describing the grid. - The last line contains four integers `sx`, `sy`, `tx`, `ty` (0 ≤ sx, sy, tx, ty < n, m) — the row and column indices of the starting and target positions. Output Format: - Print a single integer — the minimum number of moves required to reach the target from the starting position, or -1 if it is not possible. Example: ```plaintext 5 5 0 0 1 1 0 0 1 0 1 0 0 0 0 1 0 1 0 1 1 0 0 0 0 0 0 0 0 4 4 ``` Output: ```plaintext 8 ``` Note: In this example, the grid is: ``` 0 0 1 1 0 0 1 0 1 0 0 0 0 1 0 1 0 1 1 0 0 0 0 0 0 ``` The character starts at position (0, 0) and needs to reach position (4, 4). The minimum number of moves required is 8.","solution":"from collections import deque def min_moves(grid, n, m, sx, sy, tx, ty): Returns the minimum number of moves required to reach the target from the starting position. If it is not possible to reach the target, return -1. if not (0 <= sx < n and 0 <= sy < m and 0 <= tx < n and 0 <= ty < m): return -1 # Directions for left, right, up, down. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(sx, sy, 0)]) # (current_x, current_y, current_distance) visited = set((sx, sy)) while queue: x, y, dist = queue.popleft() if (x, y) == (tx, ty): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # Example input task def parse_input_and_solve(puzzle_input): data = puzzle_input.splitlines() n, m = map(int, data[0].split()) grid = [] for i in range(1, n + 1): grid.append(list(map(int, data[i].split()))) sx, sy, tx, ty = map(int, data[n + 1].split()) return min_moves(grid, n, m, sx, sy, tx, ty)"},{"question":"You are given an array of integers representing the number of items sold each day in a store for a given month. You want to find the maximum number of consecutive days where the sales strictly increase each day. For example, if the sales array is [1, 2, 3, 4, 2, 1, 5, 6, 7], the maximum number of consecutive days with increasing sales is 4 (corresponding to the subarray [1, 2, 3, 4]). The first line contains one integer n (1 le n le 10^5) — the number of days in the month. The second line contains n space-separated integers a_1, a_2, ldots, a_n (0 le a_i le 10^6), the number of items sold on each day. Print a single integer — the maximum number of consecutive days with strictly increasing sales. In the first example, the sequence is [1, 3, 5, 2, 4, 6, 8], the 4th to 7th days have the longest subarray with increasing sales [2, 4, 6, 8]. The result is 4. In the second example, the sequence is [7, 1, 2, 3, 0, 0, 0], the 2nd to 4th days have the longest subarray with increasing sales [1, 2, 3], and the result is 3.","solution":"def max_consecutive_increasing_days(n, sales): Finds the maximum number of consecutive days with strictly increasing sales. Parameters: n (int): The number of days in the month. sales (list of int): The number of items sold on each day. Returns: int: The maximum number of consecutive days with strictly increasing sales. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if sales[i] > sales[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Fred is playing a card game with a deck of n unique cards numbered from 1 to n. The deck is initially in increasing order, but Fred can perform a special operation multiple times to shuffle it: he can choose any segment of k consecutive cards and reverse the order of cards within that segment. He wants to know if he can use this operation to completely reverse the order of the deck so that the cards are arranged from n down to 1. Write a program that, given the length of the deck and the segment size, determines whether it is possible to achieve the completely reversed order of the deck using the described operation. The first line of input contains two integers n and k (1 ≤ k ≤ n ≤ 1000) — the number of cards in the deck and the length of the segment he can reverse. Output \\"YES\\" if it is possible to completely reverse the deck using the operation, otherwise output \\"NO\\". # Example Input ``` 6 3 ``` Output ``` YES ``` Input ``` 5 2 ``` Output ``` YES ``` Input ``` 4 3 ``` Output ``` NO ```","solution":"def can_completely_reverse_deck(n, k): Determines if it\'s possible to completely reverse the deck of n cards using the operation of reversing any segment of k consecutive cards. :param n: The number of cards in the deck. :param k: The length of the segment he can reverse. :return: \\"YES\\" if it is possible to reverse the deck, otherwise \\"NO\\". # If k is equal to n or k == 1, we can reverse the whole deck directly (or reversing 1 by 1) if k == n or k == 1: return \\"YES\\" # If n is divisible by k, we can reverse every k segment, which is bigger, and we can reverse larger segments step-by-step. if n % k == 0: return \\"YES\\" # If k is an even number if k % 2 == 0: return \\"YES\\" # If k is odd and the length of the deck is also odd, we can do it step by step. # But if n is even, we can\'t break down odd k into even n evenly. if (n % 2 != 0): return \\"YES\\" # Otherwise, it\'s not possible return \\"NO\\""},{"question":"Given a string `s` of length `n` (1 ≤ n ≤ 100,000), you are required to make the minimum number of character replacements to transform the string into a palindrome—this means that the string should read the same backward as forward. You can replace any character in the string with any other character (from \'a\' to \'z\'). Note that you are only allowed to replace characters and are not allowed to add, remove, or reorder characters. Your task is to write a function that takes the string `s` as input and returns the minimum number of replacements required to make `s` a palindrome. Input: - A single string `s` of length `n`. Output: - An integer representing the minimum number of character replacements needed to transform the string into a palindrome. Example: Input: ``` abba ``` Output: ``` 0 ``` Input: ``` race ``` Output: ``` 2 ``` Explanation: - For the string \\"abba\\", it is already a palindrome; hence, no replacements are needed. - For the string \\"race\\", you need to replace \'r\' with \'e\' and \'c\' with \'a\', or in another way, which requires 2 replacements.","solution":"def min_replacements_to_palindrome(s): Returns the minimum number of character replacements required to make the string a palindrome. n = len(s) replacements = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: replacements += 1 return replacements"},{"question":"Linnea is an avid hiker who loves exploring new mountains. She recently discovered a range of mountains where each mountain is represented by a distinct integer height. Linnea wants to form a subsequence of the mountain heights that is strictly increasing and as long as possible. However, Linnea has a special ability - she can select at most two heights in the sequence and change their values to any other height in the range. Using this ability, she wants to maximize the length of the strictly increasing subsequence she can obtain. Formally, you are given an array of integers a representing the heights of the mountains. You need to determine the maximum length of a strictly increasing subsequence that can be obtained by changing at most two heights in the array to any other values. Input: - The first line contains an integer n (1 leq n leq 100,000) - the number of mountains. - The second line contains n distinct integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) - the heights of the mountains. Output: - Print a single integer - the maximum length of a strictly increasing subsequence that can be obtained by changing at most two heights. Example: Input: ``` 5 5 1 6 3 2 ``` Output: ``` 4 ``` Explanation: One valid way to achieve the result is by changing the heights as follows: [5, 1, 6, 7, 8]. Here, the subsequence [1, 6, 7, 8] is strictly increasing and has a length of 4. We changed heights 3 and 2 to 7 and 8, respectively.","solution":"def max_increasing_subseq_with_two_changes(n, heights): This function returns the maximum length of a strictly increasing subsequence that can be obtained by changing at most two heights in the array to any other values. # Helper function to calculate the length of the Longest Increasing Subsequence (LIS) def lis_length(arr): from bisect import bisect_left lis = [] for x in arr: pos = bisect_left(lis, x) if pos == len(lis): lis.append(x) else: lis[pos] = x return len(lis) if n <= 2: return n # Current longest increasing subsequence length without any changes max_lis_len = lis_length(heights) # Try to optimize by changing each pair of elements for i in range(n): for j in range(i + 1, n): trial_heights = heights[:] for new_i in range(1, 10**9 + 1, max(1, ((10**9 - 1) // (n - 1)))): for new_j in range(new_i+1, 10**9 + 1, max(1, ((10**9 - 1) // (n - 1)))): trial_heights[i], trial_heights[j] = new_i, new_j max_lis_len = max(max_lis_len, lis_length(trial_heights)) trial_heights[i] = heights[i] trial_heights[j] = heights[j] return max_lis_len"},{"question":"Given an undirected graph with `n` nodes and `m` edges, where each node is labeled from `1` to `n`, your task is to determine if the graph contains any cycle. Recall that a cycle in an undirected graph is a sequence of nodes starting and ending at the same node, with each consecutive pair of nodes connected by an edge. You will be given `t` test cases. Each test case starts with two integers `n` and `m` (1 ≤ `n` ≤ 100, 0 ≤ `m` ≤ 100), representing the number of nodes and edges respectively. The next `m` lines contain two integers `u` and `v` (1 ≤ `u`, `v` ≤ `n`), indicating that there is an edge between nodes `u` and `v`. For each test case, output \\"YES\\" if the graph contains a cycle, and \\"NO\\" otherwise. # Input - The first line contains an integer `t` (1 ≤ `t` ≤ 100) — the number of test cases. - For each test case, the first line contains two integers `n` and `m` — the number of nodes and edges respectively. - The next `m` lines for each test case contain two integers `u` and `v` — indicating an edge between node `u` and node `v`. # Output - For each test case, output \\"YES\\" if the graph contains a cycle, and \\"NO\\" otherwise. # Example Input ``` 2 3 3 1 2 2 3 3 1 3 2 1 2 2 3 ``` Output ``` YES NO ``` # Note In the first test case, the graph is a triangle with nodes 1, 2, 3 and edges connecting each pair, thus forming a cycle. In the second test case, the graph is a simple line connecting node 1 to node 2 and node 2 to node 3, without any cycles.","solution":"def contains_cycle(n, m, edges): from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) def dfs(v, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, v): return True elif neighbor != parent: return True return False for i in range(1, n + 1): if not visited[i]: if dfs(i, -1): return \\"YES\\" return \\"NO\\" def solve(test_cases): results = [] for n, m, edges in test_cases: results.append(contains_cycle(n, m, edges)) return results"},{"question":"You are managing a warehouse and need to keep track of different types of boxes. Each type of box has a unique identifier. You have an inventory system where you can perform the following operations: 1. Add a certain number of boxes of a specific type to the inventory. 2. Remove a certain number of boxes of a specific type from the inventory. 3. Retrieve the current number of boxes of a specific type. 4. Retrieve a list of all box types currently in the inventory sorted by their identifiers. However, the total number of boxes in the warehouse should not exceed a given maximum capacity at any given time. The first line of input contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5), the maximum capacity of the warehouse and the number of operations, respectively. The following q lines describe the operations: - To add boxes, the format is `ADD id count`, where id is the identifier of the box type (1 ≤ id ≤ 10^5), and count is the number of boxes to add. - To remove boxes, the format is `REMOVE id count`, where id is the identifier of the box type (1 ≤ id ≤ 10^5), and count is the number of boxes to remove. - To retrieve the current number of boxes, the format is `QUERY id`, where id is the identifier of the box type (1 ≤ id ≤ 10^5). - To get the list of all box types, the format is `LIST`. If an operation would cause the total number of boxes in the warehouse to exceed the maximum capacity, the operation should be ignored. Output the results of any `QUERY` or `LIST` operations. For `QUERY`, output the number of boxes of the given type. For `LIST`, output the sorted list of box type identifiers. Example input: ``` 20 7 ADD 1 5 ADD 2 10 ADD 3 4 QUERY 2 REMOVE 2 5 LIST ADD 2 7 ``` Example output: ``` 10 1 2 3 ``` In the above example, the last `ADD 2 7` operation is ignored because it would exceed the maximum capacity of the warehouse.","solution":"class Warehouse: def __init__(self, max_capacity): self.max_capacity = max_capacity self.inventory = {} self.total_boxes = 0 def add_boxes(self, box_id, count): if self.total_boxes + count > self.max_capacity: return # Ignore the operation if it exceeds maximum capacity if box_id in self.inventory: self.inventory[box_id] += count else: self.inventory[box_id] = count self.total_boxes += count def remove_boxes(self, box_id, count): if box_id in self.inventory: actual_removed = min(count, self.inventory[box_id]) self.inventory[box_id] -= actual_removed if self.inventory[box_id] == 0: del self.inventory[box_id] self.total_boxes -= actual_removed def query_boxes(self, box_id): return self.inventory.get(box_id, 0) def list_box_types(self): return sorted(self.inventory.keys()) def manage_warehouse(n, operations): warehouse = Warehouse(n) result = [] for operation in operations: op = operation.split() if op[0] == \\"ADD\\": _, box_id, count = op warehouse.add_boxes(int(box_id), int(count)) elif op[0] == \\"REMOVE\\": _, box_id, count = op warehouse.remove_boxes(int(box_id), int(count)) elif op[0] == \\"QUERY\\": _, box_id = op result.append(warehouse.query_boxes(int(box_id))) elif op[0] == \\"LIST\\": result.append(\\" \\".join(map(str, warehouse.list_box_types()))) return result"},{"question":"You are given an array of integers that represents the employees\' working hours in a certain month, where element at position i denotes the working hours of the i-th employee in that month. An employee is considered overworked if they have worked more than `h` hours in the month. The company wants to monitor the productivity and prevent overworking, hence they decided to adopt a system where for each employee, after working more than `h` hours, every subsequent hour will \\"contribute\\" to their overtime count. The company decides to give a reward to the employees based on their overtime contribution. The reward amount is determined as follows: for each hour of overtime of an employee, the company will pay them an additional `c` dollars. Write a function that calculates the total reward amount the company needs to pay to all overworked employees. The function should read from the standard input. The first line contains three space-separated integers n (1 ≤ n ≤ 10^5), h (1 ≤ h ≤ 10^3) and c (1 ≤ c ≤ 10^4)— the number of employees, the threshold number of hours `h`, and the dollars paid per overtime hour respectively. The second line contains n space-separated integers representing the working hours of the employees for the month. Your function should output a single integer—the total reward amount the company needs to pay. # Example Input: ``` 5 160 10 180 150 200 170 160 ``` Output: ``` 90 ``` Explanation: - Employee 1 worked 180 hours, so their overtime is 20 hours, contributing 200. - Employee 2 worked 150 hours, no overtime thus 0. - Employee 3 worked 200 hours, so their overtime is 40 hours, contributing 400. - Employee 4 worked 170 hours, so their overtime is 10 hours, contributing 100. - Employee 5 worked exactly 160 hours, no overtime thus 0. The total reward amount is 200 + 0 + 400 + 100 + 0 = 700.","solution":"def calculate_total_reward(n, h, c, working_hours): total_reward = 0 for hours in working_hours: overtime_hours = max(0, hours - h) total_reward += overtime_hours * c return total_reward def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) h = int(data[1]) c = int(data[2]) working_hours = list(map(int, data[3:])) total_reward = calculate_total_reward(n, h, c, working_hours) print(total_reward)"},{"question":"You are designing a game where players navigate through a grid-based maze to reach a goal. The maze is represented as an n x m grid. Each cell in the grid is either empty (represented by \'0\') or blocked (represented by \'1\'). Players can move up, down, left, or right, but cannot move through blocked cells. The player\'s objective is to start at the top-left corner of the maze (0,0) and reach the bottom-right corner (n-1,m-1). Write a program to determine the minimum number of steps required to reach the goal, or return -1 if it is impossible to do so. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the maze. The next n lines contain m characters each, representing the maze grid. \'0\' indicates an empty cell, and \'1\' indicates a blocked cell. Output a single integer — the minimum number of steps to reach the goal, or -1 if it is impossible. Example: Input: 5 5 0 0 1 0 0 1 0 1 0 1 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 Output: 8 Explanation: The player can reach the goal in 8 steps by moving through the following path: (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2) -> (2,3) -> (3,3) -> (4,3) -> (4,4).","solution":"from collections import deque def min_steps_to_reach_goal(n, m, grid): if grid[0][0] == \'1\' or grid[n-1][m-1] == \'1\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited[0][0] = True while queue: row, col, steps = queue.popleft() if row == n-1 and col == m-1: return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and not visited[new_row][new_col] and grid[new_row][new_col] == \'0\': visited[new_row][new_col] = True queue.append((new_row, new_col, steps + 1)) return -1"},{"question":"Given a string of parentheses consisting only of characters \'(\' and \')\', determine the minimum number of parentheses you need to add to the string such that the resulting string is valid. A valid string is balanced and each opening parenthesis has a matching closing parenthesis. The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. The next t lines contain a single string consisting of characters \'(\' and \')\'. The length of each string is at most 10^5. Print t lines. The i-th line should contain a single integer — the minimum number of parentheses you need to add to make the i-th string valid. In the first example, the minimum parentheses to add are shown for each test case: - The first test case already has a balanced string, so the result is 0. - The second test case needs one closing parenthesis to balance the string. - The third test case needs two opening parentheses and one closing parenthesis to balance the string.","solution":"def min_add_to_make_valid(t, cases): For each test case, determine the minimum number of parentheses needed to make the string valid. A valid string must be properly balanced with matching parentheses. Parameters: t: int : the number of test cases cases: list : list of strings of parentheses Returns: list[int] : list of integers, each representing the minimum number of parentheses to add for each test string to make it valid results = [] for s in cases: balance = 0 add_left = 0 for char in s: if char == \'(\': balance += 1 elif char == \')\': if balance > 0: balance -= 1 else: add_left += 1 results.append(balance + add_left) return results"},{"question":"MetaBurst Inc. is working on the development of a complex simulation platform. To enrich their testing scenarios, the developers have created an array of tasks where some tasks cannot start until other tasks are completed. You are tasked with implementing a scheduler that determines the minimum time required to complete all given tasks. Each task has a required time to complete and may have dependencies on other tasks. A task that has dependencies can only start after all the tasks it depends on are completed. The input format is as follows: - The first line contains an integer `n` (`1 ≤ n ≤ 10^5`), the number of tasks. - Each of the next `n` lines describes a single task, where the `i-th` line contains: - An integer `time_i` (`1 ≤ time_i ≤ 10^4`), the time required to complete task `i`. - Followed by an integer `k_i` (`0 ≤ k_i ≤ n-1`), the number of tasks task `i` depends on. - Followed by `k_i` integers which are the indices of the tasks (1-based) that task `i` depends on. Your goal is to determine the minimum total time required to complete all tasks. The output should be a single integer, the minimum time to complete all tasks. # Example Input ``` 5 3 0 2 1 1 1 1 2 4 2 2 3 6 1 4 ``` # Example Output ``` 14 ``` # Explanation In the example above, task 1 takes 3 units of time and has no dependencies. Task 2 takes 2 units of time and depends on task 1, so it can only start after task 1 is done. Similarly, task 3 depends on task 2, task 4 depends on tasks 2 and 3, and task 5 depends on task 4. The sequence of completion is: - Task 1: 3 units - Task 2: finishing at 5 units (3+2) - Task 3: finishing at 6 units (3+2+1) - Task 4: finishing at 10 units (3+2+1+4) - Task 5: finishing at 16 units (3+2+1+4+6) The minimum total time to complete all tasks is 16 - the maximum ending time among all tasks.","solution":"from collections import deque, defaultdict def minimum_completion_time(tasks): Returns the minimum time required to complete all given tasks. tasks is a list of tuples, where each tuple consists of: - An integer time_i, the time required to complete task i. - Followed by an integer k_i, the number of tasks task i depends on. - Followed by k_i integers, the indices of the tasks (1-based) that task i depends on. n = len(tasks) times = [0] * n indegree = [0] * n adj = defaultdict(list) for i in range(n): data = tasks[i] time_i = data[0] k_i = data[1] dependencies = data[2:] times[i] = time_i indegree[i] = k_i for dep in dependencies: adj[dep-1].append(i) queue = deque() total_time = [0] * n for i in range(n): if indegree[i] == 0: queue.append(i) total_time[i] = times[i] while queue: task = queue.popleft() for neighbor in adj[task]: total_time[neighbor] = max(total_time[neighbor], total_time[task] + times[neighbor]) indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) return max(total_time)"},{"question":"Alice has recently started exploring graph theory and is particularly interested in learning about paths within graphs. To challenge herself, she wants to create and solve problems involving finding specific paths in undirected graphs. She came up with the following problem: Given an undirected graph with `n` vertices and `m` edges, find the longest path in terms of the number of edges. In other words, find the maximum length of a path such that no edge is repeated, and no vertex is visited more than once in the path. Note that the path does not need to be a simple path and it does not need to form a cycle. Write a program to determine the length of the longest path. # Input Format - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), representing the number of vertices and edges in the graph, respectively. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n), denoting an edge between vertex `u` and vertex `v`. # Output Format Output a single integer representing the length of the longest path in the given graph. # Example Input ``` 4 4 1 2 2 3 3 4 4 1 ``` Output ``` 3 ``` Explanations In the given example, one of the longest paths is 1-2-3-4 or 2-3-4-1, both of which have a length of 3 edges. # Note For disconnected graphs or in cases where all vertices are isolated, the longest path length would be 0.","solution":"def longest_path(n, m, edges): from collections import defaultdict # Edge cases first if m == 0: # no edges return 0 # Create an adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def dfs(node, visited): visited.add(node) # mark this node as visited max_length = 0 for neighbor in graph[node]: if neighbor not in visited: path_length = 1 + dfs(neighbor, visited) if path_length > max_length: max_length = path_length visited.remove(node) # backtrack return max_length longest = 0 for node in range(1, n + 1): longest = max(longest, dfs(node, set())) return longest"},{"question":"You are given a list of words, where each word may appear multiple times. Your task is to find the maximum number of times a single word appears in the list and the number of distinct words that appear at least once. The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) — the number of test cases. The following lines describe the test cases. For each test case, the first line contains an integer n (1 le n le 10^4) — the number of words in the list. The next n lines contain one word each, consisting of lowercase letters only. It is guaranteed that the total number of words across all test cases does not exceed 10^5. For each test case, output two integers on a single line: the maximum number of times a single word appears in the list, and the number of distinct words that appear at least once. # Example Input ``` 2 5 apple banana apple banana banana 3 cat dog fish ``` Output ``` 3 2 1 3 ``` # Explanation In the first test case, the word \\"banana\\" appears 3 times which is the highest frequency, and there are 2 distinct words (\\"apple\\" and \\"banana\\"). In the second test case, each word (\\"cat\\", \\"dog\\", \\"fish\\") appears exactly once, so the highest frequency is 1 and there are 3 distinct words.","solution":"def word_statistics(test_cases): results = [] for case in test_cases: n, words = case word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 max_frequency = max(word_count.values()) distinct_word_count = len(word_count) results.append((max_frequency, distinct_word_count)) return results def main(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) words = lines[index + 1:index + 1 + n] test_cases.append((n, words)) index += n + 1 results = word_statistics(test_cases) result_str = \'n\'.join(f\\"{result[0]} {result[1]}\\" for result in results) return result_str"},{"question":"You are given an array of n integers. You are allowed to perform exactly one operation on this array: choose any subarray and reverse it. Your goal is to check whether it is possible to sort the array in non-decreasing order by performing this operation exactly once. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Print \\"yes\\" if it is possible to sort the array in non-decreasing order by reversing exactly one subarray. Otherwise, print \\"no\\". If there are multiple answers, print any.","solution":"def can_sort_by_reversing_subarray(n, arr): Checks whether it is possible to sort the array in non-decreasing order by reversing exactly one subarray. Parameters: n (int): Number of elements in the array arr (list of int): The elements of the array Returns: str: \\"yes\\" if it is possible, \\"no\\" otherwise # Make a copy of the array and sort it sorted_arr = sorted(arr) # Find the first and last positions where arr and sorted_arr differ start = 0 while start < n and arr[start] == sorted_arr[start]: start += 1 end = n - 1 while end >= 0 and arr[end] == sorted_arr[end]: end -= 1 # If the array is already sorted if start > end: return \\"yes\\" # Reverse the subarray between start and end (inclusive) arr[start:end + 1] = arr[start:end + 1][::-1] # Check if the array is sorted after reversing the subarray if arr == sorted_arr: return \\"yes\\" else: return \\"no\\""},{"question":"You are given a list of integers and you need to organize them into two separate lists such that the sum of elements in both lists is equal. Each number from the original list must be used exactly once, and each list must contain at least one element. If it is not possible to partition the numbers in such a way, output \\"Not Possible\\". Otherwise, output two lines, the first line containing the elements of the first list and the second line containing the elements of the second list. The first line of input contains an integer n (1 ≤ n ≤ 100), the number of elements in the list. The second line contains n integers a1, a2, ..., an (-10^6 ≤ ai ≤ 10^6), the elements of the list. Each element should be followed by a single space. If there are multiple solutions, print any of them. Example 1: ``` Input: 4 1 2 3 4 Output: 1 4 2 3 ``` Example 2: ``` Input: 3 1 1 3 Output: Not Possible ```","solution":"def partition_equal_sum_lists(arr): Organizes the elements of arr into two lists such that the sum of elements in both lists is equal. If it is not possible, returns \\"Not Possible\\". total_sum = sum(arr) # If the total sum is not even, we cannot partition it into two equal parts if total_sum % 2 != 0: return \\"Not Possible\\" target = total_sum // 2 n = len(arr) # Using dynamic programming to check if partitioning is possible dp = [[False] * (target + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(target + 1): if dp[i-1][j]: dp[i][j] = True elif j >= arr[i-1]: dp[i][j] = dp[i-1][j] or dp[i-1][j - arr[i-1]] if not dp[n][target]: return \\"Not Possible\\" # Recover the partitions from the dp table subset1, subset2 = [], [] while n > 0: if dp[n-1][target]: subset2.append(arr[n-1]) n -= 1 else: subset1.append(arr[n-1]) target -= arr[n-1] n -= 1 # Joining the subsets in the required output format return \' \'.join(map(str, subset1)), \' \'.join(map(str, subset2))"},{"question":"Sam has recently discovered a new interest in painting. To fuel his passion, he decided to paint his house. There are `n` sections in his house, and he has `m` different colors to choose from. Sam wants to paint each section a different color. He came up with a unique way of painting: he wants to make sure that no two directly adjacent sections share the same color. Given the constraints, he also wants to maximize the number of repeated color patterns within his painting scheme. For simplicity, the house can be represented as an undirected graph where sections are vertices and edges represent adjacency between sections. Sam needs a clever way to determine a valid painting scheme that satisfies his criteria and asks for your help in figuring out the maximum number of such patterns that can be repeated across certain sections. You are given the graph in the standard format. The first line contains two integers `n` (1 ≤ n ≤ 1000) and `m` (2 ≤ m ≤ 1000), which represent the number of sections and the number of colors, respectively. Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n; u ≠ v) – describing an edge between vertex `u` and vertex `v`. Output a valid color assignment for the sections that maximizes the number of repeated color patterns, such that no two adjacent sections share the same color. If there are multiple valid solutions, output any. # Example **Input:** ``` 5 3 1 2 1 3 2 4 2 5 ``` **Output:** ``` 1 2 3 1 2 ``` **Explanation:** Using the provided format, the example input indicates a house (undirected graph) with 5 sections and 3 possible colors. One possible valid solution of coloring is given in the output, where each section (node) is colored such that no two adjacent sections have the same color, and some pattern `[1, 2]` gets repeated.","solution":"def color_sections(n, m, edges): from collections import deque # Create adjacency list for the graph graph = [[] for _ in range(n + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) # Initialize the color array with 0 (indicating no color) colors = [0] * (n + 1) # BFS to ensure no two adjacent nodes have the same color def bfs(start_node): queue = deque([start_node]) colors[start_node] = 1 # Start coloring the start_node with color 1 while queue: node = queue.popleft() current_color = colors[node] for neighbor in graph[node]: if colors[neighbor] == 0: # If the neighbor is not colored # Assign a different color for color in range(1, m + 1): if color != current_color: colors[neighbor] = color break queue.append(neighbor) # Call bfs for each component (in case the graph is not connected) for node in range(1, n + 1): if colors[node] == 0: bfs(node) # Return the colors assigned to each section (ignoring the 0-th index) return colors[1:]"},{"question":"The kingdom of Silvergrove is known for its intricate cobblestone roads connecting several towns in the kingdom. There are `n` towns labeled from 1 to `n` and `m` roads connecting these towns bidirectionally. Each road has a certain distance associated with it. The kingdom\'s wise ruler wants to improve the trade routes by ensuring that there is an optimal route between any two towns such that the maximum distance on any single road in that route is minimized. Your task is to help the ruler by determining the minimum possible value of the maximum distances on the roads in the optimal routes between all pairs of towns. # Input: - The first line contains two integers, `n` and `m` (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10^4) - the number of towns and the number of roads. - The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), where `u` and `v` are the towns connected by a bidirectional road, and `w` is the distance of the road. # Output: - Output a single integer, the minimum possible value of the maximum distances on the roads in the optimal routes between any pairs of towns. # Example: Input: ``` 4 5 1 2 5 2 3 6 3 4 2 1 3 10 1 4 8 ``` Output: ``` 6 ``` # Explanation: In the example above, the optimal way to ensure that the maximum distance of any single road in the routes between all pairs of towns is minimized would be to avoid using the road of distance 10 and the road of distance 8. This way, the maximum distance on any road in the optimal routes between towns would be 6.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def is_possible(edges, n, max_weight): parent = [] rank = [] for node in range(n+1): parent.append(node) rank.append(0) for u, v, w in edges: if w <= max_weight: union(parent, rank, find(parent, u), find(parent, v)) # Check if all nodes are connected root = find(parent, 1) for i in range(2, n+1): if find(parent, i) != root: return False return True def minimal_max_distance(n, m, roads): roads.sort(key=lambda x: x[2]) left, right = 1, roads[-1][2] result = right while left <= right: mid = (left + right) // 2 if is_possible(roads, n, mid): result = mid right = mid - 1 else: left = mid + 1 return result"},{"question":"Alex has a set of rectangular tiles to lay down on his floor. Each tile can be rotated by 90 degrees, that is, a tile of dimensions (A times B) can also be used as (B times A). Alex wants to use these tiles to completely cover a rectangular floor grid of dimensions (N times M) without any gaps or overlaps. Given the dimensions of the floor and the number of tiles with their dimensions, determine if it is possible to cover the entire floor using all the given tiles. If possible, print \\"YES\\", otherwise print \\"NO\\". # Input - The first line contains two integers (N) and (M) ((1 leq N, M leq 10^5)) — the floor dimensions. - The second line contains one integer (K) ((1 leq K leq 100)) — the number of types of tiles. - The next (K) lines each contain two integers (A_i) and (B_i) ((1 leq A_i, B_i leq 10^5)) — the dimensions of the (i)-th type of tile. # Output Print \\"YES\\" if it\'s possible to cover the entire floor using the given tiles, otherwise print \\"NO\\". # Example Input ``` 6 8 3 2 4 4 2 3 6 ``` Output ``` YES ``` In this example, we can use three tiles of (2 times 4) or (4 times 2) to cover the floor of (6 times 8). Each tile can fit exactly either horizontally or vertically, making it possible to cover the floor without any gaps or overlaps.","solution":"def can_cover_floor(N, M, K, tiles): Determines if it is possible to cover the entire floor using the given tiles. Parameters: N (int): The length of the floor. M (int): The width of the floor. K (int): The number of types of tiles. tiles (list of tuples): Each tuple contains two integers representing the dimensions of a tile. Returns: str: \\"YES\\" if it\'s possible to cover the floor using the given tiles, otherwise \\"NO\\". floor_area = N * M for A, B in tiles: tile_area = A * B if floor_area % tile_area == 0: return \\"YES\\" if floor_area % (A * B) == 0 and (N % A == 0 or N % B == 0 or M % A == 0 or M % B == 0): return \\"YES\\" return \\"NO\\""},{"question":"Implement a data structure `PrettyTree` to support the following operations on a binary tree: 1. `insert(value)` - Inserts a value into the tree. 2. `delete(value)` - Deletes a value from the tree. 3. `pretty_print()` - Prints the tree in a structured and readable format by levels where the root is at the top and leaves are at the bottom. # Constraints: - The binary tree should be represented using nodes with left and right child pointers. - Insertion should follow the rules of a Binary Search Tree (BST). - Deletion should handle the three cases of node removal in a BST: - Node with no children (leaf node). - Node with one child. - Node with two children. - The `pretty_print` function should clearly display each level of the tree. # Example Usage: ```python tree = PrettyTree() tree.insert(10) tree.insert(5) tree.insert(15) tree.insert(3) tree.insert(7) tree.insert(12) tree.insert(18) tree.pretty_print() # Expected Output (one possible format): # Level 0: 10 # Level 1: 5 15 # Level 2: 3 7 12 18 tree.delete(5) tree.pretty_print() # Expected Output (one possible format): # Level 0: 10 # Level 1: 3 15 # Level 2: 7 12 18 ``` # Notes: - Implement the data structure and the required methods in Python. - You are free to determine the exact format for the `pretty_print` output but it must be structured by level. - Ensure your implementation is efficient and adheres to the constraints of a BST for insertion and deletion operations.","solution":"class TreeNode: def __init__(self, val=0): self.val = val self.left = None self.right = None class PrettyTree: def __init__(self): self.root = None def insert(self, value): if not self.root: self.root = TreeNode(value) else: self._insert_rec(self.root, value) def _insert_rec(self, node, value): if value <= node.val: if node.left: self._insert_rec(node.left, value) else: node.left = TreeNode(value) else: if node.right: self._insert_rec(node.right, value) else: node.right = TreeNode(value) def delete(self, value): self.root = self._delete_rec(self.root, value) def _delete_rec(self, node, value): if not node: return node if value < node.val: node.left = self._delete_rec(node.left, value) elif value > node.val: node.right = self._delete_rec(node.right, value) else: if not node.left: return node.right elif not node.right: return node.left temp_val = self._min_value_node(node.right) node.val = temp_val.val node.right = self._delete_rec(node.right, temp_val.val) return node def _min_value_node(self, node): current = node while current.left: current = current.left return current def pretty_print(self): if not self.root: print(\\"Tree is empty\\") return queue = [(self.root, 0)] current_level = 0 level_nodes = [] while queue: node, level = queue.pop(0) if level == current_level: level_nodes.append(node.val) else: print(f\\"Level {current_level}: \\" + \\" \\".join(map(str, level_nodes))) current_level = level level_nodes = [node.val] if node.left: queue.append((node.left, level + 1)) if node.right: queue.append((node.right, level + 1)) print(f\\"Level {current_level}: \\" + \\" \\".join(map(str, level_nodes)))"},{"question":"Given an array of integers a = [a_1, a_2, ldots, a_n], we define a \\"good subarray\\" as a contiguous subarray where the sum of the elements is exactly divisible by a given integer k. Write a function `count_good_subarrays(n, k, a)` that computes the total number of good subarrays in the array a with respect to k. # Input 1. The first line contains two integers n (1 le n le 200000) and k (1 le k le 10^9) — the length of the array and the integer to check divisibility. 2. The second line contains n integers a_i (-10^9 le a_i le 10^9) — the elements of the array. # Output Return a single integer — the total number of good subarrays. # Example Input: ``` 5 3 1 2 3 4 1 ``` Output: ``` 4 ``` # Explanation The \\"good subarrays\\" are: 1. [3] 2. [1, 2] 3. [2, 3, 4] 4. [4, 1, 2] Their sums are 3, 3, 9, and 6 respectively, which are all divisible by 3.","solution":"def count_good_subarrays(n, k, a): Function to count the number of good subarrays in array a with elements divisible by k. # Dictionary for storing prefix sum frequency modulo k prefix_counts = {0: 1} current_sum = 0 good_subarrays = 0 for num in a: current_sum += num remainder = current_sum % k # Adjust for Python\'s negative modulo results if remainder < 0: remainder += k if remainder in prefix_counts: good_subarrays += prefix_counts[remainder] prefix_counts[remainder] += 1 else: prefix_counts[remainder] = 1 return good_subarrays"},{"question":"Tia is a fan of geometric shapes and loves playing with triangles specifically. One day, she comes across a challenge involving triangles formed by lattice points on a 2D plane. Given three sets of points {A, B, C}, your task is to determine whether these points can form a non-degenerate triangle on a lattice grid. A non-degenerate triangle is one with a non-zero area. Each of the points A, B, C are given as coordinates on a 2D plane. Specifically, you need to check if the three given points are collinear or not. If they are collinear, they do not form a non-degenerate triangle. # Input The input consists of three lines, each line containing two integers representing the coordinates of points A, B, and C respectively: - The first line contains two integers x_1 and y_1 (-10^6 le x_1, y_1 le 10^6). - The second line contains two integers x_2 and y_2 (-10^6 le x_2, y_2 le 10^6). - The third line contains two integers x_3 and y_3 (-10^6 le x_3, y_3 le 10^6). # Output Print \\"YES\\" if points A, B, and C can form a non-degenerate triangle, otherwise print \\"NO\\". # Example Input ``` 0 0 1 1 2 2 ``` Output ``` NO ``` Input ``` 0 0 1 1 1 2 ``` Output ``` YES ``` # Hints To determine whether the points are collinear, you can use the concept of the area of a triangle formed by three points. The area can be given by the determinant formula: [ text{Area} = 0.5 left| x_1(y_2 - y_3) + x_2(y_3 - y_1) + x_3(y_1 - y_2) right| ] If the area is zero, the points are collinear.","solution":"def can_form_triangle(x1, y1, x2, y2, x3, y3): Determines if three points can form a non-degenerate triangle. # Calculate the area using the determinant formula area = x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2) # If the area is zero, points are collinear, so no non-degenerate triangle can be formed if area == 0: return \\"NO\\" else: return \\"YES\\""},{"question":"You are given a circular race track with `n` checkpoints numbered from 1 to `n`, arranged in a circle. Each checkpoint `i` has a time penalty `t_i` associated with it. A runner wants to run a complete lap around the circular track starting and ending at any checkpoint. The runner can start at any checkpoint, but must complete the entire lap, returning to the starting checkpoint. The time penalty for the lap is the sum of time penalties of all the `n` checkpoints visited in the lap. Given the number of checkpoints and the time penalties associated with each checkpoint, compute the minimum time penalty for a complete lap starting from any checkpoint. The first line contains an integer `n` (2 ≤ n ≤ 1000) — the number of checkpoints on the race track. The second line contains `n` integers `t_1, t_2, ..., t_n` (1 ≤ t_i ≤ 1000) — the time penalties of each checkpoint. Print the minimum time penalty for a complete lap starting from any checkpoint. In the first example, starting at checkpoint 1, the time penalties are [1, 2, 3]. The total penalty is 1 + 2 + 3 = 6. In the second example, starting at checkpoint 3, the time penalties are [3, 2, 1]. The total penalty is 3 + 2 + 1 = 6. In the third example, the configurations starting at any of the checkpoints yields the same total penalty of 9.","solution":"def minimum_lap_time(n, t): Returns the minimum time penalty for a complete lap starting from any checkpoint. :param n: Number of checkpoints (int) :param t: List of time penalties for each checkpoint (list of int) :return: Minimum time penalty for a complete lap (int) if n == 2: return sum(t) total_time = sum(t) return total_time"},{"question":"Vivek loves to play with numbers. Given an integer array a of length n. He wants to find the longest subsequence, such that for any two elements a_i and a_j (i < j) in the subsequence the following conditions hold: 1. a_j - a_i is a prime number. Given the array a, help Vivek to find the length of the longest subsequence. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, the prime numbers are 2, 3, 5, 7, 11, and so on. # Input - The first line contains an integer n (1 le n le 10^5), the length of the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9), the elements of the array. # Output - Print a single integer, the length of the longest subsequence for which the condition holds. # Example Input ``` 5 3 7 12 8 15 ``` Output ``` 3 ``` Explanation One possible longest subsequence is [3, 7, 15], where the differences between the elements are 4 and 8 which are prime numbers. The length of this subsequence is 3. Note You need to implement a solution using efficient algorithms to handle the input limits. Calculating prime differences might require preprocessing to determine prime numbers up to a suitable limit.","solution":"import math from collections import defaultdict def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def generate_prime_set(max_diff): primes = set() for i in range(2, max_diff + 1): if is_prime(i): primes.add(i) return primes def longest_subsequence_with_prime_diff(n, arr): if n == 1: return 1 arr.sort() dp = [1] * n max_diff = arr[-1] - arr[0] prime_set = generate_prime_set(max_diff) for i in range(1, n): for j in range(i): diff = arr[i] - arr[j] if diff in prime_set: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Amara loves to collect rare coins and she has a collection that contains coins of various values. She likes to categorize her collection into unique subsets where each subset has a specific property: the Difference Constraint. The Difference Constraint property states that for any two coins in the same subset, the absolute difference between their values must be greater than or equal to a given integer d. Amara wants to know the maximum number of unique subsets she can create from her collection such that each subset satisfies the Difference Constraint. Can you help her compute this? The first line contains two integers n and d (1 ≤ n ≤ 100, 1 ≤ d ≤ 10^4) — the number of coins in Amara\'s collection and the Difference Constraint value respectively. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the values of the coins in Amara\'s collection. Print one integer — the maximum number of unique subsets Amara can create from her collection. Example: Input 5 3 1 5 9 13 17 Output 5 Explanation: Each coin can be its own subset since the absolute difference between any two coins (if included in the same subset) does not meet the constraint of being at least 3. Therefore, the maximum number of unique subsets is 5, and each subset consists of a single coin.","solution":"def max_unique_subsets(n, d, coin_values): Calculate the maximum number of unique subsets that can be created where the absolute difference between any two coins in the subset is greater than or equal to given integer d. Parameters: n (int): Number of coins. d (int): The Difference Constraint value. coin_values (list): A list of integers representing the values of the coins. Returns: int: The maximum number of unique subsets. # Sort the coin values to consider them in ordered manner coin_values.sort() # Initial count of subsets subsets_count = 0 i = 0 while i < n: # Increment subsets count subsets_count += 1 # Take the current coin and find the next coin which can be the start of the next subset j = i + 1 while j < n and coin_values[j] - coin_values[i] < d: j += 1 # Move to the next coin which can be the start of the new subset i = j return subsets_count # Example usage n, d = 5, 3 coin_values = [1, 5, 9, 13, 17] print(max_unique_subsets(n, d, coin_values)) # Output: 5"},{"question":"Lisa loves collecting coins from different countries. She has n coins placed in a single line. Each coin has a specific number (denoted by `c_i`). Lisa can perform the following operation: she can take any two adjacent coins and merge them into a new coin with the value equal to their sum (`c_j + c_{j+1}`). This results in reducing the total number of coins by one. Lisa is curious to know the minimum possible value of the largest coin she can achieve by repeatedly performing this operation any number of times. Write a function that takes an integer n and an array of integers coins representing the values of the coins Lisa has, and returns the minimum possible value of the largest coin after merging. # Input - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of coins. - The second line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 1,000) — the initial values of the coins. # Output - Print a single integer — the minimum possible value of the largest coin after merging. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 15 ```","solution":"def min_largest_coin(n, coins): Returns the minimum possible value of the largest coin after merging any number of times. return sum(coins)"},{"question":"Mark is trying to collect as many unique Pokemon as he can in the least amount of time. He has a series of special Pokeballs, and each Pokeball takes a specific cooldown time to be ready to catch another Pokemon after being used. However, Mark wants to know the minimum total time required to use all his Pokeballs at least once given that he can wait out cooldowns concurrently if he uses multiple Pokeballs. Help Mark calculate this minimum total time. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) – the number of Pokeballs Mark has. The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 1,000,000) – the cooldown times for each Pokeball. Output a single integer – the minimum total time required to use all the Pokeballs at least once. Consider the following examples: Example 1: Input: 4 4 3 2 1 Output: 4 Example 2: Input: 5 10 3 5 7 4 Output: 10 Explanation: In the first example, Mark can use all four Pokeballs at the same time, leading to the minimum total time being the highest cooldown, which is 4. In the second example, he can use all Pokeballs simultaneously, and the minimum total time required is the highest cooldown among them, which is 10.","solution":"def min_total_time(n, cooldowns): Returns the minimum total time required to use all the Pokeballs at least once. Parameters: n (int): Number of Pokeballs cooldowns (List[int]): List of cooldown times for each Pokeball Returns: int: Minimum total time required return max(cooldowns)"},{"question":"A new mobile game is becoming incredibly popular in BeautifulLand. The rules of the game are quite simple. There is a board of size `n x n` containing `n` rows and `n` columns, and each cell of this board can contain a number between 0 and 9 inclusive. Initially, all cells on the board have the number `0`. Players take turns to play the game. On each turn, a player can choose any cell on the board and increase the number in that cell by 1, but there\'s a constraint. A player can only choose a cell such that its row and column indices are either both even or both odd. The game ends when all numbers in all cells in the board are equal. The player who can\'t make a move loses. If it is Player 1\'s turn, determine if Player 1 can guarantee a win assuming both players play optimally well. # Input The first line contains an integer `n` (1 ≤ n ≤ 50) — the size of the board. The second line contains a single integer `p` (0 or 1), indicating whether it is Player 1\'s (represented by 1) or Player 2\'s (represented by 0) turn. # Output Output \\"Win\\" if the player who starts the game will win, otherwise output \\"Lose\\". # Examples Example 1 # Input ``` 3 1 ``` # Output ``` Win ``` Example 2 # Input ``` 2 0 ``` # Output ``` Lose ```","solution":"def can_player1_win(n, p): Determines if Player 1 can guarantee a win given the board size `n` and the initial player `p`. if n % 2 == 1: return \\"Win\\" else: return \\"Lose\\""},{"question":"Jeff is planning to build a wall in his backyard. He has **n** types of bricks, each with a different height. He wants the wall to be as stable as possible, and for that, he needs to ensure that no two adjacent bricks have the same height. Jeff has a list of bricks he can use and the heights of each brick type. He wants to know the maximum possible height of the wall he can build if each brick type can be used at most once. Write a program that determines the maximum height of such a wall. The first line of the input contains an integer **n** (1 ≤ n ≤ 100), the number of brick types. The second line contains **n** integers **h1, h2, ..., hn** (1 ≤ hi ≤ 1000), the heights of the brick types. Output a single integer, the maximum height of the wall Jeff can build. Example Input: ``` 5 1 3 2 6 4 ``` Output: ``` 16 ``` Input: ``` 3 8 1 2 ``` Output: ``` 11 ``` Explanation: In the first example, Jeff can use the bricks with heights 1, 3, 2, 6, and 4 to build a wall of height 16, ensuring no two adjacent bricks are of the same height. In the second example, Jeff can arrange the bricks with heights 8, 1, and 2 to achieve a maximum wall height of 11.","solution":"def max_wall_height(n, heights): Determine the maximum possible height of a wall where no two adjacent bricks have the same height. Parameters: n (int): The number of brick types heights (list): The list of brick heights Returns: int: The maximum possible height of the wall # Sort the heights in descending order heights.sort(reverse=True) # Sum all heights since no two adjacent bricks need to have the same height max_height = sum(heights) return max_height"},{"question":"You are given a directed acyclic graph (DAG) with n nodes and m edges. Each node represents a task, and each directed edge represents a dependency between two tasks. Your task is to determine if it is possible to complete all tasks. If it is possible, you should find one possible order to complete the tasks such that all dependencies are met. The first line of the input contains two integers n and m (1 le n le 10^5, 0 le m le 10^5) which represent the number of nodes and edges in the graph, respectively. The next m lines contain two integers u and v (1 le u, v le n), indicating that there is a directed edge from node u to node v. Output \\"IMPOSSIBLE\\" if it is not possible to complete all tasks. Otherwise, output a list of integers representing one possible order in which the tasks can be completed, such that all dependencies are met. Example input: ``` 6 6 1 2 1 3 3 2 4 5 5 6 4 6 ``` Example output: ``` 1 3 2 4 5 6 ``` Note that there can be multiple valid answers; you need to provide only one.","solution":"from collections import deque, defaultdict def find_task_order(n, m, edges): # Create graph and compute in-degrees graph = defaultdict(list) in_degree = [0] * (n + 1) for u, v in edges: graph[u].append(v) in_degree[v] += 1 # Perform Kahn\'s Algorithm for Topological Sorting queue = deque([node for node in range(1, n + 1) if in_degree[node] == 0]) topo_order = [] while queue: node = queue.popleft() topo_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If the topological order has all the nodes, return it, else it\'s impossible if len(topo_order) == n: return topo_order else: return \\"IMPOSSIBLE\\""},{"question":"Alex has a collection of strings, and he likes to play with them by transforming and combining them in various ways. Today, he found a new way to play with his strings. Given a string, he wants to perform the following operation exactly k times: 1. Select any character in the string and remove it. 2. Append the removed character back to either end of the string. After performing k operations, Alex wants to know how many distinct strings he can obtain. Can you help him find the answer? The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000) — the length of the string and the number of operations, respectively. The second line contains a string s of length n consisting of lowercase English letters. Print a single integer — the number of distinct strings possible after exactly k operations. In the first sample, the original string is \\"ab\\". After one operation, it could become \\"ba\\" (moving \'a\' to the end) or remain \\"ab\\" (moving \'b\' to the start). In the second sample, the original string is \\"abc\\". After two operations, the string can have multiple different forms like \\"bca\\", \\"cab\\", \\"abc\\", etc.","solution":"def distinct_string_after_k_operations(n, k, s): Returns the number of distinct strings possible after exactly k operations. Parameters: n : int - the length of the string k : int - the number of operations s : str - the given string Returns: int - the number of distinct strings possible after exactly k operations # If k is greater than or equal to the length of the string, we can rearrange any character if k >= n: return len(set(s)) # Collect all distinct substrings we can obtain after k operations. substrings = set() # Perform the operation for all possible substrings for _ in range(k): for i in range(n): new_string1 = s[1:] + s[0] # move first char to the end new_string2 = s[-1] + s[:-1] # move last char to the start substrings.add(new_string1) substrings.add(new_string2) s = new_string1 return len(substrings)"},{"question":"Oliver and Matilda are tasked with organizing a competition for their school\'s computer science club. The competition involves a series of coding challenges where participants solve problems to earn points. The event has two rounds, and each participant must complete exactly one challenge per round. The points for each challenge are already predetermined. Because Oliver and Matilda want the competition to be fair, they decide to maximize the minimum total score that any participant can get across the two rounds. Specifically, Oliver and Matilda have a list of challenges for round one and a list of challenges for round two. Each challenge has an associated point value. They need to assign challenges so that each participant completes exactly one challenge in round one and one challenge in round two, in such a way that the minimum sum of points any participant earns over both rounds is maximized. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of challenges in round one and round two respectively. The second line contains n integers denoting the points for each challenge in round one. The third line contains m integers denoting the points for each challenge in round two. Print a single integer — the maximum possible minimum sum of points any participant can earn across the two rounds. Example: Input: 3 3 1 2 3 4 5 6 Output: 5 Explanation: By assigning the highest challenges to different participants, we can ensure that the minimum sum for any participant is maximized as 5. The combinations could be: - Participant 1: Round 1 (3 points) + Round 2 (2 points) = 5 points - Participant 2: Round 1 (2 points) + Round 2 (3 points) = 5 points - Participant 3: Round 1 (1 point) + Round 2 (4 points) = 5 points Note: - Ensure you match participants wisely across both rounds to maximize the fairness of the competition.","solution":"def maximize_min_sum(points_round1, points_round2): Returns the maximum possible minimum sum of points any participant can earn across two rounds. points_round1.sort() points_round2.sort() return points_round1[0] + points_round2[0] # Example Usage n, m = 3, 3 points_round1 = [1, 2, 3] points_round2 = [4, 5, 6] print(maximize_min_sum(points_round1, points_round2)) # Output: 5"},{"question":"A mysterious island has a unique currency system. The inhabitants use special coins, each with a positive integer value. The wizard of the island has a peculiar interest in these coins. He gave you a task to find the minimum number of coins needed to make up a certain amount of money. Given a list of different coins and a total amount of money, find the minimum number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. Note that you have an infinite number of each kind of coin. The first line of input contains two integers, n (1 ≤ n ≤ 100) — the number of different coins and m (1 ≤ m ≤ 10,000) — the amount of money. The second line contains n space-separated integers c_i (1 ≤ c_i ≤ 10,000) — the values of the coins. Output the minimum number of coins needed to make up the amount m. If it\'s not possible to form that amount, output -1. # Example Input 3 11 1 2 5 Output 3 Explanation The minimum number of coins to make 11 is 3 using coins with values 5, 5, and 1.","solution":"def min_coins(n, m, coins): Function to find the minimum number of coins needed to make up a certain amount of money. :param n: Number of different coins :param m: Amount of money :param coins: List of coin values :return: Minimum number of coins needed to make up the amount m, or -1 if not possible # Initializing the dp array with a value greater than the possible minimum coins needed dp = [float(\'inf\')] * (m + 1) # Base case: No coins are needed to make 0 amount dp[0] = 0 for coin in coins: for amount in range(coin, m + 1): dp[amount] = min(dp[amount], dp[amount - coin] + 1) return dp[m] if dp[m] != float(\'inf\') else -1"},{"question":"You are given an array of integers representing the heights of students standing in a line. The teacher wants to divide the students into two non-empty groups such that the absolute difference between the sum of the heights of these two groups is minimized. Write a function that calculates this minimum absolute difference. # Function Signature ```python def minimum_group_difference(n: int, heights: List[int]) -> int: ``` # Input - `n` (1 ≤ n ≤ 100): An integer representing the number of students. - `heights` (1 ≤ heights[i] ≤ 100 for all i): A list of integers representing the heights of the students. # Output - Return an integer representing the minimum absolute difference between the sums of the heights of the two groups. # Example ```python assert minimum_group_difference(5, [1, 3, 4, 2, 2]) == 0 assert minimum_group_difference(3, [10, 20, 15]) == 5 assert minimum_group_difference(4, [1, 2, 3, 4]) == 0 ``` # Note - In the first example, you can divide the heights into [1, 3, 4] and [2, 2] with sums 8 and 4+4=8, respectively. The absolute difference between these sums is 0. - In the second example, the closest you can get is dividing heights into [10, 15] and [20] with sums 25 and 20, respectively. The absolute difference is 5. - The problem is analogous to the partition problem, which can be solved using dynamic programming.","solution":"from typing import List def minimum_group_difference(n: int, heights: List[int]) -> int: total_sum = sum(heights) target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for height in heights: for j in range(target, height - 1, -1): dp[j] = dp[j] or dp[j - height] for i in range(target, -1, -1): if dp[i]: return total_sum - 2 * i return total_sum"},{"question":"You are given an n x n grid composed of 1s and 0s. Your goal is to determine the largest square subgrid that contains all 1s. A square subgrid must be contiguous and its sides must be aligned with the sides of the original grid. The input consists of an integer n (1 ≤ n ≤ 1000) representing the size of the grid, followed by n lines, each containing n binary digits (either \'0\' or \'1\') separated by spaces. Your task is to output the size of the largest square subgrid that contains all 1s. If there are no such subgrids, output 0. # Input - An integer n representing the size of the grid. - Followed by n lines of n binary digits separated by spaces. # Output - An integer representing the size of the largest square subgrid consisting entirely of 1s. # Example **Input:** ``` 5 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 ``` **Output:** ``` 3 ``` **Explanation:** The largest subgrid with all 1s is of size 3x3, present at positions (2,2) to (4,4).","solution":"def largest_square_subgrid(n, grid): if n == 0: return 0 # Create a DP table filled with 0s with dimensions (n+1)x(n+1) dp = [[0] * (n + 1) for _ in range(n + 1)] largest_size = 0 # Fill the DP table for i in range(1, n + 1): for j in range(1, n + 1): if grid[i-1][j-1] == 1: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 largest_size = max(largest_size, dp[i][j]) return largest_size # Helper function to parse the grid input from the provided string def parse_input(input_string): input_lines = input_string.strip().split(\'n\') n = int(input_lines[0]) grid = [list(map(int, line.split())) for line in input_lines[1:]] return n, grid"},{"question":"You are given a sequence of integers and tasked with reorganizing the sequence such that the result is the lexicographically smallest sequence possible after at most one swap of two elements. The lexicographical order is the order in which words are listed in a dictionary. Input begins with an integer N (2 ≤ N ≤ 105), the number of elements in the sequence. Following this is a line with exactly N integers a1, a2, ..., aN (1 ≤ ai ≤ 106), the elements of the sequence. Print the lexicographically smallest sequence possible after at most a single swap of two elements. If no swap can improve the sequence, print the original sequence. In the first example, swapping 5 and 2 results in the smallest sequence. In the second example, the sequence is already smallest, so the original sequence is returned. For example: ``` Input: 4 4 3 2 1 Output: 1 3 2 4 Input: 3 1 2 3 Output: 1 2 3 ```","solution":"def lexicographically_smallest_sequence(N, sequence): Returns the lexicographically smallest sequence achievable by at most one swap. # Create a sorted version of the sequence sorted_sequence = sorted(sequence) # If the sequence is already the smallest, return it if sequence == sorted_sequence: return sequence # Identify the first element that differs from the sorted sequence for i in range(N): if sequence[i] != sorted_sequence[i]: break # Find the correct position of this element in the unsorted sequence for j in range(N-1, -1, -1): if sequence[j] == sorted_sequence[i]: break # Swap the elements sequence[i], sequence[j] = sequence[j], sequence[i] return sequence"},{"question":"You are given an array of integers and an integer k. An integer x is called \\"k-rotatable\\" in the array if there exists a rotation of the array by any number of positions such that x is at the k-th position (1-indexed). An array is rotated by moving its elements circularly to the right. For example, rotating the array [1, 2, 3, 4] once to the right results in [4, 1, 2, 3], and rotating again results in [3, 4, 1, 2]. Your task is to find and print all the \\"k-rotatable\\" integers in the array. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case, the first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n) — the length of the array and the position index k. The second line contains n space-separated integers representing the elements of the array. For each test case, print the count of \\"k-rotatable\\" integers followed by the \\"k-rotatable\\" integers in any order. Examples: Input: 3 4 2 1 2 3 4 5 3 10 20 30 40 50 6 5 6 7 8 1 2 3 Output: 4 2 3 4 1 5 10 20 30 40 50 6 7 8 1 2 3","solution":"def k_rotatable_elements(t, test_cases): result = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] rotatable_elems = arr[(k-1):] + arr[:(k-1)] result.append((len(rotatable_elems), rotatable_elems)) return result"},{"question":"There are two sequences of integers, α and β, both of length n. You can perform the following operation any number of times on α: * Pick any two indices i and j (1 <= i, j <= n). * Swap elements α_i and α_j (swap α_i with α_j). Your task is to determine whether you can reorder the elements of α, possibly performing the operation multiple times, such that the reordered sequence α becomes identical to the sequence β. If it\'s possible, print \\"YES\\". Otherwise, print \\"NO\\". The first line contains an integer t (1 <= t <= 100) — the number of test cases. Each test case consists of three lines: * The first line contains an integer n (1 <= n <= 100) — the length of sequences α and β. * The second line contains n integers — the sequence α. * The third line contains n integers — the sequence β. For each test case, print \\"YES\\" if it is possible to reorder α to match β; otherwise, print \\"NO\\". Example input: ``` 2 3 4 1 3 1 3 4 2 5 5 5 6 ``` Example output: ``` YES NO ``` Explanation: In the first test case, α = [4, 1, 3] can be reordered to become [1, 3, 4], which matches β, so the output is \\"YES\\". In the second test case, α = [5, 5] cannot be reordered to match β = [5, 6], so the output is \\"NO\\".","solution":"def can_reorder_to_match(t, test_cases): results = [] for case in test_cases: n, alpha, beta = case if sorted(alpha) == sorted(beta): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Helper function to parse input and invoke the solution def solve(input_str): input_lines = input_str.strip().split(\'n\') t = int(input_lines[0].strip()) test_cases = [] current_line = 1 for _ in range(t): n = int(input_lines[current_line].strip()) alpha = list(map(int, input_lines[current_line + 1].strip().split())) beta = list(map(int, input_lines[current_line + 2].strip().split())) test_cases.append((n, alpha, beta)) current_line += 3 results = can_reorder_to_match(t, test_cases) return \\"n\\".join(results)"},{"question":"You are given a grid with n rows and m columns consisting of characters \'*\' and \'.\'. A rectangle in the grid is defined by four corners (r1, c1), (r1, c2), (r2, c1), and (r2, c2) such that r1 ≤ r2 and c1 ≤ c2. A rectangle is called filled if every cell inside it contains a \'*\'. Your task is to find the rectangle with the maximum area that is fully filled with \'*\' and print its area. If there are multiple rectangles with the same maximum area, print the area of any one of them. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. Each of the next n lines contains m characters (\'*\' or \'.\'). Print a single integer — the area of the largest filled rectangle. Consider the following example: Input: 4 5 ***** *..** ***** ***** Output: 10 In this example, there are several filled rectangles of different sizes, but the one with the maximum area is a 2x5 rectangle from row 3 to row 4 and column 1 to column 5. Thus, the output is 10.","solution":"def max_filled_rectangle_area(n, m, grid): max_area = 0 # Convert grid to list of lists of ints for easier manipulation (\'*\' -> 1, \'.\' -> 0) matrix = [[1 if grid[r][c] == \'*\' else 0 for c in range(m)] for r in range(n)] # Prepare storage for heights heights = [0] * m for row in matrix: for i in range(m): # Calculate heights of consecutive \'*\' columns if row[i] == 0: heights[i] = 0 else: heights[i] += row[i] # Calculate max area for this row\'s histogram max_area = max(max_area, largest_rectangle_area_in_histogram(heights)) return max_area def largest_rectangle_area_in_histogram(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area # Input and output can be handled as below but for the purpose of running the function directly # We assume input is provided correctly directly def find_max_filled_rectangle(n, m, grid_list): return max_filled_rectangle_area(n, m, grid_list)"},{"question":"You are given a tree with weighted edges consisting of n nodes. The task is to perform multiple queries on this tree, where each query either updates the weight of a specific edge or finds the maximum weight edge on the path between two given nodes. The first line of the input contains an integer n (1 ≤ n ≤ 100,000), the number of nodes in the tree. Each of the next n-1 lines contains three integers u, v, and w (1 ≤ u, v ≤ n; 1 ≤ w ≤ 1,000,000), representing an edge between nodes u and v with weight w. Following this are q queries (1 ≤ q ≤ 100,000). Each query is formatted as follows: - \\"1 u v w\\" for updating the weight of the edge between nodes u and v to w. - \\"2 u v\\" for finding the maximum edge weight in the path between nodes u and v. Output the result of each type \\"2\\" query in a separate line. # Example **Input:** ``` 4 1 2 3 2 3 4 3 4 5 3 2 1 3 1 1 2 6 2 1 3 ``` **Output:** ``` 4 6 ``` # Explanation - The initial tree has edges: (1-2, weight 3), (2-3, weight 4), (3-4, weight 5). - Query \\"2 1 3\\" asks for the maximum weight on the path from 1 to 3, which is 4. - Query \\"1 1 2 6\\" updates the weight of the edge between nodes 1 and 2 to 6. - Query \\"2 1 3\\" now asks for the maximum weight on the path from 1 to 3, which is now 6.","solution":"class Tree: def __init__(self, n): self.n = n self.adj = [[] for _ in range(n + 1)] self.edges = {} def add_edge(self, u, v, w): self.adj[u].append((v, w)) self.adj[v].append((u, w)) self.edges[(min(u, v), max(u, v))] = w def update_edge(self, u, v, w): self.edges[(min(u, v), max(u, v))] = w for i in range(len(self.adj[u])): if self.adj[u][i][0] == v: self.adj[u][i] = (v, w) break for i in range(len(self.adj[v])): if self.adj[v][i][0] == u: self.adj[v][i] = (u, w) break def find_max_weight(self, u, v): visited = [False] * (self.n + 1) return self.dfs(u, v, visited) def dfs(self, current, target, visited): if current == target: return 0 visited[current] = True for neighbor, weight in self.adj[current]: if not visited[neighbor]: max_weight = self.dfs(neighbor, target, visited) if max_weight != -1: return max(weight, max_weight) return -1 def solve(n, edges, queries): tree = Tree(n) for u, v, w in edges: tree.add_edge(u, v, w) results = [] for query in queries: t = query[0] if t == 1: _, u, v, w = query tree.update_edge(u, v, w) elif t == 2: _, u, v = query results.append(str(tree.find_max_weight(u, v))) return \\"n\\".join(results)"},{"question":"You are given an array a1, a2, ..., an consisting of distinct integers. Unfortunately, some elements in the array were altered due to a transmission error. The length of the original array before the error occurred was exactly n, but now the length of the altered array is n+1. One element was added twice due to the error. Your task is to identify this duplicate element. The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the original array. The second line contains n+1 space-separated integer numbers a1, a2, ..., an+1 (1 ≤ ai ≤ 5000) — the elements of the altered array. It is guaranteed that the array (before being altered) had all distinct elements, and there is exactly one integer that appears twice in the given array. Print one integer — the duplicate element that appears twice in the altered array. For example: Input: 5 1 2 3 4 5 3 Output: 3","solution":"def find_duplicate(n, altered_array): Finds the duplicate element in the altered array where the array length is n+1. Parameters: n (int): Length of the original array (before alteration) altered_array (list of int): An array of size n+1 containing one duplicate element Returns: int: The duplicate element in the array element_counts = {} for element in altered_array: if element in element_counts: return element element_counts[element] = 1 return None"},{"question":"The Kingdom of Gridland is famous for its intricate floor patterns. The king of Gridland has recently decided to renovate the royal palace floor, which consists of a grid of size n times m, where each cell in the grid can be either empty or contain a tile. The tiles come in exactly two types: marble and porcelain. Each tile covers exactly one cell of the grid, and the king wants to ensure that no two adjacent cells contain tiles of the same type. Two cells are considered adjacent if they share a common side. Given the dimensions of the floor, determine the number of valid tiling configurations. Since the number of valid configurations may be very large, return the number modulo 10^9 + 7. # Input The input consists of a single line containing two integers, n and m (1 le n, m le 100,000) — the number of rows and columns in the grid, respectively. # Output Print a single integer — the number of valid tiling configurations modulo 10^9 + 7. # Example Input ``` 2 3 ``` Output ``` 54 ``` Explanation There are exactly 54 ways to tile a 2x3 grid such that no two adjacent cells contain tiles of the same type.","solution":"MOD = 10**9 + 7 def tile_configurations(n, m): Returns the count of valid tiling configurations of an n x m grid. return pow(2, n * m, MOD)"},{"question":"You are organizing a robotics competition, where teams are required to build autonomous robots to navigate a grid. Each team is given a grid of size n x m, with some cells containing obstacles. The goal of the competition is to find the shortest path from the top-left corner of the grid (1, 1) to the bottom-right corner of the grid (n, m). The grid consists of cells that are either passable (\'.\') or blocked (\'#\'). A robot can move up, down, left, or right from a cell, but cannot move diagonally. The robot cannot move into cells that contain obstacles. Given the dimensions of the grid and the grid itself, your task is to determine the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, return -1. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns of the grid, respectively. The next n lines contain m characters each (\'.\' for passable cells and \'#\' for blocked cells), representing the grid. Output the length of the shortest path from the top-left corner to the bottom-right corner, or -1 if no such path exists. # Example Input ``` 5 5 ..... .#.#. .#.#. .#.#. ..... ``` Output ``` 8 ``` Input ``` 3 3 .#. # .#. ``` Output ``` -1 ``` In the first example, a shortest path of length 8 exists from (1, 1) to (5, 5). In the second example, no valid path exists from (1, 1) to (3, 3).","solution":"from collections import deque def shortest_path(n, m, grid): Finds the shortest path from top-left corner (1, 1) to the bottom-right corner (n, m) in a grid with obstacles. if not grid or grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == n - 1 and c == m - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == \'.\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"You\'re managing a network of n servers connected by m transmission lines. Each transmission line connects exactly two servers and data can be transmitted in both directions. Additionally, each line has an associated transmission cost. Unfortunately, not all servers are directly connected, and some server pairs may be connected indirectly through other servers. Your task is to determine the minimum transmission cost needed to ensure that every server can communicate with every other server either directly or indirectly. If it\'s not possible to connect all the servers, the output should indicate that as well. The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000) — the number of servers and transmission lines, respectively. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000), where u and v are the servers connected by a transmission line and w is the transmission cost for that line. Print the minimum total transmission cost required to make sure that every server can communicate with every other server. If it\'s not possible to connect all servers, print -1. For instance, consider the following example. With 4 servers and 4 transmission lines, the cost array is represented as follows: 4 4 1 2 3 2 3 4 3 4 2 4 1 1 The output for this would be the minimum transmission cost to connect all servers.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_mst(n, edges): result = [] i = 0 e = 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: if i >= len(edges): return -1 u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append((u, v, w)) union(parent, rank, x, y) minimumCost = 0 for u, v, weight in result: minimumCost += weight return minimumCost def minimum_transmission_cost(n, m, edge_list): if m == 0: if n == 1: return 0 else: return -1 return kruskal_mst(n, edge_list)"},{"question":"# Problem Statement You were given a string `s` of length `n` consisting of uppercase and lowercase Latin letters. Your goal is to determine the length of the longest substring which contains at most `k` distinct characters. Input - The first line contains two integers `n` and `k` (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 26), the length of the string and the maximum number of distinct characters allowed in the substring, respectively. - The second line contains the string `s` of length `n`. Output - Print the length of the longest substring that contains at most `k` distinct characters. Example # Input ``` 10 2 aabbccddeeff ``` # Output ``` 4 ``` # Note In the provided example, the longest substrings which contain at most 2 distinct characters include \\"aabb\\", \\"bbcc\\", \\"ccdd\\", \\"ddee\\", and \\"eeff\\", all of length 4. Thus the output is `4`.","solution":"def longest_substring_with_k_distinct(s, k): Returns the length of the longest substring which contains at most k distinct characters. if k == 0: return 0 n = len(s) left = 0 right = 0 max_length = 0 char_count = {} while right < n: char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Four competitive programming friends, Alice, Bob, Carol, and Dave, decided to participate in a team coding contest with multiple rounds. Each round has a difficulty level represented by an integer. The friends need to distribute the rounds among themselves in such a way that no two consecutive rounds go to the same person. Also, each friend should get a contiguous sequence of rounds. You are given a sequence of n integers where each integer represents the difficulty of a round in the contest. Your task is to determine if it is possible to distribute all rounds among the four friends such that the above conditions are met. Input: - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of rounds. - The second line contains n integers a_i (1 ≤ a_i ≤ 10^9) — the sequence of round difficulties. Output: - Print \\"YES\\" (without quotes) if it is possible to distribute the rounds according to the conditions. Otherwise, print \\"NO\\" (without quotes). Example: Input: 8 3 1 4 1 5 9 2 6 Output: YES Explanation: One possible distribution satisfying all conditions could be: - Alice: 3 1 - Bob: 4 1 - Carol: 5 9 - Dave: 2 6 The sequence of rounds is split as follows, no two consecutive rounds go to the same person, and each person receives a contiguous sequence.","solution":"def can_distribute_rounds(n, difficulties): Determines if it is possible to distribute rounds among four friends such that: 1. No two consecutive rounds go to the same person. 2. Each friend gets a contiguous sequence of rounds. Parameters: n (int): Number of rounds. difficulties (list): List of integers representing the difficulty of each round. Returns: str: \\"YES\\" if it is possible to distribute the rounds, otherwise \\"NO\\". if n < 4: return \\"NO\\" for i in range(1, n-2): for j in range(i+1, n-1): for k in range(j+1, n): # Split the array indices into 4 segments and check feasibility if (0 <= i <= n-3) and (i < j) and (j < k) and (k <= n-1): return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers `nums` and an integer `k`. Your task is to modify the array such that each element in the modified array `result` is the sum of the element at the same index and the elements from the previous `k` indices in the `nums` array. If there are not enough previous indices (i.e., for the initial indices), just use the available ones. You should return the modified array. # Input Format: - The first line of the input contains two integers `n` and `k` (1 leq n leq 100,000, 1 leq k leq n) where `n` is the size of the array `nums` and `k` is the number of previous indices to include in the sum. - The second line contains `n` space-separated integers which represent the elements of array `nums` (1 leq nums[i] leq 10^9 for i = 0, 1, ..., n-1). # Output Format: - Print `n` space-separated integers which represent the modified array `result`. # Example: Input: ``` 5 2 1 2 3 4 5 ``` Output: ``` 1 3 6 9 12 ``` Explanation: - For index `0`, result[0] = nums[0] = 1 - For index `1`, result[1] = nums[1] + nums[0] = 2 + 1 = 3 - For index `2`, result[2] = nums[2] + nums[1] + nums[0] = 3 + 2 + 1 = 6 - For index `3`, result[3] = nums[3] + nums[2] + nums[1] = 4 + 3 + 2 = 9 - For index `4`, result[4] = nums[4] + nums[3] + nums[2] = 5 + 4 + 3 = 12","solution":"def modified_array(nums, k): Modifies the array such that each element is the sum of the element at the same index and the elements from the previous k indices. Args: nums (list): List of integers. k (int): Number of previous indices to include in the sum. Returns: list: Modified list of integers. n = len(nums) result = [] for i in range(n): sum_value = 0 for j in range(max(0, i - k), i + 1): sum_value += nums[j] result.append(sum_value) return result"},{"question":"You are given an array of integers representing heights of buildings in a skyline. We call a building \\"visible\\" from the left if there are no taller buildings to its left. Given an array of building heights, you need to determine the number of visible buildings from the left side. For example, given the array [4, 2, 3, 7, 4], the buildings with heights 4, 7 are visible because every building before 7 is shorter or equal in height to 4. The building with height 7 is visible, but the building with height 3 and 4 at the end are not as they are hidden by the taller buildings before them. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of buildings. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the buildings. Output: - Print a single integer — the number of visible buildings from the left side. Example: Input: 5 4 2 3 7 4 Output: 2 Explanation: In the given example, the buildings with heights 4 and 7 are visible from the left side. Thus, the output is 2.","solution":"def count_visible_buildings(n, heights): Returns the number of buildings visible from the left side. Parameters: n (int): Number of buildings heights (list): List of building heights Returns: int: Number of visible buildings if n == 0: return 0 visible_count = 0 max_height = 0 for height in heights: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"In a futuristic city, self-driving buses are used to transport people between different sectors. Each sector has a specific demand for a number of buses to accommodate its residents. The buses automatically get distributed among the sectors. However, due to restrictions, a bus can only serve one sector at a time. The city authority wants to determine if they have enough buses to meet the demands of all sectors. Given a list representing the demands of buses for each sector and the total number of buses available, write a function that determines if it is possible to satisfy the demand of all sectors. **Function Signature:** ```python def can_meet_demand(sectors: List[int], buses: int) -> bool: pass ``` **Input:** - `sectors`: a list of integers where each integer represents the demand of buses for a sector (0 ≤ len(sectors) ≤ 1000, 1 ≤ sum(sectors) ≤ 10^6). - `buses`: an integer representing the total number of available buses (0 ≤ buses ≤ 10^6). **Output:** - Return `True` if the total number of buses is sufficient to meet the demands of all sectors, otherwise return `False`. **Example:** ```python assert can_meet_demand([3, 4, 2, 1], 10) == True assert can_meet_demand([3, 4, 2, 1], 9) == False assert can_meet_demand([], 0) == True assert can_meet_demand([], 1) == True ```","solution":"from typing import List def can_meet_demand(sectors: List[int], buses: int) -> bool: Determines if the total number of buses is sufficient to meet the demands of all sectors. :param sectors: List[int] where each integer represents the demand of buses for a sector. :param buses: int representing the total number of available buses. :return: bool - True if the total number of buses is sufficient to meet the demands of all sectors, otherwise False. total_demand = sum(sectors) return total_demand <= buses"},{"question":"You are given an integer array `a` of length `n`. You need to form a new array `b` of the same length such that each element `b[i]` is the greatest common divisor (GCD) of the elements in the subarray `a[1]` to `a[i]`. Formally, you need to calculate `b[i]` as: b[i] = text{GCD}(a[1], a[2], ..., a[i]) where `GCD(x, y)` denotes the greatest common divisor of integers `x` and `y`. You are required to write a program that constructs the array `b` from the given array `a` and prints it. # Input - The first line contains an integer `n` (1 leq n leq 10^5), the size of the array. - The second line contains `n` integers `a_1, a_2, ..., a_n` (1 leq a_i leq 10^9). # Output - Print `n` integers corresponding to the array `b`. # Example Input ``` 5 12 15 18 9 24 ``` Output ``` 12 3 3 3 3 ``` # Note In the given example, the subarrays and their GCD values are as follows: - Subarray [12]: GCD = 12 - Subarray [12, 15]: GCD(12, 15) = 3 - Subarray [12, 15, 18]: GCD(12, 15, 18) = 3 - Subarray [12, 15, 18, 9]: GCD(12, 15, 18, 9) = 3 - Subarray [12, 15, 18, 9, 24]: GCD(12, 15, 18, 9, 24) = 3","solution":"from math import gcd from functools import reduce def calculate_gcd_up_to_i(n, a): Given an integer array `a` of length `n`, this function returns a new array `b` such that each element `b[i]` is the greatest common divisor (GCD) of the elements in the subarray `a[1]` to `a[i]`. def calculate_gcd_list(prefix): return reduce(gcd, prefix) b = [] current_gcd = a[0] b.append(current_gcd) for i in range(1, n): current_gcd = gcd(current_gcd, a[i]) b.append(current_gcd) return b"},{"question":"You are given an array representing the heights of n buildings in a row. Each building has a different height. Your task is to calculate the minimum number of operations needed to make all the buildings the same height by only increasing the heights of the buildings. In one operation, you can increase the height of any building by 1 unit. The first line contains a single integer n (1 ≤ n ≤ 10000) representing the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) representing the heights of the buildings. Print the minimum number of operations required to make all heights equal. Example: Input: 4 1 2 3 4 Output: 6 Explanation: We can perform the following operations to make all building heights equal to 4: - Increase the height of the first building by 3 units. - Increase the height of the second building by 2 units. - Increase the height of the third building by 1 unit. Therefore, the total number of operations is 3 + 2 + 1 = 6.","solution":"def min_operations_to_equal_heights(n, heights): Calculates the minimum number of operations required to make all building heights equal by only increasing the heights of the buildings. Parameters: n (int): The number of buildings. heights (list of int): The list of heights of the buildings. Returns: int: The minimum number of operations required. max_height = max(heights) operations = sum(max_height - height for height in heights) return operations"},{"question":"A company is conducting a survey about the usage of their products among their customers. Each customer is asked to rate the products they use on a scale of 1 to 5. The company wants to determine the most frequently given rating for each product in order to better understand customer satisfaction levels. You are given the ratings of each product by different customers. Your task is to find out the most frequently given rating for each product. If there are multiple ratings with the same frequency, return the smallest rating. The first line contains an integer n (1 ≤ n ≤ 10^5), the number of products. The second line contains an integer m (1 ≤ m ≤ 10^5), the number of customers. Each of the next m lines contains two integers p_i and r_i (1 ≤ p_i ≤ n, 1 ≤ r_i ≤ 5) — the product id and the rating given by the i-th customer, respectively. Output n lines, each containing a single integer. The i-th line should contain the most frequently given rating for the i-th product. If there is a tie, output the smallest rating. Example: Input: ``` 3 6 1 5 2 4 2 4 1 1 3 3 3 5 ``` Output: ``` 1 4 3 ``` Explanation: - For product 1, the ratings are `5` and `1`. The frequency of both ratings is `1`, so the smallest rating `1` is chosen. - For product 2, the ratings are `4` and `4`. The frequency of rating `4` is `2`, so `4` is chosen. - For product 3, the ratings are `3` and `5`. The frequency of both ratings is `1`, so the smallest rating `3` is chosen.","solution":"from collections import defaultdict, Counter def most_frequent_ratings(n, ratings): Determines the most frequently given rating for each product. Parameters: n (int): Number of products. ratings (list of tuples): List of (product_id, rating) tuples Returns: list: List of most frequent ratings for each product id from 1 to n. product_ratings = defaultdict(list) for p, r in ratings: product_ratings[p].append(r) most_frequent = [] for i in range(1, n + 1): if product_ratings[i]: count = Counter(product_ratings[i]) most_common = count.most_common() most_common.sort(key=lambda x: (-x[1], x[0])) # Sort by frequency desc, then by rating asc most_frequent.append(most_common[0][0]) else: most_frequent.append(None) # Handle cases where a product might have no ratings return most_frequent # Example usage: n = 3 ratings = [(1, 5), (2, 4), (2, 4), (1, 1), (3, 3), (3, 5)] print(most_frequent_ratings(n, ratings)) # Output: [1, 4, 3]"},{"question":"You are managing a set of boxes in a warehouse. Each box has an initial weight, and over time, additional weights can be added to the boxes. You are tasked with maximizing the total weight of selected boxes on a given day. There are n boxes, each having an initial weight. Additionally, there are m events where a weight is added to a specific box at a specific time. For each box, you are interested in knowing the maximum weight it can achieve at the end of all events. Once you have the maximum possible weight for each box, you will select p boxes with the highest weights to maximize the total weight. Write a program that determines the maximum total weight of the p heaviest boxes. # Input The first line contains three integers n, m, and p (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 10^4, 1 ≤ p ≤ n). The second line contains n integers, where the i-th integer represents the initial weight of the i-th box (1 ≤ initial weight ≤ 10^6). Each of the next m lines contains three integers xi, ti, and wi (1 ≤ xi ≤ n, 1 ≤ ti ≤ 10^6, 1 ≤ wi ≤ 10^4), indicating that `wi` weight is added to box `xi` at time `ti`. # Output Print a single integer representing the maximum total weight of the selected `p` boxes. # Example Input ``` 5 4 2 10 20 30 40 50 1 2 5 2 3 10 3 1 20 5 4 15 ``` Output ``` 115 ``` # Explanation - Initial weights of boxes: [10, 20, 30, 40, 50] - After events: - Box 1: 10 + 5 = 15 - Box 2: 20 + 10 = 30 - Box 3: 30 + 20 = 50 - Box 4: 40 (no events) - Box 5: 50 + 15 = 65 - Maximum weights after events: [15, 30, 50, 40, 65] - Selecting 2 heaviest boxes: Box 3 (50) and Box 5 (65) - Total weight of selected boxes: 50 + 65 = 115","solution":"def max_total_weight(n, m, p, initial_weights, events): # Initialize the boxes with initial weights box_weights = initial_weights[:] # Process each event and add weight to the corresponding box for event in events: xi, ti, wi = event box_weights[xi - 1] += wi # Sort the weights in descending order to select the p heaviest boxes box_weights.sort(reverse=True) # Sum the weights of the p heaviest boxes return sum(box_weights[:p])"},{"question":"You are given a binary tree where each node contains an integer value. The task is to find the maximum sum of node values obtained by starting from the root and traveling down to any leaf node. Each path step can only go to a left or right child node. Implement a function `int maxRootToLeafSum(TreeNode* root)` that takes the root node of the binary tree as an input and returns the maximum sum of values from the root to any leaf node. # Input - A single rooted binary tree # Output - An integer representing the maximum sum from the root to any leaf node. # Constraints - The number of nodes in the tree is in the range [0, 10^4]. - -10^4 <= Node value <= 10^4 # Example Consider the following binary tree: ``` 1 / 2 3 / 4 5 ``` Given this tree, the maximum root-to-leaf path sum is 1 + 2 + 5 = 8. # Note - A leaf node is a node with no children. - If the tree is empty (root is null), return 0. # Function Signature ```cpp int maxRootToLeafSum(TreeNode* root); ``` # Definition for a binary tree node: ```cpp struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode() : val(0), left(nullptr), right(nullptr) {} TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} }; ```","solution":"class TreeNode: def __init__(self, x, left=None, right=None): self.val = x self.left = left self.right = right def max_root_to_leaf_sum(root): Returns the maximum sum of values from root to any leaf node in the binary tree. if not root: return 0 left_sum = max_root_to_leaf_sum(root.left) right_sum = max_root_to_leaf_sum(root.right) return root.val + max(left_sum, right_sum)"},{"question":"Alice is participating in a robotics competition where she needs to program her robot to navigate a grid with obstacles. The grid is represented by an `m x n` matrix, where some cells are marked as obstacles. The robot can move up, down, left, or right, but it cannot move diagonally or through obstacles. Alice\'s goal is to program the shortest path for the robot to travel from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1) of the grid. Write a program that finds the length of the shortest path from the top-left corner to the bottom-right corner. If there is no valid path, the program should return -1. The first input line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns of the grid. Each of the following m lines contains n characters representing the grid, where \'.\' indicates an empty cell, and \'#\' indicates an obstacle. Output the length of the shortest path from the top-left corner to the bottom-right corner. Output -1 if no such path exists. # Example Input ``` 5 5 ..... .#. .#... .#. ..... ``` Output ``` 9 ``` In this example, the shortest path is to move right, right, down, down, left, left, down, down, right, right. The path avoids all obstacles and has a length of 9 cells.","solution":"from collections import deque def shortest_path(m, n, grid): if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * n for _ in range(m)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == m-1 and y == n-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == \'.\' and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given an array of n integers and a sequence consistency rule specified by a given pattern. The goal is to check if the array can be split into k contiguous subarrays such that each subarray matches the pattern exactly. The pattern is a shorter array of integers. Write a function to determine if such a split is possible. If it is, return the starting indices (1-based) of each subarray split point in ascending order. If it is not possible to split the array as specified, return -1. Function Signature: ```python def split_array_by_pattern(n: int, k: int, arr: List[int], pattern: List[int]) -> Union[List[int], int]: pass ``` # Input: - `n` (1 ≤ n ≤ 100,000): the length of the array - `k` (1 ≤ k ≤ 100): the desired number of subarrays - `arr`: a list of n integers (1 ≤ arr[i] ≤ 1,000,000) - `pattern`: a list containing the pattern of integers. The pattern length will be (n // k). # Output: - Return a list of k-1 integers representing the starting indices (1-based) of each subarray split point, or -1 if no valid split is found. # Example: **Example 1:** ```python n = 6 k = 2 arr = [1, 2, 3, 1, 2, 3] pattern = [1, 2, 3] split_array_by_pattern(n, k, arr, pattern) ``` **Output:** ```python [4] ``` **Example 2:** ```python n = 9 k = 3 arr = [1, 2, 3, 1, 2, 3, 1, 2, 3] pattern = [1, 2, 3] split_array_by_pattern(n, k, arr, pattern) ``` **Output:** ```python [4, 7] ``` **Example 3:** ```python n = 6 k = 3 arr = [1, 2, 3, 4, 5, 6] pattern = [1, 2] split_array_by_pattern(n, k, arr, pattern) ``` **Output:** ```python -1 ``` # Notes: - The function should ensure the array can be split into exactly k subarrays each matching the given pattern. - Efficiency is key, especially for large arrays. - Consider edge cases where the array length is not evenly divisible by k or when patterns do not match expected subarray lengths.","solution":"from typing import List, Union def split_array_by_pattern(n: int, k: int, arr: List[int], pattern: List[int]) -> Union[List[int], int]: pattern_length = len(pattern) if n % k != 0 or pattern_length != n // k: return -1 indices = [] for i in range(0, n, pattern_length): if arr[i:i+pattern_length] != pattern: return -1 if i > 0: indices.append(i + 1) # Convert to 1-based indexing return indices if indices else -1"},{"question":"You are organizing a game event, and you want to form the largest number of teams given certain constraints. Each team must consist of exactly k players, and you have n players available with differing skill levels. The challenge is to maximize the number of complete teams that can be formed while ensuring that the difference in skill levels between the highest and lowest skilled players in any team does not exceed d. Given the list of skill levels of the players, your task is to determine the maximum number of complete teams you can form under these constraints. Input: - The first line contains three integers n, k, and d (1 ≤ n ≤ 100,000, 1 ≤ k ≤ n, 0 ≤ d ≤ 1,000,000), where n is the number of players, k is the number of players in each team, and d is the maximum allowed difference in skill levels within a team. - The second line contains n space-separated integers representing the skill levels of the players. Output: - Print a single integer, the maximum number of complete teams you can form. Example: Input: 8 3 10 15 20 25 10 30 35 40 45 Output: 2 Explanation: You can form the following teams: - Team 1: [10, 15, 20] (difference in skill levels: 10) - Team 2: [30, 35, 40] (difference in skill levels: 10) The last player with skill level 45 cannot form a team because the next highest skill level (25) forms a team with lower skill players already. Therefore, the maximum number of complete teams is 2.","solution":"def max_teams(n, k, d, skill_levels): Returns the maximum number of teams that can be formed under the given constraints. skill_levels.sort() count = 0 i = 0 while i <= n - k: if skill_levels[i + k - 1] - skill_levels[i] <= d: count += 1 i += k else: i += 1 return count"},{"question":"Sally is an avid gardener and she wants to build a beautiful flower arrangement. She has a garden with various types of flowers, and each flower species has a specific value of beauty. Sally\'s garden is organized in a single row with **n** positions, each containing exactly one flower of a certain species. The beauty of each species is represented by an integer. She wants to create as many non-overlapping arrangements of consecutive flowers as possible, while ensuring that the cumulative beauty of each arrangement is non-negative. The beauty of an arrangement is the sum of the beauty values of all flowers within that arrangement. Your task is to help Sally determine the maximum number of non-overlapping arrangements she can create where each arrangement has a non-negative cumulative beauty. The first line of the input contains a single integer **n** (1 ≤ n ≤ 2 * 10^5), the number of positions in Sally\'s garden. The second line contains **n** integers separated by spaces, **b_1, b_2, ..., b_n** (-10^4 ≤ b_i ≤ 10^4), where **b_i** is the beauty value of the flower at position **i**. Print one integer, the maximum number of non-overlapping arrangements with non-negative cumulative beauty. # Example Input ``` 5 -1 2 3 -2 1 ``` Output ``` 3 ``` Explanation Sally can make three non-overlapping arrangements: 1. The single flower at position 2 (beauty 2). 2. The single flower at position 3 (beauty 3). 3. The single flower at position 5 (beauty 1). Each of these arrangements has a non-negative cumulative beauty.","solution":"def max_non_negative_arrangements(n, beauties): Returns the maximum number of non-overlapping arrangements with non-negative cumulative beauty. Args: n : int : Number of flower positions. beauties : list of int : List of beauty values for each position. Returns: int : Maximum number of non-overlapping arrangements. count = 0 current_sum = 0 for beauty in beauties: current_sum += beauty if current_sum >= 0: count += 1 current_sum = 0 elif current_sum < 0: current_sum = 0 return count"},{"question":"You are tasked with creating a library system that tracks a set of books and their respective genres. Your system should allow users to query the number of unique genres available after consecutive updates to the book collection. Each update involves adding a new book to the collection or updating the genre of an existing book. Initially, the system starts with an empty collection. For each operation, you will be provided with either a new book with its genre, or an update to the genre of an existing book. The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of operations. The following n lines describe the operations. Each operation is in one of the following two formats: 1) \\"ADD book_id genre\\": Add a new book with id `book_id` and genre `genre` to the collection. It is guaranteed that the `book_id` is unique. 2) \\"UPDATE book_id new_genre\\": Update the genre of the book with id `book_id` to `new_genre`. It is guaranteed that `book_id` exists in the collection. The book_id consists of lowercase English letters and its length doesn\'t exceed 10. The genre consists of lowercase English letters and its length doesn\'t exceed 10. For each operation, print the number of unique genres in the collection. Input: ``` 5 ADD book1 fiction ADD book2 mystery ADD book3 fiction UPDATE book2 fantasy ADD book4 fantasy ``` Output: ``` 1 2 2 2 2 ``` Explanation: 1. After adding \\"book1\\" with genre \\"fiction\\", the collection has 1 unique genre: \\"fiction\\". 2. After adding \\"book2\\" with genre \\"mystery\\", the collection has 2 unique genres: \\"fiction\\", \\"mystery\\". 3. Adding \\"book3\\" with genre \\"fiction\\" does not change the unique genres count (still \\"fiction\\", \\"mystery\\"). 4. Updating \\"book2\\" genre to \\"fantasy\\" changes unique genres to \\"fiction\\", \\"fantasy\\". 5. Adding \\"book4\\" with genre \\"fantasy\\" does not change the unique genres count (still \\"fiction\\", \\"fantasy\\").","solution":"def manage_library(operations): Track book collection and genres. Parameters: operations (list of str): List of operations, each in format \\"ADD book_id genre\\" or \\"UPDATE book_id new_genre\\" Returns: list of int: Number of unique genres available after each operation. book_genres = {} genre_counts = {} unique_genres_after_ops = [] for operation in operations: op_parts = operation.split() if op_parts[0] == \\"ADD\\": book_id, genre = op_parts[1], op_parts[2] book_genres[book_id] = genre if genre not in genre_counts: genre_counts[genre] = 0 genre_counts[genre] += 1 elif op_parts[0] == \\"UPDATE\\": book_id, new_genre = op_parts[1], op_parts[2] old_genre = book_genres[book_id] book_genres[book_id] = new_genre genre_counts[old_genre] -= 1 if genre_counts[old_genre] == 0: del genre_counts[old_genre] if new_genre not in genre_counts: genre_counts[new_genre] = 0 genre_counts[new_genre] += 1 unique_genres_after_ops.append(len(genre_counts)) return unique_genres_after_ops"},{"question":"You are given an array of integers a_1, a_2, ldots, a_n where a_i denotes the height of the i-th building in a city skyline. A building can only be removed if it is the tallest building among its neighboring buildings. Your task is to determine the minimum number of distinct days required to remove all the buildings by adhering to the described removal rules. If two adjacent buildings have the same height, you cannot remove either of them unless one is removed first, making the other taller than any immediate neighbors. You can only remove one building per day. The first line contains an integer n (1 le n le 10^5), the number of buildings. The second line contains a sequence of integers a_1, a_2, ldots, a_n (1 le a_i le 10^9). Print the minimum number of distinct days required to remove all the buildings. Example: ``` Input 5 3 1 4 1 5 Output 3 Input 7 1 2 2 3 4 4 5 Output 5 ``` In the first example, you can remove buildings in the following order: 1. Day 1: Building with height 3 (becoming tallest after removing 5) 2. Day 2: Building with height 5 (becoming tallest after removing 4) 3. Day 3: Building with height 4 (becoming tallest after removing 1) The total number of days needed is 3. In the second example, you can remove buildings in the following order: 1. Day 1: Building with height 1 (becoming tallest after removing 5) 2. Day 2: Building with height 5 (becoming tallest after removing 4) 3. Day 3: Building with height 4 (becoming tallest after removing 3) 4. Day 4: Building with height 3 5. Day 5: Building with height 2 The total number of days needed is 5.","solution":"def min_days_to_remove_buildings(n, heights): This function calculates the minimum number of distinct days required to remove all the buildings following the rule that a building can only be removed if it is the tallest among its neighboring buildings. Parameters: n (int): Number of buildings heights (list): List of integers denoting height of each building Returns: int: Minimum number of days required to remove all buildings # Find out the maximum number of consecutive non-increasing segments in the height list. days = 0 for i in range(n - 1): if heights[i] < heights[i + 1]: days += 1 # Always need at least one day to remove all buildings return days + 1"},{"question":"You are given an array of integers, possibly containing duplicates. Your task is to determine the length of the longest increasing subsequence (LIS) that can be derived from this array. An increasing subsequence is a sequence of elements from the array such that each subsequent element is greater than the preceding one. # Input Format The input consists of: - The first line contains an integer `n` (1 ≤ n ≤ 10^5), which represents the number of elements in the array. - The second line contains `n` space-separated integers representing the elements of the array. Each integer `a_i` (-10^9 ≤ a_i ≤ 10^9) is an element of the array. # Output Format Print a single integer, the length of the longest increasing subsequence in the array. # Examples Example 1 Input: ``` 5 10 9 2 5 3 ``` Output: ``` 2 ``` Explanation: The longest increasing subsequence is [2, 3]. Example 2 Input: ``` 6 10 22 9 33 21 50 ``` Output: ``` 4 ``` Explanation: The longest increasing subsequence is [10, 22, 33, 50]. Example 3 Input: ``` 7 1 3 6 7 9 4 10 ``` Output: ``` 6 ``` Explanation: The longest increasing subsequence is [1, 3, 6, 7, 9, 10]. # Constraints - The length of the array `n` can be up to 10^5. - The values in the array can lie in the range of -10^9 to 10^9.","solution":"import bisect def length_of_lis(nums): Returns the length of the longest increasing subsequence. if not nums: return 0 lis = [] for num in nums: pos = bisect.bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis)"},{"question":"You are given an integer array `nums` and an integer `k`. The task is to find the maximum sum of a subarray of length `k`. A subarray is defined as a contiguous segment of the array. Your function should return the maximum sum of any possible subarray of length `k`. # Input - `nums`: A list of integers where 1 <= len(nums) <= 10^5 and each integer is between -10^4 and 10^4. - `k`: An integer representing the length of the subarray, where 1 <= k <= len(nums). # Output Return an integer which is the maximum sum of a subarray of length `k`. # Example Example 1 ```python Input: nums = [1, 4, 2, 10, 23, 3, 1, 0, 20], k = 4 Output: 39 Explanation: The subarray [4, 2, 10, 23] has the maximum sum 4 + 2 + 10 + 23 = 39 ``` Example 2 ```python Input: nums = [-1, -2, -3, -4], k = 2 Output: -3 Explanation: The subarray [-1, -2] has the maximum sum -1 + (-2) = -3 ``` # Note The function needs to complete within a time complexity of O(n). # Function Signature ```python def max_sum_of_subarray(nums: List[int], k: int) -> int: pass ``` # Constraints - The array length len(nums) is between 1 and 10^5 - Subarray length `k` is between 1 and len(nums) - Each integer in the array is between -10^4 and 10^4","solution":"def max_sum_of_subarray(nums, k): Returns the maximum sum of a subarray of length k. n = len(nums) if n < k: return 0 # Edge case protection, though the constraint k <= len(nums) should avoid this. # Initial window sum max_sum = sum(nums[:k]) current_sum = max_sum # Sliding window for i in range(k, n): current_sum += nums[i] - nums[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an array of positive integers, where each integer represents the amount of water (in liters) trapped in that position during a rainstorm. The height of the integers in the array is proportional to the units of water each position can hold. The direction of the array is left to right, similar to elevations in a terrain where the leftmost position is the starting point. Your task is to calculate the total units of water trapped in all positions after a rainstorm. The total units of water trapped between the elevations are calculated based on the height of the shortest elevation that forms the boundary of the water trap. The first line contains a single integer `n` (1 ≤ n ≤ 10^5), the number of positions in the array. The second line contains `n` positive integers, each representing the amount of water trapped in the corresponding position (0 ≤ water[i] ≤ 10000). You need to write a function `int trapped_water(vector<int>& water)` that takes a vector of integers and returns a single integer, the total units of trapped water. **Example:** Input: ``` 6 0 1 0 2 1 0 ``` Output: ``` 1 ``` Explanation: Units of water are calculated based on the water trapped between elevations: - Between index 1 and 3, a total of 1 unit of water is trapped. - No water is trapped between other positions, so the total trapped water is 1 unit.","solution":"def trapped_water(water): Calculate the total units of water trapped between elevations. Args: water (list): List of integers representing the amount of water trapped at each position. Returns: int: Total units of trapped water. n = len(water) if n == 0: # No positions, no trapped water return 0 left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = water[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], water[i]) # Fill right_max array right_max[n-1] = water[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i + 1], water[i]) # Calculate the total units of trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - water[i] return trapped_water"},{"question":"You are given a sequence of integers and an integer k. Your task is to find a subsequence of the given integer sequence such that the sum of the subsequence is equal to k. If there is more than one such subsequence, you should choose the shortest one. If there are still multiple subsequences of the same length, choose the lexicographically smallest one. The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 10^9) — the length of the sequence and the desired sum. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. If such a subsequence does not exist, print \\"NO\\" (without quotes). Otherwise, print \\"YES\\" (without quotes) followed by the subsequence. In the first example, the shortest subsequence that sums to the desired value is taken into consideration first. If there are multiple such subsequences, it selects the smallest in lexicographical order. **Example:** Input: ``` 5 9 1 2 3 4 5 ``` Output: ``` YES 4 5 ``` Input: ``` 6 10 1 2 3 4 2 8 ``` Output: ``` YES 2 8 ``` Input: ``` 4 15 10 2 1 6 ``` Output: ``` NO ```","solution":"def find_subsequence(n, k, a): from itertools import combinations for length in range(1, n+1): subsequences = [] for comb in combinations(a, length): if sum(comb) == k: subsequences.append(comb) if subsequences: # Find lexicographically smallest subsequence with the required sum smallest_subsequence = min(subsequences) return \\"YES\\", list(smallest_subsequence) return \\"NO\\" # Example Usage: n = 5 k = 9 a = [1, 2, 3, 4, 5] print(find_subsequence(n, k, a)) n = 6 k = 10 a = [1, 2, 3, 4, 2, 8] print(find_subsequence(n, k, a)) n = 4 k = 15 a = [10, 2, 1, 6] print(find_subsequence(n, k, a))"},{"question":"You are given an n x n grid filled with some integers. You need to find the number of unique rows in the grid. Two rows are considered unique if they have different sequences of integers, otherwise they are the same. The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the size of the grid. Each of the next n lines contains n space-separated integers representing the elements of the grid. Print a single integer — the number of unique rows in the grid. # Example **Input:** ``` 4 1 2 3 4 4 5 6 7 1 2 3 4 7 8 9 10 ``` **Output:** ``` 3 ``` **Explanation:** There are 3 unique rows in the given grid: - [1, 2, 3, 4] appears twice but counted once. - [4, 5, 6, 7] - [7, 8, 9, 10]","solution":"def count_unique_rows(n, grid): Given an n x n grid, returns the number of unique rows in the grid. unique_rows = set(tuple(row) for row in grid) return len(unique_rows)"},{"question":"Peter is a software engineer working on a project that involves managing tasks with dependencies. Each task has to be completed before certain other tasks can begin. He needs to determine the order in which to schedule these tasks so that all tasks can be completed in a valid sequence given their dependencies. You are given a list of tasks numbered from 1 to n and a list of prerequisites. Each prerequisite is a pair of tasks [a, b] which signifies that task a must be completed before task b can start. Your task is to find a valid order in which to complete all tasks. If it is not possible to complete all tasks due to a cyclic dependency, return an empty list. The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of tasks and the number of prerequisites. Each of the next m lines contains two integers a and b (1 ≤ a, b ≤ n) — indicating that task a must be completed before task b. Output the valid order of tasks as a single line of space-separated integers. If there are multiple valid orders, any will be accepted. If no valid order exists, output an empty list. Example Input: ``` 4 4 1 2 1 3 3 4 2 4 ``` Example Output: ``` 1 2 3 4 ``` Explanation: Task 1 must be done before tasks 2 and 3. Task 3 must be completed before task 4, and task 2 must be completed before task 4. One possible valid order is 1, 2, 3, 4.","solution":"from collections import deque, defaultdict def find_task_order(n, prerequisites): # Create an adjacency list and in-degree list graph = defaultdict(list) in_degree = [0] * (n + 1) # Build the graph for a, b in prerequisites: graph[a].append(b) in_degree[b] += 1 # Initialize queue with tasks that have no prerequisites queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) order = [] while queue: current_task = queue.popleft() order.append(current_task) # Reduce in-degree for all the neighbors for neighbor in graph[current_task]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Check if we have been able to schedule all tasks if len(order) == n: return order else: return []"},{"question":"Given a list of integers, you need to perform a series of operations and finally output the list in the correct sequence. You are given an array of n integers. You need to perform q queries on this array: - Add an integer y to all elements starting from index i to index j. - Replace each element of the subarray from index i to index j with the maximum element in that subarray. You should process the queries in order and output the array after all queries. The first line of input contains an integer n (1 leq n leq 10^{5}), the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^{9}), the initial elements of the array. The third line contains an integer q (1 leq q leq 10^{4}), the number of queries. Each of the next q lines contains a query. The queries can be of two types: 1. \\"1 i j y\\" - add y (1 leq y leq 10^9) to all elements from index i to j (1-based index). 2. \\"2 i j\\" - replace each element of the subarray from index i to j (1-based index) with the maximum element in that subarray. Output the final array after all queries. Example: Input: ``` 5 1 2 3 4 5 3 1 1 3 10 2 2 5 1 3 5 5 ``` Output: ``` 11 15 20 20 20 ``` Explanation: 1. For the first query, add 10 to elements from index 1 to 3: [11, 12, 13, 4, 5] 2. For the second query, replace elements from index 2 to 5 with the maximum element in that subarray: [11, 13, 13, 13, 13] 3. For the third query, add 5 to elements from index 3 to 5: [11, 13, 18, 18, 18] The final array is: [11, 13, 18, 18, 18]","solution":"def process_queries(n, array, q, queries): for query in queries: if query[0] == 1: _, i, j, y = query for x in range(i-1, j): array[x] += y elif query[0] == 2: _, i, j = query max_val = max(array[i-1:j]) for x in range(i-1, j): array[x] = max_val return array"},{"question":"Petya is playing a game with a 2D wooden grid of size n x m, where each cell initially contains a number. Petya can perform two types of operations on the grid: 1. \\"Add x to row i\\" – This operation adds the integer x to every element of row i. 2. \\"Multiply by y column j\\" – This operation multiplies every element of column j by the integer y. Petya wants to make sure that after some operations, all elements in the grid are the same. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 20) – the dimensions of the grid. The next n lines contain m integers each, representing the initial state of the grid. Determine if it\'s possible to make all numbers in the grid the same using the described operations. If it is possible, output \\"Yes\\" and the sequence of operations that should be applied. If it is not possible, output \\"No\\". For instance, if the given grid is: ``` 3 3 1 2 3 1 2 3 1 2 3 ``` One possible solution is: ``` Yes Add 0 to row 1 Add 1 to row 2 Add 2 to row 3 Multiply by 1 column 1 Multiply by 1 column 2 Multiply by 1 column 3 ``` Alternatively, you could consider another sequence of operations to achieve the result. There may be multiple correct outputs or none.","solution":"def make_grid_same(n, m, grid): operations = [] # Check if all rows are already the same first_row = grid[0] for i in range(1, n): if grid[i] != first_row: return \\"No\\" target_row = first_row # Check if we can make the elements in any column the same by just adding or multiplying for j in range(m): base = grid[0][j] for i in range(1, n): base = base if base == grid[i][j] else None if base is None: return \\"No\\" # Example solution with no actual operations as all numbers are the same already in target return \\"Yesn\\" + \\"n\\".join(f\\"Add 0 to row {i+1}\\" for i in range(n))"},{"question":"In a town named \\"Gridville,\\" Mayor John has planned to construct a new street system using a grid-based layout. The grid is an n x m grid, and in each cell, there can be a building or an empty lot. John\'s goal is to ensure that every building has access to a water pipe which can run horizontally or vertically connecting neighboring cells. Each building should be reachable from a pipe connected from the edge of the grid. You need to determine the minimum number of water pipes that need to be installed along the grid boundary to ensure all buildings have access to water. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 50), representing the number of rows and columns in the grid, respectively. The next n lines contain m characters each, where \'B\' represents a building and \'.\' represents an empty lot. The output should be a single integer, the minimum number of water pipes required along the grid boundary. # Sample Input 1 ``` 5 5 ..... .B... ..... BBB.. ..... ``` # Sample Output 1 ``` 3 ``` # Sample Input 2 ``` 3 4 B.B. .B.. ..BB ``` # Sample Output 2 ``` 4 ``` # Explanation In the first sample, the three buildings can be connected to the water pipe placed either on the north or south side of the grid. Therefore, a minimum of 3 water pipes placed on the boundary can ensure every building has access. In the second sample, each building in the grid either requires a separate water pipe or can share it with the adjacent one, resulting in a total of 4 water pipes placed along the boundary ensuring all buildings have access.","solution":"def min_water_pipes(n, m, grid): Returns the minimum number of water pipes required along the grid boundary to ensure all buildings have access to water. rows_with_buildings = set() cols_with_buildings = set() # Iterate through the grid to find rows and columns that contain buildings for i in range(n): for j in range(m): if grid[i][j] == \'B\': rows_with_buildings.add(i) cols_with_buildings.add(j) # The minimum number of water pipes needed will be the maximum of the count # of unique rows and columns with buildings return max(len(rows_with_buildings), len(cols_with_buildings))"},{"question":"You are given a list of n integers representing the weights of objects. You need to pack these objects into boxes such that the sum of the weights in each box does not exceed a given limit k. Write a program to determine the minimum number of boxes required to pack all the objects. The objects must be packed in such a way that each box holds as many objects as possible without exceeding the weight limit. The first line of input contains two integers n and k (1 ≤ n ≤ 100,000, 1 ≤ k ≤ 1,000,000) — the number of objects and the weight limit of each box, respectively. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1,000,000) — the weights of the objects. Output a single integer — the minimum number of boxes required to pack all the objects. For example, consider the following case: **Input:** ``` 5 10 2 3 5 7 1 ``` **Output:** ``` 2 ``` In this example, we can pack the objects into two boxes as follows: one box can contain the weights [2, 3, 5] and the other box can contain the weights [7, 1].","solution":"def min_boxes(n, k, weights): weights.sort(reverse=True) boxes = 0 while weights: current_box_weight = 0 i = 0 while i < len(weights): if current_box_weight + weights[i] <= k: current_box_weight += weights[i] weights.pop(i) else: i += 1 boxes += 1 return boxes if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n, k = int(data[0]), int(data[1]) weights = list(map(int, data[2:])) print(min_boxes(n, k, weights))"},{"question":"You are a mechanic and you need to paint some wooden boards kept in a line. The boards are represented by an array of length n where the value at each position represents the initial color index of the board. You have several buckets of paint, each having a different color, and you want to repaint the boards so that no two adjacent boards have the same color. The painting process follows this rule: in one operation, you are allowed to paint one board with a color from any bucket. Your task is to find the minimum number of operations required to repaint the boards such that no two adjacent boards have the same color. Each test case contains: 1. An integer n (1 le n le 10^5) - the number of boards. 2. An array a of length n (1 le a[i] le 10^9), where each element represents the initial color of the corresponding board. You need to print the minimum number of painting operations required for each test case. The first line contains a single integer t (1 le t le 10^4) - the number of test cases. For each test case: 1. Print a single integer - the minimum number of painting operations required so that no two adjacent boards have the same color. In the first sample, you can repaint the second board to have the color 2, achieving an array [1, 2, 1, 2]. In the second sample, you can change the second and third boards to have the same color as the respective first and fourth boards, resulting in the array [3, 4, 3, 4, 5]. In the third sample, the array is already in the required format, so no operations are needed. Test cases: Input: 3 4 1 1 1 1 5 3 3 3 3 5 3 2 3 2 Output: 2 2 0","solution":"def min_operations_to_repaint_boards(t, test_cases): results = [] for case in test_cases: n = case[0] a = case[1] operations = 0 # Iterate through the list and check adjacent elements for i in range(1, n): if a[i] == a[i - 1]: # Increment operation count and change the color of the current board operations += 1 # To ensure no adjacent elements are the same in current and next comparison, # pick a color that is different from both current and the future element (if within bounds) if i + 1 < n: a[i] = -1 if a[i + 1] != -1 else -2 else: a[i] = -1 results.append(operations) return results # Example usage: t = 3 test_cases = [ (4, [1, 1, 1, 1]), (5, [3, 3, 3, 3, 5]), (3, [2, 3, 2]) ] print(min_operations_to_repaint_boards(t, test_cases)) # Output: [2, 2, 0]"},{"question":"You are given a sequence of integers, and a list of ranges. For each range, you need to determine the number of distinct integers within that range. Write a function to process the given sequence and then answer the queries efficiently. The first line of the input contains two integers, n and q (1 ≤ n, q ≤ 100,000) — the length of the sequence and the number of queries respectively. The next line contains n integers, a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100,000) – the elements of the sequence. The next q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) — the bounds of the range for each query. Your function should output q lines. Each line should contain a single integer — the number of distinct numbers in the range [l, r]. For example: Input: ``` 5 3 1 1 2 2 3 1 3 2 4 1 5 ``` Output: ``` 2 2 3 ``` Explanation: - For the first query, the range [1, 3] contains the numbers [1, 1, 2]. There are 2 distinct numbers: 1 and 2. - For the second query, the range [2, 4] contains the numbers [1, 2, 2]. There are 2 distinct numbers: 1 and 2. - For the third query, the range [1, 5] contains the numbers [1, 1, 2, 2, 3]. There are 3 distinct numbers: 1, 2, and 3.","solution":"def distinct_integers_in_ranges(n, q, sequence, queries): Function to find the number of distinct integers in given ranges. :param n: int, length of the sequence :param q: int, number of queries :param sequence: list of int, sequence of integers :param queries: list of tuples, each containing two integers representing the range [l, r] :return: list of int, number of distinct integers for each query results = [] for l, r in queries: distinct_count = len(set(sequence[l-1:r])) results.append(distinct_count) return results"},{"question":"Bob\'s friend Alice has a peculiar interest in words and numbers. She recently encountered a challenge involving words composed of certain sets of letters. Alice describes a word as \\"perfect\\" if it solely consists of alternating vowels and consonants and starts with a vowel. For example, the word \\"abecid\\" is perfect, whereas \\"bacde\\" and \\"aioue\\" are not. Alice is now curious to check if given words are perfect according to her definition. She has a list of words and wants a quick way to determine which ones meet the criteria. Help Alice by writing a program that takes a list of words and outputs \\"PERFECT\\" for each word that is perfect according to her rules and \\"IMPERFECT\\" otherwise. The first input line contains one integer n (1 ≤ n ≤ 100) — the number of words. The next n lines each contain one word, consisting of only lowercase English letters (1 ≤ |word| ≤ 100). Output \\"PERFECT\\" for each word that meets Alice\'s criteria and \\"IMPERFECT\\" for those that don\'t. Example: Input: 3 abecid bacde aioue Output: PERFECT IMPERFECT IMPERFECT","solution":"def is_perfect_word(word): vowels = \\"aeiou\\" consonants = \\"bcdfghjklmnpqrstvwxyz\\" if word[0] not in vowels: return \\"IMPERFECT\\" for i in range(1, len(word)): if (word[i-1] in vowels and word[i] not in consonants) or (word[i-1] in consonants and word[i] not in vowels): return \\"IMPERFECT\\" return \\"PERFECT\\" def check_words(words): return [is_perfect_word(word) for word in words]"},{"question":"Given a string s consisting of lowercase English letters, find the length of the shortest substring of s that contains all distinct characters of s at least once. The first line contains a single integer t (1 le t le 10^3) — the number of test cases. Each of the next t lines contains a string s (1 le |s| le 10^5) — the string for which you need to find the length of the shortest substring containing all distinct characters of s. It is guaranteed that the sum of the lengths of all strings over all test cases does not exceed 10^6. For each test case, output a single integer — the length of the shortest substring of s that contains all distinct characters of s at least once. **Example:** Input: ``` 3 abac aabb abcabc ``` Output: ``` 3 2 3 ``` **Explanation:** 1. For the first test case, the shortest substring containing all distinct characters (\'a\', \'b\', \'c\') is \\"bac\\" which has length 3. 2. For the second test case, the shortest substring containing all distinct characters (\'a\', \'b\') is \\"ab\\" which has length 2. 3. For the third test case, the shortest substring containing all distinct characters (\'a\', \'b\', \'c\') is \\"abc\\" which has length 3.","solution":"def shortest_distinct_char_substring_length(s): Returns the length of the shortest substring of s that contains all distinct characters of s at least once. n = len(s) if n <= 1: return n # Find all distinct characters in s distinct_chars = set(s) distinct_count = len(distinct_chars) # Use sliding window approach to find the shortest substring containing all distinct characters from collections import defaultdict count_map = defaultdict(int) start = 0 min_length = float(\'inf\') distinct_seen = 0 for end in range(n): # Expand the window by including s[end] if count_map[s[end]] == 0: distinct_seen += 1 count_map[s[end]] += 1 # When we have all distinct characters in the current window while distinct_seen == distinct_count: # Update the minimum length min_length = min(min_length, end - start + 1) # Move the start to see if we can have a smaller window count_map[s[start]] -= 1 if count_map[s[start]] == 0: distinct_seen -= 1 start += 1 return min_length def process_tests(test_cases): results = [] for s in test_cases: results.append(shortest_distinct_char_substring_length(s)) return results"},{"question":"In a distant kingdom, there is a tradition of playing a game between two players using a special type of grid called a \\"magic rectangle.\\" The magic rectangle is an n x m grid filled with integers. The game is played in turns, and each player, on their turn, must select and remove a complete row or column from the rectangle. The objective of the game is to be the player who removes the last row or column. The player who cannot make a move (i.e., there are no more rows or columns left to remove on their turn) loses the game. You are given an n x m grid of integers and must determine the winner of the game if both players play optimally. The first player always goes first. Your task is to write a program to determine the winner of the game. # Input The input consists of several lines: - The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. - The next n lines each contain m integers, representing the grid. # Output Output \\"First\\" if the first player is guaranteed to win with optimal play, otherwise output \\"Second\\". # Examples Example 1 Input: ``` 2 2 1 2 3 4 ``` Output: ``` Second ``` Example 2 Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` First ``` # Note - In the first example, the grid is 2x2. Regardless of whether the first player removes a row or a column, the second player will always win by removing the last row or column. - In the second example, the grid is 3x3. The first player can always mirror the second player\'s moves to eventually force the second player into the losing position.","solution":"def find_winner(n, m): Determines the winner of the game on an n x m grid with optimal play. Parameters: n (int): number of rows in the grid. m (int): number of columns in the grid. Returns: str: \\"First\\" if the first player is guaranteed to win, \\"Second\\" otherwise. # If either n or m is even, the second player always wins with optimal play, # because the first player makes the count of rows or columns odd, and the # second player keeps it even, eventually leading to a win for the second player. # If both n and m are odd, the first player always wins with optimal play. if n % 2 == 1 and m % 2 == 1: return \\"First\\" else: return \\"Second\\" # Sample input handling if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) print(find_winner(n, m))"},{"question":"You are given an array of integers and a series of queries. For each query, you have to find the minimum and maximum values within a specified range of the array. The first line contains two integers, n and q (1 ≤ n, q ≤ 100,000) — the size of the array and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. The next q lines each contain two integers li and ri (1 ≤ li ≤ ri ≤ n) — the indices specifying the range for that query. For each query, print two integers: the minimum and the maximum values within the range specified by li and ri inclusive. # Input ``` 5 3 4 2 1 5 3 1 3 2 5 1 5 ``` # Output ``` 1 4 1 5 1 5 ``` # Explanation In the first query, the range is from 1 to 3. The elements within this range are [4, 2, 1]. The minimum value is 1, and the maximum value is 4. In the second query, the range is from 2 to 5. The elements within this range are [2, 1, 5, 3]. The minimum value is 1, and the maximum value is 5. In the third query, the range is from 1 to 5. The elements within this range are [4, 2, 1, 5, 3]. The minimum value is 1, and the maximum value is 5.","solution":"def find_min_max_in_ranges(n, arr, queries): result = [] for l, r in queries: min_val = min(arr[l-1:r]) max_val = max(arr[l-1:r]) result.append((min_val, max_val)) return result"},{"question":"There is a kingdom with n cities and n-1 roads, making it a tree. Each road directly connects two cities, and it\'s possible to travel between any two cities using these roads. The kingdom\'s ruler has decided to appoint some of the cities as administrative centers. Each city in the tree can be assigned a value, either 0 or 1. A path in the tree is called \\"balanced\\" if the number of cities with a value of 0 is equal to the number of cities with a value of 1 in that path. Your task is to determine whether it\'s possible to assign values to all cities so that there exists at least one balanced path in the tree. If it\'s possible, you need to print \\"YES\\" and the assignments of values to the cities. If it\'s not possible, you should print \\"NO\\". The first line contains an integer n (2 leq n leq 1000) — the number of cities in the kingdom. Each of the next n-1 lines contains two integers u and v (1 leq u, v leq n) which mean that there is a road connecting city u and city v. It\'s guaranteed that the given roads form a tree. If it\'s possible to assign the values such that there is at least one balanced path, print \\"YES\\" and a line with n integers, the assignments of the values to the cities in the order from city 1 to city n (each value should be either 0 or 1). If there are multiple valid answers, you can print any of them. If it\'s not possible to assign the values according to the requirements, print \\"NO\\". # Example Input: ``` 5 1 2 1 3 3 4 3 5 ``` Output: ``` YES 0 1 0 1 1 ``` In this example, the path from city 1 to city 3 passing through cities 1 rightarrow 3 is balanced.","solution":"def is_possible_to_assign_values(n, roads): from collections import defaultdict, deque # To store the tree/graph tree = defaultdict(list) # Build the tree for u, v in roads: tree[u].append(v) tree[v].append(u) # A flag to alternate the city values value = 1 # Store the values of cities values = [-1] * (n + 1) # 1-indexed # Queue for BFS queue = deque([1]) values[1] = value value ^= 1 # We use BFS to alternate the values (0 or 1) for adjacent nodes while queue: node = queue.popleft() for neighbor in tree[node]: if values[neighbor] == -1: values[neighbor] = value queue.append(neighbor) value ^= 1 return \\"YES\\", values[1:] # Example usage: n = 5 roads = [(1, 2), (1, 3), (3, 4), (3, 5)] result, values = is_possible_to_assign_values(n, roads) if result == \\"YES\\": print(f\\"{result}n{\' \'.join(map(str, values))}\\") else: print(result)"},{"question":"Ruth is a software engineer who recently purchased a set of smart light bulbs for her home. Each smart light bulb is connected in a network and can be controlled through a central control system. Ruth wants to ensure that all the bulbs turn on at the same time when she gives the command. The smart light bulbs are modeled as nodes in a graph, and each direct wireless connection between two bulbs is modeled as an edge. She wants to know if it\'s possible to turn on all the smart light bulbs simultaneously by sending the signal through these connections. Given the number of bulbs n and the list of connections between them, help Ruth determine if all the bulbs can be turned on at the same time. The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of bulbs. Next n-1 lines contain pairs of integers u and v (1 ≤ u, v ≤ n, u ≠ v), each denoting a direct connection between bulbs u and v. It\'s guaranteed that the given description forms a connected graph. Print \\"YES\\" (without quotes) if it\'s possible to turn on all bulbs simultaneously, otherwise print \\"NO\\" (without quotes).","solution":"def can_turn_on_bulbs(n, connections): Determines if all smart bulbs can be turned on simultaneously. :param n: int - Number of bulbs :param connections: list of tuples - Direct connections between bulbs :return: str - \\"YES\\" if all bulbs can be turned on simultaneously, otherwise \\"NO\\" if n == 1 or len(connections) == n - 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array of integers, we want to rearrange them to represent a sequence of peaks and valleys. A sequence of peaks and valleys is defined as an array where every odd-indexed element is greater than its adjacent even-indexed elements, and every even-indexed element is smaller than its adjacent odd-indexed elements. If there are multiple valid arrangements, return any one of them. Input: The first line contains an integer N (1 le N le 100,000), the number of elements in the array. The second line contains N integers arr_1, arr_2, dots, arr_N (1 le arr_i le 10^9), the elements of the array. Output: Output a single line containing N integers representing one possible sequence of peaks and valleys. Example: Input: 7 5 3 1 2 3 4 6 Output: 3 5 1 4 2 6 3 Explanation for the sample input/output #1: One possible sequence of peaks and valleys is [3, 5, 1, 4, 2, 6, 3]. The element at index 1 (5) is greater than the elements at indices 0 (3) and 2 (1). The element at index 3 (4) is greater than the elements at indices 2 (1) and 4 (2). The element at index 5 (6) is greater than the elements at indices 4 (2) and 6 (3). Similarly, elements at even indices (0, 2, 4, 6) are smaller than their adjacent odd-indexed elements. Note that other valid sequences may also exist.","solution":"def rearrange_to_peaks_and_valleys(arr): Rearrange the array to represent a sequence of peaks and valleys. A sequence of peaks and valleys is defined as: - Every odd-indexed element is greater than its adjacent even-indexed elements. - Every even-indexed element is smaller than its adjacent odd-indexed elements. Args: arr: List[int] - list of integers to be rearranged Returns: List[int] - rearranged list of integers arr.sort() for i in range(1, len(arr), 2): if i + 1 < len(arr): arr[i], arr[i+1] = arr[i+1], arr[i] return arr"},{"question":"Given a list of n tasks, each task requires certain resources, and each resource has a limit to how many tasks it can support. Your goal is to assign tasks to resources such that no resource exceeds its limit. You need to determine whether a valid assignment exists, and if so, output one possible assignment. Each task requires exactly one resource. You are given a list of n integers, where the i-th integer represents the index of the resource that the i-th task requires. You are also given a list of m integers, where the j-th integer represents the limit of the j-th resource. Write a program that checks if a valid assignment exists. If a valid assignment exists, print the indices of the resources assigned to each task. If there are multiple valid assignments, output any one of them. If no valid assignment exists, print \\"No valid assignment\\". Input: - The first line contains two integers n and m (1 le n, m le 1000), the number of tasks and resources respectively. - The second line contains n integers t_1, t_2, ..., t_n (1 le t_i le m), where t_i is the index of the resource required by the i-th task. - The third line contains m integers r_1, r_2, ..., r_m (1 le r_i le 100), where r_i is the limit of the i-th resource. Output: - If a valid assignment exists, print one line with n integers representing the indices of the resources assigned to each task. - If no valid assignment exists, print \\"No valid assignment\\". Example: Input: 4 3 1 2 2 3 2 1 1 Output: 1 2 2 3 Explanation: - The first task requires resource 1, which has a limit of 2 tasks. - The second and third tasks require resource 2, which has a limit of 1 task (so this assignment is not valid). - The fourth task requires resource 3, which has a limit of 1 task. In this case, there is no valid assignment as resource 2\'s limit is exceeded by the second and third tasks. So the output should be \\"No valid assignment\\".","solution":"def valid_assignment(n, m, task_requirements, resource_limits): Given the number of tasks and resources, and their respective requirements and limits, determine if a valid assignment exists. :param n: int - number of tasks :param m: int - number of resources :param task_requirements: List[int] - list of required resource index for each task :param resource_limits: List[int] - list of limits for each resource :return: List[int] - if valid, a list of resources assigned to each task, otherwise \\"No valid assignment\\" resource_usage = [0] * m for task in task_requirements: if resource_usage[task - 1] < resource_limits[task - 1]: resource_usage[task - 1] += 1 else: return \\"No valid assignment\\" return task_requirements"},{"question":"You are given a grid of size `n x m` consisting only of zeroes and ones. Your task is to determine the largest square sub-grid that contains only 1s. The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next `n` lines contains exactly `m` characters, each of which is either \\"0\\" or \\"1\\". This represents a row in the grid. You need to find the side length of the largest square consisting entirely of `1`s. Output one integer — the side length of the largest square sub-grid that contains only 1s. # Example **Input:** ``` 5 6 101010 111111 111011 111011 011011 ``` **Output:** ``` 3 ``` In the given example, the largest square containing only `1`s has a side length of 3.","solution":"def largest_square_subgrid(n, m, grid): Determines the side length of the largest square sub-grid consisting of only 1s. Parameters: n (int): The number of rows in the grid. m (int): The number of columns in the grid. grid (list of str): The grid represented as a list of strings where each string is a row. Returns: int: The side length of the largest square consisting entirely of 1s. if not grid: return 0 # Create a dp table to store the largest square side ending at (i, j) dp = [[0] * m for _ in range(n)] max_side = 0 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"You are given a matrix of size (n times m) filled with non-negative integers. Your task is to construct a new matrix of the same size where each element of the new matrix is defined as follows: For each element (a_{i,j}) (1-based index) in the original matrix, the corresponding element (b_{i,j}) in the new matrix is the sum of all elements in the submatrix from the top-left corner ((1, 1)) to the element (a_{i,j}). The first line contains two integers (n) and (m) (1 (leq) (n, m) (leq 1000)) — the dimensions of the matrix. Next (n) lines follow, each containing (m) integers — the elements of the matrix (a) (0 (leq) (a_{i,j}) (leq 1000)). Print the new matrix of size (n times m). For example, consider the following input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` The output should be: ``` 1 3 6 5 12 21 12 27 45 ``` Explanation: For the given example, the element (b_{i,j}) is computed as follows: - (b_{1,1} = a_{1,1} = 1) - (b_{1,2} = a_{1,1} + a_{1,2} = 1 + 2 = 3) - (b_{1,3} = a_{1,1} + a_{1,2} + a_{1,3} = 1 + 2 + 3 = 6) - (b_{2,1} = a_{1,1} + a_{2,1} = 1 + 4 = 5) - (b_{2,2} = a_{1,1} + a_{1,2} + a_{2,1} + a_{2,2} = 1 + 2 + 4 + 5 = 12) - (b_{2,3} = a_{1,1} + a_{1,2} + a_{1,3} + a_{2,1} + a_{2,2} + a_{2,3} = 1 + 2 + 3 + 4 + 5 + 6 = 21) - (b_{3,1} = a_{1,1} + a_{2,1} + a_{3,1} = 1 + 4 + 7 = 12) - (b_{3,2} = a_{1,1} + a_{1,2} + a_{2,1} + a_{2,2} + a_{3,1} + a_{3,2} = 1 + 2 + 4 + 5 + 7 + 8 = 27) - (b_{3,3} = a_{1,1} + a_{1,2} + a_{1,3} + a_{2,1} + a_{2,2} + a_{2,3} + a_{3,1} + a_{3,2} + a_{3,3} = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45) Print the resulting matrix (b).","solution":"def cumulative_sum_matrix(matrix, n, m): Returns a new matrix where each element is the cumulative sum from the top-left corner to the element at that position. # Initialize the new matrix with zeros result = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): # Sum of the current element result[i][j] = matrix[i][j] # Add the cumulative sum from the left side if j > 0: result[i][j] += result[i][j-1] # Add the cumulative sum from the top side if i > 0: result[i][j] += result[i-1][j] # Subtract the overlapping part if i > 0 and j > 0: result[i][j] -= result[i-1][j-1] return result"},{"question":"A farmer has a rectangular plot of land containing m x n cells. Each cell can either contain a crop (represented by a 1) or be empty (represented by a 0). The farmer wants to know the largest rectangular section of the plot that contains only crops. Write a program to determine the area of the largest rectangle that only contains crops. The first line of the input contains two integers m and n (1 ≤ m, n ≤ 200) representing the number of rows and columns in the plot of land. The next m lines contain n integers each (either 0 or 1), representing the state of each cell in the plot. Print a single integer representing the area of the largest rectangle comprised only of crops. Example: Input: 4 5 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output: 6 Explanation: The largest rectangle filled with crops has an area of 6, it spans from (1,3) to (3,4) in the plot.","solution":"def maximal_rectangle(matrix): if not matrix: return 0 max_area = 0 dp = [[0] * len(matrix[0]) for _ in range(len(matrix))] for i in range(len(matrix)): for j in range(len(matrix[0])): if matrix[i][j] == 1: dp[i][j] = dp[i][j-1] + 1 if j > 0 else 1 width = dp[i][j] for k in range(i, -1, -1): width = min(width, dp[k][j]) if width == 0: break max_area = max(max_area, width * (i - k + 1)) return max_area"},{"question":"The Bakers\' Guild is planning a series of baking contests across different cities. Each city operates independently and has its own unique set of rules. Every city has a certain number of bakers participating in the contest, and each baker has a unique skill level associated with them. The contest in each city is conducted over multiple rounds, and after each round, the baker with the lowest skill level is eliminated. This repetition continues until only one baker remains. You need to determine the skill level of the last remaining baker in each city after all rounds of eliminations. The input format is as follows: - The first line contains an integer t (1 ≤ t ≤ 100), the number of cities. - For each city, the first line contains an integer n (1 ≤ n ≤ 100,000), the number of bakers in that city. - The second line contains n space-separated integers representing the skill levels of the bakers in that city. Output: For each city, output a single integer representing the skill level of the last remaining baker. Example: Input: 2 3 3 1 4 5 7 2 5 8 1 Output: 4 8","solution":"def find_last_baker_skill(t, data): Determines the skill level of the last remaining baker for each city. Parameters: t (int): The number of cities. data (list of tuples): Each tuple contains (n, skill_levels) representing the number of bakers and their respective skill levels in a city. Returns: List[int]: A list containing the skill levels of the last remaining baker for each city. results = [] for city in data: n, skill_levels = city skill_levels.sort() results.append(skill_levels[-1]) return results"},{"question":"Tom is organizing a family party and has come up with an interesting game. He has a collection of n different types of candies, and he wants to distribute them to the kids in such a way that each kid gets exactly one type of candy, and no two kids get the same type of candy. Tom has m kids, and each kid has a preference list, which is an ordered list of candy types they like. To maximize the kids\' happiness, Tom wants to make sure that each child gets their most preferred available candy type from the ones that have not been given out yet. If it\'s not possible to satisfy all kids, Tom wants to maximize the number of kids who get their most preferred available candy. Write a program to help Tom determine the maximum number of kids who receive their most preferred available candy type. The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000) — the number of candy types and the number of kids, respectively. Next m lines describe the preference list of each kid. Each line starts with an integer k (1 ≤ k ≤ n) — the number of candy types in the preference list of the kid, followed by k space-separated integers that represent the preference list (each integer is between 1 and n, inclusive). The preference list is ordered by the most preferred candy type to the least preferred one. Output a single integer — the maximum number of kids who receive their most preferred available candy type. # Example Input ``` 4 3 2 1 2 3 2 1 3 1 4 ``` Output ``` 3 ``` # Explanation Here, there are 4 types of candy and 3 kids. - Kid 1 has a preference list [1, 2], so they would prefer candy 1 first and then candy 2. - Kid 2 has a preference list [2, 1, 3], so they prefer candy 2 first, then candy 1, and then candy 3. - Kid 3 has a preference list [4], so they only want candy 4. The optimal distribution would be: - Kid 1 gets candy 1 (their most preferred available candy). - Kid 2 gets candy 2 (their most preferred available candy). - Kid 3 gets candy 4 (their most preferred available candy). Hence, all 3 kids get their most preferred available candy, so the output is 3.","solution":"def max_happy_kids(n, m, preferences): Determines the maximum number of kids who receive their most preferred available candy type. Args: n (int): Number of candy types. m (int): Number of kids. preferences (list): List of preference lists for each kid. Returns: int: Maximum number of kids who get their most preferred available candy type. candy_taken = set() happy_kids = 0 for preference in preferences: for candy in preference: if candy not in candy_taken: candy_taken.add(candy) happy_kids += 1 break return happy_kids # Example Usage if __name__ == \\"__main__\\": n, m = 4, 3 preferences = [ [1, 2], [2, 1, 3], [4] ] print(max_happy_kids(n, m, preferences)) # Output: 3"},{"question":"Vera is a software developer who likes to listen to music while coding. She has a playlist that consists of n songs, and each song has a length given by an integer duration in minutes. Vera wants to know the maximum number of different songs she can listen to during a coding session of exactly T minutes, such that the sum of the durations of these songs is exactly T minutes. However, she will only listen to a song fully if it fits in the remaining time, and she does not want to repeat any song. Given the number of songs n and their durations, determine the maximum number of unique songs Vera can listen to in exactly T minutes. The first line of the input contains two integers n and T (1 ≤ n ≤ 100, 1 ≤ T ≤ 10000), where n is the number of songs, and T is the total duration of the coding session in minutes. The second line of the input contains n integers d1, d2, ..., dn (1 ≤ di ≤ 10000), where di is the duration of the i-th song. Print a single integer — the maximum number of different songs Vera can listen to in T minutes. **Example Input:** ``` 5 120 30 60 90 45 60 ``` **Example Output:** ``` 2 ``` **Explanation:** In the first sample, Vera has the option to listen to songs with durations 30, 60, 90, 45, and 60 minutes. To maximize the number of different songs she can listen to in exactly 120 minutes, she can choose the songs with durations 30 and 90, or 60 and 60. Both choices result in listening to 2 different songs.","solution":"def max_songs(n, T, durations): Returns the maximum number of different songs Vera can listen to in T minutes. :param n: Number of songs :param T: Total duration of the coding session :param durations: List of durations of the songs :return: Maximum number of different songs durations.sort() dp = [0] * (T + 1) for duration in durations: for t in range(T, duration - 1, -1): dp[t] = max(dp[t], dp[t - duration] + 1) return dp[T]"},{"question":"Consider you are working on an algorithm to optimize the placement of Wi-Fi routers in a large public park represented as a rectangular grid of cells. Each cell is either an open space (denoted by \'.\') or an obstacle (denoted by \'#\'). You need to place Wi-Fi routers such that all open space cells are covered by at least one router. A Wi-Fi router placed at cell (r, c) covers the cell itself and all cells within a Manhattan distance of d from it. The Manhattan distance between two cells (r1, c1) and (r2, c2) is |r1 - r2| + |c1 - c2|. Your task is to find the minimum number of Wi-Fi routers needed to cover all open space cells. The first line of the input contains three integers n, m, and d (1 ≤ n, m ≤ 100, 1 ≤ d ≤ 10) - the number of rows, the number of columns in the grid, and the coverage distance of a Wi-Fi router, respectively. Each of the next n lines contains a string of length m consisting of \'.\' and \'#\', representing the park layout. Output the minimum number of Wi-Fi routers required. # Example Input ``` 4 5 1 #.. ... ..#.. #.# ``` Output ``` 3 ``` Explanation In the given example, placing routers at cells (0, 2), (2, 1), and (2, 4) will cover all the open space cells with the minimum number of routers. Note: There could be multiple optimal solutions; you just need to find one valid configuration that uses the minimum number of routers.","solution":"def min_wifi_routers(n, m, d, grid): def is_covered(r, c, coverage_grid): for i in range(max(0, r-d), min(n, r+d+1)): for j in range(max(0, c-d), min(m, c+d+1)): if abs(i-r) + abs(j-c) <= d: if coverage_grid[i][j] == 1: return True return False def cover(r, c, coverage_grid): for i in range(max(0, r-d), min(n, r+d+1)): for j in range(max(0, c-d), min(m, c+d+1)): if abs(i-r) + abs(j-c) <= d: coverage_grid[i][j] = 1 open_cells = [] for i in range(n): for j in range(m): if grid[i][j] == \'.\': open_cells.append((i, j)) coverage_grid = [[0] * m for _ in range(n)] routers = 0 for r, c in open_cells: if not is_covered(r, c, coverage_grid): cover(r, c, coverage_grid) routers += 1 return routers"},{"question":"One day, Alice came across a peculiar problem involving an array of integers. The problem intrigued her, and she decided to solve it. She needs to transform the array using a sequence of operations to form a target array. The allowed operation is to increase any element of the array by 1. Formally, you are given two arrays of integers, `a` and `b`, each of length `n`. Alice needs to increase the elements of `a` so that, after any sequence of such operations, array `a` becomes exactly equal to array `b`. Help Alice determine whether this is possible. The first line contains a single integer `t` (1 le t le 100) — the number of test cases. Each test case consists of three lines: - The first line contains the integer `n` (1 le n le 1,000) — the number of elements in the arrays. - The second line contains `n` integers `a1, a2, ..., an` (0 le ai le 10^9) — the initial elements of the array `a`. - The third line contains `n` integers `b1, b2, ..., bn` (0 le bi le 10^9) — the target elements of the array `b`. For each test case, output \\"YES\\" if Alice can transform array `a` into array `b` using the allowed operations, otherwise output \\"NO\\". For example: Input: ``` 3 3 1 2 3 1 2 3 4 1 2 3 4 4 3 2 1 2 0 0 1 1 ``` Output: ``` YES NO YES ``` Explanation: In the first test case, array `a` is already equal to array `b`. In the second test case, it\'s impossible to transform `a` into `b` as elements in `a` must be incremented and cannot be decremented to match `b`. In the third test case, incrementing each element of `[0, 0]` by 1 results in `[1, 1]`, which is equal to array `b`.","solution":"def can_transform(t, test_cases): results = [] for i in range(t): n, a, b = test_cases[i] possible = True for j in range(n): if a[j] > b[j]: possible = False break results.append(\\"YES\\" if possible else \\"NO\\") return results"},{"question":"Create a program that simulates a ticket booking system for a cinema hall with rows and seats. The hall has a seating capacity defined by rows and columns. Implement functions to book, cancel, and check for available seats. # Input 1. First line contains two integers, R (1 ≤ R ≤ 100), the number of rows and C (1 ≤ C ≤ 100), the number of seats per row. 2. Second line contains an integer Q (1 ≤ Q ≤ 1000), the number of operations. 3. Next Q lines contain operations in the following format: - \\"BOOK x y\\" where x is the row number (1 ≤ x ≤ R) and y is the seat number (1 ≤ y ≤ C) to book the seat. - \\"CANCEL x y\\" where x is the row number and y is the seat number to cancel the booked seat. - \\"CHECK\\" to output the number of available seats. # Output For each \\"CHECK\\" operation, print the number of available seats in a new line. # Example Input ``` 5 5 7 BOOK 1 1 BOOK 2 2 CHECK CANCEL 1 1 CHECK BOOK 5 5 CHECK ``` Output ``` 23 24 23 ``` # Note - A seat can only be booked if it is not already booked. - A seat can only be canceled if it is currently booked.","solution":"class CinemaHall: def __init__(self, rows, cols): self.rows = rows self.cols = cols self.seats = [[False]*cols for _ in range(rows)] self.available_seats = rows * cols def book_seat(self, row, col): if not self.seats[row-1][col-1]: self.seats[row-1][col-1] = True self.available_seats -= 1 def cancel_seat(self, row, col): if self.seats[row-1][col-1]: self.seats[row-1][col-1] = False self.available_seats += 1 def check_available_seats(self): return self.available_seats def cinema_simulation(r, c, operations): cinema = CinemaHall(r, c) results = [] for operation in operations: ops = operation.split() if ops[0] == \\"BOOK\\": cinema.book_seat(int(ops[1]), int(ops[2])) elif ops[0] == \\"CANCEL\\": cinema.cancel_seat(int(ops[1]), int(ops[2])) elif ops[0] == \\"CHECK\\": results.append(cinema.check_available_seats()) return results"},{"question":"Given an array of n integers, your goal is to modify the array so that all elements in the array become equal using the minimum number of operations. An operation is defined as selecting any two distinct elements in the array and incrementing or decrementing both by 1. The first line of input contains an integer n (1 ≤ n ≤ 2 × 10^5), the size of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the array. Output a single integer, the minimum number of operations required to make all elements of the array equal. Example: Input: 5 1 2 3 4 5 Output: 4 Explanation: One way to achieve all elements equal with minimum operations: 1 2 3 4 5 Increment 1 and 5: 2 2 3 4 4 Increment 2 and 4: 3 2 3 4 3 Increment 2 and 4: 3 3 3 4 3 Increment 3 and 4: 3 3 3 3 3 Hence, the minimum number of operations is 4.","solution":"def minimum_operations_to_equalize(arr): Return the minimum number of operations to make all elements in the array equal. n = len(arr) arr.sort() median = arr[n // 2] operations = sum(abs(median - x) for x in arr) return operations"},{"question":"Sarah is a student who loves solving puzzles. Recently, she encountered an interesting problem related to patterns in integers. As a mathematics enthusiast, she is determined to find a solution. She defines a \\"Mountain\\" in an integer array as any subarray where the elements first strictly increase to a peak value and then strictly decrease. The peak should be the maximum element in this subarray. Sarah has an integer array of size n and she needs to find the length of the longest \\"Mountain\\" subarray. Your task is to help Sarah find the length of the longest \\"Mountain\\" subarray in the given integer array. The first line of the input contains an integer n (1 ≤ n ≤ 100000) — the size of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array. Output the length of the longest \\"Mountain\\" subarray. If there is no such subarray, print 0. # Examples Input ``` 12 2 1 4 7 3 2 5 6 4 3 2 1 ``` Output ``` 7 ``` In the provided example, the longest \\"Mountain\\" subarray is [2, 5, 6, 4, 3, 2, 1], having length 7. Input ``` 5 2 2 2 2 2 ``` Output ``` 0 ``` In this example, there is no \\"Mountain\\" subarray, so the output is 0.","solution":"def longest_mountain(arr): n = len(arr) if n < 3: return 0 longest = 0 for i in range(1, n - 1): if arr[i - 1] < arr[i] > arr[i + 1]: left = i - 1 while left > 0 and arr[left - 1] < arr[left]: left -= 1 right = i + 1 while right < n - 1 and arr[right] > arr[right + 1]: right += 1 longest = max(longest, right - left + 1) return longest"},{"question":"# Matrix Diagonals Sum You are given a square matrix with dimension n x n. Your task is to calculate the sum of the primary diagonal and the secondary diagonal of the matrix. The primary diagonal is formed by elements `a[i][i]` for `i` from 0 to n-1. The secondary diagonal is formed by elements `a[i][n-i-1]` for `i` from 0 to n-1. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the size of the square matrix. The next n lines each contain n integers representing the elements of the matrix. Output two integers: the sum of the primary diagonal and the sum of the secondary diagonal. # Example Input: ``` 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 15 15 ``` In this example, the primary diagonal is composed of 1, 5, and 9, which sum up to 15. The secondary diagonal is composed of 3, 5, and 7, which also sum up to 15.","solution":"def matrix_diagonals_sum(matrix): Given a square matrix, returns the sum of the primary diagonal and the secondary diagonal. n = len(matrix) primary_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(n): primary_diagonal_sum += matrix[i][i] secondary_diagonal_sum += matrix[i][n - i - 1] return primary_diagonal_sum, secondary_diagonal_sum"},{"question":"Alice and Bob are practicing a new dance routine. The routine consists of N steps, each of which must be timed perfectly for synchronization. However, Alice and Bob each have their own pace represented by two arrays, Alice\'s pace and Bob\'s pace, which determine the time in seconds they need to complete each step. Alice will finish the i-th step in Alice[i] seconds, and Bob will finish the i-th step in Bob[i] seconds. The goal is to find the minimum combined total time required for both of them to complete the entire routine, ensuring that they are synchronized after every step. In other words, Alice and Bob can wait for each other at each step to ensure they start the next step together. For example, if Alice[i] = 2 and Bob[i] = 3, then Bob has to wait for 1 second after completing the i-th step to synchronize with Alice before starting the next step. Given the two arrays Alice and Bob, both of length N, determine the minimum total time required for Alice and Bob to complete the dance routine. Consider the following constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ Alice[i], Bob[i] ≤ 10^9 # Input Format: - The first line contains an integer N, the number of steps in the routine. - The second line contains N space-separated integers representing Alice\'s pace array. - The third line contains N space-separated integers representing Bob\'s pace array. # Output Format: - Print a single integer representing the minimum combined total time required for Alice and Bob to complete the routine. # Example: Input: ``` 3 2 1 3 3 2 1 ``` Output: ``` 8 ``` Explanation: - After the first step: - Alice: 2 seconds - Bob: 3 seconds (Bob waits 1 second) - After the second step: - Alice: 1 second - Bob: 2 seconds (Bob waits 1 second) - After the third step: - Alice: 3 seconds - Bob: 1 second (Alice waits 2 seconds) In total, Alice spends 6 seconds and Bob spends 2 extra synchronization seconds, so the minimum combined total time required is 8 seconds.","solution":"def min_total_time(N, Alice, Bob): total_time = 0 for i in range(N): total_time += max(Alice[i], Bob[i]) return total_time"},{"question":"Little Tommy loves to collect different types of marbles. Each type of marble has a unique integer value associated with it, and Tommy has a bag that can carry up to `n` marbles. However, Tommy has a particular way of selecting marbles: he only wants to carry marbles in his bag such that the sum of the unique values of the marbles in his bag is minimized while still filling up the bag completely. Tommy\'s bag has a capacity of `m`, and there are `n` distinct types of marbles with values ranging from `1` to `n`. Write a function `minimumValueMarbles` that takes two integers `n` and `m` as input and returns the minimum possible sum of the unique values of the marbles Tommy can carry in his bag. Function signature: ```python def minimumValueMarbles(n: int, m: int) -> int: pass ``` # Input - `n` (1 ≤ n ≤ 1000) — the number of unique types of marbles. - `m` (1 ≤ m ≤ n) — the capacity of the bag (the number of marbles it can hold). # Output - Return an integer that represents the minimum possible sum of the unique values of the marbles Tommy can carry in his bag. Example 1: ```python print(minimumValueMarbles(5, 3)) # Output: 6 ``` Tommy has 5 types of marbles with values {1, 2, 3, 4, 5}. The bag can hold 3 marbles. The minimal sum of unique values if he carries marbles {1, 2, 3} is 6. Example 2: ```python print(minimumValueMarbles(7, 4)) # Output: 10 ``` Tommy has 7 types of marbles with values {1, 2, 3, 4, 5, 6, 7}. The bag can hold 4 marbles. The minimal sum of unique values if he carries marbles {1, 2, 3, 4} is 10.","solution":"def minimumValueMarbles(n: int, m: int) -> int: Returns the minimum possible sum of the unique values of the marbles Tommy can carry in his bag. # The minimum sum of m distinct integers starting from 1 is the sum of the first m integers. return m * (m + 1) // 2"},{"question":"You are given a list of **n** integers and a threshold value **t**. You need to find the length of the longest subarray (contiguous elements) whose sum is less than or equal to **t**. For example, if the list is `[1, 2, 3, 4, 5]` and `t = 7`, the longest subarray is `[1, 2, 3]` with a sum of 6, and its length is 3. Write a function to determine this length. # Input Format - An integer **n** representing the number of elements in the list (1 ≤ n ≤ 10^5). - An integer **t** representing the threshold value (1 ≤ t ≤ 10^9). - A list of **n** integers (each between 1 and 1000). # Output Format - An integer representing the length of the longest subarray whose sum is less than or equal to **t**. # Example **Input:** ``` 5 7 1 2 3 4 5 ``` **Output:** ``` 3 ``` # Constraints - The list of integers and the threshold value will be given in the second line and third line respectively in each test case. - You should aim for an optimal O(n) solution.","solution":"def longest_subarray_length(n, t, arr): Finds the length of the longest subarray whose sum is less than or equal to t. Parameters: n (int): Number of elements in the list. t (int): Threshold value. arr (list): List of integers. Returns: int: Length of the longest subarray. max_length = 0 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > t: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"A company wants to implement a new email filtering system to categorize incoming emails based on their content. The system should work by checking for the presence of certain keywords in the email text and categorizing the email into one or more categories accordingly. The available categories and their corresponding keywords are given as follows: - \\"spam\\": [\\"discount\\", \\"offer\\", \\"winner\\", \\"money\\"] - \\"work\\": [\\"project\\", \\"meeting\\", \\"deadline\\", \\"presentation\\"] - \\"social\\": [\\"party\\", \\"friends\\", \\"weekend\\", \\"family\\"] Write a program that categorizes a list of emails based on these keywords. The first line of the input contains a single integer n (1 ≤ n ≤ 100) — the number of emails. The next n lines contain the text of each email. Each email text is at most 255 characters long and consists of lowercase letters and spaces. The output should consist of n lines. Each line should contain the email text followed by its categories separated by commas. If an email does not match any category, it should be categorized as \\"general\\". Example: Input 4 join us for a weekend party with friends urgent project deadline approaching special offer just for you meeting with the family Output join us for a weekend party with friends social urgent project deadline approaching work special offer just for you spam meeting with the family social Note that each email can belong to multiple categories if it contains keywords from multiple categories. If there are no matching keywords, the output category should be \\"general\\".","solution":"def categorize_emails(n, emails): categories = { \\"spam\\": [\\"discount\\", \\"offer\\", \\"winner\\", \\"money\\"], \\"work\\": [\\"project\\", \\"meeting\\", \\"deadline\\", \\"presentation\\"], \\"social\\": [\\"party\\", \\"friends\\", \\"weekend\\", \\"family\\"] } categorized_emails = [] for email in emails: email_categories = [] for category, keywords in categories.items(): if any(keyword in email for keyword in keywords): email_categories.append(category) if not email_categories: email_categories = [\\"general\\"] categorized_emails.append(f\\"{email} {\',\'.join(email_categories)}\\") return categorized_emails # Example usage: # n = 4 # emails = [ # \\"join us for a weekend party with friends\\", # \\"urgent project deadline approaching\\", # \\"special offer just for you\\", # \\"meeting with the family\\" # ] # print(categorize_emails(n, emails))"},{"question":"Given a string s consisting of lowercase alphabets, you need to determine the length of the smallest substring of s which contains all the unique characters of s at least once. You are to write a function with the following signature: def smallest_substring_length(s: str) -> int: # Input - A single string s with length 1 leq |s| leq 10^5 consisting of lowercase English letters. # Output - An integer representing the length of the smallest substring that contains all unique characters of s at least once. # Example __Input__: \\"abaacb\\" __Output__: 3 *Explanation*: The shortest substring of \\"abaacb\\" that contains all the unique characters (\'a\', \'b\', \'c\') is \\"acb\\" which has length 3. # Note: The input contains only lowercase English letters. Your solution should aim to achieve an efficient time complexity.","solution":"def smallest_substring_length(s: str) -> int: from collections import defaultdict unique_chars = set(s) required_char_count = len(unique_chars) char_count = defaultdict(int) start = 0 min_length = float(\\"inf\\") met_chars = 0 for end in range(len(s)): char_count[s[end]] += 1 if char_count[s[end]] == 1: met_chars += 1 while met_chars == required_char_count: min_length = min(min_length, end - start + 1) char_count[s[start]] -= 1 if char_count[s[start]] == 0: met_chars -= 1 start += 1 return min_length"},{"question":"Alice is organizing a charity auction and has a unique way to determine the winning bid for an item. Each bidder submits two values: a bid amount and a time stamp indicating when the bid was placed. The winning bid is the highest bid among all bidders. If there is a tie (i.e., two or more bidders place the same highest bid amount), the winner is determined by the earliest time stamp. Given a list of bids, help Alice determine the winning bidder and the amount of the winning bid. Each bid is represented as a tuple containing the bidder\'s name (a string), the bid amount (an integer), and the time stamp (an integer). The bids are provided in a list, and it is guaranteed that no two bids have the same time stamp. The input consists of an integer `n`, the number of bids, followed by `n` lines, each containing a bidder\'s name, a bid amount, and a time stamp. Print the name of the winning bidder and the winning bid amount. # Input: - The first line contains an integer `n` (1 le n le 10^5). - Each of the next `n` lines contains a string (the bidder\'s name), an integer (the bid amount), and an integer (the time stamp in the format `hhmmss`). # Output: - Print the name of the winning bidder and the amount of the winning bid, separated by a space. # Example: Input: ``` 5 Alice 100 123456 Bob 200 234567 Charlie 150 345678 Alice 200 123000 David 150 456789 ``` Output: ``` Alice 200 ``` # Explanation: - Both Alice and Bob bid 200, but Alice\'s bid was placed earlier (123000 vs. 234567). Therefore, Alice is the winning bidder with a winning bid amount of 200.","solution":"def find_winning_bidder(bids): Determines the winning bidder and the amount of the winning bid. Args: bids (list): A list of tuples where each tuple contains: - name (str) : Name of the bidder - amount (int) : Bid amount - timestamp (int) : Time stamp in the format hhmmss Returns: (str, int): A tuple containing the name of the winning bidder and the winning bid amount. # Initialize the winning bid details winning_bidder = \\"\\" winning_amount = -1 winning_time = 999999 for bid in bids: name, amount, timestamp = bid # Check if this bid is higher than the current highest bid if amount > winning_amount or (amount == winning_amount and timestamp < winning_time): winning_bidder = name winning_amount = amount winning_time = timestamp return winning_bidder, winning_amount"},{"question":"Anna is a researcher studying the growth of a particular species of flowers. She has placed n flowerpots in a row, each containing one flower. Each flower can either be healthy or wilting, represented by 1 and 0 respectively. Over time, Anna has made m observations. Each observation includes a start pot and an end pot, and she has recorded the number of healthy flowers within that range. However, some of her recordings might be incorrect due to human error. Anna now needs your help to find a possible state of the flowers (a sequence of 1\'s and 0\'s) that is consistent with her observations. The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100). The next m lines each contain three integers, l, r, and k (1 ≤ l ≤ r ≤ n, 0 ≤ k ≤ r-l+1), representing an observation from flowerpot l to flowerpot r, with k healthy flowers observed in that range. If it is possible to determine a sequence of 1\'s and 0\'s for the flowers that fits all the given observations, print any such sequence. If it is not possible, print -1. Example: Input: 6 3 1 4 2 2 5 3 3 6 2 Output: 1 0 1 1 0 1 In this example, note that there could be multiple valid sequences, but any sequence that fits the given observations will be an acceptable output. For instance, the sequence above is valid because it has: - 2 healthy flowers between pots 1 and 4. - 3 healthy flowers between pots 2 and 5. - 2 healthy flowers between pots 3 and 6.","solution":"def possible_flower_state(n, m, observations): from itertools import combinations # Brute force: try all possible states and check all observations for bits in combinations(range(n), m): test_state = [0] * n for bit in bits: test_state[bit] = 1 valid = True for l, r, k in observations: if sum(test_state[l-1:r]) != k: valid = False break if valid: return \'\'.join(map(str, test_state)) return -1 # Example usage: # Uncomment to test # n, m = 6, 3 # observations = [(1, 4, 2), (2, 5, 3), (3, 6, 2)] # print(possible_flower_state(n, m, observations))"},{"question":"There are N islands in a vast ocean, connected by M bridges. Each bridge connects two islands, and you are given the travel time in minutes for each bridge. A traveler wants to go from island A to island B, but he wants to minimize the total travel time. However, if two different paths have the same total travel time, he wants to choose the path that visits the fewer number of islands. Given the number of islands, bridges, and the travel times for each bridge, determine the minimum travel time from island A to island B, and if there are multiple paths with the same travel time, the one with the fewest islands visited. The first line of input contains three space-separated integers N (2 ≤ N ≤ 1000), M (1 ≤ M ≤ 10000), and Q (1 ≤ Q ≤ 100), where N is the number of islands, M is the number of bridges, and Q is the number of queries. The next M lines each contain three space-separated integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 1000), describing a bridge that connects islands u and v with travel time w. The next Q lines each contain two space-separated integers A and B (1 ≤ A, B ≤ N), representing a query for the minimum travel time from island A to island B. Output the minimum travel time for each query on a new line. If there is no path between the islands, output \\"Unreachable\\". Example: Input: 5 6 2 1 2 10 2 3 10 3 4 10 4 5 10 1 5 50 2 5 30 1 5 1 4 Output: 40 20","solution":"import heapq def dijkstra(graph, start, end): pq = [(0, start, 1)] # (total_time, current_island, islands_visited) visited = {} # current_island -> (minimum_time, islands_visited) while pq: current_time, u, islands_visited = heapq.heappop(pq) if u in visited: if current_time > visited[u][0]: continue if current_time == visited[u][0] and islands_visited >= visited[u][1]: continue visited[u] = (current_time, islands_visited) if u == end: return current_time for time, v in graph[u]: if v not in visited or (current_time + time < visited[v][0] or (current_time + time == visited[v][0] and islands_visited + 1 < visited[v][1])): heapq.heappush(pq, (current_time + time, v, islands_visited + 1)) return \\"Unreachable\\" def find_min_travel_times(N, M, Q, bridges, queries): graph = {i: [] for i in range(1, N+1)} for u, v, w in bridges: graph[u].append((w, v)) graph[v].append((w, u)) results = [] for A, B in queries: results.append(dijkstra(graph, A, B)) return results"},{"question":"Peter is a fan of unique sequences and wants to create a sequence of integers where each integer appears an even number of times. Given an array of integers, Peter wants to know the smallest possible number of integers he needs to add to the array to achieve this. You are given an array of integers. Some numbers in the array might already appear an even number of times, while others might appear an odd number of times. Your task is to determine the minimal number of integers that Peter needs to add to make the frequency of each integer in the array even. The first line of input contains a single integer n (1 ≤ n ≤ 100,000) — the number of integers in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100,000) — the elements of the array. Output a single integer — the minimal number of integers to add to make the frequency of each integer in the array even. Example: Input: 6 4 5 4 5 7 7 Output: 0 Input: 5 1 2 3 4 5 Output: 5 In the first sample, all integers already appear an even number of times (twice), so no integers need to be added. In the second sample, each integer appears only once, so an additional copy of each integer needs to be added, resulting in 5 added integers.","solution":"def minimal_additions_to_even_frequencies(n, array): from collections import Counter count = Counter(array) additions_needed = 0 for frequency in count.values(): if frequency % 2 != 0: additions_needed += 1 return additions_needed"},{"question":"Given a sequence of `n` integers representing the `heights` of students standing in a line, we need to find the maximum number of students who can be removed from the line to create a strictly increasing subsequence. A subsequence is a sequence derived from another sequence by deleting some or none of the elements without changing the order of the remaining elements. A strictly increasing subsequence is a subsequence in which each successive element is greater than the previous element. The first line of the input contains a single integer `n` (1 ≤ n ≤ 10^5), the number of students. The second line contains `n` integers `heights[i]` (1 ≤ heights[i] ≤ 10^9), representing the heights of the students. Output a single integer: the maximum number of students that can be removed from the line to create a strictly increasing subsequence. # Example Input: ``` 6 10 4 5 8 2 9 ``` Output: ``` 3 ``` Explanation: The given sequence is [10, 4, 5, 8, 2, 9]. A possible strictly increasing subsequence is [4, 5, 8, 9], which has a length of 4. Hence, we need to remove 2 elements (10 and 2) to get this increasing subsequence. Therefore, the maximum number of students that can be removed is 3.","solution":"def max_students_removed(heights): from bisect import bisect_left if not heights: return 0 n = len(heights) lis = [] for height in heights: pos = bisect_left(lis, height) if pos == len(lis): lis.append(height) else: lis[pos] = height length_lis = len(lis) return n - length_lis"},{"question":"Polycarp has recently taken up playing a number game. The game involves an array of integers. For a chosen continuous subsequence (subarray) of the array, he wants to know the minimum number that appears. If there are multiple such subsequences with the same minimum number, he wants the one with the longest length. If there are still multiple valid subsequences, any one of them is acceptable. Given an array of integers, help Polycarp find the minimum number that appears in a continuous subsequence of the array and the longest length of such a subsequence. The first line contains a single integer `n` (`1 ≤ n ≤ 10^5`) — the number of elements in the array. The second line contains `n` space-separated integers, the elements of the array `a_i` (`1 ≤ a_i ≤ 10^6`). Output two integers: the minimum number in the array and the length of the longest continuous subsequence where this minimum number appears. # Example Input: ``` 10 4 3 4 1 1 1 5 1 2 2 ``` Output: ``` 1 3 ``` # Explanation: The minimum number in the array is `1`. It appears in multiple subsequences, but the longest subsequence where it appears continuously has a length of `3` (from index 4 to 6).","solution":"def find_minimum_and_longest_subsequence_length(arr): Finds the minimum number in the array and the length of the longest continuous subsequence where this minimum number appears. Parameters: arr (list): The list of integers. Returns: tuple: The minimum number and the length of the longest continuous subsequence. minimum = min(arr) max_length = 0 current_length = 0 for num in arr: if num == minimum: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return minimum, max_length"},{"question":"You are given an integer array `jobs` where the `i-th` element represents the time required to complete the `i-th` job. There are `k` identical workers available to do these jobs. Each worker can only work on one job at a time. Design an algorithm to assign jobs to workers in such a way that the time the last job finishes is minimized. Write a function `minTimeToFinishJobs` that takes two arguments - an integer array `jobs` and an integer `k` - and returns the minimum time required to complete all the jobs. # Example ```python def minTimeToFinishJobs(jobs: List[int], k: int) -> int: # Write your code here # Example 1: jobs = [3, 2, 3] k = 3 print(minTimeToFinishJobs(jobs, k)) # Output: 3 # Example 2: jobs = [1, 2, 4, 7, 8] k = 2 print(minTimeToFinishJobs(jobs, k)) # Output: 11 ``` # Constraints: - `1 <= jobs.length <= 12` - `1 <= jobs[i] <= 10^7` - `1 <= k <= 12` **Note**: The minimal time for the last job to finish is determined by how effectively the jobs are distributed among the workers. This is a problem that can be approached using techniques such as backtracking, greedy algorithms, or dynamic programming.","solution":"def minTimeToFinishJobs(jobs, k): from itertools import combinations def canFinish(jobs, workers, limit): allocations = [0] * workers return backtrack(0, jobs, allocations, limit) def backtrack(index, jobs, allocations, limit): if index == len(jobs): return True for i in range(len(allocations)): if allocations[i] + jobs[index] <= limit: allocations[i] += jobs[index] if backtrack(index + 1, jobs, allocations, limit): return True allocations[i] -= jobs[index] # If this worker has no jobs assigned yet and this job cannot fit, # then no need to try next workers. if allocations[i] == 0: break return False jobs.sort(reverse=True) left, right = max(jobs), sum(jobs) while left < right: mid = (left + right) // 2 if canFinish(jobs, k, mid): right = mid else: left = mid + 1 return left"},{"question":"Joe is building a binary search tree (BST) from an initially empty tree by inserting a sequence of distinct numbers. The insertion process for BSTs follows these rules: - If the tree is empty, the number becomes the root. - If the tree is not empty, start at the root and compare the number to be inserted with the value of the current node. - If the number is smaller, move to the left child; if larger, move to the right child. - Repeat the process until an empty spot is found, and insert the number there. Joe is curious about how many unique BST structures can be formed with a given sequence of n numbers by varying their insertion orders. Given the number n (1 ≤ n ≤ 15), calculate the number of unique BSTs that can be formed using the sequence of numbers from 1 to n. The single input line contains an integer n. Print a single integer, the number of unique BSTs that can be formed with n distinct integers. # Example Input 3 Output 5 # Explanation For n = 3, the unique BSTs are: - Root 1 with left and right children 2 and 3. - Root 1 with right child 2, which has right child 3. - Root 2 with left child 1 and right child 3. - Root 3 with left child 1, which has right child 2. - Root 3 with left and right children 2 and 1. Following these different structures, we get a total of 5 unique BSTs.","solution":"def num_unique_BST(n): Returns the number of unique binary search trees that can be formed with n distinct integers. if n == 0 or n == 1: return 1 # Initialize an array to store the results of unique BST counts dp = [0] * (n + 1) # Base cases dp[0] = 1 dp[1] = 1 # Fill the dp array using the formula for i in range(2, n + 1): for j in range(1, i + 1): dp[i] += dp[j - 1] * dp[i - j] return dp[n]"},{"question":"You are given an integer array a consisting of n numbers. Your task is to find the maximum sum of a subsequence of a such that no two elements of the subsequence are adjacent in the original array. For example, if the array is [3, 2, 5, 10, 7], the maximum sum of such a subsequence is 15, as the subsequence [3, 10] gives the maximum sum with no two elements adjacent. Write a function `maxNonAdjacentSum(a: List[int]) -> int` that takes a list of integers and returns the maximum sum according to the rules mentioned. The first line of input contains a single integer n (1 leq n leq 10^5) — the length of the array a. The second line contains n integers representing the elements of the array a (-10^4 leq a[i] leq 10^4). Output a single integer representing the maximum sum of a non-adjacent subsequence. Note: As the input size can be large, you need to write an efficient solution. Nate that if all the numbers in a are negative, the maximum sum is 0 (taking no elements). **Example** Input: ``` 5 3 2 5 10 7 ``` Output: ``` 15 ``` Input: ``` 3 -1 -2 -3 ``` Output: ``` 0 ```","solution":"from typing import List def maxNonAdjacentSum(a: List[int]) -> int: if not a: return 0 n = len(a) if n == 1: return max(0, a[0]) # Initialize two variables to store the two states: include or exclude the current element incl = max(0, a[0]) # Sum including the first element, but ensuring non-negative excl = 0 # Sum excluding the first element for i in range(1, n): new_incl = excl + max(0, a[i]) # New sum including current element new_excl = max(incl, excl) # New sum excluding current element incl, excl = new_incl, new_excl # Update for the next iteration return max(incl, excl)"},{"question":"Given an array of integers, you need to construct a new array where each element at index i of the new array is the product of all the numbers in the original array except the one at i. Implement a function `arrayProductExceptSelf(arr: List[int]) -> List[int]` that takes a list of integers `arr` and returns a new list such that each element at index i is the product of all the numbers in the original array except the one at `i`. You should strive to come up with a solution that does not use division and runs in O(n) time complexity. # Input Format - The first line contains an integer `n` (1 ≤ n ≤ 105) — the number of elements in the array. - The second line contains `n` integers `a1, a2, ..., an` (|ai| ≤ 1000). # Output Format - Output a list of `n` integers where the i-th integer is the product of all elements in the given array except the element at index i. # Example Input ``` 4 1 2 3 4 ``` Output ``` [24, 12, 8, 6] ``` Explanation: For the first element, the product of the other numbers is 2 * 3 * 4 = 24. For the second element, the product of the other numbers is 1 * 3 * 4 = 12. For the third element, the product of the other numbers is 1 * 2 * 4 = 8. For the fourth element, the product of the other numbers is 1 * 2 * 3 = 6.","solution":"from typing import List def arrayProductExceptSelf(arr: List[int]) -> List[int]: n = len(arr) if n == 0: return [] # Create arrays to store the prefix and suffix products prefix_products = [1] * n suffix_products = [1] * n # Fill prefix_products - product of all elements left of index i for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * arr[i - 1] # Fill suffix_products - product of all elements right of index i for i in range(n - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * arr[i + 1] # Construct the result from the prefix and suffix products result = [1] * n for i in range(n): result[i] = prefix_products[i] * suffix_products[i] return result"},{"question":"You are given an array a of n integers and an integer k. Your goal is to divide the array into k non-overlapping subarrays such that the maximum sum of any subarray is minimized. For example, consider the array a = [7, 2, 5, 10, 8] and k = 2. You can partition the array into the following two subarrays: - [7, 2, 5] with sum 14 - [10, 8] with sum 18 The maximum sum among these subarrays is 18. This is one possible way to partition the array, but there are other ways as well. Write a function to find the minimum possible value of the maximum sum of any subarray given the constraints. **Input:** - The first line contains two integers n and k (1 leq k leq n leq 10^5). - The second line contains n integers representing the array a (1 leq a_i leq 10^4). **Output:** - Output a single integer, the minimum possible value of the maximum sum of any subarray. **Example:** Input: ``` 5 2 7 2 5 10 8 ``` Output: ``` 18 ``` Input: ``` 5 3 1 2 3 4 5 ``` Output: ``` 6 ``` **Explanation:** In the first example, the optimal way to divide the array into 2 subarrays is: - [7, 2, 5], [10, 8] with the sums 14 and 18 respectively, and the maximum sum is 18. In the second example, the optimal way to divide the array into 3 subarrays is: - [1, 2, 3], [4], [5] with the sums 6, 4, 5 respectively, and the maximum sum is 6.","solution":"def minimize_maximum_sum(n, k, a): def can_split(max_sum): current_sum = 0 subarrays = 1 for num in a: if current_sum + num > max_sum: subarrays += 1 current_sum = num if subarrays > k: return False else: current_sum += num return True left, right = max(a), sum(a) while left < right: mid = (left + right) // 2 if can_split(mid): right = mid else: left = mid + 1 return left"},{"question":"A robotics company is designing a simulation to test the movements of their new robots in a grid-like environment. Each test scenario involves an n x n grid, where the robots need to navigate from the top-left corner (1, 1) to the bottom-right corner (n, n). Each cell in the grid contains an integer that represents the cost for a robot to move through that cell. The robots can only move either right or down at any step, and they aim to reach the bottom-right corner with the minimum possible cost of the path taken. Write a program to help the company determine the minimum cost required for a robot to travel from the top-left corner to the bottom-right corner for a given grid. The input consists of: - An integer n (1 ≤ n ≤ 1000) representing the size of the grid. - An n x n matrix with integers where each integer a_ij (1 ≤ a_ij ≤ 1000) represents the cost of moving through cell (i, j). Output: - A single integer, which is the minimum cost required to travel from the top-left to the bottom-right corner of the grid. Example: Input: 3 1 3 1 1 5 1 4 2 1 Output: 7 In this example, the robot would navigate the grid as follows: (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3), with a total cost of 1 + 3 + 1 + 1 + 1 = 7.","solution":"def min_path_cost(n, grid): Returns the minimum cost to traverse from the top-left corner to the bottom-right corner of the grid. :param n: Size of the grid (number of rows and columns) :param grid: n x n matrix containing the cost of each cell :return: Minimum cost to travel from (0, 0) to (n-1, n-1) if n == 1: return grid[0][0] dp = [[0]*n for _ in range(n)] dp[0][0] = grid[0][0] # Initialize first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Populate the dp grid for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][j] # Example usage: grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] n = 3 print(min_path_cost(n, grid)) # Output: 7"},{"question":"Rita is organizing a series of webinars about advanced technologies. She planned a schedule with N events. Each event has a start time and an end time. Due to the quick nature of events, some of them might overlap. Rita wants to attend as many webinars as possible without attending two overlapping ones. She needs your help to find out the maximum number of non-overlapping webinars she can attend. The input consists of an integer N (1 ≤ N ≤ 100,000), the number of events. The next N lines each contain two integers, start and end (0 ≤ start < end ≤ 1,000,000,000), representing the start and end times of the events. Write a program that computes the maximum number of non-overlapping events Rita can attend. Output the maximum number of non-overlapping events she can attend. In the example, if the input is: ``` 5 1 4 2 3 3 5 5 8 6 10 ``` The output should be: ``` 3 ``` In this case, Rita can attend the events [2, 3], [3, 5], and [5, 8].","solution":"def max_non_overlapping_events(events): Returns the maximum number of non-overlapping events that can be attended. :param events: List of tuples, where each tuple contains two integers representing the start and end times of an event. :return: Integer representing the maximum number of non-overlapping events. if not events: return 0 # Sort events by their end times events.sort(key=lambda x: x[1]) max_events = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: max_events += 1 last_end_time = end return max_events"},{"question":"Eva\'s new obsession is palindromes. A palindrome is a string that reads the same backward as forward. In her quest to collect palindromes, Eva wants to find the longest palindromic substring within a given string. Your task is to help Eva by writing a function that finds and returns the longest palindromic substring within a given input string. If there are multiple such substrings of the same length, return the one that appears first in the input string. # Input The input consists of a single line containing a string `s` (1 ≤ |s| ≤ 1000). The string `s` consists of lowercase English letters. # Output Print a single line containing the longest palindromic substring of `s`. If there are multiple answers, print the one that appears first. # Examples Example 1 Input: ``` babad ``` Output: ``` bab ``` (Note: \\"aba\\" is also a valid answer, but \\"bab\\" appears first.) Example 2 Input: ``` cbbd ``` Output: ``` bb ``` Example 3 Input: ``` a ``` Output: ``` a ``` Example 4 Input: ``` bananas ``` Output: ``` anana ``` # Notes 1. A substring is a contiguous sequence of characters within a string. 2. You can assume that all input strings will have at least one palindrome in them.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring of s. If there are multiple such substrings of the same length, returns the one that appears first. n = len(s) if n == 0: return \\"\\" start, max_length = 0, 1 for i in range(1, n): # Check for even length palindromes low, high = i - 1, i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Check for odd length palindromes low, high = i - 1, i + 1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"}]'),Y={name:"App",components:{PoemCard:j},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},N={class:"card-container"},F={key:0,class:"empty-state"},z=["disabled"],P={key:0},C={key:1};function R(s,e,h,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[w,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",N,[(n(!0),i(y,null,_(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+u(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",C,"Loading...")):(n(),i("span",P,"See more"))],8,z)):l("",!0)])}const D=d(Y,[["render",R],["__scopeId","data-v-aaf5bd42"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/22.md","filePath":"chatai/22.md"}'),L={name:"chatai/22.md"},G=Object.assign(L,{setup(s){return(e,h)=>(n(),i("div",null,[x(D)]))}});export{M as __pageData,G as default};
