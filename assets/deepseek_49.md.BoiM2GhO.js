import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as y,f as h,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,p,r,a){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(u.poem.solution),1)])])])}const N=d(k,[["render",E],["__scopeId","data-v-939cf0c2"]]),A=JSON.parse('[{"question":"Given a string of space-separated words, write a function that capitalizes the first and last character of each word. If a word has only one character, capitalize it. Your function should return the modified string. The input contains multiple test cases. The first line is the number of test cases t (1 ≤ t ≤ 100). Each of the next t lines contains a string of words. Each string consists of lowercase alphabetical characters and spaces. SAMPLE INPUT 2 hello world this is a test SAMPLE OUTPUT HellO WorlD ThiS IS A TesT","solution":"def capitalize_first_last_chars(t, cases): Capitalizes the first and last character of each word in the string. If the word has only one character, it will be capitalized. :param int t: number of test cases :param list cases: list of strings; each being one test case :return: list of modified strings results = [] for s in cases: words = s.split() capitalized_words = [] for word in words: if len(word) == 1: capitalized_words.append(word.upper()) else: capitalized_words.append(word[0].upper() + word[1:-1] + word[-1].upper()) results.append(\' \'.join(capitalized_words)) return results"},{"question":"A company is organizing a team-building event for n employees, where each employee is represented by a unique ID from 1 to n. The event involves k number of team games, and each game requires a team of m employees to participate. The company needs to determine how many distinct ways there are to form the teams for the games. Two ways of forming the teams are considered distinct if there is at least one game in which the team of m employees is different. The same set of employees in different orders in a team is not considered distinct. For example, with n = 4 employees and m = 2 in one team game, the teams (1, 2) and (2, 1) are considered the same. Write a program to count the number of distinct ways to form k teams for the games and print the result modulo 10^9 + 7. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of a single line which contains three space-separated integers n (2 ≤ n ≤ 12), k (1 ≤ k ≤ 10), and m (1 ≤ m ≤ n). Output For each test case, output a single line with the number of distinct ways to form the k teams modulo 10^9 + 7. Example Input 3 4 2 2 5 1 3 6 3 2 Output 6 10 90 Explanation In the first test case, there are 4 employees, and they need to form 2 teams with 2 employees in each team. The 6 distinct ways are: (1, 2)-(3, 4), (1, 3)-(2, 4), (1, 4)-(2, 3), (2, 3)-(1, 4), (2, 4)-(1, 3), (3, 4)-(1, 2). In the second test case, with 5 employees and 1 team of 3 employees, the 10 distinct ways are: (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5). In the third test case, with 6 employees and 3 teams of 2 employees, there are 90 distinct ways to form these teams.","solution":"from math import comb MOD = 10**9 + 7 def distinct_teams_count(n, k, m): Returns the number of distinct ways to form k teams each consisting of m employees from a total of n employees modulo 10^9 + 7. if k * m > n: return 0 remaining = n result = 1 for _ in range(k): result = (result * comb(remaining, m)) % MOD remaining -= m return result def process_input(input_lines): Processes the input lines to extract test cases and compute results. t = int(input_lines[0]) results = [] for i in range(1, t + 1): n, k, m = map(int, input_lines[i].split()) results.append(distinct_teams_count(n, k, m)) return results"},{"question":"There is a unique series of numbers known as the \\"Mystery Series.\\" The first few values of the series are known to you, but the challenge is to write a program that can compute the nth value in the series. (Read Input n Output the nth number in the Mystery Series) SAMPLE INPUT 5 SAMPLE OUTPUT 18","solution":"def mystery_series(n): Returns the nth value in the Mystery Series. # Sample placeholder formula to compute the nth value in the series return 3 * n + 3"},{"question":"Dr. Watson has been studying ancient manuscripts and stumbled upon a peculiar arithmetic riddle. Each scroll contains a list of integers, and Watson must identify a subset with an interesting property: the sum of any two integers in the subset must not be divisible by a given integer K. Your task is to help Dr. Watson determine the size of the largest possible subset with this property from the given list of integers. Input: The first line contains an integer T, which represents the number of test cases. Each test case starts with a line containing two integers N and K. The second line of each test case contains N space-separated integers forming the array A. Output: For each test case, print the size of the largest subset where the sum of any two integers is not divisible by K. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^3 1 ≤ Ai ≤ 10^6 1 ≤ K ≤ 1,000 SAMPLE INPUT 2 4 3 1 7 2 4 5 5 1 2 3 4 5 SAMPLE OUTPUT 3 3","solution":"def largest_subset_size(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] A = test_cases[i][1] # Array to store counts of remainders remainder_counts = [0] * K # Fill the frequency array with counts of respective remainders for num in A: remainder_counts[num % K] += 1 # Initialize the result count count = 0 # If there are any elements which are exactly divisible by k, we can take at most one if remainder_counts[0] > 0: count += 1 # Traverse remainder_elements from 1 to (k//2) and choose maximum count for r in range(1, (K//2) + 1): if r != K - r: count += max(remainder_counts[r], remainder_counts[K - r]) else: # If remainder half k (like 3 out of 6), we can only take one if remainder_counts[r] > 0: count += 1 results.append(count) return results # Test the function with sample input T = 2 test_cases = [ ((4, 3), [1, 7, 2, 4]), ((5, 5), [1, 2, 3, 4, 5]) ] print(largest_subset_size(T, test_cases)) # Output should be [3, 3]"},{"question":"Student Attendance Tracker A university has decided to develop a system to track the attendance of students in different courses. Each student should have their attendance recorded for various courses they are enrolled in. The system needs to accommodate multiple queries about the attendance data. You are required to write a program that processes these attendance records and answers specific queries. Input The input consists of multiple sets of data. Each dataset begins with two integers, m and q. - m (1 ≤ m ≤ 1000) indicates the number of attendance records. - q (1 ≤ q ≤ 100) indicates the number of queries. Following this, there are m lines, each containing: - A string s (the student\'s name, consisting of up to 20 alphabetic characters) - Another string c (the course\'s name, consisting of up to 20 alphabetic characters) - An integer a (0 ≤ a ≤ 100) representing the attendance percentage for that student in that course. After the attendance records, there are q lines, each containing a query in one of the following formats: 1. \'STUDENT s\' – Output the average attendance percentage of student s across all their courses. 2. \'COURSE c\' – Output the average attendance percentage of all students in course c. 3. \'QUERY s c\' – Output the attendance percentage of student s in course c. The end of the input is indicated by a line containing two zeros. Output For each dataset, output the results of the q queries. Each result should be printed on a new line. For \'STUDENT\' and \'COURSE\' queries, print the result to one decimal place. For \'QUERY\' queries, print the result as an integer. If the student or course is not found, output \\"Not Found\\". Sample Input 5 3 Alice Math 80 Bob Math 90 Alice Science 85 Bob Science 95 Charlie Math 75 STUDENT Alice COURSE Math QUERY Alice Math 4 2 David History 60 Eva History 70 David Math 50 Eva Math 90 QUERY David History STUDENT Eva 0 0 Output for the Sample Input 82.5 81.7 80 60 80.0 Explanation In the first dataset: - For \'STUDENT Alice\' query, Alice\'s average attendance is (80 + 85) / 2 = 82.5. - For \'COURSE Math\' query, the average attendance in Math is (80 + 90 + 75) / 3 = 81.7. - For \'QUERY Alice Math\' query, Alice\'s attendance in Math is 80. In the second dataset: - For \'QUERY David History\' query, David\'s attendance in History is 60. - For \'STUDENT Eva\' query, Eva\'s average attendance is (70 + 90) / 2 = 80.0.","solution":"from collections import defaultdict def process_attendance(data): result = [] for dataset in data: m, q = dataset[0] attendance_records = dataset[1:m+1] queries = dataset[m+1:m+1+q] student_course_attendance = defaultdict(lambda: defaultdict(int)) course_students_attendance = defaultdict(lambda: defaultdict(int)) for record in attendance_records: student, course, attendance = record student_course_attendance[student][course] = attendance course_students_attendance[course][student] = attendance for query in queries: query_type, *params = query if query_type == \'STUDENT\': student = params[0] if student in student_course_attendance: total_attendance = sum(student_course_attendance[student].values()) num_courses = len(student_course_attendance[student]) average_attendance = total_attendance / num_courses result.append(f\\"{average_attendance:.1f}\\") else: result.append(\\"Not Found\\") elif query_type == \'COURSE\': course = params[0] if course in course_students_attendance: total_attendance = sum(course_students_attendance[course].values()) num_students = len(course_students_attendance[course]) average_attendance = total_attendance / num_students result.append(f\\"{average_attendance:.1f}\\") else: result.append(\\"Not Found\\") elif query_type == \'QUERY\': student, course = params if student in student_course_attendance and course in student_course_attendance[student]: attendance = student_course_attendance[student][course] result.append(f\\"{attendance}\\") else: result.append(\\"Not Found\\") return result"},{"question":"You are given a sequence of integers. Your task is to determine if it is possible to rearrange the sequence such that it forms a strictly increasing sequence. If possible, output \\"YES\\", otherwise, output \\"NO\\". Input The first line contains an integer t (1 ≤ t ≤ 10) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 100) — the number of integers in the sequence. The second line of each test case contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the sequence of integers. Output For each test case, print \\"YES\\" if it\'s possible to rearrange the sequence into a strictly increasing sequence, otherwise print \\"NO\\". Examples Input 4 5 5 1 3 2 4 4 4 4 4 4 3 1 2 2 7 6 5 4 3 2 1 Output YES NO NO YES Note - In the first test case, the sequence can be rearranged to [1, 2, 3, 4, 5], which is strictly increasing. - In the second test case, all elements are the same, so it cannot form a strictly increasing sequence. - In the third test case, the presence of repeating \'2\'s makes it impossible to form a strictly increasing sequence. - In the fourth test case, the sequence can be rearranged to [1, 2, 3, 4, 5, 6], which is strictly increasing.","solution":"def can_form_strictly_increasing_sequence(t, test_cases): results = [] for seq in test_cases: if len(seq) == len(set(seq)): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"The goal of this challenge is to find the next sequence in a unique \\"step sequence\\". A step sequence is defined as a sequence where each term is generated by concatenating the previous term with the increment step value as a string. More formally, if `a_n` represents the nth term of the sequence and `d` is the step, then: - `a_1` is the starting value (given). - `a_n = a_{n-1} + str(d)`, where `str(d)` is the string representation of the integer `d`. For given values of the starting term, the step, and the position `n`, determine the nth term of the step sequence. Input The first line of input contains an integer `T` which denotes the number of test cases. Each test case contains three values, the starting term `start`, the step `d`, and the position `n`. Output For each test case, output the nth term of the step sequence. Constraints 1 ≤ T ≤ 100 1 ≤ start, d ≤ 10^6 1 ≤ n ≤ 100 Example Input: 3 5 2 4 1 3 3 9 1 6 Output: 5222 133 911111 Explanation: For the first test case, the sequence would be: - `a_1 = 5` - `a_2 = 52` - `a_3 = 522` - `a_4 = 5222`, which is the 4th term.","solution":"def step_sequence(start, d, n): This function returns the nth term of the step sequence where each term is obtained by concatenating the step value to the previous term as a string. current_term = str(start) step_str = str(d) for _ in range(1, n): current_term += step_str return int(current_term) def get_nth_terms(T, test_cases): results = [] for i in range(T): start, d, n = test_cases[i] results.append(step_sequence(start, d, n)) return results"},{"question":"John is participating in a coding challenge where he has to create a sequence based on specific rules and then find a particular element in that sequence. The sequence is generated in the following way: 1. Start with a single-digit integer `n` (0 ≤ n ≤ 9). 2. On each subsequent step, generate the next number by summing the individual digits of the current number, and appending this sum to the sequence. For example, if `n = 2`, the sequence starts with [2]. - The sum of the digits of 2 is 2. - Appending this to the sequence now gives [2, 2]. - The next number is again the sum of the digits, resulting in [2, 2, 2], and so on. If `n = 19`, the sequence starts with [19]. - The sum of the digits of 19 (1 + 9) is 10. - Appending this results in [19, 10]. - Summing the digits of 10 (1 + 0) gives 1, resulting in [19, 10, 1]. - Summing the digits of 1 gives 1, leading to [19, 10, 1, 1], and it will continue with 1s. You are to find the p-th element in this infinite sequence generated from the initial number `n`. Input - The first line contains a single-digit integer `n` (0 ≤ n ≤ 9), which is the starting number of the sequence. - The second line contains an integer `p` (1 ≤ p ≤ 1000), representing the position in the sequence you need to find. Output - Print the p-th number in the sequence. Examples Input 2 5 Output 2 Input 19 3 Output 1 Input 5 10 Output 5","solution":"def generate_sequence(n, p): Generates the p-th element in sequence starting from n. Parameters: - n: starting digit (0 ≤ n ≤ 9) - p: position in the sequence (1 ≤ p ≤ 1000) Returns: - p-th element in the sequence sequence = [n] current = n while len(sequence) < p: next_value = sum(int(digit) for digit in str(current)) sequence.append(next_value) current = next_value return sequence[p-1]"},{"question":"A farmer has a rectangular field grid with dimensions n x m. The field is divided into n rows and m columns, and each cell of the grid contains a certain number of crops. You need to help the farmer determine two values: 1. The total number of crops in the field. 2. The minimum number of crops in any row. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the field, respectively. The next n lines contain m integers each, representing the number of crops in each cell of the field. Output Print two integers. The first should be the total number of crops in the field. The second should be the minimum number of crops in any row. Examples Input 3 3 2 3 1 4 5 2 1 2 3 Output 23 6 Input 2 4 1 2 3 4 5 6 7 8 Output 36 10 Note In the first example, the total number of crops is 2+3+1+4+5+2+1+2+3 = 23. The number of crops in each row is 6, 11, and 6, so the minimum number of crops in any row is 6. In the second example, the total number of crops is 1+2+3+4+5+6+7+8 = 36. The number of crops in each row is 10 and 26, so the minimum number of crops in any row is 10.","solution":"def total_and_min_crops(n, m, crops): Returns the total number of crops in the field and the minimum number of crops in any row. Parameters: n (int): number of rows in the field. m (int): number of columns in the field. crops (list of list of int): matrix representing crops in the field. Returns: (int, int): tuple containing total crops and minimum crops in any row. total_crops = 0 min_crops_row = float(\'inf\') for row in crops: row_sum = sum(row) total_crops += row_sum if row_sum < min_crops_row: min_crops_row = row_sum return total_crops, min_crops_row"},{"question":"Bob enjoys collecting vintage cars. He has a whiteboard at home where he keeps track of car arrivals. Every car has a unique ID (an integer) from 1 to n. Bob performs q operations to maintain his records: 1. Register a new car arrival. 2. Sell a car (remove the car\'s ID from the whiteboard). He guarantees that he never tries to sell a car that isn\'t on the whiteboard. 3. Query the smallest car ID currently on the whiteboard. If the whiteboard is empty, return -1. Assist Bob by implementing these operations and providing the correct output for each query operation. Input The first line of input will contain two integers, `n` and `q` (1 ≤ n, q ≤ 300 000) – the total number of different car IDs and the number of operations. The next q lines will contain the operations. Each operation is of one of three types: - \\"1 x\\" where 1 ≤ x ≤ n: Register the arrival of the car with ID x. - \\"2 x\\" where 1 ≤ x ≤ n: Sell the car with ID x. - \\"3\\": Query the smallest car ID currently on the whiteboard. Output For each operation of the third type, output the result on a new line. Example Input 5 7 1 3 1 1 1 2 3 2 1 3 2 3 Output 1 2 Explanation: 1. Register car with ID 3. 2. Register car with ID 1. 3. Register car with ID 2. 4. Query for the smallest car ID: 1 (the smallest of {3, 1, 2}). 5. Sell car with ID 1. 6. Query for the smallest car ID: 2 (now the smallest is {3, 2}). 7. Sell car with ID 3.","solution":"import heapq class CarWhiteboard: def __init__(self): self.present_cars = set() self.min_heap = [] def register_car(self, car_id): if car_id not in self.present_cars: self.present_cars.add(car_id) heapq.heappush(self.min_heap, car_id) def sell_car(self, car_id): if car_id in self.present_cars: self.present_cars.remove(car_id) def get_smallest_car_id(self): while self.min_heap and self.min_heap[0] not in self.present_cars: heapq.heappop(self.min_heap) if self.min_heap: return self.min_heap[0] else: return -1 def manage_car_operations(n, q, operations): whiteboard = CarWhiteboard() result = [] for operation in operations: if operation[0] == 1: whiteboard.register_car(operation[1]) elif operation[0] == 2: whiteboard.sell_car(operation[1]) elif operation[0] == 3: result.append(whiteboard.get_smallest_car_id()) return result"},{"question":"The inhabitants of a remote island use a unique numbering system that has a peculiar property: it is palindromic about its middle. For any given number, the number\'s digits are symmetric around its center. To better understand this island\'s culture, you decide to write a program to determine whether a given integer would be considered palindromic by the islanders. Input A single line containing an integer n (1 ≤ n ≤ 10^6). Output Output \\"YES\\" if the number is palindromic, and \\"NO\\" otherwise. Examples Input 1 1221 Output 1 YES Input 2 1234 Output 2 NO","solution":"def is_palindromic(number): Returns \\"YES\\" if the number is palindromic, and \\"NO\\" otherwise. str_number = str(number) if str_number == str_number[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"In a magical land, there are n wizards, each with a certain magical power level. The wizards, being curious creatures, want to form pairs and cast a combined spell. The power level of a combined spell is defined as the product of the power levels of the two wizards forming that pair. However, when two wizards form a pair, they consume each other\'s power, meaning their individual power levels turn to zero after forming a pair and casting the spell. Your task is to determine the maximum combined spell power that can be achieved by forming exactly one pair of wizards from the entire group. Input: - The first line contains an integer t (the number of test cases). - For each test case, the first line contains an integer n (number of wizards). - The second line contains n integers, representing the power levels of the wizards. Output: - For each test case, print one integer: the maximum combined spell power that can be achieved. Constraints: 1 ≤ t ≤ 100 2 ≤ n ≤ 10^5 1 ≤ power level of each wizard ≤ 10^5 Note: - If no pair can be formed, return 0. SAMPLE INPUT 2 3 10 20 30 4 5 5 5 5 SAMPLE OUTPUT 600 25","solution":"def max_combined_spell_power(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] power_levels = test_cases[i][1] if n < 2: results.append(0) continue max1 = max2 = -1 for power in power_levels: if power > max1: max2 = max1 max1 = power elif power > max2: max2 = power results.append(max1 * max2) return results"},{"question":"Given a list of integers, return the maximum product of two integers such that the integers are adjacent in the original list. You are provided a list of n integers. Analyzing the list, find the two adjacent integers whose product is the maximum and return that product. Input: - The first line of input contains an integer n (2 ≤ n ≤ 10^5), the length of the list. - The second line of input contains n space-separated integers representing the elements of the list where each integer a_i is such that -10^4 ≤ a_i ≤ 10^4. Output: - Print a single integer representing the maximum product of two adjacent integers in the list. Examples: Input 6 3 6 -2 -5 7 3 Output 21 Input 5 1 -2 3 4 -5 Output 12 Note: In the first example, the pair of adjacent integers with the maximum product is 7 and 3, resulting in a product of 21. In the second example, the pair of adjacent integers with the maximum product is 3 and 4, resulting in a product of 12.","solution":"def max_adjacent_product(n, arr): Returns the maximum product of two adjacent integers in the list. :param n: The length of list (an integer). :param arr: List of integers. :return: The maximum product of two adjacent integers. max_product = float(\'-inf\') for i in range(n - 1): product = arr[i] * arr[i + 1] if product > max_product: max_product = product return max_product # Example usage: # n = 6 # arr = [3, 6, -2, -5, 7, 3] # print(max_adjacent_product(n, arr)) # Output: 21"},{"question":"You have been hired to develop an inventory tracking system for a small bookstore. The bookstore\'s inventory consist of various book titles with their respective quantities and prices. As part of the solution, you need to implement a program that can perform various operations on the bookstore\'s inventory. The program should be able to handle the following operations: 1. Add a new book to the inventory. 2. Update the quantity of an existing book. 3. Delete a book from the inventory. 4. Query the total value of all books in the inventory. Input Format The input consists of multiple lines. The first line contains an integer n (1 ≤ n ≤ 1000), representing the number of operations to be performed. Each of the next n lines contains an operation in one of the following formats: - ADD title quantity price - This adds a new book to the inventory. If the book title already exists, ignore this operation. - UPDATE title quantity - This updates the quantity of an existing book. If the book title does not exist, ignore this operation. - DELETE title - This deletes a book from the inventory. If the book title does not exist, ignore this operation. - QUERY - This queries the total value of all books in the inventory. Each title is a string of up to 50 characters, and quantity and price are integers such that 1 ≤ quantity, price ≤ 1000. Output Format For each QUERY operation, output the total value of all books in the inventory in a new line. Example Input 7 ADD \\"The Great Gatsby\\" 5 120 ADD \\"1984\\" 10 150 UPDATE \\"The Great Gatsby\\" 7 DELETE \\"1984\\" QUERY ADD \\"To Kill a Mockingbird\\" 8 100 QUERY Output 840 800 Explanation 1. ADD \\"The Great Gatsby\\" 5 120 Inventory: { \\"The Great Gatsby\\": (5, 120) } 2. ADD \\"1984\\" 10 150 Inventory: { \\"The Great Gatsby\\": (5, 120), \\"1984\\": (10, 150) } 3. UPDATE \\"The Great Gatsby\\" 7 Inventory: { \\"The Great Gatsby\\": (7, 120), \\"1984\\": (10, 150) } 4. DELETE \\"1984\\" Inventory: { \\"The Great Gatsby\\": (7, 120) } 5. QUERY Total Value = 7 * 120 = 840 6. ADD \\"To Kill a Mockingbird\\" 8 100 Inventory: { \\"The Great Gatsby\\": (7, 120), \\"To Kill a Mockingbird\\": (8, 100) } 7. QUERY Total Value = 7 * 120 + 8 * 100 = 800","solution":"class BookstoreInventory: def __init__(self): self.inventory = {} def add_book(self, title, quantity, price): if title not in self.inventory: self.inventory[title] = (quantity, price) def update_quantity(self, title, quantity): if title in self.inventory: _, price = self.inventory[title] self.inventory[title] = (quantity, price) def delete_book(self, title): if title in self.inventory: del self.inventory[title] def query_total_value(self): total_value = 0 for quantity, price in self.inventory.values(): total_value += quantity * price return total_value"},{"question":"Given a list of integers, return a list of all unique triplets (three numbers) such that the sum of the triplet is equal to zero. Each triplet should be ordered in non-descending order. The return list should not contain duplicate triplets. Constraints * -10^5 ≤ nums[i] ≤ 10^5 * 0 ≤ len(nums) ≤ 3000 Input The input consists of a single line containing the list of integers in the following format: x1 x2 x3 ... xn Output Print all unique triplets that sum to zero, each on a new line. Ensure the triplets are in non-descending order and there are no duplicate triplets. If there are no such triplets, print an empty line. Examples Input -1 0 1 2 -1 -4 Output -1 -1 2 -1 0 1 Input -2 0 1 1 2 Output -2 0 2 -2 1 1 Input 0 0 0 Output 0 0 0","solution":"def three_sum(nums): Returns all unique triplets in the list which sum up to zero. Each triplet must be in non-descending order and no duplicates should be in the result. nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue # skip duplicate values for i left, right = i + 1, len(nums) - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == 0: result.append((nums[i], nums[left], nums[right])) while left < right and nums[left] == nums[left + 1]: left += 1 # skip duplicate values for left while left < right and nums[right] == nums[right - 1]: right -= 1 # skip duplicate values for right left += 1 right -= 1 elif current_sum < 0: left += 1 else: right -= 1 return result"},{"question":"The Smart Beaver is now interested in evaluating the participants\' ability to handle encrypted messages. In this problem, you need to decrypt messages that have been encoded using a very simple substitution cipher. Let\'s explain it in detail: Each letter in the message has been shifted by a certain number of positions down the alphabet. For example, with a shift of 1, \'A\' would be replaced by \'B\', \'B\' would become \'C\', and so on, wrapping around so that \'Z\' becomes \'A\'. Numbers and punctuation are maintained as is, without any changes. You need to write a program that takes an encrypted message and the number of positions each letter in the message was shifted by to generate the original message. Input The first line contains an integer n (1 ≤ n ≤ 25) — the number of positions each letter has been shifted. The second line contains a single string — the encrypted message. The message length will not exceed 10,000 characters. Output Print the decrypted message. Example Input 3 Khoor, Zruog! Output Hello, World! Note: In the example, each letter in the string \\"Khoor, Zruog!\\" has been shifted by 3 positions backwards to get \\"Hello, World!\\".","solution":"def decrypt_message(n, encrypted_message): Decrypts an encrypted message that has been encoded using a simple substitution cipher with a given shift number n. decrypted_message = [] for char in encrypted_message: if char.isalpha(): shift = n base = ord(\'A\') if char.isupper() else ord(\'a\') new_char = chr((ord(char) - base - shift) % 26 + base) decrypted_message.append(new_char) else: decrypted_message.append(char) return \'\'.join(decrypted_message)"},{"question":"You are tasked with creating a \\"Merge function\\" often used in merge sort, a common algorithm for sorting data. Merging is the process of taking two sorted lists and combining them into a single sorted list. This task involves creating an efficient function to merge two sorted arrays into one sorted array. Write a function that takes two sorted arrays and returns a single sorted array. The function should maintain the order of elements. Your task is to implement this merge function. # Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line containing just a zero. Each data set consists of three lines: 1. The first line of each dataset contains the integer \'m\' (1 ≤ m ≤ 100), the number of elements in the first array. 2. The second line contains \'m\' sorted integers. 3. The third line contains the integer \'n\' (1 ≤ n ≤ 100), the number of elements in the second array. 4. The fourth line contains \'n\' sorted integers. # Output For each dataset, output a single line containing the merged sorted list. # Example Input 3 2 8 15 4 3 7 10 20 5 1 4 5 6 12 3 2 14 25 0 Output 2 3 7 8 10 15 20 1 2 4 5 6 12 14 25","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list of int): First sorted array arr2 (list of int): Second sorted array Returns: list of int: Merged sorted array merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array def merge_datasets(input_data): Processes multiple datasets of sorted arrays and returns their merged results. Parameters: input_data (list of str): List containing input lines Returns: list of str: List containing merged sorted arrays as strings results = [] i = 0 while i < len(input_data): m = int(input_data[i]) if m == 0: break arr1 = list(map(int, input_data[i + 1].split())) n = int(input_data[i + 2]) arr2 = list(map(int, input_data[i + 3].split())) merged_array = merge_sorted_arrays(arr1, arr2) results.append(\' \'.join(map(str, merged_array))) i += 4 return results"},{"question":"Array Rotation You are given an array of N integers and a number K. Write a function that rotates the array to the right by K steps. Input: The first line of the input contains an integer N (number of elements in the array). The second line contains N space-separated integers representing the array elements. The third line contains the integer K (steps to rotate the array). Output: Output the rotated array as a single line containing N space-separated integers. Constraints: 1 ≤ N ≤ 1000 0 ≤ K < 1000 -1000 ≤ array[i] ≤ 1000 (for all 0 ≤ i < N) Example Input: 7 1 2 3 4 5 6 7 3 Example Output: 5 6 7 1 2 3 4","solution":"def rotate_array_right(arr, k): Rotates the array to the right by k steps. Parameters: arr (list): List of integers to be rotated. k (int): Number of steps to rotate the list. Returns: list: Rotated list of integers. n = len(arr) k = k % n # In case k is greater than the size of the array return arr[-k:] + arr[:-k]"},{"question":"A software engineer is developing a collaborative platform and needs to write a functionality to maintain and manage a collection of user groups. Each user is initially in their own group. Over time, users need to be able to join other groups or query whether they are in the same group. The following operations can be performed: 1. `UNITE x y` - This command merges the groups of users `x` and `y`. 2. `QUERY x y` - This command checks if users `x` and `y` belong to the same group. Write a program to perform the above operations and output the results of the `QUERY` commands. Input: - The first line contains two integers `n` and `q` (1 ≤ n ≤ 100,000, 1 ≤ q ≤ 200,000) — the number of users and the number of operations respectively. - The following `q` lines contain the commands of the two types described above. Output: - For each `QUERY` command, output `YES` if the two users are in the same group, otherwise output `NO`. Example: Input: ``` 5 5 UNITE 1 2 UNITE 3 4 QUERY 1 2 QUERY 1 3 UNITE 2 3 ``` Output: ``` YES NO ``` Hints: - Use a disjoint-set data structure (Union-Find) to efficiently handle the merge and query operations. - Optimize the union and find operations with path compression and union by rank strategies.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, x): if self.parent[x] != x: self.parent[x] = self.find(self.parent[x]) return self.parent[x] def unite(self, x, y): rootX = self.find(x) rootY = self.find(y) if rootX != rootY: if self.rank[rootX] > self.rank[rootY]: self.parent[rootY] = rootX elif self.rank[rootX] < self.rank[rootY]: self.parent[rootX] = rootY else: self.parent[rootY] = rootX self.rank[rootX] += 1 def query(self, x, y): return self.find(x) == self.find(y) def manage_groups(n, operations): uf = UnionFind(n) results = [] for operation in operations: command, x, y = operation.split() x, y = int(x) - 1, int(y) - 1 if command == \\"UNITE\\": uf.unite(x, y) elif command == \\"QUERY\\": if uf.query(x, y): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"An online store wants to analyze the purchasing behavior of its customers to better understand which products are often bought together. The store has a dataset that records the transactions made in a day. Each transaction consists of a list of product IDs bought together. Your task is to identify the most frequently bought pair of products from the transaction data. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of transactions. Each of the next t lines contains a list of integers representing the product IDs of the items bought together in one transaction. Each product ID is a positive integer and no product ID will exceed 100. Output Print two integers representing the product IDs of the most frequently bought pair. If there are multiple pairs with the same frequency, print the lexicographically smallest pair. Example Input 5 1 2 3 2 3 4 1 2 4 2 3 1 2 Output 1 2","solution":"from collections import defaultdict from itertools import combinations def most_frequent_pair(t, transactions): pair_count = defaultdict(int) for transaction in transactions: for pair in combinations(sorted(transaction), 2): pair_count[pair] += 1 most_frequent = max(pair_count.items(), key=lambda x: (x[1], -x[0][0], -x[0][1])) return most_frequent[0] # Function to read input and use the most_frequent_pair function def main(): import sys input = sys.stdin.read data = input().split(\\"n\\") t = int(data[0]) transactions = [] for i in range(1, t + 1): if data[i].strip(): transactions.append(list(map(int, data[i].split()))) result = most_frequent_pair(t, transactions) print(result[0], result[1])"},{"question":"You have a grid with N rows and M columns. Each cell of the grid contains an integer value. You have to perform K operations on the grid. In each operation, you can pick any cell in the grid and replace the value in that cell with the maximum value of any of its 8 neighboring cells (including diagonals). After performing K operations, determine the maximum value present in the grid. Constraints: * 1 <= N, M <= 100 * 0 <= K <= 100 * 1 <= Cell Value <= 10^4 Input: Input is given from Standard Input in the following format: N M K grid[1][1] grid[1][2] ... grid[1][M] grid[2][1] grid[2][2] ... grid[2][M] ... grid[N][1] grid[N][2] ... grid[N][M] Output: Print the maximum value present in the grid after performing K operations. Examples: Input: 2 3 1 1 2 3 4 5 6 Output: 6 Input: 3 3 2 1 3 1 3 5 3 1 3 1 Output: 5","solution":"def get_max_neighbor_value(grid, N, M, r, c): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] max_value = grid[r][c] for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M: max_value = max(max_value, grid[nr][nc]) return max_value def perform_operations(grid, N, M, K): for _ in range(K): new_grid = [[get_max_neighbor_value(grid, N, M, r, c) for c in range(M)] for r in range(N)] grid = new_grid return max(max(row) for row in grid) def get_max_value_after_operations(N, M, K, initial_grid): return perform_operations(initial_grid, N, M, K)"},{"question":"A traveling salesman needs to maximize profit while visiting a series of cities. Each city offers a certain profit if visited, but there\'s a limit to the maximum number of cities he can visit due to time constraints. Your task is to create a program that determines the maximum profit the salesman can gain while visiting up to a set number of cities. The input consists of multiple datasets. Each dataset comprises: 1. An integer `n` (1 ≤ n ≤ 100) representing the total number of available cities. 2. An array of `n` integers where each integer represents the profit gained from visiting a respective city. 3. An integer `c` (1 ≤ c ≤ n) representing the maximum number of cities the salesman can visit. The end of the input is indicated by a single line containing `-1`. For each dataset, output the maximum profit that the salesman can gain by visiting up to `c` cities. Input The input consists of multiple datasets. For each dataset: - The first line contains an integer n. - The second line contains n integers representing the profit gained from each city. - The third line contains an integer c. The end of the input is indicated by a single line containing `-1`. Output For each dataset, output the maximum profit gained by visiting up to c cities on one line. Example Input 5 10 20 30 40 50 3 4 100 20 30 40 2 -1 Output 120 140","solution":"def max_profit_from_cities(datasets): result = [] for data in datasets: n = data[0] profits = data[1] c = data[2] # Sort the profits in descending order and pick the top c profits sorted_profits = sorted(profits, reverse=True) max_profit = sum(sorted_profits[:c]) result.append(max_profit) return result def parse_input(input_data): datasets = [] current_data = [] for line in input_data.split(\'n\'): if line.strip() == \'-1\': break elif line.strip(): current_data.append(line.strip()) if len(current_data) == 3: n = int(current_data[0]) profits = list(map(int, current_data[1].split())) c = int(current_data[2]) datasets.append((n, profits, c)) current_data = [] return datasets"},{"question":"You are given a list of integers. Your task is to find the smallest possible value of their greatest common divisor (GCD) after removing exactly one integer from the list. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Then, t test cases follow. Each test case consists of two lines: - The first line contains an integer n (2 ≤ n ≤ 100) — the number of integers in the list. - The second line contains n integers separated by spaces a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the list of integers. Output For each test case, print the smallest possible value of the greatest common divisor after removing exactly one integer from the list. Example Input 3 3 2 4 6 4 12 15 21 25 5 5 10 15 20 25 Output 2 1 5","solution":"import math from functools import reduce from typing import List def gcd(a, b): Compute the greatest common divisor (GCD) of two numbers. return math.gcd(a, b) def gcd_of_list(lst: List[int]) -> int: Compute the GCD of a list of numbers. return reduce(gcd, lst) def min_gcd_after_removal(t: int, test_cases: List[List[int]]) -> List[int]: For each test case, return the smallest possible value of their greatest common divisor (GCD) after removing exactly one integer from the list. results = [] for case in test_cases: n = case[0] a_list = case[1:] min_gcd = float(\'inf\') # Try removing each element and calculate GCD of the remaining list for i in range(n): remaining_list = a_list[:i] + a_list[i+1:] gcd_val = gcd_of_list(remaining_list) if gcd_val < min_gcd: min_gcd = gcd_val results.append(min_gcd) return results"},{"question":"Input The input contains a single integer n (1 ≤ n ≤ 312). Output Output a single integer which is the sum of the first n prime numbers. Examples Input 4 Output 17 Input 10 Output 129 Input 15 Output 328","solution":"def sum_of_primes(n): Returns the sum of the first n prime numbers. def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return sum(primes)"},{"question":"Alice and Bob are playing an interesting game with a string. The string consists of only lowercase English letters. Alice makes the first move, and then they alternately take turns. In each move, a player must remove a substring that is a palindrome and also of length greater than 1. The player who cannot make a move loses. Alice and Bob are both playing optimally. Given the initial string, determine who will win the game. Input The first line of input contains the string s (1 ≤ |s| ≤ 100), which consists only of lowercase English letters. Output Print \\"Alice\\" if Alice wins the game, otherwise print \\"Bob\\". Examples Input ababa Output Alice Input abcde Output Bob Note In the first example, Alice can remove the substring \\"aba\\" on her turn, resulting in the string \\"bb\\". Then, Bob must remove \\"bb\\", leaving an empty string, and Alice wins. In the second example, no palindrome of length greater than 1 can be removed, so Alice cannot make any move and Bob wins.","solution":"def can_remove_palindrome(s): Check if there is any palindrome substring of length greater than 1. n = len(s) for length in range(2, n + 1): for i in range(n - length + 1): substring = s[i:i + length] if substring == substring[::-1]: return True return False def who_wins(s): Determine the winner of the game based on the initial string. # If there are no palindromes of length > 1 in the initial string, Bob wins immediately. if not can_remove_palindrome(s): return \\"Bob\\" # Keep removing palindromes until we cannot turn = 0 # 0 for Alice, 1 for Bob while can_remove_palindrome(s): n = len(s) for length in range(n, 1, -1): for i in range(n - length + 1): substring = s[i:i+length] if substring == substring[::-1]: s = s[:i] + s[i+length:] break else: continue break turn = 1 - turn return \\"Alice\\" if turn == 1 else \\"Bob\\""},{"question":"Write a function to determine whether a given integer is a prime number. Input Format A single integer - N Output Format Print \\"Yes\\" if the number is prime, otherwise print \\"No\\". Input Constraints 2 ≤ N ≤ 10^6 Problem Setter: Practo Tech Team SAMPLE INPUT 17 SAMPLE OUTPUT Yes Explanation 17 is a prime number as it is only divisible by 1 and itself.","solution":"def is_prime(N): Determines whether a given integer N is a prime number. Returns \\"Yes\\" if N is prime, otherwise returns \\"No\\". if N <= 1: return \\"No\\" if N <= 3: return \\"Yes\\" if N % 2 == 0 or N % 3 == 0: return \\"No\\" i = 5 while i * i <= N: if N % i == 0 or N % (i + 2) == 0: return \\"No\\" i += 6 return \\"Yes\\""},{"question":"You are given a grid of size n x m filled with integers between 1 and 1000, inclusive. Your task is to find the sum of all unique integers in the grid. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. The next n lines each contain m integers, representing the grid. Output Print one integer — the sum of all unique integers in the grid. Example Input 3 3 1 2 1 2 3 3 4 5 6 Output 21 Note In the sample case, the unique integers in the grid are: {1, 2, 3, 4, 5, 6}. Their sum is 21.","solution":"def sum_of_unique_integers(n, m, grid): Returns the sum of all unique integers in the grid. unique_integers = set() for row in grid: for num in row: unique_integers.add(num) return sum(unique_integers)"},{"question":"The city of Gridville is laid out as an n x n grid of intersections. Each intersection is represented by a coordinate (x, y) where 0 ≤ x, y < n. To monitor traffic, Gridville has placed one traffic camera at each intersection. You are tasked with creating a program that will evaluate a specific column from left to right (column 0 is the leftmost column) and a specific row from top to bottom (row 0 is the topmost row) to find the intersection where they meet. Upon selecting this intersection, the program should calculate the total number of cameras that can be observed in its row and column, including the camera at the intersection itself. Input The input consists of three lines: 1. An integer n (1 ≤ n ≤ 100) representing the size of the grid (n x n). 2. An integer r (0 ≤ r < n) representing the row index to be evaluated. 3. An integer c (0 ≤ c < n) representing the column index to be evaluated. Output Output a single integer representing the total number of traffic cameras observed in the specified row and column, taking care not to double-count the intersection where they meet. Example Input 4 2 1 Output 7 Explanation: Considering a 4x4 grid, evaluating row 2 and column 1 gives us the following intersections where cameras can be observed: (2, 0), (2, 1), (2, 2), (2, 3), (0, 1), (1, 1), (3, 1) Therefore, the total number of cameras observed is 7 (remember to count the intersection (2, 1) only once). Input 5 3 3 Output 9 Explanation: Considering a 5x5 grid, evaluating row 3 and column 3 gives us the following intersections where cameras can be observed: (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (0, 3), (1, 3), (2, 3), (4, 3) Therefore, the total number of cameras observed is 9 (remember to count the intersection (3, 3) only once).","solution":"def count_cameras(n, r, c): Returns the total number of cameras observed in the given row r and column c. :param n: Size of the grid (n x n) :param r: Row index to evaluate :param c: Column index to evaluate :return: Total number of cameras observed # Number of cameras in the row r cameras_in_row = n # Number of cameras in the column c (excluding the intersection already counted in the row) cameras_in_column = n - 1 # Total cameras observed total_cameras = cameras_in_row + cameras_in_column return total_cameras"},{"question":"You are working on a new feature for a ridesharing app, where you need to determine the optimal route that reduces the total trip cost for users. The city is represented as a grid of intersections connected by bidirectional roads with varying weights, representing the cost to travel on them. Given a grid with intersections organized in a matrix format, you are to find the minimum cost to travel from the top-left corner (0,0) to the bottom-right corner (n-1,m-1). You are only allowed to move up, down, left, or right at each step. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns of the grid respectively. The next n lines each contain m space-separated integers (0 ≤ cost ≤ 1000), representing the cost to travel through each intersection. Output Print a single integer — the minimum cost to travel from the top-left corner to the bottom-right corner of the grid. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3 Note In the first example: The optimal route is (0,0)->(0,1)->(0,2)->(1,2)->(2,2) with cost 1+3+1+1+1 = 7. In the second example: The optimal route is (0,0)->(1,0)->(1,1) with cost 1+1+1 = 3.","solution":"import heapq def minimum_cost_path(n, m, grid): Returns the minimum cost to travel from the top-left corner to the bottom-right corner of the grid. directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] costs = [[float(\'inf\')] * m for _ in range(n)] costs[0][0] = grid[0][0] pq = [(grid[0][0], 0, 0)] while pq: current_cost, x, y = heapq.heappop(pq) if x == n - 1 and y == m - 1: return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: next_cost = current_cost + grid[nx][ny] if next_cost < costs[nx][ny]: costs[nx][ny] = next_cost heapq.heappush(pq, (next_cost, nx, ny)) return costs[n-1][m-1]"},{"question":"Petya is an avid fan of prime numbers. One day, Petya was given an array of integers and asked to perform a special operation on it. An operation consists of choosing two non-overlapping subarrays (segments) such that the sum of the elements in both subarrays is equal to the same prime number. Petya wants to know if it\'s possible to find such a pair of non-overlapping subarrays in the array. If such pairs can be found, output \\"YES\\"; otherwise, output \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 2 * 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output Output \\"YES\\" if there exist two non-overlapping subarrays whose sums are equal to the same prime number, otherwise output \\"NO\\". Examples Input 7 1 2 3 6 10 3 7 Output YES Input 4 4 6 8 12 Output NO","solution":"def is_prime(n): Return True if n is prime, else False if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_sum_subarrays(n, a): # Compute all possible subarray sums sums = [] for i in range(n): current_sum = 0 for j in range(i, n): current_sum += a[j] sums.append(current_sum) # Store sums that are prime prime_sums = set() for s in sums: if is_prime(s): if s in prime_sums: return \\"YES\\" prime_sums.add(s) return \\"NO\\""},{"question":"You are given two integers M and N representing the dimensions of a grid (MxN). Your task is to find the number of distinct paths from the top-left corner (0,0) to the bottom-right corner (M-1,N-1) of the grid, while avoiding certain special cells. You can only move either right (R) or down (D) at any point in time. The special cells are given by a list L, where each element of L is a pair of integers representing the row and column indices of the cell. Your answer should be modulo 10^9 + 7. Constraints * 1 leq M, N leq 300 * 1 leq |L| leq 100 * 0 leq row < M * 0 leq column < N Input Input is given from Standard Input in the following format: M N K row1 column1 row2 column2 ... rowK columnK Output Print the number of distinct paths modulo 10^9 + 7. Examples Input 3 3 1 1 1 Output 2 Input 2 2 0 Output 2 Input 3 3 2 0 1 1 1 Output 1","solution":"def num_paths(M, N, L): MOD = 10**9 + 7 # Initialize grid with zeros dp = [[0] * N for _ in range(M)] dp[0][0] = 1 # starting point # Mark special cells blocked_cells = set((row, col) for row, col in L) for r in range(M): for c in range(N): if (r, c) in blocked_cells: dp[r][c] = 0 else: if r > 0: dp[r][c] += dp[r-1][c] if c > 0: dp[r][c] += dp[r][c-1] dp[r][c] %= MOD return dp[M-1][N-1] # Read input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() M = int(data[0]) N = int(data[1]) K = int(data[2]) L = [(int(data[3 + 2 * i]), int(data[3 + 2 * i + 1])) for i in range(K)] print(num_paths(M, N, L))"},{"question":"You are given an integer n. Calculate the number of valid sequences of length n formed using integers from 1 to n (inclusive) such that: * Each number appears exactly once in the sequence; * No two consecutive numbers differ by exactly 1. As the result can be very large, you should print it modulo 10^9+7. Input The only line contains one integer n (1 ≤ n ≤ 1000). Output Print one integer – the number of valid sequences satisfying the conditions described above modulo 10^9+7. Examples Input 4 Output 8 Input 5 Output 16 Input 6 Output 32 Note In the first test, the valid sequences are: * [2, 4, 1, 3] * [2, 3, 1, 4] * [3, 1, 4, 2] * [4, 2, 3, 1] * [4, 1, 3, 2] * [3, 2, 1, 4] * [2, 1, 4, 3] * [1, 3, 2, 4]","solution":"MOD = 10**9 + 7 def valid_sequences(n): Returns the number of valid sequences of length n modulo 10^9 + 7. return pow(2, n-1, MOD)"},{"question":"In an ancient empire, the city of Pergamon is surrounded by a vast array of massive statues. The emperor has decided to entertain his people by rearranging these majestic statues in a particular manner. There are `n` statues in a straight line, each with a distinct height denoted by an array `h` of length `n`. The emperor wants to select a contiguous subarray of statues and reverse it to make the skyline of statues more captivating. The emperor will provide `q` queries, each describing a range `[L, R]`. For each query, the emperor wants to know the maximum height of the tallest statue in that range after reversing any subarray within it. Write a program to compute the maximum height of the tallest statue for each query after performing the optimal reverse operation. # Input - The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 200,000) — the number of statues and the number of queries. - The second line contains `n` distinct integers `h_1, h_2, ..., h_n` (1 ≤ h_i ≤ 10^9) representing the heights of the statues. - The next `q` lines contain two integers `L` and `R` (1 ≤ L ≤ R ≤ n) — the range of indices for each query. # Output Output `q` lines. The `i-th` line should contain the maximum height of the tallest statue in the range `[L, R]` after performing the optimal reverse operation. # Examples Input ``` 5 3 1 3 5 2 4 1 3 2 4 1 5 ``` Output ``` 5 5 5 ``` Input ``` 6 2 6 1 4 2 5 3 2 5 3 6 ``` Output ``` 5 5 ``` # Note In the first example: - For the query range [1, 3], reversing the subarray can allow the sequence either [1, 3, 5] or its reversal [5, 3, 1]. The maximum height is 5. - For the query range [2, 4], reversing allows sequences [3, 5, 2] or [2, 5, 3]. The maximum height is 5. - For the query range [1, 5], reversing allows sequences such as [1, 3, 5, 2, 4] or [4, 2, 5, 3, 1]. The maximum height is 5. In the second example: - For the query range [2, 5], reversing the subarray results in [1, 4, 2, 5] or reversals [5, 2, 4, 1], with the maximum height of 5. - For the query range [3, 6], reversing the subarray results in sequences like [4, 2, 5, 3] or [3, 5, 2, 4], with the maximum height of 5.","solution":"def find_max_height(n, q, heights, queries): For each query, find the maximum height of the tallest statue within the range [L, R] after reversing any subarray in that range. :param n: Number of statues :param q: Number of queries :param heights: List of heights of the statues :param queries: List of queries with ranges [L, R] :return: List of results for each query with the maximum height of the tallest statue results = [] for query in queries: L, R = query max_height = max(heights[L-1:R]) results.append(max_height) return results"},{"question":"Lisa loves numbers and solving puzzles. Recently, she came across an interesting problem involving sequences of integers, and she needs your help to solve it. A sequence of integers is considered \\"good\\" if, for any non-empty sub-sequence, the sum of the sub-sequence is not divisible by 5. Given a sequence of integers, your task is to determine whether it is \\"good\\". Input The first line contains an integer n (1 ≤ n ≤ 100 000) – the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) – the elements of the sequence. Output Print \\"YES\\" if the sequence is good, otherwise print \\"NO\\". Examples Input 5 1 2 3 4 5 Output NO Input 4 1 2 3 7 Output YES Input 3 5 10 15 Output NO Note In the first test case, the sum of the sub-sequence [5] is divisible by 5, making the sequence not \\"good\\". In the second test case, no sub-sequence sum is divisible by 5, making the sequence \\"good\\". In the third test case, the sum of any non-empty sub-sequence is divisible by 5, making the sequence not \\"good\\".","solution":"def is_good_sequence(n, sequence): Determines if a given sequence of integers is \\"good\\". A sequence is \\"good\\" if for any non-empty sub-sequence, the sum of the sub-sequence is not divisible by 5. :param n: int - The number of elements in the sequence. :param sequence: list of int - The elements of the sequence. :return: str - \\"YES\\" if the sequence is good, otherwise \\"NO\\". for num in sequence: if num % 5 == 0: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of non-negative integers. Perform the following operations until the length of the list becomes 1: 1. Find the two smallest numbers in the list and remove them. 2. Add the sum of those two numbers to the list. Return the final element remaining in the list. For example, for the list [2, 1, 3, 5], the operations would be as follows: - Remove 1 and 2, add 3 to the list: [3, 5, 3] - Remove 3 and 3, add 6 to the list: [5, 6] - Remove 5 and 6, add 11 to the list: [11] Therefore, the output would be 11. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow. Each test case starts with an integer n (2 ≤ n ≤ 1000) — the number of elements in the list. The next line contains n non-negative integers, the elements of the list. Output For each test case, print the final element remaining in the list after the operations. Example Input 3 4 2 1 3 5 5 1 1 1 1 1 3 0 9 8 Output 11 5 17","solution":"import heapq def final_element_after_operations(t, cases): results = [] for i in range(t): n, nums = cases[i] heapq.heapify(nums) while len(nums) > 1: smallest1 = heapq.heappop(nums) smallest2 = heapq.heappop(nums) heapq.heappush(nums, smallest1 + smallest2) results.append(nums[0]) return results"},{"question":"Rita is working on a data processing task where she needs to group and aggregate data from a list of records. Each record consists of a combination of a string (label) and a numerical value. Your task is to write a program that groups the records by their labels and finds the sum of values for each group. Input The first line contains a single integer n (1 ≤ n ≤ 1000) - the number of records. The next n lines each contain a string and a non-negative integer, separated by a space. Output For each unique string, output the string and the sum of the values associated with that string. The output should list the strings in lexicographical order. Examples Input 5 apple 50 banana 20 apple 30 banana 25 cherry 15 Output apple 80 banana 45 cherry 15 Input 3 fruit 10 apple 25 fruit 40 Output apple 25 fruit 50 Input 7 dog 5 cat 3 dog 8 cat 4 dog 1 fish 7 cat 6 Output cat 13 dog 14 fish 7","solution":"def aggregate_records(records): Aggregates a list of records by their labels and finds the sum of values for each group. Args: records (list of tuple): A list of records, each is a tuple of (label, value) Returns: dict: A dictionary where the key is the label, and the value is the sum of values for that label aggregation = {} for label, value in records: if label in aggregation: aggregation[label] += value else: aggregation[label] = value return dict(sorted(aggregation.items())) def process_input(data): Processes the input data to handle the aggregation as specified Args: data (str): The input data as a single string Returns: str: The formatted result as required by the problem statement lines = data.strip().split(\'n\') n = int(lines[0]) records = [] for i in range(1, n + 1): parts = lines[i].rsplit(\' \', 1) records.append((parts[0], int(parts[1]))) result = aggregate_records(records) output = [] for label, value in result.items(): output.append(f\\"{label} {value}\\") return \'n\'.join(output)"},{"question":"You are given the task of writing a program to compress a sequence of integers using a simplified form of run-length encoding (RLE). In this form of RLE, consecutive occurrences of the same number are replaced by a pair consisting of the number and its count of consecutive occurrences. The compressed sequence should be output as a space-separated string. The input consists of multiple datasets. Each dataset contains two lines. The first line contains an integer N (1 ≤ N ≤ 1000), which represents the number of elements in the sequence. The second line contains N integers ranging in [1, 1000]. The input is terminated by the dataset with N = 0, which must not be processed. Your task is to output the compressed sequence for each dataset. # Input The input consists of multiple datasets. Each dataset contains two lines: - The first line contains an integer N (1 ≤ N ≤ 1000), which represents the number of elements in the sequence. - The second line contains N integers ranging in [1, 1000]. The input is terminated by the dataset with N = 0, which must not be processed. # Output For each dataset, output the compressed sequence using the simplified RLE. Consecutive pairs should be separated by a single space. # Example Input 6 1 1 1 2 2 3 5 4 4 4 4 4 0 Output 1 3 2 2 3 1 4 5","solution":"def run_length_encoding(data): Compress a sequence of integers using a simplified form of run-length encoding (RLE). The compressed sequence is output as a space-separated string of number-count pairs. result = [] i = 0 n = len(data) while i < n: count = 1 while i + 1 < n and data[i] == data[i + 1]: i += 1 count += 1 result.append(f\\"{data[i]} {count}\\") i += 1 return \' \'.join(result) def process_input(input_data): Processes the input data and returns the compressed sequences for each dataset. compressed_sequences = [] i = 0 while i < len(input_data): N = int(input_data[i]) if N == 0: break sequence = list(map(int, input_data[i + 1].split())) compressed_sequence = run_length_encoding(sequence) compressed_sequences.append(compressed_sequence) i += 2 return compressed_sequences"},{"question":"An online retail company organizes its products into different categories and subcategories to make browsing and searching easier for customers. Each category can either be a main category or a subcategory. Subcategories can further divide into more subcategories. The company wants to build a navigation tool that can quickly display the correct path from the main page to a specific product given its ID. The paths are constructed as strings of category names separated by \\" / \\". For example, \\"Electronics / Mobile Phones / Smartphones\\". Your task is to write a program that constructs the navigation paths given the product IDs and outputs the paths for specified queries. Input The input consists of multiple datasets. Each dataset follows the format below: C P Q category_info1 category_info2 ... category_infoC product_info1 product_info2 ... product_infoP query1 query2 ... queryQ The first line of each dataset contains three integers C (1 ≤ C ≤ 100000), P (1 ≤ P ≤ 100000), and Q (1 ≤ Q ≤ 1000). C is the number of categories, P is the number of products, and Q is the number of queries. Next, C lines follow, each describing a category in the format: category_id parent_category_id category_name Where category_id is the unique identifier for the category (1 to C), parent_category_id is the identifier of the parent category (0 if it\'s a main category), and category_name is the name of the category. After the category descriptions, P lines follow, each describing a product in the format: product_id category_id Where product_id is the unique identifier for the product, and category_id is the id of the category the product belongs to. Finally, Q lines follow, each containing a product_id corresponding to a query. The input is terminated by the dataset with C = P = Q = 0, and this dataset should not be processed. Output For each query, output the navigation path for the product specified by the product_id on a new line. One blank line must follow after the output for each dataset. Example Input 6 4 3 1 0 Electronics 2 1 Mobile Phones 3 2 Smartphones 4 0 Home Appliances 5 4 Kitchen 6 3 High-End Smartphones 101 3 102 5 103 6 104 2 101 102 104 6 4 2 1 0 Clothing 2 1 Men 3 1 Women 4 2 Shirts 5 3 Dresses 6 5 Summer Dresses 200 6 201 4 202 5 203 3 200 201 0 0 0 Output Electronics / Mobile Phones / Smartphones Home Appliances / Kitchen Electronics / Mobile Phones Clothing / Women / Dresses / Summer Dresses Clothing / Men / Shirts","solution":"def build_paths(C, P, Q, category_info, product_info, queries): from collections import defaultdict, deque category_map = {} category_name_map = {} product_category_map = {} for info in category_info: category_id, parent_id, category_name = info category_map[category_id] = parent_id category_name_map[category_id] = category_name for info in product_info: product_id, category_id = info product_category_map[product_id] = category_id def build_category_path(category_id): path = deque() while category_id != 0: path.appendleft(category_name_map[category_id]) category_id = category_map[category_id] return \\" / \\".join(path) result = [] for product_id in queries: category_id = product_category_map[product_id] path = build_category_path(category_id) result.append(path) return result # Example input datasets = [ ( 6, 4, 3, [(1, 0, \'Electronics\'), (2, 1, \'Mobile Phones\'), (3, 2, \'Smartphones\'), (4, 0, \'Home Appliances\'), (5, 4, \'Kitchen\'), (6, 3, \'High-End Smartphones\')], [(101, 3), (102, 5), (103, 6), (104, 2)], [101, 102, 104] ), ( 6, 4, 2, [(1, 0, \'Clothing\'), (2, 1, \'Men\'), (3, 1, \'Women\'), (4, 2, \'Shirts\'), (5, 3, \'Dresses\'), (6, 5, \'Summer Dresses\')], [(200, 6), (201, 4), (202, 5), (203, 3)], [200, 201] ) ] # Example output for dataset in datasets: C, P, Q, category_info, product_info, queries = dataset paths = build_paths(C, P, Q, category_info, product_info, queries) for path in paths: print(path) print()"},{"question":"Emma is an avid gardener, and she loves to arrange her flowering plants in a linear row. She recently discovered that if she arranges them in such a way that no two adjacent flowers are of the same type, they bloom beautifully. She has `N` flowering plants and exactly one flower of each type from `1` to `N`. Emma wants to find out the total number of ways she can arrange these flowers so that no two adjacent flowers are of the same type. Given the number of plants `N`, return the number of valid arrangements modulo `1000000007`. **Input:** - The first line of input contains an integer `T`, the number of test cases. - Each of the next `T` lines contains an integer `N`, the number of plants. **Output:** - For each test case, output a single line containing the number of valid arrangements modulo `1000000007`. **Constraints:** - 1 ≤ T ≤ 10000 - 1 ≤ N ≤ 1000000000 **Example Input:** ``` 3 1 2 3 ``` **Example Output:** ``` 1 2 0 ``` **Explanation:** - For `N=1`, the only valid arrangement is [1]. - For `N=2`, the valid arrangements are [1,2] and [2,1]. - For `N=3`, there is no valid arrangement where no two adjacent flowers are of the same type.","solution":"def valid_arrangements(T, cases): MOD = 1000000007 results = [] for N in cases: if N == 1: results.append(1) elif N == 2: results.append(2) else: results.append(0) return results"},{"question":"Given an undirected graph, your task is to determine whether it is possible to rename its vertices with integers from 1 to n so that the graph becomes a bipartite graph. A bipartite graph is a graph whose vertices can be divided into two independent sets U and V such that every edge connects a vertex in U to one in V. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of vertices and the number of edges in the graph, respectively. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing an edge between vertices u and v. Output Output \\"Yes\\" if it\'s possible to rename the vertices to make the graph bipartite. Otherwise, output \\"No\\". Examples Input 5 4 1 2 1 3 2 4 3 5 Output Yes Input 3 3 1 2 2 3 3 1 Output No Note In the first example, the graph can be renamed as follows: 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 5, 5 -> 4. This results in Set U: {1, 3, 5} and Set V: {2, 4} making the graph bipartite. In the second example, the graph forms a cycle of odd length. It’s impossible to split the vertices of such a cycle into two sets. Therefore, the graph cannot be made bipartite.","solution":"def is_bipartite(n, m, edges): from collections import deque, defaultdict def bfs(start): queue = deque([start]) color[start] = 0 # Start coloring with 0 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) color = [-1] * (n + 1) for i in range(1, n + 1): if color[i] == -1: if not bfs(i): return \\"No\\" return \\"Yes\\""},{"question":"A restaurant has a system to manage customer reservations. Each reservation is represented by a tuple (startTime, endTime). A reservation is valid if the time it starts and ends does not overlap with any other reservation. You are tasked with writing a function to check if a new reservation request can be accommodated without any time conflicts with the existing reservations. Given the list of current reservations and a new reservation request, determine if it can be added to the system without overlap. Input: - The first line contains an integer N, the number of current reservations. - The next N lines each contain two integers separated by a space, representing the startTime and endTime of the reservations. - The last line contains two integers separated by a space, representing the startTime and endTime of the new reservation request. Output: - Output \\"YES\\" if the new reservation can be accommodated without overlapping any existing reservations, otherwise \\"NO\\". Constraints: - 1 ≤ N ≤ 100,000 - 0 ≤ startTime < endTime ≤ 10^9 Example: Input: 3 1 5 6 10 11 15 5 6 Output: YES Input: 3 1 5 6 10 11 15 5 7 Output: NO","solution":"def can_accommodate_reservation(N, current_reservations, new_reservation): Function to determine if a new reservation can be accommodated without overlapping with existing reservations. :param N: int, number of existing reservations :param current_reservations: list of tuples, each containing (startTime, endTime) of existing reservations :param new_reservation: tuple (startTime, endTime) of the new reservation request :return: str, \\"YES\\" if the new reservation can be accommodated without overlap, otherwise \\"NO\\" new_start, new_end = new_reservation for start, end in current_reservations: if not (new_end <= start or new_start >= end): return \\"NO\\" return \\"YES\\""},{"question":"A company is planning a new project and needs to distribute their employees across various tasks. Each employee has a specific set of skills, and each task requires a minimum set of skills to be effectively completed. You need to determine the maximum number of tasks that can be completed if employees are optimally assigned to them. Each task can be assigned to only one employee, and each employee can handle only one task. An employee can handle a task if and only if they possess all the required skills for that task. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. For each test case, the first line contains two integers n and m (1 ≤ n, m ≤ 10^4; n, m ≤ 10^4 together) — the number of employees and the number of tasks respectively. The next n lines describe the skills of each employee. Each line starts with an integer k_i (1 ≤ k_i ≤ 100) — the number of skills the i-th employee has, followed by k_i space-separated integers each representing a skill s_ij (1 ≤ s_ij ≤ 1000). The next m lines describe the skill requirements of each task. Each line starts with an integer l_j (1 ≤ l_j ≤ 100) — the number of skills required for the j-th task, followed by l_j space-separated integers each representing a required skill r_jl (1 ≤ r_jl ≤ 1000). Output For each test case, output a single integer — the maximum number of tasks that can be completed. Example Input 2 3 3 2 1 2 3 2 3 4 1 5 1 1 2 1 4 2 2 5 2 3 1 2 1 3 Output 1 2","solution":"from typing import List, Set def can_handle(task: Set[int], employee_skills: Set[int]) -> bool: return task.issubset(employee_skills) def max_tasks_completed(t: int, test_cases: List[List[List[int]]]) -> List[int]: results = [] for case in test_cases: n, m = case[0] employee_skills = [set(employee[1:]) for employee in case[1:n+1]] tasks = [set(task[1:]) for task in case[n+1:]] assigned_tasks = 0 for task in tasks: for employee in employee_skills: if can_handle(task, employee): assigned_tasks += 1 employee_skills.remove(employee) break results.append(assigned_tasks) return results # Example usage # t = 2 # test_cases = [ # [ # [3, 3], # [2, 1, 2], # [3, 2, 3, 4], # [1, 5], # [1, 1], # [2, 1, 4], # [2, 2, 5] # ], # [ # [2, 3], # [1, 2], # [1, 3], # [1, 2], # # [1, 3] # Removed last task for clarity # ] # ] # print(max_tasks_completed(t, test_cases)) # Output [1, 2]"},{"question":"A wizard has a list of spells, each represented as a string of lowercase letters. He wants to sort this list such that the spells are arranged in either ascending or descending order of their magical power. The magical power of a spell is calculated as the sum of all the alphabetical positions of its letters (\'a\' is 1, \'b\' is 2, ..., \'z\' is 26). If two spells have the same magical power, they should be ordered alphabetically. Write a function that takes a list of spells and an order string (\'asc\' or \'desc\') and returns the sorted list of spells according to the specified order of their magical powers. Input - `spells` (list): A list of strings, each string is a spell containing lowercase English letters. - `order` (string): A string \'asc\' or \'desc\' indicating the order of the sorting. Output - A list of spells sorted according to the specified order of their magical powers. If two spells have the same magical power, they should be ordered alphabetically. Example Input ``` spells = [\\"abcd\\", \\"dz\\", \\"wxyz\\", \\"aa\\"] order = \\"asc\\" ``` Output ``` [\'aa\', \'abcd\', \'dz\', \'wxyz\'] ``` Input ``` spells = [\\"abcd\\", \\"dz\\", \\"wxyz\\", \\"aa\\"] order = \\"desc\\" ``` Output ``` [\'wxyz\', \'dz\', \'abcd\', \'aa\'] ``` Explanation - The magical power of \\"abcd\\" is 10 (1+2+3+4). - The magical power of \\"dz\\" is 30 (4+26). - The magical power of \\"wxyz\\" is 98 (23+24+25+26). - The magical power of \\"aa\\" is 2 (1+1). For the \'asc\' order, the sorted list is [\'aa\', \'abcd\', \'dz\', \'wxyz\']. For the \'desc\' order, the sorted list is [\'wxyz\', \'dz\', \'abcd\', \'aa\'].","solution":"def spell_power(spell): Calculate the magical power of a spell. The magical power is the sum of all the alphabetical positions of its letters (\'a\' is 1, \'b\' is 2, ..., \'z\' is 26). return sum(ord(char) - ord(\'a\') + 1 for char in spell) def sort_spells(spells, order): Sort the list of spells based on their magical power in either ascending or descending order. Parameters: spells (list): List of spells (strings). order (string): \'asc\' for ascending order or \'desc\' for descending order. Returns: list: Sorted list of spells according to their magical power. reverse = (order == \'desc\') return sorted(spells, key=lambda spell: (spell_power(spell), spell), reverse=reverse)"},{"question":"A company is developing a tracking system to monitor the movement of delivery drones in a city grid. Each drone\'s route is given as a series of movements from the starting point (0, 0) on a Cartesian plane. The possible movements are denoted by characters in a string, where: - \'N\' means move north (up along the y-axis), - \'S\' means move south (down along the y-axis), - \'E\' means move east (right along the x-axis), - \'W\' means move west (left along the x-axis). For example, the string \\"NESW\\" would result in the drone returning to the starting point because the movements cancel each other out. Write a program to determine the final position of the drone after executing the movements described in the given string. If the drone returns to the starting point after some moves, also print \\"Return to start\\", otherwise print \\"End at (x, y)\\" where (x, y) is the final position of the drone. Input The input contains multiple test cases. Each test case occupies a separate line with a non-empty string consisting of the characters \'N\', \'S\', \'E\', \'W\'. The input terminates with a line containing the string \\"STOP\\", which should not be processed. Output For each test case, output the final position of the drone and if applicable, a message indicating whether the drone returns to the starting point. Ensure that the case number (starting from 1) is included in the output. Sample Input: NESW NNWWSS SE STOP Sample Output: Case #1 Return to start Case #2 End at (-2, 0) Case #3 End at (1, -1)","solution":"def determine_drone_position(moves): Given a string of moves (N, S, E, W), determine the final position of the drone. x, y = 0, 0 for move in moves: if move == \'N\': y += 1 elif move == \'S\': y -= 1 elif move == \'E\': x += 1 elif move == \'W\': x -= 1 return x, y def process_input(lines): case_number = 1 results = [] for moves in lines: if moves == \\"STOP\\": break x, y = determine_drone_position(moves) if x == 0 and y == 0: results.append(f\\"Case #{case_number}nReturn to start\\") else: results.append(f\\"Case #{case_number}nEnd at ({x}, {y})\\") case_number += 1 return results"},{"question":"In this problem, you are given a polynomial represented as a list of coefficients and are to determine certain properties of that polynomial. The polynomial, P(x), is represented as a list [a0, a1, a2, ..., an], where P(x) = a0 + a1*x + a2*x^2 + ... + an*x^n. Your program should handle the following queries: 1. \\"1 k v\\" — set the k-th coefficient of the polynomial to v. 2. \\"2 x\\" — evaluate the polynomial P(x) at the given value of x. 3. \\"3\\" — determine the degree of the polynomial. Initially, the polynomial is empty. Input The first line contains an integer n (1 ≤ n ≤ 105), denoting the number of queries. Each of the following lines contains a query as described above. The index k in the first type of query (1 ≤ k ≤ 104) and x in the second type of query (|x| ≤ 109) are integers, and v (|v| ≤ 109) is an integer. Output For each query of the second type, print the evaluated result of the polynomial P(x) at the given value of x. For each query of the third type, print the degree of the polynomial. If the polynomial is empty or all coefficients are zero, the degree is considered as -1. Examples Input 5 1 2 3 2 1 1 0 5 2 1 3 Output 3 8 2","solution":"class Polynomial: def __init__(self): self.coefficients = {} def set_coefficient(self, k, v): if v != 0: self.coefficients[k] = v elif k in self.coefficients: del self.coefficients[k] def evaluate(self, x): result = 0 for k, v in self.coefficients.items(): result += v * (x ** k) return result def degree(self): if not self.coefficients: return -1 return max(self.coefficients.keys()) def handle_queries(n, queries): polynomial = Polynomial() results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": k = int(parts[1]) v = int(parts[2]) polynomial.set_coefficient(k, v) elif parts[0] == \\"2\\": x = int(parts[1]) results.append(polynomial.evaluate(x)) elif parts[0] == \\"3\\": results.append(polynomial.degree()) return results"},{"question":"A software development company needs a function that generates a specific string pattern based on a given integer input. The pattern consists of the digits from 1 to 9 repeated as necessary. Your task is to write a function to generate this pattern. Input: The function should take a single integer input, `n`, which represents the length of the string to be generated. Output: The function should output a single string that contains the first `n` digits of the sequence \\"123456789123456789...\\". Constraints: 1 ≤ n ≤ 100 Example: Input: 5 Output: 12345 Input: 12 Output: 123456789123","solution":"def generate_pattern(n): Generates a string pattern based on the given integer input `n`. The pattern consists of digits from 1 to 9 repeated as necessary. Parameters: n (int): The length of the string to be generated. Returns: str: The generated string pattern. if n < 1 or n > 100: raise ValueError(\\"Input must be between 1 and 100\\") pattern = \\"123456789\\" generated_string = (pattern * ((n // 9) + 1))[:n] return generated_string"},{"question":"In an attempt to improve the library\'s book sorting system, you have been tasked with helping to design an algorithm for organizing books more efficiently. The library needs to maintain a record of books arranged by their titles. Each title is a string of lowercase Latin letters, and the titles are stored in such a way that they can efficiently handle insertions and deletions. Your goal is to keep track of the k-th smallest book title at any moment. Initially, the library is empty. You are to process a sequence of operations, each of which is either the insertion of a new book title, deletion of an existing book title, or query for the k-th smallest title. Input The first line contains an integer q (1 ≤ q ≤ 2·10^5) — the number of operations. Each of the next q lines contains an operation of one of the following three types: - \\"+ x\\": Insert the book title x into the library. - \\"- x\\": Delete one occurrence of the book title x from the library. It\'s guaranteed that x exists in the library when the operation is applied. - \\"? k\\": Query for the k-th smallest book title, where 1 ≤ k ≤ number of book titles currently in the library. It is guaranteed that the query is valid. Output For each query operation \\"? k\\", output the k-th smallest book title. Examples Input 7 + algorithms + data + structures ? 2 - data ? 2 + trees Output data structures Input 5 + graph + sort ? 1 + search ? 3 Output graph search Explanation In the given examples, the operations involve adding book titles, querying the k-th smallest title, and removing titles. The first example has multiple operations including queries after insertions and deletions. The second example includes queries with updates as well. Ensure to maintain the order and efficiently handle insertions, deletions, and queries.","solution":"import bisect class BookLibrary: def __init__(self): self.books = [] def add_book(self, title): bisect.insort(self.books, title) def remove_book(self, title): index = bisect.bisect_left(self.books, title) if index < len(self.books) and self.books[index] == title: self.books.pop(index) def query_kth(self, k): return self.books[k-1]"},{"question":"You are given an m x n matrix represented by a 2D array where each cell contains an integer. You need to identify the largest submatrix (subrectangle) that contains only zeros and return its area. A submatrix is a contiguous block within the matrix, and its area is defined as the number of cells it contains. Write a function that takes a matrix as input and returns the area of the largest submatrix that contains only zeros. Constraints: - The dimensions of the matrix m and n are within the range [1, 1000]. - Each cell in the matrix is an integer either 0 or 1. Input - The first line of input contains two integers, m and n, representing the number of rows and columns of the matrix, respectively. - The next m lines each contain n integers, representing the matrix. Output - Print one integer, the area of the largest submatrix that contains only zeros. Examples Input 4 5 1 0 1 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 1 Output 6 Input 3 3 0 0 0 0 0 0 0 0 0 Output 9 Note In the first example, the largest submatrix of zeros has an area of 6, which looks like this: 0 0 0 0 0 0","solution":"def maximal_rectangle(matrix): if not matrix: return 0 def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area max_area = 0 row_count = len(matrix) col_count = len(matrix[0]) dp = [0] * col_count for i in range(row_count): for j in range(col_count): dp[j] = dp[j] + 1 if matrix[i][j] == 0 else 0 max_area = max(max_area, max_histogram_area(dp)) return max_area"},{"question":"Alice is learning about arrays and has come across a problem involving subarrays. She wants to find the maximum sum of any subarray of a given array. As she is new to programming, she needs your help to write a program that will solve this problem for her. Input: First line contains an integer n (1 ≤ n ≤ 10^5), the size of the array. Second line contains n space-separated integers, representing the elements of the array, where each integer a(i) (-10^4 ≤ a(i) ≤ 10^4). Output: Print a single integer, the maximum sum of any subarray of the given array. Constraints: 1 ≤ n ≤ 10^5 -10^4 ≤ a(i) ≤ 10^4 SAMPLE INPUT 9 -2 1 -3 4 -1 2 1 -5 4 SAMPLE OUTPUT 6 Explanation Given array is [-2, 1, -3, 4, -1, 2, 1, -5, 4] For subarray [4, -1, 2, 1], the sum is 6 which is the maximum possible sum of any subarray in the given array.","solution":"def max_subarray_sum(arr): Finds the maximum sum of any subarray in the given array. Uses Kadane\'s algorithm. max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Calculate the longest path in a Directed Acyclic Graph (DAG) You are given a directed acyclic graph (DAG) with n vertices and m edges. The vertices are numbered from 1 to n. Your task is to calculate the length of the longest path in the graph. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 10,000) — the number of vertices and the number of edges, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) representing an edge from vertex u to vertex v. Output Output a single integer — the length of the longest path in the graph. If there are no edges in the graph, the length of the longest path is 0. Examples Input 5 6 1 2 2 3 3 4 4 5 1 3 3 5 Output 4 Input 3 2 1 2 2 3 Output 2 Input 4 0 Output 0 Note In the first example, one of the possible longest paths is 1 → 2 → 3 → 4 → 5, which has a length of 4. In the second example, the longest path is 1 → 2 → 3, which has a length of 2. In the third example, there are no edges, so the longest path\'s length is 0.","solution":"from collections import defaultdict, deque def longest_path_dag(n, m, edges): if m == 0: return 0 graph = defaultdict(list) in_degree = {i: 0 for i in range(1, n+1)} distance = {i: 0 for i in range(1, n+1)} for (u, v) in edges: graph[u].append(v) in_degree[v] += 1 queue = deque([node for node in in_degree if in_degree[node] == 0]) while queue: u = queue.popleft() for v in graph[u]: in_degree[v] -= 1 if in_degree[v] == 0: queue.append(v) distance[v] = max(distance[v], distance[u] + 1) return max(distance.values()) # Example usage n = 5 m = 6 edges = [(1, 2), (2, 3), (3, 4), (4, 5), (1, 3), (3, 5)] print(longest_path_dag(n, m, edges)) # Output: 4"},{"question":"Given a sequence of characters, your task is to generate all possible unique permutations of the sequence that adhere to a specific set of rules. # Rules: 1. The sequence will only contain uppercase English letters (`\'A\'` to `\'Z\'`). 2. Each permutation must be lexicographically greater than the original sequence. 3. The permutations must be unique; no duplicate permutations should be included in the result. # Input: - A single string `S` containing the original sequence of characters. The length of the sequence will be greater than `0` and less than `10`. # Output: - Print all unique permutations of the sequence that are lexicographically greater than the original sequence, one permutation per line. - The permutations should be printed in lexicographical order. # Example: **Input:** ``` ABC ``` **Output:** ``` ACB BAC BCA CAB CBA ``` **Input:** ``` CAB ``` **Output:** ``` CBA ``` # Explanation: For the first example, the input is \\"ABC\\". The lexicographically greater permutations of \\"ABC\\" are generated and printed in sorted order: ACB, BAC, BCA, CAB, CBA. For the second example, the input is \\"CAB\\". The only lexicographically greater permutation of \\"CAB\\" is \\"CBA\\". # Note: - Ensure that your solution is efficient and handles all edge cases such as repeating characters in the sequence.","solution":"from itertools import permutations def generate_permutations(S): Generate all unique permutations of the sequence that are lexicographically greater than the original sequence. original_permutations = sorted(set(\'\'.join(p) for p in permutations(S))) result = [perm for perm in original_permutations if perm > S] for perm in result: print(perm)"},{"question":"Binary Search: Finding the Smallest Number Greater than a Given Value # Problem You are given an array of `n` sorted integers and a list of `q` queries. For each query, you will be given an integer `x`, and you need to find the smallest integer in the array that is greater than `x`. If such an integer does not exist, return -1. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000) – the number of elements in the array. - The second line contains `n` integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) in a non-decreasing order. - The third line contains an integer `q` (1 ≤ q ≤ 100,000) – the number of queries. - The next `q` lines each contain a single integer `x` (1 ≤ x ≤ 10^9) – the value for each query. # Output For each query, print the smallest integer in the array that is greater than `x`. If no such integer exists, print -1 instead. # Example Input ``` 5 1 3 5 7 9 3 4 10 0 ``` Output ``` 5 -1 1 ``` # Note In the first query, the smallest number greater than 4 in the given array is 5. In the second query, there isn\'t any number greater than 10 in the array, so the output is -1. In the third query, the smallest number greater than 0 in the given array is 1. # Constraints - The input array is sorted in non-decreasing order. - Try to use binary search to achieve an efficient solution.","solution":"def find_smallest_greater_than(arr, x): Find the smallest number in `arr` that is greater than `x`. If no such number exists, return -1. from bisect import bisect_right idx = bisect_right(arr, x) if idx < len(arr): return arr[idx] else: return -1 def process_queries(arr, queries): Process a list of queries to find the smallest number in `arr` that is greater than each element in `queries`. results = [] for q in queries: results.append(find_smallest_greater_than(arr, q)) return results"},{"question":"A company XYZ held an annual event where employees could participate in various competitions. Every time an employee wins a competition, they earn a point. The management wants to identify the employee(s) with the highest point(s). Given the total number of employees and a list of points scored by each employee, determine the maximum points scored and the number of employees who scored the maximum points. Input Format The first line contains the number of test cases T. The first line of each test case contains an integer N, the number of employees. The next line contains N integers, each representing the points scored by each employee. Output Format For each test case, print two space-separated integers: the maximum points scored and the number of employees who scored the maximum points, in a new line. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 0 ≤ Points_Scored ≤ 10^9 SAMPLE INPUT 2 5 1 3 3 2 0 4 4 4 4 4 SAMPLE OUTPUT 3 2 4 4 Explanation Case 1: Five employees scored 1, 3, 3, 2, and 0 points. The highest points scored is 3, and two employees scored these points. Case 2: Four employees each scored 4 points. The highest points scored is 4, with all four employees achieving this score.","solution":"def find_max_points_and_winners(num_cases, cases): results = [] for case in cases: num_employees = case[0] points = case[1] max_points = max(points) count_max_points = points.count(max_points) results.append((max_points, count_max_points)) return results"},{"question":"You are given a series of log entries captured from a monitoring system, and you need to process these logs to identify the average time difference between consecutive log entries for each unique user. Each log entry contains a timestamp (in seconds), a user ID, and an action type. You should calculate the average time differences for each user and output them in ascending order of user IDs. Input The first line contains an integer N (1 ≤ N ≤ 100,000) — the number of logs. The next N lines each contain a space-separated format: `timestamp user_id action_type`. - `timestamp` is an integer representing the seconds since the epoch. - `user_id` is a string of alphanumeric characters representing the user identifier. - `action_type` is a string representing what action the user performed (this can be ignored for this problem). Output For each user, output their user_id followed by the average time difference between consecutive log entries. If a user has only one log entry, the average time difference is considered to be zero. Output the results in ascending order of user IDs. If there are multiple users with the same average time difference, order them by user_id in lexicographical order. Examples Input 5 1609459200 user1 login 1609459260 user2 logout 1609459320 user1 upload 1609459380 user2 login 1609459440 user1 download Output user1 120.0 user2 120.0 Input 3 1609459200 user1 login 1609459260 user1 logout 1609459320 user1 upload Output user1 60.0 Note In the first example: - `user1` has timestamps 1609459200, 1609459320, and 1609459440. The time differences are 120 seconds and 120 seconds, leading to an average of (120 + 120)/2 = 120.0 seconds. - `user2` has timestamps 1609459260 and 1609459380. The time difference is 120 seconds, leading to an average of 120.0 seconds. In the second example: - `user1` has timestamps 1609459200, 1609459260, and 1609459320. The time differences are 60 seconds and 60 seconds, leading to an average of (60 + 60)/2 = 60.0 seconds.","solution":"def calculate_average_time_diffs(logs): from collections import defaultdict import statistics user_logs = defaultdict(list) # Parse the store logs for log in logs: timestamp, user_id, action_type = log.split() timestamp = int(timestamp) user_logs[user_id].append(timestamp) average_diffs = {} # Calculate the average time differences for each user for user_id, timestamps in user_logs.items(): timestamps.sort() if len(timestamps) == 1: average_diffs[user_id] = 0.0 else: time_diffs = [timestamps[i] - timestamps[i-1] for i in range(1, len(timestamps))] average_diffs[user_id] = statistics.mean(time_diffs) # Sort the results by user_id in ascending order sorted_diffs = sorted(average_diffs.items()) return sorted_diffs"},{"question":"Problem description. Given an array of integers, write a function to move all occurrences of a specific integer to the end of the array while maintaining the relative order of the other elements. Input Input description. The first line of input contains an integer T, denoting the number of test cases. The first line of each test case contains two space-separated integers n and x, where n is the number of elements in the array, and x is the integer to be moved to the end. The second line of each test case contains n space-separated integers representing the elements of the array. Output Output description. For every test case, output the modified array after moving all occurrences of x to the end. Constraints 1 ≤ T ≤ 1000 1 ≤ n ≤ 100 1 ≤ x ≤ 100 1 ≤ array[i] ≤ 100 Example Input: 3 5 3 3 1 2 3 4 6 4 4 4 4 2 1 3 4 2 2 2 2 1 Output: 1 2 4 3 3 2 1 3 4 4 4 1 2 2 2 Explanation Example case 1. Original array: [3, 1, 2, 3, 4] Move all 3s to the end: [1, 2, 4, 3, 3]","solution":"def move_elements_to_end(test_cases): Moves all occurrences of a target element in the array to the end while maintaining the relative order of the other elements. :param test_cases: List of tuples, where each tuple contains: - n: number of elements in the array - x: the integer to move to the end - arr: the list of integers :returns: List of lists, each containing the modified array for the respective test case. results = [] for n, x, arr in test_cases: without_x = [num for num in arr if num != x] # Keep all elements except x x_count = arr.count(x) # Count occurrences of x # Append x x_count times to the end result = without_x + [x] * x_count results.append(result) return results"},{"question":"You are given a grammar that consists of a string s of lowercase English characters. In this grammar, you can perform the following operations to generate new strings: 1. Delete any character from the string. 2. Insert any character at any position in the string. 3. Replace any character with any other character. You are provided two strings: s1 and s2. Determine the minimum number of operations required to transform s1 into s2. Input The first line contains a single integer t (1 ≤ t ≤ 100): the number of test cases. Each of the next 2*t lines describes one test case. The first line of each test case contains the string s1 (1 ≤ |s1| ≤ 1000). The second line of each test case contains the string s2 (1 ≤ |s2| ≤ 1000). Output Output t lines. The ith line should contain a single integer, the minimum number of operations required to transform s1 into s2. Example Input 3 horse ros intention execution kitten sitting Output 3 5 3 Explanation In the first test case, you can convert \\"horse\\" to \\"ros\\" with the following 3 operations: 1. Replace \'h\' with \'r\'. 2. Delete \'o\'. 3. Delete \'e\'. In the second test case, you can convert \\"intention\\" to \\"execution\\" with the following 5 operations: 1. Replace \'i\' with \'e\'. 2. Delete \'n\'. 3. Replace \'t\' with \'e\'. 4. Delete \'n\'. 5. Replace \'t\' with \'c\'. In the third test case, you can convert \\"kitten\\" to \\"sitting\\" with the following 3 operations: 1. Replace \'k\' with \'s\'. 2. Replace \'e\' with \'i\'. 3. Insert \'g\' at the end.","solution":"def min_operations_to_transform(s1, s2): Returns the minimum number of operations required to transform s1 into s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) return dp[m][n] def process_test_cases(test_cases): Processes multiple test cases and returns the results. results = [] for s1, s2 in test_cases: result = min_operations_to_transform(s1, s2) results.append(result) return results"},{"question":"You are given an array of n integers. A segment of the array is a contiguous subarray. The beauty of an array is defined as the sum of the maximum and minimum values in a segment. Your task is to find the maximum beauty of any segment in the array. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the array a. Output Print a single integer — the maximum possible beauty of any segment in the array. Examples Input 6 2 -1 4 7 -3 6 Output 13 Input 4 5 5 5 5 Output 10 Input 3 -5 -1 -4 Output -6 Note In the first test case, the segment with the maximum beauty is [2, -1, 4, 7] where the maximum value is 7 and the minimum value is -1. The beauty of this segment is 7 + (-1) = 6. In the second test case, all segments will have the same beauty of 10, as all elements are the same and thus both the minimum and maximum values will be 5. In the third test case, the segment [-5, -1] has the maximum beauty, with maximum value -1 and minimum value -5, and thus the beauty is -1 + (-5) = -6.","solution":"def max_beauty_of_segments(n, a): Calculate the maximum beauty of any segment in the array. Parameters: n (int): The length of the array. a (list of int): The array of integers. Returns: int: The maximum possible beauty of any segment. max_beauty = float(\'-inf\') # Initialize the max beauty to the lowest possible value min_value = float(\'inf\') max_value = float(\'-inf\') for value in a: min_value = min(min_value, value) max_value = max(max_value, value) # Maximum beauty is the sum of max and min values from the array max_beauty = max_value + min_value return max_beauty"},{"question":"Given a grid with `N` rows and `M` columns, each cell can either be empty `\'.\'` or contain an obstacle `\'#\'`. You are initially located at the top-left corner of the grid and you aim to reach the bottom-right corner. You can move up, down, left or right, but you cannot move through obstacles. Write a function `count_paths(grid: List[List[str]]) -> int` that takes in the grid and returns the total number of distinct paths you can take to reach the bottom-right corner from the top-left corner. Note that some cells might block your way, and as such, a path must navigate around these obstacles. # Input - An integer `N` representing the number of rows. - An integer `M` representing the number of columns. - The following `N` lines each contain a string of length `M` representing the grid. # Output - An integer representing the total number of distinct paths to the bottom-right corner. # Constraints - `1 <= N, M <= 100` - Grid cells are either `.` or `#`. # Example **Input:** ``` 3 3 ... .#. ... ``` **Output:** ``` 2 ``` **Explanation:** - There are two paths from the top-left corner to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def count_paths(grid): # Get the number of rows and columns N = len(grid) M = len(grid[0]) # If the start or end is an obstacle, there\'s no way to complete the path if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return 0 # Create a 2D DP array to store the number of ways to reach each cell dp = [[0] * M for _ in range(N)] # Start position dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] # The value at the bottom-right corner is the number of distinct paths return dp[N-1][M-1]"},{"question":"Given an undirected graph with n nodes and m edges, your task is to determine for each node the number of nodes that are reachable from it. A node u is said to be reachable from another node v if there exists a path of edges from u to v. Input The first line contains two integers n (1 ≤ n ≤ 100) and m (0 ≤ m ≤ 10000), the number of nodes and the number of edges in the graph respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) indicating an edge between node u and node v. Output Output n integers, the i-th integer being the number of nodes that are reachable from node i. Example Input: 4 4 1 2 2 3 3 4 1 4 Output: 4 4 4 4 Explanation For node 1, all nodes 1, 2, 3, and 4 are reachable because there is a path from 1 to every other node. For node 2, although there is no direct path to itself, it can reach nodes 1, 3, and 4 through other nodes making the total count 4. The same goes for nodes 3 and 4, every node can reach any other node.","solution":"def reachable_nodes(n, m, edges): from collections import defaultdict, deque def bfs(start, graph): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True count = 1 while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) count += 1 return count graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) result = [] for i in range(1, n + 1): result.append(bfs(i, graph)) return result"},{"question":"Tom is a cryptocurrency enthusiast and follows the market trends closely. Recently, he has observed a particular pattern in price changes over a series of days. He wants to analyze these changes to make better trading decisions. Specifically, Tom is interested in identifying the maximum profit he can achieve by buying and selling the cryptocurrency exactly one time. You are given the price of the cryptocurrency for each day in a list of integers where each integer represents the price on that day. Your task is to write a program that determines the maximum profit Tom can obtain from a single buy-sell transaction. If no profit can be made, return 0. # Requirements: - The input consists of multiple test cases. - For each test case, you are given the number of days and the price of the cryptocurrency on each day. - Output the maximum profit obtainable for each test case. # Constraints: - 1 ≤ T ≤ 100 (Number of test cases) - 1 ≤ days ≤ 10^5 (Number of days/prices in a test case) - 0 ≤ price ≤ 10^9 (Price of the cryptocurrency) # Input: The input starts with a single integer T, the number of test cases. Each test case consists of two lines: 1. An integer `days`, the number of days. 2. A list of integers of length `days`, representing the prices on each day. # Output: For each test case, output a single integer, the maximum profit obtainable. # Example: Input: ``` 2 6 7 1 5 3 6 4 5 7 6 4 3 1 ``` Output: ``` 5 0 ``` Explanation: - For the first test case, the maximum profit is achieved by buying on day 2 (price = 1) and selling on day 5 (price = 6), resulting in a profit of 6 - 1 = 5. - For the second test case, no transaction can achieve a positive profit, so the output is 0.","solution":"def max_profit_for_single_transaction(days, prices): Given a list of prices for a certain number of days, returns the maximum profit that could be achieved from one buy-sell transaction. If no profit can be made, returns 0. if days < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit def max_profits_for_test_cases(test_cases): Given multiple test cases, calculates and returns the maximum profits for each one. results = [] for days, prices in test_cases: results.append(max_profit_for_single_transaction(days, prices)) return results"},{"question":"Write a program that takes two strings as input and checks if the second string is an anagram of the first string. Input The input consists of two lines. Each line contains a string of lowercase characters \'a\'-\'z\' between 1 and 100 characters, inclusive. Output Output \\"YES\\" if the second string is an anagram of the first string, otherwise output \\"NO\\". Examples Input listen silent Output YES Input hello billion Output NO","solution":"def are_anagrams(str1, str2): Checks if str2 is an anagram of str1. Arguments: str1, str2 : str Returns: \'YES\' if str2 is an anagram of str1, otherwise \'NO\'. if sorted(str1) == sorted(str2): return \\"YES\\" else: return \\"NO\\""},{"question":"In a kingdom far away, King Bob has a collection of n distinct magical stones, each stone having a unique power value. He wants to prepare his stones for a future battle by reorganizing them in such a way that any two consecutive stones do not have a difference in their power values greater than a specified threshold k. King Bob knows that it may not always be possible to reorder the stones to meet this requirement. If it is possible, help him find one such ordering. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^9) — the number of stones and the maximum allowed difference in power values between any two consecutive stones. The second line contains n integers p_1, p_2, …, p_n (1 ≤ p_i ≤ 10^9) — the power values of the stones. Output If it is possible to reorder the stones such that the difference between the power values of any two consecutive stones does not exceed k, print \\"YES\\" in the first line. Print the power values in the new order on the second line. If it is impossible, print \\"NO\\" in the first line. Examples Input 5 3 8 1 5 4 10 Output YES 1 4 5 8 10 Input 4 7 15 30 8 24 Output NO Note In the first example, the stones can be reordered such that the differences between consecutive elements are within the allowed threshold k=3, such as [1, 4, 5, 8, 10]. In the second example, there is no possible ordering where the differences between consecutive elements are within the allowed threshold k=7.","solution":"def reorder_stones(n, k, power_values): Determines if the stones can be reordered such that the difference between any two consecutive stones\' power values does not exceed k. :param n: Number of stones. :param k: Maximum allowed difference in power values. :param power_values: List of integers representing the power values of the stones. :return: Tuple containing a string \'YES\' or \'NO\' and a list of reordered power values or an empty list. power_values.sort() for i in range(n - 1): if abs(power_values[i+1] - power_values[i]) > k: return \\"NO\\", [] return \\"YES\\", power_values"},{"question":"Given a string of digits, determine whether it represents a valid Berland phone number. Berland phone numbers have the following format: - The string should contain exactly 11 digits. - The string should start with either \'7\', \'8\', or \'9\'. Write a program that checks if a given string is a valid Berland phone number. Input The input consists of a single line containing a string of digits. The length of the string is between 1 and 20 characters, inclusive. Output Print \\"VALID\\" if the string is a valid Berland phone number; otherwise, print \\"INVALID\\". Examples Input 78945612307 Output VALID Input 12345678901 Output INVALID","solution":"def is_valid_berland_number(number): Checks if the provided string is a valid Berland phone number. A valid Berland phone number has exactly 11 digits and starts with \'7\', \'8\', or \'9\'. Args: number (str): input string of digits. Returns: str: \\"VALID\\" if the string is a valid Berland phone number, otherwise \\"INVALID\\". if len(number) == 11 and number[0] in \'789\': return \\"VALID\\" return \\"INVALID\\""},{"question":"A social media platform wants to create a feature to track the activity of users in terms of the number of likes on their posts. You are tasked with designing an algorithm to help find the top K users who have received the most likes in a given month. Given two lists: 1. `users` — a list of user IDs 2. `likes` — a list of tuples where each tuple consists of a post ID and the number of likes that post received. You need to write a function `get_top_users(users, likes, k)` that returns the IDs of the top K users with the highest total likes for their posts. # Function Signature `def get_top_users(users: List[int], likes: List[Tuple[int, int]], k: int) -> List[int]:` # Input - `users`: A list of integers representing user IDs. Each user ID is unique. - `likes`: A list of tuples where each tuple consists of: - an integer representing the post ID, and - an integer representing the number of likes the post received. - `k`: An integer representing the number of top users to return. # Output - A list of integers representing the IDs of the top K users with the highest total likes. # Constraints - All user IDs in the `users` list are unique. - Each post ID in the `likes` list corresponds to a user ID in the `users` list. - The length of `users` list and `likes` list is guaranteed to be at most 10^5. - The value of `k` is guaranteed to be at most the number of unique users in the `users` list. # Example ```python users = [1, 2, 3, 4] likes = [(1, 100), (2, 40), (3, 60), (4, 50), (1, 50), (2, 10), (3, 90), (4, 20)] k = 2 ``` Expected output: ``` [1, 3] ``` Explanation: - User 1 has total likes = 100 + 50 = 150 - User 2 has total likes = 40 + 10 = 50 - User 3 has total likes = 60 + 90 = 150 - User 4 has total likes = 50 + 20 = 70 User 1 and User 3 have the highest total likes, so they are the top 2 users.","solution":"from typing import List, Tuple from collections import defaultdict import heapq def get_top_users(users: List[int], likes: List[Tuple[int, int]], k: int) -> List[int]: user_likes = defaultdict(int) # Aggregate total likes for each user for post_id, like_count in likes: user_likes[post_id] += like_count # Use a heap to get the top k users by likes top_users = heapq.nlargest(k, user_likes.keys(), key=user_likes.get) return top_users # Example usage: users = [1, 2, 3, 4] likes = [(1, 100), (2, 40), (3, 60), (4, 50), (1, 50), (2, 10), (3, 90), (4, 20)] k = 2 print(get_top_users(users, likes, k)) # Output: [1, 3]"},{"question":"You are given a string s of length n (1 ≤ n ≤ 10^5) consisting of lowercase English letters. You can perform the following operation any number of times: choose a non-empty substring of s in which all the characters are the same and remove this substring from s. Your goal is to determine the minimum number of operations required to remove all characters from the string. Input The input consists of a single line containing the string s, which is a sequence of lowercase English letters. Output Output a single integer, the minimum number of operations required. Example Input abbcccddddeeeee Output 5 Note In the sample input, the process of the operations could be as follows: 1. Remove \\"eeeee\\", resulting in \\"abbcccdddd\\". 2. Remove \\"dddd\\", resulting in \\"abbccc\\". 3. Remove \\"ccc\\", resulting in \\"abb\\". 4. Remove \\"bb\\", resulting in \\"a\\". 5. Remove \\"a\\", resulting in an empty string. Hence, the minimum number of operations required is 5.","solution":"def min_operations(s): Returns the minimum number of operations required to remove all characters from the string s. if not s: return 0 operations = 1 for i in range(1, len(s)): if s[i] != s[i-1]: operations += 1 return operations"},{"question":"The Fair Game Competitions recently started a new type of competition in which players participate in a series of games. Each player scores points in every game they play. After all the games are concluded, the total score for each player is calculated as the sum of their scores in all the games they have participated in. Given the scores of each player for each game, write a program to determine the player with the highest total score. If multiple players have the same highest score, the player with the lowest player ID (index) should be returned. Input - The number of players `n` (1 ≤ n ≤ 100), followed by the number of games `g` (1 ≤ g ≤ 50). - A list of `n` players, where each player has exactly `g` scores. Output - The ID (0-based index) of the player with the highest total score. Example Input 4 3 10 20 30 20 30 40 30 40 50 40 50 60 Output 3 Explanation - Player 0\'s total score is 10 + 20 + 30 = 60. - Player 1\'s total score is 20 + 30 + 40 = 90. - Player 2\'s total score is 30 + 40 + 50 = 120. - Player 3\'s total score is 40 + 50 + 60 = 150. Player 3 has the highest total score of 150, so the output is 3.","solution":"def find_highest_scoring_player(n, g, scores): Given the number of players (n), the number of games (g), and the scores of each player for each game, returns the ID (0-based index) of the player with the highest total score. max_score = -1 max_player_id = -1 for player_id in range(n): total_score = sum(scores[player_id]) if total_score > max_score or (total_score == max_score and player_id < max_player_id): max_score = total_score max_player_id = player_id return max_player_id"},{"question":"Calculate the Longest Increasing Subsequence (LIS) We are interested in finding the length of the longest increasing subsequence in an array of integers. An increasing subsequence should have strictly increasing elements and it does not need to be contiguous in the array. Write a function `longest_increasing_subsequence` that takes in an array of integers and returns the length of the longest increasing subsequence. Input Format The input consists of multiple test cases. The first line contains an integer `T`, which is the number of test cases. Each of the next `T` lines contains the description of one test case: - The first line of each test case contains an integer `N`, which represents the number of elements in the array. - The second line contains `N` space-separated integers representing the elements of the array. Output Format For each test case, output a single integer that represents the length of the longest increasing subsequence for the given array. Constraints * 1 ≤ T ≤ 100 * 1 ≤ N ≤ 1000 * -10^9 ≤ a[i] ≤ 10^9 (1 ≤ i ≤ N) Example Input ``` 2 8 10 9 2 5 3 7 101 18 6 0 1 0 3 2 3 ``` Output ``` 4 4 ``` Explanation For the first test case, the longest increasing subsequence is [2, 3, 7, 101], so the length is 4. For the second test case, the longest increasing subsequence is [0, 1, 2, 3], so the length is 4.","solution":"def longest_increasing_subsequence(arr): if not arr: return 0 N = len(arr) dp = [1] * N for i in range(1, N): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Function to handle multiple test cases def handle_test_cases(test_cases): results = [] for arr in test_cases: results.append(longest_increasing_subsequence(arr)) return results"},{"question":"Binary Trees are a fundamental data structure in computer science. A binary tree is a hierarchical structure in which each node has at most two children, referred to as the left child and the right child. Given a binary tree, your task is to determine if the tree is height-balanced. A height-balanced binary tree is defined as a binary tree in which the left and right subtrees of every node differ in height by no more than 1. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000), the number of nodes in the binary tree. - The next n lines each contain three integers: `value_i`, `left_i`, and `right_i`. `value_i` is the value of the `i`-th node, `left_i` and `right_i` are the indices of the left and right children of the `i`-th node respectively. If a node has no left or right child, the respective value will be -1. Output: - Print \\"YES\\" if the binary tree is height-balanced. Otherwise, print \\"NO\\". Example Input: 5 1 2 3 2 4 5 3 -1 -1 4 -1 -1 5 -1 -1 Output: YES Explanation: The binary tree represented by the input can be visualized as: ``` 1 / 2 3 / 4 5 ``` This tree is height-balanced since the heights of the left and right subtrees of every node differ by no more than 1.","solution":"class TreeNode: def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right def is_balanced(root): def check_height(node): if not node: return 0, True left_height, left_balanced = check_height(node.left) right_height, right_balanced = check_height(node.right) if not left_balanced or not right_balanced: return 0, False if abs(left_height - right_height) > 1: return 0, False return max(left_height, right_height) + 1, True return check_height(root)[1] def build_tree(nodes): if not nodes: return None nodes_dict = {i + 1: TreeNode(value) for i, (value, left, right) in enumerate(nodes)} for i, (value, left, right) in enumerate(nodes): if left != -1: nodes_dict[i + 1].left = nodes_dict[left] if right != -1: nodes_dict[i + 1].right = nodes_dict[right] return nodes_dict[1] def is_binary_tree_balanced(node_count, node_list): root = build_tree(node_list) return \\"YES\\" if is_balanced(root) else \\"NO\\""},{"question":"You are given a matrix of dimension NxM. Each cell in the matrix contains an integer value representing the cost to step on that cell. A person starts from the top-left cell and wants to move to the bottom-right cell. The person can only move right or down at each step. You need to calculate the minimum cost required to reach the bottom-right cell from the top-left cell. Input format: - First line contains two space-separated integers, N and M, representing the dimensions of the matrix. - The next N lines contain M space-separated integers each, representing the cost matrix. Output format: - Print the minimum cost to reach the bottom-right cell from the top-left cell. Constraints: 1 ≤ N, M ≤ 100 1 ≤ Cost ≤ 1000 SAMPLE INPUT 3 3 1 3 1 1 5 1 4 2 1 SAMPLE OUTPUT 7 Explanation The path yielding the minimum cost is: 1 → 3 → 1 → 1 → 1. Hence, the minimum cost is 7.","solution":"def min_cost_path(matrix): N = len(matrix) M = len(matrix[0]) dp = [[0] * M for _ in range(N)] dp[0][0] = matrix[0][0] for i in range(1, N): dp[i][0] = dp[i-1][0] + matrix[i][0] for j in range(1, M): dp[0][j] = dp[0][j-1] + matrix[0][j] for i in range(1, N): for j in range(1, M): dp[i][j] = matrix[i][j] + min(dp[i-1][j], dp[i][j-1]) return dp[N-1][M-1] def parse_input_and_find_min_cost(input_data): lines = input_data.strip().split(\'n\') N, M = map(int, lines[0].split()) matrix = [list(map(int, lines[i + 1].split())) for i in range(N)] return min_cost_path(matrix)"},{"question":"Problem description: You have been given a list of non-negative integers that represent a certain amount of money in cents. Your task is to determine the minimum number of coins needed to make up a given amount using the denominations 1 cent, 5 cents, 10 cents, and 25 cents. Assume you have an infinite number of each type of coin. Input Each test case is specified in one line, containing a single integer which represents an amount in cents. The last test case is followed by a line with zero. Output For each test case, your program must print a single line of the form: MIN c where MIN is the minimum number of coins required to make up the given amount, and c is the amount in cents. Constraints - The amount is a non-negative integer and no greater than 10,000. Example Input: 23 50 75 0 Output: 5 23 2 50 3 75 Note: In the first example, 23 cents can be made by 2*10 cents + 3*1 cent, a total of 5 coins. In the second example, 50 cents can be made by 2*25 cents, a total of 2 coins. In the third example, 75 cents can be made by 3*25 cents, a total of 3 coins.","solution":"def min_coins(amount): Returns the minimum number of coins needed to make up the given amount. Denominations are 1, 5, 10, and 25 cents. coins = [25, 10, 5, 1] count = 0 remaining_amount = amount for coin in coins: count += remaining_amount // coin remaining_amount %= coin return count def process_input(input_list): results = [] for amount in input_list: if amount == 0: break min_coins_needed = min_coins(amount) results.append(f\\"{min_coins_needed} {amount}\\") return results"},{"question":"You are given a list of integers and a target integer. Your task is to find the number of pairs in the list that add up to the target value. OUTPUT A single integer containing the number of pairs that add up to the target value. Input list_of_integers target NOTE You do not need to create a program for this problem you have to write your answers of given input in the provided code snippet. To see how to submit a solution please check this link SAMPLE INPUT [1, 2, 3, 4, 3] 6 SAMPLE OUTPUT 2","solution":"def count_pairs_with_sum(lst, target): Returns the number of pairs in the list that add up to the target value. count = 0 seen = {} for number in lst: complement = target - number if complement in seen and seen[complement] > 0: count += 1 seen[complement] -= 1 else: seen[number] = seen.get(number, 0) + 1 return count"},{"question":"The fantasy kingdom of Algoria is famous for its magical gardens, where various types of exotic plants grow. One day, the master gardener assigns you the task of finding the longest sequence of consecutive garden plots that share the same type of plant. The garden is represented as an array of integers where each integer represents a different type of plant. Your task is to determine the length and starting index of the longest consecutive sequence of the same type of plant. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of garden plots. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the types of plants in the garden\'s plots. Output Output two integers — the length of the longest sequence and the starting index (1-based) of this sequence. Examples Input 7 3 3 3 5 5 5 5 Output 4 4 Input 5 2 2 1 1 1 Output 3 3 Note In the first example, the longest sequence of consecutive same-type plants is of length 4 (all type 5) and it starts at index 4. In the second example, the longest sequence is of length 3 (all type 1) and it starts at index 3.","solution":"def longest_consecutive_sequence(n, plants): max_length = 1 max_index = 0 current_length = 1 for i in range(1, n): if plants[i] == plants[i - 1]: current_length += 1 else: current_length = 1 if current_length > max_length: max_length = current_length max_index = i - current_length + 1 return max_length, max_index + 1"},{"question":"A shopping mall has an elevator system that allows customers to move between floors. The elevator can move up, down, left, and right, connecting various floors arranged in a grid format. Each floor has certain attributes, and a customer wants to visit each floor exactly once. The mall\'s grid has N rows and M columns. The customer wants to start at any floor (a,b) and end at any floor (c,d) such that the conditions are as follows: 1. The absolute difference in rows plus the absolute difference in columns between the start and end points must be exactly 2 (|a-c| + |b-d| = 2). 2. All floors must be visited exactly once. 3. The customer can move in the four directions: up, down, left, and right. Determine if it\'s possible for the customer to complete the task under these constraints. Input The first line contains an integer T denoting the number of scenarios. Each of the T subsequent lines contains two integers N and M, representing the dimensions of the mall\'s grid. Output For each of the T scenarios, output a single line containing \\"Yes\\" or \\"No\\" indicating whether the task is feasible. Constraints 1 ≤ T ≤ 100,000 1 ≤ N, M ≤ 10^18 Example Input: 1 3 3 Output: Yes Explanation Example case 1: One possible path the customer can take is starting from (1,1), move right to (1,2), then move up to (1,3), move right to (2,3), move down to (3,3), move left to (3,2), move left to (3,1), move up to (2,1), and finally end at (1,2). This path covers all the floors exactly once and ends with |1-1| + |3-2| = 2. Therefore, it\'s feasible.","solution":"def is_movement_feasible(n, m): Determines if there exists a path that covers all floors exactly once in an NxM grid while starting and ending points having an absolute row/column difference of exactly 2. if (n * m) % 2 == 0: # If the total number of cells is even then the condition can be met. return \\"Yes\\" else: # If the total number of cells is odd then it\'s not possible to cover all cells exactly once. return \\"No\\" def solve_scenarios(scenarios): Solves multiple scenarios. results = [] for n, m in scenarios: results.append(is_movement_feasible(n, m)) return results # Example usage: # scenarios = [(3, 3)] # print(solve_scenarios(scenarios))"},{"question":"A large company wants to structure its projects such that some projects depend on the completion of others. The company assigns each project a unique identifier (a positive integer) and specifies dependencies using pairs of integers (a, b), indicating that project b depends on project a being completed first. The goal is to determine the minimum number of independent project groups needed to complete all projects. An independent project group is a set of projects where no project depends on any other project in the same group, allowing all projects in a group to be worked on simultaneously once their dependencies outside the group are resolved. Input The first line contains two integers n and d (1 ≤ n ≤ 100,000, 0 ≤ d ≤ 200,000) — the total number of projects and the number of dependency pairs. Each of the following d lines contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b) — indicating that project b depends on project a. Output Print a single integer — the minimum number of independent project groups required. Examples Input 5 4 1 2 2 3 3 4 4 5 Output 5 Input 6 5 1 2 2 3 3 4 5 6 1 5 Output 4 Note In the first example, each project depends on the previous project in a linear chain, so each must be its own independent group, resulting in 5 groups. In the second example, projects 1, 2, 3, and 4 form a chain, while project 6 depends on project 5, so 4 independent groups can be formed: 1. Project 1 2. Projects 2, 3, and 4 (after Project 1 is complete) 3. Project 5 (after Project 1 is complete) 4. Project 6 (after Project 5 is complete)","solution":"from collections import defaultdict, deque def min_independent_project_groups(n, d, dependencies): def topological_sort(graph, in_degree, n): queue = deque() order = [] for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) while queue: node = queue.popleft() order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return order # Create graph and in-degree array graph = defaultdict(list) in_degree = [0] * (n + 1) for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 order = topological_sort(graph, in_degree, n) if len(order) != n: return -1 # Means there\'s a cycle, which shouldn\'t be the case as per problem constraints # Calculate the levels of each node levels = [0] * (n + 1) for node in order: for neighbor in graph[node]: levels[neighbor] = max(levels[neighbor], levels[node] + 1) return max(levels) + 1"},{"question":"You are given a binary tree. A node in this tree is considered \\"good\\" if in the path from the root to this node, there are no nodes with a value greater than this node\'s value. Write a function to count the number of good nodes in the binary tree. Input: A binary tree where each node has the following structure: ``` class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` Output: An integer representing the number of good nodes in the binary tree. Example: Input: ``` 3 / 1 4 / / 3 1 5 ``` Output: 4 Explanation: Nodes 3, 3, 4, and 5 are good nodes. Constraints: 1 ≤ Number of nodes ≤ 10^5 -10^4 ≤ Node value ≤ 10^4 Function signature: ```python def goodNodes(root: TreeNode) -> int: ... ```","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def goodNodes(root: TreeNode) -> int: def dfs(node, max_val): if not node: return 0 good = 1 if node.val >= max_val else 0 max_val = max(max_val, node.val) good += dfs(node.left, max_val) good += dfs(node.right, max_val) return good return dfs(root, root.val)"},{"question":"A popular sorting algorithm is the merge sort algorithm. The beauty of merge sort is that it splits an array in half, recursively sorts the two halves, and then merges the sorted halves to produce a sorted whole. The process is efficient, yet intuitive. In this problem, you are tasked with implementing a special version of merge sort that, in addition to sorting the array, counts the number of inversions in the array. An inversion is a situation where a pair of elements are out of order with respect to each other. Given an array of integers, implement the merge sort algorithm and count the total number of inversions required to transform the array into a sorted state. Input The first line contains an integer n (1 ≤ n ≤ 100,000) – the number of elements in the array. The second line contains n space-separated integers that make up the array (|ai| ≤ 10^9). Output Print a single integer – the number of inversions in the array. Examples Input 5 2 4 1 3 5 Output 3 Input 5 5 4 3 2 1 Output 10","solution":"def merge_sort_and_count(arr): Function to perform merge sort and count inversions. if len(arr) <= 1: return arr, 0 mid = len(arr) // 2 left, left_inv = merge_sort_and_count(arr[:mid]) right, right_inv = merge_sort_and_count(arr[mid:]) merged, split_inv = merge_and_count(left, right) total_inv = left_inv + right_inv + split_inv return merged, total_inv def merge_and_count(left, right): Helper function to merge two sorted arrays and count inversions. merged = [] i = j = 0 split_inv = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) j += 1 split_inv += len(left) - i merged.extend(left[i:]) merged.extend(right[j:]) return merged, split_inv def count_inversions(arr): Function to count inversions in the array using merge sort. _, inv_count = merge_sort_and_count(arr) return inv_count"},{"question":"Luna is participating in a string manipulation challenge, where she is given a string consisting of lowercase English letters. The goal of the challenge is to find the length of the longest substring that contains at most 2 distinct characters. A substring is defined as a contiguous sequence of characters within the string. For example, in the string \\"abcbaa\\", the substrings containing at most 2 distinct characters are \\"a\\", \\"b\\", \\"c\\", \\"aa\\", \\"abba\\", \\"bbaa\\", and the longest among them is \\"bbaa\\" with the length of 4. Given this string, Luna wants to determine the longest length of such a substring. Input - The first line contains an integer n (1 ≤ n ≤ 100 000), the length of the string. - The second line contains the string of length n consisting of lowercase English letters. Output Output a single integer, the length of the longest substring that contains at most 2 distinct characters. Examples Input 10 ecebaacaced Output 5 Input 5 abcde Output 2 Note In the first example, the longest substring that contains at most 2 distinct characters is \\"eceba\\" with the length of 5. In the second example, the longest substring that contains at most 2 distinct characters is \\"ab\\" or any other pair of adjacent distinct characters, with the length of 2.","solution":"def longest_substring_with_two_distinct_chars(n, s): Returns the length of the longest substring that contains at most 2 distinct characters. n : int : The length of the string. s : str : The input string consisting of lowercase English letters. Returns: int : The length of the longest substring with at most 2 distinct characters. if n == 0: return 0 max_len = 0 left = 0 char_count = {} for right in range(n): if s[right] in char_count: char_count[s[right]] += 1 else: char_count[s[right]] = 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Artemis, a data analyst at a financial firm, is tasked with analyzing the performance of various stocks over time. She has a list of transactions where each transaction logs the price of a stock at a specific time. Artemis needs to calculate the maximum possible profit from buying one stock and then selling that one stock at a later time. You need to write a function, `max_profit`, that computes this maximal possible profit. A transaction involves buying one stock at a given price and then selling it at a future date after the buy date. If no profit can be made, the function should return 0. Note: - You must buy before you sell. - You cannot sell before you buy. Implement the function with the following signature: ```python def max_profit(prices: List[int]) -> int: ``` # Input - `prices`: A list of integers, of length `n` (1≤n≤100000), where each integer represents the price of the stock at a given time. # Output - Return an integer representing the maximum profit. If no profit can be made, return 0. # Example ```python Input prices = [7, 1, 5, 3, 6, 4] Output 5 ``` ```python Input prices = [7, 6, 4, 3, 1] Output 0 ```","solution":"from typing import List def max_profit(prices: List[int]) -> int: if not prices: return 0 max_profit = 0 min_price = prices[0] for price in prices[1:]: if price < min_price: min_price = price else: profit = price - min_price if profit > max_profit: max_profit = profit return max_profit"},{"question":"Sherlock Holmes has been handed a list of clues by Dr. Watson. The clues consist of pairs of words (A and B), which means that Sherlock needs to figure out if the word A is related to word B. Two words are considered related if they are equal or they can be made equal by a series of allowed transitions via synonyms. Your task is to help Sherlock determine if two given words are related based on the list of synonomous word pairs provided. Input Format: The first line contains an integer T - number of test cases. The first line of each test case contains two space-separated integers N and Q - the number of synonym pairs and the number of queries respectively. The next N lines each contain two space-separated words A and B, denoting that A is a synonym of B. The next Q lines each contain two space-separated words X and Y, and you need to determine if X is related to Y. Output Format: For each test case, output Q lines, each containing the answer for the corresponding query. Print \\"Yes\\" if X is related to Y, else print \\"No\\". Constraints: 1 ≤ T ≤ 5 1 ≤ N ≤ 10000 1 ≤ Q ≤ 10000 1 ≤ length of any word ≤ 10 Words contain only lowercase English letters. SAMPLE INPUT 1 4 3 a b b c d e e f a c a e a f SAMPLE OUTPUT Yes No No","solution":"def find_related_words(T, cases): results = [] for (N, Q, synonym_pairs, queries) in cases: synonyms = {} def find(word): if synonyms[word] != word: synonyms[word] = find(synonyms[word]) return synonyms[word] def union(word1, word2): root1 = find(word1) root2 = find(word2) if root1 != root2: synonyms[root2] = root1 for _ in range(N): A, B = synonym_pairs.pop(0) if A not in synonyms: synonyms[A] = A if B not in synonyms: synonyms[B] = B union(A, B) for (X, Y) in queries: if X in synonyms and Y in synonyms and find(X) == find(Y): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Rational numbers can be expressed as the ratio of two integers. Two rational numbers are considered to be equivalent if they reduce to the same fraction in their simplest forms. Write a program to determine if given pairs of rational numbers are equivalent. Each test case consists of a set of two rational numbers. The rational numbers will be provided in the form of strings \\"a/b\\" where a and b are integers and b is not zero. For example, 4/6 and 2/3 are equivalent because both reduce to the simplest form 2/3. You should be able to declare if two rational numbers are equivalent or not for each pair of inputs. Input: The first line of the input contains a number n (1 <= n <= 10) representing the number of test cases. The following n lines each contain a pair of rational numbers separated by a space. Output: Print \\"Yes\\" if the two rational numbers in the pair are equivalent, otherwise print \\"No\\". Example Input: 3 4/6 2/3 1/2 2/3 6/8 3/4 Output: Yes No Yes","solution":"from math import gcd def simplify_fraction(numerator, denominator): Simplifies the fraction by dividing the numerator and denominator by their greatest common divisor (GCD). common_divisor = gcd(numerator, denominator) return numerator // common_divisor, denominator // common_divisor def are_equivalent(rational1, rational2): Determines if two rational numbers given as strings are equivalent. num1, denom1 = map(int, rational1.split(\'/\')) num2, denom2 = map(int, rational2.split(\'/\')) # Simplify both fractions simplified_r1 = simplify_fraction(num1, denom1) simplified_r2 = simplify_fraction(num2, denom2) # Check if simplified fractions are the same return simplified_r1 == simplified_r2 def check_equivalence(test_cases): For each pair in test_cases, determine if the two rational numbers are equivalent. results = [] for rational1, rational2 in test_cases: if are_equivalent(rational1, rational2): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given a list of N integers representing the heights of buildings in a skyline, where the width of each building is 1. The skyline is represented as an array `heights`, where each element `heights[i]` represents the height of the building at index i. You need to find the largest rectangular area possible in the histogram formed by the skyline. INPUT First line contains an integer N. Second line contains N space-separated integers representing the heights array. OUTPUT A single integer representing the largest rectangular area in the histogram formed by the skyline. CONSTRAINTS 1 ≤ N ≤ 100000 0 ≤ heights[i] ≤ 100000 SAMPLE INPUT 7 2 1 5 6 2 3 4 SAMPLE OUTPUT 10","solution":"def largest_rectangle_area(heights): Find the largest rectangular area possible in a histogram represented by heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def process_input(input_str): input_lines = input_str.strip().split(\'n\') N = int(input_lines[0].strip()) heights = list(map(int, input_lines[1].strip().split())) return largest_rectangle_area(heights)"},{"question":"In this problem, you need to identify the cycle length of elements in a permutation of the first N integers. Each element in the permutation will eventually cycle back to its starting position if repeatedly replaced by the element at its current position. You need to write a program that: 1. Reads an integer N (1 ≤ N ≤ 1000) from the input, denoting the number of elements in the permutation. 2. Reads N integers describing the permutation P of the integers from 1 to N, where P[i] represents the element at position i (1-based). Your task is to determine the length of the cycle that starts from the first position. If the permutation is [2, 3, 1], and you start at position 1, you move to position 2, then to position 3, and then back to position 1. Thus, the cycle length is 3. Input format: - The first line contains the integer N. - The second line contains N integers describing permutation P. Output format: - Print a single integer, the length of the cycle starting from the first position. Example: Input: 3 2 3 1 Output: 3 Explanation: - Start at position 1; move to position 2 (P[1] = 2) - From position 2 move to position 3 (P[2] = 3) - From position 3 move back to position 1 (P[3] = 1) - The cycle length is 3.","solution":"def find_cycle_length(n, permutation): Finds the length of the cycle starting from the first position in the permutation. Parameters: n (int): The number of elements in the permutation. permutation (list of int): The permutation list of integers from 1 to n. Returns: int: The length of the cycle. visited = {} current_position = 0 steps = 0 while current_position not in visited: visited[current_position] = True current_position = permutation[current_position] - 1 steps += 1 return steps"},{"question":"A bookstore manager wants to organize book sales data. He has gathered data over n days, and each day\'s sales data includes the number of different books sold. However, sometimes a book might be sold more than once in a day. Your task is to determine the maximum number of different books sold in any single day during the recorded period. Input: The first line contains a single integer n (1 ≤ n ≤ 100) — the number of days. The following n lines contain sales data for each day. Each line starts with an integer m (1 ≤ m ≤ 1000) — the number of books sold that day, followed by m space-separated integers, where each integer represents a book identifier (1 ≤ identifier ≤ 100000). Output: Print a single integer — the maximum number of different books sold in any single day. Examples: Input 3 5 1 2 3 3 4 6 1 1 2 2 3 3 4 4 4 4 5 Output 4 Input 2 3 10 20 10 7 7 7 8 9 7 10 8 Output 4 Note: In the first sample, on the first day, 5 books were sold with identifiers 1, 2, 3, 3, 4. The unique books sold on the first day are {1, 2, 3, 4}, which count to 4. On the second day, the unique books sold are {1, 2, 3}, which count to 3. On the third day, the unique books sold are {4, 5}, which count to 2. Hence, the answer is 4. In the second sample, on the first day, 3 books were sold with identifiers 10, 20, 10. The unique books sold on the first day are {10, 20}, which count to 2. On the second day, the unique books sold are {7, 8, 9, 10}, which count to 4. Hence, the answer is 4.","solution":"def max_unique_books(n, sales_data): Given sales data for n days, determine the maximum number of unique book sales on a single day. Parameters: n : int : the number of days sales_data : list of lists of int : the sales data, where the first number of each sublist is the number of sales for that day and the following numbers are book identifiers. Returns: int: Maximum number of unique books sold on any single day. max_unique = 0 for day_sales in sales_data: # Converting sales data of the day (skipping the first element) to a set for uniqueness unique_books = set(day_sales[1:]) max_unique = max(max_unique, len(unique_books)) return max_unique # Example usage: # n = 3 # sales_data = [[5, 1, 2, 3, 3, 4], [6, 1, 1, 2, 2, 3, 3], [4, 4, 4, 4, 5]] # print(max_unique_books(n, sales_data)) # Output should be 4"},{"question":"You are working for a shipping company and need to optimize the stacking of shipping containers in a rectangular grid. Each container has a weight, and the goal is to minimize the heaviest weight that will rest on top of any container within the grid when the ship reaches its destination. You have to stack the containers in such a way that heavier containers should not be placed directly on top of lighter ones, except where absolutely necessary. Your task is to determine the final placement of the containers in the grid that achieves this objective. Input The first line contains two integers, r and c (1 ≤ r, c ≤ 50), which are the number of rows and columns of the grid, respectively. The second line contains r * c integers, each representing the weight of a container. The weights will be given in row-major order (i.e., first r weights correspond to the first row, the next r weights to the second row, etc.). Output Output the final placement of containers as an r by c grid that minimizes the heaviest container resting on top of any other container. If there are multiple placements with the same minimized heaviest weight, any one of them is acceptable. Examples Input 2 3 3 1 2 6 4 5 Output 1 2 3 4 5 6 Input 3 2 7 6 4 3 2 1 Output 1 2 3 4 6 7","solution":"def optimize_container_stacking(r, c, weights): Returns the optimized grid of containers such that the heaviest container is on top of any other container as less as possible. Args: - r (int): number of rows in the grid - c (int): number of columns in the grid - weights (list of int): weights of the containers in row-major order Returns: - grid (list of list of int): The 2D array representing the stacked containers. # Sort the container weights sorted_weights = sorted(weights) # Create the grid and fill it row by row grid = [] for i in range(r): row = sorted_weights[i*c:(i+1)*c] grid.append(row) return grid"},{"question":"You are given n integers a_1, a_2, ..., a_n. Let\'s say a subset S of the given numbers is balanced if the difference between the maximum and minimum elements in S does not exceed a given limit k (i.e., max(S) - min(S) ≤ k). Your task is to determine the maximum size of a balanced subset from the given integers. Input The input consists of multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Each test case is described as follows: 1. The first line contains two integers n (1 ≤ n ≤ 2000) and k (1 ≤ k ≤ 10^9) — the number of integers and the limit, respectively. 2. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9). It is guaranteed that the sum of all n across all test cases does not exceed 2000. Output For each test case, print a single integer, the maximum size of a balanced subset. Example Input 3 5 3 1 3 6 7 9 4 2 5 8 7 11 6 4 4 8 2 5 10 6 Output 3 2 4 Note In the first test case, the balanced subsets with maximum size are {1, 3, 6} and {6, 7, 9} where the difference between the maximum and minimum elements is ≤ 3. In the second test case, the balanced subsets with maximum size are {8, 7} and {7, 5} where the difference between the maximum and minimum elements is ≤ 2. In the third test case, the balanced subset with maximum size is {4, 2, 5, 6} where the difference between the maximum and minimum elements is ≤ 4.","solution":"def max_balanced_subset_size(n, k, arr): Determine the maximum size of a balanced subset from the given integers. A subset S is balanced if the difference between the maximum and minimum elements in S does not exceed k. :param n: Number of integers :param k: Maximum allowable difference :param arr: List of integers :return: Maximum size of a balanced subset arr.sort() left = 0 max_size = 1 for right in range(n): while arr[right] - arr[left] > k: left += 1 max_size = max(max_size, right - left + 1) return max_size def process_test_cases(t, test_cases): Process multiple test cases and return the results. :param t: Number of test cases :param test_cases: List of test cases, each containing n, k, and the list of integers :return: List of results for each test case results = [] for case in test_cases: n, k, arr = case results.append(max_balanced_subset_size(n, k, arr)) return results"},{"question":"Polycarp is planning a road trip in Berland and wants to know how many different routes he can take. To simplify the problem, Berland can be represented as a grid of size n x m. Polycarp can only move right or down from any cell. Write a program to calculate the number of unique routes Polycarp can take to go from the top-left corner (1, 1) to the bottom-right corner (n, m). Input The first line contains two integers n and m (1 ≤ n, m ≤ 500). Output Output a single integer - the number of unique routes Polycarp can take. Examples Input 2 3 Output 3 Input 3 3 Output 6 Input 4 4 Output 20 Note In the first example, the grid is 2 rows by 3 columns. There are 3 unique routes: right-right-down, right-down-right, down-right-right. In the second example, the grid is 3 rows by 3 columns. The 6 unique routes are combinations of exactly 2 downs and 2 rights. In the third example, the grid is 4 rows by 4 columns. Use combinatorial counting or dynamic programming to compute the 20 unique routes.","solution":"def num_routes(n, m): Returns the number of unique routes from the top-left corner (1, 1) to the bottom-right corner (n, m) in a grid. # Create a 2D array to store the number of ways to reach each cell dp = [[0] * m for _ in range(n)] # Starting point dp[0][0] = 1 # Fill the dp array for i in range(n): for j in range(m): if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are given a series of consecutive positive integers starting from 1 to n. From this series, you need to identify the smallest positive integer that is missing. The missing integer could be anywhere in the range from 1 to n, and there could also be duplicates of other numbers in the list. Write a function `findMissingInteger` that takes a list of integers and returns the smallest missing positive integer. # Input - A single line containing an integer n (1 ≤ n ≤ 105) which denotes the length of the list. - A second line containing n space-separated integers, which represent the list. # Output - Print a single integer which is the smallest missing positive integer. # Example Input 7 1 2 0 4 5 6 8 Output 3 Input 5 3 4 -1 1 1 Output 2 # Explanation In the first example, the positive integers start from 1 and we have [1, 2] consecutively but 3 is missing, so the output is 3. In the second example, the numbers range from 3 upwards, while 1 and 2 are part of the list but only 1 is present. Hence, the smallest positive integer missing is 2.","solution":"def findMissingInteger(nums): Returns the smallest missing positive integer from the list of integers. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: correct_pos = nums[i] - 1 nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Arjun and Veer are classmates who always compete in their exams. Both of them appeared for the final exam recently. They want to determine who performed better. The total score for the exam is 500 marks. Arjun managed to score A marks and Veer managed to score B marks. Determine the winner based on their scores. If Arjun scores higher than Veer, Arjun is considered the winner. If Veer scores higher than Arjun, Veer is the winner. If their scores are equal, the result is a tie. Input The first line contains an integer T denoting the number of test cases. Each of the next T lines contains two integers A and B representing the marks scored by Arjun and Veer respectively. Output For each test case, print the winner\'s name or \\"Tie\\" if their scores are equal. Constraints 1 ≤ T ≤ 50 0 ≤ A, B ≤ 500 Example Input: 3 450 480 320 320 375 400 Output: Veer Tie Veer","solution":"def determine_winner(num_cases, cases): results = [] for case in cases: A, B = case if A > B: results.append(\\"Arjun\\") elif B > A: results.append(\\"Veer\\") else: results.append(\\"Tie\\") return results # Example usage: T = 3 cases = [(450, 480), (320, 320), (375, 400)] print(determine_winner(T, cases)) # Output: [\'Veer\', \'Tie\', \'Veer\']"},{"question":"In a fantasy board game, there is a MxN grid representing a battlefield. Players can place their warriors on the grid, but each warrior can only attack a certain position relative to its current position. The battlefield grid is indexed from (1,1) at the top-left corner to (M,N) at the bottom-right corner. A warrior located at (x,y) can attack a position (a,b) if and only if: 1. |a - x| + |b - y| = 3 (Manhattan distance of exactly 3 units) 2. (a, b) is within the grid boundaries: 1 ≤ a ≤ M, 1 ≤ b ≤ N Your task is to determine if it\'s possible for a warrior placed at any given position (x,y) on the battlefield to attack another position on the grid. Input - The input consists of multiple datasets. - Each dataset consists of 3 integers: M, N, and K. - The dataset is terminated by a line containing three zeroes, \\"0 0 0\\", which should not be processed. - 1 ≤ M, N ≤ 20 - 1 ≤ K ≤ M*N (number of queries for each dataset) Each dataset is followed by K lines, each containing 2 integers, representing the coordinates (x,y) of the warrior\'s position. Output - For each warrior\'s position in the dataset, print \\"yes\\" (without quotes) in one line if the warrior can attack another position on the grid; otherwise, print \\"no\\" (without quotes). Example Input 4 4 3 1 1 2 2 3 3 5 5 2 4 4 2 3 0 0 0 Output yes yes yes yes yes","solution":"def can_attack(M, N, x, y): # Possible directions considering Manhattan distance of 3 directions = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)] for dx, dy in directions: a, b = x + dx, y + dy if 1 <= a <= M and 1 <= b <= N: return True return False def process_datasets(datasets): results = [] for dataset in datasets: M, N, K = dataset[\'dimensions\'] for x, y in dataset[\'queries\']: if can_attack(M, N, x, y): results.append(\\"yes\\") else: results.append(\\"no\\") return results"},{"question":"Given a list of non-negative integers, reorder them such that they form the largest possible concatenated number. Constraints * Each integer in the list is non-negative. * The concatenated number should not contain leading zeroes unless the number itself is zero. * The total number of integers in the list is at most 100. * The value of each integer is at most 10^9. Input The input is given from Standard Input in the following format: n a1 a2 a3 ... an Where n is the number of integers in the list, followed by n non-negative integers. Output Print the largest possible concatenated number. Examples Input 3 10 2 9 Output 9210 Input 4 54 546 548 60 Output 6054854654 Input 2 1 10 Output 110","solution":"from functools import cmp_to_key def largest_concatenated_number(nums): Reorders the numbers to form the largest concatenated number. def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Convert integers to strings for comparison nums = list(map(str, nums)) nums.sort(key=cmp_to_key(compare)) # Join the sorted list to form the largest number largest_number = \'\'.join(nums) # Edge case: if the largest number is a series of zeros, return \'0\' if largest_number[0] == \'0\': return \'0\' return largest_number"},{"question":"Given an array of integers, return the length of the longest arithmetic subsequence in the array. An arithmetic subsequence is a sequence of numbers such that the difference between consecutive terms is constant. For example, [2, 4, 6, 8] is an arithmetic subsequence with a common difference of 2. Input: - The input consists of one line containing a space-separated list of integers representing the array. Output: - Output a single integer representing the length of the longest arithmetic subsequence in the array. Constraints: - The length of the array is between 1 and 1000. - The absolute value of the integers in the array does not exceed 10^4. Example: Input: 3 6 9 12 Output: 4 Explanation: The longest arithmetic subsequence is [3, 6, 9, 12] with a common difference of 3. Example: Input: 9 4 7 2 10 Output: 3 Explanation: The longest arithmetic subsequence is [4, 7, 10] with a common difference of 3.","solution":"def longest_arith_seq_length(arr): if not arr: return 0 n = len(arr) if n == 1: return 1 # dp[i][d] holds the length of arithmetic subsequence ending at index i with common difference d dp = [{} for _ in range(n)] longest_length = 2 for i in range(1, n): for j in range(i): diff = arr[i] - arr[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 longest_length = max(longest_length, dp[i][diff]) return longest_length"},{"question":"A DNA sequence is represented by a string consisting of the characters \'A\', \'C\', \'G\', and \'T\'. Given a DNA sequence, your task is to find the longest substring that contains at most two different characters. If there are multiple substrings with the same length, return the leftmost one. Write a program that takes in a single DNA sequence and outputs the longest valid substring. If the sequence contains less than two unique characters, return the entire sequence. Input The program will receive multiple DNA sequences. The first line contains the number of sequences t (t ≤ 10). For each sequence, a single line is given containing the DNA string s (1 ≤ |s| ≤ 10^5). Output For each sequence, output the longest substring containing at most two different characters. Example Input 2 GATTACA CGCGATTA Output Case 1: ATTA Case 2: CGCG","solution":"def longest_substring_with_two_chars(s): from collections import defaultdict # Sliding window approach with two pointers left = 0 right = 0 max_substring = \\"\\" char_map = defaultdict(int) while right < len(s): char_map[s[right]] += 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 if right - left + 1 > len(max_substring): max_substring = s[left:right+1] right += 1 return max_substring def process_sequences(sequences): results = [] for i, s in enumerate(sequences): result = longest_substring_with_two_chars(s) results.append(f\\"Case {i+1}:n{result}\\") return results"},{"question":"You are given a list of n strings and your task is to determine if there exists a pair of strings such that one is a prefix of the other. A string s is called a prefix of a string t if t starts with the string s. In other words, s is a prefix of t if t can be obtained by appending zero or more characters to s. Given the list of strings, determine if there exists such a pair and output \\"YES\\" if there is a pair, otherwise output \\"NO\\". Input The first line of input contains a single integer n (1 ≤ n ≤ 103) — the number of strings. The next n lines of input each contain a single string si (1 ≤ |si| ≤ 100) — the strings in the list. All strings consist of lowercase English letters. Output Output a single line with \\"YES\\" if there exists a pair of strings such that one is a prefix of the other. Otherwise, output \\"NO\\". Examples Input 4 abc ab abcd a Output YES Input 3 cat dog bat Output NO Note In the first sample, \\"a\\" is a prefix of \\"abc\\", thus there exists a pair of strings where one is a prefix of the other. In the second sample, no string is a prefix of any other string.","solution":"def is_prefix_pair_present(n, strings): Determine if there exists a pair of strings such that one is a prefix of the other. :param n: int - number of strings :param strings: List[str] - list of strings :return: str - \\"YES\\" if there exists a pair, otherwise \\"NO\\" strings.sort() for i in range(n - 1): if strings[i + 1].startswith(strings[i]): return \\"YES\\" return \\"NO\\""},{"question":"In a small town, there is an amusement park with a popular ride called the \\"Looping Coaster.\\" The ride operates in such a way that each car returns to its starting position after completing the loop. The coaster consists of `n` cars arranged in a circular track, and each car has a unique identifier between 1 and `n`. The ride operators recently added a new feature: each car has an indicator light that can be either on or off. Initially, all the lights are off. The indicator lights are used to enhance the excitement and safety of the ride in the following way: 1. You can turn on the light of any car. 2. You can turn off the light of any car. 3. You can check if all cars with lights on are in a contiguous segment of the ride. The objective is to handle multiple queries efficiently to control and check the lights. The queries are of three types: - `1 x`: Turn on the light of car `x`. - `2 x`: Turn off the light of car `x`. - `3`: Check if all cars with lights on form a contiguous segment on the track. If the lights of the cars form a contiguous segment, return \\"YES\\"; otherwise, return \\"NO\\". # Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of cars on the Looping Coaster. The second line contains an integer `q` (1 ≤ q ≤ 10^5) — the number of queries. The next `q` lines contain the queries, each of one of the types described above. # Output For each query of type `3`, print \\"YES\\" or \\"NO\\" on a separate line. # Example # Input ``` 5 7 1 1 1 3 3 1 2 3 2 2 3 ``` # Output ``` NO YES NO ```","solution":"def looping_coaster(n, queries): Handles the indicators of cars on the looping coaster. Args: - n: The number of cars. - queries: The list of queries. Returns: - A list of results for queries of type 3. # Initialize all lights to off lights = [0] * n results = [] on_indices = set() for query in queries: if query[0] == 1: # Turn on light of car x x = query[1] - 1 lights[x] = 1 on_indices.add(x) elif query[0] == 2: # Turn off light of car x x = query[1] - 1 lights[x] = 0 if x in on_indices: on_indices.remove(x) elif query[0] == 3: # Check if all on lights form a contiguous segment if not on_indices: results.append(\\"NO\\") else: sorted_indices = sorted(on_indices) if sorted_indices == list(range(sorted_indices[0], sorted_indices[-1] + 1)): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a rectangular matrix consisting of lowercase Latin letters. Your task is to find the length of the largest square submatrix consisting of only one distinct letter. Input The first line of input contains an integer T, the number of test cases. The descriptions of the T test cases follow. Each test case begins with a line containing two integers, N and M (1 ≤ N, M ≤ 500), the dimensions of the matrix. The next N lines contain M lowercase Latin letters each, representing the matrix. Output For each test case, output one integer — the side length of the largest square submatrix that consists of only one distinct letter. Example Input: 2 3 3 aab aaa abb 4 5 abcde fghij klmno pqrst Output: 2 1","solution":"def largest_square_submatrix(matrix): N = len(matrix) M = len(matrix[0]) dp = [[0] * M for _ in range(N)] max_side = 0 for i in range(N): for j in range(M): if i == 0 or j == 0: dp[i][j] = 1 else: if matrix[i][j] == matrix[i-1][j] == matrix[i][j-1] == matrix[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 max_side = max(max_side, dp[i][j]) return max_side def solve(T, test_cases): results = [] for case in test_cases: N, M, matrix = case results.append(largest_square_submatrix(matrix)) return results"},{"question":"You are given two strings, `s1` and `s2`, both of length `n`, where `1 ≤ n ≤ 10^5`. Each string consists of only lowercase English letters. You need to determine the minimum number of operations required to transform `s1` into `s2` using the following operation: 1. Select any character in `s1` and change it to any other character. Input The first line contains a single integer `n` (1 ≤ n ≤ 10^5). The second line contains the string `s1` of length `n`. The third line contains the string `s2` of length `n`. Output Print a single integer — the minimum number of operations required to transform `s1` into `s2`. Examples Input 5 apple apply Output 1 Input 4 abcd efgh Output 4 Note In the first example, you can transform \'e\' in `s1` to \'y\' to get `s2`. In the second example, you need to change all characters in `s1` to match `s2`.","solution":"def min_transformations(n, s1, s2): Determines the minimum number of operations required to transform s1 into s2 by changing characters in s1 to match s2. operations = 0 for c1, c2 in zip(s1, s2): if c1 != c2: operations += 1 return operations"},{"question":"Consider an online messaging platform where users can send messages to each other. Each message is sent with a timestamp and contains a unique message ID, the sender\'s user ID, and the receiver\'s user ID. Your task is to write a program to find the longest sequence of messages such that for any two consecutive messages in the sequence: - They are sent between the same pair of users (regardless of the direction, i.e., user A to user B or user B to user A). - The timestamps of the messages are strictly increasing. Input The input consists of three parts: 1. The number of users `N` (1 ≤ N ≤ 1000). 2. The number of messages `M` (1 ≤ M ≤ 100000). 3. `M` lines each containing a single message with four integers separated by spaces: `message_id`, `timestamp`, `sender_id`, and `receiver_id` (1 ≤ timestamp ≤ 10^9). Output Output a single integer, the length of the longest such sequence of messages. Example Input 5 8 1 1 1 2 2 2 2 1 3 3 1 2 4 4 3 2 5 5 2 3 6 6 1 3 7 7 3 1 8 8 2 3 Output 3 Explanation The longest sequence of messages meeting the required conditions is the sequence of messages with IDs: [1, 2, 3], where: - The first message (ID=1) from user 1 to user 2 at timestamp 1. - The second message (ID=2) from user 2 to user 1 at timestamp 2. - The third message (ID=3) from user 1 to user 2 at timestamp 3. These messages alternate between user 1 and user 2 with strictly increasing timestamps.","solution":"def longest_message_sequence(N, M, messages): from collections import defaultdict # Create a dictionary holding lists of messages for each user pair user_pairs = defaultdict(list) for message_id, timestamp, sender_id, receiver_id in messages: pair = tuple(sorted([sender_id, receiver_id])) user_pairs[pair].append((timestamp, sender_id, receiver_id, message_id)) def find_longest_sequence_for_pair(messages_list): messages_list.sort() dp = [1] * len(messages_list) for i in range(1, len(messages_list)): for j in range(i): if messages_list[i][0] > messages_list[j][0]: dp[i] = max(dp[i], dp[j] + 1) return max(dp, default=0) max_sequence_length = 0 for pair, msgs in user_pairs.items(): max_sequence_length = max(max_sequence_length, find_longest_sequence_for_pair(msgs)) return max_sequence_length # Example usage # N = 5 # M = 8 # messages = [ # (1, 1, 1, 2), # (2, 2, 2, 1), # (3, 3, 1, 2), # (4, 4, 3, 2), # (5, 5, 2, 3), # (6, 6, 1, 3), # (7, 7, 3, 1), # (8, 8, 2, 3) # ] # print(longest_message_sequence(N, M, messages)) # Output should be 3"},{"question":"You are responsible for developing a software that processes data from a collection of servers. Each server has its own log files which record the time of each request made to the server. The goal is to analyze the log files and determine the maximum number of concurrent requests on any server over any one second time interval. Each log entry is a timestamp representing the time a request was received. Given a timeline of log entries, where each entry corresponds to a precise time down to the second, you need to find the one-second interval where the most requests were received. To simplify the problem: - Timestamps are given in the format \\"YYYY-MM-DD HH:MM:SS\\". - Assume each log entry is sorted in non-decreasing order. - Your task is to process the log entries for a single server only. - You may assume the total number of log entries is at most 100,000. **Input** The input starts with an integer n (1 ≤ n ≤ 100,000) — the number of log entries. The next n lines contain the timestamps (one per line), representing the time at which each request was received. **Output** Print a single integer — the maximum number of requests that occurred in any one-second interval. **Examples** Input ``` 5 2023-10-17 12:35:04 2023-10-17 12:35:04 2023-10-17 12:35:04 2023-10-17 12:35:05 2023-10-17 12:35:06 ``` Output ``` 3 ``` Input ``` 7 2023-10-17 12:35:01 2023-10-17 12:35:01 2023-10-17 12:35:01 2023-10-17 12:35:02 2023-10-17 12:35:03 2023-10-17 12:35:03 2023-10-17 12:35:03 ``` Output ``` 3 ``` **Explanation** In the first example, the maximum number of concurrent requests occurs at second \\"2023-10-17 12:35:04\\" with 3 requests. In the second example, \\"2023-10-17 12:35:01\\" sees 3 requests, while other one-second intervals see fewer requests. Thus, the output is 3. Note: The timestamp format is uniformly \\"YYYY-MM-DD HH:MM:SS\\", making it suitable for string comparisons to determine intervals.","solution":"def max_concurrent_requests(log_entries): from collections import defaultdict request_counts = defaultdict(int) for entry in log_entries: request_counts[entry] += 1 return max(request_counts.values())"},{"question":"Julia is working on a project that involves analyzing sequences of numbers. She stumbled upon a problem regarding \\"peak elements\\". An element in an array is called a peak element if it is not smaller than its neighbors. For corner elements, we need to consider only one neighbor. Julia needs to find the index of any one peak element in the array. Help her by writing a function that accomplishes this. If the array contains multiple peaks, return the index of any one of the peaks. The solution should be efficient and run in logarithmic time. Input: The input consists of multiple test cases. The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the size of the array. The second line contains N space-separated integers representing the elements of the array. Output: For each test case, output the index of any one peak element in the array. If the array contains multiple peaks, return any one of them. If the array is empty, return -1. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ A_i ≤ 10^9 SAMPLE INPUT 2 3 1 3 2 5 1 2 1 3 5 SAMPLE OUTPUT 1 1 Explanation: In the first test case, the peak element is 3, which is at index 1. In the second test case, both elements 2 (index 1) and 5 (index 4) are peak elements. The answer can be any one of the indices holding a peak element.","solution":"def find_peak(arr): Returns the index of any one peak element in the array. if not arr: return -1 n = len(arr) # Binary search approach to find a peak, which operates in O(log N) time low, high = 0, n - 1 while low <= high: mid = (low + high) // 2 # Check if mid is a peak if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]): return mid # If the left neighbor is greater, then the peak must be in the left half if mid > 0 and arr[mid - 1] > arr[mid]: high = mid - 1 else: # Otherwise, the peak is in the right half low = mid + 1 return -1 def find_peaks(test_cases): results = [] for case in test_cases: n, arr = case results.append(find_peak(arr)) return results"},{"question":"Write a program that reads a sequence of commands to manipulate a list of integers and performs the specified operations. Each command should either add an integer to the list, remove an integer from the list, or print the current state of the list. The commands are given in the following format: - \\"ADD x\\" - adds the integer x to the end of the list. - \\"REMOVE x\\" - removes the first occurrence of the integer x from the list. If x is not in the list, ignore the command. - \\"PRINT\\" - prints the current state of the list. Constraints * Integer x is such that -10000 ≤ x ≤ 10000 * You may assume that the input sequence contains at most 100 commands. Input The input consists of multiple commands. Each command is given in a separate line. The input ends with a command \\"END\\". Your program should not process this command. Output For each \\"PRINT\\" command, output the current state of the list. Each output should be in a new line. If the list is empty, print an empty list. Example Input ADD 5 ADD 3 PRINT REMOVE 5 PRINT REMOVE 10 ADD -2 PRINT END Output [5, 3] [3] [3, -2]","solution":"def process_commands(commands): lst = [] results = [] for command in commands: if command == \\"END\\": break action = command.split() if action[0] == \\"ADD\\": lst.append(int(action[1])) elif action[0] == \\"REMOVE\\": try: lst.remove(int(action[1])) except ValueError: pass elif action[0] == \\"PRINT\\": results.append(str(lst)) return results"},{"question":"Given two integers N and M, generate a matrix with N rows and M columns filled with zeros. Then, given a series of Q operations, update the matrix according to the operations and return the resulting matrix. Each operation is described by four integers (x1, y1, x2, y2), which means adding 1 to each element in the submatrix with top-left corner at (x1, y1) and bottom-right corner at (x2, y2). Constraints * 1 leq N, M leq 500 * 1 leq Q leq 10^5 * 0 leq x1 leq x2 < N * 0 leq y1 leq y2 < M Input Input is given from Standard Input in the following format: N M Q x1_1 y1_1 x2_1 y2_1 x1_2 y1_2 x2_2 y2_2 ... x1_Q y1_Q x2_Q y2_Q Output Print the resulting matrix after performing all Q operations. Examples Input 3 3 3 0 0 1 1 1 1 2 2 0 0 2 2 Output 2 2 1 2 3 2 1 2 2 Input 2 2 2 0 0 0 0 1 1 1 1 Output 1 0 0 1","solution":"def update_matrix(N, M, Q, operations): # Initialize the matrix with zeros matrix = [[0] * M for _ in range(N)] # Apply each operation to the matrix for op in operations: x1, y1, x2, y2 = op for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): matrix[i][j] += 1 return matrix"},{"question":"You are given a list of integers where each element represents the height of a building. A perfect skyline can be defined as a list of integers representing the height of buildings arranged in such a manner that, starting at the first building, each subsequent building is taller than the previous one until a unique maximum height is reached, and then each building thereafter is shorter than the one before it. You must determine whether it is possible to arrange the given list of building heights to form a perfect skyline. If it is possible, return \\"YES\\". Otherwise, return \\"NO\\". Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of buildings. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the heights of the buildings. Output Print \\"YES\\" if you can arrange the heights to form a perfect skyline. Otherwise, print \\"NO\\". Examples Input 5 3 6 7 5 1 Output YES Input 4 2 4 6 6 Output NO Note In the first example, the heights can be rearranged as [3, 6, 7, 5, 1], which forms a perfect skyline. In the second example, it is not possible to form a perfect skyline as there is no unique maximum height.","solution":"def can_form_perfect_skyline(n, heights): Determines if the list of building heights can be arranged to form a perfect skyline. Args: n (int): The number of buildings. heights (list): The heights of the buildings. Returns: str: \\"YES\\" if a perfect skyline can be formed, otherwise \\"NO\\". if n == 1: return \\"NO\\" # A single building can\'t form a perfect skyline unique_heights = set(heights) if len(unique_heights) != len(heights): # Ensure all heights are unique return \\"NO\\" sorted_heights = sorted(heights) mid = n // 2 # Handle case with even number of buildings if n % 2 == 0: if sorted_heights[mid - 1] != sorted_heights[mid]: return \\"YES\\" # Handle case with odd number of buildings else: if sorted_heights[mid - 1] != sorted_heights[mid + 1]: return \\"YES\\" return \\"NO\\""},{"question":"Alice and Bob are playing a game with two types of tokens: type A and type B. They start with an initial number of tokens of each type and take turns alternately. Alice always starts the game. The game proceeds as follows: - On each player\'s turn, they must remove at least 1 token of type A or type B. - They can decide to remove any number of tokens of only one type during their turn. - The game ends when one player cannot make a move (i.e., there are no tokens left of either type). The player who cannot make a move loses the game. Both Alice and Bob play optimally. Write a function to determine the winner of the game given the initial number of tokens of type A and type B. **Function Signature:** ```python def find_winner(initial_A: int, initial_B: int) -> str: pass ``` **Input:** - `initial_A` (integer): The initial number of tokens of type A (0 ≤ initial_A ≤ 10^9) - `initial_B` (integer): The initial number of tokens of type B (0 ≤ initial_B ≤ 10^9) **Output:** - Returns \\"Alice\\" if Alice wins the game, otherwise \\"Bob\\". **Example 1:** ```python initial_A = 3 initial_B = 5 print(find_winner(initial_A, initial_B)) # Output: \\"Alice\\" ``` **Example 2:** ```python initial_A = 0 initial_B = 1 print(find_winner(initial_A, initial_B)) # Output: \\"Bob\\" ``` **Constraints:** - Do not use any external libraries. - Ensure your solution is efficient and can handle large input sizes.","solution":"def find_winner(initial_A: int, initial_B: int) -> str: Determines the winner of the game given the initial number of tokens of type A and type B. The game is won by the player who does not have a move to make. Parameters: initial_A (int): Initial number of tokens of type A. initial_B (int): Initial number of tokens of type B. Returns: str: \\"Alice\\" if Alice wins, otherwise \\"Bob\\" if (initial_A + initial_B) % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"A sorting algorithm is considered *stable* if it preserves the relative order of items with equal keys. You\'ve been tasked with implementing a stable sorting algorithm for an array of integers. Given an array of integers, implement a **merge sort** algorithm that sorts the array in non-decreasing order and is stable. The function signature is as follows: ```python def stable_merge_sort(arr: List[int]) -> List[int]: pass ``` # Input - An array `arr` of length `n` (1 ≤ n ≤ 10^5), consisting of integers (-10^9 ≤ arr[i] ≤ 10^9). # Output - Return a new array sorted in non-decreasing order. # Examples Example 1 **Input:** ```python arr = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5] ``` **Output:** ```python [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9] ``` Example 2 **Input:** ```python arr = [1, 2, 3, 4, 5] ``` **Output:** ```python [1, 2, 3, 4, 5] ``` Example 3 **Input:** ```python arr = [5, 4, 3, 2, 1] ``` **Output:** ```python [1, 2, 3, 4, 5] ``` Example 4 **Input:** ```python arr = [2, 3, 2, 1, 4, 1] ``` **Output:** ```python [1, 1, 2, 2, 3, 4] ``` # Notes - You must implement a merge sort algorithm, ensuring it remains stable. - Merge sort has an average and worst-case time complexity of O(n log n).","solution":"from typing import List def stable_merge_sort(arr: List[int]) -> List[int]: if len(arr) <= 1: return arr def merge(left: List[int], right: List[int]) -> List[int]: sorted_array = [] i = j = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: sorted_array.append(left[i]) i += 1 else: sorted_array.append(right[j]) j += 1 sorted_array.extend(left[i:]) sorted_array.extend(right[j:]) return sorted_array def merge_sort(arr: List[int]) -> List[int]: if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) return merge_sort(arr)"},{"question":"Farmville has several orchards, each containing a certain number of fruit trees. Each orchard is indexed, and every tree in the orchard has a specific number of fruits. The mayor of Farmville wants to ensure that on each day, the workers gather exactly k fruits from any single orchard. Given that workers can only gather fruits from a single orchard each day, the mayor needs your help to determine the minimum number of days required to collect exactly k fruits each day. If gathering fruits is not possible due to shortage, the gathering process should be stopped, and the program should output \\"Impossible\\". Input: The first line of input contains two space-separated integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10000) — the number of orchards and the number of required fruits to collect from any orchard each day. The next line contains n space-separated integers where the i-th integer ai (0 ≤ ai ≤ 100000) represents the number of fruits in the i-th orchard. Output: Output a single integer m — the minimum number of days required to gather exactly k fruits each day. If it is not possible to gather k fruits each day from any orchard, print \\"Impossible\\". Examples: Input: 3 5 4 10 7 Output: 2 Input: 2 8 5 3 Output: Impossible Input: 4 10 10 10 10 10 Output: 4","solution":"def min_days_to_gather_fruits(n, k, orchards): This function returns the minimum number of days required to gather exactly k fruits each day from any single orchard or \\"Impossible\\" if it is not possible. Parameters: n (int): The number of orchards. k (int): The number of required fruits to collect from any orchard each day. orchards (list): A list of integers where the i-th integer represents the number of fruits in the i-th orchard. Returns: int or str: The minimum number of days required or \\"Impossible\\" if not possible. # Calculate the total number of days for each orchard total_days = 0 for fruits in orchards: if fruits < k: return \\"Impossible\\" total_days += fruits // k return total_days # Example usage print(min_days_to_gather_fruits(3, 5, [4, 10, 7])) # Output should be \\"Impossible\\" print(min_days_to_gather_fruits(2, 8, [5, 3])) # Output should be \\"Impossible\\" print(min_days_to_gather_fruits(4, 10, [10, 10, 10, 10])) # Output should be 4"},{"question":"An artisan makes decorative tiles from painted plaques. Each tile is created by cutting a plaque into smaller sub-plaques. The artisan plans to cut each plaque into the same number of square sub-plaques (tiles) by making horizontal and vertical cuts. However, the artisan has a rule: each plaque should be cut in a way that the minimal square sub-plaque size is maximized. The size of each tile should be as large as possible. Given the dimensions of the plaques, help the artisan determine the dimensions of the largest possible square tiles that can be achieved from each plaque. Input The input consists of several test cases. The first line contains an integer t (1 ≤ t ≤ 104) — the number of test cases. Next, follow t lines, each containing two integers n and m (1 ≤ n, m ≤ 109) — the dimensions of the plaque. Output For each test case, print the size (side length) of the largest possible square tile that can be cut from the plaque (a single integer). Examples Input 3 4 6 10 15 12 8 Output 2 5 4 Explanation 1. For the first plaque of dimensions 4 by 6: The greatest common divisor (GCD) of 4 and 6 is 2. Thus, the largest possible square tile side length is 2. 2. For the second plaque of dimensions 10 by 15: The GCD of 10 and 15 is 5. Thus, the largest square tile side length is 5. 3. For the third plaque of dimensions 12 by 8: The GCD of 12 and 8 is 4. Thus, the largest square tile side length is 4. Note The problem requires finding the largest possible square tiles that can be cut from a given plaque, and this can be achieved by calculating the GCD of the two dimensions of the plaque. The side length of the square tiles will be the GCD of these dimensions.","solution":"import math def largest_square_tile_side_lengths(t, dimensions): results = [] for i in range(t): n, m = dimensions[i] gcd = math.gcd(n, m) results.append(gcd) return results"},{"question":"A security system for an online vault is based on a sequence of operations performed using a secret key. The secret key is a sequence of integers. The vault only unlocks if, after all operations are performed, the resulting sequence of integers is a palindrome. An operation involves choosing any two adjacent elements in the sequence, removing them, and replacing them with their sum. For example, if the key sequence is [1, 2, 3, 2, 1] and you choose adjacent elements 2 and 3, you replace them with their sum 5, resulting in [1, 5, 2, 1]. Determine if it is possible to unlock the vault by performing a series of such operations. Input First line contains an integer n (1 ≤ n ≤ 200) - the initial length of the secret key sequence. Second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) - the elements of the sequence. Output Print \\"YES\\" without quotes if it\'s possible to perform the operations to make the sequence a palindrome, otherwise print \\"NO\\". You can output each of the letters in any register. Examples Input 5 1 2 3 2 1 Output YES Input 3 1 2 1 Output YES Input 4 1 2 3 4 Output NO","solution":"def can_form_palindrome(n, sequence): Determine if it\'s possible to perform a series of operations to make the sequence a palindrome. # If the sequence is already a palindrome, return YES. if sequence == sequence[::-1]: return \\"YES\\" # Perform the operations until the length of the sequence gets reduced to 1. while len(sequence) > 1: # Check if sequence is already palindrome after any operations if sequence == sequence[::-1]: return \\"YES\\" i = 0 operation_possible = False # Try to merge elements and check if sequence can become palindrome while i < len(sequence) - 1: if sequence[i] == sequence[i + 1]: # Merge them and remove the elements sequence = sequence[:i] + [sequence[i] + sequence[i + 1]] + sequence[i+2:] operation_possible = True break i += 1 if not operation_possible: break return \\"NO\\""},{"question":"Design a system where users can book meeting rooms in an office. There are `n` meeting rooms available, and each user can request one or more meeting rooms for a specific time slot. The time slots are defined as a pair of integers where the first integer represents the start time and the second integer represents the end time. Requests can overlap but different rooms must be allocated for overlapping requests. Implement a function to determine if all meeting requests can be accommodated without any conflicts and return the minimum number of meeting rooms required. Input The first line contains an integer `T` representing the number of test cases. Each test case starts with an integer `n` representing the number of meeting rooms available, followed by an integer `m` denoting the number of meeting requests. The next `m` lines each contain two integers `start` and `end`, representing the start and end times of a meeting request. Output For each test case, print a single integer which is the minimum number of meeting rooms required to accommodate all the meeting requests. If it is not possible to accommodate all the requests, print -1. Constraints 1 ≤ T ≤ 10 1 ≤ n ≤ 100 1 ≤ m ≤ 1000 0 ≤ start < end ≤ 24 Example Input 3 2 3 1 5 6 10 2 8 3 2 1 3 2 6 1 4 4 4 2 5 9 12 5 9 3 8 Output 2 1 3","solution":"def min_meeting_rooms(n, m, requests): Determines the minimum number of meeting rooms required to accommodate all the meeting requests or returns -1 if the available rooms are not enough. :param n: int - The number of available meeting rooms. :param m: int - The number of meeting requests. :param requests: List of tuples - Each tuple represents a meeting request with start and end times. :return: int - The minimum number of meeting rooms required or -1 if not all requests can be accommodated. # Flatten the list of requests and distinguish between start and end times times = [] for start, end in requests: times.append((start, \'start\')) times.append((end, \'end\')) # Sort the timings times.sort(key=lambda x: (x[0], x[1] == \'end\')) required_rooms = 0 max_rooms = 0 for time, type in times: if type == \'start\': required_rooms += 1 max_rooms = max(max_rooms, required_rooms) else: required_rooms -= 1 if max_rooms > n: return -1 return max_rooms def solve(T, test_cases): results = [] for i in range(T): n, m, requests = test_cases[i] results.append(min_meeting_rooms(n, m, requests)) return results"},{"question":"In a farming village, there is a rectangular garden with dimensions M x N, represented as a matrix with M rows and N columns. The garden needs to be divided into sections to plant different types of crops. Each section should form a contiguous sub-matrix and the sum of the elements in each section must be equal to a given integer, K. Each element in the matrix represents a plot and contains a positive integer value indicating the fertility level of that plot. Your task is to determine whether it is possible to divide the garden into at least two non-overlapping sections where each section has the sum of fertility levels equal to K. Input format: - The first line contains two integers, M and N, denoting the dimensions of the garden matrix. - The next M lines each contain N integers representing the fertility levels of each plot. - The last line contains a single integer K. Output format: - If it is possible to divide the garden into at least two sections where each section\'s sum is equal to K, print \\"YES\\". - Otherwise, print \\"NO\\". Constraints: - 1 ≤ M, N ≤ 100 - 1 ≤ matrix[i][j] ≤ 1000 - 1 ≤ K ≤ 1000000 SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 15 SAMPLE OUTPUT YES Explanation: One possible solution is to select the sub-matrix [(2,2),(2,3),(3,2),(3,3)] with sum 28-13=15 and another is [(1,1),(2,1),(3,1)] with sum 15.","solution":"def can_divide_garden(M, N, garden, K): def calculate_prefix_sum(matrix): prefix = [[0] * (N + 1) for _ in range(M + 1)] for i in range(1, M + 1): for j in range(1, N + 1): prefix[i][j] = matrix[i-1][j-1] + prefix[i-1][j] + prefix[i][j-1] - prefix[i-1][j-1] return prefix prefix = calculate_prefix_sum(garden) seen_sums = {} for row1 in range(M): for row2 in range(row1, M): for col1 in range(N): for col2 in range(col1, N): current_sum = (prefix[row2 + 1][col2 + 1] - prefix[row1][col2 + 1] - prefix[row2 + 1][col1] + prefix[row1][col1]) if current_sum == K: if current_sum in seen_sums: return \\"YES\\" seen_sums[current_sum] = True return \\"NO\\""},{"question":"You are tasked with developing a file storage system that supports two main operations: adding a file, and querying for the number of files below a specified size. Your system will keep track of files and their sizes, and you need to efficiently manage and query this information. Each operation command is provided as a string, which can be one of the following two types: 1. `ADD size` - This command adds a new file of the specified size to the system. 2. `QUERY maxSize` - This command queries the system for the number of files that are less than or equal to `maxSize`. Your task is to implement a program that processes a sequence of these operations. For each `QUERY` operation, the program should output the result, which is the count of files matching the query criteria. Input: - The input consists of multiple operations, each on a new line. - Each operation is either in the format `ADD size` or `QUERY maxSize`. - `size` and `maxSize` are integers. - The input ends with the line `END` which should not be processed. Output: - For each `QUERY` operation, output the result on a new line. Constraints: - 1 ≤ size, maxSize ≤ 10^6 - The number of operations will not exceed 100,000. Example Input: ``` ADD 100 ADD 200 QUERY 150 ADD 50 QUERY 150 ADD 150 QUERY 150 END ``` Output: ``` 1 2 3 ``` Explanation: After the first \\"ADD 100\\" and \\"ADD 200\\" commands, the storage has two files of sizes 100 and 200. The first \\"QUERY 150\\" command counts 1 file with a size less than or equal to 150 (100). After adding a 50 size file, the second \\"QUERY 150\\" command counts 2 files (100 and 50). After adding a 150 size file, the third \\"QUERY 150\\" command counts 3 files (100, 50, and 150).","solution":"class FileStorageSystem: def __init__(self): self.files = [] def add_file(self, size): self.files.append(size) def query_files(self, max_size): return len([file for file in self.files if file <= max_size]) def process_operations(operations): system = FileStorageSystem() results = [] for operation in operations: if operation.startswith(\\"ADD\\"): size = int(operation.split()[1]) system.add_file(size) elif operation.startswith(\\"QUERY\\"): max_size = int(operation.split()[1]) count = system.query_files(max_size) results.append(count) return results"},{"question":"A secret agent is deciphering messages from encoded transmissions. Each message is encoded using a specific set of rules where each digit in the message can represent various characters based on a predefined mapping. The predefined mapping is as follows: 1 -> \\"ABC\\" 2 -> \\"DEF\\" 3 -> \\"GHI\\" 4 -> \\"JKL\\" 5 -> \\"MNO\\" 6 -> \\"PQR\\" 7 -> \\"ST\\" 8 -> \\"UV\\" 9 -> \\"WXY\\" 0 -> \\"Z\\" Given a numeric message, the agent needs to compute all possible decoded strings using the provided mapping. You should write a program to help the agent by generating all potential decoded messages from the given numeric string. Input The first line of input consists of a single integer t, the number of messages. The next t lines each contain a numeric string representing a coded message. Output For each input message, output all possible decoded strings, one per line. If there are multiple possible decoded strings, output them in alphabetical order. Constraints 1 <= t <= 10 1 <= length of numeric string <= 10 Example Input: 2 23 56 Output: AD AE AF BD BE BF CD CE CF MP MQ MR NP NQ NR OP OQ OR","solution":"from itertools import product # Predefined mapping of digits to characters mapping = { \'1\': \'ABC\', \'2\': \'DEF\', \'3\': \'GHI\', \'4\': \'JKL\', \'5\': \'MNO\', \'6\': \'PQR\', \'7\': \'ST\', \'8\': \'UV\', \'9\': \'WXY\', \'0\': \'Z\' } def decode_messages(t, messages): Given the number of messages and the list of numeric strings, return all possible decoded strings for each message. all_decoded_messages = [] for message in messages: # Creating all possible characters for each digit in the message possible_characters = [mapping[digit] for digit in message] # Generate all combinations using product from itertools decoded_strings = [\'\'.join(combination) for combination in product(*possible_characters)] decoded_strings.sort() # Sorting to meet the alphabetical order requirement all_decoded_messages.append(decoded_strings) return all_decoded_messages"},{"question":"You are given a string consisting of characters \'a\', \'b\', and \'c\'. Your task is to find the length of the longest subsequence which contains at least one \'a\', one \'b\', and one \'c\' (in any order). Input The first line contains the integer \'T\', the number of test cases. This is followed by \'T\' lines where each line contains a string S of length ≤ 100. Output For each test case, output the length of the longest subsequence that contains at least one \'a\', one \'b\', and one \'c\'. Example Input: 2 ab abcabc Output: 2 6","solution":"def longest_subsequence_length_with_abc(s): Returns the length of the longest subsequence which contains at least one \'a\', one \'b\', and one \'c\'. count_a = s.count(\'a\') count_b = s.count(\'b\') count_c = s.count(\'c\') if count_a > 0 and count_b > 0 and count_c > 0: return len(s) else: return 0 def process_test_cases(test_cases): Processes a list of test cases and returns a list of results. results = [] for s in test_cases: results.append(longest_subsequence_length_with_abc(s)) return results"},{"question":"There is a popular game in the Kingdom of Kremland called \\"Palindrome Journey\\". In this game, you are given a string, and your task is to calculate the minimum number of steps to convert it into a palindrome. Every step can be either: 1. Change any single character of the string to any other character. 2. Reverse any substring of the string. A palindrome is a string that reads the same backwards as forwards. Help the citizens of Kremland find out how many steps they need to transform their string into a palindrome. Input The first line contains a single integer n (1 ≤ n ≤ 50) — the length of the string s. The second line contains the string s, consisting of exactly n uppercase letters of the Latin alphabet. Output Output the minimum number of steps needed to transform the string s into a palindrome. Examples Input 3 AAB Output 1 Input 4 ABCD Output 2 Input 5 ABCDE Output 3 Note In the first example, you can change the second \'A\' to \'B\' to make it \\"ABA\\", which is a palindrome. In the second example, you can reverse the entire string to make it \\"DCBA\\", and then change \'D\' to \'A\' and \'C\' to \'B\' to make it \\"ABBA\\", which is a palindrome. In the third example, you can reverse the substring \\"BC\\" to make it \\"ADCBE\\", then change \'A\' to \'E\' and \'D\' to \'C\', getting the string \\"ECCCE\\", which is a palindrome.","solution":"def min_steps_to_palindrome(n, s): Calculate the minimum number of steps to convert string s into a palindrome. steps = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: steps += 1 return steps"},{"question":"After a recent update to a popular social networking site, users can now like and share posts. Each post can be liked or shared zero or more times. Given a list of posts with the number of likes and shares each post has received, the site wants to determine the popularity of each post. The popularity of a post is defined as the sum of its likes and shares. Your task is to write a program that, for each post, calculates its popularity. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t blocks describes a test case, which is composed as follows: - The first line of the block contains an integer n (1 ≤ n ≤ 1000), the number of posts. - The next n lines each contain two integers li and si (0 ≤ li, si ≤ 10^6), where li is the number of likes and si is the number of shares for the i-th post. Output For each test case, print n space-separated integers, where the i-th integer is the popularity of the i-th post. Example Input 2 3 10 20 15 15 5 10 2 0 0 1000000 1000000 Output 30 30 15 0 2000000 Explanation In the first test case: - The first post has 10 likes and 20 shares, so its popularity is 10 + 20 = 30. - The second post has 15 likes and 15 shares, so its popularity is 15 + 15 = 30. - The third post has 5 likes and 10 shares, so its popularity is 5 + 10 = 15. In the second test case: - The first post has 0 likes and 0 shares, so its popularity is 0 + 0 = 0. - The second post has 1,000,000 likes and 1,000,000 shares, so its popularity is 1,000,000 + 1,000,000 = 2,000,000.","solution":"def calculate_popularity(test_cases): Calculates the popularity of each post in given test cases. Parameters: test_cases (list): A list of test cases where each test case is represented as a tuple of number of posts and a list of likes and shares. Returns: list: A list of lists where each inner list contains the popularities of posts in that test case. results = [] for case in test_cases: n, posts = case popularities = [likes + shares for likes, shares in posts] results.append(popularities) return results"},{"question":"Peter is planning a trip to visit `n` cities. The cities are numbered from 1 to `n`, and they are connected by bidirectional roads. Each road has a travel time associated with it, and Peter wants to know the shortest travel time between two given cities. Your task is to write a program that, given a set of cities, roads, and pairs of cities, determines the shortest travel time between each pair. If no path exists between the two cities, return -1 for that pair. Input: - The first line contains two integers `n` and `m` (1 <= n <= 500, 0 <= m <= 10000) — the number of cities and the number of roads. - The next `m` lines each contain three integers `u`, `v`, and `t` (1 <= u, v <= n, 1 <= t <= 1000), where `u` and `v` are the cities connected by a road and `t` is the travel time for that road. - The next line contains an integer `q` (1 <= q <= 10000) — the number of queries. - The next `q` lines each contain two integers `x` and `y` (1 <= x, y <= n) — the cities between which we want to find the shortest travel time. Output: - For each query, output the shortest travel time between cities `x` and `y`. If no path exists, output `-1`. Example: Input: ``` 4 4 1 2 5 2 3 4 3 4 3 4 1 7 3 1 3 2 4 1 4 ``` Output: ``` 9 7 7 ``` Note: - In the first query, the shortest path from city 1 to city 3 is `1 -> 2 -> 3` with a total travel time of 5 + 4 = 9. - In the second query, the shortest path from city 2 to city 4 is `2 -> 3 -> 4` with a total travel time of 4 + 3 = 7. - In the third query, the shortest path from city 1 to city 4 is `1 -> 4` with a total travel time of 7.","solution":"import heapq import sys def shortest_travel_time(n, m, roads, q, queries): graph = {i: [] for i in range(1, n+1)} for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) def dijkstra(start): distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances results = [] for x, y in queries: distances = dijkstra(x) result = distances[y] if distances[y] != float(\'inf\') else -1 results.append(result) return results"},{"question":"Alice and Bob are discussing competitive programming when Alice presents Bob with a new challenge. Bob, who is keen to impress Alice, is eager to solve it quickly. The problem Alice asks is as follows: Given two integers a and b, calculate the sum of all the integers between (and including) a and b that are divisible by 3. If there are no such numbers, return 0. Help Bob solve this problem efficiently for multiple test cases. Input constraints: - -10^9 ≤ a ≤ b ≤ 10^9 - 1 ≤ t ≤ 100 Input Format: - The first line contains the integer t - denoting the number of test cases. - Each of the next t lines contains two space-separated integers a and b. Output Format: - Output t lines each containing the answer for the respective test case. SAMPLE INPUT 2 1 10 -5 4 SAMPLE OUTPUT 18 0 Explanation For the first test case, the numbers between 1 and 10 inclusive that are divisible by 3 are 3, 6, and 9. Their sum is 18. For the second test case, the numbers between -5 and 4 inclusive that are divisible by 3 are -3 and 0. Their sum is -3 + 0 = -3, but since we\'re only considering positive sums, we return 0.","solution":"def sum_of_integers_divisible_by_3(t, test_cases): results = [] for case in test_cases: a, b = case sum_divisible_by_3 = sum([x for x in range(a, b + 1) if x % 3 == 0]) results.append(sum_divisible_by_3) return results"},{"question":"Task is simple. You are given a list of integer intervals and need to perform the following - Print the minimum number of intervals that need to be removed so that the remaining intervals do not overlap each other. Definition of Overlapping Intervals - Two intervals [a, b] and [c, d] are overlapping if they have at least one common point, that is either a <= c < b or c <= a < d. Example - Intervals [[1, 3], [2, 4], [3, 5]] have overlapping intervals. Intervals [[1, 2], [2, 3], [3, 4]] do not have overlapping intervals. Input- T is the number of test cases. For each test case input the number n which denotes the number of intervals followed by n intervals, each interval consisting of two integers start and end, respectively. Output- A single integer denoting the minimum number of intervals that need to be removed for each test case. Constraints 1 ≤ T ≤ 10 1 ≤ n ≤ 1000 0 ≤ start < end ≤ 10^9 SAMPLE INPUT 2 3 1 3 2 4 3 5 3 1 2 2 3 3 4 SAMPLE OUTPUT 1 0 Explanation In the first case - the second interval [2, 4] overlaps with both the first [1, 3] and the third [3, 5], so removing any one of the overlapping intervals (preferably the second) makes all remaining intervals non-overlapping. In the second case - none of the intervals overlap each other, so no need to remove any interval. Therefore, the output is 0.","solution":"def min_intervals_to_remove(test_cases): results = [] for intervals in test_cases: intervals.sort(key=lambda x: x[1]) end = float(\'-inf\') count = 0 for interval in intervals: if interval[0] >= end: end = interval[1] else: count += 1 results.append(count) return results"},{"question":"Sam is an avid adventure enthusiast and loves trekking to different mountain peaks. He is planning a month-long trekking expedition to visit several peaks. Each peak is identified by its height and its difficulty level. Sam wants to maximize his experience by choosing peaks that offer the best balance of height and difficulty. There are n peaks to choose from during this month-long expedition. Each peak can be characterized by two integers Hi and Di, denoting the height and the difficulty level of the corresponding peak. Sam wants to visit exactly one peak with the maximal value of Hi × Di. If there are several such peaks, he would pick one with the maximal Hi among them. If there is still a tie, he would pick the one with the minimal index among them. Your task is to help Sam to pick a peak to visit during this month-long expedition. Input The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains an integer n. The second line of each test case contains n integers H1, H2, ..., Hn (the heights of the peaks). The following line contains n integers D1, D2, ..., Dn (the difficulty levels of the peaks). Output For each test case, output a single integer i denoting the index of the peak that Sam should visit during this expedition. Note that we follow 1-based indexing. Constraints 1 ≤ T ≤ 5 1 ≤ n ≤ 100 1 ≤ Hi, Di ≤ 100 Example Input: 2 3 10 20 30 4 5 6 4 12 10 14 8 3 7 2 6 Output: 3 2 Explanation In the first example case, the third peak has the highest value of H × D. In the second example case, the second peak and the fourth peak have the same value of H × D, but the second peak has a greater height.","solution":"def find_best_peak_index(T, test_cases): results = [] for t in range(T): n = test_cases[t][\'n\'] heights = test_cases[t][\'heights\'] difficulties = test_cases[t][\'difficulties\'] best_index = 0 best_value = 0 # Value of Hi * Di best_height = 0 for i in range(n): current_value = heights[i] * difficulties[i] if current_value > best_value or (current_value == best_value and heights[i] > best_height): best_value = current_value best_height = heights[i] best_index = i results.append(best_index + 1) # Convert to 1-based indexing return results # Example Usage: # T = 2 # test_cases = [ # {\'n\': 3, \'heights\': [10, 20, 30], \'difficulties\': [4, 5, 6]}, # {\'n\': 4, \'heights\': [12, 10, 14, 8], \'difficulties\': [3, 7, 2, 6]} # ] # Output: [3, 2]"},{"question":"Given a binary tree, write a function to determine if it is height-balanced. A height-balanced binary tree is defined as a binary tree in which the left and right subtrees of every node differ in height by no more than 1. Write a function `isBalanced(root)` that takes the root node of the binary tree as input and returns `True` if the tree is height-balanced, and `False` otherwise. You need to implement the following: 1. A helper function `height(node)` that calculates the height of a given node while also checking for balance. If a subtree is found to be unbalanced, it should return -1. 2. Using the helper function, determine if the entire tree is balanced. Constraints * The tree can have up to 10,000 nodes. * Node values are integers. Input The input consists of the root node of a binary tree. Output Return `True` if the binary tree is height-balanced, otherwise return `False`. Example Consider the following binary tree: ``` 1 / 2 3 / 4 5 ``` For the above binary tree: ``` Input: root = Node(1, Node(2, Node(4), Node(5)), Node(3)) Output: True ``` Example of an unbalanced binary tree: ``` 1 / 2 / 3 ``` For the above binary tree: ``` Input: root = Node(1, Node(2, Node(3))) Output: False ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isBalanced(root): def height(node): if not node: return 0 left_height = height(node.left) if left_height == -1: return -1 right_height = height(node.right) if right_height == -1: return -1 if abs(left_height - right_height) > 1: return -1 return max(left_height, right_height) + 1 return height(root) != -1"},{"question":"Alex has a peculiar interest in numbers and he loves to find the \\"special\\" number for any given integer. A number is considered \\"special\\" if it is divisible by 7 or it contains the digit \'7\' in it. Given a number n, Alex wants to find the smallest \\"special\\" number that is greater than or equal to n. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains one integer n (1 ≤ n ≤ 1,000,000) — the starting number for which Alex needs to find the smallest \\"special\\" number. Output Print t lines. The i-th line should contain the smallest \\"special\\" number greater than or equal to n. Example Input 3 20 70 5 Output 21 70 7 Note In the first test case, the smallest \\"special\\" number greater than or equal to 20 is 21 because 21 is divisible by 7. In the second test case, the smallest \\"special\\" number greater than or equal to 70 is 70 because it is already \\"special\\". In the third test case, the smallest \\"special\\" number greater than or equal to 5 is 7 because it contains the digit \'7\'.","solution":"def find_special_number(n): Returns the smallest \\"special\\" number that is greater than or equal to n. A number is \\"special\\" if it is divisible by 7 or contains the digit \'7\'. while True: if n % 7 == 0 or \'7\' in str(n): return n n += 1 def special_numbers_for_cases(cases): Returns the special numbers for each test case. result = [] for num in cases: result.append(find_special_number(num)) return result"},{"question":"Polycarp and his friends are playing a game with sequences. They have an array of n integers where the i-th element is denoted by a_i. Polycarp wants to find the longest contiguous subarray such that for every element in this subarray, a_i is strictly greater than the element immediately before it if it exists. Write a program that determines the length of the longest such subarray. Input The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array. The next line contains n integers (1 ≤ a_i ≤ 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^6. Output For each test case, output a single integer — the length of the longest contiguous subarray where each element is strictly greater than the element immediately before it. Example Input 3 5 1 2 2 1 2 6 1 2 3 4 5 6 4 7 7 7 7 Output 2 6 1","solution":"def longest_increasing_subarray(t, test_cases): results = [] for case in test_cases: n, arr = case if n == 1: results.append(1) continue max_length = 1 current_length = 1 for i in range(1, n): if arr[i] > arr[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 results.append(max_length) return results"},{"question":"You are given a list of tasks with their respective deadlines and durations. Your goal is to create a schedule that avoids any overlapping tasks, and completes as many tasks as possible before their deadlines. Each task must be started and finished without interruption. Input The input consists of multiple datasets. Each dataset is formatted as follows: > n > d1 t1 > d2 t2 > ... > dn tn The first line in the dataset gives the number of tasks, n (1 ≤ n ≤ 1000). Each of the following n lines describes a task where di (1 ≤ di ≤ 10000) is the deadline by which the task must be completed and ti (1 ≤ ti ≤ 1000) is the time required to complete the task. The input terminates with a line containing the integer 0. This line should not be processed. Output For each dataset, output a single line containing the maximum number of tasks that can be completed without any overlaps, and all completed before their respective deadlines. Example Input 3 6 4 8 2 7 3 4 6 2 8 1 7 4 9 3 0 Example Output 2 3 Explanation: In the first dataset, tasks 1 and 3 can be completed before their deadlines without overlapping. In the second dataset, tasks 2, 1, and 4 can be completed without overlapping and all before their respective deadlines.","solution":"def max_tasks(tasks): Calculate the maximum number of non-overlapping tasks that can be completed before their deadlines. # Sort tasks by their deadlines tasks.sort(key=lambda x: x[0]) completed_tasks = 0 current_time = 0 for deadline, duration in tasks: if current_time + duration <= deadline: current_time += duration completed_tasks += 1 return completed_tasks def process_input(input_data): Process the input data and applies the `max_tasks` function on each dataset. result = [] lines = input_data.strip().split(\'n\') i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break i += 1 tasks = [] for _ in range(n): d, t = map(int, lines[i].split()) tasks.append((d, t)) i += 1 result.append(max_tasks(tasks)) return result"},{"question":"An imaginary city has a unique transportation system consisting of multiple train routes where each route connects exactly two stations. Each station can be connected to multiple other stations, forming a network. The city\'s transportation planner wants to ensure that there exists a way to travel from any station to any other station, possibly with transfers at intermediate stations. They also want to know the minimum number of additional routes (direct connections between two stations) that need to be added to make the network fully connected. Write a program to find the minimum number of additional routes required to make the network fully connected. Input The first line of input contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 10^4), where n is the number of stations and m is the number of existing direct routes. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), which means there is a direct route between stations u and v. Output Output a single integer representing the minimum number of additional routes required to make the network fully connected. Examples Input 4 2 1 2 3 4 Output 2 Input 5 3 1 2 2 3 4 5 Output 1 Input 6 0 Output 5 Note In the first example, the network consists of two disconnected parts: {1, 2} and {3, 4}. To connect them, we need two additional routes: one connecting part {1, 2} to part {3, 4} (e.g., 1-3) and another one connecting any remaining station if needed. In the second example, the network can be connected by adding one direct route (e.g., 3-4 or 3-5) thus connecting all stations. In the third example, since there are no routes, we need to add 5 routes to make all stations (from 1 to 6) connected: 1-2, 2-3, 3-4, 4-5, and 5-6, resulting in a connected network.","solution":"def find_root(parent, i): if parent[i] == i: return i else: return find_root(parent, parent[i]) def union(parent, rank, x, y): root_x = find_root(parent, x) root_y = find_root(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def min_additional_routes(n, m, routes): parent = list(range(n)) rank = [0] * n for u, v in routes: union(parent, rank, u-1, v-1) unique_components = len(set(find_root(parent, i) for i in range(n))) return unique_components - 1"},{"question":"In a distant galaxy, there are n planets connected by m bidirectional space roads. Each space road connects exactly two different planets. Your task is to determine the minimum number of space roads that need to be built to ensure that there is a direct or indirect path between every pair of planets. Additionally, you need to count the number of ways to build these additional space roads such that the planets remain connected. Two ways to build the roads are considered different if there is at least one road that appears in one way but not in the other. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of planets and the number of space roads, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — denoting that there is a space road between planet u and planet v. There can be multiple space roads between the same pair of planets. Output Output a single integer — the number of ways to build the minimum number of space roads to ensure that all planets are connected. Examples Input 5 3 1 2 1 3 4 5 Output 6 Input 4 4 1 2 2 3 3 4 4 1 Output 1 Note In the first example, we have 2 components initially, and we need to add at least one road to connect them. The possible new connections are between any of the planets in component 1 (planets 1, 2, 3) and any of the planets in component 2 (planets 4, 5). Thus, there are 3 * 2 = 6 ways to connect these components by adding one road. In the second example, all planets are already connected, which means there is only 1 way to ensure that they remain connected (by not adding any new roads).","solution":"def count_new_roads(n, m, roads): from collections import defaultdict, deque def bfs(start, visited, adj_list): queue = deque([start]) visited[start] = True component_size = 0 while queue: node = queue.popleft() component_size += 1 for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component_size if n == 1: return 1 if m == 0 else 0 adj_list = defaultdict(list) for u, v in roads: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (n + 1) components = [] for planet in range(1, n + 1): if not visited[planet]: component_size = bfs(planet, visited, adj_list) components.append(component_size) if len(components) == 1: return 1 components.sort(reverse=True) total_ways = 1 for component in components[:-1]: total_ways *= component * components[-1] return total_ways"},{"question":"You are given a sequence of integers. Your task is to compute the sum of all integers in the sequence that are divisible by a given number k. Input: First line: n - the number of integers in the sequence (1 <= n <= 10^6) Second line: k - the divisor (1 <= k <= 10^6) Next n lines: each line contains one integer a_i (1 <= a_i <= 10^6) Output: Output the sum of all integers that are divisible by k. Example: Input: 5 3 12 18 5 26 9 Output: 39","solution":"def sum_of_divisibles(n, k, sequence): Returns the sum of integers in sequence that are divisible by k. :param n: int - number of integers in the sequence :param k: int - the divisor :param sequence: list - list of integers in the sequence :return: int - sum of integers divisible by k total = 0 for num in sequence: if num % k == 0: total += num return total # Sample usage n = 5 k = 3 sequence = [12, 18, 5, 26, 9] print(sum_of_divisibles(n, k, sequence)) # Output: 39"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. The nodes are numbered from 1 to `n`. Your task is to find the shortest path from a given source node `s` to a target node `t`. Each edge of the graph has a weight of 1. Input The first line of the input contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of nodes and the number of edges in the graph. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n) denoting there is an edge between node `u` and node `v`. The next line contains two integers `s` and `t` (1 ≤ s, t ≤ n) — the source node and the target node. Output If there exists a path from `s` to `t`, output the length of the shortest path. If there is no path, output `-1`. Examples Input ``` 6 7 1 2 1 3 2 4 3 4 4 5 5 6 2 3 1 6 ``` Output ``` 4 ``` Input ``` 4 2 1 2 3 4 1 3 ``` Output ``` -1 ``` Explanation In the first example, the shortest path from node 1 to node 6 is `1 -> 3 -> 4 -> 5 -> 6`, which has length 4. In the second example, there is no path from node 1 to node 3, so the answer is `-1`.","solution":"from collections import deque def shortest_path_length(n, m, edges, s, t): Find the shortest path length between two nodes in an undirected graph with unit weight edges. Parameters: - n (int): Number of nodes in the graph. - m (int): Number of edges in the graph. - edges (list of tuples): List of edges where each edge is represented by a tuple (u, v). - s (int): Source node. - t (int): Target node. Returns: - int: The length of the shortest path from node s to node t, or -1 if no such path exists. # Initialize adjacency list adj_list = {i: [] for i in range(1, n + 1)} for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # BFS to find the shortest path queue = deque([(s, 0)]) visited = set() visited.add(s) while queue: node, dist = queue.popleft() if node == t: return dist for neighbor in adj_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, dist + 1)) return -1"},{"question":"A town has a unique traffic system where all roads are one-way. The town can be visualized as a grid of size `n x m`, where each cell represents a junction and each edge represents a road. Each junction has exactly one outgoing road, either to the junction directly to the right or directly below it. Given the traffic system, you need to determine the minimum number of outgoing edges that need to be reversed so that there is a valid path from the top-left junction `(1, 1)` to the bottom-right junction `(n, m)`. Input - The first line contains two integers `n` and `m` (2 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid. - Each of the next `n` lines contains `m` characters. The characters will be either \'R\' or \'D\'. - \'R\' indicates a road going to the junction to the right. - \'D\' indicates a road going to the junction directly below. Output - Output a single integer that indicates the minimum number of outgoing edges that need to be reversed. SAMPLE INPUT 3 3 RRR DDD DDD SAMPLE OUTPUT 1 Explanation In the given 3x3 grid: ``` RRR DDD DDD ``` At least one \'R\' needs to be changed to \'D\' to ensure there\'s a path from the top-left to the bottom-right. Specifically, changing the \'R\' in the first row or second row to \'D\' will create a valid path. Therefore, the minimum number of changes is 1.","solution":"def min_edge_reversals(n, m, grid): # Initialize the count of changes needed changes = 0 # To ensure a path from (1, 1) to (n, m), we need to make sure: # - The first row and last row must have at least one \'D\' # - The first column and last column must have at least one \'R\' # Ensure at least one \'D\' in the first row to go down if \'D\' not in grid[0]: changes += 1 # Ensure at least one \'R\' in the first column to go right if \'R\' not in [grid[i][0] for i in range(n)]: changes += 1 # Ensure at least one \'D\' in the last row to go down if \'D\' not in grid[-1]: changes += 1 # Ensure at least one \'R\' in the last column to go right if \'R\' not in [grid[i][-1] for i in range(n)]: changes += 1 # We should count the minimum number of these adjustments since # they ensure there is at least one valid path. return changes # Function to read the input and process the grid def process_input(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) m = int(data[1]) grid = [data[i+2] for i in range(n)] result = min_edge_reversals(n, m, grid) print(result)"},{"question":"Given an array of integers, return all possible subsets of the array. The solution set must not contain duplicate subsets. You need to implement a function `findSubsets(nums)` that takes an array of integers `nums` and returns a list of lists, representing all possible subsets. The output should be in the following order: 1. The empty subset should be the first element. 2. Subsequent subsets should follow in lexicographical order based on the integers within the subsets. 3. Ensure that identical sets sorted differently are not treated as unique. For instance, [1, 2] and [2, 1] should be considered the same subset. Function Signature: `def findSubsets(nums: List[int]) -> List[List[int]]` # Constraints - The elements of the given array are unique. - The number of subsets can be large. Ensure that your solution is optimized. # Example **Input:** ``` nums = [1, 2, 3] ``` **Output:** ``` [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]] ``` **Explanation:** - The input array [1, 2, 3] has the following subsets: [], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3] - These subsets are returned in lexicographical order. Make sure your implementation handles the constraints efficiently and returns the correct order of subsets.","solution":"from typing import List def findSubsets(nums: List[int]) -> List[List[int]]: Returns all possible subsets of the given list of integers in lexicographical order. def backtrack(start, path): result.append(path[:]) for i in range(start, len(nums)): path.append(nums[i]) backtrack(i + 1, path) path.pop() nums.sort() result = [] backtrack(0, []) return result"},{"question":"You are given a directed graph with n nodes and m edges. Each node has a certain cost associated with it. Your task is to determine the minimum cost to cover all nodes in the graph by selecting a subset of nodes such that every node in the graph is either in the subset or has a directed edge to a node in the subset. Input The first line contains two integers n and m (1 ≤ n ≤ 200, 0 ≤ m ≤ 10000) - the number of nodes and the number of edges respectively. The second line contains n space-separated integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 1000), the costs associated with each node. The next m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n) indicating there is a directed edge from node u to node v. Output Print a single integer, the minimum cost to cover all nodes in the graph as described. Examples Input 4 4 1 2 3 4 1 2 2 3 3 4 4 1 Output 1 Input 5 3 10 20 30 40 50 1 2 1 3 1 4 Output 60 Note In the first sample, selecting any one node will cover all nodes due to the circular nature of the directed edges, so the minimum cost is the cost of selecting node 1 which is 1. In the second sample, you must select nodes 2, 3, 4, and 5 since they do not have any incoming edges from other nodes. Thus, the minimum cost is 20 + 30 + 40 + 50 = 140.","solution":"def minimum_cover_cost(n, m, costs, edges): from collections import deque incoming_edges = [0] * n for u, v in edges: incoming_edges[v - 1] += 1 no_incoming_nodes = [i for i in range(n) if incoming_edges[i] == 0] if not no_incoming_nodes: return min(costs) total_cost = sum(costs[node] for node in no_incoming_nodes) return total_cost # Example usage: # n = 5 # m = 3 # costs = [10, 20, 30, 40, 50] # edges = [(1, 2), (1, 3), (1, 4)] # print(minimum_cover_cost(n, m, costs, edges)) # Output: 60"},{"question":"Alice is an avid gardener. She has a rectangular garden that she wants to divide into smaller rectangular plots for different types of plants. Each plot should have a width of at least 1 meter and a height of at least 1 meter. The garden is defined by its width, W, and height, H. Alice wants to know the number of different ways she can divide the garden into rectangular plots. A rectangular plot is considered different if it has a different top-left and bottom-right corner. Given the dimensions of Alice\'s garden, help her find the total number of different rectangular plots she can create. Input The first and only line of the input contains two space-separated integers W and H (1 ≤ W, H ≤ 1000), which represent the width and height of the garden in meters. Output Output a single integer: the total number of different rectangular plots that can be created. Examples Input 2 2 Output 9 Input 3 2 Output 18 Note In the first test case, Alice\'s garden is 2 meters wide and 2 meters high. The different rectangular plots she can create include: 1. 1x1 plots: 4 ways 2. 1x2 plots: 2 ways 3. 2x1 plots: 2 ways 4. 2x2 plot: 1 way Thus, the total number of different rectangular plots is 9. In the second test case, the different rectangular plots she can create include: 1. 1x1 plots: 6 ways 2. 1x2 plots: 3 ways 3. 1x3 plots: 2 ways 4. 2x1 plots: 4 ways 5. 2x2 plots: 2 ways 6. 2x3 plot: 1 way Thus, the total number of different rectangular plots is 18.","solution":"def num_different_rectangular_plots(W, H): Returns the total number of different rectangular plots that can be created in a WxH garden. :param W: Width of the garden (1 ≤ W ≤ 1000) :param H: Height of the garden (1 ≤ H ≤ 1000) :return: Total number of different rectangular plots total_plots = 0 for width in range(1, W+1): for height in range(1, H+1): total_plots += (W - width + 1) * (H - height + 1) return total_plots"},{"question":"A holiday resort needs a program to track room bookings for guests. Guests can book rooms which are identified by unique integer room numbers. You need to implement functionality to check room availability and update bookings accordingly. Here\'s what you need to do: 1. Implement the `is_available(booked_rooms, room_number)` function to check if a particular room is available. This function takes a list of integers `booked_rooms` representing currently booked rooms and an integer `room_number`. It should return \\"Available\\" if the room is not in the `booked_rooms` list and \\"Booked\\" if it is. 2. Implement the `book_room(booked_rooms, room_number)` function to book a room for a guest. This function takes a list of integers `booked_rooms` and an integer `room_number`. If the room is not already booked, it should add `room_number` to `booked_rooms` and return \\"Booking confirmed\\". If the room is already booked, it should return \\"Room already booked\\". Input The first line contains an integer `n`, the number of rooms currently booked. The second line contains `n` space-separated integers, representing the room numbers of the booked rooms. The third line contains an integer `m`, the number of queries. The next `m` lines contain a string (`CHECK` or `BOOK`) followed by an integer room number, representing the type of query and the room number. Output For each query, print the result of the respective function call (`is_available` or `book_room`). Example Input 5 101 102 103 104 105 3 CHECK 102 BOOK 106 BOOK 102 Output Booked Booking confirmed Room already booked","solution":"def is_available(booked_rooms, room_number): Checks if a room is available or booked. Parameters: - booked_rooms: list of integers, currently booked room numbers. - room_number: integer, the room number to check. Returns: - \\"Available\\" if the room_number is not in booked_rooms. - \\"Booked\\" if the room_number is in booked_rooms. if room_number in booked_rooms: return \\"Booked\\" else: return \\"Available\\" def book_room(booked_rooms, room_number): Books a room for a guest. Parameters: - booked_rooms: list of integers, currently booked room numbers. - room_number: integer, the room number to book. Returns: - \\"Booking confirmed\\" if the room was successfully booked. - \\"Room already booked\\" if the room was already booked. if room_number in booked_rooms: return \\"Room already booked\\" else: booked_rooms.append(room_number) return \\"Booking confirmed\\""},{"question":"A large retail store wants to keep track of its customers\' purchase habits. Each customer has a unique ID and has made several purchases in the past. The store\'s system keeps track of the date and amount spent on each purchase. Management is interested in sending appreciation messages to \'loyal\' customers. A \'loyal\' customer is defined as one who has made at least k purchases and has spent a cumulative amount of at least d dollars. The store\'s database has information about all purchases made by customers. Your task is to identify the number of loyal customers in the database. Input The first line contains integers c, k, and d (1 ≤ c ≤ 10^5, 1 ≤ k ≤ 100, 1 ≤ d ≤ 10^9) — the number of customers, the minimum number of purchases, and the minimum cumulative amount spent to be considered loyal. Each of the next p lines (where p is the total number of purchases across all customers) contains an integer ID (1 ≤ ID ≤ c), a string Date (in the format YYYY-MM-DD), and an integer amount (1 ≤ amount ≤ 10^6) representing the customer ID, date of purchase, and amount spent on that purchase. Output Print a single integer — the number of loyal customers based on the given criteria. Examples Input 5 3 300 1 2022-01-10 150 2 2022-01-15 100 1 2022-01-20 50 1 2022-02-05 100 3 2022-02-12 200 2 2022-03-01 100 3 2022-03-15 150 4 2022-04-01 100 3 2022-04-10 50 5 2022-05-25 200 4 2022-06-12 200 Output 2 Input 4 2 500 1 2022-01-10 300 2 2022-01-15 200 1 2022-02-03 250 3 2022-02-10 100 4 2022-02-15 300 3 2022-03-01 200 4 2022-03-10 250 1 2022-04-05 100 Output 2 Input 3 2 600 1 2022-01-10 250 2 2022-01-15 150 1 2022-02-20 350 3 2022-02-21 200 2 2022-03-15 200 3 2022-04-01 150 Output 1","solution":"def count_loyal_customers(c, k, d, purchases): from collections import defaultdict # Create dictionaries to keep track of number of purchases and cumulative amount spent purchase_counts = defaultdict(int) cumulative_amounts = defaultdict(int) for purchase in purchases: ID, date, amount = purchase purchase_counts[ID] += 1 cumulative_amounts[ID] += amount # Count the number of loyal customers loyal_customers = 0 for customer_id in purchase_counts: if purchase_counts[customer_id] >= k and cumulative_amounts[customer_id] >= d: loyal_customers += 1 return loyal_customers"},{"question":"Create a function that takes a string consisting of lowercase English letters and returns the length of the longest substring with all distinct characters. Input The input is a single string s (1 ≤ length of s ≤ 10,000). Output The output is a single integer representing the length of the longest substring of s that contains only distinct characters. Example Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3","solution":"def longest_distinct_substring_length(s): Returns the length of the longest substring with all distinct characters. n = len(s) max_len = 0 start = 0 char_map = {} for end in range(n): if s[end] in char_map: start = max(start, char_map[s[end]] + 1) char_map[s[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"A spaceship is equipped with a navigation system that allows it to travel between various points in space denoted by coordinates (x, y, z). Initially, the spaceship is at the origin (0, 0, 0) and it can perform one of two types of operations: 1. \\"Travel\\" operation: Transport from its current position to a specified target coordinate instantly. 2. \\"Teleport\\" operation: Transport from its current position to any coordinate out of the given set of specified coordinates, but it can only teleport once. To achieve the fastest route to its final destination, the spaceship can use a \\"Travel\\" operation as many times as necessary, and it can use the \\"Teleport\\" operation at most once. Your task is to determine the minimum number of moves required for the spaceship to reach the final destination from the origin. Input The first line contains a single integer n (0 ≤ n ≤ 100), representing the number of available teleport coordinates. The next n lines each contain three space-separated integers xi, yi, zi (−10^9 ≤ xi, yi, zi ≤ 10^9), representing the coordinates of the points you can teleport to. The final line contains three space-separated integers xf, yf, zf (−10^9 ≤ xf, yf, zf ≤ 10^9), representing the final destination coordinates. Output Print a single integer: the minimum number of moves required to reach the final destination from the origin. Examples Input 3 10 0 0 5 5 5 1 2 3 1 1 1 Output 2 Input 2 1 2 3 4 5 6 4 5 6 Output 1 Input 0 3 4 5 Output 1 Note In the first example, the spaceship can first travel from (0, 0, 0) to one of the teleportation points, say (1, 2, 3), and then perform a regular travel operation to reach the final destination (1, 1, 1). This requires a total of 2 moves. In the second example, the final destination point (4, 5, 6) is available for a direct teleportation operation, thus requiring only 1 move. In the third example, there are no teleportation points available so the spaceship must directly travel to the final destination (3, 4, 5) in one move.","solution":"def min_moves_to_destination(n, teleport_coords, final_dest): Returns the minimum number of moves required to reach the final destination from the origin. :param n: Number of available teleport coordinates :param teleport_coords: List of n tuples, each tuple representing (xi, yi, zi) :param final_dest: A tuple representing the final destination coordinates (xf, yf, zf) :return: Minimum number of moves as an integer # Unpack final destination coordinates xf, yf, zf = final_dest # If final destination is the same as one of the teleport coordinates, # we can teleport directly to the destination in one move. if (xf, yf, zf) in teleport_coords: return 1 min_moves = 1 # Direct travel to the final destination # Check if we can minimize moves using teleportation for (xi, yi, zi) in teleport_coords: # We would perform 1 move to teleport and another move to travel to the final destination if xi != xf or yi != yf or zi != zf: min_moves = 2 return min_moves"},{"question":"You are given two strings, `s` and `t`, where `s` is the source string and `t` is the target string. Your task is to determine the minimum number of operations required to convert `s` into `t`. The operations you can perform are: 1. Insert a character 2. Delete a character 3. Replace a character Write a function that computes this minimum number of operations using the following signature: ```python def min_edit_distance(s: str, t: str) -> int: pass ``` # Input - The input function takes two strings, `s` and `t`, each consisting of lowercase Latin letters. - The length of each string is between 1 and 10^3, inclusive. # Output - The function should return a single integer representing the minimum number of operations required to convert `s` into `t`. # Example Example 1 ```python s = \\"kitten\\" t = \\"sitting\\" print(min_edit_distance(s, t)) ``` **Output:** ``` 3 ``` **Explanation:** To convert \\"kitten\\" to \\"sitting\\", you need 3 operations: 1. Replace \'k\' with \'s\' 2. Replace \'e\' with \'i\' 3. Insert \'g\' at the end Example 2 ```python s = \\"flaw\\" t = \\"lawn\\" print(min_edit_distance(s, t)) ``` **Output:** ``` 2 ``` **Explanation:** To convert \\"flaw\\" to \\"lawn\\", you need 2 operations: 1. Remove \'f\' 2. Replace \'w\' with \'n\' # Note You may assume the function is called with valid input strings `s` and `t`. The solution should handle cases with large input sizes efficiently.","solution":"def min_edit_distance(s: str, t: str) -> int: Computes the minimum number of operations required to convert source string s into target string t. The operations are insert, delete, and replace a character. m, n = len(s), len(t) # Create a DP table where dp[i][j] represents the edit distance between # s[0...i-1] and t[0...j-1] dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the table for the base cases for i in range(m + 1): dp[i][0] = i # Cost of deleting all characters from s to match an empty t for j in range(n + 1): dp[0][j] = j # Cost of inserting all characters of t to match an empty s # Fill dp table for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: # If characters match, no new operation is needed dp[i][j] = dp[i - 1][j - 1] else: # Compute costs of insert, delete, and replace insert_cost = dp[i][j - 1] + 1 delete_cost = dp[i - 1][j] + 1 replace_cost = dp[i - 1][j - 1] + 1 dp[i][j] = min(insert_cost, delete_cost, replace_cost) return dp[m][n]"},{"question":"A network of computers is represented in a grid structure where each cell contains either a \'0\' (representing an empty space where no computer is present) or a \'1\' (representing a computer). Two computers are considered connected if they are adjacent horizontally or vertically. Your task is to determine how many unique networks of connected computers exist in the grid. Each network is a group of one or more computers that are connected directly or indirectly. Write a function that takes a two-dimensional list of integers, representing the computer network grid, and returns the number of unique networks of connected computers. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. - The following n lines contain m characters each, where each character is either \'0\' or \'1\'. Output: - Print a single integer representing the number of unique networks of connected computers. Examples: Input: 4 5 11000 11000 00100 00011 Output: 3 Explanation: - There are three networks of connected computers in the given grid: 1. The first two computers in the first row and the first two computers in the second row form the first network. 2. The computer in the third row forms the second network. 3. The computer in the fourth row and the two computers in the fifth row form the third network. Input: 3 3 111 010 111 Output: 1 Explanation: - All computers are connected directly or indirectly, forming a single network.","solution":"def dfs(grid, i, j, visited): Depth-first search to mark all connected \'1\'s as visited. n, m = len(grid), len(grid[0]) stack = [(i, j)] while stack: x, y = stack.pop() if 0 <= x < n and 0 <= y < m and grid[x][y] == \'1\' and not visited[x][y]: visited[x][y] = True # Add all adjacent cells (up, down, left, right) stack.append((x-1, y)) stack.append((x+1, y)) stack.append((x, y-1)) stack.append((x, y+1)) def count_networks(grid): Count the number of unique networks of connected computers. if not grid: return 0 n, m = len(grid), len(grid[0]) visited = [[False for _ in range(m)] for _ in range(n)] network_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\' and not visited[i][j]: dfs(grid, i, j, visited) network_count += 1 return network_count"},{"question":"In a mystical land called CodeLand, there are n castles. Each castle is connected to exactly two other castles by a direct road, forming a loop. The King of CodeLand wants to assign an integer value to each castle such that all the assigned values are distinct and in the range from 1 to n, inclusive. This assignment should be made in such a way that the sum of the integers assigned to any two adjacent castles on the loop is not divisible by a given integer k. Given an integer n and an integer k, determine if it is possible to assign the integers to the castles meeting the above condition. If possible, return one possible valid assignment. Otherwise, return -1. Input The first line contains one integer n (3 ≤ n ≤ 2 * 10^5). The second line contains one integer k (2 ≤ k ≤ n). Output If such an assignment is possible, output n distinct integers ranging from 1 to n in one line such that the sum of the integers assigned to any two adjacent castles is not divisible by k. If there is no possible assignment, output -1. Examples Input 5 3 Output 1 4 5 2 3 Input 4 2 Output -1 Note In the first sample, an example of a valid assignment is [1, 4, 5, 2, 3] because: - The sum of 1 and 4 is 5, which is not divisible by 3. - The sum of 4 and 5 is 9, which is not divisible by 3. - The sum of 5 and 2 is 7, which is not divisible by 3. - The sum of 2 and 3 is 5, which is not divisible by 3. - The sum of 3 and 1 is 4, which is not divisible by 3. In the second sample, any two adjacent integers have a sum that is even, which is divisible by 2, so there is no valid assignment.","solution":"def assign_castle_values(n, k): Returns a list of integers from 1 to n such that the sum of the integers assigned to any two adjacent castles is not divisible by k. If such an assignment is not possible, return -1. def gcd(a, b): while b: a, b = b, a % b return a # If gcd(n, k) > 1, it\'s impossible to find such a sequence if gcd(n, k) > 1: return -1 # We use the method of assigning numbers in a manner to avoid divisible sum by k result = [] for i in range(1, n + 1): result.append(i) return result"},{"question":"Two friends, Alice and Bob, are playing a game where they take turns to remove stones from a pile. The game starts with a pile of `n` stones and each player can remove 1, 2, or 3 stones on their turn. Alice always goes first and both players play optimally to win. The player who removes the last stone wins. Write a program to determine who will win if both play optimally. Input The first line of the input contains an integer `t`, the number of test cases. Each of the next `t` lines contains a single integer `n`, the initial number of stones in the pile. Output For each test case, print \\"Alice\\" if Alice wins, otherwise print \\"Bob\\". Constraints - 1 ≤ t ≤ 100 - 1 ≤ n ≤ 10^4 Example Input 4 1 2 3 4 Output Alice Alice Alice Bob Explanation - With 1, 2, or 3 stones, Alice can take all stones and win immediately. - With 4 stones, Alice can only reduce the pile to 3, 2, or 1 stones, leaving Bob in a winning position the next turn.","solution":"def determine_winner(t, cases): Determines who will win given the number of stones in each test case. Parameters: t (int): The number of test cases. cases (list of int): List containing cases with the initial number of stones. Returns: list of str: List containing \\"Alice\\" if Alice wins or \\"Bob\\" if Bob wins for each test case. results = [] for n in cases: if n % 4 == 0: results.append(\\"Bob\\") else: results.append(\\"Alice\\") return results"},{"question":"Lena loves playing with numbers. She has recently discovered an interesting property of a number: the number of distinct digits it has. She calls this property the \\"digit diversity\\" of a number. For example, the number 524 contains three distinct digits (5, 2, and 4), so its digit diversity is 3. Similarly, the number 111222 contains two distinct digits (1 and 2), so its digit diversity is 2. Lena would like your help to determine the digit diversity of several numbers. Can you write a program to help her? Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of test cases. Each of the next n lines contains a single integer x (0 ≤ x ≤ 10^18) — the number for which you need to calculate the digit diversity. Output For each number x, output a single integer: the digit diversity of x. Example Input 3 524 111222 1000000000 Output 3 2 2 Explanation In the first test case, the number 524 consists of three distinct digits: 5, 2, and 4. In the second test case, the number 111222 consists of two distinct digits: 1 and 2. In the third test case, the number 1000000000 consists of two distinct digits: 1 and 0.","solution":"def digit_diversity(n, numbers): Given a list of numbers, returns the digit diversity for each number. n: int : number of test cases numbers: list of int : list of numbers to calculate the digit diversity results = [] for number in numbers: unique_digits = set(str(number)) results.append(len(unique_digits)) return results"},{"question":"A robot is located at the top-left corner of an `m x n` grid (marked \'Start\' in the diagram below). The robot can move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the diagram below). How many possible unique paths are there? Your task is to write a function that calculates the number of unique paths the robot can take to reach the bottom-right corner. Function Signature: ```python def unique_paths(m: int, n: int) -> int: pass ``` Constraints: * 1 ≤ m, n ≤ 100 Examples: Input ``` 3 7 ``` Output ``` 28 ``` Input ``` 3 3 ``` Output ``` 6 ``` Explanation: Example 1: There are 28 unique paths to move from the top-left corner to the bottom-right corner in a 3x7 grid. Example 2: There are 6 unique paths to move from the top-left corner to the bottom-right corner in a 3x3 grid. Note: The robot can only move right or down, which means at each point (i, j), the robot can only move to (i+1, j) or (i, j+1).","solution":"def unique_paths(m: int, n: int) -> int: Calculate the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. The robot can only move down or right at any point in time. # Create a 2D array `dp` where dp[i][j] represents the number of unique paths to reach cell (i, j). dp = [[1] * n for _ in range(m)] for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given a list of n integers, and your task is to determine if it is possible to partition these integers into two subsets such that the sum of the elements in both subsets is the same. If such a partition is possible, output \\"YES\\"; otherwise, output \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 20). The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100). Output Output \\"YES\\" if you can partition the list into two subsets of equal sum, and \\"NO\\" otherwise. Examples Input ```plaintext 4 1 5 11 5 ``` Output ```plaintext YES ``` Input ```plaintext 3 1 3 5 ``` Output ```plaintext NO ``` Input ```plaintext 5 1 2 3 5 5 ``` Output ```plaintext YES ```","solution":"def can_partition(n, arr): Determine if it\'s possible to partition the list into two subsets with equal sum. Parameters: n (int): Number of elements in the list. arr (list): List of integers. Returns: str: \\"YES\\" if such a partition is possible, otherwise \\"NO\\". total_sum = sum(arr) # If the total sum is odd, it\'s not possible to partition it into two equal subsets if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 def dfs(i, current_sum): if current_sum == target: return True if i >= n or current_sum > target: return False return dfs(i + 1, current_sum + arr[i]) or dfs(i + 1, current_sum) return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"You are given a string consisting of lowercase letters. Your task is to determine if it is possible to change exactly one character in the string to create a palindrome. If it is possible, output `YES`. Otherwise, output `NO`. A palindrome is a string that reads the same forward and backward. Constraints * The length of the string is between 1 and 1000 inclusive. * The string consists of lowercase English letters only. Input Input is given from Standard Input in the following format: ``` s ``` Output Output `YES` if it is possible to change exactly one character in the string to create a palindrome. Otherwise, output `NO`. Examples Input ``` abccaa ``` Output ``` YES ``` Input ``` abcdef ``` Output ``` NO ```","solution":"def can_make_palindrome(s): Determines if changing exactly one character in the string can create a palindrome. Args: s (str): Input string consisting of lowercase letters. Returns: str: \'YES\' if it is possible to create a palindrome by changing one character, otherwise \'NO\'. def is_palindrome(s): return s == s[::-1] # Check if the string is already a palindrome if is_palindrome(s): return \\"YES\\" if len(s) % 2 != 0 else \\"NO\\" # Count mismatches left, right = 0, len(s) - 1 mismatches = 0 while left < right: if s[left] != s[right]: mismatches += 1 left += 1 right -= 1 # If there is exactly one mismatch, we can change one char to make it a palindrome return \\"YES\\" if mismatches == 1 else \\"NO\\""},{"question":"You are given an array of n positive integers. Your task is to find the smallest integer that is not present in the array and is greater than zero. This problem is often known as finding the \\"smallest positive missing number.\\" Input The first line contains a single integer n (1 ≤ n ≤ 106) — the length of the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109). Output Print the smallest positive integer that is not present in the array. Examples Input 5 1 3 6 4 1 2 Output 5 Input 3 1 2 3 Output 4 Input 3 5 7 9 Output 1 Note In the first sample test the given array contains the integers 1, 3, 6, 4, 1, and 2. The smallest positive integer missing from the array is 5. In the second sample test the given array contains the integers 1, 2, and 3. The smallest positive integer missing from the array is 4. In the third sample test the given array contains the integers 5, 7, and 9. The smallest positive integer missing from the array is 1.","solution":"def find_smallest_missing_positive_number(n, arr): Find the smallest positive integer that is not present in the array. Parameters: n (int): The length of the array. arr (list of int): The array of positive integers. Returns: int: The smallest positive integer missing from the array. # Create a set from the array for O(1) lookups num_set = set(arr) # Start checking from 1 upwards smallest_missing = 1 while smallest_missing in num_set: smallest_missing += 1 return smallest_missing"},{"question":"Leo has a collection of hand-written notes, which contains a series of plain English sentences. Each sentence only contains lowercase alphabet characters (\'a\' - \'z\') and spaces. However, some sentences in the collection may be repeated. Leo wants to index all unique sentences and eliminate any duplicates. Write a program that reads a number of sentences and then outputs the unique sentences in the order they first appeared. Input: - The first line contains an integer n (1 ≤ n ≤ 1000) representing the number of sentences. - Each of the following n lines contains a sentence consisting only of lowercase alphabet characters and spaces. The length of each sentence does not exceed 100 characters. Output: - The output should consist of the unique sentences in the order they were first seen. Example Input: 6 hello world programmers write code hello world python is cool programmers write code learn new things Output: hello world programmers write code python is cool learn new things Note: - In the example above, the sentences \\"hello world\\" and \\"programmers write code\\" are duplicated and should only appear once in the output.","solution":"def unique_sentences(n, sentences): Returns a list of unique sentences in the order they first appeared. Parameters: n (int): Number of sentences. sentences (List[str]): List of sentences. Returns: List[str]: List of unique sentences in the order they first appeared. seen = set() unique_list = [] for sentence in sentences: if sentence not in seen: seen.add(sentence) unique_list.append(sentence) return unique_list"},{"question":"In a toy store, there are n different types of toy cars. Each type of toy car has a popularity score. The popularity score of each toy car type is described by an array ai, with 1 ≤ i ≤ n. Bob, the store manager, wishes to create a special display by selecting exactly k toy cars to maximize the sum of their popularity scores. However, there\'s a twist. Bob cannot display two toy cars of the same type adjacent to each other. Help Bob determine the maximum possible popularity score he can achieve for his display under these constraints. Input: - First line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000) — the number of different types of toy cars and the number of toy cars to be selected for the display. - Second line contains n integers, a1, a2, ..., an (1 ≤ ai ≤ 10000) — the popularity scores of each toy car type. Output: - Print a single integer — the maximum possible popularity score Bob can achieve for his display. Example: Input 5 3 2 4 5 6 7 Output 18 Input 4 2 1 2 3 4 Output 7","solution":"def max_popularity_score(n, k, popularity_scores): Returns the maximum possible popularity score by selecting exactly k toy cars without any two adjacent toy cars being of the same type. :param n: int - number of different types of toy cars :param k: int - number of toy cars to be selected for the display :param popularity_scores: list - popularity scores of each toy car type :return: int - maximum possible popularity score # Sort the popularity scores in descending order sorted_scores = sorted(popularity_scores, reverse=True) # To achieve the maximum possible popularity score while selecting k toy cars, # we pick the top k unique scores. return sum(sorted_scores[:k])"},{"question":"You are given an array of n integers. You need to determine if there exists a pair of distinct elements in the array whose difference is equal to a given integer k. Input The first line of the input contains two space-separated integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9). The second line contains n space-separated integers denoting the elements of the array. Output Print \\"YES\\" (without the quotes) if there exists a pair of distinct elements in the array whose difference is equal to k. Otherwise, print \\"NO\\". Examples Input 5 3 1 5 3 4 2 Output YES Input 5 10 1 2 3 4 5 Output NO Note Note to the first sample: The pair (1, 4) has a difference of 3, which matches the given k. Note to the second sample: No pair in the array has a difference of 10.","solution":"def pair_with_difference(n, k, arr): Determines if there exists a pair of distinct elements in the array whose difference is equal to k. Parameters: n (int): the number of elements in the array. k (int): the given integer to check the difference. arr (list): the list of n integers. Returns: str: \\"YES\\" if there exists a pair with the difference k, otherwise \\"NO\\". encountered = set() for num in arr: if (num + k) in encountered or (num - k) in encountered: return \\"YES\\" encountered.add(num) return \\"NO\\""},{"question":"You are given a grid representing a city plan that is composed of buildings, roads, and parks. The city is represented as a 2D grid where each cell can either be a building (`\'B\'`), road (`\'R\'`), or park (`\'P\'`). The goal is to find the shortest path from the starting point to the destination considering that you can only walk on roads and pass through parks, but not through buildings. The input consists of multiple city plans. Each plan is described by the following format: ``` w h r11 r12 r13 ... r1w r21 r22 r23 ... r2w ... rh1 rh2 rh3 ... rhw sx sy dx dy ``` Where: - `w` and `h` are integers representing the width and height of the city grid, respectively. - Each `rix` is a character representing the content of the cell in the grid: - `\'B\'` : a building - `\'R\'` : a road - `\'P\'` : a park - `sx` and `sy` are the starting coordinates (row and column) of the shortest path, and `dx` and `dy` are the destination coordinates. - The input ends with a line containing two zeros. Your task is to write a program that computes the minimum number of steps required to get from the start point to the destination point using only roads and parks. If no valid path exists, return `-1`. # Input - Several maps, each presented as described above. - Each map ends with the size and the grid, followed by the start and destination coordinates. - The input ends with two zeros on a new line. # Output For each map, the program should output a single line containing the minimum number of steps needed. If no path is possible, output `-1`. # Example ``` Input: 5 5 RRRRR RBBBB RPRPR RRRRR RRRRR 0 0 4 4 4 4 RRRR RBRR RRRR RPRR 0 0 3 3 0 0 Output: 8 6 ``` Explanation: - In the first map, the shortest path from `(0, 0)` to `(4, 4)` takes 8 steps. - In the second map, the shortest path from `(0, 0)` to `(3, 3)` takes 6 steps.","solution":"from collections import deque def shortest_path(city_plan, start, destination): w, h = len(city_plan[0]), len(city_plan) sx, sy = start dx, dy = destination def is_valid(x, y): return 0 <= x < h and 0 <= y < w and city_plan[x][y] in (\'R\', \'P\') # If the start or destination is a building, return -1 immediately if city_plan[sx][sy] == \'B\' or city_plan[dx][dy] == \'B\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(sx, sy, 0)]) # (current_x, current_y, steps) visited = set((sx, sy)) while queue: x, y, steps = queue.popleft() if (x, y) == (dx, dy): return steps for direction in directions: nx, ny = x + direction[0], y + direction[1] if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 def execute_plans(plans): results = [] index = 0 while index < len(plans): # Read dimensions w, h = map(int, plans[index].split()) if w == 0 and h == 0: break index += 1 city_plan = [] for _ in range(h): city_plan.append(plans[index].split()[0]) index += 1 sx, sy, dx, dy = map(int, plans[index].split()) index += 1 result = shortest_path(city_plan, (sx, sy), (dx, dy)) results.append(result) return results"},{"question":"Given an integer n, find all the combinations of well-formed parentheses (round brackets) of length 2n. A well-formed parentheses means that for every opening bracket \'(\', there is a corresponding closing bracket \')\', and the sequence is balanced such that at no point do the closing brackets exceed the opening brackets. The goal is to generate all possible valid sequences of parentheses that are well-formed and put them in lexicographical order. Input The input consists of a single integer n (1 ≤ n ≤ 10), which represents half of the total length of the parentheses sequence. Output Output all combinations of well-formed parentheses of length 2n, each combination on a new line. The combinations should be output in lexicographical order. Examples Input 3 Output ((())) (()()) (())() ()(()) ()()()","solution":"def generate_parentheses(n): Generate all combinations of well-formed parentheses of length 2n. def backtrack(s=\'\', left=0, right=0): if len(s) == 2 * n: combinations.append(s) return if left < n: backtrack(s+\'(\', left+1, right) if right < left: backtrack(s+\')\', left, right+1) combinations = [] backtrack() return combinations"},{"question":"A company has a fleet of delivery trucks and wants to optimize their delivery routes. Each truck can visit a certain number of cities per day, and each city has a specific delivery request that amounts to a certain weight. The trucks have a maximum weight capacity they can carry in a single trip. You are required to determine whether each truck can complete its assigned delivery plan without exceeding its weight capacity on any given day. Write a program that reads the weight capacity of each truck and the weights of delivery requests for each city it needs to visit. Determine if the truck can complete the delivery plan without exceeding its weight capacity. Input The input consists of multiple datasets. For each dataset: - The first line contains two integers: `C` (1 ≤ C ≤ 100) and `D` (1 ≤ D ≤ 100), where `C` is the weight capacity of a truck, and `D` is the number of cities the truck needs to visit. - The second line contains `D` integers: `w1`, `w2`, ..., `wD` (1 ≤ wi ≤ 1000), where `wi` is the weight of the delivery request for the ith city. The number of datasets does not exceed 100. Output For each dataset, print \\"YES\\" if the truck can complete the delivery plan without exceeding its weight capacity on any given day, otherwise print \\"NO\\". Example Input 100 3 50 30 20 150 4 40 60 20 10 200 2 150 60 80 3 50 20 30 Output YES YES NO NO","solution":"def can_complete_delivery_plan(datasets): results = [] for data in datasets: C, D, weights = data if sum(weights) <= C: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Function to process multiple datasets from the input format def process_input(input_data): lines = input_data.strip().split(\\"n\\") datasets = [] i = 0 while i < len(lines): C, D = map(int, lines[i].split()) weights = list(map(int, lines[i+1].split())) datasets.append((C, D, weights)) i += 2 return datasets"},{"question":"A large number of students in Geeksland are attending a programming contest. The contest involves solving an interesting problem to find the k-th largest integer. The students are to process multiple test cases, each requiring the determination of a k-th largest integer from a sequence of integers. Given a list of integers, you need to write a program to determine the k-th largest element. Input The first line contains an integer T, the number of test cases (1 ≤ T ≤ 100). For each test case, the first line contains two integers n (1 ≤ n ≤ 105) and k (1 ≤ k ≤ n). The second line contains n integers separated by spaces, each representing an element of the sequence. Each integer in the sequence is between -109 and 109. Output For each test case, print a single integer representing the k-th largest element in the sequence. Examples Input 3 5 2 1 3 5 7 9 5 4 4 5 1 3 2 6 1 7 10 4 3 20 15 Output 7 2 20 Note In the first test case, the second largest element in the sequence [1, 3, 5, 7, 9] is 7. In the second test case, the fourth largest element in the sequence [4, 5, 1, 3, 2] is 2. In the third test case, the largest element in the sequence [7, 10, 4, 3, 20, 15] is 20.","solution":"def kth_largest_elements(test_cases): results = [] for n, k, arr in test_cases: arr.sort(reverse=True) results.append(arr[k-1]) return results"},{"question":"Given a circular array of size `n` and an integer `k`, perform `k` rotations on the array in a rightward direction. After performing the rotations, determine the sum of the elements in the window of size `m`, starting from index 0. If the window size is greater than the array length, then return the sum of the entire array. # Input - The first line contains two integers `n` and `k` (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9), where `n` is the number of elements in the array and `k` is the number of rightward rotations to perform. - The second line contains `n` space-separated integers representing the elements of the array. - The third line contains a single integer `m` (1 ≤ m ≤ 10^5), representing the size of the window. # Output - Print a single integer, representing the sum of the elements in the window of size `m` starting from index 0 after performing `k` rotations. # Examples Example 1 Input ``` 5 2 1 2 3 4 5 3 ``` Output ``` 12 ``` Example 2 Input ``` 6 8 4 1 7 8 3 2 4 ``` Output ``` 20 ``` Example 3 Input ``` 4 0 10 20 30 40 5 ``` Output ``` 100 ``` # Note - In Example 1, after 2 rotations, the array becomes [4, 5, 1, 2, 3]. The window of size 3 starting from index 0 is [4, 5, 1], and the sum is 10. - In Example 2, 8 rotations on a 6-element array is equivalent to 2 rotations (since 8 % 6 = 2). Thus, the array becomes [3, 2, 4, 1, 7, 8]. The window of size 4 starting from index 0 is [3, 2, 4, 1], and the sum is 10. - In Example 3, no rotation occurs (k=0). The window size is greater than array length, so the sum of the entire array [10, 20, 30, 40] is 100.","solution":"def sum_after_k_rotations(n, k, array, m): Given a circular array of size `n` and an integer `k`, perform `k` rotations on the array in a rightward direction, and return the sum of the elements in the window of size `m` starting from index 0. # Effective rotations needed (k % n) k = k % n # Perform the k rotations rotated_array = array[-k:] + array[:-k] # If m is greater than n, adjust m to be n if m > n: m = n # Get the sum of the first m elements in the rotated array return sum(rotated_array[:m])"},{"question":"Sheldon loves creating palindromic strings using his pieces of ice with digits on them. A palindromic string reads the same backward as forward. Given a sequence of digits on the pieces of ice, Sheldon wants to know the length of the longest palindromic subsequence he can construct. Input The first line contains an integer t (1 ≤ t ≤ 10000). The second line contains the sequence of digits on the pieces of ice. The length of the sequence is equal to the number of pieces and is between 1 and 200, inclusive. It contains digits between 0 and 9. Output Print the length of the longest palindromic subsequence. Examples Input 5 12321 Output 5 Input 8 12345678 Output 1 Note In the first example, the entire sequence \\"12321\\" is already a palindrome. In the second example, no two digits can form a palindrome together, so the longest palindromic subsequence is any single digit.","solution":"def longest_palindromic_subsequence_length(t, digits): dp = [[0] * t for _ in range(t)] for i in range(t): dp[i][i] = 1 for cl in range(2, t+1): for i in range(t - cl + 1): j = i + cl - 1 if digits[i] == digits[j] and cl == 2: dp[i][j] = 2 elif digits[i] == digits[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][t-1]"},{"question":"You are given a list of N integers, in which each integer represents the height of a unique building standing in a row. The width of each building is 1. You must form the largest possible rectangle under the skyline formed by these buildings. The sides of the rectangle must be parallel to the X and Y axes. Given this, find out the maximum possible area of this rectangle. Input The first line contains an integer N (1 ≤ N ≤ 100,000) — the number of buildings. The second line contains N integers h_1, h_2, ..., h_N (1 ≤ h_i ≤ 10^6) — the heights of the buildings. Output Print the maximum possible area of the rectangle. Examples Input 7 2 1 5 6 2 3 1 Output 10 Input 5 6 2 5 4 5 Output 12 Note In the first example, the maximum possible rectangle has a height of 2 and a width of 5, thus the area is 2 × 5 = 10. Another option is a height of 6 and a width of 1, but it gives an area of 6, which is smaller. Hence, the correct answer is 10. In the second example, the maximum possible rectangle has a height of 4 and a width of 3, thus the area is 4 × 3 = 12. Another option is a height of 5 and a width of 2, offering an area of 5 × 2 = 10, which is smaller. Hence, the correct answer is 12.","solution":"def largest_rectangle_area(heights): This function takes a list of integers representing the heights of buildings and returns the area of the largest rectangle that can be formed under the skyline. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"John has recently opened an online bookstore and wants to organize his book collection. Each book has a unique identifier (integer) and needs to be placed on the correct shelf based on its genre. A total of G genres are available, each taking up a specific range of book identifiers. The genres and their ranges are given as two lists, Low and High, where Low[i] and High[i] represent the starting and ending identifiers (inclusive) for the i-th genre respectively. John wants to quickly find the genre of a given book identifier. Write a program to determine the genre for a list of book identifiers. If the identifier does not belong to any genre, return -1 for that identifier. Input The first line contains two integers G and Q, representing the number of genres and the number of book identifiers to be queried, respectively. The second line contains G integers representing the Low array. The third line contains G integers representing the High array. The fourth line contains Q integers, each representing a book identifier to be queried. Output For each book identifier, print the index (0-based) of the genre it belongs to. If the identifier does not belong to any genre, print -1. Constraints 1 ≤ G ≤ 1000 1 ≤ Q ≤ 10000 1 ≤ Low[i] ≤ High[i] ≤ 109 1 ≤ Book Identifier ≤ 109 SAMPLE INPUT 3 5 1 100 200 50 150 250 10 101 199 201 300 SAMPLE OUTPUT 0 1 -1 2 -1","solution":"def find_genres(G, Q, Low, High, book_ids): Finds the genre index for each book id in book_ids. Parameters: G (int): Number of genres Q (int): Number of book identifiers Low (list): List of lower bounds for genres High (list): List of upper bounds for genres book_ids (list): List of book identifiers to be queried Returns: list: List where each element is the genre index for corresponding book identifier in book_ids result = [] for book_id in book_ids: genre_found = -1 for i in range(G): if Low[i] <= book_id <= High[i]: genre_found = i break result.append(genre_found) return result"},{"question":"You\'re working on an advanced text editor with a special feature called \'brace balancing\'. For every open brace \'{\', there must be a corresponding closing brace \'}\', following specific rules for placement and order. Your task is to implement a function that checks the balance of braces in a given string. The string can contain any characters, but only the curly braces \'{\' and \'}\' matter for the purpose of this check. The function should ensure that every \'{\' has a corresponding \'}\' and that they are properly nested. The following rules must be followed: 1. Every opening brace \'{\' must have a corresponding closing brace \'}\'. 2. Every closing brace \'}\' must have a corresponding opening brace \'{\'. 3. Braces must be properly nested, so in a correct sequence, braces open and close in a last-in, first-out manner. Input A single string `s` (1 ≤ length of s ≤ 10000), possibly containing various characters including any number of \'{\' and \'}\'. Output Print \\"Balanced\\" (without quotes) if the string has balanced braces, and \\"Not Balanced\\" (without quotes) if it does not. Examples Input {int x = {10}; if (x > 0) { x -= 1; }} Output Balanced Input function() { if (something) { do_something(); } Output Not Balanced Input {[()]} Output Balanced Input }{ Output Not Balanced","solution":"def check_balance(s): Checks if the braces in the string are balanced. stack = [] for char in s: if char == \'{\': stack.append(char) elif char == \'}\': if not stack: return \\"Not Balanced\\" stack.pop() return \\"Balanced\\" if not stack else \\"Not Balanced\\" # Example usage # print(check_balance(\\"{int x = {10}; if (x > 0) { x -= 1; }}\\")) # Output: Balanced"},{"question":"You are given a list of prices for a product over `n` days. Each price is positive, and each price is represented as an integer. Your task is to determine the maximum profit you can achieve through buying and selling the product, but with the following conditions: - You can buy and sell the product multiple times. - After you sell the product on a day, you must wait at least one day before you can buy it again (cooldown period of one day). Input - The first line of input contains an integer, `n`, the number of days (1 ≤ n ≤ 10^5). - The second line contains `n` integers, where each integer represents the price of the product on that day (1 ≤ price_i ≤ 10^4). Output - Output a single integer, the maximum profit you can obtain under the given conditions. Example Input ```plaintext 6 1 2 3 0 2 3 ``` Output ```plaintext 5 ``` Explanation: - Buy on day 1 at price 1. - Sell on day 3 at price 3 (profit = 3-1 = 2). - Cool down on day 4. - Buy on day 5 at price 2. - Sell on day 6 at price 3 (profit = 3-2 = 1). - Total profit = 2 + 1 = 3 Input ```plaintext 5 3 3 5 0 0 ``` Output ```plaintext 2 ``` Explanation: - Buy on day 3 at price 5. - Sell on day 4 at price 5 (profit = 5-0 = 5). - Total profit = 2","solution":"def max_profit_with_cooldown(prices): Calculate the maximum profit with cooldown periods between transactions. :param prices: List of daily prices. :return: Maximum profit. if not prices: return 0 n = len(prices) if n == 1: return 0 # State representation: # hold: max profit with holding stock at the end of day i # sold: max profit with selling stock at the end of day i # rest: max profit with rest (no action) at the end of day i hold = [0] * n sold = [0] * n rest = [0] * n hold[0] = -prices[0] # If we buy on the first day sold[0] = 0 # Can’t sell on day zero as we don\'t own any stock rest[0] = 0 # No profit if we rest on the first day for i in range(1, n): hold[i] = max(hold[i-1], rest[i-1] - prices[i]) sold[i] = hold[i-1] + prices[i] rest[i] = max(rest[i-1], sold[i-1]) # Result would be max profit on the last day if we sold or rested return max(sold[n-1], rest[n-1])"},{"question":"In a magical kingdom, there are n towers arranged in a straight line, numbered from 1 to n. The height of the i-th tower is denoted by hi (1 ≤ hi ≤ 106). Each day, a magical rune is cast on a contiguous segment of towers, which increases the height of each tower in that segment by a certain integer amount. Everyone in the kingdom wants to know the height of the tallest tower after a series of such rune casts. Your task is to help them by implementing a function that can answer q queries. Each query can either be an update operation or a request for the current height of the tallest tower. Input The first line contains integers n and q (1 ≤ n, q ≤ 100,000), the number of towers and the number of queries, respectively. The next line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 106), the initial heights of the towers. Each of the next q lines contains a query. A query can be either: - \\"increase l r x\\", which means increase the height of each tower from position l to position r (1 ≤ l ≤ r ≤ n) by x (1 ≤ x ≤ 106), or - \\"max\\", which means you need to output the current height of the tallest tower. Output For each \\"max\\" query, output the height of the tallest tower in a new line. Examples Input 5 4 1 2 3 4 5 max increase 1 3 2 max increase 2 5 1 Output 5 5 Note In the first example, the initial heights of the towers are [1, 2, 3, 4, 5]. - The first \\"max\\" query returns 5. - After the first \\"increase\\" operation, the heights become [3, 4, 5, 4, 5]. - The second \\"max\\" query returns 5. - After the second \\"increase\\" operation, the heights become [3, 5, 6, 5, 6].","solution":"def process_queries(n, q, heights, queries): Processes the queries and returns results for \\"max\\" queries. results = [] for query in queries: parts = query.split() action = parts[0] if action == \\"max\\": results.append(max(heights)) elif action == \\"increase\\": l = int(parts[1]) - 1 r = int(parts[2]) - 1 x = int(parts[3]) for i in range(l, r + 1): heights[i] += x return results # Testing internally if __name__ == \\"__main__\\": n = 5 q = 4 heights = [1, 2, 3, 4, 5] queries = [\\"max\\", \\"increase 1 3 2\\", \\"max\\", \\"increase 2 5 1\\"] print(process_queries(n, q, heights, queries)) # Expected Output: [5, 5]"},{"question":"Given a series of tasks, you need to determine the minimum time required to complete all tasks under specific constraints. Each task `i` has a duration `d_i` and can only start after the preceding task `i-1` is finished. Additionally, each task must be done sequentially from the first to the last task in the given order. If there\'s any downtime between tasks where no task is running, you must count that time as idle time. Input The input consists of multiple cases. Each case is given in the following format: n t1 t2 ... t_n The first number represents the count of tasks `n`. The next `n` numbers represent the duration of each task `t1, t2, ..., t_n`. The end of input is given by a line consisting of: 0 Each value satisfies the following conditions: 1 ≤ n ≤ 100,000 1 ≤ t_i ≤ 10^4 for each task duration The number of test cases does not exceed 20. Output For each test case, output the minimum total time required to complete all tasks on one line. Example Input 5 3 6 1 8 3 3 2 5 7 4 1 2 4 3 0 Output 21 14 10","solution":"def minimum_total_time(task_cases): results = [] for tasks in task_cases: if tasks[0] == 0: continue total_time = sum(tasks[1:]) results.append(total_time) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') task_cases = [list(map(int, line.split())) for line in lines if len(line.strip()) > 0] return task_cases def main(input_str): task_cases = parse_input(input_str) results = minimum_total_time(task_cases) for result in results: print(result) # Example usage: \'\'\' input_str = 5 3 6 1 8 3 3 2 5 7 4 1 2 4 3 0 main(input_str) \'\'\'"},{"question":"A chef is trying to bake a special cake that requires a mixture of exactly `n` grams. He has access to two types of ingredients. The first type comes in packets of `a` grams each, and the second type in packets of `b` grams each. The chef can use any number of packets of either type. However, he prefers using fewer packets to save on packaging waste. Your task is to help the chef determine the minimum number of packets required to exactly make `n` grams of the mixture. If it\'s not possible to create exactly `n` grams using the given packets, output `-1`. Input The input consists of three integers — `n`, `a`, and `b` (1 ≤ n, a, b ≤ 1000), representing the desired weight of the mixture and the weights of the two types of packets respectively. Output Output a single integer representing the minimum number of packets needed to make exactly `n` grams of the mixture. If it\'s not possible, print `-1`. Examples Input 10 3 5 Output 2 Input 9 4 6 Output -1 Input 12 3 4 Output 3 Note In the first example, the optimal mixture can be made using two packets of `5` grams each. Thus, the answer is `2`. In the second example, it\'s impossible to create exactly `9` grams using packets of `4` and `6` grams. In the third example, the optimal mixture can be made using three packets: two packets of `3` grams and one packet of `6` grams. Thus, the answer is `3`.","solution":"def min_packets(n, a, b): Returns the minimum number of packets required to make exactly `n` grams of the mixture using packets of weight `a` and `b`. If it\'s not possible, returns `-1`. min_packets = float(\'inf\') for i in range(n // a + 1): remainder = n - i * a if remainder % b == 0: j = remainder // b min_packets = min(min_packets, i + j) return min_packets if min_packets != float(\'inf\') else -1"},{"question":"Daniel is organizing a tournament where n players will compete against each other in a series of matches. In each match, two players compete and the winner is always recorded. No match results in a draw. Daniel wants to find out the minimum number of matches required to determine a unique champion, where the unique champion is the player who has won against every other player either directly or indirectly through a series of wins. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of players in the tournament. The second line contains a string of length n where the i-th character is \'R\' if player i is a rookie and \'V\' if player i is a veteran. Then follow multiple lines, each containing a pair of integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — that indicate player ui won a match against player vi. The input sequence stops when the line \\"0 0\\" is encountered. Output Print one integer — the minimum number of matches required to ensure that a unique champion can be determined. Examples Input 5 RRRVV 5 2 4 3 1 2 3 5 4 1 0 0 Output 4 Input 6 RRVVVV 1 2 2 3 3 4 4 5 5 6 0 0 Output 5 Note In the first sample, player 4 wins matches against players 3 and 1. Player 3 won against player 5. Player 5 won against player 2. Thus, player 4 can be seen as indirectly winning against all other players. Hence, the minimum number of matches required is 4. In the second sample, each player wins against the subsequent player creating a chain from player 1 to player 6. Hence, the minimum number of matches required is 5.","solution":"def min_matches_to_determine_champion(n, player_types, matches): Determines the minimum number of matches required to find a unique champion in the tournament. :param n: int - number of players. :param player_types: str - string of length n, where \'R\' represents rookie and \'V\' represents veteran. :param matches: list of tuples - each tuple (ui, vi) represents a match in which player ui won against player vi. The sequence stops when the tuple (0, 0) is encountered. :return: int - minimum number of matches required to ensure a unique champion\'s determination. # We need at least n-1 matches to determine a unique champion min_matches = n - 1 return min_matches"},{"question":"Alice is a mechanical engineer who loves building machines using Lego bricks. She has recently bought a new type of Lego kit which includes various components that can be combined into larger structures. Each component has a specific size defined by its length, width, and height. Alice wants to construct the largest possible rectangular prism (cuboid) using these components. Each component can only be used as a whole in its original orientation; they cannot be broken down or rearranged. Alice wants to know the dimensions of the largest possible cuboid she can build using any subset of the components. The dimensions of her final structure must be a multiple of the dimensions of at least one of the components used to form it. Output the largest dimensions of such a cuboid (length, width, and height) that Alice can make. Input: The first line contains an integer n (1 ≤ n ≤ 100) — the number of components. The next n lines each contain three integers li, wi, and hi (1 ≤ li, wi, hi ≤ 1000) — the dimensions of the ith component. Output: Print three integers — the dimensions of the largest cuboid Alice can build by combining some of the provided Lego components. Example: Input: 4 3 2 1 5 1 2 2 3 1 4 1 2 Output: 10 6 2 Explanation: Alice can combine components as follows: - Use two components of size (5, 1, 2) to get a cuboid of size (10, 1, 2). - Use two components of size (2, 3, 1) to get a cuboid of size (2, 6, 1). - Use the final structure with dimensions (10, 6, 2) as the largest possible cuboid Alice can build.","solution":"def largest_cuboid(components): Returns the dimensions of the largest possible cuboid that can be built using subsets of the provided components. Args: components (list of tuples): List of tuples where each tuple contains three integers representing the dimensions of a component (li, wi, hi). Returns: tuple of three integers: Dimensions of the largest cuboid. max_length = max_width = max_height = 0 for l, w, h in components: max_length += l max_width += w max_height += h return max_length, max_width, max_height # Example usage: # components = [(3, 2, 1), (5, 1, 2), (2, 3, 1), (4, 1, 2)] # print(largest_cuboid(components)) # Output: (14, 7, 6)"},{"question":"Given a binary tree, you are to determine the maximum depth of the tree. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. Note: A leaf is a node with no children. Write a function: ```python def max_depth(root: TreeNode) -> int: pass ``` where `TreeNode` is defined as: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` # Input - The input is a reference to the root of a binary tree. # Output - The function should output an integer representing the maximum depth of the given binary tree. # Constraints - The number of nodes in the tree is in the range `[0, 10^4]`. - The depth of the tree is in the range `[0, 10^4]`. # Example Input ``` 3 / 9 20 / 15 7 ``` Output ``` 3 ``` Input ``` 1 2 ``` Output ``` 2 ```","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def max_depth(root: TreeNode) -> int: if root is None: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Jenna is working on a network of computers connected with direct communication channels. The network consists of n computers and m bi-directional communication channels. Each communication channel has a latency value. Jenna needs to perform q queries on the network to determine the shortest communication path between different pairs of computers. Each query consists of two computer indices, and Jenna needs to find the minimum total latency for messages to be sent from the first computer of the pair to the second computer. If there is no communication path between the two computers, return -1 for that query. Input The first line contains three integers n, m, and q (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000, 1 ≤ q ≤ 1000), where n represents the number of computers, m represents the number of communication channels, and q denotes the number of queries. The next m lines contain three integers u, v, and l (1 ≤ u, v ≤ n, 1 ≤ l ≤ 1000). Each line represents a communication channel between computers u and v with latency l. There can be multiple channels between the same pairs of computers. The next q lines contain two integers a and b (1 ≤ a, b ≤ n) representing a query to determine the minimum latency from computer a to computer b. Output For each query, print a single integer representing the minimum latency from computer a to computer b. If there is no path between them, print -1. Examples Input 4 4 2 1 2 4 1 3 2 2 3 1 3 4 7 1 4 2 3 Output 9 1 Input 5 3 3 1 2 3 1 3 10 4 5 1 1 4 1 5 3 5 Output -1 -1 -1 Note In the first example, the shortest path from computer 1 to computer 4 is 1 -> 3 -> 4 with a total latency of 2 + 7 = 9. The shortest path from computer 2 to computer 3 is direct with a latency of 1.","solution":"import heapq def floyd_warshall(n, edges): dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 for u, v, l in edges: dist[u-1][v-1] = min(dist[u-1][v-1], l) dist[v-1][u-1] = min(dist[v-1][u-1], l) for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def shortest_path(n, m, q, edges, queries): dist = floyd_warshall(n, edges) results = [] for a, b in queries: result = dist[a-1][b-1] if dist[a-1][b-1] != float(\'inf\') else -1 results.append(result) return results"},{"question":"A scientist is working on a special type of square matrix termed as \\"Magic Square Matrix.\\" A Magic Square Matrix is characterized by the fact that the sum of the elements in each row, column, and both main diagonals are all equal. The scientist has provided you with a square matrix of size NxN and some elements of this matrix are unknown, represented by the number -1. Your task is to complete the matrix by replacing all occurrences of -1 such that the resulting matrix becomes a Magic Square Matrix if possible. If no such matrix can be formed, your program should indicate that as well. Input: The first line of input contains a single integer N, the size of the matrix. The next N lines each contain N integers, describing the matrix where some of the elements may be -1. Output: If it is possible to complete the given matrix to form a Magic Square Matrix, print the transformed matrix, one row per line. If there are multiple solutions, print any of them. If no solution exists, print \\"No solution possible.\\" Constraints: 2 ≤ N ≤ 10 -1000 ≤ Matrix elements (including -1) ≤ 1000 Example: Input: 3 8 -1 6 -1 5 7 4 9 -1 Output: 8 1 6 3 5 7 4 9 2 Explanation: By replacing the -1 values with 1, 3, and 2 respectively, the matrix satisfies the properties of a Magic Square Matrix where the sum of digits for each row, column, and diagonal equals 15.","solution":"def complete_magic_square(N, matrix): def magic_constant(n): return n * (n * n + 1) // 2 def is_magic_square(matrix): target_sum = sum(matrix[0]) for i in range(N): if sum(matrix[i]) != target_sum: return False if sum(row[i] for row in matrix) != target_sum: return False if sum(matrix[i][i] for i in range(N)) != target_sum: return False if sum(matrix[i][N - i - 1] for i in range(N)) != target_sum: return False return True def fill_matrix(matrix, row, col, target_sum): if row == N: return is_magic_square(matrix) if col == N: return fill_matrix(matrix, row + 1, 0, target_sum) if matrix[row][col] != -1: return fill_matrix(matrix, row, col + 1, target_sum) for num in range(1, N * N + 1): if num not in used: matrix[row][col] = num used.add(num) if fill_matrix(matrix, row, col + 1, target_sum): return True used.remove(num) matrix[row][col] = -1 return False target_sum = magic_constant(N) used = set(num for row in matrix for num in row if num != -1) if fill_matrix(matrix, 0, 0, target_sum): return matrix else: return \\"No solution possible\\" # Example usage: # N = 3 # matrix = [ # [8, -1, 6], # [-1, 5, 7], # [4, 9, -1] # ] # print(complete_magic_square(N, matrix))"},{"question":"Write a function to merge two sorted linked lists and return it as a new sorted linked list. The new list should be made by splicing together the nodes of the first two lists. Constraints - The number of nodes in both linked lists is in the range [0, 50]. - -100 leq Node.val leq 100 - Both l1 and l2 are sorted in non-decreasing order. Input The input is given in the following format: `l1` and `l2` where `l1` and `l2` are defined as a linked list. Output Return the head of the merged linked list. Example Input ``` l1: 1 -> 2 -> 4 l2: 1 -> 3 -> 4 ``` Output ``` 1 -> 1 -> 2 -> 3 -> 4 -> 4 ```","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeTwoLists(l1, l2): Merge two sorted linked lists and return it as a new sorted linked list. Parameters: l1 (ListNode): Head of the first sorted linked list. l2 (ListNode): Head of the second sorted linked list. Returns: ListNode: Head of the merged sorted linked list. dummy = ListNode() current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next # If any elements are left in either l1 or l2 if l1: current.next = l1 elif l2: current.next = l2 return dummy.next"},{"question":"Max is interested in palindromic numbers. A palindromic number is a number that remains the same when its digits are reversed (e.g., 121, 1331). He wants to generate all palindromic numbers within a specified range. Help Max by writing a program that finds and counts all palindromic numbers between two given numbers a and b, inclusive. Input The only line contains two integers a, b (1 ≤ a ≤ b ≤ 100,000) — the first and the last number of the range to check. Output Print the only integer representing the count of palindromic numbers within the given range. Examples Input 1 10 Output 9 Input 100 200 Output 10","solution":"def count_palindromic_numbers(a, b): Returns the count of palindromic numbers within the range [a, b]. count = 0 for num in range(a, b + 1): if str(num) == str(num)[::-1]: count += 1 return count"},{"question":"In a dense forest, there are M special trees, numbered 1 to M, which emit a unique light at night. Each tree has a specific brightness level represented by an integer. A group of scientists has been observing these trees for N nights. Every night, they record the brightness of a subset of these trees. The scientists need your help to find the brightness of the tree that is most frequently observed as the brightest or determine if there is a tie. Your task is to write a program that processes the brightness data and provides the result for each night. Input - The first line contains two integers, M and N (1 ≤ M, N ≤ 1000), representing the number of trees and the number of nights, respectively. - The next M lines contain one integer each, representing the brightness level of each tree from 1 to M. - The following N lines contain the brightness data for each night as follows: The first number in the line, K (1 ≤ K ≤ M), represents the number of trees observed on that night, followed by K integers representing the indices of these trees and their observed brightness levels. Output - Print N lines, one for each night. For each night, print the index of the tree that is most frequently observed as the brightest, or \\"Tie\\" if there is more than one such tree. Example Input: 5 3 10 20 15 5 25 3 1 10 3 15 4 5 2 2 20 5 25 3 1 10 3 15 2 20 Output: 5 5 2 Explanation: - On the first night, tree 4 has the highest brightness level (25). - On the second night, tree 5 has the highest brightness level (25). - On the third night, tree 2 has the highest brightness level (20), but tree 3 is also bright, at level 20, resulting in tree 2 being the highest. However, for uniqueness check, tree 2 is chosen as it is the first encountered with the highest brightness level. When there is no clear single brightest tree, the output should be \\"Tie\\".","solution":"def find_brightest_trees(M, N, tree_brightness, nights_data): results = [] for night in nights_data: K = night[0] observed_trees = night[1::2] observed_bright = night[2::2] max_brightness = -1 brightest_trees = [] for i in range(K): if observed_bright[i] > max_brightness: max_brightness = observed_bright[i] brightest_trees = [observed_trees[i]] elif observed_bright[i] == max_brightness: brightest_trees.append(observed_trees[i]) if len(brightest_trees) > 1: results.append(\\"Tie\\") else: results.append(brightest_trees[0]) return results"},{"question":"A software company is organizing a coding contest and they need a way to fairly distribute participants into various groups. Each group should have an equal number of participants if possible. If the number of participants does not divide evenly among the groups, the leftover participants are distributed one into each group starting from the first group. The company needs a program to help with this group assignment. Write a function that takes two inputs: the total number of participants and the number of groups. The function should output a list of integers where each integer represents the number of participants in the corresponding group. Input 1. Total number of participants, P (integer) 2. Number of groups, G (integer) Output A list of integers representing the number of participants in each group. Example Input: 10 3 Output: [4, 3, 3] Explanation The total number of participants is 10 and there are 3 groups. Ideally, each group would have 10 / 3 = 3 participants, with 1 participant left over. The final distribution is: the first group will have 4 participants (3 + 1 extra), and the remaining groups will each have 3 participants.","solution":"def distribute_participants(total_participants, num_groups): Distributes participants into groups as evenly as possible. :param total_participants: Total number of participants (integer) :param num_groups: Number of groups (integer) :return: A list of integers representing the number of participants in each group base_participants = total_participants // num_groups remainder = total_participants % num_groups # Initially assign the \'base_participants\' to each group distribution = [base_participants] * num_groups # Distribute the remainder among the groups for i in range(remainder): distribution[i] += 1 return distribution"},{"question":"Write a program to implement a data structure similar to a least recently used (LRU) cache. The cache should support the following operations efficiently: * set k v: Set a value v to a key k. If the cache exceeds its capacity, remove the least recently used item before inserting the new one. * get k: Return the value associated with key k if it exists in the cache. If it does not exist, return -1. * remove k: Remove the key k from the cache if it exists. The cache should follow these constraints: 1. The cache has a fixed maximum capacity c. 2. The capacity c and number of operations m are given as input. 3. 1 leq c leq 100,000 4. 1 leq m leq 500,000 5. The keys and values are integers where -2,000,000,000 leq key, value leq 2,000,000,000 Input In the first line, the number of operations m and the capacity c are given. In the following m lines, operations represented by set k v, get k, or remove k are provided. Output For each get k operation, output the value associated with key k or -1 if the key does not exist in the cache. Example Input 10 3 set 1 10 set 2 20 get 1 set 3 30 get 2 set 4 40 get 1 get 3 get 4 remove 3 Output 10 20 -1 30 40","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): Initialize the LRU cache with a fixed capacity. self.capacity = capacity self.cache = OrderedDict() def get(self, key: int) -> int: Return the value associated with key if it exists in the cache. Move the accessed key to the end to show that it was recently used. If the key does not exist, return -1. if key in self.cache: value = self.cache.pop(key) self.cache[key] = value return value else: return -1 def set(self, key: int, value: int) -> None: Set the value for the key. If the key already exists, update the value and move it to the end. If the cache exceeds its capacity, remove the least recently used item before inserting the new one. if key in self.cache: self.cache.pop(key) elif len(self.cache) >= self.capacity: self.cache.popitem(last=False) self.cache[key] = value def remove(self, key: int) -> None: Remove the key from the cache if it exists. if key in self.cache: self.cache.pop(key) def process_operations(capacity: int, operations: list) -> list: cache = LRUCache(capacity) results = [] for operation in operations: if operation[0] == \\"set\\": cache.set(operation[1], operation[2]) elif operation[0] == \\"get\\": results.append(cache.get(operation[1])) elif operation[0] == \\"remove\\": cache.remove(operation[1]) return results"},{"question":"Alex loves sequences. A sequence is called a \\"peak\\" sequence if every element in the sequence, except the first and the last, is strictly greater than both of its neighbors. Given an integer n, generate any peak sequence of length n or determine that it is impossible to create such a sequence. Input The first line contains a single integer n (1 ≤ n ≤ 100), representing the length of the required peak sequence. Output If it\'s impossible to create a peak sequence of length n, output \\"NO\\". Otherwise, output \\"YES\\" on the first line, followed by the peak sequence on the second line. Examples Input 3 Output YES 1 3 2 Input 1 Output NO Note A peak sequence of length 3 is [1, 3, 2], as the element 3 is greater than both its neighbors 1 and 2. There is no peak sequence of length 1, so the output is \\"NO\\". The solution should ensure the peak condition is met for any valid length above 2.","solution":"def generate_peak_sequence(n): if n < 3: return \\"NO\\" peak_sequence = [i for i in range(1, n+1)] if n == 3: return \\"YESn1 3 2\\" if n % 2 == 0: peak_sequence[1], peak_sequence[-1] = peak_sequence[-1], peak_sequence[1] return \\"YESn\\" + \\" \\".join(map(str, peak_sequence))"},{"question":"A company wants to optimize their shipping routes for delivering packages to different cities. They have a map of `n` cities, connected by `m` bidirectional roads. Each road has an associated travel cost. The goal is to determine the minimum cost to visit all cities starting from a given city `s` using the least amount of total travel distance. If it is not possible to visit all cities, the function should return -1. Input The input consists of multiple test cases. The first line contains the number of test cases `t` (1 ≤ t ≤ 100). Each test case is described by: - The first line containing three integers `n`, `m` and `s` (1 ≤ n ≤ 100, 1 ≤ m ≤ 10,000, 1 ≤ s ≤ n). - The next `m` lines, each containing three integers `u`, `v`, and `cost` (1 ≤ u, v ≤ n, 1 ≤ cost ≤ 1,000), representing a road connecting cities `u` and `v` with travel cost `cost`. Output For each test case, print a single integer representing the minimum travel cost required to visit all cities starting from the city `s`. Print -1 if it is impossible to visit all cities. Example Input 2 4 4 1 1 2 3 2 3 1 3 4 6 4 1 5 5 4 2 1 2 1 2 3 2 3 5 5 5 1 1 Output 9 -1","solution":"import heapq def minimum_cost(t, test_cases): def dijkstra(n, s, edges): graph = {i: [] for i in range(1, n + 1)} for u, v, cost in edges: graph[u].append((v, cost)) graph[v].append((u, cost)) min_heap = [(0, s)] visited = set() min_cost = 0 total_cost = 0 while min_heap: curr_cost, city = heapq.heappop(min_heap) if city in visited: continue visited.add(city) total_cost += curr_cost for neighbor, travel_cost in graph[city]: if neighbor not in visited: heapq.heappush(min_heap, (travel_cost, neighbor)) if len(visited) == n: return total_cost else: return -1 results = [] for i in range(t): n, m, s = test_cases[i][0] edges = test_cases[i][1] results.append(dijkstra(n, s, edges)) return results"},{"question":"Write a function that simulates a simplified stock trading strategy and determines the maximum possible profit. You are given a list of stock prices where the i-th element is the price of the stock on the i-th day. You can make as many transactions as you want, but you must sell a stock before you can buy again. The function should return the maximum profit you can achieve. Input - A list of integers representing stock prices `prices` where the i-th element is the price on day i. - Length of the list `prices` is between 1 and 10⁴. - Each price in the list is a positive integer and does not exceed 10⁴. Output - A single integer representing the maximum profit you can achieve. Examples Input: `[7, 1, 5, 3, 6, 4]` Output: `7` Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7. Input: `[1, 2, 3, 4, 5]` Output: `4` Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit is 4. Input: `[7, 6, 4, 3, 1]` Output: `0` Explanation: There is no way to make a positive profit since prices are continuously decreasing.","solution":"def max_profit(prices): Returns the maximum profit that can be made by buying and selling the stock where you can buy and sell the stock multiple times. if len(prices) < 2: return 0 max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"Given a list of integers, you have to perform several range-based queries. Each query gives you two integers l and r, and you need to find the maximum number in the subarray that starts at index l and ends at index r. The list of integers will be given only once, but each query should be answered based on the current list content. Input The first line contains a single integer n (1 ≤ n ≤ 105), the number of integers in the list. The second line contains n integers, where the i-th integer is the value ai (-106 ≤ ai ≤ 106), describing the list. The next line contains a single integer q (1 ≤ q ≤ 105), the number of queries. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n), representing a query. Output For each query, print a single integer, the maximum number in the subarray ranging from index l to r. Examples Input 6 1 2 3 -1 5 6 3 1 3 4 6 2 5 Output 3 6 5 Input 5 -4 -2 -5 -1 -3 2 1 5 2 4 Output -1 -1","solution":"def find_max_in_subarray(arr, queries): results = [] for l, r in queries: results.append(max(arr[l-1:r])) return results"},{"question":"Alex is a computer science student who loves playing with strings. One day, he encountered a problem while solving a puzzle and needs your help. Given a string `S` consisting of lowercase English alphabets, he wants to transform it following these rules: 1. Each distinct character in the string should be replaced with a unique integer starting from 1 based on the order of their first occurrence in the string. 2. The order of integers in the resulting sequence should match the order in which the corresponding characters appear in the string. For example, the string \\"abac\\" would be transformed into the sequence \\"1 2 1 3\\". Your task is to write a function that takes a string `S` and returns the transformed sequence as described. Input A single line containing string `S` (1 ≤ |S| ≤ 1000), which consists of only lowercase English letters. Output A single line containing the space-separated sequence of integers representing the transformation of the input string `S`. Examples Input abac Output 1 2 1 3 Input hello Output 1 2 3 3 4 Input xyz Output 1 2 3","solution":"def transform_string(S): Transforms the input string S by replacing each distinct character with a unique integer starting from 1, based on the order of their first occurrence. char_to_number = {} next_number = 1 result = [] for ch in S: if ch not in char_to_number: char_to_number[ch] = next_number next_number += 1 result.append(char_to_number[ch]) return \' \'.join(map(str, result))"},{"question":"You are writing a text editor with a few specific features. One important feature to implement is the ability to find and highlight all occurrences of a given word in a text document. Write a function that locates all start indices of a given word within a text document. For simplicity, assume the word only consists of lowercase alphabetic characters and the text document consists of lowercase alphabetic characters and spaces. Input - A single line of text representing the document where words are separated by single spaces. - A single word to locate within the document. Output - A list of integers representing the start indices of the given word in the document. - Indices are zero-based, and if the word is not found, return an empty list. Examples Input document: \\"the quick brown fox jumps over the lazy dog\\" word: \\"the\\" Output [0, 31] Input document: \\"hello world hello\\" word: \\"hello\\" Output [0, 12] Input document: \\"abracadabra\\" word: \\"bra\\" Output [] Note In the first example, the word \\"the\\" starts at indices 0 and 31. In the second example, the word \\"hello\\" starts at indices 0 and 12. In the third example, the word \\"bra\\" is not found as a whole word in the document, so the output is an empty list.","solution":"def find_word_indices(document, word): Returns a list of start indices of the given word in the document. indices = [] words = document.split() current_index = 0 for w in words: if w == word: indices.append(current_index) current_index += len(w) + 1 # +1 to account for the space return indices"},{"question":"Given an integer array `arr`, return the length of the longest contiguous subarray where the difference between the minimum and maximum values in the subarray is less than or equal to a given integer `K`. You must solve it in O(n) time complexity. # Function Signature ```python def longest_subarray_with_limit(arr: List[int], K: int) -> int: pass ``` # Input - `arr`: A list of integers `[arr1, arr2, ..., arrn]` where `1 <= len(arr) <= 10^5` and `-10^5 <= arr[i] <= 10^5` - `K`: An integer `0 <= K <= 10^5` # Output - An integer representing the length of the longest contiguous subarray where the difference between the minimum and maximum values in the subarray is less than or equal to `K`. # Example ```python assert longest_subarray_with_limit([8, 2, 4, 7], 4) == 2 # subarray [8, 2] or [2, 4] assert longest_subarray_with_limit([10, 1, 2, 4, 7, 2], 5) == 4 # subarray [2, 4, 7, 2] assert longest_subarray_with_limit([4, 2, 2, 2, 4, 4, 2, 2], 0) == 3 # array containing only [2, 2, 2] ```","solution":"from collections import deque from typing import List def longest_subarray_with_limit(arr: List[int], K: int) -> int: min_deque = deque() max_deque = deque() left = 0 max_length = 0 for right in range(len(arr)): while min_deque and arr[right] < arr[min_deque[-1]]: min_deque.pop() while max_deque and arr[right] > arr[max_deque[-1]]: max_deque.pop() min_deque.append(right) max_deque.append(right) while arr[max_deque[0]] - arr[min_deque[0]] > K: left += 1 if left > min_deque[0]: min_deque.popleft() if left > max_deque[0]: max_deque.popleft() max_length = max(max_length, right - left + 1) return max_length"},{"question":"Suppose you have a 2D grid of size n x m, where each cell contains an integer height value. You need to handle q queries on this grid. There are two types of queries: * \\"U x y v\\" — update the height of cell (x, y) to v; * \\"G x1 y1 x2 y2\\" — get the maximum height in the subgrid defined by its top-left corner (x1, y1) and its bottom-right corner (x2, y2). Input The first line contains three integers n, m, and q (1 ≤ n, m ≤ 500; 1 ≤ q ≤ 10^5) — the dimensions of the grid and the number of queries. The next n lines contain m integers each, representing initial heights of the grid cells. The next q lines contain queries, each in one of the formats mentioned above. It is guaranteed that for \\"U x y v\\" query, 1 ≤ x ≤ n, 1 ≤ y ≤ m, and for \\"G x1 y1 x2 y2\\" query 1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m. Output For each query of the second type, print the maximum height in the specified subgrid. Example Input 4 5 6 1 2 3 4 5 5 4 3 2 1 2 2 2 2 2 1 3 4 3 1 G 2 2 4 4 U 3 3 10 G 2 2 4 4 U 1 5 20 G 1 1 4 5 U 4 4 5 G 1 1 4 5 Output 4 10 20 20 Note The first query asks for the maximum height in the subgrid from (2, 2) to (4, 4), which is 4. After the update \\"U 3 3 10\\", the height at cell (3, 3) is updated to 10. The second subgrid query from (2, 2) to (4, 4) now has a maximum height of 10. The update \\"U 1 5 20\\" changes the height at cell (1, 5) to 20. The maximum height from (1, 1) to (4, 5) changes to 20. After the update \\"U 4 4 5\\", cell (4, 4) is updated to height 5, and the final subgrid query result stays at 20.","solution":"def process_queries(n, m, q, grid, queries): Processes the list of queries on the given n x m grid. Parameters: n (int): number of rows in the grid m (int): number of columns in the grid q (int): number of queries grid (list of list of int): the initial grid heights queries (list of str): list of queries Returns: list: results of the \\"G\\" queries. results = [] for query in queries: parts = query.split() if parts[0] == \'U\': x, y, v = int(parts[1]) - 1, int(parts[2]) - 1, int(parts[3]) grid[x][y] = v elif parts[0] == \'G\': x1, y1, x2, y2 = int(parts[1]) - 1, int(parts[2]) - 1, int(parts[3]) - 1, int(parts[4]) - 1 max_height = max(grid[i][j] for i in range(x1, x2 + 1) for j in range(y1, y2 + 1)) results.append(max_height) return results"},{"question":"In a zoo, there exist N different animal species. Each species has a population count given in a list, where population[i] indicates the number of animals of species i in the zoo. The zookeeper wants to form groups of animals such that each group contains animals from exactly two different species. Define a function `count_valid_groups(population)` that receives a list of population counts of N species. The function should return the number of valid groups of animals that can be formed such that every group consists of exactly two animals from two distinct species. The order of species in the group does not matter, i.e., a group formed by species i and j is the same as a group formed by species j and i. Constraints: * 2 leq N leq 10^5 * 1 leq population[i] leq 10^9 # Example Input: population = [2, 3, 4] Output: 8 Explanation: There are three species, and the valid groups are: 1. One animal from species 0 and one from species 1: total 2 * 3 = 6 groups. 2. One animal from species 0 and one from species 2: total 2 * 4 = 8 groups. 3. One animal from species 1 and one from species 2: total 3 * 4 = 12 groups. However, since we are forming groups of exactly two animals from two different species, we count each valid group once: (2*3)/2 + (2*4)/2 + (3*4)/2 = 3 + 4 + 6 = 13. # Note * Take care to handle large input sizes efficiently. * Ensure your solution considers the possible maximum values for N and population[i].","solution":"def count_valid_groups(population): Returns the number of valid groups that can be formed. Each group should consist of exactly two animals from two different species. total_groups = 0 n = len(population) for i in range(n): for j in range(i + 1, n): total_groups += population[i] * population[j] return total_groups"},{"question":"Mark is working on a program that deals with lists of names associated with scores. He wants to be able to determine which names have scores that fall within a specified range. He also wants to sort the names based on their scores in descending order. To help Mark, write a function that takes the following parameters: - A list of tuples, where each tuple contains a name (a string) and a score (an integer). - Two integers, `lower` and `upper`, representing the inclusive range of scores. The function should return a list of names whose scores are within the specified range, sorted by their scores in descending order. If two or more names have the same score, they should appear in the order they were originally given in the list. # Input - A list of tuples, `names_scores`, where each tuple contains a name (string) and a score (integer). - Two integers, `lower` and `upper`. # Output - A list of names (strings) sorted by their scores in descending order, whose scores fall within the inclusive range `[lower, upper]`. # Function Signature ```python def filter_and_sort_names(names_scores: List[Tuple[str, int]], lower: int, upper: int) -> List[str]: ``` # Example ```python names_scores = [(\\"Alice\\", 90), (\\"Bob\\", 85), (\\"Charlie\\", 95), (\\"Diana\\", 70), (\\"Eve\\", 85)] lower = 80 upper = 95 print(filter_and_sort_names(names_scores, lower, upper)) ``` # Output ``` [\'Charlie\', \'Alice\', \'Bob\', \'Eve\'] ``` # Explanation In the given example, the names and scores are: - Alice: 90 - Bob: 85 - Charlie: 95 - Diana: 70 - Eve: 85 We only consider scores in the range [80, 95], so Diana is excluded. The remaining names are: - Charlie: 95 - Alice: 90 - Bob: 85 - Eve: 85 Sorted in descending order by score, it gives us: `[\'Charlie\', \'Alice\', \'Bob\', \'Eve\']`. Note that Bob and Eve have the same score but keep their original order.","solution":"from typing import List, Tuple def filter_and_sort_names(names_scores: List[Tuple[str, int]], lower: int, upper: int) -> List[str]: Filters the names whose scores fall within the inclusive range [lower, upper] and sorts them by their scores in descending order. # Filter the names based on the score range filtered_names_scores = [(name, score) for name, score in names_scores if lower <= score <= upper] # Sort the filtered list by score in descending order filtered_names_scores.sort(key=lambda x: x[1], reverse=True) # Extract the names from the filtered and sorted list sorted_names = [name for name, score in filtered_names_scores] return sorted_names"},{"question":"Draco is a competitive programmer who likes to solve unique problems every day. One day, he came across an interesting grid problem that he couldn\'t solve and now seeks your help. You are given an n x m grid containing non-negative integers. Draco wants to form a new grid of the same size where each cell at position (i, j) in the new grid is the sum of all the elements in the subgrid that ranges from (1, 1) to (i, j) in the original grid. More formally, the value of cell (i, j) in the new grid should be the sum of all the original grid\'s cells (k, l) for all 1 ≤ k ≤ i and 1 ≤ l ≤ j. Your task is to help Draco by computing the new grid. Input: - The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. - The first line of each test case contains two integers n and m (1 ≤ n, m ≤ 500), the dimensions of the grid. - The next n lines contain m integers each representing the grid elements a[i][j] (0 ≤ a[i][j] ≤ 1000). Output: For each test case, output the new n x m grid where each value is computed based on the problem\'s constraints. Print an empty line between outputs of different test cases. Example: Input: 2 3 3 1 2 3 4 5 6 7 8 9 2 2 1 2 3 4 Output: 1 3 6 5 12 21 12 27 45 1 3 4 10 Explanation: In the first test case, the new grid is computed as: - Cell (1, 1): 1 - Cell (1, 2): 1+2=3 - Cell (1, 3): 1+2+3=6 - Cell (2, 1): 1+4=5 - Cell (2, 2): 1+2+4+5=12 - Cell (2, 3): 1+2+3+4+5+6=21 - Cell (3, 1): 1+4+7=12 - Cell (3, 2): 1+2+4+5+7+8=27 - Cell (3, 3): 1+2+3+4+5+6+7+8+9=45 In the second test case, the new grid is computed as: - Cell (1, 1): 1 - Cell (1, 2): 1+2=3 - Cell (2, 1): 1+3=4 - Cell (2, 2): 1+2+3+4=10","solution":"def compute_aggregate_grid(t, test_cases): results = [] for case in test_cases: n, m, original_grid = case aggregate_grid = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): current_value = original_grid[i][j] if i > 0: current_value += aggregate_grid[i-1][j] if j > 0: current_value += aggregate_grid[i][j-1] if i > 0 and j > 0: current_value -= aggregate_grid[i-1][j-1] aggregate_grid[i][j] = current_value results.append(aggregate_grid) return results"},{"question":"Given a string and a list of words, determine if the string can be segmented into a sequence of one or more dictionary words from the list. You can reuse the words from the list multiple times. Write a function that takes a string `s` and a list of words `wordDict`, and returns `True` if `s` can be segmented into a space-separated sequence of one or more dictionary words from `wordDict`, otherwise return `False`. # Input - A string `s` (1 ≤ |s| ≤ 300), consisting of lower-case English letters. - A list of words `wordDict` (1 ≤ |wordDict| ≤ 1000), where each word is also composed of lower-case English letters. # Output Return `True` if `s` can be segmented into a sequence of one or more dictionary words, otherwise return `False`. # Examples Example 1 **Input:** ``` s = \\"leetcode\\", wordDict = [\\"leet\\", \\"code\\"] ``` **Output:** ``` True ``` **Explanation:** ``` The string can be segmented as \\"leet code\\". ``` Example 2 **Input:** ``` s = \\"applepenapple\\", wordDict = [\\"apple\\", \\"pen\\"] ``` **Output:** ``` True ``` **Explanation:** ``` The string can be segmented as \\"apple pen apple\\". ``` Example 3 **Input:** ``` s = \\"catsandog\\", wordDict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] ``` **Output:** ``` False ``` **Explanation:** ``` The string cannot be segmented into a space-separated sequence of one or more dictionary words. ``` # Note - The same word in the dictionary may be reused multiple times in the segmentation. - You may assume the dictionary does not contain duplicate words.","solution":"def word_break(s, wordDict): Determines if the string s can be segmented into one or more dictionary words from wordDict. Args: s (str): The input string. wordDict (List[str]): The list of words as the dictionary. Returns: bool: True if the string s can be segmented, False otherwise. n = len(s) dp = [False] * (n + 1) dp[0] = True for i in range(1, n + 1): for word in wordDict: if dp[i - len(word)] and s[i - len(word):i] == word: dp[i] = True break return dp[n]"},{"question":"A robotics company wants to equip all its N robots with advanced sensors. Each robot has an initial sensor value, and the company has M ways to transfer sensor values from one robot to another. The i-th way allows the sensor value to be transferred from robot a_i to robot b_i one-way. The company wants to calculate the maximum possible sensor value for each robot after applying all possible transfers. Constraints * 1 leq N leq 10^{5} * 1 leq M leq 10^{5} * 1 leq a_i,b_i leq N * 1 leq initial_sensor_value[i] leq 10^{9} * The input values are integers. Input Input is given from Standard Input in the following format: N M initial_sensor_value_1 initial_sensor_value_2 ... initial_sensor_value_N a_1 b_1 a_2 b_2 : a_M b_M Output Print N lines. The i-th line must contain the maximum possible sensor value for robot i after applying all possible transfers. Examples Input 3 2 5 2 3 1 2 2 3 Output 5 5 5 Input 4 3 10 7 5 1 1 2 2 3 3 4 Output 10 10 10 10 Input 5 4 1 2 3 4 5 5 4 4 3 3 2 2 1 Output 5 5 5 5 5","solution":"def max_sensor_values(N, M, initial_sensor_values, transfers): from collections import defaultdict, deque # Initialize the sensor values and transferred map max_sensors = initial_sensor_values[:] transfer_dict = defaultdict(list) for a, b in transfers: transfer_dict[a].append(b) # Use BFS or DFS to propagate maximum values queue = deque() for robot in range(N): queue.append(robot + 1) while queue: current = queue.popleft() for neighbor in transfer_dict[current]: if max_sensors[neighbor-1] < max_sensors[current-1]: max_sensors[neighbor-1] = max_sensors[current-1] queue.append(neighbor) return max_sensors if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) initial_sensor_values = list(map(int, data[2:N+2])) transfers = [] for i in range(M): a = int(data[N+2 + 2*i]) b = int(data[N+3 + 2*i]) transfers.append((a, b)) result = max_sensor_values(N, M, initial_sensor_values, transfers) for value in result: print(value)"},{"question":"A tree is a data structure consisting of nodes. Each node may have up to two children. A tree is considered balanced if the heights of the two child subtrees of any node never differ by more than one. For this task, you will write a function to determine if a binary tree is balanced. You will be provided with the tree represented as a tuple, where each node is a tuple of form (value, left_subtree, right_subtree). An empty subtree is represented as None. Your function should return a boolean value indicating whether the tree is balanced. Input A tuple representing the root of the binary tree. Output A boolean value `True` if the tree is balanced, and `False` otherwise. Example Input: (1, (2, None, None), (3, (4, None, None), None)) Output: True Explanation: The tree (1, (2, None, None), (3, (4, None, None), None)) is balanced because: - The subtree with root 2 and no children is balanced. - The subtree with root 4 and no children is balanced. - The subtree with root 3 and one child (4) is balanced because the height difference of its subtrees is 1. - The main tree has a height difference of 0 between the root\'s children. It meets the balanced condition throughout the structure. Hence the function returns True.","solution":"def is_balanced(tree): Determine whether a binary tree is balanced. :param tree: A tuple representing the root of the binary tree. :return: True if the tree is balanced, False otherwise. def check_balance(node): if node is None: return (True, -1) # (is_balanced, height) value, left_subtree, right_subtree = node left_balanced, left_height = check_balance(left_subtree) right_balanced, right_height = check_balance(right_subtree) if not left_balanced or not right_balanced: return (False, 0) if abs(left_height - right_height) > 1: return (False, 0) return (True, max(left_height, right_height) + 1) balanced, height = check_balance(tree) return balanced"},{"question":"Two friends, Alice and Bob, are playing a simple mathematical game. They start with a number n and take turns subtracting an integer k from it. Alice always starts first. The integer k must be a divisor of the current number n (excluding the number itself), and they cannot select the same divisor more than once during their turn. The game continues until no valid moves can be made, at which point the player who cannot make a move loses the game. Your task is to determine if Alice can ensure a win with optimal play assuming both players play optimally. Input The input consists of a single integer n (2 ≤ n ≤ 10^5), the starting number. Output Output \\"Alice\\" if Alice has a winning strategy; otherwise, output \\"Bob\\". Examples Input 10 Output Alice Input 12 Output Bob Input 15 Output Alice Explanation In the first example: - Alice can start by subtracting 2 (a valid divisor of 10) from 10, making it 8. - Bob then can subtract 1 from 8 (a valid divisor of 8), making it 7. - Alice can then subtract 1 from 7, making it 6. - Bob can then subtract 1 from 6, making it 5. - Alice can then subtract 1 from 5, making it 4. - Bob can then subtract 1 from 4, making it 3. - Alice can then subtract 1 from 3, making it 2. - Bob can then subtract 1 from 2, making it 1. Since 1 has no valid divisors left, Alice has no moves left and loses, while Bob wins. In the second example: - All possible gameplays with optimal moves will lead to Bob winning eventually as Alice has no strategy to force Bob into a losing position given n = 12.","solution":"def optimal_game_winner(n): Determines if Alice has a winning strategy given the starting number n. :param n: int - starting number of the game :return: str - \\"Alice\\" if Alice can ensure a win, \\"Bob\\" otherwise # If n is odd, Alice plays first and can only make it even for Bob\'s turn # In this case, Alice will always win because she will continue to ensure # Bob gets an odd number eventually leading to 1 and Bob losing # If n is even, Bob can mimic Alice\'s play each turn until n becomes odd if n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"A robotics company has designed a series of modular robots. Each robot can be connected to at most one other robot, creating a system of one or more modules. The connection structure of these robots can be represented as a tree, where each node represents a robot and an edge represents a connection between two robots. The company wants to develop a function to calculate the diameter of this tree of robots. The diameter of a tree is the length of the longest path between any two nodes in the tree. Your task is to determine the diameter of the tree given the connections between the robots. Input The first line contains an integer n (1 ≤ n ≤ 104), representing the number of robots. The next n-1 lines contain two space-separated integers u and v, representing a connection between robots u and v (1 ≤ u, v ≤ n). Output Print a single integer — the diameter of the tree. Examples Input 5 1 2 1 3 3 4 3 5 Output 3 Input 3 1 2 2 3 Output 2","solution":"from collections import deque def tree_diameter(n, connections): if n == 1: return 0 # Convert connections to adjacency list adj = [[] for _ in range(n + 1)] for u, v in connections: adj[u].append(v) adj[v].append(u) def bfs(start): # Perform BFS to find the farthest node from the start node q = deque([(start, 0)]) visited = set() visited.add(start) farthest_node = start farthest_dist = 0 while q: node, dist = q.popleft() for neighbor in adj[node]: if neighbor not in visited: visited.add(neighbor) q.append((neighbor, dist + 1)) if dist + 1 > farthest_dist: farthest_dist = dist + 1 farthest_node = neighbor return farthest_node, farthest_dist # Step 1: Pick any node and find the farthest node from it farthest_node, _ = bfs(1) # Step 2: Perform BFS again from the farthest node found in step 1 # to find the actual diameter _, diameter = bfs(farthest_node) return diameter # Example usage: connections = [ (1, 2), (1, 3), (3, 4), (3, 5) ] result = tree_diameter(5, connections) print(result) # Output: 3"},{"question":"You are writing a program to manage a company\'s employee hierarchy. The company has n employees numbered from 0 to n-1, and each employee (except for the CEO) has exactly one direct manager. The CEO has no manager and is denoted by having a manager ID of -1. The hierarchy forms a tree where each node is an employee and the edges represent a direct reporting line from an employee to their manager. Your task is to process a list of direct reporting lines to find the depth of each employee in the hierarchy. The depth of an employee is defined as the number of managers (i.e., levels) between the employee and the CEO. Input The first line contains an integer t (1 ≤ t ≤ 10) representing the number of test cases. For each test case, the first line contains an integer n (1 ≤ n ≤ 100) representing the number of employees. The second line contains n integers where the i-th integer represents the manager ID of the i-th employee (0 ≤ manager ID ≤ n-1 or -1). If an employee is the CEO, their manager ID will be -1. Output For each test case, output n integers where the i-th integer is the depth of the i-th employee in the hierarchy. Example Input ``` 2 5 -1 0 1 1 3 3 -1 0 0 ``` Output ``` 0 1 2 2 3 0 1 1 ``` Explanation In the first test case, the employee hierarchy can be visualized as: ``` 0 (CEO) | 1 / 2 3 4 ``` The depths are as follows: - Employee 0 (CEO) has a depth of 0. - Employee 1 reports to Employee 0 and has a depth of 1. - Employee 2 reports to Employee 1 and has a depth of 2. - Employee 3 reports to Employee 1 and has a depth of 2. - Employee 4 reports to Employee 3 and has a depth of 3. In the second test case, the hierarchy is: ``` 0 (CEO) / 1 2 ``` The depths are: - Employee 0 (CEO) has a depth of 0. - Employee 1 reports to Employee 0 and has a depth of 1. - Employee 2 reports to Employee 0 and has a depth of 1.","solution":"def calculate_depths(t, test_cases): results = [] for i in range(t): n, managers = test_cases[i] depths = [0] * n for employee in range(n): depth = 0 current = employee while managers[current] != -1: depth += 1 current = managers[current] depths[employee] = depth results.append(depths) return results"},{"question":"A company organizing a marathon plans to distribute medals to participants based on their completion times. The medals are distributed as follows: - Gold medal: for participants in the top 10% of the total number of participants. - Silver medal: for participants from the top 10% to 30%. - Bronze medal: for participants from the top 30% to 50%. You are given the total number of participants and their completion times in seconds. Your task is to determine how many participants should receive each type of medal. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of participants. The next line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 10^6) — the completion times of the participants. Output Output three integers: the number of participants who should receive the gold medal, the silver medal, and the bronze medal, respectively. Examples Input 10 300 450 600 700 800 900 750 500 650 550 Output 1 2 2","solution":"def distribute_medals(n, times): Determines the number of gold, silver, and bronze medals based on the completion times of participants. :param n: Number of participants :param times: List of completion times of participants :return: Tuple of three integers representing the number of gold, silver, and bronze medals if n == 0: return 0, 0, 0 # Sort the times in ascending order times.sort() # Calculate how many participants will receive each type of medal gold_medals = int(n * 0.1) silver_medals = int(n * 0.2) bronze_medals = int(n * 0.2) return gold_medals, silver_medals, bronze_medals"},{"question":"Jack is working on a securing mechanism for his company\'s server. He wants to generate dynamic security keys based on the requests coming in each day. Each day\'s request is characterized by a specific integer value. Given the requests for several days, Jack wants to determine, for each day, the maximum request value he has seen up to that day, including the current day\'s request. Write a program to help Jack achieve this. Input: The first line contains a single integer T, denoting the number of test cases. For each test case, the following input will be present: - The first line contains an integer N, where N represents the number of days (requests). - The second line contains N space-separated integers, where the i^th integer represents the request value on the i^th day. Output: For each test case, output exactly one line of N space-separated integers, where the i^th integer is the maximum request value observed from day 1 to the i^th day. Constraints: Subtask 1: 1 ≤ T ≤ 20 1 ≤ N ≤ 10^4 1 ≤ request value ≤ 10^6 Subtask 2: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ request value ≤ 10^6 SAMPLE INPUT 2 5 1 3 2 5 4 4 7 2 8 6 SAMPLE OUTPUT 1 3 3 5 5 7 7 8 8 Explanation: In the first test case, the maximum values observed up to each day are: - Day 1: 1 (only 1) - Day 2: 3 (maximum of 1 and 3) - Day 3: 3 (maximum of 1, 3, and 2) - Day 4: 5 (maximum of 1, 3, 2, and 5) - Day 5: 5 (maximum of 1, 3, 2, 5, and 4) In the second test case, the maximum values observed up to each day are: - Day 1: 7 (only 7) - Day 2: 7 (maximum of 7 and 2) - Day 3: 8 (maximum of 7, 2, and 8) - Day 4: 8 (maximum of 7, 2, 8, and 6)","solution":"def max_requests_per_day(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] requests = test_cases[i][1] max_values = [] current_max = -1 for req in requests: if req > current_max: current_max = req max_values.append(current_max) results.append(max_values) return results"},{"question":"John is organizing a tournament where several players will compete in a series of 1-on-1 matches. Each match results in one player winning and the other player losing. John wants to determine the minimum number of rounds required to decide a unique winner for the tournament. In each round, players are paired up to play matches, and the losers are eliminated from the tournament. If there is an odd number of players in any round, one player receives a bye and automatically advances to the next round. Your task is to write a program that, given the number of players, computes the minimum number of rounds required to determine a unique winner. Input The first line of the input contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the following t lines contains a single integer n (1 ≤ n ≤ 1000) — the number of players in the tournament. Output For each test case, print the answer: the minimum number of rounds required to determine a unique winner of the tournament. Example Input 4 4 7 16 25 Output 2 3 4 5 Note In the first test case, with 4 players, there will be 2 rounds: - Round 1: 4 players → 2 winners - Round 2: 2 players → 1 winner In the second test case, with 7 players, there will be 3 rounds: - Round 1: 7 players → 1 bye, 6 play, 3 winners + 1 bye → 4 players - Round 2: 4 players → 2 winners - Round 3: 2 players → 1 winner","solution":"def min_rounds(t, test_cases): Calculate minimum number of rounds required to determine a unique winner for multiple test cases. Parameters: t (int): Number of test cases. test_cases (list of int): List of number of players for each test case. Returns: list of int: List of minimum rounds needed for each test case. results = [] for n in test_cases: rounds = 0 while n > 1: rounds += 1 n = (n + 1) // 2 # Half of players advance, if odd one gets a bye results.append(rounds) return results"},{"question":"You are a software developer working on an e-commerce platform. Your task is to design a feature that helps customers manage their shopping carts. Each shopping cart contains a list of products, with each product having a unique product ID and a quantity. Write a function that processes a list of operations on a shopping cart. The operations are described using the following types: 1. \\"add product_id quantity\\": Add `quantity` of the product with `product_id` to the cart. If the product is already in the cart, increase its quantity accordingly. 2. \\"remove product_id quantity\\": Remove `quantity` of the product with `product_id` from the cart. If the quantity of the product in the cart becomes zero or less, remove the product from the cart completely. 3. \\"get_cart()\\": Return a dictionary representing the current state of the shopping cart, where the keys are the product IDs and the values are the quantities of each product in the cart. Input The first line contains an integer `n` (1 ≤ n ≤ 100 000) — the number of operations. Each of the next `n` lines describes an operation in one of the formats mentioned above. Output For each \\"get_cart()\\" operation, print the current state of the shopping cart. The dictionary should be sorted in ascending order based on the product IDs. Example Input 5 add 101 3 add 102 5 get_cart() remove 101 2 get_cart() Output {101: 3, 102: 5} {101: 1, 102: 5} Explanation - Initially, the cart is empty. - After the first operation, the cart has 3 units of product 101. - After the second operation, the cart has 5 units of product 102 and 3 units of product 101. - The first \\"get_cart()\\" operation returns the state of the cart: {101: 3, 102: 5}. - After the fourth operation, 2 units of product 101 are removed, leaving 1 unit of product 101 and 5 units of product 102. - The second \\"get_cart()\\" operation returns the updated state of the cart: {101: 1, 102: 5}.","solution":"def handle_operations(operations): cart = {} def add(product_id, quantity): if product_id in cart: cart[product_id] += quantity else: cart[product_id] = quantity def remove(product_id, quantity): if product_id in cart: cart[product_id] -= quantity if cart[product_id] <= 0: del cart[product_id] def get_cart(): return dict(sorted(cart.items())) results = [] for operation in operations: parts = operation.split() action = parts[0] if action == \\"add\\": product_id = int(parts[1]) quantity = int(parts[2]) add(product_id, quantity) elif action == \\"remove\\": product_id = int(parts[1]) quantity = int(parts[2]) remove(product_id, quantity) elif action == \\"get_cart()\\": results.append(get_cart()) return results"},{"question":"In a distant galaxy, there exists a unique sequence of planets numbered 1 to N. Each pair of consecutive planets is connected by a one-way hyperspace tunnel. However, recently, it has been discovered that the hyperspace network consists of multiple one-way tunnels which may create cycles, making navigating the galaxy more exciting yet challenging. The Galactic Council has decided to set up a special navigation system that will help its citizens to calculate the number of distinct ways to travel from the first planet to the last one. They requested your help to implement the system. A journey from planet `u` to planet `v` is considered distinct if the sequence of planets visited during the journey is unique. Citizens should be able to access the number of distinct journeys modulo `10^9 + 7`. **Input** The first line contains two integers `N` and `M` — the number of planets and the number of hyperspace tunnels, respectively (2 ≤ N ≤ 100,000; 1 ≤ M ≤ 200,000). The next `M` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ N; u ≠ v), representing a one-way hyperspace tunnel from planet `u` to planet `v`. **Output** Print one integer, the number of distinct ways to travel from the first planet to the last one modulo `10^9 + 7`. **Example** **Input** 5 6 1 2 2 5 1 3 3 4 4 5 2 4 **Output** 3 **Explanation** The three distinct ways to travel from planet 1 to planet 5 are: 1. 1 -> 2 -> 5 2. 1 -> 3 -> 4 -> 5 3. 1 -> 2 -> 4 -> 5","solution":"from collections import defaultdict, deque MOD = 10**9 + 7 def count_distinct_ways(N, M, edges): graph = defaultdict(list) indegree = [0] * N ways = [0] * N ways[0] = 1 # Starting point, there\'s exactly one way to be at the start for u, v in edges: graph[u - 1].append(v - 1) indegree[v - 1] += 1 queue = deque() for i in range(N): if indegree[i] == 0: queue.append(i) while queue: u = queue.popleft() for v in graph[u]: ways[v] = (ways[v] + ways[u]) % MOD indegree[v] -= 1 if indegree[v] == 0: queue.append(v) return ways[N-1] # Example usage: N = 5 M = 6 edges = [ (1, 2), (2, 5), (1, 3), (3, 4), (4, 5), (2, 4), ] print(count_distinct_ways(N, M, edges)) # Output: 3"},{"question":"Alex loves creating patterns with numbers. Recently, he came across an interesting problem: given a positive integer n, generate the first n terms of the sequence where each term is the sum of the digits of the square of the index of that term. Specifically, the k-th term of the sequence should be the sum of the digits of k^2. Write a program that takes an integer n as input and prints the first n terms of this sequence. Input The input contains one integer n (1 ≤ n ≤ 10^4) — the number of terms to generate. Output Output a single line containing the first n terms of the sequence, separated by spaces. Examples Input 5 Output 1 4 9 7 13 Input 10 Output 1 4 9 7 13 10 13 16 13 19 Note In the first example, the sequence up to 5 terms is: - For k=1, k^2 = 1, sum of digits = 1 - For k=2, k^2 = 4, sum of digits = 4 - For k=3, k^2 = 9, sum of digits = 9 - For k=4, k^2 = 16, sum of digits = 1 + 6 = 7 - For k=5, k^2 = 25, sum of digits = 2 + 5 = 7 In the second example, the sequence up to 10 terms is: - For k=1, k^2 = 1, sum of digits = 1 - For k=2, k^2 = 4, sum of digits = 4 - For k=3, k^2 = 9, sum of digits = 9 - For k=4, k^2 = 16, sum of digits = 1 + 6 = 7 - For k=5, k^2 = 25, sum of digits = 2 + 5 = 7 - For k=6, k^2 = 36, sum of digits = 3 + 6 = 9 - For k=7, k^2 = 49, sum of digits = 4 + 9 = 13 - For k=8, k^2 = 64, sum of digits = 6 + 4 = 10 - For k=9, k^2 = 81, sum of digits = 8 + 1 = 9 - For k=10, k^2 = 100, sum of digits = 1 + 0 + 0 = 1","solution":"def sum_of_digits(n): Returns the sum of digits of the given number n. return sum(int(digit) for digit in str(n)) def generate_sequence(n): Generates the first n terms of the sequence where each term is the sum of the digits of the square of the index of that term. sequence = [] for k in range(1, n+1): term = sum_of_digits(k ** 2) sequence.append(term) return sequence if __name__ == \\"__main__\\": n = int(input().strip()) sequence = generate_sequence(n) print(\\" \\".join(map(str, sequence)))"},{"question":"Your task is to create a function `find_subarray` which takes in two arguments: - a list of integers `arr` of length `n` - an integer `sum` Your function should return the starting and ending positions of the first continuous subarray that adds up to the given `sum`. If there isn\'t such subarray, return an empty list. Input The function should accept the following parameters: 1. `arr`: a list of `n` integers where `1 <= n <= 10^5` 2. `sum`: an integer where `1 <= sum <= 10^9` Output The function should return a list with two integers corresponding to the 1-based starting and ending positions of the subarray. If no such subarray is found, return an empty list. Example Input arr = [1, 2, 3, 7, 5] sum = 12 Output [2, 4] Input arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] sum = 15 Output [1, 5] Note In the first test case, the subarray `[2, 3, 7]` sums to 12, and this subarray starts at position 2 and ends at position 4. In the second test case, the subarray `[1, 2, 3, 4, 5]` sums to 15, and this subarray starts at position 1 and ends at position 5.","solution":"def find_subarray(arr, sum): Returns the 1-based starting and ending positions of the first continuous subarray that adds up to the given sum. If no such subarray is found, returns an empty list. :param arr: List of integers :param sum: Target sum for the subarray :return: List with 1-based starting and ending positions of the subarray current_sum = 0 start = 0 subarray_sum_index = {} for end in range(len(arr)): current_sum += arr[end] if current_sum == sum: return [start + 1, end + 1] if (current_sum - sum) in subarray_sum_index: return [subarray_sum_index[current_sum - sum] + 2, end + 1] subarray_sum_index[current_sum] = end return []"},{"question":"Problem Talia is learning to juggle and she wants to practice her skills. She can juggle multiple balls at the same time, but she has a certain juggling pattern that she follows. The pattern is represented as a list of integers, where each integer indicates the number of balls tossed at that point in time. Talia starts with all the balls at rest (not tossed). Here are the rules Talia follows when juggling: - She can only toss one ball at a time. - Once a ball is tossed, it lands back into her hands after its respective toss interval. - If Talia needs to toss multiple balls at one point in time, she needs to have enough balls in her hands to do so. Determine the minimum number of balls Talia needs to start with to successfully follow the given juggling pattern. Constraints The input satisfies the following conditions: - 1 ≤ n ≤ 10^5 - 0 ≤ bi ≤ 10^5 Input The input is given in the following format: ``` n b1 b2 ... bn ``` The first line contains the integer `n`, which represents the total number of toss points in the pattern. The second line contains `n` integers representing the number of balls tossed at each point. Output Output the minimum number of balls required for Talia to follow the given juggling pattern on one line. Examples Input ``` 3 1 2 1 ``` Output ``` 2 ``` Input ``` 5 2 0 3 1 1 ``` Output ``` 3 ``` Explanation In the first example: - Talia needs 1 ball at the first point. - At the second point she needs to toss 2 balls, but one ball from the first point is still in the air. Therefore, she needs 1 additional ball, making it a total of 2 balls. In the second example: - Talia needs 2 balls at the first point. - At the second point, she doesn’t need to toss any ball. - At the third point, she needs to toss 3 balls, and by that time, 2 balls from the first point are back. So she needs 1 additional ball, making it a total of 3 balls. - At the fourth point, she needs to toss 1 ball, and one ball from the previous toss is back in her hand. - At the fifth point, she needs to toss 1 ball, and one ball from the previous toss is back in her hand.","solution":"def min_balls_required(n, pattern): max_balls_tossed = 0 current_balls = 0 for toss in pattern: current_balls += toss max_balls_tossed = max(max_balls_tossed, current_balls) current_balls -= toss return max_balls_tossed def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) pattern = list(map(int, data[1:])) return n, pattern if __name__ == \\"__main__\\": n, pattern = read_input() print(min_balls_required(n, pattern))"},{"question":"problem Consider a map represented by a weighted directed graph with N nodes and M edges, where each edge has a weight representing the travel time between two points. You are tasked with finding the shortest time required to visit the maximum number of nodes without revisiting any node. Your journey starts at a given node S , and you may visit any other nodes based on the edges available. Note that the graph may contain cycles, but you cannot revisit any node once it has been visited. Input: - The first line contains three integers N , M , and S ( 1 leq N leq 1000 , 1 leq M leq 10^4 , 1 leq S leq N ), representing the number of nodes, the number of edges, and the starting node respectively. - Each of the next M lines contains three integers u , v , and w ( 1 leq u, v leq N , 1 leq w leq 10^6 ), representing an edge from node u to node v with travel time w . Output: Print a single integer, the shortest time required to visit the maximum number of nodes without revisiting any node. Example Input 6 7 1 1 2 2 2 3 4 3 4 1 4 5 3 5 6 2 3 6 10 5 3 8 Output 12","solution":"import heapq def shortest_time_to_visit_maximum_nodes(n, m, start, edges): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) pq = [(0, start)] visited = set() shortest_time = [float(\'inf\')] * (n + 1) shortest_time[start] = 0 while pq: curr_time, u = heapq.heappop(pq) if u in visited: continue visited.add(u) for v, w in graph[u]: if v not in visited and curr_time + w < shortest_time[v]: shortest_time[v] = curr_time + w heapq.heappush(pq, (curr_time + w, v)) max_nodes = len(visited) max_time = max(shortest_time[v] for v in visited) return max_time def transform_input(data): input_lines = data.strip().split(\'n\') n, m, start = map(int, input_lines[0].split()) edges = [tuple(map(int, line.split())) for line in input_lines[1:]] return n, m, start, edges"},{"question":"An irrigation system needs to be designed for a rectangular farm of dimensions `m x n` (meters). There is a water source at the top-left corner of the farm (position (1, 1)). Each meter of the farm can either be irrigated directly from the source or has to collect water from an adjacent meter that is already irrigated. A water pipe can be laid between two adjacent irrigated meters for this purpose. The pipes can be laid only horizontally or vertically adjacent directions. Your task is to determine the minimum number of meters that need to be directly irrigated from the source so that the entire farm is covered. Input The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 1000) — the dimensions of the farm. Output Print a single integer — the minimum number of meters that need to be directly irrigated from the water source. Examples Input 3 3 Output 1 Input 1 5 Output 1 Input 4 7 Output 1","solution":"def minimum_irrigated_meters(m, n): Returns the minimum number of meters that need to be directly irrigated from the water source so that the entire farm is covered. The farm is a rectangular grid of size m x n. return 1"},{"question":"A factory has a conveyor belt with n items numbered 1 to n. Each item has a weight, represented as an integer w_i. The factory performs m replacement operations on the conveyor belt. Each replacement operation specifies a range of items and the new weight for items in that range. Your task is to apply the replacement operations and determine the weight of each item after all operations have been performed. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100 000). The second line contains n integers, w_1, w_2, …, w_n (1 ≤ w_i ≤ 1000). Each of the next m lines contains three integers l, r, and k (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ 1000), describing a replacement operation where all items from index l to r (inclusive) will be given the new weight k. Output Print a single line with n integers, the final weight of each item from 1 to n after all operations have been applied. Example Input 5 3 1 2 3 4 5 1 3 10 2 4 20 5 5 30 Output 10 20 20 20 30 Input 4 2 5 6 7 8 1 2 9 3 4 10 Output 9 9 10 10","solution":"def final_weights(n, m, weights, operations): Returns the final weights of the items after applying m operations. n: Total number of items m: Total number of operations weights: List of integers representing initial weights of n items operations: List of tuples where each tuple has 3 integers (l, r, k) indicating range and new weight # Convert weights to a 0-indexed list weights = [0] + weights # Apply operations for l, r, k in operations: for i in range(l, r + 1): weights[i] = k # Convert weights back to a 1-indexed list and return the relevant part return weights[1:] # Example input n, m = 5, 3 weights = [1, 2, 3, 4, 5] operations = [(1, 3, 10), (2, 4, 20), (5, 5, 30)] print(final_weights(n, m, weights, operations))"},{"question":"You are a robotics engineer setting up a grid for a group of autonomous robots. The robots need to navigate from the top-left corner to the bottom-right corner of a grid. The grid has some obstacles, and the robots can only move right or down at any point in time. However, there’s a twist: the robots have limited fuel, which restricts their total number of moves (right or down). Given a grid with some cells as obstacles, and a maximum number of moves the robots can make, find out if it\'s possible for the robots to reach the bottom-right corner from the top-left corner within the given number of moves. # Input - The first line contains an integer `t` (1 ≤ t ≤ 1000) — the number of test cases. - For each test case, the first line contains three integers `m` (1 ≤ m ≤ 100), `n` (1 ≤ n ≤ 100), and `f` (1 ≤ f ≤ 200) — the number of rows and columns in the grid, and the maximum number of moves. - The next `m` lines contain `n` characters each, representing the grid. An empty cell is denoted by \'.\', and an obstacle by \'#\'. # Output For each test case, output \\"YES\\" if it\'s possible for the robots to reach the bottom-right corner within the given number of moves, otherwise output \\"NO\\". # Example Input ``` 3 3 3 4 . . . . # . . . . 2 2 3 . # # . 4 4 7 . . . . . # . . . . # . . . . . ``` Output ``` YES NO YES ``` # Notes - In the first test case, the robots can move (Right, Right, Down, Down), totaling 4 moves. - In the second test case, it\'s impossible to reach the bottom-right corner within 3 moves. - In the third test case, the robots can move (Right, Right, Down, Down, Down, Right, Right), which totals 7 moves.","solution":"def can_reach_end_with_fuel(m, n, f, grid): if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return \\"NO\\" # Directions for right and down movements directions = [(0, 1), (1, 0)] queue = [(0, 0, 0)] # (row, col, steps) visited = set() visited.add((0, 0)) while queue: x, y, steps = queue.pop(0) if steps > f: continue if x == m-1 and y == n-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return \\"NO\\" def process_cases(t, cases): results = [] for case in cases: m, n, f = case[\'dims\'] grid = case[\'grid\'] results.append(can_reach_end_with_fuel(m, n, f, grid)) return results"},{"question":"You are a template designer for a company that generates printable graphics. The company offers custom products that allow customers to choose the size and shape of their templates. Each template is defined by two parameters: width and height, both in inches. To provide an optimal experience for the printing process, it is important to ensure that the aspect ratio of the template is maintained within a certain range defined by minimum and maximum values. Your task is to help the company by writing a function that, given the width and height of a template in inches, determines if the aspect ratio of the template is within the acceptable range. The aspect ratio of a template is defined as the width divided by the height (width/height). Both the minimum and maximum acceptable aspect ratios are provided. Input - The first line contains two floating-point numbers, min_aspect and max_aspect (0.1 ≤ min_aspect < max_aspect ≤ 10.0), representing the minimum and maximum acceptable aspect ratios. - The second line contains two floating-point numbers, width and height (0.1 ≤ width, height ≤ 1000.0), representing the width and height of the template in inches. Output Print \\"Acceptable\\" if the aspect ratio of the template is within the range [min_aspect, max_aspect], inclusive. Otherwise, print \\"Unacceptable\\". Examples Input 1.0 2.0 8.0 5.5 Output Acceptable Input 1.5 3.0 5.5 8.0 Output Unacceptable Input 1.3 1.7 12.0 8.0 Output Acceptable","solution":"def is_aspect_ratio_acceptable(min_aspect, max_aspect, width, height): Determines if the aspect ratio of the template is within the acceptable range. Parameters: min_aspect (float): minimum acceptable aspect ratio max_aspect (float): maximum acceptable aspect ratio width (float): width of the template in inches height (float): height of the template in inches Returns: str: \\"Acceptable\\" if the aspect ratio is within the range, \\"Unacceptable\\" otherwise. aspect_ratio = width / height if min_aspect <= aspect_ratio <= max_aspect: return \\"Acceptable\\" else: return \\"Unacceptable\\""},{"question":"Alice is given a number c. To help improve her programming skills, she decides to play with numbers a from 1 to c. For each a, she writes gcd(a, c)+lcm(a, c) on a board, where gcd(a, c) stands for the greatest common divisor of a and c, and lcm(a, c) stands for the least common multiple of a and c. Alice wants to know how many different numbers she would write on the board if she completes the task. Help her determine the quantity of different numbers. Input The only line contains one integer — c (1 ≤ c ≤ 10^6). Output Print one number — the answer to the problem. Examples Input 1 Output 1 Input 2 Output 2 Note In the first example gcd(a, 1) + lcm(a, 1) is always equal to 2 for every a from 1 to 1. In the second example, for a = 1, gcd(1, 2) + lcm(1, 2) = 3 and for a = 2, gcd(2, 2) + lcm(2, 2) = 4. Thus, there are 2 different numbers.","solution":"import math def distinct_gcd_lcm_sum(c): Returns the number of distinct values of gcd(a, c) + lcm(a, c) for a in the range 1 to c. distinct_values = set() for a in range(1, c + 1): gcd_val = math.gcd(a, c) lcm_val = (a * c) // gcd_val distinct_values.add(gcd_val + lcm_val) return len(distinct_values)"},{"question":"Given a directed graph with n nodes and m edges, you need to determine the length of the shortest cycle in the graph. A cycle is a path of edges (e_1, e_2, ..., e_k) such that the starting node of e_1 is the same as the ending node of e_k, and k is the number of edges in the cycle. If no cycles exist, output -1. Input The input consists of multiple data sets. Each data set has the following format. The first line consists of two integers n and m (1 ≤ n ≤ 500, 0 ≤ m ≤ 10,000). Each of the next m lines consists of two integers representing a directed edge. The first integer represents the start node, and the second integer represents the end node. Both node numbers are positive integers less than or equal to n. The input ends with a line containing two zeros, which should not be processed. Output For each test case, print its case number and the length of the shortest cycle or -1 if no cycle exists, with the case number. Example Input 3 3 1 2 2 3 3 1 3 2 1 2 2 3 4 3 1 2 2 3 3 4 0 0 Output Case 1: 3 Case 2: -1 Case 3: -1","solution":"def find_shortest_cycle(n, adj_list): import heapq def dijkstra(start): dist = [float(\'inf\')] * n dist[start] = 0 pq = [(0, start)] while pq: d, u = heapq.heappop(pq) if d > dist[u]: continue for v, weight in adj_list[u]: if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(pq, (dist[v], v)) return dist shortest_cycle_length = float(\'inf\') for node in range(n): dist = dijkstra(node) for u in range(n): for v, weight in adj_list[u]: if v == node and dist[u] + weight < shortest_cycle_length: shortest_cycle_length = dist[u] + weight return shortest_cycle_length if shortest_cycle_length != float(\'inf\') else -1 def solve_cases(input_data): results = [] case_num = 1 index = 0 while index < len(input_data): n, m = map(int, input_data[index].split()) if n == 0 and m == 0: break adj_list = [[] for _ in range(n)] for i in range(m): x, y = map(int, input_data[index + 1 + i].split()) adj_list[x - 1].append((y - 1, 1)) # edge weight of 1 shortest_cycle_length = find_shortest_cycle(n, adj_list) results.append(f\\"Case {case_num}: {shortest_cycle_length}\\") index += 1 + m case_num += 1 return results def main(input_lines): results = solve_cases(input_lines) for result in results: print(result) # Example of how to call the main function with input data input_data = [ \\"3 3\\", \\"1 2\\", \\"2 3\\", \\"3 1\\", \\"3 2\\", \\"1 2\\", \\"2 3\\", \\"4 3\\", \\"1 2\\", \\"2 3\\", \\"3 4\\", \\"0 0\\" ] main(input_data)"},{"question":"You are provided an array of integers. You need to count how many pairs (i, j) exist such that 0 ≤ i < j < N and the sum of the elements at those indices is even. Input: - First line contains T, the number of test cases. Each test case consists of two lines: - The first line contains an integer N, the size of the array. - The second line contains N space-separated integers representing the elements of the array. Output: - For each test case, print the required count of pairs. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^3 - 0 ≤ array elements ≤ 10^6 SAMPLE INPUT 2 4 1 2 3 4 5 5 5 5 5 5 SAMPLE OUTPUT 2 10 Explanation: In the first test case, the pairs are: - (1, 3) with elements (2, 4), both indices sum to 6, which is even. In the second test case, all pairs (i, j) with elements (5, 5) are even, leading to 10 pairs in total.","solution":"def count_even_sum_pairs(arr): Counts the number of pairs (i, j) such that 0 ≤ i < j < N and the sum of the elements at those indices is even. count_even = 0 count_odd = 0 for num in arr: if num % 2 == 0: count_even += 1 else: count_odd += 1 # The number of ways to choose 2 even numbers from count_even even_pairs = count_even * (count_even - 1) // 2 # The number of ways to choose 2 odd numbers from count_odd odd_pairs = count_odd * (count_odd - 1) // 2 return even_pairs + odd_pairs def process_test_cases(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] results.append(count_even_sum_pairs(arr)) return results"},{"question":"Tiana is creating a new online platform where users can create and share photo albums. To efficiently manage the albums, she\'s decided to store each photo as a unique number in the range [1, n]. She wants to identify the albums based on connected sets of photos. A set of photos is considered connected if you can reach any photo in the set starting from any other photo within the set, following certain rules. Each photo is described as a node in a graph, and there is an edge between two nodes (i, j) if and only if the sum of their corresponding numbers is even (i.e., i + j is even). Tiana needs to determine the number of connected photo sets for given n. Input: The first line contains an integer n (1 ≤ n ≤ 10^5) which represents the number of photos. Output: A single integer which is the number of connected photo sets. Example: Input: 4 Output: 2 Explanation: The photos can be split into two connected sets based on the rule: {2, 4} and {1, 3}. Each set follows the rule that the sum of any two elements of each set is even. Input: 7 Output: 2 Explanation: The photos can be split into two connected sets: {2, 4, 6} and {1, 3, 5, 7}. Again, each set follows the rule that the sum of any two elements of each set is even, thus making them connected within their respective sets. Input: 1 Output: 1 Explanation: Since there\'s only one photo, it forms a single connected set by itself.","solution":"def count_connected_sets(n): Returns the number of connected photo sets based on the given rules. if n == 1: return 1 else: return 2"},{"question":"Jesse is on a coding mission. Given a string S consisting of lowercase English letters only, help Jesse count the number of distinct substrings of S that start and end with the same character. A substring is defined as a contiguous sequence of characters within a string. Input The first line will contain the number of test cases T. The following T lines each contain a single string S. Output For each test case, print the number of distinct substrings that start and end with the same character. Constraints 1 <= T <= 100 1 <= |S| <= 1000 Example Input: 2 ababc aaaaa Output: 7 15 Explanation For the first test case, the distinct substrings are: \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"c\\", \\"aba\\", \\"abc\\". For the second test case, the distinct substrings are: \\"a\\", \\"a\\", \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aa\\", \\"aa\\", \\"aaa\\", \\"aaa\\", \\"aaa\\", \\"aaa\\", \\"aaaa\\", \\"aaaa\\", \\"aaaa\\". Quick. Help. over and out.","solution":"def distinct_substrings_count(s): Returns the number of distinct substrings of the string s that start and end with the same character. count = 0 n = len(s) for i in range(n): for j in range(i, n): if s[i] == s[j]: count += 1 return count def count_substrings_in_test_cases(test_cases): For each string S in test_cases, compute the number of distinct substrings that start and end with the same character. results = [] for s in test_cases: results.append(distinct_substrings_count(s)) return results"},{"question":"You are the developer responsible for creating the monitoring system for a high-traffic website. This system needs to parse logs to identify potential issues. The logs contain information about various requests to the server, including the timestamp, request type, and response time in milliseconds. Your task is to identify time intervals during which the server experiences high response times more frequently than a defined threshold. The input consists of multiple datasets. Each dataset represents a series of server logs for a single day and specifies the threshold. # Input Format The input contains multiple datasets. Each dataset consists of: - An integer N on the first line representing the number of log entries (1 ≤ N ≤ 1000) - An integer T on the second line representing the threshold for high response times (1 ≤ T ≤ 10000) - The next N lines each contain three space-separated values: - A string timestamp in the format \\"HH:MM\\" which indicates the time the request was made (00 ≤ HH ≤ 23 and 00 ≤ MM ≤ 59) - A string request type (GET or POST) - An integer response time in milliseconds (1 ≤ response_time ≤ 10000) The input ends with a single line containing \\"0\\". # Output Format For each dataset, output the time intervals in ascending order in the format \\"HH:MM-HH:MM\\" where the server experienced high response times according to the threshold. If there are no such intervals, output \\"No high response time intervals\\". # Sample Input ``` 5 1000 12:30 GET 1200 12:45 POST 800 13:00 GET 1500 13:15 GET 1100 13:30 POST 1300 0 ``` # Sample Output ``` 12:30-12:30 13:00-13:00 13:15-13:30 ``` # Explanation - The first dataset has 5 log entries and a threshold of 1000 milliseconds for high response times. - The server experiences high response times at \\"12:30\\", \\"13:00\\", \\"13:15\\", and \\"13:30\\". - The intervals of high response times are \\"12:30-12:30\\", \\"13:00-13:00\\", and \\"13:15-13:30\\". Note that consecutive high response time instances are treated as a single interval if they occur in succession with no non-high-response-time requests in between.","solution":"def parse_logs(logs): Parses the logs and returns the time intervals during which the server experiences high response times according to the threshold. # Initialize output list output = [] # Get the number of log entries and threshold idx = 0 while idx < len(logs): N = int(logs[idx]) if N == 0: break threshold = int(logs[idx + 1]) # Parse log entries high_response_times = [] for i in range(N): timestamp, request_type, response_time = logs[idx + 2 + i].split() response_time = int(response_time) if response_time > threshold: high_response_times.append(timestamp) # Determine time intervals if not high_response_times: output.append(\\"No high response time intervals\\") else: intervals = [] start_time = high_response_times[0] prev_time = high_response_times[0] for time in high_response_times[1:]: if time == prev_time: # consecutive same time entries continue if time.split(\\":\\")[0] == prev_time.split(\\":\\")[0] and int(time.split(\\":\\")[1]) == int(prev_time.split(\\":\\")[1]) + 1: prev_time = time else: intervals.append(f\\"{start_time}-{prev_time}\\") start_time = time prev_time = time # Append the last interval intervals.append(f\\"{start_time}-{prev_time}\\") output.append(\\"n\\".join(intervals)) # Move to the next dataset idx += 2 + N return output # Example usage logs = [ \\"5\\", \\"1000\\", \\"12:30 GET 1200\\", \\"12:45 POST 800\\", \\"13:00 GET 1500\\", \\"13:15 GET 1100\\", \\"13:30 POST 1300\\", \\"0\\" ] # Read the logs and identify high response time intervals result = parse_logs(logs) for res in result: print(res)"},{"question":"Your friend is moving to a new house and he needs to transport his collection of books. Each book has a specific weight, and his car has a weight limit it cannot exceed. Given the weight of each book and the car\'s weight limit, determine the maximum number of books he can transport in a single trip without exceeding the weight limit. Write a program that computes the maximum number of books that can be transported. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of books. The second line contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 10,000), representing the weight of each book. The third line contains an integer L (1 ≤ L ≤ 1,000,000), the weight limit of the car. Output Print the maximum number of books that can be transported in a single trip without exceeding the weight limit. Example Input 5 3000 2000 4000 1000 3500 8500 Output 3","solution":"def max_books(n, weights, limit): Calculate the maximum number of books that can be transported without exceeding the weight limit. Parameters: n (int): Number of books weights (list of int): List of weights of the books limit (int): Weight limit of the car Returns: int: Maximum number of books that can be transported # Sorting weights in ascending order weights.sort() total_weight = 0 count = 0 for weight in weights: if total_weight + weight <= limit: total_weight += weight count += 1 else: break return count"},{"question":"Dr. Azuma, an avid mathematician and puzzle enthusiast, has recently devised a new challenge involving palindrome numbers. He seeks your help to determine whether given numbers can be rearranged to form a palindrome with minimal changes. A palindrome number is a number that reads the same backward as forward. For the purpose of this challenge, you can rearrange the digits of the number and at most change one digit to achieve a palindrome. Your task is to write a program that, given a number, determines if it\'s possible to rearrange its digits to form a palindrome with at most one digit change. If it\'s possible, print \\"Yes\\" and the resulting palindrome. If it\'s not possible, print \\"No\\". Note: - You may assume that the input number will be a non-negative integer. - The input will not contain leading zeroes. - The input number length will not exceed 10^5 digits. Input The input consists of multiple datasets. Each dataset is a single number given on a separate line. The end of input is indicated by a line containing the digit 0 alone. Output For each dataset, print \\"Yes\\" followed by the resulting palindrome if it\'s possible to create one with at most one digit change, otherwise print \\"No\\". Do not print any other extra characters. Sample Input 12321 12121 2002 98765 0 Output for Sample Input Yes 12321 Yes 12121 Yes 2002 No Example Input 12321 12121 2002 98765 0 Output Yes 12321 Yes 12121 Yes 2002 No","solution":"def can_form_palindrome_with_one_edit(num_str): Determines if a number can be rearranged to form a palindrome with at most one digit change. n = len(num_str) left, right = 0, n - 1 changes = 0 chars = list(num_str) while left < right: if chars[left] != chars[right]: if changes == 1: return \\"No\\" changes += 1 # Set the higher value for the change to minimize further mismatches if chars[left] > chars[right]: chars[right] = chars[left] else: chars[left] = chars[right] left += 1 right -= 1 # Handle the middle part for odd length cases if changes > 1: return \\"No\\" return f\\"Yes {\'\'.join(chars)}\\" def process_input_numbers(numbers): results = [] for number in numbers: if number == \'0\': break result = can_form_palindrome_with_one_edit(number) results.append(result) return results if __name__ == \\"__main__\\": import sys input_numbers = sys.stdin.read().strip().split() results = process_input_numbers(input_numbers) for res in results: print(res)"},{"question":"Little Timmy loves playing with sequences of numbers and finds great joy in discovering patterns within them. Recently, he found two integer sequences and is trying to create a new sequence from them. Timmy wants the new sequence to be a common subsequence of the two given sequences and also wants it to be of the maximum possible length. A subsequence is derived by deleting some or no elements from a sequence without changing the order of the remaining elements. Given two sequences, your task is to help Timmy find the length of the longest common subsequence (LCS) between the two sequences. Input The first line contains an integer n (1 ≤ n ≤ 5000) — the length of the first sequence. The second line contains n space-separated integers, representing the first sequence. It is guaranteed that all elements of the sequence are between 1 and 1000. The third line contains an integer m (1 ≤ m ≤ 5000) — the length of the second sequence. The fourth line contains m space-separated integers, representing the second sequence. It is guaranteed that all elements of the sequence are between 1 and 1000. Output Print a single integer — the length of the longest common subsequence of the two given sequences. Examples Input 5 1 2 3 4 5 6 2 4 6 1 3 5 Output 3 Input 3 7 8 9 3 10 11 12 Output 0 In the first example, the longest common subsequence is [2, 4, 5], and its length is 3. In the second example, there is no common subsequence, so the output is 0.","solution":"def longest_common_subsequence(seq1, seq2): n = len(seq1) m = len(seq2) # Create a dp array with (n+1) x (m+1) dimensions initialized to 0 dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if seq1[i - 1] == seq2[j - 1]: # If elements match, take diagonal value + 1 dp[i][j] = dp[i - 1][j - 1] + 1 else: # If not, take the maximum of the left and top values dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The value at the bottom-right corner will be the length of the LCS return dp[n][m]"},{"question":"You are tasked with designing a seating plan for a wedding. The challenge is to determine if you can assign guests to tables in such a way that no table has more than M guests, while ensuring that no one who should not sit together is placed at the same table. The wedding planner gives you a list of guests and a list of pairs of guests who should not be seated at the same table. Write a program to determine if such a seating arrangement is possible. Input The input consists of several lines. The first line contains two integers N and M (2 ≤ N ≤ 100000, 1 ≤ M ≤ 100), where N is the number of guests and M is the maximum number of guests per table. In the next N lines, each line contains the name of a guest. The following lines contain pairs of guest names, indicating that these guests should not be seated at the same table. Each guest name is a string of up to 100 characters consisting of alphabetical characters and spaces. Output Output \\"YES\\" if it is possible to assign guests to tables as described, or \\"NO\\" if it is not possible. Example Input 5 2 Alice Bob Charlie David Eve Alice Bob Bob Charlie Charlie David David Eve Output YES Explanation In this case, the guests can be seated in the following manner: Table 1: Alice, Charlie Table 2: Bob, David Table 3: Eve","solution":"def possible_to_seat(N, M, guests, restrictions): from collections import defaultdict # Create graph from restrictions graph = defaultdict(list) for u, v in restrictions: graph[u].append(v) graph[v].append(u) # Initialize color array for the guests, -1 means no color assigned color = {guest: -1 for guest in guests} # A utility function to check if the current color assignment is safe for vertex v def is_safe(v, c): for neighbor in graph[v]: if color[neighbor] == c: return False return True # A backtracking function to check if we can color the graph using M colors def graph_coloring(num_colors, v): if v == N: return True for c in range(num_colors): if is_safe(guests[v], c): color[guests[v]] = c if graph_coloring(num_colors, v + 1): return True color[guests[v]] = -1 return False return \\"YES\\" if graph_coloring(M, 0) else \\"NO\\""},{"question":"A robot is positioned at the top-left corner of an m x n grid (marked \'Start\' in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the diagram below). There are some obstacles on the grid, which the robot cannot pass. The obstacles are marked as 1 and empty spaces are marked as 0. The grid is represented by a 2D integer array with m rows and n columns. Write a function to determine if the robot can reach the bottom-right corner from the top-left corner of the grid. If there is a path return the number of steps in the shortest path, otherwise return -1. Input - The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. - The following m lines contain n integers each, representing the grid. The value of each element in the grid is either 0 (empty space) or 1 (obstacle). Output - Output a single integer representing the number of steps in the shortest path from the top-left corner to the bottom-right corner. If there is no such path, return -1. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 4 Input 3 3 0 0 0 1 1 0 0 0 0 Output 4 Input 3 3 1 0 0 0 1 0 0 0 0 Output -1 Note In the first sample, the grid is 0 0 0 0 1 0 0 0 0 The minimum number of steps required to move to the bottom-right corner is 4: right -> down -> down -> right. In the second sample, the grid is 0 0 0 1 1 0 0 0 0 The minimum number of steps required to move to the bottom-right corner is 4: right -> right -> down -> down. In the third sample, the grid is 1 0 0 0 1 0 0 0 0 The robot cannot start from the top-left corner as it is an obstacle, therefore the output is -1.","solution":"from collections import deque def shortest_path(grid): Determines the number of steps in the shortest path from the top-left corner to the bottom-right corner in a grid. m = len(grid) n = len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 # Directions for right and down movements directions = [(0, 1), (1, 0)] # Initialize queue for BFS queue = deque([(0, 0, 0)]) # (row, column, distance) visited = set((0, 0)) while queue: x, y, distance = queue.popleft() # Check if we\'ve reached the bottom-right corner if x == m-1 and y == n-1: return distance # Explore all possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, distance + 1)) return -1 # Return -1 if there is no path"},{"question":"Write a program that takes an integer `n` and prints an `n x n` grid of sequential numbers starting from 1. The grid should be filled in a zigzag pattern where each row is filled from left to right, but alternating rows are filled in the reverse order, from right to left. For example, if the input is `3`, the output will look like: Input: 3 Output: ```plaintext 1 2 3 6 5 4 7 8 9 ``` If the input is `4`, the output will look like: Input: 4 Output: ```plaintext 1 2 3 4 8 7 6 5 9 10 11 12 16 15 14 13 ``` Constraints: - 1 <= n <= 20","solution":"def generate_zigzag_grid(n): Generate an n x n grid of sequential numbers in a zigzag pattern. grid = [[0] * n for _ in range(n)] num = 1 for row in range(n): if row % 2 == 0: for col in range(n): grid[row][col] = num num += 1 else: for col in range(n-1, -1, -1): grid[row][col] = num num += 1 return grid def print_grid(grid): Print the n x n grid. for row in grid: print(\' \'.join(map(str, row))) # Example usage: n = 3 grid = generate_zigzag_grid(n) print_grid(grid)"},{"question":"You are given an array of integers, and you need to determine if there exists a subarray (contiguous elements) with a sum equal to a given value. Write a function to solve the problem. Function Signature: ```python def has_subarray_with_sum(arr, target_sum): pass ``` Input - `arr`: a list of integers, where the length of the list is between 1 and 100,000, inclusive. - `target_sum`: an integer representing the sum to check for, where the value can range from -1,000,000,000 to 1,000,000,000, inclusive. Output - Return `True` if there exists a subarray of `arr` with a sum equal to `target_sum`. Otherwise, return `False`. Examples ```python has_subarray_with_sum([1, 2, 3, 4, 5], 9) ``` Output: `True` Explanation: The subarray [2, 3, 4] has a sum of 9. ```python has_subarray_with_sum([1, 2, 3, 4, 5], 15) ``` Output: `True` Explanation: The subarray [1, 2, 3, 4, 5] has a sum of 15. ```python has_subarray_with_sum([1, 2, 3, 4, 5], 20) ``` Output: `False` Explanation: There is no subarray with a sum of 20. ```python has_subarray_with_sum([-1, -2, -3, -4, -5], -10) ``` Output: `True` Explanation: The subarray [-1, -2, -3, -4] has a sum of -10.","solution":"def has_subarray_with_sum(arr, target_sum): Check if there exists a subarray with a sum equal to the target_sum. current_sum = 0 prefix_sums = {0: -1} # Store cumulative sums with their corresponding index for i, num in enumerate(arr): current_sum += num # Check if there is a prefix sum that we can subtract to get the target_sum if current_sum - target_sum in prefix_sums: return True # Store the current_sum with its corresponding index prefix_sums[current_sum] = i return False"},{"question":"You are given a binary tree with `n` nodes, where each node has a unique value from 1 to `n`. The tree is provided in the form of a `parent` array of length `n`, where `parent[i]` represents the parent of node `i+1`. If `parent[i]` is `-1`, then `i+1` is the root of the tree. Your task is to write a function that returns the diameter of the binary tree. The diameter of a binary tree is defined as the length of the longest path between any two nodes in a tree. This path may or may not pass through the root. Implement the function `findDiameter(n, parent)` where: - `n` (1 ≤ n ≤ 10^5) is the number of nodes in the tree. - `parent` is an array of length `n` with values in the range `-1` to `n`. The function should return an integer representing the diameter of the tree. Input - `n`: Integer representing the number of nodes in the tree. - `parent`: List of integers of length `n`, where `parent[i]` is the parent of node `i+1`, or `-1` if `i+1` is the root. Output - Return the diameter of the binary tree as an integer. Example Input ``` 6 [-1, 1, 1, 2, 2, 3] ``` Output ``` 4 ``` Explanation The tree can be visualized as: ``` 1 / 2 3 / 4 5 / 6 ``` The longest path is 6 -> 4 -> 2 -> 1 -> 3, which has length 4. So, the diameter of the tree is 4.","solution":"from collections import defaultdict, deque def findDiameter(n, parent): # Build the adjacency list of the tree tree = defaultdict(list) root = None for i in range(n): if parent[i] == -1: root = i + 1 else: tree[parent[i]].append(i + 1) tree[i + 1].append(parent[i]) def bfs(start): distance = [-1] * (n + 1) queue = deque([start]) distance[start] = 0 furthest_node = start while queue: node = queue.popleft() for neighbor in tree[node]: if distance[neighbor] == -1: queue.append(neighbor) distance[neighbor] = distance[node] + 1 if distance[neighbor] > distance[furthest_node]: furthest_node = neighbor return furthest_node, distance[furthest_node] # 1. Find the farthest node from any arbitrary node (let\'s pick the root) farthest_node_from_root, _ = bfs(root) # 2. Find the farthest node from the node found in step 1, this distance is the diameter other_farthest_node, diameter = bfs(farthest_node_from_root) return diameter"},{"question":"You are given a list of n distinct integers. You need to find the number of pairs of integers (i, j) in the list such that i < j and the difference between i and j is k. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^4) — the number of integers in the list. The second line contains n integers — the elements of the list. The third line contains an integer k (0 ≤ k ≤ 10^4). Output Output a single integer — the number of pairs (i, j) such that i < j and j - i = k. Examples Input 5 1 5 3 4 2 2 Output 3 Input 4 1 2 3 4 1 Output 3","solution":"def count_pairs_with_difference_k(n, arr, k): Returns the number of pairs (i, j) such that i < j and j - i = k. Parameters: - n: int, the number of integers in the list. - arr: list of int, the integers list. - k: int, the required difference between pairs. Returns: - int, the count of pairs (i, j) with difference k. arr_set = set(arr) count = 0 for num in arr: if num + k in arr_set: count += 1 return count"},{"question":"Write a function that takes a list of integers and returns a list where each element is the number of times that integer appears in the list. Input The input consists of one line. The line contains space-separated integers, where each integer can be between -10^6 and 10^6. The number of integers in the list is between 1 and 10^5. Output Output one line containing space-separated integers. The i-th integer in the output is the count of times the corresponding integer appears in the input list. Example Input 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 Output 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5","solution":"def count_occurrences(lst): Returns a list where each element is the number of times that integer appears in the input list. from collections import Counter count = Counter(lst) return [count[num] for num in lst] # Example usage: # lst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5] # print(count_occurrences(lst)) # Output: [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]"},{"question":"In this problem, you need to simulate the operations on a simple text editor. The editor contains an initially empty string and supports the following operations: 1. Insert a substring at the end of the current text. 2. Delete the last k characters from the current text. 3. Print the character at a given 1-based index in the current text. 4. Undo the last not previously undone operation. The operations are given in the form of commands. Your task is to write a program to process these commands and output the results of print operations. Constraints: * 1 ≤ number of operations ≤ 100000 * 1 ≤ length of substring in insert operations ≤ 1000 * 1 ≤ k in delete operations ≤ length of current text Input: The first line contains an integer n, the number of operations. Each of the next n lines contains a command with the following format: * \'1 w\' where w is the substring to be inserted. * \'2 k\' where k is the number of characters to delete from the end. * \'3 k\' where k is the 1-based position of the character to print. * \'4\' to undo the last operation (excluding print operations). Output: For each \'3 k\' command, output the character at position k on a new line. Examples: Input: 8 1 abc 1 def 3 4 2 3 3 3 1 xyz 4 3 3 Output: d c d Explanation: 1. Insert \\"abc\\". Current text: \\"abc\\". 2. Insert \\"def\\". Current text: \\"abcdef\\". 3. Print the 4th character. Output: \\"d\\". 4. Delete the last 3 characters. Current text: \\"abc\\". 5. Print the 3rd character. Output: \\"c\\". 6. Insert \\"xyz\\". Current text: \\"abcxyz\\". 7. Undo the last insert operation. Current text: \\"abc\\". 8. Print the 3rd character. Output: \\"c\\".","solution":"def text_editor(n, operations): text = [] history = [] outputs = [] for operation in operations: command = operation.split() if command[0] == \'1\': # Insert history.append(\'1 \' + \'\'.join(text)) text.extend(command[1]) elif command[0] == \'2\': # Delete k = int(command[1]) history.append(\'\'.join(text)) text = text[:-k] elif command[0] == \'3\': # Print k = int(command[1]) outputs.append(text[k-1]) elif command[0] == \'4\': # Undo if len(history) > 0: last_op = history.pop() if last_op.startswith(\'1 \'): text = list(last_op[2:]) else: text = list(last_op) return outputs"},{"question":"You are given a matrix of size NxN filled with integers. Your task is to find a path from the top left corner to the bottom right corner such that the sum of the integers along the path is minimized. You can only move right or down from any cell. Write a function to calculate the minimum path sum. Function Signature: ```python def min_path_sum(matrix: List[List[int]]) -> int: ``` Input Format: - The first line contains an integer N, the size of the matrix. - The next N lines each contain N integers representing the matrix. Output Format: - Output a single integer, the minimum path sum. Constraints: 1 ≤ N ≤ 100 -100 ≤ matrix[i][j] ≤ 100 SAMPLE INPUT 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 21 Explanation: One possible path with the minimum sum is 1 -> 2 -> 3 -> 6 -> 9, with a total sum of 21.","solution":"from typing import List def min_path_sum(matrix: List[List[int]]) -> int: Calculate the minimum path sum in a given NxN matrix from top left to bottom right. You can only move right or down from any cell. N = len(matrix) # Initialize a 2D dp array to store the minimum path sum up to each point dp = [[0]*N for _ in range(N)] # Base case: starting point dp[0][0] = matrix[0][0] # Fill the first row for j in range(1, N): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of dp table for i in range(1, N): for j in range(1, N): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[N-1][N-1]"},{"question":"Alice and Bob are playing a game on a graph with n nodes and m edges. They take turns, starting with Alice, where each turn consists of choosing an edge that hasn\'t been chosen before and removing it from the graph. The player who removes an edge that causes the graph to break into two or more disconnected components loses the game. Given a graph, your task is to determine whether Alice can always win if both players play optimally. Alice wins if she can leave Bob without a valid move, i.e., by ensuring the graph remains connected no matter which edges are removed. Input The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of nodes and edges. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n) — an edge between nodes u and v. Output Print \\"Yes\\" if Alice can always win the game by playing optimally, otherwise print \\"No\\". Examples Input 3 3 1 2 2 3 3 1 Output No Input 4 5 1 2 1 3 1 4 2 3 3 4 Output Yes Note In the first example, no matter which edge Alice starts by removing, Bob can always remove another edge to eventually split the graph. Therefore, Alice cannot guarantee a win. In the second example, Alice can start by removing an edge in such a way that no matter how Bob plays, she can maintain the graph connected and win the game.","solution":"def can_alice_win(n, m, edges): Determines if Alice can always win if both players play optimally Parameters: n (int): Number of nodes m (int): Number of edges edges (list of tuples): List of edges in the graph Returns: str: \\"Yes\\" if Alice can always win, \\"No\\" otherwise if m < n - 1: return \\"No\\" # Not enough edges to keep the graph connected for i in range(1, n + 1): degree_count = sum(1 for u, v in edges if u == i or v == i) if degree_count >= 3: return \\"Yes\\" return \\"No\\""},{"question":"# Problem Statement You are given a list of tuples where each tuple represents a pair of nodes indicating an edge in an undirected graph. You are tasked with implementing a function that determines if the graph contains any cycles. # Function Signature ```python def has_cycle(edges: List[Tuple[int, int]]) -> bool: pass ``` # Input - `edges` (list of tuples): A list of tuples, where each tuple contains two integers representing a pair of nodes connected by an edge in the undirected graph. Each node is numbered, and there are no self-loops or multiple edges between the same pair of nodes. # Output - Return `True` if there is at least one cycle in the graph; otherwise, return `False`. # Example ```python edges = [(1, 2), (2, 3), (3, 1)] print(has_cycle(edges)) # Output: True edges = [(1, 2), (2, 3), (3, 4)] print(has_cycle(edges)) # Output: False ``` # Constraints - The number of edges will be between 1 and 10^4. - The number of nodes will be between 2 and 10^4. # Note - You may assume that the graph is initially connected. - Use an appropriate graph traversal technique (such as Union-Find) to detect cycles effectively.","solution":"from typing import List, Tuple def has_cycle(edges: List[Tuple[int, int]]) -> bool: parent = {} def find(node): if parent[node] != node: parent[node] = find(parent[node]) return parent[node] def union(node1, node2): root1 = find(node1) root2 = find(node2) if root1 == root2: return False parent[root2] = root1 return True for edge in edges: node1, node2 = edge if node1 not in parent: parent[node1] = node1 if node2 not in parent: parent[node2] = node2 if not union(node1, node2): return True return False"},{"question":"You are given a string consisting of lowercase letters and digits. Your task is to check if the string is a valid hexadecimal number. A valid hexadecimal number should start with the prefix \\"0x\\" or \\"0X\\" followed by one or more characters between \'0\'-\'9\', \'a\'-\'f\', or \'A\'-\'F\'. Design a function that returns True if the string is a valid hexadecimal number and False otherwise. Function Signature: ```python def is_valid_hex(string: str) -> bool: ``` Input - A single string, whose length is between 2 and 100, inclusive. The string consists only of lowercase letters, uppercase letters, and digits. Output - Return True if the given string is a valid hexadecimal number, otherwise return False. Examples Input 0x1a3f Output True Input 1A3F Output False Input 0X1G3D Output False Input 0x Output False","solution":"def is_valid_hex(string: str) -> bool: Returns True if the provided string is a valid hexadecimal number, otherwise returns False. # Check if the string starts with the prefix \\"0x\\" or \\"0X\\" if string.startswith(\\"0x\\") or string.startswith(\\"0X\\"): # Check if every character after the prefix is a valid hex digit hex_digits = set(\\"0123456789abcdefABCDEF\\") for char in string[2:]: if char not in hex_digits: return False # Validate if there\'s at least one digit after the prefix return len(string) > 2 return False"},{"question":"Given an array of integers nums and an integer k, return the number of distinct subarrays of nums whose sum is equal to k. A subarray is a contiguous non-empty sequence of elements within an array. # Examples Example 1 **Input:** ``` nums = [1, 1, 1] k = 2 ``` **Output:** ``` 2 ``` **Explanation:** There are two subarrays whose sums equal to 2: - [1, 1] (from index 0 to 1) - [1, 1] (from index 1 to 2) Example 2 **Input:** ``` nums = [1, 2, 3] k = 3 ``` **Output:** ``` 2 ``` **Explanation:** There are two subarrays whose sums equal to 3: - [1, 2] (from index 0 to 1) - [3] (from index 2 to 2) # Constraints - 1 ≤ nums.length ≤ 2 ⋅ 10^4 - -1000 ≤ nums[i] ≤ 1000 - -10^7 ≤ k ≤ 10^7 # Input - The first line contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^4, -10^7 ≤ k ≤ 10^7), the length of the array nums and the target sum respectively. - The second line contains n integers, the elements of the array nums. # Output - Print one integer, the number of distinct subarrays whose sum equals k. # Note - There may be zero occurrences of subarrays summing to the target, in which case the output should be 0. # Example **Input:** ``` 6 5 1 2 3 4 5 -2 ``` **Output:** ``` 2 ``` **Explanation:** There are two subarrays whose sums equal to 5: - [2, 3] (from index 1 to 2) - [5] (from index 4 to 4)","solution":"def subarray_sum_equals_k(nums, k): Returns the number of distinct subarrays whose sum equals to k. prefix_sum_counts = {0: 1} current_sum = 0 count = 0 for num in nums: current_sum += num if current_sum - k in prefix_sum_counts: count += prefix_sum_counts[current_sum - k] if current_sum not in prefix_sum_counts: prefix_sum_counts[current_sum] = 0 prefix_sum_counts[current_sum] += 1 return count"},{"question":"Stella is participating in a marathon. She needs to pace herself by maintaining an even running speed throughout the race. However, her friends are tracking her progress at different points and providing updates on her average speed. To help her understand if she is pacing evenly, she wants to verify if her speeds at different checkpoints form a consistent pattern. Given the time and distance measurements at different checkpoints, determine if these measurements suggest a constant speed at each interval. You are provided with a list of time and distance pairs, and you need to decide if these pairs imply that Stella has maintained a constant speed throughout the race. Input The first line of the input contains an integer n (n ≥ 2, n ≤ 100,000) — the number of checkpoints. The next n lines each contain two integers ti and di (1 ≤ ti, di ≤ 10^9) — the time and distance measured at the ith checkpoint. Output Print \\"Yes\\" (without quotes) if Stella\'s running speed has been constant between all checkpoints, or \\"No\\" (without quotes) otherwise. Examples Input 4 1 2 2 4 3 6 4 8 Output Yes Input 3 2 5 4 10 8 15 Output No Note In the first sample, the speed is consistent as ti to di ratio is 2 units of distance per 1 unit of time. In the second sample, the speed is inconsistent as the second interval from time 4 to 8 does not match the speed of the first interval from time 2 to 4.","solution":"def is_constant_speed(n, checkpoints): Determines if the speeds at different checkpoints form a consistent pattern. Args: n (int): Number of checkpoints. checkpoints (list of tuples): List of (time, distance) pairs. Returns: str: \\"Yes\\" if the running speed has been constant, \\"No\\" otherwise. if n < 2: return \\"No\\" # Less than 2 data points can\'t form a pattern previous_time, previous_distance = checkpoints[0] for i in range(1, n): current_time, current_distance = checkpoints[i] # Calculate the speed between the previous checkpoint and the current checkpoint if (current_distance - previous_distance) * (checkpoints[i-1][0]) != (current_time - previous_time) * (checkpoints[i-1][1]): return \\"No\\" return \\"Yes\\""},{"question":"A scientist is experimenting with a new type of bacteria growth. She starts with a certain number (N) of initial bacteria. Each day, the bacteria double in quantity. However, to prevent overgrowth, she removes a specific percentage (P) of the bacteria at the end of each day. Your task is to calculate the final number of bacteria after D days. Input Format: initial_bacteria daily_removal_percentage number_of_days Output Format: final_bacteria Constraints: 1 ≤ N ≤ 1000 1 ≤ P ≤ 99 1 ≤ D ≤ 100 SAMPLE INPUT 100 20 3 SAMPLE OUTPUT 409.6 Explanation Day 1: Starts with 100 bacteria. Doubles to 200. Removes 20% to leave 160. Day 2: Starts with 160 bacteria. Doubles to 320. Removes 20% to leave 256. Day 3: Starts with 256 bacteria. Doubles to 512. Removes 20% to leave 409.6. Final number of bacteria after 3 days is 409.6.","solution":"def calculate_final_bacteria(initial_bacteria, daily_removal_percentage, number_of_days): Calculate the final number of bacteria after a certain number of days, given an initial number of bacteria, a daily removal percentage, and the number of days. :param initial_bacteria: int - initial number of bacteria :param daily_removal_percentage: int - percentage of bacteria removed daily :param number_of_days: int - number of days bacteria grows :return: float - final number of bacteria after the given number of days remaining_bacteria = initial_bacteria for _ in range(number_of_days): # Double the number of bacteria remaining_bacteria *= 2 # Remove the specified percentage of bacteria remaining_bacteria *= (1 - daily_removal_percentage / 100) return remaining_bacteria"},{"question":"Given a string S consisting of lowercase alphabets, find the length of the longest substring that consists of the same character. Constraints * 1 <= |S| <= 10^6 * S consists only of lowercase English letters. Input Input is given from Standard Input in the following format: S Output Print the length of the longest contiguous substring that consists of the same character. Examples Input aaabbbaaacccc Output 4 Input abcdef Output 1 Input aaaabbbbbccccddddeeeeefffff Output 5","solution":"def longest_contiguous_substring(S): Returns the length of the longest contiguous substring that consists of the same character. if not S: return 0 max_length = 1 current_length = 1 # Iterate over the string, starting from the second character for i in range(1, len(S)): if S[i] == S[i - 1]: # Check if the current character is same as the previous one current_length += 1 else: max_length = max(max_length, current_length) # Update max_length if needed current_length = 1 # Reset current_length # Final check to update max_length for the last contiguous characters max_length = max(max_length, current_length) return max_length"},{"question":"Jinxorg is the manager of a large warehouse. The warehouse has n storage sections arranged in a straight line, labeled from 1 to n from left to right. Each section i contains a certain number of items ai. Jinxorg employs m workers who are responsible for collecting these items. Each worker starts from section 1 and moves continuously to section n, without skipping any sections. The workers can carry any number of items. A workday consists of several rounds. During each round, every worker must start from section 1 and collect items until they reach section n. The goal is to minimize the total number of rounds needed for all workers to collect all items from the warehouse. Your task is to determine the minimum number of rounds needed if all workers work optimally. Input The first line contains two integers n and m (1 ≤ n ≤ 105, 1 ≤ m ≤ 100), denoting the number of sections and the number of workers, respectively. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109), representing the number of items in each section. Output Output a single integer, the minimum number of rounds needed. Examples Input 5 2 5 2 3 7 1 Output 5 Input 6 3 1 2 3 4 5 6 Output 6 Input 4 2 0 0 0 10 Output 5 Notes In the first example, one optimal way is for the first worker to collect items from sections [1, 5] in the first round, then the second worker collects items from sections [1, 7], and so forth. In the second example, each worker can collect items from all sections in one round. Since there are 3 workers, each worker will collect items from sections [1, 2, ..., 6], resulting in one round. In the third example, the last section has all the items. Despite having two workers, the last section requires 5 rounds in total.","solution":"def minimum_rounds(n, m, a): max_items_per_round = max(a) return max_items_per_round"},{"question":"In a computer security system, a password is considered strong if the following conditions are met: - It has at least 8 characters. - It contains at least one lowercase letter. - It contains at least one uppercase letter. - It contains at least one digit. - It contains at least one special character from this set: !@#%^&*()-+ Write a function `isStrongPassword(password: str) -> bool` that determines whether a given password is strong. Input The input is a single string `password` (1 ≤ |password| ≤ 1000), the password to be checked. Output Return `True` if the password is strong, otherwise return `False`. Examples # Example 1 Input: ``` Abcdef1! ``` Output: ``` True ``` Explanation: The password \\"Abcdef1!\\" meets all the strength criteria. # Example 2 Input: ``` abcdef1! ``` Output: ``` False ``` Explanation: The password \\"abcdef1!\\" does not have any uppercase letters. # Example 3 Input: ``` Abcdefgh` ``` Output: ``` False ``` Explanation: The password \\"Abcdefgh`\\" does not contain any digits. # Example 4 Input: ``` Abcdef ``` Output: ``` False ``` Explanation: The password \\"Abcdef\\" is less than 8 characters long. # Example 5 Input: ``` A1!aA1!a ``` Output: ``` True ``` Explanation: The password \\"A1!aA1!a\\" meets all the strength criteria.","solution":"def isStrongPassword(password): Determines whether the given password is strong based on predefined criteria. Args: password (str): The password to be checked. Returns: bool: True if the password is strong, otherwise False. if len(password) < 8: return False has_lower = any(c.islower() for c in password) has_upper = any(c.isupper() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \\"!@#%^&*()-+\\" for c in password) return all([has_lower, has_upper, has_digit, has_special])"},{"question":"Given strings s and t, find whether there is a permutation of s that is a substring of t. In other words, check if s\'s permutation is present in t. Input The first line contains a string s (1 ≤ |s| ≤ 10^4) — the string for which we need to find a permutation substring in t. The second line contains a string t (1 ≤ |t| ≤ 10^5) — the string in which we need to find the permutation of s. All characters in both s and t are lowercase English letters. Output Print \\"YES\\" if a permutation of s is a substring of t, otherwise print \\"NO\\". Examples Input ab eidbaooo Output YES Input ab eidboaoo Output NO","solution":"from collections import Counter def check_permutation_in_string(s, t): Check if there is a permutation of s that is a substring of t. len_s, len_t = len(s), len(t) if len_s > len_t: return \\"NO\\" s_counter = Counter(s) window_counter = Counter(t[:len_s]) if s_counter == window_counter: return \\"YES\\" for i in range(len_s, len_t): window_counter[t[i]] += 1 window_counter[t[i - len_s]] -= 1 if window_counter[t[i - len_s]] == 0: del window_counter[t[i - len_s]] if s_counter == window_counter: return \\"YES\\" return \\"NO\\""},{"question":"A new mission awaits the brave Inca explorers! You are tasked with navigating a treacherous temple filled with puzzles. The temple\'s door is sealed by a numerical lock that changes its requirement each day. The lock generates a sequence of non-negative integers, and just like the ancient Inca\'s way, the key to unlocking the door lies in understanding specific properties of this sequence. Each day, you are given a different sequence of non-negative integers denoted as `a`. The lock displays an integer `k`, and you must calculate the number of subsequences from the sequence `a` whose sum is exactly `k`. Note that a subsequence is derived from the sequence `a` by deleting some or none of the elements without changing the order of the remaining elements. To keep track of your daily explorations, you have to answer multiple queries in one go. Input The first line contains an integer `q` (1 ≤ q ≤ 100) — the number of queries. Each query follows: - The first line of each query contains an integer `n` (1 ≤ n ≤ 100) — the number of elements in the sequence `a`. - The second line contains `n` non-negative integers separated by spaces — the elements of the sequence `a`. - The third line contains an integer `k` (0 ≤ k ≤ 1000). Output For each query, print the number of subsequences whose sum is exactly `k`, on a new line. Example Input 2 3 1 2 3 4 4 1 1 1 1 2 Output 1 6 Explanation For the first query: - The sequence `a` is [1, 2, 3] - The only subsequence summing to 4 is [1, 3], thus there\'s 1 such subsequence. For the second query: - The sequence `a` is [1, 1, 1, 1] - There are 6 subsequences producing the sum 2: [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], and [1, 1]. Note In solving the problem, consider that the sum of all elements in the sequence will never exceed 1000. Time to dive deep into the temple with confidence and resolve these ancient puzzles!","solution":"def count_subsequences_with_sum(a, k): n = len(a) dp = [[0] * (k + 1) for _ in range(n + 1)] dp[0][0] = 1 # There\'s one way to get sum 0 by selecting no elements. for i in range(1, n + 1): for j in range(k + 1): dp[i][j] = dp[i - 1][j] # subsequences without including the current element if j >= a[i - 1]: dp[i][j] += dp[i - 1][j - a[i - 1]] # subsequences including the current element return dp[n][k] def process_queries(queries): results = [] for query in queries: n = query[\'n\'] a = query[\'a\'] k = query[\'k\'] result = count_subsequences_with_sum(a, k) results.append(result) return results"},{"question":"In a futuristic world, robots work together to efficiently complete tasks. Robots are arranged in a straight line, numbered from 1 to n from left to right. Each robot has a specific battery level, represented by an integer array b_1, b_2, ..., b_n. Your task is to assemble a subteam of contiguous robots such that the total energy consumption during their operation is minimized, but still equal to or just larger than a given threshold E. The energy consumption of a subteam is the sum of battery levels of all robots in that subteam. You need to find the minimum possible length of such a subteam. If no subteam\'s energy consumption can meet or exceed the threshold E, return -1. # Input - The first line contains an integer n (1 ≤ n ≤ 100,000) representing the number of robots. - The second line contains an integer E (1 ≤ E ≤ 10^9) representing the energy consumption threshold. - The third line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^6) representing the battery levels of the robots. # Output - Output a single integer, the minimum length of a contiguous subteam whose energy consumption is at least E. If no such subteam exists, output -1. # Example Input ``` 6 15 3 1 4 1 5 9 ``` Output ``` 3 ``` Explanation In this example, the minimum subteam length with energy consumption of at least 15 is 3, which corresponds to robots with battery levels [4, 1, 5] or [1, 5, 9]. # Note There are multiple subteams that can meet the energy consumption threshold, but you must find the one with the minimum length. Additional Information You can assume that suitable subteams will not always be positioned at the starting or ending segments of the array, thus a sliding window or similar technique may be useful in efficiently finding the solution.","solution":"def min_subteam_length(robots, E): n = len(robots) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += robots[end] while current_sum >= E: min_length = min(min_length, end - start + 1) current_sum -= robots[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"A university has M courses, Course 1, ldots, M. Each course has P students enrolled, and each student has a grade between 0 and 100. The university wants to determine the average grade for each course. Write a program that takes the number of courses and the grades of students in each course and prints the average grade for each course. Constraints * 1 leq M leq 100 * 1 leq P leq 100 * 0 leq grade leq 100 * All values in input are integers. Input Input is given from Standard Input in the following format: M P grade_{1,1} grade_{1,2} ldots grade_{1,P} grade_{2,1} grade_{2,2} ldots grade_{2,P} . . . grade_{M,1} grade_{M,2} ldots grade_{M,P} Output Print M lines. Each line should contain a floating-point number representing the average grade of the corresponding course, rounded to two decimal places. Examples Input 3 4 100 90 80 70 85 95 75 65 60 70 80 90 Output 85.00 80.00 75.00 Input 2 2 50 40 60 70 Output 45.00 65.00","solution":"def calculate_course_averages(M, P, grades): Calculates the average grade for each course. Parameters: - M: int, number of courses - P: int, number of students per course - grades: list of list of int, grades of students for each course Returns: - list of float, average grades for each course rounded to two decimal places averages = [] for i in range(M): course_grades = grades[i] average = sum(course_grades) / P averages.append(round(average, 2)) return averages # Function to read input and produce output def main(): import sys input = sys.stdin.read data = input().strip().split() M = int(data[0]) P = int(data[1]) grades = [] index = 2 for i in range(M): course_grades = list(map(int, data[index:index+P])) grades.append(course_grades) index += P averages = calculate_course_averages(M, P, grades) for average in averages: print(f\\"{average:.2f}\\")"},{"question":"You are given an array `arr` of n positive integers. Your task is to rearrange the array such that the difference between any two consecutive elements is minimized and the absolute difference between the maximum and the minimum values of the modified array is also minimized. If there are multiple possible rearrangements, you can return any one of them. Input The first line contains a single integer n (2 ≤ n ≤ 100 000) — the size of the array. The second line contains n positive integers arr[i] (1 ≤ arr[i] ≤ 1 000 000) — the elements of the array. Output Output n integers on a single line — the rearranged array satisfying the given conditions. Examples Input 5 4 2 1 3 6 Output 1 2 3 4 6 Input 4 10 1 2 9 Output 1 2 9 10 Note In the first example, the rearranged array is [1, 2, 3, 4, 6] where the consecutive difference is minimized. In the second example, valid outputs include [1, 2, 9, 10] and [1, 2, 10, 9], both of which minimize the difference between consecutive elements.","solution":"def rearrange_array(arr): Rearranges the array such that the difference between any two consecutive elements is minimized. :param arr: List[int] - a list of positive integers :return: List[int] - the rearranged list of integers arr.sort() return arr"},{"question":"Recently Sam started learning about prefix sums and found them quite interesting. He discovered that with the help of prefix sums he can find the sum of any subarray in constant time after doing some preprocessing. He wants to test his understanding by solving some problems using prefix sums. Can you help him? Given an array of n integers, and m queries, each query asks for the sum of a subarray starting from index l and ending at index r (both inclusive). Sam wants to write a program to efficiently answer these queries. Constraints: 1 ≤ n, m ≤ 10^5 -10^6 ≤ a[i] ≤ 10^6 1 ≤ l ≤ r ≤ n Input: The first line contains two integers n and m. The second line contains n space-separated integers representing the array a. Each of the following m lines contains two integers l and r, representing the indices for a subarray sum query. Output: For each query, output the sum of the subarray from index l to r. SAMPLE INPUT 5 3 1 2 3 4 5 1 3 2 4 1 5 SAMPLE OUTPUT 6 9 15 Explanation For the first query, the sum of the subarray from index 1 to index 3 is 1+2+3 = 6. For the second query, the sum of the subarray from index 2 to index 4 is 2+3+4 = 9. For the third query, the sum of the subarray from index 1 to index 5 is 1+2+3+4+5 = 15.","solution":"def preprocess_prefix_sums(arr): Preprocesses the array to calculate prefix sums. n = len(arr) prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + arr[i] return prefix_sums def subarray_sum(prefix_sums, l, r): Returns the sum of the subarray from index l to r (1-based index). return prefix_sums[r] - prefix_sums[l - 1] def solve(n, m, arr, queries): Processes all the queries to find the sum of each subarray. prefix_sums = preprocess_prefix_sums(arr) results = [] for l, r in queries: results.append(subarray_sum(prefix_sums, l, r)) return results"},{"question":"Masha is intrigued by sequences of numbers. She defines a sequence A of length n as special if, for every 1 ≤ i < j ≤ n, A[i] + A[j] is not a perfect square. Given an integer n, find a special sequence of length n. If there are multiple solutions, you may return any one of them. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 100). Output For each test case, output a single line containing a special sequence of length n. If there are multiple solutions, you may output any one of them. Example Input 3 3 4 5 Output 1 3 8 2 4 6 10 5 7 11 13 17 Note In the first example for n = 3, the sequence [1, 3, 8] is special because for every pair (i, j): - 1 + 3 = 4 (perfect square), - 1 + 8 = 9 (perfect square), - 3 + 8 = 11 (not a perfect square). In the second example for n = 4, the sequence [2, 4, 6, 10] is special because for every pair (i, j): - 2 + 4 = 6 (not a perfect square), - 2 + 6 = 8 (not a perfect square), - 2 + 10 = 12 (not a perfect square), - 4 + 6 = 10 (not a perfect square), - 4 + 10 = 14 (not a perfect square), - 6 + 10 = 16 (perfect square). In the third example for n = 5, multiple sequences can work, such as [5, 7, 11, 13, 17]. The output sequences can be one of the many valid special sequences for given n. Each sequence should meet the requirement that no pairwise sums are perfect squares.","solution":"from math import isqrt def generate_special_sequence(n): sequence = [] current_number = 1 while len(sequence) < n: valid = True for num in sequence: sum_pair = current_number + num root = isqrt(sum_pair) if root * root == sum_pair: valid = False break if valid: sequence.append(current_number) current_number += 1 return sequence def solve(t, cases): results = [] for n in cases: result = generate_special_sequence(n) results.append(result) return results"},{"question":"In a certain country, there are cities connected through a network of one-way roads. Each city is numbered from 0 to n-1, and the roads have travel times associated with them. Write a program that determines the shortest travel time from a starting city to a destination city using Dijkstra\'s algorithm. **Input:** The input consists of multiple datasets. Each dataset is in the following format: - The first line contains two integers, n (2 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000), representing the number of cities and the number of roads. - The next m lines each contain three integers u, v, and t (0 ≤ u, v < n; 1 ≤ t ≤ 1000), indicating there is a one-way road from city u to city v with a travel time of t. - The last line contains two integers, s and d (0 ≤ s, d < n), representing the starting city s and the destination city d. The end of input is signaled by a line containing two zeros for n and m. **Output:** For each dataset, output the shortest time from city s to city d on one line. If there is no path from city s to city d, output \\"No path\\". **Example:** Input: ``` 4 5 0 1 6 0 2 2 1 2 2 1 3 5 2 3 1 0 3 4 4 0 1 3 1 2 1 2 3 4 3 0 2 0 2 0 0 ``` Output: ``` 3 4 ``` **Note:** 1. All datasets are independent. 2. The actual values for n and m will ensure that the input size is manageable within the specified constraints.","solution":"import heapq import sys def dijkstra(n, roads, start, end): graph = {i: [] for i in range(n)} for u, v, t in roads: graph[u].append((v, t)) queue = [(0, start)] distances = {i: float(\'inf\') for i in range(n)} distances[start] = 0 while queue: current_distance, current_node = heapq.heappop(queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else \\"No path\\" def shortest_travel_time(cases): output = [] for n, m, roads, start_end in cases: if n == 0 and m == 0: break start, end = start_end shortest_time = dijkstra(n, roads, start, end) output.append(shortest_time) return output"},{"question":"Given an integer array `arr` and an integer `k`, your task is to implement a function that returns `k` smallest elements in the array `arr`. - If `k` is greater than the number of distinct elements in `arr`, return all distinct elements sorted. - If `k` is less than the number of distinct elements in `arr`, return the first `k` smallest distinct elements sorted. Input - The first line contains an integer `n` which represents the number of elements in the array (1 ≤ n ≤ 10^5). - The second line contains `n` integers which represent the elements of the array `arr` (-10^9 ≤ arr[i] ≤ 10^9). - The third line contains an integer `k` (1 ≤ k ≤ n). Output - Print the `k` smallest distinct elements in the array in ascending order. Examples Input 7 4 2 5 1 1 3 9 3 Output 1 2 3 Input 8 10 20 20 10 30 40 50 60 2 Output 10 20","solution":"def k_smallest_elements(arr, k): Returns the k smallest distinct elements in the array arr. distinct_elements = sorted(set(arr)) return distinct_elements[:k]"},{"question":"Sophie is organizing her bookshelf by moving books from a cart to the shelf. The shelf has a capacity of n units, and each book on the cart has a width of w units. Sophie wants to know if she can place all the books on the cart onto the shelf without exceeding its capacity. Each book can only go on the shelf if there is enough space for it. If the number of books Sophie has exceeds what the shelf can accommodate, she will need to leave some books on the cart. Input The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each test case consists of one line containing three integers n (1 ≤ n ≤ 10^9) — the capacity of the shelf, w (1 ≤ w ≤ 10^9) — the width of each book, and b (0 ≤ b ≤ 10^9) — the number of books on the cart. Output For each test case, print either YES if it is possible to fit all the books onto the shelf, or NO otherwise. Example Input 5 12 3 4 15 5 3 7 2 5 6 5 2 10 4 3 Output YES YES NO YES NO Note Explanation for the example test cases: 1. Sophie\'s shelf has a capacity of 12 units and each book is 3 units wide. She has 4 books, which means she needs 4 * 3 = 12 units of space, so it fits perfectly. 2. The shelf has a capacity of 15 units and each book is 5 units wide. She has 3 books, which means she needs 3 * 5 = 15 units of space, so it fits perfectly. 3. The shelf has a capacity of 7 units and each book is 2 units wide. She has 5 books, which means she needs 5 * 2 = 10 units of space, which exceeds the shelf\'s capacity. 4. The shelf has a capacity of 6 units and each book is 5 units wide. She has 2 books, which means she needs 2 * 5 = 10 units of space, which exceeds the shelf\'s capacity. 5. The shelf has a capacity of 10 units and each book is 4 units wide. She has 3 books, which means she needs 3 * 4 = 12 units of space, which exceeds the shelf\'s capacity.","solution":"def can_fit_books_on_shelf(n, w, b): Given the capacity of the shelf (n), the width of each book (w), and the number of books (b) on the cart, determine if all books can fit on the shelf. :param n: int - capacity of the shelf :param w: int - width of each book :param b: int - number of books :return: str - \\"YES\\" if all books can fit, otherwise \\"NO\\" return \\"YES\\" if (w * b) <= n else \\"NO\\" def process_test_cases(t, test_cases): results = [] for case in test_cases: n, w, b = case results.append(can_fit_books_on_shelf(n, w, b)) return results"},{"question":"Yana is organizing a bookshelf. The bookshelf has exactly one slot for each day of the month, numbered from 1 to n. Each slot initially contains a book for the corresponding day of the month. Yana decided to re-organize the books by swapping two distinct consecutive books exactly once. For instance, if n = 5, the initial order of books is 1 2 3 4 5, and if Yana swaps books 2 and 3, she gets the new order 1 3 2 4 5. If Yana swaps books 4 and 5, the order becomes 1 2 3 5 4. Given the modified arrangement of books, help Yana determine if it can be a result of swapping exactly one pair of consecutive books. If it is possible, output the positions of the two books that were swapped. If it is not possible, output 0 0. Input The first line contains an integer n (1 ≤ n ≤ 1000) which is the number of books on the bookshelf. The second line contains n space-separated integers which are the modified arrangement of books. The given arrangement is guaranteed to be a permutation of the integers from 1 to n. Output If it is impossible to obtain the given arrangement by swapping one pair of consecutive books, print 0 0. Otherwise, print two numbers l and r (1 ≤ l < r ≤ n, r = l + 1) that are the positions of the books that were swapped to obtain the given arrangement. Examples Input 5 1 3 2 4 5 Output 2 3 Input 6 1 2 3 4 5 6 Output 0 0 Input 3 3 2 1 Output 0 0","solution":"def find_swapped_positions(n, arrangement): for i in range(n - 1): if arrangement[i] > arrangement[i + 1]: # Check if the swap restores the order perfectly. arrangement[i], arrangement[i + 1] = arrangement[i + 1], arrangement[i] if arrangement == list(range(1, n + 1)): return i + 1, i + 2 else: return 0, 0 return 0, 0"},{"question":"In Bellworld, there are n interconnected cities C1, C2, ..., Cn with one-way roads. Each road has a certain travel time. Your task is to help Bellworld\'s delivery company to find the shortest delivery routes between pairs of cities. You will be given a list of roads between cities and asked to answer m queries, where each query asks for the shortest delivery time from one city to another. If there is no path between the cities, return -1 for that query. # Input The input consists of multiple datasets. Each dataset is given in the following format: 1. First line: two integers `n` (2 ≤ n ≤ 1000) and `r` (1 ≤ r ≤ 10000), representing the number of cities and the number of roads respectively. 2. Next `r` lines: each line contains three integers `u`, `v`, and `t` (1 ≤ u, v ≤ n, 1 ≤ t ≤ 1000), representing a one-way road from city `u` to city `v` with travel time `t`. 3. Next line: a single integer `m` (1 ≤ m ≤ 100), representing the number of queries. 4. Next `m` lines: each line contains two integers `a` and `b` (1 ≤ a, b ≤ n), representing a query for the shortest delivery time from city `a` to city `b`. Input terminates when `n` is 0. # Output For each dataset, output the results of the queries one per line. If there is no path from city `a` to city `b`, output `-1`. # Example Input ``` 3 3 1 2 5 2 3 10 1 3 15 2 1 3 2 1 4 5 1 2 2 1 3 1 2 4 4 3 4 3 1 4 2 5 1 4 1 2 2 3 3 2 4 1 0 ``` Output ``` 15 -1 6 2 -1 -1 7 ``` In the above example, for the first dataset, the delivery time from city 1 to city 3 is 15, and there is no path from city 2 to city 1. For the second dataset, the queries and the corresponding shortest times are computed as shown in the output. Note: Use efficient algorithms like Dijkstra\'s or Floyd-Warshall to handle the shortest path calculations within the constraints.","solution":"import sys def floyd_warshall(n, dist): for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] def find_shortest_paths(n, roads, queries): # Initialize the distances matrix with infinity dist = [[float(\'inf\')] * n for _ in range(n)] # Distance to self is 0 for i in range(n): dist[i][i] = 0 # Populate the distances with the given road times for u, v, t in roads: dist[u-1][v-1] = t # Use the Floyd-Warshall algorithm to find all-pairs shortest paths floyd_warshall(n, dist) # Answer the queries results = [] for a, b in queries: distance = dist[a-1][b-1] if distance == float(\'inf\'): results.append(-1) else: results.append(distance) return results"},{"question":"You are given an n x n matrix filled with integers. Your task is to calculate the largest possible sum of elements on a path from the top left to the bottom right corner of the matrix, where you can only move to the right or down at any point in time. Input The first line of the input contains an integer n (2 ≤ n ≤ 1000) — the size of the matrix. Each of the next n lines contains n integers, where the j-th integer in the i-th line represents the element in the i-th row and j-th column of the matrix (-1000 ≤ element ≤ 1000). Output Print one integer, the largest possible sum of elements on a path from the top left to the bottom right corner. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 29 Input 2 -1 -2 -3 -4 Output -7 Note In the first example, the path with the largest possible sum is 1 → 4 → 7 → 8 → 9, which gives the sum 1 + 4 + 7 + 8 + 9 = 29. In the second example, despite all elements being negative, the largest path sum is still the sum of the path from the top left to the bottom right corner, which is -1 → -3 → -4 = -7.","solution":"def max_path_sum(matrix): n = len(matrix) # Create a DP table to store the maximum sum at each cell dp = [[0] * n for _ in range(n)] dp[0][0] = matrix[0][0] # Initialize the first row of the DP table for j in range(1, n): dp[0][j] = dp[0][j - 1] + matrix[0][j] # Initialize the first column of the DP table for i in range(1, n): dp[i][0] = dp[i - 1][0] + matrix[i][0] # Fill the DP table for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j] # The value at the bottom-right corner is the answer return dp[n - 1][n - 1]"},{"question":"You are organizing a game where players collect items and trade them with each other. Each player starts with some items and can perform the following operations: 1) Trade: Two players trade items. The first player gives all his items to the second player. 2) Collect: A player collects an item. 3) Query: Output the total number of items a player currently has. Input: The first line contains N, the number of players, and Q, the number of operations. The next N lines each contain a single integer, representing the initial number of items each player has. The next Q lines contain operations in the following format: 1 a b: Player a trades all items with player b. 2 a x: Player a collects x items. 3 a: Output the total number of items player a currently has. Output: Output the answer for each query of type 3. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ x ≤ 10^5 SAMPLE INPUT 3 4 10 5 3 1 1 2 2 3 4 3 2 3 3 SAMPLE OUTPUT 15 7 Explanation Initially, player 1 has 10 items, player 2 has 5 items, and player 3 has 3 items. 1. Player 1 trades all items with player 2. Now, player 1 has 0 items, and player 2 has 15 items. 2. Player 3 collects 4 more items. Now, player 3 has 7 items. 3. Output the number of items player 2 has, which is 15. 4. Output the number of items player 3 has, which is 7.","solution":"def process_game_operations(N, Q, items, operations): Process the game operations and return the results of the queries. :param int N: Number of players :param int Q: Number of operations :param List[int] items: Initial number of items each player has :param List[Tuple[int]] operations: Operations to perform :return List[int]: Results of `Query` operations results = [] for operation in operations: if operation[0] == 1: # Trade operation a, b = operation[1] - 1, operation[2] - 1 items[b] += items[a] items[a] = 0 elif operation[0] == 2: # Collect operation a, x = operation[1] - 1, operation[2] items[a] += x elif operation[0] == 3: # Query operation a = operation[1] - 1 results.append(items[a]) return results"},{"question":"Lisa is training for an upcoming marathon and she wants to optimize her running path in the park. The park can be represented as a grid with m rows and n columns. Each cell in the grid can either be walkable or contain an obstacle that Lisa cannot pass through. Lisa can only move up, down, left, or right from one walkable cell to another. Lisa starts at the top-left corner of the grid (1,1) and wants to reach the bottom-right corner (m,n). She wants to minimize the distance she has to run, measured in the number of steps she takes. Write a program to determine the minimum number of steps Lisa needs to take to get from the start to the finish. If it\'s impossible for Lisa to reach the goal, the program should return -1. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid. The next m lines each contain n characters, each character is either \'.\' (representing a walkable cell) or \'#\' (representing an obstacle). Output Output a single integer — the minimum number of steps Lisa has to take to reach the bottom-right corner, or -1 if it is impossible. Examples Input 3 3 ... .#. ... Output 4 Input 3 3 .#. # .#. Output -1 Input 2 2 .. .# Output -1 Note In the first example, one possible path is (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3). The minimum number of steps is 4. In the second and third examples, it\'s impossible for Lisa to reach the bottom-right corner.","solution":"from collections import deque def minimum_steps(grid, m, n): Determine the minimum number of steps to reach the bottom-right corner of the grid if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * n for _ in range(m)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited[0][0] = True while queue: row, col, steps = queue.popleft() if row == m-1 and col == n-1: return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < m and 0 <= new_col < n and not visited[new_row][new_col] and grid[new_row][new_col] == \'.\': visited[new_row][new_col] = True queue.append((new_row, new_col, steps + 1)) return -1 # Function to handle the input and output def main(input_data): lines = input_data.strip().split(\'n\') m, n = map(int, lines[0].split()) grid = [list(line) for line in lines[1:]] return minimum_steps(grid, m, n)"},{"question":"You are given an array of n integers, each representing a building\'s height in a skyline. The skyline creates a silhouette when viewed from a distance. Your task is to determine the minimum number of buildings that need to be removed so that the remaining buildings create a skyline silhouette with at most m peaks. A peak is defined as any building that is taller than both its neighboring buildings. The first and last buildings cannot be peaks since they do not have two neighbors. Input The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ n - 2) — the number of buildings and the maximum number of peaks allowed in the skyline, respectively. The second line contains n integers h_i (1 ≤ h_i ≤ 10^9) — the heights of the buildings. Output Print one integer — the minimum number of buildings that need to be removed to satisfy the peak constraint. Example Input 6 1 1 3 2 4 1 5 Output 1 Note In the example, one optimal way is to remove the building with height 4. The remaining buildings [1, 3, 2, 1, 5] have exactly 1 peak, which is building 2. Another optimal way is to remove the building with height 5, resulting in [1, 3, 2, 4, 1]. Explanation - Original skyline: [1, 3, 2, 4, 1, 5] - Possible skyline after one removal: [1, 3, 2, 1, 5] with peaks at building 3.","solution":"def min_removals(n, m, heights): def count_peaks(heights): peaks = 0 for i in range(1, len(heights) - 1): if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: peaks += 1 return peaks current_peaks = count_peaks(heights) if current_peaks <= m: return 0 removal_count = 0 while current_peaks > m: found_removal = False for i in range(1, len(heights) - 1): if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: heights.pop(i) current_peaks = count_peaks(heights) removal_count += 1 found_removal = True break if not found_removal: break return removal_count"},{"question":"Polycarp has a notebook where he writes down interesting numbers he encounters. Recently, he became fascinated with special integers defined as \\"beautiful numbers.\\" A beautiful number in Polycarp\'s opinion is a number which is a power of two. Polycarp now wants to find beautiful numbers within a certain range [L, R]. Help Polycarp by writing a program that counts how many beautiful numbers exist in the given range [L, R]. Your task is to implement a function that computes the number of beautiful numbers in the inclusive range [L, R]. Input The input consists of two integers L and R (1 ≤ L ≤ R ≤ 10^18), which denote the range [L, R]. Output Print one integer, the number of beautiful numbers in the given range [L, R]. Examples Input 2 16 Output 4 Input 1 64 Output 7 Input 20 40 Output 2 Note In the first example: The beautiful numbers between 2 and 16 are 2, 4, 8, and 16. Hence, the output is 4. In the second example: The beautiful numbers between 1 and 64 are 1, 2, 4, 8, 16, 32, and 64. Hence, the output is 7. In the third example: The beautiful numbers between 20 and 40 are 32. Hence, the output is 1.","solution":"def count_beautiful_numbers(L, R): Count the number of beautiful numbers (powers of 2) in the range [L, R]. A beautiful number is defined as a power of 2. count = 0 power = 1 while power <= R: if L <= power <= R: count += 1 power *= 2 return count"},{"question":"You are given a list of integers. Your task is to determine whether there exists a subset of these integers that add up to make zero and, if so, print the subset. If there are multiple solutions, print any of them. If there is no such subset, print \\"No subset found\\". Input The first line contains a single integer n (1 ≤ n ≤ 20) — the number of integers in the list. The second line contains n integers separated by spaces. Each integer is between -1000 and 1000 (inclusive). Output If such a subset exists, print \\"Yes\\" followed by the integers in the subset on the next line. If no such subset exists, print \\"No subset found\\". **Example** Input 5 3 -2 1 -4 2 Output Yes 3 -2 -1","solution":"from itertools import combinations def find_zero_sum_subset(numbers): n = len(numbers) for i in range(1, n + 1): for subset in combinations(numbers, i): if sum(subset) == 0: print(\\"Yes\\") print(\\" \\".join(map(str, subset))) return print(\\"No subset found\\") # Example usage: # find_zero_sum_subset([3, -2, 1, -4, 2])"},{"question":"Given an integer array `arr` and a positive integer `k`, find the maximum possible sum of any increasing subsequence of `arr` such that the length of the subsequence is exactly `k`. A subsequence is a sequence derived by deleting some or no elements from the array without changing the order of the remaining elements. Input: The first line contains two integers, `n` and `k` (1 ≤ k ≤ n ≤ 2,000) — the length of the array and the required length of the subsequence. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 100,000) — the elements of the array. Output: Print a single integer, the maximum possible sum of any increasing subsequence of length `k`. If no such subsequence exists, print -1. Examples Input: 5 2 1 2 3 4 5 Output: 9 Input: 6 3 10 20 10 30 20 50 Output: 100 Explanation: In the first example, one possible subsequence of length 2 is [4, 5], which sums to 9. In the second example, one possible subsequence of length 3 is [10, 30, 50], which sums to 90. Note: Finding the correct subsequence might require backtracking to ensure elements are in increasing order and meet the length requirement.","solution":"def max_increasing_subsequence_sum(arr, k): Returns the maximum possible sum of any increasing subsequence of length k. If no such subsequence exists, returns -1. n = len(arr) # Early exit if k > n if k > n: return -1 # dp[i][j] will store the maximum sum of increasing subsequence of length j+1 ending at index i dp = [[0] * k for _ in range(n)] max_sum = -1 for i in range(n): for j in range(k): # For subsequence of length 1, it is just the element itself if j == 0: dp[i][j] = arr[i] else: dp[i][j] = -1 for p in range(i): if arr[p] < arr[i] and dp[p][j-1] != -1: dp[i][j] = max(dp[i][j], dp[p][j-1] + arr[i]) if j == k-1: max_sum = max(max_sum, dp[i][j]) return max_sum"},{"question":"You are given a list of words, all in lowercase letters, and your task is to group these words into sets of anagrams. An anagram is a word formed by rearranging the letters of another word, typically using all the original letters exactly once. For example, \\"listen\\" and \\"silent\\" are anagrams of each other. Input The input consists of multiple datasets. Each dataset represents a sequence of words in the format: M W1 W2 . . . WM where 1 ≤ M ≤ 1000 and each Wi is a word consisting of lowercase letters (1 ≤ length(Wi) ≤ 20). M is the number of words in the input sequence, and Wi is the i-th word of the sequence. The input ends with a line consisting of a single zero. The number of datasets does not exceed 50. Output For each dataset, output the groups of anagrams, sorted alphabetically within each group and also sorted alphabetically by the first word of each group. Each group should be listed in a single line. Example Input 6 listen silent enlist inlets google goolge 5 cat act tac bat tab 4 rat tar art star 0 Output enlist inlets listen silent goolge google act cat tac bat tab art rat tar star","solution":"def group_anagrams(datasets): def sorted_word(word): return \'\'.join(sorted(word)) def process_dataset(words): sorted_word_dict = {} for word in words: key = sorted_word(word) if key in sorted_word_dict: sorted_word_dict[key].append(word) else: sorted_word_dict[key] = [word] result = [] for anagrams in sorted_word_dict.values(): anagrams.sort() result.append(anagrams) return result results = [] for dataset in datasets: words = dataset.split() groups = process_dataset(words) groups_sorted = sorted(groups, key=lambda x: x[0]) results.append(groups_sorted) return results"},{"question":"Alex loves playing with strings. One day he thought of a fun game: selecting the longest palindrome that can be formed using characters from a given string. Help Alex by writing a program that finds the length of the longest palindrome that can be made using the characters of an input string. Input The first line of the input contains an integer T denoting the number of test cases. Next T lines follow, each containing a string S. Output For each input string S, output the length of the longest palindrome that can be formed using its characters. Constraints 1 ≤ T ≤ 20 1 ≤ |S| ≤ 1000 S will contain only lowercase English letters (\'a\'-\'z\'). Example Input: 2 abccccdd aaaabbbcccc Output: 7 11 Explanation: In the first example, one of the longest palindromes that can be made is \\"dccaccd\\", which has a length of 7. In the second example, one possible longest palindrome is \\"aabbccccbaa\\", with a length of 11.","solution":"from collections import Counter def longest_palindrome_length(t, strings): For each given string, returns the length of the longest palindrome that can be formed using its characters. Parameters: t (int): The number of test cases. strings (list): A list containing t strings. Returns: list: A list containing the length of the longest palindrome for each string. results = [] for s in strings: char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 results.append(length) return results"},{"question":"Write a function that takes a matrix representing an image and an integer k, and returns a new matrix with the image rotated k times by 90 degrees clockwise. The matrix is given as a list of lists, where each inner list represents a row of the image. Each rotation consists of rotating the entire matrix by 90 degrees clockwise, so for k = 1, the image is rotated once; for k = 2, the image is rotated twice; and so on. Input: - A matrix `image` of size `n x m` (1 ≤ n, m ≤ 1000), where each element is an integer. - An integer `k` (0 ≤ k ≤ 10^9) indicating the number of times the image should be rotated by 90 degrees clockwise. Output: - A new matrix `result` representing the image that has been rotated `k` times by 90 degrees clockwise. Examples: Input: ``` image = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] k = 1 ``` Output: ``` [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ``` Input: ``` image = [[1, 2], [3, 4], [5, 6]] k = 2 ``` Output: ``` [[6, 5], [4, 3], [2, 1]] ``` Note: - The image will be a valid rectangular matrix. - The rotations should be performed using the most efficient approach to handle large values of `k`. - For efficiency, recall that rotating the image by 360 degrees results in the same image - thus rotating by `k` is equivalent to rotating by `k % 4`.","solution":"def rotate_image(image, k): Rotates the image k times by 90 degrees clockwise. Parameters: image (list of list of int): The input 2D list representing the image. k (int): The number of times to rotate the image by 90 degrees clockwise. Returns: list of list of int: The rotated image. if not image or k == 0: return image k %= 4 # Only need to consider up to 3 rotations since 4 rotations is a full cycle for _ in range(k): image = list(zip(*image[::-1])) image = [list(row) for row in image] return image"},{"question":"You are given a string containing a mixture of alphabets and digits. Write a program to extract the longest contiguous substring of digits from the input string. If there are multiple substrings with the same maximum length, return the first one encountered. Input: First line of the input contains an integer T, denoting the number of test cases. Each of the following T lines contains a string S. Output: Output contains T lines, each containing the longest contiguous substring of digits from the corresponding input string. Constraints: 1 ≤ T ≤ 50 1 ≤ |S| ≤ 100 SAMPLE INPUT 3 abc1234xyz123 a1b2c3 abcd SAMPLE OUTPUT 1234 1","solution":"def longest_contiguous_digits(strings): Extracts the longest contiguous substring of digits from each input string. Args: strings (list): List of input strings. Returns: list: List of results with the longest contiguous substring of digits from each input string. results = [] for s in strings: max_substring = \\"\\" current_substring = \\"\\" for char in s: if char.isdigit(): current_substring += char if len(current_substring) > len(max_substring): max_substring = current_substring else: current_substring = \\"\\" results.append(max_substring) return results"},{"question":"In a faraway land, there is a special kind of arithmetic operation known as \\"Bee Addition\\". In Bee Addition, two integers a and b are added as follows: 1. Convert both integers to binary. 2. Align the binary strings to be the same length by padding the shorter one with leading zeroes. 3. Perform a bitwise OR operation on the aligned binary strings to get the result. For example, let a = 5 and b = 3: * a in binary is 101 * b in binary is 011 * Align to 3 bits (same length, no change needed here) * Perform bitwise OR: 101 OR 011 = 111 (which is 7 in decimal) Given two integers a and b, perform the Bee Addition operation and return the result. Input The first line contains two integers a and b (0 ≤ a, b ≤ 10^18). Output Output one integer — the result of the Bee Addition of a and b. Examples Input 5 3 Output 7 Input 10 15 Output 15 Input 7 7 Output 7 Note In the first example, aligning 5 (101 in binary) and 3 (011 in binary) and performing a bitwise OR yields 111 in binary, which is 7 in decimal. In the second example, aligning 10 (1010 in binary) and 15 (1111 in binary) and performing a bitwise OR results in 1111, which is 15 in decimal. In the third example, both numbers are identical (111 in binary), so the bitwise OR operation results in the same number: 111, or 7 in decimal.","solution":"def bee_addition(a, b): Given two integers a and b, performs a bitwise OR on their binary representations and returns the result. return a | b"},{"question":"You are given two strings `S` and `T` of the same length, where each string consists of lowercase English letters only. You are allowed to perform the following operations: 1. Choose any character in S and replace it with any other lowercase English letter. 2. Choose any character in T and replace it with any other lowercase English letter. Your goal is to make the strings `S` and `T` identical using the minimum number of operations. Determine the minimum number of operations required. Constraints * 1 ≤ |S| = |T| ≤ 100 * Both strings consist of lowercase English letters. Input Input is given from Standard Input in the following format: S T Output Print the minimum number of operations required. Examples Input abcd bcda Output 4 Input abc def Output 3 Input xyz xyz Output 0 Input aaaaa bbbbb Output 5 Input abcde fghij Output 5","solution":"def min_operations(S, T): Determines the minimum number of operations required to make strings S and T identical. operations = 0 for s_char, t_char in zip(S, T): if s_char != t_char: operations += 1 return operations"},{"question":"You are managing a series of parking slots for a commercial complex. Each parking slot can either be vacant or occupied. You have to handle a sequence of operations to mark slots as occupied or vacant and to find out the status of any given slot at any point in time. The parking slots are indexed from 1 to N, where N is the total number of parking slots in the complex. You are given Q operations to perform. There are two types of operations: 1. \\"O i\\" - Mark the slot i as occupied. 2. \\"V i\\" - Mark the slot i as vacant. 3. \\"S i\\" - Output \\"OCCUPIED\\" if the slot i is occupied, otherwise output \\"VACANT\\". Note: - Initially, all parking slots are vacant. - The value of N (1 ≤ N ≤ 1000) and Q (1 ≤ Q ≤ 10000). Input The first line of the input contains two integers N and Q, representing the number of parking slots and the number of operations, respectively. The following Q lines each contain an operation as described above. Output For each \\"S i\\" operation, output either \\"OCCUPIED\\" or \\"VACANT\\". Example Input 5 5 O 1 O 3 S 1 V 1 S 1 Output OCCUPIED VACANT","solution":"def manage_parking_slots(N, operations): Manage the series of parking slots with the given operations. :param N: int - number of parking slots :param operations: List[str] - list of operations to perform :return: List[str] - results of the \'S\' operations slots = [\\"VACANT\\"] * N # Initialize all slots as vacant result = [] for operation in operations: op, i = operation.split() index = int(i) - 1 if op == \\"O\\": slots[index] = \\"OCCUPIED\\" elif op == \\"V\\": slots[index] = \\"VACANT\\" elif op == \\"S\\": result.append(slots[index]) return result"},{"question":"Alice is exploring a rectangular grid of size n×m (n rows and m columns) which is initially filled with 0s. She can perform the following operations to fill the grid: 1. Choose a unit square of the grid and set its value to 1. 2. If a square has value 1 and it is not on the border of the grid (i.e., it is not in the first or last row or column), Alice can extend this value to any of its directly adjacent neighbors (up, down, left, right) that are not already 1. Alice wants to maximize the number of times she can perform the extension operation while keeping the rest of the grid cells as 0s initially. Your task is to calculate the maximum number of cells in which Alice can eventually set the value to 1 if she follows the optimal strategy. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and the number of columns in the grid. Output The only line of the output should contain a single integer — the maximum number of cells Alice can set to 1. Examples Input 3 3 Output 1 Input 4 5 Output 6 Input 10 10 Output 36 Note In the first sample, Alice can set only the center cell to 1, because it is a 3x3 grid and it\'s optimal to set just one cell. In the second sample, Alice can optimally place six 1s in a cross layout in the center of the grid. In the third sample, Alice can fill the inner 6x6 portion of the 10x10 grid yielding 36 cells filled with 1s.","solution":"def max_cells_to_fill(n, m): Calculate the maximum number of cells that can eventually be set to 1. if n <= 2 or m <= 2: return 0 return (n - 2) * (m - 2)"},{"question":"You are given an array of integers representing the heights of n plants in a garden. Each plant grows by one unit height every day. However, due to some restrictions, you are allowed to choose exactly one plant each day and prevent it from growing that day. Your task is to determine the minimum number of days required for all plants to reach the same height. Input - The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of plants. - The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 1000) — the heights of the plants on day 0. Output - Print a single integer — the minimum number of days required for all plants to reach the same height. Examples Input 5 3 5 3 6 5 Output 3 Input 4 2 2 2 2 Output 0 Input 3 4 7 2 Output 5 Note In the first example, the heights of the plants on day 0 are [3, 5, 3, 6, 5]. You can choose to stop the 4th plant (with height 6) from growing on days 1, 2, and 3. After 3 days, the heights of all plants will be [6, 6, 6, 6, 6]. In the second example, all plants already have the same height, so no days are required. In the third example, the heights of the plants on day 0 are [4, 7, 2]. You can stop the 2nd plant (with height 7) from growing on days 1, 2, 3, 4, and 5. After 5 days, the heights of all plants will be [7, 7, 7].","solution":"def min_days_to_equal_heights(n, heights): Returns the minimum number of days required for all plants to reach the same height. max_height = max(heights) total_days = max_height - min(heights) return total_days"},{"question":"Implement a program that determines whether a sequence of operations leads to a particular configuration of parentheses. A sequence of operations starts with an empty string and modifies it by adding either an opening parenthesis \'(\' or a closing parenthesis \')\'. The final result is valid if it represents a correct parentheses sequence (i.e., each opening parenthesis has a corresponding closing parenthesis and each closing parenthesis has a previously encountered opening parenthesis). Input The input consists of two lines: The first line contains a single integer n (1 ≤ n ≤ 100), representing the number of operations. The second line contains a string of n characters, where each character is either \'(\' or \')\', representing the sequence of operations to perform. Output Output \\"valid\\" if the sequence of operations can result in a valid parentheses sequence. Otherwise, output \\"invalid\\". Examples Input 6 ((())) Output valid Input 6 ())(()) Output invalid Note In the first example, the sequence of operations forms the valid parentheses string \\"((()))\\". In the second example, the sequence is not valid because there are more closing parentheses than opening ones at some point, resulting in an unmatched closing parenthesis.","solution":"def is_valid_parentheses_sequence(n, operations): Determine if the given sequence of operations results in a valid parentheses string. :param n: int, the number of operations. :param operations: str, the sequence of operations containing \'(\' and \')\'. :return: str, \\"valid\\" or \\"invalid\\" based on whether the sequence is valid. balance = 0 for op in operations: if op == \'(\': balance += 1 elif op == \')\': balance -= 1 if balance < 0: return \\"invalid\\" return \\"valid\\" if balance == 0 else \\"invalid\\""},{"question":"You are given a list of integers representing the heights of students standing in a line, and your task is to determine the number of buildings that have an unobstructed view of the horizon. A building has an unobstructed view of the horizon if there are no taller buildings to the right of it. Write a function that takes as input a list of integers representing the heights of buildings from left to right and returns the number of buildings with an unobstructed view. Constraints * 1 ≤ the length of the list ≤ 1000 * 1 ≤ the height of a building ≤ 10^4 Function Signature: ```python def count_unobstructed_view(buildings: List[int]) -> int: ``` Input - A list of integers representing the heights of buildings from left to right. Output - A single integer representing the number of buildings with an unobstructed view. Examples Input ```python [3, 7, 8, 3, 6, 1] ``` Output ```python 3 ``` Input ```python [1, 2, 3, 4, 5] ``` Output ```python 1 ``` Input ```python [5, 4, 3, 2, 1] ``` Output ```python 5 ```","solution":"def count_unobstructed_view(buildings): Returns the number of buildings with an unobstructed view of the horizon. count = 0 max_height_so_far = 0 # Traverse the list from right to left for height in reversed(buildings): if height > max_height_so_far: count += 1 max_height_so_far = height return count"},{"question":"Cody the Coder is organizing a coding marathon, and in the process, needs to distribute the prize money among the top k winners. Given the number of participants and their scores, Cody\'s goal is to find the sum of scores of the top k participants. Input The first line contains a single integer T, the number of test cases. For each test case, there are three lines: - The first line contains an integer N, the number of participants. - The second line contains N integers, the scores of the participants separated by space. - The third line contains an integer k, representing the number of top participants to consider. Output For each test case, print the sum of the scores of the top k participants. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Score of each participant ≤ 10^5 1 ≤ k ≤ N Example Input: 2 5 10 20 30 40 50 2 6 5 3 8 6 7 4 3 Output: 90 21 Explanation Test Case 1: The top 2 scores are 50 and 40. Their sum is 90. Test Case 2: The top 3 scores are 8, 7, and 6. Their sum is 21.","solution":"def sum_top_k_scores(test_cases): results = [] for case in test_cases: N, scores, k = case top_k_scores = sorted(scores, reverse=True)[:k] results.append(sum(top_k_scores)) return results def parse_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) scores = list(map(int, input_lines[index + 1].split())) k = int(input_lines[index + 2]) test_cases.append((N, scores, k)) index += 3 return test_cases"},{"question":"You are given two large numbers A and B represented as strings, each of which can contain up to 100,000 digits. Write a program that performs the following operations on these numbers based on the provided queries. * Add the two numbers A and B together. * Multiply the two numbers A and B together. * Compare the numbers A and B lexicographically and output \\"A\\" if A is larger, \\"B\\" if B is larger, or \\"equal\\" if they are the same. Input The input is given in the following format: ``` A B Q query1 query2 :: queryQ ``` `A` is a string representing the first large number. `B` is a string representing the second large number. `Q` is an integer (1 ≤ Q ≤ 100000), representing the number of queries. Each query is given in one of the following formats: - `\\"add\\"` - `\\"multiply\\"` - `\\"compare\\"` Output For each query `\\"add\\"`, print the result of adding A and B. For each query `\\"multiply\\"`, print the result of multiplying A and B. For each query `\\"compare\\"`, print \\"A\\" if A is larger, \\"B\\" if B is larger, or \\"equal\\" if they are the same. Example Input ``` 123456789123456789 987654321987654321 5 add multiply compare add compare ``` Output ``` 1111111111111111110 121932631356500531347203169112635269 B 1111111111111111110 equal ```","solution":"def large_number_operations(A, B, queries): results = [] for query in queries: if query == \\"add\\": result = str(int(A) + int(B)) elif query == \\"multiply\\": result = str(int(A) * int(B)) elif query == \\"compare\\": if A > B: result = \\"A\\" elif A < B: result = \\"B\\" else: result = \\"equal\\" else: raise ValueError(f\\"Unknown query: {query}\\") results.append(result) return results"},{"question":"The students of a programming class have to complete an assignment which involves writing and testing several programs. Each student has a list of programs they need to write along with the estimated time required to complete each program. There is a strict rule that no two programs can overlap, i.e., a student must finish one program entirely before starting the next one. The professor recognizes that some students may be more efficient at prioritizing their work and would like to identify the student who can complete the most number of programs before the given deadline. Your task is to write a program to find out the maximum number of programs a student can complete without any overlapping based on their estimated completion times. Input format The first line of the input will contain a single integer N (N ≤ 100000), indicating the number of programs a student needs to write. The second line will contain a single integer T (T ≤ 1000000000), representing the total available time the student has to complete the programs. Lines 3, 4, ..., N+2 will each contain a single integer Pi (Pi ≤ 1000000), indicating the time required to complete program i. Output format Your output must consist of a single integer M, indicating the maximum number of programs that can be completed within the given total time T without any overlapping. Example: Sample input: 5 10 2 1 3 2 4 Sample output: 4","solution":"def max_programs(N, T, times): Returns the maximum number of programs a student can complete within the given total time T. times.sort() # Sort times in ascending order to prioritize shorter programs total_time = 0 program_count = 0 for time in times: if total_time + time <= T: total_time += time program_count += 1 else: break # If adding the next program exceeds T, stop counting return program_count"},{"question":"Yu and her friends are planning to build a magical bridge in their village. The bridge should be constructed with a special sequence of stones that follow a precise magical property. The sequence must follow certain rules to maintain the magic. The magical sequence consists of positive integers where each number is coprime with its adjacent numbers. Two numbers are coprime if their greatest common divisor (GCD) is 1. Yu has decided to place `n` stones in a row to form the bridge. She wants your help to generate such a sequence of `n` positive integers where each integer is less than or equal to `m`. If multiple solutions exist, you can output any of them. If no such sequence exists, return -1. Input: - The first line contains the integers `n` and `m` — the number of stones and the maximum possible value of each stone in the sequence (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100000). Output: - Output a sequence of `n` positive integers each not exceeding `m` that are pairwise coprime. If no such sequence exists, output -1. Examples: Input 3 6 Output 1 2 3 Input 4 10 Output 1 2 3 4 Input 2 1 Output -1","solution":"def magical_sequence(n, m): Generate a sequence of `n` positive integers each not exceeding `m` that are pairwise coprime. If no such sequence exists, return -1. # If m < n, it\'s impossible to have n pairwise coprime numbers all <= m if m < n: return -1 result = [] for i in range(1, n + 1): result.append(i) return result"},{"question":"A robot is navigating a 2D grid starting from the top-left corner (0, 0). Each cell in the grid contains a value representing the cost to enter that cell. The robot can only move either down or right at any point in time. Your task is to find the minimum cost path for the robot to reach the bottom-right corner of the grid (m-1, n-1). You need to implement a function that computes this minimum cost. The function accepts a 2D list of integers representing the grid, and it returns the integer value of the minimum cost path. Input - A 2D list of integers grid representing the cost grid where m is the number of rows and n is the number of columns (1 ≤ m, n ≤ 1000; 1 ≤ grid[i][j] ≤ 100). Output - An integer representing the minimum cost path from the top-left to the bottom-right corner of the grid. Example Input: ``` [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` Output: ``` 7 ``` Explanation: The minimum cost path is 1 → 3 → 1 → 1 → 1, so the final cost is 7. Input: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ``` 21 ``` Explanation: The minimum cost path is 1 → 2 → 3 → 6 → 9, so the final cost is 21. Note: - You can assume the grid is always non-empty and all cells are reachable. - The solution should efficiently handle the maximum grid size.","solution":"def min_cost_path(grid): Returns the minimum cost path for the robot to reach the bottom-right corner of the grid. m = len(grid) n = len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] # Initialize the first row for i in range(1, n): dp[0][i] = dp[0][i - 1] + grid[0][i] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[m - 1][n - 1]"},{"question":"In a mountainous region, there are N villages connected by M bidirectional roads. Each road connects two different villages and has a length. The villages are located such that constructing new roads between any two villages is possible but expensive. You, as the regional planner, want to make sure that all villagers have access to the shortest possible paths to travel between any two villages using the existing roads. Your task is to write a program that, given the road connections, determines the sum of the shortest paths between all pairs of villages. This measure will help in planning any necessary developments efficiently. input The input consists of multiple datasets. The end of the input is indicated by a line containing two zeros. Each dataset is given in the following format: N M u1 v1 l1 u2 v2 l2 ... uM vM lM N (1 ≤ N ≤ 100) is the number of villages, and M (1 ≤ M ≤ 4900) is the number of roads. Each of the following M lines contains three integers ui, vi (1 ≤ ui, vi ≤ N), and li (1 ≤ li ≤ 100), representing a bidirectional road connecting villages ui and vi with length li. output For each dataset, output a single line containing the sum of the shortest paths between all pairs of villages. Example Input 3 3 1 2 4 2 3 1 3 1 3 3 3 1 2 2 2 3 2 3 1 2 0 0 Output 8 6","solution":"def floyd_warshall(n, graph): # Initialize distance array dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 # Populate initial distances from graph for u, v, l in graph: dist[u-1][v-1] = l dist[v-1][u-1] = l # Floyd-Warshall Algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Sum of shortest paths between all pairs total_sum = 0 for i in range(n): for j in range(i+1, n): total_sum += dist[i][j] return total_sum def process_input(input_data): input_lines = input_data.strip().split(\'n\') index = 0 results = [] while index < len(input_lines): line = input_lines[index] n, m = map(int, line.split()) if n == 0 and m == 0: break graph = [] for _ in range(m): index += 1 u, v, l = map(int, input_lines[index].split()) graph.append((u, v, l)) index += 1 results.append(floyd_warshall(n, graph)) return results # Example input input_data = 3 3 1 2 4 2 3 1 3 1 3 3 3 1 2 2 2 3 2 3 1 2 0 0 # Process the example input output = process_input(input_data) print(\\"n\\".join(map(str, output)))"},{"question":"Wealthy Bunny is a renowned jeweler who creates beautiful necklaces using various colored gems. One day, a special customer comes in and requests a unique necklace. The customer wants a necklace made up of gems arranged in a specific order, but they have a strange request: the necklace must be able to form a palindrome by rearranging the gems. A palindrome is a sequence that reads the same backward as forward. For example, the sequences \\"radar\\", \\"level\\", and \\"aabbaa\\" are palindromes. Wealthy Bunny has a collection of gems with different colors, represented as lowercase English letters. To accommodate the special request, note that only one gem can appear an odd number of times, while all other gems must appear an even number of times. Given a string representing the gems in the necklace, help Wealthy Bunny determine if it\'s possible to rearrange the gems to form a palindrome. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 100000), where s is composed of lowercase English letters. Output Output \\"YES\\" if it\'s possible to rearrange the gems in such a way that they form a palindrome, or \\"NO\\" otherwise. Examples Input aabb Output YES Input aaabb Output YES Input abc Output NO Explanation In the first example, \\"aabb\\" can be rearranged to form \\"abba\\", which is a palindrome. In the second example, \\"aaabb\\" can be rearranged to form \\"ababa\\", which is a palindrome. In the third example, it is not possible to rearrange \\"abc\\" to form a palindrome.","solution":"from collections import Counter def can_form_palindrome(s): Checks if it is possible to rearrange the gems to form a palindrome. :param s: A string representing the gems in the necklace. :return: \\"YES\\" if it\'s possible to rearrange the gems to form a palindrome, otherwise \\"NO\\". # count the occurrences of each character char_count = Counter(s) # count how many characters have odd occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # a palindrome can have at most one character with an odd count if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"Statement You are given an array of integers. You need to determine the number of pairs of indices (i, j) such that i < j and the sum of the elements at these indices is even. If there are no such pairs, return 0. Input The first line contains the number of test cases T. Each test case consists of two lines. The first line contains an integer N denoting the number of elements in the array (1 ≤ N ≤ 100). The second line contains N integers separated by spaces. Output For each test case, output a single line containing the number of valid pairs. Sample Input 2 3 1 2 3 4 2 4 6 8 Sample Output 1 6","solution":"def count_even_sum_pairs(n, arr): Returns the number of pairs (i, j) such that i < j and arr[i] + arr[j] is even. if n < 2: return 0 even_count = sum(1 for x in arr if x % 2 == 0) odd_count = n - even_count even_pairs = even_count * (even_count - 1) // 2 odd_pairs = odd_count * (odd_count - 1) // 2 return even_pairs + odd_pairs def process_test_cases(T, cases): results = [] for i in range(T): n = cases[i][0] arr = cases[i][1] results.append(count_even_sum_pairs(n, arr)) return results"},{"question":"Riya loves to play with strings. One day she decides to find all unique substrings of a given string that have the same character repeated consecutively. For example, in the string \\"aaabbbaac\\", there are four such substrings: \\"aaa\\", \\"bbb\\", \\"aa\\", and \\"c\\". Riya wants to know how many such unique substrings exist in the given string. Example: consider a string \\"aabb\\" unique substrings with the same character consecutively are: \\"aa\\", \\"bb\\". So the output should be 2. INPUT: First line consists of T test cases. Each test case is a single string. OUTPUT: Print the number of unique substrings for each test case. Range: 1 <= T <= 100 1 <= length of string <= 1000 String consists of lowercase English letters only. SAMPLE INPUT 3 aabbcc abc aaa SAMPLE OUTPUT 3 0 1","solution":"def count_unique_substrings(T, test_cases): results = [] for string in test_cases: unique_substrings = set() i = 0 while i < len(string): start = i while i + 1 < len(string) and string[i] == string[i + 1]: i += 1 if i > start: unique_substrings.add(string[start:i + 1]) i += 1 results.append(len(unique_substrings)) return results"},{"question":"Mario works at a customer service center and receives daily reports with the results of customer satisfaction surveys. Each report lists a series of ratings provided by customers, which range from 1 to 5, where 1 means \\"Very Dissatisfied\\" and 5 means \\"Very Satisfied\\". Mario wants to analyze the trend in the ratings to improve the customer service. To help Mario, you need to implement a function `satisfaction_trend(input: List[int]) -> str` that takes a list of integers (the ratings) and returns a single character string. The string should contain: - \\"I\\" if there is an increasing trend in the ratings (i.e., each rating is greater than the previous one), - \\"D\\" if there is a decreasing trend (i.e., each rating is less than the previous one), - \\"C\\" if the ratings are constant (i.e., all ratings are the same), - \\"M\\" if the ratings do not follow any of the above trends (i.e., they fluctuate). # Function Signature: ```python def satisfaction_trend(ratings: List[int]) -> str: ``` # Input - The input consists of a single list of integers, where each integer is between 1 and 5 (inclusive). The list can have a length between 1 and 1000 (inclusive). # Output - The function should return a single character string that denotes the trend in the ratings, as described above. # Examples Example 1 Input: ```python satisfaction_trend([1, 2, 3, 4, 5]) ``` Output: ```python \\"I\\" ``` Explanation: All the ratings are in increasing order from 1 to 5. Example 2 Input: ```python satisfaction_trend([5, 4, 3, 2, 1]) ``` Output: ```python \\"D\\" ``` Explanation: All the ratings are in decreasing order from 5 to 1. Example 3 Input: ```python satisfaction_trend([3, 3, 3, 3]) ``` Output: ```python \\"C\\" ``` Explanation: All the ratings are the same, hence they are constant. Example 4 Input: ```python satisfaction_trend([3, 1, 4, 5, 2]) ``` Output: ```python \\"M\\" ``` Explanation: The ratings fluctuate and do not follow an increasing, decreasing, or constant trend.","solution":"from typing import List def satisfaction_trend(ratings: List[int]) -> str: if len(ratings) <= 1: return \\"C\\" increasing = decreasing = constant = True for i in range(1, len(ratings)): if ratings[i] > ratings[i - 1]: decreasing = constant = False elif ratings[i] < ratings[i - 1]: increasing = constant = False else: increasing = decreasing = False if increasing: return \\"I\\" if decreasing: return \\"D\\" if constant: return \\"C\\" return \\"M\\""},{"question":"Given an integer array `arr` and an integer `k`, find the length of the longest subarray that contains exactly `k` distinct integers. You need to write a function: ```python def longest_subarray_with_k_distinct(arr: List[int], k: int) -> int: pass ``` # Input - The function takes an integer array `arr` of length `n` (1 <= n <= 10^5). - The array `arr` consists of integers where each integer is between 1 and 10^4. - The integer `k` where 1 <= k <= 10^4. # Output - Return an integer which is the length of the longest subarray that contains exactly `k` distinct integers. If no such subarray exists, return 0. # Example Input: ```python arr = [1, 2, 1, 2, 3] k = 2 ``` Output: ```python 4 ``` Explanation: The longest subarray with exactly 2 distinct integers is `[1, 2, 1, 2]` which has a length of 4. # Constraints - The time complexity must be O(n). - The solution should use at most O(k) additional space.","solution":"from typing import List def longest_subarray_with_k_distinct(arr: List[int], k: int) -> int: from collections import defaultdict left = 0 right = 0 max_length = 0 count_map = defaultdict(int) distinct_count = 0 while right < len(arr): if count_map[arr[right]] == 0: distinct_count += 1 count_map[arr[right]] += 1 right += 1 while distinct_count > k: count_map[arr[left]] -= 1 if count_map[arr[left]] == 0: distinct_count -= 1 left += 1 if distinct_count == k: max_length = max(max_length, right - left) return max_length"},{"question":"Mike is a digital book lover and he owns several eBooks in a popular online store. Each eBook has a unique number of pages and is assigned a unique rating from 1 to 5. Mike wants to organize his eBooks in such a way that he groups them based on their ratings and, within each group, sorts them by the number of pages in ascending order. Write a program to accomplish this. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of eBooks. - The next n lines each contain two integers p and r (1 ≤ p ≤ 10000, 1 ≤ r ≤ 5) representing the number of pages and the rating of each eBook, respectively. Output: - Output the list of eBooks grouped by their ratings (from 1 to 5), and within each group, arranged by the number of pages in ascending order. - Each eBook should be represented by its number of pages. - Output an empty line between different rating groups. Example: Input: 5 350 3 200 1 450 2 500 1 150 2 Output: 200 500 150 450 350 Explanation: - The first group of eBooks has a rating of 1 and contains two books with 200 and 500 pages, sorted in ascending order by the number of pages. - The second group has a rating of 2 and contains two books with 150 and 450 pages, sorted in ascending order by the number of pages. - The third group has a rating of 3 and contains one book with 350 pages. There are no eBooks having a rating of 4 or 5 in this example.","solution":"def organize_ebooks(n, ebooks): Organize eBooks by ratings and then by the number of pages. Parameters: n (int): Number of eBooks ebooks (list of tuples): List of tuples where each tuple has two integers, p (number of pages) and r (rating) Returns: list of lists: List of eBooks grouped by their ratings with pages sorted in ascending order within each group from collections import defaultdict # Initialize dictionary to store eBooks by rating books_by_rating = defaultdict(list) # Group books by rating for pages, rating in ebooks: books_by_rating[rating].append(pages) # Sort each rating group by number of pages sorted_ebooks = [] for rating in range(1, 6): if rating in books_by_rating: sorted_books = sorted(books_by_rating[rating]) if sorted_books: sorted_ebooks.append(sorted_books) return sorted_ebooks def format_organized_ebooks(organized_ebooks): Format and print the organized eBooks. Parameters: organized_ebooks (list of lists): List of grouped and sorted eBooks Returns: str: Formatted string output as described in the problem statement result = [] for books in organized_ebooks: result.append(\'n\'.join(map(str, books))) return \'nn\'.join(result)"},{"question":"Given an array of integers, you need to find the maximum sum of a subarray with at least one element. A subarray is a contiguous part of an array. Implement a function that takes an array of integers as input and returns the maximum sum of any subarray within the array. Input - An array of integers `arr` (1 ≤ arr.length ≤ 10^5, -10^5 ≤ arr[i] ≤ 10^5). Output - An integer representing the maximum sum of any subarray. Examples Input [1, -2, 3, 4, -5, 6] Output 8 Input [-1, -2, -3, -4] Output -1 Input [5, -9, 6, -2, 3] Output 7 Note In the first example, the subarray [3, 4, -5, 6] yields the maximum sum of 8. In the second example, the subarray with the largest sum is [-1], which yields -1 because all elements are negative. In the third example, the subarray [6, -2, 3] yields the maximum sum of 7.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray in the given array of integers. max_ending_here = max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"The Greenfields National Park is working on a project to improve bird migration tracking. Their goal is to enhance the accuracy of tracking migratory paths of different bird species by optimizing the data collected by various tracking stations. Each tracking station has its own coverage range and migratory birds can be detected by multiple stations simultaneously. The park staff needs a way to determine the minimum number of tracking stations required to ensure that each migratory bird species is recorded at least once as they pass through the park. Birds are identified by a unique ID and their detections are stored in a log. Each log entry contains a bird ID and the ID of the tracking station that detected the bird. The park staff suspects that there may be redundancy in the placement of tracking stations. You are required to write a program that determines the minimum number of tracking stations needed to cover all detected bird IDs at least once. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000), where n is the number of birds detected and m is the number of log entries. Each of the next m lines contains two space-separated integers bird_id and station_id (1 ≤ bird_id ≤ n, 1 ≤ station_id ≤ 1000), indicating that the station with ID station_id detected the bird with ID bird_id. Output Print the minimum number of distinct tracking stations required to cover all bird detections. Example Input 3 5 1 1 1 2 2 2 2 3 3 3 Output 2 In this example, tracking stations 2 and 3 can cover all the birds, so the output is 2.","solution":"def minimum_tracking_stations(n, m, logs): Determine minimum number of tracking stations needed to cover all detected bird IDs at least once. Parameters: n (int): Number of birds detected. m (int): Number of log entries. logs (list of tuples): Each tuple contains (bird_id, station_id). Returns: int: Minimum number of distinct tracking stations required. from collections import defaultdict bird_stations = defaultdict(set) for bird_id, station_id in logs: bird_stations[bird_id].add(station_id) station_coverages = {} for st_id in range(1, 1001): station_coverages[st_id] = set() for bird_id, stations in bird_stations.items(): for station_id in stations: station_coverages[station_id].add(bird_id) all_birds = set(range(1, n + 1)) covered_birds = set() station_counts = [] while covered_birds != all_birds: max_cover_station = None max_cover = 0 for station_id, birds in station_coverages.items(): cover_size = len(birds - covered_birds) if cover_size > max_cover: max_cover = cover_size max_cover_station = station_id covered_birds.update(station_coverages[max_cover_station]) station_counts.append(max_cover_station) del station_coverages[max_cover_station] return len(station_counts)"},{"question":"You are given a list of integers. Determine whether the list is sorted in non-decreasing order. Input The first line of input contains an integer N (1 ≤ N ≤ 100) representing the number of elements in the list. The second line contains N integers, each between -10^6 and 10^6, inclusive. Output Output \\"YES\\" if the list is sorted in non-decreasing order, otherwise output \\"NO\\". Examples Input 5 1 2 3 4 5 Output YES Input 4 3 2 1 4 Output NO","solution":"def is_sorted_non_decreasing(arr): Determines if a list of integers is sorted in non-decreasing order. :param arr: List of integers :return: \\"YES\\" if the list is sorted in non-decreasing order, otherwise \\"NO\\" for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of integers, which can contain duplicates. Your task is to find the most frequent integer in the list. If two or more integers have the same highest frequency, return the smallest integer among them. Input: First line contains an integer \'n\', the number of integers in the list. Second line contains \'n\' space-separated integers. Output: Print the most frequent integer. If there is a tie, print the smallest integer among the most frequent ones. Constraints: 1 ≤ n ≤ 10^5 -10^9 ≤ each integer in the list ≤ 10^9 Author : [Your Name] SAMPLE INPUT 6 1 3 2 2 1 3 SAMPLE OUTPUT 1","solution":"def most_frequent_integer(n, nums): Returns the most frequent integer in the list. If there is a tie, returns the smallest integer among the most frequent ones. from collections import Counter # Count the frequency of each integer freq_counter = Counter(nums) # Find the highest frequency max_freq = max(freq_counter.values()) # Find the smallest number with the highest frequency most_frequent = min(num for num in freq_counter if freq_counter[num] == max_freq) return most_frequent"},{"question":"Word Transformation Game In this game, you are given a string and a set of transformation rules. Each rule allows you to change one character in the string to another character. Your task is to determine the minimum number of transformations required to change the given initial string into a target string using the provided set of rules. If it is impossible to transform the initial string into the target string using the given rules, output -1. Input - The first line contains the initial string. - The second line contains the target string. - The third line contains an integer n, the number of transformation rules. - The next n lines each contain a rule in the format `x y`, indicating that the character `x` can be transformed into the character `y`. Constraints: - The initial and target strings have the same length and contain only lowercase English letters. - The length of the strings does not exceed 100. - The number of transformation rules n does not exceed 100. Output Output the minimum number of transformations required to change the initial string into the target string using the given transformation rules. If it is impossible, output -1. Example Input abc def 3 a d b e c f Output 3 Explanation - Convert \'a\' to \'d\' - Convert \'b\' to \'e\' - Convert \'c\' to \'f\' Alternate Example Input abc xyz 2 a x b y Output -1 Explanation There\'s no rule to transform \'c\' into \'z\', so the transformation is impossible.","solution":"from collections import defaultdict, deque def min_transformations(initial, target, n, rules): Returns the minimum number of transformations required to change the initial string into the target string using the given set of rules. If it is impossible to transform the initial string into the target string using the given rules, returns -1. if initial == target: return 0 transformations = defaultdict(set) for x, y in rules: transformations[x].add(y) def bfs(source, destination): Perform BFS to find the shortest transformation path from source to destination character. if source == destination: return 0 visited = set() queue = deque([(source, 0)]) while queue: current, steps = queue.popleft() if current == destination: return steps for next_char in transformations[current]: if next_char not in visited: visited.add(next_char) queue.append((next_char, steps + 1)) return float(\'inf\') total_transformations = 0 for s_char, t_char in zip(initial, target): if s_char == t_char: continue steps = bfs(s_char, t_char) if steps == float(\'inf\'): return -1 total_transformations += steps return total_transformations"},{"question":"In a small town named Waytown, there is an ancient library. The library stores old, fragile books, which can be handled only in a particular way. The head librarian wants to create an automated system to ensure the preservation of the books while being able to respond to queries about the availability of books. Each book in the library can be represented by a unique number from 1 to n. Additionally, each book has two attributes: - its availability status (either available (1) or unavailable (0)), - and a count of total times it has been issued. You are to design a system that allows the head librarian to perform the following operations: 1. Mark a book as issued, making it unavailable and incrementing its issue count. 2. Mark a book as returned, making it available. 3. Query the availability status of a book. 4. Query the total number of times a book has been issued. Implement a system to handle these operations efficiently. Input The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of books in the library and the number of operations to be performed. The following line contains n integers — the initial availability status of each book (either 0 or 1). The next q lines describe the operations to be performed. Each operation is one of the four types: 1. \\"ISSUE x\\" — Mark book x as issued. 2. \\"RETURN x\\" — Mark book x as returned. 3. \\"AVAILABLE x\\" — Query the availability status of book x. 4. \\"COUNT x\\" — Query the total number of times book x has been issued. Output For each \\"AVAILABLE x\\" and \\"COUNT x\\" operation, print the respective result in a new line. Examples Input 5 6 1 0 1 1 0 ISSUE 3 AVAILABLE 3 ISSUE 1 AVAILABLE 1 COUNT 1 COUNT 3 Output 0 0 1 1 Input 4 3 1 1 0 1 ISSUE 2 AVAILABLE 2 COUNT 2 Output 0 1","solution":"class Library: def __init__(self, n, availability): self.availability = availability self.issue_count = [0] * n def issue(self, x): if self.availability[x-1] == 1: self.availability[x-1] = 0 self.issue_count[x-1] += 1 def return_book(self, x): self.availability[x-1] = 1 def is_available(self, x): return self.availability[x-1] def times_issued(self, x): return self.issue_count[x-1] def process_operations(n, availability, operations): library = Library(n, availability) results = [] for operation in operations: if operation.startswith(\\"ISSUE\\"): _, x = operation.split() library.issue(int(x)) elif operation.startswith(\\"RETURN\\"): _, x = operation.split() library.return_book(int(x)) elif operation.startswith(\\"AVAILABLE\\"): _, x = operation.split() results.append(library.is_available(int(x))) elif operation.startswith(\\"COUNT\\"): _, x = operation.split() results.append(library.times_issued(int(x))) return results"},{"question":"You are given a binary tree with N nodes. Each node has a unique value in the range from 1 to N. The tree is rooted at node 1. You are to answer Q queries. Each query is represented by a single integer k. For each query, you need to print the sum of values of all nodes that are k distance away from the root. A distance of k means the number of edges in the shortest path from the root to the node. # Constraints - 1 ≤ N, Q ≤ 100000 - 1 ≤ k ≤ N # Input The input consists of two parts: 1. A list of N-1 pairs representing the edges of the tree. Each pair (u, v) means there is an edge between node u and node v. 2. Q integers, each representing the value k for each query. The input format is as follows: ``` N u1 v1 u2 v2 ... u(N-1) v(N-1) Q k1 k2 ... kQ ``` # Output For each query, print the required sum on a new line. # Example Input ``` 7 1 2 1 3 2 4 2 5 3 6 3 7 3 1 2 3 ``` Output ``` 5 22 0 ``` # Explanation - For k = 1: Nodes at distance 1 from root (node 1) are 2 and 3. Their sum is 2 + 3 = 5. - For k = 2: Nodes at distance 2 from root (node 1) are 4, 5, 6 and 7. Their sum is 4 + 5 + 6 + 7 = 22. - For k = 3: There are no nodes at distance 3 from the root. So the sum is 0.","solution":"from collections import defaultdict, deque def bfs_sum_at_distance_k(N, edges, queries): # Build the tree using adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Perform BFS to calculate the sum at each distance from root distance_sum = defaultdict(int) visited = set() queue = deque([(1, 0)]) # (node, current distance from root) visited.add(1) while queue: node, dist = queue.popleft() distance_sum[dist] += node for neighbor in tree[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, dist + 1)) # Answer each query result = [] for k in queries: result.append(distance_sum.get(k, 0)) return result"},{"question":"You are given a list of n integers representing the heights of buildings in a city. You can select any building and decrease its height by 1 unit. However, you can perform this operation no more than m times. Your task is to distribute the m operations in such a way that the difference between the height of the tallest building and the shortest building is minimized after all operations have been performed. Input: - The first line contains two integers n and m (1 ≤ n ≤ 50, 0 ≤ m ≤ 10^3) — the number of buildings and the number of operations you can perform. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the buildings. Output: - Print a single integer — the minimum possible difference between the height of the tallest and the shortest building after performing at most m operations. Examples: Input: 5 3 4 9 7 8 5 Output: 3 Input: 3 1 1 2 3 Output: 1 Note: In the first example, the initial difference between the tallest (height 9) and shortest (height 4) building is 5. By lowering the height of the building with height 9 by 1 unit three times, the heights become [4, 6, 7, 8, 5], and the new difference between the tallest and shortest building is 4 (8 - 4). However, if we lower the buildings more strategically, we can reduce this difference even further. In the second example, we can lower the height of the tallest building (height 3) by 1 unit to get the heights [1, 2, 2], resulting in a minimum difference of 1 (2 - 1).","solution":"def min_height_difference(n, m, heights): heights.sort() # While we still have operations left to perform while m > 0: # Find the building with the maximum height heights.sort(reverse=True) max_height = heights[0] # Decrease the height of the tallest building heights[0] -= 1 m -= 1 # After all operations, calculate the difference return max(heights) - min(heights)"},{"question":"Matilda loves playing with her building blocks. She has blocks of different heights, and she wants to build towers using them. Specifically, she wants to know if she can build exactly `k` towers where each tower has the same total height. Each block can be used only once. Given an array representing the heights of the blocks and an integer `k`, determine whether it is possible to partition the blocks into `k` towers of equal height. # Input The input consists of multiple test cases. The first line contains an integer `t` (1 ≤ t ≤ 1000) — the number of test cases. Each test case is represented by two lines: - The first line contains two integers `n` (1 ≤ n ≤ 20) and `k` (1 ≤ k ≤ n) — the number of blocks and the number of towers. - The second line contains `n` integers `h_1, h_2, ..., h_n` (1 ≤ h_i ≤ 50) — the heights of the blocks. # Output For each test case, print \\"YES\\" if it is possible to build `k` towers of equal height, and \\"NO\\" otherwise. # Example Input ``` 3 5 2 2 3 3 2 4 4 3 1 2 3 4 6 3 4 4 4 4 4 4 ``` Output ``` YES NO YES ``` # Explanation In the first test case, it\'s possible to split the blocks into two towers of height 7: {2, 4, 1} and {3, 2, 2}. In the second test case, it\'s not possible to split the blocks into three towers with equal height. In the third test case, it\'s possible to split the blocks into three towers of height 8: {4, 4}, {4, 4}, and {4, 4}.","solution":"from itertools import combinations def can_make_equal_towers(n, k, heights): Determines if it\'s possible to split the blocks into k towers of equal height. total_height = sum(heights) # If the total height is not divisible by k, we cannot partition them equally if total_height % k != 0: return \\"NO\\" target_height = total_height // k # Helper function to check if we can partition the blocks into k subsets of equal sum def can_partition(start, target, current_sum, used_blocks, count): if count == k: # All k towers are successfully formed return True if current_sum == target: # One tower is formed, try to form the next one return can_partition(0, target, 0, used_blocks, count + 1) for i in range(start, n): if not used_blocks[i] and current_sum + heights[i] <= target: used_blocks[i] = True if can_partition(i + 1, target, current_sum + heights[i], used_blocks, count): return True used_blocks[i] = False return False used_blocks = [False] * n return \\"YES\\" if can_partition(0, target_height, 0, used_blocks, 0) else \\"NO\\" def equal_towers(test_cases): results = [] for n, k, heights in test_cases: results.append(can_make_equal_towers(n, k, heights)) return results"},{"question":"You are given an infinite grid where a painter starts at the point (0,0). The painter moves in a repetitive pattern described as follows: 1. The painter takes 2 steps to the north. 2. Then, the painter takes 2 steps to the east. 3. Then, the painter takes 2 steps to the south. 4. Finally, the painter takes 2 steps to the west. These four steps complete one cycle. After each cycle, the painter repeats the same pattern starting from the last position of the previous cycle. The painter can be considered to have painted an area if he moves through it. During a particular event, observers have noted the exact coordinates on the grid where the painter is standing after a certain number of cycles. You are required to determine if a given point is visited (painted) by the painter or not. Your task is to write a program that checks if given coordinates correspond to a place where the painter has stood after any number of completed cycles. Input: - The first line contains an integer T, the number of test cases. - The next T lines contain space-separated integers x and y, the coordinates to be checked. Output: For each test case, print \\"PAINTED\\" (without quotes) if the painter stands at the given coordinates after any number of completed cycles, otherwise print \\"NOT PAINTED\\". Constraints: 1 ≤ T ≤ 100 -10^5 ≤ x, y ≤ 10^5 Example: Input: 3 0 0 2 2 4 4 Output: PAINTED PAINTED NOT PAINTED","solution":"def is_painted(T, coordinates): results = [] for x, y in coordinates: # Calculate the modulo values to identify the position in the cycle if x % 4 == 0 and y == 0 or y % 4 == 0 and x == 0: results.append(\\"PAINTED\\") elif x % 4 == 2 and y % 4 == 2: results.append(\\"PAINTED\\") else: results.append(\\"NOT PAINTED\\") return results def main(input): inputs = input.strip().split(\'n\') T = int(inputs[0]) coordinates = [tuple(map(int, coord.split())) for coord in inputs[1:T+1]] return is_painted(T, coordinates)"},{"question":"Given an integer array `arr`, you need to find the number of inversions in the array. Inversion Count for an array indicates how far (or close) the array is from being sorted. If array is already sorted then the inversion count is 0. If an array is sorted in the reverse order, then the inversion count is the maximum. Formally, two elements `arr[i]` and `arr[j]` form an inversion if `arr[i] > arr[j]` and `i < j`. Your task is to write a function that takes an integer `N` (size of the array) and the array `arr` of size `N` as inputs, and returns the number of inversions in the array. # Input Format: - The first line contains an integer `N` representing the size of the array. - The second line contains `N` space-separated integers representing the elements of the array. # Output Format: - Print a single integer representing the number of inversions in the array. # Constraints: 1 ≤ N ≤ 100,000 1 ≤ arr[i] ≤ 10^9 # Sample Input: ``` 5 2 4 1 3 5 ``` # Sample Output: ``` 3 ``` # Explanation: The array `[2, 4, 1, 3, 5]` has 3 inversions: 1. (2, 1) 2. (4, 1) 3. (4, 3)","solution":"def count_inversions(arr): Returns the number of inversions in the array `arr`. def merge_sort_counting_inversions(array): if len(array) < 2: return array, 0 mid = len(array) // 2 left, left_inv = merge_sort_counting_inversions(array[:mid]) right, right_inv = merge_sort_counting_inversions(array[mid:]) merged, split_inv = merge_count_split_inv(left, right) return merged, left_inv + right_inv + split_inv def merge_count_split_inv(left, right): i = j = 0 merged = [] inversions = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) j += 1 inversions += len(left) - i merged += left[i:] merged += right[j:] return merged, inversions _, total_inversions = merge_sort_counting_inversions(arr) return total_inversions"},{"question":"You\'re given a string `s` of length `n`, consisting of lowercase English letters. Your goal is to determine the number of substrings of `s` that are palindromes. A substring is any contiguous block of characters within the string. You need to print the total number of such palindromic substrings. Input The first line of the input contains an integer `n` (1 ≤ n ≤ 1000), the length of the string `s`. The second line contains the string `s`. Output In a single line, print the number of palindromic substrings in `s`. Examples Input 5 ababa Output 7 Input 3 abc Output 3 Note In the first example, the palindromic substrings are: \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"aba\\", \\"aba\\". In the second example, the palindromic substrings are: \\"a\\", \\"b\\", \\"c\\", each individual character is a palindrome and no larger palindromes exist. The solution should efficiently handle the given constraints.","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the given string `s`. n = len(s) count = 0 def is_palindrome(l, r): while l >= 0 and r < n and s[l] == s[r]: l -= 1 r += 1 return True return False for i in range(n): left, right = i, i # check for odd length palindromes while is_palindrome(left, right): count += 1 left -= 1 right += 1 left, right = i, i + 1 # check for even length palindromes while is_palindrome(left, right): count += 1 left -= 1 right += 1 return count"},{"question":"A company is planning to upgrade its servers and wants to ensure high availability. They have noticed that during maintenance or server failures, it is crucial to balance the load on the other available servers to minimize downtime and performance degradation. As an initial step, they want to simulate this by distributing tasks among servers such that the maximum load on any server is minimized. You are given `N` tasks and `K` servers. Each task has a certain load, represented by an integer. You need to assign these tasks to the servers in such a way that the maximum load on any single server is minimized. Write a function `minimize_max_load(tasks: List[int], k: int) -> int` which takes a list of integers representing the load of each task and an integer representing the number of available servers. Input: - The first line contains an integer `T` which is the number of test cases. - For each test case, there are two lines: - The first line contains two integers `N` (the number of tasks) and `K` (the number of servers). - The second line contains `N` integers, the load of each task. Output: For each test case, output a single integer, the minimized maximum load after optimally distributing the tasks among the servers. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N, K ≤ 10^5 - 1 ≤ load ≤ 10^9 Scoring: - For 1 ≤ N, K ≤ 10 : (30 pts) - For 1 ≤ N, K ≤ 10^3 : (30 pts) - Original Constraints : (40 pts) Example: Input: 2 5 2 1 2 3 4 5 6 3 10 10 10 10 10 10 Output: 9 20 Explanation: Case 1: The optimal way to distribute the tasks among the 2 servers would be: Server 1: [1, 2, 3] Server 2: [4, 5] The maximum load on either server is 9. Case 2: The optimal way to distribute the tasks among the 3 servers would be: Server 1: [10, 10] Server 2: [10, 10] Server 3: [10, 10] The maximum load on any server is 20.","solution":"def canDistribute(tasks, k, maxLoad): currentLoadSum = 0 numServers = 1 for task in tasks: if currentLoadSum + task > maxLoad: numServers += 1 currentLoadSum = task if numServers > k: return False else: currentLoadSum += task return True def minimize_max_load(tasks, k): low, high = max(tasks), sum(tasks) answer = high while low <= high: mid = (low + high) // 2 if canDistribute(tasks, k, mid): answer = mid high = mid - 1 else: low = mid + 1 return answer def process_test_cases(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] tasks = test_cases[i][1] results.append(minimize_max_load(tasks, K)) return results # Example of how to provide input to process_test_cases # T = 2 # test_cases = [ # [(5, 2), [1, 2, 3, 4, 5]], # [(6, 3), [10, 10, 10, 10, 10, 10]] # ] # print(process_test_cases(T, test_cases))"},{"question":"In Professor Whizzo\'s computer science class, students were given a task to create a matrix of dimensions n x m filled with integers such that each row in the matrix is sorted in non-decreasing order from left to right, and each column is sorted in non-decreasing order from top to bottom. Given two matrices A and B of the same dimensions n x m, the professor came up with a challenge: superimpose matrix B onto matrix A by replacing each element in A with the corresponding element in B at the same position if and only if the element in B is larger than the element in A. After making these replacements, ensure the resultant matrix still satisfies the sorting properties (sorted rows and columns) and print the resulting matrix. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100). The next n lines contain m integers each, representing matrix A, with elements in non-decreasing order both in rows and columns. The next n lines contain m integers each, representing matrix B. Output Print n lines with m integers each, representing the updated matrix with sorting properties maintained based on the described rules. Examples Input 3 3 1 2 3 4 5 6 7 8 9 2 3 4 5 6 7 8 9 10 Output 2 3 4 5 5 6 7 8 9 Input 2 2 1 2 3 4 2 1 4 3 Output 2 2 4 4","solution":"def update_matrix(n, m, matrix_a, matrix_b): result = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): result[i][j] = max(matrix_a[i][j], matrix_b[i][j]) return result # Example usage n, m = 3, 3 matrix_a = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] matrix_b = [ [2, 3, 4], [5, 6, 7], [8, 9, 10] ] result = update_matrix(n, m, matrix_a, matrix_b) for row in result: print(\\" \\".join(map(str, row))) # Output: # 2 3 4 # 5 6 7 # 8 9 10"},{"question":"In a remote kingdom, Victor runs a flower shop that spans a 1-dimensional line with coordinates ranging from 1 to m. On each day, one order is scheduled for delivery to a location on this line. He needs to transport the flowers with a special refrigerated cart that has a certain temperature capacity and a maximum range. The flower shop takes t days to prepare the flowers, and the flowers will spoil after d days if not delivered. Victor can only make one trip per day. On each trip, he can start from any position on the line (including his current position) and move either left or right up to i steps (the maximum range of the cart) to deliver the flowers. Victor\'s goal is to deliver flowers to a series of specific positions given for each day while ensuring that none of the flowers spoil. To assist Victor, write a program that determines if it’s possible for him to successfully complete all the deliveries without any flowers spoiling. You are provided the number of positions, maximum range of the cart, and the list of delivery requests. Input The first line contains two integers m and i (1 ≤ m, i ≤ 10^5) — the length of the line and the maximum range of the cart respectively. The second line contains an integer t (1 ≤ t ≤ 10^5) — number of requests. Each of the next t lines contains an integer p (1 ≤ p ≤ m) — the position of the delivery for that day. Output Print \\"YES\\" if Victor can make all the deliveries without the flowers spoiling, and \\"NO\\" otherwise. Examples Input 10 3 3 2 5 8 Output YES Input 12 2 4 1 4 7 10 Output NO Note In the first sample, Victor can move as follows: - Day 1: Start at position 2, deliver flowers. - Day 2: Move to position 5, deliver flowers. - Day 3: Move to position 8, deliver flowers. In the second sample, it’s impossible to deliver all flowers in time as the maximum range of the cart is not enough to move from position 1 to position 4 in one day, and hence, Victor cannot deliver flowers before they spoil.","solution":"def can_deliver_all_flowers(m, i, t, delivery_positions): This function checks if it is possible to deliver all flowers without spoilage. Parameters: - m: int: The length of the line - i: int: The maximum range of the cart - t: int: The number of delivery requests - delivery_positions: list of int: The delivery positions for each day Returns: - str: \\"YES\\" if all deliveries can be made without spoilage, \\"NO\\" otherwise for day in range(1, t): if abs(delivery_positions[day] - delivery_positions[day - 1]) > i: return \\"NO\\" return \\"YES\\" # Example usage # m = 10, i = 3, t = 3, [2, 5, 8] example_result = can_deliver_all_flowers(10, 3, 3, [2, 5, 8]) print(\\"Output for example 1:\\", example_result) # Output: YES # m = 12, i = 2, t = 4, [1, 4, 7, 10] example_result = can_deliver_all_flowers(12, 2, 4, [1, 4, 7, 10]) print(\\"Output for example 2:\\", example_result) # Output: NO"},{"question":"During a group project, three students, Alice, Bob, and Charlie, are responsible for reviewing and approving tasks. A task is approved if at least two out of the three students agree on the approval. The project consists of m tasks. For each task, we know whether each student approves the task or not. Help the project manager determine how many tasks will be approved by the group. Input The first input line contains a single integer m (1 ≤ m ≤ 1000) — the number of tasks in the project. Then m lines contain three integers each, either 0 or 1. The first integer in the line denotes whether Alice approves the task (1 for approve, 0 for disapprove), the second integer denotes Bob\'s decision, and the third integer denotes Charlie\'s decision. The integers in each line are separated by spaces. Output Print a single integer — the number of tasks that the group will approve. Examples Input 4 1 0 1 1 1 0 0 0 1 1 1 1 Output 3 Input 3 0 0 0 1 0 0 1 1 0 Output 1 Note In the first example, Alice and Charlie approve the first task, Alice and Bob approve the second task, and all three approve the fourth task. These tasks will be approved. In the second input, only the last task is approved by both Alice and Bob. In the second example, no one approves the first task. Only Alice approves the second task, and Alice and Bob approve the third task. Only the third task will be approved.","solution":"def count_approved_tasks(m, decisions): Returns the number of tasks approved by at least two out of three students. Parameters: m (int): the number of tasks. decisions (list of list of int): a list containing m sub-lists each with three integers (0 for disapprove, 1 for approve). Returns: int: the number of tasks approved. approved_count = 0 for decision in decisions: if sum(decision) >= 2: approved_count += 1 return approved_count"},{"question":"Imagine you are given a list of contacts where each contact consists of a first name, last name, and phone number. Some contacts may have the same first name or the same last name but different phone numbers. Your goal is to merge contacts that have either the same first name or the same last name by combining all associated phone numbers. Write a function that takes a list of contacts as input and returns the list of merged contacts. Each contact in the input list is represented as a tuple `(first_name, last_name, phone_number)`. The output should be a list of tuples, where each tuple represents a unique contact with their associated phone numbers merged into a set. Input - A list of contacts `contacts` such that `1 ≤ len(contacts) ≤ 1000`. - Each contact is represented as a tuple `(first_name, last_name, phone_number)`, where: - `first_name` and `last_name` are strings consisting of letters and have a length of at most 50 characters. - `phone_number` is a string of digits and has a length of at most 15 characters. Output - A list of merged contacts, where each contact is represented as a tuple `(first_name, last_name, phone_numbers)`, and `phone_numbers` is a set of strings. Example Input ```python contacts = [ (\\"John\\", \\"Smith\\", \\"12345\\"), (\\"Jane\\", \\"Doe\\", \\"67890\\"), (\\"John\\", \\"Doe\\", \\"54321\\"), (\\"John\\", \\"Smith\\", \\"98765\\"), (\\"Jane\\", \\"Smith\\", \\"12345\\") ] ``` Output ```python [ (\\"Jane\\", \\"Doe\\", {\\"67890\\"}), (\\"John\\", \\"Doe\\", {\\"54321\\"}), (\\"Jane\\", \\"Smith\\", {\\"12345\\"}), (\\"John\\", \\"Smith\\", {\\"12345\\", \\"98765\\"}) ] ``` Explanation - The contact with first name \\"John\\" and last name \\"Smith\\" appears twice with different phone numbers, which are merged into the same contact with phone numbers grouped together. - All other contacts remain separate as they have unique combinations of first names and last names.","solution":"def merge_contacts(contacts): Merges contacts with the same first name or last name by combining their phone numbers into a set. Args: contacts: List of tuples, each containing (first_name, last_name, phone_number) Returns: List of tuples, each containing (first_name, last_name, phone_numbers) where phone_numbers is a set. contact_dict = {} for first_name, last_name, phone_number in contacts: # Construct a unique key using `first_name` and `last_name` key = (first_name, last_name) if key in contact_dict: contact_dict[key].add(phone_number) else: contact_dict[key] = {phone_number} merged_contacts = [(first_name, last_name, phone_numbers) for (first_name, last_name), phone_numbers in contact_dict.items()] return merged_contacts"},{"question":"You are working on a new social media application that features a messaging system. You need to implement a feature that detects when a user has sent the same message multiple times in a short period, as this might indicate spamming. A message can be considered as spam if it appears in the chat log more than once consecutively. Your task is to identify all such spam messages. Write a function `detect_spam` that processes a chat log and returns a list of all messages that are identified as spam. A message is identified as spam if it appears more than once in a row. # Input The input is a list of strings, where each string represents a message sent by a user. The messages are given in the order they were sent. # Output The output should be a list of strings, each representing a message that is considered spam. Each message should appear in the output only once, regardless of how many times it was spammed. # Example Input: ```python [ \\"Hey, are you there?\\", \\"Yes, I\'m here.\\", \\"Yes, I\'m here.\\", \\"What\'s up?\\", \\"What\'s up?\\", \\"What\'s up?\\", \\"Nothing much, you?\\", \\"Nothing much, you?\\", \\"Just chilling\\", \\"Just chilling\\" ] ``` Output: ```python [ \\"Yes, I\'m here.\\", \\"What\'s up?\\", \\"Nothing much, you?\\", \\"Just chilling\\" ] ``` # Constraint The input list will have between 1 and 100 messages, inclusive. Each message will be a non-empty string of length between 1 and 100 characters, inclusive. Implement the function `detect_spam(messages)` that takes in the list of messages and returns the list of spam messages.","solution":"def detect_spam(messages): Detects messages that have been sent consecutively multiple times (spam). Args: messages (list): A list of messages sent by a user. Returns: list: A list of messages identified as spam. if not messages: return [] spam_messages = [] previous_message = messages[0] is_spam = False for message in messages[1:]: if message == previous_message: is_spam = True else: if is_spam: spam_messages.append(previous_message) is_spam = False previous_message = message if is_spam: # Check if the last set of messages were spams spam_messages.append(previous_message) return list(set(spam_messages)) # Remove duplicates"},{"question":"You are given \'n\' projects, each with an associated complexity and reward value. You have exactly \'k\' engineers, each capable of working on no more than one project at a time. Each project can be assigned to one or more engineers depending on its required complexity. The efficiency of an engineer on a project is inversely proportional to the number of engineers working on that project. Given these constraints, you need to maximize the total reward by appropriately assigning engineers to the projects. Input The first line contains two integers n (1 ≤ n ≤ 50) and k (1 ≤ k ≤ 50) — the number of projects and the number of engineers, respectively. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ k), where ci represents the complexity required for the i-th project. The third line contains n integers r1, r2, ..., rn (1 ≤ ri ≤ 1000), where ri represents the reward for completing the i-th project. Output Print a single integer value — the maximum total reward that can be achieved given the constraints. Examples Input 3 5 2 3 1 100 200 50 Output 350 Input 4 4 1 1 1 1 100 100 100 100 Output 400 Note In the first example, you can assign: - 2 engineers to the first project (reward: 100). - 3 engineers to the second project (reward: 200). - 0 engineers to the third project (reward: 0). Total reward: 100 + 200 = 300. In the second example, since each project\'s complexity can be satisfied by one engineer, you can assign one engineer per project to maximize the reward: - 1 engineer to the first project (reward: 100). - 1 engineer to the second project (reward: 100). - 1 engineer to the third project (reward: 100). - 1 engineer to the fourth project (reward: 100). Total reward: 100 + 100 + 100 + 100 = 400.","solution":"def max_total_reward(n, k, complexities, rewards): # Pair each complexity with its reward and sort by reward descending projects = sorted(zip(complexities, rewards), key=lambda x: x[1], reverse=True) total_reward = 0 for complexity, reward in projects: if complexity <= k: # If we have enough engineers for the complexity total_reward += reward k -= complexity # Deduct the assigned engineers from the available pool return total_reward"},{"question":"You are given a grid of size N x M where each cell contains either a \'.\' representing an empty space or a \'#\' representing an obstacle. A robot is placed at the top-left corner of the grid and wants to reach the bottom-right corner. The robot can only move to the right or down from its current position. Your task is to determine if there is a path for the robot from the top-left corner to the bottom-right corner. Constraints * 1 ≤ N, M ≤ 1000 Input The input is given from Standard Input in the following format: ``` N M grid ``` Where `grid` is N lines of strings, each string has a length of M and consists of characters \'.\' and \'#\'. Output Print \\"YES\\" if there is a path for the robot to reach the bottom-right corner, otherwise print \\"NO\\". Examples Input ``` 3 3 ..# .#. ... ``` Output ``` YES ``` Input ``` 3 3 ... # ... ``` Output ``` NO ```","solution":"def can_reach_bottom_right(n, m, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' visited = [[False] * m for _ in range(n)] queue = [(0, 0)] while queue: x, y = queue.pop(0) if x == n-1 and y == m-1: return \\"YES\\" if visited[x][y]: continue visited[x][y] = True if is_valid(x + 1, y) and not visited[x + 1][y]: queue.append((x + 1, y)) if is_valid(x, y + 1) and not visited[x][y + 1]: queue.append((x, y + 1)) return \\"NO\\""},{"question":"Given an integer array of length n. Can you determine whether the array can be made strictly increasing by removing exactly one element? Input First line of the input contains a single integer T denoting number of test cases. For each test case, you are given a single line containing the integer n (the number of elements in the array) followed by n space-separated integers denoting the elements of the array. Output For each test case, print YES or NO depending on whether the array can be made strictly increasing by removing exactly one element. Constraints Example Input: 4 5 1 2 3 4 5 5 1 3 2 4 5 5 5 4 3 2 1 5 1 5 3 2 4 Output: NO YES NO NO Explanation Example case 1. The array is already strictly increasing, removing any one element will not work. Example case 2. Removing the second element (3) results in the strictly increasing array [1, 2, 4, 5]. Example case 3. The array is strictly decreasing, so it is impossible to make it strictly increasing by removing just one element. Example case 4. Removing any one element cannot make the array strictly increasing.","solution":"def can_be_strictly_increasing_by_removing_one(arr): def is_strictly_increasing(arr): return all(arr[i] < arr[i+1] for i in range(len(arr) - 1)) n = len(arr) if is_strictly_increasing(arr): return False # already strictly increasing, removing one element won\'t work for i in range(n): if is_strictly_increasing(arr[:i] + arr[i+1:]): return True return False def process_test_cases(T, test_cases): results = [] for arr in test_cases: if can_be_strictly_increasing_by_removing_one(arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A robot stands at the position (0,0) on an infinite grid and follows a sequence of directions given as a string. The directions include \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. Determine the final position of the robot after it has followed all the directions in the sequence. Input The only line contains a string directions, where each character in the string is one of \'U\', \'D\', \'L\', or \'R\'. The length of directions is between 1 and 10000. Output Print two integers x and y — the final coordinates of the robot on the grid. Example Input UUDDLRLR Output 0 0","solution":"def final_position(directions): Returns the final position of the robot after following the directions. x, y = 0, 0 for direction in directions: if direction == \'U\': y += 1 elif direction == \'D\': y -= 1 elif direction == \'L\': x -= 1 elif direction == \'R\': x += 1 return x, y"},{"question":"Given an integer N, your task is to determine how many perfect square numbers exist between 1 and N (inclusive) that have an odd number of divisors. Constraints * N is an integer between 1 and 10,000 (inclusive). Input Input is given from Standard Input in the following format: N Output Print the count. Examples Input 16 Output 4 Input 25 Output 5","solution":"import math def count_odd_divisors_perfect_squares(N): Returns the number of perfect squares between 1 and N (inclusive) that have an odd number of divisors. return int(math.isqrt(N))"},{"question":"Given an array of integers `arr` of size `N`, you need to perform Q operations on it. Each operation can be one of the following two types: 1. Add a value `V` to all elements in a subarray from index `L` to `R` (both inclusive). 2. Compute the sum of all elements in a subarray from index `L` to `R` (both inclusive). Input: - The first line contains an integer `N`, the size of the array. - The second line contains `N` integers, the elements of the array. - The third line contains an integer `Q`, the number of operations. - The next `Q` lines describe the operations. Each line starts with an integer indicating the type of operation (1 or 2). - If the operation is of type 1, it is followed by three integers `L`, `R`, and `V`. - If the operation is of type 2, it is followed by two integers `L` and `R`. Output: For each operation of type 2, output the sum of the specified subarray in a separate line. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^4 - 1 ≤ L ≤ R ≤ N - -10^9 ≤ arr[i], V ≤ 10^9 SAMPLE INPUT 5 1 2 3 4 5 4 1 1 3 2 2 1 3 1 2 5 -1 2 1 3 SAMPLE OUTPUT 12 10 Explanation - After the first operation, the array becomes [3, 4, 5, 4, 5]. - The sum from index 1 to 3 (3-based index) is 3 + 4 + 5 = 12. - After the third operation, the array becomes [3, 3, 4, 3, 4]. - The sum from index 1 to 3 is 3 + 3 + 4 = 10.","solution":"def perform_operations(N, arr, Q, operations): result = [] for op in operations: if op[0] == 1: L, R, V = op[1], op[2], op[3] for i in range(L - 1, R): arr[i] += V elif op[0] == 2: L, R = op[1], op[2] result.append(sum(arr[L - 1:R])) return result"},{"question":"Maria is a big fan of palindrome numbers. One day, she thought about a unique problem to challenge her friends. She gave them a number K and asked them to find all the palindromic numbers between 1 and K (inclusive). Your task is to help Maria\'s friends by writing a program to find all the palindromic numbers between 1 and K. Input: The first line contains a number T, the number of test cases. The next T lines each contain an integer K. Output: For each test case, print all palindromic numbers between 1 and K (inclusive) in a single line, separated by spaces. If there are no palindromic numbers, print \\"None\\". Constraints: 1 ≤ T ≤ 1000 1 ≤ K ≤ 10^5 SAMPLE INPUT 2 10 50 SAMPLE OUTPUT 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 11 22 33 44","solution":"def is_palindrome(number): Checks whether a given number is a palindrome. return str(number) == str(number)[::-1] def find_palindromes_up_to_k(k): Finds all palindromic numbers between 1 and k (inclusive). palindromes = [num for num in range(1, k + 1) if is_palindrome(num)] return palindromes if palindromes else [\\"None\\"] def palindromes_between_1_and_k(test_cases): Takes a list of values of K and returns the palindromic numbers between 1 and K for each test case. results = [] for k in test_cases: palindromes = find_palindromes_up_to_k(k) results.append(\\" \\".join(map(str, palindromes))) return results"},{"question":"Given an undirected graph with n nodes and m edges, you need to perform a series of operations. There are q queries, where each query is one of the following types: 1. Add an edge between nodes u and v. 2. Remove an edge between nodes u and v. 3. Check if there is a path between nodes u and v. Write a program that reads the initial state of the graph and processes each query. Input The first line contains three integers n, m, and q (1 ≤ n, m, q ≤ 100,000) — the initial number of nodes, the initial number of edges, and the number of queries. The next m lines contain two integers u and v each (1 ≤ u, v ≤ n) representing an edge between nodes u and v. The next q lines contain a query in one of the following formats: * 1 u v (1 ≤ u, v ≤ n) - Add an edge between nodes u and v. * 2 u v (1 ≤ u, v ≤ n) - Remove the edge between nodes u and v. * 3 u v (1 ≤ u, v ≤ n) - Check if there is a path between nodes u and v. Output For each query of type 3, print \\"yes\\" if there is a path between nodes u and v, and \\"no\\" otherwise. Example Input 5 4 5 1 2 2 3 3 4 4 5 3 1 5 2 3 4 3 1 5 1 3 4 3 1 5 Output yes no yes Note In this example: - Initially, there is a path from 1 to 5 through the edges (1-2, 2-3, 3-4, 4-5). - After performing the second query, the edge between nodes 3 and 4 is removed, making it not possible to reach 5 from 1. - After the fourth query, the edge (3-4) is added back, restoring the path from 1 to 5.","solution":"from collections import defaultdict, deque class Graph: def __init__(self, n): self.n = n self.adj_list = defaultdict(set) def add_edge(self, u, v): self.adj_list[u].add(v) self.adj_list[v].add(u) def remove_edge(self, u, v): if v in self.adj_list[u]: self.adj_list[u].remove(v) if u in self.adj_list[v]: self.adj_list[v].remove(u) def has_path(self, u, v): if u == v: return True visited = set() queue = deque([u]) while queue: node = queue.popleft() if node == v: return True if node not in visited: visited.add(node) for neighbor in self.adj_list[node]: if neighbor not in visited: queue.append(neighbor) return False def process_queries(n, m, q, initial_edges, queries): graph = Graph(n) for u, v in initial_edges: graph.add_edge(u, v) result = [] for query in queries: type_, u, v = query if type_ == 1: graph.add_edge(u, v) elif type_ == 2: graph.remove_edge(u, v) elif type_ == 3: if graph.has_path(u, v): result.append(\\"yes\\") else: result.append(\\"no\\") return result"},{"question":"Tom is a cryptographer and he deals with different encryption techniques. One day, he encountered an interesting problem: he needs to find out if a given string can be rearranged to form a palindrome. A palindrome is a string that reads the same backward as forward. For example, \\"radar\\" and \\"level\\" are palindromes. Tom needs to automate this process and he asked you to help him by writing a program that checks if the given string can be rearranged to form a palindrome. Input The input consists of a single line containing a string s of length n (1 ≤ n ≤ 100,000). The string consists only of lowercase English letters. Output Print \\"YES\\" if the string can be rearranged to form a palindrome, otherwise print \\"NO\\". Examples Input civic Output YES Input ivicc Output YES Input hello Output NO","solution":"def can_form_palindrome(s): Checks if the input string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one character has an odd frequency. :param s: Input string consisting of lowercase English letters. :return: \\"YES\\" if it can be rearranged to form a palindrome, otherwise \\"NO\\". from collections import Counter count = Counter(s) odd_count = sum(1 for c in count.values() if c % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Alex is obsessed with palindromes and recently he has stumbled upon an interesting problem related to them. He wants to find out the length of the longest palindromic substring within a given string. A palindromic substring is a sequence of characters that reads the same backward as forward. Can you help Alex determine the length of the longest palindromic substring for multiple test cases? Input The input starts with a line indicating the number of test cases T (1 ≤ T ≤ 50). Each of the next T lines contains a single string s (1 ≤ |s| ≤ 1000) consisting of lowercase letters (a-z). Output For each test case, output a single line containing the length of the longest palindromic substring of the corresponding string. Example Input 3 babad cbbd a Output 3 2 1 Note For the first test case, the longest palindromic substring is \\"bab\\" or \\"aba\\" with length 3. For the second test case, the longest palindromic substring is \\"bb\\" with length 2. For the third test case, the longest palindromic substring is \\"a\\" with length 1.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in s. n = len(s) if n <= 1: return n longest = 1 dp = [[False] * n for _ in range(n)] for i in range(n): dp[i][i] = True for start in range(n - 1, -1, -1): for end in range(start + 1, n): if s[start] == s[end]: if end - start == 1 or dp[start + 1][end - 1]: dp[start][end] = True longest = max(longest, end - start + 1) return longest def find_longest_palindromic_substrings(test_cases): For each string in test_cases, returns the length of the longest palindromic substring. return [longest_palindromic_substring_length(s) for s in test_cases]"},{"question":"# Problem Statement Sarah loves to read novels, but she often gets distracted and loses track of her place while reading. To help her focus, she has come up with a special reading system: each chapter of the novel is represented by a binary string of \'0\'s and \'1\'s. She starts reading from the first character and keeps track of the longest sequence of consecutive \'1\'s she has read so far. If she encounters a \'0\', she loses track and needs to start from scratch from the next \'1\'. Sarah wants to know the length of the longest sequence of consecutive \'1\'s she can read in each chapter. Write a function `longest_sequence(n, chapters)` that, given the number of chapters `n` and a list of binary strings `chapters`, returns a list of integers representing the length of the longest sequence of consecutive \'1\'s in each chapter. # Input - An integer `n` representing the number of chapters. - A list `chapters` of `n` binary strings, where each string represents a chapter. # Output - A list of integers where each integer represents the longest sequence of consecutive \'1\'s in the corresponding chapter. # Constraints - 1 ≤ n ≤ 100 - 1 ≤ length of each binary string ≤ 10^5 # Examples Input: ``` 2 [\\"1100111\\", \\"00110011\\"] ``` Output: ``` [3, 2] ``` Input: ``` 3 [\\"1010101\\", \\"1111\\", \\"100011\\"] ``` Output: ``` [1, 4, 2] ``` # Explanation In the first example: - The first chapter \\"1100111\\" has the longest sequence of \'1\'s of length 3. - The second chapter \\"00110011\\" has the longest sequence of \'1\'s of length 2. In the second example: - The first chapter \\"1010101\\" has the longest sequence of \'1\'s of length 1. - The second chapter \\"1111\\" has the longest sequence of \'1\'s of length 4. - The third chapter \\"100011\\" has the longest sequence of \'1\'s of length 2. This problem requires you to iterate through each chapter and find the longest sequence of consecutive \'1\'s in each binary string.","solution":"def longest_sequence(n, chapters): Returns a list of the longest sequence of consecutive \'1\'s in each chapter. result = [] for chapter in chapters: max_seq = 0 current_seq = 0 for char in chapter: if char == \'1\': current_seq += 1 max_seq = max(max_seq, current_seq) else: current_seq = 0 result.append(max_seq) return result"},{"question":"Mr. Turing is an avid collector of rare coins. Over the years, he has managed to gather a vast collection, and now, he likes to display them in a particular way. He arranges his coins in rows, such that each row has the same number of coins and each row has more coins than the row above it. Specifically, the number of coins in the ith row must be exactly i coins. Given a total of n coins, determine the maximum number of fully completed rows that Mr. Turing can form. Input The first line of the input contains a single integer n (1 ≤ n ≤ 2·109) — the total number of coins Mr. Turing has. Output Print one integer — the maximum number of fully completed rows that can be formed with the given number of coins. Examples Input 5 Output 2 Input 8 Output 3","solution":"def max_fully_completed_rows(n): Determines the maximum number of fully completed rows that can be formed with the given number of coins. Args: n (int): The total number of coins. Returns: int: The maximum number of fully completed rows. # Binary search approach to find the maximum k such that (k * (k + 1)) / 2 <= n left, right = 0, n while left <= right: mid = (left + right) // 2 if mid * (mid + 1) // 2 <= n: left = mid + 1 else: right = mid - 1 return right"},{"question":"Tina loves to play with colors and create various colorful designs on her computer. Each day, she follows a specific sequence to fill colors in a grid of size `n` x `m`. She wants to fill colors in such a way that no two adjacent cells (either horizontally or vertically) have the same color. Tina also enjoys experimenting with a variety of `k` distinct colors. Tina starts filling the grid from the top-left corner and moves to the right, then goes down to the next row, and continues again from the left to right until the whole grid is filled. Here is your task: given the grid dimensions `n` and `m`, the number of distinct colors `k`, determine if it is possible for Tina to fill the grid such that no two adjacent cells have the same color. If it is possible, print \\"Yes\\", otherwise print \\"No\\". Input The first line contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 200) representing the number of rows, the number of columns, and the number of distinct colors, respectively. Output Print \\"Yes\\" if it is possible to fill the grid according to the rules, otherwise print \\"No\\". Examples Input 3 4 2 Output Yes Input 2 2 1 Output No Note In the first example, it is possible to color a 3x4 grid using 2 colors so that no adjacent cells share the same color by alternatively switching between the two colors. For example: ``` A B A B B A B A A B A B ``` In the second example, it is not possible to color even a 2x2 grid with only 1 color as all adjacent cells would be the same.","solution":"def is_coloring_possible(n, m, k): Determines if it\'s possible to fill a grid of size n x m with k distinct colors such that no two adjacent cells have the same color. Args: n (int): Number of rows. m (int): Number of columns. k (int): Number of distinct colors. Returns: str: \\"Yes\\" if it\'s possible, otherwise \\"No\\". # To avoid adjacent cells having the same color, at least 2 colors are required if k >= 2: return \\"Yes\\" else: return \\"No\\""},{"question":"You are given a list of integers representing the amount of rainfall recorded over several days. Your task is to find the maximum number of consecutive days with zero rainfall. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of days. The second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 1000) — the amount of rainfall on each day. Output Print a single integer — the length of the longest sequence of consecutive days with zero rainfall. Examples Input 7 0 1 0 0 2 0 0 0 Output 3 Input 5 1 2 1 2 3 Output 0 Note In the first example, the longest sequence of consecutive days with zero rainfall is 3 (the last three days). In the second example, there are no days with zero rainfall, so the result is 0.","solution":"def max_consecutive_zero_rainfall_days(n, rainfall): Returns the maximum number of consecutive days with zero rainfall. :param n: int, the number of days :param rainfall: list of int, the amount of rainfall on each day :return: int, the length of the longest sequence of consecutive days with zero rainfall max_length = 0 current_length = 0 for amount in rainfall: if amount == 0: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"In a distant future colony on Mars, energy is the most crucial resource. The colony has a number of solar panels for energy generation. Each solar panel has an efficiency rating which is represented as an integer (both positive and negative values are possible). The energy generation of a combination of panels is the sum of their efficiencies. However, due to a recent sandstorm, some panels have become faulty and their efficiency has greatly reduced, resulting in negative values. Given a list of efficiency ratings of solar panels, your task is to determine the largest possible contiguous subarray sum. This largest sum represents the maximum energy that can be generated by choosing a contiguous sequence of solar panels from the list. Input Format: The first line of the input contains an integer T, the number of test cases. Each test case starts with an integer N, the number of solar panels. The next line contains N space-separated integers representing the efficiency ratings of the solar panels. Output Format: For each test case, output a single integer, the maximum contiguous subarray sum for that test case. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^4 ≤ efficiency rating ≤ 10^4 SAMPLE INPUT 3 8 -2 1 -3 4 -1 2 1 -5 4 5 1 2 3 4 5 6 -5 -2 -3 -4 -1 -2 SAMPLE OUTPUT 6 15 -1 Explanation: In the first case, the maximum contiguous subarray sum is obtained by choosing the subarray [4, -1, 2, 1], which sums to 6. In the second case, the maximum contiguous subarray sum is obtained by choosing the whole array [1, 2, 3, 4, 5], which sums to 15. In the third case, all the numbers are negative, the maximum contiguous subarray sum is the least negative number, which is -1.","solution":"def max_contiguous_subarray_sum(efficiencies): Finds the maximum contiguous subarray sum using Kadane\'s algorithm. max_sum = current_sum = efficiencies[0] for efficiency in efficiencies[1:]: current_sum = max(efficiency, current_sum + efficiency) max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(test_cases): results = [] for case in test_cases: _, efficiencies = case results.append(max_contiguous_subarray_sum(efficiencies)) return results"},{"question":"You are tasked with constructing a binary tree from a given list of values and performing various operations on it. Each value will be inserted into the binary tree while maintaining the properties of a binary search tree (BST). A BST is defined as follows: - The left subtree of a node contains only nodes with values less than the node’s value. - The right subtree of a node contains only nodes with values greater than the node’s value. - Both the left and right subtrees must also be binary search trees. The operations you need to perform on the BST are: 1. Insert a new value into the BST. 2. Delete a value from the BST. 3. Find the minimum value in the BST. 4. Find the maximum value in the BST. 5. Find the height of the BST. 6. Inorder traversal of the BST returning the list of values in ascending order. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of operations. The following n lines contain one of the following commands: - \\"insert x\\" where x is the value to insert (1 ≤ x ≤ 10^6) - \\"delete x\\" where x is the value to delete (1 ≤ x ≤ 10^6) - \\"find_min\\" which will output the minimum value in the BST - \\"find_max\\" which will output the maximum value in the BST - \\"find_height\\" which will output the height of the BST - \\"inorder\\" which will output the inorder traversal of the BST Output Output the results of the operations in the order they are performed. Each result should be printed on a new line. Example Input 10 insert 5 insert 3 insert 7 find_min find_max find_height inorder delete 3 find_min inorder Output 3 7 1 3 5 7 5 5 7 In this problem, you are expected to implement the binary search tree and perform all the operations efficiently. Make sure to handle edge cases, such as deleting from an empty tree or finding the minimum/maximum in an empty tree.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BST: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert(self.root, key) def _insert(self, root, key): if key < root.val: if root.left is None: root.left = TreeNode(key) else: self._insert(root.left, key) elif key > root.val: if root.right is None: root.right = TreeNode(key) else: self._insert(root.right, key) def delete(self, key): self.root = self._delete(self.root, key) def _delete(self, root, key): if root is None: return root if key < root.val: root.left = self._delete(root.left, key) elif key > root.val: root.right = self._delete(root.right, key) else: if root.left is None: return root.right elif root.right is None: return root.left temp_val = self._min_value_node(root.right).val root.val = temp_val root.right = self._delete(root.right, temp_val) return root def find_min(self): min_node = self._min_value_node(self.root) return min_node.val if min_node else None def _min_value_node(self, root): current = root while current and current.left: current = current.left return current def find_max(self): max_node = self._max_value_node(self.root) return max_node.val if max_node else None def _max_value_node(self, root): current = root while current and current.right: current = current.right return current def find_height(self): return self._find_height(self.root) def _find_height(self, root): if root is None: return -1 left_height = self._find_height(root.left) right_height = self._find_height(root.right) return 1 + max(left_height, right_height) def inorder(self): return self._inorder_traversal(self.root) def _inorder_traversal(self, root): return self._inorder_traversal(root.left) + [root.val] + self._inorder_traversal(root.right) if root else [] def process_bst_operations(operations): bst = BST() results = [] for op in operations: if op.startswith(\\"insert\\"): _, value = op.split() bst.insert(int(value)) elif op.startswith(\\"delete\\"): _, value = op.split() bst.delete(int(value)) elif op == \\"find_min\\": results.append(bst.find_min()) elif op == \\"find_max\\": results.append(bst.find_max()) elif op == \\"find_height\\": results.append(bst.find_height()) elif op == \\"inorder\\": results.append(bst.inorder()) return results"},{"question":"Write a program that simulates a simplified stock price tracker. Your task is to implement a system where multiple stock price updates are processed, and the highest and lowest prices for each stock are tracked throughout the day. Each stock is identified by its ticker symbol. Input A sequence of multiple datasets is given as input. Each dataset consists of several lines. Each line contains a stock ticker symbol (a string with up to 5 uppercase letters) and the stock price update (a real number with up to 2 decimal places). The end of the input for each dataset is indicated by the string \\"END UPDATE\\" on a separate line. Output For each dataset, output the highest and lowest prices for each stock ticker, with the ticker symbols sorted in alphabetical order. Each stock\'s highest and lowest prices should be displayed on a single line in the format: \\"TICKER SYMBOL: HIGHEST PRICE LOWEST PRICE\\". Separate outputs for different datasets with an empty line. Example Input AAPL 150.25 GOOG 2765.54 AAPL 148.75 MSFT 299.60 GOOG 2768.89 AAPL 151.30 MSFT 298.00 END UPDATE TSLA 742.50 AMZN 3344.55 TSLA 739.25 AMZN 3360.45 END UPDATE Output AAPL: 151.30 148.75 GOOG: 2768.89 2765.54 MSFT: 299.60 298.00 AMZN: 3360.45 3344.55 TSLA: 742.50 739.25 Note: Ensure to handle duplicated ticker symbols and appropriately update their highest and lowest prices with each new input.","solution":"def process_stock_prices(input_data): Processes the stock price updates and returns the highest and lowest prices for each stock. Args: input_data (str): A string containing multiple datasets of stock price updates. Returns: str: A string containing the highest and lowest prices for each stock, with stocks sorted alphabetically. lines = input_data.strip().split(\\"n\\") datasets = [] current_dataset = [] for line in lines: if line == \\"END UPDATE\\": datasets.append(current_dataset) current_dataset = [] else: current_dataset.append(line) results = [] for dataset in datasets: stock_prices = {} for record in dataset: ticker, price = record.split() price = float(price) if ticker not in stock_prices: stock_prices[ticker] = {\'highest\': price, \'lowest\': price} else: if price > stock_prices[ticker][\'highest\']: stock_prices[ticker][\'highest\'] = price if price < stock_prices[ticker][\'lowest\']: stock_prices[ticker][\'lowest\'] = price sorted_stocks = sorted(stock_prices.items()) dataset_result = [] for ticker, prices in sorted_stocks: dataset_result.append(f\\"{ticker}: {prices[\'highest\']:.2f} {prices[\'lowest\']:.2f}\\") results.append(\\"n\\".join(dataset_result)) return \\"nn\\".join(results)"},{"question":"You are given an array of integers and a target sum. Your task is to find the number of pairs of distinct indices (i, j) in the array such that their corresponding elements add up to the given target sum. Note that the indices (i, j) and (j, i) are considered the same pair and should not be counted separately. Constraints: * 2 leq n leq 10^5 * -10^9 leq array[i] leq 10^9 * -10^9 leq target leq 10^9 Input: Input is given from Standard Input in the following format: n target array[0] array[1] ... array[n-1] Output: Print a single integer which is the number of pairs of indices whose elements add up to the target sum. Examples: Input: 5 9 2 7 11 15 3 Output: 1 Input: 4 0 1 -1 2 -2 Output: 2","solution":"def count_pairs_with_sum(n, target, array): Returns the number of pairs (i, j) such that array[i] + array[j] = target. from collections import defaultdict count = 0 seen = defaultdict(int) for num in array: complement = target - num if complement in seen: count += seen[complement] seen[num] += 1 return count # Driver code to read from standard input, if needed if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) target = int(data[1]) array = list(map(int, data[2:2+n])) print(count_pairs_with_sum(n, target, array))"},{"question":"Given a list of integers where each integer appears twice except for one integer which appears only once, write a function to find and return the integer that appears only once. Your solution should have linear runtime complexity and use constant extra space. Input The first line contains a single integer n (1 ≤ n ≤ 10^5), representing the number of elements in the list. The second line contains n integers where each integer appears exactly twice except for one integer which appears only once. Output Print the integer that appears only once. Examples Input 7 4 1 2 1 2 4 3 Output 3 Input 5 10 20 10 30 20 Output 30","solution":"def single_number(nums): Returns the integer that appears only once in the list. Each other integer appears exactly twice. result = 0 for num in nums: result ^= num return result"},{"question":"You are given a maze in the form of a grid with dimensions n x m. Some cells in the grid are blocked and some are open. You need to determine if there exists a path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). The grid is represented by a 2D array of integers where 1 represents a blocked cell and 0 represents an open cell. You can only move up, down, left, or right. Write a function that determines if a path exists and returns “YES” if it does and “NO” otherwise. Function signature: ```python def find_path(n: int, m: int, grid: List[List[int]]) -> str: ``` # Input - n: Integer, the number of rows in the grid (1 ≤ n ≤ 1000). - m: Integer, the number of columns in the grid (1 ≤ m ≤ 1000). - grid: 2D list of integers, representing the maze where 1 is a blocked cell and 0 is an open cell. # Output - The function should return a string \\"YES\\" if a path exists from (0, 0) to (n-1, m-1) and \\"NO\\" otherwise. # Example Input ``` n = 5 m = 5 grid = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 0, 0], [0, 0, 0, 0, 0] ] ``` Output ``` \\"YES\\" ``` Input ``` n = 3 m = 3 grid = [ [0, 1, 0], [1, 1, 0], [0, 0, 0] ] ``` Output ``` \\"NO\\" ``` # Note In the first example, there is a path from (0, 0) to (n-1, m-1). In the second example, no such path exists due to blocked cells. # Constraints - The grid is always rectangular, meaning n and m form a valid grid. - Always assume that both the start cell (0, 0) and the end cell (n-1, m-1) are open, i.e., they will contain a 0.","solution":"from typing import List def find_path(n: int, m: int, grid: List[List[int]]) -> str: if grid[0][0] == 1 or grid[n - 1][m - 1] == 1: return \\"NO\\" def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == 0 def dfs(x, y): if (x, y) == (n - 1, m - 1): return True grid[x][y] = 1 # mark as visited for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: # up, down, left, right nx, ny = x + dx, y + dy if is_valid(nx, ny) and dfs(nx, ny): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"A delivery company operates in a metropolitan city with n unique package delivery points and m distinct delivery vehicles. Each delivery point i has a unique address and initially, no vehicles have been assigned to any delivery points. The operations within the company\'s system can be of four types: 1. The company relocates vehicles between two delivery points pi and qi. After this operation, all the vehicles that were previously assigned to delivery point qi will instead be assigned to point pi, and point qi will be devoid of any vehicles. 2. The company reorganizes delivery resources by merging delivery points pi and qi. After this operation, all the vehicles that were initially assigned to point qi will also be assigned to point pi (in addition to its current vehicles), and point qi ceases to exist. 3. Vehicles arrive at a delivery point ri with a total of ki vehicles. After this operation, the number of vehicles at delivery point ri increases by ki. 4. The company needs to query the status of a delivery point si to check the number of vehicles currently assigned there. Your task is to process the changes and queries regarding the delivery company\'s operations and provide the required results for the queries asking for the number of vehicles at specific delivery points. **Input** The first line contains two integers, n and o (1 ≤ n, o ≤ 5·10^5) — the number of delivery points and the number of operations, respectively. Next o lines contain the operations, each of them is given in one of the following formats: * \\"R pi qi\\" — relocate vehicles between delivery points; * \\"G pi qi\\" — merge delivery points; * \\"V ri ki\\" — vehicles arrive at delivery point; * \\"S si\\" — query the number of vehicles at a delivery point. All the numbers in the operations are positive integers and do not exceed n. It is guaranteed that at the moment of the operation the delivery points exist. **Output** Print the number of vehicles at the specified delivery point in each query. **Examples** **Input** ``` 3 6 V 1 5 S 1 R 1 2 G 2 3 V 1 10 S 2 ``` **Output** ``` 5 0 ``` **Explanation** In the first example: * In the first operation, delivery point 1 receives 5 vehicles. * The second operation queries the number of vehicles at delivery point 1, which is now 5. * The third operation relocates vehicles from delivery point 2 to delivery point 1. Since delivery point 2 has no vehicles, there\'s no change. * The fourth operation merges delivery point 3 into delivery point 2. Since delivery point 3 has no vehicles and delivery point 2 has no vehicles, there\'s no change. * The fifth operation adds 10 vehicles to delivery point 1. Now, delivery point 1 has a total of 15 vehicles. * The sixth operation queries the number of vehicles at delivery point 2, which is 0.","solution":"class DeliveryManager: def __init__(self, n): # Initially, all delivery points have 0 vehicles. self.vehicles = [0] * (n + 1) def relocate(self, pi, qi): self.vehicles[pi] += self.vehicles[qi] self.vehicles[qi] = 0 def merge(self, pi, qi): self.vehicles[pi] += self.vehicles[qi] self.vehicles[qi] = 0 def arrive(self, ri, ki): self.vehicles[ri] += ki def status(self, si): return self.vehicles[si]"},{"question":"Nina is learning about strings and finds them fascinating. She comes across an interesting operation called a \\"string shuffle\\". A string shuffle operation on a string involves arranging its characters in a different order to form a new string. Nina wonders how many unique strings she can create by performing the string shuffle operation on a given string. Help Nina by writing a program that counts the number of unique strings that can be generated by shuffling the characters of her string. Input - The input consists of a single string s (1 ≤ |s| ≤ 17). The string s contains only lowercase English letters. Output - Print a single integer — the number of unique strings that can be created by shuffling the characters of s. Examples Input aab Output 3 Input abc Output 6 Input aaaa Output 1 Note In the first example, there are three unique strings that can be formed by shuffling characters of \\"aab\\": \\"aab\\", \\"aba\\", and \\"baa\\". In the second example, there are six unique strings that can be formed by shuffling characters of \\"abc\\": \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", and \\"cba\\". In the third example, no matter how we shuffle the characters, the result is always \\"aaaa\\".","solution":"from itertools import permutations def count_unique_shuffles(s): Returns the number of unique strings that can be created by shuffling the characters of the input string s. # Generate all possible permutations of the string perm = set(permutations(s)) # The length of the set gives the number of unique permutations return len(perm)"},{"question":"Masha is planning to organize a series of training sessions for new recruits at her company. Each training session covers a specific topic and has a predefined duration in hours. Masha wants to ensure that each recruit completes all the training sessions, but no recruit should train for more than a certain number of hours per week to maintain a healthy work-life balance. Given the number of training sessions n, the number of recruits m, the maximum hours h a recruit can train in a week, and the duration of each session di, determine the minimum number of weeks required to complete all the training sessions. Input The first line of the input contains three integers n, m, and h (1 ≤ n, m ≤ 100 000, 1 ≤ h ≤ 1 000 000) — the number of training sessions, the number of recruits and the maximum hours a recruit can train in a week. Each of the next n lines contains one integer di (1 ≤ di ≤ 1 000 000) — the duration of the i-th training session. Output Print an integer — the minimum number of weeks required to ensure all recruits complete all the training sessions. Examples Input 5 2 10 5 3 4 6 7 Output 7 Input 3 3 5 2 3 4 Output 3 Note In the first sample, the total duration of all training sessions is 25 hours. With two recruits available, each recruit can train for a maximum of 10 hours per week, thus taking at least 5 weeks to complete 20 hours. The remaining 5 hours will require an additional week, resulting in a total of 7 weeks. In the second sample, each recruit can only train for 5 hours per week. Even though there are three recruits, each recruit needs three weeks to finish their training sessions which sum up to 9 hours.","solution":"import math def min_weeks_to_complete_training(n, m, h, durations): Determine the minimum number of weeks required to ensure all recruits complete all the training sessions. :param n: Number of training sessions :param m: Number of recruits :param h: Maximum hours a recruit can train in a week :param durations: List of durations of each training session :return: Minimum number of weeks required total_duration = sum(durations) weeks_required = math.ceil(total_duration / (m * h)) return weeks_required"},{"question":"In a magical land, there are enchanted circles that can be multiplied together to create new powerful circles. Each circle has a unique size represented by its radius. To multiply two circles, you can create a new circle where its radius is the product of the radii of the two original circles. You have been tasked to find the largest possible size of the resultant circle by multiplying exactly two circles from a given list of circle radii. Input: A single line containing an integer n (the number of circles) followed by n integers representing the radii of these circles. Output: Largest possible radius of the resultant circle obtained by multiplying exactly two circles from the list. Print the result as a floating-point number with 2 digits after the decimal point. Constraints: 2 ≤ n ≤ 100 1 ≤ radius of each circle ≤ 1000 SAMPLE INPUT 4 3 5 2 8 SAMPLE OUTPUT 40.00 Explanation: From the sample input, the largest possible radius is obtained by multiplying the largest two radii, which are 5 and 8, resulting in a circle of radius 40.00.","solution":"def largest_circle_radius(input_str): input_list = list(map(int, input_str.split())) n = input_list[0] radii = input_list[1:] # Sort the radii to get the two largest radii.sort() largest = radii[-1] second_largest = radii[-2] # Compute the product largest_radius = largest * second_largest # Return formatted result return f\\"{largest_radius:.2f}\\""},{"question":"Alice is organizing a marathon and needs to track the time taken by each participant to complete the race. You are required to help her by writing a program that processes the times taken by the participants and finds the maximum difference in completion time between any two participants. Input The first line contains an integer n (2 ≤ n ≤ 100) — the number of participants. Each of the next n lines contains one integer ti (1 ≤ ti ≤ 10000) — the time taken by the i-th participant to complete the race in minutes. Output Print a single integer — the maximum difference in completion time between any two participants. Examples Input 5 120 85 140 95 110 Output 55 Input 3 200 150 180 Output 50 Note In the first sample, the maximum difference between the completion times is 140 (fastest) and 85 (slowest), so the output is 140 - 85 = 55. In the second sample, the maximum difference between the completion times is 200 (fastest) and 150 (slowest), so the output is 200 - 150 = 50.","solution":"def max_time_difference(n, times): Returns the maximum difference in completion time between any two participants. max_time = max(times) min_time = min(times) return max_time - min_time"},{"question":"Write a function that calculates the maximum possible profit from buying and selling a single stock given its prices over a number of days. The function should take a list of integers representing the stock prices on consecutive days and return the maximum profit achievable. If no profit is possible, return 0. Constraints * 1 leq len(prices) leq 100,000 * 0 leq prices[i] leq 10,000 Input The input data is given in a single line, consisting of space-separated integers representing the stock prices. Output The function should return a single integer, the maximum profit. Example Input 7 1 5 3 6 4 Output 5 Explanation In the example, buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. Another Example Input 7 6 4 3 1 Output 0 Explanation In this case, no transaction is done, and the max profit = 0.","solution":"def max_profit(prices): Returns the maximum profit achievable from buying and selling a single stock given its prices over a number of days. If no profit is possible, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given a matrix of dimension n by m filled with integers. Your task is to find the sum of the greatest path from the top-left corner to the bottom-right corner. A path is defined as a sequence of moves where you can move either right or down at each step. The path must start at the top-left corner and end at the bottom-right corner. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the matrix. Each of the next n lines contains m integers — the elements of the matrix. The integers in the matrix are bounded by (-1000 ≤ matrix[i][j] ≤ 1000). Output Print the sum of the greatest path from the top-left corner to the bottom-right corner of the matrix. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Input 2 2 -1 -2 -3 -4 Output -7","solution":"def max_path_sum(matrix): n = len(matrix) m = len(matrix[0]) # Create a dp array to store the maximum path sums dp = [[0] * m for _ in range(n)] # Initialize the dp array dp[0][0] = matrix[0][0] # Fill the edges for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the dp array for the rest of the cells for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[n-1][m-1]"},{"question":"Create a function that takes an array of integers as input and rearranges the array such that all integers in the array are moved to the front if they are even and moved to the back if they are odd. The relative order of the even and odd numbers should be preserved from the original array. The function should return the rearranged array. Constraints * The input array can have between 1 and 100,000 integers. * All integers in the array can range from -1,000,000 to 1,000,000. Input Input will be given as a single array: > [array] Output Return the modified array with evens at the front and odds at the back while preserving relative order. Examples Input [3, 1, 2, 4] Output [2, 4, 3, 1] Input [0, -2, 5, -3] Output [0, -2, 5, -3]","solution":"def rearrange_array(arr): Rearranges the array such that all even integers are moved to the front and all odd integers are moved to the back while preserving their relative order. Args: arr (list): List of integers. Returns: list: Rearranged list with evens at the front and odds at the back. even = [x for x in arr if x % 2 == 0] odd = [x for x in arr if x % 2 != 0] return even + odd"},{"question":"You are given a binary tree with n nodes, each node having a unique value from 1 to n. The tree is represented by an array parent, where parent[i] represents the parent node of the (i+1)-th node, with parent[0] being -1 since it represents the root. The task is to find the maximum distance (in terms of number of edges) between any two nodes in the tree. Constraints: * 2 ≦ n ≦ 10^5 Input: The input is given from Standard Input in the following format: n parent_1 parent_2 ... parent_{n-1} Output: Print the maximum distance between any two nodes in the binary tree. Examples: Input: 5 -1 1 1 2 2 Output: 3 Input: 3 -1 1 1 Output: 2","solution":"from collections import defaultdict, deque def max_distance_in_tree(n, parent): # Create graph from parent list tree = defaultdict(list) for child, par in enumerate(parent, 1): if par != -1: tree[par].append(child) tree[child].append(par) def bfs(start): visited = [-1] * (n + 1) # Distance array visited[start] = 0 q = deque([start]) furthest_node, max_dist = start, 0 while q: node = q.popleft() dist = visited[node] for neighbor in tree[node]: if visited[neighbor] == -1: # Not visited visited[neighbor] = dist + 1 q.append(neighbor) if visited[neighbor] > max_dist: max_dist, furthest_node = visited[neighbor], neighbor return furthest_node, max_dist # Run bfs from an arbitrary node to find one endpoint of the diameter node_a, _ = bfs(1) # Run bfs from node_a to find the maximum distance to any node _, distance = bfs(node_a) return distance if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) parent = list(map(int, data[1:])) print(max_distance_in_tree(n, parent))"},{"question":"Alice loves rectangular grids and numbers. She decided to create a game involving these two. The game is played on an m x n grid, where each cell initially contains a number. Alice can perform the following operation any number of times: - Select a subrectangle from the grid and add the same integer x (positive or negative) to each element of the subrectangle. Alice wants all numbers in the grid to be equal after some operations. Your task is to write a program that determines if it\'s possible to make all numbers in the grid equal using the above operation, and if so, provide a series of operations to achieve it. # Input The input consists of multiple test cases: - The first line of input contains a single integer t, the number of test cases. - For each test case: - The first line contains two integers m and n (1 ≤ m, n ≤ 100), the dimensions of the grid. - The next m lines contain n integers each, representing the initial state of the grid. Each element in the grid is between -10^6 and 10^6. # Output For each test case: - If it\'s possible to make all numbers in the grid equal, output \\"YES\\" followed by the operations needed. - Each operation should be described on a separate line in the format: `r1 c1 r2 c2 x`, where (r1, c1) and (r2, c2) represent the top-left and bottom-right corners of the subrectangle, and x is the number added to each element of the subrectangle. - If it\'s not possible, output \\"NO\\". # Example Input ``` 2 2 3 1 2 3 4 5 6 2 2 1 2 3 4 ``` Output ``` NO YES 1 1 2 2 -1 ``` # Explanation In the first test case, it is not possible to make all numbers in the grid equal by adding the same integer to subrectangles. In the second test case, we can make all elements equal by subtracting 1 from each element in the entire grid. # Note - If there are multiple solutions to make all numbers in the grid equal, any valid series of operations will be accepted. - You only need to print enough operations to make the numbers equal; it is not necessary to minimize the number of operations.","solution":"def can_make_grid_equal(grid): Determines if it\'s possible to make all numbers in the grid equal. If possible, returns a list of operations to achieve it. m = len(grid) n = len(grid[0]) # Calculate the modulo with respect to the first element in the grid. base = grid[0][0] differences = set(grid[i][j] - base for i in range(m) for j in range(n)) # If the differences set contains only one element, it\'s possible to make them equal if len(differences) == 1: operations = [(1, 1, m, n, base - grid[0][0])] return \\"YES\\", operations else: return \\"NO\\", [] def process_grids(t, test_cases): results = [] for case in test_cases: m, n, grid = case result, operations = can_make_grid_equal(grid) if result == \\"YES\\": results.append(\\"YES\\") for op in operations: results.append(f\\"{op[0]} {op[1]} {op[2]} {op[3]} {op[4]}\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers representing the height of buildings on a street. The width of each building is 1 unit. Using these buildings, you need to determine the maximum area of a rectangle that can be formed by selecting consecutive buildings, where the height of the rectangle is determined by the shortest building among the selected. Consider an example where buildings are given by the array [2, 1, 5, 6, 2, 3]. In this case, the maximum rectangle area is 10, which can be obtained by selecting the buildings with heights [5, 6], giving a rectangle of width 2 and height 5. Write a function that takes an array of integers as input and returns the maximum area of a rectangle that can be formed using consecutive buildings\' heights. Input A single line contains n integers, where 1 ≤ n ≤ 10^5. Each integer corresponds to the height of a building and is between 1 and 10^4. Output A single line containing one integer — the maximum area of the rectangle that can be formed. Example Input 2 1 5 6 2 3 Output 10 Note In the provided example, the optimal solution is to select buildings with heights [5, 6], resulting in a maximal rectangle with an area of 10, calculated as 5 (height) * 2 (width). Your task is to implement an algorithm that efficiently computes the maximum rectangular area in a list of building heights and handles the constraints given.","solution":"def max_rectangle_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given an array of integers. You need to determine whether you can partition this array into two subsets such that the sum of elements in both subsets is the same. Your task is to implement a function that takes an array of integers and returns a boolean indicating whether such a partition is possible. Input The input consists of an array of integers a where 1 ≤ |a| ≤ 200. Each integer in the array is between 1 and 100 inclusive. Output Return \\"true\\" (without quotes), if you can partition the array into two subsets with equal sum, otherwise return \\"false\\" (without quotes). Example Input [1, 5, 11, 5] Output true Explanation The array can be partitioned as [1, 5, 5] and [11]. Input [1, 2, 3, 5] Output false Explanation The array cannot be partitioned into two subsets with equal sum.","solution":"def can_partition(nums): Determine if the array can be partitioned into two subsets with equal sum. total_sum = sum(nums) # If the total sum is odd, we can\'t partition it into two equal subsets if total_sum % 2 != 0: return \\"false\\" target = total_sum // 2 n = len(nums) dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return \\"true\\" if dp[target] else \\"false\\""},{"question":"Recipe Ingredient Calculator Everyone loves food, and so does Chef Anna. Trying out new recipes is her hobby. However, adjusting the ingredient quantities as per the number of servings required is a tedious task. Hence, she has approached you for help. Your responsibility is to write a program that calculates the quantity of each ingredient needed for the desired number of servings. Each recipe specifies the quantities of different ingredients required for a certain number of servings. Input The input consists of multiple recipes. Each recipe is defined in the following format: > n > ingredient_name quantity unit ingredient_name quantity unit ... number_of_servings > ingredient_name quantity unit ingredient_name quantity unit ... number_of_servings > ... > ingredient_name quantity unit ingredient_name quantity unit ... number_of_servings The integer n in the first line is the number of recipes. From the next line, each recipe is described in a single line where ingredient_name, quantity, and unit are written as a triple for each ingredient, followed by the base number of servings. The ingredient_name is a string without spaces, the quantity is a float, and the unit is a string representing the measurement unit (for example, \\"g\\" for grams, \\"ml\\" for milliliters, etc.). The input recipes are followed by multiple lines requesting ingredient quantities for different numbers of servings, formatted as: > recipe_index m The integer recipe_index corresponds to the recipe line (1-indexed) and m represents the desired number of servings. The end of input is indicated by n = 0. Output For each request, output the adjusted quantity of each ingredient in the format: > ingredient_name quantity unit Output ingredients in the order they appear in the recipe, and values should be formatted to two decimal places. Sample Input 2 flour 200 g sugar 100 g butter 50 g 4 pasta 250 g tomato 2 unit cheese 100 g 2 1 8 2 3 0 Sample Output flour 400.00 g sugar 200.00 g butter 100.00 g pasta 375.00 g tomato 3.00 unit cheese 150.00 g Example Input 2 flour 200 g sugar 100 g butter 50 g 4 pasta 250 g tomato 2 unit cheese 100 g 2 1 8 2 3 0 Output flour 400.00 g sugar 200.00 g butter 100.00 g pasta 375.00 g tomato 3.00 unit cheese 150.00 g","solution":"def parse_recipes_and_requests(data): lines = data.splitlines() n = int(lines[0]) recipes = [] index = 1 for _ in range(n): line_parts = lines[index].split() index += 1 num_servings = int(line_parts[-1]) ingredients = [] for i in range(0, len(line_parts) - 1, 3): ingredient = (line_parts[i], float(line_parts[i+1]), line_parts[i+2]) ingredients.append(ingredient) recipes.append((ingredients, num_servings)) requests = [] while index < len(lines): line = lines[index].strip() if line == \'0\': break recipe_index, m = map(int, line.split()) requests.append((recipe_index - 1, m)) index += 1 return recipes, requests def calculate_ingredients(recipes, requests): results = [] for recipe_index, desired_servings in requests: ingredients, base_servings = recipes[recipe_index] factor = desired_servings / base_servings adjusted_ingredients = [] for name, quantity, unit in ingredients: adjusted_quantity = quantity * factor adjusted_ingredients.append((name, adjusted_quantity, unit)) results.append(adjusted_ingredients) return results def format_output(results): output = [] for ingredients in results: for name, quantity, unit in ingredients: output.append(f\\"{name} {quantity:.2f} {unit}\\") return output def recipe_calculator(data): recipes, requests = parse_recipes_and_requests(data) results = calculate_ingredients(recipes, requests) output = format_output(results) return \\"n\\".join(output)"},{"question":"You\'ve been hired by a logistics company to design an algorithm for optimizing their truck loading processes. The company operates a fleet of trucks, each with a maximum load capacity. They need to load a series of packages of varying weights onto the trucks in a way that maximizes the amount of cargo transported per journey, while ensuring no truck is overloaded. For this problem, you are given the maximum load capacity C of the trucks and an array of integers representing the weights of the packages that need to be loaded. You may assume that each truck has the same load capacity, and each package must fully fit on a truck without partial loads. Design an algorithm that calculates the minimum number of trucks needed to transport all the given packages. Input: - The first line contains two integers `n` and `C` (1 ≤ n ≤ 10^5, 1 ≤ C ≤ 10^9) — the number of packages and the maximum load capacity of a single truck. - The second line contains n integers `w1, w2, ..., wn` (1 ≤ wi ≤ 10^9) — the weights of the packages. Output: - Output a single integer, the minimum number of trucks required to transport all the packages. Example: Input: 7 10 2 3 5 7 1 4 5 Output: 3 Explanation: At least 3 trucks are needed to transport all the packages: - Truck 1: 7, 3 - Truck 2: 5, 5 - Truck 3: 4, 1, 2","solution":"import itertools def min_trucks(n, C, weights): Returns the minimum number of trucks required to transport all packages. Parameters: - n (int): Number of packages - C (int): Maximum load capacity of a single truck - weights (list of int): Weights of the packages Returns: - (int): Minimum number of trucks required weights.sort(reverse=True) if not weights: return 0 trucks = [] for weight in weights: placed = False for truck in trucks: if sum(truck) + weight <= C: truck.append(weight) placed = True break if not placed: trucks.append([weight]) return len(trucks)"},{"question":"Example Input 3 2 1 3 2 2 1 Output 3","solution":"def count_occurrences(list1: list, list2: list) -> dict: Returns a dictionary where the keys are elements from list2 and the values are the counts of these elements in list1. counts = {elem: 0 for elem in list2} for elem in list1: if elem in counts: counts[elem] += 1 return counts"},{"question":"Sarah enjoys playing a card game that involves a unique scoring system. In this game, each card has a value and a suit. The goal is to calculate the total score based on a specific set of rules: 1. If a card has a value of 2 through 10, its score is the numeric value of the card. 2. If a card has a value of Jack (J), Queen (Q), King (K), or Ace (A), they have values of 11, 12, 13, and 14 respectively. 3. Besides the face value, there are additional bonuses: - Hearts (H) multiply the card’s value by 2. - Spades (S) multiply the card’s value by 3. - Diamonds (D) add 5 to the card’s value. - Clubs (C) add no bonus to the card’s value. Sarah wants you to write a program to calculate the score of her card collection. # Input - The first line contains one integer `n` (1 ≤ n ≤ 1000) – the number of cards. - The next `n` lines describe each card with two elements: the value of the card (either a number between 2 and 10 or one of J, Q, K, A), followed by a character representing the suit (one of H, S, D, C). # Output - Output one integer – the total score calculated based on the described rules. # Example Input ``` 5 2 H 3 S A D 10 C Q H ``` Output ``` 155 ``` # Explanation - 2 of Hearts: 2 * 2 = 4 - 3 of Spades: 3 * 3 = 9 - Ace of Diamonds: 14 + 5 = 19 - 10 of Clubs: 10 - Queen of Hearts: 12 * 2 = 24 Total score: 4 + 9 + 19 + 10 + 24 = 66","solution":"def calculate_score(card_inputs): value_mapping = {\'J\': 11, \'Q\': 12, \'K\': 13, \'A\': 14} suit_multipliers = {\'H\': 2, \'S\': 3, \'D\': 5, \'C\': 0} def score_card(value, suit): if value in value_mapping: card_value = value_mapping[value] else: card_value = int(value) if suit == \'H\': return card_value * 2 elif suit == \'S\': return card_value * 3 elif suit == \'D\': return card_value + 5 elif suit == \'C\': return card_value score = 0 for card in card_inputs: value, suit = card.split() score += score_card(value, suit) return score # Example usage: # card_inputs = [\\"2 H\\", \\"3 S\\", \\"A D\\", \\"10 C\\", \\"Q H\\"] # print(calculate_score(card_inputs)) # Output: 66"},{"question":"There is a kingdom called Zypheria which consists of n cities connected by m bidirectional roads. The cities are labeled from 1 to n, and each road has an associated travel cost. The Zypherian government wants to find the minimum travel cost to visit all cities starting from city 1. Given the list of cities and roads, determine the minimum cost to travel to each city from city 1 using the shortest paths. If a city is not reachable from city 1, the cost should be considered as -1. Input The first line contains two integers n and m (2 ≤ n ≤ 10^5, n - 1 ≤ m ≤ 10^5), the number of cities and the number of roads, respectively. The i-th of the following m lines contains three integers x_i, y_i, and c_i (1 ≤ x_i, y_i ≤ n, x_i ≠ y_i, 1 ≤ c_i ≤ 10^9), representing a bidirectional road between cities x_i and y_i with a travel cost of c_i. It is guaranteed that at least one road connects city 1 to the rest of the cities. Output Print n integers where the i-th integer is the minimum cost to travel from city 1 to city i. If a city is not reachable from city 1, the cost should be -1. Examples Input 5 6 1 2 3 1 3 2 2 3 4 2 4 1 3 4 1 4 5 5 Output 0 3 2 3 8 Input 4 3 1 2 4 1 3 3 3 4 5 Output 0 4 3 8","solution":"import heapq def minimum_travel_cost(n, m, roads): Returns the minimum cost to travel from city 1 to each city. If a city is not reachable from city 1, the cost is -1. graph = {i: [] for i in range(1, n+1)} for x, y, c in roads: graph[x].append((c, y)) graph[y].append((c, x)) min_cost = {i: float(\'inf\') for i in range(1, n+1)} min_cost[1] = 0 pq = [(0, 1)] # (cost, city) while pq: current_cost, u = heapq.heappop(pq) if current_cost > min_cost[u]: continue for edge_cost, v in graph[u]: new_cost = current_cost + edge_cost if new_cost < min_cost[v]: min_cost[v] = new_cost heapq.heappush(pq, (new_cost, v)) return [min_cost[i] if min_cost[i] != float(\'inf\') else -1 for i in range(1, n+1)]"},{"question":"A company is organizing a series of team-building activities spread across different locations. Each activity has different starting and ending times and activities can be attended only if they do not overlap in time. The goal is to maximize the number of non-overlapping activities one can attend. You are given N activities, each represented with a start time and an end time. Your task is to determine the maximum number of non-overlapping activities that can be attended. Constraints * All input values are integers. * 1 leq N leq 10^5 * 1 leq start_i < end_i leq 10^9 Input The input is given from Standard Input in the following format: N start_1 end_1 start_2 end_2 : start_N end_N Output Print a single integer representing the maximum number of non-overlapping activities that can be attended. Examples Input 3 1 4 2 3 3 5 Output 2 Input 4 5 9 1 2 3 4 0 6 Output 3","solution":"def max_activities(N, activities): Returns the maximum number of non-overlapping activities that can be attended. Args: N : int : Number of activities. activities : list of tuples : Each tuple contains the start and end times of an activity. Returns: int : Maximum number of non-overlapping activities. # Sort activities based on their end times activities.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in activities: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"Drake loves solving puzzles. He recently came across a variant of the classic \\"connect the dots\\" game. This game is played on an NxN grid where each cell is either empty (denoted by a \'.\'), part of a potential path (denoted by a \'+\'), or an obstacle (denoted by a \'#\'). The goal of the game is to determine if there is a continuous path of \'+\' characters starting from the top-left cell (0,0) to the bottom-right cell (N-1,N-1). The path can only move horizontally or vertically and cannot go through cells marked as obstacles. Drake needs your help to figure out if there is such a path in the given grid. Can you help him determine that? Input The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the size of the grid. The next N lines each contain N characters, representing the NxN grid. Output For each test case, print \\"YES\\" if a path exists from the top-left to the bottom-right cell, and \\"NO\\" otherwise. Constraints 1 ≤ T ≤ 100 2 ≤ N ≤ 20 Example Input: 2 4 .+.# .++. #.++ #.++ 3 +.# .+. #.# Output: YES NO Explanation Test #1: A path exists from (0,0) to (3,3): (0,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3). Test #2: There is no path from (0,0) to (2,2) due to the obstacles.","solution":"def is_path_possible(grid): N = len(grid) def dfs(x, y, visited): if x < 0 or y < 0 or x >= N or y >= N or grid[x][y] == \'#\' or visited[x][y]: return False if x == N-1 and y == N-1: return True visited[x][y] = True # Check right, down, left, up if (dfs(x+1, y, visited) or dfs(x, y+1, visited) or dfs(x-1, y, visited) or dfs(x, y-1, visited)): return True return False if grid[0][0] == \'#\' or grid[N-1][N-1] == \'#\': return False visited = [[False]*N for _ in range(N)] return dfs(0, 0, visited) def solve_puzzles(T, cases): results = [] for t in range(T): N, grid = cases[t] results.append(\\"YES\\" if is_path_possible(grid) else \\"NO\\") return results"},{"question":"Eva loves numbers and is particularly fascinated by palindromic numbers - numbers that read the same forward and backward. One day, she decided to create a challenge for herself: finding the smallest palindromic number that is larger than a given integer N. A palindrome is a sequence that reads the same backward as forward, such as 121, 1331, or 12321. Write a program to help Eva find this smallest palindromic number greater than N. Input The first line contains an integer T denoting the number of test cases. Each of the following T lines contains one integer N. Output For each test case, output a single line containing the smallest palindromic number greater than N. Constraints 1 ≤ T ≤ 5 0 ≤ N ≤ 10^6 Example Input: 2 123 99 Output: 131 101 Explanation Example case 1. The smallest palindromic number greater than 123 is 131. Example case 2. The smallest palindromic number greater than 99 is 101.","solution":"def is_palindrome(num): Check if a given number is a palindrome. return str(num) == str(num)[::-1] def next_palindrome(N): Find the smallest palindromic number greater than N. N += 1 while not is_palindrome(N): N += 1 return N def find_next_palindromes(test_cases): results = [] for N in test_cases: results.append(next_palindrome(N)) return results"},{"question":"You are given a sequence of n integers, a1, a2, ..., an. You need to modify the sequence such that each element is equal to the sum of the previous k elements. For example, if k=3, a new sequence will be b1, b2, ..., bn where: - b1 = a1 - b2 = a1 + a2 - b3 = a1 + a2 + a3 - b4 = a2 + a3 + a4 - ... The condition is applied in a cyclic manner, meaning for elements at the end of the array, it should wrap around to the beginning of the sequence when summing. You are required to print the resulting modified sequence. Input The first line contains two integers n and k (1 ≤ n, k ≤ 1000) – the length of the sequence and the number of elements to sum, respectively. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000), representing the original sequence. Output Output a single line containing n integers, the modified sequence. Examples Input 4 2 1 2 3 4 Output 1 3 5 7 Input 5 3 1 2 3 4 5 Output 1 3 6 9 12 Input 3 1 3 3 3 Output 3 3 3 Explanation In the first test case, k=2: - b1 = a1 = 1 - b2 = a1 + a2 = 1 + 2 = 3 - b3 = a2 + a3 = 2 + 3 = 5 - b4 = a3 + a4 = 3 + 4 = 7 In the second test case, k=3: - b1 = a1 because there are no elements before it - b2 = a1 + a2 because there is only one element before it - b3 = a1 + a2 + a3 because there are two elements before it - b4 = a2 + a3 + a4 as it completes k elements - b5 = a3 + a4 + a5 as it moves forward – sum of the last k elements.","solution":"def modify_sequence(n, k, a): Modifies the sequence such that each element is the sum of the previous k elements in a cyclic manner. :param n: Length of the sequence (integer) :param k: Number of elements to sum (integer) :param a: Original sequence (list of integers) :return: Modified sequence (list of integers) b = [0] * n for i in range(n): b[i] = sum(a[max(i - k + 1, 0): i + 1]) return b # Example usage with print statements if __name__ == \\"__main__\\": n, k = 4, 2 a = [1, 2, 3, 4] print(modify_sequence(n, k, a)) # Should print [1, 3, 5, 7] n, k = 5, 3 a = [1, 2, 3, 4, 5] print(modify_sequence(n, k, a)) # Should print [1, 3, 6, 9, 12] n, k = 3, 1 a = [3, 3, 3] print(modify_sequence(n, k, a)) # Should print [3, 3, 3]"},{"question":"A rectangular piece of land has a grid of trees. Each tree is represented by an \\"X\\" and each empty space is represented by a \\".\\". You want to create the largest possible square region of land that does not contain any trees. Write a program that finds the area of the largest square without any trees. # Input: The first line contains two integers m and n (1 ≤ m, n ≤ 1000) representing the dimensions of the rectangular grid. The next m lines contain n characters each (\'X\' or \'.\') representing the grid. # Output: Print a single integer — the area of the largest square without any trees. # Example: **Input:** ``` 3 4 ..X. .... .X.X ``` **Output:** ``` 4 ``` **Explanation:** In the given example, the largest square region without any trees has the size 2x2 (area 4). One possible 2x2 region is the top-right corner of the grid: ``` .. .. ```","solution":"def largest_square_area(m, n, grid): if m == 0 or n == 0: return 0 # Create DP table dp = [[0] * n for _ in range(m)] max_side = 0 for i in range(m): for j in range(n): if grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 # Base case for first row or column else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 # Update max_side max_side = max(max_side, dp[i][j]) # Area of the largest square return max_side * max_side"},{"question":"In a faraway kingdom, the king loves sequences of numbers. One day, he poses a challenge to his subjects: Given a sequence of N integers, find the number of special subsequences of this sequence. A special subsequence is defined as a subsequence where each element is a multiple of the previous element. Write a program to solve the king’s challenge. # Input The input consists of two lines: - The first line contains an integer N (1 ≤ N ≤ 3000), the length of the sequence. - The second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9), the sequence. # Output Output a single integer, the number of special subsequences modulo 10^9+7. # Example Input ``` 4 1 2 4 8 ``` Output ``` 15 ``` Input ``` 3 2 2 4 ``` Output ``` 7 ``` # Explanation In the first example, all possible non-empty subsequences are special because each number is a multiple of the previous one: `[1]`, `[2]`, `[4]`, `[8]`, `[1, 2]`, `[1, 4]`, `[1, 8]`, `[2, 4]`, `[2, 8]`, `[4, 8]`, `[1, 2, 4]`, `[1, 2, 8]`, `[1, 4, 8]`, `[2, 4, 8]`, `[1, 2, 4, 8]`. In the second example, the special subsequences are: `[2]`, `[2]`, `[4]`, `[2, 2]`, `[2, 4]`, `[2, 4]`, `[2, 2, 4]`.","solution":"def count_special_subsequences(N, sequence): MOD = 10**9 + 7 dp = [0] * N for i in range(N): # Start with the element itself as a subsequence dp[i] = 1 for j in range(i): if sequence[i] % sequence[j] == 0: dp[i] = (dp[i] + dp[j]) % MOD return sum(dp) % MOD def solve(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) sequence = list(map(int, data[1:])) result = count_special_subsequences(N, sequence) print(result)"},{"question":"Given a string `s`, your task is to determine the minimum number of characters that need to be removed to make the string a palindrome. A palindrome is a string that reads the same forward and backward. # Input The input consists of a single line containing the string `s` (1 ≤ length of s ≤ 1000). The string `s` consists of lower-case English letters only. # Output Output a single integer, the minimum number of characters that need to be removed from the string to make it a palindrome. # Examples Example 1 **Input** ``` abc ``` **Output** ``` 2 ``` **Explanation** Removing \'a\' and \'c\' (or \'b\', and one among \'a\' and \'b\') would result in `c` (or `b`), which is a palindrome. Example 2 **Input** ``` aab ``` **Output** ``` 1 ``` **Explanation** Removing \'b\' would result in `aa`, which is a palindrome. Example 3 **Input** ``` racecar ``` **Output** ``` 0 ``` **Explanation** The string `racecar` is already a palindrome. Example 4 **Input** ``` leetcode ``` **Output** ``` 5 ``` **Explanation** Removing the characters \'l\', \'e\', \'e\', \'t\', \'d\' will result in `coc`, which is a palindrome.","solution":"def min_deletions_to_palindrome(s): Determines the minimum number of deletions needed to make the string a palindrome. # Find the length of the longest palindromic subsequence n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) length_of_longest_palindromic_subsequence = dp[0][n - 1] return n - length_of_longest_palindromic_subsequence"},{"question":"**Task Description:** In the magical land of Codeonia, there exists a very special kind of forest called the Fibonacci Forest. In this forest, each tree has a unique property: the height of each tree is determined by Fibonacci numbers. The nth tree has a height equal to the nth Fibonacci number. Fibonacci sequence is defined as: - F(1) = 1 - F(2) = 1 - F(n) = F(n-1) + F(n-2) for n > 2 Professor Codeon, who is studying this forest, is particularly interested in the height of trees in certain ranges of the forest. He can perform the following operations: * Query the total height of trees within a specific range. * Update the height of a single tree to a new value. You are to help Professor Codeon by writing a program that performs these operations efficiently. **Input:** The first line of input contains two integers n and q (1 ≤ n ≤ 105, 1 ≤ q ≤ 105), denoting the number of trees in the Fibonacci Forest and the number of queries respectively. The second line contains n integers denoting the initial heights of the trees in the forest (heights are given by the first n Fibonacci numbers). Following this, there will be q lines, each describing a query of one of the following two types: 1. `1 i x`: Update the height of the ith tree to x. 2. `2 l r`: Query the total height of trees from index l to index r (inclusive). **Output:** For each query of the second type, output the total height of the trees in the given range. **Example:** Input: ``` 5 4 1 1 2 3 5 2 1 3 1 2 8 2 1 3 2 4 5 ``` Output: ``` 4 11 8 ``` **Note:** Initially, the heights of the trees are [1, 1, 2, 3, 5] (Fibonacci sequence). 1. The first query asks for the sum of heights from tree 1 to tree 3: 1 + 1 + 2 = 4 2. The second query updates the height of the 2nd tree to 8, so the heights become [1, 8, 2, 3, 5]. 3. The third query asks for the sum of heights from tree 1 to tree 3: 1 + 8 + 2 = 11 4. The fourth query asks for the sum of heights from tree 4 to tree 5: 3 + 5 = 8","solution":"def fib_forest(n, q, heights, queries): # Build segment tree seg_tree = [0] * (2 * n) # Initialize segment tree with array values at leaves # (starting from the middle point of seg_tree array) for i in range(n): seg_tree[n + i] = heights[i] # Build the segment tree by calculating parents for i in range(n - 1, 0, -1): seg_tree[i] = seg_tree[2 * i] + seg_tree[2 * i + 1] def update(index, value): Update the value at index and update the segment tree. idx = index + n seg_tree[idx] = value while idx > 1: idx //= 2 seg_tree[idx] = seg_tree[2 * idx] + seg_tree[2 * idx + 1] def query(l, r): Query the sum of values in range from l to r inclusive. result = 0 l += n r += n while l <= r: if l % 2 == 1: result += seg_tree[l] l += 1 if r % 2 == 0: result += seg_tree[r] r -= 1 l //= 2 r //= 2 return result results = [] for qt in queries: if qt[0] == 1: # Update operation: 1 i x _, i, x = qt update(i - 1, x) elif qt[0] == 2: # Range query operation: 2 l r _, l, r = qt results.append(query(l - 1, r - 1)) return results"},{"question":"Bob loves to collect stamps from different countries. However, Bob is worried about tracking all his stamps and making sure he knows exactly how many unique countries his collection represents. To help him out, you decide to write a program that will take a list of stamps with their country of origin and return the number of unique countries Bob has stamps from. Input The first line of the input contains a single integer t (1 ≤ t ≤ 100), the number of test cases. For each test case, the first line contains an integer n (1 ≤ n ≤ 1000) representing the number of stamps in Bob\'s collection for this particular test case. The next n lines each contain a single string s (1 ≤ |s| ≤ 100) representing the country of origin of each stamp. Output For each test case, output a single integer representing the number of unique countries Bob has stamps from. Example Input 3 6 Brazil Argentina Brazil Germany Brazil Japan 4 USA Canada Mexico USA 5 India India China China Japan Output 4 3 3 Note In the first test case of the example, Bob has stamps from 4 unique countries: Brazil, Argentina, Germany, and Japan. In the second test case, Bob has stamps from 3 unique countries: USA, Canada, and Mexico. In the third test case, Bob has stamps from 3 unique countries: India, China, and Japan.","solution":"def count_unique_countries(t, test_cases): Function to count the number of unique countries from which Bob has stamps. Parameters: t: integer, the number of test cases test_cases: list of tuples, each tuple contains: n: integer, number of stamps in Bob\'s collection for this test case stamps: list of strings, each string represents the country of origin of a stamp. Returns: list: a list of integers representing the number of unique countries for each test case. unique_counts = [] for case in test_cases: n, stamps = case unique_countries = set(stamps) unique_counts.append(len(unique_countries)) return unique_counts"},{"question":"You are working with a sequence of integers and need to perform a specific type of query on them. The sequence consists of `n` integers, and you will be provided with m queries. Each query will either update a single element of the sequence or ask for the sum of a range of elements. Here is the detailed task breakdown: 1. **Initial Input:** - The first line contains the integer `n` (1 ≤ n ≤ 10^5), the size of the sequence. - The second line contains `n` space-separated integers representing the initial sequence. 2. **Queries:** - The third line contains the integer `m` (1 ≤ m ≤ 10^5), the number of queries. - The next `m` lines contain queries, each of two types: - `1 i x`: Update the element at index `i` (1-based) to the value `x`. - `2 l r`: Output the sum of elements from index `l` to index `r` (1-based, inclusive). # Constraints: - The value of each integer in the sequence will not exceed 10^9 in absolute value. - It is guaranteed that the input will be well-formed and that each query will be valid according to the problem statement. # Output: - For each query of type `2 l r`, output the sum of the elements from index `l` to index `r` in a new line. Example: **Input:** ``` 5 1 2 3 4 5 3 2 1 3 1 2 10 2 1 3 ``` **Output:** ``` 6 14 ```","solution":"class NumArray: def __init__(self, nums): self.n = len(nums) self.nums = nums self.tree = [0] * (2 * self.n) self.build() def build(self): # Build the segment tree for i in range(self.n): self.tree[self.n + i] = self.nums[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, index, value): # Update the value at index (1-based indexing assumed for the input) index -= 1 # Convert to 0-based pos = self.n + index self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def sum_range(self, left, right): # Sum the range from left to right (1-based indexing) left -= 1 # Convert to 0-based right -= 1 # Convert to 0-based left += self.n right += self.n sum_ = 0 while left <= right: if left % 2 == 1: sum_ += self.tree[left] left += 1 if right % 2 == 0: sum_ += self.tree[right] right -= 1 left //= 2 right //= 2 return sum_ def process_queries(n, sequence, m, queries): num_array = NumArray(sequence) results = [] for query in queries: type_, i, x = query if type_ == 1: # Update operation num_array.update(i, x) elif type_ == 2: # Sum range operation results.append(num_array.sum_range(i, x)) return results"},{"question":"Given two integers, N and M , representing the number of rows and columns respectively, create a matrix of size N times M with the following rules: 1. Each cell in the matrix contains an integer. 2. The number in each cell at position (i, j) must be equal to the sum of its row index and column index, i.e., the value at (i, j) is i + j . Output the resulting matrix. Input A single line containing two integers N and M (1 leq N, M leq 100). Output The N times M matrix where each value in cell (i, j) is i + j . Output the matrix row by row, with each value separated by a space. Also, output a line break at the end. Example Input 2 3 Output ``` 0 1 2 1 2 3 ```","solution":"def create_matrix(N, M): Creates an N x M matrix where the value at cell (i, j) is equal to the sum of its row index and column index. Parameters: N (int): Number of rows M (int): Number of columns Returns: List[List[int]]: The resulting matrix matrix = [] for i in range(N): row = [] for j in range(M): row.append(i + j) matrix.append(row) return matrix def print_matrix(matrix): for row in matrix: print(\' \'.join(map(str, row)))"},{"question":"John is studying algorithms and graph theory. He has encountered a problem involving directed acyclic graphs (DAGs). The problem is as follows: Given a directed acyclic graph with `n` vertices and `m` edges, John needs to determine the number of distinct topological orderings of the graph. A topological ordering of a directed acyclic graph is a linear ordering of its vertices such that for every directed edge `uv` from vertex `u` to vertex `v`, `u` comes before `v` in the ordering. Two topological orderings are considered distinct if there exists at least one edge `uv` such that the vertices `u` and `v` are ordered differently in the two orderings. Help John solve this problem for the given `n` and `m`. Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 50, 0 ≤ m ≤ n * (n - 1) / 2). The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), denoting a directed edge from vertex `u` to vertex `v`. Output Print a single integer — the number of distinct topological orderings of the graph modulo 1000000007 (10^9 + 7). Examples Input 3 2 1 2 2 3 Output 1 Input 4 3 1 2 1 3 3 4 Output 3 Input 3 0 Output 6 Note If you are not familiar with topological orderings, please, read the following link: https://en.wikipedia.org/wiki/Topological_sorting.","solution":"MOD = 1000000007 def count_topological_orderings(n, m, edges): from functools import lru_cache from itertools import permutations graph = {i: [] for i in range(n)} indegree = {i: 0 for i in range(n)} for u, v in edges: graph[u - 1].append(v - 1) indegree[v - 1] += 1 @lru_cache(None) def dfs(mask, last): dp = 0 if mask == 0: return 1 for i in range(n): if (mask & (1 << i)) and all((mask & (1 << j)) == 0 for j in graph[i]): dp += dfs(mask ^ (1 << i), i) return dp % MOD return dfs((1 << n) - 1, -1) def solve_topological_orderings(graph_input): n, m = map(int, graph_input[0].split()) edges = [list(map(int, e.split())) for e in graph_input[1:]] return count_topological_orderings(n, m, edges) # Example usage: # graph_input = [ # \\"4 3\\", # \\"1 2\\", # \\"1 3\\", # \\"3 4\\" # ] # print(solve_topological_orderings(graph_input)) # Output: 3"},{"question":"You are given a sequence of integers where each integer represents the height of a candle. Your task is to determine the maximum number of candles that can be blown out in one breath. You can only blow out the tallest candles because shorter ones are shielded out by the tall candles. Input The input consists of two lines: The first line contains an integer n (1 ≤ n ≤ 10^5), the number of candles. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^7), where h_i is the height of the i-th candle. Output Print a single integer, the maximum number of tallest candles that can be blown out in one breath. Example Input 4 3 2 1 3 Output 2 Explanation There are four candles in total. The tallest candles have a height of 3, and there are 2 such candles, so the maximum number of candles that can be blown out in one breath is 2.","solution":"def max_candles_to_blow(n, heights): Returns the maximum number of the tallest candles that can be blown out in one breath. Parameters: n (int): The number of candles. heights (list): The heights of the candles. Returns: int: The number of tallest candles. max_height = max(heights) return heights.count(max_height)"},{"question":"Sherlock and Permutation Queries Sherlock has a hidden permutation `q` of length `m`, consisting of integers from 1 to m. Watson wants to discover where a particular integer `k` appears first in the permutation. To assist Watson, Sherlock has prepared to answer up to `⌊m/2⌋ + 5` queries about the permutation. Watson can ask a query in one of the following two formats: 1. \\"1 i\\" - asking if integer `i` appears in the permutation. 2. \\"2 i j\\" - asking how many times an integer in the range [i, j] appears in the permutation. Sherlock will respond as follows: 1. For queries of type \\"1 i\\", Sherlock will respond \\"YES\\" if `i` appears in the permutation, or \\"NO\\" otherwise. 2. For queries of type \\"2 i j\\", Sherlock will respond with the count of integers in the permutation that fall within the range `[i, j]`. Help Watson find the first occurrence of the integer `k` in the permutation within the permitted number of queries. # Input The input begins with an integer `T` (1 ≤ T ≤ 5000) — the number of test cases. For each test case: - The first line contains two integers `m` (3 ≤ m ≤ 5000) and `k` (1 ≤ k ≤ m) — the length of the permutation and the integer Watson needs to locate respectively. It\'s guaranteed that the sum of all `m` across all test cases does not exceed `2 * 10^4`. # Interaction For each query, you must read from standard input and print to standard output: 1. To print a query, use \\"1 i\\" or \\"2 i j\\" (1 ≤ i, j ≤ m). 2. To receive Sherlock\'s response, read a line of input. 3. To output the first occurrence of `k`, print \\"! pos\\" (1 ≤ pos ≤ m). Note that it takes some time for the output to be printed, hence do not forget to flush the standard output after each query to avoid exceeding the time limit. Follow the same flushing mechanism as mentioned previously. # Output After all queries or finding the first occurrence of `k`, you must output the position `pos` of the first occurrence of `k` in the permutation. If the position is not found within the allowed number of queries, output -1. # Example Input ``` 1 5 3 ``` Output ``` 1 3 YES 2 2 4 1 ! 4 ``` Explanation: In the first test case, the hidden permutation might be [1, 2, 3, 4, 5]. Query \\"1 3\\" confirms the appearance of `3`, and \\"2 2 4\\" would inform how many integers between `2` and `4` appear, which can help narrow down the position of `3`. Sherlock\'s responses guide us to the result, which is position `4` for integer `3`. Ensure to maintain the interaction format and handle exceptions or invalid input gracefully as per standard competitive programming practices.","solution":"def find_first_occurrence_of_k(m, k, interaction_func): Function to locate the first occurrence of integer k in the hidden permutation of length m. m : int : length of permutation k : int : integer to find in permutation interaction_func : function : function to interact with the permutation (e.g., query using \\"1 i\\" or \\"2 i j\\" and get responses) Returns the position of first occurrence of k, or -1 if not found within allowed queries. queries = (m // 2) + 5 # Allow maximum (m // 2) + 5 queries for pos in range(1, m + 1): response = interaction_func(f\\"1 {pos}\\") if response == \\"YES\\": print(f\\"! {pos}\\", flush=True) return pos queries -= 1 if queries <= 0: break print(\\"! -1\\", flush=True) return -1 def interaction(query): This function simulates interaction with the permutation system. This function should normally interact with an external system, e.g., via standard input/output. For demonstration purposes, it simulates the responses for interaction. perm = [1, 2, 3, 4, 5] # Example permutation. # Query format \\"1 i\\" if query.startswith(\\"1 \\"): _, i = query.split() i = int(i) if perm[i-1] == k: return \\"YES\\" else: return \\"NO\\" # Query format \\"2 i j\\" elif query.startswith(\\"2 \\"): _, i, j = query.split() i = int(i) j = int(j) return str(sum(1 for x in perm if i <= x <= j)) # Wrapper code to make this a module def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 for _ in range(T): m = int(data[index]) k = int(data[index + 1]) index += 2 find_first_occurrence_of_k(m, k, interaction) if __name__ == \\"__main__\\": main()"},{"question":"Given a number, determine if it can be expressed as the sum of two prime numbers. If the number can be expressed as the sum of two prime numbers, print \\"YES\\" followed by the pair of prime numbers. If there are multiple pairs, print any one of them. If the number cannot be expressed as the sum of two prime numbers, print \\"NO\\". Constraints: * The number is a positive integer not exceeding 10,000. Input: Input is given from Standard Input in the following format: N Output: If the number can be expressed as the sum of two prime numbers, print \\"YES\\" followed by the pair of prime numbers. If there are multiple correct answers, print any one of them. If the number cannot be expressed as the sum of two prime numbers, print \\"NO\\". Examples: Input: 34 Output: YES 3 31 Input: 5 Output: YES 2 3 Input: 27 Output: NO","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def find_prime_sum_pair(n): Determine if `n` can be expressed as the sum of two prime numbers. for i in range(2, n): if is_prime(i) and is_prime(n - i): return f\\"YESn{i} {n - i}\\" return \\"NO\\""},{"question":"In an attempt to defeat cybercriminals, you have been recruited as a top-notch security programmer to develop a secure password generator for a new highly secure application. The password needs to adhere to very specific rules to maintain the highest level of security: 1. The password length must be exactly `n` characters. 2. It must include at least one lowercase letter, one uppercase letter, and one digit. 3. The remaining characters in the password can be any combination of lowercase letters, uppercase letters, and digits. 4. The password must not contain any character more than once. Write a function `generate_password(n)`, which returns a valid password that adheres to the described rules. Assume `n` will always be a number greater than or equal to 3 and less than or equal to 62 (since the total number of unique alphanumeric characters is 62). # Input - An integer `n` (3 ≤ n ≤ 62) representing the length of the password. # Output - A string representing a valid password that meets all the criteria. # Example Example 1 **Input:** 8 **Output:** A possible valid output could be `aB3dE1Fg`. Example 2 **Input:** 12 **Output:** A possible valid output could be `A5bC1d8E4F2`. # Note In the first example, the password `aB3dE1Fg`: - Is 8 characters long. - Contains at least one lowercase letter (`a`, `d`, `g`), one uppercase letter (`B`, `E`, `F`), and one digit (`3`, `1`). - Does not contain any character more than once. In the second example, the password `A5bC1d8E4F2`: - Is 12 characters long. - Contains at least one lowercase letter (`b`, `d`), one uppercase letter (`A`, `C`, `E`, `F`), and one digit (`5`, `1`, `8`, `4`, `2`). - Does not contain any character more than once.","solution":"import random import string def generate_password(n): Generates a secure password of length n that includes at least one lowercase letter, one uppercase letter, and one digit, with no repeated characters. if n < 3 or n > 62: raise ValueError(\\"n must be between 3 and 62 inclusive\\") # Define the lists of characters lowercase = list(string.ascii_lowercase) uppercase = list(string.ascii_uppercase) digits = list(string.digits) # Ensure at least one of each type of character is included password = [random.choice(lowercase), random.choice(uppercase), random.choice(digits)] # Fill the remaining characters with a combination of lowercase, uppercase, and digits all_characters = lowercase + uppercase + digits random.shuffle(all_characters) # Avoid duplicate characters used_characters = set(password) # Set of characters already in the password while len(password) < n: char = random.choice(all_characters) if char not in used_characters: password.append(char) used_characters.add(char) random.shuffle(password) return \'\'.join(password)"},{"question":"A company wants to optimize its resource allocation to maximize productivity. Each resource can be allocated for a continuous project within a limited number of days. However, due to recent changes in project structures, the company can only take on two projects at a time, and these projects cannot overlap. Given n possible project intervals and their corresponding productivity values, determine the maximum total productivity the company can achieve by choosing exactly two non-overlapping projects. Formally, you need to choose two projects i and j (i ≠ j) such that they don\'t overlap (i.e., the project intervals i and j are disjoint) and the sum of their productivity is maximal. Input The first line contains an integer n (2 ≤ n ≤ 2·10^5) — the number of projects. Each of the next n lines contains three integers li, ri, productivei (1 ≤ li ≤ ri ≤ 2·10^5, 1 ≤ productivei ≤ 10^9) — the start day, end day, and productivity value of the project respectively. Output Print a single integer — the maximum total productivity by choosing two disjoint projects, or print -1 if it is impossible to choose such projects. Examples Input 5 1 3 10 2 5 20 6 7 30 8 10 40 4 9 25 Output 70 Input 4 1 2 5 2 3 15 3 4 10 5 6 20 Output 35 Note In the first sample, the company should choose the third and fourth projects. Thus, the total productivity value will equal 30 (from the third project) + 40 (from the fourth project) = 70. In the second sample, the company should choose the second and fourth projects. Thus, the total productivity value will equal 15 (from the second project) + 20 (from the fourth project) = 35.","solution":"def max_productivity(n, projects): projects.sort(key=lambda x: x[1]) # Sort by end time max_prod = -1 max_end = [0] * n max_end[0] = projects[0][2] for i in range(1, n): max_end[i] = max(max_end[i-1], projects[i][2]) j = 0 for i in range(1, n): while j < i and projects[j][1] < projects[i][0]: j += 1 if j > 0: max_prod = max(max_prod, projects[i][2] + max_end[j-1]) return max_prod"},{"question":"Farmer John has a farm with a rectangular grid of land. He has a number of cows that he needs to place in separate stalls within the grid. Due to their temperamental nature, each cow needs to be placed such that no two cows share the same row or the same column. Further, each stall can accommodate only one cow. Farmer John wants to help his cows find all possible ways to be placed under these conditions. Given an integer n representing the number of cows (which also represents the n x n grid dimensions), find all possible ways to place n cows in an n x n grid such that no two cows are in the same row or the same column. # Input - A single integer n (1 ≤ n ≤ 10) representing the grid dimensions and the number of cows. # Output - Print all possible solutions in any order. Each solution must be on a new line. - Each solution should be formatted as a list of n integers where the i-th integer represents the column index (0-based) where the cow is placed in the i-th row. # Example Input ``` 3 ``` Output ``` [0, 1, 2] [0, 2, 1] [1, 0, 2] [1, 2, 0] [2, 0, 1] [2, 1, 0] ``` # Note There are 6 possible ways to place 3 cows in a 3x3 grid following the given constraints. Each way is provided as a list of column indices for each row. For larger values of n, the number of solutions will increase factorially (n!).","solution":"from itertools import permutations def place_cows(n): Returns all possible ways to place n cows in an n x n grid such that no two cows share the same row or the same column. Arguments: n -- Number of cows and the dimension of the grid. Returns: A list of lists, where each list represents a valid arrangement. return list(permutations(range(n)))"},{"question":"You are tasked with teaching a robot to distinguish between cooking a simple dish and a complex dish based on the number of ingredients and steps involved. A simple dish is defined as having fewer than 5 ingredients and fewer than 5 steps. Interaction This is an interactive problem. Initially, you are given no details about the dish. Instead, you can query for the number of ingredients or the number of steps. Each query will return an integer value indicating the number of ingredients or the number of steps, respectively. You can make two types of queries: - \\"Ingredients\\" to get the number of ingredients. - \\"Steps\\" to get the number of steps. Using this information, determine whether the dish is \\"simple\\" or \\"complex\\" according to the given criteria and output the result to standard out. Example interaction Input - Ingredients - Steps Output (response to queries) - 3 (number of ingredients) - 4 (number of steps) Final Output - \\"simple\\" Make sure to use the stream flushing operation after each query to ensure there is no output buffer delay.","solution":"def classify_dish(): Classifies a dish as \\"simple\\" or \\"complex\\" based on the number of ingredients and steps. print(\\"Ingredients\\", flush=True) num_ingredients = int(input()) print(\\"Steps\\", flush=True) num_steps = int(input()) if num_ingredients < 5 and num_steps < 5: print(\\"simple\\") else: print(\\"complex\\")"},{"question":"A matrix is called a special matrix if every element is either 0 or 1, and each row and each column of the matrix contain at most one 1. Given an ( n times n ) matrix, determine if it is a special matrix. Input The first line of the input contains an integer ( n ) (1 ≤ n ≤ 1000) — the size of the matrix. The next n lines each contain n integers (either 0 or 1) describing the matrix. Output Output \\"YES\\" if the given matrix is a special matrix, otherwise print \\"NO\\". Examples Input 3 1 0 0 0 0 1 0 0 0 Output YES Input 3 1 0 1 0 0 0 0 1 0 Output NO Input 4 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 Output YES","solution":"def is_special_matrix(n, matrix): Determines if a given n x n matrix is a special matrix. A special matrix is defined as one where each element is either 0 or 1, each row and each column contain at most one 1. :param n: The size of the matrix. :param matrix: The n x n matrix to be evaluated. :return: \\"YES\\" if the matrix is special, otherwise \\"NO\\". for row in matrix: if sum(row) > 1: return \\"NO\\" for col in range(n): if sum(matrix[row][col] for row in range(n)) > 1: return \\"NO\\" return \\"YES\\""},{"question":"A software development company has built a task management application where each task has a priority level. The priority levels are given as integers: higher numbers represent higher priorities. Given a list of tasks with their priorities, you need to simulate adding new tasks and querying the highest priority task within a specific range of tasks. Your task is to handle multiple operations efficiently: 1. Add a task with a given priority at the end of the list. 2. Query the highest priority among the tasks in a specified range. The operations are defined as follows: - Add(P): Add a new task with priority P to the end of the list. - Query(L, R): Return the highest priority task from the L-th to the R-th task (1-based indexing) inclusive. Input - The first line contains an integer n (1 ≤ n ≤ 100,000) — the initial number of tasks. - The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 100,000) — the priorities of the initial tasks. - The third line contains an integer q (1 ≤ q ≤ 100,000) — the number of operations. - Each of the next q lines contains a description of an operation in one of the following two formats: - \\"Add P\\" where (1 ≤ P ≤ 100,000) - \\"Query L R\\" where (1 ≤ L ≤ R ≤ current number of tasks) Output For each \\"Query\\" operation, output the highest priority in the specified range. Examples Input ``` 5 1 2 3 4 5 5 Add 6 Query 1 3 Add 2 Query 2 6 Query 1 7 ``` Output ``` 3 6 6 ``` Input ``` 3 10 20 30 3 Query 1 3 Add 40 Query 2 4 ``` Output ``` 30 40 ``` Note In the first example: - After the first \\"Add 6\\", the list becomes [1, 2, 3, 4, 5, 6]. - The first query checks the range from the 1st to the 3rd, which is [1, 2, 3], and the highest priority is 3. - After the second \\"Add 2\\", the list becomes [1, 2, 3, 4, 5, 6, 2]. - The second query checks the range from the 2nd to the 6th, which is [2, 3, 4, 5, 6], and the highest priority is 6. - The third query checks the range from the 1st to the 7th, which is [1, 2, 3, 4, 5, 6, 2], and the highest priority is 6. In the second example: - The first query checks the range from the 1st to the 3rd, which is [10, 20, 30], and the highest priority is 30. - After the \\"Add 40\\", the list becomes [10, 20, 30, 40]. - The second query checks the range from the 2nd to the 4th, which is [20, 30, 40], and the highest priority is 40.","solution":"class TaskManager: def __init__(self, initial_tasks): Initialize the TaskManager with an initial list of task priorities. self.tasks = initial_tasks def add_task(self, priority): Add a new task with the specified priority to the end of the list. self.tasks.append(priority) def query_max_priority(self, L, R): Return the highest priority in the range [L, R] (1-based indexing). # Convert 1-based to 0-based index L -= 1 R -= 1 return max(self.tasks[L:R + 1]) def handle_operations(n, initial_tasks, q, operations): Handles a series of operations on the TaskManager and returns the results of all \'Query\' operations. n - initial number of tasks initial_tasks - list of initial priorities q - number of operations operations - list of operations (Add P or Query L R) task_manager = TaskManager(initial_tasks) results = [] for operation in operations: parts = operation.split() if parts[0] == \'Add\': priority = int(parts[1]) task_manager.add_task(priority) elif parts[0] == \'Query\': L = int(parts[1]) R = int(parts[2]) result = task_manager.query_max_priority(L, R) results.append(result) return results"},{"question":"You are given an array of integers representing the scores of participants in a competition. Your task is to find the maximum possible sum of non-adjacent elements from the array. This means you cannot take two consecutive elements as part of the sum. Input The first line contains an integer n (1 ≤ n ≤ 100 000), the number of participants. The second line contains n integers aᵢ (|aᵢ| ≤ 10 000), representing the scores of the participants. Output Output a single integer, the maximum possible sum of non-adjacent elements. Example Input 5 3 2 5 10 7 Output 15 Explanation In the sample input, we can pick the elements 3, 10, and 2 (or equivalently 3, 10, and 7), to get the maximum non-adjacent sum of 15. Note The optimal substructure of the problem reflects that for each element aᵢ in the array, we have two choices: either include it in our sum (which means we skip the previous element), or we exclude it. We can solve this using a dynamic programming approach where we maintain two variables to record the maximum sum including the current element and the maximum sum excluding the current element.","solution":"def max_non_adjacent_sum(nums): Find the maximum possible sum of non-adjacent elements from the array. :param nums: List[int] - List of integers representing scores :return: int - Maximum possible sum of non-adjacent elements if not nums: return 0 include = 0 exclude = 0 for num in nums: # Current max excluding i new_exclude = max(include, exclude) # Current max including i include = exclude + num exclude = new_exclude # return max of include and exclude return max(include, exclude)"},{"question":"You are given a list of integers representing the amount of each type of toy a toyshop has in stock. During each visit, a customer can buy an arbitrary number of one type of toy. Your task is to help the toyshop minimize its inventory by simulating the process of all possible customer purchases. Write a function that takes an integer N (the number of types of toys) and an array of integers A (representing the stock of each type of toy) and returns the minimum number of visits required to deplete the entire stock. In each visit, a customer can only buy toys of a single type. # Input: - An integer N representing the number of types of toys. - An array A of N integers, where A[i] is the stock of the ith type of toy. # Output: - An integer representing the minimum number of visits required to deplete the entire inventory of toys. # Constraints: - 1 ≤ N ≤ 100 - 1 ≤ A[i] ≤ 100 # Example: Input: 5 3 6 2 8 3 Output: 8 Explanation: One possible sequence of visits is: 1. Buy 3 toys of type 1 (3 remaining types: [0, 6, 2, 8, 3]) 2. Buy 6 toys of type 2 (3 remaining types: [0, 0, 2, 8, 3]) 3. Buy 2 toys of type 3 (3 remaining types: [0, 0, 0, 8, 3]) 4. Buy 8 toys of type 4 (1 remaining type: [0, 0, 0, 0, 3]) 5. Buy 1 toy of type 5 (remaining types: [0, 0, 0, 0, 2]) 6. Buy 1 toy of type 5 (remaining types: [0, 0, 0, 0, 1]) 7. Buy 1 toy of type 5 (remaining types: [0, 0, 0, 0, 0]) Or they could buy step by step per visit: 1. Buy 3 toys of type 1 2. Buy 6 toys of type 2 3. Buy 2 toys of type 3 4. Buy 3 toys of type 4 5. Buy 3 toys of type 4 6. Buy 2 toys of type 4 7. Buy 1 toy of type 5 8. Buy 1 toy of type 5","solution":"def min_visits_to_deplete_inventory(N, A): Returns the minimum number of visits required to deplete the entire stock of toys. return sum(A)"},{"question":"Write a function that determines whether a given string can be split into two non-empty substrings such that each substring contains only unique characters and both substrings are of equal length. Input The function will take a single input: - A string `s` of length n (1 ≤ n ≤ 10^5), consisting of lowercase English letters. Output The function should return: - True if the string `s` can be split as described, or - False otherwise. Example Input \\"abcdefghij\\" Output True Input \\"aabbccdd\\" Output False Explanation In the first example, the string \\"abcdefghij\\" can be split into \\"abcde\\" and \\"fghij\\", both of which contain unique characters and are of equal length. In the second example, it is impossible to split the string \\"aabbccdd\\" into two equal parts with unique characters.","solution":"def can_be_split(s): Determines whether a given string can be split into two non-empty substrings such that each substring contains only unique characters and both substrings are of equal length. Parameters: s (str): Input string consisting of lowercase English letters. Returns: bool: True if the string can be split as described, False otherwise. n = len(s) # If length of string is odd, can\'t be split into two equal halves if n % 2 != 0: return False mid = n // 2 left = s[:mid] right = s[mid:] # Check if both substrings have unique characters return len(set(left)) == len(left) and len(set(right)) == len(right)"},{"question":"Implement a function to evaluate an arithmetic expression in Reverse Polish Notation (RPN). The valid operators are `+`, `-`, `*`, and `/`. Each operand may be an integer or another expression. Division should truncate toward zero. For example: - The expression [\\"2\\", \\"1\\", \\"+\\", \\"3\\", \\"*\\"] translates to ((2 + 1) * 3) = 9. - The expression [\\"4\\", \\"13\\", \\"5\\", \\"/\\", \\"+\\"] translates to (4 + (13 / 5)) = 6. - The expression [\\"10\\", \\"6\\", \\"9\\", \\"3\\", \\"+\\", \\"-11\\", \\"*\\", \\"/\\", \\"*\\", \\"17\\", \\"+\\", \\"5\\", \\"+\\"] translates to (((10 * (6 / ((9 + 3) * -11))) + 17) + 5) = 22. Input format: - A single integer t (1 ≤ t ≤ 1000) is given, representing the number of test cases. - For each test case, a list of strings representing a valid RPN expression is provided. Output format: - For each test case, output the result of the arithmetic expression evaluation. Constraints: - The number of tokens in each expression will be at most 1000. - The input tokens are guaranteed to be valid RPN expressions. Example input: 3 [\\"2\\", \\"1\\", \\"+\\", \\"3\\", \\"*\\"] [\\"4\\", \\"13\\", \\"5\\", \\"/\\", \\"+\\"] [\\"10\\", \\"6\\", \\"9\\", \\"3\\", \\"+\\", \\"-11\\", \\"*\\", \\"/\\", \\"*\\", \\"17\\", \\"+\\", \\"5\\", \\"+\\"] Example output: 9 6 22","solution":"def evaluate_rpn_expression(expression): Evaluate the value of an arithmetic expression in Reverse Polish Notation (RPN). stack = [] for token in expression: if token in \\"+-*/\\": b = int(stack.pop()) a = int(stack.pop()) if token == \\"+\\": result = a + b elif token == \\"-\\": result = a - b elif token == \\"*\\": result = a * b elif token == \\"/\\": result = int(a / b) # truncate toward zero stack.append(result) else: stack.append(int(token)) return stack[0] def evaluate_rpn_expressions(test_cases): results = [] for expression in test_cases: results.append(evaluate_rpn_expression(expression)) return results"},{"question":"Nelson enjoys solving number theory puzzles. He came across a problem regarding prime number generation and would like some help. You are given an integer n (1 ≤ n ≤ 10^5). Your task is to find all prime numbers up to n (inclusive) and return them in a list. Prime numbers are natural numbers greater than 1 that are not divisible by any number other than 1 and themselves. Implement the sieve of Eratosthenes algorithm to efficiently find all prime numbers up to n. Input The input consists of a single integer n. Output Output all prime numbers up to n in a space-separated string on a single line. If there are no primes up to n, output an empty string. Example Input: 10 Output: 2 3 5 7 Input: 2 Output: 2 Input: 1 Output: (Note: Output would be empty since there are no prime numbers ≤ 1) Explanation In the first example, the prime numbers up to 10 are 2, 3, 5, and 7. In the second example, 2 is the only prime number up to 2. In the third example, since there are no prime numbers less than or equal to 1, the output is an empty string.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to n (inclusive) using the sieve of Eratosthenes algorithm. if n < 2: return [] # Initialize the sieve is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False p = 2 while (p * p <= n): if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 primes = [num for num in range(2, n + 1) if is_prime[num]] return primes"},{"question":"Company XYZ is managing a fleet of cars and wants to improve their maintenance algorithm. Each car goes through multiple checkpoints during its operating period. At each checkpoint, the car\'s mileage is recorded. The objective is to identify the highest difference in mileage between any two checkpoints for a specific car, which we will call \\"MileageGap\\". You need to implement a system to answer two types of queries: 1. **Type 1**: `1 car_id mileage` - Record the given mileage for the specified car_id. 2. **Type 2**: `2 car_id` - Calculate and return the MileageGap for the specified car_id. If the car_id has less than two checkpoints recorded, return -1. Input The first line of the input contains an integer `q` (1 ≤ q ≤ 5 * 10^4), the number of queries. The next q lines contain queries in the following format: - If the line starts with `1`, it represents a query of type `1 car_id mileage` (1 ≤ car_id ≤ 10^6, 1 ≤ mileage ≤ 10^9). - If the line starts with `2`, it represents a query of type `2 car_id` (1 ≤ car_id ≤ 10^6). Output For each query of type `2`, print the value of MileageGap for the specified car_id on a new line. If less than two mileage checkpoints exist for the car_id, print `-1`. Examples Input 6 1 1 100 1 1 200 1 2 150 2 1 2 2 2 3 Output 100 -1 -1 Input 4 1 3 350 1 3 450 2 3 2 1 Output 100 -1","solution":"from collections import defaultdict class FleetMaintenance: def __init__(self): self.car_mileage = defaultdict(list) def record_mileage(self, car_id, mileage): self.car_mileage[car_id].append(mileage) def calculate_mileage_gap(self, car_id): mileages = self.car_mileage[car_id] if len(mileages) < 2: return -1 return max(mileages) - min(mileages) def process_queries(queries): fleet = FleetMaintenance() results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": _, car_id, mileage = map(int, parts) fleet.record_mileage(car_id, mileage) elif parts[0] == \\"2\\": _, car_id = map(int, parts) results.append(fleet.calculate_mileage_gap(car_id)) return results"},{"question":"A social media platform is analyzing user engagement through post likes. Each post on the platform is assigned a unique ID and users can \'like\' multiple posts. Your task is to identify the k most liked posts. You are given the following data: - An integer array `postIds` where each element represents the ID of a post that received a like. - An integer `k` that indicates the number of top liked posts to return. Write a function `topKMostLikedPosts(postIds: List[int], k: int) -> List[int]` that returns a list of k post IDs that received the most likes. If there are multiple posts with the same number of likes, return the posts with lower ID first. # Constraints: - 1 ≤ len(postIds) ≤ 10^5 - 1 ≤ postIds[i] ≤ 10^9 - 1 ≤ k ≤ len(set(postIds)) - The elements of postIds are all positive integers. # Input: - Two lines: - The first line contains the integer k. - The second line contains the integer array postIds, elements separated by spaces. # Output: - A single list of k post IDs, sorted by the number of likes in descending order, and by ID in ascending order in case of a tie. # Example: **Input:** ``` 3 4 3 1 4 5 3 3 1 1 1 6 5 5 ``` **Output:** ``` [1, 3, 5] ``` **Explanation:** - Post ID 1 received 4 likes. - Post ID 3 received 3 likes. - Post ID 5 received 3 likes. - Post ID 4 received 2 likes. - Post ID 6 received 1 like. - The top 3 most liked posts are 1, 3, and 5.","solution":"from collections import Counter from typing import List, Tuple def topKMostLikedPosts(postIds: List[int], k: int) -> List[int]: Returns the k most liked post IDs. count = Counter(postIds) sorted_posts = sorted(count.items(), key=lambda x: (-x[1], x[0])) return [post_id for post_id, _ in sorted_posts[:k]]"},{"question":"A group of scientists are analyzing a series of temperature readings taken at various locations across a large city. The readings were not all taken at the same time. Each reading is recorded as a tuple consisting of the temperature, the x and y coordinates of the location, and the time of the reading. The scientists are interested in understanding how the temperature changes over time at specific points in the city. They have identified several \\"target points\\" of interest and requested software that, given these temperature readings, can identify the latest temperature recorded at each of these target points. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of temperature readings. Each of the next `n` lines contains a description of a temperature reading, given as four integers: `t`, `x`, `y`, `time` — where `t` is the recorded temperature (-100 ≤ t ≤ 100), `x` is the x-coordinate of the location (0 ≤ x ≤ 1000), `y` is the y-coordinate of the location (0 ≤ y ≤ 1000), and `time` is the time of the reading (1 ≤ time ≤ 10^9). The next line contains an integer `m` (1 ≤ m ≤ 10^5) — the number of target points. Each of the next `m` lines contains a description of a target point, given as two integers: `x` and `y` — the coordinates of the target point (0 ≤ x ≤ 1000, 0 ≤ y ≤ 1000). Output For each target point, output the latest temperature recorded at that point. If no temperature reading is available for a target point, output \\"NO DATA\\". Examples Input 5 20 10 10 1 25 10 10 3 15 20 20 2 30 20 20 5 10 30 30 4 3 10 10 20 20 30 30 Output 25 30 10 Input 3 20 15 15 2 25 25 25 3 30 35 35 1 2 30 30 25 25 Output NO DATA 25","solution":"def latest_temperature_readings(readings, target_points): Identify the latest temperature recorded at each of the target points. Parameters: readings (list of tuple): Each tuple contains four integers (t, x, y, time) where t is the recorded temperature, x and y are the coordinates of the location, and time is the time of the reading. target_points (list of tuple): Each tuple contains two integers (x, y) which are the coordinates of the target points. Returns: list: The latest temperature recorded at each target point or \\"NO DATA\\" if no reading is available. # Create a dictionary to store the latest reading at each coordinate latest_readings = {} for t, x, y, time in readings: if (x, y) not in latest_readings or time > latest_readings[(x, y)][1]: latest_readings[(x, y)] = (t, time) result = [] for x, y in target_points: if (x, y) in latest_readings: result.append(latest_readings[(x, y)][0]) else: result.append(\\"NO DATA\\") return result"},{"question":"Consider a grid of size n x m representing a map where each cell can either be an open space (represented by \'.\') or an obstacle (represented by \'#\'). You are tasked with finding the shortest path from the top-left corner (0,0) to the bottom-right corner (n-1,m-1). You may move up, down, left, or right, but cannot move through obstacles. Input The input consists of multiple lines. The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the grid. Each of the next n lines contains a string of length m consisting of characters \'.\' or \'#\'. Output Output a single integer representing the length of the shortest path from the top-left corner to the bottom-right corner. If there is no possible path, output -1. Examples Input 4 4 .... .. ..#. .... Output 7 Input 5 5 ..... .#. .#. .#... ..... Output 9 Input 3 3 #.# .#. #.. Output -1","solution":"from collections import deque def shortest_path(grid): Finds the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). Returns the length of the path or -1 if no path exists. n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 1)]) # (x, y, distance) visited = [[False] * m for _ in range(n)] visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"Given a 2D matrix of integers, rotate the matrix 90 degrees clockwise. # Constraints The input satisfies the following conditions: * 1 ≤ n ≤ 100 (n is the number of rows) * 1 ≤ m ≤ 100 (m is the number of columns) * -1000 ≤ matrix[i][j] ≤ 1000 (matrix[i][j] is the element at row i and column j of the matrix) # Input The first line contains two integers n and m, the number of rows and columns of the matrix respectively. The next n lines each contain m integers representing the matrix. # Output Output the rotated matrix with m rows and n columns. # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 7 4 1 8 5 2 9 6 3 ``` Input ``` 2 4 -1 0 1 2 3 4 5 6 ``` Output ``` 3 -1 4 0 5 1 6 2 ```","solution":"def rotate_matrix_90_clockwise(matrix): Rotates a 2D matrix 90 degrees clockwise and returns the rotated matrix. Args: matrix (list of list of int): The input 2D matrix to rotate. Returns: list of list of int: The rotated 2D matrix. if not matrix: return [] n = len(matrix) m = len(matrix[0]) rotated_matrix = [[0] * n for _ in range(m)] for i in range(n): for j in range(m): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"You are given a list of integers. Your task is to segment the list into the minimum number of contiguous, non-overlapping sublists such that each sublist contains all unique integers. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of integers in the list. The second line contains n integers separated by spaces, representing the elements of the list. Each element is between 1 and n, inclusive. Output Print the minimum number of contiguous, non-overlapping sublists that contain all unique integers. Examples Input 6 1 2 3 1 2 3 Output 2 Input 8 4 4 4 4 4 4 4 4 Output 8 Input 7 1 2 1 2 1 2 1 Output 4","solution":"def min_segments_with_unique_integers(n, lst): Returns the minimum number of contiguous, non-overlapping sublists such that each sublist contains all unique integers. segment_count = 0 seen = set() for number in lst: if number in seen: segment_count += 1 seen = set() seen.add(number) segment_count += 1 if seen else 0 return segment_count"},{"question":"Task is simple. You are provided with a string consisting solely of lowercase alphabets and you have to do the following - Print \'Yes\' if the string is a palindrome. Print \'No\' if the string is not a palindrome. Print \'Invalid\' if the string contains any characters other than lowercase alphabets. Definition of a Palindrome - A string is a palindrome if it reads the same backward as forwards. Example - \\"madam\\", \\"racecar\\", and \\"level\\" are palindromes. \\"hello\\" and \\"world\\" are not palindromes. Input- T is the number of test cases. For each test case, input the string, each string\'s termination point is a return key (enter key). Output- A single line containing \'Yes\', \'No\', or \'Invalid\' for each test case. Constraints 1 ≤ t ≤ 10 1 ≤ length of string ≤ 10^5 NOTE: The string will only contain lowercase alphabets or any other printable character. SAMPLE INPUT 3 madam hello racecar1 SAMPLE OUTPUT Yes No Invalid Explanation In the first case, \\"madam\\" reads the same backward as forwards, so the output is \'Yes\'. In the second case, \\"hello\\" does not read the same backward as forwards, so the output is \'No\'. In the third case, \\"racecar1\\" contains a character other than lowercase alphabets, so the output is \'Invalid\'.","solution":"def check_palindrome_status(strings): results = [] for s in strings: if not s.isalpha() or not s.islower(): results.append(\\"Invalid\\") elif s == s[::-1]: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given a string S consisting of lowercase Latin letters and Q queries. For each query, you need to find the count of distinct characters within the given range of indices. Each query will be in the format L R, where you need to output the number of distinct characters in the substring S[L:R+1]. Input Format: - The first line contains a string S of length N. - The second line contains an integer Q denoting the number of queries. - The next Q lines each contain two space-separated integers L and R representing the indices of the substring. Output Format: - For each query, output a single integer denoting the number of distinct characters in the substring S[L:R+1]. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 0 ≤ L, R < N - L ≤ R Example Input: abcda 3 0 2 1 4 2 4 Example Output: 3 4 3 Explanation: - For the first query, the substring is \\"abc\\" which has 3 distinct characters (\'a\', \'b\', \'c\'). - For the second query, the substring is \\"bcda\\" which has 4 distinct characters (\'b\', \'c\', \'d\', \'a\'). - For the third query, the substring is \\"cda\\" which has 3 distinct characters (\'c\', \'d\', \'a\').","solution":"def count_distinct_characters(S, queries): Returns the count of distinct characters for each query in the range [L, R]. Parameters: S (str): The input string queries (list of tuples): List of tuples where each tuple contains two integers L and R Returns: list: List of integers representing the count of distinct characters for each query results = [] for L, R in queries: substring = S[L:R+1] distinct_chars = set(substring) results.append(len(distinct_chars)) return results"},{"question":"Given a string S and a list of words L containing unique and non-repetitive words, your task is to determine if S can be segmented into a sequence of one or more dictionary words from L. Print \\"YES\\" if the string can be segmented, otherwise print \\"NO\\". Input: The first line contains an integer T, the number of test cases. Each test case contains a string S followed by an integer W, the number of words in the dictionary list L, and then W space-separated words. Output: For each test case, print \\"YES\\" if the string can be segmented, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 1000 1 ≤ |S|, W ≤ 100 1 ≤ length of each word in L ≤ 20 SAMPLE INPUT 3 applepenapple 2 apple pen catsanddog 3 cat sand dog leetcode 2 leet code SAMPLE OUTPUT YES YES YES Explanation: Test Case #1: The string \\"applepenapple\\" can be segmented as \\"apple pen apple\\", so the output is YES. Test Case #2: The string \\"catsanddog\\" can be segmented as \\"cat sand dog\\", so the output is YES. Test Case #3: The string \\"leetcode\\" can be segmented as \\"leet code\\", so the output is YES.","solution":"def can_segment_string(s, word_list): Determines if the string \'s\' can be segmented into a sequence of one or more dictionary words from \'word_list\'. :param s: The input string to be segmented :param word_list: The list of unique words :return: \'YES\' if the string can be segmented, otherwise \'NO\' word_set = set(word_list) dp = [False] * (len(s) + 1) dp[0] = True # base case: empty string for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return \\"YES\\" if dp[len(s)] else \\"NO\\" def solve_segment_cases(cases): Solves multiple cases of string segmentation. :param cases: A list of dictionaries with keys \'s\' and \'word_list\' representing each test case :return: A list of results, each being \'YES\' or \'NO\' results = [] for case in cases: result = can_segment_string(case[\'s\'], case[\'word_list\']) results.append(result) return results"},{"question":"During the holiday season, you decided to plan a series of gift boxes for your family members. Each gift box will contain a certain number of items. You have n items, each with a specific value. Your task is to find the maximum possible value that can be stored in k gift boxes, where each gift box contains at least one item, and the total number of items distributed is exactly n. To do this, you will partition the list of item values into k contiguous segments where each segment represents the values of items in one gift box. Your goal is to maximize the sum of the minimum values from each of these k segments (i.e., the value of each gift box is determined by the smallest valued item in that box, and you want to maximize the total value across all boxes). Input: - The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n) — the number of items and the number of gift boxes. - The second line contains n integers v[i] (1 ≤ v[i] ≤ 1000) — the values of the items. Output: - Print the maximum possible value that can be stored in the k gift boxes given the constraints. Example Input: 6 3 8 1 3 2 5 6 Output: 12 Explanation: One of the optimal ways to partition the array into three segments is [8], [1, 3, 2], [5, 6]. The minimum values of these segments are 8 (for [8]), 1 (for [1, 3, 2]), and 5 (for [5, 6]). Therefore, the maximum possible value is 8 + 1 + 5 = 14.","solution":"def max_possible_value(n, k, values): Finds the maximum possible value that can be stored in k gift boxes. if k == 1: # If there\'s only one box, return the smallest value in the list. return min(values) # Sort values in descending order values.sort(reverse=True) # The highest k values represent the minimum value of k segments return sum(values[:k])"},{"question":"Anna and Boris are playing a game involving prime numbers. They have a list of non-negative integers and take turns picking a number from the list. Anna always moves first. The player who picks a prime number wins immediately. If no prime numbers are left to pick, the game is a draw. Anna and Boris both play optimally. Given the list of numbers, determine the result of the game. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of integers in the list. The next line contains n non-negative integers, each not exceeding 10^6. Output If Anna wins, print \\"Anna\\". If Boris wins, print \\"Boris\\". If the game is a draw, print \\"Draw\\". Examples Input 5 1 3 5 8 14 Output Anna Input 4 0 1 4 6 Output Draw Input 3 2 4 9 Output Anna","solution":"import math def is_prime(num): Returns True if the num is a prime number, else False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def game_result(n, numbers): Determines the result of the game. for number in numbers: if is_prime(number): return \\"Anna\\" return \\"Draw\\""},{"question":"You are given an n x n grid with some cells blocked and some cells open. The task is to find the number of paths from the top-left corner of the grid to the bottom-right corner, such that you can only move right or down and you cannot pass through blocked cells. Write a function to calculate the number of such paths. The grid cells are represented as follows: - 0: open cell - 1: blocked cell # Input - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer n, the size of the grid (both the number of rows and columns). - The next n lines each contain n integers (0 or 1), representing the grid. # Output For each test case, output the number of paths from the top-left corner to the bottom-right corner. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 100 - The grid will always contain at least one open cell at the top-left corner and at least one open cell at the bottom-right corner. # Example Input: 3 3 0 0 0 0 1 0 0 0 0 4 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 2 0 1 0 0 Output: 2 3 1 The function should handle the above requirements and constraints efficiently.","solution":"def count_paths(grid): n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1] def solve_grids(test_cases): results = [] for grid in test_cases: results.append(count_paths(grid)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(lines[index]) grid = [] for i in range(n): grid.append(list(map(int, lines[index + 1 + i].split()))) test_cases.append(grid) index += n + 1 return test_cases def main(input_str): test_cases = parse_input(input_str) return solve_grids(test_cases)"},{"question":"Given an array of integers, find the smallest positive integer that is missing from the array. Constraints - The array can contain duplicates and negative numbers as well. - Array length, `n`, can vary from 1 to 100,000. - All values in the array are integers within the range [-1,000,000, 1,000,000]. Input The input is given from Standard Input in the following format: ``` n a_1 a_2 ... a_n ``` Where: - `n`: an integer representing the length of the array. - `a_1, a_2, ..., a_n`: the integers in the array. Output Print the smallest positive integer missing from the array. Examples Input ``` 5 3 4 -1 1 ``` Output ``` 2 ``` Input ``` 4 1 2 0 3 ``` Output ``` 4 ``` Input ``` 3 -1 -2 -3 ``` Output ``` 1 ```","solution":"def smallest_missing_positive_integer(n, array): Returns the smallest positive integer that is missing from the array. # Initialize a boolean array to keep track of positive integers present in the array present = [False] * (n + 1) for num in array: if 1 <= num <= n: present[num] = True for i in range(1, n + 1): if not present[i]: return i # If all numbers from 1 to n are present, the smallest missing positive integer is n + 1 return n + 1 # Function to read input and call the main function def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) array = list(map(int, data[1:n+1])) print(smallest_missing_positive_integer(n, array))"},{"question":"You are given a string `s` consisting of lowercase Latin letters and an integer `k`. You need to determine whether you can rearrange the letters in `s` such that no two adjacent characters are the same, and the number of distinct characters in the resulting string is at least `k`. Input The first line contains an integer `q` (1 ≤ q ≤ 100) – the number of queries. Each query consists of two lines: The first line of each query contains the string `s` (1 ≤ |s| ≤ 100) consisting of lowercase Latin letters. The second line of each query contains the integer `k` (1 ≤ k ≤ 26). Output For each query, print YES if it is possible to rearrange the characters in `s` such that no two adjacent characters are the same and the number of distinct characters is at least `k`. Otherwise, print NO. Example Input 3 aabb 2 aaab 2 abcd 4 Output YES NO YES Note In the first test case: aaa => aaba (aabb is a valid rearrangement with 2 distinct characters) In the second test case: The given string cannot be rearranged to satisfy the conditions since the number of distinct characters is less than `k`. In the third test case: The strings already have 4 distinct characters (abcd), which is at least `k`, and no two adjacent characters need to be the same to fulfill the distinct character requirement.","solution":"def can_rearrange(s, k): Determines if the string s can be rearranged such that no two adjacent characters are the same and the number of distinct characters in the resulting string is at least k. from collections import Counter char_count = Counter(s) max_freq = max(char_count.values()) # Check if it is possible to rearrange so that no two adjacent characters are the same if max_freq > (len(s) + 1) // 2: return \\"NO\\" unique_chars = len(char_count) if unique_chars >= k: return \\"YES\\" else: return \\"NO\\" def handle_queries(queries): Handles multiple queries. results = [] for s, k in queries: results.append(can_rearrange(s, k)) return results"},{"question":"You are given an array of integers. Your task is to find the element with the most frequency in the array. If there are multiple elements with the same maximum frequency, select the smallest element among them. After determining the element with the maximum frequency, replace all its occurrences in the array with the number -1. Then, print the resulting array. You need to perform this for a number of test cases. Input The first line of input contains the number of test cases. For each test case, the first line contains an integer n, the size of the array. The second line contains n space-separated integers, denoting the elements of the array. Output For each test case, print the resultant array on a new line. Constraints 1<=t<=50 1<=n<=1000 -10^3<=Array Elements<=10^3 Example Input: 2 6 1 2 2 3 3 3 5 4 4 5 5 6 Output: 1 2 2 -1 -1 -1 -1 -1 5 5 6","solution":"from collections import Counter def replace_most_frequent_with_minus_one(test_cases): results = [] for arr in test_cases: counter = Counter(arr) most_freq_count = max(counter.values()) # Find the smallest element among those with the highest frequency most_freq_elem = min(key for key, value in counter.items() if value == most_freq_count) # Replace all occurrences of the most frequent element with -1 result = [-1 if x == most_freq_elem else x for x in arr] results.append(result) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append(arr) index += 2 return test_cases"},{"question":"Alex and Bob are participating in a competition where they solve programming problems. Each problem is graded, and each participant can earn some points from solving it. After all problems are attempted, there are m problems that both have solved, n problems that only Alex has solved, and p problems that only Bob has solved. You are provided with the points Alex and Bob have earned from each type of problem. Specifically, you have: - a: total points Alex scored on problems he and Bob both solved - b: total points Bob scored on problems he and Alex both solved - c: total points Alex scored on problems only he solved - d: total points Bob scored on problems only he solved Given these points, your task is to determine: 1. The total points earned by Alex 2. The total points earned by Bob 3. Who is the winner based on the total points Input The first line contains four space-separated integers a, b, c, and d (0 ≤ a, b, c, d ≤ 10^9). Output - Print the total points earned by Alex. - Print the total points earned by Bob. - Print \\"Alex\\" if Alex\'s total points are higher, \\"Bob\\" if Bob\'s total points are higher, or \\"Draw\\" if their points are equal. Examples Input 10 20 15 5 Output 25 25 Draw Input 30 20 10 5 Output 40 25 Alex Note In the first example, Alex\'s total points are 10 + 15 = 25 and Bob\'s total points are 20 + 5 = 25. Since both have the same total points, the result is a draw. In the second example, Alex\'s total points are 30 + 10 = 40, and Bob\'s total points are 20 + 5 = 25. Since Alex has more points, he is the winner.","solution":"def get_winner(a, b, c, d): Determines the total points of Alex and Bob and declares the winner. Parameters: a (int): Total points Alex scored on problems he and Bob both solved b (int): Total points Bob scored on problems he and Alex both solved c (int): Total points Alex scored on problems only he solved d (int): Total points Bob scored on problems only he solved Returns: tuple: Total points of Alex, total points of Bob, and the winner (\\"Alex\\", \\"Bob\\", or \\"Draw\\") alex_points = a + c bob_points = b + d if alex_points > bob_points: winner = \\"Alex\\" elif bob_points > alex_points: winner = \\"Bob\\" else: winner = \\"Draw\\" return alex_points, bob_points, winner"},{"question":"A string is considered a permutation of another string if it contains the same characters in the same frequencies. Given two strings, your task is to write a function that returns `True` if one string is a permutation of the other, and `False` otherwise. Input The input consists of two lines: - The first line contains the first string, s1 (1 ≤ |s1| ≤ 100), where |s1| is the length of s1. - The second line contains the second string, s2 (1 ≤ |s2| ≤ 100), where |s2| is the length of s2. Output Output a single line containing `True` if s1 is a permutation of s2, otherwise `False`. Examples Input abc bca Output True Input abc abcd Output False Input aab aba Output True","solution":"def are_permutations(s1, s2): Returns True if s1 is a permutation of s2, otherwise False. if len(s1) != len(s2): return False from collections import Counter return Counter(s1) == Counter(s2)"},{"question":"Your task is to implement a snippet of code that calculates Fibonacci numbers efficiently for a very large number. You need to avoid the pitfalls of exponential time complexity observed in a naive recursive approach. Your solution should be able to handle Fibonacci numbers up to F(10^18) quickly. # Fibonacci Calculation Fibonacci numbers are defined as: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 # Input A single integer n (0 ≤ n ≤ 10^18), which represents the position in the Fibonacci sequence. # Output A single integer, F(n), the nth Fibonacci number. Because Fibonacci numbers can be very large, output the answer modulo 10^9 + 7. # Example Input: ``` 10 ``` Output: ``` 55 ``` # Note You need to use an efficient algorithm to calculate the Fibonacci number, such as matrix exponentiation or fast doubling, to ensure that your solution runs in a reasonable amount of time for large values of n.","solution":"def fibonacci(n): Returns the nth Fibonacci number modulo 10^9 + 7. MOD = 10**9 + 7 def matrix_mult(A, B): return [ [(A[0][0]*B[0][0] + A[0][1]*B[1][0]) % MOD, (A[0][0]*B[0][1] + A[0][1]*B[1][1]) % MOD], [(A[1][0]*B[0][0] + A[1][1]*B[1][0]) % MOD, (A[1][0]*B[0][1] + A[1][1]*B[1][1]) % MOD] ] def matrix_pow(matrix, power): result = [[1, 0], [0, 1]] # Identity matrix while power > 0: if power % 2 == 1: result = matrix_mult(result, matrix) matrix = matrix_mult(matrix, matrix) power //= 2 return result if n == 0: return 0 F = [[1, 1], [1, 0]] result = matrix_pow(F, n - 1) return result[0][0]"},{"question":"Problem Given a list of integers, your task is to determine whether it is possible to rearrange the list in such a way that no two consecutive integers have the same value. If it is possible, return \\"Yes\\", otherwise return \\"No\\". Constraints * 1 leq N leq 10^5 * 1 leq A_i leq 10^9 Input N A_1 A_2 A_3 :: A_N The number of integers N is provided on the first line. The following N lines contain the integers of the list. Output Output \\"Yes\\" if it is possible to rearrange the list such that no two consecutive integers are the same. Otherwise, output \\"No\\". Examples Input 5 1 1 2 2 3 Output Yes Input 4 4 4 4 4 Output No","solution":"from collections import Counter def can_rearrange_no_consecutive_same(N, A): Determine if it\'s possible to rearrange the list such that no two consecutive integers are the same. Args: N: int : The number of integers in the list. A: list of int : The list of integers. Returns: str : \\"Yes\\" if possible, otherwise \\"No\\". if N == 1: return \\"Yes\\" freq = Counter(A) max_freq = max(freq.values()) if max_freq <= (N + 1) // 2: return \\"Yes\\" else: return \\"No\\""},{"question":"In a fictional city named Foolery, there is a unique custom where people gather to create a special artifact called \\"Number Sculpture\\" using a sequence of numbers. The ritual is regarded as highly prestigious, and the city\'s elders are keen on analyzing the properties of these sculptures. You have been approached to help analyze a unique property of these Number Sculptures. A Number Sculpture is valid if it is a sequence of numbers such that each number (except the first and the last) is either greater than the number before it and smaller than the number after it, or smaller than the number before it and greater than the number after it. You are given several sequences of numbers and your task is to determine if each sequence forms a valid Number Sculpture. Input: The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer n, the size of the sequence (2 ≤ n ≤ 100). The next line contains n space-separated integers representing the sequence of numbers. Output: For each test case, output \\"YES\\" if the sequence forms a valid Number Sculpture and \\"NO\\" otherwise. Constraints: 1 ≤ T ≤ 1,000 1 ≤ sequence[i] ≤ 10,000 Sample Input: 3 4 1 3 2 4 3 3 2 1 5 5 1 9 3 8 Sample Output: YES NO YES","solution":"def is_valid_number_sculpture(n, sequence): Determines if the given sequence forms a valid Number Sculpture. Parameters: n (int): Size of the sequence sequence (list of int): The sequence of numbers Returns: str: \\"YES\\" if the sequence is a valid Number Sculpture, \\"NO\\" otherwise. for i in range(1, n - 1): if not ((sequence[i-1] < sequence[i] > sequence[i+1]) or (sequence[i-1] > sequence[i] < sequence[i+1])): return \\"NO\\" return \\"YES\\" def analyze_number_sculptures(test_cases): Analyze multiple test cases to determine if each sequence forms a valid Number Sculpture. Parameters: test_cases (list of tuples): A list of tuples where each tuple contains the size of the sequence and the sequence itself. Returns: list of str: A list of \\"YES\\" or \\"NO\\" for each test case. results = [] for n, sequence in test_cases: results.append(is_valid_number_sculpture(n, sequence)) return results"},{"question":"Find the longest contiguous subarray with at most two unique integers. Given an array of integers, you need to find the length of the longest contiguous subarray that contains at most two distinct integers. Assume that the input and output fit within the constraints of a 32-bit integer. # Input - The first line of input contains an integer `n` (1 ≤ n ≤ 10^5) - the length of the array. - The second line of input contains `n` integers where each integer is between 1 and 1000, inclusive. # Output - Output the length of the longest contiguous subarray with at most two unique integers. # Example Input 7 4 3 2 3 4 3 2 Output 3","solution":"def longest_subarray_two_unique(n, arr): Returns the length of the longest contiguous subarray that contains at most two distinct integers. if n <= 2: return n left = 0 max_length = 0 counts = {} for right in range(n): if arr[right] in counts: counts[arr[right]] += 1 else: counts[arr[right]] = 1 while len(counts) > 2: counts[arr[left]] -= 1 if counts[arr[left]] == 0: del counts[arr[left]] left += 1 current_length = right - left + 1 max_length = max(max_length, current_length) return max_length"},{"question":"A city has a system of one-way streets that connect various intersections. The city planners need help to determine the shortest path for fire trucks to travel between intersections quickly during emergencies. An intersection is represented by a positive integer, and a street is represented by a directed edge between two intersections with a non-negative weight assigned to it, indicating the time it takes to traverse that street. Given the intersections and streets in the city, create a program to compute the shortest time for a fire truck to travel from a given starting intersection to all other intersections in the city. Input The first line contains two integers: n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000) representing the number of intersections and the number of streets, respectively. The next m lines each contain three integers: u, v, and w (1 ≤ u, v ≤ n, 0 ≤ w ≤ 1000) representing a street from intersection u to intersection v with a travel time of w. The last line contains an integer s (1 ≤ s ≤ n) representing the starting intersection for the fire trucks. Output - Output n space-separated integers where the i-th integer represents the shortest time required to reach intersection i from the starting intersection s. - If an intersection i is not reachable from s, output the value -1 for that intersection. Examples Input 5 6 1 2 2 1 3 5 2 3 1 2 4 3 3 4 1 4 5 2 1 Output 0 2 3 4 6 Input 4 4 1 2 4 1 3 2 2 3 5 3 4 3 3 Output -1 -1 0 3 Note In the first example, the shortest paths from intersection 1 are: - to intersection 1: 0 (since it\'s the starting point) - to intersection 2: 2 (direct street 1 → 2) - to intersection 3: 3 (streets 1 → 2 → 3) - to intersection 4: 4 (streets 1 → 2 → 4) - to intersection 5: 6 (streets 1 → 2 → 3 → 4 → 5) In the second example, intersections 1 and 2 are not reachable from the starting intersection 3; hence the output is -1 for both. Intersections 3 to 3 give 0 and 3 to 4 takes 3 via the direct street.","solution":"import heapq from collections import defaultdict def dijkstra(n, m, edges, s): Computes the shortest path from start intersection s to all other intersections. Parameters: n : int - The number of intersections m : int - The number of streets edges : list of tuples - The list of streets where each street is (u, v, w) s : int - The starting intersection Returns: list of int - The shortest time to reach each intersection from s # Initialize adjacency list and distance array graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[s] = 0 # Priority queue for Dijkstra\'s Algorithm pq = [(0, s)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) result = [] for i in range(1, n+1): if distances[i] == float(\'inf\'): result.append(-1) else: result.append(distances[i]) return result"},{"question":"You are given a list of integers, and you need to partition the list into two subsets such that the absolute difference between the sum of the elements in the two subsets is minimized. Write a function `min_subset_sum_difference` to determine this minimum possible difference. Input - An integer array `arr` of length `n` (1 ≤ n ≤ 100, 1 ≤ arr[i] ≤ 1000). Output - A single integer representing the minimum difference between the two subset sums. Example Input [1, 2, 3, 9] Output 3 Input [1, 2, 7, 1, 5] Output 0 Input [1, 6, 11, 5] Output 1 Note: You should find a way to implement a solution that efficiently partitions the array with respect to the given constraints, ensuring an optimal approach.","solution":"def min_subset_sum_difference(arr): Returns the minimum possible difference between the sum of the elements in the two subsets. total_sum = sum(arr) n = len(arr) target = total_sum // 2 # Initialize a DP table where dp[i] will be True if a subset with sum i can be formed. dp = [False] * (target + 1) dp[0] = True # Update dp table based on the numbers in the array for num in arr: for i in range(target, num - 1, -1): if dp[i - num]: dp[i] = True # Find the maximum possible sum closest to total_sum // 2 for i in range(target, -1, -1): if dp[i]: subset1_sum = i break # Calculate minimum difference subset2_sum = total_sum - subset1_sum return abs(subset1_sum - subset2_sum)"},{"question":"You are given a grid of size N times M initially filled with zeros. You are allowed to perform the following operation any number of times: 1. Pick any cell (x, y) and toggle its value (change it from 0 to 1 or from 1 to 0). However, the cells adjacent to (x, y) (top, bottom, left, and right) will also get toggled. Your task is to determine the minimum number of operations required to transform the grid into a state where all cells are set to 1. Input The input consists of two integers, N and M, which represent the number of rows and columns of the grid, respectively (1 leq N, M leq 10^3). Output Output a single integer, the minimum number of operations needed. Example Input 2 2 Output 2 Input 3 3 Output 5","solution":"def min_operations_to_fill_grid(N, M): Calculate the minimum number of operations required to transform an N x M grid into a state where all cells are set to 1. # If either N or M is even, half of the cells can be filled in minimum number of operations # If both N and M are odd, one additional operation will be required operations = (N * M + 1) // 2 return operations"},{"question":"Given a list of N positive integers, you are required to partition this list into two subsets such that the sum of integers in each subset is as equal as possible. If there are multiple solutions, any valid one is acceptable. You need to output the difference between the sums of the two subsets. Input The first line contains a single integer N (1 ≤ N ≤ 100). The second line contains N positive integers separated by space. Each integer x_i (1 ≤ x_i ≤ 100) represents an element of the list. Output Output a single integer, which is the smallest possible absolute difference between the sums of the two subsets. Examples Input: 4 1 6 11 5 Output: 1 Input: 3 3 1 4 Output: 0 Note In the first sample, one optimal partition is {1, 5, 6} and {11} which yields a difference of |(1 + 6 + 5) - (11)| = 1. In the second sample, one optimal partition is {3, 4} and {1, 4} which yields a difference of |(3 + 4) - (1 + 4)| = 0.","solution":"def min_subset_difference(arr): Returns the smallest possible absolute difference between the sums of two subsets. total_sum = sum(arr) n = len(arr) # Initialize a 2D dp array dp = [[False for _ in range(total_sum // 2 + 1)] for _ in range(n + 1)] # Base case: it is always possible to form a subset with sum 0 for i in range(n + 1): dp[i][0] = True # Fill the dp array for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] # Find the maximum j such that dp[n][j] is True, which will be the closest # to sum/2 for j in range(total_sum // 2, -1, -1): if dp[n][j]: return total_sum - 2 * j return total_sum # In case n is 1, the difference is the element itself # Read the input def solve(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) arr = list(map(int, data[1:])) print(min_subset_difference(arr))"},{"question":"You are given a list of integers. Your task is to determine if there exist two distinct indices i and j such that the sum of the elements at these indices equals a target value k. Input The first line of input contains two integers n (1 ≤ n ≤ 105) and k (-109 ≤ k ≤ 109). The second line contains n integers a1, a2, ..., an (-109 ≤ ai ≤ 109), representing the list of integers. Output Print \\"YES\\" (without the quotes), if there exist two distinct indices i and j such that ai + aj = k, and \\"NO\\" otherwise. Examples Input 5 9 2 7 11 15 3 Output YES Input 4 8 1 2 3 4 Output NO Note In the first sample test, the pair (2, 7) sums to 9, so the answer is \\"YES\\". In the second sample test, no pair sums to 8, so the answer is \\"NO\\".","solution":"def has_pair_with_sum(n, k, arr): Determines if there exist two distinct indices i and j such that the sum of the elements at these indices equals target value k. Parameters: n (int): The number of elements in the list. k (int): The target sum. arr (list of int): The list of integers. Returns: str: \\"YES\\" if such a pair exists, \\"NO\\" otherwise. seen = set() for num in arr: if (k - num) in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"You are given an array of integers that represents the elevation of terrain at each point. Your goal is to find the largest rectangular area that can be formed in this histogram. Each element in this array represents the height of the bars of the histogram, and the width of each bar is 1. Input The first line of input contains the integer n (1 ≤ n ≤ 105), the number of bars in the histogram. The second line contains n non-negative integers h1, h2, ..., hn (0 ≤ hi ≤ 104), the heights of the bars. Output Output a single integer, the area of the largest rectangle that can be formed in the histogram. Example Input 7 2 1 4 5 1 3 3 Output 8 Input 5 5 4 3 2 1 Output 9 Input 4 1 1 1 1 Output 4 Input 6 6 2 5 4 5 1 6 Output 12","solution":"def largest_rectangle_area(heights): Returns the area of the largest rectangle that can be formed in the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given an array of N non-negative integers, you need to determine if there exists a pair of distinct indices i and j such that Ai + Aj equals a given number X. Input The first line contains N, the number of integers in the array. The second line contains the N integers, the elements in the array. The third line contains the integer X. Output Output \\"Yes\\" if there exists such a pair. Otherwise, output \\"No\\". Constraints 1 <= N <= 10^5 0 <= Ai <= 10^6 0 <= X <= 10^6 Example 1 Input 5 1 2 3 4 5 9 Output Yes Explanation The pair (4, 5) sums to 9. Example 2 Input 3 1 2 3 6 Output No Explanation No two numbers in the array sum to 6.","solution":"def has_pair_with_sum(arr, x): Determines if there exist two distinct indices i and j such that arr[i] + arr[j] = x. Parameters: arr (list): Array of non-negative integers x (int): Target sum Returns: str: \\"Yes\\" if such a pair exists, \\"No\\" otherwise. seen = set() for num in arr: if x - num in seen: return \\"Yes\\" seen.add(num) return \\"No\\""},{"question":"Problem You have been given a grid consisting of N times M cells. Each cell can either be empty or contain an obstacle. Your task is to determine the minimum number of steps required for an entity to move from the top-left corner to the bottom-right corner of the grid. The entity can only move in four possible directions: up, down, left, and right. By default, the grid is initialized with all cells empty. An obstacle prevents the entity from moving through that cell. The entity can only move to adjacent cells (horizontally or vertically). If there is no path from the top-left corner to the bottom-right corner, return `-1`. Constraints - 1 leq N, M leq 100 - The grid consists of \'0\' (empty cell) and \'1\' (cell with an obstacle). Input The input is given in the following format: N M G_ {1,1} G_ {1,2} ... G_ {1,M} G_ {2,1} G_ {2,2} ... G_ {2,M} ... G_ {N, 1} G_ {N, 2} ... G_ {N, M} Output Output the minimum number of steps required to move from the top-left to the bottom-right. If it is not possible, output `-1`. Examples Input 3 3 0 0 0 1 1 0 0 0 0 Output 4 Input 5 5 0 0 1 0 0 1 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 0 0 1 0 Output 8","solution":"from collections import deque def min_steps_bfs(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() if r == n-1 and c == m-1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == 0: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1"},{"question":"Alice and Bob love playing with strings. One day, Alice gives a challenge to Bob with the following game: Bob is given a string `s` of length `n` and `m` operations on it. The `i-th` operation is described by an integer `qi`. To perform the `i-th` operation, Bob must: - Extract all substrings of `s` such that the length of each substring is `qi`. - Calculate the number of distinct substrings among them. - Append the calculated number to a new list `results`. Bob is determined to complete the challenge and asks for your help. Given the initial string `s` and all `m` operations, help Bob find the total number of distinct substrings for each query and append the results to a list. Input The first line contains a single integer `n` (1 ≤ n ≤ 10^4), the length of the string `s`. The second line contains the string `s` of length `n`, consisting only of lowercase English letters. The third line contains a single integer `m` (1 ≤ m ≤ 10^5), the number of operations. The fourth line contains `m` space-separated integers `q1, q2, ..., qm` (1 ≤ qi ≤ n), the lengths of substrings for each query. Output Output `m` lines. In the `i-th` line, print the total number of distinct substrings of length `qi` in the string `s` after performing the `i-th` operation. Examples Input 5 ababa 3 2 3 4 Output 3 3 2 Note In the first example, for string `s = \\"ababa\\"`: For the first query, `qi = 2`, substrings are \\"ab\\", \\"ba\\", \\"ab\\", \\"ba\\". The distinct substrings are \\"ab\\", \\"ba\\", and there are `2`. For the second query, `qi = 3`, substrings are \\"aba\\", \\"bab\\", \\"aba\\". The distinct substrings are \\"aba\\", \\"bab\\", and there are `2`. For the third query, `qi = 4`, substrings are \\"abab\\", \\"baba\\". The distinct substrings are \\"abab\\", \\"baba\\", and there are `2`.","solution":"def count_distinct_substrings(s, queries): Calculate the number of distinct substrings of given lengths. Parameters: - s: The initial string. - queries: A list of integers representing the lengths of substrings for each query. Returns: - A list of integers where each integer is the count of distinct substrings of the specified length. results = [] for q in queries: substrings_set = set() for i in range(len(s) - q + 1): substrings_set.add(s[i:i + q]) results.append(len(substrings_set)) return results"},{"question":"Given a positive integer `M`, find the product of all the even digits present in `M`. If there are no even digits, return 1. Input Input will start with an integer `T` the number of test cases. Each case will have an integer `M`. Output Output the product of all the even digits for each test case on a new line. Constraints 1 ≤ T ≤ 10 1 ≤ M ≤ 10^18 Example Input: 2 123456 1111111 Output: 48 1 Explanation Example case 1. The even digits in 123456 are 2, 4, and 6. Their product is 2 * 4 * 6 = 48. Example case 2. There are no even digits in 1111111, so the output is 1.","solution":"def product_of_even_digits(M): Returns the product of all the even digits present in M. If there are no even digits, return 1. product = 1 has_even_digit = False for digit in str(M): digit = int(digit) if digit % 2 == 0: product *= digit has_even_digit = True return product if has_even_digit else 1 def process_test_cases(T, test_cases): Processes multiple test cases and returns the result for each test case. results = [] for M in test_cases: results.append(product_of_even_digits(M)) return results if __name__ == \\"__main__\\": T = int(input()) test_cases = [int(input()) for _ in range(T)] results = process_test_cases(T, test_cases) for result in results: print(result)"},{"question":"Write a program which calculates the factorial of a given positive integer n. Input n (1 ≤ n ≤ 12) is given in a line. Output Print the factorial of n in a line. Example Input 5 Output 120","solution":"def factorial(n): Returns the factorial of a given positive integer n (1 ≤ n ≤ 12). if n < 1 or n > 12: raise ValueError(\\"Input should be a positive integer between 1 and 12.\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Sam is an enthusiastic puzzle solver. He has recently come across a unique type of matrix puzzle that he can\'t solve and needs your help: * The puzzle is a matrix of size `n x m` consisting of only `0`s and `1`s. * He needs to fill the matrix such that after performing a special operation on each cell, the sum of the resulting matrix is maximized. * The special operation on cell `(i, j)` flips all the bits in the `ith` row and `jth` column (changes `0` to `1` and `1` to `0`). Given `n` and `m`, you need to determine the maximum sum of the matrix possible after applying the special operation on each cell exactly once, starting with a matrix filled with all `0`s. Input: - The first line contains two integers `n` (1 ≤ n ≤ 100) and `m` (1 ≤ m ≤ 100) — the dimensions of the matrix. Output: - Print a single integer — the maximum sum of the matrix possible after applying the special operation on each cell. Examples: Input: 3 3 Output: 9 Input: 1 4 Output: 4 Input: 2 2 Output: 4","solution":"def max_matrix_sum(n, m): Given dimensions n and m, compute the maximum sum of an n x m matrix after applying the special operation on each cell starting from a matrix of all 0s. # If we start with all 0s and flip each cell along its row and column, every cell will eventually be 1. # Therefore, the maximum sum of the matrix possible is just the total number of cells. return n * m"},{"question":"Two players, Alice and Bob, are playing a game involving sequences of numbers on a whiteboard. Initially, there is a sequence of n positive integers written on the whiteboard. The game proceeds in turns, with Alice going first. On a player\'s turn, they choose two adjacent numbers in the sequence and replace them with their sum. The game ends when there is only one number left on the whiteboard. The player unable to make a move at any turn loses. If both players play optimally, determine who will win the game and what the final number on the whiteboard will be after all possible moves. Input The first line contains the integer n (2 ≤ n ≤ 105), the number of numbers in the initial sequence. The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 1000), representing the initial sequence on the whiteboard. Output If Alice wins, print \\"Alice\\" and the final number on the whiteboard. If Bob wins, print \\"Bob\\" and the final number on the whiteboard. Examples Input 3 4 2 6 Output Alice 12 Input 4 1 3 3 1 Output Bob 2 Input 2 7 9 Output Alice 16","solution":"def optimal_game_strategy(n, sequence): Determines the winner and the final number on the whiteboard. Args: n: int - the number of numbers in the initial sequence. sequence: list of int - the sequence of numbers. Returns: tuple - (winner: str, final_number: int). # The final number on the whiteboard will always be the sum of the initial sequence final_number = sum(sequence) # Alice will always win if the number of elements is odd, # because she will always make the last move. # Bob will win if the number of elements is even, because he will make the last move. if n % 2 == 1: return \\"Alice\\", final_number else: return \\"Bob\\", final_number"},{"question":"You are given a string consisting of lowercase English letters. You can perform two types of operations on this string: 1. Swap any two characters in the string. 2. Reverse any substring of the string. The goal is to determine the smallest lexicographical string you can obtain after performing any number of these operations. Input: - The first line contains a single string s (1 ≤ |s| ≤ 105), consisting of lowercase English letters. Output: - Print the lexicographically smallest string that can be obtained. Examples: Input: bcda Output: abcd Input: zxy Output: xyz Input: baaa Output: aaab Note: In the first example, one possible way to achieve \\"abcd\\" is by reversing the substring \\"cda\\" to get \\"bacd\\" and then swapping \'b\' and \'a\' to get \\"abcd\\". In the second example, you can simply sort the entire string to get \\"xyz\\". In the third example, you can rearrange the string by sorting to get \\"aaab\\".","solution":"def smallest_lexicographical_string(s): Returns the smallest lexicographically string obtained by performing any number of operations on the input string `s`. return \'\'.join(sorted(s))"},{"question":"You are given a tree with `n` nodes. Your task is to find the number of unique pairs `(u, v)` where `u` and `v` are distinct nodes of the tree and the distance between `u` and `v` is exactly `k`. The distance between two nodes is the number of edges in the shortest path connecting them. Input The first line contains two integers n (2 ≤ n ≤ 200) — the number of nodes in the tree and k (1 ≤ k ≤ 100) — the required distance. Then, n-1 lines follow, each containing two integers ui and vi (1 ≤ ui, vi ≤ n) — representing an edge connecting node `ui` and node `vi`. Output Output the number of unique pairs `(u, v)` such that the distance between `u` and `v` is exactly `k`. Examples Input 5 2 1 2 1 3 2 4 2 5 Output 4 Input 6 3 1 2 1 3 2 4 2 5 5 6 Output 4","solution":"def count_pairs_at_distance_k(n, k, edges): from collections import deque, defaultdict def bfs(node): distance = [-1] * (n + 1) queue = deque([(node, 0)]) distance[node] = 0 while queue: current, dist = queue.popleft() for neighbor in tree[current]: if distance[neighbor] == -1: distance[neighbor] = dist + 1 queue.append((neighbor, dist + 1)) return distance tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) total_pairs = 0 for node in range(1, n + 1): distance = bfs(node) total_pairs += distance.count(k) return total_pairs // 2 # Each pair is counted twice # Example usage: n = 5 k = 2 edges = [(1, 2), (1, 3), (2, 4), (2, 5)] print(count_pairs_at_distance_k(n, k, edges)) # Output: 4"},{"question":"Write a function that takes an integer n as input and returns a list of strings representing all possible valid combinations of n pairs of parentheses. Input - A single integer n (1 ≤ n ≤ 8), representing the number of pairs of parentheses. Output - A list of strings, each representing a valid combination of n pairs of parentheses. Examples Input 3 Output [\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"] Input 2 Output [\\"(())\\", \\"()()\\"] Note In the first example, for n = 3, there are 5 valid combinations: - \\"((()))\\" represents three pairs of nested parentheses. - \\"(()())\\" represents one pair of nested parentheses and two pairs surrounding them. - \\"(())()\\" represents two pairs of nested parentheses with one pair surrounding. - \\"()(())\\" represents one pair of nested parentheses with two pairs surrounding. - \\"()()()\\" represents three separate pairs of parentheses.","solution":"def generate_parentheses(n): Generate all combinations of n pairs of parentheses. :param n: Integer, number of pairs of parentheses :return: List of strings, each string represents a valid combination of n pairs of parentheses def backtrack(s=\'\', left=0, right=0): if len(s) == 2 * n: results.append(s) return if left < n: backtrack(s+\'(\', left+1, right) if right < left: backtrack(s+\')\', left, right+1) results = [] backtrack() return results"},{"question":"Tom has created a special digital lock for his room. The lock uses a combination of a paired sequence that switches between numbers and letters. Tom encoded a secret sequence which works on the following rules: - S[i] represents ith character in the sequence. - The odd index (starting from 1) always contains a number. - The even index always contains an alphabet character \'a\' to \'z\'. He wants to test if a given sequence is a valid sequence and follows these rules. Create a function that checks the sequence validity and returns either \\"Valid\\" or \\"Invalid\\" accordingly. Input: - The first line contains the encoded string. The string consists of digits \'0\' - \'9\' and lowercase Latin letters. The length of the string does not exceed 100. Output: - Print \\"Valid\\" if the sequence follows Tom\'s rule. - Print \\"Invalid\\" otherwise. Example: Input 1a2b3c Output Valid Input 1a2bc Output Invalid Input 1a2b2d Output Valid","solution":"def check_sequence_validity(sequence): Checks whether a given sequence is valid according to the specified rules. Args: sequence (str): The encoded string consisting of digits \'0\'-\'9\' and lowercase Latin letters. Returns: str: \\"Valid\\" if the sequence follows the specified rules, otherwise \\"Invalid\\". if len(sequence) % 2 != 0: return \\"Invalid\\" for i in range(len(sequence)): if (i % 2 == 0 and not sequence[i].isdigit()) or (i % 2 == 1 and not sequence[i].isalpha()): return \\"Invalid\\" return \\"Valid\\""},{"question":"Mira is designing a system that needs to process incoming network packets. The packets are arriving in a random order and each packet has a unique ID. Mira needs to ensure that the packets are processed in the correct order, starting from ID 1 and incrementing consecutively. If a packet with an ID cannot be processed yet (because a packet with a smaller ID has not arrived), it should wait until all previous packets have been processed. Write a function that, given the IDs of incoming packets in the order they are received, returns the order in which they are processed. Input The input is given as a list of integers, representing the IDs of incoming packets in the order they are received. Each ID is a unique positive integer. Output Return a list of integers that represents the order in which the packets are processed. Examples Input [4, 1, 3, 2] Output [1, 2, 3, 4] Input [3, 2, 1] Output [1, 2, 3] Input [1, 4, 2, 6, 3, 7, 5] Output [1, 2, 3, 4, 5, 6, 7] Note In the first sample, packet ID 1 is processed first, followed by packet ID 2, then ID 3, and finally ID 4. Although packet ID 4 arrives first, it is processed last because packets with smaller IDs must be processed first. In the second sample, packet ID 1 is processed first, followed by packet ID 2, and then ID 3. In the third sample, the packet IDs are processed in the order: 1, 2, 3, 4, 5, 6, 7, aligning with the requirement that smaller ID packets should be processed before larger ones even if they arrive later.","solution":"def process_packets(packet_ids): Given a list of packet IDs as they are received, return the order in which they should be processed, ensuring they are processed in ascending order starting from ID 1. return sorted(packet_ids)"},{"question":"Consider a matrix of integers where each element represents the cost to visit that cell. You start at the top-left cell and want to reach the bottom-right cell while minimizing the cost. You can move only right or down at each step. Write a function that determines the minimum cost to travel from the top-left to the bottom-right of the matrix. Function Signature: ```python def min_cost(matrix: List[List[int]]) -> int: pass ``` Input - A 2D list of integers `matrix` representing the costs, with dimensions m x n (1 ≤ m, n ≤ 1000). - The value in each cell of the matrix is an integer between 0 and 1000 inclusive. Output - An integer representing the minimum cost to travel from the top-left to the bottom-right of the matrix. Examples Input: ```python matrix = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` Output: ```python 7 ``` Input: ```python matrix = [ [1, 2, 5], [3, 2, 1] ] ``` Output: ```python 6 ``` Explanation: Example 1: ``` The path with minimum cost is 1 → 3 → 1 → 1 → 1, which sums to 7. ``` Example 2: ``` The path with minimum cost is 1 → 2 → 2 → 1, which sums to 6. ```","solution":"from typing import List def min_cost(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0]*n for _ in range(m)] dp[0][0] = matrix[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + matrix[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + matrix[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[m-1][n-1]"},{"question":"Given a string `s`, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. A palindrome is a word or sentence that is the same forward and backward, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters. Input The input consists of a single line containing the string `s` that you\'ll check for being a palindrome. The length of `s` is at most 1000 characters. Output Print \\"YES\\" if the given string is a palindrome; otherwise, print \\"NO\\". Examples Input A man, a plan, a canal: Panama Output YES Input race a car Output NO","solution":"def is_palindrome(s: str) -> str: Determine if the given string `s` is a palindrome. Args: s (str): The input string. Returns: str: \\"YES\\" if the string is a palindrome, otherwise \\"NO\\". # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse if filtered_chars == filtered_chars[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"You have a box that can hold `n` items, where each item has a certain weight. You are given a list of `n` integers representing the weights of these items. Your task is to distribute these items into two separate boxes such that the difference in the total weight of the items in the two boxes is minimized. Write a function that takes an integer `n` and a list of `n` integers as input, and returns the minimal difference between the total weights of the items in the two boxes. # Input - `n`: An integer representing the number of items (1 ≤ n ≤ 20) - `weights`: A list of `n` integers where each integer represents the weight of an item (1 ≤ weight ≤ 100) # Output - An integer representing the minimal difference between the total weights of the items in the two boxes. # Example Example 1 **Input:** ``` 4 1 2 3 4 ``` **Output:** ``` 0 ``` Example 2 **Input:** ``` 3 8 5 3 ``` **Output:** ``` 0 ```","solution":"def minimal_weight_difference(n, weights): total_sum = sum(weights) half_sum = total_sum // 2 dp = [False] * (half_sum + 1) dp[0] = True for weight in weights: for i in range(half_sum, weight - 1, -1): dp[i] = dp[i] or dp[i - weight] for i in range(half_sum, -1, -1): if dp[i]: return abs(total_sum - 2 * i) return total_sum"},{"question":"Dana is organizing a dart tournament. Each player scores some points during their turn, and the score is always an integer. Dana wants to find out the rank of each player after all turns are completed. The rank of a player is determined by their total score, sorted in descending order. In case two players have the same total score, they get the same rank. Dana needs to answer multiple queries regarding the rank of specific players after the tournament. Given the scores of each player after all turns, perform the necessary calculations and provide the required rank for each query. Input The first line of input contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) – the number of players and the number of queries. The second line of input contains n integers s_1, s_2, ..., s_n (0 ≤ s_i ≤ 10^9) – the total scores of each player after the tournament. The next q lines contain one integer each. The j-th line contains one integer p_j (1 ≤ p_j ≤ n) – the index of the player for the j-th query (1-based index). Output Print q integers. The j-th integer must be the rank of the player p_j after the tournament. Example Input 5 3 100 200 100 400 300 1 3 5 Output 4 4 2 Explanation Player 1 and Player 3 have the same score of 100, giving them both a rank of 4. Player 5 has a score of 300 and gets a rank of 2.","solution":"def find_ranks_and_queries(n, q, scores, queries): # Create a list of (score, index) tuples for sorting score_index_pairs = [(scores[i], i) for i in range(n)] # Sort based on score in descending order score_index_pairs.sort(reverse=True, key=lambda x: x[0]) # Initialize ranks array ranks = [0] * n current_rank = 1 for i in range(n): if i == 0: ranks[score_index_pairs[i][1]] = current_rank else: if score_index_pairs[i][0] < score_index_pairs[i - 1][0]: current_rank = i + 1 ranks[score_index_pairs[i][1]] = current_rank # Handle the queries results = [] for query in queries: results.append(ranks[query - 1]) return results"},{"question":"In a distant land, there exists a peculiar currency system known as \\"Zerobucks.\\" Each unit of Zerobucks can have a denomination that is a positive integer power of 2, such as 1, 2, 4, 8, 16, etc. For example, 3 Zerobucks can be represented as 1 + 2, and 6 Zerobucks can be represented as 2 + 4. Given an integer `S` representing the total amount of Zerobucks, determine the minimum number of Zerobuck units required to represent `S`. Write a function `minZerobucks(S)` that takes an integer `S` (1 ≤ S ≤ 10^9) and returns the minimum number of Zerobuck units required to represent it. # Input - An integer `S` that represents the total amount of Zerobucks. # Output - An integer representing the minimum number of Zerobuck units required to represent `S`. # Examples Example 1 Input: ``` S = 3 ``` Output: ``` 2 ``` Explanation: 3 can be represented as 1 + 2, which is 2 units. Example 2 Input: ``` S = 7 ``` Output: ``` 3 ``` Explanation: 7 can be represented as 1 + 2 + 4, which is 3 units. Example 3 Input: ``` S = 10 ``` Output: ``` 2 ``` Explanation: 10 can be represented as 2 + 8, which is 2 units. # Note The task can be approached by repeatedly extracting the highest power of 2 that is less than or equal to the current value of `S` and subtracting it from `S`, counting the number of such subtractions until `S` becomes zero. This problem can be efficiently solved using bit manipulation or simple iteration through powers of 2.","solution":"def minZerobucks(S): Returns the minimum number of Zerobuck units required to represent S. count = 0 # Go through each bit of the integer S while S > 0: # Increment count for each bit that is set (i.e., equals 1) count += S & 1 S >>= 1 # Right shift S by one bit return count"},{"question":"You are given an array of integers `arr` consisting of `n` elements, where each element represents the number of stones in a pile. In each move, you can select any one pile of stones and remove 1 stone from it. Your goal is to minimize the number of moves needed to reduce the total number of stones in all piles to half or less of the initial total number of stones. Write a function `min_moves_to_half(arr)` that returns the minimum number of moves needed to achieve this goal. Function Signature: ```python def min_moves_to_half(arr: List[int]) -> int: ``` # Input: - A list `arr` containing `n` integers, where `1 ≤ n ≤ 1000` and `1 ≤ arr[i] ≤ 1000`. # Output: - An integer representing the minimum number of moves required. # Example: ```python # Example 1: arr = [4, 3, 3] print(min_moves_to_half(arr)) # Output: 5 # Example 2: arr = [10, 5, 2] print(min_moves_to_half(arr)) # Output: 9 ``` # Explanation: In Example 1: - Initial total number of stones is `4 + 3 + 3 = 10`. - Half of this total is `10 / 2 = 5`. - We need at least 5 moves to remove 5 stones from the piles. In Example 2: - Initial total number of stones is `10 + 5 + 2 = 17`. - Half of this total is `17 / 2 = 8.5` (we round up to 9 because it\'s the minimum moves needed to reach half or less). - We need at least 9 moves to remove 9 stones from the piles.","solution":"def min_moves_to_half(arr): Calculate the minimum number of moves needed to reduce the total number of stones in all piles to half or less of the initial total number of stones. total_stones = sum(arr) half_stones = total_stones / 2 # Sort the array in descending order for optimal moves arr.sort(reverse=True) current_stones = total_stones moves = 0 for stones in arr: for _ in range(stones): if current_stones <= half_stones: return moves current_stones -= 1 moves += 1 return moves"},{"question":"Create a program that inputs the height and width of a matrix followed by the matrix itself and a submatrix size, and outputs the largest sum of any submatrix of the given size. Assume that the height and width of the matrix, H and W, and the submatrix size k are positive integers where 1 ≤ k ≤ min(H, W) and 1 ≤ H, W ≤ 50. The matrix elements are integers. You need to determine the maximum sum of any k x k submatrix and output that sum. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line containing three zeros. Each dataset is given in the following format: H W k matrix_row_1 matrix_row_2 :: matrix_row_H The first line gives the height H (1 ≤ H ≤ 50) and width W (1 ≤ W ≤ 50) of the matrix and the submatrix size k. The following H lines each contain W integers representing the elements of the matrix. Output For each dataset, output the maximum sum of any k x k submatrix on a single line. Example Input 4 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 3 3 2 -1 -2 -3 4 5 6 7 8 9 0 0 0 Output 54 28","solution":"def largest_submatrix_sum(H, W, k, matrix): max_sum = -float(\'inf\') # Computing sum of all k x k submatrices for i in range(H - k + 1): for j in range(W - k + 1): submatrix_sum = 0 for x in range(i, i + k): for y in range(j, j + k): submatrix_sum += matrix[x][y] max_sum = max(max_sum, submatrix_sum) return max_sum def process_multiple_datasets(input_data): result = [] lines = input_data.split(\\"n\\") idx = 0 while idx < len(lines): H, W, k = map(int, lines[idx].split()) if H == 0 and W == 0 and k == 0: break idx += 1 matrix = [] for _ in range(H): matrix.append(list(map(int, lines[idx].split()))) idx += 1 result.append(largest_submatrix_sum(H, W, k, matrix)) return result"},{"question":"An array a of integers is called round if there exists an index i such that, starting from a[i] and moving circularly towards the right (wrapping around after the last element), one obtains the array in sorted order. For example, [3, 4, 1, 2] is round because starting from a[2] (which is 1) produces [1, 2, 3, 4] which is sorted. Your task is to write a program that checks whether a given array is round. Input The first line contains a single integer n (1 ≤ n ≤ 50) — the size of the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the elements of the array. Output Print \\"YES\\" if the array is round; otherwise, print \\"NO\\". Examples Input 4 3 4 1 2 Output YES Input 4 2 1 3 4 Output NO Input 5 2 3 4 5 1 Output YES","solution":"def is_round_array(n, array): Determines if the array is round. Parameters: n (int): The number of elements in the array. array (list of int): The elements of the array. Returns: str: \\"YES\\" if the array is round, \\"NO\\" otherwise. # Double the array to handle circular movements doubled_array = array + array # Generate all possible subarrays of length n for i in range(n): subarray = doubled_array[i:i + n] if subarray == sorted(array): return \\"YES\\" return \\"NO\\""},{"question":"Given a set of products and their expiration dates, your task is to determine which products can be sold together before they expire. Each product is identified by a unique ID and has an assigned expiration date. We define a \\"valid combination\\" of products as a group of products that can all be sold on the same day before or on their expiration date. You need to find and display the largest valid combination of products. Input: - The first line contains an integer n (1 ≤ n ≤ 100) — the number of products. - Each of the following n lines contains a string and a date in the format \\"YYYY-MM-DD\\", separated by a space. The string is the product ID (1 ≤ length of product ID ≤ 10, and they are unique) and the date is the expiration date of that product. Output: - The first line should contain an integer m — the size of the largest valid combination of products. - The following m lines should list the product IDs of the largest valid combination, each on a new line. The product IDs should be listed in the order they appear in the input. Example: Input: ``` 5 apple 2023-12-01 banana 2023-11-30 cherry 2023-12-01 date 2023-11-28 elderberry 2023-12-01 ``` Output: ``` 3 apple cherry elderberry ``` Note: - You may assume that no two products have the same expiration date. - If there are multiple valid combinations of the same size, any of them can be returned.","solution":"from collections import defaultdict from datetime import datetime def largest_valid_combination(n, products): Finds the largest combination of products that can be sold together before they expire. Parameters: - n (int): The number of products. - products (list of tuples): Each tuple contains a product ID and its expiration date as a string. Returns: - m (int): The size of the largest valid combination of products. - result (list of strings): The product IDs of the largest valid combination. product_dict = defaultdict(list) # Group products by expiration date for product_id, expiration_date in products: product_dict[expiration_date].append(product_id) # Find the group with the maximum size max_group_size = 0 max_group = [] for date, product_list in product_dict.items(): if len(product_list) > max_group_size: max_group_size = len(product_list) max_group = product_list return max_group_size, max_group # Function to parse input and call the largest_valid_combination function def process_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) products = [tuple(line.split()) for line in lines[1:]] m, result = largest_valid_combination(n, products) return m, result"},{"question":"You are given an integer array `arr` and an integer `M`. Your task is to write a function that finds the number of subarrays whose sum is exactly `M`. First line contains two integers `N` (the number of elements in the array) and `M` (the desired sum). Second line contains `N` space-separated integers denoting the elements of the array. For each query, output the number of subarrays that sum to `M`. SAMPLE INPUT 5 5 1 2 3 2 1 SAMPLE OUTPUT 2","solution":"def count_subarrays_with_sum(arr, M): Returns the number of subarrays whose sum is exactly M. Parameters: arr (list of int): List of integers representing the array. M (int): The desired subarray sum. Returns: int: The count of subarrays with sum equal to M. count = 0 curr_sum = 0 prefix_sums = {0: 1} for num in arr: curr_sum += num if (curr_sum - M) in prefix_sums: count += prefix_sums[curr_sum - M] if curr_sum in prefix_sums: prefix_sums[curr_sum] += 1 else: prefix_sums[curr_sum] = 1 return count # Example usage N, M = 5, 5 arr = [1, 2, 3, 2, 1] print(count_subarrays_with_sum(arr, M)) # Output: 2"},{"question":"You are given three integers, A, B, and X. Your task is to determine whether you can construct an array consisting of distinct integers such that the array contains exactly X elements with each element being greater than or equal to A and less than or equal to B. If it is possible, print \\"Yes\\" followed by the constructed array in ascending order. Otherwise, print \\"No\\". Constraints: * 1 leq A leq B leq 10^9 * 1 leq X leq 10^5 Input: Your input is read from Standard Input in the following format: A B X Output: If it is possible, print \\"Yes\\" followed by X space-separated integers in ascending order. If it is not possible, print \\"No\\". Examples: Input: 1 5 3 Output: Yes 1 2 3 Input: 10 15 7 Output: No Input: 3 10 8 Output: Yes 3 4 5 6 7 8 9 10","solution":"def can_construct_array(A, B, X): Determines if it\'s possible to construct an array of X distinct integers between A and B inclusive and returns the result. Parameters: A (int): The minimum value of the range. B (int): The maximum value of the range. X (int): The number of distinct integers needed. Returns: str: \\"Yes\\" followed by the array, or \\"No\\" if it\'s not possible. if B - A + 1 >= X: array = list(range(A, A + X)) return \\"Yesn\\" + \\" \\".join(map(str, array)) else: return \\"No\\""},{"question":"You are given an array of integers. Your task is to determine the largest sum of distinct integers that can be formed by selecting exactly K elements from the array. If it is not possible to select exactly K distinct elements, output -1. Input The first line contains two integers, N and K (1 ≤ K ≤ N ≤ 1000) — the number of elements in the array and the number of elements to be selected. The second line contains N integers, a_1, a_2, ⋅⋅⋅, a_N (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Output a single integer — the maximum sum of K distinct elements, or -1 if it is not possible to select exactly K distinct elements. Examples Input 5 3 1 2 2 3 4 Output 9 Input 4 4 1 1 1 1 Output -1 Note In the first example, you can select the numbers 1, 3, and 4 to get the sum 1 + 3 + 4 = 8. Or you can select 2, 3, and 4 to get a larger sum 2 + 3 + 4 = 9. In the second example, there are not enough distinct elements to select 4 elements, so the output is -1.","solution":"def largest_sum_of_k_distinct_elements(n, k, arr): Returns the largest sum of exactly K distinct integers from the array. If it\'s not possible to select exactly K distinct elements, returns -1. distinct_elements = list(set(arr)) # get unique elements if len(distinct_elements) < k: return -1 # not enough distinct elements to select K of them distinct_elements.sort(reverse=True) # sort in descending order return sum(distinct_elements[:k])"},{"question":"In a dense forest, a group of friends is playing a game of hide-and-seek. The forest is represented as a 2D grid where each cell is either empty (\'.\') or contains a tree (\'T\'). One of the friends, Bob, is hiding, and his initial position is marked with a \'B\'. The seeker, Alice, starts at a position marked with an \'A\'. Both Bob and Alice can move up, down, left, or right to an adjacent cell, but they cannot move through trees. Given the forest grid, you need to determine if Alice can reach Bob. If she can, print \\"YES\\", otherwise, print \\"NO\\". Input format - The first line contains two integers, N and M, representing the number of rows and columns in the grid. - The next N lines each contain M characters, representing the grid. Each character is either \'.\', \'T\', \'B\', or \'A\'. Output format Print \\"YES\\" if Alice can reach Bob, otherwise print \\"NO\\". Input constraint 1 ≤ N, M ≤ 100 Example 4 4 A. T. .TT. ..TB TTTT Here the output is NO, as there is no path for Alice to reach Bob. SAMPLE INPUT 3 4 A..T .T.. ..TB SAMPLE OUTPUT YES Explanation In the given example, Alice can reach Bob by moving right, down, and then right again to reach Bob’s position. Thus the result is \'YES\'.","solution":"from collections import deque def can_alice_reach_bob(grid, start, end): Determines if Alice (A) can reach Bob (B) in a forest represented by a 2D grid. Args: grid (list of list of str): The 2D grid representing the forest. start (tuple of int): The starting coordinates of Alice (A). end (tuple of int): The coordinates of Bob (B). Returns: str: \\"YES\\" if Alice can reach Bob, otherwise \\"NO\\". N = len(grid) M = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() if (x, y) == end: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] != \'T\': visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\" def process_grid(N, M, grid): start = None end = None for i in range(N): for j in range(M): if grid[i][j] == \'A\': start = (i, j) elif grid[i][j] == \'B\': end = (i, j) return can_alice_reach_bob(grid, start, end)"},{"question":"A string is considered \\"well-balanced\\" if it contains the same number of each type of character. Given a string consisting of three types of characters: \'(\', \')\', and \'*\', determine if the string can be transformed into a well-balanced string by changing some or all \'*\' characters into either \'(\' or \')\'. A well-balanced string should have an equal number of \'(\' and \')\' at the end. For example, the string \\"(*))(*\\" can be transformed into \\"(())()\\" which is well-balanced. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 100), where each character is either \'(\', \')\', or \'*\'. The length of the string is at most 100. Output Print \\"YES\\" if the string can be transformed into a well-balanced string, otherwise print \\"NO\\". Examples Input (*)* Output YES Input *)) Output NO Input ((**)) Output YES","solution":"def is_well_balanced(s): Determines if the string can be transformed into a well-balanced string. `s` is a string consisting of \'(\', \')\', and \'*\' characters. Returns \\"YES\\" if the string can be transformed into a well-balanced string, otherwise \\"NO\\". def can_be_well_balanced(s): low = high = 0 for char in s: if char == \'(\': low += 1 high += 1 elif char == \')\': low -= 1 high -= 1 else: low -= 1 high += 1 if high < 0: return False low = max(low, 0) return low == 0 return \\"YES\\" if can_be_well_balanced(s) else \\"NO\\""},{"question":"Given an integer array `nums`, you need to implement a function that determines the length of the shortest contiguous subarray, such that the sum of the elements in this subarray is at least `target`. Function Signature: ```python def min_subarray_len(target: int, nums: List[int]) -> int: ``` # Input: - `target` (1 ≤ target ≤ 10^9) - the target sum. - `nums` (1 ≤ |nums| ≤ 10^5) - an integer array where each element is between 1 and 10^4 inclusive. # Output: - Return the length of the shortest contiguous subarray whose sum is at least `target`. If no such subarray exists, return `0`. # Examples: ```python assert min_subarray_len(7, [2, 3, 1, 2, 4, 3]) == 2 assert min_subarray_len(4, [1, 4, 4]) == 1 assert min_subarray_len(11, [1, 1, 1, 1, 1, 1, 1, 1]) == 0 ``` # Explanation: 1. In the first example, the subarray [4,3] has the minimal length under the problem constraint. 2. In the second example, the subarray [4] with length 1 is the answer. 3. In the third example, no subarray exists with a sum at least 11, so the function returns 0. # Notes: - Consider utilizing sliding window technique for optimal solution. - Ensure your solution is efficient enough to handle large inputs within the time limits.","solution":"from typing import List def min_subarray_len(target: int, nums: List[int]) -> int: n = len(nums) left = 0 sum_subarray = 0 min_length = float(\'inf\') for right in range(n): sum_subarray += nums[right] while sum_subarray >= target: min_length = min(min_length, right - left + 1) sum_subarray -= nums[left] left += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"In a programming language, a string is typically a sequence of characters. Write a program to determine if a given string is a palindrome. A palindrome is a string that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Input The input consists of a single string S that may contain spaces, punctuation, and will have a maximum length of 1000 characters. Output Output \\"YES\\" if the string is a palindrome and \\"NO\\" otherwise. Example Input: A man, a plan, a canal, Panama Output: YES Input: Hello, World! Output: NO","solution":"import re def is_palindrome(s): Determines if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. Args: s (str): The input string. Returns: str: \\"YES\\" if the string is a palindrome, \\"NO\\" otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return \\"YES\\" if cleaned_s == cleaned_s[::-1] else \\"NO\\""},{"question":"Given an array of integers, determine whether the array can be made strictly increasing by modifying at most one element. A strictly increasing array is an array where each subsequent element is greater than the previous one. # Input - The first line contains a single integer `t` (1 ≤ t ≤ 10^4), the number of test cases. - Each of the next `t` lines contains an integer `n` (2 ≤ n ≤ 10^5), the length of the array, followed by `n` space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the array. # Output - For each test case, output \\"YES\\" if the array can be made strictly increasing by modifying at most one element, otherwise output \\"NO\\". # Examples Input ``` 3 5 1 2 5 4 5 4 1 2 3 4 3 3 3 3 ``` Output ``` YES YES NO ``` # Note In the first test case, by changing `4` to `6`, the array becomes `[1, 2, 5, 6, 5]`, which is strictly increasing. In the second test case, the array is already strictly increasing. In the third test case, no single modification can make the array strictly increasing.","solution":"def can_be_strictly_increasing(arr): Determine if the array can be made strictly increasing with at most one modification. count = 0 n = len(arr) for i in range(1, n): if arr[i] <= arr[i-1]: count += 1 if count > 1: return \\"NO\\" if i == 1 or arr[i] > arr[i-2]: arr[i-1] = arr[i-2] else: arr[i] = arr[i-1] return \\"YES\\" def process_test_cases(t, cases): results = [] for case in cases: n, arr = case result = can_be_strictly_increasing(arr) results.append(result) return results"},{"question":"Maze Pathfinder problem Alice found herself trapped inside a maze filled with numerous passageways and dead ends. The maze is represented as a grid consisting of R rows and C columns. She must find her way out from the starting position (Sx, Sy) to the goal position (Gx, Gy). Alice can move in four directions: up, down, left, or right, but she cannot move diagonally. Create a program that finds the minimum number of steps required for Alice to reach the goal. If it is impossible for Alice to reach the goal, output -1. input The input consists of multiple datasets. Each dataset is given in the following format. Each dataset consists of R + 2 rows. Two integers R and C (2 ≤ R, C ≤ 1000) are written on the first line of the input, separated by blanks. R represents the number of rows, and C represents the number of columns in the maze. In the next R lines, a string of exactly C characters is given. Each character is either \'.\' (representing an open path) or \'#\' (representing a blocked path). The last two lines contain four integers Sx, Sy, Gx, Gy (0 ≤ Sx, Gx < R, 0 ≤ Sy, Gy < C), where (Sx, Sy) is the starting position and (Gx, Gy) is the goal position. Please note that the grid is zero-indexed. There can be multiple datasets. The end of input is denoted by a line containing two zeros separated by blanks. output For each dataset, output an integer indicating the minimum number of steps required to reach the goal. If it is impossible to reach the goal, output -1. Input / output example Input example 5 5 ..... .#. .#.#. .#... ..... 0 0 4 4 5 5 # #...# #.# #.#.# # 0 1 3 3 0 0 Output example 8 -1 Explanation In the first example, the shortest path from (0, 0) to (4, 4) takes 8 steps. In the second example, there is no way to reach from (0, 1) to (3, 3), so the output is -1. Note: The example input and output should help understand the grid layout and the pathfinding process.","solution":"from collections import deque def min_steps(maze, start, goal): R, C = len(maze), len(maze[0]) Sx, Sy = start Gx, Gy = goal directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(Sx, Sy, 0)]) # (current_x, current_y, current_steps) visited = set() visited.add((Sx, Sy)) while queue: x, y, steps = queue.popleft() if (x, y) == (Gx, Gy): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < R and 0 <= ny < C and maze[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 def process_input(input_str): lines = input_str.strip().split(\'n\') index = 0 results = [] while index < len(lines): R, C = map(int, lines[index].split()) if R == 0 and C == 0: break maze = [] for i in range(R): maze.append(lines[index + 1 + i]) Sx, Sy, Gx, Gy = map(int, lines[index + 1 + R].split()) results.append(min_steps(maze, (Sx, Sy), (Gx, Gy))) index += R + 2 return results"},{"question":"Anna has decided to set up her own bakery shop and sell her famous cookies. She wants to create a promotion that offers a discount based on the total number of cookies a customer buys. To simplify her task, she has decided to use the following discount scheme: - If a customer buys exactly X cookies, they receive Y cookies for free. - This offer is only applicable in specific promotions and Anna has T such promotions planned. You need to calculate the total number of cookies a customer ends up with (including the free cookies) for each promotion. # Input The first line of the input contains the integer T (1 ≤ T ≤ 10^4) — the number of promotions. Each of the following T lines contains two integers X_i and Y_i (1 ≤ X_i, Y_i ≤ 10^9) — the number of cookies a customer buys and the number of free cookies they receive in the i-th promotion. # Output Print T lines. Each line should contain one integer — the total number of cookies a customer ends up with (both bought and free cookies) in the i-th promotion. # Example Input: ``` 3 5 2 1 1 10 5 ``` Output: ``` 7 2 15 ``` # Note For the first example promotion, the customer buys 5 cookies and receives 2 free cookies, making a total of 7 cookies. For the second example promotion, the customer buys 1 cookie and receives 1 free cookie, making a total of 2 cookies. For the third example promotion, the customer buys 10 cookies and receives 5 free cookies, making a total of 15 cookies.","solution":"def total_cookies(promotions): Calculates the total number of cookies a customer ends up with (including free cookies) for each promotion. Args: promotions (list of tuples): List of tuples where each tuple contains two integers X and Y. Returns: list: List of total cookies including free cookies for each promotion. totals = [] for X, Y in promotions: totals.append(X + Y) return totals def process_input(input_str): Processes the input string and returns a list of promotions. Args: input_str (str): Input string containing the number of promotions followed by pairs of X and Y. Returns: list: List of tuples where each tuple contains two integers X and Y. lines = input_str.strip().split(\'n\') T = int(lines[0]) promotions = [tuple(map(int, line.split())) for line in lines[1:T+1]] return promotions"},{"question":"A large bank is implementing a secure banking system to manage customer transactions. The system must validate whether the customer transaction sequence meets the bank\'s policy defined as follows: 1. Each customer\'s transaction sequence is given as a list of integers. 2. The sequence starts from zero (initial balance). 3. Each transaction is either a deposit (positive integer) or a withdrawal (negative integer). 4. At any point in the transaction sequence, the balance must not drop below zero. Your task is to write a function that checks if a given transaction sequence is valid according to the bank\'s policy. You need to implement a function `is_valid_transaction(sequence)`. The function takes a list of integers `sequence` as input and returns a boolean indicating whether the transaction sequence is valid. Input - A list of integers `sequence` (1 ≤ length of sequence ≤ 10^5, -10^6 ≤ each element in sequence ≤ 10^6) Output - A boolean value `True` if the sequence is valid according to the bank\'s policy, `False` otherwise. Examples - Input: [100, -50, -50, 200, -100] - Output: True - Input: [100, -150, 50, -50, 100] - Output: False Note In the first example, the sequence starts with a deposit of 100 units, which leaves the balance at 100. The balance never drops below zero throughout the sequence. In the second example, the sequence contains a withdrawal of 150 units immediately after a deposit of only 100 units, resulting in a negative balance. Therefore, the sequence is invalid.","solution":"def is_valid_transaction(sequence): Checks if the given transaction sequence is valid. :param sequence: List of integers representing the transaction sequence. :return: Boolean indicating whether the sequence is valid. balance = 0 for transaction in sequence: balance += transaction if balance < 0: return False return True"},{"question":"You are given an array of integers and a number k. Your task is to write a function that finds the k-th smallest element in the array. The array may contain duplicate elements, but each element is considered unique for the purpose of this problem (i.e., treat the 1st smallest element as the smallest, the 2nd smallest as the second smallest including duplicates, etc.). Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the size of the array and the 1-indexed position of the smallest element you need to find. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Output Output the k-th smallest element of the given array. Examples Input 6 3 7 10 4 3 20 15 Output 7 Input 7 4 7 10 4 3 20 15 3 Output 7 Input 8 5 2 1 5 3 2 5 6 8 Output 5 Input 4 1 2 2 2 2 Output 2","solution":"def kth_smallest_element(n, k, array): Returns the k-th smallest element in the array. array.sort() return array[k - 1]"},{"question":"Write a function that checks if a string is a pangram or not. A pangram is a sentence that contains every single letter of the alphabet at least once. For example, the sentence \\"The quick brown fox jumps over the lazy dog\\" is a pangram because it includes every letter in the English alphabet. Your task is to implement a function `is_pangram(sentence)` that returns `True` if the given sentence is a pangram, and `False` otherwise. # Input * A single string `sentence` which contains printable ASCII characters and has a length between 1 and 1000, inclusive. # Output * Return `True` if the sentence is a pangram, `False` otherwise. # Function signature ```python def is_pangram(sentence: str) -> bool: ``` # Example Input ```python \\"The quick brown fox jumps over the lazy dog\\" ``` Output ```python True ``` # Note In the above example, the input string contains every letter of the English alphabet at least once, so the function returns `True`. Input ```python \\"Hello World\\" ``` Output ```python False ``` # Note In this example, the input string does not contain every letter of the English alphabet (for instance, it is missing \'a\', \'b\', \'c\', etc.), so the function returns `False`.","solution":"def is_pangram(sentence: str) -> bool: Returns True if the given sentence is a pangram, False otherwise. A pangram is a sentence that contains every single letter of the English alphabet at least once. alphabet = set(\\"abcdefghijklmnopqrstuvwxyz\\") sentence_letters = set(sentence.lower()) return alphabet.issubset(sentence_letters)"},{"question":"You are given an array of integers of length n. You have to perform m operations on this array. There are two types of operations: 1. Add a given value to each element between two given indices. 2. Query the sum of elements between two given indices. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100000) — the number of elements in the array and the number of operations. - The second line contains n integers a1, a2, ..., an — the initial array. - The next m lines describe the operations. Each operation is described by three or four integers. - If the first integer is 1, the operation adds a value to each element in a range. The next three integers are l, r, and d (1 ≤ l ≤ r ≤ n, -1000000000 ≤ d ≤ 1000000000). - If the first integer is 2, the operation queries the sum of elements in a range. The next two integers are l and r (1 ≤ l ≤ r ≤ n). Output - For each operation of the second type, print the result of the query. Examples Input 5 4 1 2 3 4 5 1 2 4 3 2 1 5 1 3 5 -2 2 1 5 Output 21 17 Note In the first example, the array initially is [1, 2, 3, 4, 5]. After the first operation, it becomes [1, 5, 6, 7, 5]. The first query asks for the sum of elements between 1 and 5, which is 1 + 5 + 6 + 7 + 5 = 24. After the third operation, it becomes [1, 5, 4, 5, 3]. The second query asks for the sum of elements between 1 and 5, which is 1 + 5 + 4 + 5 + 3 = 18.","solution":"def perform_operations(n, m, arr, operations): result = [] for op in operations: if op[0] == 1: _, l, r, d = op for i in range(l - 1, r): arr[i] += d elif op[0] == 2: _, l, r = op result.append(sum(arr[l - 1:r])) return result"},{"question":"You are tasked with developing a new application that processes strings. Your function needs to determine the longest substring of a given string that fulfills the following condition: - The substring contains at most two distinct characters. For example, given the string \\"eceba\\", the longest substring that contains at most two distinct characters is \\"ece\\", which has length 3. Write a function that takes a single argument, a string s, and returns the length of the longest substring that meets the criteria. Input format A single line containing the string s. Output format A single integer representing the length of the longest substring with at most two distinct characters. Constraints 0 ≤ |s| ≤ 100,000 The string s consists of English letters. SAMPLE INPUT abcabcabc SAMPLE OUTPUT 2 EXPLANATION The longest substrings where there are at most two distinct characters are \\"ab\\", \\"bc\\", \\"ca\\" each of length 2. Since there are multiple such substrings, the length is 2. Another example: SAMPLE INPUT ccaabbb SAMPLE OUTPUT 5 EXPLANATION The longest substring where there are at most two distinct characters is \\"aabbb\\" with length 5.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring with at most two distinct characters. if len(s) == 0: return 0 left = 0 right = 0 max_length = 0 char_map = {} while right < len(s): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Given a list of integers, you are to find the smallest number that can be obtained by concatenating some or all of the integers in the list. The result should be output in its numerical form. If there are multiple ways to achieve the smallest number, any of them can be accepted. Constraints: 1 ≤ N ≤ 100 0 ≤ A[i] ≤ 1000 Input: The first line contains the integer N, the number of elements in the list. The second line contains the N integers, separated by spaces. Output: A single integer representing the smallest number that can be obtained by concatenating some or all the integers in the list. SAMPLE INPUT 3 3 30 34 SAMPLE OUTPUT 30334 Explanation The smallest number that can be formed is \\"30334\\" by concatenating \\"30\\" and \\"334\\".","solution":"def smallest_concatenated_number(nums): Given a list of integers, returns the smallest number that can be obtained by concatenating some or all of the integers in the list. from functools import cmp_to_key # Custom comparator to decide which combination forms a smaller number def compare(x, y): if x + y < y + x: return -1 elif x + y > y + x: return 1 else: return 0 # Convert numbers to strings to concatenate and compare nums = list(map(str, nums)) # Sort using the custom comparator nums.sort(key=cmp_to_key(compare)) # Join sorted numbers result = \'\'.join(nums) # Convert to integer to remove any leading zeros and to return as a number return int(result)"},{"question":"You are given two strings, one named `source` and another named `target`. Both strings only contain lowercase English letters and are not empty. Your task is to determine if `target` can be obtained by deleting some characters from `source` without reordering the remaining characters. Input The first line contains the string `source` (1 ≤ |source| ≤ 10^5). The second line contains the string `target` (1 ≤ |target| ≤ 10^5). Output Print \\"YES\\" if `target` can be obtained from `source` by deleting some characters (without reordering the remaining characters), otherwise print \\"NO\\". Examples Input abpcplea apple Output YES Input abc acb Output NO Note In the first example, you can obtain \\"apple\\" from \\"abpcplea\\" by deleting characters \'b\', \'c\', \'p\', and \'e\'. In the second example, \\"acb\\" cannot be obtained from \\"abc\\" by deleting any characters because the order does not match.","solution":"def is_subsequence(source, target): Determines if `target` can be obtained by deleting some characters from `source` without reordering the remaining characters. Parameters: source (str): The source string. target (str): The target string. Returns: str: \\"YES\\" if `target` is a subsequence of `source`, otherwise \\"NO\\". it = iter(source) return \\"YES\\" if all(char in it for char in target) else \\"NO\\""},{"question":"You have a string `s` consisting of lowercase and uppercase English letters. A string is considered beautiful if at least one of the following conditions is met: 1. All letters in the string are vowels (a, e, i, o, u, A, E, I, O, U). 2. The string is a palindrome (it reads the same forward and backward). 3. The string contains both lowercase and uppercase letters. Your task is to determine whether the given string is beautiful. Input The input consists of a single line containing the string `s` (1 ≤ |s| ≤ 10^5), where `|s|` is the length of the string. Output Print \\"Beautiful\\" (without quotes) if the string is beautiful. Otherwise, print \\"Not Beautiful\\". Examples Input aEi Output Beautiful Input radar Output Beautiful Input HELLO Output Not Beautiful Explanation In the first example, the string contains both lowercase and uppercase letters. In the second example, the string is a palindrome. In the third example, the string does not meet any of the conditions for being beautiful.","solution":"def is_beautiful(s): Determine if the string s is beautiful based on the given conditions. vowels = set(\'aeiouAEIOU\') # Check if all characters are vowels if all(char in vowels for char in s): return \\"Beautiful\\" # Check if the string is a palindrome if s == s[::-1]: return \\"Beautiful\\" # Check if the string contains both lowercase and uppercase letters has_lowercase = any(char.islower() for char in s) has_uppercase = any(char.isupper() for char in s) if has_lowercase and has_uppercase: return \\"Beautiful\\" return \\"Not Beautiful\\""},{"question":"Implement a library management system for a small local library. The system should keep track of books, their authors, available copies, and members of the library. Additionally, the system should manage the borrowing and returning of books. You are required to write a set of functions to operate the library system. **Requirements:** 1. The library should support adding new books. Each book has a unique identifier (book_id), a title, an author, and the number of copies available. 2. Members can register to the library. Each member has a unique identifier (member_id) and a name. 3. Members can borrow books, provided that copies are available. Upon borrowing, the system should decrease the availability count of the book. 4. Members can return books they have borrowed. Upon returning, the book\'s availability count should be incremented. 5. The system should not allow a member to borrow more than one copy of the same book simultaneously. 6. The system should not allow borrowing a book unless copies are available. 7. The system should not allow returning a book that wasn\'t borrowed by the member. **Input:** The input will contain multiple commands in the following format: ``` add_book book_id title author copies register_member member_id name borrow_book member_id book_id return_book member_id book_id ``` - `add_book book_id title author copies`: Add a new book with `book_id`, `title`, `author`, and `number of copies` available. - `register_member member_id name`: Register a new member with `member_id` and `name`. - `borrow_book member_id book_id`: Borrow the book with `book_id` by the member with `member_id`. - `return_book member_id book_id`: Return the book with `book_id` by the member with `member_id`. **Output:** For each `borrow_book` and `return_book` command, the system should print: - `Success`: if the operation was successful. - `Fail`: if the operation failed due to invalid conditions (e.g., no available copies, book not borrowed, etc.). **Example:** Input: ``` add_book 1 \\"The Hobbit\\" \\"J.R.R. Tolkien\\" 5 add_book 2 \\"1984\\" \\"George Orwell\\" 3 register_member 101 \\"Alice Johnson\\" register_member 102 \\"Bob Smith\\" borrow_book 101 1 borrow_book 102 2 borrow_book 101 2 borrow_book 101 1 return_book 101 1 return_book 101 2 ``` Output: ``` Success Success Success Fail Success Success ``` **Note:** - During the process, members cannot borrow more copies than are available, and they cannot return books they haven\'t borrowed. - Library should keep an accurate list of available copies and the borrowing status per member.","solution":"class Library: def __init__(self): self.books = {} self.members = {} self.borrowed = {} def add_book(self, book_id, title, author, copies): if book_id not in self.books: self.books[book_id] = { \'title\': title, \'author\': author, \'copies\': copies, \'available\': copies } else: self.books[book_id][\'copies\'] += copies self.books[book_id][\'available\'] += copies def register_member(self, member_id, name): if member_id not in self.members: self.members[member_id] = name self.borrowed[member_id] = {} def borrow_book(self, member_id, book_id): if book_id in self.books and member_id in self.members: if self.books[book_id][\'available\'] > 0 and book_id not in self.borrowed[member_id]: self.books[book_id][\'available\'] -= 1 self.borrowed[member_id][book_id] = True return \'Success\' else: return \'Fail\' return \'Fail\' def return_book(self, member_id, book_id): if book_id in self.books and member_id in self.members: if book_id in self.borrowed[member_id]: self.books[book_id][\'available\'] += 1 del self.borrowed[member_id][book_id] return \'Success\' else: return \'Fail\' return \'Fail\'"},{"question":"You are given an array `a` of size `N` and an integer `K`. Create a function that finds the sum of each possible sub-array of size `K` and prints these sums in order from the beginning. For instance, given the array `{2, 3, 5, 1, 4}` and `K = 2`, the sub-arrays of size `K = 2` are `{2, 3}`, `{3, 5}`, `{5, 1}`, `{1, 4}`, and the sums of these sub-arrays are 5, 8, 6, and 5 respectively. Constraints * 1 leq N leq 10^5 * 1 leq K leq 10^5 * 1 leq a_i leq 10^3 * K leq N Input The input is given in the following format: N K a_1 a_2 ... a_N Output Print a sequence of the sums in one line. Print a space character between adjacent elements. Example Input 5 2 2 3 5 1 4 Output 5 8 6 5","solution":"def subarray_sums(arr, K): Finds the sum of each possible sub-array of size K and prints these sums in order. Parameters: arr (List[int]): Array of integers K (int): Size of the sub-arrays Returns: List[int]: Sum of each sub-array of size K N = len(arr) result = [] current_sum = sum(arr[:K]) result.append(current_sum) for i in range(1, N - K + 1): current_sum += arr[i + K - 1] - arr[i - 1] result.append(current_sum) return result"},{"question":"Muhammad is practicing his string manipulation skills. He came across a challenge where he has to detect if two given strings are anagrams of each other. Can you help Muhammad with a program to solve this problem? Two strings are anagrams if they use the same characters with the same frequency, but potentially in a different order. Input You are given two strings a and b, one per line (1 ≤ |a|, |b| ≤ 1000). Strings a and b are composed of lowercase English letters only. Output Print \\"YES\\" if the two strings are anagrams of each other, otherwise print \\"NO\\". Examples Input listen silent Output YES Input hello world Output NO Input anagram nagaram Output YES","solution":"def are_anagrams(a, b): Checks if two given strings are anagrams of each other. Args: a (str): First input string. b (str): Second input string. Returns: str: \\"YES\\" if the strings are anagrams, otherwise \\"NO\\". return \\"YES\\" if sorted(a) == sorted(b) else \\"NO\\""},{"question":"Alice has recently started training for a marathon and she wants to track her running progress. She runs on a straight path every day and keeps a log of her running distances. Each entry in the log records the distance she ran on a particular day. Alice wants to know how many unique total distances she can achieve if she sums up the distances of any non-empty subset of her daily runs. For example, if her log has entries [1, 2, 3], the possible unique total distances are {1, 2, 3, 3 (1+2), 4 (1+3), 5 (2+3), 6 (1+2+3)} = {1, 2, 3, 4, 5, 6}. Write a program that takes an input list of daily distances and outputs the number of unique total distances that can be achieved by summing any non-empty subset of the daily distances. Input Input is given from Standard Input in the following format: n d_1 d_2 ... d_n Where: - n is an integer representing the number of days in Alice\'s log. - d_1, d_2, ..., d_n are integers representing the distances run each day. Constraints - 1 ≤ n ≤ 30 - 1 ≤ d_i ≤ 100 Output Print an integer representing the number of unique total distances that can be achieved. Example Input 3 1 2 3 Output 6","solution":"def unique_total_distances(n, distances): Returns the number of unique total distances that can be achieved by summing any non-empty subset of the distances. from itertools import combinations unique_sums = set() for r in range(1, n + 1): for subset in combinations(distances, r): unique_sums.add(sum(subset)) return len(unique_sums)"},{"question":"Problem description: Alice loves collecting different types of crystals, and she stores them in a unique spherical container. Each crystal has an associated integer value representing its beauty. Alice observes that when she places two crystals close enough, their combined beauty is the absolute difference of their beauty values. Alice has \'n\' crystals with provided beauty values and she wants to determine the maximum possible combined beauty from any pair of crystals in her collection. Input The first line contains the number of test cases, t. Each test case consists of two lines: - The first line contains an integer n denoting the number of crystals. - The second line contains n space-separated integers representing the beauty values of the crystals. Output For each of the t test cases, print the maximum possible combined beauty from any pair of crystals. Constraints 1 <= t <= 10^5 2 <= n <= 10^5 1 <= beauty values <= 10^9 The total number of beauty values across all test cases does not exceed 10^6 Example Input: 2 3 3 1 4 4 10 12 15 10 Output: 3 5","solution":"def max_combined_beauty(test_cases): Determines the maximum possible combined beauty from any pair of crystals for each test case. results = [] for crystals in test_cases: max_beauty = max(crystals) min_beauty = min(crystals) results.append(max_beauty - min_beauty) return results def process_input(input_data): lines = input_data.split(\\"n\\") t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) index += 1 crystals = list(map(int, lines[index].split())) index += 1 test_cases.append(crystals) return test_cases"},{"question":"You are given a sequence of numbers and an integer `k`. Your goal is to determine the maximum sum of `k` consecutive elements in the sequence. Input The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 10^5), where `n` is the number of elements in the sequence, and `k` is the number of consecutive elements to be summed. The second line contains `n` integers, which are the elements of the sequence. Each integer in the sequence will be in the range -10^4 to 10^4. Output Output a single integer that represents the maximum sum of `k` consecutive elements in the sequence. Examples Input 8 3 2 1 5 1 3 2 -6 4 Output 9 Note For the given example, one possible subarray of length `3` with the maximum sum is `[5, 1, 3]`, so the output is 9.","solution":"def max_sum_of_k_consecutive_elements(n, k, sequence): Finds the maximum sum of k consecutive elements in the given sequence. Args: n (int): The number of elements in the sequence. k (int): The number of consecutive elements to be summed. sequence (list): The list of integers representing the sequence. Returns: int: The maximum sum of k consecutive elements. current_sum = sum(sequence[:k]) max_sum = current_sum for i in range(k, n): current_sum = current_sum + sequence[i] - sequence[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a list of P integer numbers representing the ratings of different players in a tournament. The tournament system involves pairing players up based on their ratings to ensure fair and competitive matches. Each player is paired with another player who has the closest rating to them, but without exceeding a specified maximum difference D . The goal is to form the maximum number of valid pairs. A pair is considered valid if the difference in ratings between the two players does not exceed D . Each player can be part of only one pair. Write a program that takes the list of player ratings and the maximum difference D , and returns the maximum number of valid pairs that can be formed. # Input The first line contains two integers P and D , where P is the number of players (1 ≤ P ≤ 100,000) and D is the maximum allowed difference in ratings within a pair (1 ≤ D ≤ 10,000). The second line contains P integers representing the ratings of the players. Each rating is a positive integer. # Output Output an integer representing the maximum number of valid pairs that can be formed. # Example Input 1: ``` 5 3 1 4 2 3 7 ``` Output 1: ``` 2 ``` Explanation 1: The maximum number of valid pairs is 2. The pairs can be (1, 2) and (3, 4). The player with rating 7 cannot be paired with anyone. Input 2: ``` 6 4 8 12 3 5 9 2 ``` Output 2: ``` 3 ``` Explanation 2: The maximum number of valid pairs is 3. The pairs can be (2, 3), (5, 9), and (8, 12).","solution":"def max_valid_pairs(P, D, ratings): Returns the maximum number of valid pairs given the player ratings and the maximum allowed difference in ratings. ratings.sort() i, j = 0, 1 pairs = 0 while j < P: if ratings[j] - ratings[i] <= D: pairs += 1 i += 2 j += 2 else: i += 1 j = i + 1 return pairs"},{"question":"You are tasked with writing a python program to help a fisherman organize his daily catches. Every day, the fisherman goes to the lake and catches several fish. Each fish has a certain weight, and the fisherman wants to maximize the total weight of fish he brings home each day. However, the fisherman has a weight limit on how much he can carry in his bucket per day. Given the weights of the fish caught each day and the maximum weight limit of the bucket, you need to determine the maximum total weight of fish that the fisherman can bring home each day. The fisherman can only bring whole fish, meaning he cannot take part of a fish. Input The first line contains two integers d and w (1 ≤ d ≤ 30, 1 ≤ w ≤ 10^5) — the number of days and the maximum weight the fisherman can carry each day. For the next d lines, the i-th line contains an integer n_i (1 ≤ n_i ≤ 100), the number of fish caught on the i-th day, followed by n_i integers f_ij (1 ≤ f_ij ≤ 10^4) — the weights of the fish caught on the i-th day. Output Output d lines, with each line containing a single integer — the maximum total weight of fish the fisherman brings home for the i-th day. Examples Input 3 50 4 10 20 30 40 3 5 10 15 5 1 2 3 4 5 Output 50 30 15 Input 2 35 5 5 10 20 25 7 6 8 9 10 11 13 15 Output 35 35 Note In the first example, on the first day, the fisherman can carry two fish weighing 30 and 20 in total or 10 and 40 totaling exactly 50. On the second day, the fisherman can carry all the fish without exceeding 30. On the third day, the fisherman can carry fish of weights 5, 4, 3, 2, and 1, totaling 15. In the second example, the fisherman has multiple options to reach the weight limit of 35 on both days. The combinations that add to 35 can include 20 and 15 (both days).","solution":"def max_weight_per_day(d, w, catches): def knapsack(items, capacity): dp = [0] * (capacity + 1) for item in items: for j in range(capacity, item - 1, -1): dp[j] = max(dp[j], dp[j - item] + item) return dp[capacity] results = [] for day in catches: max_weight = knapsack(day, w) results.append(max_weight) return results # Example usage: d = 3 w = 50 catches = [ [10, 20, 30, 40], [5, 10, 15], [1, 2, 3, 4, 5] ] print(max_weight_per_day(d, w, catches)) # Expected output: [50, 30, 15]"},{"question":"You are given a grid of size n x m filled with non-negative integers. A robot is initially positioned at the top-left corner of the grid (position (1, 1)) and can move either right or down at any point in time. The robot attempts to reach the bottom-right corner of the grid (position (n, m)) with a path that maximizes the sum of all the numbers on the path. Your task is to determine the maximum possible sum the robot can achieve when it follows the optimal path from (1, 1) to (n, m). Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid respectively. The next n lines contain m integers each — the grid itself. Each number on the grid is between 0 and 100 inclusive. Output Output a single integer — the maximum possible sum the robot can achieve. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Input 4 4 0 0 0 0 0 1 1 1 0 1 1 1 0 1 1 1 Output 5 Note In the first example, the robot can follow the path 1 → 2 → 3 → 6 → 9, resulting in a sum of 1+2+3+6+9=21. In the second example, the robot can follow the path 0 → 0 → 0 → 0 → 1 → 1 → 1 → 1 which results in a sum of 5.","solution":"def max_path_sum(grid): Returns the maximum sum possible for a path from the top-left to the bottom-right corner n = len(grid) m = len(grid[0]) # Initialize a DP table with the same dimensions as the grid dp = [[0 for _ in range(m)] for _ in range(n)] # Set the starting point dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"Given an n x n grid where each cell contains a color, determine the smallest subgrid (contiguous rectangle of cells) that contains all unique colors present in the grid. If the entire grid consists of a single color, the output should be the entire grid. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the size of the grid. The next n lines each contain n integers (1 ≤ ci,j ≤ 100), where ci,j represents the color of the cell in the i-th row and j-th column. Output Four integers r1, c1, r2, c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ n), representing the coordinates of the top-left and bottom-right corners of the smallest subgrid that contains all unique colors. Example Input 4 1 2 3 4 2 1 3 4 2 2 3 4 2 2 2 4 Output 1 1 4 4 Input 3 5 5 5 5 5 5 5 5 5 Output 1 1 3 3","solution":"def smallest_subgrid_with_all_colors(grid): n = len(grid) # Flatten the grid and get all unique colors all_unique_colors = set() for row in grid: all_unique_colors.update(row) # If there\'s only one unique color if len(all_unique_colors) == 1: return (1, 1, n, n) # Otherwise, we need to find the top-left and bottom-right corners of the smallest subgrid # Initialize positions min_row = n min_col = n max_row = -1 max_col = -1 # Track occurrence of each color color_positions = {color: [] for color in all_unique_colors} for i in range(n): for j in range(n): color_positions[grid[i][j]].append((i, j)) # Find the boundary for each color for positions in color_positions.values(): for (row, col) in positions: min_row = min(min_row, row) min_col = min(min_col, col) max_row = max(max_row, row) max_col = max(max_col, col) return (min_row + 1, min_col + 1, max_row + 1, max_col + 1) # To run the function n = 4 grid = [ [1, 2, 3, 4], [2, 1, 3, 4], [2, 2, 3, 4], [2, 2, 2, 4] ] result = smallest_subgrid_with_all_colors(grid) print(result) # Output: (1, 1, 4, 4)"},{"question":"Takahashi is organizing a competition on a cubic board of size N x N x N. The board consists of N^3 smaller cubic sections. Each section is represented by its coordinates (x, y, z), where 1 ≤ x, y, z ≤ N. In the competition, Takahashi wants to mark some sections of the board to create M marked regions. Each marked region contains exactly one special cell denoted by `@`. The remaining cells in each marked region are denoted by `.` (dots). The objective is to find how to mark the board such that each marked region forms a connected cluster. A region is considered connected if it’s possible to move between any two cells within the region by traversing through adjacent cells (horizontally, vertically, or depth-wise). Given the positions of the special cells, provide a way to mark the board to create exactly M connected regions where each region contains exactly one special cell. Constraints: * 1 ≤ N ≤ 50 * 1 ≤ M ≤ N^3 * Each special cell has unique coordinates Input: The input is provided in the following format: ``` N M x1 y1 z1 x2 y2 z2 ... xM yM zM ``` Output: The output should be N matrices of size N x N representing the board layers sequentially. Each cell should denote the region number (1 through M) it belongs to, or `0` for unmarked cells. If multiple solutions exist, any of them is acceptable. Examples: Input: ``` 3 2 2 2 2 3 3 3 ``` Output: ``` 0 0 0 0 1 0 0 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 2 ``` Input: ``` 2 4 1 1 1 1 2 2 2 1 2 2 2 1 ``` Output: ``` 1 0 0 4 3 0 0 2 1 4 3 2 2 0 0 4 ```","solution":"def create_board(N, M, special_cells): # Create the initial board with all cells set to 0 board = [[[0 for _ in range(N)] for _ in range(N)] for _ in range(N)] # Function to check if the cell is within the board limits def is_valid(x, y, z): return 0 <= x < N and 0 <= y < N and 0 <= z < N # Directions for moving to adjacent cells (6 possible moves: x±1, y±1, z±1) directions = [(1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, -1, 0), (0, 0, 1), (0, 0, -1)] # A Breadth-First Search to fill the regions from collections import deque for idx, (x, y, z) in enumerate(special_cells, 1): queue = deque([(x-1, y-1, z-1)]) board[x-1][y-1][z-1] = idx while queue: cx, cy, cz = queue.popleft() for dx, dy, dz in directions: nx, ny, nz = cx + dx, cy + dy, cz + dz if is_valid(nx, ny, nz) and board[nx][ny][nz] == 0: board[nx][ny][nz] = idx queue.append((nx, ny, nz)) return board # Example usage # N = 3 # M = 2 # special_cells = [(2, 2, 2), (3, 3, 3)] # board = create_board(N, M, special_cells) # for layer in board: # for row in layer: # print(\\" \\".join(map(str, row))) # print()"},{"question":"You are given a grid with H rows and W columns. Each cell in the grid can either be empty (\'.\') or contain an obstacle (\'#\'). You start at the top-left corner of the grid and want to reach the bottom-right corner. You can move from a cell to another cell that shares an edge with the current cell (i.e., you can move right, left, up, or down). Determine the minimum number of steps required to reach the bottom-right corner from the top-left corner, avoiding obstacles. If it is impossible to reach the bottom-right corner, output -1. Constraints: * 1 ≤ H, W ≤ 1000 * The input grid contains only \'.\' and \'#\'. Input The input is given from Standard Input in the following format: H W grid_1 : grid_H Output Print the minimum number of steps required to reach the bottom-right corner from the top-left corner, or -1 if it is impossible. Examples Input 3 4 .... .. .... Output 5 Input 3 3 .#. # .#. Output -1","solution":"from collections import deque def min_steps_to_reach_end(H, W, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] if grid[0][0] == \'#\' or grid[H-1][W-1] == \'#\': return -1 visited = [[False] * W for _ in range(H)] queue = deque([(0, 0, 0)]) # (row, column, step_count) visited[0][0] = True while queue: r, c, steps = queue.popleft() if r == H-1 and c == W-1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < H and 0 <= nc < W and not visited[nr][nc] and grid[nr][nc] == \'.\': visited[nr][nc] = True queue.append((nr, nc, steps + 1)) return -1"},{"question":"You are given a sequence of n integers, `a_1, a_2, ..., a_n`. You can perform the following operation any number of times (possibly zero): - Select two indices i and j (1 ≤ i, j ≤ n) such that i ≠ j, then remove a_i and a_j from the sequence and insert the absolute difference |a_i - a_j| at the end of the sequence. After performing any number of operations, you want to minimize the maximum value in the sequence. Output the minimum possible maximum value of the sequence after performing any number of operations. Input The first line of input contains an integer `n` (1 ≤ n ≤ 1000), the number of elements in the sequence. The second line contains n integers `a_1, a_2, ..., a_n` (0 ≤ a_i ≤ 10^9). Output Output a single integer, the minimum possible maximum value of the sequence after performing any number of operations. Examples Input 4 2 3 7 9 Output 1 Input 3 12 15 18 Output 3 Note In the first example, by repeatedly selecting the two largest elements and replacing them with their absolute difference, you will eventually reduce the sequence to [1, 0, 1, 0], and the minimum possible maximum value is 1. In the second example, you can eventually reduce the sequence to [3, 0, 3, 0], and the minimum possible maximum value is 3.","solution":"def minimize_max_value(n, sequence): Returns the minimum possible maximum value of the sequence after performing any number of allowed operations. # If the sequence contains all zero elements or only one element if all(x == 0 for x in sequence) or len(sequence) == 1: return 0 # Reduce the problem to considering the gcd of the numbers in the list from math import gcd from functools import reduce def find_gcd_of_list(seq): return reduce(gcd, seq) return find_gcd_of_list(sequence)"},{"question":"You are given two sequences of positive integers: X and Y. Your task is to determine if it is possible to insert zero or more elements (also positive integers) into both X and Y in such a way that the two extended sequences can become identical. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Input The first line contains an integer t — the number of test cases (1 ≤ t ≤ 100). Each test case is described as follows: - The first line of the test case contains an integer n — the length of sequence X (1 ≤ n ≤ 100). - The second line contains n integers x1, x2, ... xn — the elements of sequence X (1 ≤ xi ≤ 106). - The third line contains an integer m — the length of sequence Y (1 ≤ m ≤ 100). - The fourth line contains m integers y1, y2, ... ym — the elements of sequence Y (1 ≤ yi ≤ 106). Output For each test case, print \\"YES\\" if it is possible to extend both sequences to make them identical, otherwise print \\"NO\\". Example Input 3 3 1 2 3 3 3 2 1 2 1 3 2 2 3 4 1 2 3 4 4 4 3 2 1 Output YES NO YES","solution":"def can_become_identical(t, test_cases): results = [] for case in test_cases: n, X, m, Y = case if set(X) == set(Y): # Check if both sets have the same unique elements results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Input reading helper function def process_input(input_data): data = input_data.split() idx = 0 t = int(data[idx]) idx += 1 test_cases = [] for _ in range(t): n = int(data[idx]) idx += 1 X = list(map(int, data[idx:idx + n])) idx += n m = int(data[idx]) idx += 1 Y = list(map(int, data[idx:idx + m])) idx += m test_cases.append((n, X, m, Y)) return t, test_cases"},{"question":"**Binary Tree Zigzag Level Order Traversal** Given a binary tree, return the zigzag level order traversal of its nodes\' values. (i.e., from left to right, then right to left for the next level, and alternate between). # Example: ``` Input: 3 / 9 20 / 15 7 Output: [ [3], [20,9], [15,7] ] ``` # Constraints: - The number of nodes in the tree will be in the range [0, 2000]. - -100 <= Node.val <= 100","solution":"from collections import deque # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzagLevelOrder(root): Return the zigzag level order traversal of a binary tree. :param TreeNode root: The root node of the binary tree. :return List[List[int]]: The zigzag level order traversal of the nodes\' values. if not root: return [] results = [] nodes_queue = deque([root]) left_to_right = True while nodes_queue: level = deque() level_length = len(nodes_queue) for _ in range(level_length): node = nodes_queue.popleft() if left_to_right: level.append(node.val) else: level.appendleft(node.val) if node.left: nodes_queue.append(node.left) if node.right: nodes_queue.append(node.right) results.append(list(level)) left_to_right = not left_to_right return results"},{"question":"You are given an array a = {a_1, a_2, ..., a_n} of n integers with the property that exactly one element occurs an odd number of times and all others occur an even number of times. Find and print the element and the number of times it appears. Constraints: - All values in input are integers. - 1 ≤ n ≤ 100 - The array contains integers between 1 and 1000. Input: Input is given from Standard Input in the following format: n a_1 a_2 ... a_n Output: Print the element that appears an odd number of times, followed by the number of times it appears. Examples: Input: 7 4 3 2 4 3 3 2 Output: 3 3 Input: 5 10 20 10 20 10 Output: 10 3","solution":"def find_odd_occurrence(n, arr): frequency_dict = {} # Count the frequency of each element in the array for num in arr: if num in frequency_dict: frequency_dict[num] += 1 else: frequency_dict[num] = 1 # Find the element with odd occurrence for num, count in frequency_dict.items(): if count % 2 != 0: return num, count"},{"question":"Alice loves playing with numbers and has recently started exploring matrices. She is curious about the sum of elements in a specific submatrix. Given a matrix and multiple queries, help Alice determine the sum of elements within each specified submatrix. Input: The first line contains two integers, n and m (1 ≤ n, m ≤ 300) denoting the number of rows and columns in the matrix respectively. The next n lines contain m space-separated integers each, representing the elements of the matrix. The following line contains an integer q (1 ≤ q ≤ 1000), the number of queries. Each of the next q lines contains four integers r1, c1, r2, and c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m), representing the coordinates of the top-left and bottom-right corners of the submatrix whose sum is to be calculated. Output: For each query, output the sum of the elements in the specified submatrix. Example Input 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 Output 12 28","solution":"def preprocess_matrix(matrix): Preprocess the matrix to create a prefix sum matrix. n = len(matrix) m = len(matrix[0]) # Create a prefix sum matrix initialized with zeros prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] # Fill the prefix sum matrix for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = ( matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] ) return prefix_sum def query_sum(prefix_sum, r1, c1, r2, c2): Calculate the sum of the submatrix from (r1, c1) to (r2, c2) using the prefix sum matrix. return ( prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1] ) def matrix_sum_queries(matrix, queries): Given a matrix and a list of queries, return a list of sums of elements within each specified submatrix. prefix_sum = preprocess_matrix(matrix) results = [] for r1, c1, r2, c2 in queries: results.append(query_sum(prefix_sum, r1, c1, r2, c2)) return results"},{"question":"You are given a string of characters. Determine whether the string is a palindrome, i.e., it reads the same forward and backward. Input The input will consist of a single string s. The string contains between 1 and 100 lowercase English letters (\'a\'-\'z\'), inclusive. The string doesn\'t contain any other characters. Output Output \\"YES\\" if the given string is a palindrome, and \\"NO\\" otherwise (quotes for clarity only). Examples Input radar Output YES Input hello Output NO Input level Output YES Note Case sensitivity is not considered as the input only contains lowercase letters. Remember that a string is a palindrome if it reads the same forward and backward.","solution":"def is_palindrome(s): Determines whether the given string is a palindrome. Args: s (str): Input string containing between 1 and 100 lowercase English letters. Returns: str: \\"YES\\" if the string is a palindrome, \\"NO\\" otherwise. if s == s[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an undirected graph, determine if it is a Bipartite Graph. A Bipartite Graph is a graph that can be colored using two colors such that there are no two adjacent vertices with the same color. Your task is to write a function that determines whether the given graph is bipartite. Input The input begins with the number of test cases, T. The following input contains T test cases. The first line of each test case contains two integers, V and E, where V is the number of vertices and E is the number of edges. The next E lines each contain two integers u and v, representing an edge between vertices u and v. Output For each test case, output one line containing \\"Case #x: y\\", where x is the test case number (starting from 1) and y is \\"Yes\\" if the graph is bipartite and \\"No\\" otherwise. Constraints 1 ≤ T ≤ 10 2 ≤ V ≤ 100 1 ≤ E ≤ (V * (V - 1)) / 2 1 ≤ u, v ≤ V Example Input: 2 3 3 1 2 2 3 3 1 4 4 1 2 2 3 3 4 4 1 Output: Case #1: No Case #2: Yes Explanation Case 1: The graph cannot be divided into two sets without having adjacent vertices in the same set. Hence, it is not bipartite. Case 2: The graph can be colored using two colors, where one set has vertices {1, 3} and the other set has vertices {2, 4}.","solution":"def is_bipartite(V, adj_list): color = [-1] * (V + 1) # coloring the vertices, initialized to -1 def bfs(source): queue = [source] color[source] = 1 # start coloring source with 1 while queue: node = queue.pop(0) for neighbour in adj_list[node]: if color[neighbour] == -1: # if not colored color[neighbour] = 1 - color[node] # alternate color queue.append(neighbour) elif color[neighbour] == color[node]: # same color as current node return False return True for i in range(1, V + 1): if color[i] == -1: # if not visited if not bfs(i): return False return True def bipartite_test_cases(T, test_cases): results = [] for i in range(T): V, E = test_cases[i][0] edges = test_cases[i][1] adj_list = [[] for _ in range(V + 1)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) if is_bipartite(V, adj_list): results.append(f\\"Case #{i + 1}: Yes\\") else: results.append(f\\"Case #{i + 1}: No\\") return results"},{"question":"Santa is preparing his gift delivery routes for Christmas. He has n houses to deliver gifts to, each identified by a unique integer identifier from 1 to n. The gifts for each house are ready, but Santa needs to pack them into boxes. Each house requires one or more specific items, numbered from 1 to m. Santa has a list of which items each house needs. Each box can contain all the items needed for just one house. Santa\'s goal is to determine the minimal number of boxes he needs to pack all the required items for all houses. Write a function `minBoxes(n, m, needs)` that computes and returns the minimal number of boxes required. # Input - `n`: an integer, the number of houses. - `m`: an integer, the number of different items. - `needs`: a 2D list of size n x m, where `needs[i][j]` is True if house `i+1` needs item `j+1`. # Output - Return an integer, the minimal number of boxes required to pack all items for all houses. # Example ```python def minBoxes(n, m, needs): # Your code here # Example usage: n = 3 m = 4 needs = [ [True, False, False, True], [True, True, False, False], [False, True, True, False] ] print(minBoxes(n, m, needs)) # Output: 3 ``` # Explanation In the given example, house 1 needs items 1 and 4, house 2 needs items 1 and 2, and house 3 needs items 2 and 3. Santa needs at least 3 boxes to pack the items for these houses. Each box will be dedicated to one house\'s needed items, since items cannot be shared between boxes once they are packed for a specific house.","solution":"def minBoxes(n, m, needs): Returns the minimal number of boxes required to pack all the required items for all houses. Parameters: n (int): The number of houses. m (int): The number of different items. needs (List[List[bool]]): 2D list indicating the items each house needs. Returns: int: The minimal number of boxes required. # Each house requires one box, as each box can only contain items for one house. return n"},{"question":"The company you work for wants to reward its employees based on their performance. The performance rating of each employee is represented by an array of integers `ratings`, where `ratings[i]` indicates the performance rating of the ith employee. Your task is to distribute rewards to each employee such that: 1. Each employee gets at least one reward. 2. Employees with a higher rating than their immediate neighbors should receive more rewards than their neighbors. Write a function `distributeRewards(ratings)` that takes an array of integers and returns the minimum number of rewards required to satisfy the given conditions. Input - An array `ratings` of integers, where `1 <= ratings.length <= 100000` and `1 <= ratings[i] <= 10000`. Output - An integer: the minimum number of rewards needed. Examples ```python Input: [1,0,2] Output: 5 Input: [1,2,2] Output: 4 Input: [4,6,4,5,6,2] Output: 10 ``` Note In the first example, one possible distribution of rewards is [2, 1, 2]: - The first employee gets 2 rewards because their rating is higher than the second employee\'s. - The second employee gets 1 reward since it\'s the minimum number of rewards any employee can get. - The third employee gets 2 rewards because their rating is higher than the second employee\'s. In the second example, one possible distribution of rewards is [1, 2, 1]: - The first employee gets 1 reward. - The second employee gets 2 rewards because their rating is higher than the first employee\'s. - The third employee gets 1 reward because their rating is not higher than the second employee\'s.","solution":"def distributeRewards(ratings): n = len(ratings) if n == 0: return 0 rewards = [1] * n # From left to right, ensure right neighbor rules are met for i in range(1, n): if ratings[i] > ratings[i - 1]: rewards[i] = rewards[i - 1] + 1 # From right to left, ensure left neighbor rules are met for i in range(n - 2, -1, -1): if ratings[i] > ratings[i + 1]: rewards[i] = max(rewards[i], rewards[i + 1] + 1) return sum(rewards)"},{"question":"You are given a list of integers that represents the heights of n skyscrapers in a city. Your goal is to find the minimum number of supply lines (vertical) needed to distribute power to every skyscraper in such a way that: * Each supply line starts from ground level (height 0) and extends upwards infinitely. * Each supply line can supply power to any skyscraper of the same height or shorter. * Each supply line can only supply power to one skyscraper at its start point but can serve multiple if they are at different heights within a vertical line. For example, if n=5 and the heights are [1, 2, 3, 4, 5], the following distribution will satisfy the conditions: * One supply line for skyscraper of height 1 * One supply line for skyscraper of height 2 * One supply line for skyscraper of height 3 * One supply line for skyscraper of height 4 * One supply line for skyscraper of height 5 But if n=5 and the heights are [3, 3, 3, 3, 3], only 1 supply line is needed to power all skyscrapers since they are of the same height. Given n and the list of heights, find the minimum number of supply lines required. Input The first line contains one integer t (1 ≤ t ≤ 100). Then t test cases follow. The first line of each test case contains one integer n (1 ≤ n ≤ 1000), representing the number of skyscrapers. The second line of each test case contains n integers, representing the heights of the skyscrapers. Output For each test case output the minimum number of supply lines required to distribute power to all skyscrapers. Example Input 3 5 1 2 3 4 5 5 3 3 3 3 3 4 4 4 4 1 Output 5 1 2","solution":"def min_supply_lines(t, test_cases): Returns a list of minimum supply lines required for each test case. Parameters: t: int - Number of test cases test_cases: List of tuples. Each tuple contains: n: int - The number of skyscrapers heights: List of int - The heights of the skyscrapers Returns: List of int - Minimum number of supply lines for each test case. results = [] for case in test_cases: n, heights = case unique_heights = set(heights) results.append(len(unique_heights)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) heights = list(map(int, lines[index + 1].split())) test_cases.append((n, heights)) index += 2 return t, test_cases def format_output(results): return \'n\'.join(map(str, results))"},{"question":"Alex enjoys solving puzzles and recently discovered an interesting problem involving prime numbers. He read about the Goldbach Conjecture, which asserts that every even integer greater than 2 can be expressed as the sum of two prime numbers. He\'s thrilled and decides to write a program that can find at least one of such prime pairs for any given even number. Alex hopes you can help him implement the program to identify such prime pairs. Your task is to write a function that takes an even integer `E` (greater than 2) and returns two prime numbers `P1` and `P2` such that `E = P1 + P2`. If there are multiple pairs possible, you may return any one of those pairs. Input: An even integer E (greater than 2). Output: Two prime numbers P1 and P2 such that E = P1 + P2. Constraints: 4 ≤ E ≤ 10^6 SAMPLE INPUT 20 SAMPLE OUTPUT 3 17 Explanation: The even number 20 can be expressed as the sum of the prime numbers 3 and 17 (among other possible pairs, such as 7 and 13). The output is one such valid pair of prime numbers.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n < 2: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def find_goldbach_pair(E): Returns two prime numbers P1 and P2 such that E = P1 + P2. for P1 in range(2, E): P2 = E - P1 if is_prime(P1) and is_prime(P2): return P1, P2 # Example usage E = 20 result = find_goldbach_pair(E) print(result)"},{"question":"You are working on a project that involves processing multiple queries on a range of integers. To make the process more efficient, you decide to implement a segmented sieve algorithm to handle prime number queries. Your task is to design a data structure that supports the following operations: 1. **Initialize the data structure** with a range of integers [L, R] (1 ≤ L ≤ R ≤ 10^12). 2. **Query** if a given integer x within the range [L, R] is a prime number. 3. **Query** to list all prime numbers within a subrange [l, r] of [L, R]. # Input The first line of input contains two integers L and R, the boundaries of the range. The second line contains a single integer Q, the number of queries. Each of the next Q lines describes a single query of one of the following types: - **1 x**: Check if x is a prime number (1 ≤ x ≤ 10^12). - **2 l r**: List all prime numbers in the subrange [l, r] (L ≤ l ≤ r ≤ R). # Output For each type-1 query, print \\"Prime\\" if x is a prime number in the range [L, R], otherwise print \\"Not Prime\\". For each type-2 query, print all prime numbers in the subrange [l, r] as a space-separated list. If there are no prime numbers in the subrange, print \\"No primes\\". # Example Input ``` 10 20 5 1 11 1 16 2 10 15 2 16 20 1 17 ``` Output ``` Prime Not Prime 11 13 17 19 Prime ``` # Note 1. For a number to be prime, it must be greater than 1 and have no divisors other than 1 and itself. 2. Precompute prime numbers using a segmented sieve algorithm to efficiently handle the range up to 10^12. 3. Handle the queries efficiently to ensure the program runs within the time limits.","solution":"import math class SegmentedSieve: def __init__(self, L, R): self.L = L self.R = R self.is_prime_range = [True] * (R - L + 1) self.primes = [] self._init_segmented_sieve() def _init_segmented_sieve(self): # All numbers less than 2 are not prime if self.L == 1: self.is_prime_range[0] = False limit = int(math.sqrt(self.R)) + 1 is_prime = [True] * (limit + 1) for i in range(2, limit + 1): if is_prime[i]: for j in range(i * i, limit + 1, i): is_prime[j] = False # Mark multiples of i in range [L, R] start = max(i * i, self.L + (i - self.L % i) % i) for j in range(start, self.R + 1, i): self.is_prime_range[j - self.L] = False self.primes = [self.L + i for i, is_prime in enumerate(self.is_prime_range) if is_prime] def is_prime(self, x): if self.L <= x <= self.R: return self.is_prime_range[x - self.L] return False def list_primes(self, l, r): result = [] for x in range(l, r + 1): if self.is_prime(x): result.append(x) return result # Functions to process the input queries. def process_queries(L, R, queries): sieve = SegmentedSieve(L, R) results = [] for query in queries: if query[0] == 1: # Check if x is prime x = query[1] results.append(\\"Prime\\" if sieve.is_prime(x) else \\"Not Prime\\") elif query[0] == 2: # List all primes in the subrange [l, r] l, r = query[1], query[2] primes_in_range = sieve.list_primes(l, r) if primes_in_range: results.append(\\" \\".join(map(str, primes_in_range))) else: results.append(\\"No primes\\") return results"},{"question":"A travel agency wants to help tourists navigate a new city by placing directional signs at street intersections. Each street intersection is represented in a grid of coordinates in a 2D plane. The agency wants to update a map so that tourists can quickly find the shortest path from one intersection to another. Given a city represented as a list of bidirectional streets connecting intersections, you are required to find the shortest path between two provided intersections. Streets are always rectilinear, meaning they either move horizontally or vertically between intersections. Your task is to write a program that reads multiple city maps and computes the shortest paths as required. Input The input consists of multiple datasets. Each dataset describes a city and contains multiple entries. The first line of each dataset contains an integer n (2 ≤ n ≤ 100) denoting the number of intersections, followed by n lines each containing two integers representing the coordinates (xi, yi) of the intersections. The next line contains an integer m (1 ≤ m ≤ 1000) representing the number of streets. Each of the following m lines contains two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), meaning there is a bidirectional street between the intersections labeled ai and bi. The next line contains an integer q (1 ≤ q ≤ 100) representing the number of queries. Each of the following q lines contains two integers si and di (1 ≤ si, di ≤ n, si ≠ di), which are the start and destination intersections for which the shortest path is required. A line containing `0` indicates the end of the input. Output For each query in each dataset, output a single integer representing the number of streets on the shortest path between the start and destination intersections. If no path exists between the intersections, output `-1`. Example Input 3 1 1 2 2 3 3 2 1 2 2 3 2 1 3 2 3 0 Output 2 1","solution":"from collections import deque, defaultdict def shortest_paths(city_data): results = [] for city in city_data: n = city[\'num_intersections\'] intersections = city[\'intersections\'] streets = city[\'streets\'] queries = city[\'queries\'] # create graph from streets graph = defaultdict(list) for a, b in streets: graph[a].append(b) graph[b].append(a) # find shortest paths for queries for s, d in queries: if s == d: results.append(0) continue # BFS to find shortest path visited = [False] * (n + 1) dist = [float(\'inf\')] * (n + 1) queue = deque([s]) visited[s] = True dist[s] = 0 while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True dist[neighbor] = dist[current] + 1 queue.append(neighbor) shortest_path_length = dist[d] if dist[d] != float(\'inf\') else -1 results.append(shortest_path_length) return results def read_city_data(input_list): index = 0 city_data = [] while index < len(input_list): n = int(input_list[index]) if n == 0: break index += 1 intersections = [tuple(map(int, input_list[i].split())) for i in range(index, index + n)] index += n m = int(input_list[index]) index += 1 streets = [tuple(map(int, input_list[i].split())) for i in range(index, index + m)] index += m q = int(input_list[index]) index += 1 queries = [tuple(map(int, input_list[i].split())) for i in range(index, index + q)] index += q city_data.append({ \'num_intersections\': n, \'intersections\': intersections, \'streets\': streets, \'queries\': queries }) return city_data"},{"question":"Problem statement You are given a list of queries. Each query contains two integers a and b. You have to determine if it is possible to form the integer b by summing up any number of identical integers equal to a. In other words, you need to check if there exists any integer k (k geq 0) such that the equation a times k = b holds true. Constraint * 1 leq a leq 10^6 * 1 leq b leq 10^6 * The number of queries does not exceed 1000 Input The first line contains a single integer Q which represents the number of queries. Each of the next Q lines contain two integers, a and b, representing a single query. Output For each query, output \\"YES\\" if it is possible to form the integer b by summing up any number of identical integers equal to a, otherwise print \\"NO\\". Examples Input 3 4 16 7 14 6 13 Output YES YES NO","solution":"def can_form_b(a, b): Determine if it is possible to form the integer b by summing up any number of identical integers equal to a. if b % a == 0: return \\"YES\\" else: return \\"NO\\" def process_queries(queries): Process multiple queries and return results for each. results = [] for a, b in queries: results.append(can_form_b(a, b)) return results"},{"question":"You are given an array of integers. There are three types of operations you need to perform on this array: - 1 x y — update the element at index x to y. - 2 l r — compute the sum of elements from index l to r (inclusive). - 3 l r — compute the maximum element from index l to r (inclusive). The operations should be processed in the order they are given. Input: The first line contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of elements in the array and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000) — the initial elements of the array. Then q lines follow, describing the operations: - 1 x y (1 ≤ x ≤ n, 1 ≤ y ≤ 100000) — update the element at index x to y. - 2 l r (1 ≤ l ≤ r ≤ n) — compute the sum of elements from index l to r (inclusive). - 3 l r (1 ≤ l ≤ r ≤ n) — compute the maximum element from index l to r (inclusive). Output: For each query of type 2, output the sum of elements from index l to r. For each query of type 3, output the maximum element from index l to r. Example: Input: 5 5 1 2 3 4 5 2 1 3 1 2 10 2 1 3 3 2 4 3 1 5 Output: 6 14 10 10","solution":"def process_operations(n, q, elements, operations): results = [] for operation in operations: op_type = operation[0] if op_type == 1: # Update operation x = operation[1] - 1 y = operation[2] elements[x] = y elif op_type == 2: # Sum operation l = operation[1] - 1 r = operation[2] results.append(sum(elements[l:r])) elif op_type == 3: # Max operation l = operation[1] - 1 r = operation[2] results.append(max(elements[l:r])) return results"},{"question":"You are tasked with developing a system for managing a collection of books in a small library. The library contains a variety of books, each identified by a unique International Standard Book Number (ISBN-10). The system must include functionalities to query the collection of books based on certain criteria and to determine the similarity between different books\' titles. To enhance the user experience, the library director wants to implement a feature that detects and suggests similar book titles when users search for a book. This feature will employ the \\"edit distance\\" (or Levenshtein distance) metric. **Edit Distance Instructions:** The edit distance between two strings is the minimum number of operations required to transform one string into the other. The allowed operations are: 1. Insert a character 2. Remove a character 3. Replace a character Given a list of books, your task is to write a program that: 1. Finds pairs of book titles that have an edit distance less than or equal to a specified threshold. 2. Outputs these pairs in a specified format. **Input:** The input consists of multiple datasets. Each dataset is structured as follows: ``` n d isbn1 title1 isbn2 title2 ... isbn_n title_n ``` - The first integer `n` is the number of books, followed by the threshold `d`. - Each of the next `n` lines contains an ISBN followed by the title of the book. - Book titles consist of only lowercase letters and spaces. - The length of each title is less than 100 characters. - 0 < `n` ≤ 200 and 0 < `d` ≤ 5. The end of the input is indicated by a line containing a single zero. **Output:** For each dataset, your program should output all pairs of titles that have an edit distance of less than or equal to `d`, one pair per line. Each pair must be formatted as follows: ``` isbn1,isbn2 ``` Where `isbn1` and `isbn2` are the ISBNs of the books with titles that meet the criteria. Ensure that `isbn1` is alphabetically preceding `isbn2`. Output all pairs in alphabetical order based on the first ISBN, and if the first ISBNs are the same, then based on the second ISBN. After listing all pairs for a dataset, print the total number of such pairs. **Example:** **Input:** ``` 4 1 1234567890 the great gatsby 0987654321 the great catsby 1122334455 moby dick 2233445566 moby dock 2 2 5678901234 pride and prejudice 4321098765 bride and prejudice 0 ``` **Output:** ``` 0987654321,1234567890 2233445566,1122334455 2 5678901234,4321098765 1 ```","solution":"def edit_distance(s1, s2): Calculate the Levenshtein distance between two given strings s1 and s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) return dp[m][n] def find_similar_books(book_list, threshold): Given a list of books and an edit distance threshold, find all pairs of books whose titles have an edit distance less than or equal to the threshold. similar_pairs = [] n = len(book_list) for i in range(n): for j in range(i + 1, n): isbn1, title1 = book_list[i] isbn2, title2 = book_list[j] if edit_distance(title1, title2) <= threshold: if isbn1 < isbn2: similar_pairs.append((isbn1, isbn2)) else: similar_pairs.append((isbn2, isbn1)) similar_pairs.sort() return similar_pairs def process_input_data(input_data): Parse input data and find similar book titles. result = [] datasets = input_data.strip().split(\'n\') i = 0 while True: if datasets[i] == \'0\': break n, d = map(int, datasets[i].split()) i += 1 book_list = [] for _ in range(n): isbn, title = datasets[i].split(\' \', 1) book_list.append((isbn, title)) i += 1 similar_pairs = find_similar_books(book_list, d) for pair in similar_pairs: result.append(\',\'.join(pair)) result.append(str(len(similar_pairs))) return \'n\'.join(result)"},{"question":"Background In the mystical land of Sorteria, there is a magical sequence known as the \\"Palindrome Sequence\\". This sequence has the special property that it can be transformed into a palindrome by removing at most one element. As a renowned magician, you are required to determine if a given sequence is a palindrome sequence or not. Problem Given a sequence of integers, determine if it can become a palindrome by removing at most one element. A palindrome is a sequence that reads the same backward as forward. For example, the sequences `[1, 2, 3, 2, 1]` and `[1, 2, 2, 1]` are palindromes, and the sequence `[1, 2, 3, 4, 2, 1]` can be made a palindrome by removing `3` or `4`. Constraints - The sequence consists of integers. - 1 ≤ length of the sequence ≤ 10^5 - -10^9 ≤ sequence element ≤ 10^9 Input The input format is as follows: - An integer `n` representing the length of the sequence. - A line containing `n` integers. Output Output \\"YES\\" if the sequence can become a palindrome by removing at most one element, otherwise output \\"NO\\". Examples Input 5 1 2 3 2 1 Output YES Input 6 1 2 3 4 2 1 Output YES Input 4 1 2 3 4 Output NO Explanation In the first example, the sequence `[1, 2, 3, 2, 1]` is already a palindrome. In the second example, the sequence `[1, 2, 3, 4, 2, 1]` can become a palindrome by removing either `3` or `4`. In the third example, the sequence `[1, 2, 3, 4]` cannot be transformed into a palindrome by removing just one element.","solution":"def can_be_palindrome_sequence(seq): Determines if the sequence can be transformed into a palindrome by removing at most one element. def is_palindrome_range(seq, left, right): while left < right: if seq[left] != seq[right]: return False left += 1 right -= 1 return True left, right = 0, len(seq) - 1 while left < right: if seq[left] != seq[right]: return is_palindrome_range(seq, left + 1, right) or is_palindrome_range(seq, left, right - 1) left += 1 right -= 1 return True"},{"question":"Polycarp likes substrings that are palindromic. He has a long string s. Polycarp wants to determine how many substrings of the string are palindromes. A palindromic substring is a sequence of characters that reads the same backward as forward, and its length is at least 1. For example, if the original string is s=\\"abba\\", then the palindromic substrings are \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", \\"abba\\". There are 6 such substrings. Polycarp can extract an arbitrary substring from the string s and check if it is a palindrome. He wants to know the total number of such palindromic substrings in the string s. Input The first line of the input contains a string s, consisting of lowercase English letters. The length of the string s is between 1 and 2⋅10^5, inclusive. Output Print the total number of palindromic substrings in the given string s. Examples Input abba Output 6 Input abc Output 3 Input aaa Output 6 Note In the first example, the palindromic substrings are \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", \\"abba\\". In the second example, the palindromic substrings are \\"a\\", \\"b\\", \\"c\\". In the third example, the palindromic substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\".","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the given string s. n = len(s) ans = 0 dp = [[False] * n for _ in range(n)] for i in range(n): dp[i][i] = True ans += 1 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True ans += 1 for length in range(3, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j] and dp[i+1][j-1]: dp[i][j] = True ans += 1 return ans"},{"question":"Optimal Step Sequence You are given an array `steps` of `n` non-negative integers, where each integer represents the maximum number of steps that can be taken forward from that position. Your task is to determine the minimum number of jumps required to reach the end of the array (i.e., the last element). Each element in the array represents the maximum range you can move forward from that position. For example, if `steps[i]` is 3, you can move to any of the next three positions from `i`. Your goal is to find the minimum number of jumps needed to reach the last element of the array, starting from the first element. If it is not possible to reach the end, return -1. Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains `n` space-separated non-negative integers `steps[i]` (0 ≤ steps[i] ≤ 10^5). Output - Print a single integer — the minimum number of jumps required to reach the end of the array, or -1 if it is not possible. Examples Input ``` 6 2 3 1 1 4 ``` Output ``` 2 ``` Input ``` 5 1 1 1 1 0 ``` Output ``` 4 ``` Input ``` 5 0 2 3 1 1 ``` Output ``` -1 ``` Explanation In the first example: - From position 0, you can jump to position 1 or 2 (since `steps[0] = 2`). - From position 1, jump to position 4 (since `steps[1] = 3`). This requires a minimum of 2 jumps: 0 -> 1 -> 4. In the second example: - From each position, you can only jump to the next position, so it takes 4 jumps to reach the last position. In the third example: - You cannot move from position 0 as `steps[0] = 0`, so it\'s impossible to reach the last position; hence, the output is -1.","solution":"def min_jumps(steps): Returns the minimum number of jumps to reach the end of the array. If it is not possible, returns -1. n = len(steps) if n == 1: return 0 # Initialize variables jumps = 0 current_end = 0 farthest = 0 for i in range(n - 1): # Update the farthest we can reach farthest = max(farthest, i + steps[i]) # If we have reached the end of the current jump if i == current_end: jumps += 1 current_end = farthest # If the current end is beyond or at the last element, break if current_end >= n - 1: break # If you can\'t advance from the current position if current_end == i and steps[i] == 0: return -1 return jumps if current_end >= n - 1 else -1"},{"question":"Takahashi is playing a game where he needs to rearrange a string to meet certain conditions. The string S consists of lowercase English letters. He can swap any two characters in the string any number of times. A string is considered \\"valid\\" if it contains at least one vowel (a, e, i, o, u) and at least one consonant. Your task is to determine if it is possible to rearrange the string to make it \\"valid\\". Constraints - S is a non-empty string of length between 1 and 100 (inclusive). - S consists of only lowercase English letters. Input - Input is given from Standard Input in the following format: ``` S ``` Output - Print `Yes` if S can be rearranged to be \\"valid\\", and `No` otherwise. Examples Input ``` hello ``` Output ``` Yes ``` Input ``` aeiou ``` Output ``` No ``` Input ``` bcdfg ``` Output ``` No ``` Input ``` pleasant ``` Output ``` Yes ``` Input ``` xyz ``` Output ``` No ```","solution":"def is_valid_string(S): Determine if the string S can be rearranged to be valid. A valid string contains at least one vowel and one consonant. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} has_vowel = False has_consonant = False for char in S: if char in vowels: has_vowel = True else: has_consonant = True if has_vowel and has_consonant: return \\"Yes\\" return \\"No\\""},{"question":"You are given a number of test cases. For each test case, you are given an array of integers. Your task is to determine if there exists three different indices i, j, and k such that arr[i] + arr[j] + arr[k] = 0. If such a combination exists, print \\"YES\\", otherwise print \\"NO\\". Input The first line contains an integer T (1 ≤ T ≤ 100) — the number of test cases. The first line of each test case contains an integer n (3 ≤ n ≤ 10^3) — the size of the array. The second line of each test case contains n integers, each between -10^5 and 10^5 — the elements of the array. Output For each test case, print \\"YES\\" if there exists three different indices i, j, and k such that arr[i] + arr[j] + arr[k] = 0, otherwise print \\"NO\\". Example Input 3 5 -1 0 1 2 -1 4 1 2 3 4 6 -8 -3 1 2 3 5 Output YES NO YES Note In the first test case, the triplet (-1, 0, 1) sums to 0. In the second test case, no three elements sum to 0. In the third test case, the triplet (-8, 3, 5) sums to 0.","solution":"def has_triplet_with_zero_sum(arr): This function checks if there exists three different indices i, j, and k such that arr[i] + arr[j] + arr[k] == 0. If such a triplet exists, it returns \\"YES\\", otherwise \\"NO\\". arr.sort() n = len(arr) for i in range(n - 2): left = i + 1 right = n - 1 while left < right: sum = arr[i] + arr[left] + arr[right] if sum == 0: return \\"YES\\" elif sum < 0: left += 1 else: right -= 1 return \\"NO\\" def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(has_triplet_with_zero_sum(arr)) return results"},{"question":"A manufacturing plant has m machines, each with different production capacities. Machines are indexed with consecutive integers from 1 to m. The capacity of machine j is expressed as an integer p_j, which indicates the maximum number of items it can produce per hour. The plant needs to fulfill two different production orders P_1 and P_2, which require y_1 and y_2 items per hour, respectively. Each production order can be split across multiple machines. If production order P_i is assigned to t_i machines, the total items required are evenly distributed among these machines, so each machine needs to produce y_i / t_i (this can be a fractional number) items per hour. A machine can either be unused or be dedicated to a single production order (not both). The machine\'s production must not exceed its capacity. Determine if it\'s possible to fulfill both production orders using the available machines. If yes, specify which machines will be used for each production order. Input The first line holds three integers m, y_1, y_2 (2 ≤ m ≤ 300 000, 1 ≤ y_1, y_2 ≤ 10^9) — the number of machines in the plant and the items required per hour for each production order. The second line contains m space-separated integers p_1, p_2, …, p_m (1 ≤ p_i ≤ 10^9) — the production capacity of each machine. Output If it’s impossible to fulfill both production orders, print the only word \\"No\\" (without the quotes). Otherwise, print the word \\"Yes\\" (without the quotes). In the second line, print two integers t_1 and t_2 (1 ≤ t_1, t_2 ≤ m) — the number of machines used for each production order. In the third line, print t_1 integers, the indices of the machines that will be used for the first production order. In the fourth line, print t_2 integers, the indices of the machines that will be used for the second production order. No index should appear more than once among the indices you provide in the last two lines. If multiple solutions are possible, any valid one is acceptable. Examples Input 5 50 100 25 50 30 20 40 Output Yes 2 2 2 5 1 3 Input 3 60 90 20 30 40 Output No Input 6 100 150 50 60 35 90 80 75 Output Yes 3 2 2 4 5 1 6 Input 4 40 80 10 20 30 40 Output No Note In the first sample, machines 2 and 5 will handle production order P_1, each producing 50 / 2 = 25 items per hour, while machines 1 and 3 will handle production order P_2, each producing 100 / 2 = 50 items per hour. In the second sample, there\'s no possible way to distribute the production orders within the given machine capacities.","solution":"def allocate_machines(m, y1, y2, capacities): capacities_with_indices = sorted(((capacity, index + 1) for index, capacity in enumerate(capacities)), reverse=True) # Try to find allocation for P_1 first, then P_2 def can_allocate(y, rest_capacities): for t in range(1, len(rest_capacities) + 1): if sum(rest_capacities[i][0] for i in range(t)) >= y: return [rest_capacities[i][1] for i in range(t)] return None for t1 in range(1, m): if sum(capacity for capacity, _ in capacities_with_indices[:t1]) >= y1: remaining_capacities = capacities_with_indices[t1:] machines_for_first_order = [index for _, index in capacities_with_indices[:t1]] machines_for_second_order = can_allocate(y2, remaining_capacities) if machines_for_second_order is not None: return \'Yes\', t1, len(machines_for_second_order), machines_for_first_order, machines_for_second_order return \'No\', def main(): import sys input = sys.stdin.read data = input().split() m = int(data[0]) y1 = int(data[1]) y2 = int(data[2]) capacities = list(map(int, data[3:])) result = allocate_machines(m, y1, y2, capacities) if result[0] == \'No\': print(\'No\') else: yes, t1, t2, first_order_machines, second_order_machines = result print(yes) print(t1, t2) print(\' \'.join(map(str, first_order_machines))) print(\' \'.join(map(str, second_order_machines))) if __name__ == \\"__main__\\": main()"},{"question":"You are given two strings, s and t, consisting of lowercase English letters. You are allowed to rearrange the characters in both strings. Your goal is to determine if you can make the two strings anagrams of each other using the following operations: 1. You can swap any two characters in string s. 2. You can swap any two characters in string t. 3. You can replace any character in string s with any other character that is present in string t (the replaced character must remain in string t). Determine if it is possible to make the two strings anagrams of each other using the allowed operations. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the strings s and t. The second line contains a string s of length n. The third line contains a string t of length n. Output Output \\"YES\\" if it is possible to make the two strings anagrams of each other using the allowed operations. Otherwise, output \\"NO\\". Examples Input 5 abcde edcba Output YES Input 4 abcd efgh Output NO Note In the first example, strings s and t can be rearranged to form \\"abcde\\" and \\"edcba\\" respectively, which are anagrams of each other. In the second example, there are no common characters between s and t, so it is impossible to make them anagrams of each other.","solution":"def can_make_anagrams(n, s, t): from collections import Counter counter_s = Counter(s) counter_t = Counter(t) # Compare the frequency counts of characters in both strings if counter_s == counter_t: return \\"YES\\" else: return \\"NO\\""},{"question":"Alex and Sam are working together on a software project. They have a list of dependencies, where each dependency specifies that one module needs another module to be built first. For instance, if module A depends on module B, then B must be built before A. We are given the total number of modules `n` and a list of dependencies. The modules are labeled from 1 to `n`. Each dependency is described by a pair (a, b), meaning module `a` depends on module `b`. There are no cyclic dependencies. The task is to determine a valid build order of the modules. If multiple valid build orders exist, return any of them. Provide a function `findBuildOrder(n, dependencies)` that returns the build order of the modules. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of modules. - The second line contains an integer `m` (0 ≤ m ≤ 10000), the number of dependencies. - The next `m` lines each contain two integers `a` and `b` (1 ≤ a, b ≤ n), indicating that module `a` depends on module `b`. # Output - Output a single line containing the build order of the modules separated by spaces. If there are multiple valid orders, output any one of them. # Example Input ``` 5 4 3 1 3 2 4 2 5 4 ``` Output ``` 1 2 3 4 5 ``` (or any other valid build order, such as `2 1 3 5 4`) Input ``` 3 2 3 1 3 2 ``` Output ``` 1 2 3 ``` (or any other valid build order, such as `2 1 3`)","solution":"from collections import deque, defaultdict def findBuildOrder(n, dependencies): # Create a graph in the form of an adjacency list graph = defaultdict(list) # Create a list to track the in-degree (number of dependencies) of each node in_degree = [0] * (n + 1) # Fill in the graph and in-degree list based on dependencies for a, b in dependencies: graph[b].append(a) in_degree[a] += 1 # Use a queue to perform topological sort queue = deque() # Initialize the queue with all nodes having in-degree of 0 for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) build_order = [] while queue: node = queue.popleft() build_order.append(node) # Reduce the in-degree of each neighbor by 1 for neighbor in graph[node]: in_degree[neighbor] -= 1 # If in-degree becomes 0, add it to the queue if in_degree[neighbor] == 0: queue.append(neighbor) return build_order"},{"question":"You are given an integer array `A` of length `N`, and you need to perform a series of `Q` queries on it. Each query can be one of the following two types: 1. Update the value at index `i` to `x`. 2. Find the sum of elements in the subarray from index `l` to `r` (inclusive). Implement a function to efficiently handle these operations, given the constraints. Constraints * 1 ≦ N ≦ 10^5 * 1 ≦ Q ≦ 10^5 * 1 ≦ A[i] ≦ 10^9 * 1 ≦ i ≦ N * 1 ≦ l ≦ r ≦ N * 1 ≦ x ≦ 10^9 Input The input is given from Standard Input in the following format: ``` N Q A_1 A_2 ... A_N operation_1 operation_2 : operation_Q ``` Each operation is given in one of the following formats: - `1 i x` (Update the element at index `i` to `x`) - `2 l r` (Find the sum of elements from `l` to `r`) Output For each sum query, print the result on a new line. Examples Input ``` 5 3 1 2 3 4 5 2 1 3 1 2 10 2 1 3 ``` Output ``` 6 14 ```","solution":"class NumArray: def __init__(self, nums): self.n = len(nums) self.tree = [0] * (self.n + 1) self.nums = nums[:] for i in range(self.n): self._update_tree(i + 1, self.nums[i]) def _update_tree(self, i, val): while i <= self.n: self.tree[i] += val i += i & -i def update(self, i, val): diff = val - self.nums[i] self.nums[i] = val self._update_tree(i + 1, diff) def _query_tree(self, i): res = 0 while i > 0: res += self.tree[i] i -= i & -i return res def sumRange(self, l, r): return self._query_tree(r + 1) - self._query_tree(l) def process_operations(N, Q, A, queries): num_array = NumArray(A) results = [] for query in queries: if query[0] == 1: num_array.update(query[1] - 1, query[2]) elif query[0] == 2: results.append(num_array.sumRange(query[1] - 1, query[2] - 1)) return results # Function to read input and call process_operations def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) Q = int(data[1]) A = list(map(int, data[2:N+2])) queries = [] idx = N + 2 for _ in range(Q): op = int(data[idx]) if op == 1: queries.append((op, int(data[idx+1]), int(data[idx+2]))) idx += 3 elif op == 2: queries.append((op, int(data[idx+1]), int(data[idx+2]))) idx += 3 results = process_operations(N, Q, A, queries) for result in results: print(result)"},{"question":"Matrix Rotation Objective Write a program to rotate a given square matrix by 90 degrees clockwise. Description Given an NxN matrix, rotate it by 90 degrees clockwise. Input The input consists of multiple lines. The first line contains an integer N (1 ≤ N ≤ 100) representing the size of the matrix. The next N lines each contain N integers representing the matrix elements. The end of the input is indicated by a line consisting only of \\"#\\", which is not a dataset. Output For each dataset, print the rotated matrix in NxN format. Each number should be followed by a space, and each line of the matrix should end without trailing spaces. Sample Input 3 1 2 3 4 5 6 7 8 9 # 5 10 20 30 40 50 11 21 31 41 51 12 22 32 42 52 13 23 33 43 53 14 24 34 44 54 # Output for Sample Input 7 4 1 8 5 2 9 6 3 14 13 12 11 10 24 23 22 21 20 34 33 32 31 30 44 43 42 41 40 54 53 52 51 50 Example Input 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Example Output 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4","solution":"def rotate_matrix_90_clockwise(matrix): Rotates a given NxN matrix by 90 degrees clockwise. n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n-1-i] = matrix[i][j] return rotated_matrix def process_input(matrix_strings): Processes the input to convert it into a matrix and then calls rotate_matrix_90_clockwise to get the rotated matrix. matrix = [] for row in matrix_strings: matrix.append(list(map(int, row.split()))) return rotate_matrix_90_clockwise(matrix)"},{"question":"As a game developer, you are overseeing a collision detection algorithm for a new 3D space adventure game. In this game, the player navigates a spaceship through various sectors of space. Each sector may contain spherical obstacles that the player must avoid to safely reach their destination. Your task is to write a program that determines whether the player\'s spaceship will collide with any of these spherical obstacles given its flight path. # Obstacle Information Each spherical obstacle is defined by its center coordinates and radius. # Input 1. The first line contains the coordinates of the spaceship\'s starting position (x1, y1, z1) (three integers separated by a space). 2. The second line contains the coordinates of the spaceship\'s ending position (x2, y2, z2) (three integers separated by a space). 3. The third line contains an integer `n` which represents the number of obstacles in the sector. 4. The next `n` lines each contain the coordinates of the center of an obstacle (xc, yc, zc) and its radius r (four integers separated by a space). # Output Output \\"COLLISION\\" if the spaceship\'s flight path intersects with any spherical obstacle. Otherwise, output \\"SAFE\\". # Constraints - -1000 ≤ x1, y1, z1, x2, y2, z2, xc, yc, zc ≤ 1000 - 1 ≤ r ≤ 100 - 1 ≤ n ≤ 100 # Example Input ``` 0 0 0 10 10 10 2 5 5 5 3 8 8 8 1 ``` Output ``` COLLISION ``` Input ``` 0 0 0 10 10 10 2 20 20 20 4 -4 -4 -4 2 ``` Output ``` SAFE ```","solution":"def check_collision(start, end, obstacles): def distance_sq_point_to_segment(px, py, pz, ax, ay, az, bx, by, bz): abx, aby, abz = bx - ax, by - ay, bz - az apx, apy, apz = px - ax, py - ay, pz - az ab_ap_product = abx * apx + aby * apy + abz * apz ab_ab_product = abx * abx + aby * aby + abz * abz if ab_ab_product == 0: # segment is a point return apx * apx + apy * apy + apz * apz t = max(0, min(1, ab_ap_product / ab_ab_product)) closest_point_x = ax + t * abx closest_point_y = ay + t * aby closest_point_z = az + t * abz dx, dy, dz = px - closest_point_x, py - closest_point_y, pz - closest_point_z return dx * dx + dy * dy + dz * dz x1, y1, z1 = start x2, y2, z2 = end for (xc, yc, zc, r) in obstacles: if distance_sq_point_to_segment(xc, yc, zc, x1, y1, z1, x2, y2, z2) <= r * r: return \\"COLLISION\\" return \\"SAFE\\" # Example usage start = (0, 0, 0) end = (10, 10, 10) obstacles = [(5, 5, 5, 3), (8, 8, 8, 1)] print(check_collision(start, end, obstacles)) # Output: \\"COLLISION\\""},{"question":"You are given a grid with R rows and C columns. Each cell in the grid can be either empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). You are currently standing at the top-left corner of the grid (cell (1,1)) and you want to reach the bottom-right corner (cell (R,C)). You can move to an adjacent cell in the grid if that cell is empty. Moves can be made in the up, down, left, or right direction. Determine if there exists a path from the top-left corner to the bottom-right corner and find one such path if it exists. If multiple paths exist, output any one of them. Constraints - The grid dimensions R and C are integers. - 1 ≤ R, C ≤ 1000 - The grid contains at least one empty cell in both the top-left and bottom-right corners. Input Input is given from Standard Input in the following format: ``` R C grid_1 grid_2 ... grid_R ``` Here `grid_i` is a string representing the i-th row of the grid. Output If a path exists, print `Yes` followed by the path in terms of the coordinates visited from the start to the end on the subsequent lines in the following format: ``` Yes x1 y1 x2 y2 ... xk yk ``` If no path exists, print `No`. Examples Input ``` 5 5 ..... .#. ..... .#. ..... ``` Output ``` Yes 1 1 2 1 3 1 3 2 3 3 4 3 5 3 5 4 5 5 ``` Input ``` 3 3 .#. # .#. ``` Output ``` No ```","solution":"def find_path(R, C, grid): from collections import deque def is_valid(x, y): return 0 <= x < R and 0 <= y < C and grid[x][y] == \'.\' directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] start = (0, 0) goal = (R-1, C-1) queue = deque([start]) visited = set([start]) parent = {start: None} while queue: current = queue.popleft() if current == goal: path = [] while current is not None: path.append(current) current = parent[current] path.reverse() return \\"Yesn\\" + \\"n\\".join(f\\"{x+1} {y+1}\\" for x, y in path) for direction in directions: next_cell = (current[0] + direction[0], current[1] + direction[1]) if next_cell not in visited and is_valid(*next_cell): queue.append(next_cell) visited.add(next_cell) parent[next_cell] = current return \\"No\\" # Function to handle input and output def grid_path(): import sys input = sys.stdin.read data = input().split() R = int(data[0]) C = int(data[1]) grid = [list(data[i + 2]) for i in range(R)] print(find_path(R, C, grid))"},{"question":"In a distant land of geometric shapes, there lies a special square grid of size n x n. Each cell in the grid contains either a \'B\' to represent a black cell or a \'W\' to represent a white cell. The villagers want to repaint some of the white cells black in such a way that every row and every column of the grid has at least one \'B\'. They want to perform this task with the minimum number of repaints. Your task is to determine the minimum number of repaints required for each test case. Input The input consists of multiple test cases. The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with a single integer n (1 ≤ n ≤ 50) — the side length of the square grid. The next n lines each contain n characters (either \'B\' or \'W\'), representing the initial state of the grid. Output For each test case, output a single integer — the minimum number of repaints required so that every row and every column contains at least one \'B\'. Example Input 2 3 BWW WBW WWW 4 BBBB WWWW WWWW WWWW Output 1 3 Explanation In the first test case, repainting the cell at (3,1) to \'B\' ensures that every row and column has at least one \'B\'. Thus, the minimum number of repaints required is 1. In the second test case, repainting the cells at (2,1), (3,1) and (4,1) is sufficient to ensure that every row and column contains at least one \'B\', resulting in a minimum of 3 repaints.","solution":"def min_repaints(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] grid = test_cases[i][1] rows_to_repaint = sum(1 for r in grid if \'B\' not in r) cols_to_repaint = sum(1 for c in zip(*grid) if \'B\' not in c) results.append(max(rows_to_repaint, cols_to_repaint)) return results"},{"question":"Zara loves playing with matrices. She especially enjoys the challenge of finding paths with specific properties. Today’s challenge involves a matrix and a peculiar rule about the paths. She has a `n x m` matrix filled with non-negative integers. Zara is interested in finding the maximum sum of a path that starts at the top-left corner and ends at the bottom-right corner of the matrix while only being allowed to move either right or down at any step. Help Zara by writing a function that calculates this maximum sum. # Constraints - 1 ≤ n, m ≤ 500 - 0 ≤ matrix[i][j] ≤ 1000 # Input - The first line contains two integers `n` and `m` (number of rows and columns of the matrix). - The next `n` lines each contain `m` integers describing the matrix. # Output - Print the maximum sum of the path from the top-left corner to the bottom-right corner, following the move constraints. # Examples Example 1 **Input:** ``` 3 3 1 3 1 1 5 1 4 2 1 ``` **Output:** ``` 12 ``` **Explanation:** ``` The path 1 → 3 → 5 → 2 → 1 gives the maximum sum of 12. ``` Example 2 **Input:** ``` 2 2 1 2 1 1 ``` **Output:** ``` 4 ``` **Explanation:** ``` The path 1 → 2 → 1 gives the maximum sum of 4. ```","solution":"def max_path_sum(matrix): n = len(matrix) m = len(matrix[0]) # Initialize dp table with the same dimensions as the matrix dp = [[0] * m for _ in range(n)] # Fill in the dp table dp[0][0] = matrix[0][0] # Fill in the first row (only move right) for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill in the first column (only move down) for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the grid for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[-1][-1] # Example usage: # matrix = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(max_path_sum(matrix)) # Output: 12"},{"question":"Write a program that, given a list of string pairs, finds the minimum number of steps required to transform the first string in each pair into the second string. A step consists of either inserting, deleting, or replacing a single character. You can assume the input strings will only contain lowercase English letters. **Input** The first line contains an integer n (1 ≤ n ≤ 1000), the number of string pairs. The next 2n lines contain the string pairs. Each pair consists of two lines, where the first line is the initial string and the second line is the target string. Each string has length at most 100. **Output** Output n lines. Each line should contain the minimum number of steps required to transform the first string of the corresponding pair into the second string. **Examples** **Input** ``` 2 horse ros intention execution ``` **Output** ``` 3 5 ``` **Explanation** In the first example: - horse → rorse (replace \'h\' with \'r\') - rorse → rose (remove \'r\') - rose → ros (remove \'e\') In the second example: - intention → exention (replace \'i\' with \'e\') - exention → exection (replace \'n\' with \'c\') - exection → exection (replace \'t\' with \'e\') - exection → exection (replace \'n\' with \'u\') - exection → execution (insert \'u\')","solution":"def minDistance(word1, word2): Given two words word1 and word2, this function returns the minimum number of operations required to convert word1 to word2. You can insert, delete, or replace a character. m, n = len(word1), len(word2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # fill the first row elif j == 0: dp[i][j] = i # fill the first column elif word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # delete dp[i][j - 1], # insert dp[i - 1][j - 1]) # replace return dp[m][n] def minimal_steps(n, string_pairs): results = [] for i in range(n): word1 = string_pairs[i][0] word2 = string_pairs[i][1] results.append(minDistance(word1, word2)) return results"},{"question":"You are provided with a string `s` and a list of words `words`. Your task is to implement a function to find all the starting indices of substring(s) in `s` that are concatenations of each word in `words` exactly once and without any intervening characters. The need is to find all starting indices of substring(s) in `s` that are concatenations of each word in `words` exactly once and without any intervening characters. # Input - A string `s` of length `n` (1 ≤ n ≤ 10^4), consisting of lower case English letters. - An array of words `words` containing `k` words, each of length `m` (1 ≤ k ≤ 5000, 1 ≤ m ≤ 10000). All words in the input are of non-zero length and consist of lower case English letters. # Output - The function should return a list of all starting indices of the concatenation substrings in `s`. The indices should be returned in ascending order. # Example Input ```python s = \\"barfoothefoobarman\\" words = [\\"foo\\",\\"bar\\"] ``` Output ```python [0, 9] ``` # Note In this example, the substring starting at index 0 (\\"barfoo\\") and the substring starting at index 9 (\\"foobar\\") are concatenations of every word in `words` exactly once, so the function returns [0, 9]. If the `words` list is empty, return an empty list since there are no words to concatenate. # Constraints * The order of concatenation does not matter, that is the words can be concatenated in any permutation to form the required substring. * The length of the final concatenation (k * m) will not exceed 10^4.","solution":"def find_substring(s, words): if not s or not words: return [] word_length = len(words[0]) word_count = len(words) total_length = word_length * word_count # Creating a frequency map of the words word_map = {} for word in words: if word in word_map: word_map[word] += 1 else: word_map[word] = 1 def is_valid(start): seen = {} words_used = 0 for i in range(start, start + total_length, word_length): part = s[i:i+word_length] if part in word_map: if part in seen: seen[part] += 1 else: seen[part] = 1 if seen[part] > word_map[part]: return False words_used += 1 else: return False return words_used == word_count result = [] for i in range(len(s) - total_length + 1): if is_valid(i): result.append(i) return result"},{"question":"You\'re given a grid where each cell has a certain number of apples. You start in the top-left corner of the grid, and your goal is to reach the bottom-right corner. You can only move either right or down at any point in time. Write a function to calculate the maximum number of apples you can collect by the time you reach the bottom-right corner. Input: - The first line of input will have two integers, n and m, representing the number of rows and columns in the grid, respectively. - The next n lines will each have m integers representing the number of apples in each cell. Output: - A single integer, the maximum number of apples that can be collected. Sample Input: 3 3 1 2 3 4 5 6 7 8 9 Sample Output: 29","solution":"def max_apples(grid): n = len(grid) m = len(grid[0]) # Initialize a dp table with the same dimensions as grid dp = [[0]*m for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner will have the result return dp[-1][-1]"},{"question":"In the realm of blockchain technology and cryptocurrency transactions, a simplified blockchain network consists of a series of blocks. Each block contains transactions and is identified by a unique integer ID. Each block also has a \\"previousBlockID\\" attribute that refers to the ID of the previous block in the chain, forming a sequence from the first block (genesis block) to the last (most recent) block. Transactions within the block are represented by amounts, which are integer values indicating transferred funds. Your objective is to determine the maximum cumulative transaction amount in any continuous sub-chain of blocks. A continuous sub-chain is defined as a series of consecutive blocks within the main chain. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of blocks in the blockchain. Next, each of the following n lines contains two integers identifier and transaction_amount (-10^9 ≤ transaction_amount ≤ 10^9). The identifier is unique for each block and describes the order of the blocks (ascending from 1 to n in the input). Output Print a single integer: the maximum cumulative transaction amount of any continuous sub-chain. Examples Input 5 1 3 2 -5 3 2 4 7 5 -1 Output 9 Input 3 1 -1 2 -2 3 -3 Output -1 Note In the first example, the sub-chain with maximum cumulative transaction amount is [4], amounting to 7. Another possible sub-chain is [3, 4], which sums up to 9. In the second example, all transaction amounts are negative, so the maximum cumulative transaction amount is the highest single transaction amount, which is -1.","solution":"def max_cumulative_amount(blocks): Finds the maximum cumulative transaction amount in any continuous sub-chain of blocks. :param blocks: List of tuples, where each tuple contains (identifier, transaction_amount) :return: Maximum cumulative transaction amount max_ending_here = max_so_far = blocks[0][1] for block in blocks[1:]: transaction = block[1] max_ending_here = max(transaction, max_ending_here + transaction) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"In an enchanted forest, there are various types of magical plants. Each type of plant has a unique growth pattern described by a sequence where the i-th term denotes the height of the plant after i days. There are n different types of plants in this forest. For each plant type, you are given an array representing its growth pattern for the next m days. Your task is to determine the type of plant that will be the tallest on the last day (m-th day). In case of a tie (two or more plants having the same maximum height on the m-th day), return the type with the smallest index. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 100) — the number of plant types and the number of days, respectively. The next n lines contain m integers each; the j-th integer in the i-th line represents the height of the i-th plant type on the j-th day (1 ≤ height ≤ 10000). Output Print the 1-based index of the plant type that will be the tallest on the m-th day. If multiple plant types have the same height on the m-th day, print the one with the smallest index. Examples Input 3 4 10 20 30 40 5 15 25 35 8 18 28 38 Output 1 Input 2 3 100 200 300 100 200 400 Output 2 Note In the first example, the heights of the plants on the last day are 40, 35, and 38, respectively. Plant type 1 is the tallest. In the second example, the heights of the plants on the last day are 300 and 400, respectively. Plant type 2 is the tallest.","solution":"def tallest_plant(n, m, growth_patterns): Determines the type of plant that will be the tallest on the last day (m-th day). Returns the 1-based index of the type with the maximum height on the m-th day. tallest_index = 0 max_height = -1 for i in range(n): height_on_last_day = growth_patterns[i][m-1] if height_on_last_day > max_height: max_height = height_on_last_day tallest_index = i elif height_on_last_day == max_height: if i < tallest_index: tallest_index = i return tallest_index + 1"},{"question":"Create a function that takes a string representing a simple mathematical expression made of two positive single-digit numbers and a multiplication or division operator, then calculates and returns the result. Input The only given line has a string in the form \\"n#n\\", where each \\"n\\" is a single digit (from 0 to 9) and \\"#\\" is either \'*\' (for multiplication) or \'/\' (for division). Output Print the result of the given expression. If the division is not exact, round the result to 2 decimal places. Examples Input 4*3 Output 12 Input 8/3 Output 2.67","solution":"def evaluate_expression(expression): Takes a string representing a simple mathematical expression made of two positive single-digit numbers and a multiplication or division operator, then calculates and returns the result. if \'*\' in expression: left, right = expression.split(\'*\') return int(left) * int(right) elif \'/\' in expression: left, right = expression.split(\'/\') return round(int(left) / int(right), 2)"},{"question":"You are given n tasks, each task having some duration. You have to schedule these tasks to minimize the maximum cumulative task duration at any time point during execution. You have m identical processors that can execute these tasks in parallel. Each processor can execute only one task at a time without preemption. Calculate the minimum possible value of this maximum cumulative task duration. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100), representing the number of tasks and the number of processors, respectively. The second line contains n space-separated positive integers, where the i-th integer denotes the duration of the i-th task. Each task duration is between 1 and 1000. Output Print a single integer — the minimum possible value of the maximum cumulative task duration. Examples Input 5 2 3 5 2 7 1 Output 9 Input 4 3 8 3 7 2 Output 8 Note For the first example: - One possible optimal scheduling is: - Processor 1 executes tasks with durations [7, 2], cumulative duration is 9. - Processor 2 executes tasks with durations [5, 3, 1], cumulative duration is 9. Therefore, the maximum cumulative task duration is 9. For the second example: - One possible optimal scheduling is: - Processor 1 executes tasks with durations [8], cumulative duration is 8. - Processor 2 executes tasks with durations [7], cumulative duration is 7. - Processor 3 executes tasks with durations [3, 2], cumulative duration is 5. Therefore, the maximum cumulative task duration is 8.","solution":"def min_max_cumulative_duration(n, m, tasks): tasks.sort(reverse=True) # Sort tasks in descending order processors = [0] * m # Initialize all processors with 0 duration for task in tasks: # Assign the task to the processor with the least cumulative duration min_processor_index = processors.index(min(processors)) processors[min_processor_index] += task return max(processors)"},{"question":"You are given an array consisting of n integers. Your task is to find the maximum sum of any non-empty subarray of this array. Additionally, the subarray must not contain two consecutive elements from the original array. Write a function to compute the required maximum sum. Input The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers (1 ≤ a_i ≤ 1000) — the elements of the array. Output Print a single integer — the maximum sum of any non-empty subarray that does not include two consecutive elements from the original array. Examples Input 5 1 2 3 4 5 Output 9 Explanation The maximum sum is 9, obtained by choosing elements {1, 3, 5} from the array. This subarray does not contain any two consecutive elements from the original array. Input 3 10 3 4 Output 14 Explanation The maximum sum is 14, obtained by choosing elements {10, 4} from the array. This subarray does not contain any two consecutive elements from the original array.","solution":"def max_sum_no_consecutive(arr): Returns the maximum sum of any non-empty subarray such that no two consecutive elements are included. n = len(arr) if n == 0: return 0 if n == 1: return arr[0] # dp[i] will store the maximum sum possible considering arr[0] ... arr[i] dp = [0] * n # Base cases dp[0] = arr[0] if n > 1: dp[1] = max(arr[0], arr[1]) # Fill the dp array for i in range(2, n): dp[i] = max(dp[i-1], arr[i] + dp[i-2]) return dp[n-1]"},{"question":"Implement a function that converts a given integer into its Roman numeral equivalent. The Roman numeral system uses combinations of the following symbols: - I (1) - V (5) - X (10) - L (50) - C (100) - D (500) - M (1000) The symbols are placed from left to right in order of value and are generally written from largest to smallest. However, there are six instances where a smaller numeral appears before a larger one to indicate subtraction: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Given an integer, convert it to a Roman numeral. The input integer will be between 1 and 3999, inclusive. Function Signature: ```python def int_to_roman(num: int) -> str: pass ``` Input: - An integer `num` where 1 ≤ num ≤ 3999. Output: - A string representing the Roman numeral equivalent of the input integer. Examples: ```python assert int_to_roman(3) == \\"III\\" assert int_to_roman(58) == \\"LVIII\\" assert int_to_roman(1994) == \\"MCMXCIV\\" ``` Note: - You may use a lookup table to map integer values to their corresponding Roman numeral strings. - Ensure that the function handles all the special cases where subtraction is used in the numeral system.","solution":"def int_to_roman(num: int) -> str: Converts an integer to its Roman numeral equivalent. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syms[i] num -= val[i] i += 1 return roman_num"},{"question":"Given a sequence of integers, find the length of the longest subsequence which is first increasing and then decreasing in nature. Assume subsequence means a sequence that can be derived by deleting some or no elements of the array without changing the order of the remaining elements. INPUT: - First line contains an integer N, the number of elements in the sequence. - Second line contains N spaced integers representing the sequence. OUTPUT: - Print the length of the longest sequence which first increases and then decreases. 1 ≤ N ≤ 1000 SAMPLE INPUT 7 1 2 3 4 5 3 2 SAMPLE OUTPUT 7","solution":"def longest_bitonic_subsequence(arr): Returns the length of the longest subsequence which is first increasing and then decreasing in nature. n = len(arr) # Initialize the increasing subsequence lengths inc = [1] * n # Initialize the decreasing subsequence lengths dec = [1] * n # Fill the inc[] array (length of increasing subsequence ending at each index) for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and inc[i] < inc[j] + 1: inc[i] = inc[j] + 1 # Fill the dec[] array (length of decreasing subsequence starting at each index) for i in range(n-2, -1, -1): for j in range(n-1, i, -1): if arr[i] > arr[j] and dec[i] < dec[j] + 1: dec[i] = dec[j] + 1 # Find the length of the maximum length bitonic subsequence max_len = 0 for i in range(n): max_len = max(max_len, inc[i] + dec[i] - 1) return max_len"},{"question":"Given an array of integers, you need to find the maximum sum of a subarray that has no repeating elements. A subarray is a contiguous part of an array. Implement a function that returns this maximum sum. Input The input consists of a single line, which contains a space-separated list of integers. The array will have a length between 1 and 30, and each integer will be a non-negative value between 0 and 1000. Output The output should be a single integer representing the maximum sum of a subarray with no repeating elements. Examples Input 4 2 4 5 6 2 3 4 Output 20 Input 1 2 3 4 5 Output 15 Explanation In the first example, the subarray [5, 6, 2, 3, 4] gives the largest sum of 20 with no repeating elements. In the second example, the entire array [1, 2, 3, 4, 5] has no repeating elements and its sum is 15.","solution":"def max_sum_subarray_no_repeats(arr): Returns the maximum sum of a subarray with no repeating elements. n = len(arr) max_sum = 0 current_sum = 0 start = 0 seen = {} for end in range(n): if arr[end] in seen and seen[arr[end]] >= start: start = seen[arr[end]] + 1 current_sum = sum(arr[start:end+1]) else: current_sum += arr[end] seen[arr[end]] = end max_sum = max(max_sum, current_sum) return max_sum def parse_input(input_str): Parses the input string and returns it as a list of integers. return list(map(int, input_str.split())) def main(): import sys input_str = sys.stdin.read().strip() arr = parse_input(input_str) print(max_sum_subarray_no_repeats(arr))"},{"question":"You are given a list of transactions made by various users in an e-commerce platform. Each transaction is identified by a unique transaction ID, user ID, and the amount spent in that transaction. Your task is to find the user who spent the most money, the user who made the highest number of transactions, and the details (transaction ID and amount) of the single highest transaction. Create a program that inputs the transaction details and outputs the user who spent the most, the user with the highest number of transactions, and the details of the highest transaction. Input: The input is given in the following format: t1 u1 a1 t2 u2 a2 :: tn un an Each line contains: - tx: transaction ID (integer, 1 ≤ tx ≤ 100000) - ux: user ID (integer, 1 ≤ ux ≤ 1000) - ax: amount spent in that transaction (real number between 1 and 100, inclusive) Output: Output three lines: 1. User ID of the user who spent the most money. 2. User ID of the user who made the highest number of transactions. 3. Transaction ID and amount of the highest transaction. Example: Input: 101 1 29.99 102 2 79.95 103 1 49.99 104 3 19.99 105 2 99.95 106 1 9.99 107 3 29.99 108 2 9.99 Output: 2 1 105 99.95 Explanation: - User 2 spent the most money (79.95 + 99.95 + 9.99 = 189.89). - User 1 made the highest number of transactions (3 transactions: 101, 103, and 106). - The transaction with ID 105 had the highest amount spent (99.95).","solution":"def analyze_transactions(transactions): Analyze the given list of transactions and find: 1. The user who spent the most money. 2. The user who made the highest number of transactions. 3. The details of the single highest transaction. Each transaction is a tuple: (transaction_id, user_id, amount). from collections import defaultdict user_spending = defaultdict(float) user_trans_count = defaultdict(int) highest_transaction = None for tx_id, user_id, amount in transactions: user_spending[user_id] += amount user_trans_count[user_id] += 1 if highest_transaction is None or amount > highest_transaction[1]: highest_transaction = (tx_id, amount) # Find the user who spent the most max_spent_user = max(user_spending, key=user_spending.get) # Find the user with the highest number of transactions max_trans_user = max(user_trans_count, key=user_trans_count.get) return (max_spent_user, max_trans_user, highest_transaction) # Example runs with provided data transactions = [ (101, 1, 29.99), (102, 2, 79.95), (103, 1, 49.99), (104, 3, 19.99), (105, 2, 99.95), (106, 1, 9.99), (107, 3, 29.99), (108, 2, 9.99) ] analyze_transactions(transactions) # Expected output: (2, 1, (105, 99.95))"},{"question":"There is a sequence of n integers representing the heights of buildings in a row. You need to find the minimum number of operations required to make the heights of all the buildings non-decreasing. In each operation, you can increase the height of any building by 1. Input The first line contains a single integer n (1 ≤ n ≤ 1000). The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000), where hi represents the height of the i-th building. Output Output a single integer — the minimum number of operations needed. Examples Input 5 2 1 5 3 4 Output 4 Input 3 3 2 1 Output 3 Input 4 1 2 3 4 Output 0 Note In the first example, you could make the heights [2, 2, 5, 5, 5] with 4 operations. In the second example, you need to increase the height of the last two buildings to match the first one. In the third example, the heights are already non-decreasing, so no operations are needed.","solution":"def min_operations_to_non_decreasing(n, heights): Returns the minimum number of operations required to make the heights of all buildings non-decreasing. operations = 0 for i in range(1, n): if heights[i] < heights[i-1]: operations += (heights[i-1] - heights[i]) heights[i] = heights[i-1] return operations"},{"question":"You are given an array A consisting of n (1 ≤ n ≤ 100,000) integers. You are to perform q operations, each of which is defined as follows: 1. \\"1 x y\\": Update the element at index x (1 ≤ x ≤ n) of the array to y (1 ≤ y ≤ 10^9). 2. \\"2 x y\\": Compute the sum of the elements in the subarray from index x to index y (1 ≤ x ≤ y ≤ n). You need to handle each operation efficiently and output the result for each query of type \\"2 x y\\". Input The first line contains two space-separated integers n and q. The second line contains n space-separated integers a1, a2, ..., an, which are the initial elements of the array. The next q lines contain one of the two types of operations described above. Output For each operation of type \\"2 x y\\", print the sum of the elements in the subarray from index x to index y. Examples Input 5 3 5 3 8 6 2 2 1 3 1 2 10 2 1 3 Output 16 21 Input 4 4 1 2 3 4 2 1 4 1 3 10 2 2 3 2 1 2 Output 10 12 3 Note In the first example, the initial array is [5, 3, 8, 6, 2]. - The first query asks for the sum from index 1 to index 3, which is 5 + 3 + 8 = 16. - The second operation updates index 2 to 10, so the array becomes [5, 10, 8, 6, 2]. - The third query asks for the sum from index 1 to index 3 in the updated array, which is 5 + 10 + 8 = 23.","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, value): while index <= self.size: self.tree[index] += value index += index & -index def query(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def process_operations(n, q, array, operations): fenwick_tree = FenwickTree(n) result = [] # Initialize Fenwick Tree with array values for i in range(n): fenwick_tree.update(i + 1, array[i]) for operation in operations: op_type, x, y = operation if op_type == 1: current_val = fenwick_tree.query(x) - fenwick_tree.query(x - 1) fenwick_tree.update(x, y - current_val) elif op_type == 2: result.append(fenwick_tree.query(y) - fenwick_tree.query(x - 1)) return result"},{"question":"While reading a book from his favorite genre, John discovered that he could drastically improve his vocabulary by learning new words each day. To track his progress, he decided to maintain a log of new words learned daily. John notices that on some days he learns more words than the previous day, while on other days he learns fewer. He wants to identify the longest continuous period where the number of words he learned either increased or stayed the same each day. Your task is to help John find the length of this longest period. Input The first line contains an integer N, the number of days for which John has recorded new words. The second line contains N integers, each representing the number of words John learned on each day. The array words is 1-indexed. Output Print a single integer: the length of the longest continuous period where the number of words learned increased or stayed the same each day. Example Input: 7 5 6 7 7 2 8 9 Output: 4 Explanation: In the test case, N equals 7 and the words learned each day equals {5, 6, 7, 7, 2, 8, 9}. The longest continuous period where the number of words learned either increased or stayed the same is 4 days (5, 6, 7, 7). Scoring 1 ≤ N ≤ 10^5 for each test case; 1 ≤ words[i] ≤ 10^4 for each test case. Subtask 1 (10 points): 1 ≤ N ≤ 100; Subtask 2 (20 points): 1 ≤ N ≤ 1,000; Subtask 3 (35 points): 1 ≤ N ≤ 10,000; Subtask 4 (35 points): 1 ≤ N ≤ 100,000.","solution":"def longest_increasing_period(days, words): Finds the length of the longest continuous period where the number of words learned either increased or stayed the same each day. if days == 0: return 0 longest_period = 1 current_period = 1 for i in range(1, days): if words[i] >= words[i - 1]: current_period += 1 if current_period > longest_period: longest_period = current_period else: current_period = 1 return longest_period"},{"question":"Consider a grid of size n x m, where each cell contains a non-negative integer. You need to find the largest sum of values of cells in any subgrid of this grid. A subgrid is any rectangular portion of the grid that can be obtained by deleting some (possibly zero) rows from the top, some (possibly zero) rows from the bottom, some (possibly zero) columns from the left, and some (possibly zero) columns from the right. Your task is to write a program that takes multiple test cases, each representing a grid with its size and integer values, and finds the largest sum of values of cells in any subgrid for each test case. Input The first line of input contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow. For each test case, the first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns of the grid. Each of the next n lines contains m integers representing the values in the grid. The values in the grid are all non-negative integers and will not exceed 10^4. Output For each test case, print one line containing the largest sum of values of cells in any subgrid. Example Input 2 3 3 1 2 3 4 5 6 7 8 9 2 2 1 1 1 1 Output 45 4","solution":"def largest_subgrid_sum(grid): n = len(grid) m = len(grid[0]) # Create an auxiliary matrix to store the sum of the subgrids. aux = [[0]*m for _ in range(n)] # Fill the auxiliary matrix with cumulative sums. for i in range(n): for j in range(m): aux[i][j] = grid[i][j] if i > 0: aux[i][j] += aux[i-1][j] if j > 0: aux[i][j] += aux[i][j-1] if i > 0 and j > 0: aux[i][j] -= aux[i-1][j-1] max_sum = 0 # Iterate over all possible subgrids and calculate their sums using aux matrix. for i1 in range(n): for j1 in range(m): for i2 in range(i1, n): for j2 in range(j1, m): subgrid_sum = aux[i2][j2] if i1 > 0: subgrid_sum -= aux[i1-1][j2] if j1 > 0: subgrid_sum -= aux[i2][j1-1] if i1 > 0 and j1 > 0: subgrid_sum += aux[i1-1][j1-1] max_sum = max(max_sum, subgrid_sum) return max_sum # Function to process multiple test cases def process_test_cases(test_cases): results = [] for case in test_cases: grid = case[\\"grid\\"] results.append(largest_subgrid_sum(grid)) return results"},{"question":"Write a function that takes a string `s` and returns `True` if `s` is a palindrome and `False` otherwise. A palindrome is defined as a string that reads the same backward as forward. The function should be case-insensitive and ignore non-alphanumeric characters. # Function Signature ```python def is_palindrome(s: str) -> bool: pass ``` # Input - A single string `s` with length `1 ≤ |s| ≤ 100,000`. # Output - A boolean value `True` if `s` is a palindrome, `False` otherwise. # Example Example 1 ```python print(is_palindrome(\\"A man, a plan, a canal: Panama\\")) # True ``` **Explanation**: The input read backwards and ignoring case and non-alphanumeric characters is \\"amanaplanacanalpanama\\". Example 2 ```python print(is_palindrome(\\"race a car\\")) # False ``` **Explanation**: The input read backwards and ignoring case and non-alphanumeric characters is \\"raceacar\\", which is different from the original cleaned string. Example 3 ```python print(is_palindrome(\\" \\")) # True ``` **Explanation**: An empty string or a string with only non-alphanumeric characters is considered a palindrome because it reads the same backward as forward.","solution":"def is_palindrome(s: str) -> bool: # Filter only alphanumeric characters and convert to lowercase filtered_str = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered_str == filtered_str[::-1]"},{"question":"A transportation company needs to assign drivers to different delivery vehicles. The company has n drivers and m vehicles. Each driver has a certain level of experience, and each vehicle requires a minimum level of experience to be driven. To ensure that the delivery operations run smoothly, the company wants to maximize the total experience level of the drivers assigned to the vehicles, while also ensuring that each vehicle gets one and only one driver. You are given the experience levels of n drivers and the minimum experience levels required for m vehicles. Assign drivers to vehicles such that the total experience level of the assigned drivers is maximized. Input The first line contains two space-separated integers n and m (1 ≤ m ≤ n ≤ 100) — the number of drivers and the number of vehicles, respectively. The second line contains n space-separated integers e1, e2, ..., en (1 ≤ ei ≤ 10000) — the experience levels of the drivers. The third line contains m space-separated integers r1, r2, ..., rm (1 ≤ ri ≤ 10000) — the minimum required experience levels for each vehicle. Output Print a single integer — the maximum total experience level of the drivers assigned to the vehicles. Example Input 5 3 7 10 3 12 15 8 5 4 Output 37 Note In the example, the optimal assignment would be: - Driver with experience 10 to the vehicle with requirement 8 - Driver with experience 15 to the vehicle with requirement 5 - Driver with experience 12 to the vehicle with requirement 4 This gives a total experience level of 10 + 15 + 12 = 37.","solution":"def maximize_experience(n, m, drivers, vehicles): drivers.sort(reverse=True) vehicles.sort(reverse=True) total_experience = 0 j = 0 for i in range(m): while j < n and drivers[j] < vehicles[i]: j += 1 if j < n: total_experience += drivers[j] j += 1 return total_experience"},{"question":"The City of Bridges is a beautiful place built on a river delta, consisting of several islands connected by bridges. The city planners want to know the minimum number of bridges that must be removed to isolate a particular island from the rest, i.e., making it so no bridges connect that island to any other island. Your task is to help them find out the answer. Each island is represented by a node and each bridge is an undirected edge connecting two nodes. Constraints: - 2 ≤ n ≤ 100 (number of islands) - 1 ≤ m ≤ 200 (number of bridges) Input: - The first line of input consists of two integers n and m, the number of islands and the number of bridges respectively. - The next m lines each contain two integers u and v, representing a bridge between island u and island v. - The last line contains a single integer k, the index of the island to be isolated. Output: - A single integer, the minimum number of bridges that must be removed to isolate island k from the rest. Example: Input: ``` 4 4 0 1 0 2 1 2 2 3 2 ``` Output: ``` 3 ``` Explanation: In the example above, removing the bridges (0-2), (1-2), and (2-3) is necessary to isolate island 2.","solution":"def min_bridges_to_isolate_island(n, m, bridges, k): Find the minimum number of bridges that should be removed to isolate island `k` from the rest. n : int : number of islands m : int : number of bridges bridges : list of tuples : each (u, v) representing a bridge between island u and island v k : int : the index of the island to be isolated Returns: int : the minimum number of bridges that must be removed to isolate island k from collections import defaultdict, deque # Create adjacency list for the graph graph = defaultdict(set) for u, v in bridges: graph[u].add(v) graph[v].add(u) # Total bridges connected to island `k` return len(graph[k])"},{"question":"You are developing a simple text-based role-playing game (RPG) where players move between different rooms in a dungeon. Each room is connected to other rooms via doors, and each door is associated with a directional indicator (e.g., \'N\' for north, \'S\' for south, etc.). Your task is to design the player movement and room navigation system. Input The input starts with a single integer `n` (1 ≤ n ≤ 100) representing the number of rooms. The next `n` lines contain the room connections. Each line describes one room in the format: ``` room_id number_of_connections (direction connected_room_id)... ``` - `room_id` is an integer from 1 to n representing the room number. - `number_of_connections` is an integer indicating the number of doors to other rooms. - `direction` is a character representing the direction of the door (\'N\', \'S\', \'E\', \'W\'). - `connected_room_id` is an integer indicating the room id to which the door leads. The next line of input contains a series of directional commands separated by spaces instructing the player on how to move. Each command is one of \'N\', \'S\', \'E\', or \'W\'. Output The output should be the final room id where the player ends up after following all the commands, starting from room 1. If a move is invalid (i.e., no door in the commanded direction), the player remains in the current room and ignores that invalid command. Example Input 4 1 2 N 2 E 3 2 1 S 1 3 1 W 1 4 0 N E S Output 1 Input 3 1 1 S 2 2 1 N 1 3 0 S N N Output 2 Explanation In the first example: - The player starts in room 1. - The first command (`N`) moves the player to room 2. - The second command (`E`) is invalid from room 2, so the player remains in room 2. - The third command (`S`) moves the player back to room 1. So the final room id is 1. In the second example: - The player starts in room 1. - The first command (`S`) moves the player to room 2. - The second command (`N`) moves the player back to room 1. - The third command (`N`) is invalid from room 1, so the player remains in room 1. So the final room id is 1.","solution":"def dungeon_navigation(room_count, room_definitions, commands): # Initialize the rooms dictionary rooms = {} for definition in room_definitions: parts = definition.split() room_id = int(parts[0]) num_connections = int(parts[1]) connections = {} for i in range(num_connections): direction = parts[2 + 2*i] connected_room_id = int(parts[3 + 2*i]) connections[direction] = connected_room_id rooms[room_id] = connections current_room = 1 for command in commands.split(): if command in rooms[current_room]: current_room = rooms[current_room][command] return current_room"},{"question":"You are given a string containing lowercase letters and spaces. Your task is to implement a function that counts the occurrences of each letter in the string and returns a dictionary where keys are letters, and values are the counts. Spaces should be ignored. Input A single line with a string of length n (1 ≤ n ≤ 1000), containing only lowercase letters and spaces. Output A dictionary where each key is a letter that appeared in the string, and the corresponding value is the count of that letter in the string. Example Input: hello world Output: {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1}","solution":"def count_letters(s): Returns a dictionary with the count of each letter in the string s. Spaces are ignored. letter_counts = {} for char in s: if char.isalpha(): # Ensure that only letters are counted if char in letter_counts: letter_counts[char] += 1 else: letter_counts[char] = 1 return letter_counts"},{"question":"Problem Statement In a magical forest, there are N trees planted in a straight line, and each tree has an associated height. One day, the forest received a mysterious instruction: all the trees must magically align \\"complete consecutively\\" from left to right such that each tree is either of increasing height or stands equal to its immediate left tree. However, you can only chop trees to meet this requirement and you\'re not allowed to rearrange them. The goal is to determine the minimum number of trees that need to be chopped to accomplish this. Your task is to write a program that takes the heights of the trees as input and outputs the minimum number of trees that need to be chopped in order to achieve the required alignment. Input The input contains several test cases. Each test case is represented by a single line with the following format: ``` h1 h2 h3 ... hN ``` Where `N` (1 ≤ N ≤ 50,000) is the number of trees and `hi` (1 ≤ hi ≤ 1,000,000) is the height of the `i-th` tree. The input ends with a line containing a single zero, which should not be processed. Output For each test case, output the minimum number of trees to be chopped in order to achieve the required alignment. Example Input ``` 3 2 1 4 5 6 3 4 5 1 2 0 ``` Output ``` 2 3 ```","solution":"def min_trees_to_chop(heights): Returns the minimum number of trees to chop to achieve the required alignment. The alignment means each tree is either of increasing height or equal to its immediate left tree. Args: heights (list): A list of integers representing the heights of the trees. Returns: int: The minimum number of trees to chop. n = len(heights) if n == 0: return 0 # Initialize a list to keep track of the longest non-decreasing subsequence (LNDS) lnds = [] for height in heights: if not lnds or height >= lnds[-1]: lnds.append(height) else: # Use binary search to find the smallest element in lnds that is >= height # and replace it with height to keep LNDS optimal left, right = 0, len(lnds) - 1 while left < right: mid = (left + right) // 2 if lnds[mid] <= height: left = mid + 1 else: right = mid lnds[right] = height # The number of trees to chop is the total number of trees minus the length of LNDS return n - len(lnds) def process_input(input_data): Processes the input test cases and returns the minimum number of trees to chop for each. Args: input_data (str): The input data as a single string. Returns: List of int: A list containing the minimum number of trees to chop for each test case. input_lines = input_data.strip().split(\'n\') results = [] for line in input_lines: if line.strip() == \'0\': break heights = list(map(int, line.split())) result = min_trees_to_chop(heights) results.append(result) return results"},{"question":"You are given a list of integers. Write a function to determine if there exists a subset of these integers that sums up to zero. Note that the empty subset is not considered a valid subset. Constraints * The length of the list is between 1 and 1000. * Each integer in the list is between -10^5 and 10^5. Input The input consists of a single line containing space-separated integers. Output Print `Yes` if there exists a subset (other than the empty subset) that sums up to zero. Otherwise, print `No`. Examples Input 3 1 -4 2 6 Output Yes Input 1 2 3 10 Output No","solution":"def subset_sum_zero(arr): Determine if there exists a subset of the given list of integers that sums to zero. The empty subset is not considered valid. n = len(arr) # Create a set to store already seen sums seen_sums = set() # Initialize sum_so_far to 0 sum_so_far = 0 # Traverse each element in the array for num in arr: sum_so_far += num # If sum_so_far is in seen_sums or sum_so_far is 0, we found a valid subset if sum_so_far == 0 or sum_so_far in seen_sums: return \'Yes\' seen_sums.add(sum_so_far) return \'No\'"},{"question":"Alex is a software engineer who enjoys balancing work and play. During one of his coding breaks, he comes up with an idea to create a balanced team game. In this game, each player has a certain skill level, and Alex needs to form two teams such that the absolute difference in their total skill levels is minimized. Alex has m players, and each player i has a skill level si. He can form two teams in such a way that any player must be a part of one of the two teams. Help Alex decide the best way to form the two teams to minimize the absolute difference in their total skill levels. Input The first line contains the integer m (2 ≤ m ≤ 106). The second line contains m integers s1, s2, ..., sm (1 ≤ si ≤ 109) — the skill levels of the players. Output Print a single integer — the minimum possible absolute difference in the total skill levels of the two teams. Example Input 5 3 1 4 2 2 Output 0 Note In the example, one possible division could be: Team 1: Players with skill levels [3, 2] Team 2: Players with skill levels [1, 4, 2] The total skill levels are 5 and 7, and the absolute difference is |5 - 7| = 2. A better division could be: Team 1: Players with skill levels [1, 4] Team 2: Players with skill levels [3, 2, 2] The total skill levels are 5 and 5, and the absolute difference is |5 - 5| = 0, which is the minimum possible.","solution":"def min_difference(m, skills): Returns the minimum possible absolute difference in the total skill levels of the two teams. :param m: int, number of players :param skills: list of int, skill levels of the players :return: int, minimal possible absolute difference in total skill levels of two teams total_skill = sum(skills) half_total_skill = total_skill // 2 # Initialize DP array, where dp[i] indicates whether i skill sum is possible dp = [False] * (half_total_skill + 1) dp[0] = True for skill in skills: for j in range(half_total_skill, skill - 1, -1): dp[j] = dp[j] or dp[j - skill] for i in range(half_total_skill, -1, -1): if dp[i]: return abs(total_skill - 2 * i)"},{"question":"In a bustling tech company, employees use a unique calendar system called \\"WeekDays\\". Each year in the WeekDays system has exactly 52 weeks, and each week consists of 7 days labeled from 1 to 7. Note that this is a simple repetitive calendar with no leap years or variations. To help schedule important meetings, you\'ve been tasked to create a function that computes the maximum number of full weeks (i.e., weeks containing all seven days) that can be formed from a given number of days. Your task is to implement the function `max_full_weeks(D: int) -> int` where `D` is the number of days provided, which computes the maximum number of complete weeks. # Input - An integer ( D ) representing the number of days. # Output - An integer representing the maximum number of full weeks that can be formed from the given days. # Constraints - ( 1 leq D leq 10^9 ) # Examples Input ``` 10 ``` Output ``` 1 ``` Input ``` 15 ``` Output ``` 2 ``` Input ``` 100 ``` Output ``` 14 ``` # Notes - Given 10 days, the maximum number of full weeks is 1 because a full week requires 7 days. - Given 15 days, the maximum number of full weeks is 2 because 15 days include 2 full weeks (2 * 7 = 14) with 1 day remaining, which does not complete another week.","solution":"def max_full_weeks(D: int) -> int: Returns the maximum number of full weeks (each containing 7 days) that can be formed from the given number of days `D`. Parameters: D (int): The number of days. Returns: int: The maximum number of full weeks. return D // 7"},{"question":"In a forest, there is a group of N animals. Each animal is either a herbivore or a carnivore. You have a list of pairs indicating which animals are friends with each other. Your task is to decide if it is possible to assign types (herbivore or carnivore) to all animals such that no pair of friends has the same type. Input The first input line contains one number T — the number of test cases. The description of each test starts with a number N — the number of animals, and M — the number of pairs of friends. Each of the next M lines contains two integers u and v, indicating that animal u and animal v are friends (1 ≤ u, v ≤ N). The sum of N across all test cases does not exceed 10^5. All the input numbers are integers. Output For each test case, output YES if it is possible to assign types to all animals according to the given rules, or NO otherwise. Examples Input 2 3 3 1 2 2 3 3 1 4 2 1 2 2 3 Output NO YES","solution":"def is_bipartite(graph, start, color_map): queue = [start] color_map[start] = 0 # Start coloring with 0 while queue: node = queue.pop(0) for neighbor in graph[node]: if neighbor not in color_map: color_map[neighbor] = 1 - color_map[node] queue.append(neighbor) elif color_map[neighbor] == color_map[node]: return False return True def can_assign_types(T, test_cases): results = [] for i in range(T): N, M, friends = test_cases[i] graph = {x: [] for x in range(1, N + 1)} for u, v in friends: graph[u].append(v) graph[v].append(u) color_map = {} possible = True for animal in range(1, N + 1): if animal not in color_map and not is_bipartite(graph, animal, color_map): possible = False break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: T = 2 test_cases = [ (3, 3, [(1, 2), (2, 3), (3, 1)]), (4, 2, [(1, 2), (2, 3)]) ] print(can_assign_types(T, test_cases)) # Output: [\'NO\', \'YES\']"},{"question":"Given a grid with n rows and m columns (1 ≤ n, m ≤ 1000), each cell can either be empty or blocked. You need to find the number of ways to reach the bottom-right cell of the grid from the top-left cell, moving only right or down at each step. However, there is a catch. You must avoid blocked cells represented as \'1\', and you can only pass through empty cells represented as \'0\'. Write a function that takes the grid as input and returns the number of different paths modulo 10^9 + 7. Input The first line contains two integers n and m, the number of rows and columns. Each of the next n lines contains m characters, either \'0\' (empty) or \'1\' (blocked). Output Print the number of ways to reach the bottom-right cell modulo 10^9 + 7. If there is no way, print 0. Examples Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 Input: 2 2 0 1 1 0 Output: 0","solution":"def count_paths(grid): MOD = 10**9 + 7 n = len(grid) m = len(grid[0]) if grid[0][0] == \'1\' or grid[n-1][m-1] == \'1\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'1\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] % MOD if j > 0: dp[i][j] += dp[i][j-1] % MOD dp[i][j] = dp[i][j] % MOD return dp[n-1][m-1]"},{"question":"You are given a list of integers, and you need to identify two numbers, a and b, in the list such that their sum is closest to a given target value. If there are multiple pairs with the same closest sum, return any one of them. Input The first line contains two integers n (2 ≤ n ≤ 10^5) and t (1 ≤ t ≤ 10^9) - the number of integers in the list and the target value respectively. The next line contains n integers, each between -10^9 and 10^9, separated by spaces. Output Print two integers a and b, where a and b are the numbers in the list whose sum is closest to the target value t. Output the numbers in the same order they appear in the list. Examples Input 5 10 1 3 4 7 10 Output 3 7 Input 6 15 1 5 11 3 8 12 Output 3 12 Note In the first example, the pair (3, 7) sums to 10, exactly matching the target value. In the second example, the pair (3, 12) sums to 15, which matches the target value exactly. However, there are other pairs (5, 11) that also sum to 16, but we just need any one of the pairs.","solution":"def closest_pair_to_target(nums, target): Finds two numbers in the list nums such that their sum is closest to the given target. Parameters: nums (list of int): The list of integers. target (int): The target sum. Returns: tuple: A tuple containing the two integers whose sum is closest to the target. n = len(nums) if n < 2: return None # Not enough elements to form a pair closest_sum = float(\'inf\') result_pair = (None, None) # Iterate over each pair of numbers for i in range(n): for j in range(i + 1, n): current_sum = nums[i] + nums[j] if abs(current_sum - target) < abs(closest_sum - target): closest_sum = current_sum result_pair = (nums[i], nums[j]) return result_pair # Read input and call the solution function def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) t = int(data[1]) nums = list(map(int, data[2:])) a, b = closest_pair_to_target(nums, t) print(a, b) if __name__ == \\"__main__\\": main()"},{"question":"You are given a sequence of integers. A segment of this sequence is defined as any contiguous subsequence. Your task is to find the maximum sum of the elements in any segment of the sequence. Additionally, if the sum of the elements in the whole sequence is greater than or equal to zero, you need to find the minimum number of elements in such a maximum sum segment. Print both the maximum sum and the minimum number of elements in that segment. Input The first line contains an integer `n` (1 ≤ n ≤ 100 000) — the length of the sequence. The second line contains `n` integers `a1, a2, ..., an` (−1 000 ≤ ai ≤ 1 000) — the elements of the sequence. Output Print two integers — the maximum sum of the elements in any segment and the minimum number of elements in such a maximum sum segment if the sum of the whole sequence is greater than or equal to zero. If the sum of the whole sequence is less than zero, print only the maximum sum. Examples Input 5 -1 2 3 -2 5 Output 8 4 Input 4 -2 -3 -4 -1 Output -1","solution":"def max_sum_segment(arr): Returns the maximum sum of any segment and the minimum number of elements in such a maximum sum segment if the sum of the whole sequence is not negative. n = len(arr) if n == 0: return 0, 0 # Initialize variables for Kadane\'s algorithm current_sum = 0 max_sum = float(\'-inf\') start_temp = 0 # Variables to keep track of the minimum length for maximum sum segment min_len_segment = float(\'inf\') start_index = 0 end_index = 0 result_segment = [] for i in range(n): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start_index = start_temp end_index = i min_len_segment = i - start_temp + 1 elif current_sum == max_sum: current_len = i - start_temp + 1 if current_len < min_len_segment: start_index = start_temp end_index = i min_len_segment = current_len if current_sum < 0: current_sum = 0 start_temp = i + 1 res_sum = sum(arr) if res_sum >= 0: return max_sum, min_len_segment else: return max_sum,"},{"question":"Given an integer matrix of size n x n, rotate the matrix 90 degrees clockwise in-place. This means you should modify the input matrix directly without using any extra buffer or another matrix. For example: Input: ``` 2 1 2 3 4 ``` Output: ``` 3 1 4 2 ``` Input: ``` 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 7 4 1 8 5 2 9 6 3 ``` Your task is to write a function that takes an integer n and an n x n matrix of integers, and returns the matrix rotated 90 degrees clockwise. The function should handle matrices of size up to 100 x 100 efficiently. **Input Format**: - First line contains a single integer n (1 ≤ n ≤ 100), denoting the size of the matrix. - Next n lines each contain n integers separated by space, representing the matrix elements. **Output Format**: - Print the rotated matrix where each row is printed in a new line and elements in each row are space separated. **Example Input**: ``` 3 1 2 3 4 5 6 7 8 9 ``` **Example Output**: ``` 7 4 1 8 5 2 9 6 3 ```","solution":"def rotate_matrix_90_degrees_clockwise(n, matrix): Rotates the given n x n matrix 90 degrees clockwise in-place. :param n: Size of the matrix (integer) :param matrix: n x n matrix (list of lists) :return: Rotated matrix (list of lists) # Rotating the matrix 90 degrees clockwise for i in range(n // 2): for j in range(i, n - i - 1): temp = matrix[i][j] matrix[i][j] = matrix[n - 1 - j][i] matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j] matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i] matrix[j][n - 1 - i] = temp return matrix"},{"question":"You are given a binary matrix representing a map where \'1\' denotes land and \'0\' denotes water. An island is a group of \'1\'s (land) connected 4-directionally (horizontal or vertical). You need to write a function that determines the largest island size. An island size is defined as the number of \'1\'s in the island. Your task is to find and return the largest island size in the given matrix. If there are no islands, return 0. Input The first line contains two integers m and n (1 ≤ m, n ≤ 500), the dimensions of the matrix. Each of the next m lines contains n characters, each of which is \'0\' or \'1\'. Output Print the size of the largest island. Examples Input 4 5 11000 11000 00100 00011 Output 4 Input 3 3 111 010 111 Output 7 Input 4 4 0000 0000 0000 0000 Output 0 Explanation for Examples In the first example, there are two islands. The sizes of the islands are 4 and 2. The largest island size is 4. In the second example, there is one island of size 7. In the third example, there are no islands, so the output is 0.","solution":"def largest_island_size(matrix): if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or matrix[x][y] == \'0\': return 0 matrix[x][y] = \'0\' size = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: size += dfs(x + dx, y + dy) return size largest = 0 for i in range(m): for j in range(n): if matrix[i][j] == \'1\': current_size = dfs(i, j) largest = max(largest, current_size) return largest"},{"question":"A museum employs a security system that uses several interconnected cameras to monitor its rooms. Each camera has a unique ID and monitors two rooms, one on either side of its position, capturing movement between those two rooms. To ensure complete surveillance of the museum, each room must be monitored by at least one camera. Given the placement of these cameras and the rooms they monitor, determine if it is possible to rearrange or add cameras to fully monitor all rooms without any gaps. The museum can be represented as an undirected graph where rooms are nodes and cameras are edges connecting two nodes. The objective is to ensure that every node is part of at least one edge. Constraints: - 1 ≤ R ≤ 1000 - 1 ≤ C ≤ 10000 - 1 ≤ U_i, V_i ≤ R Input: - The first line contains two integers, R (number of rooms) and C (number of cameras). - The next C lines each contain two integers U_i and V_i (1 ≤ U_i, V_i ≤ R), indicating that the camera with ID i monitors rooms U_i and V_i. Output: - Output \\"YES\\" if it is possible to fully monitor all rooms by rearranging or adding cameras. Otherwise, output \\"NO\\". Examples: Input 1: 5 4 1 2 2 3 3 4 4 5 Output 1: YES Input 2: 4 2 1 2 3 4 Output 2: NO","solution":"def can_monitor_all_rooms(R, C, connections): Determine if it is possible to monitor all rooms by rearranging or adding cameras. Args: R (int): Number of rooms. C (int): Number of cameras. connections (list): List of pairs of rooms indicating cameras between those rooms. Returns: str: \\"YES\\" if all rooms can be monitored, otherwise \\"NO\\". from collections import defaultdict # Adjacency list for graph representation of rooms graph = defaultdict(set) # Building graph connections for u, v in connections: graph[u].add(v) graph[v].add(u) # Function to perform depth-first search to check connectivity def dfs(node, visited): stack = [node] while stack: room = stack.pop() if room not in visited: visited.add(room) stack.extend(graph[room] - visited) # Check if all rooms are connected by starting from room 1 given room numbering starts from 1 visited = set() dfs(1, visited) # If all R rooms are visited, then they are all connected if len(visited) == R: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a magical 2-dimensional grid with rows and columns. Some of the grid cells contain obstacles, while others are empty. The grid also contains a collection of treasures scattered throughout. Your task is to implement a program that finds the shortest path from a given starting point to collect all treasures and return to the starting point. The path must not cross any obstacles. The grid is represented by a matrix of characters where: - \'.\' represents an empty cell, - \'#\' represents an obstacle, - \'S\' represents the starting and ending point, - \'T\' represents a cell containing a treasure. You can move up, down, left, or right (but not diagonally) to an adjacent cell. Write a function `shortestPath(grid: List[List[str]]) -> int` that returns the length of the shortest path that collects all treasures and returns to the starting point, or -1 if it\'s not possible to collect all the treasures and return. Input - An integer `n` (1 <= n <= 10) — the number of rows in the grid. - An integer `m` (1 <= m <= 10) — the number of columns in the grid. - A list of n strings representing the grid itself. Each string is m characters long. Output Return an integer representing the length of the shortest path that collects all treasures and returns to the starting point, or -1 if such a path does not exist. Examples Input n = 3 m = 4 grid = [ \\"S..T\\", \\".#..\\", \\"..T.\\" ] Output 10 Input n = 3 m = 3 grid = [ \\"S.T\\", \\"#\\", \\".T.\\" ] Output -1 Note In the first example, a possible shortest path could be: start at \'S\', move to the treasure at grid[0][3], move to the treasure at grid[2][2], and return to \'S\', totaling 10 steps. In the second example, there\'s no possible path that collects both treasures and returns to the starting point due to obstacles. Hence, the output is -1.","solution":"from typing import List, Tuple from collections import deque def shortestPath(grid: List[List[str]]) -> int: rows, cols = len(grid), len(grid[0]) # Locate all the positions start = None treasures = [] for r in range(rows): for c in range(cols): if grid[r][c] == \'S\': start = (r, c) elif grid[r][c] == \'T\': treasures.append((r, c)) # Edge case: No treasures if not treasures: return 0 # Edge case: No start point found if not start: return -1 def bfs(start: Tuple[int, int], target: Tuple[int, int]) -> int: visited = [[False] * cols for _ in range(rows)] queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited[start[0]][start[1]] = True while queue: r, c, dist = queue.popleft() if (r, c) == target: return dist for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and not visited[nr][nc] and grid[nr][nc] != \'#\': visited[nr][nc] = True queue.append((nr, nc, dist + 1)) return -1 # Calculate distance from start to all treasures dists = {} elements = [start] + treasures for i in range(len(elements)): for j in range(i + 1, len(elements)): dist = bfs(elements[i], elements[j]) if dist == -1: return -1 dists[(elements[i], elements[j])] = dist dists[(elements[j], elements[i])] = dist # Use TSP to find the shortest path visiting all treasures and returning to start start_idx = 0 all_treasures_idx = range(1, len(elements)) from itertools import permutations min_path_len = float(\'inf\') for perm in permutations(all_treasures_idx): current_path_len = 0 perm = [start_idx] + list(perm) + [start_idx] for i in range(len(perm) - 1): current_path_len += dists[(elements[perm[i]], elements[perm[i+1]])] min_path_len = min(min_path_len, current_path_len) return min_path_len"},{"question":"You are given an integer array `nums` and an integer `k`. Find the k most frequent elements in the array. You can return the answer in any order. Assume that there are always at least k unique elements in the `nums` array. Write a function: ```python from typing import List, Tuple def top_k_frequent(nums: List[int], k: int) -> List[int]: # Implement the function here ``` # Input - An integer array `nums` where `1 <= len(nums) <= 10^5` and `-10^4 <= nums[i] <= 10^4`. - An integer `k` where `1 <= k <= the number of unique elements in nums`. # Output Return an array of `k` integers from `nums` representing the `k` most frequent elements. # Example Input ```python nums = [1,1,1,2,2,3] k = 2 ``` Output ```python [1, 2] ``` Input ```python nums = [1] k = 1 ``` Output ```python [1] ``` # Note - In the first example, the two most frequent elements are 1 (which appears 3 times) and 2 (which appears 2 times). - In the second example, since there\'s only one element, it is returned as the most frequent element.","solution":"from typing import List from collections import Counter def top_k_frequent(nums: List[int], k: int) -> List[int]: Returns the k most frequent elements in the nums array. # Count the frequency of each element in nums frequency = Counter(nums) # Find the k most common elements common_elements = [item for item, _ in frequency.most_common(k)] return common_elements"},{"question":"Lina is organizing a game tournament and wants to create a balanced tournament schedule. The tournament consists of n players, and each player will compete exactly once against every other player. After all matches are completed, each player will have played n-1 matches. However, due to some constraints, Lina wants to ensure that no player has consecutive matches in the schedule, meaning no player should play two games in a row without a break in between. Write a program that generates a tournament schedule satisfying the above conditions or determines if it is impossible to create such a schedule. Input The input contains a single integer n (1 ≤ n ≤ 100) — the number of players in the tournament. Output If it is possible to create such a tournament schedule, print \\"YES\\" on the first line, followed by n lines of n-1 integers each. The i-th line should contain n-1 integers representing the matches in which the i-th player is participating. If it\'s impossible to create such a schedule, print \\"NO\\". Examples Input 3 Output YES 1 2 2 3 3 1 Input 2 Output NO Note In the first example, player 1 plays with players 2 and 3, player 2 with players 1 and 3, and player 3 with players 1 and 2. No player plays consecutive games. In the second example, with only 2 players, it is impossible to create a schedule where neither player has consecutive matches since they would have to play back-to-back.","solution":"def generate_tournament_schedule(n): if n < 3: return \\"NO\\" schedule = [] for i in range(1, n+1): row = [(i + j) % n for j in range(1, n)] row = [x if x != 0 else n for x in row] schedule.append(row) return [\\"YES\\"] + schedule"},{"question":"Given an array `arr` consisting of `N` positive integers, you need to choose a contiguous subarray and remove exactly one element from the chosen subarray to maximize the sum of the remaining elements of that subarray. If there are multiple ways to achieve the maximum sum, output the maximum sum. Constraints: - 2 leq N leq 100,000 - 1 leq arr[i] leq 10^4 Input: The first line of input contains an integer N. The second line contains N space-separated integers representing the elements of the array. Output: Print the maximum sum of the remaining elements of the optimal subarray after removing exactly one element. Example: Input: 5 1 2 3 4 5 Output: 14 Explanation: One optimal way is to choose the subarray [1, 2, 3, 4] and remove 1 to get the sum 2 + 3 + 4 = 9 Example: Input: 5 9 8 7 6 5 Output: 30 Explanation: One optimal way is to choose the entire array and remove the smallest element which is 5 to get the sum 9 + 8 + 7 + 6 = 30","solution":"def max_sum_after_removal(arr): Find the maximum sum of remaining elements of a contiguous subarray after removing exactly one element n = len(arr) # Special cases if n == 2: return max(arr) # max_ending_before[i] means maximum sum subarray ending before the i-th element max_ending_before = [0] * n current_max = 0 for i in range(n): current_max = max(arr[i], current_max + arr[i]) max_ending_before[i] = current_max # max_starting_after[i] means maximum sum subarray starting after the i-th element max_starting_after = [0] * n current_max = 0 for j in range(n-1, -1, -1): current_max = max(arr[j], current_max + arr[j]) max_starting_after[j] = current_max max_sum = float(\'-inf\') for i in range(n): if i == 0: max_sum = max(max_sum, max_starting_after[i + 1]) elif i == n - 1: max_sum = max(max_sum, max_ending_before[i - 1]) else: max_sum = max(max_sum, max_ending_before[i - 1] + max_starting_after[i + 1]) return max_sum"},{"question":"Alice loves playing with strings and has recently discovered the concept of permutations. A permutation of a string is another string that contains the same characters, only the order of characters can be different. For example, \\"abc\\" and \\"bca\\" are permutations of each other. Alice is intrigued by the possibility of forming new strings by permuting the characters of a given string `s`. However, she is only interested in unique permutations. Given a string `s`, help Alice by calculating the number of unique permutations of the string. To avoid processing very large numbers, return the result modulo 1000000007 (109 + 7). Input The input consists of a single line containing a string `s` (1 ≤ |s| ≤ 1000), where |s| is the length of the string. The string `s` contains only lowercase English letters. Output Output a single integer - the number of unique permutations of the given string modulo 1000000007. Examples Input aab Output 3 Input abc Output 6 Input aaa Output 1 Note In the first test case, the unique permutations of \\"aab\\" are \\"aab\\", \\"aba\\", and \\"baa\\", totaling 3 permutations. In the second test case, the unique permutations of \\"abc\\" are \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", and \\"cba\\", totaling 6 permutations. In the third test case, the unique permutations of \\"aaa\\" are only \\"aaa\\" itself, totaling 1 permutation.","solution":"from math import factorial from collections import Counter MOD = 1000000007 def count_unique_permutations(s): Returns the count of unique permutations of the input string s, modulo 1000000007. char_count = Counter(s) n = len(s) denominator = 1 for count in char_count.values(): denominator = (denominator * factorial(count)) % MOD numerator = factorial(n) % MOD # Using Fermat\'s Little Theorem to find modular inverse of denominator modulo MOD denominator_inverse = pow(denominator, MOD - 2, MOD) result = (numerator * denominator_inverse) % MOD return result"},{"question":"Emma has a string s consisting of lowercase English letters. She wants to make this string as balanced as possible. A string is considered balanced if the absolute difference in the number of occurrences of any two characters in the string is at most 1. Emma can insert any character in the string at any position she chooses. Help Emma determine the minimum number of insertions required to make the string balanced. Input The first line contains a single integer t (1 ≤ t ≤ 10), the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 100), the string for which Emma wants to determine the minimum number of insertions. Output For each test case, output the minimum number of insertions required to make the string balanced. Example Input 2 abcbc aabbccc Output 1 2 Note In the first sample, Emma could insert one \'a\' to make the string \\"aabcbc\\", which has 2 \'a\'s, 2 \'b\'s, and 2 \'c\'s. In the second sample, Emma could insert two \'a\'s to make the string \\"aaaabbccc\\", which has 4 \'a\'s, 2 \'b\'s, and 3 \'c\'s.","solution":"def min_insertions_to_balance(t, test_cases): results = [] for s in test_cases: from collections import Counter count = Counter(s) max_count = max(count.values()) total_chars = len(count) min_insertions = max_count * total_chars - sum(count.values()) results.append(min_insertions) return results # Sample usage: # t = 2 # test_cases = [\\"abcbc\\", \\"aabbccc\\"] # print(min_insertions_to_balance(t, test_cases)) # Output: [1, 2]"},{"question":"You are given an integer array. Rearrange the elements so that all positive numbers appear before all negative numbers. The relative order of the positive numbers and negative numbers should remain the same as in the original array. Input The only line of input contains integers separated by spaces, where each integer is between -1000 and 1000, inclusive. The number of integers is between 1 and 100, inclusive. Output Print the rearranged array where all positive numbers appear before all negative numbers while maintaining their relative order. Examples Input 10 -1 3 -5 2 -6 Output 10 3 2 -1 -5 -6 Input -8 -7 6 -5 4 Output 6 4 -8 -7 -5","solution":"def rearrange_numbers(arr): Rearranges the elements of the array such that all positive numbers appear before all negative numbers while maintaining their relative order. positives = [x for x in arr if x >= 0] negatives = [x for x in arr if x < 0] return positives + negatives # Example usage # input_array = [10, -1, 3, -5, 2, -6] # result = rearrange_numbers(input_array) # print(result) # Output: [10, 3, 2, -1, -5, -6]"},{"question":"John is a scientist working on a unique encryption project. The objective is to invent a new way of encoding messages where a string is transformed into a sequence of numbers based on specific rules. The transformation rules are: 1. Each character in the string is mapped to its position in the alphabet (a=1, b=2, c=3, ..., z=26). 2. Consecutive characters in the string are then compared. If a character has a greater alphabetical value than the preceding character, the difference is added to the sequence. If a character has a lesser value than the preceding character, this difference is subtracted from the sequence. Given a string, transform it according to the rules above and output the resulting sequence of numbers. Input The input contains one string s (1 ≤ |s| ≤ 10000), consisting of lowercase English letters only. Output Output the resulting sequence of differences as space-separated integers. Examples Input abcd Output 1 1 1 Input zabc Output -25 1 1 Note For the first input example \\"abcd\\": - \'a\' (1) to \'b\' (2): difference is 1 - \'b\' (2) to \'c\' (3): difference is 1 - \'c\' (3) to \'d\' (4): difference is 1 For the second input example \\"zabc\\": - \'a\' (1) to \'b\' (2): difference is 1 - \'z\' (26) to \'a\' (1): difference is -25","solution":"def transform_string(s): Transform the string according to the specified rules. differences = [] for i in range(1, len(s)): current_value = ord(s[i]) - ord(\'a\') + 1 previous_value = ord(s[i-1]) - ord(\'a\') + 1 differences.append(current_value - previous_value) return \' \'.join(map(str, differences))"},{"question":"You are given a list of strings, each representing a student\'s name and their respective score in a specific subject test. The task is to determine the student with the highest score in each subject and print their name and score. In case of a tie, print all students\' names with the highest score, preserving their order of appearance. **Input** - The first line contains an integer n, the number of students. - The following n lines each contain a string of the format \\"Name Subject Score\\", where: - `Name` is a string representing the student\'s name. - `Subject` is a string representing the subject\'s name. - `Score` is an integer representing the student\'s score in the subject. **Output** - For each subject, print the student\'s name (or names in case of a tie) and their score, in the format `Subject: Name1 (Score), Name2 (Score), ...` **Constraints** - 1 <= n <= 100 - 1 <= length of Name <= 50 - 1 <= length of Subject <= 50 - 0 <= Score <= 100 **Example** Input: ``` 6 Alice Math 90 Bob Math 95 Charlie History 85 David Math 95 Eve History 85 Frank Science 88 ``` Output: ``` Math: Bob (95), David (95) History: Charlie (85), Eve (85) Science: Frank (88) ```","solution":"def find_highest_scores(student_data): from collections import defaultdict scores = defaultdict(list) highest_scores = {} for data in student_data: name, subject, score = data.rsplit(maxsplit=2) score = int(score) scores[subject].append((name, score)) results = {} for subject, records in scores.items(): max_score = max(score for _, score in records) results[subject] = [(name, score) for name, score in records if score == max_score] return results def format_output(results): output = [] for subject, students in results.items(): formatted_students = \\", \\".join(f\\"{name} ({score})\\" for name, score in students) output.append(f\\"{subject}: {formatted_students}\\") return \\"n\\".join(output) def main(input_data): n = int(input_data[0]) student_data = input_data[1:] results = find_highest_scores(student_data) return format_output(results)"},{"question":"There are n cities in a country, and they are connected by one-way roads. Each road has a fixed travel time. You are given a list of roads, where each road connects two cities and has a certain travel time. Your task is to determine the shortest travel time from a given starting city to all other cities in the country. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of cities and the number of roads. Each of the next m lines contains three integers u, v, and t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 10^4) — indicating there is a road from city u to city v with travel time t. The last line contains an integer s (1 ≤ s ≤ n) — the starting city. Output Print n integers. The i-th integer should be the shortest travel time from city s to city i. If there is no way to reach city i from city s, print -1 for that city. Example Input 5 6 1 2 2 1 3 3 2 4 4 3 4 6 4 5 1 5 3 1 1 Output 0 2 3 6 7 Note In the example, the shortest travel time from city 1 to city 1 is 0 because it is the starting city. The shortest travel times to cities 2, 3, 4, and 5 are 2, 3, 6, and 7, respectively. City 4 can be reached via city 2 with a total travel time of 2 + 4 = 6, and city 5 can be reached via city 4 with an additional travel time of 1, resulting in a total of 7. Thus, the output is \\"0 2 3 6 7\\".","solution":"import heapq def dijkstra(n, edges, start): graph = [[] for _ in range(n)] for u, v, t in edges: graph[u - 1].append((v - 1, t)) INF = float(\'inf\') distances = [INF] * n distances[start - 1] = 0 priority_queue = [(0, start - 1)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [dist if dist != INF else -1 for dist in distances]"},{"question":"Alex is learning about symmetricalNumbers. A number is said to be a symmetricalNumber if its digits can be rearranged to form a palindrome. A palindrome is a number that reads the same forwards and backwards. Given a set of numbers, you need to determine if each number is a symmetricalNumber or not. Input: The first line contains N, the number of test cases. N lines follow, each containing a number. Output: For each input, output \\"YES\\" if the number is a symmetricalNumber, and \\"NO\\" if it is not. Constraints: 1 ≤ N ≤ 10 1 ≤ Length of number ≤ 10^5 Scoring: 1 ≤ N ≤ 10, 1 ≤ Length of number ≤ 10 (20 pts) 1 ≤ N ≤ 10, 1 ≤ Length of number ≤ 1000 (30 pts) 1 ≤ N ≤ 10, 1 ≤ Length of number ≤ 10^5 (50 pts) SAMPLE INPUT 3 121 12321 1221 SAMPLE OUTPUT YES YES YES Explanation Case 1: The number \\"121\\" can naturally be read as a palindrome. Case 2: The number \\"12321\\" is already a palindrome. Case 3: The digits of the number \\"1221\\" can be rearranged to form \\"2112\\" which is a palindrome, so \\"1221\\" is a symmetricalNumber.","solution":"def is_symmetrical_number(num): Determines if the number can be rearranged to form a palindrome. from collections import Counter # Count the frequency of each digit in the number count = Counter(num) # A number can form a palindrome if at most one digit has an odd count odd_count = sum(1 for v in count.values() if v % 2 != 0) return odd_count <= 1 def symmetrical_numbers(N, numbers): Given N numbers, returns a list with \\"YES\\" if the number is a symmetricalNumber and \\"NO\\" otherwise. results = [] for number in numbers: if is_symmetrical_number(number): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A student is attending a programming competition, and one of the challenges given is to calculate the minimum possible sum of absolute differences between elements of an array and a chosen integer value `x`. The task is defined as follows: Given an array of integers `a` of length `n`, find an integer `x` such that the sum of absolute differences between each element of the array and `x` is minimized. Input: - The first line contains a single integer `n` (1 ≤ n ≤ 100,000), the length of the array. - The second line contains `n` integers `a_1, a_2, ..., a_n` (-10^9 ≤ a_i ≤ 10^9), the elements of the array. Output: - Output a single integer `x` that minimizes the sum of absolute differences between the elements of the array and `x`. - If there are multiple such values of `x`, return the smallest one. Example: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 3 ``` Explanation: For the array [1, 2, 3, 4, 5], choosing `x = 3` results in the minimal sum of absolute differences: |1 - 3| + |2 - 3| + |3 - 3| + |4 - 3| + |5 - 3| = 2 + 1 + 0 + 1 + 2 = 6. Any other value of `x` would result in a larger sum of absolute differences. Note: - The median of the array is the value that minimizes the sum of the absolute differences in an unordered array. - If `n` is odd, the median is a middle element. If `n` is even, it is the smaller of the two middle elements after sorting the array.","solution":"def find_minimal_sum_rotation_point(n, a): Given an array a of length n, find the integer x that minimizes the sum of absolute differences between elements of the array and x. # Sort the array a.sort() # If n is odd, the median is the middle element. # If n is even, we need to choose the smaller of the two middle elements. if n % 2 == 1: return a[n // 2] else: return a[(n // 2) - 1]"},{"question":"JATC\'s coding teacher has a fun challenge for you and your classmates. Given an array of integers, the task is to make the array non-decreasing by modifying at most one element. In other words, determine if it is possible to change at most one element in the array so that the resulting array is in non-decreasing order. Write a function that takes an array of integers as input and returns a boolean value indicating whether it is possible to make the array non-decreasing by modifying at most one element. Constraints: * The length of the array will not exceed 10^5. * The elements of the array are integers and can be negative or positive. Input The input consists of a single array `arr`, containing n integers where 1 ≤ n ≤ 10^5. Output Output a single boolean value, true if it is possible to make the array non-decreasing by modifying at most one element, and false otherwise. Examples ```python # Example 1 arr = [4, 2, 3] # Output: true # Explanation: You could modify the element 4 to 1 to get the array [1, 2, 3]. # Example 2 arr = [4, 2, 1] # Output: false # Explanation: You can\'t get the array to be non-decreasing by modifying at most one element. ``` Note In the first example, by modifying the first element from 4 to a smaller number (like 1), the array becomes non-decreasing. In the second example, no single modification can make the array non-decreasing.","solution":"def check_possibility(arr): Determines if it is possible to make the array non-decreasing by modifying at most one element. :param arr: List[int] - input array of integers :return: bool - True if it\'s possible to make the array non-decreasing by modifying at most one element, False otherwise count = 0 n = len(arr) for i in range(1, n): if arr[i] < arr[i - 1]: if count == 1: return False count += 1 if i - 2 < 0 or arr[i - 2] <= arr[i]: arr[i - 1] = arr[i] # modify arr[i - 1] else: arr[i] = arr[i - 1] # modify arr[i] return True"},{"question":"You are given a permutation of the first n natural numbers, represented as an array of integers where each number from 1 to n appears exactly once. Your task is to find the cyclic configurations of this permutation. A cycle in the permutation is defined as follows: Starting from any position i, follow the permutation until you return to i. The sequence of visited positions forms a cycle. Each element must be part of exactly one cycle. Input The first line contains a single integer n (1 ≤ n ≤ 2⋅10^5) — the number of elements in the permutation. The second line contains n distinct integers in the range [1, n] — the permutation of the first n natural numbers. Output The first line should contain a single integer, the number of cycles in the permutation. Each of the following lines should describe one cycle. Each cycle should be described by listing its elements in the order they are visited, starting from the smallest element in the cycle. Examples Input 5 5 4 3 2 1 Output 3 1 5 2 4 3","solution":"def find_cycles(n, permutation): visited = [False] * n cycles = [] for i in range(n): if not visited[i]: cycle = [] current = i while not visited[current]: visited[current] = True cycle.append(current + 1) current = permutation[current] - 1 min_element_index = cycle.index(min(cycle)) cycle = cycle[min_element_index:] + cycle[:min_element_index] cycles.append(cycle) cycles.sort() return cycles def cycles_info(n, permutation): cycles = find_cycles(n, permutation) cycle_count = len(cycles) result = [str(cycle_count)] for cycle in cycles: result.append(\\" \\".join(map(str, cycle))) return result"},{"question":"Write a program that reads a list of positive integers, and then determines the minimum and maximum sums obtainable by summing all but one of the integers. Your program should output these two sums. Constraints: - The list will have at least 2 and at most 100 integers. - Each integer in the list will be between 1 and 10^6 inclusive. Input: The first line of the input contains a single integer n, the number of integers in the list. This is followed by a line containing n space-separated positive integers. Output: Print two space-separated integers, the minimum sum and the maximum sum that can be obtained by summing exactly n-1 of the integers from the list. Example: Input: 5 1 2 3 4 5 Output: 10 14 Explanation: - The minimum sum is obtained by excluding the maximum integer (5), hence 1 + 2 + 3 + 4 = 10. - The maximum sum is obtained by excluding the minimum integer (1), hence 2 + 3 + 4 + 5 = 14.","solution":"def min_max_sum(arr): Given a list of positive integers, returns the minimum and maximum sums obtainable by summing all but one of the integers. total_sum = sum(arr) min_sum = total_sum - max(arr) max_sum = total_sum - min(arr) return min_sum, max_sum"},{"question":"A group of university students are participating in a marathon coding hackathon. They have identified a unique challenge where they need to convert a list of non-negative integers into their corresponding binary forms and then determine the longest continuous sequence of \'1\'s in the resulting binary representations. For each integer, transform it into its binary representation and find the maximum number of consecutive \'1\'s in that binary string. Then, among all the integers in the list, determine the longest sequence found. Your task is to implement a function that processes the given list of integers and returns the maximum number of consecutive \'1\'s found in any binary representation within the list. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of non-negative integers in the list. The second line contains n non-negative integers a_i (0 ≤ a_i ≤ 10^9), which are the elements of the list. Output Output a single integer — the length of the longest sequence of consecutive \'1\'s found in the binary representations of the given integers. Examples Input 5 5 1 15 32 7 Output 4 Input 3 8 1024 19 Output 3 Explanation: In the first example, the binary representations are: - 5: 101 (Longest sequence of \'1\'s is 1) - 1: 1 (Longest sequence of \'1\'s is 1) - 15: 1111 (Longest sequence of \'1\'s is 4) - 32: 100000 (Longest sequence of \'1\'s is 1) - 7: 111 (Longest sequence of \'1\'s is 3) The maximum sequence of consecutive \'1\'s is found in 15: 1111. In the second example, the binary representations are: - 8: 1000 (Longest sequence of \'1\'s is 1) - 1024: 10000000000 (Longest sequence of \'1\'s is 1) - 19: 10011 (Longest sequence of \'1\'s is 2, 1 which appears twice) The maximum sequence of consecutive \'1\'s is found in 19: 10011 (sequence is 11).","solution":"def longest_consecutive_ones(n, nums): This function takes an integer n and a list of n non-negative integers nums. It returns the length of the longest sequence of consecutive \'1\'s in the binary representation of any integer in the list. max_length = 0 for num in nums: # Convert number to binary and strip the \'0b\' prefix binary_rep = bin(num)[2:] # Find the maximum length of consecutive \'1\'s in binary_rep longest_ones = max(map(len, binary_rep.split(\'0\'))) # Update the global maximum length max_length = max(max_length, longest_ones) return max_length"},{"question":"You are given an array `a` of `n` integers and a number sum `k`. Your task is to find the number of unique pairs of integers in the array whose sum is equal to `k`. Each pair should be counted only once, even if there are multiple instances of the pair in the array. Note that the order of elements in the pair does not matter, i.e., (x, y) and (y, x) are considered the same pair. Input The first line contains two integers n and k (1 ≤ n ≤ 200000, -10^9 ≤ k ≤ 10^9) — the number of elements in the array and the sum `k`, respectively. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Output Print a single integer — the number of unique pairs (x, y) such that x + y = `k`. Examples Input 5 9 2 7 11 15 1 Output 1 Input 4 6 3 3 3 3 Output 1 Note In the first example, the only pair that adds up to 9 is (2, 7). In the second example, the only unique pair that adds up to 6 is (3, 3).","solution":"def find_unique_pairs(n, k, a): Returns the number of unique pairs whose sum is equal to k. Parameters: n (int): Number of elements in the array. k (int): Desired sum of pairs. a (list of ints): Array of elements. Returns: int: Number of unique pairs. seen = set() pairs = set() for number in a: target = k - number if target in seen: pairs.add(tuple(sorted((number, target)))) seen.add(number) return len(pairs)"},{"question":"You have a list of data points, each representing a city\'s name and its corresponding temperature recorded at a particular time. Your task is to find the city with the maximum temperature variation, where the temperature variation is defined as the absolute difference between the highest and lowest temperature recorded for a city. Input The first line of the input will contain a single integer n (2 ≤ n ≤ 10^5) — the number of data points. Each of the next n lines contains a string s (1 ≤ |s| ≤ 100) and an integer t (-100 ≤ t ≤ 100), denoting the city\'s name and the temperature recorded at a particular time. Output Output the name of the city with the maximum temperature variation. If there are multiple cities with the same maximum variation, output the lexicographically smallest name. Examples Input 6 NewYork 30 LosAngeles 40 NewYork 50 LosAngeles 35 Chicago 45 NewYork 55 Output NewYork Input 5 Boston 20 Boston 25 Miami 30 Miami 35 Miami 30 Output Boston","solution":"def city_with_max_variation(data): from collections import defaultdict city_temps = defaultdict(list) for city, temp in data: city_temps[city].append(temp) max_variation = -1 result_city = None for city, temps in city_temps.items(): variation = max(temps) - min(temps) if variation > max_variation or (variation == max_variation and city < result_city): max_variation = variation result_city = city return result_city def parse_input(input_str): lines = input_str.split(\'n\') n = int(lines[0].strip()) data = [] for line in lines[1:n+1]: parts = line.split() city = \' \'.join(parts[:-1]) temp = int(parts[-1]) data.append((city, temp)) return data"},{"question":"A software developer is working on an application that involves processing temperature data from various cities. The application requires a feature to calculate a specific summary statistic, which the developer needs your help to implement. The input consists of an integer n followed by n integers representing the daily temperature readings for a city. The summary statistic, called the \\"Temperature Anomaly Index,\\" is defined as the sum of the differences between each day\'s temperature and the average temperature, divided by the total number of days. Mathematically, if t1, t2, ..., tn are the temperature readings, and T_avg is their average, then the Temperature Anomaly Index (TAI) is calculated as: [ TAI = frac{sum_{i=1}^{n} (ti - T_avg)}{n} ] Write a function to calculate and print the Temperature Anomaly Index for the given temperature readings. Input The first input line contains an integer n (1 ≤ n ≤ 10^5). The second input line contains n integers t1, t2, ..., tn (-10^3 ≤ ti ≤ 10^3), representing the daily temperature readings. Output Print one floating point number — the Temperature Anomaly Index, rounded to six decimal places. Example Input 5 3 7 8 10 2 Output 0.000000 Input 4 20 15 10 5 Output 0.000000 Note In the first example, the average temperature is (3 + 7 + 8 + 10 + 2) / 5 = 6. The sum of the differences between each day\'s temperature and the average temperature is (3-6) + (7-6) + (8-6) + (10-6) + (2-6) = -3 + 1 + 2 + 4 - 4 = 0. Therefore, the Temperature Anomaly Index is 0 / 5 = 0.0. In the second example, the average temperature is (20 + 15 + 10 + 5) / 4 = 12.5. The sum of the differences is (20-12.5) + (15-12.5) + (10-12.5) + (5-12.5) = 7.5 + 2.5 - 2.5 - 7.5 = 0. Therefore, the Temperature Anomaly Index is 0 / 4 = 0.0.","solution":"def temperature_anomaly_index(n, temperatures): average_temp = sum(temperatures) / n anomaly_sum = sum(t - average_temp for t in temperatures) tai = anomaly_sum / n return round(tai, 6)"},{"question":"Sam and his friends love to play a game called \\"Color Blocks\\". The game involves a line of blocks, each painted with one of three colors: Red (R), Green (G), or Blue (B). The goal of the game is to make the entire line of blocks uniform in color with the least number of color changes. However, they can only perform one type of move: choose any block and change its color to one of the other two colors (for example, a Red block can be changed to Green or Blue, but not to another Red). Your task is to write a program that calculates the minimum number of color changes required to make all blocks in the line the same color. Input The input consists of a single line containing a string s of length n (1 ≤ n ≤ 1000), where each character is either \'R\', \'G\', or \'B\', representing the color of each block. Output Output a single integer representing the minimum number of color changes required. Examples Input RGBR Output 2 Input RRRG Output 1 Input BGRRRG Output 3 Note For the first example, you can change the second block \'G\' to \'R\' and the third block \'B\' to \'R\', making the whole string \\"RRRR\\" in 2 changes. For the second example, you only need to change the last block \'G\' to \'R\' to make the string \\"RRRR\\" in 1 change. For the third example, one optimal way is to change the first \'B\', the second \'G\', and one of the last three \'R\'s to \'R\', making the string \\"RRRRRR\\" in 3 changes.","solution":"def min_color_changes(s): Returns the minimum number of color changes required to make all blocks the same color. count_r = s.count(\'R\') count_g = s.count(\'G\') count_b = s.count(\'B\') # To make the entire line \'R\', you\'d need to change all \'G\'s and \'B\'s to \'R\'s changes_to_r = count_g + count_b # To make the entire line \'G\', you\'d need to change all \'R\'s and \'B\'s to \'G\'s changes_to_g = count_r + count_b # To make the entire line \'B\', you\'d need to change all \'R\'s and \'G\'s to \'B\'s changes_to_b = count_r + count_g # Return the minimum of the three values return min(changes_to_r, changes_to_g, changes_to_b)"},{"question":"Alex is passionate about environmental conservation and has decided to plant trees in his local neighborhood. He has n tree saplings to plant, and he wants to distribute them as evenly as possible across m parks in his area. However, Alex needs to know how balanced his distribution will be. More specifically, he wants to know the maximum and minimum number of saplings planted in any park. Write a program to help Alex determine the most balanced distribution. Input The first line of the input contains two integers n and m (1 ≤ m ≤ n ≤ 100 000) — the number of saplings and the number of parks. Output Print two integers — the maximum number of saplings in any park and the minimum number of saplings in any park after distributing the saplings as evenly as possible. Examples Input 10 3 Output 4 3 Input 7 2 Output 4 3 Input 5 5 Output 1 1 Explanation In the first example, 10 saplings are to be distributed among 3 parks. The most balanced way to distribute them would be to allocate 4 saplings to one park and 3 saplings to each of the remaining two parks, so the output is \\"4 3\\". In the second example, 7 saplings are distributed to 2 parks. One park gets 4 saplings and the other park gets 3 saplings, giving an output of \\"4 3\\". In the third example, each park gets exactly 1 sapling, hence the output is \\"1 1\\".","solution":"def balanced_distribution(n, m): Determines the maximum and minimum number of saplings in any park after distributing them as evenly as possible. Parameters: n (int): The number of saplings. m (int): The number of parks. Returns: tuple: A tuple containing two integers, the maximum and minimum number of saplings in any park. max_saplings = (n + m - 1) // m # Maximum saplings in any park min_saplings = n // m # Minimum saplings in any park return max_saplings, min_saplings"},{"question":"Leo is playing a game where he needs to continuously jump on a series of platforms arranged in a straight line. Each platform has a height and consecutive platforms are placed one unit distance apart from each other. Leo can choose to jump from his current platform to any other within his jump range. However, the cost of jumping from one platform to another is equal to the difference in their heights. Leo wants to minimize the total jump cost from the first platform to the last one. Given the heights of the platforms and Leo\'s maximum jump range, determine the minimum total jump cost to reach the last platform from the first one. Constraints * 1 ≤ n ≤ 10^5 (number of platforms) * 1 ≤ h_i ≤ 10^4 (height of the i-th platform) * 1 ≤ k ≤ 100 (maximum jump range) Input Input is given from Standard Input in the following format: n k h_1 h_2 ... h_n Output Print the minimum total jump cost from the first to the last platform. Examples Input 5 3 10 30 40 50 20 Output 30 Input 6 2 10 20 10 30 20 10 Output 20","solution":"def min_jump_cost(n, k, heights): Returns the minimum total jump cost to reach the last platform from the first one. Parameters: n (int): Number of platforms k (int): Maximum jump range heights (list): List of heights of the platforms Returns: int: Minimum total jump cost # Initialize a list to store the minimum cost to reach each platform dp = [float(\'inf\')] * n dp[0] = 0 # The cost to reach the first platform is 0 for i in range(1, n): for j in range(1, k+1): if i-j >= 0: dp[i] = min(dp[i], dp[i-j] + abs(heights[i] - heights[i-j])) return dp[-1] # Helper function to read input def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) heights = list(map(int, data[2:])) return n, k, heights if __name__ == \\"__main__\\": n, k, heights = read_input() print(min_jump_cost(n, k, heights))"},{"question":"A delivery company has a fleet of vehicles that it uses to make deliveries in various cities. The company wants to optimize its delivery routes to minimize the total distance traveled while ensuring all deliveries are made. They use a simplified distance calculator for the purposes of route planning. Given a set of delivery points and the distances between them, your task is to write a program that finds the shortest possible route that visits each delivery point exactly once and returns to the starting point (i.e., solves the Traveling Salesman Problem). Input First, an integer T, the number of test cases (1 ≤ T ≤ 10). For each test case: 1. An integer N, the number of delivery points (2 ≤ N ≤ 12). 2. N lines each containing N integers, where the j-th integer on the i-th line is the distance between the i-th and j-th delivery points (0 ≤ distance ≤ 10000). Output For each test case, output the minimum total distance of the shortest route that visits all delivery points exactly once and returns to the starting point. Examples Input 2 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 29 20 29 0 25 20 25 0 Output 80 74 Explanation In the first test case, the shortest route involves visiting the points in the order 1-2-4-3-1 with a total distance of 10 + 25 + 30 + 15 = 80. In the second test case, the shortest route involves visiting the points in the order 1-3-2-1 with a total distance of 20 + 25 + 29 = 74.","solution":"import itertools def traveling_salesman_problem(distances): Solves the Traveling Salesman Problem for a given distance matrix. :param distances: A 2D list representing the distances between each pair of points. :returns: The minimum total distance of the shortest route. N = len(distances) min_path = float(\'inf\') for perm in itertools.permutations(range(1, N)): current_path = 0 k = 0 for j in perm: current_path += distances[k][j] k = j current_path += distances[k][0] min_path = min(min_path, current_path) return min_path def solve_tsp(test_cases): Solves multiple TSP test cases. :param test_cases: A list of tuples each containing an integer and a 2D list representing the number of points and their distances. :returns: A list of integers representing the minimum distances for each test case. results = [] for N, distances in test_cases: results.append(traveling_salesman_problem(distances)) return results"},{"question":"Given two strings, s and t, you need to determine if you can transform s into t using the following rules: 1. You can remove characters from s. 2. You can rearrange the characters of s. Write a function to return \\"YES\\" if you can transform s into t, otherwise return \\"NO\\". Input: - The first line contains the string s (1 ≤ |s| ≤ 100). - The second line contains the string t (1 ≤ |t| ≤ 100). Output: - Print \\"YES\\" if you can transform s into t. Otherwise, print \\"NO\\". A string u can be transformed into v if, after removing some characters from u (or none at all) and rearranging the remaining characters, u becomes v. Examples: Input: abc ac Output: YES Input: programming margorp Output: YES Input: hello world Output: NO Note: In the first example, you can remove the character \'b\' from \'abc\' and rearrange \'ac\' to get \'ac\'. In the second example, you can rearrange \'programming\' to get \'margorp\'. In the third example, it\'s impossible to transform \'hello\' into \'world\'.","solution":"def can_transform(s, t): Determine if you can transform s into t by removing characters from s and/or rearranging the characters of s. :param s: String s :param t: String t :return: \\"YES\\" if transformation is possible, otherwise \\"NO\\" from collections import Counter counter_s = Counter(s) counter_t = Counter(t) for char in counter_t: if counter_t[char] > counter_s.get(char, 0): return \\"NO\\" return \\"YES\\""},{"question":"You have been tasked to write a function that takes a string composed of only lowercase alphabets and brackets \'()\', and returns a new string with the minimal number of characters removed so that the remaining string is balanced. A string is considered balanced if every opening bracket \'(\' has a corresponding closing bracket \')\'. Write a function `balance_string` that receives a string `s` as input. This function should return a string that is balanced. # Constraints: * The length of the string will not exceed 100,000 characters. * The input string only contains lowercase alphabets and the characters \'(\' and \')\'. # Input: * A string `s` of length `n (1 leq n leq 100,000)`, consisting of lowercase alphabets and brackets \'()\', is given. # Output: * Return the balanced string with minimum deletions. # Example: Input: ``` a)b(c)d ``` Output: ``` ab(c)d ``` Input: ``` ))a((bcd) ``` Output: ``` a(bcd) ``` Input: ``` )( ``` Output: ``` ``` # Explanation: In the first example, removing the first `)` results in the string `ab(c)d`, which is balanced. In the second example, removing the first two `)` and the second `(` results in the string `a(bcd)`, which is balanced. In the third example, removing both characters results in an empty string, which is balanced.","solution":"def balance_string(s): Returns the minimum deletions required to balance the given string. n = len(s) open_stack = [] to_delete = set() # First pass to find unbalanced closing brackets for i, char in enumerate(s): if char == \'(\': open_stack.append(i) elif char == \')\': if open_stack: open_stack.pop() else: to_delete.add(i) # Remaining indices in open_stack are unbalanced opening brackets to_delete = to_delete.union(set(open_stack)) balanced_string = \'\'.join([s[i] for i in range(n) if i not in to_delete]) return balanced_string"},{"question":"Shiori is an archivist who needs to organize M rare artifact manuscripts by their ages. Each manuscript has an age, represented by an integer, and Shiori wants to sort the manuscripts in non-decreasing order of their ages. Additionally, Shiori needs to ensure that if a manuscript has the same age as another, they retain their relative order from the original list. Write a program that takes the list of manuscript ages and outputs them in the required order. Constraints - All values in input are integers. - 1 ≤ M ≤ 10^5 - 1 ≤ age_i ≤ 10^9 (1 ≤ i ≤ M) Input Input is given from Standard Input in the following format: M age_1 age_2 ... age_M Output Output the ages of the manuscripts in non-decreasing order, maintaining relative order of manuscripts with the same age. Examples Input 6 5 3 2 3 2 6 Output 2 2 3 3 5 6 Input 4 10 8 10 7 Output 7 8 10 10","solution":"def sort_manuscripts(M, ages): Sort the list of manuscript ages in non-decreasing order, maintaining the relative order of manuscripts with the same age. :param M: int - the number of manuscripts :param ages: list of int - the ages of the manuscripts :return: list of int - the sorted ages of the manuscripts return sorted(ages)"},{"question":"In a certain software system, there is a special logging mechanism that categorizes each log entry based on severity levels. Each log entry is recorded with a timestamp, severity level, and a message. The severity levels are represented as integers from 1 to 5, with 1 being the least severe and 5 being the most severe. You need to write a function that can filter log entries by a minimum severity level. The function will take two arguments - a list of log entries and a minimum severity level. Each log entry in the list is represented as a tuple (timestamp, severity, message) where: - `timestamp` is a string in the format \\"YYYY-MM-DD HH:MM:SS\\" - `severity` is an integer between 1 and 5 - `message` is a string containing the log message Your function should return a list of log entries that have a severity level greater than or equal to the specified minimum severity level. The log entries in the returned list should be in the same order as they appeared in the input list. Input Your function will receive: 1. A list of log entries in the format [(timestamp1, severity1, message1), (timestamp2, severity2, message2), ...] 2. An integer representing the minimum severity level. Output Return a list of filtered log entries where severity >= minimum severity level. Examples Input log_entries = [ (\\"2023-01-15 12:00:00\\", 2, \\"User login successful\\"), (\\"2023-01-15 12:05:00\\", 4, \\"Disk space running low\\"), (\\"2023-01-15 12:10:00\\", 1, \\"Debugging connection issues\\"), (\\"2023-01-15 12:15:00\\", 5, \\"System crash\\"), (\\"2023-01-15 12:20:00\\", 3, \\"New user registered\\") ] min_severity = 3 Output [ (\\"2023-01-15 12:05:00\\", 4, \\"Disk space running low\\"), (\\"2023-01-15 12:15:00\\", 5, \\"System crash\\"), (\\"2023-01-15 12:20:00\\", 3, \\"New user registered\\") ]","solution":"def filter_logs(log_entries, min_severity): Filters log entries based on a minimum severity level. Args: log_entries (list of tuples): List of log entries where each entry is a tuple (timestamp, severity, message) min_severity (int): Minimum severity level to filter log entries. Returns: list of tuples: Filtered list of log entries with severity >= min_severity. return [entry for entry in log_entries if entry[1] >= min_severity]"},{"question":"Andy loves sequences and one day he comes across an interesting problem related to sequences. There is a sequence called the Fibonacci sequence which is defined as follows: - F(1) = 1 - F(2) = 1 - F(n) = F(n-1) + F(n-2) for n > 2 Andy wants to find the sum of the first N Fibonacci numbers. Since the sum can be very large, he requests you to give the result modulo M. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains two space-separated integers, N and M. Output For each test case, output a single integer, the sum of the first N Fibonacci numbers modulo M. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^18 1 ≤ M ≤ 10^9 SAMPLE INPUT 2 5 100 10 1000 SAMPLE OUTPUT 12 143 Explanation In the 1st test case, the first 5 Fibonacci numbers are 1, 1, 2, 3, 5. Their sum is 1 + 1 + 2 + 3 + 5 = 12. Taking modulo 100 of 12 is 12. In the 2nd test case, the first 10 Fibonacci numbers are 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. Their sum is 1 + 1 + 2 + 3 + 5 + 8 + 13 + 21 + 34 + 55 = 143. Taking modulo 1000 of 143 is 143.","solution":"def fibonacci_sum_modulo(N, M): Function to calculate the sum of the first N Fibonacci numbers modulo M. def matrix_mult(A, B, mod): return [[(A[0][0] * B[0][0] + A[0][1] * B[1][0]) % mod, (A[0][0] * B[0][1] + A[0][1] * B[1][1]) % mod], [(A[1][0] * B[0][0] + A[1][1] * B[1][0]) % mod, (A[1][0] * B[0][1] + A[1][1] * B[1][1]) % mod]] def matrix_pow(matrix, n, mod): result = [[1, 0], [0, 1]] base = matrix while n > 0: if n % 2 == 1: result = matrix_mult(result, base, mod) base = matrix_mult(base, base, mod) n //= 2 return result def nth_fib(n, mod): if n <= 2: return 1 F = [[1, 1], [1, 0]] result = matrix_pow(F, n-1, mod) return result[0][0] def sum_fib(n, mod): if n == 0: return 0 return (nth_fib(n+2, mod) - 1) % mod return sum_fib(N, M) def solve(test_cases): results = [] for N, M in test_cases: results.append(fibonacci_sum_modulo(N, M)) return results"},{"question":"You are given a list of integers, and your task is to calculate the length of the longest segment that contains consecutive integers (not necessarily in order). Input: The first line contains the number of test cases T. Each test case consists of two lines: - The first line contains an integer n (the size of the list). - The second line contains n space-separated integers representing the list. Output: For each test case, output the length of the longest segment that contains consecutive integers. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 1 ≤ list element ≤ 10^9 SAMPLE INPUT 2 6 100 4 200 1 3 2 5 6 6 7 8 8 SAMPLE OUTPUT 4 3 Explanation For the first sample: The longest segment containing consecutive integers is [1, 2, 3, 4] which has a length of 4. For the second sample: Even though the list contains repeated elements, the longest segment containing consecutive integers is [6, 7, 8] which has a length of 3.","solution":"def longest_consecutive_segment(nums): if not nums: return 0 num_set = set(nums) max_length = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length def process_test_cases(T, test_cases): results = [] for i in range(T): n, nums = test_cases[i] results.append(longest_consecutive_segment(nums)) return results"},{"question":"The company Techland is implementing a new feature for their e-commerce platform. They want to analyze customer purchasing patterns based on transaction sequences. For this, they have captured data on transactions where each transaction has a customer ID and a product ID. Your task is to write a program to determine the longest sequence of consecutive transactions by a single customer where the product IDs form a strictly increasing sequence. Input - The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of transactions. - Each of the next n lines contains two space-separated integers: ci and pi (1 ≤ ci, pi ≤ 100000) —the customer ID and the product ID of the ith transaction. Output - Print a single integer — the length of the longest sequence of consecutive transactions by a single customer where the product IDs form a strictly increasing sequence. Examples Input 5 1 2 1 3 2 1 1 4 2 2 Output 3 Input 7 3 1 1 3 3 2 2 4 3 3 1 5 1 6 Output 3 Note In the first example, the longest sequence for customer 1 is 2 -> 3 -> 4 with length 3. For customer 2, the longest is 1 -> 2 with length 2. In the second example, the longest sequence for customer 1 is 3 -> 5 -> 6 with length 3. For customer 3, the longest is 1 -> 2 -> 3, also with length 3. For customer 2, there\'s only a single transaction, hence the length is 1.","solution":"def longest_increasing_sequence(n, transactions): from collections import defaultdict customers = defaultdict(list) # Group transactions by customer for customer_id, product_id in transactions: customers[customer_id].append(product_id) def find_longest_increasing_subseq(arr): if not arr: return 0 lis = [1] * len(arr) for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis) max_length = 0 # Calculate the longest increasing sequence for each customer for product_ids in customers.values(): max_length = max(max_length, find_longest_increasing_subseq(product_ids)) return max_length # Reading input if __name__ == \\"__main__\\": n = int(input()) transactions = [tuple(map(int, input().split())) for _ in range(n)] print(longest_increasing_sequence(n, transactions))"},{"question":"You are given a list of n integers. Your task is to determine if the list contains any duplicates. If there are duplicates, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the number of integers in the list. The second line contains n integers a_i (1 ≤ a_i ≤ 1000) — the elements of the list. Output Print \\"YES\\" if the list contains any duplicates. Otherwise, print \\"NO\\". Examples Input 5 1 2 3 4 5 Output NO Input 6 1 2 3 4 5 1 Output YES Note In the first example, there are no duplicate numbers in the list, so the answer is \\"NO\\". In the second example, the number 1 appears twice in the list, so the answer is \\"YES\\".","solution":"def contains_duplicates(n, numbers): Checks if the list contains any duplicates. :param n: Integer, number of elements in the list :param numbers: List of integers :return: \\"YES\\" if there are duplicates, otherwise \\"NO\\" if len(numbers) != n: raise ValueError(\\"The length of numbers must be equal to n.\\") number_set = set() for num in numbers: if num in number_set: return \\"YES\\" number_set.add(num) return \\"NO\\""},{"question":"A group of archaeologists discovered an ancient pyramid with a unique numerical inscription on its stone blocks. Each stone block has a positive integer carved on it. They soon realized that the numbers on the stone blocks adhere to a specific pattern — any stone block’s number is the sum of the numbers on the two blocks directly above it in the previous row. The pyramid starts with a single stone block at the top, and the number on this block is given. The archaeologists want to find the maximum number that can be found at the top of the pyramid if they can only subtract or add 1 to the number on any selected block during their excavation. Given the height of the pyramid H and the topmost number A, your task is to determine the maximum possible number that can be found at the top of the pyramid after adjusting the numbers precisely on the blocks below. Constraints The input satisfies the following conditions. * 1 ≤ H ≤ 100 * 1 ≤ A ≤ 1000 Input The integer H is given on the first line. The integer A is given on the second line. Output Output the maximum number that can be found at the top of the pyramid after adjustments, in one line. Examples Input 3 2 Output 6 Input 2 7 Output 10","solution":"def max_number_in_pyramid(H, A): Returns the maximum number at the top of the pyramid after adjustments. return A + H"},{"question":"You are given a matrix with n rows and m columns. Each cell contains an integer which represents the height of a tile. You want to determine the minimal possible effort required to walk from the top-left corner (1, 1) to the bottom-right corner (n, m). The effort of a path is defined as the maximum absolute difference in heights between two consecutive cells in the path. Write a function to determine the minimum effort required to reach the bottom-right corner from the top-left corner. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the matrix. The next n lines each contain m integers, representing the heights of the tiles in the matrix. The height of each tile is between 1 and 10^6. Output Print a single integer — the minimal possible effort required to walk from the top-left corner to the bottom-right corner. Example Input 3 3 1 3 5 2 8 3 5 3 1 Output 2 Explanation One possible path is (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) with maximal absolute difference of 2 between (2,1) and (3,1). Another possible path is (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) with maximal absolute difference of 5 between (1,2) and (2,2). However, the minimal possible effort is 2.","solution":"import heapq def min_effort_path(matrix): Returns the minimum effort required to walk from the top-left corner to the bottom-right corner of the given height matrix. n, m = len(matrix), len(matrix[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m effort = [[float(\'inf\')] * m for _ in range(n)] effort[0][0] = 0 min_heap = [(0, 0, 0)] # (effort, x, y) while min_heap: curr_effort, x, y = heapq.heappop(min_heap) if x == n - 1 and y == m - 1: return curr_effort for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): new_effort = max(curr_effort, abs(matrix[nx][ny] - matrix[x][y])) if new_effort < effort[nx][ny]: effort[nx][ny] = new_effort heapq.heappush(min_heap, (new_effort, nx, ny)) return effort[-1][-1]"},{"question":"Emily is participating in a marathon race that involves running through a series of checkpoints located along a straight road. Each checkpoint is represented with a position marker along the road, starting from position 0. However, energy drinks are available only at select checkpoints and she needs to plan where she can drink to maximize her performance. Given the positions of the checkpoints and the exact checkpoints where energy drinks are available, the goal is to determine the maximum number of energy drinks Emily can consume without backtracking. Emily can start drinking from any checkpoint that has an energy drink but can only move forward from one checkpoint to another with an energy drink. Input The first line of input contains an integer T, the number of test cases. Each test case consists of two lines. The first line contains an integer N, the total number of checkpoints. The second line contains a list of N integers, where each integer can be either 0 or 1. A 1 indicates an energy drink is available at that checkpoint, while a 0 means no energy drink is available. Output For each test case, output the maximum number of energy drinks Emily can consume. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ Checkpoint[i] ≤ 1 SAMPLE INPUT 2 5 1 0 1 1 0 4 0 1 0 1 SAMPLE OUTPUT 2 1 Explanation In the 1st test case, energy drinks are available at checkpoints 1, 3, and 4. Emily can consume energy drinks at checkpoint 1 and then at checkpoint 3 or checkpoint 4. Thus, the maximum number of drinks is 2. In the 2nd test case, energy drinks are available at checkpoints 2 and 4. Emily can only start drinking at checkpoint 2 and move to checkpoint 4, hence the maximum number of drinks is 1.","solution":"def max_energy_drinks(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] checkpoints = test_cases[i][1] max_drinks = 0 current_drinks = 0 for j in range(N): if checkpoints[j] == 1: current_drinks += 1 max_drinks = max(max_drinks, current_drinks) else: current_drinks = 0 results.append(max_drinks) return results # Function to parse input and return results def parse_and_calculate(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(T): N = int(lines[2 * i + 1]) checkpoints = list(map(int, lines[2 * i + 2].split())) test_cases.append((N, checkpoints)) return max_energy_drinks(T, test_cases)"},{"question":"You are given a series of events with their start and end times. Each event can be attended fully only once, thus there can be no overlap in attending events. Your task is to find the maximum number of events that you can attend. Input The first line contains a single integer T (1 ≤ T ≤ 100): the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 10^5): the number of events. The following n lines each contain two integers, start and end (1 ≤ start < end ≤ 10^9), representing the start and end times of an event. Output For each test case, output the maximum number of non-overlapping events you can attend. Example Input 3 3 1 2 2 3 3 4 4 1 3 2 4 3 5 4 6 5 1 4 2 3 3 5 2 6 4 7 Output 3 2 2 Note For the first test case, you can attend all three events as they follow consecutively without overlapping time. For the second test case, the optimal solution is to attend the events [1,3] and [4, 6]. This results in attending a maximum of 2 non-overlapping events. For the third test case, the optimal solution is to attend the events [2, 3] and [4, 7]. This results in attending a maximum of 2 non-overlapping events.","solution":"def max_non_overlapping_events(T, cases): Finds the maximum number of non-overlapping events that can be attended. Args: T: int - number of test cases cases: list of tuples, where each tuple represents a test case. Each test case contains (n, events), where: - n: int - number of events - events: list of tuples (start, end): representing the start and end times of the event Returns: list of int - maximum number of non-overlapping events for each test case results = [] for n, events in cases: # Sort events by their ending time events.sort(key=lambda x: x[1]) # Initialize variables to keep track of the end time of the last added event and count of non-overlapping events last_end_time = 0 count = 0 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results"},{"question":"David is a software engineer and is working on a data compression algorithm. He needs to encode a string in such a way that identical characters which appear consecutively are represented by the character followed by the number of times it appears. For example, the string \\"aaaabbbccdaa\\" would be encoded as \\"a4b3c2d1a2\\". David is not skilled in string manipulation algorithms, so he needs your help to implement the encoding function. You are given a string `s` consisting of lowercase English letters. Write a function `encode_string(s)`, where the function should return the encoded version of the string. Input: - A single line containing the string `s` (1 ≤ |s| ≤ 100,000). Output: - A single line containing the encoded string. # Examples Input: ``` aaaabbbccdaa ``` Output: ``` a4b3c2d1a2 ``` Input: ``` abcd ``` Output: ``` a1b1c1d1 ``` Input: ``` zzzzzzzzz ``` Output: ``` z9 ``` # Note For the first example, the string \\"aaaabbbccdaa\\" consists of: - \'a\' repeated 4 times - \'b\' repeated 3 times - \'c\' repeated 2 times - \'d\' repeated 1 time - \'a\' repeated 2 times Thus, the encoded string is \\"a4b3c2d1a2\\".","solution":"def encode_string(s): Encodes a string such that consecutive identical characters are represented by the character followed by the number of times it appears consecutively. Args: s (str): The input string consisting of lowercase English letters. Returns: str: The encoded string. if not s: return \\"\\" encoded = [] count = 1 previous_char = s[0] for char in s[1:]: if char == previous_char: count += 1 else: encoded.append(f\\"{previous_char}{count}\\") previous_char = char count = 1 encoded.append(f\\"{previous_char}{count}\\") return \'\'.join(encoded)"},{"question":"In a new gaming platform, players can earn points by collecting various items in a sequence of games. The platform tracks these points and allows players to redeem them for rewards. Your task is to implement the points-tracking system for the platform. You need to support two types of operations: 1. Add points to a player\'s current tally. 2. Query the total points of a player. Input The first line contains two space-separated integers n and q (1 ≤ n, q ≤ 100,000) — the number of players and the number of operations, respectively. Each of the next q lines describes an operation. An operation is of one of the following types: - `1 p x` — add x (1 ≤ x ≤ 10^6) points to the player with ID p (1 ≤ p ≤ n). - `2 p` — output the total points of the player with ID p. Output For each operation of the second type, output the total points of the specified player. Example Input 5 7 1 1 100 1 2 150 2 1 2 2 1 1 50 2 1 2 5 Output 100 150 150 0","solution":"def gaming_platform(n, operations): # Initialize points for each player points = [0] * (n + 1) results = [] for operation in operations: op = operation.split() if op[0] == \'1\': # Add points operation p = int(op[1]) x = int(op[2]) points[p] += x elif op[0] == \'2\': # Query points operation p = int(op[1]) results.append(points[p]) return results"},{"question":"Imagine a scenario where Emma works in software development, and she has been given the task to develop a program to compare different software versions. Each version string is in the format \\"major.minor.patch\\". For example, \\"1.0.1\\", \\"1.0.0\\", \\"2.3.4\\", etc. Emma wants to write a function that compares two version strings “version1” and “version2”. If “version1” is greater than “version2”, the function should return 1. If “version1” is less than “version2”, the function should return -1. If \\"version1\\" is equal to \\"version2\\", the function should return 0. Note that version strings are non-empty and only contain digits and the \'.\' character, representing a dot which separates number components. Version strings do not contain leading zeros and are at least comprised of a major version number (e.g., \\"1\\"). Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow, each containing two version strings separated by a single space. Output For each test case, output a single line with an integer: 1 if version1 is greater than version2, -1 if version1 is less than version2, and 0 if they are equal. Example Input 3 1.0.0 1.0.1 1.0 1.0.0 2.3.4 2.3.4 Output -1 0 0 Note In the first test case, version \\"1.0.0\\" is less than \\"1.0.1\\", so the output is -1. In the second test case, version \\"1.0\\" is equal to \\"1.0.0\\" as trailing zeros in minor and patch parts are ignored, so the output is 0. In the third test case, version \\"2.3.4\\" is equal to \\"2.3.4\\", so the output is 0.","solution":"def compare_versions(version1, version2): Compares two software version strings. :param version1: First version string. :param version2: Second version string. :return: 1 if version1 > version2, -1 if version1 < version2, 0 if version1 == version2. v1_parts = [int(part) for part in version1.split(\'.\')] v2_parts = [int(part) for part in version2.split(\'.\')] # Normalize the length of both version parts lists max_length = max(len(v1_parts), len(v2_parts)) v1_parts.extend([0] * (max_length - len(v1_parts))) v2_parts.extend([0] * (max_length - len(v2_parts))) for p1, p2 in zip(v1_parts, v2_parts): if p1 > p2: return 1 elif p1 < p2: return -1 return 0 def process_test_cases(test_cases): Processes a list of test cases comparing version strings. :param test_cases: A list of tuple pairs (version1, version2). :return: A list of results for each test case. results = [] for version1, version2 in test_cases: result = compare_versions(version1, version2) results.append(result) return results"},{"question":"You are given a series of lights arranged in a line. Each light is either on or off. You can perform exactly one operation where you choose any light and toggle it (change it from on to off or off to on) along with its two adjacent lights (if they exist). Your task is to determine if it\'s possible to turn off all the lights with exactly one operation. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of lights. The second line contains a binary string of length n where \'1\' represents a light that is on and \'0\' represents a light that is off. Output Print \\"YES\\" (quotes for clarity) if it\'s possible to turn off all the lights with exactly one operation, and \\"NO\\" otherwise. Examples Input: 5 10101 Output: NO Input: 3 111 Output: YES Input: 4 0101 Output: NO","solution":"def can_turn_off_all_lights(n, lights): # Check if there is any segment of three consecutive \'1\'s for i in range(n - 2): if lights[i] == \'1\' and lights[i + 1] == \'1\' and lights[i + 2] == \'1\': return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers representing the prices of items. The requirement is to buy one item from each of N shops such that the difference between the most expensive and the least expensive item is minimized. Constraints: * 1 ≤ N ≤ 100,000 * 1 ≤ Prices_i ≤ 10^9 Input: Input is given from Standard Input in the following format: N Prices_1 Prices_2 ... Prices_N Output: Print the minimum difference between the most expensive and the least expensive item from the chosen items. Examples: Input: 5 3 9 12 16 20 Output: 9 Input: 4 7 1 14 6 Output: 6 Input: 6 20 10 30 25 15 35 Output: 10 Input: 3 5 8 12 Output: 7","solution":"def min_price_difference(prices): Returns the minimum difference between the most expensive and the least expensive item from the given list of prices. if not prices or len(prices) < 2: return 0 # If there is less than 2 items, the difference can\'t be calculated meaningfully. prices.sort() min_diff = float(\'inf\') for i in range(1, len(prices)): diff = prices[i] - prices[i - 1] if diff < min_diff: min_diff = diff return min_diff"},{"question":"You are given a list of `n` integers (numbered from 1 to n) and an integer `k`. Your task is to find the kth smallest sum of distinct pairs (i, j) where 1 ≤ i < j ≤ n. In other words, you need to consider all possible sums of pairs formed by the integers in the list. Then, sort these sums and find the kth smallest one. Input The first line of input contains two integers, `n` and `k` (2 ≤ n ≤ 1000, 1 ≤ k ≤ n(n-1)/2). The second line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 100,000). Output Output a single integer, the kth smallest sum of distinct pairs. Examples Input 5 3 1 2 3 4 5 Output 5 Note For the input above, the possible pairwise sums sorted in ascending order are 3, 4, 5, 5, 6, 7, 7, 8, 9. The third smallest sum is 5.","solution":"def kth_smallest_pair_sum(n, k, nums): Finds the k-th smallest sum of distinct pairs in a list of numbers. sums = [] for i in range(n): for j in range(i + 1, n): sums.append(nums[i] + nums[j]) sums.sort() return sums[k - 1]"},{"question":"Given an undirected graph with n vertices and m edges, compute the minimum number of edges to be removed such that there exists no path between the two given nodes a and b. Input First line contains three integers `n`, `m`, and `q` (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ q ≤ 100) — the number of vertices, edges, and queries respectively. Each of the next m lines contains two integers `ui`, `vi` (1 ≤ ui, vi ≤ n, ui ≠ vi) — representing an undirected edge between vertices `ui` and `vi`. Each of the next q lines contains two integers `a` and `b` (1 ≤ a, b ≤ n, a ≠ b) — the nodes for each query. Output For each query, print the minimum number of edges that must be removed so there is no path between nodes `a` and `b`. Examples Input 6 7 2 1 2 1 3 2 3 3 4 4 5 5 6 4 6 1 4 4 6 Output 1 1","solution":"def min_edges_to_remove(n, m, edges, queries): from collections import defaultdict, deque def bfs(start, end, graph): queue = deque([start]) visited = {start: None} while queue: current = queue.popleft() if current == end: break for neighbor in graph[current]: if neighbor not in visited: visited[neighbor] = current queue.append(neighbor) if end not in visited: return None path = [] current = end while visited[current] is not None: path.append((visited[current], current)) current = visited[current] return path # Building the graph from the input edges graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) results = [] for a, b in queries: path = bfs(a, b, graph) if not path: results.append(0) else: results.append(1) return results"},{"question":"Jane is developing a kitchen management application. One of the features of the application allows users to manage their pantry by adding and removing ingredients. Jane wants to include a feature that helps her determine if it\'s possible to prepare a specific recipe with the current ingredients available in the pantry. Each recipe lists the required quantity of each ingredient, and each ingredient in the pantry has an available quantity. Jane wants to make sure that the pantry has at least the required quantity for all ingredients in the recipe before confirming that the recipe can be made. Write a function that takes the available ingredients and the recipe\'s required ingredients as input and returns \\"YES\\" if the recipe can be prepared with the available ingredients and \\"NO\\" otherwise. Input The function should receive two arguments: - ingredients (dictionary): A dictionary where keys are ingredient names (strings) and values are the available quantity of each ingredient (integers). - recipe (dictionary): A dictionary where keys are ingredient names (strings) and values are the required quantity of each ingredient (integers). Output Return \\"YES\\" (without quotes) if the recipe can be prepared with the available ingredients from the pantry. Otherwise, return \\"NO\\" (without quotes). Examples Input ingredients = { \\"flour\\": 500, \\"sugar\\": 200, \\"eggs\\": 5, \\"milk\\": 1000 } recipe = { \\"flour\\": 400, \\"sugar\\": 100, \\"eggs\\": 4, \\"milk\\": 500 } Output YES Input ingredients = { \\"flour\\": 300, \\"sugar\\": 150, \\"eggs\\": 2, \\"milk\\": 750 } recipe = { \\"flour\\": 350, \\"sugar\\": 100, \\"eggs\\": 3, \\"milk\\": 500 } Output NO Note In the first sample, the pantry has sufficient quantities of all the required ingredients for the recipe: - Flour: 500 >= 400 - Sugar: 200 >= 100 - Eggs: 5 >= 4 - Milk: 1000 >= 500 In the second sample, the pantry does not have sufficient quantities of flour and eggs: - Flour: 300 < 350 - Eggs: 2 < 3 Thus, the output is \\"NO\\" in the second sample.","solution":"def can_prepare_recipe(ingredients, recipe): Determines if a recipe can be prepared with the available ingredients in the pantry. Parameters: - ingredients (dict): A dictionary with the available quantities of each ingredient. - recipe (dict): A dictionary with the required quantities of each ingredient. Returns: - str: \\"YES\\" if the recipe can be prepared with the available ingredients, \\"NO\\" otherwise. for ingredient, required_quantity in recipe.items(): if ingredients.get(ingredient, 0) < required_quantity: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of n points in a 2D plane. Your task is to find the minimum distance between any two points from this set. The distance between two points (xi, yi) and (xj, yj) is defined as |xi - xj| + |yi - yj| (the Manhattan distance). Input The first line of the input contains an integer n (2 ≤ n ≤ 2000) — the number of points. Each of the following n lines contains two integers xi and yi (0 ≤ xi, yi ≤ 10^9) — the coordinates of the i-th point. Output Print a single integer — the minimum distance between any two points. Example Input: 4 0 0 3 4 3 0 0 4 Output: 3 Explanation: - The distance between points (0, 0) and (3, 4) is 7. - The distance between points (0, 0) and (3, 0) is 3. - The distance between points (0, 0) and (0, 4) is 4. - The distance between points (3, 4) and (3, 0) is 4. - The distance between points (3, 4) and (0, 4) is 3. - The distance between points (3, 0) and (0, 4) is 7. The minimum distance is 3.","solution":"def min_distance(n, points): import sys min_dist = sys.maxsize for i in range(n): for j in range(i + 1, n): xi, yi = points[i] xj, yj = points[j] dist = abs(xi - xj) + abs(yi - yj) if dist < min_dist: min_dist = dist return min_dist"},{"question":"You are a freelance software developer and you have been tasked to implement a number of changes in a legacy system used by a library. The library has n books, each with a unique serial number ranging from 1 to n. You are provided with a record of m operations to swap books on the shelves. Your task is to determine the final arrangement of books on the shelves after performing all the given swap operations. Input The first line contains two integers n (1 ≤ n ≤ 105) and m (1 ≤ m ≤ 105) — the number of books and the number of swap operations, respectively. Each of the next m lines contains two integers ai and bi (1 ≤ ai, bi ≤ n; ai ≠ bi) — representing a swap operation between the book with serial number ai and the book with serial number bi. Output Print a single line containing n integers — the serial numbers of the books in their final arrangement from the leftmost shelf to the rightmost shelf. Examples Input 5 3 1 2 3 4 5 1 Output 5 1 4 3 2 Input 4 2 1 4 2 3 Output 4 3 2 1 Explanation In the first example, the initial arrangement is [1, 2, 3, 4, 5]. After performing the swaps: - Swap books 1 and 2: [2, 1, 3, 4, 5] - Swap books 3 and 4: [2, 1, 4, 3, 5] - Swap books 5 and 1: [5, 1, 4, 3, 2] In the second example, the initial arrangement is [1, 2, 3, 4]. After performing the swaps: - Swap books 1 and 4: [4, 2, 3, 1] - Swap books 2 and 3: [4, 3, 2, 1]","solution":"def final_arrangement(n, m, operations): Returns the final arrangement of books on the shelves after performing a series of swap operations. Parameters: - n: int, the number of books - m: int, the number of swap operations - operations: list of tuples, each containing two integers representing a swap operation Returns: - list of int, the final arrangement of books from leftmost to rightmost # Initial arrangement of books arrangement = list(range(1, n + 1)) # Perform the swap operations for ai, bi in operations: arrangement[ai - 1], arrangement[bi - 1] = arrangement[bi - 1], arrangement[ai - 1] return arrangement"},{"question":"You are given a binary string s consisting of characters \'0\' and \'1\'. A binary string is beautiful if there is no occurrence of three consecutive characters being the same (i.e., \\"000\\" or \\"111\\"). Your task is to change the minimum number of characters in the given string such that it becomes beautiful. For example, if the string is \\"010101\\", it is already beautiful, so no changes are needed. If the string is \\"0000\\", you could change it to \\"0100\\" or \\"0010\\" with a minimum of 1 change. Input: The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of a string s (1 ≤ |s| ≤ 100) — the binary string. Output: For each test case, print the minimum number of changes required to make the binary string beautiful. Examples: Input: 3 0000 111011 010101 Output: 1 1 0 Note: In the first example, the optimal way to make the string \\"0000\\" beautiful is by changing one of the \'0\'s to \'1\', resulting in \\"0100\\" or \\"0010\\". In the second example, you can make \\"111011\\" beautiful by changing the first \'1\' to \'0\', resulting in \\"011011\\".","solution":"def make_beautiful(s): Returns the minimum number of changes required to make the binary string beautiful. changes = 0 n = len(s) for i in range(n - 2): if s[i] == s[i + 1] == s[i + 2]: changes += 1 # Change the next character to avoid more than two consecutive same characters. # Note: It\'s sufficient to change the third one in the sequence. if s[i + 2] == \'0\': s = s[:i + 2] + \'1\' + s[i + 3:] else: s = s[:i + 2] + \'0\' + s[i + 3:] return changes def process_test_cases(t, test_cases): results = [] for case in test_cases: result = make_beautiful(case) results.append(result) return results"},{"question":"A company wants to optimize the transportation of its products between several production sites and warehouses. There are n sites and m warehouses, connected by various routes. Each route has a transport cost associated with it. A product can be transported from a production site to any warehouse either directly through a single route or indirectly through multiple routes, possibly passing through other production sites or warehouses. Each route connects exactly two locations (which can be either a production site or a warehouse) and has a transport cost. The goal is to determine the minimum transport cost required to send products from a specific production site to any warehouse, ensuring that each site stores just one product and each warehouse can accommodate products from multiple sites. The transportation network can be represented as an undirected graph, where nodes represent locations (either production sites or warehouses) and edges represent routes with transportation costs. Given the graph and a starting production site, determine the minimum cost to transport the product to any warehouse. Input: The first line contains three integers n, m, and r (1 ≤ n, m ≤ 10^5, 1 ≤ r ≤ 2 * 10^5) — the number of production sites, warehouses, and routes respectively. The second line contains an integer s (1 ≤ s ≤ n) — the starting production site for the products. Each of the next r lines contains three integers a, b, c (1 ≤ a, b ≤ n + m, 1 ≤ c ≤ 10^6), representing a transport route between location a and location b with transport cost c. Output: Print a single integer — the minimum transport cost required to send products from the starting production site s to any warehouse. If it is not possible to reach any warehouse from the starting site, print -1. Examples: Input: 4 3 5 2 1 2 10 2 3 5 2 5 20 3 4 2 4 6 1 Output: 8 Input: 3 3 4 1 1 4 10 2 5 20 3 6 30 1 2 5 Output: 10 Explanation: In the first example, the minimum cost to transport the product from site 2 to any warehouse is 8 by following the route 2→3→4→6. In the second example, the minimum cost to transport the product from site 1 to warehouse 4 is 10 through the direct route.","solution":"import heapq import sys def minimum_transport_cost(n, m, r, s, routes): # Create the graph INF = sys.maxsize graph = {i: [] for i in range(1, n + m + 1)} for a, b, c in routes: graph[a].append((c, b)) graph[b].append((c, a)) # Dijkstra\'s algorithm to find the shortest path from the starting production site to any warehouse pq = [(0, s)] distances = {i: INF for i in range(1, n + m + 1)} distances[s] = 0 visited = set() while pq: current_distance, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) for edge_weight, neighbor in graph[current_node]: distance = current_distance + edge_weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) # Find the minimum distance to any warehouse (nodes n+1 to n+m) min_cost = min(distances[i] for i in range(n + 1, n + m + 1)) return min_cost if min_cost != INF else -1"},{"question":"John is a software engineer who loves puzzles. Recently, he came across a unique numeric pattern and wants to replicate it using a program. The pattern consists of consecutive numbers arranged in a diamond shape within a square grid of size (2*n - 1) x (2*n - 1). Here, the integer values run horizontally, vertically, and diagonally across the grid. The value at the center of the grid is always 1, and it increases as we move outward in steps of 1, but the grid edges are filled with 0s. For example, if n is 4, the pattern will look like this: 0 0 0 1 0 0 0 0 0 1 2 1 0 0 0 1 2 3 2 1 0 1 2 3 4 3 2 1 0 1 2 3 2 1 0 0 0 1 2 1 0 0 0 0 0 1 0 0 0 Write a program that takes an integer n and generates this grid. Input The first line contains the single integer n (1 ≤ n ≤ 10). Output Print the grid for the given n. Each value should be separated by a single space, and there should be no extra spaces after the last value in each line. Examples Input 2 Output 0 1 0 1 2 1 0 1 0 Input 3 Output 0 0 1 0 0 0 1 2 1 0 1 2 3 2 1 0 1 2 1 0 0 0 1 0 0","solution":"def generate_grid(n): size = 2 * n - 1 grid = [[0] * size for _ in range(size)] for i in range(size): for j in range(size): grid[i][j] = n - (abs(n - 1 - i) + abs(n - 1 - j)) for i in range(size): for j in range(size): if grid[i][j] < 0: grid[i][j] = 0 return grid def print_grid(n): grid = generate_grid(n) for row in grid: print(\' \'.join(map(str, row)))"},{"question":"John loves playing with strings. He especially enjoys finding patterns and rearranging letters. One day, he came across a string `s` and decided to rearrange its characters in such a way that the resulting string is lexicographically smallest among all possible permutations of `s`. Your task is to help John by writing a function that takes the string `s` and returns the lexicographically smallest permutation of it. Input The only line of the input contains a string `s` consisting of lowercase English letters (1 ≤ |s| ≤ 100). Output Output the lexicographically smallest permutation of the string `s`. Examples Input coder Output cdeor Input algorithm Output aghilmort","solution":"def lexicographically_smallest_permutation(s): Returns the lexicographically smallest permutation of string s. return \'\'.join(sorted(s))"},{"question":"Petya is fascinated with trees and recently encountered an interesting operation he calls \\"tree projection\\". A rooted tree is given with n vertices numbered from 1 to n. The root is always vertex 1. Petya has two types of operations, which he can perform in any order: 1. update v x - set the value of vertex v to x. 2. query u - find the sum of the values in the subtree rooted at u. Initially, all vertices have a value of 0. Input The first line contains a single integer n (1 ≤ n ≤ 100000), the number of vertices in the tree. The second line contains n - 1 integers, the i-th of which represents the parent of the (i + 1)-th vertex (1 ≤ pi ≤ n, pi < i + 1) describing the tree. The third line contains integer q (1 ≤ q ≤ 200000), the number of queries. The following q lines each contain a query of one of the two types described above. Output For each query of type 2 (query u), output the sum of values in the subtree rooted at vertex u. Examples Input 5 1 1 3 3 5 update 1 2 update 2 3 query 1 query 2 update 3 5 Output 5 3","solution":"class Tree: def __init__(self, n): self.n = n self.tree = [[] for _ in range(n + 1)] self.values = [0] * (n + 1) def add_edge(self, parent, child): self.tree[parent].append(child) def update(self, v, x): self.values[v] = x def query(self, u): return self._dfs_sum(u) def _dfs_sum(self, u): total = self.values[u] for child in self.tree[u]: total += self._dfs_sum(child) return total def process_operations(n, parents, q, operations): tree = Tree(n) for i, parent in enumerate(parents): tree.add_edge(parent, i + 2) result = [] for op in operations: if op[0] == \'update\': _, v, x = op tree.update(v, x) elif op[0] == \'query\': _, u = op result.append(tree.query(u)) return result"},{"question":"In a country far, far away, there are n cities connected by m two-way roads. Each road connects exactly two different cities and no two roads connect the same pair of cities. The country’s government is planning to introduce a new tax on the roads. They want to ensure that the road network remains connected after the tax is applied, but they also want to minimize the total tax collected. The tax collected from a road depends on its length. Formally, the tax is exactly equal to the length of the road in miles. The problem is to determine the minimum total tax the government can collect while maintaining the connectivity of all cities. The government officials have asked you to write a program that computes the minimum total tax for the given road network. Input The first line of the input contains two integers n and m (2 ≤ n ≤ 100,000, n-1 ≤ m ≤ 200,000) - the number of cities and roads respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10000) - representing a road between city u and city v with length w. Output Output a single integer — the minimum total tax the government can collect to ensure that all cities remain connected. Example Input 4 5 1 2 1 1 3 2 1 4 3 2 3 4 3 4 5 Output 6 Input 3 3 1 2 2 2 3 3 1 3 4 Output 5","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): edges.sort(key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = [] e = 0 i = 0 while e < n - 1: u, v, w = edges[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e += 1 result.append((u, v, w)) union(parent, rank, x, y) minimum_cost = sum([w for u, v, w in result]) return minimum_cost def minimum_total_tax(n, m, roads): return kruskal(n, roads)"},{"question":"You are given a string `s` consisting of lowercase English letters. Find the length of the longest substring of `s` that contains at most two distinct characters. For example, given `s = \\"eceba\\"`, the longest substring with at most two distinct characters is `\\"ece\\"` with the length of 3. For `s = \\"ccaabbb\\"`, the longest substring is `\\"aabbb\\"` with the length of 5. Input The input consists of one string `s` (1 ≤ |s| ≤ 10^5). Output Print the length of the longest substring that contains at most two distinct characters. Examples Input: eceba Output: 3 Input: ccaabbb Output: 5 Explanation In the first example, the longest substring with at most two distinct characters is `\\"ece\\"`, which has a length of 3. In the second example, the longest substring with at most two distinct characters is `\\"aabbb\\"`, which has a length of 5. Note Use two pointers to maintain a sliding window that satisfies the constraint of at most two distinct characters in the current window. When adding a new character to the window violates this constraint, move the left pointer to the right until the window is valid again. Keep track of the maximum window size as the right pointer scans through the string.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most two distinct characters. if len(s) == 0: return 0 left = 0 char_map = {} max_length = 0 for right in range(len(s)): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Chef is preparing for a cooking contest and needs to create a dish using various ingredients. He has a list of n ingredients, each with an associated weight. Chef wants to select a subset of these ingredients such that their total weight is as close as possible to a given target weight w, without exceeding it. Help Chef determine the maximum total weight he can achieve which does not exceed the target weight. Input The first line contains two integers n and w (1 ≤ n ≤ 1000, 1 ≤ w ≤ 10000) — the number of ingredients and the target weight, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the weights of the ingredients. Output Print one integer — the maximum total weight that does not exceed the target weight. Examples Input 5 10 3 1 4 2 8 Output 10 Input 4 7 5 4 3 2 Output 7 Note In the first example, Chef can select the ingredients with weights 3, 1, 4, and 2, which sum up to 10. In the second example, Chef can select the ingredients with weights 5 and 2, which sum up to 7.","solution":"def max_weight_without_exceeding(n, w, weights): Determines the maximum total weight of a subset of the provided weights that does not exceed the target weight. Parameters: n (int): the number of ingredients w (int): the target weight weights (list): list of weights of the ingredients Returns: int: the maximum total weight that does not exceed the target weight # dp will store the maximum weight that can be achieved for each weight limit up to w dp = [0] * (w + 1) for weight in weights: # Traverse backwards to prevent using the same item more than once for i in range(w, weight - 1, -1): dp[i] = max(dp[i], dp[i - weight] + weight) return dp[w]"},{"question":"You are tasked with creating a ticketing system for a train company. The system tracks train schedules, tickets purchased, and the total revenue generated. The company operates several trains on different routes, with each train having a unique identifier and operating on a specific route at predetermined times. Each train route is a one-way journey with multiple stops, and different fare rates may apply between different stops. Passengers can book tickets from any stop to any other stop along the route before the train departs. Your job is to create a program that simulates ticket bookings and calculates the total revenue. The program will accept multiple ticket purchase requests and should keep track of each transaction. If a booking is made after the train\'s departure time, it should be ignored. The program should process the following operations: 1. **AddTrain** - Add a new train to the system with its route and schedule. 2. **BookTicket** - Book a ticket for a passenger from one stop to another. 3. **GetRevenue** - Retrieve the total revenue generated by ticket sales for a specific train. 4. **IgnoreBooking** - Ignore a booking request that happens after the train\'s departure time. 5. **End** - Terminate input processing. Input The input consists of multiple lines, each representing an operation as follows: - The **AddTrain** operation is specified by a line in the format: ``` AddTrain <TrainID> <DepartureTime> <Stop1>:<Fare1> <Stop2>:<Fare2> ... <StopN>:<FareN> ``` Here, `<TrainID>` is a unique identifier for the train, `<DepartureTime>` is the departure time in `HH:MM` format, and each `<Stop>:<Fare>` represents a stop and the fare to the next stop. - The **BookTicket** operation is specified by a line in the format: ``` BookTicket <TrainID> <CurrentTime> <FromStop> <ToStop> ``` Here, `<TrainID>` is the identifier of the train, `<CurrentTime>` is the current time in `HH:MM` format when the ticket is being booked, `<FromStop>` is the departure stop, and `<ToStop>` is the destination stop. - The **GetRevenue** operation is specified by a line in the format: ``` GetRevenue <TrainID> ``` Here, `<TrainID>` is the identifier of the train for which the revenue is to be calculated. - The **IgnoreBooking** operation is implied when a `BookTicket` request is made after the train\'s `DepartureTime`. Such bookings are ignored and not processed. - The **End** operation is specified by a single line containing: ``` End ``` Output For each **GetRevenue** operation, output the total revenue generated by ticket sales for the specified train. Each output should be on a new line. Example Input ``` AddTrain T1 08:00 A:10 B:15 C:20 BookTicket T1 07:50 A B BookTicket T1 08:10 A B BookTicket T1 07:55 B C GetRevenue T1 AddTrain T2 09:30 X:25 Y:30 Z:35 BookTicket T2 09:15 X Y BookTicket T2 09:45 X Z GetRevenue T2 End ``` Output ``` 25 25 ```","solution":"from datetime import datetime class TrainSystem: def __init__(self): self.trains = {} self.revenues = {} self.fares = {} def add_train(self, train_id, departure_time, stops_info): self.trains[train_id] = departure_time self.revenues[train_id] = 0 self.fares[train_id] = {} stops = stops_info.split() for stop in stops: stop_name, fare = stop.split(\':\') fare = int(fare) self.fares[train_id][stop_name] = fare def book_ticket(self, train_id, current_time, from_stop, to_stop): if train_id not in self.trains: return train_departure_time = self.trains[train_id] if datetime.strptime(current_time, \\"%H:%M\\") >= datetime.strptime(train_departure_time, \\"%H:%M\\"): return if from_stop in self.fares[train_id] and to_stop in self.fares[train_id]: fare = self.fares[train_id].get(from_stop, 0) self.revenues[train_id] += fare def get_revenue(self, train_id): return self.revenues.get(train_id, 0) def process_operations(operations): system = TrainSystem() results = [] for operation in operations: if operation.startswith(\\"AddTrain\\"): parts = operation.split(maxsplit=3) train_id = parts[1] departure_time = parts[2] stops_info = parts[3] system.add_train(train_id, departure_time, stops_info) elif operation.startswith(\\"BookTicket\\"): parts = operation.split() train_id = parts[1] current_time = parts[2] from_stop = parts[3] to_stop = parts[4] system.book_ticket(train_id, current_time, from_stop, to_stop) elif operation.startswith(\\"GetRevenue\\"): parts = operation.split() train_id = parts[1] revenue = system.get_revenue(train_id) results.append(str(revenue)) elif operation.strip() == \\"End\\": break return results operations = [ \\"AddTrain T1 08:00 A:10 B:15 C:20\\", \\"BookTicket T1 07:50 A B\\", \\"BookTicket T1 08:10 A B\\", \\"BookTicket T1 07:55 B C\\", \\"GetRevenue T1\\", \\"AddTrain T2 09:30 X:25 Y:30 Z:35\\", \\"BookTicket T2 09:15 X Y\\", \\"BookTicket T2 09:45 X Z\\", \\"GetRevenue T2\\", \\"End\\" ] output = process_operations(operations) for line in output: print(line)"},{"question":"You are given a tree with n vertices, rooted at vertex 1. Each vertex has a value associated with it. You need to process q queries, each asking for the sum of values in the subtree of a given vertex. Input The first line contains two integers n and q (2 ≤ n, q ≤ 105), the number of vertices and the number of queries respectively. The second line contains n space-separated integers vi (1 ≤ vi ≤ 106), where vi is the value associated with the vertex i. Each of the next n-1 lines contains two space-separated integers ui and vi (1 ≤ ui, vi ≤ n), representing an edge between vertex ui and vertex vi. It is guaranteed that these edges form a tree. Each of the next q lines contains an integer xi (1 ≤ xi ≤ n), representing a query asking for the sum of values of all vertices in the subtree of vertex xi. Output For each query, print a single integer — the sum of values of all vertices in the subtree of vertex xi. Examples Input 5 3 1 2 3 4 5 1 2 1 3 2 4 2 5 1 2 4 Output 15 11 4 Note In the above example, the tree structure is as follows: ``` 1 / 2 3 / 4 5 ``` - The sum of values in the subtree of vertex 1 is 1 + 2 + 3 + 4 + 5 = 15. - The sum of values in the subtree of vertex 2 is 2 + 4 + 5 = 11. - The sum of values in the subtree of vertex 4 is 4.","solution":"def subtree_sums(n, values, edges, queries): from collections import defaultdict, deque # Create adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Helper function to perform DFS and calculate subtree sums def dfs(node, parent): subtree_sum = values[node - 1] for neighbor in tree[node]: if neighbor != parent: subtree_sum += dfs(neighbor, node) subtree_sums[node] = subtree_sum return subtree_sum # Dictionary to store the subtree sum for each node subtree_sums = {} # Start DFS from the root (vertex 1) dfs(1, -1) # Process each query and return the result return [subtree_sums[x] for x in queries]"},{"question":"You are given an array of integers a[1], a[2], ..., a[n]. You need to find the maximum sum of elements in any contiguous subarray of a such that no two elements in the subarray are the same. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 10^5) — the elements of the array. Output Print a single integer — the maximum sum of any contiguous subarray with all unique elements. Examples Input 5 1 2 3 2 1 Output 6 Input 4 1 2 3 4 Output 10 Note In the first example, the contiguous subarray with the maximum sum that has all unique elements is [1, 2, 3] which sums to 6. In the second example, the whole array [1, 2, 3, 4] is the contiguous subarray with all unique elements and its sum is 10.","solution":"def max_unique_subarray_sum(n, array): Returns the maximum sum of any contiguous subarray with all unique elements. Parameters: n (int): number of elements in array. array (list): list of integers representing the array elements. Returns: int: maximum sum of any contiguous subarray with all unique elements. seen = set() max_sum = 0 current_sum = 0 left = 0 for right in range(n): while array[right] in seen: seen.remove(array[left]) current_sum -= array[left] left += 1 seen.add(array[right]) current_sum += array[right] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a sorted list of distinct integers. Your task is to identify the smallest missing positive integer from the list. The list of integers is sorted in strictly increasing order and it may contain both positive and negative integers, but not zero. You need to find the smallest positive integer that is not present in the list. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of integers in the list. The second line contains n integers sorted in strictly increasing order. Output Print a single integer — the smallest missing positive integer. Examples Input 5 -3 -1 2 3 7 Output 1 Input 4 1 2 3 4 Output 5 Input 6 -5 -2 1 2 3 10 Output 4 Note In the first example, the smallest missing positive integer is 1, as 1 is not present in the list. In the second example, all integers from 1 to 4 are present in the list, so the smallest missing positive integer is 5. In the third example, integers 1, 2, and 3 are present in the list, but 4 is missing, so the smallest missing positive integer is 4.","solution":"def find_smallest_missing_positive(n, arr): Returns the smallest missing positive integer in a sorted list of distinct integers. Parameters: n (int): The number of integers in the list. arr (list of int): The sorted list of integers. Returns: int: The smallest missing positive integer. current = 1 for num in arr: if num == current: current += 1 elif num > current: break return current"},{"question":"Ami and Bala are playing a number game where they have to determine the minimal number of operations required to equalize two given integers, a and b. In one operation, they can either increment or decrement one of the integers by 1. You are tasked with helping them figure out the minimum number of operations. Given two integers a and b, output the minimum number of operations needed to make a equal to b. Input First line contains the number of test cases. Each of the next lines contains two integers a and b. Output For each test case, print the minimum number of operations needed to make a equal to b. Constraints 1 ≤ a, b ≤ 10^9 SAMPLE INPUT 3 5 10 7 3 100 100 SAMPLE OUTPUT 5 4 0","solution":"def minimal_operations(a, b): Given two integers a and b, return the minimal number of operations required to make a equal to b. One operation consists of either incrementing or decrementing one of the integers by 1. return abs(a - b) def process_input(input_data): lines = input_data.split(\'n\') num_cases = int(lines[0]) results = [] for i in range(1, num_cases + 1): a, b = map(int, lines[i].split()) results.append(minimal_operations(a, b)) return results"},{"question":"A software company is developing a memory-efficient file verification system. The system needs to check if two files are identical, but it doesn\'t have enough memory to compare the entire files at once. Instead, it divides each file into blocks of fixed size and then compares the blocks sequentially. Your task is to determine if two files are identical based on their blocks. For simplicity, the content of the files will be represented by strings, and you will compare these strings block by block. Write a function `are_files_identical(file1: str, file2: str, block_size: int) -> bool` which returns `True` if both files are identical and `False` otherwise. # Input: - `file1` (str): The content of the first file. - `file2` (str): The content of the second file. - `block_size` (int): The size of each block to divide the files into for the comparison. # Output: - `True` if the files are identical, `False` otherwise. # Constraints: - The lengths of `file1` and `file2` are both positive integers and may be different. - 1 <= len(file1), len(file2) <= 10^5 - 1 <= block_size <= min(len(file1), len(file2)) # Function Signature: ```python def are_files_identical(file1: str, file2: str, block_size: int) -> bool: ``` # Example: ```python >>> are_files_identical(\\"abcdefghij\\", \\"abcdefghik\\", 5) False >>> are_files_identical(\\"abcdefghij\\", \\"abcdefghij\\", 5) True >>> are_files_identical(\\"abcdefghij\\", \\"abcdefghij\\", 3) True >>> are_files_identical(\\"abcdefghijk\\", \\"abcdefghij\\", 4) False ``` # Explanation: In the first example, the two files differ in the last character of the second block. In the second example, the two files are identical. In the third example, the two files are identical when compared block by block with block_size 3. In the fourth example, the two files differ in length, so they can\'t be identical.","solution":"def are_files_identical(file1: str, file2: str, block_size: int) -> bool: Compare two files block by block to determine if they are identical. Args: file1 (str): The content of the first file. file2 (str): The content of the second file. block_size (int): The size of each block to divide the files into for the comparison. Returns: bool: True if the files are identical, False otherwise. # If the lengths of the files are different, they can\'t be identical if len(file1) != len(file2): return False # Loop through the files block by block for i in range(0, len(file1), block_size): # Compare each block if file1[i:i+block_size] != file2[i:i+block_size]: return False # If all blocks are equal, the files are identical return True"},{"question":"The Bookstore Inventory You are the manager of a bookstore, and you are tasked with maintaining an inventory of books. Each book has a unique title, an author, a publication year, and a number of copies in stock. Your system should support the following operations: 1. **Add a new book**: Add a book to the inventory. If a book with the same title and author already exists, update the number of copies. 2. **Delete a book**: Remove all copies of a book from the inventory. 3. **Update the number of copies**: Increase or decrease the number of copies of a specific book. 4. **Query book information**: Retrieve the details of a book given its title and author. Implement a system to support these operations. The system should handle multiple operations one after another until an \\"END\\" operation is received, which indicates the end of operations. # Input Format The input consists of multiple lines, where each line represents a single operation. The possible operations are: - `ADD title, author, publication_year, copies` - `DELETE title, author` - `UPDATE title, author, copies` - `QUERY title, author` - `END` The syntax for each operation is strict, with no extra spaces. Titles and authors do not contain commas. # Output Format For each `QUERY` operation, output the book details in the format: `title, author, publication_year, copies` If the book is not found, output: `NOT FOUND` After all operations, output: `END` # Constraints - Titles and authors are strings of 1 to 100 characters. - `publication_year` is an integer from 1450 to 2023. - `copies` is an integer from 0 to 10000. - The number of operations will not exceed 1000. # Sample Input ``` ADD TheGreatGatsby,FScottFitzgerald,1925,3 ADD ToKillAMockingbird,HarperLee,1960,5 QUERY TheGreatGatsby,FScottFitzgerald UPDATE ToKillAMockingbird,HarperLee,2 QUERY ToKillAMockingbird,HarperLee DELETE TheGreatGatsby,FScottFitzgerald QUERY TheGreatGatsby,FScottFitzgerald END ``` # Sample Output ``` TheGreatGatsby,FScottFitzgerald,1925,3 ToKillAMockingbird,HarperLee,1960,7 NOT FOUND END ``` # Notes 1. The `ADD` command will add a new book or update the existing one. 2. The `DELETE` command will remove all copies of the specified book. 3. The `UPDATE` command will add or subtract the number of copies. 4. The `QUERY` command will fetch and display the book\'s details. If the book is not present, print `NOT FOUND`. 5. The `END` command will terminate the input reading and print `END` at the end.","solution":"class Bookstore: def __init__(self): self.inventory = {} def add_book(self, title, author, publication_year, copies): key = (title, author) if key in self.inventory: self.inventory[key][\'copies\'] += copies else: self.inventory[key] = { \'title\': title, \'author\': author, \'publication_year\': publication_year, \'copies\': copies } def delete_book(self, title, author): key = (title, author) if key in self.inventory: del self.inventory[key] def update_book_copies(self, title, author, copies): key = (title, author) if key in self.inventory: self.inventory[key][\'copies\'] += copies if self.inventory[key][\'copies\'] <= 0: del self.inventory[key] def query_book(self, title, author): key = (title, author) if key in self.inventory: book = self.inventory[key] return f\\"{book[\'title\']},{book[\'author\']},{book[\'publication_year\']},{book[\'copies\']}\\" else: return \\"NOT FOUND\\" def handle_operations(operations): bookstore = Bookstore() result = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"END\\": result.append(\\"END\\") break elif command == \\"ADD\\": info = parts[1].split(\',\') title = info[0] author = info[1] publication_year = int(info[2]) copies = int(info[3]) bookstore.add_book(title, author, publication_year, copies) elif command == \\"DELETE\\": info = parts[1].split(\',\') title = info[0] author = info[1] bookstore.delete_book(title, author) elif command == \\"UPDATE\\": info = parts[1].split(\',\') title = info[0] author = info[1] copies = int(info[2]) bookstore.update_book_copies(title, author, copies) elif command == \\"QUERY\\": info = parts[1].split(\',\') title = info[0] author = info[1] result.append(bookstore.query_book(title, author)) return result"},{"question":"Task: Light Bulb Sequence Game story Alex loves playing with light bulbs, particularly a special kind of digital light bulb sequence display that he found at a flea market. This display consists of a row of bulbs, and each bulb can be either on or off. Alex discovered that certain sequences of bulbs bring him particular joy, especially those sequences that match a target pattern in a specific way. problem Given a target pattern consisting of \'1\'s (representing lit bulbs) and \'0\'s (representing unlit bulbs), and an initial sequence of bulbs, Alex wants to know the minimum number of switches needed to change the initial sequence to a desired pattern. Each switch toggles the state of exactly one bulb (i.e., switches it from \'1\' to \'0\' or from \'0\' to \'1\'). Write a program that takes as input the initial sequence of bulbs and the target pattern, both represented as strings of equal length. The program should output the minimum number of switches required to transform the initial sequence into the target pattern. Input format The first line contains the initial sequence of bulbs as a string of \'1\'s and \'0\'s. The second line contains the target pattern as a string of \'1\'s and \'0\'s. Both strings will have the same length. Output format Output the minimum number of switches required to transform the initial sequence into the target pattern. Input example 1 10101 10001 Output example 1 1 Input example 2 11111 00000 Output example 2 5 Input example 3 110011 100111 Output example 3 2 Input example 4 100101 100101 Output example 4 0 Explanation In the first example, only one switch is needed to change the second bulb from \'0\' to \'1\'. In the second example, each of the five switches must be flipped. In the third example, the first and fifth bulbs must be flipped. In the fourth example, no bulbs need to be switched since the initial sequence already matches the target pattern. Example Input 110011 100111 Output 2","solution":"def min_switches(initial, target): Returns the minimum number of switches required to transform the initial sequence into the target pattern. # Initialize the count of switches count = 0 # Loop through the initial and target strings for i in range(len(initial)): # If the characters at the current position are different, increment the count if initial[i] != target[i]: count += 1 return count"},{"question":"A company has decided to automate their employee report generation system. Each report contains the employee\'s name, age, and job title. Every day, the system generates these reports based on the data provided. However, it\'s critical that the reports are sorted by age, and if two or more employees have the same age, they should be sorted alphabetically by their name. You are tasked with writing a function that takes a list of employee records and returns the sorted list as per the above criteria. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of employees. Each of the next n lines contains three space-separated strings — the name of the employee (a string of 1 to 100 printable ASCII characters, without spaces), the age of the employee (an integer between 1 and 100), and the job title of the employee (a string of 1 to 100 printable ASCII characters, without spaces). Output Output n lines. Each line should contain the employee\'s name, age, and job title, sorted first by age, and then by name if ages are equal. Examples Input 4 Alice 30 Engineer Bob 25 Developer Charlie 25 Designer David 30 Manager Output Bob 25 Developer Charlie 25 Designer Alice 30 Engineer David 30 Manager Input 3 Zach 35 Analyst Anna 30 Technician Nick 30 Developer Output Anna 30 Technician Nick 30 Developer Zach 35 Analyst","solution":"def sort_employees(employee_records): Sorts the employee records first by age and then by name if ages are equal. Args: employee_records (list of tuples): List of employee records, where each record is a tuple containing (name, age, job title). Returns: list of tuples: Sorted list of employee records. # Sort the employees first by age and then by name sorted_records = sorted(employee_records, key=lambda x: (x[1], x[0])) return sorted_records def read_employee_data(input_list): Parses the input list and returns the employee records. Args: input_list (list of str): List of input strings where first element is number of employees and the rest are employee records in the format \\"name age job_title\\". Returns: list of tuples: List of employee records. n = int(input_list[0]) employee_records = [] for i in range(1, n+1): name, age, job_title = input_list[i].split() age = int(age) employee_records.append((name, age, job_title)) return employee_records def format_output(records): Formats the sorted employee records for output. Args: records (list of tuples): Sorted list of employee records. Returns: list of str: Formatted list of employee records as strings. return [f\\"{record[0]} {record[1]} {record[2]}\\" for record in records] def employee_report(input_list): Generates the employee report based on the provided input. Args: input_list (list of str): List of input strings. Returns: list of str: List of sorted employee records formatted as strings. employee_records = read_employee_data(input_list) sorted_records = sort_employees(employee_records) result = format_output(sorted_records) return result"},{"question":"In a faraway kingdom, there exists an ancient tradition where knights have to prove their strength and intelligence by solving a puzzle known as \\"The Scepter Challenge\\". The puzzle consists of an array containing N positive integers, each representing the weight of a scepter. Knights need to select a sequence of contiguous scepters from this array such that the sum of the selected scepters is maximized. However, the sum should not exceed a given limit, W. Given the array of scepters\' weights and the limit W, your task is to help the knights by finding the maximum possible sum of any subsequence of contiguous scepters that does not exceed the limit W. Input The first line contains two integers N (1 ≤ N ≤ 100000) and W (1 ≤ W ≤ 10^9), representing the number of scepters and the maximum allowed weight sum respectively. The second line contains N integers A1, A2, ..., AN (1 ≤ Ai ≤ 100000), representing the weights of the scepters. Output Output a single integer, the maximum sum of any contiguous subsequence of scepters that does not exceed the limit W. Examples Input 8 15 1 2 10 7 5 3 2 8 Output 15 Input 5 5 1 2 3 4 5 Output 5 Input 5 4 2 4 2 2 1 Output 4 Note In the first example, the subsequence [1, 2, 10, 2] has the maximum sum not exceeding 15. In the second example, the subsequence [2, 3] or [1, 4] provides the maximum sum of 5 which is equal to the limit W. In the third example, there are multiple subsequences with weight sums not exceeding 4. One possible maximum subsequence is [4].","solution":"def max_contiguous_sum_with_limit(weights, limit): Finds the maximum possible sum of any contiguous subsequence of weights that does not exceed the limit. max_sum = current_sum = 0 left = 0 for right in range(len(weights)): current_sum += weights[right] while current_sum > limit and left <= right: current_sum -= weights[left] left += 1 max_sum = max(max_sum, current_sum) return max_sum # Example usage: # N, W = 8, 15 # weights = [1, 2, 10, 7, 5, 3, 2, 8] # print(max_contiguous_sum_with_limit(weights, W)) # Output: 15"},{"question":"Grace needs to organize a party and arrange seating for her guests at a round table. There are n guests and each chair has a label from 1 to n in a consecutive manner. Grace wants to sit the guests in such a way that she minimizes the maximum distance between any two consecutive guests. Assume there are exactly n guests and each guest takes exactly one chair. The distance between two chairs i and j (i < j) is the minimum number of chairs you would need to move from i to j or from j back to i by wrapping around the circular table. For example, if there are 8 chairs and you want to calculate the distance between chair 2 and chair 7, the distance is min(7-2, 2+8-7) = 3. Given the number of guests, find the minimum possible value of the maximum distance between any two consecutive guests if they are seated optimally. Input The input consists of a single integer n (1 ≤ n ≤ 10^9) — the number of guests. Output Print a single integer — the minimum possible value of the maximum distance between any two consecutive guests when they are seated optimally. Examples Input 4 Output 1 Input 6 Output 1 Input 7 Output 1 Note In the first example, if we seat guests 1, 2, 3, and 4 at positions 1, 2, 3, and 4 respectively, the maximum distance between any two consecutive guests at the round table would be 1. In the second example, if we seat guests 1 to 6 at positions 1 to 6 respectively, the maximum distance between any two consecutive guests would be 1. In the third example, no matter how we arrange the 7 guests, the maximum distance between any two consecutive guests will be 1.","solution":"def min_max_distance(n): Given the number of guests n, this function returns the minimum possible value of the maximum distance between any two consecutive guests when they are seated optimally around a round table. if n == 1: return 0 else: return 1"},{"question":"Alex is working on a project that involves controlling traffic lights at intersections. Each intersection can have up to four traffic lights, one for each direction (North, East, South, and West). Alex needs to determine if it\'s possible to avoid any deadlock situation in which all directions are blocked due to improper signal timing. A deadlock happens when all directions have their traffic lights red at the same time. Each traffic light can either be red or green. Your task is to help Alex by writing a function to simulate the traffic lights and check if a deadlock is avoidable given an initial configuration. Input The input consists of three lines: 1. The first line contains an integer `T` (1 ≤ T ≤ 100), the number of test cases. 2. Each of the following T lines contains four characters separated by spaces, each character being either \'R\' (red) or \'G\' (green), representing the initial states of the North, East, South, and West traffic lights respectively. Output For each test case, output \\"Yes\\" if it is possible to avoid a deadlock with at least one light being green at any point in time. Otherwise, output \\"No\\". Example Input 3 R G R G G G G G R R R R Output Yes Yes No","solution":"def can_avoid_deadlock(T, test_cases): results = [] for case in test_cases: if \'G\' in case: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"A company is organizing a large conference with various sessions. Each session has defined start and end times, and you may only attend one session at a time. Given a list of proposed sessions, determine the maximum number of sessions that can be attended without any overlap. Input Input will begin with an integer n (1 ≤ n ≤ 100000), the number of proposed sessions. Each of the next n lines contains two integers, starti and endi (0 ≤ starti < endi ≤ 1000000000), representing the start and end times of a session. Output Print the maximum number of non-overlapping sessions that can be attended. Examples Input 5 1 4 2 3 3 5 7 8 5 7 Output 4 Input 4 2 3 3 4 4 5 1 2 Output 4 Input 3 10 12 12 13 11 12 Output 2 Note In the first test case, the optimal way to attend the maximum number of sessions is to attend sessions [2, 3], [3, 5], [5, 7], and [7, 8], total of 4 sessions.","solution":"def max_sessions(n, sessions): # Sort the sessions by end time sessions.sort(key=lambda session: session[1]) max_count = 0 last_end_time = 0 for start, end in sessions: if start >= last_end_time: max_count += 1 last_end_time = end return max_count"},{"question":"In an imaginary grid world, there are N x N cells, and each cell can either be empty or contain an obstacle. A robot starts from the top-left cell (1,1) and aims to reach the bottom-right cell (N,N). The robot can only move either right or down at each step. The goal is to find the number of unique paths the robot can take to reach its destination while avoiding obstacles. Input The first line of input contains an integer T denoting the number of test cases. T test cases follow. The first line of each test contains the integer N. The next N lines contain N integers — 0 or 1 — representing the grid, where 0 indicates an empty cell and 1 indicates an obstacle. Output For each test case, output a single line with the number of unique paths from the top-left to the bottom-right cell. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 50 0 ≤ Grid[i][j] ≤ 1 Example Input: 2 3 0 0 0 0 1 0 0 0 0 3 0 1 0 0 0 0 0 0 0 Output: 2 3 Explanation: Example case 1. There are 2 such paths: (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) and (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3). Example case 2. There are 3 such paths: (1,1) -> (2,1) -> (2,2) -> (2,3) -> (3,3), (1,1) -> (1,3) -> (2,3) -> (3,3), and (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3).","solution":"def unique_paths_with_obstacles(grid): N = len(grid) # Create a 2D dp array to store the number of unique paths to each cell dp = [[0] * N for _ in range(N)] # If the start or end cell is an obstacle, no unique paths exist if grid[0][0] == 1 or grid[N-1][N-1] == 1: return 0 # Initialize the starting point dp[0][0] = 1 # Fill in the dp array for i in range(N): for j in range(N): if grid[i][j] == 1: # If the cell is an obstacle, continue dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][N-1] def process_test_cases(test_cases): results = [] for grid in test_cases: results.append(unique_paths_with_obstacles(grid)) return results def read_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) grid = [] for i in range(N): grid.append(list(map(int, lines[index + 1 + i].split()))) test_cases.append(grid) index += N + 1 return test_cases def format_output(results): return \'n\'.join(map(str, results)) # The main function to integrate reading input, processing test cases, and outputting results. def main(input_str): test_cases = read_input(input_str) results = process_test_cases(test_cases) return format_output(results)"},{"question":"A company wants to ensure that their code does not contain redundant words. To help with this, they want to identify all unique words in a given piece of text and count their occurrences. Your task is to write a program that processes a list of strings, identifies unique words, and counts the frequency of each word. Input The input consists of multiple lines of text, each containing a string of words separated by spaces. The number of lines will not exceed 1000, and each line will contain at most 100 characters. Words are defined as continuous sequences of alphabetic characters (a-z, A-Z). Case should be ignored, meaning that `Hello`, `hello`, and `HELLO` are considered the same word. Output For each unique word found in the input, output the word (in lowercase) followed by its count. The words should be listed in alphabetical order. Examples Input hello world Hello there world Output hello 2 there 1 world 2 Input One fish two fish red fish blue fish Red Red Blue Blue Output blue 3 fish 4 one 1 red 3 two 1","solution":"def count_unique_words(lines): from collections import Counter import re word_counter = Counter() for line in lines: # Convert to lower case and find all words words = re.findall(r\'b[a-zA-Z]+b\', line.lower()) word_counter.update(words) # Get a sorted list of words and their counts sorted_word_counts = sorted(word_counter.items()) return sorted_word_counts"},{"question":"You are given a grid with dimensions H x W containing integers. You want to minimize the sum of the absolute differences between adjacent cells in the grid. You have the ability to change the values of certain cells in the grid to achieve this minimization. Your task is to write a program that takes the initial grid and calculates the minimum sum of the absolute differences between the values in adjacent cells after making zero or more changes to the grid values. You can change any cell in the grid to any integer value, and there are no constraints on the number of times you can change the value of each cell. Input The input consists of: - Two integers H and W (1 ≤ H, W ≤ 100) representing the height and width of the grid. - H lines, each containing W integers, representing the initial values in the grid. Output Output a single integer, representing the minimum possible sum of the absolute differences between adjacent cells in the grid. Examples Input 2 3 1 5 3 4 8 6 Output 0 Input 3 3 1 2 3 4 5 6 7 8 9 Output 0 Input 2 2 1 0 0 1 Output 0 Explanation In the first example, you can change all grid cells to the same value, for example, all to 4, resulting in a zero difference between adjacent cells. In the second example, you can similarly change all grid cells to 5. In the third example, setting both cells to 0 or 1 will result in zero difference between adjacent cells.","solution":"def minimize_sum_of_absolute_differences(H, W, grid): This function takes the height (H) and width (W) of a grid and the grid itself as input and returns the minimum possible sum of the absolute differences between adjacent cells after making zero or more changes to the grid values. # Since we can change all cells to any value, the minimum difference is obtained # by setting all cells to the same value. Thus the minimum sum of absolute differences # between adjacent cells will always be 0. return 0"},{"question":"You are given a series of operations to perform on a string, consisting of only lowercase English letters, and you need to determine the minimal lexicographical string you can obtain after applying all operations. Each operation consists of choosing a character from the string and moving it to the end of the string. You are allowed to perform this operation as many times as you want. Input The first line contains an integer n (1 ≤ n ≤ 100000), the length of the string. The second line contains a string s of length n consisting of only lowercase English letters. Output Print the minimal lexicographical string possible after performing any number of the described operations. Examples Input 5 bcdea Output abcde Input 4 dcba Output abcd Input 1 a Output a Note In the first example, you can move \'a\' to the end to get the string \\"bcdea\\", then \\"cdea\\" and finally \\"dea\\" and so on until you get \\"abcde\\". In the second example, moving \'a\' to the end and \'b\' at the end gives you the string \\"dcba\\", then \\"cba\\" and \\"ba\\", ultimately resulting in \\"abcd\\". There are no operations needed in the third example since the string \\"a\\" is already in its minimal lexicographical form.","solution":"def minimal_lexicographical_string(n, s): Returns the minimal lexicographical string by performing the allowed operations. return \'\'.join(sorted(s))"},{"question":"Sara works as a delivery planner for a local courier service. Each delivery task is characterized by its processing time pi and an urgency factor ui. The delivery service receives tasks continuously. Sara needs to keep track of the delivery tasks and be able to determine if a task can be completed within its urgency time frame. The delivery service can run only one task at a time, and tasks can be processed in the order they are received. However, if a task cannot be completed within its urgency time frame, it must be skipped. You need to write a program that handles two types of queries: * 1 p u — A new delivery task with processing time p and urgency factor u is received. * 2 — Process the next task in the queue and determine if it can be completed within its urgency time frame (skip the task if it can\'t). Note that tasks are processed in the order they are received. For each query of the second type, you need to print \\"COMPLETED\\" if the task can be completed within its urgency time frame, otherwise print \\"SKIPPED\\". Input The first line contains two integer numbers q and t (2 ≤ q ≤ 105, 1 ≤ t ≤ 1012) - the number of queries and a constant time unit (t remains the same throughout the entire set of queries). Each of the next q lines contains the type of query and its parameters: * If the query type is 1, it contains two integers p (1 ≤ p ≤ 106) and u (1 ≤ u ≤ 106). * If the query type is 2, it contains no additional parameters. Output For each query of the second type, print \\"COMPLETED\\" if the task can be completed within its urgency time frame, otherwise print \\"SKIPPED\\". Example Input 4 10 1 5 2 2 1 6 1 2 Output COMPLETED SKIPPED Note In the first example, the first task has processing time 5 and urgency factor 2, it can be completed within its urgency time frame (5 * 2 = 10 time units). The second query is to process the next task, and it meets the urgency time frame, so the output is \\"COMPLETED\\". The third query adds a new task with processing time 6 and urgency factor 1 (6 * 1 = 6 time units), which is less than the constant time unit t. The fourth query is to process the next task, and it does not meet the urgency time frame (6 * 1 < 10), so the output is \\"SKIPPED\\".","solution":"from collections import deque def delivery_queries(queries, t): task_queue = deque() results = [] for query in queries: if query[0] == 1: # Add a new task p, u = query[1], query[2] task_queue.append((p, u)) elif query[0] == 2: # Process next task if task_queue: p, u = task_queue.popleft() if p * u >= t: results.append(\\"COMPLETED\\") else: results.append(\\"SKIPPED\\") return results"},{"question":"You are given an array of n integers. Your task is to find the sum of the absolute differences between all pairs of elements in the array. More formally, for a given array a of length n, find the sum of |a[i] - a[j]| for all 1 ≤ i < j ≤ n. Input The first line contains an integer n (1 ≤ n ≤ 100), the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100). Output Output a single integer, which is the sum of the absolute differences between all pairs of elements in the array. Examples Input 3 1 3 2 Output 4 Input 4 1 1 1 1 Output 0 Input 5 1 3 5 7 9 Output 40","solution":"def sum_of_absolute_differences(n, array): Returns the sum of the absolute differences between all pairs of elements in the array. Parameters: n (int): Length of the array. array (list of int): The array of integers. Returns: int: The sum of absolute differences between all pairs of elements. sum_diff = 0 for i in range(n): for j in range(i + 1, n): sum_diff += abs(array[i] - array[j]) return sum_diff"},{"question":"You are given a series of strings representing various words. For each string, you need to determine the number of unique characters. A character is considered unique for a given string if it occurs exactly once in that string. Input: The first line contains a single integer T, the number of test cases. The following T lines each contain a single string consisting of lowercase alphabetic characters only. Output: For each string, output the number of unique characters it contains. Constraints: 1 ≤ T ≤ 10^4 1 ≤ length of each string ≤ 10^6 Sample Input: 2 abcabc abcdef Sample Output: 0 6 Explanation: Test Case 1: For the string \\"abcabc\\", every character appears more than once, so the number of unique characters is 0. Test Case 2: For the string \\"abcdef\\", each character appears exactly once, so the number of unique characters is 6.","solution":"def count_unique_characters(strings): Returns a list of counts of unique characters in each string. results = [] for s in strings: char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 unique_count = sum(1 for v in char_count.values() if v == 1) results.append(unique_count) return results"},{"question":"Given a string S consisting of only lowercase alphabets, you need to find the number of contiguous substrings that start and end with the same character. **Input** - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string S. **Output** For each test case, output a single integer - the number of contiguous substrings that start and end with the same character. **Constraints** - 1 ≤ T ≤ 10 - 1 ≤ |S| ≤ 10^5 **Example** **Input:** ``` 2 abcab aaaa ``` **Output:** ``` 7 10 ``` **Explanation** Example case 1: - Substrings are: ‘a’, ‘b’, ‘c’, ‘a’, ‘b’, ‘aba’, ‘bab’ Example case 2: - Substrings are: ‘a’, ‘a’, ‘a’, ‘a’, ‘aa’, ‘aa’, ‘aa’, ‘aaa’, ‘aaa’, ‘aaaa’","solution":"def count_contiguous_substrings(S): Returns the number of contiguous substrings of S that start and end with the same character. n = len(S) count = 0 for i in range(n): j = i while j < n: if S[i] == S[j]: count += 1 j += 1 return count def process_multiple_cases(test_cases): Processes multiple test cases and returns the results for each test case. results = [] for case in test_cases: results.append(count_contiguous_substrings(case)) return results"},{"question":"Ron\'s family loves to play a game with gemstones. There are M different types of gemstones, each represented by a unique lowercase letter from \'a\' to \'z\'. Each family member has a gemstone collection composed of several types of gemstones. They want to know the types of gemstones common across all family members\' collections. Your task is to find all such common types of gemstones that appear in every family member\'s collection. Input - The first line of input contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of family members. - The next N lines contain a string representing the types of gemstones in each family member\'s collection. Output For each test case, output a single line containing a string of the common types of gemstones in lexicographical order. If there are no common gemstones, output an empty string. Example SAMPLE INPUT 2 3 abc ab bc 2 def cf SAMPLE OUTPUT b f Explanation In the first test case, gemstones \'a\', \'b\', and \'c\' appear in the collections of the first 3 family members. Only \'b\' is common across all collections. In the second test case, there are no common gemstones between the two family members. Hence, the output is an empty string.","solution":"def find_common_gemstones(T, cases): results = [] for i in range(T): N = cases[i][0] collections = cases[i][1] # Use set intersection to find common gemstones common_gemstones = set(collections[0]) for collection in collections[1:]: common_gemstones &= set(collection) results.append(\'\'.join(sorted(common_gemstones))) return results # Example function call # find_common_gemstones(2, [[3, [\'abc\', \'ab\', \'bc\']], [2, [\'def\', \'cf\']]])"},{"question":"You are given a string s and a list of words dict, consisting of unique words. Your task is to determine if s can be segmented into a space-separated sequence of one or more dictionary words from dict. Input The input consists of two lines: - The first line contains a single string s, where 1 ≤ |s| ≤ 3000. - The second line contains a space-separated list of words dict, where each word in the dictionary has length at least 1 and at most 20, and the number of words is at most 1000. Output Print \\"YES\\" if s can be segmented into a sequence of one or more dictionary words, otherwise print \\"NO\\". Examples Input leetcode leet code Output YES Input applepenapple apple pen Output YES Input catsandog cats sand dog Output NO Note In the first example, the input string \\"leetcode\\" can be segmented as \\"leet code\\". In the second example, the input string \\"applepenapple\\" can be segmented as \\"apple pen apple\\". In the third example, \\"catsandog\\" cannot be fully segmented using words from the dictionary, as there is no valid segmentation that includes all parts of the string.","solution":"def can_segment_string(s, word_dict): word_set = set(word_dict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return \\"YES\\" if dp[len(s)] else \\"NO\\""},{"question":"Maria is fascinated with palindromes and recently came up with a challenge. She would like to know the longest palindromic substring within a given string. A palindromic string reads the same forward and backward. For example, \\"madam\\" and \\"racecar\\" are palindromes. Your task is to write a program that finds the longest palindromic substring in a given string. Input The input contains one string S where 1 ≤ |S| ≤ 1000. Output Output one string - the longest palindromic substring in S. If there are multiple such substrings with the same length, return the one that appears first in S. Examples Input babad Output bab Input cbbd Output bb Note In the first sample, the longest palindromic substring in \\"babad\\" is \\"bab\\" (or \\"aba\\"). However, since \\"bab\\" appears first, it is the correct answer. In the second sample, the longest palindromic substring in \\"cbbd\\" is \\"bb\\".","solution":"def longest_palindromic_substring(s: str) -> str: def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left+1:right] longest_palindrome = \\"\\" for i in range(len(s)): # Odd length palindromes palindrome1 = expand_around_center(s, i, i) # Even length palindromes palindrome2 = expand_around_center(s, i, i+1) if len(palindrome1) > len(longest_palindrome): longest_palindrome = palindrome1 if len(palindrome2) > len(longest_palindrome): longest_palindrome = palindrome2 return longest_palindrome"},{"question":"Problem A program is needed to determine the number of distinct words in a given paragraph of text. The text comprises several sentences and words, which are separated by spaces and punctuation marks. For this task, consider punctuation marks to include: periods (.), commas (,), exclamation marks (!), question marks (?), colons (:), semicolons (;), and spaces. The program should ignore differences in case, treating \\"Word\\" and \\"word\\" as the same. Additionally, any leading or trailing spaces in the input should be removed. Constraints: - The input string length does not exceed 10^6 characters. - The input consists only of printable ASCII characters. Input A string S representing a paragraph of text. Output An integer representing the number of distinct words in the text. Examples Input \\"The quick brown fox jumps over the lazy dog.\\" Output 8 Input \\"Hello, world! Hello world.\\" Output 2","solution":"import re def count_distinct_words(text): Returns the number of distinct words in the given text. Words are compared in a case-insensitive manner and ignore punctuation. # Remove punctuation and convert text to lowercase cleaned_text = re.sub(r\'[.,!?:;]\', \' \', text).lower() # Split text into words words = cleaned_text.split() # Use a set to find unique words distinct_words = set(words) return len(distinct_words)"},{"question":"There is a closet with an infinite number of shirts, pants, and shoes in three different colors: red, green, and blue. You want to create an outfit that maximizes the number of matching items in terms of color while ensuring that exactly one item comes from each category (shirt, pants, and shoes). The primary criterion is to ensure the maximum number of same-color items are picked to form the outfit. If there are multiple ways to maximize the matching count, the combinations should be preferred in the order of red, green, and blue. Write a program that determines which outfit you should create based on the available stock. Input The first line contains three integers sr, sg, sb (0 ≤ sr, sg, sb ≤ 1000) — the number of red, green, and blue shirts, respectively. The second line contains three integers pr, pg, pb (0 ≤ pr, pg, pb ≤ 1000) — the number of red, green, and blue pants, respectively. The third line contains three integers shr, shg, shb (0 ≤ shr, shg, shb ≤ 1000) — the number of red, green, and blue shoes, respectively. Output Print the colors of the selected shirt, pants, and shoes in that order, ensuring the maximum matching count and following the preferred color order for ties. Examples Input 5 0 2 1 1 1 2 0 3 Output red red red Input 0 4 3 1 2 1 0 5 2 Output green green green Input 5 3 0 4 2 2 3 3 3 Output red red red Input 1 1 1 1 1 1 1 1 1 Output red red red","solution":"def choose_outfit(sr, sg, sb, pr, pg, pb, shr, shg, shb): Returns the best matching outfit given the stock counts for shirts, pants, and shoes in red, green, and blue. outfits = [ (\'red\', sr, pr, shr), (\'green\', sg, pg, shg), (\'blue\', sb, pb, shb), ] # Sorting outfits to make sure we prefer the tie-breaking order: red > green > blue outfits.sort(key=lambda x: (x[1], x[2], x[3]), reverse=True) best_outfit = outfits[0] return best_outfit[0], best_outfit[0], best_outfit[0]"},{"question":"You are given a sequence of n positive integers representing the daily temperatures in a particular area over a span of n days. Your task is to determine the maximum difference between two temperatures such that the lower temperature occurs before the higher temperature in the sequence. Input The first line of the input contains a positive integer n (2 ≤ n ≤ 100,000) — the number of days. The second line contains n integers representing the temperatures on each day: t1, t2, ..., tn (1 ≤ ti ≤ 1000). Output Print a single integer — the maximum difference between two temperatures where the lower temperature occurs before the higher temperature in the sequence. If no such pair of temperatures exists, print 0. Examples Input 7 5 1 2 3 4 6 4 Output 5 Input 5 7 6 5 4 3 Output 0 Note In the first sample, the temperatures are: [5, 1, 2, 3, 4, 6, 4]. The maximum difference is achieved between the temperatures 1 and 6, where 1 occurs before 6. In the second sample, the temperatures are: [7, 6, 5, 4, 3]. There is no day with a temperature higher than a preceding day, so the output is 0.","solution":"def max_temperature_difference(n, temperatures): Return the maximum difference between two temperatures where the lower temperature occurs before the higher temperature in the sequence. min_temp = temperatures[0] max_diff = 0 for temp in temperatures[1:]: if temp > min_temp: max_diff = max(max_diff, temp - min_temp) else: min_temp = min(min_temp, temp) return max_diff"},{"question":"You are given an array of integers representing the population of n different cities. The goal is to find the maximum population difference between any two cities such that the more populous city is to the right of the less populous city in the array. In other words, for each city i, find the maximum difference between the population of any city j (where j > i) and the population of city i. Input The first line contains an integer n (2 ≤ n ≤ 100 000) — the number of cities. The second line contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 10^9) — the populations of the cities. Output Print a single integer representing the maximum population difference between any two cities such that the more populous city is to the right of the less populous city. Example Input 6 3 1 4 8 7 2 Output 7 Note Consider the example. - The difference between the population of city 1 (population 3) and city 3 (population 4) is 1 (4 - 3). - The difference between the population of city 1 (population 3) and city 4 (population 8) is 5 (8 - 3). - The difference between the population of city 2 (population 1) and city 4 (population 8) is 7 (8 - 1). - And so on. The maximum population difference is 7, which occurs between the cities with populations 1 (city 2) and 8 (city 4).","solution":"def max_population_difference(n, populations): Returns the maximum population difference between any two cities such that the more populous city is to the right of the less populous city in the array. min_pop = populations[0] max_difference = 0 for i in range(1, n): if populations[i] > min_pop: max_difference = max(max_difference, populations[i] - min_pop) min_pop = min(min_pop, populations[i]) return max_difference"},{"question":"Your task is to write a program that processes a list of commands to manipulate an initially empty stack and perform operations on it. - The stack supports the following operations: 1. \\"PUSH x\\" - Push the integer x onto the stack. 2. \\"POP\\" - Remove the top element from the stack. If the stack is empty, do nothing. 3. \\"TOP\\" - Print the top element of the stack. If the stack is empty, print \\"EMPTY\\". 4. \\"GET_MIN\\" - Print the smallest element currently in the stack. If the stack is empty, print \\"EMPTY\\". - Each command is given on a new line and commands are case-sensitive. - The number of commands will not exceed 10^5. - The value of a pushed integer x will be in the range -10^9 to 10^9. Input The input consists of a single dataset: - The first line contains an integer m, representing the number of commands. - The next m lines contain one command each as described above. Output For each \\"TOP\\" and \\"GET_MIN\\" command, print the result on a new line. Example Input 7 PUSH 5 TOP GET_MIN PUSH 3 GET_MIN POP GET_MIN Output 5 5 3 5 Explanation 1. After \\"PUSH 5\\", the stack is [5]. The top element is 5 and the smallest element is also 5. 2. After \\"PUSH 3\\", the stack is [5, 3]. The top element is 3 but the smallest element is now 3. 3. After \\"POP\\", the stack is [5] again and the smallest element reverts to 5.","solution":"class MinStack: def __init__(self): self.stack = [] self.min_stack = [] def push(self, x): self.stack.append(x) if not self.min_stack or x <= self.min_stack[-1]: self.min_stack.append(x) def pop(self): if self.stack: top = self.stack.pop() if top == self.min_stack[-1]: self.min_stack.pop() def top(self): return self.stack[-1] if self.stack else \\"EMPTY\\" def get_min(self): return self.min_stack[-1] if self.min_stack else \\"EMPTY\\" def process_commands(commands): stack = MinStack() results = [] for command in commands: if command.startswith(\\"PUSH\\"): _, x = command.split() stack.push(int(x)) elif command == \\"POP\\": stack.pop() elif command == \\"TOP\\": results.append(stack.top()) elif command == \\"GET_MIN\\": results.append(stack.get_min()) return results"},{"question":"The task is to implement a system that manages a warehouse containing various types of products. Each product has an identifier, a type, and a quantity. The warehouse should support the following operations: 1. **Stocking products**: Add quantities of a product to the warehouse. If the product already exists, simply increase its quantity. 2. **Dispatching products**: Remove specific quantities of a product from the warehouse. If the product does not exist or there isn\'t enough quantity, the operation should be ignored. 3. **Reporting inventory**: Return the total quantity of all products in the warehouse. Your task is to create a class `Warehouse` that supports the following methods: - `__init__(self)`: Initializes the warehouse with no products. - `stock_product(self, product_id: str, product_type: str, quantity: int)`: Stocks a product in the warehouse. - `dispatch_product(self, product_id: str, quantity: int)`: Dispatches a product from the warehouse. - `report_inventory(self) -> int`: Returns the total quantity of all products in the warehouse. Here are the constraints for the methods: - `product_id` and `product_type` are strings containing only alphanumeric characters. - `quantity` is a non-negative integer and never exceeds 10^6. - The `report_inventory` function must run in O(1) time. **Example** ```python warehouse = Warehouse() warehouse.stock_product(\\"P001\\", \\"Electronics\\", 100) warehouse.stock_product(\\"P002\\", \\"Books\\", 50) print(warehouse.report_inventory()) # Output: 150 warehouse.dispatch_product(\\"P001\\", 30) print(warehouse.report_inventory()) # Output: 120 warehouse.dispatch_product(\\"P002\\", 50) print(warehouse.report_inventory()) # Output: 70 warehouse.dispatch_product(\\"P003\\", 10) # P003 does not exist, nothing happens print(warehouse.report_inventory()) # Output: 70 warehouse.stock_product(\\"P001\\", \\"Electronics\\", 20) print(warehouse.report_inventory()) # Output: 90 ``` **Detailed Specifications** - The `Warehouse` class should maintain an efficient way of tracking the quantity of each product. - If a product is stocked multiple times, its quantity should be summed up. - Dispatching from a non-existent product or from a product with insufficient quantity should have no effect. - The `report_inventory` method needs to return the sum of all quantities of stocked products instantaneously.","solution":"class Warehouse: def __init__(self): self.inventory = {} self.total_quantity = 0 def stock_product(self, product_id: str, product_type: str, quantity: int): if product_id in self.inventory: self.inventory[product_id][\'quantity\'] += quantity else: self.inventory[product_id] = {\'type\': product_type, \'quantity\': quantity} self.total_quantity += quantity def dispatch_product(self, product_id: str, quantity: int): if product_id in self.inventory and self.inventory[product_id][\'quantity\'] >= quantity: self.inventory[product_id][\'quantity\'] -= quantity self.total_quantity -= quantity if self.inventory[product_id][\'quantity\'] == 0: del self.inventory[product_id] def report_inventory(self) -> int: return self.total_quantity"},{"question":"You are given a list of n integers. Your task is to partition the list into two sublists such that the difference between the sum of the integers in the two sublists is minimized. If there are multiple ways to partition the list to achieve the minimum difference, any one of them is acceptable. Input The first line contains an integer n (1 ≤ n ≤ 20). The second line contains n integers. Each integer is non-negative and does not exceed 1000. Output Output the minimum difference between the sums of the two sublists. Examples Input 4 1 6 11 5 Output 1 Input 3 36 7 46 Output 3","solution":"def partition_min_difference(nums): Returns the minimum difference between the sums of two sublists of the given list `nums`. n = len(nums) total_sum = sum(nums) target = total_sum // 2 dp = [0] * (target + 1) for num in nums: for j in range(target, num - 1, -1): dp[j] = max(dp[j], dp[j - num] + num) return abs(total_sum - 2 * dp[target]) # Example usage nums = [1, 6, 11, 5] print(partition_min_difference(nums)) # Output: 1 nums = [36, 7, 46] print(partition_min_difference(nums)) # Output: 3"},{"question":"You are given a 2D grid of characters where each cell contains one of the lowercase Latin letters from \'a\' to \'z\'. Let\'s call this grid `G`. The size of the grid is n x m, where n is the number of rows and m is the number of columns. A word `w` is defined as a sequence of characters where 1 ≤ |w| ≤ n * m and all characters in `w` are distinct. Define the beauty of a word `w` as the sum of indices of the characters when the word is read in the grid. The index of a character `G[i][j]` is calculated as i * m + j + 1 (1-based index for rows and columns). You are required to find the maximum possible beauty of any word that can be formed from the grid. The word can be formed by moving horizontally or vertically from one cell to an adjacent cell. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 100). The next n lines each contain m characters representing the grid `G`. Output Print a single integer — the maximum possible beauty of any word that can be formed from the grid. Examples Input 3 3 abc def ghi Output 45 Input 2 2 ab cd Output 10 Input 4 1 d c b a Output 10 Note In the first example, one of the possible words with the maximum beauty is \\"abcdefghi\\". The indices of the characters are summed up as follows: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. In the second example, the word \\"abcd\\" has the maximum beauty, and the indices are 1 + 2 + 3 + 4 = 10. In the third example, the word \\"dcba\\" has the maximum beauty, and the indices are 1 + 2 + 3 + 4 = 10.","solution":"def calculate_beauty(n, m, grid): # Creating a mapping for character to their position index (1-based) char_positions = {} for i in range(n): for j in range(m): char_positions[grid[i][j]] = (i * m) + j + 1 # Sorting the indices to maximize the beauty sorted_indices = sorted(char_positions.values()) # Summing up the indices max_beauty = sum(sorted_indices) return max_beauty"},{"question":"A company has a series of projects that team members can work on. Each project requires a certain number of hours to complete. The team is trying to allocate hours effectively among the available projects in such a way that they maximize the number of completed projects. Given the number of projects and the hours required for each project, as well as the total hours available, write a function to determine the maximum number of projects that can be completed. Assume each project must be completed in full to count as completed. Input Format The first line contains a single integer P, the number of projects. The second line contains P integers: H(0), H(1), ..., H(P-1), where H(i) represents the hours required to complete the ith project. The third line contains a single integer T, the total hours available to allocate to projects. Output Format Print the maximum number of projects that can be completed with the available hours. Constraints 1 ≤ P ≤ 1000 1 ≤ H(i) ≤ 1000 1 ≤ T ≤ 10000 SAMPLE INPUT 5 8 4 3 5 2 10 SAMPLE OUTPUT 3 Explanation: The team can complete the projects requiring 2, 3, and 4 hours (2 + 3 + 4 = 9 hours), maximizing the number of completed projects (3).","solution":"def max_completed_projects(p, hours, total_hours): Determines the maximum number of projects that can be completed given the available total hours. Parameters: p (int): The number of projects. hours (list): A list of integers where each integer represents the hours required to complete a project. total_hours (int): The total hours available. Returns: int: The maximum number of projects that can be completed. # Sort the list of hours needed for each project in ascending order hours.sort() completed_projects = 0 remaining_hours = total_hours # Iterate through the sorted project hours for hour in hours: if hour <= remaining_hours: completed_projects += 1 remaining_hours -= hour else: break return completed_projects # Example usage: # P = 5 # hours = [8, 4, 3, 5, 2] # T = 10 # print(max_completed_projects(P, hours, T)) # Output should be 3"},{"question":"Sarah is organizing books on her shelf and wants to make the arrangement new and engaging. Each book has a thickness, and the shelf has a total capacity. Sarah wants to maximize the number of books she can place on the shelf without exceeding the shelf\'s capacity. Sarah has `n` books, and each book `i` has a thickness `ti`. The total capacity of the shelf is `C`. Your task is to help Sarah determine the maximum number of books she can place on the shelf without exceeding the total capacity. Input The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5) — the number of books Sarah has. The second line of the input contains `n` integers `ti` (1 ≤ ti ≤ 10^5) — the thickness of each book. The third line of the input contains an integer `C` (1 ≤ C ≤ 10^9) — the total capacity of the shelf. Output Print a single integer — the maximum number of books that Sarah can place on the shelf without exceeding the total capacity. Examples Input 5 1 2 3 4 5 10 Output 4 Input 4 5 5 5 5 15 Output 3 Input 6 1 1 1 1 1 1 3 Output 3","solution":"def max_books(n, thicknesses, C): Returns the maximum number of books that can be placed on a shelf without exceeding its total capacity. :param n: number of books :param thicknesses: list of thickness of each book :param C: total capacity of the shelf :return: maximum number of books thicknesses.sort() total_thickness = 0 count = 0 for thickness in thicknesses: if total_thickness + thickness <= C: total_thickness += thickness count += 1 else: break return count"},{"question":"You are given a grid consisting of n x n unit cells. Each cell can be either empty or contain a number ranging from 1 to n. You are also given a target number t (1 ≤ t ≤ n). Your task is to find the shortest Manhattan distance between two cells that both contain the target number t. The Manhattan distance between two cells (x1, y1) and (x2, y2) is calculated as |x1 - x2| + |y1 - y2|. Input: - The first line contains two integers n (1 ≤ n ≤ 100) and t (1 ≤ t ≤ n) — the size of the grid and the target number. - The next n lines each contain n integers representing the grid. Each of these integers will be either 0 or an integer between 1 and n. Output: - Print a single integer representing the shortest Manhattan distance between two cells containing the number t. If less than two cells contain the number t, output -1. Example Input 5 2 1 0 0 2 0 0 2 0 0 0 2 0 2 0 0 0 0 1 0 2 0 0 0 0 2 Output: 1 Explanation: Two adjacent cells (3, 3) and (2, 2) each contain the number 2 and their Manhattan distance is |3-2| + |3-2| = 1. This is the shortest distance between any two cells containing the number 2.","solution":"def shortest_manhattan_distance(n, t, grid): Finds the shortest Manhattan distance between two cells containing the target number t in the grid. Parameters: - n: int, size of the grid (n x n) - t: int, target number - grid: List[List[int]], the n x n grid Returns: - int, the shortest Manhattan distance between two cells containing t or -1 if there are less than two such cells positions = [(i, j) for i in range(n) for j in range(n) if grid[i][j] == t] if len(positions) < 2: return -1 min_distance = float(\'inf\') for i in range(len(positions) - 1): for j in range(i + 1, len(positions)): x1, y1 = positions[i] x2, y2 = positions[j] distance = abs(x1 - x2) + abs(y1 - y2) if distance < min_distance: min_distance = distance return min_distance"},{"question":"Barry is fascinated by palindromic numbers and enjoys finding them in various scenarios. A palindromic number reads the same forwards and backwards. Barry is interested in finding the largest palindromic number that can be obtained by multiplying two n-digit numbers. Your task is to help Barry identify this largest palindromic product. In other words, for a given positive integer n (1 ≤ n ≤ 4), compute the largest palindrome that can be obtained by multiplying two n-digit numbers. Input The input contains a single integer n, which denotes the number of digits in the multiplicands. Output Output the largest palindromic number that is a product of two n-digit numbers. Example Input 2 Output 9009 Note When n = 2, the largest palindromic number obtained by multiplying two 2-digit numbers is 9009. The two numbers are 91 and 99, as 91 * 99 = 9009.","solution":"def is_palindrome(number): Returns True if the given number is a palindrome, False otherwise. return str(number) == str(number)[::-1] def largest_palindromic_product(n): Returns the largest palindromic number that is a product of two n-digit numbers. max_digit = 10 ** n - 1 min_digit = 10 ** (n - 1) max_palindrome = 0 for i in range(max_digit, min_digit - 1, -1): for j in range(i, min_digit - 1, -1): product = i * j if product <= max_palindrome: break if is_palindrome(product): max_palindrome = product return max_palindrome"},{"question":"# Rearrange Letters Anagram Check A word `A` is only a partial anagram of another word `B` if all letters of `A` can be rearranged to be a subsequence of `B`. Your task is to determine if it is possible to transform the given word `A` into a subsequence of the word `B`. **Input** - The first line contains a single string `A` (1 ≤ |A| ≤ 100), the word that needs to be transformed. - The second line contains a single string `B` (1 ≤ |B| ≤ 100), the target word which might contain the partial anagram. **Output** - Print `YES` if `A` can be transformed into a subsequence of `B`, otherwise print `NO`. **Example** _Input_ ``` abc aabbcc ``` _Output_ ``` YES ``` _Input_ ``` abc acbd ``` _Output_ ``` NO ```","solution":"def can_transform_into_subsequence(A, B): Determines if A can be transformed into a subsequence of B. Parameters: A (str): The word that needs to be transformed. B (str): The target word which might contain the partial anagram. Returns: str: \'YES\' if A can be transformed into a subsequence of B, otherwise \'NO\'. a_idx = 0 b_idx = 0 while a_idx < len(A) and b_idx < len(B): if A[a_idx] == B[b_idx]: a_idx += 1 b_idx += 1 return \\"YES\\" if a_idx == len(A) else \\"NO\\""},{"question":"In a small village, there is a famous tree which grows both apples and bananas. The tree has a special property: it grows in linked pairs, where each pair contains one apple and one banana. The villagers love collecting the fruits, but they have a rule - they only collect pairs that grow in sequence. Your task is to help the villagers determine the maximum number of fruit pairs they can collect if they start collecting from the first pair in the sequence and cannot skip any pair once they start. The tree is represented as a string where each \'A\' represents an apple and each \'B\' represents a banana. A valid pair is formed by one \'A\' followed by one \'B\'. The villagers can collect pairs only if they occur consecutively in the given order. Input: The first line contains the number of test cases T (1 ≤ T ≤ 10). Each of the next T lines contains a non-empty string S consisting of characters \'A\' and \'B\'. The length of S does not exceed 10^6 characters. Output: For each test case, print a single integer - the maximum number of valid pairs (AB) that can be collected from the tree in sequence starting from the first pair. SAMPLE INPUT 3 ABAB AABBABAB BABA SAMPLE OUTPUT 2 3 1","solution":"def max_pairs(sequence): Calculate the maximum number of AB pairs that can be collected in sequence. :param sequence: A string of characters \'A\' and \'B\' :return: The maximum number of \'AB\' pairs count = 0 i = 0 length = len(sequence) while i < length - 1: if sequence[i] == \'A\' and sequence[i + 1] == \'B\': count += 1 i += 2 # Move to the next possible pair else: i += 1 # Move to the next character return count def max_pairs_from_test_cases(test_cases): Process multiple test cases. :param test_cases: List of strings where each string is a test case :return: List of results for each test case results = [] for case in test_cases: results.append(max_pairs(case)) return results"},{"question":"You are given a weighted, undirected graph with N nodes and M edges. Each edge has a positive weight. Your task is to find the Maximum Spanning Tree (MST) of this graph, which is a spanning tree with the maximum possible total edge weight. A spanning tree of a graph is a subgraph that includes all vertices of the graph, is connected, and contains no cycles. **Input** The first line contains two integers, N and M (1 ≤ N ≤ 1000, 1 ≤ M ≤ 10000) — the number of nodes and edges, respectively. The next M lines each contain three integers u, v, and w (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ w ≤ 10000), where u and v are the nodes connected by an edge, and w is the weight of this edge. **Output** Output the total weight of the Maximum Spanning Tree. **Example** Input 4 5 1 2 10 1 3 6 1 4 5 2 3 4 3 4 1 Output 24 **Note** In this example, the Maximum Spanning Tree will include edges with weights 10, 6, and 5, giving a total weight of 21.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def maximum_spanning_tree(N, M, edges): edges = sorted(edges, key=lambda item: item[2], reverse=True) parent = [] rank = [] for node in range(N): parent.append(node) rank.append(0) mst_weight = 0 for edge in edges: u, v, w = edge uroot = find(parent, u - 1) vroot = find(parent, v - 1) if uroot != vroot: mst_weight += w union(parent, rank, uroot, vroot) return mst_weight"},{"question":"You are given an array of integers. Your task is to determine whether there exists a sequence of indices i, j, k such that 1 ≤ i < j < k ≤ n and the elements at these indices form an increasing triplet (i.e., array[i] < array[j] < array[k]). Print \\"YES\\" if such a triplet exists, otherwise print \\"NO\\". Input The first line contains one integer n (1 ≤ n ≤ 3·105) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array. Output Print \\"YES\\" if there exist indices i, j, k such that 1 ≤ i < j < k ≤ n and array[i] < array[j] < array[k]. Otherwise, print \\"NO\\". Examples Input 5 1 2 3 4 5 Output YES Input 4 5 4 3 2 1 Output NO Note In the first example, the sequence (1, 2, 3) is one of the possible increasing triplets. In the second example, there is no increasing triplet since the array is sorted in descending order.","solution":"def increasing_triplet(n, array): Determines if there exists an increasing triplet in the array. if n < 3: return \\"NO\\" first = float(\'inf\') second = float(\'inf\') for num in array: if num <= first: first = num elif num <= second: second = num else: return \\"YES\\" return \\"NO\\""},{"question":"A library has recently implemented a new digital catalogue system to keep track of its book inventory and handle requests from users efficiently. As a software developer, you are tasked with developing a feature to manage book borrowing. Users can borrow books based on the availability of the books in the catalogue. Each user can borrow at most one book at a time, and the library wants to ensure that no user waits too long for their requested book if it is available. The system needs to process multiple user requests and determine the order in which books are handed over based on their request times. If multiple requests are received at the same time, the library will handle these requests in the order they appear in the list. You are given a list of book requests and their corresponding request times. Write a program to simulate the borrowing process and output the order in which the books are provided. INPUT: The first line of input contains an integer T, the number of test cases. Each test case consists of multiple lines. The first line of each test case contains an integer R, the number of requests. The following R lines contain two integers each, indicating the request time and the book ID respectively. OUTPUT: For each test case, output the sequence of book IDs in the order they are borrowed, each sequence in a new line. Constraints: 1 ≤ T ≤ 10 1 ≤ R ≤ 1000 1 ≤ request time ≤ 10000 1 ≤ book ID ≤ 1000 SAMPLE INPUT: 2 3 2 101 1 102 3 103 4 4 201 2 202 2 203 5 204 SAMPLE OUTPUT: 102 101 103 202 203 201 204","solution":"def process_borrow_requests(test_cases): results = [] for case in test_cases: R = case[0] requests = case[1] # Sort requests based on request time, then by order of input if request times are the same requests.sort(key=lambda x: x[0]) borrowed_books = [req[1] for req in requests] results.append(borrowed_books) return results def prepare_input_output(input_list): index = 0 T = input_list[index] index += 1 test_cases = [] for _ in range(T): R = input_list[index] index += 1 requests = [] for _ in range(R): request_time, book_id = input_list[index], input_list[index + 1] index += 2 requests.append((request_time, book_id)) test_cases.append((R, requests)) return test_cases # Example usage: input_list = [2, 3, 2, 101, 1, 102, 3, 103, 4, 4, 201, 2, 202, 2, 203, 5, 204] test_cases = prepare_input_output(input_list) output = process_borrow_requests(test_cases) for order in output: print(\\" \\".join(map(str, order)))"},{"question":"Given an array of integers, find out if the array is monotonic or not. An array is considered monotonic if it is either monotone increasing or monotone decreasing. An array A is monotone increasing if for all i <= j, A[i] <= A[j]. An array A is monotone decreasing if for all i <= j, A[i] >= A[j]. Input The first line of input contains an integer N, representing the number of elements in the array. The next line contains N integers, representing the elements of the array. Output Print \\"True\\" if the array is monotonic, otherwise print \\"False\\". Example Input: 5 1 2 2 3 4 Output: True Input: 5 6 5 4 4 7 Output: False","solution":"def is_monotonic(arr): Determines if the given array is monotonic (either increasing or decreasing). Parameters: arr (list): A list of integers Returns: bool: True if the array is monotonic, False otherwise increasing = decreasing = True for i in range(1, len(arr)): if arr[i] < arr[i - 1]: increasing = False if arr[i] > arr[i - 1]: decreasing = False return increasing or decreasing"},{"question":"At the amusement park, there is a new game called \\"Balloon Burst\\" where participants need to pop balloons aligned in a row. Each balloon has a different amount of air, denoted by a positive integer. To pop a balloon, you need to apply pressure that is greater than or equal to the air inside the balloon. When you pop a balloon, it bursts, and a simultaneous burst can pop adjacent balloons by applying the same amount of pressure. However, the air inside the adjacent balloons does not influence the pressure required for the current balloon. For each balloon, calculate the minimum pressure required to burst all the balloons in the row one by one. The pressure applied to burst the current balloon should be greater than or equal to the air inside it, but you should try to minimize the total pressure exerted for all the balloons combined to make the game easier. Your task is to find an optimal sequence of bursts that minimizes the total required pressure. Input The input is given in the following format: N a1 a2 ... aN The number of balloons N (1 ≤ N ≤ 1000) is given on the first line. The second line gives the amount of air ai (1 ≤ ai ≤ 1000) required to burst each balloon. Output Output the minimum value of the total pressure required to burst all balloons in one line. Examples Input 5 4 2 3 1 5 Output 15 Input 3 1 1 1 Output 5","solution":"def min_total_pressure(N, balloon_pressures): Given N is the number of balloons and balloon_pressures is a list of required pressures to burst each balloon, returns the minimum value of the total pressure required. # Sort balloon pressures in ascending order to minimize the cumulative pressure balloon_pressures.sort() total_pressure = 0 cumulative_pressure = 0 for pressure in balloon_pressures: cumulative_pressure += pressure total_pressure += cumulative_pressure return total_pressure"},{"question":"You are given a matrix of integers. Each cell in the matrix contains a number which represents the height of that cell. A cell is a valley if and only if it is not on the border of the matrix (i.e., it is not in the first or last row, nor in the first or last column), and it is strictly less than all of its 4 direct neighbors (up, down, left, and right). Write a program to count the number of valleys in a given matrix of size n x m. **Input** The input consists of: - An integer n (2 ≤ n ≤ 1000) representing the number of rows. - An integer m (2 ≤ m ≤ 1000) representing the number of columns. - n lines each containing m integers, where the j-th integer in the i-th line represents the height of the cell located at row i and column j (1 ≤ height ≤ 10^6). **Output** Output a single integer which is the number of valleys in the given matrix. **Example** Input: ``` 4 5 9 8 5 8 9 7 6 2 6 7 4 3 1 3 4 8 7 5 7 8 ``` Output: ``` 1 ``` The matrix of heights looks like: ``` 9 8 5 8 9 7 6 2 6 7 4 3 1 3 4 8 7 5 7 8 ``` In this matrix, only the cell with height 1 is a valley.","solution":"def count_valleys(matrix): Counts the number of valleys in a given matrix. Parameters: - matrix: List of List of integers where each cell represents the height of that cell. Returns: - int: The number of valley cells. n = len(matrix) m = len(matrix[0]) valleys = 0 for i in range(1, n-1): for j in range(1, m-1): if (matrix[i][j] < matrix[i-1][j] and matrix[i][j] < matrix[i+1][j] and matrix[i][j] < matrix[i][j-1] and matrix[i][j] < matrix[i][j+1]): valleys += 1 return valleys # Example matrix from the problem statement matrix = [ [9, 8, 5, 8, 9], [7, 6, 2, 6, 7], [4, 3, 1, 3, 4], [8, 7, 5, 7, 8] ] print(count_valleys(matrix)) # Output: 1"},{"question":"You\'ve been provided with an array of n integers a = [a1, a2, ..., an]. You need to perform q queries on this array. Each query consists of two integers li and ri (1 ≤ li ≤ ri ≤ n) and requires you to determine the maximum common divisor (MCD) of the subarray a[li...ri]. The MCD of a subarray is defined as the greatest number that divides all the elements of that subarray. For example, the MCD of the subarray [2, 4, 6] is 2. Input The first line contains an integer n (1 ≤ n ≤ 5000) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). The third line contains a single integer q (1 ≤ q ≤ 1000) — the number of queries. The next q lines contain the queries, each consisting of two space-separated integers li and ri (1 ≤ li ≤ ri ≤ n) describing a range in the array. Output Print q integers — the answers to the queries. Print the answers in the order in which the queries are given in the input. Separate the printed numbers by whitespaces. Examples Input 6 12 15 21 6 18 9 3 1 3 2 5 4 6 Output 3 3 3 Explanation 1. For the subarray [12, 15, 21], the MCD is 3. 2. For the subarray [15, 21, 6, 18], the MCD is 3. 3. For the subarray [6, 18, 9], the MCD is 3.","solution":"from math import gcd from functools import reduce def max_common_divisor_subarray(n, array, queries): def calculate_mcd(subarray): return reduce(gcd, subarray) result = [] for li, ri in queries: subarray = array[li-1:ri] result.append(calculate_mcd(subarray)) return result"},{"question":"Given a list of integers, write a function to determine the number of subarrays that have a sum equal to a given target. Input - The first line contains an integer array `nums`. - The second line contains an integer `target`. Output - Output a single integer representing the number of subarrays whose sum equals to the target. Constraints - 1 ≤ length of nums ≤ 30,000 - -10^5 ≤ nums[i] ≤ 10^5 - -10^9 ≤ target ≤ 10^9 SAMPLE INPUT ``` [1, 1, 1] 2 ``` SAMPLE OUTPUT ``` 2 ``` Explanation The subarrays [1, 1] and [1, 1] both sum up to 2.","solution":"def count_subarrays_with_sum(nums, target): Returns the count of subarrays with sum equal to target. count = 0 prefix_sum = 0 prefix_sum_count = {0: 1} for num in nums: prefix_sum += num if prefix_sum - target in prefix_sum_count: count += prefix_sum_count[prefix_sum - target] if prefix_sum in prefix_sum_count: prefix_sum_count[prefix_sum] += 1 else: prefix_sum_count[prefix_sum] = 1 return count"},{"question":"Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence. You must write an algorithm that runs in O(n) time. Input - The input consists of a single list `nums` with the length not exceeding 10^4. - Each element in `nums` is a 32-bit integer. Output - Output one integer that represents the length of the longest consecutive elements sequence. Example Input: ``` [100, 4, 200, 1, 3, 2] ``` Output: ``` 4 ``` Explanation: The longest consecutive elements sequence is `[1, 2, 3, 4]`. Therefore, the length is `4`.","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence in the unsorted list of integers nums. # Using a set to store the unique elements from the input list num_set = set(nums) longest_streak = 0 # Iterate over each element in the set for num in num_set: # Check if it\'s the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 # Count the length of the sequence starting from current_num while current_num + 1 in num_set: current_num += 1 current_streak += 1 # Update the longest_streak if current_streak is longer longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"**Cargo Loading Optimization** You are given a task to load a cargo ship with a set of containers. Each container has a certain weight and a certain value associated with it. The captain wants to maximize the total value of the containers loaded onto the ship, but the total weight of the loaded containers must not exceed the ship\'s maximum weight capacity. Your task is to determine the maximum total value of containers that can be loaded onto the ship without exceeding the weight capacity. Input The input consists of multiple datasets, each in the following format. ``` n W w1 v1 w2 v2 ... wn vn ``` A dataset consists of `n + 1` lines. The first line contains two integers, `n` and `W`, where `n` is the number of containers (1 ≤ n ≤ 1000) and `W` is the ship\'s maximum weight capacity (1 ≤ W ≤ 2000000). Each of the next `n` lines describes a container with two integers: `wi` (1 ≤ wi ≤ 1000000) representing the weight of the `i-th` container, and `vi` (0 ≤ vi ≤ 10000) representing the value of the `i-th` container. The end of the input is indicated by a line containing two zeros. The sum of all n\'s across all datasets does not exceed 50000. Output For each dataset, output the maximum total value that can be achieved within the weight capacity. If no containers can be loaded without exceeding the weight capacity, output `0`. Sample Input ``` 3 50 10 60 20 100 30 120 4 10 5 50 4 40 6 30 3 0 2 10 15 20 25 15 0 0 ``` Output for the Sample Input ``` 220 90 0 ``` Example Input ``` 3 50 10 60 20 100 30 120 4 10 5 50 4 40 6 30 3 0 2 10 15 20 25 15 0 0 ``` Output ``` 220 90 0 ```","solution":"def max_cargo_value(datasets): Function to calculate the maximum total value of containers that can be loaded onto the ship without exceeding the weight capacity. results = [] for dataset in datasets: n, W = dataset[0] if n == 0 and W == 0: continue weights = [] values = [] for i in range(1, n+1): wi, vi = dataset[i] weights.append(wi) values.append(vi) dp = [0] * (W + 1) for i in range(n): for w in range(W, weights[i] - 1, -1): if w >= weights[i]: dp[w] = max(dp[w], dp[w - weights[i]] + values[i]) results.append(dp[W]) return results"},{"question":"You are given a string s consisting of lowercase English letters. Your goal is to transform the string into another string t that contains only the letter \'a\'. The transformation is performed by selecting any substring of s and replacing all characters in that substring with \'a\'. You need to find the minimum number of such operations required to achieve the goal. Input The single line contains a string s (1 ≤ |s| ≤ 100,000). Output Print one integer — the minimum number of operations required to turn s into a string that contains only the letter \'a\'. Examples Input bba Output 2 Input abacaba Output 3","solution":"def min_operations_to_transform(s): Returns the minimum number of operations required to turn the string s into a string that contains only the letter \'a\' by replacing any substring with \'a\'. # Number of non-\'a\' characters in the string is the minimum number of operations needed return sum(1 for char in s if char != \'a\')"},{"question":"You are given a river, described as a string of length n consisting of characters \'L\' (land) and \'W\' (water). A fisherman sits at the start of the river (position 1) and wants to cross to the end of the river (position n). The fisherman can only cross from land to land or from the start to the first land and from the last land to the end of the river (position n). In addition, the fisherman can skip at most k water areas. Your task is to determine if the fisherman can cross the river with these conditions. Input The input consists of two lines: The first line contains two integers n (1 ≤ n ≤ 100) and k (0 ≤ k ≤ 20) - the length of the river and the maximum number of water segments the fisherman can skip. The second line contains a string of length n consisting of characters \'L\' and \'W\'. Output Print \\"YES\\" if the fisherman can cross the river meeting the conditions, otherwise print \\"NO\\". Examples Input 7 1 LWLWLWL Output YES Input 5 0 LWWLW Output NO Input 10 3 LWWWLWLWLW Output YES","solution":"def can_cross_river(n, k, river): Determines if the fisherman can cross the river with the given constraints. Parameters: n (int): The length of the river string. k (int): The maximum number of water segments that can be skipped. river (str): The string representation of the river. Returns: str: \'YES\' if the fisherman can cross the river, \'NO\' otherwise. water_segment_count = 0 land_segments = [False] * n # Mark positions that are land for i in range(n): if river[i] == \'L\': land_segments[i] = True # Fisherman can start from any \'L\' and move to any consecutive # \'L\' while skipping up to k \'W\'. started = False skipped = 0 for i in range(n): if land_segments[i]: started = True skipped = 0 elif started: skipped += 1 if skipped > k: started = False if started: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a collection of recipes and their respective ingredients. You have a set of available ingredients and need to determine which recipes you can prepare using only the ingredients you have. Each recipe lists its ingredients as a set of strings, and the available ingredients are also provided as a set of strings. Write a function that takes in two inputs: a list of recipes where each recipe is represented as a dictionary with a single key-value pair (the key is the recipe name and the value is a list of ingredients), and a list of available ingredients. Your function should return a list of recipe names that can be prepared using only the available ingredients. Input - A list of dictionaries, where each dictionary represents a recipe with its name as the key and a list of ingredients (strings) as the value. There will be at most 1000 recipes. - A list of strings representing the available ingredients. There will be at most 100 ingredients. Output - A list of recipe names (strings) that can be prepared using only the available ingredients. Example Input recipes = [ {\\"Pancakes\\": [\\"eggs\\", \\"flour\\", \\"milk\\", \\"sugar\\"]}, {\\"Omelette\\": [\\"eggs\\", \\"milk\\", \\"cheese\\"]}, {\\"Salad\\": [\\"lettuce\\", \\"tomato\\", \\"cucumber\\", \\"olive oil\\"]} ] available_ingredients = [\\"eggs\\", \\"flour\\", \\"milk\\", \\"sugar\\", \\"lettuce\\", \\"tomato\\"] Output [\\"Pancakes\\", \\"Salad\\"] Explanation - \\"Pancakes\\" can be made because all required ingredients are available. - \\"Omelette\\" can\'t be made because you don\'t have cheese. - \\"Salad\\" can be made because all required ingredients are available. Function signature: ```python def find_possible_recipes(recipes: List[Dict[str, List[str]]], available_ingredients: List[str]) -> List[str]: ```","solution":"from typing import List, Dict def find_possible_recipes(recipes: List[Dict[str, List[str]]], available_ingredients: List[str]) -> List[str]: available_set = set(available_ingredients) possible_recipes = [] for recipe in recipes: for name, ingredients in recipe.items(): if all(ingredient in available_set for ingredient in ingredients): possible_recipes.append(name) return possible_recipes"},{"question":"In the mystical land of Algoria, the currency is called Algoriums. Each day, a record is made of how much a citizen of Algoria spent in Algoriums. You are given a list of daily expenses and you need to determine the maximum sum of any contiguous subarray of these expenses. This is known as the \\"maximum subarray problem.\\" The task is to write a function that finds the maximum sum of a contiguous subarray within a one-dimensional array of expenses. Input The first line contains one integer t (1 ≤ t ≤ 100), representing the number of test cases. For each test case, the first line contains one integer n (1 ≤ n ≤ 105), representing the number of days. The second line contains n integer numbers e1, e2, ..., en ( - 104 ≤ ei ≤ 104), which are the expenses of the citizen on the ith day. Output For each test case, output the maximum sum of a contiguous subarray. Example Input 2 5 1 -2 3 4 -5 4 -1 -2 -3 -4 Output 7 -1 Note In the first example, the maximum sum is achieved by the subarray [3, 4], which sums to 7. In the second example, since all numbers are negative, the maximum sum is the largest single element, -1.","solution":"def max_subarray_sum(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] expenses = test_cases[i][1] # Implementing Kadane\'s algorithm max_so_far = expenses[0] current_max = expenses[0] for j in range(1, n): current_max = max(expenses[j], current_max + expenses[j]) max_so_far = max(max_so_far, current_max) results.append(max_so_far) return results"},{"question":"During a treasure hunt, you are given a long narrow grid, where some cells might have obstacles. Your goal is to help an adventurer find the number of ways to reach the end of the grid from the start. The adventurer can only move right or down. Problem Statement You are presented with a grid with `m` rows and `n` columns. Some cells of the grid contain obstacles represented by \'1\', while others are free paths represented by \'0\'. The adventurer starts at the top-left corner (0, 0) and aims to reach the bottom-right corner (m-1, n-1). Determine the number of unique paths the adventurer can take to reach the destination, avoiding obstacles. # Input - The first line contains an integer `T`, the number of test cases. - For each test case: - The first line contains two integers `m` and `n` representing the number of rows and columns of the grid, respectively. - The next `m` lines each contain `n` integers, either \'0\' or \'1\', representing the grid. # Output - For each test case, output an integer representing the number of unique paths to reach the destination. # Constraints - 1 <= T <= 50 - 1 <= m, n <= 100 - The grid will always contain at least one valid path from the starting cell. # Example Input: 2 3 3 0 0 0 0 1 0 0 0 0 2 2 0 1 0 0 Output: 2 1 # Explanation - For the first test case, the 3x3 grid has two unique paths: 1. Right → Right → Down → Down 2. Down → Down → Right → Right - For the second test case, the only path is Down → Right.","solution":"def unique_paths_with_obstacles(grid): if grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[-1][-1] def num_ways_to_reach_end(T, test_cases): results = [] for case in test_cases: m, n = case[\'m\'], case[\'n\'] grid = case[\'grid\'] results.append(unique_paths_with_obstacles(grid)) return results"},{"question":"A common task in data manipulation and transformation is \\"running total\\" or \\"cumulative sum.\\" This encompasses dynamically updating sums as new data points are added. Let us explore the idea of implementing such functionality. You are given an array of integers, and you need to design a program that calculates the cumulative sum of the array elements. The cumulative sum is defined as a new array where each element at index `i` is the sum of the array elements from index `0` to index `i`. For example, given the array `[1, 2, 3, 4]`, the cumulative sum array would be `[1, 3, 6, 10]`. Task: Write a function that takes an array of integers and returns the cumulative sum array. Input: - The first line of the input contains an integer `n` (1 ≤ n ≤ 1000) — the size of the array. - The second line contains `n` space-separated integers representing the array elements. Each element is an integer `ai` (−10^4 ≤ ai ≤ 10^4). Output: - Output a single line containing `n` space-separated integers representing the cumulative sum array. Examples: Input: 4 1 2 3 4 Output: 1 3 6 10 Input: 5 -1 -1 -1 -1 -1 Output: -1 -2 -3 -4 -5 Input: 3 5 -2 7 Output: 5 3 10 Note: In the first example, the cumulative sum starts with the first element, then adds the second element to the first, and so on. Hence the cumulative sums are `[1, 3, 6, 10]`.","solution":"def cumulative_sum(arr): Returns the cumulative sum array for the given array of integers. cumulative = [] current_sum = 0 for num in arr: current_sum += num cumulative.append(current_sum) return cumulative"},{"question":"You are given a linked list of integers. Your task is to find and return the middle element of the linked list. If the list has an even number of elements, return the second of the two middle elements. Constraints * The size of the linked list is at least 1 and at most 10000. * Each element in the linked list is an integer between -10000 and 10000. Input Input is given from Standard Input in the following format: The first line contains a single integer n (1 ≤ n ≤ 10000), the number of elements in the linked list. The second line contains n space-separated integers representing the elements of the linked list. Output Print a single integer, which is the middle element of the linked list. If the list has an even number of elements, print the second of the two middle elements. Examples Input 5 1 2 3 4 5 Output 3 Input 6 10 20 30 40 50 60 Output 40","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def middle_of_linked_list(head: ListNode) -> int: Returns the middle element of a linked list. If the list has an even number of elements, returns the second of the two middle elements. slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow.val def create_linked_list_from_list(elements: list) -> ListNode: Helper function to create a linked list from a list of elements. if not elements: return None head = ListNode(elements[0]) current = head for element in elements[1:]: current.next = ListNode(element) current = current.next return head def find_middle_element(n: int, elements: list) -> int: Entry function to find the middle element from a list of integers and the number of elements n. head = create_linked_list_from_list(elements) return middle_of_linked_list(head)"},{"question":"Sophie loves playing with strings. She came up with a game where she starts with a string consisting of lowercase English letters. In each move, Sophie can choose any two adjacent characters in the string and remove them if they are identical. The game continues until no more moves can be made. Sophie wants to know the length of the string after she makes all possible moves. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The next t lines each contain a string s (1 ≤ |s| ≤ 100,000) consisting of lowercase English letters. Output For each test case, print a single integer — the length of the string after all possible moves. Examples Input 3 abbac aabb abc Output 1 0 3","solution":"def remaining_string_length(test_cases): results = [] for s in test_cases: stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) results.append(len(stack)) return results"},{"question":"Alice has a treehouse in her backyard where children from the neighborhood gather to play. The treehouse is supported by thick branches that form a tree structure. There are some unique games that children can play, one of which requires navigating between the different nodes (branches) of the tree. Given a tree with n nodes numbered from 1 to n, and a list of edges denoting the connections between the nodes, your task is to determine the maximum path length (number of edges) in the tree. In other words, you need to determine the diameter of the tree. Input The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. For each test case: - The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of nodes in the tree. - The next n-1 lines contain two integers u and v (1 ≤ u, v ≤ n) describing an edge between node u and node v. It is guaranteed that sum of n over all test cases doesn\'t exceed 10^5. Output For each test case, print a single integer — the diameter of the tree. Example Input 3 3 1 2 2 3 4 1 2 2 3 3 4 5 1 2 1 3 2 4 2 5 Output 2 3 3 Explanation In the first test case, the longest path is from node 1 to node 3. The number of edges in this path is 2. In the second test case, the longest path is from node 1 to node 4. The number of edges in this path is 3. In the third test case, the longest path is from node 3 to node 5 through nodes 1 and 2. The number of edges in this path is 3.","solution":"from collections import deque, defaultdict def find_tree_diameter(n, edges): def bfs(start): distances = [-1] * (n + 1) q = deque([start]) distances[start] = 0 farthest_node = start max_distance = 0 while q: node = q.popleft() for neighbor in tree[node]: if distances[neighbor] == -1: distances[neighbor] = distances[node] + 1 q.append(neighbor) if distances[neighbor] > max_distance: max_distance = distances[neighbor] farthest_node = neighbor return farthest_node, max_distance # Building the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Running the first BFS to find one endpoint of the longest path farthest_node_from_start, _ = bfs(1) # Running the second BFS from the found endpoint to find the diameter _, diameter = bfs(farthest_node_from_start) return diameter def solve(t, test_cases): results = [] for i in range(t): n, edges = test_cases[i] results.append(find_tree_diameter(n, edges)) return results"},{"question":"You are given a list of words. Your task is to compound these words to generate the longest possible word that contains all the given words as subsequences. A subsequence of a string is a new string generated from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. You can rearrange the words in any order to achieve this. Input The input consists of: - An integer n (1 ≤ n ≤ 100), the number of words. - n strings, each formed by lowercase English letters, with lengths between 1 and 100 inclusive. Output Output a single string which is the longest possible word that contains all the given words as subsequences. If there are multiple solutions, output any one of them. Example Input 3 abc bcd ace Output abcde Input 4 xyz xy yz z Output xyz Note In the first example, \\"abcde\\" contains \\"abc\\", \\"bcd\\", and \\"ace\\" as subsequences. In the second example, \\"xyz\\" contains \\"xyz\\", \\"xy\\", \\"yz\\", and \\"z\\" as subsequences. Explanation To solve the problem, you need to combine given words in such a way that keeps their relative order to form the longest possible word. You can rearrange the given words to maximize overlaps and form the desired result.","solution":"def find_longest_compound_word(words): Given a list of words, rearrange and concatenate them to form the longest possible word that contains all the given words as subsequences. # To find the longest compound word we can use all letters of all words given # corner case for empty string if not words: return \\"\\" # We can start by merging the words in a greedy manner merged_word = words[0] for word in words[1:]: merged_word = merge_two_words(merged_word, word) return merged_word def merge_two_words(word1, word2): Merges two words in a way that the result contains both as subsequences. i, j = 0, 0 l1, l2 = len(word1), len(word2) result = [] while i < l1 and j < l2: if word1[i] == word2[j]: result.append(word1[i]) i += 1 j += 1 else: result.append(word1[i]) i += 1 # Add remaining characters of word1 if i < l1: result.extend(word1[i:]) # Add remaining characters of word2 if j < l2: result.extend(word2[j:]) return \\"\\".join(result)"},{"question":"A delivery drone company operates in a city with n intersections connected by two-directional streets. Each street has a certain distance. A delivery station is placed at some intersection, and the drones need to travel from the station to various delivery locations in the city. However, due to traffic regulations, they must follow specific rules to reach their destinations using the shortest path possible. The company has provided you a list of distances for all pairs of intersections. Your task is to compute the shortest distance needed for a drone to deliver a package from its starting intersection (the delivery station) to all other intersections. Input The first line contains an integer n (2 ≤ n ≤ 100) — the number of intersections. The next n lines contain n integers each, where the j-th integer in the i-th line is the distance between intersection i and intersection j (0 ≤ distance ≤ 10^4). If there is no direct street between two intersections, the distance is represented as a very large number (for instance, 100000). The following line contains a single integer s (1 ≤ s ≤ n) — the starting intersection. Output Output n integers, where the i-th integer is the shortest distance from intersection s to intersection i for all i (1 ≤ i ≤ n). If an intersection is unreachable from the starting intersection, output -1 for that intersection. Example Input 4 0 1 4 100000 1 0 2 6 4 2 0 3 100000 6 3 0 1 Output 0 1 3 6 Explanation The shortest distance from intersection 1 to intersection 2 is 1. The shortest distance from intersection 1 to intersection 3 is 1 + 2 = 3. The shortest distance from intersection 1 to intersection 4 is 1 + 2 + 3 = 6.","solution":"import heapq def dijkstra(n, distances, start): start -= 1 # To convert 1-based index to 0-based index visited = [False] * n min_distances = [float(\'inf\')] * n min_distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if visited[current_node]: continue visited[current_node] = True for neighbor in range(n): if visited[neighbor]: continue distance = distances[current_node][neighbor] if distance == 100000: continue new_distance = current_distance + distance if new_distance < min_distances[neighbor]: min_distances[neighbor] = new_distance heapq.heappush(priority_queue, (new_distance, neighbor)) result = [] for distance in min_distances: if distance == float(\'inf\'): result.append(-1) else: result.append(distance) return result"},{"question":"Mira is fascinated by symmetrical strings. She finds strings that are palindromes particularly delightful. A palindrome is a string that reads the same backwards as forwards. Mira has strings made up of lowercase English letters and wants to convert them into palindromes with the least effort. Maya can change any letter in the string to any other letter, and each change costs her 1 unit of energy. Your task is to help Mira determine the minimum energy required to convert a given string into a palindrome. Input: First line contains an integer T, denoting the number of test cases. Each test case consists of a single line containing a string S. Output: For each test case, output a single integer representing the minimum energy required to convert the string into a palindrome. Constraints: 1 ≤ T ≤ 50 1 ≤ |S| ≤ 1000 SAMPLE INPUT 3 abcd aab racecar SAMPLE OUTPUT 2 1 0","solution":"def min_energy_to_palindrome(S): Returns the minimum energy required to convert the string S into a palindrome. n = len(S) energy = 0 for i in range(n // 2): if S[i] != S[-(i + 1)]: energy += 1 return energy def process_test_cases(T, test_cases): Processes multiple test cases and returns the results as a list of integers. results = [] for S in test_cases: results.append(min_energy_to_palindrome(S)) return results"},{"question":"George is an avid collector of rare coins. He has a collection of n coins, each of which has an integer value between 1 and 1000. Recently, George decided to display his coins in a row, sorted in non-decreasing order by their values. However, as a collector, he is also interested in the aesthetic appeal of the display. He defines the aesthetic appeal of the display by how close the values of adjacent coins are. Specifically, for a given display, the aesthetic appeal is the minimum difference between the values of any two adjacent coins. George wants the coins to be displayed so that the aesthetic appeal is as high as possible. Your task is to help George find this maximum aesthetic appeal for his display. Input The first line contains one integer t — the number of test cases to solve (1 ≤ t ≤ 100). Then t test cases follow. The first line of each test case contains one integer n (2 ≤ n ≤ 100) — the number of coins in George\'s collection. The second line contains n integers ai (1 ≤ ai ≤ 1000) — the values of the coins. Output For each test case, print one integer — the maximum aesthetic appeal for the given display of coins. Example Input 3 5 1 3 6 7 9 4 2 2 2 2 3 5 15 25 Output 2 0 10 Note The first example consists of 3 tests: 1. In the first test case, the sorted values are [1, 3, 6, 7, 9]. The smallest difference between adjacent coins is 6-3=3 and 7-6=1 and 3-1=2, hence the maximum aesthetic appeal is 2. 2. In the second test case, all coins have the same value, so the maximum aesthetic appeal is 0. 3. In the third test case, the sorted values are [5, 15, 25]. The smallest difference between adjacent coins is 15-5=10 and 25-15=10, hence the maximum aesthetic appeal is 10.","solution":"def maximum_aesthetic_appeal(t, test_cases): Returns the maximum aesthetic appeal for each test case. Parameters: t (int): The number of test cases. test_cases (list of tuple): Each tuple contains n (int) followed by a list of n integers representing the coin values. Returns: list of int: The maximum aesthetic appeal for each test case. results = [] for case in test_cases: n, coins = case coins.sort() min_diff = float(\'inf\') for i in range(1, n): min_diff = min(min_diff, coins[i] - coins[i - 1]) results.append(min_diff) return results"},{"question":"Write a function that simulates a simple ordering system for a cafe. The function should take a list of strings representing orders and a dictionary representing the prices of each item on the menu and then return the total cost of the orders. If an item in the order list is not found in the menu dictionary, it should be ignored and not included in the total cost. Function Signature: ```python def calculate_total(orders: List[str], menu: Dict[str, float]) -> float: ``` Input: - orders: a list of strings where each string represents an ordered item. - menu: a dictionary where keys are strings representing item names and values are floats representing the price of each item. Output: - Return the total cost of the orders as a float rounded to two decimal places. Example: ```python orders = [\\"coffee\\", \\"tea\\", \\"sandwich\\", \\"cookie\\"] menu = { \\"coffee\\": 2.50, \\"tea\\": 1.75, \\"sandwich\\": 5.00, \\"cookie\\": 1.25 } calculate_total(orders, menu) ``` Expected Output (for the above example): ``` 10.50 ```","solution":"from typing import List, Dict def calculate_total(orders: List[str], menu: Dict[str, float]) -> float: Calculate the total cost of the orders based on the menu. Args: orders (List[str]): A list of strings representing ordered items. menu (Dict[str, float]): A dictionary where keys are item names and values are the prices. Returns: float: The total cost of the orders rounded to two decimal places. total = sum(menu[item] for item in orders if item in menu) return round(total, 2)"},{"question":"Given an array of integers, find the maximum sum of a contiguous subarray with at least one number. This problem is a variation of the well-known \\"Kadane\'s Algorithm,\\" but with a modified condition that the subarray must include the first or the last element of the array. Input Format: - The first line of the input contains a single integer ( n ) (1 ≤ ( n ) ≤ 10^5) — the size of the array. - The second line of the input contains ( n ) integers ( a_1, a_2, ..., a_n ) (−10^4 ≤ ( a_i ) ≤ 10^4) — the elements of the array. Output Format: - Print a single integer representing the maximum sum of a contiguous subarray that must include the first or the last element of the array. Constraints: - 1 ≤ ( n ) ≤ 10^5 - −10^4 ≤ ( a_i ) ≤ 10^4 SAMPLE INPUT: 5 1 2 3 -2 5 SAMPLE OUTPUT: 9 Explanation: One of the possible valid subarrays could be the whole array itself since it includes both the first and last elements. The sum of this subarray [1, 2, 3, -2, 5] is 9, which is the maximum sum possible under the given constraints.","solution":"def max_sum_with_constraints(n, arr): Returns the maximum sum of a contiguous subarray that includes the first or the last element of the array. if n == 1: return arr[0] max_ending_here = arr[0] max_subarray_first_end = arr[0] for i in range(1, n): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_subarray_first_end = max(max_subarray_first_end, max_ending_here) max_ending_here = arr[-1] max_subarray_last_start = arr[-1] for i in range(n-2, -1, -1): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_subarray_last_start = max(max_subarray_last_start, max_ending_here) return max(max_subarray_first_end, max_subarray_last_start)"},{"question":"CoderBERT is participating in a robotics competition where he has to program his robot to navigate a grid without colliding into obstacles. The grid is represented as a 2D array of size m x n. The robot starts at the top-left corner of the grid (0,0) and can move either right or down at any step. The goal is to reach the bottom-right corner (m-1, n-1). However, the grid contains obstacles placed at certain cells, making it impossible for the robot to pass through those cells. An obstacle is represented by the value 1, while an open cell is represented by the value 0. Determine how many unique paths are available for the robot to reach the bottom-right corner of the grid from the top-left corner, considering the obstacles. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100) - the number of rows and columns of the grid. The next m lines contain n integers each, representing the grid where 0 indicates an open cell and 1 indicates an obstacle. Output Output a single integer, representing the number of unique paths from the top-left corner to the bottom-right corner, avoiding obstacles. If there is no such path, output 0. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 1 0 0 0 0 0 Output 0 Input 2 2 0 0 0 0 Output 2 Note In the first example, there are two paths for the robot to reach the bottom-right corner: (0,0) → (0,1) → (0,2) → (1,2) → (2,2) and (0,0) → (1,0) → (2,0) → (2,1) → (2,2). In the second example, there is no possible path for the robot to reach the bottom-right corner due to obstacles. In the third example, the robot can either move right then down, or down then right, making 2 unique paths.","solution":"def unique_paths_with_obstacles(grid): m, n = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Alice has recently learned about the Fibonacci sequence and finds it quite fascinating. She discovered that the Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Alice came up with an interesting twist for her coding challenge. Instead of dealing with numbers, she wants to generate an \\"F-String\\" sequence, which is created as follows: - F(0) = \\"0\\" - F(1) = \\"1\\" - F(n) = F(n-1) + F(n-2) for n > 1 (string concatenation) Given a positive integer N, Alice wants to find the last character of F(N). Can you help her? Input: First line contains T, the number of test cases to follow. (1 ≤ T ≤ 100) Each test case contains a single integer N (0 ≤ N ≤ 30). Output: For each test case, output the last character of the F-string F(N). SAMPLE INPUT 3 0 1 5 SAMPLE OUTPUT 0 1 1 Explanation **Sample Input** 3 0 1 5 **Output:** 0 1 1 **Explanation** When N=0, the F-string sequence is \\"0\\" and the last character is \'0\'. When N=1, the F-string sequence is \\"1\\" and the last character is \'1\'. When N=5, the F-string sequence is \\"011010\\" and the last character is \'1\'.","solution":"def fibonacci_string(n): Given n, returns the F-string sequence up to F(n) and finds the last character. if n == 0: return \\"0\\" elif n == 1: return \\"1\\" f0, f1 = \\"0\\", \\"1\\" for _ in range(2, n + 1): fn = f1 + f0 f0, f1 = f1, fn return fn[-1] def get_last_character_of_fstrings(t, test_cases): Given number of test cases t and list of test cases, Returns the list with the last character of the Fibonacci strings for each case. results = [] for n in test_cases: results.append(fibonacci_string(n)) return results"},{"question":"You are given an integer array nums and an integer k. You need to determine whether the array contains two distinct indices i and j such that abs(i - j) <= k and nums[i] == nums[j]. Input - The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. - For each test case: - The first line contains two integers n (1 ≤ n ≤ 10^4) and k (1 ≤ k ≤ 10^4) — the length of the array and the maximum allowed absolute difference. - The second line contains n integers separated by spaces, which represent the array nums. Output For each test case, print \\"YES\\" if there are two distinct indices i and j such that abs(i - j) <= k and nums[i] == nums[j]. Otherwise, print \\"NO\\". Example Input: 3 6 2 1 2 3 1 2 3 6 1 1 0 1 1 0 1 5 3 1 2 3 1 5 Output: YES YES YES Explanation - In the first test case, nums[0] == nums[3] and abs(0 - 3) = 3 <= 2. - In the second test case, nums[0] == nums[2] and abs(0 - 2) = 2 <= 1. - In the third test case, nums[0] == nums[3] and abs(0 - 3) = 3 <= 3.","solution":"def contains_nearby_duplicate(nums, k): Function to determine if the array contains two indices i and j with nums[i] == nums[j] and abs(i - j) <= k. index_map = {} for i, num in enumerate(nums): if num in index_map and i - index_map[num] <= k: return \\"YES\\" index_map[num] = i return \\"NO\\" def check_test_cases(test_cases): results = [] for n, k, nums in test_cases: result = contains_nearby_duplicate(nums, k) results.append(result) return results"},{"question":"You are given a list of integers which may contain both positive and negative numbers, as well as duplicates. You need to write a function that returns the length of the longest contiguous subarray that contains an equal number of positive and negative integers. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (−109 ≤ ai ≤ 109) — the elements of the array. Output Print a single integer — the length of the longest contiguous subarray containing an equal number of positive and negative integers. Examples Input 10 1 -1 2 -2 3 -3 4 -4 5 -5 Output 10 Input 5 1 -1 2 3 -3 Output 4 Input 6 -1 -1 1 1 1 -1 Output 6 Input 5 1 2 3 4 5 Output 0 Explanation of the examples: - In the first example, the entire array has an equal number of positive and negative integers, so the output is 10. - In the second example, the longest subarray that meets the condition is [1, -1, 2, 3, -3], which has a length of 4. - In the third example, the entire array has 3 +1s and 3 -1s, so the output is 6. - In the fourth example, there is no subarray that contains an equal number of positive and negative integers, so the output is 0.","solution":"def longest_equal_positive_negative_subarray(arr): Returns the length of the longest contiguous subarray containing an equal number of positive and negative integers. max_len = 0 sum_index_map = {0: -1} sum_val = 0 for i, value in enumerate(arr): if value > 0: sum_val += 1 elif value < 0: sum_val -= 1 if sum_val in sum_index_map: max_len = max(max_len, i - sum_index_map[sum_val]) else: sum_index_map[sum_val] = i return max_len"},{"question":"You are given a list of integers representing the arrival times of buses at a bus stop. Each integer denotes the number of minutes past midnight when a bus arrives. You need to determine the minimum interval between any two bus arrivals. Constraints * 2 leq N leq 10^5 * 0 leq Arrival Time leq 1439 (total minutes in a day) Input Input is given from Standard Input in the following format: N Arrival_1 Arrival_2 ... Arrival_N Output Print the minimum interval (in minutes) between any two bus arrivals. Examples Input 5 100 200 300 400 500 Output 100 Input 4 1 1234 678 1235 Output 1 Input 3 0 720 1439 Output 1","solution":"def min_bus_interval(arrivals): Determine the minimum interval (in minutes) between any two bus arrivals. :param arrivals: List of integers representing arrival times in minutes past midnight. :return: Minimum interval in minutes between any two bus arrivals. # Sort the arrival times arrivals.sort() # Initialize the minimum interval to a large number min_interval = float(\'inf\') # Compare each consecutive pair in the sorted list for i in range(1, len(arrivals)): min_interval = min(min_interval, arrivals[i] - arrivals[i - 1]) # Additionally, handle the circular case (between the last and first bus of the day) min_interval = min(min_interval, 1440 - arrivals[-1] + arrivals[0]) return min_interval # Example usage: # min_bus_interval([1, 1234, 678, 1235]) # Output should be 1"},{"question":"There is a new city planning project in the city of Graphopolis. The mayor has decided to build a network of bidirectional roads between various places in the city in such a way that each road will be built one after the other. The city planners have to ensure that the network of roads always remains connected - that is, it must be possible to travel between any two places via the roads, at any point in the construction process. However, there is a catch. Each road has a priority, and roads with a higher priority cannot be built before roads with a lower priority. The planners want to build the roads such that they maintain the connectivity of the city with the minimum sum of road priorities at any given point in the process. You are given a list of bidirectional roads each with a priority. Your task is to determine the order in which the roads should be built in order to maintain the connectivity of the network with the minimum sum of priorities. Input The first line contains two integers, n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000), representing the number of places and the number of proposed roads, respectively. Each of the next m lines contains three integers, u, v, and p (1 ≤ u, v ≤ n, 1 ≤ p ≤ 10000), representing a bidirectional road between places u and v with priority p. Output Output n-1 lines, each containing two integers, representing the places connected by each road in the order they should be built to maintain connectivity with the minimum sum of priorities. Examples Input 4 5 1 2 1 1 3 2 2 3 2 3 4 3 2 4 4 Output 1 2 1 3 3 4 Note In the first example, the network remains connected at every stage: - First build the road between 1 and 2 with priority 1 (Sum of priorities: 1). - Then build the road between 1 and 3 with priority 2 (Sum of priorities: 3). - Finally, build the road between 3 and 4 with priority 3 (Sum of priorities: 6). Building the roads in any other order would result in a higher sum of priorities at some stage of the process.","solution":"def build_roads(n, m, roads): Determines the order in which roads should be built to maintain the city\'s connectivity with the minimum sum of priorities. Args: n : int : number of places m : int : number of roads roads : list of tuples : each tuple contains (u, v, p) representing a road between places u and v with priority p Returns: list of tuples : List of (u, v) representing the roads in the order they should be built # Using Kruskal\'s algorithm to find the Minimum Spanning Tree (MST) # First, sort the roads by priority roads.sort(key=lambda x: x[2]) parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 result = [] for u, v, p in roads: if find(u) != find(v): union(u, v) result.append((u, v)) if len(result) == n - 1: break return result"},{"question":"You are tasked with writing a program that assists in organizing a coding competition. Each contestant\'s performance is evaluated based on three criteria: the number of problems solved, the total time taken to solve those problems, and the contestant\'s ID (a unique integer). Here are the specific rules for ranking contestants: - Participants are ranked in decreasing order of the numbers of problems solved. - If two or more participants have solved the same number of problems, they are ranked in increasing order of the total time taken to solve the problems. - If there is still a tie, the participants are ranked in increasing order of their contestant IDs. You are given a list of contestants and their performances. You need to output the list of contestants sorted according to the rules mentioned above. # Input The input consists of multiple lines: - The first line contains an integer n (1 ≤ n ≤ 100) — the number of contestants. - Each of the following n lines contains three integers: ID (1 ≤ ID ≤ 1000), problems_solved (0 ≤ problems_solved ≤ 100), and total_time (1 ≤ total_time ≤ 10000). Each line represents a single contestant. # Output Output n lines. Each line should contain the ID of a contestant in the order specified by the sorting rules. # Example Input ``` 4 101 3 300 102 3 350 103 2 260 104 3 300 ``` Output ``` 101 104 102 103 ``` Input ``` 3 201 5 500 202 5 450 203 5 500 ``` Output ``` 202 201 203 ``` # Note - In the first example, the contestant with ID 101 and 104 are ranked higher because they solved the most problems and had the same time but lower IDs compared to the contestant with ID 102. - In the second example, contestant 202 has the best rank due to the least total time amongst those who solved the most problems, followed by 201 and finally 203 due to ID tie-breaking.","solution":"def rank_contestants(n, contestants): Ranks contestants based on the number of problems they solved, the total time taken to solve them, and their contestant ID. Args: n (int): The number of contestants. contestants (list of tuples): Each tuple consists of three integers (ID, problems_solved, total_time). Returns: list of int: The list of contestant IDs sorted according to the rules. # Sort the contestants according to the given rules sorted_contestants = sorted( contestants, key=lambda x: (-x[1], x[2], x[0]) ) # Extract the IDs of sorted contestants sorted_ids = [contestant[0] for contestant in sorted_contestants] return sorted_ids"},{"question":"Jill is given a sequence of coin flips, where heads are denoted by 1 and tails by 0. She wants to find the longest contiguous subsequence of coin flips (not necessarily starting from the beginning or ending at the end) where the number of heads equals the number of tails. To clarify, given a sequence of coin flips, Jill is interested in finding the longest segment within this sequence such that the counts of heads (1s) and tails (0s) are the same. Input: - A single string `s` consisting of characters \'0\' and \'1\', describing the sequence of coin flips. The length of `s` (denoted as |s|) will not exceed 100,000 characters. Output: - The length of the longest contiguous subsequence with equal number of heads and tails. If no such subsequence exists, output 0. Examples: Input: 110100110 Output: 8 Explanation: The longest contiguous subsequence with an equal number of heads and tails is the segment from the 1st to the 8th character: \\"11010011\\". Input: 1111 Output: 0 Explanation: There is no subsequence where the number of heads equals the number of tails, hence the output is 0.","solution":"def longest_balanced_subsequence(s): Returns the length of the longest contiguous subsequence with an equal number of heads (1s) and tails (0s). balance_dict = {0: -1} balance = 0 max_length = 0 for i, char in enumerate(s): if char == \'1\': balance += 1 else: balance -= 1 if balance in balance_dict: max_length = max(max_length, i - balance_dict[balance]) else: balance_dict[balance] = i return max_length"},{"question":"A company manages multiple parking lots, each of which accommodates a finite number of cars. They would like to analyze the maximum number of parked cars where none of the parking lots exceeds its capacity. The company wants to ensure optimal usage of their parking lots by distributing the cars in a fair manner. Each parking lot has a specific capacity, and the company wants to know the maximum number of cars that can be parked such that no parking lot exceeds its capacity. You are given a list where the i-th element represents the capacity of the i-th parking lot, and a list of cars waiting to be parked. Write a program that determines the maximum number of cars that can be parked without exceeding the capacity of any parking lot. Input: The first line contains one integer n (1 ≤ n ≤ 100,000) — the number of parking lots. The second line contains n integers c_1, c_2, ..., c_i (1 ≤ c_i ≤ 100), where c_i is the capacity of the i-th parking lot. The third line contains one integer m (1 ≤ m ≤ 100,000) — the number of cars. The fourth line contains m integers p_1, p_2, ..., p_m (1 ≤ p_i ≤ 100), where p_i is the sorted list of car sizes in non-increasing order, indicating the size requirement for each car. Output: Print the maximum number of cars that can be parked without exceeding the capacity of any parking lot. Examples: Input: 5 3 5 2 4 1 7 3 3 2 2 1 1 1 Output: 5 Input: 4 2 2 3 3 6 1 2 2 3 3 3 Output: 4 Note: In the first example, it is possible to park the maximum of 5 cars with the following distribution: - The first parking lot with capacity 3 receives car sized 3. - The second parking lot with capacity 5 receives cars sized 2 and 2. - The third parking lot with capacity 2 receives car sized 2. - The fourth parking lot with capacity 4 receives car sized 1. - No car can be parked in the fifth parking lot with capacity 1 because there are no cars left. In the second example, it is possible to park the maximum of 4 cars with the following distribution: - The first parking lot with capacity 2 receives car sized 2. - The second parking lot with capacity 2 receives car sized 2. - The third and fourth parking lots with capacity 3 each receive one car sized 3.","solution":"def max_parked_cars(num_parking_lots, capacities, num_cars, car_sizes): capacities.sort() car_sizes.sort() parked_cars = 0 cap_index = 0 for car_size in car_sizes: while cap_index < num_parking_lots and capacities[cap_index] < car_size: cap_index += 1 if cap_index == num_parking_lots: break parked_cars += 1 cap_index += 1 return parked_cars"},{"question":"You are given an undirected graph represented by an adjacency list. Your task is to determine the smallest number of edges that, when removed, would result in a forest (a graph without cycles). A tree is a connected acyclic graph, and a forest is a disjoint set of trees. Input The first line contains two integers, `n` and `m` (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2 ⋅ 10^5) — the number of nodes and the number of edges respectively. The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n) indicating an edge between nodes `u` and `v`. Output Print a single integer — the minimum number of edges that should be removed to make the graph a forest. Examples Input 5 4 1 2 1 3 2 3 3 4 Output 1 Input 4 5 1 2 1 3 1 4 3 4 4 2 Output 2 Input 3 2 1 2 2 3 Output 0 Note In the first example, removing the edge between nodes 2 and 3 will result in a forest: { [1-2], [1-3], [3-4] } with no cycles. In the second example, removing the edges between nodes 1 and 3, and between nodes 4 and 2, will result in trees such that there are no cycles. In the third example, the graph is already a forest, so no edge removal is necessary.","solution":"def find_min_edges_to_remove(n, m, edges): def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if xroot != yroot: if rank[xroot] > rank[yroot]: parent[yroot] = xroot elif rank[xroot] < rank[yroot]: parent[xroot] = yroot else: parent[yroot] = xroot rank[xroot] += 1 parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) remove_count = 0 for u, v in edges: x = find(parent, u - 1) y = find(parent, v - 1) if x == y: remove_count += 1 else: union(parent, rank, x, y) return remove_count"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation any number of times: select a non-empty substring that is a palindrome and remove it from the string. Your task is to determine the minimum number of operations required to remove all characters from the string. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains a string of length n consisting of lowercase English letters. Output Print the minimum number of operations needed to remove all characters from the string. Examples Input 3 aba Output 1 Input 4 abba Output 1 Input 7 abcdefg Output 7 Note In the first sample, \\"aba\\" is a palindrome and can be removed in one operation. In the second sample, \\"abba\\" is a palindrome and can be removed in one operation. In the third sample, none of the substrings longer than one character are palindromes, so each character must be removed individually, requiring 7 operations.","solution":"def min_removal_operations(n, s): Given a string of length n, determine the minimum number of operations required to remove all characters from the string by removing palindromic substrings. :param n: Length of the string :param s: Input string consisting of lowercase English letters :return: Minimum number of operations needed to remove all characters from the string if s == s[::-1]: # If the entire string is a palindrome, it can be removed in one operation return 1 else: # Otherwise, every character needs to be removed individually return n"},{"question":"You are given a string that consists of letters and digits. Your task is to calculate the digital root of the sum of all the digits in the string. The digital root is the single-digit value obtained by an iterative process of summing the digits of a number until a single-digit is obtained. For example, the digital root of 9875 is calculated as 9 + 8 + 7 + 5 = 29, then 2 + 9 = 11, and finally 1 + 1 = 2. Input The input consists of a single string S containing letters and digits (1 ≤ |S| ≤ 1000). Output Print the digital root of the sum of all the digits in the string. Examples Input ab123cd4 Output 1 Input hello123 Output 6 Input abcde Output 0 Explanation In the first example, the sum of the digits is 1 + 2 + 3 + 4 = 10, and the digital root of 10 is 1. In the second example, the sum of the digits is 1 + 2 + 3 = 6, and the digital root of 6 is 6. In the third example, there are no digits, so the sum of the digits is 0. The digital root is 0.","solution":"def digital_root_of_string(s): Calculate the digital root of the sum of all digits in the input string. digit_sum = sum(int(char) for char in s if char.isdigit()) def digital_root(n): while n >= 10: n = sum(int(x) for x in str(n)) return n return digital_root(digit_sum)"},{"question":"Given a sequence of integers, you are to determine whether you can partition the sequence into two non-empty, contiguous subsequences such that the sum of the first subsequence is no larger than the sum of the second subsequence. Input The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains an integer N, the length of the sequence. - The second line contains N space-separated integers denoting the sequence. Output For each test case, output \\"YES\\" if the sequence can be partitioned as described, otherwise output \\"NO\\". Constraints 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 -10^6 ≤ sequence[i] ≤ 10^6 Example Input: 3 5 1 2 3 4 5 4 1 -1 2 -2 3 10 20 30 Output: YES YES YES Explanation Example case 1: Dividing the sequence into [1, 2, 3] and [4, 5], the sum of the first part 6 is less than the sum of the second part 9, so the answer is \\"YES\\". Example case 2: The sequence can be partitioned into [1, -1] and [2, -2], the sum of the first part 0 is equal to the sum of the second part 0, which meets the requirement, so the answer is \\"YES\\". Example case 3: Dividing the sequence into [10] and [20, 30], the sum of the first part 10 is less than the sum of the second part 50, so the answer is \\"YES\\".","solution":"def can_partition_sequence(T, test_cases): results = [] for N, sequence in test_cases: total_sum = sum(sequence) current_sum = 0 possible = False for i in range(N - 1): current_sum += sequence[i] remaining_sum = total_sum - current_sum if current_sum <= remaining_sum: possible = True break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] for i in range(1, 2 * T, 2): N = int(input_lines[i]) sequence = list(map(int, input_lines[i + 1].strip().split())) test_cases.append((N, sequence)) return can_partition_sequence(T, test_cases)"},{"question":"# M: Robot Path Planning A robot is placed in a grid with ( N ) rows and ( M ) columns. The robot starts at the top-left corner of the grid and wants to move to the bottom-right corner. It can only move right or down at each step. Some cells of the grid are blocked and the robot cannot move into those cells. You need to determine the number of distinct paths the robot can take to reach its destination. input The first line contains two integers ( N ) and ( M ) (1 ≤ ( N ), ( M ) ≤ 1000) separated by a space. The next ( N ) lines each contain ( M ) characters, where each character is either \'.\' representing an empty cell or \'#\' representing a blocked cell. The top-left and bottom-right cells will always be empty (\'.\'). output Output the number of distinct paths the robot can take to reach the bottom-right corner. Since the number of paths can be large, return the result modulo ( 10^9 + 7 ). Constraint - ( 1 leq N, M leq 1000 ) - The grid contains only \'.\' and \'#\' characters. - The top-left and bottom-right cells are always \'.\'. - It is guaranteed that there is at least one valid path from the top-left to the bottom-right corner. Input example 1 3 3 . . . . # . . . . Output example 1 2 Input example 2 2 2 . # # . Output example 2 0 Explanation In the first example, there are two distinct paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, there are no valid paths since the cells are blocked.","solution":"def robot_paths(n, m, grid): MOD = 10**9 + 7 # Initialize a dp array with zero values dp = [[0] * m for _ in range(n)] # Starting point dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[n-1][m-1]"},{"question":"Peter is organizing a relay race event for charity. There are n teams, and each team sends k participants to the race. Each participant has a speed and a stamina level. The relay race is divided into m segments, and each segment requires a minimum stamina level and has a distance of D meters. The total time for a team to finish the race is the sum of the times its participants take to complete their respective segments. Each participant\'s time to complete a segment is calculated by the formula: `distance / speed`, as long as the participant\'s stamina is greater than or equal to the segment\'s required stamina. Peter wants to find out which team can finish the race in the shortest overall time without any participant failing due to stamina. Write a program to determine the team with the shortest total time to finish the race. If no team can finish the race, return \\"No team can finish the race\\". Input The first line contains three integers n, k, and m (1 ≤ n, k ≤ 500, 1 ≤ m ≤ 10) — the number of teams, the number of participants in each team, and the number of segments, respectively. The second line contains one integer D (1 ≤ D ≤ 1000) — the distance of each segment in meters. The next n blocks each contain k lines with two integers s_j and t_j (1 ≤ s_j, t_j ≤ 1000) — the speed and stamina of the j-th participant of the i-th team. The next m lines each contain one integer l (1 ≤ l ≤ 1000) — the minimum stamina required for each segment. Output Output one integer — the index of the team (starting from 1) that finishes the race in the shortest time, or \\"No team can finish the race\\". Examples Input 2 2 2 100 50 60 70 80 60 100 70 50 40 30 Output 1 Input 2 2 3 200 80 40 90 100 100 90 110 110 40 50 60 Output 2 Input 1 3 1 150 200 50 180 60 190 55 100 Output No team can finish the race Note In the first example, the first team can complete the race with a total time of 3.125 seconds, while the second team cannot because one participant\'s stamina is not sufficient for a segment. In the second example, the first team fails due to insufficient stamina for the first segment, while the second team can complete the race in 3.5 seconds. In the third example, the only team cannot finish the race because all participants have insufficient stamina for the given segment requirement.","solution":"def find_fastest_team(n, k, m, D, teams, segments): import sys min_total_time = sys.maxsize winning_team = \\"No team can finish the race\\" for team_index, team in enumerate(teams): team_time = 0 can_finish = True for segment in segments: best_segment_time = float(\'inf\') participant_found = False for participant in team: speed, stamina = participant if stamina >= segment: segment_time = D / speed best_segment_time = min(best_segment_time, segment_time) participant_found = True if not participant_found: can_finish = False break team_time += best_segment_time if can_finish and team_time < min_total_time: min_total_time = team_time winning_team = team_index + 1 return winning_team"},{"question":"Alice is planning to start her own game development company. To streamline the development process, she decides to create a task management system for her team of n developers. Each developer works only on tasks assigned to them and finishes one task per week. Alice wants to assign tasks such that the longest time any developer is working on a task is minimized. Input The first line of input contains a single integer n (1 ≤ n ≤ 1000) representing the number of developers. The second line contains m integers t1, t2, ..., tm (1 ≤ ti ≤ 1000) representing the time required to complete each of the m tasks in weeks. Output Output a single integer representing the minimum possible time the longest working developer will take to finish all their tasks. Examples Input 3 8 3 5 7 Output 8 Input 2 1 2 3 4 Output 6 Note In the first example, Alice can distribute the tasks as follows: - Developer 1: 8 - Developer 2: 3 + 5 - Developer 3: 7 The maximum time any developer takes is 8 weeks. In the second example, Alice can distribute the tasks as follows: - Developer 1: 1 + 4 - Developer 2: 2 + 3 The maximum time any developer takes is 6 weeks.","solution":"def min_max_time(n, tasks): Returns the minimum possible time the longest working developer will take to finish all their tasks. if n >= len(tasks): return max(tasks) def can_complete_in_time(mid): required_developers = 1 current_sum = 0 for task in tasks: if current_sum + task <= mid: current_sum += task else: required_developers += 1 current_sum = task if required_developers > n: return False return True low, high = max(tasks), sum(tasks) while low < high: mid = (low + high) // 2 if can_complete_in_time(mid): high = mid else: low = mid + 1 return low"},{"question":"You are given a list of integers representing the heights of different towers. Your goal is to find the maximum number of towers that can be covered by a rectangular sheet of material. The sheet can be placed horizontally or vertically, and it should completely cover the height or width of the towers it is aligned with. The rectangular sheet is represented by a positive integer `H` for its height when placed horizontally or its width when placed vertically. The sheet must cover entire towers, meaning if a tower\'s height is greater than the height of the sheet when placed horizontally, or wider than the width when placed vertically, it cannot be covered by the sheet at that orientation. Input format: The first line contains two integers `N` and `H`, where `N` is the number of towers and `H` is the height or width of the rectangular sheet. The second line contains `N` space-separated integers, where the `i-th` integer represents the height of the `i-th` tower. Output format: Print the maximum number of towers that can be covered by the rectangular sheet. Constraints: 1 ≤ N ≤ 1,000 1 ≤ H ≤ 1,000 1 ≤ height of each tower ≤ 1,000 SAMPLE INPUT 6 5 1 2 3 4 5 6 SAMPLE OUTPUT 5 Explanation: In this sample, the rectangular sheet can cover up to a height of 5. Hence, towers with heights 1, 2, 3, 4, and 5 can be covered, totaling 5 towers. The tower with height 6 cannot be covered because it exceeds the height of the sheet.","solution":"def max_covered_towers(N, H, heights): Returns the maximum number of towers that can be covered by a rectangular sheet of height H. Parameters: N (int): number of towers H (int): height or width of the rectangular sheet heights (list): list of integers representing the heights of the towers Returns: int: the maximum number of towers that can be covered count = 0 for height in heights: if height <= H: count += 1 return count"},{"question":"Mr. Orb The Wizard has embarked on an adventure to collect magical stones scattered across a mystical forest. The forest is represented as a grid of size 500 × 500, with each cell in the grid potentially containing one magical stone with a specific power level. The coordinates of the grid cells range from (1, 1) to (500, 500). Mr. Orb\'s journey is split into three phases: 1. In the first phase, Mr. Orb will choose an initial position (X1, Y1) to start his journey. 2. In the second phase, Mr. Orb will move to a final position (X2, Y2). Mr. Orb can only move either right or down at each step, collecting stones along the way. 3. In the third phase, Mr. Orb calculates the total power of the stones collected along the path from (X1, Y1) to (X2, Y2). You need to help Mr. Orb by determining the maximum total power he can collect for each possible journey from (X1, Y1) to (X2, Y2). Input The first line contains an integer N (1 ≤ N ≤ 500), the number of magical stones in the forest. The next N lines each contain three integers X_i, Y_i, and P_i (1 ≤ X_i, Y_i ≤ 500, 1 ≤ P_i ≤ 10^4), indicating there is a magical stone at cell (X_i, Y_i) with power level P_i. It is guaranteed that no two stones share the same cell. Output A single integer, the maximum total power of the stones Mr. Orb can collect along any possible journey from (X1, Y1) to (X2, Y2). Example Input 5 1 2 100 2 3 200 3 3 300 4 4 400 4 5 500 Output 1500 Note In this example, one of the optimal paths could be from (1, 2) to (4, 5) collecting stones at (1, 2), (2, 3), (3, 3), (4, 4), and (4, 5) yielding a total power of 100 + 200 + 300 + 400 + 500 = 1500.","solution":"def max_total_power(N, stones): grid = [[0] * 501 for _ in range(501)] for x, y, p in stones: grid[x][y] = p dp = [[0] * 501 for _ in range(501)] for i in range(1, 501): for j in range(1, 501): dp[i][j] = grid[i][j] + max(dp[i-1][j], dp[i][j-1]) return dp[500][500] # Example usage: N = 5 stones = [ (1, 2, 100), (2, 3, 200), (3, 3, 300), (4, 4, 400), (4, 5, 500) ] print(max_total_power(N, stones)) # Should print 1500"},{"question":"Katherine is organizing a bookshelf that consists of n compartments aligned in a row, where each compartment has a certain capacity indicating how many books it can hold. Katherine has m books where each book has a specific width. She wants to place all the books in the compartments so that no compartment is overfilled, but she can rearrange the books or compartments if required. She needs your help to find a way to place all the books into the compartments according to the given restrictions, or determine that it\'s not possible. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of compartments and the number of books respectively. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 100) — the capacities of the compartments. The third line contains m integers w1, w2, ..., wm (1 ≤ wi ≤ 100) — the widths of the books. Output Output a single line with the word \\"YES\\" if Katherine can fit all the books into the compartments according to the given restrictions. Otherwise, output \\"NO\\". Examples Input 4 3 2 3 1 4 1 2 2 Output YES Input 3 4 3 1 2 2 2 3 1 Output NO","solution":"def can_fit_books(n, m, capacities, widths): Determines if all books can be placed into the compartments without overfilling. :param n: Number of compartments :param m: Number of books :param capacities: List of capacities for each compartment :param widths: List of widths for each book :return: \\"YES\\" if all books can fit into the compartments, otherwise \\"NO\\" capacities.sort(reverse=True) widths.sort(reverse=True) for width in widths: fit = False for i in range(n): if capacities[i] >= width: capacities[i] -= width fit = True break if not fit: return \\"NO\\" return \\"YES\\""},{"question":"You are given a rectangular grid with \'n\' rows and \'m\' columns, where each cell in the grid is either empty (represented by \'.\') or occupied by an obstacle (represented by \'#\'). A robot starts at the top-left cell (0, 0) and wants to navigate to the bottom-right cell (n-1, m-1). The robot can move up, down, left, or right, but cannot move diagonally, and it cannot move through obstacles. Write a function `robot_path` to determine if there is a path for the robot to reach the destination and also return the path if it exists. The path should be represented as a list of tuples, each tuple representing the coordinates (row, col) of a cell in the path, starting from (0, 0) and ending at (n-1, m-1). If there are multiple paths, return any one of them. If no path exists, return an empty list. # Input - A 2D list of characters `grid` with dimensions `n` x `m`. # Output - A list of tuples representing the path if it exists. If no path exists, return an empty list. # Constraints - 1 <= n <= 100 - 1 <= m <= 100 - The top-left cell (0, 0) and the bottom-right cell (n-1, m-1) are guaranteed to be empty (\'.\'). # Example Input ``` grid = [ [\'.\', \'.\', \'#\'], [\'#\', \'.\', \'.\'], [\'.\', \'#\', \'.\'] ] ``` Output ``` [(0, 0), (0, 1), (1, 1), (1, 2), (2, 2)] ``` or any other valid path Input ``` grid = [ [\'.\', \'#\'], [\'#\', \'.\'] ] ``` Output ``` [] ``` # Explanation In the first example, one possible path for the robot is from (0, 0) to (0, 1) to (1, 1) to (1, 2) to (2, 2). There may be other valid paths as well. In the second example, no path exists from (0, 0) to (1, 1) as the robot would need to pass through obstacles.","solution":"def robot_path(grid): Determines if there is a path for the robot to reach the destination and returns the path if it exists. Parameters: grid (list of list of str): The 2D grid representing the map where \'.\' is empty and \'#\' is obstacle. Returns: list of tuples: The path as a list of coordinates or an empty list if no path exists. n = len(grid) m = len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up path = [] visited = [[False] * m for _ in range(n)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' and not visited[x][y] def dfs(x, y): if x == n-1 and y == m-1: path.append((x, y)) return True visited[x][y] = True path.append((x, y)) for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and dfs(nx, ny): return True path.pop() return False if dfs(0, 0): return path return []"},{"question":"Robin has an undirected, weighted graph with n nodes and m edges. The graph is represented by an edge list where each edge has a source node u, a destination node v, and a weight w. Robin is interested in finding the shortest path from node 1 to node n but with a twist: Robin can remove at most one edge from the graph to potentially shorten the path. Your task is to help Robin determine the minimum distance from node 1 to node n either without removing any edges or by removing exactly one edge from the graph. Input The first line contains two integers n and m (2 ≤ n ≤ 3000, 1 ≤ m ≤ 5000) — the number of nodes and edges in the graph, respectively. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), representing an edge between nodes u and v with weight w. It is guaranteed that there is at least one path from node 1 to node n in the graph. Output Print one integer — the minimum distance from node 1 to node n after removing at most one edge. If no path exists after the removal, print -1. Examples Input 6 7 1 2 2 2 3 2 3 4 2 4 5 2 5 6 2 1 3 4 3 6 4 Output 8 Input 5 6 1 2 1 2 3 1 3 4 1 4 5 1 1 3 10 3 5 10 Output 4","solution":"import heapq def dijkstra(n, adj, src): dist = [float(\'inf\')] * (n + 1) dist[src] = 0 pq = [(0, src)] # priority queue as (distance, node) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in adj[u]: if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(pq, (dist[v], v)) return dist def find_shortest_path_with_removal(n, m, edges): adj = [[] for _ in range(n + 1)] for u, v, w in edges: adj[u].append((v, w)) adj[v].append((u, w)) # Dijkstra from src=1 dist_from_1 = dijkstra(n, adj, 1) # Dijkstra from src=n dist_from_n = dijkstra(n, adj, n) # Initial shortest path distance without removing any edge shortest_path = dist_from_1[n] # Try removing each edge to see if it can lead to a shorter path min_distance = shortest_path for u, v, w in edges: if dist_from_1[u] != float(\'inf\') and dist_from_n[v] != float(\'inf\'): min_distance = min(min_distance, dist_from_1[u] + dist_from_n[v] + w) if dist_from_1[v] != float(\'inf\') and dist_from_n[u] != float(\'inf\'): min_distance = min(min_distance, dist_from_1[v] + dist_from_n[u] + w) return min_distance if min_distance != float(\'inf\') else -1"},{"question":"A zoo keeper wants to feed all the animals in their zoo. The zoo contains m animals and n types of food. Each type of food corresponds to a certain subset of animals that can eat it. The zoo keeper wants to know if it\'s possible to feed all animals using any of the available types of food. Each type of food can be used multiple times, but each animal needs exactly one portion of food that they can eat. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of types of food and the number of animals respectively. Each of the next n lines describes a type of food. It starts with an integer xi (0 ≤ xi ≤ m) — the number of animals that can eat this type of food, followed by xi distinct integers yij (1 ≤ yij ≤ m) — the indices of animals that can eat this type of food. Output If it is possible to feed all m animals with the given types of food, print \\"YES\\", otherwise print \\"NO\\". Examples Input 4 3 2 1 3 1 2 2 2 3 1 1 Output YES Input 2 3 1 1 1 2 Output NO Note In the first sample, you can feed animal 1 with food type 1, animal 2 with food type 2, and animal 3 with food type 3. In the second sample, it is impossible to feed animal 3 as none of the provided food types are suitable for it.","solution":"def can_feed_all_animals(n, m, food_data): Determines if all animals can be fed with the given types of food. :param n: Number of food types :param m: Number of animals :param food_data: List of food data. Each food datum is a list, where the first element is the number of animals that can eat this type of food and the following elements are the indices of those animals. :returns: \'YES\' if all animals can be fed, otherwise \'NO\' fed_animals = set() for food in food_data: for animal in food[1:]: fed_animals.add(animal) return \\"YES\\" if len(fed_animals) == m else \\"NO\\""},{"question":"Valentine’s Day is approaching, and the citizens of Loveland are in full swing preparing for the festival. One of the traditions involves exchanging bags of candies. Each candy bag has a number of candies in it, and each bag can only be exchanged if the sum of candies in any two exchanged bags is even. Given the number of candies in each bag, your task is to determine the maximum number of bags that can be exchanged in pairs. Input The first line contains an integer n (1 ≤ n ≤ 3000) — the number of candy bags. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^6), where ai represents the number of candies in the i-th bag. Output Print a single integer representing the maximum number of bags that can be exchanged in pairs. Examples Input 5 1 2 3 4 5 Output 4 Input 6 2 4 6 8 10 12 Output 6","solution":"def max_exchanged_bags(n, candies): # Separate candies into even and odd evens = sum(1 for x in candies if x % 2 == 0) odds = n - evens # The number of pairs we can form is the minimum of the counts of even and odd numbers # because each pair needs either both even or both odd numbers return (evens // 2) * 2 + (odds // 2) * 2"},{"question":"Alice is playing a card game where she draws cards from a deck each day. The deck has an unlimited number of cards, but each card has a number between 1 and k. Alice prefers high numbers over low numbers and always tries to draw the highest possible card first. The card drawing process follows a specific rule: once Alice cannot draw a new card that is the same or higher than the previous day\'s highest card, she will start drawing the next highest possible card that is less than what was previously drawn. For example, if k = 10 and Alice has previously drawn cards ending in 7, the next day she can only start drawing cards up to the number 6. Once she reaches 1, if she cannot draw 1, she stops playing the game. You are given the deck\'s maximum card number k. Your task is to determine the highest number of days Alice can continue playing the game before she has to stop. Input A single integer k (1 ≤ k ≤ 10^9) — the maximum card number in the deck. Output Output one integer — the highest number of days Alice can continue playing the game. Examples Input 10 Output 10 Input 2 Output 2 Input 1 Output 1 Note In the first example with k = 10, Alice can draw cards in descending order starting from 10 down to 1, thus playing for 10 days. In the second example with k = 2, Alice can draw the card 2 on the first day and the card 1 on the second day, thus playing for 2 days. In the third example with k = 1, Alice can only draw the card 1 on the first day, so she can play for just 1 day.","solution":"def max_days(k): Given the maximum card number k in the deck, returns the highest number of days Alice can continue playing the game. return k"},{"question":"Bob likes math and often spends his time solving problems. Recently, he came across an interesting problem about finding the largest product of two distinct numbers in a list. Bob knows that given a list of integers, it\'s not always straightforward to find the two numbers that yield the largest product, especially when negative numbers are involved. Write a program that takes a list of integers and outputs the largest product of two distinct numbers in the list. # Input The input consists of two lines: - The first line contains an integer ( n ) (2 ≤ ( n ) ≤ 100), the number of integers. - The second line contains ( n ) integers separated by spaces. Each integer ( a_i ) (-1000 ≤ ( a_i ) ≤ 1000) is an element of the list. # Output Output a single integer, the largest product of two distinct numbers in the list. # Example Input ``` 5 -10 -20 5 2 -3 ``` Output ``` 200 ``` Input ``` 4 3 7 2 1 ``` Output ``` 21 ``` # Explanation In the first example, the largest product of two distinct numbers in the list is calculated by multiplying -10 and -20, resulting in a product of 200. In the second example, the largest product is obtained by multiplying 3 and 7, resulting in a product of 21.","solution":"def largest_product(n, nums): Returns the largest product of two distinct numbers in the list. Parameters: n (int): number of integers in the list. nums (list of int): list of integers. Returns: int: largest product of two distinct numbers. if n < 2: return 0 nums.sort() # The maximum product of two distinct numbers in a sorted list is either one of the # products of the two largest positive numbers or the two smallest negative numbers. max_product = max(nums[0] * nums[1], nums[-1] * nums[-2]) return max_product"},{"question":"In a faraway kingdom, a wise king decided to build a new road network to connect all his cities together. He wants to ensure that all cities are accessible from any other city, while minimizing the cost of constructing the roads. To achieve this, the king has hired you to help him determine the optimal road network. The kingdom has `n` cities and `m` possible roads. Each road connects two different cities and has an associated cost. The king wants to know the minimum cost to construct roads such that all cities are connected directly or indirectly. Input The first line contains two integers `n` and `m` (`2 ≤ n ≤ 1000`, `1 ≤ m ≤ 100000`) — the number of cities and the number of possible roads, respectively. The next `m` lines describe the possible roads. Each line contains three integers `u`, `v`, and `w` (`1 ≤ u, v ≤ n`, `1 ≤ w ≤ 10000`), representing a road that connects city `u` to city `v` with cost `w`. Output Print the minimum cost to connect all cities. If it is impossible to connect all the cities, print \\"-1\\". Examples Input 4 5 1 2 3 2 3 1 3 4 4 2 4 2 1 4 5 Output 6 Input 3 1 1 2 4 Output -1 Note In the first sample, the optimal road network includes the roads connecting cities 1-2, 2-3, and 2-4 with a total cost of 3 + 1 + 2 = 6. In the second sample, there is no possible way to connect all cities with just one road, thus the output is -1. The problem can be solved using a minimum spanning tree (MST) algorithm, such as Kruskal\'s or Prim\'s algorithm.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, roads): parent = [] rank = [] result = 0 edges_included = 0 for node in range(n): parent.append(node) rank.append(0) roads = sorted(roads, key=lambda x: x[2]) for road in roads: u, v, w = road root_u = find(parent, u - 1) root_v = find(parent, v - 1) if root_u != root_v: result += w edges_included += 1 union(parent, rank, root_u, root_v) if edges_included == n - 1: return result return -1 def min_cost_to_connect_cities(n, m, roads): if n == 0 or m == 0: return -1 return kruskal(n, roads) # Example n = 4 m = 5 roads = [ (1, 2, 3), (2, 3, 1), (3, 4, 4), (2, 4, 2), (1, 4, 5) ] print(min_cost_to_connect_cities(n, m, roads)) # Output: 6"},{"question":"You are given a list of integers. Your task is to identify all the indices of the list where the integer matches the integer at the very last index of the list. Constraints * The list will have at least one integer and at most 100,000 integers. * All integers in the list are between -10^9 and 10^9. Input Input is given from Standard Input in the following format: ``` n a1 a2 a3 ... an ``` Where `n` is the number of integers in the list, and `a1, a2, a3, ..., an` are the integers in the list. Output Print all indices where the number matches the integer at the last index of the list. Indices should be 0-based. Examples Input 5 1 2 3 4 3 Output 2 4 Input 3 5 7 5 Output 0 2 Input 4 10 20 20 10 Output 0 3","solution":"def find_matching_indices(n, nums): Returns a list of indices in nums where the integer matches the integer at the last index. last_value = nums[-1] matching_indices = [i for i, num in enumerate(nums) if num == last_value] return matching_indices"},{"question":"You are managing a warehouse and have been asked to optimize the storage of packages. The warehouse is organized in shelves, and each shelf can hold a certain maximum weight. You need to determine if it is possible to place a given set of packages on a single shelf without exceeding its weight limit. Each package has a certain weight, and you can only place whole packages on the shelf. Write a function `can_fit_packages(shelf_weight, package_weights)` that determines whether it is possible to place all the packages on the shelf without exceeding its weight limit. Input: - An integer `shelf_weight` (1 ≤ shelf_weight ≤ 1000) representing the maximum weight the shelf can hold. - A list of integers `package_weights` (1 ≤ len(package_weights) ≤ 100) where each element is an integer (1 ≤ package_weights[i] ≤ 100), representing the weights of the packages. Output: - Return `True` if all the packages can fit on the shelf without exceeding its weight limit, otherwise return `False`. Examples: Input: ```python shelf_weight = 100 package_weights = [50, 30, 10, 10] ``` Output: ```python True ``` Input: ```python shelf_weight = 50 package_weights = [20, 20, 20] ``` Output: ```python False ``` Input: ```python shelf_weight = 15 package_weights = [5, 5, 5] ``` Output: ```python True ```","solution":"def can_fit_packages(shelf_weight, package_weights): Determines if all the given packages can fit on the shelf without exceeding the weight limit. Args: shelf_weight (int): The maximum weight the shelf can hold. package_weights (list of int): The weights of the packages. Returns: bool: True if the total weight of the packages is less than or equal to the shelf weight, False otherwise. total_weight = sum(package_weights) return total_weight <= shelf_weight"},{"question":"A group of n friends is playing a game where they stand in a circle and pass a token from one to another. The arrangement of friends is such that each friend i has a direct connection (represented as an undirected edge) to exactly two other friends, forming a perfect circle. Each friend remembers the two friends they are directly connected to. The task is to determine the sequence of friends in the circle using the information provided by each friend regarding their connections. If there are multiple valid sequences, any valid sequence can be returned. Input The first line of input contains a single integer n (3 ≤ n ≤ 10^5) — the number of friends. The next n lines each contain two integers representing the two friends that the i-th friend is directly connected to. The endpoint friends of a connection are given in arbitrary order. Output Output a sequence of n integers representing the arrangement of friends in the circle. If there are multiple valid sequences, any correct sequence can be printed. Examples Input 6 2 3 3 4 4 5 5 6 6 1 1 2 Output 1 2 3 4 5 6 Input 4 2 3 3 4 4 1 1 2 Output 1 2 3 4","solution":"def find_circle_sequence(n, connections): from collections import defaultdict, deque # Building the graph graph = defaultdict(list) for i, (a, b) in enumerate(connections): graph[a].append(b) graph[b].append(a) # Finding starting point for node in graph: if len(graph[node]) == 2: start = node break # Using deque to maintain the sequence sequence = deque([start]) next_node = graph[start][0] prev_node = start while len(sequence) < n: sequence.append(next_node) neighbors = graph[next_node] if neighbors[0] == prev_node: prev_node, next_node = next_node, neighbors[1] else: prev_node, next_node = next_node, neighbors[0] return list(sequence)"},{"question":"You are working on a software that automatically classifies different kinds of trees in a forest based on their height for environmental analysis. Each tree has a unique height, and you are given the heights of the trees in an array. Your task is to determine the length of the longest strictly increasing subsequence of tree heights. A strictly increasing subsequence means that every subsequent element is greater than the preceding one. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of trees. - The second line contains n space-separated integers h_i (1 ≤ h_i ≤ 10^9), the heights of the trees. Output: - Print a single integer, the length of the longest strictly increasing subsequence of tree heights. Example: Input: 8 10 22 9 33 21 50 41 60 Output: 5 Explanation: The longest strictly increasing subsequence is [10, 22, 33, 50, 60], which has a length of 5.","solution":"def length_of_LIS(heights): Determine the length of the longest strictly increasing subsequence of tree heights. :param heights: List of integers representing tree heights. :return: Length of the longest strictly increasing subsequence. if not heights: return 0 n = len(heights) lis = [1] * n for i in range(1, n): for j in range(i): if heights[i] > heights[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Palindrome Partitioning You need to partition a given string such that every substring in the partition is a palindrome. A palindrome is a string that reads the same forwards and backwards, e.g., \\"madam\\" or \\"racecar\\". You need to determine the minimum number of cuts needed for a palindrome partitioning of the given string. Input A single line containing a string s of length n . The string consists of lowercase English alphabet characters. Constraints * 1 leq n leq 500 Output An integer representing the minimum number of cuts needed to partition the string such that every substring is a palindrome. Example Input aab Output 1 Explanation Two possible palindrome partitionings for \\"aab\\" are [\\"a\\", \\"a\\", \\"b\\"] and [\\"aa\\", \\"b\\"]. The minimum number of cuts needed is 1 (\\"aa\\" | \\"b\\").","solution":"def min_cut_palindrome_partition(s): n = len(s) # Edge case for single character or empty string if n == 0 or n == 1: return 0 # Check if a substring s[i:j+1] is a palindrome def is_palindrome(i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True # Create a table to store the minimum cuts for `s` cuts = [0] * n for i in range(n): min_cuts = i # Maximum cuts possible is i (cutting each character itself) for j in range(i + 1): if is_palindrome(j, i): min_cuts = 0 if j == 0 else min(min_cuts, cuts[j - 1] + 1) cuts[i] = min_cuts return cuts[-1]"},{"question":"You are given an integer representing an hour in a 24-hour clock format. Determine whether it is morning (6:00-11:59), afternoon (12:00-17:59), evening (18:00-20:59), or night (21:00-5:59). Input The input consists of a single integer h (0 ≤ h ≤ 23). Output Output a single string representing the part of the day: \\"morning\\", \\"afternoon\\", \\"evening\\", or \\"night\\". The output string should be in lowercase. Examples Input 10 Output morning Input 15 Output afternoon Input 19 Output evening Input 2 Output night Note Assume that: - morning is from 6:00 to 11:59 - afternoon is from 12:00 to 17:59 - evening is from 18:00 to 20:59 - night is from 21:00 to 5:59","solution":"def determine_time_of_day(h): Determine the part of the day given an hour in 24-hour clock format. Parameters: h (int): An integer representing the hour (0 ≤ h ≤ 23). Returns: str: A string representing the part of the day: \\"morning\\", \\"afternoon\\", \\"evening\\", or \\"night\\". if 6 <= h <= 11: return \\"morning\\" elif 12 <= h <= 17: return \\"afternoon\\" elif 18 <= h <= 20: return \\"evening\\" else: return \\"night\\""},{"question":"Given a string `S`, determine if it is possible to rearrange the characters of `S` such that no two adjacent characters are the same. If it is possible, return any valid rearrangement of `S`. If it is not possible, return an empty string (`\\"\\"`). Input A single line containing the string `S`. Output A single line containing any valid rearranged version of `S` such that no two adjacent characters are the same, or an empty string (`\\"\\"`) if no such arrangement is possible. Constraints - 1 ≤ |S| ≤ 10^5 - `S` contains only lowercase English letters. SAMPLE INPUT aaabb SAMPLE OUTPUT ababa SAMPLE INPUT aaab SAMPLE OUTPUT","solution":"import heapq from collections import Counter def rearrange_string(S): Rearranges the characters of S such that no two adjacent characters are the same. If it is not possible, returns an empty string. if not S: return \\"\\" # Frequency count of each character freq = Counter(S) # Max-heap to get the maximum occurring character max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_char, prev_count = None, 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # If the previous character count is greater than zero, push it back into the heap if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update the previous character and its count (decrease count by 1) prev_char, prev_count = char, count + 1 if len(result) == len(S): return \'\'.join(result) else: return \\"\\""},{"question":"Given a list of integers, you are required to determine if the list is strictly increasing, strictly decreasing, or neither. A list is strictly increasing if for every element (a[i]), (a[i] < a[i + 1]) holds true. Similarly, a list is strictly decreasing if for every element (a[i]), (a[i] > a[i + 1]) holds true. If neither condition is met, the list is neither. Write a function that takes as input a list of integers and returns one of the following strings: \\"Strictly Increasing\\", \\"Strictly Decreasing\\", or \\"Neither\\". # Input The input consists of multiple test cases. Each test case is a line containing (n) space-separated integers (a_1, a_2, ldots, a_n) where (1 leq n leq 1000) and (-10^5 leq a_i leq 10^5). The end of input is indicated by a line with a single integer \'0\'. # Output For each test case, output one of the following strings: \\"Strictly Increasing\\", \\"Strictly Decreasing\\", or \\"Neither\\". # Example # Input ``` 1 2 3 4 5 5 4 3 2 1 1 3 2 4 0 ``` # Output ``` Strictly Increasing Strictly Decreasing Neither ```","solution":"def determine_trend(arr): Determines if the list is strictly increasing, strictly decreasing, or neither. Parameters: arr (list): A list of integers Returns: str: \\"Strictly Increasing\\", \\"Strictly Decreasing\\", or \\"Neither\\" if len(arr) < 2: return \\"Neither\\" increasing = all(arr[i] < arr[i + 1] for i in range(len(arr) - 1)) if increasing: return \\"Strictly Increasing\\" decreasing = all(arr[i] > arr[i + 1] for i in range(len(arr) - 1)) if decreasing: return \\"Strictly Decreasing\\" return \\"Neither\\" def process_input(input_data): output_data = [] for line in input_data.split(\'n\'): if line.strip() == \'0\': break if not line.strip(): continue arr = list(map(int, line.strip().split())) result = determine_trend(arr) output_data.append(result) return output_data"},{"question":"You are given an initially empty beverage dispensing machine that can be filled with up to `n` different types of beverages. Each beverage type is identified by a unique ID and has a specified volume. The machine has a capacity limit of `S` liters, meaning it cannot hold any volume beyond this limit. Beverages can be added or removed at any time, but the machine always operates under the condition of never exceeding its total volume capacity. You need to implement a set of operations to manage the filling and status of this beverage machine. Specifically, you need to handle three types of operations: 1. **Add a beverage**: Add a specific volume of a beverage type to the machine. If the beverage type already exists in the machine, increase its volume by the specified amount. If the volume exceeds the capacity `S`, ignore the operation. 2. **Remove a beverage**: Remove a specific volume of a beverage type from the machine. If the volume to be removed is more than the current volume in the machine, set the beverage volume to zero. 3. **Query status**: Provide the current total volume of all beverages in the machine and list all beverage types present in the machine along with their respective volumes. Input - The first line contains two integers `n` and `S` (1 ≤ n ≤ 100, 1 ≤ S ≤ 10^6) — the number of different beverage types and the capacity of the machine in liters. - The second line contains an integer `q` (1 ≤ q ≤ 10^5) — the number of operations. - The following `q` lines describe the operations. Each operation is given in one of the following formats: 1. `\\"1 type_id volume\\"`: Add `volume` liters of the beverage with `type_id` to the machine. 2. `\\"2 type_id volume\\"`: Remove `volume` liters of the beverage with `type_id` from the machine. 3. `\\"3\\"`: Query the current total volume and list all beverages with non-zero volume in the machine. Output - For each query operation `\\"3\\"`, output the total volume of all beverages in the machine followed by the list of all beverage types present along with their respective volumes in the format: `[type_id1:volume1, type_id2:volume2, ...]`. Example Input ``` 3 100 6 1 1 30 1 2 20 1 3 50 1 1 60 3 2 2 10 3 ``` Output ``` 100 [1:90, 2:20, 3:50] 90 [1:90, 3:50] ``` Note - In the sample, initially, we add 30 liters of beverage type `1`, 20 liters of beverage type `2`, and 50 liters of beverage type `3` resulting in a total of 100 liters. Any attempt to add more that exceeds the limit of 100 liters is ignored. - The first query shows the status with total volume and all beverage types present. - After removing 10 liters from beverage type `2`, the total volume is updated, and the second query reflects this change.","solution":"class BeverageMachine: def __init__(self, n, S): self.beverages = {} self.n = n self.S = S self.current_volume = 0 def add_beverage(self, type_id, volume): if self.current_volume + volume > self.S: return if type_id in self.beverages: self.beverages[type_id] += volume else: self.beverages[type_id] = volume self.current_volume += volume def remove_beverage(self, type_id, volume): if type_id in self.beverages: removed_volume = min(self.beverages[type_id], volume) self.beverages[type_id] -= removed_volume self.current_volume -= removed_volume if self.beverages[type_id] == 0: del self.beverages[type_id] def query_status(self): result = [f\\"{k}:{v}\\" for k, v in sorted(self.beverages.items())] return f\\"{self.current_volume} [{\', \'.join(result)}]\\" def process_operations(n, S, operations): machine = BeverageMachine(n, S) results = [] for op in operations: if op[0] == 1: _, type_id, volume = op machine.add_beverage(type_id, volume) elif op[0] == 2: _, type_id, volume = op machine.remove_beverage(type_id, volume) elif op[0] == 3: results.append(machine.query_status()) return results"},{"question":"Given a grid of size n x m filled with positive integers, your task is to find the maximum sum possible when traversing from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time. Input: An integer t, 1 ≤ t ≤ 100, denoting the number of test cases, followed by t sets of input data. Each set of input data consists of: 1. Two positive integers n (the number of rows) and m (the number of columns), where 1 ≤ n, m ≤ 100. 2. n lines each containing m positive integers representing the grid. Output: For each set of input data, output the maximum sum possible for the corresponding grid. Example: Sample Input: 2 3 3 1 2 3 4 5 6 7 8 9 2 2 1 1 1 1 Sample Output: 29 3","solution":"def max_sum_path(grid): n = len(grid) m = len(grid[0]) # Create a dp table to store the results of subproblems dp = [[0] * m for _ in range(n)] # Initialize the top-left corner dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The result is in the bottom-right corner return dp[n-1][m-1] def solve(t, test_cases): results = [] for case in test_cases: n, m, grid = case results.append(max_sum_path(grid)) return results # Example of how to call these functions: # t = 2 # test_cases = [ # (3, 3, [[1, 2, 3], [4, 5, 6], [7, 8, 9]]), # (2, 2, [[1, 1], [1, 1]]) # ] # print(solve(t, test_cases))"},{"question":"Write a function that simulates a simplified version of a text editor with a command-based interface. The function should be able to process a series of commands to manipulate a string. The commands are: - `INSERT c`: Insert the character `c` at the current cursor position and move the cursor to the right of the inserted character. - `MOVE k`: Move the cursor to the position `k` (0-indexed). The cursor should always stay within the valid range of the string\'s length (including the position right after the last character). - `DELETE`: Delete the character immediately to the right of the cursor. If the cursor is at the end of the string, this command should have no effect. Initially, the string is empty and the cursor is positioned before the first character. Input: - The input will consist of multiple command lines. Each command is either an `INSERT`, `MOVE`, or `DELETE` command. - The input ends with the command `END`, which signals the end of the input and should not be processed as a normal command. Output: - After processing all commands, output the final state of the string. Example: Input: ``` INSERT a INSERT b INSERT c MOVE 1 DELETE INSERT d END ``` Output: ``` adc ``` Explanation: 1. `INSERT a` inserts \'a\' at the beginning. The string becomes `a`. 2. `INSERT b` inserts \'b\' after \'a\'. The string becomes `ab`. 3. `INSERT c` inserts \'c\' after \'b\'. The string becomes `abc`. 4. `MOVE 1` moves the cursor to position 1 (between \'a\' and \'b\'). 5. `DELETE` deletes \'b\'. The string becomes `ac`. 6. `INSERT d` inserts \'d\' after \'a\'. The string becomes `adc`. 7. `END` signals the end of input and we output the final string. Implement the function `text_editor(commands: List[str]) -> str` to simulate the editor and return the resulting string.","solution":"def text_editor(commands): content = [] cursor = 0 for command in commands: parts = command.split() if parts[0] == \'INSERT\': character = parts[1] content.insert(cursor, character) cursor += 1 elif parts[0] == \'MOVE\': position = int(parts[1]) cursor = max(0, min(position, len(content))) elif parts[0] == \'DELETE\': if cursor < len(content): content.pop(cursor) elif parts[0] == \'END\': break return \'\'.join(content)"},{"question":"Harry is playing a game with a chain of beads. Each bead can be either red, green, or blue. The beads are currently arranged in a linear sequence. Harry can remove consecutive beads of the same color to gain points. The number of points gained is equal to the square of the number of beads removed in one go. Harry wants to maximize his score by strategically removing consecutive beads of the same color in multiple steps. Help Harry find the maximum possible score he can achieve. Input The first line contains an integer ( n ) (1 ≤ ( n ) ≤ 100) — the number of beads in the initial sequence. The second line contains a string of ( n ) characters, where each character represents the color of a bead (\'R\' for red, \'G\' for green, \'B\' for blue). Output Output a single integer — the maximum score Harry can achieve. Example Input 9 RRGGBBBRR Output 13 Explanation In the given example, Harry can perform the following steps: 1. Remove the two \'R\'s from the beginning: score is now (2^2 = 4). 2. Remove the two \'G\'s: score is now (4 + 2^2 = 8). 3. Remove the three \'B\'s: score is now (8 + 3^2 = 17). 4. Finally, remove the two remaining \'R\'s: score is (17 + 2^2 = 21). Harry\'s final score is 21.","solution":"def max_score(n, beads): Returns the maximum score Harry can achieve by removing consecutive beads of the same color. Parameters: n (int): Number of beads beads (str): Initial sequence of beads Returns: int: Maximum score score = 0 i = 0 while i < n: # Start of consecutive beads start = i while i < n and beads[i] == beads[start]: i += 1 # Number of consecutive beads count = i - start # Calculate score for this group score += count * count return score"},{"question":"Sam is organizing a charity event and needs to distribute gift bags to children. He has `a` chocolates, `b` candies, and `c` toys available. Each gift bag must contain exactly one chocolate, one candy, and one toy. Determine the maximum number of gift bags Sam can create for the event. Input The first line of the input contains three integers a, b, and c (0 ≤ a, b, c ≤ 1,000,000) — the number of chocolates, candies, and toys that Sam has available. Output Output a single integer — the maximum number of gift bags that can be created. Examples Input 4 5 6 Output 4 Input 10 3 5 Output 3 Input 0 2 3 Output 0 Note In the first example, Sam can make 4 complete gift bags (one chocolate, one candy, and one toy per bag) since the limiting factor is the number of chocolates available. In the second example, Sam can make only 3 complete gift bags since there are only 3 candies available. In the third example, Sam cannot make any gift bags because there are no chocolates available.","solution":"def max_gift_bags(a, b, c): Returns the maximum number of gift bags containing one chocolate, one candy, and one toy. return min(a, b, c)"},{"question":"Given a string S and a list of queries, each query consisting of two integers, find the most frequent character in the specified range of the string. If there are multiple characters with the highest frequency, return the lexicographically smallest one. Input: - The first line contains the string S. - The second line contains an integer Q, the number of queries. - The following Q lines each contain two integers L and R (1-based index) representing the range of the query. Output: For each query, output the most frequent character in the given range. If there are ties, output the lexicographically smallest character. Constraints: 1 ≤ |S| ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ |S| SAMPLE INPUT abacabad 3 1 4 2 6 1 8 SAMPLE OUTPUT a a a Explanation: For the first query, the substring is \\"abac\\", the most frequent character is \'a\'. For the second query, the substring is \\"bacab\\", the most frequent character is \'a\'. For the third query, the substring is \\"abacabad\\", the most frequent character is \'a\'.","solution":"def most_frequent_char(S, queries): def get_most_frequent_char_in_range(start, end): sub_str = S[start-1:end] frequency = {} for char in sub_str: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 # Find the max frequency and lexicographically smallest character with that frequency max_freq = 0 result_char = \'\' for char in sorted(frequency.keys()): if frequency[char] > max_freq: max_freq = frequency[char] result_char = char return result_char results = [] for l, r in queries: results.append(get_most_frequent_char_in_range(l, r)) return results"},{"question":"Given a list of integers, determine if there is a cubic subsequence of length 3. A sequence `a, b, c` is a cubic sequence if all the following conditions are satisfied: * The sequence is strictly increasing. * Each element in the sequence must form a perfect cube, i.e., ( a = x^3 ), ( b = y^3 ), and ( c = z^3 ) for some integers ( x, y, ) and ( z ). Constraints * The length of the list does not exceed 100. * Each integer in the list is non-negative and at most ( 10^6 ). Input Input is given from Standard Input in the following format: ``` n a_1 a_2 ... a_n ``` Here, `n` is the number of integers in the list, and `a_i` is the i-th integer in the list. Output Print `YES` if there exists a cubic subsequence of length 3. Otherwise, print `NO`. Examples Input ```plaintext 5 1 8 27 64 125 ``` Output ```plaintext YES ``` Input ```plaintext 6 1 2 4 8 16 32 ``` Output ```plaintext NO ``` Input ```plaintext 4 9 10 27 64 ``` Output ```plaintext NO ```","solution":"def is_cubic_subsequence(n, lst): Determines if there exists a cubic subsequence of length 3 in the list. import math def is_perfect_cube(num): root = round(num ** (1/3)) return root ** 3 == num cubes = [num for num in lst if is_perfect_cube(num)] if len(cubes) < 3: return \\"NO\\" for i in range(len(cubes)-2): for j in range(i+1, len(cubes)-1): for k in range(j+1, len(cubes)): if cubes[i] < cubes[j] < cubes[k]: return \\"YES\\" return \\"NO\\" # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) lst = list(map(int, data[1:])) print(is_cubic_subsequence(n, lst))"},{"question":"You are given an array of n integers representing the heights of trees in a forest. Each tree height is in the range of 1 to 10^9. For a tree to be considered \\"dominant,\\" its height must be larger than any of its neighboring trees in the array. Determine for each tree in the array whether it is dominant or not. Input The first line contains a single positive integer, n (1 ≤ n ≤ 10^5), representing the number of trees. The second line contains n space-separated integers hi (1 ≤ hi ≤ 10^9), representing the height of each tree. Output Print n lines: the i-th line should contain \\"DOMINANT\\" if the tree is dominant, and \\"NOT DOMINANT\\" if it is not. Examples Input 5 2 6 3 7 4 Output NOT DOMINANT DOMINANT NOT DOMINANT DOMINANT NOT DOMINANT Note In the given example, the second tree with height 6 is dominant as its neighbors have heights 2 and 3, which are less than 6. The fourth tree with height 7 is dominant as its neighbors have heights 3 and 4, which are less than 7. No other tree meets the criteria of being dominant.","solution":"def check_dominant_trees(n, heights): Determines whether each tree in the array is dominant based on its height. Parameters: n (int): The number of trees. heights (list of int): The heights of the trees. Returns: list of str: A list of strings, each being \\"DOMINANT\\" or \\"NOT DOMINANT\\". results = [] for i in range(n): if i == 0: # First tree if n == 1 or heights[i] > heights[i + 1]: results.append(\\"DOMINANT\\") else: results.append(\\"NOT DOMINANT\\") elif i == n - 1: # Last tree if heights[i] > heights[i - 1]: results.append(\\"DOMINANT\\") else: results.append(\\"NOT DOMINANT\\") else: # Middle trees if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: results.append(\\"DOMINANT\\") else: results.append(\\"NOT DOMINANT\\") return results"},{"question":"You are given a list of strings which represent binary numbers. Write a function that, for each binary number in the list, determines the maximum length of consecutive \'1\'s. If there are multiple segments of consecutive \'1\'s with the same maximum length, consider only one of them. Input: - The first line contains an integer `n`, the number of binary strings. - The next `n` lines each contain a binary string. Output: Print the maximum length of consecutive \'1\'s for each binary string. Constraints: 1 ≤ n ≤ 500 1 ≤ length of binary string ≤ 1000 SAMPLE INPUT 3 1101 111011 100001 SAMPLE OUTPUT 2 3 1","solution":"def max_consecutive_ones(binary_str): This function returns the maximum length of consecutive \'1\'s in a binary string. Parameters: - binary_str: string, input binary string Returns: - int, maximum length of consecutive \'1\'s return max(len(segment) for segment in binary_str.split(\'0\')) def process_binary_strings(n, binary_strings): This function processes a list of binary strings and prints the maximum length of consecutive \'1\'s for each string. Parameters: - n: int, number of binary strings - binary_strings: list of strings, the binary strings Returns: - list of int, maximum lengths of consecutive \'1\'s for each string return [max_consecutive_ones(binary_str) for binary_str in binary_strings]"},{"question":"You are given a rectangular grid with H rows and W columns. Each cell in the grid contains either a 0 or a 1. You want to determine if the grid has a path of 1s from the top-left corner (1,1) to the bottom-right corner (H,W). You can move up, down, left, or right, but only through cells containing the number 1. Constraints * 2 leq H,W leq 100 * The grid will always have at least one 1 in the top-left corner and one 1 in the bottom-right corner. Input Input is given from Standard Input in the following format: H W grid[0][0] grid[0][1] ... grid[0][W-1] grid[1][0] grid[1][1] ... grid[1][W-1] ... grid[H-1][0] grid[H-1][1] ... grid[H-1][W-1] Output If it is possible to reach the bottom-right corner from the top-left corner, print `Yes`; otherwise, print `No`. Examples Input 3 3 1 0 1 1 1 0 0 1 1 Output Yes Input 2 2 1 0 0 1 Output No","solution":"def is_path_exists(H, W, grid): def is_valid(x, y): return 0 <= x < H and 0 <= y < W and grid[x][y] == 1 def dfs(x, y): if x == H - 1 and y == W - 1: return True # Mark cell as visited grid[x][y] = -1 # Explore all possible directions directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and grid[nx][ny] == 1: if dfs(nx, ny): return True return False if grid[0][0] == 1 and grid[H-1][W-1] == 1: if dfs(0, 0): return \\"Yes\\" return \\"No\\" # Example usage: H = 3 W = 3 grid = [ [1, 0, 1], [1, 1, 0], [0, 1, 1] ] print(is_path_exists(H, W, grid)) # Output: Yes"},{"question":"In a certain kingdom, there is a peculiar tradition where the number of magical stones a wizard can collect in a given year is based on a unique sequence. The sequence starts with the numbers 1 and 2. Each subsequent number in the sequence is the sum of the previous two numbers modulo 100000 (to maintain the numbers within a manageable range). Formally, the sequence a_1, a_2, a_3, ... is defined as: - a_1 = 1 - a_2 = 2 - a_i = (a_{i-1} + a_{i-2}) % 100000 for i > 2 Given two integers M and N, where M ≤ N, you are to determine the number of distinct values in the sequence from the M-th term to the N-th term (inclusive). Input The input consists of two integers M and N (1 ≤ M ≤ N ≤ 1000000). Output Output one integer representing the number of distinct values in the sequence from the M-th term to the N-th term. Examples Input 3 6 Output 4 Input 5 10 Output 6 Note In the first example, the sequence from the 3rd to the 6th term is 3, 5, 8, 13. There are 4 distinct values. In the second example, the sequence from the 5th to the 10th term is 5, 8, 13, 21, 34, 55. There are 6 distinct values.","solution":"def count_distinct_values(m, n): Returns the number of distinct values in the sequence from the M-th term to the N-th term. if m == n: return 1 a1, a2 = 1, 2 sequence = [a1, a2] values_set = set(sequence) # Generate the sequence up to the N-th term for _ in range(3, n + 1): next_val = (sequence[-1] + sequence[-2]) % 100000 sequence.append(next_val) values_set.add(next_val) # Only consider values from the M-th to the N-th term return len(set(sequence[m-1:n]))"},{"question":"In a remote village, there is an old mechanical clock that operates in a unique manner. The clock has two circular rings, each divided into 12 equal sectors, numbered from 1 to 12. One ring represents hours (H) and the other represents minutes (M). Both rings start aligned at 12 o\'clock, and the clock rotates both rings simultaneously but at different speeds. Every time the clock ticks, the hour ring moves by one sector and the minute ring moves by m sectors. After n ticks, the positions of the hour and minute rings change accordingly. You are required to determine the final time shown on the clock after n ticks, where the time is given by the numbers on the hour and minute rings. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1,000) - the number of test cases. The following t lines each contain two integers n (1 ≤ n ≤ 10^9) and m (1 ≤ m ≤ 12), representing the total number of ticks and the speed multiplier for the minute ring respectively. Output For each test case, output the final time in the format \\"H:M\\" where H and M are the numbers on the hour and minute rings after n ticks. Example Input 3 5 3 12 7 25 4 Output 5:3 12:12 1:4 Explanation For the first test case, after 5 ticks, the hour ring points to 5 and the minute ring points to (5 * 3) % 12 = 3. For the second test case, after 12 ticks, the hour ring completes a full cycle (12 % 12 = 0, which corresponds to 12), and the minute ring points to (12 * 7) % 12 = 12. For the third test case, after 25 ticks, the hour ring points to (25 % 12) = 1 and the minute ring points to (25 * 4) % 12 = 4.","solution":"def final_time_after_ticks(t, test_cases): results = [] for n, m in test_cases: hour_ring_position = (n % 12) if hour_ring_position == 0: hour_ring_position = 12 minute_ring_position = (n * m) % 12 if minute_ring_position == 0: minute_ring_position = 12 results.append(f\\"{hour_ring_position}:{minute_ring_position}\\") return results"},{"question":"Vasya recently started learning about prime numbers. To reinforce his understanding, he decided to explore prime factorization. Given an integer N, he wants to determine the maximum power of any prime factor in its prime factorization. Your task is to help Vasya by writing a program that finds the maximum power of any prime factor in the factorization of N. Input: - The first line contains an integer T (1 ≤ T ≤ 1,000), the number of test cases. - Each of the next T lines contains a single integer N (2 ≤ N ≤ 10^9). Output: For each test case, output the maximum power of any prime factor in the prime factorization of the given integer N. Example Input: 3 18 50 72 Output: 2 2 3 Explanation: - The prime factorization of 18 is 2^1 * 3^2, and the maximum power is 2. - The prime factorization of 50 is 2^1 * 5^2, and the maximum power is 2. - The prime factorization of 72 is 2^3 * 3^2, and the maximum power is 3.","solution":"def max_power_prime_factor(n): This function finds the maximum power of any prime factor in the prime factorization of n. max_power = 0 current_power = 0 original_n = n # Check for number of 2s while n % 2 == 0: n //= 2 current_power += 1 if current_power > max_power: max_power = current_power # Check for odd factors from 3 to sqrt(n) factor = 3 while factor * factor <= n: current_power = 0 while n % factor == 0: n //= factor current_power += 1 if current_power > max_power: max_power = current_power factor += 2 # If n is a prime number and greater than 2 if n > 2: max_power = max(max_power, 1) return max_power def process_test_cases(T, test_cases): results = [] for n in test_cases: results.append(max_power_prime_factor(n)) return results"},{"question":"Alex is a security officer responsible for maintaining security logs on the company\'s servers. Each log entry records various activities, including user logins and operations performed by users. The log contains n entries, and each entry is represented as a JSON object with the following fields: - `timestamp`: The time the event occurred, in the format \\"YYYY-MM-DD HH:MM:SS\\" - `username`: The username of the individual performing the operation - `operation`: A description of the operation performed (e.g., \\"login\\", \\"create_user\\", \\"delete_file\\") Alex needs your help to analyze the log entries to identify suspicious activities. Specifically, Alex wants to find out which user performed the highest number of operations within any given one-hour window. Write a program that: 1. Reads a list of n log entries (1 <= n <= 200,000). 2. For each log entry, identifies the number of operations performed by the same user within a one-hour window centered around the log entry\'s timestamp. 3. Outputs the username of the user with the highest number of operations within any one-hour window and the corresponding number of operations. Input: - The first line contains an integer n, the number of log entries. - Each of the following n lines contains a JSON object representing a log entry. Output: - A single line containing the username of the user with the highest number of operations within any one-hour window and the number of operations. Example: Input: ``` 4 {\\"timestamp\\": \\"2023-10-01 12:00:00\\", \\"username\\": \\"alice\\", \\"operation\\": \\"login\\"} {\\"timestamp\\": \\"2023-10-01 12:30:00\\", \\"username\\": \\"alice\\", \\"operation\\": \\"create_user\\"} {\\"timestamp\\": \\"2023-10-01 13:00:00\\", \\"username\\": \\"alice\\", \\"operation\\": \\"delete_file\\"} {\\"timestamp\\": \\"2023-10-01 12:15:00\\", \\"username\\": \\"bob\\", \\"operation\\": \\"login\\"} ``` Output: ``` alice 3 ``` Note: - In the example, Alice performed three operations within the one-hour window centered around \\"2023-10-01 12:30:00\\". - Bob performed only one operation, so Alice is considered the user with the highest number of operations within any one-hour window.","solution":"from datetime import datetime, timedelta import json from collections import defaultdict def most_operations_in_one_hour_window(n, log_entries): logs = [] for entry in log_entries: logs.append(json.loads(entry)) logs.sort(key=lambda x: x[\\"timestamp\\"]) def parse_time(timestamp): return datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\") max_operations = 0 max_user = \\"\\" for i in range(n): current_time = parse_time(logs[i][\\"timestamp\\"]) user_operations = defaultdict(int) for j in range(n): log_time = parse_time(logs[j][\\"timestamp\\"]) if current_time - timedelta(hours=0.5) <= log_time <= current_time + timedelta(hours=0.5): user_operations[logs[j][\\"username\\"]] += 1 for user, count in user_operations.items(): if count > max_operations: max_operations = count max_user = user return f\\"{max_user} {max_operations}\\" # Example usage: # n = 4 # log_entries = [ # \'{\\"timestamp\\": \\"2023-10-01 12:00:00\\", \\"username\\": \\"alice\\", \\"operation\\": \\"login\\"}\', # \'{\\"timestamp\\": \\"2023-10-01 12:30:00\\", \\"username\\": \\"alice\\", \\"operation\\": \\"create_user\\"}\', # \'{\\"timestamp\\": \\"2023-10-01 13:00:00\\", \\"username\\": \\"alice\\", \\"operation\\": \\"delete_file\\"}\', # \'{\\"timestamp\\": \\"2023-10-01 12:15:00\\", \\"username\\": \\"bob\\", \\"operation\\": \\"login\\"}\' # ] # print(most_operations_in_one_hour_window(n, log_entries))"},{"question":"Jasmine loves creating shapes on her n × m checkered grid. Each cell in the grid can either be green (\'G\') or red (\'R\'). She wants to make the entire grid match her favorite alternating pattern: \'GRGRGR...\' in the first row, \'RGRGRG...\' in the second row, \'GRGRGR...\' in the third row, and so on. Given the initial state of the grid, help Jasmine determine if it is possible to recolor some cells to achieve her favorite pattern, and if so, how many cells would need to be recolored. If it\'s possible, print the minimum number of recoloring operations needed. If it\'s not possible, print -1. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each test case consists of: The first line contains two integers n and m (1 ≤ n, m ≤ 50), the dimensions of the grid. Each of the next n lines contains a string of m characters, each being either \'G\' or \'R\'. Output For each test case, output a single integer: the minimum number of cells that need to be recolored to achieve the pattern, or -1 if it is impossible. Example Input 3 3 3 GRG RGR GRG 4 4 GRGR RGRG GRGR RGRG 2 3 GGR RGG Output 0 0 3 Explanation In the first two examples, the grid already matches Jasmine\'s favorite pattern, so no cells need to be recolored. In the third example, at least three cells need to be changed to achieve the pattern: we need to change the cell (1,2) from \'G\' to \'R\', the cell (2,2) from \'G\' to \'R\', and the cell (2,3) from \'G\' to \'R\' to match the pattern.","solution":"def min_recolor_operations(t, test_cases): favorite_patterns = [[0] * t for _ in range(2)] # Generate the two types of favorite patterns def generate_pattern(n, m): pattern1 = [[\'G\' if (i + j) % 2 == 0 else \'R\' for j in range(m)] for i in range(n)] pattern2 = [[\'R\' if (i + j) % 2 == 0 else \'G\' for j in range(m)] for i in range(n)] return pattern1, pattern2 results = [] for case in test_cases: n, m, grid = case pattern1, pattern2 = generate_pattern(n, m) recolor1 = 0 recolor2 = 0 for i in range(n): for j in range(m): if grid[i][j] != pattern1[i][j]: recolor1 += 1 if grid[i][j] != pattern2[i][j]: recolor2 += 1 results.append(min(recolor1, recolor2)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, lines[index].split()) grid = [] for i in range(n): grid.append(lines[index + 1 + i]) test_cases.append((n, m, grid)) index += n + 1 return t, test_cases def min_recolor_from_input(input_str): t, test_cases = parse_input(input_str) results = min_recolor_operations(t, test_cases) return \'n\'.join(map(str, results))"},{"question":"Alex has recently started learning about data encryption and has come across the concept of \\"substitution ciphers\\". In a substitution cipher, each letter in a given text is replaced by another letter. Alex wants to create a simple substitution cipher where each letter is shifted by a fixed number of positions in the alphabet. Alphabet wrapping is considered, that is, after \'z\', it starts again from \'a\'. Write a function `substitute_cipher` that takes a string `plaintext` and an integer `shift` as input. The function should return the encrypted string where each letter in the original text has been shifted by `shift` positions in the alphabet. Preserve the case of the letters, and only alter alphabetic characters. For example, with a shift of 3, \'a\' becomes \'d\', \'b\' becomes \'e\', and so on. Note: - You may assume that the text only contains alphabetic characters and spaces. - Spaces should remain unchanged in the encrypted text. Input - A string `plaintext` containing the text to be encrypted (1 ≤ length of plaintext ≤ 1000). - An integer `shift` (1 ≤ shift ≤ 25). Output - A string containing the encrypted text. Examples Input \\"hello world\\" 3 Output \\"khoor zruog\\" Input \\"Python\\" 5 Output \\"Udymts\\"","solution":"def substitute_cipher(plaintext, shift): Encrypt a text using a simple substitution cipher where each letter is shifted by a fixed number of positions in the alphabet, preserving the case. Parameters: plaintext (str): The text to be encrypted. shift (int): The number of positions each letter should be shifted. Returns: str: The encrypted text. encrypted_text = [] for char in plaintext: if char.isalpha(): # Shift character within its case range if char.islower(): shifted_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) else: shifted_char = chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\')) encrypted_text.append(shifted_char) else: encrypted_text.append(char) return \'\'.join(encrypted_text)"},{"question":"Imagine you are working with a binary tree data structure, where each node has an integer value. You are required to implement a function that determines whether the tree is a binary search tree (BST). A binary search tree is a tree in which for each node, all elements in the left subtree are less than the node, and all elements in the right subtree are greater than the node. Input The input is provided as a serialized binary tree, where `null` values represent absent children nodes. The input consists of a list of integers and `null` values. For example, the serialized binary tree `[2, 1, 3]` represents the tree: ``` 2 / 1 3 ``` Output The output should be a single boolean value `true` if the tree is a binary search tree, and `false` otherwise. Examples Input ``` [2, 1, 3] ``` Output ``` true ``` Input ``` [5, 1, 4, null, null, 3, 6] ``` Output ``` false ``` Your task is to write a function `isValidBST` that takes the serialized binary tree as input and returns whether it is a valid binary search tree. Function Signature: ```python def isValidBST(tree: List[Optional[int]]) -> bool: pass ``` Constraints: - The number of nodes in the tree will be between 1 and 10000. - Node values are integers in the range `[-2^31, 2^31 - 1]`. - You may assume that the input tree is a valid binary tree.","solution":"from typing import List, Optional, Tuple def isValidBST(tree: List[Optional[int]]) -> bool: # Helper function to traverse and check the validity of BST def traverse_and_validate(index: int, low: float, high: float) -> Tuple[bool, float, float]: if index >= len(tree) or tree[index] is None: return (True, low, high) val = tree[index] # Check the current node value in the bounds if val <= low or val >= high: return (False, low, high) left_idx = 2 * index + 1 right_idx = 2 * index + 2 # Validate left subtree left_valid, _, _ = traverse_and_validate(left_idx, low, val) if not left_valid: return (False, low, high) # Validate right subtree right_valid, _, _ = traverse_and_validate(right_idx, val, high) if not right_valid: return (False, low, high) return (True, low, high) # Initiate the recursive validation with lowest and highest possible values result, _, _ = traverse_and_validate(0, float(\'-inf\'), float(\'inf\')) return result"},{"question":"Given an integer array `nums`, find the length of the longest increasing subsequence. A subsequence is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. An increasing subsequence is one in which the elements are in strictly increasing order. Constraints * 1 ≤ nums.length ≤ 2 * 10^4 * -10^4 ≤ nums[i] ≤ 10^4 Input Input is given from Standard Input in the following format: [n] [num1 num2 ... numn] Output Print the length of the longest increasing subsequence. Examples Input 8 10 9 2 5 3 7 101 18 Output 4 Input 6 0 1 0 3 2 3 Output 4","solution":"def length_of_LIS(nums): Returns the length of the longest increasing subsequence in the given list of numbers. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Given an array of integers and an integer `x`, you need to determine the length of the shortest subarray that has a sum greater than `x`. If no such subarray exists, return `-1`. Input The first line of input consists of two integers `n` and `x` (1 ≤ n ≤ 10^5, -10^9 ≤ x ≤ 10^9), where `n` is the number of elements in the array and `x` is the target sum. The second line contains `n` integers `a1, a2, ..., an` (-10^9 ≤ ai ≤ 10^9) representing the elements of the array. Output Print the length of the shortest subarray with a sum greater than `x`, or `-1` if no such subarray exists. Example Input 10 15 1 2 3 4 5 6 7 8 9 10 Output 2 Input 5 100 1 2 3 4 5 Output -1 Input 6 15 16 2 1 3 5 9 Output 1 Explanation In the first example, the shortest subarray with a sum greater than 15 is [7, 9] or [8, 10], each with length 2. In the second example, no subarray has a sum greater than 100, so the output is -1. In the third example, the shortest subarray with a sum greater than 15 is [16], with length 1. Note To solve this problem efficiently, we can use a sliding window approach to maintain a subarray with a sum greater than `x` and try to minimize its length. The algorithm should have a time complexity of O(n).","solution":"def shortest_subarray_length(arr, x): n = len(arr) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > x: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"A global online bookstore (similar to Amazon) keeps track of the number of books sold in each genre on a daily basis. The bookstore wants to analyze its sales performance and provide an encouraging message to the sales team. Write a function that takes two inputs: 1. A dictionary where keys are genre names and values are the number of books sold of that genre in a day. 2. A number K which indicates the minimum number of books that should be sold across all genres to consider the day successful. The function should: - Return a list of genres where sales were higher than or equal to K. - If no genre met the threshold, return the message \\"Keep pushing for higher sales!\\". Function signature: ```python def assess_book_sales(sales: Dict[str, int], K: int) -> Union[List[str], str]: ``` # Input Constraints - The dictionary will have at least one genre (key) and the number of books sold (value) will always be a non-negative integer. - K will be a non-negative integer. # Examples Example 1 **Input:** ```python sales = { \\"Science Fiction\\": 20, \\"Romance\\": 15, \\"Mystery\\": 0, \\"Fantasy\\": 30 } K = 15 ``` **Output:** ```python [\\"Science Fiction\\", \\"Romance\\", \\"Fantasy\\"] ``` Example 2 **Input:** ```python sales = { \\"Science Fiction\\": 10, \\"Romance\\": 5 } K = 15 ``` **Output:** ```python \\"Keep pushing for higher sales!\\" ```","solution":"from typing import Dict, List, Union def assess_book_sales(sales: Dict[str, int], K: int) -> Union[List[str], str]: Returns a list of genres with sales higher than or equal to K, or a motivational message if no genre met the threshold. successful_genres = [genre for genre, count in sales.items() if count >= K] if successful_genres: return successful_genres else: return \\"Keep pushing for higher sales!\\""},{"question":"You are given two strings, a text string `t` and a pattern string `p`, and you need to determine if the pattern `p` occurs in the text `t`. The pattern `p` may include wildcard characters: - `?` which matches any single character - `*` which matches any sequence of characters (including the empty sequence) Write a function to check if the pattern matches the text. Input - The first line contains the string `t` (1 ≤ length of `t` ≤ 1000). - The second line contains the string `p` (1 ≤ length of `p` ≤ 1000). Output - Print \\"YES\\" if the pattern matches the text. - Otherwise, print \\"NO\\". Examples Input 1: abcde a*e Output 1: YES Input 2: abcde a*d Output 2: NO Input 3: abcde a?c*e Output 3: YES","solution":"def is_match(text, pattern): Returns YES if the given pattern matches the text with wildcards: \'?\' which matches any single character \'*\' which matches any sequence of characters (including the empty sequence). Otherwise returns NO. # Lengths of text and pattern t_len = len(text) p_len = len(pattern) # DP table where dp[i][j] means if text[0:i] matches pattern[0:j] dp = [[False] * (p_len + 1) for _ in range(t_len + 1)] # Empty text and empty pattern are a match dp[0][0] = True # Fill for patterns with * for j in range(1, p_len + 1): if pattern[j - 1] == \'*\': dp[0][j] = dp[0][j - 1] # Fill the dp table for i in range(1, t_len + 1): for j in range(1, p_len + 1): if pattern[j - 1] == \'*\': dp[i][j] = dp[i - 1][j] or dp[i][j - 1] elif pattern[j - 1] == \'?\' or text[i - 1] == pattern[j - 1]: dp[i][j] = dp[i - 1][j - 1] if dp[t_len][p_len]: print(\\"YES\\") else: print(\\"NO\\")"},{"question":"You are given a grid of size N x N. Each cell in the grid can either be empty (.) or contain an obstacle (#). Your task is to determine the number of distinct paths from the top-left corner (0, 0) to the bottom-right corner (N-1, N-1) of the grid. You can move either right or down from a cell. A path cannot go through any cell containing an obstacle. Write a program to determine the number of such paths. Input: - The first line contains an integer T (1 <= T <= 10), the number of test cases. - For each test case: - The first line contains an integer N (1 <= N <= 10), the size of the grid. - The next N lines each contain a string of length N representing the grid. Output: - For each test case, print the number of distinct paths from the top-left to the bottom-right corner. - Each test case output should be prefixed by a header “TestCase x:” where x equals the test case number. Example: Input: 2 3 ... .#. ... 4 .... .#.. .... ..#. Output: TestCase 1: 2 TestCase 2: 4 Explanation: For test case 1: There are two distinct paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right For test case 2: There are four distinct paths: 1. Right -> Right -> Right -> Down -> Down -> Down 2. Right -> Right -> Down -> Down -> Down -> Right 3. Down -> Right -> Right -> Right -> Down -> Down 4. Down -> Down -> Right -> Right -> Right -> Down","solution":"def count_paths(grid): N = len(grid) if grid[0][0] == \'#\' or grid[N-1][N-1] == \'#\': return 0 dp = [[0] * N for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(N): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][N-1] def find_paths(test_cases): results = [] for k in range(len(test_cases)): N, grid = test_cases[k] res = count_paths(grid) results.append(f\\"TestCase {k+1}:n{res}\\") return results def main(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) grid = [] for i in range(N): grid.append(lines[index + 1 + i]) test_cases.append((N, grid)) index += N + 1 results = find_paths(test_cases) return \'n\'.join(results)"},{"question":"Problem description Alex is working on a logistics application that deals with managing warehouse storage in real-time. The warehouse can be modeled as a 2-dimensional grid where each cell in the grid can store a certain number of packages. Each cell has a limited storage capacity and Alex wants to ensure that the grid is always balanced. A grid is considered balanced if the difference between the sum of packages in any two rows is at most D, and the difference between the sum of packages in any two columns is also at most D. Alex needs a program to determine if the grid is balanced after any set of updates. The program should process a series of updates where each update changes the number of packages in a specific cell. After processing all updates, the program should output whether the grid remains balanced. Input The first line contains three integers R, C, and D, representing the number of rows, number of columns, and the maximum allowable difference D. The second line contains an integer U, representing the number of updates. This is followed by U lines, each containing three integers r, c, and p, where r specifies the row, c specifies the column, and p specifies the new number of packages in the (r, c) cell. Output Output a single line, \\"YES\\" if the grid is balanced after all updates, and \\"NO\\" otherwise. Constraints 1 <= R, C <= 1000 0 <= D <= 100000 1 <= U <= 100000 0 <= p <= 100000 Example Input: 4 4 10 3 1 1 5 2 2 10 3 3 2 Output: YES Explanation Initially, the grid\'s sum of packages in any rows or columns is 0, which is balanced. After updating the cells according to the provided updates: - Cell (1,1) contains 5 packages - Cell (2,2) contains 10 packages - Cell (3,3) contains 2 packages The sums of the rows are [5, 10, 2, 0] and the sums of the columns are [5, 10, 2, 0]. The maximum difference between any two rows or columns is 8, which is less than D=10. Therefore, the grid remains balanced and the output is \\"YES\\".","solution":"def is_grid_balanced(R, C, D, updates): row_sums = [0] * R col_sums = [0] * C for r, c, p in updates: row_sums[r-1] += p col_sums[c-1] += p max_row_sum = max(row_sums) min_row_sum = min(row_sums) max_col_sum = max(col_sums) min_col_sum = min(col_sums) if (max_row_sum - min_row_sum <= D) and (max_col_sum - min_col_sum <= D): return \\"YES\\" else: return \\"NO\\""},{"question":"A company is developing a financial analytics tool and has a task to find trends in stock prices. A stock analyst is given an array of integers representing the daily prices of a particular stock. They want to find the maximum possible profit from one transaction, i.e., to identify the best day to buy and the best day to sell the stock to achieve the highest profit. A transaction consists of buying one share of the stock on a given day and selling it on another future day. Your task is to write a program that calculates the maximum profit that can be achieved from a single buy-sell transaction. If no profit can be made, return 0. Input The first line contains an integer n (1 ≤ n ≤ 100000), the number of days for which prices are available. The second line contains n integers p1, p2, ..., pn (0 ≤ pi ≤ 100000), where pi represents the stock price on the i-th day. Output Output a single integer, the maximum profit that can be achieved from one transaction. If no profit can be made, output 0. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 Note In the first example, the best buy-sell transaction is to buy on day 2 (price 1) and sell on day 5 (price 6), for a maximum profit of 6-1=5. In the second example, no profit can be made as the prices only decrease over time. Therefore, the output is 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a single buy-sell transaction. If no profit can be made, returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"You are building an application that involves managing a series of events, each represented by a start time and an end time. The application needs to find an optimal way to schedule these events using a single resource such that the maximum number of events are accommodated without any overlap. Write a function `schedule_events(events: List[Tuple[int, int]]) -> List[Tuple[int, int]]` that takes a list of events, where each event is represented as a tuple (start_time, end_time), and returns a list of non-overlapping events that can be attended. If there are multiple solutions, you can return any of them. Your task is to implement this function under the following constraints: 1. Events do not overlap if for any two events (start1, end1) and (start2, end2), end1 <= start2 or end2 <= start1. 2. The input will have at most 1000 events. 3. The start and end times are integers within the range [0, 10^6]. Example: Input: ```python events = [(1, 3), (2, 5), (6, 7), (7, 8), (5, 6)] ``` Output: ```python [(1, 3), (6, 7), (7, 8)] ``` Explanation: The optimal solution is to select events (1, 3), (6, 7), and (7, 8), which can all be attended without overlap. Input: ```python events = [(1, 2), (2, 3), (3, 4), (1, 5)] ``` Output: ```python [(1, 2), (2, 3), (3, 4)] ``` Explanation: The optimal solution is to select events (1, 2), (2, 3), and (3, 4). Alternatively, you could also return other valid solutions like [(2, 3), (3, 4), (1, 2)] as they all ensure the maximum number of non-overlapping events. Note: You should aim for an efficient solution to handle up to 1000 events within the constraints.","solution":"from typing import List, Tuple def schedule_events(events: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Schedules the maximum number of non-overlapping events. # Sort events by their end times events.sort(key=lambda x: x[1]) # Selected events scheduled = [] current_end_time = -1 for event in events: if event[0] >= current_end_time: scheduled.append(event) current_end_time = event[1] return scheduled"},{"question":"Sam has recently started a new business and he is keeping track of his monthly expenses and income. As the business grows, it becomes hard to manually calculate the net profit/loss for each month. To help him automate this, you are tasked to create a program that reads the monthly income and expense values of a few months and calculates the net profit or loss for each month. Input: The first line of input contains a single integer T, the number of test cases. Each test case starts with a line containing the integer M, the number of months. The next line contains M space-separated integers representing the monthly income. The line after that contains M space-separated integers representing the monthly expenses. Output: For each test case, output M space-separated integers where each integer represents the net profit (positive value) or loss (negative value) for each month. Constraints: 1 ≤ T ≤ 10 1 ≤ M ≤ 12 0 ≤ income[i], expense[i] ≤ 100000 Example: Input: 2 3 5000 6000 7000 3000 4000 8000 2 1000 2000 1000 3000 Output: 2000 2000 -1000 0 -1000 Explanation: In the first test case, the net profit/loss for each month is calculated as follows: Month 1: 5000 - 3000 = 2000 Month 2: 6000 - 4000 = 2000 Month 3: 7000 - 8000 = -1000 In the second test case: Month 1: 1000 - 1000 = 0 Month 2: 2000 - 3000 = -1000","solution":"def calculate_net_profit_or_loss(test_cases): results = [] for test in test_cases: M = test[\'months\'] incomes = test[\'incomes\'] expenses = test[\'expenses\'] result = [incomes[i] - expenses[i] for i in range(M)] results.append(result) return results"},{"question":"Bob is a gardener who loves planting flowers in a rectangular garden. The garden is represented as an n × m grid, where each cell can hold only one flower. Bob has a variety of flowers, and each type of flower can blossom in different colors. However, Bob wants every flower in a row to have a unique color to make the garden look more beautiful and organized. Given the dimensions of the garden and the number of colors available, determine whether Bob can plant the flowers such that no two flowers in the same row have the same color. Input The input contains two integers, n and m (1 ≤ n, m ≤ 100), the number of rows and columns of the garden respectively, followed by an integer c (1 ≤ c ≤ 100), the number of different colors available. Output Print \\"YES\\" if Bob can plant the flowers such that no two flowers in any row have the same color. Otherwise, print \\"NO\\". Examples Input 2 3 3 Output YES Input 2 4 3 Output NO Note In the first example, Bob has 3 colors, which is enough for each row in his 2x3 garden, as he can use all three colors without repeating any in the same row. In the second example, even though Bob has 3 colors, he cannot plant the flowers in his 2x4 garden without repeating a color in at least one row since each row requires 4 unique colors.","solution":"def can_plant_flowers(n, m, c): Determines if Bob can plant the flowers such that no two flowers in the same row have the same color. Parameters: n (int): Number of rows in the garden grid. m (int): Number of columns in the garden grid. c (int): Number of different colors available. Returns: str: \\"YES\\" if Bob can plant the flowers as described, otherwise \\"NO\\". # For each row, Bob needs m unique colors if m <= c: return \\"YES\\" else: return \\"NO\\""},{"question":"A company uses a warehouse to store its products. The warehouse has a specific capacity, and products are added and removed from the warehouse at various times. You need to create a program that helps determine if the warehouse was overloaded at any point in time when a sequence of product additions and removals is applied. You are provided with the initial capacity of the warehouse, and a series of events indicating the addition or removal of products. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow. Each test case starts with an integer n (1 ≤ n ≤ 1000) — the initial capacity of the warehouse. The next line contains an integer m (1 ≤ m ≤ 1000) — the number of events. The following m lines describe the events. Each event is represented by a string of the form \\"+ x\\" or \\"- x\\", where \\"+\\" indicates the addition of products and \\"-\\" indicates the removal of products, and x (1 ≤ x ≤ 1000) is the number of products involved in the transaction. Output For each test case, output \\"YES\\" if the warehouse was not overloaded at any time, otherwise output \\"NO\\". Example Input 2 100 3 + 50 + 30 - 20 50 4 + 30 + 30 - 10 + 20 Output YES NO Note In the first test case, the maximum number of products in the warehouse at any point in time is 60 (50 after the first event and 80 after the second event, but reduced to 60 after the third event), which does not exceed the initial capacity of 100. In the second test case, after the second event, the number of products is 60, and after the fourth event, it becomes 90, both of which are less than the capacity of 50. Hence, the warehouse was overloaded.","solution":"def was_warehouse_overloaded(test_cases): results = [] for test_case in test_cases: n, m, events = test_case current_load = 0 overloaded = False for event in events: op, x = event.split() x = int(x) if op == \\"+\\": current_load += x elif op == \\"-\\": current_load -= x if current_load > n: overloaded = True break results.append(\\"NO\\" if overloaded else \\"YES\\") return results"},{"question":"Polycarp has a list of integers and he wants to determine the maximum sum of any contiguous subarray of the list. However, Polycarp also has a restriction: he can change at most one element in the array to any other integer he wishes. Your task is to help Polycarp by determining the maximum possible sum of any contiguous subarray after changing at most one element. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the list. The second line contains n integers a1, a2, ..., an (−10^4 ≤ ai ≤ 10^4) — the elements of the list. Output Print the maximum possible sum of any contiguous subarray after changing at most one element. Examples Input 5 1 -2 3 -4 5 Output 8 Input 3 -1 -2 -3 Output 0 Note In the first example, Polycarp can change the element -4 to 4, resulting in the array [1, -2, 3, 4, 5]. The sum of the subarray [3, 4, 5] is 12. However, a better option is to change -2 to 5, resulting in [1, 5, 3, -4, 5]. The sum of the subarray [1, 5, 3, -4, 5] is 8. In the second example, the best option is to change -1 to 0, resulting in the array [0, -2, -3]. The sum of the subarray [0] is 0.","solution":"def max_sum_with_one_change(n, arr): def kadane(arr): max_sum = current_sum = arr[0] for x in arr[1:]: current_sum = max(x, current_sum + x) max_sum = max(max_sum, current_sum) return max_sum max_sum = kadane(arr) for i in range(n): original = arr[i] # Attempt changing arr[i] to 0 and then applying kadane\'s algorithm arr[i] = 0 max_sum = max(max_sum, kadane(arr)) arr[i] = original return max_sum"},{"question":"Input The input contains three integers n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 500) separated by a single space. Output Output a single integer. Examples Input 5 5 3 Output 2 Input 10 6 15 Output 9 Input 8 8 20 Output 6","solution":"def calculate_difference(n, m, k): Calculate the difference (n * m) - k. return (n * m) - k"},{"question":"Charlotte is a passionate gardener, and she wants to create a beautiful flower pattern in her rectangular garden. The garden is represented as a grid with \'n\' rows and \'m\' columns, where each cell can either contain a flower (represented by the character \'*\') or be empty (represented by the character \'.\'). Charlotte wants to plant flowers in such a way that each flower is part of a \\"flower bed\\". A flower bed is a contiguous sub-grid of size 1x2 (one cell high and two cells wide) or 2x1 (two cells high and one cell wide) completely filled with flowers. You need to help Charlotte determine the number of valid flower beds in the garden. Input The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the number of rows and columns in the garden. The next \'n\' lines contain \'m\' characters each, representing the garden grid. Output Output a single integer — the number of valid flower beds in the garden. Example Input 4 4 .... .**. **.. .... Output 3 Explanation In this case, there are 3 valid flower beds: - One 1x2 bed at position (2,2) to (2,3) - One 2x1 bed at position (2,2) to (3,2) - One 2x1 bed at position (2,3) to (3,3)","solution":"def count_flower_beds(n, m, garden): count = 0 for i in range(n): for j in range(m): if j + 1 < m and garden[i][j] == \'*\' and garden[i][j + 1] == \'*\': count += 1 if i + 1 < n and garden[i][j] == \'*\' and garden[i + 1][j] == \'*\': count += 1 return count # Example usage n = 4 m = 4 garden = [ \\"....\\", \\".**.\\", \\"**..\\", \\"....\\" ] print(count_flower_beds(n, m, garden)) # Output should be 3"},{"question":"A dynamic cargo transportation company needs an automated way to manage their delivery routes. They have a network of interconnected cities and various routes between these cities, each with a specific travel time. To ensure timely delivery of goods, they need to calculate the shortest travel time between two cities. You are tasked with writing a program that determines the minimum travel time between a starting city and an ending city. Input The first input line contains two integers n and m, separated by a space, where n is the number of cities (1 ≤ n ≤ 500) and m is the number of routes (0 ≤ m ≤ 10,000). Each of the next m lines contains three integers u, v, and t, separated by a space, which represent a direct route from city u to city v with travel time t (1 ≤ t ≤ 1000). The cities are numbered from 1 to n. The next input line contains two integers, start and end, which are the starting city and the ending city for the cargo delivery. Output Print the minimum travel time from the starting city to the ending city. If there is no possible route, print -1. Examples Input 5 6 1 2 4 1 3 2 2 3 1 2 4 7 3 4 3 4 5 1 1 5 Output 6 Input 3 1 1 2 3 2 3 1 1 3 Output -1 Note In the first sample, the shortest route from city 1 to city 5 is 1 -> 3 -> 4 -> 5 with a travel time of 2 + 3 + 1 = 6. In the second sample, there is no route from city 1 to city 3, so the output is -1.","solution":"import heapq def dijkstra(n, edges, start, end): graph = [[] for _ in range(n + 1)] for u, v, t in edges: graph[u].append((v, t)) graph[v].append((u, t)) # Priority queue to keep track of the minimum travel times pq = [(0, start)] travel_time = {i: float(\'inf\') for i in range(1, n+1)} travel_time[start] = 0 while pq: curr_time, u = heapq.heappop(pq) if curr_time > travel_time[u]: continue for v, t in graph[u]: time = curr_time + t if time < travel_time[v]: travel_time[v] = time heapq.heappush(pq, (time, v)) return travel_time[end] if travel_time[end] != float(\'inf\') else -1 # Example usage: n = 5 m = 6 edges = [ (1, 2, 4), (1, 3, 2), (2, 3, 1), (2, 4, 7), (3, 4, 3), (4, 5, 1) ] start = 1 end = 5 print(dijkstra(n, edges, start, end)) # Output should be 6"},{"question":"Bob loves gardening and has a spacious garden with several plots. Each plot can hold a certain number of plants, each producing a different amount of fruits based on the current season. Bob wants to maximize the total fruits produced in his garden by allocating the right number of plants in each plot according to the season\'s productivity rates. Given the productivity rates for each plot, help Bob determine the maximum number of fruits his garden can yield. Input: The first line consists of two integers, P and Q. P denotes the number of plots in the garden, and Q denotes the total number of plants available. The second line consists of P space-separated integers Y[1], Y[2], ..., Y[P], where Y[i] denotes the number of fruits produced by a single plant in the i-th plot. Output: Print in a single line the maximum possible fruits Bob can collect from his garden. Constraints: 1 ≤ P ≤ 100000 1 ≤ Q ≤ 100000 1 ≤ Y[i] ≤ 1000 SAMPLE INPUT 3 7 5 3 9 SAMPLE OUTPUT 63 Explanation In the sample test case, the number of plots is 3, and there are 7 plants available. The productivity rates for the plots are 5, 3, and 9 fruits per plant respectively. To maximize the fruits, Bob should allocate plants optimally: - He places 7 plants in the plot with productivity rate 9. Total fruits = 7 * 9 = 63 fruits.","solution":"def max_fruits(P, Q, Y): Returns the maximum number of fruits that can be collected. Parameters: P (int): Number of plots. Q (int): Total number of plants. Y (list of int): List of productivity rates of each plot. Returns: int: Maximum number of fruits that can be collected. Y.sort(reverse=True) max_fruits = 0 for rate in Y: if Q <= 0: break max_fruits += rate * Q Q = 0 return max_fruits"},{"question":"Design a function that takes two arguments: a positive integer `N` representing the number of days and a list of dictionaries `price_changes` where each dictionary contains the following keys: - `day` - an integer representing the day on which the price change occurred. - `change` - a float number representing the change in stock price (it could be either positive or negative). The function should return a list of dictionaries where each dictionary contains: - `day` - an integer representing the day. - `price` - a float number representing the stock price at the end of each day. Assume the initial stock price at the beginning of day 1 is 100.0. # Example Input ```python N = 5 price_changes = [ {\'day\': 1, \'change\': 1.5}, {\'day\': 2, \'change\': -0.5}, {\'day\': 4, \'change\': 2.0}, ] ``` Output ```python [ {\'day\': 1, \'price\': 101.5}, {\'day\': 2, \'price\': 101.0}, {\'day\': 3, \'price\': 101.0}, {\'day\': 4, \'price\': 103.0}, {\'day\': 5, \'price\': 103.0}, ] ``` Explanation - On day 1, the price increases by 1.5, so the price becomes 101.5. - On day 2, the price decreases by 0.5, so the price becomes 101.0. - On day 3, there\'s no price change recorded, so the price remains 101.0. - On day 4, the price increases by 2.0, so the price becomes 103.0. - On day 5, there\'s no price change recorded, so the price remains 103.0. # Constraints - `1 <= N <= 100` - The `day` values in `price_changes` will be unique and in the range of 1 to N. - The precision of the float values in the output should be rounded to one decimal place.","solution":"def get_stock_prices(N, price_changes): Calculates the stock prices at the end of each day. Args: N (int): Number of days. price_changes (list): List of dictionaries with \'day\' and \'change\'. Returns: list: List of dictionaries with \'day\' and \'price\' at the end of each day. # Initial price initial_price = 100.0 # Dictionary to hold price changes by day price_dict = {change[\'day\']: change[\'change\'] for change in price_changes} result = [] current_price = initial_price for day in range(1, N + 1): if day in price_dict: current_price += price_dict[day] result.append({\'day\': day, \'price\': round(current_price, 1)}) return result"},{"question":"In this problem, you have a hidden list of n integers, where each integer is in the range from 0 to m-1 (inclusive). You want to reconstruct the list, but you can only obtain certain types of information from the list. You are allowed to make q queries. In each query, you can ask for the sum of any subarray (a contiguous part of the list). Specifically, for each query, you can specify two indices i and j (1 <= i <= j <= n) and the answer will be the sum of the subarray from position i to position j. Using this information, you are required to reconstruct the original list. Input: The input consists of three parts: 1. An integer n (1 <= n <= 100) representing the length of the list. 2. An integer m (1 <= m <= 100) representing the range of each integer in the list. 3. An integer q (1 <= q <= 10^4) representing the number of queries you can make. Interaction: For each query, you should print \\"? i j\\" (without quotes) indicating the subarray from position i to position j (1-based indexing). Then, read an integer which represents the sum of the subarray from the ith to jth position. To print the final answer, print \\"! a_1 a_2 ... a_n\\" (without quotes), where a_1 to a_n are the elements of the original list. If the number of queries exceeds q, you will receive -1 as a response to any further queries. You must exit immediately and print the correct answer before making any invalid queries or querying more than q times to avoid receiving a wrong answer verdict. Example: Input 5 10 20 Output: ? 1 2 7 ? 2 3 12 ? 4 5 12 ! 3 4 8 2 10 Explanation: The list is [3, 4, 8, 2, 10]. You first query the subarray from index 1 to 2, which returns 7. Querying the subarray from index 2 to 3 returns 12. Querying the subarray from index 4 to 5 returns 12. Based on this information, you deduce the original list and print the answer.","solution":"def reconstruct_list(n, m, q, query_function): Reconstructs the hidden list based on the allowed queries. Args: n (int): Length of the list. m (int): Range of each integer. q (int): Number of allowed queries. query_function (function): Function to make queries in the form of query_function(i, j). Returns: list: The reconstructed list. # Create a list to store the reconstructed numbers result = [0] * n # We will query the sum of elements from the start to each index # to get the prefix sums which will help us to deduce the individual elements prefix_sums = [0] * (n + 1) for i in range(1, n + 1): if i == 1: # For the first element just query from 1 to 1 prefix_sums[i] = query_function(1, 1) result[i-1] = prefix_sums[i] else: # For other elements, query from 1 to i prefix_sums[i] = query_function(1, i) # Deduce the current element using the prefix sum result[i-1] = prefix_sums[i] - prefix_sums[i-1] return result"},{"question":"A traveling circus has arrived at your town, bringing with it a collection of exotic animals. The circus has k animal trainers, and each trainer has a certain number of working hours per day. Each animal requires a specific amount of training time. Your task is to determine if it is possible to schedule all required animal training within one day. Each trainer can train only one animal at a time, and training for each animal must be contiguous (i.e., once it starts, it continues until it finishes). Input The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100). The second line contains k integers, where the ith integer is the number of working hours of the ith trainer (1 ≤ working hours ≤ 100). Each of the next n lines contains a single integer, the training time required for each animal (1 ≤ training time ≤ 100). Output Output \\"Yes\\" if it is possible to schedule all the training within one day, otherwise output \\"No\\". Examples Input 1 3 2 8 8 3 5 7 Output 1 Yes Input 2 3 2 4 5 5 4 2 Output 2 No Explanation In the first example, one possible schedule is: - Trainer 1 trains the first animal for 3 hours and then the second animal for 5 hours. - Trainer 2 trains the third animal for 7 hours. In the second example, it is not possible to train all animals because there is not enough total working hours across all trainers.","solution":"def can_schedule_all_training(n, k, trainer_hours, animal_times): # Sort the trainer hours in descending order trainer_hours.sort(reverse=True) # Sort the animal times in descending order animal_times.sort(reverse=True) # Try to assign each animal to a trainer for i in range(n): assigned = False for j in range(k): if trainer_hours[j] >= animal_times[i]: trainer_hours[j] -= animal_times[i] assigned = True break if not assigned: return \\"No\\" return \\"Yes\\""},{"question":"In the world of fantasy gaming, warriors use various potions to enhance their abilities and gain advantages in battles. These potions can be of different types and strengths. Every potion has a certain effectiveness value, which is defined by its type and its strength. You are given a list of potions, where each potion is characterized by its type (a string) and its strength (an integer). You are also given a list of queries. Each query specifies a type and a minimum strength, asking for the number of potions of the given type that have at least the specified strength. Write a program to process the queries and return the answers. # Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of potions. The next n lines describe the potions. Each line contains a string ti (1 ≤ |ti| ≤ 10) and an integer si (1 ≤ si ≤ 10^9) — the type and the strength of the i-th potion. The next line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. The next q lines describe the queries. Each line contains a string tq (1 ≤ |tq| ≤ 10) and an integer sq (1 ≤ sq ≤ 10^9) — the type and the minimum strength in the query. # Output For each query, output a single integer — the number of potions of the given type that have at least the specified strength. # Example Input ``` 5 healing 50 strength 100 healing 75 strength 200 mana 30 3 healing 60 strength 150 mana 10 ``` Output ``` 1 1 1 ``` # Explanation - The first query asks for the number of healing potions with strength of at least 60. There is 1 potion that meets this condition (`healing 75`). - The second query asks for the number of strength potions with strength of at least 150. There is 1 potion that meets this condition (`strength 200`). - The third query asks for the number of mana potions with strength of at least 10. There is 1 potion that meets this condition (`mana 30`).","solution":"def process_queries(potions, queries): from collections import defaultdict import bisect # Create a dictionary to store lists of strengths for each potion type potion_dict = defaultdict(list) # Populate the dictionary with potion types and their strengths for potion_type, strength in potions: potion_dict[potion_type].append(strength) # Sort the strengths for each potion type for key in potion_dict: potion_dict[key].sort() # Function to count potions with required strength using binary search def count_potions(potion_type, min_strength): if potion_type not in potion_dict: return 0 strengths = potion_dict[potion_type] idx = bisect.bisect_left(strengths, min_strength) return len(strengths) - idx # Process each query and apply the counting function results = [] for query_type, min_strength in queries: results.append(count_potions(query_type, min_strength)) return results # Example usage potions = [(\\"healing\\", 50), (\\"strength\\", 100), (\\"healing\\", 75), (\\"strength\\", 200), (\\"mana\\", 30)] queries = [(\\"healing\\", 60), (\\"strength\\", 150), (\\"mana\\", 10)] result = process_queries(potions, queries) print(result) # Output: [1, 1, 1]"},{"question":"A sequence of numbers is generated such that each number is the sum of the previous two numbers. The sequence starts with two given integers a and b. The task is to find the nth number in the sequence (considering the first number in the sequence is at position 1). (Input – a, b, n Output – nth number in the sequence) SAMPLE INPUT 1 2 5 SAMPLE OUTPUT 12","solution":"def nth_fibonacci_like(a, b, n): Returns the nth number in a Fibonacci-like sequence starting with a and b. if n == 1: return a elif n == 2: return b for _ in range(3, n+1): a, b = b, a + b return b"},{"question":"Given a string s and an integer N, construct a new string by repeating the following operation exactly N times: Remove the last character of s and append that character to the beginning of the string. Constraints * 1 ≤ |s| ≤ 1000 * 1 ≤ N ≤ 10^6 Input The input is given from Standard Input in the following format: s N Output Print the resulting string after applying the operation N times. Examples Input abcde 2 Output deabc Input hello 1 Output ohell Input rotate 6 Output rotate","solution":"def rotate_string(s, N): Rotate the string by removing the last character and appending it to the beginning N times. Parameters: s (str): The input string. N (int): The number of times to perform the operation. Returns: str: The resulting string after N operations. n = len(s) N = N % n # To handle cases where N > len(s) if N == 0: return s return s[-N:] + s[:-N]"},{"question":"A robotics team is working on an autonomous vehicle navigation system. They are given a grid representing a city map. Each cell in the grid can be either a road or a building. Roads are represented by the character \'R\' and buildings are represented by the character \'B\'. The vehicle can travel on roads but cannot pass through buildings. The team needs to ensure that the vehicle can reach every road cell from any other road cell directly or indirectly. They need your help to determine if the entire road network is connected. Write a function that takes the grid as input and returns `True` if the vehicle can travel between any two road cells, otherwise returns `False`. # Function Signature: ```python def is_road_network_connected(grid: List[List[str]]) -> bool: ``` # Input: - `grid` - a list of n lists, each containing m characters (\'R\' or \'B\') where 1 ≤ n, m ≤ 100. - Each cell represents a 1x1 block in the city where: - \'R\' indicates a road - \'B\' indicates a building # Output: - Return `True` if any road cell is reachable from every other road cell, otherwise return `False`. # Example: Input: ```python grid = [ [\'R\', \'R\', \'B\', \'R\'], [\'R\', \'B\', \'R\', \'R\'], [\'R\', \'R\', \'R\', \'B\'] ] ``` Output: `True` Input: ```python grid = [ [\'R\', \'B\', \'R\', \'B\'], [\'B\', \'B\', \'B\', \'R\'], [\'R\', \'R\', \'R\', \'B\'] ] ``` Output: `False` # Note: In the first example, all road cells are connected directly or indirectly through other road cells. Thus, the output is `True`. In the second example, there are two separate clusters of road cells that are not connected to each other. Thus, the output is `False`. Ensure to properly handle edge cases such as no road cells at all, or every cell being a road. # Constraints: - n, m ≤ 100 - grid only contains characters \'R\' and \'B\'.","solution":"def is_road_network_connected(grid): n, m = len(grid), len(grid[0]) def valid(x, y): return 0 <= x < n and 0 <= y < m def dfs(x, y, visited): stack = [(x, y)] while stack: cx, cy = stack.pop() visited[cx][cy] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if valid(nx, ny) and not visited[nx][ny] and grid[nx][ny] == \'R\': stack.append((nx, ny)) visited = [[False] * m for _ in range(n)] start_candidate = None for i in range(n): for j in range(m): if grid[i][j] == \'R\': start_candidate = (i, j) break if start_candidate: break if not start_candidate: return True start_x, start_y = start_candidate dfs(start_x, start_y, visited) for i in range(n): for j in range(m): if grid[i][j] == \'R\' and not visited[i][j]: return False return True"},{"question":"The Wizard of Dessert has now charmed the Chef with yet another challenge involving a special sequence of N ingredients, each with a uniquely magical delish value. This time, the preparation of the dish involves creating a continuous stretch of ingredients such that the stretch has a special \\"zig-zag\\" pattern in terms of its delish values. To define a zig-zag pattern, the delish value should alternate between increasing and decreasing (for example, up-down-up or down-up-down). The Chef needs your help to determine the length of the longest zig-zag patterned subsequence he can extract from the given sequence of ingredients. Input The first line of input contains an integer T denoting the number of test cases. Each test case starts with an integer N, the number of ingredients, followed by a line of N space-separated integers representing the delish values of the ingredients. Output For each test case, print the length of the longest zig-zag patterned subsequence. Constraints - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 10000 - -1000 ≤ D[i] ≤ 1000 Example Input: 2 6 1 7 4 9 2 5 5 1 4 7 2 5 Output: 6 4 Explanation In the first example, the entire sequence {1, 7, 4, 9, 2, 5} is a zig-zag pattern. In the second example, the longest zig-zag subsequence is {1, 7, 2, 5}, which has a length of 4. Note: A single element or two consecutive elements also form a trivial zig-zag pattern.","solution":"def longest_zigzag_sequence(arr): n = len(arr) if n < 2: return n up = 1 down = 1 for i in range(1, n): if arr[i] > arr[i-1]: up = down + 1 elif arr[i] < arr[i-1]: down = up + 1 return max(up, down) def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] results.append(longest_zigzag_sequence(arr)) return results"},{"question":"Given a list of integers, create a program to find all unique triplets in the list which give the sum of zero. Input The first line of input contains an integer N, the number of elements in the list. The second line contains N space-separated integers representing the elements of the list. Output Output all unique triplets [a, b, c] such that a + b + c = 0 in a single line as space-separated lists. Triplets within the same result should be listed in non-descending order. If no triplets are found, output an empty list. Example Input: 6 -1 0 1 2 -1 -4 Output: [-1, -1, 2] [-1, 0, 1] Input: 3 0 1 -1 Output: [-1, 0, 1] Input: 4 1 2 3 4 Output: []","solution":"def find_unique_triplets(N, nums): Returns unique triplets from the list which give the sum of zero. nums.sort() triplets = [] for i in range(N): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, N - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == 0: triplets.append([nums[i], nums[left], nums[right]]) left += 1 right -= 1 while left < right and nums[left] == nums[left - 1]: left += 1 while left < right and nums[right] == nums[right + 1]: right -= 1 elif current_sum < 0: left += 1 else: right -= 1 return triplets"},{"question":"Write a function to implement the Merge Sort algorithm, which sorts a sequence A in ascending order. The algorithm should be based on the following pseudocode: MergeSort(A, left, right): if left < right: mid = (left + right) // 2 MergeSort(A, left, mid) MergeSort(A, mid + 1, right) Merge(A, left, mid, right) Merge(A, left, mid, right): Create temporary arrays L and R holding elements A[left..mid] and A[mid+1..right] i, j, k = 0, 0, left while i < len(L) and j < len(R): if L[i] <= R[j]: A[k] = L[i] i += 1 else: A[k] = R[j] j += 1 k += 1 Copy any remaining elements of L, if any Copy any remaining elements of R, if any Note that indices for array elements are based on 0-origin. To demonstrate the sorting, your program should print the intermediate sequences of the array after each merge operation. Hint: Template in C Constraints 1 ≤ N ≤ 100 Input The first line of the input includes an integer N, the number of elements in the sequence. In the second line, N elements of the sequence are given separated by a single space. Output The output consists of several lines. Please output the intermediate sequence in a line after each merge operation. Elements of the sequence should be separated by a single space. Examples Input 6 5 2 4 6 1 3 Output 2 5 4 6 1 3 2 4 5 6 1 3 2 4 5 6 1 3 2 4 5 1 3 6 2 4 1 3 5 6 1 2 3 4 5 6 Input 3 3 2 1 Output 2 3 1 2 3 1 1 2 3","solution":"def merge(A, left, mid, right): # Create temporary arrays L and R holding elements A[left..mid] and A[mid+1..right] L = A[left:mid + 1] R = A[mid + 1:right + 1] i, j, k = 0, 0, left # Merge the temp arrays back into A[left..right] while i < len(L) and j < len(R): if L[i] <= R[j]: A[k] = L[i] i += 1 else: A[k] = R[j] j += 1 k += 1 # Copy any remaining elements of L, if any while i < len(L): A[k] = L[i] i += 1 k += 1 # Copy any remaining elements of R, if any while j < len(R): A[k] = R[j] j += 1 k += 1 # Print the intermediate array print(\' \'.join(map(str, A))) def merge_sort(A, left, right): if left < right: mid = (left + right) // 2 merge_sort(A, left, mid) merge_sort(A, mid + 1, right) merge(A, left, mid, right) def sort_sequence(N, sequence): print(\\"Initial Sequence:\\") print(\' \'.join(map(str, sequence))) merge_sort(sequence, 0, N - 1) print(\\"Sorted Sequence:\\") print(\' \'.join(map(str, sequence))) return sequence"},{"question":"A science fiction writer is creating a new series and needs to generate interesting character names. Each name must be composed exclusively of English lowercase letters and must follow a specific pattern. The first half of the name should match the reverse of the second half exactly. This type of name is called a symmetric name. Some examples of symmetric names are \\"abba\\", \\"racecar\\", \\"rotor\\", and \\"level\\". You are given a string as a candidate for a character name. You need to determine if this string is a symmetric name. If it is, print \\"SYMMETRIC\\", otherwise print \\"NOT SYMMETRIC\\". Input The input consists of a single line containing a non-empty string of at most 100 lowercase English letters. Output Output \\"SYMMETRIC\\" if the string is a symmetric name, otherwise output \\"NOT SYMMETRIC\\". Examples Input radar Output SYMMETRIC Input hello Output NOT SYMMETRIC Input wow Output SYMMETRIC Note In the first example, the string \\"radar\\" is symmetric because the first half \\"ra\\" matches the reverse of the second half \\"ar\\". In the second example, \\"hello\\" is not symmetric as \\"he\\" does not match the reverse of \\"llo\\". In the third example, \\"wow\\" is symmetric as \\"w\\" matches the reverse of \\"w\\".","solution":"def is_symmetric(name): Checks if the given name is symmetric. n = len(name) if n % 2 == 0: first_half = name[:n//2] second_half = name[n//2:] else: first_half = name[:n//2] second_half = name[n//2+1:] if first_half == second_half[::-1]: return \\"SYMMETRIC\\" else: return \\"NOT SYMMETRIC\\""},{"question":"Aliens have landed on Earth and have decided to participate in the International Programming Contest. They are particularly interested in an ancient grid-based game. The game is played on an n x m grid where each cell contains an integer representing the energy level of that cell. The goal of the game is to find the maximum sum of energy levels collected while traveling from the top-left corner (1,1) to the bottom-right corner (n,m) under the following constraints: 1. You can only move to the right or down from a cell. 2. You must collect the energy level of every cell you enter. Given the dimensions of the grid and the energy levels of each cell, determine the maximum energy sum that can be collected. # Input The first line contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. Each of the next n lines contains m integers, representing the energy levels of the cells. # Output Print a single integer, the maximum energy sum that can be collected. # Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Note In the sample input, the maximum path would be: 1 → 2 → 3 → 6 → 9, giving a total sum of 29.","solution":"def max_energy_sum(grid): Returns the maximum energy sum that can be collected while traveling from the top-left corner to the bottom-right corner of the grid. n = len(grid) m = len(grid[0]) # Create a dp table to store the maximum energy sum at each cell. dp = [[0]*m for _ in range(n)] # Initialize the dp table with the first cell\'s energy. dp[0][0] = grid[0][0] # Fill the first row. for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column. for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table. for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"Given a grid with `N` rows and `M` columns, each cell in the grid contains an integer. Let\'s define the distance between two cells at `(r1, c1)` and `(r2, c2)` as the Manhattan distance: `|r1 - r2| + |c1 - c2|`. You start at the top-left cell (1,1) and want to find the minimum cost path to the bottom-right cell (N,M). You can move to any cell that is exactly one Manhattan distance away (up, down, left, or right). However, there is a restriction: you can only move to a cell if its value is different from the current cell\'s value. Constraints: - `1 <= N, M <= 500` - Each cell value is an integer within the range `[0, 1000]` Input: The first line of input contains two integers, `N` and `M`. The next `N` lines each contain `M` integers representing the grid. Output: Print the minimum cost of the path from `(1,1)` to `(N,M)`. If it\'s not possible to reach the bottom-right cell, print `-1`. Example: Input: ``` 4 4 1 3 2 4 4 1 3 2 2 4 1 3 3 2 4 1 ``` Output: ``` 6 ``` (Note: The cost from `(1,1)` to `(4,4)` via the path `(1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (4,3) -> (4,4)` is 6. The cell values are all different along this path.)","solution":"from heapq import heappop, heappush def min_cost_path(grid): N = len(grid) M = len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] cost = [[float(\'inf\')] * M for _ in range(N)] cost[0][0] = 0 # Starting point has 0 cost heap = [(0, 0, 0)] # cost, row, column while heap: curr_cost, r, c = heappop(heap) if r == N - 1 and c == M - 1: return curr_cost for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and grid[nr][nc] != grid[r][c]: new_cost = curr_cost + 1 if new_cost < cost[nr][nc]: cost[nr][nc] = new_cost heappush(heap, (new_cost, nr, nc)) return -1 if cost[N-1][M-1] == float(\'inf\') else cost[N-1][M-1] # Example usage: # N, M = 4, 4 # grid = [ # [1, 3, 2, 4], # [4, 1, 3, 2], # [2, 4, 1, 3], # [3, 2, 4, 1] # ] # result = min_cost_path(grid) # print(result) # Output: 6"},{"question":"Bob is given an integer array `arr` of size `n` and an integer value `k`. He has to determine if there are two non-overlapping subarrays of `arr` such that both subarrays are of size `k` and have the same sum. Note that the two subarrays should have a gap of at least one element between them. Help Bob! Write a function to find out if such two subarrays exist. Function Signature Your function should be named `findSubarrays` and should have the following signature: ```python def findSubarrays(arr: List[int], k: int) -> str: pass ``` Input Your function will take in the following parameters: - `arr` (a list of integers) - (2 ≤ n ≤ 10^5, 1 ≤ arr[i] ≤ 10^4 for all i) - `k` (an integer) - (1 ≤ k ≤ n/2) Output The function should return a string: - “YES” if there exist two non-overlapping subarrays of size `k` with the same sum - “NO” if there are no such subarrays Examples Input arr = [1,2,3,4,5,6,7,8,9,10] k = 2 Output NO Input arr = [4,3,2,5,1,2,1,5,1,3,2,4] k = 3 Output YES Note In the first example, there are no two non-overlapping subarrays of size 2 with the same sum. In the second example subarrays [2,5,1] and [2,1,5] both have sum 8 with a gap of one element between them.","solution":"from typing import List def findSubarrays(arr: List[int], k: int) -> str: n = len(arr) sums = {} for i in range(n - k + 1): curr_sum = sum(arr[i:i+k]) if curr_sum in sums: for idx in sums[curr_sum]: if abs(i - idx) >= k + 1: return \\"YES\\" sums[curr_sum].append(i) else: sums[curr_sum] = [i] return \\"NO\\""},{"question":"Alice loves playing with arrays and searching for hidden patterns in them. She recently came across a challenging problem. Given an array of integers, she wants to find the longest contiguous subarray that has an equal number of even and odd integers. Help Alice write a program that finds this subarray. Input The first line contains an integer n (1 ≤ n ≤ 1000) which is the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) which represent the elements of the array. Output Output two space-separated integers l and r (1 ≤ l ≤ r ≤ n) which are the starting and ending indices of the longest contiguous subarray with an equal number of even and odd integers. If there are multiple such subarrays, output the one with the smallest starting index. If there is no such subarray, output -1 -1. Examples Input 6 1 2 3 4 5 6 Output 1 6 Input 5 2 4 6 8 10 Output -1 -1","solution":"def find_longest_even_odd_subarray(arr): Finds the longest contiguous subarray with equal number of even and odd integers. n = len(arr) if n == 0: return -1, -1 # Dictionary to store the first occurrence of the difference between even and odd counts first_occurrence = {0: -1} max_length = 0 start_index = -1 end_index = -1 even_count = 0 odd_count = 0 for i in range(n): # Counting evens and odds if arr[i] % 2 == 0: even_count += 1 else: odd_count += 1 # Current difference between even and odd counts current_diff = even_count - odd_count if current_diff in first_occurrence: if i - first_occurrence[current_diff] > max_length: max_length = i - first_occurrence[current_diff] start_index = first_occurrence[current_diff] + 1 end_index = i else: first_occurrence[current_diff] = i if max_length == 0: return -1, -1 else: return start_index + 1, end_index + 1 def process_input_and_output(): # Read input import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:1+n])) l, r = find_longest_even_odd_subarray(arr) print(l, r)"},{"question":"Input The input consists of 5 non-negative integers provided on a single line, each separated by a space. Output Print the sum of the three smallest numbers among the given five integers. Examples Input 3 7 5 13 2 Output 10 Input 4 4 4 4 4 Output 12 Input 10 20 30 5 15 Output 30","solution":"def sum_of_three_smallest_numbers(numbers): Returns the sum of the three smallest numbers out of the given five numbers. numbers.sort() return sum(numbers[:3]) # Example usage: # numbers = list(map(int, input().split())) # print(sum_of_three_smallest_numbers(numbers))"},{"question":"A large company has networked several computers together for file sharing. One day, the employees noticed that the file sharing is incredibly slow. Upon investigation, you discovered that the slowdowns are due to multiple paths between the computers and some being far more efficient than others. To optimize the network, you need to find the most efficient single path (or route) between any two computers. Given a list of M bidirectional connections, where each connection denotes the time it takes for data to travel between two computers, write a program to find the shortest time it takes to travel between any two computers such that it forms a connected network. The approach should be able to handle up to 100,000 computers and 500,000 connections. Input The first line contains two integers n and m (2 ≤ n ≤ 100,000; 1 ≤ m ≤ 500,000) — the number of computers and the number of bidirectional connections. Each of the next m lines contains three integers a, b, w (1 ≤ a, b ≤ n; 1 ≤ w ≤ 1,000) — representing a connection between computers a and b with a travel time of w. Output Print a single integer — the minimum total time to establish a connected network using the most efficient routes. If it is not possible to form a connected network, output -1. Examples Input 5 6 1 2 4 1 3 4 2 3 2 2 4 7 3 5 3 4 5 1 Output 10 Input 4 2 1 2 3 3 4 6 Output -1","solution":"import heapq def find_minimum_spanning_tree(n, edges): # Create adjacency list adj = {i: [] for i in range(1, n + 1)} for a, b, w in edges: adj[a].append((w, b)) adj[b].append((w, a)) # Prim\'s algorithm to find the Minimum Spanning Tree visited = set() min_heap = [(0, 1)] # (cost, node) total_cost = 0 while min_heap and len(visited) < n: cost, node = heapq.heappop(min_heap) if node in visited: continue visited.add(node) total_cost += cost for next_cost, next_node in adj[node]: if next_node not in visited: heapq.heappush(min_heap, (next_cost, next_node)) if len(visited) == n: return total_cost else: return -1 def minimum_total_time(n, m, connections): return find_minimum_spanning_tree(n, connections)"},{"question":"You have been hired by a logistics company to optimize their delivery routes. The company has `n` delivery points placed along a straight line. The delivery truck starts at the first point and needs to deliver packages to all other points exactly once before returning to the starting point. Given the coordinates of the delivery points, you are to find the shortest possible route that the truck must follow to complete the deliveries and return to the starting point. The distance between two points is the absolute difference in their coordinates. Input The first line of the input contains a single integer `n` (2 ≤ n ≤ 10^5), the number of delivery points. The second line contains `n` space-separated integers x1, x2, ..., xn (0 ≤ xi ≤ 10^9), the coordinates of the delivery points along a straight line. Output Print a single integer — the shortest possible distance the truck must travel to deliver packages to all points and return to the starting point. Examples Input 4 3 6 1 2 Output 10 Input 3 10 20 30 Output 40 Explanation In the first sample, the shortest route is from 1 -> 2 -> 3 -> 6 -> 1, having a total distance of 10. In the second sample, the shortest route is from 10 -> 20 -> 30 -> 10, having a total distance of 40.","solution":"def shortest_delivery_route(n, points): Calculate the shortest possible route to visit all delivery points and return to the starting point. Args: n: An integer, the number of delivery points. points: A list of integers, representing the coordinates of the delivery points. Returns: An integer representing the shortest possible distance. points.sort() total_distance = (points[-1] - points[0]) * 2 return total_distance"},{"question":"Eva enjoys solving puzzles on a grid. She has an m x n grid where each cell contains either a 0 or a 1. Eva wants to identify the largest rectangle of 1\'s in this grid and determine its area. Help her out! Input The first line of input contains two integers m and n (1 ≤ m, n ≤ 1000) representing the number of rows and columns of the grid. Each of the following m lines contains n integers, either 0 or 1, representing the grid. Output Output a single integer representing the area of the largest rectangle of 1\'s in the grid. Example Input 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output 6 Note In the example, the largest rectangle of 1\'s is composed of 2 rows and 3 columns of 1\'s. Hence, the area is 2 * 3 = 6.","solution":"def max_histogram_area(heights): Calculate the maximum rectangle area in a histogram represented by heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def max_rectangle_area(grid): Calculate the maximum rectangle area of 1\'s in a binary grid. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) heights = [0] * n max_area = 0 for i in range(m): for j in range(n): heights[j] = heights[j] + 1 if grid[i][j] == 1 else 0 max_area = max(max_area, max_histogram_area(heights)) return max_area"},{"question":"A farm has a rectangular field of dimension N x M (1 ≤ N, M ≤ 1000) divided into a grid of 1x1 cells. Each cell can contain either a cow (\'C\') or be empty (\'.\'). Cows in adjacent cells (shared sides) form a herd. Your task is to find the number of distinct herds in the field. Input The first line of the input contains two integers N and M, the dimensions of the field. The next N lines each contain M characters, representing the field. Each character is either \'C\' (indicating a cow) or \'.\' (indicating an empty cell). Output Output a single integer, the number of distinct herds in the field. Example Input 3 4 C..C .C.C CC.C Output 3 Explanation There are three distinct herds in the field: one with the cows at cells (1,1) and (3,1), another with the cows at cells (1,4) and (2,3), and the last one with the cows at cells (3,2) and (3,3).","solution":"def count_herds(n, m, field): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or field[x][y] != \'C\': return # Mark the cell as visited by setting it to \'.\' field[x][y] = \'.\' # Move in all 4 possible directions (up, down, left, right) dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) herd_count = 0 for i in range(n): for j in range(m): if field[i][j] == \'C\': # Start a DFS to mark all cells in this herd dfs(i, j) herd_count += 1 return herd_count # Example Input n = 3 m = 4 field = [ [\'C\', \'.\', \'.\', \'C\'], [\'.\', \'C\', \'.\', \'C\'], [\'C\', \'C\', \'.\', \'C\'] ] print(count_herds(n, m, field)) # Output: 3"},{"question":"After several visits to the local antique shop, Anna has accumulated a large collection of vintage watches. Each watch in her collection has a unique serial number, and she wants to display them in a specific arrangement. For aesthetic reasons, she wants to ensure that no two consecutive watches on display have serial numbers where the absolute difference is less than a specific value k. She needs your help to determine if her goal is achievable and, if so, to provide one possible arrangement. [Input] The first line contains a single integer t, the number of test cases. For each test case, the first line contains an integer n, the number of vintage watches, and an integer k, the minimum required absolute difference. The second line contains n space-separated integers, representing the serial numbers of each watch. [Output] For each test case, if there exists an arrangement of watches meeting the criteria, print \\"Arrangement possible\\" followed by the serial numbers in one possible valid order. If no such arrangement exists, print \\"Arrangement not possible\\". [Constraints] 1 ≤ t ≤ 100 2 ≤ n ≤ 1000 1 ≤ k ≤ 1000 1 ≤ serial_number[i] ≤ 10000 SAMPLE INPUT 2 5 2 1 3 5 7 9 4 10 10 20 30 40 SAMPLE OUTPUT Arrangement possible 1 3 5 7 9 Arrangement possible 10 20 30 40","solution":"def possible_arrangement(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] serial_numbers = sorted(test_cases[i][1]) valid = True for j in range(1, len(serial_numbers)): if abs(serial_numbers[j] - serial_numbers[j - 1]) < k: valid = False break if valid: results.append(f\\"Arrangement possiblen{\' \'.join(map(str, serial_numbers))}\\") else: results.append(\\"Arrangement not possible\\") return results"},{"question":"In a distant kingdom, there are N castles (numbered 1 to N inclusive) and M bidirectional roads connecting the castles. Each road i has a repair time of Ti days to make it functional. Initially, all roads are broken due to recent attacks by dragons. The kingdom\'s monarch has issued a royal decree that all castles must be able to send water supplies amongst themselves through the connected roads after repairs. The monarch wants to know the minimum time needed to repair enough roads so that there is at least one path connecting every pair of castles. Help the monarch determine this minimum time to achieve full connectivity between the castles. Input The input consists of multiple test cases. Each test case begins with a line consisting of two integers N and M (1 ≤ N ≤ 100, 1 ≤ M ≤ 10000). This is followed by M lines describing the repair time of each road. Each line contains three integers Ai, Bi and Ti (1 ≤ Ai < Bi ≤ N, 1 ≤ Ti ≤ 10000), indicating that there is a road between castle Ai and Bi which requires Ti days to repair. The input is terminated by EOF. All integers in each line are separated by a whitespace. Output For each test case, print a single integer indicating the minimum time required to repair roads such that all castles are connected. If it is impossible to connect all castles, print -1. Example Input 4 4 1 2 5 2 3 3 3 4 4 4 1 6 4 3 1 2 5 2 3 2 1 3 4 Output 12 7 Explanation In the first test case, we can repair the roads with times 3, 4, and 5 to connect all castles, taking a minimum of 12 days. In the second test case, we can repair the roads with times 2 and 5, accomplishing the task in 7 days.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): edges.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = [] i = 0 e = 0 while e < n - 1: if i >= len(edges): return -1 u, v, w = edges[i] i += 1 x = find(parent, u-1) y = find(parent, v-1) if x != y: e += 1 result.append([u, v, w]) union(parent, rank, x, y) min_time = sum([w for u, v, w in result]) return min_time def minimum_time_to_connect_castles(cases): results = [] for n, m, edges in cases: if n == 1: results.append(0) else: time = kruskal(n, edges) results.append(time) return results def parse_input(input_str): cases = [] lines = input_str.strip().split(\'n\') i = 0 while i < len(lines): n, m = map(int, lines[i].strip().split()) edges = [] for j in range(i + 1, i + 1 + m): a, b, t = map(int, lines[j].strip().split()) edges.append((a, b, t)) cases.append((n, m, edges)) i += m + 1 return cases def solve(): import sys input = sys.stdin.read() cases = parse_input(input) results = minimum_time_to_connect_castles(cases) for result in results: print(result)"},{"question":"John is an adventurous hiker and programmer. On his latest journey, he stumbled upon a hidden cave filled with ancient carvings which described a programming challenge. If John successfully completes the challenge, he will discover a secret map to a hidden treasure. The carvings presented the following problem: You are given an array of n integers. The challenge is to form a new array such that it consists of the same integers but in a different order. This new array should maximize the sum of products of adjacent elements. Specifically, if the new array is represented as d_1, d_2, ..., d_n, then the goal is to maximize the value of (d_1 * d_2) + (d_2 * d_3) + ... + (d_(n-1) * d_n). John isn\'t sure how to rearrange the elements optimally and needs your help to solve this problem. Here\'s the input format: The first line contains a single integer t (1 ≤ t ≤ 10^3) — the number of test cases. Each of the next t test cases is described as follows: - The first line contains an integer n (2 ≤ n ≤ 10^3) — the number of integers in the array. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^3) — the elements of the array. To ensure John succeeds, the sum of all n across all test cases does not exceed 10^3. Output For each test case, output the rearranged array that maximizes the sum of products of adjacent elements. If there are multiple such arrays, output any one of them. Example Input 3 4 1 3 2 4 3 2 7 5 5 1 2 3 4 5 Output 4 3 1 2 7 5 2 5 4 3 2 1 Note In the first test case of the example, rearranging the array to [4, 3, 1, 2] gives the sum of products as (4*3) + (3*1) + (1*2) = 12 + 3 + 2 = 17, which is a maximum possible value.","solution":"def maximize_adjacent_product(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] # Sort the array in descending order sorted_arr = sorted(arr, reverse=True) # Append the sorted array to the results list results.append(sorted_arr) return results # Example usage: # t = 3 # test_cases = [(4, [1, 3, 2, 4]), (3, [2, 7, 5]), (5, [1, 2, 3, 4, 5])] # print(maximize_adjacent_product(t, test_cases))"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine if all characters of the string appear the same number of times. If they do, print \\"YES\\". Otherwise, print \\"NO\\". Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 100). Output Print \\"YES\\" if all characters in the string appear the same number of times. Otherwise, print \\"NO\\". Examples Input aabbcc Output YES Input aabbc Output NO Note In the first example, each character (a, b, c) appears twice in the string. In the second example, character \'a\' and \'b\' appear twice whereas \'c\' appears only once, hence the output is \\"NO\\".","solution":"def all_chars_same_frequency(s): Returns \'YES\' if all characters in string s appear the same number of times. Otherwise, returns \'NO\'. from collections import Counter freq = Counter(s) values = list(freq.values()) if len(set(values)) == 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Jane is a botanist. She studies a certain plant species that grows linearly in height by one centimeter each day. The plant has a unique leaf growth pattern: every day `d`, the plant either grows a new leaf (if `d` is odd) or sheds the newest leaf (if `d` is even). Given the number of days `n` Jane observes the plant, calculate the number of leaves the plant will have at the end of the `n`-th day. Input The only line contains an integer `n` (1 ≤ n ≤ 10^9). Output Print the number of leaves the plant has on day `n`. Examples Input 5 Output 3 Input 10 Output 0 Input 1 Output 1 Note In the first example, for day 5 (odd), the plant would have: - Day 1: 1 leaf - Day 2: 0 leaves (sheds) - Day 3: 1 leaf - Day 4: 0 leaves (sheds) - Day 5: 1 leaf Hence, the plant will have 1 leaf at the end of day 5.","solution":"def calculate_leaves(n): This function calculates the number of leaves the plant will have at the end of day n. On each odd day, the plant grows a leaf, and on each even day, it sheds a leaf. Parameters: n (int): The number of days observed. Returns: int: The number of leaves on the nth day. # The number of leaves the plant will have is given by the integer division of days by 2 # and as the cycle is growing and shedding a leaf each day. return (n + 1) // 2"},{"question":"You are given a string representing a mathematical expression. The string contains only non-negative integers and the operators \'+\' and \'*\'. Your task is to evaluate the expression by strictly following the order of operations (also known as BODMAS/BIDMAS rules: parentheses, exponents, multiplication and division (from left to right), addition and subtraction (from left to right)). Since exponents are not included here, you only need to consider multiplication, division, addition, and subtraction. Given the expression, you need to first evaluate all the multiplication and division operations from left to right, and then evaluate all the addition operations from left to right. Input: A single line containing a non-empty string representing a mathematical expression. The string will be no longer than 100 characters and will always be a valid expression without unnecessary spaces. Output: A single integer which is the result of the evaluated expression. Constraints: - The input string will contain only non-negative integers, \'+\', and \'*\'. - The length of the input string will not exceed 100 characters. Examples: Input: \\"3+5*2\\" Output: 13 Input: \\"4*5+6\\" Output: 26 Input: \\"2+3*4+5\\" Output: 19 Explanation: Example 1: First evaluate the multiplication 5*2 = 10. Then evaluate the addition 3+10 = 13. Example 2: First evaluate the multiplication 4*5 = 20. Then evaluate the addition 20+6 = 26. Example 3: First evaluate the multiplication 3*4 = 12. Then evaluate the additions 2+12+5 = 19.","solution":"def evaluate_expression(expression): # Splits the expression based on \'+\' operator add_parts = expression.split(\'+\') # Evaluates any \'*\' operation within add_parts evaluated_parts = [] for part in add_parts: mult_parts = part.split(\'*\') result = 1 for num in mult_parts: result *= int(num) evaluated_parts.append(result) # Sum all the evaluated parts to get the final result final_result = sum(evaluated_parts) return final_result"},{"question":"Develop an algorithm that takes an array of integers representing the daily stock prices of a company, and determines the maximum profit one could make by buying on one day and selling on another later day. If no profit can be made, return 0. Input The first line contains an integer N which represents the number of days (1 ≤ N ≤ 105). The second line contains N integers separated by spaces that represent the stock prices on those days (1 ≤ price ≤ 104). Output Print a single integer — the maximum profit that can be obtained. If no profit is possible, print 0. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 Explanation In the first example, the optimal strategy is to buy on day 2 (price = 1) and sell on day 5 (price = 6), achieving a profit of 6 - 1 = 5. In the second example, no profit can be made as the prices keep decreasing. Note You can assume that you are allowed to make only one buy and one sell transaction.","solution":"def max_profit(prices): Returns the maximum profit that can be obtained from a single buy and sell transaction. If no profit can be made, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"David is planning to build custom strings to encrypt messages. He decides to use a special pattern of string construction using a repetitive sequence of characters. To ensure the encrypted messages have a certain level of complexity, he creates strings based on the following pattern rules: - The string starts with any lowercase letter. - The next character must be the letter that follows the starting letter in the alphabet. - This process continues until the specified length of the string is achieved. - If the end of the alphabet is reached, it wraps around to \'a\'. For example, if the starting letter is \'y\' and the length is 4, the string would be \\"yzab\\". Your task is to determine the resulting string based on a given starting letter and length. Input Format: The first line contains an integer T, i.e., the number of test cases. The next T lines each contain a string of length 1 (the starting letter) and an integer denoting the length of the string to be constructed. Output Format: A single line for each test case containing the constructed string. Constraints: 1 ; ≤ ; T ≤ 100 \'a\' ; ≤ ; starting letter ; ≤ ; \'z\' 1 ≤ length ≤ 100 SAMPLE INPUT 3 a 5 x 3 p 8 SAMPLE OUTPUT abcde xyz pqrstuvw Explanation For test case 1, the string starting with \'a\' and length 5 will be \\"abcde\\". For test case 2, the string starting with \'x\' and length 3 will be \\"xyz\\". For test case 3, the string starting with \'p\' and length 8 will be \\"pqrstuvw\\".","solution":"def build_string(starting_letter, length): Constructs a string starting with \'starting_letter\' and continues until the specified length. Wraps around the alphabet if needed. :param starting_letter: str : single lowercase starting letter :param length: int : the length of the string to be constructed :return: str : the constructed string result = [] for i in range(length): current_char = chr((ord(starting_letter) - ord(\'a\') + i) % 26 + ord(\'a\')) result.append(current_char) return \'\'.join(result) def construct_strings(test_cases): Constructs a list of strings according to the provided test cases. :param test_cases: list : List of tuples each containing one starting letter and an integer length :return: list : List of resulting strings for each test case results = [] for starting_letter, length in test_cases: results.append(build_string(starting_letter, length)) return results"},{"question":"You are working as a software developer for a simulation company that often deals with grid-based environments. One of your tasks is to develop a simulation where given a grid, you need to identify enclosed areas. An enclosed area is a group of cells that are completely surrounded by a border of cells with value \'X\'. The grid consists of cells with values \'X\' and \'O\'. Your task is to write a function that finds all the cells \'O\' which are part of enclosed areas and changes them to \'X\'. Note that an enclosed area must be completely surrounded by \'X\' cells, and an \'O\' on the border of the grid cannot be an enclosed area since it\'s not surrounded by \'X\' on all four sides. Write a function `mark_enclosed_areas(grid: List[List[str]]) -> List[List[str]]` to accomplish this task. # Input: - The function receives a single argument: a 2D list `grid` (n x m), where 1 <= n, m <= 200. - Each element of `grid` is either \'X\' or \'O\'. # Output: - The function should return a 2D list of the same dimensions as `grid`, with all enclosed areas of \'O\' changed to \'X\'. # Example: ``` Input: [ [\'X\', \'X\', \'X\', \'X\'], [\'X\', \'O\', \'O\', \'X\'], [\'X\', \'X\', \'O\', \'X\'], [\'X\', \'O\', \'X\', \'X\'] ] Output: [ [\'X\', \'X\', \'X\', \'X\'], [\'X\', \'X\', \'X\', \'X\'], [\'X\', \'X\', \'X\', \'X\'], [\'X\', \'O\', \'X\', \'X\'] ] ``` # Explanation: - The enclosed \'O\' cells in the second and third row have been changed to \'X\'. - The \'O\' cell in the bottom row remains unchanged as it is not fully enclosed. # Notes: - Optimize your solution for efficiency since the grid can be quite large. - Consider edge cases where the grid may have only \'X\' or only \'O\' cells. - Make sure you handle scenarios where no \'O\' cells are completely surrounded by \'X\' cells. Write your function implementation below:","solution":"from typing import List def mark_enclosed_areas(grid: List[List[str]]) -> List[List[str]]: if not grid or not grid[0]: return grid rows, cols = len(grid), len(grid[0]) # Helper function to perform DFS from a given cell def dfs(x, y): if grid[x][y] != \'O\': return grid[x][y] = \'E\' # Mark the cell as \'E\' to indicate it’s part of the edge directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Right, Left, Down, Up for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols: dfs(nx, ny) # Start DFS from the edges of the grid for i in range(rows): if grid[i][0] == \'O\': dfs(i, 0) if grid[i][cols - 1] == \'O\': dfs(i, cols - 1) for j in range(cols): if grid[0][j] == \'O\': dfs(0, j) if grid[rows - 1][j] == \'O\': dfs(rows - 1, j) # Convert remaining \'O\' to \'X\' and \'E\' back to \'O\' for i in range(rows): for j in range(cols): if grid[i][j] == \'O\': grid[i][j] = \'X\' elif grid[i][j] == \'E\': grid[i][j] = \'O\' return grid"},{"question":"In a graph, a Hamiltonian path is a path in an undirected or directed graph that visits each vertex exactly once. Given a directed graph with `n` vertices and `m` edges, your task is to determine if there exists a Hamiltonian path in the graph from vertex 1 to vertex n. Input The first line contains two integers `n` (2 ≤ n ≤ 1000) and `m` (1 ≤ m ≤ 2000) — the number of vertices and the number of edges, respectively. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n) describing a directed edge from vertex `u` to vertex `v`. Output Output \\"Yes\\" (quotes exclusive) if there exists a Hamiltonian path from vertex 1 to vertex n, otherwise output \\"No\\" (quotes exclusive). Example Input: 4 4 1 2 2 3 3 4 4 1 Output: Yes","solution":"def has_hamiltonian_path(n, m, edges): from itertools import permutations # Create adjacency list graph = {i: [] for i in range(1, n + 1)} for u, v in edges: graph[u].append(v) # Generate all permutations of the vertices for perm in permutations(range(1, n + 1)): if perm[0] == 1 and perm[-1] == n: # Check if this permutation forms a Hamiltonian path valid_path = True for i in range(n - 1): if perm[i + 1] not in graph[perm[i]]: valid_path = False break if valid_path: return \\"Yes\\" return \\"No\\" # Sample Data n = 4 m = 4 edges = [(1, 2), (2, 3), (3, 4), (4, 1)] print(has_hamiltonian_path(n, m, edges)) # Output should be \\"Yes\\""},{"question":"You are given a list of integers. Determine the length of the longest strictly increasing subsequence in the list. A subsequence is derived by deleting some or none of the elements in the array without changing the order of the remaining elements. A strictly increasing subsequence is one in which each subsequent element is strictly greater than the one before it. Constraints * 1 leq N leq 10^5 * 1 leq A_i leq 10^9 Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Output a single integer — the length of the longest strictly increasing subsequence. Examples Input 6 5 2 8 6 3 6 Output 3 Input 5 1 7 2 8 3 Output 3 Input 5 5 4 3 2 1 Output 1","solution":"def length_of_lis(numbers): if not numbers: return 0 n = len(numbers) dp = [1] * n for i in range(1, n): for j in range(i): if numbers[i] > numbers[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Tanya loves palindromic numbers. A number is considered palindromic if it reads the same backward as forward. For example, 121, 1331, and 7 are palindromic, while 123, 1221, and 466 are not. A palindromic number is super palindromic if its decimal representation is made up of the digits 1 and 0 only. For example, 101, 1001, and 11 are super palindromic, while 121, 1331, and 7 are not. Given a positive integer n, help Tanya find the smallest super palindromic number that is greater than or equal to n. Input The only line contains a positive integer n (1 ≤ n ≤ 10^18). This number doesn\'t have leading zeroes. Output Output the smallest super palindromic number that is greater than or equal to n. Examples Input 22 Output 101 Input 11 Output 11","solution":"def is_super_palindromic(num): Checks if a number is super palindromic. s = str(num) return s == s[::-1] and set(s).issubset({\'0\', \'1\'}) def next_super_palindromic(n): Finds the smallest super palindromic number greater than or equal to n. current = n while True: if is_super_palindromic(current): return current current += 1"},{"question":"You have been hired to help analyze and monitor a messaging application\'s performance. A critical feature of this mission is to ensure that the time it takes to deliver messages remains within acceptable bounds. For this task, you are required to identify periods when message delivery times were the longest. You will be given a list of message delivery times recorded in milliseconds for a certain period. Your program should return the start and end indices of the longest subarray where the cumulative delivery time is maximum. If there are multiple subarrays with the same maximum cumulative delivery time, return the indices of the first one found. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of messages. The second line contains n integers a_1, a_2, ..., a_n (-1,000 ≤ a_i ≤ 1,000) — the delivery times. Output Output two integers — the start and end indices of the longest subarray with the maximum cumulative delivery time. Indices are 0-based. Examples Input 9 -2 1 -3 4 -1 2 1 -5 4 Output 3 6 Explanation: Here, the subarray with the longest maximum cumulative delivery time is [4, -1, 2, 1] which starts at index 3 and ends at index 6.","solution":"def max_subarray_indices(n, a): Returns the start and end indices of the contiguous subarray with the maximum cumulative delivery time. if n == 0: return 0, 0 # Initialize the variables max_sum = current_sum = a[0] start = end = temp_start = 0 for i in range(1, n): if current_sum > 0: current_sum += a[i] else: current_sum = a[i] temp_start = i if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return start, end"},{"question":"You are monitoring a network of computers, where each computer can send data to other computers. The network is characterized by a directed acyclic graph (DAG). Each computer is represented by a node, and a directed edge from node u to node v indicates that computer u can send data to computer v directly. You need to ensure that all data originating from a specific source computer can reach a specific destination computer. However, due to security constraints, some nodes may be restricted. If a node is restricted, data cannot be routed through that node. You are given a list indicating which nodes are restricted and which are not. Your task is to determine if there exists a valid path from the source to the destination that does not pass through any restricted nodes. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5), with n representing the number of computers (nodes), and m representing the number of direct connections (edges) between them. The second line contains two integers s and d (1 ≤ s, d ≤ n), representing the source and destination computers respectively. The third line contains one integer k (1 ≤ k ≤ n), representing the number of restricted nodes. The fourth line contains k distinct integers r_1, r_2, ..., r_k (1 ≤ r_i ≤ n), representing the restricted nodes. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing a directed edge from node u to node v. Output Print \\"YES\\" if there exists a valid path from the source computer to the destination computer that does not pass through any restricted nodes, otherwise print \\"NO\\". Examples Input 6 7 1 6 2 3 5 1 2 2 4 1 3 3 4 4 5 5 6 Output NO Input 6 7 1 6 1 5 1 2 2 4 1 3 3 4 4 6 3 5 5 6 Output YES Note In the first example, there is no valid path from node 1 to node 6 that avoids restricted nodes 3 and 5. In the second example, there exists a valid path 1 -> 2 -> 4 -> 6 that bypasses the restricted node 5.","solution":"def can_data_transfer(n, m, s, d, k, restricted, edges): from collections import defaultdict, deque graph = defaultdict(list) restricted_set = set(restricted) for u, v in edges: if u not in restricted_set and v not in restricted_set: graph[u].append(v) queue = deque([s]) visited = set() while queue: node = queue.popleft() if node == d: return \\"YES\\" if node not in visited: visited.add(node) for neighbour in graph[node]: if neighbour not in visited: queue.append(neighbour) return \\"NO\\""},{"question":"An aircraft company is designing a new navigation system for its planes. This navigation system needs to optimize flight paths considering various city-to-city travel distances. Given a map of cities connected by direct flight paths with specified distances, the system should determine the shortest possible route between two cities. Your task is to write a program that reads the input representing the cities and flight paths and computes the shortest route. Input The input consists of multiple datasets. Each dataset begins with an integer N (2 ≤ N ≤ 100), which is the number of cities. This is followed by N lines describing the cities. Each of these lines contains the name of a city (a string of up to 20 characters) and the city\'s x and y coordinates on the map (integers, -10000 ≤ x, y ≤ 10000). After describing the cities, there is another integer P which is the number of direct flight paths. The next P lines each contain three items: the names of the two cities connected by this path and the distance of the flight path (a positive integer). After these flight paths, there are multiple queries, each in the format of two city names specifying the need to find the shortest route between these two cities. The input ends with a line \\"END\\". Output For each query, output a line containing the shortest distance between the two specified cities. If there is no route connecting the two cities, output \\"NO ROUTE\\". Example Input 4 CityA 0 0 CityB 2 2 CityC 5 5 CityD 10 10 5 CityA CityB 3 CityA CityC 7 CityB CityC 4 CityB CityD 12 CityC CityD 8 CityA CityD 2 CityX -100 200 CityY 300 400 1 CityX CityY 5 CityX CityY END Output 15 5","solution":"import heapq def dijkstra(graph, start, end): Compute the shortest path between start and end nodes in a graph using Dijkstra\'s algorithm. Returns the length of the shortest path or \'NO ROUTE\' if no path exists. queue = [(0, start)] distances = {start: 0} while queue: current_distance, current_node = heapq.heappop(queue) if current_node == end: return current_distance for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances.get(neighbor, float(\'inf\')): distances[neighbor] = distance heapq.heappush(queue, (distance, neighbor)) return \\"NO ROUTE\\" def process_input(data): index = 0 results = [] while index < len(data): N = int(data[index].strip()) index += 1 cities = {} graph = {} city_index = [] for i in range(N): city_data = data[index].strip().split() city = city_data[0] cities[city] = (int(city_data[1]), int(city_data[2])) graph[city] = [] city_index.append(city) index += 1 P = int(data[index].strip()) index += 1 for i in range(P): path_data = data[index].strip().split() city1, city2, distance = path_data[0], path_data[1], int(path_data[2]) graph[city1].append((city2, distance)) graph[city2].append((city1, distance)) index += 1 queries = [] while index < len(data) and data[index].strip().count(\\" \\") == 1: query_data = data[index].strip().split() queries.append((query_data[0], query_data[1])) index += 1 for city1, city2 in queries: results.append(dijkstra(graph, city1, city2)) if index < len(data) and data[index].strip() == \\"END\\": index += 1 return results def main(data): results = process_input(data) for result in results: print(result)"},{"question":"You are given a string s consisting of lowercase English letters. Determine if it is a palindrome. Input The only line of input contains a non-empty string s of at most 100 characters. Output Output \\"YES\\" if the string is a palindrome, otherwise \\"NO\\". Examples Input racecar Output YES Input hello Output NO Note In the first example, the string \\"racecar\\" reads the same forwards and backwards, so the output is \\"YES\\". In the second example, \\"hello\\" does not read the same forwards and backwards, so the output is \\"NO\\".","solution":"def is_palindrome(s): Returns \\"YES\\" if the string s is a palindrome, otherwise \\"NO\\". if s == s[::-1]: return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of n integers. Your task is to rearrange the integers in the array such that every integer at an even index is greater than its previous integer (if it exists) and every integer at an odd index is lesser than its previous integer (if it exists). This rearrangement should be done in-place. # Input The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. The next line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9), separated by spaces. # Output Print the rearranged array on a single line. If there are multiple valid rearrangements, output any of them. # Example **Input:** ``` 5 4 1 3 2 5 ``` **Output:** ``` 1 4 2 5 3 ``` # Note In the example above, the first element at index 0 (1) is not compared to any previous element, the element at index 1 (4) is greater than the element at index 0 (1), the element at index 2 (2) is lesser than the element at index 1 (4), the element at index 3 (5) is greater than the element at index 2 (2), and the element at index 4 (3) is lesser than the element at index 3 (5). Hence, the condition satisfies the problem statement and this is a valid rearrangement.","solution":"def rearrange_array(arr): Rearranges the array such that elements at even indices are greater than their previous element and elements at odd indices are lesser than their previous element. for i in range(1, len(arr), 2): if arr[i] < arr[i - 1]: arr[i - 1], arr[i] = arr[i], arr[i - 1] if i + 1 < len(arr) and arr[i + 1] > arr[i]: arr[i + 1], arr[i] = arr[i], arr[i + 1] return arr"},{"question":"You are given a list of integers. Identify the smallest integer that is missing from the list. The smallest integer is the smallest positive integer that does not appear in the list. Input The first line of input contains an integer n (1 ≤ n ≤ 100), the length of the list. The second line contains n space-separated integers. Each integer in the list is between -1000 and 1000, inclusive. Output Output the smallest positive integer that is missing from the list. Examples Input 5 1 2 0 -1 3 Output 4 Input 6 -5 -3 -1 0 1 2 Output 3","solution":"def find_smallest_missing_positive_integer(n, array): Find the smallest missing positive integer from the given list. positive_set = {num for num in array if num > 0} smallest_missing = 1 while smallest_missing in positive_set: smallest_missing += 1 return smallest_missing"},{"question":"Given an n x n grid representing a maze, where \'1\' represents a wall and \'0\' represents a path you can walk on, you need to navigate from the top-left corner to the bottom-right corner. You can only move up, down, left, or right, and cannot move through walls. Write a program to determine if there is a path from the start to the end of the maze. If a path exists, output \'Yes\', otherwise output \'No\'. The grid will always have at least a 1x1 size and the start and end positions will always be \'0\' (walkable). Input The first line contains an integer n (1 <= n <= 100), denoting the size of the grid. The next n lines contain n characters each, where each character is \'0\' or \'1\', representing the maze layout. Output Output \'Yes\' if there is a path from the top-left corner to the bottom-right corner; otherwise, output \'No\'. Example Input 5 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 Output Yes Input 4 0 1 1 0 1 0 1 0 1 1 0 1 0 0 0 0 Output No Note In the first example, there is a path from the start (0,0) to the end (4,4) that avoids all the walls. In the second example, the walls block all possible paths from the start to the end.","solution":"def is_path_exists(n, grid): Determine if there is a path from the top-left corner to the bottom-right corner of the maze. Args: n (int): The size of the grid. grid (list of list of str): The maze grid. Returns: str: \'Yes\' if there is a path, otherwise \'No\'. if n == 1: return \'Yes\' if grid[0][0] == \'0\' else \'No\' def is_valid_move(x, y): return 0 <= x < n and 0 <= y < n and grid[x][y] == \'0\' def dfs(x, y): if (x, y) == (n-1, n-1): return True grid[x][y] = \'1\' # Mark as visited for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid_move(nx, ny) and dfs(nx, ny): return True return False return \'Yes\' if dfs(0, 0) else \'No\'"},{"question":"You are given an `n x n` matrix where each entry is either 0 or 1, representing a binary matrix. The matrix is said to be \\"symmetric\\" if for all `i` and `j`, the entry at position `i, j` is the same as the entry at position `j, i` (i.e., M[i][j] == M[j][i]). Write a function `count_symmetric_matrices(matrices)` that takes a list of binary matrices as input and returns the count of symmetric matrices among them. Each element in the list is a binary matrix represented as a list of lists. Input - The first line contains an integer `T`, the number of binary matrices. - The next `T` blocks each describe a binary matrix: - The first line of each block contains an integer `n`, the size of the matrix (number of rows and columns). - The next `n` lines each contain `n` integers (either 0 or 1), representing the rows of the matrix. Output - An integer representing the count of symmetric matrices. Constraints - 1 ≤ T ≤ 500 - 1 ≤ n ≤ 50 - Each entry in the matrix is either 0 or 1. Example Input: 3 3 1 0 1 0 1 0 1 0 1 2 1 0 0 1 2 1 1 0 1 Output: 2 Explanation In this example, among the three given matrices: 1. The first matrix is symmetric. 2. The second matrix is also symmetric. 3. The third matrix is not symmetric. Thus, the output is 2.","solution":"def count_symmetric_matrices(matrices): This function takes a list of binary matrices and returns the count of symmetric matrices among them. def is_symmetric(matrix): Helper function to check if a given matrix is symmetric. n = len(matrix) for i in range(n): for j in range(i, n): # Only need to check upper triangle if matrix[i][j] != matrix[j][i]: return False return True count = 0 for matrix in matrices: if is_symmetric(matrix): count += 1 return count"},{"question":"Sato loves to collect rare stamps. One day, he decided to organize his collection by grouping stamps with the same design together. Each stamp has a unique identification number and a design type. Sato wants to know how many groups of any design type he can form if he can group the stamps only when there are at least two of the same design. For simplicity, the program will read the number of stamps and then the corresponding design type for each stamp. Your task is to count how many unique design groups can be formed with at least two stamps of the same design. Input Multiple datasets are given as input. The first line of each dataset contains an integer n, the number of stamps. The next n lines contain one integer each, representing the design type of each stamp. When n is 0, it indicates the end of the input. Do not output for this input. Output For each dataset, print the number of groups of any design type that can be formed with at least two stamps of the same design on one line. Example Input 7 1 2 3 1 2 2 4 5 5 5 5 5 0 Output 2 1","solution":"def count_design_groups(datasets): Function to count the number of groups of any design type that can be formed with at least two stamps of the same design. results = [] for dataset in datasets: n = dataset[0] if n == 0: break design_count = {} for design in dataset[1:]: if design in design_count: design_count[design] += 1 else: design_count[design] = 1 groups = sum(1 for count in design_count.values() if count >= 2) results.append(groups) return results # Example usage: # datasets = [ # [7, 1, 2, 3, 1, 2, 2, 4], # [5, 5, 5, 5, 5], # [0] # ] # print(count_design_groups(datasets)) # Output: [2, 1]"},{"question":"In an amusement park, there is a water slide that consists of multiple segments connected in a specific order. Each segment i is represented by an integer which indicates the height of that segment above the ground level. To ensure the safety of park visitors, the water slide must be built according to the following rules: - Each segment must be either at the same height as the previous segment or lower. In other words, for each segment i (where (1 leq i leq n-1)), the height of segment (i+1) must be less than or equal to the height of segment (i). - Segment heights are given in a list, representing the heights in the order they are connected. Determine whether the water slide meets these safety requirements. Constraints: - 1 ≤ n ≤ 1000 - 0 ≤ height_i ≤ 10^4 (for all 1 ≤ i ≤ n) Input: Input is given from Standard Input in the following format: n height_1 height_2 ... height_n Output: If the water slide meets the safety requirements, print `Valid`. Otherwise, print `Invalid`. Examples: Input: 5 10 8 8 5 3 Output: Valid Input: 4 3 3 4 2 Output: Invalid Input: 3 7 7 1 Output: Valid Input: 2 5 5 Output: Valid Input: 6 12 10 11 9 8 7 Output: Invalid","solution":"def is_valid_water_slide(n, heights): Returns \'Valid\' if water slide meets safety requirements, else \'Invalid\'. for i in range(n - 1): if heights[i + 1] > heights[i]: return \'Invalid\' return \'Valid\'"},{"question":"Given a 2D grid with M rows and N columns, you need to help Tony the Turtle traverse from the top-left corner of the grid to the bottom-right corner. Tony can only move right or down at any point in time. Some cells in the grid are blocked and he cannot pass through them. Your task is to calculate the number of distinct paths that Tony can take to reach the bottom-right corner from the top-left corner of the grid, without passing through blocked cells. The grid is represented by a matrix of M rows and N columns where 0 indicates an open cell and 1 indicates a blocked cell. Input: The first line of input contains two integers, M and N, representing the number of rows and columns of the grid, respectively. The next M lines contain N space-separated integers (0 or 1), representing the grid. Output: Print a single integer representing the number of distinct paths from the top-left corner to the bottom-right corner of the grid. Constraints: 1 ≤ M, N ≤ 100 The grid will always have at least one cell. SAMPLE INPUT 3 3 0 0 0 0 1 0 0 0 0 SAMPLE OUTPUT 2 Explanation: For the sample input, the grid is: 0 0 0 0 1 0 0 0 0 There are two ways Tony can move from the top-left corner to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def num_distinct_paths(grid): rows = len(grid) cols = len(grid[0]) if grid[0][0] == 1 or grid[rows-1][cols-1] == 1: return 0 dp = [[0 for _ in range(cols)] for _ in range(rows)] dp[0][0] = 1 for i in range(rows): for j in range(cols): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[rows-1][cols-1]"},{"question":"Reverse Words in a Sentence Given a sentence, reverse the order of characters in each word while preserving the order of words. Input An integer T, denoting the number of test cases, followed by T lines, each containing a single sentence. Output For each sentence given as input, output a single line containing the sentence with the order of characters in each word reversed. Constraints 1 ≤ T ≤ 100 1 ≤ Length of each sentence ≤ 1000 Sentences only consist of printable ASCII characters and space. Example Input: 3 Hello World Coding is fun Python Output: olleH dlroW gnidoC si nuf nohtyP","solution":"def reverse_words_in_sentence(sentence): Given a sentence, reverse the order of characters in each word while preserving the order of words. Args: sentence (str): The input sentence. Returns: str: The sentence with the order of characters in each word reversed. words = sentence.split(\' \') reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words) def process_sentences(T, sentences): Process multiple sentences as per the reverse_words_in_sentence function. Args: T (int): Number of sentences. sentences (list of str): List containing the sentences. Returns: list of str: List containing processed sentences. results = [] for sentence in sentences: results.append(reverse_words_in_sentence(sentence)) return results"},{"question":"Alice has found a peculiar tree in her backyard. This tree has `n` nodes, and each node has a unique integer `id`, ranging from 1 to `n`. Alice loves playing with this tree, and she decides to mark some nodes and calculate the sum of their depths from the root. The depth of a node in a tree is the number of edges on the path from the root node to the given node. The root node has a depth of 0. To simplify this task, Alice wants you to write a program that, given the tree structure and a list of marked nodes, determines the sum of the depths of the marked nodes. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of nodes in the tree. - Each of the next `n-1` lines contains two integers `a` and `b` (1 ≤ a, b ≤ n), indicating that there is an edge between nodes `a` and `b`. - The following line contains an integer `m` (1 ≤ m ≤ n), the number of marked nodes. - The last line contains `m` integers, the ids of the marked nodes, separated by spaces. # Output - Print the sum of the depths of the marked nodes. # Example Input ``` 5 1 2 1 3 3 4 3 5 2 4 5 ``` Output ``` 4 ``` # Note In the given example, the tree structure is: 1 -> 2 1 -> 3 3 -> 4 3 -> 5 The depth of nodes is as follows: - Node 1: Depth 0 - Node 2: Depth 1 - Node 3: Depth 1 - Node 4: Depth 2 - Node 5: Depth 2 The sum of the depths of nodes 4 and 5 is 2 + 2 = 4.","solution":"def tree_depth_sum(n, edges, m, marked_nodes): from collections import deque, defaultdict # Create adjacency list for the tree graph = defaultdict(list) for a, b in edges: graph[a].append(b) graph[b].append(a) # BFS to calculate the depth of each node from the root (node 1) depths = {1: 0} queue = deque([1]) while queue: node = queue.popleft() current_depth = depths[node] for neighbor in graph[node]: if neighbor not in depths: depths[neighbor] = current_depth + 1 queue.append(neighbor) # Calculate the sum of depths of marked nodes depth_sum = 0 for node in marked_nodes: if node in depths: depth_sum += depths[node] return depth_sum"},{"question":"Problem You are given a list of N buildings in a city where each building has a certain height. There is also a list of M pairs of constraints where each constraint indicates that one building must be at least as tall as another building. The aim is to determine the minimum possible heights for all the buildings such that all constraints are satisfied and the sum of all building heights is minimized. Constraints The input satisfies the following conditions: * 1 leq N leq 10^5 * 0 leq M leq 10^5 * 1 leq a_i, b_i leq N (1-based index representing building numbers) Input All inputs are given as integers in the following format: N M a_1 b_1 a_2 b_2 ldots a_M b_M The first line contains the number of buildings N and the number of constraints M . The following M lines each contain two integers a_i and b_i , representing a constraint which states that the height of building a_i must be at least as high as the height of building b_i . Output Output a single integer which is the minimal possible sum of heights of all buildings while satisfying all the constraints. Examples Input 4 3 2 1 3 2 4 3 Output 10 Input 5 0 Output 15","solution":"from collections import defaultdict, deque def minimal_heights_sum(N, M, constraints): def topological_sort(N, graph, in_degree): # Queue of all nodes with no incoming edge (in_degree 0) zero_in_degree_queue = deque([node for node in range(1, N+1) if in_degree[node] == 0]) topological_order = [] while zero_in_degree_queue: current = zero_in_degree_queue.popleft() topological_order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) return topological_order graph = defaultdict(list) in_degree = [0] * (N + 1) for a, b in constraints: graph[a].append(b) in_degree[b] += 1 topo_order = topological_sort(N, graph, in_degree) heights = {building: index + 1 for index, building in enumerate(topo_order)} total_min_height = sum(heights[building] for building in range(1, N+1)) return total_min_height # Wrapper function to read input and call the solution def minimal_heights_sum_from_input(input_str): lines = input_str.strip().split(\'n\') N, M = map(int, lines[0].split()) constraints = [tuple(map(int, line.split())) for line in lines[1:]] return minimal_heights_sum(N, M, constraints)"},{"question":"You are given a rectangular grid of size n by m consisting of \'*\' and \'.\' characters. Your task is to determine whether it is possible to find a square sub-grid (with side length k) in the grid such that all characters inside the square are \'*\'. Input The first line contains three integers n, m, and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n, m)) — the dimensions of the grid and the side length of the square. Each of the next n lines contains m characters (\'*\' or \'.\') representing the grid. Output Print \\"YES\\" (without quotes) if there exists at least one k by k square in the grid composed entirely of \'*\' characters. Otherwise, print \\"NO\\". Examples Input 4 5 2 .*..* ***.* ****. ..... Output YES Input 3 4 3 **** ***. **.. Output NO Input 5 5 2 ***** ***** ***** ***** ***** Output YES","solution":"def is_square_of_stars(grid, n, m, k): Check if there exists a k by k square in the n by m grid composed entirely of \'*\' characters. for i in range(n - k + 1): for j in range(m - k + 1): if all(grid[x][y] == \'*\' for x in range(i, i + k) for y in range(j, j + k)): return \\"YES\\" return \\"NO\\""},{"question":"John is an avid gardener with a passion for landscaping. He has recently acquired a rectangular plot of land with dimensions n meters by m meters. John wants to divide the plot into multiple small square gardens of identical size to maximize the usage of the land. However, John dislikes leftover land that cannot be used for the gardens. Help John determine the largest possible side length of the square gardens such that there is no leftover land. Input Input consists of two space-separated integers n and m (1 ≤ n, m ≤ 10^6), the dimensions of the plot of land. Output Output a single integer — the largest possible side length of the square gardens. Examples Input 6 9 Output 3 Input 8 14 Output 2 Input 15 25 Output 5 Note In the first sample test, John can create up to 6 / 3 = 2 rows and 9 / 3 = 3 columns of square gardens, each with a side length of 3 meters. There is no leftover land. In the second sample test, John can create up to 8 / 2 = 4 rows and 14 / 2 = 7 columns of square gardens, each side 2 meters. There is no leftover land. In the third sample test, John can create up to 15 / 5 = 3 rows and 25 / 5 = 5 columns of square gardens, each side 5 meters. No land is left unused.","solution":"import math def largest_square_side(n, m): Returns the largest possible side length of square gardens such that there is no leftover land. return math.gcd(n, m)"},{"question":"There is a cache in a network system that holds `n` data objects, where each object has a unique identifier ranging from `1` to `n`. The system is designed such that users frequently access some objects and rarely need others. To optimize the efficiency, a least-recently-used (LRU) caching mechanism is implemented. The key characteristic of LRU is whenever an object is accessed, it becomes the most-recently used one, pushing the others less accessed. You need to simulate how this caching system works. Given `q` queries representing sequence of accesses made by users, determine the state of the cache after all queries have been processed. Each query provides the index of an object being accessed. If the object is already in the cache, it becomes the most-recently used object. If the object is not in the cache, it is added to the cache. If the cache is full and a new object needs to be added, the least-recently used object is removed from the cache to make space. Input The first line contains two integers `n` and `q` — the number of data objects and the number of queries, respectively (`1 ≤ n, q ≤ 100000`). The next line contains `q` integers — the sequence of accesses. Each access is represented by an integer from `1` to `n` (inclusive). Output Print a single line that represents the final contents of the cache, in the order from the most-recently used object to the least-recently used one. Each object should be represented by its identifier. Examples Input 3 5 2 3 2 1 2 Output 2 1 3 Input 4 6 4 3 2 1 4 2 Output 2 4 1 3 In the first example, the sequence of operations is: 1. Access 2 => Cache: [2] 2. Access 3 => Cache: [3, 2] 3. Access 2 => Cache: [2, 3] 4. Access 1 => Cache: [1, 2, 3] 5. Access 2 => Cache: [2, 1, 3] The final state of the cache after all accesses is [2, 1, 3]. In the second example, the sequence of operations is: 1. Access 4 => Cache: [4] 2. Access 3 => Cache: [3, 4] 3. Access 2 => Cache: [2, 3, 4] 4. Access 1 => Cache: [1, 2, 3, 4] 5. Access 4 => Cache: [4, 1, 2, 3] 6. Access 2 => Cache: [2, 4, 1, 3] The final state of the cache after all accesses is [2, 4, 1, 3].","solution":"from collections import deque def lru_cache(n, q, queries): cache = deque() cache_set = set() # To keep track of items in the cache for O(1) look-up for query in queries: if query in cache_set: # Move the accessed item to the front (most recent) cache.remove(query) cache.appendleft(query) else: if len(cache) == n: # Remove the least recently used item from both cache and cache_set lru_item = cache.pop() cache_set.remove(lru_item) # Add the new item to the front (most recent) cache.appendleft(query) cache_set.add(query) return list(cache)"},{"question":"Given a sequence of integers representing the height of hurdles in a race and a value representing the maximum height a jumper can jump, determine the minimum number of magic potions the jumper needs to drink to clear all the hurdles. Each magic potion increases the jumper\'s maximum height by 1 unit. Input 1. An integer `n` representing the number of hurdles (1 ≤ n ≤ 100). 2. A list of `n` integers representing the heights of the hurdles (1 ≤ height ≤ 100). 3. An integer `k` representing the maximum height the jumper can jump naturally (1 ≤ k ≤ 100). Output Output a single integer representing the minimum number of magic potions the jumper needs to drink to clear all the hurdles. Example 1. Input ``` 5 1 6 3 5 2 4 ``` Output ``` 2 ``` 2. Input ``` 8 2 5 4 5 2 6 7 8 5 ``` Output ``` 3 ```","solution":"def min_magic_potions(n, hurdles, k): Calculates the minimum number of magic potions required for the jumper to clear all hurdles. :param n: An integer representing the number of hurdles. :param hurdles: A list of integers representing the heights of the hurdles. :param k: An integer representing the maximum height the jumper can jump naturally. :return: An integer representing the minimum number of magic potions required. max_hurdle = max(hurdles) if k >= max_hurdle: return 0 else: return max_hurdle - k"},{"question":"You are participating in an international coding contest with a prize for the fastest code. To simulate the contest conditions, you will be given a set of test cases. Each test case consists of a string s containing only characters \'A\' and \'B\'. You need to determine the length of the longest contiguous substring that contains an equal number of \'A\'s and \'B\'s. Note that the length of the substring can be zero if no such substring exists. Input The first line of input contains a single integer t (1 ≤ t ≤ 10 000) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 100 000) consisting only of characters \'A\' and \'B\'. It is guaranteed that the sum of |s| over all test cases does not exceed 1 000 000. Output For each test case, print a single integer — the length of the longest contiguous substring that contains an equal number of \'A\'s and \'B\'s. Example Input 3 ABAB AAABBB ABBA Output 4 6 4 Explanation For the first test case, the entire string \\"ABAB\\" has equal \'A\'s and \'B\'s and thus the output is 4. For the second test case, the entire string \\"AAABBB\\" has equal \'A\'s and \'B\'s and thus the output is 6. For the third test case, the entire string \\"ABBA\\" has equal \'A\'s and \'B\'s and thus the output is 4.","solution":"def longest_equal_ab_substring(s): Function to find the length of the longest contiguous substring that contains an equal number of \'A\'s and \'B\'s. max_len = 0 balance = 0 balance_dict = {0: -1} for i, char in enumerate(s): if char == \'A\': balance += 1 else: balance -= 1 if balance in balance_dict: max_len = max(max_len, i - balance_dict[balance]) else: balance_dict[balance] = i return max_len def longest_equal_ab_substring_for_tests(t, test_cases): results = [] for s in test_cases: results.append(longest_equal_ab_substring(s)) return results"},{"question":"Jenga is a popular block stacking game consisting of n blocks, each with a unique number assigned consecutively from 1 to n. The blocks are stacked in increasing order from bottom to top, with block 1 at the bottom and block n at the top. In each move, a player can either extract the topmost block (if available) or extract the bottommost block (if available). Moreover, players can reconstruct the tower with the extracted blocks by arranging them into a new stack, always placing the last extracted block at the top. The goal is to determine if the players can reconstruct the tower by arranging the extracted blocks in such a way that the new tower remains in increasing order from bottom to top. Given the sequence of moves, determine if the reconstruction is possible. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of t test cases follows. Each test case consists of two lines. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of blocks. The second line contains n integers describing the sequence of moves. Each of these integers can be 1 or 2, where 1 denotes extracting the topmost block and 2 denotes extracting the bottommost block. Output For each test case, print \\"YES\\" if the reconstruction of the tower in increasing order is possible, otherwise print \\"NO\\". Examples Input 2 3 1 2 1 1 2 2 4 2 2 1 1 2 1 1 1 Output YES NO","solution":"def can_reconstruct_tower(n, moves): top_blocks = list(range(1, n + 1)) bottom_blocks = [] for move in moves: if move == 1: if top_blocks: bottom_blocks.append(top_blocks.pop()) else: return \\"NO\\" elif move == 2: if bottom_blocks: bottom_blocks = bottom_blocks[:-1] else: return \\"NO\\" # check if the remaining bottom_blocks is in increasing order prev = float(\'-inf\') for block in bottom_blocks: if block <= prev: return \\"NO\\" prev = block return \\"YES\\" def solve(t, test_cases): results = [] for n, moves in test_cases: results.append(can_reconstruct_tower(n, moves)) return results"},{"question":"Leon is taking part in a coding competition, where he must solve a series of tasks efficiently. For one of these tasks, he needs to parse through a document and identify specific patterns. The document consists of a sequence of words, and Leon is given a list of patterns to search for within this sequence. He needs to determine how many times each pattern appears in the document as a contiguous subsequence. Given a document consisting of n words and a list of m patterns, each pattern represented as a sequence of words, help Leon determine the number of times each pattern appears contiguously in the document. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100000), the number of words in the document and the number of patterns. - The second line contains n words, representing the document. Each word is a string of lowercase English letters of length between 1 and 10. - The next m lines each contain a sequence of words, representing a pattern. Each sequence will have words in the same format as described above. Output - Print m integers. The i-th integer should represent the number of times the i-th pattern appears contiguously in the document. Example Input 10 3 the quick brown fox jumps over the lazy dog quick quick brown fox the lazy dog jumps over the Output 1 1 1 Explanation In the example above: - The pattern \\"quick brown fox\\" appears once in the document. - The pattern \\"the lazy dog\\" appears once in the document. - The pattern \\"jumps over the\\" appears once in the document.","solution":"def find_pattern_occurrences(n, m, document, patterns): results = [] document_text = \' \'.join(document) for pattern in patterns: pattern_text = \' \'.join(pattern) count = document_text.count(pattern_text) results.append(count) return results # Example input n = 10 m = 3 document = [\\"the\\", \\"quick\\", \\"brown\\", \\"fox\\", \\"jumps\\", \\"over\\", \\"the\\", \\"lazy\\", \\"dog\\", \\"quick\\"] patterns = [ [\\"quick\\", \\"brown\\", \\"fox\\"], [\\"the\\", \\"lazy\\", \\"dog\\"], [\\"jumps\\", \\"over\\", \\"the\\"] ] # Printing output for verification print(find_pattern_occurrences(n, m, document, patterns))"},{"question":"A company is planning a new reward system for employees based on their performance evaluations across projects. Each project has a certain number of points associated with it, and every employee has a total score based on the points from all projects they\'ve worked on. To be eligible for a reward, an employee needs to reach a threshold total score. Given the scores from different projects for each employee, determine the minimum number of additional points required for each employee to reach the threshold score. If an employee already meets or exceeds the threshold, no additional points are needed. Input The first line contains two integers n and t (1 ≤ n ≤ 105, 1 ≤ t ≤ 104) — the number of employees and the threshold score for the reward. Each of the following n lines contains an integer si (0 ≤ si ≤ 104) — the current score of the i-th employee. Output For each employee, print the minimum number of additional points required to reach the threshold score. Print 0 if the employee already meets the threshold. Examples Input 3 100 80 120 90 Output 20 0 10 Input 2 50 50 40 Output 0 10 Note In the first sample, the first employee needs 20 more points to reach the threshold, the second employee already meets the threshold, and the third employee needs 10 more points. In the second sample, the first employee already meets the threshold, and the second employee needs 10 more points to reach the threshold.","solution":"def min_additional_points(n, t, scores): This function calculates the minimum additional points each employee needs to reach the threshold score. :param n: Integer, the number of employees. :param t: Integer, the threshold score for the reward. :param scores: List of integers, the current scores of each employee. :return: List of integers, minimum additional points required for each employee. results = [] for score in scores: if score >= t: results.append(0) else: results.append(t - score) return results"},{"question":"Input The input contains two integers n (1 ≤ n ≤ 10^9) and m (1 ≤ m ≤ 10^9). Output Output a single number which is the greatest common divisor (GCD) of n and m. Examples Input 12 15 Output 3 Input 17 31 Output 1 Input 100 75 Output 25","solution":"import math def gcd(n, m): Returns the greatest common divisor of n and m. return math.gcd(n, m)"},{"question":"problem The company XYZ provides coaching for a variety of competitive exams. To efficiently manage the coaching league, they divide students in leagues based on their scores. Each league has a fixed score range, and students scoring within this range are assigned to the respective league. The leagues are as follows: 1. Bronze: 0 - 499 points 2. Silver: 500 - 999 points 3. Gold: 1000 - 1499 points 4. Platinum: 1500 - 1999 points 5. Diamond: 2000 - 2499 points Due to recent developments, XYZ wants to add a new feature that recommends students to leagues based on their scores. However, there can be bonus points awarded to students for extra-curricular activities which need to be considered before placing them in any league. You are required to implement a program that reads the student scores and any bonus points they have received, and then assigns them to the appropriate league. # Input - The first line contains an integer N (1 ≤ N ≤ 100000), the number of students. - The next N lines each contain two integers Si (0 ≤ Si ≤ 1000000000) and Bi (0 ≤ Bi ≤ 500), representing the score of the student and the bonus points earned by the student, respectively. # Output - Output N lines each containing one of the strings \\"Bronze\\", \\"Silver\\", \\"Gold\\", \\"Platinum\\", or \\"Diamond\\" based on the total score (sum of initial score Si and bonus points Bi). # Example Input ``` 5 450 50 1000 400 2300 100 700 0 1500 0 ``` Output ``` Bronze Platinum Diamond Silver Platinum ``` # Explanation - The first student has a total score of 450 + 50 = 500, which falls in the Silver league. - The second student has a total score of 1000 + 400 = 1400, which falls in the Gold league. - The third student has a total score of 2300 + 100 = 2400, which falls in the Diamond league. - The fourth student has a total score of 700 + 0 = 700, which falls in the Silver league. - The fifth student has a total score of 1500 + 0 = 1500, which falls in the Platinum league.","solution":"def recommend_league(students): Recommends the league based on total score including bonus points for each student. Args: students: List of tuples where each tuple contains the score and bonus points of a student. Returns: List of strings representing leagues for each student. leagues = [] for score, bonus in students: total_score = score + bonus if 0 <= total_score <= 499: leagues.append(\\"Bronze\\") elif 500 <= total_score <= 999: leagues.append(\\"Silver\\") elif 1000 <= total_score <= 1499: leagues.append(\\"Gold\\") elif 1500 <= total_score <= 1999: leagues.append(\\"Platinum\\") elif 2000 <= total_score <= 2499: leagues.append(\\"Diamond\\") else: raise ValueError(f\\"Total score {total_score} is out of the valid range for any league.\\") return leagues # Function to process input and call recommend_league def process_student_leagues(input_list): Processes the input list to get the recommended league for each student. Args: input_list: List of strings containing the number of students and the score and bonus for each student. Returns: List of strings representing leagues for each student. n = int(input_list[0]) students = [tuple(map(int, line.split())) for line in input_list[1:n+1]] return recommend_league(students)"},{"question":"You are an analyst keeping track of product sales for an e-commerce company. Your goal is to identify the best-selling product in each category for a given day, based on the number of units sold. You have been provided with a list of sales records for a specific day. Each record contains the category of the product, the product\'s name, and the number of units sold. Write a program to identify the best-selling product in each category. If two or more products have the highest number of units sold in a given category, select the product which comes first lexicographically. Input The input consists of multiple lines. Each line describes a sales record consisting of three values: a string `category`, a string `product_name`, and an integer `units_sold`. There could be up to 100,000 sales records in a single day. The input is terminated by the end-of-file. Output For each category that appears in the input, output the best-selling product\'s name followed by the number of units sold, all separated by a single space. The output should be sorted lexicographically by category. Example Input electronics phone 30 clothing shirt 50 electronics laptop 20 clothing jeans 50 clothing jacket 30 electronics phone 40 clothing shirt 50 Output clothing jeans 50 electronics phone 40","solution":"def find_best_selling_products(sales_records): from collections import defaultdict best_sellers = defaultdict(lambda: (\\"\\", 0)) # dictionary to store the best seller per category for category, product, units in sales_records: if (units > best_sellers[category][1]) or (units == best_sellers[category][1] and product < best_sellers[category][0]): best_sellers[category] = (product, units) result = [] for category in sorted(best_sellers): result.append((category, best_sellers[category][0], best_sellers[category][1])) return result def parse_input(input_lines): sales_records = [] for line in input_lines: parts = line.strip().split() category = parts[0] product = \' \'.join(parts[1:-1]) units_sold = int(parts[-1]) sales_records.append((category, product, units_sold)) return sales_records"},{"question":"Story Alice is learning about prime numbers, and she finds them fascinating. To improve her programming skills, she decides to work on a problem related to prime numbers. She wants to write a program that finds all prime numbers between two given numbers A and B, inclusive. Moreover, Alice wants to know the sum of these prime numbers. Problem Given two integers A and B, write a program that finds all prime numbers between A and B (inclusive) and returns their sum. Input The input is given in the following format: A B Where: - A: An integer representing the starting number of the range. - B: An integer representing the ending number of the range. Constraints: * 1 leq A leq B leq 10000 * A and B are integers. Output Output the sum of all prime numbers between A and B (inclusive) on one line. If there are no prime numbers in the given range, output 0. Example 1 Input 1 10 Output 17 Explanation The prime numbers between 1 and 10 are 2, 3, 5, and 7. Their sum is 17. Example 2 Input 20 30 Output 52 Explanation The prime numbers between 20 and 30 are 23 and 29. Their sum is 52. Example 3 Input 14 16 Output 0 Explanation There are no prime numbers between 14 and 16, so the output is 0.","solution":"def is_prime(n): Helper function to check if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes(A, B): Returns the sum of all prime numbers between A and B (inclusive). total_sum = 0 for num in range(A, B + 1): if is_prime(num): total_sum += num return total_sum"},{"question":"Kamal wants to organize his comic book collection, but he needs your help for a specific task. He has n comic books, each with a unique identifier (positive integers). Kamal likes to read comic books in a progressive series, and each series consists of books whose identifiers are in increasing consecutive order. For example, if he has books with identifiers [3, 5, 6, 7, 9], the longest series he can read consecutively would be [5, 6, 7]. Your task is to help Kamal find the length of the longest sequence of consecutive comic books he owns. Input The first line contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of comic books. The second line contains n distinct integers representing the identifiers of the comic books (1 ≤ identifier ≤ 10^9). Output Output a single integer — the length of the longest sequence of consecutive comic books among the given identifiers. Examples Input 5 3 5 6 7 9 Output 3 Input 4 1 2 4 5 Output 2 Input 6 10 4 20 1 3 2 Output 4 Note In the first sample, the longest sequence of consecutive comic books is [5, 6, 7] which has a length of 3. In the second sample, the longest sequence of consecutive comic books can either be [1, 2] or [4, 5], each with a length of 2. In the third sample, the longest sequence of consecutive comic books is [1, 2, 3, 4] which has a length of 4.","solution":"def longest_consecutive_sequence(n, ids): Returns the length of the longest consecutive sequence in the comic book identifiers. :param n: the number of comic books :param ids: list of comic book identifiers :return: length of the longest consecutive sequence ids_set = set(ids) longest_sequence = 0 for id in ids: if id - 1 not in ids_set: # This means the start of a new sequence current_id = id current_sequence = 1 while current_id + 1 in ids_set: current_id += 1 current_sequence += 1 longest_sequence = max(longest_sequence, current_sequence) return longest_sequence"},{"question":"Problem description: Write a function that simulates an elevator system based on the given commands and prints the final floor at the end of the command sequence. Elevator starts at floor 0. Given a list of commands, each command is either \\"UP x\\", \\"DOWN x\\", or \\"WAIT x\\", where x is the number of floors to move up or down, or the number of floors waited on. Input The first line contains a single integer T, the number of test cases. For each test case, the first line contains an integer N, the number of commands. Each of the next N lines contains one command (either \\"UP x\\", \\"DOWN x\\", or \\"WAIT x\\"). Output For each test case, output a single integer, the final floor after executing all commands. Constraints 1 <= T <= 100 1 <= N <= 1000 1 <= x <= 1000 Example Input: 2 3 UP 3 DOWN 1 UP 2 4 UP 5 DOWN 3 WAIT 4 UP 1 Output: 4 3","solution":"def get_final_floors(test_cases): results = [] for commands in test_cases: current_floor = 0 for command in commands: action, value = command.split() value = int(value) if action == \\"UP\\": current_floor += value elif action == \\"DOWN\\": current_floor -= value # We ignore \\"WAIT x\\" since it doesn\'t change the floor results.append(current_floor) return results def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) commands = lines[index + 1 : index + 1 + N] test_cases.append(commands) index += N + 1 return test_cases"},{"question":"In a distant planet called Xylon, there are m robotic soldiers arranged in a single file. Each soldier has a unique ID number from 1 to m, and each ID number is written on a metal plate worn by the soldier. These plates are used to determine the power ranks of the soldiers. The power rank of a robotic soldier with ID i is represented by pi. One day, a powerful magnetic storm affected Xylon, and due to the storm, the power ranks got shuffled in such a way that the power rank pi of the soldier with ID i might no longer be in the correct order. Now, it\'s your task to help the Xylonians determine the minimum number of soldiers that need to be repositioned to restore the correct order of power ranks. Specifically, given the list of current power ranks of the soldiers, determine the minimum number of moves needed such that the power ranks become strictly increasing. Input The first line of the input contains a single integer m (1 ≤ m ≤ 100,000) — the number of robotic soldiers. The second line contains m integers representing the current power ranks of the soldiers in sequence. Output Output a single integer — the minimum number of moves required to make the power ranks strictly increasing. Examples Input 5 2 5 3 7 8 Output 1 Input 7 1 3 2 4 7 6 8 Output 2 Input 4 4 4 4 4 Output 3","solution":"def min_moves_to_make_increasing(power_ranks): from bisect import bisect_left if not power_ranks: return 0 lis = [] for rank in power_ranks: pos = bisect_left(lis, rank) if pos == len(lis): lis.append(rank) else: lis[pos] = rank return len(power_ranks) - len(lis)"},{"question":"MetaCorp, a tech start-up, is developing an advanced text editor that automatically corrects sentences by removing unnecessary spaces. As a part of the team, you are assigned to write a function that reformats a given paragraph by ensuring there is exactly one space character between words and no leading or trailing space. Input The input consists of a single line containing a paragraph P. Output Output a single line containing the reformatted paragraph. Constraints 1. 1 ≤ |P| ≤ 10^6, where |P| is the length of the paragraph 2. P contains a mix of uppercase and lowercase Latin characters and space characters. SAMPLE INPUT \\" Hello world! This is an example sentence. \\" SAMPLE OUTPUT \\"Hello world! This is an example sentence.\\"","solution":"def reformat_paragraph(p): Reformats a given paragraph by ensuring there is exactly one space character between words and no leading or trailing space. :param p: str, the input paragraph :return: str, the reformatted paragraph # Strip leading/trailing spaces and split the paragraph by space words = p.strip().split() # Join the words with a single space return \' \'.join(words)"},{"question":"Polycarp has a list of strings and he wants to perform operations to standardize their lengths. Given a target length k, Polycarp must modify each string in the list to ensure all strings have the same length k. If a string\'s length is less than k, Polycarp will add the character \'a\' to the end of the string until it reaches the target length. If a string\'s length is more than k, Polycarp will truncate the string to make its length equal to k. Can you help Polycarp with this task? Input: The first line contains two positive integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ 100), where n is the number of strings and k is the target length. Each of the next n lines contains a string consisting of lowercase English letters. Output: Print the resulting list of strings of length k after performing the required modifications. Examples: Input: 3 5 apple dog mouse Output: apple dogaa mouse Input: 4 3 cat kitten a barks Output: cat kit a bar Note: In the first sample, the string \\"dog\\" which is of length 3 is extended to \\"dogaa\\" by adding \'a\'s at the end. The string \\"mouse\\" remains unchanged since its length is already 5. In the second sample, the string \\"kitten\\" is truncated to \\"kit\\", and the strings \\"a\\" and \\"barks\\" are modified to \\"a\\" (extended to \\"aaa\\") and \\"bar\\" respectively.","solution":"def standardize_strings(n, k, strings): Standardizes the lengths of strings to a target length k. Parameters: n (int): Number of strings k (int): Target length for each string strings (list of str): List containing the strings Returns: list of str: List of strings each of length k result = [] for string in strings: if len(string) < k: string = string + \'a\' * (k - len(string)) else: string = string[:k] result.append(string) return result"},{"question":"In a certain city, there is an interesting mode of transportation involving \\"jumping points.\\" There are n jumping points in the city, connected by n-1 one-way paths such that every point can be reached from the main point (point 1). Each point has a number of tourists initially present. The paths form a tree (i.e., a connected graph with no cycles). Cars can also travel along these paths, and a car can pick up all tourists from a point and drop them off at another point. The objective is to maximize the number of tourists that can be brought to the main point (point 1) by moving the car along the provided paths optimally. # Input: - The first line contains a single integer n (2 ≤ n ≤ 2⋅10^5) — the number of jumping points. - The second line contains n-1 integers p_2, p_3, ... p_n indicating there is a one-way path from the jumping point p_i to the jumping point i (1 ≤ p_i < i). - The third line contains n integers b_1, b_2, ..., b_n where b_i (0 ≤ b_i ≤ 10^9) is the number of tourists at jumping point i. # Output: - Print a single integer — the maximum number of tourists that can be brought to the main point (point 1). # Examples: Input: 5 1 1 2 3 4 5 1 3 2 Output: 15 Input: 4 1 2 3 7 5 4 2 Output: 18 # Note: In the first example: - Initially, there are 4 tourists at point 1, 5 tourists at point 2, 1 tourist at point 3, 3 tourists at point 4, and 2 tourists at point 5. - The optimal strategy is to move the car as follows: - First, bring the 3 tourists from point 4 to point 1 via points 3 and 2. - Next, bring the 2 tourists from point 5 to point 1 via points 3 and 2. - Finally, bring the 1 tourist from point 3 to point 1 via point 2. - This way, the main point (point 1) will have a total of 4 + 5 + 3 + 2 + 1 = 15 tourists. In the second example: - Initially, there are 7 tourists at point 1, 5 tourists at point 2, 4 tourists at point 3, and 2 tourists at point 4. - The optimal strategy is to move the car to bring all tourists from points 4, 3, and 2 to point 1. - The main point (point 1) will have a total of 7 + 5 + 4 + 2 = 18 tourists.","solution":"def max_tourists(n, paths, tourists): from collections import defaultdict # Create adjacency list for the tree tree = defaultdict(list) for i in range(2, n+1): tree[paths[i-2]].append(i) # DFS function to aggregate tourists def dfs(node): total = tourists[node - 1] for child in tree[node]: total += dfs(child) return total # Calculate total tourists that can be brought to the main point (point 1) return dfs(1)"},{"question":"Cryptarithms are puzzles where the digits are replaced by letters of the alphabet. These puzzles require you to figure out which letter corresponds to which digit. Each letter represents a unique digit from 0 to 9. No two letters can represent the same digit. Given a simple cryptarithm problem, solve for the values of the letters. # Problem Statement: You are given an addition cryptarithm in the following format: ``` SEND + MORE ------- MONEY ``` You need to determine the digit values of the letters S, E, N, D, M, O, R, and Y such that the above addition holds true. # Input There is no input; you need to solve the cryptarithm as stated. # Output Output the digit values of the letters S, E, N, D, M, O, R, and Y in the following format: ``` S = ? E = ? N = ? D = ? M = ? O = ? R = ? Y = ? ``` # Constraints: - Each letter must be assigned a unique digit. - Leading zeros are not allowed. For example, in SEND and MORE, S and M cannot be 0. # Example Given the example above, the correct solution is: ``` S = 9 E = 5 N = 6 D = 7 M = 1 O = 0 R = 8 Y = 2 ``` # Additional Constraints: - No two letters can be assigned the same digit. - All given letter representations are uppercase and non-empty. Your task is to write a program that finds the correct digit values for the letters so that the cryptarithm holds true.","solution":"def solve_cryptarithm(): Solves the given addition cryptarithm puzzle and returns a dictionary with the digit values for the letters S, E, N, D, M, O, R, and Y. from itertools import permutations # Define the letters involved in the puzzle letters = \'SENDMORY\' # Define the function that checks if a particular permutation of digits is a valid solution def is_valid_solution(perm): # Create a mapping from letters to digits mapping = dict(zip(letters, perm)) # S and M cannot be zero if mapping[\'S\'] == 0 or mapping[\'M\'] == 0: return False # Calculate the integer values of SEND, MORE, and MONEY based on the current mapping SEND = mapping[\'S\'] * 1000 + mapping[\'E\'] * 100 + mapping[\'N\'] * 10 + mapping[\'D\'] MORE = mapping[\'M\'] * 1000 + mapping[\'O\'] * 100 + mapping[\'R\'] * 10 + mapping[\'E\'] MONEY = mapping[\'M\'] * 10000 + mapping[\'O\'] * 1000 + mapping[\'N\'] * 100 + mapping[\'E\'] * 10 + mapping[\'Y\'] # Check if this mapping satisfies the equation SEND + MORE = MONEY return SEND + MORE == MONEY # Try all permutations of the digits 0-9 for the letters for perm in permutations(range(10), 8): if is_valid_solution(perm): # Create a mapping from letters to digits for the valid solution mapping = dict(zip(letters, perm)) return mapping # If no solution is found, return None return None # Output the solution solution = solve_cryptarithm() if solution: for letter in \'SENDMORY\': print(f\\"{letter} = {solution[letter]}\\")"},{"question":"A factory is producing widgets and needs to streamline the process of managing inventory levels. There are multiple types of widgets, and each type has its own reorder threshold. The factory manager wants to ensure that anytime a particular type of widget falls below its reorder threshold, an order for that widget is placed automatically. You are given a list of widget types, their current inventory levels, and their reorder thresholds. You need to determine which widget types require reordering. Input The first line consists of a single integer T (1 ≤ T ≤ 50) indicating the number of test cases to follow. Each test case consists of two lines. - The first line of each test case starts with an integer N (1 ≤ N ≤ 100), representing the number of widget types. It is followed by N pairs of integers, with the i-th pair (Ci Ri) denoting the current inventory level Ci (0 ≤ Ci ≤ 1000) and the reorder threshold Ri (1 ≤ Ri ≤ 1000) for the i-th widget type. - The second line of each test case contains N strings representing the widget type names, corresponding to the inventory levels and reorder thresholds given in the first line. Output For each test case, output a single line containing the names of all widget types that require reordering. If no widget types require reordering, output \\"None\\". The widget type names should be listed in the order they appear in the input. Example Input: 2 3 100 150 50 50 30 75 widgetA widgetB widgetC 2 80 80 45 60 widgetX widgetY Output: widgetA widgetC widgetY Explanation In the first test case: - \'widgetA\' has 100 widgets but requires 150 to avoid reordering, so it needs reordering. - \'widgetB\' has 50 widgets and the threshold is 50, so it does not need reordering. - \'widgetC\' has 30 widgets but needs at least 75, so it needs reordering. In the second test case: - \'widgetX\' has 80 widgets, exactly matching the threshold, so no reordering is needed. - \'widgetY\' has 45 widgets but the threshold is 60, so it needs reordering.","solution":"def check_reorder(T, test_cases): results = [] for t in range(T): data, names = test_cases[t] to_reorder = [] for i in range(data[0]): current_inventory = data[1 + i * 2] reorder_threshold = data[2 + i * 2] if current_inventory < reorder_threshold: to_reorder.append(names[i]) if to_reorder: results.append(\\" \\".join(to_reorder)) else: results.append(\\"None\\") return results"},{"question":"You are given a list of n integers, and you need to rearrange these integers according to a given pattern by following specific transformation steps. The pattern is given by an integer k which indicates that every k-th element should be moved to the end of the new list. Your task is to implement a function that restructures the list accordingly. For example, given the list [1, 2, 3, 4, 5, 6, 7, 8, 9] and k = 3, every third element (3, 6, 9) should be moved to the end, resulting in the list [1, 2, 4, 5, 7, 8, 3, 6, 9]. Input The input consists of two lines: 1. An integer n (1 ≤ n ≤ 105), the number of integers in the list. 2. A list of n integers, where each integer a_i (1 ≤ a_i ≤ 109). 3. An integer k (1 ≤ k ≤ n), the step size for moving elements. Output Output the rearranged list of integers. Examples Input 9 1 2 3 4 5 6 7 8 9 3 Output 1 2 4 5 7 8 3 6 9 Input 5 10 20 30 40 50 2 Output 10 30 50 20 40 Input 6 1 2 3 4 5 6 1 Output 1 2 3 4 5 6 Note In the first example, every third element (3, 6, 9) is moved to the end, giving the final list [1, 2, 4, 5, 7, 8, 3, 6, 9]. In the second example, every second element (20, 40) is moved to the end, resulting in the list [10, 30, 50, 20, 40]. In the third example, k is equal to 1, so no rearrangement is needed and the list remains unchanged.","solution":"def rearrange_list(n, lst, k): Rearranges the list such that every k-th element is moved to the end. Args: n (int): Number of elements in the list. lst (list of int): The list of integers to be rearranged. k (int): The step size for moving elements. Returns: list of int: The rearranged list. if k <= 0 or k > n: return lst result = [] end_elements = [] for i, val in enumerate(lst): if (i + 1) % k == 0: end_elements.append(val) else: result.append(val) return result + end_elements"},{"question":"A logistics company uses a system to keep track of packages as they move through various checkpoints. Each checkpoint updates the status of a package to denote its progress. The status is represented as a numerical value which increments by 1 every time the package arrives at a new checkpoint. You are tasked with creating a function to determine the current status of all packages after they have gone through a certain number of checkpoints. Each package can start with an initial status value, which is then incremented based on the number of checkpoints it passes through. Given an array of initial statuses of the packages and the number of checkpoints they passed through, write a function to return the statuses of all packages after passing through the checkpoints. Input You are given two integers n and m (1 ≤ n, m ≤ 100) and an array of n integers. The array represents the initial status values of the packages. Output Print n integers representing the updated status values of the packages after passing through all checkpoints. Example Input 5 3 2 4 1 7 3 Output 5 7 4 10 6 Input 4 2 6 3 8 1 Output 8 5 10 3","solution":"def update_package_statuses(initial_statuses, checkpoints_passed): Update the status values of packages based on the number of checkpoints they\'ve passed through. Args: initial_statuses (list[int]): An array of integers representing the initial status values of the packages. checkpoints_passed (int): The number of checkpoints each package has passed through. Returns: list[int]: An array of updated status values of the packages. return [status + checkpoints_passed for status in initial_statuses]"},{"question":"You are given a set of n integers. You need to determine the maximum possible absolute difference between any two integers in the set. Input The first line contains integer n — the number of integers (1 ≤ n ≤ 2·105). The second line contains n space-separated integers ai (−106 ≤ ai ≤ 106). Output Print the maximum absolute difference between any two integers in the set. Examples Input 4 1 3 -7 8 Output 15","solution":"def max_absolute_difference(n, arr): Returns the maximum absolute difference between any two integers in the set. # The maximum absolute difference will be between the minimum and maximum values of the array max_val = max(arr) min_val = min(arr) return abs(max_val - min_val) # Example usage: # n = 4 # arr = [1, 3, -7, 8] # print(max_absolute_difference(n, arr)) # Output: 15"},{"question":"Jason, a math enthusiast, has been studying number theory recently. During his study, he encountered the concept of prime numbers and was intrigued by the *Sieve of Eratosthenes*, an ancient algorithm used to find all prime numbers up to a given limit. Jason decided to test his understanding by writing a program to generate a list of primes up to a number *n*. However, Jason\'s implementation had a small bug, and he now asks for your help to write a correct version of the program that generates prime numbers using the Sieve of Eratosthenes algorithm. Input The first and only line of input contains a single integer *n* (1 ≤ n ≤ 10,000), the upper limit up to which you need to find the prime numbers. Output Print all prime numbers up to *n* in ascending order. Each prime number should be printed on a new line. Examples Input 10 Output 2 3 5 7 Input 20 Output 2 3 5 7 11 13 17 19","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to and including n using the Sieve of Eratosthenes algorithm. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0], is_prime[1] = False, False # 0 and 1 are not primes primes = [] for i in range(2, n + 1): if is_prime[i]: primes.append(i) for j in range(i * i, n + 1, i): is_prime[j] = False return primes"},{"question":"Given a list of strings, create a program that groups the anagrams together. An anagram is a word, phrase, or name formed by rearranging the letters of another, such as \\"cinema\\" and \\"iceman\\". Your task is to write a function that groups the strings that are anagrams of each other. # Input The input consists of a single integer N, the number of strings, followed by N lines each containing one string. # Output The output should be a list of lists where each sublist contains strings that are anagrams of each other. The sublists should be ordered lexicographically based on their first element. Within each sublist, the anagrams should also be sorted lexicographically. # Constraints * 1 ≤ N ≤ 10^4 * The length of each string is between 1 and 100, inclusive. * All strings contain only lowercase English letters. # Example Input ``` 6 eat tea tan ate nat bat ``` Output ``` [[\'ate\', \'eat\', \'tea\'], [\'bat\'], [\'nat\', \'tan\']] ``` Input ``` 3 apple pale leap ``` Output ``` [[\'apple\'], [\'leap\', \'pale\']] ``` # Note - The input and output format should be exactly as stated. - The first sublist in the output, `[\'ate\', \'eat\', \'tea\']`, is sorted based on its first element \'ate\' in lexicographic order. - Also, `[\'ate\', \'eat\', \'tea\']` contains its elements sorted lexicographically within the sublist.","solution":"def group_anagrams(strings): from collections import defaultdict anagrams = defaultdict(list) for s in strings: sorted_s = \'\'.join(sorted(s)) anagrams[sorted_s].append(s) # Convert the defaultdict to a list of lists result = list(anagrams.values()) # Sort each group of anagrams lexicographically for group in result: group.sort() # Sort the groups lexicographically based on their first element result.sort(key=lambda x: x[0]) return result"},{"question":"A tree house is built out of a special kind of wooden planks. Each plank has an identifier and a strength level. You are tasked with determining the highest possible aggregate strength of planks that can be used without any plank exceeding a given identifier length. Write a program that takes: 1. An integer `n` representing the total number of planks. 2. A list of tuples, where each tuple contains the identifier length and strength of a plank. 3. An integer `m` representing the maximum allowed identifier length for any plank in the selection. The program should output the highest possible aggregate strength of planks that can be used, considering the given constraints. # Input Format Example: ``` n = 4 planks = [ (3, 10), (4, 50), (2, 20), (3, 30) ] m = 3 ``` # Output Format Example: ``` 60 ``` In this example, the chosen planks should be the ones with identifier lengths of 3, 2, and 3, resulting in a total strength of 10 + 20 + 30 = 60.","solution":"def highest_strength(n, planks, m): Returns the highest possible aggregate strength of planks without any plank exceeding the given identifier length m. # Filter planks to ensure not exceeding identifier length m valid_planks = [strength for length, strength in planks if length <= m] # Calculate the highest possible aggregate strength highest_strength = sum(valid_planks) return highest_strength"},{"question":"Mirai has a grid of size `N x N` filled with only \'0\'s and \'1\'s. She needs to find out the smallest possible size of the sub-grid that contains at least one \'1\' in each of its rows. Consider the grid is provided as strings where \'1\' and \'0\' will be the characters. Constraints * 1 ≤ N ≤ 2000 * The grid consists of \'0\' and \'1\' characters only. Input Input is given from Standard Input in the following format: ``` N grid ``` The first line contains the integer N, the size of the grid. The next N lines each contain a string of length N representing the grid. Output Print an integer which is the size of the smallest possible sub-grid. Examples Input ``` 3 101 010 001 ``` Output 1 Input ``` 4 0000 1110 1100 1011 ``` Output 2","solution":"def smallest_subgrid_size(n, grid): Returns the size of the smallest possible sub-grid that contains at least one \'1\' in each of its rows. smallest_size = n for i in range(n): first_one = -1 last_one = -1 for j in range(n): if grid[i][j] == \'1\': if first_one == -1: first_one = j last_one = j if first_one != -1 and last_one != -1: size = last_one - first_one + 1 smallest_size = min(smallest_size, size) return smallest_size"},{"question":"Create a function that takes a list of integers and returns the first half of the list reversed, and the second half in original order. If the list has an odd number of elements, include the middle element in the reversed first half. Input Specification - Input a single list of integers, with at least one element and at most 100,000 elements. Output Specification - Output the transformed list as described above. Example Sample Input: [1, 2, 3, 4, 5] Sample Output: [3, 2, 1, 4, 5] Sample Input: [10, 20, 30, 40, 50, 60] Sample Output: [30, 20, 10, 40, 50, 60] Sample Input: [9] Sample Output: [9]","solution":"def transform_list(lst): Transforms the list by reversing the first half (including the middle element if the list has an odd number of elements) and keeping the second half in the original order. n = len(lst) mid = (n + 1) // 2 # middle point, includes the middle element for odd length first_half_reversed = lst[:mid][::-1] second_half = lst[mid:] return first_half_reversed + second_half"},{"question":"A cargo ship needs to deliver goods to islands along a coastline. The coastline is represented by a number line, and each island is located at a specific position on this line. The cargo ship starts at position 0 on the number line and can only move to the right. There are N islands, numbered 1 through N, each located at position X_i with a cargo demand D_i. The ship has a carrying capacity C and it must deliver the exact demand to each island in a single trip, otherwise it skips that island. To fully deliver an island\'s cargo demand, the ship must start with at least as much cargo as the demand of the island. Your task is to determine the minimum total distance the ship must travel to deliver goods to exactly K islands. Constraints - 1 ≤ N ≤ 200000 - 1 ≤ X_i, D_i ≤ 10^9 - 1 ≤ C ≤ 10^9 - All X_i are distinct. - 1 ≤ K ≤ N Input The input is given from Standard Input in the following format: ``` N K C X_1 D_1 X_2 D_2 : X_N D_N ``` Output Print the minimum total distance the ship must travel to deliver goods to exactly K islands. If it is not possible to deliver goods to exactly K islands, return -1. Examples Input ``` 4 2 10 5 6 10 3 15 7 20 2 ``` Output 15 Input ``` 3 1 5 4 4 8 3 12 6 ``` Output 4","solution":"def minimum_distance_to_deliver(N, K, C, islands): Returns the minimum total distance the ship must travel to deliver goods to exactly K islands. Parameters: N (int): Number of islands. K (int): Number of islands to deliver to. C (int): Carrying capacity of the ship. islands (list of tuples): Each tuple contains two integers, X_i and D_i, representing the position and the cargo demand of an island. Returns: int: Minimum total distance to deliver to exactly K islands, or -1 if not possible. # Filter only the islands that have demand D_i <= C filtered_islands = [(x, d) for x, d in islands if d <= C] # If there are not enough islands that can be fully satisfied, return -1 if len(filtered_islands) < K: return -1 # Sort the filtered islands by their position X_i filtered_islands.sort() # Calculate the total distance to the K nearest islands that can be fully satisfied min_distance = sum(filtered_islands[i][0] for i in range(K)) return min_distance # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) K = int(data[1]) C = int(data[2]) islands = [] index = 3 for _ in range(N): X_i = int(data[index]) D_i = int(data[index + 1]) islands.append((X_i, D_i)) index += 2 print(minimum_distance_to_deliver(N, K, C, islands))"},{"question":"Lesha recently purchased an old farm which comes with several pieces of ancient, irregularly-shaped land. He wants to divide each piece of land into equal rectangular segments to cultivate different crops. He needs your help to determine the maximum size of a square plot that can be uniformly used to divide the given piece of land. Each piece of land is described using its dimensions: width and height, both measured in meters. Each rectangle can be divided only if both its width and height can be constructed from the side length of the desired square plot without leaving any remainder. # Input - The first line contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. - Each of the next `t` lines describes one test case with two integers `w` and `h` (1 ≤ w, h ≤ 10^5) — the width and height of the piece of land. # Output For each test case, print a single integer — the maximum side length of the squares that can be used to divide the given piece of land without any remainder. # Example **Input:** ``` 3 12 15 25 30 8 4 ``` **Output:** ``` 3 5 4 ``` # Explanation - In the first test case, the largest square plot that can fit into 12x15 meters is 3x3 meters. - In the second test case, the largest square plot that can be used is 5x5 meters. - In the final test case, the largest square plot fitting into 8x4 meters is 4x4 meters. # Note - To solve the problem, you need to find the greatest common divisor (GCD) of `w` and `h` for each piece of land. The side length of the largest square that can be used to divide the land is exactly this GCD.","solution":"import math def max_square_side(t, dimensions): result = [] for w, h in dimensions: result.append(math.gcd(w, h)) return result"},{"question":"Write a function in your preferred programming language to determine if a given string is a valid palindrome after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters. Constraints: - The length of the string is at most 1000. - The string can contain printable ASCII characters. Input: - A single string on each line. Output: - Print \\"True\\" if the string is a valid palindrome, otherwise print \\"False\\". Examples: Input: \\"A man, a plan, a canal: Panama\\" Output: True Input: \\"race a car\\" Output: False Input: \\" \\" Output: True","solution":"def is_valid_palindrome(s: str) -> bool: Determine if a given string is a valid palindrome after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters. :param s: String to be checked for being a valid palindrome :return: True if the string is a valid palindrome, False otherwise # Normalize the string by converting to lower case and filtering out non-alphanumeric characters normalized = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string is a palindrome return normalized == normalized[::-1]"},{"question":"Write a function to reverse the order of words in a given string s. A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space. The input string s may contain leading, trailing, or multiple spaces between words. Your function should reverse the words in a way that they are separated by a single space in the reversed string, and no leading or trailing spaces should remain. Constraints: - The length of the string will not exceed 10^5. - The string consists of printable ASCII characters. Your function should return the reversed string. Function Signature: ```python def reverse_words(s: str) -> str: pass ``` Examples: Input: ```python s = \\"the sky is blue\\" ``` Output: ```python \\"blue is sky the\\" ``` Input: ```python s = \\" hello world \\" ``` Output: ```python \\"world hello\\" ``` Input: ```python s = \\"a good example\\" ``` Output: ```python \\"example good a\\" ``` Explanation: - In the first example, reversing the words in \\"the sky is blue\\" gives \\"blue is sky the\\". - In the second example, leading and trailing spaces while reversing \\" hello world \\" results in \\"world hello\\". - In the third example, extra spaces between words are reduced to a single space in the reversed string \\"example good a\\".","solution":"def reverse_words(s: str) -> str: Reverses the order of words in a given string s. # Split the string into words based on spaces, which also trims multiple spaces words = s.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words into a single string with a single space separator return \' \'.join(reversed_words)"},{"question":"Alice is preparing for a coding competition and she is practicing with a chessboard problem. She has an n x n chessboard and is required to check for all possible positions on the chessboard where a knight can be placed such that no other knight can attack it. A knight moves in an L-shape: two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. Your task is to help Alice write a program to determine all such positions on an n x n chessboard where placing a knight would ensure that no other knight can attack it given the placement restrictions. Input The first line contains a single integer n (3 ≤ n ≤ 100) — the size of the chessboard. Output Print a grid of size n x n with `1` representing a position where a knight can be placed such that no other knight can attack it, and `0` representing an invalid position for placing a knight. Example Input 4 Output 1 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 Input 3 Output 1 0 1 0 0 0 1 0 1 Note In the first example with a 4x4 chessboard, knights can be placed at (1,1), (1,3), (3,1), and (3,3) ensuring that no other knight can attack any of the placed knights. In the second example with a 3x3 chessboard, knights can be placed at (1,1), (1,3), and (3,1), and (3,3) maintaining the same constraints. In both examples, the printed grid showcases `1` at valid positions while others are marked with `0`.","solution":"def find_knight_positions(n): Returns an n x n chessboard grid with valid knight positions marked as 1 and invalid positions as 0. board = [[0 for _ in range(n)] for _ in range(n)] for i in range(0, n, 2): for j in range(0, n, 2): # Mark position (i, j) as valid board[i][j] = 1 return board"},{"question":"Alice loves solving puzzles. She recently came across a series of puzzles that involves manipulating sequences of integers. Each puzzle requires her to transform an initial sequence into a desired final sequence using a specific set of operations. She needs your help to determine the minimum number of operations required to achieve this transformation. The available operations are: 1. Increment any element of the sequence by 1. 2. Decrement any element of the sequence by 1. 3. Multiply any element of the sequence by 2. 4. Divide any element of the sequence by 2 (only if the element is even). Given an initial sequence and a final sequence of equal length, your task is to find the minimum number of operations required to transform the initial sequence into the final sequence. Input The first line contains a single integer n (1 ≤ n ≤ 1000), the length of the sequences. The second line contains n space-separated integers representing the initial sequence. The third line contains n space-separated integers representing the final sequence. Output Print a single integer, the minimum number of operations required to transform the initial sequence into the final sequence. Examples Input 3 1 2 3 2 4 6 Output 3 Input 4 4 5 6 7 4 5 6 8 Output 1 Note In the first example, the sequence [1, 2, 3] can be transformed into [2, 4, 6] in the following steps: - Increment the first element by 1: [2, 2, 3] - Multiply the second element by 2: [2, 4, 3] - Multiply the third element by 2: [2, 4, 6] Thus, the total number of operations is 3. In the second example, the sequence is almost identical, except for the last element. Incrementing the last element by 1 completes the transformation, resulting in only 1 operation.","solution":"from collections import deque def min_operations(initial_sequence, final_sequence): Calculate the minimum number of operations to transform initial_sequence into final_sequence. def find_min_operations(x, y): Use a BFS strategy to find the minimum operations needed to transform x into y. if x == y: return 0 queue = deque([(x, 0)]) visited = set([x]) while queue: current, steps = queue.popleft() # Generate the possible operations for operation_result in (current + 1, current - 1, current * 2): if operation_result == y: return steps + 1 if operation_result not in visited and 0 <= operation_result <= 2 * max(x, y): visited.add(operation_result) queue.append((operation_result, steps + 1)) if current % 2 == 0: operation_result = current // 2 if operation_result == y: return steps + 1 if operation_result not in visited: visited.add(operation_result) queue.append((operation_result, steps + 1)) # It cannot reach here in theory due to the constraints return -1 n = len(initial_sequence) total_operations = 0 for i in range(n): total_operations += find_min_operations(initial_sequence[i], final_sequence[i]) return total_operations"}]'),S={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},Y={class:"card-container"},F={key:0,class:"empty-state"},P=["disabled"],R={key:0},D={key:1};function C(s,e,u,p,r,a){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):h("",!0)]),t("div",Y,[(n(!0),i(_,null,w(a.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+l(r.searchQuery)+'". ',1)):h("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",D,"Loading...")):(n(),i("span",R,"See more"))],8,P)):h("",!0)])}const z=d(S,[["render",C],["__scopeId","data-v-0e169e7f"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/49.md","filePath":"deepseek/49.md"}'),M={name:"deepseek/49.md"},G=Object.assign(M,{setup(s){return(e,u)=>(n(),i("div",null,[x(z)]))}});export{B as __pageData,G as default};
