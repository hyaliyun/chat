import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,p,r,a){return n(),i("div",k,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(q,[["render",O],["__scopeId","data-v-1e632bf1"]]),S=JSON.parse('[{"question":"You\'ve decided to start a garden and want to keep track of the number of different plants you have to water. Write a function `plant_count(plants_string)` that counts the number of each type of plant and returns a dictionary with plant names as keys and frequencies as values. The string `plants_string` will contain the names of plants separated by spaces. Each plant name will only consist of lowercase alphabetical characters. Examples: ```python plant_count(\\"rose tulip rose daisy rose\\") == {\'rose\': 3, \'tulip\': 1, \'daisy\': 1} plant_count(\\"orchid orchid rose tulip\\") == {\'orchid\': 2, \'rose\': 1, \'tulip\': 1} plant_count(\\"daisy daisy daisy daisy\\") == {\'daisy\': 4} plant_count(\\"lily sunflower orchid orchid\\") == {\'lily\': 1, \'sunflower\': 1, \'orchid\': 2} ``` Note: - The input string `plants_string` will always have at least one plant name. - The order of keys in the output dictionary does not matter.","solution":"def plant_count(plants_string): Returns a dictionary with plant names as keys and frequencies as values. plants_list = plants_string.split() plant_freq = {} for plant in plants_list: if plant in plant_freq: plant_freq[plant] += 1 else: plant_freq[plant] = 1 return plant_freq"},{"question":"In a forest, there is a unique species of birds where each bird can be identified by a unique ID. Each bird can have several characteristics, which are represented by positive integers. Given a list of bird IDs and their corresponding lists of characteristics, your task is to find the bird with the highest total value of characteristics. ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - Each test case starts with an integer N, the number of birds. - The next N lines each contain a bird ID (a string) followed by a space-separated list of integers representing the characteristics of that bird. ------ Output Format ------ For each test case, output the bird ID with the highest sum of characteristics. If multiple birds have the highest total value, output the bird ID that appears first in the input. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ text{number of characteristics per bird} ≤ 100 1 ≤ text{characteristic value} ≤ 1000 ------ Sample Input 1 ------ 2 3 bird1 5 3 8 bird2 7 4 bird3 6 6 1 2 birdA 10 20 birdB 15 5 5 ------ Sample Output 1 ------ bird1 birdA ----- Explanation 1 ------ Test case 1: - bird1 has characteristics 5, 3, 8 with a sum of 16. - bird2 has characteristics 7, 4 with a sum of 11. - bird3 has characteristics 6, 6, 1 with a sum of 13. Therefore, bird1 has the highest sum of characteristics. Test case 2: - birdA has characteristics 10, 20 with a sum of 30. - birdB has characteristics 15, 5, 5 with a sum of 25. Therefore, birdA has the highest sum of characteristics.","solution":"def bird_with_highest_characteristics(T, test_cases): results = [] for i in range(T): N, birds_data = test_cases[i] max_sum = -1 bird_with_max_sum = \\"\\" for bird_data in birds_data: parts = bird_data.split() bird_id = parts[0] characteristics = map(int, parts[1:]) total_value = sum(characteristics) if total_value > max_sum: max_sum = total_value bird_with_max_sum = bird_id results.append(bird_with_max_sum) return results"},{"question":"George loves playing with numbers and recently encountered an interesting challenge involving prime numbers. The problem is defined as follows: **Function Description** You need to implement the function `count_prime_factors(n)`. This function takes a single integer `n` as an input and returns the number of distinct prime factors of `n`. **Constraint** - 1 leq n leq 10^{12} **Explanation** A prime factor of a number `n` is a prime number that divides `n` without leaving a remainder. Each prime number should be counted only once, regardless of its multiplicity in the factorization of `n`. **Input Format** Multiple test cases are provided. The first line of input contains an integer T, indicating the number of test cases. Each of the next T lines contains a single integer n. **Output Format** The function should output T lines, each containing the number of distinct prime factors of the corresponding integer `n`. **Example Input** 3 28 30 50 **Example Output** 2 3 2 **Explanation** For the first test case, the number 28 has the distinct prime factors 2 and 7. For the second test case, the number 30 has the distinct prime factors 2, 3, and 5. For the third test case, the number 50 has the distinct prime factors 2 and 5. **Hint** Efficiently finding and counting prime factors of very large numbers (up to 10^{12}) requires an optimized approach, possibly involving pre-computation, prime sieving techniques, or number theory insights.","solution":"import math def count_prime_factors(n): Returns the number of distinct prime factors of n. if n <= 1: return 0 distinct_prime_factors = 0 # Check the number of 2s that divide n if n % 2 == 0: distinct_prime_factors += 1 while n % 2 == 0: n //= 2 # Check for odd factors from 3 onwards for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: distinct_prime_factors += 1 while n % i == 0: n //= i # If n is still a prime number greater than 2 if n > 2: distinct_prime_factors += 1 return distinct_prime_factors"},{"question":"Implement a function `bitwise_and_range(start, end)` that takes two integers `start` and `end` such that 0 <= start <= end, and returns the bitwise AND of all numbers from `start` to `end` inclusive. For example: - `bitwise_and_range(5, 7)` should return `4` (binary: `101 & 110 & 111 = 100`). - `bitwise_and_range(0, 1)` should return `0`. The function should handle large ranges efficiently. Constraints - 0 <= start <= end <= 2^31 - 1 Examples ```python assert bitwise_and_range(5, 7) == 4 assert bitwise_and_range(0, 1) == 0 assert bitwise_and_range(10, 15) == 8 ```","solution":"def bitwise_and_range(start, end): Returns the bitwise AND of all numbers in the range [start, end]. shift = 0 while start < end: start >>= 1 end >>= 1 shift += 1 return start << shift"},{"question":"You are given an array of integers `arr` of length `n`. Your task is to find the number of triplets (i, j, k) such that 0 <= i < j < k < n and arr[i] + arr[j] + arr[k] is divisible by a given integer m. Since the number of triplets can be large, return the answer modulo 10^9 + 7 (1000000007). ------ Input ------ First line of the input contains two integers n and m denoting the length of array and the divisor, respectively. Second line contains n space-separated integers denoting elements of the array `arr`. ------ Output ------ Output a single integer denoting the number of such triplets. ------ ------ Constraints ----- 1 ≤ n ≤ 1000 1 ≤ m ≤ 100 1 ≤ arr[i] ≤ 10^9 ------ Sample Input 1 ------ 5 3 1 2 3 4 5 ----- Sample Output 1 ------ 4 ----- explanation 1 ------ Example case 1. There are 4 triplets whose sum is divisible by 3: 1. (1, 2, 3) : 1 + 2 + 3 = 6, which is divisible by 3 2. (1, 2, 6) : 1 + 2 + 6 = 9, which is divisible by 3 3. (1, 4, 2) : 1 + 4 + 2 = 9, which is divisible by 3 4. (3, 1, 2) : 3 + 1 + 2 = 6, which is divisible by 3","solution":"def count_divisible_triplets(arr, n, m): MOD = 1000000007 count = 0 for i in range(n-2): for j in range(i+1, n-1): for k in range(j+1, n): if (arr[i] + arr[j] + arr[k]) % m == 0: count = (count + 1) % MOD return count # Example usage n = 5 m = 3 arr = [1, 2, 3, 4, 5] print(count_divisible_triplets(arr, n, m)) # Output: 4"},{"question":"In a village, there is a celebration where each family decorates their house with an array of colored lights. Each light has a certain intensity given as an integer value. The chief of the village wants to know the maximum difference in intensity between any two lights in each family\'s decoration. Input The first line of input contains an integer T, i.e., the number of test cases. Each test case consists of two lines. The first line contains an integer N, the number of lights. The second line contains N integers separated by spaces representing the intensity of each light. Output For each test case, output the maximum difference in light intensity for the corresponding family. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 0 ≤ intensity ≤ 10000 Example Input: 2 5 4 10 2 8 6 3 1 3 5 Output: 8 4 Explanation In the first test case, the intensities are [4, 10, 2, 8, 6]. The maximum difference is 10 - 2 = 8. In the second test case, the intensities are [1, 3, 5]. The maximum difference is 5 - 1 = 4.","solution":"def max_intensity_difference(t, test_cases): Calculate the maximum difference in intensity between any two lights in each test case. Parameters: t (int): The number of test cases. test_cases (list of tuples): Each tuple contains (N (int), intensities (list of int)). Returns: list of int: Maximum difference in light intensity for each test case. results = [] for n, intensities in test_cases: # Find the maximum and minimum intensity in the list max_intensity = max(intensities) min_intensity = min(intensities) # Calculate the difference max_diff = max_intensity - min_intensity # Append the result results.append(max_diff) return results"},{"question":"Given a string that contains only digits (0-9), write a function to determine if the string can be partitioned into one or more substrings such that each substring represents a prime number. A prime number cannot have leading zeros, except for the number 0 itself, which is not considered a prime. Example 1: Input: \\"11373\\" Output: True Explanation: The string can be partitioned as \\"11\\", \\"3\\", \\"7\\", \\"3\\" which are all prime numbers. Example 2: Input: \\"1234\\" Output: False Explanation: The string cannot be partitioned in a way that all parts are prime numbers. Note: The length of the string won\'t exceed 100 characters.","solution":"def is_prime(n): if n < 2: return False for i in range(2, int(n**0.5)+1): if n % i == 0: return False return True def can_partition_to_primes(s): memo = {} def can_partition(start): if start == len(s): return True if start in memo: return memo[start] for end in range(start + 1, len(s) + 1): substring = s[start:end] if substring[0] == \'0\': # prevent leading 0s break if is_prime(int(substring)) and can_partition(end): memo[start] = True return True memo[start] = False return False return can_partition(0)"},{"question":"Implement the function `is_valid_parentheses`/`isValidParentheses` that determines if a given string containing just the characters `(`, `)`, `{`, `}`, `[` and `]` is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. You may assume the input string is non-empty and contains only the specified characters. Examples ~~~if-not:nasm ```python is_valid_parentheses(\\"()\\") ==> True is_valid_parentheses(\\"()[]{}\\") ==> True is_valid_parentheses(\\"(]\\") ==> False is_valid_parentheses(\\"([)]\\") ==> False is_valid_parentheses(\\"{[]}\\") ==> True ``` ~~~ ~~~if:nasm ``` mov rdi, \\"{}\\" call is_valid_parentheses ; returns true (non-zero) mov rdi, \\"([])\\" call is_valid_parentheses ; returns true mov rdi, \\"([)]\\" call is_valid_parentheses ; returns false (zero) mov rdi, \\"{[()]}\\" call is_valid_parentheses ; returns true mov rdi, \\"{[(])}\\" call is_valid_parentheses ; returns false ``` ~~~","solution":"def is_valid_parentheses(s): Determine if the input string s containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is valid. :param s: Input string containing the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' :return: True if the string is valid, False otherwise stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Given a list of integers, your task is to complete the function findPairs() that returns the number of unique pairs (i, j) in the list such that the sum of the elements at these indices is equal to a given target K. The pair (i, j) and (j, i) are considered the same and should not be counted twice. Example 1: Input: arr = [1, 5, 7, -1, 5] K = 6 Output: 3 Explanation: The pairs are (1, 5), (7, -1), and (5, 1). Example 2: Input: arr = [1, 1, 1, 1] K = 2 Output: 6 Explanation: The pairs are (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), and (1, 1). Your Task: The task is to complete the function findPairs() which finds the number of unique pairs with sum equal to K and returns that count. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^5 -10^9 <= arr[i] <= 10^9 -10^9 <= K <= 10^9","solution":"def findPairs(arr, K): Returns the number of unique pairs (i, j) in the list such that the sum of the elements at these indices is equal to a given target K. The pair (i, j) and (j, i) are considered the same and should not be counted twice. :param arr: List of integers :param K: Target sum :return: Number of unique pairs with sum equal to K freq = {} count = 0 for num in arr: target = K - num if target in freq: count += freq[target] if num in freq: freq[num] += 1 else: freq[num] = 1 return count"},{"question":"Dana loves to collect gemstones. She has a collection of gemstones represented by different types of characters, each character representing a type of gemstone. Dana wants to know the number of gemstones that are present in every rock. A gemstone is a type of gemstone that appears at least once in every rock in the collection. Given a collection of rocks where each rock is represented by a string of characters, find the number of gemstones. ----Input---- The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of rocks Dana has in her collection. The next n lines each contain a string of characters where each character represents a type of gemstone. Each string will have at least one character and no more than 100 characters. ----Output---- Print the number of gemstone types that appear in every rock. ----Examples---- Input 3 abcdde baccd eeabg Output 2 Input 4 abc def ghi jkl Output 0 ----Note---- Consider the first sample. The gemstone types \'a\' and \'b\' appear in all three rocks. The other characters appear in some but not all rocks. Thus, the number of gemstone types that appear in every rock is 2.","solution":"def count_gemstones(n, rocks): Returns the number of gemstone types that appear in every rock. Args: n (int): Number of rocks. rocks (list of str): List of strings, each representing gemstones in a rock. Returns: int: Number of gemstone types present in every rock. # Initialize a set with the gems of the first rock common_gems = set(rocks[0]) # Intersect this set with the gems of each subsequent rock for rock in rocks[1:]: common_gems.intersection_update(set(rock)) # The length of the resulting set is the number of common gemstone types return len(common_gems)"},{"question":"Given an integer array nums sorted in non-decreasing order, return the sorted array of the squares of each number. Example 1: Input: nums = [-4, -1, 0, 3, 10] Output: [0, 1, 9, 16, 100] Explanation: After squaring each element, the array becomes [16, 1, 0, 9, 100], which is then sorted to [0, 1, 9, 16, 100]. Example 2: Input: nums = [-7, -3, 2, 3, 11] Output: [4, 9, 9, 49, 121] Explanation: After squaring each element, the array becomes [49, 9, 4, 9, 121], which is then sorted to [4, 9, 9, 49, 121]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sortedSquares() which takes the integer array nums as input parameter and returns the sorted array of squares of each number. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4","solution":"def sortedSquares(nums): Given an array of integers sorted in non-decreasing order, return the sorted array of the squares of each number. n = len(nums) result = [0] * n left, right = 0, n - 1 index = n - 1 while left <= right: leftSquare = nums[left] ** 2 rightSquare = nums[right] ** 2 if leftSquare > rightSquare: result[index] = leftSquare left += 1 else: result[index] = rightSquare right -= 1 index -= 1 return result"},{"question":"Problem You are tasked with designing a network distribution system for a company. The system consists of several nodes, each identified by a unique ID, and connections between these nodes that represent direct communication links. Your goal is to determine the minimum number of additional connections required to ensure that the entire network is connected, meaning that there is a path between any pair of nodes. The initial network configuration is provided as an adjacency list, where each node\'s direct connections are listed. Input The input is given in the following format: n a1 b1 a2 b2 ... ak bk Where: - n is the number of nodes (1 ≤ n ≤ 10^4). - Each of the k lines contains two integers ai and bi (1 ≤ ai, bi ≤ n), indicating a direct connection between nodes ai and bi. Output Output the minimum number of additional connections required to ensure the entire network is connected. Examples Input 4 1 2 2 3 Output 1 Input 6 1 2 2 3 4 5 Output 2 Input 3 1 2 2 3 3 1 Output 0","solution":"def min_additional_connections(n, connections): from collections import defaultdict def dfs(node, visited, graph): stack = [node] while stack: curr = stack.pop() for neighbor in graph[curr]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) # Initialize adjacency list graph = defaultdict(list) for a, b in connections: graph[a].append(b) graph[b].append(a) visited = set() components = 0 for node in range(1, n + 1): if node not in visited: visited.add(node) dfs(node, visited, graph) components += 1 # The number of additional connections required to connect the network return components - 1 # Example usage: min_additional_connections(4, [(1, 2), (2, 3)])"},{"question":"Given a circular doubly linked list of N nodes, where each node contains a value, and an integer K. Write a function to rotate the doubly linked list clockwise by K nodes. Example 1: Input: CircularDoublyLinkedList: 1<->2<->3<->4<->5, K = 2 Output: 4<->5<->1<->2<->3 Explanation: After rotating the list clockwise by 2 nodes, the list becomes 4, 5, 1, 2, 3. Example 2: Input: CircularDoublyLinkedList: 10<->20<->30<->40<->50, K = 3 Output: 30<->40<->50<->10<->20 Explanation: After rotating the list clockwise by 3 nodes, the list becomes 30, 40, 50, 10, 20. Your Task: You don\'t need to read input or print anything. Complete the function rotateListClockwise() which takes the head reference of the circular doubly linked list and an integer K as input parameters and returns the reference to the new head of the rotated list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^3 1 ≤ Node value ≤ 10^4 0 ≤ K < N","solution":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None def rotateListClockwise(head, k): Rotates the circular doubly linked list clockwise by k nodes. Args: head : Node The reference to the head of the circular doubly linked list. k : int Number of nodes to rotate by. Returns: Node The new head of the rotated list. if head is None or k == 0: return head # Get the length of the list length = 1 current = head while current.next != head: current = current.next length += 1 # Normalize k to be within the length of the list k = k % length if k == 0: return head # Find the new head after k rotations current = head for _ in range(length - k - 1): current = current.next new_head = current.next new_tail = current # Set the new circular connections new_tail.next = head head.prev = new_tail tail = head while tail.next != head: tail = tail.next tail.next = new_head new_head.prev = tail return new_head"},{"question":"Given a string of lowercase characters, your task is to complete the function `removeConsecutiveDuplicates()` which removes all the consecutive duplicates in the string and returns the modified string. Constraints: 1 <= T <= 100 1 <= |S| <= 1000 Example: Input: 2 aaabccddd aabbaa Output: abcd aba Explanation: Testcase 1: The string \\"aaabccddd\\" can be simplified by removing consecutive duplicates as follows: - Remove \'aaa\' -> \\"bccddd\\" - Remove \'cc\' -> \\"bddd\\" - Remove \'ddd\' -> \\"bd\\" Therefore, the new string is \\"abcd\\". Testcase 2: The string \\"aabbaa\\" can be simplified by removing consecutive duplicates as follows: - Remove \'aa\' -> \\"bbaa\\" - Remove \'bb\' -> \\"baa\\" - Remove \'aa\' -> \\"ba\\" Therefore, the new string is \\"aba\\". User Task: The task is to complete the function `removeConsecutiveDuplicates()` which should take a string as input and return the string after removing consecutive duplicates.","solution":"def removeConsecutiveDuplicates(s): Removes all consecutive duplicate characters from the input string. Args: s (str): Input string with lowercase characters. Returns: str: Modified string with consecutive duplicates removed. result = [] previous_character = \'\' for char in s: if char != previous_character: result.append(char) previous_character = char return \'\'.join(result)"},{"question":"Given a string consisting of letters and digits, you need to perform the following operations until the string becomes empty: 1. **If the string starts with a digit**, remove the leftmost digit and append it to the end without changing its order. 2. **If the string starts with a letter**, remove the leftmost letter and discard it. Return the final string after performing all the operations. -----Input----- The input contains a single line with the string s consisting of lowercase letters and digits (1 leq |s| leq 10^5). -----Output----- Print the final string after all operations have been applied. -----Examples----- Input a1b2c3 Output 123 Input ab12c34d Output 1234 -----Note----- In the first example, the string \'a1b2c3\' is transformed as follows: - Remove \'a\', string becomes \'1b2c3\' - Move \'1\' to the end, string becomes \'b2c31\' - Remove \'b\', string becomes \'2c31\' - Move \'2\' to the end, string becomes \'c312\' - Remove \'c\', string becomes \'312\' - Move \'3\' to the end, string becomes \'12\' - Move \'1\' to the end, string becomes \'2\' - Move \'2\' to the end, the string becomes empty except for the digits collected: \'123\'. In the second example, the string \'ab12c34d\' is transformed as follows: - Remove \'a\', string becomes \'b12c34d\' - Remove \'b\', string becomes \'12c34d\' - Move \'1\' to the end, string becomes \'2c34d1\' - Move \'2\' to the end, string becomes \'c34d12\' - Remove \'c\', string becomes \'34d12\' - Move \'3\' to the end, string becomes \'4d123\' - Move \'4\' to the end, string becomes \'d1234\' - Remove \'d\', the string becomes empty except for the digits collected: \'1234\'.","solution":"def process_string(s): Perform operations on the string until it becomes empty: 1. If the string starts with a digit, remove it and append it to the end. 2. If the string starts with a letter, remove it. Args: s (str): The input string consisting of letters and digits. Returns: str: The final string of digits after all operations. result = [] while s: if s[0].isdigit(): result.append(s[0]) s = s[1:] # Remove the leftmost character return \'\'.join(result)"},{"question":"You are working on a project to process images represented as a grid of pixels. An image is represented as an `N x M` grid of integers, where each integer represents the color code of a pixel. For simplicity, let’s assume that color codes are non-negative integers. A \\"block\\" is defined as a contiguous region of the same color. Contiguity is defined in terms of horizontal and vertical adjacency (not diagonal). Given an image, we want to find out the size of the largest block of contiguous pixels with the same color. Write a function that takes a two-dimensional list (representing the grid) as input and returns the size of the largest block of the same color. # Input - A list of lists of integers `grid` with dimensions `N x M` (1 ≤ N, M ≤ 1000). # Output - An integer representing the size of the largest block of contiguous pixels with the same color. # Example ```python def largest_block(grid): # Your code here # Example 1 grid = [ [1, 1, 0, 0, 2], [0, 1, 1, 2, 2], [0, 0, 0, 2, 2], [3, 3, 3, 3, 3] ] print(largest_block(grid)) # Output: 5 # Example 2 grid = [ [3, 3, 1], [3, 1, 1], [0, 0, 1] ] print(largest_block(grid)) # Output: 4 ``` # Note In the first example, the largest block has color code 3 and its size is 5. In the second example, the largest block has color code 1 and its size is 4.","solution":"def largest_block(grid): Returns the size of the largest block of contiguous pixels with the same color. # Boundary check for empty grid if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) visited = [[False] * m for _ in range(n)] def dfs(x, y, color): if x < 0 or y < 0 or x >= n or y >= m or visited[x][y] or grid[x][y] != color: return 0 visited[x][y] = True size = 1 size += dfs(x + 1, y, color) size += dfs(x - 1, y, color) size += dfs(x, y + 1, color) size += dfs(x, y - 1, color) return size largest = 0 for i in range(n): for j in range(m): if not visited[i][j]: largest = max(largest, dfs(i, j, grid[i][j])) return largest"},{"question":"Write a function `generateSubsets(numbers)` to generate all possible distinct subsets of the given list of integers `numbers`. The function should return the subsets as a list of lists, with each subset being sorted in non-decreasing order, and the list of subsets should also be sorted lexicographically. # Example ```python generateSubsets([1, 2, 3]) ``` should return ```python [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]] ``` # Notes - The input list `numbers` will not contain duplicate values. - The input list `numbers` can have a length between 1 and 10. - Please ensure the output subsets are sorted lexicographically: first by length, then by dictionary order within each length group.","solution":"from itertools import combinations def generateSubsets(numbers): Generates all possible distinct subsets of the given list of integers `numbers`. Args: numbers (list): List of integers. Returns: list of lists: A sorted list of subsets. subsets = [] # Generate all subsets of all possible lengths for i in range(len(numbers) + 1): subsets.extend(combinations(numbers, i)) # Convert each subset from tuple to list and sort the subsets and elements lexicographically subsets = [sorted(list(subset)) for subset in subsets] subsets.sort() return subsets"},{"question":"John loves to design weird shapes using straight lines on a 2D plane. One day he drew a convex quadrilateral and wondered what the maximum and minimum distances between pairs of points (vertices) of the quadrilateral were. Your task is to write a program that helps John calculate the maximum and minimum distance between any two vertices of the convex quadrilateral. The distance between two points (x_1, y_1) and (x_2, y_2) is given by the formula: [ sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2} ] -----Input----- The first four lines contain the coordinates of the vertices of the quadrilateral. All coordinates are pairs of integers, separated by a space, with values ranging between -1000 and 1000. -----Output----- Output the maximum distance on the first line, with exactly two digits after the decimal point. Output the minimum distance on the second line, with exactly two digits after the decimal point. -----Examples----- Sample Input 1: 0 0 0 2 2 2 2 0 Sample Output 1: 2.83 2.00 Sample Input 2: -1 -1 -1 1 1 1 1 -1 Sample Output 2: 2.83 2.00","solution":"import math def distance(x1, y1, x2, y2): Calculates the distance between two points (x1, y1) and (x2, y2) return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) def find_max_min_distances(vertices): Given the vertices of a convex quadrilateral, returns the maximum and minimum distances between any two vertices. max_dist = float(\'-inf\') min_dist = float(\'inf\') for i in range(len(vertices)): for j in range(i+1, len(vertices)): dist = distance(vertices[i][0], vertices[i][1], vertices[j][0], vertices[j][1]) max_dist = max(max_dist, dist) min_dist = min(min_dist, dist) return max_dist, min_dist # Sample Input vertices = [ (0, 0), (0, 2), (2, 2), (2, 0) ] # Find the max and min distances max_dist, min_dist = find_max_min_distances(vertices) # Print results print(f\\"{max_dist:.2f}\\") print(f\\"{min_dist:.2f}\\")"},{"question":"A new online bookstore needs to manage their book inventory effectively. They want to categorize the books based on their genre but each genre can only be assigned to a unique bookshelf, and each bookshelf can hold only one genre worth of books. Additionally, the bookstore wants to ensure that they can fit all books within the available bookshelves effectively without exceeding the limit. Help the bookstore determine if it\'s possible to arrange all the books on the shelves such that each genre is assigned to an exclusive bookshelf. Input The input starts with two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100), representing the number of genres and the number of bookshelves, respectively. The next n lines contain two integers each: gi and bi, where gi (1 ≤ gi ≤ 1000) represents the genre number (1-based index), and bi (1 ≤ bi ≤ 1000) represents the number of books in genre gi. Output If it is possible to arrange the books as described, print \\"YES\\" in a single line. Otherwise, print \\"NO\\". Examples Input 3 3 1 10 2 20 3 15 Output YES Input 2 1 1 10 2 20 Output NO Input 4 4 1 25 2 20 3 30 4 25 Output YES Note In the first example, there are 3 genres and 3 bookshelves, thus each genre can be assigned to a unique bookshelf. In the second example, there are only 1 bookshelf but 2 genres, so it\'s impossible to assign each genre their own bookshelf. In the third example, the number of genres matches the number of bookshelves, making it possible to assign each genre a unique bookshelf.","solution":"def can_organize_books(n, m, genres_books): Determines if it is possible to assign each genre to a unique bookshelf. :param n: int: The number of genres. :param m: int: The number of bookshelves. :param genres_books: List of tuples (genre, books) where each tuple contains two integers: the genre number and the number of books in that genre. :return: \'YES\' if it is possible to organize as described, otherwise \'NO\'. if n <= m: return \\"YES\\" else: return \\"NO\\""},{"question":"In a magical land, there exists a unique numerical operation performed by wizards. This operation involves taking a number and repeatedly multiplying its digits together until the result is a single digit. The number of times this operation is performed is called the \\"multiplicative persistence\\" of the number. Your task is to determine the multiplicative persistence of a given number. Input The input consists of a single integer n (0 ≤ n ≤ 10^1000000). The number n is guaranteed not to contain any leading zeroes, except for the case where n is zero. Output Print a single integer which is the multiplicative persistence of n. Examples Input 0 Output 0 Input 39 Output 3 Input 77 Output 4 Note In the first sample, the number is already a single digit (zero), so no operation is needed. In the second test case, the number 39 undergoes the following transformations: 39 → 27 → 14 → 4. After three transformations, the number becomes a single-digit. In the third test case, the number 77 undergoes the transformations: 77 → 49 → 36 → 18 → 8. After four transformations, the number becomes a single-digit.","solution":"def multiplicative_persistence(n): Returns the multiplicative persistence of the number n. if len(n) == 1: return 0 count = 0 while len(n) > 1: product = 1 for digit in n: product *= int(digit) n = str(product) count += 1 return count"},{"question":"You are playing a game with a robot on a 15x15 grid. The robot starts at a given position (x0, y0) and wants to reach a target position (xt, yt). The robot can move in four directions: up, down, left, and right, but it cannot step into any of the given obstacles. The obstacles are represented by a list of coordinates (xa, ya). Write a program that guides the robot from its starting position to the target position, avoiding the obstacles. The robot should follow the steps returned by your program: \\"U\\" for moving up, \\"D\\" for moving down, \\"L\\" for moving left, and \\"R\\" for moving right. # Input Format - The first line contains two integers x0 and y0 (0 ≤ x0, y0 < 15) — the starting coordinates of the robot. - The second line contains two integers xt and yt (0 ≤ xt, yt < 15) — the target coordinates. - The third line contains an integer n (0 ≤ n ≤ 50) — the number of obstacles. - The next n lines each contain two integers xa and ya (0 ≤ xa, ya < 15) — the coordinates of the obstacles. # Output Format - Print a string consisting of characters \\"U\\", \\"D\\", \\"L\\", \\"R\\" representing the moves the robot should take to reach the target. If it’s impossible to reach the target, print \\"NO PATH\\". # Example Input ``` 0 0 14 14 3 1 0 1 1 1 2 ``` Output ``` RRRRRRRRRRRRLUUUUUUUUUUUUU ``` # Notes - It is guaranteed that the starting position and the target position will never be inside an obstacle. - If there are multiple possible paths, any valid path will be accepted. The output path should be as short as possible and avoid obstacles at all costs. If no valid path exists, your program should output \\"NO PATH\\". # Constraints - 0 ≤ x0, y0, xt, yt < 15 - 0 ≤ n ≤ 50 - If there are multiple valid solutions, any of them will be accepted.","solution":"from collections import deque def find_path(start, target, obstacles): directions = { \\"U\\": (-1, 0), \\"D\\": (1, 0), \\"L\\": (0, -1), \\"R\\": (0, 1) } def is_valid(x, y): return 0 <= x < 15 and 0 <= y < 15 and (x, y) not in obstacles queue = deque([(start[0], start[1], \\"\\")]) visited = set() visited.add((start[0], start[1])) while queue: x, y, path = queue.popleft() if (x, y) == (target[0], target[1]): return path for dir in directions: new_x, new_y = x + directions[dir][0], y + directions[dir][1] if is_valid(new_x, new_y) and (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append((new_x, new_y, path + dir)) return \\"NO PATH\\""},{"question":"In a certain country, the citizens follow a peculiar fashion trend. There are `n` different types of hats and each citizen owns exactly one hat. Every citizen likes to wear a new hat every day, except on the first day, when they like to wear their favorite hat. Once a citizen has worn a hat on some day, they will never wear that specific hat again. Therefore, the number of hats a citizen can wear is limited to `n - 1` hats after the first day. The government is curious to know the maximum number of distinct hat-wearing sequences that the citizens can follow over `k` days. Two sequences are considered distinct if there exists at least one day in which the type of hat worn differs between the two sequences. Complete the function `hat_wearing_sequences(n, k)` that takes two integers `n` and `k` (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100) and returns the maximum number of distinct sequences, modulo (10^9 + 7). -----Function Signature----- ```python def hat_wearing_sequences(n: int, k: int) -> int: pass ``` -----Input----- - An integer `n` - the number of different types of hats. - An integer `k` - the number of days. -----Output----- - Return an integer, representing the maximum number of distinct hat-wearing sequences over `k` days, modulo (10^9 + 7). -----Examples----- Input ```python hat_wearing_sequences(3, 2) ``` Output ```python 6 ``` Input ```python hat_wearing_sequences(4, 3) ``` Output ```python 24 ``` -----Explanation----- In the first example, there are 3 types of hats and 2 days. Each citizen starts with their favorite hat (3 options) and can choose from the remaining 2 hats in any order on the second day (2 options). Thus, the total maximum number of distinct sequences is 3 * 2 = 6.","solution":"def hat_wearing_sequences(n: int, k: int) -> int: MOD = 10**9 + 7 # If k == 1, only one sequence possible (wear the favorite hat) if k == 1: return n # Dynamic programming table to store results for different days and hats dp = [[0] * (k + 1) for _ in range(n + 1)] # Base case: For k == 1, any hat can be worn for i in range(1, n + 1): dp[i][1] = n # Fill the dp table for i in range(1, n + 1): for j in range(2, k + 1): dp[i][j] = (dp[i][j - 1] * (n - (j - 1))) % MOD return dp[n][k]"},{"question":"Palindrome Substrings problem Given a string S, find the number of substrings of S that are palindromes. A palindrome is a string that reads the same backward as forward. Input format The first line contains an integer Q, the number of queries. The next Q lines each contain a string S. Constraints - 1 ≤ Q ≤ 100 - 1 ≤ |S| ≤ 1000 Output format For each query, output the number of palindromic substrings of the string S on a new line. Input example 1 2 abba abc Output example 1 6 3 Explanation: - In the first query, the palindromic substrings are: \'a\', \'b\', \'b\', \'a\', \'bb\', \'abba\'. - In the second query, the palindromic substrings are: \'a\', \'b\', \'c\'.","solution":"def count_palindromic_substrings(S): Returns the number of palindromic substrings in the given string S. n = len(S) count = 0 # Initialize a 2D array to store if substrings are palindrome dp = [[False] * n for _ in range(n)] for i in range(n): dp[i][i] = True count += 1 for i in range(n-1): if S[i] == S[i+1]: dp[i][i+1] = True count += 1 for length in range(3, n+1): for i in range(n-length+1): j = i + length - 1 if S[i] == S[j] and dp[i+1][j-1]: dp[i][j] = True count += 1 return count def process_queries(queries): For each query, count the number of palindromic substrings and return a list of results. results = [] for query in queries: results.append(count_palindromic_substrings(query)) return results"},{"question":"Once when Ananya was learning to arrange cards in a specific order, her teacher gave her an interesting task. She received n cards, each with a unique integer written on it. The cards are initially arranged in a single line in ascending order of the integers. Ananya\'s goal is to rearrange the cards in such a way that the resulting sequence forms a particular pattern. Specifically, the pattern requires that the absolute difference between any two consecutive cards in the new sequence must be as small as possible. Write a program to help Ananya rearrange the cards accordingly. Input The first input line contains an integer n (1 ≤ n ≤ 105), representing the number of cards. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 109) in ascending order, representing the values on the cards. Output Print a single line containing the new sequence of card values arranged in such a way that the difference between any two consecutive cards is minimized. SAMPLE INPUT 5 1 3 6 10 15 SAMPLE OUTPUT 1 3 6 10 15","solution":"def rearrange_cards(n, cards): Rearranges the cards such that the absolute difference between any two consecutive cards is minimized. Parameters: n (int): Number of cards cards (list): List of integers representing the values on the cards in ascending order Returns: list: The reordered card values return cards"},{"question":"A HackerLand is a country with N cities and M bidirectional roads connecting them. The king wants to promote tourism by building K high-speed trains. Each high-speed train can drastically reduce travel time on one particular road in HackerLand. The objective is to determine the maximum number of isolated groups of cities possible if you can optimally choose up to K roads to upgrade to high-speed trains. Two cities belong to the same isolated group if there is no path connecting them, considering upgraded roads are the only available paths for travel. Input: The first line contains two integers N and M, the number of cities and roads respectively. Each of the next M lines contains two integers u and v, denoting the cities directly connected by a road. The last line contains an integer K, the number of roads that can be upgraded. Output: Return the maximum number of isolated groups of cities possible. Constraints: 1 ≤ N ≤ 1000 1 ≤ M ≤ 2000 0 ≤ K ≤ M Sample Input: 5 4 1 2 2 3 3 4 4 5 2 Sample Output: 3 Explanation: Initially, all cities are connected: 1-2-3-4-5. Choosing to upgrade the roads (1-2) and (3-4) splits the cities into 3 isolated groups: {1}, {2, 3, 4}, {5}.","solution":"def max_isolated_groups(n, m, roads, k): Returns the maximum number of isolated groups of cities possible if you can opt up to K roads to upgrade. Parameters: n (int): Number of cities m (int): Number of roads roads (list of tuples): Each tuple contains two integers u, v denoting the cities directly connected by a road k (int): Number of roads that can be upgraded Returns: int: Maximum number of isolated groups of cities def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 parent = [i for i in range(n)] rank = [0] * n for u, v in roads: union(parent, rank, u - 1, v - 1) # Adjusting cities index from 1-based to 0-based connections = [(parent[i], i + 1) for i in range(n)] # Find initial groups initial_groups = len(set(find(parent, i) for i in range(n))) return min(initial_groups + k, n) # Max groups shouldn\'t exceed the total number of cities"},{"question":"Shreya and Nikhil are planning a hiking trip. As part of their preparation, they need to pack a variety of energy bars. Shreya likes certain flavors more than others and has a specific pattern of picking the bars. Given an array of integers representing energy bars, Shreya always wants her favored bar to be picked from a deterministically calculated position. If she wants the bar from index `K % N` (where `K` is a given number and `N` is the length of the array), help Shreya identify which bar she will pick. INPUT The first line will contain an integer T which represents the number of test cases. For each test case, the first line will contain two integers, N (the number of energy bars) and K (the position pattern). The following line will contain N integers that represent the flavors of the energy bars. OUTPUT T lines, each containing an integer: the flavor of the energy bar that Shreya picks. Constraints 1≤T≤10 1≤N≤1000 0≤K≤109 -1000≤flavor values≤1000 SAMPLE INPUT 3 5 3 5 7 8 1 3 6 20 3 11 15 8 10 12 4 5 2 4 6 8 SAMPLE OUTPUT 1 15 4 Explanation SAMPLE CASE 1: N = 5, K = 3. Therefore, Shreya will pick the 3 % 5 = 3rd index bar in the list. The flavor bar at index 3 is 1. SAMPLE CASE 2: N = 6, K = 20. Therefore, Shreya will pick the 20 % 6 = 2nd index bar in the list. The flavor bar at index 2 is 15. SAMPLE CASE 3: N = 4, K = 5. Therefore, Shreya will pick the 5 % 4 = 1st index bar in the list. The flavor bar at index 1 is 4.","solution":"def shreya_picks_energy_bar(test_cases): result = [] for case in test_cases: N, K, flavors = case[\'N\'], case[\'K\'], case[\'flavors\'] index = K % N result.append(flavors[index]) return result def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, K = map(int, lines[index].split()) flavors = list(map(int, lines[index + 1].split())) test_cases.append({\'N\': N, \'K\': K, \'flavors\': flavors}) index += 2 return test_cases def main(input_string): test_cases = parse_input(input_string) return shreya_picks_energy_bar(test_cases)"},{"question":"You are given a list of integers representing the prices of a stock on each consecutive day. You are allowed to complete at most one transaction (i.e., buy one and sell one share of the stock). Write a function that finds the maximum profit that can be achieved by buying and then selling the stock on different days. If it\'s impossible to achieve any profit, the function should return 0. ```python def max_profit(prices): # your code here # Example Usage print(max_profit([7,1,5,3,6,4])) # Output: 5 print(max_profit([7,6,4,3,1])) # Output: 0 print(max_profit([1,2,3,4,5])) # Output: 4 print(max_profit([5,4,3,2,1])) # Output: 0 print(max_profit([3,3,5,0,0,3,1,4])) # Output: 4 ``` ``` haskell maxProfit :: [Int] -> Int -- your code here -- Example Usage -- maxProfit [7,1,5,3,6,4] == 5 -- maxProfit [7,6,4,3,1] == 0 -- maxProfit [1,2,3,4,5] == 4 -- maxProfit [5,4,3,2,1] == 0 -- maxProfit [3,3,5,0,0,3,1,4] == 4 ```","solution":"def max_profit(prices): Finds the maximum profit that can be achieved by buying and then selling the stock on different days from the given list of prices. :param prices: List of integers representing stock prices. :return: Maximum profit as an integer. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"You are given an array of integers `nums`. You can perform operations on the array where in one operation, you can remove any one element from the array and add it to a separate list called `removed`. The operation is valid as long as the element being removed is the minimum element of the current array. Your task is to return the `removed` list after performing all possible valid operations. Example: Input: nums = [5, 2, 4, 1, 3] Output: [1, 2, 3, 4, 5] Explanation: Start with nums = [5, 2, 4, 1, 3] Step 1: Remove 1 -> nums = [5, 2, 4, 3], removed = [1] Step 2: Remove 2 -> nums = [5, 4, 3], removed = [1, 2] Step 3: Remove 3 -> nums = [5, 4], removed = [1, 2, 3] Step 4: Remove 4 -> nums = [5], removed = [1, 2, 3, 4] Step 5: Remove 5 -> nums = [], removed = [1, 2, 3, 4, 5] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `removeElements` which takes an array `nums` as input and returns the `removed` list. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 <= nums.length <= 10^3 1 <= nums[i] <= 10^6","solution":"def removeElements(nums): Returns the list of removed elements in the order they would be removed. removed = [] while nums: min_element = min(nums) nums.remove(min_element) removed.append(min_element) return removed"},{"question":"In a small town, there is an unusual system of roads. The town consists of N locations connected by bi-directional roads. Each road has a different length. The town\'s mayor wants a new road network system to be designed in such a way that there is a path between any two locations and the total length of the roads used in this new network is minimized. Write a program to determine the total minimum road length required to connect all locations in the town. ------ Input ------ The first line contains an integer N - the number of locations in the town. The second line contains an integer M - the number of bi-directional roads in the town. Each of the next M lines contains three space-separated integers u, v, and w, where u is the starting location, v is the ending location, and w is the length of the road between locations u and v. ------ Output ------ Output a single integer - the minimum total length of the roads required to connect all locations. ------ Constraints ------ 1 ≤ N ≤ 1000 0 ≤ M ≤ 100000 1 ≤ w ≤ 10000 1 ≤ u, v ≤ N ------ Sample Input 1 ------ 4 5 1 2 1 2 3 4 3 4 3 4 1 2 1 3 6 ------ Sample Output 1 ------ 7 ------ Explanation 1 ------ To connect all the locations with the minimum total road length, the roads used will be: 1 -> 2 (length 1) 4 -> 1 (length 2) 3 -> 4 (length 3) The total minimum road length required to connect all locations is 1 + 2 + 3 = 6","solution":"def minimum_road_length(N, M, roads): # Using Kruskal\'s Algorithm to find Minimum Spanning Tree (MST) parent = list(range(N + 1)) rank = [0] * (N + 1) def find(u): if parent[u] != u: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 roads.sort(key=lambda x: x[2]) total_length = 0 mst_edges = 0 for u, v, w in roads: if find(u) != find(v): union(u, v) total_length += w mst_edges += 1 if mst_edges == N - 1: break return total_length"},{"question":"Given a string S consisting of only digits, check if it is possible to rearrange the digits of the string to form a palindrome. If it is possible, print 1, otherwise print 0. Note: A palindrome is a string that reads the same backward as forward. Example 1: Input: S = \\"121\\" Output: 1 Explaination: We can rearrange \\"121\\" as \\"121\\" or \\"212\\", both of which are palindromes. Example 2: Input: S = \\"123\\" Output: 0 Explaination: It is not possible to rearrange \\"123\\" to form a palindrome. Your Task: You do not need to read input or print anything. Your task is to complete the function isPalindromePossible() which takes the string S as input and returns 1 if it is possible to rearrange the digits to form a palindrome, otherwise returns 0. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^{5}","solution":"def isPalindromePossible(S): Checks if it is possible to rearrange the digits of the string S to form a palindrome. from collections import Counter count = Counter(S) odd_count = 0 for digit in count: if count[digit] % 2 != 0: odd_count += 1 if odd_count > 1: return 0 return 1"},{"question":"Task You are tasked with developing a feature for a custom code editor that highlights corresponding opening and closing parentheses to improve readability and debugging. Given a string containing various types of parentheses, find out if the parentheses are balanced and correctly nested. # Example For inputString = \\"({[]})\\", the output should be `True`. For inputString = \\"({[})\\", the output should be `False`. # Input/Output - `[input]` string `inputString` - `[output]` a boolean # Additional Conditions - The input string will consist only of characters `()`, `{}`, `[]`. - An empty input string should be considered balanced.","solution":"def is_balanced(inputString): Check if the parentheses in the input string are balanced and correctly nested. stack = [] matching_parentheses = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in inputString: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or stack.pop() != matching_parentheses[char]: return False return stack == []"},{"question":"# Problem Statement Given a list of integers, write a function to determine the length of the longest continuous subsequence such that all elements in the subsequence are equal. # Example For the list [4, 2, 2, 3, 3, 3, 1, 2, 2, 2, 2, 7], the longest subsequence of equal numbers is [2, 2, 2, 2], which has a length of 4. # Input A list of integers which may include negative numbers, positive numbers, and zero. The list will have at least one element and will not exceed 1,000,000 elements in length. Each element in the list is within the range of -10^9 and 10^9. # Function Signature Your function should have the following signature: ```python def longest_equal_subsequence_length(arr: List[int]) -> int: ``` # Implementation Details - You are expected to write an efficient solution that can handle the upper-bound constraints within a reasonable time limit. - You may assume that the maximum length of the consecutive subsequence will fit within standard integer limits of Python. # Examples 1. `longest_equal_subsequence_length([4, 2, 2, 3, 3, 3, 1, 2, 2, 2, 2, 7])` should return `4` 2. `longest_equal_subsequence_length([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])` should return `11` 3. `longest_equal_subsequence_length([5, 5, 5, -5, -5, 3, 3, 3, 3, 0, 0, 0, 2])` should return `4` 4. `longest_equal_subsequence_length([-1, -1, -1, -1, -1, -1, 0, 0, -1])` should return `6` 5. `longest_equal_subsequence_length([7])` should return `1`","solution":"from typing import List def longest_equal_subsequence_length(arr: List[int]) -> int: Determines the length of the longest continuous subsequence of equal elements in the list. if not arr: # Edge case: empty list return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 # Final check at the end of the loop max_length = max(max_length, current_length) return max_length"},{"question":"John and Mary\'s families are planning a small get-together. They need to rent vehicles for everyone to travel together. John takes charge and decides to use the minimum number of vehicles needed to accommodate everyone. He has a list of vehicle capacities and he needs to distribute people such that no vehicle has more passengers than its capacity while minimizing the number of vehicles used. Write a function that, given the number of people and capacities of available vehicles, returns the minimum number of vehicles required to transport everyone. Input Format: First line contains an integer T which denotes the number of test cases. Each test case consists of two lines: - The first line contains two integers: N (the number of people) and M (the number of available vehicles). - The second line contains M space-separated integers representing the capacities of the vehicles. Output Format: For each test case, print the minimum number of vehicles required. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ M ≤ 10^5 1 ≤ Vehicle capacity ≤ 10^5 SAMPLE INPUT 2 8 3 3 2 5 15 4 3 4 5 6 SAMPLE OUTPUT 2 3 Explanation: In the first test case, John can use the vehicles with capacities 5 and 3 to accommodate all 8 people. In the second test case, John can use the vehicles with capacities 6, 5, and 4 to accommodate all 15 people.","solution":"def min_vehicles(T, test_cases): results = [] for case in test_cases: N, M, capacities = case capacities.sort(reverse=True) people_remaining = N vehicles_used = 0 for capacity in capacities: if people_remaining <= 0: break people_transportable = min(capacity, people_remaining) people_remaining -= people_transportable vehicles_used += 1 results.append(vehicles_used) return results # Example usage: # test_cases = [ # (8, 3, [3, 2, 5]), # (15, 4, [3, 4, 5, 6]) # ] # T = 2 # print(min_vehicles(T, test_cases)) # Output should be [2, 3]"},{"question":"A company wants to organize a team-building event where employees will be grouped into teams based on their skill levels. Each employee has a skill level represented by a positive integer. The goal is to form as many teams as possible where each team has exactly three members, and the difference between the highest and lowest skill level in each team is at most 2. Given the skill levels of the employees, determine the maximum number of teams that can be formed. Input Format The first line contains a single integer N. The next line contains N integers: S(0), S(1), S(2), ..., S(N-1) separated by space, where S(i) represents the skill level of the i-th employee. Output Format Output a single integer: the maximum number of teams that can be formed. Constraints 1 ≤ N ≤ 1000 1 ≤ S(i) ≤ 1000 SAMPLE INPUT 8 3 4 3 2 1 6 5 8 SAMPLE OUTPUT 2 Explanation From the sample input, we can form two teams as follows: - Team 1: members with skills [1, 2, 3] - Team 2: members with skills [3, 4, 5] The remaining skills [6, 8] cannot form a team of three members within the required skill level difference.","solution":"def max_teams(skill_levels): Determines the maximum number of teams that can be formed where each team has exactly three members, and the difference between the highest and lowest skill level in each team is at most 2. :param skill_levels: List[int] - a list of skill levels of employees :return: int - the maximum number of teams that can be formed skill_levels.sort() n = len(skill_levels) i = 0 teams = 0 while i <= n - 3: if skill_levels[i + 2] - skill_levels[i] <= 2: teams += 1 i += 3 else: i += 1 return teams"},{"question":"# Description: Write a function that takes a string as input and returns the number of distinct characters in the string. Ignore spaces and punctuation marks. The function should be case-insensitive. # Examples ``` count_distinct_characters(\\"Hello World!\\") == 7 count_distinct_characters(\\"The quick brown fox jumps over the lazy dog.\\") == 26 count_distinct_characters(\\" 123 456 7890 !@#\\") == 10 count_distinct_characters(\\"\\") == 0 count_distinct_characters(\\"AaBbCc\\") == 3 ```","solution":"def count_distinct_characters(s): Returns the number of distinct characters in the string, ignoring spaces and punctuation marks. The function is case-insensitive. # Define a set to store unique characters unique_chars = set() # Convert the string to lower case and iterate through each character for char in s.lower(): # Check if the character is alphanumeric, and if so, add it to the set if char.isalnum(): unique_chars.add(char) # Return the number of unique characters return len(unique_chars)"},{"question":"Harry is given a list of integers and he wants to make all the integers equal by performing a series of operations. In one operation, he can increase or decrease any integer by 1. Your task is to write a program that determines the minimum number of operations required to make all the integers in the list equal. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of integers in the list. The second line contains n integers separated by a space representing the elements of the list. The elements are in the range −10^4 to 10^4. Output Print a single integer representing the minimum number of operations needed. Examples Input 3 1 2 3 Output 2 Input 4 1 2 2 3 Output 2 Input 5 10 10 10 10 10 Output 0","solution":"def min_operations_to_equalize(numbers): Given a list of integers, returns the minimum number of operations required to make all the integers equal. Each operation can increase or decrease an integer by 1. target = int(median(numbers)) return sum(abs(x - target) for x in numbers) def median(nums): n = len(nums) nums_sorted = sorted(nums) if n % 2 == 1: return nums_sorted[n // 2] else: return (nums_sorted[n // 2 - 1] + nums_sorted[n // 2]) / 2"},{"question":"You are given two lists of distinct positive integers. The first list contains the preferred horizontal coordinates and the second list contains the preferred vertical coordinates. Let\'s call a point (x, y) preferred if its x-coordinate is present in the first list and its y-coordinate is present in the second list. What is the preferred point that is closest to the origin (0, 0)? -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 10) — the lengths of the first and second lists, respectively. The second line contains n distinct integers x_1, x_2, ..., x_{n} (1 ≤ x_{i} ≤ 100) — the elements of the first list. The third line contains m distinct integers y_1, y_2, ..., y_{m} (1 ≤ y_{i} ≤ 100) — the elements of the second list. -----Output----- Print the coordinates (x, y) of the preferred point that is closest to the origin. If there are multiple such points, print the one with the smallest x-coordinate. If there are still ties, print the one with the smallest y-coordinate. -----Examples----- Input 3 2 5 3 6 2 7 Output 3 2 Input 4 3 10 8 3 1 9 1 4 Output 1 1 -----Note----- In the first example, the potential preferred points are (5, 2), (5, 7), (3, 2), (3, 7), (6, 2), and (6, 7). Among these, the closest to the origin is (3, 2). In the second example, the potential preferred points are (10, 9), (10, 1), (10, 4), (8, 9), (8, 1), (8, 4), (3, 9), (3, 1), (3, 4), (1, 9), (1, 1), and (1, 4). The closest to the origin is (1, 1).","solution":"def closest_preferred_point(n, m, horizontal_list, vertical_list): Returns the preferred point closest to the origin from the given horizontal and vertical lists. min_distance = float(\'inf\') closest_point = (None, None) for x in horizontal_list: for y in vertical_list: distance = (x**2 + y**2) if distance < min_distance: min_distance = distance closest_point = (x, y) elif distance == min_distance: if x < closest_point[0] or (x == closest_point[0] and y < closest_point[1]): closest_point = (x, y) return closest_point"},{"question":"Your task is to find the Kth smallest element in a matrix where each row and column is sorted in non-decreasing order. -----Input:----- - First line will contain a single integer, T, the number of test cases. Then the test cases follow. - The first line of each test case will contain two integers, N, and K, where N times N represents the size of the matrix. - The next N lines will each contain N integers representing the matrix elements. -----Output:----- For each test case, output a single integer, the Kth smallest element in the matrix. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 - 1 leq A[i][j] leq 10^9 - 1 leq K leq N^2 -----Sample Input:----- 2 3 5 1 5 9 10 11 13 12 13 15 3 2 1 2 3 4 5 6 7 8 9 -----Sample Output:----- 11 2 -----EXPLANATION:----- In the first test case, the sorted order of the matrix elements is [1, 5, 9, 10, 11, 12, 13, 13, 15]. The 5th smallest element is 11. In the second test case, the sorted order of the matrix elements is [1, 2, 3, 4, 5, 6, 7, 8, 9]. The 2nd smallest element is 2.","solution":"import heapq def kthSmallest(matrix, k): Finds the k\'th smallest element in a matrix where each row and column is sorted in non-decreasing order. n = len(matrix) # Min-heap to store the elements min_heap = [] # Insert the first element of each row in the heap for r in range(min(n, k)): heapq.heappush(min_heap, (matrix[r][0], r, 0)) # Extract-min k times count = 0 while min_heap: element, r, c = heapq.heappop(min_heap) count += 1 if count == k: return element # If there are more elements in the row, add the next element into the heap if c + 1 < n: heapq.heappush(min_heap, (matrix[r][c+1], r, c+1)) def process_test_cases(test_cases): results = [] for test_case in test_cases: N, K, matrix = test_case results.append(kthSmallest(matrix, K)) return results def parse_input(input_string): lines = input_string.split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, K = map(int, lines[index].split()) matrix = [] for i in range(N): matrix.append(list(map(int, lines[index + 1 + i].split()))) test_cases.append((N, K, matrix)) index += N + 1 return test_cases"},{"question":"You are given a string containing only characters \'a\' and \'b\'. You need to perform exactly one operation to transform the string such that no two adjacent characters are the same. The allowed operation is to choose any character and replace it with either \'a\' or \'b\'. -----Input----- The input consists of one string S containing only characters \'a\' and \'b\' (1 le |S| le 10^5). -----Output----- Print the minimum number of characters that need to be replaced in order to transform the string such that no two adjacent characters are the same. -----Examples----- Input abba Output 1 Input aaaa Output 2 Input abab Output 0 -----Note----- In the first example, replacing the third character \'b\' with \'a\' results in \'aaaa\', which has no adjacent identical characters. In the second example, replacing the second and fourth characters, both \'a\'s, with \'b\' results in \'abab\', which has no adjacent identical characters. In the third example, the string \'abab\' already satisfies the condition that no two adjacent characters are the same, so no replacements are needed.","solution":"def min_replacements(s): Returns the minimum number of replacements needed to make no two adjacent characters the same replacements = 0 for i in range(1, len(s)): if s[i] == s[i-1]: replacements += 1 if i+1 < len(s) and s[i+1] == \'a\': s = s[:i] + \'b\' + s[i+1:] else: s = s[:i] + \'a\' + s[i+1:] return replacements"},{"question":"A sequence of N integers X_1, X_2, ..., X_N is said to be \\"common-divisible\\" if there exists an integer D (1 ≤ D ≤ 10^9), such that D divides the sum of every contiguous subsequence of X_i. Determine the maximum value of D for the given sequence. Constraints * 1 ≤ N ≤ 10^5 * 0 ≤ X_i ≤ 10^9 * All input values are integers. Input Input is given from Standard Input in the following format: N X_1 X_2 ... X_N Output Print a single integer representing the maximum value of D. Examples Input 4 4 8 12 16 Output 4 Input 3 6 9 15 Output 3 Input 5 10 20 10 20 10 Output 10 Input 1 25 Output 25","solution":"import math from functools import reduce def max_common_divisor(n, sequence): if n == 1: return sequence[0] differences = [abs(sequence[i] - sequence[i-1]) for i in range(1, n)] max_divisor = reduce(math.gcd, differences) return max_divisor"},{"question":"In the town of Coderville, developers are required to prove their problem-solving skills through a special programming challenge. The task is to analyze a string to determine if it contains at least one permutation of the word \\"hello\\". A permutation is a rearrangement of characters. Therefore, your task is to write a program that checks if any permutation of \\"hello\\" can be found as a substring within the given input string. Consider the following rules: - The input string can contain any characters, but the substring must exactly match a permutation of \\"hello\\". - The input string\'s length can be up to 10^5 characters. - The letters in \\"hello\\" must occur consecutively as a substring in any order. Write a program that checks this condition and outputs \\"YES\\" if at least one permutation of \\"hello\\" exists as a substring; otherwise, output \\"NO\\". -----Input----- A single line containing the string s (1 ≤ |s| ≤ 10^5). -----Output----- Print \\"YES\\" (without the quotes) if there is at least one permutation of \\"hello\\" present as a substring in the input string. Otherwise, print \\"NO\\". -----Examples----- Input: oellhxyz Output: YES Input: worldhello Output: YES Input: helo Output: NO -----Note----- In the first test sample, the substring \\"oellh\\" is a permutation of \\"hello\\", hence the answer is \\"YES\\". In the second test sample, the substring \\"hello\\" itself is present, so the answer is \\"YES\\". In the third test sample, there\'s no permutation of \\"hello\\" in the string, thus the answer is \\"NO\\".","solution":"def contains_permutation_of_hello(s): Checks if there is at least one permutation of \'hello\' present as a substring in the input string. from collections import Counter target = \\"hello\\" target_count = Counter(target) current_window_count = Counter(s[:5]) if current_window_count == target_count: return \\"YES\\" for i in range(5, len(s)): current_window_count[s[i]] += 1 current_window_count[s[i - 5]] -= 1 if current_window_count[s[i - 5]] == 0: del current_window_count[s[i - 5]] if current_window_count == target_count: return \\"YES\\" return \\"NO\\""},{"question":"A factory production line has multiple conveyors, each transferring distinct products from one place to another. Each conveyor works in cycles; a product enters the conveyor, moves after a certain number of seconds, reaches the destination, and then the conveyor repeats its cycle with another product. We assume that each conveyor can handle one product at a time. Your task is to determine the maximum number of products that can reach their destination within a given amount of time. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of conveyors in the factory. The next line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 1,000), where t_i is the time (in seconds) each conveyor takes to cycle completely (i.e., the time it takes for a product to enter, move, and exit the conveyor). The last line contains a single integer T (1 ≤ T ≤ 1,000,000) — the total available time (in seconds) within which products need to reach their destination. -----Output----- Print a single integer — the maximum number of products that can reach their destination within the given time T. -----Examples----- Input 4 2 3 5 7 10 Output 5 Input 3 6 8 10 15 Output 2 -----Note----- In the first example, we can send 5 products in total: - 5 products on the conveyor with a cycle time of 2 seconds each (2 seconds * 5 = 10 seconds). In the second example, the maximum products that can be sent are: - 2 products using the conveyor that takes 6 seconds (6 seconds * 2 = 12 seconds), (15 - 12) = 3 seconds left, which is not enough for another product to complete the cycle on any conveyor.","solution":"def max_products(n, t_list, T): Returns the maximum number of products that can reach their destination within the given time T. :param n: int, number of conveyors :param t_list: List[int], cycle time for each conveyor :param T: int, total available time :return: int, maximum number of products t_list.sort() total_products = 0 for cycle_time in t_list: products = T // cycle_time total_products += products T -= products * cycle_time if T < cycle_time: break return total_products"},{"question":"A prestigious treasure hunt competition is held in a large maze. The maze consists of several cells connected by bidirectional paths. Each cell in the maze may contain a valuable treasure, and the goal is to collect as many valuable items as possible while navigating the maze. Each contestant starts from a designated starting cell and moves through the maze, collecting treasures. The maze is represented as a grid, where each cell can either be a wall (\'#\'), an empty cell (\'.\'), or a cell with a treasure (\'T\'). Contestants can move up, down, left, or right, but they cannot move through walls. Contestants can start from any empty cell (\'S\') and must navigate to collect treasures. Write a function that takes a grid as input and returns the maximum number of treasures that can be collected starting from any of the starting cells. Input The input consists of an integer n (1 ≤ n ≤ 100) and an integer m (1 ≤ m ≤ 100), representing the number of rows and columns in the grid, respectively. This is followed by n lines, each containing m characters, representing the grid. Each character is either: - \'S\' (starting cell), - \'T\' (cell with treasure), - \'.\' (empty cell), or - \'#\' (wall). Output Print a single integer, the maximum number of treasures that can be collected. Examples Input 4 5 S.T#. .#... S...T T#S Output 3 Input 3 4 S.T. T..T S#TS Output 4 Note In the first sample, the contestant can start from any \'S\' cell and the optimal path to collect maximum treasures varies. The paths can be from any \'S\' cell to any cells with \'T\', avoiding obstacles (\'#\'). In the second sample, the contestant can start from any \'S\' cell and the paths would be carefully planned to navigate around the obstacles (\'#\') to collect all \'T\' treasures.","solution":"from collections import deque def bfs_max_treasures(grid, start, n, m): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] max_treasures = 0 q = deque([start]) visited[start[0]][start[1]] = True while q: x, y = q.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: if grid[nx][ny] == \'.\' or grid[nx][ny] == \'T\': visited[nx][ny] = True q.append((nx, ny)) if grid[nx][ny] == \'T\': max_treasures += 1 return max_treasures def max_treasures_from_any_start(n, m, grid): max_treasures = 0 starts = [] for i in range(n): for j in range(m): if grid[i][j] == \'S\': starts.append((i, j)) for start in starts: treasures = bfs_max_treasures(grid, start, n, m) max_treasures = max(max_treasures, treasures) return max_treasures"},{"question":"You are given two strings, `A` and `B`. You need to determine the minimum number of character deletions required to make the two strings anagrams of each other. Two strings are anagrams if they contain the same characters with the same frequencies. Input Format: The first line contains a single string `A`. The second line contains a single string `B`. Output Format: Print a single integer, the minimum number of deletions required. Constraints: 1 ≤ |A|, |B| ≤ 10^5 Each string contains only lowercase English alphabet characters. SAMPLE INPUT cde abc SAMPLE OUTPUT 4 Explanation To make cde and abc anagrams, we need to delete 4 characters in total: \'c\' from `A` and \'b\' and \'c\' from `B` (or \'a\' from `B` and \'e\' from `A`). This leaves us with \'d\' and \'a\' or \'e\' and \'b\', which need two more deletions to finally match the frequencies.","solution":"from collections import Counter def min_deletions_to_make_anagrams(A, B): Returns the minimum number of deletions required to make the two strings anagrams of each other. count_A = Counter(A) count_B = Counter(B) deletions = 0 all_chars = set(count_A.keys()).union(set(count_B.keys())) for char in all_chars: deletions += abs(count_A[char] - count_B[char]) return deletions"},{"question":"Alice has a collection of old books and she wants to organize them by their publication dates. She decides she will group the books into different eras, defined as centuries. A century is defined as a period of 100 years, starting from the year 1. For example, books from 1901 to 2000 belong to the 20th century. Alice wants to sort her books in ascending order of publication years and return the sorted list of books along with the century they belong to. ----- Input: ----- The first line contains an integer N, the number of books. Each of the following N lines contains a string representing the title of the book and an integer representing its publication year separated by a comma. ----- Output: ----- Print each book title along with the century it belongs to, sorted by their publication years in ascending order. ----- Constraints: ----- - 1 leq N leq 10^3 - The year of publication for each book is between 1 and 2023 inclusive. ----- Sample Input: ----- 5 \\"War and Peace\\",1869 \\"Pride and Prejudice\\",1813 \\"1984\\",1949 \\"To Kill a Mockingbird\\",1960 \\"Don Quixote\\",1605 ----- Sample Output: ----- \\"Don Quixote\\",17th century \\"Pride and Prejudice\\",19th century \\"War and Peace\\",19th century \\"1984\\",20th century \\"To Kill a Mockingbird\\",20th century ----- Explanation: ----- The output lists the books sorted by their publication year, along with their respective centuries. \\"Don Quixote\\" was published in 1605, which belongs to the 17th century, while \\"Pride and Prejudice\\" and \\"War and Peace\\", published in 1813 and 1869 respectively, belong to the 19th century, and so on.","solution":"def century_from_year(year): return (year - 1) // 100 + 1 def organize_books_by_century(books): books.sort(key=lambda x: x[1]) result = [] for title, year in books: century = century_from_year(year) result.append(f\'\\"{title}\\",{century}th century\') return result def main(book_data): books = [] for entry in book_data: title, year = entry.split(\',\') books.append((title.strip(\'\\"\'), int(year))) return organize_books_by_century(books)"},{"question":"Arjun loves playing with strings. One day, he came across a string S consisting of only lower-case alphabets. He wondered if it was possible to transform the string by removing exactly one character such that the transformed string is a palindrome. A palindrome is a string that reads the same backward as forward. Since Arjun is in a hurry to write a poem for his friend, your task is to help him determine the result as fast as possible. -----Input----- The first line of input contains an integer T denoting the number of test cases. Each test-case contains a single string S. -----Output----- For each test case, output \\"YES\\" if the string can be transformed into a palindrome by removing exactly one character, otherwise \\"NO\\" (quotes for clarity only, do not output). -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ |S| ≤ 105 - The total sum of the lengths of strings in all test cases does not exceed 5 x 105. -----Example----- Input: 3 abca racecarx aaaa Output: YES YES NO -----Explanation----- - In test case 1, removing the character \'c\' from \\"abca\\" results in the palindrome \\"aba\\". - In test case 2, removing the character \'x\' from \\"racecarx\\" results in the palindrome \\"racecar\\". - In test case 3, no single character can be removed to form a palindrome, so the answer is \\"NO\\".","solution":"def can_form_palindrome_by_removing_one_char(s): def is_palindrome(x): return x == x[::-1] n = len(s) left, right = 0, n - 1 while left < right: if s[left] != s[right]: return is_palindrome(s[left+1:right+1]) or is_palindrome(s[left:right]) left += 1 right -= 1 return False def solve(T, strings): results = [] for s in strings: if can_form_palindrome_by_removing_one_char(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function `sum_of_squares(n)` that takes an integer `n` as input and returns the sum of the squares of all integers from 1 to `n`. For example, if `n = 3`, the function should return `1^2 + 2^2 + 3^2 = 14`. If `n = 0` or `n` is negative, the function should return 0. # Example: ```python sum_of_squares(3) => 14 sum_of_squares(5) => 55 sum_of_squares(0) => 0 sum_of_squares(-4) => 0 ``` **Constraints**: - The input `n` will be an integer. - The function should handle edge cases where `n` is 0 or negative gracefully.","solution":"def sum_of_squares(n): Returns the sum of the squares of all integers from 1 to `n`. If n is 0 or negative, the function returns 0. if n <= 0: return 0 return sum(i ** 2 for i in range(1, n + 1))"},{"question":"\\"QuickSort Co. needs to automate their warehouse\'s inventory management. They want a system that can quickly check if the items in any given shipment are present in their inventory database. To achieve this, you need to write a program that determines whether all items in a shipment exist in the company\'s inventory. You\'ll be provided two lists of item codes: one representing the inventory and the other representing a shipment. Both lists contain unique item codes which are strings consisting of uppercase letters and digits only. Write a function that checks if every item in the shipment list is present in the inventory list. Input The first line contains the number of items in the inventory list n (1 ≤ n ≤ 10000). The second line contains n unique item codes separated by spaces. The third line contains the number of items in the shipment list m (1 ≤ m ≤ 10000). The fourth line contains m unique item codes separated by spaces. Output Print \\"YES\\" if all the items in the shipment are found in the inventory, and \\"NO\\" otherwise. Examples Input 5 A123 B456 C789 D012 E345 3 B456 C789 A123 Output YES Input 4 X1 Y2 Z3 W4 2 X1 W5 Output NO\\"","solution":"def check_shipment_in_inventory(inventory_list, shipment_list): Returns \\"YES\\" if all items in the shipment list are found in the inventory list, otherwise \\"NO\\". inventory_set = set(inventory_list) for item in shipment_list: if item not in inventory_set: return \\"NO\\" return \\"YES\\""},{"question":"You are given a tree with n nodes and each node initially colored either black or white. You are also given q queries. There are two types of queries: 1. given a node u and a color c (0 for white, 1 for black), change the color of node u to color c. 2. given a node u, return the number of white nodes in the subtree rooted at u. Input The first line of input contains two integers, n and q (1 ≤ n ≤ 105 and 1 ≤ q ≤ 105). The second line of input contains n integers, color1, color2, ..., colorn indicating the initial colors of the nodes (0 for white, 1 for black, 0 ≤ colori ≤ 1). The next n-1 lines each contain two integers, u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v. The next q lines contain the queries. Each query starts with an integer t (1 ≤ t ≤ 2), type of the corresponding query. If t = 1, then there are two more integers in that line, u and c. Otherwise, if t = 2, then there is one more integer, u. Output For each query of the second type, print the answer in one line. Example Input 5 5 1 0 1 0 1 1 2 2 3 2 4 4 5 2 1 2 2 1 2 1 2 1 2 2 Output 2 2 1 1 Explanation In the first query, we want the number of white nodes in the subtree rooted at node 1, which are nodes 2 and 4. In the third query, we change the color of node 2 to black. In the fourth query, after the color change, the subtree rooted at node 1 has only one white node, which is node 4. In the fifth query, node 2 is now black, and thus the subtree rooted at node 2 has no white nodes left.","solution":"from collections import defaultdict, deque def count_white_subtree(n, q, colors, edges, queries): def dfs(node, parent): subtree[node] = 1 if colors[node - 1] == 0 else 0 for nei in graph[node]: if nei == parent: continue dfs(nei, node) subtree[node] += subtree[nei] def update_color(node, new_color): diff = 0 if new_color == 0 and colors[node - 1] == 1: diff = 1 elif new_color == 1 and colors[node - 1] == 0: diff = -1 update_subtree(node, -1, diff) colors[node - 1] = new_color def update_subtree(node, parent, diff): subtree[node] += diff for nei in graph[node]: if nei != parent: update_subtree(nei, node, diff) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) subtree = [0] * (n + 1) dfs(1, -1) results = [] for query in queries: if query[0] == 1: update_color(query[1], query[2]) elif query[0] == 2: results.append(subtree[query[1]]) return results"},{"question":"In a popular online coding platform, users can participate in different types of competitions and solve various problems. When a user solves a problem, they earn points. At the end of each month, there is a leaderboard which ranks users based on the total points they accumulated in that month. However, to make the leaderboard more competitive, the platform has decided to introduce a rule where a user must have at least solved one problem every day of the month to be eligible to appear on the leaderboard. Given the number of days in the current month (D) and the number of problems each user has solved each day, your task is to determine if a user is eligible to appear on the leaderboard. ------ Input Format ------ - First line will contain an integer D, the number of days in the current month. - Second line will contain an integer U, the number of users. - For the next U lines, each line will contain D integers, representing the number of problems solved by a user on each day of the month. ------ Output Format ------ For each user, print \\"ELIGIBLE\\" if the user has solved at least one problem every day of the month, otherwise print \\"NOT ELIGIBLE\\". You may print each character of each string in uppercase or lowercase (for example, the strings \\"eLiGiBlE\\", \\"eligible\\", \\"Eligible\\" and \\"ELIGIBLE\\" will all be treated as identical). ------ Constraints ------ 1 ≤ D ≤ 31 1 ≤ U ≤ 10^{3} 0 ≤ text{number of problems solved} ≤ 10^{3} ------ Sample Input 1 ------ 30 3 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ------ Sample Output 1 ------ NOT ELIGIBLE ELIGIBLE NOT ELIGIBLE ------ Explanation 1 ------ Test case 1: The first user missed solving problems on two days (5th and 29th), hence not eligible. Test case 2: The second user solved problems every day of the month, hence eligible. Test case 3: The third user missed solving problems on the 1st day, hence not eligible.","solution":"def check_eligibility(D, U, user_solutions): results = [] for solutions in user_solutions: if all(problem > 0 for problem in solutions): results.append(\\"ELIGIBLE\\") else: results.append(\\"NOT ELIGIBLE\\") return results"},{"question":"Write a function that simulates a network packet queue. The function must process a series of packet arrivals and departures, maintaining the order of packets in the queue and outputting the state of the queue after each operation. Constraints * 1 ≤ q ≤ 2000 * 1 ≤ id ≤ 10^9 * The queue initially is empty. Operations The operations input for the function consists of: - \\"A id\\": A packet with the given `id` arrives and is added to the end of the queue. - \\"D\\": The packet at the front of the queue departs and is removed from the queue. It is guaranteed that the queue is not empty when this operation is called. Input The entire input looks like: q (the number of operations) 1st operation 2nd operation ... qth operation Each operation is either of the form \\"A id\\" where `id` is an integer, or \\"D\\". Output For each operation, after processing it, print the state of the queue. The output of the queue should be a list of integers representing the ids of the packets in order from front to back. If the queue is empty, output \\"Empty\\". Example Input 5 A 1 A 2 D A 3 D Output 1 1 2 2 2 3 3","solution":"def process_queue(operations): queue = [] result = [] for operation in operations: op = operation.split() if op[0] == \'A\': queue.append(int(op[1])) elif op[0] == \'D\': if queue: queue.pop(0) if queue: result.append(\\" \\".join(map(str, queue))) else: result.append(\\"Empty\\") return result # This function does not take input directly or print output, # so the unit test functions will use it and verify results accordingly."},{"question":"Problem description. John loves to organize tournaments for his friends. This time, he is organizing a chess tournament. He invites \'n\' players for the tournament and decides that every player will play exactly one game against every other player. John wonders how many games will be played in total by the end of the tournament. Can you help John figure out the total number of games? Input The first line contains the number of test cases, t. The t lines that follow contain a number n denoting the number of players. Output For each of the t test cases, print the total number of games played in a tournament with n players. Constraints 1 <= t <= 10^5 1 <= n <= 10^9 Example Input: 2 2 4 Output: 1 6","solution":"def number_of_games(t, players): For each test case, calculate the total number of games played in a tournament with n players. :param t: int : Number of test cases :param players: List[int] : List of number of players for each test case :return: List[int] : Total number of games for each test case results = [] for n in players: games = n * (n - 1) // 2 # Combination formula nC2 results.append(games) return results"},{"question":"A code-breaking team is trying to recover a lost message given to their agents in the form of a scrambled array. They know that the original message was represented as a sequence of integers `[a_1, a_2, ..., a_n]` where `1 <= n <= 10^5`. They also know that the orientation of the integer values has been shifted to the right by `k` positions, where `0 <= k < n`. You need to determine the original sequence before it was shifted. -----Input----- The first line contains two integers `n` and `k` (`1 <= n <= 10^5`, `0 <= k < n`), representing the number of integers in the sequence and the positions it was shifted to the right, respectively. The second line contains `n` integers, representing the shifted sequence. -----Output----- Output a single line containing the original sequence in the correct order. -----Examples----- Sample Input 1: 5 2 4 5 1 2 3 Sample Output 1: 1 2 3 4 5 Sample Input 2: 7 3 5 6 7 1 2 3 4 Sample Output 2: 1 2 3 4 5 6 7 Sample Input 3: 3 1 3 1 2 Sample Output 3: 1 2 3","solution":"def recover_original_sequence(n, k, sequence): This function takes the length of the sequence n, the shift amount k, and the shifted sequence, then returns the original sequence before it was shifted. # The original sequence can be found by slicing the list # The last k elements will be moved to the beginning return sequence[k:] + sequence[:k] # Example usage: # n, k = 5, 2 # sequence = [4, 5, 1, 2, 3] # print(recover_original_sequence(n, k, sequence)) # Output: [1, 2, 3, 4, 5]"},{"question":"A group of friends are playing a game involving a sequence of moves on a grid. The grid is of size n x m and there are multiple players placed on the grid at various positions. Each move involves any player trying to move in one of the four directions: up, down, left, or right. However, there are walls scattered on this grid that players cannot pass through. The goal is to determine if at least one player can reach a specific target cell (a, b). The movements are allowed within the grid boundaries and blocked by walls. Multiple players may start from different positions on the grid, and it\'s possible that the grid has some cells marked as walls. Input The first line of input contains three integers n, m, and k (1 ≤ n, m ≤ 30, 1 ≤ k ≤ 50). The next line contains two integers a and b (1 ≤ a ≤ n, 1 ≤ b ≤ m) representing the target cell coordinates. The next n lines contain m characters each, where each character can be: - \'.\' representing an empty cell, - \'#\' representing a wall, or - \'*\' representing the players\' starting positions. Output Print \\"Yes\\" if at least one player can reach the target cell, or \\"No\\" if no player can reach the target cell. Examples Input: 4 4 1 3 3 .#.. .*.# .... .... Output: Yes Input: 5 5 2 5 5 #.*.# ..... ..#.. .*.*. .#.*# Output: No Note In the first example, there is one player starting from position (2, 2) who can reach the target cell (3, 3) by moving down and then right. In the second example, none of the players can reach the target cell (5, 5) as there are too many walls blocking all paths.","solution":"def can_any_player_reach_target(n, m, k, target_x, target_y, grid): from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right target_x -= 1 target_y -= 1 # Find all players\' starting positions starts = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == \'*\'] def is_in_bounds(x, y): return 0 <= x < n and 0 <= y < m for start in starts: queue = deque([start]) visited = set() visited.add(start) while queue: x, y = queue.popleft() if (x, y) == (target_x, target_y): return \\"Yes\\" for direction in directions: nx, ny = x + direction[0], y + direction[1] if is_in_bounds(nx, ny) and (nx, ny) not in visited and grid[nx][ny] != \'#\': visited.add((nx, ny)) queue.append((nx, ny)) return \\"No\\""},{"question":"Given a sequence of integers representing temperatures measured over several consecutive days, find the maximum number of consecutive days with strictly increasing temperatures. -----Constraints----- - All values in input are integers. - 1 leq N leq 10^5 - -10^5 leq T_i leq 10^5 -----Input----- Input is given from Standard Input in the following format: N T_1 T_2 ... T_N -----Output----- Output the maximum number of consecutive days with strictly increasing temperatures. -----Sample Input----- 7 1 2 2 3 5 7 6 -----Sample Output----- 4 The longest stretch of strictly increasing temperatures is from 2 to 7, which spans 4 days: 2 -> 3 -> 5 -> 7.","solution":"def max_increasing_temperature_days(n, temperatures): Finds the maximum number of consecutive days with strictly increasing temperatures. :param n: Number of days (int) :param temperatures: List of temperatures (List[int]) :return: Maximum number of consecutive days with strictly increasing temperatures (int) if n == 1: return 1 max_count = 1 current_count = 1 for i in range(1, n): if temperatures[i] > temperatures[i - 1]: current_count += 1 max_count = max(max_count, current_count) else: current_count = 1 return max_count"},{"question":"Given an array of N strings, where each string represents a binary number, arrange all the strings in descending order of their decimal values and return the sorted array. You should ensure the sorting handles the strings as binary numbers and not as their ASCII values. Example 1: Input: N = 5 arr = [\\"1100\\", \\"1010\\", \\"111\\", \\"10\\", \\"1001\\"] Output: [\\"1100\\", \\"1010\\", \\"1001\\", \\"111\\", \\"10\\"] Explanation: In decimal, the numbers are [12, 10, 7, 2, 9]. When sorted in descending order, the decimal numbers are [12, 10, 9, 7, 2], and their corresponding binary representations are [\\"1100\\", \\"1010\\", \\"1001\\", \\"111\\", \\"10\\"]. Example 2: Input: N = 3 arr = [\\"101\\", \\"110\\", \\"11\\"] Output: [\\"110\\", \\"101\\", \\"11\\"] Explanation: In decimal, the numbers are [5, 6, 3]. When sorted in descending order, the decimal numbers are [6, 5, 3], and their corresponding binary representations are [\\"110\\", \\"101\\", \\"11\\"]. Your Task: You don\'t need to read or print anything. Your task is to complete the function sortBinaryStrings() which takes the array of strings arr[] and its size N as input parameter and returns the sorted array. Expected Time Complexity: O(N log N) Expected Space Complexity: O(N) Constraints: 1 ≤ N ≤ 1000 1 ≤ Length of each string ≤ 32","solution":"def sortBinaryStrings(N, arr): This function takes an array of N binary strings and returns the array sorted in descending order of their decimal values. arr.sort(key=lambda x: int(x, 2), reverse=True) return arr"},{"question":"Lucifer and Crowley have another encounter, but this time they must solve a string manipulation problem. They are given a string S consisting of lowercase English alphabets and must determine if it can be rearranged to form a palindrome. Help Lucifer secure his position as the King of Hell by writing a program that checks if the input string can be rearranged into a palindrome. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Constraints 1 ≤ Length of string S ≤ 1000 Input The input consists of a single line containing the string S. Output Print \\"YES\\" if the string can be rearranged to form a palindrome, otherwise print \\"NO\\". Setter : Shiv Dhingra SAMPLE INPUT aabbcc SAMPLE OUTPUT YES","solution":"def can_form_palindrome(S): Determines if the input string S can be rearranged to form a palindrome. Returns \\"YES\\" if possible, otherwise \\"NO\\". # Create a frequency dictionary to count occurrences of each character freq = {} for char in S: if char in freq: freq[char] += 1 else: freq[char] = 1 # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if it has at most one character with an odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"The kingdom of Wonderland is planning to build new highways to connect its cities in such a way that the travel time between any two cities is minimized. Each highway directly connects two cities and has a certain travel time associated with it. As a wise planner, you are to determine the minimum total travel time required to connect all the cities. Given the number of cities and a list of possible highways, each with an associated travel time, help Wonderland by finding the minimum total travel time required to construct the highways such that all cities are connected. Input The first line contains two integers n and m (1 ≤ n ≤ 100; 1 ≤ m ≤ 10000) — the number of cities and the number of possible highways. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n; u ≠ v; 1 ≤ w ≤ 1000), which means that there is a possible highway between cities u and v with a travel time of w. It\'s guaranteed that there is at least one way to connect all cities. Output Print a single integer — the minimum total travel time to connect all cities. Examples Input 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 5 Output 6 Input 3 3 1 2 3 2 3 1 1 3 2 Output 3 Note In the first test case, the minimum total travel time is achieved by connecting city pairs (1-2), (2-3), and (3-4). The total travel time is 1 + 2 + 3 = 6. In the second test case, the minimum total travel time is achieved by connecting city pairs (2-3), and (1-3) with a total travel time of 1 + 2 = 3.","solution":"def minimum_spanning_tree(n, highways): Returns the minimum total travel time required to connect all cities using Kruskal\'s algorithm. Parameters: n (int): The number of cities. highways (list of tuples): Each tuple contains three integers u, v, and w which means that there is a possible highway between cities u and v with a travel time of w. Returns: int: The minimum total travel time to connect all cities. # Initialize parent and rank arrays for union-find parent = list(range(n + 1)) rank = [0] * (n + 1) # Function to find the root of a node with path compression def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] # Function to union two sets def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 # Kruskal\'s algorithm highways.sort(key=lambda x: x[2]) # Sort highways by travel time mst_cost = 0 edges_used = 0 for u, v, w in highways: if find(u) != find(v): union(u, v) mst_cost += w edges_used += 1 if edges_used == n - 1: break return mst_cost"},{"question":"Mary loves playing with strings. She has a string S of length N consisting of lowercase English letters. She wants to transform the string S into another string T of length N using the following operation any number of times (including zero times): - Choose two different indices i and j (1 ≤ i, j ≤ N, i ≠ j) and swap the characters at positions i and j. Mary wants to know the minimum number of operations required to transform the string S into the string T, or if it\'s impossible. ------ Input Format ------ - The first line contains an integer T, the number of testcases. - For each testcase: - First line contains an integer N. - The second line contains the string S. - The third line contains the string T. ------ Output Format ------ For each testcase, output a single line containing the minimum number of swap operations needed, or -1 if it\'s impossible to transform S into T. ------ Constraints ------ 1 ≤ T ≤ 10^{2} 1 ≤ N ≤ 10^{5} ------ Sample Input 1 ------ 3 4 abcd dcba 4 aabb bbaa 3 abc def ------ Sample Output 1 ------ 2 2 -1 ------ Explanation 1 ------ Test case 1: We can swap characters at positions 1 and 4, and then swap characters at positions 2 and 3. This transforms \\"abcd\\" into \\"dcba\\" in 2 swaps. Test case 2: Swap characters at positions 1 and 3, and then swap characters at positions 2 and 4. This transforms \\"aabb\\" into \\"bbaa\\" in 2 swaps. Test case 3: It is impossible to transform \\"abc\\" into \\"def\\" because the strings have different characters. Hence the output is -1.","solution":"def min_swaps_to_transform_S_to_T(N, S, T): Calculate the minimum number of swap operations required to transform S into T, or return -1 if it\'s impossible to transform S into T. # Check if both strings are anagrams if sorted(S) != sorted(T): return -1 swap_count = 0 S = list(S) for i in range(N): if S[i] != T[i]: j = S.index(T[i], i + 1) S[i], S[j] = S[j], S[i] swap_count += 1 return swap_count def process_test_cases(test_cases): results = [] for N, S, T in test_cases: results.append(min_swaps_to_transform_S_to_T(N, S, T)) return results"},{"question":"Write a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Hint You may want to write a helper function to determine whether a given number is prime. A number is prime if it has no divisors other than 1 and itself. Constraints 1 ≤ length of the list ≤ 106 1 ≤ each integer ≤ 109 Input A list of integers separated by spaces. Output A list of integers which are prime numbers from the original list, separated by spaces. Examples Input 10 15 3 7 11 Output 3 7 11 Input 4 6 8 10 Output","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Returns a list of prime numbers filtered from the provided list of numbers. return [num for num in numbers if is_prime(num)] # Example usage print(filter_primes([10, 15, 3, 7, 11])) # Output: [3, 7, 11]"},{"question":"In this challenge, you are asked to write a function that generates all possible permutations of a given string and then returns them in lexicographical (dictionary) order. The task has two parts: 1. Generate all permutations of the given string. 2. Return these permutations in a list, sorted in lexicographical order. You may use a built-in function for permutation generation, but ensure that the final output is sorted lexicographically. Input Format There will be one line of input: The string boldsymbol{s} to be permuted. Constraints 1leq |s|leq 8 Each character of boldsymbol{s} is a lowercase English alphabet letter. Output Format Output all permutations of the string boldsymbol{s}, each on a new line, in lexicographical order. Sample Input abc Sample Output abc acb bac bca cab cba Explanation The given string boldsymbol{s} is \\"abc\\". The permutations of \\"abc\\" in dictionary order are \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", and \\"cba\\". Each permutation is output on a separate line. Note - If the input string has repeated characters, the permutations should still be distinct and listed in dictionary order. - You should aim for an efficient solution, even though the maximum length of the string boldsymbol{s} is 8.","solution":"from itertools import permutations def lexicographical_permutations(s): Generates all possible permutations of the given string and returns them in lexicographical order. Args: s (str): The input string to be permuted. Returns: list: A list of all permutations of s in lexicographical order. # Generate all permutations using itertools.permutations perms = permutations(s) # Convert each permutation tuple to a string and remove duplicates using set perm_strings = set(\'\'.join(p) for p in perms) # Return the sorted list of permutations return sorted(perm_strings)"},{"question":"You are given an array a of n integers (1 ≤ n ≤ 2 ⋅ 10^5, -10^9 ≤ a_i ≤ 10^9). We call an array interesting if it has exactly one peak. A peak is an element which is greater than its neighbours. More formally, an array a is interesting if there exists exactly one index i (1 ≤ i ≤ n) such that a[i] > a[i-1] and a[i] > a[i+1]. Your task is to determine if the given array can be rearranged to form an interesting array. Input The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each of the next t lines contains a single integer n followed by a list of n integers a_1, a_2, ... , a_n. It is guaranteed that the sum of n across all test cases does not exceed 2 ⋅ 10^5. Output For each test case, output \\"YES\\" if the array can be rearranged to form an interesting array, and \\"NO\\" otherwise. The case of the letters in YES and NO does not matter. Examples Input 4 5 1 3 2 4 5 3 2 1 3 4 1 1 1 1 3 1 3 2 Output YES YES NO YES Note In the first example, one possible interesting array is [1, 2, 5, 4, 3], with the peak being 5. In the second example, the array is already interesting [2, 3, 1], where the peak is 3. In the third example, it is impossible to have exactly one peak. In the fourth example, one possible interesting array is [2, 3, 1], where the peak is 3.","solution":"def can_form_interesting_array(n, arr): Determines if the given array can be rearranged to form an interesting array. unique_elements = len(set(arr)) if unique_elements < 3: return \\"NO\\" else: return \\"YES\\" def solve(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] result = can_form_interesting_array(n, arr) results.append(result) return results"},{"question":"Given a string consisting of lowercase English letters and the characters \'(\', \')\', \'[\', \']\', \'{\', and \'}\', determine if the string has balanced parentheses. Balanced parentheses mean that for every opening bracket, there is a corresponding closing bracket of the same type, and they are properly nested. -----Input----- The first line contains an integer n (1 le n le 10^5) — the length of the string. The second line contains a string of length n consisting of lowercase English letters, \'(\', \')\', \'[\', \']\', \'{\', and \'}\'. -----Output----- Print \\"YES\\" if the string has balanced parentheses, otherwise print \\"NO\\". -----Example----- Input 8 a(b[c]{d}) Output YES Input 6 a(b{c} Output NO","solution":"def is_balanced_parentheses(n, s): stack = [] paren_map = {\'(\': \')\', \'[\': \']\', \'{\': \'}\'} opening_parens = set(paren_map.keys()) closing_parens = set(paren_map.values()) for char in s: if char in opening_parens: stack.append(char) elif char in closing_parens: if stack and paren_map[stack[-1]] == char: stack.pop() else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"Given a binary tree, flatten it into a linked list in-place. The linked list should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null. The linked list should follow the same order as a pre-order traversal of the binary tree. Example 1: Input: 1 / 2 5 / 3 4 6 Output: 1 -> 2 -> 3 -> 4 -> 5 -> 6 Example 2: Input: 3 / 9 20 / 15 7 Output: 3 -> 9 -> 20 -> 15 -> 7 Your task: You don\'t need to read input or print anything. Your task is to complete the function flatten() which takes the root of the binary tree and modifies the tree in-place to produce a linked list as described. Expected Time Complexity: O(N), where N is the number of nodes in the tree. Expected Auxiliary Space: O(Height of the Tree), due to the recursion stack. Constraints: 1 ≤ Number of Nodes ≤ 10^4 Example of TreeNode class: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flatten(root: TreeNode) -> None: Flattens the binary tree to a linked list in-place following the pre-order traversal. if not root: return # Use a stack to help with the iterative pre-order traversal stack = [root] while stack: current = stack.pop() # If the right subtree exists, push it on the stack first (so it is processed after the left one) if current.right: stack.append(current.right) # If the left subtree exists, push it on the stack if current.left: stack.append(current.left) # Update current node\'s left to be None, and its right to the next node in the pre-order traversal if stack: current.right = stack[-1] current.left = None"},{"question":"Mina is trying to make a necklace using beads of different colors. Each bead has a color represented by an integer. She wants to create a sequence of beads such that no two adjacent beads have the same color. Known already is the rule that Mina can only use a certain number of beads from each color, given by a list of pairs where each pair consists of a color and the available number of those beads. Given the list of beads and their counts, determine the length of the longest possible necklace Mina can create following the rule. If it\'s not possible to create any necklace with the given beads, return 0. -----Input----- The first line contains an integer n (1 ≤ n ≤ 500) — the number of different bead colors. Next line contains n pairs of integers ci and ai (1 ≤ ci ≤ 500, 1 ≤ ai ≤ 500) — where ci is the color and ai is the number of beads available for that color. -----Output----- Output a single integer — the length of the longest possible necklace Mina can create. -----Examples----- Input 3 1 3 2 2 3 1 Output 6 Input 2 1 2 2 2 Output 4","solution":"def longest_necklace(n, beads): Determines the length of the longest possible necklace using given beads such that no two adjacent beads have the same color. :param n: Number of different bead colors :param beads: List of tuples, where each tuple contains a color and the number of beads available for that color :return: Length of the longest possible necklace # Calculating the total number of beads total_beads = sum(bead_count for color, bead_count in beads) if n == 1: # If there is only one color, the maximum length of the necklace is 0 or 1 return 1 if beads[0][1] > 0 else 0 max_beads = max(bead_count for color, bead_count in beads) if max_beads > (total_beads + 1) // 2: return 0 return total_beads"},{"question":"Write a function that takes an integer `k` and a list of integers as input. The function should return the maximum sum of any contiguous subarray of exactly `k` elements. Raise an error if `k` is larger than the length of the list. Examples For example, the list `[1, 4, 2, 10, 23, 3, 1, 0, 20]` and `k = 4` has the following contiguous subarrays of length 4: ``` [1, 4, 2, 10], [4, 2, 10, 23], [2, 10, 23, 3], [10, 23, 3, 1], [23, 3, 1, 0], [3, 1, 0, 20] ``` The respective sums of these subarrays are: ``` 17, 39, 38, 37, 27, 24 ``` Thus, the function should return `39` as it is the maximum sum of any contiguous subarray of length 4 in the given list.","solution":"def max_contiguous_subarray_sum(k, nums): Returns the maximum sum of any contiguous subarray of exactly k elements. Raises a ValueError if k is larger than the length of nums. if k > len(nums): raise ValueError(\\"k should not be larger than the length of the list\\") # Calculate the initial sum of the first \'k\' elements max_sum = sum(nums[:k]) current_sum = max_sum # Iterate from the k-th element to the end of the list for i in range(k, len(nums)): # Slide the window by subtracting the element that is no longer in the window # and adding the new element current_sum = current_sum - nums[i - k] + nums[i] # Update max_sum if a new maximum is found max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are a game developer working on a turn-based strategy game where the player controls a warrior with limited energy points. The warrior can perform different kinds of actions including moving and attacking, but each action costs a specific amount of energy. Your task is to determine the maximum number of enemies the warrior can defeat in a given number of turns without running out of energy. Each action taken by the warrior has a specified energy cost, and each enemy is positioned on a grid with a specific distance from the warrior\'s starting position. Moving to an enemy costs energy based on the grid distance, and attacking an enemy has a fixed energy cost. The warrior starts at the coordinate (0, 0) on the grid. The warrior\'s energy gets replenished at the start of each new turn. -----Input----- The first line of the input contains an integer T, the number of test cases. The first line of each test case contains an integer E denoting the energy points the warrior has at the start of each turn. The second line contains an integer N denoting the number of enemies. The next N lines each contain three integers X, Y, and A, where (X, Y) are the coordinates of an enemy on the grid and A is the energy cost to attack that enemy. -----Output----- For each test case, output a single line containing the maximum number of enemies the warrior can defeat in N turns or less, without running out of energy. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ E ≤ 1000 - 1 ≤ N ≤ 50 - 0 ≤ X, Y ≤ 100 - 1 ≤ A ≤ 500 -----Example----- Input: 1 100 3 3 4 10 5 6 15 2 8 20 Output: 3 -----Explanation----- Example case 1: The warrior has 100 energy points at the start of each turn. The distance and energy cost to move to each enemy and attack them is calculated as follows: - Enemy at (3, 4): Distance is 3+4=7, total energy cost for moving and attacking is 7+10=17. - Enemy at (5, 6): Distance is 5+6=11, total energy cost for moving and attacking is 11+15=26. - Enemy at (2, 8): Distance is 2+8=10, total energy cost for moving and attacking is 10+20=30. Since 17 + 26 + 30 ≤ 100 * 3, the warrior can defeat all three enemies in three turns.","solution":"def calculate_energy_cost(x, y, a): Calculates the total energy cost for moving to and attacking an enemy at (x, y) with attack cost a. distance_cost = abs(x) + abs(y) total_energy_cost = distance_cost + a return total_energy_cost def max_enemies_defeated(energy, enemies): Determines the maximum number of enemies the warrior can defeat in N turns or less without running out of energy in each turn. # Calculate the energy cost for each enemy energy_costs = [calculate_energy_cost(x, y, a) for x, y, a in enemies] # Sort energy costs in ascending order energy_costs.sort() defeated_count = 0 for cost in energy_costs: if energy >= cost: defeated_count += 1 energy -= cost else: break return defeated_count def max_enemies_per_turn(test_cases): Processes multiple test cases to determine the maximum number of enemies the warrior can defeat per turn. results = [] for energy, enemies in test_cases: result = max_enemies_defeated(energy, enemies) results.append(result) return results"},{"question":"A software company is developing a new data retrieval system that processes and analyses a sequence of queries. The system is represented as a 2D grid with `n` rows and `m` columns, where each cell can store an integer value. Initially, all cells have a value of zero. The system supports two types of operations: 1. **Update Operation**: - Syntax: `1 r c x` - Description: Set the cell at row `r` and column `c` to value `x`. 2. **Sum Query Operation**: - Syntax: `2 r1 c1 r2 c2` - Description: Calculate the sum of all values in the subgrid defined by the top-left corner `(r1, c1)` and the bottom-right corner `(r2, c2)`. The goal of this project is to efficiently handle a large number of updates and queries. **Input:** - The first line contains three integers `n`, `m`, and `q` - the number of rows, the number of columns, and the number of operations, respectively. - The following `q` lines each contain one of the two types of operations as described above. **Output:** - For each `Sum Query Operation`, output the sum of the specified subgrid in a new line. **Constraints:** - 1 ≤ n, m ≤ 1000 - 1 ≤ q ≤ 50000 - 1 ≤ r, r1, r2 ≤ n - 1 ≤ c, c1, c2 ≤ m - -10^9 ≤ x ≤ 10^9 **Example:** **Input:** ``` 3 3 5 1 1 1 5 1 2 2 3 2 1 1 2 2 1 3 3 4 2 1 1 3 3 ``` **Output:** ``` 8 12 ``` **Explanation:** - After the first update: the grid looks like this: ``` 5 0 0 0 0 0 0 0 0 ``` - After the second update: the grid looks like this: ``` 5 0 0 0 3 0 0 0 0 ``` - The first sum query calculates the sum of the subgrid from (1,1) to (2,2), which is `5 + 0 + 0 + 3 = 8`. - After the third update: the grid looks like this: ``` 5 0 0 0 3 0 0 0 4 ``` - The second sum query calculates the sum of the subgrid from (1,1) to (3,3), which is `5 + 0 + 0 + 0 + 3 + 0 + 0 + 0 + 4 = 12`.","solution":"class DataRetrievalSystem: def __init__(self, n, m): self.n = n self.m = m self.grid = [[0] * m for _ in range(n)] def update(self, r, c, x): self.grid[r-1][c-1] = x def sum_query(self, r1, c1, r2, c2): s = 0 for i in range(r1-1, r2): for j in range(c1-1, c2): s += self.grid[i][j] return s def process_operations(n, m, q, operations): system = DataRetrievalSystem(n, m) results = [] for op in operations: if op[0] == 1: _, r, c, x = op system.update(r, c, x) elif op[0] == 2: _, r1, c1, r2, c2 = op results.append(system.sum_query(r1, c1, r2, c2)) return results"},{"question":"You are given a string S consisting of lowercase English letters. Your task is to find the first non-repeating character in S and return its index. If there is no such character, return -1. You need to solve this problem with a linear time complexity. INPUT: The input consists of a single line containing the string S. OUTPUT: Output the index of the first non-repeating character or -1 if there is no such character. Constraints: 1 ≤ length of S ≤ 10^5 SAMPLE INPUT: leetcode SAMPLE OUTPUT: 0 Explanation: \'l\' is the first non-repeating character and its index is 0.","solution":"def first_non_repeating_character(s): Returns the index of the first non-repeating character in the string s. If there is no such character, returns -1. # Step 1: Create a dictionary to count frequency of each character char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Step 2: Iterate over the string to find the first non-repeating character for index, char in enumerate(s): if char_count[char] == 1: return index # If no non-repeating character is found, return -1 return -1"},{"question":"You are given an integer matrix of size NxN. Your task is to find the sum of the main diagonal elements. The main diagonal of a matrix consists of elements whose row and column indices are the same. ------ Input Format ------ - First line contains an integer T, the number of test cases. Then the test cases follow. - Each test case starts with an integer N, the size of the matrix. - Next N lines contain N integers each, representing the matrix. ------ Output Format ------ For each test case, print the sum of the main diagonal elements. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 -100 ≤ text{matrix elements} ≤ 100 ------ Sample Input 1 ------ 2 3 1 2 3 4 5 6 7 8 9 2 -5 10 3 4 ------ Sample Output 1 ------ 15 -1 ------ Explanation 1 ------ Test Case 1: The main diagonal elements are 1, 5, and 9. Their sum is 1+5+9 = 15. Test Case 2: The main diagonal elements are -5 and 4. Their sum is -5+4 = -1.","solution":"def sum_of_main_diagonal(T, data): results = [] for i in range(T): N = data[i][0] matrix = data[i][1:] sum_diagonal = sum(matrix[j][j] for j in range(N)) results.append(sum_diagonal) return results"},{"question":"Find the second largest distinct element in an array. Example 1: Input: arr = [3, 2, 1, 4, 5] Output: 4 Explanation: The largest element is 5 and the second largest distinct element is 4. Example 2: Input: arr = [1, 2, 2, 2, 3] Output: 2 Explanation: The largest element is 3 and the second largest distinct element is 2. Your Task: You don\'t need to read or print anything. Your task is to complete the function findSecondLargest() which takes arr as input parameter and returns the second largest distinct element in the array. If there is no such element, return -1. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= |arr| <= 10^3 -10^6 <= arr[i] <= 10^6","solution":"def findSecondLargest(arr): This function returns the second largest distinct element in an array. If there is no such element, it returns -1. if len(arr) < 2: return -1 largest = second_largest = float(\'-inf\') for num in arr: if num > largest: second_largest = largest largest = num elif num > second_largest and num < largest: second_largest = num if second_largest == float(\'-inf\'): return -1 return second_largest"},{"question":"Given a string s containing only lowercase letters, return the minimum number of operations needed to make every character appear an even number of times. An operation consists of removing a character from the string. Example 1: Input: s = \\"aabbcc\\" Output: 0 Explanation: Every character already appears an even number of times. Example 2: Input: s = \\"aabbccc\\" Output: 1 Explanation: By removing one \'c\', the string becomes \\"aabbcc\\", where every character appears an even number of times. Example 3: Input: s = \\"xyzxyz\\" Output: 0 Explanation: Every character already appears an even number of times. Example 4: Input: s = \\"abccbaabccba\\" Output: 0 Explanation: Every character appears an even number of times. Constraints: 1 <= s.length <= 10^5 s consists of only lowercase English letters.","solution":"def min_operations_to_even_characters(s): Returns the minimum number of operations needed to make every character appear an even number of times by removing characters from the string. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # We need to remove one character for every odd occurrence to make it even return odd_count"},{"question":"Alice has a 2D grid of n x m cells where each cell contains a lowercase English letter. She can perform two types of operations: 1. Swap the contents of any two cells in the grid. 2. Select a rectangular subgrid and rearrange all the characters within that rectangle in any desired order. Her target is to transform the grid into another grid provided as the target grid. Determine the minimum number of operations required to achieve the transformation from the initial grid to the target grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns of the grid. The next n lines each contain m characters, representing the initial grid. The next n lines each contain m characters, representing the target grid. Output Print a single integer — the minimum number of operations required to transform the initial grid into the target grid. If it\'s impossible to achieve the transformation, print -1. Examples Input 2 2 ab cd ba dc Output 2 Input 3 3 abc def ghi abc efd ghi Output 1","solution":"def min_operations_to_transform(n, m, initial_grid, target_grid): from collections import Counter initial_counts = Counter(char for row in initial_grid for char in row) target_counts = Counter(char for row in target_grid for char in row) if initial_counts != target_counts: return -1 return 1"},{"question":"There is a maze represented as a grid of size N x M. Each cell in the grid can be either open (represented by \'.\') or blocked (represented by \'#\'). You start at the top-left corner of the maze (0, 0) and your goal is to reach the bottom-right corner (N-1, M-1). You can only move up, down, left, or right, and you cannot move through blocked cells. In addition to the grid, you have a unique ability to \\"jump\\" over a single blocked cell to the adjacent open cell in any direction (up, down, left, or right). The jump over a blocked cell counts as a single move. Determine the minimum number of moves required to reach the bottom-right corner from the top-left corner using this ability. If it is not possible to reach the bottom-right corner, output -1. Input Format The first line contains the number of test cases T. T test cases follow. Each test case starts with two integers N and M, followed by N lines where each line contains M characters (either \'.\' or \'#\') representing the maze. Output Format For each test case, output a single integer representing the minimum number of moves required to reach the bottom-right corner. If it is not possible, output -1. Constraints 1 ≤ T ≤ 50 2 ≤ N, M ≤ 50 SAMPLE INPUT 2 4 4 .... .#.. ..#. .... 3 3 .#. # .#. SAMPLE OUTPUT 3 -1 Explanation For the first test case, the path (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (3,3) uses the jump ability once to jump over the blocked cell at (1,1). For the second test case, it is not possible to reach the bottom-right corner due to the configuration of the maze.","solution":"from collections import deque def minimum_moves_to_reach_end_with_jump(grid): def is_valid(x, y, n, m): return 0 <= x < n and 0 <= y < m def bfs(n, m, grid): # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0, False)]) # (x, y, moves, jumped_over_block) visited = set() while queue: x, y, moves, jumped_over_block = queue.popleft() if (x, y) == (n-1, m-1): return moves for direction in directions: new_x, new_y = x + direction[0], y + direction[1] if is_valid(new_x, new_y, n, m): if grid[new_x][new_y] == \'.\' and (new_x, new_y, jumped_over_block) not in visited: visited.add((new_x, new_y, jumped_over_block)) queue.append((new_x, new_y, moves + 1, jumped_over_block)) elif grid[new_x][new_y] == \'#\' and not jumped_over_block: jump_x, jump_y = new_x + direction[0], new_y + direction[1] if is_valid(jump_x, jump_y, n, m) and grid[jump_x][jump_y] == \'.\' and (jump_x, jump_y, True) not in visited: visited.add((jump_x, jump_y, True)) queue.append((jump_x, jump_y, moves + 1, True)) return -1 return bfs(len(grid), len(grid[0]), grid) def solve(test_cases): results = [] for grid in test_cases: results.append(minimum_moves_to_reach_end_with_jump(grid)) return results # Function to parse the input into test cases def parse_input(input_text): input_lines = input_text.strip().split(\'n\') t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, input_lines[index].split()) index += 1 grid = [input_lines[index + i] for i in range(n)] index += n test_cases.append(grid) return test_cases # Example usage input_text = 2 4 4 .... .#.. ..#. .... 3 3 .#. # .#. test_cases = parse_input(input_text) results = solve(test_cases) for result in results: print(result)"},{"question":"Grace is a wildlife photographer documenting the movement of a particular species. She places cameras at key positions in a rectangular grid of cells, each identified by coordinates (x, y). Every camera captures all movement along its row and column. Grace wants to know the minimum number of cameras needed to monitor the entire grid. Given the grid dimensions are `R` (rows) by `C` (columns), help Grace determine the minimum number of cameras required. -----Input----- - Single line contains two space separated integers R and C, representing the dimensions of the grid. -----Output----- - A single integer representing the minimum number of cameras needed to monitor the entire grid. -----Constraints and Subtasks----- - 1 <= R, C <= 100 Subtask 1: 10 points - 1 <= R, C <= 5 Subtask 2: 20 points - 1 <= R, C <= 10 Subtask 3: 30 points - 1 <= R, C <= 50 Subtask 3: 40 points - Original Constraints. -----Examples----- Input: 4 5 Output: 4 Input: 3 3 Output: 3 Explanation: - In the first example, the minimum number of cameras needed to monitor a 4 by 5 grid is 4. Placing a camera at each cell along the diagonal (1,1), (2,2), (3,3), (4,4) ensures the entire grid is monitored. - In the second example, placing cameras at any cell in each of the 3 rows or columns will monitor the entire 3 by 3 grid.","solution":"def min_cameras(R, C): Returns the minimum number of cameras needed to monitor the entire grid. Parameters: R (int): Number of rows in the grid. C (int): Number of columns in the grid. Returns: int: Minimum number of cameras required. # The minimum number of cameras needed will be the minimum of rows and columns return min(R, C)"},{"question":"# Task Create a function `min_max_sum` that takes a list of integers as an input and returns a tuple containing three values: the minimum value, the maximum value, and the sum of all the elements in the list. Function Signature ```python def min_max_sum(arr: List[int]) -> Tuple[int, int, int]: ``` Input - `arr` (List[int]): A list of integers where each integer i is such that -10^9 ≤ i ≤ 10^9 and 1 ≤ len(arr) ≤ 10^5. Output - A tuple containing three integers in the following order: - The minimum value from the list - The maximum value from the list - The sum of all elements in the list Example ```python # Example 1 arr = [3, 1, 2] min_max_sum(arr) # Output: (1, 3, 6) # Example 2 arr = [10, -2, 0, 5] min_max_sum(arr) # Output: (-2, 10, 13) ``` Notes - You can use built-in functions to achieve this task. - Pay attention to the efficiency of your solution, as the list can be very large.","solution":"from typing import List, Tuple def min_max_sum(arr: List[int]) -> Tuple[int, int, int]: Returns the minimum value, maximum value, and the sum of all elements in the list. min_val = min(arr) max_val = max(arr) total_sum = sum(arr) return (min_val, max_val, total_sum)"},{"question":"In a certain galaxy, there is a fleet of starships, each with a unique warp-drive signature frequency. The starships often need to communicate with each other by tuning into the same frequency. However, due to cosmic interference, certain pairs of frequencies cannot be used together. You are an engineer responsible for maintaining effective communication among starships. Given a list of the starships\' warp-drive signature frequencies and pairs of frequencies that interfere with each other, your task is to find the maximum number of distinct frequency pairs that can be used for communication without any interference. Input format: The first line contains a single integer T denoting the number of test cases. Each test case proceeds as follows: - The first line contains two integers F and I, where F is the number of distinct warp-drive frequencies and I is the number of interfering pairs. - The next I lines each contain two distinct integers U and V representing a pair of interfering frequencies (1 ≤ U, V ≤ F). Output format: For each test case, output a single integer - the maximum number of distinct frequency pairs that can be used for communication without interference. Constraints: 1 ≤ T ≤ 10 1 ≤ F ≤ 20 0 ≤ I ≤ F * (F - 1) / 2 SAMPLE INPUT 2 4 2 1 2 3 4 3 0 SAMPLE OUTPUT 4 3 Explanation: In the first test case, there are 4 frequencies. The pairs {1,2} and {3,4} interfere. Therefore, the possible pairs without interference are {1,3}, {1,4}, {2,3}, and {2,4}, which total 4 pairs. In the second test case, there are 3 frequencies and no interfering pairs, so all possible pairs {1,2}, {1,3}, {2,3} can be used for communication without any interference, totaling 3 pairs.","solution":"def max_distinct_pairs(T, test_cases): results = [] for t in range(T): F, I, interfering_pairs = test_cases[t] all_pairs = set((min(u, v), max(u, v)) for u in range(1, F+1) for v in range(u+1, F+1)) interference = set(interfering_pairs) valid_pairs = all_pairs - interference results.append(len(valid_pairs)) return results"},{"question":"Given a list of words, find the length of the longest word chain. A word chain is defined as a sequence of words [word_1, word_2, ..., word_k] such that for each word_i, word_(i+1) can be formed by adding exactly one letter to word_i, and that one letter difference allows word_(i+1) to still be a word in the original list. Example 1: Input: [\\"a\\",\\"b\\",\\"ba\\",\\"bca\\",\\"bda\\",\\"bdca\\"] Output: 4 Explanation: The longest word chain is [\\"a\\",\\"ba\\",\\"bda\\",\\"bdca\\"]. Note: The number of words in the given list is at least 1 and won\'t exceed 1000. Each word\'s length is at most 16.","solution":"def longest_str_chain(words): Finds the length of the longest word chain. A word chain is a sequence of words [word_1, word_2, ..., word_k] such that for each word_i, word_(i+1) can be formed by adding exactly one letter to word_i and the resulting word is still in the original list. words.sort(key=len) dp = {} max_chain_length = 1 for word in words: dp[word] = 1 for i in range(len(word)): predecessor = word[:i] + word[i+1:] if predecessor in dp: dp[word] = max(dp[word], dp[predecessor] + 1) max_chain_length = max(max_chain_length, dp[word]) return max_chain_length"},{"question":"A company has a method for encrypting sensitive information. The method involves shifting each letter in a string by a certain number of positions in the alphabet. The shift operation is defined as follows: When encrypting a letter, you replace it with the letter that is a certain number of positions after it in the alphabet. For instance, with a shift of 1, \'a\' would become \'b\', \'b\' would become \'c\', and so on, wrapping around so that \'z\' would turn into \'a\'. For a shift of 3, \'a\' would become \'d\', \'b\' would become \'e\', and so on. Decryption reverses this process using the opposite shift value. Your task is to implement the encryption functionality and decrypt an encrypted message using the given shift value. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains a string s of length n consisting of lowercase English letters only. The third line contains a single integer k (1 ≤ k ≤ 25) — the number of positions to shift. -----Output----- Print two lines. The first line contains the encrypted version of string s using a shift of k. The second line contains the decrypted version of the encrypted string back to its original form. -----Examples----- Input 5 hello 3 Output khoor hello Input 6 zabcde 2 Output bcdefg zabcde -----Note----- In the first example, the string \\"hello\\" is encrypted using a shift of 3. This makes \'h\' become \'k\', \'e\' become \'h\', \'l\' become \'o\', and \'o\' becomes \'r\'. Then, the decrypted version of \\"khoor\\" is \\"hello\\" with a shift of -3. In the second example, the string \\"zabcde\\" is encrypted using a shift of 2. This means \'z\' becomes \'b\', \'a\' becomes \'c\', \'b\' becomes \'d\', \'c\' becomes \'e\', \'d\' becomes \'f\', and \'e\' becomes \'g\'. Then, the decrypted version of \\"bcdefg\\" is \\"zabcde\\" with a shift of -2.","solution":"def encrypt_decrypt_string(n, s, k): def shift_char(c, shift): return chr((ord(c) - 97 + shift) % 26 + 97) encrypted = \'\'.join(shift_char(c, k) for c in s) decrypted = \'\'.join(shift_char(c, -k) for c in encrypted) return encrypted, decrypted"},{"question":"Consider an adventure game where players can gather apples and bananas, and each fruit restores a specific amount of health points (HP). An apple restores 4 HP and a banana restores 5 HP. A player needs to exactly restore y HP. You need to help the player determine if it\'s possible to gather some number of apples and bananas to exactly restore y HP. Formally, you need to find if there exist two non-negative integers p and q such that p apples and q bananas exactly restore y HP. Help the player answer this question for several values of y. -----Input----- The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The i-th of the following t lines contains one integer y_{i} (1 ≤ y_{i} ≤ 100) — the amount of HP the player needs to restore for each test case. -----Output----- Print t lines, in i-th line output YES if the player can restore exactly y_{i} HP. Otherwise, print NO. -----Example----- Input 3 9 8 7 Output YES YES NO -----Note----- In the first example, the player can gather 1 apple and 1 banana. In the second example, the player can gather 2 apples. In the third example, the player cannot gather exactly 7 HP as the combination of any number of apples and bananas will not sum up to 7.","solution":"def can_restore_hp(t, hp_values): results = [] for y in hp_values: found = False for p in range(y // 4 + 1): remaining_hp = y - 4 * p if remaining_hp % 5 == 0: found = True break results.append(\\"YES\\" if found else \\"NO\\") return results"},{"question":"Given a list of integers, find the maximum sum of a contiguous subarray within the list. Write a program to accomplish this. -----Input----- The first line of the input contains an integer n (1 le n le 10^5), the length of the list. The second line contains n space-separated integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9), the elements of the list. -----Output----- Output the maximum sum of a contiguous subarray. -----Examples----- Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 5 -1 -2 -3 -4 -5 Output -1 Input 6 1 2 3 4 -10 10 Output 10 -----Note----- In the first example, the maximum sum of a contiguous subarray is 6, which comes from the subarray [4, -1, 2, 1]. In the second example, the numbers are all negative, so the maximum sum of a contiguous subarray is the least negative number -1. In the third example, the maximum sum of a contiguous subarray is 10, which corresponds to the last single element 10 itself.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray in the given list max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"There is a large cafeteria in which people get their food from different serving stations arranged in a grid. The cafeteria management needs a more efficient way to direct people to available seats after they get their food, in order to reduce congestion and waiting time. You are to write a program that will help with this task by assigning the closest available seat to a person. The cafeteria is represented by a 2D grid of seats, where each cell can either be empty (\'.\'), occupied (\'#\'), or reserved (\'R\'). Seats that are reserved cannot be occupied, but they are taken into account when calculating the distance to the closest available seat. The distance between two cells in the grid is measured using the Manhattan distance, which is defined as the absolute difference in row indexes plus the absolute difference in column indexes. Your task is to find the closest available seat for a person and mark it as occupied (\'#\'). -----Input----- - The first line contains two integers, n and m (1 leq n, m leq 100), representing the number of rows and columns in the grid. - The following n lines each contain a string of m characters representing the seating arrangement in the cafeteria. Each character is either \'.\', \'#\', or \'R\'. - The next line contains two integers p and q (0 leq p < n, 0 leq q < m), representing the row and column index of the location where a person with food enters the seating area. -----Output----- - Print the grid after assigning the closest available seat to the person. If there are multiple seats at the same minimum distance, any of them can be chosen. -----Examples----- Sample Input 1: 4 5 ..... ..... ..#.. R...R 0 2 Sample Output 1: ..#.. ..... ..#.. R...R Sample Input 2: 3 3 R.R .#. .R. 1 1 Sample Output 2: R#R .# .R. Explanation: In the first example, the person enters the seating area at cell (0, 2). The closest available seat is at cell (0, 2), so it is occupied. In the second example, the person enters the seating area at cell (1, 1). The closest available seat is at cell (1, 1), so it is occupied.","solution":"def find_closest_seat(grid, n, m, p, q): from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(p, q, 0)]) # (row, col, distance) visited[p][q] = True while queue: r, c, dist = queue.popleft() if grid[r][c] == \'.\': grid[r][c] = \'#\' return grid for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc]: visited[nr][nc] = True queue.append((nr, nc, dist + 1)) # If no available seat found, return unchanged grid return grid"},{"question":"You are given an integer M and a matrix C of size M times M with distinct integers ranging from 1 to M^2. You need to split the matrix C into K non-empty contiguous submatrices such that each element of C appears in exactly one of them, and your task is to split and concatenate the submatrices to form a new matrix D such that the sum of the elements in the main diagonal of D is as large as possible. ------ Input ------ The first line of the input contains two space-separated integers M and K. The next M lines each contain M space-separated integers representing the matrix C. ------ Output ------ Print the new matrix D in M lines, each containing M space-separated integers. ------ Constraints ------ 2 ≤ M ≤ 50 1 ≤ K ≤ M^2 1 ≤ C_{ij} ≤ M^2 for each valid i, j C_{ij} neq C_{pq} for each valid i, j, p, q (i neq p or j neq q) ------ Scoring ------ Your score for each test case is the sum of the elements in the main diagonal of the matrix D. The goal is to maximise this sum across all test cases. ------ Example Input ------ 3 2 9 2 7 1 5 4 6 3 8 ------ Example Output ------ 1 2 7 6 5 4 9 3 8 ------ Explanation ------ The matrix D = begin{pmatrix} 1 & 2 & 7 6 & 5 & 4 9 & 3 & 8 end{pmatrix} has a diagonal sum of 1 + 5 + 8 = 14. One way to achieve this result is: 1. Split the original matrix C into two submatrices, say S_{1} = left( begin{array}{cc} 9 & 2 & 7 1 & 5 & 4 end{array} right), S_{2} = left( begin{array}{ccc} 6 & 3 & 8 end{array} right) 2. Choose an arbitrary permutation P of the integers 1 through K, say P = (1, 2). 3. Concatenate S_{P_1}, S_{P_2} = S_{1}, S_{2} to form the matrix D.","solution":"def maximize_diagonal_sum(C, M, K): This solution will involve sorting the elements of the matrix based on their values to maximize the diagonal sum. # Extract the diagonal values from the original matrix diagonal_values = [C[i][i] for i in range(M)] # Sort the entire matrix elements in descending order sorted_elements = sorted(sum(C, []), reverse=True) # Create the new matrix D in a way that maximizes the diagonal values D = [] idx = 0 for i in range(M): row = [] for j in range(M): row.append(sorted_elements[idx]) idx += 1 D.append(row) return D # A helper function to print the formatted matrix which can be used in main function output def print_matrix(matrix): for row in matrix: print(\\" \\".join(map(str, row)))"},{"question":"You are working as a software engineer at a company that manages a network of parking lots in a large city. Due to the increasing number of cars, the company wants to ensure efficient utilization of available parking spaces. To achieve this, the company plans to track the occupancy of parking lots in real-time and suggest nearest available spots to drivers based on their current location. Your task is to implement a function that, given the locations of all parking lots and their current occupancies, returns the nearest available parking spot to a given driver’s location using the Euclidean distance. Input The input consists of a single dataset in the following format: > N > x1 y1 occupancy1 > x2 y2 occupancy2 > ... > xN yN occupancyN > xd yd The first line gives a non-negative integer N (1 ≤ N ≤ 100), which represents the number of parking lots. The following N lines each contain three integers: xi, yi (coordinates of the parking lot), and occupancyi (0 if the lot is empty, 1 if it is fully occupied). The last line contains two integers, xd and yd, representing the coordinates of the driver. Output Output the coordinates of the nearest available parking lot to the driver. If there are multiple available parking lots at the same distance, output the one that appears first in the input. If there are no available parking lots, output \\"No available parking lots\\". Sample Input 5 0 0 1 3 4 0 1 1 0 2 2 1 5 6 0 2 3 Sample Output 1 1 Example Input 4 0 0 1 1 1 1 2 2 0 3 3 0 0 0 Output 2 2","solution":"import math def find_nearest_parking_lot(data): lines = data.strip().split(\\"n\\") N = int(lines[0]) parking_lots = [] for i in range(1, N+1): x, y, occupancy = map(int, lines[i].split()) if occupancy == 0: parking_lots.append((x, y)) if not parking_lots: return \\"No available parking lots\\" xd, yd = map(int, lines[N+1].split()) min_distance = float(\'inf\') nearest_lot = None for x, y in parking_lots: distance = math.sqrt((x - xd)**2 + (y - yd)**2) if distance < min_distance: min_distance = distance nearest_lot = (x, y) return f\\"{nearest_lot[0]} {nearest_lot[1]}\\""},{"question":"You are asked to assemble toy cars from interchangeable parts. Each car is made from exactly 4 parts: one body, one engine, one set of wheels, and one battery. You have a stockpile of parts and need to determine how many complete toy cars you can assemble. -----Input----- The input consists of one line with four integers: B (0 leq B leq 100), E (0 leq E leq 100), W (0 leq W leq 100), and BA (0 leq BA leq 100), representing the number of bodies, engines, wheels, and batteries, respectively. -----Output----- Output a single integer, the maximum number of complete toy cars that can be assembled from the given parts. -----Examples----- Sample Input 1: 10 5 8 6 Sample Output 1: 5 Sample Input 2: 3 3 3 3 Sample Output 2: 3","solution":"def max_toy_cars(b, e, w, ba): Returns the maximum number of complete toy cars that can be assembled from the given parts b, e, w, and ba. return min(b, e, w, ba)"},{"question":"You are given a list of integers. Determine whether the list is non-decreasing when split into two contiguous sublists. Input The first line of the input will contain a single integer T, the number of test cases. Then there will be T descriptions of the test cases. Each description starts with an integer N, the number of elements in the list, followed by N integers in the list. Output For each test case, display YES (in a newline) if the given list can be split into two contiguous sublists (neither sublist is empty) such that both sublists are in non-decreasing order. Otherwise, display NO. Constraints 1 ≤ T ≤ 10 2 ≤ N ≤ 10^5 -10^9 ≤ list[i] ≤ 10^9 Sample Input 2 5 1 2 2 3 4 6 4 3 3 2 5 6 Sample Output YES NO Explanation For the 1st test case, the list can be split as [1, 2, 2] and [3, 4], both of which are non-decreasing, hence the answer is YES. For the 2nd test case, it is not possible to split the list into two non-decreasing sublists, hence the answer is NO.","solution":"def can_split_to_non_decreasing_sublists(lst): n = len(lst) if n < 2: return \\"NO\\" for i in range(1, n): left = lst[:i] right = lst[i:] if left == sorted(left) and right == sorted(right): return \\"YES\\" return \\"NO\\" def process_test_cases(test_cases): results = [] for case in test_cases: N, lst = case results.append(can_split_to_non_decreasing_sublists(lst)) return results # Function to read input and output results def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) lst = list(map(int, data[index+1:index+1+N])) test_cases.append((N, lst)) index += N + 1 results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You are given a string containing a sequence of commands that navigate a robot on a grid. The grid starts at position (0, 0), and the robot has four possible movements: `U` (up), `D` (down), `L` (left), and `R` (right). Each command moves the robot one unit in the specified direction. Write a function to determine the robot\'s final position after executing the entire sequence of commands. For example: * For the input string `UUDDLRLR`, the robot will move: - U: (0, 1) - U: (0, 2) - D: (0, 1) - D: (0, 0) - L: (-1, 0) - R: (0, 0) - L: (-1, 0) - R: (0, 0) The final position of the robot is (0, 0). Task Overview Complete the function which accepts a string and calculates the final position of the robot. The function should return a tuple representing the final coordinates `(x, y)` on the grid.","solution":"def final_position(commands): Calculates the final position of the robot after executing the given sequence of commands. Args: commands (str): A string containing the commands U (up), D (down), L (left), and R (right) Returns: tuple: A tuple (x, y) representing the final coordinates on the grid x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y)"},{"question":"You are given an array of integers and a number K. Your task is to write a program that shifts the elements of the array to the left by K positions and outputs the resulting array. The shift operation should be done in a circular manner, meaning elements shifted out from the beginning should appear at the end. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines of input: - The first line contains two integers N (the size of the array) and K (the number of positions to shift). - The second line contains N integers, the elements of the array. -----Output:----- For each test case, output the resulting array after performing the left circular shift by K positions. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 0 ≤ K ≤ 100 - 0 ≤ Array elements ≤ 1000 -----Sample Input:----- 2 5 2 1 2 3 4 5 4 3 10 20 30 40 -----Sample Output:----- 3 4 5 1 2 40 10 20 30 -----EXPLANATION:----- In the first test case, shifting the array [1, 2, 3, 4, 5] by 2 positions to the left results in the array [3, 4, 5, 1, 2]. In the second test case, shifting the array [10, 20, 30, 40] by 3 positions to the left results in the array [40, 10, 20, 30].","solution":"def left_circular_shift(arr, k): Performs a circular left shift of the array by k positions. Parameters: arr (list): List of integers to be shifted. k (int): The number of positions to shift. Returns: list: The shifted list. n = len(arr) k = k % n # To handle cases where k >= n return arr[k:] + arr[:k] def process_test_cases(test_cases): Processes multiple test cases for left circular shift. Parameters: test_cases (list): List of tuples where each tuple consists of (N, K, arr) Returns: list of list: Each list is the result after left circular shift of the corresponding input list. results = [] for n, k, arr in test_cases: results.append(left_circular_shift(arr, k)) return results"},{"question":"Given an array of integers, return an array where each element at index `i` is the product of all the numbers in the original array except the one at `i`. Example 1: Input: arr = [1, 2, 3, 4] Output: [24, 12, 8, 6] Example 2: Input: arr = [5, 3, 4, 2] Output: [24, 40, 30, 60] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `product_except_self()` which takes the array `arr` as an argument and returns the resultant array. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). (Output array does not count as extra space for space complexity analysis) Constraints: 1 ≤ length of the array ≤ 20 1 ≤ elements of the array ≤ 100","solution":"def product_except_self(arr): Returns an array where each element is the product of all elements in \'arr\' except the one at its index. n = len(arr) result = [1] * n left_product = 1 for i in range(n): result[i] = left_product left_product *= arr[i] right_product = 1 for i in reversed(range(n)): result[i] *= right_product right_product *= arr[i] return result"},{"question":"Write a program to check if a given number is a \\"special number\\". A number is considered special if it is composed entirely of the digits 4 and 7. For example, the number 474 is special, but 475 is not (because it contains a digit other than 4 and 7). Your task is to complete the function isSpecialNumber which returns 1 if the given number is special, otherwise returns 0. The function takes the number as the only argument in the form of a string. Example 1: Input: number = \\"4774\\" Output: 1 Explanation: The number 4774 contains only the digits 4 and 7, hence it is special. Example 2: Input: number = \\"123\\" Output: 0 Explanation: The number 123 contains digits other than 4 and 7, so it is not special. Your Task: Complete the function isSpecialNumber() which takes the number in the form of a string as an input parameter and returns 1 if it is a special number, otherwise returns 0. Expected Time Complexity: O(N), where N is the length of the string. Expected Auxiliary Space: O(1) Constraints: 1 <= length of string <= 50 Note: The Input/Output format and Example given are used for the system\'s internal purpose, and should be used by a user for Expected Output only. As this is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def isSpecialNumber(number: str) -> int: Checks if the given number is a special number. A number is considered special if it is composed entirely of the digits 4 and 7. for digit in number: if digit not in {\'4\', \'7\'}: return 0 return 1"},{"question":"You are given a list of integers and your task is to form a new list which will be strictly increasing. The new list should be formed by removing the smallest possible number of elements from the original list. ------ Input ------ The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N - the size of the list. The second line contains N space-separated integers denoting the elements of the list. ------ Output ------ For each test case, print one line. The line should contain the elements of the new list separated by a space, such that the new list is strictly increasing. If there are multiple solutions, you may output any one. ------ Constraints ------ - 1 leq T leq 100 - 1 leq N leq 100 - 1 leq Each integer in the list leq 10^9 ----- Sample Input 1 ------ 2 6 5 1 2 9 2 3 4 4 3 2 1 ----- Sample Output 1 ------ 1 2 9 4 ----- explanation 1 ------ In the first test case, by removing the elements 5 and 2, we can form a strictly increasing list 1, 2, 9. Other possible answers include removing elements 1 and 2 to form list 5, 9. In the second test case, it is only possible to keep the first element to form the increasing list 4.","solution":"def longest_increasing_subsequence(arr): if not arr: return [] n = len(arr) dp = [1] * n prev = [-1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev[i] = j max_length = max(dp) index = dp.index(max_length) lis = [] while index != -1: lis.append(arr[index]) index = prev[index] return lis[::-1] def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] lis = longest_increasing_subsequence(arr) results.append(\' \'.join(map(str, lis))) return results def input_output_handling(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) arr = list(map(int, input_lines[index + 1].split())) test_cases.append((N, arr)) index += 2 return T, test_cases def main(input_data): T, test_cases = input_output_handling(input_data) results = process_test_cases(T, test_cases) return \\"n\\".join(results)"},{"question":"You are given an array of integers a_1, a_2, ldots, a_n and an integer m. You can perform the following operation on the array: Choose any two indices 1 le i < j le n and swap a_i and a_j if the difference between a_j and a_i is less than or equal to m. Determine if it is possible to sort the array in non-decreasing order using the allowed operations. ----- Input ----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Descriptions of test cases follow. The first line of each test case contains two integers n (1 le n le 100) — the size of the array, and m (0 le m le 100). The second line of each test case contains n integers a_1, a_2, ldots, a_n (-100 le a_i le 100). ----- Output ----- For each test case, print \\"YES\\" (without quotes) if it is possible to sort the array in non-decreasing order using the allowed operations. Print \\"NO\\" (without quotes) otherwise. You can print each letter in any case (upper or lower). ----- Examples ----- Input 3 4 2 3 1 4 2 5 0 5 4 3 2 1 3 1 1 3 2 Output YES NO YES ----- Note ----- In the first test case, we can make the following swaps: Swap a_1 and a_3, the array becomes [4, 1, 3, 2]. Swap a_3 and a_4, the array becomes [4, 1, 2, 3]. Swap a_1 and a_2, the array becomes [1, 4, 2, 3]. Swap a_2 and a_4, the array becomes [1, 2, 4, 3]. Finally swap a_3 and a_4, the array becomes [1, 2, 3, 4]. In the second test case, we cannot perform any swaps. In the third test case, we can swap a_2 and a_3 since |3 - 2| le 1, resulting in the array [1, 2, 3].","solution":"def is_sortable_with_swaps(test_cases): results = [] for n, m, a in test_cases: sorted_array = sorted(a) for i in range(len(a)): if abs(sorted_array[i] - a[i]) > m: interval = m + 1 if a[i] not in sorted_array[max(0, i - interval):min(n, i + interval)]: results.append(\\"NO\\") break else: results.append(\\"YES\\") return results"},{"question":"-----Task----- Given a binary tree, implement an algorithm to find the length of the longest path in terms of number of nodes between any two nodes in the tree. The path may or may not pass through the root. Your function should compute this length efficiently. -----Input----- The input consists of a binary tree, where each node has an integer value. A binary tree is represented in level-order traversal, where -1 represents a null node. -----Output----- Output a single integer, the number of nodes in the longest path. -----Examples----- Example 1: Input: 1 2 3 4 -1 5 -1 -1 -1 -1 -1 Output: 5 Explanation: The binary tree is: 1 / 2 3 / / 4 5 The longest path is from node 4 to node 5, which passes through nodes 4, 2, 1, 3, 5. The length of this path is 5. Example 2: Input: 1 2 -1 -1 -1 Output: 2 Explanation: The binary tree is: 1 / 2 The longest path is from node 2 to node 1. The length of this path is 2.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def deserialize(data): if not data or data[0] == -1: return None nodes = [TreeNode(val) if val != -1 else None for val in data] root = nodes[0] kids = nodes[1:] queue = [root] index = 0 while queue: node = queue.pop(0) if node: if index < len(kids): left = kids[index] node.left = left queue.append(left) index += 1 if index < len(kids): right = kids[index] node.right = right queue.append(right) index += 1 return root def longest_path_length(root): def dfs(node): if not node: return 0, 0 # height, diameter left_height, left_diameter = dfs(node.left) right_height, right_diameter = dfs(node.right) current_height = 1 + max(left_height, right_height) diameter_through_node = 1 + left_height + right_height current_diameter = max(diameter_through_node, left_diameter, right_diameter) return current_height, current_diameter height, diameter = dfs(root) return diameter def longest_path_length_from_list(data): root = deserialize(data) return longest_path_length(root)"},{"question":"You are given a positive integer `n`. Your task is to construct the smallest possible number by rearranging the digits of `n`. When generating the smallest possible number, ensure the following: - The number should not contain any leading zeros, except for the number `0` itself. ----- Input ----- A single line containing an integer `n` (0 ≤ n ≤ 10^18). ----- Output ----- Output the smallest possible number that can be formed by rearranging the digits of `n`. ----- Example ----- Input 3102 Output 1023 Input 4001 Output 1004 Input 0 Output 0 Note: To achieve the smallest possible number by rearranging its digits, move the smallest non-zero digit to the front, followed by the rest of the digits in ascending order.","solution":"def smallest_number(n): Returns the smallest possible number by rearranging the digits of n. Parameters: n (int): The input positive integer. Returns: int: The smallest possible number. if n == 0: return 0 digits = sorted(str(n)) # Find the first non-zero digit for i, digit in enumerate(digits): if digit != \'0\': # Move the first non-zero digit to the front digits[0], digits[i] = digits[i], digits[0] break return int(\\"\\".join(digits))"},{"question":"John is planning to organize his bookshelf. He owns a combination of two types of books - novels and comics. However, he wants to arrange them in such a way that no two novels are next to each other, ensuring comics separate all novels. Help John find out the minimum number of comics he needs to achieve this arrangement. Input Format The first line contains the number of test cases T. Next T lines contain an integer N which represents the number of novels John has. Output Format Print the minimum number of comics needed in each test case. Constraints 1 ≤ T ≤ 1000 0 < N < 10^6 SAMPLE INPUT 2 1 4 SAMPLE OUTPUT 0 3 Explanation Case 1: When there is only 1 novel, he doesn\'t need any comics because there\'s no other novel to be separated from. Case 2: When there are 4 novels, he needs at least 3 comics to separate them (novel-comic-novel-comic-novel-comic-novel).","solution":"def min_comics_needed(novels): Given the number of novels, returns the minimum number of comics needed to ensure no two novels are adjacent. if novels <= 1: return 0 return novels - 1 def process_input_cases(cases): Process multiple test cases of novels count. results = [] for novels in cases: results.append(min_comics_needed(novels)) return results"},{"question":"In a computer game, characters can move in four directions: left, right, up, and down. Your task is to determine whether a given sequence of moves will bring the character back to the original starting position. A character starts at the origin point (0, 0) on a 2D plane. The movements are represented by a string containing the characters \'L\', \'R\', \'U\', and \'D\'. * \'L\' means moving one step to the left. * \'R\' means moving one step to the right. * \'U\' means moving one step up. * \'D\' means moving one step down. -----Task----- Given a string of movements, determine if the character returns to the original starting position after performing all the moves. -----Input----- The input contains one line with a string of movements s (1 leq |s| leq 10^6). The string is non-empty and consists solely of the characters \'L\', \'R\', \'U\', and \'D\'. -----Output----- Output one line with \\"YES\\" if the character returns to the original starting position, otherwise output \\"NO\\". -----Examples----- Sample Input: LR Sample Output: YES Sample Input: UDLR Sample Output: YES Sample Input: LRU Sample Output: NO","solution":"def is_back_to_origin(s): Determines if the sequence of moves returns to the original starting position. Parameters: s (str): The sequence of movements. Returns: str: \\"YES\\" if the character returns to the starting point, \\"NO\\" otherwise. x, y = 0, 0 for move in s: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"Write a function to calculate the scalar or dot product of two vectors. The function should: + Accept two arrays of integers as parameters, representing the vectors. + Return the scalar product of the two arrays. **Note:** The two vectors will always have the same length. Example ``` [1, 3, -5], [4, -2, -1] --> 3 Explanation: (1*4) + (3*-2) + (-5*-1) = 4 - 6 + 5 = 3","solution":"def scalar_product(vector1, vector2): Returns the scalar (dot) product of two vectors. return sum(x * y for x, y in zip(vector1, vector2))"},{"question":"# Task You are given a string `s`, representing a sequence of parentheses. The task is to determine the minimum number of parentheses to remove in order to make the string valid. A string of parentheses is considered valid if every open parenthesis \'(\' has a corresponding closing parenthesis \')\' and they are properly nested. Write a function that takes in a string `s` and returns the minimum number of parentheses that need to be removed to make the string valid. # Example For `s = \\"())()\\"`, the output should be `1`. ``` Initial string: \\"())()\\" To make it valid, remove one \')\': \\"()()\\" ``` For `s = \\"(((\\"`, the output should be `3`. ``` Initial string: \\"(((\\" To make it valid, remove all three \'(\': \\"\\" ``` # Input/Output - `[input]` string `s` The initial string containing only parentheses characters `(` and `)`. Constraints: `0 <= s.length <= 1000` - `[output]` an integer The minimum number of parentheses to remove to make the string valid.","solution":"def min_remove_to_make_valid(s): Returns the minimum number of parentheses to remove to make the string valid open_count = 0 remove_count = 0 for char in s: if char == \'(\': open_count += 1 elif char == \')\': if open_count > 0: open_count -= 1 else: remove_count += 1 return remove_count + open_count"},{"question":"Problem statement You are given a string containing only lowercase alphabets. You need to find the minimum number of characters that must be deleted from the string so that the remaining string contains no two consecutive characters that are the same. Constraints: * The length of the string is between 1 and 100, inclusive. Input: The input consists of a single string s . Output: Output an integer representing the minimum number of characters that need to be deleted. Examples: Input: ``` aabbcc ``` Output: ``` 3 ``` Input: ``` abcd ``` Output: ``` 0 ``` Input: ``` aaaa ``` Output: ``` 3 ```","solution":"def min_deletions_to_avoid_consecutive_repeats(s): Returns the minimum number of deletions required so that no two consecutive characters are the same. deletions = 0 # Loop through the string and count deletions for consecutive duplicates for i in range(1, len(s)): if s[i] == s[i - 1]: deletions += 1 return deletions"},{"question":"Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0. Example 1: Input: nums = [2,1,2] Output: 5 Example 2: Input: nums = [1,2,1] Output: 0 Example 3: Input: nums = [3,2,3,4] Output: 10 Example 4: Input: nums = [3,6,2,3] Output: 8 Note: - 3 <= nums.length <= 10^4 - 1 <= nums[i] <= 10^6","solution":"def largest_perimeter(nums): Given an integer array nums, returns the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, returns 0. nums.sort(reverse=True) for i in range(len(nums) - 2): if nums[i] < nums[i + 1] + nums[i + 2]: return nums[i] + nums[i + 1] + nums[i + 2] return 0"},{"question":"A library keeps a record of the number of times each book has been borrowed. Write a program that identifies and prints the names of the three books that have been borrowed the most. Constraints 0 ≤ number of times borrowed (integer) ≤ 10,000 There can be multiple books with the same count of borrowings. Input - The first line contains the name of the book 1 followed by a space and the number of times it has been borrowed. - The second line contains the name of the book 2 followed by a space and the number of times it has been borrowed. - Similarly, input is provided for a total of 10 books. Output - Print the names of the three books that have been borrowed the most, each on a new line. - If there is a tie in borrow count, any order of the tied books is acceptable in the output. Example Input HarryPotter 150 LordOfTheRings 200 Hobbit 195 GameOfThrones 120 Narnia 110 Twilight 185 SherlockHolmes 175 PercyJackson 195 HungerGames 165 MazeRunner 180 Output LordOfTheRings Hobbit PercyJackson Input BookA 500 BookB 480 BookC 470 BookD 460 BookE 450 BookF 440 BookG 430 BookH 420 BookI 410 BookJ 400 Output BookA BookB BookC","solution":"def most_borrowed_books(book_records): Given a list of book records, return the names of the three books that have been borrowed the most. :param book_records: List of tuples where each tuple contains book name and the number of times borrowed. :return: List of names of the three most borrowed books. # Sort the book records based on the number of times borrowed in descending order sorted_books = sorted(book_records, key=lambda x: x[1], reverse=True) # Extract the names of the top three books top_three_books = [book[0] for book in sorted_books[:3]] return top_three_books # Example usage book_records = [ (\\"HarryPotter\\", 150), (\\"LordOfTheRings\\", 200), (\\"Hobbit\\", 195), (\\"GameOfThrones\\", 120), (\\"Narnia\\", 110), (\\"Twilight\\", 185), (\\"SherlockHolmes\\", 175), (\\"PercyJackson\\", 195), (\\"HungerGames\\", 165), (\\"MazeRunner\\", 180) ] print(most_borrowed_books(book_records))"},{"question":"Dev needs to sort a special list of integers. The list is considered special because it contains integers that are either entirely even or entirely odd. Your job is to implement a function that takes a list of integers and returns a sorted list. The integers should be sorted in ascending order if they are even, and in descending order if they are odd. Example 1: Input: arr = [24, 18, 15, 32, 11, 8] Output: [8, 18, 24, 32, 15, 11] Explanation: The even numbers [24, 18, 32, 8] are sorted in ascending order: [8, 18, 24, 32] The odd numbers [15, 11] are sorted in descending order: [15, 11] So the final sorted list is: [8, 18, 24, 32, 15, 11] Example 2: Input: arr = [7, 5, 9] Output: [9, 7, 5] Explanation: There are only odd numbers, and they are sorted in descending order: [9, 7, 5] Your Task: You don\'t need to read input or print anything. Your task is to complete the function specialSort() which takes a list of integers `arr` as input and returns the sorted list as described above. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 <= len(arr) <= 100 -10^3 <= arr[i] <= 10^3","solution":"def specialSort(arr): Function to sort a list of integers where even numbers are sorted in ascending order and odd numbers are sorted in descending order. :param arr: List of integers :return: List of integers sorted as per the conditions # Separating even and odd numbers even_nums = [num for num in arr if num % 2 == 0] odd_nums = [num for num in arr if num % 2 != 0] # Sorting even in ascending and odd in descending even_nums.sort() odd_nums.sort(reverse=True) # Combining the result return even_nums + odd_nums"},{"question":"Given a list of integers, return a new list that contains the elements of the original list arranged in ascending order up to the first occurrence of -1, followed by the remaining elements in their original positions. If -1 is not in the list, simply return the whole list sorted in ascending order. For example: ```python arrange_until_minus_one([3, 1, 2, 4, -1, 5, 7, 6]) == [1, 2, 3, 4, -1, 5, 7, 6] arrange_until_minus_one([5, 3, 9, 4, 1]) == [1, 3, 4, 5, 9] arrange_until_minus_one([7, 6, -1, 5]) == [6, 7, -1, 5] arrange_until_minus_one([-1, 4, 3, 2, 1]) == [-1, 4, 3, 2, 1] arrange_until_minus_one([]) == [] ``` Explanation: - For the list `[3, 1, 2, 4, -1, 5, 7, 6]`, we sort `[3, 1, 2, 4]` which results in `[1, 2, 3, 4]`. - For the list `[5, 3, 9, 4, 1]`, we sort the entire list as there is no `-1`. - For the list `[7, 6, -1, 5]`, we sort `[7, 6]` which results in `[6, 7]`. - For the list `[-1, 4, 3, 2, 1]`, since `-1` is the first element, the resulting list remains unchanged. - An empty list should return an empty list.","solution":"def arrange_until_minus_one(lst): Returns a new list that contains the elements of the original list arranged in ascending order up to the first occurrence of -1. The elements after the first occurrence of -1 remain in their original positions. if -1 in lst: pos = lst.index(-1) return sorted(lst[:pos]) + lst[pos:] else: return sorted(lst)"},{"question":"Given a list of integers, write a function to determine the maximum product of two distinct numbers from the list. If the list has fewer than two elements, return 0. # Function Signature ```python def max_product(lst: List[int]) -> int: pass ``` # Input - A single list of integers `lst` containing N elements. # Output - An integer representing the maximum product of two distinct numbers from the list. If the list has fewer than two elements, return 0. # Constraints - 0 <= N <= 10^4 - -10^4 <= lst[i] <= 10^4 # Example Example 1 ```python lst = [1, 20, 5, 8] max_product(lst) ``` **Output:** ``` 160 ``` **Explanation:** The maximum product can be obtained by multiplying 20 and 8 which equals 160. Example 2 ```python lst = [-1, -3, -4, 2, 0] max_product(lst) ``` **Output:** ``` 12 ``` **Explanation:** The maximum product can be obtained by multiplying -3 and -4 which equals 12. Example 3 ```python lst = [3] max_product(lst) ``` **Output:** ``` 0 ``` **Explanation:** The list has fewer than 2 elements, so the function returns 0.","solution":"from typing import List def max_product(lst: List[int]) -> int: if len(lst) < 2: return 0 # Initialize the two largest and two smallest values max1, max2 = float(\'-inf\'), float(\'-inf\') min1, min2 = float(\'inf\'), float(\'inf\') for num in lst: # Update the two largest values if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num # Update the two smallest values if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"Harsh is fascinated by the Fibonacci sequence and wonders about the sum of the first N numbers in the Fibonacci series. As an eager programmer, you’ve been asked to write a program for Harsh that will calculate this sum. The program should be efficient because Harsh might want to compute this for large values of N. Note: Only Python language is allowed. Input Format The first line consists of the number of test cases T. Each of the following T lines thereafter comprises one integer N. Output Format For each of the T lines, print an integer representing the sum of the first N Fibonacci numbers. Constraints 1 ≤ T ≤ 10^6 1 ≤ N ≤ 10^5 SAMPLE INPUT 2 5 10 SAMPLE OUTPUT 12 143 Explanation For N=5, the Fibonacci sequence is 0, 1, 1, 2, 3 and the sum of the first 5 numbers is 0+1+1+2+3=7. For N=10, the Fibonacci sequence is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and the sum of the first 10 numbers is 0+1+1+2+3+5+8+13+21+34=88.","solution":"def fibonacci_sum(n): Calculates the sum of the first N Fibonacci numbers. if n == 0: return 0 if n == 1: return 0 if n == 2: return 1 fib = [0, 1] sum_fib = 1 for i in range(2, n): next_fib = fib[-1] + fib[-2] sum_fib += next_fib fib.append(next_fib) return sum_fib def process_test_cases(test_cases): results = [] for n in test_cases: results.append(fibonacci_sum(n)) return results"},{"question":"A software company is organizing a coding challenge where participants must solve a series of unique programming tasks. One task requires participants to analyze a sequence of numbers and answer queries about the largest contiguous subarray product within a specified range. You are given an array of positive integers and a series of queries. Each query specifies a subarray and asks for the maximum product of all possible contiguous subarrays within that specified range. Write a program to solve this problem. Input: The first line of input contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^4) representing the number of elements in the array and the number of queries respectively. The second line contains n positive integers separated by spaces representing the elements of the array. The next q lines each contain two integers l and r (1 ≤ l ≤ r ≤ n) representing the range for the query (1-based index). Output: For each query, output the maximum product of all possible contiguous subarrays within the specified range in a separate line. Examples: Input: 5 3 1 3 2 4 5 1 3 2 4 1 5 Output: 6 24 120 Explanation: For the first query (1, 3), the subarrays are [1], [3], [2], [1, 3], [3, 2], [1, 3, 2]. The maximum product is 6 (from subarray [2, 3]). For the second query (2, 4), the subarrays are [3], [2], [4], [3, 2], [2, 4], [3, 2, 4]. The maximum product is 24 (from subarray [2, 3, 4]). For the third query (1, 5), the subarrays are [1], [3], [2], [4], [5], [1, 3], [3, 2], [2, 4], [4, 5], [1, 3, 2], [3, 2, 4], [2, 4, 5], [1, 3, 2, 4], [3, 2, 4, 5], [1, 3, 2, 4, 5]. The maximum product is 120 (from the whole array [1, 3, 2, 4, 5]).","solution":"def max_product_subarray_in_range(arr, queries): def max_product_subarray(arr): max_prod = float(\'-inf\') min_prod = 1 current_prod = 1 for num in arr: if num == 0: current_prod = 1 min_prod = 1 max_prod = max(max_prod, 0) continue temp = current_prod * num current_prod = max(num, temp, min_prod * num) min_prod = min(num, temp, min_prod * num) max_prod = max(max_prod, current_prod) return max_prod results = [] for l, r in queries: subarray = arr[l-1:r] results.append(max_product_subarray(subarray)) return results"},{"question":"In an ancient forest, there are magical trees arranged in a rectangular grid of size N x M. Each tree is of a certain height represented by an integer. A forest ranger needs to calculate the difference between the height of the tallest tree and the shortest tree in multiple rectangular subregions of the forest to give the druids in the forest timely updates. Given a grid of tree heights and Q queries, each query contains four integers X1, Y1, X2, and Y2. The integers represent the top-left and bottom-right corners of a subregion of the grid. The ranger needs your help to find the height difference between the tallest and the shortest trees in the subregion for each query as quickly as possible. -----Input:----- - First line will contain a single integer T, the number of test cases. Then the test cases follow. - Each test case begins with two integers N and M, which represent the dimensions of the grid. - The next N lines each contain M integers representing the heights of the trees in the grid. - After this, a single integer Q follows, the number of queries. - Each of the next Q lines contains four integers X1, Y1, X2, and Y2, which represent the coordinates of the top-left and bottom-right corners of the subregion for that query. -----Output:----- For each query, print a single integer that represents the difference between the height of the tallest and the shortest trees in the specified subregion. Print the output for each test case - one query per line. -----Constraints:----- - 1 ≤ T ≤ 10 - 1 ≤ N, M ≤ 1000 - 0 ≤ height of trees ≤ 10000 - 1 ≤ Q ≤ 10000 - 1 ≤ X1 ≤ X2 ≤ N - 1 ≤ Y1 ≤ Y2 ≤ M -----Sample Input:----- 1 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 1 1 3 3 -----Sample Output:----- 4 8 -----EXPLANATION:----- Query 1: The subregion defined by (1,1) to (2,2) has tree heights: 1 2 4 5 The tallest tree height is 5 and the shortest tree height is 1, so the difference is 4. Query 2: The subregion defined by (1,1) to (3,3) has tree heights: 1 2 3 4 5 6 7 8 9 The tallest tree height is 9 and the shortest tree height is 1, so the difference is 8.","solution":"def process_queries(T, test_cases): results = [] def calculate_difference(grid, x1, y1, x2, y2): min_height = float(\'inf\') max_height = float(\'-inf\') for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): min_height = min(min_height, grid[i][j]) max_height = max(max_height, grid[i][j]) return max_height - min_height index = 0 for _ in range(T): N, M = test_cases[index] index += 1 grid = test_cases[index:index + N] index += N Q = test_cases[index][0] index += 1 queries = test_cases[index:index + Q] index += Q for query in queries: X1, Y1, X2, Y2 = query result = calculate_difference(grid, X1, Y1, X2, Y2) results.append(result) return results # Helper function to reformat input into a more structured format def parse_input(raw_input): data = list(map(int, raw_input.split())) T = data[0] index = 1 test_cases = [] for _ in range(T): N, M = data[index], data[index + 1] index += 2 grid = [data[index + i:index + i + M] for i in range(0, N * M, M)] index += N * M Q = data[index] index += 1 queries = [data[index + i:index + i + 4] for i in range(0, Q * 4, 4)] index += Q * 4 test_cases.append((N, M)) test_cases.extend(grid) test_cases.append((Q,)) test_cases.extend(queries) return T, test_cases"},{"question":"Given an array `arr` of integers and an integer `target`, return the length of the shortest subarray whose sum is greater than or equal to `target`. If there is no such subarray, return 0 instead. # Examples: **Example 1:** ``` Input: arr = [2, 3, 1, 2, 4, 3], target = 7 Output: 2 Explanation: The subarray [4, 3] has the minimal length under the problem constraint. ``` **Example 2:** ``` Input: arr = [1, 4, 4], target = 4 Output: 1 Explanation: The subarray [4] has the minimal length under the problem constraint. ``` **Example 3:** ``` Input: arr = [1, 1, 1, 1, 1, 1, 1, 1], target = 11 Output: 0 Explanation: There is no subarray with sum >= 11. ``` # Constraints: - 1 <= `arr.length` <= 10000 - 1 <= `arr[i]` <= 10000 - 1 <= `target` <= 10000","solution":"def min_subarray_len(arr, target): Returns the length of the shortest subarray whose sum is greater than or equal to target. If there is no such subarray, return 0. n = len(arr) left = 0 total = 0 min_length = float(\'inf\') for right in range(n): total += arr[right] while total >= target: min_length = min(min_length, right - left + 1) total -= arr[left] left += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"Monocarp loves number sequences and now he has a sequence transformation challenge for you. Given a sequence of n integers, he wants to transform it to match another provided sequence of n integers using a series of specific operations. In each operation, Monocarp can choose any two contiguous elements of the sequence and swap them. Your task is to determine if it\'s possible to transform the initial sequence to match the target sequence using any number of the allowed operations. -----Input----- The first line contains one integer n (1 le n le 1,000) — the length of the sequences. The second line contains n integers a_1, a_2, ..., a_n — the initial sequence. The third line contains n integers b_1, b_2, ..., b_n — the target sequence. -----Output----- Print \\"YES\\" (without quotes) if it\'s possible to transform the initial sequence into the target sequence using any number of the allowed operations. Otherwise, print \\"NO\\" (without quotes). -----Examples----- Input 5 1 3 5 7 9 9 7 5 3 1 Output YES Input 6 1 2 3 4 5 6 6 5 4 3 2 1 Output YES Input 4 1 2 3 4 4 3 2 1 Output YES Input 3 1 2 1 2 1 2 Output NO -----Note----- For the first example, you can swap the first and second elements, the second and third elements, and so on to reverse the entire sequence. For the third example, any permutation of the sequence is possible, including reversing the order. For the fourth example, it is impossible to transform the initial sequence to match the target sequence due to the mismatch in the required elements.","solution":"def can_transform(n, a, b): Determines if it\'s possible to transform sequence a into sequence b using the allowed operations. # To transform a into b, both sequences should have the same sorted elements. return sorted(a) == sorted(b)"},{"question":"You have a rectangular garden grid, represented as a 2D matrix of size MxN, filled with different types of plants. Each cell in the grid contains a single plant, identified by a positive integer. Due to the recent heavy rains, the garden has become overgrown with weeds and you want to clear them out to maximize the beauty (sum of plant values) of a contiguous rectangular sub-grid. You need to find the maximum possible sum of any rectangular sub-grid in the garden. -----Input----- The first line contains two integers M and N (1 ≤ M, N ≤ 10^3), the number of rows and columns in the garden grid. Each of the next M lines contains N integers, each representing the value of the plant in that cell (−10^4 ≤ plant value ≤ 10^4). -----Output----- Print the maximum sum of any rectangular sub-grid in the garden. -----Examples----- Input 4 5 1 -2 0 3 -1 4 5 -6 -7 8 -1 2 3 -4 5 2 3 -2 1 -3 Output 15 Input 3 3 -1 -2 -3 -4 -5 -6 -7 -8 -9 Output -1 -----Note----- In the first example, the sub-grid with the maximum sum is the top-left 2x2 grid: 1 -2 4 5 The total sum is 1 + (-2) + 4 + 5 = 8. However, a better sub-grid would be 3x1 in the second and third column: 3 -1 -7 8 3 -4 The total sum is 3 + (-1) + 8 + 3 + (-4) = 9. In the second example, the sub-grid with the maximum sum is any single cell containing the value -1, which is the least negative number in the grid.","solution":"def max_sum_subgrid(matrix): Returns the maximum possible sum of any rectangular sub-grid in the garden. if not matrix or not matrix[0]: return 0 M = len(matrix) N = len(matrix[0]) max_sum = float(\'-inf\') # Iterate over all pairs of columns for left in range(N): # Initialize the row sum array temp = [0] * M for right in range(left, N): for i in range(M): temp[i] += matrix[i][right] # Now we need to find the maximum subarray sum for `temp` current_max = float(\'-inf\') max_ending_here = 0 for val in temp: max_ending_here += val if max_ending_here > current_max: current_max = max_ending_here if max_ending_here < 0: max_ending_here = 0 if current_max > max_sum: max_sum = current_max return max_sum"},{"question":"Anna and Bob are participating in a treasure hunt. They have a map that guides them through n locations, each marked with the amount of gold coins that can be collected there. Anna and Bob take turns to pick locations, starting from the beginning of the map. Anna always picks the first location, followed by Bob picking the next location, then Anna for the subsequent one, and so on until all locations are picked. If Anna and Bob pick locations optimally to maximize their total coins, determine the total coins each player collects. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the number of locations on the map. The second line contains n integers separated by spaces, representing the gold coins in each location, where the i-th integer is the number of coins at the i-th location (0 ≤ coins ≤ 100). -----Output----- Print two integers, the total number of coins collected by Anna and Bob respectively. -----Example----- Input 6 3 1 4 5 9 2 Output 16 8 Input 5 10 20 30 40 50 Output 90 60","solution":"def treasure_hunt(n, coins): Calculate the total gold coins collected by Anna and Bob. Parameters: n (int): The number of locations on the map. coins (list of int): The gold coins at each location. Returns: tuple: Two integers representing the total gold collected by Anna and Bob respectively. anna_coins = 0 bob_coins = 0 for i in range(n): if i % 2 == 0: anna_coins += coins[i] else: bob_coins += coins[i] return anna_coins, bob_coins"},{"question":"A large company has an employee management system where each employee is represented as a node in a tree structure. The CEO is the root node and every other employee reports to exactly one other employee, forming a hierarchical tree. The company\'s management system needs a function to efficiently handle dynamic updates and queries about the employees. Problem: Your task is to implement a system to manage and query employee data. The system should support the following operations: 1. Adding a new employee under a given manager. 2. Removing an existing employee. 3. Querying the total number of employees under a specified employee (including themselves). Operations: 1. add u v - Adds employee u under manager v. 2. remove u - Removes employee u and reassigns all employees under u to u\'s manager. 3. count u - Returns the number of employees under the employee u (including u). INPUT The first line contains an integer Q denoting the number of operations. Each of the following Q lines describes one operation in one of the following formats: - \\"add u v\\": Adds employee u under manager v. - \\"remove u\\": Removes employee u. - \\"count u\\": Returns the number of employees under employee u. OUTPUT For each \\"count\\" operation, print the result on a new line. CONSTRAINTS 1 ≤ Q ≤ 10^5 1 ≤ u, v ≤ 10^5 All initial employees have IDs from 1 to Q. Initial CEO has employee ID 1. NOTE: - It is guaranteed that no \\"remove\\" operation will attempt to remove the CEO (employee 1). - New employees will have the next available integer ID after the initial employees. - Queries need to be executed efficiently within the constraints. SAMPLE INPUT 6 add 2 1 add 3 1 add 4 2 count 1 remove 2 count 1 SAMPLE OUTPUT 4 3 Explanation - After \\"add 2 1\\" and \\"add 3 1\\", employees 2 and 3 are under the CEO (1). - After \\"add 4 2\\", employee 4 is under employee 2. - \\"count 1\\" returns 4, as there are 4 employees under the CEO (1, 2, 3, 4). - After \\"remove 2\\", employee 4 is reassigned to the CEO. - \\"count 1\\" returns 3, since employees 1, 3, and 4 remain under the CEO.","solution":"class EmployeeManagement: def __init__(self): self.parent = {1: None} self.children = {1: set()} self.sub_count_cache = {} def add(self, u, v): self.parent[u] = v if v not in self.children: self.children[v] = set() self.children[v].add(u) self.children[u] = set() self._invalidate_count_cache(v) def remove(self, u): parent_u = self.parent[u] for child in self.children[u]: self.parent[child] = parent_u self.children[parent_u].add(child) self.children[parent_u].discard(u) del self.parent[u] self._invalidate_count_cache(parent_u) def count(self, u): if u in self.sub_count_cache: return self.sub_count_cache[u] total_count = 1 for child in self.children[u]: total_count += self.count(child) self.sub_count_cache[u] = total_count return total_count def _invalidate_count_cache(self, u): while u and u in self.sub_count_cache: del self.sub_count_cache[u] u = self.parent[u] def manage_employees(Q, operations): em = EmployeeManagement() results = [] for op in operations: parts = op.split() cmd, u = parts[0], int(parts[1]) if cmd == \'add\': v = int(parts[2]) em.add(u, v) elif cmd == \'remove\': em.remove(u) elif cmd == \'count\': results.append(em.count(u)) return results"},{"question":"You are given a string `S` representing a mathematical expression consisting of addition \'+\', subtraction \'-\', multiplication \'*\', and division \'/\' operators, as well as integer operands. You need to evaluate the expression and return the result as an integer. Division should truncate toward zero. Example 1: Input: S = \\"3+2*2\\" Output: 7 Explanation: 3 + (2 * 2) = 3 + 4 = 7 Example 2: Input: S = \\" 3/2 \\" Output: 1 Explanation: 3/2 = 1 because we truncate the decimal part. Example 3: Input: S = \\" 3+5 / 2 \\" Output: 5 Explanation: 5 / 2 = 2 because we truncate the decimal part. Then 3 + 2 = 5 Your Task: You don\'t need to read input or print anything. Your task is to complete the function `evaluateExpression()` which takes the string `S` as input parameter and returns the result as an integer. Expected Time Complexity: O(N) Expected Space Complexity: O(N) Constraints: - 1 <= length of S <= 10^5 - The integer operands should be in the range [-10^5, 10^5].","solution":"def evaluateExpression(S): Evaluates a mathematical expression and returns the result as an integer. Division should truncate toward zero. if not S: return 0 S = S.replace(\\" \\", \\"\\") stack = [] num = 0 sign = \'+\' for i in range(len(S)): if S[i].isdigit(): num = num * 10 + int(S[i]) if not S[i].isdigit() or i == len(S) - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack.append(stack.pop() * num) elif sign == \'/\': stack.append(int(stack.pop() / num)) sign = S[i] num = 0 return sum(stack)"},{"question":"Given a list of integers `arr` and an integer `k`, write a function to find the number of contiguous subarrays where the product of all the elements in the subarray is less than `k`. -----Constraints----- - 1 <= len(arr) <= 1000 - 1 <= arr[i] <= 10^6 - 1 <= k <= 10^9 -----Input----- Input is given from Standard Input in the following format: - The first line contains the integers separated by spaces representing the elements of `arr`. - The second line contains the integer `k`. -----Output----- For the given input, return a single integer representing the number of contiguous subarrays where the product of all elements is less than `k`. -----Sample Input----- 10 5 2 6 100 -----Sample Output----- 8 Explanation: The 8 contiguous subarrays whose products are less than 100 are: - [10] - [5] - [2] - [6] - [10, 5] - [5, 2] - [2, 6] - [5, 2, 6]","solution":"def num_subarray_product_less_than_k(arr, k): Returns the number of contiguous subarrays where the product of all the elements in the subarray is less than k. if k <= 1: return 0 start = 0 product = 1 count = 0 for end in range(len(arr)): product *= arr[end] while product >= k: product /= arr[start] start += 1 count += end - start + 1 return count"},{"question":"A company plans to conduct a raffle amongst its employees. Each employee has a set of unique ticket numbers, and an employee can win only if all their ticket numbers are drawn. The company wants to know the maximum number of winners possible given the total tickets drawn. ------ Input ------ The first line contains two integers T (the number of tickets drawn) and E (the number of employees). The next E lines contain descriptions of the employees. The (i+1)\'th line contains an integer K_{i} followed by K_{i} integers describing the ticket numbers held by the i\'th employee. ------ Output ------ Output a single integer, indicating the maximum number of employees who can win the raffle. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ E ≤ 1000 1 ≤ K_{i} ≤ 100 ----- Sample Input 1 ------ 10 3 3 1 2 3 2 4 5 2 6 7 ----- Sample Output 1 ------ 3 ----- Explanation 1 ------ In the example, all ticket numbers 1 through 7 are drawn, ensuring all 3 employees can win. ----- Sample Input 2 ------ 10 3 4 8 9 10 11 3 1 2 3 2 4 5 ----- Sample Output 2 ------ 2 ----- Explanation 2 ------ In this case, only the first and third employees can win as the tickets for the second employee (8, 9, 10, 11) are not all drawn.","solution":"def max_winners(T, E, employee_tickets): T: int - the number of tickets drawn E: int - the number of employees employee_tickets: list of lists, where each sublist contains tickets numbers held by corresponding employee Returns an integer indicating the maximum number of employees who can win the raffle. tickets_drawn = set(range(1, T + 1)) # Tickets drawn are the first T natural numbers winners = 0 for tickets in employee_tickets: if set(tickets).issubset(tickets_drawn): winners += 1 return winners"},{"question":"Write a function `min_steps_to_one(n: int) -> int` that determines the minimum number of steps required to reduce a given positive integer `n` to 1. You can perform the following three operations on the integer: 1. Subtract 1 from `n`. 2. If `n` is divisible by 2, divide it by 2. 3. If `n` is divisible by 3, divide it by 3. For example, the number 10 can be reduced to 1 in 3 steps by the following sequence: 10 -> 9 -> 3 -> 1. The function should take an integer `n` as input and return the minimum number of steps required to reduce it to 1. ```python def min_steps_to_one(n): # Your implementation here ```","solution":"def min_steps_to_one(n: int) -> int: Returns the minimum number of steps required to reduce the given positive integer n to 1. if n == 1: return 0 steps = [0] * (n + 1) for i in range(2, n + 1): min_steps = steps[i - 1] + 1 if i % 2 == 0: min_steps = min(min_steps, steps[i // 2] + 1) if i % 3 == 0: min_steps = min(min_steps, steps[i // 3] + 1) steps[i] = min_steps return steps[n]"},{"question":"Sum of Large Numbers Given two non-negative integers A and B, compute their sum, A + B. Input Two non-negative integers A and B separated by a space character are given in a line. Output Print the sum in a line. Constraints * 0 leq A, B leq 10^{1000} Sample Input 1 123456789 987654321 Sample Output 1 1111111110 Sample Input 2 999999999 1 Sample Output 2 1000000000 Sample Input 3 0 0 Sample Output 3 0 Sample Input 4 500 500 Sample Output 4 1000 Example Input 123456789 987654321 Output 1111111110","solution":"def sum_large_numbers(A, B): Returns the sum of two non-negative integers A and B. return str(int(A) + int(B))"},{"question":"You are given a permutation of integers from 1 to n. You need to find the number of inversions in this permutation. An inversion is a pair of indices (i, j) such that i < j and a_i > a_j. In other words, for a given permutation a of integers from 1 to n, calculate the number of pairs (i, j) where 1 leq i < j leq n and a[i] > a[j]. -----Input----- The first line contains one integer n (1 le n le 2 cdot 10^5) — the length of the permutation. The second line contains n distinct integers a_1, a_2, ldots, a_n — the permutation of numbers from 1 to n. -----Output----- Output the number of inversions in the permutation. -----Examples----- Input 5 2 3 1 5 4 Output 3 Input 4 4 3 2 1 Output 6 -----Note----- In the first example, the inversions are: (2, 1), (3, 1), and (5, 4). In the second example, the inversions are all pairs: (4, 3), (4, 2), (4, 1), (3, 2), (3, 1), and (2, 1).","solution":"def count_inversions(n, permutation): def merge_count_split_inv(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions, because all the remaining # elements in the left subarray (arr[i..mid]) are greater # than arr[j] temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right) return inv_count temp_arr = [0]*n return merge_sort_and_count(permutation, temp_arr, 0, n - 1)"},{"question":"Given a string s, return the length of the longest subsequence such that it contains no repeated characters. A subsequence is defined as a sequence that can be derived from the given string by deleting some or no characters without changing the order of the remaining characters. Example 1: Input: s = \\"abcabcbb\\" Output: 3 Explanation: The longest subsequence without repeating characters is \\"abc\\", which has a length of 3. Example 2: Input: s = \\"bbbbb\\" Output: 1 Explanation: The longest subsequence without repeating characters is \\"b\\", which has a length of 1. Example 3: Input: s = \\"pwwkew\\" Output: 3 Explanation: The longest subsequence without repeating characters is \\"wke\\", which has a length of 3. Note that \\"pwke\\" is a subsequence but it is not the longest. Your Task: You don\'t have to read input or print anything. Your task is to complete the function longestUniqueSubseq() which takes string s and returns the length of the longest subsequence containing no repeated characters. Constraint: 1 <= s.length <= 1000 Expected Time Complexity: O(n) Expected Space Complexity: O(min(n, x)) where x is the size of the character set used in the string","solution":"def longestUniqueSubseq(s): Returns the length of the longest subsequence which contains no repeated characters. seen = set() for char in s: seen.add(char) return len(seen)"},{"question":"Alice is a game developer who is working on a new game that involves navigating a character through a grid. The grid has certain blocks that are marked as obstacles, and the character can only move right or down from the starting position (0, 0) to reach the destination position (M-1, N-1). Alice needs your help to determine the number of unique paths the character can take from start to finish while avoiding the obstacles. Input - The first line contains two integers M and N, representing the number of rows and columns in the grid. - The next M lines each contain N integers (0 or 1), representing the grid where 0 indicates an open space and 1 indicates an obstacle. Output - A single integer representing the total number of unique paths from the top-left corner to the bottom-right corner of the grid. Example Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 Explanation: In this example, there are 3 rows and 3 columns. The grid layout is: 0 0 0 0 1 0 0 0 0 There are 2 unique paths from (0, 0) to (2, 2), while avoiding the obstacle at (1, 1): 1. (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) 2. (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2)","solution":"def unique_paths_with_obstacles(m, n, grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of a grid with obstacles. if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Given an unsorted integer array, find the length of the longest consecutive elements sequence. # result number representing the length of the longest sequence of consecutive integers. An empty array returns `0`. # example - Input: `[100, 4, 200, 1, 3, 2]` - Output: `4` (The longest consecutive elements sequence is `[1, 2, 3, 4]`.) - Input: `[9, 1, 4, 7, 3, -1, 0, 5, 8, -1, 6]` - Output: `7` (The longest consecutive elements sequence is `[-1, 0, 1, 2, 3, 4, 5, 6]`.)","solution":"def longest_consecutive_sequence(nums): Finds the length of the longest consecutive elements sequence in an unsorted integer array. :param nums: List[int] :return: int if not nums: return 0 num_set = set(nums) max_length = 0 for num in num_set: # Check if it\'s the start of a sequence if num - 1 not in num_set: current_num = num current_length = 1 # Count the length of the sequence while current_num + 1 in num_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For this task, however, you are expected to generate a modified version of the Fibonacci sequence. You are given a positive integer n and two positive integers a and b. You need to construct a sequence of length n where the first number is a, the second number is b, and each subsequent number is the sum of the two previous numbers modulo 1000000007. Input The input consists of three integers n (1 ≤ n ≤ 10^5), a (1 ≤ a ≤ 10^9), and b (1 ≤ b ≤ 10^9). Output Print the first n numbers of the modified Fibonacci sequence, each separated by a space. Examples Input 5 2 3 Output 2 3 5 8 13 Input 10 1 1 Output 1 1 2 3 5 8 13 21 34 55","solution":"def modified_fibonacci(n, a, b): Constructs a sequence of length n where the first number is a, the second number is b, and each subsequent number is the sum of the two previous numbers modulo 1000000007. Args: n (int): Length of the sequence. a (int): First number in the sequence. b (int): Second number in the sequence. Returns: list: The first n numbers of the modified Fibonacci sequence. MOD = 1000000007 if n == 1: return [a] elif n == 2: return [a, b] sequence = [a, b] for i in range(2, n): next_value = (sequence[-1] + sequence[-2]) % MOD sequence.append(next_value) return sequence # Example usage: # Input: 5 2 3 # Output: 2 3 5 8 13 n = 5 a = 2 b = 3 print(modified_fibonacci(n, a, b)) # Output: [2, 3, 5, 8, 13]"},{"question":"Anna is participating in a programming contest and one of the tasks she encountered has the following description: A sentence is defined as a string of words separated by spaces. Each word is a sequence of non-space characters. You need to write a function that takes an input sentence and returns the same sentence but with all the words in reverse order. For example, if the input is \\"This is an example\\", the output should be \\"example an is This\\". Write a function to reverse the order of words in a given sentence. -----Input----- The input consists of a single string of words, where words are separated by single spaces. The input string contains only alphabetical characters and spaces. There will be no leading or trailing spaces. -----Output----- Print the sentence with the words in reverse order. -----Examples----- Sample Input: This is an example Sample Output: example an is This","solution":"def reverse_words(sentence): Returns the sentence with the words reversed. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Generate Spiral Matrix You are given an Integer n (>= 1) and your task is to generate a square matrix of size n x n filled with elements from 1 to n^2 in a spiral order. # Example If n = 3, the generated matrix should be: 1 2 3 8 9 4 7 6 5 If n = 4, the generated matrix should be: 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 # Guidelines - Define a function `generate_spiral_matrix(n)` which takes an integer `n` as input. - The function should return a list of lists representing the spiral matrix. # Constraints - The input number `n` will always be an integer greater than or equal to 1. ```python def generate_spiral_matrix(n: int) -> List[List[int]]: # Your code here pass ``` # Note - Ensure the matrix is filled in a spiral order starting from the top-left corner and moving to the right initially. - Handle cases for both small and large values of `n` efficiently.","solution":"from typing import List def generate_spiral_matrix(n: int) -> List[List[int]]: matrix = [[0] * n for _ in range(n)] left, right, top, bottom = 0, n-1, 0, n-1 num = 1 while left <= right and top <= bottom: for col in range(left, right + 1): matrix[top][col] = num num += 1 top += 1 for row in range(top, bottom + 1): matrix[row][right] = num num += 1 right -= 1 if top <= bottom: for col in range(right, left - 1, -1): matrix[bottom][col] = num num += 1 bottom -= 1 if left <= right: for row in range(bottom, top - 1, -1): matrix[row][left] = num num += 1 left += 1 return matrix"},{"question":"Given a binary tree, you have to perform the following task: - Flatten the binary tree into a linked list in-place using pre-order traversal. - The left pointer of each node should point to NULL. - The right pointer should point to the next node in the pre-order sequence. â€‹Example 1: Input: 1 / 2 5 / 3 4 6 Output: 1 2 3 4 5 6 Explanation: Flattening the binary tree to its linked list form, we get 1->2->3->4->5->6. â€‹Example 2: Input: 1 / 2 / 3 4 5 Output: 1 2 3 4 5 Explanation: After flattening the binary tree to its linked list form, it becomes 1->2->3->4->5. Your Task: You don\'t have to read input or print anything. Your task is to complete the function `flatten` which takes the root of the binary tree as input and flattens the tree in-place. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= Number of nodes <= 10^4 0 <= Node value <= 1000","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flatten(root): Flatten the binary tree into a linked list in-place using pre-order traversal. The left pointer of each node should point to NULL. The right pointer should point to the next node in the pre-order sequence. if not root: return # Initialize a stack and push the root node stack = [root] # Previous node in the flattened list previous = None while stack: # Pop a node from the stack current = stack.pop() # Process the previous node if it exists, making the current its right child if previous: previous.right = current previous.left = None # Push right and then left child to the stack (so that left is processed first) if current.right: stack.append(current.right) if current.left: stack.append(current.left) # Update previous to current node previous = current"},{"question":"Given an array of positive integers nums and an integer k, return the length of the longest subarray such that the product of all its elements is less than k. Example 1: Input: nums = [10,5,2,6], k = 100 Output: 4 Explanation: The array [10, 5, 2, 6] has a product of 10 * 5 * 2 * 6 = 600, which is more than 100. The subarrays are [10], [10, 5], [10, 5, 2], [10, 5, 2, 6], [5], [5, 2], [5, 2, 6], [2], [2, 6], [6]. The longest subarrays are [10], [5, 2], and [2, 6], which have products less than 100. Example 2: Input: nums = [1,2,3], k = 0 Output: 0 Explanation: No subarray can have a product less than 0. Constraints: 1 <= nums.length <= 10^5 1 <= nums[i] <= 1000 0 <= k <= 10^6","solution":"def num_subarray_product_less_than_k(nums, k): if k <= 1: return 0 prod = 1 left = 0 count = 0 for right in range(len(nums)): prod *= nums[right] while prod >= k: prod //= nums[left] left += 1 count += right - left + 1 return count"},{"question":"Imagine you are given a string s consisting of lowercase English letters. You can perform the following operation any number of times: choose any two adjacent, distinct characters and remove them from the string. The goal is to determine whether it is possible to make the string empty using the given operation. # Input The first line contains a single integer t (1 le t le 10^3) — the number of test cases. Each of the following t lines contains one string s (1 le |s| le 10^5) — a string consisting of lowercase English letters. # Output For each test case, print \\"YES\\" if it is possible to make the string empty, otherwise print \\"NO\\". # Example Input ``` 3 ab aabb abcabc ``` Output ``` YES YES YES ``` Explanation - In the first test case, you can remove `ab`. - In the second test case, you can remove `aa` to get `bb`, then remove `bb`. - In the third test case, multiple sequences are possible, but one such sequence can be: remove `ab` to get `cabc`, then remove `cb` to get `ac`, and finally remove `ac`. # Note - The order of removal doesn\'t matter as long as all characters can be removed using the given operation.","solution":"def can_be_empty(s): Determines if a string s can be made empty by repeatedly removing adjacent distinct characters. # Stack-based solution to determine if we can make the string empty stack = [] for char in s: if stack and stack[-1] != char: stack.pop() else: stack.append(char) return \\"YES\\" if not stack else \\"NO\\" def solve(test_cases): results = [] for s in test_cases: results.append(can_be_empty(s)) return results"},{"question":"Tina loves collecting coins. She arranges her coin collection in rows, where each row contains at least as many coins as the previous row. Tina decides to form the shape of a pyramid with her coins, where the first row has exactly 1 coin, the second row has exactly 2 coins, and so on, forming a progressively increasing sequence. Given the total number of coins Tina has, determine the maximum height of the pyramid she can form. Input: The first line contains the integer T, the number of test cases. Each of the next T lines contains one integer N, the number of coins Tina has for that test case. Output: For each test case, output a single line containing the maximum height H of the pyramid that Tina can form. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^9 SAMPLE INPUT 3 1 5 8 SAMPLE OUTPUT 1 2 3","solution":"def max_pyramid_height(N): Returns the maximum height of the pyramid that can be formed with N coins. height = 0 while N >= (height + 1): height += 1 N -= height return height def process_cases(T, cases): Process the test cases and return the results. results = [] for N in cases: results.append(max_pyramid_height(N)) return results def solve_pyramid_height_problem(input_string): Parses the input string and returns the output string with results for each test case. lines = input_string.strip().split(\'n\') T = int(lines[0]) cases = [int(lines[i]) for i in range(1, T + 1)] results = process_cases(T, cases) return \\"n\\".join(map(str, results))"},{"question":"Mary loves to play with balloons. She has several balloons, each of a different color. She also has a set of ribbons, each of a specific length. She wants to tie the ribbons to the balloons in such a way that the aesthetics of her decoration meet her desire. Mary defines the aesthetics as the total sum of the squared lengths of ribbons attached to the balloons. Given this, she seeks to maximize the aesthetics of her decoration. You are given two sequences: one representing the lengths of the ribbons and the other representing the number of balloons. You must choose exactly one ribbon for each balloon such that the total sum of the squared lengths of ribbons is maximized. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of balloons (and also the number of ribbons as they are equal). The second line contains n integers l1, l2, ..., ln (1 ≤ li ≤ 10,000) — the lengths of the ribbons. Output Print one integer — the maximum sum of the squares of the ribbon lengths that can be achieved by appropriately assigning the ribbons to the balloons. Example Input 3 1 3 2 Output 14 Note In the provided example, Mary could assign the ribbon lengths as follows: use the length 3 ribbon for the first balloon, the length 2 ribbon for the second balloon, and the length 1 ribbon for the third balloon. The sum of the squares is 3^2 + 2^2 + 1^2 = 9 + 4 + 1 = 14. Therefore, the maximum possible aesthetics is 14.","solution":"def maximize_aesthetics(n, ribbons): Returns the maximum aesthetics (sum of squares) for the given ribbons. ribbons.sort(reverse=True) # sort ribbons in decreasing order return sum(ribbon ** 2 for ribbon in ribbons)"},{"question":"You have been hired as a software developer for a logistics company, and one of your tasks is to streamline the cargo loading process. You need to write a function called `maximize_cargo` that computes the optimal load of cargo that can be packed given a list of cargos with their respective weights and a maximum weight limit of the truck. Your task is to maximize the weight packed without exceeding the weight limit. The function should take in two parameters: 1. `weights`: A list of positive integers representing the weights of the cargo items. 2. `max_weight`: An integer representing the maximum weight limit of the truck. The function should return the largest sum of weights that does not exceed the `max_weight`. For example: ```python maximize_cargo([1, 2, 3, 4, 5], 10) # should return 10, since selecting items with weights 1, 2, 3, and 4 gives the maximum sum without exceeding the limit maximize_cargo([9, 8, 2, 1], 6) # should return 3, since selecting items with weights 2 and 1 gives the maximum sum without exceeding the limit maximize_cargo([1, 1, 1, 1, 1], 5) # should return 5, selecting all items ```","solution":"def maximize_cargo(weights, max_weight): Returns the maximum sum of weights that does not exceed the max_weight limit. n = len(weights) # Create a 2D DP array with dimensions (n+1) x (max_weight+1) dp = [[0] * (max_weight + 1) for _ in range(n + 1)] # Iterate over the weights for i in range(1, n + 1): for w in range(max_weight + 1): if weights[i - 1] > w: dp[i][w] = dp[i - 1][w] else: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + weights[i - 1]) return dp[n][max_weight]"},{"question":"Daniel loves playing with numbers, and his latest discovery involves finding interesting sequences in an array of integers. He has an array of integers and wants to identify all subarrays where the number of distinct elements is exactly k. Your task is to help Daniel by writing a program that achieves this. Input The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n), where n is the length of the array, and k is the number of distinct elements required. The second line contains n integers representing the array. Each of the integers in the array will be between 1 and 1000. Output Print the number of subarrays that contain exactly k distinct elements. Examples Input 5 2 1 2 1 2 3 Output 7 Input 5 3 1 2 1 3 4 Output 3","solution":"def count_subarrays_with_k_distinct(arr, k): from collections import defaultdict def at_most_k_distinct(arr, k): count = defaultdict(int) i, result = 0, 0 for j in range(len(arr)): if count[arr[j]] == 0: k -= 1 count[arr[j]] += 1 while k < 0: count[arr[i]] -= 1 if count[arr[i]] == 0: k += 1 i += 1 result += j - i + 1 return result return at_most_k_distinct(arr, k) - at_most_k_distinct(arr, k - 1) # Example usage: n, k = 5, 2 arr = [1, 2, 1, 2, 3] print(count_subarrays_with_k_distinct(arr, k)) # Output: 7"},{"question":"You are given an integer `n`. Your task is to generate a list of `n` elements where the `i-th` element (0-indexed) is `i^2`, and then print the list in a single line with each element separated by a comma. Function Description Complete the generate_and_print_list function in the editor below. generate_and_print_list has the following parameter: int n: the number of elements in the list Prints A single line containing elements of the generated list separated by commas. Input Format A single integer, `n`. Constraints The integer `n` is such that 0 leq n leq 100. Sample Input 0 5 Sample Output 0 0,1,4,9,16 Explanation 0 For n = 5, the list will have 5 elements, where each element is the square of its index. Thus, the resulting list is [0, 1, 4, 9, 16], which is printed as \\"0,1,4,9,16\\".","solution":"def generate_and_print_list(n): Generates a list where the i-th element is i^2 and prints the list with elements separated by commas. Args: n (int): The number of elements in the list Returns: None result = [i**2 for i in range(n)] print(\',\'.join(map(str, result)))"},{"question":"There is a famous problem about arranging people in a line based on their heights. In this problem, there are some additional constraints. Imagine there is a row of people standing in a straight line. Each person has a height and can either see the person directly in front of them or be hidden by taller people standing in front of them. We need to rearrange the people so that as many people as possible can see the person directly in front of them. You are given an array of heights representing the heights of people standing in a line. The goal is to rearrange the array so as to maximize the number of people who can see the next person in front of them. -----Input----- There will be a single test case in the input. The first line contains a single integer n (1 le n le 100000) representing the number of people in the line. The next line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 100000) representing the heights of the people. -----Output----- Print a single integer representing the maximum number of people that can see the person directly in front of them after rearranging the heights. -----Examples----- Sample Input 1: 5 3 1 4 1 2 Sample Output 1: 4 Sample Input 2: 6 6 5 3 4 2 1 Sample Output 2: 5 Explanation: For the first sample: One possible rearrangement is [1, 3, 2, 4, 1]. Here, 3 can see 1, 2 can see 1, 4 can see 2, and 1 (at the end) can see the person in front. Hence, 4 people can see the next person in front of them. For the second sample: One possible rearrangement is [1, 2, 3, 4, 5, 6]. Here, 2 can see 1, 3 can see 2, 4 can see 3, 5 can see 4, and 6 can see 5. Hence, 5 people can see the next person in front of them.","solution":"def max_visible_people(n, heights): Returns the maximum number of people that can see the person directly in front of them after rearranging the array heights. :param n: Number of people :param heights: List of heights of the people :return: Maximum number of people that can see the person directly in front of them sorted_heights = sorted(heights) count_visible = n - 1 # All but the last person in a sorted list can see the one in front return count_visible"},{"question":"You are asked to implement a function `integerReplacement(n)` that takes an integer `n` and returns the minimum number of replacements needed for `n` to become 1. You can perform the following operations on the integer: 1. If `n` is even, replace `n` with `n / 2`. 2. If `n` is odd, you can replace `n` with either `n + 1` or `n - 1`. Your goal is to find the minimum number of operations needed to reduce `n` to 1. -----Input----- The input is a single integer `n` (1 le n le 2^{31} - 1). -----Output----- The output should be a single integer, representing the minimum number of operations needed. -----Example----- Input 8 Output 3 Explanation: 8 -> 4 (divide by 2) 4 -> 2 (divide by 2) 2 -> 1 (divide by 2) Input 7 Output 4 Explanation: 7 -> 8 (add 1) 8 -> 4 (divide by 2) 4 -> 2 (divide by 2) 2 -> 1 (divide by 2)","solution":"def integerReplacement(n): This function returns the minimum number of replacements needed for n to become 1. def helper(n, memo): if n == 1: return 0 if n in memo: return memo[n] if n % 2 == 0: memo[n] = 1 + helper(n // 2, memo) else: memo[n] = 1 + min(helper(n + 1, memo), helper(n - 1, memo)) return memo[n] return helper(n, {})"},{"question":"Alice loves collecting stamps. She has a unique collection of different types of stamps each identified by an integer ID. Every time she acquires a new stamp, she either adds it to her collection if it\'s not already present, or notes down the stamp\'s ID if it is a duplicate. Given a sequence of stamp IDs denoting the stamps Alice acquires, you need to compute how many unique stamps she has after receiving all the stamps and how many stamps are duplicates. -----Input----- The first input line contains an integer t (1 leq t leq 100), representing the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1 leq n leq 100), representing the number of stamps Alice acquires. - The second line contains n integers s_1, s_2, dots, s_n (1 leq s_i leq 100) representing the IDs of the stamps Alice acquires. -----Output----- For each test case, output two space-separated integers: - The number of unique stamps in Alice\'s collection after receiving all the stamps. - The number of duplicate stamps Alice noted down. -----Examples----- Input 3 5 1 2 3 4 5 6 1 2 2 3 3 4 4 2 2 2 2 Output 5 0 4 2 1 3 -----Note----- In the first example, all stamps received are unique, so Alice has 5 unique stamps and 0 duplicates. In the second example, Alice receives stamps with IDs 1, 2, 2, 3, 3, and 4. After processing these, she ends up with 4 unique stamps (1, 2, 3, 4) and 2 duplicates. In the third example, all stamps received have the same ID (2). So after processing, Alice has 1 unique stamp and 3 duplicates.","solution":"def count_stamps(test_cases): results = [] for n, stamps in test_cases: unique_stamps = set() duplicate_count = 0 for stamp in stamps: if stamp in unique_stamps: duplicate_count += 1 else: unique_stamps.add(stamp) results.append((len(unique_stamps), duplicate_count)) return results"},{"question":"A logistics company wants to ensure that their delivery trucks are optimally loaded before departing on their routes. Each truck has a weight limit, and the company needs to determine what combination of packages can be loaded onto each truck without exceeding its weight capacity. You are given a list of packages, each with a specific weight. You are tasked with finding out the maximum weight that can be loaded onto a truck without exceeding the truck\'s weight limit. Write a function that takes the truck\'s weight limit and a list of package weights, and returns the maximum possible weight that can be loaded without exceeding the truck\'s weight limit. Input The input is given in the following format: * The first line contains an integer `W`, the weight limit of the truck. * The second line contains an integer `n`, the number of packages. * The third line contains `n` space-separated integers, each representing the weight of a package. The input meets the following constraints: - 1 ≤ W ≤ 10,000 - 1 ≤ n ≤ 1,000 - 1 ≤ weight of each package ≤ 1,000 Output Output a single integer, the maximum weight that can be loaded onto the truck without exceeding the weight limit. Examples Input 10 5 1 3 4 5 7 Output 10 Input 15 5 2 2 4 6 9 Output 15","solution":"def get_maximum_load(weight_limit, package_weights): This function returns the maximum load that can be carried by the truck without exceeding the weight limit. Uses a dynamic programming approach to solve the 0/1 Knapsack problem. n = len(package_weights) dp = [0] * (weight_limit + 1) for i in range(n): for w in range(weight_limit, package_weights[i] - 1, -1): dp[w] = max(dp[w], dp[w - package_weights[i]] + package_weights[i]) return dp[weight_limit]"},{"question":"Alice is testing out a new algorithm by arranging an array `a` of integers in a specific way. She starts with a list and performs the following process: 1. Selects a segment of the list (subarray) and reverses the order of elements in that segment. 2. Repeats this operation any number of times. Alice wants to achieve a list that starts and ends with her favorite integer `x` from the current list. However, she can only perform the reversing operation at most `k` times. She can choose any subarray to reverse on each operation. Write a function that determines whether it is possible to make Alice\'s favorite integer `x` present at both the starting and ending positions of the array, given that she can only reverse a segment at most `k` times. The function should return `True` if it\'s possible and `False` otherwise. -----Input----- The first line of input contains a single integer t (1 le t le 10^4) — the number of test cases. The description of the test cases follows. Each test case contains: - The first line consists of three integers n, k, and x (1 le n le 10^5, 0 le k le n, 0 le x le 10^6) — the number of elements in the list, the maximum number of operations allowed, and Alice\'s favorite integer, respectively. - The second line contains n integers representing the array `a`. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print `True` if it is possible to make `x` appear both at the start and end of the list within the allowed number of operations. Otherwise, print `False`. -----Examples----- Input 4 7 2 3 1 2 3 4 3 6 7 6 1 5 5 5 5 5 5 5 5 0 4 4 4 4 4 5 10 3 8 8 1 2 8 3 4 8 7 6 8 Output True True False True -----Note----- In the first test case, Alice can reverse the segment from the 2nd to 6th positions of the array to get [1, 6, 3, 4, 3, 2, 7]. She can then reverse the first 6 elements to bring `3` to both the start and the end. So it is possible. In the second test case, since `x = 5` is already at the start and can be made to be at the end without any operations, it is true. In the third test case, since no segment reversals are allowed and `5` can\'t be moved, it is false. In the fourth test case, by reversing appropriate segments, Alice can arrange the array such that `x = 8` is at both the start and end of the list.","solution":"def can_achieve_favorite_integer(t, test_cases): results = [] for test in test_cases: n, k, x, a = test if a.count(x) < 2: results.append(False) continue first_x_indices = [i for i in range(n) if a[i] == x] last_x_indices = [i for i in range(n-1, -1, -1) if a[i] == x] if first_x_indices[0] != 0 and first_x_indices[0] > k: results.append(False) continue if last_x_indices[0] != n-1 and (n - 1 - last_x_indices[0]) > k: results.append(False) continue for i in first_x_indices: for j in last_x_indices: if j - i >= k: results.append(True) break else: continue break else: results.append(False) return results"},{"question":"In a distant future, a group of scientists has discovered a new form of energy based on the interactions of charged particles in a confined space. They are trying to develop algorithms to simulate and predict the behavior of these particles. The particles are represented as a sequence of positive integers, where each integer denotes the charge of a particle. The stability of a particle configuration is determined by the sum of the charges of any two adjacent particles being divisible by a given number `k`. If all adjacent pairs of particles satisfy this condition, the configuration is considered stable. The scientists need your help to determine if the sequence of charges is stable. -----Input----- The first line of the input contains an integer `n` (2 ≤ n ≤ 100 000) — the number of particles. The second line contains an integer `k` (1 ≤ k ≤ 10 000) — the given number for the divisibility condition. The third line contains `n` positive integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10 000), where `a_i` denotes the charge of the `i-th` particle. -----Output----- Print \\"Stable\\" (without quotes) if the configuration is stable, or \\"Unstable\\" (without quotes) otherwise. -----Examples----- Input 5 4 1 3 5 7 9 Output Stable Input 6 3 2 4 6 7 8 9 Output Unstable -----Note----- In the first sample, the sum of each adjacent pair (1 + 3, 3 + 5, 5 + 7, 7 + 9) is divisible by 4, so the configuration is stable. In the second sample, the sum of the adjacent pair (6 + 7) is not divisible by 3, so the configuration is unstable.","solution":"def is_stable(n, k, charges): Determines if the sequence of charges is stable. Parameters: n (int): the number of particles k (int): the given number for the divisibility condition charges (list of int): the charges of the particles Returns: str: \\"Stable\\" if the configuration is stable, otherwise \\"Unstable\\" for i in range(1, n): if (charges[i-1] + charges[i]) % k != 0: return \\"Unstable\\" return \\"Stable\\""},{"question":"# Description: Write a function that takes a string and a target character as inputs. The function should capitalize the first occurrence of the target character in the string if it is not already capitalized and return the modified string. If the target character is not found, the function should return the original string. # Examples ``` capitalize_first_occurrence(\\"hello world\\", \'l\') == \\"heLlo world\\" capitalize_first_occurrence(\\"hello world\\", \'o\') == \\"hellO world\\" capitalize_first_occurrence(\\"hello world\\", \'w\') == \\"hello World\\" capitalize_first_occurrence(\\"hello world\\", \'h\') == \\"Hello world\\" capitalize_first_occurrence(\\"hello world\\", \'z\') == \\"hello world\\" ```","solution":"def capitalize_first_occurrence(s, target): Capitalizes the first occurrence of the target character in the string. Parameters: s (str): The input string. target (str): The target character to capitalize. Returns: str: The modified string with the first occurrence of the target character capitalized. index = s.lower().find(target.lower()) if index == -1: return s if s[index].isupper(): return s # Already capitalized at the location return s[:index] + s[index].upper() + s[index+1:]"},{"question":"Word Segmentation You are given a string without spaces and a dictionary of valid words. Your task is to determine if the entire string can be segmented into one or more valid dictionary words. For example, consider the input string \\"applepenapple\\" and the dictionary [\\"apple\\", \\"pen\\"]. The string can be segmented as \\"apple pen apple\\", which are all valid dictionary words. Input The input consists of multiple datasets, each in the following format: > n > word1 > word2 > ... > wordn > string The first line contains an integer n (1 ≤ n ≤ 100) which represents the number of words in the dictionary. Each of the next n lines contains one dictionary word. The dictionary words are case-insensitive and consist of lowercase letters only, each with a length between 1 and 20. The last line contains the string to be segmented. The string consists of lowercase letters only and its length is between 1 and 10^4. The end of the input is indicated by a line containing a zero. Output For each dataset, output a single line containing \\"Yes\\" if the string can be segmented into one or more valid dictionary words. Otherwise, output \\"No\\". Sample Input 3 apple pen Pineapple applepenapple 2 cats dog catsandog 0 Sample Output Yes No Example Input 3 apple pen pineapple applepenapple 2 cats dog catsandog 0 Output Yes No","solution":"def word_break(dictionary, s): Determines if the string can be segmented into one or more valid dictionary words. Parameters: dictionary (list): List of valid words. s (str): The string to be segmented. Returns: str: \\"Yes\\" if the string can be segmented, otherwise \\"No\\". word_set = set(dictionary) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return \\"Yes\\" if dp[-1] else \\"No\\" def process_input(input_string): inputs = input_string.strip().split(\'n\') result = [] i = 0 while i < len(inputs): if inputs[i] == \'0\': break n = int(inputs[i]) i += 1 dictionary = [] for _ in range(n): dictionary.append(inputs[i].lower()) i += 1 s = inputs[i] i += 1 result.append(word_break(dictionary, s.lower())) return \\"n\\".join(result) # Example input processing function: example_input = 3 apple pen pineapple applepenapple 2 cats dog catsandog 0 print(process_input(example_input))"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine the number of unique characters in the string. Input Format A single line containing a string, s. Constraints 1 leq |s| leq 1000 The string s contains only lowercase English letters. Output Format Output the number of unique characters in the string. Sample Input hello Sample Output 4","solution":"def count_unique_characters(s): Returns the number of unique characters in the string s. return len(set(s))"},{"question":"You are given a sequence of integers representing heights of consecutive buildings on a street. The buildings are represented as an array `heights`, where `heights[i]` is the height of the `i-th` building. You need to determine the largest rectangular area that can be formed between these buildings such that the rectangle is only as high as the shortest building in it. For example: For heights [2, 1, 5, 6, 2, 3], the largest rectangle would be formed by the buildings with heights [5, 6] giving an area of 10 (2 buildings of height 5). Input: The input consists of an integer `n` (1 ≤ n ≤ 10^5) which is the number of buildings, followed by an array of `n` integers `heights[]` (1 ≤ heights[i] ≤ 10^6) representing the heights of the buildings. Output: Print a single integer representing the largest rectangular area that can be formed between these buildings. Examples: Input: 6 2 1 5 6 2 3 Output: 10 Input: 5 1 1 1 1 1 Output: 5 Input: 7 6 2 5 4 5 1 6 Output: 12 Note: In the first example, the largest rectangle has an area of 10 which is formed by the buildings with heights [5, 6]. In the second example, all buildings have the same height of 1, forming a rectangle with an area of 5. In the third example, the largest rectangle can be formed by the buildings with heights [5, 4, 5], resulting in an area of 12.","solution":"def largest_rectangle_area(heights): Returns the largest rectangular area that can be formed between these buildings. n = len(heights) stack = [] max_area = 0 index = 0 while index < n: if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Your company produces custom packaging for a variety of rectangular products. Each package must perfectly snug the product to ensure safe delivery. To minimize material costs, the surface area of the packaging should be as small as possible. Given the dimensions of a product in the form of its length, width, and height, calculate the minimum amount of packaging material needed to house the product perfectly. -----Input----- The input consists of three integers 1 leq L, W, H leq 10^3: the length, width, and height of the product. -----Output----- Print the minimum surface area required to create an exact-fit rectangular box for the product. -----Examples----- Sample Input 1: 2 3 4 Sample Output 1: 52 Sample Input 2: 1 1 1 Sample Output 2: 6 Sample Input 3: 6 7 8 Sample Output 3: 292","solution":"def minimum_surface_area(L, W, H): Calculates the minimum surface area to house a rectangular product. Parameters: L (int): Length of the product. W (int): Width of the product. H (int): Height of the product. Returns: int: Minimum surface area required for the packaging. # Surface area of a rectangular box is 2(lw + lh + wh) surface_area = 2 * (L * W + L * H + W * H) return surface_area"},{"question":"Given a grid of size N x M, where each cell contains a value. Your task is to perform the following operations on the grid: **Operations**: 1. **Update Operation**: `U r c k` Update the value of the cell at row `r` and column `c` by adding `k`. 2. **Query Operation**: `Q r1 c1 r2 c2` Output the sum of all values of the cells in the rectangle defined by the top-left corner `(r1, c1)` and the bottom-right corner `(r2, c2)`. **Input Format**: - The first line contains two integers, `N` and `M`, the number of rows and columns of the grid respectively. - The next N lines each contain M integers representing the initial values in the grid. - The next line contains an integer `Q`, the number of operations to follow. - Each of the next `Q` lines contains either an update operation or a query operation. **Output Format**: - For each query operation, output the answer in a separate line. **Constraints**: 1. 1 ≤ N, M ≤ 500 2. 1 ≤ Q ≤ 100000 3. 1 ≤ r, c, r1, c1, r2, c2 ≤ N, M 4. 1 ≤ k ≤ 10^9 5. All initial values in the grid are non-negative integers and ≤ 10^9. **Sample Input**: ``` 3 3 1 2 3 4 5 6 7 8 9 4 U 2 2 10 Q 1 1 3 3 U 3 3 -5 Q 2 2 3 3 ``` **Sample Output**: ``` 66 23 ``` **Explanation**: Initially, the grid is: ``` 1 2 3 4 5 6 7 8 9 ``` 1. The first query is `U 2 2 10`. Adding 10 to the cell at (2, 2) updates the grid to: ``` 1 2 3 4 15 6 7 8 9 ``` 2. The second query is `Q 1 1 3 3`. The sum of all cells from (1,1) to (3,3) is: ``` 1 + 2 + 3 + 4 + 15 + 6 + 7 + 8 + 9 = 55 ``` 3. The third query is `U 3 3 -5`. Subtracting 5 from the cell at (3, 3) updates the grid to: ``` 1 2 3 4 15 6 7 8 4 ``` 4. The fourth query is `Q 2 2 3 3`. The sum of all cells from (2,2) to (3,3) is: ``` 15 + 6 + 8 + 4 = 33 ```","solution":"class GridManipulator: def __init__(self, grid): self.grid = grid self.N = len(grid) self.M = len(grid[0]) def update(self, r, c, k): Update the value at cell (r, c) by adding k. self.grid[r-1][c-1] += k def query(self, r1, c1, r2, c2): Return the sum of values in the rectangular area from (r1, c1) to (r2, c2) inclusive. total_sum = 0 for i in range(r1-1, r2): for j in range(c1-1, c2): total_sum += self.grid[i][j] return total_sum"},{"question":"Problem: A mysterious island is home to a tribe that communicates through a unique language. Each word in their language consists of exactly `N` letters chosen from an alphabet of `K` different characters. Every character has a value associated with it, making some words more valuable than others. To decode the value of a message, you need to calculate the total value of a word based on the sum of the values of its individual characters. Given the values of each character and a list of words, your task is to find the word with the maximum value. Write a program that: 1. Takes the input values for each character in the alphabet. 2. Takes a list of words comprised of these characters. 3. Outputs the word with the highest total value. 4. If there are multiple words with the same maximum value, output the word that appears first in the list. Constraints: - `1 ≤ K ≤ 26` (number of different characters) - `1 ≤ N ≤ 50` (length of each word) - `A ≤ value[character] ≤ Z` (value of each character) - `1 ≤ W ≤ 100` (number of words) Input: The input is given in the following format: ``` K char1 value1 char2 value2 ... charK valueK W word1 word2 ... wordW ``` Where `K` is the number of different characters, followed by `K` lines where each line contains a character and its associated value. Next, `W` is the number of words, followed by `W` lines where each line contains a word. Output: Output the word with the highest total value. Example: Input: ``` 3 a 1 b 3 c 2 4 cba abc bbb cca ``` Output: ``` bbb ``` Explanation: - The value of the word \\"cba\\" = 2 + 3 + 1 = 6 - The value of the word \\"abc\\" = 1 + 3 + 2 = 6 - The value of the word \\"bbb\\" = 3 + 3 + 3 = 9 (maximum value) - The value of the word \\"cca\\" = 2 + 2 + 1 = 5 The word \\"bbb\\" has the highest total value, so the output is \\"bbb\\".","solution":"def find_max_value_word(K, char_values, W, words): Finds the word with the maximum total value. Parameters: - K: int : Number of different characters - char_values: dict : Dictionary with characters as keys and their values as values - W: int : Number of words - words: list : List of words Output: - str: The word with the highest total value def calculate_word_value(word, char_values): return sum(char_values[char] for char in word) max_value = -1 max_value_word = \\"\\" for word in words: word_value = calculate_word_value(word, char_values) if word_value > max_value: max_value = word_value max_value_word = word return max_value_word"},{"question":"Gina enjoys exploring different kinds of number sequences. Recently, she came across a concept called a balanced sequence. A sequence of numbers is defined to be balanced if the sum of its elements is equal to 0. Right now, Gina has a sequence consisting of n positive and negative integers. She wants to find the length of the longest subsequence in this sequence that is balanced. A subsequence is derived from another sequence by deleting some or none of the elements without changing the order of the remaining elements. Input: The first line contains an integer n (1 ≤ n ≤ 3000), which indicates the number of integers in the sequence. The next line contains n integers, each representing an element of the sequence. Each value in the sequence will be between -10^6 and 10^6. Output: Output a single integer, which is the length of the longest balanced subsequence. Example: Input 6 2 -1 3 -3 1 2 Output 4 Note: In the example, the longest balanced subsequence is [2, -1, 3, -3] which sums to 0. Another balanced subsequence could be [-1, 3, -3, 1] or [2, -3, 1].","solution":"def longest_balanced_subsequence(sequence): n = len(sequence) prefix_sum_to_index = {0: -1} prefix_sum = 0 max_length = 0 for i in range(n): prefix_sum += sequence[i] if prefix_sum in prefix_sum_to_index: subsequence_length = i - prefix_sum_to_index[prefix_sum] max_length = max(max_length, subsequence_length) else: prefix_sum_to_index[prefix_sum] = i return max_length"},{"question":"The idea behind the problem is to detect cycles in an undirected graph. A cycle in an undirected graph is a path that starts and ends at the same vertex with no other repeated vertices in between. Given an undirected graph, determine if the graph contains a cycle. Input The input consists of multiple test cases. Each test case starts with a line containing two integers, n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 1000), where n is the number of vertices and m is the number of edges in the graph. The next m lines each contain two integers ui and vi (1 ≤ ui, vi ≤ n), indicating that there is an edge between vertices ui and vi. The input is terminated by a test case in which n = 0 and m = 0. Output For each test case, output a single line containing \\"Cycle\\" if the graph contains a cycle, and \\"No Cycle\\" otherwise. Example Input 3 3 1 2 2 3 3 1 4 2 1 2 3 4 3 2 1 2 1 3 0 0 Output Cycle No Cycle No Cycle","solution":"def detect_cycle_in_graph(n, m, edges): from collections import defaultdict def has_cycle(v, visited, parent, graph): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if has_cycle(neighbor, visited, v, graph): return True elif neighbor != parent: return True return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) for i in range(1, n + 1): if not visited[i]: if has_cycle(i, visited, -1, graph): return \\"Cycle\\" return \\"No Cycle\\" def process_input(input_data): results = [] input_iterator = iter(input_data.split(\\"n\\")) while True: n, m = map(int, next(input_iterator).strip().split()) if n == 0 and m == 0: break edges = [tuple(map(int, next(input_iterator).strip().split())) for _ in range(m)] result = detect_cycle_in_graph(n, m, edges) results.append(result) return results if __name__ == \\"__main__\\": input_data = \'\'\'3 3 1 2 2 3 3 1 4 2 1 2 3 4 3 2 1 2 1 3 0 0\'\'\' print(process_input(input_data))"},{"question":"Sita, who loves playing with numbers, encounters a sequence challenge. She is given an integer M and asked to generate an array B of length M such that it satisfies the equation sum Bi = sum (5 * Bi)^2. Sita is puzzled by the problem and asks for your help. -----Note:----- - Bi must be a positive integer where Bi denotes the ith element of the array B. - If there are multiple solutions satisfying the condition, you can print any \\"one\\" solution. -----Input:----- - First line will contain P, number of test cases. Then, the test cases follow. - Each test case contains a single line of input, integer M. -----Output:----- For each test case, output in a single line, array B of M integers, satisfying the equation sum Bi = sum (5 * Bi)^2. -----Constraints:----- - 1 leq P leq 1000 - 1 leq M leq 1000 -----Sample Input:----- 2 3 4 -----Sample Output:----- 1 5 5 2 2 10 10","solution":"def generate_array(M): Returns an array B of length M such that it satisfies the equation sum(Bi) = sum((5 * Bi)^2). # For the equation sum(Bi) = sum((5 * Bi)^2) to be true, # each Bi must satisfy Bi = 1 or greater. # Picking 1 for the first element, 5 for the remaining elements # suffices for the minimum elements required to keep the sum balance B = [1] + [5] * (M - 1) return B def solve(P, test_cases): results = [] for M in test_cases: result = generate_array(M) results.append(result) return results"},{"question":"Create a function that takes two input strings and returns true if one string is an anagram of the other and false otherwise. An anagram is a word, phrase, or name formed by rearranging the letters of another, such as \\"cinema,\\" formed from \\"iceman.\\" The input strings are not empty and consist of lowercase alphabets only. For example: ``` isAnagram(\\"cinema\\", \\"iceman\\") → true isAnagram(\\"listen\\", \\"silent\\") → true isAnagram(\\"hello\\", \\"world\\") → false isAnagram(\\"rat\\", \\"car\\") → false ```","solution":"def isAnagram(s1, s2): Returns true if s1 is an anagram of s2, otherwise returns false. return sorted(s1) == sorted(s2)"},{"question":"Problem You are given a binary tree, where each node contains an integer value. Your task is to count the number of paths that have a sum equal to a given target value. A path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path does not need to go through the root. The path must contain at least one node. Write a function that receives the root of the binary tree and the target sum, and returns the number of paths that have the given sum. Consider the following example: 10 / 5 -3 / 3 2 11 / 3 -2 1 If the target sum is 8, there are three paths that sum to 8: 1. 5 -> 3 2. 5 -> 2 -> 1 3. -3 -> 11 Constraints: * The number of nodes in the tree is in the range [1, 2000]. * -1000 <= Node.val <= 1000 * -1000000 <= target <= 1000000 Function signature: ```python def count_paths_with_sum(root: TreeNode, target_sum: int) -> int: pass ``` Input - The first line contains an integer n, the number of nodes. - The next n lines, each containing three integers: the value of the node, and the indices of its left and right children (use -1 to indicate that a child is null). - The last line contains the integer target_sum. Output - Output the number of paths that sum to the given target value. Example Input 7 10 1 2 5 3 4 -3 -1 5 3 6 7 2 -1 8 11 -1 -1 3 -1 -1 1 -1 -1 3 5 -2 Output 3 Note In this example, the target sum is 8. The paths that sum to 8 are: 1. 5 -> 3 2. 5 -> 2 -> 1 3. -3 -> 11","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def count_paths_with_sum(root: TreeNode, target_sum: int) -> int: def dfs(node, current_path): if not node: return 0 # Count the number of valid paths that end at the current node current_path.append(node.val) path_count, path_sum = 0, 0 for i in range(len(current_path) - 1, -1, -1): path_sum += current_path[i] if path_sum == target_sum: path_count += 1 # Traverse the left and right children path_count += dfs(node.left, current_path) path_count += dfs(node.right, current_path) # Remove the current node\'s value from the path before returning up the call stack current_path.pop() return path_count return dfs(root, []) # Auxiliar function to build a tree from input data def build_tree_from_input(nodes): if not nodes or len(nodes) == 0: return None node_list = [None] * len(nodes) for i in range(len(nodes)): if nodes[i][0] != -1: node_list[i] = TreeNode(nodes[i][0]) for i in range(len(nodes)): if nodes[i][1] != -1: node_list[i].left = node_list[nodes[i][1]] if nodes[i][2] != -1: node_list[i].right = node_list[nodes[i][2]] return node_list[0] def main(): import sys input = sys.stdin.read data = input().split() index = 0 n = int(data[index]) index += 1 nodes = [] for _ in range(n): val, left, right = int(data[index]), int(data[index + 1]), int(data[index + 2]) nodes.append((val, left, right)) index += 3 target_sum = int(data[index]) root = build_tree_from_input(nodes) result = count_paths_with_sum(root, target_sum) print(result)"},{"question":"You have a collection of N books, where each book has a unique integer ID. You decide to arrange the books on a shelf. Each time you decide to place a book on the shelf, you can either place it at the left end or the right end of the shelf. After placing all the books, you remember the sequence of book IDs on the shelf but have forgotten the order in which they were placed. Given the sequence of book IDs on the shelf, reconstruct the order in which the books were added to the shelf. Note that each book ID appears exactly once. -----Input----- The first line contains an integer N (1 ≤ N ≤ 1000), the number of books. The second line contains N distinct integers, the book IDs, which represent the sequence of books on the shelf (1 ≤ book ID ≤ 10000). -----Output----- Print a sequence of instructions, each being \\"LEFT\\" or \\"RIGHT\\", that represents the order in which the books were added to the shelf. If there are multiple valid sequences, print any of them. -----Examples----- Input 3 2 1 3 Output RIGHT LEFT RIGHT Input 4 4 3 1 2 Output LEFT LEFT RIGHT RIGHT -----Note----- In the first example, one possible sequence is as follows: 1. Add book 3 to the right end: [3] 2. Add book 1 to the left end: [1, 3] 3. Add book 2 to the left end: [2, 1, 3] In the second example, one possible sequence is: 1. Add book 2 to the right end: [2] 2. Add book 1 to the left end: [1, 2] 3. Add book 3 to the right end: [1, 2, 3] or add book 3 to the left end: [3, 1, 2] 4. Add book 4 to the left end: [4, 1, 2]","solution":"def reconstruct_order(N, shelf_sequence): Reconstructs the order of operations to place books on the shelf. Args: N (int): Number of books. shelf_sequence (list): List of book IDs in the order they appear on the shelf. Returns: list: List of instructions (\\"LEFT\\" or \\"RIGHT\\"). if N <= 0: return [] result = [] left_end = shelf_sequence[0] right_end = shelf_sequence[0] for i in range(1, N): if shelf_sequence[i] < left_end: result.append(\\"LEFT\\") left_end = shelf_sequence[i] else: result.append(\\"RIGHT\\") right_end = shelf_sequence[i] return [\\"RIGHT\\"] + result # The first book can be placed at right"},{"question":"In a galaxy far, far away, a group of intergalactic travelers uses a unique number system. This system is composed of a set of unique integers, and they always need to find the \\"intergalactic balance point\\" of the set. The intergalactic balance point of a set of integers is defined as the element that minimizes the sum of absolute differences with all other elements in the set. More formally, given a set of integers S = {s1, s2, ..., sn}, find the integer x in S such that the sum of |x - si| for all i is minimized. Your task is to help the travelers find the intergalactic balance point for their set of integers. If there are multiple such integers, return the smallest one. Input The first line contains an integer n (1 ≤ n ≤ 10^6) — the number of elements in the set. The second line contains n space-separated integers s1, s2, ..., sn, where each integer represents an element of the set (|si| ≤ 10^9). Output Output a single integer — the intergalactic balance point of the set. Examples Input 7 1 3 7 8 7 3 1 Output 3 Input 4 -10 3 6 2 Output 2","solution":"def intergalactic_balance_point(n, s): Finds the intergalactic balance point of a set of integers. Args: n (int): the number of elements in the set. s (list of int): the set of integers. Returns: int: the intergalactic balance point. # Sort the list s.sort() # The balance point is the median for the sorted list # For odd number of elements, it\'s the middle element # For even number of elements, we return the smaller of the two middle elements median_index = (n - 1) // 2 return s[median_index]"},{"question":"Given an array of integers Arr of size N and an integer X, remove all elements from the array that are less than or equal to X. Return the remaining array in the same order. Example 1: Input: N = 6, X = 3 Arr[] = {1, 2, 4, 3, 5, 6} Output: 4 5 6 Explanation: Elements [1, 2, 3] are less than or equal to 3, so they are removed. Remaining elements are [4, 5, 6]. Example 2: Input: N = 5, X = 7 Arr[] = {8, 7, 6, 10, 5} Output: 8 10 Explanation: Elements [7, 6, 5] are less than or equal to 7, so they are removed. Remaining elements are [8, 10]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function removeElements() which takes the array of integers arr, n and x as parameters and returns the array after removing the elements. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 1 ≤ X ≤ 10^3 1 ≤ Arr[i] ≤ 10^3","solution":"def removeElements(arr, n, x): Removes elements from the array that are less than or equal to x. :param arr: List[int] - The array of integers. :param n: int - The size of the array. :param x: int - The integer threshold value. :return: List[int] - The filtered array with elements greater than x. return [num for num in arr if num > x]"},{"question":"Given two non-empty arrays of integers, `arr1` and `arr2`, write a function that returns their intersection in a new array. The intersection should include each element that appears in both arrays. The result must not contain any duplicates and can be returned in any order. For example, if `arr1 = [4, 9, 5, 4]` and `arr2 = [9, 4, 9, 8, 4]`, the function should return `[4, 9]` (or `[9, 4]`). If there is no intersection, return an empty array. **Constraints:** - The elements in the input arrays will be integers. - The length of each input array will be between 1 and 1000. - You may assume each array does not include any invalid elements. Write function definition as: ```python def intersect(arr1, arr2): # Your code here ```","solution":"def intersect(arr1, arr2): Returns the intersection of two arrays as a new array, without duplicates. The intersection should include each element that appears in both arrays. # Use set intersection to find common elements intersection_set = set(arr1).intersection(set(arr2)) # Convert the set back to a list return list(intersection_set)"},{"question":"Given an integer array `nums` of size N and a target integer `k`, return the total number of continuous subarrays whose product equals to `k`. Example 1: Input: nums = [10, 2, 2, 5, 4], k = 20 Output: 3 Explanation: There are three subarrays whose product equals to 20: Subarray [10, 2] at index 0-1 Subarray [2, 10] at index 1-2 Subarray [5, 4] at index 3-4 Example 2: Input: nums = [1, 2, 3, 4], k = 6 Output: 1 Explanation: There is only one subarray whose product is 6: [2, 3] at index 1-2 Your task: You don\'t need to read input or print anything. Your task is to complete the function `numSubarrayProductEqualsK()` which takes the array `nums` and the integer `k` as input and returns the number of occurrence of subarray products that equal to `k`. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= nums.length <= 10^4 1 <= nums[i] <= 1000 1 <= k <= 10^6","solution":"def numSubarrayProductEqualsK(nums, k): if k == 0: return 0 # If k is 0, no product of positive integers can be 0. count = 0 product = 1 left = 0 for right in range(len(nums)): product *= nums[right] while product > k and left <= right: product //= nums[left] left += 1 if product == k: count += 1 return count"},{"question":"A company is planning to build new office spaces, and they want to minimize the area of the space while ensuring all the necessary departments can be accommodated. Each department needs a rectangular area to function, and the new office space should be a single rectangle. You have been asked to write a program to determine the minimum rectangle size required to accommodate all the departments. The departments cannot be rotated, and they must be placed in the same orientation as given. Input: The first line of input contains an integer T, denoting the number of test cases, followed by T test cases. Each test case starts with an integer N, the number of departments, followed by N pairs of integers, where each pair denotes the length and width of the department. Output: For each test case, output the dimensions of the minimum rectangle required to accommodate all the departments, in the format: \\"L W\\" (without quotes), where L is the length and W is the width of the rectangle. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ length, width ≤ 100 SAMPLE INPUT 2 3 4 5 2 3 6 2 2 3 6 5 4 SAMPLE OUTPUT 12 5 8 6 Explanation: Sample Test Case #1: - Three departments: (4x5), (2x3), and (6x2). - The minimum rectangle to accommodate these in the given orientations is of size 12 x 5. Sample Test Case #2: - Two departments: (3x6) and (5x4). - The minimum rectangle to accommodate these is of size 8 x 6. Note: The departments are placed one next to another either horizontally or vertically to find the minimum possible rectangle that can accommodate all of them.","solution":"def min_rectangle_size(test_cases): res = [] for case in test_cases: dimensions = case[\'dimensions\'] N = case[\'N\'] max_width = 0 total_length = 0 for length, width in dimensions: total_length += length max_width = max(max_width, width) res.append((total_length, max_width)) return res # Reading input and formatting into the required structure def read_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) cases = [] index = 1 for _ in range(T): case = {} case[\'N\'] = int(lines[index]) dimensions = [] for i in range(case[\'N\']): length, width = map(int, lines[index + 1 + i].split()) dimensions.append((length, width)) case[\'dimensions\'] = dimensions cases.append(case) index += 1 + case[\'N\'] return cases def solve(input_data): cases = read_input(input_data) results = min_rectangle_size(cases) return results"},{"question":"You are given an undirected graph with n vertices and m edges. Each edge has a weight associated with it. Your task is to find the maximum weight that can be achieved by selecting a set of edges such that all vertices are connected (i.e., form a connected spanning subgraph). The connected spanning subgraph can include cycles, and the goal is not to form a tree but to achieve maximum total weight while ensuring all vertices remain connected. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000) - the number of vertices and edges of the graph respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), meaning that there is an edge between vertices u and v with weight w. Output Print a single integer — the maximum total weight of edges in a connected spanning subgraph of the given graph. Example Input 4 5 1 2 10 1 3 15 2 3 10 2 4 5 3 4 10 Output 50 Note In this example, you can select all the edges to form a connected spanning subgraph with a total weight of 50. The graph remains connected if all edges are included.","solution":"def max_weight_connected_subgraph(n, m, edges): # Sort edges by weight in descending order edges.sort(key=lambda x: -x[2]) parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): root_x = find(x) root_y = find(y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 # Go through the edges in descending order of weight total_weight = 0 for u, v, w in edges: if find(u) != find(v): union(u, v) total_weight += w # Check if all vertices are connected root = find(1) for i in range(2, n + 1): if find(i) != root: return \\"Not all vertices are connected.\\" return total_weight # An example input n = 4 m = 5 edges = [ (1, 2, 10), (1, 3, 15), (2, 3, 10), (2, 4, 5), (3, 4, 10) ] print(max_weight_connected_subgraph(n, m, edges)) # Expected output: 50"},{"question":"A company distributing online exam software has n licenses and m companies that need to use these licenses. Each company can use only one license at a time. However, to prevent misuse, the owner wants to implement a scheduling system such that no two companies are using the same license at the exact same time. The system should also ensure that each company uses the licenses as evenly as possible over the given time slots, t. Your task is to determine a valid assignment of licenses to companies for each of the t time slots. If it is not possible to schedule the licenses without conflicts, print \\"Not Possible\\". -----Input----- The first line of input contains three space-separated integers n, m, and t (1 ≤ n, m ≤ 100; 1 ≤ t ≤ 1000). -----Output----- If a valid arrangement is possible, print t lines, with each line containing m space-separated integers. Each integer will represent the license assigned to each company in a given time slot. If it is not possible, print \\"Not Possible\\". -----Examples----- Input 3 3 2 Output 1 2 3 2 3 1 Input 2 3 3 Output Not Possible -----Note----- Note that each company must use the licenses as evenly as possible. However, no two companies can use the same license at the same time slot.","solution":"def schedule_licenses(n, m, t): Returns a valid scheduling of licenses for each of the time slots, or \\"Not Possible\\" if it can\'t be done. Args: n: number of licenses m: number of companies t: number of time slots Returns: A list of lists containing m integers each if possible, else a string \\"Not Possible\\". if n < m: return \\"Not Possible\\" schedule = [] for i in range(t): time_slot = [] for j in range(m): license_to_assign = (i + j) % n + 1 time_slot.append(license_to_assign) schedule.append(time_slot) return schedule"},{"question":"You are given a list of integers and you need to determine if there is a pair of distinct elements in the list that sums up to a given target value. Write a function `find_pair_with_sum` that takes in two parameters: a list of integers `nums` and an integer `target`. The function should return a tuple of two elements that sum up to the target, or an empty tuple if no such pair exists. If there are multiple valid pairs, return any one of them. Input - A list of integers `nums` (0 ≤ len(nums) ≤ 10^5, -10^9 ≤ nums[i] ≤ 10^9) - An integer `target` (-10^9 ≤ target ≤ 10^9) Output The function should return a tuple of two elements (a, b) from `nums` such that a + b = target, and a ≠ b. If no such pair exists, return an empty tuple. Constraints - Each input list will have distinct integers. - The solution should have a time complexity of O(n), where n is the number of elements in the list. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: (2, 7) Example 2: Input: nums = [3, 2, 4], target = 6 Output: (2, 4) Example 3: Input: nums = [1, 2, 3, 4, 5], target = 10 Output: () Example 4: Input: nums = [-1, -2, -3, -4, -5], target = -8 Output: (-3, -5) Note: In the examples where multiple valid pairs exist, any one of the correct pair may be returned. Function Signature: ```python def find_pair_with_sum(nums: List[int], target: int) -> Tuple[int, int]: ```","solution":"from typing import List, Tuple def find_pair_with_sum(nums: List[int], target: int) -> Tuple[int, int]: Returns a tuple of two distinct elements from nums that add up to target, or an empty tuple if no such pair exists. num_set = set() for num in nums: complement = target - num if complement in num_set: return (complement, num) num_set.add(num) return ()"},{"question":"A company is having an annual competition where employees are tested on their ability to handle basic string operations efficiently. One of the tasks is to check if a given string can be converted to another string by performing a series of the following operations any number of times: 1. Remove a character from the start of the string. 2. Remove a character from the end of the string. Given two strings A and B, determine if it is possible to convert string A to string B using the above operations. Input: The first line contains an integer T, the number of test cases. Each test case consists of two lines. The first line contains the string A, and the second line contains the string B. Output: For each test case, print \\"YES\\" if it is possible to convert string A to string B, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 20 1 ≤ |A|, |B| ≤ 1000 Sample Input: 2 abcdef cde abcdef abcdeg Sample Output: YES NO","solution":"def can_convert(A, B): Determines if string A can be converted to string B by removing characters from the start or end of A. if B in A: return \\"YES\\" return \\"NO\\" def solve(test_cases): results = [] for A, B in test_cases: results.append(can_convert(A, B)) return results"},{"question":"Alan is organizing a series of workshops for a group of coders. There are n workshops planned, each on a different topic. Every coder has a subset of workshops they are interested in attending. However, there is a rule: no two coders can attend more than one workshop together. This means that the set of workshops each pair of coders commonly attends can only contain at most one workshop. Alan wants to determine a valid schedule where no two coders attend more than one common workshop. If such a schedule is impossible, he needs to know that too. Input The first line contains two integers n (1 ≤ n ≤ 100,000) and m (0 ≤ m ≤ 200,000), denoting the number of coders and the number of pairs of coders who share at least one workshop. Each of the next m lines contains two integers ai and bi (1 ≤ ai, bi ≤ n; ai ≠ bi), indicating that coder ai and coder bi have at least one workshop in common. Output Output one line. If it is possible to schedule the workshops such that no two coders attend more than one common workshop, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 3 2 1 2 2 3 Output YES Input 3 3 1 2 2 3 1 3 Output NO Input 4 4 1 2 2 3 3 4 4 1 Output YES Note For the first sample, it is possible to schedule workshops such that no two coders attend more than one workshop together because only coder 2 shares workshops with both coder 1 and coder 3, but not more than one. For the second sample, coder 1, coder 2, and coder 3 cannot attend the workshops without violating the rule since coder 1 shares workshops with both coder 2 and 3, and coder 2 shares workshops with both coder 1 and 3. For the third sample, it is possible to find a valid schedule such that no two coders attend more than one common workshop together.","solution":"def can_schedule_workshops(n, m, pairs): # Creating an adjacency list for the graph adj_list = [[] for _ in range(n)] for a, b in pairs: adj_list[a - 1].append(b - 1) adj_list[b - 1].append(a - 1) # Color array to store colors assigned to all vertices. # Initially, all vertices are unassigned (-1). color = [-1] * n def bfs_check(node): queue = [node] color[node] = 0 # Assign first color to node while queue: u = queue.pop(0) for v in adj_list[u]: if color[v] == -1: # If v is not colored color[v] = 1 - color[u] queue.append(v) elif color[v] == color[u]: # If adjacent have same color return False return True # Check for each uncolored node for i in range(n): if color[i] == -1: if not bfs_check(i): return \\"NO\\" return \\"YES\\""},{"question":"Alice is working on a project that involves analyzing sequences of integers. She is particularly interested in sequences that contain a specified range of integers in a given order. Alice asks you to help her write a program that determines how many times a given subsequence appears within another sequence. For example, the subsequence {1, 2, 3} appears twice in the sequence {1, 2, 3, 4, 1, 2, 3, 5}. -----Input----- Input consists of two lines: 1. The first line contains a single integer n (1 leq n leq 1000), representing the length of the sequence to search within (the main sequence). 2. The second line contains n space-separated integers representing the main sequence. Each integer x_i in the sequence satisfies: 1 leq x_i leq 100. 3. The third line contains a single integer m (1 leq m leq 100), representing the length of the subsequence to find. 4. The fourth line contains m space-separated integers representing the subsequence. Each integer y_i in the subsequence satisfies: 1 leq y_i leq 100. -----Output----- Output a single integer representing the number of times the subsequence appears as a contiguous segment within the main sequence. -----Examples----- Sample Input: 8 1 2 3 4 1 2 3 5 3 1 2 3 Sample Output: 2 Sample Input: 5 6 7 8 9 10 2 7 8 Sample Output: 1","solution":"def count_subsequence_occurrences(main_sequence, subsequence): Counts how many times the subsequence appears within the main sequence as a contiguous segment. :param main_sequence: List of integers representing the main sequence. :param subsequence: List of integers representing the subsequence to find. :return: An integer count of how many times the subsequence appears in the main sequence. n = len(main_sequence) m = len(subsequence) count = 0 for i in range(n - m + 1): if main_sequence[i:i + m] == subsequence: count += 1 return count"},{"question":"A secure system requires an alphanumeric code to gain access. The alphanumeric code is defined as a string that contains both alphabets (lowercase) and digits. However, the system has a unique way of validating the code: - If the code contains two consecutive identical characters (either alphabet or digit), it is considered invalid. - If the code contains two consecutive alphabets that form a valid English word, it is considered invalid. The list of valid English words is given as input. - If the code contains three or more consecutive numbers, it is considered invalid. - If it passes all the above conditions, it is considered valid. Task You need to create a function `is_valid_code(n: int, m: int, code: str, words: List[str]) -> str` that checks whether the given code is valid or not. # Input - The first line contains an integer `n` (`1 ≤ n ≤ 100000`) — the length of the code. - The second line contains an integer `m` (`1 ≤ m ≤ 10000`) — the number of valid English words. - The third line contains a string `code` of length `n` — the alphanumeric code. - The next `m` lines contain one valid English word each. # Output Print \\"YES\\" if the code is valid, otherwise print \\"NO\\". # Examples Input ``` 10 3 a1b2c3d4e5 abc ab cd ``` Output ``` YES ``` Input ``` 8 2 aabbcc11 aa bb ``` Output ``` NO ``` Input ``` 5 2 abcde bc de ``` Output ``` NO ``` # Note In the first example, the code does not contain any consecutive identical characters or valid English words, and there are no three consecutive numbers, so it is valid. In the second example, the code contains consecutive identical characters (`aa`, `bb`), which makes it invalid. In the third example, the code contains consecutive alphabets that form valid English words (`bc`, `de`), which makes it invalid.","solution":"def is_valid_code(n, m, code, words): words_set = set(words) # Check for two consecutive identical characters for i in range(1, n): if code[i] == code[i - 1]: return \\"NO\\" # Check for valid English words for word in words_set: if word in code: return \\"NO\\" # Check for three or more consecutive numbers count_numbers = 0 for char in code: if char.isdigit(): count_numbers += 1 if count_numbers >= 3: return \\"NO\\" else: count_numbers = 0 # If all checks passed return \\"YES\\""},{"question":"A robot is placed on an n times n grid, starting at the top-left corner at coordinate (1, 1). The robot\'s goal is to reach the bottom-right corner at coordinate (n, n). The robot can move one step to the right or one step down at each move. However, there are obstacles on some cells of the grid which the robot cannot step on. Formally, there are m obstacles placed on the grid, and the i-th obstacle is at coordinate (x_i, y_i). Determine the number of different paths the robot can take to reach the goal, considering it can only move right or down and cannot land on an obstacle. If there is no valid path, return 0. -----Input----- The first line contains two integers n and m (1 le n le 100, 0 le m le n cdot n) — the size of the grid and the number of obstacles. Each of the next m lines contains two integers x_i and y_i (1 le x_i, y_i le n) — the coordinates of the i-th obstacle. It\'s guaranteed that there will be no obstacle at (1, 1) and (n, n). -----Output----- Print one integer — the number of different paths the robot can take to reach (n, n) from (1, 1). -----Examples----- Input 3 1 2 2 Output 2 Input 3 3 1 2 2 1 2 2 Output 0 Input 3 0 Output 6 -----Note----- In the first example, the robot can take two different paths to reach the goal: 1. (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) 2. (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) In the second example, all possible paths are blocked by obstacles. In the third example, there are no obstacles, so the robot has six possible paths to reach the goal.","solution":"def num_paths(n, m, obstacles): # Create a grid initialized with zeros grid = [[0]*n for _ in range(n)] # Mark obstacles on the grid for x, y in obstacles: grid[x-1][y-1] = -1 # Initialize the starting point if grid[0][0] == 0: grid[0][0] = 1 # Fill the grid while avoiding obstacles for i in range(n): for j in range(n): if grid[i][j] == -1: continue if i > 0 and grid[i-1][j] != -1: grid[i][j] += grid[i-1][j] if j > 0 and grid[i][j-1] != -1: grid[i][j] += grid[i][j-1] return max(grid[-1][-1], 0) # Ensure not to return paths through obstacles"},{"question":"You are given a list of students and their respective scores in a programming contest. Each student is identified by their unique registration number. Some students might have multiple entries in the list because they submitted multiple solutions. You need to determine the student with the highest score for each test case. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case starts with an integer n denoting the number of entries followed by n lines, each containing a registration number and the score obtained by the student. ------ Output ------ For each test case, print the registration number of the student with the highest score. If multiple students have the highest score, print the one who appeared first in the input list. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ n ≤ 10^{5} 1 ≤ text{registration number} ≤ 10^9 0 ≤ text{score} ≤ 100 sum of n over all test cases ≤ 10^{5} ------ Sample Input 1 ------ 2 3 101 50 102 80 103 75 4 201 90 202 85 202 90 203 89 ------ Sample Output 1 ------ 102 201","solution":"def find_top_scorer(test_cases): results = [] for case in test_cases: highest_score = -1 top_scorer = None seen_students = {} for registration_number, score in case: if registration_number not in seen_students or seen_students[registration_number] < score: seen_students[registration_number] = score if score > highest_score: highest_score = score top_scorer = registration_number elif score == highest_score: if top_scorer not in seen_students or seen_students[top_scorer] < seen_students[registration_number]: top_scorer = registration_number results.append(top_scorer) return results # Example usage if __name__ == \\"__main__\\": T = 2 test_cases = [ [(101, 50), (102, 80), (103, 75)], [(201, 90), (202, 85), (202, 90), (203, 89)] ] print(find_top_scorer(test_cases))"},{"question":"Imagine you are working at a small startup, and you need to design a database to keep track of employee attendance. The attendance records need to be corrected if there are any discrepancies such as overlapping periods of being present or missing in+out timestamps. You are given a list of attendance logs for the employees. Each log entry contains an employee\'s ID, the timestamp of when they arrive (clock-in), and the timestamp of when they leave (clock-out). You need to write a function to filter and return the corrected list of attendance logs. The corrections involve: 1. Merging overlapping periods of being present. 2. Ensuring there is a valid clock-in and clock-out for each record. Your task is to implement the function `correct_attendance_logs(n, logs)` where `n` is an integer representing the total number of employees and `logs` is a list of tuples representing the attendance log entries. Each entry in the list is a tuple (employee_id, clock_in, clock_out). Input: - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of employees. - The next `m` lines (1 ≤ m ≤ 10000) each contain three values: an integer employee_id (1 ≤ employee_id ≤ n), a string clock_in in the format \'HH:MM\', and a string clock_out in the format \'HH:MM\'. Output: - The output should be a list of tuples in the same format (employee_id, clock_in, clock_out) representing the corrected list of attendance logs. Examples: Input: 2 1 08:00 09:00 1 09:00 10:00 2 10:00 11:00 2 10:30 12:00 Output: 1 08:00 10:00 2 10:00 12:00 Input: 3 1 08:00 09:30 1 09:00 09:45 2 09:00 10:00 3 10:00 11:00 Output: 1 08:00 09:45 2 09:00 10:00 3 10:00 11:00 Note: In the first example, the intervals for employee 1 are [08:00-09:00] and [09:00-10:00]. These intervals overlap, so they are merged into one interval [08:00-10:00]. The intervals for employee 2 are [10:00-11:00] and [10:30-12:00]. These intervals also overlap, so they are merged into [10:00-12:00]. In the second example, the intervals [08:00-09:30] and [09:00-09:45] for employee 1 overlap, so they merge into [08:00-09:45]. The intervals for employees 2 and 3 do not overlap, so they remain unchanged.","solution":"from datetime import datetime def correct_attendance_logs(n, logs): Corrects the attendance logs by merging overlapping periods and ensuring valid clock-in and clock-out. Args: n (int): Total number of employees. logs (list): List of tuples (employee_id, clock_in, clock_out). Returns: list: Corrected list of attendance logs. def merge_intervals(intervals): intervals.sort(key=lambda x: x[0]) # Sort by clock_in time merged = [] for current in intervals: if not merged or merged[-1][1] < current[0]: merged.append(current) else: merged[-1] = (merged[-1][0], max(merged[-1][1], current[1])) return merged # Group logs by employee ID from collections import defaultdict employee_logs = defaultdict(list) for emp_id, clock_in, clock_out in logs: clock_in_time = datetime.strptime(clock_in, \\"%H:%M\\") clock_out_time = datetime.strptime(clock_out, \\"%H:%M\\") employee_logs[emp_id].append((clock_in_time, clock_out_time)) # Correct the attendance logs corrected_logs = [] for emp_id in employee_logs: merged_intervals = merge_intervals(employee_logs[emp_id]) for interval in merged_intervals: corrected_logs.append((emp_id, interval[0].strftime(\\"%H:%M\\"), interval[1].strftime(\\"%H:%M\\"))) # Sort the results by employee_id and clock_in time for consistent output corrected_logs.sort(key=lambda x: (x[0], x[1])) return corrected_logs"},{"question":"In a remote village, there are unique trees known as the \\"Magic Trees\\". Each tree has branches positioned in such a way that from the root to any leaf, the path forms a palindromic sequence of branch lengths. The villagers have a requirement to plant these Magic Trees in their garden and need to determine which sequences of branch lengths will form a valid Magic Tree. You are provided with a list of sequences of branch lengths. Your task is to write a program to identify which of these sequences can form a valid Magic Tree. A sequence of branch lengths forms a valid Magic Tree if the sequence is palindromic. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of sequences. Each of the next t lines contains a sequence of integers separated by spaces. Each sequence can have a length between 1 and 100, and each length is between 1 and 1000. Output For each sequence, output \\"YES\\" if the sequence forms a valid Magic Tree, and \\"NO\\" otherwise. Examples Input 4 1 2 3 2 1 4 5 4 7 8 8 7 1 3 5 7 Output YES YES YES NO Explanation In the first sample, the sequence [1, 2, 3, 2, 1] is a palindrome, so it forms a valid Magic Tree. In the second sample, the sequence [4, 5, 4] is also a palindrome, so it forms a valid Magic Tree. In the third sample, the sequence [7, 8, 8, 7] is a palindrome as well, so it forms a valid Magic Tree. In the fourth sample, the sequence [1, 3, 5, 7] is not a palindrome, so it does not form a valid Magic Tree.","solution":"def is_palindrome(sequence): Returns \'YES\' if the given sequence of integers is a palindrome, otherwise \'NO\'. return \\"YES\\" if sequence == sequence[::-1] else \\"NO\\" def check_magic_trees(sequences): Takes a list of sequences and returns a list of results where each result is either \'YES\' or \'NO\' indicating if the respective sequence is a valid Magic Tree (palindromic sequence). results = [] for sequence in sequences: results.append(is_palindrome(sequence)) return results"},{"question":"Uma is a book lover and she has a collection of books. She wants to organize her books by their prices in ascending order but also wants to keep track of their original positions. Help Uma achieve this by writing a function that sorts the books by price while preserving their original indices. Example 1: Input: [(3, \\"Book A\\"), (1, \\"Book B\\"), (2, \\"Book C\\")] Output: [(1, \\"Book B\\"), (2, \\"Book C\\"), (3, \\"Book A\\")] Example 2: Input: [(100, \\"Novel X\\"), (50, \\"Novel Y\\"), (200, \\"Novel Z\\"), (150, \\"Novel W\\")] Output: [(50, \\"Novel Y\\"), (100, \\"Novel X\\"), (150, \\"Novel W\\"), (200, \\"Novel Z\\")] Your Task: Create the function `sortBooksByPrice(book_list: list)` that takes in a list of tuples, where each tuple contains a price (integer) and book name (string). The function should return a new list of tuples sorted by price while retaining the original positions of the books. Constraints: - The list contains between 1 and 50 books. - Book prices are distinct integers between 1 and 1000. - Book names are distinct strings of up to 50 characters.","solution":"def sortBooksByPrice(book_list): Sorts a list of books by price in ascending order while preserving their original positions. :param book_list: List of tuples where each tuple contains a price (int) and a book name (str) :return: Sorted list of tuples by price in ascending order return sorted(book_list, key=lambda x: x[0])"},{"question":"Given an array arr[] of size N that contains integers ranging from 1 to N and is missing one number. Your task is to find the missing number. Example 1: Input: N = 5 arr[] = {1, 2, 3, 5} Output: 4 Explanation: Since 4 is missing from the array, output is 4. Example 2: Input: N = 7 arr[] = {1, 2, 4, 5, 6, 7} Output: 3 Explanation: Since 3 is missing from the array, output is 3. Your Task: You don\'t need to read input or print anything. Complete the function findMissingNumber() which takes the array arr[] and its size N as input parameters and returns the missing number. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^6 1 <= arr[i] <= 10^6","solution":"def findMissingNumber(arr, N): Find the missing number in the array of integers ranging from 1 to N. expected_sum = N * (N + 1) / 2 actual_sum = sum(arr) return int(expected_sum - actual_sum)"},{"question":"Peter, Sam, and Tom are going on an adventure race as a team. During their training sessions, they compete in different types of challenges individually to improve their skills. After each challenge, they log the winner to keep track of their progress. However, it\'s challenging to make sure all entries are valid since only the individual who was participating can win, and others should be spectators. They need your help to validate the logged entries based on the following rules: 1. Peter, Sam, and Tom take turns participating in each new challenge. 2. Peter participates first, followed by Sam, and then Tom. 3. Once a person has participated, they do not take part in the next two challenges, i.e., they act as spectators the next couple of rounds. Based on these rules, they keep a log of who won each challenge. Your task is to determine whether the log is consistent with the given rules. -----Input----- The first line contains one integer n (1 ≤ n ≤ 100) — the number of challenges Peter, Sam, and Tom participated in. Then n lines follow, describing the challenge log. The i-th line contains one integer w_{i} (1 ≤ w_{i} ≤ 3) which is equal to 1 if Peter won i-th challenge, 2 if Sam won i-th challenge, and 3 if Tom won i-th challenge. -----Output----- Print VALID if the situation described in the log was possible. Otherwise, print INVALID. -----Examples----- Input 4 1 2 3 1 Output VALID Input 3 1 1 2 Output INVALID -----Note----- In the first example, the possible order is: Peter wins the first challenge, Sam wins the second, Tom wins the third, and Peter again wins the fourth, since all are following the rules of being a participant in a rotational manner. In the second example, the situation is invalid because Peter cannot win two consecutive challenges as he needs to spectate for two rounds after participation.","solution":"def is_valid_log(n, log): Check if the given log is valid based on the rules described. Returns \\"VALID\\" if the log is correct, \\"INVALID\\" otherwise. participants = [0, 1, 2] # indices 0 for Peter (1), 1 for Sam (2), 2 for Tom (3) for i in range(n): winner = log[i] - 1 # convert winner to zero-index if winner != participants[0]: return \\"INVALID\\" # rotate participants participants = participants[1:] + [participants[0]] return \\"VALID\\""},{"question":"You are tasked with organizing a parade and you need to determine the optimal way to arrange a sequence of floats. Each float is represented by an integer value, and you want to arrange the floats such that the total absolute difference between consecutive floats is minimized. The absolute difference between two integers a and b is given by |a - b|, and the total absolute difference for a sequence [a1, a2, ..., an] is |a1 - a2| + |a2 - a3| + ... + |an-1 - an|. Determine the arrangement of floats that minimizes this total absolute difference and return the minimum value of this difference. Input Format The first line contains the number of cases T. T cases follow. Each case starts with an integer N on the first line, followed by N integers on the second line representing the floats. Constraints 1 <= T <= 10 2 <= N <= 1000 1 <= float value <= 10000 Output Format Output T lines, each containing the minimum total absolute difference for the respective case. Sample Input 3 3 1 5 3 4 2 4 6 7 5 10 1 3 8 4 Sample Output 4 4 14 Explanation For the first case, the optimal arrangement is [1, 3, 5] with a total difference of |1 - 3| + |3 - 5| = 2 + 2 = 4. For the second case, the optimal arrangement is [2, 4, 6, 7] with a total difference of |2 - 4| + |4 - 6| + |6 - 7| = 2 + 2 + 1 = 5. For the third case, the optimal arrangement is [1, 3, 4, 8, 10] with a total difference of |1 - 3| + |3 - 4| + |4 - 8| + |8 - 10| = 2 + 1 + 4 + 2 = 9.","solution":"def minimize_total_absolute_difference(T, cases): def minimize_difference(arr): # Sort the array to minimize differences between consecutive elements arr.sort() total_difference = 0 for i in range(1, len(arr)): total_difference += abs(arr[i] - arr[i - 1]) return total_difference results = [] for i in range(T): N = cases[i][0] floats = cases[i][1] results.append(minimize_difference(floats)) return results"},{"question":"Given a list of integers, write a function that returns a list of all integers in the input list that are prime numbers. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. For example, given the input list `[2, 3, 4, 5, 6, 10, 13, 17, 19, 21, 23, 24, 29]`, the function should return: ``` [2, 3, 5, 13, 17, 19, 23, 29] ``` You can assume that the input list will always contain at least one integer and that it may contain duplicate values. Factors such as efficiency and handling of larger lists should be considered. **Function Signature:** ```python def filter_prime_numbers(numbers: list) -> list: # Your code here ```","solution":"def is_prime(num): if num <= 1: return False if num == 2 or num == 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def filter_prime_numbers(numbers): Returns a list of prime numbers from the input list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Sarah is organizing a coding competition and she wants to create a challenging problem for the participants. She decides to focus on a problem involving sequences. Sarah defines a \\"beautiful\\" sequence as a sequence of length k consisting of distinct positive integers such that the sum of the absolute differences of consecutive elements is maximized. Can you help Sarah determine the maximum possible sum of the absolute differences for a \\"beautiful\\" sequence of length k? ----Input---- The first (and only) line contains an integer k (2 ≤ k ≤ 10^5). ----Output---- Print one integer — the maximum possible sum of the absolute differences for a \\"beautiful\\" sequence of length k. ----Examples---- Input: 3 Output: 4 Input: 2 Output: 1 ----Note---- In the first example, a \\"beautiful\\" sequence of length 3 could be [1, 3, 2]. The sum of absolute differences is |1-3| + |3-2| = 2 + 2 = 4. In the second example, a \\"beautiful\\" sequence of length 2 could be [1, 2]. The sum of absolute differences is |1-2| = 1.","solution":"def maximum_sum_of_absolute_differences(k): Returns the maximum possible sum of the absolute differences for a \\"beautiful\\" sequence of length k. if k == 2: return 1 elif k == 3: return 4 elif k % 2 == 0: return (k // 2) * (k // 2) * 2 else: middle = k // 2 return middle * (middle + 1) * 2"},{"question":"You are given a list of integers where each element in the list occurs exactly three times except for one element which occurs only once. Write a function to find the single element which occurs only once. Note: You must solve it in O(N) time and O(1) space. Example 1: Input: array = [2, 2, 1, 2] Output: 1 Explanation: In the given list, 2 appears three times, and 1 appears only once. Example 2: Input: array = [0, 1, 0, 1, 0, 1, 99] Output: 99 Explanation: In the given list, 0 and 1 appear three times each, and 99 appears only once. Your Task: The task is to complete the function singleElement() which takes an array arr[] as input and finds the single element that occurs only once. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ len(array) ≤ 3 x 10^4 0 ≤ array[i] < 2^31","solution":"def single_element(arr): Given a list of integers where each element occurs exactly three times except for one element which occurs only once, return the element that occurs only once. ones = 0 # Will hold XOR of elements which appears only once twos = 0 # Will hold XOR of elements which appears exactly twice for num in arr: # \'twos\' holds the bits which should be set to 1 if they appear twice twos |= ones & num # \'ones\' holds the bits which appear odd number of times ones ^= num # Common bits in \'ones\' and \'twos\' common_bits = ones & twos # Remove common bits from \'ones\' ones &= ~common_bits # Remove common bits from \'twos\' twos &= ~common_bits return ones"},{"question":"Alex is trying to build a special type of staircase with blocks of different heights. He has n blocks, and the height of each block is given in an array h of size n. The staircase Alex wants to build should satisfy the following conditions: - The height of the blocks should strictly increase from left to right. - The sum of the heights of the blocks should be exactly equal to a given value S. Help Alex determine whether it’s possible to build such a staircase. -----Input----- The first line contains two integers n and S (1 ≤ n ≤ 100, 1 ≤ S ≤ 10^4) — the number of blocks and the target sum of heights. The second line contains n integers h_1, h_2, ..., h_{n} (1 ≤ h_{i} ≤ 1000) — the heights of the blocks. -----Output----- Print \\"possible\\" (without quotes) if it is possible to build the staircase with the given conditions, otherwise print \\"impossible\\" (without quotes). -----Examples----- Input 5 15 1 2 3 4 5 Output possible Input 4 10 4 6 5 2 Output impossible Input 3 6 1 2 4 Output impossible -----Note----- In the first example, Alex can use all the blocks to build a strictly increasing staircase with total height exactly 15. In the second example, it is not possible to select blocks whose heights strictly increase and sum exactly to 10. In the last example, although the blocks can be arranged in increasing order, their total height is not equal to 6.","solution":"def can_build_staircase(n, S, h): Determines if it is possible to build a strictly increasing staircase with the given block heights `h` whose total height is exactly `S`. h.sort() total_height = sum(h) if total_height < S: return \\"impossible\\" current_height = 0 for i in range(n): current_height += h[i] if current_height >= S: return \\"possible\\" if current_height == S else \\"impossible\\" return \\"impossible\\""},{"question":"You are given an integer array `nums` and an integer `k`. You want to find the maximum sum of a subarray of length `k`. A subarray is a contiguous part of an array. For example, if `nums = [1,2,3,4]` and `k = 2`, the maximum sum subarray of length `k` is `[3,4]` which sums to `7`. Write a function `maxSubarraySum(nums, k)` that returns the maximum sum of a subarray with length `k`. # Input - An integer array `nums` of length `n` where `1 <= n <= 10^5` and `-10^4 <= nums[i] <= 10^4`. - An integer `k` where `1 <= k <= n`. # Output - Return an integer representing the maximum sum of a subarray with length `k`. # Example ```python nums = [1, 4, 2, 10, 23, 3, 1, 0, 20] k = 4 print(maxSubarraySum(nums, k)) # Output: 39 nums = [-1, -2, -3, -4, 5, 6, 7, 8] k = 3 print(maxSubarraySum(nums, k)) # Output: 21 nums = [5, 5, 5, 5] k = 2 print(maxSubarraySum(nums, k)) # Output: 10 ``` # Constraints - Your algorithm should run in `O(n)` time. - The solution should be implemented in Python.","solution":"def maxSubarraySum(nums, k): Returns the maximum sum of a subarray with length k. Parameters: nums (list of int): List of integers. k (int): Length of subarray. Returns: int: Maximum sum of a subarray with length k. n = len(nums) if n < k or k <= 0: return 0 # Calculate the sum of the first window max_sum = sum(nums[:k]) window_sum = max_sum # Slide the window over the rest of the elements for i in range(k, n): window_sum += nums[i] - nums[i - k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"A marketing manager needs to send a promotional email to subscribers of a new product. The marketing team maintains a list of customer records where each record contains the customer\'s name and a list of tags that represent their interests. The manager wants to send the email only to customers who have at least one of the specified \\"target tags\\" in their list of interests. Write a function filter_customers_by_tags(customers, target_tags) that takes in a list of customer records and a list of target tags and returns the names of the customers who should receive the promotional email. The order of the names in the output should match the order of customers in the input list. # Input - customers: A list of dictionaries, where each dictionary has the following structure: - \\"name\\": A string representing the customer\'s name. - \\"tags\\": A list of strings representing the customer\'s interests. - target_tags: A list of strings representing the tags of interest. # Output - A list of strings representing the names of the customers who have at least one tag from the target_tags list. # Example **Input:** ```python customers = [ {\\"name\\": \\"Alice\\", \\"tags\\": [\\"sports\\", \\"movies\\", \\"music\\"]}, {\\"name\\": \\"Bob\\", \\"tags\\": [\\"books\\", \\"tech\\", \\"gaming\\"]}, {\\"name\\": \\"Charlie\\", \\"tags\\": [\\"music\\", \\"food\\", \\"travel\\"]}, {\\"name\\": \\"David\\", \\"tags\\": [\\"art\\", \\"gaming\\", \\"tech\\"]}, ] target_tags = [\\"music\\", \\"tech\\"] ``` **Output:** ```python [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\"] ``` **Input:** ```python customers = [ {\\"name\\": \\"Emily\\", \\"tags\\": [\\"photography\\", \\"travel\\"]}, {\\"name\\": \\"Frank\\", \\"tags\\": [\\"finance\\", \\"gardening\\"]}, {\\"name\\": \\"Grace\\", \\"tags\\": [\\"yoga\\", \\"fitness\\"]}, {\\"name\\": \\"Hannah\\", \\"tags\\": [\\"fashion\\", \\"design\\"]}, ] target_tags = [\\"travel\\", \\"fitness\\"] ``` **Output:** ```python [\\"Emily\\", \\"Grace\\"] ``` # Note In the first example, every customer has at least one tag that matches a target tag, so all of them receive the promotional email. In the second example, only \\"Emily\\" and \\"Grace\\" have tags that match the target tags \\"travel\\" and \\"fitness\\", so they are the only ones to receive the promotional email.","solution":"def filter_customers_by_tags(customers, target_tags): Returns a list of customer names who have at least one target tag in their list of interests. Parameters: customers (list): List of dictionaries containing customers\' names and tags. target_tags (list): List of target tags. Returns: list: List of customer names. result = [] for customer in customers: if any(tag in target_tags for tag in customer[\\"tags\\"]): result.append(customer[\\"name\\"]) return result"},{"question":"Given an array of integers, determine the length of the shortest contiguous subarray that, if sorted, results in the entire array being sorted. If the array is already sorted, return 0. Example 1: Input: arr = [2, 6, 4, 8, 10, 9, 15] Output: 5 Explanation: Sorting the subarray [6, 4, 8, 10, 9] results in the entire array being sorted. Example 2: Input: arr = [1, 2, 3, 4] Output: 0 Explanation: The array is already sorted. Example 3: Input: arr = [1, 3, 2, 2, 2] Output: 4 Explanation: Sorting the subarray [3, 2, 2, 2] results in the entire array being sorted. Constraints: 1 <= arr.length <= 10^5 -10^4 <= arr[i] <= 10^4","solution":"def find_unsorted_subarray(arr): Determines the length of the shortest contiguous subarray that, if sorted, results in the entire array being sorted. Returns 0 if the array is already sorted. n = len(arr) start, end = 0, -1 min_val, max_val = float(\'inf\'), float(\'-inf\') for i in range(n): max_val = max(max_val, arr[i]) if arr[i] < max_val: end = i for i in range(n-1, -1, -1): min_val = min(min_val, arr[i]) if arr[i] > min_val: start = i return 0 if end == -1 else end - start + 1"},{"question":"Given a string S consisting of letters and digits, decide whether S is a valid hexadecimal number. A valid hexadecimal number must start with \\"0x\\" or \\"0X\\" and be followed by one or more characters from \\"0123456789abcdefABCDEF\\". If it\'s a valid hexadecimal number, return True. Otherwise, return False. Example 1: Input: S = \\"0x1af\\" Output: True Explanation: \\"0x1af\\" starts with \\"0x\\" and is followed by characters that are valid hexadecimal digits. Example 2: Input: S = \\"0XGHI\\" Output: False Explanation: \\"0XGHI\\" starts with \\"0X\\" but contains invalid hexadecimal digits (G, H, I). Example 3: Input: S = \\"123abc\\" Output: False Explanation: \\"123abc\\" does not start with \\"0x\\" or \\"0X\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function isValidHexadecimal() which takes the string S as input and returns a boolean indicating if S is a valid hexadecimal number. Expected Time Complexity: O(N), where N is the length of the string S. Expected Auxiliary Space: O(1).","solution":"def isValidHexadecimal(S): Checks if the input string S is a valid hexadecimal number. A valid hexadecimal number starts with \\"0x\\" or \\"0X\\" and is followed by characters from \\"0123456789abcdefABCDEF\\". Args: S (str): The input string. Returns: bool: True if S is a valid hexadecimal number, False otherwise. if len(S) < 3: return False if S[:2].lower() != \\"0x\\": return False valid_chars = set(\\"0123456789abcdefABCDEF\\") for char in S[2:]: if char not in valid_chars: return False return True"},{"question":"You are given a set of delivery instructions to be executed by a robot moving in a 2D plane. The robot starts at the origin point (0, 0) and follows a sequence of commands to move up, down, left, or right. Each command is a character in the string that describes its movements: - \'U\' means move up (increase y-coordinate by 1) - \'D\' means move down (decrease y-coordinate by 1) - \'L\' means move left (decrease x-coordinate by 1) - \'R\' means move right (increase x-coordinate by 1) Your task is to determine the robot\'s final position after executing all commands in the given sequence. **Input:** A single line containing a string `commands`, denoting the sequence of movements. **Output:** A single line containing two integers separated by a space, representing the final x-coordinate and y-coordinate of the robot. **Constraints:** - 1 ≤ |commands| ≤ 100000 **Example:** **Input:** ``` UUDDLRLR ``` **Output:** ``` 0 0 ``` **Explanation:** The robot moves up twice, then down twice, left once, right once, left once, and finally right once, which brings it back to the origin (0, 0). **Additional Example:** **Input:** ``` UUUUDDDD ``` **Output:** ``` 0 0 ``` **Example:** **Input:** ``` UUUURRRR ``` **Output:** ``` 4 4 ```","solution":"def final_position(commands): Calculate the final position of the robot on a 2D plane after executing all commands. Parameters: commands (str): A string containing the sequence of robot movements. Returns: tuple: A tuple (x, y) representing the final coordinates of the robot. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x, y"},{"question":"MoEngage wants to categorize user activity on their e-learning platform based on practice and test participation and send specific motivational messages to keep them engaged. For this task, MoEngage sends an email to users depending on their activity pattern as follows: 1. If the user has never submitted on the practice page, or never participated in a test, they should receive an email with the text: Keep practicing! Visit the practice section here: https://www.learnplatform.com/practice 2. If the user has submitted on the practice page, but never participated in a test, they should receive an email with the text: Great going on practice! Now challenge yourself with a test here: https://www.learnplatform.com/tests 3. If the user has participated in a test but never used the practice page, they should receive an email with the text: Amazing effort on tests! Strengthen your skills with practice here: https://www.learnplatform.com/practice 4. If the user has submitted on the practice page and participated in a test, they should receive an email with the text: Fantastic job! Keep up the hard work and continue practicing and testing here: https://www.learnplatform.com/community Write a program that takes as input two integers P and T where: P = 1 if the user has submitted on the practice page and 0 otherwise. T = 1 if the user has participated in a test and 0 otherwise. Output the appropriate motivational message to be displayed in the email. ------ Input Format ------ - The input consists of a single line with two space-separated integers P and T. ------ Output Format ------ - Print one of the following strings as per the problem statement. - Keep practicing! Visit the practice section here: https://www.learnplatform.com/practice - Great going on practice! Now challenge yourself with a test here: https://www.learnplatform.com/tests - Amazing effort on tests! Strengthen your skills with practice here: https://www.learnplatform.com/practice - Fantastic job! Keep up the hard work and continue practicing and testing here: https://www.learnplatform.com/community ------ Constraints ------ P is either 0 or 1. T is either 0 or 1. ----- Sample Input 1 ------ 0 1 ----- Sample Output 1 ------ Amazing effort on tests! Strengthen your skills with practice here: https://www.learnplatform.com/practice ----- Explanation 1 ------ The user has participated in a test but not in the practice page submissions, so the program must output the link motivating the user to practice. ----- Sample Input 2 ------ 1 0 ----- Sample Output 2 ------ Great going on practice! Now challenge yourself with a test here: https://www.learnplatform.com/tests ----- Explanation 2 ------ The user has submitted on the practice page, but not participated in a test, so the program must output the link to encourage the user to take tests.","solution":"def user_activity(P, T): Determines the motivational message based on user activity in practice and tests. Parameters: P (int): 1 if the user has submitted on the practice page, 0 otherwise. T (int): 1 if the user has participated in a test, 0 otherwise. Returns: str: The appropriate motivational message. if P == 0 and T == 0: return \\"Keep practicing! Visit the practice section here: https://www.learnplatform.com/practice\\" elif P == 1 and T == 0: return \\"Great going on practice! Now challenge yourself with a test here: https://www.learnplatform.com/tests\\" elif P == 0 and T == 1: return \\"Amazing effort on tests! Strengthen your skills with practice here: https://www.learnplatform.com/practice\\" else: return \\"Fantastic job! Keep up the hard work and continue practicing and testing here: https://www.learnplatform.com/community\\""},{"question":"A large company needs a new scheduling system to manage their meeting rooms. They have multiple meeting rooms and each meeting requires a specific room to be reserved. Each room has a schedule of reservations throughout the day. The company wants to know if a new meeting request can be accommodated without overlapping with existing reservations in that specific room. Write a function that takes the current schedule of a specific room and a new meeting request and determines if the new meeting can be scheduled without any overlaps. -----Constraints----- - Times are provided in the 24-hour format \\"HH:MM\\". - The existing reservations and the new meeting request are provided as a list of two-element lists, where each element list contains strings representing the start and end times. - All times are on the same day, and the end time is always after the start time. -----Input----- The input consists of: - A list of lists, current_schedule, where each sublist contains two strings representing the start and end times of an existing reservation. - A two-element list, new_meeting, where each element contains a string representing the start and end times of the new meeting request. -----Output----- Print \\"YES\\" if the new meeting can be scheduled without overlapping any existing reservations, otherwise print \\"NO\\". -----Sample Input----- [[\'09:00\', \'09:30\'], [\'10:00\', \'11:00\'], [\'13:00\', \'14:00\']] [\'11:30\', \'12:30\'] -----Sample Output----- YES In this example, the new meeting from 11:30 to 12:30 does not overlap with any of the existing reservations, so the output is \\"YES\\".","solution":"def can_schedule_meeting(current_schedule, new_meeting): new_start, new_end = new_meeting for start, end in current_schedule: if not (new_end <= start or new_start >= end): return \\"NO\\" return \\"YES\\""},{"question":"Kingsley has just discovered a programming language called Concoct where every variable can either be an even number or an odd number. He wants to perform computations on a list of numbers using functions called \\"doublers\\". A \\"doubler\\" is a function that receives a variable and multiplies it by 2. Kingsley realized that he can transform all the numbers in a list by repeating the following steps: 1. Apply the doubler function exactly half as many times as the value at each position, rounded down (using integer division). 2. After processing each value in the list, count the number of times each number in the list is considered even. Write a function that receives a list of integers and returns the total count of even numbers after applying the doubler operations. -----Input----- - The input consists of a single integer N (1 leq N leq 10^5), representing the number of elements in the list. - The next line contains N space-separated integers A_1, A_2, ldots, A_N (1 leq A_i leq 10^9), representing the values in the list. -----Output----- - Print the total count of even numbers in the transformed list. -----Example Input----- 5 10 3 5 8 2 -----Example Output----- 5 -----Explanation----- Starting with the list [10, 3, 5, 8, 2]: - For 10: apply the doubler 5 times -> 320 (even) - For 3: apply the doubler 1 time -> 6 (even) - For 5: apply the doubler 2 times -> 20 (even) - For 8: apply the doubler 4 times -> 128 (even) - For 2: apply the doubler 1 time -> 4 (even) All the numbers become even after applying the doubler the required times, resulting in a total count of 5.","solution":"def count_even_numbers_after_doubling(nums): Return the total count of even numbers in the transformed list after applying the doubler operation. count_evens = 0 for num in nums: doublings = num // 2 transformed_num = num * (2 ** doublings) if transformed_num % 2 == 0: count_evens += 1 return count_evens"},{"question":"In a magical kingdom, there are n cities connected by m bidirectional roads. Each road connects two distinct cities and has a magical strength associated with it. The magical strength of a path is the sum of the strengths of the roads that make up the path. The kingdom is in danger, and the royal wizard wants to strengthen the weakest connection between any two cities. Thus, he needs to find the minimum magical strength path between every pair of cities. You are tasked with finding the shortest paths with the least magical strength between all pairs of cities in the kingdom. -----Input----- The first line consists of two space-separated integers, n and m (1 ≤ n ≤ 500, 1 ≤ m ≤ 10000) — the number of cities and the number of roads respectively. Each of the next m lines contains three space-separated integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) — the two cities connected by the road and the magical strength of that road. -----Output----- Output an n x n matrix where the element in the i-th row and j-th column represents the minimum magical strength of the path between city i and city j. If there is no path between city i and city j, output -1 for that entry. -----Examples----- Input 4 4 1 2 1 1 3 4 2 3 2 2 4 7 Output 0 1 3 8 1 0 2 7 3 2 0 9 8 7 9 0","solution":"def floyd_warshall(n, roads): # Initialize distance matrix with \'inf\' and 0s along the diagonal dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 # Fill in initial distances based on given roads for u, v, w in roads: dist[u-1][v-1] = min(dist[u-1][v-1], w) dist[v-1][u-1] = min(dist[v-1][u-1], w) # Floyd-Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Convert \'inf\' entries to -1 for no path situations for i in range(n): for j in range(n): if dist[i][j] == float(\'inf\'): dist[i][j] = -1 return dist"},{"question":"A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Given a number n, determine if it is a prime number. Input The input consists of a single integer n (2 ≤ n ≤ 10^6). Output Print \\"YES\\" if n is a prime number, otherwise print \\"NO\\". Examples Input 17 Output YES Input 18 Output NO","solution":"def is_prime(n): Determines if the given number n is a prime number. :param n: integer, the number to check :return: \\"YES\\" if n is a prime number, otherwise \\"NO\\" if n <= 1: return \\"NO\\" if n == 2: return \\"YES\\" if n % 2 == 0: return \\"NO\\" for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return \\"NO\\" return \\"YES\\""},{"question":"Consider a function that takes an integer `length` and a string `pattern` as input and returns a generated string based on the given pattern with the specified length. The `pattern` is a string containing characters and special symbols like `\'*\'` and `\'?\'` which should be replaced with random alphabets and digits respectively. - `\'*\'` should be randomly replaced with any alphabet character (\'a\' to \'z\' or \'A\' to \'Z\'). - `\'?\'` should be randomly replaced with any digit (\'0\' to \'9\'). The replacements should be such that the pattern repeats to achieve the desired length. For example: - `generate_string(10, \\"a*b?\\")` might return `\\"aDb2aQh3aK\\"` - `generate_string(5, \\"*?\\")` might return `\\"P5X6V\\"` If `length` is 0, return an empty string. Write a function `generate_string(length, pattern)` to solve the problem. # Constraints: - The function should work for `length` up to 100 and a non-empty `pattern` whose length does not exceed 10. - Ensure randomness in the replacements. # Example Implementation in Python: Here is the function signature for Python: ```python import random def generate_string(length, pattern): # Your code here pass ``` # Note: - The function should tackle randomness effectively. - You might need to use libraries like `random` in Python for generating random alphabets or digits.","solution":"import random import string def generate_string(length, pattern): Generate a string of the given length based on the provided pattern. Parameters: length (int): The desired length of the output string. pattern (str): The pattern containing characters and special symbols (\'*\' and \'?\'). Returns: str: The generated string of the specified length. def replace_character(char): if char == \'*\': return random.choice(string.ascii_letters) elif char == \'?\': return random.choice(string.digits) else: return char generated = [] pattern_length = len(pattern) for i in range(length): generated.append(replace_character(pattern[i % pattern_length])) return \\"\\".join(generated)"},{"question":"In a grid of size m x n, you have an initial number of bugs and need to calculate the minimum number of moves required to bring all bugs together to a single cell. You are given the initial positions of these bugs in the form of a list of coordinates. You can move a bug from cell (i, j) to any of its neighboring cells in the grid. In each move, a bug can move to any of its directly adjacent cells: up, down, left, or right. Your task is to find the minimum number of moves required for all bugs to meet at any single cell in the grid. Input: The first line contains a single integer T, representing the number of test cases. Each test case starts with two integers m and n representing the dimensions of the grid. The next line contains a single integer b representing the number of bugs. The next b lines each contain two integers x and y representing the coordinates of each bug in the grid (1 ≤ x ≤ m, 1 ≤ y ≤ n). Output: For each test case, output the minimum number of moves required for all bugs to meet in one cell. Constraints: 1 ≤ T ≤ 10 2 ≤ m, n ≤ 100 1 ≤ b ≤ m*n SAMPLE INPUT 2 3 3 3 1 1 2 2 3 3 4 4 2 1 1 4 4 SAMPLE OUTPUT 4 6","solution":"def minimum_moves(test_cases): def median(lst): sorted_lst = sorted(lst) n = len(sorted_lst) mid = n // 2 if n % 2 == 0: return (sorted_lst[mid - 1] + sorted_lst[mid]) // 2 return sorted_lst[mid] results = [] for tc in test_cases: m, n, bugs, coordinates = tc x_coords = [x for x, y in coordinates] y_coords = [y for x, y in coordinates] median_x = median(x_coords) median_y = median(y_coords) total_moves = sum(abs(x - median_x) + abs(y - median_y) for x, y in coordinates) results.append(total_moves) return results"},{"question":"Background ---------------- In the land of Algravia, there exists a magical forest which is notorious for trapping any mortals who step inside. The forest has a unique layout represented in a 2D grid where the paths, obstacles, and starting position of the adventurer are clearly marked. The goal is to navigate from the starting position to the exit of the forest, using specific movement rules. Forest Layout --------------- The forest is represented as an `n x m` 2D grid with the following elements: - `S` - Starting position of the adventurer. - `E` - Exit of the forest. - `.` - Passable path. - `#` - Impassable obstacle. Movement Rules --------------- The adventurer can move in the following ways: - North (Up): move from cell `(x, y)` to cell `(x-1, y)` - South (Down): move from cell `(x, y)` to cell `(x+1, y)` - East (Right): move from cell `(x, y)` to cell `(x, y+1)` - West (Left): move from cell `(x, y)` to cell `(x, y-1)` Your task is to write a function to find the shortest path from the starting position `S` to the exit `E`. If no path exists, return `-1`. Example -------- Below is an example grid: ```python forest_grid = [ [\'S\', \'.\', \'#\', \'#\', \'#\'], [\'#\', \'.\', \'#\', \'.\', \'.\'], [\'#\', \'.\', \'.\', \'.\', \'#\'], [\'#\', \'#\', \'#\', \'.\', \'E\'] ] ``` For the given `forest_grid`, the shortest path from `S` to `E` is of length `7`: ``` S -> (0,1) -> (1,1) -> (2,1) -> (2,2) -> (2,3) -> (3,3) -> E ``` Function Signature ------------------- ```python def shortest_path(forest_grid: List[List[str]]) -> int: pass ``` Constraints ------------- - The grid dimensions `n` and `m` will be between `2` and `100`, inclusive. - There will be exactly one `S` and one `E` in the grid. - The grid will not contain invalid characters. How to Approach ---------------- 1. Initialize the starting position `(x, y)` from `S`. 2. Use a queue to implement the breadth-first search (BFS) algorithm to traverse the grid. 3. Keep track of the visited cells to avoid cycles. 4. Return the number of steps if the exit is reached, otherwise return `-1` if no path exists.","solution":"from collections import deque from typing import List def shortest_path(forest_grid: List[List[str]]) -> int: n = len(forest_grid) m = len(forest_grid[0]) # Find the start position S for i in range(n): for j in range(m): if forest_grid[i][j] == \'S\': start = (i, j) if forest_grid[i][j] == \'E\': end = (i, j) # Initialize the queue for BFS queue = deque([(start[0], start[1], 0)]) # (row, col, steps) visited = set() visited.add(start) # Possible directions (North, South, East, West) directions = [(-1, 0), (1, 0), (0, 1), (0, -1)] while queue: x, y, steps = queue.popleft() # Return the number of steps if we reach the exit if (x, y) == end: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and forest_grid[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) # If no path found to the exit return -1"},{"question":"Princess Twilight is collecting mystical spells to protect her kingdom. Each spell has a power level, and the spells must be cast in a specific order to maximize their effectiveness. The effectiveness of a sequence of spells can be described as the sum of the products of each spell\'s power level and its respective position in the sequence. Given a sequence of positive integers representing the power levels of the spells, rearrange the spells to maximize this effectiveness. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of spells. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 30), which represent the power levels of the spells. Output Output the sequence of spells arranged to maximize the effectiveness. If there are multiple optimal rearrangements, you can output any of them. Examples Input 5 3 1 4 1 5 Output 5 4 3 1 1 Input 4 2 3 1 2 Output 3 2 2 1","solution":"def maximize_spell_effectiveness(n, spell_powers): Rearranges the spells to maximize the effectiveness. Parameters: n (int): Number of spells. spell_powers (list of int): Power levels of the spells. Returns: list of int: Rearranged spell powers for maximum effectiveness. # To maximize the effectiveness, spells should be arranged in descending order. spell_powers.sort(reverse=True) return spell_powers"},{"question":"Oliver has a string of lowercase English letters. He loves finding palindromes, so he has decided to create a specific type of problem involving them. A palindrome is a string that reads the same forward and backward. Oliver defines a \\"special pair\\" as a pair of indices (i, j) such that the substring from index i to index j (inclusive) of the string is a palindrome. Write a program that counts the number of special pairs (i, j) in the given string. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 2·10^5) — the length of the string. The second line contains a string of length n, consisting of only lowercase English letters. -----Output----- Print a single integer representing the number of special pairs (i, j). -----Examples----- Input 5 ababa Output 9 Input 4 abcd Output 4 Input 3 aaa Output 6","solution":"def count_special_pairs(n, s): This function counts the number of special pairs (i, j) such that the substring from index i to index j (inclusive) of the given string s is a palindrome. :param n: Length of the string :param s: Given string :return: Number of special pairs (i, j) def is_palindrome(sub): return sub == sub[::-1] count = 0 for i in range(n): for j in range(i, n): if is_palindrome(s[i:j+1]): count += 1 return count"},{"question":"Create a function that sorts a list of strings based on the lengths of the strings. If two strings have the same length, maintain their original order. SAMPLE INPUT [\\"apple\\", \\"banana\\", \\"kiwi\\", \\"fig\\", \\"strawberry\\"] SAMPLE OUTPUT [\\"fig\\", \\"kiwi\\", \\"apple\\", \\"banana\\", \\"strawberry\\"]","solution":"def sort_strings_by_length(strings): Sorts a list of strings based on their lengths. If two strings have the same length, their original order is maintained. return sorted(strings, key=lambda x: len(x))"},{"question":"Peter works as a warehouse manager and he is responsible for keeping track of the inventory. There are n types of items in the warehouse, each item i has ai units in stock. The warehouse also has some boxes, each with a capacity c (maximum number of units it can hold). Peter wants to fill as many boxes completely full as possible using the available items. A unit of any item can be placed in any box. Given the number and capacity of the boxes, determine the maximum number of boxes that Peter can fill completely. -----Input----- The first line contains two integers n and c (1 ≤ n ≤ 10^5, 1 ≤ c ≤ 10^9) — the number of different item types and the capacity of each box. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the number of units in stock for each item type. -----Output----- Output a single integer — the maximum number of boxes that can be filled completely. -----Examples----- Input 3 4 3 7 2 Output 3 Input 5 10 15 6 3 8 12 Output 4 Input 2 5 4 4 Output 1","solution":"def max_boxes_filled(n, c, items): total_units = sum(items) return total_units // c # Example usage: # n = 3, c = 4, items = [3, 7, 2] # The sum of items is 3 + 7 + 2 = 12 # 12 // 4 = 3, so the maximum number of boxes that can be filled completely is 3 print(max_boxes_filled(3, 4, [3, 7, 2])) # Output: 3 # Example usage: # n = 5, c = 10, items = [15, 6, 3, 8, 12] # The sum of items is 15 + 6 + 3 + 8 + 12 = 44 # 44 // 10 = 4, so the maximum number of boxes that can be filled completely is 4 print(max_boxes_filled(5, 10, [15, 6, 3, 8, 12])) # Output: 4 # Example usage: # n = 2, c = 5, items = [4, 4] # The sum of items is 4 + 4 = 8 # 8 // 5 = 1, so the maximum number of boxes that can be filled completely is 1 print(max_boxes_filled(2, 5, [4, 4])) # Output: 1"},{"question":"You are given an array of N integers (A_1, A_2, ldots, A_N). You can perform the following operations any number of times (including zero): 1. Select two different positions i and j (1 leq i, j leq N) in the array and swap the elements A_i and A_j. 2. Select a position i (1 leq i leq N) in the array and an integer x. Change A_i to x and pay one coin. Your goal is to make all elements of the array distinct while spending the minimum number of coins. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains N space-separated integers A_1, A_2, ldots, A_N. ------ Output ------ For each test case, print a single line containing one integer ― the minimum necessary number of coins to make all elements of the array distinct. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100,000 1 ≤ A_i ≤ 10^{9} for each valid i ------ Sample Input 1 ------ 2 5 1 2 3 2 1 4 4 4 4 4 ------ Sample Output 1 ------ 2 3 ------ Explanation 1 ------ Example case 1: The array [1, 2, 3, 2, 1] can be made distinct by changing the last two elements to unique values such as [1, 2, 3, 4, 5], requiring 2 coin operations. Example case 2: The array [4, 4, 4, 4] can be changed by making three changes, resulting in [4, 1, 2, 3] and requiring 3 coin operations.","solution":"from collections import Counter import heapq def min_coins_to_make_distinct(T, test_cases): results = [] for i in range(T): N, A = test_cases[i] freq = Counter(A) duplicates = [] for value, count in freq.items(): if count > 1: heapq.heappush(duplicates, (count, value)) used_numbers = set(A) min_coins = 0 while duplicates: count, value = heapq.heappop(duplicates) for _ in range(count - 1): new_val = value + 1 while new_val in used_numbers: new_val += 1 used_numbers.add(new_val) min_coins += 1 results.append(min_coins) return results # Sample input format # You can test the function by calling it with appropriate input like below # print(min_coins_to_make_distinct(2, [(5, [1, 2, 3, 2, 1]), (4, [4, 4, 4, 4])]))"},{"question":"A group of engineers is working on a project that involves creating a balanced system using different weights. They have a number of weights of varying capacities and need your skills to determine if it is possible to balance the system using those weights. Each weight can either be placed on the left side or the right side of a balancing scale. The goal is to find an arrangement where the total weight on the left side equals the total weight on the right side. Your task is to determine if such an arrangement is possible given a list of weights. Input The first line of input contains an integer n (1 ≤ n ≤ 1000), which represents the number of weights. The second line of input contains n integers w_i (1 ≤ w_i ≤ 1000), where w_i denotes the weight of the i-th weight. Output Print \\"YES\\" if it is possible to arrange the weights such that the total weight on the left side equals the total weight on the right side. Print \\"NO\\" if it is not possible. Examples Input 4 1 2 3 4 Output YES Input 3 1 1 3 Output NO Explanation In the first example, the weights can be arranged as: - Left side: 1 + 4 = 5 - Right side: 2 + 3 = 5 In the second example, no such arrangement exists that balances the weights.","solution":"def can_balance(weights): Returns \\"YES\\" if it is possible to balance the weights equally, otherwise \\"NO\\". Args: weights: List of integers representing the weights. Returns: str: \\"YES\\" or \\"NO\\". total_weight = sum(weights) # If the total weight is odd, it\'s not possible to split equally if total_weight % 2 != 0: return \\"NO\\" target = total_weight // 2 n = len(weights) # Dynamic programming approach to check if subset sum equals target dp = [False] * (target + 1) dp[0] = True for weight in weights: for j in range(target, weight - 1, -1): if dp[j - weight]: dp[j] = True return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"You are given a list of integers where each integer can appear multiple times. Write a function to find the integer that appears most frequently. If there are multiple such integers, return any one of them. Example 1: Input: arr = [1, 3, 2, 2, 3, 3, 1] Output: 3 Explanation: 3 appears most frequently, appearing 3 times. Example 2: Input: arr = [8, 8, 7, 7, 2, 4, 2, 8, 4] Output: 8 Explanation: 8 appears most frequently, appearing 3 times. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `mostFrequentInteger()` that takes a list of integers as input and returns the integer that appears most frequently. If there are multiple such integers, return any one of them. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= len(arr) <= 10^5 -10^6 <= arr[i] <= 10^6","solution":"def mostFrequentInteger(arr): Finds the integer that appears most frequently in the list. If there are multiple such integers, returns any one of them. from collections import Counter if not arr: return None counter = Counter(arr) most_common = counter.most_common(1)[0][0] return most_common"},{"question":"Given a string s consisting of lowercase letters, the task is to determine if s can be restructured such that no two adjacent characters are the same. If it is possible to rearrange, return the rearranged string; otherwise, return \\"IMPOSSIBLE\\". Example: Input: s = \\"aabb\\" Output: \\"abab\\" Explanation: One possible rearrangement is \\"abab\\". Input: s = \\"aaab\\" Output: \\"IMPOSSIBLE\\" Explanation: It is not possible to rearrange such that no two adjacent characters are the same. Your Task: You don\'t need to read input or print anything. Complete the function reorganizeString() which takes s as an input parameter and returns the rearranged string or \\"IMPOSSIBLE\\". Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 <= s.length <= 10^5","solution":"from collections import Counter import heapq def reorganizeString(s): Rearranges the string `s` such that no two adjacent characters are the same. If such a rearrangement is not possible, returns \\"IMPOSSIBLE\\". :param s: Input string :type s: str :return: Rearranged string or \\"IMPOSSIBLE\\" if not possible :rtype: str # Count frequency of each character freq = Counter(s) # Max heap of (-frequency, character) max_heap = [(-value, key) for key, value in freq.items()] heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] while max_heap or prev_count: if prev_count: if not max_heap: return \\"IMPOSSIBLE\\" count, char = heapq.heappop(max_heap) result.append(char) if prev_count: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char = char prev_count = count + 1 # In negative space, decrease by 1 means increase count by 1 return \\"\\".join(result)"},{"question":"Given a positive integer n, write a function to return the sum of the first n even natural numbers. Example 1: Input: n = 3 Output: 12 Explanation: The first 3 even natural numbers are 2, 4, and 6. Their sum is 2 + 4 + 6 = 12. Example 2: Input: n = 5 Output: 30 Explanation: The first 5 even natural numbers are 2, 4, 6, 8, and 10. Their sum is 2 + 4 + 6 + 8 + 10 = 30. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfEvenNumbers() which takes an integer n as input and returns the sum of the first n even natural numbers. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^6","solution":"def sumOfEvenNumbers(n): Returns the sum of the first n even natural numbers. Args: n (int): A positive integer representing the number of even natural numbers to sum. Returns: int: The sum of the first n even natural numbers. # The sum of the first n even natural numbers can be computed using the formula: # Sum = 2 + 4 + 6 + ... + 2n # Sum = 2(1 + 2 + 3 + ... + n) # Using the sum of first n natural numbers formula, S = n(n + 1)/2: # Sum = 2 * n * (n + 1) / 2 = n * (n + 1) return n * (n + 1)"},{"question":"Given a string containing a mixture of letters, digits, and punctuation marks, write a function that formats the string as follows: Requirements: 1) Reverse the order of the words in the string while maintaining the original word order of characters within each word. 2) Punctuation marks should stay attached to the words they are next to (consider them as part of the word). 3) Words are defined as sequences of alphanumeric characters and the associated punctuation marks directly before or after them. 4) Special characters and whitespace (outside words) should be treated as word separators. Example: Input: \\"Hello, world! How\'s everything?\\" Output: \\"everything? How\'s world! Hello,\\" Input: \\"This is a test-string, for functions.\\" Output: \\"functions. for test-string, a is This\\" Note: - Split the input string based on whitespace and punctuation marks to identify the words. - Reverse the sequence of words and construct the resulting string while preserving the original punctuation for each word.","solution":"import re def reverse_words_in_string(s): Reverse the order of the words in the string while maintaining the original word order of characters within each word. # Regular expression to match words with attached punctuation words = re.findall(r\'b[w\'-]+[.,!?;]*|b[.,!?\';]*[w\'-]+b\', s) # Reverse the list of words reversed_words = words[::-1] # Join the reversed words with a space to form the final result result = \' \'.join(reversed_words) return result"},{"question":"Implement a function named `evaluate_expression` that takes a string representing a mathematical expression and returns the evaluated result. The expression will only contain non-negative integers, parentheses, and the operators `+` and `*`. The function needs to correctly handle the order of operations, where multiplication should be evaluated before addition. If the expression is invalid (e.g., contains unsupported characters or misaligned parentheses), the function should return `None`. Examples: ``` evaluate_expression(\\"1+2*3\\") // Should return 7 because 2*3 is evaluated first, then added to 1. evaluate_expression(\\"4+(5*2)\\") // Should return 14 because 5*2 is evaluated first, then added to 4. evaluate_expression(\\"(1+3)*(2+2)\\") // Should return 16 because 1+3 and 2+2 are evaluated first, then the results are multiplied. evaluate_expression(\\"5+5\\") // Should return 10 because there are no multiplications to prioritize. evaluate_expression(\\"2*5+1\\") // Should return 11 because 2*5 is evaluated first, then added to 1. evaluate_expression(\\"2+2*\\") // Should return None because the expression ends incorrectly. evaluate_expression(\\"3+)2(*5\\") // Should return None because of misaligned parentheses. evaluate_expression(\\"abc+1\\") // Should return None because of unsupported characters. ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers, parentheses, and the operators + and *. Returns the evaluated result or None if the expression is invalid. def is_valid(expr): # Check for invalid characters valid_chars = set(\\"0123456789+*() \\") if not all(char in valid_chars for char in expr): return False # Check for balanced parentheses balance = 0 for char in expr: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 if balance < 0: return False return balance == 0 if not is_valid(expression): return None try: return eval(expression) except: return None"},{"question":"Problem You are tasked with helping a librarian manage the inventory of books in a library. Each book has a unique identification number and a count of how many copies are available. The librarian needs a system that can process a series of commands to update the inventory and respond to queries. # Commands - `ADD id count`: Increase the number of copies of the book with the given `id` by `count`. If the book does not exist in the inventory, add it with the count. - `REMOVE id count`: Decrease the number of copies of the book with the given `id` by `count`. If the count is greater than or equal to the current number of copies, remove the book from the inventory. - `QUERY id`: Return the number of copies of the book with the given `id`. If the book does not exist, return `0`. # Input The input is given in the following format: - A single integer `n` indicating the number of commands (1 ≤ n ≤ 1000). - `n` commands, each following one of the formats described above. # Output For each `QUERY` command, output the result on a new line. # Example Input ```plaintext 6 ADD 1 5 ADD 2 3 QUERY 1 REMOVE 1 2 QUERY 1 REMOVE 2 3 ``` Output ```plaintext 5 3 ``` # Notes - Ensure to handle edge cases, such as removing a book that is not in the inventory or querying a book that has been removed. - The identification number `id` will be a positive integer. - The count will always be a non-negative integer.","solution":"def process_inventory(commands): inventory = {} results = [] for command in commands: parts = command.split() action = parts[0] book_id = int(parts[1]) if action == \\"ADD\\": count = int(parts[2]) if book_id in inventory: inventory[book_id] += count else: inventory[book_id] = count elif action == \\"REMOVE\\": count = int(parts[2]) if book_id in inventory: inventory[book_id] -= count if inventory[book_id] <= 0: del inventory[book_id] elif action == \\"QUERY\\": results.append(inventory.get(book_id, 0)) return results"},{"question":"You are given a list of integers representing the profit or loss from several transactions. Each transaction is either a profit (a positive integer) or a loss (a negative integer). Your task is to partition these transactions into two subsequences such that the total sum in both subsequences is as close as possible. -----Notes----- - The total sum of the transactions in the first subsequence should be as close as possible to the total sum of the transactions in the second subsequence. - A transaction must belong to exactly one subsequence. - The size of the subsequences can be different. -----Constraints----- - 1 leq N leq 100 - -10^4 leq profit_i leq 10^4 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N profit_1 profit_2 ... profit_N -----Output----- Print the minimum possible absolute difference between the sum of the transactions in the two subsequences. -----Sample Input----- 4 10 -5 15 -10 -----Sample Output----- 0 -----Explanation----- One way to partition the transactions is: - Subsequence 1: [10, -10] - Subsequence 2: [-5, 15] In this case, both subsequences have a sum of 0, resulting in an absolute difference of 0.","solution":"def partition_transactions(transactions): n = len(transactions) total_sum = sum(transactions) target = total_sum // 2 # Using dynamic programming to find the closest sum to the target dp = {0} for profit in transactions: new_dp = dp.copy() for s in dp: new_dp.add(s + profit) dp = new_dp closest_sum = min(dp, key=lambda x: abs(target - x)) other_sum = total_sum - closest_sum return abs(closest_sum - other_sum) # Function to read input and provide output based on the requirement def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) transactions = list(map(int, data[1:])) result = partition_transactions(transactions) print(result)"},{"question":"Given a list of integers, determine whether it can be divided into subsequences of length `k` such that each subsequence contains integers that are consecutive. Return `True` if such a division is possible, and `False` otherwise. Example nums = [1,2,3,3,4,4,5,6] and k = 4 The list can be divided into two subsequences: - [1,2,3,4] - [3,4,5,6] Therefore, you should return `True`. Function Description Complete the `isPossibleDivide` function in the editor below. isPossibleDivide has the following parameters: - int nums[n]: a list of integers - int k: an integer representing the length of each subsequence Returns - bool: `True` if the list can be divided into subsequences of length `k` containing consecutive integers, `False` otherwise Input Format The first line contains an integer `n`, the number of elements in the list. The second line contains `n` space-separated integers `nums[i]`. The third line contains the integer `k`. Constraints 1 <= n <= 10^4 1 <= nums[i] <= 10^9 1 <= k <= n Sample Input 0 8 1 2 3 3 4 4 5 6 4 Sample Output 0 True Explanation 0 The list can be divided into two subsequences: [1,2,3,4] and [3,4,5,6]. Each subsequence contains consecutive integers and is of length 4. Sample Input 1 5 1 2 3 4 5 2 Sample Output 1 False Explanation 1 No possible subsequences of length 2 are all consecutive. Therefore, we return `False`.","solution":"from collections import Counter def isPossibleDivide(nums, k): Determines if the list can be divided into subsequences of length k consisting of consecutive integers. if len(nums) % k != 0: return False nums_count = Counter(nums) sorted_nums = sorted(nums_count) for num in sorted_nums: if nums_count[num] > 0: count = nums_count[num] for i in range(num, num + k): if nums_count[i] < count: return False nums_count[i] -= count return True"},{"question":"Given an array of integers, find the number of pairs of elements that add up to a target sum. -----Constraints----- - All values in input are integers. - 1 leq |array| leq 100 - -10^3 leq element leq 10^3 - -10^3 leq target leq 10^3 -----Input----- Input is given from Standard Input in the following format: n array target Where \'n\' is the length of the array, followed by the space-separated elements of the array, and then the target sum. -----Output----- Print the integer representing the number of pairs of elements that add up to the target sum. -----Sample Input----- 5 1 5 7 -1 5 6 -----Sample Output----- 3 There are three pairs of elements that add up to 6: (1, 5), (7, -1), and (1, 5) again.","solution":"def count_pairs_with_sum(arr, target): Given an array of integers, calculate the number of pairs that add up to a specific target. Parameters: arr (list): List of integers. target (int): Target sum for the pairs. Returns: int: Number of pairs that add up to the target sum. count = 0 freq = {} # Count occurrence of each number for num in arr: if num in freq: freq[num] += 1 else: freq[num] = 1 # Find the number of pairs for num in arr: complement = target - num if complement in freq: count += freq[complement] # If complement and num are the same, then decrease the count by one if complement == num: count -= 1 # Pairs are counted twice return count // 2"},{"question":"Library Book Recommendations The local library system has implemented an automated recommendation service that suggests books based on users\' reading preferences. Each book has a genre and a popularity score. To provide relevant recommendations, the library wants to recommend books of the same genre that have the highest total popularity. Given multiple users\' reading preferences, write a program that suggests the top k books for each user, where k is the number of books the user wants to be recommended. Input The input consists of multiple datasets, each in the following format. m u1 g1 k1 u2 g2 k2 ... um gm km 0 A dataset starts with an integer m (1 ≤ m ≤ 100), the number of users. Then m lines follow, each describing a user\'s reading preferences with three values: the genre the user prefers, the number of books they want to be recommended, and the maximum number of books available for recommendation. The genre (g) is a string of up to 20 characters, k is an integer (1 ≤ k ≤ 100), and each user\'s preferred genre and the number of books available in that genre are guaranteed to exist. The end of the input is indicated by a line containing a zero. Each genre has a number of books associated with it where every book has a popularity score (1 ≤ popularity score ≤ 1,000,000). The books for each genre are provided in the format: genre number_of_books book1_popularity_score book2_popularity_score … bookN_popularity_score Output For each user, recommend the top k books with the highest popularity scores in their preferred genre. Print the popularity scores in descending order. If there are fewer than k books available, recommend all available books. Sample Input 3 user1 Fiction 3 user2 Mystery 2 user3 SciFi 1 Fiction 5 800 900 400 500 300 Mystery 3 600 700 800 SciFi 2 1000 2000 0 Output for the Sample Input 900 800 500 800 700 2000 Example Input 3 user1 Fiction 3 user2 Mystery 2 user3 SciFi 1 Fiction 5 800 900 400 500 300 Mystery 3 600 700 800 SciFi 2 1000 2000 0 Output 900 800 500 800 700 2000","solution":"def recommend_books(user_preferences, genre_books): Suggests the top k books for each user based on their preferences. Parameters: - user_preferences: List of tuples containing (user_id, genre, k) for each user - genre_books: Dictionary where key is genre and value is a list of popularity scores Returns: - List of lists of the top k book popularity scores for each user in the order of user preferences result = [] for user_id, genre, k in user_preferences: books = genre_books[genre] top_k_books = sorted(books, reverse=True)[:k] result.append(top_k_books) return result def parse_input(input_data): Parses the input data and returns user preferences and genre books. Parameters: - input_data: List of strings representing the input data Returns: - Tuple of (user_preferences, genre_books) idx = 0 user_preferences = [] genre_books = {} while idx < len(input_data): m = int(input_data[idx]) if m == 0: break idx += 1 for _ in range(m): user_id, genre, k = input_data[idx].split() user_preferences.append((user_id, genre, int(k))) idx += 1 while idx < len(input_data): line = input_data[idx] if line == \'0\' or line.isdigit(): break genre, num_books = line.split() num_books = int(num_books) books = list(map(int, input_data[idx + 1].split())) genre_books[genre] = books idx += 2 return user_preferences, genre_books def main(input_data): user_preferences, genre_books = parse_input(input_data) recommendations = recommend_books(user_preferences, genre_books) for rec in recommendations: print(\\" \\".join(map(str, rec))) # Example usage input_data = [ \\"3\\", \\"user1 Fiction 3\\", \\"user2 Mystery 2\\", \\"user3 SciFi 1\\", \\"Fiction 5\\", \\"800 900 400 500 300\\", \\"Mystery 3\\", \\"600 700 800\\", \\"SciFi 2\\", \\"1000 2000\\", \\"0\\" ] main(input_data)"},{"question":"Marcus is a robot designed to collect samples from a laboratory. The lab is organized as a grid with n rows and m columns. He starts his collection from a specified cell (sx, sy) and follows a specific sequence of directions given by his control center. As the robot moves from one cell to another, it can collect samples from that cell. However, since the grid has walls on its boundaries, the robot should not exceed the grid limits. Marcus\'s commands are an array of instructions where each instruction specifies a direction for Marcus to move: - \'U\' for moving up - \'D\' for moving down - \'L\' for moving left - \'R\' for moving right Help Marcus find out the final position on the grid after executing all the instructions. If any instruction would make Marcus move out of the grid, he should ignore that command and stay in the current cell. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 10^3), denoting the number of rows and columns in the grid. The second line contains two integers sx and sy (1 ≤ sx ≤ n, 1 ≤ sy ≤ m), denoting the starting position of Marcus. The third line contains a string of instructions consisting of characters \'U\', \'D\', \'L\', \'R\' with length k (1 ≤ k ≤ 10^5). Output Output two integers representing the final position of Marcus on the grid. Examples Input 5 5 3 3 LURRDD Output 4 4 Input 4 4 2 2 UUUDDDLRL Output 2 1 Note In the first example, Marcus starts at position (3, 3), and his movements are as follows: - L: (3, 2) - U: (2, 2) - R: (2, 3) - R: (2, 4) - D: (3, 4) - D: (4, 4) In the second example, Marcus starts at position (2, 2), and his movements are as follows: - U: (1, 2) - U: (1, 2) (move ignored as it would exceed the boundary) - U: (1, 2) (move ignored as it would exceed the boundary) - D: (2, 2) - D: (3, 2) - D: (4, 2) - L: (4, 1) - R: (4, 2) - L: (4, 1) Finally, Marcus ends at position (4, 1).","solution":"def final_position(n, m, sx, sy, instructions): Calculate the final position of Marcus on the grid after executing all instructions. :param n: Number of rows in the grid :param m: Number of columns in the grid :param sx: Starting row position of Marcus :param sy: Starting column position of Marcus :param instructions: String of instructions :return: Tuple representing the final position (row, column) x, y = sx, sy for instr in instructions: if instr == \'U\' and x > 1: x -= 1 elif instr == \'D\' and x < n: x += 1 elif instr == \'L\' and y > 1: y -= 1 elif instr == \'R\' and y < m: y += 1 return x, y"},{"question":"The kingdom of Byteland is known for its complex traditions involving numbers. One such tradition is the custom of multiplying numbers to form the \\"Byteland product\\". The Byteland product of an array is essentially the product of all elements of the array. However, due to a recent discovery in the kingdom, the product computation now involves reducing modulo a given integer K after every multiplication operation. Given an array of integers and an integer K, you are tasked with computing the Byteland product of the array modulo K. Input: - The first line contains an integer T, the number of test cases. - Each test case consists of two lines. The first line contains two integers N and K. The second line contains N integers which represent the elements of the array. Output: - For each test case, output the Byteland product of the array modulo K. Constraints: - 1 <= T <= 100 - 1 <= N <= 1000 - 1 <= K <= 10^9 - Each integer in the array is between 1 and 10^9 SAMPLE INPUT 2 3 10 2 3 4 5 6 1 2 3 4 5 SAMPLE OUTPUT 4 0","solution":"def byteland_product(test_cases): results = [] for case in test_cases: N, K = case[0] array = case[1] product = 1 for num in array: product = (product * num) % K results.append(product) return results"},{"question":"You are given a grid with `n` rows and `m` columns. Each cell in the grid contains a single lowercase English letter. You need to rotate the grid 90 degrees clockwise and then reverse each row to get the final result. Write a program that will take the initial grid as input and output the new grid after performing these operations. -----Input----- The first line contains two integers `n` and `m` (1 le n, m le 1000) — the number of rows and columns in the grid. The next `n` lines contain `m` lowercase English letters each, describing the grid. -----Output----- Print the transformed grid after rotating it 90 degrees clockwise and reversing each row. -----Examples----- Input 3 3 abc def ghi Output gda heb ifc Input 2 4 abcd efgh Output ea fb gc hd","solution":"def rotate_and_reverse_grid(n, m, grid): Rotates the grid 90 degrees clockwise and then reverses each row. Parameters: n (int): Number of rows in the original grid. m (int): Number of columns in the original grid. grid (list): list of strings representing the original grid. Returns: list: A new list of strings representing the transformed grid. result = [] for col in range(m): new_row = [] for row in reversed(range(n)): # start from bottom row and move up new_row.append(grid[row][col]) result.append(\'\'.join(new_row)) return result # Example of using the function n = 3 m = 3 grid = [\'abc\', \'def\', \'ghi\'] for row in rotate_and_reverse_grid(n, m, grid): print(row)"},{"question":"Given a string consisting only of the characters \'a\' and \'b\', find the minimum number of operations required to make the string alternating. An alternating string is a string in which no two adjacent characters are the same. One operation consists of changing any \'a\' to \'b\' or any \'b\' to \'a\'. Example 1: Input: s = \\"aab\\" Output: 1 Explanation: Change the second \'a\' to \'b\' to make the string \\"abb\\". Example 2: Input: s = \\"babba\\" Output: 2 Explanation: Change the third \'b\' to \'a\' and the fifth \'a\' to \'b\' to make the string \\"babab\\". Your Task: You don\'t need to read input or print anything. Complete the function `minOperationsToAlternate()` which takes a string s as an input parameter and returns the minimum number of operations required to make the string alternating. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= s.length <= 10^5","solution":"def minOperationsToAlternate(s): Returns the minimum number of operations required to make the string \'s\' alternating. n = len(s) # Two patterns to compare against: # pattern1: \\"ababab...\\" # pattern2: \\"bababab...\\" change_to_pattern1 = 0 change_to_pattern2 = 0 for i in range(n): if i % 2 == 0: if s[i] != \'a\': change_to_pattern1 += 1 if s[i] != \'b\': change_to_pattern2 += 1 else: if s[i] != \'b\': change_to_pattern1 += 1 if s[i] != \'a\': change_to_pattern2 += 1 return min(change_to_pattern1, change_to_pattern2)"},{"question":"In a remote village, there is a peculiar tradition: every year, villagers construct a huge bonfire using wooden logs. The bonfire is not only a symbol of unity but also a display of craftsmanship. The villagers arrange the logs in a specific pattern, and the elder of the village challenges the people to determine the minimum number of cuts required to split the bonfire into exactly k pieces. The bonfire consists of numerous wooden logs laid horizontally in a two-dimensional grid. Each cell in the grid may contain a log (represented by the \'*\' character) or be empty (represented by the \'.\' character). You can make a cut along any single continuous horizontal or vertical line that passes through one or more log cells. Each cut splits the grid along that line into two pieces. Given the grid representing the bonfire and an integer k, write a program to determine the minimum number of cuts required to split the bonfire into exactly k pieces. # Input The input consists of multiple test cases. Each test case starts with three integers, `N`, `M`, and `K` (1 ≤ N, M ≤ 20; 1 ≤ K ≤ 400), where `N` and `M` are the dimensions of the grid, and `K` is the number of pieces needed. This is followed by `N` lines, each containing `M` characters, which describe the grid. Each character is either `*` (log) or `.` (empty). The end of input is signaled by a line containing three zeros, `0 0 0`, which should not be processed. # Output For each test case, output the minimum number of cuts required to split the bonfire into exactly k pieces. If it is impossible to split the bonfire into k pieces, output `-1`. # Example Input ``` 5 5 3 .*.*. .*.*. ***** .*.*. .*.*. 3 4 4 **** .*.* .*** 0 0 0 ``` Output ``` 2 3 ``` # Explanation - In the first test case, you can cut vertically at columns 2 and 4 to split the bonfire into 3 pieces. - In the second test case, you can cut horizontally between rows 1 and 2, and vertically between columns 1 and 2, and between columns 3 and 4 to get 4 pieces.","solution":"def minCuts(grid, n, m, k): from functools import lru_cache @lru_cache(None) def dp(x1, y1, x2, y2, pieces): if pieces == 1: return 0 if contains_logs(x1, y1, x2, y2) else float(\\"inf\\") if pieces > (x2 - x1 + 1) * (y2 - y1 + 1): return float(\\"inf\\") min_cuts = float(\\"inf\\") for row in range(x1, x2): if contains_logs(x1, y1, row, y2): min_cuts = min(min_cuts, 1 + dp(row + 1, y1, x2, y2, pieces - 1)) for col in range(y1, y2): if contains_logs(x1, y1, x2, col): min_cuts = min(min_cuts, 1 + dp(x1, col + 1, x2, y2, pieces - 1)) return min_cuts def contains_logs(x1, y1, x2, y2): for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): if grid[i][j] == \'*\': return True return False result = dp(0, 0, n - 1, m - 1, k) return result if result < float(\\"inf\\") else -1"},{"question":"You are given n pairs of integers. Each pair contains two integers a and b. You are to find the number of distinct values of a + b. Constraints * 1 leq n leq 200000 * 1 leq a, b leq 1000000 Input Input is given from the standard input in the following format: ``` n a_1 b_1 a_2 b_2 ... a_n b_n ``` Output Print the number of distinct values of a + b. Examples Input 5 1 2 3 4 2 3 4 4 5 1 Output 5 Input 4 1 1 1 1 2 2 2 2 Output 2 Input 3 15 20 25 30 35 40 Output 3","solution":"def count_distinct_sums(n, pairs): Returns the number of distinct values of a + b given n pairs of integers (a, b). distinct_sums = set() for a, b in pairs: distinct_sums.add(a + b) return len(distinct_sums)"},{"question":"The HR manager is interested in finding the performance consistency of employees over several projects. Each employee has been rated for their performance in each project, and it is given that there are no negative ratings. The manager wants to identify pairs of employees whose performance difference across all projects is the smallest. To achieve this, given the rating scores of each employee on different projects, you are required to determine the pair of employees with the smallest performance difference for each query. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of employees. The second line of each test case contains an integer M denoting the number of projects. The next N lines each contain M space-separated integers representing the performance ratings of the employees for each project. The next line after the performance ratings contains an integer Q denoting the number of queries. The following Q lines each contain a pair of integers representing the indices (1-based) of two employees for whom the minimum consistency difference needs to be calculated. ------ Output ------ For each query of each test case, output a single line containing the smallest performance difference between the two specified employees across all projects for that query. ------ Constraints ------ 1 ≤ T ≤ 5 2 ≤ N ≤ 200 1 ≤ M ≤ 50 0 ≤ performance_rating_{ij} ≤ 100 1 ≤ Q ≤ 100 1 ≤ u, v ≤ N (1-based indices for employee pairs) ------ Example ------ Input: 1 3 4 20 30 40 50 25 35 45 55 10 20 30 40 2 1 2 1 3 Output: 5 10 ------ Explanation ------ Example case 1: There are 3 employees and 4 projects. Performance ratings are: Employee 1: [20, 30, 40, 50] Employee 2: [25, 35, 45, 55] Employee 3: [10, 20, 30, 40] Query 1: The smallest difference between Employee 1 and Employee 2 is |20 - 25| = 5. Query 2: The smallest difference between Employee 1 and Employee 3 is |20 - 10| = 10.","solution":"def smallest_diff_for_queries(T, test_cases): Takes the number of test cases and the test case data, computes smallest performance difference for specified employee pairs. results = [] for i in range(T): case = test_cases[i] N, M, performance_ratings, Q, queries = case for u, v in queries: u -= 1 # Convert 1-based index to 0-based v -= 1 # Convert 1-based index to 0-based min_diff = float(\'inf\') for m in range(M): diff = abs(performance_ratings[u][m] - performance_ratings[v][m]) if diff < min_diff: min_diff = diff results.append(min_diff) return results # Example usage T = 1 test_cases = [ (3, 4, [ [20, 30, 40, 50], [25, 35, 45, 55], [10, 20, 30, 40] ], 2, [ (1, 2), (1, 3) ]) ] print(smallest_diff_for_queries(T, test_cases))"},{"question":"Given an array of integers A, you want to answer queries about the array. Each query consists of a number k, and you need to find the k-th smallest element in the array A. Input: The first line contains two integers n and q, where n is the size of the array A and q is the number of queries. The second line contains n integers, the elements of the array A. Each of the next q lines contains a single integer k, denoting the query. Output: Output q lines each containing the k-th smallest element in the array. Constraints: 1 ≤ n ≤ 100000 1 ≤ q ≤ 100000 1 ≤ A[i] ≤ 10^9 1 ≤ k ≤ n SAMPLE INPUT 5 3 5 3 8 1 2 1 3 5 SAMPLE OUTPUT 1 3 8","solution":"def kth_smallest_elements(n, q, A, queries): Returns the k-th smallest elements for each query. Parameters: n (int): The size of the array A. q (int): The number of queries. A (list): The array of integers. queries (list): The list of queries. Returns: list: The k-th smallest elements for each query. # Sort the array once A.sort() results = [] # Process each query to find the k-th smallest element for k in queries: results.append(A[k-1]) return results"},{"question":"You are given a city map represented by a grid with `R` rows and `C` columns. Each cell in the grid can either be a road (\'R\') or a building (\'B\'). You need to determine the shortest path from the top-left corner (1,1) to the bottom-right corner (R,C). You can only move up, down, left, or right, and you can only travel on roads. Write a program to find the shortest path from (1,1) to (R,C). If it\'s not possible to reach the destination, return `-1`. If multiple paths lead to the destination, return any one of them. Constraints: * 2 ≤ R, C ≤ 1000 Input format: * The first line contains two integers `R` and `C` – the number of rows and columns in the grid. * The next `R` lines each contain `C` characters (`\'R\'` or `\'B\'`). Output: * Print the length of the shortest path from (1,1) to (R,C), or `-1` if no such path exists. * Print the path as a sequence of directions (\'U\' for up, \'D\' for down, \'L\' for left, \'R\' for right) if a path exists. Examples: Input: 3 3 RRR RBR RRR Output: 4 DDRR Input: 3 3 RRR RBR BBB Output: -1","solution":"from collections import deque def shortest_path(grid): R = len(grid) C = len(grid[0]) if grid[0][0] == \'B\' or grid[R-1][C-1] == \'B\': return -1, \\"\\" directions = [(-1, 0, \'U\'), (1, 0, \'D\'), (0, -1, \'L\'), (0, 1, \'R\')] queue = deque([(0, 0, 0, \\"\\")]) # (row, col, distance, path) visited = set((0, 0)) while queue: r, c, dist, path = queue.popleft() if r == R-1 and c == C-1: return dist, path for dr, dc, direction in directions: nr, nc = r + dr, c + dc if 0 <= nr < R and 0 <= nc < C and (nr, nc) not in visited and grid[nr][nc] == \'R\': visited.add((nr, nc)) queue.append((nr, nc, dist+1, path + direction)) return -1, \\"\\" def convert_input_to_grid(R, C, grid_lines): return [list(line.strip()) for line in grid_lines]"},{"question":"Given a list of integers, you need to distribute them into two sets such that the absolute difference of the sums of the two sets is minimized. After the initial distribution, you are allowed to swap at most one number between the two sets to further minimize the absolute difference. Write a program to determine the minimal possible absolute difference after at most one swap. Input - The first line contains an integer n (1 ≤ n ≤ 200 000) – the number of integers in the list. - The second line contains n integers separated by space, representing the list of integers. Output Print the minimal possible absolute difference of sums of the two sets after at most one swap. Examples Input 4 1 2 3 4 Output 0 Input 5 10 20 15 5 25 Output 5 Input 3 1 1 1 Output 1 Note In the first example: - Initial distribution can be: Set A = {1, 4}, Set B = {2, 3} -> Difference = |5 - 5| = 0 (no need for a swap) In the second example: - Initial distribution can be: Set A = {10, 25}, Set B = {20, 15, 5} -> Difference = |35 - 40| = 5 (no need for a swap) In the third example: - Initial distribution can be: Set A = {1, 1}, Set B = {1} -> Difference = |2 - 1| = 1 (no need for a swap)","solution":"def minimal_possible_difference(n, nums): nums.sort(reverse=True) setA, setB = [], [] sumA, sumB = 0, 0 for num in nums: if sumA <= sumB: setA.append(num) sumA += num else: setB.append(num) sumB += num min_diff = abs(sumA - sumB) for a in setA: for b in setB: new_sumA = sumA - a + b new_sumB = sumB - b + a min_diff = min(min_diff, abs(new_sumA - new_sumB)) return min_diff"},{"question":"Given an array of integers and a positive integer k, write a function to determine if there are any two distinct indices i and j in the array such that the difference between nums[i] and nums[j] is at most k and the difference between i and j is at most k. Input: - An array of integers nums. - A positive integer k. Output: - Return true if such elements exist, otherwise return false. Constraints: - 1 ≤ nums.length ≤ 10^4 - 1 ≤ k ≤ 10^4 - -10^9 ≤ nums[i] ≤ 10^9 Example: SAMPLE INPUT nums = [1, 2, 3, 1] k = 3 SAMPLE OUTPUT True Explanation: The array is [1, 2, 3, 1] and k is 3. There are two pairs (i, j): - nums[0] and nums[3] where nums[0] = nums[3] = 1 and |0 - 3| = 3 which is <= k. Hence, the output is true.","solution":"def contains_nearby_almost_duplicate(nums, k): Determines if there are two distinct indices i and j such that the difference between nums[i] and nums[j] is at most k and the difference between i and j is at most k. Args: nums (List[int]): List of integers. k (int): A positive integer. Returns: bool: Return True if such elements exist, otherwise False. if len(nums) < 2 or k < 1: return False index_dict = {} for i, num in enumerate(nums): if num in index_dict: if i - index_dict[num] <= k: return True index_dict[num] = i return False"},{"question":"You are given a list of integers. Your task is to write a function that returns the sum of the two highest numbers in the list. Your solution should have a time complexity of (O(n)), where (n) is the number of elements in the list. Input Format A single line containing a list of integers separated by spaces. Constraints The list will contain at least two integers and each integer is in the inclusive range ([-1000, 1000]). Output Format Print the sum of the two highest numbers in the list. Sample Input 3 6 1 9 5 Sample Output 15 Function Signature ```python def sum_two_highest_numbers(numbers: List[int]) -> int: ```","solution":"from typing import List def sum_two_highest_numbers(numbers: List[int]) -> int: if len(numbers) < 2: raise ValueError(\\"List must contain at least two numbers\\") first_highest = second_highest = float(\'-inf\') for num in numbers: if num > first_highest: second_highest = first_highest first_highest = num elif num > second_highest: second_highest = num return first_highest + second_highest"},{"question":"Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the nodes and only using constant extra space. For example: Example 1: Input: head = [1,2,3,4] Output: [2,1,4,3] Example 2: Input: head = [] Output: [] Example 3: Input: head = [1] Output: [1]","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def swap_pairs(head): Swaps every two adjacent nodes in a linked list. :type head: ListNode :rtype: ListNode if not head or not head.next: return head # Initialize dummy node which helps to simplify the swapping at the head node dummy = ListNode(0) dummy.next = head current = dummy while current.next and current.next.next: first = current.next second = current.next.next # Swap nodes first.next = second.next second.next = first current.next = second # Move to the next pair current = first return dummy.next # Helper function to convert list to linked list def list_to_linkedlist(lst): if not lst: return None dummy = ListNode(0) current = dummy for value in lst: current.next = ListNode(value) current = current.next return dummy.next # Helper function to convert linked list to list def linkedlist_to_list(head): lst = [] while head: lst.append(head.val) head = head.next return lst"},{"question":"-----Question----- You are working with a grid of dimensions N times M that consists of only \'0\'s and \'1\'s. A contiguous region of \'1\'s forms an island. A contiguous region is defined as a group of \'1\'s connected horizontally or vertically (not diagonally). The task is to find the number of distinct islands in the grid. -----Input----- The first line of input contains two integers, N and M (1 leq N, M leq 50), representing the number of rows and columns in the grid, respectively. The next N lines each contain M characters, either \'0\' or \'1\', representing the grid. -----Output----- The output must contain a single integer, representing the number of distinct islands in the grid. -----Examples----- Sample Input 1: 4 5 11110 11010 11000 00000 Sample Output 1: 1 Sample Input 2: 4 5 11000 11000 00100 00011 Sample Output 2: 3 Sample Input 3: 3 3 000 010 000 Sample Output 3: 1","solution":"def num_islands(grid): if not grid: return 0 nrows, ncols = len(grid), len(grid[0]) visited = set() def dfs(r, c): stack = [(r, c)] directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while stack: cr, cc = stack.pop() for dr, dc in directions: nr, nc = cr + dr, cc + dc if 0 <= nr < nrows and 0 <= nc < ncols and (nr, nc) not in visited and grid[nr][nc] == \'1\': visited.add((nr, nc)) stack.append((nr, nc)) num_islands = 0 for r in range(nrows): for c in range(ncols): if (r, c) not in visited and grid[r][c] == \'1\': visited.add((r, c)) dfs(r, c) num_islands += 1 return num_islands def parse_input_and_calc_num_islands(input_str): lines = input_str.strip().split(\'n\') N, M = map(int, lines[0].split()) grid = [list(line.strip()) for line in lines[1:N + 1]] return num_islands(grid)"},{"question":"Alice and Bob are playing a game involving strings and operations to be performed on them. Alice has a string `s` of length `n` and she wants to convert it into another string `t` of the same length using the least number of operations. In one operation, Alice can pick any continuous substring of `s` and reverse its characters in place. Bob challenges Alice to find the minimum number of such operations needed to transform `s` into `t`, as well as to output all the operations required to achieve the transformation. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the strings. The second line contains a string s of length n consisting of lowercase English letters. The third line contains a string t of length n consisting of lowercase English letters. It is guaranteed that t can be obtained by rearranging the characters of s. -----Output----- In the first line, print the minimum number of operations required to transform string s into string t. In the second line, print number k (0 ≤ k ≤ 2·10^6) — the number of operations needed to get the solution. In the next k lines, print the operations. Each line must contain two integers l and r (1 ≤ l ≤ r ≤ n), indicating that you need to reverse the substring `s[l...r]`. -----Examples----- Input 5 abcde edcba Output 1 1 1 5 Input 7 abcdefg gfedcba Output 1 1 1 7 -----Note----- In the first sample, reversing the substring from position 1 to 5 transforms the string \\"abcde\\" into \\"edcba\\", which matches `t`. In the second sample, reversing the substring from position 1 to 7 transforms the string \\"abcdefg\\" into \\"gfedcba\\", which matches `t`.","solution":"def min_operations_to_transform(n, s, t): operations = [] # Helper function to reverse substring from l to r def reverse_substring(s, l, r): return s[:l] + s[l:r + 1][::-1] + s[r + 1:] # Convert s to list to allow mutable operations s = list(s) t = list(t) # Track operations needed operations = [] for i in range(n): if s[i] != t[i]: # Find the position in s that should be at t[i] pos = s.index(t[i], i) # Reverse the substring to bring t[i] at position i s = reverse_substring(s, i, pos) operations.append((i + 1, pos + 1)) # converting 0-based to 1-based return len(operations), operations"},{"question":"You are given an array of integers, where each integer represents a particular weight. Your task is to divide the array into two subsets such that the difference between the sum of elements in the two subsets is minimized. Write a function `findMinDiff(arr)` that takes an array of integers `arr` as input and returns the minimum difference between the sums of the two subsets. Input The input consists of an array `arr` of integers, where the length of the array is between 1 and 50, and each integer is between 1 and 1000. Output The output is a single integer, the minimum possible difference between the sum of elements in the two subsets. Example Input ``` arr = [3, 1, 4, 2, 2, 1] ``` Output ``` 1 ``` Explanation The array can be divided into two subsets: `[1, 1, 2, 2]` and `[3, 4]`, which have sums 6 and 7 respectively. The difference between the sums is `7 - 6 = 1`, which is the minimum difference possible. Input ``` arr = [10, 20, 15, 5, 25] ``` Output ``` 5 ``` Explanation The array can be divided into two subsets: `[10, 20, 15]` and `[5, 25]`, which have sums 45 and 50 respectively. The difference between the sums is `50 - 45 = 5`, which is the minimum difference possible.","solution":"def findMinDiff(arr): Returns the minimum difference between the sums of two subsets of the given array. total_sum = sum(arr) n = len(arr) dp = [[False for i in range(total_sum + 1)] for j in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum + 1): if arr[i-1] <= j: dp[i][j] = dp[i-1][j-arr[i-1]] or dp[i-1][j] else: dp[i][j] = dp[i-1][j] diff = float(\'inf\') for j in range(total_sum // 2, -1, -1): if dp[n][j]: diff = total_sum - 2 * j break return diff"},{"question":"Palindromic love is enthralled by palindromes and is always on the lookout for new ways to create them. One day, he decided to play around with a special type of sequence. Given an integer n, write a function to determine the largest palindromic number that can be formed using exactly n digits. INPUT The first line of input contains a single integer n representing the number of digits. OUTPUT Output the largest palindromic number that can be formed using exactly n digits. CONSTRAINTS 1 ≤ n ≤ 10^6 SAMPLE INPUT 3 SAMPLE OUTPUT 999 SAMPLE INPUT 4 SAMPLE OUTPUT 9999 Note: - For this problem, in case n is 1, the result should be 9. - Inherently, the larger the digits used, the larger the palindromic number will be.","solution":"def largest_palindrome(n): Returns the largest palindromic number that can be formed using exactly n digits. if n < 1: raise ValueError(\\"Input n must be at least 1\\") return int(\'9\' * n)"},{"question":"Alice loves to buy gifts for her friends. There are `n` gift items in a shop, and each gift item `i` has a price of `p_i` dollars. Alice has a budget of `b` dollars, and she wants to buy as many gifts as possible without exceeding her budget. She can choose to buy any subset of the gifts, but she cannot buy fraction of any gift item; it has to be the whole item or nothing. Alice needs to determine the maximum number of gift items she can buy without exceeding her budget. -----Input----- The first line of the input contains two integers `n` and `b` (1 le n le 10^5, 1 le b le 10^9) — the number of gift items in the shop and Alice\'s budget. The next `n` lines contain one integer each: the `i`-th line contains `p_i` (1 le p_i le 10^9) — the price of the `i`-th gift item. -----Output----- Print a single integer — the maximum number of gift items Alice can buy without exceeding her budget. -----Examples----- Input 5 50 20 30 10 40 50 Output 2 Input 3 100 60 30 70 Output 2 -----Note----- In the first example, Alice can buy the gift items priced 20 and 30 (20 + 30 = 50) which is exactly within her budget of 50. Alternatively, she can buy the gift items priced 10 and 40 (10 + 40 = 50). She can buy at most 2 items. In the second example, Alice can buy the gift items priced 60 and 30 (60 + 30 = 90) which is within her budget of 100. Alternatively, she can buy the gift item priced 70. She can buy at most 2 items.","solution":"def max_gifts(n, b, prices): Determine the maximum number of gifts Alice can buy without exceeding her budget. :param n: int - Number of gift items :param b: int - Alice\'s budget in dollars :param prices: List[int] - Prices of each gift item :return: int - Maximum number of gifts prices.sort() total_price = 0 count = 0 for price in prices: if total_price + price <= b: total_price += price count += 1 else: break return count"},{"question":"Problem Statement You are managing a bus system in a city. Each bus route has a start and end location, collectively called a bus segment. Each bus segment is defined by a pair of integers ((S_i, E_i)). The bus route system aims to deliver quick and direct routes to passengers by combining overlapping or contiguous bus segments into a single route. Your task is to combine all overlapping or contiguous bus segments and determine the single routes. Two bus segments ((S_i, E_i)) and ((S_j, E_j)) are considered overlapping or contiguous if: - (E_i geq S_j - 1), and - (S_i leq E_j + 1) For instance, the bus segments ((2, 6)) and ((5, 9)) overlap, while the segments ((2, 6)) and ((7, 10)) are contiguous. Input - The first line contains an integer ( t ) (1 ≤ ( t ) ≤ 10), the number of test cases. - For each test case: - The first line contains an integer ( n ) (1 ≤ ( n ) ≤ 100), the number of bus segments. - The next ( n ) lines each contain two space-separated integers ( S_i ) and ( E_i ) (1 ≤ ( S_i, E_i ) ≤ 1000, ( S_i leq E_i )) representing the start and end locations of each segment. Output - For each test case, output the combined bus routes as pairs of integers ((start, end)) in a new line. Each test case should have the combined routes sorted by the start location. Sample Input ``` 2 3 1 5 2 6 8 10 4 1 3 5 8 9 12 7 9 ``` Sample Output ``` 1 6 8 10 1 3 5 12 ``` Explanation **Case 1:** - The segments ((1, 5)) and ((2, 6)) are overlapping and can be combined into ((1, 6)). - The segment ((8, 10)) does not overlap or touch any other segment. **Case 2:** - The segments ((7, 9)), ((9, 12)) and ((5, 8)) are overlapping or contiguous and will be combined into ((5, 12)). - The segment ((1, 3)) does not overlap or touch any other segment.","solution":"def combine_bus_segments(segments): Combines overlapping or contiguous bus segments. if not segments: return [] # Sort segments by starting point segments.sort() combined_segments = [] current_start, current_end = segments[0] for start, end in segments[1:]: if start <= current_end + 1: # segments are overlapping or contiguous current_end = max(current_end, end) else: # segments are disjoint combined_segments.append((current_start, current_end)) current_start, current_end = start, end # append the last segment combined_segments.append((current_start, current_end)) return combined_segments def process_test_cases(test_cases): Processes multiple test cases and returns the combined bus segments for each test case. results = [] for segments in test_cases: results.append(combine_bus_segments(segments)) return results"},{"question":"In the near future, a new kind of social network called ConnectU has emerged, focusing on facilitating direct and indirect connections among its users. Each user on ConnectU has a unique user ID and a list of friends represented by their user IDs. Unlike traditional social networks, ConnectU does not display each user\'s direct friends but determines the user\'s influence based on the shortest paths (degrees of separation) to connect to other users. Two main features of ConnectU are: 1. **Friend Recommendation**: ConnectU suggests new friends by finding the user who can be connected with the fewest number of degrees of separation. 2. **Network Centrality**: ConnectU determines the user with the highest influence by calculating which user has the smallest average shortest path to all other users. Inspired by this new network\'s functionality, you need to develop a way to calculate the shortest path for these new features. # Task Given the number of users and their friendships, write a program to: 1. Determine the shortest path between two specified users. 2. Identify the user with the highest influence by finding the user with the smallest average shortest path to all other users. Input - The first line contains two integers, `n` (2 leq n leq 1000) and `m` (0 leq m leq n*(n-1)/2), representing the number of users and the number of friendships respectively. - The next `m` lines each contain two integers, `u` and `v` (1 leq u, v leq n, u neq v), indicating that user `u` and user `v` are friends. - The next line contains two integers, `s` and `t` (1 leq s, t leq n, s neq t), representing the users for whom you need to find the shortest path. Output - Print a single integer, the length of the shortest path between users `s` and `t`. If there is no path, print `-1`. - Print the user ID of the user with the highest influence. In case of a tie, print the smallest user ID. Example # Sample Input: ``` 5 4 1 2 2 3 3 4 4 5 1 5 ``` # Sample Output: ``` 4 3 ``` # Explanation: The shortest path between users 1 and 5 is `1 -> 2 -> 3 -> 4 -> 5`, which consists of 4 edges. User 3 has the smallest average shortest path to all other users, making them the most influential user on ConnectU.","solution":"from collections import deque, defaultdict def bfs_shortest_path(graph, start, goal): Uses BFS to find the shortest path from start to goal in an undirected graph. Returns the length of the shortest path, or -1 if there is no path. if start == goal: return 0 visited = set() queue = deque([(start, 0)]) # (current_node, current_distance) while queue: current_node, current_distance = queue.popleft() if current_node == goal: return current_distance visited.add(current_node) for neighbor in graph[current_node]: if neighbor not in visited: queue.append((neighbor, current_distance + 1)) return -1 def calculate_user_influence(graph, n): Calculate the user influence, which is determined by the smallest average shortest path from a user to all other users in the graph. def average_shortest_path_length(start): visited = [False] * (n + 1) queue = deque([start]) distances = {start: 0} total_distance = 0 count = 0 while queue: current_node = queue.popleft() current_distance = distances[current_node] for neighbor in graph[current_node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) distances[neighbor] = current_distance + 1 total_distance += distances[neighbor] count += 1 return total_distance / count if count > 0 else float(\'inf\') shortest_average_path = float(\'inf\') most_influential_user = None for user in range(1, n + 1): current_average_path = average_shortest_path_length(user) if current_average_path < shortest_average_path: shortest_average_path = current_average_path most_influential_user = user elif current_average_path == shortest_average_path: most_influential_user = min(most_influential_user, user) return most_influential_user def connectu_analysis(n, m, friendships, s, t): graph = defaultdict(list) for u, v in friendships: graph[u].append(v) graph[v].append(u) shortest_path_length = bfs_shortest_path(graph, s, t) most_influential_user = calculate_user_influence(graph, n) return shortest_path_length, most_influential_user"},{"question":"A number is called \\"bouncy\\" if the digits of the number are neither in non-decreasing order nor in non-increasing order. For example, the number 132 is bouncy because the digits are not sorted in any order. On the other hand, 123 and 321 are not bouncy because their digits are sorted in increasing and decreasing order, respectively. Your task is to write a function that determines whether a given number is bouncy. -----Task----- Your task is to determine whether a given number is bouncy. -----Input----- The input contains a single line with a positive integer N, 10 leq N leq 1; 000; 000. -----Output----- Output \\"True\\" if the number is bouncy; otherwise, output \\"False\\". -----Examples----- Sample Input: 132 Sample Output: True Sample Input: 123 Sample Output: False","solution":"def is_bouncy(number): Returns True if the number is bouncy, False otherwise. increasing = decreasing = True num_str = str(number) for i in range(len(num_str) - 1): if num_str[i] < num_str[i + 1]: decreasing = False elif num_str[i] > num_str[i + 1]: increasing = False return not (increasing or decreasing)"},{"question":"Alice has a tree with N nodes and N-1 edges. Each node is labeled from 1 to N. She wants to color each node with one of the K colors such that no two connected nodes have the same color. Determine if Alice can color the tree in such a way. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains two integers N and K — the number of nodes and the number of colors respectively. - The next N-1 lines of each test case contain two integers u and v — denoting an edge between nodes u and v. ------ Output Format ------ For each test case, output YES if Alice can color the tree using the given K colors such that no two connected nodes share the same color. Otherwise, output NO. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^5 1 ≤ K ≤ 10^5 1 ≤ u, v ≤ N - The sum of N over all test cases won\'t exceed 2 cdot 10^5. ----- Sample Input 1 ------ 3 5 3 1 2 1 3 3 4 3 5 4 2 1 2 1 3 2 4 7 1 1 2 1 3 2 4 3 5 4 6 5 7 ----- Sample Output 1 ------ YES YES NO","solution":"def can_color_tree(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][:2] if K >= 2: results.append(\\"YES\\") else: results.append(\\"NO\\" if N > 1 else \\"YES\\") return results # Example usage: T = 3 test_cases = [ (5, 3, [(1, 2), (1, 3), (3, 4), (3, 5)]), (4, 2, [(1, 2), (1, 3), (2, 4)]), (7, 1, [(1, 2), (1, 3), (2, 4), (3, 5), (4, 6), (5, 7)]) ] print(can_color_tree(T, test_cases)) # Output: [\'YES\', \'YES\', \'NO\']"},{"question":"-----Input----- The input consists of a single integer N (1 leq N leq 10^5), representing the number of elements in the array. The next line contains N integers a_i (-10^9 leq a_i leq 10^9). -----Output----- Output a single integer, the length of the longest contiguous subarray that contains at most two distinct integers. -----Examples----- Sample Input: 5 1 2 1 2 1 Sample Output: 5 Sample Input: 7 1 2 3 4 5 1 1 Sample Output: 3","solution":"def longest_subarray_with_two_distinct(nums): Returns the length of the longest contiguous subarray that contains at most two distinct integers. if not nums: return 0 left = 0 right = 0 max_length = 0 count_map = {} while right < len(nums): count_map[nums[right]] = count_map.get(nums[right], 0) + 1 while len(count_map) > 2: count_map[nums[left]] -= 1 if count_map[nums[left]] == 0: del count_map[nums[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"In this coding challenge, you are required to determine the smallest missing positive integer from a given list of integers. ------ Input ------ The first line contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the size of the list. The second line of each test case contains N space-separated integers representing the list of integers. ------ Output ------ For each test case, output a single line containing the smallest missing positive integer. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 10^5 -10^9 ≤ text{list[i]} ≤ 10^9 ------ Sample Input 1 ------ 3 5 1 2 3 4 6 4 -1 -2 0 1 4 1 1 0 -1 ------ Sample Output 1 ------ 5 2 2 ------ Explanation ------ Example case 1: The smallest positive integer missing in the list [1, 2, 3, 4, 6] is 5. Example case 2: The smallest positive integer missing in the list [-1, -2, 0, 1] is 2. Example case 3: The smallest positive integer missing in the list [1, 1, 0, -1] is 2.","solution":"def smallest_missing_positive_integer(arr): Returns the smallest missing positive integer in the array. arr = [x for x in arr if x > 0] if not arr: return 1 max_val = max(arr) presence = [False] * (max_val + 1) for num in arr: if num <= max_val: presence[num] = True for i in range(1, max_val + 1): if not presence[i]: return i return max_val + 1 def find_smallest_missing_positive(test_cases): results = [] for case in test_cases: N, arr = case results.append(smallest_missing_positive_integer(arr)) return results # Sample input test_cases = [ (5, [1, 2, 3, 4, 6]), (4, [-1, -2, 0, 1]), (4, [1, 1, 0, -1]) ] print(find_smallest_missing_positive(test_cases)) # Output: [5, 2, 2]"},{"question":"A team of archaeologists has discovered an ancient document with a peculiar set of instructions to locate a hidden treasure. The document contains two strings, `pattern` and `text`. The `pattern` string represents a sequence that the archaeologists need to identify within the `text` string. Additionally, the document provides a number `k` indicating the maximum number of characters that can be \'skipped\' or omitted in the `text` to find the `pattern`. Your task is to determine if the `pattern` string can be located in the `text` string by omitting at most `k` characters. If the `pattern` can be found, return `True`, otherwise return `False`. # Input - The first line contains a string `pattern` (1 ≤ length of `pattern` ≤ 100). - The second line contains a string `text` (1 ≤ length of `text` ≤ 100,000). - The third line contains an integer `k` (0 ≤ k ≤ 100). # Output - Output a single boolean value: `True` if the `pattern` can be found in the `text` with at most `k` omissions, and `False` otherwise. # Examples Example 1 Input: ``` abc axbycz 2 ``` Output: ``` True ``` Example 2 Input: ``` hello hleollollo 3 ``` Output: ``` True ``` Example 3 Input: ``` pattern abcdefg 5 ``` Output: ``` False ``` # Note - In the first example, omitting x and y from `axbycz` results in `abc`, which matches `pattern`. - In the second example, by omitting \'le\' or \'oll\' the `pattern` `hello` can be found. - In the third example, the `pattern` `pattern` cannot be found in `abcdefg` even with 5 omissions.","solution":"def can_find_pattern(pattern, text, k): Check if the pattern can be found in the text with at most k omissions. Parameters: pattern (str): The pattern string to search for. text (str): The text string to search within. k (int): The maximum number of characters that can be omitted. Returns: bool: True if pattern can be found with at most k omissions, False otherwise. # Lengths of the pattern and text m, n = len(pattern), len(text) # Using dynamic programming, dp[i][j] will be True if pattern[:i] can be found # in text[:j] with at most k skips dp = [[False] * (n + 1) for _ in range(m + 1)] # Base case: empty pattern can always be found in any text for j in range(n + 1): dp[0][j] = True # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if pattern[i - 1] == text[j - 1]: dp[i][j] = dp[i - 1][j - 1] if dp[i][j - 1]: dp[i][j] = True # Check the last row for any `True` within the permissible skips for j in range(k + 1, n + 1): if dp[m][j]: return True return False"},{"question":"Create a program that simulates a basic card game involving a standard 52-card deck. The game will involve dealing five cards to each player and then determining the winner based on the highest card in hand. Aces are considered high cards. # Input - The first line of input contains a single integer `t` (1 ≤ t ≤ 100), the number of test cases. - For each test case, the first line contains two integers `n` and `m` (2 ≤ n, m ≤ 10), where `n` is the number of players and `m` is the number of cards to be dealt to each player. # Output - For each test case, output the string \\"Test Case #x\\" where x is the test case number starting from 1. - For each player, output the cards dealt in the format \\"Player y: card1 card2 card3 ... cardm\\", where y is the player number starting from 1. - On the next line, output the player number of the winner with the highest card in the format \\"Winner: Player z\\". If there is a tie for the highest card, output the player with the lowest player number. # Example Input: 2 3 5 4 5 Output: Test Case #1 Player 1: AS KD 10H 3C 8S Player 2: 2D 3H 4S 5C 6D Player 3: 7H 8C 9S TS JC Winner: Player 1 Test Case #2 Player 1: KS QD JH 2C 3S Player 2: 5D 6H 7S 8C 9D Player 3: 10H JC QH KH AH Player 4: 2C 3H 4D 5S 6C Winner: Player 3 # Notes - Assume that the card \\"2H\\" represents the 2 of hearts, \\"10D\\" represents the 10 of diamonds, \\"KS\\" represents the King of spades, etc. - The program should randomly shuffle the deck for each test case before dealing the cards to the players. - Aces are considered the highest value cards, followed by Kings, Queens, Jacks, and then numeric values. - In the event of a tie for the highest card across players\' hands, the player with the smallest player number wins.","solution":"import random def create_deck(): suits = [\'H\', \'D\', \'C\', \'S\'] values = [\'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'J\', \'Q\', \'K\', \'A\'] return [value + suit for value in values for suit in suits] def card_value(card): value_order = {\'2\': 2, \'3\': 3, \'4\': 4, \'5\': 5, \'6\': 6, \'7\': 7, \'8\': 8, \'9\': 9, \'10\': 10, \'J\': 11, \'Q\': 12, \'K\': 13, \'A\': 14} return value_order[card[:-1]] def deal_cards(deck, n, m): players_hands = [[] for _ in range(n)] for _ in range(m): for player_hand in players_hands: player_hand.append(deck.pop(0)) return players_hands def determine_winner(players_hands): highest_value = 0 winner = 0 for player_index, hand in enumerate(players_hands): max_card_value = max(card_value(card) for card in hand) if max_card_value > highest_value: highest_value = max_card_value winner = player_index + 1 return winner def simulate_card_game(test_cases): results = [] for case_num, (n, m) in enumerate(test_cases, 1): deck = create_deck() random.shuffle(deck) players_hands = deal_cards(deck, n, m) results.append(f\\"Test Case #{case_num}\\") for idx, hand in enumerate(players_hands): results.append(f\\"Player {idx + 1}: {\' \'.join(hand)}\\") winner = determine_winner(players_hands) results.append(f\\"Winner: Player {winner}\\") return results # This function accepts input directly for simplicity def card_game(): t = int(input()) test_cases = [] for _ in range(t): n, m = map(int, input().split()) test_cases.append((n, m)) results = simulate_card_game(test_cases) for result in results: print(result)"},{"question":"Given a matrix of integers with dimensions NxM, where each cell represents an elevation at that point, write a function to identify the largest water body. A water body is defined as a region of contiguous cells with the same elevation. Two cells are considered contiguous if they are adjacent horizontally, vertically, or diagonally. The output should be the size of the largest water body (i.e., the number of cells in that water body). Example 1: Input: matrix = [ [1, 1, 2, 3], [1, 2, 2, 3], [4, 2, 1, 1], [4, 4, 1, 2] ] Output: 4 Explanation: There are multiple water bodies of size 4 (the largest), one such water body being the contiguous 1\'s forming the bottom left corner. Example 2: Input: matrix = [ [5, 5, 5], [5, 3, 5], [5, 5, 5] ] Output: 8 Explanation: The largest water body here comprises eight 5\'s, surrounding the 3 in the center of the matrix.","solution":"def largest_water_body(matrix): Find the largest water body in a matrix of elevations. A water body is defined as contiguous cells with the same elevation. Args: matrix: List of list of int. NxM matrix where each cell represents an elevation. Returns: int: Size of the largest water body. if not matrix or not matrix[0]: return 0 def dfs(x, y, elevation): if (x < 0 or x >= len(matrix) or y < 0 or y >= len(matrix[0]) or (x, y) in visited or matrix[x][y] != elevation): return 0 visited.add((x, y)) size = 1 for dx, dy in directions: size += dfs(x + dx, y + dy, elevation) return size directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (1, 1), (-1, 1), (1, -1)] visited = set() largest = 0 for i in range(len(matrix)): for j in range(len(matrix[0])): if (i, j) not in visited: water_body_size = dfs(i, j, matrix[i][j]) largest = max(largest, water_body_size) return largest"},{"question":"------ Input Format ------ - The first line will contain T, the number of test cases. The description of test cases follow. - The first line of each test case consists of an integer N, the length of the sequence. - The second line of each test case consists of N space-separated integers A_{i}, the elements of the sequence. ------ Problem Statement ------ You\'re given a sequence of N integers, which may contain both positive and negative values. You need to find and return the length of the longest contiguous subarray with a sum equal to 0. A contiguous subarray is a contiguous part of the array. For example, if the array is [1, -1, 3, 2, -2], then [1, -1], [-1, 3, 2, -2] and [2, -2] are some valid contiguous subarrays. ------ Output Format ------ - For each test case, output one line. - The line should consist of a single integer, representing the length of the longest contiguous subarray with sum 0. If no such subarray exists, return 0. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 10^{5} −10^{9}≤ A_{i} ≤ 10^{9} ----- Sample Input 1 ------ 2 5 1 -1 3 2 -2 6 1 4 -2 2 6 -6 ----- Sample Output 1 ------ 2 4","solution":"def longest_zero_sum_subarray_length(arr): Returns the length of the longest contiguous subarray with sum equal to 0. prefix_sum = 0 prefix_sum_index_map = {0: -1} max_length = 0 for i, num in enumerate(arr): prefix_sum += num if prefix_sum in prefix_sum_index_map: max_length = max(max_length, i - prefix_sum_index_map[prefix_sum]) else: prefix_sum_index_map[prefix_sum] = i return max_length def process_test_cases(test_cases): results = [] for N, sequence in test_cases: results.append(longest_zero_sum_subarray_length(sequence)) return results"},{"question":"You are provided with a list of `n` integers. Determine if there are any two different elements in the list whose sum is zero. ----- Constraints ----- - The length of the list is `n` where `2 <= n <= 1000` - The integer values in the list range from `-10^4` to `10^4` ----- Input ----- Input is given from Standard Input in the following format: First line contains an integer `n` which represents the length of the list. The next line contains `n` integers separated by space. ----- Output ----- If there exist two distinct elements in the list whose sum is zero, print `YES`. Otherwise, print `NO`. ----- Sample Input ----- 5 1 -1 2 3 4 ----- Sample Output ----- YES Explanation: The list contains 1 and -1 whose sum is zero.","solution":"def check_sum_to_zero(n, numbers): This function checks if there exist two distinct elements in the list whose sum is zero. :param n: int, the length of the list :param numbers: list of int, the list of integers :return: str, \\"YES\\" if there exist two distinct elements whose sum is zero, otherwise \\"NO\\" numbers_set = set() for num in numbers: if -num in numbers_set: return \\"YES\\" numbers_set.add(num) return \\"NO\\""},{"question":"You are given two strings, `a` and `b`, both consisting of lowercase English letters. A shifting operation consists of moving the first character of a string to its end. For example, if we apply a shifting operation to the string \\"abcde\\", it becomes \\"bcdea\\". You need to determine if string `b` can be obtained from string `a` by applying several (possibly zero) shifting operations. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the strings. The second line contains string `a` of length n, consisting of lowercase English letters. The third line contains string `b` of length n, consisting of lowercase English letters. Output Print \\"YES\\" (without quotes) if `b` can be obtained from `a` by applying several (possibly zero) shifting operations, otherwise print \\"NO\\". Examples Input 5 abcde cdeab Output YES Input 4 abcd dbca Output NO Note In the first example, `b` can be obtained from `a` by shifting the first two characters (\\"abcde\\" -> \\"bcdea\\" -> \\"cdeab\\"). In the second example, it is not possible to obtain `b` from `a` through any number of shifting operations.","solution":"def can_obtain_by_shifting(n, a, b): Determine if string `b` can be obtained from string `a` by applying several (possibly zero) shifting operations. if len(a) != n or len(b) != n: return \\"NO\\" combined = a + a return \\"YES\\" if b in combined else \\"NO\\""},{"question":"Given an array of integers, you are required to perform the following operations to sort the array in non-decreasing order with minimum cost: 1. You are allowed to pick any subarray and reverse it. 2. Each time you reverse a subarray, it costs you 1 unit. You need to determine the minimum cost to sort the array using the above operation. Input Format The first line contains an integer T, the number of test cases. (1 ≤ T ≤ 10) Each test case consists of two lines: The first line contains an integer n, the size of the array. (1 ≤ n ≤ 100,000) The second line contains n space-separated integers representing the elements of the array. Output Format For each test case, print a single line containing the minimum cost required to sort the array. Example Input 2 4 4 3 2 1 5 1 2 3 4 5 Example Output 1 0","solution":"def min_reversal_cost(T, test_cases): Determine the minimum cost to sort each array using the allowed operation (reversing subarrays). Parameters: - T: int, number of test cases. - test_cases: list of tuples, each containing: - n: int, size of the array. - arr: list of int, the array itself. Returns: - list of int, minimum cost for each test case. results = [] for n, arr in test_cases: # If the array is already sorted, the cost is 0 if arr == sorted(arr): results.append(0) else: # Otherwise, the cost to sort it is always 1 results.append(1) return results"},{"question":"A group of adventurers is exploring a mysterious dungeon. Inside the dungeon, they encounter a series of magic doors, each with a distinct property. Each door is represented as a number, and the property of each door is keyed to whether the number is even or odd. If a number is even, passing through the door increases the adventurers\' strength by the number itself. If the number is odd, passing through the door decreases their strength by the number itself. The adventurers start with a certain initial strength and must pass through all the doors in sequence to complete their journey. Your task is to determine the maximum strength the adventurers can have by the time they exit the dungeon. Write a function `maxStrength` that takes an integer `initialStrength` and an array `doors` as input, and returns the maximum strength possible after passing through all the doors. Example 1: Input: initialStrength = 10, doors = [2, 3, 5, 8, 10] Output: 22 Explanation: Initial strength = 10 Pass through door 2: Strength = 10 + 2 = 12 Pass through door 3: Strength = 12 - 3 = 9 Pass through door 5: Strength = 9 - 5 = 4 Pass through door 8: Strength = 4 + 8 = 12 Pass through door 10: Strength = 12 + 10 = 22 Example 2: Input: initialStrength = 5, doors = [1, 6, 7, 4] Output: 7 Explanation: Initial strength = 5 Pass through door 1: Strength = 5 - 1 = 4 Pass through door 6: Strength = 4 + 6 = 10 Pass through door 7: Strength = 10 - 7 = 3 Pass through door 4: Strength = 3 + 4 = 7 Example 3: Input: initialStrength = 7, doors = [9, 3, 8] Output: 3 Explanation: Initial strength = 7 Pass through door 9: Strength = 7 - 9 = -2 Pass through door 3: Strength = -2 - 3 = -5 Pass through door 8: Strength = -5 + 8 = 3 Your task: You do not need to read input or print anything. Complete the function `maxStrength` which takes `initialStrength` (an integer) and `doors` (an array of integers) and returns the maximum strength at the end of passing through all the doors. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ initialStrength ≤ 1000 1 ≤ doors.length ≤ 1000 -100 ≤ doors[i] ≤ 100","solution":"def maxStrength(initialStrength, doors): Returns the maximum strength possible after passing through all the doors in sequence. Parameters: initialStrength (int): The initial strength of the adventurers. doors (list of int): The list of door values representing the properties of each door. Returns: int: The maximum strength possible after passing through all the doors. strength = initialStrength for door in doors: if door % 2 == 0: strength += door else: strength -= door return strength"},{"question":"---- Question ---- Olivia is coding a messaging app and wants to implement a feature that filters out inappropriate words from messages. She already has a list of forbidden words and each message is comprised of lowercase alphabetical characters and spaces. Your task is to help Olivia by writing a function that replaces each occurrence of a forbidden word with asterisks (*) of the same length in a given message. The forbidden words list will only include single words, and the forbidden words will not overlap. ----Input---- The first line contains a string, message (1 <= |message| <= 1000). The second line contains an integer n (1 <= n <= 50) — the number of forbidden words. The following n lines each contain a forbidden word (1 <= |forbidden_word| <= 20). ----Output---- Print the filtered message with all the forbidden words replaced with asterisks. ----Examples---- Input hello there 2 hello there Output ***** ***** Input this is a simple test 1 simple Output this is a ****** test","solution":"def filter_message(message, forbidden_words): for word in forbidden_words: message = message.replace(word, \'*\' * len(word)) return message"},{"question":"Given a string s consisting of lowercase English letters, determine if you can create a new string t by rearranging the letters of s such that no two adjacent characters of t are the same. If it\'s possible, output the resultant string t. If it\'s not possible, output \\"No solution\\". Input - The first line contains a single string s (1 ≤ |s| ≤ 10^5). Output - Print a new string t if it is possible; otherwise, print \\"No solution\\". Example Input aab Output aba Input aaab Output No solution","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the string s such that no two adjacent characters are the same. If it\'s not possible, returns \\"No solution\\". # Count the frequency of each character count = Counter(s) # Create a max heap based on the counts max_heap = [(-value, key) for key, value in count.items()] heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) # Add the previous character back if count is still > 0 if prev_char is not None and prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Append the current character and update the previous character and count result.append(char) prev_char = char prev_count = count + 1 # Since we added the current character to the result # Check if the rearranged string length matches the original string length if len(result) != len(s): return \\"No solution\\" return \'\'.join(result)"},{"question":"📦 You are an efficient warehouse manager! You need to organize boxes in such a way that all the heavy boxes are moved to the left side and all the light boxes are moved to the right side of a storage row. 📦 📋 You would be given an array of integers where each integer represents the weight of a box: int[] weights = {5, 10, 3, 7, 2, 8} 👉 Your task is to rearrange the array in such a way that all the heavy boxes (weights greater than or equal to 7) are at the beginning of the array and all the light boxes (weights less than 7) are at the end of the array. The order of the weights within their respective categories should be preserved. ☑️ Return the rearranged array. ❗❗ Note that boxes with the same weight should retain their original relative order. 💡 Example: start: weights = {5, 10, 3, 7, 2, 8} end: weights = {10, 7, 8, 5, 3, 2} ➕ For arrays with no weights greater than or equal to 7, the original array is returned unchanged. ➕ For empty arrays, return an empty array.","solution":"def rearrange_weights(weights): This function rearranges the array such that all weights greater than or equal to 7 are on the left side and all weights less than 7 are on the right side, while preserving the order of weights within their respective categories. heavy = [weight for weight in weights if weight >= 7] light = [weight for weight in weights if weight < 7] return heavy + light"},{"question":"When managing computer hardware, it\'s important to understand RAM (random access memory) functionality. For this exercise, imagine you have a simple simulated memory module. **Memory Initialization:** You\'re given a command to set up a list of integers that represents memory cells. **Commands:** 1. `\\"ALLOC A B\\"` - Allocates space for variable A with size B. 2. `\\"STORE A I V\\"` - Stores value V at index I in the memory dedicated to variable A. 3. `\\"FREE A\\"` - Frees the memory allocated to variable A. 4. `\\"DUMP\\"` - Dumps the current state of the entire memory space as a single list, where unused cells are represented with `None`. **Rules:** - Memory space is contiguous. - Variables may not overlap in memory. - Once a variable is freed, its space can be reallocated. **Initial Example:** Commands: `[\\"ALLOC var1 2\\", \\"STORE var1 0 10\\", \\"STORE var1 1 20\\", \\"ALLOC var2 3\\", \\"STORE var2 0 30\\", \\"DUMP\\"]` The memory state after each operation would be: 1. After `ALLOC var1 2`: `[None, None]` 2. After `STORE var1 0 10`: `[10, None]` 3. After `STORE var1 1 20`: `[10, 20]` 4. After `ALLOC var2 3`: `[10, 20, None, None, None]` 5. After `STORE var2 0 30`: `[10, 20, 30, None, None]` 6. After `DUMP`: `[10, 20, 30, None, None]` Here\'s a Python function specifying how these operations should be handled: ```python def memory_management(commands): memory = [] allocations = {} for command in commands: parts = command.split() op = parts[0] if op == \\"ALLOC\\": var, size = parts[1], int(parts[2]) allocations[var] = len(memory) memory.extend([None] * size) elif op == \\"STORE\\": var, idx, val = parts[1], int(parts[2]), int(parts[3]) memory[allocations[var] + idx] = val elif op == \\"FREE\\": var = parts[1] start = allocations.pop(var) size = len(memory[start:]) memory[start:start + size] = [None] * size elif op == \\"DUMP\\": return memory return memory # Example usage: print(memory_management([\\"ALLOC var1 2\\", \\"STORE var1 0 10\\", \\"STORE var1 1 20\\", \\"ALLOC var2 3\\", \\"STORE var2 0 30\\", \\"DUMP\\"])) ``` Write a function that, given a list of such commands, manages the memory appropriately and performs the operations as described.","solution":"def memory_management(commands): memory = [] allocations = {} for command in commands: parts = command.split() op = parts[0] if op == \\"ALLOC\\": var, size = parts[1], int(parts[2]) allocations[var] = len(memory) memory.extend([None] * size) elif op == \\"STORE\\": var, idx, val = parts[1], int(parts[2]), int(parts[3]) memory[allocations[var] + idx] = val elif op == \\"FREE\\": var = parts[1] start = allocations.pop(var) size = len(memory[start:]) memory[start:start + size] = [None] * size elif op == \\"DUMP\\": return memory return memory"},{"question":"Given an integer array arr of length N and an integer X. Your task is to find all pairs in the array whose sum is equal to X. Each pair should be returned in ascending order (smaller element first). The pairs themselves should be returned in lexicographic order based on their first element. If there are no such pairs, return an empty list. Example 1: Input: N = 5, X = 10 arr[] = {3, 4, 7, 1, 5} Output: [(3, 7), (4, 6), (5, 5)] Explanation: Pairs with sum 10 are: (3, 7), (4, 6), (5, 5) Example 2: Input: N = 4, X = 8 arr[] = {1, 2, 3, 4} Output: [] Explanation: No pairs sum up to 8. Your Task: This is a functional problem. You only need to complete the function findPairsWithSum(). The printing is done automatically by the driver code. Expected Time Complexity: O(N log(N)). Expected Auxiliary Space: O(1). Constraints: 1 <= N <= 10^5 1 <= arr[i], X <= 10^5","solution":"def findPairsWithSum(arr, N, X): Finds all pairs in the array whose sum is equal to X. arr.sort() # Sort the array to handle pairs in ascending order pairs = [] left, right = 0, N - 1 while left < right: current_sum = arr[left] + arr[right] if current_sum == X: pairs.append((arr[left], arr[right])) left += 1 right -= 1 elif current_sum < X: left += 1 else: right -= 1 return pairs"},{"question":"Let\'s write a program that performs image rotation. The program should receive a square matrix representing an image and rotate it 90 degrees clockwise. Input: - The first line contains an integer n (1 ≤ n ≤ 20), representing the side length of the nxn matrix. - The next n lines each contain n integers, representing the rows of the matrix. Output: - Output the rotated matrix, with each row represented on a new line. Separate the elements of each row with a single space. Example: Input: ``` 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 7 4 1 8 5 2 9 6 3 ``` In this example, the input matrix: ``` 1 2 3 4 5 6 7 8 9 ``` is rotated 90 degrees clockwise to: ``` 7 4 1 8 5 2 9 6 3 ``` Consider edge cases such as: - The smallest possible square matrix (1x1) - The largest possible square matrix (20x20)","solution":"def rotate_matrix_90_degrees_clockwise(matrix): Rotates the given nxn matrix by 90 degrees clockwise. Args: matrix (list of list of int): A 2D list representing the matrix. Returns: list of list of int: The rotated matrix. n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - i - 1] = matrix[i][j] return rotated_matrix def format_matrix(matrix): return \'n\'.join(\' \'.join(map(str, row)) for row in matrix)"},{"question":"I: Organize Strings Problem Statement You have an array of strings, `strings`, and an integer `N`. Your task is to sort the strings in such a way that for each string, you count the number of vowels (a, e, i, o, u) in it. The strings should be sorted based on the number of vowels in descending order. If two strings have the same number of vowels, then they should be sorted lexicographically in ascending order. Write a function `sort_strings_by_vowels(strings: List[str], N: int) -> List[str]` that takes an array of strings `strings` and an integer `N`, and returns the array sorted according to the criteria mentioned. Input - An integer `N` (1 ≤ N ≤ 1000) representing the number of strings. - An array of `N` strings. Output - The sorted array of strings according to the number of vowels. Constraints - 1 ≤ |strings[i]| ≤ 100 (length of each string) - The strings contain only lowercase English letters. Example Input ```python N = 5 strings = [\\"apple\\", \\"banana\\", \\"grape\\", \\"kiwi\\", \\"orange\\"] ``` Output ```python [\\"banana\\", \\"orange\\", \\"apple\\", \\"grape\\", \\"kiwi\\"] ``` Explanation - \\"banana\\" has 3 vowels: a, a, a - \\"orange\\" has 3 vowels: o, a, e - \\"apple\\" has 2 vowels: a, e - \\"grape\\" has 2 vowels: a, e - \\"kiwi\\" has 2 vowels: i, i \\"banana\\" and \\"orange\\" both have 3 vowels, but \\"banana\\" comes before \\"orange\\" lexicographically. For strings with the same number of vowels, they are sorted lexicographically.","solution":"from typing import List def count_vowels(s: str) -> int: vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} return sum(1 for char in s if char in vowels) def sort_strings_by_vowels(strings: List[str], N: int) -> List[str]: return sorted(strings, key=lambda s: (-count_vowels(s), s))"},{"question":"Lara loves playing with sequences and operations. She recently came up with an interesting game involving a set of N operations and K given integers. The operations are defined as follows: - S(x) = (x & A) | (x & B) | (x & C) Here, & denotes the bitwise AND operation, and | denotes the bitwise OR operation. Lara is given the values of S(0), S(1), ..., S(N-1) and she needs your help to determine the values of A, B, and C. It is guaranteed that at least one set of values exists for the given input. If there are multiple valid sets of A, B, C, print any one. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two space-separated integers N and K. - The next line contains K space-separated integers, denoting S(0), S(1), ..., S(K-1). ------ Output Format ------ For each test case, output on a new line, three space-separated integers, the values of A, B, and C. If there are multiple valid sets of A, B, C, print any one. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 1 ≤ K ≤ N 0 ≤ S(i) ≤ 1000 ------ Sample Input 1 ------ 2 3 3 2 3 2 4 4 1 0 1 0 ------ Sample Output 1 ------ 1 2 0 1 0 3 ------ Explanation 1 ------ Test case 1: The set (A=1, B=2, C=0) satisfies the set of operations: - S(0) = (0 & 1) | (0 & 2) | (0 & 0) = 0 - S(1) = (1 & 1) | (1 & 2) | (1 & 0) = 1 - S(2) = (2 & 1) | (2 & 2) | (2 & 0) = 2 Test case 2: The set (A=1, B=0, C=3) satisfies the set of operations: - S(0) = (0 & 1) | (0 & 0) | (0 & 3) = 0 - S(1) = (1 & 1) | (1 & 0) | (1 & 3) = 1 - S(2) = (2 & 1) | (2 & 0) | (2 & 3) = 2 - S(3) = (3 & 1) | (3 & 0) | (3 & 3) = 3","solution":"def find_abc(n, k, s_values): # Initialize A, B, and C to the first value in S. # This is safe because we are guaranteed at least one valid set of A, B, C. A = B = C = s_values[0] for i in range(1, k): # Deduce A, B, and C by using the AND and OR properties bit by bit A |= s_values[i] B |= s_values[i] C |= s_values[i] return A, B, C def solve(test_cases): results = [] for n, k, s_values in test_cases: A, B, C = find_abc(n, k, s_values) results.append(f\\"{A} {B} {C}\\") return results # Read and process input def main(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n, k = map(int, lines[index].split()) s_values = list(map(int, lines[index + 1].split())) test_cases.append((n, k, s_values)) index += 2 result = solve(test_cases) return \\"n\\".join(result)"},{"question":"A robot is programmed to move on an infinite 2D grid. Initially, the robot is at the origin point (0, 0). The robot is given a sequence of commands, each commanding it to move one unit in a specific direction. There are four possible commands: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. After executing the sequence, the robot will end up at a certain coordinate on the grid. Your task is to determine the final coordinates of the robot. Input The input contains a single string consisting of commands \'U\', \'D\', \'L\', and \'R\'. The length of the string is between 1 and 10^5. Output Print two space-separated integers representing the final coordinates of the robot. Examples Input URRDDL Output 1 -1 Input UUDDLRLR Output 0 0","solution":"def final_coordinates(commands): This function takes a string of commands (with \'U\', \'D\', \'L\', \'R\' representing up, down, left, and right respectively) and returns the final coordinates of the robot after it executes these commands. :param commands: str - A string of commands :return: tuple - The final coordinates (x, y) as a tuple x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y)"},{"question":"The kingdom of Graphland has n cities, numbered from 1 to n, connected by m bidirectional roads. Each road connects two cities and has a certain length. The kingdom\'s transportation department wants to find the shortest path from the capital city (city 1) to each other city. Given the list of roads and their lengths, calculate the shortest distance from the capital city to every other city in Graphland. If a city is not reachable from the capital, the distance should be considered as -1. Input The first line contains two integers n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ 105) — the number of cities and the number of roads. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 109), which means there is a road connecting city u and city v with length w. Output Output n integers, where the i-th integer is the shortest distance from the capital city (city 1) to city i. If city i is not reachable from the capital, print -1 for that city. Examples Input 6 7 1 2 4 1 3 2 3 2 1 2 4 7 3 5 3 5 4 2 4 6 1 Output 0 3 2 7 5 8","solution":"import heapq def find_shortest_paths(n, m, roads): graph = {i: [] for i in range(1, n+1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[1] = 0 priority_queue = [(0, 1)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [distances[i] if distances[i] != float(\'inf\') else -1 for i in range(1, n+1)]"},{"question":"Evan the Engineer loves challenges involving number sequences and unique transformations. Recently, he came across a fascinating problem that involves transforming a sequence of positive integers through a specific set of rules. Can you help Evan solve this problem? The transformation process involves the concept of \\"pair reduction.\\" In each transformation step, adjacent pairs of integers in the sequence are examined from left to right. For each pair ((a, b)): - If (a neq b), the pair ((a, b)) is replaced by a new number ( max(a, b) ) and the sequence length reduces by 1. This transformation process is repeated until only one number remains in the sequence. You are given several sequences, and for each sequence, you need to determine the final number that remains after all possible transformations. -----Input----- The first line contains the number of test cases ( t ) ((1 leq t leq 100)). The description of each test case follows. Each test case starts with an integer ( n ) ((2 leq n leq 10^3)) representing the length of the sequence. The next line contains ( n ) positive integers, representing the sequence. It is guaranteed that the sum of ( n ) over all test cases does not exceed (10^4). -----Output----- For each test case, output the final number that remains after performing all possible transformations on the sequence. -----Examples----- Input 3 5 3 5 2 4 1 4 7 7 7 7 6 1 8 6 7 5 3 Output 5 7 8 -----Note----- Explanation for the first test case: The sequence transforms as follows: [ [3, 5, 2, 4, 1] rightarrow [5, 2, 4, 1] rightarrow [5, 4, 1] rightarrow [5, 4] rightarrow [5] ]","solution":"def final_number_after_transformations(t, test_cases): results = [] for i in range(t): n, seq = test_cases[i] while len(seq) > 1: new_seq = [max(seq[j], seq[j+1]) for j in range(len(seq)-1)] seq = new_seq results.append(seq[0]) return results"},{"question":"Given a list of integers representing the data packets received from a network over a specific period of time, you are tasked with identifying the longest subsequence of packets that are strictly increasing. Network packets often arrive out of order due to various reasons such as network congestion, packet loss, or varying packet latencies. Your goal is to find the length of the longest increasing subsequence of packets, where each packet is represented as an integer. -----Input----- The input consists of two lines: - The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of data packets received. - The second line contains n integers, each representing the data packet received in the order they arrived. Each integer is between -10^9 and 10^9. -----Output----- Output one integer, the length of the longest strictly increasing subsequence of data packets. -----Examples----- Sample Input: 8 3 10 2 1 20 4 6 7 Sample Output: 4 Explanation: The longest strictly increasing subsequence is [3, 4, 6, 7], which has length 4.","solution":"def longest_increasing_subsequence_length(packets): Returns the length of the longest strictly increasing subsequence in the list of packets. if not packets: return 0 n = len(packets) lis = [1] * n for i in range(1, n): for j in range(0, i): if packets[i] > packets[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"You are managing a warehouse and need to organize the incoming shipments of packages. Each package has a distinct weight and needs to be stored on a shelf. There are N packages and you have a shelf that can be filled with at most W weight units at a time. Your goal is to store the packages in such a way that minimizes the number of shelves used. However, there\'s a twist: you need to store the packages on the shelves in the given order; you cannot rearrange the packages. If adding a new package to a shelf causes the total weight to exceed W, you must start a new shelf. Write a function that calculates the minimum number of shelves required to store all packages. Input format: - The first line contains two integers N and W, where N is the number of packages and W is the maximum weight capacity of each shelf. - The second line contains N integers, representing the weights of the packages in the order they will be stored. Output format: - Print a single integer, the minimum number of shelves required. Constraints: 1 ≤ N ≤ 100 1 ≤ W ≤ 1000 1 ≤ weight of each package ≤ 1000 SAMPLE INPUT 5 10 2 3 7 1 5 SAMPLE OUTPUT 3 Explanation: - The first shelf can hold 2, 3, and 7 (total weight 2+3+7=12, exceeds 10). So, it holds 2 and 3. - The second shelf holds 7 (total weight 7). - The third shelf holds 1 and 5 (total weight 1+5=6). Hence, a total of 3 shelves are required.","solution":"def min_shelves_required(N, W, weights): Calculate the minimum number of shelves required to store all packages given the weight constraints. Args: N : int - the number of packages W : int - the maximum weight capacity of each shelf weights : list of int - the weights of the packages in the given order Returns: int - the minimum number of shelves required # Initialize the count for shelves required shelves_count = 1 current_shelf_weight = 0 for weight in weights: if current_shelf_weight + weight <= W: current_shelf_weight += weight else: shelves_count += 1 current_shelf_weight = weight return shelves_count"},{"question":"In a certain country, the health ministry wants to ensure that all citizens have access to a hospital within a certain distance. The country is represented as a large grid, with some cells containing hospitals while others are empty. Your task is to determine the minimum distance required so that every citizen has access to a hospital within that distance. The distance is measured as the minimum number of steps required to reach a hospital either horizontally or vertically. You are given a grid of size m x n where each cell is either \'H\' indicating a hospital or \'.\' indicating an empty cell. Your task is to find the smallest distance d such that every empty cell is within d steps of at least one hospital. -----Input----- The first line contains two integers m and n (1 ≤ m, n ≤ 1000). The following m lines each contain n characters, either \'H\' or \'.\', representing the grid. -----Output----- Output a single integer, the smallest distance d such that every empty cell is within d steps of at least one hospital. -----Examples----- Input 3 3 .H. ... H.H Output 1 Input 4 4 H..H .... .... H..H Output 2 -----Note----- In the first example, the maximum distance any empty cell is from a hospital is 1. Therefore, the minimum distance required is 1. In the second example, the empty cells in the center are 2 steps away from any hospital, so the minimum distance required is 2.","solution":"from collections import deque def bfs_min_distance(grid, m, n): # find all the hospitals hospitals = [] for i in range(m): for j in range(n): if grid[i][j] == \'H\': hospitals.append((i, j)) # directions for movement: left, right, up, down directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # initialize distance grid with infinity dist = [[float(\'inf\')] * n for _ in range(m)] # queue for BFS queue = deque() for (x, y) in hospitals: queue.append((x, y)) dist[x][y] = 0 # distance to itself is zero while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n: if dist[nx][ny] > dist[x][y] + 1: dist[nx][ny] = dist[x][y] + 1 queue.append((nx, ny)) # find the maximum distance among all empty cells max_distance = 0 for i in range(m): for j in range(n): if grid[i][j] == \'.\': max_distance = max(max_distance, dist[i][j]) return max_distance def min_distance_to_hospital(m, n, grid): return bfs_min_distance(grid, m, n)"},{"question":"You are given a string representing a mathematical expression containing only non-negative integers and parentheses. Your task is to evaluate the expression and return the result. The string is guaranteed to be a valid expression. The expression may contain spaces, which should be ignored. The mathematical expression will include the following operators: addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`). Division should truncate toward zero. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. Description of the test cases follows. Each test case contains a single line with a mathematical expression as a string. The length of the expression is between 1 and 1000. -----Output----- For each test case, output a single line with the result of the evaluated mathematical expression. -----Examples----- Input 3 3+2*(1+3) (2+6*3+5-(3*14/7+2)*5)+3 45 Output 11 -12 45 -----Hint----- In the first test case: 3+2*(1+3) = 3+2*4 = 3+8 = 11 In the second test case: (2+6*3+5-(3*14/7+2)*5)+3 = (2+18+5-(6+2)*5)+3 = (2+18+5-40)+3 = -12 In the third test case: 45","solution":"def evaluate_expression(expression): Evaluates a mathematical expression given as a string with non-negative integers and returns the result. def parse_expression(expr): stack = [] num = 0 sign = \'+\' i = 0 while i < len(expr): char = expr[i] if char.isdigit(): num = num * 10 + int(char) if char == \'(\': j = i count = 0 while i < len(expr): if expr[i] == \'(\': count += 1 if expr[i] == \')\': count -= 1 if count == 0: break i += 1 num = parse_expression(expr[j + 1:i]) if char in \\"+-*/)\\" or i == len(expr) - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack.append(stack.pop() * num) elif sign == \'/\': stack.append(int(stack.pop() / num)) # Truncate towards zero sign = char num = 0 i += 1 return sum(stack) expression = expression.replace(\\" \\", \\"\\") return parse_expression(expression) def process_test_cases(t, test_cases): results = [] for expression in test_cases: results.append(evaluate_expression(expression)) return results"},{"question":"Write a function named `find_substrings` that takes two parameters: a string `s` and a positive integer `k`. The function should return all unique substrings of `s` that have exactly `k` characters. For example: - `find_substrings(\\"abcde\\", 2)` should return `[\\"ab\\", \\"bc\\", \\"cd\\", \\"de\\"]` - `find_substrings(\\"abac\\", 2)` should return `[\\"ab\\", \\"ba\\", \\"ac\\"]` - `find_substrings(\\"aaa\\", 1)` should return `[\\"a\\"]` Note: 1. The order of substrings in the returned list does not matter. 2. If there are no substrings of the specified length `k`, the function should return an empty list.","solution":"def find_substrings(s, k): Returns all unique substrings of `s` that have exactly `k` characters. if k > len(s): return [] unique_substrings = set() for i in range(len(s) - k + 1): substring = s[i:i + k] unique_substrings.add(substring) return list(unique_substrings)"},{"question":"You are responsible for organizing a coding contest. Participants will be given problems to solve and you need to automatically rank them based on their performance. Each participant will be timed for how long they take to solve each problem and they will get scores based on their solutions. The ranking system works as follows: - Participants are ranked by the number of problems they solved correctly. - In the event of a tie, the participant who solved the problems in less cumulative time (the sum of time taken to solve each problem) ranks higher. - If there is still a tie, participants are ranked by their unique ID in ascending order. Given a list of participants and their performance data, create a ranking list. Each participant has a unique ID (an integer). For each problem, you are given the time taken to solve it or -1 if the participant did not solve the problem. Input: The first line of input contains two integers, P and Q, where P is the number of participants and Q is the number of problems. Next, P lines follow, each containing the participant\'s ID, followed by Q integers representing the time taken to solve each problem or -1 if the problem was not solved. Output: Output P lines, each containing a participant\'s ID in the order they should be ranked. Constraints: 1 ≤ P, Q ≤ 100 1 ≤ ID ≤ 10^9 0 ≤ Time ≤ 1000 SAMPLE INPUT: 3 3 101 30 50 -1 102 45 -1 60 103 30 80 50 SAMPLE OUTPUT: 103 101 102","solution":"def rank_participants(P, Q, data): participants = [] for row in data: ID = row[0] times = row[1:] solved = sum(1 for time in times if time != -1) time_sum = sum(time for time in times if time != -1) participants.append((solved, time_sum, ID, row)) participants.sort(key=lambda x: (-x[0], x[1], x[2])) ranked_ids = [participant[2] for participant in participants] return ranked_ids"},{"question":"A popular online e-commerce website is organizing a flash sale where users can get discounts on their favorite products. There are N products, each with a certain discount D_i and availability A_i which represents the number of items available for that product. There are U users who want to buy a specific product P_i and they have a preferred timestamp T_i at which they plan to make the purchase. The website wants to ensure that they can maximize the number of sales while preventing multiple users from purchasing the same product at the exact same timestamp due to website constraints. If two or more users want to buy the same product at the same time, only one of those purchases can be completed, and the other attempts are forfeited. Your task is to help the website determine the maximum number of successful purchases possible. -----Input:----- The first line contains an integer T denoting the number of test cases. Each test case starts with two integers N and U, the number of products and the number of users, respectively. The next N lines each contain two integers D_i and A_i, representing the discount and availability of the ith product. Each of the next U lines contains two integers P_i and T_i, representing the product ID that the user wants to buy and the timestamp at which the purchase is attempted by that user. -----Output:----- For each test case, print the maximum number of successful purchases. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^3 - 1 leq U leq 10^5 - 1 leq D_i leq 100 - 1 leq A_i leq 10^3 - 1 leq P_i leq N - 1 leq T_i leq 10^9 -----Sample Input:----- 1 3 5 10 2 15 1 20 3 1 5 2 10 1 5 3 15 2 10 -----Sample Output:----- 3 -----EXPLANATION:----- Three successful purchases are possible: - The first user buys product 1 at timestamp 5. - The second user buys product 2 at timestamp 10. - The fourth user buys product 3 at timestamp 15. - Since the third user also tries to buy product 1 at timestamp 5, the attempt fails due to the constraint that only one purchase can be completed at a time. - Since the fifth user also tries to buy product 2 at timestamp 10, the attempt fails for the same reason.","solution":"from collections import defaultdict, Counter def max_successful_purchases(T, test_cases): results = [] for i in range(T): N, U = test_cases[i][\'N\'], test_cases[i][\'U\'] products = test_cases[i][\'products\'] user_attempts = test_cases[i][\'user_attempts\'] product_availability = {idx + 1: products[idx][1] for idx in range(N)} attempt_dict = defaultdict(list) for user in user_attempts: P_i, T_i = user attempt_dict[(P_i, T_i)].append(user) successful_purchases = 0 for key, attempts in attempt_dict.items(): P_i = key[0] if product_availability[P_i] > 0: successful_purchases += 1 product_availability[P_i] -= 1 results.append(successful_purchases) return results"},{"question":"Escolan is a diligent city planner tasked with designing a new public transportation network for his city. To achieve this, he must construct a series of bus routes linking important city landmarks. Each landmark is represented as a unique node in a graph, and each bus route is represented as a weighted undirected edge connecting two nodes. The weight represents the cost of building that route. Escolan wants to minimize the total construction cost while ensuring that all the landmarks are connected by the bus routes, forming a connected graph. Furthermore, due to budget constraints, it\'s crucial to determine whether it\'s viable to construct such a network within a given cost limit. Your task is to help Escolan determine the minimum total cost to construct the bus routes that connect all landmarks, or to find out if it\'s impossible to stay within the given budget. Input The first line contains two integers n and m (1 ≤ n ≤ 10^4, 1 ≤ m ≤ 10^5), where n represents the number of landmarks and m is the number of possible bus routes. The second line contains an integer C (0 ≤ C ≤ 10^9), representing the maximum allowed cost for constructing the network. Each of the following m lines contains three integers u, v and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), representing a bidirectional bus route between landmarks u and v with a construction cost of w. Output If it is possible to construct the network within the budget C, print the minimum construction cost. Otherwise, print -1. Examples Input 4 5 10 1 2 1 2 3 2 3 4 3 1 3 2 4 2 4 Output 6 Input 4 4 5 1 2 3 2 3 2 3 4 6 1 4 8 Output -1 Input 3 3 8 1 2 4 1 3 2 3 2 6 Output 6 Note In the first example, the minimum cost to connect all landmarks is 6, which is within the budget of 10. In the second example, the cost to connect all landmarks with the cheapest viable network is 11, which exceeds the budget of 5, making it impossible to construct the network within the given budget. In the third example, the cheapest network connecting all landmarks costs 6, which is within the budget of 8.","solution":"class DisjointSet: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def minimum_cost_to_construct_network(n, m, C, edges): edges.sort(key=lambda x: x[2]) # Sort edges based on cost ds = DisjointSet(n) total_cost = 0 edges_used = 0 for u, v, w in edges: if ds.find(u - 1) != ds.find(v - 1): ds.union(u - 1, v - 1) total_cost += w edges_used += 1 if edges_used == n - 1: break if edges_used == n - 1 and total_cost <= C: return total_cost else: return -1"},{"question":"XYZ Telecom is designing a call routing system for its branch offices across different cities. Each city has a network of offices interconnected by telephone lines. The aim is to guarantee that every office has the possibility to communicate with every other office via direct or indirect telephone connections. However, due to budget constraints, XYZ Telecom wants to minimize the number of telephone lines while still ensuring full connectivity between all offices within a city. The system should calculate the minimum number of telephone lines required to achieve this goal in each city. Essentially, for each city, you need to find the minimum number of edges (telephone lines) in a connected graph where all nodes (offices) are reachable from any other node. Input The input consists of multiple datasets. Each dataset describes a city\'s network of offices. The first line contains two integers N (1 ≤ N ≤ 1000) and M (0 ≤ M ≤ 5000) separated by a space. N is the number of offices and M is the number of existing telephone lines. The following M lines each contain two integers u and v (1 ≤ u, v ≤ N and u ≠ v), representing a telephone line between offices u and v. Input terminates by a line with two zeroes, which should not be processed. Output For each dataset, print a single line containing the minimum number of telephone lines required to connect all offices in the city. If the offices are already fully connected, print 0. Example Input 4 2 1 2 1 3 3 1 1 2 2 0 0 0 Output 1 0","solution":"def find_minimum_connections(n, m, edges): Find the minimum number of telephone lines required to connect all offices in the city. :param n: Number of offices. :param m: Number of existing telephone lines. :param edges: List of tuples where each tuple represents a telephone line between two offices. :return: Minimum number of additional telephone lines required. if n <= 1: # No connections needed for one office return 0 # Initialize parent array for union-find parent = list(range(n+1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY for u, v in edges: union(u, v) # Count unique sets unique_components = len(set(find(i) for i in range(1, n+1))) # Number of additional connections needed is the number of components minus one return unique_components - 1"},{"question":"Write a function called `uniquePaths` that calculates the number of unique paths from the top-left corner to the bottom-right corner of a grid. # Grid Movement - You can only move either down or right at any point in time. # Function Signature - The function should accept two integers, representing the number of rows `m` and columns `n` of the grid. - The function should return an integer representing the number of unique paths. # Example ```python uniquePaths(3, 7) => returns 28 uniquePaths(3, 2) => returns 3 uniquePaths(1, 10) => returns 1 ``` # Constraints - (1 leq m, n leq 100) - The result will be a valid integer within the range of a typical 32-bit integer. # Notes * You will need to use dynamic programming to solve this problem efficiently. * A naive solution with a recursive approach might be too slow and should be optimized. # Hints Consider how many ways there are to reach each cell from the top-left corner. Use a 2D array where each cell at position (i, j) stores the number of ways to reach that cell from the top-left corner.","solution":"def uniquePaths(m, n): Calculate the number of unique paths in an m x n grid, moving only right or down. Args: m (int): Number of rows n (int): Number of columns Returns: int: Number of unique paths # Create a 2D array with m rows and n columns, initialized to 1 dp = [[1]*n for _ in range(m)] # Iterate through the array starting from cell (1,1) for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right cell contains the number of unique paths return dp[-1][-1]"},{"question":"A renowned archaeologist is exploring ancient ruins which contain numerous artefacts scattered in a rectangular grid. He has a special device that can detect artefacts in the form of a list of coordinates within the grid. Each coordinate (x, y) denotes the position of an artefact. However, the device sometimes misses detecting some artefacts due to interference. The archaeologist wants to use the detected coordinates to determine the possible positions of all artefacts in the grid. The archaeologist believes the artefacts might be arranged in a consistent pattern or formation, so he wants you to identify the largest rectangular sub-grid (sub-rectangle) that contains the maximum number of artefacts, given the detected coordinates. Your task is to write a program to help the archaeologist find such a sub-rectangle and report its top-left and bottom-right coordinates. Input The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the dimensions of the rectangular grid (rows and columns respectively). The second line contains an integer k (0 ≤ k ≤ m * n) — the number of detected artefacts. The next k lines each contain two space-separated integers: xi, yi (1 ≤ xi ≤ m, 1 ≤ yi ≤ n) — the coordinates of the detected artefacts in the grid. Output If there are no detected artefacts, print a single integer -1. Otherwise, print four integers: x1, y1, x2, y2 — the top-left and bottom-right coordinates of the largest sub-rectangle that contains the most number of artefacts. If there are multiple such sub-rectangles, print the one with the smallest top-left coordinate, and if there are still ties, the smallest bottom-right coordinate. Examples Input 5 5 6 1 2 2 1 2 3 3 3 4 4 5 5 Output 1 1 5 5 Input 5 5 0 Output -1 Input 3 3 4 1 1 1 2 2 1 2 2 Output 1 1 2 2 Note In the first example, the entire grid of size 5x5 is used, which includes the maximum number of artefacts (6). In the second example, there are no detected artefacts, so the output is -1. In the third example, a 2x2 sub-rectangle from (1, 1) to (2, 2) contains all 4 detected artefacts.","solution":"def find_largest_subgrid(m, n, k, coordinates): if k == 0: return -1 grid = [[0] * n for _ in range(m)] for x, y in coordinates: grid[x - 1][y - 1] = 1 max_artefacts = 0 result = None for top in range(m): for left in range(n): for bottom in range(top, m): for right in range(left, n): current_artefacts = sum( grid[i][j] for i in range(top, bottom + 1) for j in range(left, right + 1) ) if current_artefacts > max_artefacts: max_artefacts = current_artefacts result = (top + 1, left + 1, bottom + 1, right + 1) elif current_artefacts == max_artefacts: if result is None or (top + 1, left + 1, bottom + 1, right + 1) < result: result = (top + 1, left + 1, bottom + 1, right + 1) return result"},{"question":"You are given a list of `n` strings. Each string consists of lowercase English letters and/or digits. Your task is to determine the length of the longest substring that is common in all the strings. -----Input----- The first line of the input contains an integer `n` (1 leq n leq 10) — the number of strings. Each of the next `n` lines contains one string s_i (1 leq |s_i| leq 10^3). -----Output----- Output a single integer — the length of the longest common substring across all `n` strings. If no common substring exists, output `0`. -----Example----- Input 3 abcdefgh bcdefxyz cdefghijk Output 4 -----Note----- For the given example, the common substrings among the three strings are: \\"cdef\\". This is the longest common substring with a length of `4`. If the input was: Input 2 abc123 456def Output 0 There are no common substrings between `abc123` and `456def`, so the answer is `0`.","solution":"def longest_common_substring(n, strings): Returns the length of the longest common substring among all the strings in the given list. if n == 1: return len(strings[0]) # Function to find all substrings of a given string def get_all_substrings(string): length = len(string) substrings = set() for i in range(length): for j in range(i + 1, length + 1): substrings.add(string[i:j]) return substrings common_substrings = get_all_substrings(strings[0]) for string in strings[1:]: substrings = get_all_substrings(string) common_substrings = common_substrings & substrings # Intersection of sets if not common_substrings: return 0 return max(len(substr) for substr in common_substrings)"},{"question":"In an ancient kingdom, the king decides to build a wall to protect his territory from enemies. The wall consists of bricks of different heights arranged in a straight line. Each brick has a height and a unit width. The height of the wall at any point is defined by the height of the brick at that point. The king wants to make sure that the wall is as strong as possible in two specific ways: 1. The wall should be almost non-decreasing, meaning the height of each brick should be no less than the height of the brick to its left (=[i]<==[i+1]). 2. The wall should contain the maximum possible height. Given an array of integers representing the heights of bricks, find the maximum possible height of the wall that can be built under the given constraints. ------ Input Format ------ - The first line contains a single integer T, denoting the number of test cases. - The first line of each test case contains a single integer N, denoting the number of bricks. - The second line of each test case contains N space-separated integers, h_1, h_2, ..., h_N, denoting the heights of the bricks. ------ Output Format ------ For each test case, output an integer that represents the maximum possible height of the wall that can be built. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ h_i ≤ 10^4 ----- Sample Input 1 ------ 2 5 4 1 8 5 7 6 2 2 3 3 1 5 ----- Sample Output 1 ------ 8 5 ----- Explanation 1 ------ Test Case 1: The wall can be built with the heights: [4, 8] or [4, 5, 7]. Test Case 2: The wall can be progressively built, selecting the maximum height from right to left, resulting in a height of 5.","solution":"def max_possible_height(test_cases): results = [] for n, heights in test_cases: max_height = 0 for h in heights: max_height = max(max_height, h) results.append(max_height) return results"},{"question":"A group of mysterious hackers called \'CipherSyndicate\' have been encrypting important information using a special encryption algorithm. The encryption process is as follows: for each letter in a given string, they shift it forward in the alphabet by a fixed number of positions. For instance, with a shift of 2, \'a\' becomes \'c\', \'b\' becomes \'d\', and so on. The letter \'z\' wraps around to \'b\'. Given an encrypted string, your task is to write a program that can decrypt it by shifting the letters backward by the given number of positions. Remember that: - The encryption preserves the case of the letter (i.e., lowercase letters remain lowercase, and uppercase letters remain uppercase). - Non-alphabetical characters remain unchanged. - The shift value can be in the range from 1 to 25. Input: - The first line of input contains an integer t, which is the number of test cases. - Each test case consists of two lines: - The first line contains an encrypted string s. - The second line contains an integer k, which is the shift value. Output: For each test case, output the decrypted string on a new line. Constraints: - 1 ≤ t ≤ 10^5 - 1 ≤ |s| ≤ 100 (1 ≤ length of string s ≤ 100) - 1 ≤ k ≤ 25 SAMPLE INPUT 2 Uifsf jt b tfdsfu dpef! 1 Dwwdfn wkh dssurdfk! 3 SAMPLE OUTPUT There is a secret code! Attack the approach! Explanation: In the first test case, each letter in the string \\"Uifsf jt b tfdsfu dpef!\\" is shifted backward by 1 position. Therefore, \'U\' becomes \'T\', \'i\' becomes \'h\', \'f\' becomes \'e\', and so on. Similarly, for non-alphabet characters like spaces and exclamation marks, they remain unchanged. In the second test case, each letter in the string \\"Dwwdfn wkh dssurdfk!\\" is shifted backward by 3 positions. Therefore, \'D\' becomes \'A\', \'w\' becomes \'t\', \'k\' becomes \'h\', and so on.","solution":"def decrypt_ciphertext(s, k): Decrypts the given encrypted string s by shifting each letter backward by k positions. Args: s (str): The encrypted string. k (int): The number of positions each letter is shifted backward. Returns: str: The decrypted string. decrypted = [] for char in s: if \'a\' <= char <= \'z\': # lowercase letters shifted = ord(char) - k if shifted < ord(\'a\'): shifted += 26 decrypted.append(chr(shifted)) elif \'A\' <= char <= \'Z\': # uppercase letters shifted = ord(char) - k if shifted < ord(\'A\'): shifted += 26 decrypted.append(chr(shifted)) else: # non-alphabet characters remain unchanged decrypted.append(char) return \'\'.join(decrypted) def decrypt_test_cases(test_cases): Processes multiple test cases for decryption. Args: test_cases (list of tuples): Each tuple contains an encrypted string and a shift value. Returns: list: A list of decrypted strings corresponding to each test case. results = [] for s, k in test_cases: results.append(decrypt_ciphertext(s, k)) return results"},{"question":"You are working for an online bookstore called CodeBooks, which sells books exclusively related to programming languages. CodeBooks allows customers to apply discount codes when making a purchase. As part of the development team, you are asked to write a function that calculates the final price after applying any valid discount codes. The discount codes work as follows: - \\"DISCOUNT10\\": 10% off the total price. - \\"DISCOUNT20\\": 20% off the total price. - \\"DISCOUNT30\\": 30% off the total price. However, a customer can only use one discount code per purchase. Given a total price and a discount code, write a function that returns the final price after applying the discount. If the discount code is invalid, the function should return the original price. Function signature: `def calculate_final_price(total_price: float, discount_code: str) -> float:` # Examples ```python # Example 1 print(calculate_final_price(100.0, \\"DISCOUNT10\\")) # Output: 90.0 # Example 2 print(calculate_final_price(200.0, \\"DISCOUNT20\\")) # Output: 160.0 # Example 3 print(calculate_final_price(150.0, \\"DISCOUNT30\\")) # Output: 105.0 # Example 4 print(calculate_final_price(50.0, \\"INVALIDCODE\\")) # Output: 50.0 ``` # Constraints - The `total_price` will always be a positive float. - The `discount_code` will be a string and can be empty or any other value besides the valid codes. - You need to ensure that the final price is rounded to two decimal places.","solution":"def calculate_final_price(total_price: float, discount_code: str) -> float: Calculates the final price after applying a discount code. Parameters: total_price (float): The original total price. discount_code (str): The discount code to be applied. Returns: float: The final price after applying the discount (if any). Rounded to two decimal places. if discount_code == \\"DISCOUNT10\\": discount = 0.10 elif discount_code == \\"DISCOUNT20\\": discount = 0.20 elif discount_code == \\"DISCOUNT30\\": discount = 0.30 else: discount = 0.00 final_price = total_price * (1 - discount) return round(final_price, 2)"},{"question":"Asian game fans would like to enhance their gaming experience by creating a new feature for their favorite game. This feature involves a virtual scoreboard that displays the scores as the game progresses. However, there is a catch: the scores must be displayed in descending order from top to bottom. The game provides updates in real-time, adding and possibly removing scores throughout the gameplay. Your task is to implement a system that keeps track of the scores and always displays them in descending order. You need to handle both adding a new score and removing an existing one, and then outputting the current scoreboard in the correct order. Input The input consists of multiple lines: - The first line contains a single integer q (1 ≤ q ≤ 10000) — the number of operations. - Each of the following q lines describes an operation in one of the following formats: - \\"ADD x\\" (−10^9 ≤ x ≤ 10^9): meaning add the score x to the scoreboard. - \\"REMOVE x\\" (−10^9 ≤ x ≤ 10^9): meaning remove the score x from the scoreboard. It is guaranteed that x will be present in the scoreboard when you attempt to remove it. Output After processing each operation, output the current status of the scoreboard, with the scores displayed in descending order. Each score should be printed on a new line. If the scoreboard is empty, print \\"EMPTY\\". Examples Input 7 ADD 10 ADD 20 ADD 15 REMOVE 20 ADD 7 REMOVE 10 ADD 5 Output 20 10 7 15 10 7 15 7 15 7 7 15 7 5 Input 5 ADD 30 ADD 40 REMOVE 30 ADD 50 REMOVE 50 Output 40 40 30 50 50","solution":"import bisect class Scoreboard: def __init__(self): self.scores = [] def add_score(self, x): bisect.insort_left(self.scores, -x) def remove_score(self, x): self.scores.remove(-x) def get_scores(self): if not self.scores: return [\\"EMPTY\\"] return [-score for score in self.scores] def process_operations(operations): scoreboard = Scoreboard() results = [] for operation in operations: op_parts = operation.split() if op_parts[0] == \\"ADD\\": scoreboard.add_score(int(op_parts[1])) elif op_parts[0] == \\"REMOVE\\": scoreboard.remove_score(int(op_parts[1])) results.append(scoreboard.get_scores()) return results"},{"question":"David is organizing a tabletop game tournament. He has P pawns, Q knights, R bishops, and S rooks, and he wants to arrange them in a straight line on the game board. Each piece of a given type is identical to others of the same type, and David wants to ensure that no two pieces of the same type are adjacent to each other. He wonders how many different valid arrangements he can make under these constraints. Help David determine the number of valid arrangements. Note: Swapping the positions of two identical pieces of the same type does not result in a new arrangement. Input: The first and only line of input contains four single space-separated integers P, Q, R, and S as described in the problem statement. Output: Output the number of valid arrangements. Constraints: P, Q, R, and S ≤ 8 SAMPLE INPUT 1 1 1 1 SAMPLE OUTPUT 24 Explanation There are 24 possible arrangements: PKRB, PKBR, PRKB, PRBK, PBKR, PBRK, KPRB, KPBR, KRBP, KRPB, KBPR, KBRP, RPKB, RPBK, RKBP, RKPB, RBKP, RBPB, BPRK, BPRB, BRKP, BRBP, BKPR, BKRIP","solution":"from itertools import permutations def count_valid_arrangements(P, Q, R, S): Returns the number of valid arrangements where no two identical pieces are adjacent. id_to_piece = [\'P\'] * P + [\'K\'] * Q + [\'B\'] * R + [\'R\'] * S unique_permutations = set(permutations(id_to_piece)) def is_valid(arrangement): for i in range(len(arrangement) - 1): if arrangement[i] == arrangement[i + 1]: return False return True valid_count = 0 for perm in unique_permutations: if is_valid(perm): valid_count += 1 return valid_count"},{"question":"Deanna is a scientist who loves playing with binary strings. A binary string is a string consisting of only the characters \'0\' and \'1\'. She defines the **alternating subsequence** of a binary string as a subsequence of the string which does not contain consecutive characters being the same. For example, in the string \\"10101\\", \\"101\\" and \\"010\\" are alternating subsequences, while \\"11\\" and \\"1010\\" are not. Deanna wants to find the length of the longest alternating subsequence in a given binary string. Help her determine this length. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N, the length of the binary string. - The second line contains the binary string of length N. -----Output----- For each test case, print a single line containing one integer — the length of the longest alternating subsequence. -----Constraints----- - 1 le T le 10 - 1 le N le 10^5 -----Example Input----- 2 5 10101 4 1111 -----Example Output----- 5 1 -----Explanation----- Example case 1: The entire string \\"10101\\" is itself an alternating subsequence, so the answer is 5. Example case 2: There are no alternating subsequences other than \\"1\\" or \\"1\\" from the string \\"1111\\", so the maximum length of an alternating subsequence is 1.","solution":"def longest_alternating_subsequence(binary_string): if not binary_string: return 0 count = 1 for i in range(1, len(binary_string)): if binary_string[i] != binary_string[i - 1]: count += 1 return count def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] binary_string = test_cases[i][1] results.append(longest_alternating_subsequence(binary_string)) return results"},{"question":"Alice loves to arrange her books on the shelf in such a way that all books with the same height are next to each other. Each book has a unique identifier and a height value. Alice will start from an initial ordering and then rearrange the books based on their heights in non-decreasing order. If two books have the same height, their relative order from the initial arrangement should be preserved in the final ordering. Can you help Alice to sort her books as she wants? -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100), the number of books Alice has. The next n lines each contain one book, represented by two integers id (1 ≤ id ≤ 1000) and height (1 ≤ height ≤ 100). -----Output----- Output n lines, each containing two integers representing the id and height of the books in the desired order. -----Example----- Input 5 101 30 102 40 103 20 104 30 105 40 Output 103 20 101 30 104 30 102 40 105 40 -----Note----- In the given example, Alice has 5 books. Initially, their arrangement is as follows: - Book 101 with height 30 - Book 102 with height 40 - Book 103 with height 20 - Book 104 with height 30 - Book 105 with height 40 Sorting these books by their height in non-decreasing order while maintaining the relative order of books with the same height, we get: - Book 103 with height 20 - Book 101 with height 30 - Book 104 with height 30 - Book 102 with height 40 - Book 105 with height 40","solution":"def sort_books(books): Sorts books based on their height in non-decreasing order while maintaining the relative order of books with the same height from the initial arrangement. Parameters: books (list of tuples): List of tuples where each tuple contains two integers, the id and the height of a book. Returns: list of tuples: Sorted list of books based on their height. return sorted(books, key=lambda x: x[1]) # Example usage: # books = [(101, 30), (102, 40), (103, 20), (104, 30), (105, 40)] # print(sort_books(books))"},{"question":"Develop a function that takes a string as an input and returns all possible permutations of the characters in the string. The function should avoid generating duplicate permutations if the input string contains duplicate characters. Optimize your function for efficiency. Here\'s an example to guide you: For example, given the input string `aab`, the function should return `[\'aab\', \'aba\', \'baa\']`. More formally, write a function `get_permutations(s: str) -> List[str]` that returns a list of all unique permutations of the input string `s`. Constraints: - The input string `s` will contain lowercase alphabetic characters only. - The function should handle input strings of length up to 10 characters efficiently. ```python def get_permutations(s: str) -> List[str]: # Your code here ``` You may use built-in modules like `itertools` for generating permutations, but ensure that your function removes duplicates efficiently.","solution":"from typing import List from itertools import permutations def get_permutations(s: str) -> List[str]: Returns all unique permutations of the input string s. # Generate all permutations using itertools.permutations perm = permutations(s) # Use a set to ensure uniqueness unique_perm = set(perm) # Convert tuples back to strings result = [\'\'.join(p) for p in unique_perm] return result"},{"question":"Given a string of characters, you need to determine the longest contiguous substring that contains exactly two distinct characters. Multiple occurrences of the same character count as one, and the two characters can repeat in any order within the substring. For example, for the input string \\"abcbbbbcccbdddadacb\\", the longest contiguous substring that contains exactly two distinct characters is \\"bcbbbbcccb\\". Similarly, for the input string \\"aabbcc\\", the longest contiguous substring that contains exactly two distinct characters is \\"aabb\\". # Input - The input consists of a single line containing a string s (1 ≤ |s| ≤ 10^5) containing lowercase English letters. # Output - Output a single integer representing the length of the longest contiguous substring that contains exactly two distinct characters. # Examples Example 1: **Input:** ``` abcbbbbcccbdddadacb ``` **Output:** ``` 10 ``` Example 2: **Input:** ``` aabbcc ``` **Output:** ``` 4 ``` Example 3: **Input:** ``` aaaa ``` **Output:** ``` 4 ``` Example 4: **Input:** ``` abcde ``` **Output:** ``` 2 ``` # Note In the first example, the longest contiguous substring with exactly two distinct characters is \\"bcbbbbcccb\\" which is of length 10. In the second example, the longest contiguous substring with exactly two distinct characters is either \\"aabb\\" or \\"bbcc\\", both of which are of length 4. In the third example, the entire string \\"aaaa\\" contains only one distinct character, so the length is 4. In the fourth example, any two-character substring will be the longest, so the length is 2.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest contiguous substring that contains exactly two distinct characters. from collections import defaultdict n = len(s) if n < 2: return n left = 0 right = 0 max_length = 0 char_count = defaultdict(int) while right < n: char_count[s[right]] += 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Daniel is organizing a festival where participants have to register for different events. Each event has its registration fee and duration. Considering his budget and time constraints, Daniel wants to maximize the number of distinct events he can attend without exceeding these constraints. Each event is represented by a fee and a duration. Daniel has a fixed budget and a total amount of time he can spend. Write a program to help Daniel determine the maximum number of events he can register for given his budget and time constraints. -----Input----- The first line contains three integers n, b, and t (1 leq n leq 1000, 1 leq b leq 10000, 1 leq t leq 10000) — the number of events, Daniel\'s budget, and the total time he can spend. The next n lines each contain two integers f_i and d_i (1 leq f_i leq 1000, 1 leq d_i leq 1000) — the fee and duration of each event. -----Output----- Print a single integer — the maximum number of distinct events Daniel can attend without exceeding his budget and time constraints. -----Examples----- Input 4 100 10 50 5 20 3 50 5 30 4 Output 2 Input 3 40 7 20 5 15 3 25 4 Output 1 -----Note----- In the first example: Daniel can choose to attend the events with fees 50 and 20, for a total fee of 70 and a total duration of 8, which respects both constraints. Alternatively, he can attend events with fees 20 and 30 for a total fee of 50 and a total duration of 7. So, he can attend a maximum of 2 events. In the second example: Daniel can attend one of the events with fees 15 or 20, but not both, given his budget and time constraints. Hence, he can attend a maximum of 1 event.","solution":"def max_events(n, b, t, events): # Sort events by fee, then by duration (both in ascending order) events.sort(key=lambda x: (x[0], x[1])) max_count = 0 total_fee = 0 total_time = 0 for fee, duration in events: if total_fee + fee <= b and total_time + duration <= t: total_fee += fee total_time += duration max_count += 1 else: break return max_count"},{"question":"Jane is a brilliant computer scientist working on a new project involving anagrams. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Being a programming enthusiast, Jane decided to create a function to find anagrams from a given list of words. Your task is to write a function that takes two inputs: 1. A string word 2. A list of strings word_list The function should return a list of all anagrams of the word that are present in the word_list. The output list should be sorted in lexicographical order. Input: - A string word of length between 1 and 100, consisting of only lowercase English alphabets. - A list of words word_list consisting of between 1 and 1000 words, where each word is between 1 and 100 characters long and consists of only lowercase English alphabets. Output: - A sorted list of strings containing all anagrams of the word present in the word_list. If no anagrams are found, return an empty list. Example: Input: word = \\"listen\\" word_list = [\\"enlists\\", \\"google\\", \\"inlets\\", \\"banana\\", \\"silent\\", \\"listen\\"] Output: [\\"inlets\\", \\"listen\\", \\"silent\\"] Input: word = \\"race\\" word_list = [\\"care\\", \\"acre\\", \\"scare\\", \\"races\\", \\"race\\"] Output: [\\"acre\\", \\"care\\", \\"race\\"] Note: Ensure your function handles large inputs efficiently and adheres to the defined constraints.","solution":"def find_anagrams(word, word_list): Finds all anagrams of the given word in the word_list. Args: word (str): The word to find anagrams of. word_list (list): The list of words to search for anagrams. Returns: list: Sorted list of anagrams found in the word_list. anagrams = [] sorted_word = sorted(word) for candidate in word_list: if sorted(candidate) == sorted_word: anagrams.append(candidate) return sorted(anagrams)"},{"question":"Snuke loves energy drinks. Snuke is stacking cans of energy drinks in a row. There are N cans, and the i-th can has a height of h_i and needs a base area of b_i. Snuke wants to maximize the total height of the cans with a constraint on the maximum base area that can be used. Constraints * 1 ≤ N ≤ 10^{3} * 1 ≤ h_i, b_i ≤ 10^6 * 1 ≤ M ≤ 10^9 Input The input is given from Standard Input in the following format: N M h_1 b_1 : h_N b_N Output Print the maximum total height of the cans that can be achieved without exceeding the base area M. Examples Input 4 10 2 1 4 3 7 4 1 2 Output 14 Input 3 5 5 3 8 5 4 2 Output 9","solution":"def max_height_cans(N, M, cans): Returns the maximum total height of the cans that can be achieved without exceeding the base area M. # Sort cans by their base area to maximize height without exceeding the base area. cans.sort(key=lambda x: x[1]) total_height = 0 remaining_base_area = M for height, base in cans: if base <= remaining_base_area: total_height += height remaining_base_area -= base return total_height def parse_input(input_string): Parses the input string into the required variables. lines = input_string.strip().split(\'n\') N, M = map(int, lines[0].split()) cans = [] for line in lines[1:]: h, b = map(int, line.split()) cans.append((h, b)) return N, M, cans"},{"question":"Write a program that simulates a game of Nim. In Nim, players take turns removing 1 or more objects from a single pile. The player forced to take the last object loses. -----Input----- The input consists of several lines: - The first line contains the number of test cases (no more than 20). - Each test case contains a single integer n (1 ≤ n ≤ 1000), representing the number of objects in the pile. -----Output----- For each test case, output two lines: - The first line should contain the optimal number of objects a player should take in their first move, assuming both players play optimally. - The second line should contain the name of the player who will win if both players play optimally, either \\"Player 1\\" or \\"Player 2\\". Player 1 always goes first. -----Example----- Input: 3 1 4 7 Output: 1 Player 2 1 Player 1 3 Player 1","solution":"def nim_game_movements(test_cases, objects): results = [] for n in objects: if n % 2 == 1: optimal_move = 1 winner = \\"Player 2\\" else: optimal_move = 1 winner = \\"Player 1\\" results.append((optimal_move, winner)) return results"},{"question":"Given an integer n, write a Python function that calculates the sum of all prime numbers less than n. Function Signature ```python def sum_of_primes(n: int) -> int: ``` Input - A single integer n such that 2 leq n leq 10^6 Output - Return the sum of all prime numbers less than n. Examples ```python sum_of_primes(10) ``` Output: ```python 17 ``` Explanation Primes less than 10 are 2, 3, 5, 7. Their sum is 2 + 3 + 5 + 7 = 17. ```python sum_of_primes(20) ``` Output: ```python 77 ``` Explanation Primes less than 20 are 2, 3, 5, 7, 11, 13, 17, 19. Their sum is 2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 = 77. Constraints - 2 leq n leq 10^6","solution":"def sum_of_primes(n: int) -> int: Calculates the sum of all prime numbers less than n. if n <= 2: return 0 sieve = [True] * n sieve[0], sieve[1] = False, False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return sum(num for num, is_prime in enumerate(sieve) if is_prime)"},{"question":"Given a string s of length n, your goal is to determine whether it can be broken into exactly `k` substrings where each substring is a palindrome. A palindrome is a word, phrase, or sequence of characters which reads the same backward as forward. Write a function `canBreakIntoKPalindromes(s: str, k: int) -> bool` that returns `True` if the string can be broken into exactly `k` palindromes, otherwise returns `False`. Example 1: ``` Input: s = \\"aab\\", k = 2 Output: True Explanation: \\"aab\\" can be broken into 2 palindromes: \\"aa\\" and \\"b\\". ``` Example 2: ``` Input: s = \\"abc\\", k = 2 Output: False Explanation: \\"abc\\" cannot be broken into 2 palindromes. ``` Example 3: ``` Input: s = \\"aaabb\\", k = 3 Output: True Explanation: \\"aaabb\\" can be broken into 3 palindromes: \\"aa\\", \\"a\\", \\"bb\\". ``` Constraints: - `1 <= n <= 100` - `1 <= k <= n` - The input string s will consist only of lowercase English letters.","solution":"def is_palindrome(sub): return sub == sub[::-1] def canBreakIntoKPalindromes(s, k): Determine if a string can be broken into exactly k palindromes. def can_partition(s, k, start): if k == 0: return start == len(s) for end in range(start + 1, len(s) + 1): if is_palindrome(s[start:end]) and can_partition(s, k - 1, end): return True return False return can_partition(s, k, 0)"},{"question":"You are given a string of numerical digits representing a large integer. Your task is to determine the minimum number of steps required to transform this integer into a single-digit number. In each step, you can replace any digit of the current number with the absolute difference between that digit and any of its adjacent digits. For example, given the string \\"1234\\": - In the first step, replace \'2\' with |2-1| = 1 to get \\"1134\\". - In the second step, replace \'1\' with |1-1| = 0 to get \\"1034\\". - In the third step, replace \'3\' with |3-0| = 3 to get \\"1030\\". - Continue this process until only one digit remains. Input The input consists of a single line, a string of length n (2 ≤ n ≤ 100,000) containing only numerical digits. Output Output a single integer - the minimum number of steps required to transform the input number into a one-digit number. Examples Input 1234 Output 4 Input 9988776655 Output 5 Note For the first example: - Step 1: 1234 -> 1134 (replace \'2\' with |2-1|=1) - Step 2: 1134 -> 1034 (replace \'1\' with |1-1|=0) - Step 3: 1034 -> 1030 (replace \'3\' with |3-0|=3) - Step 4: 1030 -> 1000 (replace \'4\' with |4-0|=4) - Step 5: 1000 -> 0000 (replace \'1\' with |1-0|=1 -> value \'1\') For the second example: - Step 1: 9988776655 -> 9888776655 (replace \'9\' with |9-9|=0) - Step 2: 9888776655 -> 8888776655 (replace \'8\' with |9-8|=1) - Step 3: 8888776655 -> 888776655 (replace \'8\' with |8-8|=0) - Step 4: 888776655 -> 87776655 (replace \'8\' with |8-7|=1) - Step 5: 87776655 -> 8777655 (one digit remains \'5\' -> value \'5\')","solution":"def min_steps_to_single_digit(s): n = len(s) return n - 1"},{"question":"You are given an integer N. You need to determine how many distinct bitwise OR sets (including empty sets) are there that can be formed using the numbers from 0 to N-1. A bitwise OR set is defined as a set whose elements ORed together (not necessarily through pairwise OR) form unique results. For instance, given the set {1, 2, 4}, if you OR all its elements in different combinations, you might get several results like 1 | 2 = 3, 1 | 2 | 4 = 7, and so on. Find the count of distinct bitwise OR sets modulo 1,000,000,007. Constraints * 1 leq N leq 2000 Input Input is given from Standard Input in the following format: N Output Print the answer. Examples Input 4 Output 15 Input 5 Output 31 Input 10 Output 1023 Input 1 Output 1","solution":"MOD = 1000000007 def count_bitwise_or_sets(N): # The number of distinct non-empty subsets of a set of size N is 2^N - 1. return (pow(2, N, MOD) - 1 + MOD) % MOD"},{"question":"A website allows users to upload songs which can then be played by others. Each song has a unique ID and a popularity score that starts at 0. Each time a song is played, its popularity score increases by 1. You are asked to develop a system to track the popularity of songs and answer queries about the sum of popularity scores over a certain range of songs. # Your Task Implement a system that can handle the following events and queries: 1. Play a song given its ID. 2. Query the total popularity score for a range of song IDs. ---Input--- - The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `q` (1 ≤ q ≤ 10^5) — the number of songs initially on the website and the number of events or queries. - The second line contains `n` unique integers `id_1, id_2, ..., id_n` (1 ≤ id_i ≤ 10^9), where `id_i` is the ID of the i-th song. - The next `q` lines describe `q` events or queries. - Each event is represented by a line starting with `P id` indicating that the song with ID `id` has been played. - Each query is represented by a line starting with `Q l r` asking for the total popularity score of songs with IDs between `l` and `r` (inclusive). It is guaranteed that for each query `l` and `r` are IDs of songs given in the input. ---Output--- For each query, print the total popularity score for the specified range of song IDs. ---Example--- Input 5 7 1 2 3 4 5 P 1 P 2 P 3 P 3 Q 1 3 P 5 Q 2 5 Output 3 3 ---Explanation--- In the example, we first play the songs with IDs 1, 2, 3, and 3. These operations increase their popularity scores respectively. The query `Q 1 3` returns 3 since the total popularity score of songs with IDs 1, 2, and 3 is 1 + 1 + 2 = 4. Next, we play the song with ID 5, and the query `Q 2 5` returns 3, which is the total popularity score of songs with IDs 2, 3, 4, and 5, given they have scores 1, 2, 0, and 1 respectively.","solution":"class SongPopularity: def __init__(self, song_ids): self.song_dict = {song_id: 0 for song_id in song_ids} def play_song(self, song_id): if song_id in self.song_dict: self.song_dict[song_id] += 1 def query_popularity(self, l, r): total_popularity = 0 for song_id in self.song_dict: if l <= song_id <= r: total_popularity += self.song_dict[song_id] return total_popularity def process_queries(n, q, song_ids, events): system = SongPopularity(song_ids) results = [] for event in events: parts = event.split() if parts[0] == \'P\': system.play_song(int(parts[1])) elif parts[0] == \'Q\': l = int(parts[1]) r = int(parts[2]) results.append(system.query_popularity(l, r)) return results # Example Usage n = 5 q = 7 song_ids = [1, 2, 3, 4, 5] events = [ \\"P 1\\", \\"P 2\\", \\"P 3\\", \\"P 3\\", \\"Q 1 3\\", \\"P 5\\", \\"Q 2 5\\" ] print(process_queries(n, q, song_ids, events)) # Output: [4, 4]"},{"question":"Given a tree with n nodes rooted at node 1, you are required to perform q queries on it. Each query gives you two integers u and v, representing two nodes in the tree. For each query, you need to determine the number of nodes that lie on the path from u to v (both inclusive). ----Input---- The first line contains an integer n (2 leq n leq 10^5)—the number of nodes in the tree. Each of the next n - 1 lines contains two integers u and v (1 leq u, v leq n)—denoting an edge in the tree. The next line contains a single integer q (1 leq q leq 10^5)—the number of queries. Each of the next q lines contains two integers u and v—the nodes for the current query. ----Output---- For each query, print a single integer—the number of nodes on the path from u to v (both inclusive). -----Examples----- Input 5 1 2 1 3 3 4 3 5 3 2 4 1 5 1 2 Output 4 3 2 Input 6 1 2 1 3 2 4 2 5 3 6 4 5 6 1 4 3 4 6 1 Output 5 3 4 3 -----Note----- In the first example, the paths for the queries are: 1. Nodes 2 -> 1 -> 3 -> 4, which include 4 nodes. 2. Nodes 1 -> 3 -> 5, which include 3 nodes. 3. Nodes 1 -> 2, which include 2 nodes. In the second example, the paths for the queries are: 1. Nodes 5 -> 2 -> 1 -> 3 -> 6, which include 5 nodes. 2. Nodes 1 -> 2 -> 4, which include 3 nodes. 3. Nodes 4 -> 2 -> 1 -> 3, which include 4 nodes. 4. Nodes 6 -> 3 -> 1, which include 3 nodes.","solution":"from collections import defaultdict, deque def calculate_distances(n, edges): Calculates the distance (number of nodes in path) between all pairs of nodes in a tree. graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start): dist = [-1] * (n + 1) dist[start] = 0 queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if dist[neighbor] == -1: dist[neighbor] = dist[node] + 1 queue.append(neighbor) return dist distances = {} for node in range(1, n + 1): distances[node] = bfs(node) return distances def count_nodes_on_path(n, edges, queries): For each query (u, v) returns the number of nodes on the path from u to v. distances = calculate_distances(n, edges) results = [] for u, v in queries: results.append(distances[u][v] + 1) return results def main(): import sys input = sys.stdin.read data = input().split() idx = 0 n = int(data[idx]) idx += 1 edges = [] for _ in range(n-1): u = int(data[idx]) v = int(data[idx+1]) edges.append((u, v)) idx += 2 q = int(data[idx]) idx += 1 queries = [] for _ in range(q): u = int(data[idx]) v = int(data[idx+1]) queries.append((u, v)) idx += 2 results = count_nodes_on_path(n, edges, queries) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given a string S consisting of lowercase alphabets. A substring of S is called an anagramic pair if the substring contains at least one pair of characters that are anagrams of each other. Your task is to find the number of unique anagramic pairs present in the string. ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains a string S. ------ Output Format ------ For each test case, print a single integer denoting the number of unique anagramic pairs in the given string S. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100 ------ Sample Input 1 ------ 2 abba abcd ------ Sample Output 1 ------ 4 0 ----- explanation 1 ------ Test case 1: - The anagramic pairs are: (\\"a\\", \\"a\\"), (\\"a\\", \\"a\\"), (\\"b\\", \\"b\\"), (\\"ab\\", \\"ba\\") Test case 2: - There are no anagramic pairs in the string \\"abcd\\". Here |S| denotes the length of the string S.","solution":"def count_anagramic_pairs(s): This function counts the number of unique anagramic pairs in the string s. from collections import defaultdict n = len(s) # Create a map to store all substrings hashed by their character count. substr_count_map = defaultdict(int) count = 0 # Generate all substrings for i in range(n): char_count = [0] * 26 for j in range(i, n): char_count[ord(s[j]) - ord(\'a\')] += 1 # Convert the list of counts to a tuple to use it as a hashable key key = tuple(char_count) substr_count_map[key] += 1 # Count pairs for key in substr_count_map: freq = substr_count_map[key] if freq > 1: count += (freq * (freq - 1)) // 2 return count def solve_anagramic_pairs_problem(T, test_cases): results = [] for s in test_cases: results.append(count_anagramic_pairs(s)) return results"},{"question":"Given two integers `n` and `k`, and an array of `n` integers, determine the maximum sum of a subarray of length `k`. A subarray is defined as a contiguous portion of the array. If no such subarray exists, return 0. Function Description Complete the `maxSubarraySum` function in the editor below. It should return an integer representing the maximum sum of a subarray of length `k`, or 0 if no subarray of length `k` exists. `maxSubarraySum` has the following parameters: - int n: the number of elements in the array - int k: the length of the subarray - int arr[n]: an array of integers Input Format The first line contains two space-separated integers `n` and `k`, the number of elements in the array and the length of the subarray respectively. This is followed by `n` space-separated integers representing the elements of the array. Returns int: the maximum sum of a subarray of length `k` Constraints - 1 leq n leq 10^5 - 1 leq k leq n - -10^4 leq arr[i] leq 10^4 for all `0 leq i < n` Sample Input 6 3 2 1 5 1 3 2 Sample Output 9 Explanation In the sample input, The subarray with maximum sum of length 3 is `[5, 1, 3]` which has a sum of `9`.","solution":"def maxSubarraySum(n, k, arr): Returns the maximum sum of a subarray of length k. Returns 0 if no such subarray exists. # If subarray length k is greater than array length n, return 0 if k > n: return 0 # Find the sum of the first subarray of length k current_sum = sum(arr[:k]) max_sum = current_sum # Iterate over the array from the k-th element to the end for i in range(k, n): current_sum += arr[i] - arr[i - k] # Sliding window technique if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You have been tasked with writing a function that simulates a basic file system directory structure and its commands. The file system initially starts with a root directory represented by `/`. Each directory name is a string of lowercase English letters, and directories are separated by `/`. The following commands can be performed on the file system: - `mkdir path`: Create a new directory at the given path. No directory in the path specified exists before this command. - `cd path`: Change the current directory to the desired path. The given path can be either absolute starting from `/` or relative to the current directory represented by `./` or `../`. - `pwd`: Print the absolute path of the current directory. Note: - Paths use `/` as the separator, and there are no trailing slashes. - You can only create directories with `mkdir` command if the parent directory exists. Input: The first line contains an integer `T`, representing the number of test cases. Each test case starts with an integer `N`, representing the number of commands in the test case. Next, `N` lines follow, each containing one of the three commands. Output: For each test case, after executing all the commands, print the output of each `pwd` command on a new line. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 50 - Each directory name has a length ≤ 20 - Absolute or relative paths have a length ≤ 1000 Sample Input: 2 5 mkdir /home mkdir /home/user cd /home pwd cd user pwd 6 mkdir /a mkdir /a/b cd /a/b pwd cd ../.. pwd Sample Output: / / / /a /a/b / Explanation: In the first test case: - `mkdir /home`: Creates directory `/home` - `mkdir /home/user`: Creates directory `/home/user` - `cd /home`: Change directory to `/home` - `pwd`: Prints `/home` - `cd user`: Change directory to `/home/user` (relative to the current directory) - `pwd`: Prints `/home/user` In the second test case: - `mkdir /a`: Creates directory `/a` - `mkdir /a/b`: Creates directory `/a/b` - `cd /a/b`: Change current directory to `/a/b` - `pwd`: Prints `/a/b` - `cd ../..`: Move back to the root directory - `pwd`: Prints `/`","solution":"class FileSystem: def __init__(self): self.root = {} self.current_path = [] def mkdir(self, path): dirs = path.strip(\'/\').split(\'/\') current = self.root for d in dirs: if d not in current: current[d] = {} current = current[d] def cd(self, path): if path.startswith(\'/\'): self.current_path = path.strip(\'/\').split(\'/\') else: parts = path.split(\'/\') for part in parts: if part == \'..\': if self.current_path: self.current_path.pop() elif part == \'.\' or part == \'\': continue else: self.current_path.append(part) def pwd(self): return \'/\' + \'/\'.join(self.current_path) def process_commands(commands): fs = FileSystem() result = [] for command in commands: if command.startswith(\'mkdir\'): path = command.split(\' \', 1)[1] fs.mkdir(path) elif command.startswith(\'cd\'): path = command.split(\' \', 1)[1] fs.cd(path) elif command == \'pwd\': result.append(fs.pwd()) return result"},{"question":"Lucy is planning a hiking trip and she wants to keep track of the various types of wildlife she encounters. Each time she sees an animal, she logs its type in her wildlife journal. She wants to know how many distinct types of animals she has seen during her hike. Given the sequence of animal types Lucy encountered, write a program that determines the number of unique animal types she logged. Input The input is given in the following format. n animal_{1} animal_{2} ... animal_{n} The first line of input contains an integer n (1 leq n leq 10^5), representing the total number of animals she encountered. The next line contains n space-separated strings, where each string represents the type of an animal she saw. Output Output the number of distinct animal types Lucy logged. Examples Input 7 deer rabbit deer fox rabbit fox fox Output 3 Input 4 sparrow sparrow eagle hawk Output 3","solution":"def count_distinct_animals(n, animals): Returns the count of distinct animal types from the list of encountered animals. Parameters: n (int): The number of animals encountered. animals (list of str): The list of animals encountered. Returns: int: The number of distinct animal types. return len(set(animals))"},{"question":"Your task is to implement a function that takes a string and returns an encrypted version of that string using a basic Caesar Cipher algorithm. Here’s how the Caesar Cipher works: - Each letter in the plaintext is shifted a certain number of places down the alphabet. - For example, with a shift of 1, \'A\' would be replaced by \'B\', \'B\' would become \'C\', and so on. - The function should maintain the case of the original letters (lowercase remains lowercase, and uppercase remains uppercase). - Non-alphabetic characters should remain unchanged. Your function should take two parameters: 1. A string `s` which represents the plaintext message. 2. An integer `shift` which represents the number of positions each letter in the plaintext should be shifted. Implement the function such that it returns the encrypted string. Ensure that your function correctly handles wraparounds (e.g., shifting \'z\' by 1 should give \'a\', and shifting \'Z\' by 1 should give \'A\'). # Example ```python caesar_cipher(\\"Hello, World!\\", 3) ``` Output: ```python \\"Khoor, Zruog!\\" ```","solution":"def caesar_cipher(s, shift): Encrypts the input string `s` using a Caesar Cipher with a given `shift`. Parameters: s (str): The input plaintext string. shift (int): The number of positions to shift each alphabetical character in `s`. Returns: str: The encrypted string. encrypted = [] for char in s: if char.isalpha(): if char.islower(): start = ord(\'a\') encrypted.append(chr((ord(char) - start + shift) % 26 + start)) elif char.isupper(): start = ord(\'A\') encrypted.append(chr((ord(char) - start + shift) % 26 + start)) else: encrypted.append(char) return \'\'.join(encrypted)"},{"question":"You are given a string consisting only of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Your task is to determine if the given string is a valid sequence of parentheses. A sequence of parentheses is considered valid if: 1. Every opening bracket has a corresponding closing bracket of the same type. 2. The pairs of parentheses are properly nested. For example, the string \\"()\\" and \\"([])\\" are valid but \\"(]\\" and \\"([)]\\" are not. Input: A single string s (1 ≤ length of s ≤ 10^4) consisting solely of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Output: Output \\"Yes\\" if the string is a valid sequence of parentheses, otherwise output \\"No\\". SAMPLE INPUT 1 () SAMPLE OUTPUT 1 Yes SAMPLE INPUT 2 ([)] SAMPLE OUTPUT 2 No SAMPLE INPUT 3 {[()]} SAMPLE OUTPUT 3 Yes Note: Solve this problem using a stack data structure to keep track of the opening parentheses and ensure that they match with the corresponding closing ones.","solution":"def is_valid_parentheses(s): Determines if the given string s is a valid sequence of parentheses. Parameters: - s (str): The input string consisting of parentheses. Returns: - str: \\"Yes\\" if the string is valid, otherwise \\"No\\" stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket: if not stack or stack[-1] != matching_bracket[char]: return \\"No\\" stack.pop() else: return \\"No\\" return \\"Yes\\" if not stack else \\"No\\""},{"question":"A popular e-commerce platform wants to improve its online shopping experience by adding a personalized discount system. Each customer is associated with a unique customer ID which is a positive integer. The platform offers different discounts based on certain properties of the customer ID. To achieve this in an efficient manner, the system should determine whether the customer ID meets the criteria for a prime discount. A customer ID meets the criteria for a prime discount if and only if the sum of its digits is a prime number. Your task is to determine whether a given customer ID qualifies for the prime discount. -----Input----- The only line of input contains one positive integer n (1 ≤ n ≤ 10^9) — the customer ID. -----Output----- Output \\"YES\\" if the customer ID qualifies for the prime discount, otherwise output \\"NO\\". -----Examples----- Input 41 Output YES Input 123 Output NO -----Note----- For the first example, the sum of digits of 41 is 4 + 1 = 5, which is a prime number. For the second example, the sum of digits of 123 is 1 + 2 + 3 = 6, which is not a prime number.","solution":"def is_prime(num): Returns True if num is a prime number, otherwise False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def qualifies_for_prime_discount(customer_id): Determines if the customer ID qualifies for prime discount. A customer ID qualifies if the sum of its digits is a prime number. sum_of_digits = sum(int(digit) for digit in str(customer_id)) return \\"YES\\" if is_prime(sum_of_digits) else \\"NO\\""},{"question":"A sequence of integers is called *interesting* if it contains at least one integer that is equal to the mean of the entire sequence. You are given an integer array a of length n. Your task is to determine whether the given sequence is interesting or not. -----Input----- Each test consists of multiple test cases. The first line contains an integer t (1 leq t leq 10^4) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n (1 leq n leq 10^5) — the length of the sequence. The second line of each test case contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6), representing the sequence. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print \\"YES\\" if the sequence is interesting. Otherwise, print \\"NO\\". -----Examples----- Input 5 3 1 3 2 4 5 6 6 7 2 4 2 5 3 8 5 2 2 3 1 1 1 Output YES YES NO NO YES -----Note----- In the first test case, the mean of the sequence is 2, which is present in the sequence, making it interesting. In the second test case, the mean of the sequence is 6, which is also present, making it interesting. In the third test case, the mean of the sequence is 3, which is not present in the sequence. In the fourth test case, the mean of the sequence is 4, which is not present in the sequence. In the fifth test case, the mean of the sequence is 1, which is present, making it interesting.","solution":"def is_interesting_sequence(n, sequence): This function determines whether a given sequence is interesting or not. A sequence is interesting if it contains at least one integer that is equal to the mean of the entire sequence. mean_value = sum(sequence) / n return \\"YES\\" if mean_value in sequence else \\"NO\\" def solve(t, test_cases): results = [] for i in range(t): n, sequence = test_cases[i] results.append(is_interesting_sequence(n, sequence)) return results"},{"question":"Ella is given a string S consisting of lowercase English alphabets and she wants to create the lexicographically smallest subsequence that contains all the distinct characters of the string at least once. Help Ella find such a subsequence. Input - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string S. Output - For each test case, print the lexicographically smallest subsequence which contains all distinct characters in S at least once. Constraints - 1 leq T leq 100 - 1 leq |S| leq 10^5 - Sum of the lengths of all strings in all test cases does not exceed 10^6 Sample Input 1 2 abacb zzzyz Sample Output 1 abc yz Explanation 1 For the first test case: The string \\"abacb\\" contains characters \'a\', \'b\', \'c\'. The lexicographically smallest subsequence that contains all these characters at least once is \\"abc\\". For the second test case: The string \\"zzzyz\\" contains characters \'y\', \'z\'. The lexicographically smallest subsequence that contains all these characters at least once is \\"yz\\".","solution":"def smallest_subsequence(T, test_cases): For each input string, returns the lexicographically smallest subsequence that contains all distinct characters of the string at least once. results = [] for S in test_cases: unique_chars = set(S) sorted_chars = sorted(unique_chars) results.append(\\"\\".join(sorted_chars)) return results"},{"question":"Given a binary tree, define a \\"Skew Tree\\" as a tree in which every node has either zero children or only one child. Your task is to write a function `isSkewTree` to check if a given binary tree is a skew tree. Input: - The function takes the root node of the binary tree. Output: - Return `True` if the tree is a skew tree, otherwise return `False`. Constraints: - The number of nodes in the binary tree can be up to 10^4. - Each node value is a unique integer. Sample Input: ``` 1 2 3 ``` Sample Output: ``` True ``` Sample Input: ``` 1 / 2 3 ``` Sample Output: ``` False ``` Explanation: In the first sample, every node has at most one child (either left or right), making it a skew tree. In the second sample, the root node has two children, making it not a skew tree. Function Signature: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isSkewTree(root: TreeNode) -> bool: # Your code here ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isSkewTree(root: TreeNode) -> bool: Checks if the given binary tree is a skew tree. A skew tree is a tree in which every node has either zero children or only one child. def dfs(node: TreeNode) -> bool: if not node: return True if node.left and node.right: return False return dfs(node.left) and dfs(node.right) return dfs(root)"},{"question":"Write a function to find the largest prime factor of a given integer N. Example 1: Input: N = 15 Output: 5 Explanation: The prime factors of 15 are 3 and 5. The largest prime factor is 5. Example 2: Input: N = 17 Output: 17 Explanation: The number 17 is a prime number. Hence, the largest prime factor is 17 itself. Your Task: You don\'t need to read input or print anything. Your task is to complete the function largestPrimeFactor() which takes an integer N as an input and returns the largest prime factor of N. Expected Time Complexity: O(sqrt(N)) Expected Auxiliary Space: O(1) Constraints: 2 <= N <= 10^{12}","solution":"def largest_prime_factor(N): Returns the largest prime factor of the given integer N. def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True largest_factor = None factor = 2 # Divide out all 2s first while N % factor == 0: largest_factor = factor N //= factor # Now factor must be odd, we start checking from 3 factor = 3 while factor * factor <= N: while N % factor == 0: largest_factor = factor N //= factor factor += 2 if N > 2: # if there\'s any prime factor greater than sqrt(N), it must be N itself largest_factor = N return largest_factor"},{"question":"Given an array A[] consisting of N integers and two integers X and Y where 0 <= X <= Y < N, find the subarray A[X...Y] such that reversing this subarray maximizes the sum of all elements in the new array. Example 1: Input: N = 5, A[] = {1, 2, -3, 4, 5}, X = 1, Y = 3 Output: 11 Explanation: The subarray A[1:3] is {2, -3, 4}. Reversing this subarray results in array {1, 4, -3, 2, 5} which has sum = 9, whereas reversing any other subarray does not yield a bigger sum of the array. Example 2: Input: N = 4, A[] = {-1, -2, -3, -4}, X = 0, Y = 3 Output: -10 Explanation: The subarray A[0:3] is {-1, -2, -3, -4}. Reversing this subarray results in array {-4, -3, -2, -1} which has sum = -10. Reversing this array or any subarray does not change the sum, so the result stays the same. Your Task: This is a function problem. You don’t need to take any input, as it is already accomplished by the driver code. You just need to complete the function MaximizeSum() that takes integer N, array A, and integers X and Y as parameters and returns the maximum possible sum of the array after reversing the subarray. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 -10^3 ≤ A[i] ≤ 10^3 0 ≤ X ≤ Y < N","solution":"def MaximizeSum(N, A, X, Y): Given an array A[] consisting of N integers and two integers X and Y where 0 <= X <= Y < N, find the subarray A[X...Y] such that reversing this subarray maximizes the sum of all elements in the new array. # Base array sum original_sum = sum(A) # Sum of the subarray A[X...Y] subarray_sum = sum(A[X:Y+1]) # Reverse the subarray and compute the new sum after reversal reversed_subarray = A[X:Y+1][::-1] reversed_subarray_sum = sum(reversed_subarray) # Calculate the delta in sum by substituting the subarray with its reverse delta_sum = reversed_subarray_sum - subarray_sum # The maximum possible sum of the array after reversing the subarray max_sum = original_sum + delta_sum return max_sum"},{"question":"There are N boxes arranged in a line. Each box contains a certain number of chocolates. You are allowed to perform the following operation exactly once: * Choose two different indices `i` and `j` such that 1 ≤ i, j ≤ N. * Swap the chocolates in the i-th box with the chocolates in the j-th box. Determine the maximum possible average number of chocolates per box that can be achieved after performing at most one swap operation. Constraints * 2 ≤ N ≤ 10^5 * 1 ≤ chocolates_i ≤ 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: N chocolates_1 chocolates_2 ... chocolates_N Output Print the maximum possible average number of chocolates per box that can be achieved after swapping the chocolates in at most one pair of boxes. Examples Input 5 1 2 3 4 5 Output 3.4 Input 3 10 20 30 Output 20.0 Input 4 3 8 2 5 Output 4.5","solution":"def max_average_chocolates(N, chocolates): Determine the maximum possible average number of chocolates per box that can be achieved after swapping chocolates in at most one pair of boxes. total_chocolates = sum(chocolates) max_average = total_chocolates / N return max_average # Reading input from the standard input for testing purposes if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) chocolates = list(map(int, data[1:])) print(max_average_chocolates(N, chocolates))"},{"question":"Milia is arranging an exhibit in her art gallery. She has a number of paintings, and she wants to display them in a particular order. Each painting can be represented by its height, given as an integer. To create the most pleasing arrangement, Milia wants to sort the paintings in an order where no two adjacent paintings have the same height. If there are multiple valid orders, any one of them will suffice. If it is impossible to arrange the paintings in such an order, return an empty list. Given a list of integers representing the heights of the paintings, write a function to determine the arrangement. Example 1: Input: paintings = [1, 3, 2, 3, 2] Output: [1, 3, 2, 3, 2] Explanation: A valid order where no two adjacent elements are the same is [1, 3, 2, 3, 2]. Example 2: Input: paintings = [4, 4, 4, 4] Output: [] Explanation: It is impossible to arrange paintings such that no two adjacent paintings have the same height. Your Task: You don\'t need to read input or print anything. Complete the function arrange_paintings() that takes a list of integers paintings as input parameter and returns the list of integers representing the arrangement of paintings or an empty list if it\'s not possible. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ len(paintings) ≤ 1000 1 ≤ height of paintings ≤ 100","solution":"from collections import Counter import heapq def arrange_paintings(paintings): if not paintings: return [] # Count the frequency of each height counter = Counter(paintings) # If the highest frequency is more than half of the length of the list + 1, it won\'t be possible to arrange most_common = counter.most_common(1)[0][1] if most_common > (len(paintings) + 1) // 2: return [] # Create a max heap based on the frequency of the paintings max_heap = [(-freq, height) for height, freq in counter.items()] heapq.heapify(max_heap) result = [] prev_freq, prev_height = 0, 0 while max_heap: freq, height = heapq.heappop(max_heap) result.append(height) # If there\'s a previous height, add it back to the heap if it has remaining counts if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_height)) # Update prev_freq and prev_height for the next iteration prev_freq, prev_height = freq + 1, height return result"},{"question":"Write a function that determines if a string contains valid parentheses. The string will only contain the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. A string of parentheses is considered valid if: 1. Every opening parenthesis has a corresponding closing parenthesis of the same type. 2. Opening parentheses are closed in the correct order. For example, given the following strings: - \\"()\\" => true - \\"()[]{}\\" => true - \\"(]\\" => false - \\"([)]\\" => false - \\"{[]}\\" => true Your function should handle empty strings and return true for them (since they are trivially valid). Write a function with the following signature: ```python def isValidParentheses(s: str) -> bool: # Your code here ```","solution":"def isValidParentheses(s: str) -> bool: Determines if a string contains valid parentheses. Args: s (str): The input string containing only \'()\', \'{}\', \'[]\'. Returns: bool: True if the string is valid, False otherwise. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"There are N flowers planted in a row in a garden. Each flower needs a certain amount of sunlight represented by an integer. You need to water only a contiguous subarray of these flowers such that the sum of their sunlight needs does not exceed a given integer S. Determine the maximum length of this contiguous subarray. If no such subarray exists, print 0. -----Constraints----- - 1 leq N leq 100 - 1 leq S leq 1000 - 1 leq Sunlight[i] leq 100 (for each flower) -----Input----- Input is given from Standard Input in the following format: N S Sunlight_1 Sunlight_2 ... Sunlight_N -----Output----- Output the length of the longest contiguous subarray where the sum of sunlight needs doesn\'t exceed S. If no such subarray exists, print 0. -----Sample Input----- 5 10 2 3 1 5 1 -----Sample Output----- 4 The longest contiguous subarray with a sum of sunlight needs not exceeding 10 is [2, 3, 1, 1], which has a length of 4. Therefore, the output is 4.","solution":"def max_length_subarray(N, S, sunlight): Returns the maximum length of a contiguous subarray such that the sum of the sunlight requirements does not exceed S. max_len = 0 current_sum = 0 start = 0 for end in range(N): current_sum += sunlight[end] while current_sum > S: current_sum -= sunlight[start] start += 1 max_len = max(max_len, end - start + 1) return max_len # Example usage: # N = 5 # S = 10 # sunlight = [2, 3, 1, 5, 1] # print(max_length_subarray(N, S, sunlight)) # Output should be 4"},{"question":"Write a function that takes a list of strings as input and returns the longest common prefix among the strings. If there is no common prefix, return an empty string. **Example:** Given an input list of: ``` [\\"flower\\", \\"flow\\", \\"flight\\"] ``` The output expected would be: ``` \\"fl\\" ``` Given another input list of: ``` [\\"dog\\", \\"racecar\\", \\"car\\"] ``` The output expected would be: ``` \\"\\" ``` The code would be called like so: ```python result = longest_common_prefix([\\"flower\\", \\"flow\\", \\"flight\\"]) # result should == \\"fl\\" result = longest_common_prefix([\\"dog\\", \\"racecar\\", \\"car\\"]) # result should == \\"\\" ```","solution":"def longest_common_prefix(strs): Returns the longest common prefix among the strings in the input list. If there is no common prefix, returns an empty string. if not strs: return \\"\\" # The longest common prefix cannot be longer than the shortest string in the array. shortest_str = min(strs, key=len) for i, char in enumerate(shortest_str): for other in strs: if other[i] != char: return shortest_str[:i] return shortest_str"},{"question":"Problem description You have been given two objects: rods and spheres. These objects can be in one of several configurations (represented as strings), and the challenge is to determine the maximum possible number of rods you can get after combining all the rods and spheres in each configuration. A rod is represented by the letter \\"R\\" and can be of any length, including being split into smaller rods. A sphere is represented by the letter \\"S\\" and can be placed between rods but does not affect rod length. For example, configuration = \\"RRSRSR\\" In this configuration, there are 4 rods and 2 spheres. The rods can be placed next to each other to form a longer rod. The final configuration will consist of 3 separate rods (one formed from \\"RR\\", another from \\"R\\", and another from \\"R\\") and 2 single spheres (\\"S\\", \\"S\\"). Input The first line of the input contains a positive integer T (1 <= T <= 100), the number of configurations. Each configuration follows on a new line and is a string of no more than 100 characters, consisting of rod letters \\"R\\" and sphere letters \\"S\\". Output For each configuration, output a single integer, the maximum possible number of rods after combining them. Example Input: 3 RRSRSR SSRRSS RRRR Output: 3 2 1","solution":"def max_rods_after_combination(configurations): result = [] for config in configurations: result.append(config.count(\'R\')) return result"},{"question":"Aragorn is organizing a relay marathon that will start in Bree and end in Rivendell. The route consists of n different waypoints connected by roads. The waypoints are represented as nodes of a graph, and the roads as edges with given distances between connected waypoints. In this marathon, each pair of consecutive waypoints must be directly connected by a road. Aragorn needs to select a subset of k waypoints from the n available such that the total length of the relay route (sum of distances of the k-1 roads) is maximized. Given the waypoints and the roads between them, help Aragorn to choose k consecutive waypoints that will maximize the total distance of the route. Note that the waypoints must be selected in their original order and each pair of consecutive waypoints in the subset must be directly connected. # Input - The first line contains two integers n and k (2 ≤ k ≤ n ≤ 10^5) representing the number of waypoints and the number of waypoints to be selected respectively. - The second line contains n-1 integers d_1, d_2, ..., d_{n-1} (1 ≤ d_i ≤ 10^6), where d_i is the distance between waypoint i and waypoint i+1. # Output - Print the starting index of the set of k consecutive waypoints that maximize the total relay route distance. # Examples Input 5 3 1 3 2 5 Output 3 Note In this example, the relay marathon can be conducted optimally from: - waypoints 3 to 5 with a total distance of 2+5 = 7. If Aragorn chooses to select the sequence starting at the 3rd waypoint, the length of the relay route is maximized.","solution":"def find_max_distance_start(n, k, distances): Find the starting index of the set of k consecutive waypoints that maximize the total relay route distance. :param n: int - number of waypoints :param k: int - number of waypoints to be selected :param distances: List[int] - distances between consecutive waypoints :return: int - starting index (1-based) of the optimal set of k waypoints # Calculate the prefix sums to use them for finding the maximum sum of k-1 distances prefix_sums = [0] * (n) for i in range(1, n): prefix_sums[i] = prefix_sums[i-1] + distances[i-1] max_sum = -1 start_index = 0 for i in range(n - k + 1): current_sum = prefix_sums[i + k - 1] - prefix_sums[i] if current_sum > max_sum: max_sum = current_sum start_index = i return start_index + 1 # Convert to 1-based index"},{"question":"Problem Given a list of integers and a number of queries, handle each query to return the number of integers within a specified range [li, ri] that are divisible by a given integer Mi. Constraints * 1 ≤ N ≤ 100000 (Number of integers in the list) * 0 ≤ Array elements ≤ 1000000 * 1 ≤ Q ≤ 100000 (Number of queries) * 0 ≤ li ≤ ri < N * 1 ≤ Mi ≤ 1000000 Input The input is given in the following format. N Q a0 a1 ... a(N-1) l0 r0 M0 l1 r1 M1 .. .. .. l(Q−1) r(Q−1) M(Q−1) The list length N and number of queries Q are given on the first line. The next line contains N integers separated by spaces, representing the list. The following Q lines each contain li, ri, Mi separated by spaces. Output The output consists of Q lines. Print the answer to each query on one line in turn, indicating the number of integers within the specified range [li, ri] that are divisible by Mi. Examples Input 10 3 1 2 3 4 5 6 7 8 9 10 0 4 2 1 8 3 3 9 2 Output 2 3 4 Input 5 2 10 15 20 25 30 0 4 5 1 3 10 Output 5 0","solution":"def count_divisibles(arr, queries): Returns the count of numbers within a specified range [li, ri] that are divisible by Mi for each query. :param arr: List of integers. :param queries: List of tuples, each containing (li, ri, Mi). :return: List of counts for each query. results = [] for li, ri, Mi in queries: count = sum(1 for x in arr[li:ri+1] if x % Mi == 0) results.append(count) return results"},{"question":"Given a tree (an acyclic connected undirected graph) with `n` nodes where each node is numbered from `1` to `n`, you are required to process `q` queries. Each query asks for the number of edges on the unique path between two given nodes. -----Input----- The first line contains an integer `n` (2 ≤ n ≤ 100), the number of nodes in the tree. Each of the next `n-1` lines contains two space-separated integers `u` and `v` (1 ≤ u, v ≤ n) denoting an edge between node `u` and node `v`. The next line contains an integer `q` (1 ≤ q ≤ 100), the number of queries. Each of the next `q` lines contains two space-separated integers `a` and `b` (1 ≤ a, b ≤ n), representing the nodes for which you need to find the number of edges on the unique path between them. -----Output----- For each query, print the answer in a separate line. -----Examples----- Input 5 1 2 1 3 2 4 2 5 3 1 4 4 3 5 3 Output 2 3 3 Input 7 1 2 1 3 2 4 2 5 5 6 5 7 3 1 6 3 7 4 5 Output 3 4 2 -----Note----- In the first example: - The unique path from node 1 to node 4 passes through nodes `1 - 2 - 4`, comprised of 2 edges. - The unique path from node 4 to node 3 passes through nodes `4 - 2 - 1 - 3`, comprised of 3 edges. - The unique path from node 5 to node 3 passes through nodes `5 - 2 - 1 - 3`, also comprised of 3 edges.","solution":"import sys from collections import defaultdict, deque # Function to process the edges and queries def process_tree_edges_and_queries(n, edges, queries): # Build the adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Function to find distance between two nodes using BFS def bfs_distance(start, end): queue = deque([(start, 0)]) visited = set() while queue: node, dist = queue.popleft() if node == end: return dist visited.add(node) for neighbor in tree[node]: if neighbor not in visited: queue.append((neighbor, dist + 1)) return -1 # Should never happen since the tree is connected and acyclic # Process each query and find the number of edges (distance) between the given nodes results = [] for a, b in queries: distance = bfs_distance(a, b) results.append(distance) return results"},{"question":"You are given a sequence of n integers. Your task is to rearrange the sequence to form another sequence such that the maximum absolute difference between any two adjacent elements is minimized. What is the minimum possible value of the maximum absolute difference between any two adjacent elements in the rearranged sequence? -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 10^5) — the number of elements in the sequence. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9). -----Output----- For each test case, print one integer — the minimum possible value of the maximum absolute difference between any two adjacent elements in the rearranged sequence. -----Examples----- Input 3 4 4 8 6 1 3 10 5 7 5 1 3 5 8 2 Output 2 2 3 -----Note----- In the first test case, one possible rearranged sequence can be [1, 4, 6, 8]. The maximum absolute difference is 2 which is the minimum possible. In the second test case, one possible rearranged sequence can be [5, 7, 10]. The maximum absolute difference is 2 which is the minimum possible. In the third test case, one possible rearranged sequence can be [1, 2, 3, 5, 8]. The maximum absolute difference is 3.","solution":"def min_max_difference(arr): arr.sort() min_diff = float(\'inf\') for i in range(1, len(arr)): min_diff = min(min_diff, arr[i] - arr[i - 1]) return min_diff def process_test_cases(t, test_cases): results = [] for n, a in test_cases: result = min_max_difference(a) results.append(result) return results"},{"question":"There are two friends, Alice and Bob, who enjoy playing a game with strings. Alice comes up with a string `s` and asks Bob to modify it in a specific way. The string contains only lowercase English letters. To modify the string, Bob needs to follow these steps: 1. Bob must choose a pair of indices `i` and `j` (1 ≤ i < j ≤ length(s)). 2. Bob can swap the characters at these indices. 3. Bob can perform the swap operation at most once. Bob wants to know the lexicographically smallest string he can obtain after choosing and swapping the characters exactly once. If no swap operation can make the string smaller, then the original string is the smallest. Write a function `smallest_string_after_swap(s: str) -> str` which takes a string `s` and returns the lexicographically smallest string Bob can obtain after performing at most one swap. -----Input----- - A single string `s` (1 ≤ length(s) ≤ 1000) containing only lowercase English letters. -----Output----- - A single string — the lexicographically smallest string that can be obtained by performing at most one swap. -----Examples----- Input `acdb` Output `abdc` Input `abcd` Output `abcd` Input `dcba` Output `acbd`","solution":"def smallest_string_after_swap(s: str) -> str: Returns the lexicographically smallest string after performing at most one swap of two characters. n = len(s) if n <= 1: return s # Convert the string into a list of characters for easier manipulation s_list = list(s) # Find the smallest character that is not at the beginning when compared to the sorted version sorted_s = sorted(s) for i in range(n): if s_list[i] != sorted_s[i]: # Find the right most smallest character to swap with smallest_char = sorted_s[i] for j in range(n-1, i, -1): if s_list[j] == smallest_char: s_list[i], s_list[j] = s_list[j], s_list[i] return \'\'.join(s_list) # If no swap is needed, return the original string return s"},{"question":"Given an undirected graph, determine if it contains a cycle. A graph is said to contain a cycle if there is a path starting from a vertex and ending at the same vertex by traversing edges in the graph. You are required to implement this functionality. Example 1: Input: n = 4, edges = [[0, 1], [1, 2], [2, 0], [2, 3]] Output: True Explanation: The graph contains a cycle (0 -> 1 -> 2 -> 0). Example 2: Input: n = 3, edges = [[0, 1], [1, 2]] Output: False Explanation: The graph does not contain any cycle. Your task is to complete the function `isCyclic()` which takes the number of vertices `n` and a list of edges `edges` as input and returns `True` if the graph contains a cycle, otherwise returns `False`. Expected Time Complexity: O(V + E) Expected Auxiliary Space: O(V) Constraints: 1 ≤ n ≤ 10^4 0 ≤ edges.length ≤ 2*10^4 0 ≤ edges[i][0], edges[i][1] < n","solution":"from collections import defaultdict def isCyclic(n, edges): Determines if the undirected graph contains a cycle using DFS. Parameters: n (int): Number of vertices. edges (List[List[int]]): List of undirected edges. Returns: bool: True if the graph contains a cycle, False otherwise. def dfs(v, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, v): return True elif parent != neighbor: return True return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * n for i in range(n): if not visited[i]: if dfs(i, -1): return True return False"},{"question":"You are given an integer array `nums` of even length. Split this array into two subarrays with equal length and return the difference between the sum of the first subarray and the sum of the second subarray. Write a function `split_and_subtract(nums)` that takes an integer array `nums` as input and returns an integer representing the difference between the sums of the first and second subarrays. **Example:** ``` split_and_subtract([10, 3, 5, 1]) Output: 7 ``` In this example, splitting `nums` into `[10, 3]` and `[5, 1]`, their sums are `13` and `6`, respectively, and the difference is `13 - 6 = 7`. **Constraints:** - `nums` will contain an even number of elements. - Each element in `nums` will be an integer.","solution":"def split_and_subtract(nums): Splits the array into two equal halves and returns the difference between the sum of the first half and the sum of the second half. mid = len(nums) // 2 first_half = nums[:mid] second_half = nums[mid:] sum_first_half = sum(first_half) sum_second_half = sum(second_half) return sum_first_half - sum_second_half"},{"question":"The city of Gridville has decided to improve its public transport system by introducing a set of bus routes. Each bus route connects two different bus stops directly. The city council wants to know the minimum number of bus routes needed to ensure that every bus stop is reachable from any other bus stop either directly or indirectly via other stops. You are given a list of bus stops and the routes that currently exist between some of them. Your task is to determine the minimum number of additional bus routes needed to connect all the bus stops. Input Format The first line of the input contains two space-separated integers n (number of bus stops) and m (number of existing routes). The next m lines each contain two space-separated integers u and v, indicating that there is a route between bus stop u and bus stop v. n m u1 v1 u2 v2 ... um vm Constraints 1 <= n <= 100 0 <= m <= n*(n-1)/2 1 <= ui, vi <= n Output Format Print the minimum number of additional bus routes needed to ensure that every bus stop is reachable from any other bus stop. Sample Input 5 3 1 2 3 4 4 5 Sample Output 1 Explanation The bus stops can be represented as a graph with 5 nodes (representing the bus stops) and 3 edges (representing the routes): 1 - 2 3 - 4 - 5 Currently, there are two disconnected components: {1, 2} and {3, 4, 5}. To connect all bus stops, we need at least one additional route. For example, connecting bus stop 2 to bus stop 3 will make all the bus stops reachable from one another. So the minimum number of additional bus routes needed is 1.","solution":"def additional_routes_needed(n, m, routes): Returns the minimum number of additional bus routes needed to ensure that every bus stop is reachable from any other bus stop. :param n: Number of bus stops. :param m: Number of existing routes. :param routes: List of tuples representing the existing routes. :return: Minimum number of additional routes needed. from collections import defaultdict, deque # Create adjacency list for the graph graph = defaultdict(list) for u, v in routes: graph[u].append(v) graph[v].append(u) # Function to perform BFS and find connected components def bfs(start, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Find all connected components visited = [False] * (n + 1) num_components = 0 for i in range(1, n + 1): if not visited[i]: bfs(i, visited) num_components += 1 # Number of additional routes needed is (num_components - 1) return num_components - 1"},{"question":"You are given a string of characters and a non-negative integer `n`. Your task is to implement the function `repeat_each_char(input_str, n)`, which returns a new string where each character in the input string is repeated `n` times. For example, if the input string is \\"abc\\" and `n` is 3, the output should be \\"aaabbbccc\\". If `n` is 0, the function should return an empty string. If the input string is empty or `n` is zero, it should also return an empty string. **Note:** The input string can contain any printable ASCII characters, including whitespace, digits, and punctuation. Examples Example 1: **Input:** ```python input_str = \\"hello\\" n = 2 ``` **Output:** ``` \\"hheelllloo\\" ``` Example 2: **Input:** ```python input_str = \\"123!\\" n = 4 ``` **Output:** ``` \\"111122223333!!!!\\" ``` Example 3: **Input:** ```python input_str = \\"\\" n = 3 ``` **Output:** ``` \\"\\" ``` Happy coding!","solution":"def repeat_each_char(input_str, n): Returns a new string where each character in the input string is repeated `n` times. :param input_str: The input string to be processed. :param n: The number of times each character should be repeated. :returns: The new string with each character repeated `n` times. if n == 0 or not input_str: return \\"\\" result = \'\'.join(char * n for char in input_str) return result"},{"question":"There exists a robot with an infinite grid of squares. The robot has some rules: 1. It can move one square in four possible directions: left (L), right (R), up (U), or down (D). 2. It has a memory that allows it to move in a sequence of commands. If the robot receives a sequence of commands, it will move in that prescribed order. You need to determine whether, after executing a sequence of commands, the robot returns to its initial position. Write a function `does_robot_return(commands: str) -> bool` that takes a string `commands` representing the movement commands, and returns `True` if the robot returns to its initial position and `False` otherwise. Input - A string `commands` (1 ≤ |commands| ≤ 2 * 10^4) consisting only of characters \'L\', \'R\', \'U\', and \'D\'. Output - Return `True` if the robot returns to its initial position, otherwise return `False`. Examples Input \\"LR\\" Output True Input \\"UDLR\\" Output True Input \\"LLRR\\" Output True Input \\"LDRU\\" Output True Input \\"UDDDRRR\\" Output False Note In the first example, the robot moves left and then right, returning to the initial position. In the second example, the robot moves up, down, left, and right, returning to the initial position. In the third example, the robot moves left twice and right twice, returning to the initial position. In the fourth example, the robot moves left, down, right, and up, returning to the initial position. In the fifth example, the robot makes three downward moves and three rightward moves, not returning to the initial position.","solution":"def does_robot_return(commands: str) -> bool: Determines if the robot returns to its initial position after executing the sequence of commands. Parameters: - commands (str): The movement commands consisting of \'L\', \'R\', \'U\', and \'D\'. Returns: - bool: True if the robot returns to its initial position, False otherwise. x, y = 0, 0 for command in commands: if command == \'L\': x -= 1 elif command == \'R\': x += 1 elif command == \'U\': y += 1 elif command == \'D\': y -= 1 return x == 0 and y == 0"},{"question":"Determine if a string has all unique characters. Example 1: Input: \\"abcd\\" Output: True Explanation: The string \\"abcd\\" has all unique characters. Example 2: Input: \\"hello\\" Output: False Explanation: The string \\"hello\\" has duplicate characters \'l\'. Example 3: Input: \\"\\" Output: True Explanation: An empty string has all unique characters by default. Your Task: You don\'t need to read input or print anything. Your task is to complete the function hasUniqueCharacters() which takes a string as its input and returns True if the string has all unique characters, otherwise returns False. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1<=length of string<=10^5","solution":"def hasUniqueCharacters(s): Determine if a string has all unique characters. Parameters: s (str): The input string. Returns: bool: True if the string has all unique characters, otherwise False. # We can use a set to track characters we\'ve seen before. char_set = set() for char in s: if char in char_set: return False char_set.add(char) return True"},{"question":"Given a list of `N` integers, you need to determine if it is possible to rearrange these integers to form a strictly increasing sequence by rotating the list at most once. A rotation consists of moving some number of elements from the beginning of the list to the end of the list while preserving their order. For example, the list `[3, 4, 5, 1, 2]` can be rotated once to form `[1, 2, 3, 4, 5]`, which is a strictly increasing sequence. Write a program to check if it is possible to rearrange the list in such a manner. If it\'s possible, return `YES`, otherwise return `NO`. # Constraints - 1 ≤ N ≤ 10^5 - The integers in the list are unique and within the range -10^9 to 10^9. # Input The first line contains an integer `N`. The second line contains `N` space-separated integers representing the list. # Output Output a single line containing `YES` or `NO`. # Example Input 1 ``` 5 3 4 5 1 2 ``` Output 1 ``` YES ``` Input 2 ``` 4 1 2 3 4 ``` Output 2 ``` YES ``` Input 3 ``` 4 4 3 2 1 ``` Output 3 ``` NO ``` # Notes - For input 1, the list can be rotated once to form `[1, 2, 3, 4, 5]`, which is strictly increasing. - For input 2, the list is already strictly increasing. - For input 3, it is impossible to rearrange by any rotation to form a strictly increasing sequence.","solution":"def can_rotate_to_increasing_sequence(n, arr): # Find the index where the strictly increasing sequence property is violated violation_index = -1 for i in range(1, n): if arr[i-1] > arr[i]: violation_index = i break # If there is no violation, the list is already strictly increasing if violation_index == -1: return \\"YES\\" # Check if the part of the list after the violation is strictly increasing for i in range(violation_index + 1, n): if arr[i-1] > arr[i]: return \\"NO\\" # Check if the list becomes strictly increasing when rotated # the violation part to the back if arr[-1] > arr[0]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a Binary Tree where each node contains an integer value. Your task is to convert the binary tree to a circular doubly linked list such that the left and right pointers of the nodes are used as previous and next pointers respectively, and the nodes are arranged in the in-order traversal sequence of the binary tree. Example: Input: 10 / 12 15 / / 25 30 36 Output: 25 <-> 12 <-> 30 <-> 10 <-> 36 <-> 15 <-> 25 [The head is 25 and the next node of 15 is 25 to form the circular structure] Explanation: The resultant circular doubly linked list will have the nodes arranged in the in-order sequence of the binary tree. The head of the list will be the leftmost node in the in-order traversal, and the last node will have its next pointer pointing back to the head to make it circular. Your Task: You do not need to read input or print anything. Complete the function bTreeToCList() that takes the root of the binary tree as input and returns the head of the circular doubly linked list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(H), where H is the height of the tree. Constraints: 1 <= Number of nodes <= 1000 1 <= Node values <= 10^3","solution":"class Node: def __init__(self, data): self.data = data self.left = self.right = None def bTreeToCList(root): Converts a binary tree to a circular doubly linked list. if not root: return None def tree_to_dll(node): if not node: return None left = tree_to_dll(node.left) right = tree_to_dll(node.right) node.left = node.right = node # Make node a circular linked list by itself # Merge left, node, and right parts return concatenate(concatenate(left, node), right) def concatenate(left, right): if not left: return right if not right: return left left_last = left.left right_last = right.left left_last.right = right right.left = left_last right_last.right = left left.left = right_last return left return tree_to_dll(root)"},{"question":"A GameMaster has designed a special contest where each player scores \'x\' points for every gem collected and loses \'y\' points for every trap encountered. Given the number of games played and the number of gems and traps in each game, calculate the total score for each game. Input Format The first line contains the number of test cases T, T test cases follow. Each test case consists of three lines: - The first line contains two integers x and y, the points gained per gem and points lost per trap, respectively. - The second line contains an integer n, the number of games played. - The third line contains two integers g and t, the total number of gems and traps encountered in the nth game. Output Format For each test case, print the total score for each game in a new line. Constraints 1 ≤ T ≤ 1000 1 ≤ x, y ≤ 100 1 ≤ n ≤ 1000 0 ≤ g, t ≤ 10^6 SAMPLE INPUT 2 10 5 1 3 2 20 2 2 10 5 5 3 SAMPLE OUTPUT 20 135 Explanation Case 1: Game 1: Points gained = 10 (per gem) * 3 (gems) = 30 Points lost = 5 (per trap) * 2 (traps) = 10 Total score = 30 - 10 = 20 Case 2: Game 1: Points gained = 20 (per gem) * 10 (gems) = 200 Points lost = 2 (per trap) * 5 (traps) = 10 Total score = 200 - 10 = 190 Game 2: Points gained = 20 (per gem) * 5 (gems) = 100 Points lost = 2 (per trap) * 3 (traps) = 6 Total score = 100 - 6 = 94 Total score for second test case provided by summing the scores from both games = 190 + 94 = 284 Therefore, 284/2 = 142 rounded to nearest integer, hence 135.","solution":"def calculate_total_scores(test_cases): Calculate total score for each game based on provided test cases. Args: test_cases (list of dict): Each dict contains keys \'x\', \'y\', \'n\', and a list of tuples \'games\' for each test case. Returns: list: List of total scores for each test case. results = [] for case in test_cases: x = case[\'x\'] y = case[\'y\'] n = case[\'n\'] total_score = 0 for game in case[\'games\']: g, t = game total_score += (x * g) - (y * t) results.append(total_score) return results # Example usage: # test_cases = [ # { # \'x\': 10, \'y\': 5, \'n\': 1, \'games\': [(3, 2)] # }, # { # \'x\': 20, \'y\': 2, \'n\': 2, \'games\': [(10, 5), (5, 3)] # } # ] # print(calculate_total_scores(test_cases)) # Output: [20, 284]"},{"question":"In a certain kingdom, there are N cities connected by M bidirectional roads. Each road has a travel cost associated with it. The king wants to determine the minimal cost to connect all the cities directly or indirectly such that every city is reachable from any other city. Given the number of cities N and a list of roads, where each road is represented by three integers u, v, and w (indicating there is a road between city u and city v with a cost of w), write a program to find the minimal cost to connect all the cities. If it is not possible to connect all the cities, return -1. Note: - Cities are numbered from 0 to N-1. - The input graph could be sparse, meaning it might not be possible to connect all cities. Input: 1. An integer T, the number of test cases. 2. For each test case: - An integer N, the number of cities. - An integer M, the number of roads. - M lines each containing three integers u, v, and w. Output: For each test case, print the minimal cost to connect all the cities, or -1 if it is impossible. Example: Input 2 4 5 0 1 1 0 2 4 1 2 2 1 3 3 2 3 5 3 1 0 1 10 Output 6 -1 Explanation: Test case 1: One of the possible ways to connect all the cities with minimal cost is: - 0 - 1 with cost 1 - 1 - 2 with cost 2 - 1 - 3 with cost 3 Total cost = 1 + 2 + 3 = 6 Test case 2: There is only one road and with only two cities connected, making it impossible to connect all 3 cities, hence the output is -1.","solution":"def find_min_cost_to_connect_cities(N, roads): Returns the minimal cost to connect all cities using Kruskal\'s algorithm, or -1 if impossible. # Helper function to find the root of a node def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) # Helper function to perform union of two subsets def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 # Sort edges based on their weight roads.sort(key=lambda x: x[2]) parent = [] rank = [] # Initialize parent and rank arrays for node in range(N): parent.append(node) rank.append(0) mst_weight = 0 edges_included = 0 # Iterate over sorted edges and apply Kruskal\'s MST algorithm for u, v, w in roads: u_root = find(parent, u) v_root = find(parent, v) if u_root != v_root: union(parent, rank, u_root, v_root) mst_weight += w edges_included += 1 # If we have included N-1 edges, the MST is complete if edges_included == N - 1: break # If the number of edges included in the MST is not N-1, a minimum spanning tree is not possible if edges_included != N - 1: return -1 return mst_weight def minimal_cost_to_connect_all_cities(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0], test_cases[i][1] roads = test_cases[i][2] result = find_min_cost_to_connect_cities(N, roads) results.append(result) return results"},{"question":"# Task Alice is passionate about hiking. She likes to track her steps and calculate her daily walking distance. She has a multi-tiered terrain that she wants to hike every day. The terrain is represented as an array of integers where each value indicates the height at that point in the terrain. Whenever Alice moves from one point to another, she can either move to the immediate next point to the east (rightwards) or the immediate next point to the west (leftwards). Alice can start her hike from any point on the terrain. The amount of energy Alice burns moving between two consecutive points is given by the absolute difference in height between those points. Given the following arguments: ``` terrain: An array of integers. The height at each point in the terrain. ``` Please help Alice calculate the minimum and maximum amount of energy she can burn if she hikes from any starting point to another end point of the terrain. # Example For `terrain = [10, 20, 15, 25, 10]`, the output should be `[5, 40]`. The minimum energy burned is moving from peak to lower point directly (e.g., from 15 to 10), and the maximum energy burned is moving along the entire terrain (e.g., from 10 to 25). For `terrain = [1, 5, 3, 1, 4]`, the output should be `[0, 7]`. The minimum energy burned is moving along the flat portions or very slight increases (e.g., from 3 to 1), and the maximum is moving through the major changes in the terrain (e.g., from 1 to 5).","solution":"def calculate_energy(terrain): Calculate the minimum and maximum energy burned hiking through the terrain. Args: terrain (list of int): List of integer heights representing the terrain. Returns: list of int: A list containing the minimum and maximum energy burned. if not terrain: return [0, 0] n = len(terrain) min_energy = float(\'inf\') max_energy = 0 for i in range(n - 1): energy = abs(terrain[i] - terrain[i + 1]) if energy < min_energy: min_energy = energy if energy > max_energy: max_energy = energy if min_energy == float(\'inf\'): min_energy = 0 return [min_energy, max_energy]"},{"question":"Location-Based Activity Planner Ms. A is organizing a charity event that involves various activities spread across multiple locations in her city. Each location offers one or more activities, each requiring a specific amount of time to complete. Ms. A needs to plan her day such that she visits a subset of these locations and completes a set of activities within a given total time limit, ensuring she gets the maximum enjoyment (value) from the activities completed. However, moving between locations also takes time, which must be considered in her total time allowance. Each location is connected to one or more other locations, with a fixed travel time required to move from one location to another. Ms. A starts her day at her home location. Write a program to help Ms. A determine the maximum enjoyment she can achieve under the constraints of her available time. Input The input consists of one dataset representing locations and activities. > L > h > t_1 t_2 t_3 ... t_L > v_1 v_2 v_3 ... v_L > J > l_1 l_2 t_j The first line contains two integers: L (2 le L le 100), the number of locations (numbered 1 to L), and h (1 le h le 24), the total amount of time available (in hours). The second line contains L integers representing the time required to complete the activities at each location. The third line contains L integers representing the enjoyment value of the activities at each location. The fourth line contains one integer J (1 le J le 500), the number of routes between locations. The next J lines each contain three integers: l_1, l_2, and t_j (1 le l_1, l_2 le L; 1 le t_j le h), indicating that traveling from location l_1 to location l_2 takes t_j hours. The travel times are bidirectional. After that, there is a line with an integer S (1 le S le L) representing Ms. A\'s starting location (her home). Output Output a single integer representing the maximum enjoyment Ms. A can achieve within the given time limit. Sample Input ``` 5 8 2 3 2 1 4 3 4 2 6 5 6 1 2 1 2 3 1 3 4 2 4 5 1 1 3 2 1 4 3 1 ``` Sample Output ``` 10 ``` In this example, Ms. A starts at location 1 with a total available time of 8 hours. The maximum enjoyment she can achieve is by visiting locations 1, 2, and 5, completing the activities at those locations.","solution":"import heapq def maximum_enjoyment(L, h, activity_times, enjoyment_values, J, routes, S): Returns the maximum enjoyment within the given time limit. L: int, number of locations h: int, total available time in hours activity_times: list of int, time required to complete activities at each location enjoyment_values: list of int, enjoyment value of activities at each location J: int, number of routes between locations routes: list of tuples (l1, l2, tj), each representing a route from l1 to l2 with travel time tj S: int, starting location. import networkx as nx # Create a graph graph = nx.Graph() for l1, l2, t in routes: graph.add_edge(l1, l2, weight=t) # Dijkstra based function to calculate shortest path times def shortest_paths_from(start): return nx.single_source_dijkstra_path_length(graph, start, weight=\'weight\') # Get the shortest travel times from the starting location to all other locations shortest_travel_times = shortest_paths_from(S) # Initialize DP table dp = [[0] * (h + 1) for _ in range(L + 1)] # Apply 0/1 Knapsack DP algorithm for loc in range(1, L + 1): travel_time = shortest_travel_times.get(loc, float(\'inf\')) for time in range(h + 1): if travel_time <= time: activity_time = activity_times[loc - 1] enjoyment = enjoyment_values[loc - 1] if time >= travel_time + activity_time: dp[loc][time] = max(dp[loc - 1][time], dp[loc - 1][time - activity_time - travel_time] + enjoyment) else: dp[loc][time] = dp[loc - 1][time] else: dp[loc][time] = dp[loc - 1][time] return max(dp[L]) # Example usage: # L = 5 # h = 8 # activity_times = [2, 3, 2, 1, 4] # enjoyment_values = [3, 4, 2, 6, 5] # J = 6 # routes = [(1, 2, 1), (2, 3, 1), (3, 4, 2), (4, 5, 1), (1, 3, 2), (1, 4, 3)] # S = 1 # print(maximum_enjoyment(L, h, activity_times, enjoyment_values, J, routes, S)) # Output: 10"},{"question":"You are given a string that contains a sequence of words separated by spaces. Your task is to find the longest word in that string which has the highest number of vowels (a, e, i, o, u). If multiple words have the same number of vowels, return the one that appears first in the string. If there are no vowels in the string, return an empty string. # Input - A single line containing a string `s` of length n (1 ≤ n ≤ 1000). # Output - A single word which has the highest number of vowels and is the longest among them. If multiple words have the same number of vowels, return the one that appears first in the string. # Examples Example 1: Input ``` this is an example of an interesting problem ``` Output ``` interesting ``` Explanation: - The word \\"interesting\\" has 4 vowels and it is the longest among the words with 4 vowels. Example 2: Input ``` i love programming ``` Output ``` programming ``` Explanation: - The word \\"programming\\" has 3 vowels which is higher than any other word. Example 3: Input ``` xyz bcd fgh lmn ``` Output ``` ``` Explanation: - None of the words contains any vowels, hence the output is an empty string. # Note - A word is defined as a sequence of non-space characters. - Consider vowels to be only \'a\', \'e\', \'i\', \'o\', \'u\' (both lowercase and uppercase should be treated the same).","solution":"def find_longest_word_with_most_vowels(s): Returns the longest word with most vowels in the given string. If multiple words have the same number of vowels, returns the one that appears first. If no words contain a vowel, returns an empty string. words = s.split() vowels = set(\'aeiouAEIOU\') def count_vowels(word): return sum(1 for char in word if char in vowels) max_vowels = -1 longest_word = \\"\\" for word in words: num_vowels = count_vowels(word) if num_vowels > max_vowels or (num_vowels == max_vowels and len(word) > len(longest_word)): max_vowels = num_vowels longest_word = word return longest_word if max_vowels > 0 else \\"\\""},{"question":"A computer system is designed to categorize integers based on specific criteria. Your task is to write a function that categorizes an integer into one of three categories: - \\"Foo\\" if the number is divisible by 3. - \\"Bar\\" if the number is divisible by 5. - \\"FooBar\\" if the number is divisible by both 3 and 5. - The number itself if it is not divisible by either 3 or 5. Your function should take an integer as input and return the appropriate category as a string. Example 1: Input: 6 Output: \\"Foo\\" Example 2: Input: 10 Output: \\"Bar\\" Example 3: Input: 15 Output: \\"FooBar\\" Example 4: Input: 8 Output: \\"8\\" Your Task: You do not need to read input or print anything. Your task is to complete the function categorizeNumber() which takes an integer as input parameter and returns the appropriate category as a string. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: -10^6 ≤ N ≤ 10^6","solution":"def categorize_number(n): Categorizes an integer based on specific criteria: - \\"Foo\\" if the number is divisible by 3. - \\"Bar\\" if the number is divisible by 5. - \\"FooBar\\" if the number is divisible by both 3 and 5. - The number itself if it is not divisible by either 3 or 5. Args: n (int): The input integer. Returns: str: The appropriate category as a string. if n % 3 == 0 and n % 5 == 0: return \\"FooBar\\" elif n % 3 == 0: return \\"Foo\\" elif n % 5 == 0: return \\"Bar\\" else: return str(n)"},{"question":"Write a function to find the length of the longest substring that contains exactly K distinct characters. If there is no such substring, return 0. Input - The first line contains a string S. - The second line contains an integer K. Constraints - 1 ≤ |S| ≤ 10^5 - 1 ≤ K ≤ 26 SAMPLE INPUT \\"aarabd\\", 2 SAMPLE OUTPUT 4 Explanation The longest substring that contains exactly 2 distinct characters is \\"aara\\" which has length 4.","solution":"def longest_substring_with_k_distinct(S, K): Returns the length of the longest substring that contains exactly K distinct characters. Parameters: S (str): The input string. K (int): The desired number of distinct characters in the substring. Returns: int: The length of the longest substring with exactly K distinct characters. if K == 0: return 0 n = len(S) left = 0 right = 0 char_map = {} max_length = 0 while right < n: char_right = S[right] if char_right in char_map: char_map[char_right] += 1 else: char_map[char_right] = 1 while len(char_map) > K: char_left = S[left] char_map[char_left] -= 1 if char_map[char_left] == 0: del char_map[char_left] left += 1 if len(char_map) == K: max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"This is a combinatorial optimization problem. You are given a list of items, each with a weight and a value. Your task is to find the subset of items that maximizes the value without exceeding a given weight limit. Additionally, there is a twist: You can choose multiple instances of the same item if you want, but the combined weight of the instances chosen cannot exceed the weight limit. Implement the function `maxValue` that takes as input three parameters: 1. `items`: A list of tuples, where each tuple represents an item and contains two integers `(weight, value)`. The weight and the value of an item are guaranteed to be positive integers. 2. `n`: An integer representing the number of distinct items. 3. `maxWeight`: The maximum weight limit represented as an integer. Function Signature: ```python def maxValue(items: [(int, int)], n: int, maxWeight: int) -> int: ``` Your function should return an integer representing the maximum value achievable given the constraints. # Example Input: ```python maxValue([(2, 4), (3, 5), (6, 8)], 3, 10) ``` Output: ```python 16 ``` Explanation: 1. Choosing two instances of item `(2, 4)`, the combined weight is `2 + 2 = 4` and the combined value is `4 + 4 = 8`. 2. Choosing one instance of item `(3, 5)`, the combined weight is `3` and the value is `5`. 3. Choosing one instance of item `(2, 4)` and one instance of item `(6, 8)`, the combined weight is `2 + 6 = 8` and the combined value is `4 + 8 = 12`. 4. Choosing five instances of item `(2, 4)`, the combined weight is `2 + 2 + 2 + 2 + 2 = 10` and the combined value is `4 + 4 + 4 + 4 + 4 = 20`. Out of these combinations, the maximum value that does not exceed the maxWeight `10` is `16` by choosing four instances of item `(2, 4)`. # Additional Notes - You can assume that the maximum weight limit `maxWeight` will be at most `10^4`. - You can assume that the length of the items list `n` will be at most `100`. - The solution should be efficient enough to handle the maximum constraints.","solution":"def maxValue(items, n, maxWeight): Given a list of (weight, value) items, and the maximum weight limit, find the maximum value of items where the total weight is within the limit and you can choose multiple instances of the same item. # Create dp array to store the maximum value for every possible weight up to maxWeight dp = [0] * (maxWeight + 1) # Traverse each item and update the dp array for weight, value in items: for current_weight in range(weight, maxWeight + 1): dp[current_weight] = max(dp[current_weight], dp[current_weight - weight] + value) return dp[maxWeight] # Test example case print(maxValue([(2, 4), (3, 5), (6, 8)], 3, 10)) # Output: 20"},{"question":"Given a string, determine if it can be rearranged to form a palindrome. If it can be rearranged to a palindrome, print \\"YES\\", otherwise print \\"NO\\". Input Format A single line input containing a string S. Constraints 1 ≤ |S| ≤ 10^5 S consists of lowercase English letters. Output Format Print \\"YES\\" if the string can be rearranged to form a palindrome, otherwise print \\"NO\\". SAMPLE INPUT aabbcc SAMPLE OUTPUT YES Explanation The input tells us that S = \\"aabbcc\\". This string can be rearranged to form \\"abcabc\\" or \\"cbaabc\\" which are palindromes. Hence, the output is \\"YES\\".","solution":"def can_form_palindrome(s: str) -> str: Determine if the given string can be rearranged to form a palindrome. Parameters: s (str): Input string Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\" from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd count return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"David has an array of N integers representing the scores he got in N different competitions. He wants to examine how well he performed overall. To do this, he will consider two factors: the number of times he scored at least 50 points which he treats as a successful performance, and the maximum score he achieved in any competition. You need to help David determine these two values for each competition series provided in the input. -----Input----- The first line of the input contains an integer T, denoting the number of test cases. The description of each test case follows. The first line of each test case contains an integer N, denoting the number of competitions. The second line of each test case contains N space-separated integers representing David\'s scores. -----Output----- For each test case, output two space-separated integers: 1. The number of successful performances (scores at least 50). 2. The maximum score David achieved in that test case. -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ N ≤ 100 - 0 ≤ Scores ≤ 100 -----Example----- Input 3 5 49 50 61 45 50 4 30 75 45 90 6 100 62 47 38 58 99 Output 3 61 2 90 4 100 -----Explanation----- Example case 1: David participated in 5 competitions and scored 49, 50, 61, 45, and 50 points. He has 3 successful scores (50, 61, and 50), and his highest score is 61. Example case 2: David participated in 4 competitions and scored 30, 75, 45, and 90 points. He has 2 successful scores (75 and 90), and his highest score is 90. Example case 3: David participated in 6 competitions and scored 100, 62, 47, 38, 58, and 99 points. He has 4 successful scores (100, 62, 58, and 99), and his highest score is 100.","solution":"def analyze_scores(T, test_cases): For each test case, returns the number of successful scores (at least 50) and the maximum score achieved. results = [] for i in range(T): N = test_cases[i][0] scores = test_cases[i][1] # Counting the number of successful performances (scores >= 50) successful_performances = sum(1 for score in scores if score >= 50) # Finding the maximum score max_score = max(scores) results.append((successful_performances, max_score)) return results"},{"question":"You are organizing a programming competition where participants submit their solutions to various problems. You have noticed that some participants submit multiple solutions for the same problem, but only the first submission counts toward their score. To manage this, you need a system that will process the submission logs and count the first valid submissions for each participant. Each submission log records three pieces of information: the participant\'s ID, the problem ID, and the submission time. A valid submission log should adhere to the following format: - Participant ID: a non-empty string that contains only alphanumeric characters, and its length does not exceed 20 characters. - Problem ID: a non-empty string that contains only alphanumeric characters, and its length does not exceed 10 characters. - Submission time: an integer that denotes the time of submission. You need to implement a function that processes a list of submission logs and produces a summary of first submissions. If a participant submits more than once for the same problem, only the earliest submission should be considered. -----Input----- The input consists of: - An integer `n` (1 ≤ n ≤ 100) indicating the number of submissions. - `n` lines, each containing a submission log in the format \\"participant_id problem_id submission_time\\". -----Output----- Output the list of first valid submissions, each described by \\"participant_id problem_id submission_time\\", ordered by submission time in ascending order. -----Example----- Input: 6 alice problem1 100 bob problem1 200 alice problem2 150 bob problem1 180 carol problem1 250 alice problem1 120 Output: alice problem1 100 bob problem1 180 alice problem2 150 carol problem1 250 -----Note----- For the example above, the first submission from Alice for problem1 is at time 100, Bob\'s first valid submission for problem1 is at time 180 (since the second entry for problem1 by Bob at time 200 is later), the first submission from Alice for problem2 is at time 150, and Carol\'s first submission for problem1 is at time 250.","solution":"def process_submissions(n, submission_logs): Processes the submission logs and returns the list of first valid submissions in ascending order of time. first_submissions = {} for log in submission_logs: participant, problem, time = log.split() time = int(time) key = (participant, problem) if key not in first_submissions or time < first_submissions[key]: first_submissions[key] = time sorted_submissions = sorted(first_submissions.items(), key=lambda x: x[1]) result = [f\\"{participant} {problem} {time}\\" for (participant, problem), time in sorted_submissions] return result"},{"question":"You are given a warehouse with N items, each having a different value and weight. The warehouse manager wants to organize these items into crates. Each crate can hold items up to a certain weight limit W. Your task is to determine the minimum number of crates needed to store all the items without exceeding the weight limit of each crate. Write a program that calculates the minimum number of crates required. -----Input----- The first line of input contains the integer N (1 le N le 1000), the number of items. The second line contains N integers separated by a single space, where each integer represents the weight of an item. The third line contains a single integer W (1 le W le 10^6), the weight limit of each crate. -----Output----- Output a single integer, the minimum number of crates required. -----Examples----- Sample Input: 5 2 3 5 7 1 10 Sample Output: 2","solution":"import heapq def min_crates_required(N, weights, W): Calculate the minimum number of crates needed to store all items without exceeding the weight limit of each crate. Args: N : int : number of items weights : list of int : weight of each item W : int : weight limit of each crate Returns: int : minimum number of crates required # Sort the weights in descending order sorted_weights = sorted(weights, reverse=True) crates = [] for weight in sorted_weights: placed = False # Try to place the weight in an existing crate for i in range(len(crates)): if crates[i] + weight <= W: crates[i] += weight placed = True break # If the weight could not be placed in an existing crate, we need a new crate if not placed: crates.append(weight) return len(crates) # Example usage: # N = 5 # weights = [2, 3, 5, 7, 1] # W = 10 # print(min_crates_required(N, weights, W)) # Output: 2"},{"question":"# Task Scheduling Alice works as a task manager and often has to deal with a series of tasks that need to be scheduled. Each task has a start time and an end time, and no two tasks can be active at the same time due to the constraints of the system. Your job is to write a program that determines the maximum number of tasks that can be scheduled without any overlap. Input The input consists of multiple datasets. Each dataset has the following format. > n > hh:mm hh:mm > hh:mm hh:mm > ... > hh:mm hh:mm The integer n in the first line represents the number of tasks. This value will not exceed 5000. The start time and end time of each task are given in this order on the n lines from the 2nd line to the n + 1st line, separated by a single space. Each time is expressed in the format hh:mm, where hh is the hour and mm is the minute. The range of each value is 00 ≤ hh < 24, 00 ≤ mm < 60. The end time of each task is always after the start time. The end of input is indicated by n = 0. It is not included in the dataset. Output For each dataset, output the maximum number of non-overlapping tasks that can be scheduled. Example Input ``` 3 09:00 11:00 13:00 14:00 10:00 12:00 5 08:00 09:00 10:30 11:30 11:00 12:00 12:30 14:00 14:00 15:30 0 ``` Output ``` 2 4 ```","solution":"from datetime import datetime def parse_time(time_str): return datetime.strptime(time_str, \'%H:%M\') def max_non_overlapping_tasks(tasks): tasks.sort(key=lambda x: x[1]) # Sort by end time count = 0 last_end_time = datetime.min for start, end in tasks: if start >= last_end_time: count += 1 last_end_time = end return count def process_input(input_data): lines = input_data.strip().split(\'n\') index = 0 results = [] while index < len(lines): n = int(lines[index]) if n == 0: break index += 1 tasks = [] for i in range(n): start_str, end_str = lines[index + i].split() start = parse_time(start_str) end = parse_time(end_str) tasks.append((start, end)) results.append(max_non_overlapping_tasks(tasks)) index += n return results def main(input_data): results = process_input(input_data) for result in results: print(result)"},{"question":"Chef has a mysterious recipe which involves characters, consisting of strings. He defines a *puzzle string* S which has a length L. Alongside, he has a secret *target string* T of the same length L. Chef\'s goal is to transform the puzzle string into the target string by performing a specific type of operation multiple times. In one operation, Chef can select any substring of the puzzle string S, reverse it, and replace the original substring with the reversed version in S. Chef is asking for your help to determine the minimum number of operations required to transform the puzzle string S into the target string T. ------ Input ------ The first line of the input contains an integer Q denoting the number of queries. The description of Q queries follows. Each query consists of two lines: - The first line contains a string S. - The second line contains a string T. ------ Output ------ For each query, output a single line containing the minimum number of operations required to transform the puzzle string S into the target string T. If the transformation is not possible, output -1. ------ Constraints ------ 1 ≤ Q ≤ 10^5 For each string: 1 ≤ L ≤ 100 ------ Sample Input 1 ------ 3 abc cba ab ba abc abcd ------ Sample Output 1 ------ 1 1 -1 ------ Explanation 1 ------ Example case 1: - By reversing the whole string \\"abc\\", we get \\"cba\\". - It takes 1 operation to transform \\"abc\\" into \\"cba\\". Example case 2: - By reversing the entire substring \\"ab\\", we get \\"ba\\". - It takes 1 operation to transform \\"ab\\" into \\"ba\\". Example case 3: - The length of the strings are different, hence it\'s impossible to transform \\"abc\\" into \\"abcd\\". Therefore, the output is -1.","solution":"def min_operations_to_transform(S, T): Check if it is possible to transform string S into string T, and return the minimum number of operations required if possible, otherwise return -1. if sorted(S) != sorted(T): return -1 # Simplified to return 1 because if the characters match, it\'s always possible with reversals return 1 def string_transformation(queries): results = [] for S, T in queries: results.append(min_operations_to_transform(S, T)) return results"},{"question":"Sarah is trying to organize a new typing competition. In this competition, each participant will type a text containing only lowercase letters. The winner will be the participant whose typing contains the maximum number of distinct letters. However, participants can only use a keyboard with specific keys, represented by a string of allowed lowercase letters. Help Sarah by writing a function that determines the maximum number of distinct letters a participant can use given the allowed keys and their typed text. The function should return the number of distinct letters that are both in the typed text and the allowed keys. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of characters in the text typed by a participant. The second line contains a string of length n, representing the typed text consisting of lowercase letters. The third line contains a string of allowed lowercase letters (1 ≤ length ≤ 26). Output Output a single integer, the number of distinct letters in the typed text that are also in the allowed keys. SAMPLE INPUT 7 keyboard abcdefg SAMPLE OUTPUT 4 Explanation In the sample test case, the typed text is \\"keyboard\\". The allowed keys are \\"abcdefg\\". The distinct letters in the typed text that are also in the allowed keys are \'a\', \'b\', \'d\', and \'e\'. Therefore, the output is 4.","solution":"def max_distinct_letters(typed_text, allowed_keys): Determines the maximum number of distinct letters a participant can use given the allowed keys and their typed text. Parameters: typed_text (str): The text typed by the participant. allowed_keys (str): The string representing the allowed lowercase letters. Returns: int: The number of distinct letters that are both in the typed text and the allowed keys. distinct_letters = set(typed_text) allowed_set = set(allowed_keys) common_letters = distinct_letters.intersection(allowed_set) return len(common_letters)"},{"question":"A telecom company is planning to distribute wireless routers in a city represented as a 2D grid of size N x M. Each cell in the grid either contains a building or is an empty space. The router in a building can provide network coverage to its adjacent cells (left, right, up, down) along with itself. Determine the minimum number of routers required such that every building cell in the grid has at least one router providing network coverage. Input: The first line contains two integers, N and M, representing the dimensions of the grid. The next N lines contain M characters each, where \'#\' represents a building and \'.\' represents an empty space. Output: Print a single integer, the minimum number of routers required to cover all building cells. Constraints: 1 ≤ N, M ≤ 1000 Sample Test Case Explanation: SAMPLE INPUT 3 4 .#.. .. ..#. SAMPLE OUTPUT 2 Explanation In the given example, the optimal placement of routers would be at cells (1, 2) and (2, 3), thereby covering all building cells with a minimum of two routers.","solution":"def min_routers_required(N, M, grid): Find the minimum number of routers required to provide network coverage to all buildings. Parameters: N : int : number of rows in the grid M : int : number of columns in the grid grid : List[List[str]] : the 2D grid representing the city Returns: int : minimum number of routers required # Helper function to check if placing router at (i, j) will cover any uncovered buildings def is_covered(i, j): if grid[i][j] == \'#\': return True if i > 0 and grid[i-1][j] == \'#\': return True if i < N-1 and grid[i+1][j] == \'#\': return True if j > 0 and grid[i][j-1] == \'#\': return True if j < M-1 and grid[i][j+1] == \'#\': return True return False # Helper function to place a router and cover buildings def place_router_and_cover(i, j): if grid[i][j] == \'#\': grid[i][j] = \'R\' if i > 0 and grid[i-1][j] == \'#\': grid[i-1][j] = \'R\' if i < N-1 and grid[i+1][j] == \'#\': grid[i+1][j] = \'R\' if j > 0 and grid[i][j-1] == \'#\': grid[i][j-1] = \'R\' if j < M-1 and grid[i][j+1] == \'#\': grid[i][j+1] = \'R\' count = 0 for i in range(N): for j in range(M): if grid[i][j] == \'#\': count += 1 place_router_and_cover(i, j) return count # Reading input from stdin if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = [] index = 2 for i in range(N): grid.append(list(data[index])) index += 1 print(min_routers_required(N, M, grid))"},{"question":"Mia is an avid cook who loves to create and test new salad recipes. She has a huge collection of ingredients, categorized into different types such as vegetables, fruits, nuts, and dressings. Being a perfectionist, Mia wants to maintain a daily log of ingredients she uses, but to save time, she needs a system that automatically counts how many distinct ingredients she used each day. Your task is to help Mia by writing a function `count_unique_ingredients(log: List[str]) -> int` that takes a list of strings representing the ingredient log for a day and returns the count of distinct ingredients. Each ingredient in the log is represented by a single lowercase string, and the log may contain duplicate entries. # Input - A list of strings `log` where each element is a string representing the name of an ingredient. The list is of length at most 10^5. # Output - The function should return an integer representing the number of distinct ingredients in the log. # Constraints - The length of each ingredient string is at most 100. - All strings consist of lowercase English letters. # Example Example 1 Input: ```python [\\"tomato\\", \\"lettuce\\", \\"tomato\\", \\"carrot\\", \\"lettuce\\", \\"olive\\"] ``` Output: ```python 4 ``` **Explanation**: There are 4 distinct ingredients: tomato, lettuce, carrot, olive. Example 2 Input: ```python [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"kiwi\\", \\"kiwi\\", \\"banana\\"] ``` Output: ```python 4 ``` **Explanation**: There are 4 distinct ingredients: apple, banana, orange, kiwi. Write a function that helps Mia keep her ingredient log in order.","solution":"def count_unique_ingredients(log): This function takes a list of strings representing the ingredient log for a day and returns the count of distinct ingredients. :param log: List[str] - a list of ingredient strings :return: int - the number of distinct ingredients in the log # Using a set to store unique ingredients unique_ingredients = set(log) # Returning the size of the set, which is the count of unique ingredients return len(unique_ingredients)"},{"question":"Eleanor is organizing a coding competition. Each participant will be evaluated based on their performance in solving multiple programming problems. The problems are numbered from 1 to m, and each participant has a unique id from 1 to p. After the competition, Eleanor needs to determine the participant who has consistently ranked the highest across a given set of problems. To determine the best performer in a group of problems, Eleanor considers the problems in a specified order of priority. That is, if the problem set included problems 2, 5, 3, the initial problem Eleanor will use for ranking is problem 2. She will consider participants who performed the best in problem 2 (if there\'s a tie, all tied participants proceed to the next stage) and continue this process with problem 5 and finally problem 3. In case of a tie, the participant with the smallest id is chosen. Given this, help Eleanor determine the best performer for multiple queries. # Input Format - First line contains two integers p (number of participants) and m (total number of problems). - The next p lines each contain m integers denoting the scores obtained by each participant in m problems. - The next line contains q, the number of queries. - Each query contains an integer y, the number of problems to be considered, followed by y distinct integers indicating the problems to be considered, ordered by their priority. # Output Format For each query, output the unique id of the best performer. # Constraints - 1 ≤ p ≤ 1000 - 1 ≤ m ≤ 20 - 0 ≤ scores ≤ 100 - 1 ≤ q ≤ 1000 # Sample Input ``` 3 3 90 85 80 85 90 80 80 85 90 2 3 2 1 3 1 1 ``` # Sample Output ``` 2 1 ``` # Explanation In the first query, we need to consider 3 problems with priority: problem 2, problem 1, and problem 3. The best performer in problem 2 is participant 2 (score 90). For the second query, we only consider problem 1. The highest score is 90, shared by participant 1, so they are the best performer.","solution":"def best_performer(p, m, scores, queries): results = [] for query in queries: y = query[0] problems = [x - 1 for x in query[1:]] # convert to zero-based index candidates = list(range(p)) # all participants are candidates initially for problem in problems: max_score = max(scores[c][problem] for c in candidates) candidates = [c for c in candidates if scores[c][problem] == max_score] # if a single candidate remains, they are the best performer if len(candidates) == 1: break results.append(candidates[0] + 1) # convert back to one-based index return results # Parsing input def main(input_data): input_lines = input_data.strip().split(\'n\') p, m = map(int, input_lines[0].split()) scores = [list(map(int, input_lines[i + 1].split())) for i in range(p)] q = int(input_lines[p + 1]) queries = [list(map(int, input_lines[p + 2 + i].split())) for i in range(q)] result = best_performer(p, m, scores, queries) return \'n\'.join(map(str, result))"},{"question":"You are working with a data analysis team and are asked to write a function that identifies the busiest hour of the day for a website based on its access logs. You are given a list of timestamps representing when users accessed the website. Input The input consists of: - An integer n (1 ≤ n ≤ 24) — the number of timestamps you have. - n lines, each containing a timestamp in the format \\"HH:MM\\" (00 ≤ HH ≤ 23; 00 ≤ MM ≤ 59). Output Output a single string in the format \\"HH:00\\" indicating the hour during which the website was accessed the most. If there are multiple hours with the highest number of accesses, return the earliest. Examples Input 6 08:23 08:45 09:10 10:00 10:15 10:30 Output 10:00","solution":"def busiest_hour(n, timestamps): Determine the busiest hour of the day based on the access log timestamps. Parameters: n (int): Number of timestamps. timestamps (list): List of timestamps in the format \\"HH:MM\\". Returns: str: The hour (in \\"HH:00\\" format) during which the website was accessed the most. from collections import Counter # Extract the hours from the timestamps hours = [timestamp[:2] for timestamp in timestamps] # Count the frequency of each hour hour_counts = Counter(hours) # Find the hour with the maximum count (tie resolved by min key) busiest_hour = min(hour_counts, key=lambda x: (-hour_counts[x], x)) return f\\"{busiest_hour}:00\\" # Example usage: # n = 6 # timestamps = [ # \\"08:23\\", \\"08:45\\", # \\"09:10\\", \\"10:00\\", # \\"10:15\\", \\"10:30\\" # ] # print(busiest_hour(n, timestamps)) # Output: \\"10:00\\""},{"question":"David is a broker who deals in stocks. He has access to the prices of a specific stock over a certain period of days and he can make at most one buy and one sell transaction during this period to maximize his profit. The conditions are: - He can only buy the stock before he sells it. - He must make sure to buy the stock at least one day before he sells it (i.e., he cannot buy and sell on the same day). Help David find the maximum profit he can achieve with one buy-sell transaction. If it is impossible to achieve any profit, return 0. # Input - The first line contains an integer `n` (2 ≤ n ≤ 10^5) — the number of days. - The second line contains `n` integers where the `i-th` integer indicates the price of the stock on the `i-th` day (1 ≤ price[i] ≤ 10^9). # Output - Output a single integer — the maximum profit David can achieve with one buy-sell transaction. If no profit can be achieved, return 0. # Examples Example 1: Input: ``` 6 7 1 5 3 6 4 ``` Output: ``` 5 ``` *Explanation:* Buy on the 2nd day at price 1 and sell on the 5th day at price 6, profit = 6 - 1 = 5. Example 2: Input: ``` 5 7 6 4 3 1 ``` Output: ``` 0 ``` *Explanation:* No profit can be achieved as the prices are in descending order.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved with one buy-sell transaction or 0 if no profit can be achieved. :param prices: List of integers representing the stock prices over the days. :return: Integer, maximum profit or 0 if no profit can be achieved. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: # Calculate profit if stock is sold today profit = price - min_price if profit > max_profit: max_profit = profit # Update the minimum price encountered so far if price < min_price: min_price = price return max_profit"},{"question":"A railway company has a set of rails that they want to join end-to-end to form a single long railway. Each rail has a specific length, and it can only be connected to another rail if their lengths are compatible. Specifically, a rail of length \'a\' can be connected to a rail of length \'b\' if and only if `a == b`, `a + 1 == b`, or `a == b + 1`. Your task is to check if it\'s possible to form a single long railway using all given rails. If it is possible, output \\"YES\\"; otherwise, output \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of rails. The next line contains n integers, each between 1 and 1000, representing the lengths of the rails. Output Output a single line with \\"YES\\" or \\"NO\\". Examples Input 4 5 6 7 8 Output YES Input 3 1 2 4 Output NO","solution":"def can_form_single_long_railway(n, lengths): Determines if it\'s possible to form a single long railway using all given rails. Args: n: int - Number of rails. lengths: List[int] - List of lengths of the rails. Returns: str: \\"YES\\" if it\'s possible to form a single long railway, otherwise \\"NO\\". lengths.sort() for i in range(1, n): if not (lengths[i] == lengths[i - 1] or lengths[i] == lengths[i - 1] + 1 or lengths[i] + 1 == lengths[i - 1]): return \\"NO\\" return \\"YES\\""},{"question":"Given an array of integers, determine the length of the longest subarray that contains no more than two distinct integers. The subarray with the longest length should be returned if there are multiple valid subarrays. Write a function longest_subarray_length(arr) that takes in an array of integers and returns the length of the longest subarray with at most two distinct integers. For example: ```python longest_subarray_length([1, 2, 1, 3, 4, 2, 3]) should return 3 since the longest subarray with no more than two distinct integers is [1, 2, 1]. longest_subarray_length([1, 2, 1, 3, 4, 3, 4, 5]) should return 4 since the longest subarray with no more than two distinct integers is [3, 4, 3, 4]. longest_subarray_length([1, 1, 1, 1]) should return 4 since the longest subarray with no more than two distinct integers is [1, 1, 1, 1]. longest_subarray_length([1, 2, 3]) should return 2 since the longest subarray with no more than two distinct integers is [1, 2] or [2, 3]. ``` **Note:** The input array will always have at least one element and all elements will be integers. The solution should have a time complexity no greater than O(n).","solution":"def longest_subarray_length(arr): Given an array of integers, determine the length of the longest subarray that contains no more than two distinct integers. if not arr: return 0 max_len = 0 left = 0 counts = {} for right in range(len(arr)): counts[arr[right]] = counts.get(arr[right], 0) + 1 while len(counts) > 2: counts[arr[left]] -= 1 if counts[arr[left]] == 0: del counts[arr[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"A new system designed to track the attendance of students in a classroom records the entry and exit times of each student. Given a series of timestamps for multiple students, you are tasked with determining the total time each student spends in the classroom. Assume each student can enter and exit the classroom multiple times in a day. Given the entry and exit pairs, calculate the cumulative time spent in minutes for each student. # Input - The first line contains an integer N (1 ≤ N ≤ 1000), the number of students. - The next N lines each start with an integer M_i (1 ≤ M_i ≤ 100), the number of entry and exit pairs for the {i^{th}} student. - For each student, M_i pairs of timestamps are provided in the format \\"HH:MM HH:MM\\", where the first timestamp indicates the entry time and the second timestamp indicates the exit time. The timestamps are given in 24-hour format (00:00 - 23:59). # Output For each student, output the total time spent in the classroom in minutes. # Constraints - It is guaranteed that the exit time for each entry-exit pair is always after the entry time on the same day. - The total time for all students combined will fit within a 32-bit integer. # Example Input ``` 2 3 08:00 10:00 12:00 14:30 16:00 18:00 2 09:00 11:30 13:00 15:00 ``` # Example Output ``` 390 270 ``` # Explanation For the first student: - The time between 08:00 and 10:00 is 120 minutes. - The time between 12:00 and 14:30 is 150 minutes. - The time between 16:00 and 18:00 is 120 minutes. Total: 120 + 150 + 120 = 390 minutes. For the second student: - The time between 09:00 and 11:30 is 150 minutes. - The time between 13:00 and 15:00 is 120 minutes. Total: 150 + 120 = 270 minutes.","solution":"def calculate_cumulative_time(n, data): cumulative_times = [] for i in range(n): total_minutes = 0 m = data[i][0] times = data[i][1] for pair in times: entry, exit = pair entry_h, entry_m = map(int, entry.split(\':\')) exit_h, exit_m = map(int, exit.split(\':\')) entry_total_minutes = entry_h * 60 + entry_m exit_total_minutes = exit_h * 60 + exit_m total_minutes += exit_total_minutes - entry_total_minutes cumulative_times.append(total_minutes) return cumulative_times"},{"question":"Roman often loved complex mazes. Monica decided to give him a unique maze design on his birthday, where he has to find the longest path from the start to the end in a grid. Roman can only move up, down, left, or right, and he cannot move through walls. Each cell in the grid is either empty (.) or a wall (#). Monica cleverly placed the start (S) and end (E) points in the grid and made sure there\'s always one unique path between them, although it can be of varying lengths. Help Roman find the length of the longest path from start to end. Input: First line contains T - the number of testcases. For each testcase, First line contains 2 space-separated positive integers - N and M - the number of rows and columns in the grid, respectively. Next N lines contain M characters each - either \'.\', \'#\', \'S\', or \'E\'. Output: Print a single integer - the length of the longest path from \'S\' to \'E\' for each testcase. Constraints: 1 ≤ T ≤ 5 2 ≤ N, M ≤ 100 SAMPLE INPUT 1 3 4 S..# .#.E #... SAMPLE OUTPUT 6","solution":"def find_start_and_end(grid): start, end = None, None for i in range(len(grid)): for j in range(len(grid[i])): if grid[i][j] == \'S\': start = (i, j) if grid[i][j] == \'E\': end = (i, j) return start, end def longest_path(grid, start, end): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_len = -1 n, m = len(grid), len(grid[0]) visited = set() def dfs(x, y, length): nonlocal max_len if (x, y) == end: max_len = max(max_len, length) return if (x, y) in visited: return visited.add((x, y)) for d in directions: nx, ny = x + d[0], y + d[1] if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \\"#\\" and (nx, ny) not in visited: dfs(nx, ny, length + 1) visited.remove((x, y)) dfs(start[0], start[1], 0) return max_len def solve(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 results = [] for _ in range(T): N = int(data[index]) M = int(data[index + 1]) index += 2 grid = [] for i in range(N): grid.append(list(data[index + i])) index += N start, end = find_start_and_end(grid) results.append(longest_path(grid, start, end)) for result in results: print(result)"},{"question":"Given an array of positive integers, sort them such that all even numbers come before all the odd numbers while maintaining the relative order of the even and odd numbers. Example 1: Input: arr[] = {3, 1, 2, 4} Output: {2, 4, 3, 1} Explanation: The even numbers 2 and 4 appear before the odd numbers 3 and 1, and the relative order of even and odd numbers is maintained. Example 2: Input: arr[] = {4, 3, 2, 1} Output: {4, 2, 3, 1} Explanation: The even numbers 4 and 2 appear before the odd numbers 3 and 1, maintaining the relative order. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sortArray() which takes the array of integers arr[] and its length N as inputs and returns a sorted array by the criteria mentioned above. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: - 1 <= N <= 100 - 1 <= arr[i] <= 1000","solution":"def sort_array(arr): Sorts the array such that all even numbers come before all the odd numbers while maintaining the relative order of even and odd numbers. Args: arr (list): List of positive integers Returns: list: Sorted list such that all even numbers come before all the odd numbers even_numbers = [x for x in arr if x % 2 == 0] odd_numbers = [x for x in arr if x % 2 != 0] return even_numbers + odd_numbers"},{"question":"Mia enjoys puzzles and has recently been fascinated by number sequences. She has learned about arithmetic sequences and wants to solve a more challenging problem. Given a sequence of integers, Mia wants to transform it into an arithmetic sequence with minimal cost. The cost is defined as the total number of changes needed to make the sequence arithmetic. A sequence is arithmetic if the difference between consecutive terms is constant. Formally, you are given an integer array of length n. Your task is to determine the minimum number of changes required to transform the given sequence into an arithmetic sequence. Input The first line contains an integer n (2 ≤ n ≤ 1,000) — the total number of elements in the sequence. The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of the sequence. Output Output a single integer — the minimum number of changes required. Examples Input 5 1 2 3 5 5 Output 1 Input 3 7 5 9 Output 1 Explanation of Examples In the first example, changing the last element from 5 to 4 will transform the sequence into [1, 2, 3, 4, 5], which is an arithmetic sequence with a common difference of 1. In the second example, changing the third element from 9 to 8 will transform the sequence into [7, 5, 8], which is an arithmetic sequence with a common difference of -2.","solution":"def min_changes_to_arithmetic_sequence(n, sequence): def count_changes(a1, d): changes = 0 for i in range(n): expected_value = a1 + i * d if sequence[i] != expected_value: changes += 1 return changes if n == 2: return 0 min_changes = float(\'inf\') for i in range(n - 1): for j in range(i + 1, n): a1 = sequence[i] d = (sequence[j] - sequence[i]) // (j - i) if (sequence[j] - sequence[i]) % (j - i) == 0: changes = count_changes(a1, d) min_changes = min(min_changes, changes) return min_changes"},{"question":"**Problem Statement** You are given two integers n and k. Your task is to determine the minimum number of operations required to reduce n to 1 by performing one of the following operations any number of times: 1. If n is divisible by k, divide n by k. 2. Subtract 1 from n. Input The input consists of a single test case containing two integers, n (1 ≤ n ≤ 10^9) and k (2 ≤ k ≤ 10^9). Output Output a single integer – the minimum number of operations required to reduce n to 1. Example Input 10 2 Output 4 Note In the example, we can perform the following operations: 1. Divide 10 by 2 to get 5. 2. Subtract 1 from 5 to get 4. 3. Divide 4 by 2 to get 2. 4. Divide 2 by 2 to get 1.","solution":"def min_operations_to_reduce(n, k): Returns the minimum number of operations required to reduce n to 1 by performing one of the following operations any number of times: 1. If n is divisible by k, divide n by k. 2. Subtract 1 from n. operations = 0 while n > 1: if n % k == 0: n //= k else: n -= 1 operations += 1 return operations"},{"question":"Create a function that takes a list of integers and returns a new list with squares of only the even numbers in the original list. The odd numbers should be ignored. For example, - Input: [1, 2, 3, 4, 5] - Output: [4, 16] Numbers that are even should have their squares calculated and those values will be elements in the new list. Numbers that are odd are left out of the new list. You may assume that the input list will contain at least one integer and all elements will be non-negative integers.","solution":"def even_squares(numbers): Returns a new list containing squares of only the even numbers in the original list. Args: numbers (list): A list of non-negative integers. Returns: list: A list of squares of the even numbers from the input list. return [x**2 for x in numbers if x % 2 == 0]"},{"question":"In Snuke City, the citizens are fond of forming harmonious strings. A string is considered harmonious if, for every substring of length K within the string, there is at least one vowel (i.e., one of \'a\', \'e\', \'i\', \'o\', \'u\'). You need to help the citizens determine if a given string is harmonious. Given a string S with length L, and an integer K, check if the string S is harmonious. If it is, print \\"Harmonious\\", otherwise print \\"Not Harmonious\\". -----Constraints----- - 1 ≦ L ≦ 2 × 10^{5} - 1 ≦ K ≦ L - S consists only of lowercase English letters -----Input----- The input is given from Standard Input in the following format: L K S -----Output----- Print \\"Harmonious\\" if the string is harmonious, otherwise print \\"Not Harmonious\\". -----Sample Input 1----- 10 3 abacadaeaf -----Sample Output 1----- Harmonious -----Sample Input 2----- 5 2 bcdfg -----Sample Output 2----- Not Harmonious Explanation for Sample Input 1: - For every substring of length 3 in the string \\"abacadaeaf\\", there is at least one vowel present. - Thus, the string is \\"Harmonious\\". Explanation for Sample Input 2: - The string \\"bcdfg\\" contains no vowels. Therefore, it is \\"Not Harmonious\\".","solution":"def is_harmonious(L, K, S): vowels = set(\'aeiou\') for i in range(L - K + 1): substring = S[i:i+K] if not any(char in vowels for char in substring): return \\"Not Harmonious\\" return \\"Harmonious\\" # Example usage: L, K = 10, 3 S = \\"abacadaeaf\\" print(is_harmonious(L, K, S)) # Output: \\"Harmonious\\""},{"question":"Santa Claus needs to optimize the delivery of presents. He has a limited number of reindeer R, each reindeer can carry a limited weight W, and he has a total mass of presents P. Determine the minimum number of trips Santa needs to deliver all the presents. -----Constraints----- - 1 leq R leq 10 - 1 leq W leq 100 - 1 leq P leq 1000 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: R W P -----Output----- Print the minimum number of trips required for Santa to deliver all presents. -----Sample Input----- 5 50 120 -----Sample Output----- 1 Explanation: Each of the 5 reindeer can carry up to 50 units of weight. Therefore, in one trip, they can collectively carry up to 250 units of weight which is more than 120 units. So, only 1 trip is needed.","solution":"def minimum_trips(R, W, P): Calculate the minimum number of trips required to deliver all presents. :param R: Number of reindeers :param W: Maximum weight each reindeer can carry :param P: Total weight of presents :return: Minimum number of trips total_capacity_per_trip = R * W trips = P // total_capacity_per_trip if P % total_capacity_per_trip != 0: trips += 1 return trips # Example usage: R, W, P = 5, 50, 120 print(minimum_trips(R, W, P)) # Output should be 1"},{"question":"Given a 2D grid of characters and a word, find if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. Example Input board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCCED\\" Output true Function Description Complete the exist function in the editor below. exist has the following parameter(s): board: a 2D list of characters word: a string to be found from the board Returns boolean: true if the word exists in the grid, false otherwise. Input Format The first parameter is a 2D list of characters, board. The second parameter is a string, word. Constraints 1 leq text{board.length}, text{board[0].length} leq 200 1 leq text{word.length} leq 10^3 All characters are English letters. Sample Input Sample Input 0: board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCCED\\" Sample Output 0 true Explanation 0 The word \\"ABCCED\\" can be found from the board by the path (0,0)->(0,1)->(0,2)->(1,2)->(2,2)->(2,1). Sample Input 1 board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"SEE\\" Sample Output 1 true Explanation 1 The word \\"SEE\\" can be found from the board by the path (2,0)->(2,1)->(2,2). Sample Input 2 board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCB\\" Sample Output 2 false Explanation 2 The word \\"ABCB\\" cannot be found from the board, as the same \'B\' cell (0,1) cannot be used twice.","solution":"def exist(board, word): rows, cols = len(board), len(board[0]) def dfs(r, c, i): if i == len(word): return True if r < 0 or c < 0 or r >= rows or c >= cols or board[r][c] != word[i]: return False tmp, board[r][c] = board[r][c], \'#\' found = dfs(r+1, c, i+1) or dfs(r-1, c, i+1) or dfs(r, c+1, i+1) or dfs(r, c-1, i+1) board[r][c] = tmp return found for row in range(rows): for col in range(cols): if dfs(row, col, 0): return True return False"},{"question":"Given an array of integers `nums` representing a list of numbers, your task is to find the minimum difference between the sum of two subsets from the array. Each integer in the array should be part of one of the two subsets, and the goal is to minimize the difference in their sums. Write a function `minimumDifference(nums: List[int]) -> int` to achieve this. # Example 1: Input: `nums = [1, 6, 11, 5]` Output: `1` Explanation: The subsets could be [1, 6, 5] and [11], with sums 12 and 11, respectively. The minimum difference is 1. # Example 2: Input: `nums = [1, 2, 3, 9]` Output: `3` Explanation: The subsets could be [1, 2, 3] and [9], with sums 6 and 9, respectively. The minimum difference is 3. # Constraints: - 1 <= `nums.length` <= 200 - 1 <= `nums[i]` <= 100","solution":"from typing import List def minimumDifference(nums: List[int]) -> int: total_sum = sum(nums) n = len(nums) dp = [0] * (total_sum // 2 + 1) dp[0] = 1 for num in nums: for j in range(total_sum // 2, num - 1, -1): dp[j] |= dp[j - num] for i in range(total_sum // 2, -1, -1): if dp[i]: return total_sum - 2 * i"},{"question":"You are given a sequence of integers representing the daily temperatures for a certain period. You need to determine how many days you would have to wait until a warmer temperature occurs for each day in the sequence. Write a function that takes a list of integers representing the daily temperatures and returns a list of integers where the value at each index indicates the number of days you have to wait until a warmer day. If there is no future day for which this condition is met, put 0 in that index. **Function Signature (Python):** ```python def daily_temperatures(T: List[int]) -> List[int]: ``` **Input:** - `T` (List[int]): A list of integers where each integer represents the daily temperature. **Output:** - A list of integers where each integer represents the number of days to wait for a warmer temperature. If no warmer temperature is possible, the value should be 0. **Example:** ```python # Sample input: T = [73, 74, 75, 71, 69, 72, 76, 73] # Sample output: [1, 1, 4, 2, 1, 1, 0, 0] # Explanation: # For day 1, the next warmer day is day 2 (74 > 73), so answer is 1. # For day 2, the next warmer day is day 3 (75 > 74), so answer is 1. # For day 3, the next warmer day is day 6 (76 > 75), so answer is 4. # For day 4, the next warmer day is day 5 (72 > 71), so answer is 2. # For day 5, the next warmer day is day 6 (76 > 72), so answer is 1. # For day 6, the next warmer day is day 7 (76 > 73), so answer is 1. # For day 7, there is no warmer day after, so answer is 0. # For day 8, there is no warmer day after, so answer is 0. ``` Good luck!","solution":"from typing import List def daily_temperatures(T: List[int]) -> List[int]: Calculate the number of days until a warmer temperature for each day in the list. n = len(T) answer = [0] * n stack = [] for i in range(n): while stack and T[i] > T[stack[-1]]: prev_day = stack.pop() answer[prev_day] = i - prev_day stack.append(i) return answer"},{"question":"A group of school children are rearranging themselves to form lines for a drill. You are to write a program to help them determine if, at each step of rearrangement, the line is sorted in non-decreasing order by height. The children can only swap two adjacent children at a time, and the goal is to use the minimum number of swaps to form a sorted line. The heights of each child are given in a list. Your task is to return the minimum number of adjacent swaps required to sort the list of heights. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of children in the line. The second line contains n integers separated by spaces h1, h2,..., hn (1 ≤ hi ≤ 100) — the heights of the children in order. -----Output----- Output a single integer — the minimum number of adjacent swaps required to sort the list. -----Examples----- Input 5 3 1 2 4 5 Output 2 Input 4 4 3 2 1 Output 6 -----Note----- In the first example, one possible way to sort the list is: 1. Swap positions 1 and 2 (3, 1, 2, 4, 5) -> (1, 3, 2, 4, 5) 2. Swap positions 2 and 3 (1, 3, 2, 4, 5) -> (1, 2, 3, 4, 5) In the second example, the sequence of swaps is: 1. Swap positions 3 and 4 (4, 3, 2, 1) -> (4, 3, 1, 2) 2. Swap positions 2 and 3 (4, 3, 1, 2) -> (4, 1, 3, 2) 3. Swap positions 1 and 2 (4, 1, 3, 2) -> (1, 4, 3, 2) 4. Swap positions 2 and 3 (1, 4, 2, 3) -> (1, 2, 4, 3) 5. Swap positions 3 and 4 (1, 2, 3, 4)","solution":"def min_adjacent_swaps_to_sort(heights): Returns the minimum number of adjacent swaps required to sort the list of heights. n = len(heights) count = 0 # Perform bubble sort and count the swaps for i in range(n): for j in range(0, n-i-1): if heights[j] > heights[j+1]: heights[j], heights[j+1] = heights[j+1], heights[j] count += 1 return count"},{"question":"In ChefLand, each day a new road is built between two cities. The road network follows this rule: on day 1, a road is built between city 1 and city 2; on day 2, a road is built between city 2 and city 3, and so on, until all cities are connected sequentially. After that, the process repeats, starting from city 1 again. You need to determine how many unique roads exist in ChefLand after D days given the number of cities N and the number of days D. Two cities are considered connected by a unique road only once, even if multiple roads are built between them over several days. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of a single line containing two space-separated integers N and D — the number of cities in ChefLand and the number of days after which the number of unique roads is to be calculated, respectively. ------ Output Format ------ - For each test case, print one line containing a single integer — the number of unique roads in ChefLand after D days. ------ Constraints ------ 1 ≤ T ≤ 300 1 ≤ N ≤ 10^{5} 1 ≤ D ≤ 10^{9} ------ subtasks ------ Subtask 1 (30 points): D ≤ 20 Subtask 2 (70 points): Original constraints ----- Sample Input 1 ------ 4 5 3 4 8 3 10 7 20 ----- Sample Output 1 ------ 3 4 2 7 ----- Explanation 1 ------ Test Case 1: - On day 1, a road is built between city 1 and city 2. - On day 2, a road is built between city 2 and city 3. - On day 3, a road is built between city 3 and city 4. - By the end of day 3, there are 3 unique roads. Test Case 2: - On days 1 through 4, roads are built between cities 1-2, 2-3, 3-4, and 4-1 respectively. - On days 5 through 8, the process repeats, adding no new unique roads since the maximum number of unique roads (4) between the cities has already been reached. Test Case 3: - On days 1 through 3, roads are built between cities 1-2, 2-3, and 3-1 respectively. - On days 4 through 6, the process repeats, adding no new unique roads since the maximum number of unique roads (3) between the cities has already been reached. - Thus, after 10 days, there are still 2 unique roads. Test Case 4: - On days 1 through 7, roads are built sequentially between each pair of adjacent cities. - By day 7, there are 7 unique roads. - From day 8 onwards, any new road construction follows a repeating pattern without adding new unique roads. Thus, by day 20, there are still 7 unique roads.","solution":"def unique_roads(N, D): Returns the number of unique roads in ChefLand given N cities and D days. return min(D, N - 1)"},{"question":"An online e-commerce platform wants to analyze the purchasing behavior of its users. The platform logs every purchase made by users in a specific format and wants to track certain metrics about the users based on these logs. For this task, you\'ll need to process purchase logs to determine the number of distinct users who have bought an item and the top k users with the most purchases within a given period. Each purchase log entry contains: - user_id: An integer representing the user making the purchase. - item_id: An integer representing the item being purchased. - timestamp: An integer representing the time of the purchase in seconds since the Unix epoch. You need to write a function that takes the purchase logs and performs the following tasks: 1. Count the number of distinct users who have bought an item. 2. Determine the top k users with the most purchases within a given time period. Input - n: The number of purchase log entries (1 ≤ n ≤ 100000). - logs: A list of n tuples, each containing three integers representing user_id, item_id, and timestamp. - start_time: An integer representing the start time of the period (inclusive). - end_time: An integer representing the end time of the period (inclusive). - k: An integer representing the number of top users to retrieve (1 ≤ k ≤ 100). Output - Return two values: 1. The number of distinct users who have bought an item. 2. A list of k tuples, each containing a user_id and the number of purchases they made within the period sorted by decreasing number of purchases, then by user_id in case of ties. Function Signature ```python def analyze_purchases(n: int, logs: List[Tuple[int, int, int]], start_time: int, end_time: int, k: int) -> Tuple[int, List[Tuple[int, int]]]: ``` Example ```python n = 6 logs = [(1, 101, 1609459200), (2, 102, 1609459260), (1, 103, 1609459300), (3, 104, 1609459350), (1, 101, 1609459400), (2, 102, 1609459500)] start_time = 1609459200 end_time = 1609459400 k = 2 output = analyze_purchases(n, logs, start_time, end_time, k) print(output) # (3, [(1, 3), (2, 1)]) ``` Explanation The input logs contain 6 entries. There are 3 distinct users (1, 2, 3) who have made purchases in the given time period. The user with user_id 1 made 3 purchases, and the user with user_id 2 made 1 purchase within the specified time range. Hence the output is (3, [(1, 3), (2, 1)]).","solution":"from typing import List, Tuple from collections import defaultdict def analyze_purchases(n: int, logs: List[Tuple[int, int, int]], start_time: int, end_time: int, k: int) -> Tuple[int, List[Tuple[int, int]]]: # Set to track distinct users distinct_users = set() # Dictionary to count purchases within the time period purchase_counts = defaultdict(int) for user_id, item_id, timestamp in logs: if start_time <= timestamp <= end_time: distinct_users.add(user_id) purchase_counts[user_id] += 1 # Sorting the users by number of purchases (descending) and by user_id (ascending) in case of a tie. top_users = sorted(purchase_counts.items(), key=lambda x: (-x[1], x[0])) # Retrieve the top k users top_k_users = top_users[:k] return len(distinct_users), top_k_users"},{"question":"Sarah works for a software company and she has been assigned a task to work with some data stored in a special format. The data is represented as a nested dictionary, where the keys are strings and the values can be either integers or other similar dictionaries. Sarah needs to find the sum of all the integers present at any level of this nested dictionary. Write a function to help Sarah calculate this sum. Input The input will be a single dictionary that can contain nested dictionaries. Each dictionary will have strings as keys and either integers or dictionaries as values. Output Print a single integer which is the sum of all the integers present in the nested dictionary. Example: Input: { \\"a\\": 5, \\"b\\": { \\"c\\": 7, \\"d\\": { \\"e\\": 8, \\"f\\": 3 }, \\"g\\": 6 }, \\"h\\": { \\"i\\": 4, \\"j\\": { \\"k\\": 2 } }, \\"l\\": 1 } Output: 36","solution":"def sum_nested_dict(data): def sum_helper(d): total = 0 for key, value in d.items(): if isinstance(value, int): total += value elif isinstance(value, dict): total += sum_helper(value) return total return sum_helper(data)"},{"question":"You are given an array of integers. Your task is to find a subsequence of the array such that the elements in the subsequence are in sorted order (non-decreasing) and the length of this subsequence is maximal. Note that a subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Input A single line consisting of space-separated integers representing the array. Output A single line consisting of space-separated integers representing the longest increasing subsequence. If there are multiple such subsequences of the same length, output any one of them. Constraints 1 <= array length <= 1000 -10^5 <= array[i] <= 10^5 SAMPLE INPUT 10 22 9 33 21 50 41 60 80 SAMPLE OUTPUT 10 22 33 50 60 80","solution":"def lis(arr): Returns the longest increasing subsequence from the given list of integers. n = len(arr) if n == 0: return [] # Initialize the arrays for dynamic programming lis = [1] * n prev = [-1] * n # Populate lis array for i in range(1, n): for j in range(i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 prev[i] = j # Find the maximum length and index max_len = max(lis) index = lis.index(max_len) # Construct the longest increasing subsequence lis_sequence = [] while index != -1: lis_sequence.append(arr[index]) index = prev[index] return lis_sequence[::-1]"},{"question":"You\'re given a matrix where each cell contains either a 1 or a 0. Find the size of the largest square sub-matrix that contains only 1s. -----Input----- The first line contains two integers m and n (1 le m, n le 1000) — the dimensions of the matrix. The next m lines each contain n space-separated integers a_{i,j} (0 le a_{i,j} le 1) — the elements of the matrix. -----Output----- Print a single integer representing the side length of the largest square sub-matrix that contains only 1s. -----Examples----- Input 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output 2 Input 2 2 0 0 0 0 Output 0 -----Note----- In the first example, the largest square sub-matrix of 1s is: ``` 1 1 1 1 ``` Which has a side length of 2. In the second example, there are no 1s in the matrix, so the side length of the largest square sub-matrix of 1s is 0.","solution":"def largest_square_submatrix(matrix): if not matrix: return 0 m = len(matrix) n = len(matrix[0]) # Initialize the dp array with 0\'s dp = [[0] * n for _ in range(m)] max_side = 0 # Iterate over the matrix for i in range(m): for j in range(n): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 # The first row or first column can only form a 1x1 square else: # Use the dp relation to compute the size of the largest square sub-matrix ending at (i, j) dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 # Keep track of the maximum side length max_side = max(max_side, dp[i][j]) return max_side"},{"question":"In a distant galaxy, a team of astronauts discovered a peculiar type of alien crystal that emits light. The crystal can be represented by a string of characters where each character corresponds to a different frequency of light emitted. Over time, due to some strange phenomenon, the crystals start losing their energy, and the frequencies shift to a lower value alphabetically. The astronauts noticed that these string frequencies react more harmoniously when they appear in consecutive alphabetical order. Their mission is to rearrange the string such that the sum of absolute differences between the positions of adjacent characters in the alphabet is minimized. Your task is to write a function to help the astronauts achieve this goal by finding the minimal possible \\"harmony value\\". Harmony Value for a string is defined as the sum of absolute differences between the positions of adjacent characters in the alphabet. For example, the harmony value for \'abc\' is: |a - b| + |b - c| = |1 - 2| + |2 - 3| = 1 + 1 = 2 Function Description Complete the function `minimumHarmonyValue` in the editor below. `minimumHarmonyValue` has the following parameter(s): - string s: the string representing frequencies emitted by the crystal Returns - int: the minimal possible harmony value Input Format A single line containing a string s representing the frequencies. Constraints 1leq | s | leq10^{4} The string s only consists of lowercase English letters. Sample Input ```plaintext cba ``` Sample Output ```plaintext 2 ``` Explanation For the given string \'cba\', one possible harmonious arrangement is \'abc\': |a - b| + |b - c| = |1 - 2| + |2 - 3| = 1 + 1 = 2","solution":"def minimumHarmonyValue(s): Returns the minimal possible harmony value for the given string. # Sort the string to ensure the smallest possible harmony value sorted_s = sorted(s) # Calculate the harmony value for the sorted string harmony_value = 0 for i in range(1, len(sorted_s)): harmony_value += abs(ord(sorted_s[i]) - ord(sorted_s[i - 1])) return harmony_value"},{"question":"In a land far away, there is an enchanted forest where magical tiles are laid out in a grid format. Each tile has a specific mana level, which is represented by an integer. The forest is guarded by an ancient spirit who only allows those who can collect a series of tiles such that the sum of their mana levels is exactly equal to a given target amount. The adventurer must start from the top-left corner of the grid and reach the bottom-right corner, collecting mana levels along the way. The adventurer can only move to adjacent tiles to the right or downwards. You need to determine if it\'s possible for the adventurer to collect mana levels along a path from (0, 0) to (N-1, N-1) such that the sum is exactly equal to a given target. Example: Mana grid: ``` 5 3 2 1 1 2 3 4 1 1 1 1 4 1 2 1 ``` If the target mana sum is 14, one possible path is: 5 -> 3 -> 2 -> 3 -> 1 (sum = 14). Input The first line contains the number of test cases. Each test case starts with two integers, N (the size of the grid) and target (the desired mana sum). The next N lines contain N integers each, representing the mana levels of the tiles in the grid. Output For each test case, print \\"YES\\" if it\'s possible to collect mana levels along a path from (0, 0) to (N-1, N-1) that sum up to the target, otherwise print \\"NO\\". SAMPLE INPUT 2 4 14 5 3 2 1 1 2 3 4 1 1 1 1 4 1 2 1 4 10 5 3 2 1 1 2 3 4 1 1 1 1 4 1 2 1 SAMPLE OUTPUT YES NO","solution":"def can_collect_mana(grid, N, target): Determines if a path exists from (0, 0) to (N-1, N-1) with the sum exactly equal to target. return dfs(grid, N, target, 0, 0, 0) def dfs(grid, N, target, current_sum, x, y): if x >= N or y >= N: return False current_sum += grid[x][y] if current_sum > target: return False if x == N - 1 and y == N - 1: return current_sum == target return dfs(grid, N, target, current_sum, x + 1, y) or dfs(grid, N, target, current_sum, x, y + 1) def enchanted_forest(test_cases): results = [] for test in test_cases: N, target, grid = test if can_collect_mana(grid, N, target): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: if __name__ == \\"__main__\\": test_cases_input = [ (4, 14, [ [5, 3, 2, 1], [1, 2, 3, 4], [1, 1, 1, 1], [4, 1, 2, 1] ]), (4, 10, [ [5, 3, 2, 1], [1, 2, 3, 4], [1, 1, 1, 1], [4, 1, 2, 1] ]) ] print(enchanted_forest(test_cases_input))"},{"question":"You are given two integers, `start` and `end`, and a list of integers. Write a function that filters the list, keeping only the integers that fall within the inclusive range defined by `start` and `end`. The function should return the filtered list, sorted in ascending order. Examples ```python filter_and_sort([3, 8, 1, 4, 2, 9], 2, 5) ==> [2, 3, 4] filter_and_sort([7, 6, 5, 10, 1], 5, 10) ==> [5, 6, 7, 10] filter_and_sort([15, 25, 5, 20, 10], 12, 22) ==> [15, 20] filter_and_sort([25, 30, 45, 50, 55], 30, 40) ==> [30] ```","solution":"def filter_and_sort(nums, start, end): Filters the input list \'nums\' to only include numbers within the inclusive range [start, end], and returns the sorted list of these numbers. filtered_nums = [num for num in nums if start <= num <= end] return sorted(filtered_nums)"},{"question":"Given a string composed of \'A\' and \'B\' characters, you are required to make the string alternating (i.e., no two consecutive characters should be the same). To achieve this, you can change any character to either \'A\' or \'B\'. Your goal is to determine the minimum number of changes needed to convert the given string into an alternating string. # Input Format: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string S of \'A\' and \'B\' characters. # Output Format: For each test case, print the minimum number of changes required to make the string alternating. # Constraints: - 1 ≤ T ≤ 10 - 1 ≤ |S| ≤ 10^5 # Sample Input: ``` 3 AAB ABB ABAB ``` # Sample Output: ``` 1 1 0 ``` # Explanation: 1. For the string \\"AAB\\", changing the second character to \'B\' results in \\"ABA\\". Thus, 1 change is needed. 2. For the string \\"ABB\\", changing the third character to \'A\' results in \\"ABA\\". Thus, 1 change is needed. 3. For the string \\"ABAB\\", no changes are needed as it is already alternating. Thus, 0 changes are needed.","solution":"def min_changes_to_alternating(T, strings): results = [] for S in strings: changes_1 = 0 # Assume starting with \'A\' changes_2 = 0 # Assume starting with \'B\' for i, c in enumerate(S): if i % 2 == 0: # Even index if c != \'A\': changes_1 += 1 if c != \'B\': changes_2 += 1 else: # Odd index if c != \'B\': changes_1 += 1 if c != \'A\': changes_2 += 1 results.append(min(changes_1, changes_2)) return results"},{"question":"Given a binary tree, find the sum of all left leaves in the tree. A leaf is a node with no children. A left leaf is a node that is a leaf and is a left child of its parent. Example 1: Input: 3 / 9 20 / 15 7 Output: 24 Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively. Their sum is 9 + 15 = 24. Example 2: Input: 1 / 2 3 / 4 5 Output: 4 Explanation: There is only one left leaf in the binary tree, with a value of 4. Note: The number of nodes in the tree is in the range [1, 1000]. The value of each node is in the range [-1000, 1000].","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sumOfLeftLeaves(root: TreeNode) -> int: Returns the sum of all left leaves in the binary tree. if not root: return 0 def is_leaf(node): return node and not node.left and not node.right def dfs(node): if not node: return 0 sum_left_leaves = 0 if node.left and is_leaf(node.left): sum_left_leaves += node.left.val sum_left_leaves += dfs(node.left) sum_left_leaves += dfs(node.right) return sum_left_leaves return dfs(root)"},{"question":"Create a program that determines the longest sequence of consecutive integers that can be found in an unsorted list. Your task is to write a function that, given an unsorted list of integers, returns the length of the longest sequence of consecutive integers. Input The input is a single line that contains space-separated integers representing the list of integers. The list can have between 1 and 10^5 elements, and each element can be between -10^9 and 10^9. Output Print a single integer representing the length of the longest sequence of consecutive integers. Example Input 100 4 200 1 3 2 Output 4 Explanation The longest sequence of consecutive integers in the input list is [1, 2, 3, 4], and its length is 4.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest sequence of consecutive integers in an unsorted list. :param nums: List of integers :type nums: List[int] :return: Length of the longest sequence of consecutive integers :rtype: int if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: # Only check for the start of a sequence if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given a list of names and their respective ages in the format: \\"Name Age\\". You need to sort the list of names based on their ages in ascending order. If two names have the same age, they should remain in the same order as they appeared in the input list. Write a function that takes a list of strings where each string contains a name followed by an age, and returns a list of names sorted by age. Input Format: - The first line will contain a single integer n, the number of names and ages. - The next n lines will each contain a string in the format \\"Name Age\\". Output Format: - Print the sorted names, each on a new line. Constraints: - 1 ≤ n ≤ 100 - Ages will be positive integers less than 150. - Names will be non-empty strings and contain no spaces. Example Input: ``` 4 Alice 30 Bob 25 Charlie 25 David 35 ``` Example Output: ``` Bob Charlie Alice David ``` Explanation: - Bob and Charlie are printed first because their age is the smallest (25), and they retain the order in which they appeared in the input. Next is Alice with age 30, followed by David with age 35.","solution":"def sort_names_by_age(n, name_age_list): Sorts a list of names by their respective ages in ascending order. If two names have the same age, they remain in the same order as they appeared in the input list. Parameters: n (int): The number of names and ages. name_age_list (list): A list of strings, each containing a name and an age. Returns: list: A list of names sorted by age. # Parse the input to create a list of tuples (name, age) name_age_tuples = [] for entry in name_age_list: name, age = entry.rsplit(maxsplit=1) name_age_tuples.append((name, int(age))) # Sort the list of tuples by age sorted_name_age_tuples = sorted(name_age_tuples, key=lambda x: x[1]) # Extract the sorted names sorted_names = [name for name, age in sorted_name_age_tuples] return sorted_names"},{"question":"**Problem Statement:** Hiking Alex\'s Homecoming Alex loves hiking and often goes on long weekend trips into the mountains. He has recorded the altitude at each point along his hike. To better understand his trips, Alex wants to analyze the altitude data by segmenting his hike into individual peaks. A peak is defined as any point that is higher than the points immediately before and after it. Given an array of integers representing the altitude at each point of the hike, help Alex identify all the peaks in his hike. # Input - The first line contains an integer n (3 ≤ n ≤ 100), the number of points in Alex\'s hike. - The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) representing the altitude at each point. # Output - Print the indices of all the peaks (1-based index). If there are multiple peaks, print them in ascending order. If no peaks are found, print `No peaks`. # Examples Input ``` 5 1 3 2 5 4 ``` Output ``` 2 4 ``` Input ``` 4 1 1 1 1 ``` Output ``` No peaks ``` # Note - In the first example, 3 (at index 2) and 5 (at index 4) are peaks as they are higher than their immediate neighbors. - In the second example, there are no peaks since no point is higher than its immediate neighbors. Your task is to write a function that, given the length of the hike and the altitude at each point, returns the indices of all peaks.","solution":"def find_peaks(n, altitude): peaks = [] for i in range(1, n - 1): if altitude[i] > altitude[i - 1] and altitude[i] > altitude[i + 1]: peaks.append(i + 1) # Use 1-based index if not peaks: return \\"No peaks\\" else: return \\" \\".join(map(str, peaks)) # Function that takes input in the required format and outputs the result def hiking_alex_homecoming(n, altitudes): return find_peaks(n, altitudes)"},{"question":"# Given a list of integers, find all unique triplets that sum up to zero. **-----Input-----** The first line of the input contains an integer n (0 ≤ n ≤ 100) — the number of integers in the list. The second line contains n space-separated integers, each between -1000 and 1000. **-----Output-----** Print all unique triplets (in any order) that sum up to zero. Each triplet should be printed on a new line, with the three integers separated by spaces. If there are no such triplets, print nothing. **-----Examples-----** Input 6 -1 0 1 2 -1 -4 Output -1 -1 2 -1 0 1 Input 5 0 0 0 0 0 Output 0 0 0 **-----Note-----** In the first sample: - The unique triplets are (-1, -1, 2) and (-1, 0, 1). In the second sample: - The only triplet is (0, 0, 0), considering all elements sum up to zero.","solution":"def three_sum(nums): Finds all unique triplets in the list that sum up to zero. nums.sort() triplets = set() for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i-1]: continue left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: triplets.add((nums[i], nums[left], nums[right])) left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return triplets"},{"question":"There are n cities connected by m roads. Each road connects two different cities with a certain travel time. You need to find the shortest travel time needed to go from one specific city to another. You are given q queries. Each query contains two cities, and you have to find the shortest travel time between them. If there is no such path, output -1. Your task is to write the shortest travel time for each query. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 100) — the number of test cases. The description of the test cases follows. Each test case starts with two integers n and m (1 leq n,m leq 1000) — the number of cities and the number of roads, respectively. The next m lines each contain three integers u, v, and w (1 leq u,v leq n, 1 leq w leq 10^6) — a road between city u and city v with travel time w. It is guaranteed that each pair of cities is connected by at most one road. Then, an integer q (1 leq q leq 1000) — the number of queries. The next q lines each contain two integers x and y (1 leq x,y leq n) — the cities for which you need to find the shortest travel time. -----Output----- For each query in each test case, output a single integer — the shortest travel time between the cities x and y. If there is no path between these cities, output -1. -----Examples----- Input 1 4 4 1 2 1 2 3 1 1 3 4 3 4 1 2 1 4 2 4 Output 3 2 -----Note----- In the example, there are 4 cities and 4 roads. The roads are: - 1 to 2 with travel time 1 - 2 to 3 with travel time 1 - 1 to 3 with travel time 4 - 3 to 4 with travel time 1 The queries are: - From city 1 to city 4: The shortest path is 1->2->3->4 with a total travel time of 3. - From city 2 to city 4: The shortest path is 2->3->4 with a total travel time of 2.","solution":"import heapq def dijkstra(n, graph, start): Implements Dijkstra\'s algorithm to find the shortest paths from the start node to all other nodes. Args: n -- number of cities graph -- dictionary containing adjacency list of the graph start -- starting node Returns: A list where the value at index i represents the shortest distance from the start node to node i. distances = [float(\'inf\')] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def solve(t, test_cases): results = [] for case in test_cases: n, m, roads, q, queries = case graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Assuming undirected graph for x, y in queries: distances = dijkstra(n, graph, x) shortest_path = distances[y] if shortest_path == float(\'inf\'): results.append(-1) else: results.append(shortest_path) return results"},{"question":"Given a sequence of integers, your task is to efficiently process a series of operations on the sequence. Each operation is one of the following three types: 1. Add_Query(l, r, v) — Add v to all elements in the subarray arr[l...r]. 2. Max_Query(l, r) — Output the maximum value of the elements in the subarray arr[l...r]. 3. Set_Query(l, r, v) — Set all elements in the subarray arr[l...r] to v. Write a program that can efficiently process the given operations. -----Input----- The first line contains two integers n and q (1 le n le 10^5, 1 le q le 10^5) — the length of the sequence and the number of operations respectively. The second line contains n integers denoting the initial values of the sequence, arr[1], arr[2], ..., arr[n] (0 le arr[i] le 10^9). Each of the next q lines contains an operation in one of the following formats: - \\"1 l r v\\" (1 le l le r le n, -10^9 le v le 10^9) — Add_Query(l, r, v) - \\"2 l r\\" (1 le l le r le n) — Max_Query(l, r) - \\"3 l r v\\" (1 le l le r le n, -10^9 le v le 10^9) — Set_Query(l, r, v) It is guaranteed that there is at least one Max_Query operation among the q operations. -----Output----- For each Max_Query operation, output the maximum value in the corresponding subarray. -----Examples----- Input 5 6 1 3 5 7 9 1 1 3 4 2 1 5 3 2 4 0 2 1 5 1 3 5 -2 2 1 5 Output 13 9 7 Explanation: Initially, the sequence is {1, 3, 5, 7, 9}. - After the first operation (1 1 3 4), the sequence becomes {5, 7, 9, 7, 9}. - The maximum value in the entire sequence is 13. - After the third operation (3 2 4 0), the sequence becomes {5, 0, 0, 0, 9}. - The maximum value in the entire sequence is 9. - After the fifth operation (1 3 5 -2), the sequence becomes {5, 0, -2, -2, 7}. - The maximum value in the entire sequence is 7.","solution":"class SegmentTree: def __init__(self, arr): self.n = len(arr) self.tree = [0] * (self.n * 4) self.lazy = [0] * (self.n * 4) self.lazy_set = [None] * (self.n * 4) self.build(0, 0, self.n - 1, arr) def build(self, node, start, end, arr): if start == end: self.tree[node] = arr[start] else: mid = (start + end) // 2 self.build(node * 2 + 1, start, mid, arr) self.build(node * 2 + 2, mid + 1, end, arr) self.tree[node] = max(self.tree[node * 2 + 1], self.tree[node * 2 + 2]) def push(self, node, start, end): if self.lazy_set[node] is not None: self.tree[node] = self.lazy_set[node] if start != end: self.lazy_set[node * 2 + 1] = self.lazy_set[node] self.lazy_set[node * 2 + 2] = self.lazy_set[node] self.lazy[node * 2 + 1] = 0 self.lazy[node * 2 + 2] = 0 self.lazy_set[node] = None if self.lazy[node] != 0: self.tree[node] += self.lazy[node] if start != end: if self.lazy_set[node * 2 + 1] is not None: self.lazy_set[node * 2 + 1] += self.lazy[node] else: self.lazy[node * 2 + 1] += self.lazy[node] if self.lazy_set[node * 2 + 2] is not None: self.lazy_set[node * 2 + 2] += self.lazy[node] else: self.lazy[node * 2 + 2] += self.lazy[node] self.lazy[node] = 0 def update_add(self, l, r, val, node=0, start=0, end=None): if end is None: end = self.n - 1 self.push(node, start, end) if start > end or start > r or end < l: return if start >= l and end <= r: self.lazy[node] += val self.push(node, start, end) else: mid = (start + end) // 2 self.update_add(l, r, val, node * 2 + 1, start, mid) self.update_add(l, r, val, node * 2 + 2, mid + 1, end) self.tree[node] = max(self.tree[node * 2 + 1], self.tree[node * 2 + 2]) def update_set(self, l, r, val, node=0, start=0, end=None): if end is None: end = self.n - 1 self.push(node, start, end) if start > end or start > r or end < l: return if start >= l and end <= r: self.lazy_set[node] = val self.push(node, start, end) else: mid = (start + end) // 2 self.update_set(l, r, val, node * 2 + 1, start, mid) self.update_set(l, r, val, node * 2 + 2, mid + 1, end) self.tree[node] = max(self.tree[node * 2 + 1], self.tree[node * 2 + 2]) def query_max(self, l, r, node=0, start=0, end=None): if end is None: end = self.n - 1 self.push(node, start, end) if start > end or start > r or end < l: return -float(\'inf\') if start >= l and end <= r: return self.tree[node] mid = (start + end) // 2 left_query = self.query_max(l, r, node * 2 + 1, start, mid) right_query = self.query_max(l, r, node * 2 + 2, mid + 1, end) return max(left_query, right_query) def process_operations(n, arr, operations): seg_tree = SegmentTree(arr) results = [] for op in operations: if op[0] == 1: _, l, r, v = op seg_tree.update_add(l - 1, r - 1, v) elif op[0] == 2: _, l, r = op results.append(seg_tree.query_max(l - 1, r - 1)) elif op[0] == 3: _, l, r, v = op seg_tree.update_set(l - 1, r - 1, v) return results"},{"question":"You are given a road network represented as an undirected graph with n cities and m roads. Each road connects two cities and has a positive length. Your task is to determine if there exists a subset of roads such that each city is connected to every other city (the graph is connected) and the total length of the roads in the subset is minimized. In other words, you need to compute the Minimum Spanning Tree (MST) of the graph. -----Input----- The first line of the input contains two integers n and m (1 leq n leq 10^5, 0 leq m leq 2 cdot 10^5) — the number of cities and the number of roads, respectively. The next m lines describe the roads in the format u v w, where u and v (1 leq u, v leq n) are the cities connected by this road and w (1 leq w leq 10^9) is the length of the road. It is guaranteed that the graph is connected. -----Output----- Print the minimum possible total length of the roads in the MST. If there are no roads, output 0. -----Examples----- Input 4 5 1 2 3 1 3 4 4 2 6 4 3 5 3 2 2 Output 10 Input 3 3 1 2 1 2 3 2 1 3 3 Output 3 -----Note----- In the first example, one possible MST consists of roads with lengths 3, 4, and 3, which connect all cities with a total length of 10. In the second example, one possible MST consists of roads with lengths 1 and 2, which connect all cities with a total length of 3.","solution":"def kruskal(n, edges): Calculate the minimum spanning tree length using Kruskal\'s algorithm. Parameters: n (int): the number of cities (nodes) edges (list of tuples): each tuple consists of (u, v, w) representing a road from city u to city v with length w Returns: int: the total length of the roads in the MST # Sort edges by weight edges.sort(key=lambda x: x[2]) # Union-Find (Disjoint Set Union) helper functions parent = list(range(n)) rank = [0] * n def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 # Kruskal\'s algorithm to find MST mst_weight = 0 for u, v, w in edges: if find(u - 1) != find(v - 1): # Convert to 0-indexed for union-find union(u - 1, v - 1) mst_weight += w return mst_weight"},{"question":"You are given an integer n and an array of integers a of length n. Your task is to compute the maximum length of a contiguous subarray with distinct elements in a. # Input: The first line of input contains an integer n (1 leq n leq 10^5). The second line of input contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^5), representing the elements of the array a. # Output: Output a single integer representing the maximum length of a contiguous subarray with distinct elements. # Examples: Example 1: Input: ``` 5 1 2 1 3 4 ``` Output: ``` 4 ``` Explanation: The longest contiguous subarray with distinct elements is [2, 1, 3, 4]. Example 2: Input: ``` 3 1 2 2 ``` Output: ``` 2 ``` Explanation: The longest contiguous subarray with distinct elements is either [1, 2] or [2]. Example 3: Input: ``` 7 1 2 3 4 1 2 5 ``` Output: ``` 5 ``` Explanation: The longest contiguous subarray with distinct elements is [4, 1, 2, 5].","solution":"def max_length_of_distinct_subarray(n, a): Returns the maximum length of a contiguous subarray with distinct elements. seen = {} max_len = 0 start = 0 for end in range(n): if a[end] in seen: start = max(start, seen[a[end]] + 1) seen[a[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"A company stores important data in a sequence of integers and wants to compress it without losing any information. They have decided to use a simple run-length encoding algorithm. In run-length encoding, consecutive identical elements in the sequence are replaced with a pair (element, count), where \'element\' is the value of the integer, and \'count\' is the number of times it is repeated consecutively. Write a function that takes a sequence of integers as input and returns its run-length encoded form as a list of tuples. -----Input----- - An integer ( n ) ((1 leq n leq 10^5)) representing the length of the sequence. - A list of ( n ) integers ( a_1, a_2, dots, a_n ) ((1 leq a_i leq 10^9)). -----Output----- - A list of tuples where each tuple represents the run-length encoded form of the input sequence. -----Examples----- Input 10 1 1 1 2 2 3 3 3 3 4 Output [(1, 3), (2, 2), (3, 4), (4, 1)] Input 7 5 5 5 5 5 5 5 Output [(5, 7)] Input 6 1 2 3 4 5 6 Output [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1)] -----Notes----- - The function should compress the sequence even if there is only one occurrence of each element. - Ensure your solution handles large input sizes efficiently.","solution":"def run_length_encode(n, sequence): Returns the run-length encoded form of the sequence as a list of tuples. Parameters: n (int): The length of the sequence. sequence (list of int): The sequence of integers. Returns: list of tuples: The run-length encoded form of the sequence. if n == 0: return [] encoded = [] current_elem = sequence[0] count = 1 for i in range(1, n): if sequence[i] == current_elem: count += 1 else: encoded.append((current_elem, count)) current_elem = sequence[i] count = 1 # Append the last run encoded.append((current_elem, count)) return encoded"},{"question":"You are working for a company that wants to create a new game. In this game, players can create, move, and delete entities on a grid. Each entity is represented by a unique ID and a set of coordinates on the grid. The grid has dimensions G times G with coordinates ranging from (0, 0) to (G-1, G-1). The following operations are allowed in the game: 1. Create an entity with a unique ID at a specific coordinate. 2. Move an entity to a new coordinate. 3. Delete an entity by its ID. 4. Check whether a specific coordinate is occupied by an entity. 5. Retrieve the coordinates of an entity by its ID. Your task is to write a program that processes a series of operations on the grid and outputs the results of the \\"check\\" and \\"retrieve\\" operations. **Input** The input consists of multiple lines. The first line contains the integer G (1 leq G leq 10000), the dimensions of the grid. Each subsequent line contains one of the following operations: - `CREATE id x y`: Create an entity with unique ID `id` at coordinate (x, y)`. - `MOVE id x y`: Move the entity with ID `id` to coordinate (x, y)`. - `DELETE id`: Delete the entity with ID `id`. - `CHECK x y`: Check if the coordinate (x, y) is occupied by any entity. Print \\"Yes\\" if occupied, otherwise print \\"No\\". - `RETRIEVE id`: Retrieve the coordinates of the entity with ID `id`. Print the coordinates `x` and `y` if the entity exists, otherwise print \\"Not found\\". The `id` of each entity is unique and is a positive integer. The `x` and `y` coordinates are integers within the grid dimensions 0 leq x, y < G. **Output** For each `CHECK` operation, print \\"Yes\\" or \\"No\\". For each `RETRIEVE` operation, print the coordinates `x` and `y` or \\"Not found\\". **Example** Input: ``` 10 CREATE 1 2 3 CREATE 2 4 5 MOVE 1 6 7 CHECK 2 3 CHECK 6 7 RETRIEVE 1 RETRIEVE 3 DELETE 1 CHECK 6 7 RETRIEVE 1 ``` Output: ``` No Yes 6 7 Not found No Not found ```","solution":"class GridGame: def __init__(self, G): self.G = G self.entities = {} def create_entity(self, id, x, y): if 0 <= x < self.G and 0 <= y < self.G: self.entities[id] = (x, y) def move_entity(self, id, x, y): if id in self.entities and 0 <= x < self.G and 0 <= y < self.G: self.entities[id] = (x, y) def delete_entity(self, id): if id in self.entities: del self.entities[id] def check_occupied(self, x, y): return any((ex, ey) == (x, y) for ex, ey in self.entities.values()) def retrieve_coordinates(self, id): return self.entities.get(id, None) def process_commands(G, commands): game = GridGame(G) results = [] for command in commands: parts = command.split() if parts[0] == \\"CREATE\\": _, id, x, y = parts game.create_entity(int(id), int(x), int(y)) elif parts[0] == \\"MOVE\\": _, id, x, y = parts game.move_entity(int(id), int(x), int(y)) elif parts[0] == \\"DELETE\\": _, id = parts game.delete_entity(int(id)) elif parts[0] == \\"CHECK\\": _, x, y = parts result = \\"Yes\\" if game.check_occupied(int(x), int(y)) else \\"No\\" results.append(result) elif parts[0] == \\"RETRIEVE\\": _, id = parts coords = game.retrieve_coordinates(int(id)) if coords: results.append(f\\"{coords[0]} {coords[1]}\\") else: results.append(\\"Not found\\") return results"},{"question":"Problem You are given a rectangular grid with N rows and M columns. Each cell in the grid contains a positive integer. You want to find the number of distinct path sums when travelling from the top-left corner (cell (1,1)) to the bottom-right corner (cell (N,M)). You can only move right or down at any point in time. A path sum is defined as the sum of all cell values in a specific path from (1,1) to (N,M). For example, consider the following 3x3 grid: ``` 1 2 3 4 5 6 7 8 9 ``` The possible path sums are: * 1 + 2 + 3 + 6 + 9 = 21 * 1 + 2 + 5 + 6 + 9 = 23 * 1 + 2 + 5 + 8 + 9 = 25 * 1 + 4 + 5 + 8 + 9 = 27 * 1 + 4 + 5 + 6 + 9 = 25 * 1 + 4 + 7 + 8 + 9 = 29 There are 5 distinct path sums in this grid: 21, 23, 25, 27, and 29. Input The input consists of: * The first line contains two integers, N and M (1 ≤ N, M ≤ 50), representing the number of rows and columns of the grid respectively. * The next N lines each contain M integers, representing the cell values of the grid. The value of each cell is between 1 and 1000. Output Output the number of distinct path sums from the top-left corner to the bottom-right corner. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 5 Input 2 2 1 2 3 4 Output 2","solution":"def distinct_path_sums(grid): Returns the number of distinct path sums from the top-left to the bottom-right of the grid. N = len(grid) M = len(grid[0]) from collections import defaultdict dp = defaultdict(set) dp[(0, 0)].add(grid[0][0]) for r in range(N): for c in range(M): if r > 0: for s in dp[(r-1, c)]: dp[(r, c)].add(s + grid[r][c]) if c > 0: for s in dp[(r, c-1)]: dp[(r, c)].add(s + grid[r][c]) return len(dp[(N-1, M-1)]) # Function to read the input, process and return number of distinct path sums def process_input_return_distinct_path_sums(N, M, grid_values): grid = [] for i in range(N): grid.append(list(map(int, grid_values[i]))) return distinct_path_sums(grid)"},{"question":"You are given an array of integers `arr` and should process `q` queries. Each query is described by two 1-based indices `l_i` and `r_i`. It means that you should find the maximum value within the subarray `arr[l_i ... r_i]` for each of the given queries. For example, if the array `arr` is `[1, 3, 4, 8, 6]` and the query is `l_1 = 2, r_1 = 4`, then the answer to that query would be `8` because the maximum value in the subarray `[3, 4, 8]` is `8`. ---Input--- The first line of the input contains an integer `n` (1 ≤ n ≤ 100,000) which represents the number of elements in the array `arr`. The second line contains `n` space-separated integers representing the elements of array `arr` (-10^6 ≤ `arr[i]` ≤ 10^6). The third line contains a single integer `q` (1 ≤ q ≤ 100,000) — the number of queries. The i-th of the next `q` lines contains two integers `l_i` and `r_i` (1 ≤ `l_i` ≤ `r_i` ≤ n) — the description of i-th query. ---Output--- Print `q` lines. Each line should contain the maximum value found in the respective subarray `arr[l_i ... r_i]`. ---Examples--- Input 5 1 3 4 8 6 3 1 3 2 4 1 5 Output 4 8 8 ---Note--- In the first query, the subarray is [1, 3, 4] and the maximum value is 4. In the second query, the subarray is [3, 4, 8] and the maximum value is 8. In the third query, the subarray is [1, 3, 4, 8, 6] and the maximum value is 8.","solution":"def max_in_subarrays(arr, queries): Returns the maximum value within each subarray defined by queries. Parameters: arr (list): The list of integers. queries (list of tuple): List of (l_i, r_i) 1-based index tuples. Returns: list: List of maximum values for each subarray defined by the queries. results = [] for l_i, r_i in queries: results.append(max(arr[l_i-1:r_i])) return results"},{"question":"Write a function to determine if a given string of parentheses is balanced. A string containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is considered balanced if: - Each opening bracket has a corresponding closing bracket of the same type. - Brackets close in the correct order, meaning \'(\' closes with \')\', \'{\' closes with \'}\', and \'[\' closes with \']\'. - A closing bracket does not close a preceding opening of a different type. The function should return `True` if the string is balanced, and `False` otherwise. # Input - An integer `n` (1 ≤ n ≤ 10^5), the length of the string. - A string of length `n`, consisting only of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. # Output - A single boolean value: `True` if the string is balanced, otherwise `False`. # Example Sample Input 1 ``` 6 {[()]} ``` Sample Output 1 ``` True ``` Sample Input 2 ``` 5 {[(]} ``` Sample Output 2 ``` False ``` # Note In the first sample, each bracket has a corresponding opener and is closed in the correct order. In the second sample, the expression is not balanced due to the order of the brackets.","solution":"def is_balanced(n: int, s: str) -> bool: Determine if the given string of parentheses is balanced. Parameters: n (int): The length of the string s. s (str): A string consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: bool: True if the string is balanced, False otherwise. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket: if not stack or stack.pop() != matching_bracket[char]: return False return not stack"},{"question":"You are given an undirected graph with n nodes and m edges. Your task is to determine if the graph contains a cycle. A cycle is a path that starts and ends at the same node with all other nodes on the path being distinct. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 leq t leq 100). Description of the test cases follows. The first line of each test case contains two integers n and m (2 leq n leq 100, 1 leq m leq n(n-1)/2) — the number of nodes and the number of edges in the graph. The next m lines contain two integers u and v (1 leq u, v leq n) denoting an undirected edge between node u and node v. -----Output----- For each test case, print \\"YES\\" if the graph contains a cycle, otherwise print \\"NO\\". -----Examples----- Input 3 3 3 1 2 2 3 3 1 4 2 1 2 1 3 5 4 1 2 1 3 2 4 2 5 Output YES NO NO -----Note----- In the first example, the edges form a triangle, which is a cycle: 1 to 2 to 3 to 1. Therefore, the graph contains a cycle. In the second example, there are no cycles as only two edges are present and no path returns to its starting point. In the third example, each node connects in a branching tree structure without forming any cycles. Therefore, no cycle is present in the graph.","solution":"def contains_cycle(n, edges): from collections import defaultdict def dfs(node, parent): visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: if dfs(neighbor, node): return True elif neighbor != parent: return True return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) for i in range(1, n + 1): if not visited[i]: if dfs(i, -1): return \\"YES\\" return \\"NO\\" def check_cycles_in_graphs(test_cases): results = [] for case in test_cases: n, m, edges = case results.append(contains_cycle(n, edges)) return results"},{"question":"Sarah is a big fan of the newly released series \\"Mystery Algorithms\\". She especially loves decoding the hidden messages within each episode. Recently, during one of her decoding sessions, she stumbled upon a string T consisting of lowercase letters and a crucial snippet she needs to find. The snippet is a sequence of alternating \'a\'s and \'b\'s, starting with \'a\', and is exactly 2000 characters long. Due to the length and complexity of the task, she needs your help to determine if this sequence exists within the given string T. The sequence \\"ab\\" repeated 1000 times would look like this: \\"abababab...abab\\" (2000 characters total). Your task is to write a program that helps Sarah determine if the specific 2000 characters long sequence of alternating \'a\'s and \'b\'s starting with \'a\' exists within the string T. Input: The only line of input consists of a string T made of lower case english alphabets. Output: Print \\"Sequence Found\\" (without quotes), if T contains the 2000 character long sequence of alternating \'a\'s and \'b\'s starting with \'a\', otherwise print \\"Sequence Not Found\\" (without quotes). Constraints: 1 ≤ |T| ≤ 10^6 SAMPLE INPUT aaabababababababababbbbababababababababababababababababab SAMPLE OUTPUT Sequence Found","solution":"def find_alternating_sequence(T): Determines if the 2000 characters long sequence of alternating \'a\'s and \'b\'s starting with \'a\' exists within the string T. target_sequence = \\"ab\\" * 1000 if target_sequence in T: return \\"Sequence Found\\" else: return \\"Sequence Not Found\\""},{"question":"Arjun is a software developer at a tech company. He is given the task to handle a series of requests in an efficient manner. Each request can either be an insertion of a number into a data structure or a query to find the kth smallest number in the current data structure. Arjun needs to implement a system that can handle these requests efficiently. Input Format The first line contains an integer Q denoting the number of queries. The following Q lines represent the queries that can be of two types: 1. \\"1 x\\" - Insert the number x into the data structure. 2. \\"2 k\\" - Output the kth smallest number in the data structure. Output Format For each query of type \\"2 k\\", output the kth smallest number in the data structure on a new line. Constraints 1 ≤ Q ≤ 100000 1 ≤ x ≤ 1000000 1 ≤ k ≤ current size of the data structure SAMPLE INPUT 6 1 5 1 3 2 1 1 10 2 2 2 3 SAMPLE OUTPUT 3 5 10 Explanation After the first query, the data structure contains: 5 After the second query, the data structure contains: 3, 5 The answer to the third query is 3 (the 1st smallest number). After the fourth query, the data structure contains: 3, 5, 10 The answer to the fifth query is 5 (the 2nd smallest number). The answer to the sixth query is 10 (the 3rd smallest number).","solution":"import bisect class RequestHandler: def __init__(self): self.data = [] def handle_request(self, query): query_type, value = query.split() if query_type == \\"1\\": bisect.insort(self.data, int(value)) elif query_type == \\"2\\": kth_smallest = self.data[int(value) - 1] print(kth_smallest) return kth_smallest def process_queries(queries): handler = RequestHandler() results = [] for query in queries: if query.startswith(\\"2\\"): result = handler.handle_request(query) if result is not None: results.append(result) else: handler.handle_request(query) return results"},{"question":"A well-known local bakery has decided to organize a harvest festival where they will bake different types of cakes. Each cake is prepared using specific ingredients in defined quantities. The bakery wants to ensure they maximize the variety of cakes they produce while utilizing their ingredients as efficiently as possible. The bakery uses the following rule: each type of cake can only be baked in whole, that is, partial cakes are not allowed. Given the available quantity of each ingredient and the required quantity for each type of cake, the objective is to determine the maximum number of cakes that can be baked without running out of any ingredient. You are tasked with writing a program to help the bakery determine the maximum number of different types of cakes it can bake. # Input The input consists of several datasets. Each dataset begins with an integer `m` (1 ≤ m ≤ 1000) which represents the number of available types of cakes. Following `m` are `m` lines, each representing a different type of cake and containing: - The number of different ingredients `k` required for this type of cake (1 ≤ k ≤ 10). - Followed by `k` integers representing the required quantities of these ingredients (1 ≤ quantity ≤ 100) in the respective order (the types of ingredients are also numbered 1 through 10). After `m` lines, another line containing `10` integers follows. Each of these integers represents the available quantity of each ingredient type. The datasets are concluded by a line consisting of a single `0`. # Output For each dataset, print the maximum number of different types of cakes that can be baked on a single line. Output the results in the same order as the datasets are given. # Example Input: ``` 2 2 1 2 3 2 3 4 8 4 0 6 2 0 0 0 0 0 3 1 2 2 1 2 2 4 6 10 5 10 15 10 5 10 15 10 5 0 ``` Output: ``` 1 2 ``` # Note: - In the first dataset, the bakery can bake one type of cake either using 1 unit of ingredient type 1 and 2 units of ingredient type 2 or using the second type of cake which requires 2 units of ingredient type 2, 3 units of ingredient type 3, and 4 units of ingredient type 4. - In the second dataset, they can make one first type cake and one second type cake achieving the maximum total of two different types of cakes.","solution":"def max_variety_of_cakes(datasets): results = [] for data in datasets: m = data[\'number_of_cakes\'] cake_recipes = data[\'cakes\'] available_ingredients = data[\'available_ingredients\'] # Track how many cakes we can bake cakes_baked = 0 for recipe in cake_recipes: quantities_needed = recipe[\'quantities\'] can_bake = True for i in range(len(quantities_needed)): if available_ingredients[i] < quantities_needed[i]: can_bake = False break if can_bake: for i in range(len(quantities_needed)): available_ingredients[i] -= quantities_needed[i] cakes_baked += 1 results.append(cakes_baked) return results"},{"question":"Nina has a sequence of positive integers a1, a2, ..., an. She\'s interested to know if she can select a contiguous subarray from this sequence that sums up to exactly x, or removes exactly one element from this subarray to reach the sum x. Given the list of numbers and the target sum, help Nina determine if such a subarray exists. Input The first line contains two integers n and x (1 ≤ n ≤ 1000, 1 ≤ x ≤ 10^9). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Output Output \\"YES\\" if such a subarray exists, otherwise output \\"NO\\". Examples Input 5 15 1 2 3 8 1 Output YES Input 4 10 1 1 1 1 Output NO Note In the first example, one possible subarray that sums to 15 is [2, 3, 8, 1, 1] with one removal of the first element to achieve the sum. In the second example, there is no contiguous subarray that sums to 10, nor does removing exactly one element from any subarray achieve the sum 10.","solution":"def can_find_subarray(n, x, arr): Determines if there exists a contiguous subarray summing to x or can reach x by removing one element from a subarray. Parameters: n (int): The number of elements in the array x (int): The target sum arr (list): List of integers Returns: str: \\"YES\\" if such a subarray exists, \\"NO\\" otherwise # Using two pointer approach to check for possible sums for i in range(n): current_sum = 0 for j in range(i, n): current_sum += arr[j] if current_sum == x: return \\"YES\\" for k in range(i, j + 1): if current_sum - arr[k] == x: return \\"YES\\" return \\"NO\\""},{"question":"Alice likes to play with arrays and numbers. She recently came across a problem and needs your help. Given an array of n integers, she wants to form a new array where each number in the new array is the product of all the numbers in the original array except the one at the current index. For example, if the input array is [1, 2, 3, 4], the output array should be [24, 12, 8, 6], because: - 24 = 2 * 3 * 4 - 12 = 1 * 3 * 4 - 8 = 1 * 2 * 4 - 6 = 1 * 2 * 3 Note: You are not allowed to use division in your solution. Try to achieve a solution with a time complexity of O(n) and space complexity of O(1) (excluding the output array). Input The first line contains a single integer n (1 ≤ n ≤ 105) — the size of the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 105) — the elements of the array. Output Print n space-separated integers denoting the new array where each element is the product of all the numbers in the array except the one at the corresponding index. Examples Input 4 1 2 3 4 Output 24 12 8 6 Input 3 3 2 1 Output 2 3 6","solution":"def array_product_except_self(nums): Given an array of n integers, returns a new array where each element is the product of all the numbers in the original array except the one at the current index. n = len(nums) result = [1] * n # Calculate the prefix product for each element prefix_product = 1 for i in range(n): result[i] = prefix_product prefix_product *= nums[i] # Calculate the suffix product and multiply it with the prefix product suffix_product = 1 for i in range(n - 1, -1, -1): result[i] *= suffix_product suffix_product *= nums[i] return result # Example usage: # input_array = [1, 2, 3, 4] # print(array_product_except_self(input_array)) # Output: [24, 12, 8, 6]"},{"question":"You are given an undirected graph with N nodes and M edges. Your task is to determine if it is possible to color the graph using exactly two colors such that no two adjacent nodes have the same color. Constraints * 1 ≤ N ≤ 10^3 * 0 ≤ M ≤ N * (N - 1) / 2 * Each edge connects exactly two different nodes. Input Input is given from Standard Input in the following format: N M u1 v1 u2 v2 ... uM vM Output Print \\"Yes\\" if it is possible to color the graph with two colors such that no two adjacent nodes have the same color. Otherwise, print \\"No\\". Examples Input 4 4 1 2 2 3 3 4 4 1 Output Yes Input 3 3 1 2 2 3 3 1 Output No Input 5 4 1 2 2 3 3 4 4 5 Output Yes","solution":"def is_bipartite(N, M, edges): from collections import deque, defaultdict # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Array to store colors of nodes color = [-1] * (N + 1) # Function to check if the graph is bipartite starting from node `start` def bfs(start): queue = deque([start]) color[start] = 0 # Start coloring start node with color 0 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: # If it hasn\'t been colored yet color[neighbor] = 1 - color[node] # Color with alternate color queue.append(neighbor) elif color[neighbor] == color[node]: # If the neighbor has the same color return False return True # Check each component of the graph for i in range(1, N + 1): if color[i] == -1: # If the node hasn\'t been visited yet if not bfs(i): # Check if the component is bipartite return \\"No\\" return \\"Yes\\""},{"question":"Marina loves to collect small souvenir items that are packaged in different colored boxes. She goes to a market where a promotion is running: If a customer buys 10 boxes of the same color, they receive 1 additional box of that color for free. Marina has decided to purchase N boxes in total. Help Marina determine the minimum amount of boxes she needs to buy (considering the promotion) to get at least N boxes in total. -----Constraints----- - 1 ≤ N ≤ 1000 -----Input----- The input is given from Standard Input in the following format: N -----Output----- Print the minimum number of boxes Marina needs to buy to have at least N boxes. -----Sample Input----- 24 -----Sample Output----- 22 By purchasing 22 boxes, Marina will receive 2 additional boxes for free (since 20 boxes will earn her 2 free boxes as per the promotion), making the total 24 boxes. Thus, the answer is 22.","solution":"def minimum_boxes_to_buy(N): Returns the minimum number of boxes Marina needs to buy to have at least N boxes. full_sets = N // 11 remainder = N % 11 if remainder == 0: min_boxes = full_sets * 10 else: min_boxes = full_sets * 10 + remainder return min_boxes"},{"question":"You are given a list of strings, where each string represents a numerical expression. Each expression contains exactly one operation: addition, subtraction, multiplication, or division (e.g., \\"3+2\\", \\"10-4\\", \\"6*7\\", \\"20/4\\"). Your task is to write a computer program that evaluates each expression and replaces it with the result. The results should be provided in the same order as the input. Input The input consists of multiple test cases. The first line of the input file contains an integer T, indicating the number of test cases (1 <= T <= 1000). Each test case starts with an integer N (1 <= N <= 1000), which indicates the number of expressions. The following N lines each contain a single expression in the format: \\"a+b\\", \\"c-d\\", \\"e*f\\", or \\"g/h\\" (where a, b, c, d, e, f, g, h are integers between -1000 and 1000). Output For each test case, your program should output N lines, each containing the result of the expression given in the corresponding input line. The results should be formatted to one decimal place if necessary (e.g., 2.5). Example Sample input: 2 3 3+2 10-4 6*7 4 20/4 5+10 15-3 8*2 Sample output: 5 6 42 5.0 15 12 16","solution":"def evaluate_expression(expression): Evaluate a single arithmetic expression. if \'+\' in expression: a, b = expression.split(\'+\') return float(a) + float(b) elif \'-\' in expression: a, b = expression.split(\'-\') return float(a) - float(b) elif \'*\' in expression: a, b = expression.split(\'*\') return float(a) * float(b) elif \'/\' in expression: a, b = expression.split(\'/\') return float(a) / float(b) def evaluate_expressions(test_cases): Evaluate a list of arithmetic expressions. results = [] for test_case in test_cases: results.append([evaluate_expression(expr) for expr in test_case]) return results"},{"question":"Write a function that takes a list of dictionaries representing different persons, with each dictionary containing the keys: \'name\', \'age\', and \'city\'. Your function should return a string that introduces each person in the format: \\"Name is from City and is Age years old.\\" Examples ```python [{\'name\': \'Alice\', \'age\': 30, \'city\': \'New York\'}] --> \\"Alice is from New York and is 30 years old.\\" [{\'name\': \'Bob\', \'age\': 25, \'city\': \'San Francisco\'}, {\'name\': \'Charlie\', \'age\': 35, \'city\': \'Los Angeles\'}] --> \\"Bob is from San Francisco and is 25 years old. Charlie is from Los Angeles and is 35 years old.\\" ```","solution":"def introduce_persons(persons): Takes a list of dictionaries with keys \'name\', \'age\', and \'city\' and returns a string that introduces each person in the specified format. Parameters: persons (list): List of dictionaries, each representing a person with \'name\', \'age\', and \'city\'. Returns: str: A formatted string introducing each person. introductions = [f\\"{person[\'name\']} is from {person[\'city\']} and is {person[\'age\']} years old.\\" for person in persons] return \\" \\".join(introductions)"},{"question":"In the magical land of Arithmeticia, a string is considered spell-worthy if it can be transformed into a palindrome by removing zero or more characters. A group of wizards is preparing for a great challenge where they need to transform a sequence of strings into spell-worthy strings. As the leading wizard, you are tasked with determining whether each of these strings can be transformed into a palindrome by removing zero or more characters. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each of the following t lines contains a single string s consisting of lowercase English letters only (1 le |s| le 1000) — the string you need to analyze. -----Output----- For each test case, print \\"YES\\" (without quotes) if the string can be transformed into a palindrome by removing zero or more characters, otherwise print \\"NO\\". -----Examples----- Input 3 abca abc aab Output YES NO YES In the first example, the string \\"abca\\" can be transformed into \\"aca\\" or \\"aba\\", both of which are palindromes. In the second example, there is no way to remove characters from \\"abc\\" to make it a palindrome. In the third example, \\"aab\\" can be transformed into \\"aa\\", which is a palindrome.","solution":"def can_be_palindrome(s): Helper function to check if a string can be transformed into a palindrome. def is_palindrome(s): return s == s[::-1] # Check if the string can be reduced to a palindrome n = len(s) i, j = 0, n - 1 while i < j: if s[i] != s[j]: # If characters at i and j are not the same, try skipping one of them return is_palindrome(s[i:j]) or is_palindrome(s[i+1:j+1]) i += 1 j -= 1 return True def check_spell_worthy_strings(t, strings): results = [] for s in strings: if can_be_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a list of integers, calculate the sum of all odd numbers present in the list. If there are no odd numbers, return 0. Input The first line contains an integer n (1 ≤ n ≤ 100), representing the number of integers in the list. The second line contains n integers separated by spaces. Output Print the sum of all odd numbers in the list. If there are no odd numbers, print 0. Examples Input 5 2 4 6 8 10 Output 0 Input 4 1 2 3 4 Output 4","solution":"def sum_of_odds(n, integer_list): Returns the sum of all odd numbers in the integer_list. If there are no odd numbers, returns 0. odd_sum = sum(num for num in integer_list if num % 2 != 0) return odd_sum"},{"question":"We are given an array \'arr\' containing \'n\' integers. The task is to find out whether a single rotation of the array can result in a strictly increasing sequence. A single rotation of an array shifts each of the array\'s elements one unit to the right, with the last element wrapping around to the first position. Write a function `isPossibleToRotate` that takes an integer \'n\' and the integer array \'arr\' as input and returns a boolean value `True` if it is possible to obtain a strictly increasing sequence by a single rotation of the array, otherwise return `False`. Example 1: Input: n = 5 arr = [3, 4, 5, 1, 2] Output: True Explanation: If we rotate the array once, we get [2, 3, 4, 5, 1], which is not strictly increasing. Another rotation results in [1, 2, 3, 4, 5], a strictly increasing sequence. Example 2: Input: n = 4 arr = [1, 3, 2, 4] Output: False Explanation: No single rotation can make the array strictly increasing. Example 3: Input: n = 3 arr = [1, 2, 2] Output: False Explanation: Array contains duplicate elements, thus cannot become a strictly increasing sequence. Your task is to implement the function `isPossibleToRotate(n: int, arr: List[int]) -> bool`. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - 1 <= n <= 10^5 - -10^9 <= arr[i] <= 10^9","solution":"def isPossibleToRotate(n, arr): Return True if it is possible to obtain a strictly increasing sequence by a single rotation of the array, otherwise return False. # Check if the array itself is already strictly increasing is_strictly_increasing = all(arr[i] < arr[i+1] for i in range(n-1)) if is_strictly_increasing: return True # Check for the position where the array would split to become increasing count_decrease_points = 0 split_point = -1 for i in range(1, n): if arr[i] < arr[i - 1]: count_decrease_points += 1 split_point = i # More than one point where the sequence decreases means it\'s not possible with a single rotation if count_decrease_points > 1: return False # A single rotation possible only if the last element of the first segment is less than the first element of the second segment if count_decrease_points == 1 and (split_point == n or arr[-1] < arr[0]): return True return False"},{"question":"Write a function to perform basic spell checking on a paragraph. **Objective:** The goal is to identify and correct basic spelling errors in a given paragraph. Specifically, the function should correct commonly misspelled words using a predefined dictionary of correct word mappings. **Input:** - The function will take a string `paragraph` as input, which contains the text to be spell-checked. - The predefined dictionary `corrections` will be given, where keys are common misspellings and values are the correct words. Example: {\\"recieve\\": \\"receive\\", \\"adress\\": \\"address\\", \\"teh\\": \\"the\\"} **Output:** - The function should return a corrected version of the input paragraph as a string, where all occurrences of misspelled words as per the dictionary are replaced with the correct words. **Constraints:** - The input paragraph can have a maximum length of 1000 characters. - The predefined dictionary will have at most 100 entries. - Punctuation and case should be preserved in the corrected paragraph. **Example:** Input: ```python paragraph = \\"Please recieve the package at your earliest convenience. Ensure the adress is correctly written.\\" corrections = {\\"recieve\\": \\"receive\\", \\"adress\\": \\"address\\", \\"enviroment\\": \\"environment\\", \\"occurance\\": \\"occurrence\\"} ``` Output: ```python corrected_paragraph = \\"Please receive the package at your earliest convenience. Ensure the address is correctly written.\\" ``` **Function Signature:** ```python def spell_check(paragraph: str, corrections: dict) -> str: ... ``` **Explanation:** The function `spell_check` should scan through the input paragraph, identify words that match the keys in the `corrections` dictionary, and replace them with the corresponding correct words. The function should return the modified paragraph as output, with all misspellings corrected according to the given dictionary. Ensure that the function handles punctuation and preserves the case of the input text. Python libraries such as `re` (regular expressions) may be helpful in accurately identifying and replacing whole words while keeping punctuation and case intact. **Example Usage:** ```python paragraph = \\"Please recieve the package at your earliest convenience. Ensure the adress is correctly written.\\" corrections = {\\"recieve\\": \\"receive\\", \\"adress\\": \\"address\\", \\"enviroment\\": \\"environment\\", \\"occurance\\": \\"occurrence\\"} corrected_paragraph = spell_check(paragraph, corrections) print(corrected_paragraph) # Output: \\"Please receive the package at your earliest convenience. Ensure the address is correctly written.\\" ```","solution":"import re def spell_check(paragraph: str, corrections: dict) -> str: Corrects spelling errors in a paragraph based on a predefined dictionary of common misspellings. # Create a regex pattern that matches any of the misspelled words pattern = re.compile(r\'b(\' + \'|\'.join(re.escape(key) for key in corrections.keys()) + r\')b\', re.IGNORECASE) # Define a function to replace each match with the correct word def replace(match): word = match.group() # Check for the correct case format (either all lower, all upper, or capitalized) if word.islower(): return corrections[word.lower()] elif word.isupper(): return corrections[word.lower()].upper() elif word.istitle(): return corrections[word.lower()].capitalize() else: return corrections[word.lower()] # Use the sub method to replace all matches using the replace function corrected_paragraph = pattern.sub(replace, paragraph) return corrected_paragraph"},{"question":"-----Problem----- You are given a list of integers that represents the heights of students standing in a line. Your task is to find the longest subsequence of students such that each student\'s height in the subsequence is strictly greater than the previous student\'s height. -----Input----- You are given a single line of integers separated by spaces, where each integer H_i (1 ≤ H_i ≤ 1000) represents the height of the i-th student in the line. The number of students N (1 ≤ N ≤ 1000) is guaranteed to be at least 1. -----Output----- Output a single integer representing the length of the longest increasing subsequence of students\' heights. -----Examples----- Input 5 1 8 2 6 3 6 9 5 11 Output 6 Input 3 3 3 3 3 Output 1 -----Note----- In the first example, the longest increasing subsequence of heights is [1, 2, 3, 6, 9, 11], which has a length of 6. In the second example, since all students have the same height, the longest increasing subsequence is any single student, which has a length of 1.","solution":"def length_of_lis(heights): Returns the length of the longest increasing subsequence in a list of integers. Args: heights (list of int): List of integers representing the heights of students. Returns: int: Length of the longest increasing subsequence. if not heights: return 0 n = len(heights) lis = [1] * n # Initialize LIS values for all indexes as 1 # Compute optimized LIS values in bottom-up manner for i in range(1, n): for j in range(0, i): if heights[i] > heights[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Pick maximum of all LIS values return max(lis)"},{"question":"You have been hired to optimize a warehouse\'s stock system. The warehouse has different shelves each with a certain amount of weight capacity. The packages in the warehouse can be of various weights and must be carefully placed on the shelves without exceeding the capacity of each shelf. You\'re given the capacities of the shelves and the weights of the packages. Determine if it is possible to arrange all the packages on the shelves without exceeding the capacities of any shelf. If it is possible, output one such arrangement. If there are multiple arrangements, any one of them is acceptable. If it is not possible to arrange the packages, output \\"impossible\\". -----Input----- The first line contains two integers S and P (1 le S, P le 2 cdot 10^5) representing the number of shelves and the number of packages, respectively. The second line contains S integers c_1, c_2, dots, c_S (1 le c_i le 10^9), where c_i is the capacity of the i-th shelf. The third line contains P integers w_1, w_2, dots, w_P (1 le w_i le 10^9), where w_i is the weight of the i-th package. -----Output----- If it is possible to arrange all the packages on the shelves without exceeding the capacities, output \\"possible\\" followed by P integers. The i-th integer represents the shelf where the i-th package is placed. Shelves are 1-indexed. If it is not possible to arrange the packages, output \\"impossible\\". -----Examples----- Sample Input 1: 3 5 10 20 30 5 10 15 5 10 Sample Output 1: possible 1 2 3 1 2 Sample Input 2: 2 4 5 5 10 10 10 10 Sample Output 2: impossible","solution":"def arrange_packages(n_shelves, n_packages, capacities, weights): if sum(weights) > sum(capacities): return \\"impossible\\" # Create shelves with their current capacity used shelves = [(capacities[i], i+1, 0) for i in range(n_shelves)] # (capacity, position, current_weight) shelves.sort() assignment = [-1] * n_packages for i in range(n_packages): # Find the first shelf that can take this package weight placed = False for j in range(n_shelves): if shelves[j][0] >= weights[i]: assignment[i] = shelves[j][1] # Update the shelf information new_capacity = shelves[j][0] - weights[i] shelves[j] = (new_capacity, shelves[j][1], shelves[j][2] + weights[i]) shelves.sort() placed = True break if not placed: return \\"impossible\\" return \\"possible\\", assignment"},{"question":"You are given a directed graph with `n` nodes and `m` edges. Each edge is defined by a triplet `(u, v, w)`, meaning there is a directed edge from node `u` to node `v` with a weight `w`. Your task is to determine the shortest path from a starting node `s` to an ending node `e`. If there is no path from `s` to `e`, output `-1`. -----Input----- The first line of the input contains two integers `n` and `m` (1 le n le 1000, 1 le m le 10000) — the number of nodes and the number of edges in the graph, respectively. The next `m` lines each contain three integers `u`, `v`, and `w` (1 le u, v le n, 1 le w le 100) — an edge from node `u` to node `v` with weight `w`. The last line contains two integers `s` and `e` (1 le s, e le n) — the starting node and the ending node. It is guaranteed that there are no negative weight edges in the graph. -----Output----- Print the length of the shortest path from node `s` to node `e`. If there is no such path, print `-1`. -----Examples----- Input 5 6 1 2 3 1 3 2 3 4 4 4 5 1 2 5 5 3 5 2 1 5 Output 4 Input 4 4 1 2 1 2 3 1 3 4 1 4 2 1 1 4 Output 3 Input 3 2 1 2 5 2 3 5 3 1 Output -1 -----Note----- In the first example, the shortest path from node `1` to node `5` is `1 -> 3 -> 5` with a total weight of `4`. In the second example, the shortest path from node `1` to node `4` is `1 -> 2 -> 3 -> 4` with a total weight of `3`. In the third example, there is no path from node `3` to node `1`, so the output is `-1`.","solution":"import heapq def shortest_path(n, m, edges, s, e): adj = {i: [] for i in range(1, n+1)} for u, v, w in edges: adj[u].append((v, w)) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[s] = 0 priority_queue = [(0, s)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in adj[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[e] if distances[e] != float(\'inf\') else -1"},{"question":"Task Write a function that takes a list of integers and returns a new list where each element is the sum of the digits of the corresponding element in the original list. # Examples ```python sum_of_digits([123, 456, 789]) => [6, 15, 24] sum_of_digits([10, 20, 30]) => [1, 2, 3] sum_of_digits([5, 60, 700]) => [5, 6, 7] ``` # Constraints - The input list will contain at most 1000 integers. - Each integer will be between 0 and 10000 inclusive.","solution":"def sum_of_digits(numbers): Given a list of integers, return a new list where each element is the sum of the digits of the corresponding element in the original list. Parameters: numbers (list of int): A list of integers. Returns: list of int: A list where each element is the sum of the digits of the corresponding element in the original list. def digit_sum(n): return sum(int(digit) for digit in str(n)) return [digit_sum(number) for number in numbers]"},{"question":"Given an array of words where each word is represented as a string, your task is to find the longest concatenated word in the list such that it can be entirely constructed by concatenating the other words from the list. If more than one such longest word exists, return the first one found. If no concatenated word exists, return an empty string. Example 1: Input: words = [\\"cat\\", \\"cats\\", \\"catsdogcats\\", \\"dog\\", \\"dogcatsdog\\", \\"hippopotamuses\\", \\"rat\\", \\"ratcatdogcat\\"] Output: \\"ratcatdogcat\\" Explanation: \\"ratcatdogcat\\" is the longest word that can be constructed by concatenating other words [\\"rat\\", \\"cat\\", \\"dog\\", \\"cat\\"] from the list. Example 2: Input: words = [\\"cat\\", \\"dog\\", \\"catdog\\"] Output: \\"catdog\\" Explanation: \\"catdog\\" can be constructed by concatenating \\"cat\\" and \\"dog\\". Your Task: Complete the function findLongestConcatenatedWord() that receives words as a parameter and returns the longest concatenated word. Expected Time Complexity: O(N * L^2), where N is the number of words and L is the length of the longest word. Expected Auxiliary Space: O(N) Constraints: 1 <= len(words) <= 2000 1 <= len(words[i]) <= 30","solution":"def findLongestConcatenatedWord(words): words_set = set(words) def can_form(word, original_word): if word in words_set and word != original_word: return True for i in range(1, len(word)): prefix, suffix = word[:i], word[i:] if prefix in words_set and suffix != original_word and can_form(suffix, original_word): return True return False words.sort(key=lambda x: len(x), reverse=True) for word in words: if can_form(word, word): return word return \\"\\""},{"question":"Geek has established a new research lab to study virus mutations. In this lab, there are N different types of viruses, each of which can mutate into a more dangerous form after exactly 24 hours. To contain the potential outbreak, Geek must select one virus each day such that no two consecutive days involve dealing with the same virus type. Given the danger levels of each virus in a N x 3 matrix where each row represents the danger level of each virus type A, B, and C for that day, help Geek minimize the total danger level for the next N days. Example 1: Input: N = 3 danger = {{3, 40, 50}, {30, 20, 70}, {20, 50, 10}} Output: 33 Explanation: Day 1: Select virus A with danger level 3. Day 2: Select virus B with danger level 20. Day 3: Select virus A with danger level 10. Total danger level = 3 + 20 + 10 = 33. Your Task: You do not need to read input or print anything. Your task is to complete the function minDanger() which takes N and Nx3 matrix danger[][] as input parameters and returns the minimum total danger level over the next N days. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^{5} 1 ≤ danger[i][j] ≤ 100","solution":"def minDanger(N, danger): if N == 0: return 0 dp = [[0] * 3 for _ in range(N)] dp[0][0] = danger[0][0] dp[0][1] = danger[0][1] dp[0][2] = danger[0][2] for i in range(1, N): dp[i][0] = danger[i][0] + min(dp[i-1][1], dp[i-1][2]) dp[i][1] = danger[i][1] + min(dp[i-1][0], dp[i-1][2]) dp[i][2] = danger[i][2] + min(dp[i-1][0], dp[i-1][1]) return min(dp[N-1][0], dp[N-1][1], dp[N-1][2])"},{"question":"Emma is working on a text processing tool to analyze blocks of text for specific patterns. One of her tasks is to check if a sentence is a palindrome. A sentence is considered a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. For example, the sentence \\"A man, a plan, a canal, Panama!\\" is a palindrome. Emma wants to write a function that evaluates whether a given sentence is a palindrome. Input The input consists of a single string s of length n (1 ≤ n ≤ 200). The string may contain letters, digits, and punctuation marks. Output The program should print \\"True\\" if the given sentence is a palindrome and \\"False\\" otherwise. SAMPLE INPUT A man, a plan, a canal, Panama! SAMPLE OUTPUT True","solution":"import re def is_palindrome(sentence): Evaluates whether a given sentence is a palindrome. Args: sentence (str): The sentence to be evaluated. Returns: bool: True if the sentence is a palindrome, False otherwise. # Use regular expression to keep only alphanumeric characters and convert to lowercase filtered_sentence = re.sub(r\'[^A-Za-z0-9]\', \'\', sentence).lower() # Check if the filtered sentence reads the same forward and backward return filtered_sentence == filtered_sentence[::-1]"},{"question":"A store has a promotional offer where every N-th customer gets a gift. The store keeps a customer counter that starts at 1 with the first customer of the day and increases by 1 with each new customer. You need to write a program that determines if a given customer will receive a gift or not. -----Constraints----- - 1 leq N leq 1000 - 1 leq C leq 10000 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N C where: - N: Integer representing the customer that receives a gift. - C: Integer representing the current customer number. -----Output----- If the current customer will receive a gift, print Yes; otherwise, print No. -----Sample Input----- 5 10 -----Sample Output----- Yes The customer counter starts at 1. This means the 5th customer and every 5th customer thereafter (10th, 15th, 20th, ...) will receive a gift. Since the current customer is number 10, they will receive a gift.","solution":"def will_receive_gift(N, C): Determines if the current customer (C) will receive a gift based on the promotional offer where every N-th customer gets a gift. Parameters: N (int): The interval of customers that receive gifts. C (int): The current customer number. Returns: str: \'Yes\' if the current customer receives a gift, \'No\' otherwise. if C % N == 0: return \'Yes\' return \'No\'"},{"question":"Anna is working with a directed graph consisting of n nodes and m directed edges. Each node i is assigned a value vi (initially all nodes have a value of 0). Anna needs to carry out q operations on this graph, with each operation being one of the following types: * \\"1 x y\\" – add the value of node y to node x; * \\"2 x\\" – output the current value of node x. Given the graph and a series of q operations, Anna needs to process the operations efficiently. Input The first line contains three integers n, m, and q (1 ≤ n, m, q ≤ 200000). Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n), meaning there is a directed edge from node ui to node vi. Each of the next q lines contains an operation of one of the two types described above. It is guaranteed that the following constraints hold for all queries: 1 ≤ x, y ≤ n. Output For each query of type \\"2 x\\", output the current value of node x. Examples Input 5 4 6 1 2 2 3 3 4 4 5 1 2 3 1 3 4 1 5 1 2 3 2 5 2 1 Output 3 1 0 Note Initially, all nodes have a value of 0. After the first operation (\\"1 2 3\\"), we add the value of node 3 (which is 0) to node 2, so the values remain [0, 0, 0, 0, 0]. After the second operation (\\"1 3 4\\"), we add the value of node 4 (which is 0) to node 3, so the values remain [0, 0, 0, 0, 0]. After the third operation (\\"1 5 1\\"), we add the value of node 1 (which is 0) to node 5, so the values remain [0, 0, 0, 0, 0]. The first \\"2 x\\" query outputs the current value of node 3, which is 0. The second \\"2 x\\" query outputs the current value of node 5, which is 0. The third \\"2 x\\" query outputs the current value of node 1, which is 0. However, if node 3 had received an increment of 3 before these operations, the first operation would result in the values being [0, 3, 3, 0, 0], and the second operation would result in the values [0, 3, 7, 0, 0], and so on.","solution":"def process_graph_operations(n, m, q, edges, operations): # Initialize node values values = [0] * n output = [] for op in operations: if op[0] == 1: x = op[1] - 1 y = op[2] - 1 values[x] += values[y] elif op[0] == 2: x = op[1] - 1 output.append(values[x]) return output"},{"question":"Write a function that takes a list of integers and returns a new list with the elements that are present in the original list but not in any other list provided as additional arguments. -----Input:----- The input format consists of: - The first line containing an integer `n`, the number of elements in the main list. - The second line containing `n` space-separated integers, the main list. - The third line containing an integer `k`, the number of additional lists. - Each of the next `k` lines contains an integer `m_i` followed by `m_i` space-separated integers, representing the additional lists. Note: All lists contain distinct elements. -----Output:----- For each test case, output a single line: the new list with unique elements from the main list. -----Sample Input:----- 5 1 2 3 4 5 2 3 3 4 5 4 6 7 8 9 -----Sample Output:----- 1 2","solution":"def unique_elements(main_list, *additional_lists): Returns a list of elements that are in the main_list but not in any of the additional_lists. additional_elements = set() for lst in additional_lists: additional_elements.update(lst) result = [element for element in main_list if element not in additional_elements] return result def read_input(input_str): input_lines = input_str.strip().split(\'n\') n = int(input_lines[0]) main_list = list(map(int, input_lines[1].split())) k = int(input_lines[2]) additional_lists = [] for i in range(3, 3 + k): additional_lists.append(list(map(int, input_lines[i].split()[1:]))) return main_list, additional_lists def process_input(input_str): main_list, additional_lists = read_input(input_str) return unique_elements(main_list, *additional_lists)"},{"question":"A vacation rental company has a list of customers who have requested specific dates for staying in their properties. Each request consists of a start date and an end date, and the booking is for exclusive single-property use. The company wants to maximize the number of bookings with non-overlapping date ranges. Therefore, given a list of booking requests, you need to determine the maximum number of requests that can be accommodated without any overlap. -----Input----- The input starts with an integer n (1 leq n leq 100), the number of booking requests. Following this are n lines, each containing two integers s and e (1 leq s < e leq 10^6), where s is the start date and e is the end date of the request. -----Output----- Display a single integer representing the maximum number of non-overlapping bookings that can be accommodated. -----Examples----- Sample Input 1: 3 1 3 2 5 4 6 Sample Output 1: 2 Sample Input 2: 5 1 2 2 3 3 4 1 3 4 5 Sample Output 2: 4","solution":"def max_non_overlapping_bookings(n, bookings): Returns the maximum number of non-overlapping bookings. # Sort bookings by their end times bookings.sort(key=lambda x: x[1]) max_bookings = 0 last_end_time = 0 for booking in bookings: start, end = booking if start >= last_end_time: max_bookings += 1 last_end_time = end return max_bookings"},{"question":"Your team is building a software system that manages a parking lot with multiple parking lanes. The parking lot has L lanes (numbered from 1 to L), and each lane has a fixed number of parking spaces. When a car arrives, it tries to find an available parking space in its preferred lane. If the preferred lane is full, the car looks for space in other lanes in order of their proximity to the preferred lane (cyclically, considering the lanes as a circular queue). Your goal is to maximize the number of cars that are successfully parked by strategically managing the parking lanes. You are given a list of C cars, each with their preferred lane and the time of arrival and departure. The cars can park in their preferred lane if there is an available space at their arrival time. If the preferred lane is full, the car tries to find a space in the next lanes cyclically. Write a function to calculate the maximum number of cars that can be parked in the parking lot. -----Input----- The first line contains an integer Q, representing the number of test cases. Each test case starts with two integers C and L, the number of cars and the number of parking lanes, respectively. The next line contains L integers representing the number of parking spaces in each lane. Each of the next C lines contains three integers ai, di, and li, the arrival time, departure time, and preferred lane of the i-th car, respectively. Note that the i-th car wants to occupy a parking space in the li-th lane from [ai, di). -----Output----- For each test case, print a single line containing the maximum number of cars parked successfully. -----Constraints----- - 1 ≤ Q ≤ 30 - 0 ≤ C ≤ 10^5 - 1 ≤ L ≤ 10^3 - 0 ≤ ai < di ≤ 10^9 - 1 ≤ li ≤ L - 1 ≤ Number of parking spaces in each lane ≤ 10^3 -----Example----- Input: 2 3 3 2 1 3 1 4 1 2 6 2 5 8 3 4 4 1 2 2 1 1 5 1 4 7 2 6 9 3 8 12 4 Output: 3 4 -----Explanation----- Example case 1. All three cars can park in their preferred lanes since there is enough space. Example case 2. If we serve the 1st, 2nd, 3rd, and 4th cars, then we can park 4 cars successfully.","solution":"def max_cars_parked(Q, test_cases): results = [] for test in test_cases: C, L, spaces, cars = test lanes = [[] for _ in range(L + 1)] for a, d, l in cars: lanes[l].append((a, d)) lane_usage = {i: [0] * 1001 for i in range(1, L + 1)} def can_park(car, lane): a, d = car for t in range(a, d): if lane_usage[lane][t] >= spaces[lane - 1]: return False for t in range(a, d): lane_usage[lane][t] += 1 return True parked_count = 0 for car in cars: a, d, l = car parked = False for i in range(L): lane = (l - 1 + i) % L + 1 if can_park((a, d), lane): parked = True break if parked: parked_count += 1 results.append(parked_count) return results"},{"question":"A group of n people stand in a circle, and they plan to play a game. They count off around the circle, eliminating every k-th person until only one person remains. The position of the last remaining person in the game is known as the Josephus position. For example, when n = 7 and k = 3, the elimination process is as follows: People: [1, 2, 3, 4, 5, 6, 7] Eliminated order: 3, 6, 2, 7, 5, 1 Last remaining: 4 Write a program to find the Josephus position for given values of n and k. ----Input---- The input begins with a single positive integer on a line by itself indicating the number of cases. This line is followed by the input cases. Each test case consists of two integers n and k separated by a space, with 1 ≤ n ≤ 1000000000 and 1 ≤ k ≤ n. ----Output---- For each test case, print the Josephus position. Sample Input 2 7 3 5 2 Sample Output 4 3","solution":"def josephus(n, k): Returns the position of the last remaining person in the Josephus problem for given n and k. if n == 1: return 1 else: return (josephus(n - 1, k) + k - 1) % n + 1 def process_cases(cases): results = [] for n, k in cases: results.append(josephus(n, k)) return results"},{"question":"You are the commander of an interstellar transport ship navigating through the galaxy. Your mission is to deliver critical supplies to various outposts located on different planets. The galaxy can be represented as a network of N planets interconnected by M unidirectional hyperspace routes. Each hyperspace route connects a pair of planets and has a specific travel time associated with it. Given this setup, you need to determine the shortest time required to deliver supplies from your starting planet to each of the other planets in the galaxy. Formally, you are given a directed graph with N vertices (planets) and M edges (hyperspace routes), and your task is to compute the shortest path from the starting planet to all other planets. ------Input------ The first line of input contains three integers, N (2 leq N leq 100000), M (1 leq M leq 200000), and S (1 leq S leq N), the number of planets, the number of hyperspace routes, and the starting planet, respectively. The next M lines contain descriptions of the hyperspace routes. In particular, the i^text {th} of these lines contains three integers U_ i, V_ i (1 leq U_ i, V_ i leq N) and T_ i (1 leq T_ i leq 10^9), denoting that there is a route from planet U_ i to planet V_ i with a travel time of T_ i units. ------Output------ Output N integers on a single line, separated by spaces. The i^text {th} of these integers should contain the shortest travel time from the starting planet S to planet i. If planet i is not reachable from the starting planet, output -1 for that planet. Since these numbers can be quite large, you should output only the remainders after dividing each number by 10^9+7. ------Examples------ Sample Input: 4 4 1 1 2 2 1 3 5 2 3 1 3 4 2 Sample Output: 0 2 3 5","solution":"import heapq def shortest_path(N, M, S, routes): MOD = 10**9 + 7 graph = [[] for _ in range(N)] for U, V, T in routes: graph[U-1].append((V-1, T)) dist = [float(\'inf\')] * N dist[S-1] = 0 priority_queue = [(0, S-1)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(priority_queue, (distance, v)) result = [(distance % MOD if distance != float(\'inf\') else -1) for distance in dist] return result"},{"question":"A company organizes various online coding competitions. Each competition has a certain number of participants registered, and there are some participants who haven\'t registered but still participate, called cheaters. Your task is to find all the cheaters by evaluating the list of participants and the list of registered users. You are given a list of registered users and a list of participants for each competition. You need to return a sorted list containing the names of the cheaters. Example ```python registered_users = [\\"Alice\\", \\"Bob\\", \\"Charlie\\"] participants = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"Dave\\", \\"Eve\\"] cheaters = [\\"Dave\\", \\"Eve\\"] ``` Explanation The registered users are [\\"Alice\\", \\"Bob\\", \\"Charlie\\"]. The participants in the competition include [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"Dave\\", \\"Eve\\"]. The names \\"Dave\\" and \\"Eve\\" do not appear among the registered users, hence they are considered cheaters. The output should be a sorted list of cheaters\' names, which is [\\"Dave\\", \\"Eve\\"].","solution":"def find_cheaters(registered_users, participants): Returns a sorted list of cheaters by comparing participants with registered users. Args: registered_users (list): A list of registered user names. participants (list): A list of participant names. Returns: list: A sorted list of cheater names. # Convert registered_users to a set for efficient lookup registered_set = set(registered_users) # Find cheaters by checking who is not in the registered set cheaters = [name for name in participants if name not in registered_set] # Return the sorted list of cheaters return sorted(cheaters)"},{"question":"In an aquarium, there is a rectangular grid of dimensions n times m representing water tiles. There are some rectangular patches of seaweed on this grid, given by their top-left and bottom-right coordinates (r1, c1) and (r2, c2). The seaweed patches are dense enough that they cannot be walked through, but open water tiles can be traversed. You are given a series of q queries, where each query provides a starting position (sx, sy) and an ending position (ex, ey). For each query, determine if it is possible to traverse from the starting position to the ending position by only moving up, down, left, or right without crossing any seaweed patches. -----Input----- The first line of the input contains two integers n and m (1 le n, m le 500) — the dimensions of the grid. The second line contains one integer p (1 le p le 100) — the number of seaweed patches. The next p lines each contain four integers r1, c1, r2, c2 (1 le r1 le r2 le n, 1 le c1 le c2 le m) — the coordinates of each seaweed patch. The following line contains one integer q (1 le q le 1000) — the number of queries. The next q lines each contain four integers sx, sy, ex, ey (1 le sx, sy, ex, ey le n, m) — the starting and ending coordinates for each query. -----Output----- For each query, print \\"YES\\" if it is possible to traverse from the starting position to the ending position without crossing any seaweed patches. Otherwise, print \\"NO\\". -----Example----- Input 5 5 2 1 2 2 3 4 4 5 5 3 1 1 5 5 2 2 4 4 1 1 3 3 Output NO NO YES -----Note----- In the first test case, it is impossible to traverse from (1, 1) to (5, 5) because the seaweed patch at (4, 4) to (5, 5) blocks the way. In the second test case, it is impossible to traverse from (2, 2) to (4, 4) because of the seaweed patches. In the third test case, it is possible to reach (3, 3) from (1, 1) since the path does not cross any seaweed patches.","solution":"from collections import deque def is_valid(x, y, n, m, grid): return 0 <= x < n and 0 <= y < m and grid[x][y] == 0 def bfs(n, m, grid, sx, sy, ex, ey): if sx == ex and sy == ey: return True directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx, sy)]) visited = [[False]*m for _ in range(n)] visited[sx][sy] = True while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, n, m, grid) and not visited[nx][ny]: if nx == ex and ny == ey: return True queue.append((nx, ny)) visited[nx][ny] = True return False def traverse_grid(n, m, patches, queries): grid = [[0] * m for _ in range(n)] for r1, c1, r2, c2 in patches: for i in range(r1-1, r2): for j in range(c1-1, c2): grid[i][j] = 1 results = [] for sx, sy, ex, ey in queries: if bfs(n, m, grid, sx-1, sy-1, ex-1, ey-1): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string S which contains only lowercase alphabets. You can perform the following operations on the string: 1. Select any character in the string and delete it. 2. Reverse the order of the string. Your task is to determine the minimum number of operations required to delete all characters from the string. Note that reversing the string counts as one operation, regardless of the length of the string. Constraints: 1 ≤ T ≤10 1 ≤ |S| ≤ 1000 SAMPLE INPUT 2 abc a SAMPLE OUTPUT 3 1 Explanation First line is ‘T’ the number of test cases. For each test case, there is a single string S. For the first test case, you can delete the characters one by one (3 delete operations), or you can reverse the string (1 operation) and then delete each character individually in reverse order (2 more delete operations), so the total minimum operations is 3. For the second test case, you just need one delete operation to remove the single character.","solution":"def min_operations_to_delete_string(S): Calculate minimum number of operations to delete all characters from the string S. n = len(S) # If the string length is 1, only one delete operation is needed if n == 1: return 1 # Fewest number of operations always equals the length of the string # Reversing doesn\'t save any delete operations in any case return n def process_test_cases(test_cases): results = [] for S in test_cases: results.append(min_operations_to_delete_string(S)) return results"},{"question":"You are an event organizer and have been tasked with planning the schedule for a series of events. The events have strict start and end times, and you need to ensure that no two events overlap, maximizing the number of events that can be attended. Each event has a start time and an end time, and you need to determine the maximum number of events that can be attended without any conflicts. -----Input----- The first line of input contains one integer t (1 le t le 100) — the number of test cases. For each test case: - The first line contains one integer n (1 le n le 100) — the number of events. - The following n lines each contain two integers s_i and e_i (0 le s_i < e_i le 10000) — the start and end times of the i-th event, respectively. -----Output----- For each test case, print the answer for it — the maximum number of non-overlapping events that can be attended. -----Example----- Input 3 3 1 3 2 5 4 6 4 1 4 2 3 3 5 7 8 2 0 2 1 3 Output 2 3 1","solution":"def max_non_overlapping_events(t, test_cases): results = [] for case in test_cases: n, events = case events.sort(key=lambda x: x[1]) # Sort events by their end times max_events = 0 last_end_time = -1 for event in events: if event[0] >= last_end_time: max_events += 1 last_end_time = event[1] results.append(max_events) return results"},{"question":"You are given a rectangular grid of dimensions m x n filled with integers. Each cell in the grid can have a value of -1, 0, or 1. The value -1 represents an obstacle that you cannot pass through, 0 represents an empty cell that you can pass, and 1 represents a destination cell that you must reach. You are initially at the top-left corner of the grid (cell (0, 0)). Your task is to determine the minimum number of moves required to reach any destination cell (1) from the starting cell (0, 0). You can move up, down, left, or right from any given cell. Write a program that determines the minimum number of moves required for each given dataset to reach a destination cell. If it is not possible to reach a destination cell from the starting cell, return -1. # Input - The input consists of multiple datasets. - Each dataset starts with two integers m and n (1 ≤ m, n ≤ 100), representing the dimensions of the grid. - The following m lines each contain n integers which represent the grid. - The end of the input is indicated by a single line containing two zeros. # Output - For each dataset, output the minimum number of moves required to reach a destination cell. - If no destination cell is reachable, output -1. # Example Input 3 4 0 0 0 1 0 -1 0 0 0 0 0 0 3 4 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 Output 3 5 # Explanation - In the first dataset, the minimum number of moves to reach the destination cell (1) is 3. - In the second dataset, the minimum number of moves to reach the destination cell (1) is 5.","solution":"from collections import deque def min_moves_to_destination(grid): This function takes a grid and returns the minimum moves to reach the destination cell (1), or -1 if not possible. m = len(grid) n = len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set() visited.add((0, 0)) while queue: row, col, dist = queue.popleft() if grid[row][col] == 1: return dist for d in directions: new_row, new_col = row + d[0], col + d[1] if 0 <= new_row < m and 0 <= new_col < n and (new_row, new_col) not in visited and grid[new_row][new_col] != -1: queue.append((new_row, new_col, dist + 1)) visited.add((new_row, new_col)) return -1 def process_datasets(input_data): This function processes the input datasets as described in the problem statement. results = [] datasets = input_data.strip().split(\'n\') index = 0 while index < len(datasets): m, n = map(int, datasets[index].split()) if m == 0 and n == 0: break grid = [] for i in range(m): grid.append(list(map(int, datasets[index + 1 + i].split()))) result = min_moves_to_destination(grid) results.append(result) index += m + 1 return results # Helper function to connect with the expected input/output structure def main(input_data): results = process_datasets(input_data) for result in results: print(result)"},{"question":"You are organizing a team relay race, where each runner runs a segment of the race and hands off a baton to the next runner. Runners must run their segments in a specific order, and the total time taken for the team to complete the race depends on the individual times taken by each runner. Given the order of runners and their corresponding running times, determine the total time taken for the team to complete the race. Additionally, find the runner who took the maximum time and the runner who took the minimum time in the race. -----Input----- The first line of input contains a single integer n (1 le n leq 10^5), the number of runners in the team. Each of the next n lines contains two items: a string representing the name of the runner and an integer representing the time in seconds it took for that runner to complete their segment. All runner names are unique and consist of at least 1 and at most 50 characters \'a\'-\'z\' and \'A\'-\'Z\' and the integer time values are non-negative and at most 10^4. -----Output----- On the first line, output the total time taken for the team to complete the race. On the second line, output the name of the runner who took the maximum time along with their time. On the third line, output the name of the runner who took the minimum time along with their time. -----Examples----- Sample Input 1: 3 Alice 45 Bob 50 Charlie 40 Sample Output 1: 135 Bob 50 Charlie 40 Sample Input 2: 2 Eve 60 Frank 55 Sample Output 2: 115 Eve 60 Frank 55","solution":"def relay_race(n, runners): total_time = 0 max_time = -1 min_time = float(\'inf\') max_runner = None min_runner = None for runner, time in runners: total_time += time if time > max_time: max_time = time max_runner = runner if time < min_time: min_time = time min_runner = runner return total_time, (max_runner, max_time), (min_runner, min_time)"},{"question":"# Task Given a string of arbitrary length, consisting of lowercase alphabetic characters (`a-z`), return the alphabetic character that appears the highest number of times. If two or more characters have the highest frequency, return the character which comes first alphabetically. If the string is empty, return `None`. # Examples ```python most_frequent_character(\\"apple\\") => \'p\' most_frequent_character(\\"banana\\") => \'a\' most_frequent_character(\\"\\") => None ``` # Hint A frequency count of each character may help.","solution":"def most_frequent_character(s): Returns the alphabetic character that appears the highest number of times in the string s. If two or more characters have the highest frequency, returns the character which comes first alphabetically. If the string is empty, returns None. if not s: return None frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 max_frequency = max(frequency.values()) most_frequent_chars = [char for char, count in frequency.items() if count == max_frequency] return min(most_frequent_chars)"},{"question":"You are given a series of homework assignments. Each homework has a required passing threshold score. The score for each homework is given as a list of integers, each representing the score by different students on that homework. Your task is to determine how many students passed each homework assignment. Assume you are provided with multiple sets of homework assignments and thresholds, and you need to process each set independently. ------ Input ------ The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. For each test case, the first line contains an integer n denoting the number of homework assignments. Each of the next n lines contain the information about the homework assignments: - The first integer k specifies the number of students. - The next integer t represents the passing threshold for the homework. - The following k integers are the scores of the k students on that particular homework. ------ Output ------ For each test case, output n lines. Each line should contain a single integer indicating the number of students who scored at least the passing threshold on that specific homework. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ n ≤ 100 1 ≤ k ≤ 100 0 ≤ text{score of any student} ≤ 100 0 ≤ t ≤ 100 ------ Sample Input 1 ------ 2 2 3 50 40 55 60 4 75 80 70 90 85 3 5 60 45 60 70 55 65 2 55 50 60 3 40 35 45 25 ------ Sample Output 1 ------ 2 3 3 1 2 ------ Explanation 1 ------ In the first test case: - For the first homework assignment, there are 3 students with scores [40, 55, 60] and the threshold is 50. Two students scored at least 50. - For the second homework assignment, there are 4 students with scores [80, 70, 90, 85] and the threshold is 75. Three students scored at least 75. In the second test case: - For the first homework assignment, there are 5 students with scores [45, 60, 70, 55, 65] and the threshold is 60. Three students scored at least 60. - For the second homework assignment, there are 2 students with scores [50, 60] and the threshold is 55. One student scored at least 55. - For the third homework assignment, there are 3 students with scores [35, 45, 25] and the threshold is 40. Two students scored at least 40.","solution":"def count_passing_students(test_cases): Count the number of students passing each homework assignment based on the provided threshold. :param test_cases: List of test case data, each is a tuple where the first item is the number of homeworks, followed by a list of tuples. Each tuple consists of number of students, threshold, and a list of student scores. :return: List of lists containing the number of students passing each homework assignment. result = [] for n, assignments in test_cases: case_result = [] for k, t, scores in assignments: count_pass = sum(1 for score in scores if score >= t) case_result.append(count_pass) result.append(case_result) return result"},{"question":"A sequence of numbers is called a Jolly Jumper if the absolute values of the differences between successive elements take on all possible values from 1 through n-1 (where n is the length of the sequence). Write a function to determine if a given sequence is a Jolly Jumper. Input The input consists of two lines. The first line contains a single integer, n, representing the length of the sequence. The second line contains n space-separated integers, denoting the elements of the sequence. Output Output \\"True\\" if the given sequence is a Jolly Jumper, otherwise output \\"False\\". Example Input: 4 1 4 2 3 Output: True","solution":"def is_jolly_jumper(n, sequence): if n <= 1: return True diffs = set() for i in range(1, n): diff = abs(sequence[i] - sequence[i - 1]) if diff == 0 or diff >= n or diff in diffs: return False diffs.add(diff) return len(diffs) == n - 1"},{"question":"You are given an array of integers. Your task is to determine the number of distinct pairs of elements (a, b) in the array such that their sum is equal to a given target value. Each pair should be counted only once, regardless of the order of the elements. Input The first line contains two integers n and target (1 ≤ n ≤ 105, -106 ≤ target ≤ 106). The second line contains n space-separated integers representing the elements of the array. The elements may have absolute values up to 106. Output Output a single integer — the number of distinct pairs whose sum equals the given target value. Examples Input 5 9 2 7 4 5 1 Output 2 Input 4 4 2 2 2 2 Output 1 Input 6 -5 -2 4 3 -7 1 -3 Output 1","solution":"def count_pairs_with_sum(nums, target): Returns the number of distinct pairs of elements (a, b) in the array such that their sum is equal to target value. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs)"},{"question":"You are given a list of integers representing a binary tree level order traversal. However, the list contains some invalid nodes represented by the value -1. Every valid node must have exactly two children (which could also be invalid). Your task is to identify the number of valid nodes in the binary tree. Input: The first line contains an integer n, representing the number of nodes in the binary tree level order traversal, followed by n integers representing the tree nodes. Output: Output the number of valid nodes in the given binary tree. Examples Input 9 1 -1 2 3 4 -1 -1 -1 5 Output 4 Explanation: In the given example, the binary tree level order traversal is [1, -1, 2, 3, 4, -1, -1, -1, 5]. The valid binary tree represented is: 1 2 / 3 4 5 Here, the valid nodes are 1, 2, 3, 4, and 5, giving a total of 4 valid nodes.","solution":"def count_valid_nodes(tree): Returns the number of valid nodes in the binary tree described by the level order traversal list `tree`. Valid nodes have a value other than -1. Args: tree (list): List of integers representing the binary tree level order traversal. Returns: int: Number of valid nodes in the tree. return sum(1 for node in tree if node != -1)"},{"question":"A valid password is defined based on the following criteria: 1. It contains at least one uppercase letter. 2. It contains at least one lowercase letter. 3. It contains at least one digit. 4. It has at least one special character from the set: !@#%^&*()-+ 5. It is at least 8 characters long. Write a program that checks if a given password is valid based on these criteria. Input The input consists of a single line containing a string S, representing a password. Output Print \\"Valid\\" if the password meets all the criteria, otherwise print \\"Invalid\\". Constraints - 1 ≤ |S| ≤ 100 Example Input: Abc123! Output: Invalid Input: Abcdef1! Output: Valid","solution":"def is_valid_password(password): if len(password) < 8: return \\"Invalid\\" has_upper = any(c.isupper() for c in password) has_lower = any(c.islower() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \\"!@#%^&*()-+\\" for c in password) if has_upper and has_lower and has_digit and has_special: return \\"Valid\\" else: return \\"Invalid\\""},{"question":"Calculate the cumulative sum of an array of integers. Implement a function that returns a new array where each element at index `i` is the sum of elements from index `0` to `i` of the input array. Input The first line of input contains an integer `n` (1 ≤ n ≤ 100) — the size of the array. The following `n` lines contain the elements of the array, one per line. Each element of the array is an integer between 1 and 1000, inclusive. Output Output space-separated elements of the cumulative sum array. Examples Input 5 1 2 3 4 5 Output 1 3 6 10 15 Input 3 10 20 30 Output 10 30 60","solution":"def cumulative_sum(n, arr): Returns the cumulative sum of the given array of integers. Parameters: n (int): The size of the array. arr (list): The input array of integers. Returns: list: A list where each element at index `i` is the sum of elements from index `0` to `i` cum_sum = [0] * n cum_sum[0] = arr[0] for i in range(1, n): cum_sum[i] = cum_sum[i-1] + arr[i] return cum_sum"},{"question":"You are developing a pathfinding algorithm for a two-dimensional grid where some cells are blocked, and you need to determine the minimum number of steps required to reach the destination. You can move vertically or horizontally between adjacent cells, but you cannot move into a blocked cell. The grid is represented as a matrix of size m x n, where each cell contains either a 0 (indicating an open cell) or a 1 (indicating a blocked cell). You start at the top-left corner of the grid and need to reach the bottom-right corner. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line will contain two integers: m (1 le m le 1000) and n (1 le n le 1000), indicating the number of rows and columns of the grid, respectively. Following this will be m lines, each containing n integers (either 0 or 1), representing the cells of the grid. -----Output----- Output a single integer on a line by itself representing the minimum number of steps required to reach the bottom-right corner. If it is not possible to reach the destination, output -1. -----Examples----- Sample Input 1: 3 3 0 0 0 1 1 0 0 0 0 Sample Output 1: 4 Sample Input 2: 3 3 0 1 0 0 1 0 0 0 0 Sample Output 2: 4 Sample Input 3: 3 3 0 1 0 0 1 0 0 1 0 Sample Output 3: -1","solution":"from collections import deque def min_steps_to_reach_end(m, n, grid): Returns the minimum number of steps to reach the bottom-right corner of the grid. If it is not possible, returns -1. if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == m-1 and y == n-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"Given a binary string S. A binary string is a string consisting only of \'0\'s and \'1\'s. Calculate the minimum number of deletions required to make the string balanced. A balanced string is defined as a string that has no two consecutive characters being the same. Example 1: Input: S = \\"010101\\" Output: 0 Explanation: The string is already balanced. Example 2: Input: S = \\"110100\\" Output: 2 Explanation: delete the first \'1\' and the second \'0\' to make it \\"1010\\" which is balanced. Your Task: You do not need to read input or print anything. Your task is to complete the function minDeletions() which takes the binary string S as input and returns the minimum number of deletions required to make the string balanced. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 10^5","solution":"def minDeletions(S): Returns the minimum number of deletions required to make the binary string S balanced. deletions = 0 for i in range(1, len(S)): if S[i] == S[i - 1]: deletions += 1 return deletions"},{"question":"The city of Gridville is laid out as an m x n grid. Each cell in this grid represents a building lot. Gridville has m rows and n columns, which means there are m * n building lots in total. There is a construction company that is planning to build a new road system within Gridville to connect every building lot. However, the company can only place a certain number of roads due to budget constraints. They have decided that they can place exactly k roads. Each road in Gridville can be built either horizontally or vertically to connect two adjacent building lots. The goal is to determine the minimum number of connected components in the grid after exactly k roads have been built. A connected component is a set of building lots such that there is a path of roads between any two lots in that set. Note that roads cannot be built diagonally. Input The first line of the input contains three integers m, n, and k (1 ≤ m, n ≤ 50, 0 ≤ k ≤ m * n - 1) — the number of rows, the number of columns, and the number of roads to be built respectively. Output Print a single integer — the minimum number of connected components after building exactly k roads in the grid. Examples Input 2 2 3 Output 1 Input 3 3 2 Output 2 Input 4 1 0 Output 4 Note In the first test, the grid is 2x2 and we can build 3 roads. We can connect all 4 lots by placing 3 roads either horizontally or vertically, resulting in a single connected component. In the second test, the grid is 3x3 and we can build 2 roads. No matter how we place these roads, we cannot connect all 9 lots, so the minimum number of connected components will be 2. In the third test, the grid is 4x1 and we cannot build any roads. Each lot remains an isolated component, so we have 4 connected components.","solution":"def min_connected_components(m, n, k): Returns the minimum number of connected components in an m x n grid after exactly k roads have been built. if k >= m * n - 1: return 1 return max(1, m * n - k)"},{"question":"You are given a string S that consists of lowercase alphabets and special characters. You need to re-arrange the string in such a way that all letters appear in sorted order while maintaining the positions of the special characters. For example, consider the string \\"a!b#c\\". Here, the characters \'a\', \'b\', and \'c\' should be sorted, but the special characters \'!\', \'#\' should remain at their original positions. Write a function that takes such a string S and returns the newly arranged string. Example 1: Input: \\"a!b#c\\" Output: \\"a!b#c\\" Example 2: Input: \\"d!c@ba\\" Output: \\"a!b@cd\\" Example 3: Input: \\"dcba\\" Output: \\"abcd\\" Note: * The length of the string S is no more than 1000. * The string S consists of only lowercase alphabets and special characters.","solution":"def rearrange_string(S): # Extract the alphabetical characters and sort them letters = sorted([ch for ch in S if ch.isalpha()]) result = [] letter_index = 0 for ch in S: if ch.isalpha(): result.append(letters[letter_index]) letter_index += 1 else: result.append(ch) return \'\'.join(result)"},{"question":"Mr. Smith is an avid coder and a puzzle enthusiast. One day, he stumbled upon a unique type of game where he needs to determine if a given sequence of brackets is valid. A sequence of brackets is considered valid if every opening bracket has a corresponding closing bracket in the correct order. Mr. Smith decided to turn this into a coding challenge. Your task is to help him by writing a program that checks if a sequence of brackets is valid or not. The sequence will consist of only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. A bracket sequence is valid if: 1. It is an empty string. 2. It contains pairs of opening and closing brackets of the same type in the correct order. 3. Brackets are properly nested. For example, \\"()\\" and \\"()[]{}\\" are valid, but \\"(]\\" and \\"([)]\\" are not. Your task is to write a function that determines if a given bracket sequence is valid. Input The input includes a single line containing the sequence S (0 leq |S| leq 1000). Output Output \\"Yes\\" if the sequence is valid, or \\"No\\" otherwise. Examples Input \\"()\\" Output Yes Input \\"([)]\\" Output No Input \\"{[]}\\" Output Yes","solution":"def is_valid_bracket_sequence(s): Returns \'Yes\' if the bracket sequence is valid, otherwise returns \'No\'. stack = [] bracket_map = {\\")\\": \\"(\\", \\"}\\": \\"{\\", \\"]\\": \\"[\\"} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return \\"No\\" else: stack.append(char) return \\"Yes\\" if not stack else \\"No\\""},{"question":"Tim loves playing with strings. One day, he comes across an interesting problem which he can\'t solve himself. Can you help him figure it out? Tim’s problem is this: given a string s, find the length of the smallest substring of s that contains at least k distinct characters. -----Input----- The first line contains a string s (1 ≤ |s| ≤ 10^5), where |s| denotes the length of the string. The second line contains one integer k (1 ≤ k ≤ 26), representing the number of distinct characters required. -----Output----- Print a single integer representing the length of the smallest substring of s that contains at least k distinct characters. If no such substring exists, print `-1`. -----Examples----- Input abacabad 3 Output 3 Input abcde 5 Output 5 Input aabbcc 4 Output -1","solution":"def smallest_substring_with_k_distinct_chars(s, k): Returns the length of the smallest substring of s that contains at least k distinct characters. If no such substring exists, returns -1. if k > len(set(s)): return -1 from collections import defaultdict n = len(s) min_length = n + 1 left = 0 char_frequency = defaultdict(int) distinct_count = 0 for right in range(n): if char_frequency[s[right]] == 0: distinct_count += 1 char_frequency[s[right]] += 1 while distinct_count >= k: min_length = min(min_length, right - left + 1) char_frequency[s[left]] -= 1 if char_frequency[s[left]] == 0: distinct_count -= 1 left += 1 return min_length if min_length != n + 1 else -1"},{"question":"Given a string s, you need to find the length of the longest substring that contains at most k unique characters. For example, for the string \\"eceba\\" and k = 2, the longest substring that contains at most 2 unique characters is \\"ece\\" which has a length of 3.","solution":"def length_of_longest_substring_k_unique(s, k): Finds the length of the longest substring with at most k unique characters. :param s: The input string :param k: The number of unique characters allowed in the substring :return: The length of the longest substring with at most k unique characters if k == 0 or not s: return 0 left = 0 max_length = 0 char_count = {} for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given an array of integers A of size N. Your task is to find the maximum sum of any continuous subarray of size exactly K. ------ Input Format ------ - The first line will contain the integer N, the size of the array. - The second line will contain the integer K, the size of the subarray. - The third line contains N space-separated integers A_{1}, A_{2},ldots, A_{N} representing the elements of the array. ------ Output Format ------ - Output a single integer, the maximum sum of any continuous subarray of size exactly K. ------ Constraints ------ 1 ≤ N ≤ 10^{6} 1 ≤ K ≤ N -10^{4} ≤ A_{i} ≤ 10^{4} ----- Sample Input 1 ------ 5 3 1 2 3 4 5 ----- Sample Output 1 ------ 12 ----- Explanation 1 ------ The maximum sum of any subarray of size 3 is obtained by the subarray [3, 4, 5], which sums to 12.","solution":"def max_sum_subarray_of_size_k(N, K, A): Returns the maximum sum of any continuous subarray of size exactly K. Parameters: N (int): The size of the array. K (int): The size of the subarray. A (list of int): The array of integers. Returns: int: The maximum sum of any continuous subarray of size exactly K. # Initialize the current sum to the sum of the first K elements current_sum = sum(A[:K]) max_sum = current_sum # Slide the window over the array for i in range(K, N): current_sum = current_sum - A[i - K] + A[i] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given an integer array `arr` and a positive integer `k`, you need to find the minimum possible length of a subarray of `arr` such that there are at least `k` distinct integers in that subarray. If no such subarray exists, return `-1`. A subarray is a contiguous portion of the array. # Examples Example 1: Input: `arr = [1, 2, 3, 4, 5]`, `k = 3` Output: `3` Explanation: The subarray [1, 2, 3] contains exactly 3 distinct integers. Example 2: Input: `arr = [1, 2, 1, 2, 3, 4, 5]`, `k = 2` Output: `2` Explanation: The shortest subarray containing at least 2 distinct integers is either [1, 2], [2, 1], or similar configurations. Example 3: Input: `arr = [1, 1, 1, 1, 1]`, `k = 2` Output: `-1` Explanation: There is no subarray that contains at least 2 distinct integers since all elements are identical. # Notes - `1 <= arr.length <= 10^5` - `1 <= arr[i] <= 10^5` - `1 <= k <= min(10^5, the number of distinct elements in arr)`","solution":"def min_subarray_length_with_k_distinct(arr, k): from collections import defaultdict if k > len(set(arr)): # If k is more than the distinct elements in arr, it\'s impossible. return -1 left = 0 min_len = float(\'inf\') count = defaultdict(int) for right in range(len(arr)): count[arr[right]] += 1 while len(count) >= k: min_len = min(min_len, right - left + 1) count[arr[left]] -= 1 if count[arr[left]] == 0: del count[arr[left]] left += 1 return min_len if min_len != float(\'inf\') else -1"},{"question":"Write a function that takes a list of integers and returns the product of all even numbers in the list. If the list does not contain any even numbers, return 1. # Example ```python even_product([1, 2, 3, 4, 5]) ==> 8 even_product([7, 11, 13]) ==> 1 ```","solution":"def even_product(numbers): Returns the product of all even numbers in the list. If the list does not contain any even numbers, returns 1. product = 1 has_even = False for num in numbers: if num % 2 == 0: product *= num has_even = True return product if has_even else 1"},{"question":"Anna has a certain number of large and small boxes for packing. Each large box can hold A items and each small box can hold B items. Anna needs to pack a total of C items. Determine the minimum number of boxes needed to pack all the items. Note that Anna can use both large and small boxes as required. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first and only line of each test case contains three integers A, B and C — the number of items large box can hold, the number of items small box can hold and the total number of items needed to be packed. ------ Output Format ------ For each test case, output the minimum number of boxes needed to pack all the items. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ A, B, C ≤ 1000 ------ Sample Input 1 ------ 4 5 3 18 3 2 5 10 5 23 6 4 19 ------ Sample Output 1 ------ 4 2 3 4 ------ Explanation 1 ------ Test case 1: Anna needs to pack 18 items. Using 3 large boxes and 1 small box (3 times 5 + 1 times 3 = 15 + 3 = 18), the minimum number of boxes needed is 4. Test case 2: Anna needs to pack 5 items. Using 2 large boxes or 1 large box and 1 small box will be sufficient (1 times 3 + 1 times 2 = 5). In both scenarios, the minimum number of boxes needed is 2. Test case 3: Anna needs to pack 23 items. Using 2 large boxes and 1 small box (2 times 10 + 1 times 3 = 20 + 3 = 23), the minimum number of boxes needed is 3. Test case 4: Anna needs to pack 19 items. Using 3 large boxes and 1 small box (3 times 6 + 1 times 4 = 18 + 4 = 22), the minimum number of boxes needed is 4.","solution":"def minimum_boxes(A, B, C): large_box_count = C // A remaining_items = C % A if remaining_items == 0: return large_box_count else: small_box_count = (remaining_items + B - 1) // B return large_box_count + small_box_count"},{"question":"Given an array of integers representing the prices of items in a store over several days, where `prices[i]` is the price of an item on day `i`, find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy and sell one share of the item multiple times), but you must sell the item before you buy it again. Example 1: Input: [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7. Example 2: Input: [1,2,3,4,5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit is 4 since the price is continuously rising. Example 3: Input: [7,6,4,3,1] Output: 0 Explanation: There is no profit to be made since the prices are continuously falling.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by completing as many transactions as possible. :param prices: List[int] - A list of prices where `prices[i]` is the price of an item on day `i`. :return: int - The maximum profit achievable. if not prices: return 0 max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"You are given a string S consisting of lowercase English letters and an integer K. Your goal is to determine whether it is possible to rearrange the characters in the string S such that there are at most K consecutive identical characters. -----Input:----- - The first line of input contains a single integer T, the number of test cases. - Each of the next T lines contains a string S followed by an integer K. -----Output:----- For each test case, print \\"YES\\" if it is possible to rearrange the characters of the string such that there are at most K consecutive identical characters, otherwise print \\"NO\\". (Without quotes). -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 20000 (where |S| denotes the length of S) - 1 ≤ K ≤ |S| -----Sample Input:----- 3 aabbcc 2 aabbcc 1 aaaabbbbcc 3 -----Sample Output:----- YES NO YES -----Explanation:----- In the first test case, \\"abcabc\\" is a valid rearrangement with no more than 2 consecutive identical characters. In the second test case, it is impossible to rearrange \\"aabbcc\\" such that there are no consecutive identical characters. In the third test case, \\"abababcc\\" is a valid rearrangement with no more than 3 consecutive identical characters.","solution":"def can_rearrange(s, k): from collections import Counter import heapq # Get the frequency of each character counter = Counter(s) # Max-heap of the counts of the characters max_heap = [-cnt for cnt in counter.values()] heapq.heapify(max_heap) # If the maximum frequency of any character is > K, we need to check deeper while max_heap: # Take the most frequent character max_freq = -heapq.heappop(max_heap) if max_freq > (len(s) - max_freq) * (k - 1) + 1: return \\"NO\\" return \\"YES\\" def solve(tasks): results = [] for s, k in tasks: results.append(can_rearrange(s, k)) return results def preprocess_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) tasks = [] for i in range(1, T + 1): s, k = lines[i].split() k = int(k) tasks.append((s, k)) return tasks"},{"question":"A friend of yours is working on a game that requires solving a sequence of puzzles. One of these puzzles is particularly tricky and involves finding a specific type of string. They approach you for help in writing a program to determine if a given string contains a subsequence that matches a target pattern. The problem statement is as follows: You are given two strings, `s` (the main string) and `t` (the target pattern). Your task is to determine if `t` is a subsequence of `s`. A string `t` is a subsequence of `s` if `t` can be derived from `s` by deleting some (possibly zero) characters from `s`, without reordering the remaining characters. -----Input----- The input consists of two lines: - The first line contains the string `s`. - The second line contains the string `t`. Both strings `s` and `t` consist of lowercase English letters, and their lengths are between 1 and 1000, inclusive. -----Output----- Print \\"YES\\" (without quotes) if `t` is a subsequence of `s`, otherwise print \\"NO\\". -----Examples----- Input abcde ace Output YES Input abc acb Output NO -----Note----- In the first example, the string `t = \\"ace\\"` is a subsequence of `s = \\"abcde\\"` because we can remove `b` and `d` to get \\"ace\\". In the second example, the string `t = \\"acb\\"` is not a subsequence of `s = \\"abc\\"` because the characters \'c\' and \'b\' appear out of order in the string `s`.","solution":"def is_subsequence(s, t): Determines if string t is a subsequence of string s. Parameters: s (str): The main string from which to form the subsequence. t (str): The target pattern string that needs to be checked as a subsequence of s. Returns: str: \\"YES\\" if t is a subsequence of s, otherwise \\"NO\\". it = iter(s) return \\"YES\\" if all(char in it for char in t) else \\"NO\\""},{"question":"You are given a list of integers and a series of queries to perform operations on this list. There are two types of queries: * 1 x y: Insert the integer y at index x in the list (0-based index). * 2 l r: Print the sum of the sublist from index l to r (inclusive). You need to handle these queries efficiently. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100000), the number of integers in the list and the number of queries respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000), the elements of the list. The next q lines contain queries in one of the two formats described above. It is guaranteed that the queries will not lead to an invalid index access, and the total number of elements inserted in the list will not exceed 100000. Output For each type 2 query, print the sum of the specified sublist in a new line. Example Input 5 6 4 2 3 6 1 2 1 3 1 2 10 2 1 4 2 0 2 1 0 5 2 0 2 Output 11 21 15 22","solution":"def handle_queries(n, q, initial_list, queries): Handles the list queries and returns the result for type 2 queries. n: The number of initial elements in the list. q: The number of queries. initial_list: The initial list of integers. queries: The list of queries. Returns a list of results for type 2 queries. result = [] for query in queries: if query[0] == 1: # Insert y at index x _, x, y = query initial_list.insert(x, y) elif query[0] == 2: # Calculate the sum from index l to r _, l, r = query result.append(sum(initial_list[l:r+1])) return result"},{"question":"There is a treasure chest containing N items, each with a certain weight. You are given a sturdy bag which can carry items up to a maximum weight W. The bag is magical and can resize itself to fit any combination of items whose total weight does not exceed W. Your task is to find out the maximum possible number of items you can carry in the bag without the total weight exceeding W. Input The first line contains the integer N, the number of items. The second line contains N integers representing the weights of the items. The third line contains the integer W, the maximum weight the bag can carry. Output Output the maximum number of items you can carry in the bag without the total weight exceeding W. Constraints 1 ≤ N ≤ 100 1 ≤ weights of items ≤ 1000 1 ≤ W ≤ 10000 SAMPLE INPUT 5 10 20 30 40 50 60 SAMPLE OUTPUT 3 Explanation By selecting the items weighing 10, 20, and 30, their total weight is 60 which is the maximum weight the bag can hold and allows for the maximum number of 3 items to be carried.","solution":"def max_items(N, weights, W): Finds the maximum possible number of items that can be carried in the bag without the total weight exceeding W. Parameters: - N: int, the number of items. - weights: list of int, representing the weights of the items. - W: int, the maximum weight the bag can carry. Returns: - int, maximum number of items that can be carried. # Sort the weights of the items in ascending order weights.sort() total_weight = 0 item_count = 0 for weight in weights: if total_weight + weight <= W: total_weight += weight item_count += 1 else: break return item_count"},{"question":"Chef wants to keep track of how many recipes he makes from the available ingredients A and B each day. A recipe requires 1 unit of ingredient A and 2 units of ingredient B. Determine the maximum number of recipes Chef can make. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two space-separated integers A and B — the number of units of ingredient A and ingredient B respectively. ------ Output Format ------ For each test case, output on a new line, the maximum number of recipes Chef can make. ------ Constraints ------ 1 ≤ T ≤ 100 0 ≤ A, B ≤ 1000 ------- Sample Input 1 ------- 4 1 2 3 6 5 1 4 10 ------- Sample Output 1 ------- 1 3 0 4 ----- explanation 1 ----- Test case 1: Chef has 1 unit of ingredient A and 2 units of ingredient B. He can make 1 recipe using 1 unit of ingredient A and 2 units of ingredient B. Test case 2: Chef has 3 units of ingredient A and 6 units of ingredient B. He can make 3 recipes using 3 units of ingredient A and 6 units of ingredient B. Test case 3: Chef has 5 units of ingredient A and 1 unit of ingredient B. He can\'t make any recipe because he lacks sufficient units of ingredient B. Test case 4: Chef has 4 units of ingredient A and 10 units of ingredient B. He can make 4 recipes using 4 units of ingredient A and 8 units of ingredient B.","solution":"def max_recipes(test_cases): Returns the maximum number of recipes Chef can make for each test case. Parameters: test_cases (list of tuples): List of (A, B) tuples where A and B are the number of units of ingredients A and B. Returns: list of int: Maximum number of recipes for each test case. results = [] for A, B in test_cases: recipes = min(A, B // 2) results.append(recipes) return results"},{"question":"In a faraway kingdom named CodeLand, the king has a peculiar interest in operations on arrays, especially involving prime numbers. The kingdom\'s advisors have challenged two of its greatest programmers, Alice and Charlie, to a friendly competition involving a game with arrays. The game goes as follows: 1. Alice and Charlie start with a given array of integers. 2. Alice always plays first, followed by Charlie, and they take turns. 3. During her turn, Alice can select any prime number from the array and remove all its occurrences. 4. During his turn, Charlie can select any composite number from the array and remove all its occurrences. 5. If a player is unable to make a move (i.e., no corresponding prime or composite numbers are left in the array for their turn), that player loses, and the other player wins. Given the initial array, determine the winner of the game. INPUT: The first line of the input contains a single integer T, the number of test cases. Each test case starts with an integer N, the number of elements in the array. The next line contains N space-separated integers, the elements of the array. OUTPUT: For each test case, print the name of the winner either \\"ALICE\\" or \\"CHARLIE\\". CONSTRAINTS: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ array[i] ≤ 10^6 SAMPLE INPUT: 2 5 2 3 4 5 6 6 7 11 14 15 18 20 SAMPLE OUTPUT: ALICE CHARLIE Explanation: In the first test case, the array initially has [2, 3, 4, 5, 6]. - Alice removes the number 2 leaving the array [3, 4, 5, 6]. - Charlie removes the number 4 leaving the array [3, 5, 6]. - Alice removes the number 3 leaving the array [5, 6]. - Charlie removes the number 6 leaving the array [5]. - Alice removes the number 5 leaving the array empty. Therefore, Charlie cannot make a move and Alice wins. In the second test case, the array initially has [7, 11, 14, 15, 18, 20]. - Alice removes the number 7 leaving the array [11, 14, 15, 18, 20]. - Charlie removes the number 14 leaving the array [11, 15, 18, 20]. - Alice removes the number 11 leaving the array [15, 18, 20]. - Charlie removes the number 15 leaving the array [18, 20]. - Alice can no longer make a move as there are no prime numbers left. Therefore, Charlie wins.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def determine_winner(arr): Determines the winner of the game given the array. primes = 0 composites = 0 for num in arr: if is_prime(num): primes += 1 elif num > 1: composites += 1 # Alice starts, so if there are moves for her, she wins if primes > composites: return \\"ALICE\\" else: return \\"CHARLIE\\" def find_winner(T, test_cases): results = [] for case in test_cases: N, arr = case results.append(determine_winner(arr)) return results # Example usage: # T = 2 # test_cases = [(5, [2, 3, 4, 5, 6]), (6, [7, 11, 14, 15, 18, 20])] # print(find_winner(T, test_cases))"},{"question":"Max is writing a book and needs to keep track of the number of times he uses each word. He has decided to automate this process using a simple script. You need to write a function that takes as input a string representing the content of the book and returns a dictionary where the keys are words and the values are the number of times each word appears in the book. For simplicity, you can assume that the input string: - Only contains words and spaces. - Words are separated by exactly one space. - Words consist of lowercase English letters (a-z). The resulting dictionary should contain the words as keys in alphabetical order. Function Signature: ```python def word_count(book: str) -> dict: ``` Input Format - A single string `book` (1 ≤ len(book) ≤ 10^5), consisting of lowercase English letters and spaces. Output Format - A dictionary where the keys are words in alphabetical order and the values are the integer counts of each word. Examples Input ``` \\"the quick brown fox jumps over the lazy dog the dog was not quick enough quick fox\\" ``` Output ```python { \'brown\': 1, \'dog\': 2, \'enough\': 1, \'fox\': 2, \'jumps\': 1, \'lazy\': 1, \'not\': 1, \'over\': 1, \'quick\': 3, \'the\': 3, \'was\': 1 } ``` Input ``` \\"a man a plan a canal panama\\" ``` Output ```python { \'a\': 3, \'canal\': 1, \'man\': 1, \'panama\': 1, \'plan\': 1 } ``` Note - Your implementation should be efficient enough to handle the maximum input size. - Alphabetical sorting of dictionary keys is essential in the output.","solution":"def word_count(book: str) -> dict: This function takes a string representing the content of the book and returns a dictionary where the keys are words and the values are the counts of each word. The dictionary is sorted in alphabetical order of keys. words = book.split() word_freq = {} for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 return dict(sorted(word_freq.items()))"},{"question":"Alex is a programming enthusiast who loves playing with arrays. He is particularly fascinated by subarrays and their properties. Today, Alex wants you to help him find the \\"magical subarray\\" in a given array. A subarray is defined as \\"magical\\" if the bitwise AND of all its elements is zero. Alex wants to know the length of the longest magical subarray that can be found in a given array. Recall that the bitwise AND of two integers is the integer formed by performing a bitwise AND operation on each pair of their corresponding bits. For example, the bitwise AND of 6 (110) and 3 (011) is 2 (010). -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) — the number of test cases. Next 2t lines contain test cases — two lines per test case. The first line of each test case contains an integer n (1 le n le 10^5) — the number of elements in the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (0 le a_i le 10^9) — the elements of the array. It is guaranteed that the sum of n over all the test cases will not exceed 10^6. -----Output----- For each test case, print a single integer — the length of the longest magical subarray. -----Example----- Input 3 5 1 2 3 4 5 4 8 0 1 2 6 7 7 7 0 7 7 Output 1 4 6 -----Note----- In the first test case, no subarray has a bitwise AND of zero except for individual elements. Therefore, the length of the longest magical subarray is 1. In the second test case, the longest magical subarray is the entire array since the bitwise AND of all elements is zero. In the third test case, the bitwise AND of the entire array is zero, making the length of the longest magical subarray 6.","solution":"def find_longest_magical_subarray(t, cases): results = [] for i in range(t): n = cases[i][0] a = cases[i][1] max_length, current_length = 0, 0 for num in a: if num == 0: current_length = n break if current_length == 0: current_length = 1 results.append(max(current_length, 1)) return results # Example usage: # Input as per the example provided t = 3 cases = [ (5, [1, 2, 3, 4, 5]), (4, [8, 0, 1, 2]), (6, [7, 7, 7, 0, 7, 7]) ] print(find_longest_magical_subarray(t, cases)) # Output: [1, 4, 6]"},{"question":"Write a program that takes a positive integer N and computes the number of different prime factors of N. Constraints * 1 leq N leq 10^6 Input Input is given from Standard Input in the following format: N Output Output the number of different prime factors of N. Examples Input 28 Output 2 Input 15 Output 2 Input 2 Output 1","solution":"def count_prime_factors(N): Returns the number of different prime factors of the positive integer N. if N < 2: return 0 prime_factors = set() # Check for number of 2s while N % 2 == 0: prime_factors.add(2) N //= 2 # N must be odd at this point, check for odd factors factor = 3 while N != 1 and factor * factor <= N: while N % factor == 0: prime_factors.add(factor) N //= factor factor += 2 # If N is a prime number greater than 2 at this point, add it to the set if N > 1: prime_factors.add(N) return len(prime_factors)"},{"question":"Given an array of integers, determine the number of triplets (i, j, k) such that 0 ≤ i < j < k < n and `arr[i] < arr[j] < arr[k]`. Input: The first line of the input contains a single integer n, the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. Output: Print the number of triplets (i, j, k) that satisfy the condition. Constraints: 1 ≤ n ≤ 1000 1 ≤ arr[i] ≤ 10^5 Example: Input 4 1 2 3 4 Output 4 Explanation: The valid triplets are (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4).","solution":"def count_increasing_triplets(n, arr): Returns the number of increasing triplets (i, j, k) such that 0 ≤ i < j < k < n and arr[i] < arr[j] < arr[k] count = 0 for i in range(n - 2): for j in range(i + 1, n - 1): if arr[i] < arr[j]: for k in range(j + 1, n): if arr[j] < arr[k]: count += 1 return count"},{"question":"Polycarp has a string consisting of lowercase English letters. He wants to group adjacent letters that are the same, forming contiguous groups. After grouping, he consolidates each group into a single instance of that letter. For example, given the string \\"aaabbca\\", the result would be \\"abca\\" after merging groups \\"aaa\\", \\"bb\\", and \\"c\\". You are required to help Polycarp by writing a function to merge the contiguous groups in the string. -----Input----- The first line contains the integer t (1 le t le 10^4) - the number of test cases. For each test case, the next line contains a string s (1 le |s| le 10^5) consisting of lowercase English letters. It is guaranteed that the sum of lengths of all strings over all test cases does not exceed 10^6. -----Output----- For each test case, output a single line containing the transformed string after merging contiguous groups. -----Examples----- Input 4 aaabbca a abc aaabbbccc Output abca a abc abc -----Note----- In the first example, the string \\"aaabbca\\" is transformed to \\"abca\\" because: - The group \\"aaa\\" is merged to \\"a\\" - The group \\"bb\\" is merged to \\"b\\" - The group \\"c\\" remains \\"c\\" - The group \\"a\\" remains \\"a\\" In the second example, the input string \\"a\\" remains the same since there are no adjacent duplicate characters.","solution":"def merge_contiguous_groups(s): This function takes a string s and merges contiguous groups of the same character. if not s: return \\"\\" merged = [s[0]] # Start with the first character for i in range(1, len(s)): if s[i] != s[i-1]: # Only add character if it\'s different from the previous one merged.append(s[i]) return \\"\\".join(merged) def process_test_cases(t, test_cases): This function processes multiple test cases and returns a list of results results = [] for i in range(t): results.append(merge_contiguous_groups(test_cases[i])) return results"},{"question":"A company wants to facilitate communication between its employees by setting up an efficient email server. The server assigns unique email IDs to employees based on their full names to avoid confusion. The email IDs have the following constraints: 1. The email ID consists of the employee\'s first name, followed by the last name, and then a number if there are duplicates. 2. If an email ID without a number is already taken, the next employee with the same first and last name gets the same email ID with the number \'1\' appended at the end. The next duplicate gets the number \'2\', and so on. Your task is to develop a function that generates the appropriate email IDs for a list of employees according to the mentioned constraints. # Function Signature ```python def generate_email_ids(names: List[Tuple[str, str]]) -> List[str]: ``` # Input - `names`: A list of tuples `[(first_name_1, last_name_1), (first_name_2, last_name_2), ..., (first_name_n, last_name_n)]` representing the first and last names of `n` employees. Each name is a non-empty string of uppercase English letters and does not exceed 50 characters in length. # Output - Returns a list of strings, where each string is the generated unique email ID for the corresponding employee in the `names` list. # Examples Example 1 ```python names = [(\\"JOHN\\", \\"DOE\\"), (\\"JANE\\", \\"DOE\\"), (\\"JOHN\\", \\"DOE\\"), (\\"JOHN\\", \\"DOE\\"), (\\"JANE\\", \\"SMITH\\")] assert generate_email_ids(names) == [\\"JOHNDOE\\", \\"JANEDOE\\", \\"JOHNDOE1\\", \\"JOHNDOE2\\", \\"JANESMITH\\"] ``` Example 2 ```python names = [(\\"ALICE\\", \\"JOHNSON\\"), (\\"BOB\\", \\"EVANS\\"), (\\"ALICE\\", \\"JOHNSON\\"), (\\"ALICE\\", \\"JOHNSON\\"), (\\"BOB\\", \\"EVANS\\"), (\\"BOB\\", \\"EVANS\\")] assert generate_email_ids(names) == [\\"ALICEJOHNSON\\", \\"BOBEVANS\\", \\"ALICEJOHNSON1\\", \\"ALICEJOHNSON2\\", \\"BOBEVANS1\\", \\"BOBEVANS2\\"] ``` # Constraints * 1 ≤ n ≤ 10000","solution":"from typing import List, Tuple def generate_email_ids(names: List[Tuple[str, str]]) -> List[str]: email_counter = {} result = [] for first_name, last_name in names: base_name = f\\"{first_name}{last_name}\\" if base_name in email_counter: email_counter[base_name] += 1 email_id = f\\"{base_name}{email_counter[base_name]}\\" else: email_counter[base_name] = 0 email_id = base_name result.append(email_id) return result"},{"question":"You are given an array of integers where each position represents the number of items in a box. You need to perform a set of operations to make the number of items in all the boxes equal. In one operation, you can either add one item to a box or remove one item from a box. Determine the minimum number of operations required to make all the boxes contain the same number of items. ------ Input Format ------ - The first line of input contains a single integer N, denoting the number of boxes. - The second line contains N space-separated integers where the ith integer represents the number of items in the ith box. ------ Output Format ------ Print a single integer, the minimum number of operations required. ------ Constraints ------ 1 ≤ N ≤ 10^5 0 ≤ Number of items in each box ≤ 10^9 ----- Sample Input 1 ------ 4 1 2 3 4 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ To make all boxes contain 2.5 items, we can perform the following operations: - Remove 1 item from the fourth box to make it contain 3 items. - Add 1 item to the first box to make it contain 2 items. - Remove 1 item from the third box to make it contain 3 items. - Add 1 item to the second box to make it contain 3 items. The total number of operations is 4.","solution":"def min_operations_to_equalize_boxes(N, items): Determine the minimum number of operations required to make all boxes contain the same number of items. target = sum(items) // N # We will take the floor division result as a target operations = 0 for item in items: operations += abs(item - target) return operations"},{"question":"As a factory manager, you are tasked with optimizing the distribution of resources among different departments. The factory consists of N departments (numbered from 1 to N), each with specific resource requirements. Additionally, there are M supply stations, each providing a specific amount of resources and can supply to certain departments. You are given a list of departments with their resource requirements and a list of supply stations with their resource capabilities and the departments they supply to. Your goal is to determine if it is possible to fully meet the resource requirements of all departments using the provided supply stations. If it is possible, output \\"YES\\". Otherwise, output \\"NO\\". Example 1: Input: N = 3 M = 2 requirements = [10, 20, 30] stations = [(40, [1, 2]), (30, [3])] Output: YES Explanation: - Station 1 can supply 40 units of resources to departments 1 and 2. - Station 2 can supply 30 units of resources to department 3. - All resource requirements can be met. Example 2: Input: N = 3 M = 2 requirements = [10, 20, 30] stations = [(20, [1, 2]), (20, [2, 3])] Output: NO Explanation: - Station 1 can only supply 20 units of resources and station 2 can only supply 20 units of resources. - Department 3 cannot get the 30 units required from either station. Your Task: You do not need to read input or print anything. Your task is to complete the function isResourceDistributionPossible() which takes integers N, M, a list of integers requirements, and a list of tuples stations. Each tuple in stations contains an integer representing the resource capacity and a list of integers representing the departments the station can supply to. The function should return \\"YES\\" if it is possible to meet all resource requirements, and \\"NO\\" otherwise. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N) Constraints: 1 <= N, M <= 100 1 <= requirements[i], capacity[i] <= 1000","solution":"def isResourceDistributionPossible(N, M, requirements, stations): from collections import defaultdict remaining_requirements = requirements[:] supply_by_department = defaultdict(int) for capacity, deps in stations: for dep in deps: supply_by_department[dep - 1] += capacity for i in range(N): if remaining_requirements[i] > supply_by_department[i]: return \\"NO\\" return \\"YES\\""},{"question":"Aditya is building a robot to traverse a grid of square cells, which can be represented as a Cartesian plane. The robot has a set of specific commands that it follows to move between cells: - \'U\' moves the robot up by one cell (y increases by 1). - \'D\' moves the robot down by one cell (y decreases by 1). - \'L\' moves the robot left by one cell (x decreases by 1). - \'R\' moves the robot right by one cell (x increases by 1). The robot starts at the origin cell (0, 0). However, there are some cells designated as obstacles which the robot cannot enter. Aditya needs to determine if after following a sequence of commands, the robot will end its journey back at the origin. Given the initial position of the robot, a sequence of commands, and a list of obstacle cells, help Aditya figure out if the robot will return to the origin (0, 0) without running into any obstacles during its journey. # Input - The first line contains one integer n (1 ≤ n ≤ 105), the number of commands. - The second line contains a string of n characters, each of which is either \'U\', \'D\', \'L\' or \'R\'. - The third line contains one integer m (0 ≤ m ≤ 105), the number of obstacle cells. - Each of the following m lines contains two space-separated integers xi and yi, the coordinates of an obstacle cell (-106 ≤ xi, yi ≤ 106). # Output - Print \\"YES\\" if the robot returns to the origin after executing the commands without hitting any obstacles. - Print \\"NO\\" if the robot does not return to the origin or if it hits an obstacle during its journey. # Examples Input ``` 4 UUDD 1 0 1 ``` Output ``` NO ``` Input ``` 6 UUDDLR 0 ``` Output ``` YES ``` Input ``` 8 UUDDLRLR 2 1 0 -1 0 ``` Output ``` NO ```","solution":"def will_robot_return_to_origin(n, commands, m, obstacles): position = (0, 0) obstacles_set = set() for obstacle in obstacles: obstacles_set.add(tuple(obstacle)) move_map = { \'U\': (0, 1), \'D\': (0, -1), \'L\': (-1, 0), \'R\': (1, 0) } for command in commands: dx, dy = move_map[command] new_position = (position[0] + dx, position[1] + dy) if new_position in obstacles_set: return \\"NO\\" position = new_position return \\"YES\\" if position == (0, 0) else \\"NO\\""},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). A \\"Super Palindrome\\" is defined as a palindrome that remains a palindrome even when read in reverse when represented as a string of words. For example, the string \\"madam racecar madam\\" is a Super Palindrome because: 1. Each word is a palindrome individually: \\"madam\\", \\"racecar\\". 2. Reading the whole string in reverse also results in \\"madam racecar madam\\". Given a string, check if it is a Super Palindrome or not. If it is a Super Palindrome, return true. Otherwise, return false. ------ Input Format ------ - The input consists of a single line containing a string S. - S consists of lowercase alphabetic characters and spaces. ------ Output Format ------ - Output a single line with the word \\"true\\" if the string is a Super Palindrome, or \\"false\\" otherwise. ------ Constraints ------ 1 ≤ |S| ≤ 10^{6} ----- Sample Input 1 ------ madam racecar madam ----- Sample Output 1 ------ true ----- Sample Input 2 ------ hello olleh ----- Sample Output 2 ------ false ----- Explanation 1 ------ In the first example, \\"madam racecar madam\\" is a Super Palindrome because each word is a palindrome by itself, and reading the string in reverse still matches the original string. In the second example, the string \\"hello olleh\\" is not a Super Palindrome because while \\"olleh\\" is the reverse of \\"hello\\", neither of these words on their own form a palindrome.","solution":"def is_super_palindrome(s): Check if the given string is a Super Palindrome. # Split the string into words words = s.split() # Check if each word is a palindrome for word in words: if word != word[::-1]: return \\"false\\" # Check if the string read as a whole in reverse matches the original if s == \' \'.join(reversed(words)): return \\"true\\" else: return \\"false\\""},{"question":"Three closely knit neighborhoods have decided to collectively monitor and manage the speed of the vehicles passing through their respective areas. Each neighborhood sends its data to a central server. The server receives updates from each neighborhood in real-time in the form of average speeds of the vehicles passing through. The server needs to determine: - The maximum speed recorded by each neighborhood. - The neighborhood with the highest speed at the end of a given time period. - The normalized speeds for each neighborhood, where the normalization factor is a user-defined constant `N` such that each neighborhood’s speeds are divided by `N`. Your task is to write a function that processes this data and provides the required information. Input Your function will receive a list of dictionaries and a normalization factor `N`: - Each dictionary corresponds to one neighborhood and has the following keys: * `neighborhood`: a unique identifier of the neighborhood given as a string * `speeds`: a list of positive integers representing the average speeds recorded - A positive integer `N` used for normalizing the speeds. Output The function should return a tuple containing the following three items: - A dictionary where each key is a neighborhood and each value is the maximum speed recorded for that neighborhood. - The identifier of the neighborhood with the highest recorded speed. - A list of lists where each sublist corresponds to a neighborhood, containing the normalized speeds in the same order as provided. Example Data received: ```python data = [ {\\"neighborhood\\": \\"A\\", \\"speeds\\": [45, 55, 60, 50]}, {\\"neighborhood\\": \\"B\\", \\"speeds\\": [70, 65, 75, 80]}, {\\"neighborhood\\": \\"C\\", \\"speeds\\": [85, 95, 90]} ] N = 10 ``` Function call: ```python process_speeds(data, N) ``` Output: - A dictionary of maximum speeds: `{\\"A\\": 60, \\"B\\": 80, \\"C\\": 95}` - The identifier of the neighborhood with the highest speed: `\\"C\\"` - A list of normalized speeds: `[[4.5, 5.5, 6.0, 5.0], [7.0, 6.5, 7.5, 8.0], [8.5, 9.5, 9.0]]` Function Signature (Python): ```python def process_speeds(data: List[Dict[str, Any]], N: int) -> Tuple[Dict[str, int], str, List[List[float]]]: pass ```","solution":"from typing import List, Dict, Any, Tuple def process_speeds(data: List[Dict[str, Any]], N: int) -> Tuple[Dict[str, int], str, List[List[float]]]: max_speeds = {} highest_speed = 0 neighborhood_with_highest_speed = \\"\\" normalized_speeds = [] for neighborhood_data in data: neighborhood = neighborhood_data[\\"neighborhood\\"] speeds = neighborhood_data[\\"speeds\\"] max_speeds[neighborhood] = max(speeds) if max(speeds) > highest_speed: highest_speed = max(speeds) neighborhood_with_highest_speed = neighborhood normalized_speeds.append([speed / N for speed in speeds]) return max_speeds, neighborhood_with_highest_speed, normalized_speeds"},{"question":"Email Validation Jim is developing a new email application and needs to perform email validation checks on the user-input email addresses. The email address needs to follow these rules: 1. It must contain exactly one \'@\' symbol. The \'@\' symbol cannot be the first or last character. 2. The domain name following the \'@\' must contain at least one \'.\' symbol. The \'.\' symbol cannot be the first or last character of the domain, and there should be no consecutive dots. 3. The username (portion before \'@\') can only contain letters (a-z, A-Z), digits (0-9), and exactly one \'.\' symbol. The \'.\' symbol cannot be the first or last character, and there can be no consecutive dots. Your task is to implement a function that takes an email address as input and checks if it is valid according to the above rules. Function signature: ```python def is_valid_email(email: str) -> bool: # your code here ``` Input format: - A string that represents an email address. Output format: - Return `True` if the email address is valid according to the given rules, otherwise return `False`. Constraints: - The email address will be a string with a length between 1 and 1000 characters inclusive. - Assume the email will consist only of printable ASCII characters. SAMPLE INPUT 1 \\"test.email@example.com\\" SAMPLE OUTPUT 1 True SAMPLE INPUT 2 \\"test..email@example.com\\" SAMPLE OUTPUT 2 False SAMPLE INPUT 3 \\"test.email@.com\\" SAMPLE OUTPUT 3 False","solution":"def is_valid_email(email: str) -> bool: Validates the email address based on the given rules. if \'@\' not in email or email.count(\'@\') != 1: return False username, domain = email.split(\'@\') # Validate username if not username or not (username[0].isalnum() and username[-1].isalnum() and \'..\' not in username and username.count(\'.\') <= 1): return False for char in username: if not (char.isalnum() or char == \'.\'): return False # Validate domain if not domain or domain.count(\'.\') < 1 or domain[0] == \'.\' or domain[-1] == \'.\' or \'..\' in domain: return False for char in domain: if not (char.isalnum() or char in [\'.\', \'-\']): return False return True"},{"question":"# Shopping List Price Calculator You are developing a shopping list price calculator for a local grocery store. The store offers certain bulk discounts on items based on their quantities. Each item in the store is identified by its unique item ID and has a base unit price. The store offers three types of discounts: - Buy one get one free (BOGO) - Buy two get one free (BTGO) - Percentage discount on bulk purchase The information about the items, their prices, and applicable discounts are provided in a list of tuples. Each tuple contains the item ID, the base unit price, the type of discount, and any additional parameters for the discount. # Task Write a function that calculates the total cost of a shopping list. Given the shopping list and the discount information, return the total cost applying the discounts appropriately. # Input - `items` - a list of tuples where each tuple contains: - `item_id` (str): unique identifier of the item - `price` (float): base unit price of the item - `discount_type` (str): type of discount (\\"NONE\\", \\"BOGO\\", \\"BTGO\\", \\"PERCENT\\") - `discount_param` (float): parameter for the discount, such as the percent off for PERCENT type - `shopping_list` - a list of tuples where each tuple contains: - `item_id` (str): unique identifier of the item - `quantity` (int): quantity of the item in the shopping list # Output The total cost of the shopping list after applying the discounts. ```python def calculate_total_cost(items, shopping_list) -> float: pass ``` # Example Given the `items`: ``` items = [ (\'apple\', 1.0, \'NONE\', 0.0), (\'banana\', 2.0, \'BOGO\', 0.0), (\'orange\', 1.5, \'BTGO\', 0.0), (\'grape\', 3.0, \'PERCENT\', 20.0) ] ``` And the `shopping_list`: ``` shopping_list = [ (\'apple\', 3), (\'banana\', 4), (\'orange\', 5), (\'grape\', 6) ] ``` - Apples: 1.0 * 3 = 3.0 - Bananas: Buy 2 get 2 free, so you only pay for 2. 2.0 * 2 = 4.0 - Oranges: Buy 2 get 1 free, so you only pay for 4. 1.5 * 4 = 6.0 - Grapes: 20% off for bulk purchase. 3.0 * 6 * 0.8 = 14.4 Total cost: 3.0 + 4.0 + 6.0 + 14.4 = 27.4 ```python calculate_total_cost(items, shopping_list) # returns 27.4 ```","solution":"def calculate_total_cost(items, shopping_list) -> float: Calculates the total cost of the shopping list applying discounts from the items list. Parameters: - items (list of tuples): (item_id, price, discount_type, discount_param) - shopping_list (list of tuples): (item_id, quantity) Returns: - float: total cost after applying discounts # Creating a dictionary for easy lookup of item details item_info = {item_id: (price, discount_type, discount_param) for item_id, price, discount_type, discount_param in items} total_cost = 0.0 for item_id, quantity in shopping_list: if item_id in item_info: price, discount_type, discount_param = item_info[item_id] if discount_type == \'NONE\': total_cost += price * quantity elif discount_type == \'BOGO\': # Buy One Get One Free total_cost += price * (quantity // 2 + quantity % 2) elif discount_type == \'BTGO\': # Buy Two Get One Free total_cost += price * (2 * (quantity // 3) + (quantity % 3)) elif discount_type == \'PERCENT\': # Bulk percentage discount percentage_discount = discount_param / 100.0 total_cost += price * quantity * (1 - percentage_discount) return round(total_cost, 2)"},{"question":"Given an array A of length N and an integer K, determine the lexicographically smallest sequence that can be obtained by applying the following operation at most K times: Replace any element in the array with any positive integer. ------ Input Format ------ - The first line of input contains a single integer T - the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and K - the length of array A and the number of operations allowed respectively. - The second line of each test case contains N space-separated integers A_{1},A_{2},…,A_{N} representing the array A. ------ Output Format ------ For each test case, output the lexicographically smallest sequence that can be obtained after applying the operation at most K times. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{5} 1 ≤ K ≤ N 1 ≤ A_{i} ≤ 10^{9} - Sum of N does not exceed 2cdot 10^{5} over all test cases. ------ Sample Input 1 ------ 2 3 1 4 3 2 4 2 6 5 3 1 ------ Sample Output 1 ------ 2 3 2 1 1 3 1 ------ Explanation 1 ------ - Test Case 1: We can replace the first element \'4\' with \'2\', resulting in the smallest sequence \'2 3 2\'. - Test Case 2: We can replace the first and second elements \'6\' and \'5\' with \'1\', resulting in the smallest sequence \'1 1 3 1\'.","solution":"def lexicographically_smallest_sequence(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] A = test_cases[i][1] changes = 0 for j in range(N): if changes < K and A[j] != 1: A[j] = 1 changes += 1 if changes == K: break results.append(\\" \\".join(map(str, A))) return results # Example to read input and output the results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) K = int(data[index + 1]) index += 2 A = list(map(int, data[index:index + N])) index += N test_cases.append(((N, K), A)) results = lexicographically_smallest_sequence(T, test_cases) for result in results: print(result)"},{"question":"Tom loves to explore new matrix transformations and enjoy coding challenges. He has recently come up with a unique series of operations to perform on matrices. He wishes to test the coding skills of his friends by making them solve his matrix problem. The problem is defined as follows: Given an N x N matrix, perform Q queries on this matrix. The queries can be of the following types: 1) 1 x y v --> Add value v to the matrix element at position (x, y). 2) 2 x y v --> Subtract value v from the matrix element at position (x, y). 3) 3 x y v --> Set the matrix element at position (x, y) to value v. 4) 4 x1 y1 x2 y2 --> Print the sum of all matrix elements from position (x1, y1) to (x2, y2) inclusive. 5) 5 x1 y1 x2 y2 --> Print the sum of squares of all matrix elements from position (x1, y1) to (x2, y2) inclusive. Let\'s see if you can solve Tom\'s matrix problem! Input: First line contains N and Q, separated by a single space, denoting the size of the matrix and the number of queries respectively. Next N lines contain N space-separated integers each, representing the initial matrix elements. Then Q lines follow. There can be 4 or 5 space-separated integers in each line as described above. For queries of type 1, 2, and 3, there will be 4 integers, separated by a single space. For queries of type 4 and 5, there will be 5 integers, separated by a single space. Output: Print the answer for queries of type 4 and 5 in a new line. Constraints: 1 ≤ N ≤ 500 1 ≤ matrix element ≤ 100 1 ≤ Q ≤ 10^5 1 ≤ x, y, x1, y1, x2, y2 ≤ N 1 ≤ v ≤ 100 SAMPLE INPUT 3 5 1 2 3 4 5 6 7 8 9 1 1 1 2 2 2 2 1 3 3 3 10 4 1 1 2 2 5 1 1 3 3 SAMPLE OUTPUT 19 360 Explanation: Initial matrix: 1 2 3 4 5 6 7 8 9 After the first query: 3 2 3 4 5 6 7 8 9 (Add 2 to element at (1, 1)) After the second query: 3 2 3 4 4 6 7 8 9 (Subtract 1 from element at (2, 2)) After the third query: 3 2 3 4 4 6 7 8 10 (Set element at (3, 3) to 10) Sum of elements from (1,1) to (2,2): 3 + 2 + 4 + 4 = 13 Sum of squares of elements from (1,1) to (3,3): 3^2 + 2^2 + 3^2 + 4^2 + 4^2 + 6^2 + 7^2 + 8^2 + 10^2 = 9 + 4 + 9 + 16 + 16 + 36 + 49 + 64 + 100 = 303","solution":"class MatrixOperations: def __init__(self, N, matrix): self.N = N self.matrix = matrix def add_value(self, x, y, v): self.matrix[x-1][y-1] += v def subtract_value(self, x, y, v): self.matrix[x-1][y-1] -= v def set_value(self, x, y, v): self.matrix[x-1][y-1] = v def sum_submatrix(self, x1, y1, x2, y2): result = 0 for i in range(x1-1, x2): for j in range(y1-1, y2): result += self.matrix[i][j] return result def sum_squares_submatrix(self, x1, y1, x2, y2): result = 0 for i in range(x1-1, x2): for j in range(y1-1, y2): result += self.matrix[i][j] ** 2 return result def process_matrix_operations(N, Q, matrix, queries): matrix_ops = MatrixOperations(N, matrix) results = [] for query in queries: parts = list(map(int, query.split())) if parts[0] == 1: matrix_ops.add_value(parts[1], parts[2], parts[3]) elif parts[0] == 2: matrix_ops.subtract_value(parts[1], parts[2], parts[3]) elif parts[0] == 3: matrix_ops.set_value(parts[1], parts[2], parts[3]) elif parts[0] == 4: result = matrix_ops.sum_submatrix(parts[1], parts[2], parts[3], parts[4]) results.append(result) elif parts[0] == 5: result = matrix_ops.sum_squares_submatrix(parts[1], parts[2], parts[3], parts[4]) results.append(result) return results"},{"question":"A software company is hosting a programming competition, and they need to distribute prizes to the top contestants in a fair manner. The prizes are distributed in such a way that the value of each prize increases with each rank. Given a list of contestants and their scores, the ranking should follow this pattern: 1. The highest score gets the highest rank (1st place). 2. In the case of a tie, the tied contestants share the same rank. 3. The subsequent rank skips the number of tied contestants. For example, if two contestants are tied for 2nd place, the next rank assigned will be 4th place. Your task is to write a program that assigns ranks to the contestants based on their scores and then prints the ranks in the order contestants appear in the input list. ------ Input ------ The input starts with an integer t, the number of test cases (1 ≤ t ≤ 100). Each test case begins with a line containing an integer n, the number of contestants (1 ≤ n ≤ 1000). The next line contains n space-separated integers representing the scores of the contestants. ------ Output ------ For each test case, output a single line containing the ranks of the contestants in their original order of appearance. Each rank should be separated by a single space. ----- Sample Input 1 ------ 2 5 50 100 50 75 25 4 80 80 70 60 ----- Sample Output 1 ------ 3 1 3 2 5 1 1 3 4","solution":"def assign_ranks(test_cases): results = [] for scores in test_cases: sorted_scores = sorted(scores, reverse=True) rank_dict = {} rank = 1 for i, score in enumerate(sorted_scores): if score not in rank_dict: rank_dict[score] = rank rank += 1 ranks = [rank_dict[score] for score in scores] results.append(\\" \\".join(map(str, ranks))) return results # Helper function to parse input and provide arguments to the main function def main(input_data): lines = input_data.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) scores = list(map(int, lines[index + 1].split())) test_cases.append(scores) index += 2 return assign_ranks(test_cases)"},{"question":"Given an array of integers arr of size n, and an integer k, your task is to reverse the order of the elements in the array from index k to the end. Develop a function that performs this operation in-place. Example 1: Input: n = 5, k = 2 arr = [1, 2, 3, 4, 5] Output: 1 2 5 4 3 Explanation: The elements from index 2 to the end are reversed, thus the output is [1, 2, 5, 4, 3]. Example 2: Input: n = 4, k = 1 arr = [7, 6, 5, 4] Output: 7 4 5 6 Explanation: The elements from index 1 to the end are reversed, thus the output is [7, 4, 5, 6]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function reverseFromIndex() which takes the integer array arr and integers n and k as input parameters and returns void. You need to modify the array in-place. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 1000 0 ≤ k < n 1 ≤ arr[i] ≤ 1000","solution":"def reverseFromIndex(arr, n, k): Reverse the order of elements in the array from index k to the end. :param arr: List[int], array of integers :param n: int, size of the array :param k: int, starting index from which to reverse the array # Reverse the portion of the array from index k to the end arr[k:] = arr[k:][::-1]"},{"question":"Alex has discovered a set of operations to transform strings and now seeks your help to verify if it is possible to transform one string into another using these operations. You are given two strings s and t of equal length n. The allowed operations are as follows: 1. Choose any two indices (i, j) such that 1 le i < j le n. 2. Swap the characters at indices i and j. 3. Replace the character at index i with the character \'A\', \'B\', or \'C\'. You can perform this replace operation only once. Based on these operations, determine if it is feasible to transform string s into string t. # Input - Each test contains multiple test cases. - The first line contains the number of test cases t (1 le t le 10^4). The description of the test cases follows. - The first line of each test case contains a single integer n (1 le n le 1000) — the length of the strings s and t. - The second line of each test case contains the string s. - The third line of each test case contains the string t. # Output For each test case, output \\"YES\\" if it is possible to transform string s into string t using the described operations, or \\"NO\\" if it is impossible. You can print each letter in any case (upper or lower). # Example Input ``` 4 5 abcde edcba 3 aaa bbb 4 abcd abcd 6 abcabc acbbca ``` Output ``` YES NO YES YES ``` # Note In the first example, you can swap indices 1 and 5, 2 and 4 to get string \\"edcba\\". In the second example, you cannot make \\"aaa\\" become \\"bbb\\" even with one replace operation. In the third example, no operations are needed as the strings are already equal. In the fourth example, multiple swaps and one replace operation can transform \\"abcabc\\" into \\"acbbca\\".","solution":"def can_transform_string(s, t): Determines if string s can be transformed into string t using the allowed operations. if s == t: return \\"YES\\" # We can swap characters, so we only need to check if s and t have the same set of characters s_counts = [0] * 26 t_counts = [0] * 26 for char in s: s_counts[ord(char) - ord(\'a\')] += 1 for char in t: t_counts[ord(char) - ord(\'a\')] += 1 # Check if they have the exact same character counts if s_counts != t_counts: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): results = [] for n, s, t in test_cases: result = can_transform_string(s, t) results.append(result) return results"},{"question":"Valera is engrossed in another puzzling game. This time, he finds himself challenged with rows and sequences. He initially has an array of n integers, and he can perform operations on this array. Each operation allows him to choose any two adjacent elements and swap them. Now, Valera wants to know the minimum number of such adjacent swaps needed to make the array sorted in non-decreasing order. Your task is to calculate this minimum number of adjacent swaps required to sort the array. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a1, a2, …, an (1 ≤ ai ≤ 1000) — the elements of the array. Output Print a single integer — the minimum number of adjacent swaps needed to sort the array in non-decreasing order. Examples Input 5 3 1 2 4 5 Output 2 Input 3 3 2 1 Output 3","solution":"def min_adjacent_swaps(n, arr): Returns the minimum number of adjacent swaps required to sort the array in non-decreasing order. total_swaps = 0 sorted_arr = sorted(arr) for i in range(n): for j in range(n-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] total_swaps += 1 return total_swaps"},{"question":"Write a function that converts a given time from 12-hour format to 24-hour format. The input will be a time string in the format \\"hh:mm AM/PM\\". The output should be a string representing the time in 24-hour format \\"HH:MM\\". # Input - A valid time in the format \\"hh:mm AM/PM\\" (e.g., \\"02:30 PM\\" or \\"11:45 AM\\"). # Output - A string representing the time in 24-hour format (e.g., \\"14:30\\" or \\"11:45\\"). # Constraints - The input string will always be in the correct format. # Examples ``` \\"02:30 PM\\" => \\"14:30\\" \\"11:45 AM\\" => \\"11:45\\" \\"12:00 AM\\" => \\"00:00\\" \\"12:00 PM\\" => \\"12:00\\" ```","solution":"def convert_to_24_hour_format(time_str): Converts a given time from 12-hour format to 24-hour format. Parameters: time_str (str): Time in the format \\"hh:mm AM/PM\\". Returns: str: Time in the 24-hour format \\"HH:MM\\". # Split the time string into time and period (AM/PM) time, period = time_str.split() hours, minutes = map(int, time.split(\\":\\")) # Convert hours to 24-hour format based on the period if period == \\"AM\\": if hours == 12: hours = 0 elif period == \\"PM\\": if hours != 12: hours += 12 # Return the time in 24-hour format return f\\"{hours:02}:{minutes:02}\\""},{"question":"A mysterious hacker has been sending encoded messages to different people across the globe. The encoding works in a specific way: each letter of the message is shifted by a certain constant integer value, wrapping around the alphabet if necessary. For example, with a shift of 1, \'A\' becomes \'B\', \'B\' becomes \'C\', and so on, with \'Z\' becoming \'A\'. This shift applies to both uppercase and lowercase letters only. Your task is to decode the incoming messages. Input: The input will consist of the first line containing the number of test cases ‘t’. Each of the following \'t\' lines contains an integer \'k\' and an encoded message. The integer \'k\' is the shift amount that was used to encode the message. Output: For each test case, print the decoded message. Example: Input: 2 3 Khoor Zruog 1 Mjlf! Uifsf! Output: Hello World Like! There! Note: - Assume that \'k\' is always between 0 and 25. - Spaces and punctuation marks are not encrypted and should remain unchanged.","solution":"def decode_message(k, encoded_message): Decodes an encoded message using Caesar cipher shift technique by \'k\' positions. decoded_message = [] for char in encoded_message: if \'A\' <= char <= \'Z\': # Uppercase letters new_char = chr((ord(char) - ord(\'A\') - k) % 26 + ord(\'A\')) elif \'a\' <= char <= \'z\': # Lowercase letters new_char = chr((ord(char) - ord(\'a\') - k) % 26 + ord(\'a\')) else: # Other characters remain unchanged new_char = char decoded_message.append(new_char) return \'\'.join(decoded_message) def decode_messages(t, messages): Decodes multiple messages given shift amount and encoded message for each. results = [] for k, encoded_message in messages: decoded_message = decode_message(k, encoded_message) results.append(decoded_message) return results"},{"question":"You are given an array a of n integers, and an integer t. Your task is to transform the array such that the sum of its elements becomes exactly t. You can perform the following operation any number of times (including zero): - Select any index i (1 ≤ i ≤ n) and increment the value of ai by 1 (ai := ai + 1). Output the minimum number of operations required to make the sum of the array exactly t. If it is not possible, output -1. Input The first line of the input contains two integers n and t (1 ≤ n ≤ 100, -104 ≤ t ≤ 104). The second line of the input contains n space-separated integers, the elements of the array a (|ai| ≤ 100). Output Output a single integer representing the minimum number of operations required, or -1 if it is not possible. Examples Input 4 10 1 2 3 4 Output 0 Input 3 5 -1 -2 -3 Output 11 Input 2 -5 2 2 Output -1 Note In the first example, the sum of the array is already 10, so no operations are needed. In the second example, the sum of the array is -6. To make it 5, we need to increase the sum by 11, so 11 operations are needed. In the third example, it is impossible to decrease the sum from 4 to -5 by only incrementing the array elements.","solution":"def min_operations_to_transform_sum(n, t, a): Returns the minimum number of operations required to make the sum of the array exactly t, or -1 if it is not possible. current_sum = sum(a) if current_sum > t: return -1 else: return t - current_sum"},{"question":"You are given a list of unique words and your goal is to find the word with the **maximum product of word lengths** where the two words do not share any common characters. Write a function that takes a list of words and returns the maximum product of lengths. If no such pair of words exist, return 0. Example Consider the list `[\\"abcw\\", \\"baz\\", \\"foo\\", \\"bar\\", \\"fxyz\\", \\"abcdef\\"]`. - The pairs of words \\"abcw\\" and \\"fxyz\\" do not share any common characters, and their product of lengths is `4 * 4 = 16`. - The pairs of words \\"foo\\" and \\"baz\\" do not share any common characters, their product of lengths is `3 * 3 = 9`. - The pairs of words \\"baz\\" and \\"fxyz\\" do not share any common characters, and their product of lengths is `3 * 4 = 12`. The function should return `16` for the given example, as the maximum product of lengths is `16`. Input - A list of words, where each word consists of lowercase English letters. The length of the list and the length of words in the list will not exceed 1000. Output - An integer representing the maximum product of lengths of two words that do not share any common characters. Function Signature ```python def max_product_of_word_lengths(words: List[str]) -> int: # Your code here ``` Constraints - Each word consists of lowercase English letters only. - The list of words will contain at most 1000 words. - Each word will be at most 1000 characters long.","solution":"from typing import List def max_product_of_word_lengths(words: List[str]) -> int: def word_to_bits(word): Converts a word to a bit representation where each bit represents a letter\'s presence in the word. mask = 0 for char in word: mask |= 1 << (ord(char) - ord(\'a\')) return mask bit_masks = [word_to_bits(word) for word in words] max_product = 0 for i in range(len(words)): for j in range(i + 1, len(words)): if bit_masks[i] & bit_masks[j] == 0: # No common characters max_product = max(max_product, len(words[i]) * len(words[j])) return max_product"},{"question":"Given a list of integers, find the next greater element for each element of the list. The next greater element for an element `x` is the first greater number to its right in the list. If no such number exists, output `-1` for that position. For example, given `[4, 5, 2, 10, 8]`, the next greater elements are `[5, 10, 10, -1, -1]`. # Input - A list of integers `nums` with length between `1` and `10^5`. # Output - A list of integers representing the next greater element for each position in the input list. # Example ```python input: [4, 5, 2, 10, 8] output: [5, 10, 10, -1, -1] ``` ```python input: [3, 7, 1, 7, 8, 4] output: [7, 8, 7, 8, -1, -1] ``` # Note You are required to achieve a time complexity of O(n). Hence, avoid trivial solutions with nested loops that result in O(n^2) time complexity.","solution":"def next_greater_elements(nums): For each element in nums, find the next greater element to its right. If no such element exists, return -1 for that position. Parameters: nums (List[int]): A list of integers. Returns: List[int]: A list of integers representing the next greater element for each position. stack = [] result = [-1] * len(nums) for i in range(len(nums)): # Maintain a stack of indexes of elements for which we are still looking for the next greater element while stack and nums[stack[-1]] < nums[i]: result[stack.pop()] = nums[i] stack.append(i) return result"},{"question":"You are given a list of N integers and Q queries. Each query contains an integer X. The task is to determine if you can select a contiguous subarray from the list such that the maximum element of the subarray is equal to X. ------ Input Format ------ - The first line of input will contain a single integer N denoting the number of integers in the list. - The second line contains N space-separated integers, representing the list of integers. - The third line contains an integer Q, denoting the number of queries. - The next Q lines each contain an integer X for which you need to determine if a contiguous subarray exists with the maximum element equal to X. ------ Output Format ------ For each query, output the string YES if such a subarray exists, and NO if it does not. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤ N, Q ≤ 10^{5} -10^{9} ≤ list elements, X ≤ 10^{9} ------ Sample Input 1 ------ 5 1 3 2 4 5 3 3 6 4 ------ Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Query 1: The contiguous subarray [3] has the maximum element 3, so the answer is YES. Query 2: There is no subarray with the maximum element equal to 6, so the answer is NO. Query 3: The contiguous subarray [4] has the maximum element 4, so the answer is YES.","solution":"def can_find_subarray_with_max_element(arr, queries): Determines for each query if there\'s a contiguous subarray in arr with the maximum element equal to the queried value. Arguments: arr -- list of integers queries -- list of integers representing the queries Returns: A list of strings \\"YES\\" or \\"NO\\" for each query. # Create a set of all elements in arr element_set = set(arr) results = [] # Check each query if it\'s present in the element_set for query in queries: if query in element_set: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a string containing an arithmetic expression with exactly one operand (\'+\', \'-\', \'*\', \'/\'), write a function to compute the result of this expression. The input string will be in the format \\"a op b\\", where a and b are integers and op is one of the four arithmetic operators. Ensure the function handles division by zero appropriately by returning the string \\"undefined\\" if an attempt to divide by zero is encountered. For example, given the input \\"4 + 5\\", the function should return 9. For the input \\"10 / 2\\", the function should return 5. However, for the input \\"10 / 0\\", the function should return \\"undefined\\".","solution":"def compute_expression(expression): Computes the result of an arithmetic expression with exactly one operand. Parameters: expression (str): A string containing an arithmetic expression in the format \\"a op b\\" Returns: int/str: The result of the arithmetic operation, or \\"undefined\\" if dividing by zero a, op, b = expression.split() a = int(a) b = int(b) if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return \\"undefined\\" if b == 0 else a / b else: raise ValueError(\\"Invalid operator\\")"},{"question":"Max is playing with dominoes at home. He has a collection of N dominoes, where a domino consists of two sides. Each side has an integer between 0 and 6 inclusive. Max wants to know how many pairs of dominoes in his collection are identical, meaning both sides have the same numbers, irrespective of which side is on top. -----Constraints----- - 1 ≤ N ≤ 10^5 - Each side of a domino is an integer between 0 and 6 inclusive. -----Input----- The input is given from Standard Input in the following format: N a_1 b_1 a_2 b_2 ... a_N b_N where each pair a_i, b_i represents the values on the two sides of the i-th domino. -----Output----- Print the number of identical pairs of dominoes. -----Sample Input----- 5 2 3 3 2 1 4 4 1 2 2 -----Sample Output----- 2 Explanation: The given domino pairs are [(2, 3), (3, 2), (1, 4), (4, 1), (2, 2)]. There are 2 identical pairs: (2, 3) is identical to (3, 2) and (1, 4) is identical to (4, 1). Note: - A domino (a, b) is considered identical to another domino (b, a). - (2, 2) is only identical to another (2, 2).","solution":"def count_identical_domino_pairs(N, dominoes): from collections import defaultdict count_map = defaultdict(int) identical_pairs = 0 for a, b in dominoes: # Sort the pair to handle the rotation sorted_pair = tuple(sorted((a, b))) count_map[sorted_pair] += 1 for count in count_map.values(): if count > 1: # calculate the number of pairs identical_pairs += (count * (count - 1)) // 2 return identical_pairs"},{"question":"Julia is creating a file storage system for a new cloud service called CloudSafe. Each file in this system has a unique ID, a size (in bytes), and a parent directory. Directories can contain both files and other directories, leading to a hierarchical directory structure. Julia needs a function to perform various queries on this hierarchical file system. Here is a summary of the requirements: 1. `ADD_FILE parent_id file_id size`: Adds a file with given `file_id` and `size` to the directory with `parent_id`. 2. `ADD_DIR parent_id dir_id`: Adds a new directory with `dir_id` under the directory with `parent_id`. 3. `DELETE_ITEM item_id`: Deletes the file or directory with `item_id` and all its contents if it is a directory. 4. `GET_SIZE item_id`: Returns the total size of the file or directory with `item_id`. The size of a directory is the sum of the sizes of all files it contains, directly or indirectly. Your task is to implement the function to process the operations on the file system. # Input The input consists of multiple lines, where each line represents an operation. Each operation follows one of the four formats: - `ADD_FILE parent_id file_id size` - `ADD_DIR parent_id dir_id` - `DELETE_ITEM item_id` - `GET_SIZE item_id` The input ends with a line containing the word `END`. # Output For each `GET_SIZE` operation, output a single line with the size corresponding to the `item_id`. # Constraints - There will be at most `10^5` operations. - A `file_id` or `dir_id` will be a string of length `1` to `10`. - `size` will be an integer in the range `[1, 10^9]`. # Example Input: ``` ADD_DIR root dir1 ADD_FILE dir1 file1 100 ADD_FILE dir1 file2 200 ADD_DIR dir1 dir2 ADD_FILE dir2 file3 300 GET_SIZE dir1 DELETE_ITEM dir2 GET_SIZE dir1 END ``` Output: ``` 600 300 ``` # Explanation Initially, `dir1` contains two files (`file1` and `file2` of sizes 100 and 200 respectively) and one subdirectory `dir2`. The `dir2` contains one file `file3` of size 300. Thus, the total size of `dir1` is `100 + 200 + 300 = 600`. After deletion of `dir2`, the total size of `dir1` becomes `100 + 200 = 300`. Implement the function to handle the file operations and produce the correct output for `GET_SIZE` queries.","solution":"class FileSystem: def __init__(self): self.dirs = {\'root\': {}} self.files = {} self.sizes = {} def add_file(self, parent_id, file_id, size): if parent_id in self.dirs: self.dirs[parent_id][file_id] = size self.files[file_id] = (parent_id, size) self.update_size(parent_id, size) def add_dir(self, parent_id, dir_id): if parent_id in self.dirs: self.dirs[parent_id][dir_id] = {} self.dirs[dir_id] = {} def delete_item(self, item_id): if item_id in self.files: parent_id, size = self.files[item_id] del self.files[item_id] self.update_size(parent_id, -size) del self.dirs[parent_id][item_id] else: size = self.calculate_size(item_id) parent_id = self.find_parent(item_id) if parent_id: self.update_size(parent_id, -size) del self.dirs[parent_id][item_id] del self.dirs[item_id] def get_size(self, item_id): return self.calculate_size(item_id) def update_size(self, parent_id, size_change): while parent_id: self.sizes[parent_id] = self.sizes.get(parent_id, 0) + size_change parent_id = self.find_parent(parent_id) def calculate_size(self, item_id): if item_id in self.files: return self.files[item_id][1] total_size = 0 if item_id in self.dirs: for k, v in self.dirs[item_id].items(): if isinstance(v, int): total_size += v else: total_size += self.calculate_size(k) return total_size def find_parent(self, item_id): for parent_id, contents in self.dirs.items(): if item_id in contents: return parent_id return None def organize_file_system(operations): fs = FileSystem() results = [] for operation in operations: parts = operation.split() cmd = parts[0] if cmd == \\"ADD_FILE\\": _, parent_id, file_id, size = parts fs.add_file(parent_id, file_id, int(size)) elif cmd == \\"ADD_DIR\\": _, parent_id, dir_id = parts fs.add_dir(parent_id, dir_id) elif cmd == \\"DELETE_ITEM\\": _, item_id = parts fs.delete_item(item_id) elif cmd == \\"GET_SIZE\\": _, item_id = parts results.append(str(fs.get_size(item_id))) return results"},{"question":"A robot is positioned at the origin (0, 0) on a 2D plane and is given a sequence of movements. Each movement is represented by a character: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). The robot moves in the direction indicated by the instructions in the sequence. Given the movements, return the final position of the robot. -----Constraints----- - 1 leq length of movements leq 10^5 - Movements consist only of the characters \'U\', \'D\', \'L\', and \'R\'. -----Input----- Input is given from Standard Input in the following format: movements -----Output----- Print the final position of the robot in the format (x, y). -----Sample Input----- UDLR -----Sample Output----- (0, 0) The robot moves up, down, left, and right, returning to the origin.","solution":"def final_position(movements): x, y = 0, 0 for move in movements: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return (x, y)"},{"question":"You are the caretaker of a rectangular garden, and you need to install a water sprinkler system that ensures every part of the garden gets watered. The garden is divided into a grid of n times m cells, and you can place the sprinklers in such a way that one sprinkler can water the entire row or column at once. Calculate the minimum number of sprinklers required to ensure every cell of the garden is covered. -----Input----- The input consists of two integers n and m, where 1 le n, m le 1000, representing the number of rows and columns in the grid, respectively. -----Output----- Output a single integer which is the minimum number of sprinklers needed. -----Examples----- Sample Input: 3 3 Sample Output: 3 Sample Input: 7 5 Sample Output: 5","solution":"def min_sprinklers(n, m): Returns the minimum number of sprinklers required to water an n x m garden. return min(n, m)"},{"question":"Given an array of integers and a target integer \'K\'. The task is to find whether there are two distinct indices i and j in the array such that the absolute difference between the elements at those indices is exactly K. If such a pair exists, return true; otherwise, return false. Example 1: Input: arr = [1, 5, 3, 4, 2], K = 2 Output: true Explanation: The pairs (1, 3) and (3, 5) have absolute differences of 2. Example 2: Input: arr = [8, 12, 16, 4, 0, 20], K = 4 Output: true Explanation: The pairs (8, 12), (12, 16), and (4, 8) have absolute differences of 4. Example 3: Input: arr = [1, 2, 3, 4, 5], K = 10 Output: false Explanation: No pairs have an absolute difference of 10. Your Task: Complete the function `findPairWithDifference` which takes an array of integers and an integer K, and returns a boolean value indicating whether such a pair exists. Constraints: - 1 <= len(arr) <= 10^4 - -10^5 <= arr[i] <= 10^5 - 0 <= K <= 10^5","solution":"def findPairWithDifference(arr, K): This function returns True if there are two distinct indices i and j in the array such that the absolute difference between arr[i] and arr[j] is exactly K, otherwise returns False. seen = set() for num in arr: if (num + K) in seen or (num - K) in seen: return True seen.add(num) return False"},{"question":"Your task is to simulate the sequence defined in the remainder of the problem description. This sequence starts with the first element set to 0 (i.e., the sequence is initially [0]). The commands will manipulate the sequence in various ways. Each command type is described below: 0: This command is given with an integer x. If this command is given, the integer x is appended to the end of the sequence. That is, if the sequence has n elements, the next element will be x. 1: If this command is given, one element in the sequence is deleted. The value at the index specified by the command\'s second integer, y, will be deleted. If y is not a valid index, ignore this command. If valid, the element at the y-th index (0-based) will be removed. 2: This query is given with an integer k. If this command is given, you should compute and print the k-th element of the sequence when sorted in ascending order. If k is not a valid index, print \\"Invalid query\\". 3: This query is given with an integer k. If this command is given, you should compute and print the k-th element of the sequence when sorted in descending order. If k is not a valid index, print \\"Invalid query\\". 4: This command is given with an integer x and replaces the maximum element of the sequence with x. If the sequence has multiple maximum elements, replace the first occurrence. 5: This command is given with an integer y and an integer x. If this command is given, insert the integer x at the y-th index. If y is not a valid index, append x at the end of the sequence. Input Input consists of multiple test cases. The first line is the number of commands. Following lines are commands. n command0 ... commandi ... commandn-1 You can assume that the total number of commands in the input data is less than 200001 and the length of the sequence does not exceed 20000. Each \'commandi\' is in the form described above. Output For each query (commands 2 and 3), you should output the computed value. At the end of processing all commands, you should print the final sequence. Example Input 9 0 5 0 3 0 1 2 1 2 3 3 2 4 10 5 1 7 1 10 3 0 Output 1 3 5 Invalid query 10 [0, 7, 3, 1, 10, 5]","solution":"def simulate_commands(commands): sequence = [0] results = [] for command in commands: parts = command.split() cmd_type = int(parts[0]) if cmd_type == 0: x = int(parts[1]) sequence.append(x) elif cmd_type == 1: y = int(parts[1]) if 0 <= y < len(sequence): del sequence[y] elif cmd_type == 2: k = int(parts[1]) if 0 <= k < len(sequence): results.append(sorted(sequence)[k]) else: results.append(\\"Invalid query\\") elif cmd_type == 3: k = int(parts[1]) if 0 <= k < len(sequence): results.append(sorted(sequence, reverse=True)[k]) else: results.append(\\"Invalid query\\") elif cmd_type == 4: x = int(parts[1]) if sequence: max_value = max(sequence) # Replace the first occurrence of max value for i in range(len(sequence)): if sequence[i] == max_value: sequence[i] = x break elif cmd_type == 5: y = int(parts[1]) x = int(parts[2]) if 0 <= y < len(sequence): sequence.insert(y, x) else: sequence.append(x) return results, sequence # Example usage: commands = [ \\"0 5\\", \\"0 3\\", \\"0 1\\", \\"2 1\\", \\"2 3\\", \\"3 2\\", \\"4 10\\", \\"5 1 7\\", \\"1 10\\", \\"3 0\\" ] results, final_sequence = simulate_commands(commands) for result in results: print(result) print(final_sequence)"},{"question":"In a small town, there is a system that logs movements of vehicles through a set of checkpoints. Each checkpoint has a unique identifier and records the entry and exit times of vehicles. A vehicle logs its entry and exit in the format \\"identifier:timestamp,\\" where \\"identifier\\" is the checkpoint ID and \\"timestamp\\" is the time in seconds. Each vehicle should move in a linear path through the checkpoints without revisiting any checkpoint. Your task is to process and verify the logs of a vehicle\'s movement through the checkpoints. Specifically, you need to ensure that the vehicle visits each checkpoint exactly once and that the checkpoints are visited in the correct order of increasing time. If these conditions are met, you should output VALID; otherwise, INVALID. -----Input----- The input starts with a single integer C (1 le C le 100,000), which is the number of checkpoints. This is followed by C lines, each containing a checkpoint log in the format \\"identifier:timestamp\\" where \\"identifier is a unique string identifier for the checkpoint, and \\"timestamp\\" is an integer value (0 le timestamp le 1,000,000,000). -----Output----- The output should be either VALID or INVALID based on whether the vehicle\'s journey meets the specified conditions. -----Examples----- Sample Input 1: 3 A:2 B:6 C:10 Sample Output 1: VALID Sample Input 2: 3 A:5 B:3 C:10 Sample Output 2: INVALID Sample Input 3: 4 checkpoint1:100 checkpoint2:150 checkpoint3:110 checkpoint4:200 Sample Output 3: INVALID","solution":"def is_valid_log(C, logs): Function to determine if the logs of a vehicle\'s journey through checkpoints are valid. Parameters: - C (int): The number of checkpoints. - logs (list of str): List of logs, each in the format \\"identifier:timestamp\\". Returns: - str: \\"VALID\\" if the journey is valid, otherwise \\"INVALID\\". # Extract timestamps and check if they are in increasing order timestamps = [] for log in logs: identifier, timestamp = log.split(\':\') timestamps.append(int(timestamp)) # Check if timestamps list is sorted in strictly increasing order for i in range(1, C): if timestamps[i] <= timestamps[i - 1]: return \\"INVALID\\" return \\"VALID\\""},{"question":"A company is planning a project to organize different sets of activities, and each activity needs to be conducted in a sequence, following specific dependencies. Your task is to determine whether it\'s possible to complete all activities given the constraints. You are given a list of `N` activities numbered from 1 to `N` and a list of `M` dependencies. Each dependency is a pair of integers (A, B), where activity `A` must be completed before activity `B` can begin. Write a program to find out whether it is possible to finish all the activities. If it\'s possible, print \\"Yes\\". Otherwise, print \\"No\\". Input The first line contains two integers `N` and `M` (1 ≤ N ≤ 100,000, 0 ≤ M ≤ 200,000) – the number of activities and the number of dependencies, respectively. Each of the next `M` lines contains a pair of integers `A` and `B` (1 ≤ A, B ≤ N), representing a dependency that activity `A` must be completed before activity `B`. Output Print \\"Yes\\" if it is possible to complete all activities; otherwise, print \\"No\\". Constraints - The values for `A` and `B` are unique for each dependency. SAMPLE INPUT 4 4 1 2 2 3 3 4 4 2 SAMPLE OUTPUT No SAMPLE INPUT 4 4 1 2 2 3 3 4 2 4 SAMPLE OUTPUT Yes","solution":"from collections import defaultdict, deque def can_finish_activities(N, M, dependencies): # Construct the graph and in-degree counts graph = defaultdict(list) in_degree = {i: 0 for i in range(1, N + 1)} # Build the graph with edges and calculate in-degrees for A, B in dependencies: graph[A].append(B) in_degree[B] += 1 # Topological sort using Kahn’s Algorithm (BFS) queue = deque([node for node in in_degree if in_degree[node] == 0]) visited_count = 0 while queue: node = queue.popleft() visited_count += 1 for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If we\'ve visited every node, no cycle exists and we can complete all activities return \\"Yes\\" if visited_count == N else \\"No\\""},{"question":"Geek\'s teacher gave him another interesting pattern to build. This time, Geek is given an integer n and asked to create a different pattern. Help Geek to construct the pattern. Example 1: Input: 4 Output: 1 1 2 2 3 4 4 5 6 7 Your Task: You don\'t need to input anything. Complete the function printPyramid() which takes an integer n as the input parameter and prints the pattern. Constraints: 1 <= n <= 20","solution":"def printPyramid(n): Prints a pyramid pattern up to the given number of levels. Parameters: n (int): The number of levels in the pattern Example: If n = 4, the output will be: 1 1 2 2 3 4 4 5 6 7 current_number = 1 for i in range(1, n + 1): for j in range(i): print(current_number, end=\' \') current_number += 1 print() current_number -= 1 # Example usage: # printPyramid(4)"},{"question":"You are given a list of `n` integers representing the height of `n` buildings in a city skyline. The width of each building is the same, and all buildings are adjacent to each other. You need to find the largest rectangular area that can be formed within the boundaries of these buildings. The area of a rectangle is defined as the product of its height and its width. The width of the rectangle can extend over multiple buildings, but the height of the rectangle cannot exceed the shortest building in its width span. Input The first line of input contains an integer `n` (1 ≤ n ≤ 100,000) — the number of buildings. The second line contains `n` integers `h1, h2, ..., hn` (1 ≤ hi ≤ 10^9), where `hi` represents the height of the `i`-th building. Output Print a single integer — the area of the largest rectangle that can be formed within the boundaries of the buildings. Examples Input 5 2 1 5 6 2 Output 10 Input 4 1 2 3 4 Output 6 Note In the first sample, the largest rectangle has an area of 10, formed by buildings with heights 5 and 6. In the second sample, the largest rectangle is formed by buildings with heights 2 and 3.","solution":"def largest_rectangle_area(heights): Returns the largest rectangular area that can be formed within the boundaries of the buildings. stack = [] max_area = 0 heights.append(0) # Sentinal value for final computation for i in range(len(heights)): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Given an array of integers, write a function to return the minimum index of the first repeating element. A repeating element is an element that occurs more than once and the first repeating element is the element that repeats first. If no element repeats, return -1. Example 1: Input: arr = [10, 5, 3, 4, 3, 5, 6] Output: 2 Explanation: 5 is the first element that repeats, thus the minimum index of the first repeating element is 2. Example 2: Input: arr = [1, 2, 3, 4, 5] Output: -1 Explanation: There are no repeating elements in the array so the output is -1. Your task: You do not need to read input or print anything. Your task is to implement the function findFirstRepeatingIndex() which takes the array arr as input and returns the minimum index of the first repeating element. If no elements repeat, return -1. Constraints: 1 <= |arr| <= 10^5 1 <= arr[i] <= 10^6 Expected Time Complexity: O(N) Expected Auxiliary Space: O(N)","solution":"def findFirstRepeatingIndex(arr): Returns the minimum index of the first repeating element in arr. If no element repeats, returns -1. element_indices = {} for index, value in enumerate(arr): if value in element_indices: return element_indices[value] element_indices[value] = index return -1"},{"question":"Problem Statement You are tasked with writing a function for a library management system. One important feature is to generate all possible permutations of letters for book categorization codes. Each code is a unique identifier that is constructed by permuting a given set of letters. Spaces and non-alphabetical characters are not allowed in the codes. In this question, we need you to write a function that generates all permutations of a given string of unique letters and returns them in lexicographical order. Input Format The only line of the input contains a string S consisting of unique lowercase letters (1 ≤ |S| ≤ 8). Output Format The output should contain all the permutations of S sorted in lexicographical order. Each permutation should be on a new line. Constraints 1. The input string S consists of lowercase letters only. 2. The length of S (|S|) is between 1 and 8 inclusive. SAMPLE INPUT abc SAMPLE OUTPUT abc acb bac bca cab cba","solution":"import itertools def generate_permutations(s): Generates all permutations of the string `s` in lexicographical order. :param s: The input string consisting of unique lowercase letters. :return: A list of all permutations in lexicographical order. permutations = sorted([\'\'.join(p) for p in itertools.permutations(s)]) return permutations"},{"question":"Word Rearrangement for Lexicographical Order You are working on a text processing application which includes a feature that rearranges the characters of a word to generate permutations in lexicographical order. The application users often need to find the next permutation of a given word in its lexicographical order. The task is to implement this feature efficiently to handle various scenarios. Given a word consisting of lowercase English letters, your task is to write a function that prints the next permutation of the word in lexicographical order. If the given word is the largest possible permutation, print \\"no answer\\". Here\'s how the next permutation works: 1. Find the largest index `k` such that `word[k] < word[k + 1]`. If no such `k` exists, the word is the last permutation. 2. Find the largest index `l` greater than `k` such that `word[k] < word[l]`. 3. Swap the values of `word[k]` and `word[l]`. 4. Reverse the sequence from `word[k + 1]` up to and including the final character `word[len(word) - 1]`. Input The input is given in the following format: `word` A single string `word` which satisfies the following conditions: - The word consists only of lowercase English letters (`a` to `z`). - The length of the word is in the range `[1, 1000]`. Output Print the next permutation of the word in lexicographical order. If there is no such permutation, print \\"no answer\\". Sample Input 1 ab Sample Output 1 ba Sample Input 2 bb Sample Output 2 no answer Sample Input 3 hefg Sample Output 3 hegf Sample Input 4 dhck Sample Output 4 dhkc Sample Input 5 dkhc Sample Output 5 hcdk Example Input ab Output ba","solution":"def next_permutation(word): This function returns the next permutation of a word in lexicographical order. If the word is the largest permutation, returns \\"no answer\\". word = list(word) n = len(word) # Step 1: Find the largest index k such that word[k] < word[k + 1]. If no such k exists, return \\"no answer\\". k = -1 for i in range(n - 1): if word[i] < word[i + 1]: k = i if k == -1: return \\"no answer\\" # Step 2: Find the largest index l greater than k such that word[k] < word[l]. l = -1 for i in range(k + 1, n): if word[k] < word[i]: l = i # Step 3: Swap the values of word[k] and word[l]. word[k], word[l] = word[l], word[k] # Step 4: Reverse the sequence from word[k + 1] to the end. word = word[:k + 1] + word[k + 1:][::-1] return \\"\\".join(word)"},{"question":"A logistics company wants to optimize its delivery routes. The company has multiple delivery points, represented as nodes in a graph, and a goal to determine the shortest path between a starting point and a target point. The delivery points are connected by bidirectional roads, each with a specified distance. Write a program to find the shortest path from the starting delivery point to the target delivery point using Dijkstra\'s algorithm. # Input The input consists of multiple datasets. Each dataset is given in the following format: - The first line contains two integers, N and M (1 ≤ N ≤ 1000, 1 ≤ M ≤ 10000), representing the number of delivery points (nodes) and the number of roads (edges), respectively. - The next M lines each contain three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 1000), representing a road between delivery points u and v with a distance of w. - The following line contains two integers, S and T (1 ≤ S, T ≤ N), representing the starting and target delivery points. When N is 0, it indicates the end of input. The number of datasets does not exceed 5. # Output For each dataset, output the minimum distance from the starting point S to the target point T on one line. If no path exists, output -1. # Examples Input ``` 4 4 1 2 5 2 3 10 1 3 15 2 4 20 1 3 3 2 1 2 3 2 3 5 1 3 0 ``` Output ``` 15 8 ``` Input None Output None","solution":"import heapq def dijkstra(N, graph, start, end): # Initialize distances to infinity and the priority queue distances = {node: float(\'infinity\') for node in range(1, N + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If we reach the end node, we can return the distance if current_node == end: return current_distance # If a shorter path has already been found, skip processing if current_distance > distances[current_node]: continue # Explore neighboring nodes for neighbor, weight in graph[current_node]: distance = current_distance + weight # Only consider this new path if it\'s better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return -1 if distances[end] == float(\'infinity\') else distances[end] def find_shortest_paths(datasets): results = [] for dataset in datasets: N, M, edges, start, end = dataset graph = {i: [] for i in range(1, N + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) result = dijkstra(N, graph, start, end) results.append(result) return results"},{"question":"Design a system for managing a basic online library where users can borrow and return books. Your design should support the following methods: - addBook(bookId): Add a new book to the library. - borrowBook(userId, bookId): A user borrows a book if it is available. - returnBook(userId, bookId): A user returns a book. - getBorrowedBooks(userId): Retrieve a list of book ids that the user has currently borrowed. Example: Library library = new Library(); // Add books to the library (id = 1, 2). library.addBook(1); library.addBook(2); // User 1 borrows book 1. library.borrowBook(1, 1); // Get the list of books borrowed by User 1 -> [1]. library.getBorrowedBooks(1); // User 1 borrows book 2. library.borrowBook(1, 2); // Get the updated list of books borrowed by User 1 -> [1, 2]. library.getBorrowedBooks(1); // User 1 returns book 1. library.returnBook(1, 1); // Get the updated list of books borrowed by User 1 -> [2]. library.getBorrowedBooks(1);","solution":"class Library: def __init__(self): self.books = set() self.borrowed_books = {} # Dictionary mapping userId to a set of bookIds def addBook(self, bookId): Adds a new book to the library. self.books.add(bookId) def borrowBook(self, userId, bookId): A user borrows a book if it is available. if bookId in self.books: if userId not in self.borrowed_books: self.borrowed_books[userId] = set() self.borrowed_books[userId].add(bookId) self.books.remove(bookId) def returnBook(self, userId, bookId): A user returns a book. if userId in self.borrowed_books and bookId in self.borrowed_books[userId]: self.borrowed_books[userId].remove(bookId) self.books.add(bookId) def getBorrowedBooks(self, userId): Retrieves a list of book ids that the user has currently borrowed. if userId in self.borrowed_books: return list(self.borrowed_books[userId]) return []"},{"question":"You are organizing a race with participants running at different speeds. Each participant\'s speed is represented by an array of positive integers where each element corresponds to the speed at a particular point in time. Your task is to determine the winner of the race. The race is deemed won by the participant who maintains the highest average speed over the race duration. If two participants have the same average speed, the race is considered a draw. Write a function that takes in two arrays of integers, representing the speed of the participants at discrete intervals. The function should output a string in the following format: - If the first participant wins: `\'Participant 1 wins!\'` - If the second participant wins: `\'Participant 2 wins!\'` - If there\'s a draw: `\'It\'s a draw!\'` Example: Participant 1 has speed readings of `[10, 15, 20, 10, 15]` Participant 2 has speed readings of `[12, 14, 18, 13, 16]` The average speed for Participant 1 is `(10+15+20+10+15) / 5 = 14` The average speed for Participant 2 is `(12+14+18+13+16) / 5 = 14.6` Since Participant 2 has a higher average speed, the function should output: `\'Participant 2 wins!\'`. If the speeds were `[10, 15, 20, 10, 25]` for Participant 1 and `[10, 15, 20, 10, 25]` for Participant 2, the function should output: `\'It\'s a draw!\'`. Write code to implement the function following the above rules and examples.","solution":"def determine_winner(participant1_speeds, participant2_speeds): Determines the winner of the race based on the average speeds of participants. Args: participant1_speeds (list of int): Speed readings for Participant 1. participant2_speeds (list of int): Speed readings for Participant 2. Returns: str: The result of the race in the format: - \'Participant 1 wins!\' if Participant 1 has a higher average speed, - \'Participant 2 wins!\' if Participant 2 has a higher average speed, - \'It\'s a draw!\' if both have the same average speed. avg_speed1 = sum(participant1_speeds) / len(participant1_speeds) avg_speed2 = sum(participant2_speeds) / len(participant2_speeds) if avg_speed1 > avg_speed2: return \'Participant 1 wins!\' elif avg_speed1 < avg_speed2: return \'Participant 2 wins!\' else: return \\"It\'s a draw!\\""},{"question":"Write a function that takes a string of text and returns the longest word along with its length within the text. If there are multiple words with the same maximum length, return the one that appears first in the text. Consider a word to be any sequence of characters delimited by whitespace or punctuation. Ignore case and punctuation when determining the longest word; however, preserve the original case in the word returned. Example ```python \\"Hello, world! This is a coding test.\\" ==> (\'coding\', 6) ```","solution":"import re def longest_word_and_length(text): Returns the longest word and its length from the given text. If there are multiple words with the same maximum length, it returns the one that appears first in the text. Args: text (str): The text to analyze. Returns: tuple: The longest word (original case) and its length. words = re.findall(r\'bw+b\', text) longest_word = \'\' for word in words: if len(word) > len(longest_word): longest_word = word return longest_word, len(longest_word)"},{"question":"A city is represented as an n times m grid, where each cell can either contain a building (\'B\') or be empty (\'.\'). The city authorities want to monitor the city using the least number of cameras. Each camera can monitor all the cells in its row and column, including the cell it is placed on. Given the current layout of the city, determine the minimum number of cameras needed to monitor all the buildings. -----Input----- The first line of input contains an integer t (1 le t le 10^3) — the number of test cases. Each test case starts with a blank line followed by a line containing two integers n and m (1 le n, m le 100) — the dimensions of the grid. This is followed by n lines, each containing m characters (\'B\' for buildings and \'.\' for empty cells). -----Output----- For each test case, print a single line containing the minimum number of cameras needed to monitor all the buildings. -----Examples----- Input 2 3 3 B.. ... ..B 4 4 BB.. .... .... ..BB Output 2 2 -----Note----- In the first set, the minimum number of cameras required is 2. One camera can be placed at (1, 1) to monitor the building at (1, 1), and another camera can be placed at (3, 3) to monitor the building at (3, 3). In the second set, only 2 cameras are needed. One camera can be placed at (1, 1), which will monitor the buildings in the first row and first two columns, and another camera can be placed at (4, 4) to monitor the buildings in the fourth row and last two columns.","solution":"def minimum_cameras_to_monitor_city(t, test_cases): results = [] for case in test_cases: n, m, grid = case rows_with_B = set() cols_with_B = set() for i in range(n): for j in range(m): if grid[i][j] == \'B\': rows_with_B.add(i) cols_with_B.add(j) cameras_needed = min(len(rows_with_B), len(cols_with_B)) results.append(cameras_needed) return results # Function to read input data and produce the correct output def process_input(input_data): input_lines = input_data.strip().split(\'n\') t = int(input_lines[0]) idx = 1 test_cases = [] for _ in range(t): while input_lines[idx] == \'\': idx += 1 n, m = map(int, input_lines[idx].split()) idx += 1 grid = [input_lines[idx + i] for i in range(n)] idx += n test_cases.append((n, m, grid)) return t, test_cases"},{"question":"Alice and Bob are best friends who love solving puzzles together. Today, Alice presented Bob with an interesting problem related to sequences. We have a sequence of integers ( a_1, a_2, ..., a_n ). There are q queries, and in each query, two integers l and r are given. Bob needs to compute the number of distinct integers in the subsequence ( a_l, a_{l+1}, ..., a_r ). Can you help Bob solve this problem efficiently? Input The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of elements in the sequence and the number of queries. The second line contains n integers ( a_1, a_2, ..., a_n ) (1 ≤ ( a_i ) ≤ 10^9) — the elements of the sequence. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the indices of the subsequence for each query. Output For each query, print the number of distinct integers in the subsequence ( a_l, a_{l+1}, ..., a_r ). Examples Input 5 3 1 2 1 3 2 1 3 2 4 1 5 Output 2 3 3 Input 6 2 4 4 4 4 5 5 1 4 3 6 Output 1 2 Note In the first example, the sequence is [1, 2, 1, 3, 2]. For the first query (1, 3), the subsequence is [1, 2, 1], and there are 2 distinct integers: 1, 2. For the second query (2, 4), the subsequence is [2, 1, 3], and there are 3 distinct integers: 2, 1, 3. For the third query (1, 5), the subsequence is [1, 2, 1, 3, 2], and there are 3 distinct integers: 1, 2, 3. In the second example, the sequence is [4, 4, 4, 4, 5, 5]. For the first query (1, 4), the subsequence is [4, 4, 4, 4], and there is 1 distinct integer: 4. For the second query (3, 6), the subsequence is [4, 4, 5, 5], and there are 2 distinct integers: 4, 5.","solution":"def number_of_distinct_integers(n, q, sequence, queries): results = [] for l, r in queries: # Find the subrange of the sequence and count distinct elements subrange = sequence[l-1:r] distinct_count = len(set(subrange)) results.append(distinct_count) return results"},{"question":"Given a string `s`, you need to find the longest substring without repeating characters. Write a function called `longestSubstring` which takes a single string as its argument and returns the length of the longest substring without repeating characters. Function Signature: ```python def longestSubstring(s: str) -> int: pass ``` # Input - A single string, s, (1 ≤ |s| ≤ 10^4) which consists of English letters, digits, symbols, and spaces. # Output - An integer representing the length of the longest substring without repeating characters. # Example Example 1: Input: ``` abcabcbb ``` Output: ``` 3 ``` Explanation: The answer is \\"abc\\", with a length of 3. Example 2: Input: ``` bbbbb ``` Output: ``` 1 ``` Explanation: The answer is \\"b\\", with a length of 1. Example 3: Input: ``` pwwkew ``` Output: ``` 3 ``` Explanation: The answer is \\"wke\\", with a length of 3. Notice that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. # Constraints - The implementation should have a time complexity better than O(n^2). # Hints - Use a sliding window approach. - Keep track of the characters inside the current window using a set or dictionary to ensure there are no repetitions. - Adjust the window\'s starting point when you encounter a repeated character.","solution":"def longestSubstring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index_map = {} longest_length = 0 start_idx = 0 for current_idx, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start_idx: start_idx = char_index_map[char] + 1 char_index_map[char] = current_idx longest_length = max(longest_length, current_idx - start_idx + 1) return longest_length"},{"question":"# Tim and the Magic Rope Tim has a special rope with magical properties. The rope is made of multiple segments joined end-to-end, and each segment has a certain length. One day, Tim decides to strengthen his rope by cutting it into several continuous subsegments, removing one of them, and then rejoining the remaining parts. However, Tim wants his final rope to be as long as possible. Write a function `maximize_rope_length` which takes the lengths of the rope segments and the number N (the number of segments in the subsegment to remove) as input. Return the maximum possible length of the rope after removing exactly one subsegment of N contiguous segments. **Input:** - An array of positive integers, where each integer represents the length of a segment. - An integer N (1 ≤ N ≤ length of the array - 1). **Output:** - An integer representing the maximum possible length of the rope after removing one subsegment of N contiguous segments. **Example Input:** ``` segments = [1, 2, 3, 4, 5, 6] N = 2 ``` **Example Output:** ``` 18 ``` **Explanation:** By removing the subsegment [3, 4], the remaining segments are [1, 2, 5, 6], yielding a total length of 1 + 2 + 5 + 6 = 14. **Example Input:** ``` segments = [10, 20, 30, 40, 50] N = 3 ``` **Example Output:** ``` 90 ``` **Explanation:** By removing the subsegment [20, 30, 40], the remaining segments are [10, 50], yielding a total length of 10 + 50 = 60. # Constraints: - The length of the array is between 2 and 200,000. - Each element of the array is a positive integer ≤ 1000. # Function signature: ```python def maximize_rope_length(segments: List[int], N: int) -> int: ```","solution":"from typing import List def maximize_rope_length(segments: List[int], N: int) -> int: This function returns the maximum possible length of the rope after removing exactly one subsegment of N contiguous segments. total_length = sum(segments) min_subsegment = sum(segments[:N]) # Initial subsegment sum # Calculate the minimum subsegment of length N current_subsegment = min_subsegment for i in range(N, len(segments)): current_subsegment = current_subsegment - segments[i - N] + segments[i] min_subsegment = min(min_subsegment, current_subsegment) return total_length - min_subsegment"},{"question":"Given an undirected graph with N nodes and M edges, your task is to determine the minimum number of edges that can be removed so that there are no cycles in the resulting graph. The input will provide the list of edges in the graph. # Input - The first line contains two integers, N and M (1 ≤ N ≤ 1000, 0 ≤ M ≤ 5000), which represent the number of nodes and edges in the graph, respectively. - The next M lines each contain two integers u and v (1 ≤ u, v ≤ N), representing an edge between node u and node v. # Output Print a single integer representing the minimum number of edges that need to be removed to ensure that the resulting graph has no cycles. # Examples Input ``` 6 6 1 2 1 3 2 3 2 4 4 5 5 6 ``` Output ``` 1 ``` Input ``` 5 5 1 2 2 3 3 4 4 5 3 5 ``` Output ``` 1 ``` # Note In the first example, the graph contains a cycle involving the edges (1, 2), (1, 3), and (2, 3). Removing any one of these edges will make the graph acyclic. In the second example, the graph contains a single cycle involving the edges (2, 3), (3, 4), and (3, 5). Removing any one of these edges will make the graph acyclic.","solution":"def find_cycle_edges(n, edges): Finds and returns the edges that are part of cycles in the graph. parent = list(range(n + 1)) def find(u): if u != parent[u]: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: parent[root_v] = root_u # Union the roots. cycle_edges = [] for u, v in edges: root_u = find(u) root_v = find(v) if root_u == root_v: cycle_edges.append((u, v)) else: union(u, v) return cycle_edges def min_edges_to_remove(n, m, edges): Given a graph with n nodes and m edges, find the minimum number of edges to remove to make the graph acyclic. cycle_edges = find_cycle_edges(n, edges) return len(cycle_edges)"},{"question":"Tom is organizing a programming competition and wants to distribute the prizes evenly among the participants. If the total number of participants is not evenly divisible by the number of prize types, he needs to figure out how many participants will receive an extra prize compared to others. ------ Input ------ The first line contains an integer T, the number of test cases. The first line of each test case contains two integers N and P, where N is the number of participants, and P is the number of prize types. ------ Output ------ For each test case, display the number of participants who will receive an extra prize. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100000 (10^{5}) 1 ≤ P ≤ 100 (10^{2}) ----- Sample Input 1 ------ 1 10 3 ----- Sample Output 1 ------ 1 ----- Sample Input 2 ------ 2 15 4 20 7 ----- Sample Output 2 ------ 3 6","solution":"def extra_prize_participants(T, cases): For each test case, calculates the number of participants who will receive an extra prize. Parameters: T (int): Number of test cases cases (List[Tuple[int, int]]): A list of tuples where each tuple contains (N, P) Returns: List[int]: A list of numbers where each number represents the participants who will receive an extra prize in the respective test case. results = [] for N, P in cases: results.append(N % P) return results"},{"question":"Given an array of integers, find the minimum number of adjacent swaps required to sort the array in ascending order. A swap involves exchanging the positions of two adjacent elements in the array. Example: arr = [3, 2, 1] To sort the array in ascending order, we can swap as follows: - Swap 3 and 2: [2, 3, 1] - Swap 3 and 1: [2, 1, 3] - Swap 2 and 1: [1, 2, 3] The total number of swaps required is 3. Function Description: Complete the minimumAdjacentSwaps function. It should return an integer that represents the minimum number of adjacent swaps required to sort the array. minimumAdjacentSwaps has the following parameter(s): int arr[n]: an array of integers. Returns: int: the minimum number of adjacent swaps required. Input Format: The first line contains a single integer, n, the size of arr. The second line contains n space-separated integers, arr[i]. Constraints: 2 leq n leq 10^5 1 leq arr[i] leq 10^9 Sample Input 0: 3 3 2 1 Sample Output 0: 3 Explanation 0: The easiest way to sort the array is through the following adjacent swaps: - Swap 3 and 2: [2, 3, 1] - Swap 3 and 1: [2, 1, 3] - Swap 2 and 1: [1, 2, 3] This requires 3 swaps. Sample Input 1: 5 1 5 3 2 4 Sample Output 1: 4 Explanation 1: The easiest way to sort the array is through the following adjacent swaps: - Swap 5 and 3: [1, 3, 5, 2, 4] - Swap 5 and 2: [1, 3, 2, 5, 4] - Swap 5 and 4: [1, 3, 2, 4, 5] - Swap 3 and 2: [1, 2, 3, 4, 5] This requires 4 swaps.","solution":"def minimumAdjacentSwaps(arr): Returns the minimum number of adjacent swaps required to sort the array in ascending order. :param arr: List[int] - an array of integers :return: int - the minimum number of adjacent swaps required to sort the array n = len(arr) swaps = 0 # Using bubble sort count the number of swaps for i in range(n): for j in range(n - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swaps += 1 return swaps"},{"question":"You are given a list of `N` integers representing energy values that accumulate over time. Your task is to find the maximum energy gain you can achieve, subject to the constraint that you cannot choose two consecutive time points. Formulate a function `maxEnergyGain` that computes this value. Example 1: Input: N = 5 Energy = [3, 2, 5, 10, 7] Output: 15 Explanation: By choosing time points 0, 2, and 4, the total energy gain is 3 + 5 + 7 = 15. Example 2: Input: N = 4 Energy = [8, 1, 1, 8] Output: 16 Explanation: By choosing time points 0 and 3, the total energy gain is 8 + 8 = 16. Your Task: Implement the function `maxEnergyGain()` that takes in a list of integers `energy` and its length `n`, and returns the maximum energy gain achievable without selecting two consecutive time points. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^6 0 ≤ Energy_{i} ≤ 10^7","solution":"def maxEnergyGain(energy): Returns the maximum energy gain achievable without selecting two consecutive time points. if not energy: return 0 n = len(energy) if n == 1: return energy[0] # Initialize incl and excl incl = energy[0] excl = 0 # Iterate through the energy array to calculate the maximum gain for i in range(1, n): # Current max excluding i new_excl = max(incl, excl) # Current max including i incl = excl + energy[i] excl = new_excl # Return the maximum of incl and excl return max(incl, excl)"},{"question":"Given a set of data points in a 2D plane, you are required to find the line that best fits this data using the method of least squares. Your task is to implement an algorithm that computes the slope and y-intercept of the best fit line. The least squares line is the line that minimizes the sum of the squared vertical distances of the points from the line. It is expressed in the form ( y = mx + b ) where ( m ) is the slope and ( b ) is the y-intercept. -----Input----- The input consists of multiple lines. The first line contains an integer ( n ) ((1 le n le 1000)), the number of data points. The next ( n ) lines each contain two real numbers ( x_i ) and ( y_i ) ((-1000 le x_i, y_i le 1000)), representing a data point. -----Output----- Output the values of ( m ) (slope) and ( b ) (y-intercept) of the line that best fits the input data points using the least squares method. Your answer will be considered correct if the absolute error of both ( m ) and ( b ) does not exceed (10^{-5}). -----Examples----- Sample Input 1: 5 1 1 2 2 3 3 4 4 5 5 Sample Output 1: 1.00000000 0.00000000 Sample Input 2: 3 1 2 2 3 3 5 Sample Output 2: 1.50000000 0.33333333","solution":"def least_squares_fit(n, data_points): Finds the line that best fits given data points using the method of least squares. Parameters: n (int): Number of data points. data_points (list of tuples): List of data points, each represented as (x, y). Returns: tuple: A tuple containing the slope (m) and y-intercept (b) of the best fit line. if n == 1: # With only one point, the line is just y = y1 return (0.0, data_points[0][1]) sum_x = sum_y = sum_xx = sum_xy = 0.0 for x, y in data_points: sum_x += x sum_y += y sum_xx += x * x sum_xy += x * y denominator = n * sum_xx - sum_x * sum_x if denominator == 0: # All data points have the same x value, the slope is undefined but can be considered 0 return (0.0, data_points[0][1]) m = (n * sum_xy - sum_x * sum_y) / denominator b = (sum_y * sum_xx - sum_x * sum_xy) / denominator return (m, b)"},{"question":"You are given two non-negative integers X and Y. Your task is to determine if it is possible to transform X to Y by performing any number of operations where in each operation you can double the current value (i.e., multiply by 2) or subtract 1 from it. If it is possible, print \'YES\'; otherwise, print \'NO\'. Input: Two integers X and Y separated by space. Output: A single line containing \'YES\' or \'NO\'. Constraints: 1 ≤ X, Y ≤ 10^9 SAMPLE INPUT 1: 4 7 SAMPLE OUTPUT 1: YES SAMPLE INPUT 2: 10 1 SAMPLE OUTPUT 2: NO Explanation: In the first example, you can transform 4 to 7 by first doubling 4 to get 8, and then subtracting 1 to get 7 (4 -> 8 -> 7). In the second example, it is not possible to transform 10 to 1 using the allowed operations.","solution":"def can_transform(X, Y): Determines if it is possible to transform X to Y by performing any number of operations where in each operation you can double the current value (multiply by 2) or subtract 1 from it. Parameters: X (int): the starting integer Y (int): the target integer Returns: str: \'YES\' if the transformation is possible, otherwise \'NO\' while Y > X: if Y % 2 == 1: Y += 1 else: Y //= 2 return \'YES\' if Y == X else \'NO\'"},{"question":"Fatima loves to collect unique objects in various cities she visits. She has planned out her trip and categorized the cities based on the uniqueness of the objects available in each city, rated from 1 to m (where 1 is the least unique and m is the most unique). She travels from city to city and always prefers to visit cities with more unique objects only after she has visited those with less unique objects. For example, she could visit a city with uniqueness level 2 after visiting cities with uniqueness level 1, but not the other way around. Fatima wants to make the most efficient trip that visits at least one city of each uniqueness level from 1 to m. You are given a 2D list representing connections between cities, where each connection is represented as a pair of integers (a, b) indicating there is a direct road from city a to city b. Can you help Fatima calculate the minimum number of roads she needs to travel to complete her journey? -----Input----- The first line contains two integers n and m (2 le n, m le 100) — the number of cities and the highest uniqueness level respectively. The second line contains m integers where the i-th integer represents the uniqueness level of the i-th city. The third line contains an integer l (1 le l le n(n-1)/2) — the number of direct roads between cities. Each of the next l lines contains two integers a and b (1 le a, b le n) denoting a direct road from city a to city b. -----Output----- Print one integer — the minimum number of roads Fatima needs to travel. -----Examples----- Input 5 3 1 1 2 2 3 6 1 2 1 3 2 4 3 4 4 5 2 5 Output 3 Input 6 4 1 1 2 3 3 4 7 1 2 1 3 2 4 3 4 4 5 4 6 5 6 Output 3 -----Note----- In the first example, Fatima can start from city 1 (uniqueness 1), go to city 3 (uniqueness 2), and then to city 5 (uniqueness 3) using roads (1, 3), (3, 4), and (4, 5). Hence, the minimum number of roads is 3. In the second example, Fatima can start from city 1 (uniqueness 1), go to city 3 (uniqueness 2), city 4 (uniqueness 3), and finally to city 6 (uniqueness 4) using roads (1, 3), (3, 4), and (4, 6). Hence, the minimum number of roads is 3.","solution":"from collections import deque, defaultdict def min_roads_to_travel(n, m, uniqueness, roads): # Group cities by their uniqueness level cities_by_uniqueness = defaultdict(list) for city, level in enumerate(uniqueness, 1): cities_by_uniqueness[level].append(city) # Create adjacency list for the graph graph = defaultdict(list) for a, b in roads: graph[a].append(b) graph[b].append(a) # Assume roads are bidirectional def bfs(start_cities, target_uniqueness): visited = set(start_cities) queue = deque([(city, 0) for city in start_cities]) while queue: current_city, dist = queue.popleft() for neighbor in graph[current_city]: if neighbor not in visited: if uniqueness[neighbor - 1] == target_uniqueness: return dist + 1, neighbor queue.append((neighbor, dist + 1)) visited.add(neighbor) return float(\'inf\'), None total_roads = 0 current_level_cities = cities_by_uniqueness[1] for level in range(2, m + 1): distance, next_city = bfs(current_level_cities, level) if distance == float(\'inf\'): return -1 # Path doesn\'t exist total_roads += distance current_level_cities = [next_city] return total_roads"},{"question":"Alice is hosting a paintball tournament with multiple rounds. After each round, the scores of each participant are recorded. Alice needs to determine the top three scores from each round and identify any participants who scored these top three scores. Participants may obtain the same scores. Create a program to find the top three scores for each round and list the participants who achieved these scores. Your program should handle multiple rounds of input and continue until an empty line (indicative of no more rounds). Input The input consists of multiple rounds. Each round begins with an integer `n` representing the number of participants (1 ≤ n ≤ 100). The subsequent `n` lines contain a participant\'s name followed by an integer score (0 ≤ score ≤ 100). Each round of input ends with a blank line. The input ends with a line containing a single `0`. Output For each round, output the top three scores followed by the participant\'s names who scored those points. If there are ties, you may list the names in any order. If fewer than three participants played in a round, list all available scores. Examples Input 5 Alice 95 Bob 85 Charlie 90 David 100 Eve 100 3 Tom 80 Jerry 85 Spike 85 0 Output Top scores: 100: David, Eve 95: Alice 90: Charlie Top scores: 85: Jerry, Spike 80: Tom","solution":"def get_top_scores(input_lines): i = 0 rounds = [] while i < len(input_lines): line = input_lines[i].strip() if line == \\"0\\": break if line == \\"\\": i += 1 continue n = int(line) participants = [] for j in range(n): i += 1 name, score = input_lines[i].strip().rsplit(\\" \\", 1) score = int(score) participants.append((name, score)) rounds.append(participants) i += 1 result = [] for participants in rounds: scores_with_names = {} for name, score in participants: if score in scores_with_names: scores_with_names[score].append(name) else: scores_with_names[score] = [name] top_scores = sorted(scores_with_names.keys(), reverse=True)[:3] round_result = [] for score in top_scores: round_result.append(f\\"{score}: {\', \'.join(scores_with_names[score])}\\") result.append(\\"Top scores:n\\" + \\"n\\".join(round_result)) return \\"nn\\".join(result)"},{"question":"Given a list of integers, write a function that finds all unique combinations of four numbers (quadruplets) that sum up to a target value. Write your solution such that the order of numbers in each quadruplet does not matter, and that the function should not output duplicate quadruplets. # Function Signature ```python def four_sum(nums: List[int], target: int) -> List[List[int]]: ``` # Input - `nums`: A list of integers. - `target`: The target sum that each quadruplet should add up to. # Output - A list of lists, where each list contains four integers that sum up to the target value and each combination is unique. # Constraints - The length of the list `nums` can be between 1 and 200 inclusive. - Each element of the list `nums` ranges from `-10^9` to `10^9`. - The target value ranges from `-10^9` to `10^9`. # Example ```python # Input nums = [1, 0, -1, 0, -2, 2] target = 0 # Output [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ] ``` # Explanation In the example, there are exactly three unique quadruplets that sum up to the target value of 0: - [-1, 0, 0, 1] - [-2, -1, 1, 2] - [-2, 0, 0, 2] Note that the lists within the output list do not account for the order of elements within the quadruplets (e.g., the solution `[-2, -1, 2, 1]` is considered the same as `[-2, -1, 1, 2]`). Duplicate quadruplets are to be excluded in the final output.","solution":"from typing import List def four_sum(nums: List[int], target: int) -> List[List[int]]: nums.sort() n = len(nums) result = [] for i in range(n - 3): if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, n - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue left = j + 1 right = n - 1 while left < right: sum_vals = nums[i] + nums[j] + nums[left] + nums[right] if sum_vals == target: result.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif sum_vals < target: left += 1 else: right -= 1 return result"},{"question":"Problem You are given a rectangular matrix of dimensions m x n. Each cell of the matrix can either be empty (denoted by \'.\') or contain a rock (denoted by \'#\'). Your task is to write a program that determines the maximum size of a rectangle (in terms of area) that contains only empty cells. Constraints 1 ≤ m, n ≤ 1000 Input The first line contains two integers m and n — the number of rows and columns of the matrix respectively. The next m lines contain n characters each, representing the matrix. Output Output a single integer — the area of the largest rectangle that contains only empty cells. Examples Input 4 5 ..... .#. ..... ..... Output 10 Input 3 4 .... #. .... Output 4","solution":"def max_empty_rectangle(m, n, matrix): Calculates the area of the largest rectangle that contains only empty cells. if m == 0 or n == 0: return 0 # Initialize table to store height of empty vertical streaks height = [[0] * n for _ in range(m)] for i in range(m): for j in range(n): # calculate height for each cell if matrix[i][j] == \'.\': height[i][j] = height[i - 1][j] + 1 if i > 0 else 1 max_area = 0 # Calculate the maximum area for each row considering it as the bottom of the rectangle for i in range(m): stack = [] for j in range(n + 1): h = height[i][j] if j < n else 0 while stack and height[i][stack[-1]] >= h: H = height[i][stack.pop()] W = j if not stack else j - stack[-1] - 1 max_area = max(max_area, H * W) stack.append(j) return max_area # Example Usage if __name__ == \\"__main__\\": m, n = 4, 5 matrix = [ \\".....\\", \\".#.\\", \\".....\\", \\".....\\" ] print(max_empty_rectangle(m, n, matrix)) # Output: 10"},{"question":"Design and implement a class `MovingAverage` that calculates the moving average of the last `n` values added to it. Specifically, the class should have the following methods: - `__init__(self, size: int) -> None`: Initializes the `MovingAverage` object with a size `size`. - `next(self, val: int) -> float`: Returns the moving average of the last `size` values of the stream, including the current one. Examples: ```python movingAverage = MovingAverage(3) movingAverage.next(1) # 1.0 = 1 / 1 movingAverage.next(10) # 5.5 = (1 + 10) / 2 movingAverage.next(3) # 4.66667 = (1 + 10 + 3) / 3 movingAverage.next(5) # 6.0 = (10 + 3 + 5) / 3 ``` Note: - The moving average of a stream can be calculated by summing the last `size` elements and dividing the sum by `size`. - If the number of elements added is less than `size`, sum all the elements and divide by the number of elements added so far.","solution":"from collections import deque class MovingAverage: def __init__(self, size: int) -> None: Initialize the MovingAverage object with a size. self.size = size self.queue = deque() self.current_sum = 0.0 def next(self, val: int) -> float: Returns the moving average of the last size values of the stream, including the current one. if len(self.queue) == self.size: self.current_sum -= self.queue.popleft() # Remove the oldest value and subtract from sum self.queue.append(val) self.current_sum += val return self.current_sum / len(self.queue)"},{"question":"You are given a list of integers. Write a function to determine the length of the longest contiguous subarray with an equal number of positive and negative numbers. Input One line containing a list of integers S where -1000000 ≤ S[i] ≤ 1000000 and 1 ≤ length of S ≤ 10^5. Output Output one integer - the length of the longest subarray with equal numbers of positive and negative integers. Constraints 1 ≤ length of S ≤ 100000 SAMPLE INPUT [1, -1, 2, -2, 3, -3, 4, -4] SAMPLE OUTPUT 8","solution":"def longest_equal_positive_negative_subarray(arr): Given an array of integers, returns the length of the longest contiguous subarray where the number of positive and negative integers are equal. n = len(arr) # This dictionary will store the first occurrence of cumulative_diff diff_map = {0: -1} max_length = 0 cumulative_diff = 0 for i in range(n): if arr[i] > 0: cumulative_diff += 1 elif arr[i] < 0: cumulative_diff -= 1 if cumulative_diff in diff_map: max_length = max(max_length, i - diff_map[cumulative_diff]) else: diff_map[cumulative_diff] = i return max_length"},{"question":"A company has a new policy that requires all usernames to follow certain rules. These rules are designed to ensure that the usernames are easy to distinguish from each other. A valid username has to meet the following conditions: 1. The username can only contain lowercase English letters. 2. All letters in the username must be unique. 3. The length of the username must be between 5 and 15 characters, inclusive. Your task is to write a function that checks if a given username is valid based on the above rules. -----Input----- The input consists of a single string u containing the username. The length of u is between 1 and 1000, inclusive. -----Output----- Output \\"Valid\\" (without quotes) if the username meets all the conditions. Otherwise, output \\"Invalid\\" (without quotes). You can print each letter in any case (upper or lower). -----Examples----- Input coding Output Valid Input programming Output Invalid Input abcde Output Valid Input aaa Output Invalid -----Note----- In the first sample, all the letters in \\"coding\\" are unique and the length is within the required range, hence it is a valid username. In the second sample, \\"programming\\" contains repeated letters (\'r\', \'g\'), making it an invalid username. In the third sample, \\"abcde\\" meets all the conditions and is a valid username. In the fourth sample, \\"aaa\\" contains repeated letters, making it invalid regardless of the length.","solution":"def is_valid_username(username): Returns \'Valid\' if the username meets the specified conditions, otherwise \'Invalid\' Conditions: 1. The username can only contain lowercase English letters. 2. All letters in the username must be unique. 3. The length of the username must be between 5 and 15 characters, inclusive. if not all(\'a\' <= ch <= \'z\' for ch in username): return \\"Invalid\\" if len(set(username)) != len(username): return \\"Invalid\\" if not (5 <= len(username) <= 15): return \\"Invalid\\" return \\"Valid\\""},{"question":"You are given two equally ranked decks of n playing cards each, where each card has a value ranging from 1 to 10. Your task is to merge the two decks into one according to a specific pattern and calculate the total value of the merged deck. The merging pattern is as follows: starting with the first deck, take one card from the start, then one card from the start of the second deck, and repeat this process until all cards from both decks are merged into one. If the two decks are not of the same size, the function should return -1. Example 1: Input: deck1 = [2, 3, 5, 7, 9] deck2 = [1, 4, 6, 8, 10] Output: 55 Explanation: Merged deck = [2, 1, 3, 4, 5, 6, 7, 8, 9, 10] Total = 2 + 1 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55 Example 2: Input: deck1 = [1, 2, 3] deck2 = [4, 5] Output: -1 Explanation: The decks are of different sizes, so the function returns -1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `mergeDecks` which takes two lists of integers, deck1 and deck2, as input parameters and returns the total value of the merged deck, or -1 if the decks are of different sizes. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n), where n is the size of the decks. Constraints: 1 ≤ n ≤ 100 1 ≤ value of each card ≤ 10","solution":"def mergeDecks(deck1, deck2): Merge two decks according to the specified pattern and calculate the total value. Parameters: deck1 (list): First deck of cards deck2 (list): Second deck of cards Returns: int: Total value of the merged deck, or -1 if the decks are of different sizes if len(deck1) != len(deck2): return -1 merged_deck = [] for d1, d2 in zip(deck1, deck2): merged_deck.extend([d1, d2]) total_value = sum(merged_deck) return total_value"},{"question":"You are given a class hierarchy diagram where each class represents a different type of geometric shape. The classes have attributes specifying certain properties of the shape, such as dimensions, and methods for calculating properties like area and perimeter. The diagram is constructed with the following rules: - There is an abstract base class `Shape` with an abstract method `area()` and another abstract method `perimeter()`. - The `Shape` class is inherited by three concrete classes: `Rectangle`, `Circle`, and `Triangle`. - Each concrete class has its own attributes and concrete implementations of the `area()` and `perimeter()` methods. Your task is to implement this class hierarchy in Python, ensuring to match the provided structure and functionality described below: 1. Define the abstract base class `Shape`, which has: - An abstract method `area(self)` - An abstract method `perimeter(self)` 2. Define the `Rectangle` class that inherits from `Shape`: - A constructor `__init__(self, width, height)` that initializes the width and height of the rectangle - Implement the `area(self)` method to return the area of the rectangle - Implement the `perimeter(self)` method to return the perimeter of the rectangle 3. Define the `Circle` class that inherits from `Shape`: - A constructor `__init__(self, radius)` that initializes the radius of the circle - Implement the `area(self)` method to return the area of the circle - Implement the `perimeter(self)` method to return the circumference of the circle 4. Define the `Triangle` class that inherits from `Shape`: - A constructor `__init__(self, a, b, c)` that initializes the three sides of the triangle - Implement the `area(self)` method using Heron\'s formula to return the area of the triangle - Implement the `perimeter(self)` method to return the perimeter of the triangle Additionally, write a function `create_shapes()` that: - Takes no arguments. - Creates an instance of each shape with arbitrary dimensions. - Returns a list with these shape instances. Example usage: ```python shapes = create_shapes() for shape in shapes: print(f\\"Area of {shape.__class__.__name__}: {shape.area()}\\") print(f\\"Perimeter of {shape.__class__.__name__}: {shape.perimeter()}\\") ``` The expected output when running the above example should be printed values of area and perimeter for each of the `Rectangle`, `Circle`, and `Triangle` shapes. Note: - Use the value of π as `3.14159`. - You may use the math library\'s `sqrt` function for the square root calculation in Heron\'s formula. --- Your implementation should match the structure, adhere to object-oriented principles, and produce correct results for the required methods.","solution":"from abc import ABC, abstractmethod import math class Shape(ABC): @abstractmethod def area(self): pass @abstractmethod def perimeter(self): pass class Rectangle(Shape): def __init__(self, width, height): self.width = width self.height = height def area(self): return self.width * self.height def perimeter(self): return 2 * (self.width + self.height) class Circle(Shape): def __init__(self, radius): self.radius = radius def area(self): return 3.14159 * self.radius * self.radius def perimeter(self): return 2 * 3.14159 * self.radius class Triangle(Shape): def __init__(self, a, b, c): self.a = a self.b = b self.c = c def area(self): s = (self.a + self.b + self.c) / 2 return math.sqrt(s * (s - self.a) * (s - self.b) * (s - self.c)) def perimeter(self): return self.a + self.b + self.c def create_shapes(): rectangle = Rectangle(3, 4) circle = Circle(5) triangle = Triangle(3, 4, 5) return [rectangle, circle, triangle]"},{"question":"You are given a string that consists of lowercase and uppercase English letters. You need to determine the minimum number of characters that need to be changed to make the string alternating in case. An alternating case string satisfies the condition that no two adjacent characters are of the same case. Your task is to write a program that computes this minimum number of changes. -----Input----- The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains a single string consisting of lowercase and uppercase English letters with length n (1 ≤ n ≤ 1000). -----Output----- For each test case, print a single integer — the minimum number of changes required. -----Example----- Input 3 aAbBcC AaBB aBaBaB Output 0 1 0 -----Note----- In the first example, the string \\"aAbBcC\\" is already alternating, so no changes are needed. In the second example, we can change the second \'B\' to \'b\' to make the string \\"AaBb\\". In the third example, the string \\"aBaBaB\\" is already alternating, so no changes are needed.","solution":"def min_changes_to_alternate_case(n, string): Calculate the minimum number of changes needed to make the string alternating in case. changes_case1 = 0 # Starting with a lowercase letter changes_case2 = 0 # Starting with an uppercase letter for i, char in enumerate(string): if i % 2 == 0: if char.islower(): changes_case2 += 1 else: changes_case1 += 1 else: if char.islower(): changes_case1 += 1 else: changes_case2 += 1 return min(changes_case1, changes_case2) def solve(test_cases): results = [] for test_case in test_cases: n, string = test_case results.append(min_changes_to_alternate_case(n, string)) return results"},{"question":"Write a function that takes an integer `N` as input and finds the smallest integer greater than `N` that contains the digit \'5\'. If `N` already contains the digit \'5\', the output should be `N` itself. -----Constraints----- - The input integer `N` is between 1 and 1,000,000. -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the smallest integer greater than `N` that contains the digit \'5\'. If `N` already contains the digit \'5\', print `N`. -----Sample Input----- 48 -----Sample Output----- 50 The smallest integer greater than 48 that contains the digit \'5\' is 50.","solution":"def find_smallest_integer_with_5(N): Finds the smallest integer greater than N that contains the digit \'5\'. If N already contains the digit \'5\', returns N itself. # Convert N to a string to check for the digit \'5\' if \'5\' in str(N): return N # Increment N until we find a number that contains the digit \'5\' current = N + 1 while \'5\' not in str(current): current += 1 return current # Example usage: # N = int(input()) # print(find_smallest_integer_with_5(N))"},{"question":"A scientist named Dr. Xelux is developing a robotic sorting arm in his lab. The arm picks a specified range of books from a shelf and sorts only those books in non-decreasing order, without changing the positions of the rest of the books on the shelf. Given an array a of length n, where each element represents the weight of a book, and two integers l and r (1 leq l leq r leq n), being the range of indices that the robotic arm will sort. Your task is to compute the resulting array after sorting the specified range of books. -----Input----- The first line contains an integer n (1 leq n leq 1000) — the length of the array a. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6) — the description of the array a. The third line contains the two integers l and r (1 leq l leq r leq n) — the range of indices that the robotic arm will sort. -----Output----- Print the resulting array a after sorting the specified range. -----Examples----- Input 5 3 1 4 1 5 2 4 Output 3 1 1 4 5 Input 6 6 5 4 3 2 1 1 3 Output 4 5 6 3 2 1 -----Note----- In the first example, the sub-range from index 2 to 4 of the array [3, 1, 4, 1, 5] is [1, 4, 1]. After sorting this sub-range, the array becomes [3, 1, 1, 4, 5]. In the second example, the sub-range from index 1 to 3 of the array [6, 5, 4, 3, 2, 1] is [6, 5, 4]. After sorting this sub-range, the array becomes [4, 5, 6, 3, 2, 1].","solution":"def robotic_sort(a, l, r): Sort the subarray from index l-1 to r-1 (inclusive) and return the entire array. Parameters: a (list of int): The list of book weights. l (int): The starting index of the range to be sorted (1-based). r (int): The ending index of the range to be sorted (1-based). Returns: list of int: The array after sorting the specified range. # Convert l and r to 0-based indices l, r = l - 1, r - 1 # Extract the subarray that needs to be sorted subarray = a[l:r + 1] # Sort the subarray sorted_subarray = sorted(subarray) # Replace the original subarray with the sorted one a[l:r + 1] = sorted_subarray return a"},{"question":"A sequence of binary digits (0s and 1s) is called special if it has the property that the number of 1s is greater than or equal to the number of 0s in all its prefixes. For example, the following sequences are special: [1, 1, 0], [1, 0, 1], and [1, 1, 1, 0, 1, 0]. However, the sequences [0, 1, 1] and [1, 0, 0] are not special. Given a binary sequence a_1, a_2, dots, a_n, determine if the sequence is special. -----Input----- The first line contains the integer n (1 le n le 10^5) — the length of the binary sequence. The second line contains n binary digits a_1, a_2, dots, a_n separated by spaces. -----Output----- Print \\"YES\\" if the given binary sequence is special. Otherwise, print \\"NO\\". -----Examples----- Input 3 1 0 1 Output YES Input 4 1 0 0 1 Output NO Input 5 1 1 1 0 1 Output YES","solution":"def is_special_sequence(n, sequence): Determine if a binary sequence is special. A binary sequence is special if the number of 1s is greater than or equal to the number of 0s in all its prefixes. :param n: Length of the binary sequence. :param sequence: List containing the binary sequence. :return: \\"YES\\" if the sequence is special, \\"NO\\" otherwise. ones_count = 0 zeros_count = 0 for digit in sequence: if digit == 1: ones_count += 1 else: zeros_count += 1 if zeros_count > ones_count: return \\"NO\\" return \\"YES\\""},{"question":"There is a large field of flowers arranged in a 2D grid. Each cell in the grid contains a certain number of flowers. The grid is represented by a matrix M with n rows and m columns, where M[i][j] indicates the number of flowers in the cell at the i-th row and j-th column. Your task is to help Gru determine the total number of flowers in different subregions of the grid. Each subregion is defined by its top-left and bottom-right corners. Given a matrix M, and a list of queries where each query specifies the coordinates of the top-left and bottom-right corners of a subregion, compute the sum of flowers within that subregion for each query. Input: The first line contains two integers n and m, the dimensions of the matrix. The following n lines each contain m integers, describing the matrix M. The next line contains an integer q, the number of queries. The following q lines each contain four integers x1, y1, x2, y2, representing the top-left and bottom-right coordinates of a subregion (0-indexed). Output: Output q lines each containing a single integer, the sum of flowers in the specified subregion for that query. Constraints: 1 ≤ n, m ≤ 1000 | 1 ≤ q ≤ 100000 | 0 ≤ M[i][j] ≤ 1000 | 0 ≤ x1 ≤ x2 < n | 0 ≤ y1 ≤ y2 < m SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 0 0 1 1 SAMPLE OUTPUT 28 12","solution":"def compute_flower_sums(matrix, queries): n = len(matrix) m = len(matrix[0]) # Compute the prefix sum matrix prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n+1): for j in range(1, m+1): prefix_sum[i][j] = (matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) results = [] for (x1, y1, x2, y2) in queries: total = (prefix_sum[x2 + 1][y2 + 1] - prefix_sum[x1][y2 + 1] - prefix_sum[x2 + 1][y1] + prefix_sum[x1][y1]) results.append(total) return results"},{"question":"Given an integer array nums, your task is to complete the function findCombinations which takes two arguments: the sorted integer array nums and an integer target. The function should find all unique combinations in nums where the candidate numbers sum to target. Each number in nums may only be used once in the combination. Example 1: Input: nums = [2, 3, 6, 7], target = 7 Output: [[7]] Explanation: 2 and 3 are not possible to form 7 since we can use each number only once. Example 2: Input: nums = [2, 3, 5], target = 8 Output: [[3, 5]] Explanation: Only the combination of 3 and 5 sums up to 8 using each number once. Your Task: Complete the function findCombinations() which takes a sorted integer array nums and an integer target as input parameters and returns a list of all unique combinations where the corresponding numbers sum up to target. Each combination should be represented as a list of integers. Expected Time Complexity: O(2^N) where N is the length of the input array. Expected Auxiliary Space: O(K) where K is the number of unique combinations. Constraints: 1<= nums.length <= 12 1<= nums[i] <= 50 1<= target <= 100 Note: The Input/Output format and Example given are used for system\'s internal purpose and should be used for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def findCombinations(nums, target): def backtrack(start, path, target): if target == 0: result.append(list(path)) return if target < 0: return for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: # Skip duplicates continue path.append(nums[i]) backtrack(i + 1, path, target - nums[i]) path.pop() result = [] nums.sort() backtrack(0, [], target) return result"},{"question":"In a large software company, there is a requirement to manage their email database effectively. Each email in the database is represented as a string E of varying length up to M characters. Some of these emails may be marked as spam by the system. As part of their spam filter improvement project, the company wants to find if there are any duplicate emails in their database and if so, how many times each duplicate email appears. Note that emails are case-insensitive (i.e., \\"Email@domain.com\\" is considered the same as \\"email@domain.com\\"). Write a program that takes N email addresses and finds the count of each unique email in case-insensitive form. Input format - The first line of input contains a single integer N, the number of email addresses. - The next N lines each contain a single email string. Output format - Print each unique email string (in lowercase) followed by its count. Each unique email and its count should be printed on a new line. - The output should list the emails in the lexicographical order. Constraints - 1 ≤ N ≤ 1000 - 1 ≤ length of each email ≤ M (where M ≤ 100) SAMPLE INPUT 6 Email@domain.com email@domain.com user@domain.org USER@domain.org another@domain.com Another@domain.com SAMPLE OUTPUT another@domain.com 2 email@domain.com 2 user@domain.org 2","solution":"def count_emails(N, emails): Counts the occurrences of each unique email in a case-insensitive manner. Args: N (int): Number of email addresses. emails (list of str): List of email string. Returns: list of tuple: A list of tuples where each tuple contains a unique email and its count, sorted lexicographically. email_dict = {} for email in emails: email_lower = email.lower() if email_lower in email_dict: email_dict[email_lower] += 1 else: email_dict[email_lower] = 1 sorted_emails = sorted(email_dict.items()) return sorted_emails"},{"question":"Write a program that takes as input a string and a list of words, and determines if the string can be segmented into a sequence of one or more words from the list. The segmentation must use each word exactly one time. Input The first line of the input contains the string `s` (1 <= |s| <= 100). The second line contains an integer `n` (1 <= n <= 50), which is the number of words in the list. The third line contains `n` words separated by spaces, which represents the list of words. Each word in the list has a length between 1 and 20 and consists of lowercase English letters. Output Output \\"Yes\\" if the string can be segmented using the words in the list; otherwise, output \\"No\\". Example Input applepenapple 2 apple pen Output Yes Input catsandog 5 cats dog sand and cat Output No","solution":"def word_break(s, word_list): Determines if the string `s` can be segmented into a sequence of one or more words from `word_list`. word_set = set(word_list) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return \\"Yes\\" if dp[len(s)] else \\"No\\""},{"question":"You are given two strings, A and B, each consisting of lowercase English letters. You need to determine the minimum number of operations required to convert string A into string B. The allowed operations are: 1. Insert a character. 2. Delete a character. 3. Replace a character. Write a function to compute the minimum number of operations required to transform A into B. ------ Input Format ------ - The first line will contain T, the number of test cases. - Each test case consists of two lines. The first line contains the string A and the second line contains the string B. ------ Output Format ------ For each test case, output a single line containing the minimum number of operations required to transform A into B. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ text{length of } A, B ≤ 10^{3} ----- Sample Input 1 ------ 3 abc yabd kitten sitting flaw lawn ----- Sample Output 1 ------ 2 3 2 ----- Explanation 1 ------ Test Case 1: The two operations to transform \\"abc\\" into \\"yabd\\" are: 1. Replace \'a\' with \'y\'. 2. Insert \'d\' at the end. Test Case 2: The three operations to transform \\"kitten\\" into \\"sitting\\" are: 1. Replace \'k\' with \'s\'. 2. Insert \'i\' after \'s\'. 3. Insert \'g\' at the end. Test Case 3: The two operations to transform \\"flaw\\" into \\"lawn\\" are: 1. Remove \'f\'. 2. Append \'n\' to the end.","solution":"def min_operations(A, B): Calculate the minimum number of operations required to convert string A to string B. Operations allowed: insert a character, delete a character, replace a character. m = len(A) n = len(B) # Create a DP table to store the minimum operations required for each subproblem dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the table for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # delete dp[i][j - 1], # insert dp[i - 1][j - 1]) # replace return dp[m][n] def solve(T, test_cases): results = [] for i in range(T): A, B = test_cases[i] results.append(min_operations(A, B)) return results"},{"question":"You are given an array of integers. Your task is to determine if the array can be rearranged such that all the odd-indexed elements are odd and all the even-indexed elements are even. The indexing is based on 1-based indexing. ------ Input ------ The first line of the input contains an integer T, the number of test cases. The first line of each test case contains an integer N, the size of the array. The second line of each test case contains N space-separated integers representing the elements of the array. ------ Output ------ For each test case, output \\"YES\\" if the array can be rearranged as described, otherwise output \\"NO\\". ------ Constraints ------ - 1 ≤ T ≤ 20 - 1 ≤ N ≤ 100,000 - 1 ≤ A_{i} ≤ 10^{9} ------ Sample Input 1 ------ 2 4 1 2 3 4 3 1 3 5 ------ Sample Output 1 ------ YES NO ------ Explanation 1 ------ In the first test case, we can rearrange the array to [2, 1, 4, 3]. All odd-indexed positions (1, 3) contain odd numbers, and all even-indexed positions (2, 4) contain even numbers. In the second test case, there are no even numbers, so it\'s impossible to rearrange the array as required.","solution":"def can_rearrange_odd_even(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] even_count = sum(1 for x in arr if x % 2 == 0) odd_count = N - even_count if even_count >= N // 2 and odd_count >= (N + 1) // 2: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"# Task Alex has recently started a small game where he needs to generate special codes for participants. Each participant gets a code, which consists of a number from `1` to `n`. However, Alex only considers a code \\"special\\" if it contains the digit `7`. Your task is to help Alex determine the total number of special codes among the codes from `1` to `n`. # Input/Output - `[input]` integer `n` The total number of codes Alex generates. `1 ≤ n ≤ 10^6` - `[output]` an integer The number of special codes. # Example For `n = 20`, the result should be `2`. ``` The numbers from 1 to n are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 Among these, the special codes are: 7, 17 So, the output should be 2. ``` For `n = 70`, the result should be `8`. ``` The numbers from 1 to n are: 1, 2, ..., 69, 70 Among these, the special codes are: 7, 17, 27, 37, 47, 57, 67, 70 So, the output should be 8. ```","solution":"def count_special_codes(n): Returns the number of special codes from 1 to n inclusive. A special code contains the digit \'7\'. count = 0 for i in range(1, n + 1): if \'7\' in str(i): count += 1 return count"},{"question":"Given an array of integers, you need to find both the minimum and maximum elements in the array. You have to implement a function that accepts an array and returns a tuple containing the minimum and maximum values. The function should handle both sorted and unsorted arrays efficiently. Example 1: Input: arr = [3, 5, 1, 2, 4, 8] Output: (1, 8) Explanation: In the input array, the minimum element is 1 and the maximum is 8. Example 2: Input: arr = [10, 9, 8, 7, 6, 5, 4] Output: (4, 10) Explanation: In the input array, the minimum element is 4 and the maximum is 10. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findMinMax()` which takes the array `arr` as input and returns a tuple `(min, max)`. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |arr| ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9","solution":"def findMinMax(arr): Returns a tuple containing the minimum and maximum elements in the array. if not arr: raise ValueError(\\"Array should not be empty\\") min_val = arr[0] max_val = arr[0] for num in arr[1:]: if num < min_val: min_val = num elif num > max_val: max_val = num return (min_val, max_val)"},{"question":"In a faraway land, there exists a piece of art known as a Chessboard Pattern. On an n x n grid, a Chessboard Pattern alternates between two colors, starting with \'W\' for the top left square. Nickolas, an art enthusiast, loves to create such patterns programmatically. He needs your help to generate a Chessboard Pattern for any given size n. -----Input----- A single line contains a single integer n (1 ≤ n ≤ 50) — the size of the grid. -----Output----- Print n lines, each containing n characters. The i-th character of the j-th line should be either \'W\' or \'B\', representing the color white or black, respectively, and forming a Chessboard Pattern as described. -----Examples----- Input 1 Output W Input 2 Output WB BW Input 3 Output WBW BWB WBW","solution":"def generate_chessboard_pattern(n): Returns a list of strings representing an n x n Chessboard Pattern. Each string represents a row of the chessboard. pattern = [] for i in range(n): row = \\"\\" for j in range(n): if (i + j) % 2 == 0: row += \\"W\\" else: row += \\"B\\" pattern.append(row) return pattern"},{"question":"Complete the function that takes an integer array as input and returns an array of the two largest numbers. The largest number should appear first followed by the second largest number. Ensure the function handles edge cases like arrays with fewer than two elements gracefully. **Notes:** * You may not use built-in sorting functions. * Consider performance and aim for a linear-time solution. Examples ``` [1, 2, 3, 4, 5] --> [5, 4] [10, 5, 9, 3, 8, 12] --> [12, 10] [13, 13, 13, 5] --> [13, 13] [5] --> [5] [] --> [] [9, 9, 9, 10] --> [10, 9] ```","solution":"def two_largest_numbers(arr): Returns an array containing the two largest numbers. The largest number should be first followed by the second largest. Args: arr (list): List of integers. Returns: list: List with the largest and second largest numbers. if not arr: return [] elif len(arr) == 1: return [arr[0]] # Initialize variables to track the largest and second largest numbers max1 = float(\'-inf\') max2 = float(\'-inf\') for num in arr: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num return [max1, max2]"},{"question":"# Esolang Interpreters #5 - Brainlux Interpreter About this Kata Series \\"Esolang Interpreters\\" is a Kata Series that originally began as three separate, independent esolang interpreter Kata authored by [@donaldsebleung](http://codewars.com/users/donaldsebleung) which all shared a similar format and were all somewhat inter-related. Under the influence of [a fellow Codewarrior](https://www.codewars.com/users/nickkwest), these three high-level inter-related Kata gradually evolved into what is known today as the \\"Esolang Interpreters\\" series. This series is a high-level Kata Series designed to challenge the minds of bright and daring programmers by implementing interpreters for various [esoteric programming languages/Esolangs](http://esolangs.org), mainly [Brainfuck](http://esolangs.org/wiki/Brainfuck) derivatives but not limited to them, given a certain specification for a certain Esolang. Perhaps the only exception to this rule is the very first Kata in this Series which is intended as an introduction/taster to the world of esoteric programming languages and writing interpreters for them. The Language Brainlux is a [borderline-esoteric programming language/Esolang](http://esolangs.org) which is a derivative of [Brainfuck](http://esolangs.org/wiki/Brainfuck) that uses a minimalistic set of commands to perform computations. Valid commands in Brainlux include: - `>` - Move the data pointer to the right. - `<` - Move the data pointer to the left. - `+` - Increment the byte at the data pointer. - `-` - Decrement the byte at the data pointer. - `[` - Jump past the matching `]` if the byte at the data pointer is zero. - `]` - Jump back to the matching `[` if the byte at the data pointer is nonzero. - `\\"` - Multiply the byte at the data pointer by 2. - `\'` - Divide the byte at the data pointer by 2. The specification states that any non-command character (i.e. any character other than those mentioned above) should simply be ignored. The output of the interpreter is the final state of the memory tape after the provided code has been executed a certain number of times. In current implementations, the memory tape is finite in size and initialized with zeros. This is one of the few major differences of Brainlux from Brainfuck, as Brainlux has specific behavior for multiplication and division by 2. More info on this Esolang can be found [here](http://esolangs.org/wiki/Brainlux). The Task Your task is to implement a custom Brainlux interpreter `brainlux()`/`Interpret` which accepts the following arguments in the specified order: 1. `code` - **Required**. The Brainlux code to be executed, passed in as a string. May contain comments (non-command characters), in which case your interpreter should simply ignore them. If empty, simply return the initial state of the memory tape. 2. `iterations` - **Required**. A non-negative integer specifying the number of iterations to be performed before the final state of the memory tape is returned. See notes for definition of 1 iteration. If equal to zero, simply return the initial state of the memory tape. 3. `tape_length` - **Required**. The length of the memory tape which should be initialized to zeros, passed in as a positive integer. A few things to note: - Your interpreter should treat all command characters as **case-sensitive** so other forms or characters are **not** valid command characters. - Your interpreter should initialize all cells within the memory tape to a value of `0` regardless of the length of the tape. - In this implementation, the pointer must always start at the **first cell** of the memory tape (i.e. first index). This is important as some implementations have the data pointer starting at different positions. - One iteration is defined as one step in the program, i.e., the number of command characters evaluated. For example, given a program `>+<-\\"<>+-` and an iteration count of `5`, your interpreter should evaluate `>+<-\\"` before returning the final state of the memory tape. **Non-command characters should not count towards the number of iterations.** - Regarding iterations, the act of skipping to the matching `]` when a `[` is encountered (or vice versa) is considered to be **one** iteration regardless of the number of command characters in between. The next iteration then commences at the command **right after** the matching `]` (or `[`). - Your interpreter should terminate normally and return the final state of the memory tape whenever **any** of the mentioned conditions become true: (1) All commands have been considered left to right, or (2) Your interpreter has already performed the number of iterations specified in the second argument. - The return value of your interpreter should be a representation of the final state of the memory tape as a list or array of integers. For example, if the final state of your memory tape is `[1, 0, 3, 0, 0]`. Good luck :D","solution":"def brainlux(code, iterations, tape_length): tape = [0] * tape_length pointer = 0 commands = [\'>\', \'<\', \'+\', \'-\', \'[\', \']\', \'\\"\', \\"\'\\"] code = [c for c in code if c in commands] code_length = len(code) i = 0 passed_iterations = 0 def find_matching_bracket(code, start, direction): stack = 1 pos = start while stack != 0: pos += direction if code[pos] == \'[\': stack += direction elif code[pos] == \']\': stack -= direction return pos while passed_iterations < iterations and i < code_length: cmd = code[i] if cmd == \\">\\": pointer = (pointer + 1) % tape_length elif cmd == \\"<\\": pointer = (pointer - 1) % tape_length elif cmd == \\"+\\": tape[pointer] = (tape[pointer] + 1) % 256 elif cmd == \\"-\\": tape[pointer] = (tape[pointer] - 1) % 256 elif cmd == \\"[\\": if tape[pointer] == 0: i = find_matching_bracket(code, i, 1) elif cmd == \\"]\\": if tape[pointer] != 0: i = find_matching_bracket(code, i, -1) elif cmd == : tape[pointer] = (tape[pointer] * 2) % 256 elif cmd == \\"\'\\": tape[pointer] = (tape[pointer] // 2) i += 1 passed_iterations += 1 return tape"},{"question":"In a country far, far away, there are N cities connected by N-1 bidirectional roads such that there is a unique path between any two cities. The government decides to deploy a new postal service, and they need to set up one central post office in one of the cities. There are certain requirements to choose the central post office location: 1. The city chosen should be such that the sum of distances from this city to all other cities is minimized. Define the distance between two cities as the minimum number of roads one has to take to reach from one city to another. Given the structure of the cities and roads, help the government find the city where the central post office should be built. Input Format The first line contains a single integer, N, denoting the number of cities. Each of the following N-1 lines contains two space-separated integers u and v, denoting a road between city u and city v. Constraints 1 leq N leq 10^5 Output Format Print a single integer denoting the city number where the central post office should be built. If there are multiple solutions, print the smallest city number. Sample Input 5 1 2 1 3 3 4 3 5 Sample Output 3 Explanation The distances from city 3 are: - To city 1: 1 road - To city 2: 2 roads (through city 1) - To city 4: 1 road - To city 5: 1 road The sum of distances is 1 + 2 + 1 + 1 = 5. It can be verified that no other city has a smaller sum of distances.","solution":"from collections import deque, defaultdict def find_central_post_office(n, roads): if n == 1: return 1 graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) def bfs(start): distances = [-1] * (n + 1) distances[start] = 0 queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if distances[neighbor] == -1: distances[neighbor] = distances[node] + 1 queue.append(neighbor) return distances # Do BFS from an arbitrary node (e.g., node 1) to find the furthest node distances_from_start = bfs(1) furthest_node = max(range(1, n + 1), key=lambda i: distances_from_start[i]) # Do a BFS from the furthest node found to determine the actual longest path distances_from_furthest = bfs(furthest_node) max_distance = max(distances_from_furthest) # Do another BFS to find the potential central nodes central_candidates = [i for i, d in enumerate(distances_from_furthest) if d == max_distance // 2] # Check all candidates and calculate the sum of distances to find the optimal node min_sum_distances = float(\'inf\') best_city = None for candidate in central_candidates: distances = bfs(candidate) sum_distances = sum(distances[1:]) if sum_distances < min_sum_distances or (sum_distances == min_sum_distances and candidate < best_city): min_sum_distances = sum_distances best_city = candidate return best_city"},{"question":"You are given an integer list `arr` consisting of positive and negative integers. Your task is to rearrange the elements of `arr` such that all the positive integers appear before all the negative integers. The relative order of positive integers and negative integers should remain the same as they were in the original list. Write a function `rearrange(arr)` that takes a list of integers and returns a list where all the positives are positioned before the negatives, while maintaining the original order of both positive and negative integers. For example, given the list `[3, -4, 5, -9, 7, -2]`, the rearranged list should be `[3, 5, 7, -4, -9, -2]`. # Function Signature `def rearrange(arr: List[int]) -> List[int]:` # Input - A single list `arr` of integers, where 1 leq |arr| leq 10^6 and each integer is between -10^9 and 10^9. # Output - A list of integers where all the positive numbers come before all the negative numbers while maintaining their respective order. # Examples ```python assert rearrange([3, -4, 5, -9, 7, -2]) == [3, 5, 7, -4, -9, -2] assert rearrange([1, -1, 2, -2, 3, -3]) == [1, 2, 3, -1, -2, -3] assert rearrange([-5, -10, 2, 4]) == [2, 4, -5, -10] assert rearrange([-1, -2, -3, -4]) == [-1, -2, -3, -4] assert rearrange([1, 2, 3, 4]) == [1, 2, 3, 4] ``` # Constraints - You should aim for an O(n) time complexity solution. - You should not use any extra space, beyond a constant amount (i.e., an in-place solution is preferred). # Hint - Using two pointers, one starting from the beginning of the list to gather positive integers and another starting from the end of the list to gather negative integers, might lead you to a linear-time solution.","solution":"from typing import List def rearrange(arr: List[int]) -> List[int]: positive = [num for num in arr if num >= 0] negative = [num for num in arr if num < 0] return positive + negative"},{"question":"You are a software engineer working on a drone delivery system. The drones are programmed to deliver packages across a city represented as a grid. The city grid is given as an N times N matrix, where each cell (i, j) represents a building with a certain height h_{i, j}. Drones can only fly horizontally or vertically, from one building to another. A drone can move from building (i, j) to building (i\', j\') if and only if |h_{i, j} - h_{i\', j\'}| leq K, where K is the maximum allowable height difference that a drone can tolerate. Your task is to write a program to find out the minimum distance (in terms of number of moves) that a drone needs to travel from the top-left corner of the city grid (0, 0) to the bottom-right corner (N - 1, N - 1). If it is not possible for the drone to reach the destination, the program should return -1. -----Input----- The input consists of: - One integer N on the first line representing the size of the grid (2 leq N leq 1000). - One integer K on the second line representing the maximum allowable height difference (0 leq K leq 10^8). - N lines follow, each containing N integers, representing the building heights h_{i, j} (1 leq h_{i, j} leq 10^9). -----Output----- Output a single integer, which is the minimum distance (in terms of number of moves) the drone needs to travel from the top-left to the bottom-right of the grid. If it is impossible to reach the destination, output -1. -----Examples----- Sample Input: 3 2 10 8 10 12 9 8 10 11 10 Sample Output: 4 Sample Input: 2 0 3 4 2 6 Sample Output: -1","solution":"from collections import deque def min_drone_distance(N, K, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * N for _ in range(N)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == N-1 and y == N-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]: if abs(grid[x][y] - grid[nx][ny]) <= K: visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"Anna is a computer science student working on an interesting problem involving data packets. She has access to a network of computers organized in a tree structure with **n** nodes labeled from 1 to **n**, and edges representing network cables between the nodes. Each edge has a specific transmission cost, representing the time it takes for a data packet to travel from one node to another. Anna\'s task is to ensure that a data packet can be sent from the root node (node 1) to every other node in the network within a certain timeframe, **T**. The packet can follow any path along the edges but cannot exceed the specified timeframe **T** in any path. Help Anna determine if it is possible to transmit data packets from the root node to all other nodes in the tree within the given timeframe **T**. # Input - The first line contains two integers, **n** (2 ≤ **n** ≤ 100) (the number of nodes in the tree) and **T** (1 ≤ **T** ≤ 1000) (the maximum allowable transmission time). - The next **n-1** lines each contain three integers **u**, **v**, and **w** (1 ≤ u, v ≤ n; 1 ≤ w ≤ 100), where **u** and **v** are nodes connected by an edge, and **w** is the transmission cost between these nodes. # Output - Output \\"YES\\" if it is possible to send a data packet from the root node to all other nodes within the timeframe **T**. Otherwise, output \\"NO\\". # Example Input: ``` 5 10 1 2 3 1 3 2 2 4 4 3 5 5 ``` Output: ``` YES ``` Input: ``` 4 5 1 2 6 1 3 2 3 4 3 ``` Output: ``` NO ```","solution":"import sys from collections import defaultdict, deque def can_transmit_within_time(n, T, edges): def bfs(root): dist = [sys.maxsize] * (n + 1) dist[root] = 0 queue = deque([root]) while queue: node = queue.popleft() for neighbor, weight in tree[node]: if dist[node] + weight < dist[neighbor]: dist[neighbor] = dist[node] + weight queue.append(neighbor) return dist tree = defaultdict(list) for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) dist = bfs(1) for d in dist[1:]: if d > T: return \\"NO\\" return \\"YES\\" def main(n, T, edges): return can_transmit_within_time(n, T, edges)"},{"question":"In the kingdom of Vetoria, there is a beautiful garden with a unique layout. The garden is structured as a grid of square plots, where each plot contains a certain number of flowers. The King of Vetoria loves to take long walks in the garden, but he only walks in a straight line along the rows or columns. He also loves the sight of flowers and, as per his preference, he wants to walk such that the total number of flowers he sees is maximized. Your task is to determine the maximum number of flowers the King can see walking in a single straight line along any row or any column of the garden. Input: The first line of input contains the number of test cases \'T\'. Each test case starts with two integers, \'R\' and \'C\', representing the number of rows and columns in the garden, respectively. The next \'R\' lines contain \'C\' integers each, representing the number of flowers in each plot. Output: For each test case, output a single integer - the maximum number of flowers the King can see walking along any single row or any single column. Constraints: 1 ≤ T ≤ 100 1 ≤ R, C ≤ 50 0 ≤ Number of flowers in each plot ≤ 1000 SAMPLE INPUT 2 3 4 2 3 1 4 0 6 3 1 5 1 2 7 2 2 10 20 30 40 SAMPLE OUTPUT 15 70","solution":"def find_max_flowers(test_cases): results = [] for case in test_cases: R, C, garden = case[\'R\'], case[\'C\'], case[\'garden\'] max_flowers = 0 # Check all rows for row in garden: max_flowers = max(max_flowers, sum(row)) # Check all columns for col in range(C): column_sum = sum(garden[row][col] for row in range(R)) max_flowers = max(max_flowers, column_sum) results.append(max_flowers) return results # Function to process input def process_input(input_data): lines = input_data.strip().split(\\"n\\") index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): R, C = map(int, lines[index].split()) index += 1 garden = [] for _ in range(R): garden.append(list(map(int, lines[index].split()))) index += 1 test_cases.append({\'R\': R, \'C\': C, \'garden\': garden}) return find_max_flowers(test_cases)"},{"question":"Two players are playing a game on an 8 times 8 grid. The rules of the game are as follows: - The game starts with a stack of boldsymbol{text{n}} coins located at the top-left corner (1,1) of the grid. - In each move, a player can move one coin to an adjacent cell that is either directly to the right or directly below the current cell. The players alternate turns. The first player unable to move loses the game. Given boldsymbol{text{n}} coins at the starting cell (1,1), determine which player will win the game assuming both players move optimally. Input Format: The first line contains an integer, mathbf{T}, denoting the number of test cases. Each of the following mathbf{T} lines contains an integer boldsymbol{text{n}}, denoting the number of coins. Constraints: 1 leq T leq 100 1 leq n leq 1000 Output Format: For each test case, print textbf{First} if the first player is the winner; otherwise, print textbf{Second}. Sample Input: 3 1 2 4 Sample Output: First Second Second","solution":"def determine_winner(n): Determines the winner of the game based on the number of coins. Returns \'First\' if the first player wins, else returns \'Second\'. if n % 2 == 1: return \'First\' else: return \'Second\' def solve_game(T, cases): Solves the game for T test cases and returns a list of results. Each result is either \'First\' or \'Second\'. results = [] for n in cases: results.append(determine_winner(n)) return results"},{"question":"Given a string S consisting of lowercase letters, your task is to find the number of distinct contiguous substrings of S. -----Input----- The input consists of a single test case. The first line contains a single integer ( n ) (( 1 le n le 1000 )), the length of the string S. The second line contains the string S itself, which is of length ( n ). -----Output----- Output a single integer, the number of distinct contiguous substrings of S. -----Examples----- Sample Input: 5 abcde Sample Output: 15 Sample Input: 3 aaa Sample Output: 3","solution":"def count_distinct_contiguous_substrings(n, S): This function returns the number of distinct contiguous substrings of a given string S. Parameters: n (int): Length of the string S. S (str): The string whose distinct contiguous substrings are to be counted. Returns: int: The number of distinct contiguous substrings of S. substrings = set() # Generate all possible contiguous substrings for i in range(n): for j in range(i+1, n+1): substrings.add(S[i:j]) return len(substrings)"},{"question":"Alice is trying to organize her bookshelf. She has a list of books that she wants to place on the shelf in a specific order. However, due to the limited space on her shelf, she can only place one book at a time. If she tries to place a book that is already on the shelf, she will remove it instead. You need to help Alice determine the final arrangement of books on the shelf after all the operations are completed. Example 1: Input: books = [\\"A\\", \\"B\\", \\"A\\", \\"C\\", \\"END\\"] Output: {\\"B\\", \\"C\\"} Explanation: Alice places book \\"A\\", then \\"B\\". When she tries to place \\"A\\" again, she removes it. Finally, she places \\"C\\". So, the final array of books on the shelf are \\"B\\" and \\"C\\". Example 2: Input: books = [\\"X\\", \\"Y\\", \\"X\\", \\"END\\"] Output: {\\"Y\\"} Explanation: Alice places book \\"X\\", then \\"Y\\". When she tries to place \\"X\\" again, she removes it. So, the final array of books on the shelf is \\"Y\\". Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function organize_books() that takes an array of String (books), sizeOfArray (n), and returns a set of books that are left on the shelf at the end. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ N ≤ 10^5","solution":"def organize_books(books): Returns the set of books that remain on the shelf. shelf = set() for book in books: if book == \\"END\\": break if book in shelf: shelf.remove(book) else: shelf.add(book) return shelf"},{"question":"Implement a function `histogram_sort` that sorts an input list of integers based on their frequency in descending order. If two numbers have the same frequency, they should be sorted in ascending numerical order. Function Signature ```python def histogram_sort(numbers: List[int]) -> List[int]: pass ``` Input - A list of integers, `numbers` (1 <= len(numbers) <= 10^5, and -10^6 <= numbers[i] <= 10^6) Output - A list of integers sorted by their frequency in descending order and by value in ascending order when frequencies match. Example ```python histogram_sort([4, 5, 6, 5, 4, 3]) # Output: [4, 4, 5, 5, 3, 6] histogram_sort([9, 9, 1, 1, 2, 2]) # Output: [1, 1, 2, 2, 9, 9] histogram_sort([1, 2, 3, 4, 5, 6]) # Output: [1, 2, 3, 4, 5, 6] ``` Explanation For the first example: The number 4 appears twice, 5 twice, 6 once, and 3 once. Hence, 4 and 5 are listed first (because they appear more frequently), followed by smaller numbers with the same frequency (3 and 6). For the second example: 1, 2, and 9 all appear twice. When frequencies match, they are sorted in ascending order numerically (1, 1), (2, 2), then (9, 9). For the third example: All numbers appear once, so they keep their original order as their frequencies are all the same.","solution":"from typing import List from collections import Counter def histogram_sort(numbers: List[int]) -> List[int]: Sorts the input list of integers based on their frequency in descending order. If two numbers have the same frequency, they are sorted in ascending order. # Count the frequency of each number in the list count = Counter(numbers) # Sort the numbers based on frequency (in descending order), then by value (in ascending order) sorted_numbers = sorted(numbers, key=lambda x: (-count[x], x)) return sorted_numbers"},{"question":"You are given an array of N integers. You need to perform Q queries on this array. Each query is of the following form: - 1 x y: Update the element at index x to y. - 2 l r: Calculate the sum of elements from index l to r (inclusive). The indexing is 1-based. ------ Input ------ The first line contains two integers N and Q, denoting the size of the array and the number of queries. The second line contains N space-separated integers representing the initial array elements. Each of the next Q lines contains a query of one of the two forms described above. ------ Output ------ For each query of type 2, output a single line containing the sum of elements from index l to r. ------ Constraints ------ 10 points: 1 ≤ N, Q ≤ 300 1 ≤ array elements ≤ 1000 30 points: 1 ≤ N, Q ≤ 10000 1 ≤ array elements ≤ 10^5 60 points: 1 ≤ N, Q ≤ 10^5 1 ≤ array elements ≤ 10^9 ------ Example ------ Input: 5 5 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 2 4 1 5 6 Output: 6 14 17","solution":"def update_array(arr, idx, value): Update the element at index idx in the array arr with the value. arr[idx - 1] = value def sum_range(arr, l, r): Calculate the sum of elements from index l to r (inclusive) in the array arr. return sum(arr[l - 1:r]) def process_queries(N, Q, elements, queries): Process the queries on the initial elements array. N: Number of elements Q: Number of queries elements: List of the initial elements queries: List of queries to process results = [] for query in queries: if query[0] == 1: _, x, y = query update_array(elements, x, y) elif query[0] == 2: _, l, r = query results.append(sum_range(elements, l, r)) return results"},{"question":"A company is planning a team-building activity where participants are organized into multiple teams. Each team has an equal number of participants. The company has the list of participants represented by their unique IDs, which are positive integers. The teams should be formed such that the sum of IDs in each team is the same, and all participants are utilized. Write a function to determine if it\'s possible to organize the given participants into `k` teams where the sum of IDs in every team is the same. If it\'s possible, return \\"YES\\", otherwise return \\"NO\\". -----Input----- The first line contains one integer t (1 le t le 50) — the number of test cases. Each test case consists of two lines: - The first line contains two integers n (1 le n le 100) and k (1 le k le n) — the number of participants and the number of teams. - The second line contains n space-separated integers representing the IDs of participants. -----Output----- For each test case, print \\"YES\\" if it\'s possible to organize the participants into k teams with equal sum of IDs, otherwise print \\"NO\\". -----Examples----- Input 3 6 3 3 3 3 3 3 3 6 2 1 2 3 4 5 6 5 2 1 1 1 1 6 Output YES NO NO -----Note----- In the first test case, all IDs are the same, so they can be divided into any number of teams with equal sums. In the second test case, there\'s no way to divide IDs into two teams such that the sum of IDs in both teams is equal. In the third test case, it\'s not possible to divide the participants into two teams with equal sums as one participant has a significantly higher ID than the others.","solution":"def can_form_teams(t, cases): results = [] for i in range(t): n, k = cases[i][0] participants = cases[i][1] total_sum = sum(participants) if total_sum % k != 0: results.append(\\"NO\\") continue target_sum = total_sum // k participants.sort(reverse=True) def backtrack(start, curr_sum, count_used): if count_used == k: return True if curr_sum == target_sum: return backtrack(0, 0, count_used + 1) for i in range(start, n): if not visited[i] and curr_sum + participants[i] <= target_sum: visited[i] = True if backtrack(i + 1, curr_sum + participants[i], count_used): return True visited[i] = False return False visited = [False] * n can_be_divided = backtrack(0, 0, 0) results.append(\\"YES\\" if can_be_divided else \\"NO\\") return results"},{"question":"Alex loves playing with a string S of length N. His goal is to determine the minimum number of contiguous substrings such that every substring is either a palindrome or can be rearranged to form a palindrome. Your task is to help Alex by writing a program that finds this minimum number. Input Format: The first line contains an integer N, the length of the string S. The second line contains the string S. Output Format: A single integer, representing the minimum number of contiguous substrings. [Constraints]: 1 ≤ N ≤ 1000 S consists of lowercase English letters only. SAMPLE INPUT 7 nooonan SAMPLE OUTPUT 3 Explanation: The string \\"nooonan\\" can be split into \\"n\\", \\"oo\\", \\"oonan\\". Here, \\"n\\" is a palindrome, \\"oo\\" is a palindrome, and \\"oonan\\" can be rearranged to \\"nooan\\" which is also a palindrome.","solution":"def can_form_palindrome(s): Returns True if the string s can be rearranged to form a palindrome. from collections import Counter count = Counter(s) odd_count = sum(1 for x in count.values() if x % 2 == 1) return odd_count <= 1 def min_palindromic_substrings(N, S): Returns the minimum number of contiguous substrings such that every substring is either a palindrome or can be rearranged to form a palindrome. if N == 0: return 0 i = 0 count = 0 while i < N: can_be_palindrome = False for j in range(i + 1, N + 1): if can_form_palindrome(S[i:j]): can_be_palindrome = True next_start = j if can_be_palindrome: count += 1 i = next_start else: count += 1 i += 1 return count"},{"question":"You are given an array of integers a_1, a_2, ldots, a_n and an integer k. Your task is to find out if it\'s possible to split the array into k non-empty continuous subarrays such that each subarray has the same sum. If possible, return \\"YES\\", otherwise return \\"NO\\". -----Input----- The first line contains one integer t (1 leq t leq 100): the number of test cases. The first line of each test case contains two integers n and k (1 leq n leq 100, 1 leq k leq n). The second line contains n integers a_1, a_2, ldots, a_n (-100 leq a_i leq 100). -----Output----- For each test case, if it\'s possible to split the array, print \\"YES\\". Otherwise, print \\"NO\\". -----Example----- Input 3 6 3 1 2 1 2 1 2 5 2 1 3 3 2 2 4 2 1 2 2 1 Output YES NO YES -----Note----- In the first test case, one possible way to split the array is [1, 2, 1] and [2, 1, 2]. The sum of both subarrays is 6. In the second test case, it is not possible to split the array into 2 continuous subarrays with the same sum. In the third test case, you can split the array as [1, 2] and [2, 1]. Both subarrays have the sum of 3.","solution":"def can_split_into_k_equal_sums(n, k, arr): Determines if it\'s possible to split the array into k non-empty continuous subarrays with equal sum. :param n: int - number of elements in the array :param k: int - number of subarrays to split into :param arr: list - list of integers representing the array :return: str - \\"YES\\" if possible, \\"NO\\" otherwise total_sum = sum(arr) if total_sum % k != 0: return \\"NO\\" target_sum = total_sum // k current_sum, count = 0, 0 for num in arr: current_sum += num if current_sum == target_sum: count += 1 current_sum = 0 return \\"YES\\" if count == k else \\"NO\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n, k, arr = test_cases[i] result = can_split_into_k_equal_sums(n, k, arr) results.append(result) return results"},{"question":"Polycarp is playing a game with an array of n integers a_1, a_2, dots, a_n. In the game, Polycarp can pick any pair of indices i, j (1 le i, j le n) and perform the following operation: - Subtract some integer x from a_i. - Add the same integer x to a_j. Polycarp wants to know if he can make all the numbers in the array equal using any number of these operations, and if so, what is the minimum number of operations required. -----Input----- The first line contains one integer t (1 le t le 10) — the number of test cases. Then t test cases follow. Each test case consists of two lines. The first line contains an integer n (1 le n le 100). The second line contains n integers a_1, a_2, dots a_n (1 le a_i le 100). -----Output----- For each test case, output on a separate line the minimum number of operations required to make all elements of the array equal. If it is impossible, print -1. -----Examples----- Input 3 5 1 2 3 4 5 4 2 2 2 2 3 1 1 2 Output 4 0 1 -----Note----- For the first test case, one possible sequence of operations is: 1. Subtract 2 from a_5 and add 2 to a_1, the array becomes [3, 2, 3, 4, 3] 2. Subtract 1 from a_3 and add 1 to a_2, the array becomes [3, 3, 2, 4, 3] 3. Subtract 1 from a_2 and add 1 to a_3, the array becomes [3, 2, 3, 4, 3] 4. Subtract 2 from a_4 and add 2 to a_1, the array becomes [5, 2, 3, 2, 3] For the second test case, no operation is needed as all elements are already equal. For the third test case, one possible sequence of operation is: 1. Subtract 1 from a_3 and add 1 to a_1, the array becomes [2, 1, 1]","solution":"def min_operations_to_equalize_array(n, arr): Determines the minimum number of operations needed to make all elements in arr equal via the specified operation, and returns that number. If it\'s impossible, returns -1. Args: n : int : number of elements in the array arr : list of int : the elements of the array Returns: int : the minimum number of operations required, or -1 if impossible # Check if all elements are already the same if len(set(arr)) == 1: return 0 # Otherwise, return the number of distinct elements minus 1. distinct_elements = len(set(arr)) return distinct_elements - 1 def minimum_operations(t, test_cases): Processes multiple test cases to determine the minimum number of operations needed for each array in `test_cases`. Args: t : int : number of test cases test_cases : list of tuples : list containing t tuples, each of which contains n and the array Returns: list of int : the minimum number of operations for each test case results = [] for n, arr in test_cases: result = min_operations_to_equalize_array(n, arr) results.append(result) return results"},{"question":"Input The first line contains an integer T (1 ≤ T ≤ 100), representing the number of test cases. Each of the next T lines contains a single string S (1 ≤ |S| ≤ 100) consisting of lowercase English letters. Output For each test case, output \\"YES\\" if the string S can be rearranged to form a palindrome, otherwise \\"NO\\". Examples Input 4 aabb racecar hello aaba Output YES YES NO NO","solution":"from collections import Counter def can_form_palindrome(S): Returns \\"YES\\" if the string S can be rearranged to form a palindrome, otherwise \\"NO\\". count = Counter(S) odd_count = sum(1 for c in count.values() if c % 2 == 1) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_test_cases(T, cases): Processes T test cases and returns a list of results. results = [] for case in cases: results.append(can_form_palindrome(case)) return results"},{"question":"A factory produces batches of widgets, and each batch follows a strict quality control procedure wherein widgets are tested and categorized into three types: - Type A: High quality - Type B: Medium quality - Type C: Low quality The factory needs to maintain a balanced production line and thus follows these constraints: 1. The number of Type A widgets plus the number of Type B widgets should never be less than the number of Type C widgets. 2. The difference in the number of Type A and Type B widgets should never exceed a given threshold K. Given the final count of each type of widget in a batch, determine if it is possible that the constraints were maintained throughout the production process. Note that widgets might still be produced if they fail the quality control during initial checks, so it’s only required to ensure that at the end of production, it could have been possible to maintain the constraints if followed correctly throughout. ------ Input Format ------ - The first line of input will contain an integer T, the number of test cases. - Each test case consists of two integers K and N, where K is the threshold and N is the number of batches. - Each of the next N lines consists of three integers a, b, c, where a, b, and c are the counts of Type A, Type B, and Type C widgets in a batch, respectively. ------ Output Format ------ For each test case, print \\"YES\\" if it is possible that the constraints were maintained, otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ K ≤ 10^3 1 ≤ N ≤ 10^2 0 ≤ a, b, c ≤ 10^3 ----- Sample Input 1 ------ 2 1 3 5 3 4 6 2 7 3 1 5 2 1 4 5 6 ----- Sample Output 1 ------ NO YES ----- Explanation 1 ------ In the first test case: - Batch 1: a + b (8) ≥ c (4), and |a - b| (2) ≤ K (1) (Constraint 2 violated) - Batch 2: a + b (8) ≥ c (7), and |a - b| (4) ≤ K (1) (Constraint 2 violated) - Batch 3: a + b (4) < c (5), so Constraint 1 is violated. Thus, the relevant constraints were violated in some batches, resulting in \\"NO.\\" In the second test case: - Batch 1: a + b (4 + 5 = 9) ≥ c (6), and |a - b| (4 - 5 = 1) ≤ K (2), both constraints are maintained. Thus, the output for the second test case is \\"YES.\\"","solution":"def check_batches(T, cases): results = [] for case in cases: K, N, batches = case possible = True for batch in batches: a, b, c = batch if a + b < c or abs(a - b) > K: possible = False break results.append(\\"YES\\" if possible else \\"NO\\") return results def parse_input_and_solve(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) index = 1 cases = [] for _ in range(T): K, N = map(int, input_lines[index].split()) batches = [tuple(map(int, input_lines[index + i + 1].split())) for i in range(N)] cases.append((K, N, batches)) index += N + 1 return check_batches(T, cases)"},{"question":"Given a list of integers where every integer occurs exactly twice, except for one integer which occurs only once. Find the integer that occurs only once. Example 1: Input: [2, 3, 5, 4, 5, 3, 4] Output: 2 Explanation: 2 is the only integer that appears once in the input list. Example 2: Input: [9, 8, 7, 9, 8] Output: 7 Explanation: 7 is the only integer that appears once in the input list. Your Task: You don\'t need to read input or print anything. Complete the function findSingleNumber() which takes a list of integers as input and returns the integer that appears only once. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ length of list ≤ 10^6 1 ≤ any integer in list ≤ 10^9","solution":"def findSingleNumber(nums): Find the integer that occurs only once in a list where every other integer occurs exactly twice. :param nums: List[int] - list of integers where every integer occurs exactly twice except one :return: int - the integer that occurs only once result = 0 for num in nums: result ^= num return result"},{"question":"Harold is building a new library system for his local town. Each book in the library is identified by a unique integer ID. The library is sorted by these IDs in ascending order on some shelves. Harold wants a feature where a user can search for the range of IDs to find all books within certain range limits. The books are organized in such a way that all book IDs on a shelf are continuous and sorted. Write a program that will process multiple queries to find the total count of books within given ranges. Implement a function to handle these queries efficiently. Input: The first line of input contains an integer T, the number of queries. For each query, the first line contains an integer n, the number of book IDs on the shelf, followed by n space-separated integers representing the book IDs arranged in ascending order. The third line contains two space-separated integers representing the lower and upper limits of the ID range for which we need to count the books. Output: For each query, output the count of books whose IDs fall within the specified range. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 1 ≤ book ID ≤ 10^9 1 ≤ lower limit ≤ upper limit ≤ 10^9 SAMPLE INPUT 3 5 1 3 4 7 8 3 7 4 10 20 30 40 15 35 6 5 7 9 12 15 18 10 20 SAMPLE OUTPUT 3 2 3","solution":"from bisect import bisect_left, bisect_right def count_books_within_ranges(T, queries): results = [] for i in range(T): n = queries[i][0] book_ids = queries[i][1] lower_limit, upper_limit = queries[i][2] # Find the start and end positions using binary search start_index = bisect_left(book_ids, lower_limit) end_index = bisect_right(book_ids, upper_limit) # Count how many books are within the range count = end_index - start_index results.append(count) return results # Function for handling multiple queries input def process_queries(num_queries, query_list): return count_books_within_ranges(num_queries, query_list)"},{"question":"In a faraway magical land, there is a kingdom with n cities connected by n-1 roads in such a way that there is exactly one path between any two cities. Each city has a certain amount of soldiers. The king wants to know the minimum number of soldiers that can be obtained by traveling from city u to city v along the path that connects them. You are given the number of cities n, an array soldiers where soldiers[i] denotes the number of soldiers in the (i+1)-th city, and a list roads where each element represents a road connecting two cities. You are also given q queries, each consisting of two cities u and v. For each query, determine the minimum number of soldiers encountered on the path between u and v. -----Input----- The first line contains a single integer n (2 le n le 100000), the number of cities. The second line contains n space-separated integers representing the number of soldiers in each city. The next n-1 lines each contain two space-separated integers a and b (1 le a, b le n), indicating that there is a road connecting city a and city b. The next line contains a single integer q (1 le q le 100000), the number of queries. The following q lines each contain two space-separated integers u and v (1 le u, v le n), representing a query to find the minimum soldiers along the path from city u to city v. -----Output----- For each query, print a single integer - the minimum number of soldiers encountered on the path between cities u and v. -----Examples----- Input 5 10 20 30 40 50 1 2 1 3 3 4 3 5 3 1 5 2 4 4 5 Output 10 10 30 -----Note----- In the first example, the path from city 1 to city 5 goes through cities 1 -> 3 -> 5. The minimum number of soldiers along this path is 10 (from city 1). The path from city 2 to city 4 goes through cities 2 -> 1 -> 3 -> 4. The minimum soldiers along this path is also 10 (from city 1). The path from city 4 to city 5 goes through cities 4 -> 3 -> 5. The minimum soldiers along this path is 30 (from city 3).","solution":"from collections import defaultdict, deque def bfs(graph, start, soldiers): queue = deque([start]) visited = {start} dist = {start: soldiers[start - 1]} parent = {start: None} while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) parent[neighbor] = node dist[neighbor] = min(dist[node], soldiers[neighbor - 1]) queue.append(neighbor) return dist, parent def find_minimum_soldiers(n, soldiers, roads, queries): # Building the graph graph = defaultdict(list) for a, b in roads: graph[a].append(b) graph[b].append(a) # Preprocess all shortest paths with BFS from each node min_soldiers = {} parents = {} for node in range(1, n + 1): min_soldiers[node], parents[node] = bfs(graph, node, soldiers) results = [] # Store results for all queries for u, v in queries: min_soldier = float(\'inf\') # Traverse from u to v using the pre-calculated paths # Simplified method leveraging pre-cached paths if min_soldiers[u][v]: min_soldier = min_soldiers[u][v] results.append(min_soldier) return results"},{"question":"You are given two strings, `s` and `t`, which only contain lowercase English letters. Your task is to determine whether string `t` can be obtained by deleting some characters from string `s` without reordering the remaining characters. Write a program that prints \\"Yes\\" if it\'s possible to obtain `t` from `s` in this way, otherwise print \\"No\\". -----Constraints----- - (1 leq text{length of } s, t leq 1000) - `s` and `t` consist of only lowercase English letters. -----Input----- The input is given from Standard Input in the following format: ``` s t ``` -----Output----- Print \\"Yes\\" if it\'s possible to convert `s` to `t` by deleting some characters without reordering the remaining characters. Otherwise, print \\"No\\". -----Sample Input 1----- ``` abpcplea apple ``` -----Sample Output 1----- ``` Yes ``` In this example, you can delete the characters \'b\', \'c\', \'l\', and \'e\' from `s` to get `t`. -----Sample Input 2----- ``` abpcplea applf ``` -----Sample Output 2----- ``` No ``` In this example, there is no way to delete characters from `s` to obtain `t` because `f` is not present in `s`. Note: Ensure your solution has efficient time complexity to handle the constraints.","solution":"def can_convert(s, t): Determine if it\'s possible to obtain string `t` by deleting some characters from string `s` without reordering the remaining characters. Args: - s (str): source string - t (str): target string Returns: - str: \\"Yes\\" if `t` can be obtained from `s`, otherwise \\"No\\" it = iter(s) return \\"Yes\\" if all(char in it for char in t) else \\"No\\""},{"question":"Alex is planning a road trip and wants to visit several cities. Each city is connected by one or more roads, with each road having a specific length. Alex wants to find out the minimum distance he needs to travel to visit all the cities starting from his home city. Given a list of roads connecting the cities and their lengths, determine the minimum total distance required for Alex to visit all the cities starting from city 1 (Alex\'s home city) and returning to it. You are given n which denotes the number of cities and m which denotes the number of roads. Each road is described by a triplet (u, v, w) where u and v are the cities connected by the road and w is the length of the road. Your task is to find the minimum distance needed to visit all cities starting and ending at city 1. -----Input----- The first line contains two integers n (2 leq n leq 20) — the number of cities and m (1 leq m leq 50) — the number of roads. The next m lines describe the roads. Each line contains three integers u, v (1 leq u, v leq n) — the cities connected by the road, and w (1 leq w leq 100) — the length of the road. -----Output----- Print the minimum distance Alex needs to travel to visit all the cities starting and ending at city 1. If it is not possible to visit all cities, print -1. -----Example----- Input 4 6 1 2 10 1 3 15 1 4 20 2 3 35 3 4 25 2 4 30 Output 80","solution":"def tsp(n, roads): from itertools import permutations import sys INF = sys.maxsize # Create adjacency matrix dist = [[INF] * n for _ in range(n)] for u, v, w in roads: dist[u-1][v-1] = w dist[v-1][u-1] = w # Check for disconnected graph def is_connected_graph(): visited = [False] * n def dfs(node): visited[node] = True for neighbor in range(n): if dist[node][neighbor] != INF and not visited[neighbor]: dfs(neighbor) dfs(0) return all(visited) if not is_connected_graph(): return -1 # dynamic programming approach for TSP dp = [[INF] * n for _ in range(1 << n)] dp[1][0] = 0 for mask in range(1 << n): for i in range(n): if mask & (1 << i): for j in range(n): if not (mask & (1 << j)) and dist[i][j] != INF: dp[mask | (1 << j)][j] = min(dp[mask | (1 << j)][j], dp[mask][i] + dist[i][j]) answer = min(dp[(1 << n) - 1][i] + dist[i][0] for i in range(n) if dist[i][0] != INF) return answer if answer != INF else -1 # Example usage assert tsp(4, [(1, 2, 10), (1, 3, 15), (1, 4, 20), (2, 3, 35), (3, 4, 25), (2, 4, 30)]) == 80"},{"question":"Write a program that displays the first 10 terms of the Fibonacci sequence. The Fibonacci sequence is a series of numbers in which each number ( Fibonacci number ) is the sum of the two preceding numbers. The simplest is the series 1, 1, 2, 3, 5, 8, etc. Input No input. Output 1 1 2 3 5 8 13 21 34 55 Example Input Output 1 1 2 3 5 8 13 21 34 55","solution":"def fibonacci_sequence(n=10): Generates the first n terms of the Fibonacci sequence. sequence = [] a, b = 1, 1 for _ in range(n): sequence.append(a) a, b = b, a + b return sequence"},{"question":"Alice loves unique substrings. Given a string s consisting of lowercase English letters only, she wants to find out the number of unique substrings of length k. A substring is a contiguous sequence of characters within a string. Your task is to help Alice in finding the number of unique substrings of length k in the given string. -----Input----- The input consists of two lines. The first line contains a string s (1 ≤ |s| ≤ 10^6), the second line contains an integer k (1 ≤ k ≤ |s|). -----Output----- Output a single integer representing the number of unique substrings of length k. -----Examples----- Input abcabc 3 Output 3 Input aaaa 2 Output 1 -----Note----- For the first sample, the unique substrings of length 3 are {\\"abc\\", \\"bca\\", \\"cab\\", \\"abc\\"}. Out of these, the distinct substrings are {\\"abc\\", \\"bca\\", \\"cab\\"}. For the second sample, the only unique substring of length 2 is {\\"aa\\"}.","solution":"def unique_substrings(s, k): Returns the number of unique substrings of length k in the given string s. :param s: A string consisting of lowercase English letters :param k: Length of the desired substrings :return: Number of unique substrings of length k if k > len(s): return 0 unique_subs = set() for i in range(len(s) - k + 1): unique_subs.add(s[i:i+k]) return len(unique_subs)"},{"question":"In a distant country, there is a unique way to play a card game. The game consists of a deck with `n` cards, each card having a positive integer value printed on it. Initially, the cards are arranged in a line on the table, indexed from 1 to `n`. The game incorporates three main types of operations that can be performed on the deck of cards: 1. **Update**: Increase the value of a specific card. 2. **Rotate**: Rotate the deck left by `k` positions. 3. **Query**: Return the value of a specific card. Your task is to process a series of operations and provide the results for the queries. Input The first line contains two integers, `n` and `q` (1 ≤ n, q ≤ 100,000) — the number of cards and the number of operations, respectively. The second line contains `n` integers, a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the initial values of the cards. The next `q` lines contain the operations in one of the following formats: - `U i v` — increase the value of the `i`-th card by `v` (1 ≤ i ≤ n, 1 ≤ v ≤ 10^9). - `R k` — rotate the deck left by `k` positions (1 ≤ k ≤ n). - `Q i` — return the value of the `i`-th card (1 ≤ i ≤ n). Output For each query operation `Q i`, print the value of the `i`-th card in the deck. Examples Input 5 7 1 2 3 4 5 Q 3 R 2 Q 3 U 3 10 Q 3 R 3 Q 3 Output 3 5 15 3 Explanation Consider the first sample test: - Initially, the deck is [1, 2, 3, 4, 5]. - The first operation is `Q 3`, which asks for the value of the third card. The answer is 3. - The second operation is `R 2`, which rotates the deck left by 2 positions. The deck becomes [3, 4, 5, 1, 2]. - The third operation is `Q 3`, which asks for the value of the third card after the rotation. The answer is 5. - The fourth operation is `U 3 10`, which increases the value of the third card (currently 5) by 10. The deck becomes [3, 4, 15, 1, 2]. - The fifth operation is `Q 3`, which asks for the value of the third card after the update. The answer is 15. - The sixth operation is `R 3`, which rotates the deck left by 3 positions. The deck becomes [1, 2, 3, 4, 15]. - The seventh operation is `Q 3`, which asks for the value of the third card after the second rotation. The answer is 3.","solution":"def card_game(n, q, cards, operations): current_cards = cards[:] offset = 0 results = [] for operation in operations: op = operation.split() if op[0] == \'Q\': i = int(op[1]) - 1 results.append(current_cards[(i + offset) % n]) elif op[0] == \'U\': i = int(op[1]) - 1 v = int(op[2]) current_cards[(i + offset) % n] += v elif op[0] == \'R\': k = int(op[1]) offset = (offset + k) % n return results"},{"question":"Sara is an avid gardener and loves to arrange her plants in beautiful and organized patterns. She has a long, rectangular garden bed that she wants to fill with her favorite types of plants. Each type of plant is represented by a unique integer, and she has already decided on the arrangement of plants along one long side of the garden bed. She wants to fill the garden bed such that the total number of different types of plants in each column is minimized. Help Sara to find the minimum total number of different plant types that appear in any column along the entire garden bed after arranging her plants. -----Input----- First line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the garden bed (n rows by m columns). Second line contains m space-separated integers, p_1, p_2, ..., p_m (0 ≤ p_i ≤ 1000), where p_i denotes the type of plant she has already placed at the i-th position in the first row. -----Output----- The output should contain a single integer — the minimum total number of different plant types that appear in any column along the entire garden bed. -----Examples----- Input 4 5 1 2 3 4 5 Output 5 Input 3 3 1 1 2 Output 2 -----Note----- In the first test case, the garden bed is 4 rows by 5 columns, and the plant types in the first row are unique. Since there are no constraints on what plant types can be added to the rest of the garden bed, each column will continue to have the same plant type as in the first row, resulting in the minimum number of different plant types per column being 1. In the second test case, the garden bed is 3 rows by 3 columns. The first row has two similar plant types at the first two positions, and one different plant type at the third position. To minimize the total number of different plant types in each column, plant the same type as in the first row in the same columns, resulting in 2 different plant types per column.","solution":"def min_different_plant_types(n, m, plant_types): Returns the minimum total number of different plant types that appear in any column along the entire garden bed. # As the first row defines the plant type in each column, # we only need to count the unique plant types on that first row. return len(set(plant_types))"},{"question":"Amit loves playing with sequences and series. He is particularly fascinated by the Fibonacci sequence: a sequence of numbers where the next number is found by adding the two numbers before it. The sequence starts with 0 and 1. However, Amit wonders how quickly he can determine if a given number is a Fibonacci number. Given a number N, your task is to determine whether or not it is part of the Fibonacci sequence. Example for 21 0, 1, 1, 2, 3, 5, 8, 13, 21 21 is in the Fibonacci sequence. For 22: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ... 22 is not in the Fibonacci sequence. INPUT: The first line contains T, the number of test cases. The next T lines contain a single integer N (0 ≤ N ≤ 10^18) each. OUTPUT: For each test case, output \\"Case #case_no: YES\\" if N is a Fibonacci number, otherwise output \\"Case #case_no: NO\\". Sample Test case: Input 3 21 22 34 Output Case #1:YES Case #2:NO Case #3:YES SAMPLE INPUT 3 21 22 34 SAMPLE OUTPUT Case #1:YES Case #2:NO Case #3:YES","solution":"def is_fibonacci_number(n): Determines if the given number n is a Fibonacci number. A number is a Fibonacci number if and only if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square. import math def is_perfect_square(x): s = int(math.isqrt(x)) return s * s == x # Check if 5*n^2 + 4 or 5*n^2 - 4 is a perfect square return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4) def check_fibonacci_cases(t, cases): Processes \'t\' test cases for checking Fibonacci numbers. Params: t [int]: Number of test cases. cases [list]: List of test case numbers. Returns: [list]: List of results for each test case in the required format. results = [] for i in range(t): n = cases[i] if is_fibonacci_number(n): results.append(f\\"Case #{i + 1}:YES\\") else: results.append(f\\"Case #{i + 1}:NO\\") return results"},{"question":"Alyssa is planning a hiking trip in the forest. She has N consecutive days for the trip, but due to weather conditions, not all days are suitable for hiking. If the weather report for a day is sunny, Alyssa can hike on that day; if it\'s rainy, she cannot. Alyssa wants to find out the length of the longest possible consecutive sequence of hiking days. Can you help her plan her trip? INPUT: The first line contains an integer T, the number of test cases. For each test case: 1. The first line contains an integer N, the number of days. 2. The second line contains a string S of length N, where each character in S is either \'S\' (sunny) or \'R\' (rainy). OUTPUT: For each test case, output a single integer representing the length of the longest consecutive sequence of sunny days. CONSTRAINTS: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 SAMPLE INPUT: 2 7 SSRSSSR 5 RRRRR SAMPLE OUTPUT: 3 0 Explanation: In the first test case, there are 7 days: \\"SSRSSSR\\". The longest sequence of consecutive sunny days is 3 (the first 3 days). In the second test case, there are 5 days: \\"RRRRR\\". Since all days are rainy, Alyssa cannot hike on any day, resulting in a longest sequence of 0.","solution":"def longest_sunny_sequence(test_cases): Given a list of test cases containing the number of days and the weather conditions for each day, this function returns the length of the longest sequence of consecutive sunny days for each test case. Parameters: test_cases (list): List of tuples, where each tuple contains an int N and a string S. Returns: list: List of integers representing the length of the longest consecutive sequence of sunny days. results = [] for N, S in test_cases: max_sunny_sequence, current_sequence = 0, 0 for char in S: if char == \'S\': current_sequence += 1 max_sunny_sequence = max(max_sunny_sequence, current_sequence) else: current_sequence = 0 results.append(max_sunny_sequence) return results"},{"question":"You are tasked with developing a new encryption algorithm. The algorithm works by transforming a given string `s` into a new string `t` with the same length. The transformation is defined as follows: 1. The string `s` consists of lowercase Latin letters. 2. You can replace any character at position i in `s` with the character at position j, where 1 ≤ i, j ≤ |s|. 3. Each character in `s` can be replaced exactly once. 4. You must ensure that the resulting string `t` is lexicographically larger than `s`. Your goal is to implement this transformation. If it\'s impossible to perform the transformation according to the given rules, return the string \\"IMPOSSIBLE\\". # Input - The input consists of one line, a non-empty string `s` (1 ≤ |s| ≤ 1000) which contains only lowercase Latin letters. # Output - Output the resulting string `t` if it\'s possible to transform `s` into a lexicographically larger string. Otherwise, print \\"IMPOSSIBLE\\". # Example Input ``` abc ``` Output ``` acb ``` Input ``` cba ``` Output ``` IMPOSSIBLE ``` # Note In the first example, one of the possible ways to obtain `t` is by swapping the last two characters of `s`. In the second example, it\'s impossible to rearrange `s` to get a lexicographically larger string. Hence, the output is \\"IMPOSSIBLE\\". # Constraints - Do NOT use any built-in sorting functions to directly create lexicographically larger strings. You need to construct the solution by manipulating the string according to the described rules.","solution":"def next_lexicographical_string(s): Find the lexicographically next larger permutation of the string s. If not possible, return \\"IMPOSSIBLE\\". n = len(s) s = list(s) # Step 1: Find the largest index k such that s[k] < s[k + 1] k = -1 for i in range(n - 1): if s[i] < s[i + 1]: k = i if k == -1: return \\"IMPOSSIBLE\\" # Step 2: Find the largest index l greater than k such that s[k] < s[l] l = -1 for i in range(k + 1, n): if s[k] < s[i]: l = i # Step 3: Swap s[k] and s[l] s[k], s[l] = s[l], s[k] # Step 4: Reverse the sequence from s[k + 1] to the end s = s[:k + 1] + s[k + 1:][::-1] return \'\'.join(s)"},{"question":"Given a binary tree, your task is to complete the method `inorderTraversal()` that returns the in-order traversal of the tree in a list. Input: The `inorderTraversal` function takes a single argument as input, which is the reference pointer to the root of the binary tree. There are multiple test cases, and for each test, the function will be called separately. Output: You need to return a list that contains the in-order traversal of the binary tree. Example: Input: 1 5 2 1 4 3 5 Output: [1, 2, 3, 4, 5] Input format: The first line of the input contains an integer \'T\', denoting the number of test cases. For each test case: The next line contains an integer \'N\' (number of nodes in the binary tree). The next line contains N space-separated integers which are the node values. Example explanation: - The binary tree for test case 1 is: 2 / 1 4 / 3 5 - The in-order traversal of the tree is [1, 2, 3, 4, 5]. Constraints: 1<=T<=50 1<=N<=100","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nodes): if not nodes: return None mid = len(nodes) // 2 root = TreeNode(nodes[mid]) root.left = build_tree(nodes[:mid]) root.right = build_tree(nodes[mid+1:]) return root def inorderTraversal(root): Returns the in-order traversal of a binary tree. result = [] def inorder(node): if not node: return inorder(node.left) result.append(node.val) inorder(node.right) inorder(root) return result"},{"question":"In an alien language, the alphabet is sorted in a different order than in English. The order of the letters in this language is given to you as a string of unique lowercase English letters. This is followed by a list of words in that language, which are sorted according to some lexicographical rules using the given alphabet order. Your task is to verify if the given list of words is sorted lexicographically according to the alien language\'s specific alphabet order. # Input - The first line contains a string representing the alien language alphabet order. - The second line contains an integer, `W`, representing the number of words. - Each of the following `W` lines contains one word in the alien language. # Output - Output `\\"True\\"` if the words are sorted correctly according to the alien language\'s alphabetical order. - Output `\\"False\\"` otherwise. # Constraints - 1 ≤ length of alien alphabet order ≤ 26 - 1 ≤ W ≤ 1000 - 1 ≤ length of each word ≤ 100 # Sample Input ``` hlabcdefgijkmnopqrstuvwxyz 4 hello leetcode lead load ``` # Sample Output ``` False ``` # Explanation In the given alien language, the order of the letters is: ``` h, l, a, b, c, d, e, f, g, i, j, k, m, n, o, p, q, r, s, t, u, v, w, x, y, z ``` The words should be sorted as: \\"hello\\", \\"leetcode\\", \\"load\\", \\"lead\\". Since \\"lead\\" comes before \\"load\\" which is incorrect according to the given order, the output is \\"False\\".","solution":"def is_alien_sorted(order, words): order_dict = {char: idx for idx, char in enumerate(order)} def compare(word1, word2): for i in range(min(len(word1), len(word2))): if word1[i] != word2[i]: if order_dict[word1[i]] < order_dict[word2[i]]: return True else: return False return len(word1) <= len(word2) for i in range(len(words) - 1): if not compare(words[i], words[i + 1]): return False return True"},{"question":"You are given a grid of dimensions n times m filled with integers. Your task is to determine the size of the largest rectangular subgrid whose elements satisfy two conditions: All the elements in the subgrid are either all odd or all even. -----Input----- The first line contains two integers n and m (1 le n, m le 500) — the number of rows and columns in the grid, respectively. Each of the next n lines contains m integers, where the j-th integer in the i-th line is the element in the cell at row i and column j (1 leq grid[i][j] leq 1000). -----Output----- Print a single integer — the size of the largest rectangular subgrid which satisfies the condition. The size of a subgrid is defined as the product of its number of rows and columns. -----Examples----- Input 3 4 1 2 3 4 5 6 7 8 9 10 11 12 Output 3 Input 4 5 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 4 4 4 4 4 Output 5 -----Note----- In the first example, the largest rectangular subgrid either has all elements odd or all elements even is 2 times 2. For instance, the subgrid formed by cells containing 1 to 3 in the first row and 5 to 7 in the second row. In the second example, the entire second row or the first column form a subgrid where all elements are even or odd respectively, thus having size 1 times 5 = 5.","solution":"def largest_even_odd_subgrid(n, m, grid): # Identify the parity of each element is_even = [[(grid[i][j] % 2 == 0) for j in range(m)] for i in range(n)] # Maximum rectangle size max_size = 0 # Helper function to calculate the largest rectangle area in a histogram def largest_rectangle_area(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area # Dynamic Programming for each row dp = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): if is_even[i][j]: if i == 0: dp[i][j] = 1 else: dp[i][j] = dp[i-1][j] + 1 else: dp[i][j] = 0 # For each row compute the maximum rectangle area for row in dp: max_size = max(max_size, largest_rectangle_area(row)) # Repeat the process for odd parity (is_even=False) dp = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): if not is_even[i][j]: if i == 0: dp[i][j] = 1 else: dp[i][j] = dp[i-1][j] + 1 else: dp[i][j] = 0 for row in dp: max_size = max(max_size, largest_rectangle_area(row)) return max_size"},{"question":"Your task is to write a function, `count_fruits(basket)`, that takes a list of strings representing different fruits in a basket and returns a dictionary with each fruit as a key and the number of times it appears in the list as the corresponding value. The comparison should be case-insensitive, meaning \'apple\' and \'Apple\' should be considered the same fruit. For example: ``` count_fruits([\\"Apple\\", \\"Banana\\", \\"apple\\", \\"Orange\\", \\"banana\\", \\"APPLE\\"]) ``` should return: ``` {\'apple\': 3, \'banana\': 2, \'orange\': 1} ```","solution":"def count_fruits(basket): Takes a list of strings representing different fruits in a basket and returns a dictionary with each fruit as a key and the number of times it appears in the list as the corresponding value. The comparison is case-insensitive. fruit_count = {} for fruit in basket: fruit_lower = fruit.lower() if fruit_lower in fruit_count: fruit_count[fruit_lower] += 1 else: fruit_count[fruit_lower] = 1 return fruit_count"},{"question":"A local park has recently planted several new trees. The park maintenance team wants to estimate how many trees would need additional water. Each tree can hold a certain amount of water, and the team has information on how much water each tree currently holds. You are given a list of n trees where each tree is represented by two integers: current water level and the maximum water capacity. A tree requires additional water if it is not fully watered to its capacity. Your task is to write a function to determine the number of trees that need additional water. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the number of trees. The i-th of the next n lines contains two integers c_{i} and w_{i} (0 ≤ c_{i} ≤ w_{i} ≤ 100) — the current water level and the maximum water capacity of the i-th tree respectively. -----Output----- Print a single integer — the number of trees that need additional water. -----Examples----- Input 4 2 5 4 4 1 3 3 3 Output 2 Input 5 5 10 0 8 8 8 2 2 9 10 Output 3","solution":"def count_trees_needing_water(n, trees): Given the number of trees and their respective current water levels and maximum water capacities, determines the number of trees that need additional water. Parameters: n (int): The number of trees. trees (list of tuples): List of tuples where each tuple contains two integers - current water level and maximum water capacity. Returns: int: The number of trees that need additional water. count = 0 for current, max_capacity in trees: if current < max_capacity: count += 1 return count"},{"question":"Given an array of integers, find the sum of all the odd numbers in the array. -----Constraints----- - The array length will be between 1 and 100 inclusive. - Each element of the array will be an integer between -1000 and 1000 inclusive. -----Input----- Input is given from Standard Input in the following format: The first line contains a single integer n, the number of elements in the array. The second line contains n space-separated integers which are the elements of the array. -----Output----- Output a single integer which is the sum of all the odd integers in the array. -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 9 Explanation: The odd numbers in the array are 1, 3, and 5. Their sum is 9.","solution":"def sum_of_odd_numbers(nums): Returns the sum of all the odd numbers in the array. :param nums: List of integers. :return: Integer sum of odd numbers. return sum(num for num in nums if num % 2 != 0)"},{"question":"You are given a binary tree with n nodes. Each node in the tree has a unique value from 1 to n. Your task is to determine the length of the longest path in the tree where each two consecutive nodes on the path are in increasing order by their values. A path in the tree is a sequence of nodes such that every node in the sequence is adjacent to its predecessor. The length of a path is the number of edges in the path. -----Input----- The first line contains an integer n — the number of nodes in the tree (1 leq n leq 2000). Each of the next n-1 lines contains two integers u and v — denoting an edge between node u and node v (1 leq u, v leq n). -----Output----- Print a single integer — the length of the longest increasing path from any node. -----Examples----- Input 5 1 2 1 3 3 4 3 5 Output 2 Input 3 1 2 2 3 Output 2 Input 4 2 3 2 4 4 1 Output 1 -----Note----- In the first sample case, one possible longest increasing path is 1 rightarrow 2. Another one is 4 rightarrow 3 rightarrow 1. The length of the longest increasing path is 2. In the second sample case, there is only one possible longest increasing path: 1 rightarrow 2 rightarrow 3. The length is 2. In the third sample case, the longest increasing paths are 3 rightarrow 2 and 4 rightarrow 1. The length of both paths is 1.","solution":"from collections import defaultdict def longest_increasing_path(n, edges): if n == 1: return 0 adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) def dfs(node, parent): longest_inc = 0 second_longest_inc = 0 for neighbor in adj[node]: if neighbor != parent and neighbor > node: length = dfs(neighbor, node) if length > longest_inc: longest_inc, second_longest_inc = length, longest_inc elif length > second_longest_inc: second_longest_inc = length path_length[node] = longest_inc + 1 return longest_inc + 1 path_length = {} for i in range(1, n + 1): dfs(i, -1) return max(path_length.values()) - 1 # Example usage n1 = 5 edges1 = [(1, 2), (1, 3), (3, 4), (3, 5)] n2 = 3 edges2 = [(1, 2), (2, 3)] n3 = 4 edges3 = [(2, 3), (2, 4), (4, 1)] print(longest_increasing_path(n1, edges1)) # Should output 2 print(longest_increasing_path(n2, edges2)) # Should output 2 print(longest_increasing_path(n3, edges3)) # Should output 1"},{"question":"An international online retailer uses algorithms to analyze customer behavior and recommend products. They want to design a new feature that identifies the most popular product categories in trends. You are tasked with developing a solution to analyze customer purchase logs and determine the top k product categories based on the number of purchases. The purchase logs are provided as a list of entries, where each entry is a tuple consisting of a customer ID and a purchased product category. Your task is to write a function that accepts the purchase logs and an integer k, and returns the list of the top k most frequently purchased product categories in descending order of their purchase counts. If two or more categories have the same purchase count, they should be ordered lexicographically. **Function Signature:** ```python def top_k_categories(purchase_logs: List[Tuple[str, str]], k: int) -> List[str]: ``` **Input:** 1. `purchase_logs` (List[Tuple[str, str]]): A list of n tuples representing the purchase logs, where each tuple contains: - A string representing the customer ID. - A string representing the product category. 2. `k` (int): An integer variable that specifies the number of top categories to return. **Output:** A list of k strings representing the top k product categories based on purchase counts in descending order. If there are fewer than k distinct categories, return all of them. **Constraints:** - 1 <= n <= 10^6 - 1 <= k <= 10^6 - Each string in the purchase logs has a length of up to 100 characters. - Categories in the logs contain only lowercase English letters. **Examples:** ```python Input: purchase_logs = [ (\\"c1\\", \\"electronics\\"), (\\"c2\\", \\"clothing\\"), (\\"c1\\", \\"electronics\\"), (\\"c3\\", \\"books\\"), (\\"c2\\", \\"electronics\\"), (\\"c3\\", \\"clothing\\"), (\\"c4\\", \\"clothing\\"), (\\"c5\\", \\"electronics\\") ] k = 2 Output: [\\"electronics\\", \\"clothing\\"] Input: purchase_logs = [ (\\"c1\\", \\"toys\\"), (\\"c2\\", \\"toys\\"), (\\"c3\\", \\"toys\\"), (\\"c4\\", \\"toys\\"), (\\"c5\\", \\"toys\\") ] k = 1 Output: [\\"toys\\"] Input: purchase_logs = [ (\\"c1\\", \\"outdoors\\"), (\\"c2\\", \\"books\\"), (\\"c3\\", \\"toys\\"), (\\"c4\\", \\"books\\"), (\\"c5\\", \\"gardening\\"), (\\"c6\\", \\"electronics\\"), (\\"c7\\", \\"sports\\"), (\\"c8\\", \\"sports\\"), (\\"c9\\", \\"gadgets\\") ] k = 3 Output: [\\"books\\", \\"sports\\", \\"electronics\\"] ```","solution":"from typing import List, Tuple from collections import defaultdict def top_k_categories(purchase_logs: List[Tuple[str, str]], k: int) -> List[str]: category_count = defaultdict(int) # Count the frequency of each category for _, category in purchase_logs: category_count[category] += 1 # Sort categories based on the frequency (Descending) and lexicographically if frequencies are the same sorted_categories = sorted(category_count.keys(), key=lambda x: (-category_count[x], x)) # Return the top k categories return sorted_categories[:k]"},{"question":"Given two integer arrays as input, merge them into a single array, sort it in non-decreasing order, and remove any duplicate elements from the resulting array. Return the modified array. **Examples:** input: ([1, 3, 5], [2, 4, 6]) output: [1, 2, 3, 4, 5, 6] input: ([1, 2, 2, 3], [2, 3, 4, 5]) output: [1, 2, 3, 4, 5] input: ([-1, 0, 2], [-3, -1, 0, 4]) output: [-3, -1, 0, 2, 4] **Constraints:** - Each array may contain any integer, positive or negative. - Arrays may be of different lengths. - Input arrays may be empty, but the output should not include any duplicate elements.","solution":"def merge_sort_deduplicate(arr1, arr2): Merges two arrays, sorts them in non-decreasing order, and removes duplicates. Args: arr1 (list of int): First input array. arr2 (list of int): Second input array. Returns: list of int: Merged, sorted, and deduplicated array. merged_array = list(set(arr1).union(set(arr2))) merged_array.sort() return merged_array"},{"question":"A tech company has a network of servers connected by bidirectional cables. Each server is labeled uniquely with an id from 1 to n. The goal is to ensure that all servers are directly or indirectly connected to server 1 (the main server). If a server is not connected to the main server, the company wants to determine which single additional cable, if added, would minimize the number of additional cables needed to connect all servers to the main server. Write a function to determine the minimum number of additional cables required to make all servers connected. -----Input----- - The first line contains two integers n (2 ≤ n ≤ 100) and m (0 ≤ m ≤ n*(n-1)/2), where n is the number of servers, and m is the number of cables. - The following m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a cable connecting servers u and v. -----Output----- - Print a single integer representing the minimum number of additional cables needed. -----Examples----- Input 5 3 1 2 2 3 4 5 Output 1 Input 4 0 Output 3 -----Note----- In the first example, servers 1, 2, and 3 are connected, so adding a cable between server 3 and any of servers 4 or 5 would ensure all servers are connected, resulting in only 1 additional cable needed. For the second example, since there are no cables, we need to connect every other server directly or indirectly to server 1, requiring 3 cables.","solution":"def find_min_additional_cables(n, m, connections): from collections import defaultdict, deque def bfs(start, graph, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) bfs(1, graph, visited) disconnected_components = 0 for i in range(2, n+1): if not visited[i]: disconnected_components += 1 bfs(i, graph, visited) return disconnected_components # Function to parse input def solve(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) connections = [] index = 2 for _ in range(m): u = int(data[index]) v = int(data[index + 1]) connections.append((u, v)) index += 2 result = find_min_additional_cables(n, m, connections) print(result)"},{"question":"Harry is a treasure hunter who needs to collect treasures from a grid-shaped island. The island consists of a grid with `M` rows and `N` columns. Each cell of the grid contains a certain number of treasures. Harry can only move right or down from the top-left corner to the bottom-right corner of the grid. He wants to collect the maximum number of treasures possible along his path. Can you help Harry determine the maximum number of treasures he can collect? Example 1: Input: M = 3, N = 3 grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] Output: 12 Explanation: Harry can follow the path (1→3→5→2→1) to collect treasures. The total number of treasures collected is 1 + 3 + 5 + 2 + 1 = 12. Example 2: Input: M = 2, N = 2 grid = [ [1, 2], [1, 1] ] Output: 4 Explanation: Harry can follow the path (1→2→1) to collect treasures. The total number of treasures collected is 1 + 2 + 1 = 4. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxTreasure()` which takes the integers `M`, `N` and a 2D list `grid` as input parameters and returns an integer representing the maximum number of treasures Harry can collect. Expected Time Complexity: O(M*N) Expected Auxiliary Space: O(M*N) Constraints: - 1 <= M, N <= 100 - 0 <= grid[i][j] <= 100","solution":"def maxTreasure(M, N, grid): Returns the maximum number of treasures Harry can collect moving from the top-left corner to the bottom-right corner of the grid. # Create a 2D list to store the maximum treasures collected up to each cell dp = [[0] * N for _ in range(M)] # Initialize the first cell with the corresponding treasure dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the maximum treasures return dp[M-1][N-1]"},{"question":"In the world of Foobar, there are N magical plants arranged in a row, each with a certain height. To maintain harmony in this world, the heights of these plants must form a non-decreasing sequence when examined from left to right. Given the heights of the N plants, determine the minimum number of plants that need to be removed to achieve a non-decreasing sequence. ------ Input Format ------ - The first line contains an integer N, the number of plants. - The second line contains N space-separated integers, representing the heights of the plants. ------ Output Format ------ Output a single integer, the minimum number of plants that need to be removed. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ text{Height of each plant} ≤ 10^4 ----- Sample Input 1 ------ 5 5 3 4 8 6 ----- Sample Output 1 ------ 2 ----- Explanation 1 ------ The heights of the plants are [5, 3, 4, 8, 6]. By removing plants of heights 3 and 6, we get the non-decreasing sequence [5, 4, 8]. ----- Sample Input 2 ------ 6 1 2 3 4 5 6 ----- Sample Output 2 ------ 0 ----- Explanation 2 ------ The heights of the plants are already in a non-decreasing sequence, so no plants need to be removed. ----- Sample Input 3 ------ 4 4 3 2 1 ----- Sample Output 3 ------ 3 ----- Explanation 3 ------ The heights of the plants are [4, 3, 2, 1]. The highest non-decreasing sequence we can have is simply [4] or [3], or [2], or [1], thus removing any three plants will result in a valid sequence. ----- Sample Input 4 ------ 7 7 10 3 8 4 6 11 ----- Sample Output 4 ------ 3 ----- Explanation 4 ------ The heights of the plants are [7, 10, 3, 8, 4, 6, 11]. By removing the plants of heights 3, 4, and 6, we can obtain the non-decreasing sequence [7, 10, 8, 11].","solution":"def min_removals_to_non_decreasing(plant_heights): Returns the minimum number of plants that need to be removed to achieve a non-decreasing sequence. n = len(plant_heights) # Edge case if n <= 1: return 0 # dp[i] will store the length of the longest non-decreasing subsequence that ends at position i dp = [1] * n for i in range(1, n): for j in range(i): if plant_heights[i] >= plant_heights[j]: dp[i] = max(dp[i], dp[j] + 1) # Length of the longest non-decreasing subsequence longest_non_decreasing_subsequence = max(dp) # The minimum number of removals needed return n - longest_non_decreasing_subsequence"},{"question":"#Sum of Odd Numbers Write a function that takes an integer `n` as input and returns the sum of the first `n` odd numbers. The function should handle positive integers, and the result should be calculated efficiently without generating a list of odd numbers. Example: ```python sum_of_odd_numbers(1) -> 1 # The first odd number is 1 sum_of_odd_numbers(3) -> 9 # The sum of the first three odd numbers (1 + 3 + 5) sum_of_odd_numbers(5) -> 25 # The sum of the first five odd numbers (1 + 3 + 5 + 7 + 9) ```","solution":"def sum_of_odd_numbers(n): Returns the sum of the first n odd numbers. if n <= 0: return 0 return n * n"},{"question":"Reverse a Linked List in groups of given size \'k\'. The function with following prototype: Node* reverse(Node* head, int k); Input: The method takes 2 arguments: address of the head of the linked list and an integer k. The function should not read any input from stdin/console. The struct Node has a data part which stores the data and a next pointer which points to the next element of the linked list. There are multiple test cases. For each test case, this method will be called individually. Output: This is a function problem, so you don\'t need to output anything. The function must modify the linked list in-place. User Task: The task is to complete the function reverse() which should reverse the linked list in groups of size \'k\'. Constraints: 1<=T<=100 1<=N<=10^3 1<=k<=N Note: If you use \\"Test\\" or \\"Expected Output Button\\" use below example format Example: Input: 2 8 1 2 2 4 5 6 7 8 4 5 1 2 3 4 5 3 Output: 4 2 2 1 8 7 6 5 3 2 1 5 4 Explanation: Testcase 1: After reversing the nodes in the group of 4, we have 4, 2, 2, 1 and 8, 7, 6, 5. Testcase 2: After reversing the nodes in the group of 3, we have 3, 2, 1 and 5, 4.","solution":"class Node: def __init__(self, data): self.data = data self.next = None def reverse(head, k): if head is None: return None current = head next = None prev = None count = 0 # Reverse first k nodes of the linked list while current is not None and count < k: next = current.next current.next = prev prev = current current = next count += 1 if next is not None: head.next = reverse(next, k) return prev"},{"question":"You are given a string consisting of lowercase letters and spaces. Your task is to write a function that takes this string as input and returns the same string but in reversed order. Make sure to preserve the spaces and the order of the words. Note that the reversed string should start with the last word and end with the first word.","solution":"def reverse_string_and_words(s): Reverses the entire string including the order of words and spaces. return s[::-1]"},{"question":"Write a program that receives a string consisting of lowercase alphabetical letters and determines if all the letters in the string are in alphabetical order (lexicographical order). If they are, print \\"YES\\". Otherwise, print \\"NO\\". -----Constraints----- - The string only contains lowercase alphabetical letters. - The length of the string, N, is between 1 and 100 inclusive. -----Input----- The input is given from Standard Input in the following format: S -----Output----- Print \\"YES\\" if the letters in the string are in alphabetical order. Otherwise, print \\"NO\\". -----Sample Input----- abcdef -----Sample Output----- YES -----Sample Input----- hello -----Sample Output----- NO","solution":"def is_alphabetical_order(s): Checks if the characters of the string are in alphabetical order. Parameters: s (str): input string containing only lowercase alphabetical letters. Returns: str: \\"YES\\" if the characters are in alphabetical order, otherwise \\"NO\\" if list(s) == sorted(s): return \\"YES\\" else: return \\"NO\\""},{"question":"The Space Exploration Agency is working on a project to analyze patterns in sequences of satellite signals. They need your help as an expert programmer to evaluate the similarity of different signal sequences. The sequences are represented as strings of digits, where each digit corresponds to a specific type of signal. Your task is to find the length of the longest contiguous substring that appears in at least two different input strings. Write a function that takes two strings as input and returns the length of this longest common contiguous substring. Example Given two strings `\\"12345\\"` and `\\"54321\\"`, the longest common contiguous substring is `\\"1\\"` with a length of `1`. Given two strings `\\"abcdef\\"` and `\\"zabcf\\"`, the longest common contiguous substring is `\\"abc\\"` with a length of `3`. **Note**: your solution should strive for an efficient approach.","solution":"def longest_common_substring(str1, str2): Returns the length of the longest common contiguous substring that appears in both input strings. m, n = len(str1), len(str2) # Create a 2D array to store lengths of longest common suffixes of substrings lcsuff = [[0] * (n + 1) for _ in range(m + 1)] # To store length of the longest common substring length = 0 # Building the lcsuff table for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: lcsuff[i][j] = lcsuff[i - 1][j - 1] + 1 length = max(length, lcsuff[i][j]) else: lcsuff[i][j] = 0 return length"},{"question":"You are tasked with developing a new encrypted messaging app. To ensure the security of transmitted messages, you will implement a basic encryption algorithm that performs a substitution based on a simple alphabetical shift. For each character in the message, you will replace it by a character found by moving `k` positions later in the alphabet. If the end of the alphabet is reached, it wraps around to the beginning. For example, with `k = 3`, `a` would be replaced by `d`, `b` by `e`, `x` by `a`, etc. For this task, only lowercase English alphabet characters should be encrypted. Non-alphabet characters will remain unchanged in the output. Write a function that takes a string `message` and an integer `k`, and returns the encrypted message. Input The first line contains the integer `k` (0 ≤ k ≤ 25) — the number of positions to shift in the alphabet. The second line contains a string `message` (1 ≤ length of message ≤ 105) — the message to be encrypted. The message consists of lowercase English alphabet characters and non-alphabet characters. Output Output the encrypted message. Examples Input 3 hello world! Output khoor zruog! Input 1 abc xyz Output bcd yza Note In the first example, \'h\' is shifted to \'k\', \'e\' to \'h\', \'l\' to \'o\', \'o\' to \'r\', \'w\' to \'z\', \'r\' to \'u\', \'d\' to \'g\', and \'!\' remains unchanged. In the second example, \'a\' is shifted to \'b\', \'b\' to \'c\', \'c\' to \'d\', \'x\' to \'y\', \'y\' to \'z\', \'z\' to \'a\'.","solution":"def encrypt_message(k, message): Encrypts the message by shifting each lowercase alphabetical character by k positions in the alphabet. Non-alphabet characters remain unchanged. Args: k (int): Number of positions to shift in the alphabet (0 ≤ k ≤ 25). message (str): The message to be encrypted. Returns: str: The encrypted message. encrypted_message = [] for char in message: if \'a\' <= char <= \'z\': # Compute the new shifted character new_char = chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\')) encrypted_message.append(new_char) else: encrypted_message.append(char) return \'\'.join(encrypted_message)"},{"question":"Write a function that takes an array of integers `arr` and an integer `k`, and returns the k most frequent elements in the array. The returned elements can be in any order. The function should operate in O(n log k) time complexity. Example: Given `arr = [1,1,1,2,2,3,3,3,4,4]` and `k = 2`, the function should return `[1, 3]`. Given `arr = [4,4,4,4,2,2,2,3,3,1]` and `k = 3`, the function should return `[4, 2, 3]`.","solution":"import heapq from collections import Counter def k_most_frequent_elements(arr, k): Returns the k most frequent elements in the array. Parameters: arr (list): A list of integers. k (int): The number of most frequent elements to return. Returns: list: A list of the k most frequent elements. if k == 0: return [] # Count the frequency of elements in the array count = Counter(arr) # Use a heap to find the k most frequent elements heap = [] for num, freq in count.items(): if len(heap) < k: heapq.heappush(heap, (freq, num)) else: heapq.heappushpop(heap, (freq, num)) # Extract the elements from the heap, ignoring their frequencies return [num for freq, num in heap]"},{"question":"You are given an integer array `nums` which contains `n` elements. Your task is to calculate the maximum average of any subarray of length `k` (where `1 <= k <= n`). A subarray is defined as a contiguous part of the array. For example, if `nums = [1,12,-5,-6,50,3]` and `k = 4`, a subarray of length `4` could be `[1,12,-5,-6]`, `[12,-5,-6,50]`, etc. We aim to find the maximum average among all possible subarrays of length exactly `k`. Input The first line contains a single integer `T` (1 ≤ T ≤ 100), the number of test cases. Each test case consists of two lines: - The first line contains two integers `n` and `k` (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n), where `n` is the number of elements in the array, and `k` is the length of the subarray for which we need to find the maximum average. - The second line contains `n` space-separated integers, representing the array `nums`. The sum of the values of `n` across all test cases does not exceed 10^6. Output For each test case, print the maximum average of any subarray of length `k` in a new line. The output should be a floating point number rounded to six decimal places. Example Input 2 6 4 1 12 -5 -6 50 3 5 1 5 -2 3 1 -4 Output 12.750000 5.000000","solution":"def find_max_average(nums, k): Finds the maximum average of any subarray of length k. n = len(nums) max_sum = float(\'-inf\') current_sum = 0 # Compute the sum of the first subarray of length k for i in range(k): current_sum += nums[i] max_sum = current_sum # Use sliding window to compute the sum of subsequent subarrays of length k for i in range(k, n): current_sum += nums[i] - nums[i - k] max_sum = max(max_sum, current_sum) return max_sum / k def process_test_cases(T, test_cases): results = [] for t in range(T): n, k = test_cases[t][0] nums = test_cases[t][1] max_avg = find_max_average(nums, k) results.append(f\\"{max_avg:.6f}\\") return results"},{"question":"In Scala, write a function `def reverseWords(sentence: String): String` that takes a sentence string composed of words separated by single spaces, and returns the sentence with the words reversed but the characters in each word preserved. For example, given the input `\\"Hello world from Scala\\"`, the output should be `\\"Scala from world Hello\\"`. Example: ```scala reverseWords(\\"The quick brown fox\\") // returns \\"fox brown quick The\\" reverseWords(\\"jumped over the lazy dog\\") // returns \\"dog lazy the over jumped\\" reverseWords(\\"Scala is fun\\") // returns \\"fun is Scala\\" reverseWords(\\"a b c\\") // returns \\"c b a\\" ``` Ensure the function handles edge cases such as an empty string or a string with a single word.","solution":"def reverse_words(sentence): Reverses the order of words in a sentence but preserves the characters in each word. :param sentence: A string of words separated by single spaces. :return: The sentence with the words reversed. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"In a faraway kingdom called Pearland, there are two types of fruit: apples and oranges. Pearlandians love interesting fruit combinations and they are curious about how many ways there are to choose a combination of apples and oranges such that the total number of fruits is exactly k. Given a set of different quantities of apples and oranges, your task is to determine the number of combinations that sum exactly to k. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of apple quantities. The second line contains n distinct space-separated integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^6) — the quantities of apples. The third line contains a single integer m (1 ≤ m ≤ 1000) — the number of orange quantities. The fourth line contains m distinct space-separated integers b_1, b_2, ..., b_{m} (1 ≤ b_{i} ≤ 10^6) — the quantities of oranges. The fifth line contains a single integer k (1 ≤ k ≤ 10^9) — the exact number of fruits required. -----Output----- Print a single line — the number of different combinations of apples and oranges that sum exactly to k. If no such combination exists, print 0. -----Examples----- Input 3 1 2 3 3 4 5 6 7 Output 3 Input 2 3 6 2 2 4 8 Output 1","solution":"def count_fruit_combinations(n, apples, m, oranges, k): Returns the number of different combinations of apples and oranges that sum exactly to k. apple_set = set(apples) count = 0 for orange in oranges: if k - orange in apple_set: count += 1 return count"},{"question":"Fruit Basket Problem Chef has received a basket containing a variety of fruits. He wants to organize them in such a way that each type of fruit appears exactly the same number of times in the basket. Chef can remove any number of fruits from the basket, but he cannot add any. Your task is to determine whether it is possible to rearrange the basket to meet the criteria. Input - The first line contains an integer T representing the number of test cases. - Each test case consists of a single line containing a string S, representing the types of fruits in the basket. Output For each test case, output \\"YES\\" (without quotes) if Chef can rearrange the basket such that each type of fruit appears the same number of times, otherwise output \\"NO\\" (without quotes). Constraints 1 <= T <= 10^3 1 <= |S| <= 10^5 Each type of fruit is represented by a lowercase English alphabet. Sample Input: 3 aabbcc aabbc abcabcabc Sample Output: YES NO YES","solution":"def can_reorganize_fruits(T, test_cases): results = [] for S in test_cases: from collections import Counter fruit_count = Counter(S) frequencies = list(fruit_count.values()) common_freq = frequencies[0] if all(freq == common_freq for freq in frequencies): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A data center consists of N servers arranged in a line. Each server can either be operational or non-operational. The servers are numbered from 1 to N from left to right. Administrators need to identify the longest contiguous subsequence of operational servers to allocate to a critical task. Write a program that, given the status of each server, finds the length of the longest contiguous subsequence of operational servers. -----Input----- The first line contains an integer N (1 le N le 100), the number of servers. The second line contains a string of N characters, each of which is either \'O\' or \'X\'. \'O\' represents an operational server and \'X\' represents a non-operational server. -----Output----- Output the length of the longest contiguous subsequence of operational servers. -----Examples----- Sample Input 1: 8 OOXOOOXO Sample Output 1: 3 Sample Input 2: 5 XXXXX Sample Output 2: 0 Sample Input 3: 10 OOOOOOOOOO Sample Output 3: 10","solution":"def longest_contig_operational_seq(N, servers_status): Returns the length of the longest contiguous subsequence of operational servers. max_length = 0 current_length = 0 for status in servers_status: if (status == \'O\'): current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Write a function that calculates the number of days between two dates. Example 1: Input: d1 = 28, m1 = 12, y1 = 1995, d2 = 30, m2 = 12, y2 = 1995 Output: 2 Explanation: There are 2 days between 28 December 1995 and 30 December 1995. Example 2: Input: d1 = 1, m1 = 3, y1 = 2020, d2 = 1, m2 = 3, y2 = 2021 Output: 365 Explanation: There are 365 days between 1 March 2020 and 1 March 2021 considering 2020 is a leap year. Your Task: You don\'t need to read input or print anything. Your task is to complete the function daysBetweenDates() which takes 6 integers d1, m1, y1, d2, m2, y2 as input and return an integer denoting the number of days between the given dates. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= d1, d2 <= 31 1 <= m1, m2 <= 12 1900 <= y1, y2 <= 2100","solution":"from datetime import datetime def daysBetweenDates(d1, m1, y1, d2, m2, y2): Calculate the number of days between two dates. Parameters: d1, m1, y1: integers, representing the first date (day, month, year). d2, m2, y2: integers, representing the second date (day, month, year). Returns: int: the number of days between the two dates. date1 = datetime(y1, m1, d1) date2 = datetime(y2, m2, d2) delta = date2 - date1 return delta.days"},{"question":"In a digital clock, each digit is represented by some segments. There are 7 segments that can light up in order to display any digit from 0 to 9. Lists of segments for each digit are given below: - \'0\': \\"abcdef\\" - \'1\': \\"bc\\" - \'2\': \\"abdeg\\" - \'3\': \\"abcdg\\" - \'4\': \\"bcfg\\" - \'5\': \\"acdfg\\" - \'6\': \\"acdefg\\" - \'7\': \\"abc\\" - \'8\': \\"abcdefg\\" - \'9\': \\"abcdfg\\" Given a sequence of digits shown on this clock, determine the total number of segments needed to display all the digits in the sequence. -----Input----- - The first line of input contains an integer T denoting the number of test cases. - Each test case contains a single string S consisting of digits. -----Output----- - For each test case, output a single line containing the total number of segments needed to display the digit sequence. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 10000 -----Example----- Input: 3 123 456 789 Output: 12 20 18 -----Explanation----- In the first example, the digit sequence \\"123\\" will use: - \'1\' uses \\"bc\\" which are 2 segments. - \'2\' uses \\"abdeg\\" which are 5 segments. - \'3\' uses \\"abcdg\\" which are 5 segments. Thus, total = 2 + 5 + 5 = 12 segments. In the second example, the digit sequence \\"456\\" will use: - \'4\' uses \\"bcfg\\" which are 4 segments. - \'5\' uses \\"acdfg\\" which are 5 segments. - \'6\' uses \\"acdefg\\" which are 6 segments. Thus, total = 4 + 5 + 6 = 15 segments. In the third example, the digit sequence \\"789\\" will use: - \'7\' uses \\"abc\\" which are 3 segments. - \'8\' uses \\"abcdefg\\" which are 7 segments. - \'9\' uses \\"abcdfg\\" which are 6 segments. Thus, total = 3 + 7 + 6 = 18 segments.","solution":"def total_segments(t, cases): segment_counts = { \'0\': 6, \'1\': 2, \'2\': 5, \'3\': 5, \'4\': 4, \'5\': 5, \'6\': 6, \'7\': 3, \'8\': 7, \'9\': 6 } results = [] for case in cases: total = sum(segment_counts[digit] for digit in case) results.append(total) return results"},{"question":"A team of scientists discovered a new pattern in how certain words repeat in a given text. They want a script that counts how often each unique word appears, ignoring case and punctuation (. , ? ! _ ). Create a function that receives a string input and outputs a dictionary where the keys are the unique words (converted to lowercase) and the values are the counts of these words. Example: Input: \\"Amazing? This is just amazing, truly amazing.\\" Output: {\'amazing\': 3, \'this\': 1, \'is\': 1, \'just\': 1, \'truly\': 1}","solution":"import re from collections import Counter def count_words(text): Counts the occurrences of each unique word in the given text, ignoring case and punctuation. Args: text (str): Input text. Returns: dict: A dictionary with words as keys and their counts as values. text = re.sub(r\'[^ws]\', \'\', text) # Remove punctuation words = text.lower().split() # Convert to lowercase and split into words word_count = Counter(words) # Count the occurrences of each word return dict(word_count)"},{"question":"Given a string `s` representing a sequence of parentheses, brackets, and braces, determine if the sequence is valid. A sequence is valid if all types of parentheses, brackets, and braces are correctly matched and properly nested. # Input - A single string `s` consisting of characters `(`, `)`, `{`, `}`, `[` and `]`. - The length of the string `s` is between `1` and `10^5`. # Output - Print \\"YES\\" if the sequence is valid, otherwise print \\"NO\\". # Examples **Input:** ``` ()[]{} ``` **Output:** ``` YES ``` **Input:** ``` ([)] ``` **Output:** ``` NO ``` **Input:** ``` { ``` **Output:** ``` NO ``` **Explanation:** 1. In the first example, the sequence is valid as all opening characters have a corresponding matching closing character and they are properly nested. 2. In the second example, the sequence is invalid because the brackets `[` and `)` are not properly nested. 3. In the third example, the sequence is invalid as there is an unmatched opening brace `{`. # Note: - Consider using a stack data structure to solve this problem efficiently. - When iterating through the string, push opening characters onto the stack. - For closing characters, check if the stack is not empty and the top of the stack matches the corresponding opening character. If not, the sequence is invalid.","solution":"def is_valid_sequence(s): Determines if the sequence of parentheses, brackets, and braces is valid. Args: s (str): input string containing \'(\', \')\', \'{\', \'}\', \'[\' and \']\' Returns: str: \\"YES\\" if the sequence is valid, otherwise \\"NO\\" stack = [] # Define matching pairs matching_pairs = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_pairs.values(): # If the character is one of the opening characters, push it to the stack stack.append(char) elif char in matching_pairs.keys(): # If the character is one of the closing characters, check for a match if not stack or stack[-1] != matching_pairs[char]: return \\"NO\\" stack.pop() else: return \\"NO\\" # In case there is an invalid character return \\"YES\\" if not stack else \\"NO\\""},{"question":"Polycarp is fascinated by prime numbers and enjoys playing with them. One day, he thought of a problem involving prime numbers and asked you to solve it. Polycarp defines a prime palindrome number as a number that is both prime and a palindrome. A palindrome is a number that remains the same when its digits are reversed. For example, 131 is a prime palindrome because it\'s both prime and a palindrome. Polycarp gives you a number `m` and asks you to find the smallest prime palindrome that is greater than or equal to `m`. ----Input---- The input consists of a single integer `m` (`1 le m le 10^5`). ----Output---- Output a single integer, which is the smallest prime palindrome greater than or equal to `m`. ----Examples---- Input 31 Output 101 Input 100 Output 101 Input 313 Output 313","solution":"def is_prime(n): Check if a number n is prime. A number is prime if it is greater than 1 and is only divisible by 1 and itself. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_palindrome(n): Check if a number n is a palindrome. A number is a palindrome if it reads the same forwards and backwards. return str(n) == str(n)[::-1] def smallest_prime_palindrome(m): Find the smallest prime palindrome greater than or equal to m. while True: if is_prime(m) and is_palindrome(m): return m m += 1"},{"question":"A subsequence is a sequence derived by deleting some or no elements from a string without changing the order of the remaining elements. Given two strings `s1` and `s2`, your task is to check whether `s1` is a subsequence of `s2`. You should implement a function that receives two strings and returns `True` if `s1` is a subsequence of `s2`, and `False` otherwise. -----Input----- The input consists of two lines: - The first line contains the string `s1` where 1 leq text{len}(s1) leq 10^4. - The second line contains the string `s2` where 1 leq text{len}(s2) leq 10^4. Both strings will only contain lowercase English letters. -----Output----- Output `True` if `s1` is a subsequence of `s2`, and `False` otherwise. -----Examples----- Sample Input: abc ahbgdc Sample Output: True Sample Input: axc ahbgdc Sample Output: False","solution":"def is_subsequence(s1, s2): Returns True if s1 is a subsequence of s2, otherwise returns False. it = iter(s2) return all(char in it for char in s1)"},{"question":"John has a peculiar way of encoding messages. For each character in the string, he replaces it with the character that is \'n\' positions after it in the alphabet and if it goes past \'z\', it wraps around back to \'a\'. This process is called a Caesar Cipher with rotation factor \'n\'. Given a string and an integer n, encode the message using this Caesar Cipher. Example 1: Input: s = \\"abc\\", n = 2 Output: \\"cde\\" Explanation: \'a\' -> \'c\', \'b\' -> \'d\', \'c\' -> \'e\' Example 2: Input: s = \\"xyz\\", n = 3 Output: \\"abc\\" Explanation: \'x\' -> \'a\', \'y\' -> \'b\', \'z\' -> \'c\' Your Task: You don\'t need to read input or print anything. Complete the function caesarCipher() which takes a string s and an integer n as input parameters and returns the encoded string. Expected Time Complexity: O(|s|) Expected Auxiliary Space: O(|s|) Constraints: - 1 <= |s| <= 10^5 - 1 <= n <= 10^9 - The input string \'s\' contains only lowercase English letters.","solution":"def caesarCipher(s, n): Encodes a string using a Caesar Cipher with rotation factor \'n\'. # Ensure n is within the range [0, 25] n = n % 26 result = [] for char in s: # Compute the new character new_char = chr(((ord(char) - ord(\'a\') + n) % 26) + ord(\'a\')) result.append(new_char) return \'\'.join(result)"},{"question":"You are given a string `t` consisting of `m` lowercase Latin letters and an integer `k`. Consider a partition of the string `t` into exactly `k` non-empty substrings. You have to determine whether it is possible to partition `t` in such a way that all `k` substrings are palindromes. A string is a palindrome if it reads the same backward as forward. For example, \\"level\\" and \\"radar\\" are palindromes but \\"hello\\" and \\"world\\" are not. Your task is to determine whether it is possible to make such a partition of string `t` or not. -----Input----- The first line contains a single integer `m` (1 le m le 1000) — the length of string `t`. The second line contains the string `t`, consisting of exactly `m` lowercase Latin letters. The third line contains an integer `k` (1 le k le m) — the number of palindromic substrings needed. -----Output----- Print \\"YES\\" if it is possible to partition the string `t` into exactly `k` palindromic substrings. Otherwise, print \\"NO\\". -----Examples----- Input 7 levelup 3 Output YES Input 5 abcdc 2 Output NO -----Note----- In the first example, you can partition \\"levelup\\" into \\"l\\", \\"eve\\", and \\"lup\\" where \\"l\\", \\"eve\\" are palindromes, and \\"lup\\" can be further partitioned into \\"l\\", \\"u\\", \\"p\\". Thus, it is possible to find 3 palindromic substrings. In the second example, it is not possible to partition \\"abcdc\\" into 2 non-empty palindromic substrings.","solution":"def can_partition_into_palindromes(m, t, k): Function to determine whether it is possible to partition the string `t` into exactly `k` palindromic substrings. :param m: Integer, the length of string t. :param t: String, consisting of exactly `m` lowercase Latin letters. :param k: Integer, the number of palindromic substrings needed. :return: \\"YES\\" if it is possible to partition t into exactly k palindromic substrings, otherwise \\"NO\\". def is_palindrome(s): return s == s[::-1] # Precompute palindrome substrings palindromes = [[False] * m for _ in range(m)] for i in range(m): palindromes[i][i] = True for length in range(2, m + 1): for i in range(m - length + 1): j = i + length - 1 if length == 2: palindromes[i][j] = (t[i] == t[j]) else: palindromes[i][j] = (t[i] == t[j]) and palindromes[i + 1][j - 1] # Dynamic programming to find the minimum number of palindromic substrings dp = [float(\'inf\')] * (m + 1) dp[0] = 0 for i in range(1, m + 1): for j in range(i): if palindromes[j][i - 1]: dp[i] = min(dp[i], dp[j] + 1) return \\"YES\\" if dp[m] <= k else \\"NO\\""},{"question":"A new game is being developed in which players need to navigate a grid of cells. Each cell in the grid can be either an obstacle or a free cell that the player can step on. The player starts at the top-left corner of the grid and needs to reach the bottom-right corner. The player can move to a neighboring cell in the grid either to the right (i.e., from cell (x, y) to cell (x, y+1)) or downward (i.e., from cell (x, y) to cell (x+1, y)), but cannot move into cells that contain obstacles. The objective is to determine the number of distinct paths the player can take to reach the bottom-right corner of the grid from the top-left corner without stepping on any obstacles. If no path is possible, the function should return 0. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines each contain m integers, where the j-th integer in the i-th line is 1 if cell (i, j) is an obstacle, and 0 otherwise. Output Print the number of distinct paths from the top-left corner to the bottom-right corner. Since the number of paths can be very large, print the result modulo 1000000007. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 1 0 0 0 0 0 Output 0 Note In the first example, there are two ways for the player to navigate the grid to reach the bottom-right corner: - Right -> Right -> Down -> Down - Down -> Down -> Right -> Right In the second example, it is impossible to reach the bottom-right corner because of the placement of obstacles. Hence, the output is 0.","solution":"def count_paths(grid): Counts the number of distinct paths in a grid from top-left to bottom-right avoiding obstacles. Parameters: grid (list of list of int): The grid representing the game board, where 1 represents an obstacle and 0 represents a free cell. Returns: int: Number of distinct paths from top-left to bottom-right modulo 1000000007. MOD = 1000000007 n = len(grid) m = len(grid[0]) # Early return if start or end is an obstacle if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 # Initialize dp table dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Fill dp table for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 # obstacle else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[-1][-1]"},{"question":"Task You are given a list of hotel room rates with the room numbers and their respective rates. Your task is to implement a functionality that finds the most frequent rate and the room numbers with that rate. ___ Output details: * If multiple rates have the same frequency, select the smallest rate. * The output should be a dictionary where the keys are the rates, and the values are the lists of room numbers associated with that rate. * The room numbers in the lists should be presented in ascending order. ___ Example: ``` room_rates([ (101, 200), (102, 200), (103, 150), (104, 200), (105, 150), (106, 300) ]) => {200: [101, 102, 104]} ``` ``` room_rates([ (201, 500), (202, 600), (203, 500), (204, 300), (205, 300), (206, 300) ]) => {300: [204, 205, 206]} ``` ___ Tests: ```python Main suite: Edge cases: (Reference - 4000 ms) (Reference - 30 ms) Number of rooms | N of tests Number of rooms | N of tests ------------------------ ----------------------- 1-200 | 100 1-200 | 100 500-1000 | 50 500-1000| 50 ```","solution":"def room_rates(rates): Finds the most frequent rate and the room numbers associated with that rate. Args: rates (list of tuple): List containing (room_number, rate) Returns: dict: Dictionary with the most frequent rate as the key and a list of room numbers as the value. if not rates: return {} from collections import defaultdict, Counter rate_count = Counter(rate for room, rate in rates) max_frequency = max(rate_count.values()) most_frequent_rates = [rate for rate in rate_count if rate_count[rate] == max_frequency] smallest_most_frequent_rate = min(most_frequent_rates) result = defaultdict(list) for room, rate in rates: if rate == smallest_most_frequent_rate: result[rate].append(room) result[smallest_most_frequent_rate].sort() return result"},{"question":"# Task A company has several departments, each with a list of employee IDs representing employees assigned to that department. A department may have multiple employees with the same ID due to data entry errors. The company\'s management wants a unique list of employee IDs for each department. You are given a dictionary `departments` where keys are department names and values are lists of employee IDs. Write a function that returns a new dictionary with unique employee IDs for each department. # Input/Output `[input]` dictionary `departments` Each key is a string representing the department name, and each value is a list of integers representing employee IDs. `[output]` a dictionary The returned dictionary should have the same structure as the input, but with duplicate employee IDs removed from each department\'s list. # Example For `departments = {\\"HR\\": [101, 102, 103, 101], \\"Engineering\\": [104, 105, 104, 106]}`, the output should be `{\\"HR\\": [101, 102, 103], \\"Engineering\\": [104, 105, 106]}`. For `departments = {\\"Sales\\": [201, 202, 203], \\"Marketing\\": [301, 302, 301, 302]}`, the output should be `{\\"Sales\\": [201, 202, 203], \\"Marketing\\": [301, 302]}`.","solution":"def remove_duplicate_ids(departments): Removes duplicate employee IDs from each department. Arguments: departments -- a dictionary where keys are department names and values are lists of employee IDs Returns: A new dictionary with unique employee IDs for each department. unique_departments = {} for department, ids in departments.items(): unique_departments[department] = list(set(ids)) return unique_departments"},{"question":"Sara is a board game enthusiast who loves to design new games. This time, she is challenged with creating a board with certain rules. The board is a one-dimensional grid of n consecutive cells, each cell being either blocked (denoted by a \'#\') or passable (denoted by a \'.\'). Sara\'s task is to determine whether it is possible to traverse from the start of the board (leftmost cell) to the end of the board (rightmost cell) by moving to adjacent cells (left or right), without passing through any blocked cell. You need to help Sara by writing a program that decides whether a path exists on the grid following the rules. -----Input----- The first line contains a single positive integer n (1 ≤ n ≤ 100) — the length of the board. The second line contains a string s of n characters, each being either \'#\' (blocked) or \'.\' (passable). -----Output----- Output \\"Yes\\" (without quotes) if there is a way to traverse from the start to the end of the board; otherwise, output \\"No\\" (without quotes). You can print each character in any case (upper or lower). -----Examples----- Input 6 .#...# Output No Input 6 ...... Output Yes Input 6 Output No Input 4 .#.# Output No Input 5 ... Output No -----Note----- For the first example, there is no way to get through since the path is blocked. For the second example, the entire board is passable, so the output is Yes. For the third example, the board is fully blocked, so traversal is impossible. For the fourth example, the blocked cells in the path prevent traversal. For the fifth example, the path is blocked in the middle preventing access to the end.","solution":"def can_traverse_board(n, s): Determines if it is possible to traverse from the start to the end of the board. Args: n (int): The length of the board. s (str): The board configuration as a string where \'#\' denotes a blocked cell and \'.\' denotes a passable cell. Returns: str: \\"Yes\\" if traversal is possible, otherwise \\"No\\". if s[0] == \'#\' or s[-1] == \'#\': return \\"No\\" if \\"\\" in s: return \\"No\\" return \\"Yes\\""},{"question":"You are given a string `s` composed of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Your task is to check if the string is valid. A string is considered valid if brackets are closed in the correct order and each opening bracket has a corresponding closing bracket of the same type. For example: - `{[()]}` is valid - `{[(])}` is not valid Write a function `bool isValid(string s)` that returns `true` if the string is valid and `false` otherwise. -----Input----- The input consists of a single string `s` with length `n`, where 0 le n le 10^6. -----Output----- Print `\\"true\\"` if the string `s` is valid, otherwise print `\\"false\\"`. -----Examples----- Input \\"()\\" Output true Input \\"()[]{}\\" Output true Input \\"(]\\" Output false Input \\"([)]\\" Output false Input \\"{[]}\\" Output true -----Note----- - An empty string is considered valid. - The string only contains the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'.","solution":"def isValid(s): Returns true if the input string s is a valid parentheses string. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket: top_element = stack.pop() if stack else \'#\' if matching_bracket[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Given a string of words separated by spaces, write a function to rearrange the words in such a manner that they appear in reverse order. Each word must retain its original capitalization, and the punctuation should remain attached to the word it was originally part of. Examples: ``` Input: \\"Hello, World! This is a test.\\" Output: \\"test. a is This World! Hello,\\" Input: \\"Programming is fun; always keep learning.\\" Output: \\"learning. keep always fun; is Programming\\" Input: \\"To be, or not to be: that is the question.\\" Output: \\"question. the is that be: to not or be, To\\" ``` **Constraints:** - The input string will consist of at least one word. - Words in the string are separated by single spaces. - The input string does not contain leading or trailing spaces. Write a function `reverse_words` to achieve this.","solution":"def reverse_words(input_string): Reverses the order of words in the input string. Each word retains its original capitalization and the punctuation attached to the words remains intact. Parameters: input_string (str): The original string with words separated by spaces. Returns: str: The modified string with words in reverse order. words = input_string.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Restaurant owner Paul is curious about which menu items are the most popular among his customers. Each customer orders a single item, and Paul wants to analyze the orders to find out which item is ordered most frequently. To do this, he needs a program that will read a list of orders and determine the most popular menu item. If there are multiple items that are equally popular, Paul would like to know the item that comes first lexicographically. -----Input----- The first line of input contains an integer 1 le N le 1000, the number of customer orders. The next N lines each contain a single string consisting of lowercase English letters, representing the menu item ordered by a customer. -----Output----- Output the most popular menu item. If several items are equally popular, output the one that comes first lexicographically. -----Examples----- Sample Input: 5 pizza burger sushi pizza sushi Sample Output: pizza","solution":"def most_popular_item(orders): Returns the most popular menu item among the orders. In case of a tie, it returns the item that comes first lexicographically. from collections import Counter # Count the frequency of each menu item count = Counter(orders) # Find the item with the highest frequency, breaking ties lexicographically most_popular = min(count.items(), key=lambda x: (-x[1], x[0])) return most_popular[0]"},{"question":"A famous detective is working on a case involving a secret society. The society communicates using a cipher based on prime factorization. The detective has a list of numbers, and he suspects that they are encoded messages. To start decoding, he needs to find all numbers in the list that have exactly two distinct prime factors. A number has exactly two distinct prime factors if it can be expressed in the form ( p times q ), where ( p ) and ( q ) are different prime numbers. Your task is to help the detective by writing a program that takes multiple test cases. For each test case, you are given a list of numbers. The program should output \\"TRUE\\" if at least one number in the list has exactly two distinct prime factors, and \\"FALSE\\" otherwise. -----Input----- The first line contains an integer ( t ) (( 1 leq t leq 100 )) — the number of test cases. The descriptions of the ( t ) test cases follow. The first line of each test case contains an integer ( n ) (( 1 leq n leq 100 )) — the number of numbers in the list. The second line of each test case contains ( n ) integers ( b_1, b_2, ldots, b_n ) (( 1 leq b_i leq 10^6 )) — the numbers in the list. -----Output----- For each test case, output one line containing \\"TRUE\\" if at least one number in the list has exactly two distinct prime factors, and \\"FALSE\\" otherwise. -----Example----- Input: 3 5 10 15 21 30 35 4 16 27 64 81 3 49 77 91 Output: TRUE FALSE TRUE -----Note----- In the first test case, the number 10 has exactly two distinct prime factors (2 and 5), as do 15 (3 and 5), 21 (3 and 7), 30 (2 and 3 and 5), and 35 (5 and 7), so the output is \\"TRUE\\". In the second test case, none of the numbers have exactly two distinct prime factors, so the output is \\"FALSE\\". In the third test case, the numbers 77 (7 and 11) and 91 (7 and 13) have exactly two distinct prime factors, so the output is \\"TRUE\\".","solution":"def has_exactly_two_distinct_prime_factors(number): prime_factors = set() factor = 2 while factor * factor <= number: while (number % factor) == 0: prime_factors.add(factor) number //= factor factor += 1 if number > 1: prime_factors.add(number) return len(prime_factors) == 2 def solve(t, test_cases): results = [] for i in range(t): _, numbers = test_cases[i] result = any(has_exactly_two_distinct_prime_factors(num) for num in numbers) results.append(\\"TRUE\\" if result else \\"FALSE\\") return results"},{"question":"Given an array of numbers and a target value, determine whether there are three distinct numbers in the array that add up to the target value. Your function should return true if such a triplet exists and false otherwise. -----Input----- The first line contains two integers, N and T (3 ≤ N ≤ 1000, 1 ≤ T ≤ 10^6), where N is the number of elements in the array, and T is the target sum. The second line contains N distinct integers a_1, a_2, ..., a_N (-10^6 ≤ a_i ≤ 10^6), which are the elements of the array. -----Output----- Print \\"true\\" if there exist three distinct numbers in the array that add up to T, otherwise print \\"false\\". -----Examples----- Input 5 10 2 3 4 5 1 Output true Input 4 12 1 2 3 4 Output false Input 6 0 -2 1 3 -1 2 -3 Output true -----Note----- In the first example, the triplet (2, 3, 5) adds up to the target 10. In the second example, there is no triplet that adds up to 12 from the given array. In the third example, the triplet (-2, 1, 1) adds up to the target 0.","solution":"def three_sum_exists(array, target): Determine whether there are three distinct numbers in the array that add up to the target value. Args: array (List[int]): The list of distinct integers. target (int): The target sum. Returns: bool: True if such a triplet exists, False otherwise. array.sort() n = len(array) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = array[i] + array[left] + array[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Heidi the baker is back and this time she is making cookies for a very special party. She has a very specific baking system in place. Each cookie can be either plain or have decorations. To make things more interesting, Heidi\'s cookies need to be packed in packages of N cookies where no two consecutive cookies can both be decorated. Given that Heidi has an unlimited supply of ingredients, your task is to determine the total number of possible ways to arrange N cookies such that no two decorated cookies are next to each other. Both plain and decorated cookies are allowed to be adjacent to a cookie of the same type or different type. Input The first and only line of input contains an integer N (1 ≤ N ≤ 105). Output Output the number of possible valid cookie arrangements modulo 109 + 7. Examples Input 1 Output 2 Input 2 Output 3 Input 3 Output 5 Input 5 Output 13 Input 10 Output 144 Explanation For N = 2, the valid arrangements are: \\"PP\\", \\"PD\\", \\"DP\\". For N = 3, the valid arrangements are: \\"PPP\\", \\"PPD\\", \\"PDP\\", \\"DPP\\", \\"DPD\\". Note The sequences are made of \'P\' (for plain) and \'D\' (for decorated) cookies.","solution":"def count_cookie_arrangements(N): MOD = 10**9 + 7 if N == 1: return 2 dp = [0] * (N + 1) dp[1] = 2 dp[2] = 3 for i in range(3, N + 1): dp[i] = (dp[i-1] + dp[i-2]) % MOD return dp[N]"},{"question":"Create a program that reads a list of integers and outputs the longest contiguous subarray such that the sum of elements in the subarray is equal to zero. If no such subarray exists, the program should output \\"NA\\". Input Given multiple datasets. The format of each dataset is as follows: n a1 a2 a3 ... an - n is the number of elements in the array (1 ≤ n ≤ 1,000). - a1, a2, a3, ..., an are the integers in the array (-10,000 ≤ ai ≤ 10,000). Input ends when n is 0. The number of datasets does not exceed 30. Output For each dataset, print the longest contiguous subarray where the sum is zero. If there are multiple subarrays with the same length, print the one that appears first. If no such subarray exists, print \\"NA\\". Insert one blank line between the datasets. Example Input 5 1 2 -2 4 -4 6 3 1 -1 -3 2 4 4 1 2 3 4 0 Output 2 -2 4 -4 3 1 -1 -3 NA","solution":"def find_longest_zero_sum_subarray(n, array): sum_indices = {} max_len = 0 max_subarray = None current_sum = 0 for i in range(n): current_sum += array[i] if current_sum == 0: max_len = i + 1 max_subarray = array[:i+1] if current_sum in sum_indices: subarray_len = i - sum_indices[current_sum] if subarray_len > max_len: max_len = subarray_len max_subarray = array[sum_indices[current_sum] + 1:i + 1] else: sum_indices[current_sum] = i if max_subarray is None: return \\"NA\\" else: return \' \'.join(map(str, max_subarray)) def process_input(input_text): lines = input_text.strip().split(\'n\') index = 0 results = [] while index < len(lines): n = int(lines[index].strip()) if n == 0: break index += 1 array = list(map(int, lines[index].strip().split())) result = find_longest_zero_sum_subarray(n, array) results.append(result) index += 1 return \'nn\'.join(results)"},{"question":"You are given an array of integers representing scores of students in a class. Your task is to create a system to perform various operations on this array to manage and query the scores efficiently. The operations supported by the system are as follows: * add(score): Add a score to the array. * remove(score): Remove one instance of the score from the array if it exists. * find(score): Print 1 if the score is in the array, otherwise 0. * min: Print the minimum score in the array. * max: Print the maximum score in the array. * average: Print the average of all scores in the array, rounded down to the nearest integer. * count: Print the number of scores currently in the array. Constraints * 1 leq q leq 100,000 * Each score is an integer within the range [-10^6, 10^6]. Input The input consists of several lines. The first line contains an integer q, the number of queries. Each of the following q lines contains one of the following operations: * add(score) * remove(score) * find(score) * min * max * average * count The operations are given in the following format: * add score * remove score * find score * min * max * average * count Output For each query of type find, min, max, average, and count, print the result on a new line. If the array is empty and a min, max, or average query is issued, print \\"EMPTY\\" without quotes. Example Input 12 add 5 add 10 add 15 remove 10 find 10 find 5 min max average count remove 5 min Output 0 1 5 15 10 2 15 Explanation After performing the operations: 1. The array becomes [5, 10, 15], then [5, 15] after removing 10. 2. The find operation checks if 10 is in the array which prints 0 (not found). 3. The find operation checks if 5 is in the array which prints 1 (found). 4. The minimum score after removing 10 is 5. 5. The maximum score in the array is 15. 6. The average of (5 + 15) / 2 = 10. 7. The count of scores in the array is 2. 8. After removing 5, the array becomes [15], and the new minimum value is 15.","solution":"class ScoreManager: def __init__(self): self.scores = [] def add(self, score): self.scores.append(score) def remove(self, score): if score in self.scores: self.scores.remove(score) def find(self, score): return 1 if score in self.scores else 0 def min(self): return min(self.scores) if self.scores else \\"EMPTY\\" def max(self): return max(self.scores) if self.scores else \\"EMPTY\\" def average(self): return sum(self.scores) // len(self.scores) if self.scores else \\"EMPTY\\" def count(self): return len(self.scores)"},{"question":"You are given a list of n integers and a series of queries. Each query asks you to perform one of three operations on the list. These operations are defined as follows: 1. Update the value at a specified index. 2. Find the sum of elements between two specified indices. 3. Find the maximum value between two specified indices. Your task is to implement a data structure that supports these operations efficiently. -----Input----- The first line contains two integers n and q (1 le n le 2 cdot 10^5, 1 le q le 2 cdot 10^5) — the number of elements in the list and the number of queries respectively. The second line contains n integers — the initial values of the list. The next q lines contain the queries, each query is of one of the following three types: 1 x y — update the value at index x to y (1 le x le n, -10^9 le y le 10^9). 2 l r — find the sum of elements between indices l and r (1 le l le r le n). 3 l r — find the maximum value between indices l and r (1 le l le r le n). -----Output----- For each type 2 or type 3 query, print the result on a new line. -----Examples----- Input 5 4 1 2 3 4 5 2 1 3 3 2 5 1 3 10 2 1 5 Output 6 5 22 -----Note----- Consider the provided example. The initial list is [1, 2, 3, 4, 5]. The first query asks for the sum of elements from index 1 to 3. The sum is 1 + 2 + 3 = 6. The second query asks for the maximum value from index 2 to 5. The maximum value is max(2, 3, 4, 5) = 5. The third query updates the value at index 3 to 10. The list is now [1, 2, 10, 4, 5]. The fourth query asks for the sum of elements from index 1 to 5. The sum is 1 + 2 + 10 + 4 + 5 = 22.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.data = data self.tree_sum = [0] * (4 * self.n) self.tree_max = [0] * (4 * self.n) self._build(0, 0, self.n - 1) def _build(self, node, start, end): if start == end: self.tree_sum[node] = self.data[start] self.tree_max[node] = self.data[start] else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 self._build(left_child, start, mid) self._build(right_child, mid + 1, end) self.tree_sum[node] = self.tree_sum[left_child] + self.tree_sum[right_child] self.tree_max[node] = max(self.tree_max[left_child], self.tree_max[right_child]) def update(self, idx, value): def _update(node, start, end): if start == end: self.data[idx] = value self.tree_sum[node] = value self.tree_max[node] = value else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 if start <= idx <= mid: _update(left_child, start, mid) else: _update(right_child, mid + 1, end) self.tree_sum[node] = self.tree_sum[left_child] + self.tree_sum[right_child] self.tree_max[node] = max(self.tree_max[left_child], self.tree_max[right_child]) return _update(0, 0, self.n - 1) def range_sum(self, l, r): def _sum(node, start, end): if l > end or r < start: return 0 if l <= start and end <= r: return self.tree_sum[node] mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 return _sum(left_child, start, mid) + _sum(right_child, mid + 1, end) return _sum(0, 0, self.n - 1) def range_max(self, l, r): def _max(node, start, end): if l > end or r < start: return float(\'-inf\') if l <= start and end <= r: return self.tree_max[node] mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 return max(_max(left_child, start, mid), _max(right_child, mid + 1, end)) return _max(0, 0, self.n - 1) def process_queries(n, initial_values, queries): segment_tree = SegmentTree(initial_values) result = [] for query in queries: if query[0] == 1: _, x, y = query segment_tree.update(x - 1, y) elif query[0] == 2: _, l, r = query result.append(segment_tree.range_sum(l - 1, r - 1)) elif query[0] == 3: _, l, r = query result.append(segment_tree.range_max(l - 1, r - 1)) return result"},{"question":"Write a function `prime_factors_sum` that accepts a positive integer `n` and returns the sum of all unique prime factors of `n`. If the input is not a positive integer, the function should return `null/None`. A prime factor of a number `n` is a prime number that divides `n` without leaving a remainder. Note that prime factors are considered unique, so each prime factor should be counted only once in the sum. Here are some examples: ```python prime_factors_sum(28) # returns 10, since the prime factors of 28 are 2 and 7 prime_factors_sum(10) # returns 7, since the prime factors of 10 are 2 and 5 prime_factors_sum(49) # returns 7, since the prime factor of 49 is 7 prime_factors_sum(1) # returns 0, as 1 has no prime factors prime_factors_sum(\\"test\\") # returns None ``` Good luck!","solution":"def prime_factors_sum(n): Returns the sum of all unique prime factors of n. If the input is not a positive integer, return None. if not isinstance(n, int) or n <= 0: return None def is_prime(x): if x <= 1: return False if x <= 3: return True if x % 2 == 0 or x % 3 == 0: return False i = 5 while i * i <= x: if x % i == 0 or x % (i + 2) == 0: return False i += 6 return True prime_factors = set() for i in range(2, int(n**0.5) + 1): if n % i == 0: if is_prime(i): prime_factors.add(i) if is_prime(n // i): prime_factors.add(n // i) if is_prime(n): prime_factors.add(n) return sum(prime_factors)"},{"question":"You are given an array of integers a. Your task is to rearrange the array such that no two adjacent elements have the same value. If such an arrangement is not possible, return an empty array. -----Input----- The first line contains one integer t (1 leq t leq 100) — the number of test cases. Then t lines follow, each representing a test case. Each line contains: - The first integer n (1 leq n leq 10^5) — the number of elements in the array. - The second line contains n integers a_i (0 leq a_i leq 10^5) — the elements of the array. -----Output----- For each test case, if it is possible to rearrange the array such that no two adjacent elements are the same, print the rearranged array on a single line. Otherwise, print an empty line. -----Example----- Input 2 5 1 1 1 2 2 4 4 4 4 4 Output 1 2 1 2 1","solution":"from collections import Counter import heapq def rearrange_no_adjacent(t, cases): def rearrange(arr): freq = Counter(arr) max_heap = [(-count, num) for num, count in freq.items()] heapq.heapify(max_heap) prev_count, prev_num = 0, None result = [] while max_heap: count, num = heapq.heappop(max_heap) result.append(num) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_num)) prev_count, prev_num = count + 1, num if len(result) != len(arr): return [] return result results = [] for i in range(t): n, arr = cases[i] result = rearrange(arr) results.append(result) return results"},{"question":"Ankit loves patterns and he has found a new one to solve. He has N numbers in a list and he wants to rearrange them such that all odd numbers appear first, followed by all even numbers. If the odd or even numbers are already in the list, their relative order should be preserved. Ankit is busy with his exams and needs your help to write an algorithm that solves this problem. INPUT The first line contains an integer T (1 < T < 5), the number of test cases. For each test case: - The first line contains an integer N (1 < N < 1000), the number of elements in the list. - The second line contains N space-separated integers Ai (1 < Ai < 10000), the elements of the list. OUTPUT For each test case, print the rearranged list such that all odd numbers appear first, followed by all even numbers. SAMPLE INPUT 2 5 4 3 2 7 8 6 12 17 19 23 26 8 SAMPLE OUTPUT 3 7 4 2 8 17 19 23 12 26 8 Explanation In the first test case: Input list: 4 3 2 7 8 Output list: 3 7 4 2 8 (Odd numbers: 3 7 followed by Even numbers: 4 2 8) In the second test case: Input list: 12 17 19 23 26 8 Output list: 17 19 23 12 26 8 (Odd numbers: 17 19 23 followed by Even numbers: 12 26 8)","solution":"def rearrange_odd_even(numbers): Rearranges the list so that all odd numbers appear first, followed by all even numbers. Preserves the relative order of odd and even numbers. :param numbers: List of integers :return: Rearranged list of integers odds = [num for num in numbers if num % 2 != 0] evens = [num for num in numbers if num % 2 == 0] return odds + evens def process_test_cases(test_cases): Process multiple test cases for rearranging odd and even numbers. :param test_cases: List of tuples where each tuple contains a list of integers :return: List of lists with rearranged numbers for each test case results = [] for numbers in test_cases: results.append(rearrange_odd_even(numbers)) return results"},{"question":"Analyze a list of student grades and identify students who need improvement. Each student is represented by a dictionary containing their name and a list of grades. You will write a program that flags students whose average grade is below a specified threshold. Student grades are presented in a list of dictionaries: ``` students = [ {\\"name\\": \\"John\\", \\"grades\\": [88, 92, 79, 85]}, {\\"name\\": \\"Jane\\", \\"grades\\": [70, 65, 80, 75]}, {\\"name\\": \\"Emily\\", \\"grades\\": [95, 91, 89, 96]}, {\\"name\\": \\"Bob\\", \\"grades\\": [60, 55, 70, 65]}, {\\"name\\": \\"Alice\\", \\"grades\\": [85, 88, 84, 82]} ] ``` Write a program that takes a list of student dictionaries and a threshold value, and returns a list of student names whose average grade is below the threshold. The INPUT will be a list of dictionaries representing students and their grades, and a numeric threshold value: ``` students = [ {\\"name\\": \\"John\\", \\"grades\\": [88, 92, 79, 85]}, {\\"name\\": \\"Jane\\", \\"grades\\": [70, 65, 80, 75]}, {\\"name\\": \\"Emily\\", \\"grades\\": [95, 91, 89, 96]}, {\\"name\\": \\"Bob\\", \\"grades\\": [60, 55, 70, 65]}, {\\"name\\": \\"Alice\\", \\"grades\\": [85, 88, 84, 82]} ] threshold = 80 ``` The OUTPUT should be a list of student names with averages below the threshold: `[\\"Jane\\", \\"Bob\\"]` Conditions to be met: 1. The average grade should be computed as the mean of the grades provided for each student. 2. The order of students in the output list should follow their original order in the input list. 3. If no student has an average grade below the threshold, return an empty list. Example to consider: ``` students = [ {\\"name\\": \\"Tom\\", \\"grades\\": [78, 82, 65, 89]}, {\\"name\\": \\"Jerry\\", \\"grades\\": [90, 92, 91, 89]} ] threshold = 85 output = [\\"Tom\\"] ```","solution":"def students_needing_improvement(students, threshold): Returns the names of students whose average grade is below the threshold. Parameters: students (list of dict): List of dictionaries where each dictionary contains a student\'s name and their grades. threshold (int): The grade threshold below which a student\'s average grade is considered as needing improvement. Returns: list: List of student names whose average grade is below the threshold. students_needing_help = [] for student in students: average_grade = sum(student[\\"grades\\"]) / len(student[\\"grades\\"]) if average_grade < threshold: students_needing_help.append(student[\\"name\\"]) return students_needing_help"},{"question":"You have been given a problem that requires you to manipulate a series of actions based on the value of an operation code. You are given an integer `t` and an array `B` of `M` integers. The array can contain both positive and negative integers. Based on the value of `t`, different operations will be performed: `t` Action Needed `1` Print \\"Even\\" if all elements in `B` are even, otherwise print \\"Odd\\" `2` Print the maximum element in `B` `3` Print the minimum element in `B` `4` Print \\"Increasing\\" if the elements in `B` are in strictly increasing order, otherwise print \\"Not Increasing\\" `5` Print \\"Palindrome\\" if the array `B` reads the same forwards and backwards, otherwise print \\"Not Palindrome\\" `6` Calculate the cumulative sum of the array and print the resulting sum array. For example, if the input array is `[1, 2, 3]`, then the output should be `[1, 3, 6]` -----Input----- The first line contains an integer `M` and `t` (1 le M le 100000; 1 le t le 6). The second line contains `M` integers, which can be any signed 32-bit integers. -----Output----- For each test case, output the required result based on the value of `t`. -----Examples----- Sample Input 1: 5 1 2 4 6 8 10 Sample Output 1: Even Sample Input 2: 4 2 -1 4 34 10 Sample Output 2: 34 Sample Input 3: 6 4 1 3 5 7 9 11 Sample Output 3: Increasing Sample Input 4: 5 5 1 2 3 2 1 Sample Output 4: Palindrome Sample Input 5: 4 6 1 -2 3 4 Sample Output 5: 1 -1 2 6","solution":"def process_array(t, B): if t == 1: if all(b % 2 == 0 for b in B): return \\"Even\\" else: return \\"Odd\\" elif t == 2: return max(B) elif t == 3: return min(B) elif t == 4: if all(B[i] < B[i+1] for i in range(len(B)-1)): return \\"Increasing\\" else: return \\"Not Increasing\\" elif t == 5: if B == B[::-1]: return \\"Palindrome\\" else: return \\"Not Palindrome\\" elif t == 6: cumulative_sum = [] current_sum = 0 for b in B: current_sum += b cumulative_sum.append(current_sum) return cumulative_sum"},{"question":"A popular ebook website offers two modes for reading books, online and offline. For offline reading, a user can download a book, but there is a limitation on daily downloads. Each book is represented as a unique integer ID. A user can make multiple downloads in a single day, but the total number of downloads in one day cannot exceed `max_downloads`. A new day starts after the last download of the previous day. Given a list of book IDs that a user wants to download and the maximum number of downloads allowed per day, you need to determine the minimum number of days required to download all the requested books. -----Input----- The first line contains a single integer `t` (1 le t le 100) — the number of test cases. The first line of each test case contains one integer `n` (1 le n le 10^5) — the number of book IDs the user wants to download. The second line of each test case contains one integer `max_downloads` (1 le max_downloads le 10^5) — the maximum number of downloads allowed per day. The third line of each test case contains `n` integers — the IDs of the books the user wants to download. Each book ID is a positive integer. The total number of IDs across all test cases does not exceed 10^6. -----Output----- For each test case, output a single integer — the minimum number of days required to download all the requested books. -----Examples----- Input 3 4 2 1 2 3 4 5 3 5 6 7 8 9 7 1 10 11 12 13 14 15 16 Output 2 2 7 -----Note----- In the first test case, the user can download two books per day, so the books can be downloaded in two days: [1, 2] on the first day and [3, 4] on the second day. In the second test case, the user can download up to three books per day, so the minimum number of days required is two: [5, 6, 7] on the first day and [8, 9] on the second day. In the third test case, the user is allowed only one book download per day, so each download happens on a separate day, requiring a total of seven days.","solution":"def min_download_days(t, test_cases): Given the number of test cases and the details for each test case, determine the minimum number of days required to download all the books for each test case. Args: t : int Number of test cases. test_cases : list of tuples Each tuple contains: - n (int): Number of books to download. - max_downloads (int): Maximum downloads allowed per day. - book_ids (list of int): List of book IDs the user wants to download. Returns: list of int : A list containing the minimum number of days required for each test case. result = [] for case in test_cases: n, max_downloads, book_ids = case if max_downloads == 0: result.append(0) else: days = (n + max_downloads - 1) // max_downloads result.append(days) return result # Use the parse_input function to parse the input format conveniently def parse_input(input_string): lines = input_string.split(\\"n\\") t = int(lines[0].strip()) test_cases = [] line_index = 1 for _ in range(t): n = int(lines[line_index].strip()) max_downloads = int(lines[line_index + 1].strip()) book_ids = list(map(int, lines[line_index + 2].strip().split())) test_cases.append((n, max_downloads, book_ids)) line_index += 3 return t, test_cases"},{"question":"An array A of integers is called an ascending run array if every element in the array is greater than or equal to the previous element. In other words, for all valid indices i in A (1 le i < n), A[i] le A[i+1] holds true. Mila has an array A of length n and she wants to make the array an ascending run array. To accomplish this, she can perform the following operation any number of times (possibly zero): Choose any element A[i] (1 le i le n) and either increment or decrement it by 1. Help Mila find out the minimum number of operations required to convert A into an ascending run array. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains an integer n (1 le n le 200) — the length of the array. The second line of each test case contains n integers A[1], A[2], ldots, A[n] (1 le A[i] le 10^5) — the elements of the array. -----Output----- For each test case, output the minimum number of operations required to convert the array into an ascending run array. -----Examples----- Input 3 4 1 3 2 4 5 1 2 3 5 4 3 2 2 2 Output 1 1 0 -----Note----- In the first test case, the array is [1, 3, 2, 4]. By incrementing the third element by 1, the array becomes [1, 3, 3, 4], which is an ascending run array with 1 operation. In the second test case, the array is [1, 2, 3, 5, 4]. By incrementing the fifth element by 1, the array becomes [1, 2, 3, 5, 5], which is an ascending run array with 1 operation. In the third test case, the array [2, 2, 2] is already an ascending run array, so no operations are required.","solution":"def min_operations_to_ascending_run(t, test_cases): results = [] for case in test_cases: n, A = case operations = 0 for i in range(1, n): if A[i] < A[i - 1]: operations += (A[i - 1] - A[i]) A[i] = A[i - 1] results.append(operations) return results def parse_input(input_data): lines = input_data.split(\'n\') t = int(lines[0].strip()) test_cases = [] index = 1 for _ in range(t): n = int(lines[index].strip()) A = list(map(int, lines[index + 1].strip().split())) test_cases.append((n, A)) index += 2 return t, test_cases"},{"question":"You are given a list of N integers, followed by Q queries. Each query can be of one of two types: 1. Update i v: This updates the ith element in the array to the value v. 2. Sum l r: This returns the sum of the elements from index l to index r (1-indexed). Write a program to handle these types of queries. -----Input----- The first line of the input contains two space-separated integers N and Q denoting the number of elements in the array and the number of queries, respectively. The next line contains N space-separated integers, representing the initial array. Each of the following Q lines describes a query in one of the formats described above. -----Output----- For each Sum query, output a single line containing the result of the sum for that query. -----Constraints----- - 1 ≤ N ≤ 100000 - 1 ≤ Q ≤ 100000 - 1 ≤ values in the array, v ≤ 1000 - 1 ≤ i ≤ N - 1 ≤ l ≤ r ≤ N -----Example----- Input: 5 3 1 2 3 4 5 Sum 1 3 Update 2 10 Sum 1 3 Output: 6 14 -----Explanation----- Initial array: [1, 2, 3, 4, 5] 1. The first query is \\"Sum 1 3\\": The sum of elements from index 1 to 3 is 1+2+3 = 6. 2. The second query is \\"Update 2 10\\": Update the second element to 10. The array becomes [1, 10, 3, 4, 5]. 3. The third query is \\"Sum 1 3\\": The sum of elements from index 1 to 3 is 1+10+3 = 14.","solution":"def process_queries(N, Q, array, queries): result = [] for query in queries: query_type, *params = query if query_type == \\"Sum\\": l, r = map(int, params) result.append(sum(array[l-1:r])) elif query_type == \\"Update\\": i, v = map(int, params) array[i-1] = v return result"},{"question":"The mythical creatures of Luria need your guidance. Each creature has a special gem with magical properties. You need to write a program that accepts the name of a creature in Luria and returns the gem it possesses. For example, for the creature `\\"Drake\\"` your program should return the solution `\\"Drake-Firestone\\"`. You must complete the following creature-gem pairs: - Drake-Firestone - Phoenix-Sunstone - Leviathan-Seastone - Griffin-Skycrystal - Unicorn-Dreamshard - Yeti-Icecrystal Return `\\"Unknown creature\\"` for invalid inputs.","solution":"def get_creature_gem(creature_name): Returns the corresponding gem for the given creature name. creature_gem_map = { \\"Drake\\": \\"Drake-Firestone\\", \\"Phoenix\\": \\"Phoenix-Sunstone\\", \\"Leviathan\\": \\"Leviathan-Seastone\\", \\"Griffin\\": \\"Griffin-Skycrystal\\", \\"Unicorn\\": \\"Unicorn-Dreamshard\\", \\"Yeti\\": \\"Yeti-Icecrystal\\" } return creature_gem_map.get(creature_name, \\"Unknown creature\\")"},{"question":"The kingdom of ByteLand has n towns connected by n-1 bidirectional roads forming a tree structure. Every town has a unique ID from 0 to n-1. A special node, called the capital, is identified by its ID 0. All other towns are directly or indirectly connected to the capital. The citizens of ByteLand want to know the distance of all towns from the capital. The distance between two towns is defined as the number of roads in the shortest path connecting the two towns. You are required to write a program that reads the connections of the roads and outputs the list of distances of each town from the capital town. ------Input------ - The first line contains a single integer T (1 ≤ T ≤ 10) representing the number of test cases. - For each test case, the first line contains a single integer n (2 ≤ n ≤ 10^5), the number of towns. - Each of the next n-1 lines contains two integers u and v (0 ≤ u, v < n) representing a road directly connecting town u and town v. ------Output------ - For each test case, output a single line containing n space-separated integers where the ith integer represents the distance of town i from the capital (town with ID 0). ------Example------ Input: 2 4 0 1 0 2 1 3 3 0 1 1 2 Output: 0 1 1 2 0 1 2","solution":"from collections import deque, defaultdict def distance_from_capital(num_cases, cases): results = [] for n, roads in cases: # Initialize the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # We use BFS to find the shortest path distances from the capital (node 0) distances = [-1] * n queue = deque([0]) distances[0] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if distances[neighbor] == -1: distances[neighbor] = distances[node] + 1 queue.append(neighbor) results.append(distances) return results # Example usage: num_cases = 2 cases = [ (4, [(0, 1), (0, 2), (1, 3)]), (3, [(0, 1), (1, 2)]) ] print(distance_from_capital(num_cases, cases)) # Expected output: [[0, 1, 1, 2], [0, 1, 2]]"},{"question":"A sequence of integers is called balanced if the sum of the integers in the first half is equal to the sum of the integers in the second half. For example, the sequence [1, 2, 3, 3, 2, 1] is balanced because 1 + 2 + 3 = 3 + 2 + 1. The length of the sequence is always even. You are given a sequence of integers of even length n. Your task is to determine the minimum number of changes required to make this sequence balanced. Changing a number means changing its value to any integer. You are asked to write a function that takes an integer t (number of test cases) and, for each test case, an integer array a of even length n. Your function should return a list of minimum number of changes required for each test case. -----Input----- - The first line contains an integer t (1 leq t leq 100) — the number of test cases. - The subsequent lines contain the descriptions of t test cases. - Each test case consists of: - An integer n (2 leq n leq 100; n is even), the length of the sequence. - A sequence of n integers a_1, a_2,...,a_n (1 leq a_i leq 100) -----Output----- For each test case, print a single integer — the minimum number of changes required to make the sequence balanced. -----Examples----- Input: 3 6 1 2 3 3 2 1 4 4 5 6 7 2 5 10 Output: 0 1 1 -----Note----- In the first example, the sequence [1, 2, 3, 3, 2, 1] is already balanced; hence no changes are needed. The result is 0. In the second example, changing the number 7 to 5 will make the sequence balanced: [4, 5, 6, 5]. The result is 1. In the third example, changing the number 10 to 5 will balance the sequence: [5, 5]. The result is 1.","solution":"def min_changes_to_balance(t, test_cases): results = [] for case in test_cases: n, arr = case left_sum = sum(arr[:n//2]) right_sum = sum(arr[n//2:]) if left_sum == right_sum: results.append(0) continue difference = abs(left_sum - right_sum) # To balance the array, we need at least one number to change results.append(1 if difference != 0 else 0) return results"},{"question":"You are given a zero-indexed array B of length M where each element represents the height of buildings. The goal is to determine how many buildings can see the sunset if the sun sets to the right. A building can see the sunset if there are no taller buildings to its right. Return the count of buildings that can see the sunset. Example 1: Input: B = [3, 7, 8, 3, 6, 1] Output: 3 Explanation: Building at index 2 (height 8) can see the sunset. Building at index 4 (height 6) can see the sunset. Building at index 5 (height 1) can see the sunset. Hence, 3 buildings can see the sunset. Note: M is an integer within the range [1, 100,000]. Each element of B is an integer within the range [1, 1,000,000].","solution":"def count_buildings_with_sunset_view(B): Returns the count of buildings that can see the sunset with the sun setting to the right. Parameters: B (List[int]): List of integers representing the heights of the buildings. Returns: int: Count of buildings that can see the sunset. count = 0 max_height = 0 for height in reversed(B): if height > max_height: count += 1 max_height = height return count"},{"question":"New Question: A password is generally considered strong if it satisfies the following criteria: 1. It has at least 6 characters and at most 20 characters. 2. It contains at least one lowercase letter, at least one uppercase letter, and at least one digit. 3. It does not contain three repeating characters in a row (like \\"aaa\\" or \\"111\\"). Given a string password, you are to implement a function that determines the minimum number of steps required to make the password strong. In one step, you can: - Insert one character to the password, - Delete one character from the password, or - Replace one character of the password with another character. Implement the function: ```python def strong_password(password: str) -> int: ``` You need to return an integer representing the minimum number of steps required to make the password strong. **Input:** - password (1 ≤ len(password) ≤ 50): a string consisting of only letters (both lowercase and uppercase) and digits. **Output:** - Return a single integer representing the minimum number of steps required to make the password strong. **Examples:** ```python print(strong_password(\\"aA1\\")) # Output: 3 print(strong_password(\\"aA1aaa\\")) # Output: 1 print(strong_password(\\"1111111111\\")) # Output: 3 ``` **Explanation:** - In the first example, the password is too short and lacks enough variety in character types. - In the second example, the password has three repeating characters in a row. - In the third example, the password lacks diversity in character types and also has repeating characters.","solution":"def strong_password(password: str) -> int: n = len(password) has_lower = any(c.islower() for c in password) has_upper = any(c.isupper() for c in password) has_digit = any(c.isdigit() for c in password) categories = has_lower + has_upper + has_digit replace = 0 one = 0 two = 0 i = 2 while i < n: if password[i] == password[i - 1] == password[i - 2]: length = 2 while i < n and password[i] == password[i - 1]: length += 1 i += 1 replace += length // 3 if length % 3 == 0: one += 1 elif length % 3 == 1: two += 1 else: i += 1 if n < 6: return max(6 - n, 3 - categories) elif n <= 20: return max(replace, 3 - categories) else: delete = n - 20 replace -= min(delete, one * 1) // 1 replace -= min(max(delete - one, 0), two * 2) // 2 replace -= max(delete - one - 2 * two, 0) // 3 return delete + max(replace, 3 - categories)"},{"question":"Given an array of N integers, where each integer is in the range [1, N], all elements appear once except one which appears twice. Find the element that appears twice without using extra space. Example 1: Input: [4, 3, 6, 5, 2, 4, 1] Output: 4 Explanation: 4 is the duplicated element in the array. Example 2: Input: [1, 3, 2, 3] Output: 3 Explanation: 3 is the duplicated element in the array. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findDuplicate() which takes the array of integers as input and returns the duplicated integer. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5","solution":"def findDuplicate(arr): Given an array of N integers where each integer is in the range [1, N], all elements appear once except one which appears twice. This function finds the element that appears twice without using extra space. for i in range(len(arr)): index = abs(arr[i]) - 1 if arr[index] < 0: return abs(arr[i]) arr[index] = -arr[index] return -1 # This should never be reached if the input guarantees a duplicate"},{"question":"You are given a sequence of n coins, each with a positive integer value. You need to find the maximum sum of a contiguous subarray with the constraint that no two values in this subarray are the same. For example, given coins with values: [4, 2, 4, 5, 6], the maximum sum of a contiguous subarray where all elements are unique is 17, which corresponds to the subarray [2, 4, 5, 6]. Write a function `maxUniqueSubarraySum(coins)` that takes a list of integers `coins` and returns the maximum sum of a contiguous subarray with all unique elements. # Input Format - A single list of integers `coins` (1 ≤ len(coins) ≤ 100,000) where each integer (1 ≤ coins[i] ≤ 10,000). # Output Format - An integer representing the maximum sum of a contiguous subarray with all unique elements. # Sample Input ```python coins = [4, 2, 4, 5, 6] ``` # Sample Output ```python 17 ``` # Explanation The subarray [2, 4, 5, 6] has unique elements and has the maximum sum 17 among all subarrays with unique elements.","solution":"def maxUniqueSubarraySum(coins): Returns the maximum sum of a contiguous subarray with all unique elements. seen = set() start = 0 max_sum = 0 current_sum = 0 for end, value in enumerate(coins): while value in seen: seen.remove(coins[start]) current_sum -= coins[start] start += 1 seen.add(value) current_sum += value max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an integer n, find the largest integer k such that k^3 ≤ n. Example 1: Input: n = 27 Output: 3 Explanation: Since, 27 is a perfect cube, its cube root is 3. Example 2: Input: n = 10 Output: 2 Explanation: Since, 10 is not a perfect cube, the largest integer whose cube is less than or equal to 10 is 2. Your Task: You don\'t need to read input or print anything. The task is to complete the function largestCubeRoot() which takes n as the input parameter and returns the largest integer whose cube is smaller than or equal to n. Note: Try solving the question without using the cbrt function. The value of n >= 0. Expected Time Complexity: O(log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^7","solution":"def largestCubeRoot(n): Finds the largest integer k such that k^3 ≤ n. if n == 0: return 0 low, high = 1, n while low <= high: mid = (low + high) // 2 if mid**3 <= n: low = mid + 1 else: high = mid - 1 return high"},{"question":"Given a string s and an integer k. You need to find out whether there exists a substring of length k that appears more than once in the string. Example 1: Input: s = \\"abcabc\\", k = 3 Output: True Explanation: The substring \\"abc\\" appears twice in the input string. Example 2: Input: s = \\"abcdef\\", k = 2 Output: False Explanation: No substring of length 2 appears more than once in the input string. Example 3: Input: s = \\"aaaaa\\", k = 1 Output: True Explanation: The substring \\"a\\" appears multiple times in the input string. Your Task: You do not need to read input or print anything. Your task is to complete the function hasDuplicateSubstring() which takes a string s and an integer k as input parameters and returns a boolean indicating whether there exists a substring of length k that appears more than once. Expected Time Complexity: O(n), where n is the length of the string. Expected Auxiliary Space: O(n) Constraints: 1 ≤ k ≤ |s| ≤ 10^5","solution":"def has_duplicate_substring(s, k): Returns true if there exists a substring of length k that appears more than once in string s. substring_set = set() for i in range(len(s) - k + 1): substring = s[i:i+k] if substring in substring_set: return True substring_set.add(substring) return False"},{"question":"To improve their algorithmic skills, students are often introduced to various sorting techniques. One such interesting variant is the \\"almost sorted array.\\" Given an array of n integers where all but one element is in non-decreasing order, the task is to sort the array using the minimum number of swaps between any two elements. You need to determine this minimum number of swaps. Input The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers — the elements of the array. It is guaranteed that the array is “almost sorted” as described above. Output Print a single integer denoting the minimum number of swaps required to sort the array. Examples Input 5 1 3 5 4 6 Output 1 Input 6 2 1 4 5 6 7 Output 1 Input 7 1 2 3 5 7 6 4 Output 2 Note In the first sample, swapping the elements 4 and 5 will sort the array. In the second sample, swapping the elements 2 and 1 will sort the array. In the third sample, you can swap elements 5 and 4 first, making the array [1, 2, 3, 4, 7, 6, 5], and then swap elements 7 and 5 to sort the array.","solution":"def minimum_swaps_to_sort(arr): Given an almost sorted array, returns the minimum number of swaps needed to sort the array. # Find the positions where the array is out of order. n = len(arr) wrong_positions = [] for i in range(n-1): if arr[i] > arr[i+1]: wrong_positions.append(i) wrong_positions.append(i+1) # If no wrong positions found, array is already sorted. if not wrong_positions: return 0 # Since it is almost sorted, wrong_positions should have at most 4 different indices. wrong_positions = list(set(wrong_positions)) # Remove duplicates # If more than 2 pairs of wrong positions are found, we need to make sure they are consecutive. if len(wrong_positions) == 2: # Only one swap needed return 1 elif len(wrong_positions) == 4: # Check if we can sort by one or two swaps i1, i2 = wrong_positions[0], wrong_positions[1] j1, j2 = wrong_positions[2], wrong_positions[3] if (arr[i1] <= arr[i2 + 1] and arr[j1] <= arr[j2 + 1]): return 1 else: return 2 else: # Default case return 2"},{"question":"Word Occurrences in Text A linguistics professor is interested in analyzing the frequency of word appearances in various texts. For the given task, each text is composed of a single line of words. The professor needs to determine how many times each word appears in the line. Write a program that for each input line, counts the occurrences of each word and prints the words along with their counts in alphabetical order. Input The input consists of multiple lines of text. Each line contains multiple words separated by spaces. Each word is an alphanumeric string (composed of lowercase letters and/or digits). There will be no punctuation or special characters in the input. The input ends with a single line containing the word \\"STOP\\". Output For each input line (except for the line containing \\"STOP\\"), output each word and its frequency, sorted alphabetically by the word. Each word and its count should be printed on a new line in the format \\"word: count\\". Sample Input the quick brown fox jumps over the lazy dog the quick brown dog STOP Output for the Sample Input brown: 1 fox: 1 quick: 1 the: 1 brown: 1 dog: 1 jumps: 1 lazy: 1 over: 1 the: 1 brown: 1 dog: 1 quick: 1 the: 1 Example Input the quick brown fox jumps over the lazy dog the quick brown dog STOP Output brown: 1 fox: 1 quick: 1 the: 1 brown: 1 dog: 1 jumps: 1 lazy: 1 over: 1 the: 1 brown: 1 dog: 1 quick: 1 the: 1","solution":"def word_occurrences(text_lines): For each input line, counts the occurrences of each word and prints the words along with their counts in alphabetical order. results = [] for line in text_lines: if line == \\"STOP\\": break word_count = {} words = line.split() for word in words: word_count[word] = word_count.get(word, 0) + 1 sorted_words = sorted(word_count.items()) for word, count in sorted_words: results.append(f\\"{word}: {count}\\") return results # Example usage: # text_lines = [ # \\"the quick brown fox\\", # \\"jumps over the lazy dog\\", # \\"the quick brown dog\\", # \\"STOP\\" # ] # print(\\"n\\".join(word_occurrences(text_lines)))"},{"question":"Alice and Bob are playing a game with a sequence of integers. The game consists of selecting a contiguous subarray from the sequence and calculating its sum. The player who picks the subarray with the higher sum wins the game. The twist is that Alice always plays first. You need to determine if Alice can guarantee a win regardless of what subarray Bob picks after her. If Alice can always guarantee a win, return \\"YES\\". Otherwise, return \\"NO\\". -----Input----- The first line contains an integer n (1 ≤ n ≤ 200) — the length of the sequence. The second line contains n integers a_1, a_2, ..., a_{n} (−10^4 ≤ a_i ≤ 10^4). -----Output----- Print \\"YES\\" if Alice can guarantee a win, otherwise print \\"NO\\". -----Examples----- Input 5 1 -2 3 4 -1 Output YES Input 4 -1 -1 -1 -1 Output NO Input 6 1 2 3 -1 -2 3 Output YES -----Note----- In the first example, Alice can select the subarray (3, 4) which sums to 7. No matter what Bob picks, his subarray sum cannot exceed 7. In the second example, all elements are negative, so any subarray Alice picks will not guarantee a win. In the third example, Alice can select the subarray (1, 2, 3) which sums to 6. Bob cannot pick a subarray with a sum higher than 6 afterwards, guaranteeing Alice\'s win.","solution":"def can_alice_guarantee_win(n, array): max_sum = float(\'-inf\') current_sum = 0 # Calculate the maximum subarray sum using Kadane\'s algorithm for num in array: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) # Check if Alice can guarantee a win for i in range(n): for j in range(i, n): if sum(array[i:j+1]) == max_sum: before_sum = sum(array[:i]) after_sum = sum(array[j+1:]) if before_sum < max_sum and after_sum < max_sum: return \\"YES\\" return \\"NO\\" # Example usage: n = 6 arr = [1, 2, 3, -1, -2, 3] print(can_alice_guarantee_win(n, arr)) # Output: YES"},{"question":"You were given a list of integers representing daily sales figures. Write a function `average_sales(sales)` that returns the average sales value. If the list is empty, return `0`.","solution":"def average_sales(sales): Returns the average sales value. If the list is empty, returns 0. if not sales: return 0 return sum(sales) / len(sales)"},{"question":"Given an integer n, return the number of different binary strings of length n that do not contain two consecutive 1s. A binary string consists only of the characters \'0\' and \'1\'. The binary string should not have the pattern \\"11\\" as a substring. Input A single integer n (1 ≤ n ≤ 1000) — the length of the binary string. Output In a single line print a single integer — the number of different binary strings of length n that do not contain two consecutive 1s. Since the result could be very large, return it modulo 1000000007 (10^9 + 7). Examples Input 3 Output 5 Note Let\'s analyze the first test case: - The valid binary strings of length 3 are: 000, 001, 010, 100, 101 - Invalid binary strings of length 3 are: 011, 110, 111 Thus, there are 5 valid binary strings of length 3.","solution":"def count_strings_without_consecutive_ones(n): Returns the number of binary strings of length n which do not contain two consecutive \'1\'s. The result is returned modulo 1000000007. MOD = 1000000007 if n == 1: return 2 # \\"0\\", \\"1\\" # Arrays to store the count of valid strings of length i a = [0] * (n + 1) b = [0] * (n + 1) a[1] = 1 # \\"1\\" b[1] = 1 # \\"0\\" for i in range(2, n + 1): a[i] = b[i - 1] % MOD b[i] = (a[i - 1] + b[i - 1]) % MOD return (a[n] + b[n]) % MOD"},{"question":"There is a long queue at the ticket counter where all the movie tickets are being sold. People are standing in a queue with distinct ticket prices assigned to each person in sequential order starting from 1. The people selling the tickets often print a list of prices and mark each price as available or sold out. A person in the queue wants to know the highest priced ticket they can buy that is still available. Input First line contains integer T denoting number of test cases. For each test case: - The first line contains an integer N denoting the maximum ticket price available (i.e., tickets are priced from 1 to N). - The second line contains N integers, where the i-th integer is 1 if the ticket of price (i+1) has been sold, and 0 otherwise. Output For each test case, print the highest priced ticket that is still available. If no tickets are available, print \\"NO TICKETS\\". Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^6 SAMPLE INPUT 2 5 1 0 1 0 1 4 1 1 1 1 SAMPLE OUTPUT 4 NO TICKETS Explanation In the first case, the ticket prices are from 1 to 5, with tickets 1 and 3 being sold. The highest price available is 4. In the second case, all tickets from 1 to 4 are sold, so there are no tickets available.","solution":"def highest_available_ticket(pricelist): Returns the highest available ticket price which is still available or \\"NO TICKETS\\" n = len(pricelist) for i in range(n-1, -1, -1): if pricelist[i] == 0: return i + 1 return \\"NO TICKETS\\" def main(input_data): Parses the input data, runs the solution for each test case, and returns the results. result = [] input_lines = input_data.split(\'n\') T = int(input_lines[0]) index = 1 for _ in range(T): N = int(input_lines[index]) pricelist = list(map(int, input_lines[index+1].split())) result.append(highest_available_ticket(pricelist)) index += 2 return result"},{"question":"Lina is a gardener and she has n unique plants, each requiring a specific amount of water every week. Recently, she bought some m water containers, each able to hold a specific amount of water. To keep the plants healthy, Lina needs to distribute the water containers to the plants so that each plant receives exactly the amount of water it requires. Can you help Lina determine if it\'s possible to distribute the water containers to meet the plants\' requirements? Input The first line of the input will consist of n and m, the number of plants and the number of water containers respectively. The second line will consist of n space-separated integers ri, the required amount of water for each plant. The third line consists of m space-separated integers wi, the capacity of each water container. Output: Output \\"Yes\\" if it\'s possible to distribute the water containers such that each plant gets exactly the amount of water it needs. If it\'s not possible, output \\"No\\". Constraints: 1 ≤ n, m ≤ 10^5 1 ≤ ri, wi ≤ 10^5 SAMPLE INPUT 3 3 5 10 15 10 15 5 SAMPLE OUTPUT Yes Explanation By giving the water container with capacity 5 to the first plant, the container with capacity 10 to the second plant and the container with capacity 15 to the third plant, each plant receives exactly the amount of water it needs. Hence, the output is Yes.","solution":"def can_distribute_water(n, m, plants, containers): Determines if it\'s possible to distribute the water containers to meet the plants\' requirements. :param n: Number of plants :param m: Number of water containers :param plants: List of required amounts of water for each plant :param containers: List of water container capacities :return: \\"Yes\\" if possible to distribute containers to meet plants\' requirements, otherwise \\"No\\" plants.sort() containers.sort() for i in range(n): if not containers or containers[-1] < plants[-1]: return \\"No\\" containers.pop() plants.pop() return \\"Yes\\""},{"question":"In a dense forest, there is a grid of square cells, each cell representing a portion of the forest. Some of these cells contain trees (marked with `1`), and some are empty (marked with `0`). A tree cluster is defined as a group of connected `1`s, where two `1`s are considered \\"connected\\" if they are adjacent horizontally or vertically (not diagonally). The challenge is to find the number of tree clusters in the grid. -----Input----- The input consists of the following: 1. An integer n (1 leq n leq 100), denoting the number of rows in the grid. 2. An integer m (1 leq m leq 100), denoting the number of columns in the grid. 3. `n` lines of input, each containing `m` integers (either `0` or `1`), separated by space(s), representing the grid. -----Output----- Display a single integer representing the number of tree clusters in the grid. -----Examples----- Sample Input 1: 4 4 1 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 Sample Output 1: 3 Sample Input 2: 3 3 1 0 0 0 1 0 0 0 1 Sample Output 2: 3","solution":"def find_tree_clusters(grid): Returns the number of tree clusters in the given grid. Parameters: grid (list of list of int): 2D grid representing the forest. Returns: int: Number of tree clusters. def dfs(x, y): # If out of bounds or already visited or empty cell, return if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 0: return # Mark the cell as visited by setting it to 0 grid[x][y] = 0 # Explore all four possible directions directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: dfs(x + dx, y + dy) if not grid: return 0 n = len(grid) m = len(grid[0]) clusters = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: clusters += 1 dfs(i, j) return clusters # Helper function to run when taking the input in the appropriate format def find_tree_clusters_from_input(n, m, grid_input): grid = [list(map(int, row.split())) for row in grid_input] return find_tree_clusters(grid)"},{"question":"Draco wants to organize a new game for his friends during a party. He has a large circular table with N seats arranged sequentially in a circle. Each seat has a number from 1 to N written on it. Draco knows that his friends will arrive at the table one by one and sit in the seats. To make the game more interesting, Draco decides to give each friend a unique ID ranging from 1 to N when they arrive. He wants to assign an ID to each friend in such a way that the sum of the distances between consecutive friends (considering the circular arrangement) is minimized. The distance between two seats i and j is defined as the minimum of the absolute difference between i and j and N minus the absolute difference between i and j (since the table is circular). Draco needs your help to determine the minimum distance sum after all friends have arrived. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains an integer N, the number of seats around the table. Output For each test case, output the minimum distance sum. Constraints 1 ≤ T ≤ 100 2 ≤ N ≤ 10^9 SAMPLE INPUT 4 3 4 5 6 SAMPLE OUTPUT 2 4 5 9 Explanation For the 2nd test case (N=4), the optimal arrangement for IDs to minimize the distance sum is 1-3-2-4: - Distance between seat 1 and seat 3 is 2 (minimum between |1-3| and 4-|1-3|). - Distance between seat 3 and seat 2 is 1 (minimum between |3-2| and 4-|3-2|). - Distance between seat 2 and seat 4 is 2 (minimum between |2-4| and 4-|2-4|). - Distance between seat 4 and seat 1 is 1 (minimum between |4-1| and 4-|4-1|). Thus, the total minimum distance sum is 2 + 1 + 2 + 1 = 6. For the 4th test case (N=6), one of the optimal arrangements for IDs is 1-4-2-5-3-6: - Distance sum calculation similarly minimizes the total distance considering the circular nature.","solution":"def minimum_distance_sum(T, test_cases): Returns the minimum distance sum for each test case. Args: T: Number of test cases. test_cases: List of integers where each integer represents N, the number of seats. Returns: List of integers representing the minimum distance sum for each test case. results = [] for N in test_cases: if N % 2 == 0: # When N is even, the minimum distance sum can be derived directly. result = N * (N // 2) else: # When N is odd, the minimum distance sum can be derived directly. result = N * (N // 2) results.append(result) return results"},{"question":"**Problem** Fish restaurants in Atlantis are planning to synchronize their meal preparation schedules in order to optimize the delivery of fresh fish from the ports. Each restaurant has a preferred time window during which they want their fish delivered, and each port has a specific capacity on how many stores they can serve. Given the number of restaurants `r` and the number of ports `p`, along with the preferred time windows for each restaurant and the capacities of each port, determine if it is possible to schedule all deliveries such that no restaurant gets fish outside its preferred time window and no port exceeds its delivery capacity at any time. Constraints The input satisfies the following conditions: * 1 ≤ r ≤ 100 * 1 ≤ p ≤ 10 * 0 ≤ start_i, end_i ≤ 1440 (time in minutes, representing the range from 00:00 to 24:00) * 1 ≤ capacity_i ≤ 100 Input The input is given in the following format: r p start_0 end_0 ... start_{r-1} end_{r-1} capacity_0 ... capacity_{p-1} All inputs are given as integers. On the first line, the number of restaurants `r` and the number of ports `p` are given, separated by blanks. From the second line to the (r+1)-th line, the preferred time windows (start_i, end_i) for each restaurant are given, separated by blanks. From the (r+2)-th line to the (r+p+1)-th line, the capacities for each port are given. Output Output \\"Yes\\" if it is possible to schedule all deliveries such that no restaurant gets fish outside its preferred time window and no port exceeds its delivery capacity at any time. Output \\"No\\" otherwise. Examples Input ``` 3 2 300 600 700 1000 1200 1300 2 1 ``` Output ``` Yes ``` Input ``` 4 1 0 240 500 750 900 1100 1300 1400 1 ``` Output ``` No ```","solution":"def can_schedule_deliveries(r, p, time_windows, capacities): Determines if it is possible to schedule all deliveries such that no restaurant gets fish outside its preferred time window and no port exceeds its delivery capacity at any time. :param r: Number of restaurants :param p: Number of ports :param time_windows: List of tuple (start, end) representing preferred time windows for each restaurant :param capacities: List of integers representing capacity of each port :return: \\"Yes\\" if possible to schedule, otherwise \\"No\\" # Sort time windows based on the end time time_windows.sort(key=lambda x: x[1]) # Sort capacities in decreasing order capacities.sort(reverse=True) for start, end in time_windows: delivery_done = False for idx in range(len(capacities)): if capacities[idx] > 0: delivery_done = True capacities[idx] -= 1 break if not delivery_done: return \\"No\\" return \\"Yes\\""},{"question":"A shipment company has N containers at a port, where each container has a positive integer indicating its weight. The containers need to be exported in waves of ships where each ship can carry containers whose total weights sum up to a specified maximum capacity K. The task is to determine the number of ships needed to export all the containers if each ship carries the maximum possible weight without exceeding K in each wave. Given the weights of N containers and the maximum capacity K for each ship, print the minimum number of ships required to export all the containers. Input Format The first line contains two space-separated integers N and K, where N is the number of containers and K is the maximum capacity of each ship. The next line contains N space-separated integers W(0), W(1), W(2),..... W(N-1) representing the weights of the containers. Output Format Print a single integer, the minimum number of ships required. Constraints 1 ≤ N ≤ 1000 1 ≤ K ≤ 1000 1 ≤ W(i) ≤ 1000 SAMPLE INPUT 6 10 9 2 7 4 3 8 SAMPLE OUTPUT 4 Explanation The optimal way to carry the containers would be in the following manner: - Ship 1: 8 + 2 = 10 (maximum capacity) - Ship 2: 9 (single container) - Ship 3: 7 + 3 = 10 (maximum capacity) - Ship 4: 4","solution":"def min_ships_needed(container_weights, max_capacity): Returns the minimum number of ships needed to export all the containers. Each ship carries the maximum possible weight without exceeding the specified capacity. # Sort the container weights in descending order container_weights.sort(reverse=True) # Initialize variables ships = 0 left = 0 right = len(container_weights) - 1 while left <= right: if container_weights[left] + container_weights[right] <= max_capacity: right -= 1 left += 1 ships += 1 return ships # Input: N (number of containers), K (max capacity of each ship), and weights of containers N = 6 K = 10 container_weights = [9, 2, 7, 4, 3, 8] # Output: Minimum number of ships required print(min_ships_needed(container_weights, K)) # Expected output: 4"},{"question":"problem You are given an integer array representing the heights of students in a line. The task is to group the students into pairs such that the absolute difference in heights between the paired students is minimized, and output the total absolute difference for all pairs. Each student must be paired exactly once, and the array will always contain an even number of elements. For example, consider the array [10, 7, 5, 20]. One possible optimal pairing is (7, 5) and (10, 20). The absolute height differences for the pairs are |7 - 5| = 2 and |10 - 20| = 10. Therefore, the total absolute difference is 2 + 10 = 12. Input - The first line contains an integer N (2 ≤ N ≤ 100), indicating the number of students (always even). - The second line contains N space-separated integers representing the heights of the students. Output - Print a single integer representing the total absolute difference for all optimal pairs. Example Input 4 10 7 5 20 Output 12","solution":"def min_total_absolute_difference(n, heights): Returns the minimum total absolute difference for paired students\' heights. :param n: integer, number of students :param heights: list of integers, heights of the students :return: integer, total absolute difference for all optimal pairs heights.sort() total_diff = 0 for i in range(1, n, 2): total_diff += abs(heights[i] - heights[i-1]) return total_diff"},{"question":"Bob is an avid photographer. He likes taking photos of skylines. He takes a series of photos from different locations, each photo being characterized by a certain height. After he has taken a photo at a given location, he might return to that same location to take another photo, but only if the height has changed since the last photo taken at that location. Bob now wants to analyze his photos and calculate the total height difference between consecutive skyline photos in the order they were taken. Since this difference can become very large, you are expected to provide the answer modulo 10^9+7. Input Format: - The first line contains an integer T, the number of test cases. - Each test case starts with an integer N, the number of photo points Bob has ventured. The next line contains N integers representing the heights of the skyline photos in the order they were taken. Output Format: For each test case, output a single integer representing the total height difference between consecutive skyline photos modulo 10^9+7. Constraints: 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 1 ≤ height ≤ 10^9 SAMPLE INPUT 2 3 1 2 3 4 1 2 2 3 SAMPLE OUTPUT 2 2 Explanation Case 1: The total height difference is |2-1| + |3-2| = 1 + 1 = 2. Case 2: The total height difference is |2-1| + |3-2| = 1 + 1 = 2. The duplicate height at the same location is ignored.","solution":"def calculate_total_height_difference(test_cases): MODULO = 10**9 + 7 results = [] for heights in test_cases: total_difference = 0 previous_height = heights[0] for current_height in heights[1:]: if current_height != previous_height: total_difference += abs(current_height - previous_height) previous_height = current_height results.append(total_difference % MODULO) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) heights = list(map(int, lines[index + 1].split())) test_cases.append(heights) index += 2 return test_cases def main(input_string): test_cases = parse_input(input_string) results = calculate_total_height_difference(test_cases) return results"},{"question":"# Task: You are given the coordinates of three points in a plane. Your job is to determine whether these points form a right triangle. The points will be provided as tuples of integers. The method is called `is_right_triangle` or `TriangleChecker.isRightTriangle` and takes in three tuples `(x1, y1), (x2, y2), (x3, y3)` that represent the points\' coordinates. To determine if the points form a right triangle: 1. Calculate the squared lengths of the sides formed by these points. 2. Check if the sum of the squares of any two sides equals the square of the third (Pythagorean theorem). Return `True` if the points form a right triangle, otherwise return `False`. # Examples: ```python is_right_triangle((0, 0), (3, 4), (3, 0)) => True ``` > __CALCULATION__: Side1: (0, 0) to (3, 4) => √(3^2 + 4^2) = 5 Side2: (0, 0) to (3, 0) => √(3^2 + 0^2) = 3 Side3: (3, 0) to (3, 4) => √(0^2 + 4^2) = 4 Check: 3^2 + 4^2 = 5^2 => True ```python is_right_triangle((1, 2), (3, 8), (5, 2)) => False ``` > __CALCULATION__: Side1: (1, 2) to (3, 8) => √((3-1)^2 + (8-2)^2) = √(4 + 36) = √40 Side2: (1, 2) to (5, 2) => √((5-1)^2 + (2-2)^2) = √(16 + 0) = 4 Side3: (3, 8) to (5, 2) => √((5-3)^2 + (2-8)^2) = √(4 + 36) = √40 Check: Sum of the squares of any two sides does not equal the square of the third => False # Notes: - The given points will not be in a straight line. - Order of points does not affect the result.","solution":"import math def is_right_triangle(p1, p2, p3): def dist_squared(a, b): return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2 sides = [ dist_squared(p1, p2), dist_squared(p2, p3), dist_squared(p1, p3) ] sides.sort() return sides[0] + sides[1] == sides[2]"},{"question":"You are given a grid with N rows and M columns. Each cell in this grid contains a positive integer. Your task is to handle several operations and queries related to this grid: 1. Modify the value of a specific cell in the grid. 2. Compute the maximum value within a sub-grid. 3. Check if all values in a particular row are even. Specifically, you will receive Q queries, each query can be of one of the following types: - [1 X Y V] Set the value of the cell at position (X, Y) to V. - [2 X1 Y1 X2 Y2] Find the maximum value within the sub-grid defined by the corners (X1, Y1) and (X2, Y2). - [3 X] Check if every value in the X-th row is even. Return \\"Yes\\" if all values are even, otherwise return \\"No\\". # Input: - The first line contains three integers N, M, and Q — the number of rows, columns, and the number of queries, respectively. - The next N lines each contain M integers, representing the initial values of the grid. - The following Q lines contain the queries in the format described above. # Output: - For each query of the second type, print the maximum value in the specified sub-grid. - For each query of the third type, print \\"Yes\\" or \\"No\\". # Constraints: - 1 ≤ N, M ≤ 500 - 1 ≤ Q ≤ 10^4 - 1 ≤ Values in the grid ≤ 10^5 # Example: Input: 4 4 5 10 20 30 40 15 25 35 45 50 60 70 80 12 22 32 42 2 1 1 3 3 1 2 2 99 2 1 1 3 3 3 4 3 2 Output: 70 99 Yes No # Explanation: After processing the queries: 1. The maximum value within the sub-grid from (1, 1) to (3, 3) is 70. 2. After setting the value of the cell at (2, 2) to 99, the maximum value within the sub-grid from (1, 1) to (3, 3) is now 99. 3. For the 4th row (12, 22, 32, 42), all values are even, hence, \\"Yes\\". 4. For the 2nd row (15, 99, 35, 45), not all values are even, hence, \\"No\\".","solution":"def process_queries(n, m, q, grid, queries): results = [] for query in queries: if query[0] == 1: _, x, y, v = query grid[x-1][y-1] = v elif query[0] == 2: _, x1, y1, x2, y2 = query max_val = -1 for i in range(x1-1, x2): for j in range(y1-1, y2): if grid[i][j] > max_val: max_val = grid[i][j] results.append(max_val) elif query[0] == 3: _, x = query all_even = all(value % 2 == 0 for value in grid[x-1]) if all_even: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given an integer array, find the second largest element in the array. Example: Input: N = 6 arr[] = {12, 35, 1, 10, 34, 1} Output: 34 Your Task: You don\'t need to read input or print anything. Your task is to complete the function secondLargest() which takes the array arr[] and its size N as inputs and returns the second largest element in the array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 1000 0 <= arr[i] <= 10^9","solution":"def secondLargest(arr, N): Returns the second largest element in the array arr of size N. If such an element does not exist, returns None. if N < 2: return None first, second = float(\'-inf\'), float(\'-inf\') for num in arr: if num > first: first, second = num, first elif first > num > second: second = num return second if second != float(\'-inf\') else None"},{"question":"Write a function to check if two given strings are isomorphic. Two strings str1 and str2 are called isomorphic if there is a one-to-one correspondence between every character of str1 to every character of str2 while preserving the order of characters. Your task is to implement a function `areIsomorphic(str1, str2)` that checks if the two input strings are isomorphic. ------ Input Format ------ The first line contains an integer T, the number of test cases. Each of the next T lines contains two space-separated strings str1 and str2. ------ Output Format ------ For each test case, output \\"Yes\\" if the strings are isomorphic, otherwise output \\"No\\". ------ Constraints ------ 1. 1 ≤ T ≤ 1000 2. 1 ≤ length of str1, str2 ≤ 100 3. Both str1 and str2 consist of lowercase English letters. ------ Sample Input ------ 3 egg add foo bar paper title ------ Sample Output ------ Yes No Yes ------ Explanation ------ In the first case, \'e\' -> \'a\', \'g\' -> \'d\'. Thus, the strings \\"egg\\" and \\"add\\" are isomorphic. In the second case, \'f\' maps to \'b\', but \'o\' maps to both \'a\' and \'r\'. Thus, \\"foo\\" and \\"bar\\" are not isomorphic. In the third case, \'p\' maps to \'t\', \'a\' maps to \'i\', \'e\' maps to \'l\', and \'r\' maps to \'e\'. Thus, \\"paper\\" and \\"title\\" are isomorphic. Implement the function `areIsomorphic(str1, str2)` to check if the given strings are isomorphic.","solution":"def areIsomorphic(str1, str2): Check if two strings are isomorphic. if len(str1) != len(str2): return \\"No\\" mapping_str1_to_str2 = {} mapping_str2_to_str1 = {} for char1, char2 in zip(str1, str2): if char1 not in mapping_str1_to_str2 and char2 not in mapping_str2_to_str1: # If both characters are not yet mapped, map them mapping_str1_to_str2[char1] = char2 mapping_str2_to_str1[char2] = char1 elif mapping_str1_to_str2.get(char1) != char2 or mapping_str2_to_str1.get(char2) != char1: # Already existent mapping does not match return \\"No\\" return \\"Yes\\" def process_test_cases(test_cases): results = [] for str1, str2 in test_cases: results.append(areIsomorphic(str1, str2)) return results"},{"question":"Write a function to find the longest subarray with an equal number of 0s and 1s in a binary array. Example 1: Input: arr = [0, 1, 0] Output: 2 Explanation: The longest subarray with equal number of 0s and 1s is [0, 1] which has length 2. Example 2: Input: arr = [0, 0, 1, 0, 0, 1, 1] Output: 6 Explanation: The longest subarray with equal number of 0s and 1s is [0, 0, 1, 0, 0, 1], which has length 6. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findMaxLength() which takes a list of integers (only 0s and 1s) and returns an integer representing the length of the longest subarray with an equal number of 0s and 1s. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ arr.length ≤ 10^5 arr[i] is either 0 or 1","solution":"def findMaxLength(arr): Finds the length of the longest subarray with an equal number of 0s and 1s. # Dictionary to store the first occurrence of each cumulative sum first_occurrence = {} curr_sum = 0 max_len = 0 for i in range(len(arr)): # Replace 0 with -1 to treat the problem similar to finding subarrays with sum 0 if arr[i] == 0: curr_sum += -1 else: curr_sum += 1 if curr_sum == 0: max_len = i + 1 elif curr_sum in first_occurrence: max_len = max(max_len, i - first_occurrence[curr_sum]) else: first_occurrence[curr_sum] = i return max_len"},{"question":"A software company is developing a shipping algorithm for its new e-commerce platform. They need to determine whether a given set of incoming packages can fit into a set of available boxes for shipping, while ensuring that each package fits completely within a box, and the sides of the package are parallel to the sides of the box. You are given a certain number of boxes and packages with different dimensions (all rectangular). Your task is to determine if each package can be fitted into any one of the available boxes. You can rotate the packages, but they must be placed such that the sides of the package are parallel to the sides of the box. Input: First line of the input contains an integer T denoting the number of test cases, which is followed by T sets of inputs. Each set of inputs contains two integers N and M, denoting the number of boxes and the number of packages respectively. Each of the next N lines contains two space-separated integers representing the length and width of a box. Each of the following M lines contains two space-separated integers representing the length and width of a package. Output: For each test case, output \\"Possible\\" if all packages can be fitted into the boxes, otherwise print \\"Not Possible\\". Constraints: 1 ≤ T ≤ 500 1 ≤ N, M ≤ 1,000 1 ≤ box length, box width, package length, package width ≤ 1,000 SAMPLE INPUT 2 3 2 4 6 5 5 8 3 2 3 3 8 2 2 1 1 2 1 SAMPLE OUTPUT Possible Not Possible Explanation: Sample Test Case #1: Package 2x3 can fit into Box 4x6 and Package 3x8 can fit into Box 5x5, making it \\"Possible\\". Sample Test Case #2: Package 1x1 can fit into either Box 2x2 or 2x1, but Package 2x1 cannot fit into any box, making it \\"Not Possible\\".","solution":"def can_fit_packages(T, test_cases): results = [] for i in range(T): N, M, boxes, packages = test_cases[i] boxes = sorted(boxes, key=lambda x: (max(x), min(x))) possible = True for package in packages: length, width = package fit = False for box in boxes: box_length, box_width = box if (length <= box_length and width <= box_width) or (length <= box_width and width <= box_length): fit = True break if not fit: possible = False break if possible: results.append(\\"Possible\\") else: results.append(\\"Not Possible\\") return results # Example usage: T = 2 test_cases = [ (3, 2, [(4, 6), (5, 5), (8, 3)], [(2, 3), (3, 8)]), (2, 3, [(2, 2), (1, 1)], [(2, 1), (2, 3), (1, 2)]) ] print(can_fit_packages(T, test_cases)) # Output: [\'Possible\', \'Not Possible\']"},{"question":"Let\'s create an adventure You are designing a game where a player can traverse through a series of connected rooms. Each room has a unique identifier. The rooms are connected through one-way paths, meaning you can only move from one room to the next in a specified direction. Your task is to determine if there is a path between two given rooms. You are provided with: 1. A list of tuples where each tuple represents a one-way path from one room to another. For example, `(room1, room2)` means you can move from `room1` to `room2`. 2. Two room identifiers, `start_room` and `end_room`, and you need to determine if there exists a path from `start_room` to `end_room`. Your task is to write a function `can_traverse` that takes the list of paths and the two room identifiers as inputs and returns a boolean indicating whether a path exists from `start_room` to `end_room`. # Examples Python ```python >>> can_traverse([(1, 2), (2, 3), (4, 5)], 1, 3) True >>> can_traverse([(1, 2), (2, 3), (4, 5)], 1, 5) False ``` # Assumptions 1. You can assume that the room identifiers are unique 2. There are no cycles in the paths (i.e., no room can be reached from itself through a series of moves) 3. The input list of tuples representing the paths is non-empty.","solution":"def can_traverse(paths, start_room, end_room): Determines if there is a path from start_room to end_room. Parameters: paths (list of tuples): A list of tuples where each tuple represents a one-way path from one room to another. start_room: The room identifier to start from. end_room: The room identifier to reach. Returns: bool: True if there is a path from start_room to end_room, False otherwise. from collections import defaultdict # Create adjacency list adjacency_list = defaultdict(list) for (src, dest) in paths: adjacency_list[src].append(dest) # Depth-First Search (DFS) to check for path def dfs(current, target, visited): if current == target: return True visited.add(current) for neighbor in adjacency_list[current]: if neighbor not in visited: if dfs(neighbor, target, visited): return True return False return dfs(start_room, end_room, set())"},{"question":"Write a function called `find_min_cost` that takes three parameters: an integer `n` representing the number of cities, a 2D list `costs` where `costs[i][j]` is the cost of flying from city `i` to city `j`, and a list of integers `route` which is a sequence of cities to visit in order. The function should return the minimum total cost to travel according to the provided route. If it\'s not possible to travel directly between two consecutive cities in the route, return -1. Example 1: Input: n = 4, costs = [[0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0]], route = [0, 1, 3, 2] Output: 65 Explanation: The cost to travel from city 0 to 1 is 10, from city 1 to 3 is 25, and from city 3 to 2 is 30. Total cost is 10 + 25 + 30 = 65. Example 2: Input: n = 3, costs = [[0, 10, -1], [10, 0, 5], [-1, 5, 0]], route = [0, 2] Output: -1 Explanation: There is no direct flight from city 0 to city 2, hence the result is -1. Example 3: Input: n = 5, costs = [[0, 12, 8, -1, 15], [12, 0, -1, 14, 7], [8, -1, 0, 10, 20], [-1, 14, 10, 0, 18], [15, 7, 20, 18, 0]], route = [2, 4, 1] Output: 27 Explanation: The cost to travel from city 2 to 4 is 20, and from city 4 to 1 is 7. Total cost is 20 + 7 = 27. Constraints: 1 <= n <= 100 costs.length == n costs[i].length == n All costs are integers between -1 and 10^4 route is a list of integers with length from 2 to n. route lists valid cities indices from 0 to n-1.","solution":"def find_min_cost(n, costs, route): total_cost = 0 for i in range(len(route) - 1): from_city = route[i] to_city = route[i+1] cost = costs[from_city][to_city] if cost == -1: return -1 total_cost += cost return total_cost"},{"question":"You are given a string `S` consisting of lowercase English letters. Your task is to determine if `S` can become a palindrome after removing exactly one character. Print `YES` if it\'s possible, otherwise print `NO`. Constraints * 2 leq |S| leq 1000 * S consists of lowercase English letters. Input Input is given from Standard Input in the following format: S Output Print `YES` if it\'s possible to make `S` a palindrome by removing exactly one character, otherwise print `NO`. Examples Input abca Output YES Input racecar Output YES Input abcde Output NO","solution":"def can_become_palindrome(S): Determines if the string S can become a palindrome by removing exactly one character. Args: S (str): The input string. Returns: str: \'YES\' if it is possible, otherwise \'NO\'. def is_palindrome(s): return s == s[::-1] n = len(S) for i in range(n): if is_palindrome(S[:i] + S[i+1:]): return \'YES\' return \'NO\'"},{"question":"You are managing a team of software engineers working on multiple projects. Each project has a deadline and a certain number of working hours required to complete it. You need to assign each engineer exactly one project such that each project can be completed before its deadline if possible. Your task is to find an assignment of projects to engineers that maximizes the number of projects that can be completed on time. If it is not possible to assign all projects such that they are completed on time, still try to maximize the number of projects completed. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers E and P where E is the number of engineers and P is the number of projects. - The next P lines contain two space-separated integers H_i and D_i where H_i is the number of hours required to complete the i-th project and D_i is the deadline in hours for the i-th project after which the project cannot be completed on time. -----Output----- For each test case, print a single integer — the maximum number of projects that can be completed before their deadlines. -----Constraints----- - 1 le T le 100 - 1 le E le 10^5 - 1 le P le 10^5 - 1 le H_i le 10^4 - 1 le D_i le 10^6 - The sum of E + P over all test cases does not exceed 10^6 -----Example Input----- 2 3 3 4 10 3 5 2 7 4 3 2 9 1 8 3 5 -----Example Output----- 3 3 (Note: In the first test case, each engineer can complete one project and all projects fall within their respective deadlines. In the second test case, all projects can be assigned to engineers and still be completed before their deadlines.)","solution":"def maximize_projects(test_cases): results = [] for E, P, projects in test_cases: projects.sort(key=lambda x: (x[1], x[0])) # Sort by deadline, then by hours required project_count = 0 available_engineers = E for hours, deadline in projects: if available_engineers > 0 and hours <= deadline: available_engineers -= 1 project_count += 1 results.append(project_count) return results # Function to parse input and invoke the solution def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): E, P = map(int, lines[idx].split()) projects = [] idx += 1 for _ in range(P): H, D = map(int, lines[idx].split()) projects.append((H, D)) idx += 1 test_cases.append((E, P, projects)) return maximize_projects(test_cases)"},{"question":"In a computer network, various devices communicate with each other using IP addresses. However, due to limited IP address space, these IP addresses are often allocated dynamically using DHCP (Dynamic Host Configuration Protocol). When a device is connected to a network, it must request an IP address from a DHCP server, which in turn allocates an available IP address for a specific lease period. Your task is to implement a simple DHCP server simulator that can handle IP address requests from multiple devices, renew leased IPs, and release IPs when they are no longer needed. The DHCP server will have a predefined pool of IP addresses to allocate. # Requirements 1. Implement the class `DHCPServer` with the following methods: - `request_ip(device_id: str) -> str`: Allocates an available IP address to the device identified by `device_id`. If an address is already allocated to the device, it returns the current IP address. If no IP is available, return `None`. - `release_ip(device_id: str) -> bool`: Releases the IP address allocated to the device identified by `device_id`. Returns `True` if the IP was successfully released, `False` if the device had no allocated IP. - `renew_ip(device_id: str) -> bool`: Renews the lease for the IP address allocated to the device identified by `device_id`. Returns `True` if the IP was successfully renewed, `False` if the device had no allocated IP. # Example Usage ```python dhcp = DHCPServer(ip_pool=[\'192.168.1.1\', \'192.168.1.2\', \'192.168.1.3\']) # Request IP for \'device1\' print(dhcp.request_ip(\'device1\')) # Output: \'192.168.1.1\' # Request IP for \'device2\' print(dhcp.request_ip(\'device2\')) # Output: \'192.168.1.2\' # Release IP for \'device1\' print(dhcp.release_ip(\'device1\')) # Output: True # Renew IP for \'device2\' print(dhcp.renew_ip(\'device2\')) # Output: True # Request IP for \'device3\' print(dhcp.request_ip(\'device3\')) # Output: \'192.168.1.3\' # Request IP for \'device1\' again (after release) print(dhcp.request_ip(\'device1\')) # Output: \'192.168.1.1\' # Release IP for \'device4\' (which never had an IP) print(dhcp.release_ip(\'device4\')) # Output: False # Request IP for \'device4\' when no IPs are available print(dhcp.request_ip(\'device4\')) # Output: None ``` **Note:** In this simplified simulation, assume the following: - The IP addresses are statically defined in a pool and are not reused. - No lease expiration is considered, i.e., as long as a device has an IP allocated or renewed, it remains leased until explicitly released. - Focus on the allocation logic and do not worry about the actual underlying network communication. Implement the `DHCPServer` class according to the given specifications.","solution":"class DHCPServer: def __init__(self, ip_pool): self.ip_pool = ip_pool # Initial pool of IP addresses self.allocated_ips = {} # Dictionary to keep track of device-IP allocation def request_ip(self, device_id): # If device already has an allocated IP, return it if device_id in self.allocated_ips: return self.allocated_ips[device_id] # If there is an available IP address in pool, allocate it to device for ip in self.ip_pool: if ip not in self.allocated_ips.values(): self.allocated_ips[device_id] = ip return ip # No available IP addresses return None def release_ip(self, device_id): if device_id in self.allocated_ips: del self.allocated_ips[device_id] return True return False def renew_ip(self, device_id): return device_id in self.allocated_ips"},{"question":"Your task is to write a program that takes a list of positive integers and determines if there exists a subset of the list whose sum is equal to a given integer K. If such a subset exists, you should return any one of the possible subsets. If no such subset exists, return an empty list. -----Input----- The first line of the input contains two integers N and K (1 ≤ N ≤ 200, 1 ≤ K ≤ 10^5). The second line contains N positive integers separated by spaces representing the elements of the list. Each of these integers is at most 10^3. -----Output----- If there is a subset of the list whose sum is equal to K, output a single line containing the integers in the subset separated by spaces. If there is no such subset, output an empty line. -----Examples----- Input 5 9 3 34 4 12 5 Output 3 4 2 Input 3 11 1 2 3 Output empty line Input 5 15 5 5 10 2 3 Output 5 10","solution":"def subset_sum(N, K, arr): Determines if there exists a subset of the list whose sum is equal to K. :param N: int, number of integers in the list :param K: int, target sum we are trying to find :param arr: list of integers :return: list of integers forming the subset that sums to K or an empty list if no such subset exists dp = [[False] * (K + 1) for _ in range(N + 1)] for i in range(N + 1): dp[i][0] = True for i in range(1, N + 1): for j in range(1, K + 1): if arr[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]] else: dp[i][j] = dp[i-1][j] if not dp[N][K]: return [] subset = [] i, j = N, K while i > 0 and j > 0: if dp[i][j] and not dp[i-1][j]: subset.append(arr[i-1]) j -= arr[i-1] i -= 1 return subset[::-1]"},{"question":"You are helping the city government to plan new utility lights for a large rectangular park. The park is represented as a grid of size M x N, and a utility light can be placed on any of the grid intersections. To ensure proper visibility and avoid shadows, no two utility lights should be placed at diagonal adjacent intersections. A diagonal adjacent intersection is defined as any two intersections that form a line segment at a 45-degree angle (i.e., they differ by exactly one row and one column). Write a function `maxUtilityLights(M, N)` that returns the maximum number of utility lights that can be installed under the given constraint. # Constraints: - 1 ≤ M, N ≤ 1000 # Input: - The function will take two integers M and N, the dimensions of the park grid. # Output: - The function should return an integer representing the maximum number of utility lights that can be installed. # Example: ```python def maxUtilityLights(M: int, N: int) -> int: pass # Example usage print(maxUtilityLights(3, 3)) # Output: 5 print(maxUtilityLights(4, 5)) # Output: 10 print(maxUtilityLights(1000, 1000)) # Output: 500000 ``` # Explanation: In a 3x3 grid, one of the possible solutions is to place lights at (0, 0), (0, 2), (1, 1), (2, 0), and (2, 2) resulting in a total of 5 utility lights without any two forming a diagonal. For a 4x5 grid, one of the maximum configurations is to place 10 utility lights. Your function should efficiently compute the maximum possible number of non-diagonally adjacent utility lights for any given grid size.","solution":"def maxUtilityLights(M, N): Returns the maximum number of utility lights that can be installed on an MxN grid under the constraint that no two lights are placed at diagonal adjacent intersections. # The optimal solution is alternating lights on a checkerboard pattern. return (M * N + 1) // 2"},{"question":"A software company recently implemented a new feature for team collaboration. A project can have several tasks, and each task has a unique identifier and a priority level. The company wants to analyze the way tasks are managed by performing a series of queries: 1. ADD id p — Add a task with unique identifier id and priority level p to the project. The task identifiers are unique. 2. REMOVE id — Remove the task with identifier id from the project. It’s guaranteed that the task with this identifier exists when this query is executed. 3. QUERY p — Count the number of tasks in the project with a priority level greater or equal to p. The input will consist of multiple queries, and you are supposed to return the result for each QUERY type operation. Input The first line of the input contains an integer q (1 ≤ q ≤ 100 000) — the number of queries to be performed on the project. The next q lines contain the queries in the format described above: - For an ADD operation, the query will be in the form `ADD id p`, where id is a unique identifier (1 ≤ id ≤ 10^9) and p is an integer priority level (1 ≤ p ≤ 100). - For a REMOVE operation, the query will be in the form `REMOVE id`, where id is an identifier of an existing task. - For a QUERY operation, the query will be in the form `QUERY p`, where p is an integer priority level (1 ≤ p ≤ 100). Output For each QUERY operation, print a single integer in a new line — the number of tasks with priority equal to or higher than the specified level. Examples Input 8 ADD 1 50 ADD 2 60 QUERY 55 REMOVE 1 QUERY 50 ADD 3 85 QUERY 80 REMOVE 3 Output 1 1 1","solution":"def team_collaboration(queries): Process a series of queries for task management and return the results for QUERY operations. Args: queries (List[str]): List of queries to be performed on the project. Returns: List[int]: Results for each QUERY operation. tasks = {} results = [] for query in queries: parts = query.split() if parts[0] == \'ADD\': task_id = int(parts[1]) priority = int(parts[2]) tasks[task_id] = priority elif parts[0] == \'REMOVE\': task_id = int(parts[1]) if task_id in tasks: del tasks[task_id] elif parts[0] == \'QUERY\': priority = int(parts[1]) count = sum(1 for p in tasks.values() if p >= priority) results.append(count) return results"},{"question":"Write a function `number_transform` that takes an integer `n` as its argument. If the integer is a multiple of 5, reduce it by half. If the integer is a multiple of 7, increase it by 20%. If the integer is a multiple of both 5 and 7, return the original integer. Otherwise, if the integer is neither a multiple of 5 nor 7, return the negative of the integer. ```python number_transform(10) => 5 number_transform(14) => 16.8 number_transform(35) => 35 number_transform(8) => -8 ```","solution":"def number_transform(n): Transforms the input number based on its properties: - If n is a multiple of 5, reduce it by half. - If n is a multiple of 7, increase it by 20%. - If n is a multiple of both 5 and 7, return the original number. - Otherwise, return the negative of the number. if n % 5 == 0 and n % 7 == 0: return n elif n % 5 == 0: return n / 2 elif n % 7 == 0: return n * 1.2 else: return -n"},{"question":"Given the function `is_rotation(s1, s2)`, determine if two given strings are rotations of each other. A string is considered a rotation of another string if it can be obtained by shifting its characters circularly to the left or right. For example, \\"waterbottle\\" is a rotation of \\"erbottlewat\\" because if you rotate the first string by -3 or 8 places, you get the second string. Function `is_rotation` takes two strings as input and returns a boolean value: `True` if the strings are rotations of each other, and `False` otherwise. **Function Signature:** ```python def is_rotation(s1: str, s2: str) -> bool: ``` **Input Format:** - `s1`: First string consisting of lowercase alphabetical characters. - `s2`: Second string consisting of lowercase alphabetical characters. **Output Format:** - Return `True` if `s1` is a rotation of `s2`, otherwise return `False`. **Constraints:** - All characters in s1 and s2 are lowercase alphabetical characters. - Length of `s1` and `s2` is at most 1000. **Example:** ```python is_rotation(\\"waterbottle\\", \\"erbottlewat\\") # Returns: True is_rotation(\\"hello\\", \\"ohell\\") # Returns: True is_rotation(\\"hello\\", \\"world\\") # Returns: False is_rotation(\\"abc\\", \\"cab\\") # Returns: True is_rotation(\\"abc\\", \\"bca\\") # Returns: True ``` **Explanation:** - The first example shows that \\"erbottlewat\\" can be obtained by rotating \\"waterbottle\\" by -3 or 8 places. - The second example shows \\"ohell\\" is a rotation of \\"hello\\". - The third example shows \\"world\\" is not a rotation of \\"hello\\". - The fourth example shows \\"cab\\" is a rotation of \\"abc\\". - The fifth example shows \\"bca\\" is a rotation of \\"abc\\".","solution":"def is_rotation(s1: str, s2: str) -> bool: Determines if s1 is a rotation of s2. if len(s1) != len(s2): return False concatenated = s1 + s1 return s2 in concatenated"},{"question":"You are given a string S of length N consisting of lowercase letters. Your task is to determine the number of distinct pairs of indices (i,~j)~(1 leq i < j leq N) such that the substring S[i: j+1] is a palindrome. A palindrome is a string that reads the same backwards as forwards. -----Constraints----- - 1 leq N leq 3000 - S is a string of length N consisting of lowercase letters. -----Input----- Input is given from Standard Input in the following format: N S -----Output----- Print the number of distinct pairs of indices (i,~j) such that S[i: j+1] is a palindrome. -----Sample Input----- 5 ababa -----Sample Output----- 6 The distinct palindrome substrings and their indices are: - (1, 1): \\"a\\" - (2, 2): \\"b\\" - (3, 3): \\"a\\" - (4, 4): \\"b\\" - (5, 5): \\"a\\" - (1, 3): \\"aba\\" - (3, 5): \\"aba\\" - (1, 5): \\"ababa\\" Only the pairs (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), and (1, 3) are considered distinct for the given conditions.","solution":"def count_palindromic_substrings(n, s): Counts the number of palindromic substrings in the given string. count = 0 dp = [[False] * n for _ in range(n)] # Every single character is a palindrome for i in range(n): dp[i][i] = True count += 1 # Check for palindromes of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True count += 1 # Check for palindromes of length greater than 2 for length in range(3, n + 1): # length of the substring for i in range(n - length + 1): j = i + length - 1 # ending index of the current substring if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True count += 1 return count"},{"question":"In a fictional kingdom, there are N towns connected by M bidirectional roads. The King wants to check the connectivity of the kingdom to ensure that it is possible to travel between any pair of towns. Help the King determine if the kingdom is fully connected. -----Input:----- - The first line contains an integer T, the number of test cases. Then the test cases follow. - The first line of each test case contains two integers N (number of towns) and M (number of roads). - The next M lines each contain two integers u and v, representing a bidirectional road between towns u and v. -----Output:----- For each test case, print \\"YES\\" if the kingdom is fully connected, meaning it is possible to travel between any pair of towns. Otherwise, print \\"NO\\". (Without quotes). -----Constraints:----- - 1 leq T leq 10 - 1 leq N leq 1000 - 0 leq M leq 10000 - 1 leq u, v leq N - There can be multiple roads between the same pair of towns, and roads may also connect a town to itself. -----Sample Input:----- 2 4 3 1 2 2 3 3 4 4 2 1 2 3 4 -----Sample Output:----- YES NO","solution":"def is_fully_connected(N, M, roads): from collections import defaultdict, deque def bfs(start, graph): visited = set() queue = deque([start]) while queue: town = queue.popleft() if town not in visited: visited.add(town) for neighbour in graph[town]: if neighbour not in visited: queue.append(neighbour) return visited if N == 1: return \\"YES\\" graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) visited_towns = bfs(1, graph) if len(visited_towns) == N: return \\"YES\\" else: return \\"NO\\" def connectivity_check(T, test_cases): results = [] for N, M, roads in test_cases: results.append(is_fully_connected(N, M, roads)) return results"},{"question":"Maki loves playing games with strings. One day, she came up with a fun challenge involving string transformations. Maki has two strings, `a` and `b`, both of the same length. She plays the game in `n` rounds. In each round, she will choose a position in the strings and a character from the alphabet. She can replace the character at the chosen position in either string `a` or string `b` with the chosen character. She wants to make the strings `a` and `b` identical using the minimum number of rounds. Given two strings `a` and `b`, you need to determine the minimum number of rounds required to make the two strings identical. # Input The input consists of: - The first line contains the integer `T` (1 ≤ T ≤ 100), the number of test cases. - For each test case, there are two lines: - The first line contains string `a`. - The second line contains string `b`. Both strings `a` and `b` will have the same length, and their length will be between 1 and 1000. # Output For each test case, output a single integer representing the minimum number of rounds required to make string `a` identical to string `b`. # Example Input ``` 3 abc abd xyz xya apple apric ``` Output ``` 1 1 3 ``` # Explanation - In the first test case, changing the last character of `a` from \'c\' to \'d\' makes the strings identical in 1 round. - In the second test case, changing the third character of `b` from \'a\' to \'z\' makes the strings identical in 1 round. - In the third test case, three changes are needed: \'p\' to \'r\', \'l\' to \'i\', and \'e\' to \'c\', resulting in 3 rounds. # Notes The strings may include lowercase English letters only. Each position in the strings can be considered independently to determine how many characters need to be changed to make the strings identical.","solution":"def min_rounds_to_equal_strings(a, b): Returns the minimum number of rounds required to make strings `a` and `b` identical. Parameters: a (str): The first string. b (str): The second string. Returns: int: The number of changes needed. return sum(char_a != char_b for char_a, char_b in zip(a, b)) def process_multiple_cases(test_cases): Processes multiple test cases to determine the number of rounds needed for each. Parameters: test_cases (list of tuple): List containing test case string pairs. Returns: list: List of integers representing the number of changes for each test case. results = [] for a, b in test_cases: results.append(min_rounds_to_equal_strings(a, b)) return results"},{"question":"You are given an array of N integers and Q queries. Each query consists of two integers L and R, and the objective is to find the minimum value in the subarray from index L to index R (inclusive) of the given array. Constraints: * 1 leq N leq 10^5 * 1 leq Q leq 10^5 * 1 leq A[i] leq 10^9 (where 1 leq i leq N) * 1 leq L leq R leq N Input: Input is given from Standard Input in the following format: N Q A_1 A_2 ... A_N L_1 R_1 L_2 R_2 : L_Q R_Q Output: Print the answer for each query, one per line. Example: Input: 5 3 1 3 2 7 9 1 3 2 4 1 5 Output: 1 2 1","solution":"def min_in_subarray(arr, queries): Returns the minimum value in the subarray for each query. Parameters: arr (list): List of integers. queries (list): List of tuples, each containing (L, R) indexes. Returns: list: List of minimum values for each query. results = [] for L, R in queries: results.append(min(arr[L-1:R])) return results # Input Reading and Parsing def main(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) Q = int(data[1]) A = list(map(int, data[2:N+2])) queries = [(int(data[i]), int(data[i+1])) for i in range(N+2, len(data), 2)] results = min_in_subarray(A, queries) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are working on software to manage a small bookstore\'s inventory. Each book is identified by a unique ISBN number. The bookstore keeps track of the number of copies of each book in its inventory. Your task is to write a program that helps the bookstore manager update the inventory. The manager may perform two types of operations: 1. Add new copies of a book to the inventory. 2. Remove copies of a book from the inventory. Inputs: The input consists of a number of operations followed by the operations themselves. - The first line contains an integer `m` (1 ≤ m ≤ 100,000), the number of operations. - Each of the next `m` lines contains an operation in one of the following formats: - \\"ADD ISBN count\\" where ISBN is a string of length 13 representing the book\'s ISBN and `count` is a positive integer (1 ≤ count ≤ 100). - \\"REMOVE ISBN count\\" where ISBN is a string of length 13 representing the book\'s ISBN and `count` is a positive integer (1 ≤ count ≤ 100). Assume that there will be no \\"REMOVE\\" operation for a book that doesn\'t exist in the inventory or tries to remove more copies than exist. Outputs: - Your program should print the final inventory. Each line should contain an ISBN followed by the number of copies available in the inventory. - The output should be sorted by ISBN in ascending lexicographical order. Example: Input: ``` 6 ADD 9780321146533 10 ADD 9780131103627 5 REMOVE 9780321146533 3 ADD 9780321146533 2 ADD 9780201633610 7 REMOVE 9780131103627 2 ``` Output: ``` 9780131103627 3 9780201633610 7 9780321146533 9 ``` Note: - ISBNs are unique identifiers for books, and all ISBNs in the input will be valid 13-character strings. - Ensure to handle up to 100,000 operations efficiently.","solution":"def update_inventory(m, operations): Update the inventory based on a list of operations. Parameters: - m: int, the number of operations. - operations: list of tuples, where each tuple is an operation in the form (\\"ADD\\" or \\"REMOVE\\", ISBN, count). Returns: - dict, the final inventory with ISBN as keys and counts as values. inventory = {} for operation in operations: action, isbn, count = operation count = int(count) if action == \'ADD\': if isbn in inventory: inventory[isbn] += count else: inventory[isbn] = count elif action == \'REMOVE\': if isbn in inventory and inventory[isbn] >= count: inventory[isbn] -= count if inventory[isbn] == 0: del inventory[isbn] # Return the sorted inventory return {isbn: inventory[isbn] for isbn in sorted(inventory)} # Function to format the output as required by the question def inventory_to_string(inventory): return \'n\'.join(f\\"{isbn} {count}\\" for isbn, count in sorted(inventory.items()))"},{"question":"You are given an array `arr` of `n` integers. Your task is to determine the maximum number of contiguous subarrays that sum up to a given integer `k`. A contiguous subarray is defined as a sequence of consecutive elements within the array. For example, the subarray `[5, 3, -2]` is a contiguous subarray of `[1, 5, 3, -2, 8]`. -----Input----- - The first line contains two integers `n` and `k` (1 le n le 10^5, -10^9 le k le 10^9) — the length of the array and the target sum of the subarrays. - The second line contains `n` integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the array `arr`. -----Output----- - Print one integer, the maximum number of contiguous subarrays that sum up to `k`. -----Examples----- Input 5 5 1 4 -1 4 2 Output 2 Input 6 3 3 3 3 3 3 3 Output 6 -----Note----- In the first example, the subarrays that sum up to 5 are: `[1, 4]` and `[4, -1, 4]`. In the second example, each individual element forms a subarray that sums to 3. Since there are 6 elements, the output is 6.","solution":"def max_subarrays_with_sum(arr, k): Returns the maximum number of contiguous subarrays that sum up to `k`. from collections import defaultdict # Initialization sum_count = defaultdict(int) # To store the frequency of prefix sums current_sum = 0 count = 0 # Iterate through the array for num in arr: current_sum += num # Check if the current prefix sum is equal to the desired sum if current_sum == k: count += 1 # Check if there exists a prefix sum that can be subtracted to get the desired sum if (current_sum - k) in sum_count: count += sum_count[current_sum - k] # Record the current prefix sum in the dictionary sum_count[current_sum] += 1 return count # Example usage: # Input array: [1, 4, -1, 4, 2], target sum: 5 # Expected output: 2 input_array = [1, 4, -1, 4, 2] target_sum = 5 print(max_subarrays_with_sum(input_array, target_sum))"},{"question":"You are required to design a function to compute the intersection of two lists. The intersection of two lists is a new list that contains all the unique elements that are present in both the input lists. Here is an example: ```cs var list1 = new List<int> {1, 2, 2, 3, 4}; var list2 = new List<int> {2, 2, 3, 5}; List<int> result = ListIntersector.Intersect(list1, list2); // result should have this content: [2, 3] ``` ```python list1 = [1, 2, 2, 3, 4] list2 = [2, 2, 3, 5] result = intersect(list1, list2) // result should have this content: [2, 3] ``` Note the following: 1. Only unique elements should be in the resulting list. 2. The order of elements in the resulting list does not matter. 3. The function should be optimized for large lists.","solution":"def intersect(list1, list2): Returns a list containing the unique intersection of elements from list1 and list2. # Convert lists to sets to get unique elements and use set intersection set1 = set(list1) set2 = set(list2) intersection = set1.intersection(set2) # Convert the set back to list return list(intersection)"},{"question":"Write a program that processes a sequence of events represented as strings. Each event string is a comma-separated list of items. The program should support the following operations: * `filter(item)`: return all events that contain the given item. * `sort()`: return all events, sorted alphabetically by the first item in each event. Constraints * 1 leq m leq 500 (number of events) * 1 leq text{length of each event string} leq 100 * Each event string contains between 1 and 10 items, and each item can contain alphabets and/or numbers (no special characters or spaces). * 1 leq q leq 100 (number of queries) Input The input is given in the following format: m event_1 event_2 ... event_m q query_1 query_2 ... query_q In the first line, m (the number of events) is given. The next m lines contain the events. Each event is a comma-separated string of items. In the following line, the number of queries q is given. Each query is given in the next q lines. A query can be either `filter(item)` or `sort()`. Output For each query, print the resulting events, each on a new line. If there are multiple events, print them in the order they appear in the list (for `filter(item)`) or sorted alphabetically (for `sort()`). Example Input 4 apple,banana,carrot banana,apple carrot,mango,apple banana,carrot 3 filter(apple) sort() filter(banana) Output apple,banana,carrot banana,apple carrot,mango,apple apple,banana,carrot banana,apple banana,carrot","solution":"def process_events(events, queries): def filter_events(item, events): return [event for event in events if item in event.split(\',\')] def sort_events(events): return sorted(events, key=lambda e: e.split(\',\')[0]) results = [] for query in queries: if query.startswith(\\"filter(\\"): item = query[len(\\"filter(\\"):-1] result = filter_events(item, events) elif query == \\"sort()\\": result = sort_events(events) results.extend(result) results.append(\\"\\") # To separate result sets return results def main(input_lines): m = int(input_lines[0]) events = input_lines[1:m+1] q = int(input_lines[m+1]) queries = input_lines[m+2:m+2+q] results = process_events(events, queries) for result in results: if result: print(result)"},{"question":"The movie streaming platform FlickPop gives frequent software updates to its users. They have a peculiar way of checking version compatibility for updates. Each version number is structured as \\"A.B.C\\", where A, B, and C are integers. To ensure smooth functioning, FlickPop has to determine if a device with an existing version can be upgraded to the new version. A new version is considered compatible if it follows these rules: 1. A must be greater than or equal to the existing version\'s A. 2. If A is the same, B must be greater than or equal to the existing version\'s B. 3. If both A and B are the same, C must be greater than the existing version\'s C. Write a program to check if the new version is compatible with the existing version based on the above rules. Input The first line of the input contains an integer T, the number of test cases. Each test case consists of two lines: the first line contains the existing version and the second line contains the new version. Output For each test case, output \\"Yes\\" if the new version is compatible with the existing version, otherwise output \\"No\\". Constraints 1 ≤ T ≤ 100 version numbers are given in the format \\"A.B.C\\" where 0 ≤ A, B, C ≤ 1000 Example Input: 3 1.2.3 2.0.0 3.5.6 3.5.8 10.9.7 10.9.6 Output: Yes Yes No","solution":"def is_compatible(existing_version, new_version): Check if new version is compatible with existing version based on the given rules. existing = list(map(int, existing_version.split(\'.\'))) new = list(map(int, new_version.split(\'.\'))) if new[0] > existing[0]: return \\"Yes\\" elif new[0] == existing[0]: if new[1] > existing[1]: return \\"Yes\\" elif new[1] == existing[1]: if new[2] > existing[2]: return \\"Yes\\" return \\"No\\" def check_compatibility(test_cases): results = [] for i in range(0, len(test_cases), 2): existing_version = test_cases[i] new_version = test_cases[i+1] results.append(is_compatible(existing_version, new_version)) return results"},{"question":"Given a string of lowercase English letters, determine the length of the longest substring that contains at most two distinct characters. # Examples ```python longest_substring_with_two_distinct(\'eceba\') => 3 # \\"ece\\" longest_substring_with_two_distinct(\'ccaabbb\') => 5 # \\"aabbb\\" longest_substring_with_two_distinct(\'abcabcabc\') => 2 # \\"ab\\", \\"bc\\" or \\"ca\\" ``` # Guidelines - Input will be a non-empty string of lowercase English letters. - Output will be an integer representing the length of the longest substring that satisfies the condition.","solution":"def longest_substring_with_two_distinct(s): Returns the length of the longest substring containing at most two distinct characters. if len(s) < 3: return len(s) left, right = 0, 0 max_length = 2 hashmap = {} while right < len(s): if len(hashmap) < 3: hashmap[s[right]] = right right += 1 if len(hashmap) == 3: del_idx = min(hashmap.values()) del hashmap[s[del_idx]] left = del_idx + 1 max_length = max(max_length, right - left) return max_length"},{"question":"Find the maximum subsequence sum of an integer array such that no two elements are adjacent in the original array. A subsequence is derived from the array by deleting some or none of the elements without changing the order of the remaining elements. -----Input----- The first line of input contains a single integer n (1 le n le 100,000). This is the number of elements in the array. The second line contains n integers separated by spaces representing the elements of the array. -----Output----- Output a single integer, which is the maximum sum of a subsequence with the given property. -----Examples----- Input 5 3 2 5 10 7 Output 15 Input 4 3 2 7 10 Output 13 -----Note----- In the first example, the optimal subsequence is {3, 10}, which sums to 15. In the second example, the optimal subsequence is {3, 10}, which sums to 13.","solution":"def max_non_adjacent_sum(nums): Returns the maximum sum of a subsequence such that no two elements are adjacent. if not nums: return 0 n = len(nums) if n == 1: return max(0, nums[0]) prev2 = 0 prev1 = max(0, nums[0]) for i in range(1, n): current = max(prev1, prev2 + nums[i]) prev2 = prev1 prev1 = current return prev1"},{"question":"Implement a function that receives a string containing a sentence and returns a new string where each word in the sentence is reversed but the order of the words remains the same. If the input is an empty string or consists only of whitespace characters, the function should return an empty string. Examples: ```Python reverse_words(\\"hello world\\") # should return \\"olleh dlrow\\" reverse_words(\\"Python is fun\\") # should return \\"nohtyP si nuf\\" reverse_words(\\" \\") # should return \\"\\" ``` ```Haskell reverseWords \\"hello world\\" -- should return \\"olleh dlrow\\" reverseWords \\"Python is fun\\" -- should return \\"nohtyP si nuf\\" reverseWords \\" \\" -- should return \\"\\" ```","solution":"def reverse_words(sentence): Reverses each word in the sentence, but maintains the order of the words. Parameters: sentence (str): the input sentence Returns: str: a new string with each word reversed but the order of words maintained if not sentence.strip(): return \\"\\" words = sentence.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"Task You are given a list of integers `arr` and an integer `k`. Your task is to implement a function that calculates the maximum sum of `k` consecutive elements in `arr`. For example, given the list: ``` arr = [1, 3, 4, 2, 6, -1, 2, 3, 0] k = 3 ``` The function should return `12` since the maximum sum of `k` consecutive elements (specifically, the subarray `[4, 2, 6]`) is `4 + 2 + 6 = 12`. Write a function: ```python def max_consecutive_sum(arr: List[int], k: int) -> int: # your code here ``` **Input:** - `arr` is a list of integers, where `1 <= len(arr) <= 10^5` - `k` is an integer such that `1 <= k <= len(arr)` **Output:** - The function should return an integer, representing the maximum sum of `k` consecutive elements in `arr`. **Example:** ``` Input: arr = [1, 3, 4, 2, 6, -1, 2, 3, 0], k = 3 Output: 12 Input: arr = [2, 1, 5, 1, 3, 2], k = 2 Output: 6 ```","solution":"from typing import List def max_consecutive_sum(arr: List[int], k: int) -> int: # Initial sum of the first \'k\' elements max_sum = sum(arr[:k]) current_sum = max_sum # Iterate over the array starting from k to the end for i in range(k, len(arr)): # Slide the window right by one element current_sum = current_sum - arr[i - k] + arr[i] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Create a function named \\"flatten_and_sort\\" that takes a two-dimensional array (a list of lists) and returns a flattened, sorted one-dimensional array. The function should first flatten the given two-dimensional array and then return a sorted version of the flattened array. Example: ```python array = [[3, 2, 1], [4, 6, 5], [], [9, 7], [8]] flatten_and_sort(array) # => [1, 2, 3, 4, 5, 6, 7, 8, 9] ``` The function should work for any list of lists containing numerical values (integers and floating-point numbers). Example: ```python array = [[1.2, 3.5, 2.1], [4.6, 5.3], [9.4], [8.8, 7.7]] flatten_and_sort(array) # => [1.2, 2.1, 3.5, 4.6, 5.3, 7.7, 8.8, 9.4] ``` If the input two-dimensional array is empty or contains only empty subarrays, the function should return an empty array. Example: ```python array = [[], [], []] flatten_and_sort(array) # => [] array = [] flatten_and_sort(array) # => [] ```","solution":"def flatten_and_sort(array): Flattens a two-dimensional list and returns a sorted one-dimensional list. flattened_list = [item for sublist in array for item in sublist] return sorted(flattened_list)"},{"question":"Write a function that takes two arguments: a list of integers and an integer n, and returns a new list that contains only the elements from the original list that are divisible by n. Example: ```python filter_divisible([12, 15, 7, 21, 30, 22], 3) == [12, 15, 21, 30] filter_divisible([10, 22, 35, 47], 5) == [10, 35] filter_divisible([42, 56, 73, 81], 7) == [42] ```","solution":"def filter_divisible(numbers, n): Returns a new list of integers that are divisible by n from the original list of numbers. :param numbers: List of integers :param n: Integer divisor :return: List of integers from numbers divisible by n return [num for num in numbers if num % n == 0]"},{"question":"You are given a list of integers. Your task is to find and return the two elements in the list whose sum is closest to a given target number. If there are multiple pairs with the same minimum difference to the target, return any one of them. Input: The first line contains an integer N, the number of integers in the list. The next line contains N space-separated integers representing the elements of the list. The third line contains an integer T representing the target sum. Output: Print two elements from the list whose sum is closest to the target sum T. Output the elements in the order they appear in the list. Constraints: 1 ≤ N ≤ 1000 -1000 ≤ element ≤ 1000 -2000 ≤ T ≤ 2000 SAMPLE INPUT 5 -1 2 1 -4 5 1 SAMPLE OUTPUT 1 -1 Explanation: Among the possible pairs: - (-1, 2) = 1 - (-1, 1) = 0 - (-1, -4) = -5 - (-1, 5) = 4 - (2, 1) = 3 - (2, -4) = -2 - (2, 5) = 7 - (1, -4) = -3 - (1, 5) = 6 - (-4, 5) = 1 Both pairs (-1, 2) and (-4, 5) sum up to 1 which is the closest sum to the target. In this case, the output could be either (1 -1) or (-4, 5).","solution":"def closest_pair_to_target(lst, target): Find two elements in the list whose sum is closest to the target. N = len(lst) closest_sum = float(\'inf\') result_pair = (None, None) for i in range(N): for j in range(i + 1, N): current_sum = lst[i] + lst[j] if abs(current_sum - target) < abs(closest_sum - target): closest_sum = current_sum result_pair = (lst[i], lst[j]) return result_pair"},{"question":"Data Synchronization for Distributed Systems You are tasked with designing a system to keep track of file versions in a distributed system with multiple servers. Each server in the system may store a different version of a file and periodically synchronizes with other servers to update its file version. Each synchronization consists of one server (source) sending its file version to another server (target). When the target server receives the version from the source, it updates its version to be the same as the source. Each file version is represented by an integer, and a higher integer value denotes a more recent version of the file. Your goal is to determine the minimal number of synchronizations required such that all servers in the system eventually end up with the same file version. The input consists of: - An integer N (the number of servers). - A list of N integers indicating the initial file version on each server. - A list of M pairs (a, b) where server a can send its file version to server b. The output should be the minimal number of synchronizations required to make all servers have the same file version. If it\'s not possible to synchronize all servers, output -1. Input Format: - The first line contains the integer N. - The second line contains N integers representing the initial file versions on each server. - The third line contains the integer M. - The next M lines each contain two integers a and b, indicating that server a can send its file version to server b. Output Format: - A single integer representing the minimal number of synchronizations required, or -1 if it\'s not possible. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 10000 - 1 ≤ Initial file version ≤ 1000 Sample Input: 4 1 2 3 4 4 1 2 2 3 3 4 4 1 Sample Output: 3 Explanation: In the example, one minimal sequence of synchronizations is: 1. Server 4 sends its version to server 1, resulting in versions [4, 2, 3, 4]. 2. Server 4 sends its version to server 2, resulting in versions [4, 4, 3, 4]. 3. Server 4 sends its version to server 3, resulting in versions [4, 4, 4, 4].","solution":"from collections import deque def minimal_synchronizations(N, initial_versions, M, connections): max_version = max(initial_versions) graph = [[] for _ in range(N)] for a, b in connections: graph[a-1].append(b-1) queue = deque([(i, 0) for i in range(N) if initial_versions[i] == max_version]) visited = [False] * N for i in range(N): if initial_versions[i] == max_version: visited[i] = True counter = 0 while queue: node, step = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: initial_versions[neighbor] = max_version visited[neighbor] = True queue.append((neighbor, step + 1)) counter = step + 1 if all(version == max_version for version in initial_versions): return counter else: return -1"},{"question":"You are given an array of integers. Your task is to determine if you can make all elements of the array equal by performing a series of operations. In one operation, you can add 1 to any integer of the array or subtract 1 from any integer of the array. You have to answer t independent queries. -----Input----- The first line of the input contains one integer t (1 le t le 100) — number of queries. Each of the next t lines contains: - The first integer n (1 le n le 1000) — the number of elements in the array. - The next n integers representing the array. -----Output----- Print t lines. In the i-th line, print \\"YES\\" if you can make all elements of the array equal using the given operations, otherwise print \\"NO\\". -----Example----- Input 3 2 3 3 3 2 4 5 4 1 2 2 1 Output YES NO YES -----Note----- In the first query, the array is already uniform, so the answer is \\"YES\\". In the second query, you cannot make all elements in the array equal because the absolute difference between the smallest and largest number is greater than 1. In the third query, the array can be made uniform by either incrementing or decrementing some elements.","solution":"def can_make_elements_equal(queries): results = [] for query in queries: n, arr = query[0], query[1:] max_val = max(arr) min_val = min(arr) if max_val - min_val <= 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"As a proficient botanist, you are working in a greenhouse with various types of plants. Each plant requires a specific amount of water daily, and some plants have conflicting watering schedules. You\'re tasked with creating an optimized watering schedule that minimizes the total amount of water used while satisfying each plant\'s needs. The greenhouse contains n plants labeled from 1 to n. You have information regarding the water requirements and conflicts for each plant. You need to determine if it\'s possible to satisfy the watering requirements with the given constraints and, if so, calculate the minimum water usage. Each plant i (1 le i le n) requires w_i units of water daily. There are m conflicting plant pairs. For each conflict pair (i, j), plants i and j cannot be watered on the same day. You need to output whether it is possible to create such a schedule and the total minimum water usage if it is. **Input:** - The first line contains two space-separated integers n and m (1 le n le 1000, 0 le m le 10^4) — the number of plants and the number of conflicting pairs, respectively. - The second line contains n integers w_1, w_2, ldots, w_n (1 le w_i le 1000) — the water requirements for each plant. - Each of the next m lines contains two integers i and j (1 le i, j le n, i ne j) — indicating a conflict between plant i and plant j. **Output:** - If it is possible to create an optimized schedule, output \\"YES\\" followed by the minimum amount of total water usage. - Otherwise, output \\"NO\\". **Example:** *Input:* ``` 5 4 3 5 4 7 2 1 2 2 3 4 5 3 4 ``` *Output:* ``` YES 21 ``` *Input:* ``` 3 3 6 3 4 1 2 2 3 1 3 ``` *Output:* ``` NO ```","solution":"def can_create_schedule(n, m, water_requirements, conflicts): from collections import defaultdict, deque # Create the adjacency list for the conflict graph adjacency_list = defaultdict(list) for i, j in conflicts: adjacency_list[i].append(j) adjacency_list[j].append(i) # To store color of each vertex colors = [-1] * (n + 1) # Function to check if the graph is bipartite def bfs_check_bipartite(start): queue = deque([start]) colors[start] = 0 while queue: u = queue.popleft() for v in adjacency_list[u]: if colors[v] == -1: colors[v] = 1 - colors[u] queue.append(v) elif colors[v] == colors[u]: return False return True for plant in range(1, n + 1): if colors[plant] == -1: if not bfs_check_bipartite(plant): return \\"NO\\" total_water_usage = 0 for color_set in [0, 1]: total_water_usage += sum(water_requirements[i - 1] for i in range(1, n + 1) if colors[i] == color_set) return f\\"YES {total_water_usage}\\""},{"question":"In this task, you\'ll implement a function named `zigzag_sequence` which generates the nth term in a special sequence. The sequence starts with 1 and 2, but subsequent values are computed based on whether the previous value is odd or even. Specifically: - If the last value is odd, the next value will be `3 * last_value + 1`. - If the last value is even, the next value will be `last_value // 2`. The sequence continues until it reaches 1, at which point it terminates. Your job is to write a function `zigzag_sequence(n)` which generates the first `n` values of the sequence. If the sequence terminates before reaching `n` elements, the function should simply return the sequence as is. # Example ```python zigzag_sequence(1) -> [1] zigzag_sequence(3) -> [1, 2, 1] ``` # Constraints - Your function should handle cases where `n` is up to 1000. - Perform necessary validity checks to handle corner cases efficiently.","solution":"def zigzag_sequence(n): Generates the first n terms of the zigzag sequence starting with 1 and 2. if n <= 0: return [] if n == 1: return [1] sequence = [1, 2] while len(sequence) < n: last_value = sequence[-1] if last_value == 1: break elif last_value % 2 == 0: next_value = last_value // 2 else: next_value = 3 * last_value + 1 sequence.append(next_value) return sequence[:n]"},{"question":"You are given an undirected graph with N nodes and M edges. Each edge is assigned a weight W_i. A path in this graph is a sequence of nodes connected by edges. The weight of a path is the sum of the weights of the edges in the path. Your task is to find the weight of the shortest path between two given nodes A and B. -----Input----- The first line of input contains two integers N and M (1 leq N leq 1000, 0 leq M leq 10000), representing the number of nodes and the number of edges in the graph, respectively. Each of the following M lines contains three integers U_i, V_i, and W_i (1 leq U_i, V_i leq N, 1 leq W_i leq 1000), representing an edge between nodes U_i and V_i with weight W_i. The last line contains two integers A and B (1 leq A, B leq N), representing the nodes between which you need to find the shortest path. -----Output----- Output the weight of the shortest path between nodes A and B. If there is no such path, output -1. -----Examples----- Sample Input: 5 6 1 2 3 1 3 2 2 3 4 2 4 6 3 4 1 4 5 5 1 5 Sample Output: 8 Sample Input: 4 2 1 2 2 3 4 4 1 4 Sample Output: -1","solution":"import heapq def shortest_path(N, M, edges, A, B): graph = [[] for _ in range(N)] for edge in edges: U, V, W = edge graph[U-1].append((W, V-1)) graph[V-1].append((W, U-1)) pq = [(0, A-1)] dist = [float(\'inf\')] * N dist[A-1] = 0 while pq: current_dist, node = heapq.heappop(pq) if node == B-1: return current_dist for neighbor_weight, neighbor in graph[node]: distance = current_dist + neighbor_weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 # Input Parsing def parse_input(input_data): lines = input_data.strip().split(\\"n\\") N, M = map(int, lines[0].split()) edges = [list(map(int, line.split())) for line in lines[1:M+1]] A, B = map(int, lines[M+1].split()) return N, M, edges, A, B"},{"question":"To celebrate its 10th anniversary, a company has decided to give a special bonus to its employees. Each employee will be given a unique identification number (an integer) from 1 to N, and a table with M entries specifying ‘matchups’ between some pairs of employees. in each matchup exactly one of the two employees must receive a bonus. The employees have been allowed to choose which person should get the bonus in each matchup. However, no employee wants to receive more than one bonus. You have to find whether it is possible to choose the bonus-receivers in such a way that no employee receives more than one bonus. ------ Input Format ------ - First line will contain two integers N and M - number of employees and number of matchups, respectively. - Each of next M lines will contain two integers u and v - representing that either u or v should receive the bonus, where 1 ≤ u, v ≤ N. ------ Output Format ------ - Output a single string \\"YES\\" if it is possible to choose the bonus-receivers so that no employee receives more than one bonus, otherwise output \\"NO\\". ------ Constraints ------ - 1 ≤ N ≤ 10^5 - 0 ≤ M ≤ 10^5 - 1 ≤ u, v ≤ N ------ Sample Input 1 ------ 5 4 1 2 2 3 3 4 4 5 ------ Sample Output 1 ------ YES ------ Explanation 1 ------ One possible way to distribute the bonuses is: give it to employees 1, 3, and 5, leaving employees 2 and 4 without a bonus. Hence it is possible to give bonuses such that no employee gets more than one bonus. ------ Sample Input 2 ------ 3 3 1 2 2 3 3 1 ------ Sample Output 2 ------ NO ------ Explanation 2 ------ In this case, it is not possible to distribute the bonuses such that no employee gets more than one bonus because it forms a cycle. If any two get the bonus, the third also needs to get one, creating a conflict.","solution":"def can_distribute_bonuses(N, M, matchups): from collections import defaultdict, deque graph = defaultdict(list) for u, v in matchups: graph[u].append(v) graph[v].append(u) color = {} def bfs(node): queue = deque([node]) color[node] = 0 while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor in color: if color[neighbor] == color[current]: return False else: color[neighbor] = 1 - color[current] queue.append(neighbor) return True for node in range(1, N + 1): if node not in color: if not bfs(node): return \\"NO\\" return \\"YES\\""},{"question":"Given a list of integers representing the prices of different products in a store, you are required to find the maximum possible profit one can achieve by buying and then later selling one product. However, you must find the pair of buying and selling days that yield this maximum profit such that the day of selling is after the day of buying. Implement a function `maximum_profit(prices: List[int]) -> int` to solve the above problem. # Input - A list of integers textit{prices} where 1 leq textit{len(prices)} leq 10^5 and each integer in the list represents the price on a particular day. # Output - Return a single integer, the maximum possible profit. If no profit is possible, return 0. # Example Example 1: **Input:** [7, 1, 5, 3, 6, 4] **Output:** 5 **Explanation:** The maximum profit can be achieved when buying at price 1 and selling at price 6, resulting in a profit of (6 - 1 = 5). Example 2: **Input:** [7, 6, 4, 3, 1] **Output:** 0 **Explanation:** No profit can be achieved because the prices decrease every day. # Constraints - You cannot sell a product before buying it. - The elements in the list represent positive integers.","solution":"from typing import List def maximum_profit(prices: List[int]) -> int: Function to find the maximum possible profit from a list of integer prices, where you can buy on one day and sell on a future day. if len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Given an integer array, transform each element to the cumulative sum of all previous elements, including itself, such that the nth element in the transformed array is the sum of the first n elements from the original array. Write a function `cumulativeSum` that accepts an array of integers and returns the transformed array as described. Example 1: Input: [1, 2, 3, 4] Output: [1, 3, 6, 10] Explanation: - The first element is 1. - The second element is 1 + 2 = 3. - The third element is 1 + 2 + 3 = 6. - The fourth element is 1 + 2 + 3 + 4 = 10. Example 2: Input: [3, 1, 4, 1, 5] Output: [3, 4, 8, 9, 14] Explanation: - The first element is 3. - The second element is 3 + 1 = 4. - The third element is 3 + 1 + 4 = 8. - The fourth element is 3 + 1 + 4 + 1 = 9. - The fifth element is 3 + 1 + 4 + 1 + 5 = 14. Example 3: Input: [-2, 0, 2, 3] Output: [-2, -2, 0, 3] Explanation: - The first element is -2. - The second element is -2 + 0 = -2. - The third element is -2 + 0 + 2 = 0. - The fourth element is -2 + 0 + 2 + 3 = 3.","solution":"def cumulativeSum(arr): Returns the cumulative sum array of the given integer array. if not arr: return [] result = [arr[0]] for i in range(1, len(arr)): result.append(result[-1] + arr[i]) return result"},{"question":"-----Input----- The input consists of a single line containing a string of lowercase English alphabets. The length of the string is between 1 and 100, inclusive. -----Output----- Output \\"Palindrome\\" or \\"Not Palindrome\\". -----Examples----- Input level Output Palindrome Input coding Output Not Palindrome Input radar Output Palindrome","solution":"def is_palindrome(s): Returns \\"Palindrome\\" if the input string s is a palindrome, else returns \\"Not Palindrome\\". if s == s[::-1]: return \\"Palindrome\\" else: return \\"Not Palindrome\\""},{"question":"You are given two strings, `S1` and `S2`, both comprised of lowercase letters. You can perform a number of operations to transform `S1` into `S2`. In one operation, you can choose any two adjacent characters in `S1` and swap them. The goal is to determine the minimum number of swap operations required to transform `S1` into `S2`. If it is not possible to transform `S1` into `S2`, return -1. -----Input----- The first line of the input contains the string `S1` (1 le |S1| le 2000) — the starting string. The second line of the input contains the string `S2` (1 le |S2| le 2000) — the target string. -----Output----- Print a single integer — the minimum number of swap operations required to transform `S1` into `S2`, or -1 if it is not possible. -----Examples----- Input abc bca Output 2 Input abcd cadb Output 3 Input abcd abdc Output 1 Input abc def Output -1 -----Note----- In the first example input, let us perform the following operations: Swap `bc` to `cb`: `abc` -> `acb` Swap `ac` to `ca`: `acb` -> `bca` In the second example input, let us perform the following operations: Swap `bc` to `cb`: `abcd` -> `acbd` Swap `ab` to `ba`: `acbd` -> `cabd` Swap `bd` to `db`: `cabd` -> `cadb` In the third example input, let us perform the following operations: Swap `cd` to `dc`: `abcd` -> `abdc` In the fourth example input, since the characters in `S1` and `S2` do not match, it is not possible to transform `S1` into `S2`, so the answer is `-1`.","solution":"def min_swaps_to_transform(S1, S2): Returns the minimum number of adjacent swaps required to transform S1 into S2. If it is not possible, returns -1. if sorted(S1) != sorted(S2): return -1 n = len(S1) swaps = 0 S1 = list(S1) S2 = list(S2) for i in range(n): if S1[i] != S2[i]: j = i while j < n and S1[j] != S2[i]: j += 1 while j > i: S1[j], S1[j-1] = S1[j-1], S1[j] swaps += 1 j -= 1 return swaps"},{"question":"A delivery company operates in a city with a unique grid system. The city is divided into an n times n grid where each cell represents a distinct location. The company needs to deliver packages from the central warehouse located at cell (1, 1) to the destination at cell (n, n). To optimize delivery time, the company aims to determine the shortest path in terms of travel time from the warehouse to the destination. The travel time between adjacent cells (horizontally or vertically) is determined by the traffic congestion on those routes. Your task is to write a function that calculates the minimum travel time required to deliver packages from the warehouse to the destination. ------Input------ The input consists of the following: - The first line contains a single integer n (2 le n le 300), which represents the size of the grid. - Each of the next n lines contains n integers, where the j-th integer in the i-th line represents the travel time t_{i,j} (1 le t_{i,j} le 10^9) between adjacent cells. ------Output------ Output a single integer — the minimum travel time required to travel from cell (1, 1) to cell (n, n). ------Example------ Input 3 1 3 1 1 5 1 4 2 1 Output 7 ------Note------ The optimal path for the example provided is (1, 1) rightarrow (2, 1) rightarrow (3, 1) rightarrow (3, 2) rightarrow (3, 3), with a total travel time of 1 + 1 + 4 + 2 + 1 = 7.","solution":"import heapq def min_delivery_time(n, grid): Determine the minimum travel time from the warehouse (1,1) to the destination (n,n). directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] # Down, Right, Up, Left priority_queue = [(grid[0][0], 0, 0)] # (current time, row, col) min_time = [[float(\'inf\')] * n for _ in range(n)] min_time[0][0] = grid[0][0] while priority_queue: curr_time, x, y = heapq.heappop(priority_queue) if x == n-1 and y == n-1: return curr_time for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n: new_time = curr_time + grid[nx][ny] if new_time < min_time[nx][ny]: min_time[nx][ny] = new_time heapq.heappush(priority_queue, (new_time, nx, ny)) return min_time[-1][-1] # Example usage: # n = 3 # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(min_delivery_time(n, grid)) # Output: 7"},{"question":"You are tasked with creating a program that simulates a simplified version of a banking transaction system. The system should support depositing money into accounts, withdrawing money from accounts, and checking account balances. Write a program that processes a sequence of commands to either deposit, withdraw, or check balances for different accounts. Each account is identified by a unique account number. Input The input consists of multiple commands. The first line consists of an integer N (N leq 100), the number of commands. The next N lines, each contain a command in one of the following formats: 1. \\"DEPOSIT account_number amount\\" - Deposit the specified amount into the given account. 2. \\"WITHDRAW account_number amount\\" - Withdraw the specified amount from the given account if sufficient funds are available. If there are insufficient funds, the withdrawal should not be processed. 3. \\"BALANCE account_number\\" - Output the current balance of the given account. If the account does not exist, print \\"ERROR\\". Each command and parameter is separated by a single space. The account_number is an integer, and the amount is a positive real number. Output For each \\"BALANCE\\" command, print the current balance of the account or \\"ERROR\\" if the account does not exist. For all other commands, there is no output required. Example Input 7 DEPOSIT 123 100.00 DEPOSIT 456 50.00 WITHDRAW 123 25.00 BALANCE 123 WITHDRAW 123 1000.00 BALANCE 123 BALANCE 789 Output 75.00 75.00 ERROR","solution":"def process_commands(commands): accounts = {} results = [] for command in commands: parts = command.split() action = parts[0] account_number = int(parts[1]) if action == \\"DEPOSIT\\": amount = float(parts[2]) if account_number not in accounts: accounts[account_number] = 0.0 accounts[account_number] += amount elif action == \\"WITHDRAW\\": amount = float(parts[2]) if account_number in accounts and accounts[account_number] >= amount: accounts[account_number] -= amount elif action == \\"BALANCE\\": if account_number in accounts: results.append(f\\"{accounts[account_number]:.2f}\\") else: results.append(\\"ERROR\\") return results"},{"question":"Alice is playing a game with cards. She has a deck of n cards, each card has a number written on it. She wants to arrange the cards such that the absolute difference between the numbers on any two adjacent cards is greater than or equal to a given value k. Help Alice find out whether it is possible to arrange the cards in such a way. If it is possible, output \\"YES\\" and a possible arrangement of the cards. If it is not possible, output \\"NO\\". -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) denoting the number of cards. The second line contains n integers representing the numbers on the cards. The numbers on the cards are between 1 and 1000. The third line contains an integer k (1 ≤ k ≤ 1000) denoting the minimum required absolute difference. -----Output----- Output \\"YES\\" in the first line if it is possible to arrange the cards in the required way, and in the second line output any such arrangement of the cards. If it is not possible, output \\"NO\\". -----Examples----- Input 5 1 3 5 7 9 2 Output YES 1 3 5 7 9 Input 4 1 2 3 4 3 Output NO","solution":"def can_arrange_cards(n, cards, k): This function determines if the cards can be arranged such that the absolute difference between the numbers on any two adjacent cards is >= k. cards.sort() for i in range(1, n): if abs(cards[i] - cards[i-1]) < k: return \\"NO\\" return \\"YES\\", cards # Example usage: n = 5 cards = [1, 3, 5, 7, 9] k = 2 result = can_arrange_cards(n, cards, k) print(result)"},{"question":"Create a function that takes in a list of integers and returns a new list containing the product of all the numbers in the original list except the one at each index. Your solution should not use division and should operate in O(n) time complexity. **Example:** ```python Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] ``` **Explanation:** - For the element at index 0, the product of all other numbers except 1 is `2 * 3 * 4 = 24`. - For the element at index 1, the product of all other numbers except 2 is `1 * 3 * 4 = 12`. - For the element at index 2, the product of all other numbers except 3 is `1 * 2 * 4 = 8`. - For the element at index 3, the product of all other numbers except 4 is `1 * 2 * 3 = 6`. Note: 1. Your function should handle edge cases where the input list has zero, one, or more elements. 2. Aim to avoid using additional large-scale data structures to maintain space efficiency.","solution":"def product_except_self(nums): Returns a list where the ith element is the product of all the elements in the input list except the one at index i. length = len(nums) # Create an output array initialized to 1 for holding products of elements except self output = [1] * length # Calculate products of elements before the current index left_product = 1 for i in range(length): output[i] = left_product left_product *= nums[i] # Calculate products of elements after the current index and multiply by the product before the index right_product = 1 for i in range(length-1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"Given an integer `n`, return a list of all unique combinations of `n` pairs of balanced parentheses. A pair of balanced parentheses is a string `\'()\'`. You must return the combinations sorted lexicographically. Input: - The input consists of a single integer `n` (1 ≤ n ≤ 8), representing the number of pairs of parentheses. Output: - The output must be a list of strings. Each string represents a valid combination of balanced parentheses. The list must be sorted in lexicographical order. Examples: Input: ```text 3 ``` Output: ```text [\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"] ``` Input: ```text 2 ``` Output: ```text [\\"(())\\", \\"()()\\"] ``` Input: ```text 1 ``` Output: ```text [\\"()\\"] ``` Note: For the first example with `n = 3`, the valid combinations of balanced parentheses are: - `((()))` - `(()())` - `(())()` - `()(())` - `()()()` These combinations are listed in lexicographical order.","solution":"def generateParenthesis(n): Generates all combinations of n pairs of balanced parentheses sorted lexicographically. def backtrack(s, left, right): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \'(\', left + 1, right) if right < left: backtrack(s + \')\', left, right + 1) result = [] backtrack(\\"\\", 0, 0) return result"},{"question":"In a given string, identify all sequences of consecutive alphabetical characters and return the longest sequence. In case of multiple sequences of the same length, return the one which appears first in the string. For example, given the string `a2b3c2abc567defg!`, the longest sequence of consecutive alphabetical characters is `defg`. Write a function `longest_alphabetical_sequence` that takes a string input and returns the longest sequence of consecutive alphabetical characters. ```python def longest_alphabetical_sequence(s: str) -> str: # Your code goes here pass # Example usage print(longest_alphabetical_sequence(\\"a2b3c2abc567defg!\\")) # should return \\"defg\\" print(longest_alphabetical_sequence(\\"abc12xy34z\\")) # should return \\"abc\\" ```","solution":"def longest_alphabetical_sequence(s: str) -> str: Returns the longest sequence of consecutive alphabetical characters from the input string. max_seq = \\"\\" current_seq = \\"\\" for char in s: if char.isalpha(): current_seq += char if len(current_seq) > len(max_seq): max_seq = current_seq else: current_seq = \\"\\" return max_seq # Example usage print(longest_alphabetical_sequence(\\"a2b3c2abc567defg!\\")) # should return \\"defg\\" print(longest_alphabetical_sequence(\\"abc12xy34z\\")) # should return \\"abc\\""},{"question":"You are playing a game where you need to climb a series of ladders to reach the top of a building. Each ladder has a certain number of steps you need to climb, and you can either take one step or two steps at a time. Your goal is to determine the total number of distinct ways you can reach the top of each ladder. Input: - The first line contains the number of test cases, t. - The next t lines each contain a single integer, n, representing the number of steps in a particular ladder. Output: - For each test case, print the number of distinct ways to reach the top of the ladder. Input Constraints: - 1 ≤ t ≤ 1000 - 1 ≤ n ≤ 30 Sample Input: 3 2 3 5 Sample Output: 2 3 8 Explanation: - For n = 2, you can either take two single steps (1+1) or one double step (2), so there are 2 ways. - For n = 3, you can take steps in the following ways: (1+1+1), (1+2), or (2+1), so there are 3 ways. - For n = 5, you can take steps in the following ways: (1+1+1+1+1), (1+1+1+2), (1+1+2+1), (1+2+1+1), (2+1+1+1), (2+2+1), (2+1+2), (1+2+2), so there are 8 ways.","solution":"def count_ways(n): Returns the number of distinct ways to reach the top of a ladder with n steps, given you can take either 1 step or 2 steps at a time. if n == 0: return 1 if n == 1: return 1 dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n] def process_test_cases(t, cases): results = [] for n in cases: results.append(count_ways(n)) return results"},{"question":"Alice and Bob\'s Magic Stones Game problem Alice and Bob are playing a game with magic stones. There are two piles of magic stones, and the game starts with Alice taking the first turn. The two players take turns to perform their moves. The possible moves are: 1. Remove one stone from one of the piles. 2. Remove any even number of stones (greater than two) from one of the piles and transfer half of those stones to the other pile. The player who cannot make a move loses the game. Alice and Bob always play optimally. Your task is to determine the winner of the game given the initial number of stones in the two piles. Input format The input consists of a single line with two integers `A` and `B`, representing the initial number of magic stones in the first and second piles. Output format Print \\"ALICE\\" if Alice wins, and \\"BOB\\" if Bob wins. Constraints: 1 ≤ A, B ≤ 1000 Example Input 2 3 Output ALICE Input 4 5 Output BOB","solution":"def magic_stones_game(A, B): Determines the winner of the magic stones game. Parameters: A (int): Initial number of stones in the first pile. B (int): Initial number of stones in the second pile. Returns: str: \\"ALICE\\" if Alice wins, \\"BOB\\" if Bob wins. # Alice always starts, and both players play optimally. # Therefore the game is determined by who will always be able to force a win situation. return \\"ALICE\\" if (A + B) % 2 == 1 else \\"BOB\\""},{"question":"Write a program that reads sequences of integers and outputs the median for each sequence. The median is the middle number in a sorted, odd-length list of numbers, or the average of the two middle numbers in a sorted, even-length list. Constraints * Each sequence contains between 1 and 1000 integers. * Each integer in a sequence is between -10000 and 10000. * There are multiple sequences in the input. * The input ends with a sequence containing a single zero (\\"0\\"). This sequence should not be processed. Input The input consists of multiple sequences. Each sequence is given in a single line, with integers separated by spaces. The last line contains only \\"0\\". Output For each sequence, print the median on a new line. Example Input 3 1 2 10 20 30 40 5 3 8 1 0 Output 2 25 4","solution":"def find_median(sequence): Returns the median of a given sequence of integers. sequence.sort() n = len(sequence) if n % 2 == 1: median = sequence[n // 2] else: median = (sequence[n // 2 - 1] + sequence[n // 2]) / 2 return median def process_sequences(input_lines): Processes multiple lines of integer sequences and returns the medians. medians = [] for line in input_lines: sequence = list(map(int, line.split())) if sequence == [0]: break medians.append(find_median(sequence)) return medians"},{"question":"Alice loves arranging her books in a specific order on her shelf. She has n books, each identified by an integer that denotes the number of pages in the book. Alice wants to sort her books on the shelf in non-decreasing order of the number of pages. However, due to limited space on her shelf, she can only keep k books on the shelf at a time. Your task is to help Alice figure out which books to keep on the shelf. Input The first line contains two integers n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ n), the number of books and the number of books that Alice can keep on the shelf at a time, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^5), where ai denotes the number of pages in the ith book. Output Print k integers in non-decreasing order, denoting the number of pages in the books that Alice will keep on the shelf. Example Input 5 3 8 2 5 3 1 Output 1 2 3","solution":"def arrange_books(n, k, books): Returns a list of k books with minimum number of pages in sorted order. Args: n (int): The number of books. k (int): The number of books that can be kept on the shelf at a time. books (list): A list of integers representing the number of pages in each book. Returns: list: A sorted list of the k books with the least number of pages. # Sort the list of books by number of pages sorted_books = sorted(books) # Return the first k books return sorted_books[:k] # Example usage: # n = 5, k = 3, books = [8, 2, 5, 3, 1] # The returned list should be [1, 2, 3]"},{"question":"Implement a function called `is_anagram` that checks whether two given strings are anagrams of each other. An anagram of a string is another string that contains the same characters, only the order of characters can be different. The function should be case-insensitive and ignore spaces and punctuation marks. For example, \\"Dormitory\\" and \\"Dirty room!!\\" are anagrams. Your function should take two strings as input and return `True` if they are anagrams, and `False` otherwise. You are advised to preprocess the strings first, by removing all non-alphabetic characters and converting them to lowercase before performing the comparison. **Function Signature:** ```python def is_anagram(s1: str, s2: str) -> bool: pass ``` **Example Usage:** ```python print(is_anagram(\\"Dormitory\\", \\"Dirty room!!\\")) # Output: True print(is_anagram(\\"Hello, World!\\", \\"world he ol!\\")) # Output: False ```","solution":"import re def is_anagram(s1: str, s2: str) -> bool: Checks whether two given strings are anagrams of each other, ignoring case, spaces, and punctuation marks. # Preprocess the strings by removing non-alphabetic characters and converting to lowercase preprocess = lambda s: \'\'.join(re.findall(r\'[a-z]\', s.lower())) s1_processed = preprocess(s1) s2_processed = preprocess(s2) # Check if the sorted versions of the processed strings are equal return sorted(s1_processed) == sorted(s2_processed)"},{"question":"Given a list of integers, we define a \\"peak\\" element as an element that is greater than its neighbors. For example, in the array [1, 3, 20, 4, 1, 0], the element 20 is a peak element. Your task is to find a peak element in the list. If the list contains multiple peaks, return any one of them. Input: - The first line contains a single integer, n (1 ≤ n ≤ 10^5), the length of the list. - The second line contains n integers separated by spaces, representing the elements of the list (each element is between 1 and 10^9, inclusive). Output: - Output a single integer, the value of any peak element. Note: - The first or last element is considered a peak if it is greater than its only neighbor. - You must solve it in O(log n) time using a binary search algorithm. SAMPLE INPUT 1 6 1 3 20 4 1 0 SAMPLE OUTPUT 1 20 SAMPLE INPUT 2 3 10 20 30 SAMPLE OUTPUT 2 30","solution":"def find_peak_element(nums): Finds a peak element in the list. A peak element is one that is greater than its neighbors. Uses a binary search algorithm to achieve O(log n) complexity. :param nums: List of integers :return: A peak element from the list left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] < nums[mid + 1]: left = mid + 1 else: right = mid return nums[left]"},{"question":"problem You are given a string consisting of only the characters \'a\' and \'b\'. You can perform the following operation any number of times: - Choose a substring \\"ab\\" and replace it with \\"ba\\". The goal is to compute the lexicographically smallest string that can be obtained by applying the above operation any number of times. Input A single string consisting of only \'a\' and \'b\' with length 1 leq l leq 10^5 . Output Output the lexicographically smallest string that can be obtained. Example Input abab Output aabb Input baa Output aab","solution":"def lexicographically_smallest_string(s): Returns the lexicographically smallest string that can be obtained by replacing any substring \\"ab\\" with \\"ba\\" any number of times. # Count the number of \'a\'s and \'b\'s in the input string count_a = s.count(\'a\') count_b = len(s) - count_a # Construct the smallest string by placing all \'a\'s before all \'b\'s return \'a\' * count_a + \'b\' * count_b"},{"question":"Read problems statements in Mandarin Chinese, Russian and Vietnamese as well. Chef is organizing a competition, and he wants to reward participants based on their performance. Each participant receives a score, and Chef wants to ensure each participant gets a unique rank. The highest score should get rank 1, the second highest score should get rank 2, and so on. In case of ties, participants should have the same rank but the next rank should account for all participants with the same score. For example, if scores are [100, 100, 90], the ranks should be [1, 1, 3]. Chef wants you to write a program that, given a list of scores, returns a list of ranks for each participant in the same order as the input scores. ------ Input ------ The first line of input contains one integer N, the number of participants. The second line contains N space-separated integers, where the i^{th} integer denotes the score of the i^{th} participant. ------ Output ------ Output a list of N integers separated by spaces, where the i^{th} integer is the rank of the i^{th} participant. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 1 ≤ scores_{i} ≤ 10^{9} ------ Sample Input 1 ------ 5 100 50 50 25 100 ------ Sample Output 1 ------ 1 3 3 5 1 ------ Explanation 1 ------ Participants with scores [100, 100] get rank 1, participants with scores [50, 50] get rank 3, and the participant with score [25] gets rank 5.","solution":"def rank_participants(scores): Returns the ranks of participants based on their scores. sorted_scores = sorted(((score, index) for index, score in enumerate(scores)), reverse=True, key=lambda x: x[0]) ranks = [0] * len(scores) current_rank = 1 for i, (score, index) in enumerate(sorted_scores): if i > 0 and score != sorted_scores[i - 1][0]: current_rank = i + 1 ranks[index] = current_rank return ranks"},{"question":"You have been given a dictionary consisting of `n` words, each composed of lowercase English letters. Additionally, you are provided with a string `s` of lowercase English letters. Your task is to determine if the string `s` can be segmented into a space-separated sequence of one or more dictionary words. If it is possible to segment the string this way, print \\"yes\\". Otherwise, print \\"no\\". -----Input----- The first line of input will contain an integer `n`, the number of words in the dictionary. The second line contains `n` space-separated strings, each representing a dictionary word. The third line contains the string `s`. -----Output----- Output \\"yes\\" (without quotes) if the string `s` can be segmented into a sequence of one or more dictionary words. Otherwise, output \\"no\\" (without quotes). -----Constraints----- - 1 ≤ n ≤ 300 - 1 ≤ length of each dictionary word ≤ 20 - 1 ≤ |s| ≤ 1000 -----Example----- Input: 5 apple pie pear peach sand applepiepeach Output: yes Input: 3 cat bat rat batratcatmouse Output: no -----Explanation----- For the first case, the string `applepiepeach` can be segmented as \\"apple pie peach\\", which are all valid dictionary words. For the second case, the string `batratcatmouse` cannot be fully segmented into dictionary words due to the substring \\"mouse\\", which is not in the dictionary. Therefore, the output is \\"no\\".","solution":"def can_segment_string(n, dictionary_words, s): Determines if the string `s` can be segmented into one or more dictionary words. Parameters: n (int): Number of words in the dictionary. dictionary_words (list): List of dictionary words. s (str): The string to segment. Returns: str: \\"yes\\" if the string can be segmented, \\"no\\" otherwise. word_set = set(dictionary_words) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return \\"yes\\" if dp[-1] else \\"no\\""},{"question":"Write a program to find the longest word in a given string. If there are multiple words with the same maximum length, return the one that appears first in the string. Input A single line containing a string S, which contains words separated by spaces. Each word consists of lowercase and uppercase English letters. Output A single line containing the longest word. If there are multiple such words, return the first one. Input Constraint 1 ≤ length of S ≤ 1000 SAMPLE INPUT I love programming in Python SAMPLE OUTPUT programming","solution":"def find_longest_word(sentence): Returns the longest word in the given sentence. If there are multiple words with the same maximum length, returns the one that appears first in the sentence. words = sentence.split() longest_word = \\"\\" for word in words: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"Given an integer N, calculate the sum of the series 1^{2} + 2^{2} + 3^{2} + 4^{2} + ... till N-th term. Example 1: Input: N=4 Output: 30 Explanation: 1^{2} + 2^{2} + 3^{2} + 4^{2} = 30 Example 2: Input: N=6 Output: 91 Explanation: 1^{2} + 2^{2} + 3^{2} + 4^{2} + 5^{2} + 6^{2} = 91 Your Task: You do not need to read input or print anything. Your task is to complete the function sumOfSquares() which takes the integer N as a parameter and returns the sum of the squares of the first N natural numbers. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 1000000","solution":"def sumOfSquares(N): Returns the sum of the squares of the first N natural numbers. # Using the formula for the sum of squares of the first N natural numbers return (N * (N + 1) * (2 * N + 1)) // 6"},{"question":"There is a unique type of sequence defined as a \\"mirror-array\\" if it reads the same from left-to-right and right-to-left. More formally, an array A of length n is called \\"mirror-array\\" if A[i] == A[n-1-i] for all 0 ≤ i < n. You are given an array of integers. Determine whether this array is a \\"mirror-array\\". -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) which is the number of elements in the array. The second line contains n integers separated by space. -----Output----- Print \\"YES\\" if the array is a \\"mirror-array\\" and \\"NO\\" otherwise. -----Examples----- Input 5 1 2 3 2 1 Output YES Input 4 1 2 2 3 Output NO Input 1 7 Output YES","solution":"def is_mirror_array(n, array): Determines if the given array is a mirror-array. Args: n (int): The length of the array. array (list of int): The array of integers. Returns: str: \\"YES\\" if the array is a mirror-array, otherwise \\"NO\\". for i in range(n // 2): if array[i] != array[n - 1 - i]: return \\"NO\\" return \\"YES\\" # Example Usage n = 5 array = [1, 2, 3, 2, 1] print(is_mirror_array(n, array)) # Output: YES"},{"question":"A delivery truck needs to transport packages to several addresses in a city represented as a grid. The grid is a n times m matrix where each cell can be either a road (\'R\') or a building (\'B\'). The truck can only move on the roads and can move left, right, up, or down to an adjacent road cell. The truck starts at the top-left corner of the grid (cell (1,1)) and needs to reach the bottom-right corner (cell (n,m)). Your task is to determine the minimum number of steps required for the truck to reach its destination. If it is not possible for the truck to reach the bottom-right corner, return -1. -----Input----- The first line of input contains two positive integers n and m (1 leq n, m leq 500) - the dimensions of the grid. Each of the next n lines contains m characters, where each character is either \'R\' (road) or \'B\' (building). -----Output----- Output a single integer, the minimum number of steps required to reach the bottom-right corner, or -1 if it is not possible. -----Examples----- Input 3 3 RRB RRR BRR Output 4 Input 3 3 RRB RRB RRB Output -1 -----Note----- In the first sample, one of the shortest paths from the top-left corner to the bottom-right corner is as follows: (1,1) rightarrow (1,2) rightarrow (2,2) rightarrow (2,3) rightarrow (3,3) requiring 4 steps.","solution":"from collections import deque def min_steps_to_reach_bottom_right(n, m, grid): Returns the minimum number of steps required for the truck to reach the bottom-right corner in a grid or -1 if it\'s not possible. if grid[0][0] == \'B\' or grid[n-1][m-1] == \'B\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False]*m for _ in range(n)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'R\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"In a certain university, students have to take several exams, with each exam scored out of 100. Each student\'s performance is evaluated based on the average score of their exams. However, to take into account some variability and tougher subjects, the university adopts a special grading policy: the lowest score for each student is dropped, and the average is calculated over the remaining exams. Your task is to write a function that computes the adjusted average score for each student after dropping their lowest score. -----Input----- The input starts with a single integer N, 1 le N le 1000, representing the number of students. For each student, there are two lines. The first line contains a single integer M, 2 le M le 100, which is the number of exams the student has taken. The second line contains M integers 0 le score le 100, representing the student\'s scores. -----Output----- For each student, print their adjusted average score on a new line. The average should be printed as a floating-point number with exactly 2 decimal places. -----Examples----- Sample Input: 3 4 75 80 90 100 3 60 70 80 2 88 92 Sample Output: 90.00 75.00 92.00 Explanation: - For the first student, the lowest score (75) is dropped, and the average of the remaining scores (80, 90, 100) is calculated as (80 + 90 + 100) / 3 = 90.00. - For the second student, the lowest score (60) is dropped, and the average of the remaining scores (70, 80) is calculated as (70 + 80) / 2 = 75.00. - For the third student, the lowest score (88) is dropped, and the average of the remaining score (92) is simply 92.00.","solution":"def adjusted_average_score(n, student_scores): Computes the adjusted average score for each student after dropping their lowest score. Args: n: int - Number of students student_scores: list of tuples - Each tuple contains the number of exams and the list of exam scores Returns: list of floats - List of adjusted average scores for each student, rounded to 2 decimal places results = [] for exams, scores in student_scores: scores.sort() adjusted_scores = scores[1:] # Drop the lowest score average_score = sum(adjusted_scores) / len(adjusted_scores) results.append(round(average_score, 2)) return results def process_input(data): Processes the input data and returns the number of students and their scores in the required format. Args: data: list of strings - Input data as described in the problem statement Returns: tuple: (number of students, list of tuples with exam count and scores) n = int(data[0]) student_scores = [] index = 1 for _ in range(n): m = int(data[index]) scores = list(map(int, data[index + 1].split())) student_scores.append((m, scores)) index += 2 return n, student_scores"},{"question":"You are given a binary tree of N nodes. Each node of the tree contains a positive integer value. You need to perform the following task: 1. Find all possible paths from the root to leaf nodes. 2. For each path, compute the sum of the values of the nodes in the path. Your task is to return the number of distinct sums among all the paths from the root to the leaf nodes. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of nodes in the binary tree. The second line of each test case contains N space separated integers denoting the values of the nodes in level order traversal. The third line of each test case contains N-1 space separated pairs of integers (u, v), (indicating there is an edge between node u and node v). -----Output----- For each test case, output a single line corresponding to the number of distinct sums among all paths from the root to the leaf nodes. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 105 - 1 ≤ Value of nodes ≤ 104 -----Subtasks----- Subtask #1 (30 points) - 1 ≤ N ≤ 103 Subtask #2 (70 points) - original constraints -----Example----- Input 2 3 5 3 7 1 2 1 3 5 1 2 3 4 5 1 2 1 3 2 4 2 5 Output 2 3 -----Explanation----- Example case 1. There are two paths from root to leaf: 5 -> 3 and 5 -> 7. The sums of these paths are 8 and 12. Thus, 2 distinct sums. Example case 2. There are three paths from root to leaf: 1 -> 2 -> 4, 1 -> 2 -> 5, and 1 -> 3. The sums of these paths are 7, 8, and 4. Thus, 3 distinct sums. Note that in level order traversal, the nodes are listed level-by-level, from left to right. Each parent node will appear before its children nodes.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def handle_input_to_tree(N, values, edges): if N == 0: return None nodes = {i + 1: TreeNode(val) for i, val in enumerate(values)} for u, v in edges: if not nodes[u].left: nodes[u].left = nodes[v] else: nodes[u].right = nodes[v] return nodes[1] def get_all_paths_sums(root): if not root: return set() def dfs(node, current_sum, sums): if not node.left and not node.right: sums.add(current_sum + node.value) return if node.left: dfs(node.left, current_sum + node.value, sums) if node.right: dfs(node.right, current_sum + node.value, sums) sums = set() dfs(root, 0, sums) return sums def count_distinct_path_sums(T, test_cases): results = [] for i in range(T): N, values, edge_list = test_cases[i] edges = [(edge_list[j], edge_list[j+1]) for j in range(0, len(edge_list), 2)] root = handle_input_to_tree(N, values, edges) distinct_sums = get_all_paths_sums(root) results.append(len(distinct_sums)) return results"},{"question":"Alex likes sequences very much, and this time he wants to test his skill in finding specific patterns within them. He gave himself a number M and tried to find the M-th number in a special sequence where each number is formed by concatenating all integers from 1 up to that number. For example, if M is 3, the sequence would be: 1, 12, 123 and the M-th number would be 123. The result can get very large, so the answer is required modulo 10^9+7. Input: The first line contains a positive integer Q (number of test cases). Next Q lines contain a number M. Output: Print Q lines of output according to the given problem. Constraints: 1 ≤ Q ≤ 1000 1 ≤ M ≤ 500000 SAMPLE INPUT 2 2 3 SAMPLE OUTPUT 12 123","solution":"MOD = 10**9 + 7 def mth_number(M): Finds the M-th number in a special sequence where each number is formed by concatenating all integers from 1 up to that number. Returns the result modulo 10^9 + 7. result = 0 for i in range(1, M + 1): result = (result * (10 ** len(str(i))) + i) % MOD return result def process_test_cases(Q, test_cases): results = [] for M in test_cases: results.append(mth_number(M)) return results"},{"question":"Given an integer array A of size n, perform q queries on it. Each query is one of the following types: 1. k x — Replace the k-th element of the array with x. 2. l r — Calculate the sum of the elements in the subarray from index l to r, inclusive. Given that sum queries are more frequent than update queries, utilize a data structure that efficiently supports both types of queries. ------ Input Format ------ - The first line contains two integers n and q — the size of the array A and the number of queries. - The second line contains n space-separated integers representing the initial array A. - The next q lines each contain a query of one of the two aforementioned types. ------ Output Format ------ - For each sum query `l r`, output the sum of elements in the subarray from l to r, on a new line. ------ Constraints ------ 1 ≤ n, q ≤ 10^5 1 ≤ A[i] ≤ 10^9 (Initial values of the array) 1 ≤ k ≤ n 1 ≤ l ≤ r ≤ n 1 ≤ x ≤ 10^9 ------ Sample Input 1 ------ 5 5 1 2 3 4 5 2 1 3 1 3 10 2 1 3 1 5 6 2 4 5 ------ Sample Output 1 ------ 6 13 10 ------ Explanation ------ Initially, the array A is [1, 2, 3, 4, 5]. - For the first query `2 1 3`, the sum of the elements in the subarray from index 1 to 3 is 1+2+3 = 6. - For the second query `1 3 10`, we update the 3rd element to 10, so the array becomes [1, 2, 10, 4, 5]. - For the third query `2 1 3`, the sum of the elements in the subarray from index 1 to 3 is now 1+2+10 = 13. - For the fourth query `1 5 6`, we update the 5th element to 6, so the array becomes [1, 2, 10, 4, 6]. - For the fifth query `2 4 5`, the sum of the elements in the subarray from index 4 to 5 is 4+6 = 10.","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, delta): while index <= self.size: self.tree[index] += delta index += index & -index def prefix_sum(self, index): result = 0 while index > 0: result += self.tree[index] index -= index & -index return result def range_sum(self, left, right): return self.prefix_sum(right) - self.prefix_sum(left - 1) def process_queries(n, q, array, queries): fenwick_tree = FenwickTree(n) for i in range(n): fenwick_tree.update(i + 1, array[i]) results = [] for query in queries: if query[0] == 1: k, x = query[1], query[2] current_value = fenwick_tree.range_sum(k, k) fenwick_tree.update(k, x - current_value) elif query[0] == 2: l, r = query[1], query[2] results.append(fenwick_tree.range_sum(l, r)) return results"},{"question":"You are given an array of integers and a set of operations to perform on this array. Each operation is either an update operation to set the value at a specific index or a query operation to find the sum of a specific subarray. Write a program to handle these operations efficiently. -----Input----- The first line contains two integers n and q (1 le n, q le 10^5) — the length of the array and the number of operations. The second line contains n integers, the elements of the array. The next q lines contain operations. Each operation is in one of two formats: - 1 x y: This means update the value at index x to y (1 le x le n). - 2 x y: This means output the sum of the elements in the subarray from index x to y (1 le x le y le n). -----Output----- For each operation of the second type, output the sum of the corresponding subarray. -----Examples----- Input 5 4 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 3 5 Output 6 14 12 -----Note----- In the first example, after the initial array [1, 2, 3, 4, 5], the operations are as follows: - The first query asks for the sum from index 1 to 3, which is 1 + 2 + 3 = 6. - The first update changes the value at index 2 to 10, so the array becomes [1, 10, 3, 4, 5]. - The second query now asks for the sum from index 1 to 3, which is 1 + 10 + 3 = 14. - The third query asks for the sum from index 3 to 5, which is 3 + 4 + 5 = 12.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, index, value): pos = index - 1 + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[pos * 2] + self.tree[pos * 2 + 1] def range_sum(self, left, right): left += self.n - 1 right += self.n sum_ = 0 while left < right: if left % 2 == 1: sum_ += self.tree[left] left += 1 if right % 2 == 1: right -= 1 sum_ += self.tree[right] left //= 2 right //= 2 return sum_ def process_operations(n, arr, operations): segment_tree = SegmentTree(arr) result = [] for operation in operations: if operation[0] == 1: x, y = operation[1], operation[2] segment_tree.update(x, y) elif operation[0] == 2: x, y = operation[1], operation[2] result.append(segment_tree.range_sum(x, y)) return result"},{"question":"A magician has a sequence of n numbers, which she can modify through a special spell. The spell allows her to select two distinct indices i and j in the sequence and swap the numbers at these indices. Her goal is to make the sequence strictly increasing. You need to write a program to determine if it\'s possible for the magician to achieve a strictly increasing sequence using at most one swap operation. -----Input----- The first line contains an integer n (2 le n le 1000) — the length of the sequence. The second line contains n integers separated by spaces — the elements of the sequence (a_1, a_2, ..., a_n), where each element is an integer in the range 1 le a_i le 10^9. -----Output----- Print \\"YES\\" if the sequence can be made strictly increasing by making at most one swap operation and \\"NO\\" otherwise. -----Example----- Input 5 1 5 3 4 2 Output YES Input 4 4 3 2 1 Output NO -----Note----- In the first example, swapping the elements at indices 2 and 5 transforms the sequence to [1, 2, 3, 4, 5], which is strictly increasing. Therefore, the output is \\"YES\\". In the second example, it is not possible to create a strictly increasing sequence with just one swap. Therefore, the output is \\"NO\\".","solution":"def can_be_strictly_increasing(n, sequence): Determines if the sequence can be made strictly increasing by at most one swap. def is_increasing(seq): return all(seq[i] < seq[i+1] for i in range(len(seq) - 1)) if is_increasing(sequence): return \\"YES\\" # Check for candidates to swap for i in range(n): for j in range(i + 1, n): # Swap elements at indices i and j sequence[i], sequence[j] = sequence[j], sequence[i] if is_increasing(sequence): return \\"YES\\" # Swap them back sequence[i], sequence[j] = sequence[j], sequence[i] return \\"NO\\""},{"question":"You are given an array `A` of `n` positive integers. A contiguous subarray `(a_i, a_{i+1}, ..., a_j)` of `A` is said to be \\"good\\" if the sum of the subarray is greater than or equal to a given integer `k`. Your task is to find the length of the smallest \\"good\\" subarray. If no such subarray exists, return `-1`. -----Input----- The first line of the input contains two integers `n` and `k` (1 le n le 10^5, 1 le k le 10^9) — the number of elements in the array, and the required sum. The second line of the input contains `n` positive integers a_1, a_2, dots, a_n (1 le a_i le 10^4) which represent the elements of the array. -----Output----- Print one integer — the length of the smallest \\"good\\" subarray. If no such subarray exists, print `-1`. -----Examples----- Input 5 11 1 2 3 4 5 Output 3 Input 3 8 1 4 5 Output 2 Input 4 15 1 2 3 4 Output -1 -----Note----- In the first example, the smallest subarray with sum greater than or equal to `11` is `[3, 4, 5]` which has length `3`. In the second example, the sum of the smallest subarray `[4, 5]` is `9`, which is greater than `8`, so the length is `2`. In the third example, no subarray has a sum of at least `15`. Therefore, the output is `-1`.","solution":"def smallest_good_subarray_length(n, k, A): Returns the length of the smallest \'good\' subarray in A with sum greater than or equal to k. If no such subarray exists, returns -1. min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += A[end] while current_sum >= k: min_length = min(min_length, end - start + 1) current_sum -= A[start] start += 1 if min_length == float(\'inf\'): return -1 return min_length # Example usage: # n = 5 # k = 11 # A = [1, 2, 3, 4, 5] # print(smallest_good_subarray_length(n, k, A)) # Output: 3"},{"question":"Mia and Noah are avid book readers and host a weekly book club meeting every Saturday. They often rely on book recommendations to choose their next read. Their book club operates with the following rules: 1. They will only read a book if it is recommended by at least one of them. 2. To ensure a fair reading list, they can not pick two consecutive books which are recommended solely by the same person. In other words, if one book is recommended by Noah but not Mia, the next book must not be a sole recommendation by Noah, and vice versa. Given a recommendation list for the upcoming weeks, determine the maximum number of books they can read without violating the rules. -----Input----- The input consists of two lines, one for each person. Each of these lines is of the following form: - One integer 0 leq p leq 1000000 for the number of books this person recommends; - followed by p integers indicating the week numbers (starting from week 0) when a book is recommended by this person. -----Output----- Output a single line containing a single integer, the maximum number of books they can read according to the rules. -----Examples----- Sample Input 1: 2 2 5 3 3 5 6 Sample Output 1: 4 Sample Input 2: 1 3 2 2 4 Sample Output 2: 3","solution":"def max_books(p1, recommendations1, p2, recommendations2): recommendations1 = set(recommendations1) recommendations2 = set(recommendations2) all_recommendations = sorted(recommendations1.union(recommendations2)) max_books = 0 last_person = None for week in all_recommendations: if week in recommendations1 and week in recommendations2: max_books += 1 last_person = None elif week in recommendations1: if last_person != \\"Mia\\": max_books += 1 last_person = \\"Mia\\" else: last_person = None elif week in recommendations2: if last_person != \\"Noah\\": max_books += 1 last_person = \\"Noah\\" else: last_person = None return max_books"},{"question":"A city is represented as a 2D grid of size `n x m`, where each cell can be either land or water. You are given the task of identifying the largest piece of land that can be formed by connecting neighboring land cells either vertically or horizontally. Write a function that, given a 2D grid of \'1\'s (land) and \'0\'s (water), returns the area of the largest piece of connected land. If there is no land, return 0. Example 1: Input: grid = [ [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] Output: 4 Explanation: The largest piece of connected land is formed by 4 cells connected horizontally and vertically. Example 2: Input: grid = [ [\\"0\\",\\"0\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"0\\",\\"0\\"] ] Output: 0 Explanation: There is no land in the given grid. Note: - The input grid will have dimensions `n x m`, where 1 <= n, m <= 100. - Each cell in the input grid is either \'1\' (land) or \'0\' (water).","solution":"def maxAreaOfIsland(grid): def dfs(x, y): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == \'0\': return 0 grid[x][y] = \'0\' area = 1 area += dfs(x + 1, y) area += dfs(x - 1, y) area += dfs(x, y + 1) area += dfs(x, y - 1) return area max_area = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': max_area = max(max_area, dfs(i, j)) return max_area"},{"question":"You are given a string S consisting of lowercase English letters and digits. Your task is to find and output the length of the longest substring that contains only digits. Input A single line containing a string S (1 ≤ length of S ≤ 105). Output Output the length of the longest substring of S that contains only digits. Examples Input abc123def45 Output 3 Input abcxyz Output 0 Note A substring is a contiguous sequence of characters within a string, and the substrings \\"123\\" and \\"45\\" in the first example are the ones consisting of only digits. The longest of these is \\"123\\" with length 3. In the second example, there are no digits in the input string.","solution":"def longest_digit_substring(S): Returns the length of the longest substring that contains only digits. Args: S (str): The input string containing lowercase letters and digits. Returns: int: The length of the longest substring that contains only digits. max_length = 0 current_length = 0 for char in S: if char.isdigit(): current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Given an array of integers, nums, that contains n elements, find the smallest positive integer that is missing from the array. The array can have both positive and negative numbers, and may contain duplicates. Your task is to find an efficient solution with a time complexity of O(n) and space complexity of O(1). Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n space-separated integers representing the array nums (-1,000,000 ≤ nums[i] ≤ 1,000,000). Output Print a single integer — the smallest positive integer missing from the array. Examples Input 5 3 4 -1 1 Output 2 Input 7 1 2 0 -1 -2 -3 5 Output 3 Input 3 1 1 3 Output 2 Note In the first example, the array contains the numbers 3, 4, -1, and 1. The smallest positive integer missing from the array is 2. In the second example, the array contains the numbers 1, 2, 0, -1, -2, -3, and 5. The smallest positive integer missing from the array is 3. In the third example, the array contains the numbers 1, 1, and 3. The smallest positive integer missing from the array is 2.","solution":"def find_smallest_missing_positive(nums): Given a list of integers, return the smallest positive integer that is missing from the list. Using the concept of swapping elements to their correct positions. Time complexity: O(n) Space complexity: O(1) n = len(nums) for i in range(n): # Place nums[i] to the correct position if nums[i] is in the range [1, n] while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: correct_index = nums[i] - 1 nums[i], nums[correct_index] = nums[correct_index], nums[i] # Find the first position where the number is not correct for i in range(n): if nums[i] != i + 1: return i + 1 # If all positions are correct, the missing number is n + 1 return n + 1"},{"question":"You are given a grid with m rows and n columns. Each cell in the grid contains a positive integer value. You want to find a subgrid (a rectangular part of the grid) such that the sum of the integers within it is as large as possible. Note that the subgrid must be at least 1 times 1 in size, and you can choose any arbitrary subgrid from the original grid. Write a program to determine the largest sum of a subgrid. -----Input----- The first line contains two integers m and n (1 leq m, n leq 1000). Each of the following m lines contains n integers, each representing the value within the cell. Each cell value is guaranteed to be between 1 and 10^9. -----Output----- Output a single integer — the largest sum of any subgrid within the given grid. -----Examples----- Input 2 3 1 2 3 4 5 6 Output 21 Input 3 3 1 1 1 1 1 1 1 1 1 Output 9 -----Note----- In the first example, the entire grid itself is the subgrid with the maximum sum 1 + 2 + 3 + 4 + 5 + 6 = 21. In the second example, the grid itself also gives the maximum sum 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 9.","solution":"def max_sum_subgrid(grid): Given a grid of positive integers, return the largest sum of any subgrid. m = len(grid) n = len(grid[0]) max_sum = -float(\'inf\') for top_row in range(m): row_sum = [0] * n for bottom_row in range(top_row, m): for col in range(n): row_sum[col] += grid[bottom_row][col] max_sum = max(max_sum, kadane(row_sum)) return max_sum def kadane(arr): Helper function to find the maximum sum subarray using Kadane\'s algorithm. max_current = max_global = arr[0] for x in arr[1:]: max_current = max(x, max_current + x) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given an array a_1, a_2, dots, a_n where each element is an integer. In one step, you can choose an index x (1 le x le n) and set a_x = a_x mod sum_{i=1}^{n} a_i (modulus operation with the sum of all elements in the array). Your goal is to make any n - 1 elements equal to zero after no more than n + 5 steps. Note that you don\'t have to minimize the number of steps. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains a single integer n (2 le n le 2 cdot 10^5) — the length of the array a. The second line of each test case contains n space-separated integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of array a. It\'s guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print the sequence of operations that will make n - 1 elements of a zeros in the following format: firstly, print one integer m (m le n + 5) — the number of operations; next print m integers x (1 le x le n) — the indices of the corresponding operation. It can be proven that for the given constraints it\'s always possible to find the correct sequence of operations. -----Examples----- Input 2 3 5 7 9 4 1 1 1 1 Output 3 3 3 3 4 1 2 3 -----Note----- In the first test case, the array a = [5, 7, 9] has a sum of 21. For example, you can do the following steps: choose 3: a_3 = 9 mod 21 = 9 and array a = [5, 7, 9]; choose 3: a_3 = 9 mod 21 = 9 and array a = [5, 7, 9]; choose 3: a_3 = 9 mod 21 = 9 and array a = [5, 7, 9]. After three identical operations, you have three of operations to accomplish. In the second test case, the array a = [1, 1, 1, 1] has a sum of 4. For example, you can do the following steps: choose 1: a_1 = 1 mod 4 = 1 and array a = [1, 1, 1, 1]; choose 2: a_2 = 1 mod 4 = 1 and array a = [1, 1, 1, 1]; choose 3: a_3 = 1 mod 4 = 1 and array a = [1, 1, 1, 1]; choose 4: a_4 = 1 mod 4 = 1 and array a = [1, 1, 1, 1]. You\'ve taken four steps to make 3 steps respectively for the relative task.","solution":"def make_elements_zero(t, cases): results = [] for case in cases: n, arr = case total_sum = sum(arr) # If there is any element which is not zero we can use any index # any n-n, n-1 positions will always be set to zero operations = [1] * (n + 1) results.append((n + 1, operations)) return results"},{"question":"Your task is to form a tuple of 3 integers from a given list such that the sum of the three integers is closest to a given target integer. However, this task has a restriction that each integer in the list can be used only once in forming the tuple. Input: The first line contains two integers n and target (3 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9) — the number of integers in the list and the target sum. The second line contains n space-separated integers a_1, a_2, …, a_n (−10^9 ≤ a_i ≤ 10^9) — the given list. Output: Output three integers from the list a_i, a_j, a_k (1 ≤ i < j < k ≤ n) such that the sum is closest to the given target. If there are multiple solutions, you can output any of them. Example: Input: 6 10 -1 2 1 -4 3 5 Output: 2 3 5 Explanation: Among all the possible tuples of 3 integers from the list, the sum of the tuple (2, 3, 5) which equals 10, is the closest to the target value 10. Note: A tuple of three integers can only be used once and the components should be unique values from the list.","solution":"def closest_three_sum(n, target, arr): Returns a tuple of three integers from the list such that the sum is closest to the given target. arr.sort() closest_sum = float(\'inf\') closest_tuple = () for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if abs(target - current_sum) < abs(target - closest_sum): closest_sum = current_sum closest_tuple = (arr[i], arr[left], arr[right]) if current_sum < target: left += 1 elif current_sum > target: right -= 1 else: return (arr[i], arr[left], arr[right]) return closest_tuple"},{"question":"Sara has a new chessboard of size n × m. Each square of the chessboard contains either a 0 or a 1. A valid chessboard should have no two adjacent cells containing the same value. In other words, every pair of horizontally or vertically adjacent cells must contain different values. Sara wants to know how many different valid configurations of the chessboard exist. Two configurations are different if at least one cell contains a different value. Your task is to compute the number of different valid configurations modulo 1000000007 = 10^9 + 7. ----- Input ----- The only line contains two integers n and m (1 ≤ n, m ≤ 10^18). ----- Output ----- Print a single number denoting the number of different valid configurations modulo 1000000007. ----- Examples ----- Input 1 2 Output 2 Input 2 2 Output 2 Input 3 3 Output 0 ----- Note ----- In the first example, there are two possible configurations for a 1 x 2 chessboard: \\"01\\" and \\"10\\". In the second example, the only two possible configurations for a 2 x 2 chessboard are: 01 10 and 10 01 In the third example, there are no valid 3 x 3 chessboards because it\'s not possible to place 0s and 1s in such a way that no two adjacent cells contain the same value.","solution":"MOD = 1000000007 def valid_chessboard_configs(n, m): if n == 1 or m == 1: # For a row or a column, there are 2 valid ways: 010101... or 101010... return 2 elif n == 2 or m == 2: # For a 2-row or 2-column board: # There are 2 valid configurations: # 010101... # 101010... return 2 else: # For n >= 3 and m >= 3, it\'s impossible to have a valid chessboard return 0"},{"question":"A manufacturing company needs to optimize its material usage in order to minimize waste. The company uses rectangular sheets of metal to cut out smaller rectangular parts of specified dimensions. Given a list of required parts and the dimension of the initial large sheet, your task is to figure out the minimum number of large sheets required to fulfill the order. A part can only be cut out if it fits entirely within the current sheet without rotations or overlaps with other parts. You are given: 1. The dimensions of the large sheet. 2. A list of required parts, each specified with its dimensions and quantity. Write a program that calculates the minimum number of large sheets required to cut out all the parts. -----Input:----- The first line contains two integers H and W - the height and width of the large sheet. The second line contains an integer P - the number of different parts required. Each of the next P lines contains three integers h, w, and q - the height and width of the part, and the quantity required. -----Output:----- Print the minimum number of large sheets required. -----Constraints----- - 1 leq H, W, h, w leq 1000 - 1 leq P, q leq 1000 -----Sample Input:----- 20 15 3 5 5 10 10 5 2 2 3 4 -----Sample Output:----- 2 -----Explanation:----- In this case, the large sheet has dimensions 20x15. The parts required are: - 10 parts of 5x5 - 2 parts of 10x5 - 4 parts of 2x3 The optimal arrangement could be: - The first large sheet can cut 9 parts of 5x5 (since 3 rows of 3 parts can fit within 15x15 space). - The second large sheet can cut the remaining 1 part of 5x5, 2 parts of 10x5 (using a 10x15 space), and 4 parts of 2x3 (using up 4x6 space). Therefore, a minimum of 2 large sheets is required.","solution":"def min_sheets_required(H, W, parts): Calculate the minimum number of large sheets required to cut out all the parts. from itertools import product # Initialize the part count array remaining_parts = [] for h, w, q in parts: remaining_parts.append((h, w, q)) sheet_count = 0 while remaining_parts: remaining_area = H * W used_area = [[False] * W for _ in range(H)] # Try to place parts in the current sheet index = 0 while index < len(remaining_parts): h, w, q = remaining_parts[index] placed_count = 0 for x, y in product(range(H - h + 1), range(W - w + 1)): if not any(used_area[i][j] for i in range(x, x + h) for j in range(y, y + w)): for i in range(x, x + h): for j in range(y, y + w): used_area[i][j] = True remaining_area -= h * w placed_count += 1 if placed_count == q: break q -= placed_count if q == 0: remaining_parts.pop(index) else: remaining_parts[index] = (h, w, q) index += 1 if remaining_area <= 0: break # Add a new sheet if there are remaining parts to place sheet_count += 1 return sheet_count"},{"question":"Alice loves to collect figurines! She\'s currently working on organizing her collection by size and color. There are n figurines. Each figurine has a size s_i and a color c_i. Alice has q requests to process. These requests can be of three types: 1. Alice wants to add k new figurines, each with a specified size and color. 2. Alice wants to remove k figurines, each with a specified size and color. 3. Alice wants to count how many figurines match a given size and color. Input The first line contains two integers n and q (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ q ≤ 10^5) — the initial number of figurines and the number of requests, respectively. The next n lines describe each figurine. The i-th line contains two integers s_i and c_i (1 ≤ s_i, c_i ≤ 10^5) — the size and color of the i-th figurine. The next q lines contain the requests. For each request, the first integer of each line is t (1 ≤ t ≤ 3) — the type of request. If t=1, then three integers k, s, and c follow (1 ≤ k ≤ 10^5, 1 ≤ s, c ≤ 10^5). This means k new figurines, each with size s and color c, are added to the collection. If t=2, then three integers k, s, and c follow (1 ≤ k ≤ 10^5, 1 ≤ s, c ≤ 10^5). This means k figurines with size s and color c are removed from the collection. It is guaranteed Alice has enough figurines to fulfill the request. If t=3, then two integers s and c follow (1 ≤ s, c ≤ 10^5). This means Alice wants to know how many figurines of size s and color c are in her collection. Output For each request of the third type (t=3), print the number of figurines that match the given size and color. Example Input 5 5 1 2 2 3 3 2 4 3 5 2 3 2 3 1 2 6 2 3 6 2 2 1 2 3 3 2 3 Output 1 2 0 Note For the first request where t=3, Alice has one figurine of size 2 and color 3. For the second request where t=3, after adding 2 figurines with size 6 and color 2, Alice will have 2 figurines matching these criteria. For the final request where t=3, after removing 1 figurine with size 2 and color 3, Alice has no figurines of size 2 and color 3.","solution":"from collections import defaultdict def manage_figurines(n, q, figurines, requests): # a dictionary that counts the figurines collection = defaultdict(int) # populate the initial collection for s, c in figurines: collection[(s, c)] += 1 result = [] # process the requests for request in requests: if request[0] == 1: # add k figurines of size s and color c _, k, s, c = request collection[(s, c)] += k elif request[0] == 2: # remove k figurines of size s and color c _, k, s, c = request collection[(s, c)] -= k elif request[0] == 3: # count figurines of size s and color c _, s, c = request result.append(collection[(s, c)]) return result"},{"question":"Given an array of positive integers representing the heights of a sequence of buildings, where each building is 1 unit wide, calculate the amount of water that would be trapped between the buildings after a rainstorm. The amount of water trapped between two buildings is determined by the heights of the buildings and the heights of the buildings in between them. You can assume that the left and right edges of the array (first and last elements) are not bounded by any buildings, resulting in no water trapped beyond the edges. Write a function `trap(height: List[int]) -> int` that takes in the array of heights and returns the total amount of water trapped. Example 1: Input: height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output: 6 Example 2: Input: height = [4, 2, 0, 3, 2, 5] Output: 9 Note: - The array size will be at least 1. - The heights will be non-negative integers and fit within the range of a typical 32-bit integer.","solution":"from typing import List def trap(height: List[int]) -> int: Calculate the amount of water that can be trapped after raining based on the given building heights. Parameters: height (List[int]): A list of positive integers representing the heights of buildings. Returns: int: The total amount of trapped water. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - height[i] return total_water"},{"question":"Given a list of intervals, merge all overlapping intervals and return the list of merged intervals in sorted order. Each interval is represented by a list where the first element denotes the start time and the second element denotes the end time. Examples: Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: The intervals [1,3] and [2,6] overlap, so they are merged into [1,6]. Input: [[1,4],[4,5]] Output: [[1,5]] Explanation: The intervals [1,4] and [4,5] are considered overlapping, so they are merged into [1,5]. Note: - The intervals may not be initially sorted. - You may assume that the intervals do not have zero-length, i.e., the start time is always less than the end time.","solution":"def merge_intervals(intervals): Merges all overlapping intervals and returns a list of merged intervals in sorted order. :param intervals: List of intervals where each interval is represented as a list [start, end]. :type intervals: List of List of int :return: A list of merged intervals. :rtype: List of List of int if not intervals: return [] # Sort intervals based on the start time intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # if the list of merged intervals is empty or if the current interval # does not overlap with the previous interval, add it to the list if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # there is overlap, so we merge the current and previous intervals merged[-1][1] = max(merged[-1][1], interval[1]) return merged"},{"question":"A software company is organizing a team outing and needs to rent vehicles for transportation. Each vehicle can carry up to V passengers. Given the number of employees N and the seating capacity V of each vehicle, determine the minimum number of vehicles required. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line of input, containing two space-separated integers N and V — the number of employees and the seating capacity of each vehicle. ------ Output Format ------ For each test case, output in a single line, the minimum number of vehicles required. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10000 1 ≤ V ≤ 1000 ----- Sample Input 1 ------ 3 15 4 7 5 20 10 ----- Sample Output 1 ------ 4 2 2 ----- explanation 1 ------ Test case 1: With 15 employees and each vehicle carrying 4 passengers, we need ceil(15/4) = 4 vehicles. Test case 2: With 7 employees and each vehicle carrying 5 passengers, we need ceil(7/5) = 2 vehicles. Test case 3: With 20 employees and each vehicle carrying 10 passengers, we need ceil(20/10) = 2 vehicles.","solution":"import math def minimum_vehicles_required(T, test_cases): results = [] for i in range(T): N, V = test_cases[i] required_vehicles = math.ceil(N / V) results.append(required_vehicles) return results"},{"question":"Implement a function to find the longest substring of a given string where the characters are all unique. Example: Given str = \\"abcabcbb\\", the function should return \\"abc\\". Given str = \\"bbbbb\\", the function should return \\"b\\". Given str = \\"pwwkew\\", the function should return \\"wke\\". Note: The result must be a substring, \\"pwke\\" is a subsequence and not a substring. Constraints: Do it in linear time complexity, O(n). Credits:Special thanks to Mnemonic for inspiring this problem.","solution":"def longest_unique_substring(s): Returns the longest substring with all unique characters. Parameters: s (str): The input string. Returns: str: The longest substring with all unique characters. char_index_map = {} start = 0 max_len = 0 max_start = 0 for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end if end - start + 1 > max_len: max_len = end - start + 1 max_start = start return s[max_start:max_start + max_len]"},{"question":"# Task: You have been hired to help a social media company to filter out negative comments from their posts. The application should accept a list of comments and a list of negative words. Your task is to return a list of comments that do not contain any of the negative words. # Requirements: - Write a function `filter_comments(comments, negative_words)` which returns an array of filtered comments. - A comment is filtered out if it contains any of the words in the list of negative words. - Word matching should be case insensitive. - A comment is considered to contain a negative word if the negative word is a substring of any word within the comment. # Examples: ```python comments = [ \\"I hate this product, it\'s terrible\\", \\"This is the best service ever\\", \\"Worst experience I\'ve had\\", \\"I love how friendly the staff is\\", \\"This place is not good\\" ] negative_words = [\\"hate\\", \\"terrible\\", \\"worst\\", \\"not good\\"] filter_comments(comments, negative_words) # Expected output: # [\\"This is the best service ever\\", \\"I love how friendly the staff is\\"] ``` ```python comments = [\\"The food is amazing\\", \\"I dislike the ambiance\\", \\"Service was excellent\\"] negative_words = [\\"dislike\\", \\"poor\\", \\"bad\\"] filter_comments(comments, negative_words) # Expected output: # [\\"The food is amazing\\", \\"Service was excellent\\"] ``` # Notes: - The input comments array can be empty, in which case the result should be an empty array. - For simplicity, consider that the words in the comments are separated by spaces and punctuation such as periods, commas, and exclamation marks are not present. - The input list for negative words can also be empty, in which case all comments should be considered positive.","solution":"def filter_comments(comments, negative_words): Filters out comments that contain any negative words. Parameters: comments (list): A list of comments (strings). negative_words (list): A list of negative words (strings). Returns: list: A list of comments without any negative words. filtered_comments = [] for comment in comments: # Convert comment to lowercase for case insensitive matching comment_lower = comment.lower() # Check if any negative word is a substring in the comment if not any(negative_word in comment_lower for negative_word in negative_words): filtered_comments.append(comment) return filtered_comments"},{"question":"Given two strings A and B, find the length of the shortest common supersequence of both the strings. A supersequence is a string that contains both input strings as subsequences. Example 1: Input: A = \\"AGGTAB\\", B = \\"GXTXAYB\\" Output: 9 Explanation: The shortest common supersequence is \\"AGGXTXAYB\\", which has a length of 9. Example 2: Input: A = \\"HELLO\\", B = \\"GEEK\\" Output: 8 Explanation: The shortest common supersequence is \\"HELGEEKLO\\", which has a length of 8. Your Task: You don\'t need to read input or print anything. Your task is to complete the function shortestCommonSupersequence() which takes strings A and B as input and returns the length of the shortest common supersequence. Expected Time Complexity: O(|A|*|B|) Expected Auxiliary Space: O(|A|*|B|) Constraints: 1 <= |A|, |B| <= 100","solution":"def shortestCommonSupersequence(A, B): Returns the length of the shortest common supersequence of strings A and B. m, n = len(A), len(B) # Create a table to store lengths of longest common subsequence. dp = [[0] * (n+1) for _ in range(m+1)] # Populate the dp array for i in range(m+1): for j in range(n+1): if i == 0 or j == 0: dp[i][j] = 0 elif A[i-1] == B[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) # Length of the shortest common supersequence lcs_length = dp[m][n] scs_length = m + n - lcs_length return scs_length"},{"question":"A number sequence is considered beautiful if it can be divided into strictly increasing contiguous subsequences such that each contiguous subsequence has at most k numbers. You are given a number sequence a of length n, determine if it is possible to divide a into strictly increasing contiguous subsequences of length not exceeding k. # Input - The first line of input consists of two integers n and k ((1 leq k leq n leq 100)) — the length of the sequence and the maximum length of the subsequences, respectively. - The second line contains n integers (a_1, a_2, dots, a_n) (1 leq a_i leq 1000) — the sequence of numbers. # Output - Print \\"Yes\\" if it is possible to divide the sequence into strictly increasing contiguous subsequences of length not exceeding k, otherwise \\"No\\". # Examples Input 10 3 1 2 3 4 5 2 3 4 1 2 Output Yes Input 5 2 5 4 3 2 1 Output No","solution":"def is_beautiful_sequence(n, k, a): Given a sequence a of length n, determine if it is possible to divide it into strictly increasing contiguous subsequences such that each subsequence has at most k numbers. Parameters: n (int): Length of the sequence k (int): Maximum length of the subsequences a (list): List of integers representing the sequence Returns: str: \\"Yes\\" if it is possible, otherwise \\"No\\" count = 1 for i in range(1, n): if a[i] <= a[i-1]: count += 1 if count > k: return \\"No\\" return \\"Yes\\""},{"question":"Design a function that calculates the maximum temperature difference in a series of temperature readings over multiple days. You need to return the maximum temperature difference for each day. Input The input consists of multiple datasets. Each dataset represents a single day\'s temperature readings and is given on a separate line. The end of the input is indicated by a line containing a single zero. Each line of the dataset contains space-separated integers where an integer represents the temperature reading at a specific time of that day. There could be any number of readings per day, with a minimum of 2 readings per day and a maximum of 1000 readings per day. The temperature readings range from -100 to 100. Output For each day\'s temperature readings, print a single line containing the maximum temperature difference for that day. Example Input ``` 1 5 10 -5 15 -10 0 -20 10 20 30 25 15 10 5 0 ``` Output ``` 20 30 25 ``` Explanation For the first dataset, the maximum temperature difference is (15 - (-5) = 20). For the second dataset, the maximum temperature difference is (10 - (-20) = 30). For the third dataset, the maximum temperature difference is (30 - 5 = 25).","solution":"def max_temp_differences(data): Calculate the maximum temperature difference for each day\'s temperature readings. results = [] for line in data: if line == \\"0\\": break temperatures = list(map(int, line.split())) max_diff = max(temperatures) - min(temperatures) results.append(max_diff) return results"},{"question":"Aria is a software developer who loves solving coding puzzles. One day, she stumbled upon an interesting challenge: given a string, she wants to determine the longest substring that contains no more than two distinct characters. She asks for your help to write a function that can solve this problem. The function should return the length of the longest substring that contains at most two distinct characters. Input The input consists of a single string s (1 ≤ |s| ≤ 100,000), containing lowercase English letters. Output The output should be a single integer, the length of the longest substring that contains at most two distinct characters. Examples Input: eceba Output: 3 Input: ccaabbb Output: 5 Note For the first example, the longest substring that contains no more than two distinct characters is \\"ece\\", which has a length of 3. For the second example, the longest substring that contains no more than two distinct characters is either \\"aab\\" or \\"abbb\\", both with a length of 5.","solution":"def longest_substring_with_two_distinct(s): Returns the length of the longest substring that contains no more than two distinct characters. if len(s) < 3: return len(s) # Dictionary to store the count of each character in the current window char_count = {} left = 0 # Left bound of the window max_len = 2 for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 # Shrink the window from the left until there are no more than two distinct characters while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Given an integer array `nums`, write a function to return the smallest positive integer that is missing from the array. An integer is considered missing if it does not appear in the array and is within the range from 1 to the length of the array plus one. You should aim for a solution with O(n) time complexity and O(1) space complexity. Input The input consists of a single list of integers `nums`, where the length of `nums` is between 1 and 1000 (inclusive), and each integer in `nums` is within the range from -1000 to 1000 (inclusive). Output Output a single integer, which is the smallest positive integer missing from the array. Examples Input [3, 4, -1, 1] Output 2 Input [1, 2, 0] Output 3 Input [7, 8, 9, 11, 12] Output 1","solution":"def first_missing_positive(nums): Returns the smallest positive integer missing from the array nums. length = len(nums) # First we need to ensure the numbers that are out of the desired range are # replaced with a placeholder (length + 1) which is out of range for i in range(length): if nums[i] <= 0 or nums[i] > length: nums[i] = length + 1 # Use the index as a hash key to record the presence of integers for i in range(length): num = abs(nums[i]) if num <= length: nums[num - 1] = -abs(nums[num - 1]) # Find the first index which is positive, which indicates the missing number for i in range(length): if nums[i] > 0: return i + 1 return length + 1"},{"question":"In a galaxy far, far away, R2-D2 is on a mission to deliver a secret message. He needs to traverse a grid of size n x m, starting from the top-left corner and reaching the bottom-right corner. However, some cells in the grid contain obstacles, and he cannot pass through those cells. R2-D2 can move to the right or downward only. Wondering how many distinct paths he could take to accomplish his mission, he asks for your help to calculate the number of distinct paths from the start point to the end point. -----Input----- The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. The next n lines each contain m characters representing the grid. Each character is either \'.\' (representing a free cell) or \'#\' (representing an obstacle). -----Output----- Print a single integer — the number of distinct paths R2-D2 can take to reach his destination. If there is no valid path, print 0. -----Examples----- Input 3 3 ... .#. ... Output 2 Input 3 3 ... # ... Output 0 -----Note----- In the first example, there are two distinct paths: (0, 0) → (0, 1) → (0, 2) → (1, 2) → (2, 2) and (0, 0) → (1, 0) → (2, 0) → (2, 1) → (2, 2). In the second example, there is no way to reach the bottom-right corner due to obstacles blocking the path.","solution":"def distinct_paths(n, m, grid): Returns the number of distinct paths in an n x m grid from the top-left to the bottom-right, avoiding obstacles. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are given a sequence of n integers: a_1, a_2, dots, a_n. This sequence is called balanced if the sum of elements on even indices is equal to the sum of elements on odd indices. For example, the sequence [1, 3, 2, 2] is balanced because 1 + 2 = 3 + 2. You can perform exactly one operation, where you can choose any two indices i and j (i neq j) and swap the elements at these indices. Your task is to determine if it is possible to make the sequence balanced by performing exactly one swap. -----Input----- The first line contains one integer n (2 le n le 10^5). The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the sequence. -----Output----- Print \\"YES\\" if it is possible to make the sequence balanced by performing exactly one swap. Otherwise, print \\"NO\\". -----Examples----- Input 4 1 3 2 2 Output YES Input 3 1 2 3 Output NO Input 2 1 1 Output YES -----Note----- In the first test case, you can swap the first and second elements to obtain the sequence [3, 1, 2, 2], which is balanced since 3 + 2 = 1 + 2. In the second test case, it is impossible to make the sequence balanced with exactly one swap. In the third test case, the sequence is already balanced, so no swap is needed.","solution":"def can_be_balanced_with_one_swap(n, a): even_sum = sum(a[i] for i in range(0, n, 2)) odd_sum = sum(a[i] for i in range(1, n, 2)) if even_sum == odd_sum: return \\"YES\\" for i in range(n): for j in range(i + 1, n): if (i % 2 == 0 and j % 2 == 1) or (i % 2 == 1 and j % 2 == 0): new_even_sum = even_sum - a[i] + a[j] new_odd_sum = odd_sum - a[j] + a[i] if new_even_sum == new_odd_sum: return \\"YES\\" return \\"NO\\""},{"question":"In this problem, you are given an integer `N` which represents the length of a binary string. The binary string should be constructed according to the following rules: 1. Each \'0\' in the string must be immediately followed by a \'1\'. 2. Each \'1\' in the string must be immediately followed by a \'0\'. Determine if a binary string of length `N` satisfying the above conditions can be formed. If possible, construct such a binary string. If it is not possible, return -1. # Constraints - 1 leq N leq 10^5 # Input The input consists of an integer `N`. # Output If no valid binary string can be formed with length `N`, output -1. Otherwise, output the constructed binary string. # Examples Example 1 **Input** ``` 4 ``` **Output** ``` 0101 ``` Example 2 **Input** ``` 5 ``` **Output** ``` -1 ``` Example 3 **Input** ``` 2 ``` **Output** ``` 10 ```","solution":"def construct_binary_string(N): Construct a binary string of length N such that each \'0\' is followed by \'1\' and each \'1\' is followed by \'0\'. Parameters: N (int): The length of the binary string to be constructed. Returns: str: The constructed binary string or -1 if it is not possible. if N % 2 != 0: return -1 else: return \\"01\\" * (N // 2)"},{"question":"Alex is organizing a fun game night with his friends and decides to play a card game. The game involves a deck of `n` distinct cards numbered from 1 to `n`. The goal is to determine the number of unique sequences of card draws that can be made given certain rules. The rules are as follows: 1. Each player can draw one card at a time. 2. A card can be drawn only once and cannot be put back into the deck. 3. Players can create a new sequence of draws by swapping any two cards in their hand. Given the number of cards in the deck `n`, your task is to determine the number of unique sequences of card draws that can be made. Since this number can be large, you should return the result modulo `10^9 + 7`. Input The first and only line of the input contains a single integer `n` (1 ≤ n ≤ 1000) — the number of cards in the deck. Output Output a single integer — the number of unique sequences of card draws modulo `10^9 + 7`. Examples Input 3 Output 6 Input 5 Output 120 Input 1 Output 1 Note: - For `n = 3`, there are 3! (3 factorial) unique sequences: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]. - For `n = 5`, there are 5! (5 factorial) unique sequences.","solution":"def unique_sequences(n): Returns the number of unique sequences of card draws possible for `n` cards modulo 10^9 + 7. MODULO = 10**9 + 7 result = 1 for i in range(1, n + 1): result = (result * i) % MODULO return result"},{"question":"Chef has a peculiar way of selecting items from a list. Given an array `A` of `N` integers, Chef follows this rule: 1. Chef selects a subset of `A` such that the difference between any two consecutive elements in the subset is even. For instance, if `A = [2, 3, 5, 7]`, then valid subsets could be `[2, 4, 6]`, `[3, 5, 7]`, and so on. Chef wants to select the largest possible subset following the above rule. Write a program to calculate the size of the largest subset Chef can select from the given array. ------ Input ------ The first line contains an integer `T`, the number of test cases. The first line of each test case contains an integer `N`. The second line of each test case contains `N` space-separated integers representing the array `A`. ------ Output ------ For each test case, output a single integer representing the size of the largest subset that can be selected. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 −10^9 ≤ A[i] ≤ 10^9 ------ Sample Input 1 ------ 3 5 2 4 6 8 10 6 1 3 5 7 9 11 4 1 2 3 4 ------ Sample Output 1 ------ 5 6 2 ------ Explanation 1 ------ Example case 1: All elements in `[2, 4, 6, 8, 10]` have even differences between any two consecutive elements, so the largest subset size is 5. Example case 2: All elements in `[1, 3, 5, 7, 9, 11]` have even differences between any two consecutive elements, so the largest subset size is 6. Example case 3: Either `[1, 3]` or `[2, 4]` can be taken as the subset with even differences, so the largest subset size is 2.","solution":"def largest_even_diff_subset(T, test_cases): results = [] for t in range(T): N, A = test_cases[t] evens = sum(1 for x in A if x % 2 == 0) odds = N - evens results.append(max(evens, odds)) return results"},{"question":"Given a sequence of `N` integers where each integer can be either `0` or `1`, you are tasked to determine the minimum number of operations needed to make all elements the same. An operation is defined as follows: * Choose any subarray of consecutive elements and flip all the elements in that subarray (i.e., change all `0`s to `1`s and all `1`s to `0`s). Constraints: * 1 leq N leq 10^{5} * Each element in the sequence is either `0` or `1` Input: Input is given from Standard Input in the following format: ``` N a_1 a_2 ldots a_N ``` Output: Print the minimum number of operations needed to make all elements the same. Examples: Input: ``` 5 0 1 0 1 0 ``` Output: ``` 2 ``` Input: ``` 6 1 1 0 0 1 1 ``` Output: ``` 1 ```","solution":"def min_operations_to_make_same(n, arr): Determines the minimum number of operations needed to make all elements the same using the described flip operation on subarrays of consecutive elements. Parameters: n (int): Number of elements in the array. arr (list of int): The array of 0s and 1s. Returns: int: The minimum number of operations. if n == 0: return 0 # Count transitions between 0 and 1 count_transitions = 0 for i in range(1, n): if arr[i] != arr[i - 1]: count_transitions += 1 # The minimum operations needed is half the number of transitions (rounded up) return (count_transitions + 1) // 2"},{"question":"You are given an integer array and your task is to find the smallest positive integer that does not occur in the array. ------ Input Format ------ - The first line contains an integer T, denoting the number of test cases. - Each test case consists of two lines. - The first line contains an integer N, denoting the size of the array. - The second line contains N space-separated integers, representing the elements of the array. ------ Output Format ------ For each test case, output on a single line the smallest positive integer that does not occur in the array. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 -10^6 ≤ array[i] ≤ 10^6 ------ Sample Input 1 ------ 3 3 1 2 0 5 -1 2 3 4 5 5 1 1 0 -1 -2 ------ Sample Output 1 ------ 3 1 2 ------ Explanation 1 ------ Test case 1: The smallest positive integer missing from the array [1, 2, 0] is 3. Test case 2: The smallest positive integer missing from the array [-1, 2, 3, 4, 5] is 1. Test case 3: The smallest positive integer missing from the array [1, 1, 0, -1, -2] is 2.","solution":"def smallest_missing_positive_integer(arr): This function returns the smallest positive integer that does not occur in the given array. s = set(arr) i = 1 while i in s: i += 1 return i def process_test_cases(test_cases): This function processes multiple test cases to find the smallest positive integer missing in each. results = [] for case in test_cases: n, arr = case result = smallest_missing_positive_integer(arr) results.append(result) return results def parse_input(input_lines): Parses the input lines into structured test cases. T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) arr = list(map(int, input_lines[index + 1].split())) test_cases.append((N, arr)) index += 2 return test_cases"},{"question":"Write a function `uniqueCharacters(s)` that takes a string `s` as input and returns `true` if the string contains all unique characters, or `false` otherwise. For example, `uniqueCharacters(\'hello\')` is False because \'l\' appears twice, whereas `uniqueCharacters(\'world\')` is True because all characters are unique.","solution":"def uniqueCharacters(s): Returns True if the string s contains all unique characters, False otherwise. return len(set(s)) == len(s)"},{"question":"Imagine you are working on a new feature for a text editor that auto-formats code. One of the formatting rules is to ensure that there are no lines with trailing spaces. You need to write a program that takes a multiline string input and removes any trailing spaces from each line. Input format: A multi-line string input (denoted as text). Output format: The same multi-line string with all trailing spaces removed from each line. Constraints: The number of lines in the input text will not exceed 1000. Each line in the input text will not exceed 1000 characters. SAMPLE INPUT Hello, World! This is a test. Trailing spaces should be removed. SAMPLE OUTPUT Hello, World! This is a test. Trailing spaces should be removed.","solution":"def remove_trailing_spaces(text): Removes trailing spaces from each line of the input text. Parameters: text (str): The multi-line string input. Returns: str: The multi-line string with trailing spaces removed from each line. lines = text.split(\'n\') cleaned_lines = [line.rstrip() for line in lines] return \'n\'.join(cleaned_lines)"},{"question":"In a small town, there is an old bridge that serves as the only connection between the two separated parts of the town. Due to recent safety concerns, the town officials have decided to restrict the maximum weight that can be on the bridge at any given time. You have been hired to ensure that a list of trucks can cross the bridge without exceeding this weight restriction. Each truck has a specific weight, and the bridge can hold up to a certain maximum weight at any time. The trucks will cross one by one in the order they are listed, and you need to determine the maximum number of trucks that can be on the bridge simultaneously without exceeding the weight limit. -----Input----- The input starts with a line containing two integers 1 leq N leq 100000 and 1 leq W leq 1000000000, where N is the number of trucks and W is the maximum total weight that the bridge can hold at any time. The second line contains N integers 1 leq w_i leq 1000000, where w_i is the weight of the i-th truck. -----Output----- Output a single integer, the maximum number of trucks that can be on the bridge simultaneously without the total weight exceeding W. -----Examples----- Sample Input 1: 5 10 1 2 3 4 5 Sample Output 1: 4 Sample Input 2: 4 6 3 3 3 3 Sample Output 2: 2 Sample Input 3: 6 15 2 3 7 10 1 5 Sample Output 3: 3","solution":"def max_trucks_on_bridge(N, W, truck_weights): Determines the maximum number of trucks that can be on the bridge simultaneously without exceeding the weight limit. :param N: Integer, number of trucks :param W: Integer, maximum total weight the bridge can hold :param truck_weights: List of integers, weights of the trucks :return: Integer, maximum number of trucks that can be on the bridge simultaneously # Initialize variables to keep track of sum of current weights and number of trucks current_weight = 0 count = 0 for weight in truck_weights: if current_weight + weight <= W: current_weight += weight count += 1 else: break return count"},{"question":"In a distant galaxy, the inhabitants of the planet Nibiru use a unique calendar system for their dates. Each date is represented as a string of letters from \'a\' to \'z\', and the dates are ordered lexicographically. The council of Nibiru wants to know how many dates fall between two given dates in their calendar system, inclusive of the two dates. Your task is to write a program to find out the number of dates that lie between two given dates (inclusive). More specifically, given the start date and end date in string format, both consisting of lowercase English letters, you need to determine how many dates exist in between these two dates. Input The input consists of two lines. The first line contains the start date (a non-empty string of length ≤ 10), and the second line contains the end date (a non-empty string of length ≤ 10). Output Output a single integer, the number of dates from the start date to the end date in the given calendar, inclusive. Constraints - The length of the start date and end date strings will be between 1 and 10, inclusive. - Both dates will only contain lowercase English letters (\'a\'-\'z\'). - The start date is guaranteed to be lexicographically less than or equal to the end date. Examples Input a z Output 26 Input abc abd Output 2 Input abc abc Output 1 Note In the first sample, all single-letter dates from \'a\' to \'z\' are counted, making the total 26. In the second sample, the dates are \'abc\' and \'abd\', so there are only two dates in between. In the third sample, the start date and end date are the same, so there is only one date in between.","solution":"def count_dates_between(start_date, end_date): Returns the number of dates between start_date and end_date inclusive. def string_to_number(string): num = 0 for char in string: num = num * 26 + (ord(char) - ord(\'a\')) return num start_num = string_to_number(start_date) end_num = string_to_number(end_date) return (end_num - start_num + 1)"},{"question":"You are given a 2D grid of size m x n, initialized with these three possible values: - -1: a wall or an obstacle. - 0: a gate. - INF: an empty room. We define INF as 2^31 - 1, which is an approximation of infinity since you are guaranteed that no room or gate will exceed this value. Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should remain filled with INF. You are required to implement the function `wallsAndGates(grid: List[List[int]]) -> None` that modifies the grid in-place. # Constraints: - The number of rows and columns in the grid does not exceed 200. - Any room can only move four directions (left, right, up, down). # Input - A 2D list of integers representing the grid. # Output - The grid should be modified in-place; no return is required. # Example ```python Input: [ [inf, -1, 0, inf], [inf, inf, inf, -1], [inf, -1, inf, -1], [ 0, -1, inf, inf] ] Output: [ [ 3, -1, 0, 1], [ 2, 2, 1, -1], [ 1, -1, 2, -1], [ 0, -1, 3, 4] ] ``` # Function signature ```python def wallsAndGates(grid: List[List[int]]) -> None: pass ``` # Note In the given example, starting from the gates at (0,2) and (3,0), the shortest distance to each empty room is calculated. Rooms that cannot reach the gate remain filled with INF.","solution":"from typing import List from collections import deque def wallsAndGates(grid: List[List[int]]) -> None: INF = 2**31 - 1 rows, cols = len(grid), len(grid[0]) queue = deque() # Enqueue all gates (0s) for r in range(rows): for c in range(cols): if grid[r][c] == 0: queue.append((r, c)) # BFS from the gates directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while queue: r, c = queue.popleft() for dr, dc in directions: rr, cc = r + dr, c + dc if 0 <= rr < rows and 0 <= cc < cols and grid[rr][cc] == INF: grid[rr][cc] = grid[r][c] + 1 queue.append((rr, cc))"},{"question":"A group of friends decided to organize a day out at the amusement park. They planned different rides and activities, each having a specific start time and end time. The friends want to maximize the number of rides and activities they can participate in, without any overlaps in their schedule. Each activity is represented by a pair of integers [start_i, end_i] where \'start_i\' is the start time and \'end_i\' is the end time of the activity. The start time and end time are given in 24-hour format as integers between 0 and 2400 (inclusive), with \'start_i\' < \'end_i\'. Write a program to find the maximum number of non-overlapping activities that the friends can participate in during their day out. Input The first line contains one integer n (1 ≤ n ≤ 10^5) which is the number of activities. Each of the next n lines contains two integers start_i and end_i (0 ≤ start_i < end_i ≤ 2400). Output Print a single number — the maximum number of non-overlapping activities the friends can participate in. Examples Input 4 1000 1030 1100 1200 1230 1300 1200 1230 Output 4 Input 3 1900 2000 1800 1900 1700 1800 Output 3 Input 5 900 1030 1000 1100 1030 1200 1330 1430 900 900 Output 4","solution":"def max_non_overlapping_activities(n, activities): This function receives the number of activities and a list of activities (each activity is a list of two integers [start, end]) and returns the maximum number of non-overlapping activities. # Sort activities based on their end times. activities.sort(key=lambda x: x[1]) max_activities = 0 last_end_time = -1 for start, end in activities: # If the current activity starts after the last selected activity ends if start >= last_end_time: max_activities += 1 last_end_time = end return max_activities"},{"question":"You are given a grid of size n x n filled with integers. Your task is to find the sum of the numbers in the diagonals of the grid. The diagonals include both the primary diagonal and the secondary diagonal. The primary diagonal of a square matrix goes from the top-left corner to the bottom-right corner, whereas the secondary diagonal goes from the top-right corner to the bottom-left corner. However, there is a twist: if an element belongs to both diagonals (i.e., if it is in the middle of an odd-sized n x n grid), it should only be included once in the sum. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the size of the grid. The next n lines contain n space-separated integers each representing the elements of the grid. Let grid[i][j] be the element in the i-th row and j-th column of the grid, where 1 ≤ i, j ≤ n. Output Print a single integer, the sum of the elements in both diagonals of the grid. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 25 Input 2 1 2 3 4 Output 10 Note In the first example: - Elements in the primary diagonal are: 1, 5, 9 - Elements in the secondary diagonal are: 3, 5, 7 The sum is 1 + 5 + 9 + 3 + 7 = 25, but 5 is included only once since it belongs to both diagonals. In the second example: - Elements in the primary diagonal are: 1, 4 - Elements in the secondary diagonal are: 2, 3 The sum is 1 + 4 + 2 + 3 = 10.","solution":"def diagonal_sum(n, grid): primary_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(n): primary_diagonal_sum += grid[i][i] secondary_diagonal_sum += grid[i][n-1-i] # If the grid size is odd, subtract the middle element once because it is counted twice if n % 2 == 1: middle_element = grid[n//2][n//2] return primary_diagonal_sum + secondary_diagonal_sum - middle_element else: return primary_diagonal_sum + secondary_diagonal_sum"},{"question":"You are given three integers representing the sides of a triangle. Determine whether the triangle is an equilateral, isosceles, or scalene triangle. An equilateral triangle has three equal sides. An isosceles triangle has exactly two equal sides. A scalene triangle has all three sides of different lengths. Print the type of triangle. -----Constraints----- - All input values are integers. - 1≤side1≤10^4 - 1≤side2≤10^4 - 1≤side3≤10^4 -----Input----- The input is given from Standard Input in the following format: side1 side2 side3 -----Output----- Print the type of the triangle: \\"Equilateral\\", \\"Isosceles\\", or \\"Scalene\\". -----Sample Input----- 5 5 5 -----Sample Output----- Equilateral The triangle with sides 5, 5, and 5 is an equilateral triangle because all three sides are equal. -----Sample Input----- 6 5 5 -----Sample Output----- Isosceles The triangle with sides 6, 5, and 5 is an isosceles triangle because two sides are equal. -----Sample Input----- 3 4 5 -----Sample Output----- Scalene The triangle with sides 3, 4, and 5 is a scalene triangle because all three sides are different.","solution":"def triangle_type(side1, side2, side3): Determines the type of a triangle given its three sides. Parameters: side1 (int): The length of the first side. side2 (int): The length of the second side. side3 (int): The length of the third side. Returns: str: \\"Equilateral\\" if the triangle is equilateral, \\"Isosceles\\" if the triangle is isosceles, \\"Scalene\\" if the triangle is scalene. if side1 == side2 == side3: return \\"Equilateral\\" elif side1 == side2 or side2 == side3 or side1 == side3: return \\"Isosceles\\" else: return \\"Scalene\\""},{"question":"# Problem statement In a code review session, developers encountered a need to calculate the Levenshtein distance between two strings. The Levenshtein distance is a measure of the difference between two strings. It is defined as the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one string into the other. Given two strings ( s1 ) and ( s2 ), implement a function that calculates their Levenshtein distance. **Function Signature** ```python def levenshtein_distance(s1: str, s2: str) -> int: pass ``` **Input:** - ( s1 ): A string of length ( n ) (1 ≤ ( n ) ≤ 5000) - ( s2 ): A string of length ( m ) (1 ≤ ( m ) ≤ 5000) **Output:** - Return an integer representing the Levenshtein distance between ( s1 ) and ( s2 ). **Example:** **Example 1:** ```python s1 = \\"kitten\\" s2 = \\"sitting\\" print(levenshtein_distance(s1, s2)) ``` Output: `3` **Example 2:** ```python s1 = \\"flaw\\" s2 = \\"lawn\\" print(levenshtein_distance(s1, s2)) ``` Output: `2` **Example 3:** ```python s1 = \\"intention\\" s2 = \\"execution\\" print(levenshtein_distance(s1, s2)) ``` Output: `5` **Note:** - In the first example, the edit distance between \\"kitten\\" and \\"sitting\\" is 3. The edits are: - Substitute \'k\' with \'s\' - Substitute \'e\' with \'i\' - Append \'g\' - In the second example, the edit distance between \\"flaw\\" and \\"lawn\\" is 2. The edits are: - Substitute \'f\' with \'l\' - Insert \'n\' at the end - Optimize the implementation for the given input size constraints, ensuring your solution can handle the maximum input lengths efficiently.","solution":"def levenshtein_distance(s1: str, s2: str) -> int: Calculates the Levenshtein distance between two strings s1 and s2. n, m = len(s1), len(s2) # Initialize matrix to (n+1) x (m+1) dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill the first row and the first column for i in range(n + 1): dp[i][0] = i for j in range(m + 1): dp[0][j] = j # Compute the minimum edit distance for i in range(1, n + 1): for j in range(1, m + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min( dp[i - 1][j] + 1, # Deletion dp[i][j - 1] + 1, # Insertion dp[i - 1][j - 1] + 1 # Substitution ) return dp[n][m]"},{"question":"Given an array of integers and an integer k, find the maximum possible sum of k consecutive elements in the array. -----Constraints----- - 1 leq k leq n leq 10^5 - -10^4 leq arr[i] leq 10^4 -----Input----- Input is given from Standard Input in the following format: n k arr_1 arr_2 ... arr_n -----Output----- Print the maximum sum of k consecutive elements. -----Sample Input----- 7 3 1 2 3 4 5 6 7 -----Sample Output----- 18 The maximum sum is obtained by the last three elements (5, 6, 7).","solution":"def max_sum_of_k_consecutive_elements(n, k, arr): Returns the maximum possible sum of k consecutive elements in the array. Parameters: - n: int, length of the array - k: int, number of consecutive elements to sum - arr: list of int, the array of integers Returns: - int, the maximum sum of k consecutive elements if n < k or k <= 0 or n <= 0: return 0 # Initial sum of the first k elements max_sum = sum(arr[:k]) current_sum = max_sum # Use sliding window to find maximum sum of k consecutive elements for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Your small community organizes a network of volunteers who assist with delivering groceries to those unable to venture out, particularly focusing on elderly individuals and those with disabilities. Each volunteer is responsible for delivering to specific areas within the community, and each area has a list of households needing delivery services. Your task is to assign volunteers in a way that maximizes coverage of households needing delivery services. To clarify, each volunteer can cover certain areas, and there may be overlap between the areas they can cover. You need to assign volunteers to areas in such a way that as many unique households as possible can get deliveries, possibly also specifying the order of assignments. -----Input----- The first line contains an integer, 2 leq M leq 20, that indicates the number of areas needing coverage. The next M lines each describe an area with its list of household identifiers (which are unique integers) that need grocery deliveries. Each line begins with the area name, followed by space-separated household identifiers (integers). Following these, an integer 1 leq V leq 15 specifies the number of available volunteers. The next V lines specify volunteer coverage areas. Each line begins with a volunteer identifier (a string of up to 10 characters), followed by space-separated area names that this volunteer can cover. -----Output----- Output the maximum number of unique households that can be served by optimally assigning volunteers to areas. If there are multiple assignments that yield the same maximal coverage, you can output any one of these optimal assignments. -----Examples----- Sample Input 1: 3 Area1 1 2 3 Area2 2 4 Area3 5 6 2 Vol1 Area1 Area2 Vol2 Area2 Area3 Sample Output 1: 6 Sample Input 2: 2 North 1 2 South 3 4 5 1 Helper1 North South Sample Output 2: 5","solution":"from itertools import combinations def parse_input(M, areas_info, V, volunteer_info): areas = {} # Dictionary to store areas and their households volunteers = {} # Dictionary to store volunteers and their coverage for area_info in areas_info: parts = area_info.split() area_name = parts[0] households = set(map(int, parts[1:])) areas[area_name] = households for vol_info in volunteer_info: parts = vol_info.split() vol_name = parts[0] coverage = parts[1:] volunteers[vol_name] = coverage return areas, volunteers def max_unique_households(M, areas_info, V, volunteer_info): areas, volunteers = parse_input(M, areas_info, V, volunteer_info) all_volunteers = list(volunteers.keys()) max_households_covered = 0 for r in range(1, len(all_volunteers) + 1): for vol_combo in combinations(all_volunteers, r): covered_households = set() for vol in vol_combo: for area in volunteers[vol]: if area in areas: covered_households.update(areas[area]) max_households_covered = max(max_households_covered, len(covered_households)) return max_households_covered # Example usage M = 3 areas_info = [ \\"Area1 1 2 3\\", \\"Area2 2 4\\", \\"Area3 5 6\\" ] V = 2 volunteer_info = [ \\"Vol1 Area1 Area2\\", \\"Vol2 Area2 Area3\\" ] print(max_unique_households(M, areas_info, V, volunteer_info)) # Output: 6"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For example, \\"madam\\" and \\"racecar\\" are palindromes. In this problem, you are given a string s, and your task is to find the longest palindromic substring in s. A substring is a contiguous segment of a string. Write a program that takes multiple test cases as input. Each test case consists of a single string s (1 ≤ length of s ≤ 1000). The input ends when the string \\"END\\" is encountered, which should not be processed. For each test case, print the longest palindromic substring found in s. If there are multiple longest palindromic substrings of the same length, print the first one found. Input: The input consists of multiple lines, each containing a single string s. The input ends with the string \\"END\\". Output: For each test case, print the longest palindromic substring found in the given string s. Sample Input: babad cbbd racecar END Sample Output: bab bb racecar","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. If there are multiple substrings, return the first one found. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] if not s: return \\"\\" longest = \\"\\" for i in range(len(s)): # Odd length palindromes temp = expand_around_center(s, i, i) if len(temp) > len(longest): longest = temp # Even length palindromes temp = expand_around_center(s, i, i + 1) if len(temp) > len(longest): longest = temp return longest def process_cases(input_cases): results = [] for s in input_cases: if s == \\"END\\": break results.append(longest_palindromic_substring(s)) return results"},{"question":"Johnny loves collecting coins. He has a collection of coins of different denominations and wants to organize them. Given a list of integers representing the denominations of Johnny\'s coins, Johnny wants to know the maximum number of unique denominations he can have if he is allowed to pick at most K coins from his collection. ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - The first line of each test case contains two integers N and K - the total number of coins in Johnny\'s collection and the maximum number of coins Johnny can pick. - The second line of each test case contains N integers - the denominations of the coins in Johnny\'s collection. ------ Output Format ------ For each test case, output the maximum number of unique denominations Johnny can have if he picks at most K coins. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ K ≤ N 1 ≤ denomination of coins ≤ 100 ----- Sample Input 1 ------ 2 7 3 5 3 8 3 3 7 8 5 2 1 2 2 5 5 ----- Sample Output 1 ------ 3 2 ----- explanation 1 ------ Test case-1: Johnny can pick at most 3 coins. The denominations he can pick are {5, 3, 8}, which are all unique. Test case-2: Johnny can pick at most 2 coins. The denominations he can pick are {1, 2}, which are both unique.","solution":"def max_unique_denominations(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] denominations = test_cases[i][1] # Find the unique denominations unique_denominations = len(set(denominations)) # The maximum unique denominations he can get is the minimum # of the unique denominations available and K (maximum coins he can pick) results.append(min(unique_denominations, K)) return results"},{"question":"Marcus is an avid cyclist and likes to track his weekly cycling distances. He has a habit of planning his week in advance by setting a target distance he aims to travel by the end of the week. Marcus wants to know if he stays on track with his daily distances to meet his weekly target. You are given an array `dist` of 7 non-negative integers, where `dist[i]` represents the distance Marcus traveled on the `i-th` day of the week. You are also given an integer `target`, which is the total distance Marcus aims to travel by the end of the week. Write a function to determine the minimum number of additional kilometers Marcus must travel on a single day in the remaining days (if possible) to meet or exceed his weekly target. If Marcus has already met or exceeded his target distance, the function should return 0. If it is not possible to meet the target even after Marcus travels on all remaining days, the function should return -1. # Function Signature: ```python def min_additional_distance(dist: List[int], target: int) -> int: ``` # Input - `dist` (List[int]): A list of 7 non-negative integers representing the distances Marcus traveled on each day of the week. - `target` (int): A non-negative integer representing Marcus\'s target distance for the week. # Output - An integer representing the minimum additional kilometers Marcus must travel on a single day to meet or exceed his target. # Constraints - The sum of all distances can be negative if Marcus hasn\'t traveled yet (`0 leq sum(dist) leq 10^5`). - `0 leq dist[i] leq 10^4` for all `0 leq i < 7` - `0 leq target leq 10^6` # Examples Example 1 ```python dist = [0, 5, 7, 10, 6, 4, 2] target = 40 assert min_additional_distance(dist, target) == 0 ``` Example 2 ```python dist = [0, 0, 0, 0, 0, 0, 0] target = 50 assert min_additional_distance(dist, target) == -1 ``` Example 3 ```python dist = [5, 10, 15, 5, 5, 5, 5] target = 60 assert min_additional_distance(dist, target) == 15 ``` # Explanation In the first example, Marcus already has traveled a total of 34 kilometers by the end of the week, and since his target is 40 kilometers, the additional distance he must travel is 0. In the second example, Marcus has traveled 0 kilometers so far and even if he travels every day, he can\'t meet his weekly target. So, the function returns -1. In the third example, Marcus traveled a total of 50 kilometers by the end of six days and needs an additional 10 kilometers to meet his target. As there are more days left to travel, Marcus can achieve his target in the subsequent days.","solution":"from typing import List def min_additional_distance(dist: List[int], target: int) -> int: Determines the minimum number of additional kilometers Marcus must travel on a single day to meet or exceed his weekly target distance. total_distance = sum(dist) # If Marcus has already met or exceeded his target distance if total_distance >= target: return 0 # Calculate the required distance Marcus needs to travel to meet the target required_additional_distance = target - total_distance # Determine the maximum additional distance he could travel in one of the remaining days max_possible_distance_per_day = 10000 # Since he can travel up to 10000 km in a single day, # Check if required additional distance is less than or equal to maximum possible in one day if required_additional_distance <= max_possible_distance_per_day: return required_additional_distance # If it\'s not possible to cover the required additional distance in one of the remaining days return -1"},{"question":"A company wants to store sales data for each of its products on a quarterly basis. Each product is represented by a unique string identifier and has sales figures for four quarters of a year. The company wants to analyze the performance of the products by calculating the average quarterly sales for each product, and then identifying how many products met or exceeded a certain sales target. Your task is to write a program that does this analysis. Input The first line of input contains an integer `n` (1 ≤ n ≤ 1000), the number of products. The following `n` lines each contain a string `identifier`, followed by four integers representing the sales figures for the product\'s four quarters, separated by space. Each `identifier` is composed of lowercase and/or uppercase English letters, digits, and has a length between 1 and 20 characters. The four quarterly sales figures are non-negative integers not exceeding 1,000,000. The last line contains a single integer `target`, the sales target. Output Print a single integer, the number of products that have an average quarterly sales figure greater than or equal to `target`. Examples Input 3 product1 100 200 300 400 product2 500 600 700 800 product3 150 250 350 450 300 Output 2 Input 2 prodA 200 300 400 500 prodB 100 150 200 250 275 Output 1 Note In the first example, the average quarterly sales for the three products are 250, 650, and 300, respectively. The number of products with an average of at least 300 is 2 (product2 and product3). In the second example, the average quarterly sales for prodA and prodB are 350 and 175, respectively. Only prodA meets or exceeds the target of 275.","solution":"def count_products_meeting_target(n, products, target): Function to count the number of products with average quarterly sales >= target. Args: n : int : number of products. products : list of str : list containing product identifiers and their quarterly sales. target : int : target average quarterly sales. Returns: int : number of products meeting or exceeding the target average quarterly sales. count = 0 for product in products: data = product.split() identifier = data[0] sales = list(map(int, data[1:])) average_sales = sum(sales) / 4 if average_sales >= target: count += 1 return count"},{"question":"In a 2D grid-based game, you are given a grid with `n` rows and `m` columns. Each cell in the grid can be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). A player starts from the top-left cell of the grid (1, 1) and needs to reach the bottom-right cell (n, m) following certain movement rules: 1. The player can move to the right to the adjacent cell (i, j+1) if it is empty. 2. The player can move down to the adjacent cell (i+1, j) if it is empty. 3. The player can move diagonally to the bottom-right cell (i+1, j+1) if it is empty. You need to determine if there exists a path from the top-left cell to the bottom-right cell. If a path exists, output \\"YES\\", otherwise output \\"NO\\". # Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — the dimensions of the grid. - The next `n` lines contain `m` characters each (\'.\' or \'#\') representing the grid. # Output: - Output a single line with \\"YES\\" if there exists a path, otherwise output \\"NO\\". # Example: Input: ``` 4 4 . . . . . # . . . . # # . . . . ``` Output: ``` YES ``` # Explanation: There is a path (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (4,4). So, the answer is \\"YES\\".","solution":"def path_exists(n, m, grid): Determines if there exists a path from the top-left cell to the bottom-right cell. The player can move right, down, or diagonally to the bottom-right if cells are empty. Parameters: n (int): number of rows in the grid. m (int): number of columns in the grid. grid (list of str): the grid representation of the game board. Returns: str: \\"YES\\" if a path exists, otherwise \\"NO\\". if grid[0][0] == \'#\' or grid[n - 1][m - 1] == \'#\': return \\"NO\\" visited = [[False] * m for _ in range(n)] directions = [(1, 0), (0, 1), (1, 1)] # down, right, bottom-right (diagonal) def dfs(x, y): if x == n - 1 and y == m - 1: return True visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': if dfs(nx, ny): return True return False if dfs(0, 0): return \\"YES\\" return \\"NO\\""},{"question":"Write a function `count_squares(n, m)` that takes two integers `n` and `m` representing the dimensions of a rectangle and returns the number of unique squares that can be formed within the rectangle. A square within the rectangle must have sides parallel to the sides of the rectangle and can vary in size as long as it fits within the `n x m` dimensions. For example: - `count_squares(2, 3)` should return 8. - `count_squares(4, 4)` should return 30. Consider squares of all possible sizes that can fit within the given rectangle and provide the total count.","solution":"def count_squares(n, m): Returns the number of unique squares that can be formed within a rectangle of dimensions n x m. count = 0 # Iterate over possible square sizes for size in range(1, min(n, m) + 1): count += (n - size + 1) * (m - size + 1) return count"},{"question":"In this coding challenge, you will be given an array of integers and your task is to find the next greater element for each element in the array. The next greater element of a number x is the first greater number to its right. If there is no greater number to the right, the next greater element is considered to be -1. For example: * `next_greater_elements([4, 5, 2, 10]) = [5, 10, 10, -1]` * `next_greater_elements([3, 7, 1, 7, 8, 4]) = [7, 8, 7, 8, -1, -1]` Note: The function should return a new array where each position holds the next greater element of the corresponding element in the input array. Input constraints: - The input array will have at least one element. - The elements of the array will be non-negative integers. Good luck!","solution":"def next_greater_elements(arr): Given an input array of integers, return an array where each element is replaced by the next greater element to its right. If no greater element exists to the right for a specific position, -1 is placed. n = len(arr) result = [-1] * n stack = [] # Traverse the list in reverse order for i in range(n - 1, -1, -1): while stack and stack[-1] <= arr[i]: stack.pop() if stack: result[i] = stack[-1] stack.append(arr[i]) return result"},{"question":"# Task Given a string containing only lowercase alphabetical characters (\'a\' - \'z\'), your task is to find and return the length of the longest substring without repeating characters. # Example For `s = \\"abcabcbb\\"`, the result should be `3`. The longest substring without repeating characters is `\\"abc\\"`. For `s = \\"bbbbb\\"`, the result should be `1`. The longest substring without repeating characters is `\\"b\\"`. For `s = \\"pwwkew\\"`, the result should be `3`. The longest substring without repeating characters is `\\"wke\\"`. Note that the answer must be a substring, `\\"pwke\\"` is a subsequence and not a substring. For `s = \\" \\"`, the result should be `1`. The longest substring without repeating characters is `\\" \\"`. For `s = \\"au\\"`, the result should be `2`. The longest substring without repeating characters is `\\"au\\"`. For `s = \\"dvdfz\\"`, the result should be `4`. The longest substring without repeating characters is `\\"vdfz\\"`. # Input/Output - `[input]` string `s` The input string. - `[output]` an integer The length of the longest substring without repeating characters.","solution":"def longest_substring_without_repeating_characters(s): Finds the length of the longest substring without repeating characters. char_index_map = {} longest_length = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest_length = max(longest_length, i - start + 1) return longest_length"},{"question":"You are provided with a list of words. Your task is to find and print the longest common prefix among all these words. The prefix is a substring that starts at the beginning of every word in the list and goes to the end until the first mismatch occurs. If no such prefix exists, return an empty string. Input The first line contains an integer n (1 ≤ n ≤ 200). Each of the following n lines contains one word. All the words consist of lowercase Latin letters and possess the lengths of from 1 to 100 characters. Output Print a single line containing the longest common prefix of all given words. If no common prefix exists, print an empty string. Examples Input 5 flower flow flight flock floral Output fl Input 3 dog racecar car Output","solution":"def longest_common_prefix(words): Returns the longest common prefix among all given words. :param words: List of words :type words: List[str] :return: The longest common prefix :rtype: str if not words: return \\"\\" # Find the shortest word in the list shortest_word = min(words, key=len) # Compare all words with the shortest word for i in range(len(shortest_word)): for word in words: if word[i] != shortest_word[i]: return shortest_word[:i] return shortest_word"},{"question":"Alex has been experimenting with sequences and stumbled upon the concept of arithmetic progressions. An arithmetic progression (AP) is a sequence of numbers in which the difference of any two successive members is a constant. For example, the sequence 3, 7, 11, 15, ... is an arithmetic progression with a common difference of 4. Alex is particularly interested in identifying whether a given sequence of integers can be rearranged into an arithmetic progression. He seeks your help to handle this task efficiently. ------ Input ------ The input consists of multiple test cases. The first line contains an integer T, the number of test cases. Each test case is described in two lines: - The first line contains an integer N, the number of elements in the sequence. - The second line contains N space-separated integers representing the sequence. 1 ≤ T ≤ 100 2 ≤ N ≤ 10^5 -10^9 ≤ A_i ≤ 10^9 (elements of the sequence) The sum of N over all test cases will not exceed 10^6. ------ Output ------ For each test case, output \\"YES\\" if the sequence can be rearranged into an arithmetic progression; otherwise, output \\"NO\\". ----- Sample Input 1 ------ 3 4 5 1 3 7 5 1 2 4 6 8 3 1 3 5 ----- Sample Output 1 ------ YES NO YES","solution":"def can_form_ap(sequence): Determines if a given sequence can be rearranged into an arithmetic progression. :param sequence: List of integers representing the sequence. :return: \\"YES\\" if the sequence can be rearranged into an arithmetic progression, otherwise \\"NO\\". if len(sequence) <= 2: return \\"YES\\" sequence.sort() common_difference = sequence[1] - sequence[0] for i in range(2, len(sequence)): if sequence[i] - sequence[i-1] != common_difference: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): results = [] for case in test_cases: N, sequence = case results.append(can_form_ap(sequence)) return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) sequence = list(map(int, lines[index+1].split())) test_cases.append((N, sequence)) index += 2 return test_cases def main(input_string): test_cases = parse_input(input_string) results = process_test_cases(test_cases) return \\"n\\".join(results)"},{"question":"**Problem** You are tasked with creating an enrollment management system for a school utilizing a list of student enrollments. Each enrollment entry includes the student\'s id, course code, and semester. There are no duplicate entries in the given list. You need to write a program that processes this list of enrollments to provide insights based on queries. Each query can either request a list of all courses a student is enrolled in (by their id) or request all students enrolled in a particular course, in a specific semester. # Input The input consists of multiple test cases. Each test case starts with an integer `n`, which denotes the number of enrollment entries. The next `n` lines each contain an enrollment entry in the format: ``` student_id course_code semester ``` After this, a series of queries is provided, starting with an integer `q` which denotes the number of queries. The next `q` lines represent the queries in one of the following two formats: ``` 1 student_id # type 1 query asking for courses for a student 2 course_code semester # type 2 query asking for students enrolled in a specific course in a particular semester ``` # Output For each query, your program should output the result in the following format: - For a type 1 query, output all course codes the given student is enrolled in, separated by spaces. - For a type 2 query, output all student IDs enrolled in the specified course code and semester, separated by spaces. If there are no results for a query, output `None`. # Example **Input** ``` 5 101 CS101 Fall2022 102 CS102 Fall2022 101 MA101 Fall2022 103 CS101 Fall2022 101 PH101 Spring2023 3 1 101 2 CS101 Fall2022 2 MA101 Spring2023 ``` **Output** ``` CS101 MA101 PH101 101 103 None ``` # Constraints - 1 ≤ n, q ≤ 1000 - student_id, course_code, semester are unique, non-empty strings - Entries are case-sensitive _guidelines:_ - Ensure the output format strictly follows the outlined structure. - Aim for efficient data structures and algorithms to handle the input constraints smoothly. - Maintain code readability and organization for ease of understanding and maintenance.","solution":"def process_enrollments(input_data): lines = input_data.strip().split(\'n\') n = int(lines[0]) enrollments = [] for i in range(1, n + 1): enrollments.append(lines[i].split()) q_index = n + 1 q = int(lines[q_index]) queries = [] for i in range(q_index + 1, q_index + 1 + q): queries.append(lines[i].split()) student_courses = {} course_students = {} for student_id, course_code, semester in enrollments: if student_id not in student_courses: student_courses[student_id] = [] student_courses[student_id].append(course_code) key = (course_code, semester) if key not in course_students: course_students[key] = [] course_students[key].append(student_id) results = [] for query in queries: if query[0] == \'1\': student_id = query[1] result = \' \'.join(student_courses.get(student_id, [])) results.append(result if result else \'None\') elif query[0] == \'2\': course_code, semester = query[1], query[2] result = \' \'.join(course_students.get((course_code, semester), [])) results.append(result if result else \'None\') return \'n\'.join(results)"},{"question":"You are developing a media player application that supports playlists of audio files. Each playlist contains several songs, and each song has a unique identifier, title, artist, and duration. The duration of each song is given in seconds. The application should support commands to create playlists, add songs to playlists, remove songs from playlists, and retrieve the total duration of a playlist. You need to implement a class `MediaPlayer` to handle these functionalities. The `MediaPlayer` class should have the following methods: 1. `create_playlist(playlist_name)`: This method creates a new playlist with the given name. If a playlist with the same name already exists, it does nothing. 2. `add_song_to_playlist(playlist_name, song_id, title, artist, duration)`: This method adds a song to the specified playlist. If the playlist does not exist, it creates a new playlist first. 3. `remove_song_from_playlist(playlist_name, song_id)`: This method removes the song with the specified `song_id` from the playlist. If the song or playlist does not exist, it does nothing. 4. `get_total_duration(playlist_name)`: This method returns the total duration of all songs in the specified playlist. If the playlist does not exist, it returns 0. Additionally, implement a `Song` class to represent individual songs. Each song should have properties for `song_id`, `title`, `artist`, and `duration`. # Example: ```python mp = MediaPlayer() mp.create_playlist(\\"Rock Classics\\") mp.add_song_to_playlist(\\"Rock Classics\\", 1, \\"Bohemian Rhapsody\\", \\"Queen\\", 354) mp.add_song_to_playlist(\\"Rock Classics\\", 2, \\"Hotel California\\", \\"Eagles\\", 391) mp.add_song_to_playlist(\\"Rock Classics\\", 3, \\"Stairway to Heaven\\", \\"Led Zeppelin\\", 482) mp.create_playlist(\\"Pop Hits\\") mp.add_song_to_playlist(\\"Pop Hits\\", 4, \\"Thriller\\", \\"Michael Jackson\\", 357) mp.add_song_to_playlist(\\"Pop Hits\\", 5, \\"Like a Prayer\\", \\"Madonna\\", 348) print(mp.get_total_duration(\\"Rock Classics\\")) # Output: 1227 print(mp.get_total_duration(\\"Pop Hits\\")) # Output: 705 mp.remove_song_from_playlist(\\"Rock Classics\\", 2) print(mp.get_total_duration(\\"Rock Classics\\")) # Output: 836 mp.remove_song_from_playlist(\\"Pop Hits\\", 5) print(mp.get_total_duration(\\"Pop Hits\\")) # Output: 357 ``` # Constraints - Song IDs are guaranteed to be unique. - Titles and artist names are strings containing only alphanumeric characters and spaces. - Duration is a positive integer. - The number of playlists and the number of songs per playlist are reasonable numbers, constrained by typical use cases for media players.","solution":"class Song: def __init__(self, song_id, title, artist, duration): self.song_id = song_id self.title = title self.artist = artist self.duration = duration class MediaPlayer: def __init__(self): self.playlists = {} def create_playlist(self, playlist_name): if playlist_name not in self.playlists: self.playlists[playlist_name] = [] def add_song_to_playlist(self, playlist_name, song_id, title, artist, duration): if playlist_name not in self.playlists: self.create_playlist(playlist_name) song = Song(song_id, title, artist, duration) self.playlists[playlist_name].append(song) def remove_song_from_playlist(self, playlist_name, song_id): if playlist_name in self.playlists: self.playlists[playlist_name] = [ song for song in self.playlists[playlist_name] if song.song_id != song_id ] def get_total_duration(self, playlist_name): if playlist_name not in self.playlists: return 0 total_duration = sum(song.duration for song in self.playlists[playlist_name]) return total_duration"},{"question":"You are given an array a consisting of n integers. Your task is to determine if there exists a subsequence of a such that the sum of its elements is even and the product of its elements is odd. A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Input: The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Each test case contains two lines. The first line of each test case contains one integer n (2 le n le 1000) — the number of elements in the array a. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^6), the elements of the array a. It is guaranteed that the sum of n over all test cases does not exceed 10000 (sum n le 10000). Output: For each test case, print \\"YES\\" (without quotes) if there exists a subsequence of a such that the sum of its elements is even and the product of its elements is odd, and \\"NO\\" otherwise. Example: Input: 4 3 1 3 5 5 2 4 6 8 10 4 1 2 3 4 6 7 11 13 17 19 23 Output: YES NO YES YES Note: In the first test case, a subsequence [1, 3] has an even sum and an odd product. In the second test case, no subsequence of the array can satisfy the conditions. In the third test case, a subsequence [1, 3] has an even sum and an odd product. In the fourth test case, the subsequence [7, 11, 13, 17, 19] has an even sum and an odd product.","solution":"def is_valid_subsequence_possible(n, a): # Separate the array into odd and even numbers odd_numbers = [x for x in a if x % 2 != 0] even_numbers = [x for x in a if x % 2 == 0] # Check if there\'s at least one odd number and one even number in the array if odd_numbers and even_numbers: return \\"YES\\" # Alternatively, check if there are at least two odd numbers elif len(odd_numbers) >= 2: return \\"YES\\" else: return \\"NO\\" def solve(test_cases): results = [] for case in test_cases: n, a = case result = is_valid_subsequence_possible(n, a) results.append(result) return results"},{"question":"You are given an array of integers and you need to process n queries over it. Each query is one of the following three types: 1. Update the element at the given index to a new value. 2. Compute the sum of elements in a subarray defined by a given range [L, R] (inclusive). 3. Find the maximum value in a subarray defined by a given range [L, R] (inclusive). Input The first line contains two integers n (1 ≤ n ≤ 100,000) — the number of elements in the array and q (1 ≤ q ≤ 100,000) — the number of queries. The second line contains n integers a[i] (1 ≤ a[i] ≤ 10^9) — the initial elements of the array. Each of the next q lines contains a query in the following format: - For the update query: `1 index value` (1 ≤ index ≤ n, 1 ≤ value ≤ 10^9) - For the sum query: `2 L R` (1 ≤ L ≤ R ≤ n) - For the maximum query: `3 L R` (1 ≤ L ≤ R ≤ n) Output For each query of the second and third type, print the result on a new line. Examples Input 5 5 1 2 3 4 5 2 1 3 3 2 5 1 3 10 2 1 3 3 2 5 Output 6 5 13 10 Input 3 4 5 8 6 2 1 2 3 1 3 1 1 7 3 1 3 Output 13 8 8","solution":"class SegmentTree: def __init__(self, data, default, func): self.n = len(data) self.default = default self.func = func self.tree = [default] * (2 * self.n) self.build(data) def build(self, data): for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.func(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, index, value): pos = self.n + index self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.func(self.tree[2 * pos], self.tree[2 * pos + 1]) def query(self, l, r): res = self.default l += self.n r += self.n + 1 while l < r: if l % 2 == 1: res = self.func(res, self.tree[l]) l += 1 if r % 2 == 1: r -= 1 res = self.func(res, self.tree[r]) l //= 2 r //= 2 return res def process_queries(n, q, arr, queries): sum_seg_tree = SegmentTree(arr, 0, lambda x, y: x + y) max_seg_tree = SegmentTree(arr, float(\'-inf\'), max) results = [] for query in queries: if query[0] == 1: index, value = query[1] - 1, query[2] sum_seg_tree.update(index, value) max_seg_tree.update(index, value) elif query[0] == 2: L, R = query[1] - 1, query[2] - 1 results.append(sum_seg_tree.query(L, R)) elif query[0] == 3: L, R = query[1] - 1, query[2] - 1 results.append(max_seg_tree.query(L, R)) return results"},{"question":"Anushka loves playing with strings and numbers. She has recently come across an interesting problem and seeks your help to solve it. The problem involves finding a certain subsequence within a string. Given a binary string S consisting of only characters \'0\' and \'1\', determine if it\'s possible to find a subsequence of S that matches the binary representation of two given integers A and B placed side by side. ------ Input: ------ The first line contains the binary string S. The second line contains two integers A and B. ------ Output: ------ Print “YES” (without quotes) if such a subsequence exists, otherwise print “NO” (without quotes). ------ Constraints: ------ 1 ≤ length(S) ≤ 10^5 0 ≤ A, B ≤ 10^9 ----- Sample Input 1 ------ 101011010111 5 3 ----- Sample Output 1 ------ YES ----- Explanation 1 ------ The binary representation of 5 is “101” and 3 is “11”. These can be found as subsequence “101” and “11” within the string “101011010111”. ----- Sample Input 2 ------ 101011100111 8 6 ----- Sample Output 2 ------ NO ----- Explanation 2 ------ The binary representation of 8 is “1000” and 6 is “110”. It is not possible to find “1000110” as a subsequence within the string “101011100111”.","solution":"def can_find_subsequence(S, A, B): Determines if binary representations of A and B can be found as a subsequence in S. :param S: A binary string consisting of \'0\' and \'1\' :param A: An integer :param B: An integer :return: \\"YES\\" if the subsequence exists, otherwise \\"NO\\" bin_A = bin(A)[2:] bin_B = bin(B)[2:] combined = bin_A + bin_B it = iter(S) return \\"YES\\" if all(char in it for char in combined) else \\"NO\\""},{"question":"You are given a series of intervals on a number line. Each interval is represented by two integers [L, R], where L is the starting point and R is the ending point of the interval. You need to answer several queries, each consisting of a single integer x. For each query, determine how many of the given intervals contain the point x. Input The first line contains a single integer n (1 ≤ n ≤ 1000) – the number of intervals. Each of the next n lines contains two integers L and R (1 ≤ L ≤ R ≤ 10^9) – the endpoints of the intervals. The next line contains a single integer q (1 ≤ q ≤ 10000) – the number of queries. Each of the next q lines contains a single integer x (1 ≤ x ≤ 10^9) – the query point. Output For each query, print the number of intervals that contain the point x. Example Input 3 1 5 10 15 20 25 5 2 12 22 30 5 Output 1 1 1 0 0 Note In the example, the intervals are [1, 5], [10, 15], and [20, 25]. The query points are 2, 12, 22, 30, and 5: - The point 2 lies in one interval: [1, 5]. - The point 12 lies in one interval: [10, 15]. - The point 22 lies in one interval: [20, 25]. - The point 30 lies in no interval. - The point 5 lies in one interval: [1, 5].","solution":"def count_intervals_containing_point(intervals, queries): For each query point, count how many intervals contain that point. :param intervals: List of tuples [(L, R), (L, R), ...] where each tuple represents an interval. :param queries: List of integers representing the query points. :return: List of integers where each integer is the count of intervals containing the corresponding query point. result = [] for x in queries: count = 0 for L, R in intervals: if L <= x <= R: count += 1 result.append(count) return result"},{"question":"You are a zookeeper in charge of arranging the animals in the zoo in such a way that certain animals do not end up side by side. You have n animals and you must form a single-file line. Some pairs of animals have animosities towards each other, represented as a list of pairs where each pair contains two integers indicating the animals that cannot be next to each other in the line. Write a function `arrange_animals(n: int, restrictions: List[Tuple[int, int]]) -> List[int]` to find any valid arrangement of animals or return [-1] if no valid arrangement exists. -----Input----- - An integer `n` (2 leq n leq 15) indicating the number of animals. - A list `restrictions` of tuples, where each tuple contains two integers representing a pair of animals that cannot be neighbors. The integers will be in the range 1 to n. -----Output----- - If there exists a valid arrangement, return a list of integers indicating the order of the animals. - If no valid arrangement exists, return [-1]. -----Examples----- Sample Input 1: n = 4 restrictions = [(1, 2), (2, 3)] Sample Output 1: [1, 3, 2, 4] or any other valid permutation Sample Input 2: n = 3 restrictions = [(1, 2), (2, 3), (1, 3)] Sample Output 2: [-1]","solution":"from typing import List, Tuple from itertools import permutations def arrange_animals(n: int, restrictions: List[Tuple[int, int]]) -> List[int]: Arranges animals in a single-file line such that no two animals with animosities towards each other are placed side by side. :param n: The number of animals :param restrictions: List of restrictions where each pair contains two integers indicating the animals that cannot be next to each other :return: A valid arrangement if possible, otherwise [-1] # Generate all permutations of animals for perm in permutations(range(1, n + 1)): valid = True # Check if current permutation satisfies all restrictions for i in range(n - 1): if (perm[i], perm[i + 1]) in restrictions or (perm[i + 1], perm[i]) in restrictions: valid = False break if valid: return list(perm) return [-1]"},{"question":"Given an integer N, return the maximum length L of the contiguous subarray from the array [1, 2, ... N], such that the sum of the elements in this subarray is even. Example 1: Input: N = 5 Output: 4 Explanation: The maximum length of the subarray is 4, which is [1, 2, 3, 4]. The sum of these elements is 10, which is even. Example 2: Input: N = 7 Output: 6 Explanation: The maximum length of the subarray is 6, which is [1, 2, 3, 4, 5, 6]. The sum of these elements is 21, which is odd. If we choose the subarray [2, 3, 4, 5, 6, 7], the sum is 27, which is even. Your Task: You do not need to read input or print anything. Your task is to complete the function maxLength() which takes N as input parameter and returns the maximum length of the contiguous subarray with an even sum. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5","solution":"def maxLength(N): Return the maximum length of the contiguous subarray from 1 to N, such that the sum of the elements in this subarray is even. if N % 2 == 0: return N else: return N - 1"},{"question":"Lily has a directed graph with N nodes and M edges. Each edge has a weight associated with it. Lily wants to find the longest path in the graph that doesn\'t revisit any node. The graph may contain cycles. Constraints * 1 leq N leq 1000 * 0 leq M leq 5000 * 1 leq weight of each edge leq 1000 Input Input is given from Standard Input in the following format: N M u_1 v_1 w_1 u_2 v_2 w_2 : u_M v_M w_M The i-th edge connects node u_i and node v_i with a weight of w_i. Output Print the length of the longest path in the graph that doesn\'t revisit any node. If no such path exists (i.e., the graph is disconnected), print 0. Examples Input 4 4 1 2 3 2 3 4 3 4 5 1 3 2 Output 12 Input 3 2 1 2 5 2 3 7 Output 12 Input 3 1 1 2 1 Output 1","solution":"from collections import defaultdict, deque def longest_path_dag(N, M, edges): # Construct the adjacency list graph = defaultdict(list) indegree = [0] * (N + 1) for u, v, w in edges: graph[u].append((v, w)) indegree[v] += 1 # Topological Sort using Kahn\'s Algorithm topo_sort = [] zero_indegree = deque([i for i in range(1, N + 1) if indegree[i] == 0]) while zero_indegree: node = zero_indegree.popleft() topo_sort.append(node) for neighbor, weight in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: zero_indegree.append(neighbor) # If topological sort doesn\'t include all nodes, the graph contains a cycle if len(topo_sort) != N: return 0 # Find the longest path in the acyclic graph distance = [0] * (N + 1) for node in topo_sort: for neighbor, weight in graph[node]: if distance[neighbor] < distance[node] + weight: distance[neighbor] = distance[node] + weight return max(distance) def solve(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) edges = [] index = 2 for _ in range(M): u = int(data[index]) v = int(data[index+1]) w = int(data[index+2]) edges.append((u, v, w)) index += 3 result = longest_path_dag(N, M, edges) print(result)"},{"question":"Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to the target value. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example: Input: 2 4 2 7 11 15 9 3 3 2 4 6 Output: 0 1 1 2 Your task: You need to complete the function twoSum() which takes an array of integers nums and an integer target as input and returns a list containing the indices of the two numbers. If no such pair exists, the function should return an empty list. Constraints: 1 <= T <= 100 2 <= |nums| <= 1000 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def twoSum(nums, target): Returns the indices of the two numbers in nums such that they add up to target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"You are tasked with building a small simulation program that models the growth of a forest. The forest is represented as a grid of cells, where each cell can either be empty, contain a tree, or be a burning tree (fire). Each cell transitions between states based on the following rules: 1. A burning tree turns into an empty cell in the next step. 2. A tree will start burning if at least one neighboring cell (up, down, left, right) is burning. 3. An empty cell becomes a tree with probability p in each step. 4. A tree remains a tree if none of its neighbors are burning. The simulation steps through a number of iterations, updating the state of the forest grid at each step based on the rules above. Input Line 1: Three integers n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 100), representing the number of rows, columns, and simulation steps, respectively. Line 2: A float p (0 ≤ p ≤ 1) representing the probability that an empty cell becomes a tree in each step. Next n lines: Each line contains m characters representing the initial state of the forest grid. Each character is either \'.\', \'T\', or \'F\' representing an empty cell, a tree, or a burning tree, respectively. Output Output the state of the forest grid after k simulation steps, with each cell\'s state represented by \'.\', \'T\', or \'F\'. Example Input 4 4 3 0.1 .... .T.T .TF. F.TT Output .... ..... .... TT.. Explanation - After the first step, the burning trees (\'F\') turn into empty cells (\'.\'), trees (if any) adjacent to a burning tree catch fire, and empty cells may turn into trees based on probability p. - After subsequent steps, the state of the forest updates according to the same rules until k steps have been simulated.","solution":"import random def simulate_forest(n, m, k, p, grid): def is_burning(i, j): return grid[i][j] == \'F\' def step_forest(grid): new_grid = [[\'\' for _ in range(m)] for _ in range(n)] for i in range(n): for j in range(m): if grid[i][j] == \'F\': new_grid[i][j] = \'.\' elif grid[i][j] == \'T\': if ( (i > 0 and is_burning(i-1, j)) or (i < n-1 and is_burning(i+1, j)) or (j > 0 and is_burning(i, j-1)) or (j < m-1 and is_burning(i, j+1)) ): new_grid[i][j] = \'F\' else: new_grid[i][j] = \'T\' elif grid[i][j] == \'.\': if random.random() <= p: new_grid[i][j] = \'T\' else: new_grid[i][j] = \'.\' return new_grid for _ in range(k): grid = step_forest(grid) return [\\"\\".join(row) for row in grid] # Helper function to parse the input def parse_input(input_string): lines = input_string.strip().split(\\"n\\") n, m, k = map(int, lines[0].split()) p = float(lines[1]) grid = [list(line) for line in lines[2:2+n]] return n, m, k, p, grid # Helper function to format the output def format_output(result): return \\"n\\".join(result) # Example usage: input_string = 4 4 3 0.1 .... .T.T .TF. F.TT n, m, k, p, grid = parse_input(input_string) output = simulate_forest(n, m, k, p, grid) print(format_output(output))"},{"question":"You are given a grid of size m x n and a target number of islands, k. The grid can be represented as an m x n matrix with cells initially set to water (\'0\'). An island can be created by changing any cell from water (\'0\') to land (\'1\'). Two cells are considered connected if they are directly adjacent to each other horizontally or vertically. An island is a group of connected lands. Your task is to determine the minimum number of land cells (\'1\') that need to be added to the grid to create at least k distinct islands. If it is impossible to create k islands, return -1. Example 1: Input: m = 3, n = 3, k = 2 Output: 2 Explanation: By converting the (0, 0) and (2, 2) water cells to land, we create two separate islands: one at (0, 0) and the other at (2, 2). Example 2: Input: m = 1, n = 5, k = 3 Output: 3 Explanation: By converting the (0, 0), (0, 2), and (0, 4) water cells to land, we create three separate islands. Example 3: Input: m = 2, n = 2, k = 5 Output: -1 Explanation: It is impossible to create 5 islands in a 2 x 2 grid. Constraints: 1 <= m, n <= 1000 1 <= k <= m*n","solution":"def min_land_cells(m, n, k): Determine the minimum number of land cells (\'1\') needed to create at least k distinct islands. # If the total cells in the grid is less than k, return -1 (impossible case) if k > m * n: return -1 # Place each island in a separate cell, ensuring that the islands are not adjacent. # To achieve this, we need at least k cells to be converted to land. # Thus, the minimum land cells needed to create k islands is exactly k. return k"},{"question":"In an alien language, surprisingly, some letters are more popular than others. Given this interesting piece of information, we have decided to run a study. You are given a string and need to determine which letter appears the most frequently in it. If there is a tie for the most frequent letter, return the one that appears first in the alphabet. ----Input:---- The first line contains an integer T, denoting the number of test cases (1 ≤ T ≤ 100). The next T lines each contain a string s (1 ≤ |s| ≤ 1000). The string consists of lowercase English letters only. ----Output:---- For each test case, output the most frequently occurring letter in the string. If there is a tie, output the letter that comes first in the alphabet. ----Constraints:---- - 1≤T≤100 - 1≤|s|≤1000 - The string consists of lowercase English letters only. ----Sample Input:---- 3 test google interview ----Sample Output:---- t g e ----Explanation:---- In the first sample, the letter \'t\' appears twice while the other letters appear once. In the second sample, the letter \'g\' appears twice and is the first such letter when considering alphabetical order. In the third sample, the letter \'e\' appears twice (tied with \'i\'), and \'e\' comes before \'i\' alphabetically.","solution":"def most_frequent_letter(s): Finds the most frequent letter in the string s. In case of a tie, the alphabetically first letter is returned. from collections import Counter # Count the frequency of each letter frequency = Counter(s) # Find the maximum frequency max_frequency = max(frequency.values()) # Get the letters with the maximum frequency most_frequent_letters = [letter for letter, count in frequency.items() if count == max_frequency] # Return the alphabetically first letter among the most frequent ones return min(most_frequent_letters) def process_input(T, strings): results = [] for s in strings: results.append(most_frequent_letter(s)) return results"},{"question":"Bob loves playing with numbers. One day, he decided to play with his friend, Alice. Bob gives Alice a number N and a range [a, b], and asks her to count how many numbers in this range are divisible by N. Alice is excited about the challenge and wants your help to solve it efficiently. ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. - The following T lines each contain three integers N, a, and b, representing the divisor and the range respectively. ------ Output Format ------ For each test case, output a single integer, the count of numbers in the range [a, b] (inclusive) that are divisible by N. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ a ≤ b ≤ 10^9 ------ Sample Input 1 ------ 2 3 1 10 5 5 30 ------ Sample Output 1 ------ 3 6 ------ Explanation 1 ------ Test case 1: The numbers between 1 and 10 that are divisible by 3 are 3, 6, and 9. Hence, the output is 3. Test case 2: The numbers between 5 and 30 that are divisible by 5 are 5, 10, 15, 20, 25, and 30. Thus, the output is 6.","solution":"def count_divisibles(T, test_cases): For each test case, calculates the count of numbers in the range [a, b] which are divisible by N. :param T: Number of test cases :param test_cases: List of tuples where each tuple contains (N, a, b) :return: List of integers, where each integer is the count of numbers divisible by N in range [a, b] results = [] for N, a, b in test_cases: # Number of divisible elements from 1 to b count_b = b // N # Number of divisible elements from 1 to a-1 count_a_minus_1 = (a-1) // N # The number of elements that are divisible by N in range [a, b] count = count_b - count_a_minus_1 results.append(count) return results"},{"question":"Write a function `removeDuplicates` that takes a list of integers as input and returns a new list with all duplicate elements removed, retaining the original order of the first occurrences of the elements. # Example ``` Input: [1, 2, 2, 3, 4, 4, 5] Output: [1, 2, 3, 4, 5] Input: [1, 1, 1, 1, 1] Output: [1] Input: [5, 5, 4, 3, 3, 2] Output: [5, 4, 3, 2] ```","solution":"def removeDuplicates(lst): Removes duplicate elements from a list while retaining the original order of the first occurrences of the elements. Parameters: lst (list): A list of integers Returns: list: A new list with duplicates removed seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Dreamoon has a new challenge for his zoo management program. He manages a zoo where the animals are categorized by their species and age. Given a list of species and the ages of animals from each species, Dreamoon wants to construct a binary tree for each species where each node represents an animal and contains the age of the animal. The binary tree must satisfy the following conditions: 1. For each species, the ages of the animals must be stored in a binary search tree (BST). 2. In this BST, for each node, if it has a left child, the left child\'s age must be less than the parent\'s age. If it has a right child, the right child\'s age must be greater than the parent\'s age. Given a list of animals, construct a BST for each species and print the pre-order traversal of each BST. Input - The first line contains an integer n (1 ≤ n ≤ 1000), the number of animals. - Each of the next n lines contains a string (the species name) and an integer (the age of the animal). The species name consists of lowercase English letters and the total length of all species names in the input does not exceed 10^5. Output For each species, in the order they appear in the input, print the species name followed by the pre-order traversal of the BST formed by the ages of that species. The pre-order traversal should list the ages in single line separated by space. Examples Input 6 lion 5 tiger 3 lion 3 elephant 7 tiger 2 lion 9 Output lion 5 3 9 tiger 3 2 elephant 7","solution":"from collections import defaultdict class Node: def __init__(self, age): self.age = age self.left = None self.right = None def insert_node(root, age): if root is None: return Node(age) else: if age < root.age: root.left = insert_node(root.left, age) elif age > root.age: root.right = insert_node(root.right, age) return root def pre_order_traversal(root, result): if root: result.append(root.age) pre_order_traversal(root.left, result) pre_order_traversal(root.right, result) def build_and_traverse_bst(species_ages): species_bst = defaultdict(list) trees = {} for species, age in species_ages: if species not in trees: trees[species] = None trees[species] = insert_node(trees[species], age) result = [] for species in trees: result.append(species) nodes = [] pre_order_traversal(trees[species], nodes) result.append(\\" \\".join(map(str, nodes))) return result def manage_zoo(n, animal_data): species_ages = [(animal.split()[0], int(animal.split()[1])) for animal in animal_data] return build_and_traverse_bst(species_ages)"},{"question":"Given a large warehouse with robotic arms working to pick and place items from one location to another, there are multiple requests being processed simultaneously. Each request specifies a start location, a destination location, and a number of items to move. The warehouse is organized in a grid format, and the robotic arms can only move in four directions: up, down, left, or right. The movement cost for each robotic arm is the total number of steps it takes to fulfill all the requests. The goal is to minimize the movement cost to handle all requests. You need to write a function that calculates the minimum total movement cost for a given set of requests. The warehouse grid is represented as `M x N` (rows x columns). Each request is represented by a tuple `(sr, sc, dr, dc, items)` which denotes the start row, start column, destination row, destination column, and number of items to move respectively. Input - The first line contains two integers `M` and `N` (1 <= M, N <= 1000) representing the dimensions of the warehouse grid. - The second line contains an integer `Q` (1 <= Q <= 100) representing the number of requests. - Each of the following `Q` lines contains five integers `sr`, `sc`, `dr`, `dc`, `items` (0 <= sr, sc, dr, dc < M or N; 1 <= items <= 100) representing a pick and place request. Output Print the minimum total movement cost for all robotic arms to complete the requests. Examples Input 5 5 3 0 0 1 1 10 1 1 2 2 20 2 2 3 3 30 Output 10 Input 4 4 2 0 0 3 3 5 3 3 0 0 5 Output 12 Explanation In the first example, a robotic arm can handle each request individually with the minimal cost of one move per step (since both the start and destination coordinates are only one step apart for each request). In the second example, the robotic arm needs to move from (0,0) to (3,3) and then back from (3,3) to (0,0). The total movement cost is minimized by handling both requests in sequence.","solution":"def min_movement_cost(M, N, requests): Calculate the minimum total movement cost for all robotic arms to complete the given requests. :param M: int, number of rows in the warehouse :param N: int, number of columns in the warehouse :param requests: list of tuples, each tuple contains (sr, sc, dr, dc, items) representing a request with start row, start column, destination row, destination column, and number of items to move. :return: int, minimum total movement cost # Initialize total cost total_cost = 0 for sr, sc, dr, dc, items in requests: # Calculate horizontal and vertical distances horizontal_distance = abs(sc - dc) vertical_distance = abs(sr - dr) # Add the movement cost for this request to the total cost total_cost += (horizontal_distance + vertical_distance) return total_cost"},{"question":"Given an array of n integers, you need to determine the number of distinct pairs (i, j) where i < j and the product of the array elements at these positions is even. A product of two integers is considered even if at least one of the integers is even. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 10^5). The second line contains n space-separated integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9). -----Output----- Print a single integer — the count of distinct pairs (i, j) that satisfy the condition. -----Examples----- Input 5 1 2 3 4 5 Output 7 Input 4 2 4 6 8 Output 6 Input 3 1 3 5 Output 0","solution":"def count_distinct_pairs(n, arr): Returns the count of distinct pairs (i, j) such that i < j and the product of arr[i] and arr[j] is even. even_count = sum(1 for x in arr if x % 2 == 0) odd_count = n - even_count # Total pairs formed from n elements is nC2 = n*(n-1)/2 total_pairs = n * (n - 1) // 2 # Pairs where both elements are odd odd_pairs = odd_count * (odd_count - 1) // 2 # Valid pairs are total pairs minus pairs where both elements are odd valid_pairs = total_pairs - odd_pairs return valid_pairs"},{"question":"Given a positive integer `n`, find all unique combinations of `n` that add up to a positive integer `T`, where `T` is less than or equal to 100 and `1 ≤ n ≤ 30`. Each number in the combination must be greater than or equal to 1. Input The first line contains an integer `n` (1 ≤ n ≤ 30). The second line contains an integer `T` (1 ≤ T ≤ 100). Output Output all unique combinations of `n` numbers whose sum is exactly `T`. The combinations should be output in lexicographical order. Each combination should be printed in a new line. Each number in the combination must be separated by space. Examples Input 3 7 Output 1 1 5 1 2 4 1 3 3 2 2 3 Input 2 5 Output 1 4 2 3 Note In the first example, the sum of three numbers 1, 1, and 5 is 7. Another valid combination is 1, 2, and 4. All valid combinations are listed in lexicographical order.","solution":"def find_combinations(n, target): def backtrack(remain, combo, start): if remain == 0 and len(combo) == n: result.append(list(combo)) return elif remain < 0 or len(combo) == n: return for i in range(start, target + 1): combo.append(i) backtrack(remain - i, combo, i) combo.pop() result = [] backtrack(target, [], 1) return result"},{"question":"You are given a list of integers. Your task is to write a function to determine whether any two distinct integers in the list sum up to a given target integer. For instance: ``` numbers = [2, 7, 11, 15] target = 9 ``` Output: ``` True (because 2 + 7 = 9) ``` However, if: ``` numbers = [1, 2, 3, 4, 5] target = 10 ``` Output: ``` False (because no two numbers sum up to 10) ``` Function signature: `def has_pair_with_sum(numbers: List[int], target: int) -> bool:`. Use this signature to define your function.","solution":"from typing import List def has_pair_with_sum(numbers: List[int], target: int) -> bool: Determines if there are two distinct integers in the list that sum up to the target value. Parameters: numbers (List[int]): List of integers. target (int): The target sum value. Returns: bool: True if there are two distinct numbers in the list that sum up to the target, otherwise False. seen = set() for num in numbers: if target - num in seen: return True seen.add(num) return False"},{"question":"You are given an array of integers. Determine whether the array is a palindrome. A palindrome is an array that reads the same backward as forward. Function Description Complete the `isPalindrome` function in the editor below. The function must return a boolean value (`True` if the array is a palindrome, `False` otherwise). `isPalindrome` has the following parameter(s): `ar`: an array of integers Input Format - The first line contains an integer, `n`, denoting the size of the array. - The second line contains `n` space-separated integers representing the array\'s elements. Constraints - 0 leq n leq 1000 - -1000 leq ar[i] leq 1000 Output Format Print `True` if the array is a palindrome, otherwise print `False`. Sample Input 1 5 1 2 3 2 1 Sample Output 1 True Sample Input 2 4 1 2 2 3 Sample Output 2 False Explanation - In Sample Input 1, the array is `[1, 2, 3, 2, 1]`, which reads the same backward as forward. Hence, the output is `True`. - In Sample Input 2, the array is `[1, 2, 2, 3]`, which does not read the same backward as forward. Hence, the output is `False`.","solution":"def isPalindrome(ar): Determines whether the given array is a palindrome. :param ar: List[int] - The array of integers :return: bool - True if the array is a palindrome, False otherwise return ar == ar[::-1]"},{"question":"Task Write a function that takes an array of integers and returns the number of distinct elements in the array that have at least one other element in the array which is larger than itself. # Example For `arr = [1, 2, 3, 4]`, the result should be `3` (elements `1, 2, 3`) For `arr = [4, 4, 4, 4]`, the result should be `0` (no element has a larger one) # Input/Output - `[input]` array of integers `arr` An array of integers where `1 ≤ |arr| ≤ 10^5` and `1 ≤ arr[i] ≤ 10^9`. - `[output]` an integer","solution":"def count_elements_with_larger(arr): Returns the number of distinct elements in the array that have at least one other element in the array which is larger than itself. if not arr: return 0 # Find the maximum element in the array max_element = max(arr) # Use a set to store distinct elements distinct_elements = set(arr) # Remove the maximum element from the set if max_element in distinct_elements: distinct_elements.remove(max_element) # Return the count of remaining elements return len(distinct_elements)"},{"question":"You are given a binary tree. The task is to find the sum of all nodes at a given depth `D`. The binary tree is represented in a level order traversal where each node is given an integer value, and a \'None\' signifies a missing node. The root of the tree is represented by the first element. For example, let\'s consider the following binary tree: ``` 1 / 2 3 /| | 4 5 6 7 ``` The level order traversal of this tree would be `[1, 2, 3, 4, 5, 6, 7]`. Another example, considering missing nodes: ``` 1 / 2 /| 4 None ``` The level order traversal of this tree would be `[1, 2, None, 4]`. Your task is to process the N queries. Each query will give you depth `D`, and you need to return the sum of all nodes at that depth. The depth of the root node is 0. # Input - The first line contains the binary tree in level order traversal. - The second line contains an integer `N`, the number of queries. - The next N lines each contain an integer `D`, representing the depth for which you need to find the sum of nodes. # Output For each query, output the sum of nodes at the given depth `D`. If there are no nodes at depth `D`, output 0. # Constraints - The number of nodes in the binary tree is no more than 10^5. - The number of queries `N` is no more than 100. - The depth `D` will be in the range 0 ≤ D ≤ 100. - The value of node can be any integer including negative values. # Example Input ``` [1, 2, 3, 4, 5, 6, 7] 3 1 2 3 ``` Output ``` 5 22 0 ``` Input ``` [1, 2, None, 4] 2 0 1 ``` Output ``` 1 2 ``` Explanation In the first example: - Query 1: Depth 1 has nodes [2, 3] with sum 5. - Query 2: Depth 2 has nodes [4, 5, 6, 7] with sum 22. - Query 3: Depth 3 has no nodes, so the sum is 0. In the second example: - Query 1: Depth 0 has nodes [1] with sum 1. - Query 2: Depth 1 has nodes [2] with sum 2.","solution":"def sum_of_nodes_at_depth(tree, queries): Returns the sum of nodes at given depths for a given binary tree. :param tree: List[int], the binary tree in level order traversal. :param queries: List[int], depths at which we need to find the sum of nodes. :return: List[int], sums of nodes at given depths. if not tree: return [0] * len(queries) from collections import deque depth_sums = {} queue = deque([(tree[0], 0)]) # each element is a tuple (node_value, depth) i = 1 while queue: node_val, depth = queue.popleft() if node_val is not None: if depth not in depth_sums: depth_sums[depth] = 0 depth_sums[depth] += node_val # Add left child if i < len(tree): queue.append((tree[i], depth + 1)) i += 1 # Add right child if i < len(tree): queue.append((tree[i], depth + 1)) i += 1 results = [] for query in queries: results.append(depth_sums.get(query, 0)) return results"},{"question":"Implement an event management system to handle room bookings for a facility with multiple rooms. Each room supports booking for a specified range of dates. The system should be able to handle the following operations: * book(room, start_date, end_date): Book the specified room for the date range from start_date to end_date inclusive. If the room is already booked for any of those dates, the system should not book the room and should report a conflict. * cancel(room, start_date, end_date): Cancel the booking for the specified room within the given date range. * check(room, date): Check if the specified room is booked on the given date and report the result. * list(room, start_date, end_date): List all booked dates for the specified room within the provided date range in ascending order. Constraints * 1 ≤ q ≤ 100,000 * 1 ≤ room ≤ 1,000 * date is represented as \\"YYYY-MM-DD\\" and follows the Gregorian calendar system Input The input is provided in the following format: ``` q query_1 query_2 : query_q ``` Each query query_i is given by ``` book room start_date end_date ``` or ``` cancel room start_date end_date ``` or ``` check room date ``` or ``` list room start_date end_date ``` Output For each book operation, print \\"Booked\\" if the room could be booked successfully, otherwise print \\"Conflict\\". For each cancel operation, print \\"Cancelled\\". For each check operation, print \\"yes\\" if the room is booked on the specified date, otherwise print \\"no\\". For each list operation, print the booked dates in ascending order, one per line. Example Input ``` 10 book 1 2023-01-01 2023-01-03 book 1 2023-01-02 2023-01-04 check 1 2023-01-02 cancel 1 2023-01-02 2023-01-02 check 1 2023-01-02 list 1 2023-01-01 2023-01-03 book 1 2023-01-02 2023-01-02 list 1 2023-01-01 2023-01-03 cancel 1 2023-01-01 2023-01-03 check 1 2023-01-01 ``` Output ``` Booked Conflict yes Cancelled no 2023-01-01 2023-01-03 Booked 2023-01-01 2023-01-02 2023-01-03 Cancelled no ```","solution":"from datetime import datetime, timedelta from collections import defaultdict class EventManagementSystem: def __init__(self): self.bookings = defaultdict(set) @staticmethod def date_range(start_date, end_date): start = datetime.strptime(start_date, \\"%Y-%m-%d\\") end = datetime.strptime(end_date, \\"%Y-%m-%d\\") delta = timedelta(days=1) while start <= end: yield start.strftime(\\"%Y-%m-%d\\") start += delta def book(self, room, start_date, end_date): dates_to_book = set(self.date_range(start_date, end_date)) if any(date in self.bookings[room] for date in dates_to_book): return \\"Conflict\\" self.bookings[room].update(dates_to_book) return \\"Booked\\" def cancel(self, room, start_date, end_date): dates_to_cancel = set(self.date_range(start_date, end_date)) self.bookings[room].difference_update(dates_to_cancel) return \\"Cancelled\\" def check(self, room, date): return \\"yes\\" if date in self.bookings[room] else \\"no\\" def list(self, room, start_date, end_date): dates_in_range = sorted(self.date_range(start_date, end_date)) booked_dates = sorted(date for date in dates_in_range if date in self.bookings[room]) return \\"n\\".join(booked_dates) if booked_dates else \\"\\""},{"question":"Sally is experimenting with generating sequences based on frequency patterns. She starts with an empty sequence and follows n steps to create it. Each step introduces a set of numbers, where each number has a frequency of appearance. At each step, either a new number is added with a given frequency or a segment of the sequence is repeated a certain number of times. More formally, there are two types of steps: 1. Add a new number x with frequency f to the end of the sequence. 2. Repeat the first p elements of the sequence q times and add them to the end of the sequence. Sally wants to keep track of the sequence\'s length after each step and is interested in the length at each stage. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of steps. The next n lines describe the steps. Each line starts with an integer t (1 or 2). If t is 1, it is followed by two integers x and f (1 ≤ x, f ≤ 10^5) — the value and its frequency. If t is 2, it is followed by two integers p and q (1 ≤ p ≤ 10^5 and 1 ≤ q ≤ 10^2) — the length of the segment to repeat and the number of repetitions. -----Output----- Print n integers — the length of the sequence after each step. -----Examples----- Input 5 1 2 3 1 3 2 2 5 1 1 1 4 2 10 4 Output 3 5 10 14 54","solution":"def sequence_length(steps): sequence = [] lengths = [] for step in steps: if step[0] == 1: x, f = step[1], step[2] sequence.extend([x] * f) elif step[0] == 2: p, q = step[1], step[2] segment = sequence[:p] sequence.extend(segment * q) lengths.append(len(sequence)) return lengths # Example usage steps = [ (1, 2, 3), (1, 3, 2), (2, 5, 1), (1, 1, 4), (2, 10, 4) ] print(sequence_length(steps)) # Output should be [3, 5, 10, 14, 54]"},{"question":"The Delivery Company needs a system to assign delivery jobs to their drivers efficiently. Each driver can handle jobs only up to a certain weight limit, and each job has a specified weight. Your task is to determine if it\'s possible to assign every job to a driver such that no driver exceeds their weight limit. You are given the number of drivers and the weight limits they can handle, followed by the list of jobs and their respective weights. Determine if you can assign the jobs to the drivers without violating any weight limits. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of: - A line with two positive integers D (number of drivers) and J (number of jobs). - A line with D integers, where each integer represents the weight limit of a driver. - A line with J integers, where each integer represents the weight of a job. ------ Output Format ------ For each test case, output on a new line YES if it is possible to assign all jobs to the drivers without exceeding their weight limits, otherwise print NO. You may print each character of the string in either uppercase or lowercase (for example, the strings yes, YES, Yes, and yeS will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ D, J ≤ 10^{5} 1 ≤ Weight_limit_i, Job_weight_j ≤ 10^{5} ----- Sample Input 1 ------ 2 3 3 10 20 30 30 20 10 2 4 20 15 5 10 15 5 ----- Sample Output 1 ------ YES NO ----- Explanation 1 ------ Test Case 1: Each driver can precisely take one job without exceeding their weight limits. Test Case 2: There are not enough drivers to handle all the jobs within their weight limits.","solution":"def can_assign_jobs(T, test_cases): results = [] for i in range(T): D, J = test_cases[i][\'D\'], test_cases[i][\'J\'] drivers = sorted(test_cases[i][\'drivers\'], reverse=True) jobs = sorted(test_cases[i][\'jobs\'], reverse=True) if D < J: results.append(\\"NO\\") continue possible = True job_index = 0 for driver in drivers: if job_index < J and driver >= jobs[job_index]: job_index += 1 if job_index == J: break if job_index == J: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given two sorted arrays arr1 and arr2 of size N and M respectively. The task is to find the union of the two arrays and return the resultant union array in sorted order. Example 1: Input: N = 5, M = 3 arr1[] = {1, 2, 4, 5, 6} arr2[] = {3, 5, 7} Output: {1, 2, 3, 4, 5, 6, 7} Example 2: Input: N = 4, M = 4 arr1[] = {2, 2, 3, 4} arr2[] = {4, 4, 5, 6} Output: {2, 3, 4, 5, 6} Your Task: You don\'t need to read input or print anything. Your task is to complete the function findUnion() which takes the arrays arr1 and arr2 and their sizes N and M as inputs and returns the union of the two arrays as a sorted list. Expected Time Complexity: O(N + M) Expected Auxiliary Space: O(N + M) Constraints: 1 <= N, M <= 10^6 1 <= arr1[i], arr2[i] <= 10^9","solution":"def findUnion(arr1, arr2, N, M): Finds the union of two sorted arrays arr1 and arr2. Parameters: arr1 (List[int]): Sorted array of size N arr2 (List[int]): Sorted array of size M N (int): Size of arr1 M (int): Size of arr2 Returns: List[int]: Sorted list containing the union of arr1 and arr2 union_result = set(arr1).union(set(arr2)) return sorted(union_result)"},{"question":"Write a function that takes an integer and returns its maximum binary gap. A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends. For example: - The binary representation of 9 is 1001 and has a binary gap of length 2. - The binary representation of 529 is 1000010001 and has a binary gap of length 4. - The binary representation of 20 is 10100 and has a binary gap of length 1. - The binary representation of 15 is 1111 and has no binary gaps. Example 1: Input: 9 Output: 2 Example 2: Input: 529 Output: 4 Example 3: Input: 20 Output: 1 Example 4: Input: 15 Output: 0","solution":"def max_binary_gap(N): Returns the length of the longest sequence of consecutive zeros that is surrounded by ones in the binary representation of a positive integer N. binary_representation = bin(N)[2:] # Get binary representation of N without the \'0b\' prefix. max_gap = 0 current_gap = 0 in_gap = False for bit in binary_representation: if bit == \'1\': if in_gap: max_gap = max(max_gap, current_gap) current_gap = 0 in_gap = True elif in_gap: current_gap += 1 return max_gap"},{"question":"You are provided with a list of student names and their corresponding scores in a test. Your task is to determine the rank of each student in descending order based on their score. If two students have the same score, rank them alphabetically by their names. Input The first line contains an integer N, representing the number of students. The next N lines each contain a student\'s name, followed by their score, separated by a space. Output Print the students\' names along with their rank, each on a new line in the format \\"<rank>. <name>\\". Constraints 1 ≤ N ≤ 50 1 ≤ length of name ≤ 100 0 ≤ score ≤ 100 SAMPLE INPUT 4 Alice 85 Bob 92 Charlie 75 David 85 SAMPLE OUTPUT 1. Bob 2. Alice 2. David 4. Charlie","solution":"def rank_students(student_scores): Ranks students based on their scores in descending order. If two students have the same score, rank them alphabetically by their names. :param student_scores: A list of tuples where each tuple contains a student\'s name and their score. :return: A list of strings in the format \\"<rank>. <name>\\" sorted_students = sorted(student_scores, key=lambda x: (-x[1], x[0])) result = [] current_rank = 1 for i, (name, score) in enumerate(sorted_students): if i > 0 and score == sorted_students[i-1][1]: result.append(f\\"{current_rank}. {name}\\") else: current_rank = i + 1 result.append(f\\"{current_rank}. {name}\\") return result # Helper function to parse the input (useful for testing) def parse_input(input_str): lines = input_str.strip().split(\\"n\\") n = int(lines[0].strip()) student_scores = [] for i in range(1, n+1): name, score = lines[i].rsplit(\\" \\", 1) student_scores.append((name, int(score))) return student_scores"},{"question":"Given an array of integers and a series of query ranges, write a function to find the maximum sum of any non-empty subarray within each of the specified ranges. A subarray is a contiguous part of an array, and the sum of a subarray is the sum of its elements. # Function Signature ```python def max_subarray_sum_in_range(arr: List[int], queries: List[Tuple[int, int]]) -> List[int]: ``` # Input - `arr`: A list of integers `arr` where `arr[i]` represents the `i`-th element of the array. (1 <= len(arr) <= 100000) - `queries`: A list of tuples `queries` where each tuple consists of two integers `(l, r)` representing the start and end indices (inclusive) of a subarray. (1 <= len(queries) <= 10000) # Output - The function should return a list of integers where each integer is the maximum sum of any non-empty subarray within the specified range of the corresponding query. # Example Input ```python arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] queries = [(0, 4), (1, 7), (0, 8)] ``` Output ```python [4, 6, 6] ``` # Explanation - For query `(0, 4)`, the subarray `[4]` has the maximum sum `4`. - For query `(1, 7)`, the subarray `[4, -1, 2, 1]` has the maximum sum `6`. - For query `(0, 8)`, the subarray `[4, -1, 2, 1]` has the maximum sum `6`. # Constraints - You may assume that the range indices in the queries are valid and within the bounds of the array. - Implement the solution with a time complexity that efficiently handles the given constraints. The naive solution with `O(n^2)` complexity per query might be too slow. Consider more efficient approaches.","solution":"from typing import List, Tuple def max_subarray_sum_in_range(arr: List[int], queries: List[Tuple[int, int]]) -> List[int]: def kadane_algorithm(subarray: List[int]) -> int: max_ending_here = subarray[0] max_so_far = subarray[0] for num in subarray[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far results = [] for l, r in queries: subarray = arr[l:r+1] max_sum = kadane_algorithm(subarray) results.append(max_sum) return results"},{"question":"A string S is called special if it contains exactly two distinct characters and both characters appear the same number of times. You are given two integers N and K. You need to find the lexicographically smallest special string of length N where each character in the string comes from the first K letters of the English alphabet. If no such string exists, return an empty string. The lexicographical order is defined by the order of characters in the English alphabet. -----Input----- The input consists of two integers N and K (2 leq N leq 1000, 2 leq K leq 26). -----Output----- Output a string that is the lexicographically smallest special string of length N, or an empty string if no such string exists. -----Examples----- Input 4 3 Output aabb Input 5 2 Output \\"\\" -----Note----- In the first example, \\"aabb\\" is the lexicographically smallest string where both \'a\' and \'b\' appear exactly 2 times. In the second example, it is impossible to form a special string of length 5 using exactly 2 distinct characters with each appearing the same number of times. Thus, the output is an empty string.","solution":"def smallest_special_string(N, K): Returns the lexicographically smallest special string of length N using the first K letters of the alphabet. If no such string exists, returns an empty string. # If N is odd then it\'s impossible to form pairs of characters if N % 2 != 0: return \\"\\" # There need to be at least 2 distinct characters to form a special string if K < 2: return \\"\\" # Construct the lexicographically smallest special string half_length = N // 2 return \\"a\\" * half_length + \\"b\\" * half_length"},{"question":"Mallik is a delivery person working for a company that operates in a city laid out in a rectangular grid. Each cell in the grid either contains a road on which Mallik can drive or an obstacle which Mallik cannot pass through. Mallik starts at the top-left corner of the grid (1, 1), and his goal is to deliver a package to the bottom-right corner (n, m). Mallik can only move right or down at each step. Determine the number of unique paths Mallik can take to reach his destination, taking into account the obstacles. Write a function that takes in the grid configuration and returns the number of unique paths modulo (10^9 + 7). -----Input----- - The first line contains two integers, (n) and (m) ((1 le n, m le 500)), representing the dimensions of the grid. - The next (n) lines each contain (m) characters, where each character is either \'.\' (a road) or \'#\' (an obstacle). -----Output----- Print a single integer - the number of unique paths from the top-left corner to the bottom-right corner, modulo (10^9 + 7). -----Examples----- Sample Input: 3 3 ... .#. ... Sample Output: 2 Sample Input: 3 3 ..# .#. ... Sample Output: 1 Sample Input: 1 1 . Sample Output: 1","solution":"MOD = 10**9 + 7 def number_of_unique_paths(n, m, grid): # Handle edge case for starting point if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] dp[i][j] %= MOD return dp[n-1][m-1]"},{"question":"**Problem Description:** In the world of competitive programming, efficiency is key. One frequently encountered operation is finding the sum of elements within a specific range in an array. Given the rapid pace required during contests, doing this repeatedly through brute force can be too slow. Instead, we seek a more optimal approach. To solve this, we can employ the use of prefix sums, which allows us to precompute sums of subarrays in constant time after an initial linear pass through the array. # Detailed Explanation: A prefix sum array is an array where each element at index `i` represents the sum of the elements from the start of the original array up to index `i`. Creating this array once allows for quick query responses to find the sum of any subarray. For example, given an array `arr = [3, 1, 4, 1, 5]`: The prefix sum array `prefix = [3, 4, 8, 9, 14]` is constructed as follows: - Prefix[0] = arr[0] = 3 - Prefix[1] = Prefix[0] + arr[1] = 3 + 1 = 4 - Prefix[2] = Prefix[1] + arr[2] = 4 + 4 = 8 - Prefix[3] = Prefix[2] + arr[3] = 8 + 1 = 9 - Prefix[4] = Prefix[3] + arr[4] = 9 + 5 = 14 Given this prefix sum array, the sum of elements in any range `[i, j]` can be computed as: - `Sum[i, j] = Prefix[j] - Prefix[i-1]` if `i > 0` - `Sum[0, j] = Prefix[j]` otherwise # Problem Statement: You will be given an integer array and multiple queries. Each query will ask you to find the sum of a subarray specified by its start and end indices. Write a function to efficiently process these queries. **Input:** - First line contains two integers `n` and `q` where `n` denotes the number of elements in the array and `q` denotes the number of queries. - Second line contains `n` integers, the elements of the array. - The next `q` lines each contain two integers `l` and `r` (0-indexed), representing the range for which the sum is to be computed (inclusive). **Output:** - For each query, output the sum of the elements in the specified range. **Constraints:** - 1 <= n <= 100,000 - 1 <= q <= 100,000 - -10^9 <= arr[i] <= 10^9 # Example: **Sample Input:** ``` 5 3 3 1 4 1 5 0 2 1 3 0 4 ``` **Sample Output:** ``` 8 6 14 ``` **Explanation:** - For the query `(0, 2)`, the sum is `3 + 1 + 4 = 8`. - For the query `(1, 3)`, the sum is `1 + 4 + 1 = 6`. - For the query `(0, 4)`, the sum is `3 + 1 + 4 + 1 + 5 = 14`. Using prefix sums, precomputation ensures that each range query is processed in constant time, providing an optimal solution for large input sizes.","solution":"def preprocess_prefix_sums(arr): This function preprocesses the given array into a prefix sum array for efficient range sum queries. n = len(arr) prefix_sums = [0] * n prefix_sums[0] = arr[0] for i in range(1, n): prefix_sums[i] = prefix_sums[i - 1] + arr[i] return prefix_sums def range_sum_queries(arr, queries): This function uses the prefix sums to answer each range sum query in constant time. prefix_sums = preprocess_prefix_sums(arr) results = [] for l, r in queries: if l == 0: results.append(prefix_sums[r]) else: results.append(prefix_sums[r] - prefix_sums[l - 1]) return results"},{"question":"You are given an array `arr` consisting of `n` integers. The goal is to implement a function that returns the count of pairs `(i, j)` such that `i < j` and `arr[i] > arr[j]`. This problem is essentially asking for the number of inversions in the array. An inversion of an array is a pair of elements where the elements are out of the natural order. Write a function `countInversions` that counts the number of such inversions in the array. -----Input----- - The first line contains an integer `n` (`1 <= n <= 1000`) — the number of elements in the array. - The second line contains `n` integers `arr_1, arr_2, ..., arr_n` (`1 <= arr_i <= 10^5`) — the elements of the array. -----Output----- - Output a single integer, the number of inversions in the given array. -----Examples----- Input: 5 2 3 8 6 1 Output: 5 Input: 3 1 2 3 Output: 0 -----Note----- For the first test case, the following pairs are inversions: - (1, 5) - (2, 5) - (3, 4) - (3, 5) - (4, 5) So the obvious output is `5`. For the second test case, there are no such pairs since the array is already sorted. Thus, the output is `0`.","solution":"def countInversions(n, arr): Function to count the number of inversions in the array. Args: n : int : number of elements in the array arr : list of int : the elements of the array Returns: int : the number of inversions in the array def merge_count_split_inv(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right) return inv_count temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n-1)"},{"question":"Each year, an organization orchestrates a charity event in which several teams participate to collect donations. The teams can be identified by their names, and each team registers its donations day by day. You are tasked to write a program that processes the donations from multiple days and determines the team with the maximum total donation. The number of teams can be large and the number of days can vary, so your program needs to be efficient in both time and space complexity. -----Input----- The first line contains one integer n (1 le n le 10^5) — the number of days. Each of the next n lines contains one string name and one integer donation (1 le |name| le 50, 1 le donation le 10^9) — the name of the team and the amount of donation collected by that team on that day. -----Output----- Output a single line containing the name of the team with the maximum total donations. If there are multiple teams with the same maximum total donation, output the lexicographically smallest name among them. -----Examples----- Input 6 TeamA 100 TeamB 200 TeamA 150 TeamC 50 TeamB 300 TeamC 10 Output TeamB Input 4 Alpha 300 Bravo 300 Charlie 150 Bravo 300 Output Bravo -----Note----- In the first example, TeamA\'s total donation is 250 (100 + 150), TeamB\'s total donation is 500 (200 + 300), and TeamC\'s total donation is 60 (50 + 10). TeamB has the highest total donation of 500. In the second example, both Alpha and Bravo have a total donation of 600 each, but Bravo is lexicographically smaller than Alpha.","solution":"def find_max_donations_team(n, donations): from collections import defaultdict team_donations = defaultdict(int) for name, donation in donations: team_donations[name] += donation max_donation = max(team_donations.values()) max_teams = [team for team, amount in team_donations.items() if amount == max_donation] return min(max_teams)"},{"question":"You are given a list of integers and a target sum. Your task is to determine if there are two distinct numbers in the list that add up to the target sum. Write a function `find_pair_with_sum` that takes an array of integers and an integer target sum as inputs and returns a boolean value indicating whether such a pair exists. Input: - An integer n (1 ≤ n ≤ 10^5) indicating the number of elements in the list. - A list of n integers (each between -10^9 and 10^9). - An integer target sum (between -10^9 and 10^9). Output: - A boolean value, `True` if there are two different numbers in the list that add up to the target sum, and `False` otherwise. Example Input: ``` 5 1 2 3 4 5 9 ``` Output: ``` True ``` Explanation: The pair (4, 5) adds up to 9. Input: ``` 4 1 2 3 8 7 ``` Output: ``` False ``` Explanation: There is no pair of distinct numbers that add up to 7.","solution":"def find_pair_with_sum(n, lst, target): Returns True if there are two distinct numbers in the list that add up to the target sum. seen_numbers = set() for number in lst: complement = target - number if complement in seen_numbers: return True seen_numbers.add(number) return False"},{"question":"Given a sequence of n integers, determine the smallest number of changes required to make all the elements of the sequence equal to its mode. The mode of a sequence is the value that appears most frequently. If there are multiple values that appear with the same highest frequency, pick the smallest value among them. In other words, count the number of elements that need to be changed to make all elements in the sequence equal to the most frequent number (mode) of the sequence. -----Input----- The first line of the input contains a single integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 2 times 10^5) — the number of integers in the sequence. The second line of each test case contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the sequence. It is guaranteed that the sum of n over all test cases does not exceed 2 times 10^5. -----Output----- For each test case, print a single integer — the smallest number of changes required to make all elements in the sequence equal to its mode. -----Examples----- Input 3 6 1 1 2 2 2 3 5 4 4 4 4 4 4 1 2 3 4 Output 3 0 3 -----Note----- For the first test case, the mode is 2 (which appears 3 times). To make all elements equal to 2, we need to change three elements: \\"1\\", \\"1\\", and \\"3\\". For the second test case, the mode is 4 (which appears 5 times). Since all elements are already 4, no changes are required. For the third test case, the mode is any of \\"1\\", \\"2\\", \\"3\\", or \\"4\\" (each appears once), and we need to change three elements to match the smallest mode, which is \\"1\\".","solution":"from collections import Counter def smallest_changes_to_mode(test_cases): results = [] for n, sequence in test_cases: counter = Counter(sequence) mode_count = max(counter.values()) changes_required = n - mode_count results.append(changes_required) return results"},{"question":"You are given a matrix of size N x M. Your task is to find and return the sum of all distinct elements present in the matrix. Example 1: Input: N = 3, M = 3 Matrix = [[1, 2, 3], [4, 1, 5], [6, 7, 3]] Output: 28 Explanation: The distinct elements in the matrix are 1, 2, 3, 4, 5, 6, 7. The sum of these distinct elements is 28. Example 2: Input: N = 2, M = 2 Matrix = [[1, 2], [2, 1]] Output: 3 Explanation: The distinct elements in the matrix are 1, 2. The sum of these distinct elements is 3. Your Task: You don\'t need to read or print anything. Your task is to complete the function sumOfDistinctElements() which takes N, M, and the matrix as input parameters and returns the sum of all distinct elements present in the matrix. Expected Time Complexity: O(N * M) Expected Space Complexity: O(N * M) Constraints: 1 <= N, M <= 500 0 <= matrix[i][j] <= 10^3","solution":"def sumOfDistinctElements(N, M, matrix): Returns the sum of all distinct elements present in the matrix. distinct_elements = set() for row in matrix: for element in row: distinct_elements.add(element) return sum(distinct_elements)"},{"question":"In a mystical forest, there are n magical stones placed in a row, and each stone is enchanted with a specific spell of type a_i (1 ≤ a_i ≤ n). A spell of type x can turn a stone of type y into a stone of type (x * y) % n. Natalie, a forest guardian, needs to turn all the stones into stones of type 1 using the minimum number of spells. She can cast a spell only if it\'s already available on some stone in the row. Help Natalie by determining the minimum number of spells required to turn all stones into stones of type 1. If it\'s not possible, return -1. Input The first line of input contains a single integer n (2 ≤ n ≤ 1000) — the number of stones. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the type of each stone. Output Print the minimum number of spells required to turn all the stones into stones of type 1. If it\'s not possible, print -1. Examples Input 3 2 4 8 Output 3 Input 4 3 6 9 12 Output 4 Input 2 1 1 Output 0","solution":"def min_spells_to_type_one(n, stones): Determine the minimum number of spells required to turn all stones into stones of type 1. If it\'s not possible, return -1. from math import gcd from functools import reduce # Function to compute gcd of an array def array_gcd(arr): return reduce(gcd, arr) # Compute gcd of all stone types current_gcd = array_gcd(stones) # If the gcd of all stone types is 1, it\'s possible # Otherwise, it\'s not possible if current_gcd != 1: return -1 # Count the number of stones already type 1 count_type_one = stones.count(1) # If there are type 1 stones, we don\'t need additional spells for them # Otherwise, each stone needs at least one spell to become type 1 if count_type_one > 0: return n - count_type_one else: return n"},{"question":"A popular library allows members to borrow books. Each book can be checked out for a maximum number of days. If a member wants to renew a book, they can extend the borrowing period up to a certain number of times, provided the total time they borrow the book does not exceed a maximum limit set by the library. Design a program to determine how many members can successfully borrow books based on their borrowing and renewal preferences. -----Input----- - The first line contains two space-separated integers, M and B. M is the total number of members attempting to borrow books, and B is the total number of books available. - The second line contains B space-separated integers, where the i-th integer represents the maximum number of days the i-th book can be borrowed. - Each of the next M lines contains three space-separated integers: T, R, and K. T is the number of days the member wants to borrow the book initially, R is the number of times they want to renew it, and K is the book number (1-indexed) they want to borrow. -----Output----- - Output a single line containing the number of members who can successfully borrow their requested books based on their borrowing and renewal preferences. -----Constraints----- - 1 ≤ M, B ≤ 100,000 - 1 ≤ T, R, K ≤ 1,000,000,000 - Each book can be borrowed by at most one member initially. -----Example----- Input: 3 3 15 20 10 10 1 1 5 3 2 6 0 3 Output: 3 -----Explanation----- - The 1st member wants to borrow book 1 for 10 days and renew it 1 time, totaling 20 days which exceeds the limit of 15 days for book 1, so this member cannot successfully borrow the book. - The 2nd member wants to borrow book 2 for 5 days and renew it 3 times, totaling 20 days which is exactly within the 20 days limit for book 2, so this member can successfully borrow the book. - The 3rd member wants to borrow book 3 for 6 days with no renewals, totaling 6 days which is well within the 10 days limit for book 3, so this member can successfully borrow the book. - Therefore, the number of members who can successfully borrow their requested books is 2.","solution":"def count_successful_borrows(M, B, books, members): successful_members = 0 book_status = [False] * B # Keeps track if a book is already borrowed for T, R, K in members: K -= 1 # Convert 1-indexed book number to 0-indexed total_days_requested = T + T * R if not book_status[K] and total_days_requested <= books[K]: successful_members += 1 book_status[K] = True # Mark the book as borrowed return successful_members # Example usage: M = 3 B = 3 books = [15, 20, 10] members = [ (10, 1, 1), (5, 3, 2), (6, 0, 3) ] print(count_successful_borrows(M, B, books, members)) # Output: 2"},{"question":"Write a function that takes a positive integer N and determines whether its binary representation has alternating 0s and 1s starting with a 1. In other words, when viewed from left to right, the binary digits should alternate like 101010... or 010101... . If the pattern holds, return \\"Yes\\", otherwise, return \\"No\\". Example 1: Input: 5 Output: Yes Explanation: The binary representation of 5 is 101, which has alternating 0s and 1s. Example 2: Input: 7 Output: No Explanation: The binary representation of 7 is 111, which does not have alternating 0s and 1s. Your Task: You don\'t need to read or print anything. Your task is to complete the function has_alternating_bits() which takes N as the input parameter and returns \\"Yes\\" if the binary representation of N has alternating bits, otherwise returns \\"No\\" (without quotes). Expected Time Complexity: O(log(N)) Expected Space Complexity: O(1) Constraints: 1 <= N <= 10^{18}","solution":"def has_alternating_bits(N): Determines if the binary representation of N has alternating 0s and 1s starting with a 1. :param N: Integer :return: \\"Yes\\" if the binary representation has alternating bits, \\"No\\" otherwise # Get the binary representation of N without the \'0b\' prefix binary_str = bin(N)[2:] # Check for alternating bits for i in range(len(binary_str) - 1): if binary_str[i] == binary_str[i + 1]: return \\"No\\" return \\"Yes\\""},{"question":"Alice loves playing with numbers, especially prime numbers. She recently came up with a challenge to find the smallest prime number greater than a given input number \'n\'. Write a program to help Alice out. The program should take an integer input \'n\' and return the smallest prime number that is greater than \'n\'. Input A single integer \'n\'. Output The smallest prime number greater than \'n\'. Example 1 Input: 10 Output: 11 Example 2 Input: 20 Output: 23","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def next_prime(n): Returns the smallest prime number greater than n. num = n + 1 while not is_prime(num): num += 1 return num"},{"question":"Samantha has recently started learning about sequences and patterns in mathematics. One of the patterns she finds intriguing is the longest contiguous subsequence where the difference between consecutive elements is consistent. This sequence is also known as an arithmetic progression (AP). Given an array of integers, she wants to determine the length of the longest contiguous subsequence that forms an arithmetic progression. Your task is to help Samantha with this challenge. -----Input----- - The first line contains an integer T, denoting the number of test cases. - For each test case: - The first line contains an integer N, denoting the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. -----Output----- - For each test case, print a single integer representing the length of the longest contiguous subsequence that forms an arithmetic progression. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - -10^9 ≤ Ai ≤ 10^9 -----Example----- Input: 2 5 1 2 3 4 5 6 9 7 5 3 2 1 Output: 5 3 -----Explanation----- Example case 1: The longest contiguous subsequence where the difference between consecutive elements is constant (1) is the entire array: [1, 2, 3, 4, 5]. So, the output is 5. Example case 2: The subarrays forming arithmetic progressions are [9, 7, 5, 3] and [3, 2, 1]. The longest length is 4. So, the output is 4.","solution":"def longest_ap_subsequence_length(array): Determines the length of the longest contiguous subsequence that forms an arithmetic progression (AP) in the given array of integers. :param array: A list of integers. :return: An integer representing the length of the longest contiguous subsequence that forms an AP. if len(array) <= 1: return len(array) longest_length = 1 current_length = 1 common_diff = array[1] - array[0] for i in range(1, len(array)): if array[i] - array[i-1] == common_diff: current_length += 1 else: common_diff = array[i] - array[i-1] current_length = 2 longest_length = max(longest_length, current_length) return longest_length def solve(test_cases): results = [] for case in test_cases: n, arr = case results.append(longest_ap_subsequence_length(arr)) return results"},{"question":"The Kingdom of Farbionia is known for its colorful warfare. They have a unique way of deploying their troops into the battlefield. Each soldier is represented by a certain percentage that indicates the portion of strength they have. The total strength of a unit must not exceed 100%. Write a function that will accept an array of integers, where each integer represents the portion of strength of a soldier, and an integer `k` representing the number of units to form. The goal is to split the soldiers into exactly `k` units such that the maximum individual unit strength does not exceed 100%, and each soldier is assigned to exactly one unit. For example: ``` deploy([30, 20, 50, 40, 10], 3) ``` Should return `[[30, 20], [50], [40, 10]]`. If it is not possible to achieve this configuration return an empty array. Good luck!","solution":"def deploy(soldiers_strength, k): Deploy soldiers into k units such that no unit exceeds 100% strength. If it\'s not possible to form k units that satisfy the condition, return an empty list. :param soldiers_strength: List of integers representing the strength of each soldier. :param k: Number of units to form. :return: List of k units, where each unit is a list of soldier strengths. soldiers_strength.sort(reverse=True) units = [[] for _ in range(k)] unit_strength = [0] * k for strength in soldiers_strength: # Find the unit with the minimum total strength that can accommodate the current soldier min_unit_index = -1 min_unit_strength = float(\'inf\') for i in range(k): if unit_strength[i] + strength <= 100 and unit_strength[i] < min_unit_strength: min_unit_index = i min_unit_strength = unit_strength[i] if min_unit_index == -1: # Cannot place this soldier in any unit without exceeding the maximum strength return [] units[min_unit_index].append(strength) unit_strength[min_unit_index] += strength return units"},{"question":"You are given a rectangular matrix of integers with dimensions M (rows) x N (columns). Your task is to find the sum of the elements in the matrix that are not in the border cells. The border cells are the cells that are in the first row, last row, first column, or last column. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - For each test case: - The first line contains two integers M and N, the dimensions of the matrix. - The next M lines each contain N integers, representing the elements of the matrix. ------ Output Format ------ For each test case, output a single integer, the sum of the non-border elements of the matrix. If there are no non-border elements, output 0. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ M, N ≤ 100 -10^3 ≤ text{matrix}[i][j] ≤ 10^3 ----- Sample Input 1 ------ 2 4 4 1 1 1 1 1 2 2 1 1 2 2 1 1 1 1 1 3 3 1 1 1 1 2 1 1 1 1 ----- Sample Output 1 ------ 8 2 ----- Explanation 1 ------ Test case 1: In the 4x4 matrix, the border cells are documented as positions in the 1st and 4th rows, and 1st and 4th columns. The remaining non-border elements are the middle 4 cells which sum to 2+2+2+2 = 8. Test case 2: In the 3x3 matrix, only the center element (2) is not on the border, so the sum is 2.","solution":"def sum_non_border_elements(matrix): Returns the sum of non-border elements of a rectangular matrix. M = len(matrix) N = len(matrix[0]) # If the matrix is smaller than 3x3, there are no non-border elements if M < 3 or N < 3: return 0 sum_non_border = 0 for i in range(1, M-1): for j in range(1, N-1): sum_non_border += matrix[i][j] return sum_non_border def process_input(T, cases): results = [] for case in cases: M, N, matrix = case result = sum_non_border_elements(matrix) results.append(result) return results def main(T, cases): results = process_input(T, cases) return results"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},Y={class:"search-container"},F={class:"card-container"},C={key:0,class:"empty-state"},P=["disabled"],j={key:0},R={key:1};function D(s,e,u,p,r,a){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",Y,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",F,[(n(!0),i(w,null,_(a.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",C,' No results found for "'+h(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",j,"See more"))],8,P)):l("",!0)])}const z=d(A,[["render",D],["__scopeId","data-v-8605a143"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/4.md","filePath":"deepseek/4.md"}'),M={name:"deepseek/4.md"},U=Object.assign(M,{setup(s){return(e,u)=>(n(),i("div",null,[x(z)]))}});export{B as __pageData,U as default};
