import{_ as c,o as n,c as i,a as t,m as h,t as d,C as g,M as _,U as y,f as u,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},A={class:"review-title"},E={class:"review-content"};function S(a,e,l,m,r,s){return n(),i("div",T,[t("div",q,[t("div",A,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),h(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),h(d(l.poem.solution),1)])])])}const C=c(k,[["render",S],["__scopeId","data-v-30757d02"]]),F=JSON.parse('[{"question":"In this problem, you are required to manipulate strings in Python. Write a function named `reverse_words` that takes a single string containing a sentence as input, and returns a new string in which the order of the words is reversed. Each word in the sentence is separated by a single space. The function should perform the following steps: 1. Split the sentence into individual words. 2. Reverse the order of the words. 3. Join the reversed words back into a single string, with each word separated by a single space. **Function Signature:** ```python def reverse_words(sentence: str) -> str: pass ``` **Parameters:** - `sentence` (str): A string containing a sentence of words separated by spaces. **Return:** - `str`: A new string with the order of words reversed. **Example Usage:** ```python sentence = \\"Hello world this is a test\\" result = reverse_words(sentence) print(result) # Output: \\"test a is this world Hello\\" ``` **Requirements:** - Do not use any external libraries for reversing the words. - Ensure that the input and output strings do not have leading or trailing spaces. - The function should handle multiple spaces between words correctly.","solution":"def reverse_words(sentence: str) -> str: Reverses the order of words in the given sentence. Args: sentence (str): A string containing a sentence of words separated by spaces. Returns: str: A new string with the order of words reversed. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"**Problem Title: String Permutation Checker** Create a function named `is_permutation` that takes two arguments: `str1` and `str2`, representing two strings. The function should determine if `str2` is a permutation (anagram) of `str1`. A permutation of a string is another string that contains the same characters, only in a different order. The comparison should be case-sensitive and should not ignore any spaces or special characters. Your program should ensure the following: 1. Both input strings can contain any printable ASCII characters including spaces. 2. If `str2` is a permutation of `str1`, return `True`; otherwise, return `False`. 3. The function should handle edge cases where the input strings have different lengths immediately by returning `False`. **Sample Function Signature:** ```python def is_permutation(str1: str, str2: str) -> bool: pass ``` **Example:** ```python str1 = \\"dog\\" str2 = \\"god\\" is_permutation(str1, str2) # Should return True str1 = \\"hello\\" str2 = \\"billion\\" is_permutation(str1, str2) # Should return False str1 = \\"12345\\" str2 = \\"54321\\" is_permutation(str1, str2) # Should return True ``` **Explanation:** - In the first example, \\"god\\" is a permutation of \\"dog\\". - In the second example, \\"billion\\" is not a permutation of \\"hello\\" as they have different characters. - In the third example, \\"54321\\" is a permutation of \\"12345\\" since it contains the same characters in a different order.","solution":"def is_permutation(str1: str, str2: str) -> bool: Checks if str2 is a permutation of str1. :param str1: First string :param str2: Second string :return: True if str2 is a permutation of str1, False otherwise # Early return since permutations must be of the same length if len(str1) != len(str2): return False # Use a dictionary to count occurrences of each character from collections import Counter return Counter(str1) == Counter(str2)"},{"question":"You need to write a function `is_perfect_string` that checks if a given string is a \\"perfect string\\". A \\"perfect string\\" meets the following criteria: 1. The string contains only lowercase alphabets. 2. The string forms a palindrome when converted to a list of its alphabetical indices (consider \'a\' as 1, \'b\' as 2, ..., \'z\' as 26). Your function should: 1. Return `True` if the string is a perfect string. 2. Return `False` otherwise. Here is the function signature: ```python def is_perfect_string(s: str) -> bool: # Your code here ``` Examples: ```python is_perfect_string(\\"abba\\") # Returns: True is_perfect_string(\\"abc\\") # Returns: False ``` Explanation: - For the string \\"abba\\", the corresponding indices are [1, 2, 2, 1]. This forms a palindrome. - For the string \\"abc\\", the corresponding indices are [1, 2, 3]. This does not form a palindrome.","solution":"def is_perfect_string(s: str) -> bool: Checks if a given string is a \\"perfect string\\". A \\"perfect string\\": 1. Contains only lowercase alphabets. 2. Forms a palindrome when converted to a list of its alphabetical indices. Parameters: s (str): The input string to be checked. Returns: bool: True if the string is a perfect string, False otherwise. if not s.isalpha() or not s.islower(): return False alpha_indices = [ord(char) - ord(\'a\') + 1 for char in s] return alpha_indices == alpha_indices[::-1]"},{"question":"Write a Python function that determines if a given number is a Narcissistic number. A Narcissistic number (or Armstrong number) is a number that is equal to the sum of its own digits each raised to the power of the number of digits. For example, the number 153 is a Narcissistic number because (153 = 1^3 + 5^3 + 3^3) and it has 3 digits. Write a function `is_narcissistic(num)` that checks if a given integer is a Narcissistic number. The function should take one argument: - `num` (int): The number to be checked. The function should return: - `True` if the number is a Narcissistic number. - `False` otherwise. **Constraints:** - The input number is a non-negative integer. **Example:** ```python is_narcissistic(153) ``` Output: ```python True ``` **Example:** ```python is_narcissistic(123) ``` Output: ```python False ``` **Hint:** To determine if a number is a Narcissistic number, sum its digits each raised to the power of the number of digits in the number and compare this sum to the original number.","solution":"def is_narcissistic(num): Check if the given number is a Narcissistic number. A Narcissistic number is a number that is equal to the sum of its own digits each raised to the power of the number of digits. Parameters: num (int): The number to be checked. Returns: bool: True if the number is a Narcissistic number, False otherwise. digits = [int(d) for d in str(num)] num_digits = len(digits) return num == sum(d ** num_digits for d in digits)"},{"question":"Write a function that simulates a basic banking transaction ledger, where users can deposit, withdraw, and check their balance. The function should initialize with a balance of zero and support the following operations: - \\"deposit x\\": Adds `x` amount to the balance. - \\"withdraw y\\": Subtracts `y` amount from the balance if sufficient funds exist; otherwise, it should print \\"Insufficient funds\\". - \\"balance\\": Returns the current balance. The function will take a list of transaction operations to perform and return the final balance at the end. Assume `x` and `y` are non-negative integers. You should write self-contained code starting with: ```python def bank_operations(operations): ``` Example usage: ```python operations = [\\"deposit 100\\", \\"withdraw 50\\", \\"balance\\", \\"withdraw 60\\", \\"deposit 200\\", \\"balance\\"] print(bank_operations(operations)) ```","solution":"def bank_operations(operations): Simulates a basic banking transaction ledger. Parameters: operations (list): List of transaction operations as strings. Returns: int: Final balance after performing all operations. balance = 0 for operation in operations: if operation.startswith(\\"deposit\\"): _, amount = operation.split() balance += int(amount) elif operation.startswith(\\"withdraw\\"): _, amount = operation.split() if balance >= int(amount): balance -= int(amount) else: print(\\"Insufficient funds\\") elif operation == \\"balance\\": pass return balance"},{"question":"Write a function named `daily_temperature_fluctuations` that takes a single argument `data`, which is a pandas DataFrame. The DataFrame contains daily temperature records with columns [\'date\', \'temperature\']. The objective of the function is to calculate the daily temperature difference by subtracting the minimum temperature from the maximum temperature for each day, generate a new DataFrame with the results, and return this new DataFrame. The new DataFrame should have columns [\'date\', \'temp_difference\']. Ensure that: 1. The \'date\' column in the input DataFrame is of datetime type. 2. The function properly groups the data by date. 3. The resulting DataFrame is sorted by the \'date\' column in ascending order. **Function Signature:** ```python def daily_temperature_fluctuations(data: pd.DataFrame) -> pd.DataFrame: ``` **Example:** ```python import pandas as pd from datetime import datetime # Sample DataFrame data = pd.DataFrame({ \'date\': [datetime(2023, 1, 1), datetime(2023, 1, 1), datetime(2023, 1, 2), datetime(2023, 1, 2)], \'temperature\': [10, 15, 5, 20] }) result_df = daily_temperature_fluctuations(data) print(result_df) # Expected output: # date temp_difference # 0 2023-01-01 5 # 1 2023-01-02 15 ``` Make sure to handle the following: 1. Group the temperature data by the \'date\' column. 2. Compute the temperature difference for each group. 3. Sort the result by \'date\' in ascending order. 4. Return the new DataFrame containing \'date\' and \'temp_difference\'.","solution":"import pandas as pd def daily_temperature_fluctuations(data: pd.DataFrame) -> pd.DataFrame: Calculate the daily temperature difference by subtracting the minimum temperature from the maximum temperature for each day. Parameters: data (pd.DataFrame): DataFrame containing columns [\'date\', \'temperature\'] Returns: pd.DataFrame: New DataFrame with columns [\'date\', \'temp_difference\'] # Ensure \'date\' column is of datetime type data[\'date\'] = pd.to_datetime(data[\'date\']) # Group by \'date\' and calculate the temperature difference grouped = data.groupby(\'date\')[\'temperature\'].agg(lambda x: x.max() - x.min()).reset_index() grouped.columns = [\'date\', \'temp_difference\'] # Sort by \'date\' in ascending order result = grouped.sort_values(by=\'date\').reset_index(drop=True) return result"},{"question":"You are required to implement a function named `plot_temp_variations` which uses the provided temperature data to generate a plot that visually compares the daily high and low temperatures for a given month. You should use `matplotlib.pyplot.legend` to add a legend to the plot, to clearly distinguish between the high and low temperature lines. The function `plot_temp_variations` should take the following inputs: 1. `days`: A list of integers representing the days of the month. Example: [1, 2, 3, ..., 30]. 2. `highs`: A list of floating-point numbers representing the high temperatures for each corresponding day in `days`. 3. `lows`: A list of floating-point numbers representing the low temperatures for each corresponding day in `days`. The function should generate a plot with: - The x-axis labeled \\"Day\\". - The y-axis labeled \\"Temperature (°C)\\". - Two lines: one for daily high temperatures with markers \'r-\' representing `highs`, and another for daily low temperatures with markers \'b-\' representing `lows`. - A legend clearly indicating which line represents high temperatures and which represents low temperatures. - The function should display the plot. To help you better understand the requirement, here is a definition of the function you need to implement: ```python def plot_temp_variations(days, highs, lows): Plots the daily high and low temperatures for a given month. Parameters: days (list of int): Integers representing the days of the month. highs (list of float): High temperatures for each day. lows (list of float): Low temperatures for each day. Returns: None pass # Your code here ``` Ensure to use `matplotlib.pyplot.legend` to create the legend for the plot. Also, make sure that the function displays the plot using `plt.show()`.","solution":"import matplotlib.pyplot as plt def plot_temp_variations(days, highs, lows): Plots the daily high and low temperatures for a given month. Parameters: days (list of int): Integers representing the days of the month. highs (list of float): High temperatures for each day. lows (list of float): Low temperatures for each day. Returns: None plt.figure(figsize=(10, 5)) plt.plot(days, highs, \'r-\', label=\'Highs\') plt.plot(days, lows, \'b-\', label=\'Lows\') plt.xlabel(\'Day\') plt.ylabel(\'Temperature (°C)\') plt.title(\'Daily High and Low Temperatures\') plt.legend() plt.grid(True) plt.show()"},{"question":"Your task is to write a function named `draw_hexagon` using Python\'s `turtle` module. The function should draw a regular hexagon with each side of length 100 units. # Requirements: 1. Implement the function `draw_hexagon`. 2. Utilize the `turtle.forward` and `turtle.right` functions to correctly draw the hexagon. 3. Ensure that the sides of the hexagon are of equal length and the angles between them are 120 degrees. # Example Usage: ```python import turtle def draw_hexagon(): # Your code here # Initialize the turtle screen screen = turtle.Screen() # Create a turtle object my_turtle = turtle.Turtle() # Call the function to draw the hexagon draw_hexagon() # Close the turtle graphics window screen.mainloop() ``` In this example, once you call `draw_hexagon()`, the turtle should draw a regular hexagon with each side 100 units long.","solution":"import turtle def draw_hexagon(): for _ in range(6): turtle.forward(100) turtle.right(60) # Example usage (uncomment to execute): # screen = turtle.Screen() # my_turtle = turtle.Turtle() # draw_hexagon() # screen.mainloop()"},{"question":"Island Perimeter Calculation Implement a function `island_perimeter(grid)` that calculates the perimeter of the island in the given grid. The grid is a rectangular lattice of cells, where each cell can either be land or water. Each cell in the grid is a square with a side length of 1. The island consists of one or more connected land cells, and there is exactly one island (i.e., one or more connected components of land). # Function Signature ```python def island_perimeter(grid: List[List[int]]) -> int: ``` # Input - `grid`: A list of lists where each element is either 0 (representing water) or 1 (representing land). The dimensions of the grid are `m x n` (1 ≤ m, n ≤ 1000). # Output - An integer representing the perimeter of the island in the grid. # Approach 1. **Perimeter Calculation**: - Traverse the grid cell by cell. - For each land cell, calculate the contribution to the perimeter: - If a land cell\'s neighbor (up, down, left, or right) is water or out of the boundary of the grid, it adds to the perimeter. - Sum the contributions from all land cells to get the total perimeter. 2. **Edge Cases**: - Handle cases where the grid is empty or consists entirely of water (return 0). - Ensure to check the boundaries of the grid to avoid index errors. # Constraints - Efficient computation is required since grid dimensions can be large (up to 1000 x 1000). # Example ```python grid = [ [0, 1, 0, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 0, 0] ] print(island_perimeter(grid)) # Output: 16 ``` # Note 1. Ensure the function correctly handles different grid configurations including odd shapes of the island. 2. Optimize to avoid unnecessary checks or computations for cells that are water. Good luck!","solution":"def island_perimeter(grid): Returns the perimeter of the island in the grid. rows = len(grid) cols = len(grid[0]) perimeter = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1: # Each land cell contributes 4 to the perimeter initially perimeter += 4 # Check all four possible neighbors, subtract 1 for each land neighbor if r > 0 and grid[r - 1][c] == 1: perimeter -= 1 if r < rows - 1 and grid[r + 1][c] == 1: perimeter -= 1 if c > 0 and grid[r][c - 1] == 1: perimeter -= 1 if c < cols - 1 and grid[r][c + 1] == 1: perimeter -= 1 return perimeter"},{"question":"In avian migration studies, it is often crucial to simulate the movement of birds across a specified grid that represents a geographic area. The objective is to model how a bird navigates the grid based on given instructions, which can be to move north, south, east, or west by one unit. The position of the bird is defined by its coordinates on the grid, and you will track its final position after executing a sequence of movements. You are to implement the function `simulate_bird_movement` that simulates the bird\'s movement on the grid. The function receives a list of directions and the initial position of the bird. The function should be named `simulate_bird_movement` and take the following parameters: - `initial_x` (int): The initial x-coordinate (east-west direction) of the bird. - `initial_y` (int): The initial y-coordinate (north-south direction) of the bird. - `directions` (list): A list of strings where each string is one of the directions (\\"N\\", \\"S\\", \\"E\\", or \\"W\\"). # Requirements: 1. The function should update the bird\'s position based on the list of directions. 2. Directions should be interpreted as follows: - \\"N\\" (north): Move up by one unit (y-coordinate increases by 1). - \\"S\\" (south): Move down by one unit (y-coordinate decreases by 1). - \\"E\\" (east): Move right by one unit (x-coordinate increases by 1). - \\"W\\" (west): Move left by one unit (x-coordinate decreases by 1). 3. The function should return a tuple `(final_x, final_y)` representing the bird\'s final position. Function Signature: ```python def simulate_bird_movement(initial_x: int, initial_y: int, directions: list) -> tuple: ``` # Example: ```python final_position = simulate_bird_movement(0, 0, [\\"N\\", \\"E\\", \\"S\\", \\"W\\"]) print(final_position) # Output: (0, 0) ``` # Constraints: - The initial coordinates (initial_x and initial_y) and movements are all within reasonable integer ranges. - The directions list contains a sequence of valid movement strings as described.","solution":"def simulate_bird_movement(initial_x, initial_y, directions): Simulates bird movement on a grid based on a list of directions. :param initial_x: int, initial x-coordinate (east-west direction) :param initial_y: int, initial y-coordinate (north-south direction) :param directions: list of str, list of directions (\\"N\\", \\"S\\", \\"E\\", \\"W\\") :return: tuple of int, final (x, y) position of the bird x, y = initial_x, initial_y for direction in directions: if direction == \\"N\\": y += 1 elif direction == \\"S\\": y -= 1 elif direction == \\"E\\": x += 1 elif direction == \\"W\\": x -= 1 return x, y"},{"question":"**Implementing a Simple Feedforward Neural Network Using NumPy** In this problem, we will implement a basic feedforward (multilayer perceptron) neural network from scratch using the `numpy` library. A feedforward neural network consists of an input layer, one or more hidden layers, and an output layer. The network in this task will have one hidden layer with a ReLU activation function and an output layer with a linear activation function. Your task is to write a function `feedforward_nn` that creates and trains a simple feedforward neural network. The function should use random initialization for weights and biases, implement forward propagation and compute the loss using mean squared error. The function should be named `feedforward_nn` and have the following signature: ```python def feedforward_nn(X, y, hidden_units, learning_rate, epochs): pass ``` **Parameters:** 1. `X` (numpy.ndarray): A 2D numpy array where each row represents a data point and each column represents a feature. 2. `y` (numpy.ndarray): A 1D numpy array representing the target variable for each data point. 3. `hidden_units` (int): The number of units in the hidden layer. 4. `learning_rate` (float): The learning rate to use for gradient descent. 5. `epochs` (int): The number of iterations to train the network. **Returns:** - A tuple of numpy arrays `(W1, b1, W2, b2)` representing the learned weights and biases for the hidden and output layers, respectively. **Instructions:** - Initialize the weights `W1` (input to hidden), `W2` (hidden to output), and biases `b1` (hidden layer), `b2` (output layer) with small random values. - Implement the ReLU activation function: ( text{ReLU}(x) = max(0, x) ). - Use mean squared error for the loss: ( text{MSE}(y, hat{y}) = frac{1}{n} sum (y - hat{y})^2 ). - Use gradient descent to update the weights and biases. - Perform forward propagation to compute the output of the network. Below is an example usage scenario of how your function should work: ```python import numpy as np X = np.array([[0.5, 1.5], [1, 2], [1.5, 2.5]]) y = np.array([1, 2, 3]) hidden_units = 3 learning_rate = 0.01 epochs = 1000 W1, b1, W2, b2 = feedforward_nn(X, y, hidden_units, learning_rate, epochs) print(W1, b1, W2, b2) ```","solution":"import numpy as np def relu(x): return np.maximum(0, x) def relu_derivative(x): return np.where(x > 0, 1, 0) def mean_squared_error(y_true, y_pred): return np.mean((y_true - y_pred) ** 2) def feedforward_nn(X, y, hidden_units, learning_rate, epochs): # Initialize weights and biases with small random values input_units = X.shape[1] output_units = 1 # Assuming y is a vector (1D array) np.random.seed(42) # For reproducibility W1 = np.random.randn(input_units, hidden_units) * 0.01 b1 = np.zeros((1, hidden_units)) W2 = np.random.randn(hidden_units, output_units) * 0.01 b2 = np.zeros((1, output_units)) for epoch in range(epochs): # Forward propagation Z1 = np.dot(X, W1) + b1 A1 = relu(Z1) Z2 = np.dot(A1, W2) + b2 y_pred = Z2 # Linear activation for output layer # Compute loss loss = mean_squared_error(y, y_pred) # Backward propagation dZ2 = y_pred - y.reshape(-1, 1) dW2 = np.dot(A1.T, dZ2) / X.shape[0] db2 = np.sum(dZ2, axis=0, keepdims=True) / X.shape[0] dA1 = np.dot(dZ2, W2.T) dZ1 = dA1 * relu_derivative(Z1) dW1 = np.dot(X.T, dZ1) / X.shape[0] db1 = np.sum(dZ1, axis=0, keepdims=True) / X.shape[0] # Update weights and biases W1 -= learning_rate * dW1 b1 -= learning_rate * db1 W2 -= learning_rate * dW2 b2 -= learning_rate * db2 return W1, b1, W2, b2"},{"question":"Write a function called `remove_duplicates` that takes a list of integers as input and returns a new list with the duplicates removed while preserving the original order of the elements. The signature of the function should be as follows: ```python def remove_duplicates(nums): pass ``` In this function, you need to: 1. Iterate through the given list. 2. Keep track of the elements that have already been encountered. 3. Add elements to a new list only if they haven\'t been added before. Ensure that the output list maintains the order in which the elements first appeared in the input list. **Requirements:** - Use a set to track seen elements. - Do not use any library functions that directly accomplish this task such as `set`, `frozenset`, or similar. Here\'s an example of how this function would be used: ```python original_list = [1, 2, 2, 3, 4, 4, 5] unique_list = remove_duplicates(original_list) print(unique_list) ``` The expected output should be: ```python [1, 2, 3, 4, 5] ```","solution":"def remove_duplicates(nums): Removes duplicates from the list while preserving the original order of elements. Parameters: nums (list): A list of integers Returns: list: A new list with duplicates removed seen = set() result = [] for num in nums: if num not in seen: result.append(num) seen.add(num) return result"},{"question":"You are given a string `s` consisting of lowercase English letters. The task is to determine the length of the longest substring with all distinct characters. **Objective**: Implement a function `length_of_longest_distinct_substring(s: str) -> int` that returns the length of the longest substring where all the characters are unique. Function Signature: ```python def length_of_longest_distinct_substring(s: str) -> int: pass ``` **Example**: ```python assert length_of_longest_distinct_substring(\\"abcabcbb\\") == 3 # \\"abc\\" assert length_of_longest_distinct_substring(\\"bbbbb\\") == 1 # \\"b\\" assert length_of_longest_distinct_substring(\\"pwwkew\\") == 3 # \\"wke\\" assert length_of_longest_distinct_substring(\\"abcdef\\") == 6 # \\"abcdef\\" assert length_of_longest_distinct_substring(\\"\\") == 0 # \\"\\" ``` **Constraints**: - `0 <= len(s) <= 10^4` - `s` consists only of lowercase English letters.","solution":"def length_of_longest_distinct_substring(s: str) -> int: Returns the length of the longest substring with all distinct characters. char_map = {} left = 0 max_length = 0 for right, char in enumerate(s): if char in char_map and char_map[char] >= left: left = char_map[char] + 1 char_map[char] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are tasked with implementing a system to handle customer records at a retail store. Each customer record contains the following details: - `Customer ID`: a unique identifier (integer) - `Customer Name`: a string containing the customer\'s full name - `Email`: the customer\'s email address - `Total Purchases`: a float representing the total amount of purchases made by the customer - `Loyalty Points`: an integer representing the number of loyalty points accumulated by the customer Your goal is to create a class `CustomerRecord` that can store and manipulate this data. The class should provide the following functionalities: 1. Constructor to initialize the customer record with the provided details. 2. Method `update_purchases` that accepts an additional purchase amount and updates the `Total Purchases` and `Loyalty Points` accordingly. Assume that for every 10 spent, the customer earns 1 loyalty point. 3. Method `update_email` that accepts a new email address and updates the customer\'s email. 4. Method `get_customer_info` that returns a dictionary with the customer\'s current information. # Class Signature: ```python class CustomerRecord: def __init__(self, customer_id: int, name: str, email: str, total_purchases: float, loyalty_points: int): pass def update_purchases(self, purchase_amount: float): pass def update_email(self, new_email: str): pass def get_customer_info(self) -> dict: pass ``` # Example Usage: ```python customer = CustomerRecord(1, \'John Doe\', \'john@example.com\', 150.0, 15) customer.update_purchases(50.0) customer.update_email(\'john.doe@example.com\') info = customer.get_customer_info() print(info) # Output: {\'Customer ID\': 1, \'Customer Name\': \'John Doe\', \'Email\': \'john.doe@example.com\', \'Total Purchases\': 200.0, \'Loyalty Points\': 20} ``` # Notes: - Ensure proper encapsulation of the class attributes. - Perform necessary validations for email format and purchase amounts. - Handle edge cases where provided values might be invalid or require special handling.","solution":"import re class CustomerRecord: def __init__(self, customer_id: int, name: str, email: str, total_purchases: float, loyalty_points: int): if not isinstance(customer_id, int) or customer_id < 0: raise ValueError(\\"Customer ID must be a positive integer\\") if not isinstance(name, str) or not name.strip(): raise ValueError(\\"Name must be a non-empty string\\") if not self._is_valid_email(email): raise ValueError(\\"Invalid email address\\") if not isinstance(total_purchases, (int, float)) or total_purchases < 0: raise ValueError(\\"Total purchases must be a non-negative number\\") if not isinstance(loyalty_points, int) or loyalty_points < 0: raise ValueError(\\"Loyalty points must be a non-negative integer\\") self.customer_id = customer_id self.name = name self.email = email self.total_purchases = total_purchases self.loyalty_points = loyalty_points def update_purchases(self, purchase_amount: float): if not isinstance(purchase_amount, (int, float)) or purchase_amount < 0: raise ValueError(\\"Purchase amount must be a non-negative number\\") self.total_purchases += purchase_amount self.loyalty_points += int(purchase_amount // 10) def update_email(self, new_email: str): if not self._is_valid_email(new_email): raise ValueError(\\"Invalid email address\\") self.email = new_email def get_customer_info(self) -> dict: return { \'Customer ID\': self.customer_id, \'Customer Name\': self.name, \'Email\': self.email, \'Total Purchases\': self.total_purchases, \'Loyalty Points\': self.loyalty_points } def _is_valid_email(self, email: str) -> bool: email_regex = r\'^b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,}b\' return re.match(email_regex, email) is not None"},{"question":"Write a function named `calculate_average_temperature` that processes a list of recorded daily temperatures for multiple cities and outputs the average temperature for each city. The input will be a dictionary where keys are city names and values are lists of temperatures recorded for that city. Your function is expected to handle varying numbers of recordings for each city. Here\'s the signature of the function you need to complete: ```python def calculate_average_temperature(data): # Your implementation here ``` **Function Requirements:** - The function `calculate_average_temperature` should take a single argument `data`, which is a dictionary. - Each key in the dictionary is a city name (a string). - Each value in the dictionary is a list of temperatures (floating-point numbers) recorded for that city. - Calculate the average temperature for each city. - Print each city name followed by its average temperature rounded to 2 decimal places. **Constraints:** - You can assume that the input dictionary `data` will always have at least one city with at least one temperature recording. - Handle possible exceptions that might occur during computation (such as division by zero). **Example:** If the input `data` is: ```python { \\"New York\\": [72.5, 75.0, 80.0, 79.5], \\"Los Angeles\\": [85.0, 90.5, 88.0], \\"Chicago\\": [60.0, 65.5, 70.0, 68.5, 66.0] } ``` The output should be: ``` New York average temperature is 76.75°F Los Angeles average temperature is 87.83°F Chicago average temperature is 66.00°F ```","solution":"def calculate_average_temperature(data): Given a dictionary where keys are city names and values are lists of temperatures, this function calculates and returns the average temperature for each city. The output dictionary will have city names as keys and their average temperatures (rounded to 2 decimal places) as values. average_temperatures = {} for city, temperatures in data.items(): if len(temperatures) == 0: # Handle the case where there are no temperatures recorded average_temperatures[city] = None else: average_temp = sum(temperatures) / len(temperatures) average_temperatures[city] = round(average_temp, 2) return average_temperatures # Example usage: # data = { # \\"New York\\": [72.5, 75.0, 80.0, 79.5], # \\"Los Angeles\\": [85.0, 90.5, 88.0], # \\"Chicago\\": [60.0, 65.5, 70.0, 68.5, 66.0] # } # print(calculate_average_temperature(data)) # Expected Output: # {\'New York\': 76.75, \'Los Angeles\': 87.83, \'Chicago\': 66.0}"},{"question":"In this problem, you will implement a function called `find_palindromes` that takes a list of strings and returns a list of unique palindromes found within the input list. A palindrome is a string that reads the same forwards and backwards, case-insensitively. The returned list should be sorted in lexicographical order. # Function Signature ```python def find_palindromes(words: list) -> list: :param words: list of strings - the input list of strings to search for palindromes. :return: list of unique palindromes sorted in lexicographical order. ``` # Input - `words` (list): A list of strings where each string is a word to check for being a palindrome. # Output - Returns a list of unique palindromes found in the input list, sorted in lexicographical order. # Example For the given input `[\\"racecar\\", \\"level\\", \\"world\\", \\"radar\\", \\"hello\\", \\"Level\\"]`, the function call `find_palindromes([\\"racecar\\", \\"level\\", \\"world\\", \\"radar\\", \\"hello\\", \\"Level\\"])` should return `[\\"Level\\", \\"level\\", \\"racecar\\", \\"radar\\"]`. # Notes - Palindrome checks should be case-insensitive, but the returned palindromes should be in their original case as provided in the input list. - Ensure that the returned list only contains unique palindromes. - The returned list should be sorted in lexicographical order. # Constraints - Each word in the input list contains only alphabetic characters (both uppercase and lowercase). - The length of each word does not exceed 100 characters. - The input list does not contain more than 10,000 words.","solution":"def find_palindromes(words: list) -> list: Returns a list of unique palindromes found in the input list, sorted in lexicographical order. :param words: list of strings - the input list of strings to search for palindromes. :return: list of unique palindromes sorted in lexicographical order. # Create a set to hold unique palindromes palindromes = set() # Iterate over each word in the list for word in words: # Check if the word is a palindrome (case-insensitive) if word.lower() == word.lower()[::-1]: # Add the word to the set of palindromes palindromes.add(word) # Convert the set to a sorted list and return return sorted(palindromes)"},{"question":"**Context**: You are building a text analysis tool that will summarize the contents of multiple documents. Your tool should scan through each given document and extract the most frequent words, excluding common stopwords. The result should give an overview of the primary topics discussed within each document. **Function to Implement**: `summarize_documents` **Requirements**: 1. Read the content of each document (represented as a string). 2. Tokenize the text into individual words. 3. Exclude common stopwords (you will be provided a list of stopwords). 4. Count the frequency of each remaining word. 5. Return the top N most frequent words for each document. **Parameters**: - `documents` (list of str): A list of documents to be analyzed, where each document is represented as a string. - `stopwords` (list of str): A list of common stopwords to be excluded from the analysis. - `top_n` (int): The number of top frequent words to return for each document. **Returns**: - A list of dictionaries, where each dictionary corresponds to a document and contains: - `document`: The original document string. - `frequent_words`: A list of the top N most frequent words from that document. **Example**: ```python documents = [ \\"The quick brown fox jumped over the lazy dog.\\", \\"AI and machine learning are transforming the technology sector.\\" ] stopwords = [\\"the\\", \\"and\\", \\"are\\", \\"over\\", \\"the\\"] top_n = 3 results = summarize_documents(documents, stopwords, top_n) # Expected output format: # [ # {\'document\': \\"The quick brown fox jumped over the lazy dog.\\", \'frequent_words\': [\'quick\', \'brown\', \'fox\']}, # {\'document\': \\"AI and machine learning are transforming the technology sector.\\", \'frequent_words\': [\'AI\', \'machine\', \'learning\']} # ] ``` Implement `summarize_documents` to fulfill these requirements.","solution":"from collections import Counter import re def summarize_documents(documents, stopwords, top_n): Summarizes the documents by returning the top N most frequent words excluding common stopwords. Parameters: documents (list of str): A list of documents to be analyzed, where each document is represented as a string. stopwords (list of str): A list of common stopwords to be excluded from the analysis. top_n (int): The number of top frequent words to return for each document. Returns: list of dict: A list of dictionaries, where each dictionary corresponds to a document and contains: - `document`: The original document string. - `frequent_words`: A list of the top N most frequent words from that document. def tokenize(text): return re.findall(r\'bw+b\', text.lower()) result = [] for doc in documents: words = tokenize(doc) filtered_words = [word for word in words if word not in stopwords] word_count = Counter(filtered_words) most_common_words = [word for word, count in word_count.most_common(top_n)] result.append({ \'document\': doc, \'frequent_words\': most_common_words }) return result"},{"question":"Create a function that processes a list of strings, counts the total occurrences of each word across all strings, and then visualizes these word frequencies using a horizontal bar chart. The function `word_frequency_visualizer` will accept a list of sentences, compute the frequency of each word (case-insensitive), and plot the results using the `matplotlib` library. Your function should do the following: 1. Tokenize the input strings into words (splitting by whitespace and removing punctuation). 2. Normalize the words to lower case to ensure case insensitivity. 3. Calculate the frequency of each unique word across all input strings. 4. Plot a horizontal bar chart representing word frequencies. 5. The x-axis should be labeled \'Frequency\'. 6. The y-axis should be labeled \'Words\'. 7. Set the title of the plot to \\"Word Frequency Distribution\\". 8. Sort the words in descending order based on their frequencies in the chart. 9. Display the grid lines on the x-axis with an alpha transparency level of 0.5. 10. Use the color `\'#483D8B\'` for the bars. You should write the function `word_frequency_visualizer(sentences)` where `sentences` is a list of strings. Example Given the following input: ```python sentences = [ \\"Hello world! Hello everyone.\\", \\"This is a test. This test is simple.\\", \\"Hello again! Test cases are helpful.\\" ] ``` The function call `word_frequency_visualizer(sentences)` should produce a horizontal bar chart depicting the word frequency distribution as described. Remember to handle all required functionalities and follow the `matplotlib` API usage accordingly.","solution":"import re from collections import Counter import matplotlib.pyplot as plt def word_frequency_visualizer(sentences): This function takes a list of sentences, computes the frequency of each word, and visualizes these frequencies using a horizontal bar chart. # Tokenize the sentences, normalize to lower case, and filter out punctuation words = [] for sentence in sentences: # Using regex to remove punctuation and splitting into words words += re.findall(r\'bw+b\', sentence.lower()) # Calculate word frequencies word_counts = Counter(words) # Sort words based on their frequency in descending order sorted_word_counts = word_counts.most_common() # Separate the words and their counts for plotting words, counts = zip(*sorted_word_counts) # Plotting the horizontal bar chart plt.figure(figsize=(10, 8)) plt.barh(words, counts, color=\'#483D8B\') # Labeling and titling the plot plt.xlabel(\'Frequency\') plt.ylabel(\'Words\') plt.title(\'Word Frequency Distribution\') plt.grid(axis=\'x\', alpha=0.5) # Display the plot plt.show()"},{"question":"You have been hired to develop a function that identifies and counts the number of unique words in a given text string and returns a dictionary where the keys are the unique words, and the values are their respective counts. Your task is to write a function named `count_unique_words` which will: - Accept a string `text` containing the text to be analyzed. - The function should be case insensitive, meaning \'Apple\' and \'apple\' should be considered the same word. - The function should ignore punctuation (e.g., commas, periods, question marks). The function should return a dictionary with unique words (converted to lowercase) as keys and their frequency counts as values. Function signature: ```python def count_unique_words(text: str) -> Dict[str, int]: ``` # Example ```python text = \\"Hello world! Hello!\\" output = count_unique_words(text) # Expected output: # {\'hello\': 2, \'world\': 1} text = \\"Python is great. Isn\'t it? Python is fun.\\" output = count_unique_words(text) # Expected output: # {\'python\': 2, \'is\': 2, \'great\': 1, \'isn\'t\': 1, \'it\': 1, \'fun\': 1} ``` # Constraints - The input text `text` will have a maximum length of 10,000 characters. - You may assume that the input text consists of words separated by spaces and standard punctuation (comma, period, exclamation mark, question mark, apostrophe). You should ensure your function performs efficiently and correctly processes various edge cases, such as different punctuation marks and case sensitivities.","solution":"from typing import Dict import re def count_unique_words(text: str) -> Dict[str, int]: Identifies and counts the number of unique words in the given text string. The function is case insensitive and ignores punctuation. # Remove punctuation and convert text to lowercase cleaned_text = re.sub(r\'[^ws]\', \'\', text).lower() # Split the cleaned text into words words = cleaned_text.split() # Create a dictionary to count unique words word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"# Word Frequency Counter In this task, you will implement a function to calculate the frequency of each unique word in a given text document. The function should return a dictionary where the keys are the words and the values are the frequencies of those words. # Function Signature ```python def word_frequency_counter(text): Calculate the frequency of each unique word in the given text. Args: text (str): A string containing the input document. Returns: dict: A dictionary where the keys are unique words and values are their frequencies. ``` # Requirements 1. The function should count words in a case-insensitive manner (e.g., \\"The\\" and \\"the\\" should be counted as the same word). 2. The function should ignore punctuation. 3. The function should use a dictionary to store the word frequencies. 4. The function should split the text by whitespace to identify individual words. # Example Usage Suppose we have the following text document: ```python text = \\"Hello, world! Hello programming world.\\" word_frequencies = word_frequency_counter(text) print(word_frequencies) ``` The output should be: ```python { \\"hello\\": 2, \\"world\\": 2, \\"programming\\": 1 } ``` # Hints - You may find the `str.lower()` method useful for converting text to lowercase. - The `str.translate()` method can be used to remove punctuation from the text. - Splitting the text into words can be achieved using the `str.split()` method.","solution":"import string def word_frequency_counter(text): Calculate the frequency of each unique word in the given text. Args: text (str): A string containing the input document. Returns: dict: A dictionary where the keys are unique words and values are their frequencies. # Convert text to lower case text = text.lower() # Remove punctuation text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split text into words words = text.split() # Create a dictionary to store word frequencies word_freq = {} for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 return word_freq"},{"question":"# Matrix Diagonal Sum Calculator You are to implement a function `calculate_diagonal_sum` that calculates the sum of the elements on both diagonals (primary and secondary) of a square matrix (2D list). The function should take into account that the central element in a matrix with odd dimensions is shared by both diagonals and should be added only once. # Function Signature ```python def calculate_diagonal_sum(matrix: list[list[int]]) -> int: ``` # Parameters: - `matrix` (List[List[int]]): A 2D list of integers representing the square matrix. # Function Requirements: 1. Calculate the sum of the primary diagonal (top-left to bottom-right). 2. Calculate the sum of the secondary diagonal (top-right to bottom-left). 3. If the matrix has an odd dimension, ensure the middle element is only counted once in the total sum. # Example: ```python matrix1 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] matrix2 = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] ``` Example function calls and expected results: ```python print(calculate_diagonal_sum(matrix1)) # Output should be 25 print(calculate_diagonal_sum(matrix2)) # Output should be 68 ``` # Important: - The input matrix will be a non-empty square matrix (i.e., it will have the same number of rows and columns). - You may assume that all elements in the matrix are integers.","solution":"def calculate_diagonal_sum(matrix): Calculate the sum of the elements on both diagonals (primary and secondary) of a square matrix. If the matrix has an odd dimension, the central element is included only once in the total sum. Args: matrix (list[list[int]]): A 2D list of integers representing the square matrix. Returns: int: Sum of elements on both diagonals. n = len(matrix) primary_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(n): primary_diagonal_sum += matrix[i][i] secondary_diagonal_sum += matrix[i][n - 1 - i] total_sum = primary_diagonal_sum + secondary_diagonal_sum # If the dimension is odd, subtract the middle element which was added twice if n % 2 == 1: middle_index = n // 2 total_sum -= matrix[middle_index][middle_index] return total_sum"},{"question":"Create a function `generate_pyramid(base_width)` that generates a pyramid pattern using the `*` character, where `base_width` is the number of `*` characters at the base of the pyramid. - The function should print multiple lines, each forming one level of the pyramid. - The pyramid will be centered such that all rows are symmetrical. - The base width will always be an odd number, ensuring a center line character. # Requirements - The function should have the following signature: `def generate_pyramid(base_width: int):`. - You must utilize loops to construct the pyramid. - Handle only odd numbers for `base_width`. # Example Input/Output Example 1: ```python generate_pyramid(5) ``` Output: ``` * *** ***** ``` Example 2: ```python generate_pyramid(7) ``` Output: ``` * *** ***** ******* ```","solution":"def generate_pyramid(base_width: int): Generates a pyramid pattern using \'*\' character with the specified base width. The base width will always be an odd number, ensuring a center line character. if base_width % 2 == 0: raise ValueError(\\"Base width must be an odd number.\\") height = (base_width // 2) + 1 for i in range(1, base_width + 1, 2): spaces = (base_width - i) // 2 print(\' \' * spaces + \'*\' * i) # Example generate_pyramid(5)"},{"question":"You are required to develop a function that analyzes a large dataset of sales transactions to identify and extract key metrics, including total sales, average sales per transaction, and the highest and lowest sales amounts. The dataset will be provided as a CSV file, and the function should output these metrics in a neatly formatted string. The function should be named `analyze_sales_data` and must take the following parameter: - `file_path`: The path to the CSV file containing the sales data. The CSV file has a column header with at least one column named `\\"Sales\\"` representing the sales amount. The function should calculate the following metrics: - `total_sales`: The sum of all sales amounts in the dataset. - `average_sales`: The average sales amount per transaction. - `max_sales`: The highest sales amount in the dataset. - `min_sales`: The lowest sales amount in the dataset. The output should be a string that includes these metrics formatted as follows: ``` Total Sales: X Average Sales: X Highest Sale: X Lowest Sale: X ``` Ensure your function handles potential errors, such as missing or malformed data, appropriately by raising informative exceptions.","solution":"import pandas as pd def analyze_sales_data(file_path): Analyzes sales data from a CSV file to extract key metrics. Parameters: - file_path: str, the path to the CSV file containing the sales data with a column named \\"Sales\\" Returns: - str: A formatted string containing total sales, average sales, highest sale, and lowest sale. Raises: - ValueError: If the sales column is missing or contains invalid data try: # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # Check if the \\"Sales\\" column is present if \\"Sales\\" not in df.columns: raise ValueError(\'CSV file must contain a \\"Sales\\" column\') # Convert the \\"Sales\\" column to a numeric type (handles possible errors) df[\'Sales\'] = pd.to_numeric(df[\'Sales\'], errors=\'coerce\') # Drop rows with NaN values in the \\"Sales\\" column df = df.dropna(subset=[\'Sales\']) # Calculate the required metrics total_sales = df[\'Sales\'].sum() average_sales = df[\'Sales\'].mean() max_sales = df[\'Sales\'].max() min_sales = df[\'Sales\'].min() # Format the output string result = ( f\\"Total Sales: {total_sales:.2f}n\\" f\\"Average Sales: {average_sales:.2f}n\\" f\\"Highest Sale: {max_sales:.2f}n\\" f\\"Lowest Sale: {min_sales:.2f}\\" ) return result except pd.errors.EmptyDataError: raise ValueError(\'CSV file is empty or does not contain valid data\') except FileNotFoundError: raise ValueError(\'The file at the specified path was not found\')"},{"question":"You are required to write a function named `random_forest_regression_with_evaluation()`. This function will perform several tasks to train and evaluate a Random Forest Regressor model using a given dataset. You should use the `train_test_split` function from the `sklearn.model_selection` module to split the data into a training set and a testing set. Here are the detailed steps your function should perform: 1. **Load the dataset** from a CSV file named `\\"house_prices.csv\\"`. This file contains features related to housing prices. 2. **Split the dataset** into a training set and a testing set. Use the `train_test_split` function from `sklearn.model_selection` to perform the split. Specify `test_size=0.30` to allocate 30% of the data for testing and set `random_state=42` to ensure reproducibility. 3. **Train the Random Forest Regressor model**: Use the `RandomForestRegressor` class from `sklearn.ensemble` to train the model on the training data. 4. **Make predictions** on the test set using the trained model. 5. **Evaluate the model**: Use the `mean_squared_error` and `r2_score` functions from `sklearn.metrics` to evaluate the model’s performance on the test set. Print the results of these evaluations. Details of the dataset: - The dataset is assumed to have a column `\'Price\'` that represents the target variable. - All other columns are feature variables. Your function should not return any value since the evaluation metrics need to be printed directly. Use the below code template as a guide: ```python def random_forest_regression_with_evaluation(): # Load necessary libraries import pandas as pd from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestRegressor from sklearn.metrics import mean_squared_error, r2_score # Load data data = pd.read_csv(\\"house_prices.csv\\") # Data processing X = data.drop(\'Price\', axis=1) y = data[\'Price\'] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42) # Train the Random Forest Regressor model rf_regressor = RandomForestRegressor() rf_regressor.fit(X_train, y_train) # Make predictions on the testing set y_pred = rf_regressor.predict(X_test) # Print evaluation metrics print(\\"Mean Squared Error:\\", mean_squared_error(y_test, y_pred)) print(\\"R2 Score:\\", r2_score(y_test, y_pred)) # Ensure to download and place the \'house_prices.csv\' file in the same directory as your script. You can use a dataset from: # https://drive.google.com/file/d/1sepBLl-oVWvQAxHebX8qPdxZK3PVoPMG/view ``` Ensure that you understand the usage of each function and library mentioned in this problem. Implement the above function in a Python script and test it with the provided dataset.","solution":"def random_forest_regression_with_evaluation(): # Load necessary libraries import pandas as pd from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestRegressor from sklearn.metrics import mean_squared_error, r2_score # Load data data = pd.read_csv(\\"house_prices.csv\\") # Data processing X = data.drop(\'Price\', axis=1) y = data[\'Price\'] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42) # Train the Random Forest Regressor model rf_regressor = RandomForestRegressor(random_state=42) rf_regressor.fit(X_train, y_train) # Make predictions on the testing set y_pred = rf_regressor.predict(X_test) # Print evaluation metrics print(\\"Mean Squared Error:\\", mean_squared_error(y_test, y_pred)) print(\\"R2 Score:\\", r2_score(y_test, y_pred)) # Ensure to download and place the \'house_prices.csv\' file in the same directory as your script. # Example dataset: https://drive.google.com/file/d/1sepBLl-oVWvQAxHebX8qPdxZK3PVoPMG/view"},{"question":"Create a function that takes an encoded URL string and decodes it back into its original form. Ensure the function correctly translates all encoded characters, such as `%20` to spaces. The function should return the decoded URL as a string. The function should output with: ``` str: The decoded URL string. ``` You should write self-contained code starting with: ``` from urllib.parse import unquote def decode_url(url_encoded): ```","solution":"from urllib.parse import unquote def decode_url(url_encoded): Decodes an encoded URL string back into its original form. Args: url_encoded (str): The encoded URL string. Returns: str: The decoded URL string. return unquote(url_encoded)"},{"question":"Load a JSON file using the `json` module, create a dictionary to map each unique element to the frequency of its occurrence in a specified list from the JSON data. The function should return this dictionary. You should write self-contained code starting with: ``` import json def task_func(json_file, list_key): ```","solution":"import json def task_func(json_file, list_key): Loads a JSON file and calculates the frequency of each unique element in the specified list from the JSON data. Args: json_file (str): The path to the JSON file. list_key (str): The key in the JSON data that contains the list. Returns: dict: A dictionary with elements as keys and their frequencies as values. with open(json_file, \'r\') as file: data = json.load(file) list_data = data.get(list_key, []) frequency_dict = {} for item in list_data: if item in frequency_dict: frequency_dict[item] += 1 else: frequency_dict[item] = 1 return frequency_dict"},{"question":"You are tasked with writing a Python function named `calculate_travel_time`. This function will estimate the total travel time for a journey consisting of multiple legs, each with a specified distance and speed. The function should also accommodate rest breaks after a certain amount of travel time, given a fixed rest duration. **Functional Requirements:** 1. **Inputs:** - `legs`: A list of tuples, where each tuple contains two values: `distance` (in kilometers) and `speed` (in km/h) for each leg of the journey. - `rest_interval`: An integer representing the maximum continuous travel time (in hours) before requiring a rest break. - `rest_duration`: An integer representing the duration of each rest break (in minutes). 2. **Outputs:** - Returns the total estimated travel time for the journey in hours (considering both travel and rest times). 3. **Details:** - Calculate the travel time for each leg of the journey by dividing the distance by the speed. - Accumulate travel time and add rest breaks whenever the accumulated travel time exceeds the `rest_interval`. - Convert rest breaks from minutes to hours when adding to the total travel time. **Example usage:** ```python # Sample legs of the journey legs = [(200, 100), (300, 120), (150, 100)] # Rest interval and duration rest_interval = 4 # hours rest_duration = 30 # minutes # Function call total_time = calculate_travel_time(legs, rest_interval, rest_duration) print(total_time) ``` **Expected Output:** ```plaintext 5.5 ``` In this example, the total travel time is calculated as follows: - First leg: 200 km at 100 km/h takes 2 hours. - Second leg: 300 km at 120 km/h takes 2.5 hours. - Total so far: 2 + 2.5 = 4.5 hours. - Since the rest interval is 4 hours, a rest break is needed after 4 hours (adding 0.5 hours for rest). - Continue with the remaining 0.5 hours of the second leg and third leg: 150 km at 100 km/h takes 1.5 hours. - Final total: 4.5 hours (initial travel) + 0.5 hours (rest) + 1.5 hours (remaining travel) = 6.5 hours.","solution":"def calculate_travel_time(legs, rest_interval, rest_duration): Calculate the total travel time for a journey including rest breaks. Parameters: legs (list of tuples): Each tuple contains (distance in km, speed in km/h). rest_interval (int): Time interval in hours before needing a rest break. rest_duration (int): Duration of each rest break in minutes. Returns: float: Total travel time in hours. total_time = 0.0 # Total travel time in hours accumulated_time = 0.0 # Time since the last rest break in hours rest_duration_hours = rest_duration / 60.0 # Convert rest duration to hours for distance, speed in legs: travel_time = distance / speed while travel_time > 0: if accumulated_time + travel_time <= rest_interval: # If the current leg can be completed without a rest accumulated_time += travel_time total_time += travel_time travel_time = 0 else: # Calculate time remaining before the next rest is needed remaining_time_before_rest = rest_interval - accumulated_time total_time += remaining_time_before_rest + rest_duration_hours travel_time -= remaining_time_before_rest accumulated_time = 0 return total_time"},{"question":"You need to implement a function to simulate a simple 2D point and line intersection checker using vector mathematics. This function helps in computational geometry tasks, such as graphics rendering or collision detection. Implement a function named `point_line_intersection(px, py, x1, y1, x2, y2)` that performs the following steps: 1. Initializes the coordinates of a point `(px, py)` and a line defined by two points `(x1, y1)` and `(x2, y2)`. 2. Calculates the vector components of the line segment (`dx` and `dy`) from `(x1, y1)` to `(x2, y2)`. 3. Calculates the vector components from `(x1, y1)` to `(px, py)`. 4. Uses the cross product to determine if the point lies on the line. 5. Normalizes the cross product result to account for floating-point precision issues. 6. Returns a boolean indicating whether the point lies on the line segment. The function should also check if the point lies within the bounds of the line segment. **Function Signature:** ```python def point_line_intersection(px, py, x1, y1, x2, y2): # Your code here pass ``` **Example:** ```python px, py = 2, 2 x1, y1 = 0, 0 x2, y2 = 4, 4 intersection = point_line_intersection(px, py, x1, y1, x2, y2) print(intersection) ``` Expected Output: ```plaintext True ``` **Explanation:** - The point `(2, 2)` lies on the line segment from `(0, 0)` to `(4, 4)`, so the function returns `True`. **Additional Example:** ```python px, py = 2, 3 x1, y1 = 0, 0 x2, y2 = 4, 4 intersection = point_line_intersection(px, py, x1, y1, x2, y2) print(intersection) ``` Expected Output: ```plaintext False ``` **Explanation:** - The point `(2, 3)` does not lie on the line segment from `(0, 0)` to `(4, 4)`, so the function returns `False`.","solution":"def point_line_intersection(px, py, x1, y1, x2, y2): Determine if a point (px, py) lies on the line segment from (x1, y1) to (x2, y2) using vector mathematics. # Compute the difference vector components of the line segment dx = x2 - x1 dy = y2 - y1 # Compute the difference vector components from (x1, y1) to the point (px, py) dx_p = px - x1 dy_p = py - y1 # Compute the cross product of the two vectors cross_product = dx * dy_p - dy * dx_p # Using a tolerance to account for floating-point precision issues tolerance = 1e-10 if abs(cross_product) > tolerance: return False # Ensure that the point (px, py) lies within the bounds of the line segment if min(x1, x2) <= px <= max(x1, x2) and min(y1, y2) <= py <= max(y1, y2): return True return False"},{"question":"Write a function that simulates a hypothetical file system where you can create files and directories, read files, and list the contents of directories. The function should handle inputs that simulate user commands and respond accordingly. Here are the commands you need to support: - `mkdir <dir_name>`: Create a new directory with the given name. - `touch <file_name>`: Create a new file with the given name. - `write <file_name> <content>`: Write the given content to the file. - `read <file_name>`: Return the content of the file. - `ls <dir_name>`: List the contents of the directory (both files and subdirectories). - `rm <file_name>`: Delete the specified file. Ensure proper handling of the following edge cases: - Attempting to read from or write to a non-existent file. - Creating a directory or file that already exists. - Deleting a non-existent file. - Listing the contents of a non-existent directory. Your function will take a list of commands and should return a list of outputs corresponding to each `read` and `ls` command in the input. For commands that do not produce output (`mkdir`, `touch`, `write`, `rm`), the output should be `None`. You should write self-contained code starting with: ```python class FileSystem: def __init__(self): self.fs = {} def mkdir(self, dir_name): if dir_name in self.fs: return f\\"Directory {dir_name} already exists.\\" self.fs[dir_name] = {} def touch(self, file_name): if file_name in self.fs: return f\\"File {file_name} already exists.\\" self.fs[file_name] = \\"\\" def write(self, file_name, content): if file_name not in self.fs: return f\\"File {file_name} does not exist.\\" if isinstance(self.fs[file_name], dict): return f\\"{file_name} is a directory.\\" self.fs[file_name] = content def read(self, file_name): if file_name not in self.fs: return f\\"File {file_name} does not exist.\\" if isinstance(self.fs[file_name], dict): return f\\"{file_name} is a directory.\\" return self.fs[file_name] def ls(self, dir_name): if dir_name not in self.fs: return f\\"Directory {dir_name} does not exist.\\" if not isinstance(self.fs[dir_name], dict): return f\\"{dir_name} is a file.\\" return list(self.fs[dir_name].keys()) def rm(self, file_name): if file_name not in self.fs: return f\\"File {file_name} does not exist.\\" if isinstance(self.fs[file_name], dict): return f\\"{file_name} is a directory, use a different command to delete directories.\\" del self.fs[file_name] def task_func(commands): fs = FileSystem() results = [] for command in commands: parts = command.split() cmd = parts[0] if cmd == \\"mkdir\\": result = fs.mkdir(parts[1]) elif cmd == \\"touch\\": result = fs.touch(parts[1]) elif cmd == \\"write\\": result = fs.write(parts[1], \' \'.join(parts[2:])) elif cmd == \\"read\\": result = fs.read(parts[1]) elif cmd == \\"ls\\": result = fs.ls(parts[1]) elif cmd == \\"rm\\": result = fs.rm(parts[1]) else: result = f\\"Unknown command {cmd}\\" if cmd in [\\"read\\", \\"ls\\"]: results.append(result) else: results.append(None) return results ```","solution":"class FileSystem: def __init__(self): self.fs = {} def mkdir(self, dir_name): if dir_name in self.fs: return f\\"Directory {dir_name} already exists.\\" self.fs[dir_name] = {} return None def touch(self, file_name): if file_name in self.fs: return f\\"File {file_name} already exists.\\" self.fs[file_name] = \\"\\" return None def write(self, file_name, content): if file_name not in self.fs: return f\\"File {file_name} does not exist.\\" if isinstance(self.fs[file_name], dict): return f\\"{file_name} is a directory.\\" self.fs[file_name] = content return None def read(self, file_name): if file_name not in self.fs: return f\\"File {file_name} does not exist.\\" if isinstance(self.fs[file_name], dict): return f\\"{file_name} is a directory.\\" return self.fs[file_name] def ls(self, dir_name): if dir_name not in self.fs: return f\\"Directory {dir_name} does not exist.\\" if not isinstance(self.fs[dir_name], dict): return f\\"{dir_name} is a file.\\" return list(self.fs[dir_name].keys()) def rm(self, file_name): if file_name not in self.fs: return f\\"File {file_name} does not exist.\\" if isinstance(self.fs[file_name], dict): return f\\"{file_name} is a directory, use a different command to delete directories.\\" del self.fs[file_name] return None def task_func(commands): fs = FileSystem() results = [] for command in commands: parts = command.split() cmd = parts[0] if cmd == \\"mkdir\\": result = fs.mkdir(parts[1]) elif cmd == \\"touch\\": result = fs.touch(parts[1]) elif cmd == \\"write\\": result = fs.write(parts[1], \' \'.join(parts[2:])) elif cmd == \\"read\\": result = fs.read(parts[1]) elif cmd == \\"ls\\": result = fs.ls(parts[1]) elif cmd == \\"rm\\": result = fs.rm(parts[1]) else: result = f\\"Unknown command {cmd}\\" if cmd in [\\"read\\", \\"ls\\"]: results.append(result) else: results.append(result) return results"},{"question":"# Context: You have been hired to develop a module that validates and evaluates mathematical expressions provided as strings. The expressions may contain addition, subtraction, multiplication, division, and parentheses. The goal is to parse these expressions correctly and compute their results. # Task: Write a function named `evaluate_expression` that performs the following operations: 1. **Parse the input string expression** to handle spaces appropriately and ensure valid characters. 2. **Evaluate the mathematical expression** considering the standard operator precedence (PEMDAS - Parentheses, Exponents, Multiplication and Division, Addition and Subtraction). 3. **Handle invalid expressions** by raising appropriate exceptions when invalid characters or mismatched parentheses are detected. # Function Signature: ```python def evaluate_expression(expression: str) -> float: Evaluate a mathematical expression provided as a string. Parameters: - expression: str - A string representing the mathematical expression. Returns: - float - The computed result of the expression. Raises: - ValueError - If the expression contains invalid characters or mismatched parentheses. ``` # Requirements: 1. Ensure that the function handles and removes any extraneous spaces. 2. Implement parsing to validate that the expression only includes digits, parentheses, and the operators `+`, `-`, `*`, `/`. 3. Ensure that parentheses are balanced and correctly nested. 4. Evaluate the expression using appropriate precedence rules. 5. Raise a `ValueError` with an informative message if the expression is invalid. # Example: Given the following expressions: ```python print(evaluate_expression(\\"3 + 5 * 2\\")) # Output: 13 print(evaluate_expression(\\"(3 + 5) * 2\\")) # Output: 16 print(evaluate_expression(\\"10 / 2 - 3\\")) # Output: 2.0 print(evaluate_expression(\\"20 + (6 / 2) - 8\\")) # Output: 15.0 ``` Your function should accurately compute the results and handle any invalid inputs robustly.","solution":"def evaluate_expression(expression: str) -> float: Evaluate a mathematical expression provided as a string. Parameters: - expression: str - A string representing the mathematical expression. Returns: - float - The computed result of the expression. Raises: - ValueError - If the expression contains invalid characters or mismatched parentheses. import re # Function to evaluate the expression using Python\'s eval safely within a controlled environment def evaluate(parsed_expression): try: return eval(parsed_expression) except ZeroDivisionError: raise ValueError(\\"Division by zero is not allowed.\\") # Removing any extraneous spaces from the expression expression = expression.replace(\\" \\", \\"\\") # Validating the expression contains only digits, parentheses, and operators (+, -, *, /) if not re.match(r\'^[0-9+-*/().]*\', expression): raise ValueError(\\"The expression contains invalid characters.\\") # Ensuring parentheses are balanced def are_parentheses_balanced(expression): stack = [] for char in expression: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack if not are_parentheses_balanced(expression): raise ValueError(\\"The expression contains mismatched parentheses.\\") # Evaluate the expression using Python\'s eval in a controlled manner return evaluate(expression)"},{"question":"Implement a function that takes a dataset and performs Principal Component Analysis (PCA). Your task is to reduce the dataset to a specified number of components. Then, create a scatter plot of the transformed data using the first two principal components, coloring each point according to the provided labels. Add a title \\"PCA Result\\" to the plot, with x-label \\"Principal Component 1\\" and y-label \\"Principal Component 2\\". Return the PCA model and the plot object. Note that: The function should handle cases where the dataset has fewer features than the number of components specified. Use n_components to specify the number of principal components to retain. The function should output with: sklearn.decomposition.PCA: The fitted PCA model. matplotlib.figure.Figure: The figure object of the plot. matplotlib.axes.Axes: The axes object of the plot. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from sklearn.decomposition import PCA def task_func(data, labels, n_components): ```","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.decomposition import PCA def task_func(data, labels, n_components): Perform PCA on the dataset and reduce it to the specified number of components. Additionally, create a scatter plot of the first two principal components. Parameters: data (np.ndarray): The input data to be transformed, shape (n_samples, n_features). labels (np.ndarray): The labels for each sample, used for coloring the scatter plot. n_components (int): The number of principal components to retain. Returns: pca (sklearn.decomposition.PCA): The fitted PCA model. fig (matplotlib.figure.Figure): The figure object of the plot. ax (matplotlib.axes.Axes): The axes object of the plot. # Handle cases where the number of features is less than the number of components n_components = min(n_components, data.shape[1]) # Perform PCA pca = PCA(n_components=n_components) transformed_data = pca.fit_transform(data) # Create scatter plot using first two principal components fig, ax = plt.subplots() scatter = ax.scatter(transformed_data[:, 0], transformed_data[:, 1], c=labels) ax.set_title(\\"PCA Result\\") ax.set_xlabel(\\"Principal Component 1\\") ax.set_ylabel(\\"Principal Component 2\\") return pca, fig, ax"},{"question":"You are tasked with writing a function to generate all possible permutations of a given string. A permutation, also called an \\"anagram\\" or \\"derangement\\", is a rearrangement of the characters in the string such that every possible order is represented. Write a Python function named `string_permutations` that takes a single parameter: 1. `s` - a string for which you need to generate all the permutations. The function should follow these steps: 1. Use a helper function to recursively generate the permutations. 2. Place the current character in each possible position in the permutations of the remaining characters. 3. Use a set to avoid duplicate permutations if the input string contains repeating characters. 4. Return the sorted list of unique permutations. **Function Definition:** ```python def string_permutations(s): pass ``` **Example:** ```python >>> string_permutations(\\"abc\\") [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] >>> string_permutations(\\"aab\\") [\'aab\', \'aba\', \'baa\'] ``` **Note:** Be sure to account for the possibility of duplicate characters in the input string and ensure the result is lexicographically ordered.","solution":"def string_permutations(s): def permute(prefix, remaining, results): if len(remaining) == 0: results.add(prefix) else: for i in range(len(remaining)): new_prefix = prefix + remaining[i] new_remaining = remaining[:i] + remaining[i+1:] permute(new_prefix, new_remaining, results) results = set() permute(\\"\\", s, results) return sorted(results)"},{"question":"Your task is to write a Python function named `find_common_elements` that takes two lists of integers and returns a new list that contains only the elements that are present in both input lists (i.e., the intersection of both lists). The resulting list should be sorted in ascending order, contain no duplicates, and preserve the uniqueness of elements. Function Signature ```python def find_common_elements(list1: List[int], list2: List[int]) -> List[int]: ``` Constraints - The input lists, `list1` and `list2`, can vary in length and contain any integers (positive, negative, or zero). Example Input: ```python list1 = [1, 2, 2, 3, 4] list2 = [3, 4, 4, 5, 6] ``` Output: ```python [3, 4] ``` Input: ```python list1 = [10, 20, 30, 40, 50] list2 = [15, 30, 45, 60] ``` Output: ```python [30] ``` Steps 1. Convert both lists to sets to remove duplicates. 2. Find the intersection of both sets. 3. Convert the resulting set back to a list. 4. Sort the list in ascending order. 5. Return the sorted list.","solution":"def find_common_elements(list1, list2): Returns a list of elements that are present in both input lists, without duplicates and sorted in ascending order. # Convert both lists to sets to remove duplicates and find intersection common_elements = set(list1) & set(list2) # Convert the set back to a list and sort it result = sorted(list(common_elements)) return result"},{"question":"You are helping a local library to develop a system for categorizing and organizing books. The library uses a system of unique alphanumeric codes to identify each book. Each code consists of a prefix, which is a sequence of uppercase letters, followed by a suffix, which is a sequence of digits. For example, \\"AB123\\", \\"CDA2567\\", \\"XYZ89\\". You need to write a function named `categorize_books` that accepts a list of book codes and returns a dictionary. This dictionary will group books by their prefix. The keys in the dictionary will be the unique prefixes, and the values will be lists of corresponding book codes. Your task is to implement this function. The function should take the following parameter: - `book_codes`: A list of strings representing the book codes. The function should: 1. Create a dictionary where the keys are the prefixes and the values are lists of book codes with those prefixes. 2. Loop through each book code to determine its prefix and suffix. 3. Append each book code to the correct list in the dictionary based on its prefix. # Requirements: - Define a helper function to extract the prefix from a book code. A prefix consists of consecutive uppercase letters from the beginning of the string. - Assume that book codes are correctly formatted and the input list is non-empty. Here is the function signature you need to implement: ```python def categorize_books(book_codes): # Your code here ``` # Example usage: ```python >>> codes = [\\"AB123\\", \\"CDA2567\\", \\"XYZ89\\", \\"AB234\\", \\"XYZ100\\"] >>> categorize_books(codes) { \'AB\': [\'AB123\', \'AB234\'], \'CDA\': [\'CDA2567\'], \'XYZ\': [\'XYZ89\', \'XYZ100\'] } ``` Ensure that your implementation follows the provided guidelines and correctly categorizes the book codes by their prefix.","solution":"def categorize_books(book_codes): def get_prefix(book_code): Extracts the prefix from a book code prefix = [] for char in book_code: if char.isdigit(): break prefix.append(char) return \'\'.join(prefix) categorized_books = {} for code in book_codes: prefix = get_prefix(code) if prefix in categorized_books: categorized_books[prefix].append(code) else: categorized_books[prefix] = [code] return categorized_books"},{"question":"You are tasked with creating a function that takes a list of integers and returns a new list with duplicate integers removed, while preserving the original order of elements. The goal of this problem is to deepen your understanding of list operations and maintaining element order while filtering out duplicates. Function Signature ```python def remove_duplicates(lst: list) -> list: Returns a list of integers with duplicates removed, preserving the order of their first occurrence. Parameters: lst (list): The list of integers which may contain duplicates. Returns: list: A list of integers with duplicates removed. ``` Requirements - Use basic list operations and structures from the Python standard library to complete the function. - Ensure that the order of first occurrences of the integers is maintained in the resulting list. - The input list `lst` may contain any integers, both positive and negative. - Do not use external libraries or modules—implement the solution with core Python functionalities. Example ```python # Example 1: remove_duplicates([1, 2, 2, 3, 4, 4, 5]) # Output: [1, 2, 3, 4, 5] # Example 2: remove_duplicates([7, 7, 8, 9, 9, 10, 11]) # Output: [7, 8, 9, 10, 11] # Example 3: remove_duplicates([11, 12, 13, 12, 14, 15, 13]) # Output: [11, 12, 13, 14, 15] ```","solution":"def remove_duplicates(lst): Returns a list of integers with duplicates removed, preserving the order of their first occurrence. Parameters: lst (list): The list of integers which may contain duplicates. Returns: list: A list of integers with duplicates removed. seen = set() result = [] for num in lst: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Create a tool that fetches and preprocesses COVID-19 pandemic data from an online API. The tool should be able to retrieve data for specified countries over a range of dates. The final result should be a DataFrame containing the columns \'Country\', \'Date\', \'Confirmed\', \'Deaths\', and \'Recovered\'. You will use the `requests` library to fetch the JSON data from the API and `pandas` to store and manipulate the data. Implement the following function: ```python def fetch_covid_data(countries: list, start_date: str, end_date: str) -> pd.DataFrame: Fetch COVID-19 data for specified countries over a given date range and return it as a pandas DataFrame. Parameters: countries (list): A list of country names to fetch data for. start_date (str): The start date in the format \'YYYY-MM-DD\'. end_date (str): The end date in the format \'YYYY-MM-DD\'. Returns: pd.DataFrame: A DataFrame containing the pandemic data with columns \'Country\', \'Date\', \'Confirmed\', \'Deaths\', \'Recovered\'. ``` **Requirements:** 1. Use the `requests` library to fetch JSON data from the API endpoint `https://covid19-api.org/api/timeline/{country}` where `{country}` is replaced with the appropriate country code. 2. Iterate through the list of countries and query data for each. 3. Filter and clean the retrieved data to match the specified date range. 4. Use `pandas` to create a DataFrame and store the extracted data. # Example Usage: ```python countries = [\'USA\', \'GBR\'] start_date = \'2020-03-01\' end_date = \'2020-03-10\' df = fetch_covid_data(countries, start_date, end_date) print(df) ``` # Expected Output: For the provided countries (USA, GBR) and the date range (2020-03-01 to 2020-03-10), the output should look similar to: ``` Country Date Confirmed Deaths Recovered 0 USA 2020-03-01 100 5 6 1 USA 2020-03-02 120 7 10 ... 10 GBR 2020-03-01 50 1 2 11 GBR 2020-03-02 70 1 3 ... ``` In this example, the DataFrame should include all specified countries for each date within the provided range.","solution":"import requests import pandas as pd from pandas.tseries.offsets import CustomBusinessDay import numpy as np def fetch_covid_data(countries: list, start_date: str, end_date: str) -> pd.DataFrame: urls = [f\'https://covid19-api.org/api/timeline/{country}\' for country in countries] all_data = [] for url, country in zip(urls, countries): response = requests.get(url) if response.status_code == 200: data = response.json() for entry in data: entry_date = entry[\'date\'] if start_date <= entry_date <= end_date: all_data.append({ \'Country\': country, \'Date\': entry_date, \'Confirmed\': entry.get(\'cases\', np.nan), \'Deaths\': entry.get(\'deaths\', np.nan), \'Recovered\': entry.get(\'recovered\', np.nan) }) df = pd.DataFrame(all_data) return df"},{"question":"Develop a function that implements the Merge Sort algorithm to sort a given list of integers. This function should follow the divide-and-conquer approach, where the problem is broken down into smaller sub-problems until a base case is reached, and then the solutions to the sub-problems are combined to solve the original problem. The function, `merge_sort`, should be defined as follows: ```python def merge_sort(arr: list) -> list: Sort a list of integers in ascending order using the Merge Sort algorithm. Parameters: arr (list): The list of integers to be sorted. Returns: list: A new list containing the sorted integers. ``` **Input:** - `arr`: A list of integers that needs to be sorted. **Output:** - A new list containing the integers from `arr` in ascending order. **Constraints:** - The function should use the Merge Sort algorithm for sorting. - Ensure that the function handles edge cases, such as an empty list or a list with one element. Implement the function `merge_sort` to sort the provided list using the Merge Sort algorithm.","solution":"def merge_sort(arr: list) -> list: Sort a list of integers in ascending order using the Merge Sort algorithm. Parameters: arr (list): The list of integers to be sorted. Returns: list: A new list containing the sorted integers. if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left: list, right: list) -> list: Merge two sorted lists into a single sorted list. Parameters: left (list): The left sorted list. right (list): The right sorted list. Returns: list: A new merged and sorted list. merged = [] left_index, right_index = 0, 0 while left_index < len(left) and right_index < len(right): if left[left_index] <= right[right_index]: merged.append(left[left_index]) left_index += 1 else: merged.append(right[right_index]) right_index += 1 # Append remaining elements if any lists are not fully traversed merged.extend(left[left_index:]) merged.extend(right[right_index:]) return merged"},{"question":"You are required to develop a function named `generate_fibonacci_chart` in Python. This function generates the first `n` numbers of the Fibonacci sequence and then creates a line chart to visually represent the sequence using the `matplotlib` library. The essential requirements and details are provided below: 1. **Function Name**: `generate_fibonacci_chart` 2. **Parameters**: - `n`: An integer representing the number of Fibonacci numbers to generate. 3. **Output**: This function should generate a line chart that: - Illustrates the Fibonacci sequence up to the `n`-th term. - Utilizes specific `matplotlib` functions to enhance the visualization: - Add a title using `matplotlib.pyplot.title`. - Label the x-axis using `matplotlib.pyplot.xlabel` and the y-axis using `matplotlib.pyplot.ylabel`. - Plot the Fibonacci sequence using `matplotlib.pyplot.plot`. - Display the chart using `matplotlib.pyplot.show`. Follow these steps in your function: 1. Generate the first `n` Fibonacci numbers. 2. Store these numbers in a list. 3. Use `matplotlib` to create a line chart from this list. 4. Add an appropriate title and labels for both x and y axes. 5. Display the line chart. Note: - Ensure a proper Fibonacci sequence generation starting with 0 and 1. - Import the necessary `matplotlib` functions. Here is an example of how the function can be used: ```python generate_fibonacci_chart(20) ```","solution":"import matplotlib.pyplot as plt def generate_fibonacci_chart(n): Generates a line chart for the first n Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: None if n <= 0: raise ValueError(\\"n must be a positive integer\\") # Generate first n Fibonacci numbers fibonacci_sequence = [0, 1] while len(fibonacci_sequence) < n: fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2]) # Trim the list to the required length in case n is 1 fibonacci_sequence = fibonacci_sequence[:n] # Plotting the Fibonacci sequence plt.plot(fibonacci_sequence) plt.title(\'Fibonacci Sequence\') plt.xlabel(\'Index\') plt.ylabel(\'Fibonacci Number\') plt.show()"},{"question":"You are required to write a function to perform a group by operation on a list of dictionaries by a specified key and then compute the sum of values for another specified key within each group. # Function Signature ```python def group_by_and_sum(records, group_by_key, sum_key): pass ``` # Parameters - `records` (list of dict): List of dictionaries where each dictionary contains key-value pairs. - `group_by_key` (str): The key by which to group the dictionaries. - `sum_key` (str): The key whose values need to be summed within each group. # Returns - `result` (dict): A dictionary where keys are the distinct values of `group_by_key` and values are the sum of `sum_key` values for the dictionaries in that group. # Requirements 1. Group the given list of dictionaries by the specified `group_by_key`. 2. For each group, compute the sum of the values corresponding to the `sum_key`. 3. Return the result as a dictionary. # Example Usage ```python records = [ {\'category\': \'A\', \'value\': 10}, {\'category\': \'B\', \'value\': 20}, {\'category\': \'A\', \'value\': 30}, {\'category\': \'B\', \'value\': 10}, {\'category\': \'A\', \'value\': 50} ] result = group_by_and_sum(records, \'category\', \'value\') print(result) # Expected Output: # {\'A\': 90, \'B\': 30} ``` # Criteria for Completion: 1. Implement the `group_by_and_sum` function. 2. Ensure the function works for various input data structures and edge cases. 3. Include test cases with expected output in your solution.","solution":"def group_by_and_sum(records, group_by_key, sum_key): Groups a list of dictionaries by a specified key and sums up the values of another specified key within each group. Parameters: records (list of dict): List of dictionaries where each dictionary contains key-value pairs. group_by_key (str): The key by which to group the dictionaries. sum_key (str): The key whose values need to be summed within each group. Returns: dict: Dictionary where keys are the distinct values of `group_by_key` and values are the sum of `sum_key` values for the dictionaries in that group. result = {} for record in records: group = record[group_by_key] value = record[sum_key] if group in result: result[group] += value else: result[group] = value return result"},{"question":"Write a function named `merge_sorted_lists` that takes two input lists `list1` and `list2`, where each list contains integers sorted in non-decreasing order. Your task is to merge these two lists into a single list that remains sorted in non-decreasing order and return it. The function should not use any built-in sort functions and should operate in linear time, meaning the combined time complexity should not exceed O(n + m), where n and m are the lengths of `list1` and `list2` respectively. Function Signature: ```python def merge_sorted_lists(list1: list[int], list2: list[int]) -> list[int]: # Your code here ``` Constraints: - The integers within each list will range from -10^9 to 10^9. - The lengths of `list1` and `list2` will range from 0 to 10^4. Example: ```python print(merge_sorted_lists([1, 3, 5], [2, 4, 6])) # Output: [1, 2, 3, 4, 5, 6] print(merge_sorted_lists([1, 2, 3], [4, 5, 6])) # Output: [1, 2, 3, 4, 5, 6] print(merge_sorted_lists([1, 4, 5], [2, 3, 6])) # Output: [1, 2, 3, 4, 5, 6] print(merge_sorted_lists([], [1, 2, 3])) # Output: [1, 2, 3] print(merge_sorted_lists([4, 5, 6], [])) # Output: [4, 5, 6] ``` *Note:* Ensure that the function handles edge cases, such as when one or both of the lists are empty, correctly, and merges them appropriately.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list. Args: list1 (list of int): The first sorted list. list2 (list of int): The second sorted list. Returns: list of int: A sorted list that combines the elements of list1 and list2. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append any remaining elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # Append any remaining elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"In this exercise, you\'ll work with the `matplotlib` library to create a bar chart that compares the average monthly temperatures of two cities. The main objective is to understand and use the `matplotlib.pyplot.bar` and `matplotlib.pyplot.show` functions. You are required to write a function called `plot_temperatures` that performs the following tasks: 1. Creates a list of months from January to December. 2. Defines two lists containing the average monthly temperatures for each month for two different cities. 3. Plots the temperatures of both cities on the same bar chart. 4. Displays the plot. # Function Signature ```python def plot_temperatures(): pass ``` # Requirements - The function should not take any parameters. - Make sure to import any necessary libraries within the function. - Use the `matplotlib.pyplot.bar` and `matplotlib.pyplot.show` functions to create and display the plot. - Ensure the plot is correctly displayed with appropriate labels, title, and legend for clarity. # Example After calling `plot_temperatures()`, a window displaying a bar chart should appear, where: - The x-axis represents the months from January to December. - The y-axis represents the average monthly temperatures for each month. - There are two sets of bars, each representing a different city\'s average monthly temperatures. # Additional Details - Ensure that the bars for the two cities are distinct by adding different colors or patterns. - Consider adding grid lines to make the chart more readable. - Add a legend to differentiate between the two cities.","solution":"def plot_temperatures(): import matplotlib.pyplot as plt import numpy as np # List of months from January to December months = [\'January\', \'February\', \'March\', \'April\', \'May\', \'June\', \'July\', \'August\', \'September\', \'October\', \'November\', \'December\'] # Average monthly temperatures for City 1 & City 2 city1_temps = [0, 1, 5, 9, 15, 20, 25, 24, 20, 14, 8, 2] city2_temps = [10, 12, 15, 18, 22, 27, 30, 29, 25, 19, 15, 11] # Bar width width = 0.4 # X-axis positions for each set of bars x = np.arange(len(months)) # Plotting fig, ax = plt.subplots() bars1 = ax.bar(x - width/2, city1_temps, width, label=\'City 1\', color=\'skyblue\') bars2 = ax.bar(x + width/2, city2_temps, width, label=\'City 2\', color=\'lightgreen\') # Adding labels and title ax.set_xlabel(\'Months\') ax.set_ylabel(\'Average Temperature (°C)\') ax.set_title(\'Average Monthly Temperatures for Two Cities\') ax.set_xticks(x) ax.set_xticklabels(months) ax.legend() # Display the plot plt.xticks(rotation=45) plt.grid(axis=\'y\') plt.tight_layout() plt.show()"},{"question":"You are designing a system for a library to manage book lending. The system should keep track of borrowers, the books they have borrowed, and the return dates. You need to write a function `manage_lending(lendings, date)` that reads a list of lending records and processes them to identify overdue books as of a given date. Each lending record contains the borrower\'s name, the book title, and the return date. The lending records are provided in a list of tuples, with each tuple having the structure: ``` (borrower_name, book_title, return_date) ``` The `return_date` is a string in the format \'YYYY-MM-DD\'. Your function should: - Parse the `return_date` and the given `date` using the `datetime` module. - Check if each book is overdue as of the given date. - Return a list of tuples containing the overdue books\' information, where each tuple has the structure: ``` (borrower_name, book_title) ``` **Function Signature:** ```python def manage_lending(lendings: list, date: str) -> list: ``` **Parameters:** - `lendings` (list): A list of tuples representing lending records. - `date` (str): A string representing the current date in \'YYYY-MM-DD\' format. **Returns:** - A list of tuples containing the information of overdue books. # Example ```python lendings = [(\\"Alice\\", \\"The Great Gatsby\\", \\"2023-10-01\\"), (\\"Bob\\", \\"1984\\", \\"2023-09-15\\"), (\\"Charlie\\", \\"The Catcher in the Rye\\", \\"2023-11-20\\")] date = \\"2023-10-10\\" result = manage_lending(lendings, date) # Output: [(\'Bob\', \'1984\')] ```","solution":"from datetime import datetime def manage_lending(lendings, date): Identifies overdue books as of the given date. Parameters: lendings (list): A list of tuples with each tuple in the format (borrower_name, book_title, return_date). date (str): The current date in \'YYYY-MM-DD\' format. Returns: list: A list of tuples containing overdue books\' information in the format (borrower_name, book_title). date_obj = datetime.strptime(date, \\"%Y-%m-%d\\") overdue_books = [] for borrower_name, book_title, return_date in lendings: return_date_obj = datetime.strptime(return_date, \\"%Y-%m-%d\\") if return_date_obj < date_obj: overdue_books.append((borrower_name, book_title)) return overdue_books"},{"question":"You are given a task to optimize a delivery route for a delivery truck. The delivery truck needs to deliver packages to a number of locations within a city, starting from and returning to the depot. The goal is to minimize the total distance traveled. Create a function called `optimize_route`, which takes two inputs: 1. `depot` - a tuple of two integers representing the coordinates of the depot. 2. `locations` - a list of tuples, each containing two integers which represent the coordinates of the delivery locations. The function should return a list of locations (including the depot as the start and end point) representing the optimized delivery route with the shortest possible distance. Use any algorithm of your choice, such as the Nearest Neighbor algorithm, for simplicity. Here’s the required function signature: ```python def optimize_route(depot, locations): Function to compute the optimized delivery route with the minimal total distance. Args: depot (tuple): A tuple of two integers representing the coordinates of the depot. locations (list): A list of tuples, each containing two integers representing the delivery locations. Returns: route (list): A list of tuples representing the optimized delivery route including depot. pass ``` **Example Usage:** ```python # Example data depot = (0, 0) locations = [(2, 3), (5, 1), (3, 6), (7, 2)] optimized_route = optimize_route(depot, locations) print(optimized_route) ``` The `optimize_route` function should compute and return a route that starts at the depot, visits each location exactly once, and returns back to the depot with the shortest total distance. The list should start and end with the depot coordinates, and the intermediate points should be the delivery locations in the optimized order.","solution":"def optimize_route(depot, locations): Function to compute the optimized delivery route with the minimal total distance using the Nearest Neighbor algorithm. Args: depot (tuple): A tuple of two integers representing the coordinates of the depot. locations (list): A list of tuples, each containing two integers representing the delivery locations. Returns: route (list): A list of tuples representing the optimized delivery route including depot. # Helper function to calculate Euclidean distance between two points def distance(point1, point2): return ((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)**0.5 # Initialize the route with the depot route = [depot] current_location = depot remaining_locations = locations[:] while remaining_locations: # Find the nearest neighbor nearest_location = min(remaining_locations, key=lambda loc: distance(current_location, loc)) route.append(nearest_location) current_location = nearest_location remaining_locations.remove(nearest_location) # Return to the depot route.append(depot) return route"},{"question":"You have been given a skeleton of a custom Linked List class in Python. Your task is to implement specific required functionalities to complete this class and manage the linked list operations. Write a class named `CustomLinkedList` that implements a linked list with the following methods: 1. **`__init__(self)`** - Initialize the linked list with a head node set to None. 2. **`append(self, data)`** - Add a new node containing `data` at the end of the list. 3. **`prepend(self, data)`** - Add a new node containing `data` at the beginning of the list. 4. **`delete(self, data)`** - Delete the first node that contains `data`. Raise a ValueError if the data is not found. 5. **`find(self, data)`** - Return the node containing `data`, or None if not found. 6. **`display(self)`** - Display the linked list in a user-friendly string format. The methods `append`, `prepend`, `delete`, and `find` should operate with a time complexity optimized for the given operations, considering the nature of linked lists. The display method should provide a clear visual representation of the linked list to assist in debugging. Your `Node` class should at least contain the data and pointer to the next node. You may implement any additional functionality within the `Node` class to support the `CustomLinkedList` methods as needed. The function signature for the `CustomLinkedList` and its methods are: ```python class Node: def __init__(self, data): self.data = data self.next = None class CustomLinkedList: def __init__(self): self.head = None def append(self, data): pass def prepend(self, data): pass def delete(self, data): pass def find(self, data): pass def display(self): pass ``` Ensure your solution adheres to Pythonic conventions, and all operations are efficient in terms of time and space complexity.","solution":"class Node: def __init__(self, data): self.data = data self.next = None class CustomLinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if not self.head: self.head = new_node return last_node = self.head while last_node.next: last_node = last_node.next last_node.next = new_node def prepend(self, data): new_node = Node(data) new_node.next = self.head self.head = new_node def delete(self, data): current = self.head if current and current.data == data: self.head = current.next current = None return prev = None while current and current.data != data: prev = current current = current.next if current is None: raise ValueError(f\\"Data {data} not found in the list.\\") prev.next = current.next current = None def find(self, data): current = self.head while current: if current.data == data: return current current = current.next return None def display(self): elements = [] current = self.head while current: elements.append(current.data) current = current.next return \\" -> \\".join(map(str, elements))"},{"question":"You are asked to write a function `find_top_k_frequent_words` that takes a list of strings `words` and an integer `k` as its arguments. The function should return a list of the `k` most frequent words in the `words` list, sorted by their frequency in descending order. In case of a tie, sort the words with the same frequency in alphabetical order. # Function Signature ```python def find_top_k_frequent_words(words: List[str], k: int) -> List[str]: ``` # Instructions 1. Count the frequency of each word in the `words` list. 2. Use a min-heap to keep track of the top `k` most frequent words. 3. Sort the resulting `k` words first by frequency (descending) and then alphabetically (in case of ties). # Example If `words` is: ```python words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\", \\"kiwi\\", \\"banana\\", \\"kiwi\\"] ``` and `k` is `2`, then calling `find_top_k_frequent_words(words, 2)` should return: ```python [\\"apple\\", \\"banana\\"] ``` # Requirements Ensure the function makes use of: 1. A heap data structure to maintain the top `k` words efficiently. 2. Appropriate sorting mechanisms to break ties alphabetically. Your goal is to ensure the correct implementation of both the frequency counting, and the efficient retrieval and sorting of the top `k` frequent words.","solution":"from typing import List from collections import Counter import heapq def find_top_k_frequent_words(words: List[str], k: int) -> List[str]: Returns the top k most frequent words sorted by their frequency in descending order. In case of a tie, sort the words with the same frequency in alphabetical order. # Count frequency of each word word_counts = Counter(words) # Create a max heap with negative counts to sort by frequency and alphabetically heap = [(-freq, word) for word, freq in word_counts.items()] heapq.heapify(heap) # Extract the top k elements from the heap top_k_words = [heapq.heappop(heap)[1] for _ in range(k)] return top_k_words"},{"question":"You are tasked with writing a Python function utilizing the Pandas library to perform data manipulation on a DataFrame. This will help solidify your understanding of data filtering, grouping, and aggregation in Pandas. # Function Specification **Function Name:** `sales_summary` **Parameters:** - `df` (DataFrame): A Pandas DataFrame containing columns \'Region\', \'Product\', \'Sales\', and \'Profit\'. Each row represents a sales record. **Returns:** - A DataFrame containing two columns, \'Region\' and \'Total_Sales\'. Each row in this DataFrame represents the total sales for a specific region. # Requirements 1. Use Pandas for data manipulation. 2. Ensure the returned DataFrame is sorted by \'Total_Sales\' in descending order. 3. The returned DataFrame should have \'Region\' as the index. # Example ```python import pandas as pd def sales_summary(df): region_sales = df.groupby(\'Region\')[\'Sales\'].sum().reset_index() region_sales = region_sales.rename(columns={\'Sales\': \'Total_Sales\'}) region_sales = region_sales.sort_values(by=\'Total_Sales\', ascending=False) region_sales = region_sales.set_index(\'Region\') return region_sales # Example Usage data = { \'Region\': [\'North\', \'South\', \'East\', \'West\', \'North\', \'South\'], \'Product\': [\'A\', \'B\', \'C\', \'D\', \'E\', \'F\'], \'Sales\': [100, 200, 300, 150, 250, 350], \'Profit\': [10, 20, 30, 15, 25, 35] } df = pd.DataFrame(data) result = sales_summary(df) print(result) # Expected output: # Total_Sales # Region # South 550 # North 350 # East 300 # West 150 ``` # Explanation The function `sales_summary` processes sales data to compute total sales for each region. By completing this exercise, you’ll gain practice with: - DataFrame grouping using `groupby`. - Summation and aggregation using `sum`. - DataFrame sorting using `sort_values`. - Indexing and renaming columns. Ensure you test the function with a diverse set of data to verify the correctness.","solution":"import pandas as pd def sales_summary(df): Computes the total sales for each region and returns a DataFrame with regions as the index and their respective total sales. Parameters: - df: DataFrame containing \'Region\', \'Product\', \'Sales\', and \'Profit\' columns. Returns: - DataFrame with \'Region\' as the index and \'Total_Sales\' as the column. region_sales = df.groupby(\'Region\')[\'Sales\'].sum().reset_index() region_sales = region_sales.rename(columns={\'Sales\': \'Total_Sales\'}) region_sales = region_sales.sort_values(by=\'Total_Sales\', ascending=False) region_sales = region_sales.set_index(\'Region\') return region_sales"},{"question":"Write a function to find all prime numbers up to a given integer n. Return a list of these prime numbers. You should implement the Sieve of Eratosthenes algorithm for efficient computation. The function should output: prime_list (List[int]): A list of prime numbers up to the integer n. You should write self-contained code starting with: ``` def task_func(n): ```","solution":"def task_func(n): Returns a list of all prime numbers up to the given integer n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False prime_list = [num for num in range(n + 1) if sieve[num]] return prime_list"},{"question":"# Problem Overview In graph theory, a graph is often represented as an adjacency matrix. An adjacency matrix is a square matrix used to represent a finite graph, where the elements of the matrix indicate whether pairs of vertices are adjacent or not in the graph. One common problem is finding the shortest path between two vertices in an unweighted graph. The shortest path is the path that has the minimum number of edges. # Task Your task is to write a function `shortest_path_length` that calculates the shortest path length between two given vertices in an unweighted graph. The function should implement the Breadth-First Search (BFS) algorithm to determine the shortest path. Function Definition ```python def shortest_path_length(graph, start, end): Function to calculate the shortest path length between two vertices using BFS Args: graph: List[List[int]] representing the adjacency matrix of the graph start: int representing the starting vertex end: int representing the ending vertex Returns: int, representing the length of the shortest path from start to end or -1 if no such path exists. ``` Parameters - `graph`: A 2D list representing the adjacency matrix of the graph, where `graph[i][j]` is 1 if there is an edge between vertices `i` and `j`, and 0 otherwise. - `start`: An integer representing the starting vertex. - `end`: An integer representing the ending vertex. Returns - An integer representing the length of the shortest path from the `start` vertex to the `end` vertex, or `-1` if no such path exists. # Example ```python graph = [ [0, 1, 0, 0, 1], [1, 0, 1, 0, 0], [0, 1, 0, 1, 1], [0, 0, 1, 0, 1], [1, 0, 1, 1, 0] ] print(shortest_path_length(graph, 0, 3)) ``` Expected Output: ``` 2 ``` # Requirements Your implementation should stick to the Breadth-First Search algorithm and should be efficient in both time and space complexities.","solution":"from collections import deque def shortest_path_length(graph, start, end): Function to calculate the shortest path length between two vertices using BFS. Args: graph: List[List[int]] representing the adjacency matrix of the graph start: int representing the starting vertex end: int representing the ending vertex Returns: int, representing the length of the shortest path from start to end or -1 if no such path exists. if start == end: return 0 n = len(graph) visited = [False] * n queue = deque([(start, 0)]) # (current_node, current_distance) visited[start] = True while queue: current, distance = queue.popleft() for neighbor in range(n): if graph[current][neighbor] == 1 and not visited[neighbor]: if neighbor == end: return distance + 1 queue.append((neighbor, distance + 1)) visited[neighbor] = True return -1"},{"question":"--- You are asked to implement a function that analyzes and processes data related to books and their authors from a bookstore database. Your function should be named `process_book_data`. Given two CSV files: 1. `books.csv` containing book details with the following columns: - `book_id`: A unique identifier for each book. - `title`: The title of the book. - `author_id`: An identifier linking to the author\'s details. - `genre`: The genre of the book. - `price`: The price of the book. 2. `authors.csv` containing author details with the following columns: - `author_id`: A unique identifier for each author. - `name`: The name of the author. - `birthdate`: The birthdate of the author in \'YYYY-MM-DD\' format. Your function should perform the following steps: 1. Load both CSV files into pandas DataFrames. 2. Merge the DataFrames on the `author_id` column. 3. If a `filter_genre` parameter is provided as a non-empty string, filter the merged DataFrame to only include books of the specified genre. 4. Calculate a new column `age` that represents the age of each author as of the current date. 5. Return the merged DataFrame sorted by the `price` column in descending order. Function signature: ```python def process_book_data(books_path: str, authors_path: str, filter_genre: str = \'\') -> pd.DataFrame: pass ``` # Constraints: - The age of the author should be calculated based on the current date. - If the `filter_genre` parameter is an empty string, return the DataFrame without filtering by genre. - Ensure the resulting DataFrame has meaningful column names that reflect the merged data. # Example Usage: ```python # Process and analyze book data df = process_book_data(\'path/to/books.csv\', \'path/to/authors.csv\', \'Science Fiction\') # Display the resultant DataFrame print(df) ``` # Libraries: - `pandas`","solution":"import pandas as pd from datetime import datetime def process_book_data(books_path: str, authors_path: str, filter_genre: str = \'\') -> pd.DataFrame: Processes book and author data, merging the datasets and optionally filtering by genre. Parameters: - books_path (str): path to the books CSV file. - authors_path (str): path to the authors CSV file. - filter_genre (str): genre to filter books by. If empty, no filtering is applied. Returns: - pd.DataFrame: the merged and processed dataframe sorted by book price in descending order. # Load CSV files into DataFrames books_df = pd.read_csv(books_path) authors_df = pd.read_csv(authors_path) # Merge the DataFrames on the \'author_id\' column merged_df = pd.merge(books_df, authors_df, on=\'author_id\') # Filter the DataFrame by genre if filter_genre is provided if filter_genre: merged_df = merged_df[merged_df[\'genre\'] == filter_genre] # Calculate the author\'s age current_date = datetime.now() merged_df[\'birthdate\'] = pd.to_datetime(merged_df[\'birthdate\']) merged_df[\'age\'] = merged_df[\'birthdate\'].apply(lambda x: current_date.year - x.year - ((current_date.month, current_date.day) < (x.month, x.day))) # Sort the DataFrame by price in descending order merged_df = merged_df.sort_values(by=\'price\', ascending=False) return merged_df"},{"question":"** You are provided with a dataset of employees in a company, and you need to analyze the data to extract useful information. The dataset is a list of dictionaries where each dictionary represents an employee with keys like \'name\', \'age\', \'department\', \'salary\', and \'years_with_company\'. Your task is to implement a function named `analyze_employees` that performs the following operations: 1. Calculate the average age of employees. 2. Find the employee(s) with the highest salary. 3. Determine the department that has the longest average tenure. 4. Calculate the distribution of employees across different departments. 5. Display the results of the above calculations in a readable format. # Dataset Format ```python employees = [ {\\"name\\": \\"Alice\\", \\"age\\": 28, \\"department\\": \\"HR\\", \\"salary\\": 70000, \\"years_with_company\\": 4}, {\\"name\\": \\"Bob\\", \\"age\\": 35, \\"department\\": \\"Engineering\\", \\"salary\\": 90000, \\"years_with_company\\": 6}, {\\"name\\": \\"Charlie\\", \\"age\\": 50, \\"department\\": \\"Finance\\", \\"salary\\": 120000, \\"years_with_company\\": 10}, ... ] ``` # Function Signature ```python def analyze_employees(employees: list) -> None: pass ``` # Example Usage ```python employees = [ {\\"name\\": \\"Alice\\", \\"age\\": 28, \\"department\\": \\"HR\\", \\"salary\\": 70000, \\"years_with_company\\": 4}, {\\"name\\": \\"Bob\\", \\"age\\": 35, \\"department\\": \\"Engineering\\", \\"salary\\": 90000, \\"years_with_company\\": 6}, {\\"name\\": \\"Charlie\\", \\"age\\": 50, \\"department\\": \\"Finance\\", \\"salary\\": 120000, \\"years_with_company\\": 10} ] analyze_employees(employees) ``` # Expected Output ``` Average Age of Employees: 37.67 Employee(s) with Highest Salary: Charlie Department with Longest Average Tenure: Finance Employee Distribution by Department: - HR: 1 - Engineering: 1 - Finance: 1 ```","solution":"def analyze_employees(employees: list) -> None: from collections import defaultdict # Calculate average age of employees total_age = sum(emp[\'age\'] for emp in employees) average_age = total_age / len(employees) # Find the employee(s) with the highest salary max_salary = max(emp[\'salary\'] for emp in employees) highest_salary_employees = [emp[\'name\'] for emp in employees if emp[\'salary\'] == max_salary] # Determine the department with the longest average tenure department_tenure = defaultdict(list) for emp in employees: department_tenure[emp[\'department\']].append(emp[\'years_with_company\']) highest_average_tenure = 0 highest_average_tenure_department = None for department, tenures in department_tenure.items(): average_tenure = sum(tenures) / len(tenures) if average_tenure > highest_average_tenure: highest_average_tenure = average_tenure highest_average_tenure_department = department # Calculate the distribution of employees across different departments department_distribution = defaultdict(int) for emp in employees: department_distribution[emp[\'department\']] += 1 # Display the results print(f\\"Average Age of Employees: {average_age:.2f}\\") print(\\"Employee(s) with Highest Salary:\\", \\", \\".join(highest_salary_employees)) print(f\\"Department with Longest Average Tenure: {highest_average_tenure_department}\\") print(\\"Employee Distribution by Department:\\") for department, count in department_distribution.items(): print(f\\"- {department}: {count}\\")"},{"question":"You have been provided with a list of flight schedules for multiple airlines. Each flight in the schedule includes departure and arrival cities, departure and arrival times (in 24-hour format), and the airline name. Your task is to write a function `get_flights_by_airline(flight_data, airline_name)` that processes this flight schedule data using the pandas library. This function should: 1. Load the data from a given list of dictionaries where each dictionary represents a flight. 2. Convert the \'departure_time\' and \'arrival_time\' columns to datetime format. 3. Sort the data by \'departure_time\'. 4. Filter the data by the specified airline name. 5. Return a pandas DataFrame consisting of only the flights operated by the specified airline, sorted by \'departure_time\'. The parameters for the function are: - `flight_data`: A list of dictionaries where each dictionary contains the flight details. Each dictionary will have the following keys: \'departure_city\', \'arrival_city\', \'departure_time\', \'arrival_time\', \'airline\'. - `airline_name`: A string specifying the airline name to filter the flights by. Use the pandas library functions `pandas.DataFrame` and `pandas.to_datetime` as required while implementing the function. Example of `flight_data`: ```python flight_data = [ {\'departure_city\': \'New York\', \'arrival_city\': \'Los Angeles\', \'departure_time\': \'2023-11-01 06:00\', \'arrival_time\': \'2023-11-01 09:00\', \'airline\': \'Delta\'}, {\'departure_city\': \'Chicago\', \'arrival_city\': \'Houston\', \'departure_time\': \'2023-11-01 07:00\', \'arrival_time\': \'2023-11-01 10:00\', \'airline\': \'United\'}, {\'departure_city\': \'Miami\', \'arrival_city\': \'New York\', \'departure_time\': \'2023-11-01 08:00\', \'arrival_time\': \'2023-11-01 11:00\', \'airline\': \'Delta\'}, # More flights... ] ``` Expected example use: ```python # This should return a DataFrame with only the flights operated by \'Delta\', sorted by \'departure_time\'. get_flights_by_airline(flight_data, \'Delta\') ```","solution":"import pandas as pd def get_flights_by_airline(flight_data, airline_name): Processes flight schedule data and filters by the specified airline. Parameters: flight_data (list of dicts): A list of dictionaries where each dictionary contains the flight details. airline_name (str): The airline name to filter the flights by. Returns: pd.DataFrame: DataFrame consisting of only the flights operated by the specified airline, sorted by \'departure_time\'. # Load data into a pandas DataFrame df = pd.DataFrame(flight_data) # Convert \'departure_time\' and \'arrival_time\' to datetime format df[\'departure_time\'] = pd.to_datetime(df[\'departure_time\']) df[\'arrival_time\'] = pd.to_datetime(df[\'arrival_time\']) # Sort the data by \'departure_time\' df = df.sort_values(by=\'departure_time\') # Filter the data by the specified airline name df_filtered = df[df[\'airline\'] == airline_name] return df_filtered"},{"question":"You are asked to create a function that determines the minimum cutoff score needed to pass a given number of students in a class based on their scores. The function should identify the ( k ) highest scores and return the lowest score among them, which will be the cutoff. Requirements 1. The function should be named **`find_cutoff`**. 2. The function should take two inputs: - `scores`: A list of integers representing the scores of the students. - `k`: An integer representing the number of highest scores to consider for passing. 3. The function should return: - A single integer representing the cutoff score. If `k` is greater than the number of scores in the list, return `None`. Function Signature: ```python def find_cutoff(scores, k): Determine the minimum cutoff score needed to pass k students. Args: scores: List[int] - A list of integers representing the scores of the students. k: int - An integer representing the number of highest scores to consider for passing. Returns: int - The cutoff score, or None if k is greater than the number of scores. ``` Example ```python # Example 1 scores = [70, 80, 90, 60, 50] k = 3 result = find_cutoff(scores, k) print(result) # Should output: 70 # Example 2 scores = [88, 90, 92, 85, 87] k = 5 result = find_cutoff(scores, k) print(result) # Should output: 85 # Example 3 scores = [60, 50, 40, 30, 20] k = 6 result = find_cutoff(scores, k) print(result) # Should output: None ``` Notes: 1. The scores are integers and the list may contain duplicate values. 2. If `k` is less than or equal to the number of scores in the list, ensure that the function identifies the correct cutoff score. 3. If `k` is greater than the number of scores in the list, return `None`.","solution":"def find_cutoff(scores, k): Determine the minimum cutoff score needed to pass k students. Args: scores: List[int] - A list of integers representing the scores of the students. k: int - An integer representing the number of highest scores to consider for passing. Returns: int - The cutoff score, or None if k is greater than the number of scores. if k > len(scores): return None scores.sort(reverse=True) return scores[k-1]"},{"question":"You are given a list of tuples representing directed edges in a graph. Each tuple contains two integers, where the first integer is the start node and the second integer is the end node. Implement a function that checks if the given graph contains a cycle. You should use Depth-First Search (DFS) to detect the cycle. The function should output: bool: True if the graph contains a cycle; otherwise, False. You should write self-contained code starting with: ``` def contains_cycle(edges): graph = {} def dfs(node, visited, rec_stack): visited.add(node) rec_stack.add(node) for neighbor in graph.get(node, []): if neighbor not in visited: if dfs(neighbor, visited, rec_stack): return True elif neighbor in rec_stack: return True rec_stack.remove(node) return False for start, end in edges: if start in graph: graph[start].append(end) else: graph[start] = [end] visited = set() rec_stack = set() for node in graph: if node not in visited: if dfs(node, visited, rec_stack): return True return False ```","solution":"def contains_cycle(edges): Checks if the given directed graph contains a cycle. Args: edges (list of tuples): List of directed edges in the graph. Returns: bool: True if the graph contains a cycle, False otherwise. graph = {} # Helper function for DFS def dfs(node, visited, rec_stack): visited.add(node) rec_stack.add(node) for neighbor in graph.get(node, []): if neighbor not in visited: if dfs(neighbor, visited, rec_stack): return True elif neighbor in rec_stack: return True rec_stack.remove(node) return False # Build the graph for start, end in edges: if start in graph: graph[start].append(end) else: graph[start] = [end] visited = set() rec_stack = set() # Check for cycles in all graph components for node in graph: if node not in visited: if dfs(node, visited, rec_stack): return True return False"},{"question":"You are tasked with creating a context manager, `TempFile`, that handles the creation and deletion of a temporary file. The context manager should create a temporary file when entering the context, and ensure that the file is deleted when exiting the context, whether an exception was raised or not. Here\'s a breakdown of the requirements for constructing the `TempFile` context manager: - **Signature**: The `TempFile` class should utilize the `tempfile` module to create a named temporary file. - The context manager should: - Create a named temporary file upon entering the context and provide its file path to the user. - Ensure the temporary file is closed and deleted upon exiting the context, even if an exception occurs. - Optionally take an argument `prefix` to customize the prefix of the temporary file\'s name. Implement the `TempFile` context manager class as described. Use the `tempfile.NamedTemporaryFile` API and Python\'s context management protocol to achieve this. Example usage: ```python with TempFile(prefix=\\"example_\\") as temp_file_path: with open(temp_file_path, \'w\') as temp_file: temp_file.write(\\"This is a test.\\") # Ensure the file is deleted after the context is exited print(f\\"File exists after context: {os.path.exists(temp_file_path)}\\") ``` Expected result when running the above code: 1. A temporary file with a name starting with \\"example_\\" is created. 2. The file path is provided to the user inside the context block. 3. The temporary file is written to successfully. 4. After the context block, the temporary file is deleted. 5. The printed statement should confirm that the file no longer exists (`False`).","solution":"import os import tempfile class TempFile: def __init__(self, prefix=\'tmp\'): self.prefix = prefix self.temp_file = None self.file_path = None def __enter__(self): self.temp_file = tempfile.NamedTemporaryFile(prefix=self.prefix, delete=False) self.file_path = self.temp_file.name return self.file_path def __exit__(self, exc_type, exc_value, traceback): if self.temp_file: self.temp_file.close() if self.file_path and os.path.exists(self.file_path): os.remove(self.file_path)"},{"question":"# Problem: Maze Solver with Depth-First Search You are tasked with writing a function `solve_maze(maze)` that finds a path from the top-left corner `(0,0)` to the bottom-right corner `(n-1,m-1)` of a given maze using Depth-First Search (DFS). The maze is represented as a 2D list of integers, where `0` represents a walkable cell and `1` represents a wall. The function should return a list of coordinates representing the path from start to end, or an empty list if no path exists. **Key Requirements:** 1. Use the Depth-First Search algorithm to explore paths in the maze. 2. Ensure the function can handle mazes where `n` and `m` are greater than 1. 3. Implement an efficient backtracking mechanism to find the correct path. # Function Signature: ```python def solve_maze(maze: List[List[int]]) -> List[Tuple[int, int]]: ``` Parameters: - `maze (List[List[int]])`: A 2D list representing the maze, where `0` is a walkable cell and `1` is a wall. Returns: - A list of tuples, each representing a coordinate `(x, y)` on the path from start to end. Return an empty list if no path exists. # Example: Here\'s an example usage of the function: ```python maze = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0] ] # Expected output: [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (4, 2), (4, 3), (4, 4)] print(solve_maze(maze)) ``` # Notes: 1. If the maze is empty or the start and end positions are walls, return an empty list. 2. The input maze will be a well-formed rectangular grid with at least one row and one column. 3. Be cautious about edge cases such as dead ends, circular paths, and disconnected regions. # Libraries to Use: - Standard Python libraries only (e.g., `collections` for managing the stack if needed). # Sample Code Usage: ```python # Example maze provided above maze = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0] ] print(solve_maze(maze)) # Expected path from (0, 0) to (4, 4) ``` This problem assesses understanding of graph traversal, backtracking, and the implementation of fundamental algorithms using recursion or iterative methods.","solution":"def solve_maze(maze): Solve the maze using Depth-First Search algorithm to find the path from (0, 0) to (n-1, m-1). Parameters: maze (List[List[int]]): A 2D list representing the maze. Returns: List[Tuple[int, int]]: List of coordinates from start to end, or empty list if no path exists. if not maze or maze[0][0] == 1 or maze[-1][-1] == 1: return [] n, m = len(maze), len(maze[0]) path = [] visited = [[False] * m for _ in range(n)] def dfs(x, y): if x == n - 1 and y == m - 1: # If reached the destination path.append((x, y)) return True if x < 0 or x >= n or y < 0 or y >= m or maze[x][y] == 1 or visited[x][y]: return False visited[x][y] = True path.append((x, y)) # Explore neighbors in the order: Right, Down, Left, Up if (dfs(x, y + 1) or dfs(x + 1, y) or dfs(x, y - 1) or dfs(x - 1, y)): return True path.pop() visited[x][y] = False return False if dfs(0, 0): return path else: return []"},{"question":"You are required to write a function `findPairWithSum(arr, target_sum)` that takes an array of integers `arr` and an integer `target_sum`. The function should find all unique pairs of integers in the array that sum up to the `target_sum`. The function should satisfy the following requirements: 1. The output should be a list of tuples, where each tuple represents a pair of integers that sum to `target_sum`. 2. Each tuple should be sorted in non-decreasing order. 3. The list of tuples should not contain duplicate pairs, and it should be sorted in non-decreasing order based on the first element of the tuple, and then the second element in case of a tie. 4. If no such pairs are found, return an empty list. **Example:** ```python arr = [1, 5, 3, 7, 9, 2] target_sum = 10 ``` The output of `findPairWithSum(arr, target_sum)` should be: ```python [(1, 9), (3, 7)] ``` **Example 2:** ```python arr = [2, 4, 6, 8, 10] target_sum = 12 ``` The output of `findPairWithSum(arr, target_sum)` should be: ```python [(2, 10), (4, 8)] ``` **Function Signature:** ```python def findPairWithSum(arr, target_sum): pass ``` **Hint:** You might find using a set or a dictionary helpful in checking for the complement of the current element with respect to the target sum.","solution":"def findPairWithSum(arr, target_sum): Finds all unique pairs in the array that sum up to the target_sum. :param arr: List[int] - List of integers :param target_sum: int - Target sum for pairs :return: List[Tuple[int, int]] - List of unique pairs that sum up to the target sum seen = set() pairs = set() for number in arr: complement = target_sum - number if complement in seen: pair = tuple(sorted((number, complement))) pairs.add(pair) seen.add(number) return sorted(pairs)"},{"question":"You are tasked with implementing a function that simulates the spread of an infectious disease over a fixed number of days. The simulation uses a simple model where the disease spreads in a grid of size `n x n`. Each cell in the grid can either be infected or healthy. If a cell is infected, it has a certain probability to infect each of its 4 neighboring cells (up, down, left, right). 1. **Input Parameter(s):** - `n`: An integer representing the size of the grid (n x n). - `days`: An integer representing the number of days the simulation will run. - `probability`: A floating-point number between 0 and 1 representing the probability of an infected cell infecting its neighbor. - `initial_infected`: A list of tuples, where each tuple contains the coordinates (x, y) of initially infected cells in the grid. 2. **Output:** - Your function should return a 2D list representing the grid after the simulation runs for the given number of days. Each cell in the 2D list should be either `0` (healthy) or `1` (infected). 3. **Function to Implement:** - **Function Name**: `simulate_disease_spread(n, days, probability, initial_infected)` - **Functionality**: To simulate the spread of the disease over the given number of days and return the final state of the grid. # Example: Assuming: - `n = 3` - `days = 2` - `probability = 0.5` - `initial_infected = [(1, 1)]` The function should initialize a 3x3 grid with the middle cell (1, 1) infected and simulate the spread of the disease for 2 days based on the given probability. The output will be the final state of the grid after 2 days.","solution":"import random def simulate_disease_spread(n, days, probability, initial_infected): Simulates the spread of infectious disease in a n x n grid over a given number of days. :param n: Size of the grid (n x n) :param days: Number of days to run the simulation :param probability: Probability of infection spreading to adjacent cells :param initial_infected: List of tuples representing the initially infected cell coordinates :return: 2D list representing the grid after the simulation def get_neighbors(x, y): neighbors = [ (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1) ] return [(nx, ny) for nx, ny in neighbors if 0 <= nx < n and 0 <= ny < n] # Initialize the grid with all cells healthy grid = [[0] * n for _ in range(n)] # Infect the initial cells for x, y in initial_infected: grid[x][y] = 1 for _ in range(days): new_infections = [] for i in range(n): for j in range(n): if grid[i][j] == 1: for ni, nj in get_neighbors(i, j): if grid[ni][nj] == 0 and random.random() <= probability: new_infections.append((ni, nj)) for x, y in new_infections: grid[x][y] = 1 return grid"},{"question":"You are tasked with writing a Python function that processes a log file to extract and summarize specific information. This function needs to read the log data and output a report of errors grouped by their type. To achieve this, you\'ll use the following libraries: `re`, `collections.defaultdict`. Your function will be named `summarize_log_errors` and should take the following parameter: - `log_path` (string): The file path to the log file to process. The function should return a dictionary where each key is an error type (e.g., \\"ERROR\\", \\"WARNING\\") and each value is a list of corresponding log entries. **Requirements:** 1. Use `open` to read the contents of the log file. 2. Use `re.findall` to find all log entries and their corresponding error types. 3. Use `collections.defaultdict` to group the log entries by error type. 4. Ensure the function correctly handles log entries that span multiple lines. **Example Usage:** ```python log_path = \\"path/to/logfile.log\\" summary = summarize_log_errors(log_path) print(summary[\'ERROR\']) print(summary[\'WARNING\']) ```","solution":"import re import collections def summarize_log_errors(log_path): Summarizes the log errors by their type. Args: log_path (str): The file path to the log file to process. Returns: dict: A dictionary where each key is an error type and each value is a list of corresponding log entries. error_pattern = re.compile(r\'(bERRORb|bWARNINGb).*\') log_summary = collections.defaultdict(list) with open(log_path, \'r\') as log_file: log_entries = log_file.read().split(\'n\') # Match each log entry against the pattern and categorize it for entry in log_entries: match = error_pattern.match(entry) if match: error_type = match.group(1) log_summary[error_type].append(entry) return log_summary"},{"question":"You are tasked with implementing a function named `find_most_frequent_word` that identifies the most frequently occurring word in a given text. If there is a tie, the function should return the word that appears first in the text. Words are defined as sequences of characters separated by whitespace, punctuation, or other non-alphabetic characters. The function should ignore case (e.g., \\"Word\\" and \\"word\\" are considered the same). You may assume that the text will contain at least one word and the text consists of only ASCII characters. Here is a step-by-step breakdown of what the function should do: 1. Normalize the text to ignore case. 2. Split the text into words, only considering alphabetical characters. 3. Count the occurrences of each word. 4. Determine the most frequently occurring word, with ties broken by the order of appearance. **Function Signature:** ```python def find_most_frequent_word(text: str) -> str: ``` **Parameters:** - `text` (str): A string representing the input text. **Returns:** - `str`: The most frequently occurring word in the text. **Constraints:** - Assume `text` is a non-empty string with ASCII characters. **Example:** ```python text = \\"This is a sample text with several words, with several different words.\\" find_most_frequent_word(text) # Output should be \\"with\\" ```","solution":"import re from collections import Counter def find_most_frequent_word(text: str) -> str: Finds the most frequently occurring word in the given text. If there is a tie, returns the word that appears first in the text. # Normalize the text to lower case text = text.lower() # Split the text into words, consider only alphabetical characters words = re.findall(r\'b[a-z]+b\', text) # Count the occurrences of each word word_counts = Counter(words) # Determine the most frequently occurring word, with first occurrence as tie-breaker most_frequent_word = max(words, key=lambda word: (word_counts[word], -words.index(word))) return most_frequent_word"},{"question":"You are required to write a Python function called `generate_password` that creates secure passwords based on specific criteria. The function takes the following parameters: ```python def generate_password(length, use_special_chars, use_numbers, use_uppercase): Generates a secure password based on provided criteria. Parameters: length : int The length of the password to be generated. use_special_chars : bool If True, the password will include special characters. use_numbers : bool If True, the password will include numbers. use_uppercase : bool If True, the password will include uppercase letters. Returns: password : str The generated secure password. ``` # Function Details 1. **Parameters**: - `length`: An integer representing the desired length of the generated password. - `use_special_chars`: A boolean indicating whether the password should include special characters (`!@#%^&*()-_=+[]{}|;:,.<>?`). - `use_numbers`: A boolean indicating whether the password should include numerical digits (0-9). - `use_uppercase`: A boolean indicating whether the password should include uppercase letters (A-Z). 2. **Password Requirements**: - Password must include at least one lowercase letter. - If `use_special_chars` is True, the password must include at least one special character. - If `use_numbers` is True, the password must include at least one number. - If `use_uppercase` is True, the password must include at least one uppercase letter. 3. **Password Generation Logic**: - Implement helper functions to select characters based on the given criteria. - Use the `random` module to randomly generate characters for the password. - Ensure the generated password meets all the required criteria. 4. **Error Handling**: - If the specified `length` is less than the sum of required types of characters, raise a `ValueError`. # Example Usage ```python # Generate a password of length 12 with special characters, numbers, and uppercase letters password = generate_password(12, use_special_chars=True, use_numbers=True, use_uppercase=True) print(password) # Example output: \'A1a!S2b@D3c#\' ```","solution":"import random import string def generate_password(length, use_special_chars, use_numbers, use_uppercase): Generates a secure password based on provided criteria. Parameters: length : int The length of the password to be generated. use_special_chars : bool If True, the password will include special characters. use_numbers : bool If True, the password will include numbers. use_uppercase : bool If True, the password will include uppercase letters. Returns: password : str The generated secure password. if length < (1 + use_special_chars + use_numbers + use_uppercase): raise ValueError(\\"Password length is too short to include required character types\\") lower_chars = string.ascii_lowercase upper_chars = string.ascii_uppercase if use_uppercase else \'\' number_chars = string.digits if use_numbers else \'\' special_chars = string.punctuation if use_special_chars else \'\' required_chars = [] if use_uppercase: required_chars.append(random.choice(upper_chars)) if use_numbers: required_chars.append(random.choice(number_chars)) if use_special_chars: required_chars.append(random.choice(special_chars)) required_chars.append(random.choice(lower_chars)) available_chars = lower_chars + upper_chars + number_chars + special_chars password_chars = required_chars + [random.choice(available_chars) for _ in range(length - len(required_chars))] random.shuffle(password_chars) return \'\'.join(password_chars)"},{"question":"You are required to create a function named `sum_of_squares` that takes a list of integers and computes the sum of squares of those integers. The sum of squares is the sum of each number in the list raised to the power of 2. To optimize the performance, if the list of integers has already been processed, it should store the result in a cache to avoid redundant calculations. Your task is to implement the `sum_of_squares(nums: List[int]) -> int` function that: 1. Returns the sum of squares of the integers in the list `nums`. 2. Utilizes a caching mechanism to store previously computed results for lists of integers. You can assume a global dictionary `squares_cache` is available and initialized to an empty dictionary `{}`. 3. Handles empty lists by returning 0. Use the following template for your implementation: ```python from typing import List squares_cache = {} def sum_of_squares(nums: List[int]) -> int: # Your implementation here pass ``` Examples: ```python assert sum_of_squares([1, 2, 3]) == 14 # 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 assert sum_of_squares([4, 5, 6]) == 77 # 4^2 + 5^2 + 6^2 = 16 + 25 + 36 = 77 assert sum_of_squares([1, 2, 3]) == 14 # Cached result assert sum_of_squares([]) == 0 # Empty list ``` Note: Ensure your function correctly utilizes caching to avoid redundant calculations for the same list inputs.","solution":"from typing import List # Initialize the cache squares_cache = {} def sum_of_squares(nums: List[int]) -> int: # Convert the list to a tuple (lists are not hashable) nums_tuple = tuple(nums) # Check if the result is already in the cache if nums_tuple in squares_cache: return squares_cache[nums_tuple] # Calculate the sum of squares result = sum(x ** 2 for x in nums) # Store the result in the cache squares_cache[nums_tuple] = result return result"},{"question":"You have been given a file named \'emergency_calls.csv\' containing data related to emergency calls made in a city. The CSV file includes columns such as \'Call_Time\', \'Category\', and \'Response_Time\'. You need to analyze this data to determine the average response time for each category of emergency. Please write a function called `average_response_time_by_category` that performs the following tasks: 1. Reads the CSV file. 2. Cleans the \'Response_Time\' column by converting it to numerical values (in minutes). 3. Groups the data by the \'Category\' column. 4. Calculates the average response time for each category. 5. Returns a dictionary where the keys are the categories and the values are the average response times. Note: Ensure that your function handles any missing or corrupt data appropriately. Here is a generic structure to assist you: ```python import pandas as pd def average_response_time_by_category(csv_file_path): # Your code here pass ```","solution":"import pandas as pd def average_response_time_by_category(csv_file_path): # Read the CSV file df = pd.read_csv(csv_file_path) # Clean the \'Response_Time\' column - convert to numerical values in minutes df[\'Response_Time\'] = pd.to_numeric(df[\'Response_Time\'], errors=\'coerce\') # Drop any rows with NaN values in \'Response_Time\' or \'Category\' df.dropna(subset=[\'Response_Time\', \'Category\'], inplace=True) # Group the data by \'Category\' and calculate the average response time average_response_times = df.groupby(\'Category\')[\'Response_Time\'].mean() # Convert the result to a dictionary result = average_response_times.to_dict() return result"},{"question":"Implement a function called `find_anagrams` that takes a list of strings and returns a list of lists. Each sublist should contain strings that are anagrams of each other, and each string in the input list should only appear in one sublist. The order of the input strings should be preserved within the sublists. You should write self-contained code starting with: ``` from collections import defaultdict def find_anagrams(words): ```","solution":"from collections import defaultdict def find_anagrams(words): Groups words that are anagrams of each other. Args: words (list): List of words to be grouped. Returns: list: List of lists, each containing words that are anagrams of each other. anagram_dict = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) return list(anagram_dict.values())"},{"question":"Given a large file containing a list of integers, your task is to implement a function `find_top_k_frequent_elements(file_path, k)` that identifies the `k` most frequent integers in the file. The integers are separated by whitespace. You should use a heap to efficiently find the top `k` frequent elements. Here\'s the function template to complete: ```python import heapq from collections import Counter def find_top_k_frequent_elements(file_path, k): Find the k most frequent elements from a large file of integers. Parameters: file_path (str): Path to the file containing a list of integers. k (int): The number of most frequent elements to return. Returns: List[int]: A list containing the k most frequent elements. with open(file_path, \'r\') as file: # Read the entire file into memory and split by whitespace numbers = file.read().split() # Count the frequency of each integer counter = Counter(map(int, numbers)) # Use a heap to find the top k most frequent elements return [item for item, _ in heapq.nlargest(k, counter.items(), key=lambda x: x[1])] ``` # Requirements: 1. Ensure the function reads from the file and correctly handles large input data. 2. Use the `heapq` library to maintain the heap and the `Counter` class from `collections` to count element frequencies. 3. The function should return a list of the `k` most frequent integers. Test Cases: Assume you have a file named `\'large_numbers.txt\'` with the following content: ``` 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ``` Test the function with the example inputs: ```python file_path = \'large_numbers.txt\' k = 3 ``` Expected output: `[5, 4, 3]` (or any order of these elements)","solution":"import heapq from collections import Counter def find_top_k_frequent_elements(file_path, k): Find the k most frequent elements from a large file of integers. Parameters: file_path (str): Path to the file containing a list of integers. k (int): The number of most frequent elements to return. Returns: List[int]: A list containing the k most frequent elements. # Read the entire file into memory and split by whitespace with open(file_path, \'r\') as file: numbers = file.read().split() # Count the frequency of each integer counter = Counter(map(int, numbers)) # Use a heap to find the top k most frequent elements return [item for item, _ in heapq.nlargest(k, counter.items(), key=lambda x: x[1])]"},{"question":"--- Create a function `generate_histogram(data, bin_count)` that uses the `matplotlib` library to generate a histogram based on a list of numerical data. The function will take in the list of data and the desired number of bins, and then display a histogram. # Requirements: 1. **Function Name**: `generate_histogram` 2. **Parameters**: - `data`: A list of numerical values. The list can be any length, containing integers or floats. - `bin_count`: An integer representing the number of bins to be used in the histogram. 3. **Functionality**: - The function should check that the `bin_count` is a positive integer. - Use the `matplotlib` library to generate and display a histogram with the specified number of bins. - The histogram should include appropriate labels for the x-axis, y-axis, and a title. 4. **Libraries**: - `matplotlib` for plotting the histogram. 5. **Error Handling**: - If `bin_count` is not a positive integer, the function should print \\"INVALID INPUT BIN_COUNT.\\" and return without plotting. **Example Usage**: ```python generate_histogram([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3) ``` This should plot a histogram of the data with 3 bins, illustrating the frequency distribution of the values. # Additional Context: The `generate_histogram` function helps learners understand how to: - Use `matplotlib` to create histograms. - Validate input parameters to ensure they are within acceptable ranges. - Label plots effectively for better data interpretation.","solution":"import matplotlib.pyplot as plt def generate_histogram(data, bin_count): Generates a histogram from a list of numerical data using the specified number of bins. Parameters: - data: list of numerical values (integers or floats) - bin_count: integer representing the number of bins to use in the histogram If bin_count is not a positive integer, prints \\"INVALID INPUT BIN_COUNT.\\" and returns. if not isinstance(bin_count, int) or bin_count <= 0: print(\\"INVALID INPUT BIN_COUNT.\\") return plt.hist(data, bins=bin_count) plt.xlabel(\\"Value\\") plt.ylabel(\\"Frequency\\") plt.title(\\"Histogram\\") plt.show()"},{"question":"You are tasked with creating a function that processes lists and strings using Python. Specifically, you need to create a function named `list_string_operations` that performs the following tasks: 1. Create a list of integers from 1 to 10 and print the list. 2. Reverse the list and print the reversed list. 3. Convert the list of integers to a list of strings, where each integer is represented as a string, and print the new list. 4. Join the list of strings into a single string with each element separated by a comma, and print the resulting string. 5. Split the resulting string back into a list of string elements using the comma as a delimiter, and print the list. 6. Convert the list of strings back into a list of integers and print the new list. 7. Create a string containing the phrase \\"The quick brown fox jumps over the lazy dog\\", and print the string. 8. Split the string into a list of words using spaces as delimiters, and print the list of words. 9. Create a new list containing only the unique words from the previous list, preserving the original order, and print the unique words list. 10. Create a dictionary where keys are the unique words from the unique words list, and values are the lengths of those words, and print the dictionary. Use Python\'s built-in functions and methods to achieve these tasks. Your function will not return any value; it will only print the results of the operations directly.","solution":"def list_string_operations(): # Task 1: Create a list of integers from 1 to 10 and print the list int_list = list(range(1, 11)) print(\\"List of integers from 1 to 10:\\", int_list) # Task 2: Reverse the list and print the reversed list reversed_list = int_list[::-1] print(\\"Reversed list:\\", reversed_list) # Task 3: Convert the list of integers to a list of strings and print the new list str_list = [str(i) for i in int_list] print(\\"List of strings:\\", str_list) # Task 4: Join the list of strings into a single string with each element separated by a comma and print the resulting string joined_str = \',\'.join(str_list) print(\\"Joined string:\\", joined_str) # Task 5: Split the resulting string back into a list of string elements using the comma as a delimiter and print the list split_list = joined_str.split(\',\') print(\\"Split list:\\", split_list) # Task 6: Convert the list of strings back into a list of integers and print the new list int_list_from_str = [int(i) for i in split_list] print(\\"List of integers from strings:\\", int_list_from_str) # Task 7: Create a string containing the phrase \\"The quick brown fox jumps over the lazy dog\\" and print it phrase = \\"The quick brown fox jumps over the lazy dog\\" print(\\"Original phrase:\\", phrase) # Task 8: Split the string into a list of words using spaces as delimiters and print the list of words words_list = phrase.split() print(\\"List of words:\\", words_list) # Task 9: Create a new list containing only the unique words from the previous list, preserving the original order, and print it unique_words = [] seen_words = set() for word in words_list: if word not in seen_words: unique_words.append(word) seen_words.add(word) print(\\"Unique words list:\\", unique_words) # Task 10: Create a dictionary where keys are the unique words and values are the lengths of those words, and print the dictionary word_lengths = {word: len(word) for word in unique_words} print(\\"Word lengths dictionary:\\", word_lengths)"},{"question":"In this problem, you are tasked with designing a function that generates a specified pattern within a rectangular grid of characters. The pattern can be either a diagonal line (from top left to bottom right) or a checkerboard pattern. Your task is to write a function named `generate_pattern` with the following signature: ```python def generate_pattern(rows, cols, pattern_type): ... ``` # Parameters: 1. `rows`: An integer representing the number of rows in the grid. 2. `cols`: An integer representing the number of columns in the grid. 3. `pattern_type`: A string indicating the type of pattern to generate. It can be either `\'diagonal\'` or `\'checkerboard\'`. # Requirements: - **For `\'diagonal\'` pattern**: Fill the grid such that the diagonal elements (from top-left to bottom-right) are marked with an \'X\', and all other elements are marked with \'-\'. - **For `\'checkerboard\'` pattern**: Fill the grid such that it alternates between \'X\' and \'-\' in a checkerboard fashion starting with \'X\' at the top left corner. # Example Usages: ```python # Example 1: Generate a 3x3 grid with a diagonal pattern print(generate_pattern(3, 3, \'diagonal\')) # Expected Output: # [ # [\'X\', \'-\', \'-\'], # [\'-\', \'X\', \'-\'], # [\'-\', \'-\', \'X\'] #] # Example 2: Generate a 4x4 grid with a checkerboard pattern print(generate_pattern(4, 4, \'checkerboard\')) # Expected Output: # [ # [\'X\', \'-\', \'X\', \'-\'], # [\'-\', \'X\', \'-\', \'X\'], # [\'X\', \'-\', \'X\', \'-\'], # [\'-\', \'X\', \'-\', \'X\'] #] ``` # Constraints: - Assume `rows` and `cols` are positive integers. - The `pattern_type` will always be either `\'diagonal\'` or `\'checkerboard\'`. Implement the function `generate_pattern` to satisfy the requirements described above.","solution":"def generate_pattern(rows, cols, pattern_type): Generates a pattern based on the specified type within a grid of specified rows and columns. Parameters: rows (int): Number of rows in the grid. cols (int): Number of columns in the grid. pattern_type (str): Type of pattern to generate. It can be \'diagonal\' or \'checkerboard\'. Returns: list: A 2D list representing the generated pattern. grid = [[\'-\' for _ in range(cols)] for _ in range(rows)] if pattern_type == \'diagonal\': for i in range(min(rows, cols)): grid[i][i] = \'X\' elif pattern_type == \'checkerboard\': for r in range(rows): for c in range(cols): if (r + c) % 2 == 0: grid[r][c] = \'X\' return grid"},{"question":"You are tasked with creating a function that extracts and computes various properties of a given list of numbers. The goal is to become familiar with list manipulation and basic statistical computations using Python. Name the function `analyze_numbers`. Requirements: 1. The function should take a list of integers as input. 2. Compute and print the total number of elements in the list. 3. Compute and print the sum of all the elements in the list. 4. Compute and print the mean (average) value of the elements in the list. 5. Compute and print the median value of the elements in the list. 6. Compute and print the maximum and minimum values in the list. 7. Return a dictionary containing the computed properties: total count, sum, mean, median, maximum, and minimum. Define helper functions if needed to keep your code organized. Taking the example of the list `[5, 1, 9, 3, 7]`, the function should compute and print the following: - Total count: 5 - Sum: 25 - Mean: 5.0 - Median: 5 - Maximum: 9 - Minimum: 1 Here is a template to get you started: ```python def analyze_numbers(numbers): if not numbers: return { \'total_count\': 0, \'sum\': 0, \'mean\': None, \'median\': None, \'max\': None, \'min\': None } total_count = len(numbers) total_sum = sum(numbers) mean = total_sum / total_count sorted_numbers = sorted(numbers) if total_count % 2 == 0: median = (sorted_numbers[total_count // 2 - 1] + sorted_numbers[total_count // 2]) / 2 else: median = sorted_numbers[total_count // 2] max_value = max(numbers) min_value = min(numbers) # Print values print(\\"Total count:\\", total_count) print(\\"Sum:\\", total_sum) print(\\"Mean:\\", mean) print(\\"Median:\\", median) print(\\"Maximum:\\", max_value) print(\\"Minimum:\\", min_value) # Return results in dictionary form return { \'total_count\': total_count, \'sum\': total_sum, \'mean\': mean, \'median\': median, \'max\': max_value, \'min\': min_value } # Example usage example_list = [5, 1, 9, 3, 7] result = analyze_numbers(example_list) ``` Write your implementation of the `analyze_numbers` function within the provided template.","solution":"def analyze_numbers(numbers): if not numbers: return { \'total_count\': 0, \'sum\': 0, \'mean\': None, \'median\': None, \'max\': None, \'min\': None } total_count = len(numbers) total_sum = sum(numbers) mean = total_sum / total_count sorted_numbers = sorted(numbers) if total_count % 2 == 0: median = (sorted_numbers[total_count // 2 - 1] + sorted_numbers[total_count // 2]) / 2 else: median = sorted_numbers[total_count // 2] max_value = max(numbers) min_value = min(numbers) # Print values print(\\"Total count:\\", total_count) print(\\"Sum:\\", total_sum) print(\\"Mean:\\", mean) print(\\"Median:\\", median) print(\\"Maximum:\\", max_value) print(\\"Minimum:\\", min_value) # Return results in dictionary form return { \'total_count\': total_count, \'sum\': total_sum, \'mean\': mean, \'median\': median, \'max\': max_value, \'min\': min_value } # Example usage example_list = [5, 1, 9, 3, 7] result = analyze_numbers(example_list)"},{"question":"You are given a list of integers `nums` and an integer `target`. Your task is to implement the function `two_sum(nums, target)` that finds all unique pairs of integers in the list that add up to the given `target`. # Function Signature ```python def two_sum(nums, target): Finds all unique pairs of integers in the list `nums` that add up to `target`. Arguments: nums -- list of integers target -- integer, the target sum Returns: pairs -- list of tuples, each containing a unique pair of integers that add up to `target` ``` # Inputs - `nums`: A list of integers. - `target`: An integer representing the target sum. # Outputs - `pairs`: A list of tuples, where each tuple contains a unique pair of integers from `nums` that add up to the target sum. The tuples should be sorted in lexicographical order. # Requirements Ensure that the solution has the following properties: - Handles cases with negative numbers. - Avoids duplicate pairs. # Detailed Description 1. Iterate through each element in `nums`. 2. Use a hash set to keep track of the elements that have been visited. 3. For each element, check if the difference between the target and the current element exists in the hash set. 4. If it exists, add the pair (sorted to maintain lexicographical order) to the result list. 5. Ensure the set of pairs is unique by converting the list of tuples to a set and back to a list. # Additional Hint Utilize Python\'s built-in data structures such as sets to efficiently find pairs and avoid duplicates. # Example ```python nums = [2, 4, 3, 7, 5, 1, 0, -1, -2] target = 5 pairs = two_sum(nums, target) print(\\"Pairs:\\", pairs) # Expected output: [(0, 5), (1, 4), (2, 3), (-2, 7)] ```","solution":"def two_sum(nums, target): Finds all unique pairs of integers in the list `nums` that add up to `target`. Arguments: nums -- list of integers target -- integer, the target sum Returns: pairs -- list of tuples, each containing a unique pair of integers that add up to `target` seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: # Adding a sorted tuple (min, max) ensures uniqueness and lexicographical order. pairs.add(tuple(sorted((num, complement)))) seen.add(num) # Convert set to list and sort it lexicographically return sorted(list(pairs))"},{"question":"Create a function that reads in a CSV file, computes the mean and standard deviation of a specified numeric column, and generates a box plot of this column. The function should time the entire operation from reading the file until the plot is created. The function should output a dictionary containing two elements: - \'time_taken\': The time taken to execute the task in seconds. - \'ax\': The matplotlib Axes object containing the plot. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt import time def analyze_csv(file_path, column_name): ```","solution":"import pandas as pd import matplotlib.pyplot as plt import time def analyze_csv(file_path, column_name): Reads a CSV file, computes mean and standard deviation of a specified numeric column, generates a box plot of this column, and times the entire operation. Parameters: file_path (str): The path to the CSV file. column_name (str): The name of the numeric column to analyze. Returns: dict: A dictionary with \'time_taken\' (execution time in seconds) and \'ax\' (the matplotlib Axes object). start_time = time.time() # Read the CSV file df = pd.read_csv(file_path) # Compute mean and standard deviation mean_value = df[column_name].mean() std_dev = df[column_name].std() print(f\\"Mean: {mean_value}\\") print(f\\"Standard Deviation: {std_dev}\\") # Generate the box plot fig, ax = plt.subplots() df.boxplot(column=column_name, ax=ax) # Calculate the time taken end_time = time.time() time_taken = end_time - start_time return { \'time_taken\': time_taken, \'ax\': ax }"},{"question":"Determine if the given array represents the preorder traversal of a binary search tree (BST). A preorder traversal lists the nodes of a tree in the following order: root, left subtree, right subtree. For a BST, this traversal should obey the rule that for every node, the values of all nodes in its left subtree are less than the node\'s value and the values in the right subtree are greater. The function should return True if the array represents a preorder traversal of a BST, and False otherwise. The function should follow this prototype: ``` def is_preorder_of_bst(sequence): ``` The input sequence will be a list of integers. Example: ``` assert is_preorder_of_bst([8, 5, 1, 7, 10, 12]) == True assert is_preorder_of_bst([8, 5, 1, 10, 7, 12]) == False ```","solution":"def is_preorder_of_bst(sequence): Checks if the given array represents the preorder traversal of a binary search tree (BST). Args: sequence: List[int] - list of integers representing the preorder traversal of a tree. Returns: bool - True if the sequence represents a BST preorder traversal, False otherwise. if not sequence: return True stack, root = [], float(\'-inf\') for value in sequence: # If we find a node who is on right side # and smaller than root, return False if value < root: return False # If value is in right subtree of stack, # Keep removing items smaller than value while stack and stack[-1] < value: root = stack.pop() # Push current value to stack stack.append(value) return True"},{"question":"Create a function that takes a string representing a directory path and a positive integer `n`. The function should search the directory and its subdirectories for text files with `.txt` extension and return the contents of the `n` largest files by size. The function should use type hints to specify input and output types. The function should raise the exceptions for: - NotADirectoryError: If the provided path is not a directory. - ValueError: If a text file cannot be read. The function should output with: ``` List[str]: A list of strings, where each string is the content of one of the n largest text files. ``` You should write self-contained code starting with: ``` from typing import List from pathlib import Path def read_largest_text_files(directory: str, n: int) -> List[str]: ```","solution":"from typing import List from pathlib import Path def read_largest_text_files(directory: str, n: int) -> List[str]: Reads the contents of the n largest text files in a given directory and its subdirectories. Parameters: directory (str): The path to the directory. n (int): The number of largest text files to read. Returns: List[str]: List of contents of the n largest text files. Raises: NotADirectoryError: If the provided path is not a directory. ValueError: If a text file cannot be read. dir_path = Path(directory) if not dir_path.is_dir(): raise NotADirectoryError(f\\"The provided path \'{directory}\' is not a directory.\\") text_files = list(dir_path.rglob(\'*.txt\')) if not text_files: return [] text_files.sort(key=lambda f: f.stat().st_size, reverse=True) largest_files = text_files[:n] contents = [] for file in largest_files: try: with file.open(\'r\', encoding=\'utf-8\') as f: contents.append(f.read()) except Exception as e: raise ValueError(f\\"Cannot read file \'{file}\': {e}\\") return contents"},{"question":"You are tasked with simulating a simple text-based version of Conway\'s Game of Life, which is a cellular automaton devised by the British mathematician John Horton Conway in 1970. The simulation runs on a rectangular grid of cells, where each cell can be either alive or dead. The evolution of the grid happens in discrete time steps, based on a set of rules applied to each cell. Requirements: 1. **Function Name:** `game_of_life` 2. **Arguments:** - `grid` (2D list of integers): A rectangular grid where `1` represents a live cell and `0` represents a dead cell. - `steps` (integer): The number of time steps to simulate. 3. **Output:** The function should return the grid after simulating the given number of steps. Rules: 1. Any live cell with fewer than 2 live neighbors dies (underpopulation). 2. Any live cell with 2 or 3 live neighbors lives on to the next generation. 3. Any live cell with more than 3 live neighbors dies (overpopulation). 4. Any dead cell with exactly 3 live neighbors becomes a live cell (reproduction). Example: Suppose the initial grid is: ``` grid = [ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ] ``` and `steps` is 1, the function call `game_of_life(grid, 1)` should result in the following grid: ``` [ [0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0] ] ``` # Instruction to Implement: 1. Define the function `game_of_life(grid, steps)` which applies the Game of Life rules over the specified number of steps. 2. Iterate over each cell in the grid to count the number of live neighbors. 3. Apply the rules to determine the state of each cell in the next generation. 4. Update the grid after each step. # Hint: To count the live neighbors, you may consider the eight possible directions (up, down, left, right and the four diagonals). Ensure that you handle the edge cases where the cell is on the boundary of the grid. # Boilerplate Code: ```python def game_of_life(grid, steps): def count_live_neighbors(r, c): live_neighbors = 0 for dr in [-1, 0, 1]: for dc in [-1, 0, 1]: if (dr != 0 or dc != 0) and (0 <= r + dr < len(grid)) and (0 <= c + dc < len(grid[0])): live_neighbors += grid[r + dr][c + dc] return live_neighbors for _ in range(steps): new_grid = [[0] * len(grid[0]) for _ in range(len(grid))] for row in range(len(grid)): for col in range(len(grid[0])): live_neighbors = count_live_neighbors(row, col) if grid[row][col] == 1: if live_neighbors < 2 or live_neighbors > 3: new_grid[row][col] = 0 else: new_grid[row][col] = 1 else: if live_neighbors == 3: new_grid[row][col] = 1 grid = new_grid return grid # Example of usage initial_grid = [ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ] steps = 1 print(game_of_life(initial_grid, steps)) ```","solution":"def game_of_life(grid, steps): def count_live_neighbors(r, c): live_neighbors = 0 for dr in [-1, 0, 1]: for dc in [-1, 0, 1]: if (dr != 0 or dc != 0) and (0 <= r + dr < len(grid)) and (0 <= c + dc < len(grid[0])): live_neighbors += grid[r + dr][c + dc] return live_neighbors for _ in range(steps): new_grid = [[0] * len(grid[0]) for _ in range(len(grid))] for row in range(len(grid)): for col in range(len(grid[0])): live_neighbors = count_live_neighbors(row, col) if grid[row][col] == 1: if live_neighbors < 2 or live_neighbors > 3: new_grid[row][col] = 0 else: new_grid[row][col] = 1 else: if live_neighbors == 3: new_grid[row][col] = 1 grid = new_grid return grid"},{"question":"You are tasked with implementing a function that processes a list of transactions and categorizes them into different expense categories. Each transaction is represented as a tuple containing the amount, category, and description. The function should group the transactions by category and calculate the total amount spent in each category. # Specific Requirements: 1. **Function Name**: `categorize_expenses` 2. **Input**: - A list of transactions, where each transaction is a tuple in the format `(amount, category, description)`. - Example: ```python [ (50.5, \\"Food\\", \\"Groceries\\"), (20.0, \\"Entertainment\\", \\"Movie ticket\\"), (15.75, \\"Food\\", \\"Lunch out\\"), (70.8, \\"Utilities\\", \\"Electricity bill\\") ] ``` 3. **Output**: - A dictionary where each key is a category, and the value is the total amount spent in that category. - Example: ```python { \\"Food\\": 66.25, \\"Entertainment\\": 20.0, \\"Utilities\\": 70.8 } ``` # Example: ```python transactions = [ (50.5, \\"Food\\", \\"Groceries\\"), (20.0, \\"Entertainment\\", \\"Movie ticket\\"), (15.75, \\"Food\\", \\"Lunch out\\"), (70.8, \\"Utilities\\", \\"Electricity bill\\") ] print(categorize_expenses(transactions)) # Output: {\'Food\': 66.25, \'Entertainment\': 20.0, \'Utilities\': 70.8} ```","solution":"def categorize_expenses(transactions): Groups transactions by their category and calculates the total amount spent in each category. Parameters: transactions (list of tuples): Each tuple contains (amount, category, description) Returns: dict: A dictionary with categories as keys and total amounts as values. categorized_expenses = {} for amount, category, description in transactions: if category in categorized_expenses: categorized_expenses[category] += amount else: categorized_expenses[category] = amount return categorized_expenses"},{"question":"You are tasked with creating a function `count_triangular_numbers(n)` that computes and returns a list of the first `n` triangular numbers. Triangular numbers are a sequence of numbers generated by the formula: [ T_k = frac{k(k+1)}{2} ] where ( T_k ) is the ( k )-th triangular number and ( k ) is a positive integer. The sequence starts from ( k = 1 ). For example: - The 1st triangular number is ( frac{1(1+1)}{2} = 1 ) - The 2nd triangular number is ( frac{2(2+1)}{2} = 3 ) - The 3rd triangular number is ( frac{3(3+1)}{2} = 6 ) The function should satisfy the following requirements: - Accept an integer ( n ) as an input, where ( n geq 1 ). - Calculate the first ( n ) triangular numbers. - Return a list of the first ( n ) triangular numbers. **Function Signature**: ```python def count_triangular_numbers(n: int) -> list: pass ```","solution":"def count_triangular_numbers(n: int) -> list: Computes and returns a list of the first `n` triangular numbers. Parameters: n (int): The number of triangular numbers to generate. Returns: list: A list containing the first `n` triangular numbers. triangular_numbers = [] for k in range(1, n + 1): T_k = k * (k + 1) // 2 triangular_numbers.append(T_k) return triangular_numbers"},{"question":"In this problem, you will write a function named `longest_subarray_with_sum` that finds the length of the longest subarray with a given sum in an input array. The function should handle both positive and negative numbers in the array. **Function Signature:** ```python def longest_subarray_with_sum(arr: List[int], target_sum: int) -> int: ``` **Parameters:** - `arr` (List[int]): The input array of integers. - `target_sum` (int): The target sum for which the longest subarray\'s length is to be found. **Returns:** - `int`: The length of the longest subarray which adds up to `target_sum`. **Requirements:** - Utilize a dictionary to store the cumulative sum and the first occurrence index. - Traverse the array and compute the cumulative sum at each index. - Check if the cumulative sum equals the target sum; if so, update the maximum length. - If the difference between the current cumulative sum and the target sum exists in the dictionary, calculate the potential length and update the maximum length if it is greater. **Example:** ```python # Example Input arr = [10, 5, 2, 7, 1, 9] # Array of integers target_sum = 15 # Target sum # Function Call length = longest_subarray_with_sum(arr, target_sum) # Expected Output print(length) # Output should be 4 as the subarray [5, 2, 7, 1] sums up to 15. ``` **Detailed Steps:** 1. Initialize a dictionary to keep track of the first occurrence of cumulative sums. 2. Start with a cumulative sum of 0 and iterate over the elements in the array. 3. For each element, update the cumulative sum. 4. Check if the cumulative sum equals the target sum; if true, update the maximum length found so far. 5. If the cumulative sum minus the target sum exists in the dictionary, this means there is a subarray that sums to the target sum between these two indices. 6. Store the first occurrence of each cumulative sum in the dictionary. 7. Return the maximum length of the subarray found.","solution":"from typing import List def longest_subarray_with_sum(arr: List[int], target_sum: int) -> int: Finds the length of the longest subarray with a given sum. Parameters: - arr (List[int]): The input array of integers. - target_sum (int): The target sum for which the longest subarray\'s length is to be found. Returns: - int: The length of the longest subarray which adds up to `target_sum`. cumulative_sum = 0 max_length = 0 sum_to_index = {0: -1} # Dictionary to store cumulative sum and its first occurrence index for index, value in enumerate(arr): cumulative_sum += value # If cumulative sum equals the target sum, update the max length if cumulative_sum == target_sum: max_length = index + 1 # If (cumulative_sum - target_sum) exists in sum_to_index, update max length if (cumulative_sum - target_sum) in sum_to_index: max_length = max(max_length, index - sum_to_index[cumulative_sum - target_sum]) # Store the first occurrence of each cumulative sum if cumulative_sum not in sum_to_index: sum_to_index[cumulative_sum] = index return max_length"},{"question":"You are given a dataset of people with their respective birth dates. You are tasked with writing a function to calculate the age of each person in years and add it as a new column to the dataset. Your goal is to write a function that accurately computes the ages based on the provided birth dates and today\'s date. Function Specification Write a function named `add_age_column(df, date_col)` that: 1. Takes in two arguments: - `df`: A pandas DataFrame containing the dataset. - `date_col`: A string that represents the column name within the DataFrame which contains the birth dates in \'YYYY-MM-DD\' format. 2. Computes the age of each individual based on the birth date provided in the `date_col` and today\'s date. 3. Adds a new column called `Age` to the DataFrame with the calculated ages. 4. Returns the updated DataFrame. Example Given the following dataset: ```python data = { \'Name\': [\'Alice\', \'Bob\', \'Charlie\'], \'Birthdate\': [\'2000-01-01\', \'1990-06-15\', \'1985-12-30\'] } df = pd.DataFrame(data) ``` Calling `add_age_column(df, \'Birthdate\')` should return: ```python Name Birthdate Age 0 Alice 2000-01-01 23 1 Bob 1990-06-15 33 2 Charlie 1985-12-30 37 ```","solution":"import pandas as pd from datetime import datetime def add_age_column(df, date_col): Adds an \'Age\' column to the dataframe based on the birth dates in the specified column. Parameters: df (pandas.DataFrame): The input dataframe containing the dataset. date_col (str): The column name within the dataframe that contains the birth dates in \'YYYY-MM-DD\' format. Returns: pandas.DataFrame: The updated dataframe with an \'Age\' column. today = datetime.today() def calculate_age(birthdate): birthdate = datetime.strptime(birthdate, \'%Y-%m-%d\') age = today.year - birthdate.year - ((today.month, today.day) < (birthdate.month, birthdate.day)) return age df[\'Age\'] = df[date_col].apply(calculate_age) return df"},{"question":"**Objective:** Implement a function to calculate the area of a triangle given its sides using Heron\'s formula. **Context:** You are given the lengths of the three sides of a triangle. Using Heron\'s formula, compute the area of the triangle. The formula for the area ( A ) of a triangle with sides ( a ), ( b ), and ( c ) is: [ s = frac{a + b + c}{2} ] [ A = sqrt{s cdot (s - a) cdot (s - b) cdot (s - c)} ] **Function Requirement:** Define a function named `triangle_area` that takes three parameters `a`, `b`, and `c` (all floats), representing the lengths of the sides of a triangle, and returns the area of the triangle. **Guidelines:** 1. Ensure the computation correctly follows Heron\'s formula. 2. Handle any valid floating-point numbers as inputs for the sides, ensuring they can form a valid triangle. 3. Use the `math.sqrt` function from the Python `math` library to calculate the square root. **Example Usage:** ```python area = triangle_area(3.0, 4.0, 5.0) print(area) # Output: 6.0 ``` **Function Signature:** ```python def triangle_area(a: float, b: float, c: float) -> float: pass ``` Ensure your implementation is correct by testing it with various sets of side lengths.","solution":"import math def triangle_area(a: float, b: float, c: float) -> float: Calculate the area of a triangle using Heron\'s formula. Parameters: - a (float): length of the first side - b (float): length of the second side - c (float): length of the third side Returns: - float: the area of the triangle if a <= 0 or b <= 0 or c <= 0: raise ValueError(\\"Side lengths should be positive numbers\\") s = (a + b + c) / 2 area = math.sqrt(s * (s - a) * (s - b) * (s - c)) return area"},{"question":"In this problem, you are required to create a function `draw_spiral` using Python, specifically leveraging functionality provided by the matplotlib and NumPy libraries. This function will generate a plot of a spiral. Here\'s the detailed specification of the function you need to implement: Function: `draw_spiral` - **Input**: None - **Output**: A matplotlib figure object representing a spiral with the following attributes: - The spiral should start at the origin (0, 0). - The spiral should have 5 full turns. - The radius should increase linearly with the angle, starting from 0 up to a maximum radius of 10. Instructions 1. Use the `numpy.linspace` function to create the angle array `theta` which goes from 0 to (10pi) (equivalent to 5 full turns). 2. Compute the corresponding radii as `r = 2 * theta`. 3. Convert the polar coordinates ((r, theta)) to Cartesian coordinates ((x, y)) using the formulas `x = r * np.cos(theta)` and `y = r * np.sin(theta)`. 4. Plot the spiral using matplotlib\'s `plt.plot(x, y)`. 5. Ensure the plot has labels for both the x and y axes and a title \\"Spiral Plot\\". 6. Return the resulting figure object. Your implementation must exclusively use the mentioned libraries: NumPy and Matplotlib.","solution":"import numpy as np import matplotlib.pyplot as plt def draw_spiral(): Generates a plot of a spiral that starts at the origin (0, 0), makes 5 full turns, and has a linearly increasing radius up to 10. Returns: fig (matplotlib.figure.Figure): The generated spiral plot. # Step 1: Create the angle array `theta` from 0 to 10*pi theta = np.linspace(0, 10 * np.pi, 1000) # Step 2: Compute the radii as `r = 2 * theta` r = 2 * theta # Step 3: Convert polar coordinates to Cartesian coordinates x = r * np.cos(theta) y = r * np.sin(theta) # Step 4: Plot the spiral fig, ax = plt.subplots() ax.plot(x, y) # Add labels and title ax.set_xlabel(\'x\') ax.set_ylabel(\'y\') ax.set_title(\'Spiral Plot\') # Step 5: Return the resulting figure object return fig"},{"question":"Design an algorithm to simulate a simplified stock price model and calculate the highest possible profit that could be made by buying and selling one share of the stock. The stock price model should generate random daily prices for a given number of days. Then, identify the maximum possible profit from a single buy-sell transaction within that period. The function should output with: int: The maximum possible profit from one buy-sell transaction. You should write self-contained code starting with: ``` import random def max_profit(days, min_price=1, max_price=100): ```","solution":"import random def max_profit(days, min_price=1, max_price=100): Simulates random daily stock prices and calculates the maximum profit that can be achieved by buying and selling one share of the stock. :param days: Number of days to simulate stock prices :param min_price: Minimum stock price (inclusive) :param max_price: Maximum stock price (inclusive) :return: Maximum possible profit from one buy-sell transaction if days < 2: return 0 # Not enough days to perform a buy and sell # Generate random daily stock prices prices = [random.randint(min_price, max_price) for _ in range(days)] # Initialize variables to track the minimum price and maximum profit min_price_so_far = prices[0] max_profit = 0 # Traverse through the list of prices to find the maximum profit for price in prices[1:]: profit = price - min_price_so_far if profit > max_profit: max_profit = profit if price < min_price_so_far: min_price_so_far = price return max_profit"},{"question":"``` import pandas as pd import random def task_func(num_students): if num_students <= 0: raise ValueError(\\"Number of students must be greater than zero.\\") names = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\", \\"Eva\\", \\"Fiona\\", \\"George\\", \\"Hannah\\", \\"Ivy\\", \\"Jack\\"] data = { \\"Name\\": [random.choice(names) for _ in range(num_students)], \\"Age\\": [random.randint(18, 25) for _ in range(num_students)], \\"Grade\\": [round(random.uniform(0, 100), 2) for _ in range(num_students)] } return pd.DataFrame(data) ``` The function should output with: pandas.DataFrame: A DataFrame containing the simulated coin flip data. You should write self-contained code starting with: ``` import pandas as pd import random def simulate_flips(n): ```","solution":"import pandas as pd import random def simulate_flips(n): Simulate n coin flips and return a DataFrame with the results. Parameters: n (int): Number of coin flips to simulate. Returns: pd.DataFrame: DataFrame containing the results of the coin flips. if n <= 0: raise ValueError(\\"Number of flips must be greater than zero.\\") results = { \\"Flip\\": [i + 1 for i in range(n)], \\"Result\\": [random.choice([\'Heads\', \'Tails\']) for _ in range(n)] } return pd.DataFrame(results)"},{"question":"You are required to implement a function called `rearrange_sentences` that takes a text string containing multiple sentences and rearranges them based on the total length of words in each sentence. The sentence with the shortest total length of words should come first, and the sentence with the longest total length of words should come last. Each sentence in the text string is separated by a period, and there could be multiple sentences in a string. A sentence is defined as a sequence of words separated by spaces. Words are sequences of letters or letter combinations without any punctuation. Here\'s a breakdown of the task: 1. **Split Text into Sentences**: The input text string should be split into individual sentences using the period `.` as a delimiter. 2. **Calculate Sentence Lengths**: For each sentence, calculate the total length of all its words. 3. **Rearrange Sentences**: Sort the sentences by their total word lengths in ascending order. 4. **Reconstruct the Text**: Combine the rearranged sentences back into a single text string with each sentence separated by a period. Implement the function `rearrange_sentences(text)` without using any external libraries. **Function Signature:** ```python def rearrange_sentences(text): pass ``` **Example Call:** ```python text = \\"I love programming. Coding is fun. A quick brown fox jumps over the lazy dog.\\" result = rearrange_sentences(text) print(result) ``` **Expected Output:** ```python \\"Coding is fun. I love programming. A quick brown fox jumps over the lazy dog.\\" ```","solution":"def rearrange_sentences(text): Rearranges sentences in a text based on the total length of words in each sentence. # Split the text into individual sentences sentences = text.split(\'.\') # Remove any extra spaces and filter out empty sentences sentences = [sentence.strip() for sentence in sentences if sentence.strip()] # Calculate the total length of words in each sentence sentence_lengths = [] for sentence in sentences: words = sentence.split() total_length = sum(len(word) for word in words) sentence_lengths.append((total_length, sentence)) # Sort the sentences by their total word lengths sentence_lengths.sort() # Extract the reordered sentences sorted_sentences = [sentence for length, sentence in sentence_lengths] # Reconstruct the text rearranged_text = \'. \'.join(sorted_sentences) + (\'.\' if sentences else \'\') return rearranged_text"},{"question":"** You are tasked with developing a function in Python that simulates adding time given two input times. This problem will help you gain proficiency with date and time operations in Python. The objective is to create a function named `add_time` that takes in two arguments, each representing a time duration specified as a string in the format \\"HH:MM\\". The function should compute the sum of these two time durations and return the resulting time also as a string in the format \\"HH:MM\\". # Detailed Specification Your function should meet the following requirements: 1. **Input**: - Two strings representing time durations in the format \\"HH:MM\\" where - \\"HH\\" is an integer between 00 and 23 (inclusive), representing hours. - \\"MM\\" is an integer between 00 and 59 (inclusive), representing minutes. 2. **Output**: - A single string representing the sum of the input time durations, also in the format \\"HH:MM\\". 3. **Logic**: - Parse the input strings to extract hours and minutes. - Sum the hours and minutes separately. - If the resulting minutes are equal to or greater than 60, convert them into hours. - If the resulting hours are equal to or greater than 24, adjust them to wrap around as if on a 24-hour clock. - Format the resulting time correctly, padding single digits with leading zeros if necessary. # Example ```python assert add_time(\\"12:45\\", \\"03:30\\") == \\"16:15\\" assert add_time(\\"23:15\\", \\"01:45\\") == \\"01:00\\" assert add_time(\\"00:00\\", \\"00:00\\") == \\"00:00\\" assert add_time(\\"10:50\\", \\"01:70\\") == \\"12:00\\" # Note the adjustment of 70 minutes ``` # Additional Note Consider edge cases where - The input strings are exactly at the boundary (e.g., \\"23:59\\" and \\"00:01\\"). - Handling potential overflow correctly (e.g., \\"23:00\\" and \\"02:00\\"). **Function Signature**: ```python def add_time(time1: str, time2: str) -> str: pass ```","solution":"def add_time(time1: str, time2: str) -> str: Adds two time durations given in the format \\"HH:MM\\" and returns the resulting time duration as a string in the format \\"HH:MM\\". # Parse the input times. h1, m1 = map(int, time1.split(\':\')) h2, m2 = map(int, time2.split(\':\')) # Calculate the total minutes and hours. total_minutes = m1 + m2 extra_hours = total_minutes // 60 final_minutes = total_minutes % 60 total_hours = h1 + h2 + extra_hours final_hours = total_hours % 24 # Adjust total hours to wrap around a 24-hour day. # Return the result formatted as \\"HH:MM\\". return f\\"{final_hours:02}:{final_minutes:02}\\""},{"question":"Write a Python function named `book_library_manager()` that manages a simple library system using the `csv` module. The function should perform the following tasks when called: 1. Check if a CSV file named `library.csv` exists in the current directory. This CSV file should contain book information with the columns: `Title`, `Author`, and `Year`. 2. If the file does not exist, prompt the user to input details for at least one book to create the library. Take input for the Title, Author, and Year of publication separately. Save this data into `library.csv` and inform the user that the library has been created. 3. If the file exists, read the contents using `csv.DictReader` and display the list of books in a user-friendly format. 4. After displaying the list, ask the user if they want to add a new book to the library. If the user agrees, prompt for the new book details and append it to the existing file. # Function Specification - **Function Name**: `book_library_manager` - **Parameters**: None - **Returns**: None - **Behavior**: - Use `csv.DictReader` to read data from `library.csv`. - If the file does not exist, prompt the user for book details and use `csv.DictWriter` to create and write data to `library.csv`. - Display existing books in a user-friendly format. - If the user opts to add a new book, update `library.csv` with the new entry. # Notes: - Assume each book entry has a unique title. - Assume users will input valid data for each field. ```python >>> book_library_manager() No library found. Let\'s add your first book. Title: To Kill a Mockingbird Author: Harper Lee Year: 1960 Thank you. Your library has been created. # If the file exists already >>> book_library_manager() Library contains: 1. Title: To Kill a Mockingbird, Author: Harper Lee, Year: 1960 Would you like to add a new book? (yes/no): yes Title: 1984 Author: George Orwell Year: 1949 Thank you. The book has been added to the library. ```","solution":"import csv import os def book_library_manager(): Manages a simple library system using a CSV file named \'library.csv\'. filename = \'library.csv\' if not os.path.isfile(filename): print(\\"No library found. Let\'s add your first book.\\") title = input(\\"Title: \\") author = input(\\"Author: \\") year = input(\\"Year: \\") with open(filename, mode=\'w\', newline=\'\') as file: fieldnames = [\'Title\', \'Author\', \'Year\'] writer = csv.DictWriter(file, fieldnames=fieldnames) writer.writeheader() writer.writerow({\'Title\': title, \'Author\': author, \'Year\': year}) print(\\"Thank you. Your library has been created.\\") else: with open(filename, mode=\'r\') as file: reader = csv.DictReader(file) books = list(reader) print(\\"Library contains:\\") for idx, book in enumerate(books, start=1): print(f\\"{idx}. Title: {book[\'Title\']}, Author: {book[\'Author\']}, Year: {book[\'Year\']}\\") add_new = input(\\"Would you like to add a new book? (yes/no): \\").strip().lower() if add_new == \'yes\': title = input(\\"Title: \\") author = input(\\"Author: \\") year = input(\\"Year: \\") with open(filename, mode=\'a\', newline=\'\') as file: writer = csv.DictWriter(file, fieldnames=[\'Title\', \'Author\', \'Year\']) writer.writerow({\'Title\': title, \'Author\': author, \'Year\': year}) print(\\"Thank you. The book has been added to the library.\\")"},{"question":"**Simulate a Simple Banking System using OOP** In this problem, you will create a simple banking system using Object-Oriented Programming (OOP) principles. The system should allow for: - Creating a new bank account. - Making deposits and withdrawals. - Checking the balance. - Transferring funds between accounts. You must implement a class `BankAccount` with the following specifications: # Class Specifications 1. **Class Name**: `BankAccount` 2. **Attributes**: - `account_number` (str): Unique identifier for the bank account. - `balance` (float): The current balance in the account. 3. **Methods**: - `__init__(self, account_number: str, initial_balance: float = 0.0)`: Constructor to initialize a new bank account with the provided account number and initial balance. - `deposit(self, amount: float) -> None`: Method to deposit the specified amount into the account. - `withdraw(self, amount: float) -> bool`: Method to withdraw the specified amount from the account. Returns `True` if the withdrawal was successful (sufficient balance), otherwise returns `False`. - `get_balance(self) -> float`: Method to get the current balance of the account. - `transfer(self, target_account: \'BankAccount\', amount: float) -> bool`: Method to transfer the specified amount from the current account to the target account. Returns `True` if the transfer was successful (sufficient balance), otherwise returns `False`. # Example Usage ```python # Create two bank accounts account1 = BankAccount(\'123ABC\', 1000.0) account2 = BankAccount(\'456DEF\', 500.0) # Deposit money into account1 account1.deposit(200.0) # Withdraw money from account2 if account2.withdraw(100.0): print(\\"Withdrawal successful!\\") else: print(\\"Insufficient funds!\\") # Transfer money from account1 to account2 if account1.transfer(account2, 300.0): print(\\"Transfer successful!\\") else: print(\\"Insufficient funds for transfer!\\") # Print balances print(account1.get_balance()) # Expected Output: 900.0 print(account2.get_balance()) # Expected Output: 700.0 ``` # Requirements: 1. Implement all the specified methods in the `BankAccount` class. 2. Include appropriate error handling and validation to ensure that no invalid transactions can be performed (e.g., withdrawing more than the current balance). # Notes: 1. A `BankAccount` instance initiates with a specified `account_number` and an optional `initial_balance` (default is 0.0). 2. The `transfer` method should validate that the amount to be transferred is available in the source account before completing the transaction. # Assumptions: 1. The initial balance for new accounts can be zero or a positive float. 2. All monetary amounts are represented as floats.","solution":"class BankAccount: def __init__(self, account_number: str, initial_balance: float = 0.0): self.account_number = account_number self.balance = initial_balance def deposit(self, amount: float) -> None: if amount > 0: self.balance += amount else: raise ValueError(\\"Deposit amount must be positive\\") def withdraw(self, amount: float) -> bool: if amount > 0 and self.balance >= amount: self.balance -= amount return True elif amount <= 0: raise ValueError(\\"Withdrawal amount must be positive\\") else: return False def get_balance(self) -> float: return self.balance def transfer(self, target_account: \'BankAccount\', amount: float) -> bool: if amount > 0 and self.balance >= amount: self.balance -= amount target_account.deposit(amount) return True elif amount <= 0: raise ValueError(\\"Transfer amount must be positive\\") else: return False"},{"question":"You are working on a service that provides real-time weather updates. To ensure your data remains accurate, you must regularly analyze the temperature readings from various sensors across the city for potential malfunctions. You need to write a function named `detect_sensor_anomalies` that meets the following specifications: 1. **Parameters**: - `sensor_data` (dict): A dictionary where keys are sensor names (strings) and values are lists of temperature readings (floats). For example, `{\'sensor_1\': [22.1, 22.3, 22.1, 22.8, 22.1], \'sensor_2\': [19.0, 19.0, 19.0, 19.0, 19.0], ...}`. - `threshold` (float): A threshold value indicating the maximum allowed standard deviation for the sensor readings. 2. **Functionality**: - Analyze the temperature readings to compute the standard deviation of readings for each sensor. - Identify sensors whose standard deviation exceeds the provided threshold. - Return a list of sensor names that have readings with higher variability than the allowed threshold. 3. **Requirements**: - Use Python\'s `statistics` module to compute the standard deviation. - Ensure the function is efficient and handles large datasets. Here is a simple example of how the function might be called: ```python sensor_data = { \'sensor_1\': [22.1, 22.3, 22.1, 22.8, 22.1], \'sensor_2\': [19.0, 19.0, 19.0, 19.0, 19.0], ... } threshold = 0.1 anomalous_sensors = detect_sensor_anomalies(sensor_data, threshold) # Output: [\'sensor_1\'] ```","solution":"import statistics def detect_sensor_anomalies(sensor_data, threshold): Detects sensors with anomalies based on the standard deviation of their temperature readings. Parameters: - sensor_data (dict): A dictionary where keys are sensor names (strings) and values are lists of temperature readings (floats). - threshold (float): A threshold value indicating the maximum allowed standard deviation for the sensor readings. Returns: - list: A list of sensor names with readings that have higher variability than the allowed threshold. anomalous_sensors = [] for sensor, readings in sensor_data.items(): if len(readings) > 1: # Ensure there are enough readings to compute standard deviation stddev = statistics.stdev(readings) if stddev > threshold: anomalous_sensors.append(sensor) return anomalous_sensors"},{"question":"You are required to implement a function called `sum_triplets` that finds all unique triplets in the list `nums` which give the sum of zero. - Function name: `sum_triplets` - Parameters: - `nums` (list of int): A list of integers. Your function should return a list of lists, where each inner list contains three integers that sum up to zero. Each triplet should be sorted in ascending order and the list of triplets should not contain any duplicate triplets. Here are the detailed requirements: 1. The triplets in the output should be sorted in ascending order. 2. Each of the triplets should be unique, i.e., no two triplets should have the same set of elements. 3. The input list may contain both positive and negative numbers, as well as duplicates. Example: ```python sum_triplets([-1, 0, 1, 2, -1, -4]) ``` Expected Output: ```python [[-1, -1, 2], [-1, 0, 1]] ``` Considerations: - Be mindful of the time complexity of your solution. - Utilize sorting and the two-pointer technique to achieve an efficient implementation.","solution":"def sum_triplets(nums): nums.sort() n = len(nums) triplets = [] for i in range(n): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == 0: triplets.append([nums[i], nums[left], nums[right]]) left += 1 right -= 1 while left < right and nums[left] == nums[left - 1]: left += 1 while left < right and nums[right] == nums[right + 1]: right -= 1 elif current_sum < 0: left += 1 else: right -= 1 return triplets"},{"question":"In this problem, you need to create a function `organize_words` that takes a list of words and organizes them into categories based on their lengths. The function should return a dictionary where each key is a word length and the corresponding value is a list of words of that length, sorted in alphabetical order. The function should follow these requirements: 1. If the input list is empty, return an empty dictionary. 2. All words in the output lists should be sorted in alphabetical order. Example: For `words = [\\"apple\\", \\"bee\\", \\"cat\\", \\"bat\\", \\"dog\\", \\"elephant\\"]`, the function should return: ```python { 3: [\\"bat\\", \\"bee\\", \\"cat\\", \\"dog\\"], 5: [\\"apple\\"], 8: [\\"elephant\\"] } ``` Function signature: ```python def organize_words(words: List[str]) -> Dict[int, List[str]]: ```","solution":"from typing import List, Dict def organize_words(words: List[str]) -> Dict[int, List[str]]: Organizes words into categories based on their lengths. Args: words (List[str]): List of words to be organized. Returns: Dict[int, List[str]]: Dictionary with keys as word lengths and values as lists of words of that length, sorted alphabetically. if not words: return {} length_dict = {} for word in words: word_length = len(word) if word_length not in length_dict: length_dict[word_length] = [] length_dict[word_length].append(word) for length in length_dict: length_dict[length].sort() return length_dict"},{"question":"Fetch data from a public GitHub repository, extract specific file names and their sizes using regular expressions, and save the extracted information to a CSV file. The function should output with: str: The path to the saved CSV file. You should write self-contained code starting with: ``` import csv import re import requests from urllib.parse import urljoin # Constants REPO_URL = \'https://api.github.com/repos/user/repo/contents/\' EXTRACT_FIELDS = [\'name\', \'size\'] CSV_FILE = \'repo_file_data.csv\' def extract_file_data(repo_url=REPO_URL, csv_file_path=CSV_FILE): ```","solution":"import csv import re import requests from urllib.parse import urljoin # Constants REPO_URL = \'https://api.github.com/repos/user/repo/contents/\' EXTRACT_FIELDS = [\'name\', \'size\'] CSV_FILE = \'repo_file_data.csv\' def extract_file_data(repo_url=REPO_URL, csv_file_path=CSV_FILE): Fetch data from a GitHub repository and extract specific file names and their sizes using regular expressions. Save the extracted information to a CSV file and return the CSV file path. Args: repo_url (str): The URL of the GitHub repository\'s contents API. csv_file_path (str): The path to save the extracted data in the CSV file. Returns: str: The path to the saved CSV file. response = requests.get(repo_url) response.raise_for_status() contents = response.json() extracted_data = [] for item in contents: if \'name\' in item and \'size\' in item: extracted_data.append({ \'name\': item[\'name\'], \'size\': item[\'size\'] }) with open(csv_file_path, mode=\'w\', newline=\'\') as csv_file: writer = csv.DictWriter(csv_file, fieldnames=EXTRACT_FIELDS) writer.writeheader() for data in extracted_data: writer.writerow(data) return csv_file_path"},{"question":"Implement a function `find_frequent_elements(lst: List[int], m: int) -> List[int]` that finds all the elements in the list that appear more than m times. Specifically, the function should: 1. Utilize a `Counter` from the `collections` module to count the frequency of each element. 2. Identify and return a list of elements that appear more than `m` times in the input list `lst`. # Input: - `lst`: A list of integers where ( 1 leq text{len(lst)} leq 10^5 ) and each integer in the list is between ( 1 leq text{lst[i]} leq 10^4 ). - `m`: An integer ( 0 leq m leq 10^5 ). # Output: - A list of integers which appear more than `m` times in the input list `lst`. The output list should be sorted in ascending order. # Example: ```python # Example Input lst = [1, 2, 3, 1, 2, 1, 3, 3, 3, 4] m = 2 # Example Output ans = find_frequent_elements(lst, m) print(ans) # Expected output is [1, 3] since 1 appears 3 times and 3 appears 4 times ``` # Constraints: - Utilize the `Counter` from the `collections` module to obtain frequency counts. - Ensure the function is optimized to handle the upper constraint on the length of the list efficiently. # Important Notes: - The function should be named `find_frequent_elements` and should accept a list of integers `lst` and an integer `m` as its parameters. - The return list should be sorted in ascending order. If no elements meet the frequency condition, return an empty list.","solution":"from typing import List from collections import Counter def find_frequent_elements(lst: List[int], m: int) -> List[int]: Finds all elements in the list that appear more than m times. Parameters: lst (List[int]): A list of integers. m (int): An integer representing the minimum number of occurrences. Returns: List[int]: A sorted list of elements that appear more than m times. # Use Counter to get the frequency of each element freq_counter = Counter(lst) # Filter elements that appear more than m times and sort them result = [element for element, count in freq_counter.items() if count > m] # Return the sorted list of frequent elements return sorted(result)"},{"question":"You need to create a function `count_islands(matrix: List[List[int]]) -> int` that counts the number of islands in a given 2D matrix. An island is formed by a group of horizontally or vertically adjacent `1`s (cells with value `1`), surrounded by water (cells with value `0`). The function should process the matrix and return the total count of distinct islands. An island is considered distinct if it is separated by water (0s) in all four directions from other islands. Use depth-first search (DFS) or breadth-first search (BFS) to navigate and mark the visited cells in the matrix to ensure they are not counted multiple times. **Function Signature:** ```python def count_islands(matrix: List[List[int]]) -> int: # Your code here ``` **Example:** Given the following matrix: ```python matrix = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ] ``` Calling `count_islands(matrix)` should return `3`, as there are three distinct islands in the matrix. Note: - You can assume the given matrix will have at least one cell. - The matrix will contain only `0`s and `1`s.","solution":"def count_islands(matrix): if not matrix: return 0 def dfs(matrix, visited, i, j): if i < 0 or j < 0 or i >= len(matrix) or j >= len(matrix[0]) or matrix[i][j] == 0 or visited[i][j]: return visited[i][j] = True dfs(matrix, visited, i + 1, j) dfs(matrix, visited, i - 1, j) dfs(matrix, visited, i, j + 1) dfs(matrix, visited, i, j - 1) visited = [[False for _ in range(len(matrix[0]))] for _ in range(len(matrix))] island_count = 0 for i in range(len(matrix)): for j in range(len(matrix[0])): if matrix[i][j] == 1 and not visited[i][j]: dfs(matrix, visited, i, j) island_count += 1 return island_count"},{"question":"You are required to implement a function in Python that simulates Conway\'s Game of Life for a given number of steps. The grid representing the game state cells is a numpy array, where live cells are represented by 1s and dead cells are represented by 0s. Write a function named `game_of_life` which adheres strictly to the requirements provided below: # Input: 1. **board**: A numpy ndarray with shape `(m, n)` where: - `m` is the number of rows. - `n` is the number of columns. 2. **steps**: An integer representing the number of iterations the game should run. # Output: - A numpy ndarray representing the state of the board after the specified number of steps. # Rules of the Game: 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by overpopulation. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. # Instructions: 1. Implement the rules of the game in your function. 2. You can only use `numpy` to manipulate and iterate over the board. 3. Optimize your function to handle large boards efficiently. # Example: Given the following: ```python import numpy as np board = np.array([ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ]) steps = 1 ``` Your function should return the board state after 1 step of Conway\'s Game of Life. ```python def game_of_life(board, steps): # Your implementation here pass ```","solution":"import numpy as np def game_of_life(board, steps): Simulates Conway\'s Game of Life for a given number of steps. Parameters: board (numpy.ndarray): 2D array representing the initial state of the board. steps (int): Number of iterations the game should run. Returns: numpy.ndarray: Board state after the specified number of steps. rows, cols = board.shape def get_neighbors_count(board, x, y): count = np.sum(board[max(0, x-1):min(x+2, rows), max(0, y-1):min(y+2, cols)]) - board[x, y] return count for _ in range(steps): new_board = board.copy() for r in range(rows): for c in range(cols): live_neighbors = get_neighbors_count(board, r, c) if board[r, c] == 1: if live_neighbors < 2 or live_neighbors > 3: new_board[r, c] = 0 else: if live_neighbors == 3: new_board[r, c] = 1 board = new_board return board"},{"question":"You are given a function called `get_user_data`, which fetches user data in the form of a list of dictionaries from an external source. Each dictionary contains details like `name`, `age`, and `membership_status`. Your task is to write a function named `update_membership_status` that updates the membership status of users based on their age. The membership status should be updated as follows: 1. If the user\'s age is 18 or above, the membership status should be set to `\\"active\\"`. 2. If the user\'s age is below 18, the membership status should be `\\"inactive\\"`. Additionally, save the updated user data to a JSON formatted file named `updated_users.json` using the `json.dump` method. Function Signature ```python def update_membership_status(users: list) -> None: pass ``` Parameters - `users` (list): A list of user dictionaries, where each dictionary contains keys like `name`, `age`, and `membership_status`. Requirements 1. Update the membership status for each user based on their age as described. 2. Save the updated list of users to `updated_users.json` using `json.dump` with human-readable formatting. 3. Ensure that the JSON file is saved with an appropriate indentation level and that the keys are not sorted. Here\'s an example of how the function might be used: ```python users_data = [ {\\"name\\": \\"Alice\\", \\"age\\": 20, \\"membership_status\\": \\"\\"}, {\\"name\\": \\"Bob\\", \\"age\\": 17, \\"membership_status\\": \\"\\"} ] update_membership_status(users_data) # The output of the JSON file `updated_users.json` should have the updated membership statuses: # [ # {\\"name\\": \\"Alice\\", \\"age\\": 20, \\"membership_status\\": \\"active\\"}, # {\\"name\\": \\"Bob\\", \\"age\\": 17, \\"membership_status\\": \\"inactive\\"} # ] ```","solution":"import json def update_membership_status(users: list) -> None: Updates the membership status of users based on their age and saves the data to a JSON file. If the user\'s age is 18 or above, the membership status is set to \\"active\\". If the user\'s age is below 18, the membership status is set to \\"inactive\\". Args: users (list): A list of user dictionaries, each containing \'name\', \'age\' and \'membership_status\'. for user in users: if user[\'age\'] >= 18: user[\'membership_status\'] = \'active\' else: user[\'membership_status\'] = \'inactive\' with open(\'updated_users.json\', \'w\') as file: json.dump(users, file, indent=4)"},{"question":"You need to write a function `find_highest_earning_month(sales_data)` that processes a given dictionary containing sales data and identifies the month with the highest earnings. The dictionary keys represent month names, and the values are lists of integers indicating daily sales amounts for that month. Your objective is to: 1. Iterate over each month in the sales data. 2. Calculate the total sales for each month. 3. Determine the month with the highest total sales. The function should then return the name of the month that has the highest total sales. Function signature: ```python def find_highest_earning_month(sales_data: dict) -> str: # Code logic goes here ``` # Input: - `sales_data` (dict): A dictionary where keys are month names (str) and values are lists of integers representing daily sales amounts for that month. # Output: - (str): The name of the month with the highest total sales. # Example: ```python sales_data = { \\"January\\": [200, 450, 234, 543, 678, 123, 400], \\"February\\": [150, 678, 901, 234, 123, 789, 345], \\"March\\": [800, 430, 120, 970, 560, 340, 220] } print(find_highest_earning_month(sales_data)) ``` Expected output: ``` \\"March\\" ``` # Constraints: - You can assume the dictionary contains exactly 12 months, and each month contains a list of 28 to 31 integers representing daily sales. # Hints: - Use list comprehension or the `sum()` function to calculate the total sales for each month. - Make use of dictionaries and their methods to keep track of the month with the maximum sales.","solution":"def find_highest_earning_month(sales_data): Finds the month with the highest total sales from the given sales data. Args: sales_data (dict): A dictionary where keys are month names and values are lists of daily sales amounts. Returns: str: The name of the month with the highest total sales. highest_earning_month = None highest_sales = -float(\'inf\') for month, sales in sales_data.items(): total_sales = sum(sales) if total_sales > highest_sales: highest_sales = total_sales highest_earning_month = month return highest_earning_month"},{"question":"Generate a list of dictionaries containing random data representing student test scores across multiple subjects and visualize the distribution of scores for a selected subject using a box plot. Use the random module to generate the scores, and Matplotlib to create the visualization. The function should output: matplotlib.figure.Figure: A figure object that contains the box plot of test score distribution for the selected subject. You should write self-contained code starting with: ``` import random import matplotlib.pyplot as plt def task_func(num_students, subjects, selected_subject, seed=None): ```","solution":"import random import matplotlib.pyplot as plt def task_func(num_students, subjects, selected_subject, seed=None): if seed is not None: random.seed(seed) # Generate random scores for each student student_data = [] for _ in range(num_students): student_scores = {subject: random.randint(0, 100) for subject in subjects} student_data.append(student_scores) # Extract scores for the selected subject selected_subject_scores = [student[selected_subject] for student in student_data] # Create a box plot for the selected subject scores fig, ax = plt.subplots() ax.boxplot(selected_subject_scores) ax.set_title(f\\"Distribution of Scores for {selected_subject}\\") ax.set_ylabel(\'Scores\') ax.set_xticklabels([selected_subject]) return fig # Example use case: # fig = task_func(100, [\\"Math\\", \\"Science\\", \\"English\\"], \\"Math\\", seed=42) # plt.show()"},{"question":"You are tasked with implementing a function that finds the longest subsequence in a given list of integers such that the subsequence is strictly increasing. This problem is a modified version of the classic Longest Increasing Subsequence (LIS) problem, where the sequence should strictly increase at each step. # Function Signature ```python def longest_increasing_subsequence(nums): Find the longest strictly increasing subsequence in the list of integers. Parameters ---------- nums : list of int List of integers. Returns ------- lis : list of int The longest strictly increasing subsequence. ``` # Parameters: - `nums`: This is a one-dimensional list of integers. # Returns: - `lis`: The longest strictly increasing subsequence. # Example: Consider the list `nums = [10, 22, 9, 33, 21, 50, 41, 60, 80]`. The longest strictly increasing subsequence in this list is `[10, 22, 33, 50, 60, 80]`. # Requirements: You are required to use the following NumPy functions: - `numpy.array` - `numpy.zeros` - `numpy.argmax` # Hints: - Use Dynamic Programming approach to keep track of the longest increasing subsequence ending at each element. - Use an auxiliary array to store the length of the LIS up to each element. - Construct the LIS by backtracking from the maximum value in the auxiliary array to the beginning of the list.","solution":"import numpy as np def longest_increasing_subsequence(nums): Find the longest strictly increasing subsequence in the list of integers. Parameters ---------- nums : list of int List of integers. Returns ------- lis : list of int The longest strictly increasing subsequence. if not nums: return [] n = len(nums) lengths = np.zeros(n, dtype=int) predecessors = np.full(n, -1, dtype=int) lengths[0] = 1 for i in range(1, n): max_length = 0 for j in range(i): if nums[i] > nums[j] and lengths[j] > max_length: max_length = lengths[j] predecessors[i] = j lengths[i] = max_length + 1 # Find the index of the maximum value in lengths max_index = np.argmax(lengths) # Reconstruct the LIS by backtracking lis = [] while max_index != -1: lis.append(nums[max_index]) max_index = predecessors[max_index] return lis[::-1]"},{"question":"You are required to implement a function `consistent_strings_count(allowed, words)` that counts the number of consistent strings in a given list of words. A string is consistent if and only if all characters in the string appear in the allowed string. For this task, you will use set operations to determine if a word is consistent with the allowed characters. Here is a step-by-step process you should follow: 1. Convert the `allowed` string into a set of characters. 2. Iterate through the list of words, checking if each word\'s characters are in the allowed set. 3. Count the number of words that satisfy this condition. 4. Return the count of consistent strings. # Example ```python allowed = \\"abc\\" words = [\\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"ac\\", \\"bc\\", \\"abc\\", \\"abcd\\", \\"abca\\"] consistent_strings_count(allowed, words) # Output: 7 ``` # Constraints - `allowed` will be a string of lowercase English letters. - `words` will be a list of strings, each consisting of lowercase English letters. - The length of `allowed` will be between 1 and 26 inclusive. - The length of `words` will be between 1 and 1000 inclusive. - The length of each word in `words` will be between 1 and 10 inclusive. # Function Signature ```python def consistent_strings_count(allowed: str, words: list) -> int: pass ``` # Expected Steps - Convert the `allowed` string to a set. - Use a loop to iterate through the words. - Check if each word is consistent using set operations. - Count and return the consistent words. # Required Libraries - None # Solution Hints - Utilize Python sets to achieve efficient membership testing. - Use set operations such as subset checks to determine consistency.","solution":"def consistent_strings_count(allowed: str, words: list) -> int: Count the number of consistent strings in a list of words. A string is consistent if all characters in the string appear in the allowed string. allowed_set = set(allowed) count = 0 for word in words: if set(word).issubset(allowed_set): count += 1 return count"},{"question":"You are required to create a function called `detect_palindromes` that takes a list of strings and returns a new list containing only the palindromic strings from the original list. A palindromic string is one that reads the same backward as forward, ignoring case and non-alphanumeric characters. The function should adhere to the following steps: 1. Ignore case and non-alphanumeric characters in the comparison. 2. Return a list of strings that are palindromes from the original list. The function signature should be: ```python def detect_palindromes(strings): pass # Example: # Input: [\\"Madam\\", \\"Hello\\", \\"A man, a plan, a canal, Panama\\", \\"No lemon, no melon\\"] # Output: [\\"Madam\\", \\"A man, a plan, a canal, Panama\\", \\"No lemon, no melon\\"] ```","solution":"import re def is_palindrome(s): s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() return s == s[::-1] def detect_palindromes(strings): Returns a list of palindromic strings from the input list. return [s for s in strings if is_palindrome(s)]"},{"question":"In this problem, you are required to implement a Python function that identifies and returns the longest contiguous subarray of strictly increasing integers from a given list. The function should also handle edge cases where the list might be empty or contain only one element. Below is a detailed description of the function you need to implement: # Function Signature ```python def longest_increasing_subarray(arr): Returns the longest contiguous subarray of strictly increasing integers. Parameters: - arr (list of int): The list of integers to analyze. Returns: - list of int: The longest contiguous subarray in which every element is strictly larger than the preceding element. ``` # Requirements 1. **Input Handling:** - Handle cases where the array `arr` is empty or has only one element by returning the array itself. 2. **Identifying Increasing Subarray:** - Traverse the array and identify all contiguous subarrays where each element is strictly larger than the preceding element. - Track the start and end indices of the longest such subarray found during the traversal. 3. **Output:** - Return the longest contiguous subarray of strictly increasing integers. - In case there are multiple subarrays of the same maximum length, return the first one encountered. 4. **Complexity:** - Aim to implement the solution with a time complexity of O(n), where n is the length of the input array. # Example Usage Here are some example usages of the function: ```python # Example 1: A regular case with multiple increasing subarrays arr = [1, 2, 1, 2, 3, 4, 1, 2, 3] print(longest_increasing_subarray(arr)) # Output: [1, 2, 3, 4] # Example 2: Single element array arr = [5] print(longest_increasing_subarray(arr)) # Output: [5] # Example 3: Empty array arr = [] print(longest_increasing_subarray(arr)) # Output: [] # Example 4: Entire array is strictly increasing arr = [1, 2, 3, 4, 5] print(longest_increasing_subarray(arr)) # Output: [1, 2, 3, 4, 5] # Example 5: No strictly increasing subarray longer than 1 arr = [5, 4, 3, 2, 1] print(longest_increasing_subarray(arr)) # Output: [5] ``` **Note:** Ensure you handle various edge cases, such as arrays with repeated elements or descending sequences.","solution":"def longest_increasing_subarray(arr): Returns the longest contiguous subarray of strictly increasing integers. Parameters: - arr (list of int): The list of integers to analyze. Returns: - list of int: The longest contiguous subarray in which every element is strictly larger than the preceding element. if not arr: return [] if len(arr) == 1: return arr max_len = 1 max_start = 0 current_start = 0 current_len = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_len += 1 else: if current_len > max_len: max_len = current_len max_start = current_start current_start = i current_len = 1 if current_len > max_len: max_len = current_len max_start = current_start return arr[max_start:max_start + max_len]"},{"question":"You have been provided with a grid-based map of city blocks, where some blocks contain gold deposits. Your goal is to implement a function that finds the maximum amount of gold that can be collected following a specific movement pattern. You are allowed to start collecting gold from any cell that contains gold, and you can only move up, down, left, or right to an adjacent cell. You are not allowed to visit the same cell more than once in a single collection attempt. # Instructions: 1. **Function Name**: `max_gold` 2. **Function Arguments**: - `grid`: A 2D list of integers representing the map of city blocks, where each integer indicates the amount of gold in that block. A value of 0 means that block has no gold. 3. **Returns**: - An integer representing the maximum amount of gold that can be collected. 4. **Description**: - Implement a depth-first search (DFS) algorithm to explore all potential paths starting from each cell that contains gold. - Track the maximum amount of gold collected during each path traversal. - For each cell, you calculate the sum of gold collected while ensuring no cell is visited more than once in the same path. - Consider edge cases where the grid may be empty or contain no gold deposits. # Example: Given the following grid: ``` grid = [ [1, 0, 7], [2, 0, 6], [3, 4, 5] ] ``` The function call `max_gold(grid)` should return `28`, which is the maximum gold that can be collected by starting at the cell (2, 0) and following the path: (2, 0) -> (2, 1) -> (2, 2) -> (1, 2) -> (0, 2). # Requirements: - You must implement an efficient DFS algorithm and handle the constraints and edge cases appropriately. Write the function `max_gold` using the specifications provided.","solution":"def max_gold(grid): if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) max_gold_collected = 0 def dfs(r, c, current_gold): nonlocal max_gold_collected current_gold += grid[r][c] max_gold_collected = max(max_gold_collected, current_gold) original_value = grid[r][c] grid[r][c] = 0 # mark as visited for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: # up, down, left, right nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] > 0: dfs(nr, nc, current_gold) grid[r][c] = original_value # unmark for i in range(rows): for j in range(cols): if grid[i][j] > 0: dfs(i, j, 0) return max_gold_collected"},{"question":"You are to implement a function that converts a given amount in dollars into the minimum number of U.S. coins needed to make up that amount. The U.S. coins considered should only be quarters (25 cents), dimes (10 cents), nickels (5 cents), and pennies (1 cent). # Function Signature ```python def minimum_coins(amount: float) -> dict: ``` # Parameters - `amount` (float): The input amount in dollars that needs to be converted into coins. # Returns - `dict`: A dictionary with the keys `\'quarters\'`, `\'dimes\'`, `\'nickels\'`, and `\'pennies\'`, representing the minimum number of each type of coin needed to make up the given amount. # Example Usage ```python print(minimum_coins(3.79)) # Output: {\'quarters\': 15, \'dimes\': 0, \'nickels\': 0, \'pennies\': 4} print(minimum_coins(0.99)) # Output: {\'quarters\': 3, \'dimes\': 2, \'nickels\': 0, \'pennies\': 4} ``` # Constraints 1. The `amount` will be a non-negative float. 2. The function should return a dictionary containing the minimum number of each type of coin required to make up the given amount. 3. Use integer arithmetic to avoid floating-point precision issues.","solution":"def minimum_coins(amount: float) -> dict: Converts a given amount in dollars into the minimum number of U.S. coins needed to make up that amount. The U.S. coins considered are quarters (25 cents), dimes (10 cents), nickels (5 cents), and pennies (1 cent). Parameters: amount (float): The input amount in dollars that needs to be converted into coins. Returns: dict: A dictionary representing the minimum number of each type of coin needed to make up the given amount. # Convert the amount to cents to avoid floating-point precision issues cents = int(round(amount * 100)) coins = { \'quarters\': 0, \'dimes\': 0, \'nickels\': 0, \'pennies\': 0 } coins[\'quarters\'], cents = divmod(cents, 25) coins[\'dimes\'], cents = divmod(cents, 10) coins[\'nickels\'], cents = divmod(cents, 5) coins[\'pennies\'] = cents return coins"},{"question":"You are tasked with generating possible words from a given set of characters with an exact length of k. The generated words do not need to be valid dictionary words. Your goal is to write a function named `generate_words` that takes two inputs: a string of characters and an integer k, and returns a list of all possible words of exact length k that can be formed from the given characters. The characters can be used multiple times. # Function Signature ```python def generate_words(characters: str, k: int) -> List[str]: pass ``` # Input - `characters`: a string consisting of unique characters. - `k`: an integer, representing the exact length each generated word should have. # Output - A list of strings representing all possible words of length k formed from the given characters. # Example ```python generate_words(\'abc\', 2) # Output: [\'aa\', \'ab\', \'ac\', \'ba\', \'bb\', \'bc\', \'ca\', \'cb\', \'cc\'] generate_words(\'xy\', 3) # Output: [\'xxx\', \'xxy\', \'xyx\', \'xyy\', \'yxx\', \'yxy\', \'yyx\', \'yyy\'] ``` # Constraints - The length of the input string shall not exceed 10. - The value of k will be between 1 and 10 inclusive. - You can assume the input string will only contain lowercase alphabetic characters and will not be empty. - All characters in the input string are unique. # Detailed Description 1. **Exact Length Generation**: Ensure that each generated word has the exact length k specified in the inputs. 2. **Character Repetition Allowed**: You can use the same character multiple times in generating different words. 3. **Output Order**: The order of words in the output list does not matter. 4. **Efficiency Consideration**: Aim to find a solution that efficiently generates the required words even if k is at its maximum possible value given the constraints.","solution":"from itertools import product from typing import List def generate_words(characters: str, k: int) -> List[str]: Generate all possible words of length k from given characters, allowing repeated usage of characters. Args: characters (str): A string of unique characters. k (int): The target length of the generated words. Returns: List[str]: A list of generated words of exact length k. return [\'\'.join(p) for p in product(characters, repeat=k)]"},{"question":"You are tasked with implementing a function to normalize the values in a numpy array. Normalization is an essential preprocessing step in many machine learning algorithms to ensure that the scale of the data does not bias the learning process. Function Signature: ```python def normalize_array(arr): ``` Parameters: - `arr`: A 1D numpy array of shape (n,) where `n` is the number of elements in the array. The values can be positive, negative, or zero. Returns: - `normalized_arr`: A 1D numpy array of shape (n,) where each element is the normalized value of the original array. The normalization should scale the values such that the minimum value becomes 0 and the maximum value becomes 1. Task: 1. Implement the function `normalize_array` that normalizes the input array as described above. 2. Use the following normalization formula: [ text{normalized_value} = frac{text{value} - text{min_value}}{text{max_value} - text{min_value}} ] where: - `value` is an element from the original array. - `min_value` is the minimum value in the original array. - `max_value` is the maximum value in the original array. # Example: ```python import numpy as np arr = np.array([1, 2, 3, 4, 5]) normalized_arr = normalize_array(arr) print(normalized_arr) # This should print [0. 0.25 0.5 0.75 1. ] ``` # Note: - Ensure you handle the case when `max_value` is equal to `min_value` to avoid division by zero errors. - Make efficient use of NumPy operations to maintain performance.","solution":"import numpy as np def normalize_array(arr): Normalizes the input array such that the minimum value becomes 0 and the maximum value becomes 1. Parameters: arr (numpy.ndarray): A 1D numpy array of shape (n,) Returns: numpy.ndarray: A 1D numpy array of normalized values. min_value = np.min(arr) max_value = np.max(arr) if max_value == min_value: # Avoid division by zero by returning a zero array if all elements are the same return np.zeros_like(arr) return (arr - min_value) / (max_value - min_value)"},{"question":"You are tasked with creating a function named `longest_sublist_no_repeat` that finds the longest contiguous sublist in a given list of integers where all elements are unique. The function should return the longest sublist found. **Function Signature** ```python def longest_sublist_no_repeat(lst: list) -> list: pass ``` **Parameters** - `lst` (list): A list of integers. **Returns** - `list`: A list of integers representing the longest contiguous sublist with all unique elements. **Constraints** - The list has at most 1000 elements. - The elements in the list are integers in the range -10^5 to 10^5. - If there are multiple sublists of the same maximum length, return the first one encountered. **Example** ```python lst = [1, 2, 3, 1, 2, 3, 4, 5] result = longest_sublist_no_repeat(lst) print(result) # Expected output: [1, 2, 3, 4, 5] lst = [4, 4, 4, 4, 4] result = longest_sublist_no_repeat(lst) print(result) # Expected output: [4] lst = [1, 2, 3, 4, 2, 2] result = longest_sublist_no_repeat(lst) print(result) # Expected output: [1, 2, 3, 4] ``` **Tasks** 1. Implement the `longest_sublist_no_repeat` function to find the longest contiguous sublist with unique elements. 2. Ensure the function efficiently traverses the list and keeps track of unique elements. 3. Handle cases where the list contains repeated elements consecutively or non-consecutively. 4. Return the first longest sublist encountered in case of multiple sublists with the same maximum length.","solution":"def longest_sublist_no_repeat(lst): Returns the longest contiguous sublist with unique elements from the given list. n = len(lst) if n == 0: return [] start, end = 0, 0 max_len = 0 max_sublist = [] lookup = {} while end < n: if lst[end] in lookup and lookup[lst[end]] + 1 > start: start = lookup[lst[end]] + 1 lookup[lst[end]] = end if end - start + 1 > max_len: max_len = end - start + 1 max_sublist = lst[start:end + 1] end += 1 return max_sublist"},{"question":"You are tasked to analyze a log file and extract key information. The log file consists of multiple lines, each representing a single entry with a timestamp, log level (INFO, ERROR, WARNING), and a message. Each line follows a specific format: ``` [TIMESTAMP] [LEVEL] [MESSAGE] ``` Your goal is to write a function `parse_log_file` that reads in a log file and returns a dictionary with log levels as keys and lists of corresponding messages as values. The dictionary should contain three keys: \'INFO\', \'ERROR\', and \'WARNING\'. Each key should hold a list that includes only the messages of that log level. **Function signature:** ```python def parse_log_file(file_path: str) -> dict: pass ``` # Example Assuming the log file at `file_path` contains the following lines: ``` [2023-10-01 12:00:00] [INFO] Application started [2023-10-01 12:01:00] [ERROR] Failed to connect to database [2023-10-01 12:02:00] [INFO] User logged in [2023-10-01 12:03:00] [WARNING] Disk space low ``` Running the function as: ```python log_dict = parse_log_file(\\"path_to_log_file.log\\") print(log_dict) ``` Expected output: ``` { \'INFO\': [\'Application started\', \'User logged in\'], \'ERROR\': [\'Failed to connect to database\'], \'WARNING\': [\'Disk space low\'] } ``` **Notes:** - Handle different log levels (INFO, ERROR, WARNING) as specified, ignoring any other levels if present. - Ensure the function reads the file line by line and parses each appropriately. - Each list in the output dictionary should maintain the order of log messages as they appear in the file.","solution":"import re def parse_log_file(file_path: str) -> dict: Parses a log file and returns a dictionary with log levels as keys and lists of corresponding messages as values. Args: file_path (str): The path to the log file to be parsed. Returns: dict: A dictionary with log levels as keys (\'INFO\', \'ERROR\', \'WARNING\') and lists of log messages as values. log_dict = {\'INFO\': [], \'ERROR\': [], \'WARNING\': []} # Regular expression to match the log line format log_re = re.compile(r\'[(.*?)] [(INFO|ERROR|WARNING)] (.+)\') with open(file_path, \'r\') as file: for line in file: match = log_re.match(line) if match: timestamp, level, message = match.groups() log_dict[level].append(message) return log_dict"},{"question":"You are given a dataset containing information about various cars, including details such as brand, model, year, horsepower, and weight. Your task is to analyze the dataset and build a predictive model to estimate the fuel efficiency (measured in miles per gallon, MPG) of a car based on its features. In this exercise, you will create a function called `car_fuel_efficiency` that constructs a linear regression model to predict the MPG of cars from their features. You will use the `scikit-learn` library to create, train, and evaluate the model. Your task is to implement the following function: ```python def car_fuel_efficiency(df): from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error import pandas as pd # Assuming df is a pandas DataFrame # Separate features and target variable X = df[[\'horsepower\', \'weight\']] y = df[\'mpg\'] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create and train the linear regression model model = LinearRegression() model.fit(X_train, y_train) # Make predictions on the test set y_pred = model.predict(X_test) # Calculate the mean squared error mse = mean_squared_error(y_test, y_pred) # Return the predicted values and the mean squared error return y_pred, mse ``` # Input: 1. `df`: A pandas DataFrame containing the car dataset with columns `[\'brand\', \'model\', \'year\', \'horsepower\', \'weight\', \'mpg\']`. # Output: - The function should return a tuple containing: - The predicted MPG values for the test set. - The mean squared error of the predictions. # Requirements: - You must use the following `scikit-learn` modules: - `sklearn.model_selection.train_test_split` - `sklearn.linear_model.LinearRegression` - `sklearn.metrics.mean_squared_error` # Example Usage: To ensure clarity, here is an example usage of the function: ```python import pandas as pd # Example data data = { \'brand\': [\'Ford\', \'Chevy\', \'Honda\', \'Toyota\', \'Tesla\'], \'model\': [\'F150\', \'Camaro\', \'Civic\', \'Camry\', \'Model 3\'], \'year\': [2018, 2019, 2020, 2020, 2021], \'horsepower\': [250, 275, 158, 203, 283], \'weight\': [4500, 3800, 2900, 3200, 3550], \'mpg\': [15, 22, 32, 28, 130] } df = pd.DataFrame(data) # Call the function predictions, error = car_fuel_efficiency(df) print(\\"Predictions:\\", predictions) print(\\"Mean Squared Error:\\", error) ``` # Constraints: - Assume the input data (`df`) is non-empty and contains all necessary columns. - The function should be designed to handle any size of input data. Implement the function by following the provided requirements and ensuring correct usage of the specified `scikit-learn` modules.","solution":"def car_fuel_efficiency(df): from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error # Separate features and target variable X = df[[\'horsepower\', \'weight\']] y = df[\'mpg\'] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create and train the linear regression model model = LinearRegression() model.fit(X_train, y_train) # Make predictions on the test set y_pred = model.predict(X_test) # Calculate the mean squared error mse = mean_squared_error(y_test, y_pred) # Return the predicted values and the mean squared error return y_pred, mse"},{"question":"You are required to write a function `inventory_valuation(items, date)` that calculates the total inventory value based on the provided `items` data. Each item has a purchase date, a purchase price, and a quantity. The total value of the inventory should be calculated as of the given date using the First-In-First-Out (FIFO) inventory valuation method. Specifically, the function should: 1. Utilize the `datetime` module to handle date comparisons. 2. Accept a list of items where each item is represented as a dictionary with keys: `purchase_date` (a string in \'YYYY-MM-DD\' format), `purchase_price` (a float), and `quantity` (an integer). 3. Accept a `date` parameter as a string in \'YYYY-MM-DD\' format to evaluate the inventory value as of this date. 4. Compute the inventory value by processing items based on their purchase dates in ascending order. 5. Consider only the items purchased on or before the given date. To accomplish this, you are provided with the following incomplete function: ```python from datetime import datetime def inventory_valuation(items, date): # Convert the string date to a datetime object valuation_date = datetime.strptime(date, \'%Y-%m-%d\') # Sort items based on purchase_date items.sort(key=lambda x: datetime.strptime(x[\'purchase_date\'], \'%Y-%m-%d\')) total_value = 0.0 for item in items: item_date = datetime.strptime(item[\'purchase_date\'], \'%Y-%m-%d\') if item_date <= valuation_date: total_value += item[\'quantity\'] * item[\'purchase_price\'] return total_value ``` Example usage: ```python items = [ {\'purchase_date\': \'2023-01-01\', \'purchase_price\': 10.0, \'quantity\': 100}, {\'purchase_date\': \'2023-02-01\', \'purchase_price\': 12.0, \'quantity\': 150}, {\'purchase_date\': \'2023-03-01\', \'purchase_price\': 11.0, \'quantity\': 200}, ] date = \'2023-02-15\' print(inventory_valuation(items, date)) # Output should match the total value of the items purchased on or before \'2023-02-15\' ``` **Requirements:** 1. Use `datetime.strptime` to convert string dates to `datetime` objects. 2. Sort the items based on the purchase date in ascending order. 3. Calculate the total inventory value for items purchased on or before the given date using the FIFO method. **Function Signature:** ```python def inventory_valuation(items, date): ```","solution":"from datetime import datetime def inventory_valuation(items, date): Calculates the total value of inventory based on items purchased on or before the given date using FIFO method. Args: items (list of dicts): List of items where each item is represented as a dictionary with keys: \'purchase_date\' (string in \'YYYY-MM-DD\' format), \'purchase_price\' (float), and \'quantity\' (int). date (string): Date in \'YYYY-MM-DD\' format to evaluate the inventory value as of this date. Returns: float: Total value of the inventory as of the given date. # Convert the string date to a datetime object valuation_date = datetime.strptime(date, \'%Y-%m-%d\') # Sort items based on purchase_date items.sort(key=lambda x: datetime.strptime(x[\'purchase_date\'], \'%Y-%m-%d\')) total_value = 0.0 for item in items: item_date = datetime.strptime(item[\'purchase_date\'], \'%Y-%m-%d\') if item_date <= valuation_date: total_value += item[\'quantity\'] * item[\'purchase_price\'] return total_value"},{"question":"You are required to write a Python function `generate_game_board(n, m)` that creates and returns a game board represented as a list of lists. Each element on the board should be initialized to zero. The size of the game board is defined by two parameters: the number of rows `n` and the number of columns `m`. # Requirements: - The function should be able to handle any positive integer values for `n` and `m`. - Ensure the function creates a rectangular grid with all elements set to zero. - The function should return the game board as a list of lists where each sub-list represents a row. # Function Details: - **Function Name**: `generate_game_board` - **Parameters**: - `n` (a positive integer representing the number of rows) - `m` (a positive integer representing the number of columns) - **Returns**: A list of lists representing the initialized game board. # Instructions: 1. Initialize an empty list to represent the game board. 2. Use nested loops to fill the game board with zeros. 3. The outer loop should iterate `n` times to create the rows. 4. The inner loop should iterate `m` times to create the columns for each row. 5. Return the completed game board as a list of lists. Example: ```python board = generate_game_board(3, 4) print(board) ``` Expected Output: ```python [ [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0] ] ```","solution":"def generate_game_board(n, m): Generates a game board of size n x m filled with zeros. Parameters: n (int): Number of rows. m (int): Number of columns. Returns: list: Game board as a list of lists filled with zeros. return [[0 for _ in range(m)] for _ in range(n)]"},{"question":"Implement a function named `replace_words(dictionary, sentence)` that replaces specific words in a given sentence according to a dictionary of replacement pairs. The function should traverse each word in the input sentence, and if a word is found in the dictionary, it should replace it with the corresponding value. # Requirements: - The function should take two arguments: - `dictionary`: A dictionary where keys are words to be replaced, and values are the words to replace them with. - `sentence`: A string representing the sentence in which words need to be replaced. - The function should return the modified sentence after performing all the replacements specified in the dictionary. # Example: ```python def replace_words(dictionary, sentence): # Code to replace words according to the dictionary. pass # Example usage: replace_dict = {\'hello\': \'hi\', \'world\': \'earth\'} input_sentence = \'hello world, welcome to the new world\' output_sentence = replace_words(replace_dict, input_sentence) print(output_sentence) # Expected: \'hi earth, welcome to the new earth\' ``` # Detailed Steps: 1. Split the input sentence into individual words. 2. Iterate through each word and check if it exists in the dictionary. 3. If it exists, replace it with the corresponding value from the dictionary. 4. Join the modified words back into a sentence and return the result. # Expected Output: - Given the dictionary `{\'hello\': \'hi\', \'world\': \'earth\'}` and the sentence `\'hello world, welcome to the new world\'`, the function should return `\'hi earth, welcome to the new earth\'`. # Constraints: - Words in the sentence are separated by whitespace. - Punctuation marks attached to words should be considered part of the words themselves. - Ensure the function conserves the original spacing and punctuation of the sentence as much as possible.","solution":"def replace_words(dictionary, sentence): Replaces words in the sentence according to the dictionary of replacement pairs. Parameters: - dictionary: dict A dictionary where keys are words to be replaced, and values are the words to replace them with. - sentence: string A string representing the sentence in which words need to be replaced. Returns: - string The modified sentence after performing all the replacements specified in the dictionary. words = sentence.split() for index, word in enumerate(words): clean_word = word.strip(\'.,!?:;\') # remove common punctuation for matching if clean_word in dictionary: words[index] = word.replace(clean_word, dictionary[clean_word]) # replace while keeping punctuation return \' \'.join(words)"},{"question":"You are tasked with creating a Python function that constructs a directed acyclic graph (DAG) from a list of tasks with dependencies between them and then performs a topological sort on the resulting graph. This is particularly useful in scenarios such as task scheduling where certain tasks must be completed before others. Specifically, you should: 1. Create a function that builds a graph based on the provided tasks and their dependencies. 2. Ensure this graph is represented using an adjacency list. 3. Perform a topological sort on this graph. To clarify, you need to implement the function `topological_sort` that: - Takes one argument: - `tasks`: a list of tuples where each tuple represents a task and its dependency (e.g., `[(1, 2), (2, 3), (4, 3)]` means task 1 must be done before task 2, task 2 before task 3, and task 4 before task 3). - Constructs the graph in the form of an adjacency list. - Performs a topological sort on the graph to determine the order in which the tasks should be completed. - Returns a list representing the topologically sorted order of tasks. **Function Signature:** ```python def topological_sort(tasks: list) -> list: pass ``` **Example Usage:** ```python tasks = [(1, 2), (2, 3), (4, 3), (4, 5)] sorted_tasks = topological_sort(tasks) ``` **Example Output:** ```python [1, 4, 2, 5, 3] ``` **Constraints:** - Assume tasks are represented as integers. - If there are multiple valid topological sorts, any valid sort order will be accepted. - The input graph will always be a directed acyclic graph (DAG), ensuring that a valid topological order exists. - Assume all relevant libraries (like `collections` for `defaultdict`) are imported and available for use.","solution":"from collections import defaultdict, deque def topological_sort(tasks): Perform a topological sort on the given list of tasks with dependencies. :param tasks: List of tuples where each tuple represents a task and its dependency. :return: A list representing the topologically sorted order of tasks. graph = defaultdict(list) in_degree = defaultdict(int) # Build the graph and count in-degrees for u, v in tasks: graph[u].append(v) in_degree[v] += 1 if u not in in_degree: in_degree[u] = 0 # Queue to store nodes with no incoming edges queue = deque([node for node in in_degree if in_degree[node] == 0]) sorted_order = [] while queue: current = queue.popleft() sorted_order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return sorted_order"},{"question":"You are required to write a function `generate_time_series_data(N, T)` that simulates data for a time series forecasting problem. This function should utilize the NumPy library\'s functionalities, specifically `numpy.random.randn` and `numpy.cumsum`, to generate the data. The function `generate_time_series_data(N, T)` should perform the following tasks: 1. **Generate Data**: - Create a NumPy array `data` of shape `(N, T)` where `N` is the number of time series and `T` is the number of time steps. - Each time series should be generated using a cumulative sum of normally distributed random values (with mean 0 and standard deviation 1). 2. **Add Noise**: - Generate a NumPy array `noise` of the same shape `(N, T)` with random values drawn from a normal distribution (mean 0 and standard deviation 0.1). - Add this noise to the `data` to simulate realistic time series with some noise. 3. **Return the Data**: - Return the final time series data array. # Function Signature: ```python def generate_time_series_data(N: int, T: int) -> numpy.ndarray: pass ``` # Parameters: - `N` (int): The number of time series. - `T` (int): The number of time steps in each time series. # Returns: - `data` (numpy.ndarray): A `(N, T)` array containing the generated time series data. # Example: ```python import numpy as np def generate_time_series_data(N: int, T: int) -> np.ndarray: # (Implementation goes here) pass # Usage data = generate_time_series_data(3, 5) print(data) # Example output: # array([[ -1.782952, -2.110447, -1.467472, -2.050937, -1.885447], # [ 0.073284, -0.252872, 1.348114, 1.715872, 1.486409], # [ -0.782952, -1.130447, -1.567472, -1.050937, -2.085447]]) ``` Follow the requirements and ensure that you use `numpy.random.randn` and `numpy.cumsum` as specified.","solution":"import numpy as np def generate_time_series_data(N: int, T: int) -> np.ndarray: Generates time series data with normally distributed cumulative sums and adds Gaussian noise. :param N: Number of time series :param T: Number of time steps in each time series :return: NumPy array of shape (N, T) containing the generated time series data # Generate the base data with cumulative sums base_data = np.cumsum(np.random.randn(N, T), axis=1) # Generate noise noise = np.random.normal(0, 0.1, (N, T)) # Add noise to the base data data = base_data + noise return data"},{"question":"You are designing a simple library management system to track books borrowed by students. The system needs to maintain a record of books and the students who borrowed them. You need to implement three classes: `Book`, `Student`, and `Library` using Python. Your task is to write a Python function named `library_system` that demonstrates the functionality of the library. The function should include: 1. A class `Book` with the following attributes and methods: - Attributes: - `book_id` (int): Unique identifier for the book. - `title` (str): Title of the book. - `author` (str): Author of the book. - Method: - `__init__(self, book_id, title, author)`: Initializes the book attributes. 2. A class `Student` with the following attributes and methods: - Attributes: - `student_id` (int): Unique identifier for the student. - `name` (str): Name of the student. - Method: - `__init__(self, student_id, name)`: Initializes the student attributes. 3. A class `Library` with the following attributes and methods: - Attributes: - `books` (list): List of `Book` objects available in the library. - `borrowed_books` (dict): Dictionary to track borrowed books with keys as book identifiers and values as `Student` objects who borrowed them. - Methods: - `__init__(self)`: Initializes the `books` list and `borrowed_books` dictionary. - `add_book(self, book)`: Adds a new book to the library. - `borrow_book(self, book_id, student)`: Updates the `borrowed_books` dictionary to reflect that a student has borrowed a book. - `return_book(self, book_id)`: Removes the book from the `borrowed_books` dictionary, marking it as returned. The `library_system` function should demonstrate: - Adding books to the library. - Borrowing books for different students. - Returning borrowed books. Here is an example of how you might call this function: ```python def library_system(): library = Library() book1 = Book(1, \\"1984\\", \\"George Orwell\\") book2 = Book(2, \\"To Kill a Mockingbird\\", \\"Harper Lee\\") student1 = Student(101, \\"Alice\\") student2 = Student(102, \\"Bob\\") library.add_book(book1) library.add_book(book2) library.borrow_book(1, student1) library.borrow_book(2, student2) library.return_book(1) # You can add more interactions for demonstration library_system() ```","solution":"class Book: def __init__(self, book_id, title, author): self.book_id = book_id self.title = title self.author = author class Student: def __init__(self, student_id, name): self.student_id = student_id self.name = name class Library: def __init__(self): self.books = [] self.borrowed_books = {} def add_book(self, book): self.books.append(book) def borrow_book(self, book_id, student): book = next((b for b in self.books if b.book_id == book_id), None) if book and book_id not in self.borrowed_books: self.borrowed_books[book_id] = student def return_book(self, book_id): if book_id in self.borrowed_books: del self.borrowed_books[book_id] def library_system(): library = Library() book1 = Book(1, \\"1984\\", \\"George Orwell\\") book2 = Book(2, \\"To Kill a Mockingbird\\", \\"Harper Lee\\") student1 = Student(101, \\"Alice\\") student2 = Student(102, \\"Bob\\") library.add_book(book1) library.add_book(book2) library.borrow_book(1, student1) library.borrow_book(2, student2) library.return_book(1) library_system()"},{"question":"You are provided with a code snippet that generates a random maze using the Depth-First Search (DFS) algorithm and visualizes it using the `matplotlib` library. Your task is to correctly implement the `solve_maze` function to find a path from the start to the end of the maze. The function should employ the Breadth-First Search (BFS) algorithm. Additionally, use the `show_maze_solution` function to display the original maze and the solution path. **Function Specification:** You need to implement the function: ```python def solve_maze(maze, start, end): Solve the given maze using Breadth-First Search algorithm. :param maze: 2D list representing the maze, where 0 is a path and 1 is a wall. :param start: Tuple (x, y) representing the starting coordinates in the maze. :param end: Tuple (x, y) representing the ending coordinates in the maze. :return: List of tuples representing the path from start to end. If no path found, return an empty list. pass ``` **Requirements:** 1. Use the `random` library to generate a random maze of given dimensions. 2. Your function `solve_maze` must use the BFS algorithm to find the shortest path in the maze. 3. Modify the `show_maze_solution` function to call `solve_maze` and plot both the maze and the solution path. **Libraries:** - You must use the `random` library for generating the maze. - You must use the `matplotlib.pyplot` and `numpy` libraries for plotting and data handling respectively. ```python def generate_maze(width, height): import random maze = [[1 for _ in range(width)] for _ in range(height)] def carve_passages_from(cx, cy): directions = [(cx - 1, cy), (cx, cy + 1), (cx + 1, cy), (cx, cy - 1)] random.shuffle(directions) for (nx, ny) in directions: if 0 <= nx < width and 0 <= ny < height and maze[ny][nx] == 1: if 0 < nx < width - 1 and maze[ny][nx + 1] == 1 and maze[ny][nx - 1] == 1: if 0 < ny < height - 1 and maze[ny + 1][nx] == 1 and maze[ny - 1][nx] == 1: maze[cy][cx] = 0 maze[ny][nx] = 0 carve_passages_from(nx, ny) carve_passages_from(random.randint(0, width - 1), random.randint(0, height - 1)) return maze def show_maze_solution(maze, path, name): import matplotlib.pyplot as plt import numpy as np height, width = len(maze), len(maze[0]) maze_np = np.array(maze) fig, ax = plt.subplots() ax.imshow(maze_np, cmap=\'Greys\', origin=\'upper\') if path: path_np = np.array(path) ax.plot(path_np[:, 1], path_np[:, 0], color=\'red\', linewidth=2) ax.set_title(name) plt.show() # Example of how to use these functions: width, height = 20, 20 maze = generate_maze(width, height) start = (0, 0) end = (height - 1, width - 1) path = solve_maze(maze, start, end) show_maze_solution(maze, path, \\"Maze Solution\\") ```","solution":"def solve_maze(maze, start, end): Solve the given maze using Breadth-First Search algorithm. :param maze: 2D list representing the maze, where 0 is a path and 1 is a wall. :param start: Tuple (x, y) representing the starting coordinates in the maze. :param end: Tuple (x, y) representing the ending coordinates in the maze. :return: List of tuples representing the path from start to end. If no path found, return an empty list. from collections import deque queue = deque([start]) visited = set() visited.add(start) parent = {start: None} while queue: current = queue.popleft() if current == end: # Reconstruct the path path = [] while current is not None: path.append(current) current = parent[current] return path[::-1] # Return reversed path cx, cy = current # Explore neighbors for nx, ny in ((cx - 1, cy), (cx + 1, cy), (cx, cy - 1), (cx, cy + 1)): if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 0: neighbor = (nx, ny) if neighbor not in visited: queue.append(neighbor) visited.add(neighbor) parent[neighbor] = current return [] # No path found"},{"question":"Write a function named `getSecondLargest(numbers)` that accepts a single argument `numbers`, a list of integers. The function should return the second largest number in the list. If there are fewer than two unique numbers, the function should return `None`. **Constraints:** - You may assume that all elements in the list are integers. - The solution should handle both positive and negative integers. - The input list may contain duplicate values. - Your solution should have a time complexity better than O(n^2). **Example Usage:** ```python print(getSecondLargest([10, 5, 10, 7])) # Should return 7 print(getSecondLargest([1, 1, 1, 1])) # Should return None print(getSecondLargest([1, 2, 3, 4, 5])) # Should return 4 print(getSecondLargest([-1, -2, -3, -4])) # Should return -2 ```","solution":"def getSecondLargest(numbers): Returns the second largest number in a list of integers. If there are fewer than two unique numbers, returns None. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[-2]"},{"question":"In this assignment, you will implement a function `logisticRegressionClassifier` that performs logistic regression on a given dataset using the Scikit-learn library. The function should fit a logistic regression model, make predictions, evaluate the model using accuracy and classification reports, and visualize the decision boundary with a plot. Specifically, the function should use the following packages: - `sklearn.linear_model.LogisticRegression` - `sklearn.metrics.accuracy_score` - `sklearn.metrics.classification_report` - `numpy.array` - `matplotlib.pyplot` You are required to follow these steps: 1. **Fit a Logistic Regression Model**: Use Scikit-learn’s `LogisticRegression` model to fit the training data. 2. **Make Predictions**: Use the fitted model to make predictions on the input data. 3. **Calculate Accuracy**: Use `sklearn.metrics.accuracy_score` to calculate the accuracy of the model. 4. **Generate Classification Report**: Use `sklearn.metrics.classification_report` to print the classification report of the model. 5. **Plot Decision Boundary**: Use matplotlib to plot the decision boundary on a 2D plot, and visualize the input data points. Here is the prototype of your function: ```python def logisticRegressionClassifier(X, y): Perform logistic regression and plot results. Parameters: X : numpy array The input features. y : numpy array The target variable. # Import the necessary libraries from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score, classification_report import numpy as np import matplotlib.pyplot as plt # Implement the function following the steps described above ``` **Input Parameters:** - `X`: A numpy array of shape (n_samples, n_features) representing the input features. - `y`: A numpy array of shape (n_samples,) representing the target variable. **Output:** - Print the accuracy of the model. - Print the classification report. - Display a plot with the decision boundary and the actual data points. # Visualization: - The plot should show the data points and the decision boundary. - Use different colors to represent different classes in the dataset. # Example Usage: ```python import pandas as pd import numpy as np # Example data data = pd.DataFrame({ \'Feature_1\': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \'Feature_2\': [5, 4, 6, 3, 4, 2, 5, 6, 7, 8], \'Class\': [0, 0, 0, 1, 1, 1, 0, 0, 1, 1] }) # Input features and target variable X = np.array(data[[\'Feature_1\', \'Feature_2\']]) y = np.array(data[\'Class\']) # Call the function logisticRegressionClassifier(X, y) ```","solution":"def logisticRegressionClassifier(X, y): Perform logistic regression and plot results. Parameters: X : numpy array The input features. y : numpy array The target variable. # Import the necessary libraries from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score, classification_report import numpy as np import matplotlib.pyplot as plt # Fit the Logistic Regression Model model = LogisticRegression() model.fit(X, y) # Make predictions on the input data y_pred = model.predict(X) # Calculate accuracy accuracy = accuracy_score(y, y_pred) print(f\'Accuracy: {accuracy}\') # Generate and print classification report report = classification_report(y, y_pred) print(\'Classification Report:n\', report) # Plotting the decision boundary h = .02 # step size in the mesh x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1 y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1 xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h)) Z = model.predict(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape) plt.contourf(xx, yy, Z, alpha=0.5, cmap=plt.cm.Paired) plt.scatter(X[:, 0], X[:, 1], c=y, edgecolors=\'k\', cmap=plt.cm.Paired) plt.xlabel(\'Feature 1\') plt.ylabel(\'Feature 2\') plt.title(\'Logistic Regression Decision Boundary\') plt.show()"},{"question":"You are required to write a Python function named `process_and_sum` which takes a list of integers as a parameter `numbers`. The function should return the sum of unique integers in the list that are divisible by 3. If the list is empty, the function should return 0. To achieve this, you can use Python\'s set to filter out unique integers and then iterate through them to sum only those integers that are divisible by 3. **Function Signature:** ```python def process_and_sum(numbers: list) -> int: pass ``` **Example Usage:** ```python print(process_and_sum([3, 3, 6, 9, 12])) # Output: 30 print(process_and_sum([2, 4, 5, 6, 6, 9, 12])) # Output: 27 print(process_and_sum([1, 2, 4, 5, 7])) # Output: 0 print(process_and_sum([])) # Output: 0 ``` In the above examples, the function identifies unique integers from the list that are divisible by 3 and returns their sum. For example, in the first call, the unique numbers divisible by 3 are [3, 6, 9, 12] and their sum is 30.","solution":"def process_and_sum(numbers: list) -> int: Returns the sum of unique integers in the list that are divisible by 3. If the list is empty, the function returns 0. unique_numbers = set(numbers) sum_div_by_3 = sum(num for num in unique_numbers if num % 3 == 0) return sum_div_by_3 print(process_and_sum([3, 3, 6, 9, 12])) # Output: 30 print(process_and_sum([2, 4, 5, 6, 6, 9, 12])) # Output: 27 print(process_and_sum([1, 2, 4, 5, 7])) # Output: 0 print(process_and_sum([])) # Output: 0"},{"question":"Create a function that takes a list of numbers and returns a histogram representing the frequency of each unique number. The histogram should be displayed as a vertical bar chart using matplotlib. Additionally, the function should label each bar with the corresponding number and its frequency count. This function is helpful for visualizing the distribution of numbers in a list. The function should output: matplotlib.figure.Figure: A Figure object representing the histogram. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt def plot_histogram(data): ```","solution":"import matplotlib.pyplot as plt import numpy as np def plot_histogram(data): Takes a list of numbers and returns a histogram representing the frequency of each unique number. Parameters: data (list): A list of numbers. Returns: matplotlib.figure.Figure: A Figure object representing the histogram. # Calculate the frequency of each unique number unique_numbers, counts = np.unique(data, return_counts=True) # Create the bar plot fig, ax = plt.subplots() bars = ax.bar(unique_numbers, counts, color=\'blue\') # Label each bar with the corresponding number and its frequency count for bar, count in zip(bars, counts): height = bar.get_height() ax.text(bar.get_x() + bar.get_width() / 2.0, height, f\'{int(count)}\', ha=\'center\', va=\'bottom\') # Add labels and title ax.set_xlabel(\'Number\') ax.set_ylabel(\'Frequency\') ax.set_title(\'Histogram of Number Frequencies\') return fig"},{"question":"You are required to generate all possible permutations of a given string. Specifically, you need to implement the `permute_string` function, which returns all the unique permutations of the input string. # Function Signature ```python def permute_string(s): pass ``` # Input - `s` (string): A non-empty string of alphanumeric characters. # Output - A list of strings containing all the unique permutations of the input string. # Requirements To solve this problem, you **must** use the following modules: - `itertools.permutations`: To generate permutations. # Example Example 1: Input: ```python s = \\"abc\\" ``` Output: ```python [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] ``` Explanation: The function generates all possible arrangements of the characters in the string \\"abc\\". Example 2: Input: ```python s = \\"a\\" ``` Output: ```python [\\"a\\"] ``` Explanation: The function should return the single-character string as the only permutation. # Note Ensure that the solution correctly handles strings with duplicate characters, without generating redundant permutations. The output list should contain only unique permutations and can be returned in any order.","solution":"from itertools import permutations def permute_string(s): Returns all unique permutations of the input string s. perm_set = set(\'\'.join(p) for p in permutations(s)) return list(perm_set)"},{"question":"You are required to create a function named `find_largest_group` that processes a dictionary where keys are group names and values are lists of members (represented as strings), and identifies the group with the most members. To achieve this, you should: 1. Iterate through the dictionary to determine the size of each group. 2. Identify the group with the largest number of members. 3. Return the name of the largest group and the number of its members. Your function should have the following signature: ```python def find_largest_group(groups: dict) -> tuple: pass ``` - `groups`: A dictionary where keys are group names (strings) and values are lists of group members (strings). - The function should return a tuple containing the name of the largest group and the number of its members. **Example:** Consider the following dictionary representing group membership: ```python groups = { \\"groupA\\": [\\"Alice\\", \\"Bob\\", \\"Charlie\\"], \\"groupB\\": [\\"David\\", \\"Eve\\"], \\"groupC\\": [\\"Frank\\", \\"Ginny\\", \\"Hannah\\", \\"Ian\\"] } ``` In this example, \\"groupC\\" is the group with the most members (4). Therefore, the function should return: ```python (\\"groupC\\", 4) ```","solution":"def find_largest_group(groups: dict) -> tuple: Identifies the group with the most members. Parameters: groups (dict): A dictionary where keys are group names and values are lists of members. Returns: tuple: A tuple containing the name of the largest group and the number of its members. if not groups: return None, 0 largest_group = max(groups.items(), key=lambda group: len(group[1])) return largest_group[0], len(largest_group[1])"},{"question":"You need to write a function that processes a list of log records, where each record is a dictionary containing information about a web request. Your function will filter out records based on certain criteria and compile summary statistics about the remaining records. Your function should be named `process_logs`. It should take two parameters: - `logs` (list): A list of dictionaries, where each dictionary represents a log record. Each log record dictionary will contain the following keys: - `\\"status\\"` (int): The HTTP status code of the request (e.g., 200, 404, 500). - `\\"endpoint\\"` (str): The endpoint that was accessed (e.g., \\"/home\\", \\"/login\\"). - `\\"response_time\\"` (float): The time taken to process the request in milliseconds. - `status_filter` (list): A list of HTTP status codes to include in the final analysis (e.g., [200, 404]). The function should return a dictionary with the following keys: 1. `\\"total_requests\\"` (int): The total number of requests with status codes specified in `status_filter`. 2. `\\"average_response_time\\"` (float): The average response time of the filtered requests. 3. `\\"endpoint_summary\\"` (dict): A dictionary where keys are endpoints and values are dictionaries containing: - `\\"count\\"` (int): The number of requests to the endpoint. - `\\"average_response_time\\"` (float): The average response time of requests to the endpoint. The average response time should be rounded to 2 decimal places. **Example:** ```python logs = [ {\\"status\\": 200, \\"endpoint\\": \\"/home\\", \\"response_time\\": 120.5}, {\\"status\\": 404, \\"endpoint\\": \\"/login\\", \\"response_time\\": 300.0}, {\\"status\\": 500, \\"endpoint\\": \\"/home\\", \\"response_time\\": 245.3}, {\\"status\\": 200, \\"endpoint\\": \\"/about\\", \\"response_time\\": 89.75}, {\\"status\\": 200, \\"endpoint\\": \\"/home\\", \\"response_time\\": 110.0}, ] status_filter = [200, 404] result = process_logs(logs, status_filter) print(result) # Output: { # \\"total_requests\\": 4, # \\"average_response_time\\": 155.06, # \\"endpoint_summary\\": { # \\"/home\\": {\\"count\\": 2, \\"average_response_time\\": 115.25}, # \\"/login\\": {\\"count\\": 1, \\"average_response_time\\": 300.0}, # \\"/about\\": {\\"count\\": 1, \\"average_response_time\\": 89.75}, # } # } ```","solution":"def process_logs(logs, status_filter): # Filter logs based on status_filter filtered_logs = [log for log in logs if log[\\"status\\"] in status_filter] # Total number of requests meeting the criteria total_requests = len(filtered_logs) # Calculate average response time for filtered logs if total_requests > 0: total_response_time = sum(log[\\"response_time\\"] for log in filtered_logs) average_response_time = round(total_response_time / total_requests, 2) else: average_response_time = 0.0 # Create endpoint summary endpoint_summary = {} for log in filtered_logs: endpoint = log[\\"endpoint\\"] if endpoint not in endpoint_summary: endpoint_summary[endpoint] = {\\"count\\": 0, \\"response_times\\": []} endpoint_summary[endpoint][\\"count\\"] += 1 endpoint_summary[endpoint][\\"response_times\\"].append(log[\\"response_time\\"]) # Calculate average response time for each endpoint for endpoint in endpoint_summary: response_times = endpoint_summary[endpoint][\\"response_times\\"] endpoint_summary[endpoint][\\"average_response_time\\"] = round(sum(response_times) / len(response_times), 2) del endpoint_summary[endpoint][\\"response_times\\"] return { \\"total_requests\\": total_requests, \\"average_response_time\\": average_response_time, \\"endpoint_summary\\": endpoint_summary }"},{"question":"You are required to write a function `rotate_y(radians)` that takes an angle in radians and returns the corresponding 4x4 rotation matrix around the y-axis. You must use the libraries `numpy.array` and `numpy.cos` to achieve this functionality. # Function Signature ```python def rotate_y(radians): pass ``` # Input: - `radians` (float): A single floating-point number representing the angle in radians. # Output: - (numpy.ndarray): A 4x4 numpy array representing the rotation matrix. # Example: ```python import numpy as np radians = np.pi / 6 rotation_matrix = rotate_y(radians) print(rotation_matrix) ``` # Expected Output: ```plaintext [[ 0.8660254 0. 0.5 0. ] [ 0. 1. 0. 0. ] [-0.5 0. 0.8660254 0. ] [ 0. 0. 0. 1. ]] ``` # Requirements: 1. Use `numpy.array` to create the output matrix. 2. Use `numpy.cos` and `numpy.sin` to compute the cosines and sines of the input angle. 3. Ensure the function is written clearly and concisely and adheres to the required library APIs. # Constraints: - Assume the input radians is a valid float.","solution":"import numpy as np def rotate_y(radians): Generates a 4x4 rotation matrix for rotating around the y-axis by a given angle in radians. Parameters: radians (float): The angle in radians to rotate around the y-axis. Returns: numpy.ndarray: A 4x4 rotation matrix. cos_theta = np.cos(radians) sin_theta = np.sin(radians) rotation_matrix = np.array([ [cos_theta, 0, sin_theta, 0], [0, 1, 0, 0], [-sin_theta, 0, cos_theta, 0], [0, 0, 0, 1] ]) return rotation_matrix"},{"question":"You are required to implement a function that simulates a queue system for processing tasks with varying priorities. Each task is represented by a `Task` object, which contains a `priority` attribute (an integer) and a `description` attribute (a string). Write a function `process_tasks` that takes a list of `Task` objects and processes them in the order of their priority. The tasks with the highest priority (lowest numerical value) should be processed first. If two tasks have the same priority, they should be processed in the order they appear in the list. The function should return a list of the descriptions of the tasks in the order they were processed. Here\'s the step-by-step guide to complete this task: 1. Order the tasks based on their priority (ascending order). For tasks with the same priority, maintain their initial order. 2. Create a list of the descriptions of the tasks in the order they were processed. 3. Return the list of descriptions. **Requirements:** - Use the built-in `sorted` function with a custom sorting key to order the tasks. Here is the function signature: ```python def process_tasks(tasks: List[Task]) -> List[str]: ``` **Example:** Given the following `Task` objects: ```python tasks = [ Task(priority=3, description=\'task1\'), Task(priority=1, description=\'task2\'), Task(priority=2, description=\'task3\'), Task(priority=1, description=\'task4\') ] ``` The function call `process_tasks(tasks)` should return: ```python [\'task2\', \'task4\', \'task3\', \'task1\'] ```","solution":"from typing import List class Task: def __init__(self, priority: int, description: str): self.priority = priority self.description = description def process_tasks(tasks: List[Task]) -> List[str]: Processes tasks based on their priorities. Tasks with lower priority value are processed first. If priorities are equal, tasks are processed in the order they appear in the list. :param tasks: List of Task objects to be processed :return: List of descriptions of the processed tasks in the correct order sorted_tasks = sorted(tasks, key=lambda task: task.priority) return [task.description for task in sorted_tasks]"},{"question":"You are tasked with implementing a basic k-means clustering algorithm. The goal is to partition a given dataset into `k` clusters. Your task is to: 1. Implement the function `kmeans(X, k, max_iter=100)` where: - `X`: A 2D numpy array of shape (N, M) containing the data points. - `k`: An integer representing the number of clusters. - `max_iter`: An integer representing the maximum number of iterations (default is 100). The function should return two things: 1. A 1D numpy array `labels` containing the cluster index for each data point. 2. A 2D numpy array `centroids` of shape (k, M) containing the final cluster centroids. Here\'s a breakdown of the key tasks: - Randomly initialize `k` centroids from the data points. - Assign each data point to the nearest centroid. - Compute the new centroids as the mean of all data points assigned to each cluster. - Repeat the assignment and update steps until convergence or reaching the maximum number of iterations. You may assume that the distance function `distance(a, b)` has already been defined outside of your function. This function takes in two points `a` and `b`, and returns the Euclidean distance between them.","solution":"import numpy as np def kmeans(X, k, max_iter=100): Perform k-means clustering on a given dataset. Params: X: np.ndarray of shape (N, M), the dataset. k: int, number of clusters. max_iter: int, maximum number of iterations. Returns: labels: np.ndarray of shape (N,), cluster labels for each point. centroids: np.ndarray of shape (k, M), final cluster centroids. def distance(a, b): Compute the Euclidean distance between two points. return np.sqrt(np.sum((a - b) ** 2)) N, M = X.shape # Randomly initialize the centroids by sampling k points from the dataset initial_indices = np.random.choice(N, k, replace=False) centroids = X[initial_indices] labels = np.zeros(N, dtype=int) for _ in range(max_iter): # Step 1: Assign labels based on nearest centroid for i in range(N): distances = np.array([distance(X[i], centroid) for centroid in centroids]) labels[i] = np.argmin(distances) # Step 2: Calculate new centroids new_centroids = np.array([X[labels == j].mean(axis=0) for j in range(k)]) # Check for convergence if np.all(centroids == new_centroids): break centroids = new_centroids return labels, centroids"},{"question":"In this problem, you will implement a function to perform K-Means clustering on a given dataset. The function should take in the dataset, the number of clusters, and the maximum number of iterations. The goal is to fit a K-Means model on the data, predict the cluster labels, and compute the inertia of the model using scikit-learn\'s `KMeans` class. You are required to complete the following function: ```python def kmeans_clustering(data, n_clusters, max_iter): \'\'\' Purpose: Perform KMeans Clustering Input: - data: DataFrame or array-like, shape (n_samples, n_features) The input data to cluster. - n_clusters: int The number of clusters to form. - max_iter: int Maximum number of iterations for the K-means algorithm. Output: Returns a tuple containing: - The cluster inertia, which is the sum of squared distances of samples to their closest cluster center. - The predicted cluster labels for the input data. \'\'\' ``` Please make use of `KMeans` from scikit-learn. Your function should return the inertia of the fitted model and the predicted cluster labels for the input data. Ensure you handle the input and output as specified.","solution":"from sklearn.cluster import KMeans def kmeans_clustering(data, n_clusters, max_iter): \'\'\' Purpose: Perform KMeans Clustering Input: - data: DataFrame or array-like, shape (n_samples, n_features) The input data to cluster. - n_clusters: int The number of clusters to form. - max_iter: int Maximum number of iterations for the K-means algorithm. Output: Returns a tuple containing: - The cluster inertia, which is the sum of squared distances of samples to their closest cluster center. - The predicted cluster labels for the input data. \'\'\' kmeans = KMeans(n_clusters=n_clusters, max_iter=max_iter, random_state=0) kmeans.fit(data) inertia = kmeans.inertia_ labels = kmeans.labels_ return inertia, labels"},{"question":"You are building a web application that needs to handle various user inputs. One such input is a string of text which can contain various types of whitespace characters (spaces, tabs, newlines). For the application\'s functionality, you need to write a function to clean up the input text by normalizing the whitespace. Write a Python function named `normalize_whitespace` that takes a single string parameter `text` and returns a new string where: 1. All sequences of whitespace characters (spaces, tabs, newlines) are replaced by a single space. 2. Leading and trailing whitespace are removed. # Example: ```python text = \\" This t is a n sample text twith multiplenwhitespace characters. \\" normalized_text = normalize_whitespace(text) print(normalized_text) ``` The output will be: ``` \\"This is a sample text with multiple whitespace characters.\\" ``` # Requirements: - Use Python\'s built-in string methods and the `re` (regular expression) module to perform the whitespace normalization. - The function should handle empty strings and strings composed entirely of whitespace correctly, returning an empty string in such cases.","solution":"import re def normalize_whitespace(text): Normalizes whitespace in the input text by: 1. Replacing all sequences of whitespace characters with a single space. 2. Removing leading and trailing whitespace. Args: text (str): The input text to normalize. Returns: str: The normalized text. # Replace all sequences of whitespace characters with a single space text = re.sub(r\'s+\', \' \', text) # Strip leading and trailing whitespace text = text.strip() return text"},{"question":"You are required to write a function called `rotate_matrix` in Python. This function will rotate a given N x N matrix 90 degrees clockwise. The function should accept a single argument `matrix`, which is a 2D list representing the N x N matrix. Your implementation must ensure the following: 1. The `rotate_matrix` function should not use any additional 2D list or built-in function that directly performs matrix rotation. 2. The rotation should be done in place, meaning you should modify the input list directly without creating a new list. 3. The function should handle cases where the matrix is empty or contains different types of elements. **Function Signature:** ```python def rotate_matrix(matrix: list): pass ``` # Example: ```python def rotate_matrix(matrix): n = len(matrix) for layer in range(n // 2): first = layer last = n - layer - 1 for i in range(first, last): # save top top = matrix[first][i] # left -> top matrix[first][i] = matrix[last - (i - first)][first] # bottom -> left matrix[last - (i - first)][first] = matrix[last][last - (i - first)] # right -> bottom matrix[last][last - (i - first)] = matrix[i][last] # top -> right matrix[i][last] = top # Example usage input_matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(input_matrix) print(input_matrix) # Output should be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` # Explanation: The goal is to rotate a given matrix 90 degrees clockwise in place without using any additional memory. The function iteratively swaps the elements layer by layer and position by position, ensuring that the rotation is achieved through element manipulation. This will help in understanding how to work with 2D lists and the manipulation of elements within those lists.","solution":"def rotate_matrix(matrix: list): Rotates the given N x N matrix 90 degrees clockwise in place. if not matrix: return n = len(matrix) for layer in range(n // 2): first = layer last = n - layer - 1 for i in range(first, last): # save top top = matrix[first][i] # left -> top matrix[first][i] = matrix[last - (i - first)][first] # bottom -> left matrix[last - (i - first)][first] = matrix[last][last - (i - first)] # right -> bottom matrix[last][last - (i - first)] = matrix[i][last] # top -> right matrix[i][last] = top"},{"question":"You are tasked with creating a function named `calculate_customer_lifetime_value` to calculate the lifetime value of a customer. The lifetime value is represented as the total revenue generated from a customer over a period of time. Your task is to effectively utilize basic list operations and arithmetic. # Function Signature ```python def calculate_customer_lifetime_value(purchase_amounts, discount_rate): ``` # Parameters - `purchase_amounts` (List[float]): A list of purchase amounts made by the customer over their lifetime. - `discount_rate` (float): A discount rate to be applied to future purchases to account for the time value of money. # Requirements 1. **Sum Purchases**: Calculate the total sum of the purchase amounts. 2. **Apply Discount Rate**: Adjust the sum of the purchases based on the discount rate to reflect the present value of money. 2. **Return the Value**: The function should return the calculated lifetime value as a float. # Example ```python calculate_customer_lifetime_value([100.0, 150.0, 200.0], 0.05) ``` This function call will sum the total purchase amounts and apply the discount rate to return the lifetime value of the customer. For instance, in this case, the total purchases sum is 450.0, and if adjusting for a 5% discount rate annually, the function should return a discounted present value reflecting the customer\'s lifetime value.","solution":"def calculate_customer_lifetime_value(purchase_amounts, discount_rate): Calculates the Customer Lifetime Value by summing up the purchase amounts and applying a discount rate to account for the time value of money. :param purchase_amounts: List[float] - List of purchase amounts :param discount_rate: float - Discount rate to apply :return: float - Lifetime Value of the customer total_purchase = sum(purchase_amounts) lifetime_value = total_purchase / (1 + discount_rate) return lifetime_value"},{"question":"You are tasked with developing a function to process log files in a directory. Specifically, you need to create a summary report of error logs. Each log file contains lines of text where each line can have different types of log message levels such as INFO, DEBUG, WARNING, and ERROR. You need to extract and count the number of ERROR messages in each file and provide a summary. You need to implement the function `summarize_errors(path)` using the `os` library in Python. This function should: 1. Retrieve the list of files within the `path` directory. 2. Iterate through each file and open it to read its contents. 3. Count the number of lines containing the \'ERROR\' keyword in each file. 4. Output the summary report listing each file name and its corresponding count of \'ERROR\' messages. **Function Signature:** ```python def summarize_errors(path: str) -> None: pass ``` **Example:** Suppose the directory at `path` contains the following files: ``` - log1.txt - log2.txt - info.txt ``` And the contents of the files are as follows: ``` log1.txt: [INFO] Process started [ERROR] Failed to start process [WARNING] Low disk space [ERROR] Disk write failed log2.txt: [DEBUG] Running diagnostics [INFO] System health check pass [ERROR] Memory leak detected info.txt: [INFO] Just a regular information log. ``` After running `summarize_errors(\\"/path/to/directory\\")`, the output summary report should be: ``` log1.txt: 2 ERROR messages log2.txt: 1 ERROR message info.txt: 0 ERROR messages ``` **Hint:** - Use `os.listdir` to get the list of file names. - Use `open` function to read through each file. **Note:** Ensure you handle files with large contents efficiently and close the files properly after reading.","solution":"import os def summarize_errors(path: str) -> None: Summarizes the number of ERROR messages in each log file within the specified directory. :param path: Path to the directory containing the log files. try: files = os.listdir(path) except FileNotFoundError: print(f\\"Directory not found: {path}\\") return for file in files: file_path = os.path.join(path, file) if os.path.isfile(file_path): error_count = 0 with open(file_path, \'r\') as f: for line in f: if \'ERROR\' in line: error_count += 1 if error_count == 1: print(f\\"{file}: {error_count} ERROR message\\") else: print(f\\"{file}: {error_count} ERROR messages\\")"},{"question":"You are given two lists of integers, `A` and `B`, each of size ( n ). Your task is to find an element from each list such that their sum is as close as possible to a given integer ( X ). The sum of the selected elements should not exceed ( X ). If multiple pairs have the same closest sum, return any of them. Write a function `closest_sum_pair(A, B, X)` that finds and returns two elements, one from each list, whose sum is the closest to ( X ) without being greater than ( X ). Function Signature ```python def closest_sum_pair(A: List[int], B: List[int], X: int) -> Tuple[int, int]: ``` Parameters - `A`: A list of integers representing the first list. - `B`: A list of integers representing the second list. - `X`: An integer representing the target sum. Returns - A tuple of two integers: - The first integer from list `A`. - The second integer from list `B`. Example ```python A = [1, 2, 5, 8] B = [3, 4, 6, 7] X = 10 ``` In this example, one possible closest pair is `(5, 4)` with a sum of `9` which is closest to `10` without exceeding it. Notes - You can assume that there will be at least one pair of elements in `A` and `B` whose sum is less than or equal to `X`. - Aim for a solution that minimizes time complexity.","solution":"from typing import List, Tuple def closest_sum_pair(A: List[int], B: List[int], X: int) -> Tuple[int, int]: Finds and returns two elements, one from each list, whose sum is the closest to X without being greater than X. # Sort both lists A.sort() B.sort() closest_pair = (None, None) closest_sum = -float(\'inf\') # Use two pointers approach i, j = 0, len(B) - 1 while i < len(A) and j >= 0: sum_ab = A[i] + B[j] if sum_ab == X: return (A[i], B[j]) if sum_ab < X and sum_ab > closest_sum: closest_sum = sum_ab closest_pair = (A[i], B[j]) if sum_ab < X: i += 1 else: j -= 1 return closest_pair"},{"question":"You are tasked with creating a Python function that calculates and visualizes the Fibonacci sequence up to a given number `n`. Specifically, you will be building a function named `plot_fibonacci` that meets the following requirements: 1. Implement a function to compute the Fibonacci sequence. The function should: - Be named `compute_fibonacci`. - Take an integer `n` as input and return a list containing the Fibonacci sequence up to `n` terms. 2. Plot the Fibonacci sequence using `matplotlib.pyplot`. The function `plot_fibonacci` should adhere to the following guidelines: - Use `matplotlib.pyplot.plot` to create a line plot of the Fibonacci sequence. - The x-axis should represent the term index, and the y-axis should represent the Fibonacci number. - Add appropriate axis labels (\\"Term Index\\" and \\"Fibonacci Number\\") and a title: \\"Fibonacci Sequence\\". - Use the `matplotlib.pyplot.title` function to set the title, applying the `fontdict` parameter to customize the font size to 14 and the weight to \'bold\'. 3. Your function should validate the input `n` to ensure it is a non-negative integer. If `n` is not valid, raise a `ValueError` with an appropriate error message. Example function signature: ```python def compute_fibonacci(n: int) -> list: # Function to calculate Fibonacci sequence def plot_fibonacci(n: int): # Your implementation here ``` Example usage: ```python plot_fibonacci(10) ``` This should generate and save the plot as \'fibonacci_sequence_plot.png\'.","solution":"import matplotlib.pyplot as plt def compute_fibonacci(n: int) -> list: Returns a list containing the Fibonacci sequence up to n terms. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") sequence = [] a, b = 0, 1 for _ in range(n): sequence.append(a) a, b = b, a + b return sequence def plot_fibonacci(n: int): Plots the Fibonacci sequence up to n terms using matplotlib. sequence = compute_fibonacci(n) plt.plot(range(n), sequence, marker=\'o\', linestyle=\'-\') plt.xlabel(\'Term Index\') plt.ylabel(\'Fibonacci Number\') plt.title(\'Fibonacci Sequence\', fontdict={\'fontsize\': 14, \'fontweight\': \'bold\'}) plt.grid(True) plt.savefig(\'fibonacci_sequence_plot.png\') plt.show()"},{"question":"Write a function called `find_missing_number` that takes in a list of unique integers from 1 to `n` (inclusive) where one number is missing. The function should return the missing number. The input list will always have exactly `n-1` elements, all elements will be unique, and all elements will fall within the inclusive range from 1 to `n`. **Function Signature**: ```python def find_missing_number(nums: List[int]) -> int: pass ``` **Inputs**: - `nums` (List[int]): A list of unique integers from 1 to `n` with one number missing (length of the list is `n-1`). **Output**: - Returns the missing number (int). **Example**: ```python # Example 1 find_missing_number([2, 3, 1, 5]) # Returns 4 # Example 2 find_missing_number([1, 2, 4, 5, 6]) # Returns 3 ``` **Requirements**: - Utilize the formula for the sum of the first `n` natural numbers to find the missing number in a time-efficient manner. - Account for the arithmetic series sum: sum = (n * (n + 1)) // 2. **Educational Goal**: The aim is to understand how to efficiently solve problems using mathematical formulas instead of iterative approaches, emphasizing the use of arithmetic series properties.","solution":"from typing import List def find_missing_number(nums: List[int]) -> int: Given a list of unique integers from 1 to n with one number missing, find the missing number. Args: nums (List[int]): A list of unique integers from 1 to n with one number missing. Returns: int: The missing number. n = len(nums) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(nums) return expected_sum - actual_sum"},{"question":"Implement a function that generates a scatter plot to visualize the relationship between two numerical variables in a dataset. The function should generate a DataFrame with `NUM_SAMPLES` rows, each containing two randomly generated numerical values. The first numerical value should range between 0 and 50, and the second should range between 10 and 60. Then, create a scatter plot to show the relationship between these two numerical variables. Note that: The exact values in the dataset will vary as they are randomly generated. The function should output: Returns a Matplotlib Axes object representing the created scatter plot, with the x-axis labeled \'Variable X\', y-axis labeled \'Variable Y\', and title \'Scatter Plot of Variable X vs Variable Y\'. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt import numpy as np # Constants NUM_SAMPLES = 300 # Number of samples def task_func(): # Generate sample data data = { \'Variable X\': np.random.uniform(0, 50, NUM_SAMPLES), \'Variable Y\': np.random.uniform(10, 60, NUM_SAMPLES) } df = pd.DataFrame(data) # Create scatter plot fig, ax = plt.subplots() ax.scatter(df[\'Variable X\'], df[\'Variable Y\']) ax.set_xlabel(\'Variable X\') ax.set_ylabel(\'Variable Y\') ax.set_title(\'Scatter Plot of Variable X vs Variable Y\') return ax ```","solution":"import pandas as pd import matplotlib.pyplot as plt import numpy as np # Constants NUM_SAMPLES = 300 # Number of samples def task_func(): Generates a scatter plot to visualize the relationship between two numerical variables in a dataset. Returns a Matplotlib Axes object representing the created scatter plot. # Generate sample data data = { \'Variable X\': np.random.uniform(0, 50, NUM_SAMPLES), \'Variable Y\': np.random.uniform(10, 60, NUM_SAMPLES) } df = pd.DataFrame(data) # Create scatter plot fig, ax = plt.subplots() ax.scatter(df[\'Variable X\'], df[\'Variable Y\']) ax.set_xlabel(\'Variable X\') ax.set_ylabel(\'Variable Y\') ax.set_title(\'Scatter Plot of Variable X vs Variable Y\') return ax"},{"question":"Fetch a list of JSON objects from a given API endpoint, filter the objects based on a specified key-value criterion, and calculate the average value of a specified numeric key from the filtered objects. Function rules: - Make an HTTP GET request to the API endpoint to fetch the JSON data. - Filter the objects where the value of the specified key matches the criterion. - Calculate the average value of another specified numeric key from the filtered objects. - If no objects match the filtering criterion, return an appropriate message. The function should output: float: The average value of the specified numeric key from the filtered objects. You should write self-contained code starting with: ``` import requests def fetch_and_filter(api_url, filter_key, filter_value, avg_key): ```","solution":"import requests def fetch_and_filter(api_url, filter_key, filter_value, avg_key): Fetch a list of JSON objects from the given API endpoint, filter the objects based on a specified key-value criterion, and calculate the average value of a specified numeric key from the filtered objects. Parameters: api_url (str): The API endpoint URL. filter_key (str): The key to filter the JSON objects. filter_value: The value to match against the filter_key. avg_key (str): The key for which to calculate the average value. Returns: float: The average value of the numeric key from the filtered objects. If no objects match the filtering criterion, return a message indicating it. response = requests.get(api_url) data = response.json() # Filter the JSON objects based on the specified key-value criterion filtered_objects = [obj for obj in data if obj.get(filter_key) == filter_value] if not filtered_objects: return \\"No objects matched the filtering criterion.\\" # Calculate the average value of the specified numeric key from the filtered objects total = 0 count = 0 for obj in filtered_objects: if avg_key in obj and isinstance(obj[avg_key], (int, float)): total += obj[avg_key] count += 1 if count == 0: return \\"Filtered objects do not contain the specified numeric key.\\" return total / count"},{"question":"You are given an unsorted array of integers. Your task is to find the length of the longest consecutive elements sequence in the array. The sequence must be made up of consecutive integers in any order. Write a function called `longest_consecutive_sequence` that accepts a list of integers, `nums`, and returns an integer representing the length of the longest consecutive elements sequence. The function should have the following signature: ```python def longest_consecutive_sequence(nums): # your code here pass ``` # Example ```python def longest_consecutive_sequence(nums): # your code here pass # Example usage: nums = [100, 4, 200, 1, 3, 2] length = longest_consecutive_sequence(nums) print(length) ``` **Expected Output**: ``` 4 ``` **Explanation**: The longest consecutive sequence is `[1, 2, 3, 4]`, and its length is 4.","solution":"def longest_consecutive_sequence(nums): Finds the length of the longest consecutive elements sequence in the array. Parameters: nums (list of int): The input list of integers. Returns: int: Length of the longest consecutive elements sequence. if not nums: return 0 nums_set = set(nums) max_length = 0 for num in nums: # Check if it is the start of a sequence if num - 1 not in nums_set: current_num = num current_length = 1 while current_num + 1 in nums_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are tasked with creating a function `generate_histogram` that generates a histogram to visualize the frequency distribution of data values. This function will utilize the following key libraries: Matplotlib and NumPy. # Function Signature: ```python def generate_histogram(data, num_bins, xlabel, ylabel, title): pass ``` # Input Parameters: - `data`: A 1D numpy array containing numerical data values to be binned and plotted. - `num_bins`: An integer representing the number of bins for the histogram. - `xlabel`: A string representing the label for the x-axis of the plot (e.g., \\"Value\\"). - `ylabel`: A string representing the label for the y-axis of the plot (e.g., \\"Frequency\\"). - `title`: A string representing the title of the plot. # Function Requirements: 1. Ensure the function creates a new figure with a width of 8 inches and a height of 6 inches. 2. Use the provided `num_bins` to create the histogram. 3. Set the provided `xlabel` for the x-axis. 4. Set the provided `ylabel` for the y-axis. 5. Set the provided `title` as the title of the plot. 6. Enable the grid with solid lines and 50% opacity. # Expected Plot Output: - A histogram displaying the frequency distribution of the `data` values. - The x-axis should be labeled according to the provided `xlabel` parameter. - The y-axis should be labeled according to the provided `ylabel` parameter. - The plot should have a title according to the provided `title` parameter. Matplotlib and NumPy libraries must be used for the solution. Specifically: - Use `numpy.histogram` to calculate the histogram bins and values. - Use `matplotlib.pyplot.hist` to create the histogram. - Use `matplotlib.pyplot.show` to display the plot. # Example Usage: ```python data = np.array([2.3, 2.3, 3.1, 4.7, 2.9, 5.6, 5.2, 3.3, 2.1, 4.0]) num_bins = 5 xlabel = \\"Value\\" ylabel = \\"Frequency\\" title = \\"Data Value Distribution\\" generate_histogram(data, num_bins, xlabel, ylabel, title) ``` In this example, a histogram should be generated with 5 bins, showing the frequency distribution of the data values. The x-axis should be labeled \\"Value\\", the y-axis should be labeled \\"Frequency\\", and the plot should have the title \\"Data Value Distribution\\".","solution":"import matplotlib.pyplot as plt import numpy as np def generate_histogram(data, num_bins, xlabel, ylabel, title): Generates and displays a histogram for the given data. Parameters: - data (numpy array): 1D array containing numerical data values to be binned and plotted. - num_bins (int): Number of bins for the histogram. - xlabel (str): Label for the x-axis. - ylabel (str): Label for the y-axis. - title (str): Title of the plot. plt.figure(figsize=(8, 6)) plt.hist(data, bins=num_bins) plt.xlabel(xlabel) plt.ylabel(ylabel) plt.title(title) plt.grid(True, linestyle=\'-\', alpha=0.5) plt.show()"},{"question":"You are tasked with writing a function called `max_sum_subarray(arr: List[int], k: int) -> int` that finds the maximum sum of any contiguous subarray of length `k`. The function will take two parameters: 1. `arr` (List[int]): A list of integers representing the array. 2. `k` (int): The length of the subarray. The function should return an integer representing the maximum sum of any contiguous subarray of length `k`. To solve this problem, consider using the sliding window technique, which allows you to efficiently compute the sum of subarrays by reusing previous computations. Function Signature: ```python from typing import List def max_sum_subarray(arr: List[int], k: int) -> int: ``` Examples: ```python print(max_sum_subarray([1, 4, 2, 10, 23, 3, 1, 0, 20], 4)) # 39 print(max_sum_subarray([2, 1, 5, 1, 3, 2], 3)) # 9 print(max_sum_subarray([1, -1, 3, -2, 4, 5, -7], 2)) # 9 ```","solution":"from typing import List def max_sum_subarray(arr: List[int], k: int) -> int: Finds the maximum sum of any contiguous subarray of length `k`. Args: arr (List[int]): A list of integers representing the array. k (int): The length of the subarray. Returns: int: The maximum sum of any contiguous subarray of length `k`. # Edge case: if k is greater than the length of the array, return 0 or handle as needed if k > len(arr): return 0 # Compute the sum of the first k elements max_sum = current_sum = sum(arr[:k]) # Slide the window over the array, compute sum by adding next element and subtracting the first element of the previous window for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are asked to develop a Python function that determines if it is possible to rearrange a given string such that no two adjacent characters are the same. The function should be named `can_rearrange(s)`, where `s` is the input string comprised of lowercase alphabetic characters. To solve this, the function should: 1. Count the frequency of each character in the string. 2. Determine if the most frequent character can be distributed in a way that avoids consecutive repetitions. If it is possible to rearrange the string to satisfy the requirements, the function should return `True`. Otherwise, it should return `False`. For example: - `can_rearrange(\\"aab\\")` should return `True`, because the string can be rearranged to \\"aba\\". - `can_rearrange(\\"aaab\\")` should return `False`, because it is impossible to rearrange the string without having at least two consecutive \'a\'s. The function signature is: ```python def can_rearrange(s: str) -> bool: # Implementation goes here ```","solution":"from collections import Counter def can_rearrange(s: str) -> bool: Determines if it is possible to rearrange the given string such that no two adjacent characters are the same. if not s: return True # Count the frequency of each character char_count = Counter(s) max_freq = max(char_count.values()) # Determine if we can distribute the most frequent character if max_freq > (len(s) + 1) // 2: return False return True"},{"question":"You are required to write a Python function named `find_substring_indices` that identifies all starting indices of a given substring within a larger string. The function will take two parameters: the larger string `text`, and the target substring `substring`. Your task is to find all occurrences of the target substring within the larger string and return a list of starting indices. Here are the steps your function should perform: 1. Iterate through the larger string `text`. 2. Check for the target `substring` starting at each position of `text`. 3. If a match is found, add the starting index of this occurrence to a list. 4. Continue until the end of the string is reached. 5. Return the list of starting indices. Function Signature: ```python def find_substring_indices(text: str, substring: str) -> List[int]: pass ``` **Example Usage:** ```python indices = find_substring_indices(\\"abracadabra\\", \\"abra\\") print(indices) ``` Output should be: ```python [0, 7] ``` **Notes:** - If the `substring` is empty, return an empty list. - If the `substring` does not occur in `text`, return an empty list. **Assumptions:** - Query input strings will be in ASCII characters.","solution":"from typing import List def find_substring_indices(text: str, substring: str) -> List[int]: Function to find all starting indices of a given substring within a larger string. Parameters: text (str): The larger string where we will search the substring. substring (str): The target substring which we will search in the text. Returns: List[int]: A list of starting indices of all occurrences of the substring in the text. indices = [] if not substring: return indices len_substring = len(substring) len_text = len(text) for i in range(len_text - len_substring + 1): if text[i:i+len_substring] == substring: indices.append(i) return indices"},{"question":"Analyzing CSV Data with pandas In this programming assignment, you need to create a function called `analyze_csv` that takes a single argument `file_path`, which is a string representing the path to a CSV file. This function should use the `pandas` library to load and analyze the CSV data. Your goal is to calculate and return the average values of specific columns. # Steps to Follow: 1. **Load the CSV File**: Use the `pandas.read_csv` function to load the CSV file from the given path into a DataFrame. 2. **Calculate Averages**: Calculate the average of numerical values for each column in the DataFrame. 3. **Create Result Dictionary**: Create a dictionary where each key is a column name and the corresponding value is the average of that column. # Requirements: - You must use the `pandas` library to load and analyze the CSV data. - The function must handle cases where the CSV file might contain non-numerical columns, ignoring them in the averaging process. - The function should return a dictionary with the column names as keys and their average values as the values. # Function Signature: ```python def analyze_csv(file_path: str) -> dict: pass ``` # Example: ```python file_path = \\"data.csv\\" averages = analyze_csv(file_path) print(averages) # Should print a dictionary with column names and their average values ``` In this problem, you will practice using the `pandas` library to read data from a CSV file and perform data analysis by calculating average values, which are common tasks in data preprocessing and exploratory data analysis.","solution":"import pandas as pd def analyze_csv(file_path: str) -> dict: Loads a CSV file and calculates the average of numerical values for each column. Args: file_path: str : The path to the CSV file Returns: dict : A dictionary where each key is a column name and the value is the average of that column # Load the CSV file into a pandas DataFrame df = pd.read_csv(file_path) # Create a dictionary to store the average values averages = {} # Iterate over each column in the DataFrame for column in df.columns: if pd.api.types.is_numeric_dtype(df[column]): averages[column] = df[column].mean() return averages"},{"question":"You are required to write a Python function named `fibonacci_sum(n)` that calculates the sum of the first `n` Fibonacci numbers. The Fibonacci sequence is defined as follows: - ( F_0 = 0 ) - ( F_1 = 1 ) - ( F_n = F_{n-1} + F_{n-2} ) for ( n geq 2 ) To implement the function `fibonacci_sum(n)`, follow these steps: 1. Initialize two variables `a` and `b` to 0 and 1 respectively (representing the first two Fibonacci numbers). 2. Create a variable `sum_fib` initialized to 0. 3. Use a loop that iterates `n` times. 4. In each iteration: - Add the current Fibonacci number (`a`) to `sum_fib`. - Compute the next Fibonacci number and update `a` and `b` accordingly. 5. After the loop, return the value of `sum_fib`. # Example: ```python # Example usage: result = fibonacci_sum(6) print(result) # output should be 20 (0 + 1 + 1 + 2 + 3 + 5 + 8 = 20) ``` # Constraints: - You may assume that the input `n` is a positive integer.","solution":"def fibonacci_sum(n): Calculates the sum of the first n Fibonacci numbers. a, b = 0, 1 sum_fib = 0 for _ in range(n): sum_fib += a a, b = b, a + b return sum_fib"},{"question":"You have been asked to create a function to reverse the nodes of a linked list in groups of a given size `k`. The function should be named `reverse_k_group` and should accept two arguments: - `head` which represents the head node of the linked list. - `k` which specifies the number of nodes to reverse at a time. The linked list is structured using the following `ListNode` class: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` Your task is to implement the `reverse_k_group` function such that: - The function reverses the nodes in the linked list in groups of `k` and returns the new head of the list. - If the number of nodes remaining in the linked list is less than `k`, they should remain as is. For example, given the linked list `1 -> 2 -> 3 -> 4 -> 5` and `k = 3`: - The output should be: `3 -> 2 -> 1 -> 4 -> 5`. Consider edge cases where the linked list length is less than `k`, or `k` is `1` (no changes to the linked list). Function Signature: ```python def reverse_k_group(head: ListNode, k: int) -> ListNode: ... ```","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_k_group(head: ListNode, k: int) -> ListNode: if not head or k <= 1: return head dummy = ListNode(0) dummy.next = head prev = dummy current = dummy next_group = dummy # Count the number of nodes in the linked list node_count = 0 while current.next: node_count += 1 current = current.next while node_count >= k: current = prev.next next_group = current.next # Reverse k nodes for _ in range(1, k): current.next = next_group.next next_group.next = prev.next prev.next = next_group next_group = current.next prev = current node_count -= k return dummy.next"},{"question":"You need to implement a function called `find_most_frequent_word` that will read the contents of a text file and return the word that appears most frequently. This is designed to test your ability to handle file input and perform basic text processing in Python. Your function, `find_most_frequent_word`, should take one parameter: - `file_path` (str): The path to the input text file. The function should do the following: 1. Open the specified file and read its contents. 2. Split the contents into words, treating any sequence of characters separated by whitespace as a word. 3. Convert all words to lowercase to ensure case insensitivity. 4. Count the occurrences of each word. 5. Determine the word with the highest frequency. 6. Return the most frequent word. If there is a tie, return the word that appears first in the file. **Example** For a file with the following content: ``` Weather is great today. The weather forecasts predicted good weather. ``` The function should return `\\"weather\\"`. **Note**: Assume words are separated by spaces or newline characters and ignore punctuation marks. Here is a template to get you started: ```python def find_most_frequent_word(file_path): with open(file_path, \'r\') as file: content = file.read() # Your code here ``` Implement the `find_most_frequent_word` function to achieve the specified functionality.","solution":"def find_most_frequent_word(file_path): import re from collections import Counter with open(file_path, \'r\') as file: content = file.read() words = re.findall(r\'bw+b\', content.lower()) word_count = Counter(words) most_common_word, _ = word_count.most_common(1)[0] return most_common_word"},{"question":"You are required to write a Python function named `generate_pascals_triangle` that generates Pascal\'s triangle up to a given number of rows. The function should return a list of lists, where each inner list represents a row in Pascal\'s triangle. **Function Signature** ```python def generate_pascals_triangle(rows: int) -> list: ... ``` # Requirements: - **Function Argument**: 1. `rows` (int): A non-negative integer indicating the number of rows in Pascal\'s triangle. - **Return**: A list of lists, where each inner list represents a row in Pascal\'s triangle. # Constraints - The input parameter `rows` must be non-negative. If a negative number is provided, raise an `AssertionError` with the message `rows is negative: {rows}`. # Implementation Details - Pascal\'s Triangle is a triangular array of binomial coefficients. Each number is the sum of the two directly above it. # Example Usage: ```python print(generate_pascals_triangle(5)) # Expected output: # [ # [1], # [1, 1], # [1, 2, 1], # [1, 3, 3, 1], # [1, 4, 6, 4, 1] # ] ``` # Important Notes: - The first row of Pascal\'s triangle is `[1]`. - Each subsequent row can be generated by adding the number above and to the left with the number above and to the right. If a position does not exist, use 0. ```python def generate_pascals_triangle(rows: int) -> list: assert rows >= 0, f\\"rows is negative: {rows}\\" result = [] for i in range(rows): row = [1] * (i + 1) for j in range(1, i): row[j] = result[i - 1][j - 1] + result[i - 1][j] result.append(row) return result ```","solution":"def generate_pascals_triangle(rows: int) -> list: Generates Pascal\'s Triangle up to a given number of rows. Parameters: rows (int): The number of rows in Pascal\'s Triangle to generate. Returns: list: A list of lists, where each inner list represents a row in Pascal\'s Triangle. assert rows >= 0, f\\"rows is negative: {rows}\\" result = [] for i in range(rows): row = [1] * (i + 1) for j in range(1, i): row[j] = result[i - 1][j - 1] + result[i - 1][j] result.append(row) return result"},{"question":"Write a Python function that simulates a basic temperature conversion tool. The function will convert a list of temperatures from Fahrenheit to Celsius and vice versa based on user preference. **Objective**: Write a function named `temperature_converter` that: 1. Accepts a list of temperatures and a conversion choice from the user: either \'F\' for Fahrenheit to Celsius or \'C\' for Celsius to Fahrenheit. 2. Converts each temperature in the list according to the user\'s choice. 3. Prints each temperature before and after the conversion. 4. Returns a new list containing the converted temperatures. **Conversion Formulas**: - Fahrenheit to Celsius: `C = (F - 32) * 5/9` - Celsius to Fahrenheit: `F = (C * 9/5) + 32` **Example**: ``` Enter the conversion type (F to C or C to F): >>> F Enter the list of temperatures in Fahrenheit: >>> [32, 212, 98.6, 50] Output: 32 Fahrenheit is 0 Celsius. 212 Fahrenheit is 100 Celsius. 98.6 Fahrenheit is 37 Celsius. 50 Fahrenheit is 10 Celsius. The function should return: [0, 100, 37, 10] ``` **Note**: Ensure that the function handles both conversion types and validates user inputs appropriately.","solution":"def temperature_converter(temperatures, conversion_type): Converts a list of temperatures between Fahrenheit and Celsius based on the conversion type. Parameters: temperatures (list): List of temperatures to be converted. conversion_type (str): \'F\' for Fahrenheit to Celsius, \'C\' for Celsius to Fahrenheit. Returns: list: A new list with the converted temperatures. if conversion_type not in [\'F\', \'C\']: raise ValueError(\\"Invalid conversion type. Please use \'F\' for Fahrenheit to Celsius or \'C\' for Celsius to Fahrenheit.\\") converted_temperatures = [] if conversion_type == \'F\': for temp in temperatures: celsius = (temp - 32) * 5 / 9 print(f\\"{temp} Fahrenheit is {celsius:.2f} Celsius.\\") converted_temperatures.append(round(celsius, 2)) elif conversion_type == \'C\': for temp in temperatures: fahrenheit = (temp * 9 / 5) + 32 print(f\\"{temp} Celsius is {fahrenheit:.2f} Fahrenheit.\\") converted_temperatures.append(round(fahrenheit, 2)) return converted_temperatures"},{"question":"Write a function that accepts a list of dictionaries and merges them into a single dictionary. The function should combine the dictionaries such that if they have the same key, the associated values are summed up if they are integers. If the values are of any other type or are incompatible for summation, they should be stored in a list under that key. The function should return the resulting merged dictionary. You should write self-contained code starting with: ``` def merge_dictionaries(dicts_list): ``` Example: ``` dicts_list = [{\'a\': 1, \'b\': 2}, {\'a\': 3, \'b\': [4]}, {\'a\': \'x\', \'c\': 5}] merged_dict = merge_dictionaries(dicts_list) print(merged_dict) ``` Expected output: ``` {\'a\': [1, 3, \'x\'], \'b\': [2, [4]], \'c\': 5} ```","solution":"def merge_dictionaries(dicts_list): Merges a list of dictionaries such that if keys are the same, integer values are summed and other types are stored in a list. merged_dict = {} for d in dicts_list: for key, value in d.items(): if key in merged_dict: if isinstance(value, int) and isinstance(merged_dict[key], int): merged_dict[key] += value else: if not isinstance(merged_dict[key], list): merged_dict[key] = [merged_dict[key]] merged_dict[key].append(value) else: merged_dict[key] = value return merged_dict"},{"question":"Write a function to create a bar chart that compares the population of five different countries. Use Matplotlib to visualize the data with properly labeled axes and a title. Assume the function receives a dictionary where keys are country names and values are their respective populations. The function should output the Matplotlib `Axes` object containing the plot. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt def plot_population(population_dict): ```","solution":"import matplotlib.pyplot as plt def plot_population(population_dict): Creates a bar chart comparing the population of five different countries. Args: population_dict (dict): A dictionary where keys are country names and values are their respective populations. Returns: Axes: The Matplotlib Axes object containing the plot. countries = list(population_dict.keys()) populations = list(population_dict.values()) fig, ax = plt.subplots() ax.bar(countries, populations, color=\'skyblue\') ax.set_xlabel(\'Country\') ax.set_ylabel(\'Population\') ax.set_title(\'Population of Five Different Countries\') return ax"},{"question":"You are asked to develop a function `generate_statistics` that calculates summary statistics for a given dataset and returns the modified dataset based on conditions specified with input parameters. The dataset consists of continuous numerical features and integer labels. The function should: 1. **Calculate Statistics:** - Compute the mean, median, and standard deviation of each feature in the dataset. 2. **Modify Features:** - If `operation` is `\'scale\'`: Standardize the features using Z-score scaling ((value - mean) / std). - If `operation` is `\'center\'`: Center the features by subtracting the mean. - Otherwise, return the features as they are. 3. **Modify Labels:** - If `threshold` is specified (an integer): - Relabel the samples such that any label above the threshold is set to the threshold value. - If `threshold` is not specified, leave the labels unchanged. 4. **Return Data:** - The function should return a dictionary with `statistics` containing the calculated summary statistics (mean, median, std for each feature) and `data` containing the modified dataset. **Function Signature:** ```python def generate_statistics(dataset, operation, threshold=None): # dataset: input dataset with attributes `X` for features and `Y` for labels # operation: a string specifying the operation to perform on features (\'scale\', \'center\', or other) # threshold: an optional integer specifying the threshold for modifying labels pass ``` **Dataset Schema:** - `dataset.X`: A 2-dimensional NumPy array representing the continuous features. - `dataset.Y`: A 1-dimensional NumPy array representing the integer labels. Use the provided libraries: - `numpy` **Constraints:** - Implement the function `generate_statistics` as specified. - Ensure proper calculation of statistics and correct modifications to the dataset. - Ensure that the returned dictionary format strictly follows the specifications outlined above. Here is a sample dataset structure for testing purposes: ```python import numpy as np Dataset = namedtuple(\'Dataset\', [\'X\', \'Y\']) dataset = Dataset( X=np.array([[10, 20], [30, 40], [50, 60], [70, 80]]), Y=np.array([1, 2, 3, 4]) ) ```","solution":"import numpy as np from collections import namedtuple def generate_statistics(dataset, operation, threshold=None): X = dataset.X Y = dataset.Y statistics = { \'mean\': np.mean(X, axis=0).tolist(), \'median\': np.median(X, axis=0).tolist(), \'std\': np.std(X, axis=0, ddof=1).tolist() } if operation == \'scale\': mean = np.mean(X, axis=0) std = np.std(X, axis=0, ddof=1) X = (X - mean) / std elif operation == \'center\': mean = np.mean(X, axis=0) X = X - mean if threshold is not None: Y = np.minimum(Y, threshold) return { \'statistics\': statistics, \'data\': {\'X\': X, \'Y\': Y} }"},{"question":"Write a Python function to find all the duplicate subtrees in a binary tree. A duplicate subtree is defined as a subtree that appears more than once with the same structure and node values. The function should return a list of root nodes of all duplicate subtrees. Two or more subtrees are duplicate if they have the same structure and node values. You are required to use the TreeNode class definition provided below, which defines a binary tree node with `val`, `left`, and `right` attributes. Function Signature: ```python def find_duplicate_subtrees(root: TreeNode) -> List[TreeNode]: ``` Where: - `root` is the root node of the binary tree. - The function should return a list of `TreeNode` objects, each representing the root of a duplicate subtree. The TreeNode class is defined as: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Example: ```python # Constructing the following tree: # 1 # / # 2 3 # / / # 4 2 4 # / # 4 node1 = TreeNode(1) node2a = TreeNode(2) node2b = TreeNode(2) node3 = TreeNode(3) node4a = TreeNode(4) node4b = TreeNode(4) node4c = TreeNode(4) node1.left = node2a node1.right = node3 node2a.left = node4a node3.left = node2b node3.right = node4b node2b.left = node4c duplicates = find_duplicate_subtrees(node1) # Output: [TreeNode(2, TreeNode(4)), TreeNode(4)] ``` In this example, the output includes two duplicate subtrees: one with root value `2` with a left child subtree with root value `4`, and one with root value `4`.","solution":"from typing import List, Tuple, Dict from collections import defaultdict class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_duplicate_subtrees(root: TreeNode) -> List[TreeNode]: def collect(node: TreeNode) -> Tuple: if not node: return \\"#\\" left = collect(node.left) right = collect(node.right) subtree = f\\"{node.val},{left},{right}\\" count[subtree] += 1 if count[subtree] == 2: result.append(node) return subtree count = defaultdict(int) result = [] collect(root) return result"},{"question":"** You are given a text file named `sales_data.txt` containing sales information for various products in a store. Each line in the file represents a sale and has the following comma-separated format: `product_name,quantity,price_per_unit`. Your task is to implement a function that: 1. Reads the `sales_data.txt` file. 2. Calculates the total revenue generated by each product. 3. Returns a dictionary with product names as keys and their total revenues as values. The function should be named `calculate_total_revenue`. Here is the function signature: ```python def calculate_total_revenue(file_path: str) -> dict: pass ``` An example sales_data.txt file content: ``` apple,10,0.50 banana,5,0.30 apple,5,0.50 orange,8,0.75 banana,7,0.30 ``` For the example content above, the function should return: ```python { \'apple\': 7.5, \'banana\': 3.6, \'orange\': 6.0 } ``` Make sure to handle cases where the file may be large by reading it line by line. **","solution":"def calculate_total_revenue(file_path: str) -> dict: Reads the `sales_data.txt` file and calculates the total revenue generated by each product. Args: - file_path (str): The path to the sales data file. Returns: - dict: A dictionary with product names as keys and their total revenues as values. total_revenue = {} with open(file_path, \'r\') as file: for line in file: product_name, quantity, price_per_unit = line.strip().split(\',\') quantity = int(quantity) price = float(price_per_unit) revenue = quantity * price if product_name in total_revenue: total_revenue[product_name] += revenue else: total_revenue[product_name] = revenue return total_revenue"},{"question":"You are required to write a function named `calculate_invoice(file_path: str, discount_rate: float) -> None` that reads product records from a JSON file, applies a discount to each product\'s price, calculates the total invoice price after discount, and updates the file accordingly. This will utilize the `json` library for handling serialization and deserialization of the records. The product records in the file are stored as a list of dictionaries, where each dictionary represents a product with the keys: - `ProductID`: A unique string identifier for the product. - `ProductName`: A string representing the name of the product. - `Price`: A float representing the price of the product. Your function should: 1. Load the product records from the JSON file using `json.load()`. 2. Apply the given discount rate to each product\'s price (discounted price = original price * (1 - discount_rate)). 3. Calculate the total invoice price by summing the discounted prices of all products. 4. Print the total invoice price. 5. Save the updated product records (with discounted prices) back to the JSON file using `json.dump()`. Handle the following exceptions gracefully: - `FileNotFoundError`: If the specified file does not exist. - `json.JSONDecodeError`: If the file contains invalid JSON. # Example Usage: ```python # Product records before discount: # [ # {\\"ProductID\\": \\"P001\\", \\"ProductName\\": \\"Laptop\\", \\"Price\\": 1500.00}, # {\\"ProductID\\": \\"P002\\", \\"ProductName\\": \\"Smartphone\\", \\"Price\\": 500.00} # ] # calling with a valid file path and a discount rate of 10% (0.1): calculate_invoice(\'products.json\', 0.1) # After function execution, the output will be: Total invoice price after discount: 1800.0 # The JSON file will now be: # [ # {\\"ProductID\\": \\"P001\\", \\"ProductName\\": \\"Laptop\\", \\"Price\\": 1350.00}, # {\\"ProductID\\": \\"P002\\", \\"ProductName\\": \\"Smartphone\\", \\"Price\\": 450.00} # ] ``` # Constraints: - You must use the `json` library to handle the serialization and deserialization of data. - The discount rate should be a float between 0 and 1. - The JSON file will always contain a list of product dictionaries following the described format.","solution":"import json def calculate_invoice(file_path: str, discount_rate: float) -> None: try: with open(file_path, \'r\') as file: products = json.load(file) total_invoice_price = 0.0 for product in products: original_price = product[\'Price\'] discounted_price = original_price * (1 - discount_rate) product[\'Price\'] = round(discounted_price, 2) total_invoice_price += discounted_price print(f\\"Total invoice price after discount: {round(total_invoice_price, 2)}\\") with open(file_path, \'w\') as file: json.dump(products, file, indent=4) except FileNotFoundError: print(\\"The specified file does not exist.\\") except json.JSONDecodeError: print(\\"The file contains invalid JSON.\\")"},{"question":"You are asked to write a function called `compare_word_frequencies` that takes a list of sentences and a target word, and calculates the frequency of the target word in each sentence. This function should handle case-insensitive comparisons and return the sentence with the highest frequency of the target word. **Requirements:** 1. The function should take in two arguments: - `sentences`: A list of strings where each string represents a sentence. - `target_word`: A string representing the word to count in each sentence. 2. The function should: - Convert all words in the sentences and the target word to lowercase for case-insensitive comparison. - Calculate the frequency of the target word in each sentence. - Identify the sentence with the maximum frequency of the target word. - Return the identified sentence with the highest frequency. If there is a tie, return the first sentence that achieves this frequency. 3. You may assume that the list of sentences is non-empty and that each sentence contains at least one word. Here is the function signature for your reference: ```python def compare_word_frequencies(sentences, target_word): # Your code goes here ``` **Example:** ```python sentences = [ \\"The quick brown fox jumps over the lazy dog\\", \\"The fox is quick and the dog is lazy\\", \\"The dog and the fox are friends\\" ] target_word = \\"the\\" # Calling the function output_sentence = compare_word_frequencies(sentences, target_word) print(output_sentence) # Output should be: \\"The quick brown fox jumps over the lazy dog\\" ```","solution":"def compare_word_frequencies(sentences, target_word): target_word = target_word.lower() max_frequency = -1 result_sentence = \\"\\" for sentence in sentences: words = sentence.lower().split() frequency = words.count(target_word) if frequency > max_frequency: max_frequency = frequency result_sentence = sentence return result_sentence"},{"question":"Create a function named `find_missing_number` that identifies a single missing number in an arithmetic progression (AP). The function should have the following parameter: - `arr`: A list of integers, representing the AP with one number missing. The function should return the missing number. You can assume that the list will have at least 2 elements and that there is exactly one number missing in the sequence. **Function Signature:** ```python def find_missing_number(arr: List[int]) -> int: pass ``` **Examples:** ```python >>> arr = [2, 4, 6, 8, 12] >>> find_missing_number(arr) 10 >>> arr = [15, 12, 6, 3] >>> find_missing_number(arr) 9 ``` **Explanation:** In the first example, the arithmetic progression is `[2, 4, 6, 8, 10, 12]`, with 10 missing from the sequence. In the second example, the arithmetic progression is `[15, 12, 9, 6, 3]`, with 9 missing from the sequence.","solution":"from typing import List def find_missing_number(arr: List[int]) -> int: # Calculate the step of the arithmetic progression n = len(arr) total_sum = (n + 1) * (arr[0] + arr[-1]) // 2 # Sum of n+1 terms in AP actual_sum = sum(arr) # Sum of given sequence with one missing number # Missing number is the difference between expected sum and actual sum missing_number = total_sum - actual_sum return missing_number"},{"question":"Create a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. If no prime numbers are found, the function should return an empty list. The function should: - Handle edge cases such as an empty list or lists with no prime numbers. - Be efficient in checking for prime numbers. The function should output: List of prime numbers You should write self-contained code starting with: ``` def filter_primes(numbers): ```","solution":"def filter_primes(numbers): Returns a list containing only the prime numbers from the original list. :param numbers: List of integers to filter. :return: List of prime numbers. def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True return [num for num in numbers if is_prime(num)]"},{"question":"You need to write a function `reversedfileread(filename)` that reads the contents of a file specified by `filename`, reverses the content of each line, and then prints the reversed content to the console. # Function Signature ```python def reversedfileread(filename: str) -> None: pass ``` # Input - `filename`: A string representing the name of the file that needs to be read. # Output The function does not return any value, but it prints the reversed content of each line to the console. # Example Assuming the file `sample.txt` contains the following lines: ``` Hello World Python Programming Line by Line ``` Calling the function ```python reversedfileread(\\"sample.txt\\") ``` should output: ``` dlroW olleH gnimmargorP nohtyP eniL yb eniL ``` # Additional Notes - Ensure the file reading is done in a way that handles possible file opening errors gracefully. - The function should handle empty files correctly by not printing anything. - Consider edge cases where lines are of varying lengths or contain special characters.","solution":"def reversedfileread(filename: str) -> None: Reads the content of the file line by line, reverses the content of each line, and prints out the reversed content. try: with open(filename, \'r\') as file: lines = file.readlines() for line in lines: # Strip the newline character before reversing for cleaner output print(line.strip()[::-1]) except FileNotFoundError: print(f\\"File \'{filename}\' not found.\\") except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"You are tasked with creating a function called `find_most_frequent_word` that takes a string of text as input and returns the most frequently occurring word in that text. In case of a tie (i.e., multiple words with the same highest frequency), return the word that appears first in the text. Ignore punctuation and consider words to be case insensitive. The function signature should be: ```python def find_most_frequent_word(text: str) -> str: ``` The process involves the following steps: 1. Convert the input text to lowercase. 2. Remove any punctuation marks from the text. 3. Split the text into individual words. 4. Count the frequency of each word. 5. Identify the word with the highest frequency. 6. In case of a tie, choose the word that appears first in the text. **Example Usage:** ```python text = \\"To be, or not to be, that is the question.\\" most_frequent_word = find_most_frequent_word(text) print(most_frequent_word) # Output: \\"to\\" ``` Ensure the implementation properly handles punctuation, case insensitivity, and ties in word frequency.","solution":"import string def find_most_frequent_word(text: str) -> str: Returns the most frequently occurring word in the text. In case of a tie, returns the word that appears first. # Convert text to lowercase text = text.lower() # Remove punctuation text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split text into words words = text.split() # Count the frequency of each word word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 # Find the word with the highest frequency highest_freq = 0 most_frequent_word = \\"\\" for word in words: if word_count[word] > highest_freq: highest_freq = word_count[word] most_frequent_word = word elif word_count[word] == highest_freq: continue return most_frequent_word"},{"question":"Your task is to write a function that rotates a matrix by 90 degrees clockwise. This exercise will help you understand matrix manipulation using the `numpy` library. **Function Signature**: ```python def rotate_matrix_90_clockwise(matrix: np.ndarray) -> np.ndarray: ``` **Parameters**: - `matrix` (np.ndarray): A 2D numpy array representing the matrix. **Returns**: - `np.ndarray`: A new 2D numpy array representing the rotated matrix. Use the following library functions in your implementation: 1. `numpy.array` 2. `numpy.rot90` **Hints**: - Use `numpy.rot90` with the appropriate `k` parameter to perform the rotation. **Example**: ```python import numpy as np # Example usage matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # Calling the function rotated_matrix = rotate_matrix_90_clockwise(matrix) # Expected output # array([[7, 4, 1], # [8, 5, 2], # [9, 6, 3]]) print(rotated_matrix) ``` In this example, the 3x3 matrix is rotated by 90 degrees clockwise. The function should return the new matrix as shown in the expected output.","solution":"import numpy as np def rotate_matrix_90_clockwise(matrix: np.ndarray) -> np.ndarray: Rotates the given 2D numpy array (matrix) by 90 degrees clockwise. Parameters: - matrix (np.ndarray): A 2D numpy array representing the matrix. Returns: - np.ndarray: A new 2D numpy array representing the rotated matrix. return np.rot90(matrix, k=-1)"},{"question":"You are tasked with writing a Python function to simulate the position of an object under constant acceleration in one-dimensional space. This problem helps you practice using basic kinematic equations and reinforces understanding of Python\'s arithmetic operations. The position `s` of an object under constant acceleration `a` can be computed using the equation: [ s = ut + frac{1}{2} a t^2 ] where: - `u` is the initial velocity, - `t` is the time, - `a` is the constant acceleration. You need to implement a function named `calculate_position` that takes three parameters: - `initial_velocity`: a float representing the initial velocity `u` in meters per second. - `time`: a float representing the time `t` in seconds. - `acceleration`: a float representing the constant acceleration `a` in meters per second squared. The function should: - Use the given values to compute the position `s`. - Return the position as a float. Here is the function signature: ```python def calculate_position(initial_velocity: float, time: float, acceleration: float) -> float: # implementation goes here ``` **Example:** ```python print(calculate_position(10, 5, 2)) ``` Expected output: ```python 75.0 ```","solution":"def calculate_position(initial_velocity: float, time: float, acceleration: float) -> float: Calculate the position of an object under constant acceleration. Parameters: initial_velocity (float): Initial velocity (u) in meters per second. time (float): Time (t) in seconds. acceleration (float): Constant acceleration (a) in meters per second squared. Returns: float: The computed position s in meters. # Calculate the position using the kinematic equation: s = ut + 0.5 * a * t^2 position = initial_velocity * time + 0.5 * acceleration * time**2 return position"},{"question":"Design a function called `custom_sort` that sorts a given list of strings based on the following criteria: 1. Strings that contain only alphabetic characters should be placed before strings that contain any non-alphabetic characters. 2. Within each group (pure alphabetic and non-alphabetic), the strings should be sorted alphabetically in ascending order. 3. The function should be case-insensitive, i.e., \'apple\' and \'Apple\' should be considered equal. The function should take a list of strings as input and return a new list sorted according to the criteria mentioned above. **Function Signature:** ```python def custom_sort(strings: List[str]) -> List[str]: Sorts a list of strings based on specific criteria: 1. Strings with only alphabetic characters come first. 2. Within each category, strings are sorted alphabetically, case-insensitively. Args: strings (List[str]): The list of strings to sort. Returns: List[str]: The sorted list of strings. # Your code goes here ``` **Example:** ```python input_list = [\'apple\', \'123\', \'Banana\', \'cat1\', \'dog\', \'elephant\', \'fish\'] sorted_list = custom_sort(input_list) print(sorted_list) ``` **Output:** `[\'apple\', \'Banana\', \'dog\', \'elephant\', \'fish\', \'123\', \'cat1\']` The function sorts the given list of strings by placing pure alphabetic strings first, sorted all alphabetic strings case-insensitively in ascending order, and then the rest of the strings in alphabetic order, following the same case-insensitive rule.","solution":"from typing import List def custom_sort(strings: List[str]) -> List[str]: def is_alpha(string: str) -> bool: return string.isalpha() # Sort the list first by whether the strings contain only alphabetic characters, # then alphabetically case-insensitively sorted_strings = sorted(strings, key=lambda x: (not is_alpha(x), x.lower())) return sorted_strings"},{"question":"Creates a function that takes a list of dictionaries representing a collection of books and filters out books with a rating less than a specified threshold. Each dictionary contains \'title\' (str), \'author\' (str), \'rating\' (float), and \'year\' (int). The function should return a new list of dictionaries containing only the books that meet or exceed the specified rating threshold. Ensure the output list is sorted by year in ascending order, and the input list remains unchanged. You should write self-contained code starting with: ``` def filter_books(book_list, min_rating): ```","solution":"def filter_books(book_list, min_rating): Filters out books with a rating less than the specified threshold and returns a new list of books meeting or exceeding the rating threshold, sorted by year in ascending order. Parameters: book_list (list of dict): List of books, where each book is represented by a dictionary with \'title\', \'author\', \'rating\', and \'year\' keys. min_rating (float): The minimum rating threshold to filter books. Returns: list of dict: A new list of books that meet or exceed the rating threshold, sorted by year. filtered_books = [book for book in book_list if book[\'rating\'] >= min_rating] sorted_filtered_books = sorted(filtered_books, key=lambda x: x[\'year\']) return sorted_filtered_books"},{"question":"You are tasked with creating a function in Python that reads, processes, and summarizes data from a CSV file. Your function should compute summary statistics (mean, median, and standard deviation) for a specified column in the CSV file. To fulfill this task, implement the following function: ```python def summarizeCSVColumn(filePath: str, columnName: str) -> Tuple[float, float, float]: Calculates and returns the mean, median, and standard deviation of a specified column in a CSV file. Parameters: - filePath (str): The path to the CSV file. - columnName (str): The name of the column to be summarized. Returns: - Tuple[float, float, float]: A tuple containing the mean, median, and standard deviation of the specified column. This function reads the data from the CSV file, processes the specified column, and computes the summary statistics. The function should: 1. Read the CSV file from the provided file path. 2. Extract the specified column from the CSV data. 3. Compute the mean, median, and standard deviation of the column values. 4. Return the computed mean, median, and standard deviation as a tuple in the specified order. You may assume `pandas` has already been imported as `pd` and `numpy` as `np`. Your focus is to correctly implement the `summarizeCSVColumn` function to perform these tasks and return the accurate summary statistics.","solution":"import pandas as pd import numpy as np from typing import Tuple def summarizeCSVColumn(filePath: str, columnName: str) -> Tuple[float, float, float]: Calculates and returns the mean, median, and standard deviation of a specified column in a CSV file. Parameters: - filePath (str): The path to the CSV file. - columnName (str): The name of the column to be summarized. Returns: - Tuple[float, float, float]: A tuple containing the mean, median, and standard deviation of the specified column. # Read the CSV file df = pd.read_csv(filePath) # Extract the specified column column_data = df[columnName] # Calculate the mean, median, and standard deviation mean = column_data.mean() median = column_data.median() std_dev = column_data.std() return mean, median, std_dev"},{"question":"You are required to implement a function `calculate_polygons_areas(vertices)` which takes a list of vertex coordinates representing different polygons and returns a list of their respective areas. Each polygon is represented by a list of tuples, where each tuple consists of the `x` and `y` coordinates of a vertex. The vertices of each polygon are provided in the order that forms the polygon. To calculate the area of each polygon, use the Shoelace formula (also known as Gauss\'s area formula): [ text{Area} = frac{1}{2} left| sum_{i=1}^{n-1} (x_i cdot y_{i+1} - y_i cdot x_{i+1}) + (x_n cdot y_1 - y_n cdot x_1) right| ] where ( n ) is the number of vertices, and ((x_i, y_i)) are the coordinates of the (i)-th vertex. **Function Signature:** ```python def calculate_polygons_areas(vertices: list) -> list: ``` **Requirements:** - Implement the Shoelace formula to determine the area of each polygon. - Handle the case where the polygon has fewer than three vertices by returning an area of zero for that polygon. **Example:** ```python vertices = [ [(0,0), (4,0), (4,3)], # Triangle [(1,1), (2,3), (4,1)], # Triangle [(0,0), (4,0), (4,4), (0,4)], # Square [(1,1), (2,2)] # Invalid (not a polygon) ] ``` The function should return: ```python [6.0, 3.0, 16.0, 0.0] ``` **Explanation:** 1. For the first polygon (a right triangle with vertices at (0,0), (4,0), and (4,3)), the area is 6.0. 2. For the second polygon (a triangle with vertices at (1,1), (2,3), and (4,1)), the area is 3.0. 3. For the third polygon (a square with vertices at (0,0), (4,0), (4,4), (0,4)), the area is 16.0. 4. For the fourth polygon (with vertices at (1,1), (2,2)), it is not valid as a polygon since it does not have at least three vertices, hence the area is 0.0.","solution":"def calculate_polygons_areas(vertices): Given a list of polygons represented by their vertices, calculate their areas. :param vertices: List of polygons, each polygon represented as a list of (x, y) tuples :return: List of areas of each polygon areas = [] for polygon in vertices: if len(polygon) < 3: areas.append(0.0) continue n = len(polygon) area = 0.0 for i in range(n): x1, y1 = polygon[i] x2, y2 = polygon[(i + 1) % n] area += x1 * y2 - y1 * x2 area = abs(area) / 2.0 areas.append(area) return areas"},{"question":"Create a function that takes as input an array of integers and returns the maximum product of any three distinct numbers in the array. If the array contains fewer than three integers, the function should return None. The function prototype should be: ``` def maximum_product_of_three(nums): ``` The function should output: ``` max_product (int or None): The maximum product of any three distinct numbers in the array, or None if the array has fewer than three integers. ``` Note: Handle cases with negative numbers and ensure the solution is efficient with a time complexity of at most O(n log n).","solution":"def maximum_product_of_three(nums): Returns the maximum product of any three distinct numbers in the array. If the array contains fewer than three integers, return None. if len(nums) < 3: return None nums.sort() # The maximum product of three numbers can be either: # 1. The product of the three largest numbers, or # 2. The product of the two smallest and the largest number max_product = max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3]) return max_product"},{"question":"Implement a function named `reverse_string_multiprocessing` that takes a list of strings as an argument and returns a list where each string is reversed. Use Python\'s `multiprocessing` library to run the `reverse_string_multiprocessing` function in a separate process. Steps to follow: 1. Create a list of 5 random strings. Each string is of length 5 and consists of lowercase alphabets. 2. Utilize the `multiprocessing.Process` class to create a new process that executes the `reverse_string_multiprocessing` function. 3. Return the reversed list of strings from the function and print it in the main program. # Function Signature ```python def reverse_string_multiprocessing(input_list: list[str]) -> list[str]: pass ``` # Example ```python # Sample Input input_list = [\\"apple\\", \\"hello\\", \\"world\\"] # Expected Output [\'elppa\', \'olleh\', \'dlrow\'] ``` # Additional Requirements - Use the `multiprocessing.Process` class from the `multiprocessing` library for running the `reverse_string_multiprocessing` function. - Use the `choices` function from the `random` library to generate the list of random strings. # Note Ensure the communication between the main process and the child process is handled correctly to retrieve and print the results in the main program.","solution":"import multiprocessing import random import string def reverse_string_worker(input_list, result, index): result[index] = [s[::-1] for s in input_list] def reverse_string_multiprocessing(input_list: list[str]) -> list[str]: manager = multiprocessing.Manager() result = manager.list([None]) process = multiprocessing.Process(target=reverse_string_worker, args=(input_list, result, 0)) process.start() process.join() return result[0] # Function to create a list of 5 random strings, each of length 5 def generate_random_strings(): return [\'\'.join(random.choices(string.ascii_lowercase, k=5)) for _ in range(5)]"},{"question":"You are required to write a Python function that reads a list of integers from the user and returns a new list where each element is the product of all the numbers in the original list except for the number at that position. The function should not use division. The function to implement is `product_except_self`, and it should ensure that: 1. It takes a single list of integers as input. 2. It returns a list of the products as described. For example: - Input: `[1, 2, 3, 4]` - Output: `[24, 12, 8, 6]` In this example, the first number in the output list is the product of `2 * 3 * 4 = 24`, the second number is the product of `1 * 3 * 4 = 12`, the third number is the product of `1 * 2 * 4 = 8`, and the fourth number is the product of `1 * 2 * 3 = 6`. You are expected to handle possible edge cases, such as empty input lists or lists with one element. Note that the function must be efficient and handle large lists gracefully. Write the `product_except_self` function as specified.","solution":"def product_except_self(nums): Returns a list where each element is the product of all the elements of the input list except the one at that position. :param nums: List of integers :return: List of integers if not nums: return [] n = len(nums) if n == 1: return [0] # Initialize the result array with 1s result = [1] * n # Calculate products of all elements to the left of each element left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Calculate products of all elements to the right of each element and multiply it with the left product right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Imagine you are working with a data science team analyzing customer information stored in a **pandas DataFrame** named `customer_df`. The DataFrame has the following columns: - `CustomerID`: A unique identifier for each customer. - `OrderID`: A unique identifier for each order. - `OrderDate`: The date the order was placed (in datetime format). - `Amount`: The total amount of the order. - `ProductCategory`: The category of the product ordered. You need to create a function called `generate_customer_report` with the following parameters: - `customer_df`: The input DataFrame. - `start_date`: The start date for including orders in the report, in `YYYY-MM-DD` format. Default is `None`. - `end_date`: The end date for including orders in the report, in `YYYY-MM-DD` format. Default is `None`. - `min_order_amount`: The minimum amount for an order to be included in the report. Default is `0`. The function should: 1. Filter the DataFrame based on the `start_date`, `end_date`, and `min_order_amount` parameters. 2. Construct a report that contains the following information for each customer: - `CustomerID` - `TotalOrders`: The total number of orders placed by the customer. - `TotalAmount`: The total amount spent by the customer. - `TopCategory`: The product category the customer spent the most on. 3. If none of the filtering parameters are provided, the function should return `None`. Return the report as a new pandas DataFrame with the specified columns (`CustomerID`, `TotalOrders`, `TotalAmount`, `TopCategory`).","solution":"import pandas as pd def generate_customer_report(customer_df, start_date=None, end_date=None, min_order_amount=0): # Return None if no filters are provided if start_date is None and end_date is None and min_order_amount == 0: return None # Filter by start_date and end_date if start_date is not None: customer_df = customer_df[customer_df[\'OrderDate\'] >= pd.to_datetime(start_date)] if end_date is not None: customer_df = customer_df[customer_df[\'OrderDate\'] <= pd.to_datetime(end_date)] # Filter by min_order_amount customer_df = customer_df[customer_df[\'Amount\'] >= min_order_amount] # Group by CustomerID and calculate statistics grouped = customer_df.groupby(\'CustomerID\') report_data = { \'CustomerID\': [], \'TotalOrders\': [], \'TotalAmount\': [], \'TopCategory\': [] } for customer_id, group in grouped: report_data[\'CustomerID\'].append(customer_id) report_data[\'TotalOrders\'].append(len(group)) report_data[\'TotalAmount\'].append(group[\'Amount\'].sum()) top_category = group.groupby(\'ProductCategory\')[\'Amount\'].sum().idxmax() report_data[\'TopCategory\'].append(top_category) # Create report DataFrame report_df = pd.DataFrame(report_data) return report_df"},{"question":"Write a function that generates a random one-dimensional dataset within a given range and then creates a histogram to visualize the distribution of data points. The number of bins for the histogram should be randomly determined within a specified range. The function should return a tuple containing the generated dataset and the number of bins used for the histogram. Ensure the function includes code for generating the dataset, creating the histogram, and showing the plot. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt import random def generate_histogram(min_value, max_value, min_bins, max_bins, num_points): ```","solution":"import numpy as np import matplotlib.pyplot as plt import random def generate_histogram(min_value, max_value, min_bins, max_bins, num_points): Generates a random one-dimensional dataset within a given range and creates a histogram to visualize the distribution of data points. The number of bins for the histogram is randomly determined within a specified range. Parameters: - min_value: Minimum value in the dataset - max_value: Maximum value in the dataset - min_bins: Minimum number of bins for the histogram - max_bins: Maximum number of bins for the histogram - num_points: Number of data points in the dataset Returns: - tuple: (dataset, number of bins used for the histogram) # Generate the random dataset dataset = np.random.uniform(min_value, max_value, num_points) # Determine the number of bins num_bins = random.randint(min_bins, max_bins) # Create the histogram plt.hist(dataset, bins=num_bins, edgecolor=\'black\') plt.title(\'Histogram of Generated Dataset\') plt.xlabel(\'Value\') plt.ylabel(\'Frequency\') plt.show() return dataset, num_bins"},{"question":"Create a function that simulates customer ratings for a range of products over a specific period. Each product receives a rating between 1 and 5 for each day. If a seed is provided, the randomness must be reproducible. The function should compute and add a new column representing the average rating for each product over the entire period. The function should output: DataFrame: A Pandas DataFrame containing the simulated ratings for each product and an \'Average Rating\' column. You should write self-contained code starting with: ``` import numpy as np import pandas as pd def generate_ratings(days, products, seed=None): if seed is not None: np.random.seed(seed) data = {product: np.random.randint(1, 6, size=days) for product in products} df = pd.DataFrame(data) df[\'Average Rating\'] = df.mean(axis=1).round(2) return df ```","solution":"import numpy as np import pandas as pd def generate_ratings(days, products, seed=None): Generates random ratings for given products over a specified number of days. Parameters: days (int): Number of days for which ratings are generated. products (list): List of product names. seed (int, optional): Seed for random number generator to ensure reproducibility. Returns: pd.DataFrame: DataFrame containing simulated ratings and an \'Average Rating\' column. if seed is not None: np.random.seed(seed) data = {product: np.random.randint(1, 6, size=days) for product in products} df = pd.DataFrame(data) df[\'Average Rating\'] = df.mean(axis=1).round(2) return df"},{"question":"**Title**: Examining Sales Data to Detect Anomalies using Pandas and Numpy **Objective**: You are tasked with writing a function `detect_anomalies(filenames, threshold)` that will read weekly sales data from a series of CSV files, calculate the average weekly sales for each product over these files, and identify products that have an average weekly sales figure below a specified threshold. Your task involves leveraging the `pandas` and `numpy` libraries to efficiently handle and analyze the data. **Function Signature**: ```python def detect_anomalies(filenames, threshold): ``` **Parameters**: - `filenames` (list): A list of strings, where each string represents the path to a CSV file containing weekly sales data. - `threshold` (float): A sales threshold value. **Data Details**: Each CSV file contains: - A column named `Product` listing the names of products. - A column named `Sales` listing the weekly sales figures corresponding to each product. **Expected Output**: The function should return two numpy arrays: 1. `anomalousSales`: The average weekly sales figures for products that have an average figure below the specified `threshold`. 2. `anomalousProducts`: The corresponding product names for `anomalousSales`. **Requirements**: - Use `pandas.read_csv` to read data from the CSV files. - Use `numpy` for array manipulation and calculations (`numpy.mean` and `numpy.argwhere`). **Example**: Suppose we have 3 CSV files (`week1.csv`, `week2.csv`, `week3.csv`) and the sales threshold is 500. The function call would look like: ```python anomalousSales, anomalousProducts = detect_anomalies([\'week1.csv\', \'week2.csv\', \'week3.csv\'], 500) ``` **Instructions**: 1. Use `pandas.read_csv` to read the CSV files. 2. Aggregate the weekly sales figures for each product and compute their average. 3. Identify which products have an average weekly sales figure below the specified `threshold`. 4. Return the average weekly sales figures and corresponding products as numpy arrays. # Libraries Documentation: - [`numpy.mean`](https://numpy.org/doc/stable/reference/generated/numpy.mean.html) - [`pandas.read_csv`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html) - [`numpy.argwhere`](https://numpy.org/doc/stable/reference/generated/numpy.argwhere.html)","solution":"import pandas as pd import numpy as np def detect_anomalies(filenames, threshold): # Initialize empty DataFrame to aggregate all data all_data = pd.DataFrame() # Read each CSV file and concatenate to the main DataFrame for file in filenames: data = pd.read_csv(file) all_data = pd.concat([all_data, data]) # Group by product and calculate mean sales avg_sales = all_data.groupby(\'Product\')[\'Sales\'].mean() # Find products with average sales below the threshold anomalous_avg_sales = avg_sales[avg_sales < threshold] # Convert to numpy arrays anomalousSales = anomalous_avg_sales.values anomalousProducts = anomalous_avg_sales.index.to_numpy() return anomalousSales, anomalousProducts"},{"question":"You have been tasked to develop a simple library management system. The system should keep track of available books and allow users to borrow and return books. Each book is defined by its title and author. **Your task**: Create a class `Library` with the following methods: 1. `add_book(title: str, author: str) -> None`: This method should add a new book to the library. 2. `borrow_book(title: str) -> str`: This method should allow a user to borrow a book if it is available. If the book is borrowed successfully, the method should return a message indicating the successful borrowing of the book. If the book is not available (either because it doesn\'t exist or is already borrowed), it should return an appropriate message. 3. `return_book(title: str) -> str`: This method should allow a user to return a previously borrowed book. If the return is successful, it should return a message indicating the successful return of the book. If the book was not borrowed from the library, it should return an appropriate message. 4. `list_books() -> List[str]`: This method should return a list of all available books (each in the format \\"title by author\\") in the library. Here is how the `Library` class should behave: ```python library = Library() library.add_book(\\"The Catcher in the Rye\\", \\"J.D. Salinger\\") library.add_book(\\"1984\\", \\"George Orwell\\") print(library.list_books()) # Output: [\\"The Catcher in the Rye by J.D. Salinger\\", \\"1984 by George Orwell\\"] print(library.borrow_book(\\"1984\\")) # Output: \\"You have successfully borrowed \'1984\'.\\" print(library.borrow_book(\\"1984\\")) # Output: \\"\'1984\' is currently unavailable.\\" print(library.return_book(\\"1984\\")) # Output: \\"You have successfully returned \'1984\'.\\" print(library.return_book(\\"1984\\")) # Output: \\"This book was not borrowed from this library.\\" ``` Implement the `Library` class so that it fulfills the requirements of the methods described above.","solution":"from typing import List class Library: def __init__(self): self.books = {} self.borrowed_books = set() def add_book(self, title: str, author: str) -> None: self.books[title] = author def borrow_book(self, title: str) -> str: if title in self.books and title not in self.borrowed_books: self.borrowed_books.add(title) return f\\"You have successfully borrowed \'{title}\'.\\" elif title in self.borrowed_books: return f\\"\'{title}\' is currently unavailable.\\" else: return f\\"\'{title}\' does not exist in the library.\\" def return_book(self, title: str) -> str: if title in self.borrowed_books: self.borrowed_books.remove(title) return f\\"You have successfully returned \'{title}\'.\\" else: return f\\"This book was not borrowed from this library.\\" def list_books(self) -> List[str]: return [f\\"{title} by {self.books[title]}\\" for title in self.books if title not in self.borrowed_books]"},{"question":"You are asked to write a function named `detect_anagram_pairs` that detects and returns all pairs of anagram strings from a given list. An anagram is a word or phrase that is formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. The function will take in one parameter: - `words_list`: A list of strings that need to be checked for anagram pairs. The function should iterate through the list of words and identify all pairs that are anagrams of each other. Each pair should be represented as a tuple of strings (word1, word2), where `word1` and `word2` are anagrams. The function should return a list of these tuples in the order they are found in the list. Here is an example: ```python words_list = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gooogle\\"] detect_anagram_pairs(words_list) # Should return: # [(\\"listen\\", \\"silent\\"), (\\"listen\\", \\"enlist\\"), (\\"silent\\", \\"enlist\\")] ``` Note that each anagram pair should be unique and the pairs should be listed with `word1` appearing earlier in the list than `word2`. Here is the function signature: ```python def detect_anagram_pairs(words_list): pass ```","solution":"def detect_anagram_pairs(words_list): Detects and returns all pairs of anagram strings from a given list. :param words_list: List of string words to check for anagram pairs. :return: A list of tuples. Each tuple contains a pair of anagram strings. anagram_pairs = [] n = len(words_list) for i in range(n): for j in range(i + 1, n): word1 = words_list[i] word2 = words_list[j] if sorted(word1) == sorted(word2): anagram_pairs.append((word1, word2)) return anagram_pairs"},{"question":"This function takes a list of integers and an integer \'k\'. It should find all unique pairs of elements from the list that sum up to \'k\' and return them as a list of tuples. The function should make sure that each pair is only included once (i.e., (a, b) is the same as (b, a)) and should not reuse the same element twice. The function should raise the exception for: ValueError if the list is empty or if no pairs are found that sum up to \'k\'. The function should output with: list: A list of unique pairs (tuples) of integers that sum up to \'k\'. You should write self-contained code starting with: ``` def find_pairs(nums, k): ```","solution":"def find_pairs(nums, k): Finds all unique pairs of elements in `nums` that sum up to `k`. Args: nums (list of int): List of integers. k (int): The target sum. Returns: list of tuples: A list of unique pairs of integers that sum up to `k`. Raises: ValueError: If the list is empty or no pairs are found that sum up to `k`. if not nums: raise ValueError(\\"The list is empty\\") seen = set() pairs = set() for num in nums: target = k - num if target in seen: pair = (min(num, target), max(num, target)) pairs.add(pair) seen.add(num) if not pairs: raise ValueError(\\"No pairs found that sum up to the target value\\") return list(pairs)"},{"question":"You are tasked with creating a Python function that simulates shuffling a standard deck of 52 playing cards and then dealing a specified number of cards to a player. # Function Signature ```python def deal_cards(num_cards: int) -> list: ``` # Steps for the Function: 1. Define a standard deck of 52 playing cards as a list of strings. Each card should be represented by its rank and suit (e.g., \'2H\' for 2 of Hearts, \'KD\' for King of Diamonds, etc.). 2. Shuffle the deck randomly using the `random.shuffle()` method. 3. Deal the specified number of cards (`num_cards`) from the top of the shuffled deck. 4. If the number of cards requested (`num_cards`) exceeds the number of cards available in the deck, print an appropriate message and deal all the remaining cards in the deck. 5. Return the dealt cards as a list. # Requirements: - **You must use** the `random.shuffle()` function from the `random` library to shuffle the deck. - Ensure the function correctly handles cases where `num_cards` exceeds 52 by returning as many cards as available. # Example Invocation If you call the function `deal_cards(5)`, the output might resemble the following: ```python [\'7H\', \'QS\', \'9D\', \'3C\', \'AC\'] ``` # Additional Information - **Function Name:** `deal_cards` - **Role of the Function:** Simulate shuffling a deck of cards and dealing a specified number of cards. - **Parameters:** `num_cards` (integer, number of cards to deal) - **Returns:** List of strings (representing the dealt cards)","solution":"import random def deal_cards(num_cards: int) -> list: Simulate shuffling a deck of cards and dealing a specified number of cards. Parameters: num_cards (int): Number of cards to deal Returns: list: Dealt cards as list of strings # Define the deck of 52 playing cards suits = [\'H\', \'D\', \'C\', \'S\'] ranks = [\'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'J\', \'Q\', \'K\', \'A\'] deck = [rank + suit for suit in suits for rank in ranks] # Shuffle the deck random.shuffle(deck) # Deal the specified number of cards if num_cards > 52: print(f\\"Requested {num_cards} cards, but only 52 cards are available. Dealing all remaining cards.\\") num_cards = 52 dealt_cards = deck[:num_cards] return dealt_cards"},{"question":"You are tasked with creating a function, `convert_and_plot_temperature`, which will convert a list of temperatures from Fahrenheit to Celsius and then plot the original and converted temperatures using the `matplotlib` library. This problem is designed to help you understand basic list manipulation and how to create line plots using `matplotlib.pyplot.plot` and `matplotlib.pyplot.show`. # Function Specification The function should be named `convert_and_plot_temperature` and should take one parameter: - `temperatures` (list of floats): A list of temperatures in Fahrenheit. # Task Your task is to: 1. Convert each temperature in the input list from Fahrenheit to Celsius using the formula: `C = (F - 32) * 5/9`. 2. Plot the original Fahrenheit temperatures and the converted Celsius temperatures on the same graph. 3. Display the plot with appropriate labels for each line. # Requirements - You must use list comprehensions to convert the temperatures. - You must use `matplotlib.pyplot.plot` to plot the temperatures. - You must use `matplotlib.pyplot.show` to display the plot. - The x-axis should represent the index of the temperatures in the list. - The two lines should be labeled as \\"Fahrenheit\\" and \\"Celsius\\". - The plot should include a legend to differentiate between the two lines. # Example ```python convert_and_plot_temperature([32, 45, 64, 77, 104]) ``` # Expected Output - A line plot displaying the given temperatures in Fahrenheit and the converted temperatures in Celsius. The plot should have two lines, one for Fahrenheit and one for Celsius, with appropriate labels and legend.","solution":"import matplotlib.pyplot as plt def convert_and_plot_temperature(temperatures): Convert a list of temperatures from Fahrenheit to Celsius and plot both. Parameters: temperatures (list of floats): List of temperatures in Fahrenheit # Convert Fahrenheit to Celsius celsius_temps = [(temp - 32) * 5.0/9.0 for temp in temperatures] # Plot original Fahrenheit temperatures plt.plot(temperatures, label=\'Fahrenheit\', marker=\'o\') # Plot converted Celsius temperatures plt.plot(celsius_temps, label=\'Celsius\', marker=\'x\') # Adding labels and legend plt.xlabel(\'Index\') plt.ylabel(\'Temperature\') plt.legend() plt.title(\'Temperature Conversion: Fahrenheit to Celsius\') # Show the plot plt.show()"},{"question":"You need to write a Python function that processes COVID-19 testing data from multiple CSV files and outputs a summary report. The data includes country names, dates, number of tests performed, and number of positive cases on each day. Your goal is to aggregate the data to generate total tests and total positive cases for each country. The function should also account for missing country names by using an alternative naming dictionary and exclude data entries that fall outside a specified date range. The function you need to write is `aggregate_covid_data(input_files: list, output_file: str, date_range: tuple, alternative_names: dict)`. This function should perform the following steps: 1. Read data from all CSV files listed in `input_files`. Skip the header row. 2. For each row: - Translate the country name to a standardized format using the `alternative_names` dictionary. - Skip rows with dates outside of the `date_range` tuple, which includes start and end dates (inclusive). - Aggregate the total number of tests and total positive cases for each country. 3. Write the summary data to the `output_file` CSV file, with columns for country, total tests, and total positive cases. **Use of the Python `csv` library is required. Below is the documentation for the primary functions you will need:** - **csv.reader**: This function reads from a CSV file. - **csv.writer**: This function writes to a CSV file. **Function Signature:** ```python def aggregate_covid_data(input_files: list, output_file: str, date_range: tuple, alternative_names: dict) -> None: pass ```","solution":"import csv from datetime import datetime def aggregate_covid_data(input_files: list, output_file: str, date_range: tuple, alternative_names: dict) -> None: start_date, end_date = map(lambda x: datetime.strptime(x, \'%Y-%m-%d\'), date_range) data_aggregated = {} for file in input_files: with open(file, \'r\') as csvfile: reader = csv.reader(csvfile) next(reader) # skip header for row in reader: country, date_str, tests, positives = row date = datetime.strptime(date_str, \'%Y-%m-%d\') if date < start_date or date > end_date: continue # skip rows outside the date range standardized_country = alternative_names.get(country, country) tests = int(tests) positives = int(positives) if standardized_country not in data_aggregated: data_aggregated[standardized_country] = {\'total_tests\': 0, \'total_positives\': 0} data_aggregated[standardized_country][\'total_tests\'] += tests data_aggregated[standardized_country][\'total_positives\'] += positives with open(output_file, \'w\', newline=\'\') as csvfile: writer = csv.writer(csvfile) writer.writerow([\'country\', \'total_tests\', \'total_positives\']) for country, aggregates in data_aggregated.items(): writer.writerow([country, aggregates[\'total_tests\'], aggregates[\'total_positives\']])"},{"question":"You are given a string containing a formula for a polynomial expression, written using Python syntax. The formula will only contain valid variable names, integers, addition, subtraction, multiplication, division, and parentheses. Your task is to write a function `evaluate_polynomial(formula, **kwargs)` that performs the following operations: - Safely evaluates the polynomial expression using the provided values for the variables. - The formula is passed as a string and the variables with their corresponding values are passed as keyword arguments. The function should return the result of the polynomial evaluation as a float. # Function Signature ```python def evaluate_polynomial(formula, **kwargs): Args: formula (str): a string containing a polynomial expression **kwargs: variable-value pairs to be used in the polynomial evaluation Returns: float: The result of the polynomial evaluation ``` # Example ```python # Example usage: result = evaluate_polynomial(\\"a * x**2 + b * x + c\\", a=1, b=-2, c=1, x=3) print(result) # Output: 4.0 result = evaluate_polynomial(\\"3 * y**2 - 2 * y + 1\\", y=2) print(result) # Output: 9.0 ``` # Constraints - The formula string will always contain valid Python expressions. - The variable names will only contain alphabetic characters. - All variable names used in the formula will be passed as keyword arguments to the function. - The keyword arguments will provide float or integer values for all variables in the formula. - Assume there will be no division by zero errors or other runtime errors during evaluation. # Note Ensure that you handle evaluation in a safe manner to avoid any code injection vulnerabilities. # Required Library - None","solution":"def evaluate_polynomial(formula, **kwargs): Args: formula (str): a string containing a polynomial expression **kwargs: variable-value pairs to be used in the polynomial evaluation Returns: float: The result of the polynomial evaluation # Create a whitelist of safe built-ins allowed_builtins = {\\"__builtins__\\": None} # Evaluate the formula safely using eval with white-listed context result = eval(formula, allowed_builtins, kwargs) return float(result)"},{"question":"You are asked to write a function that simulates a bank account transaction system. The function should be able to handle deposits, withdrawals, and balance inquiries, while ensuring that withdrawals do not result in a negative balance. The operations will be given as a list of strings, where each string represents a transaction in the form: \\"DEPOSIT amount\\", \\"WITHDRAW amount\\", or \\"BALANCE\\". **Function Signature:** ```python def bank_account(transactions): pass ``` **Parameters:** - `transactions` (list of str): A list of strings representing the transactions to be processed. Each string follows the format \\"OPERATION amount\\" or simply \\"BALANCE\\" for balance inquiry. **Expected Output:** - The function should return a list of integers, where each integer corresponds to the balance of the account after a \\"BALANCE\\" operation from the input list. **Requirements:** - If a \\"WITHDRAW amount\\" would result in a negative balance, the withdrawal should be ignored and the balance should remain unchanged. **Example:** ```python transactions = [ \\"DEPOSIT 1000\\", \\"WITHDRAW 500\\", \\"BALANCE\\", \\"WITHDRAW 1000\\", \\"BALANCE\\", \\"DEPOSIT 200\\", \\"BALANCE\\" ] ``` The function call: ```python bank_account(transactions) ``` Should return: ``` [500, 500, 700] ``` In this example: 1. After depositing 1000, the balance is 1000. 2. After withdrawing 500, the balance is 500. 3. The first \\"BALANCE\\" query returns 500. 4. The attempt to withdraw 1000 fails (insufficient funds), so the balance remains 500. 5. The second \\"BALANCE\\" query returns 500. 6. After depositing 200, the balance is 700. 7. The third \\"BALANCE\\" query returns 700.","solution":"def bank_account(transactions): balance = 0 result = [] for transaction in transactions: parts = transaction.split() if parts[0] == \\"DEPOSIT\\": amount = int(parts[1]) balance += amount elif parts[0] == \\"WITHDRAW\\": amount = int(parts[1]) if balance >= amount: balance -= amount elif parts[0] == \\"BALANCE\\": result.append(balance) return result"},{"question":"**Sorting a List of Dictionaries by Multiple Keys** You are tasked with implementing a function that sorts a list of dictionaries by multiple keys. You will sort the list based on two specific keys: `age` and `score`. The primary sorting key is `age` (in ascending order), and the secondary sorting key is `score` (in descending order). Implement a function `sort_records` with the following signature: ```python def sort_records(records): Sort the list of dictionaries \'records\' by \'age\' (ascending) and \'score\' (descending). Parameters: - records: List of dictionaries, where each dictionary contains the keys \'age\' and \'score\'. Returns: - sorted_records: List of dictionaries sorted by \'age\' (ascending) and \'score\' (descending). ``` # Requirements: 1. **Sorting**: - Sort the list of dictionaries using the `sorted` function in Python. - Provide a lambda function as the `key` parameter for `sorted` to handle the dual sorting criteria. # Example Input: ```python records = [ {\'name\': \'Alice\', \'age\': 30, \'score\': 85}, {\'name\': \'Bob\', \'age\': 25, \'score\': 95}, {\'name\': \'Charlie\', \'age\': 30, \'score\': 90}, {\'name\': \'David\', \'age\': 25, \'score\': 80} ] ``` # Example Output: ```python sorted_records = [ {\'name\': \'Bob\', \'age\': 25, \'score\': 95}, {\'name\': \'David\', \'age\': 25, \'score\': 80}, {\'name\': \'Charlie\', \'age\': 30, \'score\': 90}, {\'name\': \'Alice\', \'age\': 30, \'score\': 85} ] ``` # Example Call: ```python sorted_records = sort_records(records) ```","solution":"def sort_records(records): Sort the list of dictionaries \'records\' by \'age\' (ascending) and \'score\' (descending). Parameters: - records: List of dictionaries, where each dictionary contains the keys \'age\' and \'score\'. Returns: - sorted_records: List of dictionaries sorted by \'age\' (ascending) and \'score\' (descending). return sorted(records, key=lambda x: (x[\'age\'], -x[\'score\']))"},{"question":"You are developing a task management application, and you need to implement a functionality that processes a list of tasks described in a JSON format and outputs a summary report. Each task has attributes like task ID, description, status (completed or not), and priority. Your task is to compute the number of completed and pending tasks along with their priority distribution. Your objective is to write a function named `task_summary_report` that performs the following tasks: 1. Takes a JSON string as input, where the string represents a list of tasks. 2. Parses the JSON string into a list of task dictionaries. 3. Computes the total number of tasks, number of completed tasks, and number of pending tasks. 4. Calculates the distribution of tasks across different priorities for both completed and pending tasks. 5. Returns the summary as a dictionary containing the computed metrics. Function signature: ```python import json def task_summary_report(json_tasks): pass ``` **Requirements:** - Use the `json` module to parse the JSON string. - Handle different priorities and account for cases where no tasks might be present. Example: ```python json_tasks = \'\'\' [ {\\"task_id\\": 1, \\"description\\": \\"Setup project\\", \\"status\\": \\"completed\\", \\"priority\\": \\"high\\"}, {\\"task_id\\": 2, \\"description\\": \\"Write documentation\\", \\"status\\": \\"pending\\", \\"priority\\": \\"medium\\"}, {\\"task_id\\": 3, \\"description\\": \\"Implement feature X\\", \\"status\\": \\"completed\\", \\"priority\\": \\"high\\"}, {\\"task_id\\": 4, \\"description\\": \\"Fix bugs\\", \\"status\\": \\"pending\\", \\"priority\\": \\"low\\"} ] \'\'\' result = task_summary_report(json_tasks) print(result) ``` The expected output format would be: ```python { \\"total_tasks\\": 4, \\"completed_tasks\\": 2, \\"pending_tasks\\": 2, \\"priority_distribution\\": { \\"completed\\": {\\"high\\": 2, \\"medium\\": 0, \\"low\\": 0}, \\"pending\\": {\\"high\\": 0, \\"medium\\": 1, \\"low\\": 1} } } ``` Ensure your function handles cases with varying task attributes and gracefully processes empty inputs.","solution":"import json def task_summary_report(json_tasks): tasks = json.loads(json_tasks) total_tasks = len(tasks) completed_tasks = 0 pending_tasks = 0 priority_distribution = { \\"completed\\": {\\"high\\": 0, \\"medium\\": 0, \\"low\\": 0}, \\"pending\\": {\\"high\\": 0, \\"medium\\": 0, \\"low\\": 0} } for task in tasks: if task[\'status\'] == \'completed\': completed_tasks += 1 priority_distribution[\'completed\'][task[\'priority\']] += 1 else: pending_tasks += 1 priority_distribution[\'pending\'][task[\'priority\']] += 1 summary = { \\"total_tasks\\": total_tasks, \\"completed_tasks\\": completed_tasks, \\"pending_tasks\\": pending_tasks, \\"priority_distribution\\": priority_distribution } return summary"},{"question":"You are tasked with creating a simple Tic-Tac-Toe game that can be played between two players on the same computer. The game board is a 3x3 grid, and the players take turns marking a square on the grid with their respective symbols (\'X\' or \'O\'). The first player to get three of their symbols in a row (vertically, horizontally, or diagonally) wins the game. If the board fills up without any player winning, the game ends in a draw. To develop this Tic-Tac-Toe game, you need to implement a function called `tictactoe_game()` that incorporates the following features: 1. **Board Initialization**: Display an empty 3x3 grid at the start of the game. 2. **Player Input Handling**: Allow players to input their moves by specifying the row and column numbers where they want to place their symbol. 3. **Move Validation**: Ensure that the chosen square is empty and within the bounds of the grid. 4. **Win Condition Check**: Check after each move if there is a winner. 5. **Draw Condition Check**: End the game as a draw if all squares are filled without a winner. 6. **Game End and Play Again Option**: After a win or draw, ask players if they want to play again. If they choose not to, end the game using `sys.exit()`. Specifications: - The function should be named `tictactoe_game` and should accept no parameters. - The position in the grid should be specified by a two-digit input where the first digit is the row number and the second digit is the column number (e.g., \'11\' for the top-left corner, \'33\' for the bottom-right corner). - Players should be prompted to enter their move until a valid move is made. - After each move, display the updated board. - The game alternates between Player 1 and Player 2, where Player 1 always uses \'X\' and Player 2 uses \'O\'. Example Workflow: 1. Initial empty board: ``` 1 2 3 1 _ _ _ 2 _ _ _ 3 _ _ _ ``` 2. Player 1 (X) chooses position \'11\': ``` 1 2 3 1 X _ _ 2 _ _ _ 3 _ _ _ ``` 3. Player 2 (O) chooses position \'23\': ``` 1 2 3 1 X _ _ 2 _ _ O 3 _ _ _ ``` 4. The game continues until there is a winner or the board is full. Your task: Implement the `tictactoe_game()` function according to the specifications above. ```python import sys def tictactoe_game(): # Function implementation goes here ```","solution":"import sys def print_board(board): print(\\" 1 2 3\\") for i in range(3): print(f\\"{i+1} {\' \'.join(board[i])}\\") def check_win(board): # Check rows, columns, and diagonals for a win for i in range(3): if board[i][0] == board[i][1] == board[i][2] != \\"_\\": return True if board[0][i] == board[1][i] == board[2][i] != \\"_\\": return True if board[0][0] == board[1][1] == board[2][2] != \\"_\\": return True if board[0][2] == board[1][1] == board[2][0] != \\"_\\": return True return False def check_draw(board): for row in board: if \\"_\\" in row: return False return True def tictactoe_game(): board = [[\\"_\\"] * 3 for _ in range(3)] current_player = \\"X\\" print_board(board) while True: move = input(f\\"Player {\'1\' if current_player == \'X\' else \'2\'} ({current_player}), enter your move (row and column, e.g., 11): \\") if len(move) != 2 or not move.isdigit(): print(\\"Invalid input. Please enter a valid move (two digits).\\") continue row, col = int(move[0]) - 1, int(move[1]) - 1 if row not in range(3) or col not in range(3): print(\\"Move out of bounds. Please try again.\\") continue if board[row][col] != \\"_\\": print(\\"Square already filled. Please try again.\\") continue board[row][col] = current_player print_board(board) if check_win(board): print(f\\"Player {\'1\' if current_player == \'X\' else \'2\'} ({current_player}) wins!\\") play_again = input(\\"Do you want to play again? (yes/no): \\") if play_again.lower() != \\"yes\\": sys.exit() else: tictactoe_game() break if check_draw(board): print(\\"The game is a draw.\\") play_again = input(\\"Do you want to play again? (yes/no): \\") if play_again.lower() != \\"yes\\": sys.exit() else: tictactoe_game() break current_player = \\"O\\" if current_player == \\"X\\" else \\"X\\""},{"question":"You are tasked with writing a function that takes a string representing a mathematical expression and evaluates it to return the result. The function should handle basic arithmetic operations: addition, subtraction, multiplication, and division. The function should also handle parentheses to ensure proper order of operations. The function `evaluate_expression` should have the following signature: ```python def evaluate_expression(expression): # Your code here ``` - `expression`: A string representing a mathematical expression which can contain integers, +, -, *, /, and parentheses `()`. The expression will not contain any spaces and will be a valid mathematical expression. This function should: 1. Parse the input string and correctly apply the arithmetic operations respecting the order of operations. 2. Handle nested parentheses appropriately. 3. Return the evaluated result as a float. **Task:** Implement the `evaluate_expression` function to evaluate the given mathematical expression correctly and return the result. Ensure the function handles basic arithmetic operations and respects the order of operations including parentheses.","solution":"def evaluate_expression(expression): def parse_expression(expression): num = \'\' stack = [] for char in expression: if char.isdigit() or char == \'.\': num += char else: if num: stack.append(float(num)) num = \'\' stack.append(char) if num: stack.append(float(num)) return stack def apply_operation(operands, operator): if operator == \'+\': return operands[0] + operands[1] elif operator == \'-\': return operands[0] - operands[1] elif operator == \'*\': return operands[0] * operands[1] elif operator == \'/\': if operands[1] == 0: raise ZeroDivisionError(\\"division by zero\\") return operands[0] / operands[1] def evaluate(stack): num_stack = [] op_stack = [] def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def process(): while (len(op_stack) > 0): operator = op_stack.pop() right_operand = num_stack.pop() left_operand = num_stack.pop() num_stack.append(apply_operation([left_operand, right_operand], operator)) i = 0 while i < len(stack): if isinstance(stack[i], float): num_stack.append(stack[i]) elif stack[i] == \'(\': op_stack.append(stack[i]) elif stack[i] == \')\': while len(op_stack) > 0 and op_stack[-1] != \'(\': operator = op_stack.pop() right_operand = num_stack.pop() left_operand = num_stack.pop() num_stack.append(apply_operation([left_operand, right_operand], operator)) op_stack.pop() # popping out \'(\' else: while (len(op_stack) > 0 and precedence(op_stack[-1]) >= precedence(stack[i])): operator = op_stack.pop() right_operand = num_stack.pop() left_operand = num_stack.pop() num_stack.append(apply_operation([left_operand, right_operand], operator)) op_stack.append(stack[i]) i += 1 while len(op_stack) > 0: process() return num_stack[0] parsed_expression = parse_expression(expression) return evaluate(parsed_expression)"},{"question":"You are asked to implement a function named `merge_sorted_arrays` that takes two sorted lists of integers and merges them into a single sorted list. The function should not use any built-in sorting functions. Your function should: 1. Merge the two input lists such that the resultant list remains sorted. 2. Handle edge cases where one or both of the input lists are empty. 3. Ensure the function runs efficiently with a linear time complexity relative to the combined length of the input lists. Function signature: ```python def merge_sorted_arrays(arr1: list[int], arr2: list[int]) -> list[int]: # Your implementation here ``` Example: ```python arr1 = [1, 3, 5, 7] arr2 = [2, 4, 6, 8] result = merge_sorted_arrays(arr1, arr2) print(result) # Output: [1, 2, 3, 4, 5, 6, 7, 8] arr1 = [] arr2 = [2, 4, 6, 8] result = merge_sorted_arrays(arr1, arr2) print(result) # Output: [2, 4, 6, 8] arr1 = [1, 3, 5, 7] arr2 = [] result = merge_sorted_arrays(arr1, arr2) print(result) # Output: [1, 3, 5, 7] ```","solution":"def merge_sorted_arrays(arr1: list[int], arr2: list[int]) -> list[int]: Merges two sorted lists into a single sorted list. :param arr1: Sorted list of integers :param arr2: Sorted list of integers :return: Merged sorted list of integers i, j = 0, 0 merged_arr = [] # Traverse both lists and append the smaller element to merged_arr while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_arr.append(arr1[i]) i += 1 else: merged_arr.append(arr2[j]) j += 1 # If there are remaining elements in arr1, append them while i < len(arr1): merged_arr.append(arr1[i]) i += 1 # If there are remaining elements in arr2, append them while j < len(arr2): merged_arr.append(arr2[j]) j += 1 return merged_arr"},{"question":"# Context Dynamic programming is a method for solving complex problems by breaking them down into simpler subproblems. It is particularly useful for optimization problems. # Task You are asked to write a Python function to solve the \\"Longest Increasing Subsequence\\" (LIS) problem using dynamic programming. The function should find the length of the longest subsequence of a given sequence such that all elements of the subsequence are sorted in increasing order. # Function Requirements The function `longest_increasing_subsequence(arr)` should meet the following criteria: 1. **Inputs:** - `arr`: A list of integers representing the sequence. 2. **Output:** - Returns an integer representing the length of the longest increasing subsequence. 3. **Key Operations:** - Initialize a list `lis` where `lis[i]` represents the length of the longest increasing subsequence ending at index `i`. - Use nested loops to compare elements and update the `lis` values appropriately. # Key Notes: - You must ensure the solution runs efficiently with a time complexity of O(n^2), where n is the length of the input list. - Handle edge cases, such as when the input list is empty. # Example: ```python def longest_increasing_subsequence(arr): if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis) # Example usage: arr = [10, 22, 9, 33, 21, 50, 41, 60] print(longest_increasing_subsequence(arr)) # Output: 5 ``` In this example, the function calculates that the length of the longest increasing subsequence is 5. The subsequence is [10, 22, 33, 50, 60].","solution":"def longest_increasing_subsequence(arr): if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis) # Example usage: # arr = [10, 22, 9, 33, 21, 50, 41, 60] # print(longest_increasing_subsequence(arr)) # Output: 5"},{"question":"You are required to create a function named `generate_user_report` that takes in a Pandas DataFrame containing user activity logs and an optional date range. Your function should perform the following tasks: 1. Filter the DataFrame to include only the logs within the specified date range, if provided. Otherwise, include all logs. 2. Calculate the total number of unique users during the specified period. 3. Compute the total number of activities performed by all users. 4. Identify the user with the highest number of activities and their total activity count. 5. Display all the computed metrics in a clear format. **Function Signature:** ```python def generate_user_report(df: pd.DataFrame, start_date: str = None, end_date: str = None) -> None: pass ``` **Constraints:** - Use the `pandas` library for DataFrame manipulation. - Assume proper installation of `pandas`. - The DataFrame will have a column \\"user_id\\" for user identification and a column \\"activity_date\\" in \'YYYY-MM-DD\' format for the date of each activity. - The date range parameters `start_date` and `end_date` are in \'YYYY-MM-DD\' format. **Example:** ```python import pandas as pd data = { \'user_id\': [1, 2, 1, 3, 2, 1, 3, 1, 2, 3, 2, 1], \'activity_date\': [\'2023-01-01\', \'2023-01-01\', \'2023-01-02\', \'2023-01-02\', \'2023-01-03\', \'2023-01-03\', \'2023-01-04\', \'2023-01-04\', \'2023-01-05\', \'2023-01-05\', \'2023-01-06\', \'2023-01-06\'] } df = pd.DataFrame(data) generate_user_report(df, \'2023-01-01\', \'2023-01-05\') ``` This example should filter the logs to include only those from \'2023-01-01\' to \'2023-01-05\', compute and display the total number of unique users, total number of activities, the most active user, and their activity count within the given date range.","solution":"import pandas as pd def generate_user_report(df: pd.DataFrame, start_date: str = None, end_date: str = None) -> None: Generates and prints a user activity report from the given DataFrame within the specified date range. :param df: A Pandas DataFrame containing user activity logs with columns \'user_id\' and \'activity_date\'. :param start_date: The start date of the range in \'YYYY-MM-DD\' format. :param end_date: The end date of the range in \'YYYY-MM-DD\' format. if start_date: df = df[df[\'activity_date\'] >= start_date] if end_date: df = df[df[\'activity_date\'] <= end_date] total_unique_users = df[\'user_id\'].nunique() total_activities = df.shape[0] most_active_user = df[\'user_id\'].value_counts().idxmax() most_active_user_activities = df[\'user_id\'].value_counts().max() print(f\\"Total unique users: {total_unique_users}\\") print(f\\"Total activities: {total_activities}\\") print(f\\"Most active user: {most_active_user}\\") print(f\\"Activities by most active user: {most_active_user_activities}\\")"},{"question":"You are given a dataset `phone_usage.csv` containing information about daily smartphone usage among a group of individuals. The dataset has the following columns: `user_id`, `day`, `screen_on_time`, `calls_duration`, `messages_count`, and `data_usage`. Write a function `analyze_phone_usage(data_filepath)` that: 1. Loads the data from the provided CSV file into a pandas DataFrame. 2. Adds a new column `total_usage` which is the sum of `screen_on_time`, `calls_duration`, and `data_usage` for each user per day. 3. Calculate the average `total_usage` for each `user_id`. 4. Identifies the top 3 users with the highest average `total_usage`. 5. Plots a bar chart showing the average `total_usage` of these top 3 users. **Parameters**: - `data_filepath`: A string representing the file path of the `phone_usage.csv` file. **Returns**: - None. The function should plot the bar chart of the top 3 users with the highest average total_usage.","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_phone_usage(data_filepath): Analyzes phone usage data from a CSV file and plots the top 3 users with the highest average total usage. Parameters: - data_filepath: str, the file path of the phone_usage.csv file Returns: - None. The function plots a bar chart of the top 3 users with the highest average total usage. # Step 1: Load the data from the provided CSV file df = pd.read_csv(data_filepath) # Step 2: Add a new column \'total_usage\' df[\'total_usage\'] = df[\'screen_on_time\'] + df[\'calls_duration\'] + df[\'data_usage\'] # Step 3: Calculate the average \'total_usage\' for each \'user_id\' avg_total_usage = df.groupby(\'user_id\')[\'total_usage\'].mean().reset_index() # Step 4: Identify the top 3 users with the highest average \'total_usage\' top_3_users = avg_total_usage.nlargest(3, \'total_usage\') # Step 5: Plot a bar chart of the average \'total_usage\' of these top 3 users plt.figure(figsize=(10, 6)) plt.bar(top_3_users[\'user_id\'], top_3_users[\'total_usage\'], color=\'skyblue\') plt.xlabel(\'User ID\') plt.ylabel(\'Average Total Usage\') plt.title(\'Top 3 Users with Highest Average Total Usage\') plt.show()"},{"question":"You are given a list of 2D points representing locations on a plane. Your task is to implement a function to compute the convex hull of these points using the Andrew\'s monotone chain algorithm. The convex hull is the smallest convex polygon that can enclose all the given points. The function you need to write is called `compute_convex_hull`, which will take a list of points as input and return the points that make up the convex hull in counter-clockwise order. The function signature is as follows: ```python def compute_convex_hull(points): Args: points (list): A list of tuples, where each tuple represents a point (x, y) on a 2D plane. The list is not necessarily sorted. Returns: list: A list of tuples representing the points on the convex hull in counter-clockwise order. ``` **Requirements:** - You must implement the Andrew\'s monotone chain algorithm. - If all points are collinear, the function should return only the two endpoints of such a line segment. - The points in the return value should be ordered in counter-clockwise direction starting from the point with lowest x-coordinate (in case of tie, the lowest y-coordinate). **Example:** ```python points = [(0,0), (1,1), (2,2), (3,3), (0,3), (3,0)] convex_hull = compute_convex_hull(points) print(convex_hull) # Output should be [(0, 0), (3, 0), (3, 3), (0, 3)] or the points in counter-clockwise order ```","solution":"def compute_convex_hull(points): Computes the convex hull of a set of 2D points using Andrew\'s monotone chain algorithm. Args: points (list): A list of tuples, where each tuple represents a point (x, y) on a 2D plane. The list is not necessarily sorted. Returns: list: A list of tuples representing the points on the convex hull in counter-clockwise order. # Sort the points lexicographically (tuples compare lexicographically). points = sorted(points) # Boring case: no points or a single point, possibly repeated multiple times. if len(points) <= 1: return points # 2D cross product of OA and OB vectors, i.e. z-component of their 3D cross product. # Returns a positive value, if OAB makes a counter-clockwise turn, # negative for clockwise turn, and zero if the points are collinear. def cross(o, a, b): return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) # Build lower hull lower = [] for p in points: while len(lower) >= 2 and cross(lower[-2], lower[-1], p) <= 0: lower.pop() lower.append(p) # Build upper hull upper = [] for p in reversed(points): while len(upper) >= 2 and cross(upper[-2], upper[-1], p) <= 0: upper.pop() upper.append(p) # Concatenate lower and upper hull to make the full hull # The last point of each half is omitted because it\'s repeated at the beginning of the other half return lower[:-1] + upper[:-1]"},{"question":"Create a function `validate_brackets` that checks if every opening bracket in a given string has a matching closing bracket. The string may contain the following brackets: `()`, `{}`, and `[]`. Your function should return `True` if the string has balanced brackets, otherwise `False`. The function should also handle nested and non-nested brackets correctly. Ignore non-bracket characters. Args: - s (str): A string containing brackets along with other characters. Returns: - bool: `True` if the brackets are balanced, otherwise `False`. Example usage: ``` validate_brackets(\\"a(b)c\\") # True validate_brackets(\\"a(b]c\\") # False validate_brackets(\\"{[()]}\\") # True validate_brackets(\\"{[(])}\\") # False ``` Start the function definition as follows: ``` def validate_brackets(s): ```","solution":"def validate_brackets(s): Checks if brackets in the string are balanced. Args: s (str): A string containing brackets along with other characters. Returns: bool: True if the brackets are balanced, otherwise False. bracket_pairs = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} open_brackets = set(bracket_pairs.values()) stack = [] for char in s: if char in open_brackets: stack.append(char) elif char in bracket_pairs: if not stack or stack.pop() != bracket_pairs[char]: return False return not stack"},{"question":"You are tasked with creating a function called `find_palindromic_substrings` that takes a string and finds all the unique palindromic substrings within it. A palindromic substring is a sequence of characters that reads the same forward and backward. To achieve this task, follow the steps mentioned below: 1. **Input Validation**: Ensure the input is a non-empty string. 2. **Initialize Set for Results**: Use a set to store unique palindromic substrings to avoid duplicates. 3. **Expand Around Center Technique**: Utilize the expand around center technique to find palindromes. For a string of length `n`, there are `2n-1` possible centers (each character and between each pair of characters). - For each center, expand outwards while the characters on both sides are equal. 4. **Add Palindromes to Set**: If a palindrome is identified during expansion, add it to the set. 5. **Return Sorted List**: Convert the set to a sorted list and return it as the result. The function `find_palindromic_substrings` should be implemented as follows: ```python def find_palindromic_substrings(s): Find all unique palindromic substrings in the input string. Parameters ---------- s : str The input string. Returns ------- list A sorted list of unique palindromic substrings. pass ``` The function should utilize the following approach: - **Expand Around Center**: For each character and each pair of characters, attempt to expand outward as long as the substring remains a palindrome. - **Set for Unique Substrings**: Store each identified palindrome in a set to ensure all substrings are unique.","solution":"def find_palindromic_substrings(s): Find all unique palindromic substrings in the input string. Parameters ---------- s : str The input string. Returns ------- list A sorted list of unique palindromic substrings. if not isinstance(s, str) or not s: return [] palindromic_substrings = set() def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: palindromic_substrings.add(s[left:right+1]) left -= 1 right += 1 for i in range(len(s)): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return sorted(list(palindromic_substrings))"},{"question":"You are required to create a function named `find_connected_components` that takes a representation of an undirected graph using an adjacency list and returns the number of connected components in the graph. This is essential for understanding the connectivity and structure of the graph. # Input: - `graph`: A dictionary representing an undirected graph where the keys are node labels and the corresponding values are lists of adjacent nodes. # Output: - An integer representing the number of connected components in the graph. # Steps: 1. Create an empty set `visited` to keep track of the visited nodes. 2. Initialize a counter `num_components` to 0. 3. Define a helper function `dfs(node)` that performs Depth-First Search (DFS) starting from a given `node`. The function should: - Mark the `node` as visited. - Recursively visit all the adjacent nodes that haven\'t been visited yet. 4. Iterate through each node in the `graph`. For each unvisited node: - Call the `dfs` function with the node to explore its entire component. - Increment the `num_components` counter by 1. 5. Return `num_components` after all nodes have been processed. Your task is to implement the function `find_connected_components(graph)` to accomplish the above steps and return the number of connected components. # Example: ```python graph = { 1: [2, 3], 2: [1], 3: [1], 4: [5], 5: [4], 6: [] } print(find_connected_components(graph)) # Output: 3 ``` In this example, the graph has three connected components: `{1, 2, 3}`, `{4, 5}`, and `{6}`. The function should return `3`.","solution":"def find_connected_components(graph): Determines the number of connected components in an undirected graph. Parameters: graph (dict): A dictionary representation of an undirected graph where keys are node labels and values are lists of adjacent nodes. Returns: int: The number of connected components in the graph. def dfs(node, visited): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: dfs(neighbor, visited) visited = set() num_components = 0 for node in graph: if node not in visited: dfs(node, visited) num_components += 1 return num_components"},{"question":"You are required to implement a function named `trip_duration_stats(df)` that displays statistics on the total and average trip duration from a given DataFrame. This DataFrame, `df`, contains a column named `Trip Duration` with trip duration in seconds. You need to compute and display: 1. The total travel time in the format of days, hours, minutes, and seconds. 2. The mean travel time in the format of hours, minutes, and seconds. To implement this, follow these steps: 1. Calculate the total travel time by summing up the `Trip Duration` column and converting it to the appropriate format. 2. Calculate the mean travel time by computing the average of the `Trip Duration` column and converting it to the appropriate format. Below is the template of the `trip_duration_stats` function: ```python import pandas as pd def convert_seconds(seconds): Converts seconds to days, hours, minutes, and seconds days = seconds // (24 * 3600) seconds %= (24 * 3600) hours = seconds // 3600 seconds %= 3600 minutes = seconds // 60 seconds %= 60 return days, hours, minutes, seconds def trip_duration_stats(df): Displays statistics on the total and average trip duration. # Print a message indicating that the calculation is starting print(\'nCalculating Trip Duration...\') # Calculate total travel time total_duration = df[\'Trip Duration\'].sum() total_days, total_hours, total_minutes, total_seconds = convert_seconds(total_duration) print(\\"Total travel time: {} days, {} hours, {} minutes, {} seconds\\".format(total_days, total_hours, total_minutes, total_seconds)) # Calculate mean travel time mean_duration = df[\'Trip Duration\'].mean() mean_hours, mean_minutes, mean_seconds = convert_seconds(mean_duration)[:3] print(\\"Mean travel time: {} hours, {} minutes, {} seconds\\".format(mean_hours, mean_minutes, int(mean_seconds))) # Example usage if __name__ == \\"__main__\\": data = { \'Trip Duration\': [ 3600, # 1 hour 7200, # 2 hours 5400, # 1 hour 30 mins 1800, # 30 mins 3600, # 1 hour 10800, # 3 hours 2700, # 45 mins 4500, # 1 hour 15 mins ] } df = pd.DataFrame(data) trip_duration_stats(df) ```","solution":"import pandas as pd def convert_seconds(seconds): Converts seconds to days, hours, minutes, and seconds days = seconds // (24 * 3600) seconds %= (24 * 3600) hours = seconds // 3600 seconds %= 3600 minutes = seconds // 60 seconds %= 60 return days, hours, minutes, seconds def trip_duration_stats(df): Displays statistics on the total and average trip duration. # Calculate total travel time total_duration = df[\'Trip Duration\'].sum() total_days, total_hours, total_minutes, total_seconds = convert_seconds(total_duration) print(\\"Total travel time: {} days, {} hours, {} minutes, {} seconds\\".format(total_days, total_hours, total_minutes, total_seconds)) # Calculate mean travel time mean_duration = df[\'Trip Duration\'].mean() mean_hours, mean_minutes, mean_seconds = convert_seconds(int(mean_duration))[1:] # [1:] to exclude days print(\\"Mean travel time: {} hours, {} minutes, {} seconds\\".format(mean_hours, mean_minutes, mean_seconds))"},{"question":"Write a Python function named `filter_and_square_even` that takes a list of integers as input and returns a new list containing the squares of the even numbers from the original list. The function should follow these steps: 1. Iterate through the given list. 2. Identify the even numbers. 3. Compute the square of each even number. 4. Append each squared even number to a new list. 5. Return the resulting list. The function should not modify the original list. The function must handle an empty list input by returning an empty list. **Example Usage:** ```python result = filter_and_square_even([1, 2, 3, 4, 5]) print(result) # Output: [4, 16] result = filter_and_square_even([10, 15, 20]) print(result) # Output: [100, 400] result = filter_and_square_even([]) print(result) # Output: [] ``` **Requirements:** - Define a function named `filter_and_square_even`. - Use list comprehension or a loop to perform the operations. - Ensure the function does not modify the input list.","solution":"def filter_and_square_even(numbers): Returns a list containing the squares of the even numbers from the original list. Arguments: numbers -- a list of integers Returns: a new list containing the squares of the even numbers return [x**2 for x in numbers if x % 2 == 0]"},{"question":"You are required to write a function named `generate_report` which takes a list of dictionaries as input. Each dictionary represents a student, containing their name and a list of their scores. The function should calculate the average score for each student, assign a letter grade based on the average, and return a list of dictionaries with the student names, their average score, and their assigned grade. Grade criteria are as follows: - 90 and above: \'A\' - 80 to 89: \'B\' - 70 to 79: \'C\' - 60 to 69: \'D\' - Below 60: \'F\' Here\'s a step-by-step guide to follow: 1. Define a function `generate_report(students)`. 2. Iterate through the list of student dictionaries. 3. For each student, calculate their average score. 4. Determine the letter grade based on the average score. 5. Create a new dictionary with the student\'s name, average score, and letter grade. 6. Append this new dictionary to the result list. 7. Return the result list. Function Signature: ```python def generate_report(students: list) -> list: ``` **Example:** ```python students = [ {\\"name\\": \\"Alice\\", \\"scores\\": [88, 92, 85, 91]}, {\\"name\\": \\"Bob\\", \\"scores\\": [75, 78, 72, 70]}, {\\"name\\": \\"Charlie\\", \\"scores\\": [95, 97, 96, 100]} ] generate_report(students) # The function should return: # [ # {\\"name\\": \\"Alice\\", \\"average\\": 89.0, \\"grade\\": \\"B\\"}, # {\\"name\\": \\"Bob\\", \\"average\\": 73.75, \\"grade\\": \\"C\\"}, # {\\"name\\": \\"Charlie\\", \\"average\\": 97.0, \\"grade\\": \\"A\\"} # ] ```","solution":"def generate_report(students): def calculate_grade(average): if average >= 90: return \'A\' elif average >= 80: return \'B\' elif average >= 70: return \'C\' elif average >= 60: return \'D\' else: return \'F\' report = [] for student in students: scores = student[\'scores\'] average = sum(scores) / len(scores) grade = calculate_grade(average) report.append({ \\"name\\": student[\'name\'], \\"average\\": average, \\"grade\\": grade }) return report"},{"question":"You are required to implement a function named `find_dependency_order` that determines the order in which packages should be installed given their dependencies. **Requirements:** 1. **Reading Input:** - Read an input CSV file defined by `dependencies_csv_name`. 2. **Parsing Dependencies:** - Each row in the CSV file contains a package name and a list of its dependencies. - Dependencies are packages that need to be installed before the package. 3. **Ordering Packages:** - Determine the order in which packages should be installed. - If there is a cyclic dependency, return an empty list. 4. **Output:** - Save the correct order of installation to a CSV file (`installation_order.csv`). Your task is to implement this functionality in the function `find_dependency_order` using the `pandas` library for reading the CSV file and manage the dependencies using appropriate data structures. # Function Signature: ```python def find_dependency_order(dependencies_csv_name: str) -> None: pass ``` # Inputs: - `dependencies_csv_name`: String, path to the CSV file containing the packages and their dependencies. # Outputs: - The function will save the installation order to the following file: - `installation_order.csv`: CSV file containing the correct order of package installations. Each package should be listed in the order it should be installed in a single column. **CSV Input Format:** - The CSV file will have the following format: ``` package, dependencies A, B C B, C C, ``` This indicates package A depends on B and C, package B depends on C, and package C has no dependencies. # Example: ```python dependencies_csv_name = \'dependencies.csv\' find_dependency_order(dependencies_csv_name) ``` If the `dependencies.csv` file contains: ``` package, dependencies A, B C B, C C, ``` The `installation_order.csv` file will be: ``` C B A ``` In the event of a cyclic dependency, such as: ``` package, dependencies A, B B, A ``` The function should produce an empty list and the resulting `installation_order.csv` should be empty as well.","solution":"import pandas as pd from collections import defaultdict, deque def find_dependency_order(dependencies_csv_name: str) -> None: # Read input CSV file into a DataFrame df = pd.read_csv(dependencies_csv_name) # Create a graph and an in-degree map dependency_graph = defaultdict(list) in_degree = defaultdict(int) packages = set() # Parse the CSV to build the graph and in-degree map for index, row in df.iterrows(): package = row[\'package\'] dependencies = row[\'dependencies\'] dependencies_list = dependencies.split() if pd.notna(dependencies) else [] packages.add(package) for dependency in dependencies_list: dependency_graph[dependency].append(package) in_degree[package] += 1 if package not in in_degree: in_degree[package] = 0 # Kahn\'s Algorithm for Topological Sorting # Initialize a queue with nodes having zero in-degree zero_in_degree_queue = deque([pkg for pkg in packages if in_degree[pkg] == 0]) installation_order = [] while zero_in_degree_queue: current = zero_in_degree_queue.popleft() installation_order.append(current) for dependent in dependency_graph[current]: in_degree[dependent] -= 1 if in_degree[dependent] == 0: zero_in_degree_queue.append(dependent) # Check if there was a cycle if len(installation_order) != len(packages): installation_order = [] # Save the installation order to a file pd.DataFrame({\'package\': installation_order}).to_csv(\'installation_order.csv\', index=False)"},{"question":"You are tasked with creating a function that determines whether a given 8x8 chessboard configuration is valid. A valid chessboard configuration means that no two pieces threaten each other. You will be given a list of strings `chessboard` representing the board configuration, where: - Each character in the string can be \'.\', \'Q\', \'R\', \'B\', \'N\', \'P\', or \'K\' representing empty squares, queens, rooks, bishops, knights, pawns, and kings respectively. - White pieces are represented as uppercase letters, while black pieces are represented as lowercase letters. You need to implement the function `is_valid_chessboard(chessboard)` which returns a boolean indicating whether the configuration is valid. **Function Signature:** ```python def is_valid_chessboard(chessboard: list[str]) -> bool: # your code here ``` **Input:** - A list of 8 strings, each of length 8, representing the chessboard. **Output:** - A boolean indicating whether the given chessboard configuration is valid. **Constraints:** - The list `chessboard` will always be of length 8, and each string within it will always be of length 8. **Example:** ```python chessboard = [ \\".Q......\\", \\"........\\", \\"..K.....\\", \\"........\\", \\"........\\", \\"........\\", \\"........\\", \\"........\\" ] print(is_valid_chessboard(chessboard)) # Expected output: True ``` # Hint: Consider implementing helper functions to check the valid moves and attacks for each chess piece to ensure no two pieces put each other in a threatening position.","solution":"def is_valid_chessboard(chessboard): Returns True if the given chessboard configuration is valid, else False. def is_valid_position(board): Check whether any two pieces in the board threaten each other. def validate_queens(board): queens_positions = [(r, c) for r in range(8) for c in range(8) if board[r][c] == \'Q\' or board[r][c] == \'q\'] for i in range(len(queens_positions)): r1, c1 = queens_positions[i] for j in range(i+1, len(queens_positions)): r2, c2 = queens_positions[j] if r1 == r2 or c1 == c2 or abs(r1 - r2) == abs(c1 - c2): return False return True def validate_rooks(board): rooks_positions = [(r, c) for r in range(8) for c in range(8) if board[r][c] == \'R\' or board[r][c] == \'r\'] for i in range(len(rooks_positions)): r1, c1 = rooks_positions[i] for j in range(i+1, len(rooks_positions)): r2, c2 = rooks_positions[j] if r1 == r2 or c1 == c2: return False return True def validate_bishops(board): bishops_positions = [(r, c) for r in range(8) for c in range(8) if board[r][c] == \'B\' or board[r][c] == \'b\'] for i in range(len(bishops_positions)): r1, c1 = bishops_positions[i] for j in range(i+1, len(bishops_positions)): r2, c2 = bishops_positions[j] if abs(r1 - r2) == abs(c1 - c2): return False return True def validate_knights(board): knights_positions = [(r, c) for r in range(8) for c in range(8) if board[r][c] == \'N\' or board[r][c] == \'n\'] moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)] for i in range(len(knights_positions)): r1, c1 = knights_positions[i] for dx, dy in moves: r2, c2 = r1 + dx, c1 + dy if 0 <= r2 < 8 and 0 <= c2 < 8 and (board[r2][c2] == \'N\' or board[r2][c2] == \'n\'): return False return True def validate_kings(board): kings_positions = [(r, c) for r in range(8) for c in range(8) if board[r][c] == \'K\' or board[r][c] == \'k\'] moves = [(1, 1), (1, 0), (1, -1), (0, 1), (0, -1), (-1, 1), (-1, 0), (-1, -1)] for i in range(len(kings_positions)): r1, c1 = kings_positions[i] for dx, dy in moves: r2, c2 = r1 + dx, c1 + dy if 0 <= r2 < 8 and 0 <= c2 < 8 and (board[r2][c2] == \'K\' or board[r2][c2] == \'k\'): return False return True return (validate_queens(board) and validate_rooks(board) and validate_bishops(board) and validate_knights(board) and validate_kings(board)) return is_valid_position(chessboard)"},{"question":"You are required to write a function named `reverse_words` that takes a string as input and returns a new string with the words in reverse order. Words are defined as sequences of characters separated by space(s). # Function Signature ```python def reverse_words(s: str) -> str: ``` # Parameters - `s` (str): A string containing words separated by spaces. # Returns - A new string with the words in `s` reversed. # Example ```python >>> reverse_words(\\"The quick brown fox\\") \\"fox brown quick The\\" >>> reverse_words(\\"Hello world!\\") \\"world! Hello\\" >>> reverse_words(\\" A spaced out example \\") \\"example out spaced A\\" ``` # Requirements - The function should handle multiple spaces between words and at the beginning or end of the string. - The function should not use any built-in functions specifically designed for reversing strings or lists (e.g., `str[::-1]` or `list.reverse()`). Ensure your function efficiently reverses the words and preserves spaces appropriately.","solution":"def reverse_words(s: str) -> str: Returns a new string with the words in s reversed. Words are defined as sequences of characters separated by space(s). # Split words by space(s), filter out empty strings from possible consecutive spaces words = [word for word in s.split(\' \') if word] # Reverse the list of words reversed_words = words[::-1] # Join the reversed words with a single space to form the final output return \' \'.join(reversed_words)"},{"question":"You are required to implement a function named `k_nearest_neighbors` which performs the k-nearest neighbors classification algorithm. This function should classify a given query point based on the majority class of its k-nearest neighbors in the training data. Here are the specifics of the `k_nearest_neighbors` function: - **Function Name**: `k_nearest_neighbors` - **Parameters**: 1. `train_features` (numpy array): A 2D array with shape `(N, M)` where `N` is the number of training samples and `M` is the number of features per sample. 2. `train_labels` (numpy array): A 1D array with shape `(N,)` containing the class labels for the training samples. 3. `query_point` (numpy array): A 1D array with shape `(M,)` representing the feature vector of the query point. 4. `k` (int): The number of nearest neighbors to consider. - **Returns**: - `predicted_class` (int): The predicted class label for the query point. The classification process involves the following steps: 1. Calculate the Euclidean distances between the query point and all training samples. 2. Identify the k-nearest neighbors that have the smallest distances. 3. Determine the most common class label among the k-nearest neighbors. 4. Return the most common class label as the predicted class for the query point. Below is an illustration of the Euclidean distance computation: ```python distance = np.linalg.norm(train_features[i] - query_point) ``` Use the provided `numpy` library functions `numpy.linalg.norm`, `numpy.argsort`, and `numpy.bincount` to implement the steps. **Note**: Ensure to use `numpy.linalg.norm` for distance computation, `numpy.argsort` to get the indices of the nearest neighbors, and `numpy.bincount` to count the occurrences of class labels. Below is the code template for clarity: ```python import numpy as np def k_nearest_neighbors(train_features, train_labels, query_point, k): distances = np.linalg.norm(train_features - query_point, axis=1) nearest_neighbors_indices = np.argsort(distances)[:k] nearest_labels = train_labels[nearest_neighbors_indices] # Count occurrences of each class label and determine the majority class predicted_class = np.bincount(nearest_labels).argmax() return predicted_class ```","solution":"import numpy as np def k_nearest_neighbors(train_features, train_labels, query_point, k): Classify a query point based on the majority class of its k-nearest neighbors. Parameters: - train_features (numpy array): A 2D array of training samples with shape (N, M). - train_labels (numpy array): A 1D array of class labels for the training samples with shape (N,). - query_point (numpy array): A 1D array representing the feature vector of the query point with shape (M,). - k (int): The number of nearest neighbors to consider. Returns: - predicted_class (int): The predicted class label for the query point. # Calculate the Euclidean distances between the query point and all training samples distances = np.linalg.norm(train_features - query_point, axis=1) # Identify the indices of the k-nearest neighbors nearest_neighbors_indices = np.argsort(distances)[:k] # Extract the labels of the k-nearest neighbors nearest_labels = train_labels[nearest_neighbors_indices] # Determine the most common class label among the k-nearest neighbors predicted_class = np.bincount(nearest_labels).argmax() return predicted_class"},{"question":"You are tasked with creating a Python function named `generate_report_card` that processes a list of dictionaries representing student grades and outputs a summary report card. Each dictionary contains the student\'s name and their grades in three subjects: \\"Math\\", \\"Science\\", and \\"English\\". The function should compute the average grade for each student and determine their grade status as \\"Passed\\" or \\"Failed\\". A student passes if their average grade is 60 or above. The report should list each student’s name, their average grade, and their grade status. **Function Signature:** ```python def generate_report_card(students: list): pass ``` **Requirements:** - Compute the average grade for each student. - Determine whether each student has \\"Passed\\" or \\"Failed\\". - Print each student\'s name, average grade, and grade status in a neatly formatted manner. # Sample Input: ```python students = [ {\\"name\\": \\"Alice\\", \\"Math\\": 70, \\"Science\\": 85, \\"English\\": 78}, {\\"name\\": \\"Bob\\", \\"Math\\": 55, \\"Science\\": 62, \\"English\\": 58}, {\\"name\\": \\"Charlie\\", \\"Math\\": 95, \\"Science\\": 90, \\"English\\": 98} ] ``` # Expected Output: ``` Name: Alice, Average Grade: 77.67, Status: Passed Name: Bob, Average Grade: 58.33, Status: Failed Name: Charlie, Average Grade: 94.33, Status: Passed ```","solution":"def generate_report_card(students): This function takes a list of dictionaries where each dictionary contains a student\'s name and their grades in three subjects: Math, Science, and English. It then calculates their average grade, determines if they passed or failed, and prints a report card for each student. for student in students: name = student[\'name\'] grades = [student[\'Math\'], student[\'Science\'], student[\'English\']] average_grade = sum(grades) / len(grades) status = \\"Passed\\" if average_grade >= 60 else \\"Failed\\" print(f\\"Name: {name}, Average Grade: {average_grade:.2f}, Status: {status}\\")"},{"question":"Write a function that takes a list of non-negative integers representing the coordinates of points on a 2D grid, where all points lie on the x-axis (i.e., the y-coordinate is always 0). The function should compute and return the maximum distance between any two points in the list. The function should output: int: The maximum distance between any two points. You should write a self-contained function starting with: ``` def max_distance(points): ```","solution":"def max_distance(points): Returns the maximum distance between any two points on the x-axis. Args: points (list of int): List of non-negative integers representing x-coordinates. Returns: int: The maximum distance between any two points. if not points or len(points) < 2: return 0 min_point = min(points) max_point = max(points) return max_point - min_point"},{"question":"Write a function to simulate a vending machine that dispenses products. The vending machine should support operations including adding new products, dispensing a product, and showing the current inventory. Each product has a unique code, a name, a price, and a quantity. The function should manage these products and ensure that a product cannot be dispensed if it is out of stock. Make sure to handle cases where the requested operation is invalid or cannot be completed due to insufficient inventory. Your function should be self-contained and can use standard Python data structures like lists or dictionaries. You should write self-contained code starting with: ``` class VendingMachine: def __init__(self): self.inventory = {} def add_product(self, code, name, price, quantity): ```","solution":"class VendingMachine: def __init__(self): self.inventory = {} def add_product(self, code, name, price, quantity): Add a new product to the vending machine, or update the quantity if the product already exists. :param code: Unique code for the product. :param name: Name of the product. :param price: Price of the product. :param quantity: Quantity of the product. if code in self.inventory: self.inventory[code][\'quantity\'] += quantity else: self.inventory[code] = {\'name\': name, \'price\': price, \'quantity\': quantity} def dispense_product(self, code): Dispense a product if it is in stock. :param code: Unique code for the product to be dispensed. :return: A message indicating the result of the operation. if code not in self.inventory: return \\"Product code not found.\\" elif self.inventory[code][\'quantity\'] == 0: return \\"Product out of stock.\\" else: self.inventory[code][\'quantity\'] -= 1 return f\\"Dispensed {self.inventory[code][\'name\']}.\\" def show_inventory(self): Return the current inventory of the vending machine. :return: A dictionary representing the current inventory. return self.inventory"},{"question":"In this problem, you will create a function that processes text data, finds the most frequently occurring word, and counts its occurrences across multiple documents. Your function will leverage Python\'s string manipulation capabilities to achieve this. The function should be named `find_most_frequent_word`. Here are the steps you need to follow within this function: 1. Import the `Counter` class from the `collections` module. 2. The function will accept a list of strings (`documents`) as input. Each string in the list represents a document. 3. Pre-process each document by: - Converting all characters to lower case. - Removing punctuation marks (.,!?\\"\':;). - Splitting the document into words based on whitespace. 4. Use the `Counter` to tally the frequency of each word across all documents. 5. Identify the most frequently occurring word and count its occurrences. 6. Return a tuple containing the most frequently occurring word and its count. Your resulting function signature should look like this: ```python def find_most_frequent_word(documents): # Your implementation here ``` **Functionality Requirements:** 1. The function should return a tuple in the format `(word, count)`, where `word` is a string and `count` is an integer. 2. If there is a tie for the most frequent word, return the first one encountered in the sorted list of tied words (i.e., sort the words alphabetically and take the first one).","solution":"from collections import Counter import string def find_most_frequent_word(documents): Finds the most frequently occurring word across multiple documents. words = [] for doc in documents: # Convert to lower case doc = doc.lower() # Remove punctuation doc = doc.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split into words words += doc.split() # Count the frequency of each word word_count = Counter(words) # Find the most frequent word most_common = word_count.most_common() if most_common: # Sort by frequency (descending) then alphabetically most_common_sorted = sorted(most_common, key=lambda x: (-x[1], x[0])) return most_common_sorted[0] else: return (\\"\\", 0)"},{"question":"You are required to implement a feature in an imaginary e-commerce system to track and validate promotional codes. Each promotional code can be used by multiple users but has a limited number of uses in total. The goal is to implement a class that manages the promotional codes and validates transactions against them. Your task is to write a Python class called `PromotionTracker` which achieves the following: 1. Initialize a promotion tracker with available promotional codes and their respective usage limits. 2. Provide a method to check if a code is valid and can be used (i.e., not yet exhausted). 3. Provide a method to register a use of a promotional code. 4. Track the remaining number of uses for each promotional code. Here is the signature of the class you need to implement: ```python class PromotionTracker: def __init__(self, promo_codes: dict): Initialize the tracker with a dictionary of promotional codes and their usage limits. :param promo_codes: A dictionary where keys are promotional codes (strings) and values are the maximum number of uses (integers) pass def is_code_valid(self, code: str) -> bool: Check if the promotional code is valid and can be used. :param code: The promotional code to check :return: True if the code is valid and has remaining uses, False otherwise. pass def use_code(self, code: str) -> bool: Register a use of the promotional code if it is valid. :param code: The promotional code to use :return: True if the use was successful, False otherwise. pass def remaining_uses(self, code: str) -> int: Get the remaining number of uses for the given promotional code. :param code: The promotional code to check :return: The number of remaining uses. If the code does not exist, return -1. pass ``` # Detailed Steps and Data: 1. **Initialization**: - The constructor takes a dictionary `promo_codes` where the keys are the promotional codes (strings) and the values are the maximum number of uses (integers). - The promotional code usage information should be stored internally to track remaining uses. 2. **Validation Method**: - The method `is_code_valid` checks if the promotional code exists and if there are any remaining uses for it. - Returns `True` if the code is valid and has remaining uses, `False` otherwise. 3. **Code Usage Method**: - The method `use_code` registers a use of the promotional code if it is valid. - Returns `True` if the code was successfully registered, `False` otherwise. 4. **Remaining Uses Method**: - The method `remaining_uses` returns the number of remaining uses for a specific promotional code. - If the promotional code does not exist, it returns `-1`. Use appropriate data structures to manage the promotional codes and their remaining uses efficiently.","solution":"class PromotionTracker: def __init__(self, promo_codes: dict): Initialize the tracker with a dictionary of promotional codes and their usage limits. :param promo_codes: A dictionary where keys are promotional codes (strings) and values are the maximum number of uses (integers) self.promo_codes = promo_codes self.usage = {code: 0 for code in promo_codes} def is_code_valid(self, code: str) -> bool: Check if the promotional code is valid and can be used. :param code: The promotional code to check :return: True if the code is valid and has remaining uses, False otherwise. if code in self.promo_codes and self.usage[code] < self.promo_codes[code]: return True return False def use_code(self, code: str) -> bool: Register a use of the promotional code if it is valid. :param code: The promotional code to use :return: True if the use was successful, False otherwise. if self.is_code_valid(code): self.usage[code] += 1 return True return False def remaining_uses(self, code: str) -> int: Get the remaining number of uses for the given promotional code. :param code: The promotional code to check :return: The number of remaining uses. If the code does not exist, return -1. if code in self.promo_codes: return self.promo_codes[code] - self.usage[code] return -1"},{"question":"You are given a binary matrix `matrix` of shape `n x m`, where each element is either 0 or 1. Your task is to find the size of the largest square that contains only 1s and return its area. Write a function `largest_square_area(matrix)` that takes a binary matrix as input and returns the area of the largest square containing only 1s. Your function should follow these specifications: Function Signature ```python def largest_square_area(matrix: List[List[int]]) -> int: ``` Parameters - `matrix`: A list of lists where each inner list represents a row of the binary matrix. Returns - An integer representing the area of the largest square containing only 1s. # Example ```python matrix = [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] largest_square_area(matrix) # returns 4, as the largest square has a side length of 2. ``` # Constraints - The matrix will have at least 1 row and 1 column. - The elements in the matrix are either 0 or 1. # Notes - Consider dynamic programming to optimize the solution.","solution":"from typing import List def largest_square_area(matrix: List[List[int]]) -> int: if not matrix: return 0 n = len(matrix) m = len(matrix[0]) if n == 0 or m == 0: return 0 dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if i == 0 or j == 0: dp[i][j] = matrix[i][j] elif matrix[i][j] == 1: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 0 max_side = max(max_side, dp[i][j]) return max_side ** 2"},{"question":"You are required to write a Python function `print_permutations` that takes a single argument: a string `s` consisting of unique characters. The goal of this function is to generate and print all possible permutations of the string `s`. **Requirements:** - Use recursion to solve this problem. - You should not use any built-in library functions for permutations. - Each permutation should be printed on a new line. Here\'s the function you need to implement: ```python def print_permutations(s): Generates and prints all permutations of the given string. Parameters: s (str): A string with unique characters. def permute(prefix, remaining): if len(remaining) == 0: print(prefix) else: for i in range(len(remaining)): permute(prefix + remaining[i], remaining[:i] + remaining[i+1:]) permute(\\"\\", s) ``` **Data and Usage Example:** Assume you have a string `s` as shown below: ```python s = \\"ABC\\" ``` Calling the function: ```python print_permutations(s) ``` This should output: ``` ABC ACB BAC BCA CAB CBA ```","solution":"def print_permutations(s): Generates and prints all permutations of the given string. Parameters: s (str): A string with unique characters. def permute(prefix, remaining): if len(remaining) == 0: print(prefix) else: for i in range(len(remaining)): permute(prefix + remaining[i], remaining[:i] + remaining[i+1:]) permute(\\"\\", s)"},{"question":"You are to design a function to download an image from a provided URL and save it to the local filesystem. The function should be named `download_image` and take two arguments: `url` (a string representing the URL of the image) and `file_path` (a string representing the local file path where the image should be saved). Your function should perform the following steps: 1. Make a GET request to the provided URL to download the image data. 2. Check if the request was successful (status code 200). 3. If successful, save the image content to the specified local file path. 4. Handle any errors, including HTTP errors and file I/O errors, gracefully. Here are some additional details and constraints: - You must use the `requests` library in Python to perform the HTTP request. - Ensure the function works for both relative and absolute file paths. - If an error occurs, the function should print an appropriate error message and return `False`. - If the image is downloaded and saved successfully, return `True`. You can use the following code snippet to get you started with making HTTP requests and saving files in Python: ```python import requests def download_image(url, file_path): try: response = requests.get(url) if response.status_code == 200: with open(file_path, \'wb\') as file: file.write(response.content) return True else: print(f\\"HTTP Error: {response.status_code}\\") return False except Exception as e: print(f\\"Error: {e}\\") return False ```","solution":"import requests def download_image(url, file_path): Downloads an image from a specified URL and saves it to the local filesystem. Parameters: url (str): The URL of the image to download. file_path (str): The file path where the image should be saved. Returns: bool: True if the image was successfully downloaded and saved, False otherwise. try: response = requests.get(url) if response.status_code == 200: with open(file_path, \'wb\') as file: file.write(response.content) return True else: print(f\\"HTTP Error: {response.status_code}\\") return False except Exception as e: print(f\\"Error: {e}\\") return False"},{"question":"In this exercise, you will practice manipulating and transforming string data using Python. You are given a list of strings representing log entries from a server. Each log entry has the following format: “<timestamp> <log_level> <message>”, where: - `<timestamp>` is a string representing the date and time of the log in the format \\"YYYY-MM-DD HH:MM:SS\\". - `<log_level>` is a string representing the severity of the log (\\"INFO\\", \\"WARN\\", \\"ERROR\\"). - `<message>` is a string containing the log message. Your task is to implement a function `process_logs(logs)` that processes these log entries and returns a summary dictionary with the following structure: - A key for each log level (\\"INFO\\", \\"WARN\\", \\"ERROR\\") with the count of log entries for that level. - A key `latest_log` containing the log entry with the most recent timestamp. **Function Signature:** ```python def process_logs(logs: list[str]) -> dict: ... ``` **Requirements:** - Parse each log entry to extract the timestamp, log level, and message. - Aggregate the count of log entries by their log level. - Identify and store the log entry with the latest timestamp. **Example:** ```python logs = [ \\"2023-02-15 10:45:32 INFO User logged in.\\", \\"2023-02-15 11:00:01 WARN Disk space low.\\", \\"2023-02-15 11:30:45 ERROR Unable to save file.\\", \\"2023-02-15 12:00:00 INFO User logged out.\\" ] result = process_logs(logs) print(result) ``` Output: ```python { \'INFO\': 2, \'WARN\': 1, \'ERROR\': 1, \'latest_log\': \\"2023-02-15 12:00:00 INFO User logged out.\\" } ``` Ensure your implementation handles edge cases such as empty log lists or logs having identical timestamps correctly.","solution":"from datetime import datetime def process_logs(logs): Processes a list of log entries and returns a summary dictionary. Args: logs: list of str : List of log entries in the format \\"YYYY-MM-DD HH:MM:SS <log_level> <message>\\" Returns: dict : Summary dictionary with counts of each log level and the latest log entry. summary = {\'INFO\': 0, \'WARN\': 0, \'ERROR\': 0, \'latest_log\': \'\'} latest_timestamp = None for log in logs: parts = log.split(\' \', 3) timestamp = \' \'.join(parts[:2]) log_level = parts[2] message = parts[3] # Count the log level summary[log_level] += 1 # Check if this log entry is the latest current_timestamp = datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\") if latest_timestamp is None or current_timestamp > latest_timestamp: latest_timestamp = current_timestamp summary[\'latest_log\'] = log return summary"},{"question":"You are given a dataset containing job application information, which includes the applicant\'s name, the job title they applied for, and the application date. Your task is to aggregate the number of applications and the unique applicant count per job title for each month. To achieve this, you will create a function named `aggregate_applications` that takes a pandas DataFrame (`data`) as input. The DataFrame contains the columns `applicant_name` (name of the applicant), `job_title` (title of the job applied for), and `application_date` (date of application). You will also be given two lists: one containing the unique job titles (`jobs`) and the other containing the unique month names (`months`) in your dataset. Your function should return two pandas DataFrames: 1. `total_applications` - a DataFrame with the total number of applications per job title for each month. 2. `unique_applicants` - a DataFrame with the count of unique applicants per job title for each month. # Function Signature ```python def aggregate_applications(data: pd.DataFrame, jobs: list, months: list) -> Tuple[pd.DataFrame, pd.DataFrame]: ``` # Requirements: 1. You **must** use the `pandas` library to create, manipulate and return the DataFrames. 2. Ensure that `jobs` and `months` are sorted properly before creating the DataFrames. # Example Input: ```python data = pd.DataFrame({ \'applicant_name\': [\'John\', \'Alice\', \'John\', \'Bob\', \'Alice\', \'John\'], \'job_title\': [\'Engineer\', \'Manager\', \'Engineer\', \'Analyst\', \'Manager\', \'Engineer\'], \'application_date\': [\'2023-01-15\', \'2023-02-16\', \'2023-01-20\', \'2023-01-25\', \'2023-02-10\', \'2023-03-05\'] }) jobs = [\'Engineer\', \'Manager\', \'Analyst\'] months = [\'2023-01\', \'2023-02\', \'2023-03\'] ``` # Example Output: ```python total_applications = pd.DataFrame({ \'2023-01\': [2, 0, 1], \'2023-02\': [0, 2, 0], \'2023-03\': [1, 0, 0] }, index=[\'Engineer\', \'Manager\', \'Analyst\']) unique_applicants = pd.DataFrame({ \'2023-01\': [1, 0, 1], \'2023-02\': [0, 1, 0], \'2023-03\': [1, 0, 0] }, index=[\'Engineer\', \'Manager\', \'Analyst\']) ```","solution":"import pandas as pd from typing import Tuple def aggregate_applications(data: pd.DataFrame, jobs: list, months: list) -> Tuple[pd.DataFrame, pd.DataFrame]: # Convert application_date to datetime and extract the month in \'YYYY-MM\' format data[\'application_month\'] = pd.to_datetime(data[\'application_date\']).dt.to_period(\'M\').astype(str) # Initialize an empty DataFrame for total applications total_applications = pd.DataFrame(0, index=jobs, columns=months) # Initialize an empty DataFrame for unique applicants unique_applicants = pd.DataFrame(0, index=jobs, columns=months) # Iterate over each job and month to calculate counts for job in jobs: for month in months: applications = data[(data[\'job_title\'] == job) & (data[\'application_month\'] == month)] total_applications.loc[job, month] = len(applications) unique_applicants.loc[job, month] = applications[\'applicant_name\'].nunique() return total_applications, unique_applicants"},{"question":"You are given a list of tuples, where each tuple contains three elements: a string representing a person\'s name, an integer representing their age, and a floating-point number representing their height in meters. Your task is to write a function named `calculate_average_height` that takes this list as input and returns a dictionary where the keys are unique age values and the values are the average heights of persons with that age. To solve this problem, you need to complete the `calculate_average_height` function as follows: 1. Iterate through the list of tuples and group the heights by age. 2. Calculate the average height for each age group. 3. Return a dictionary with ages as keys and their corresponding average heights as values. Use the following function signature: ```python def calculate_average_height(person_data: list[tuple[str, int, float]]) -> dict[int, float]: ... ``` # Requirements: 1. The function must handle an empty list and return an empty dictionary. 2. The function must round the average heights to two decimal places. Example: ```python input_data = [ (\\"Alice\\", 23, 1.65), (\\"Bob\\", 21, 1.70), (\\"Charlie\\", 23, 1.75), (\\"David\\", 21, 1.80), (\\"Eva\\", 25, 1.55) ] average_heights = calculate_average_height(input_data) print(average_heights) ``` Should produce: ``` {23: 1.70, 21: 1.75, 25: 1.55} ```","solution":"def calculate_average_height(person_data): This function takes a list of tuples where each tuple contains a person\'s name, age, and height. It returns a dictionary where the keys are age and the values are the average heights of persons with that age, rounded to two decimal places. from collections import defaultdict heights_by_age = defaultdict(list) for name, age, height in person_data: heights_by_age[age].append(height) average_heights = {} for age, heights in heights_by_age.items(): average = round(sum(heights) / len(heights), 2) average_heights[age] = average return average_heights"},{"question":"You are tasked with writing a function `maximal_rectangle` that finds the largest rectangle containing only 1\'s in a given binary matrix and returns its area. The binary matrix is represented by a list of lists of integers, where 1 represents filled cells and 0 represents empty cells. Your function will take one argument: - `matrix`: a 2D list of integers (0\'s and 1\'s) where each element represents a cell in the binary matrix. The function should return an integer representing the area of the largest rectangle containing only 1\'s. **Requirements:** - You must handle both empty matrices and matrices of various dimensions. - Optimize the solution for large matrices. **Function Signature:** ```python def maximal_rectangle(matrix): pass ```","solution":"def maximal_rectangle(matrix): Finds the largest rectangle containing only 1\'s in a given binary matrix and returns its area. Args: matrix (list of list of int): 2D binary matrix where each element is 0 or 1. Returns: int: The area of the largest rectangle containing only 1\'s. if not matrix or not matrix[0]: return 0 n_cols = len(matrix[0]) heights = [0] * (n_cols + 1) max_area = 0 for row in matrix: for col in range(n_cols): # Update the column heights. if row[col] == 0: heights[col] = 0 else: heights[col] += 1 # Calculate the max area in the histogram (heights) using a stack. stack = [-1] for i in range(n_cols + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - 1 - stack[-1] max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"You are tasked with implementing a simple linear regression prediction function. Linear regression is a commonly used statistical method for predicting a continuous target variable based on input features. The model predicts the target value by computing a weighted sum of the input features plus a bias term. Your objective is to create a function `linear_predict(X, w, b)` that computes the prediction values for linear regression on a given dataset. The parameter `X` is a 2D NumPy array where each row represents a sample with its features, `w` is a 1D NumPy array representing the weight vector, and `b` is a scalar representing the bias term. # Function Signature: ```python def linear_predict(X: np.ndarray, w: np.ndarray, b: float) -> np.ndarray: pass ``` # Input: - `X`: A 2D NumPy array of shape `(n_samples, n_features)` representing the feature matrix. - `w`: A 1D NumPy array of shape `(n_features,)` representing the weight vector. - `b`: A float representing the bias term. # Output: - Returns a 1D NumPy array of shape `(n_samples,)` where each element is the predicted target value for the corresponding sample. # Example: ```python import numpy as np X = np.array([[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]]) w = np.array([0.5, 1.0]) b = 0.1 # The function call should be: predictions = linear_predict(X, w, b) # Example output: # predictions -> array([2.6, 4.1, 5.6]) ``` # Instructions: 1. Use the `numpy.matmul` function to perform matrix multiplication between `X` and `w`. 2. Add the bias term `b` to each resulting product to compute the predictions. 3. Ensure that your function handles a variety of input shapes correctly as per the specified dimensions above. 4. Avoid any loops; instead, take full advantage of NumPy\'s vectorized operations for efficiency.","solution":"import numpy as np def linear_predict(X: np.ndarray, w: np.ndarray, b: float) -> np.ndarray: Computes the prediction values for linear regression. Parameters: - X: 2D NumPy array of shape (n_samples, n_features) representing the feature matrix. - w: 1D NumPy array of shape (n_features,) representing the weight vector. - b: Float representing the bias term. Returns: - 1D NumPy array of shape (n_samples,) representing the prediction values. return np.matmul(X, w) + b"},{"question":"You are required to write a Python function that normalizes (scales) the features of a given dataset using Min-Max Scaling technique. The function will take in the dataset and the range into which the features should be scaled. This function should use the `MinMaxScaler` from `sklearn.preprocessing`. # Function Signature ```python def normalize_features(data, feature_range=(0, 1)): ``` # Parameters: - **data** (array-like): The dataset to be normalized, with shape (n_samples, n_features). - **feature_range** (tuple): Desired range of transformed data. # Output: - **Returns**: - A numpy array of the normalized dataset. # Instructions: 1. Use the `MinMaxScaler` to scale the features of the dataset. 2. Transform the data to the specified `feature_range`. 3. Return the normalized dataset as a numpy array. # Example: Suppose you have a dataset `data` as below: ```python data = [[-1, 2], [-0.5, 6], [0, 10], [1, 18]] ``` Your function, when called as `normalize_features(data, feature_range=(0, 1))`, should return: ```python array([[0. , 0. ], [0.25, 0.25], [0.5 , 0.5 ], [1. , 1. ]]) ```","solution":"import numpy as np from sklearn.preprocessing import MinMaxScaler def normalize_features(data, feature_range=(0, 1)): Normalizes the features of a given dataset using Min-Max Scaling. Parameters: - data (array-like): The dataset to be normalized, with shape (n_samples, n_features). - feature_range (tuple): Desired range of transformed data. Returns: - A numpy array of the normalized dataset. scaler = MinMaxScaler(feature_range=feature_range) normalized_data = scaler.fit_transform(data) return normalized_data"},{"question":"You are tasked with writing a Python function named `toHexadecimal` that converts a given non-negative integer to its hexadecimal representation as a string. Hexadecimal values contain digits 0-9 and letters a-f, representing values 10-15. The function should convert the integer following the standard rules of hexadecimal conversion without using Python\'s built-in conversion methods. Instead, you should implement the conversion manually. Your goal is to: 1. Check if the input integer is zero and return \\"0\\" if true. 2. Continuously divide the integer by 16, recording the remainders. 3. Map each remainder (0-15) to its corresponding hexadecimal character (\'0\'-\'9\', \'a\'-\'f\'). 4. Construct the final hexadecimal string by concatenating the mapped characters in reverse order of production. Function Signature: ```python def toHexadecimal(num: int) -> str: pass ``` Example: ```python assert toHexadecimal(26) == \\"1a\\" assert toHexadecimal(255) == \\"ff\\" assert toHexadecimal(0) == \\"0\\" ```","solution":"def toHexadecimal(num: int) -> str: Converts a given non-negative integer to its hexadecimal representation as a string. if num == 0: return \\"0\\" hex_chars = \\"0123456789abcdef\\" result = [] while num > 0: remainder = num % 16 result.append(hex_chars[remainder]) num //= 16 result.reverse() return \'\'.join(result)"},{"question":"You need to develop a feature for a company’s customer service chatbot that determines the sentiment of a given message. The function should classify the sentiment of a text message as either \\"positive\\", \\"negative\\", or \\"neutral\\" based on predefined keyword lists for each sentiment category. Function Signature: ```python def classify_sentiment(message, positive_keywords, negative_keywords, neutral_keywords): ``` Parameters: - `message`: A string representing the text message to classify. - `positive_keywords`: A list of strings containing keywords indicative of positive sentiment. - `negative_keywords`: A list of strings containing keywords indicative of negative sentiment. - `neutral_keywords`: A list of strings containing keywords indicative of neutral sentiment. Returns: - A string that is either \\"positive\\", \\"negative\\", or \\"neutral\\", representing the classified sentiment of the message. Requirements: 1. The function should convert the message to lowercase to ensure case-insensitive matching. 2. Tokenize the message and count occurrences of positive, negative, and neutral keywords. 3. The sentiment of the message should be determined by the category with the highest count of matching keywords. 4. In case of a tie, the function should return \\"neutral\\". 5. If no keywords from any category are found, return \\"neutral\\". Example Usage: ```python positive_keywords = [\\"good\\", \\"great\\", \\"excellent\\", \\"awesome\\", \\"fantastic\\"] negative_keywords = [\\"bad\\", \\"terrible\\", \\"horrible\\", \\"awful\\", \\"poor\\"] neutral_keywords = [\\"okay\\", \\"fine\\", \\"average\\", \\"normal\\", \\"standard\\"] message_1 = \\"The service was excellent and the staff were awesome!\\" message_2 = \\"The product quality is terrible and the customer service is poor.\\" message_3 = \\"The experience was okay, nothing special.\\" print(classify_sentiment(message_1, positive_keywords, negative_keywords, neutral_keywords)) # Expected output: \\"positive\\" print(classify_sentiment(message_2, positive_keywords, negative_keywords, neutral_keywords)) # Expected output: \\"negative\\" print(classify_sentiment(message_3, positive_keywords, negative_keywords, neutral_keywords)) # Expected output: \\"neutral\\" ``` Here, the function evaluates each message, counts the number of positive, negative, and neutral keywords, and classifies the sentiment based on these counts, with ties defaulting to neutral.","solution":"def classify_sentiment(message, positive_keywords, negative_keywords, neutral_keywords): Classifies the sentiment of a message as either \\"positive\\", \\"negative\\", or \\"neutral\\". # Convert message to lowercase and tokenize it words = message.lower().split() # Initialize counters positive_count = 0 negative_count = 0 neutral_count = 0 # Count occurrences of positive, negative, and neutral keywords for word in words: if word in positive_keywords: positive_count += 1 elif word in negative_keywords: negative_count += 1 elif word in neutral_keywords: neutral_count += 1 # Determine sentiment based on the highest count if positive_count > negative_count and positive_count > neutral_count: return \\"positive\\" elif negative_count > positive_count and negative_count > neutral_count: return \\"negative\\" elif neutral_count > positive_count and neutral_count > negative_count: return \\"neutral\\" else: return \\"neutral\\""},{"question":"CSV Data Summarizer Your task is to implement a Python function named `process_csv`, which processes a provided CSV string and returns the sum and average of the values in a specified column. The function should take two arguments: 1. A `csv_string` containing CSV-formatted data with optional header row. 2. A `column_name` specifying the column to be processed. The CSV string will have records separated by newlines, and fields within each record separated by commas. The function should: 1. Identify and process the column specified by `column_name`. 2. Compute the sum and average of the values in the specified column. 3. Return a tuple containing the sum and average. **Function signature:** ```python def process_csv(csv_string: str, column_name: str) -> tuple: # your code here ``` **Example usage:** ```python csv_data = \\"name,age,salarynJohn,25,50000nJane,30,60000nDoe,22,45000\\" result = process_csv(csv_data, \\"salary\\") print(result) ``` _expected output:_ ``` (155000, 51666.666666666664) ``` # Requirements: 1. Assume that the column specified by `column_name` contains numerical values only. 2. Handle cases where the CSV string might not have a header row. 3. If `column_name` is not found or the column contains non-numerical values, handle the exception gracefully and return `(None, None)`. 4. Ensure proper handling of blank lines or irrelevant data. # Hint: - You may use the `csv` module for easy parsing of the CSV data. - Be mindful of potential data cleansing required before processing, such as trimming whitespace.","solution":"import csv import io def process_csv(csv_string: str, column_name: str) -> tuple: try: # Convert the CSV string to a file-like object csv_file = io.StringIO(csv_string.strip()) reader = csv.DictReader(csv_file) # Check if the requested column exists in the header if column_name not in reader.fieldnames: return (None, None) total = 0 count = 0 for row in reader: # Convert the column value to a float value = row[column_name].strip() if value: total += float(value) count += 1 if count == 0: return (None, None) # Calculate average average = total / count return (total, average) except (ValueError, KeyError, TypeError): return (None, None)"},{"question":"Generate a dataset consisting of multiple time series and visualize the data using a line plot. The function should take the number of time series, the length of each series, and the ranges for the random data generation as inputs. Each time series should be generated independently and displayed on the same plot with a unique color for distinction. The function should output: Figure: The matplotlib figure containing the line plot. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt import random def generate_and_plot_time_series(num_series, series_length, data_range, seed=None): ```","solution":"import numpy as np import matplotlib.pyplot as plt import random def generate_and_plot_time_series(num_series, series_length, data_range, seed=None): Generates multiple time series data and plots them using a line plot. Parameters: num_series (int): Number of time series to generate and plot. series_length (int): Length of each time series. data_range (tuple): A tuple containing the (min, max) range for the random data generation. seed (int, optional): Random seed for reproducibility. Defaults to None. Returns: Figure: The matplotlib figure containing the line plot. if seed is not None: np.random.seed(seed) plt.figure(figsize=(10, 6)) for i in range(num_series): time_series = np.random.uniform(data_range[0], data_range[1], series_length) plt.plot(time_series, label=f\'Series {i+1}\') plt.title(\'Generated Time Series Data\') plt.xlabel(\'Time\') plt.ylabel(\'Value\') plt.legend() plt.grid(True) plt.tight_layout() return plt.gcf()"},{"question":"**Objective**: Implement a Python function named `rotate_matrix_90(matrix)`, which accepts a 2D list (matrix) and rotates it 90 degrees clockwise. The function should return the rotated matrix. **Inputs** - `matrix`: A 2D list of integers representing the matrix. Assume the square matrix of size NxN, where 1 ≤ N ≤ 100. **Outputs** - A 2D list of integers representing the rotated matrix. **Example** ``` Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: rotate_matrix_90(matrix) -> [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ```","solution":"def rotate_matrix_90(matrix): Rotates a given NxN matrix 90 degrees clockwise. Args: matrix (list of list of int): The input 2D list representing the matrix. Returns: list of list of int: The rotated matrix. N = len(matrix) rotated_matrix = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N-1-i] = matrix[i][j] return rotated_matrix"},{"question":"Write a Python function `count_unique_words(file_path: str) -> int` that reads a text file and returns the number of unique words it contains. The function should ignore case sensitivity and consider only alphabetic characters as valid parts of a word. Additionally, any punctuation or numbers should be ignored. The function should: 1. Open the input text file in \'r\' (read) mode with UTF-8 encoding. 2. Read the content of the file. 3. Split the content into words, considering only alphabetic characters. 4. Convert all words to lowercase to ensure case insensitivity. 5. Create a set of unique words. 6. Return the number of unique words in the text file. Here\'s an example of how you might structure the call to the function: ```python num_unique_words = count_unique_words(\'sample.txt\') print(num_unique_words) ``` **Constraints:** - Assume the input text file has valid text content. - Use the built-in `open` function to handle file operations.","solution":"import re def count_unique_words(file_path: str) -> int: Reads a text file and returns the number of unique words it contains. Only alphabetic characters are considered part of words. The function is case insensitive. Parameters: file_path (str): The path to the text file. Returns: int: The number of unique words in the file. with open(file_path, \'r\', encoding=\'utf-8\') as file: content = file.read() # Use regex to find all words (considering only alphabetic characters) words = re.findall(r\'b[a-zA-Z]+b\', content) # Convert all words to lowercase to ensure case insensitivity words = [word.lower() for word in words] # Create a set to store unique words unique_words = set(words) return len(unique_words)"},{"question":"You are required to write a function named `normalize_colors` that adjusts the brightness of a list of RGB color values. The function takes an array of RGB values and a brightness factor, then scales the RGB values based on this factor. **Function Signature:** ```python def normalize_colors(colors: np.ndarray, factor: float) -> np.ndarray: ``` **Parameters:** - `colors` (np.ndarray): A 2D array of RGB values. Each row represents a color in the format `[R, G, B]`, where `R`, `G`, and `B` are integers in the range 0-255. - `factor` (float): The factor by which to adjust the brightness. A factor greater than 1 increases brightness, while a factor less than 1 decreases brightness. **Returns:** - `normalized_colors` (np.ndarray): A 2D array of adjusted RGB values. Each value must be clamped to the range 0-255. **Instructions:** 1. Use the `numpy` library to manipulate the arrays. 2. Multiply each RGB value by the `factor`. 3. Clamp the multiplied values to the range 0-255. This can be done using numpy\'s `clip` function. 4. Ensure the function is efficient and leverages numpy operations for performance. **Example:** ```python import numpy as np colors = np.array([ [100, 150, 200], [50, 75, 100], [0, 0, 0], [255, 255, 255] ]) factor = 1.2 result = normalize_colors(colors, factor) print(result) # Expected output: # [[120 180 240] # [ 60 90 120] # [ 0 0 0] # [255 255 255]] ```","solution":"import numpy as np def normalize_colors(colors: np.ndarray, factor: float) -> np.ndarray: Adjust the brightness of an array of RGB color values. Parameters: colors (np.ndarray): A 2D array of RGB values. factor (float): The factor by which to adjust the brightness. Returns: np.ndarray: A 2D array of adjusted RGB values. # Apply the brightness factor to each RGB value normalized_colors = colors * factor # Clamp the values to the range 0-255 normalized_colors = np.clip(normalized_colors, 0, 255) # Convert the values to integers normalized_colors = normalized_colors.astype(int) return normalized_colors"},{"question":"Given a matrix that contains numbers representing the current state of a game\'s playfield, you need to implement a function that determines the positions where new elements can be added to the playfield. The task is to identify the coordinates of all empty spaces (represented by zeros) in the matrix. The function should adhere to the following requirements: 1. **Function Name:** `findEmptySpaces` 2. **Parameters:** - `matrix`: A 2D integer NumPy array representing the playfield, where empty spaces are represented by zeros. 3. **Returns:** A list of tuples, where each tuple contains the coordinates `(row, col)` of an empty space in the matrix. For instance, given the following `matrix`: ``` matrix = np.array([ [1, 0, 2], [0, 1, 2], [1, 2, 0] ]) ``` Calling `findEmptySpaces(matrix)` should return `[(0, 1), (1, 0), (2, 2)]`. Here is a sample function signature: ```python import numpy as np def findEmptySpaces(matrix): pass ``` # Requirements: - Utilize NumPy operations to efficiently find the coordinates of empty spaces. - Ensure the function handles matrices of varying shapes and sizes, as long as they are 2D arrays.","solution":"import numpy as np def findEmptySpaces(matrix): Returns the coordinates of empty spaces (represented by zeros) in the matrix. empty_coords = list(zip(*np.where(matrix == 0))) return empty_coords"},{"question":"Create a function `custom_sort_by_length_and_value` that takes a list of strings and returns a sorted list based on two criteria: 1. First, by their lengths in ascending order. 2. Second, by their values in lexicographical order if two strings have the same length. You should write the function signature as: ```python def custom_sort_by_length_and_value(strings): ... ``` The function should utilize Python\'s built-in sorting capabilities, particularly using the `sorted` function and providing a custom sorting key. # Example ```python strings = [\\"apple\\", \\"pie\\", \\"banana\\", \\"pie\\", \\"app\\", \\"orange\\", \\"apply\\"] print(custom_sort_by_length_and_value(strings)) ``` # Output ``` [\'app\', \'pie\', \'pie\', \'apple\', \'apply\', \'banana\', \'orange\'] ``` # Note - Strings of the same length should be ordered lexicographically. - Assume the input list will only contain non-empty strings.","solution":"def custom_sort_by_length_and_value(strings): Sorts a list of strings by their lengths in ascending order, and by their lexicographical order if two strings have the same length. return sorted(strings, key=lambda x: (len(x), x))"},{"question":"You are tasked with building a simplified version of a recommendation engine. Given a list of users, a list of items, and their corresponding ratings, you need to implement a function `find_top_items()` that identifies and returns the top `N` items with the highest average rating. The function should accept three parameters: a list of users, a list of items, and a list of ratings (each index in these lists corresponds to a single rating given by a user to an item). The lists are guaranteed to be of the same length. The output should be a list of tuples containing the item and its average rating, sorted in descending order of the average rating. If two items have the same average rating, they should be sorted lexicographically. # Libraries to Use: 1. **pandas:** Use this library to create and manage data frames if necessary. # Function Signature: ```python def find_top_items(users: List[str], items: List[str], ratings: List[float], N: int) -> List[Tuple[str, float]]: ``` # Requirements: 1. Load the provided lists into a convenient data structure using **pandas** or **collections**. 2. Calculate the average rating for each item. 3. Sort the items by their average rating in descending order. 4. If the average ratings are equal between items, sort these items lexicographically. 5. Return the top `N` items as a list of tuples where each tuple contains an item and its average rating. # Assumptions: - The lengths of the input lists for users, items, and ratings are the same. - Each item can have multiple ratings given by different users. - The parameter `N` is always a positive integer and not greater than the number of unique items. - Import necessary libraries like pandas and typing (for typing hints). # Example: Input: ```python users = [\\"Alice\\", \\"Bob\\", \\"Alice\\", \\"Charlie\\", \\"Charlie\\", \\"Bob\\"] items = [\\"Item1\\", \\"Item2\\", \\"Item2\\", \\"Item1\\", \\"Item3\\", \\"Item3\\"] ratings = [4.0, 5.0, 3.0, 2.0, 5.0, 4.0] N = 2 ``` Output: ```python [(\'Item3\', 4.5), (\'Item2\', 4.0)] ```","solution":"from typing import List, Tuple import pandas as pd def find_top_items(users: List[str], items: List[str], ratings: List[float], N: int) -> List[Tuple[str, float]]: Identifies and returns the top N items with the highest average rating. Parameters: - users : List[str] : List of users who rated the items - items : List[str] : List of item names - ratings : List[float] : Corresponding list of ratings - N : int : Number of top items to return Returns: - List[Tuple[str, float]] : List of tuples containing the item and its average rating sorted accordingly # Create a DataFrame df = pd.DataFrame({\'item\': items, \'rating\': ratings}) # Group by item and calculate the mean rating mean_ratings = df.groupby(\'item\')[\'rating\'].mean().reset_index() # Sort by the average rating (descending) and item name (lexicographically) sorted_ratings = mean_ratings.sort_values(by=[\'rating\', \'item\'], ascending=[False, True]) # Get the top N items top_items = sorted_ratings.head(N) # Convert the result to list of tuples result = list(top_items.itertuples(index=False, name=None)) return result"},{"question":"You need to write a Python function that simulates a simplified stock trading algorithm. This function will help you understand basic algorithmic trading strategies and Python\'s capabilities for handling financial data. The function you need to create is called `simple_moving_average_trading`. This function will implement a basic trading strategy based on the Simple Moving Average (SMA) of stock prices. Here are the specifications for the `simple_moving_average_trading` function: 1. The function should accept a pandas DataFrame `df` as a parameter. The DataFrame will contain historical stock prices with the following columns: - `Date` - `Close` 2. The function should also accept two integer parameters: - `short_window`: The window size for the short moving average. - `long_window`: The window size for the long moving average. 3. The function should compute the short and long moving averages of the closing prices using the specified window sizes. 4. The DataFrame should be modified to include three new columns: - `Short_MA`: The short moving average of the closing prices. - `Long_MA`: The long moving average of the closing prices. - `Signal`: A signal indicating buying or selling actions: - 1 if the short moving average crosses above the long moving average (buy signal). - 0 if the short moving average is below the long moving average (no signal). - -1 if the short moving average crosses below the long moving average (sell signal). The function signature is as follows: ```python def simple_moving_average_trading(df, short_window, long_window): Implements a simple moving average trading strategy and returns the modified DataFrame. Parameters: df (pd.DataFrame): A DataFrame containing historical stock prices with \'Date\' and \'Close\' columns. short_window (int): The window size for the short moving average. long_window (int): The window size for the long moving average. Returns: pd.DataFrame: The DataFrame with additional \'Short_MA\', \'Long_MA\', and \'Signal\' columns. pass ``` Example usage: ```python import pandas as pd # Sample DataFrame data = { \'Date\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-04\', \'2023-01-05\', \'2023-01-06\', \'2023-01-07\', \'2023-01-08\', \'2023-01-09\', \'2023-01-10\'], \'Close\': [100, 102, 101, 105, 107, 110, 108, 109, 112, 115] } df = pd.DataFrame(data) # Parameters short_window = 3 long_window = 5 # Apply the trading strategy result_df = simple_moving_average_trading(df, short_window, long_window) print(result_df) ``` Requirements: - Use the `pandas` library to compute moving averages and handle the DataFrame. - Correctly generate \'Signal\' columns based on crossover points of moving averages. - Handle input validation and edge cases (e.g., window sizes larger than the DataFrame).","solution":"import pandas as pd def simple_moving_average_trading(df, short_window, long_window): Implements a simple moving average trading strategy and returns the modified DataFrame. Parameters: df (pd.DataFrame): A DataFrame containing historical stock prices with \'Date\' and \'Close\' columns. short_window (int): The window size for the short moving average. long_window (int): The window size for the long moving average. Returns: pd.DataFrame: The DataFrame with additional \'Short_MA\', \'Long_MA\', and \'Signal\' columns. # Validate input: if \'Close\' not in df.columns: raise ValueError(\\"The DataFrame must contain a \'Close\' column.\\") if short_window <= 0 or long_window <= 0: raise ValueError(\\"Window sizes must be positive integers.\\") if len(df) < max(short_window, long_window): raise ValueError(\\"The DataFrame must contain more rows than the largest window size.\\") # Compute short and long moving averages df[\'Short_MA\'] = df[\'Close\'].rolling(window=short_window, min_periods=1).mean() df[\'Long_MA\'] = df[\'Close\'].rolling(window=long_window, min_periods=1).mean() # Generate trading signals df[\'Signal\'] = 0 df.loc[df[\'Short_MA\'] > df[\'Long_MA\'], \'Signal\'] = 1 df.loc[df[\'Short_MA\'] < df[\'Long_MA\'], \'Signal\'] = -1 return df"},{"question":"You are asked to implement a function `rotate_matrix` that takes a 2-dimensional list `matrix` representing a square matrix (same number of rows and columns) and rotates the matrix 90 degrees clockwise. The rotation should be done in place, meaning that no new matrix should be created. The function should modify the input matrix directly. Function Signature ```python def rotate_matrix(matrix: list[list[int]]) -> None: Rotates the input matrix 90 degrees clockwise in place. Parameters: matrix (list[list[int]]): A 2D list representation of the square matrix. Returns: None ``` Requirements: 1. The input matrix is guaranteed to be non-empty and square (n x n). 2. You should not use any additional data structures (like another list) to achieve the rotation. 3. The function should modify the original matrix directly without returning anything. Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) # After rotation, the matrix should be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` Explanation: - The first row of the original matrix `[1, 2, 3]` becomes the last column of the rotated matrix. - The second row `[4, 5, 6]` becomes the second column, and the third row `[7, 8, 9]` becomes the first column.","solution":"def rotate_matrix(matrix: list[list[int]]) -> None: Rotates the input matrix 90 degrees clockwise in place. Parameters: matrix (list[list[int]]): A 2D list representation of the square matrix. Returns: None n = len(matrix) # Step 1: Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Write a function that finds the longest common substring between two given strings. The function should return both the length of this substring and the substring itself. If there are multiple substrings of the same maximum length, return any one of them. You should write self-contained code starting with: ``` def longest_common_substring(s1, s2): ``` Example: ``` s1 = \\"abcdef\\" s2 = \\"zabcf\\" ``` Output: ``` (3, \\"abc\\") ``` If the strings do not share any common substrings, the function should return `(0, \\"\\")`.","solution":"def longest_common_substring(s1, s2): Finds the longest common substring between two strings. Returns both the length of this substring and the substring itself. if not s1 or not s2: return (0, \\"\\") m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] max_len = 0 end_pos = 0 for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > max_len: max_len = dp[i][j] end_pos = i longest_substring = s1[end_pos - max_len: end_pos] return (max_len, longest_substring)"},{"question":"In the world of fantasy, there exists a magical forest divided into a grid of cells. Each cell in the grid can either contain a tree, clear ground, or a series of obstacles. An adventurer starts at the top-left corner of the grid and wants to reach the bottom-right corner. The adventurer can only move right or down one cell at a time, and they avoid obstacles. Your task is to write a function `count_paths(grid)` that calculates the number of distinct paths the adventurer can take to reach the bottom-right corner of the grid from the top-left corner. Rules: 1. The adventurer can move only right (`R`) or down (`D`) to traverse through the grid. 2. A cell containing an obstacle (`1`) cannot be traversed, while a cell containing clear ground (`0`) can be traversed. **Constraints:** - The `grid` is represented as a list of lists with integers `0` or `1`. - The dimensions of the grid are at most 100x100. Implement the function `count_paths(grid)` that returns the number of distinct paths from the top-left to the bottom-right of the grid. If there is no such path, return `0`. **Function Signature:** ```python def count_paths(grid: List[List[int]]) -> int: # Your implementation here ``` **Example:** ```python assert count_paths([ [0, 0, 0], [0, 1, 0], [0, 0, 0] ]) == 2 # There are two distinct paths: Right-Right-Down-Down and Down-Down-Right-Right assert count_paths([ [0, 1], [1, 0] ]) == 0 # There is no path to reach the bottom-right corner ```","solution":"from typing import List def count_paths(grid: List[List[int]]) -> int: # If the start or end cell is an obstacle, no paths are possible if grid[0][0] == 1 or grid[-1][-1] == 1: return 0 rows, cols = len(grid), len(grid[0]) dp = [[0] * cols for _ in range(rows)] # Initialize the starting point dp[0][0] = 1 # Fill the dp table for r in range(rows): for c in range(cols): if grid[r][c] == 1: dp[r][c] = 0 # No path through an obstacle else: if r > 0: dp[r][c] += dp[r - 1][c] if c > 0: dp[r][c] += dp[r][c - 1] return dp[rows - 1][cols - 1]"},{"question":"You are required to write a Python function called `categorize_files_by_extension` that sorts files into directories based on their file extensions. The function should examine every file in a specified directory and move each file into a subdirectory named after its file extension (e.g., all `.txt` files should be moved to a `txt` directory, all `.jpg` files to a `jpg` directory, and so on). If a subdirectory for an extension does not exist, the function should create it. **Function Signature:** ```python def categorize_files_by_extension(directory: str) -> None: ``` **Inputs:** - `directory`: The path to the directory that contains the files to be categorized. **Outputs:** - The function will move the files without returning anything. **Example:** If the directory contains the following files: ``` report.docx photo.jpg notes.txt code.py example.txt picture.png ``` After calling the function: ``` ./docx/report.docx ./jpg/photo.jpg ./txt/notes.txt ./py/code.py ./txt/example.txt ./png/picture.png ``` **Library Requirements:** - Use `os.listdir` to list the files in the specified directory. - Use `os.makedirs` to create directories if they do not exist. - Use `shutil.move` to move files into the appropriate directories.","solution":"import os import shutil def categorize_files_by_extension(directory: str) -> None: Moves files in the specified directory into subdirectories based on their file extensions. if not os.path.isdir(directory): raise ValueError(f\\"The directory {directory} does not exist or is not a directory.\\") for filename in os.listdir(directory): file_path = os.path.join(directory, filename) if os.path.isfile(file_path): file_extension = filename.split(\'.\')[-1] extension_dir = os.path.join(directory, file_extension) if not os.path.exists(extension_dir): os.makedirs(extension_dir) shutil.move(file_path, os.path.join(extension_dir, filename))"},{"question":"You are assigned to write a function, `generate_fibonacci_sequence(n)`, that generates the first `n` numbers in the Fibonacci sequence. The function should take one argument: 1. `n`: An integer that specifies the number of terms to generate in the Fibonacci sequence. The Fibonacci sequence is characterized by the fact that every number after the first two is the sum of the two preceding ones. The sequence typically starts with 0 and 1, so the first few terms of the Fibonacci sequence are: 0, 1, 1, 2, 3, 5, 8, .... Your function should: 1. Return a list containing the first `n` Fibonacci numbers. 2. The list should start with 0, followed by 1. Here is the function signature: ```python def generate_fibonacci_sequence(n): # Your code here ```","solution":"def generate_fibonacci_sequence(n): Generates the first `n` numbers in the Fibonacci sequence. Args: n (int): Number of terms to generate in the Fibonacci sequence. Returns: list: A list containing the first `n` Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_term = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_term) return fib_sequence"},{"question":"Write a function that takes a pandas DataFrame and a specified list of categorical columns. The function should encode these categorical columns into binary columns using one-hot encoding, while ensuring that any original columns not in the specified list are left unchanged. Additionally, a specified column named \'Special_Column\' should be moved to the first position in the DataFrame, if it exists. If the specified DataFrame is empty, return the DataFrame unchanged. The function should output with: DataFrame: The modified pandas DataFrame with one-hot encoded columns and \'Special_Column\' (if exists) moved to the first position. You should write self-contained code starting with: ``` import pandas as pd def task_func(df, categorical_columns=[]): ```","solution":"import pandas as pd def task_func(df, categorical_columns=[]): Encodes the specified categorical columns into binary columns using one-hot encoding. If \'Special_Column\' exists, it is moved to the first position. Parameters: df (pd.DataFrame): The input DataFrame. categorical_columns (list): List of categorical columns to be one-hot encoded. Returns: pd.DataFrame: The modified DataFrame with one-hot encoded columns and \'Special_Column\' moved. if df.empty: return df # One-hot encode the specified categorical columns df = pd.get_dummies(df, columns=categorical_columns) # If \'Special_Column\' exists, move it to the first position if \'Special_Column\' in df.columns: cols = list(df.columns) cols.insert(0, cols.pop(cols.index(\'Special_Column\'))) df = df[cols] return df"},{"question":"You are tasked with creating a program that reads from a file and processes its content. Write a function called `sum_of_integers_in_file` that: 1. Opens and reads a text file named `numbers.txt` which contains one integer per line. 2. Sums up all the integers from the file. 3. Returns the total sum. **Requirements:** - Use the `open` function to read the file. - Ensure your function handles any potential I/O errors gracefully. Please ensure your function adheres to these requirements and uses the standard file operation APIs provided by Python. **Function Signature:** ```python def sum_of_integers_in_file() -> int: pass ```","solution":"def sum_of_integers_in_file() -> int: Reads a file named \'numbers.txt\' containing one integer per line, sums up all the integers, and returns the total sum. total_sum = 0 try: with open(\'numbers.txt\', \'r\') as file: for line in file: line = line.strip() if line: total_sum += int(line) except FileNotFoundError: print(\\"The file \'numbers.txt\' was not found.\\") except ValueError as ve: print(f\\"ValueError encountered: {ve}\\") except Exception as e: print(f\\"An error occurred: {e}\\") return total_sum"},{"question":"You are tasked with implementing a function that calculates the Root Mean Squared Error (RMSE) between two sets of predicted and actual values. RMSE is frequently used to measure the deviation of predictions from the true values. The formula for RMSE is: [ text{RMSE} = sqrt{frac{1}{n} sum_{i=1}^{n} (y_{text{pred},i} - y_{text{true},i})^2} ] Where: - ( y_{text{pred}} ) is the set of predicted values. - ( y_{text{true}} ) is the set of true values. - ( n ) is the number of values. Write a function `calculate_rmse(y_true, y_pred)` to compute the RMSE between the provided sets of true and predicted values. # Function Signature ```python import numpy as np def calculate_rmse(y_true, y_pred): # Your code here ``` # Input - `y_true` (ndarray): A 1D numpy array of true values. It has shape (n,). - `y_pred` (ndarray): A 1D numpy array of predicted values. It has shape (n,). # Output - `rmse` (float): The calculated RMSE value. # Example ```python import numpy as np y_true = np.array([3.0, -0.5, 2.0, 7.0]) y_pred = np.array([2.5, 0.0, 2.0, 8.0]) rmse = calculate_rmse(y_true, y_pred) print(rmse) # Should print the computed RMSE value ``` # Instructions 1. Subtract the predicted values from the true values. 2. Square the differences. 3. Compute the mean of the squared differences. 4. Calculate the square root of the mean. 5. Return the RMSE value as a float.","solution":"import numpy as np def calculate_rmse(y_true, y_pred): Calculates the Root Mean Squared Error (RMSE) between true and predicted values. Parameters: y_true (ndarray): A 1D numpy array of true values. y_pred (ndarray): A 1D numpy array of predicted values. Returns: float: The calculated RMSE value. # Compute the squared differences squared_diffs = (y_true - y_pred) ** 2 # Compute the mean of the squared differences mean_squared_diff = np.mean(squared_diffs) # Compute the square root of the mean squared difference rmse = np.sqrt(mean_squared_diff) return rmse"},{"question":"You are required to implement a function that generates a list of prime numbers up to a given limit. This exercise will reinforce understanding of prime number concepts and efficient algorithms for generating primes, such as the Sieve of Eratosthenes. The function, named `generate_primes`, should follow these specifications: 1. **Input Parameter**: It will take a single integer `n` which represents the upper limit (inclusive) up to which prime numbers should be generated. 2. **Output**: The function should return a list of prime numbers up to and including `n`. 3. **Algorithm Choice**: Implement the Sieve of Eratosthenes to generate the list of primes efficiently. 4. **Edge Cases**: Handle edge cases where `n` is less than 2 appropriately by returning an empty list since there are no prime numbers less than 2. Example: ```python generate_primes(10) # returns [2, 3, 5, 7] generate_primes(20) # returns [2, 3, 5, 7, 11, 13, 17, 19] generate_primes(1) # returns [] ``` The function `generate_primes` should encapsulate all the specified behavior and ensure optimal performance for large values of `n`.","solution":"def generate_primes(n): Returns a list of prime numbers up to and including n using the Sieve of Eratosthenes. if n < 2: return [] # Initialize a boolean array indicating primality for each number up to n is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers # Sieve of Eratosthenes algorithm p = 2 while (p * p <= n): if (is_prime[p] == True): # Updating all multiples of p to false for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 # Collecting all prime numbers prime_numbers = [p for p in range(n + 1) if is_prime[p]] return prime_numbers"},{"question":"You are tasked with creating a function that simulates the configuration and operation of a basic vending machine. This vending machine will stock a fixed number of items and allow users to make purchases based on item availability and the user\'s input. The goal is to demonstrate understanding of object-oriented programming by modeling the vending machine and handling basic operations like stocking items, checking item availability, and processing purchases. **Function Name:** `VendingMachine` **Function Role:** The class `VendingMachine` will encapsulate the properties and behavior of a vending machine. This class should include the following functionality: - An initializer method `__init__()` that accepts a dictionary with item names as keys and their quantities as values. - A method `stock_item()` that takes an item name and quantity to add to the stock. - A method `check_availability()` that accepts an item name and returns `True` if the item is in stock and `False` otherwise. - A method `purchase_item()` that accepts an item name and decreases the quantity if available. It should return a string indicating purchase confirmation or stock unavailability. # Example Usage: ```python # Initialize the vending machine with some items vm = VendingMachine({\'chips\': 10, \'soda\': 5, \'chocolate\': 8}) # Stock new items vm.stock_item(\'gum\', 20) # Check availability of an item print(vm.check_availability(\'chips\')) # Output: True # Purchase an item print(vm.purchase_item(\'soda\')) # Output: \\"You have purchased a soda.\\" # Try to purchase an item that is out of stock print(vm.purchase_item(\'water\')) # Output: \\"water is out of stock.\\" ``` **Notes:** Demonstrate understanding of basic class creation, instance methods, and object state management in Python. The implementation should handle edge cases such as trying to purchase items not in stock or trying to stock negative quantities gracefully without causing errors.","solution":"class VendingMachine: def __init__(self, items): Initializes the VendingMachine with a dictionary of items. items: dict Dictionary where keys are item names and values are the quantities. self.items = items def stock_item(self, item_name, quantity): Stocks a given item with the specified quantity. item_name: str The name of the item to stock. quantity: int The quantity of the item to add to the stock. if quantity < 0: raise ValueError(\\"Cannot stock a negative quantity\\") if item_name in self.items: self.items[item_name] += quantity else: self.items[item_name] = quantity def check_availability(self, item_name): Checks if an item is available in the vending machine. item_name: str The name of the item to check. Returns: bool True if the item is available, False otherwise. return self.items.get(item_name, 0) > 0 def purchase_item(self, item_name): Processes the purchase of an item. item_name: str The name of the item to purchase. Returns: str Purchase confirmation message or an out-of-stock message. if self.check_availability(item_name): self.items[item_name] -= 1 return f\\"You have purchased a {item_name}.\\" else: return f\\"{item_name} is out of stock.\\""},{"question":"You are tasked with creating a Python function that processes user input and utilizes different list operations to manipulate a list of integers. Your goal is to implement a function called `list_operations`. # Instructions: 1. **Function Definition:** - Name: `list_operations` - Parameters: None (it should use input to read necessary values). - Behavior: The function should prompt the user to enter a choice (`ch`) from the console. Based on the input, it will execute one of the three behaviors as described below. 2. **Choices:** - `ch == 1`: 1. Read a list of integers `lst` from input (comma-separated). 2. Calculate the square of each integer in the list. 3. Print the resulting list of squares. - `ch == 2`: 1. Read a list of integers `lst` from input (comma-separated). 2. Calculate the cumulative sum of the list (where each element at index `i` is the sum of the elements from the start to `i`). 3. Print the list of cumulative sums. - `ch == 3`: Terminate the function and exit. 3. **Assumptions:** - Input lists are provided in a comma-separated format without brackets. - The function should handle cases where the user may provide invalid input gracefully, prompting for re-entry if necessary. # Example Usage: ```python choice = 1 lst = 1,2,3,4 Execution steps: - lst = [1, 2, 3, 4] - squares = [1, 4, 9, 16] - Print squares choice = 2 lst = 1,2,3 Execution steps: - lst = [1, 2, 3] - cumulative sums = [1, 3, 6] - Print cumulative sums ``` Implement the function adhering strictly to the steps outlined above, ensuring appropriate list manipulations based on the user\'s choice.","solution":"def list_operations(): import sys input = sys.stdin.read data = input().split(\'n\') try: ch = int(data[0]) if ch == 1: lst = list(map(int, data[1].split(\',\'))) squares = [x ** 2 for x in lst] print(squares) elif ch == 2: lst = list(map(int, data[1].split(\',\'))) cumulative_sum = [] cumulative_total = 0 for number in lst: cumulative_total += number cumulative_sum.append(cumulative_total) print(cumulative_sum) elif ch == 3: return else: print(\\"Invalid choice. Please enter a valid choice (1, 2, or 3).\\") except ValueError: print(\\"Invalid input. Please enter integers only.\\")"},{"question":"You are tasked with writing a function `compare_sorting_algorithms(n, lower_bound, upper_bound)` that will compare the performance of two different sorting algorithms: Bubble Sort and Quick Sort. To generate random lists of integers, use the `randrange` method from the `random` module to generate random integers within a specified range `[lower_bound, upper_bound)` for each list. Each list should be of length `n`. For timing the execution of both algorithms, use the `time` function from the `time` module to measure the time taken by each algorithm for each list. Your task is to: 1. Generate `m` random lists of `n` integers each with `randrange`. 2. Sort each list using both the Bubble Sort algorithm and the Quick Sort algorithm. 3. Measure and compare the execution time of both algorithms for each list. 4. Print which algorithm is faster for each list and verify that both sorted results are correctly sorted and identical. Functions to implement: 1. `bubble_sort(lst)`: A simple approach to sort a list using the Bubble Sort algorithm. 2. `quick_sort(lst)`: An efficient approach to sort a list using the Quick Sort algorithm. 3. `compare_sorting_algorithms(m, n, lower_bound, upper_bound)`: The main function that orchestrates the comparison and prints the results. **Attributes:** - `m`: Number of lists to generate and compare. - `n`: Length of each list. - `lower_bound`: Lower bound (inclusive) for generating random integers. - `upper_bound`: Upper bound (exclusive) for generating random integers. **Function signature:** ```python def bubble_sort(lst): # Your code here def quick_sort(lst): # Your code here def compare_sorting_algorithms(m, n, lower_bound, upper_bound): # Implementation as described above ``` **Example Usage:** ```python compare_sorting_algorithms(5, 10, 1, 100) ``` **Expected Output:** The function should print statements indicating which sorting algorithm is faster for each list and verify that the sorted results are the same. If the results are not correctly sorted or if they differ, the comparison should stop, and it should print the discrepancy.","solution":"import random import time def bubble_sort(lst): Implement Bubble Sort algorithm to sort a list. n = len(lst) for i in range(n): for j in range(0, n-i-1): if lst[j] > lst[j+1]: lst[j], lst[j+1] = lst[j+1], lst[j] return lst def quick_sort(lst): Implement Quick Sort algorithm to sort a list. if len(lst) <= 1: return lst pivot = lst[len(lst) // 2] left = [x for x in lst if x < pivot] middle = [x for x in lst if x == pivot] right = [x for x in lst if x > pivot] return quick_sort(left) + middle + quick_sort(right) def compare_sorting_algorithms(m, n, lower_bound, upper_bound): Generate m random lists of n integers each and compare the performance of Bubble Sort and Quick Sort. for i in range(m): random_list = [random.randrange(lower_bound, upper_bound) for _ in range(n)] # Timing bubble sort start_time = time.time() sorted_bubble = bubble_sort(random_list.copy()) bubble_time = time.time() - start_time # Timing quick sort start_time = time.time() sorted_quick = quick_sort(random_list.copy()) quick_time = time.time() - start_time # Check if both sorted lists are identical assert sorted_bubble == sorted_quick, f\\"Sort mismatch on list {i+1}\\" # Check if the lists are sorted assert sorted_bubble == sorted(random_list.copy()), f\\"Bubble sort failed on list {i+1}\\" assert sorted_quick == sorted(random_list.copy()), f\\"Quick sort failed on list {i+1}\\" # Print which algorithm is faster for the current list if bubble_time < quick_time: print(f\\"List {i+1}: Bubble Sort is faster by {quick_time - bubble_time} seconds\\") else: print(f\\"List {i+1}: Quick Sort is faster by {bubble_time - quick_time} seconds\\")"},{"question":"You are required to write a Python function called `find_anagrams(words)`. This function should perform the following: 1. Accept a list of strings as input. 2. Group the strings that are anagrams of each other. 3. Return a list of lists, where each inner list contains strings that are anagrams of each other. **Instructions**: - The `words` parameter will be a list of strings. - Two strings are anagrams if they can be formed by rearranging the same set of characters. - The function must handle the case where no anagrams are found by returning an empty list. **Function Signature**: ```python def find_anagrams(words: list) -> list: pass ``` # Example: If the input list is `[\\"bat\\", \\"tab\\", \\"eat\\", \\"tea\\", \\"tan\\", \\"nat\\", \\"bat\\"]` Calling `find_anagrams([\\"bat\\", \\"tab\\", \\"eat\\", \\"tea\\", \\"tan\\", \\"nat\\", \\"bat\\"])` should return `[[\\"bat\\", \\"tab\\", \\"bat\\"], [\\"eat\\", \\"tea\\"], [\\"tan\\", \\"nat\\"]]`. The inner lists\' order and their content order do not matter, so `[[\'tab\', \'bat\', \'bat\'], [\'tea\', \'eat\'], [\'nat\', \'tan\']]` is also a valid output.","solution":"from collections import defaultdict def find_anagrams(words): Groups the strings that are anagrams of each other. :param words: List of strings. :return: List of lists, where each inner list contains strings that are anagrams of each other. anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"You are required to implement a function that finds the longest contiguous subsequence within a given list of integers where the difference between consecutive elements is the same. The function should return the length and the actual subsequence. Function Signature ```python def longest_contiguous_subsequence(nums): # Implementation goes here ``` Inputs - `nums`: A list of integers. Example: `[1, 2, 3, 5, 7, 8, 9, 10]` Outputs The function should return a tuple consisting of: 1. An integer representing the length of the longest contiguous subsequence where the difference between consecutive elements is the same. 2. A list of integers representing the longest contiguous subsequence. Example ```python nums = [1, 2, 3, 5, 7, 8, 9, 10] print(longest_contiguous_subsequence(nums)) ``` Expected output: ``` (4, [7, 8, 9, 10]) ``` Constraints - The length of the `nums` list will be at least 1. - Each element in the `nums` list will be an integer within the range of `-10^4` to `10^4`. Additional Requirement - The function should handle the input list in a single pass, if possible, with O(n) time complexity.","solution":"def longest_contiguous_subsequence(nums): if not nums or len(nums) == 1: return len(nums), nums max_length = 1 current_length = 1 max_subsequence = [nums[0]] current_subsequence = [nums[0]] for i in range(1, len(nums)): if i == 1 or nums[i] - nums[i-1] == nums[i-1] - nums[i-2]: current_length += 1 current_subsequence.append(nums[i]) else: if current_length > max_length: max_length = current_length max_subsequence = current_subsequence[:] current_length = 2 current_subsequence = [nums[i-1], nums[i]] if current_length > max_length: max_length = current_length max_subsequence = current_subsequence[:] return max_length, max_subsequence"},{"question":"You are required to write a function named `sort_custom_order` that takes a list of strings and a string representing a custom alphabet order as input and returns the list of strings sorted according to the custom order. The custom alphabet order will be a permutation of the English lowercase alphabet. To achieve this, you must utilize the `sorted` function provided by Python. Specifically, you are required to create a mapping of each character in the custom order to its rank and use this mapping to sort the list of strings. Here is the format for the custom alphabet order: - A string of 26 unique lowercase letters representing a permutation of the English alphabet (e.g., `\'zyxwvutsrqponmlkjihgfedcba\'`) Your function should process the list of strings and return them sorted according to this custom order. Example ```python input_list = [\\"apple\\", \\"banana\\", \\"cherry\\"] custom_order = \\"zyxwvutsrqponmlkjihgfedcba\\" output = sort_custom_order(input_list, custom_order) print(output) # Output: [\'cherry\', \'banana\', \'apple\'] ``` Requirements: - The `sorted` function must be used to sort the list. - The custom order must be utilized to determine the rank of each character.","solution":"def sort_custom_order(input_list, custom_order): Sorts a list of strings based on a custom alphabet order. Parameters: input_list (list of str) - List of strings to be sorted. custom_order (str) - A string representing custom alphabet order (permutation of lowercase English alphabet). Returns: list - Sorted list of strings according to the custom alphabet order. # Creating a mapping from each character in custom_order to its rank (0-25) char_rank = {char: rank for rank, char in enumerate(custom_order)} # Custom sorting key function def custom_sort_key(word): return [char_rank[char] for char in word] # Sorting input list using custom sort key function return sorted(input_list, key=custom_sort_key)"},{"question":"# Simulating Population Growth Using Logistic Model In this challenge, you are required to simulate population growth using the logistic growth model via the Euler integration method and validate the results against the analytical solution. You will need to utilize the `matplotlib` and `numpy` libraries to visualize the results. Constants and Parameters - Initial population (`P_init`): ( P_{text{init}} = 100 ) - Carrying capacity (`K`): 1000 - Growth rate (`r`): 0.1 - Step size for integration (`h`): 0.1 - Total time (`T`): 100 The logistic growth differential equation is given by: [ frac{dP}{dt} = r cdot P cdot left(1 - frac{P}{K}right) ] Tasks 1. **Define the `euler` function**: - This function will perform Euler integration. - **Function signature**: `def euler(init_value, derivative_func, step_size, total_time):` - **Parameters**: - `init_value`: initial value of the population `P` - `derivative_func`: function to compute the derivative - `step_size`: integration step size - `total_time`: total time duration for simulation - The function should return a tuple containing: - A numpy array of time points. - A numpy array of the integrated population values at each time step. 2. **Simulate the process in the `main` function**: - Integrate the population `P` using Euler method. - Plot the simulated population growth against the analytical solution on the same graph. - Use `legend` from `matplotlib.pyplot` to label the plots. Analytical Solution The analytical solution for the logistic growth model is given by: [ P(t) = frac{K}{1 + left(frac{K - P_{text{init}}}{P_{text{init}}}right) e^{-rt}} ] You need to define the analytical solution function `analytical_solution`: ```python def analytical_solution(t, P_init, K, r): return K / (1 + ((K - P_init) / P_init) * np.exp(-r * t)) ``` Example Usage An example of how the `main` function should work: ```python def population_derivative(P, r, K): return r * P * (1 - P / K) def main(): # Perform the required tasks pass ``` **Note**: Ensure you use the functions `numpy.exp`, `matplotlib.pyplot.legend`, and `numpy.linspace` in your solution. Libraries Required - `matplotlib.pyplot` - `numpy` **Goal**: Create the `euler` function and complete code in the `main` function to simulate population growth using the logistic model and compare it with the analytical solution.","solution":"import numpy as np import matplotlib.pyplot as plt def euler(init_value, derivative_func, step_size, total_time): Performs Euler integration. Parameters: - init_value: Initial value of the population P - derivative_func: Function to compute the derivative - step_size: Integration step size - total_time: Total time duration for simulation Returns: - A tuple containing: - A numpy array of time points. - A numpy array of the integrated population values at each time step. times = np.arange(0, total_time + step_size, step_size) values = np.zeros_like(times) values[0] = init_value for i in range(1, len(times)): values[i] = values[i-1] + step_size * derivative_func(values[i-1]) return times, values def population_derivative(P): r, K = 0.1, 1000 return r * P * (1 - P / K) def analytical_solution(t, P_init, K, r): return K / (1 + ((K - P_init) / P_init) * np.exp(-r * t)) def main(): P_init, K, r, h, T = 100, 1000, 0.1, 0.1, 100 # Simulate using Euler method times, simulated_population = euler(P_init, population_derivative, h, T) # Calculate analytical solution analytical_population = analytical_solution(times, P_init, K, r) # Plot results plt.plot(times, simulated_population, label=\'Simulated (Euler Method)\') plt.plot(times, analytical_population, label=\'Analytical Solution\', linestyle=\'--\') plt.xlabel(\'Time\') plt.ylabel(\'Population\') plt.legend() plt.title(\'Population Growth: Simulated vs Analytical\') plt.show() if __name__ == \\"__main__\\": main()"},{"question":"You are tasked with writing a Python function that processes transaction data to generate monthly reports for a retail store. The function should be named `generate_monthly_report`. The transaction data is stored in a Pandas DataFrame that includes the columns: \'transaction_id\', \'date\', \'amount\', and \'category\'. The function should take two parameters: 1. `df` (DataFrame): A Pandas DataFrame containing the transaction data. 2. `year` (int): The year for which the monthly report is to be generated. The function should return a structured summary as a dictionary where each key is a month (e.g., \'January\', \'February\', ...) and the corresponding value is another dictionary containing: - \'total_sales\' (float): The total sales amount for that month. - \'num_transactions\' (int): The number of transactions for that month. - \'categories\' (dict): A nested dictionary where each key is a transaction category and the value is the total sales amount in that category for the month. The key aspects to consider are: 1. Ensure the transactions are correctly allocated to the specified year. 2. Compute the sales and transaction counts per month. 3. Categorize the sales amount within each month. The report must be case-insensitive concerning month names and the result should return the months in chronological order. ```python import pandas as pd def generate_monthly_report(df, year): Generates a monthly sales report for a given year. Args: df (DataFrame): Pandas DataFrame containing the transaction data year (int): Year for which the report is to be generated Returns: report (dict): Monthly sales report structured as specified # Your implementation here pass ``` Additional details: 1. The \'date\' column in the DataFrame is of string format and should be converted to datetime. 2. Ensure the report is organized by months from January to December. 3. The output dictionary should have month names with the first letter capitalized (e.g., \'January\'). **Hints:** - Use `pd.to_datetime` to convert the \'date\' column to datetime format. - Filter the transactions for the specified year. - Use `groupby` to aggregate data by month and category.","solution":"import pandas as pd def generate_monthly_report(df, year): Generates a monthly sales report for a given year. Args: df (DataFrame): Pandas DataFrame containing the transaction data year (int): Year for which the report is to be generated Returns: report (dict): Monthly sales report structured as specified # Ensure the \'date\' column is in datetime format df[\'date\'] = pd.to_datetime(df[\'date\']) # Filter the transactions for the specified year df = df[df[\'date\'].dt.year == year] # Create a new column for month name df[\'month\'] = df[\'date\'].dt.strftime(\'%B\') # Initialize the report dictionary report = {month: {\'total_sales\': 0.0, \'num_transactions\': 0, \'categories\': {}} for month in [\'January\', \'February\', \'March\', \'April\', \'May\', \'June\', \'July\', \'August\', \'September\', \'October\', \'November\', \'December\']} # Group by month and aggregate sales and transaction counts month_groups = df.groupby(\'month\') for month, group in month_groups: if month in report: report[month][\'total_sales\'] = group[\'amount\'].sum() report[month][\'num_transactions\'] = group[\'transaction_id\'].count() # Group by category within the current month category_groups = group.groupby(\'category\')[\'amount\'].sum() report[month][\'categories\'] = category_groups.to_dict() return report"},{"question":"Write a function that parses a provided JSON file containing user details and extracts specific information to generate a summary report. The function takes a file path to the JSON file and validates the data structure. The JSON file consists of an array of user objects, each containing \'id\', \'name\', \'email\', \'age\', and \'membership_status\'. The function should generate a summary report containing: - The total number of users. - The average age of the users. - The most common membership status. - A list of email addresses of users older than 30. The summary report should be returned as a dictionary containing the specified information. You should write self-contained code starting with: ``` import json from collections import Counter def user_summary(file_path: str) -> dict: ```","solution":"import json from collections import Counter def user_summary(file_path: str) -> dict: Parses a JSON file to extract user details and generate a summary report. Args: file_path (str): The path to the JSON file. Returns: dict: A summary report containing: - total_users (int) - average_age (float) - most_common_membership_status (str) - emails_older_than_30 (list) with open(file_path, \'r\') as file: data = json.load(file) total_users = len(data) if total_users == 0: return { \\"total_users\\": 0, \\"average_age\\": 0.0, \\"most_common_membership_status\\": None, \\"emails_older_than_30\\": [] } ages = [user[\'age\'] for user in data] average_age = sum(ages) / total_users membership_statuses = [user[\'membership_status\'] for user in data] most_common_membership_status = Counter(membership_statuses).most_common(1)[0][0] emails_older_than_30 = [user[\'email\'] for user in data if user[\'age\'] > 30] return { \\"total_users\\": total_users, \\"average_age\\": average_age, \\"most_common_membership_status\\": most_common_membership_status, \\"emails_older_than_30\\": emails_older_than_30 }"},{"question":"In this problem, you are required to create a function named `task_scheduler` that schedules a list of tasks based on their dependencies using a topological sort algorithm. Specifically, the function will perform the following tasks: 1. **Input Parsing:** Parse the list of tasks and their dependencies into an adjacency list representation of the graph. 2. **Topological Sorting:** Perform topological sorting on the graph to determine the order of task execution. 3. **Detect Cycles (Optional):** If there is a cycle in the dependencies, return an appropriate error message. 4. **Result Storage:** Return the ordered list of tasks according to their dependencies. # Function Signature ```python def task_scheduler(tasks, dependencies): Schedule tasks based on dependencies using topological sorting. Parameters: - tasks: list of str, List of task identifiers - dependencies: list of tuple, List of dependencies where each tuple (a, b) indicates that task `a` must be completed before task `b` Returns: - list, Ordered list of tasks according to the topological sort - str, Error message if a cycle is detected in the dependencies ``` # Example Usage ```python # Example input data tasks = [\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\"] dependencies = [(\\"A\\", \\"B\\"), (\\"B\\", \\"C\\"), (\\"A\\", \\"D\\"), (\\"D\\", \\"E\\")] # Call the function order = task_scheduler(tasks, dependencies) print(order) # Possible output: [\\"A\\", \\"D\\", \\"E\\", \\"B\\", \\"C\\"] ``` # Notes: - Ensure to handle cycles in the dependency graph appropriately. - You may use any algorithm or library of your choice to perform the topological sort (such as Kahn\'s algorithm or Depth First Search-based approach). - Additional checks and validations for inputs are encouraged for robustness.","solution":"def task_scheduler(tasks, dependencies): from collections import deque, defaultdict # Step 1: Create the adjacency list representation of the graph graph = defaultdict(list) in_degree = {task: 0 for task in tasks} for pre, post in dependencies: graph[pre].append(post) in_degree[post] += 1 # Step 2: Topological Sorting (Kahn\'s Algorithm) zero_in_degree_queue = deque([task for task in tasks if in_degree[task] == 0]) topological_order = [] while zero_in_degree_queue: current = zero_in_degree_queue.popleft() topological_order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) # Step 3: Detect Cycles (if topological sort is not possible, cycle exists) if len(topological_order) != len(tasks): return \\"Error: Cycle detected in the task dependencies\\" # Step 4: Return the ordered list of tasks return topological_order"},{"question":"You have been provided with a collection of text messages, some of which are spam and some are not. Your task is to use scikit-learn\'s `CountVectorizer` and `MultinomialNB` (Naive Bayes Classifier for multinomial distribution) to train a model on this dataset and then make predictions on a new set of messages. Here are the steps required to complete this task: 1. **Vectorizing the Data**: Use `CountVectorizer` from scikit-learn to transform the text messages into a matrix of token counts. 2. **Training the Model**: Train a `MultinomialNB` model using the vectorized messages. 3. **Evaluating the Model**: Evaluate the model on the same dataset to check its performance. 4. **Making Predictions**: Use this trained model to predict labels for new test messages. You are required to write a function `train_and_predict(messages, labels, test_messages)` that performs the above steps. The function should print the evaluation output and predictions in the format shown below: # Example Output: ``` 👉 evaluate {\'accuracy\': 0.98} 👉 predict 🙏 Message: \\"Congratulations! You have won a free ticket.\\" -> Spam 🙏 Message: \\"Meeting at 10 AM tomorrow.\\" -> Not Spam ... ``` # Input: - `messages` (list): A list of text messages. - `labels` (list): A list containing the labels (`Spam` or `Not Spam`) corresponding to each message. - `test_messages` (list): A list of new text messages to be classified. # Output: The function should print the evaluation of the model on the training data and the predictions on the test data. # Requirements: - Use `CountVectorizer` to transform text data into numeric form. - Utilize the `MultinomialNB` classifier from scikit-learn. Here is the function signature: ```python def train_and_predict(messages, labels, test_messages): # Your code here ```","solution":"from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score def train_and_predict(messages, labels, test_messages): # Vectorize the data vectorizer = CountVectorizer() X = vectorizer.fit_transform(messages) # Train the model model = MultinomialNB() model.fit(X, labels) # Evaluate the model predicted_labels = model.predict(X) accuracy = accuracy_score(labels, predicted_labels) print(\\"👉 evaluate\\") print({\'accuracy\': accuracy}) # Make predictions on new test messages test_X = vectorizer.transform(test_messages) test_predictions = model.predict(test_X) print(\\"👉 predict\\") for message, prediction in zip(test_messages, test_predictions): print(f\\"🙏 Message: \\"{message}\\" -> {prediction}\\") # Example usage: # messages = [\\"Free entry in 2 a wkly comp to win FA Cup fina...\\", \\"Nah I don\'t think he goes to usf, he lives aro...\\"] # labels = [\\"Spam\\", \\"Not Spam\\"] # test_messages = [\\"Congratulations! You have won a free ticket.\\", \\"Meeting at 10 AM tomorrow.\\"] # train_and_predict(messages, labels, test_messages)"},{"question":"You are tasked with writing a function `find_next_permutation(nums)` that transforms a given list of integers into its next lexicographical permutation. The function should rearrange the numbers in-place to achieve this. If the next permutation is not possible, the function should rearrange the list into its lowest possible order (i.e., sorted in ascending order). The lexicographical permutation of a sequence is the permutation that follows the given sequence in the dictionary order. For example, the next permutation of [1, 2, 3] is [1, 3, 2]. To solve this problem, the following steps should be followed: 1. Traverse the list from right to left and find the first element that is not in increasing order, let\'s call it the \\"pivot\\". 2. If the list is completely in non-increasing order, the next permutation is the list in ascending order. Return this sorted list directly. 3. Otherwise, find the smallest element on the right of the \\"pivot\\" but larger than the \\"pivot\\". 4. Swap this element with the \\"pivot\\". 5. Reverse the order of the elements on the right of the \\"pivot\\". **Function Signature:** ```python def find_next_permutation(nums): pass ``` **Example:** ```python # Example usage: arr = [1, 2, 3] find_next_permutation(arr) print(arr) # Expected output: [1, 3, 2] arr = [3, 2, 1] find_next_permutation(arr) print(arr) # Expected output: [1, 2, 3] arr = [1, 1, 5] find_next_permutation(arr) print(arr) # Expected output: [1, 5, 1] ```","solution":"def find_next_permutation(nums): Rearranges numbers into the lexicographically next greater permutation of numbers. If such an arrangement is not possible, it transforms the list into the lowest possible order (i.e., sorted in ascending order). n = len(nums) if n <= 1: return # Step 1: Find the first decreasing element from the end pivot = n - 2 while pivot >= 0 and nums[pivot] >= nums[pivot + 1]: pivot -= 1 if pivot == -1: # If no such pivot exists, reverse the whole array nums.reverse() return # Step 2: Find the smallest element on the right of the pivot, but larger than nums[pivot] for i in range(n - 1, pivot, -1): if nums[i] > nums[pivot]: # Step 3: Swap it with the pivot nums[i], nums[pivot] = nums[pivot], nums[i] break # Step 4: Reverse the sub-array to the right of the pivot left, right = pivot + 1, n - 1 while left < right: nums[left], nums[right] = nums[right], nums[left] left += 1 right -= 1"},{"question":"In this problem, you will write a Python function that extracts and processes information from a nested dictionary structure. This function will assist in data manipulation tasks often encountered in projects dealing with hierarchical data. Function Name: `extract_and_process_data` You are required to write a function `extract_and_process_data` which takes a single argument: - `data`: a dictionary containing nested dictionaries and lists with varying levels of depth. The function should: 1. Recursively traverse the dictionary structure to identify all leaf nodes (values that are not dictionaries or lists). 2. Collect these leaf node values in a list. 3. Process the collected list in the following manner: - Convert all string values to lowercase. - Sum all numeric values. - Ignore any other types. Your function should return a tuple containing: - A list of all processed string values. - The sum of all numeric values. Here are the detailed specifications: 1. Define the function `extract_and_process_data` that accepts a single dictionary argument. 2. Implement a recursive helper function to traverse the nested dictionary and collect the leaf node values. 3. Convert strings to lowercase and sum numeric values. 4. Construct and return the result as a tuple containing the list of lowercase strings and the sum of numeric values. Example: ``` data = { \'key1\': \'Hello\', \'key2\': 123, \'key3\': { \'key4\': \'world\', \'key5\': 456, \'key6\': { \'key7\': \'Python\', \'key8\': 789 } }, \'key9\': [1, \'b\', {\'key10\': \'A\', \'key11\': 2}] } Output: ([\'hello\', \'world\', \'python\', \'b\', \'a\'], 1371) ``` In this example, the function extracts and processes all leaf node values from the nested dictionary, returning a tuple with lowercase strings and the sum of numeric values. Important: Ensure your solution handles deeply nested structures and effectively processes all elements within lists and dictionaries. Assume input dictionaries follow the conventions used in the example and do not contain cyclic references.","solution":"def extract_and_process_data(data): def recursive_collect(d): strings = [] numbers = 0 if isinstance(d, dict): for value in d.values(): s, n = recursive_collect(value) strings.extend(s) numbers += n elif isinstance(d, list): for item in d: s, n = recursive_collect(item) strings.extend(s) numbers += n else: if isinstance(d, str): strings.append(d.lower()) elif isinstance(d, (int, float)): numbers += d return strings, numbers collected_strings, total_sum = recursive_collect(data) return collected_strings, total_sum"},{"question":"You are tasked with creating a program that processes sales data for a retail company. The data is provided as a CSV file and includes columns for `Order ID`, `Product`, `Category`, `Quantity Ordered`, `Price Each`, and `Order Date`. You need to create a function named `ProcessSalesData` that reads this data into a pandas DataFrame, performs several transformations, and returns a summary DataFrame. Here are the specific requirements you need to follow: 1. **File Name**: The function should accept one parameter, `fileName`, which is the name of the CSV file containing the sales data. 2. **Columns**: The file contains data with the following headers: \\"Order ID\\", \\"Product\\", \\"Category\\", \\"Quantity Ordered\\", \\"Price Each\\", and \\"Order Date\\". 3. **Date Parsing**: Parse the \\"Order Date\\" column to datetime format. 4. **Total Sales**: Create a new column called \\"Total Sales\\" which is calculated by multiplying \\"Quantity Ordered\\" with \\"Price Each\\". 5. **Data Aggregation**: Group the data by \\"Category\\" and calculate the sum of \\"Total Sales\\" and the total \\"Quantity Ordered\\" for each category. 6. **Output Format**: The function should return a DataFrame with the aggregated data for each category, containing two columns: \\"Total Sales\\" and \\"Total Quantity\\". Your task is to implement the `ProcessSalesData` function as described above using the `pandas` library. Ensure that the data is correctly parsed, transformed, and aggregated before returning the summary DataFrame.","solution":"import pandas as pd def ProcessSalesData(fileName): Processes sales data from a CSV file, performing necessary transformations and aggregations. Parameters: fileName (str): The name of the CSV file containing the sales data. Returns: pd.DataFrame: A DataFrame with aggregated data for each category, containing columns \\"Total Sales\\" and \\"Total Quantity\\". # Read the CSV file into a DataFrame df = pd.read_csv(fileName) # Parse the \\"Order Date\\" column to datetime format df[\'Order Date\'] = pd.to_datetime(df[\'Order Date\']) # Create a new column \\"Total Sales\\" df[\'Total Sales\'] = df[\'Quantity Ordered\'] * df[\'Price Each\'] # Aggregate data by \\"Category\\" summary_df = df.groupby(\'Category\').agg( {\'Total Sales\': \'sum\', \'Quantity Ordered\': \'sum\'} ).reset_index() # Rename the columns to match the output format summary_df.rename(columns={\'Quantity Ordered\': \'Total Quantity\'}, inplace=True) return summary_df"},{"question":"You are tasked with developing a function to construct a simple Convolutional Neural Network (CNN) model using the `torch` library. The function should strictly adhere to the specified criteria for building the model, employing the necessary `torch.nn` modules effectively. Your task is to write a Python function `build_simple_CNN(input_channels, num_classes)` that takes two parameters: 1. `input_channels`: an integer representing the number of channels in the input images. 2. `num_classes`: an integer representing the number of output classes for the classification task. The function should create a simple CNN model with the following architecture: - **Layer 1**: A Conv2d layer with `input_channels` input channels, 32 output channels, a kernel size of 3x3, and a padding of 1. - **Layer 2**: A ReLU activation function. - **Layer 3**: A MaxPool2d layer with a kernel size of 2x2 and a stride of 2. - **Layer 4**: A Conv2d layer with 32 input channels, 64 output channels, a kernel size of 3x3, and a padding of 1. - **Layer 5**: A ReLU activation function. - **Layer 6**: A MaxPool2d layer with a kernel size of 2x2 and a stride of 2. - **Layer 7**: A Flatten layer to reshape the tensor before passing it to the fully connected layer. - **Layer 8**: A Linear layer with an input size matching the flattened tensor size and an output size of `num_classes`. The model should use the `nn.Sequential` class to combine these layers. **Function Signature:** ```python def build_simple_CNN(input_channels, num_classes): pass ``` **Example Usage:** ```python import torch model = build_simple_CNN(3, 10) # Example with 3 input channels and 10 output classes print(model) ```","solution":"import torch.nn as nn def build_simple_CNN(input_channels, num_classes): Constructs a simple CNN model. Parameters: - input_channels (int): Number of input channels. - num_classes (int): Number of output classes. Returns: - model (nn.Sequential): Constructed CNN model. model = nn.Sequential( nn.Conv2d(input_channels, 32, kernel_size=3, padding=1), # Layer 1 nn.ReLU(), # Layer 2 nn.MaxPool2d(kernel_size=2, stride=2), # Layer 3 nn.Conv2d(32, 64, kernel_size=3, padding=1), # Layer 4 nn.ReLU(), # Layer 5 nn.MaxPool2d(kernel_size=2, stride=2), # Layer 6 nn.Flatten(), # Layer 7 nn.Linear(64 * 8 * 8, num_classes) # Layer 8, assuming input images are 32x32 ) return model"},{"question":"** You are working with a list of transactions recorded in a JSON file named `transactions.json`. Each transaction document in the JSON file has the fields: `id` (transaction ID), `type` (either \\"credit\\" or \\"debit\\"), `amount`, and `date`. Your task is to filter the transactions within a given date range and calculate the total credit, total debit, and net balance over this period. The JSON file entries look like: ```json [ {\\"id\\": \\"1\\", \\"type\\": \\"credit\\", \\"amount\\": 150.0, \\"date\\": \\"2023-09-20\\"}, {\\"id\\": \\"2\\", \\"type\\": \\"debit\\", \\"amount\\": 50.0, \\"date\\": \\"2023-09-21\\"}, ... ] ``` The date filter will use strings in the format \\"YYYY-MM-DD\\". Implement the function `calculate_balances(start_date: str, end_date: str) -> dict` which will: 1. Read the transactions from `transactions.json` and filter by the given date range `start_date` to `end_date`, inclusive. 2. Separate the filtered transactions into credits and debits and calculate their respective totals. 3. Compute the net balance as the difference between total credits and total debits. 4. Return a dictionary with the keys `\'total_credit\'`, `\'total_debit\'`, and `\'net_balance\'`. **Constraints:** - The file `transactions.json` is available in the same directory where your script runs. - The date format is consistent. - If no transactions fall within the given date range, return a dictionary with zeros for all values: `{\'total_credit\': 0.0, \'total_debit\': 0.0, \'net_balance\': 0.0}`. **Example:** ``` >>> calculate_balances(\\"2023-09-20\\", \\"2023-09-21\\") {\'total_credit\': 150.0, \'total_debit\': 50.0, \'net_balance\': 100.0} ``` **","solution":"import json from datetime import datetime def calculate_balances(start_date: str, end_date: str) -> dict: # Read the JSON file with open(\'transactions.json\', \'r\') as file: transactions = json.load(file) # Initialize totals total_credit = 0.0 total_debit = 0.0 # Convert date strings to datetime objects start_dt = datetime.strptime(start_date, \\"%Y-%m-%d\\") end_dt = datetime.strptime(end_date, \\"%Y-%m-%d\\") # Filter transactions and calculate totals for transaction in transactions: trans_date = datetime.strptime(transaction[\'date\'], \\"%Y-%m-%d\\") if start_dt <= trans_date <= end_dt: if transaction[\'type\'] == \'credit\': total_credit += transaction[\'amount\'] elif transaction[\'type\'] == \'debit\': total_debit += transaction[\'amount\'] # Calculate net balance net_balance = total_credit - total_debit return { \'total_credit\': total_credit, \'total_debit\': total_debit, \'net_balance\': net_balance }"},{"question":"Your task is to implement a function `find_message_scores` that processes chat logs and computes a score for each user based on the frequency of specific keywords in their messages. The function should identify the keywords, count their occurrences, and assign scores according to predefined values. Here is the function signature: ```python def find_message_scores(logs, keywords, keyword_scores): Arguments: logs : list of dict : A list of dictionaries where each dictionary represents a message with keys \'user\' and \'message\' keywords : list of str : A list of keywords to search for in the messages keyword_scores : dict : A dictionary where keys are keywords and values are their corresponding scores Returns: dict : A dictionary where each key is a user and the value is the total score based on the message contents ``` # Detailed Requirements: 1. **Parameters**: - `logs`: A list of dictionaries, where each dictionary has two keys: - `user`: A string representing the user who sent the message. - `message`: A string containing the content of the message. - `keywords`: A list of strings where each string is a keyword to search for in the messages. - `keyword_scores`: A dictionary where keys are keywords from the `keywords` list and values are integers representing the score for each keyword. 2. **Functionality**: - For each message in `logs`, identify the user and the message content. - Count the occurrences of each keyword in the message (case-insensitive). - Calculate the total score for the message by summing up the scores of each keyword found in the message (each occurrence of a keyword contributes to the total score according to the `keyword_scores` dictionary). - Add the total score of each message to the respective user\'s total score. 3. **Return Value**: - The function should return a dictionary where the keys are the user names and the values are their corresponding total scores based on the keywords found in their messages. For example, suppose you have the following input: ```python logs = [ {\'user\': \'Alice\', \'message\': \'Hey there! Welcome to the chat.\'}, {\'user\': \'Bob\', \'message\': \'Hello everyone!\'}, {\'user\': \'Alice\', \'message\': \'Did you know about the event tomorrow?\'}, {\'user\': \'Bob\', \'message\': \'Yes, I will be there.\'} ] keywords = [\'welcome\', \'event\', \'hello\'] keyword_scores = {\'welcome\': 5, \'event\': 3, \'hello\': 2} ``` Then, your function should return: ```python { \'Alice\': 8, # \'Welcome\' (5) + \'event\' (3) \'Bob\': 2 # \'Hello\' (2) } ```","solution":"def find_message_scores(logs, keywords, keyword_scores): Arguments: logs : list of dict : A list of dictionaries where each dictionary represents a message with keys \'user\' and \'message\' keywords : list of str : A list of keywords to search for in the messages keyword_scores : dict : A dictionary where keys are keywords and values are their corresponding scores Returns: dict : A dictionary where each key is a user and the value is the total score based on the message contents scores = {} # convert keywords to lowercase for case-insensitivity keywords_set = set(k.lower() for k in keywords) for log in logs: user = log[\'user\'] message = log[\'message\'].lower() # make message lowercase for case-insensitive comparison total_score = 0 for keyword in keywords_set: keyword_count = message.count(keyword) if keyword_count > 0: total_score += keyword_count * keyword_scores[keyword] if user in scores: scores[user] += total_score else: scores[user] = total_score return scores"},{"question":"Develop a function `smooth_image(img: np.ndarray, method: str, kernel_size: int) -> np.ndarray` that performs a smoothing operation on a grayscale image represented as a 2D numpy array. The function should take in three parameters: 1. `img`: A 2D numpy array representing the grayscale image. 2. `method`: A string that specifies the type of smoothing operation to perform. It can be one of the following strings: \'average\', \'gaussian\'. 3. `kernel_size`: An integer representing the size of the kernel to be used for smoothing. It should be an odd number greater than or equal to 3. The function should: 1. Check if the kernel size is valid (odd and >= 3), if not, raise a `ValueError`. 2. Apply the specified smoothing operation (average or gaussian) using the given kernel size. 3. For \'gaussian\' method, use a standard deviation of 0 for simplicity in gaussian kernel generation. You must use the following numpy functions in your implementation: - `numpy.array` - `numpy.pad` - `numpy.mean` Example Usage: ```python import numpy as np img = np.random.randint(0, 256, size=(300, 400), dtype=np.uint8) method = \'gaussian\' kernel_size = 5 result = smooth_image(img, method, kernel_size) ```","solution":"import numpy as np import scipy.ndimage def smooth_image(img: np.ndarray, method: str, kernel_size: int) -> np.ndarray: Smooth an image using the specified method and kernel size. Parameters: - img: 2D numpy array representing the grayscale image. - method: A string specifying the type of smoothing (\'average\' or \'gaussian\'). - kernel_size: An odd integer representing the size of the kernel (>= 3). Returns: - A 2D numpy array of the smoothed image. Raises: - ValueError: If kernel_size is not an odd number or less than 3. - ValueError: If method is not one of \'average\' or \'gaussian\'. if kernel_size < 3 or kernel_size % 2 == 0: raise ValueError(\\"Kernel size must be an odd number greater than or equal to 3\\") if method == \'average\': kernel = np.ones((kernel_size, kernel_size)) / (kernel_size ** 2) return scipy.ndimage.convolve(img, kernel) elif method == \'gaussian\': return scipy.ndimage.gaussian_filter(img, sigma=0, truncate=(kernel_size // 2)) else: raise ValueError(\\"Method must be either \'average\' or \'gaussian\'\\")"},{"question":"You are tasked with writing a Python function called `generate_multiplication_table_file` that will create a multiplication table and save it to a file specified by the user. The user will provide the size of the table and the name of the file. The function should perform the following tasks: 1. Ask the user for the size of the multiplication table (n x n). 2. Generate the multiplication table and store it as a nested list (2D list). 3. Ask the user for the filename to save the table. 4. Write the multiplication table to the specified file in a formatted manner. To achieve this, you can use basic Python constructs for input, list manipulation, and file handling. **Function Signature:** ```python def generate_multiplication_table_file(): ``` **Example Usage:** ```python # User inputs: # Enter the size of the multiplication table: 5 # Enter the filename to save the table: table.txt # The file \'table.txt\' should contain: # 1 2 3 4 5 # 2 4 6 8 10 # 3 6 9 12 15 # 4 8 12 16 20 # 5 10 15 20 25 ``` The function should handle cases where the provided filename already exists by prompting the user if they want to overwrite the file. Example scenario: - If the file `table.txt` already exists, prompt the user with: `The file \'table.txt\' already exists. Do you want to overwrite it? (yes/no):` - If the user enters \'no\', ask for a new filename. Note: Consider handling edge cases like invalid inputs for table size (e.g., negative numbers) and provide appropriate feedback to the user.","solution":"def generate_multiplication_table_file(): import os # Step 1: Get the size of the multiplication table from the user while True: try: size = int(input(\\"Enter the size of the multiplication table: \\")) if size <= 0: print(\\"Please enter a positive integer.\\") continue break except ValueError: print(\\"Invalid input. Please enter an integer.\\") # Step 2: Generate the multiplication table table = [[(i+1) * (j+1) for j in range(size)] for i in range(size)] # Step 3: Get the filename from the user while True: filename = input(\\"Enter the filename to save the table: \\") if os.path.exists(filename): overwrite = input(f\\"The file \'{filename}\' already exists. Do you want to overwrite it? (yes/no): \\").strip().lower() if overwrite == \'yes\': break else: print(\\"Please provide a different filename.\\") else: break # Step 4: Write the multiplication table to the specified file with open(filename, \'w\') as f: for row in table: f.write(\' \'.join(map(str, row)) + \'n\') print(f\\"Multiplication table of size {size}x{size} saved to \'{filename}\'\\")"},{"question":"You are required to create a function that processes a CSV file containing employee data and extracts information about employees meeting certain criteria. The CSV file includes fields for `employee_id`, `name`, `department`, `age`, and `salary`. Your task is to filter out employees who are above a given age and have a salary greater than a given amount, and then to return their details. Write a function `filter_employees(file_path, age_threshold, salary_threshold)` that: 1. Accepts three arguments: - `file_path`: a string representing the path to the CSV file. - `age_threshold`: an integer representing the minimum age of employees to be included. - `salary_threshold`: an integer representing the minimum salary of employees to be included. 2. Utilizes the `csv` module to read the CSV file. 3. If the file does not exist or cannot be opened, the function should catch the appropriate exception, print an error message indicating the file was not found, and exit the program using `sys.exit()`. 4. Filters the employees based on the provided age and salary thresholds. 5. Returns a list of dictionaries, each containing the details of an employee who meets the criteria. You may assume the `csv` module and `sys` module are installed in your environment. Below are the relevant library APIs you need to understand for this task: - `csv.DictReader`: Reads CSV files as a list of dictionaries. Example Usage: ```python # Consider there\'s a file called \'employees.csv\' in the current directory. employees = filter_employees(\'employees.csv\', 30, 50000) print(employees) # Output might look like: # [{\'employee_id\': \'123\', \'name\': \'Alice\', \'department\': \'Engineering\', \'age\': \'34\', \'salary\': \'75000\'}, # {\'employee_id\': \'456\', \'name\': \'Bob\', \'department\': \'HR\', \'age\': \'40\', \'salary\': \'60000\'}] ```","solution":"import csv import sys def filter_employees(file_path, age_threshold, salary_threshold): Filters employees from a CSV file based on age and salary criteria. Args: - file_path (str): The path to the CSV file. - age_threshold (int): The minimum age of employees to include. - salary_threshold (int): The minimum salary of employees to include. Returns: - list of dict: A list containing dictionaries of the filtered employees. filtered_employees = [] try: with open(file_path, \'r\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: if int(row[\'age\']) > age_threshold and int(row[\'salary\']) > salary_threshold: filtered_employees.append(row) except FileNotFoundError: print(f\\"Error: The file {file_path} was not found.\\") sys.exit(1) except Exception as e: print(f\\"Error: {str(e)}\\") sys.exit(1) return filtered_employees"},{"question":"You are asked to write a Python function to manage the usage of the `collections.Counter` class for word frequency analysis in a given text. The function should take a string input containing multiple words and return the top three most common words along with their frequencies. **Instructions:** 1. Define the function `most_common_words` which accepts a single parameter: a string representing the text to analyze. 2. Use the `collections.Counter` class to count the frequency of each word in the input text. 3. Convert all words to lowercase to ensure the count is case-insensitive. 4. Ignore punctuation and numbers; only consider alphabetical words in the analysis. 5. Return the top three most common words and their counts in the form of a list of tuples. 6. If there are fewer than three unique words, return the result for all unique words sorted by frequency. Here is the signature of the function you need to implement: ```python def most_common_words(text): # Your code goes here ``` **Example:** ```python text = \\"Hello world! Welcome to the world of programming. Hello everyone. Programming is fun!\\" result = most_common_words(text) print(result) ``` **Expected Output:** ``` [(\'hello\', 2), (\'world\', 2), (\'programming\', 2)] ``` **Notes:** - Your solution should use the `collections.Counter` class. - Your solution should be efficient and handle edge cases gracefully, such as empty strings or text with no valid words.","solution":"from collections import Counter import re def most_common_words(text): Returns the top three most common words and their frequencies from the given text. Args: text (str): The text to analyze. Returns: list of tuples: A list of tuples containing the top three most common words and their frequencies. # Normalize the text by converting it to lowercase and # using regex to find all alphabetical words words = re.findall(r\'b[a-z]+b\', text.lower()) # Count the frequency of each word word_counts = Counter(words) # Get the top three most common words most_common = word_counts.most_common(3) return most_common"},{"question":"Write a Python function named `find_largest_prime_factor(n)` that takes a positive integer `n` as input and returns the largest prime factor of `n`. The function should implement the following steps: 1. Create a helper function named `is_prime` that checks if a number is prime. 2. Initialize a variable to store the largest prime factor found. 3. Iterate from 2 to the square root of `n`, inclusive. 4. For each number `i` in this range: - Check if `i` is a factor of `n`. - If `i` is a factor, then check if `i` is prime using the `is_prime` helper function. - If `i` is a prime factor and greater than the current largest prime factor, update the largest prime factor. - Divide `n` by `i` and continue checking until `n` is no longer divisible by `i`. 5. If after the loop `n` is still greater than 1 and greater than the current largest prime factor, then `n` itself is a prime factor and should be returned. 6. Return the largest prime factor. # Guidelines: - Function Name: `find_largest_prime_factor` - Input: A positive integer `n` - Output: An integer representing the largest prime factor of `n` - Ensure that the function handles edge cases, such as when `n` is a prime number itself. Example: ```python largest_prime_factor = find_largest_prime_factor(13195) print(largest_prime_factor) ``` This should output `29` since `29` is the largest prime factor of `13195`.","solution":"import math def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def find_largest_prime_factor(n): Function to find the largest prime factor of n. largest_prime = -1 # Iterate from 2 to the square root of n for i in range(2, int(math.sqrt(n)) + 1): while n % i == 0: if is_prime(i): largest_prime = i n //= i # If n is greater than 1 and it\'s prime, update the largest prime factor if n > 1 and is_prime(n): largest_prime = n return largest_prime"},{"question":"Implement a program that takes a string containing an arithmetic expression involving addition, subtraction, multiplication, and division (e.g., \'3+2*2-4/2\'), and returns the computed result as a float. The input string will always contain a valid arithmetic expression without any spaces. You must respect the operator precedence (i.e., * and / have higher precedence than + and -). Handle any division by zero errors by raising an appropriate exception. The function should output: float: The result of the arithmetic expression. You should write self-contained code starting with: ``` def calculate_expression(expression): ```","solution":"def calculate_expression(expression): Evaluate a basic arithmetic expression with +, -, *, / operators. Parameters: expression (str): The arithmetic expression to evaluate in string format. Returns: float: The result of the evaluated expression. Raises: ZeroDivisionError: If the expression includes division by zero. import re from operator import add, sub, mul, truediv # Define operator precedence and associative functions operators = {\'+\': add, \'-\': sub, \'*\': mul, \'/\': truediv} precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} def parse_expression(expression): tokens = re.findall(r\'d+.?d*|[+-*/]\', expression) values = [] ops = [] def apply_operator(): right = values.pop() left = values.pop() op = ops.pop() if op == \'/\' and right == 0: raise ZeroDivisionError(\\"Division by zero.\\") values.append(operators[op](left, right)) for token in tokens: if token in operators: while (ops and precedence[ops[-1]] >= precedence[token]): apply_operator() ops.append(token) else: values.append(float(token)) while ops: apply_operator() return values[0] return parse_expression(expression)"},{"question":"You are responsible for implementing a function to track the inventory of a store. The function will receive a list of items sold during the day and the initial inventory. The goal is to update the inventory based on the sold items. Each item is represented as a string in the sold list. The inventory is a dictionary where the keys are item names and the values are the quantities available. **Function Name**: `update_inventory` **Parameters**: - `inventory` (dict): A dictionary where the keys are item names (strings) and the values are the quantity (integers) in stock. - `sold_items` (list): A list of strings, where each string is an item that has been sold. **Function Behavior**: 1. Iterate through each item in the `sold_items` list. 2. For each item, reduce the corresponding quantity in the `inventory` by 1. 3. If an item from `sold_items` is not in the `inventory`, ignore it. 4. The function should update the `inventory` in place without returning anything. **Example**: ```python initial_inventory = { \'apple\': 10, \'banana\': 5, \'orange\': 8 } items_sold = [\'apple\', \'orange\', \'orange\', \'banana\', \'banana\', \'banana\'] update_inventory(initial_inventory, items_sold) print(initial_inventory) # Output should be: # {\'apple\': 9, \'banana\': 2, \'orange\': 6} ``` **Requirements**: - Ensure that the function updates the given inventory in place. - Handle items not present in the inventory gracefully. - No need to handle negative inventory (assume you will never sell more items than available in inventory). Here’s a template to get you started: ```python def update_inventory(inventory, sold_items): # Your solution here ``` Implement the `update_inventory` function and ensure it updates the inventory correctly based on the items sold.","solution":"def update_inventory(inventory, sold_items): Updates the inventory based on the items sold. Parameters: inventory (dict): A dictionary where the keys are item names (strings) and the values are the quantities (integers) in stock. sold_items (list): A list of strings, where each string is an item that has been sold. Returns: None for item in sold_items: if item in inventory: inventory[item] -= 1"},{"question":"You are required to build a function that simulates a simple genetic evolution process over multiple generations. This function will utilize basic genetic operations including crossover and mutation, to evolve a population towards a specified target string. The function should demonstrate the use of string manipulation, probabilistic operations, and iteration processes. Consider the following setup: - You have an initial population where each individual is represented as a string of characters. - You have a target string which the population should evolve towards over the generations. - The fitness of an individual is measured by how many characters match the target string at the correct positions. You need to implement the following functions: - `initialize_population(size, target)`: This function initializes a population of a given size where each individual\'s string is of the same length as the target string, but consists of random characters. - `compute_fitness(individual, target)`: This function computes the fitness of an individual by comparing it to the target string. - `crossover(parent1, parent2)`: This function performs a crossover operation between two parent individuals to produce offspring. - `mutate(individual, mutation_rate)`: This function performs a mutation operation on an individual with a given mutation rate. - `evolve_population(population, target, mutation_rate)`: This function evolves the population over a fixed number of generations towards the target string. Here is the data you will use to get started: ```python import random # Define the target string target = \\"HELLO\\" # Parameters for the genetic algorithm population_size = 100 mutation_rate = 0.01 generations = 1000 ``` You need to proceed with the following steps: 1. Implement the function `initialize_population(size, target)` to generate the initial population. 2. Implement the function `compute_fitness(individual, target)` to calculate the fitness score of an individual. 3. Implement the function `crossover(parent1, parent2)` to combine two parents to produce offspring. 4. Implement the function `mutate(individual, mutation_rate)` to randomly mutate an individual based on the given mutation rate. 5. Implement the function `evolve_population(population, target, mutation_rate)` to simulate the evolution process over several generations towards the target string. This function should return the best individual found after all generations. Example usage: ```python population = initialize_population(population_size, target) best_individual = evolve_population(population, target, mutation_rate) print(\\"Best Individual: \\", best_individual) print(\\"Fitness Score: \\", compute_fitness(best_individual, target)) ``` The functions should ideally demonstrate a basic working knowledge of genetic algorithms and include handling string manipulations and probabilistic events.","solution":"import random import string def initialize_population(size, target): Initializes a population of given size with random strings of the same length as target. population = [] for _ in range(size): individual = \'\'.join(random.choices(string.ascii_uppercase, k=len(target))) population.append(individual) return population def compute_fitness(individual, target): Computes the fitness of an individual by comparing it to the target string. Fitness is the number of characters in the correct position. fitness = sum(1 for i, char in enumerate(individual) if char == target[i]) return fitness def crossover(parent1, parent2): Performs a crossover between two parents to produce an offspring. crossover_point = random.randint(1, len(parent1) - 2) offspring = parent1[:crossover_point] + parent2[crossover_point:] return offspring def mutate(individual, mutation_rate): Performs a mutation on an individual based on the given mutation rate. mutated_individual = \'\'.join( char if random.random() > mutation_rate else random.choice(string.ascii_uppercase) for char in individual ) return mutated_individual def evolve_population(population, target, mutation_rate, generations=1000): Evolves the population over a fixed number of generations towards the target string. for _ in range(generations): population = sorted(population, key=lambda x: compute_fitness(x, target), reverse=True) next_generation = population[:10] # Keep top 10% as is while len(next_generation) < len(population): parent1, parent2 = random.choices(population[:50], k=2) # Select from top 50% offspring = crossover(parent1, parent2) offspring = mutate(offspring, mutation_rate) next_generation.append(offspring) population = next_generation return max(population, key=lambda x: compute_fitness(x, target))"},{"question":"Create a function named `circular_primes` that identifies all circular prime numbers below a given integer `n`. A circular prime number is a prime number that remains prime when its digits are rotated in all possible ways. For example, 197 is a circular prime because 197, 971, and 719 are all prime. **Function Signature**: `def circular_primes(n: int) -> List[int]:` **Input**: - An integer `n` (1 <= n <= 1000000) **Output**: - A list of integers containing all circular primes below `n`. # Example ```python print(circular_primes(100)) # Output: [2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, 97] print(circular_primes(200)) # Output: [2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, 97, 113, 131, 197, 199] ``` To accomplish this, you may break down the problem into the following steps: 1. Create a helper function `is_prime` that determines if a given number is prime. 2. Create a helper function `rotations` that generates all rotations of the digits of a given number. 3. Iterate through all numbers below `n` and use the above helper functions to check if the number and all its rotations are prime. 4. Collect and return a list of all circular primes found.","solution":"from typing import List def is_prime(num: int) -> bool: Returns True if the given number is prime, else False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def rotations(num: int) -> List[int]: Returns all rotations of the digits of the given number. s = str(num) return [int(s[i:] + s[:i]) for i in range(len(s))] def circular_primes(n: int) -> List[int]: Returns a list of all circular primes below n. circular_prime_list = [] for num in range(2, n): all_rotations = rotations(num) if all(is_prime(rot) for rot in all_rotations): circular_prime_list.append(num) return circular_prime_list"},{"question":"Identify the most frequent word in a given text file, ignoring case and punctuation. If there is a tie, return all the most frequent words in alphabetical order. If the file is empty or contains only punctuation and spaces, return an empty list. The function should output with: list: A list containing the most frequent word(s) in lowercase and in alphabetical order, if there is a tie. You should write self-contained code starting with: ``` import re from collections import Counter def task_func(file_path): ```","solution":"import re from collections import Counter def task_func(file_path): Identifies the most frequent word(s) in a given text file, ignoring case and punctuation. Returns a list of the most frequent word(s) in lowercase and in alphabetical order. If there is a tie, all the most frequent words are returned. try: with open(file_path, \'r\') as file: text = file.read().lower() # Remove punctuation text = re.sub(r\'[^ws]\', \'\', text) words = text.split() if not words: return [] word_count = Counter(words) max_count = max(word_count.values()) # Get words with the maximum frequency most_frequent_words = [word for word, count in word_count.items() if count == max_count] return sorted(most_frequent_words) except FileNotFoundError: return []"},{"question":"You have been given a task to implement a basic k-means clustering algorithm to categorize data points into clusters. Specifically, you need to write a function `perform_k_means_clustering(data, k, max_iters)` that accomplishes the following: 1. Randomly initializes `k` centroids from the data points. 2. Iteratively updates the centroids and assigns each data point to the nearest centroid, continuing for a maximum of `max_iters` iterations or until the centroids do not change. 3. Plots the final clusters along with the centroids using different colors for each cluster. 4. Sets the title of the plot to \'K-Means Clustering\'. 5. Sets the x-label to \'Feature 1\'. 6. Sets the y-label to \'Feature 2\'. You should use the `matplotlib` library for plotting and make sure to use the specific functions provided below for setting the title, x-label, y-label, and displaying the plot: - `matplotlib.pyplot.scatter` - `matplotlib.pyplot.title` - `matplotlib.pyplot.xlabel` - `matplotlib.pyplot.show` `data` is a 2D numpy array of shape (n_samples, 2) representing the data points with two features. Parameters: - `data`: A 2D numpy array of shape (n_samples, 2) containing the data points. - `k`: An integer representing the number of clusters. - `max_iters`: An integer representing the maximum number of iterations for updating centroids. Example: ```python import numpy as np data = np.array([[1, 2], [2, 3], [3, 4], [8, 9], [9, 10], [10, 11], [25, 30], [26, 31], [27, 32]]) k = 3 max_iters = 100 perform_k_means_clustering(data, k, max_iters) ```","solution":"import numpy as np import matplotlib.pyplot as plt def initialize_centroids(data, k): Randomly initialize k centroids from the data points. np.random.seed(42) # For reproducibility indices = np.random.choice(data.shape[0], k, replace=False) return data[indices] def compute_distances(data, centroids): Compute the distance between each data point and each centroid. distances = np.zeros((data.shape[0], centroids.shape[0])) for i in range(centroids.shape[0]): distances[:, i] = np.linalg.norm(data - centroids[i], axis=1) return distances def update_centroids(data, labels, k): Update centroids based on the mean of data points assigned to each cluster. new_centroids = np.zeros((k, data.shape[1])) for i in range(k): new_centroids[i, :] = data[labels == i].mean(axis=0) return new_centroids def assign_clusters(distances): Assign each data point to the nearest centroid. return np.argmin(distances, axis=1) def perform_k_means_clustering(data, k, max_iters): Perform k-means clustering on the data and plot the final clusters and centroids. # Step 1: Initialize centroids centroids = initialize_centroids(data, k) for _ in range(max_iters): # Step 2: Compute distances and assign clusters distances = compute_distances(data, centroids) labels = assign_clusters(distances) # Step 3: Update centroids new_centroids = update_centroids(data, labels, k) # Step 4: Check for convergence (if centroids do not change) if np.all(centroids == new_centroids): break centroids = new_centroids # Plot the final clusters and centroids plt.figure() colors = [\'r\', \'g\', \'b\', \'y\', \'c\', \'m\'][:k] for i in range(k): points = data[labels == i] plt.scatter(points[:, 0], points[:, 1], s=20, c=colors[i]) plt.scatter(centroids[:, 0], centroids[:, 1], s=300, c=\'black\', marker=\'x\') plt.title(\'K-Means Clustering\') plt.xlabel(\'Feature 1\') plt.ylabel(\'Feature 2\') plt.show()"},{"question":"You are given a log file that records user activity on an e-commerce website. Each line in the file starts with either \'LOGIN\' or \'PURCHASE\', followed by relevant data values. For example: ``` LOGIN user123 2023-01-01 12:00:00 PURCHASE user123 productA 2 PURCHASE user123 productB 1 LOGIN user456 2023-01-01 12:05:00 PURCHASE user456 productC 5 ``` Your task is to write a function named `read_user_activity` that reads the user activity data from the specified file, parses the data, and returns it in a structured dictionary format. The function `read_user_activity` should: - Take one argument `filename` which is a string representing the location of the file. - Return a dictionary with \'login\' and \'purchase\' keys: - The value of \'login\' should be a list of dictionaries, each containing keys \'user_id\' and \'timestamp\' representing the login activities. - The value of \'purchase\' should be a list of dictionaries, each containing keys \'user_id\', \'product\', and \'quantity\' representing the purchase activities. Additionally, the function should raise a `FileNotFoundError` if the specified file cannot be found. Please ensure to use the `numpy.genfromtxt` function to read the data from the file.","solution":"import numpy as np def read_user_activity(filename): try: data = np.genfromtxt(filename, dtype=str, delimiter=\' \') except FileNotFoundError: raise FileNotFoundError(f\\"The file {filename} does not exist.\\") activity = {\'login\': [], \'purchase\': []} for entry in data: if entry[0] == \'LOGIN\': activity[\'login\'].append({ \'user_id\': entry[1], \'timestamp\': f\\"{entry[2]} {entry[3]}\\" }) elif entry[0] == \'PURCHASE\': activity[\'purchase\'].append({ \'user_id\': entry[1], \'product\': entry[2], \'quantity\': int(entry[3]) }) return activity"},{"question":"In this problem, you will write a function `find_matrix_diagonal_elements` that takes a square matrix (2D list) of integers and returns a list of integers representing the elements of the two main diagonals. The primary diagonal is the one going from the top-left to the bottom-right, and the secondary diagonal goes from top-right to bottom-left. # Function Signature ```python def find_matrix_diagonal_elements(matrix: list[list[int]]) -> list[int]: :param list[list[int]] matrix: A square matrix of integers. :return: A list containing the elements of the primary and secondary diagonals. :rtype: list[int] ``` # Input - `matrix` is a 2D list of integers where the number of rows is equal to the number of columns, representing a square matrix of size N x N. # Output - The function should return a list of integers. The first N elements should be those of the primary diagonal and the next N elements should be those of the secondary diagonal. # Example ```python find_matrix_diagonal_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # Output: [1, 5, 9, 3, 5, 7] find_matrix_diagonal_elements([[10, 20], [30, 40]]) # Output: [10, 40, 20, 30] ``` # Requirements - The input list will always have the same number of rows and columns. - You should extract the diagonals in a way that ensures the first N elements are from the primary diagonal and the next N are from the secondary diagonal. # Detailed Explanation To find the elements of the primary diagonal, iterate over the matrix and collect elements where the row index is equal to the column index (i.e., `matrix[i][i]`). To find the elements of the secondary diagonal, iterate and collect elements where the row index and the column index sum to (N-1) (i.e., `matrix[i][N-1-i]`). Combine these two lists to form the final result.","solution":"def find_matrix_diagonal_elements(matrix: list[list[int]]) -> list[int]: Returns a list containing the elements of the primary and secondary diagonals. :param list[list[int]] matrix: A square matrix of integers. :return: List of integers representing two main diagonals. n = len(matrix) primary_diagonal = [matrix[i][i] for i in range(n)] secondary_diagonal = [matrix[i][n-1-i] for i in range(n)] return primary_diagonal + secondary_diagonal"},{"question":"Write a Python function named `find_unique_substring(s, k)` that performs the following tasks: 1. Takes a string `s` and an integer `k` as input. 2. Identifies all unique substrings of length `k` in the given string `s`. 3. Returns a list of all such unique substrings in lexicographical order. Assumptions: 1. The input string `s` is non-empty and contains only lowercase alphabetical characters. 2. The integer `k` is positive and less than or equal to the length of the string `s`. Example Function Signature: ```python def find_unique_substring(s: str, k: int) -> list: pass ``` Examples: ```python s = \\"banana\\" k = 3 find_unique_substring(s, k) # Output: [\'ana\', \'ban\', \'nan\'] ``` s = \\"abcdefg\\" k = 2 find_unique_substring(s, k) # Output: [\'ab\', \'bc\', \'cd\', \'de\', \'ef\', \'fg\'] ``` The goal of this problem is to practice working with substrings, sets, and sorting in Python.","solution":"def find_unique_substring(s: str, k: int) -> list: Identifies all unique substrings of length k in the given string s and returns them in lexicographical order. :param s: A string of lowercase alphabetical characters. :param k: An integer specifying the length of substrings. :return: A list of unique substrings of length k in lexicographical order. unique_substrings = set() for i in range(len(s) - k + 1): substring = s[i:i + k] unique_substrings.add(substring) return sorted(unique_substrings)"},{"question":"You are tasked with writing a Python function named `rotateAndProjectVector` that takes in three inputs: a list `v` representing a 3D vector with three numerical values `[x, y, z]`, a list `axis` representing the axis of rotation with three numerical values `[a, b, c]`, and a numerical value `theta` representing the angle of rotation in radians. The function should compute the new vector `v_prime` after rotating the original vector `v` around the given axis by the angle `theta`, and then project this rotated vector onto the x-y plane, retaining only the x and y components in the final result. The calculations involve: 1. Using the Rodrigues\' rotation formula to rotate vector `v` around the `axis` by the angle `theta`. 2. Projecting the rotated vector onto the x-y plane by discarding the z-component. To assist you, here are the detailed steps: - Normalize the axis vector: (hat{u} = frac{[a, b, c]}{sqrt{a^2 + b^2 + c^2}}) - Apply the Rodrigues\' rotation formula: - (v_{text{prime}} = v cos(theta) + (hat{u} times v) sin(theta) + hat{u} (hat{u} cdot v) (1 - cos(theta))) - Project the rotated vector (v_{text{prime}}) onto the x-y plane by taking its x and y components. You are required to include the use of the `numpy` package, specifically functions like `numpy.dot`, `numpy.cross`, and `numpy.linalg.norm`, as part of your solution. **Function signature:** ```python def rotateAndProjectVector(v, axis, theta): pass ``` **Helper function definition:** Define a helper function `normalize_vector(vec)` to normalize a 3D vector: ```python def normalize_vector(vec): norm = np.linalg.norm(vec) return vec / norm ``` **Parameters:** - `v`: list of floats `[x, y, z]`, the original 3D vector. - `axis`: list of floats `[a, b, c]`, the axis of rotation. - `theta`: float, the angle of rotation in radians. **Returns:** - A list of two floats `[x_prime, y_prime]`: The rotated vector projected onto the x-y plane. # Example Usage: ```python from math import radians v = [1, 2, 3] axis = [0, 1, 0] theta = radians(90) print(rotateAndProjectVector(v, axis, theta)) # Output example: [-3.0, 2.0] ``` You are required to use the `numpy` package, particularly for vector and matrix operations. # Remember to ensure that the axis vector is normalized before applying the Rodrigues\' rotation formula. --- Please ensure that your solution adheres to the function signature specified, and matches the input/output behavior demonstrated in the example usage.","solution":"import numpy as np def normalize_vector(vec): norm = np.linalg.norm(vec) return vec / norm def rotateAndProjectVector(v, axis, theta): Rotates a 3D vector v around the provided axis by the angle theta (in radians) and projects the result onto the x-y plane. # Normalize the axis of rotation u = normalize_vector(np.array(axis)) # Convert v to a numpy array v = np.array(v) # Rodrigues\' rotation formula components cos_theta = np.cos(theta) sin_theta = np.sin(theta) # Compute the dot product u . v u_dot_v = np.dot(u, v) # Compute the cross product u x v u_cross_v = np.cross(u, v) # Compute the rotated vector using Rodrigues\' rotation formula v_prime = (v * cos_theta + u_cross_v * sin_theta + u * u_dot_v * (1 - cos_theta)) # Projecting v_prime onto the x-y plane v_prime_xy = v_prime[:2] # Only take the x and y components return v_prime_xy.tolist()"},{"question":"In this problem, you will work with dictionaries to manipulate and analyze data. You are required to implement a function named `group_by_age` that, given a list of dictionaries representing people, will group them by age. Each dictionary contains the keys `name` and `age`. Here\'s the full context for the function you need to write: 1. **Function Name**: `group_by_age` 2. **Parameters**: - `people` (list of dicts): A list of dictionaries where each dictionary represents a person with the keys `name` (string) and `age` (int). 3. **Functionality**: - The function should return a dictionary where the keys are ages, and the values are lists of names of people who are that age. - If there are people with the same age, their names should be aggregated in a list under the respective age key. 4. **Example**: ```python people = [ {\\"name\\": \\"Alice\\", \\"age\\": 30}, {\\"name\\": \\"Bob\\", \\"age\\": 25}, {\\"name\\": \\"Charlie\\", \\"age\\": 30}, {\\"name\\": \\"David\\", \\"age\\": 25}, {\\"name\\": \\"Eve\\", \\"age\\": 35} ] result = group_by_age(people) # Expected output: # {30: [\\"Alice\\", \\"Charlie\\"], 25: [\\"Bob\\", \\"David\\"], 35: [\\"Eve\\"]} ``` 5. **Documentation**: The function should handle edge cases such as an empty list and ensure that the result format is always a dictionary, even if no people are provided. Your task is to complete the implementation of the `group_by_age` function to meet these specifications.","solution":"def group_by_age(people): Groups people by age. Parameters: people (list of dict): A list of dictionaries, each containing \'name\' (str) and \'age\' (int) keys. Returns: dict: A dictionary where the keys are ages and the values are lists of names of people who are that age. grouped = {} for person in people: age = person[\'age\'] name = person[\'name\'] if age not in grouped: grouped[age] = [] grouped[age].append(name) return grouped"},{"question":"Given a string containing both uppercase and lowercase alphabetic characters, write a function to count the occurrences of each character (case-sensitive) and return a dictionary with the characters as keys and their respective counts as values. Ensure the function handles cases where the input string is empty, and ignores any non-alphabetic characters. The function should use the `collections` library for efficient counting. You should write self-contained code starting with: ``` from collections import Counter def count_characters(input_string): ```","solution":"from collections import Counter def count_characters(input_string): Counts the occurrences of each alphabetic character in the input string. Args: input_string (str): The string to count characters in. Returns: dict: A dictionary with characters as keys and their counts as values. # Filter out non-alphabetic characters filtered_string = \'\'.join(filter(str.isalpha, input_string)) # Count the characters return dict(Counter(filtered_string))"},{"question":"You are required to design a function that accepts a list of integers and returns the longest subsequence where the difference between consecutive elements is strictly alternating between increasing and decreasing. This problem will enhance your ability to work with sequences and implement dynamic programming or other logic to solve subsequence problems. **Function Specification:** - **Function Name:** `longest_alternating_subsequence` - **Parameters:** - `arr`: A list of integers with at least one element. - **Returns:** - An integer representing the length of the longest alternating subsequence. **Constraints:** - The length of `arr` will be at most 10^4. **Example:** ```python arr = [1, 5, 4] result = longest_alternating_subsequence(arr) # result should be 3, because the entire sequence [1, 5, 4] is alternating arr = [1, 4, 3, 4, 2, 3] result = longest_alternating_subsequence(arr) # result should be 6, because the sequence [1, 4, 3, 4, 2, 3] is alternating ``` **Hints:** - Utilize dynamic programming to keep track of the longest subsequence length ending at each position. - Consider defining two arrays: one for sequences ending with an increasing step and another for sequences ending with a decreasing step.","solution":"def longest_alternating_subsequence(arr): Returns the length of the longest subsequence where the difference between consecutive elements is strictly alternating between increasing and decreasing. if not arr: return 0 n = len(arr) increase = [1] * n decrease = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: increase[i] = max(increase[i], decrease[j] + 1) elif arr[i] < arr[j]: decrease[i] = max(decrease[i], increase[j] + 1) return max(max(increase), max(decrease))"},{"question":"Implement a function that finds the second largest unique value in a list of integers. The function should handle lists that contain duplicates and return `None` if there are fewer than 2 unique values. # Function Signature ```python def second_largest(nums: list) -> int: ``` # Arguments: - `nums`: A list of integers. The list can be empty, contain duplicates, and have any integer values. # Returns: - The second largest unique integer in the list. If there are fewer than 2 unique values, return `None`. # Example: ```python nums = [4, 1, 2, 3, 4, 2, 1] print(second_largest(nums)) # Expected output: 3 nums = [7, 7, 7] print(second_largest(nums)) # Expected output: None nums = [10, 20] print(second_largest(nums)) # Expected output: 10 ``` # Requirements: - Your implementation should not use built-in sorting functions. - The function should handle edge cases such as an empty list or a list with fewer than 2 unique values.","solution":"def second_largest(nums: list) -> int: Returns the second largest unique value from the list nums. If there are fewer than 2 unique values, return None. unique_nums = set(nums) if len(unique_nums) < 2: return None largest = second_largest = float(\'-inf\') for num in unique_nums: if num > largest: second_largest = largest largest = num elif num > second_largest: second_largest = num return second_largest if second_largest != float(\'-inf\') else None"},{"question":"Given an `n x n` matrix representing a grid of elevations, write a function `find_highest_path(matrix)` that determines the highest elevation change between adjacent cells in a single move. The move can be in one of the four cardinal directions (i.e., up, down, left, right). 1. Calculate the maximum elevation change between any two adjacent cells. 2. Identify the positions of these cells in the matrix. Print the highest elevation change and the coordinates of the two cells involved. Function Signature: ```python def find_highest_path(matrix: List[List[int]]) -> None: ... ``` Example Input: ```python matrix = [ [1, 2, 3], [4, 8, 7], [6, 5, 9] ] ``` Example Output: ``` The highest elevation change is 4 between cells (1, 1) and (2, 1) ```","solution":"from typing import List def find_highest_path(matrix: List[List[int]]) -> None: Finds the highest elevation change between any two adjacent cells in an n x n matrix and prints their coordinates. n = len(matrix) max_change = 0 max_coords = None # Directions for moving (right, down, left, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for i in range(n): for j in range(n): for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < n: change = abs(matrix[i][j] - matrix[ni][nj]) if change > max_change: max_change = change max_coords = ((i, j), (ni, nj)) if max_coords: print(f\\"The highest elevation change is {max_change} between cells {max_coords[0]} and {max_coords[1]}\\")"},{"question":"Write a function `longest_subsequence_divisible(nums)` that finds the length of the longest contiguous subsequence in the given list `nums` where all elements in the subsequence have the same remainder when divided by `k`. - `nums`: a list of integers. - `k`: an integer greater than 1. # Input - `nums`: List[int], a list of integers where 1 ≤ `len(nums)` ≤ 10^5. - `k`: int, an integer where 2 ≤ `k` ≤ 100. # Output - Return an integer representing the length of the longest contiguous subsequence with the same remainder when all elements are divided by `k`. # Example ```python nums = [5, 2, 7, 3, 15, 10, 20, 8] k = 5 longest_subsequence_divisible(nums) => 3 ``` # Explanation In the example given, the subsequences [15, 10, 20] and [7, 3, 15, 10, 20] have the same remainder when divided by `k = 5`, which are 0 and 3, respectively, but the longest one contiguous is [15, 10, 20] and its length is 3. # Function Signature ```python def longest_subsequence_divisible(nums: List[int], k: int) -> int: pass ```","solution":"def longest_subsequence_divisible(nums, k): Finds the length of the longest contiguous subsequence where all elements have the same remainder when divided by k. max_len = 0 current_len = 0 current_rem = None for num in nums: rem = num % k if rem == current_rem: current_len += 1 else: current_rem = rem current_len = 1 if current_len > max_len: max_len = current_len return max_len"},{"question":"Write a function named `group_elements(lst: List[int], n: int) -> List[List[int]]` that groups a given list of integers into sublists, each of length `n`. The function should return a list of these sublists. If the total number of elements in the original list is not a multiple of `n`, the final sublist should contain the remaining elements. # Requirements 1. The function should take two parameters: - `lst`: A list of integers. - `n`: An integer specifying the desired length of each sublist. 2. The function should return a list of sublists, each containing `n` elements, except possibly the last one which may contain fewer elements if the total count doesn\'t divide evenly. 3. Do not use any external libraries for this task. # Example Usage ```python # Example 1 lst = [1, 2, 3, 4, 5, 6, 7, 8, 9] n = 3 result = group_elements(lst, n) print(result) # Expected Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] # Example 2 lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] n = 4 result = group_elements(lst, n) print(result) # Expected Output: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11]] ``` # Constraints and Considerations - Ensure your function handles edge cases such as: - `lst` being an empty list. - `n` being greater than the length of the list. - `n` being less than or equal to zero (handle gracefully, possibly by raising an appropriate exception).","solution":"from typing import List def group_elements(lst: List[int], n: int) -> List[List[int]]: Groups a list of integers into sublists, each of length `n`. If the total number of elements in `lst` is not a multiple of `n`, the final sublist will contain the remaining elements. Parameters: lst (List[int]): A list of integers to be grouped. n (int): Desired length of each sublist. Returns: List[List[int]]: A list of sublists, each of length `n`. Raises: ValueError: If `n` is less than or equal to zero. if n <= 0: raise ValueError(\\"n must be greater than 0\\") return [lst[i:i + n] for i in range(0, len(lst), n)]"},{"question":"You are provided with a task to rotate a 2D matrix (list of lists), which represents an image, by 90 degrees clockwise. # Task Write a function `rotate_matrix(matrix)` that takes a square matrix (n x n 2D list) as input and returns a new matrix representing the original matrix rotated 90 degrees clockwise. # Steps to Follow: 1. **Transpose the Matrix**: Convert rows into columns. 2. **Reverse Each Row**: Reverse the elements of each row in the transposed matrix to get a 90-degree rotated matrix. # Function Signature ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: ``` # Input - `matrix`: A 2D list of integers representing the matrix to be rotated. The matrix is guaranteed to be non-empty and square (n x n). # Output - Returns a 2D list of integers representing the rotated matrix. # Example Input: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotated_matrix = rotate_matrix(matrix) ``` Output: ```python [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Additional Notes - Ensure the function handles the in-place modifications efficiently if necessary. - You can utilize helper functions to keep the code organized and readable. - Consider edge cases, such as matrices of the smallest possible size (1x1). Implement the function, verifying the correctness by testing with different sizes of matrices.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates the given square matrix by 90 degrees clockwise. Parameters: matrix (List[List[int]]): A list of lists representing the square matrix. Returns: List[List[int]]: The rotated matrix. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse() return matrix"},{"question":"You are tasked with creating a function named `generate_prime_sequence` that generates a sequence of prime numbers based on the user\'s input. The function will take a single parameter `n`, which will be an integer, and return a list of the first `n` prime numbers. Your implementation should handle the following conditions: 1. If `n` is not a positive integer (less than or equal to 0), the function should return an empty list. 2. If `n` is 1, the function should return `[2]` since 2 is the first prime number. 3. For any valid positive integer `n`, the function should generate a list of the first `n` prime numbers. The basic properties of prime numbers are: - A prime number is greater than 1. - It has no positive divisors other than 1 and itself. **Function Signature:** ```python def generate_prime_sequence(n): pass ``` **Example:** ```python generate_prime_sequence(5) # Expected Output: [2, 3, 5, 7, 11] generate_prime_sequence(10) # Expected Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] ```","solution":"def generate_prime_sequence(n): Generates a sequence of the first n prime numbers. Parameters: - n (int): The number of prime numbers to generate. Returns: - list: A list containing the first n prime numbers. if n <= 0: return [] primes = [] num = 2 # Start with the first prime number. while len(primes) < n: is_prime = True for p in primes: if num % p == 0: is_prime = False break if is_prime: primes.append(num) num += 1 return primes"},{"question":"You are to write a Python function named `isPalindrome` that determines if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward (ignoring spaces, punctuation, and capitalization). The goal of this exercise is to practice string manipulation and understand how to ignore non-alphanumeric characters in a string. # Function Signature ```python def isPalindrome(s: str) -> bool: ``` # Input - `s (str)`: The input string to be checked for palindrome properties. # Output - `bool`: Returns `True` if the input string is a palindrome, otherwise `False`. # Requirements 1. Ignore spaces, punctuation, and capitalization when determining if the string is a palindrome. 2. You may use built-in string handling functions or regular expressions to filter out non-alphanumeric characters. 3. The comparison should be case-insensitive. # Example ```python def isPalindrome(s: str) -> bool: # Your implementation here import re processed_string = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return processed_string == processed_string[::-1] # Test Cases print(isPalindrome(\\"A man, a plan, a canal, Panama\\")) # Output: True print(isPalindrome(\\"No lemon, no melon\\")) # Output: True print(isPalindrome(\\"Hello, World!\\")) # Output: False ``` Executing the above code should correctly determine whether the given strings are palindromes, ignoring spaces, punctuation, and capitalization.","solution":"def isPalindrome(s: str) -> bool: import re # Remove non-alphanumeric characters and convert to lowercase processed_string = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the processed string is equal to its reverse return processed_string == processed_string[::-1]"},{"question":"Given a list of strings representing a collection of movie titles and a user-provided string which is a partial movie title, the task is to create a function that finds all movies from the collection that start with the user-provided string. You will write a function named `find_movie_titles` that takes two parameters: - `titles`: a list of movie titles (strings). - `user_input`: a string representing the beginning of the movie title the user is looking for. Your function should return a list of movie titles from the collection that start with the `user_input`. # Requirements: - Case insensitive matching should be implemented. # Example: ```python titles = [ \\"The Shawshank Redemption\\", \\"The Godfather\\", \\"The Dark Knight\\", \\"Schindler\'s List\\", \\"Pulp Fiction\\" ] user_input = \\"The\\" result = find_movie_titles(titles, user_input) print(result) ``` Expected output should be: ```python [\\"The Shawshank Redemption\\", \\"The Godfather\\", \\"The Dark Knight\\"] ```","solution":"def find_movie_titles(titles, user_input): Finds all movie titles starting with the user-provided string. Parameters: titles (list of str): The list of movie titles. user_input (str): The partial movie title input by the user. Returns: list of str: A list of movie titles that start with the user input. user_input_lower = user_input.lower() result = [title for title in titles if title.lower().startswith(user_input_lower)] return result"},{"question":"In many software systems, a tree structure is often used to represent hierarchical data. This problem will guide you through developing a function to find the lowest common ancestor (LCA) of two nodes in a binary tree. Finding the LCA is a common problem that can help one understand more complex tree traversal and manipulation techniques. # Requirements 1. **Function Name**: `find_lca` 2. **Parameters**: - `root`: The root node of the binary tree (an instance of `TreeNode`). - `n1`: The first node for which to find the LCA (an instance of `TreeNode`). - `n2`: The second node for which to find the LCA (an instance of `TreeNode`). 3. **Returns**: - The lowest common ancestor of the two nodes (`n1` and `n2`) (an instance of `TreeNode`). 4. **Behavior**: - The function should traverse the binary tree and determine the lowest common ancestor by identifying the deepest node that has `n1` and `n2` as descendants. - A descendant node refers to any node located within the subtree rooted at a specific node, including that node itself. # TreeNode Class Definition Assume the tree nodes are defined as follows: ```python class TreeNode: def __init__(self, key): self.data = key self.left = None self.right = None ``` # Additional Requirements: - If either of the given nodes does not exist in the tree, the function should return `None`. # Example Usage: Given the following binary tree: ``` 3 / 5 1 / / 6 2 0 8 / 7 4 ``` The function call `find_lca(root, n1, n2)` should return the lowest common ancestor node for `n1` and `n2`. For example: ```python # Define the tree structure root = TreeNode(3) root.left = TreeNode(5) root.right = TreeNode(1) root.left.left = TreeNode(6) root.left.right = TreeNode(2) root.right.left = TreeNode(0) root.right.right = TreeNode(8) root.left.right.left = TreeNode(7) root.left.right.right = TreeNode(4) # Nodes to find the LCA for n1 = root.left # Node 5 n2 = root.left.right.right # Node 4 # Find the LCA lca = find_lca(root, n1, n2) print(lca.data) # Output should be 5 ```","solution":"class TreeNode: def __init__(self, key): self.data = key self.left = None self.right = None def find_lca(root, n1, n2): def find_lca_helper(node, n1, n2): if node is None: return None if node == n1 or node == n2: return node left_lca = find_lca_helper(node.left, n1, n2) right_lca = find_lca_helper(node.right, n1, n2) if left_lca and right_lca: return node return left_lca if left_lca else right_lca if not node_exists(root, n1) or not node_exists(root, n2): return None return find_lca_helper(root, n1, n2) def node_exists(root, node): if root is None: return False if root == node: return True return node_exists(root.left, node) or node_exists(root.right, node)"},{"question":"You are tasked with writing a function to parse a dataset of weather records and compute the average temperature for all cities in a specified month and year. The dataset is in CSV format, where each row contains data about a particular city for a specific date. The CSV has the following columns: - `city`: Name of the city - `date`: Date of the record in the format \'YYYY-MM-DD\' - `temp`: Temperature recorded on that date in Celsius You need to write a function `avg_temp_by_month_and_year(weather_filepath, month=\'01\', year=\'2020\')` that takes the file path of the weather dataset, a month, and a year as arguments, and returns the average temperature for all cities in the specified month and year. Your function must use the `csv.DictReader` class from the `csv` module to read the CSV file and the `mean` function from the `statistics` module to calculate the average temperature. Here\'s the function header for clarity: ```python def avg_temp_by_month_and_year(weather_filepath, month=\'01\', year=\'2020\'): pass ``` **Input:** - `weather_filepath` (str): The file path to the weather dataset CSV file. - `month` (str): The month for which the average temperature is calculated. Default is \'01\' (January). - `year` (str): The year for which the average temperature is calculated. Default is \'2020\'. **Output:** - (float): The average temperature of the specified month and year. **Example:** Assume the CSV file (weather.csv) has the following content: ```csv city,date,temp New York,2020-01-01,5.0 New York,2020-01-02,6.0 Los Angeles,2020-01-01,15.0 Los Angeles,2020-01-02,16.0 Chicago,2020-01-01,-1.0 Chicago,2020-01-02,0.0 ``` Calling the function: ```python avg_temp_by_month_and_year(\'weather.csv\', month=\'01\', year=\'2020\') ``` should return `6.833333333333333` (which is the average of 5.0, 6.0, 15.0, 16.0, -1.0, and 0.0).","solution":"import csv from statistics import mean def avg_temp_by_month_and_year(weather_filepath, month=\'01\', year=\'2020\'): Calculates the average temperature for all cities in a specified month and year. Args: weather_filepath (str): The file path to the weather dataset CSV file. month (str): The month for which the average temperature is calculated. Default is \'01\' (January). year (str): The year for which the average temperature is calculated. Default is \'2020\'. Returns: float: The average temperature of the specified month and year. temperatures = [] with open(weather_filepath, newline=\'\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: date = row[\'date\'] record_year, record_month, _ = date.split(\'-\') if record_year == year and record_month == month: temperatures.append(float(row[\'temp\'])) if temperatures: return mean(temperatures) else: return float(\'nan\') # No data available for the specified month and year"},{"question":"# Context: You are given a simple simulation of a task scheduler that handles multiple tasks with different priorities. Each task has a unique ID, a priority level, and a duration to complete. The scheduler operates in discrete time units, where in each unit it picks the highest priority task to execute. If two tasks have the same priority, it chooses the one that arrived first. # Task: Your task is to complete a function named **`task_scheduling`** that simulates the scheduling process for all tasks. Specifically, you will need to output the execution order of task IDs based on their priorities and the time they arrived in the system. # Inputs: - `tasks`: A list of tuples where each tuple contains three elements: - `task_id`: A unique identifier for the task (an integer). - `priority`: An integer representing the task\'s priority (higher number indicates higher priority). - `duration`: The duration (in time units) required to complete the task (an integer). # Function Signature: ```python def task_scheduling(tasks): pass ``` # Example: Suppose you have: ```python tasks = [ (1, 3, 2), # Task ID 1, priority 3, duration 2 (2, 2, 1), # Task ID 2, priority 2, duration 1 (3, 1, 3), # Task ID 3, priority 1, duration 3 (4, 3, 1) # Task ID 4, priority 3, duration 1 ] ``` The scheduler should produce the execution order of task IDs, considering priority first and the order of arrival second. # Output: The function should print the order in which task IDs are executed, one per line. # Example Output: ``` 1 1 4 2 3 3 3 ``` In this case, task ID `1` with priority `3` is executed for `2` time units, followed by task ID `4` with the same priority for `1` time unit. Task ID `2` is then executed next for `1` time unit as it has the next highest priority, and finally, task ID `3` is executed for `3` time units.","solution":"from collections import deque import heapq def task_scheduling(tasks): Simulates the scheduling process for tasks based on their priorities and arrival times. Args: tasks (list of tuples): Each tuple contains (task_id, priority, duration) Returns: list: The order of task IDs based on their execution schedule. # Create a priority queue based on priority and arrival time # We use a heap queue to maintain our priority queue pq = [] # Populate the priority queue with tasks for index, (task_id, priority, duration) in enumerate(tasks): heapq.heappush(pq, (-priority, index, task_id, duration)) result = [] # Process each task based on its priority and arrival time while pq: priority, index, task_id, duration = heapq.heappop(pq) for _ in range(duration): result.append(task_id) return result"},{"question":"You are responsible for developing a word frequency analyzer. For this purpose, you need to implement a function `word_frequency` that calculates the frequency of each word in a given text. The function should ignore case (e.g., \\"Word\\" and \\"word\\" should be counted as the same word) and exclude any punctuation from the words. To handle punctuation, you may use the `string.punctuation` constant. # Function Signature: ```python def word_frequency(text: str) -> dict: Args: text: A string representing the input text. Returns: A dictionary where the keys are unique words (in lowercase) from the text and the values are the corresponding frequency of those words. ``` # Constraints: - The input `text` will be a non-empty string. - Words are sequences of characters separated by whitespace. - All characters that are not alphabets should be excluded from words. # Example: ```python text = \\"Hello, World! World of code. Code, hello world!\\" result = word_frequency(text) # The expected result should be: # { # \\"hello\\": 2, # \\"world\\": 3, # \\"of\\": 1, # \\"code\\": 2 # } ``` Implement the `word_frequency` function to process the input text, sanitize the words, and compute their frequencies effectively.","solution":"import string def word_frequency(text: str) -> dict: Calculates the frequency of each word in the given text, ignoring case and excluding any punctuation. Args: text: A string representing the input text. Returns: A dictionary where the keys are unique words (in lowercase) from the text and the values are the corresponding frequency of those words. # Lowercase the text to handle case insensitivity text = text.lower() # Remove punctuation from the text translator = str.maketrans(\'\', \'\', string.punctuation) text = text.translate(translator) # Split the text into words words = text.split() # Calculate frequency of each word frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"You are tasked with creating a function named `find_pair_with_sum` that takes two parameters: a list of integers `nums` and an integer `target`. Your goal is to determine if there exists a pair of distinct integers in the list `nums` such that their sum is equal to `target`. If such a pair exists, return a tuple with these two integers; otherwise, return `None`. Here\'s how you should implement the function: 1. Iterate through the list of integers. 2. Use a set to keep track of the integers you have seen so far. 3. For each integer in the list, calculate the complement by subtracting the integer from the target. 4. Check if the complement exists in the set of seen integers. 5. If a valid pair is found, return the pair as a tuple (integer1, integer2). 6. If no such pair is found after iterating through the list, return `None`. **Constraints**: - The list `nums` will contain at least two integers and at most 100,000 integers. - Each integer in the list can be positive, negative, or zero. - The function should run in O(n) time complexity where n is the number of integers in the list. **Example 1**: ```python nums = [2, 7, 11, 15] target = 9 ``` **Result**: ```python (2, 7) ``` **Explanation**: 2 + 7 = 9 **Example 2**: ```python nums = [3, 2, 4] target = 6 ``` **Result**: ```python (2, 4) ``` **Explanation**: 2 + 4 = 6 **Example 3**: ```python nums = [3, 3] target = 6 ``` **Result**: ```python (3, 3) ``` **Explanation**: 3 + 3 = 6 The function `find_pair_with_sum` should return: ```python tuple or None ``` # Your Task: Implement the function `find_pair_with_sum(nums, target)`. Make sure to efficiently handle the pair search using a set for lookups. # Function Signature: ```python def find_pair_with_sum(nums: list, target: int) -> tuple: pass ```","solution":"def find_pair_with_sum(nums, target): Finds two distinct integers in nums that sum up to target. Args: nums (list): List of integers target (int): The target sum Returns: tuple: A tuple of two integers if a pair is found, otherwise None seen = set() for num in nums: complement = target - num if complement in seen: return (complement, num) seen.add(num) return None"},{"question":"You are tasked with writing a function that determines if a given string is a valid IPv4 address. The function named `is_valid_ipv4` should take a string input `ip`, representing the potential IPv4 address. An IPv4 address belongs to the format `x.x.x.x` where `x` is a number between 0 and 255 inclusive, and there are no leading zeros except for the number \'0\' itself. Function Signature: ```python def is_valid_ipv4(ip: str) -> bool: ``` # Input - A string `ip` representing the potential IPv4 address. # Output - A boolean value, `True` if the input string is a valid IPv4 address, otherwise `False`. # Example ```python is_valid_ipv4(\\"192.168.1.1\\") ``` This should output: ``` True ``` ```python is_valid_ipv4(\\"256.256.256.256\\") ``` This should output: ``` False ``` Use the following steps to implement the function: 1. Split the input string into four parts using the dot `.` as the delimiter. 2. Check if there are exactly four parts. 3. Ensure that each part is a number between 0 and 255 and does not have leading zeros (except for \'0\'). 4. Return `True` if all checks pass, otherwise return `False`. Additional Constraints: - The parts of the address should only contain numeric characters. - Each part must be checked to ensure valid range and non-leading zeros. This question assesses the ability to work with strings, conditionals and basic data validation in Python.","solution":"def is_valid_ipv4(ip: str) -> bool: Determines if the given string is a valid IPv4 address. parts = ip.split(\'.\') # Check if there are exactly 4 parts if len(parts) != 4: return False for part in parts: # Check if part is numeric and within the range 0-255 if not part.isdigit(): return False num = int(part) if num < 0 or num > 255: return False # Check for leading zeros if part != \\"0\\" and part.startswith(\\"0\\"): return False return True"},{"question":"Network Packet Analyzer You are tasked with creating a Python function to analyze network packets. You will be given a list of strings representing raw network packet data. Each packet string follows a specific format: \\"SRC_IP, DST_IP, PACKET_SIZE\\". Your goal is to compute the total number of packets, the total data transferred, a list of unique source IP addresses, and the average packet size. # Function Details **Function Name:** `analyze_packets` **Parameters:** 1. `packets`: A list of strings, where each string represents a network packet in the format \\"SRC_IP, DST_IP, PACKET_SIZE\\". **Returns:** 1. `total_packets`: An integer representing the total number of packets. 2. `total_data`: An integer representing the total data transferred (sum of PACKET_SIZE values). 3. `unique_src_ips`: A list of unique source IP addresses sorted in ascending order. 4. `average_packet_size`: A float value representing the average packet size. # Required Libraries - None (Built-in libraries only). # Tasks: 1. Parse each packet string to extract SRC_IP, DST_IP, and PACKET_SIZE. 2. Compute the total number of packets. 3. Compute the total data transferred. 4. Collect and sort the unique source IP addresses. 5. Compute the average packet size. Here is a general outline to guide your implementation: ```python def analyze_packets(packets): # Step 1: Initialize counters and set for unique source IPs # Step 2: Iterate through packets, parsing the data # Step 3: Update total_packets, total_data, and unique_src_ips # Step 4: Calculate the average packet size # Step 5: Return results # Your code here pass ``` # Example If the input is: ```python packets = [ \\"192.168.0.1, 192.168.0.2, 1500\\", \\"192.168.0.3, 192.168.0.4, 700\\", \\"192.168.0.1, 192.168.0.3, 1200\\" ] ``` The expected output would be: ```python total_packets = 3 total_data = 3400 unique_src_ips = [\\"192.168.0.1\\", \\"192.168.0.3\\"] average_packet_size = 1133.33 ```","solution":"def analyze_packets(packets): total_packets = 0 total_data = 0 unique_src_ips = set() for packet in packets: src_ip, dst_ip, packet_size = packet.split(\\", \\") total_packets += 1 total_data += int(packet_size) unique_src_ips.add(src_ip) if total_packets > 0: average_packet_size = total_data / total_packets else: average_packet_size = 0 sorted_unique_src_ips = sorted(unique_src_ips) return total_packets, total_data, sorted_unique_src_ips, round(average_packet_size, 2)"},{"question":"Simulate a basic checkout system in a store where customers can add items and their corresponding prices to a virtual cart. Implement functions to add an item, remove an item, view the total cost, and clear the cart. You should write self-contained code starting with: ``` class CheckoutSystem: ``` Implement the following methods: 1. `add_item(item_name: str, price: float) -> None`: Adds an item and its price to the cart. 2. `remove_item(item_name: str) -> None`: Removes the item from the cart. If the item does not exist, do nothing. 3. `view_total_cost() -> float`: Returns the total cost of all items in the cart. 4. `clear_cart() -> None`: Empties the cart. Example: ``` checkout = CheckoutSystem() checkout.add_item(\\"apple\\", 1.50) checkout.add_item(\\"banana\\", 2.00) print(checkout.view_total_cost()) # Outputs: 3.50 checkout.remove_item(\\"apple\\") print(checkout.view_total_cost()) # Outputs: 2.00 checkout.clear_cart() print(checkout.view_total_cost()) # Outputs: 0.0 ``` Constraints: 1. Item names are unique strings. 2. Prices are positive floating-point numbers. 3. The cart has no limit on the number of items.","solution":"class CheckoutSystem: def __init__(self): self.cart = {} def add_item(self, item_name: str, price: float) -> None: Adds an item and its price to the cart. self.cart[item_name] = price def remove_item(self, item_name: str) -> None: Removes the item from the cart. If the item does not exist, do nothing. if item_name in self.cart: del self.cart[item_name] def view_total_cost(self) -> float: Returns the total cost of all items in the cart. return sum(self.cart.values()) def clear_cart(self) -> None: Empties the cart. self.cart.clear()"},{"question":"Implement a function that takes a list of integers and an integer `n` and returns the list rotated to the right by `n` positions. You should consider both positive and negative values for `n`. For example: - With a list `[1, 2, 3, 4, 5]` and `n=2`, the expected output is `[4, 5, 1, 2, 3]`. - With the same list and `n=-2`, the expected output is `[3, 4, 5, 1, 2]`. The function should return: list: The rotated list. You should write self-contained code starting with: ``` def rotate_list(lst, n): ```","solution":"def rotate_list(lst, n): Rotates the elements of the list to the right by n positions. When n is negative, the rotation is to the left. if not lst: return lst n = n % len(lst) # handle rotations larger than list size and negative values return lst[-n:] + lst[:-n]"},{"question":"In this problem, you will use the Python `turtle` graphics library to draw a filled circle on the screen. The objective is to understand and apply the `turtle.begin_fill()`, `turtle.color()`, and `turtle.circle()` functions. You will be required to write a function named `draw_filled_circle` that takes the following arguments: - `x` (int): The x-coordinate of the center of the circle. - `y` (int): The y-coordinate of the center of the circle. - `radius` (int): The radius of the circle. - `fill_color` (str): The color used to fill the circle. The function will draw a circle at the specified position with the specified radius and filled with the specified color using the `turtle` graphics library. The circle should be centered at the coordinates `(x, y)`. # Function Signature ```python def draw_filled_circle(x: int, y: int, radius: int, fill_color: str) -> None: pass ``` # Example Usage ```python draw_filled_circle(0, 0, 50, \'red\') ``` This example would draw a red circle with a radius of 50 at the coordinates (0, 0). # Requirements You are required to use the `turtle.begin_fill()`, `turtle.color()`, and `turtle.circle()` functions as part of your solution. # Hints - Use `turtle.up()` and `turtle.goto()` to move the pen without drawing. - Use `turtle.down()` to start drawing. - Use `turtle.begin_fill()` before starting to draw the shape. - Use `turtle.end_fill()` after finishing the shape to fill it with the specified color. - Use `turtle.circle(radius)` to draw the circle with the specified radius.","solution":"import turtle def draw_filled_circle(x: int, y: int, radius: int, fill_color: str) -> None: Draw a filled circle with the center at (x, y), specified radius, and fill color. Args: x (int): The x-coordinate of the center of the circle. y (int): The y-coordinate of the center of the circle. radius (int): The radius of the circle. fill_color (str): The color used to fill the circle. Returns: None turtle.up() turtle.goto(x, y - radius) turtle.down() turtle.color(fill_color) turtle.begin_fill() turtle.circle(radius) turtle.end_fill() turtle.done()"},{"question":"You have been provided with a CSV dataset that contains information about students and their grades across various subjects. The dataset is named `students_grades.csv` and consists of the following columns: - `Name`: The name of the student. - `Math`: Grade in Mathematics (integer, ranging from 0 to 100). - `Science`: Grade in Science (integer, ranging from 0 to 100). - `English`: Grade in English (integer, ranging from 0 to 100). Your task is to implement a function called `calculate_grade_statistics`. This function should: 1. Read in the CSV file using `pandas.read_csv`. 2. Remove any rows where any of the grades are missing (NaN). 3. Calculate the following statistics for each subject: - Mean grade - Median grade - Standard deviation of grades 4. Return a dictionary where the keys are the subject names and the values are dictionaries containing the calculated statistics. Make sure to provide a clear and well-commented implementation. # Function Signature ```python import pandas as pd import numpy as np def calculate_grade_statistics(file_path): This function reads the CSV file \'students_grades.csv\', cleans the data, computes statistics for each subject, and returns a dictionary with the statistics. Parameters: file_path (str): The path to the CSV file. Returns: dict: A dictionary with subjects as keys and another dictionary of statistics as values. ... ``` # Example Given the file `students_grades.csv`, calling the function with its path should return a dictionary containing the mean, median, and standard deviation for each subject.","solution":"import pandas as pd import numpy as np def calculate_grade_statistics(file_path): This function reads the CSV file \'students_grades.csv\', cleans the data, computes statistics for each subject, and returns a dictionary with the statistics. Parameters: file_path (str): The path to the CSV file. Returns: dict: A dictionary with subjects as keys and another dictionary of statistics as values. # Read the CSV file into a pandas DataFrame df = pd.read_csv(file_path) # Remove any rows with missing grades df.dropna(inplace=True) # Initialize a dictionary to hold the statistics for each subject statistics = {} # List of subjects subjects = [\'Math\', \'Science\', \'English\'] # Calculate required statistics for each subject for subject in subjects: subject_stats = { \'mean\': df[subject].mean(), \'median\': df[subject].median(), \'std_dev\': df[subject].std() } statistics[subject] = subject_stats return statistics"},{"question":"You are tasked with creating a function named `generate_password` that generates a secure random password. The function should use Python\'s `random` and `string` libraries to build a password containing uppercase letters, lowercase letters, digits, and special characters. Here is the detailed description: 1. The function should accept an integer parameter `length` which specifies the total length of the generated password. 2. Ensure that the password contains at least one uppercase letter, one lowercase letter, one digit, and one special character. 3. The rest of the characters in the password should be chosen randomly from the combined set of uppercase letters, lowercase letters, digits, and special characters. 4. The function should return the generated password as a string. The function signature is: ```python def generate_password(length: int) -> str: ``` **Arguments:** - `length`: an integer representing the total length of the password. **Returns:** - A string representing the generated password. **Example:** ```python password = generate_password(12) print(password) # Example output: `aB1!dEfGhIjK` # Note: The actual output will vary each time the function is called due to its random nature. ``` **Requirements:** - Use `random.choice` to select each character for the password. - Ensure the password meets the minimum criteria of containing at least one character from each required set (uppercase, lowercase, digit, special character). - If `length` is less than 4, the function should raise a `ValueError` since it is impossible to include all character types in such a short password. You are encouraged to refer to the respective library documentation for `random` and `string` to ensure appropriate utilization of their functionalities.","solution":"import random import string def generate_password(length: int) -> str: if length < 4: raise ValueError(\\"Password length must be at least 4 characters to include all character types.\\") # Create sets of required characters uppercase = random.choice(string.ascii_uppercase) lowercase = random.choice(string.ascii_lowercase) digit = random.choice(string.digits) special = random.choice(string.punctuation) # Remaining characters all_characters = string.ascii_letters + string.digits + string.punctuation remaining_length = length - 4 remaining_chars = [random.choice(all_characters) for _ in range(remaining_length)] # Combine all characters and shuffle password_list = list(uppercase + lowercase + digit + special + \'\'.join(remaining_chars)) random.shuffle(password_list) # Convert the list to a string password = \'\'.join(password_list) return password"},{"question":"You are tasked with writing a Python function named `find_odd_occurrence` that takes a list of integers and returns the integer that occurs an odd number of times in the list. If no such integer exists, the function should return `None`. The function should handle cases where there might be multiple integers that occur an odd number of times by returning any one of them. **Function Signature:** ```python def find_odd_occurrence(arr: list) -> int: pass ``` To achieve this, you might find it helpful to use a dictionary to count the occurrences of each integer in the list. Example: ```python >>> find_odd_occurrence([1, 2, 3, 2, 3, 1, 3]) 3 >>> find_odd_occurrence([4, 5, 5, 4, 4]) None ``` The first example returns `3` because it appears 3 times, which is an odd number of times. The second example returns `None` because no integer in the list occurs an odd number of times.","solution":"def find_odd_occurrence(arr): Returns an integer that occurs an odd number of times in the list. If no such integer exists, returns None. count = {} for num in arr: if num in count: count[num] += 1 else: count[num] = 1 for num, cnt in count.items(): if cnt % 2 != 0: return num return None"},{"question":"You are tasked with writing a Python function that generates a bar plot for a given dataset. The function should utilize the `pandas` and `matplotlib` libraries to create a bar plot based on a user-specified column. The function should explicitly use the `pandas.DataFrame.groupby`, `pandas.DataFrame.sum`, and `matplotlib.pyplot.bar` APIs. Function Signature: ```python def barplot_sum(data, category_col, value_col): Creates a bar plot for a given DataFrame with the sum of values for a specified column grouped by a category column. Parameters: - data (pd.DataFrame): The dataset to be plotted. - category_col (str): The column name of the categories. - value_col (str): The column name of the values to be summed and plotted. Returns: None ``` Requirements: 1. Use the `pandas.DataFrame.groupby` function to group the data by the specified category column. 2. Use the `pandas.DataFrame.sum` function to sum the values in the specified column. 3. Use the `matplotlib.pyplot.bar` function to create the bar plot. 4. Set appropriate labels for the X and Y axes and a title for the plot. 5. Use the `matplotlib.pyplot.show` function to display the plot. Example: Given a Pandas DataFrame `df` with columns named `\'category\'` and `\'sales\'`, where you want to create a bar plot of the sum of `\'sales\'` for each `\'category\'`, you would call: ```python barplot_sum(df, \'category\', \'sales\') ``` This will generate and display a bar plot with categories on the X-axis and the sum of sales on the Y-axis.","solution":"import pandas as pd import matplotlib.pyplot as plt def barplot_sum(data, category_col, value_col): Creates a bar plot for a given DataFrame with the sum of values for a specified column grouped by a category column. Parameters: - data (pd.DataFrame): The dataset to be plotted. - category_col (str): The column name of the categories. - value_col (str): The column name of the values to be summed and plotted. Returns: None # Grouping data by category column and summing the value column grouped_data = data.groupby(category_col)[value_col].sum() # Creating the bar plot plt.bar(grouped_data.index, grouped_data.values) # Setting the labels and title plt.xlabel(category_col) plt.ylabel(f\\"Sum of {value_col}\\") plt.title(f\\"Sum of {value_col} by {category_col}\\") # Displaying the plot plt.show()"},{"question":"You are required to implement a function called `consecutive_duplicates` that collapses consecutive duplicate elements in a given list of integers, keeping only one instance of each consecutive sequence. This function effectively compresses sequences of the same number into a single occurrence of that number. Here\'s the detailed breakdown of your task: 1. **Function Signature**: ```python def consecutive_duplicates(nums: List[int]) -> List[int]: # Your implementation here pass ``` 2. **Parameters**: - `nums` (List[int]): The list of integers which may contain consecutive duplicates. 3. **Output**: - A list of integers where consecutive duplicate elements are collapsed into only one occurrence of that element. 4. **Example**: ```python # Example 1 nums = [1, 1, 2, 2, 2, 3, 3, 1, 1] print(consecutive_duplicates(nums)) # Output: [1, 2, 3, 1] # Example 2 nums = [4, 4, 4, 4, 4] print(consecutive_duplicates(nums)) # Output: [4] # Example 3 nums = [7, 8, 8, 8, 5] print(consecutive_duplicates(nums)) # Output: [7, 8, 5] ``` 5. **Requirements**: - Ensure the function handles both empty lists and lists with a single element correctly. - You **must not** use any additional libraries apart from the standard Python library. - The implementation should be efficient, focusing on iterating through the list just once.","solution":"from typing import List def consecutive_duplicates(nums: List[int]) -> List[int]: if not nums: return [] result = [nums[0]] # start with the first element for num in nums[1:]: if num != result[-1]: result.append(num) return result"},{"question":"** You are given a list of integers `nums` which represents a hypothetical sequence of stock prices where the i-th element is the stock price on day i. You are also given an integer `k` which represents the number of transactions you are allowed to make. A transaction consists of buying one share of the stock on day i and selling it on a later day j (where j > i). You need to write a function `max_profit` that finds the maximum profit you can achieve by making at most `k` transactions. If no profit is possible, return 0. The function should have the following signature: ```python def max_profit(nums: List[int], k: int) -> int: pass ``` **Example:** ```python >>> max_profit([3,2,6,5,0,3], 2) 7 ``` *Explanation:* Transaction 1: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Transaction 2: Buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. Total profit = 4 + 3 = 7 **Constraints:** * `0 <= len(nums) <= 10^5` * `0 <= k <= 100` * `0 <= nums[i] <= 10^4` **Hints:** - Utilize dynamic programming to keep track of the maximum profit at each day for different numbers of transactions. - Think about how to keep track of the minimum price to buy and the maximum price to sell for each transaction.","solution":"from typing import List def max_profit(nums: List[int], k: int) -> int: if not nums or k == 0: return 0 n = len(nums) if k >= n // 2: return sum(max(nums[i] - nums[i - 1], 0) for i in range(1, n)) dp = [[0] * n for _ in range(k + 1)] for i in range(1, k + 1): max_diff = -nums[0] for j in range(1, n): dp[i][j] = max(dp[i][j - 1], nums[j] + max_diff) max_diff = max(max_diff, dp[i - 1][j] - nums[j]) return dp[k][n - 1]"},{"question":"Write a function `calculate_optimal_route` that, given a grid representing a city map, finds the shortest path from the top-left corner to the bottom-right corner. The city map is a 2D list of integers where each integer represents the cost of entering that cell. You can only move to adjacent cells (right, down, left, up). The goal is to: 1. Implement a function that traverses the grid and computes the minimal cost path from the start to the end. 2. Use Dijkstra\'s algorithm or A* search algorithm to ensure optimality and efficiency. Function Signature: ```python def calculate_optimal_route(city_map: List[List[int]]) -> int: ... ``` # Example: Input: ```python city_map = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` Output: 7 Explanation: The path with the minimal cost is: 1 -> 3 -> 1 -> 1 -> 1 (1 + 3 + 1 + 1 + 1 = 7) # Constraints: 1. Assume that the city map grid is always non-empty and contains only positive integers. 2. The solution must efficiently handle grids up to 100x100 in size. 3. You must use the provided standard library functions and data structures, and implement the specified algorithms without using specialized pathfinding libraries.","solution":"import heapq def calculate_optimal_route(city_map): Finds the shortest path from the top-left corner to the bottom-right corner of the given city_map using Dijkstra\'s algorithm. :param city_map: List[List[int]] : 2D grid representing the city map :return: int : the minimal cost to travel from the top-left corner to the bottom-right corner if not city_map or not city_map[0]: return 0 rows, cols = len(city_map), len(city_map[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up min_heap = [(city_map[0][0], 0, 0)] # (cost, x, y) visited = set() while min_heap: cost, x, y = heapq.heappop(min_heap) if (x, y) in visited: continue visited.add((x, y)) if x == rows - 1 and y == cols - 1: return cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited: heapq.heappush(min_heap, (cost + city_map[nx][ny], nx, ny)) return float(\'inf\')"},{"question":"You are given a list of file paths, where each path represents a text file within a directory. Your task is to create a function named `process_text_files` that reads these text files, combines their content into a single string, cleans the text by removing punctuation and converting it to lowercase, tokenizes the cleaned text into individual words, calculates the frequency of each word, and returns the frequency distribution as a dictionary of words and their counts. Finally, save this distribution to a CSV file. # Details: 1. **File Reading**: Use the `open` function to read the content of each text file. Handle potential I/O errors gracefully. 2. **Combine Content**: Combine the content of all text files into a single string. 3. **Text Cleaning**: Implement a function `clean_text(text)` that removes all punctuation from the text and converts it to lowercase. 4. **Tokenization**: Implement a function `tokenize(text)` that splits the text into individual words. 5. **Word Frequency**: Implement a function `calculate_frequency(tokens)` that calculates the frequency of each word and returns a dictionary with words as keys and their counts as values. 6. **Save to CSV**: Use the `pandas.DataFrame.to_csv` method to save the frequency distribution to a CSV file named `word_frequency.csv`. # Function Definition: ```python import os import pandas as pd from collections import Counter import string def process_text_files(file_paths): Processes a list of text files and calculates word frequency. Parameters: - file_paths (list): List of file paths. Returns: - freq_dict (dict): Dictionary with words as keys and their frequency as values. def clean_text(text): # Remove punctuation and convert to lowercase return text.translate(str.maketrans(\'\', \'\', string.punctuation)).lower() def tokenize(text): # Split text into words return text.split() def calculate_frequency(tokens): # Calculate word frequency return dict(Counter(tokens)) combined_text = \\"\\" for file_path in file_paths: try: with open(file_path, \'r\', encoding=\'utf-8\') as file: combined_text += file.read() + \\" \\" except IOError as e: print(f\\"Error reading {file_path}: {e}\\") cleaned_text = clean_text(combined_text) tokens = tokenize(cleaned_text) freq_dict = calculate_frequency(tokens) # Convert dictionary to DataFrame and save to CSV freq_df = pd.DataFrame(list(freq_dict.items()), columns=[\'Word\', \'Frequency\']) freq_df.to_csv(\'word_frequency.csv\', index=False) return freq_dict ``` Ensure to adhere strictly to the specification for the design and implementation of this function. Handle potential errors in file reading gracefully and ensure the final word frequency dictionary is saved correctly to a CSV file.","solution":"import os import pandas as pd from collections import Counter import string def process_text_files(file_paths): Processes a list of text files and calculates word frequency. Parameters: - file_paths (list): List of file paths. Returns: - freq_dict (dict): Dictionary with words as keys and their frequency as values. def clean_text(text): # Remove punctuation and convert to lowercase return text.translate(str.maketrans(\'\', \'\', string.punctuation)).lower() def tokenize(text): # Split text into words return text.split() def calculate_frequency(tokens): # Calculate word frequency return dict(Counter(tokens)) combined_text = \\"\\" for file_path in file_paths: try: with open(file_path, \'r\', encoding=\'utf-8\') as file: combined_text += file.read() + \\" \\" except IOError as e: print(f\\"Error reading {file_path}: {e}\\") cleaned_text = clean_text(combined_text) tokens = tokenize(cleaned_text) freq_dict = calculate_frequency(tokens) # Convert dictionary to DataFrame and save to CSV freq_df = pd.DataFrame(list(freq_dict.items()), columns=[\'Word\', \'Frequency\']) freq_df.to_csv(\'word_frequency.csv\', index=False) return freq_dict"},{"question":"You are given a list of integers and your task is to find the length of the longest contiguous subarray where the difference between the maximum and minimum elements is less than or equal to a specified integer `limit`. Write a function `longest_subarray(arr, limit)` that takes two parameters: 1. `arr`: A list of integers. 2. `limit`: An integer that specifies the maximum allowed difference between the maximum and minimum elements of any subarray. The function should return the length of the longest contiguous subarray such that the absolute difference between the maximum and minimum values is less than or equal to `limit`. **Function Signature:** ```python def longest_subarray(arr: list, limit: int) -> int: ``` **Examples:** 1. `longest_subarray([8, 2, 4, 7], 4)` should return `2` because the longest subarray with difference within 4 is either `[8, 2]` or `[4, 7]`. 2. `longest_subarray([10, 1, 2, 4, 7, 2], 5)` should return `4` because the longest subarray with difference within 5 is `[2, 4, 7, 2]`. 3. `longest_subarray([4, 2, 2, 2, 4, 4, 2, 2], 0)` should return `3` because the longest subarray with difference within 0 is `[2, 2, 2]`. **Constraints:** - The length of `arr` is within the range of (1 leq text{len}(arr) leq 10^5). - Each element in `arr` is an integer within the range of (-10^9 leq text{arr[i]} leq 10^9). - `limit` is an integer within the range of (0 leq text{limit} leq 10^9). You need to ensure the solution is efficient to handle large inputs.","solution":"from collections import deque def longest_subarray(arr: list, limit: int) -> int: if not arr: return 0 min_deque = deque() max_deque = deque() left = 0 max_length = 0 for right in range(len(arr)): while min_deque and arr[right] < arr[min_deque[-1]]: min_deque.pop() while max_deque and arr[right] > arr[max_deque[-1]]: max_deque.pop() min_deque.append(right) max_deque.append(right) while arr[max_deque[0]] - arr[min_deque[0]] > limit: left += 1 if min_deque[0] < left: min_deque.popleft() if max_deque[0] < left: max_deque.popleft() max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a CSV file named `movies.csv` which contains information about different movies. The CSV file has the following columns: `movie_id`, `title`, `genre`, `revenue`, and `director`. You are required to calculate the average revenue generated by movies for each genre. Your task is to write a Python function named `average_revenue_by_genre` that takes no arguments, reads the data from the `movies.csv` file, and returns a Pandas DataFrame containing the genres and their corresponding average revenues, sorted in descending order of average revenue. # Requirements: 1. Your function must use the `pandas` library to read the CSV file. 2. The function should handle missing values appropriately by ignoring rows with missing values in the `revenue` column. 3. The returned DataFrame should have two columns: `\'genre\'` and `\'average_revenue\'`. **Function Signature:** ```python import pandas as pd def average_revenue_by_genre() -> pd.DataFrame: ... ``` # Input Details: - The data file is named: `movies.csv`. - Each row in the file represents a different movie and contains the following columns: `movie_id`, `title`, `genre`, `revenue`, and `director`. # Output Details: - A Pandas DataFrame with the following columns: `\'genre\'`, `\'average_revenue\'`. - `\'genre\'`: The genre of the movies as a string. - `\'average_revenue\'`: The average revenue of the movies for that genre. # Example: If you have the following data in `movies.csv`: ```csv movie_id,title,genre,revenue,director 1,Movie A,Action,1000000,Director X 2,Movie B,Comedy,750000,Director Y 3,Movie C,Action,500000,Director Z 4,Movie D,Comedy,,Director W 5,Movie E,Drama,200000,Director V ``` The expected output should reflect the average revenue per genre, sorted in descending order: | genre | average_revenue | | ------- | ---------------- | | Action | 750000.0 | | Comedy | 750000.0 | | Drama | 200000.0 |","solution":"import pandas as pd def average_revenue_by_genre() -> pd.DataFrame: # Read the CSV file into a DataFrame df = pd.read_csv(\'movies.csv\') # Drop rows where revenue is missing df = df.dropna(subset=[\'revenue\']) # Group by genre and calculate the average revenue avg_revenue_df = df.groupby(\'genre\')[\'revenue\'].mean().reset_index() # Rename the columns avg_revenue_df.columns = [\'genre\', \'average_revenue\'] # Sort the DataFrame by average revenue in descending order avg_revenue_df = avg_revenue_df.sort_values(by=\'average_revenue\', ascending=False) return avg_revenue_df"},{"question":"You are tasked with creating a function that analyzes a 2D grid representing a simplified version of the game Minesweeper. The grid contains three types of cells: - `\'E\'`: an empty cell. - `\'M\'`: a mine. - `XD`: a cell which has already been revealed and shows the number of adjacent mines. Your function should take the grid and a click position, process the click according to the following rules: 1. If the cell at the clicked position is a mine (\'M\'), change it to \'X\' indicating it has been revealed and the game is over. 2. If an empty cell (\'E\') is clicked, it needs to be revealed to display the number of adjacent mines. If there are no adjacent mines, it should reveal all neighboring cells recursively. 3. If a revealed number cell is clicked, no action is taken. Your task is to implement the function `update_board(board: List[List[str]], click: List[int]) -> List[List[str]]`. **Function Signature:** ```python def update_board(board: List[List[str]], click: List[int]) -> List[List[str]]: pass ``` **Input:** - `board`: A 2D list of strings representing the Minesweeper grid. - `click`: A list of two integers representing the position clicked in the format `[row, column]`. **Output:** - Returns a 2D list of strings representing the updated Minesweeper grid. **Examples:** ```python board = [[\'E\', \'E\', \'E\', \'E\', \'E\'], [\'E\', \'E\', \'M\', \'E\', \'E\'], [\'E\', \'E\', \'E\', \'E\', \'E\'], [\'E\', \'E\', \'E\', \'E\', \'E\']] click = [3, 0] print(update_board(board, click)) # Output: # [[\'B\', \'1\', \'E\', \'1\', \'B\'], # [\'B\', \'1\', \'M\', \'1\', \'B\'], # [\'B\', \'1\', \'1\', \'1\', \'B\'], # [\'B\', \'B\', \'B\', \'B\', \'B\']] click = [1, 2] print(update_board(board, click)) # Output: # [[\'E\', \'E\', \'E\', \'E\', \'E\'], # [\'E\', \'E\', \'X\', \'E\', \'E\'], # [\'E\', \'E\', \'E\', \'E\', \'E\'], # [\'E\', \'E\', \'E\', \'E\', \'E\']] ``` This problem will help in understanding how to work with 2D grids, recursive algorithms, and handling various cell-based states in the context of game logic.","solution":"from typing import List def update_board(board: List[List[str]], click: List[int]) -> List[List[str]]: def count_adjacent_mines(r, c): mine_count = 0 directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < len(board) and 0 <= nc < len(board[0]) and board[nr][nc] == \'M\': mine_count += 1 return mine_count def dfs(r, c): if r < 0 or r >= len(board) or c < 0 or c >= len(board[0]) or board[r][c] != \'E\': return adjacent_mines = count_adjacent_mines(r, c) if adjacent_mines > 0: board[r][c] = str(adjacent_mines) else: board[r][c] = \'B\' directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for dr, dc in directions: dfs(r + dr, c + dc) r, c = click if board[r][c] == \'M\': board[r][c] = \'X\' elif board[r][c] == \'E\': dfs(r, c) return board"},{"question":"You are given a grid of size `n x n` representing a city plan, where each cell can either contain water (represented by `\'W\'`) or land (represented by `\'L\'`). An island is formed by connecting adjacent lands horizontally or vertically. Given a map of the city, your task is to write a function `count_islands(city_map: List[List[str]]) -> int` that counts the number of islands in the city map. **Function signature:** ```python def count_islands(city_map: List[List[str]]) -> int: pass ``` **Input:** - `city_map` is a list of lists of strings, where each string is either `\'W\'` for water or `\'L\'` for land. **Output:** - The function should return an integer representing the number of islands. # Example: **Example 1:** ```python city_map = [ [\'L\', \'W\', \'W\', \'L\', \'L\'], [\'L\', \'L\', \'W\', \'W\', \'L\'], [\'W\', \'W\', \'W\', \'W\', \'W\'], [\'L\', \'L\', \'L\', \'L\', \'L\'], [\'W\', \'W\', \'L\', \'W\', \'W\'] ] print(count_islands(city_map)) # Output: 3 ``` **Example 2:** ```python city_map = [ [\'W\', \'W\', \'W\'], [\'W\', \'L\', \'W\'], [\'W\', \'W\', \'W\'] ] print(count_islands(city_map)) # Output: 1 ``` **Guidelines:** - You are expected to use Depth First Search (DFS) or Breadth First Search (BFS) to navigate through the islands. - An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. - You could mutate the input `city_map` to mark visited lands. # Constraints: - `1 <= n <= 100` where `n` is the length of one side of the square grid. - The grid may contain multiple islands.","solution":"def count_islands(city_map): Returns the number of islands in the city map. if not city_map: return 0 def dfs(city_map, x, y): # Base conditions if x < 0 or y < 0 or x >= len(city_map) or y >= len(city_map[0]) or city_map[x][y] != \'L\': return # Mark the land as visited city_map[x][y] = \'V\' # Recursively visit all adjacent lands dfs(city_map, x + 1, y) # Down dfs(city_map, x - 1, y) # Up dfs(city_map, x, y + 1) # Right dfs(city_map, x, y - 1) # Left island_count = 0 for i in range(len(city_map)): for j in range(len(city_map[0])): if city_map[i][j] == \'L\': # Perform DFS to mark the whole island dfs(city_map, i, j) island_count += 1 return island_count"},{"question":"Implement a function `rainwater_trap(heights)` that calculates the total amount of rainwater trapped between buildings represented by an array of non-negative integers. Each integer represents the height of a building, and the width of each building is 1. The function should adhere to the following specifications: - The `heights` parameter is a list of non-negative integers representing the height of the buildings. - Return an integer representing the total units of rainwater trapped. # Example: ```python heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] # Expected output: 6, because the total water trapped is represented by indices (2, 5, 6), (1, 4, 8) and (1, 10). print(rainwater_trap(heights)) # Output: 6 ``` **Function Signature:** ```python def rainwater_trap(heights: list) -> int: ... ``` # Constraints: - The length of the `heights` list is `n` and satisfies `0 <= n <= 10^4`. - Each element in the `heights` list is a non-negative integer within the range `[0, 10^4]`. **Hints:** 1. Use two pointers to traverse the heights array from both ends towards the middle. 2. Keep track of the maximum height from the left and right as you traverse and calculate the trapped water accordingly.","solution":"def rainwater_trap(heights: list) -> int: if not heights or len(heights) < 3: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] trapped_water = 0 while left < right: if heights[left] < heights[right]: left += 1 left_max = max(left_max, heights[left]) trapped_water += max(0, left_max - heights[left]) else: right -= 1 right_max = max(right_max, heights[right]) trapped_water += max(0, right_max - heights[right]) return trapped_water"},{"question":"Create a function that analyzes a given DataFrame of temperature readings and determines the longest streak of days with temperatures above a given threshold. The DataFrame has a column \'Temperature\' representing the daily temperatures. The function should return an integer representing the longest streak. You should write self-contained code starting with: ``` import pandas as pd def longest_streak(df, threshold): ```","solution":"import pandas as pd def longest_streak(df, threshold): Determine the longest streak of days with temperatures above a given threshold. Parameters: df (pd.DataFrame): DataFrame with a column \'Temperature\' containing daily temperature readings. threshold (float): The temperature threshold to evaluate. Returns: int: The longest streak of days with temperatures above the threshold. max_streak = 0 current_streak = 0 for temp in df[\'Temperature\']: if temp > threshold: current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 0 return max_streak"},{"question":"# Background In this problem, you need to create a Python function that simulates a basic bank account system. The function should support typical operations such as deposit, withdrawal, and balance inquiry. # Requirements Your task is to implement a function `bank_account_interface()` which performs the following: 1. **Initialize the account**: Set an initial balance of 0. 2. **Process transactions**: The function should be able to process a list of transactions where each transaction can be either a deposit, withdrawal, or balance inquiry. 3. **Handle Deposits**: Increase the balance by the deposit amount. 4. **Handle Withdrawals**: Decrease the balance by the withdrawal amount. If the balance is insufficient for the withdrawal, the withdrawal should not be processed, and an error message should be returned. 5. **Handle Balance Inquiries**: Return the current balance. The function should read a list of transactions, process them accordingly, and return a list of results for each transaction. If a deposit or withdrawal is successful, return `None`. For balance inquiries, return the current balance. If a withdrawal fails, return an error message: `\\"Insufficient funds\\"`. # Specifications 1. Each transaction in the list is a dictionary with a key `\\"type\\"` and additional keys as needed for the transaction type (\'deposit\', \'withdraw\', \'balance\'). 2. For deposits and withdrawals, the dictionary contains a key `\\"amount\\"` with a positive integer value. # Function Signature ```python def bank_account_interface(transactions): pass ``` # Example Input and Output Example 1 # Input ```python transactions = [ {\\"type\\": \\"deposit\\", \\"amount\\": 100}, {\\"type\\": \\"withdraw\\", \\"amount\\": 50}, {\\"type\\": \\"balance\\"}, {\\"type\\": \\"withdraw\\", \\"amount\\": 100}, {\\"type\\": \\"balance\\"} ] ``` # Output ```python [None, None, 50, \\"Insufficient funds\\", 50] ``` Example 2 # Input ```python transactions = [ {\\"type\\": \\"deposit\\", \\"amount\\": 200}, {\\"type\\": \\"balance\\"}, {\\"type\\": \\"withdraw\\", \\"amount\\": 150}, {\\"type\\": \\"balance\\"} ] ``` # Output ```python [None, 200, None, 50] ``` # Notes - The input list of transactions is processed sequentially. - Ensure proper handling of incorrect inputs or unknown transaction types by ignoring them.","solution":"def bank_account_interface(transactions): balance = 0 results = [] for transaction in transactions: if transaction[\\"type\\"] == \\"deposit\\": balance += transaction[\\"amount\\"] results.append(None) elif transaction[\\"type\\"] == \\"withdraw\\": if balance >= transaction[\\"amount\\"]: balance -= transaction[\\"amount\\"] results.append(None) else: results.append(\\"Insufficient funds\\") elif transaction[\\"type\\"] == \\"balance\\": results.append(balance) else: # Ignore unknown transaction types pass return results"},{"question":"In this problem, you are required to design a function `generate_fibonacci` that generates a Fibonacci sequence up to a specified length and returns it as a list. This problem helps in understanding how to implement iterative algorithms and manage sequences. Your function, `generate_fibonacci`, should accept one parameter: - `n` (int): The length of the Fibonacci sequence to generate. The Fibonacci sequence is defined as follows: - The first two numbers in the sequence are 0 and 1. - Each subsequent number is the sum of the previous two numbers in the sequence. Here is the template for the function you need to complete: ```python def generate_fibonacci(n): # Your code goes here pass ``` **Function Signature**: `def generate_fibonacci(n: int) -> list:` **Example**: - For `generate_fibonacci(5)`, the function should return `[0, 1, 1, 2, 3]`. - For `generate_fibonacci(10)`, the function should return `[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]`. **Constraints**: - `n` should be a non-negative integer. - If `n` is 0, the function should return an empty list. - Consider edge cases such as `n` being 1 or 2. To achieve the functionality, consider using a loop to iterate and generate subsequent numbers in the Fibonacci sequence based on the initial conditions and previously calculated values.","solution":"def generate_fibonacci(n): Generates a Fibonacci sequence of length n. Parameters: n (int): Length of the Fibonacci sequence to generate. Returns: list: The Fibonacci sequence as a list. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fibonacci_sequence = [0, 1] for _ in range(2, n): next_value = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_value) return fibonacci_sequence"},{"question":"You are required to write a Python function that simulates a basic calculator capable of performing addition, subtraction, multiplication, and division on two numbers. The calculator should handle both integer and floating-point inputs. Additionally, the function should be able to detect and handle division by zero. The defined function\'s name should be `basic_calculator`, and it should take three parameters: - `num1` (float): The first number. - `num2` (float): The second number. - `operation` (str): A string representing the operation to perform. Possible values are `\\"add\\"`, `\\"subtract\\"`, `\\"multiply\\"`, and `\\"divide\\"`. The function should return the result of the operation if it is valid, or an appropriate error message if an invalid operation is provided or if division by zero is attempted. Function Signature: ```python def basic_calculator(num1: float, num2: float, operation: str): pass ``` Example Usage: ```python result = basic_calculator(10, 5, \\"add\\") print(result) # Output: 15 result = basic_calculator(10, 5, \\"subtract\\") print(result) # Output: 5 result = basic_calculator(10, 5, \\"multiply\\") print(result) # Output: 50 result = basic_calculator(10, 5, \\"divide\\") print(result) # Output: 2.0 result = basic_calculator(10, 0, \\"divide\\") print(result) # Output: \\"Error: Division by zero\\" result = basic_calculator(10, 5, \\"modulus\\") print(result) # Output: \\"Error: Invalid operation\\" ```","solution":"def basic_calculator(num1, num2, operation): Simulates a basic calculator that can perform addition, subtraction, multiplication, and division on two numbers. Parameters: num1 (float): The first number. num2 (float): The second number. operation (str): The operation to perform. Possible values are \\"add\\", \\"subtract\\", \\"multiply\\", \\"divide\\". Returns: float or str: The result of the operation or an error message if an invalid operation is provided or division by zero is attempted. if operation == \\"add\\": return num1 + num2 elif operation == \\"subtract\\": return num1 - num2 elif operation == \\"multiply\\": return num1 * num2 elif operation == \\"divide\\": if num2 == 0: return \\"Error: Division by zero\\" return num1 / num2 else: return \\"Error: Invalid operation\\""},{"question":"You are asked to implement a function named `find_earliest_event` that takes a list of event dictionaries and returns the dictionary representing the earliest event based on its date. Each event dictionary contains two keys: `name` (a string) and `date` (a string in the format \\"YYYY-MM-DD\\"). If the list is empty, the function should return `None`. Function Signature ```python def find_earliest_event(events: list) -> dict: ``` Detailed Instructions: 1. If the input list `events` is empty, return `None`. 2. Iterate through the list of event dictionaries to find the event with the earliest date. 3. Use the `datetime` module to compare the dates. 4. Return the dictionary representing the earliest event. Example ```python events = [ {\\"name\\": \\"Conference\\", \\"date\\": \\"2023-09-10\\"}, {\\"name\\": \\"Board Meeting\\", \\"date\\": \\"2022-11-05\\"}, {\\"name\\": \\"Webinar\\", \\"date\\": \\"2023-01-15\\"} ] result = find_earliest_event(events) print(result) # Expected Output: # {\\"name\\": \\"Board Meeting\\", \\"date\\": \\"2022-11-05\\"} ``` Note: Ensure you handle dates accurately and consider edge cases such as lists containing events with similar dates.","solution":"from datetime import datetime def find_earliest_event(events): Returns the dictionary representing the earliest event based on its date. If the list is empty, returns None. Args: events (list): A list of event dictionaries with \'name\' and \'date\' keys. Returns: dict: The dictionary of the earliest event or None if the list is empty. if not events: return None earliest_event = min(events, key=lambda x: datetime.strptime(x[\'date\'], \\"%Y-%m-%d\\")) return earliest_event"},{"question":"You are required to implement a function `itinerary_stops` that calculates the stops an individual can make based on a given initial fuel capacity and a list of distances between subsequent stops. The goal is to determine the maximum number of stops the individual can make without running out of fuel. **Function Signature:** ```python def itinerary_stops(initial_fuel: int, distances: List[int]) -> int: Determine the maximum number of stops an individual can make with the given initial fuel capacity. :param initial_fuel: An integer representing the initial amount of fuel. :param distances: A list of integers representing the distances between subsequent stops. :return: An integer representing the maximum number of stops achievable without running out of fuel. ``` **Inputs:** - `initial_fuel` - An integer representing the initial fuel capacity. - `distances` - A list of integers where each integer represents the distance between each subsequent stop. **Output:** - An integer representing the maximum number of stops that can be made. **Constraints:** - If after a destination the remaining fuel is negative, the function should return the number of stops made so far. - The list `distances` will have at least one element. **Example:** ```python itinerary_stops(10, [3, 4, 2, 5, 7]) ``` Expected Output: ``` 3 ```","solution":"from typing import List def itinerary_stops(initial_fuel: int, distances: List[int]) -> int: Determine the maximum number of stops an individual can make with the given initial fuel capacity. :param initial_fuel: An integer representing the initial amount of fuel. :param distances: A list of integers representing the distances between subsequent stops. :return: An integer representing the maximum number of stops achievable without running out of fuel. stops = 0 for distance in distances: if initial_fuel >= distance: initial_fuel -= distance stops += 1 else: break return stops"},{"question":"You are tasked with writing a function named `find_missing_numbers` that identifies all the numbers missing from an unsorted array of integers within a given range `[1, n]`. The function should take the following parameters: - `arr`: A list of integers containing some numbers from the range `[1, n]`, where `n` is the length of the list plus the number of missing numbers. - `n`: An integer representing the upper bound of the range, inclusive. The function should return a sorted list of all the numbers between `1` and `n` that are not present in the array. **Guidelines:** - Do not use any additional libraries, such as `collections` or `itertools`. - The solution should have a time complexity of O(n). **Example:** ```python arr = [4, 3, 2, 7, 8, 2, 3, 1] n = 8 missing_numbers = find_missing_numbers(arr, n) print(missing_numbers) # Example output: [5, 6] ``` **Explanation:** - The input list `arr` has some repeating and some missing numbers within the range from `1` to `8`. - The function correctly identifies `5` and `6` as the missing numbers in the sequence.","solution":"def find_missing_numbers(arr, n): Returns a sorted list of all numbers between 1 and n that are not present in arr. arr: list of integers containing some numbers from the range [1, n] n: an integer representing the upper bound of the range, inclusive # Initialize a set with all numbers from 1 to n full_set = set(range(1, n + 1)) # Convert the array to a set to remove duplicates and for fast membership testing arr_set = set(arr) # Missing numbers are the difference between full_set and arr_set missing_numbers = list(full_set - arr_set) # Return the sorted list of missing numbers missing_numbers.sort() return missing_numbers"},{"question":"You are tasked with writing a function named `remove_duplicates_sorted_array(nums)` that removes duplicates from a sorted array in-place and returns the new length of the array. Each element should appear only once, and the relative order of the elements should be maintained. The function performs the following steps: 1. Iterates through the sorted array `nums` checking for duplicate elements. 2. If a duplicate is found, it removes that element and shifts the remaining elements to the left. 3. Returns the new length of the array after all duplicates have been removed. The function should have the signature: ```python def remove_duplicates_sorted_array(nums: list[int]) -> int: ``` **Requirements:** - You must not use extra space for another array. - You must modify the input array in-place with O(1) extra memory. - The input array is a sorted list of integers. Example: ```python nums = [0,0,1,1,1,2,2,3,3,4] new_length = remove_duplicates_sorted_array(nums) print(new_length) # Output: 5 print(nums[:new_length]) # Output: [0, 1, 2, 3, 4] ``` The function should be efficient and handle an array with any reasonable number of elements.","solution":"def remove_duplicates_sorted_array(nums: list[int]) -> int: Removes duplicates from a sorted array in-place and returns the new length. Each element should appear only once, and the relative order of the elements should be maintained. if not nums: return 0 # Initialize the index to the first element write_index = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"You are working on a data analysis project and need to implement a function `filter_and_aggregate(data, threshold)` that filters and processes a list of dictionaries. Each dictionary contains keys \'name\' (str), \'age\' (int), and \'score\' (float). The function should filter out dictionaries where the \'score\' is below the given threshold and then compute the average \'age\' and the total \'score\' of the remaining dictionaries. Your function should return a dictionary with two keys: \'average_age\' and \'total_score\', corresponding to the computed average age and total score respectively. If no dictionaries remain after filtering, return a dictionary with \'average_age\' set to 0 and \'total_score\' set to 0.0. Here are the specific requirements for your function: 1. Filter out dictionaries where \'score\' is below the given threshold. 2. Compute the average \'age\' of the remaining dictionaries. 3. Compute the total \'score\' of the remaining dictionaries. 4. Return the results as a dictionary with keys \'average_age\' and \'total_score\'. **Function signature:** ```python def filter_and_aggregate(data: list, threshold: float) -> dict: pass ``` Example Usage: ```python data = [ {\'name\': \'Alice\', \'age\': 30, \'score\': 85.0}, {\'name\': \'Bob\', \'age\': 25, \'score\': 75.0}, {\'name\': \'Charlie\', \'age\': 35, \'score\': 90.0} ] threshold = 80.0 result = filter_and_aggregate(data, threshold) print(result) # Output: {\'average_age\': 32.5, \'total_score\': 175.0} ``` Consider edge cases, such as when the data list is empty or when no dictionaries meet the threshold criteria.","solution":"def filter_and_aggregate(data, threshold): Filters the input data by the given score threshold and calculates the average age and total score of the remaining entries. Parameters: - data (list): A list of dictionaries, each containing \'name\', \'age\', and \'score\'. - threshold (float): The score threshold for filtering. Returns: - dict: A dictionary containing \'average_age\' and \'total_score\'. # Filter the data based on the score threshold filtered_data = [d for d in data if d[\'score\'] >= threshold] if not filtered_data: # If no entries remain after filtering, return zeros return {\'average_age\': 0, \'total_score\': 0.0} # Calculate the average age and total score total_age = sum(d[\'age\'] for d in filtered_data) total_score = sum(d[\'score\'] for d in filtered_data) average_age = total_age / len(filtered_data) return {\'average_age\': average_age, \'total_score\': total_score}"},{"question":"Given two lists representing the daily opening and closing prices of a stock, this function should compute the daily returns as a percentage change from the opening to the closing price for each day. It should return a list of daily returns rounded to two decimal places and plot these returns as a line graph with days on the x-axis and return percentages on the y-axis. The function should output with: tuple: A tuple containing: list: The list of daily return percentages. Axes: The line plot showing the daily return percentages. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt def calculate_daily_returns(opening_prices, closing_prices): ```","solution":"import matplotlib.pyplot as plt def calculate_daily_returns(opening_prices, closing_prices): Calculate daily returns as a percentage change from opening to closing price. Parameters: opening_prices (list of float): List of daily opening prices. closing_prices (list of float): List of daily closing prices. Returns: tuple: A tuple containing: list: The list of daily return percentages (rounded to two decimal places). Axes: The line plot showing the daily return percentages. if len(opening_prices) != len(closing_prices): raise ValueError(\\"Opening and closing prices lists must be of the same length\\") daily_returns = [] for open_price, close_price in zip(opening_prices, closing_prices): daily_return = ((close_price - open_price) / open_price) * 100 daily_returns.append(round(daily_return, 2)) fig, ax = plt.subplots() ax.plot(range(1, len(daily_returns) + 1), daily_returns, marker=\'o\', linestyle=\'-\') ax.set_xlabel(\'Day\') ax.set_ylabel(\'Daily Return (%)\') ax.set_title(\'Daily Stock Return Percentages\') return (daily_returns, ax)"},{"question":"Write a function `organize_photos()` that organizes photos in a given directory based on their creation dates. The photos should be moved into separate subdirectories named by their year and month. For instance, a photo taken in January 2023 should be moved into a subdirectory `/YYYY/MM`, such as `/2023/01`. **Requirements:** 1. Implement the function `organize_photos(dir_path)` which performs the following tasks: - Takes a directory path `dir_path` as an input. - Scans all files in the specified directory and retrieves their creation dates. - Creates subdirectories named by the year and month of each file. - Moves each file into the appropriate subdirectory based on its creation date. Use the following libraries: - `os` for directory and file manipulation. - `shutil` for moving files. - `datetime` for handling dates. **Function Signature:** ```python def organize_photos(dir_path): pass ``` **Example:** If the directory `/photos/` contains the files with creation dates: - IMG001.jpg (created on 2022-11-23) - IMG002.jpg (created on 2023-01-05) - IMG003.jpg (created on 2023-01-15) After executing the `organize_photos(\'/photos/\')` function, the directory structure should be: ``` /photos/ /2022/ /11/ IMG001.jpg /2023/ /01/ IMG002.jpg IMG003.jpg ``` **Notes:** - Print out the list of files before and after organizing them for verification. - Ensure to handle potential errors such as permission issues, non-existent directories, or files without accessible creation dates gracefully. - To get the date of file creation, you might need to handle platform specific methods (`os.path.getctime` for Unix-based systems or `os.path.getmtime` as an alternative).","solution":"import os import shutil from datetime import datetime def organize_photos(dir_path): Organizes photos in the given directory based on their creation dates. The photos are moved into separate subdirectories named by their year and month. :param dir_path: Path to the directory containing photos. # List all files in the directory files = [f for f in os.listdir(dir_path) if os.path.isfile(os.path.join(dir_path, f))] for file in files: file_path = os.path.join(dir_path, file) # Get the creation time of the file creation_time = datetime.fromtimestamp(os.path.getmtime(file_path)) year = creation_time.strftime(\'%Y\') month = creation_time.strftime(\'%m\') # Create directory path based on year and month target_dir = os.path.join(dir_path, year, month) if not os.path.exists(target_dir): os.makedirs(target_dir) # Move the file to the target directory shutil.move(file_path, os.path.join(target_dir, file))"},{"question":"Create a Python function `maximize_ones(matrix)` that finds the row in a binary matrix (contains only 0s and 1s) which has the maximum number of 1s and returns the index of that row. If there are multiple rows with the same number of 1s, return the smallest index. The function should take the following input: 1. `matrix`: A list of lists containing integers (0 or 1) representing the binary matrix. The function should: 1. Iterate through each row of the matrix to count the number of 1s. 2. Keep track of the row with the maximum number of 1s. 3. If a row with more 1s is found, update the maximum count and the corresponding index. 4. Return the index of the row with the maximum number of 1s. Example usage: ```python matrix = [ [0, 1, 1, 0], [1, 1, 1, 1], [0, 0, 0, 1], [1, 0, 1, 1] ] print(maximize_ones(matrix)) # Output: 1 ```","solution":"def maximize_ones(matrix): Returns the index of the row with the maximum number of 1s in a binary matrix. If there are multiple rows with the same number of 1s, returns the smallest index. :param matrix: List[List[int]], a list of lists containing 0s and 1s :return: int, the index of the row with the maximum number of 1s max_ones = -1 max_index = -1 for i, row in enumerate(matrix): ones_count = row.count(1) if ones_count > max_ones: max_ones = ones_count max_index = i return max_index"},{"question":"In this exercise, you are asked to work with linked lists in Python by implementing a function to detect and remove duplicates from a singly linked list. You will create a class `ListNode` that represents a node in the linked list and a function `remove_duplicates` that removes duplicates from the list while maintaining the original order. A linked list is a data structure in which each element (node) contains a reference (link) to the next element in the sequence. This problem will help you understand the basic operations and modifications that can be done on linked lists. # Specifications: 1. **ListNode Class**: Implement the `ListNode` class with an initializer and a `__str__` method to represent a node in the linked list. - The initializer should accept a value and initialize a `next` pointer to `None`. - The `__str__` method should return the string representation of the node\'s value. ```python class ListNode: def __init__(self, value): self.value = value self.next = None def __str__(self): return str(self.value) ``` 2. **remove_duplicates Function**: Implement the `remove_duplicates` function to remove duplicates from the linked list. - The function should accept the head of the linked list as an argument and return the head of the modified list. - You should only remove subsequent duplicates, keeping the first occurrence of each value. ```python def remove_duplicates(head: ListNode) -> ListNode: Removes duplicates from the linked list while maintaining the original order. Args: head: The head node of the singly linked list. Returns: The head of the linked list with duplicates removed. # Implement your code here ``` # Example: ```python # Example usage # Creating a linked list: 1 -> 2 -> 2 -> 3 -> 4 -> 4 -> 5 head = ListNode(1) head.next = ListNode(2) head.next.next = ListNode(2) head.next.next.next = ListNode(3) head.next.next.next.next = ListNode(4) head.next.next.next.next.next = ListNode(4) head.next.next.next.next.next.next = ListNode(5) # Removing duplicates new_head = remove_duplicates(head) # Printing the updated linked list current = new_head while current: print(current, end=\\" -> \\" if current.next else \\"n\\") current = current.next # Expected output # 1 -> 2 -> 3 -> 4 -> 5 ``` # Notes: - You are encouraged to test your code with additional cases to ensure its correctness. - Pay attention to edge cases, such as when the list is empty or contains only one node. - Assume the `ListNode` class implementation is provided as part of the question, and focus on the `remove_duplicates` function.","solution":"class ListNode: def __init__(self, value): self.value = value self.next = None def __str__(self): return str(self.value) def remove_duplicates(head: ListNode) -> ListNode: Removes duplicates from the linked list while maintaining the original order. Args: head: The head node of the singly linked list. Returns: The head of the linked list with duplicates removed. if not head: return head current = head seen = set([current.value]) # Initialize the set with the head value while current.next: if current.next.value in seen: current.next = current.next.next # Skip the duplicate node else: seen.add(current.next.value) current = current.next return head # Helper function to convert list to linked list for easier testing def list_to_linked_list(lst): if not lst: return None head = ListNode(lst[0]) current = head for value in lst[1:]: current.next = ListNode(value) current = current.next return head # Helper function to convert linked list to list for easier testing def linked_list_to_list(head): lst = [] current = head while current: lst.append(current.value) current = current.next return lst"},{"question":"You\'ve been asked to implement the Heap Sort algorithm, which is a comparison-based sorting technique based on a binary heap data structure. This sorting algorithm is known for its efficiency, with a time complexity of O(n log n). The goal of this problem is to implement the Heap Sort algorithm and sort an unsorted list of integers in ascending order. **Function Signature** ```python def heap_sort(arr): pass ``` **Parameters** * `arr` (list of int): The list of integers that needs to be sorted. **Returns** * `list of int`: The sorted list of integers in ascending order. **Requirements** 1. Construct a max heap from the unsorted list. 2. Perform Heap Sort to sort the list in ascending order. 3. Ensure the implementation handles the heapify process correctly. **Example** ```python unsorted_list = [3, 6, 5, 0, 8, 2, 1, 9] sorted_list = heap_sort(unsorted_list) print(sorted_list) ``` Expected Output: ``` [0, 1, 2, 3, 5, 6, 8, 9] ``` **Helper Functions** You might find it helpful to implement the following helper methods: * `heapify(arr, n, i)`: To maintain the heap property. * `build_max_heap(arr)`: To build a max heap from the input list.","solution":"def heapify(arr, n, i): Helper function to maintain the heap property. largest = i # Initialize largest as root left = 2 * i + 1 # left = 2*i + 1 right = 2 * i + 2 # right = 2*i + 2 # See if left child of root exists and is greater than root if left < n and arr[largest] < arr[left]: largest = left # See if right child of root exists and is greater than root if right < n and arr[largest] < arr[right]: largest = right # Change root, if needed if largest != i: arr[i], arr[largest] = arr[largest], arr[i] # Swap # Heapify the root. heapify(arr, n, largest) def build_max_heap(arr): Function to build a max heap from the input list. n = len(arr) # Build a max heap. # Since last parent will be at ((n//2)-1) we can start at that location. for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i) def heap_sort(arr): Function to sort an array of integers using Heap Sort algorithm. n = len(arr) # Build a max heap from the input list. build_max_heap(arr) # One by one extract elements from heap and place them at the end of the list. for i in range(n - 1, 0, -1): arr[i], arr[0] = arr[0], arr[i] # Swap heapify(arr, i, 0) return arr"},{"question":"Generate a list of even numbers within a given range. Use the list of even numbers to create a numpy array for the range and plot a bar chart of the first 10 even numbers against their indices using matplotlib. The function should output with: A tuple containing a numpy array of all even numbers within the specified range, and a Matplotlib Axes object showing the bar chart of the first 10 even numbers against their indices. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def task_func(start=0, end=100): ```","solution":"import numpy as np import matplotlib.pyplot as plt def task_func(start=0, end=100): Generates a numpy array of even numbers within a given range and plots a bar chart of the first 10 even numbers. Parameters: start (int): Starting range (inclusive) end (int): Ending range (exclusive) Returns: tuple: (numpy array of even numbers, Matplotlib Axes object) even_numbers = np.arange(start + (start % 2), end, 2) # Plotting the bar chart fig, ax = plt.subplots() ax.bar(np.arange(min(10, len(even_numbers))), even_numbers[:10]) ax.set_xlabel(\'Index\') ax.set_ylabel(\'Even Number\') ax.set_title(\'First 10 Even Numbers\') return even_numbers, ax"},{"question":"Create a function that reads a CSV file and calculates the average value of a specified column. The function should handle missing or non-numeric values gracefully. The function takes the file path and column name as input. It should return the average value of the specified column as a float. If the column does not exist or there are no valid numeric values, the function should return None. Example usage: ``` average = calculate_column_average(\'data.csv\', \'age\') print(average) ``` This should output the average age from the `data.csv` file. You should write self-contained code starting with: ``` import csv def calculate_column_average(file_path, column_name): ```","solution":"import csv def calculate_column_average(file_path, column_name): Calculates the average value of a specified column in a CSV file. Parameters: file_path (str): Path to the CSV file. column_name (str): Name of the column to calculate the average for. Returns: float: The average value of the column, or None if the column does not exist or there are no valid numeric values. total = 0 count = 0 try: with open(file_path, \'r\', newline=\'\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: try: value = float(row[column_name]) total += value count += 1 except (ValueError, KeyError): continue if count == 0: return None return total / count except (FileNotFoundError, IOError): return None"},{"question":"You are required to analyze a set of log files and summarize the results for further analysis. Your task is to create a function named `summarize_log_files` that reads multiple log files, extracts specific information, and writes the summarized data into a new CSV file named \'summary.csv\'. You will primarily use the `pandas` library for this task. Here are the detailed instructions: 1. Read all log files from a specified directory using the `glob` library. 2. Extract specific details such as the timestamp, log level, and message content. 3. Aggregate the logs by log level and count the number of occurrences for each log level. 4. Save the aggregated summary into \'summary.csv\'. Function Signature ```python def summarize_log_files(directory_path: str) -> None: # implementation goes here ``` Helper Function Descriptions: Assume the log files are in the following format: ``` [INFO] 2023-10-01 10:15:32,123 - This is an info message [ERROR] 2023-10-01 10:16:32,456 - This is an error message [WARNING] 2023-10-01 10:17:32,789 - This is a warning message ``` You need to extract \'INFO\', \'ERROR\', \'WARNING\', etc., as log levels, the timestamp, and the message content. 1. `extract_log_details(log_line)`: This function extracts and returns the log level, timestamp, and content from a single line of the log file. ```python def extract_log_details(log_line: str) -> Tuple[str, str, str]: # implementation goes here ``` # Example Usage: ```python summarize_log_files(\'logs_directory\') # This reads all log files from \'logs_directory\', processes the data, and writes \'summary.csv\'. ``` # Constraints: - Assume the log files are in text format and each line follows the format shown above. - Only use the `pandas` and `glob` libraries to solve the problem. - Handle cases where log files might contain missing or malformed entries gracefully. - The \'summary.csv\' should have two columns: \'Log Level\' and \'Count\'.","solution":"import pandas as pd import glob import re from typing import Tuple def extract_log_details(log_line: str) -> Tuple[str, str, str]: Extracts the log level, timestamp, and message from a log line. Args: log_line (str): A single line from the log file. Returns: Tuple[str, str, str]: A tuple containing the log level, timestamp, and message content. log_pattern = re.compile(r\'[(w+)] (d{4}-d{2}-d{2} d{2}:d{2}:d{2},d{3}) - (.*)\') match = log_pattern.match(log_line) if match: return match.group(1), match.group(2), match.group(3) else: return None, None, None def summarize_log_files(directory_path: str) -> None: Reads log files from the specified directory, extracts log details, and writes a summary to \'summary.csv\'. Args: directory_path (str): Path to the directory containing log files. log_files = glob.glob(f\'{directory_path}/*.log\') log_data = {\'Log Level\': [], \'Timestamp\': [], \'Message\': []} for log_file in log_files: with open(log_file, \'r\') as file: for line in file: log_level, timestamp, message = extract_log_details(line) if log_level and timestamp: log_data[\'Log Level\'].append(log_level) log_data[\'Timestamp\'].append(timestamp) log_data[\'Message\'].append(message) df = pd.DataFrame(log_data) summary = df[\'Log Level\'].value_counts().reset_index() summary.columns = [\'Log Level\', \'Count\'] summary.to_csv(\'summary.csv\', index=False)"},{"question":"In this problem, you are to implement a function called `analyze_cards` that simulates a simplified card matching game and analyzes the results. The game is played with a standard deck of 52 cards. You are given a list of pairs of cards, and you need to determine how many pairs are a match. A match is defined as both cards in the pair having the same rank (e.g., two Kings, two 7\'s, etc.), regardless of suit. The function will take one parameter: 1. `card_pairs`: a list of tuples, where each tuple contains two strings representing cards. Each string will be of the format `<rank><suit>`, where `<rank>` is one of \\"2\\", \\"3\\", \\"4\\", \\"5\\", \\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"10\\", \\"J\\", \\"Q\\", \\"K\\", or \\"A\\", and `<suit>` is one of \\"H\\", \\"D\\", \\"C\\", or \\"S\\" representing hearts, diamonds, clubs, and spades, respectively. Your task is to count and return the number of matching pairs. **Function Signature:** ```python def analyze_cards(card_pairs: list) -> int: ``` # Example ```python pairs = [(\'5H\', \'5D\'), (\'7C\', \'7S\'), (\'9H\', \'10H\'), (\'AH\', \'AS\'), (\'KC\', \'QD\')] print(analyze_cards(pairs)) ``` Expected output: ```python 3 ``` # Constraints - The card pairs list will have at least one pair. - Each card in a pair will follow the format specified and will be a valid card from a standard 52-card deck.","solution":"def analyze_cards(card_pairs): Analyzes a list of card pairs, counting how many pairs have matching ranks. Args: card_pairs (list of tuples): A list where each tuple contains two strings representing cards with format \'<rank><suit>\'. Returns: int: The number of matching pairs based on their ranks. matching_pairs = 0 for card1, card2 in card_pairs: rank1 = card1[:-1] # everything but the last character rank2 = card2[:-1] # everything but the last character if rank1 == rank2: matching_pairs += 1 return matching_pairs"},{"question":"**Problem Title: Calculating the Determinant of a Matrix using Recursion** You are required to write a function that computes the determinant of a square matrix using recursion. The determinant is a scalar value that can be computed from the elements of a square matrix and encodes certain properties of the matrix. **Function Signature:** ```python def calculate_determinant(matrix: List[List[float]]) -> float: ``` **Parameters:** - `matrix` (List[List[float]]): A 2D list representing a square matrix of size ( n times n ). **Returns:** - `float`: The determinant of the matrix. **Details:** 1. **Base Case:** - If the matrix is ( 1 times 1 ), return the single element. - If the matrix is ( 2 times 2 ), use the formula: [ text{det}(A) = ad - bc quad text{for} quad begin{pmatrix} a & b c & d end{pmatrix} ] 2. **Recursive Case:** - For larger matrices, use the Laplace expansion along the first row: [ text{det}(A) = sum_{i=1}^{n} (-1)^{i+1} cdot a_{1i} cdot text{det}(A_{1i}) ] Where ( A_{1i} ) is the submatrix formed by removing the first row and the ( i^{th} ) column. 3. **Helper Function:** - Implement a helper function to generate submatrices. **Example:** ```python matrix = [ [1, 2, 3], [0, 4, 5], [1, 0, 6] ] determinant = calculate_determinant(matrix) print(determinant) ``` Output: ``` 22.0 ```","solution":"from typing import List def get_submatrix(matrix: List[List[float]], excluding_row: int, excluding_col: int) -> List[List[float]]: Returns the submatrix by excluding the specified row and column. return [row[:excluding_col] + row[excluding_col + 1:] for row in (matrix[:excluding_row] + matrix[excluding_row + 1:])] def calculate_determinant(matrix: List[List[float]]) -> float: Returns the determinant of the given square matrix using recursion. n = len(matrix) # Base case for 1x1 matrix if n == 1: return matrix[0][0] # Base case for 2x2 matrix if n == 2: return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0] det = 0 for col in range(n): submatrix = get_submatrix(matrix, 0, col) det += ((-1) ** col) * matrix[0][col] * calculate_determinant(submatrix) return det"},{"question":"You are tasked with writing a function that calculates the sum of squares of all even numbers in a given list. Your goal is to write a function that meets the following requirements: 1. The function should be named `sum_of_even_squares`. 2. It must take in one parameter, `numbers`, which is a list of integers. 3. The function should return the sum of the squares of all even integers in the list. If there are no even integers, the function should return 0. Here are the steps to achieve the desired output: 1. Iterate through each number in the list. 2. Check if the number is even. 3. If the number is even, calculate its square and add it to a running total. 4. Return the running total after processing all numbers in the list. # Example ```python # Example usage print(sum_of_even_squares([1, 2, 3, 4])) # Output: 20 print(sum_of_even_squares([1, 3, 5])) # Output: 0 print(sum_of_even_squares([2, 4, 6])) # Output: 56 ``` In the first example, the even numbers are 2 and 4. Their squares are 4 and 16, respectively, summing to 20.","solution":"def sum_of_even_squares(numbers): Returns the sum of the squares of all even integers in the list. Parameters: numbers (list): List of integers. Returns: int: Sum of the squares of all even integers in the list. return sum(x**2 for x in numbers if x % 2 == 0)"},{"question":"You are required to write a function `generate_palindromic_substrings(s: str) -> List[str]` that generates and returns all unique palindromic substrings of the given string. Here’s what your function needs to do: 1. Read the input string `s`. 2. Identify all substrings of `s` that are palindromes. 3. Palindromes are strings that read the same forwards and backwards. 4. Ensure that each palindromic substring is included only once in the output list. 5. Return the resulting list of unique palindromic substrings sorted lexicographically. You may assume the input string contains only lowercase English letters. # Example: ```python s = \\"ababa\\" generate_palindromic_substrings(s) ``` Output: ```python [\'a\', \'aba\', \'ababa\', \'b\', \'bab\'] ```","solution":"def generate_palindromic_substrings(s: str): Generates and returns all unique palindromic substrings of the given string. def is_palindrome(sub): return sub == sub[::-1] palindromes = set() n = len(s) for i in range(n): for j in range(i + 1, n + 1): substring = s[i:j] if is_palindrome(substring): palindromes.add(substring) return sorted(palindromes)"},{"question":"**Title:** Evaluate Mathematical Expressions **Scenario:** You are developing a calculator application that needs to evaluate simple mathematical expressions provided by users. These expressions consist of non-negative integers and the basic arithmetic operators: addition (+), subtraction (-), multiplication (*), and division (/). The expressions are given as strings and may contain whitespace which should be ignored. Your task is to evaluate these expressions and return the result as a float. **Objective:** Write a function `evaluate_expression(expression: str) -> float` that takes a single string argument representing a mathematical expression. The function should parse the expression, evaluate it, and return the result as a float. You should adhere to the standard order of operations (PEMDAS/BODMAS). **Details:** 1. Remove any whitespace in the input expression to avoid parsing errors. 2. Use the `eval` function or an equivalent method to compute the result of the expression. 3. Return the evaluated result as a float. **Example:** ```python assert evaluate_expression(\\"3 + 5 * 2\\") == 13.0 assert evaluate_expression(\\"10 / 2 - 3\\") == 2.0 assert evaluate_expression(\\" 4 * ( 6 + 8 ) / 2 \\") == 28.0 assert evaluate_expression(\\"12 - 4 / 2 + 5 * 3\\") == 25.0 ``` **Constraints:** 1. The input string will always be a valid mathematical expression. 2. The expression will only contain non-negative integers and the basic arithmetic operators. 3. The division operator `/` will perform floating-point division. 4. Assume the input string does not exceed 100 characters. **Requirements:** You should ensure proper handling of operator precedence and parentheses to conform with mathematical standards.","solution":"def evaluate_expression(expression: str) -> float: Evaluates a mathematical expression given as a string and returns the result as a float. The expression may contain non-negative integers and the operators +, -, *, /, and parentheses. :param expression: A string representation of a mathematical expression :return: The evaluated result as a float # Remove any whitespace from the expression expression = expression.replace(\' \', \'\') # Use eval to evaluate the expression (possiable risk in real world, here we assume input is trusted) result = eval(expression) # Return the result as a float return float(result)"},{"question":"Write a function that generates a line plot for a given mathematical function over a specified range of x-values. The function should accept the mathematical function as a lambda expression, the range for x-values as a tuple (start, end), and the number of points to generate within this range. Additionally, label the x-axis, y-axis, and the plot title. The function should output: pandas.DataFrame: A DataFrame containing the x-values and their corresponding y-values with columns named \\"X\\" and \\"Y\\". matplotlib.axes.Axes: The Axes object of the plotted line plot. You should write a self-contained code starting with: ``` import pandas as pd import numpy as np import matplotlib.pyplot as plt def plot_function(func, x_range, num_points): ```","solution":"import pandas as pd import numpy as np import matplotlib.pyplot as plt def plot_function(func, x_range, num_points): Generates a line plot for a given mathematical function over a specified range of x-values. Parameters: func (callable): Mathematical function to plot. x_range (tuple): Range for x-values as a tuple (start, end). num_points (int): Number of points to generate within the range. Returns: pd.DataFrame: A DataFrame containing \'X\' and \'Y\' columns. matplotlib.axes.Axes: The Axes object of the plotted line plot. x_values = np.linspace(x_range[0], x_range[1], num_points) y_values = func(x_values) df = pd.DataFrame({\'X\': x_values, \'Y\': y_values}) fig, ax = plt.subplots() ax.plot(x_values, y_values) ax.set_xlabel(\'X\') ax.set_ylabel(\'Y\') ax.set_title(\'Plot of the given function\') return df, ax"},{"question":"You are required to write a Python function named `unique_email_addresses` that filters and counts unique email addresses from a list. The filtering rule is based on the following transformations: 1. Any \'.\' (dot) in the local part of the email address before the \'@\' symbol should be ignored. 2. Everything after a \'+\' (plus) sign in the local part should also be ignored. Assume the domain part (after \'@\') should remain unchanged. The function signature should be: ```python def unique_email_addresses(emails: List[str]) -> int: ``` - `emails`: A list of email addresses as strings. The function should return the number of unique email addresses after applying the mentioned transformations. # Example ```python emails = [\\"test.email+alex@leetcode.com\\", \\"test.e.mail+bob.cathy@leetcode.com\\", \\"testemail+david@lee.tcode.com\\"] # After transformations, the email addresses become: # \\"testemail@leetcode.com\\" # \\"testemail@leetcode.com\\" # \\"testemail@lee.tcode.com\\" # There are two unique email addresses: \\"testemail@leetcode.com\\" and \\"testemail@lee.tcode.com\\" # Expected output: 2 result = unique_email_addresses(emails) print(result) # Output: 2 ``` # Constraints - Assume that the input list will have at most 100 emails. - Each email address will be valid and follow the format \\"local@domain\\".","solution":"from typing import List def unique_email_addresses(emails: List[str]) -> int: unique_emails = set() for email in emails: local, domain = email.split(\'@\') local = local.split(\'+\')[0].replace(\'.\', \'\') unique_emails.add(local + \'@\' + domain) return len(unique_emails)"},{"question":"In this problem, you will implement a function to compute the edit distance, also known as the Levenshtein distance, between two strings. The edit distance is a way of quantifying how dissimilar two strings are by counting the minimum number of operations required to transform one string into the other. The possible operations are insertion, deletion, or substitution of a single character. The function you will write is `compute_edit_distance`. This function should use dynamic programming to efficiently compute the edit distance between the two input strings. Function Signature ```python def compute_edit_distance(str1, str2): Compute the edit distance between two strings. Args: - str1: A string representing the first input string. - str2: A string representing the second input string. Returns: - edit_distance: An integer representing the edit distance between the two input strings. ``` Detailed Steps 1. **Initialize a matrix:** Create a matrix `dp` where `dp[i][j]` represents the edit distance between the first `i` characters of `str1` and the first `j` characters of `str2`. 2. **Base cases:** Fill the first row and the first column of the matrix. If either string is empty, the edit distance is the length of the other string. 3. **Fill the matrix:** Use a nested loop to fill the matrix by computing the minimum cost of the three possible operations (insertion, deletion, substitution). 4. **Return the result:** The value in `dp[len(str1)][len(str2)]` is the edit distance between the two strings. Requirements 1. You should initialize a 2-D list (matrix) to store the DP table. 2. Use nested loops to fill in the DP table based on the recurrence relation. Example Usage: ```python str1 = \\"kitten\\" str2 = \\"sitting\\" print(compute_edit_distance(str1, str2)) # Output: 3 ``` The task is to implement the `compute_edit_distance` function according to the above instructions.","solution":"def compute_edit_distance(str1, str2): Compute the edit distance between two strings. Args: - str1: A string representing the first input string. - str2: A string representing the second input string. Returns: - edit_distance: An integer representing the edit distance between the two input strings. len1, len2 = len(str1), len(str2) # Initialize a matrix (dp table) of size (len1 + 1) x (len2 + 1) dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] # Fill the base cases for i in range(len1 + 1): dp[i][0] = i for j in range(len2 + 1): dp[0][j] = j # Fill the dp table using the recurrence relation for i in range(1, len1 + 1): for j in range(1, len2 + 1): if str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = min(dp[i-1][j] + 1, # Deletion dp[i][j-1] + 1, # Insertion dp[i-1][j-1] + 1) # Substitution return dp[len1][len2]"},{"question":"Apply principal component analysis (PCA) to reduce the dimensionality of a given dataset to two principal components and visualize the transformed data in a 2D scatter plot. The initial dataset consists of at least three features specified by columns feature1, feature2, and feature3. The function should output: - pca_result (numpy.ndarray): The transformed dataset with two dimensions. - fig (matplotlib.figure.Figure): The Figure object containing the 2D scatter plot, where the x-axis and y-axis represent the first and second principal components, respectively. You should write self-contained code starting with: ``` from sklearn.decomposition import PCA import matplotlib.pyplot as plt def task_func(df, feature1=\\"feature1\\", feature2=\\"feature2\\", feature3=\\"feature3\\"): ```","solution":"from sklearn.decomposition import PCA import matplotlib.pyplot as plt import pandas as pd def task_func(df, feature1=\\"feature1\\", feature2=\\"feature2\\", feature3=\\"feature3\\"): Applies PCA to reduce the dimensionality of the provided dataset to two principal components and visualizes the transformed data in a 2D scatter plot. Parameters: - df (pd.DataFrame): The input dataframe with at least three features. - feature1 (str): The column name of the first feature. - feature2 (str): The column name of the second feature. - feature3 (str): The column name of the third feature. Returns: - pca_result (np.ndarray): The transformed dataset with two dimensions. - fig (matplotlib.figure.Figure): The Figure object containing the 2D scatter plot. # Selecting the specified features from the dataframe selected_features = df[[feature1, feature2, feature3]] # Applying PCA to reduce the dimensionality to 2 components pca = PCA(n_components=2) pca_result = pca.fit_transform(selected_features) # Creating a scatter plot fig, ax = plt.subplots() ax.scatter(pca_result[:, 0], pca_result[:, 1]) ax.set_xlabel(\'Principal Component 1\') ax.set_ylabel(\'Principal Component 2\') ax.set_title(\'2D PCA Scatter Plot\') return pca_result, fig"},{"question":"In this exercise, you are required to create a function that will help in maintaining a running total of integers using Python generators. The main objective is to develop a generator function that yields the cumulative sum as new integers are sent to it using the `send` method. You need to: 1. Define a generator function named `running_total`. 2. Ensure that the generator keeps a cumulative sum of the integers it receives. 3. The generator should initially yield a total of `0`. 4. Each time a new integer is sent to the generator, it should update the cumulative sum and yield the updated total. **Function Signature:** ```python def running_total() -> Generator: ... ``` **Example Usage:** To test your generator function, you can interact with it using the `send` method to provide new integers for the cumulative sum. ```python gen = running_total() print(next(gen)) # Should print 0 print(gen.send(5)) # Should print 5 print(gen.send(10)) # Should print 15 print(gen.send(-3)) # Should print 12 print(gen.send(7)) # Should print 19 ``` Expected Behavior: - Initially, the generator yields `0`. - When `5` is sent, it yields `5`. - When `10` is sent, it adds to the previous total and yields `15`. - When `-3` is sent, it adjusts the total accordingly and yields `12`. - When `7` is sent, it adjusts the total accordingly and yields `19`.","solution":"def running_total(): Generator function that maintains a running total of integers. Initially yields 0. total = 0 while True: value = (yield total) if value is not None: total += value"},{"question":"In a game development environment, you often need to manage different entities, such as characters, NPCs (non-player characters), and objects. One common task is to determine whether a moving entity intersects with a rectangular region, which represents an obstacle or a region of interest. Your task is to write a function named **is_intersect** that takes six integer arguments representing the coordinates of a moving entity and a rectangular region: `x1, y1, x2, y2, rx1, ry1, rx2, ry2`. The `(x1, y1)` and `(x2, y2)` are the coordinates of the moving entity\'s start and end positions, respectively, while `(rx1, ry1)` and `(rx2, ry2)` define the bottom-left and top-right corners of the rectangular region. The function should return a boolean value indicating whether the moving entity\'s path intersects the rectangular region. # Function Signature: ```python def is_intersect(x1: int, y1: int, x2: int, y2: int, rx1: int, ry1: int, rx2: int, ry2: int) -> bool: pass ``` # Constraints: - The coordinates are all integer values. - The coordinates can be positive or negative integers. - The start and end positions of the moving entity are not necessarily aligned horizontally or vertically. - The rectangle sides are always parallel to the coordinate axes. # Example: ```python print(is_intersect(1, 1, 4, 4, 2, 2, 5, 5)) # Output: True print(is_intersect(-1, -1, -4, -4, -3, -3, -1, -1)) # Output: True print(is_intersect(0, 0, 1, 1, 2, 2, 3, 3)) # Output: False ``` # Additional Information: - Consider using the Line-Rectangle intersection algorithms. - You may find it helpful to break the problem down into smaller sub-problems, such as checking whether the line segment intersects with any of the rectangle\'s sides. - Edge cases to consider include when the entity moves along one of the rectangle\'s borders or when the entity is entirely inside or outside the rectangle without intersecting its edges.","solution":"def is_intersect(x1: int, y1: int, x2: int, y2: int, rx1: int, ry1: int, rx2: int, ry2: int) -> bool: Determines if a moving entity\'s path from (x1, y1) to (x2, y2) intersects with a rectangular region defined by the bottom-left corner (rx1, ry1) and the top-right corner (rx2, ry2). def on_segment(px, py, qx, qy, rx, ry): if (qx <= max(px, rx) and qx >= min(px, rx) and qy <= max(py, ry) and qy >= min(py, ry)): return True return False def orientation(px, py, qx, qy, rx, ry): val = (qy - py) * (rx - qx) - (qx - px) * (ry - qy) if val == 0: return 0 # collinear elif val > 0: return 1 else: return 2 def do_intersect(px1, py1, qx1, qy1, px2, py2, qx2, qy2): o1 = orientation(px1, py1, qx1, qy1, px2, py2) o2 = orientation(px1, py1, qx1, qy1, qx2, qy2) o3 = orientation(px2, py2, qx2, qy2, px1, py1) o4 = orientation(px2, py2, qx2, qy2, qx1, qy1) if o1 != o2 and o3 != o4: return True if o1 == 0 and on_segment(px1, py1, px2, py2, qx1, qy1): return True if o2 == 0 and on_segment(px1, py1, qx2, qy2, qx1, qy1): return True if o3 == 0 and on_segment(px2, py2, px1, py1, qx2, qy2): return True if o4 == 0 and on_segment(px2, py2, qx1, qy1, qx2, qy2): return True return False # Check if line intersects any of the 4 sides of the rectangle if (do_intersect(x1, y1, x2, y2, rx1, ry1, rx1, ry2) or # left side do_intersect(x1, y1, x2, y2, rx1, ry1, rx2, ry1) or # bottom side do_intersect(x1, y1, x2, y2, rx2, ry1, rx2, ry2) or # right side do_intersect(x1, y1, x2, y2, rx1, ry2, rx2, ry2)): # top side return True # Check if the line is completely inside the rectangle if (min(rx1, rx2) <= x1 <= max(rx1, rx2) and min(ry1, ry2) <= y1 <= max(ry1, ry2) and min(rx1, rx2) <= x2 <= max(rx1, rx2) and min(ry1, ry2) <= y2 <= max(ry1, ry2)): return True return False"},{"question":"You have been given a Pandas DataFrame containing information about product sales named `sales_df`. Your task is to create a function called `plot_product_sales_histogram` that generates a histogram of the total sales for each product category using Matplotlib. The DataFrame (`sales_df`) will contain the following columns: - `category`: The product category. - `sales`: The sales amount. Your function should perform the following steps: 1. **Group the DataFrame by the `category` column** and **sum the `sales`** for each category. 2. **Create a histogram** of these summed sales amounts. 3. Set the **bar color to green**. 4. Set the **x-axis label** to \\"Total Sales\\". 5. Set the **y-axis label** to \\"Number of Categories\\". 6. Set the **title** to \\"Histogram of Product Sales by Category\\". You should use the following Matplotlib functions in your implementation: - `matplotlib.pyplot.hist` - `matplotlib.pyplot.xlabel` - `matplotlib.pyplot.ylabel` - `matplotlib.pyplot.title` Here is the signature of the function you need to implement: ```python def plot_product_sales_histogram(sales_df): pass ``` Use the required Python libraries: - `matplotlib.pyplot` - `pandas`","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_product_sales_histogram(sales_df): Generate a histogram of the total sales for each product category using Matplotlib. Parameters: - sales_df (pd.DataFrame): DataFrame containing \'category\' and \'sales\' columns. Returns: None, but shows the histogram plot. # Group the DataFrame by \'category\' and sum the \'sales\' for each category sales_grouped = sales_df.groupby(\'category\')[\'sales\'].sum() # Create the histogram of the summed sales amounts plt.hist(sales_grouped, color=\'green\') # Set x-axis label plt.xlabel(\'Total Sales\') # Set y-axis label plt.ylabel(\'Number of Categories\') # Set title plt.title(\'Histogram of Product Sales by Category\') # Show the plot plt.show()"},{"question":"**Problem Statement:** Implement a Python function called `find_common_elements` that takes two lists of integers and returns a list of integers that are common to both lists, without any duplicates. The order of the elements in the final list should correspond to the order they appear in the first input list. Your task is to: 1. Iterate over the elements of the first list. 2. Check if each element of the first list is present in the second list and not already included in the result list. 3. Add the common elements to the result list, ensuring there are no duplicates. Your function should have the following signature: ```python def find_common_elements(list1: List[int], list2: List[int]) -> List[int]: ``` **Hint:** - Utilize Set data structure for efficient membership checks. - Preserve the order by appending to the result list only when an element from the first list is also in the second list and not already in the result list. **Example Usage:** ```python list1 = [1, 2, 2, 3, 4] list2 = [3, 4, 4, 5, 6] result = find_common_elements(list1, list2) print(result) # Should print: [3, 4] ``` ```python list1 = [10, 20, 30, 40, 50] list2 = [50, 40, 30, 20, 10] result = find_common_elements(list1, list2) print(result) # Should print: [10, 20, 30, 40, 50] ```","solution":"from typing import List def find_common_elements(list1: List[int], list2: List[int]) -> List[int]: Returns a list of integers that are common to both list1 and list2 without duplicates. The order of the elements in the final list corresponds to the order they appear in list1. set2 = set(list2) result = [] seen = set() for item in list1: if item in set2 and item not in seen: result.append(item) seen.add(item) return result"},{"question":"You are tasked with creating a Python function that generates a list of prime numbers up to a given number `n` using the Sieve of Eratosthenes algorithm. The function should return the list of prime numbers as its output. Specifically, implement a function named `generate_primes(n)` that: - Takes an integer `n` as input, which represents the upper limit (inclusive) up to which prime numbers should be generated. - Uses the Sieve of Eratosthenes algorithm to identify all prime numbers up to `n`. - Returns a list of all prime numbers less than or equal to `n`. The Sieve of Eratosthenes algorithm can be described as follows: 1. Create a list of boolean values `is_prime` indexed by numbers from 0 to `n`, all set to `True` initially, except for indices 0 and 1 which are set to `False` (since 0 and 1 are not prime). 2. Starting from the first prime number (2), mark all of its multiples as `False`. 3. Repeat the process for the next number in the list that is still `True`. 4. Continue until the square of the current number exceeds `n`. 5. The indices of the `True` values in the list `is_prime` correspond to the prime numbers. Here\'s the skeleton of your function: ```python def generate_primes(n): if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0], is_prime[1] = False, False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for multiple in range(i*i, n + 1, i): is_prime[multiple] = False return [i for i in range(n + 1) if is_prime[i]] # Example usage: n = 30 primes = generate_primes(n) print(primes) # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] ``` Make sure your solution correctly implements the Sieve of Eratosthenes algorithm and returns the list of prime numbers up to the given number `n`.","solution":"def generate_primes(n): if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0], is_prime[1] = False, False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for multiple in range(i*i, n + 1, i): is_prime[multiple] = False return [i for i in range(n + 1) if is_prime[i]] # Example usage: n = 30 primes = generate_primes(n) print(primes) # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"},{"question":"In this problem, you will learn how to manipulate data structures in Python, specifically dictionaries, and perform basic operations on them. You are given a function `calculate_totals` that takes a list of dictionaries representing transactions and returns total amounts spent per category. Each dictionary in the list represents a single transaction with the following format: ```python { \'category\': <category_name>, \'amount\': <transaction_amount> } ``` Where: - `<category_name>` is a string representing the category. - `<transaction_amount>` is a float representing the transaction amount. Your goal is to implement the `calculate_totals(transactions)` function to achieve this. # Requirements: 1. Iterate through each transaction in the list. 2. Sum up the amounts for each category. # Function Signature ```python def calculate_totals(transactions): Calculates total transaction amounts per category. Parameters: transactions (list) - A list of transaction dictionaries. Returns: dict - A dictionary with categories as keys and total amounts as values. ``` # Input: 1. `transactions` (list): A list of dictionaries, where each dictionary contains two keys: - `category` (string): The name of the transaction category. - `amount` (float): The amount spent. # Output: - Return a dictionary with categories as keys and the total amounts as values. # Example: ```python transactions = [ {\'category\': \'Food\', \'amount\': 10.5}, {\'category\': \'Utilities\', \'amount\': 40.75}, {\'category\': \'Food\', \'amount\': 20.25}, {\'category\': \'Entertainment\', \'amount\': 15.0}, {\'category\': \'Utilities\', \'amount\': 30.0}, ] result = calculate_totals(transactions) print(result) ``` Expected Output: ```python { \'Food\': 30.75, \'Utilities\': 70.75, \'Entertainment\': 15.0 } ```","solution":"def calculate_totals(transactions): Calculates total transaction amounts per category. Parameters: transactions (list) - A list of transaction dictionaries. Returns: dict - A dictionary with categories as keys and total amounts as values. totals = {} for transaction in transactions: category = transaction[\'category\'] amount = transaction[\'amount\'] if category in totals: totals[category] += amount else: totals[category] = amount return totals"},{"question":"Create a function named `analyze_text_repetition` that analyzes the repetition of words in a given text. The purpose of this function is to identify and display the words that are repeated more than a specified number of times. The `analyze_text_repetition` function should follow these specifications: 1. **Inputs**: - `text`: A string containing the input text to be analyzed. - `threshold`: An integer indicating the minimum number of times a word must appear in the text to be considered as repeated. 2. **Outputs**: - A dictionary where the keys are the words that appear more than `threshold` times in the text, and the values are the respective counts of those words. 3. **Functionality**: - Convert the text to lowercase to ensure that the word counting is case insensitive. - Remove punctuation from the text for accurate word counting. - Split the text into individual words. - Count the occurrences of each word and identify those that occur more than the `threshold` number of times. - Return a dictionary containing only the repeated words and their counts. Here is a suggested approach for implementing the function: ```python import string def analyze_text_repetition(text, threshold): # Your implementation here # Remove punctuation and convert text to lowercase translator = str.maketrans(\'\', \'\', string.punctuation) clean_text = text.translate(translator).lower() # Split the text into words words = clean_text.split() # Count the occurrences of each word word_counts = {} for word in words: word_counts[word] = word_counts.get(word, 0) + 1 # Identify words that are repeated more than the threshold repeated_words = {word: count for word, count in word_counts.values() if count > threshold} return repeated_words # Example usage text = \\"This is a sample sample text text text to test test the the the repetition analyzer analyzer analyzer analyzer.\\" threshold = 2 print(analyze_text_repetition(text, threshold)) ```","solution":"import string def analyze_text_repetition(text, threshold): Analyzes the repetition of words in a given text. Args: text (str): The input text to be analyzed. threshold (int): The minimum number of times a word must appear to be considered as repeated. Returns: dict: A dictionary with words as keys and their counts as values for words that appear more than threshold times. # Remove punctuation and convert text to lowercase translator = str.maketrans(\'\', \'\', string.punctuation) clean_text = text.translate(translator).lower() # Split the text into words words = clean_text.split() # Count the occurrences of each word word_counts = {} for word in words: word_counts[word] = word_counts.get(word, 0) + 1 # Identify words that are repeated more than the threshold repeated_words = {word: count for word, count in word_counts.items() if count > threshold} return repeated_words"},{"question":"You are given a list of sensor readings taken at different times throughout the day. Each reading includes a timestamp and a temperature value. Your task is to write a function `get_daily_average_temperature` that calculates the average temperature for each day. The input is a list of tuples, where each tuple contains a timestamp as a string in the format \\"YYYY-MM-DD HH:MM:SS\\" and a float representing the temperature. Your function should have the following signature: ```python from typing import List, Tuple, Dict def get_daily_average_temperature(readings: List[Tuple[str, float]]) -> Dict[str, float]: ``` **Parameters:** - `readings`: A list of tuples where each tuple contains a timestamp (str) and a temperature value (float). **Returns:** - A dictionary where the keys are dates in the format \\"YYYY-MM-DD\\" and the values are the average temperatures for each respective date. **Instructions:** 1. Parse the timestamps to extract the date. 2. Group the readings by date. 3. Compute the average temperature for each date. 4. Return a dictionary with the dates as keys and the average temperatures as values. Below are some expected outputs when using this function: ```python readings = [ (\\"2023-09-21 10:45:00\\", 22.5), (\\"2023-09-21 14:30:00\\", 25.0), (\\"2023-09-22 09:00:00\\", 18.0), (\\"2023-09-22 15:00:00\\", 20.5), (\\"2023-09-23 12:00:00\\", 21.0) ] averages = get_daily_average_temperature(readings) print(averages) # Output: {\'2023-09-21\': 23.75, \'2023-09-22\': 19.25, \'2023-09-23\': 21.0} ``` You can use Python\'s `datetime` library to parse the timestamps.","solution":"from typing import List, Tuple, Dict from collections import defaultdict import datetime def get_daily_average_temperature(readings: List[Tuple[str, float]]) -> Dict[str, float]: Calculate the average temperature for each day. Parameters: readings (List[Tuple[str, float]]): The list of sensor readings. Returns: Dict[str, float]: A dictionary with dates as keys and average temperatures as values. temp_by_date = defaultdict(list) for timestamp, temp in readings: date = timestamp.split(\' \')[0] temp_by_date[date].append(temp) avg_temp_by_date = {date: sum(temps)/len(temps) for date, temps in temp_by_date.items()} return avg_temp_by_date"},{"question":"You need to write a function `parse_log_file(file_path)` that accepts a file path to a log file as input. This log file contains multiple lines, each indicating an event that occurred, in the following format: ``` [YYYY-MM-DD HH:MM:SS] [EVENT_TYPE] Message describing the event ``` Where: - `[YYYY-MM-DD HH:MM:SS]` is the timestamp of the event. - `[EVENT_TYPE]` is one of `\\"INFO\\"`, `\\"WARNING\\"`, `\\"ERROR\\"`. - `Message describing the event` is a textual description of the event. The function should parse the log file and return a dictionary where: - The keys are the distinct `[EVENT_TYPE]` values, i.e., `\\"INFO\\"`, `\\"WARNING\\"`, and `\\"ERROR\\"`. - The values are lists of events (as strings) that correspond to each `[EVENT_TYPE]` in the order they appear in the file. # Function Signature: ```python def parse_log_file(file_path: str) -> dict: ... ``` # Example: ```python # Assume the following is the content of the \'log.txt\' file: # [2023-10-01 12:00:00] [INFO] System started. # [2023-10-01 12:05:00] [WARNING] Low disk space. # [2023-10-01 12:10:00] [ERROR] Disk read failure. file_path = \'log.txt\' print(parse_log_file(file_path)) # Expected output: # { # \\"INFO\\": [\\"[2023-10-01 12:00:00] [INFO] System started.\\"], # \\"WARNING\\": [\\"[2023-10-01 12:05:00] [WARNING] Low disk space.\\"], # \\"ERROR\\": [\\"[2023-10-01 12:10:00] [ERROR] Disk read failure.\\"] # } ``` # Constraints: - The log file may contain a large number of entries. - Each line in the file strictly follows the specified format. - The function should efficiently handle the parsing and categorization of the log entries.","solution":"def parse_log_file(file_path: str) -> dict: Parses the log file and returns a dictionary categorizing the events by their type. :param file_path: Path to the log file :return: Dictionary with event types as keys and lists of event strings as values event_dict = {\'INFO\': [], \'WARNING\': [], \'ERROR\': []} with open(file_path, \'r\') as file: for line in file: if \'[INFO]\' in line: event_dict[\'INFO\'].append(line.strip()) elif \'[WARNING]\' in line: event_dict[\'WARNING\'].append(line.strip()) elif \'[ERROR]\' in line: event_dict[\'ERROR\'].append(line.strip()) return event_dict"},{"question":"You are provided with a pandas DataFrame containing sales data with the columns: \'Date\', \'Product\', \'Sales\', and \'Cost\'. Your task is to write a function called `predict_future_sales` that performs the following steps: 1. Ensure the DataFrame is non-empty and contains the necessary columns. 2. Convert the \'Date\' column to datetime format and set it as the index. 3. Generate time-based features such as \'month\', \'day_of_week\', and \'year\' from the \'Date\' column. 4. Group the data by \'Product\' and resample the time series to a monthly frequency, filling any missing months with the mean sales of the corresponding product. 5. Split the data into training and test sets using the `sklearn.model_selection.train_test_split` function, ensuring the split is time-ordered. 6. Train a Random Forest Regressor model on the training set to predict the future \'Sales\' values. 7. Calculate and return the mean squared error of the predictions using `sklearn.metrics.mean_squared_error`. Function signature: ```python def predict_future_sales(data: pd.DataFrame) -> float: pass ``` Your solution should use relevant functions from the `pandas` and `sklearn` libraries. Ensure clear documentation of the steps and functions used to meet the requirements.","solution":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestRegressor from sklearn.metrics import mean_squared_error def predict_future_sales(data: pd.DataFrame) -> float: Predict future sales and calculate mean squared error. Parameters: data (pd.DataFrame): The input dataframe containing columns \'Date\', \'Product\', \'Sales\', and \'Cost\'. Returns: float: The mean squared error of the sales predictions. # Check if DataFrame is non-empty and contains the necessary columns if data.empty or not all(column in data.columns for column in [\'Date\', \'Product\', \'Sales\', \'Cost\']): raise ValueError(\\"DataFrame must be non-empty and contain \'Date\', \'Product\', \'Sales\', and \'Cost\' columns\\") # Convert the \'Date\' column to datetime format and set it as the index data[\'Date\'] = pd.to_datetime(data[\'Date\']) data.set_index(\'Date\', inplace=True) # Generate time-based features data[\'month\'] = data.index.month data[\'day_of_week\'] = data.index.dayofweek data[\'year\'] = data.index.year # Group by \'Product\' and resample to monthly frequency, filling missing months with mean sales def resample_product(product_df): product_df = product_df.resample(\'M\').mean() product_df[\'Sales\'].fillna(product_df[\'Sales\'].mean(), inplace=True) return product_df data = data.groupby(\'Product\').apply(resample_product).reset_index(level=\'Product\', drop=True) # Define features and target variable X = data[[\'month\', \'day_of_week\', \'year\', \'Cost\']] y = data[\'Sales\'] # Split the data into training and test sets, ensuring the split is time-ordered X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False) # Train a Random Forest Regressor model model = RandomForestRegressor() model.fit(X_train, y_train) # Predict future sales y_pred = model.predict(X_test) # Calculate and return mean squared error mse = mean_squared_error(y_test, y_pred) return mse"},{"question":"You are tasked with writing a function called `calculate_travel_cost` that takes three parameters: `flights_file` (a string representing the file path to a CSV containing flight information), `start_city` (a string representing the departure city), and `end_city` (a string representing the destination city). This function processes the CSV file to compute the total travel cost from the start city to the end city, considering direct and connecting flights. 1. Load the CSV file into a DataFrame using `pandas.read_csv`. 2. The CSV file has columns `source`, `destination`, `cost`. 3. Find all possible paths from `start_city` to `end_city`. A path can consist of multiple connecting flights. 4. Compute the total cost for each path. 5. If there are no valid paths, return `-1`. 6. If there are valid paths, return the minimum total travel cost among all paths. Here\'s the function definition to be implemented: ```python def calculate_travel_cost(flights_file, start_city, end_city): # Your implementation here pass ``` **Example:** Assume you have a CSV file named `flights.csv` with the following content: ``` source,destination,cost A,B,100 B,C,150 A,C,500 C,D,200 B,D,300 ``` Running `calculate_travel_cost(\'flights.csv\', \'A\', \'D\')` should return `450`, since the cheapest path is A -> B -> D with a total cost of 100 + 300 = 400. **Constraints:** - You can assume that the CSV files will always have valid data with columns `source`, `destination`, and `cost`. - There are no circular paths (i.e., no flights will create a loop). Feel free to use graph traversal algorithms like Depth-First Search (DFS) or Breadth-First Search (BFS) to find all possible paths from `start_city` to `end_city`.","solution":"import pandas as pd from collections import defaultdict, deque def calculate_travel_cost(flights_file, start_city, end_city): # Load the CSV file into a DataFrame df = pd.read_csv(flights_file) # Create a graph representation from the DataFrame flights = defaultdict(list) for _, row in df.iterrows(): flights[row[\'source\']].append((row[\'destination\'], row[\'cost\'])) # Use BFS to find all paths and their costs queue = deque([(start_city, 0)]) # (current city, current cost) min_cost = float(\'inf\') found_path = False while queue: current_city, current_cost = queue.popleft() # If we reach the destination city, update the min_cost if current_city == end_city: min_cost = min(min_cost, current_cost) found_path = True # Continue to explore the connected cities for next_city, cost in flights[current_city]: queue.append((next_city, current_cost + cost)) return min_cost if found_path else -1"},{"question":"Your task is to develop a function named `inventory_update` that updates an inventory list with a list of new supplies received. The input consists of two lists, where each list contains tuples. Each tuple has an item name and the quantity of the item in the current inventory or new supplies. The function should combine the counts for items that appear in both lists and return an updated inventory list. 1. **Identify unique items**: Identify all unique items from both the current inventory and the new supplies. 2. **Update or add items**: For each unique item, update the quantity by adding the count from the new supplies to the current inventory count. If an item is not in the current inventory, simply add it with its quantity from the new supplies. 3. **Return the updated inventory**: The function should return a list of tuples representing the updated inventory, sorted alphabetically by item name. Your function should make use of dictionary operations to efficiently update and combine the counts. The function signature should be: ```python def inventory_update(current_inventory: list, new_supplies: list) -> list: ``` Example: ```python current_inventory = [(\\"apple\\", 10), (\\"banana\\", 5), (\\"orange\\", 3)] new_supplies = [(\\"banana\\", 10), (\\"orange\\", 2), (\\"grape\\", 4)] # After executing inventory_update function, the updated_inventory should be: # [(\'apple\', 10), (\'banana\', 15), (\'grape\', 4), (\'orange\', 5)] ``` Constraints: - Item names are case-insensitive (e.g., \\"Apple\\" and \\"apple\\" are considered the same item and should be combined accordingly). - You may assume that the input lists have no duplicate items within themselves. - The input lists may be empty. Write the function `inventory_update` to perform the above steps.","solution":"def inventory_update(current_inventory: list, new_supplies: list) -> list: Updates the current inventory with new supplies. Combines counts for items that appear in both lists. Args: - current_inventory (list): List of tuples (item_name, quantity) representing the current inventory. - new_supplies (list): List of tuples (item_name, quantity) representing the new supplies. Returns: - list: Updated inventory list with combined counts, sorted alphabetically by item name. inventory = {} # Process current inventory for item, quantity in current_inventory: item_lower = item.lower() inventory[item_lower] = inventory.get(item_lower, 0) + quantity # Process new supplies for item, quantity in new_supplies: item_lower = item.lower() inventory[item_lower] = inventory.get(item_lower, 0) + quantity # Convert the dictionary back to a list of tuples and sort by item name updated_inventory = [(item, quantity) for item, quantity in sorted(inventory.items())] return updated_inventory"},{"question":"Write a function named `decrypt_caesar_cipher` that decrypts a given text encrypted using the Caesar Cipher technique. The function should take two parameters: 1. `ciphertext` (str): The encrypted text where every letter has been shifted by a specific number of places. 2. `shift` (int, default 3): The number of positions each letter in the ciphertext has been shifted by. The function should return the original text before encryption. Non-alphabetic characters should remain unchanged. The decrypting process of the Caesar Cipher involves shifting each letter in the ciphertext backward in the alphabet by the number of positions defined by the shift parameter. For example, if the ciphertext is \\"DOLFH\\" and the shift is 3, the original text should be \\"ALICE\\". Here is an example of what the function signature should look like: ```python def decrypt_caesar_cipher(ciphertext, shift=3): # Implementation here pass ``` Example: ```python print(decrypt_caesar_cipher(\\"DOLFH\\", 3)) # Output: ALICE ```","solution":"def decrypt_caesar_cipher(ciphertext, shift=3): Decrypts a given text encrypted using the Caesar Cipher technique. Parameters: ciphertext (str): The encrypted text. shift (int): The number of positions each letter in the ciphertext has been shifted by. Returns: str: The original text before encryption. decrypted_text = [] for char in ciphertext: if char.isalpha(): if char.isupper(): decrypted_text.append(chr((ord(char) - shift - 65) % 26 + 65)) elif char.islower(): decrypted_text.append(chr((ord(char) - shift - 97) % 26 + 97)) else: decrypted_text.append(char) return \'\'.join(decrypted_text)"},{"question":"You are given a dataset in the form of a Pandas DataFrame that includes a column with date information and another column with corresponding numerical data points. Your task is to write a function named `plot_time_series_with_trendline` that takes this DataFrame as input and generates a time series plot of the numerical data. Additionally, it should compute and overlay a trendline on the time series plot. The function should also include a title for the chart. **Function Signature:** ```python def plot_time_series_with_trendline(df: pd.DataFrame, date_col: str, value_col: str, title: str) -> None: pass ``` **Parameters:** - `df`: A pandas DataFrame that contains the data. - `date_col`: The name of the column in `df` that contains date information. - `value_col`: The name of the column in `df` which contains numerical data. - `title`: A string representing the title of the plot. **Requirements:** - Use `matplotlib.pyplot.show` to display the plot. - Use `matplotlib.pyplot.title` to set the title of the plot. - Use `numpy.polyfit` and `numpy.poly1d` to compute the trendline. - Ensure the x-axis displays dates appropriately. **Example:** ```python import pandas as pd import numpy as np import matplotlib.pyplot as plt data = { \'Date\': pd.date_range(start=\'1/1/2020\', periods=10, freq=\'M\'), \'Values\': [100, 120, 130, 150, 155, 160, 170, 180, 190, 210] } df = pd.DataFrame(data) def plot_time_series_with_trendline(df: pd.DataFrame, date_col: str, value_col: str, title: str) -> None: # Sort DataFrame by date_col in case it is not sorted df = df.sort_values(by=date_col) # Plot the time series data plt.figure(figsize=(10, 6)) plt.plot(df[date_col], df[value_col], label=\'Time Series Data\') # Compute the trendline x = np.arange(len(df)) y = df[value_col] trendline = np.poly1d(np.polyfit(x, y, 1))(x) # Add the trendline to the plot plt.plot(df[date_col], trendline, label=\'Trendline\', linestyle=\'--\', color=\'red\') # Add title and legend plt.title(title) plt.legend() # Show the plot plt.show() plot_time_series_with_trendline(df, \'Date\', \'Values\', \'Time Series Plot with Trendline\') ``` The function should generate and display a time series plot of the values with the trendline overlaid, including the appropriate title and legend.","solution":"import pandas as pd import numpy as np import matplotlib.pyplot as plt def plot_time_series_with_trendline(df: pd.DataFrame, date_col: str, value_col: str, title: str) -> None: Generates a time series plot with a trendline overlay. Parameters: df (pd.DataFrame): DataFrame containing the data. date_col (str): Name of the column in df that contains date information. value_col (str): Name of the column in df which contains numerical data. title (str): Title of the plot. # Sort DataFrame by date_col in case it is not sorted df = df.sort_values(by=date_col) # Plot the time series data plt.figure(figsize=(10, 6)) plt.plot(df[date_col], df[value_col], label=\'Time Series Data\') # Compute the trendline x = np.arange(len(df)) y = df[value_col] trendline = np.poly1d(np.polyfit(x, y, 1))(x) # Add the trendline to the plot plt.plot(df[date_col], trendline, label=\'Trendline\', linestyle=\'--\', color=\'red\') # Add title and legend plt.title(title) plt.legend() # Show the plot plt.show()"},{"question":"Write a Python function `filter_and_sort_words` that takes a list of strings and an integer `min_length` as inputs. The function should return a new list of strings from the input list that have a length greater than or equal to `min_length`, sorted in alphabetical order and converted to lowercase. Requirements: 1. Use list comprehensions to filter and transform the list. 2. Use the `sorted` function to sort the list alphabetically. # Example ```python filter_and_sort_words([\\"Hello\\", \\"world\\", \\"in\\", \\"Python\\", \\"code\\"], 5) ``` Given the input list: ``` [\\"Hello\\", \\"world\\", \\"in\\", \\"Python\\", \\"code\\"] ``` And `min_length` of 5, the function should return: ``` [\\"hello\\", \\"python\\", \\"world\\"] ``` # Implementation ```python def filter_and_sort_words(words, min_length): filtered = [word.lower() for word in words if len(word) >= min_length] return sorted(filtered) ```","solution":"def filter_and_sort_words(words, min_length): Filters the input list to include only words with length >= min_length, converts them to lowercase, and returns them sorted in alphabetical order. :param words: List of strings to be processed. :param min_length: The minimum length of words to be included in the result. :return: A list of filtered, lowercase, and alphabetically sorted words. filtered = [word.lower() for word in words if len(word) >= min_length] return sorted(filtered)"},{"question":"You are tasked with creating a function named `find_knapsack_items`, which solves a variation of the classic \\"Knapsack Problem.\\" The function will take three arguments: a list of items (each represented by a tuple with the item name, weight, and value), a maximum weight capacity for the knapsack, and a minimum total value to achieve. The function should return a list of item names that maximize the total value without exceeding the weight capacity and meeting or exceeding the minimum total value. If no such combination is possible, return an empty list. # Function Signature ```python def find_knapsack_items(items: list, max_weight: int, min_total_value: int) -> list: Finds a combination of items to include in the knapsack such that the total weight does not exceed max_weight and the total value meets or exceeds min_total_value. The goal is to maximize the total value of the items selected. Args: - items: A list of tuples, each tuple consists of (name: str, weight: int, value: int). - max_weight: An integer representing the maximum weight capacity of the knapsack. - min_total_value: An integer representing the minimum total value that needs to be achieved. Returns: - A list of item names representing the optimal combination that meets the requirements. ``` # Requirements - The function must efficiently compute the optimal set of items, using a dynamic programming approach or other suitable algorithms to handle the complexity. - Consider edge cases such as no items, all items exceeding the max weight individually, and no combination meeting the min total value. - Item names in the returned list should be unique and correspond to the input list\'s order for items with the same value.","solution":"def find_knapsack_items(items, max_weight, min_total_value): n = len(items) dp = [[-1] * (max_weight + 1) for _ in range(n + 1)] # Base case: no items or weight 0 for w in range(max_weight + 1): dp[0][w] = 0 for i in range(1, n + 1): name, weight, value = items[i - 1] for w in range(max_weight + 1): dp[i][w] = dp[i - 1][w] # Do not take this item if w >= weight and dp[i - 1][w - weight] != -1: dp[i][w] = max(dp[i][w], dp[i - 1][w - weight] + value) best_value = -1 for w in range(max_weight + 1): if dp[n][w] >= min_total_value and dp[n][w] > best_value: best_value = dp[n][w] if best_value == -1: return [] result = [] w = max_weight for i in range(n, 0, -1): name, weight, value = items[i - 1] if w >= weight and dp[i][w] == dp[i - 1][w - weight] + value: result.append(name) w -= weight return list(reversed(result))"},{"question":"You are given a string of lowercase letters. Your task is to reorder the characters of the string such that each character appears in the final output string at least `k` distance away from its previous occurrence. If it is not possible to generate such a string, return an empty string. Function Signature: `def rearrange_string(s: str, k: int) -> str:` **Parameters:** - `s`: A string of lowercase letters. - `k`: An integer representing the minimum distance between duplicate characters in the final string. **Returns:** - A string that rearranges the characters of the original string such that no two identical characters are less than `k` distance apart. Return an empty string if it is not possible to achieve this condition. **Examples:** 1. `rearrange_string(\\"aabbcc\\", 3)` - Returns: `\\"abcabc\\"` or `\\"acbacb\\"` or any valid permutation 2. `rearrange_string(\\"aaabc\\", 3)` - Returns: `\\"\\"` 3. `rearrange_string(\\"aaadbbcc\\", 2)` - Returns: `\\"abacabcd\\"` or any valid permutation **Note:** - The function should optimize for the longest possible result where the conditions are met. - If multiple valid results exist, any one of them can be returned. - The input string will consist only of lowercase English letters.","solution":"from collections import Counter, deque from heapq import heappop, heappush def rearrange_string(s: str, k: int) -> str: if k == 0: return s counter = Counter(s) max_heap = [(-freq, char) for char, freq in counter.items()] result = [] queue = deque() while max_heap: freq, char = heappop(max_heap) result.append(char) queue.append((char, freq + 1)) if len(queue) >= k: front_char, front_freq = queue.popleft() if front_freq < 0: heappush(max_heap, (front_freq, front_char)) return \'\'.join(result) if len(result) == len(s) else \'\'"},{"question":"Your task is to write a Python function `plot_training_loss(losses, iteration_step=1)` using the provided `matplotlib` library. This function will be used for visualizing the training loss of a machine learning model over multiple epochs. In this function, you need to plot the loss values over each epoch and annotate the plot with the minimum loss achieved. To complete this, you need to use the API methods from `matplotlib` as specified in the code snippet: - `matplotlib.pyplot.show` - `matplotlib.pyplot.plot` - `matplotlib.pyplot.annotate` - `matplotlib.pyplot.xlabel` - `matplotlib.pyplot.ylabel` - `matplotlib.pyplot.title` **Function Specification:** - **Function Name**: `plot_training_loss` - **Parameters**: - `losses`: A 1D list or numpy array of shape `(epochs,)` where each element represents the training loss at the corresponding epoch. - `iteration_step`: An integer representing the interval of epochs at which to annotate the plot with the loss values, default is 1. - **Returns**: This function does not return anything. It plots the training loss over epochs using `matplotlib`. **Notes:** 1. Use `matplotlib.pyplot.plot` to plot the training loss. 2. Use `matplotlib.pyplot.annotate` to add annotations to the plot at each `iteration_step`. 3. Use `matplotlib.pyplot.xlabel` to label the x-axis as \\"Epoch\\". 4. Use `matplotlib.pyplot.ylabel` to label the y-axis as \\"Training Loss\\". 5. Use `matplotlib.pyplot.title` to add a title \\"Training Loss Over Epochs\\". 6. Use `matplotlib.pyplot.show` to display the plot. 7. Make sure to disable interactive mode by calling `plt.interactive(False)` after showing the plot. Here is the function header: ```python def plot_training_loss(losses, iteration_step=1): import matplotlib.pyplot as plt epochs = range(1, len(losses) + 1) plt.plot(epochs, losses, label=\'Training Loss\') if iteration_step > 0: for i in range(len(losses)): if i % iteration_step == 0: plt.annotate(\'{:.4f}\'.format(losses[i]), (epochs[i], losses[i])) plt.xlabel(\'Epoch\') plt.ylabel(\'Training Loss\') plt.title(\'Training Loss Over Epochs\') plt.legend() plt.show() plt.interactive(False) ```","solution":"def plot_training_loss(losses, iteration_step=1): import matplotlib.pyplot as plt epochs = range(1, len(losses) + 1) plt.plot(epochs, losses, label=\'Training Loss\') min_loss = min(losses) min_epoch = losses.index(min_loss) + 1 if iteration_step > 0: for i in range(len(losses)): if i % iteration_step == 0 or losses[i] == min_loss: plt.annotate(\'{:.4f}\'.format(losses[i]), (epochs[i], losses[i])) plt.xlabel(\'Epoch\') plt.ylabel(\'Training Loss\') plt.title(\'Training Loss Over Epochs\') plt.legend() plt.show() plt.interactive(False)"},{"question":"Design a function called `generate_panoptic_summary` that takes a list of customer orders and produces a summary of the total items sold for each product category as well as detailed lists of item quantities by their types within each category. The function `generate_panoptic_summary` takes a single parameter: 1. `orders`: a list of customer order dictionaries. Each order dictionary contains product categories as keys, and each category maps to another dictionary with product types and their corresponding quantities. The function should return a dictionary where each key is a product category and each value is a tuple containing: 1. The total quantity of items sold in that category. 2. A dictionary with the quantities of each product type sold in that category. # Examples: ```python orders = [ { \'Beverages\': {\'Coke\': 3, \'Pepsi\': 5, \'Water\': 2}, \'Snacks\': {\'Chips\': 4, \'Cookies\': 6} }, { \'Beverages\': {\'Coke\': 2, \'Juice\': 4}, \'Snacks\': {\'Nuts\': 5, \'Chips\': 3} }, { \'Beverages\': {\'Water\': 6, \'Pepsi\': 1}, \'Snacks\': {\'Cookies\': 2} } ] summary = generate_panoptic_summary(orders) print(summary) ``` Expected Output: ``` { \'Beverages\': ( 23, {\'Coke\': 5, \'Pepsi\': 6, \'Water\': 8, \'Juice\': 4} ), \'Snacks\': ( 20, {\'Chips\': 7, \'Cookies\': 8, \'Nuts\': 5} ) } ``` # Constraints: - Each order contains valid categories and product quantities. - Assume categories and types are consistent across all orders. # Notes: - Focus on aggregating totals by combining quantities of the same product types across different orders. - The function needs to handle any number of orders and various products within the categories without duplication in calculations.","solution":"from collections import defaultdict def generate_panoptic_summary(orders): Produce a summary of the total items sold for each product category along with detailed lists of item quantities by their types within each category. Args: orders: list of dictionaries representing customer orders. Returns: dict where each key is a product category and each value is a tuple containing: - Total quantity of items sold in that category - Dictionary with quantities of each product type sold in that category summary = defaultdict(lambda: (0, defaultdict(int))) for order in orders: for category, items in order.items(): if category not in summary: summary[category] = (0, defaultdict(int)) category_total, item_quantities = summary[category] for item, quantity in items.items(): item_quantities[item] += quantity category_total += quantity summary[category] = (category_total, item_quantities) # Convert nested defaultdict to dict for more readable output result = {cat: (total, dict(items)) for cat, (total, items) in summary.items()} return result"},{"question":"In many scenarios, it is necessary to find the optimal divisions of elements, such as splitting an array into subarrays. One application of this is in partition-based dynamic programming problems. This problem will help you practice such partitioning along with efficient search algorithms. You are required to write a Python function `min_max_partition(arr, k)` that partitions an array into `k` contiguous subarrays such that the maximum sum among these subarrays is minimized. **Parameters**: - `arr` (List[int]): A list of integers representing the array to be partitioned. - `k` (int): The number of subarrays to partition the array into. **Return**: - `minimized_max_sum` (int): The minimized maximum sum among the subarrays formed by the optimal partitioning. The function should adhere to the following steps: 1. Implement a helper function to determine if a given sum can serve as an upper bound for the subarray sums, allowing partitioning into `k` or fewer subarrays. 2. Use binary search on the range from `max(arr)` to `sum(arr)` to find the smallest possible maximum subarray sum. 3. Ensure that the helper function uses a greedy approach to count subarrays, comparing cumulative sums against the mid-point of the binary search range. Use the following concepts in your implementation: binary search, greedy algorithm for partition validation. Here\'s a brief template to help you get started: ```python def can_partition(arr, k, mid): current_sum = 0 required_parts = 1 for num in arr: if current_sum + num > mid: required_parts += 1 current_sum = num if required_parts > k: return False else: current_sum += num return True def min_max_partition(arr, k): low, high = max(arr), sum(arr) while low < high: mid = (low + high) // 2 if can_partition(arr, k, mid): high = mid else: low = mid + 1 return low ``` In your implementation, ensure you handle arrays of different lengths and values, and accommodate various `k` values effectively.","solution":"def can_partition(arr, k, mid): current_sum = 0 required_parts = 1 for num in arr: if current_sum + num > mid: required_parts += 1 current_sum = num if required_parts > k: return False else: current_sum += num return True def min_max_partition(arr, k): low, high = max(arr), sum(arr) while low < high: mid = (low + high) // 2 if can_partition(arr, k, mid): high = mid else: low = mid + 1 return low"},{"question":"In this exercise, we aim to manipulate and analyze a 3D matrix filled with random integer values. The goal is to write a function `matrixAnalysis` that generates a 3D matrix, performs specific operations, and extracts meaningful data from it. Task: Implement the function `matrixAnalysis` with the following signature: ```python def matrixAnalysis(shape, min_val, max_val, operations): ``` Function Parameters: 1. `shape` (tuple): Specifies the dimensions of the 3D matrix `(x, y, z)`. 2. `min_val` (int): The minimum value for generating random integers in the matrix. 3. `max_val` (int): The maximum value for generating random integers in the matrix. 4. `operations` (list): A list of operations to perform on the matrix. Each operation is a dictionary specifying: - `\'type\'`: The type of operation (`\'sum\'`, `\'mean\'`, or `\'std\'`). - `\'axis\'`: The axis along which to perform the operation (`0`, `1`, or `2`). Requirements: - Use `numpy` to generate the 3D matrix with random integers within the specified range. - Perform the specified operations on the matrix along the given axes. - Return a dictionary where: * Keys are the combination of operation type and axis (e.g., `\'sum_0\'`). * Values are the results of the operations as numpy arrays. Example Input: ```python shape = (4, 4, 4) min_val = 1 max_val = 10 operations = [{\'type\': \'sum\', \'axis\': 0}, {\'type\': \'mean\', \'axis\': 1}, {\'type\': \'std\', \'axis\': 2}] ``` Example Output: ```python {\'sum_0\': array([...]), \'mean_1\': array([...]), \'std_2\': array([...])} ``` #","solution":"import numpy as np def matrixAnalysis(shape, min_val, max_val, operations): # Generate the 3D matrix with random integers within the specified range matrix = np.random.randint(min_val, max_val + 1, size=shape) # Dictionary to store the results of the operations results = {} # Iterate through each operation and perform it on the matrix for op in operations: op_type = op[\'type\'] op_axis = op[\'axis\'] key = f\\"{op_type}_{op_axis}\\" if op_type == \'sum\': results[key] = np.sum(matrix, axis=op_axis) elif op_type == \'mean\': results[key] = np.mean(matrix, axis=op_axis) elif op_type == \'std\': results[key] = np.std(matrix, axis=op_axis) else: raise ValueError(f\\"Unsupported operation type: {op_type}\\") return results"},{"question":"In this problem, you are tasked with creating a function called `generate_fibonacci_graph` that uses the `matplotlib` library to generate a graphical representation of the Fibonacci sequence up to a certain number of terms specified by the user. The program should: 1. Calculate the Fibonacci sequence up to the given number of terms. 2. Plot the sequence on a graph where the x-axis represents the term index, and the y-axis represents the Fibonacci number. 3. Display the graph with appropriate labels and a title. The function `generate_fibonacci_graph` should take a single argument `num_terms`, which represents the number of terms in the Fibonacci sequence to calculate and plot. # Requirements: - Function Name: `generate_fibonacci_graph` - Parameter: `num_terms` (int) - The number of terms to calculate and plot in the Fibonacci sequence, must be a positive integer. - Use the `matplotlib.pyplot` library to create and display the graph. - Label the x-axis as \\"Term Index\\" and the y-axis as \\"Fibonacci Number\\". - Title the graph \\"Fibonacci Sequence\\". # Example: ```python generate_fibonacci_graph(10) ``` This should generate a graph displaying the first 10 terms of the Fibonacci sequence, with properly labeled axes and a title. # Notes: - The graph should clearly show the growth of the Fibonacci sequence. - Ensure the Fibonacci sequence calculation is efficient for larger values of `num_terms`. - The graph must be displayed using `matplotlib.pyplot.show()`.","solution":"import matplotlib.pyplot as plt def generate_fibonacci_graph(num_terms): Calculates the Fibonacci sequence up to the given number of terms and plots the sequence. Parameters: num_terms (int): The number of terms to calculate and plot in the Fibonacci sequence. if num_terms < 1: raise ValueError(\\"num_terms must be a positive integer.\\") # Calculate the Fibonacci sequence up to num_terms fibonacci_sequence = [0, 1] for i in range(2, num_terms): fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2]) # Prepare the data for plotting x_values = list(range(num_terms)) y_values = fibonacci_sequence[:num_terms] # Plot the Fibonacci sequence plt.plot(x_values, y_values, marker=\'o\') plt.xlabel(\\"Term Index\\") plt.ylabel(\\"Fibonacci Number\\") plt.title(\\"Fibonacci Sequence\\") plt.grid(True) plt.show()"},{"question":"You are required to write a function `rotate_matrix(matrix)` that rotates a given N x N matrix 90 degrees clockwise. The function should modify the input matrix in place and return `None`. Your task is to: 1. Validate the input to ensure it is a square matrix (NxN). 2. Perform the 90-degree clockwise rotation by moving the elements in layers, starting from the outermost layer and working inwards. 3. Modify the input matrix in place and do not use any extra space for another matrix. Here is the precise function signature: ```python def rotate_matrix(matrix): pass ``` Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) print(matrix) # Output should be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` Constraints: - The elements of the matrix can be any integers. - You can assume the matrix will always be non-empty.","solution":"def rotate_matrix(matrix): Rotates the given NxN matrix 90 degrees clockwise in place. n = len(matrix) for layer in range(n // 2): first = layer last = n - layer - 1 for i in range(first, last): offset = i - first # Save the top element top = matrix[first][i] # Move left element to top matrix[first][i] = matrix[last - offset][first] # Move bottom element to left matrix[last - offset][first] = matrix[last][last - offset] # Move right element to bottom matrix[last][last - offset] = matrix[i][last] # Assign top element to right matrix[i][last] = top"},{"question":"Write a Python function that simulates a simple banking system. The function should allow users to create bank accounts, deposit money, withdraw money, and check their balance. Each account should be identified by a unique account number. Your function should be named `banking_system` and it should offer the following operations: 1. Create a new account with an initial balance (if provided) and return the account number. 2. Deposit a specified amount into an existing account. 3. Withdraw a specified amount from an existing account if sufficient funds are available. 4. Check the balance of a specified account. The function should use a dictionary to store account information, where the keys are account numbers and the values are the corresponding balances. Requirements: - Use a class named `Bank` to encapsulate the banking operations. - The `create_account` method should generate a new account number (sequentially starting from 1000) and set the balance. - The `deposit` method should add funds to the specified account. - The `withdraw` method should deduct funds from the specified account if there are sufficient funds available, otherwise, it should raise an `InsufficientFundsException`. - The `check_balance` method should return the current balance of the specified account. Here is the function signature and the exception class: ```python class InsufficientFundsException(Exception): pass class Bank: def __init__(self): self.accounts = {} self.next_account_number = 1000 def create_account(self, initial_balance=0): # Your code here def deposit(self, account_number, amount): # Your code here def withdraw(self, account_number, amount): # Your code here def check_balance(self, account_number): # Your code here ```","solution":"class InsufficientFundsException(Exception): pass class Bank: def __init__(self): self.accounts = {} self.next_account_number = 1000 def create_account(self, initial_balance=0): account_number = self.next_account_number self.accounts[account_number] = initial_balance self.next_account_number += 1 return account_number def deposit(self, account_number, amount): if account_number in self.accounts: self.accounts[account_number] += amount else: raise ValueError(\\"Account number does not exist\\") def withdraw(self, account_number, amount): if account_number in self.accounts: if self.accounts[account_number] >= amount: self.accounts[account_number] -= amount else: raise InsufficientFundsException(\\"Insufficient funds\\") else: raise ValueError(\\"Account number does not exist\\") def check_balance(self, account_number): if account_number in self.accounts: return self.accounts[account_number] else: raise ValueError(\\"Account number does not exist\\")"},{"question":"You are required to implement a function `sort_dict_by_value(d: dict)` in Python that sorts the given dictionary by its values in ascending order. The function should: 1. Accept a dictionary with keys as strings and values as integers. 2. Return a list of tuples where each tuple contains a key and its corresponding value from the dictionary, sorted by the values. **Function Signature:** ```python def sort_dict_by_value(d: dict) -> list: ``` **Parameters:** - `d`: A dictionary with keys as strings and values as integers. **Returns:** - A list of tuples in the format `(key, value)`, sorted by the values in ascending order. **Example Usage:** ```python input_dict = {\'a\': 3, \'b\': 1, \'c\': 2} sorted_list = sort_dict_by_value(input_dict) print(sorted_list) # Output should be [(\'b\', 1), (\'c\', 2), (\'a\', 3)] ``` **Note:** - You can assume that all values in the dictionary are unique.","solution":"def sort_dict_by_value(d: dict) -> list: Sorts a dictionary by its values in ascending order. Parameters: d (dict): A dictionary with keys as strings and values as integers. Returns: list: A list of tuples where each tuple contains a key and its corresponding value from the dictionary, sorted by the values. sorted_items = sorted(d.items(), key=lambda item: item[1]) return sorted_items"},{"question":"**You have been asked to implement a function `fruit_price_catalog` that generates a catalog of fruit prices and writes it to a file called `catalog.json`. Each entry in the catalog should be a JSON object with the keys `fruit` and `price`. The function should: 1. Create a list of fruits: `[\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\", \\"elderberry\\"]`. 2. Assign each fruit a random price between 1 and 10 dollars. 3. Create a list of dictionaries, each dictionary representing a fruit and its corresponding price. 4. Write the list of dictionaries to `catalog.json` ensuring the JSON file is created with UTF-8 encoding. 5. Format the JSON output with an indentation of 4 spaces. You will need to use the `json` and `random` libraries for this task. **Function Signature:** ```python def fruit_price_catalog(): pass ``` **Example Output:** Here is how the content of `catalog.json` might look: ```json [ { \\"fruit\\": \\"apple\\", \\"price\\": 6 }, { \\"fruit\\": \\"banana\\", \\"price\\": 2 }, { \\"fruit\\": \\"cherry\\", \\"price\\": 9 }, { \\"fruit\\": \\"date\\", \\"price\\": 5 }, { \\"fruit\\": \\"elderberry\\", \\"price\\": 8 } ] ``` Ensure to handle correct file creation, writing, and proper formatting as specified.","solution":"import json import random def fruit_price_catalog(): fruits = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\", \\"elderberry\\"] catalog = [] for fruit in fruits: price = random.randint(1, 10) catalog.append({ \\"fruit\\": fruit, \\"price\\": price }) with open(\'catalog.json\', \'w\', encoding=\'utf-8\') as f: json.dump(catalog, f, ensure_ascii=False, indent=4)"},{"question":"Write a Python function `compare_sorting_algorithms` that compares the execution time of two sorting algorithms: Quick Sort and Merge Sort. Specifically, the function should: 1. Generate random lists of various sizes to be sorted. 2. Measure the execution time of each sorting algorithm on these lists. 3. Plot the execution time against the list size using `matplotlib.pyplot.plot`. The function `compare_sorting_algorithms` should not take any input parameters. Use the following guidelines for implementation: - Implement the Quick Sort and Merge Sort algorithms. - Generate random lists of sizes [100, 200, 400, 800, 1600, 3200, 6400, 12800] using `np.random.randint`. - Measure the execution time using `time.time()`. - Plot the execution time versus the list size for both algorithms. Here\'s a starting point for your function structure: ```python import numpy as np import matplotlib.pyplot as plt import time def quick_sort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) def merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result def compare_sorting_algorithms(): list_sizes = [100, 200, 400, 800, 1600, 3200, 6400, 12800] quick_times = [] merge_times = [] for size in list_sizes: arr = list(np.random.randint(0, 10000, size)) start_time = time.time() quick_sort(arr.copy()) quick_times.append(time.time() - start_time) start_time = time.time() merge_sort(arr.copy()) merge_times.append(time.time() - start_time) plt.plot(list_sizes, quick_times, label=\'Quick Sort\') plt.plot(list_sizes, merge_times, label=\'Merge Sort\') plt.xlabel(\'List Size\') plt.ylabel(\'Execution Time (s)\') plt.legend() plt.title(\'Quick Sort vs Merge Sort Execution Time\') plt.show() # To execute the comparison function compare_sorting_algorithms() ``` Ensure your solution leverages `matplotlib.pyplot.plot` to produce the plots.","solution":"import numpy as np import matplotlib.pyplot as plt import time def quick_sort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) def merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result def compare_sorting_algorithms(): list_sizes = [100, 200, 400, 800, 1600, 3200, 6400, 12800] quick_times = [] merge_times = [] for size in list_sizes: arr = list(np.random.randint(0, 10000, size)) start_time = time.time() quick_sort(arr.copy()) quick_times.append(time.time() - start_time) start_time = time.time() merge_sort(arr.copy()) merge_times.append(time.time() - start_time) plt.plot(list_sizes, quick_times, label=\'Quick Sort\') plt.plot(list_sizes, merge_times, label=\'Merge Sort\') plt.xlabel(\'List Size\') plt.ylabel(\'Execution Time (s)\') plt.legend() plt.title(\'Quick Sort vs Merge Sort Execution Time\') plt.show() # To execute the comparison function compare_sorting_algorithms()"},{"question":"Write a function named `generate_primes` that returns a list of all prime numbers up to a given limit. The function should accept an integer representing the upper limit and return a list of integers that are prime numbers. **Function Specification**: ```python def generate_primes(limit: int) -> list[int]: Generate a list of all prime numbers up to a given limit. Parameters ---------- limit : int The upper limit up to which prime numbers are to be generated. Returns ------- list of int A list containing all prime numbers less than or equal to the given limit. ``` **Constraints**: 1. The limit should be a non-negative integer. If the limit is less than 2, the function should return an empty list. 2. Implement an efficient prime-checking algorithm. Using the Sieve of Eratosthenes is recommended. 3. Optimize the function for large values of the limit. **Hints**: 1. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. 2. The Sieve of Eratosthenes technique can efficiently generate all primes up to a given limit. Example: - Given `limit = 10`, the function should return `[2, 3, 5, 7]`.","solution":"def generate_primes(limit: int) -> list[int]: Generate a list of all prime numbers up to a given limit. Parameters ---------- limit : int The upper limit up to which prime numbers are to be generated. Returns ------- list of int A list containing all prime numbers less than or equal to the given limit. if limit < 2: return [] is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False for num in range(2, int(limit**0.5) + 1): if is_prime[num]: for multiple in range(num*num, limit + 1, num): is_prime[multiple] = False return [i for i in range(2, limit + 1) if is_prime[i]]"},{"question":"You are responsible for creating a function that simulates a simple data processing pipeline with the following functionalities: 1. Read data from a CSV file. 2. Filter rows based on a specified column value. 3. Calculate summary statistics (mean, median, and standard deviation) for a numeric column. 4. Write the filtered data to a new CSV file. Create a function `processData(input_file: str, output_file: str, filter_column: str, filter_value: str, summary_column: str) -> dict` that performs these operations. This function should: - Read the input CSV file using Pandas. - Filter the dataframe to include only rows where the `filter_column` matches the given `filter_value`. - Compute the mean, median, and standard deviation for the specified `summary_column` on the filtered data. - Write the filtered data to the specified output CSV file. - Return a dictionary containing the computed statistics. Additional constraints include: - Handle cases where the `summary_column` does not contain numeric values by raising an appropriate error. - Ensure that the input file exists and the columns specified are valid, raising errors otherwise. **Function Signature:** ```python def processData(input_file: str, output_file: str, filter_column: str, filter_value: str, summary_column: str) -> dict: ``` # Example Usage: ```python result = processData(\'input.csv\', \'filtered_output.csv\', \'Category\', \'A\', \'Value\') print(result) # Output might be: {\'mean\': 10.5, \'median\': 8.0, \'std\': 2.3} ``` In this problem, use the Pandas library to handle CSV file operations and computations. # Example CSV File (\\"input.csv\\"): | ID | Category | Value | |---|----------|-------| | 1 | A | 10 | | 2 | B | 20 | | 3 | A | 7 | | 4 | A | 15 | | 5 | B | 5 | # Expected Output File (\\"filtered_output.csv\\"): | ID | Category | Value | |---|----------|-------| | 1 | A | 10 | | 3 | A | 7 | | 4 | A | 15 | The result dictionary would be: ```python {\'mean\': 10.666666666666666, \'median\': 10.0, \'std\': 4.041451884327381} ```","solution":"import pandas as pd import os def processData(input_file: str, output_file: str, filter_column: str, filter_value: str, summary_column: str) -> dict: Processes the input CSV file by filtering rows and performing summary statistics on a specified column. Args: input_file (str): Path to the input CSV file. output_file (str): Path where the filtered data will be written. filter_column (str): Column name to apply the filter on. filter_value (str): Value to filter the rows. summary_column (str): Column name to calculate summary statistics on. Returns: dict: Dictionary containing mean, median, and standard deviation of the summary column. # Check if the input file exists if not os.path.exists(input_file): raise FileNotFoundError(f\\"The file {input_file} does not exist.\\") # Read the input CSV file df = pd.read_csv(input_file) # Check if the specified columns exist in the dataframe if filter_column not in df.columns or summary_column not in df.columns: raise ValueError(\\"Specified columns do not exist in the CSV file.\\") # Filter the dataframe filtered_df = df[df[filter_column] == filter_value] # Check if the summary column contains numeric values if not pd.api.types.is_numeric_dtype(filtered_df[summary_column]): raise ValueError(f\\"The column {summary_column} does not contain numeric values.\\") # Calculate summary statistics mean_value = filtered_df[summary_column].mean() median_value = filtered_df[summary_column].median() std_value = filtered_df[summary_column].std() # Write the filtered data to the output CSV file filtered_df.to_csv(output_file, index=False) # Return the summary statistics return { \'mean\': mean_value, \'median\': median_value, \'std\': std_value }"},{"question":"--- **Title**: Calculate the Average Monthly Temperature **Objective**: The task is to create a function named `calculate_average_monthly_temperature` that calculates the average monthly temperature for a given year using a DataFrame. You are required to utilize the `numpy` and `pandas` libraries to accomplish this task. **Attributes and Constraints**: You have access to a DataFrame named `weather_data` which contains daily weather data. The table has the following relevant columns: - `DATE`: Contains the date of the observation in the format YYYY-MM-DD. - `TEMP`: Contains the daily average temperature. You are required to: 1. Filter the DataFrame to include only the data for the specified year. 2. Aggregate the data to compute the average temperature for each month. 3. Return the results as a dictionary where the keys are the month names (e.g., \'January\', \'February\') and the values are the average temperatures for those months. **Required Libraries**: `numpy`, `pandas` **Function Signature**: ```python def calculate_average_monthly_temperature(weather_data: pd.DataFrame, year: int) -> dict: pass ``` ---","solution":"import pandas as pd import numpy as np def calculate_average_monthly_temperature(weather_data: pd.DataFrame, year: int) -> dict: This function calculates the average monthly temperature for a given year using weather data. Parameters: - weather_data (pd.DataFrame): DataFrame containing the daily weather data with \'DATE\' and \'TEMP\' columns. - year (int): The year for which to calculate the average monthly temperature. Returns: - dict: Dictionary where keys are month names and values are the average temperatures for those months. # Convert \'DATE\' column to datetime weather_data[\'DATE\'] = pd.to_datetime(weather_data[\'DATE\']) # Filter data for the specified year weather_data_year = weather_data[weather_data[\'DATE\'].dt.year == year] # Extract month name and calculate the average temperature weather_data_year[\'MONTH\'] = weather_data_year[\'DATE\'].dt.strftime(\'%B\') average_monthly_temp = weather_data_year.groupby(\'MONTH\')[\'TEMP\'].mean() # Convert the resulting series to dictionary result = average_monthly_temp.to_dict() # Ensure the dictionary has all months even if the data for some is missing month_order = [\'January\', \'February\', \'March\', \'April\', \'May\', \'June\', \'July\', \'August\', \'September\', \'October\', \'November\', \'December\'] result = {month: result.get(month, None) for month in month_order} return result"},{"question":"Sort a list of names based on the sum of the ASCII values of their characters. The function should take a list of strings and return a new list with the strings sorted in ascending order according to the sum of their ASCII values. This function helps in understanding how to manipulate string data and sort it based on custom criteria. The function should output with: list: A list of names sorted based on the sum of their ASCII values. You should write self-contained code starting with: ``` def sort_by_ascii_value(names): ```","solution":"def sort_by_ascii_value(names): Sort a list of names based on the sum of the ASCII values of their characters. :param names: A list of strings. :return: A list of strings sorted according to the sum of their ASCII values. # Helper function to calculate the sum of ASCII values of characters in a string def ascii_sum(name): return sum(ord(char) for char in name) return sorted(names, key=ascii_sum)"},{"question":"You are required to write a function `sort_dict_by_value` that takes a dictionary as input and returns a list of tuples. Each tuple should contain a key-value pair from the dictionary, and the resulting list should be sorted by its values in ascending order. This function helps you practice your skills with dictionary operations and sorting in Python. The function should follow this specification: 1. **Function Name:** `sort_dict_by_value` 2. **Input Parameter:** - `input_dict` (a dictionary where all values are integers) 3. **Output:** - A list of tuples, where each tuple corresponds to a key-value pair from the input dictionary, sorted by their values in ascending order. # Details: - The keys in the dictionary are unique strings, and values are integers. - The output list should maintain the order of keys with the same value as they appear in the input dictionary. - You must use Python\'s built-in `sorted()` function to sort the dictionary items. Sample Input: ```python input_dict = {\'apple\': 5, \'banana\': 2, \'cherry\': 7, \'date\': 2} ``` Sample Output: ```python [(\'banana\', 2), (\'date\', 2), (\'apple\', 5), (\'cherry\', 7)] ``` # Additional Information: - You may assume that the dictionary is non-empty and contains at least one key-value pair. # Example: If `input_dict` is: ```python {\'apple\': 5, \'banana\': 2, \'cherry\': 7, \'date\': 2} ``` `sort_dict_by_value(input_dict)` should return: ```python [(\'banana\', 2), (\'date\', 2), (\'apple\', 5), (\'cherry\', 7)] ```","solution":"def sort_dict_by_value(input_dict): Sorts the dictionary by its values in ascending order and returns a list of tuples. Each tuple contains a key-value pair from the dictionary. Args: input_dict (dict): The input dictionary where all values are integers. Returns: list: A list of tuples sorted by the dictionary\'s values in ascending order. return sorted(input_dict.items(), key=lambda item: item[1])"},{"question":"You are working on a music streaming platform\'s recommendation system. The platform has data on the songs listened to by users, including the song title, artist, and genre. Your task is to create a function that recommends new songs to a user based on the genres they have listened to the most. The platform stores listening history in a DataFrame with columns: `user_id`, `song_title`, `artist`, `genre`, and `listen_time`. You need to create a function `recommend_songs(listening_history, user_id, song_library)` that performs the following tasks: 1. Identify the genres the user has listened to the most. 2. Recommend songs from these top genres that the user has not heard yet. The list of available songs is provided in `song_library`, which is a DataFrame containing `song_title`, `artist`, and `genre`. 3. Return a DataFrame with the recommended songs, including columns: `song_title`, `artist`, and `genre`. **Function Signature:** ```python def recommend_songs(listening_history: pd.DataFrame, user_id: int, song_library: pd.DataFrame) -> pd.DataFrame: pass ``` **Input:** - `listening_history`: A DataFrame of songs listened to by users, with columns `user_id`, `song_title`, `artist`, `genre`, and `listen_time`. - `user_id`: The user ID to generate recommendations for (integer). - `song_library`: A DataFrame of available songs for recommendation, with columns `song_title`, `artist`, and `genre`. **Output:** - Returns a DataFrame with recommended songs that the user has not heard yet, including columns `song_title`, `artist`, and `genre`. **Constraints:** - You can assume that each user_id in listening_history and song_library is valid. - Listening history DataFrame may contain multiple entries for the same song if listened to multiple times. - The song_library DataFrame contains unique songs and no duplicate song titles. **Example:** ```python import pandas as pd # Example listening history data = { \'user_id\': [1, 1, 1, 2, 2], \'song_title\': [\'Song A\', \'Song B\', \'Song C\', \'Song D\', \'Song E\'], \'artist\': [\'Artist 1\', \'Artist 2\', \'Artist 1\', \'Artist 3\', \'Artist 4\'], \'genre\': [\'Pop\', \'Rock\', \'Pop\', \'Jazz\', \'Rock\'], \'listen_time\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-01\', \'2023-01-02\'] } listening_history = pd.DataFrame(data) # Example song library song_library = pd.DataFrame({ \'song_title\': [\'Song X\', \'Song Y\', \'Song Z\'], \'artist\': [\'Artist 1\', \'Artist 2\', \'Artist 3\'], \'genre\': [\'Pop\', \'Rock\', \'Jazz\'] }) # Calling the recommend_songs function recommendations = recommend_songs(listening_history, 1, song_library) print(recommendations) ``` In this example, the function should identify the top genres listened to by user 1 (`Pop`, `Rock`), and recommend songs from these genres that user 1 has not heard yet. The output should be a DataFrame of recommended songs.","solution":"import pandas as pd def recommend_songs(listening_history: pd.DataFrame, user_id: int, song_library: pd.DataFrame) -> pd.DataFrame: Recommends new songs to a user based on the genres they have listened to the most. Parameters: - listening_history (pd.DataFrame): DataFrame with columns `user_id`, `song_title`, `artist`, `genre`, `listen_time`. - user_id (int): The user ID to generate recommendations for. - song_library (pd.DataFrame): DataFrame with columns `song_title`, `artist`, `genre`. Returns: - pd.DataFrame: DataFrame with recommended songs including columns `song_title`, `artist`, and `genre`. # Filter the listening history for the specified user user_history = listening_history[listening_history[\'user_id\'] == user_id] # Identify the genres the user has listened to the most top_genres = user_history[\'genre\'].value_counts().index.tolist() # Get a set of songs the user has already listened to listened_songs = set(user_history[\'song_title\']) # Filter the song library to recommend songs from the top genres that the user has not heard yet recommendations = song_library[song_library[\'genre\'].isin(top_genres) & ~song_library[\'song_title\'].isin(listened_songs)] # Return the recommendations return recommendations"},{"question":"You are given a list of dictionaries `student_grades`, where each dictionary contains the following key-value pairs: - `\'name\'` (str): The name of the student. - `\'grades\'` (list of int): A list of integers representing the grades received by the student. Your task is to create a function named `calculate_average_grades` that processes this list and returns a new list of dictionaries where each dictionary contains: - `\'name\'` (str): The name of the student. - `\'average\'` (float): The average of the grades received by the student, rounded to 2 decimal places. The function should take the following parameter: - `student_grades` (list of dict): A list of dictionaries containing students\' names and their grades. The function should: 1. Iterate through each student in `student_grades`. 2. Calculate the average of the grades for each student. 3. Store the calculated average (rounded to 2 decimal places) along with the student\'s name in a new dictionary. 4. Append the new dictionaries to a list. 5. Return the list of dictionaries. # Example Usage: ```python student_grades = [ {\'name\': \'Alice\', \'grades\': [90, 85, 88]}, {\'name\': \'Bob\', \'grades\': [72, 78, 75]}, {\'name\': \'Charlie\', \'grades\': [95, 100, 92]} ] calculate_average_grades(student_grades) ``` The above example should return: ```python [ {\'name\': \'Alice\', \'average\': 87.67}, {\'name\': \'Bob\', \'average\': 75.0}, {\'name\': \'Charlie\', \'average\': 95.67} ] ``` # Constraints: 1. Each student\'s list of grades will contain at least one grade. 2. All grades will be non-negative integers. 3. Each student dictionary will have the same structure (`\'name\'` and `\'grades\'` keys). Ensure your code runs without errors and returns the expected results when provided with valid input.","solution":"def calculate_average_grades(student_grades): Calculates the average of grades for each student in the given list of dictionaries. Args: student_grades (list of dict): A list of dictionaries containing students\' names and their grades. Returns: list of dict: A new list of dictionaries with students\' names and their calculated average grades. result = [] for student in student_grades: name = student[\'name\'] grades = student[\'grades\'] average = round(sum(grades) / len(grades), 2) result.append({\'name\': name, \'average\': average}) return result"},{"question":"Given the importance of symbolic computation in the field of mathematics and physics, your task is to create a function named `compute_reduced_mass`. This function will derive and return an expression for the reduced mass of a two-body system using given symbolic variables. # Context: Given the following constant parameters represented as symbolic variables: - ( m_1 ) is the mass of the first body (positive value) - ( m_2 ) is the mass of the second body (positive value) The reduced mass ( mu ) for the two-body system is calculated using the formula: [ mu = frac{m_1 cdot m_2}{m_1 + m_2} ] # Task: 1. Define the function `compute_reduced_mass()`. 2. Inside this function: - Declare symbolic variables ( m_1 ) and ( m_2 ) using `sympy.Symbol`, ensuring that each symbol is positive. - Compute the expression for ( mu ) using the formula provided. - Return the resulting expression. # Constraints: - **Use** the `sympy.Symbol` to create symbolic variables. - **Use** the `sympy.Rational` to work with rational expressions if needed. - Ensure that your function computes the reduced mass expression symbolically. # Function Signature: ```python def compute_reduced_mass(): pass ``` # Example Usage: ```python from sympy import symbols expr = compute_reduced_mass() m1, m2 = symbols(\'m1 m2\', positive=True) # Verify the expression assert expr == m1 * m2 / (m1 + m2), \\"The computed expression is incorrect.\\" print(\\"Reduced mass expression calculated correctly!\\") ``` The assertion should pass, indicating that the calculated expression matches the provided formula for the reduced mass.","solution":"import sympy as sp def compute_reduced_mass(): Computes and returns the symbolic expression for the reduced mass of a two-body system. m1 = sp.Symbol(\'m1\', positive=True) m2 = sp.Symbol(\'m2\', positive=True) reduced_mass = (m1 * m2) / (m1 + m2) return reduced_mass"},{"question":"You are given a string containing multiple sentences. Your task is to write a function called `count_words_per_sentence` that splits this string into individual sentences and then counts the number of words in each sentence. The function should return a list of integers where each integer represents the word count of a corresponding sentence. Use the `re` module to split sentences, and assume that sentences end with one of the following punctuation marks: \'.\', \'!\', or \'?\'. Also, assume that words are separated by spaces. The function signature is: ```python def count_words_per_sentence(text: str) -> List[int]: ``` Input: - `text` (str): A string containing multiple sentences. Output: - `List[int]`: A list of integers, where each integer is the word count of a corresponding sentence in the input string. Example: ```python example_text = \\"Hello world! How are you doing today? This is a test sentence.\\" output = count_words_per_sentence(example_text) # Expected output: [2, 5, 5] ``` # Requirements: - Use the `re` module to split sentences. - Ensure the function handles empty sentences gracefully. - Ignore leading and trailing spaces in sentences when counting words.","solution":"import re from typing import List def count_words_per_sentence(text: str) -> List[int]: Splits the text into sentences and counts the number of words in each sentence. Args: text (str): A string containing multiple sentences. Returns: List[int]: A list of integers, where each integer is the word count of a corresponding sentence. # Split the text into sentences using regex. We include the punctuation in the split criteria. sentences = re.split(r\'[.!?]\', text) # Count the words in each sentence. word_counts = [] for sentence in sentences: # Strip leading and trailing spaces and then count words. word_count = len(sentence.strip().split()) if word_count > 0: word_counts.append(word_count) return word_counts"},{"question":"You are given a function `find_optimal_path` that finds the shortest path in a grid from a starting point to a target point. Your task is to create a function `find_shortest_path` that utilizes Dijkstra\'s algorithm to find and return the shortest path from the top-left corner to the bottom-right corner of a given grid. **Function Signature:** ```python def find_shortest_path(grid: List[List[int]]) -> List[Tuple[int, int]]: pass ``` **Parameters:** - `grid` (List[List[int]]): A 2D list of integers where each integer represents the cost of stepping on that cell. **Returns:** - `List[Tuple[int, int]]`: A list of tuples representing the coordinates of the cells in the shortest path from the top-left corner to the bottom-right corner. # Instructions: 1. **Initialize Variables:** - Use a priority queue to store the cells to be explored, starting with the top-left corner `(0, 0)`. - Keep a dictionary to store the minimum cost to reach each cell. - Another dictionary to store the previous cell on the shortest path to any given cell. 2. **Dijkstra\'s Algorithm:** - Extract the cell with the minimum cost from the priority queue. - Explore its neighboring cells (up, down, left, right) if they are within the grid bounds. - Calculate the total cost to reach each neighboring cell and update the minimum cost and previous cell if a less costly path is found. - Add the neighboring cells to the priority queue for further exploration. 3. **Reconstruct the Path:** - Once the bottom-right corner is reached, backtrack using the previous cell dictionary to reconstruct the optimal path. 4. **Edge Cases:** - If the grid is empty or only one cell, handle these edge cases appropriately. **Requirements:** - Use Dijkstra\'s algorithm to ensure that you find the optimal path with minimal cost. - Ensure to account for all neighboring cells and update paths efficiently using a priority queue. **Example:** ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] find_shortest_path(grid) # Returns: [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2)] ```","solution":"import heapq from typing import List, Tuple, Dict def find_shortest_path(grid: List[List[int]]) -> List[Tuple[int, int]]: if not grid or not grid[0]: return [] rows, cols = len(grid), len(grid[0]) def get_neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols: yield nx, ny pq = [(grid[0][0], 0, 0)] min_cost = { (0, 0): grid[0][0] } prev = { (0, 0): None } while pq: cost, x, y = heapq.heappop(pq) if (x, y) == (rows - 1, cols - 1): break for nx, ny in get_neighbors(x, y): new_cost = cost + grid[nx][ny] if (nx, ny) not in min_cost or new_cost < min_cost[(nx, ny)]: min_cost[(nx, ny)] = new_cost prev[(nx, ny)] = (x, y) heapq.heappush(pq, (new_cost, nx, ny)) path = [] current = (rows - 1, cols - 1) while current: path.append(current) current = prev[current] return path[::-1]"},{"question":"You are working on a project that simulates the rolling of two six-sided dice and evaluates how many times specific outcomes occur within a given number of trials. Develop a function named `simulate_dice_rolls` that: 1. Simulates the rolling of two six-sided dice for a specified number of trials. 2. Records the results of each roll as the sum of the values shown on the two dice. 3. Computes the frequency of each possible sum (from 2 to 12) over all trials. 4. Plots a histogram showing the frequency distribution of these sums using the `matplotlib` library. Use `numpy` for generating random dice rolls and `matplotlib.pyplot` for plotting the histogram. # Function Signature ```python def simulate_dice_rolls(trials: int): pass ``` # Input Parameters - `trials` (int): The number of times to roll the two dice. # Output The function does not return any value but should display a histogram with: - Frequencies of sums (from 2 to 12) on the x-axis. - Number of occurrences on the y-axis. - Appropriate labels for the x-axis and y-axis. - A title indicating the number of trials. # Example ```python simulate_dice_rolls(1000) ``` This example would simulate rolling two dice 1000 times and display a histogram showing the frequency of each possible sum.","solution":"import numpy as np import matplotlib.pyplot as plt def simulate_dice_rolls(trials: int): # Ensure trials is a positive integer if trials <= 0: raise ValueError(\\"Number of trials must be a positive integer\\") # Simulate rolling two six-sided dice for the specified number of trials dice1 = np.random.randint(1, 7, trials) dice2 = np.random.randint(1, 7, trials) # Calculate the sum of the two dice for each trial sums = dice1 + dice2 # Calculate the frequency of each possible sum sum_counts = np.bincount(sums, minlength=13)[2:] # bincount index 0 and 1 are not used # Plot the histogram of sums plt.bar(range(2, 13), sum_counts, tick_label=range(2, 13)) plt.xlabel(\'Sum of Dice\') plt.ylabel(\'Frequency\') plt.title(f\'Frequency of Sums in {trials} Trials\') # Show the plot plt.show()"},{"question":"You are required to create a function named `generate_report` which summarizes book sales data. Each book has a title, author, and number of copies sold. You will be provided with a list of dictionaries where each dictionary represents a book with keys: `\'title\'`, `\'author\'`, and `\'copies_sold\'`. The function should: 1. Print the total number of books. 2. Print the total number of copies sold. 3. Identify and print the book with the highest number of copies sold. 4. Determine and print the average number of copies sold. 5. Format the output neatly and clearly. **Inputs:** - `books`: List of dictionaries representing book sales data. **Output:** - The function prints a summary report to the console. **Example:** ```python books = [ {\\"title\\": \\"The Great Gatsby\\", \\"author\\": \\"F. Scott Fitzgerald\\", \\"copies_sold\\": 5000000}, {\\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"copies_sold\\": 7000000}, {\\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"copies_sold\\": 4000000} ] generate_report(books) ``` **Expected Output:** ``` Total number of books: 3 Total number of copies sold: 16000000 Best-selling book: 1984 by George Orwell with 7000000 copies sold Average number of copies sold per book: 5333333.33 ```","solution":"def generate_report(books): Generate a report summarizing book sales data. Args: books (list): A list of dictionaries where each dictionary contains data about a book. The format of the dictionaries: {\\"title\\": str, \\"author\\": str, \\"copies_sold\\": int} if not books: print(\\"There are no books in the list.\\") return total_books = len(books) total_copies_sold = sum(book[\'copies_sold\'] for book in books) best_selling_book = max(books, key=lambda x: x[\'copies_sold\']) average_copies_sold = total_copies_sold / total_books print(f\\"Total number of books: {total_books}\\") print(f\\"Total number of copies sold: {total_copies_sold}\\") print(f\\"Best-selling book: {best_selling_book[\'title\']} by {best_selling_book[\'author\']} with {best_selling_book[\'copies_sold\']} copies sold\\") print(f\\"Average number of copies sold per book: {average_copies_sold:.2f}\\") # Example usage: books = [ {\\"title\\": \\"The Great Gatsby\\", \\"author\\": \\"F. Scott Fitzgerald\\", \\"copies_sold\\": 5000000}, {\\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"copies_sold\\": 7000000}, {\\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"copies_sold\\": 4000000} ] generate_report(books)"},{"question":"You are required to write a function that generates a new 2D numpy array where each value is normalized based on the z-score of its respective column. The resulting array should then be saved to a CSV file. Z-score normalization involves subtracting the mean of each column and dividing by the standard deviation of each column. The steps you need to perform within the function are: 1. Calculate the mean for each column. 2. Calculate the standard deviation for each column. 3. Normalize each value in the array by subtracting the column mean and dividing by the column standard deviation. 4. Convert the normalized array into a pandas DataFrame. 5. Save this DataFrame to a CSV file named `Normalized_data_{n_items}_{n_persons}.csv`, where `n_items` and `n_persons` are the respective dimensions of the input array. The function signature should be: ```python def normalize_and_save_data(data): ``` Required Libraries: - `numpy` - `pandas` **Example Usage:** ```python import numpy as np data = np.random.randn(100, 5) # Creating a sample 2D array with 100 rows and 5 columns normalize_and_save_data(data) ```","solution":"import numpy as np import pandas as pd def normalize_and_save_data(data): Normalizes a 2D numpy array using z-score normalization and saves the result to a CSV file. :param data: 2D numpy array to be normalized. # Calculate means and standard deviations for each column column_means = data.mean(axis=0) column_stds = data.std(axis=0) # Z-score normalization normalized_data = (data - column_means) / column_stds # Convert to pandas DataFrame df_normalized = pd.DataFrame(normalized_data) # Save DataFrame to CSV file n_items, n_persons = data.shape filename = f\\"Normalized_data_{n_items}_{n_persons}.csv\\" df_normalized.to_csv(filename, index=False)"},{"question":"You are tasked with writing a function that analyzes and displays information about transactions in a store. Complete the function `analyze_transactions(transactions: List[Dict[str, Union[str, float]]]) -> Tuple[Dict[str, int], str]` using the PrettyTable library. The input parameter `transactions` is a list of dictionaries, each representing a record of transaction details with the following keys: - \'TransactionID\' - \'CustomerID\' - \'Item\' - \'Category\' - \'Quantity\' - \'Price\' (per individual item) - \'TransactionDate\' (format \'YYYY-MM-DD\') The output should consist of two parts: 1. A dictionary summarizing the total count of transactions per category. The key is the category, and the value is the total count of transactions for that category. 2. A string representation of the transaction data neatly formatted using PrettyTable to display the columns in the following order: [\'TransactionID\', \'CustomerID\', \'Item\', \'Category\', \'Quantity\', \'Price\', \'TransactionDate\']. Use the PrettyTable library to ensure that the output is visually appealing and easy to read. Assume that the PrettyTable library is already installed in your environment. Example: ```python transactions = [ {\'TransactionID\': \'TXN1001\', \'CustomerID\': \'CUST1001\', \'Item\': \'Apple\', \'Category\': \'Fruits\', \'Quantity\': 3, \'Price\': 0.5, \'TransactionDate\': \'2023-05-10\'}, {\'TransactionID\': \'TXN1002\', \'CustomerID\': \'CUST1002\', \'Item\': \'Banana\', \'Category\': \'Fruits\', \'Quantity\': 2, \'Price\': 0.3, \'TransactionDate\': \'2023-05-11\'}, {\'TransactionID\': \'TXN1003\', \'CustomerID\': \'CUST1003\', \'Item\': \'Shampoo\', \'Category\': \'Personal Care\', \'Quantity\': 1, \'Price\': 5.0, \'TransactionDate\': \'2023-05-12\'} ] result = analyze_transactions(transactions) print(result[0]) # Output: {\'Fruits\': 2, \'Personal Care\': 1} print(result[1]) # Output: A pretty table string listing all transactions ``` Feel free to add more transactions to test the function\'s accuracy.","solution":"from typing import List, Dict, Union, Tuple from prettytable import PrettyTable def analyze_transactions(transactions: List[Dict[str, Union[str, float]]]) -> Tuple[Dict[str, int], str]: category_summary = {} table = PrettyTable() table.field_names = [\'TransactionID\', \'CustomerID\', \'Item\', \'Category\', \'Quantity\', \'Price\', \'TransactionDate\'] for transaction in transactions: category = transaction[\'Category\'] if category in category_summary: category_summary[category] += 1 else: category_summary[category] = 1 table.add_row([transaction[\'TransactionID\'], transaction[\'CustomerID\'], transaction[\'Item\'], transaction[\'Category\'], transaction[\'Quantity\'], transaction[\'Price\'], transaction[\'TransactionDate\']]) return category_summary, table.get_string()"},{"question":"** You have been provided a function `most_frequent_words(text, k)` which takes in a string `text` and an integer `k`. The function needs to return the `k` most frequent words in the text, along with their frequencies. The function should ignore case when counting word frequencies and ignore punctuation. Using the provided function, your task is to create the `most_frequent_words()` function that handles the desired functionality. You must specifically make use of Python\'s `collections.Counter` and `re` libraries for this task. **Task Overview**: 1. Implement the function `most_frequent_words(text, k)` with the specified functionalities. 2. Use the following specific library functions from their provided API: - `collections.Counter` - `re.findall` **Function Signature**: ```python def most_frequent_words(text, k): text: str - the input text to analyze k: int - the number of most frequent words to return Return a list of tuples containing the k most frequent words and their frequencies, sorted by frequency descending. If there is a tie in frequency, words should be sorted alphabetically. ``` **Example**: ```python text = \\"Hello World! This is a test. Test test, hello again, world.\\" k = 2 print(most_frequent_words(text, k)) # Output: [(\'test\', 3), (\'hello\', 2)] ``` **Requirements**: Make sure to explain how you are utilizing the specific library APIs in your function. **Implementation Details**: - Use `re.findall` to extract words from the text, ignoring case and punctuation. - Use `collections.Counter` to count the frequency of each word. - Return the `k` most common words along with their frequencies, sorted as per the requirements. ---","solution":"import re from collections import Counter def most_frequent_words(text, k): Returns the k most frequent words in the text with their frequencies. Parameters: text (str): The input text to analyze. k (int): The number of most frequent words to return. Returns: list of tuples: A list of tuples where each tuple contains a word and its frequency. # Extract words from the text using re.findall, ignoring case and punctuation words = re.findall(r\'bw+b\', text.lower()) # Count the frequency of each word using collections.Counter word_counts = Counter(words) # Return the k most common words as a list of tuples return word_counts.most_common(k)"},{"question":"You are responsible for developing an inventory management system using JSON files. Specifically, you need to implement a function named `manage_inventory` that performs the following tasks: 1. Prompts the user to either view the current inventory or add a new item to the inventory. 2. If the user chooses to view the current inventory, the function should read and return the contents of an existing JSON file named `inventory.json`. 3. If the user chooses to add a new item, the function should prompt the user to input various details such as item name, category, quantity, and price. 4. The newly added item should then be appended to the existing inventory and saved back into `inventory.json`. Ensure to use the `json` library in Python for reading and writing JSON files. The key functions to utilize are `json.load` for reading from and `json.dump` for writing to the JSON file. Your `manage_inventory` function should return either the current inventory (if opted by the user) or the updated inventory including the newly added item. # Requirements - Function signature: `def manage_inventory():` - Utilize the `json.load` function to read existing inventory from `inventory.json`. - Utilize the `json.dump` function to update the inventory in `inventory.json`. # Example If the current inventory is: ```json [ { \\"item_name\\": \\"Laptop\\", \\"category\\": \\"Electronics\\", \\"quantity\\": 10, \\"price\\": 999.99 }, { \\"item_name\\": \\"Chair\\", \\"category\\": \\"Furniture\\", \\"quantity\\": 25, \\"price\\": 49.99 } ] ``` On selecting the option to view the current inventory, the function should return the above list. On choosing to add a new item, if provided details are: ``` item name: Table category: Furniture quantity: 15 price: 89.99 ``` The function should append this item to the existing inventory and save it back to `inventory.json`, returning the following list: ```json [ { \\"item_name\\": \\"Laptop\\", \\"category\\": \\"Electronics\\", \\"quantity\\": 10, \\"price\\": 999.99 }, { \\"item_name\\": \\"Chair\\", \\"category\\": \\"Furniture\\", \\"quantity\\": 25, \\"price\\": 49.99 }, { \\"item_name\\": \\"Table\\", \\"category\\": \\"Furniture\\", \\"quantity\\": 15, \\"price\\": 89.99 } ] ```","solution":"import json def manage_inventory(): # Prompt the user to either view inventory or add a new item choice = input(\\"Enter \'view\' to view inventory or \'add\' to add an item: \\").strip().lower() # Load existing inventory from JSON file try: with open(\'inventory.json\', \'r\') as file: inventory = json.load(file) except FileNotFoundError: inventory = [] if choice == \'view\': # Return the current inventory return inventory elif choice == \'add\': # Collect new item details from the user item_name = input(\\"Enter item name: \\").strip() category = input(\\"Enter category: \\").strip() quantity = int(input(\\"Enter quantity: \\")) price = float(input(\\"Enter price: \\")) # Create a new item dictionary new_item = { \\"item_name\\": item_name, \\"category\\": category, \\"quantity\\": quantity, \\"price\\": price } # Append the new item to the inventory inventory.append(new_item) # Save the updated inventory back to the JSON file with open(\'inventory.json\', \'w\') as file: json.dump(inventory, file, indent=4) # Return the updated inventory return inventory else: raise ValueError(\\"Invalid choice. Please enter \'view\' or \'add\'.\\")"},{"question":"You are tasked with creating an algorithm to identify and group connected components in a grid, where cells are either land (`1`) or water (`0`). You are to implement a function `count_islands` that counts how many distinct islands there are in the given grid. Two land cells are part of the same island if they are adjacent horizontally or vertically (not diagonally). **Function Signature:** ```python def count_islands(grid: List[List[int]]) -> int: ``` **Input:** - `grid` (List[List[int]]): A 2D list representing a grid of land (`1`) and water (`0`). **Output:** - An integer representing the number of distinct islands. **Instructions:** 1. Use Depth-First Search (DFS) or Breadth-First Search (BFS) to explore and mark all cells of an island. 2. Iterate over each cell in the grid. For each unvisited land cell, initiate a search marking all cells of the current island. 3. Prevent re-visiting cells by marking them as visited in the original grid. 4. Return the total number of islands found. **Example:** If the input grid is: ``` [ [0, 1, 0, 0, 1], [1, 1, 0, 0, 0], [0, 0, 0, 1, 1], [0, 0, 0, 1, 1] ] ``` The function should return `3`, indicating there are three distinct islands. Each island in the example grid is visually separated by water cells (`0`), meaning no two land cells in different islands are adjacent horizontally or vertically.","solution":"def count_islands(grid): Counts the number of distinct islands in the given grid. :param grid: List[List[int]] - A 2D list representing a grid of land (1) and water (0). :return: int - The number of distinct islands. def dfs(x, y): # If out-of-bounds or a water cell, return if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == 0: return # Mark cell as visited by setting to 0 (water) grid[x][y] = 0 # Explore all adjacent cells (up, down, left, right) dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) if not grid or not grid[0]: return 0 num_islands = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: # Found an unvisited land cell num_islands += 1 # Increment the island count dfs(i, j) # Mark the entire island as visited return num_islands"},{"question":"You are tasked with implementing a function named `merge_logs` that reads log entries from multiple log files in a specified directory and merges them into a single, consolidated log ordered by timestamp. Each log entry in the log files follows a simple format: each line represents a log entry consisting of a timestamp and a message separated by a space. Your task is to: 1. Search the specified directory for log files using the `glob` module with the `.log` extension. 2. If no log files are found, raise an `Exception` with the message \\"No log files found!\\". 3. Read all log entries from the found log files. 4. Merge all log entries into a single list while ensuring the log entries are ordered by their timestamps. 5. Write the merged log entries into a new log file named `merged.log` in the same directory. Function Signature: ```python def merge_logs(basedir): Merge log entries from multiple log files in a specified directory into a single, consolidated log ordered by timestamp. :param basedir: Directory to search for log files. :return: None ``` Example: Let\'s assume you have the following files in the directory `/logs`: ``` app1.log: 2023-10-01 10:15:00 Starting App1 2023-10-01 10:16:00 Error in App1 app2.log: 2023-10-01 10:15:30 Starting App2 2023-10-01 10:17:00 App2 is running ``` Calling `merge_logs(\'/logs\')` should create a `merged.log` file with the following content: ``` 2023-10-01 10:15:00 Starting App1 2023-10-01 10:15:30 Starting App2 2023-10-01 10:16:00 Error in App1 2023-10-01 10:17:00 App2 is running ``` Use the `glob` function from the `glob` module and standard Python file operations to implement your solution.","solution":"import os import glob def merge_logs(basedir): Merge log entries from multiple log files in a specified directory into a single, consolidated log ordered by timestamp. :param basedir: Directory to search for log files. :return: None log_files = glob.glob(os.path.join(basedir, \\"*.log\\")) if not log_files: raise Exception(\\"No log files found!\\") log_entries = [] for log_file in log_files: with open(log_file, \\"r\\") as file: for line in file: log_entries.append(line.strip()) # Sort log entries by timestamp log_entries.sort() output_file = os.path.join(basedir, \\"merged.log\\") with open(output_file, \\"w\\") as file: for entry in log_entries: file.write(entry + \\"n\\")"},{"question":"You are asked to create a function `find_most_frequent_char` that determines the most frequent character in a given string. If there are multiple characters with the same highest frequency, the function should return the one that appears first in the string. The function should ignore spaces and be case-insensitive. The function will take one parameter: 1. `input_str`: A string containing the input text which may include letters (both uppercase and lowercase), digits, punctuation, and spaces. The function should return a tuple `(char, frequency)`, where `char` is the most frequent character and `frequency` is the count of its occurrences. To solve this problem, consider using a dictionary to count the occurrences of each character, converting the string to lowercase and ignoring spaces. Implement the function `find_most_frequent_char(input_str)` ensuring it adheres to the described requirements.","solution":"def find_most_frequent_char(input_str): Returns the most frequent character in the input string (ignoring spaces and case-insensitive) and the count of its occurrences in a tuple (char, frequency). from collections import Counter # Normalize the string to lowercase and remove spaces normalized_str = input_str.replace(\\" \\", \\"\\").lower() # Count occurrences of each character char_count = Counter(normalized_str) # Find the most frequent character most_frequent_char = max(char_count, key=lambda char: char_count[char]) frequency = char_count[most_frequent_char] return (most_frequent_char, frequency)"},{"question":"You are tasked with writing a function to find and return both the first and the second largest unique numbers from a list of integers. If the list contains less than two unique numbers, return an empty list. Your solution should efficiently handle the constraints and edge cases. # Requirements: 1. **Function Name**: `find_two_largest` 2. **Inputs**: - `nums` (list of ints): A list of integers to analyze. 3. **Output**: - A list containing the first and second largest unique integers in descending order. If there are not enough unique numbers, return an empty list. # Additional Information: 1. The input list may contain negative numbers. 2. The input list may contain duplicates. 3. You are not allowed to use any in-built sorting functions or libraries. # Tasks: 1. Iterate through the list to identify the unique numbers. 2. Keep track of the first and second largest unique numbers as you process the list. 3. Handle edge cases where the list might have fewer than two unique numbers. # Example: ```python print(find_two_largest([4, 2, 1, 2, 5, 5, 6])) # Output: [6, 5] print(find_two_largest([9, 9, 7, 8, 8, 7])) # Output: [9, 8] print(find_two_largest([3, 1])) # Output: [3, 1] print(find_two_largest([1, 1, 1])) # Output: [] print(find_two_largest([])) # Output: [] ``` Use the provided examples to verify your function\'s correctness.","solution":"def find_two_largest(nums): Returns the first and second largest unique numbers from the list. If less than two unique numbers exist, returns an empty list. if not nums: return [] first, second = None, None seen = set() for num in nums: if num not in seen: seen.add(num) if first is None or num > first: second = first first = num elif second is None or num > second: second = num if first is not None and second is not None: return [first, second] else: return []"},{"question":"You are given a balanced binary search tree (BST) with integer values. The tree is represented as an object where each node has three attributes: `value`, `left`, and `right`. You need to implement a function that finds the lowest common ancestor (LCA) of two given nodes in this BST. The LCA of two nodes p and q in a BST is defined as the deepest node that has both p and q as descendants (where we allow a node to be a descendant of itself). # Specific Requirements 1. Implement a function named `find_lca(root, p, q)` where: - `root` is the root node of the balanced BST. - `p` and `q` are the integer values of the two nodes for which you need to find the LCA. - The return value should be the integer value of the LCA node. If either p or q is not present in the BST, return `None`. 2. Assume the `Node` class is defined as follows: ```python class Node: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` # Function Signature ```python def find_lca(root, p, q): # Your code here ``` # Example Usage Given the BST: ``` 20 / 10 30 / / 5 15 25 35 ``` 1. If `p = 5` and `q = 15`, `find_lca(root, 5, 15)` should return `10`. 2. If `p = 5` and `q = 30`, `find_lca(root, 5, 30)` should return `20`. 3. If `p = 40` and `q = 10`, `find_lca(root, 40, 10)` should return `None`. # Explanation 1. The LCA of nodes 5 and 15 is 10 because 10 is the lowest node that has both 5 and 15 as descendants. 2. The LCA of nodes 5 and 30 is 20 because 20 is the lowest node that has both 5 and 30 as descendants. 3. One of the nodes (40) is not in the tree, so the function should return `None`. The function should efficiently navigate the BST from the root to find the deepest common ancestor of nodes p and q. Consider the properties of a BST where the left subtree contains nodes less than the root and the right subtree contains nodes greater than the root to guide you in implementing the solution.","solution":"class Node: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_lca(root, p, q): def find_path(root, value): path = [] current = root while current: path.append(current) if current.value == value: return path elif value < current.value: current = current.left else: current = current.right return None path_p = find_path(root, p) path_q = find_path(root, q) if path_p is None or path_q is None: return None i = 0 while i < len(path_p) and i < len(path_q) and path_p[i].value == path_q[i].value: i += 1 return path_p[i-1].value if i > 0 else None"},{"question":"You are required to create a function that finds the longest word in a given list of words and returns it. If multiple words have the same length, the function should return the word which appears first in the list. Your task is to implement the function named `find_longest_word` which has the following signature: ```python def find_longest_word(words): Finds and returns the longest word in the given list of words. Args: words (list): List of words (strings). Returns: str: The longest word from the list. ``` In this function, you need to: 1. Iterate through the list of words to determine the longest word. 2. Handle cases where the list may be empty by returning an appropriate value (e.g., an empty string). **Requirements:** - Do not use any built-in Python functions like `max()` to solve this problem. - Ensure that the implementation efficiently checks the length of each word. - Consider edge cases such as an input list with a single word or an empty list. Example usage: ```python words = [\\"elephant\\", \\"dog\\", \\"hippopotamus\\", \\"cat\\"] print(find_longest_word(words)) # Output: \\"hippopotamus\\" words = [\\"sun\\", \\"moon\\", \\"stars\\"] print(find_longest_word(words)) # Output: \\"stars\\" words = [] print(find_longest_word(words)) # Output: \\"\\" ```","solution":"def find_longest_word(words): Finds and returns the longest word in the given list of words. Args: words (list): List of words (strings). Returns: str: The longest word from the list. if not words: return \\"\\" longest_word = \\"\\" max_length = 0 for word in words: if len(word) > max_length: longest_word = word max_length = len(word) return longest_word"},{"question":"You are tasked with implementing a function called `shuffle_letters` that takes a string as input and returns a list of all unique permutations of the string\'s characters in lexicographical order. The string will contain only lowercase English letters. # Function Signature ```python def shuffle_letters(s: str) -> List[str]: ``` # Parameters: - `s` (str): A string consisting of lowercase English letters. # Returns: - `List[str]`: A list of all unique permutations of the string in lexicographical order. # Example: Given the parameter: ```python s = \\"abc\\" ``` The function should return: ```python [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] ``` Given the parameter: ```python s = \\"aab\\" ``` The function should return: ```python [\\"aab\\", \\"aba\\", \\"baa\\"] ``` # Constraints: - The input string\'s length `n` will be such that `1 <= n <= 8`. - You should not use any built-in permutation functions from libraries like `itertools`. # Instructions: 1. Implement a helper function to perform permutations recursively, ensuring that it skips generating duplicate permutations. 2. Gather all unique permutations and sort them in lexicographical order before returning. 3. Ensure that the generated permutations are returned as a list of strings. # Notes: - Consider edge cases where the string might have repeated characters, handle them appropriately to avoid duplicates. - You must sort the final list of permutations in lexicographical order before returning it.","solution":"from typing import List def shuffle_letters(s: str) -> List[str]: def backtrack(start=0): if start == len(s) - 1: perm = \'\'.join(s) if perm not in seen: perms.append(perm) seen.add(perm) return for i in range(start, len(s)): s[start], s[i] = s[i], s[start] backtrack(start + 1) s[start], s[i] = s[i], s[start] # backtrack s = list(s) perms = [] seen = set() backtrack() perms.sort() return perms"},{"question":"In this problem, you are required to implement a function named `find_tallest_building` that processes a list of buildings, each with a specified height, and determines the tallest building. The function should also write the name and height of the tallest building to an output file. Each building is represented by a tuple containing the building\'s name and its height in meters. **Function Signature:** ```python def find_tallest_building(buildings: List[Tuple[str, int]], output_filepath: str) -> None: This function finds the tallest building from a list of buildings and writes the name and height of the tallest building to an output file in the specified format. :param buildings: List of tuples, where each tuple contains the name of the building (string) and its height in meters (int). :param output_filepath: Path to the output file where the name and height of the tallest building will be written. ``` **Requirements:** - Iterate through the list of buildings to find the one with the maximum height. - Write the name and height of the tallest building to an output file in the following format: ``` The tallest building is: Name: tallest_building_name Height: tallest_building_height meters ``` **Input:** - `buildings` (List[Tuple[str, int]]): A list of tuples where each tuple contains the name of the building (string) and its height in meters (int). - `output_filepath` (string): The file path of the output file where the result will be written. **Output:** - The function does not return any values but writes the tallest building information to the `output_filepath` specified. # Example Input: ```python buildings = [ (\\"Burj Khalifa\\", 828), (\\"Shanghai Tower\\", 632), (\\"Abraj Al-Bait Clock Tower\\", 601), (\\"Ping An Finance Centre\\", 599), (\\"Lotte World Tower\\", 555) ] output_filepath = \\"tallest_building.txt\\" ``` Output in `tallest_building.txt`: ``` The tallest building is: Name: Burj Khalifa Height: 828 meters ```","solution":"from typing import List, Tuple def find_tallest_building(buildings: List[Tuple[str, int]], output_filepath: str) -> None: This function finds the tallest building from a list of buildings and writes the name and height of the tallest building to an output file in the specified format. :param buildings: List of tuples, where each tuple contains the name of the building (string) and its height in meters (int). :param output_filepath: Path to the output file where the name and height of the tallest building will be written. if not buildings: raise ValueError(\\"The list of buildings is empty.\\") tallest_building = max(buildings, key=lambda b: b[1]) name, height = tallest_building with open(output_filepath, \'w\') as file: file.write(\\"The tallest building is:n\\") file.write(f\\"Name: {name}n\\") file.write(f\\"Height: {height} metersn\\")"},{"question":"Implement a function that takes a list of numerical values and applies a given statistical transformation to the data. The function should support finding the mean, median, standard deviation, or variance of the data. Additionally, it should handle edge cases such as an empty list or a list with a single value appropriately. Ensure that your function can be extended to other statistical measures in the future. The function should be self-contained and include proper exception handling. It should return the result of the transformation. You should write self-contained code starting with: ```python import numpy as np def apply_statistical_transformation(data, transformation): Apply the given statistical transformation to the data. Parameters: - data (list): A list of numerical values. - transformation (str): The type of transformation (\'mean\', \'median\', \'std\', \'var\'). Returns: - result (float): The result of the statistical transformation. ```","solution":"import numpy as np def apply_statistical_transformation(data, transformation): Apply the given statistical transformation to the data. Parameters: - data (list): A list of numerical values. - transformation (str): The type of transformation (\'mean\', \'median\', \'std\', \'var\'). Returns: - result (float): The result of the statistical transformation. if not data: raise ValueError(\\"The data list is empty.\\") if transformation == \'mean\': return np.mean(data) elif transformation == \'median\': return np.median(data) elif transformation == \'std\': return np.std(data) elif transformation == \'var\': return np.var(data) else: raise ValueError(\\"Invalid transformation type. Supported types: \'mean\', \'median\', \'std\', \'var\'.\\")"},{"question":"You are tasked with creating a Python function that parses a list of URLs and organizes them into a dictionary based on their domain names. This task assesses your understanding of string manipulation, dictionary operations, and URL parsing. **Function Specification:** Name: `organize_urls_by_domain` Parameters: 1. `urls` (List[str]): A list of URL strings. **Requirements:** - Parse each URL to extract the domain name. - Organize the URLs into a dictionary where the keys are the domain names and the values are lists of URLs that belong to that domain. - Use the `urllib.parse` library to handle the URL parsing. **Example:** ```python urls = [ \\"https://www.example.com/path/to/page\\", \\"http://subdomain.example.com/another/page\\", \\"https://www.test.com/home\\", \\"http://example.com/contact\\", \\"https://test.com/about\\" ] result = organize_urls_by_domain(urls) ``` **Output:** ```python { \\"example.com\\": [ \\"https://www.example.com/path/to/page\\", \\"http://subdomain.example.com/another/page\\", \\"http://example.com/contact\\" ], \\"test.com\\": [ \\"https://www.test.com/home\\", \\"https://test.com/about\\" ] } ``` **Constraints:** - The URLs can have various schemes (http, https) and subdomains. - Preserve the original URLs in the output dictionary. - Assume the list of URLs is non-empty and all URLs are properly formatted. Write the function `organize_urls_by_domain` adhering to these requirements.","solution":"from urllib.parse import urlparse def organize_urls_by_domain(urls): Organizes URLs by their domain names. Parameters: urls (List[str]): A list of URL strings. Returns: dict: A dictionary where the keys are the domain names and the values are lists of URLs that belong to that domain. domain_dict = {} for url in urls: parsed_url = urlparse(url) domain = parsed_url.netloc.split(\':\')[0] # remove port if any # Extract the main domain from the net location main_domain = \'.\'.join(domain.split(\'.\')[-2:]) if main_domain not in domain_dict: domain_dict[main_domain] = [] domain_dict[main_domain].append(url) return domain_dict"},{"question":"You are developing a lottery number generator for a new lottery game. The game requires users to pick a specified number of unique numbers within a given range. To help game administrators check if the user\'s picks meet the criteria, you need to implement a function that generates a set of unique numbers based on given parameters. Your task is to implement a function named `generate_lottery_numbers` that generates and returns a specified amount of unique numbers within a given range. Function Signature: ```python import random def generate_lottery_numbers(count: int, start: int, end: int) -> list[int]: ``` Parameters: - `count` (`int`): The number of unique numbers to generate. - `start` (`int`): The start of the range (inclusive). - `end` (`int`): The end of the range (inclusive). Returns: - `list[int]`: A list containing the generated unique numbers. # Constraints: 1. The `count` parameter must not exceed the total numbers in the provided range (`end - start + 1`). 2. The function should use a built-in Python function to generate random numbers. 3. The numbers in the returned list should be unique. # Example Usage: ```python print(generate_lottery_numbers(5, 1, 50)) # Example output: [2, 35, 19, 8, 41] print(generate_lottery_numbers(3, 15, 20)) # Example output: [15, 19, 17] ``` # Context: In the provided code snippet, the `random.sample` function is used to generate random unique numbers within the specified range. Implementing this functionality will help ensure that the generated lottery numbers adhere to the game\'s rules of unique number selection, enhancing the robustness of the lottery number generator system. # Requirements: You **must** use the `random.sample` function from the `random` module to generate the unique numbers. This problem focuses on effectively understanding and using this built-in function from the Python standard library.","solution":"import random def generate_lottery_numbers(count: int, start: int, end: int) -> list[int]: Generates a specified amount of unique numbers within a given range. Parameters: count (int): The number of unique numbers to generate. start (int): The start of the range (inclusive). end (int): The end of the range (inclusive). Returns: list[int]: A list containing the generated unique numbers. if count > (end - start + 1): raise ValueError(\\"Count must not exceed the total numbers in the range.\\") return random.sample(range(start, end + 1), count)"},{"question":"Given the following context, write a function `match_the_pattern` that identifies patterns in a grid of characters based on a given pattern matrix. The function should return the top-left coordinates of the starting points of all found patterns. **Function Signature:** ```python def match_the_pattern(grid: List[List[str]], pattern: List[List[str]]) -> List[Tuple[int, int]]: ``` **Parameters:** - `grid` (List[List[str]]): A 2D list of characters representing the main grid. - `pattern` (List[List[str]]): A 2D list of characters representing the pattern to search for within the grid. **Returns:** - `List[Tuple[int, int]]`: A list of tuples where each tuple contains the row and column indices (i, j) representing the starting point of a found pattern in the grid. **Instructions:** 1. Iterate through all possible starting positions in the grid where the pattern might fit. 2. For each starting position, check if the pattern matches the corresponding positions in the grid. 3. If a match is found, record the starting position (i, j). 4. Return all starting positions where the pattern matches the grid. **Example:** For `grid = [[\\"a\\", \\"b\\", \\"c\\", \\"d\\"], [\\"e\\", \\"f\\", \\"g\\", \\"h\\"], [\\"i\\", \\"j\\", \\"k\\", \\"l\\"], [\\"m\\", \\"n\\", \\"o\\", \\"p\\"]]` and `pattern = [[\\"f\\", \\"g\\"], [\\"j\\", \\"k\\"]]`, the function should return `[(1, 1)]` because the pattern starts at position (1, 1) in the grid. **Hint:** To check the pattern match, you may need nested loops to ensure the characters match both row-wise and column-wise for each element of the pattern.","solution":"from typing import List, Tuple def match_the_pattern(grid: List[List[str]], pattern: List[List[str]]) -> List[Tuple[int, int]]: rows_g, cols_g = len(grid), len(grid[0]) rows_p, cols_p = len(pattern), len(pattern[0]) def matches(i, j): for p_i in range(rows_p): for p_j in range(cols_p): if grid[i + p_i][j + p_j] != pattern[p_i][p_j]: return False return True result = [] for i in range(rows_g - rows_p + 1): for j in range(cols_g - cols_p + 1): if matches(i, j): result.append((i, j)) return result"},{"question":"You are required to write a recursion-based program to find all subsets of a given set of unique integers. The goal is to familiarize yourself with the concept of recursion and how to generate and manipulate subsets of a set. **Function Specification** - **Function Name**: `find_subsets` - **Parameters**: - `nums` (List[int]): A list of unique integers. **Function Behavior** - The function should return a list of lists, where each inner list is a subset of the given `nums` list. - The result should include the empty subset as well as the subset containing all the elements of `nums`. - The subsets can be in any order, but you must not include duplicate subsets. **Example** ```python def find_subsets(nums): # Your code here # Example usage print(find_subsets([1, 2, 3])) ``` Output: ``` [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]] ``` **Constraints** - The function should be implemented using recursion. - You may not use any library functions specifically for finding subsets. - The length of the input list `nums` will not exceed 15. **Hint** - Use a helper function to implement the recursive logic. - Consider each element and either include it in the current subset or exclude it. - At each step, create a new subset list and append it to the result.","solution":"def find_subsets(nums): Returns all subsets of a given list of unique integers. def dfs(index, path): subsets.append(path) for i in range(index, len(nums)): dfs(i + 1, path + [nums[i]]) subsets = [] dfs(0, []) return subsets"},{"question":"You are tasked with creating a custom logging utility that filters and logs specific messages based on user-defined criteria. The logging utility should support three log levels: \'INFO\', \'WARNING\', and \'ERROR\'. Implement a class called `CustomLogger` that allows clients to configure which log levels should be recorded. Additionally, it should provide a method to record messages and another to retrieve the latest log entries. The `CustomLogger` class should include the following methods: 1. `__init__(self, levels)`: Initializes the logger with the specified log levels. `levels` is a list of strings specifying which levels should be logged (e.g., `[\'INFO\', \'ERROR\']`). 2. `log(self, level, message)`: Records a log entry if the `level` is allowed. Both `level` and `message` are strings. 3. `get_latest_logs(self, n)`: Returns the last `n` log entries. If `n` is greater than the number of available log entries, return all entries. Class Specification: - Class Name: `CustomLogger` - Methods and Attributes: - `__init__(self, levels)`: Initialize with specific log levels. - `log(self, level, message)`: Record a log entry. - `get_latest_logs(self, n)`: Retrieve the last `n` log entries. # Example Usage ```python # Initialize a custom logger to log INFO and ERROR levels logger = CustomLogger([\'INFO\', \'ERROR\']) # Log messages at various levels logger.log(\'INFO\', \'This is an info message.\') logger.log(\'WARNING\', \'This warning should not be logged.\') logger.log(\'ERROR\', \'This is an error message.\') # Retrieve the last two log messages logs = logger.get_latest_logs(2) # Should return the INFO and ERROR log entries ```","solution":"class CustomLogger: def __init__(self, levels): Initializes the logger with the specified log levels. :param levels: List of log levels to be recorded (e.g., [\'INFO\', \'ERROR\']) self.levels = set(levels) self.log_entries = [] def log(self, level, message): Records a log entry if the level is allowed. :param level: Log level of the message (e.g., \'INFO\', \'ERROR\') :param message: Log message string if level in self.levels: self.log_entries.append((level, message)) def get_latest_logs(self, n): Returns the last n log entries. If n is greater than the number of available log entries, return all entries. :param n: Number of latest log entries to return :return: List of last n log entries return self.log_entries[-n:]"},{"question":"# Context You have been assigned the task of implementing a function that computes the moving average of a list of data points. The moving average for a particular position is defined as the average of the most recent ( k ) data points (including the current data point). If there are fewer than ( k ) data points available, you compute the average of all available data points up to the current position. # Function Requirements You are required to implement the function `moving_average(data, k)` which calculates the moving average for each data point in `data` with a specified window size `k`. Parameters: - `data` (list of floats): A list of floating-point numbers representing the data points. - `k` (int): An integer representing the window size for calculating the moving average. Returns: - `averages` (list of floats): A list where the ( i )-th element is the moving average of the data points up to the ( i )-th position, considering up to `k` most recent points. Specifics: 1. Use a loop to iterate through the `data` list and compute the moving average for each position. 2. Handle the case where fewer than ( k ) points are available by averaging all available points up to the current position. # Example ```python data = [1.0, 2.0, 3.0, 4.0, 5.0] k = 3 # Expected output: list of moving averages averages = moving_average(data, k) print(averages) # Output: [1.0, 1.5, 2.0, 3.0, 4.0] ```","solution":"def moving_average(data, k): Calculates the moving average for each data point in the given list using a specified window size k. Parameters: data (list of floats): The list of data points. k (int): The window size for calculating the moving average. Returns: list of floats: The list of moving averages. averages = [] for i in range(len(data)): start_idx = max(0, i - k + 1) window = data[start_idx:i + 1] averages.append(sum(window) / len(window)) return averages"},{"question":"You are required to implement a function called `simulate_market` that simulates the stock trading of a portfolio over a given number of days. The function should account for random daily returns, reinvestment of returns, and display the portfolio\'s growth over time through a plot. The objective of this task is to provide an overview of how to use Monte Carlo methods for financial simulations and use `matplotlib` to visualize the results. Your function `simulate_market` should: 1. Generate random daily returns for the portfolio over the specified number of days using `numpy`. 2. Calculate the cumulative returns by reinvesting previous returns into the portfolio. 3. Print the final value of the portfolio after the simulation. 4. Use `matplotlib` to plot the daily value of the portfolio. Parameters: - `initial_value`: The initial value of the portfolio. - `num_days`: The number of days to simulate. - `mean_return`: The mean daily return of the portfolio. - `std_dev`: The standard deviation of daily returns. - `seed`: A random seed for reproducibility purposes. You should specifically make use of the following functions from the required libraries: - `matplotlib.pyplot.plot()` - `matplotlib.pyplot.xlabel()` - `matplotlib.pyplot.ylabel()` - `matplotlib.pyplot.title()` - `numpy.random.seed()` - `numpy.random.normal()` - `numpy.cumprod()` # Function Definition: ```python def simulate_market(initial_value, num_days, mean_return, std_dev, seed): # Your code here ``` # Example Usage: ```python initial_value = 1000 num_days = 365 mean_return = 0.0005 std_dev = 0.01 seed = 42 simulate_market(initial_value, num_days, mean_return, std_dev, seed) ```","solution":"import numpy as np import matplotlib.pyplot as plt def simulate_market(initial_value, num_days, mean_return, std_dev, seed): Simulate stock market trading of a portfolio over a given number of days. Parameters: - initial_value (float): Initial value of the portfolio. - num_days (int): Number of days to simulate. - mean_return (float): Mean daily return of the portfolio. - std_dev (float): Standard deviation of daily returns. - seed (int): Random seed for reproducibility purposes. Returns: - None np.random.seed(seed) # Generate random daily returns, assuming they\'re normally distributed daily_returns = np.random.normal(loc=mean_return, scale=std_dev, size=num_days) # Calculate the daily value of the portfolio: initial value * (1 + daily return) daily_portfolio_values = initial_value * np.cumprod(1 + daily_returns) # Print the final value of the portfolio final_value = daily_portfolio_values[-1] print(f\\"Final portfolio value after {num_days} days: {final_value:.2f}\\") # Plot the daily value of the portfolio plt.plot(daily_portfolio_values) plt.xlabel(\'Days\') plt.ylabel(\'Portfolio Value ()\') plt.title(\'Portfolio Growth Over Time\') plt.show()"},{"question":"** Create a function `merge_sorted_arrays` that takes in two pre-sorted arrays (in non-decreasing order) and returns a single array that contains all the elements from both input arrays, sorted in non-decreasing order. The specific requirements are: - **Input:** - `arr1`: A list of integers, sorted in non-decreasing order. - `arr2`: A list of integers, sorted in non-decreasing order. - **Output:** - A single list of integers, containing all elements from `arr1` and `arr2`, sorted in non-decreasing order. **Note:** - Your implementation should have a linear runtime complexity, O(n). **Example Usage:** ```python # Merge two sorted arrays result = merge_sorted_arrays([1, 3, 5], [2, 4, 6]) print(result) # Output: [1, 2, 3, 4, 5, 6] result = merge_sorted_arrays([1, 2, 3], [4, 5, 6]) print(result) # Output: [1, 2, 3, 4, 5, 6] result = merge_sorted_arrays([], [1, 2, 3]) print(result) # Output: [1, 2, 3] ``` **Hint:** - Use two pointers to traverse both arrays and build the result array step-by-step. - Carefully handle edge cases where one or both arrays might be empty. Here\'s the function signature: ```python def merge_sorted_arrays(arr1: list[int], arr2: list[int]) -> list[int]: ```","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Args: arr1 (list of int): First sorted array. arr2 (list of int): Second sorted array. Returns: list of int: Merged sorted array. i, j = 0, 0 merged = [] while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # If there are remaining elements in arr1 while i < len(arr1): merged.append(arr1[i]) i += 1 # If there are remaining elements in arr2 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"Write a function `balance_parentheses(expression)` that accepts a string `expression` containing parentheses: \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. The function should determine whether the parentheses in the given expression are balanced. A balanced string of parentheses is defined as every opening parenthesis having a corresponding and properly nested closing parenthesis. The function should return: - `True` if the parentheses are balanced, - `False` otherwise. For example: - `balance_parentheses(\\"()\\")` should return `True`. - `balance_parentheses(\\"([{}])\\")` should return `True`. - `balance_parentheses(\\"({[)])\\")` should return `False`. - `balance_parentheses(\\"(()\\")` should return `False`. To solve this problem, you can use a stack data structure to keep track of the opening parentheses and ensure they match the corresponding closing parentheses.","solution":"def balance_parentheses(expression): Determines if the parentheses in the given expression are balanced. stack = [] matching_paren = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in expression: if char in matching_paren.values(): stack.append(char) elif char in matching_paren: if stack == [] or stack[-1] != matching_paren[char]: return False stack.pop() return stack == []"},{"question":"As a software engineer, you are often required to process and analyze log files. A common task is to extract and summarize specific information from these logs. In this task, you will analyze a log file to find the IP address that appears the most. You are provided with a list of strings representing log file entries. Each entry contains an IP address followed by a space and a message. Your task is to write a function named `find_most_common_ip` that performs the following: 1. Reads the list of log entries. 2. Determines the IP address that appears most frequently in the logs. The function should return the most common IP address. If there is a tie, return any one of the most common IP addresses. # Function Signature ```python def find_most_common_ip(logs: list) -> str: pass ``` # Example Suppose the `logs` is as follows: ```python logs = [ \'192.168.1.1 User logged in\', \'192.168.1.2 User failed to login\', \'192.168.1.1 User logged out\', \'192.168.1.3 User logged in\', \'192.168.1.1 User logged in\' ] ``` Calling `find_most_common_ip(logs)` should return: ```python \'192.168.1.1\' ``` # Constraints: - The input list will always contain at least one log entry. - Each log entry will start with a valid IPv4 address followed by a space and a message. - The log entries will be well-formed and no validation is required.","solution":"def find_most_common_ip(logs: list) -> str: from collections import Counter ip_counter = Counter() for log in logs: ip_address = log.split(\' \')[0] ip_counter[ip_address] += 1 most_common_ip = ip_counter.most_common(1)[0][0] return most_common_ip"},{"question":"You are tasked with writing a function named `look_and_say` that generates the first `n` terms of the look-and-say sequence. The look-and-say sequence is a series of integers where each term is derived from describing the previous term. Starting from the string \\"1\\", each subsequent term is generated by reading off the digits of the previous term, counting the number of digits in groups of the same digit. For example, the term after \\"1\\" is \\"11\\" (one 1), the term after \\"11\\" is \\"21\\" (two 1s), the term after \\"21\\" is \\"1211\\" (one 2, then one 1), and so on. The `look_and_say(n)` function should: 1. **Input**: Take an integer `n` representing the number of terms to generate. 2. **Output**: Return a list containing the first `n` terms in the look-and-say sequence as strings. 3. **Implementation Details**: - Start from the base term \\"1\\". - For each subsequent term, process the current term by reading off the digits in groups. - Generate the next term by counting the number of each digit in the group and appending the count followed by the digit to the next term. 4. **Examples**: - `look_and_say(1)` should return [\\"1\\"] - `look_and_say(2)` should return [\\"1\\", \\"11\\"] - `look_and_say(5)` should return [\\"1\\", \\"11\\", \\"21\\", \\"1211\\", \\"111221\\"] Implement the `look_and_say` function keeping in mind the efficiency of processing each term to generate the next term in the sequence.","solution":"def look_and_say(n): Generates the first n terms of the look-and-say sequence. Parameters: n (int): the number of terms to generate Returns: list of str: the first n terms of the look-and-say sequence if n <= 0: return [] result = [\\"1\\"] for _ in range(n - 1): current_term = result[-1] next_term = [] i = 0 while i < len(current_term): count = 1 while i + 1 < len(current_term) and current_term[i] == current_term[i + 1]: i += 1 count += 1 next_term.append(str(count) + current_term[i]) i += 1 result.append(\'\'.join(next_term)) return result"},{"question":"Develop a function `chunked_average` that processes large datasets efficiently by dividing the data into smaller chunks and calculating the average of a specified column within each chunk. This method can be particularly useful for handling big data that cannot fit into memory all at once. The function should ensure that the entire dataset is processed and aggregated accurately. # Function Specifications 1. **Function Signature**: ```python def chunked_average(data, chunk_size, column): ``` 2. **Parameters**: - `data` (DataFrame): The dataset containing the data. - `chunk_size` (int): The number of rows in each chunk. - `column` (str): The column name whose average is to be calculated. 3. **Functionality**: - Verify that `chunk_size` is at least 1, raising a `ValueError` if not. - Initialize a list to store chunk averages. - Use an iterator to divide the dataframe into chunks of the specified size. - Calculate the mean of the specified column for each chunk and store the result in the list. - Return the list of chunk averages. 4. **Efficiency Requirements**: - Handle large datasets that do not fit into memory by processing the data in chunks. - Ensure there is minimal memory overhead while processing. # Example Usage: ```python import pandas as pd import numpy as np # Sample data data_size = 10000 data = pd.DataFrame({ \'Values\': np.random.rand(data_size) }) # Example usage of function averages = chunked_average(data, 1000, \'Values\') ```","solution":"import pandas as pd def chunked_average(data, chunk_size, column): Calculate the average of a specified column within each chunk of the dataframe. Parameters: - data (DataFrame): The dataset containing the data. - chunk_size (int): The number of rows in each chunk. - column (str): The column name whose average is to be calculated. Returns: - List[float]: A list of averages for each chunk. Raises: - ValueError: If chunk_size is less than 1. if chunk_size < 1: raise ValueError(\\"chunk_size must be at least 1\\") chunk_averages = [] for start in range(0, len(data), chunk_size): chunk = data.iloc[start:start + chunk_size] chunk_avg = chunk[column].mean() chunk_averages.append(chunk_avg) return chunk_averages"},{"question":"You are asked to implement a function that takes a list of integers as input and returns a dictionary. The dictionary should contain two keys: `mean_positive` and `mean_negative`. The `mean_positive` key should map to the mean (average) of all positive integers in the list, and the `mean_negative` key should map to the mean (average) of all negative integers in the list. If there are no positive or negative integers in the list, their respective values in the dictionary should be `None`. **Function Signature** ```python def calculate_mean_of_elements(nums: list) -> dict: pass ``` **Function Details:** 1. **Input:** - A list of integers `nums`. 2. **Processing:** - Separate the positive integers and negative integers from the list. - Calculate the mean of positive and negative integers separately. 3. **Condition:** - If there are no positive integers, `mean_positive` should be `None`. - If there are no negative integers, `mean_negative` should be `None`. 4. **Output:** - Return a dictionary with keys `mean_positive` and `mean_negative`. **Example:** ```python # Example usage: nums = [1, -1, 2, -2, 3, -3] print(calculate_mean_of_elements(nums)) # Output: {\'mean_positive\': 2.0, \'mean_negative\': -2.0} nums = [1, 2, 3, 4] print(calculate_mean_of_elements(nums)) # Output: {\'mean_positive\': 2.5, \'mean_negative\': None} nums = [-1, -2, -3, -4] print(calculate_mean_of_elements(nums)) # Output: {\'mean_positive\': None, \'mean_negative\': -2.5} nums = [] print(calculate_mean_of_elements(nums)) # Output: {\'mean_positive\': None, \'mean_negative\': None} ```","solution":"def calculate_mean_of_elements(nums: list) -> dict: Returns a dictionary with the mean of positive and negative integers in the list. Parameters: nums (list): A list of integers. Returns: dict: A dictionary with keys \'mean_positive\' and \'mean_negative\'. positive_numbers = [num for num in nums if num > 0] negative_numbers = [num for num in nums if num < 0] mean_positive = sum(positive_numbers) / len(positive_numbers) if positive_numbers else None mean_negative = sum(negative_numbers) / len(negative_numbers) if negative_numbers else None return {\'mean_positive\': mean_positive, \'mean_negative\': mean_negative}"},{"question":"**Write a function `rotate_right` that rotates a given list of integers to the right by a specified number of steps. The rotation means that elements moved off the end of the list should be reinserted at the beginning. Implement this function without using slicing operations or the built-in `rotate` function from any library. Function Signature: ```python def rotate_right(arr: list, steps: int) -> list: pass ``` # Parameters: - `arr` (list): A list of integers. - `steps` (int): The number of positions to rotate the list to the right. # Returns: - A list of integers representing the rotated list. # Constraints: - The input list can contain up to 10^5 elements. - The number of steps can be any non-negative integer. # Example: ```python arr = [1, 2, 3, 4, 5] steps = 2 print(rotate_right(arr, steps)) # Output: [4, 5, 1, 2, 3] ``` In this example, the list `[1, 2, 3, 4, 5]` is rotated 2 steps to the right, resulting in `[4, 5, 1, 2, 3]`. # Additional Notes: - Handle cases where `steps` is greater than the length of the list. - Ensure the function works efficiently for large lists. ---","solution":"def rotate_right(arr: list, steps: int) -> list: Rotate the list to the right by the given number of steps. Args: arr (list): A list of integers. steps (int): The number of positions to rotate the list to the right. Returns: list: The rotated list. if not arr: return arr n = len(arr) steps = steps % n if steps == 0: return arr for _ in range(steps): last = arr.pop() arr.insert(0, last) return arr"},{"question":"In this problem, you will design a function to find the Least Common Ancestor (LCA) in a Binary Search Tree (BST). The LCA of two nodes in a BST is defined as the deepest node that has both the given nodes as its descendants. In other words, the LCA of two nodes ( n1 ) and ( n2 ) is the deepest node ( x ) such that both ( n1 ) and ( n2 ) are in the subtree rooted at ( x ). You are given the root of the BST and two integer values representing the nodes for which you need to find the LCA. Assume that all BST nodes have unique values. **Function Signature:** ```python def find_lca(root: TreeNode, n1: int, n2: int) -> TreeNode: ``` **Parameters:** 1. `root` (TreeNode): The root node of the BST. 2. `n1` (int): The value of the first node. 3. `n2` (int): The value of the second node. **Returns:** - The TreeNode representing the LCA of the two nodes. **Definition for a binary tree node:** ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` **Example:** Given the BST: [ 20 / 10 30 / 5 15 / 3 7 17 ] and `n1 = 7`, `n2 = 15`, Calling `find_lca(root, 7, 15)` should return the TreeNode with `val` 10. **Constraints:** - All BST nodes will have unique values. - There can be at most 10^4 nodes in the BST. - `n1` and `n2` are guaranteed to be present in the BST.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def find_lca(root: TreeNode, n1: int, n2: int) -> TreeNode: Finds the least common ancestor of two nodes in a BST. # Traverse the tree while root: # If both n1 and n2 are smaller than root, then LCA lies in left if root.val > n1 and root.val > n2: root = root.left # If both n1 and n2 are greater than root, then LCA lies in right elif root.val < n1 and root.val < n2: root = root.right else: # This is the split point and hence this is the LCA return root"},{"question":"Given a problem of sorting a nearly sorted array, you need to sort an array in which each element is at most `k` positions away from its target position. You are given an integer `k` and an array `nums` of length `n`. Write a function **`sort_nearly_sorted_array(nums: List[int], k: int) -> List[int]`** to sort the array efficiently. Requirements: - Utilize a min-heap (priority queue) to achieve efficient sorting. - You may assume that `k` is a non-negative integer and that `nums` contains integers only. # Example 1: ```plaintext Input: nums = [2, 1, 5, 4, 3, 7, 6, 9, 8] k = 3 Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] Explanation: Each element is at most 3 positions away from its target position. ``` # Example 2: ```plaintext Input: nums = [6, 5, 3, 2, 8, 10, 9] k = 3 Output: [2, 3, 5, 6, 8, 9, 10] Explanation: Each element is at most 3 positions away from its target position. ``` # Constraints: - `1 <= len(nums) <= 10000` - `0 <= k < len(nums)` - `nums` is an array of integers where each integer is between `-10^4` and `10^4`.","solution":"import heapq from typing import List def sort_nearly_sorted_array(nums: List[int], k: int) -> List[int]: Sorts a nearly sorted array where each element is at most k positions away from its target position using a min-heap. Parameters: nums (List[int]): The nearly sorted array. k (int): The maximum distance each element is from its correct position. Returns: List[int]: The sorted array. n = len(nums) if n == 0: return [] # Initialize a min-heap with the first k+1 elements min_heap = nums[:k+1] heapq.heapify(min_heap) sorted_index = 0 for i in range(k+1, n): nums[sorted_index] = heapq.heappop(min_heap) heapq.heappush(min_heap, nums[i]) sorted_index += 1 while min_heap: nums[sorted_index] = heapq.heappop(min_heap) sorted_index += 1 return nums"},{"question":"You are required to implement a function called `find_unique_elements` that extracts the unique elements from a list and returns them in a new list. The function should follow these requirements: **Function Signature:** ```python def find_unique_elements(items: list) -> list: ``` **Parameters:** - `items` (list): A list of elements (integers or strings) from which unique elements need to be extracted. **Behavior:** 1. The function should iterate through the provided list and identify elements that appear only once in the list. 2. Return a new list containing these unique elements, preserving the order of their first appearance in the original list. 3. If `items` is an empty list, return an empty list. 4. You may not use any collections library for this task (such as collections.Counter or collections.OrderDict). 5. Optimize the function to handle large lists efficiently within a reasonable time frame. **Examples:** ```python find_unique_elements([1, 2, 2, 3, 4, 4, 5]) # Output: [1, 3, 5] find_unique_elements([\'a\', \'b\', \'a\', \'c\', \'b\']) # Output: [\'c\'] find_unique_elements([7, 8, 8, 9, 7, 10]) # Output: [9, 10] find_unique_elements([]) # Output: [] ```","solution":"def find_unique_elements(items): Iterates over the provided list and identifies elements that appear only once in the list. Returns a new list containing these unique elements, preserving the order of their first appearance in the original list. if not items: return [] element_count = {} for item in items: if item in element_count: element_count[item] += 1 else: element_count[item] = 1 unique_elements = [item for item in items if element_count[item] == 1] return unique_elements"},{"question":"You are provided with a 2D grid of integers representing land (1) and water (0). Your objective is to write a function named `max_connected_land` that finds the size of the largest connected land area in the grid. Two cells are considered connected if they are adjacent horizontally, vertically, or diagonally. The function signature should be: ```python def max_connected_land(grid): ``` Here, `grid` is a list of lists of integers representing the 2D grid. To achieve this, follow these steps: 1. Use a Depth-First Search (DFS) or Breadth-First Search (BFS) approach to explore all the connected land areas in the grid. 2. Keep track of the maximum size of a connected land area encountered during the search. Function behavior is illustrated as follows: - Consider a 5x5 grid: ``` grid = [ [1, 0, 0, 1, 0], [1, 1, 0, 0, 0], [0, 1, 0, 0, 1], [0, 0, 0, 1, 1], [1, 0, 1, 0, 0] ] ``` The largest connected land area size is 4. The main function `max_connected_land` must return an integer representing the size of this largest connected land area. ```python def max_connected_land(grid): # Your implementation here ```","solution":"def max_connected_land(grid): Finds the size of the largest connected land area in the grid. if not grid or not grid[0]: return 0 max_size = 0 rows, cols = len(grid), len(grid[0]) def dfs(r, c): if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == 0: return 0 grid[r][c] = 0 # mark as visited size = 1 for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]: size += dfs(r + dr, c + dc) return size for i in range(rows): for j in range(cols): if grid[i][j] == 1: max_size = max(max_size, dfs(i, j)) return max_size"},{"question":"Create a function named `find_longest_substring` that takes an input string and returns the longest substring without repeating characters. The function should identify and return the first such substring it encounters if there are multiple with the same maximum length. The solution should consider only contiguous substrings. To achieve this, you may utilize data structures such as sets and leverage sliding window techniques to maintain the current substring being examined. Please utilize the following signature for the implementation: ```python def find_longest_substring(s: str) -> str: pass ``` *Example:* ```python print(find_longest_substring(\\"abcabcbb\\")) # Output: \\"abc\\" print(find_longest_substring(\\"bbbbb\\")) # Output: \\"b\\" print(find_longest_substring(\\"pwwkew\\")) # Output: \\"wke\\" print(find_longest_substring(\\"\\")) # Output: \\"\\" ```","solution":"def find_longest_substring(s: str) -> str: Returns the longest substring without repeating characters. if not s: return \\"\\" start = 0 max_length = 0 max_substr = \\"\\" char_index = {} for end in range(len(s)): if s[end] in char_index and char_index[s[end]] >= start: start = char_index[s[end]] + 1 char_index[s[end]] = end if (end - start + 1) > max_length: max_length = end - start + 1 max_substr = s[start:end + 1] return max_substr"},{"question":"This function takes a dictionary containing multiple time series data, creates a new time series by summing the values of all series at each time point, and plots the resulting series using matplotlib. It then calculates and prints the mean and standard deviation of the resulting series. The function showcases basic data manipulation, visualization, and statistical analysis. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt import numpy as np def task_func(time_series_dict): def aggregate_and_analyze_time_series(time_series_dict): ```","solution":"import matplotlib.pyplot as plt import numpy as np def aggregate_and_analyze_time_series(time_series_dict): Aggregates multiple time series by summing the values at each time point, plots the resulting series, and calculates and prints the mean and standard deviation of the resulting series. Parameters: time_series_dict (dict): Dictionary containing multiple time series data. The keys are time points and the values are lists of values corresponding to each time point. Returns: tuple: (mean, standard deviation) of the aggregated time series. # Aggregate the time series data aggregated_series = {time_point: sum(values) for time_point, values in time_series_dict.items()} # Extract the time points and the corresponding aggregated values time_points = sorted(aggregated_series.keys()) aggregated_values = [aggregated_series[time_point] for time_point in time_points] # Plot the aggregated time series plt.figure(figsize=(10, 6)) plt.plot(time_points, aggregated_values, marker=\'o\') plt.title(\'Aggregated Time Series\') plt.xlabel(\'Time\') plt.ylabel(\'Aggregated Values\') plt.grid(True) plt.show() # Calculate mean and standard deviation mean_value = np.mean(aggregated_values) std_value = np.std(aggregated_values) print(f\\"Mean of aggregated series: {mean_value}\\") print(f\\"Standard deviation of aggregated series: {std_value}\\") return mean_value, std_value"},{"question":"Your task is to implement a function `merge_sorted_dictionaries` that merges two dictionaries containing sorted lists as values into a new dictionary. The merged lists of each key should remain sorted. The function signature is as follows: ```python def merge_sorted_dictionaries( dict1: dict, dict2: dict ) -> dict: ``` - `dict1` (dict): The first dictionary with sorted lists as values. - `dict2` (dict): The second dictionary with sorted lists as values. The function should merge these dictionaries by: 1. Combining the values of matching keys into a single sorted list. 2. Adding non-matching keys from either dictionary directly to the result. # Example Given `dict1` and `dict2` as: ```python dict1 = { \\"a\\": [1, 3, 5], \\"b\\": [2, 4, 6] } dict2 = { \\"a\\": [2, 3, 6], \\"c\\": [0, 9] } ``` The function should return: ```python { \\"a\\": [1, 2, 3, 3, 5, 6], \\"b\\": [2, 4, 6], \\"c\\": [0, 9] } ``` # Constraints 1. All lists in the input dictionaries are sorted. 2. The result dictionary must have values sorted for each key. 3. The function should handle dictionaries with any combination of keys (i.e., dict1 and dict2 may have completely different sets of keys). # Requirements - Use appropriate list merging techniques to ensure efficiency. - Do not use any external libraries for the merging or sorting beyond standard Python libraries. - Handle empty lists gracefully.","solution":"def merge_sorted_dictionaries( dict1: dict, dict2: dict ) -> dict: Merge two dictionaries with sorted lists as values. The merged dictionary retains sorted lists for each key. merged_dict = {} # Combine all keys from both dictionaries all_keys = set(dict1.keys()).union(dict2.keys()) for key in all_keys: list1 = dict1.get(key, []) list2 = dict2.get(key, []) # Merge the two lists while maintaining sorted order merged_list = merge_sorted_lists(list1, list2) merged_dict[key] = merged_list return merged_dict def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements, if any while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"In this problem, you are asked to implement a function named `validate_xml` that takes a string containing XML data and verifies whether the XML is properly formatted and its tags are correctly nested. The function should return `True` if the XML is well-formed and `False` otherwise. You should manually parse and validate the XML string without using any external libraries for parsing XML. A well-formed XML string: - Contains matching opening and closing tags. - Tags are properly nested without any overlap. - Self-closing tags are allowed (`<tag/>`). Here is the signature for the function you will implement: ```python def validate_xml(xml_str): Validate whether an XML string is well-formed. Parameters: xml_str (str): The XML string to be validated. Returns: bool: True if the XML is well-formed, False otherwise. ``` Guidelines: 1. Identify and validate opening, closing, and self-closing tags. 2. Use a stack to keep track of the nested structure of the tags. 3. Ensure that each closing tag matches the most recent unmatched opening tag and that all tags are properly closed. Example usage: ```python xml_str1 = \\"<root><child></child></root>\\" xml_str2 = \\"<root><child></root></child>\\" xml_str3 = \\"<root><child/></root>\\" print(validate_xml(xml_str1)) # Expected output: True print(validate_xml(xml_str2)) # Expected output: False print(validate_xml(xml_str3)) # Expected output: True ``` Hints: - Use regular expressions to identify tags within the XML string. - Make sure to handle edge cases, such as nested tags and self-closing tags.","solution":"import re def validate_xml(xml_str): Validate whether an XML string is well-formed. Parameters: xml_str (str): The XML string to be validated. Returns: bool: True if the XML is well-formed, False otherwise. tag_pattern = re.compile(r\'<(/?)(w+)(/?)>\') stack = [] for match in tag_pattern.finditer(xml_str): is_closing, tag_name, is_self_closing = match.groups() if is_self_closing: continue if is_closing: if not stack or stack[-1] != tag_name: return False stack.pop() else: stack.append(tag_name) return not stack"},{"question":"Implement a function that takes a list of tuples, representing transactions of items (item ID, item name, item quantity, item price), and calculates the total revenue generated by each unique item (based on item name). The function should return a dictionary with the item names as keys and the total revenue as values. **Required Function:** ```python def calculate_revenue(transactions): Given a list of tuples representing transactions, this function calculates the total revenue generated for each unique item based on item name. Parameters: - transactions (list): A list of tuples, where each tuple contains: - item ID (int) - item name (str) - item quantity (int) - item price (float) Returns: dict: A dictionary where keys are item names and values are the total revenue generated by that item. pass ``` **Instructions:** 1. Iterate over the list of transactions. 2. For each transaction, extract the item name, quantity, and price. 3. Calculate the revenue for each transaction as `quantity * price`. 4. Update the total revenue for each unique item name in the dictionary. 5. Return the dictionary with the total revenue per item. Example Input: ```python transactions = [ (1, \\"Apple\\", 10, 0.5), (2, \\"Banana\\", 5, 0.2), (3, \\"Apple\\", 7, 0.5), (4, \\"Orange\\", 3, 1.0), (5, \\"Banana\\", 2, 0.2) ] ``` Example Output: ```python { \\"Apple\\": 8.5, # (10 * 0.5) + (7 * 0.5) \\"Banana\\": 1.4, # (5 * 0.2) + (2 * 0.2) \\"Orange\\": 3.0 # (3 * 1.0) } ```","solution":"def calculate_revenue(transactions): Given a list of tuples representing transactions, this function calculates the total revenue generated for each unique item based on item name. Parameters: - transactions (list): A list of tuples, where each tuple contains: - item ID (int) - item name (str) - item quantity (int) - item price (float) Returns: dict: A dictionary where keys are item names and values are the total revenue generated by that item. revenue_dict = {} for tid, item_name, quantity, price in transactions: if item_name in revenue_dict: revenue_dict[item_name] += quantity * price else: revenue_dict[item_name] = quantity * price return revenue_dict"},{"question":"Your task is to implement a function named `generate_invoice` that performs various invoice-related tasks using the `pandas` library. This will involve reading data from a CSV file, processing the data to compute totals, and generating a structured report of invoices. This exercise helps you practice data loading, manipulation, and organization with pandas. Here are the detailed steps your function should perform: 1. **Load Invoice Data**: - The CSV file named \'invoices.csv\' contains columns \'invoice_id\', \'product\', \'quantity\', \'price_per_unit\', \'total\'. Each invoice has multiple products associated with it. 2. **Calculate Totals**: - For each invoice (identified by \'invoice_id\'), compute the total quantity of items and the total price (quantity multiplied by price per unit) for each product if not provided. If \'total\' is already present, verify its correctness. If any discrepancies are found, correct the total and log the invoice_id and the product name that had the error. 3. **Generate Report**: - Create a new DataFrame summarizing each invoice with \'invoice_id\', \'total_quantity\', and \'total_price\'. - Sort this summary DataFrame by \'invoice_id\' in ascending order. 4. **Save Processed Invoice Summary**: - Save the summary DataFrame to a new CSV file named \'invoice_summary.csv\'. 5. **Log Discrepancies**: - Save the list of discrepancies, if any, to \'discrepancies.log\'. Each entry should include the \'invoice_id\' and the corresponding \'product\' that had a correction. Your function `generate_invoice` should efficiently process the data and handle any discrepancies as described, producing a summary report and logging errors appropriately. **Function Signature**: ```python def generate_invoice() -> None: # Your implementation here ``` **Example**: Assuming the following data in \'invoices.csv\': ``` invoice_id,product,quantity,price_per_unit,total 1,Widget,4,2.5,10.0 1,Gadget,2,3.0,6.0 2,Widget,5,2.5,12.5 # Discrepancy here (total should be 12.5, value given is incorrect) ``` After processing, \'invoice_summary.csv\' should look like: ``` invoice_id,total_quantity,total_price 1,6,16.0 2,5,12.5 ``` And \'discrepancies.log\' should include: ``` 2,Widget ```","solution":"import pandas as pd def generate_invoice(): # Read the CSV file df = pd.read_csv(\'invoices.csv\') # Check and correct the \'total\' column if there are discrepancies discrepancies = [] for index, row in df.iterrows(): calculated_total = row[\'quantity\'] * row[\'price_per_unit\'] if row[\'total\'] != calculated_total: # Log the discrepancy discrepancies.append({\'invoice_id\': row[\'invoice_id\'], \'product\': row[\'product\']}) # Correct the total df.at[index, \'total\'] = calculated_total # Summarize each invoice with \'invoice_id\', \'total_quantity\', and \'total_price\' summary = df.groupby(\'invoice_id\').agg( total_quantity=pd.NamedAgg(column=\'quantity\', aggfunc=\'sum\'), total_price=pd.NamedAgg(column=\'total\', aggfunc=\'sum\') ).reset_index() # Sort the summary DataFrame by \'invoice_id\' in ascending order summary = summary.sort_values(by=\'invoice_id\') # Save the summary DataFrame to \'invoice_summary.csv\' summary.to_csv(\'invoice_summary.csv\', index=False) # Save the discrepancies to \'discrepancies.log\' discrepancies_df = pd.DataFrame(discrepancies) discrepancies_df.to_csv(\'discrepancies.log\', index=False, header=False)"},{"question":"Create a function called `generate_fibonacci(n)` that generates the first `n` numbers in the Fibonacci sequence. The Fibonacci sequence is a series of numbers where the next number is found by adding up the two numbers before it, starting with 0 and 1. Requirements: 1. The function should take an integer `n` as its parameter. 2. If `n` is 0, the function should return an empty list. 3. If `n` is 1, the function should return a list containing only the first Fibonacci number [0]. 4. For any other positive integer `n`, the function should return a list containing the first `n` Fibonacci numbers. 5. The sequence starts with [0, 1], and the subsequent numbers are the sum of the previous two. 6. You may not use any external libraries. Example: ```python def generate_fibonacci(n): if n == 0: return [] elif n == 1: return [0] fibonacci_list = [0, 1] for i in range(2, n): next_fib = fibonacci_list[-1] + fibonacci_list[-2] fibonacci_list.append(next_fib) return fibonacci_list # Example usage n = 5 result = generate_fibonacci(n) # Expected output: # [0, 1, 1, 2, 3] ``` Implement the function `generate_fibonacci(n)` to achieve this functionality.","solution":"def generate_fibonacci(n): Generates the first `n` numbers in the Fibonacci sequence. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first `n` Fibonacci numbers. if n == 0: return [] elif n == 1: return [0] fibonacci_list = [0, 1] for i in range(2, n): next_fib = fibonacci_list[-1] + fibonacci_list[-2] fibonacci_list.append(next_fib) return fibonacci_list"},{"question":"You are assigned with developing a simple expense tracker application that records expenses and calculates the total amount spent. The goal is to automate this process using Python dictionaries. You\'ll create a function named `add_expense` that records an expense with a given category and amount, and another function named `calculate_total_expenses` that sums up all expenses. Each expense will have a category (such as \\"food\\", \\"transport\\", \\"entertainment\\") and an associated amount. The `add_expense` function should store these expenses in a dictionary where the keys are the categories and the values are lists of amounts. The `calculate_total_expenses` function should sum up all amounts across all categories. The functions should have the following signatures: ```python def add_expense(expenses: dict[str, list[float]], category: str, amount: float): pass def calculate_total_expenses(expenses: dict[str, list[float]]) -> float: pass ``` **Requirements**: Use standard Python data structures and ensure the functions correctly update and retrieve information from the dictionary provided. **Example Usage**: ```python expenses = {} add_expense(expenses, \\"food\\", 10.50) add_expense(expenses, \\"transport\\", 15.75) add_expense(expenses, \\"food\\", 5.25) total = calculate_total_expenses(expenses) print(total) # Output should be 31.50 ``` This should properly record the expenses in the dictionary and calculate the total amount spent.","solution":"def add_expense(expenses: dict[str, list[float]], category: str, amount: float): Records an expense for a given category and amount. If the category does not exist in the expenses dictionary, it creates a new key for that category. :param expenses: A dictionary where keys are categories and values are lists of amounts :param category: The category of the expense (string) :param amount: The amount of the expense (float) if category not in expenses: expenses[category] = [] expenses[category].append(amount) def calculate_total_expenses(expenses: dict[str, list[float]]) -> float: Calculates the total amount of all expenses recorded in the dictionary. :param expenses: A dictionary where keys are categories and values are lists of amounts :return: The total amount of all expenses (float) return sum(sum(amounts) for amounts in expenses.values())"},{"question":"A task management system requires you to develop an algorithm to simulate a simplified task scheduling mechanism. The system has multiple tasks, each with a specific duration and priority. The objective is to find the optimal order to execute these tasks to minimize the overall completion time, considering that higher-priority tasks should be completed earlier. Implement a function `schedule_tasks(tasks)` that takes a list of tuples, where each tuple represents a task with its duration and priority (duration, priority). The function should return a list of tasks ordered by the optimal execution sequence. Steps: 1. Sort the tasks primarily by their priority in descending order. 2. For tasks with the same priority, sort by their duration in ascending order. 3. Return the reordered list of tasks. Example: ```python tasks = [(4, 2), (2, 1), (3, 2), (1, 3)] optimal_order = schedule_tasks(tasks) print(optimal_order) # Output: [(1, 3), (3, 2), (4, 2), (2, 1)] ``` In this example, tasks are represented as tuples where the first element is the duration and the second element is the priority. The function should prioritize tasks with higher priority and, for tasks with equal priority, sort them by their duration. Function Signature ```python def schedule_tasks(tasks: List[Tuple[int, int]]) -> List[Tuple[int, int]]: pass ```","solution":"from typing import List, Tuple def schedule_tasks(tasks: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Schedule tasks to minimize the overall completion time. Higher priority tasks are executed earlier. For tasks with the same priority, shorter duration tasks are executed earlier. Args: tasks (List[Tuple[int, int]]): A list of tuples where each tuple contains two integers: (duration, priority). Returns: List[Tuple[int, int]]: A list of tuples representing the ordered tasks. # Sort tasks: primary by priority (descending), secondary by duration (ascending) return sorted(tasks, key=lambda x: (-x[1], x[0]))"},{"question":"You are asked to implement a function `parse_and_calculate` that takes a list of strings as input. Each string represents a mathematical expression containing two integers and a basic arithmetic operator: addition (+), subtraction (-), multiplication (*), or division (/). The goal is to parse these expressions, perform the calculations, and return a list of results. # Function Signature ```python def parse_and_calculate(expressions: list) -> list: ``` # Input - `expressions`: A list of strings where each string represents a mathematical expression in the form \\"a op b\\" (e.g., \\"3 + 4\\"). # Output - A list of results, one for each expression. Each result should be a floating-point number if the operation is division, otherwise an integer. # Steps to Follow 1. Iterate through each expression in the input list. 2. Parse the expression to extract the integers and the operator. 3. Perform the appropriate arithmetic operation based on the operator. 4. Append the result to the output list, ensuring the type matches the specifications. # Example ```python expressions = [\\"3 + 4\\", \\"10 - 2\\", \\"6 * 7\\", \\"8 / 2\\"] result = parse_and_calculate(expressions) print(result) # Expected Output: [7, 8, 42, 4.0] ``` The primary goal of this problem is to practice string manipulation, parsing, and basic arithmetic operations in Python. Ensure to handle different arithmetic operators correctly and return the results in the specified types.","solution":"def parse_and_calculate(expressions: list) -> list: results = [] for expression in expressions: # Split the expression by spaces to extract parts parts = expression.split() a = int(parts[0]) op = parts[1] b = int(parts[2]) # Perform the operation based on the operator if op == \'+\': result = a + b elif op == \'-\': result = a - b elif op == \'*\': result = a * b elif op == \'/\': result = a / b else: raise ValueError(f\\"Unknown operator: {op}\\") # Append the result to the list results.append(result) return results"},{"question":"A function that reads a CSV file, removes all rows where a specified column\'s value is below a given threshold, and writes the filtered data to a new CSV file with an additional \\"_filtered\\" suffix in its name. The input CSV file path, the column name, and the threshold value are given as parameters. The function should output: str: The filename of the newly created CSV file with filtered data. You should write self-contained code starting with: ``` import csv def filter_csv(input_csv, column_name, threshold): ```","solution":"import csv def filter_csv(input_csv, column_name, threshold): Reads a CSV file, removes all rows where the specified column\'s value is below the given threshold, and writes the filtered data to a new CSV file with an additional \\"_filtered\\" suffix in its name. Parameters: input_csv (str): The path to the input CSV file. column_name (str): The name of the column to filter by. threshold (int or float): The threshold value. Returns: str: The filename of the newly created CSV file with filtered data. output_csv = input_csv.replace(\'.csv\', \'_filtered.csv\') with open(input_csv, mode=\'r\', newline=\'\') as infile, open(output_csv, mode=\'w\', newline=\'\') as outfile: reader = csv.DictReader(infile) writer = csv.DictWriter(outfile, fieldnames=reader.fieldnames) writer.writeheader() for row in reader: if float(row[column_name]) >= threshold: writer.writerow(row) return output_csv"},{"question":"You are asked to implement a function `summarize_expenses` to help users get an overview of their monthly expenses. This function will accept a list of expense records where each record is represented by a dictionary with the following keys: `\'date\'`, `\'amount\'`, and `\'category\'`. The `\'date\'` is a string in the format `YYYY-MM-DD`, the `\'amount\'` is a float representing the expense amount in USD, and the `\'category\'` is a string representing the type of expense (e.g., \\"food\\", \\"transportation\\", \\"entertainment\\"). Your task is to summarize these expenses and print the results. This summary should include: 1. The total expenses for the month. 2. The total expenses per category. 3. The day with the highest spending. 4. The five highest individual expenses and their dates. To achieve this, you are required to use the `datetime` and `collections` libraries in Python. Your `summarize_expenses` function should: 1. Compute the total expenses for the month. 2. Compute the total expenses per category. 3. Determine the day with the highest spending. 4. Identify the five highest individual expenses and their respective dates. The results should then be printed in a well-formatted manner using the `print` function. Here is an example format for the output: ``` Total expenses: 1500.50 Expenses by category: - Food: 450.75 - Transportation: 300.00 - Entertainment: 350.25 Date with highest spending: 2023-05-15 (200.00) Top 5 highest expenses: 1. 150.00 on 2023-05-03 2. 120.00 on 2023-05-07 3. 100.00 on 2023-05-10 4. 80.00 on 2023-05-08 5. 75.00 on 2023-05-14 ``` **Constraints:** - Use the `datetime` library to handle date parsing. - Use the `collections.defaultdict` to handle the categorization of expenses. - Assume all dates in the input list fall within the same month.","solution":"import datetime from collections import defaultdict from typing import List, Dict def summarize_expenses(expense_records: List[Dict[str, str]]): total_expenses = 0.0 category_expenses = defaultdict(float) daily_expenses = defaultdict(float) top_expenses = [] for record in expense_records: date = record[\'date\'] amount = float(record[\'amount\']) category = record[\'category\'] total_expenses += amount category_expenses[category] += amount daily_expenses[date] += amount top_expenses.append((amount, date)) # Determine the day with the highest spending max_spending_day = max(daily_expenses, key=daily_expenses.get) max_spending_amount = daily_expenses[max_spending_day] # Get the top 5 highest individual expenses top_expenses.sort(reverse=True, key=lambda x: x[0]) top_5_expenses = top_expenses[:5] # Print the summary print(f\\"Total expenses: {total_expenses:.2f}\\") print(\\"Expenses by category:\\") for category, amount in category_expenses.items(): print(f\\"- {category.capitalize()}: {amount:.2f}\\") print(f\\"Date with highest spending: {max_spending_day} ({max_spending_amount:.2f})\\") print(\\"Top 5 highest expenses:\\") for idx, (amount, date) in enumerate(top_5_expenses): print(f\\"{idx + 1}. {amount:.2f} on {date}\\")"},{"question":"You are tasked with writing a function named `calculate_median_salary` that reads from a file handle corresponding to a CSV file, processes it by extracting salary information, and calculates the median salary. In this problem, you will need to read the content from a CSV file where each row contains information about an employee, including their salary. You should extract the salaries and calculate the median salary. The CSV file structure is as follows: ``` name, age, department, salary John Doe, 29, Engineering, 70000 Jane Smith, 35, Marketing, 80000 Emily Johnson, 40, Sales, 75000 Michael Brown, 50, Engineering, 90000 Carol White, 45, Sales, 65000 ``` Your function should take an open file handle as its single argument. You must read the CSV file using the `csv.reader` function from the `csv` library. The function should return the median salary as a float. Remember to handle cases where the number of salaries is odd versus even. Function Signature ```python def calculate_median_salary(filehandle) -> float: ``` Example Usage ```python with open(\'employees.csv\', \'r\') as filehandle: median_salary = calculate_median_salary(filehandle) print(median_salary) ``` Expected Output ```python 75000.0 ```","solution":"import csv from statistics import median def calculate_median_salary(filehandle): Reads salary data from a CSV file and calculates the median salary. :param filehandle: An open file handle corresponding to a CSV file. :return: Median salary as a float. reader = csv.reader(filehandle) next(reader) # skip the header row salaries = [int(row[3]) for row in reader] return float(median(salaries))"},{"question":"You are tasked with creating a function named `evaluate_student_scores` that performs the following operations on a list of student scores and their corresponding letter grades: 1. **Statistics Calculation:** Compute and return the average score, highest score, and lowest score from a provided list of student scores. 2. **Grade Assignment:** Assign letter grades based on the computed average score and a grading scale: - A: Score >= average + 10 - B: average <= Score < average + 10 - C: Score >= average - 10 but less than average - D: Score < average - 10 # Function Specification: - **Function Name:** `evaluate_student_scores` - **Parameters:** - `scores` (list): A list of tuples where each tuple contains a student\'s name (str) and their score (int). - **Returns:** 1. A dictionary with the keys `average`, `highest`, and `lowest`, and their corresponding values as the average score, highest score, and lowest score respectively. 2. A list of tuples where each tuple contains a student\'s name and their assigned letter grade. # Example: Suppose the input list of student scores is: ```python students_scores = [ (\\"John\\", 85), (\\"Emma\\", 92), (\\"Sophia\\", 78), (\\"Michael\\", 65), (\\"Olivia\\", 88) ] ``` Calling: ```python evaluate_student_scores(students_scores) ``` The function will return: ```python ( { \'average\': 81.6, \'highest\': 92, \'lowest\': 65 }, [ (\\"John\\", \\"B\\"), (\\"Emma\\", \\"A\\"), (\\"Sophia\\", \\"C\\"), (\\"Michael\\", \\"D\\"), (\\"Olivia\\", \\"B\\") ] ) ``` Ensure that your implementation accurately handles edge cases such as an empty input list or all students having the same score. Provide useful error messages or default values as necessary.","solution":"def evaluate_student_scores(scores): if not scores: return {\\"average\\": 0, \\"highest\\": 0, \\"lowest\\": 0}, [] total_scores = [score for _, score in scores] average_score = sum(total_scores) / len(total_scores) highest_score = max(total_scores) lowest_score = min(total_scores) stats = { \\"average\\": average_score, \\"highest\\": highest_score, \\"lowest\\": lowest_score, } graded_students = [] for name, score in scores: if score >= average_score + 10: grade = \\"A\\" elif average_score <= score < average_score + 10: grade = \\"B\\" elif average_score - 10 <= score < average_score: grade = \\"C\\" else: grade = \\"D\\" graded_students.append((name, grade)) return stats, graded_students"},{"question":"In this problem, you are required to write a function named `find_kth_largest` that returns the k-th largest element in an unsorted list of integers. Your function should handle the following steps: 1. **Input validation**: - Check if the list is empty, and if so, raise a `ValueError` with the message \\"List is empty\\". - Check if `k` is a valid index (i.e., greater than 0 and less than or equal to the number of elements in the list). If not, raise a `ValueError` with the message \\"Invalid value of k\\". 2. **Find the k-th largest integer**: - Sort the list in descending order. - Return the element at the (k-1) index in this sorted list. 3. **Edge Cases**: - An input list with duplicate values. - The smallest possible k value (1) should return the largest element. - The largest possible k value equal to the length of the list should return the smallest element. **Function Signature:** ```python def find_kth_largest(nums: List[int], k: int) -> int: ``` **Libraries Required**: None Example: ```python nums = [3, 2, 1, 5, 6, 4] k = 2 print(find_kth_largest(nums, k)) # Output: 5 nums = [3, 2, 3, 1, 2, 4, 5, 5, 6] k = 4 print(find_kth_largest(nums, k)) # Output: 4 ```","solution":"from typing import List def find_kth_largest(nums: List[int], k: int) -> int: Returns the k-th largest element in an unsorted list of integers. Parameters: nums (List[int]): List of integers. k (int): The position to find the k-th largest element. Returns: int: The k-th largest element. Raises: ValueError: If the list is empty or k is out of valid range. if not nums: raise ValueError(\\"List is empty\\") if k <= 0 or k > len(nums): raise ValueError(\\"Invalid value of k\\") nums.sort(reverse=True) return nums[k-1]"},{"question":"You are tasked with creating a shopping cart system that processes and displays the total cost of items added to the cart, removing items from the cart, and updating the quantity of the items in the cart. Implement a command-line interface (CLI) for users to interact with their shopping cart. The cart should maintain unique items identified by their names. **Function to Implement:** ```python def shopping_cart_interface(): Implement a command-line interface for a shopping cart system to add, remove, update items and display the total cost. ``` **Specifications:** 1. Create a `Cart` class with the following methods: - `add_item(name, price, quantity)`: Adds an item to the cart with its name, price, and quantity. If the item already exists, increase its quantity. - `remove_item(name)`: Removes the item from the cart by its name. - `update_item(name, quantity)`: Updates the quantity of the specified item. Remove the item if the quantity becomes zero. - `get_total()`: Returns the total cost of all items in the cart. - `display_cart()`: Prints the list of items in the cart with their name, quantity, and total price. 2. The CLI should provide the following options to the user: - `1. Add item`: Prompts for item name, price, and quantity. Calls `add_item` method. - `2. Remove item`: Prompts for the item name. Calls `remove_item` method. - `3. Update item quantity`: Prompts for item name and new quantity. Calls `update_item` method. - `4. Display total cost`: Calls `get_total` method and displays the total cost. - `5. Display cart contents`: Calls `display_cart` method to show all items in the cart. - `6. Quit`: Exits the program. Ensure that all user inputs are validated properly where necessary. The `price` should be a positive float and `quantity` should be a positive integer. **Example CLI Interaction:** ``` Welcome to the Shopping Cart System 1. Add item 2. Remove item 3. Update item quantity 4. Display total cost 5. Display cart contents 6. Quit Enter your choice (1-6): 1 Enter item name: Apple Enter item price: 0.50 Enter item quantity: 10 Item added. Enter your choice (1-6): 5 Current Cart: Apple - 10 @ 0.50 each, Total: 5.00 Enter your choice (1-6): 6 Goodbye! ``` Implement the class and function to match the above specifications.","solution":"class Cart: def __init__(self): self.items = {} def add_item(self, name, price, quantity): if name in self.items: self.items[name][\'quantity\'] += quantity else: self.items[name] = {\'price\': price, \'quantity\': quantity} def remove_item(self, name): if name in self.items: del self.items[name] def update_item(self, name, quantity): if name in self.items: if quantity > 0: self.items[name][\'quantity\'] = quantity else: self.remove_item(name) def get_total(self): total = 0.0 for item in self.items.values(): total += item[\'price\'] * item[\'quantity\'] return total def display_cart(self): print(\\"Current Cart:\\") for name, details in self.items.items(): total_price = details[\'price\'] * details[\'quantity\'] print(f\\"{name} - {details[\'quantity\']} @ {details[\'price\']:.2f} each, Total: {total_price:.2f}\\") def shopping_cart_interface(): cart = Cart() while True: print(\\"nWelcome to the Shopping Cart System\\") print(\\"1. Add item\\") print(\\"2. Remove item\\") print(\\"3. Update item quantity\\") print(\\"4. Display total cost\\") print(\\"5. Display cart contents\\") print(\\"6. Quit\\") choice = input(\\"Enter your choice (1-6): \\") if choice == \'1\': name = input(\\"Enter item name: \\") price = float(input(\\"Enter item price: \\")) quantity = int(input(\\"Enter item quantity: \\")) cart.add_item(name, price, quantity) print(\\"Item added.\\") elif choice == \'2\': name = input(\\"Enter item name to remove: \\") cart.remove_item(name) print(\\"Item removed.\\") elif choice == \'3\': name = input(\\"Enter item name to update: \\") quantity = int(input(\\"Enter new quantity: \\")) cart.update_item(name, quantity) print(\\"Item quantity updated.\\") elif choice == \'4\': total = cart.get_total() print(f\\"Total cost: {total:.2f}\\") elif choice == \'5\': cart.display_cart() elif choice == \'6\': print(\\"Goodbye!\\") break else: print(\\"Invalid choice. Please try again.\\")"},{"question":"You are tasked with writing a Python function named `convert_to_lowercase_and_backup()`. This function will traverse all files in a specified directory, convert the contents of each text file to lowercase, save the modified content back to the file, and create a backup copy of the original file in a subdirectory named `backup`. Use the `os` library to manage file operations and directory navigation. # Function Signature: ```python def convert_to_lowercase_and_backup(directory_path: str) -> None: pass ``` # Input: - `directory_path`: A string representing the path of the directory containing the files to be processed. # Behavior: 1. Capture the current working directory using `os.getcwd`. 2. Change to the target directory specified by `directory_path` using `os.chdir`. 3. Create a subdirectory named `backup` if it does not already exist. 4. Iterate through all files in the directory. 5. For each file, read its contents, convert them to lowercase, and save the modified content back to the same file. 6. Create a backup copy of the original file in the `backup` subdirectory. 7. After processing all files, change back to the original working directory. # Constraints: - Ensure the function utilizes `os.getcwd` and `os.chdir` for managing the working directory changes. - Assume that the directory specified by `directory_path` exists and contains only files (no subdirectories). - Do not print any output. The function should only perform the necessary file manipulations and create backups.","solution":"import os import shutil def convert_to_lowercase_and_backup(directory_path: str) -> None: # Capture the current working directory original_cwd = os.getcwd() # Change to the target directory os.chdir(directory_path) # Create a backup subdirectory if it doesn\'t already exist if not os.path.exists(\'backup\'): os.mkdir(\'backup\') # Iterate through all files in the directory for filename in os.listdir(\'.\'): if os.path.isfile(filename): # Create the backup file path backup_file_path = os.path.join(\'backup\', filename) # Read the contents of the file with open(filename, \'r\') as f: contents = f.read() # Write the original content to the backup file with open(backup_file_path, \'w\') as backup_f: backup_f.write(contents) # Convert contents to lowercase lowercase_contents = contents.lower() # Save the modified content back to the original file with open(filename, \'w\') as f: f.write(lowercase_contents) # Change back to the original working directory os.chdir(original_cwd)"},{"question":"You are tasked with developing a Python function that simulates rolling a specified number of six-sided dice. This function will help in modeling various probabilistic scenarios or games involving dice in a computational manner. # Requirements: 1. **Function Name:** `roll_dice` 2. **Input Parameter:** - `num_dice` (int): The number of six-sided dice to roll. 3. **Output:** - A list of integers where each integer represents the result of a single die roll. # Specifics: To simulate a die roll, generate a random integer between 1 and 6 (both inclusive) for each die. # Constraints: - You must use the `random.randint` function from the `random` module to generate the dice roll results. # Example: ```python import random def roll_dice(num_dice): # Your implementation here # Example usage results = roll_dice(5) print(results) ``` Upon calling `roll_dice(5)`, the output should be similar to: ``` [3, 5, 2, 6, 4] ``` # Hints: - Use a loop to generate results for each die. - Ensure that the number of elements in the output list is equal to the number of dice rolled.","solution":"import random def roll_dice(num_dice): Simulates rolling a specified number of six-sided dice. Args: num_dice (int): The number of six-sided dice to roll. Returns: list: A list of integers where each integer represents the result of a single die roll. return [random.randint(1, 6) for _ in range(num_dice)]"},{"question":"You are given a string and your task is to implement a function that checks whether the string is a valid mathematical expression containing parentheses, brackets, and curly braces. The string may contain the characters `(`, `)`, `{`, `}`, `[` and `]`, and you need to ensure every opening character has a matching closing character in the correct order. The specific function you need to implement is `is_valid_expression(expression)`. The function should return `True` if the expression is valid, and `False` otherwise. # Input: - `expression` : A string representing the mathematical expression. # Output: - A boolean value `True` if the expression is valid, `False` otherwise. # Requirements: - You may use collections such as `stack` to help manage the checking of the matched pairs. # Example: Given the following inputs: ```python expression = \\"{[()()]}\\" ``` The function call `is_valid_expression(expression)` should return: ```python True ``` Given the following inputs: ```python expression = \\"{[(])}\\" ``` The function call `is_valid_expression(expression)` should return: ```python False ``` # Constraints: - The input string will have a maximum length of 1000 characters. - The characters in the input string will only be those included in the mentioned set of parentheses. Your task is to complete the function `is_valid_expression(expression)`, adhering to the outlined requirements and constraints. ```python def is_valid_expression(expression): # Your code here pass ```","solution":"def is_valid_expression(expression): Checks whether the given expression containing parentheses, brackets, and curly braces is valid. Each opening character must have a matching closing character in the correct order. Args: expression (str): The input string representing the mathematical expression. Returns: bool: True if the expression is valid, False otherwise. stack = [] matching_pairs = { \')\': \'(\', \']\': \'[\', \'}\': \'{\' } for char in expression: if char in matching_pairs.values(): stack.append(char) elif char in matching_pairs.keys(): if stack == [] or matching_pairs[char] != stack.pop(): return False return stack == []"},{"question":"You are given a collection of city names and distances between each pair of cities. The goal is to determine the shortest tour that visits each city exactly once and returns to the starting city. This problem will help you grasp the Traveling Salesman Problem (TSP) using dynamic programming. Write a function called `shortest_tour` that takes as input a list of city names and a dictionary representing the distances between each pair of cities. The function should compute the shortest possible tour that visits each city exactly once and returns to the starting city. Here is the signature of the function: ```python def shortest_tour(cities: List[str], distances: Dict[Tuple[str, str], float]) -> Tuple[List[str], float]: Solves the Traveling Salesman Problem using dynamic programming. Parameters ---------- cities : List[str] A list containing the names of the cities to visit. distances : Dict[Tuple[str, str], float] A dictionary with key as a tuple of two cities and value as the distance between them. Returns ------- tour : List[str] The order of cities in the shortest tour. total_distance : float The total distance of the shortest tour. # implementation here ``` # Example Given the input: ```python cities = [\\"A\\", \\"B\\", \\"C\\", \\"D\\"] distances = { (\\"A\\", \\"B\\"): 10, (\\"A\\", \\"C\\"): 15, (\\"A\\", \\"D\\"): 20, (\\"B\\", \\"C\\"): 35, (\\"B\\", \\"D\\"): 25, (\\"C\\", \\"D\\"): 30, (\\"B\\", \\"A\\"): 10, (\\"C\\", \\"A\\"): 15, (\\"D\\", \\"A\\"): 20, (\\"C\\", \\"B\\"): 35, (\\"D\\", \\"B\\"): 25, (\\"D\\", \\"C\\"): 30 } ``` The function should return a tuple containing the order of cities in the shortest tour and the total distance of this tour, such as: ```python ([\\"A\\", \\"B\\", \\"D\\", \\"C\\", \\"A\\"], 80) ``` In this example, the shortest tour visiting all cities exactly once and returning to the starting city \\"A\\" is [\\"A\\", \\"B\\", \\"D\\", \\"C\\", \\"A\\"] with a total distance of 80. Your function should correctly compute the shortest tour and its total distance.","solution":"def shortest_tour(cities, distances): from functools import lru_cache # Number of cities and initial bitmask n = len(cities) all_visited = (1 << n) - 1 # City name to index mapping city_to_index = {city: i for i, city in enumerate(cities)} # Distance matrix to use dynamic programming more conveniently dist = [[0] * n for _ in range(n)] for (city1, city2), distance in distances.items(): i, j = city_to_index[city1], city_to_index[city2] dist[i][j] = distance @lru_cache(None) def dp(mask, curr): if mask == all_visited: return dist[curr][0] res = float(\'inf\') for next_city in range(n): if mask & (1 << next_city) == 0: res = min(res, dist[curr][next_city] + dp(mask | (1 << next_city), next_city)) return res def find_path(): mask = 1 curr = 0 path = [\'A\'] while mask != all_visited: next_city = None min_cost = float(\'inf\') for city in range(n): if mask & (1 << city) == 0: cost = dist[curr][city] + dp(mask | (1 << city), city) if cost < min_cost: min_cost = cost next_city = city mask |= (1 << next_city) path.append(cities[next_city]) curr = next_city path.append(cities[0]) return path min_distance = dp(1, 0) tour = find_path() return tour, min_distance"},{"question":"Write a Python function named `compare_sorting_algorithms` to analyze the performance of two different sorting algorithms: `bubble_sort` and `quick_sort`. The function should: 1. Generate five lists of random integers, each consisting of 500 elements, with values ranging between 1 and 1,000, using the `random.sample` function from the `random` library. 2. For each list, measure the time taken by both sorting algorithms to sort the list using the `time.time` function from the `time` library. 3. Print the time taken for each algorithm separately for each list, and clearly delineate results for each iteration. The goal is to compare the efficiency of the two sorting algorithms. The function signature is as follows: ```python def compare_sorting_algorithms(bubble_sort, quick_sort): pass ``` Here\'s a skeleton of the corresponding code: ```python import random import time def compare_sorting_algorithms(bubble_sort, quick_sort): for _ in range(5): original_list = random.sample(range(1, 1001), 500) list_to_sort = original_list[:] start_time = time.time() bubble_sort(list_to_sort) print(\\"--- %s seconds for bubble_sort ---\\" % (time.time() - start_time)) list_to_sort = original_list[:] start_time = time.time() quick_sort(list_to_sort) print(\\"--- %s seconds for quick_sort ---\\" % (time.time() - start_time)) print(\\"-------------------------------------------------\\") ``` You can assume that the functions `bubble_sort` and `quick_sort` are defined elsewhere and will be passed as parameters to `compare_sorting_algorithms`.","solution":"import random import time def bubble_sort(arr): Bubble Sort algorithm implementation. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] def quick_sort(arr): Quick Sort algorithm implementation. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) def compare_sorting_algorithms(bubble_sort, quick_sort): for i in range(5): original_list = random.sample(range(1, 1001), 500) list_to_sort = original_list[:] start_time = time.time() bubble_sort_result = list_to_sort[:] bubble_sort(bubble_sort_result) print(f\\"--- {time.time() - start_time} seconds for bubble_sort in iteration {i+1} ---\\") list_to_sort = original_list[:] start_time = time.time() quick_sort_result = quick_sort(list_to_sort[:]) print(f\\"--- {time.time() - start_time} seconds for quick_sort in iteration {i+1} ---\\") print(\\"-------------------------------------------------\\")"},{"question":"You are tasked with creating a simple stock price analysis tool. You will process a CSV file containing historical stock prices for a given company and calculate some basic metrics. The CSV file structure is as follows: ``` Date,Open,High,Low,Close,Volume YYYY-MM-DD,Value1,Value2,Value3,Value4,Value5 YYYY-MM-DD,Value1,Value2,Value3,Value4,Value5 ... ``` Here\'s what you need to do: 1. Read the CSV file using Python\'s `csv.reader` method. 2. Compute the following metrics: - Average closing price within a specified date range. - The maximum closing price within a specified date range. - The minimum closing price within a specified date range. Write a function named `analyze_stock_prices(csv_file_path, start_date, end_date)` that performs the following: - Reads the CSV file. - Filters data within the given `start_date` and `end_date` range. - Computes the average, maximum, and minimum closing prices within that range. - Returns a dictionary with the computed metrics. Use the `csv.reader` method for reading the CSV file and ensure that you handle the data correctly. Below is a template to get you started with: ```python import csv from datetime import datetime def analyze_stock_prices(csv_file_path, start_date, end_date): # Your implementation here pass ``` Example Usage: ```python results = analyze_stock_prices(\'historical_stock_prices.csv\', \'2021-01-01\', \'2021-12-31\') print(results) ``` Expected Output: ```python { \'average_closing_price\': 150.76, \'max_closing_price\': 200.34, \'min_closing_price\': 100.12 } ``` Make sure to include all necessary error handling and logic to filter and compute the stock price metrics correctly.","solution":"import csv from datetime import datetime def analyze_stock_prices(csv_file_path, start_date, end_date): start_date = datetime.strptime(start_date, \'%Y-%m-%d\') end_date = datetime.strptime(end_date, \'%Y-%m-%d\') closing_prices = [] with open(csv_file_path, \'r\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: current_date = datetime.strptime(row[\'Date\'], \'%Y-%m-%d\') if start_date <= current_date <= end_date: closing_prices.append(float(row[\'Close\'])) if not closing_prices: return { \'average_closing_price\': None, \'max_closing_price\': None, \'min_closing_price\': None } average_closing_price = sum(closing_prices) / len(closing_prices) max_closing_price = max(closing_prices) min_closing_price = min(closing_prices) return { \'average_closing_price\': round(average_closing_price, 2), \'max_closing_price\': max_closing_price, \'min_closing_price\': min_closing_price }"},{"question":"Given an integer array `nums` and an integer `target`, write a function to return the indices of the two numbers such that they add up to `target`. Assume that each input would have exactly one solution, and you may not use the same element twice. Implement this function using a dictionary for an efficient solution. The function should return: list: A list containing the indices of the two numbers adding up to the target. You should write self-contained code starting with: ``` def find_two_sum(nums, target): ```","solution":"def find_two_sum(nums, target): Returns indices of the two numbers in nums that add up to the target. Args: nums (List[int]): List of integers. target (int): Target sum. Returns: List[int]: Indices of the two numbers adding up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return [] # If no two numbers sum up to the target"},{"question":"You are tasked with writing a function that analyzes sales data from a dataset. The dataset is stored in a CSV file named `sales.csv`. Each row in the CSV file contains two columns: \\"Date\\" and \\"Sales\\". Write a function `calculate_monthly_sales` that reads this CSV file, groups the sales data by month, calculates the total sales for each month, and returns the results in a dictionary format. The function should parse the dates in the format \\"YYYY-MM-DD\\" and group the sales by the month and year (e.g., \\"2023-01\\" for January 2023). **Function Signature:** ```python def calculate_monthly_sales(filename: str) -> dict: ``` **Parameters:** - `filename` (str): The name of the CSV file containing the sales data. **Returns:** - `dict`: A dictionary where the keys are the months in \\"YYYY-MM\\" format and the values are the total sales for that month. **Example CSV File (`sales.csv`):** ``` Date,Sales 2023-01-10,150 2023-01-15,200 2023-02-01,300 2023-02-10,250 2023-03-05,100 ``` **Expected Output for the example CSV:** ```python { \\"2023-01\\": 350, \\"2023-02\\": 550, \\"2023-03\\": 100 } ```","solution":"import csv from collections import defaultdict from datetime import datetime def calculate_monthly_sales(filename: str) -> dict: monthly_sales = defaultdict(int) with open(filename, \'r\') as file: reader = csv.DictReader(file) for row in reader: date_str = row[\\"Date\\"] sales = int(row[\\"Sales\\"]) date = datetime.strptime(date_str, \\"%Y-%m-%d\\") month_year = date.strftime(\\"%Y-%m\\") monthly_sales[month_year] += sales return dict(monthly_sales)"},{"question":"You are tasked with creating an account management system for an online bookstore, \\"BOOKS GALORE\\". The system should be capable of handling different operations related to user accounts via an interactive console menu. The menu options and their respective functionalities are outlined below: 1. **CREATE ACCOUNT**: Prompts the user to input their name and email, then calls the `create_account` method of a given object `bookstore` to create a new user account. 2. **VIEW ACCOUNT DETAILS**: Prompts the user to enter their account ID and then calls the `view_account` method of object `bookstore` to display the account\'s details. 3. **UPDATE ACCOUNT INFORMATION**: Prompts the user to enter their account ID followed by their new name and email, then calls the `update_account` method of object `bookstore` to update the account\'s information. 4. **DELETE ACCOUNT**: Prompts the user to input their account ID and then calls the `delete_account` method of object `bookstore` to remove the account. 5. **LIST ALL ACCOUNTS**: Calls the `list_all_accounts` method of the object `bookstore` to display all accounts registered in the system. 6. **EXIT**: Ends the session by calling the `exit_system` function. Implement a Python function named `account_management_menu` that will manage these operations. Ensure that the system handles invalid inputs by displaying appropriate messages and prompting the user again where necessary. Additionally, use the `time.sleep` function from the `time` library to introduce delays between invalid inputs and screen refreshing for better user experience. **Function Signature:** ```python def account_management_menu(bookstore): pass ``` **Requirements:** 1. Use `time.sleep` to introduce a delay before clearing the screen or showing error messages for invalid inputs. 2. Appropriately handle invalid inputs (non-digit inputs or numbers not in the valid range of 1-6). 3. Follow the provided menu options and ensure they correctly trigger the appropriate method calls. **Assumptions:** - `bookstore` is assumed to be an object that possesses methods `create_account`, `view_account`, `update_account`, `delete_account`, and `list_all_accounts`. - The `exit_system` function exists and should be invoked when the user chooses the \\"EXIT\\" option.","solution":"import time def account_management_menu(bookstore): def clear_screen(): print(\\"033c\\", end=\\"\\") def prompt_for_int(message): while True: try: return int(input(message)) except ValueError: print(\\"Invalid input. Please enter a valid number.\\") time.sleep(2) def prompt_for_string(message): return input(message) options = { 1: \\"CREATE ACCOUNT\\", 2: \\"VIEW ACCOUNT DETAILS\\", 3: \\"UPDATE ACCOUNT INFORMATION\\", 4: \\"DELETE ACCOUNT\\", 5: \\"LIST ALL ACCOUNTS\\", 6: \\"EXIT\\" } while True: clear_screen() print(\\"ONLINE BOOKSTORE: BOOKS GALORE\\") for key, value in options.items(): print(f\\"{key}. {value}\\") choice = prompt_for_int(\\"Enter your choice (1-6): \\") if choice == 1: name = prompt_for_string(\\"Enter your name: \\") email = prompt_for_string(\\"Enter your email: \\") bookstore.create_account(name, email) elif choice == 2: account_id = prompt_for_int(\\"Enter your account ID: \\") bookstore.view_account(account_id) elif choice == 3: account_id = prompt_for_int(\\"Enter your account ID: \\") new_name = prompt_for_string(\\"Enter your new name: \\") new_email = prompt_for_string(\\"Enter your new email: \\") bookstore.update_account(account_id, new_name, new_email) elif choice == 4: account_id = prompt_for_int(\\"Enter your account ID: \\") bookstore.delete_account(account_id) elif choice == 5: bookstore.list_all_accounts() elif choice == 6: bookstore.exit_system() break else: print(\\"Invalid choice. Please enter a number between 1 and 6.\\") time.sleep(2)"},{"question":"You are tasked with creating a function named `calculate_shopping_cart` that calculates the total price of items in a shopping cart, including a variable discount. This function should: 1. Accept a single parameter `cart`, which is a list of tuples. Each tuple contains the item name, quantity, and unit price. 2. Apply a discount based on the total price before discount. The discount tiers are: - No discount for totals less than 50. - 5% discount for totals between 50 and 100 (inclusive). - 10% discount for totals greater than 100. 3. Return a dictionary containing the following: - `subtotal`: the total price before discount. - `discount`: the discount amount applied. - `total`: the total price after discount. **Function Details:** - **Function Name:** `calculate_shopping_cart` - **Parameter:** `cart` - list of tuples, where each tuple contains the item name (string), quantity (integer), and unit price (float). **Input:** A list of tuples representing the items in the cart. **Output:** A dictionary with keys `subtotal`, `discount`, and `total`. **Example:** For `cart = [(\'apple\', 2, 3.0), (\'banana\', 5, 1.0), (\'chocolate\', 1, 10.0)]`, the output could look like: ```python { \'subtotal\': 21.0, \'discount\': 0.0, \'total\': 21.0 } ``` For `cart = [(\'laptop\', 1, 120.0), (\'mouse\', 2, 25.0)]`, the output could look like: ```python { \'subtotal\': 170.0, \'discount\': 17.0, \'total\': 153.0 } ``` Ensure to follow the given discount tiers in your implementation.","solution":"def calculate_shopping_cart(cart): Calculates the total price of items in a shopping cart, including a variable discount. Parameters: cart (list): A list of tuples where each tuple contains the item name (string), quantity (int), and unit price (float). Returns: dict: A dictionary with keys \'subtotal\', \'discount\', and \'total\'. subtotal = sum(quantity * unit_price for item, quantity, unit_price in cart) if subtotal < 50: discount_rate = 0.0 elif 50 <= subtotal <= 100: discount_rate = 0.05 else: discount_rate = 0.10 discount = subtotal * discount_rate total = subtotal - discount return { \'subtotal\': subtotal, \'discount\': discount, \'total\': total }"},{"question":"You are asked to write a function that processes orders for a fictional e-commerce website. The function should calculate the total order value, including specific discounts based on the provided conditions. **Function Name:** `calculate_order_total` **Inputs:** 1. `order_items` (list of tuples): A list where each tuple contains the name of the item (str), the quantity ordered (int), and the price per unit (float). 2. `discounts` (dict): A dictionary containing discount types and their respective values. Possible keys are: - `\'item_discount\'` (float): A flat discount amount to be applied to each item price. - `\'order_discount\'` (float): A flat discount amount to be deducted from the total order value. - `\'threshold_discount\'` (tuple): A threshold amount followed by the discount percentage to be applied if the total order value exceeds the threshold. E.g., (100, 10) means a 10% discount if the order total is over 100. **Output:** - `total` (float): The final total amount after applying all applicable discounts. **Requirements:** 1. Calculate the initial total by summing the cost of all items considering their quantities. 2. Apply `\'item_discount\'` to each item\'s price if provided. 3. Apply `\'order_discount\'` to the total order value if provided. 4. If `\'threshold_discount\'` is provided and the initial total exceeds the threshold, apply the percentage discount to the total. 5. Ensure the total is never negative (i.e., if the total after all discounts is less than zero, return 0). **Example Usage:** ```python order_items = [(\'Widget\', 2, 20.0), (\'Gadget\', 1, 50.0)] discounts = { \'item_discount\': 5.0, \'order_discount\': 10.0, \'threshold_discount\': (60, 15), } total = calculate_order_total(order_items, discounts) print(total) # Output should be the final total after applying all discounts. ``` The function should handle the application of discounts properly and produce the correct final order total. Here\'s an outline to implement this in Python:","solution":"def calculate_order_total(order_items, discounts): Calculate the total order value, including specific discounts based on provided conditions. :param order_items: List of tuples where each tuple contains (item name (str), quantity ordered (int), item price per unit (float)) :param discounts: Dictionary containing the following possible discount keys: \'item_discount\' (float), \'order_discount\' (float), \'threshold_discount\' (tuple of (threshold amount, discount percentage)) :return: final total order value after applying discounts (float) initial_total = 0 # Calculate initial total based on items and their quantities for item, quantity, price_per_unit in order_items: initial_total += quantity * price_per_unit # Apply item discount if available item_discount = discounts.get(\'item_discount\', 0) if item_discount > 0: for item, quantity, price_per_unit in order_items: initial_total -= quantity * item_discount # Ensure the initial_total is not negative after item discounts initial_total = max(initial_total, 0) # Apply order discount if available order_discount = discounts.get(\'order_discount\', 0) final_total = initial_total - order_discount # Ensure the final_total is not negative after order discount final_total = max(final_total, 0) # Apply threshold discount if conditions are met threshold_discount = discounts.get(\'threshold_discount\', (0, 0)) threshold_amount, discount_percentage = threshold_discount if final_total > threshold_amount: final_total -= final_total * (discount_percentage / 100) # Ensure the final total is not negative after all discounts final_total = max(final_total, 0) return final_total"},{"question":"You are tasked with writing a function that accepts a string and returns a version of the string with duplicated words removed while preserving the original order of first occurrences. The provided function, `remove_duplicate_words(sentence)`, should achieve this functionality. The function must adhere to the following specifications: 1. **Function Name**: `remove_duplicate_words(sentence)` 2. **Parameters**: It should take one parameter: - `sentence`: a string containing words separated by spaces. 3. **Behaviour**: - The function should identify words in the sentence that appear more than once. - Only the first occurrence of each word should be kept, and subsequent duplicates should be removed. - The function should return the modified sentence with duplicates removed. You are required to use basic string manipulation and set operations to accomplish this task. Here is an example of how the function should behave: ```python def remove_duplicate_words(sentence): # Your implementation here # Example usage: print(remove_duplicate_words(\\"this is a test test this is only a test\\")) ``` When calling `remove_duplicate_words(\\"this is a test test this is only a test\\")`, it should output: ``` \\"this is a test only\\" ```","solution":"def remove_duplicate_words(sentence): Returns a version of the sentence with duplicated words removed, preserving the original order of first occurrences. words = sentence.split() seen = set() result = [] for word in words: if word not in seen: seen.add(word) result.append(word) return \' \'.join(result)"},{"question":"**You are a developer for a small tech company, and your task is to create a function that performs specific string transformations based on a series of commands. Each command instructs you to either reverse the string, change all characters to uppercase, or change all characters to lowercase. **Function to Implement:** `transform_string` **Function Signature:** ```python def transform_string(s: str, commands: list) -> str: ``` **Parameters:** - `s (str)`: The initial string to be transformed. - `commands (list)`: A list of strings where each element is either \\"reverse\\", \\"uppercase\\", or \\"lowercase\\". These commands should be applied to the string `s` in the given order. **Returns:** - `str`: The string after all transformations have been applied. **Considerations:** 1. Each command in the `commands` list should be applied sequentially. 2. The final string should be returned after all transformations. The `commands` list structure: ```python commands = [\\"reverse\\", \\"uppercase\\", \\"lowercase\\"] ``` An example of invoking the function could be: ```python s = \\"HelloWorld\\" commands = [\\"reverse\\", \\"uppercase\\"] result = transform_string(s, commands) print(result) # Should print \\"DLROwOLLEH\\" s = \\"PythonProgramming\\" commands = [\\"lowercase\\", \\"reverse\\"] result = transform_string(s, commands) print(result) # Should print \\"gnimmargorphytp\\" s = \\"DataScience\\" commands = [\\"uppercase\\", \\"reverse\\", \\"lowercase\\"] result = transform_string(s, commands) print(result) # Should print \\"ecneicsatad\\" ``` Ensure that the order of commands is followed strictly, and the output is as expected for each transformation sequence.","solution":"def transform_string(s: str, commands: list) -> str: Transforms the string s based on a series of commands. Args: s (str): The initial string to be transformed. commands (list): A list of commands (either \\"reverse\\", \\"uppercase\\", or \\"lowercase\\") that are applied sequentially to the string s. Returns: str: The transformed string after all commands have been applied. for command in commands: if command == \\"reverse\\": s = s[::-1] elif command == \\"uppercase\\": s = s.upper() elif command == \\"lowercase\\": s = s.lower() return s"},{"question":"You are tasked with writing a Python function that simulates the rolling of a dice. The function should be able to roll a die with a custom number of faces, and it should do so efficiently using the NumPy library. Specifically, you will use NumPy\'s random number generation capabilities to achieve this. **Function Signature:** ```python def roll_dice(num_faces, num_rolls): Simulate rolling a die with a custom number of faces. Args: num_faces: integer, the number of faces on the die num_rolls: integer, the number of times to roll the die Returns: rolls: list of integers, the results of the dice rolls ``` # Constraints: 1. **num_faces**: An integer representing the number of faces on the die. It must be greater than 1. 2. **num_rolls**: A non-negative integer representing the number of times the die should be rolled. # Requirements: - Use `numpy.random.randint` to generate random integers for the dice rolls. - The function should return a list of integers representing the results of each roll. # Example: ```python # Examples: result1 = roll_dice(6, 5) # Output could be [3, 1, 6, 4, 2] - Note: The actual output will vary because it is random. result2 = roll_dice(10, 3) # Output could be [10, 7, 4] - Again, the actual output will vary because it is random. ``` # Additional Notes: - The function should handle cases where `num_rolls` is 0 by returning an empty list. - Be aware that the results are random, so the output will not be the same every time you run the function. Use the function `numpy.random.randint` in your implementation.","solution":"import numpy as np def roll_dice(num_faces, num_rolls): Simulate rolling a die with a custom number of faces. Args: num_faces: integer, the number of faces on the die num_rolls: integer, the number of times to roll the die Returns: rolls: list of integers, the results of the dice rolls if num_faces <= 1: raise ValueError(\\"num_faces must be greater than 1\\") if num_rolls < 0: raise ValueError(\\"num_rolls must be non-negative\\") rolls = np.random.randint(1, num_faces + 1, num_rolls) return rolls.tolist()"},{"question":"Write a function `nearest_palindrome` that takes an integer `n` as input and returns the nearest palindrome greater than `n`. A palindrome is a number that remains the same when its digits are reversed. Follow these steps to implement the function: 1. Increment the integer `n` by 1 on each iteration. 2. Check if the incremented integer is a palindrome by comparing it to its reverse form. 3. Return the incremented integer as soon as a palindrome is found. Here is the function signature: ```python def nearest_palindrome(n): pass ``` **Example**: ```python nearest_palindrome(123) # Returns: 131 nearest_palindrome(808) # Returns: 818 ```","solution":"def nearest_palindrome(n): Returns the nearest palindrome greater than n. def is_palindrome(num): return str(num) == str(num)[::-1] n += 1 while not is_palindrome(n): n += 1 return n"},{"question":"You are required to write a Python function named `create_polynomial_regression` that will take three arguments: `x`, `y`, and `degree`. This function will generate a polynomial regression model of the specified degree, fit the model to the provided data, and plot the resulting polynomial curve along with the original data points. The function specifications are as follows: ```python def create_polynomial_regression(x, y, degree): # Your code here ``` # Input 1. `x`: A 1D NumPy array representing the independent variable. 2. `y`: A 1D NumPy array representing the dependent variable. 3. `degree`: An integer representing the degree of the polynomial to be fitted. # Output The function should display a plot where: - The original data points are shown as blue dots. - The polynomial regression curve is shown as a red line. # Requirements - You must use `numpy.polyfit` to fit the polynomial. - You have to use `numpy.poly1d` to create a polynomial function. - The function should handle the plotting using `matplotlib.pyplot`. # Example ```python import numpy as np x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]) y = np.array([1, 4, 9, 16, 25, 36, 49, 64, 81]) degree = 2 create_polynomial_regression(x, y, degree) ``` This function call should create and display a plot where the data points are shown as blue dots, and the fitted polynomial regression curve is shown as a red line.","solution":"import numpy as np import matplotlib.pyplot as plt def create_polynomial_regression(x, y, degree): Generates and plots a polynomial regression model of the specified degree. Parameters: x (numpy.ndarray): 1D array representing the independent variable. y (numpy.ndarray): 1D array representing the dependent variable. degree (int): The degree of the polynomial to be fitted. # Fit the polynomial coefficients = np.polyfit(x, y, degree) polynomial = np.poly1d(coefficients) # Generate x values for plotting the polynomial curve x_plot = np.linspace(min(x), max(x), 100) y_plot = polynomial(x_plot) # Plot the data points and the polynomial regression curve plt.scatter(x, y, color=\'blue\', label=\'Data points\') plt.plot(x_plot, y_plot, color=\'red\', label=f\'Polynomial degree {degree}\') plt.xlabel(\'Independent variable\') plt.ylabel(\'Dependent variable\') plt.legend() plt.title(f\'Polynomial Regression (degree {degree})\') plt.show()"},{"question":"Create a function named `compress_string` that takes a string parameter `s` which consists of alphabetic characters only. Your function should return a new string where consecutive identical characters are compressed into a single character followed by the number of occurrences. If a character appears once, it should just be the character alone without the count. Use efficient string manipulation techniques to achieve this. **Function Signature** ```python def compress_string(s: str) -> str: pass ``` **Requirements** 1. The function should handle both upper-case and lower-case letters. 2. The function must iterate over the string only once (O(n) time complexity). 3. Ensure the function handles edge cases like an empty string or a string with no consecutive identical characters correctly. **Example Usage** ```python compress_string(\'aaabbc\') # Output: \\"a3b2c\\" compress_string(\'abcd\') # Output: \\"abcd\\" compress_string(\'aaAA\') # Output: \\"a2A2\\" compress_string(\'\') # Output: \\"\\" ```","solution":"def compress_string(s: str) -> str: if not s: return \\"\\" compressed = [] count = 1 current_char = s[0] for char in s[1:]: if char == current_char: count += 1 else: if count > 1: compressed.append(f\\"{current_char}{count}\\") else: compressed.append(f\\"{current_char}\\") current_char = char count = 1 if count > 1: compressed.append(f\\"{current_char}{count}\\") else: compressed.append(f\\"{current_char}\\") return \'\'.join(compressed)"},{"question":"You are required to write a function named `find_and_replace_in_files` that searches for a specific string in all text files within a given directory and replaces it with another string. The function signature should be: ```python def find_and_replace_in_files(directory_path, target_string, replace_string) ``` The `find_and_replace_in_files` function should work as follows: 1. It will list all files in the `directory_path`. 2. For every file in the directory, if the file is a text file (ending with `.txt`), it will open the file, read its content, and search for occurrences of `target_string`. 3. For each occurrence of `target_string`, it will replace it with `replace_string`. 4. The updated content should be written back to the file. Your task is to use the following Python standard library functions: - `os.path.join` - `os.listdir` - `os.path.isfile` These functions are: - `os.path.join`: Joins one or more path components intelligently. The return value is the concatenation of the strings in `a` and `*p` arguments, inserting `/` as needed. - `os.listdir`: Returns a list containing the names of the files in the directory specified by `path`. - `os.path.isfile`: Tests whether a given `path` is a regular file (not a directory or other type of file). # Example usage: ```python find_and_replace_in_files(\'/path/to/directory\', \'old_string\', \'new_string\') ``` # Notes: - Handle file operations using `encoding=\\"utf8\\"` and `errors=\\"replace\\"` for reading and writing. - Ensure the function only modifies text files and preserves other types of files unchanged. - Be careful to correctly join paths using `os.path.join`. - Make sure to handle potential exceptions that may arise due to file I/O operations.","solution":"import os def find_and_replace_in_files(directory_path, target_string, replace_string): This function searches for a specific string in all text files within a given directory and replaces it with another string. :param directory_path: Path to the directory containing the text files. :param target_string: The string to search for in the files. :param replace_string: The string to replace with. try: for file_name in os.listdir(directory_path): file_path = os.path.join(directory_path, file_name) if os.path.isfile(file_path) and file_name.endswith(\'.txt\'): with open(file_path, \'r\', encoding=\'utf8\', errors=\'replace\') as file: content = file.read() updated_content = content.replace(target_string, replace_string) with open(file_path, \'w\', encoding=\'utf8\', errors=\'replace\') as file: file.write(updated_content) except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"Implement a function that simulates a basic bank account system. This system should allow deposits, withdrawals, and checking the current balance. The function should maintain the state of the account and handle transactions based on a list of instructions. Each instruction is a tuple where the first value is a string indicating the type of transaction (\'deposit\', \'withdraw\', \'check_balance\'), and the second value is the amount for \'deposit\' or \'withdraw\' transactions. For \'check_balance\', the second value is ignored. The function should return the final balance after processing all instructions. If a withdrawal exceeds the current balance, it should be ignored and the balance should remain unchanged. You should write self-contained code starting with: ``` def bank_account(instructions): ```","solution":"def bank_account(instructions): Simulates a basic bank account system. Args: instructions (list of tuples): Each tuple contains a string (\'deposit\', \'withdraw\', \'check_balance\') and a number. Returns: int: The final balance after processing all instructions. balance = 0 for instruction in instructions: type_of_transaction, amount = instruction if type_of_transaction == \'deposit\': balance += amount elif type_of_transaction == \'withdraw\': if amount <= balance: balance -= amount elif type_of_transaction == \'check_balance\': continue else: raise ValueError(\\"Invalid transaction type\\") return balance"},{"question":"Design and implement a function named `filter_and_reverse_strings` that takes a list of strings and returns a new list. This new list should include only those strings that have a length greater than a specified integer `n`, and each of these strings should be reversed. The function should: 1. Take in a list of strings and an integer `n` as parameters. 2. Filter out the strings that have a length less than or equal to `n`. 3. Reverse the remaining strings. 4. Return the list of reversed strings. For example, given the list `[\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"]` and `n = 5`, the function should return `[\\"ananab\\", \\"yrrehc\\"]` because only \\"banana\\" and \\"cherry\\" have lengths greater than 5, and both are reversed in the output list. **Function Signature:** ```python def filter_and_reverse_strings(strings: list, n: int) -> list: # Your code here ```","solution":"def filter_and_reverse_strings(strings, n): Filters strings that have length greater than n and returns them reversed. Args: strings (list of str): The list of strings to filter and reverse. n (int): The length threshold. Returns: list of str: A list of reversed strings with length greater than n. return [s[::-1] for s in strings if len(s) > n]"},{"question":"Write a function `longest_common_subsequence(X, Y)` to find the length of the longest common subsequence between two given strings `X` and `Y`. A longest common subsequence is a sequence that appears in both strings in the same order but not necessarily consecutively. Use dynamic programming to solve this problem. Create a 2D array `dp` where `dp[i][j]` holds the length of the longest common subsequence of `X[0...i-1]` and `Y[0...j-1]`. **Function Signature:** ```python def longest_common_subsequence(X, Y): # your code here ``` **Steps to Follow:** 1. Initialize the 2D array `dp` with the size `(len(X)+1) x (len(Y)+1)` and fill it with 0s. 2. Iterate through each character in `X` and `Y` to fill in the `dp` array: - If `X[i-1]` matches `Y[j-1]`, then `dp[i][j] = dp[i-1][j-1] + 1` - Otherwise, `dp[i][j] = max(dp[i-1][j], dp[i][j-1])` 3. The value of `dp[len(X)][len(Y)]` will contain the length of the longest common subsequence. **Example:** ```python X = \\"AGGTAB\\" Y = \\"GXTXAYB\\" print(longest_common_subsequence(X, Y)) ``` **Expected Output:** ```python 4 # The longest common subsequence is \\"GTAB\\" ```","solution":"def longest_common_subsequence(X, Y): Returns the length of the longest common subsequence between X and Y. m, n = len(X), len(Y) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if X[i - 1] == Y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You need to write a function named `reverse_and_uppercase(sentence)` that takes a single string argument representing a sentence. This function should reverse the words in the sentence and convert all characters to uppercase. Words are defined as sequences of characters separated by spaces. The output should be a single string with the words in reversed order and all characters converted to uppercase. For example, if the input string is `\\"hello world\\"`, the output should be `\\"WORLD HELLO\\"`. # Function Signature ```python def reverse_and_uppercase(sentence): # Your implementation here pass ``` # Example ```python print(reverse_and_uppercase(\\"hello world\\")) # Output: \\"WORLD HELLO\\" print(reverse_and_uppercase(\\"Python is fun\\")) # Output: \\"FUN IS PYTHON\\" print(reverse_and_uppercase(\\"a quick brown fox\\")) # Output: \\"FOX BROWN QUICK A\\" ``` # Constraints - The input string `sentence` will not contain leading or trailing spaces. - The input string `sentence` will contain only alphabetic characters and spaces. - The words in the input string will be separated by a single space.","solution":"def reverse_and_uppercase(sentence): This function takes a sentence, reverses the order of the words, and converts all characters to uppercase. Args: sentence (str): A sentence containing multiple words. Returns: str: A new sentence with the words in reversed order and all characters in uppercase. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words).upper()"},{"question":"In this task, you are requested to write a function named `weighted_average` which calculates the weighted average of a list of numbers. Each number in the list is associated with a corresponding weight. This can be useful in various scenarios such as calculating the average grade for a student based on the importance of each assignment, or determining the average rating of a product where more recent reviews are given higher importance. Function Name - `weighted_average` Function Parameters - `numbers` (list of floats or ints): The list of numbers for which the weighted average needs to be calculated. - `weights` (list of floats or ints): The list of weights corresponding to each number in the `numbers` list. Function Behavior - If the lengths of `numbers` and `weights` are not equal, the function should raise a `ValueError` with the message \\"Numbers and weights must be of the same length\\". - The function should return the weighted average of the `numbers` list using the given `weights`. - The weighted average is calculated as the sum of each number multiplied by its corresponding weight, divided by the sum of the weights. Example ```python # Example calls print(weighted_average([4, 3, 5], [1, 2, 3])) # The weighted average is (4*1 + 3*2 + 5*3) / (1+2+3) = 3.8333333333333335 print(weighted_average([10, 20, 30], [0.2, 0.3, 0.5])) # The weighted average is (10*0.2 + 20*0.3 + 30*0.5) / (0.2+0.3+0.5) = 23.0 ```","solution":"def weighted_average(numbers, weights): Calculates the weighted average of a list of numbers given corresponding weights. Args: numbers (list of floats or ints): The list of numbers. weights (list of floats or ints): The list of weights corresponding to the numbers. Returns: float: The weighted average of the numbers. Raises: ValueError: If the lengths of numbers and weights are not equal. if len(numbers) != len(weights): raise ValueError(\\"Numbers and weights must be of the same length\\") weighted_sum = sum(n * w for n, w in zip(numbers, weights)) total_weight = sum(weights) return weighted_sum / total_weight"},{"question":"You are required to implement a Python function named `split_odd_even_indices` that separates the elements of a list into two lists: one containing elements at odd indices, and the other containing elements at even indices. Preserve the relative order of elements in each list. **Function Signature:** ```python def split_odd_even_indices(lst: List[int]) -> Tuple[List[int], List[int]]: ``` **Parameters:** - `lst`: A list of integers. **Returns:** - A tuple containing two lists: - The first list contains elements from the odd indices. - The second list contains elements from the even indices. **Example:** ```python lst = [10, 20, 30, 40, 50, 60] result = split_odd_even_indices(lst) # Expected output: # ([20, 40, 60], [10, 30, 50]) ``` **Requirements:** - Your function should handle empty lists gracefully and return two empty lists in that case. - Maintain the order of elements as they appear in the original list. **Additional Note:** - Indices start from 0, so index 0 is considered even, index 1 is odd, and so on. - The solution should efficiently handle lists of varying lengths, including large lists.","solution":"from typing import List, Tuple def split_odd_even_indices(lst: List[int]) -> Tuple[List[int], List[int]]: Accepts a list of integers and splits it into two lists: one containing elements at odd indices, and the other containing elements at even indices. Args: lst (List[int]): The list to split. Returns: Tuple[List[int], List[int]]: A tuple where the first element is the list of elements at odd indices, and the second element is the list of elements at even indices. odd_indices = [lst[i] for i in range(1, len(lst), 2)] even_indices = [lst[i] for i in range(0, len(lst), 2)] return (odd_indices, even_indices)"},{"question":"You are tasked with writing a function called `fill_missing_values` that takes a DataFrame and a dictionary specifying a column and corresponding value. The function should fill missing values (NaNs) in the specified columns with the given values. The function should work as follows: - Iterate through the keys and values of the dictionary. - For each key (which is a column name in the DataFrame), fill the NaNs in that column with the provided value. - Return the modified DataFrame. The function signature is: ```python def fill_missing_values(df: pd.DataFrame, replacements: dict) -> pd.DataFrame: pass ``` # Example Given a DataFrame `df`: ```python import pandas as pd import numpy as np df = pd.DataFrame({ \'A\': [1, np.nan, 3], \'B\': [np.nan, 2, 2], \'C\': [\'a\', \'b\', np.nan] }) ``` If you call the function with a dictionary `{\'A\': 0, \'B\': 1, \'C\': \'c\'}`: ```python filled_df = fill_missing_values(df, {\'A\': 0, \'B\': 1, \'C\': \'c\'}) print(filled_df) ``` The expected output would be: ``` A B C 0 1.0 1.0 a 1 0.0 2.0 b 2 3.0 2.0 c ``` # Requirements 1. The function should handle different types of values, such as integers, floats, and strings. 2. If a column specified in the dictionary does not exist in the DataFrame, it should be ignored. 3. The function should return the DataFrame with missing values filled as specified.","solution":"import pandas as pd def fill_missing_values(df: pd.DataFrame, replacements: dict) -> pd.DataFrame: Fill missing values in the DataFrame according to the replacements dictionary. Parameters: df (pd.DataFrame): The DataFrame to fill. replacements (dict): A dictionary specifying the columns and values for filling missing entries. Returns: pd.DataFrame: The DataFrame with missing values filled. for column, value in replacements.items(): if column in df.columns: df[column].fillna(value, inplace=True) return df"},{"question":"You need to write a Python function called `is_valid_course_schedule` to determine if a list of course prerequisites can be completed without any cyclic dependencies. Each course has a unique number from `0` to `numCourses-1`. The prerequisites are given as a list of pairs, where each pair `[a, b]` indicates that course `a` must be completed before course `b`. Function Signature: ```python def is_valid_course_schedule(numCourses: int, prerequisites: List[List[int]]) -> bool: ``` **Parameters:** - `numCourses`: an integer representing the total number of courses (0-indexed). - `prerequisites`: a list of pairs of integers where each pair `[a, b]` represents that course `a` must be completed before course `b`. **Return:** - A boolean value indicating whether it is possible to complete all the courses. You need to detect cycles in the dependency graph. If a cycle exists, it\'s impossible to complete all courses. Use depth-first search (DFS) or Kahn\'s algorithm (a BFS-based approach) to detect cycles and determine if the courses can be completed successfully. **Example:** ```python numCourses = 2 prerequisites = [[1, 0]] print(is_valid_course_schedule(numCourses, prerequisites)) # Output: True numCourses = 2 prerequisites = [[1, 0], [0, 1]] print(is_valid_course_schedule(numCourses, prerequisites)) # Output: False ```","solution":"def is_valid_course_schedule(numCourses: int, prerequisites: list[list[int]]) -> bool: from collections import defaultdict, deque # Create an adjacency list for the graph graph = defaultdict(list) for a, b in prerequisites: graph[b].append(a) # Initialize all degrees to zero in_degree = [0] * numCourses # Populate the in-degree array for course in graph: for neighbor in graph[course]: in_degree[neighbor] += 1 # Initialize the queue with all courses having in-degree of 0 queue = deque([i for i in range(numCourses) if in_degree[i] == 0]) # Counter for number of courses we can take count = 0 while queue: course = queue.popleft() count += 1 for neighbor in graph[course]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If we were able to take exactly numCourses courses, then it\'s possible to finish return count == numCourses"},{"question":"Your task is to write a Python function `is_valid_word_ladder` that determines whether a given sequence of words forms a valid word ladder. A word ladder begins with a starting word and transforms into the end word by changing exactly one character at each step, with each intermediate word being a valid word from a given word list. Here\'s what the function should do: 1. **Validate Words**: - Ensure all words in the sequence are in the provided word list. 2. **Check Transitions**: - Verify that each word in the sequence differs from the previous word by exactly one character. # Function Signature ```python def is_valid_word_ladder(sequence: list, word_list: set) -> bool: pass ``` # Parameters: - `sequence` (list): A sequence of words to be validated. - `word_list` (set): A set of valid words. # Returns: - `bool`: `True` if the sequence forms a valid word ladder, `False` otherwise. # Example usage: ```python word_list = {\\"hit\\", \\"hot\\", \\"dot\\", \\"dog\\", \\"cog\\", \\"lot\\", \\"log\\"} sequence = [\\"hit\\", \\"hot\\", \\"dot\\", \\"dog\\", \\"cog\\"] print(is_valid_word_ladder(sequence, word_list)) # Output: True sequence = [\\"hit\\", \\"hot\\", \\"dot\\", \\"dog\\", \\"log\\"] print(is_valid_word_ladder(sequence, word_list)) # Output: False ``` # Notes: - The sequence should contain at least two words. - Raise a ValueError if any word in the sequence is not in the word_list. - Ensure that each subsequent word differs from the preceding word by exactly one character. This problem will help you understand string manipulation and algorithmic validation techniques.","solution":"def is_valid_word_ladder(sequence: list, word_list: set) -> bool: Determines if the given sequence of words forms a valid word ladder. :param sequence: A list of words representing the word ladder sequence. :param word_list: A set of valid words. :return: True if the sequence is a valid word ladder, False otherwise. # Verify all words are in the word list for word in sequence: if word not in word_list: raise ValueError(f\\"Word \'{word}\' is not in the word list.\\") # Function to count the number of differing characters between two words def differing_char_count(word1, word2): return sum(1 for a, b in zip(word1, word2) if a != b) if len(sequence) < 2: return False # A valid word ladder contains at least two words # Check each transition between words in the sequence for i in range(len(sequence) - 1): if differing_char_count(sequence[i], sequence[i + 1]) != 1: return False return True"},{"question":"You are tasked with analyzing and normalizing product IDs from a given list of strings by leveraging specific functions from the `re` (regular expression) library. Write a function named `normalize_product_ids` that takes a single argument, a list of strings, and performs the following tasks: 1. Identifies and extracts valid product IDs from each string using a defined pattern. 2. Normalizes the extracted product IDs by ensuring they follow a specific format: `XXXX-XXX-XXX` where `X` is a digit from `0-9`. 3. Returns a list of normalized product IDs. If a string does not contain a valid product ID, ignore it. Specific context: - A valid product ID consists of numerals optionally separated by hyphens, but will always have exactly three groups when normalized: four digits, followed by three digits, then another three digits (e.g., \\"1234-567-890\\", \\"9876-543-210\\"). - Inconsistent or multiple product ID patterns in the same string should be ignored if they cannot be normalized to the specified format. - `re` functions you must use: `re.search`, `re.finditer`, `re.split`, `re.compile`. Here is a detailed description of the `re` functions: 1. `re.search(pattern, string, flags=0)`: Scan through `string` looking for the first location where the regular expression `pattern` produces a match, and return a corresponding match object. 2. `re.finditer(pattern, string, flags=0)`: Return an iterator yielding match objects over all non-overlapping matches for the pattern in the string. 3. `re.split(pattern, string, maxsplit=0, flags=0)`: Split `string` by the occurrences of `pattern`. 4. `re.compile(pattern, flags=0)`: Compile a regular expression pattern into a pattern object. For example: ```python input_list = [ \\"Order #1234-567-890 approved.\\", \\"New product 111-222-333 listed.\\", \\"Invalid ID 12345-678-9 found.\\" ] output_list = normalize_product_ids(input_list) print(output_list) # Output: [\'1234-567-890\'] ```","solution":"import re def normalize_product_ids(input_list): Identifies, extracts, and normalizes valid product IDs from a list of strings. Args: input_list (list of str): The list of strings to analyze. Returns: list of str: A list of normalized product IDs in the format XXXX-XXX-XXX. pattern = re.compile(r\'b(d{4}-d{3}-d{3})b\') normalized_ids = [] for string in input_list: match = pattern.search(string) if match: normalized_ids.append(match.group(0)) return normalized_ids"},{"question":"You are given a list of points in a 2D space. Your task is to implement the function `find_closest_points` which takes a list of tuples representing the points and an integer `n` as inputs, and returns the `n` closest points to the origin `(0, 0)`, based on the Euclidean distance. If multiple points are equidistant from the origin, return them in any order. # Requirements: 1. **Function Definition**: ```python def find_closest_points(points, n): ``` 2. **Inputs**: - `points`: A list of tuples. Each tuple contains two integers representing the x and y coordinates of a point. Example: `[(1, 2), (0, 1), (3, 4)]` - `n`: An integer indicating the number of closest points to return. 3. **Outputs**: - A list of tuples containing the `n` closest points to the origin `(0, 0)`, sorted by their distance to the origin in ascending order. If multiple points have the same distance, their order in the result does not matter. # Example: ```python points = [(1, 2), (0, 1), (3, 4), (1, -1)] n = 2 find_closest_points(points, n) ``` Expected Output: ```python [(0, 1), (1, -1)] ``` # Instructions: - Calculate the Euclidean distance from each point to the origin `(0, 0)`. - Sort the list of points based on their distance to the origin. - Return the first `n` points from the sorted list. - You may assume that `n` is always less than or equal to the length of the input list `points`. Here is a structure to get you started: ```python import math def find_closest_points(points, n): # Your code here # Example usage: points = [(1, 2), (0, 1), (3, 4), (1, -1)] print(find_closest_points(points, 2)) # Example call to your function ```","solution":"import math def find_closest_points(points, n): Returns the `n` closest points to the origin (0, 0) based on the Euclidean distance. # Calculate the Euclidean distance for each point and store in a list of tuples distances = [(math.sqrt(x**2 + y**2), (x, y)) for x, y in points] # Sort the list based on distances distances.sort(key=lambda x: x[0]) # Return the points part of the first `n` elements in the sorted list return [point for distance, point in distances[:n]]"},{"question":"You are tasked with creating a function called `generate_prime_table` that calculates prime numbers and prints them in a tabular format. Specifically, the function should: 1. Calculate all prime numbers up to a given number `n`. 2. Print these prime numbers in a table where each row contains 10 prime numbers. 3. Ensure that the last row may contain fewer than 10 prime numbers if necessary. 4. Save the complete list of prime numbers to a file named `primes.txt`. To accomplish this, you will need to: - Write a helper function to determine if a number is prime. - Use this helper function within `generate_prime_table` to find all the prime numbers up to `n`. - Format the output in a tabular format using appropriate string operations. Here is the detailed function signature you should implement: ```python def generate_prime_table(n): Calculate and display prime numbers up to n, and save them to a text file. ```","solution":"import math def is_prime(num): Determine if a number is a prime number. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(math.sqrt(num)) + 1, 2): if num % i == 0: return False return True def generate_prime_table(n): Calculate and display prime numbers up to n, and save them to a text file. primes = [num for num in range(2, n + 1) if is_prime(num)] # Printing the prime numbers in a tabular format, 10 per row for i in range(0, len(primes), 10): print(\\" \\".join(map(str, primes[i:i+10]))) # Saving the prime numbers to a file with open(\'primes.txt\', \'w\') as f: f.write(\\"n\\".join(map(str, primes)))"},{"question":"You are tasked with creating a function `most_frequent_words()` that reads text data from a file, processes the data to find the most frequent words, and writes the result to a new file. This function is intended to demonstrate usage of file handling, string processing, and dictionary operations in Python. The input file is as follows: - `input.txt`: Contains multiple lines of text. Each line can have multiple words separated by spaces. The `most_frequent_words()` function should: 1. Open and read data from `input.txt`. 2. Process the text to count the frequency of each word (case insensitive). 3. Identify the top `n` most frequent words. 4. Write these words and their frequencies to a new file named `output.txt`. The output file should have two columns: `word` and `frequency`. Here is the high-level outline of the function: ```python def most_frequent_words(n): # Your implementation should start after this line ``` # Input: - A file named `input.txt` with multiple lines of text. - An integer `n` specifying the number of most frequent words to retrieve. # Output: - A new file named `output.txt` with two columns: `word` and `frequency`. The `word` column has the most frequent words and the `frequency` column has the corresponding frequencies. # Assumptions: - Words are case insensitive; \\"Word\\" and \\"word\\" should be counted as the same word. - Punctuation marks attached to words should be ignored; \\"end.\\" and \\"end\\" should be counted as the same word. - If there are fewer unique words than `n`, output all unique words. # Example: Given the following input data in `input.txt`: ```text Hello world! This is a test. This test is simple. Hello simple world. ``` And specifying `n = 3`, the resulting `output.txt` should contain: ```text word,frequency hello,2 is,2 simple,2 ``` Use the appropriate Python file handling and string processing methods to accomplish this task.","solution":"import collections import re def most_frequent_words(n): # Reading the input file with open(\'input.txt\', \'r\') as file: text = file.read() # Converting text to lower case and removing all punctuation marks text = re.sub(r\'[^ws]\', \'\', text.lower()) # Splitting text into words words = text.split() # Counting the frequency of each word word_count = collections.Counter(words) # Finding the top n most frequent words most_common_words = word_count.most_common(n) # Writing the result to the output file with open(\'output.txt\', \'w\') as file: file.write(\'word,frequencyn\') for word, freq in most_common_words: file.write(f\'{word},{freq}n\')"},{"question":"You are tasked with writing a function that calculates the Jaccard similarity between two sets of strings. The Jaccard similarity is defined as the size of the intersection divided by the size of the union of the sets. Given: - Two lists of strings `list1` and `list2`. The function `jaccard_similarity(list1, list2)` should return the Jaccard similarity as a float. Requirements: - Import the `set` class directly. Function Signature: ```python def jaccard_similarity(list1, list2): ... ``` Example: ```python list1 = [\\"apple\\", \\"banana\\", \\"cherry\\"] list2 = [\\"banana\\", \\"cherry\\", \\"date\\"] print(jaccard_similarity(list1, list2)) # Output: 0.5 ``` In this example: - The intersection of the sets `{\\"apple\\", \\"banana\\", \\"cherry\\"}` and `{\\"banana\\", \\"cherry\\", \\"date\\"}` is `{\\"banana\\", \\"cherry\\"}`, which has 2 elements. - The union of the sets is `{\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"}`, which has 4 elements. - The Jaccard similarity is 2/4 = 0.5.","solution":"def jaccard_similarity(list1, list2): Calculates the Jaccard similarity between two lists of strings. Args: list1 (list): The first list of strings. list2 (list): The second list of strings. Returns: float: The Jaccard similarity between the two lists. set1 = set(list1) set2 = set(list2) intersection = set1.intersection(set2) union = set1.union(set2) return len(intersection) / len(union) if len(union) > 0 else 0.0"},{"question":"Your task is to create a function, `compute_statistics`, which utilizes the `threading` library to perform concurrent computations using the `threading.Thread` class. The function should simulate a statistics computation pipeline where one thread reads numerical data from a file and another thread computes the mean and standard deviation of that data. Specifically, your function should: 1. Create a list `shared_data` to store the data read from the file. 2. Create two threads: - One thread (`read_thread`) that calls a function `read_data` and passes the `shared_data` list as an argument. - Another thread (`compute_thread`) which calls a function `compute_stats` and also passes the `shared_data` list as an argument. 3. Start both threads. 4. Ensure both threads complete their execution. Here are the predefined functions for illustration: ```python import threading import time import math def read_data(shared_data): # Simulating data read with placeholder numbers data = [1, 2, 3, 4, 5] time.sleep(1) # Simulate delay shared_data.extend(data) print(\\"Data read from file and stored in shared_data.\\") def compute_stats(shared_data): while not shared_data: # Wait until data is available time.sleep(0.1) # Compute the mean and standard deviation of the data mean = sum(shared_data) / len(shared_data) variance = sum((x - mean) ** 2 for x in shared_data) / len(shared_data) stddev = math.sqrt(variance) print(f\\"Mean: {mean}, Standard Deviation: {stddev}\\") ``` Implement the `compute_statistics` function to utilize the `threading.Thread` class to start two threads that simulate reading data and computing statistics. Use the relevant methods such as `start`, and any necessary list operations.","solution":"import threading import time import math def read_data(shared_data): # Simulating data read with placeholder numbers data = [1, 2, 3, 4, 5] time.sleep(1) # Simulate delay shared_data.extend(data) print(\\"Data read from file and stored in shared_data.\\") def compute_stats(shared_data): while not shared_data: # Wait until data is available time.sleep(0.1) # Compute the mean and standard deviation of the data mean = sum(shared_data) / len(shared_data) variance = sum((x - mean) ** 2 for x in shared_data) / len(shared_data) stddev = math.sqrt(variance) print(f\\"Mean: {mean}, Standard Deviation: {stddev}\\") def compute_statistics(): shared_data = [] read_thread = threading.Thread(target=read_data, args=(shared_data,)) compute_thread = threading.Thread(target=compute_stats, args=(shared_data,)) read_thread.start() compute_thread.start() read_thread.join() compute_thread.join()"},{"question":"Write a function named `analyze_passenger_data` that processes passenger information from a CSV file and returns structured data regarding travel statistics. The CSV file will contain information about each passenger, including their name, age, gender, travel class, and fare amount. Your task is to write the `analyze_passenger_data(file_path: str) -> str` function, which reads the CSV file using the `csv` library and analyzes the data to provide insights on various travel statistics. The function should return the results in a JSON format. # Full Details 1. **Reading CSV**: Read the CSV file using the `csv.reader` method. Assume the file has a header row. 2. **Processing Data**: Parse the data to compute the following: - `total_passengers`: Total number of passengers. - `average_age`: Average age of passengers. - `gender_distribution`: Number of male and female passengers as a dictionary. - `class_distribution`: Number of passengers in each travel class as a dictionary. - `fare_summary`: Minimum, maximum, and average fare amount as a dictionary. 3. **JSON Formatting**: - Organize the computed statistics into a JSON object formatted as follows: ```json { \\"total_passengers\\": <total number of passengers>, \\"average_age\\": <average age of passengers>, \\"gender_distribution\\": { \\"male\\": <number of male passengers>, \\"female\\": <number of female passengers> }, \\"class_distribution\\": { \\"first\\": <number of passengers in first class>, \\"second\\": <number of passengers in second class>, \\"third\\": <number of passengers in third class> }, \\"fare_summary\\": { \\"min_fare\\": <minimum fare amount>, \\"max_fare\\": <maximum fare amount>, \\"average_fare\\": <average fare amount> } } ``` 4. **Return the JSON String**: Use `json.dumps` to convert the dictionary to a JSON string. # Constraints - You must use the `csv` library to read the CSV file. - You must use the `json` library to serialize the final dictionary into a JSON string. - Assume all ages are numerical and provided. If age is missing, treat it as zero. - Assume the fare amounts are non-negative numerical values. # Example Suppose the CSV file has the following structure: ```csv name,age,gender,class,fare John Smith,34,male,first,150.0 Jane Doe,28,female,second,200.0 ... Analyze the sample CSV file provided with the following couple of records: ```csv name,age,gender,class,fare John Smith,34,male,first,150.0 Jane Doe,28,female,second,200.0 ``` Calling `analyze_passenger_data(\\"passengers.csv\\")` should return a JSON string similar to: ```json { \\"total_passengers\\": 2, \\"average_age\\": 31.0, \\"gender_distribution\\": { \\"male\\": 1, \\"female\\": 1 }, \\"class_distribution\\": { \\"first\\": 1, \\"second\\": 1, \\"third\\": 0 }, \\"fare_summary\\": { \\"min_fare\\": 150.0, \\"max_fare\\": 200.0, \\"average_fare\\": 175.0 } } ``` Implement the `analyze_passenger_data` function to meet the requirements above.","solution":"import csv import json def analyze_passenger_data(file_path): Analyzes passenger data from a CSV file and returns a JSON string with travel statistics. :param file_path: Path to the CSV file containing passenger data. :return: JSON string with travel statistics. total_passengers = 0 ages = [] gender_distribution = {\\"male\\": 0, \\"female\\": 0} class_distribution = {\\"first\\": 0, \\"second\\": 0, \\"third\\": 0} fares = [] with open(file_path, mode=\'r\') as file: csv_reader = csv.DictReader(file) for row in csv_reader: total_passengers += 1 age = int(row[\'age\']) if row[\'age\'] else 0 ages.append(age) gender = row[\'gender\'] if gender in gender_distribution: gender_distribution[gender] += 1 travel_class = row[\'class\'] if travel_class in class_distribution: class_distribution[travel_class] += 1 fare = float(row[\'fare\']) fares.append(fare) average_age = sum(ages) / total_passengers if total_passengers > 0 else 0 min_fare = min(fares) if fares else 0 max_fare = max(fares) if fares else 0 average_fare = sum(fares) / total_passengers if total_passengers > 0 else 0 data = { \\"total_passengers\\": total_passengers, \\"average_age\\": average_age, \\"gender_distribution\\": gender_distribution, \\"class_distribution\\": class_distribution, \\"fare_summary\\": { \\"min_fare\\": min_fare, \\"max_fare\\": max_fare, \\"average_fare\\": average_fare } } return json.dumps(data, indent=4)"},{"question":"In this programming challenge, you will develop a function called `count_word_occurrences` that reads the contents of a text file and returns the count of a specified word. The function should be able to handle different cases (upper, lower, mixed) and punctuation marks around the words. Here are the steps your function should follow: 1. Open and read the text file located at the specified file path. 2. Normalize the text to make the word-count case insensitive. 3. Remove any punctuation marks that may be attached to words. 4. Count the occurrences of the specified word in the text. 5. Handle any file operation errors gracefully and manage exceptions using `sys.exc_info`. # Requirements: 1. You must use Python’s `str.lower` to normalize text case. 2. You must use Python’s `str.translate` and `str.maketrans` to remove punctuation. 3. You must ensure that the function handles file operations safely, managing any exceptions appropriately. Here is the structure for a sample text file `example.txt`: ``` Hello, world! This is a test. Hello again. Are you testing the word count function? Hello! ``` # Example Usage: ```python count = count_word_occurrences(\'example.txt\', \'hello\') print(count) ``` The expected output for the example usage above should be: ``` 3 ``` # Additional Example: Assume you have a file `sample.txt` with the following content: ``` Python is great! Isn\'t it? Yes, Python is amazing. ``` ```python count = count_word_occurrences(\'sample.txt\', \'python\') print(count) ``` The expected output should be: ``` 2 ``` # Function Signature: ```python def count_word_occurrences(file_path: str, word: str) -> int: pass ``` This function will help you practice file I/O operations, string manipulation, and exception handling in Python.","solution":"import string import sys def count_word_occurrences(file_path: str, word: str) -> int: Counts the occurrences of a specified word in a given text file. Args: file_path: The path to the text file. word: The word to count in the text file. Returns: An integer count of the occurrences of the specified word. try: with open(file_path, \'r\') as file: content = file.read().lower() translator = str.maketrans(\'\', \'\', string.punctuation) normalized_text = content.translate(translator) words = normalized_text.split() return words.count(word.lower()) except Exception: print(\\"Error opening or reading the file:\\", sys.exc_info()[0]) return 0"},{"question":"Create a function named `detect_anagram` that takes two strings as input and checks if they are anagrams of each other. Two strings are considered anagrams if they contain the exact same characters in the same frequencies, but possibly in a different order. The function should ignore spaces and be case-insensitive. The function should have the following signature: ```python def detect_anagram(str1: str, str2: str) -> bool: # Your code here ``` # Constraints 1. The input strings may contain any visible ASCII characters. 2. Ignore spaces when checking for anagrams. 3. The function should be case insensitive, i.e., \'Listen\' is an anagram of \'Silent\'. 4. Non-letter characters should also be considered in the anagram check. # Example Usage ```python print(detect_anagram(\\"Listen\\", \\"Silent\\")) # True print(detect_anagram(\\"Hello, World!\\", \\"World! Hello,\\")) # True print(detect_anagram(\\"Goodbye\\", \\"Bye Good\\")) # False ``` # Instructions - Remove any spaces from the input strings. - Convert both strings to lowercase. - Check if both strings contain the exact same characters in the same frequencies. - Return `True` if the input strings are anagrams, otherwise `False`.","solution":"from collections import Counter def detect_anagram(str1: str, str2: str) -> bool: Checks if two strings are anagrams of each other. :param str1: First input string :param str2: Second input string :return: True if the strings are anagrams, False otherwise # Remove spaces and convert to lowercase cleaned_str1 = str1.replace(\\" \\", \\"\\").lower() cleaned_str2 = str2.replace(\\" \\", \\"\\").lower() # Use Counter to count frequency of characters return Counter(cleaned_str1) == Counter(cleaned_str2)"},{"question":"Create a function that accepts a list of dictionaries, each representing a product with keys `\\"name\\"`, `\\"price\\"`, and `\\"stock\\"`. The function should return a list of product names that are in stock and priced under a given threshold. Ensure the function handles any potential KeyError or TypeError exceptions gracefully and logs an appropriate message in each case. The function should have the following signature: ``` def filter_products(products, max_price): pass ``` Parameters: - `products` (list): A list of dictionaries. Each dictionary contains: - `\\"name\\"` (str): The name of the product. - `\\"price\\"` (float): The price of the product. - `\\"stock\\"` (int): The stock count of the product. - `max_price` (float): The price threshold. Returns: - list: A list of names of products that are in stock and priced below the given threshold. Constraints: - Ensure that all `price` values are non-negative floats. - Ensure that all `stock` values are non-negative integers. - Ignore products with missing or invalid `price` or `stock` values, and log an appropriate message. - Raise a `ValueError` if `products` is not a list or if `max_price` is not a float. The function should output: - A list of names of products meeting the specified criteria.","solution":"import logging def filter_products(products, max_price): Filters products that are in stock and priced below the given threshold. Args: - products (list): A list of dictionaries with \'name\', \'price\', and \'stock\' keys. - max_price (float): The price threshold. Returns: - list: A list of names of products that are in stock and priced below max_price. Raises: - ValueError: If products is not a list or max_price is not a float. if not isinstance(products, list) or not all(isinstance(d, dict) for d in products): raise ValueError(\\"The products parameter must be a list of dictionaries.\\") if not isinstance(max_price, float): raise ValueError(\\"The max_price parameter must be a float.\\") filtered_products = [] for product in products: try: name = product[\'name\'] price = product[\'price\'] stock = product[\'stock\'] if not isinstance(price, (int, float)) or price < 0: raise TypeError(f\\"Invalid price for product \'{name}\': {price}\\") if not isinstance(stock, int) or stock < 0: raise TypeError(f\\"Invalid stock for product \'{name}\': {stock}\\") if price < max_price and stock > 0: filtered_products.append(name) except KeyError as e: logging.error(f\\"Missing key in product: {e}\\") except TypeError as e: logging.error(e) return filtered_products"},{"question":"You are to write a function named `filter_long_words` that filters out all words from a given list that are longer than a specified length. The function will return a new list containing only the words that are shorter than or equal to the specified length. **Requirements:** 1. The function should take two arguments: - A list of words (strings). - An integer specifying the maximum allowed word length. 2. The function should return a list of words that are shorter than or equal to the specified length. The function signature is: ```python def filter_long_words(words: list[str], max_length: int) -> list[str]: Filters the list of words to include only those with length less than or equal to max_length. Arguments: words : list[str] -- The list of words to filter. max_length : int -- The maximum allowed word length. Returns: list[str] -- The filtered list of words. pass ``` **Example:** If the input list of words is `[\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"]` and the maximum length is 5, then the function should return: - `[\\"apple\\", \\"date\\"]`","solution":"def filter_long_words(words: list[str], max_length: int) -> list[str]: Filters the list of words to include only those with length less than or equal to max_length. Arguments: words : list[str] -- The list of words to filter. max_length : int -- The maximum allowed word length. Returns: list[str] -- The filtered list of words. return [word for word in words if len(word) <= max_length]"},{"question":"Implement a function named `schedule_tasks` that schedules a list of tasks based on their start and end times while maximizing the number of non-overlapping tasks. This problem is a form of the interval scheduling maximization problem, which can be solved efficiently using a greedy algorithm. # Requirements: 1. **Input:** - `tasks` (List[Tuple[int, int]]): A list of tuples where each tuple `(start, end)` represents the start and end times of a task. 2. **Output:** - A list of tuples representing the maximum subset of non-overlapping tasks, sorted by their end time. 3. **Behavior:** - The function should use a greedy approach to select the tasks. This means: 1. Sort the tasks by their end times. 2. Iteratively select the next task that starts after the current task\'s end time. # Constraints: - The input list `tasks` can be empty, and in that case, the output should also be an empty list. - Tasks are represented by a start time and an end time, where the end time is always greater than the start time. # Function Signature: ```python from typing import List, Tuple def schedule_tasks(tasks: List[Tuple[int, int]]) -> List[Tuple[int, int]]: pass ``` # Example: ```python # Sample function call tasks = [(1, 3), (2, 5), (4, 6), (6, 7), (5, 8), (7, 9)] print(schedule_tasks(tasks)) # Expected output: [(1, 3), (4, 6), (6, 7), (7, 9)] # Another sample function call tasks = [(1, 2), (2, 4), (3, 5), (6, 8)] print(schedule_tasks(tasks)) # Expected output: [(1, 2), (2, 4), (6, 8)] ```","solution":"from typing import List, Tuple def schedule_tasks(tasks: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Schedules tasks based on their start and end times to maximize the number of non-overlapping tasks. Args: tasks (List[Tuple[int, int]]): A list of tuples where each tuple (start, end) represents the start and end times of a task. Returns: List[Tuple[int, int]]: A list of tuples representing the maximum subset of non-overlapping tasks, sorted by their end time. # Sort tasks by their end time tasks.sort(key=lambda x: x[1]) # List to store the selected tasks selected_tasks = [] # The end time of the last selected task last_end_time = 0 for task in tasks: if task[0] >= last_end_time: selected_tasks.append(task) last_end_time = task[1] return selected_tasks"},{"question":"You are tasked with creating a function named `most_common_words` that processes a given list of strings and returns the most common words based on their frequency. Here are your requirements: 1. **Function Name**: `most_common_words`. 2. **Parameters**: - `strings` (type: list of str): A list of strings to be processed. - `n` (type: int): The number of top common words to return. 3. **Return Type**: `list` of tuples. Each tuple contains a word and its frequency. 4. **Functionality**: - The function should combine all strings into a single string and then split it into words. - Count the frequency of each unique word. - Return a list of the top `n` most common words along with their frequencies, sorted by frequency in descending order. If two words have the same frequency, they should be sorted alphabetically. You may assume that the input list is non-empty and contains only lowercase alphabetical words separated by spaces. For example: ```python strings = [\\"apple banana apple\\", \\"banana orange apple\\", \\"banana orange peach\\"] n = 2 ``` The function call `most_common_words(strings, n)` should return: ```python [(\'apple\', 3), (\'banana\', 3)] ```","solution":"from collections import Counter def most_common_words(strings, n): Returns the most common words based on their frequency from a list of strings. Parameters: strings (list of str): A list of strings to be processed. n (int): The number of top common words to return. Returns: list of tuples: Each tuple contains a word and its frequency. combined_text = \' \'.join(strings) words = combined_text.split() word_counts = Counter(words) # Sort words first alphabetically and then by frequency in descending order sorted_words = sorted(word_counts.items(), key=lambda item: (-item[1], item[0])) return sorted_words[:n]"},{"question":"In a banking system, there are different kinds of accounts including savings and checking accounts. Each account type has some specific rules regarding transactions. We need to create a class hierarchy to model this system where each account can perform deposit and withdrawal operations according to its specific rules. Here is what you need to do: 1. Create an abstract base class `BankAccount` that has two abstract methods `deposit` and `withdraw`, which will be overridden by child classes. 2. Implement two child classes: `SavingsAccount` and `CheckingAccount`: - `SavingsAccount`: - Has an interest rate attribute. - The withdrawal method should not allow more than 6 withdrawals per month. - `CheckingAccount`: - Has a transaction fee attribute. - Every withdrawal deducts the transaction fee from the account. 3. Implement methods to get the current balance and reset the monthly withdrawal count for `SavingsAccount`. **Class Definitions:** ```python from abc import ABC, abstractmethod class BankAccount(ABC): def __init__(self, balance: float): self.balance = balance @abstractmethod def deposit(self, amount: float): pass @abstractmethod def withdraw(self, amount: float): pass def get_balance(self): return self.balance class SavingsAccount(BankAccount): def __init__(self, balance: float, interest_rate: float): super().__init__(balance) self.interest_rate = interest_rate self.withdrawal_count = 0 def deposit(self, amount: float): self.balance += amount def withdraw(self, amount: float): if self.withdrawal_count >= 6: raise Exception(\\"Withdrawal limit exceeded\\") elif amount > self.balance: raise Exception(\\"Insufficient funds\\") else: self.balance -= amount self.withdrawal_count += 1 def reset_withdrawal_count(self): self.withdrawal_count = 0 class CheckingAccount(BankAccount): def __init__(self, balance: float, transaction_fee: float): super().__init__(balance) self.transaction_fee = transaction_fee def deposit(self, amount: float): self.balance += amount def withdraw(self, amount: float): total_amount = amount + self.transaction_fee if total_amount > self.balance: raise Exception(\\"Insufficient funds\\") else: self.balance -= total_amount ``` **Example Usage:** ```python # Example 1: Savings Account savings = SavingsAccount(1000, 0.05) savings.deposit(500) print(savings.get_balance()) # 1500 savings.withdraw(200) print(savings.get_balance()) # 1300 savings.reset_withdrawal_count() # Example 2: Checking Account checking = CheckingAccount(1000, 2) checking.deposit(500) print(checking.get_balance()) # 1500 checking.withdraw(200) print(checking.get_balance()) # 1298 ``` Create and test the associated methods for correct balance updates and constraint checks for each type of account.","solution":"from abc import ABC, abstractmethod class BankAccount(ABC): def __init__(self, balance: float): self.balance = balance @abstractmethod def deposit(self, amount: float): pass @abstractmethod def withdraw(self, amount: float): pass def get_balance(self): return self.balance class SavingsAccount(BankAccount): def __init__(self, balance: float, interest_rate: float): super().__init__(balance) self.interest_rate = interest_rate self.withdrawal_count = 0 def deposit(self, amount: float): self.balance += amount def withdraw(self, amount: float): if self.withdrawal_count >= 6: raise Exception(\\"Withdrawal limit exceeded\\") elif amount > self.balance: raise Exception(\\"Insufficient funds\\") else: self.balance -= amount self.withdrawal_count += 1 def reset_withdrawal_count(self): self.withdrawal_count = 0 class CheckingAccount(BankAccount): def __init__(self, balance: float, transaction_fee: float): super().__init__(balance) self.transaction_fee = transaction_fee def deposit(self, amount: float): self.balance += amount def withdraw(self, amount: float): total_amount = amount + self.transaction_fee if total_amount > self.balance: raise Exception(\\"Insufficient funds\\") else: self.balance -= total_amount"},{"question":"A software development company wants to create a feature that helps users identify potential improvements in their code by analyzing code complexity and style. They have a dataset containing snippets of code along with various metrics for each snippet, including the number of lines of code, cyclomatic complexity, number of functions, and average indentation. The goal is to visualize the key metrics and provide summary statistics that can help in identifying parts of the codebase that may need refactoring. You are provided with a CSV file `code_metrics.csv` that contains the following columns: - `snippet_id`: A unique identifier for each code snippet. - `lines_of_code`: The number of lines of code in the snippet. - `cyclomatic_complexity`: A measure of the complexity of the control flow in the code snippet. - `num_functions`: The number of functions defined in the snippet. - `avg_indentation`: The average indentation level in the snippet. Your task is to create a function `analyze_code_metrics` which: 1. Reads the dataset using `pandas.read_csv`. 2. Plots a histogram of the number of lines of code. 3. Plots a scatter plot of cyclomatic complexity against the number of lines of code. 4. Calculates and prints: - The mean number of lines of code. - The median cyclomatic complexity. - The mean number of functions per snippet. Use the libraries `pandas` and `matplotlib.pyplot` for this task. The function should not return any values; it should only produce the required plots and print the specified statistics. # Function Signature ```python def analyze_code_metrics(file_path: str): pass ``` # Example Usage ```python analyze_code_metrics(\\"code_metrics.csv\\") ```","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_code_metrics(file_path: str): Analyze code metrics from a CSV file. Parameters: file_path (str): The path to the CSV file containing the code metrics. The function reads the data, plots histograms and scatter plots, and prints summary statistics. # Read the dataset df = pd.read_csv(file_path) # Plot histogram of the number of lines of code plt.figure(figsize=(10, 6)) plt.hist(df[\'lines_of_code\'], bins=30, edgecolor=\'black\') plt.title(\\"Histogram of Lines of Code\\") plt.xlabel(\\"Lines of Code\\") plt.ylabel(\\"Frequency\\") plt.savefig(\\"histogram_lines_of_code.png\\") # Plot scatter plot of cyclomatic complexity against the number of lines of code plt.figure(figsize=(10, 6)) plt.scatter(df[\'lines_of_code\'], df[\'cyclomatic_complexity\'], alpha=0.6) plt.title(\\"Scatter Plot of Cyclomatic Complexity vs. Lines of Code\\") plt.xlabel(\\"Lines of Code\\") plt.ylabel(\\"Cyclomatic Complexity\\") plt.savefig(\\"scatter_plot_complexity_vs_lines.png\\") # Calculate and print summary statistics mean_lines_of_code = df[\'lines_of_code\'].mean() median_cyclomatic_complexity = df[\'cyclomatic_complexity\'].median() mean_num_functions = df[\'num_functions\'].mean() print(f\\"Mean number of lines of code: {mean_lines_of_code:.2f}\\") print(f\\"Median cyclomatic complexity: {median_cyclomatic_complexity:.2f}\\") print(f\\"Mean number of functions per snippet: {mean_num_functions:.2f}\\")"},{"question":"Your task is to implement a function `analyze_string_patterns` that counts the occurrences of various patterns within a given string. Specifically, you need to count how many times each of the patterns \'ab\', \'cd\', and \'ef\' appear in the string. The function should return a dictionary with the pattern as the key and the count as the value. The function should be named `analyze_string_patterns` and have the following signature: ```python def analyze_string_patterns(input_string): ... ``` # Parameters: - `input_string` (str): The input string in which the patterns are to be counted. # Returns: - `pattern_counts` (dict): A dictionary with the patterns as keys (`\'ab\'`, `\'cd\'`, `\'ef\'`) and their respective counts in the input string as values. # Example: ```python counts = analyze_string_patterns(\\"abcdefabc\\") # Expected output: {\'ab\': 2, \'cd\': 1, \'ef\': 1} ``` # Note: - Ensure the function is case-sensitive. - You may assume that the input string contains only lowercase alphabets.","solution":"def analyze_string_patterns(input_string): Counts the occurrences of the patterns \'ab\', \'cd\', and \'ef\' in the input string. Parameters: input_string (str): The input string in which the patterns are to be counted. Returns: dict: A dictionary with the patterns \'ab\', \'cd\', and \'ef\' as keys and their respective counts as values. patterns = [\'ab\', \'cd\', \'ef\'] pattern_counts = {pattern: 0 for pattern in patterns} for pattern in patterns: pattern_counts[pattern] = input_string.count(pattern) return pattern_counts # Example usage counts = analyze_string_patterns(\\"abcdefabc\\") print(counts) # Expected output: {\'ab\': 2, \'cd\': 1, \'ef\': 1}"},{"question":"Your task is to write a Python function called `next_prime(n)` that finds the next prime number greater than a given integer `n`. A prime number is a number greater than 1 that has no divisors other than 1 and itself. The `next_prime` function takes the following parameter: - `n` (int): An integer number. Here\'s a brief description of what the function should do: 1. Start with the integer `n + 1`. 2. Iterate through successive integers, checking if each one is prime. 3. Return the first prime number found. # Example: ```python result1 = next_prime(10) # The value of `result1` will be 11 since 11 is the first prime number greater than 10 result2 = next_prime(17) # The value of `result2` will be 19 since 19 is the first prime number greater than 17 ``` Your implementation should only involve writing the `next_prime` function as specified above and no input/output handling is required.","solution":"def is_prime(num): Helper function to check if a number is prime. if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def next_prime(n): Returns the next prime number greater than n. candidate = n + 1 while not is_prime(candidate): candidate += 1 return candidate"},{"question":"Implement a function `rotate_matrix(matrix)` that rotates a given NxN matrix by 90 degrees clockwise in place. You should not return anything; instead, the provided matrix should be modified directly. This problem tests the understanding of matrix manipulations, particularly the ability to grasp the movement of elements in a 2D plane. Function Signature: ```python def rotate_matrix(matrix): pass ``` Input Parameters: - `matrix`: A list of lists representing a square matrix with dimensions `N x N`. Output: - The function does not return anything. The input matrix is modified in place to represent the rotated matrix. Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) print(matrix) # Expected output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` # Constraints: - The matrix is guaranteed to be square (N x N) with 1 ≤ N ≤ 1000. - The elements of the matrix are within the range of -1000 to 1000. # Educational Purpose: This problem helps in understanding array manipulation and in-place modifications, and encourages the development of an algorithmic thinking approach for solving problems involving rotation and transformation of data structures.","solution":"def rotate_matrix(matrix): N = len(matrix) # Transpose the matrix for i in range(N): for j in range(i, N): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(N): matrix[i].reverse()"},{"question":"You are developing a library management system and need to record detailed information about borrowed books. Write a function called `process_book_loans(book_loans_json)` that extracts and structures relevant data points from the provided JSON response. The input JSON contains an array of book loan records, each with detailed information about the loaned book, the borrower, and the loan dates. Your task is to create a function that processes this JSON data and returns a list of dictionaries, each containing key data points for each book loan. Here are the data points you need to extract for each book loan: 1. Book title. 2. Book author (as a single string in \\"Last, First\\" format). 3. Borrower\'s name (formatted as \\"First Last\\"). 4. Borrow date (formatted as \\"YYYY-MM-DD\\"). 5. Due date (formatted as \\"YYYY-MM-DD\\"). 6. Is the book overdue? (a boolean value). Use the `json` library to parse the JSON data and ensure the dates are correctly formatted. Function signature: ```python def process_book_loans(book_loans_json: str) -> list: # Your code here ``` The `book_loans_json` parameter is a JSON string representing book loan data. Sample book loan data JSON structure: ```json { \\"loans\\": [ { \\"book\\": { \\"title\\": \\"The Catcher in the Rye\\", \\"author\\": { \\"firstName\\": \\"J.D.\\", \\"lastName\\": \\"Salinger\\" } }, \\"borrower\\": { \\"firstName\\": \\"Jane\\", \\"lastName\\": \\"Doe\\" }, \\"dates\\": { \\"borrowDate\\": \\"2023-04-12\\", \\"dueDate\\": \\"2023-04-26\\" }, \\"isOverdue\\": false }, ... ] } ```","solution":"import json from datetime import datetime def format_author(first_name, last_name): Formats the author\'s name as \\"Last, First\\". return f\\"{last_name}, {first_name}\\" def format_borrower(first_name, last_name): Formats the borrower\'s name as \\"First Last\\". return f\\"{first_name} {last_name}\\" def process_book_loans(book_loans_json: str) -> list: Processes JSON data of book loans and returns a list of dictionaries with key data points. book_loans_data = json.loads(book_loans_json) result = [] for loan in book_loans_data.get(\\"loans\\", []): book_info = loan.get(\\"book\\", {}) borrower_info = loan.get(\\"borrower\\", {}) dates_info = loan.get(\\"dates\\", {}) title = book_info.get(\\"title\\", \\"\\") author = format_author(book_info.get(\\"author\\", {}).get(\\"firstName\\", \\"\\"), book_info.get(\\"author\\", {}).get(\\"lastName\\", \\"\\")) borrower = format_borrower(borrower_info.get(\\"firstName\\", \\"\\"), borrower_info.get(\\"lastName\\", \\"\\")) borrow_date = dates_info.get(\\"borrowDate\\", \\"\\") due_date = dates_info.get(\\"dueDate\\", \\"\\") is_overdue = loan.get(\\"isOverdue\\", False) result.append({ \\"Book title\\": title, \\"Book author\\": author, \\"Borrower\'s name\\": borrower, \\"Borrow date\\": borrow_date, \\"Due date\\": due_date, \\"Is the book overdue?\\": is_overdue }) return result"},{"question":"You are asked to implement a function named `find_optimal_splits` which divides a list of integers into `k` contiguous sublists, such that the maximum sum among all sublists is minimized. This is known as the \\"minimum maximum partition\\" problem. To achieve this, you need to: 1. Define a function that takes a list of integers `nums` and an integer `k` as inputs. 2. Implement an algorithm that splits `nums` into `k` sublists. 3. Ensure the split minimizes the maximum sum of the sublists. You are encouraged to use binary search coupled with a greedy approach to determine the optimal solution efficiently. Here is the function signature you must implement: ```python def find_optimal_splits(nums, k): pass ``` **Example Usage:** ```python nums = [7, 2, 5, 10, 8] k = 2 print(find_optimal_splits(nums, k)) # Output should be 18 nums = [1, 2, 3, 4, 5] k = 2 print(find_optimal_splits(nums, k)) # Output should be 9 ``` **Explanation:** For the first example, the optimal way to split the list is into `[7, 2, 5]` and `[10, 8]`, where the maximum sum of the sublists is 18. For the second example, the optimal way to split the list is into `[1, 2, 3]` and `[4, 5]`, with the maximum sublist sum being 9.","solution":"def find_optimal_splits(nums, k): def can_split(nums, k, max_subarray_sum): current_sum = 0 subarrays_required = 1 for num in nums: if current_sum + num > max_subarray_sum: subarrays_required += 1 current_sum = num if subarrays_required > k: return False else: current_sum += num return True left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if can_split(nums, k, mid): right = mid else: left = mid + 1 return left"},{"question":"**Creating a Data Class for a Simple Transaction System** In this task, you will create a simple transaction system using Python data classes. You are required to define two data classes: `Product` and `Transaction`. The `Product` class will represent an item being sold, and the `Transaction` class will represent a purchase transaction. The `Product` class should have the following attributes: 1. `product_id` (int): A unique identifier for the product. 2. `name` (str): The name of the product. 3. `price` (float): The price of the product. The `Transaction` class should have the following attributes: 1. `transaction_id` (int): A unique identifier for the transaction. 2. `product` (Product): The product being purchased. 3. `quantity` (int): The quantity of the product being purchased. 4. `total_price` (float): The total price for the transaction, calculated as `price * quantity`. The `Transaction` class should also include a method called `apply_discount` that takes a `discount_percentage` (float) and applies it to the `total_price` of the transaction. **Function Signatures:** ```python from dataclasses import dataclass @dataclass class Product: product_id: int name: str price: float @dataclass class Transaction: transaction_id: int product: Product quantity: int total_price: float def apply_discount(self, discount_percentage: float) -> None: pass ``` # Example Usage ```python # Creating a product instance product = Product(product_id=1, name=\'Laptop\', price=1200.0) # Creating a transaction instance transaction = Transaction(transaction_id=1001, product=product, quantity=2, total_price=product.price * 2) # Printing total price before discount print(f\\"Total Price before discount: {transaction.total_price}\\") # Applying a 10% discount transaction.apply_discount(10.0) # Printing total price after discount print(f\\"Total Price after discount: {transaction.total_price}\\") ``` # Important: - Ensure the total price is correctly calculated in the `Transaction` class. - The `apply_discount` method should correctly adjust the `total_price` based on the provided discount percentage. - Validate the attributes to avoid incorrect data entries, like negative prices or quantities.","solution":"from dataclasses import dataclass, field @dataclass class Product: product_id: int name: str price: float def __post_init__(self): if self.price < 0: raise ValueError(\\"Price must be non-negative\\") @dataclass class Transaction: transaction_id: int product: Product quantity: int total_price: float = field(init=False) def __post_init__(self): if self.quantity <= 0: raise ValueError(\\"Quantity must be positive\\") self.total_price = self.product.price * self.quantity def apply_discount(self, discount_percentage: float) -> None: if not (0 <= discount_percentage <= 100): raise ValueError(\\"Discount percentage must be between 0 and 100\\") discount_amount = (discount_percentage / 100) * self.total_price self.total_price -= discount_amount"},{"question":"In this problem, we will explore the use of file reading and string manipulation in Python. You are required to implement a function that reads a file containing scores, processes the data to compute average scores, and writes the results to another file. The function you need to implement, `process_scores(input_file, output_file)`, should perform the following steps: 1. Opens the `input_file` for reading. Each line in this file contains a student\'s name followed by their scores in different subjects, separated by commas (e.g., \\"John, 85, 90, 78\\"). 2. For each line, splits the data by commas to extract the student\'s name and their scores. 3. Computes the average score for each student. 4. Writes the results to the `output_file`, where each line contains the student\'s name followed by their average score (rounded to two decimal places), separated by a comma (e.g., \\"John, 84.33\\"). The function `process_scores` should be defined with the following signature: ```python def process_scores(input_file, output_file): # Function implementation ``` You will utilize the following concepts in your implementation: - File reading and writing with `open()`. - String manipulation using `split()` and `join()`. - Calculating averages with `sum()` and `len()`. - Rounding numbers with `round()`.","solution":"def process_scores(input_file, output_file): Processes the scores from input_file and writes the average scores to output_file. Each line in the input file contains a student\'s name followed by their scores. Each line in the output file will contain the student\'s name followed by their average score. with open(input_file, \'r\') as infile: lines = infile.readlines() results = [] for line in lines: elements = line.split(\',\') name = elements[0].strip() scores = list(map(int, elements[1:])) average_score = sum(scores) / len(scores) results.append(f\\"{name}, {round(average_score, 2)}n\\") with open(output_file, \'w\') as outfile: outfile.writelines(results)"},{"question":"You are tasked with creating a Python function `newsletter_subscriber_parser()` that processes a list of strings representing subscribers to a newsletter. Each string contains a name and an email address, separated by a comma. This function should parse the list into a dictionary where the keys are email domains (e.g., \'gmail.com\') and the values are sets of names of subscribers that use that domain. The function should have the following specifications: - Accept a list of subscribers where each subscriber is a string in the format \\"Name, email@example.com\\". - Parse this list and group subscribers by their email domain. - Return a dictionary with email domains as keys and sets of subscriber names as values. # Function Signature ```python def newsletter_subscriber_parser(subscribers): # Your code here ``` # Example ```python subscribers = [ \\"John Doe, john@example.com\\", \\"Jane Smith, jane.smith@gmail.com\\", \\"Foo Bar, foo@bar.com\\", \\"Alice Wonderland, alice@great.com\\", \\"Bob Builder, bob.builder@gmail.com\\" ] result = newsletter_subscriber_parser(subscribers) ``` # Expected Output ```python { \\"example.com\\": {\\"John Doe\\"}, \\"gmail.com\\": {\\"Jane Smith\\", \\"Bob Builder\\"}, \\"bar.com\\": {\\"Foo Bar\\"}, \\"great.com\\": {\\"Alice Wonderland\\"} } ``` # Notes: - You can assume the input will always have valid email addresses. - Ensure that each set of names associated with an email domain contains unique names. - Strip any leading or trailing spaces from names and email addresses before processing.","solution":"def newsletter_subscriber_parser(subscribers): Parses a list of subscriber strings into a dictionary grouped by email domains. Each string in the list is in the format \\"Name, email@example.com\\". Parameters: subscribers (list of str): The list of subscriber strings. Returns: dict: A dictionary with email domains as keys and sets of subscriber names as values. result = {} for subscriber in subscribers: name, email = map(str.strip, subscriber.split(\',\')) domain = email.split(\'@\')[1] if domain not in result: result[domain] = set() result[domain].add(name) return result"},{"question":"This function takes a list of dictionaries, each representing a person\'s information such as name, age, and email. It should process the list to identify and return a dictionary containing the oldest person(s) in the list. If there are multiple people with the same age, all such persons should be listed in the returned dictionary. The function should also ensure the input list contains dictionaries with the required keys: \'name\', \'age\', and \'email\'. If the input list is empty or if there are no valid entries, the function should return an empty dictionary. The function should have the following structure: ``` def find_oldest_persons(input_list): Identify and return a dictionary of the oldest person(s) from a list of dictionaries containing people\'s information. Args: input_list (list): A list of dictionaries where each dictionary contains \'name\', \'age\', and \'email\' keys. Returns: dict: A dictionary containing the oldest person(s). Example format: { \\"oldest\\": [ {\\"name\\": \\"John Doe\\", \\"age\\": 85, \\"email\\": \\"john@example.com\\"}, {\\"name\\": \\"Jane Smith\\", \\"age\\": 85, \\"email\\": \\"jane@example.com\\"}, ] } ```","solution":"def find_oldest_persons(input_list): Identify and return a dictionary of the oldest person(s) from a list of dictionaries containing people\'s information. Args: input_list (list): A list of dictionaries where each dictionary contains \'name\', \'age\', and \'email\' keys. Returns: dict: A dictionary containing the oldest person(s). Example format: { \\"oldest\\": [ {\\"name\\": \\"John Doe\\", \\"age\\": 85, \\"email\\": \\"john@example.com\\"}, {\\"name\\": \\"Jane Smith\\", \\"age\\": 85, \\"email\\": \\"jane@example.com\\"}, ] } if not input_list: return {} valid_entries = [person for person in input_list if all(key in person for key in [\'name\', \'age\', \'email\'])] if not valid_entries: return {} max_age = max(person[\'age\'] for person in valid_entries) oldest_persons = [person for person in valid_entries if person[\'age\'] == max_age] return {\'oldest\': oldest_persons}"},{"question":"You are required to write a function named `extract_file_extensions` that processes a list of file paths and extracts the unique file extensions present in the list. This function should further categorize the extensions based on their occurrence frequency. **Function Signature:** ```python def extract_file_extensions(file_paths: list) -> dict: Extract unique file extensions from a list of file paths and categorize by occurrence frequency. Args: file_paths (list): A list of strings representing file paths. Returns: dict: A dictionary where keys are occurrence frequencies and values are lists of extensions. ``` **Guidelines:** 1. Iterate through the list of file paths to identify and extract the file extensions. 2. Count the occurrences of each unique file extension. 3. Create a dictionary where keys are the frequencies and values are lists of file extensions that appear with that frequency. 4. Ignore files with no extension and handle any edge cases appropriately. **Example Usage:** ```python file_list = [ \\"/home/user/docs/report.pdf\\", \\"/home/user/music/song.mp3\\", \\"/home/user/music/song.wav\\", \\"/home/user/photos/image.jpg\\", \\"video.mp4\\", \\"document.txt\\", \\"archive.tar.gz\\", \\"README\\" ] print(extract_file_extensions(file_list)) # Output: {1: [\'pdf\', \'mp3\', \'wav\', \'jpg\', \'mp4\', \'txt\'], 2: [\'gz\']} ``` Please ensure the function is robust, efficiently processes the list, and correctly handles edge cases such as files without an extension or with multiple periods in their name.","solution":"def extract_file_extensions(file_paths): Extract unique file extensions from a list of file paths and categorize by occurrence frequency. Args: file_paths (list): A list of strings representing file paths. Returns: dict: A dictionary where keys are occurrence frequencies and values are lists of extensions. from collections import defaultdict, Counter def get_extension(filename): if \'.\' in filename and not filename.startswith(\'.\'): return filename.rsplit(\'.\', 1)[-1] return None extensions = [get_extension(fp) for fp in file_paths if get_extension(fp)] extension_counts = Counter(extensions) result = defaultdict(list) for ext, count in extension_counts.items(): result[count].append(ext) return dict(result)"},{"question":"You are tasked with writing a function that takes a string representing a sequence of HTML-like tags and checks if the tags are correctly nested and matched. The function you must write is called `validate_html_tag_sequence(html_string)`. # Function Signature ```python def validate_html_tag_sequence(html_string: str) -> bool: Validates if a given string of HTML-like tags is properly nested and matched. :param html_string: A string containing HTML-like tags without attributes. Tags are enclosed in angle brackets, e.g., \\"<tag>\\" and \\"</tag>\\". :return: True if the tags are properly nested and matched, False otherwise. ``` # Requirements 1. Use a stack data structure to ensure tags are correctly nested and matched. 2. Ignore any characters outside the angle brackets in the validation process. # Example ```python print(validate_html_tag_sequence(\\"<div><p></p></div>\\")) # Example output: True print(validate_html_tag_sequence(\\"<div><p></div></p>\\")) # Example output: False print(validate_html_tag_sequence(\\"<div><span></span></div>\\")) # Example output: True print(validate_html_tag_sequence(\\"<div><span></a></span></div>\\")) # Example output: False ``` # Constraints - The `html_string` will only contain lowercase alphabetic characters and angle brackets. - Tags will be properly formatted, meaning they will have the correct opening (`<tag>`) and closing (`</tag>`) syntax. # Notes - Use a stack to track the opening tags. - Whenever a closing tag is encountered, ensure it matches the most recent opening tag on the stack. - The string is valid if the stack is empty after processing the entire string.","solution":"def validate_html_tag_sequence(html_string: str) -> bool: Validates if a given string of HTML-like tags is properly nested and matched. :param html_string: A string containing HTML-like tags without attributes. Tags are enclosed in angle brackets, e.g., \\"<tag>\\" and \\"</tag>\\". :return: True if the tags are properly nested and matched, False otherwise. stack = [] i = 0 while i < len(html_string): if html_string[i] == \'<\': j = i + 1 if j < len(html_string) and html_string[j] == \'/\': # This is a closing tag j += 1 end_tag = \\"\\" while j < len(html_string) and html_string[j] != \'>\': end_tag += html_string[j] j += 1 if not stack or stack[-1] != end_tag: return False stack.pop() else: # This is an opening tag start_tag = \\"\\" while j < len(html_string) and html_string[j] != \'>\': start_tag += html_string[j] j += 1 stack.append(start_tag) i = j i += 1 return not stack"},{"question":"You are required to write a function in Python named `matrix_reshape` that reshapes a given 2D matrix into a new size, if possible. The function will take three arguments: the original matrix, the new number of rows, and the new number of columns. **Details:** 1. **Input Matrix:** The original matrix will be given as a list of lists. Each inner list represents a row of the matrix. For example: ``` matrix = [ [1, 2], [3, 4] ] ``` 2. **New Dimensions:** The function will take two integers, `new_rows` and `new_cols`, specifying the desired dimensions for the reshaped matrix. For example: ``` new_rows = 1 new_cols = 4 ``` 3. **Reshape Logic:** The function should check if the total number of elements in the original matrix matches the product of `new_rows` and `new_cols`. If they match, the matrix should be reshaped accordingly. Otherwise, the function should return the original matrix unchanged. 4. **Reshape Process:** Reshaping should involve reading elements in row-major order from the original matrix and filling them into the new matrix in row-major order. **Example:** Given the input matrix and new dimensions: ```python matrix = [ [1, 2], [3, 4] ] new_rows = 1 new_cols = 4 ``` The function should return: ```python [[1, 2, 3, 4]] ``` If the new dimensions do not match the number of elements, the function should return the original matrix: ```python matrix = [ [1, 2], [3, 4] ] new_rows = 3 new_cols = 2 ``` The function should return: ```python [ [1, 2], [3, 4] ] ``` **Function Signature:** ```python def matrix_reshape(matrix, new_rows, new_cols): # Your code here ``` **Requirements:** - Ensure your code handles edge cases, such as when the original matrix is empty, or when new dimensions are not valid. - Use a list comprehension to flatten the original matrix and to create the new reshaped matrix where necessary.","solution":"def matrix_reshape(matrix, new_rows, new_cols): Reshapes the given matrix to the desired dimensions if possible. :param List[List[int]] matrix: 2D list representing the original matrix :param int new_rows: Desired number of rows for the reshaped matrix :param int new_cols: Desired number of columns for the reshaped matrix :return List[List[int]]: The reshaped matrix or the original matrix if reshaping is not possible if not matrix: # If the matrix is empty, return it as it is return matrix # Flatten the original matrix flattened = [num for row in matrix for num in row] total_elements = len(flattened) if total_elements != new_rows * new_cols: # If the total number of elements does not match the product of new dimensions, return the original matrix return matrix # Create the reshaped matrix reshaped_matrix = [ flattened[i * new_cols:(i + 1) * new_cols] for i in range(new_rows) ] return reshaped_matrix"},{"question":"You are given a list of integers that may contain both positive and negative numbers. Write a function that finds the subarray (containing at least one number) which has the largest sum and returns the sum. 1. Function Name: `max_subarray_sum` 2. Inputs: - `nums`: A list of integers. 3. Output: - `max_sum`: An integer representing the maximum sum of the subarray. # Example ```python def max_subarray_sum(nums): # Your code here # Example Test Case nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4] result = max_subarray_sum(nums) print(result) # Output: 6, because [4, -1, 2, 1] has the largest sum ``` # Requirements - The solution should have a time complexity of O(n). - You are allowed to use only standard Python libraries. Focus on implementing the function `max_subarray_sum`.","solution":"def max_subarray_sum(nums): Returns the sum of the subarray with the largest sum. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Implement a function `evaluate_polynomial` that calculates the value of a polynomial given its coefficients and an input value using Horner\'s method. Your function will take in two inputs: 1. `coefficients` (list of floats): A list representing the coefficients of the polynomial, where the (i)-th element corresponds to the coefficient of (x^i). 2. `x` (float): The input value at which the polynomial should be evaluated. The polynomial can be expressed as: [ P(x) = a_0 + a_1 cdot x + a_2 cdot x^2 + ldots + a_n cdot x^n ] Horner\'s method simplifies the computation as follows: [ P(x) = a_n + x(a_{n-1} + x(a_{n-2} + ldots + x(a_1 + x cdot a_0) ldots)) ] The function should return the evaluated polynomial value at the given input value `x`. Function Signature ```python def evaluate_polynomial(coefficients, x): # Your code here ```","solution":"def evaluate_polynomial(coefficients, x): Evaluates the polynomial at the given value x using Horner\'s method. Parameters: coefficients (list of float): Coefficients of the polynomial in increasing order of degree. x (float): The input value at which the polynomial should be evaluated. Returns: float: The value of the polynomial at the given input value x. result = 0 for coefficient in reversed(coefficients): result = result * x + coefficient return result"},{"question":"A company wants to build a simple cash register that can calculate the total cost of items being purchased and provide the optimal change using the least number of coins. **Problem Statement:** You need to write a class `CashRegister` that has methods to add items to the register, calculate the total cost, and compute the optimal change in US coins (quarters, dimes, nickels, pennies). # Class Definition: ```python class CashRegister: def __init__(self): Initialize the cash register with an empty list of items. self.items = [] def add_item(self, price): Add an item to the cash register. Parameters: - price: float, the price of the item self.items.append(price) def total_cost(self): Calculate the total cost of all items in the register. Returns: - float, the total cost return sum(self.items) def optimal_change(self, payment): Calculate the optimal change and return the number of quarters, dimes, nickels, and pennies. Parameters: - payment: float, the amount of money given by the customer Returns: - dict, a dictionary with keys \'quarters\', \'dimes\', \'nickels\', \'pennies\' total = self.total_cost() change = round(payment - total, 2) change_in_cents = int(change * 100) quarters = change_in_cents // 25 change_in_cents %= 25 dimes = change_in_cents // 10 change_in_cents %= 10 nickels = change_in_cents // 5 change_in_cents %= 5 pennies = change_in_cents return {\'quarters\': quarters, \'dimes\': dimes, \'nickels\': nickels, \'pennies\': pennies} ``` # Example Usage: ```python # Create a cash register register = CashRegister() # Add items register.add_item(2.50) # Add item costing 2.50 register.add_item(0.75) # Add item costing 0.75 register.add_item(1.25) # Add item costing 1.25 # Calculate total cost print(register.total_cost()) # Output: 4.5 # Calculate optimal change for a payment of 10 print(register.optimal_change(10)) # Output: {\'quarters\': 22, \'dimes\': 0, \'nickels\': 0, \'pennies\': 0} ``` The `optimal_change` method should ensure that the change is calculated accurately, accounting for rounding issues that may arise with floating-point arithmetic.","solution":"class CashRegister: def __init__(self): Initialize the cash register with an empty list of items. self.items = [] def add_item(self, price): Add an item to the cash register. Parameters: - price: float, the price of the item self.items.append(price) def total_cost(self): Calculate the total cost of all items in the register. Returns: - float, the total cost return sum(self.items) def optimal_change(self, payment): Calculate the optimal change and return the number of quarters, dimes, nickels, and pennies. Parameters: - payment: float, the amount of money given by the customer Returns: - dict, a dictionary with keys \'quarters\', \'dimes\', \'nickels\', \'pennies\' total = self.total_cost() change = round(payment - total, 2) change_in_cents = int(change * 100) quarters = change_in_cents // 25 change_in_cents %= 25 dimes = change_in_cents // 10 change_in_cents %= 10 nickels = change_in_cents // 5 change_in_cents %= 5 pennies = change_in_cents return {\'quarters\': quarters, \'dimes\': dimes, \'nickels\': nickels, \'pennies\': pennies}"},{"question":"You are given a grid filled with letters of size `n x m`. Your task is to find the longest path in the grid starting from the top left corner (0, 0) to the bottom right corner (n-1, m-1) such that no letter is used more than once in the path. You are allowed to move in the four cardinal directions - up, down, left, and right. Write a function `longest_unique_path` to accomplish this. # Function Signature: ```python def longest_unique_path(grid: List[List[str]]) -> int: pass ``` # Input: - `grid` : a list of lists containing characters, representing the grid. # Output: - Return an integer representing the length of the longest unique path. # Constraints: - `2 <= n, m <= 100` (rows and columns in the grid) - All elements in `grid` are lowercase English letters. Example: ```python grid = [ [\'a\', \'b\', \'c\'], [\'d\', \'e\', \'f\'], [\'g\', \'h\', \'i\'] ] print(longest_unique_path(grid)) # Output: 9 (Path: \'a\' -> \'b\' -> \'c\' -> \'f\' -> \'i\' -> \'h\' -> \'g\' -> \'d\' -> \'e\') ``` # Note: - You can move up, down, left, or right as long as you remain within the grid and do not visit a cell more than once. - Make sure to consider edge cases where the longest path may include backtracking and explore all possible paths for the solution.","solution":"from typing import List def longest_unique_path(grid: List[List[str]]) -> int: from collections import deque n = len(grid) m = len(grid[0]) directions = [(-1,0), (1,0), (0,-1), (0,1)] def bfs(x, y): queue = deque([((x, y), set(grid[x][y]), 1)]) max_len = 0 while queue: (cur_x, cur_y), seen, length = queue.popleft() max_len = max(max_len, length) for dx, dy in directions: new_x, new_y = cur_x + dx, cur_y + dy if 0 <= new_x < n and 0 <= new_y < m and grid[new_x][new_y] not in seen: queue.append(((new_x, new_y), seen | {grid[new_x][new_y]}, length+1)) return max_len return bfs(0, 0)"},{"question":"You are tasked with creating a function that reads a CSV file containing user data and generates a JSON object representing the aggregated data by a specified column. For simplicity, assume that the CSV file is well-formed and that every row contains valid data. **Function Signature** ```python def aggregate_csv_to_json(csv_file: str, group_by_column: str) -> str: pass ``` **Parameters** - `csv_file` (str): The path to the CSV file. - `group_by_column` (str): The column name by which the data should be aggregated. **Requirements** 1. Read the CSV file into a list or dictionary. 2. Aggregate the data by the specified column, such that each unique value of the column maps to a list of user records. 3. Each user record should be represented as a dictionary with keys corresponding to the column names. 4. Return the aggregated data as a JSON-formatted string. **Constraints** - The CSV file contains a header row with column names. - Each user record has at least one common column name besides the group_by_column. - Assume the CSV file is encoded in UTF-8. **Example Usage** Given a `users.csv` file with the following content: ``` id,name,age,country 1,Alice,34,USA 2,Bob,23,Canada 3,Charlie,45,USA 4,David,25,Canada 5,Eve,29,USA ``` ```python result = aggregate_csv_to_json(\'users.csv\', \'country\') print(result) ``` The output would be a JSON string similar to: ```json { \\"USA\\": [ {\\"id\\": \\"1\\", \\"name\\": \\"Alice\\", \\"age\\": \\"34\\"}, {\\"id\\": \\"3\\", \\"name\\": \\"Charlie\\", \\"age\\": \\"45\\"}, {\\"id\\": \\"5\\", \\"name\\": \\"Eve\\", \\"age\\": \\"29\\"} ], \\"Canada\\": [ {\\"id\\": \\"2\\", \\"name\\": \\"Bob\\", \\"age\\": \\"23\\"}, {\\"id\\": \\"4\\", \\"name\\": \\"David\\", \\"age\\": \\"25\\"} ] } ```","solution":"import csv import json from collections import defaultdict def aggregate_csv_to_json(csv_file: str, group_by_column: str) -> str: aggregated_data = defaultdict(list) with open(csv_file, mode=\'r\', encoding=\'utf-8\') as file: csv_reader = csv.DictReader(file) for row in csv_reader: group_key = row.pop(group_by_column) aggregated_data[group_key].append(row) return json.dumps(aggregated_data, indent=4)"},{"question":"You are asked to implement a simple k-nearest neighbors (k-NN) classifier for a dataset of points in a 2-dimensional space. Your goal is to write a function named `knn_classifier` that, given a list of labeled training points and a list of test points, predicts the label for each test point based on the labels of its nearest neighbors in the training set. The training dataset is a list of tuples, where each tuple contains a point (represented as a list of two floats) and a label (integer, either 0 or 1). The number of neighbors `k` is a parameter of the function. Here\'s what your function should do: 1. For each test point, compute the Euclidean distance to all training points. 2. Identify the `k` nearest neighbors (the training points with the smallest distances to the test point). 3. Predict the label for the test point by taking the majority vote among its `k` nearest neighbors. 4. Return a list of predicted labels for the test points. The function signature is: ```python def knn_classifier(training_data: List[Tuple[List[float], int]], test_data: List[List[float]], k: int) -> List[int]: ``` Ensure the following: - Utilize an appropriate method to compute the Euclidean distance between points. - Handle the case where the number of points in the training set is less than `k` appropriately. **Hints:** - You may find the `math.sqrt` and `math.pow` functions from the `math` library useful for computing Euclidean distances. - Use the `collections.Counter` class for counting the labels of the nearest neighbors.","solution":"import math from collections import Counter from typing import List, Tuple def euclidean_distance(point1: List[float], point2: List[float]) -> float: return math.sqrt(sum((p1 - p2) ** 2 for p1, p2 in zip(point1, point2))) def knn_classifier(training_data: List[Tuple[List[float], int]], test_data: List[List[float]], k: int) -> List[int]: def get_neighbors(test_point: List[float]) -> List[Tuple[List[float], int]]: distances = [(train_point, label, euclidean_distance(test_point, train_point)) for train_point, label in training_data] distances.sort(key=lambda x: x[2]) return distances[:k] def predict_label(neighbors: List[Tuple[List[float], int]]) -> int: labels = [label for _, label, _ in neighbors] most_common = Counter(labels).most_common() return most_common[0][0] predictions = [] for test_point in test_data: neighbors = get_neighbors(test_point) predictions.append(predict_label(neighbors)) return predictions"},{"question":"Create a function that generates a bar chart comparing the sales figures for two different products over a span of months. The function should take two arguments: one for each product\'s monthly sales figures (as lists of integers). The function should customize the bar chart by setting the title to \\"Monthly Sales Comparison\\", labeling the x-axis as \\"Month\\" and the y-axis as \\"Sales\\", and including a legend that labels the bars for each product appropriately. Ensure that the function handles cases where the input lists are not of the same length by raising a ValueError with an appropriate message. The function should output: matplotlib.axes.Axes: The Axes object of the plotted bar chart. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def compare_sales(product1_sales, product2_sales): ```","solution":"import numpy as np import matplotlib.pyplot as plt def compare_sales(product1_sales, product2_sales): Generates a bar chart comparing the sales figures for two different products over a span of months. Parameters: - product1_sales (list of int): Monthly sales figures for product 1. - product2_sales (list of int): Monthly sales figures for product 2. Raises: - ValueError: If the input lists are not of the same length. Returns: - matplotlib.axes.Axes: The Axes object of the plotted bar chart. # Check if both lists have the same length if len(product1_sales) != len(product2_sales): raise ValueError(\\"Sales lists for products must be the same length.\\") months = np.arange(1, len(product1_sales) + 1) fig, ax = plt.subplots() bar_width = 0.35 opacity = 0.8 rects1 = ax.bar(months - bar_width/2, product1_sales, bar_width, alpha=opacity, color=\'b\', label=\'Product 1\') rects2 = ax.bar(months + bar_width/2, product2_sales, bar_width, alpha=opacity, color=\'g\', label=\'Product 2\') ax.set_title(\'Monthly Sales Comparison\') ax.set_xlabel(\'Month\') ax.set_ylabel(\'Sales\') ax.set_xticks(months) ax.legend() return ax"},{"question":"You are required to develop a function `compare_sorting_algorithms` that compares the performance of different sorting algorithms by measuring the time taken to sort a list of integers. This function will generate random lists of integers, sort them using various algorithms, and plot the results. Here are the requirements for the `compare_sorting_algorithms` function: 1. The function should take two parameters: - `algorithms`: a list of sorting algorithm functions to be evaluated. Each function should accept a single list of integers and return a sorted list. - `sizes`: a list of integers representing different sizes of lists to be sorted. 2. For each list size in `sizes`: - Generate five random lists of integers of the specified size. - For each sorting algorithm in `algorithms`: - Measure the time taken to sort each random list using the specified algorithm. - Compute the average sorting time for each algorithm across the five lists. - Store the average sorting time in a dictionary where keys are algorithm names and values are lists of average times for each size. 3. After measuring the performance for all algorithms across all list sizes: - Plot the average sorting times against the list sizes using the `matplotlib.pyplot.plot` function for each algorithm. - Use `matplotlib.pyplot.xlabel` to label the x-axis (representing the size of the lists). - Use `matplotlib.pyplot.ylabel` to label the y-axis (representing the average sorting time). - Use `matplotlib.pyplot.title` to set the title of the plot. - Use `matplotlib.pyplot.legend` to add a legend to the plot identifying each algorithm. - Save the plot as `SortingPerformance.png` in the `results` directory. 4. The function should return the dictionary of average sorting times. **Task**: Implement the `compare_sorting_algorithms` function as described, using the specified libraries: `matplotlib.pyplot.plot`, `matplotlib.pyplot.xlabel`, `matplotlib.pyplot.ylabel`, `matplotlib.pyplot.title`, and `matplotlib.pyplot.legend`.","solution":"import random import time import matplotlib.pyplot as plt import os def compare_sorting_algorithms(algorithms, sizes): Compare the performance of different sorting algorithms by measuring the time taken to sort lists of integers. Parameters: - algorithms: List of sorting algorithms (functions). - sizes: List of integer sizes for which to generate random lists. Returns: - A dictionary where keys are algorithm names and values are lists of average sorting times for each size. results = {alg.__name__: [] for alg in algorithms} for size in sizes: for alg in algorithms: total_time = 0 for _ in range(5): random_list = [random.randint(0, 1000) for _ in range(size)] start_time = time.time() alg(random_list.copy()) end_time = time.time() total_time += (end_time - start_time) average_time = total_time / 5 results[alg.__name__].append(average_time) # Plot results for alg_name, times in results.items(): plt.plot(sizes, times, label=alg_name) plt.xlabel(\'List Size\') plt.ylabel(\'Average Sorting Time (seconds)\') plt.title(\'Sorting Algorithm Performance\') plt.legend() os.makedirs(\'results\', exist_ok=True) plt.savefig(\'results/SortingPerformance.png\') plt.close() return results"},{"question":"In your capacity as a software developer for a logistics company, you are required to create a function to simulate the routing of deliveries in a grid-like city. The city is represented as an `N x N` grid, and each cell in the grid can either be `0` (representing an open path) or `1` (representing an obstacle). Your task is to determine if there is a path from the top-left corner of the grid (position (0, 0)) to the bottom-right corner (position (N-1, N-1)). You may move up, down, left, or right, but cannot move diagonally or through obstacles. Implement the function `is_path_exists` that takes a 2D list (matrix) as input, representing the city grid. **Function Signature:** ```python def is_path_exists(grid: list[list[int]]) -> bool: ``` **Requirements:** - You may use Depth-First Search (DFS) or Breadth-First Search (BFS) to explore the paths. - Return `True` if a path exists, otherwise return `False`. - If the starting cell (0, 0) or the ending cell (N-1, N-1) is an obstacle, return `False`. **Example:** ```python grid = [ [0, 0, 1, 0], [1, 0, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0] ] # Returns: True (as there is a path from top-left to bottom-right) is_path_exists(grid) grid2 = [ [0, 0, 1, 0], [1, 1, 1, 0], [1, 0, 1, 0], [0, 0, 0, 1] ] # Returns: False (as there is no path from top-left to bottom-right) is_path_exists(grid2) ```","solution":"def is_path_exists(grid: list[list[int]]) -> bool: Determine if there is a path from the top-left corner (0,0) to the bottom-right corner (N-1,N-1) in the given grid. def is_valid_move(x, y): return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 0 def dfs(x, y, visited): if (x, y) in visited: return False if x == len(grid) - 1 and y == len(grid[0]) - 1: return True visited.add((x, y)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid_move(nx, ny): if dfs(nx, ny, visited): return True return False if grid[0][0] == 1 or grid[-1][-1] == 1: return False return dfs(0, 0, set())"},{"question":"You are tasked to design a function that simulates rolling a specific number of dice a specified number of times and calculates various statistics about the results. The function must use Python\'s `random` module specifically using the `random.randint` method. The function must have the following signature: ```python def roll_dice_and_calculate_statistics(num_rolls, num_dice): ``` - `num_rolls`: The total number of times to roll the dice. - `num_dice`: The number of dice to roll each time. The function should return a dictionary containing the following statistics: 1. `total_sum`: The total sum of all dice rolls. 2. `average_value`: The average value per roll. 3. `highest_roll`: The highest value rolled in a single roll. 4. `lowest_roll`: The lowest value rolled in a single roll. # Requirements 1. Use the `random.randint` method to simulate rolling a die, which returns a random integer between 1 and 6 (inclusive). 2. Roll the specified number of dice for the specified number of rolls. 3. Calculate the `total_sum`, `average_value`, `highest_roll`, and `lowest_roll` based on the results of all the rolls. 4. Return a dictionary containing the calculated statistics. # Example If `num_rolls` is 3 and `num_dice` is 2, the function might calculate statistics based on simulated results like: - Rolls: [[4, 6], [1, 3], [5, 2]] The returned dictionary would be: ```python { \'total_sum\': 21, \'average_value\': 7.0, \'highest_roll\': 10, \'lowest_roll\': 4 } ``` # Task Implement the function `roll_dice_and_calculate_statistics` according to the given signature and requirements using Python\'s `random` module.","solution":"import random def roll_dice_and_calculate_statistics(num_rolls, num_dice): Simulates rolling a specified number of dice a given number of times and calculates various statistics. Parameters: num_rolls (int): The number of times to roll the dice. num_dice (int): The number of dice to roll each time. Returns: dict: A dictionary with keys \'total_sum\', \'average_value\', \'highest_roll\', and \'lowest_roll\' containing the respective statistics. rolls = [] for _ in range(num_rolls): roll = [random.randint(1, 6) for _ in range(num_dice)] rolls.append(sum(roll)) total_sum = sum(rolls) average_value = total_sum / num_rolls if num_rolls else 0 highest_roll = max(rolls) if rolls else 0 lowest_roll = min(rolls) if rolls else 0 return { \'total_sum\': total_sum, \'average_value\': average_value, \'highest_roll\': highest_roll, \'lowest_roll\': lowest_roll }"},{"question":"You are given a list of integers `arr` and an integer `k`. Your task is to write a function named `find_pairs_with_sum(arr, k)` that returns a list of unique pairs from the array that sum up to the given integer `k`. Each pair should be sorted in ascending order, and the list of pairs should also be sorted in ascending order based on the first element of the pairs. If multiple pairs have the same first element, sort them based on the second element. To solve this problem, consider the following steps: 1. **Use a set to track elements**: Iterate through the array and use a set to keep track of the numbers you have seen so far. For each element, check if there is another number in the set such that the two numbers add up to `k`. 2. **Avoid duplicates**: Ensure that each pair is unique by using an additional set to store the pairs found. 3. **Sorting the pairs**: Sort each pair as you find them and finally sort the list of all pairs based on the criteria mentioned above. # Function Signature: ```python def find_pairs_with_sum(arr: List[int], k: int) -> List[Tuple[int, int]]: pass ``` # Example Usage: ```python arr = [1, 5, 3, 7, 9, 2] k = 10 print(find_pairs_with_sum(arr, k)) ``` The `find_pairs_with_sum(arr, k)` function should return: ``` [(1, 9), (3, 7)] ``` # Additional Example: ```python arr = [4, 4, 2, 6, 8] k = 8 print(find_pairs_with_sum(arr, k)) ``` The `find_pairs_with_sum(arr, k)` function should return: ``` [(2, 6), (4, 4)] ``` Ensure that your function handles edge cases such as empty arrays, arrays with no valid pairs, and arrays with multiple valid pairs without duplicates.","solution":"from typing import List, Tuple def find_pairs_with_sum(arr: List[int], k: int) -> List[Tuple[int, int]]: seen = set() pairs = set() for num in arr: target = k - num if target in seen: pairs.add(tuple(sorted((num, target)))) seen.add(num) return sorted(pairs)"},{"question":"Write a Python function named `replace_in_files` that recursively traverses through directories starting from a given root directory. The function should read all the `.txt` files in each directory and replace any occurrence of a specified string with another string. If a subdirectory is found, the function should recursively check that subdirectory as well. The function should use the `os` module to navigate directories and the `open` function to read/write files. The main function `replace_in_files` should have the following signature: ```python def replace_in_files(dir, target_str, replace_str): # your code here ``` # Example Usage: Assume the following directory structure: ``` root_dir/ ├── file1.txt (contains \\"hello world\\") ├── file2.txt (contains \\"world hello\\") └── sub_dir/ ├── file3.txt (contains \\"hello everyone\\") ├── file4.py └── sub_sub_dir/ ├── file5.txt (contains \\"hi hello\\") └── file6.txt (contains \\"goodbye world\\") ``` When the function `replace_in_files(\\"root_dir\\", \\"hello\\", \\"hi\\")` is called, it should modify the files as follows: ``` root_dir/ ├── file1.txt (now contains \\"hi world\\") ├── file2.txt (unchanged: \\"world hello\\") └── sub_dir/ ├── file3.txt (now contains \\"hi everyone\\") ├── file4.py (unchanged) └── sub_sub_dir/ ├── file5.txt (now contains \\"hi hi\\") └── file6.txt (unchanged: \\"goodbye world\\") ``` # Additional Information: - Make sure that the function skips non-directory entries and non-`.txt` files. - Handle file reading and writing operations carefully to avoid overwriting issues. - Provide meaningful print statements indicating which files are being modified.","solution":"import os def replace_in_files(dir, target_str, replace_str): Recursively traverse directories starting from `dir`, and replace any occurrence of `target_str` with `replace_str` in all `.txt` files. Args: - dir (str): Root directory to start traversal. - target_str (str): The string to search for in each file. - replace_str (str): The string to replace `target_str` with. for root, dirs, files in os.walk(dir): for file in files: if file.endswith(\'.txt\'): file_path = os.path.join(root, file) with open(file_path, \'r\') as f: content = f.read() new_content = content.replace(target_str, replace_str) if content != new_content: with open(file_path, \'w\') as f: f.write(new_content) print(f\\"Modified: {file_path}\\")"},{"question":"In many text-editing applications, implementing an efficient search-and-replace functionality that allows users to replace all occurrences of a given substring within a large text is essential. This problem will require you to implement such a function, aiming to handle cases where replacements do not overlap. **Your task is to write a function `search_and_replace(text, old_sub, new_sub)` that:** 1. **Takes in three parameters:** - `text`: A string representing the original text in which to perform the search and replace operation. - `old_sub`: The substring to search for. - `new_sub`: The substring to replace `old_sub` with. 2. **Returns:** - A new string with all occurrences of `old_sub` replaced by `new_sub`. 3. **Requirements:** - Ensure that replacements do not overlap. - The function should handle large texts efficiently. - The function should not use built-in string methods like `.replace()` to ensure manual control over the replacement process. **Example:** ```python def search_and_replace(text, old_sub, new_sub): result = [] i = 0 while i < len(text): if text[i:i+len(old_sub)] == old_sub: result.append(new_sub) i += len(old_sub) else: result.append(text[i]) i += 1 return \'\'.join(result) # Example scenario text = \\"ababab\\" old_sub = \\"ab\\" new_sub = \\"cd\\" new_text = search_and_replace(text, old_sub, new_sub) print(new_text) # Output: \\"cdcdcd\\" ```","solution":"def search_and_replace(text, old_sub, new_sub): Replaces all non-overlapping occurrences of old_sub with new_sub in text. result = [] i = 0 while i < len(text): # Check if the current slice matches old_sub if text[i:i+len(old_sub)] == old_sub: result.append(new_sub) i += len(old_sub) # move past the old_sub in the text else: result.append(text[i]) # append the current character i += 1 # move to the next character return \'\'.join(result)"},{"question":"You need to implement a function named `unique_paths` that calculates the number of unique paths from the top-left corner to the bottom-right corner of a `m x n` grid. You can only move either down or right at any point in time. Here is the function signature: ```python def unique_paths(m: int, n: int) -> int: pass ``` **Parameters:** - `m` (int): The number of rows in the grid. - `n` (int): The number of columns in the grid. **Returns:** - Returns an integer representing the number of unique paths from the top-left to the bottom-right corner of the grid. # Specific Requirements: 1. You should implement this function using dynamic programming. 2. Avoid using brute-force recursion to ensure that the function runs efficiently even for larger values of `m` and `n`. 3. The function should handle cases where `m` or `n` may be equal to 1 and return 1 as there is only one path in a single row or column. # Example: Example 1: ```python m = 3 n = 7 ``` When `unique_paths(m, n)` is called, the output should be: ```python 28 ``` Example 2: ```python m = 3 n = 2 ``` When `unique_paths(m, n)` is called, the output should be: ```python 3 ``` # Explanation: For the first example, there are 28 unique paths from the top-left corner to the bottom-right corner in a 3 x 7 grid. For the second example, there are 3 unique paths in a 3 x 2 grid. # Hints: - Use a 2D list (array) to store the number of unique paths to reach each cell. - Initialize the first row and first column with 1s because there\'s only one way to reach cells in the first row and first column. - The value at each cell `(i, j)` can be computed as the sum of the values of the cell directly above it `(i-1, j)` and the cell directly to the left `(i, j-1)`.","solution":"def unique_paths(m: int, n: int) -> int: Calculate the number of unique paths from the top-left corner to the bottom-right corner of a m x n grid. # Initialize a 2D list (m x n) with 1s. dp = [[1] * n for _ in range(m)] # Fill the dp array using the dynamic programming approach for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right corner will contain the number of unique paths return dp[m-1][n-1]"},{"question":"You are working with a software development team at an e-commerce company. The team needs a utility function to help them validate and standardize product SKUs (Stock Keeping Units). Each SKU is a string and should adhere to the following format: it must start with three uppercase letters, followed by a hyphen, and end with four digits (for example, \\"ABC-1234\\"). Write a function that validates if each SKU is in the correct format and returns a list of valid SKUs. Use Python\'s `re` module for regular expressions. **Function Specifications:** - **Function Name:** `validate_skus` - **Parameters:** - `skus` (list of str): A list containing SKU strings. **Action Steps:** 1. Use a regular expression to check if each SKU in the list matches the required format. 2. Filter out the SKUs that do not match the format. 3. Return a list containing only the valid SKUs. **Constraints:** - The input list can have any number of SKUs. - SKUs that do not match the format should be omitted from the output list. **Example Usage:** ```python valid_skus = validate_skus([\\"ABC-1234\\", \\"DEF-5678\\", \\"XYZ-12A4\\", \\"GHI-98765\\"]) ``` **Expected Output:** ``` [\\"ABC-1234\\", \\"DEF-5678\\"] ```","solution":"import re def validate_skus(skus): Validates a list of SKUs to ensure they meet the format: three uppercase letters, a hyphen, and four digits. Parameters: skus (list of str): A list of SKU strings. Returns: list of str: A list containing only the valid SKUs. valid_pattern = re.compile(r\\"^[A-Z]{3}-d{4}\\") return [sku for sku in skus if valid_pattern.match(sku)]"},{"question":"You are asked to implement a function called `track_stock_prices` that records stock price data into an SQLite database. Use the Python `sqlite3` and `logging` libraries to accomplish this. Your function should: 1. Connect to an SQLite database named `stocks.db`. 2. Insert stock price data into a table named `stock_prices` with the columns: `date`, `ticker`, `open_price`, `close_price`, `high_price`, `low_price`, `volume`. 3. Handle any potential exceptions that may occur during the database operations by logging them with a severity level of `ERROR`. 4. Make sure that the database connection is properly closed after the operation, regardless of success or failure. The input to the function will be a dictionary containing the following keys: - `date` (string) - `ticker` (string) - `open_price` (float) - `close_price` (float) - `high_price` (float) - `low_price` (float) - `volume` (integer) Here is the function signature you need to implement: ```python def track_stock_prices(stock_data): pass ``` Your task is to complete this function correctly using the `sqlite3.connect` and `logging.error` API functions. Below is a sample call to the function, for reference: ```python stock_data = { \\"date\\": \\"2023-10-01\\", \\"ticker\\": \\"AAPL\\", \\"open_price\\": 145.30, \\"close_price\\": 147.50, \\"high_price\\": 148.00, \\"low_price\\": 144.50, \\"volume\\": 8900000 } track_stock_prices(stock_data) ```","solution":"import sqlite3 import logging def track_stock_prices(stock_data): Records stock price data into an SQLite database. Args: - stock_data (dict): A dictionary containing stock price data with keys: \\"date\\", \\"ticker\\", \\"open_price\\", \\"close_price\\", \\"high_price\\", \\"low_price\\", \\"volume\\". connection = None try: # Connect to the database connection = sqlite3.connect(\'stocks.db\') cursor = connection.cursor() # Create table if it doesn\'t exist cursor.execute(\'\'\'CREATE TABLE IF NOT EXISTS stock_prices ( date TEXT, ticker TEXT, open_price REAL, close_price REAL, high_price REAL, low_price REAL, volume INTEGER )\'\'\') # Insert the stock data cursor.execute(\'\'\'INSERT INTO stock_prices (date, ticker, open_price, close_price, high_price, low_price, volume) VALUES (?, ?, ?, ?, ?, ?, ?)\'\'\', (stock_data[\'date\'], stock_data[\'ticker\'], stock_data[\'open_price\'], stock_data[\'close_price\'], stock_data[\'high_price\'], stock_data[\'low_price\'], stock_data[\'volume\'])) connection.commit() # Commit the transaction except Exception as e: logging.error(f\\"Error inserting stock data: {e}\\") finally: if connection: connection.close() # Ensure the connection is closed"},{"question":"Create a function that takes a string as input and returns the number of unique substrings that can be generated from it. A substring is defined as any contiguous sequence of characters within the string. The function tests string manipulation and algorithmic counting skills. The function should output an integer which is the count of unique substrings. You should write self-contained code starting with: ``` def count_unique_substrings(s: str) -> int: ```","solution":"def count_unique_substrings(s: str) -> int: Returns the total number of unique substrings that can be generated from the input string s. substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"Write a function that accepts a list of integers and returns a dictionary that maps each unique integer to the number of times it appears in the list. The function should handle lists with up to 10,000 integers efficiently and ensure the dictionary keys are sorted in ascending order. The function should output with: dict: A dictionary where keys are unique integers from the list, and values are their respective counts. You should write self-contained code starting with: ``` def count_occurrences(int_list): ```","solution":"def count_occurrences(int_list): Returns a dictionary mapping each unique integer to the number of times it appears in the list. # Create an empty dictionary to store counts counts = {} # Iterate over each integer in the list for number in int_list: # Increment the count for the integer if number in counts: counts[number] += 1 else: counts[number] = 1 # Sort final counts dictionary by keys sorted_counts = dict(sorted(counts.items())) return sorted_counts"},{"question":"You are tasked with creating a function in Python which reads a list of dictionaries representing student data and writes the data to a CSV file. Each dictionary contains the following fields: \'id\', \'name\', \'age\', and \'grade\'. The function needs to ensure that the CSV file includes headers for each column. # Function Specification Write a function named `write_student_data_to_csv` which: 1. Takes two parameters: - `students`: A list of dictionaries where each dictionary contains the keys \'id\', \'name\', \'age\', and \'grade\'. - `file_name`: A string representing the name of the CSV file to be created. 2. Writes the student data to a CSV file with the following specifications: - The first row of the CSV file should contain the headers: \'ID\', \'Name\', \'Age\', \'Grade\'. - Each subsequent row should contain the values for each student, aligned with the appropriate headers. # Example ```python students = [ {\'id\': 1, \'name\': \'John Doe\', \'age\': 15, \'grade\': \'A\'}, {\'id\': 2, \'name\': \'Jane Smith\', \'age\': 14, \'grade\': \'B\'}, {\'id\': 3, \'name\': \'Emily Davis\', \'age\': 15, \'grade\': \'A\'}, ] file_name = \'students.csv\' write_student_data_to_csv(students, file_name) ``` The function call should create a `students.csv` file with the following content: ``` ID,Name,Age,Grade 1,John Doe,15,A 2,Jane Smith,14,B 3,Emily Davis,15,A ``` You must use the `csv` module from the Python standard library to complete this task. The goal is to practice reading and writing data using the `csv` module. # Constraints - You do not need to handle exceptions. - Assume the `students` list is correctly formatted and contains all required keys. # Requirements - Use the `csv.DictWriter` class for writing the CSV file. - Ensure the headers in the CSV file match the order and spelling of the fields in each dictionary.","solution":"import csv def write_student_data_to_csv(students, file_name): Writes a list of student dictionaries to a CSV file with headers \'ID\', \'Name\', \'Age\', \'Grade\'. :param students: List of dictionaries where each dictionary contains \'id\', \'name\', \'age\', and \'grade\'. :param file_name: Name of the CSV file to write the data to. # Define the fieldnames for the CSV fieldnames = [\'ID\', \'Name\', \'Age\', \'Grade\'] # Open the file in write mode with open(file_name, mode=\'w\', newline=\'\') as file: # Create a DictWriter object with the specified fieldnames writer = csv.DictWriter(file, fieldnames=fieldnames) # Write the headers to the CSV writer.writeheader() # Iterate over the list of students and write each student\'s data to the CSV for student in students: writer.writerow({ \'ID\': student[\'id\'], \'Name\': student[\'name\'], \'Age\': student[\'age\'], \'Grade\': student[\'grade\'] })"},{"question":"Write a Python function called `email_filter` that takes two arguments: a list of email addresses `emails` and a string `domain`. The function should return a new list containing only the email addresses from the input list that end with the given domain. For simplicity, assume all email addresses are well-formed and the domain string is a valid domain name (e.g., \'example.com\'). The email addresses may be of various lengths and formats. The domain comparison should be case-insensitive. Here is a function signature for clarity: ```python def email_filter(emails, domain): pass ``` **Examples:** ```python emails = [\'test@example.com\', \'foo@bar.com\', \'admin@Example.COM\', \'hello@example.org\'] domain = \'example.com\' email_filter(emails, domain) ``` **Output:** ```python [\'test@example.com\', \'admin@Example.COM\'] ``` **Hint:** Consider using string methods to perform case-insensitive comparisons.","solution":"def email_filter(emails, domain): Filters the list of emails to return only those that end with the specified domain. Args: emails (list): A list of email addresses (strings). domain (string): The domain to filter the email addresses by. Returns: list: A list of email addresses that end with the given domain. filtered_emails = [email for email in emails if email.lower().endswith(\'@\' + domain.lower())] return filtered_emails"},{"question":"Write a Python function `increment_number_string` that takes a string representing a non-negative integer number and returns a string representing the number incremented by one. The function should handle leading zeros in the input string appropriately, maintaining their presence in the output string as necessary. Your function should: 1. Handle leading zeros in the input string. 2. Increment the numerical value represented by the string by one. 3. Return the resulting number as a string with original leading zeros preserved if applicable. Function Signature: ```python def increment_number_string(n: str) -> str: pass ``` **Notes**: - The input string `n` will contain only digits (`0`-`9`). - The input string will not be empty. - The input might be a string with only zeros, which should be treated as a valid number. **Examples**: ```python increment_number_string(\\"123\\") # Returns \\"124\\" increment_number_string(\\"0099\\") # Returns \\"0100\\" increment_number_string(\\"0000\\") # Returns \\"0001\\" increment_number_string(\\"1001\\") # Returns \\"1002\\" increment_number_string(\\"000123\\") # Returns \\"000124\\" ``` In your implementation, you should convert the string to an integer, increment it, and then convert it back to a string. You should then determine any leading zeros from the original input and ensure they are preserved in the resulting string.","solution":"def increment_number_string(n: str) -> str: Increments a string representation of a non-negative integer by one, maintaining leading zeros. Parameters: n (str): A string representing a non-negative integer number. Returns: str: A string with the number incremented by one, maintaining leading zeros. # Convert string to integer, increment by one, then back to string incremented_number = str(int(n) + 1) # Calculate the difference in lengths to preserve leading zeros leading_zeros_count = len(n) - len(incremented_number) # Construct the resultant string with necessary leading zeros return \'0\' * leading_zeros_count + incremented_number"},{"question":"You are tasked with implementing a function named `calculate_word_frequencies` that takes a list of strings as input and returns a dictionary mapping each word to its frequency count. Each string in the input list represents a sentence. Your function should: 1. Convert all words to lowercase. 2. Exclude punctuation from the words. 3. Count the occurrences of each word. 4. Return a dictionary where the keys are words, and the values are their respective counts. # Example If the input list is: ```python sentences = [\\"Hello world!\\", \\"The world is beautiful. Hello again.\\"] ``` Your function should return: ```python { \\"hello\\": 2, \\"world\\": 2, \\"the\\": 1, \\"is\\": 1, \\"beautiful\\": 1, \\"again\\": 1 } ``` # Requirements: - You should convert words to lowercase before counting. - Make sure to remove punctuation from the words. - Use the `collections.Counter` class for counting the word frequencies. # Additional Information: To remove punctuation, you can use the `string.punctuation` set: ```python import string # Sample usage to remove punctuation s = \\"Hello, world!\\" s = s.translate(str.maketrans(\'\', \'\', string.punctuation)) print(s) # Output: \\"Hello world\\" ``` # Function Signature: ```python def calculate_word_frequencies(sentences: list) -> dict: pass ``` Write the function `calculate_word_frequencies` to solve the problem.","solution":"import string from collections import Counter def calculate_word_frequencies(sentences): Calculates the frequency of each word in the provided list of sentences. Parameters: sentences (list): A list of sentences (strings) Returns: dict: A dictionary with words as keys and their frequency counts as values. all_words = [] for sentence in sentences: no_punctuation_sentence = sentence.translate(str.maketrans(\'\', \'\', string.punctuation)) words = no_punctuation_sentence.lower().split() all_words.extend(words) word_frequencies = Counter(all_words) return dict(word_frequencies)"},{"question":"You are tasked with creating a function that processes a log of network activity and identifies the longest sequence of uninterrupted activity for a specific user. The log is represented as a list of tuples, where each tuple contains the user ID (string) and the timestamp (integer) of an activity. The activity log is sorted by timestamp in ascending order. Your function should return the start and end timestamps of the longest sequence of uninterrupted activity for a given user. Uninterrupted activity is defined as a series of consecutive activities where the difference between any two successive timestamps does not exceed a given threshold. Given: - A list of tuples representing the activity log. - A string representing the user ID. - An integer representing the threshold for uninterrupted activity. **Function Name:** `find_longest_activity` **Parameters:** - `log` (list of tuples): A sorted list of tuples, where each tuple contains a user ID (string) and a timestamp (integer). - `user_id` (string): The user ID to search for in the activity log. - `threshold` (integer): The maximum allowable difference between consecutive timestamps for the activity to be considered uninterrupted. **Returns:** - A tuple containing the start and end timestamps of the longest sequence of uninterrupted activity for the specified user. If no activity is found for the user, return `(None, None)`. **Behavior:** - The function should iterate through each entry in the log, filtering entries for the specified user and checking for uninterrupted sequences based on the given threshold. - It should identify the longest such sequence and return the start and end timestamps of this sequence. Example of use: ```python log = [ (\\"user1\\", 1), (\\"user2\\", 2), (\\"user1\\", 3), (\\"user1\\", 7), (\\"user1\\", 8), (\\"user2\\", 10), (\\"user1\\", 14) ] user_id = \\"user1\\" threshold = 4 print(find_longest_activity(log, user_id, threshold)) # This should return (1, 8) as the longest sequence of uninterrupted activity within the threshold for \'user1\'. ```","solution":"def find_longest_activity(log, user_id, threshold): Identifies the longest sequence of uninterrupted activity for a specific user. Parameters: log (list of tuples): A sorted list of tuples, where each tuple contains a user ID (string) and a timestamp (integer). user_id (string): The user ID to search for in the activity log. threshold (integer): The maximum allowable difference between consecutive timestamps for the activity to be considered uninterrupted. Returns: tuple: The start and end timestamps of the longest sequence of uninterrupted activity for the specified user. If no activity is found for the user, return (None, None). longest_start = None longest_end = None longest_length = 0 current_start = None current_end = None current_length = 0 for entry in log: if entry[0] == user_id: timestamp = entry[1] if current_start is None: current_start = timestamp current_end = timestamp current_length = 1 elif timestamp - current_end <= threshold: current_end = timestamp current_length += 1 else: if current_length > longest_length: longest_start = current_start longest_end = current_end longest_length = current_length current_start = timestamp current_end = timestamp current_length = 1 if current_length > longest_length: longest_start = current_start longest_end = current_end return (longest_start, longest_end)"},{"question":"In this problem, your task is to write a function `manage_online_store_data` that processes sales data and product reviews to determine and classify the average customer rating for each product. You are required to use pandas for data manipulation and analysis. Here\'s a step-by-step breakdown of what the function should do: 1. **Data Preparation**: - Assume there exist two dataframes: `sales` and `reviews` retrieved from their respective functions: `get_sales_data()` and `get_reviews_data()`. - These dataframes contain data for various products with at least the columns: - `sales`: `ProductID`, `Sales` - `reviews`: `ProductID`, `Rating` 2. **Data Aggregation**: - For the `reviews` dataframe, compute the average customer rating for each product. - For the `sales` dataframe, sum the total sales for each product. 3. **Data Merging**: - Merge the `sales` and `reviews` dataframes on the `ProductID` column to create a single comprehensive dataframe. 4. **Data Classification**: - Set `ProductID` as the index. - Calculate the median value of the average customer ratings. - Create a new pandas Series where each product is classified as \\"High\\" if its average rating is above or equal to the median, and \\"Low\\" if it is below. 5. **Output**: - Return the created pandas Series. Function Signature: ```python def manage_online_store_data() -> pd.Series: pass ```","solution":"import pandas as pd def get_sales_data(): # This function would realistically load sales data from a source # We will create a dummy example here for illustration purposes. data = { \'ProductID\': [\'P1\', \'P2\', \'P3\', \'P4\', \'P5\'], \'Sales\': [100, 200, 150, 50, 300] } return pd.DataFrame(data) def get_reviews_data(): # This function would realistically load reviews data from a source # We will create a dummy example here for illustration purposes. data = { \'ProductID\': [\'P1\', \'P2\', \'P3\', \'P4\', \'P5\'], \'Rating\': [4.5, 3.0, 4.0, 2.0, 5.0] } return pd.DataFrame(data) def manage_online_store_data() -> pd.Series: sales = get_sales_data() reviews = get_reviews_data() # Compute the average customer rating for each product avg_ratings = reviews.groupby(\'ProductID\')[\'Rating\'].mean().reset_index() # Sum the total sales for each product total_sales = sales.groupby(\'ProductID\')[\'Sales\'].sum().reset_index() # Merge the sales and reviews dataframes on \'ProductID\' merged_data = pd.merge(total_sales, avg_ratings, on=\'ProductID\') # Set ProductID as the index merged_data.set_index(\'ProductID\', inplace=True) # Calculate the median value of the average customer ratings median_rating = merged_data[\'Rating\'].median() # Classify each product based on the median rating rating_classification = merged_data[\'Rating\'].apply(lambda x: \'High\' if x >= median_rating else \'Low\') return rating_classification"},{"question":"Your task is to implement a function `reverse_words_in_string(s: str) -> str` that takes a string as input and returns the string with the order of the words reversed. Words are defined as sequences of characters separated by spaces. Leading and trailing spaces should be removed from the result, and multiple spaces between words should be reduced to a single space. # Example 1. `reverse_words_in_string(\\"the sky is blue\\")` should return \\"blue is sky the\\". 2. `reverse_words_in_string(\\" hello world \\")` should return \\"world hello\\". 3. `reverse_words_in_string(\\"a good example\\")` should return \\"example good a\\". # Constraints: - **Input length**: The input string can include any printable ASCII character and will have a length between 0 and 10,000. - **Leading/Trailing spaces**: Ignore any leading or trailing spaces, but ensure that the words are correctly separated by a single space in the output even if they had been separated by multiple spaces in the input. # Requirements: - Ensure the function handles an empty string gracefully. - Maintain efficient use of space and time complexity. - The function should use built-in string manipulation methods to achieve the desired results. # Example Code Below is the function signature to help you get started: ```python def reverse_words_in_string(s: str) -> str: # Write your code here pass # Example usage: print(reverse_words_in_string(\\"the sky is blue\\")) # Expected output: \\"blue is sky the\\" print(reverse_words_in_string(\\" hello world \\")) # Expected output: \\"world hello\\" print(reverse_words_in_string(\\"a good example\\")) # Expected output: \\"example good a\\" ```","solution":"def reverse_words_in_string(s: str) -> str: This function takes a string as input and returns the string with the order of the words reversed. It removes leading and trailing spaces and reduces multiple spaces between words to a single space. # Split the string by spaces to get the words, filter out empty strings words = s.split() # Reverse the list of words words.reverse() # Join the words with a single space return \' \'.join(words)"},{"question":"Write a function that reads a CSV file, computes the mean and standard deviation for each numeric column, and returns these statistics as a dictionary. Handle the exception when the CSV file does not exist or is not readable. The function should raise the exception for: FileNotFoundError: If the CSV file does not exist. The function should return a dictionary with: - The mean and standard deviation of each numeric column. You should write self-contained code starting with: ``` import pandas as pd def analyze_csv(file_path): ```","solution":"import pandas as pd def analyze_csv(file_path): Reads a CSV file, computes the mean and standard deviation for each numeric column, and returns these statistics as a dictionary. Handles the exception when the CSV file does not exist or is not readable. :param file_path: Path to the CSV file :type file_path: str :return: Dictionary with mean and standard deviation of each numeric column :rtype: dict :raises FileNotFoundError: If the CSV file does not exist try: df = pd.read_csv(file_path) except FileNotFoundError: raise FileNotFoundError(f\\"The file {file_path} does not exist.\\") except pd.errors.EmptyDataError: raise pd.errors.EmptyDataError(f\\"The file {file_path} is empty or not readable.\\") stats = {} numeric_cols = df.select_dtypes(include=\'number\').columns for column in numeric_cols: mean_value = df[column].mean() std_dev_value = df[column].std() stats[column] = { \\"mean\\": mean_value, \\"std_dev\\": std_dev_value } return stats"},{"question":"You are required to write a function named `filter_and_sort_numbers` that takes a list of integers and performs two main operations: filtering and sorting. The function should first filter out all numbers that are less than a given threshold and then sort the remaining numbers in ascending order using selection sort. Requirements: 1. The function should be named `filter_and_sort_numbers`. 2. Parameters: - `numbers`: list of integers. - `threshold`: integer, the minimum value that numbers need to pass to be included in the result. 3. The function should return a list of integers that are greater than or equal to the threshold, sorted in ascending order. 4. Implement the sorting using the selection sort algorithm. Example Usage: ```python numbers = [12, 5, 8, 3, 17, 25, 8, 1] threshold = 10 result = filter_and_sort_numbers(numbers, threshold) print(result) # Output: [12, 17, 25] ``` #","solution":"def filter_and_sort_numbers(numbers, threshold): Filters out numbers less than the threshold and sorts the remaining numbers using selection sort. Parameters: numbers (list of int): List of integers to be filtered and sorted. threshold (int): The minimum value that numbers need to pass to be included in the result. Returns: list of int: Filtered and sorted list of integers. # Filter numbers based on the threshold filtered_numbers = [num for num in numbers if num >= threshold] # Selection sort implementation for i in range(len(filtered_numbers)): min_idx = i for j in range(i + 1, len(filtered_numbers)): if filtered_numbers[min_idx] > filtered_numbers[j]: min_idx = j # Swap the found minimum element with the first element filtered_numbers[i], filtered_numbers[min_idx] = filtered_numbers[min_idx], filtered_numbers[i] return filtered_numbers"},{"question":"Create a function named `countOccurrences(string, word)` that counts the number of times a given word appears in a string. The function should be case-insensitive and should only count whole word occurrences, meaning substrings of longer words should not count. **Function Definition**: ```python def countOccurrences(string: str, word: str) -> int: Counts the number of times a word appears in a given string. Parameters: string (str): The input string where the word needs to be counted. word (str): The word to count in the given string. Returns: int: The number of occurrences of the word in the string. # Your implementation ``` **Requirements**: 1. Treat the string as case-insensitive. 2. Count only whole word occurrences, not as a part of another word. 3. Handle potential edge cases such as the string being empty or the word not appearing in the string. Example: ```python # Given the string \\"Python is great. python is easy to learn. Pythonic approaches are wonderful.\\" # The word to count is \'python\'. countOccurrences(\\"Python is great. python is easy to learn. Pythonic approaches are wonderful.\\", \\"python\\") # The function should return 2 because \'python\' appears 2 times as a whole word, and \'Pythonic\' does not count. ```","solution":"def countOccurrences(string: str, word: str) -> int: Counts the number of times a word appears in a given string. Parameters: string (str): The input string where the word needs to be counted. word (str): The word to count in the given string. Returns: int: The number of occurrences of the word in the string. import re # make the string case-insensitive string = string.lower() word = word.lower() # use regex to find whole word occurrences pattern = r\'b\' + re.escape(word) + r\'b\' return len(re.findall(pattern, string))"},{"question":"Write a function that takes a string of text and returns a dictionary where the keys are all the unique words (case-insensitive, ignoring punctuation) in the text, and the values are the counts of each word. Words are defined as sequences of alphanumeric characters and underscores. The function should output: ``` dict: A dictionary where keys are unique words from the text and values are their respective counts. ``` You should write self-contained code starting with: ``` import re from collections import defaultdict def word_count(text): ```","solution":"import re from collections import defaultdict def word_count(text): Returns a dictionary where the keys are the unique words (case-insensitive, ignoring punctuation) in the text and the values are the counts of each word. :param text: str, input text :return: dict, dictionary with word counts # Convert text to lowercase text = text.lower() # Use regex to find all words (sequences of alphanumeric characters and underscores) words = re.findall(r\'bw+b\', text) # Use defaultdict to count the occurrences of each word word_counts = defaultdict(int) for word in words: word_counts[word] += 1 return dict(word_counts)"},{"question":"Problem Statement Design a function `get_email_domains_count` that takes a list of email addresses as input and returns a dictionary where the keys are email domains, and the values are the number of occurrences of each domain in the list. The problem is aimed at practicing string manipulation and dictionary operations in Python. # Input - A list of strings where each string is an email address. # Output - A dictionary where: - Keys are unique email domains extracted from the input list. - Values are the counts of occurrences of each domain in the input list. # Detailed Requirements 1. **Email Domain Extraction:** - For each email, extract the part after the \'@\' symbol as the domain. 2. **Case Sensitivity:** - Domains should be treated case-insensitively. For example, \'Example.com\' and \'example.com\' should be treated as the same domain. 3. **Output Structure:** - The output should be a dictionary with domains as keys and their respective counts as values. 4. **Empty List:** - If the input list is empty, the output should be an empty dictionary. # Example Usage: ```python emails = [ \\"alice@example.com\\", \\"bob@Example.com\\", \\"charlie@anotherdomain.com\\", \\"david@example.com\\", \\"eve@AnotherDomain.Com\\", \\"frank@example.com\\" ] domain_counts = get_email_domains_count(emails) print(domain_counts) # Output: {\'example.com\': 4, \'anotherdomain.com\': 2} ``` **Note**: Ensure your solution handles edge cases such as different cases for domains and an empty input list efficiently.","solution":"def get_email_domains_count(emails): Given a list of emails, returns a dictionary with the count of occurrences of each domain. :param emails: List of email addresses :type emails: List[str] :return: Dictionary with domains as keys and their counts as values :rtype: dict domain_count = {} for email in emails: domain = email.split(\'@\')[-1].lower() if domain in domain_count: domain_count[domain] += 1 else: domain_count[domain] = 1 return domain_count"},{"question":"You are tasked with writing a Python function that evaluates the performance of two sorting algorithms: Bubble Sort and Quick Sort. The function should generate a list of random integers and then sort it using both algorithms, measuring the execution time for each. To accomplish this, use the following requirements and constraints: - Use the `random.sample` function to generate a list of unique random integers. - Implement both Bubble Sort and Quick Sort. - Use the `time.time` function to measure the sorting times. - Ensure the list of random integers contains between 1000 and 2000 elements. Name this function `compare_sorting_algorithms`. It should accept no parameters and return a dictionary containing the execution times for both sorting algorithms. Here\'s a clear specification for the helper functions you might need: - `bubble_sort(arr)`: Implements Bubble Sort and returns the sorted array. - `quick_sort(arr)`: Implements Quick Sort and returns the sorted array. - `generate_random_list(size)`: Generates a list of unique random integers of the given size. You may use appropriate functions from the `random` and `time` libraries as indicated. ```python import random import time def bubble_sort(arr): Sorts a list using Bubble Sort. Parameters: - arr: The list to sort Returns: - The sorted list for i in range(len(arr)): for j in range(0, len(arr)-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def quick_sort(arr): Sorts a list using Quick Sort. Parameters: - arr: The list to sort Returns: - The sorted list if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) def generate_random_list(size): Generates a list of unique random integers of a given size. Parameters: - size: The number of integers to generate Returns: - A list of unique random integers return random.sample(range(1, size * 10), size) def compare_sorting_algorithms(): Compares the performance of Bubble Sort and Quick Sort on a random list of integers. Returns: - A dictionary with the execution times for both sorting algorithms size = random.randint(1000, 2000) random_list = generate_random_list(size) bubble_list = random_list.copy() quick_list = random_list.copy() start_time = time.time() bubble_sort(bubble_list) bubble_time = time.time() - start_time start_time = time.time() quick_sort(quick_list) quick_time = time.time() - start_time return { \'bubble_sort_time\': bubble_time, \'quick_sort_time\': quick_time } ```","solution":"import random import time def bubble_sort(arr): Sorts a list using Bubble Sort. Parameters: - arr: The list to sort Returns: - The sorted list for i in range(len(arr)): for j in range(0, len(arr)-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def quick_sort(arr): Sorts a list using Quick Sort. Parameters: - arr: The list to sort Returns: - The sorted list if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) def generate_random_list(size): Generates a list of unique random integers of a given size. Parameters: - size: The number of integers to generate Returns: - A list of unique random integers return random.sample(range(1, size * 10), size) def compare_sorting_algorithms(): Compares the performance of Bubble Sort and Quick Sort on a random list of integers. Returns: - A dictionary with the execution times for both sorting algorithms size = random.randint(1000, 2000) random_list = generate_random_list(size) bubble_list = random_list.copy() quick_list = random_list.copy() start_time = time.time() bubble_sort(bubble_list) bubble_time = time.time() - start_time start_time = time.time() quick_sort(quick_list) quick_time = time.time() - start_time return { \'bubble_sort_time\': bubble_time, \'quick_sort_time\': quick_time }"},{"question":"You are tasked with creating a function to help manage a book collection stored in a CSV file. Each book entry in the CSV contains details such as the title, author, publication year, genre, and the rating. Your goal is to write a function `organize_book_collection` that reads the CSV file, processes the book data, and allows retrieval of information based on specific criteria. Here\'s the problem statement: 1. The function should read a CSV file named `books.csv` which contains the book collection details. 2. Each row in the CSV file represents one book with the columns \\"title\\", \\"author\\", \\"year\\", \\"genre\\", and \\"rating\\". 3. Create a function that allows the user to search for books by genre and retrieve the top N highest-rated books in that genre. 4. The function should be able to handle missing values gracefully, assuming a missing rating as 0. The CSV structure is as follows: ``` title,author,year,genre,rating Book1,Author1,2020,Fiction,4.5 Book2,Author2,2018,Non-Fiction,4.0 Book3,Author1,2021,Fiction, ... ``` **Function Signature:** ```python def organize_book_collection(filepath: str, genre: str, top_n: int) -> List[Dict[str, Any]]: ``` **Parameters:** - `filepath`: A string representing the path to the `books.csv` file. - `genre`: A string representing the genre to filter the books by. - `top_n`: An integer representing the number of top-rated books to retrieve. **Returns:** - A list of dictionaries containing the top N highest-rated books in the specified genre. Each dictionary should contain the book\'s detail such as \\"title\\", \\"author\\", \\"year\\", \\"genre\\", and \\"rating\\". **Functional Requirements:** 1. The function should read the CSV file and store the book data. 2. Filter the books by the specified genre. 3. Sort the filtered books by their rating in descending order. 4. Return the top N highest-rated books in the specified genre. If there are fewer than N books in that genre, return all available books. **Constraints:** - You must use the `csv` module to read the CSV file. - Handle missing values by treating them as 0 rating. - Assume the function will be tested with valid input parameters. # Example Usage: ```python books = organize_book_collection(\'books.csv\', \'Fiction\', 5) # Example output: # [ # {\'title\': \'Book1\', \'author\': \'Author1\', \'year\': 2020, \'genre\': \'Fiction\', \'rating\': 4.5}, # {\'title\': \'Book3\', \'author\': \'Author1\', \'year\': 2021, \'genre\': \'Fiction\', \'rating\': 0.0}, # ... # ] ```","solution":"import csv from typing import List, Dict, Any def organize_book_collection(filepath: str, genre: str, top_n: int) -> List[Dict[str, Any]]: Reads a CSV file containing book collection details, filters books by the specified genre, and returns the top N highest-rated books in that genre. Parameters: - filepath: str - path to the books.csv file - genre: str - genre to filter books by - top_n: int - number of top-rated books to retrieve Returns: - List[Dict[str, Any]] - list of dictionaries representing the top N books details books = [] # Reading the CSV file and storing book data with open(filepath, mode=\'r\', newline=\'\', encoding=\'utf-8\') as file: reader = csv.DictReader(file) for row in reader: book_genre = row[\'genre\'] book_rating = row[\'rating\'] # Handling missing ratings if book_rating == \'\': rating = 0.0 else: rating = float(book_rating) # Filtering books by genre if book_genre.lower() == genre.lower(): book = { \'title\': row[\'title\'], \'author\': row[\'author\'], \'year\': row[\'year\'], \'genre\': book_genre, \'rating\': rating } books.append(book) # Sorting filtered books by rating in descending order books_sorted = sorted(books, key=lambda x: x[\'rating\'], reverse=True) # Returning the top N highest-rated books return books_sorted[:top_n]"},{"question":"You are given a CSV file named `salaries.csv` that contains information about employees’ salaries in an organization. Your task is to write a function called `process_salaries` that performs the following: 1. Reads the CSV file into a DataFrame. 2. Converts the salary amounts from string to float. 3. Computes the average salary for each department. 4. Returns a DataFrame with the department names and their corresponding average salaries. Assume `salaries.csv` has the following structure: ``` employee_id,department,salary 1,Engineering,\\"85,000\\" 2,Marketing,\\"60,500\\" 3,Engineering,\\"78,000\\" 4,Sales,\\"50,000\\" 5,Marketing,\\"65,000\\" ``` # Requirements: - Create a function named `process_salaries`. - Read from the file `\'data/salaries.csv\'` using pandas\' `read_csv` function. - Ensure the salary values are converted from string format (e.g., `\\"85,000\\"`) to float. - Calculate the average salary for each department. - Return a DataFrame with the department names and their corresponding average salaries. # Example Usage: ```python df = process_salaries() print(df) ``` Expected Output: ``` department average_salary 0 Engineering 81500.0 1 Marketing 62750.0 2 Sales 50000.0 ``` # Libraries: - pandas","solution":"import pandas as pd def process_salaries(file_path=\'salaries.csv\'): Processes salary data from a CSV file, computes the average salary for each department, and returns a DataFrame with department names and their corresponding average salaries. # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # Convert salary amounts from string to float, stripping \\"\\" and \\",\\" df[\'salary\'] = df[\'salary\'].replace(\'[,]\', \'\', regex=True).astype(float) # Calculate the average salary for each department avg_salary_df = df.groupby(\'department\')[\'salary\'].mean().reset_index() # Rename the columns for clarity avg_salary_df.columns = [\'department\', \'average_salary\'] return avg_salary_df"},{"question":"** Create a function called `filter_even_numbers(matrix)` that takes a 2D list (matrix) of integers as input and returns a new 2D list containing only the even numbers from the original matrix. The original matrix should remain unchanged. To achieve this: 1. Iterate through each element in the given 2D list. 2. Check if the element is an even number. 3. If it is, add it to the corresponding position in the new 2D list; otherwise, leave an empty spot (i.e., `None`) in the new list. Function signature: ```python def filter_even_numbers(matrix: list) -> list: pass ``` Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], ] filtered_matrix = filter_even_numbers(matrix) # filtered_matrix should be: # [ # [None, 2, None], # [4, None, 6], # ] ``` Explanation: - The number `1` is replaced by `None` because it is odd. - The number `2` remains as it is because it is even. - The number `3` is replaced by `None` because it is odd. - The number `4` remains as it is because it is even. - The number `5` is replaced by `None` because it is odd. - The number `6` remains as it is because it is even. **","solution":"def filter_even_numbers(matrix): Returns a new 2D list with only the even numbers from the original matrix. Odd numbers are replaced with None. Parameters: matrix (list): A 2D list of integers. Returns: list: A new 2D list with even numbers retained and odd numbers replaced with None. filtered_matrix = [] for row in matrix: new_row = [] for num in row: if num % 2 == 0: new_row.append(num) else: new_row.append(None) filtered_matrix.append(new_row) return filtered_matrix"},{"question":"You\'ve been hired to develop a function that processes server log data for analysis. The log consists of multiple entries where each entry contains a timestamp, user ID, and an action performed by the user. The goal is to generate a summary that counts how many times each action was performed during a given time period. # Task Implement a function named `summarize_logs` that processes the logs based on the specified start and end times. Function Signature: ```python def summarize_logs(logs: List[str], start_time: str, end_time: str) -> Dict[str, int]: ``` Input: - `logs` (List of strings): Each string represents a log entry in the format `\\"timestamp user_id action\\"`, e.g., `\\"2023-10-01T08:00:00Z 123 login\\"`. - `start_time` (string): The start of the time window in ISO 8601 format, e.g., `\\"2023-10-01T00:00:00Z\\"`. - `end_time` (string): The end of the time window in ISO 8601 format, e.g., `\\"2023-10-01T23:59:59Z\\"`. Output: - (Dictionary): A dictionary where keys are actions and values are counts of how many times each action was performed within the specified time period. # Example For a list of logs: ```python logs = [ \\"2023-10-01T08:00:00Z 123 login\\", \\"2023-10-01T08:05:00Z 123 logout\\", \\"2023-10-01T09:00:00Z 124 login\\", \\"2023-10-01T10:00:00Z 125 download\\", \\"2023-10-02T08:00:00Z 126 login\\" ] start_time = \\"2023-10-01T00:00:00Z\\" end_time = \\"2023-10-01T23:59:59Z\\" ``` Calling `summarize_logs(logs, start_time, end_time)` should return: ```python {\'login\': 2, \'logout\': 1, \'download\': 1} ``` # Constraints - Timestamps in the logs and input timestamps (`start_time` and `end_time`) follow the ISO 8601 format. - You can assume all log entries have valid timestamps. - Actions are case-sensitive strings. - The function should be case-sensitive (e.g., \'Login\' and \'login\' should be treated as different actions).","solution":"from typing import List, Dict from datetime import datetime def summarize_logs(logs: List[str], start_time: str, end_time: str) -> Dict[str, int]: start_time = datetime.fromisoformat(start_time.rstrip(\'Z\')) end_time = datetime.fromisoformat(end_time.rstrip(\'Z\')) action_counts = {} for log in logs: parts = log.split() timestamp_str, user_id, action = parts[0], parts[1], parts[2] timestamp = datetime.fromisoformat(timestamp_str.rstrip(\'Z\')) if start_time <= timestamp <= end_time: if action in action_counts: action_counts[action] += 1 else: action_counts[action] = 1 return action_counts"},{"question":"A company\'s logistics department needs to keep track of the inventory levels at multiple warehouses. Implement a system that allows asynchronous data fetching from each warehouse. Use Python\'s `asyncio` library to manage the asynchronous tasks. Specifically, you need to write a function named `fetch_inventory`, which will concurrently fetch inventory details from a list of warehouse URLs and return the combined result. Here is a detailed description of the components and your task: 1. **Function to Write**: `fetch_inventory` - This function should accept a list of URLs representing different warehouse inventory endpoints. - For each URL, create an asynchronous task to fetch the inventory data. - Gather the results of these asynchronous tasks and merge them into a single dictionary where the key is the warehouse URL and the value is the fetched inventory data. - Return the combined inventory data as a dictionary. 2. **Helper Function**: - `async def get_inventory_data(url)`: Given a URL, this function fetches the inventory data. 3. **Libraries to Use**: - `asyncio` - `aiohttp` Implement the `fetch_inventory` function following these requirements.","solution":"import aiohttp import asyncio async def get_inventory_data(url): async with aiohttp.ClientSession() as session: async with session.get(url) as response: data = await response.json() return data async def fetch_inventory(urls): tasks = [asyncio.create_task(get_inventory_data(url)) for url in urls] results = await asyncio.gather(*tasks) return {urls[i]: results[i] for i in range(len(urls))}"},{"question":"Develop a Python function that simulates a simple traffic light system. The function should change the light based on a given list of timings for red, green, and yellow lights in seconds. It should start with the green light, then proceed to yellow, red, and cycle back to green. You should print the current light and time left in seconds at each second until the sequence ends, and then restart the sequence. The function should take: - red_time: integer, duration the red light stays on - green_time: integer, duration the green light stays on - yellow_time: integer, duration the yellow light stays on - cycles: integer, number of times the traffic light should complete the cycle before stopping Write self-contained code starting with: ``` import time def traffic_light_system(red_time, green_time, yellow_time, cycles): ``` Example output (for illustration when red_time=4, green_time=3, yellow_time=2, and cycles=1): ``` Green light: 3 Green light: 2 Green light: 1 Yellow light: 2 Yellow light: 1 Red light: 4 Red light: 3 Red light: 2 Red light: 1 ```","solution":"import time def traffic_light_system(red_time, green_time, yellow_time, cycles): for _ in range(cycles): # Green light for t in range(green_time, 0, -1): print(f\\"Green light: {t}\\") time.sleep(1) # Yellow light for t in range(yellow_time, 0, -1): print(f\\"Yellow light: {t}\\") time.sleep(1) # Red light for t in range(red_time, 0, -1): print(f\\"Red light: {t}\\") time.sleep(1)"},{"question":"** You need to implement a function `flatten_and_sort` that receives a list of lists of integers. The function should flatten the input to a single list containing all the integers, then sort this list in ascending order, and finally return the sorted list. Here is the function signature you need to implement: ```python def flatten_and_sort(array_of_arrays): pass ``` # Constraints: - The input list of lists can contain up to 50 lists. - Each sub-list can contain up to 50 integers. - The integers can range between -10^6 and 10^6. - It\'s possible for some of the sub-lists to be empty. # Example: 1. Input: `[[3, 2, 1], [4, 6, 5], [], [9, 7, 8]]` Output: `[1, 2, 3, 4, 5, 6, 7, 8, 9]` 2. Input: `[[1, 3, 5], [100, 50], [0, -1]]` Output: `[-1, 0, 1, 3, 5, 50, 100]` 3. Input: `[[], [], []]` Output: `[]` # Note: - The primary challenge is to efficiently handle the flattening and sorting of the nested lists. Ensure the function can handle the upper bounds of the constraints. Write the complete code in a self-contained function named `flatten_and_sort`. **","solution":"def flatten_and_sort(array_of_arrays): Flattens the list of lists into a single list and sorts it in ascending order. Parameters: array_of_arrays (list of list of int): A list of lists of integers. Returns: list of int: A sorted list of integers. flattened_list = [item for sublist in array_of_arrays for item in sublist] flattened_list.sort() return flattened_list"},{"question":"**Image Processing: Grayscale Transformation** In this problem, you are tasked with writing a function called `convert_to_grayscale` that takes an image file as input and converts it to a grayscale image using the `Pillow` library. This exercise will test your ability to handle image processing and understand basic image transformation techniques. Function Signature: ```python def convert_to_grayscale(image_path: str, output_path: str, method: str = \\"average\\") -> None: ``` Parameters: - `image_path` (str): The path to the input image file. - `output_path` (str): The path where the output grayscale image should be saved. - `method` (str, default=\\"average\\"): The method to use for converting to grayscale. It can be one of the following: - \\"average\\": Calculate the average of the R, G, and B values. - \\"luminosity\\": Use a weighted sum to account for human perception of brightness (0.21 R, 0.72 G, 0.07 B). - \\"lightness\\": Calculate the average of the max and min values among the R, G, and B channels. Returns: - None. The function should save the resulting grayscale image to the specified `output_path`. Requirements: 1. You must use the `Pillow` library to open, process, and save the images. 2. Handle different image formats (JPEG, PNG, etc.) gracefully. 3. Validate that the `method` parameter is one of the allowed values. 4. Apply the specified grayscale transformation method to each pixel in the image. Example: ```python image_path = \\"input.jpg\\" output_path = \\"output_grayscale.jpg\\" method = \\"luminosity\\" convert_to_grayscale(image_path, output_path, method) ``` Notes: - Ensure the function handles errors gracefully, such as invalid file paths or unsupported image formats. - Optimize the performance of the grayscale conversion where possible to handle larger images efficiently.","solution":"from PIL import Image import numpy as np def convert_to_grayscale(image_path: str, output_path: str, method: str = \\"average\\") -> None: Converts an image to grayscale using the specified method and saves the output image. Parameters: - image_path (str): Path to the input image file. - output_path (str): Path where the output grayscale image should be saved. - method (str): Method for converting to grayscale (default is \\"average\\"): - \\"average\\": Average of R, G, and B values. - \\"luminosity\\": Weighted sum with weights for human perception (0.21 R, 0.72 G, 0.07 B). - \\"lightness\\": Average of the max and min values among the R, G, and B channels. Returns: - None # Open the image file image = Image.open(image_path) pixels = np.array(image) if method == \\"average\\": # Calculate the average of R, G, and B gray_pixels = np.mean(pixels[..., :3], axis=-1) elif method == \\"luminosity\\": # Use luminosity method (0.21 R, 0.72 G, 0.07 B) gray_pixels = 0.21 * pixels[..., 0] + 0.72 * pixels[..., 1] + 0.07 * pixels[..., 2] elif method == \\"lightness\\": # Use lightness method ((max(R, G, B) + min(R, G, B)) / 2) gray_pixels = np.mean(np.array([pixels[..., 0], pixels[..., 1], pixels[..., 2]]), axis=0) else: raise ValueError(f\\"Unknown method: {method}. Use \'average\', \'luminosity\', or \'lightness\'.\\") # Ensure pixel values are in range 0-255 gray_pixels = np.clip(gray_pixels, 0, 255).astype(np.uint8) # Create a new grayscale image gray_image = Image.fromarray(gray_pixels, mode=\'L\') # Save the resulting image gray_image.save(output_path)"},{"question":"You are required to develop a function that takes a list of integers and a target difference, and determines if there are any two distinct pairs of integers in the list that have the same absolute difference equal to the target difference. # Function Requirements Name your function `has_equal_difference_pairs`. Here is the function signature: ```python def has_equal_difference_pairs(nums, target_diff): Determines if there are any two distinct pairs of integers in the list that have the same absolute difference equal to the target difference. Parameters: - nums (list): A list of integers. - target_diff (int): The target absolute difference. Returns: - bool: True if such pairs exist, False otherwise. ``` # Constraints: 1. The function should handle lists with at least four integers. 2. You may not use nested loops to compare pairs (achieve a solution with O(n) complexity). # Example Usage 1. Example 1: ```python nums = [3, 1, 4, 1, 5] target_diff = 2 # Call the function print(has_equal_difference_pairs(nums, target_diff)) ``` Expected Output: ```python True ``` Explanation: The pairs (3, 1) and (4, 2) both have an absolute difference of 2. 2. Example 2: ```python nums = [1, 2, 3, 4, 5] target_diff = 10 # Call the function print(has_equal_difference_pairs(nums, target_diff)) ``` Expected Output: ```python False ``` Explanation: There are no two pairs with an absolute difference of 10. 3. Example 3: ```python nums = [8, 12, 16, 4, 0] target_diff = 4 # Call the function print(has_equal_difference_pairs(nums, target_diff)) ``` Expected Output: ```python True ``` Explanation: The pairs (12, 8) and (16, 12) both have an absolute difference of 4.","solution":"def has_equal_difference_pairs(nums, target_diff): Determines if there are any two distinct pairs of integers in the list that have the same absolute difference equal to the target difference. Parameters: - nums (list): A list of integers. - target_diff (int): The target absolute difference. Returns: - bool: True if such pairs exist, False otherwise. seen_differences = {} for num in nums: if num - target_diff in seen_differences or num + target_diff in seen_differences: return True seen_differences[num] = True return False"},{"question":"Design a function `shortest_path_length(graph, start, end)` that computes the shortest path length between two nodes in a given unweighted, undirected graph. Here are the specifications for your task: 1. **Function Signature**: ```python def shortest_path_length(graph, start, end): Compute the shortest path length between two nodes in an unweighted graph. Inputs: graph (dict): A dictionary representing an adjacency list of the graph. start (hashable): The start node. end (hashable): The end node. Raises: ValueError: if the start or end node is not in the graph. Returns: length (int): The length of the shortest path from start to end. ``` 2. **Inputs**: - `graph`: A dictionary where keys are nodes and values are lists of adjacent nodes. - `start`: The node to start the search from. - `end`: The target node to reach. 3. **Outputs**: - `length`: An integer representing the length of the shortest path from `start` to `end`. 4. **Constraints**: - Only valid for connected graphs (every node is reachable from every other node). - If the graph is empty or if either the `start` or `end` node is not in the graph, the function should raise a `ValueError`. - The function should use Breadth-First Search (BFS) to find the shortest path length. 5. **Library Requirements**: - No external libraries are required for this function. Here is a sample test case you can use to verify your implementation: ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\', \'E\'], \'C\': [\'A\', \'F\'], \'D\': [\'B\'], \'E\': [\'B\', \'F\'], \'F\': [\'C\', \'E\'] } print(shortest_path_length(graph, \'A\', \'F\')) # Output should be 2 ```","solution":"from collections import deque def shortest_path_length(graph, start, end): Compute the shortest path length between two nodes in an unweighted graph. Inputs: graph (dict): A dictionary representing an adjacency list of the graph. start (hashable): The start node. end (hashable): The end node. Raises: ValueError: if the start or end node is not in the graph. Returns: length (int): The length of the shortest path from start to end. if start not in graph or end not in graph: raise ValueError(\\"Start or end node not in graph\\") if start == end: return 0 queue = deque([(start, 0)]) visited = set() while queue: current_node, current_length = queue.popleft() if current_node == end: return current_length if current_node not in visited: visited.add(current_node) for neighbor in graph[current_node]: if neighbor not in visited: queue.append((neighbor, current_length + 1)) raise ValueError(\\"No path found from start to end (graph might not be connected)\\")"},{"question":"In this task, you need to create a function `find_max_unique_subarray(nums, k)` that finds the subarray of length `k` within the given list of integers, `nums`, which contains the maximum number of unique elements. If there are multiple subarrays with the same maximum number of unique elements, return the first one. The function should output the subarray and the count of unique elements in that subarray. **Function Signature** ```python def find_max_unique_subarray(nums: list, k: int) -> tuple: pass ``` **Example** ```python >>> find_max_unique_subarray([1, 2, 1, 3, 4, 3, 5], 4) ([2, 1, 3, 4], 4) >>> find_max_unique_subarray([4, 4, 4, 4, 4, 4], 3) ([4, 4, 4], 1) ``` **Input Constraints** - `1 <= len(nums) <= 1000` - `1 <= k <= len(nums)` - All elements in `nums` are integers within the range from -10^6 to 10^6","solution":"def find_max_unique_subarray(nums, k): Finds the subarray of length k with the maximum number of unique elements. Returns the subarray and the count of unique elements in that subarray. max_unique_count = 0 max_unique_subarray = [] for i in range(len(nums) - k + 1): current_subarray = nums[i:i + k] unique_count = len(set(current_subarray)) if unique_count > max_unique_count: max_unique_count = unique_count max_unique_subarray = current_subarray return (max_unique_subarray, max_unique_count)"},{"question":"You are working on a software system that handles student records for a university. Each student record includes the following details: `Student ID` (an alphanumeric string), `Name`, `Age`, `Major`, and `GPA`. The records are stored as a list of dictionaries. You need to write a function named `filter_students_by_gpa` that filters and returns the names of students with a GPA above a specified threshold. The function should take two arguments: 1. `students` (a list of dictionaries, where each dictionary represents a student record). 2. `threshold` (a float value representing the GPA threshold). The function should return a list of names of students whose GPA is greater than the given threshold, sorted in descending order of their GPA. If no student meets the criteria, the function should return an empty list. # Example: ```python students = [ {\\"Student ID\\": \\"A123\\", \\"Name\\": \\"Alice\\", \\"Age\\": 20, \\"Major\\": \\"Computer Science\\", \\"GPA\\": 3.5}, {\\"Student ID\\": \\"B456\\", \\"Name\\": \\"Bob\\", \\"Age\\": 21, \\"Major\\": \\"Mathematics\\", \\"GPA\\": 3.8}, {\\"Student ID\\": \\"C789\\", \\"Name\\": \\"Charlie\\", \\"Age\\": 22, \\"Major\\": \\"Physics\\", \\"GPA\\": 2.9}, {\\"Student ID\\": \\"D012\\", \\"Name\\": \\"David\\", \\"Age\\": 20, \\"Major\\": \\"Biology\\", \\"GPA\\": 3.2} ] result = filter_students_by_gpa(students, 3.0) print(result) # Output: [\'Bob\', \'Alice\', \'David\'] ``` # Function Signature ```python def filter_students_by_gpa(students, threshold): pass ```","solution":"def filter_students_by_gpa(students, threshold): Filters and returns the names of students with a GPA above a specified threshold. Args: students (list): A list of dictionaries where each dictionary represents a student record. threshold (float): A float value representing the GPA threshold. Returns: list: A list of names of students whose GPA is greater than the given threshold, sorted in descending order of their GPA. # Filter the students with GPA above the threshold filtered_students = [student for student in students if student[\\"GPA\\"] > threshold] # Sort the filtered students by GPA in descending order sorted_students = sorted(filtered_students, key=lambda student: student[\\"GPA\\"], reverse=True) # Extract the names of the sorted students names = [student[\\"Name\\"] for student in sorted_students] return names"},{"question":"Create a function that reads a text file and counts the occurrence of each word in the file (ignoring case). The function should then write these counts to a separate file, with each word and its count on a new line, formatted as \\"word: count\\". If the input file does not exist, the function should raise an IOError. You should write self-contained code starting with: ``` def word_count(input_file, output_file): ```","solution":"def word_count(input_file, output_file): Reads the input file and counts the occurrence of each word (ignoring case). Writes the word counts to the output file in the format \\"word: count\\". Args: input_file (str): The path to the input text file. output_file (str): The path to the output file where word counts will be written. from collections import Counter import os if not os.path.exists(input_file): raise IOError(f\\"Input file {input_file} does not exist.\\") with open(input_file, \'r\', encoding=\'utf-8\') as file: text = file.read().lower() words = text.split() word_counts = Counter(words) with open(output_file, \'w\', encoding=\'utf-8\') as file: for word, count in word_counts.items(): file.write(f\\"{word}: {count}n\\")"},{"question":"In this task, you are required to create a simple command-line-based task manager in Python. The task manager will allow users to add, view, and delete tasks. Each task will have a description and a priority level. The implementation should handle user commands and interact with an in-memory list to track tasks. You are to write a function `task_manager()`. The function should enter a loop, repeatedly: 1. Asking the user to enter a command from the following options: - `\\"add <description> <priority>\\"`: Adds a new task with the given description and priority. - `\\"view\\"`: Displays all tasks sorted by priority (highest to lowest). - `\\"delete <task_number>\\"`: Deletes the task identified by its number from the list of tasks. - `\\"exit\\"`: Exits the program. 2. Process the command appropriately and provide feedback to the user. The implementation should consider: - Handling invalid commands gracefully by printing an error message. - Displaying tasks with their priorities and numbers (starting from 1) in the view command. - Automatically adjusting task numbers as tasks are added or deleted. - Using the `sys.exit()` function to terminate the program in case of the `exit` command. You don\'t need to handle user input validation for priorities, task descriptions, or numbers beyond ensuring that commands follow the expected format. Here is an outline to help you get started: ```python def task_manager(): import sys tasks = [] while True: command = input(\\"Enter command: \\") parts = command.split() if parts[0] == \\"add\\" and len(parts) >= 3: priority = int(parts[-1]) description = \\" \\".join(parts[1:-1]) tasks.append((priority, description)) tasks.sort(reverse=True, key=lambda x: x[0]) print(f\\"Task added with priority {priority}.\\") elif parts[0] == \\"view\\": if not tasks: print(\\"No tasks available.\\") else: for idx, task in enumerate(tasks, start=1): print(f\\"{idx}. {task[1]} (Priority: {task[0]})\\") elif parts[0] == \\"delete\\" and len(parts) == 2: task_number = int(parts[1]) - 1 if 0 <= task_number < len(tasks): deleted_task = tasks.pop(task_number) print(f\\"Deleted task: {deleted_task[1]} (Priority: {deleted_task[0]}).\\") else: print(\\"Invalid task number.\\") elif parts[0] == \\"exit\\": sys.exit() else: print(\\"Invalid command.\\") ```","solution":"def task_manager(): import sys tasks = [] while True: command = input(\\"Enter command: \\") parts = command.split() if parts[0] == \\"add\\" and len(parts) >= 3: try: priority = int(parts[-1]) description = \\" \\".join(parts[1:-1]) tasks.append((priority, description)) tasks.sort(reverse=True, key=lambda x: x[0]) print(f\\"Task added with priority {priority}.\\") except ValueError: print(\\"Invalid priority. Please enter an integer value.\\") elif parts[0] == \\"view\\": if not tasks: print(\\"No tasks available.\\") else: for idx, task in enumerate(tasks, start=1): print(f\\"{idx}. {task[1]} (Priority: {task[0]})\\") elif parts[0] == \\"delete\\" and len(parts) == 2: try: task_number = int(parts[1]) - 1 if 0 <= task_number < len(tasks): deleted_task = tasks.pop(task_number) print(f\\"Deleted task: {deleted_task[1]} (Priority: {deleted_task[0]}).\\") else: print(\\"Invalid task number.\\") except ValueError: print(\\"Invalid task number. Please enter an integer value.\\") elif parts[0] == \\"exit\\": sys.exit() else: print(\\"Invalid command.\\")"},{"question":"You are required to write a function named `masked_average` that takes two arguments: `numbers` and `mask`. - `numbers` is a list of integers representing a sequence of numbers. - `mask` is a list of the same length as `numbers`, consisting of 1s and 0s. A 1 indicates that the corresponding element in `numbers` should be included in the average calculation, while a 0 indicates it should be excluded. Your task is to calculate the average of the numbers that are included based on the mask. If no elements are included (i.e., if `mask` contains only 0s), the function should return `None`. Here are detailed requirements for the function: 1. The function should first validate that `numbers` and `mask` are of the same length. 2. Calculate the average of the elements in `numbers` that correspond to 1s in `mask`. 3. Return the calculated average. If no elements are included, return `None`. You can assume the following: - `numbers` and `mask` will always be non-empty lists. - `mask` will contain only 1s and 0s. Here is the function signature you should use: ```python def masked_average(numbers, mask): # Your implementation here ```","solution":"def masked_average(numbers, mask): Calculate the average of the numbers that are included based on the mask. Parameters: numbers (list of int): A list of integers. mask (list of int): A list of the same length as numbers, consisting of 1s and 0s. Returns: float or None: The average of the masked numbers, or None if no numbers are included. if len(numbers) != len(mask): raise ValueError(\\"numbers and mask must be of the same length\\") included_numbers = [num for num, m in zip(numbers, mask) if m == 1] if not included_numbers: return None return sum(included_numbers) / len(included_numbers)"},{"question":"You are working on a logistics optimization problem for a delivery company. The company needs to determine the most efficient routes for their delivery trucks to ensure that all deliveries are made in the least amount of time. The routes can be thought of as a grid of blocks, where each block can be a road segment between intersections. We will use Dijkstra\'s algorithm to find the shortest path in a weighted grid. Specifically, you will write a function named `shortest_path_grid` that calculates the shortest route from the top-left corner to the bottom-right corner of the grid. Here are the details: ``` def shortest_path_grid(grid): Calculate the shortest path in a weighted grid from top-left to bottom-right. This function uses Dijkstra\'s algorithm to compute the shortest path in a grid where each cell contains a non-negative integer representing the cost to travel through that cell. Movement is allowed in four directions (up, down, left, right) but not diagonally. Parameters ---------- grid : list of lists of integers A 2D list where each element is a non-negative integer representing the cost of traveling through that cell. Returns ------- int The minimum cost to travel from the top-left corner to the bottom-right corner. Raises ------ ValueError If the grid is empty or not a valid 2D list. pass ``` **Requirements:** 1. Implement Dijkstra\'s algorithm to calculate the shortest path from the top-left corner (0,0) to the bottom-right corner (n-1,m-1) of the grid. 2. Movement is allowed in four directions: up, down, left, right. 3. Consider edge cases (e.g., empty grid, invalid grid). 4. Return the minimum cost to reach the destination. **Note**: Ensure that your implementation is efficient and handles grids of varying sizes.","solution":"import heapq def shortest_path_grid(grid): Calculate the shortest path in a weighted grid from top-left to bottom-right. This function uses Dijkstra\'s algorithm to compute the shortest path in a grid where each cell contains a non-negative integer representing the cost to travel through that cell. Movement is allowed in four directions (up, down, left, right) but not diagonally. Parameters ---------- grid : list of lists of integers A 2D list where each element is a non-negative integer representing the cost of traveling through that cell. Returns ------- int The minimum cost to travel from the top-left corner to the bottom-right corner. Raises ------ ValueError If the grid is empty or not a valid 2D list. if not grid or not all(isinstance(row, list) for row in grid) or not all(isinstance(cell, int) for row in grid for cell in row): raise ValueError(\\"Grid is empty or not a valid 2D list.\\") n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] distance = [[float(\'inf\')] * m for _ in range(n)] distance[0][0] = grid[0][0] min_heap = [(grid[0][0], 0, 0)] heapq.heapify(min_heap) while min_heap: current_cost, x, y = heapq.heappop(min_heap) if x == n-1 and y == m-1: return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_cost = current_cost + grid[nx][ny] if new_cost < distance[nx][ny]: distance[nx][ny] = new_cost heapq.heappush(min_heap, (new_cost, nx, ny)) return distance[n-1][m-1]"},{"question":"You are tasked with creating a function that processes a list of integers and returns the sum of all prime numbers in the list. This function will help in practicing iteration, prime number checking, and list processing in Python. **Function Requirement:** Write a function named `sum_of_primes` with the following specification: ```python def sum_of_primes(numbers): Sums up all the prime numbers in a given list of integers. Parameters: numbers (list): A list of integers. Returns: int: The sum of all prime numbers in the list. ``` **Instructions:** 1. Define an inner function `is_prime` that checks if a given number is prime. - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. 2. Iterate through the list of numbers and use the `is_prime` function to check if each number is a prime. 3. Accumulate the sum of all prime numbers found in the list. 4. Return the accumulated sum. **Example Usage:** ```python # Sample list of integers numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10] # Use the function to calculate the sum of prime numbers in the list result = sum_of_primes(numbers) # The expected output should be 2 + 3 + 5 + 7 = 17 print(result) # Output: 17 ``` This function should correctly identify prime numbers within the list and return their sum, leveraging iteration and conditional logic to implement the prime-checking mechanism.","solution":"def sum_of_primes(numbers): Sums up all the prime numbers in a given list of integers. Parameters: numbers (list): A list of integers. Returns: int: The sum of all prime numbers in the list. def is_prime(n): Checks if a number is prime. Parameters: n (int): The number to check. Returns: bool: True if n is prime, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True return sum(n for n in numbers if is_prime(n))"},{"question":"You are required to design and implement a function `find_shortest_path` that utilizes Dijkstra\'s Algorithm to find the shortest path in a weighted graph from a source node to a destination node. The implementation should make efficient use of heapq to manage the priority queue during the algorithm\'s execution. Your solution should: 1. Represent the graph as an adjacency list, where each node points to a list of tuples representing its neighbors and the respective edge weights. 2. Use `heapq.heappop` and `heapq.heappush` to maintain the min-heap property of the priority queue. 3. Implement the function to return both the shortest distance and the path taken from the source node to the destination node. You are given the following inputs: - `graph`: A dictionary where keys are node identifiers (strings or integers) and values are lists of tuples `(neighbor, weight)` representing the neighbors and corresponding edge weights. - `source`: A node identifier indicating the starting node. - `target`: A node identifier indicating the ending node. The function signature should be: ```python def find_shortest_path(graph, source, target): # Your code here return distance, path ``` The function should return: - `distance`: An integer or float representing the shortest distance from the source node to the target node. - `path`: A list of node identifiers indicating the nodes traversed to achieve the shortest path. If no path exists, return an empty list.","solution":"import heapq def find_shortest_path(graph, source, target): Finds the shortest path using Dijkstra\'s algorithm. Args: graph (dict): The graph represented as an adjacency list. source: The start node. target: The end node. Returns: tuple: A tuple containing the shortest distance and the path taken. (distance, path) # Priority queue to hold the nodes to explore (distance, node) priority_queue = [(0, source)] # Dictionary to hold the shortest distance to each node distances = {node: float(\'inf\') for node in graph} distances[source] = 0 # Dictionary to hold the parent of each node to reconstruct the path parents = {source: None} while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If we reached the target, reconstruct the path if current_node == target: path = [] while current_node is not None: path.append(current_node) current_node = parents[current_node] return current_distance, path[::-1] # Explore neighbors for neighbor, weight in graph.get(current_node, []): distance = current_distance + weight # Only consider this path if it\'s better if distance < distances[neighbor]: distances[neighbor] = distance parents[neighbor] = current_node heapq.heappush(priority_queue, (distance, neighbor)) # If the target is not reachable return float(\'inf\'), []"},{"question":"Write a function named `rotate_matrix` that takes a two-dimensional square matrix (represented as a list of lists) and rotates the matrix 90 degrees clockwise. The function should modify the input matrix in place and should not return anything. # Detailed Description: 1. The matrix is represented as a list of `n` lists, each containing `n` integers. 2. Rotating the matrix 90 degrees clockwise means that you need to move the elements such that: - The top row becomes the rightmost column. - The rightmost column becomes the bottom row. - The bottom row becomes the leftmost column. - The leftmost column becomes the top row. # Function Signature: ```python def rotate_matrix(matrix): # your code here ``` # Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) print(matrix) # Output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` # Constraints: - You can assume the input matrix is always non-empty and has dimensions `n x n` where `1 <= n <= 100`. # Additional Notes: - You are required to modify the input `matrix` in place, meaning that no additional structure should be created to represent the rotated matrix. - Consider the efficiency of your algorithm; strive for a solution with O(n^2) complexity where possible.","solution":"def rotate_matrix(matrix): Rotates the input n x n matrix 90 degrees clockwise in place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Write a function that determines if a given string is a valid palindrome, ignoring spaces, punctuation, and case sensitivity. The function should return a boolean indicating whether the input string is a valid palindrome. The function should output: bool: True if the input string is a palindrome, False otherwise. You should write self-contained code starting with: ``` import re def is_palindrome(input_string): ```","solution":"import re def is_palindrome(input_string): Determines if the given string is a valid palindrome, ignoring spaces, punctuation, and case sensitivity. Args: input_string (str): The string to check. Returns: bool: True if the input string is a palindrome, False otherwise. # Remove all non-alphanumeric characters, convert to lowercase cleaned_string = re.sub(r\'[^A-Za-z0-9]\', \'\', input_string).lower() # Check if cleaned string is equal to its reverse return cleaned_string == cleaned_string[::-1]"},{"question":"Your task is to develop a Python function that reads a file containing a list of student grades, processes this data, and provides various statistical analyses based on user inputs. The function should utilize the `pandas` library for data manipulation and analysis. # Requirements: 1. Your function should be named `analyze_student_grades`. 2. The input to the function is a filename (a string) which points to a CSV file containing student grades. The CSV file has the following columns: - `Student_ID` (string) - `Name` (string) - `Math` (integer) - `Science` (integer) - `English` (integer) 3. The function should perform the following steps: - Read the CSV file into a `pandas` DataFrame. - Display a menu to the user with the following options: - Calculate the average grade for each subject. - Determine the highest and lowest grade in each subject. - Compute the overall average grade of each student. - Exit the program. - Continue to display the menu until the user chooses to exit. # User Interface: - `1`: Calculate average grade for each subject - `2`: Determine highest and lowest grade for each subject - `3`: Compute overall average grade for each student - `4`: Exit Here\'s the function signature with an example CSV file content: ```python def analyze_student_grades(filename): pass # Example content of \'grades.csv\': # Student_ID,Name,Math,Science,English # 1,John Doe,85,90,80 # 2,Jane Smith,78,88,92 # 3,Emily Davis,91,85,86 ``` # Example of user interaction: ```plaintext 1. Calculate average grade for each subject 2. Determine highest and lowest grade for each subject 3. Compute overall average grade for each student 4. Exit Enter your choice: 1 (Math: 84.67, Science: 87.67, English: 86.00) ``` # Additional notes: - Ensure you use pandas\' functions such as `pandas.read_csv`, `pandas.DataFrame.mean`, `pandas.DataFrame.max`, and `pandas.DataFrame.min` in your implementation. - Make sure to handle potential file reading errors by displaying appropriate messages to the user. - Perform input validation to handle incorrect menu choices.","solution":"import pandas as pd def analyze_student_grades(filename): try: df = pd.read_csv(filename) except FileNotFoundError: print(\\"The file was not found. Please check the filename and try again.\\") return except pd.errors.EmptyDataError: print(\\"The file is empty. Please provide a valid CSV file.\\") return while True: print(\\"1. Calculate average grade for each subject\\") print(\\"2. Determine highest and lowest grade for each subject\\") print(\\"3. Compute overall average grade for each student\\") print(\\"4. Exit\\") choice = input(\\"Enter your choice: \\") if choice == \'1\': avg_grades = df[[\'Math\', \'Science\', \'English\']].mean() print(f\\"Math: {avg_grades[\'Math\']:.2f}, Science: {avg_grades[\'Science\']:.2f}, English: {avg_grades[\'English\']:.2f}\\") elif choice == \'2\': highest_grades = df[[\'Math\', \'Science\', \'English\']].max() lowest_grades = df[[\'Math\', \'Science\', \'English\']].min() print(f\\"Highest grades -> Math: {highest_grades[\'Math\']}, Science: {highest_grades[\'Science\']}, English: {highest_grades[\'English\']}\\") print(f\\"Lowest grades -> Math: {lowest_grades[\'Math\']}, Science: {lowest_grades[\'Science\']}, English: {lowest_grades[\'English\']}\\") elif choice == \'3\': df[\'Overall_Average\'] = df[[\'Math\', \'Science\', \'English\']].mean(axis=1) for index, row in df.iterrows(): print(f\\"Student {row[\'Name\']} (ID: {row[\'Student_ID\']}) has an overall average grade of {row[\'Overall_Average\']:.2f}\\") elif choice == \'4\': print(\\"Exiting the program.\\") break else: print(\\"Invalid choice. Please try again.\\")"},{"question":"You are given a dataset containing information about various flights, including columns for the flight number, departure and arrival cities, departure and arrival times, and the duration of the flight. Each row in the dataset represents a specific flight. The dataset has at least the following columns: - \'FlightNumber\': The unique identifier for the flight. - \'DepartureCity\': The city from which the flight departs. - \'ArrivalCity\': The city at which the flight arrives. - \'DepartureTime\': The departure time of the flight in the format \'YYYY-MM-DD HH:MM:SS\'. - \'ArrivalTime\': The arrival time of the flight in the format \'YYYY-MM-DD HH:MM:SS\'. - \'Duration\': The duration of the flight in minutes. Your task is to write a function `filter_flights` that extracts all flights departing from a specified city and arriving in a specified city. The function should return the flight numbers of all matching flights. # Function Signature ```python def filter_flights(dataset, departure_city, arrival_city): # Your implementation here ``` # Input - `dataset` (pandas.DataFrame): The input dataset containing flight data with columns as described. - `departure_city` (str): The city from which the flights depart. - `arrival_city` (str): The city to which the flights arrive. # Output - Returns a list of strings: - A list containing the flight numbers of the flights that match the specified departure and arrival cities. # Example ```python import pandas as pd data = { \\"FlightNumber\\": [\\"F123\\", \\"F456\\", \\"F789\\"], \\"DepartureCity\\": [\\"CityA\\", \\"CityB\\", \\"CityA\\"], \\"ArrivalCity\\": [\\"CityC\\", \\"CityC\\", \\"CityD\\"], \\"DepartureTime\\": [\\"2021-01-01 08:00:00\\", \\"2021-01-01 09:00:00\\", \\"2021-01-01 10:00:00\\"], \\"ArrivalTime\\": [\\"2021-01-01 10:00:00\\", \\"2021-01-01 11:30:00\\", \\"2021-01-01 12:00:00\\"], \\"Duration\\": [120, 150, 120] } df = pd.DataFrame(data) result = filter_flights(df, \\"CityA\\", \\"CityC\\") print(result) # Expected output: [\\"F123\\"] ``` Hint: Ensure that the dataset and city names are case-sensitive.","solution":"import pandas as pd def filter_flights(dataset, departure_city, arrival_city): Given a dataset of flights, return the flight numbers of flights departing from a specific city and arriving in another specific city. Parameters: - dataset (pd.DataFrame): DataFrame containing flight data. - departure_city (str): City from which the flights depart. - arrival_city (str): City to which the flights arrive. Returns: - List of flight numbers (list of str). filtered_data = dataset[ (dataset[\'DepartureCity\'] == departure_city) & (dataset[\'ArrivalCity\'] == arrival_city) ] return filtered_data[\'FlightNumber\'].tolist()"},{"question":"Your task is to write a function called `is_prime` that determines whether a given positive integer is a prime number. This function should utilize Python\'s `math` library, specifically the `math.sqrt` function. # Requirements: 1. **Function Signature**: ```python def is_prime(n: int) -> bool ``` 2. **Input**: - `n`: A positive integer (`n > 0`). 3. **Output**: - Return a boolean value `True` if the number is prime, `False` otherwise. # Example: ```python # Example 1 is_prime(2) => True # Explanation: 2 is a prime number. # Example 2 is_prime(4) => False # Explanation: 4 is not a prime number since it can be divided by 2. # Example 3 is_prime(17) => True # Explanation: 17 is a prime number. # Example 4 is_prime(1) => False # Explanation: 1 is not considered a prime number. ``` # Constraints: - You **must** use `math.sqrt` from the `math` library in your solution. - Focus on efficiency, especially for larger values of `n`, by limiting the number of divisors checked. - Pay careful attention to edge cases, such as very small numbers.","solution":"import math def is_prime(n: int) -> bool: Determines whether a given positive integer is a prime number. Arguments: n -- A positive integer greater than 0 Returns: True if n is a prime number, False otherwise if n <= 1: return False if n == 2: return True if n % 2 == 0: return False limit = int(math.sqrt(n)) + 1 for i in range(3, limit, 2): if n % i == 0: return False return True"},{"question":"Write a Python function named `rotate_matrix` that rotates an (n times n) matrix 90 degrees clockwise in place. The function should take a single parameter: a list of lists representing the (n times n) matrix. The matrix should be modified directly, without creating a new matrix. To achieve this, follow these steps: 1. Transpose the matrix by swapping the element at (mat[i][j]) with (mat[j][i]). 2. Reverse each row of the transposed matrix. Your task is to implement this function by following the provided steps to rotate the matrix 90 degrees clockwise. Here is an example of how the function should work: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) # The rotated matrix should be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` The expected function signature is: ```python def rotate_matrix(matrix): # TODO: Implement this function pass ```","solution":"def rotate_matrix(matrix): Rotates an n x n matrix 90 degrees clockwise in place. Parameters: matrix (list of list of int): The n x n matrix to be rotated. Returns: None: The matrix is modified in place. n = len(matrix) # Step 1: Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"You are working on a custom dataset and need to normalize the features to ensure proper model convergence. Specifically, you need to write a function named `normalize_features(data)` that normalizes each feature in your dataset using min-max normalization. Each feature value should be rescaled to the range [0, 1]. For this task, follow these guidelines: 1. Normalize each feature independently by subtracting the minimum value of that feature and then dividing by the range (max - min) of the feature. 2. Ensure that the function handles possible division by zero errors if the range of a feature is zero. Function Signature: ```python def normalize_features(data: np.ndarray) -> np.ndarray: pass ``` **Parameters:** - `data` (np.ndarray): A 2-D numpy array where rows represent samples and columns represent features. **Returns:** - A normalized 2-D numpy array with the same shape as the input `data`. # Example: ```python import numpy as np data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) normalized_data = normalize_features(data) print(normalized_data) # Output: # [[0. 0. 0. ] # [0.5 0.5 0.5] # [1. 1. 1. ]] ``` Assume the following imports are available: ```python import numpy as np ``` This problem will help you understand feature normalization, an important data preprocessing step in machine learning workflows.","solution":"import numpy as np def normalize_features(data: np.ndarray) -> np.ndarray: Normalizes each feature in the dataset using min-max normalization. Parameters: - data (np.ndarray): A 2-D numpy array where rows represent samples and columns represent features. Returns: - np.ndarray: A normalized 2-D numpy array with the same shape as the input `data`. data_min = data.min(axis=0) data_max = data.max(axis=0) data_range = data_max - data_min # Avoid division by zero by using np.where to substitute zero ranges with one normalized_data = (data - data_min) / np.where(data_range == 0, 1, data_range) return normalized_data"},{"question":"You are given a list of dictionaries where each dictionary represents a student with their `name`, `scores` (a list of integers), and `grade`. The goal is to process this list and output a DataFrame showing the average score for each student along with their grade sorted by the average score in descending order. If two students have the same average score, they should be ordered by their names alphabetically. Create a function `process_students(student_list)` that performs the following operations: 1. **Calculate the average score** for each student based on their scores. 2. **Create a DataFrame** with columns `name`, `average_score`, and `grade`. 3. **Sort the DataFrame** by `average_score` in descending order. If two students have the same average score, their order should be based on the alphabetical order of their names. Here is the function signature: ```python def process_students(student_list: List[Dict[str, Any]]) -> pd.DataFrame: # Your implementation here pass ``` **Example:** ```python students = [ {\\"name\\": \\"Alice\\", \\"scores\\": [85, 90, 78], \\"grade\\": \\"B\\"}, {\\"name\\": \\"Bob\\", \\"scores\\": [90, 92, 88], \\"grade\\": \\"A\\"}, {\\"name\\": \\"Charlie\\", \\"scores\\": [70, 85, 90], \\"grade\\": \\"B\\"} ] result = process_students(students) print(result) ``` **Expected Output:** ``` name average_score grade 0 Bob 90.0 A 1 Alice 84.3 B 2 Charlie 81.7 B ``` **Requirements:** - Use the `pandas` library for handling DataFrame operations. - Ensure the output DataFrame has the precise order and formatting as described.","solution":"import pandas as pd def process_students(student_list): Process the list of students and return a DataFrame with average scores, sorted by average score in descending order and by name in alphabetical order. # Calculate the average score for each student processed_data = [] for student in student_list: avg_score = sum(student[\'scores\']) / len(student[\'scores\']) processed_data.append({ \'name\': student[\'name\'], \'average_score\': round(avg_score, 1), \'grade\': student[\'grade\'] }) # Create the DataFrame df = pd.DataFrame(processed_data) # Sort the DataFrame df = df.sort_values(by=[\'average_score\', \'name\'], ascending=[False, True]) return df"},{"question":"A logistics company needs to optimize the delivery route for its fleet of trucks. You are tasked with developing a routing algorithm that finds the shortest path visiting all warehouses (depots) exactly once and returning to the starting point, known as the Traveling Salesperson Problem (TSP). # Requirements: 1. Write a function `optimal_route` that takes in the following arguments: - `dist_matrix`: A 2D square numpy array where `dist_matrix[i][j]` represents the distance between the `i-th` and `j-th` warehouses. 2. The function should return a tuple: - The minimum distance required to visit all warehouses and return to the starting point. - The order of warehouses to visit to achieve this minimal distance. 3. You may use any exact algorithm or heuristic (e.g., dynamic programming, nearest neighbor) to solve this problem, but ensure the solution is computationally feasible for a moderate number of warehouses (e.g., N <= 20). 4. Implement a simple test case to demonstrate the effectiveness of your algorithm. # Function Signature ```python import numpy as np def optimal_route(dist_matrix): pass ``` # Example ```python dist_matrix = np.array([[0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0]]) distance, route = optimal_route(dist_matrix) print(\\"Minimum distance:\\", distance) print(\\"Optimal route:\\", route) ``` In this example, `dist_matrix` represents the distances between four warehouses. The function should compute the shortest possible route that visits each warehouse exactly once and returns to the starting point, outputting both the distance and the route order.","solution":"import numpy as np from itertools import permutations def optimal_route(dist_matrix): Solves the Traveling Salesman Problem using a brute-force approach. Args: dist_matrix (2D numpy array): Distance matrix where dist_matrix[i][j] represents the distance between warehouse i and warehouse j. Returns: Tuple: - Minimum distance (int): The minimal distance required to visit all warehouses and return to the starting point. - Optimal route (list): Order of warehouses to visit. n = len(dist_matrix) min_distance = float(\'inf\') optimal_path = [] # Generate all possible permutations of routes starting from warehouse 0 for perm in permutations(range(1, n)): current_distance = 0 current_path = [0] + list(perm) + [0] for i in range(n): current_distance += dist_matrix[current_path[i]][current_path[i+1]] if current_distance < min_distance: min_distance = current_distance optimal_path = current_path return min_distance, optimal_path"},{"question":"** You are given a list of integers and your task is to find the longest contiguous sublist such that, when sorted, it is identical to the sublist in its original unsorted form. This means the elements in this section should already be in ascending order. Create a function called `longest_sorted_sublist` that returns the length of this sublist. The function should take a single argument, `lst`, which is a list of integers. You need to determine the maximum length of a contiguous increasing sublist (elements are in non-decreasing order). Function Signature: ```python def longest_sorted_sublist(lst: list[int]) -> int: ... ``` Example: ```python lst = [1, 3, 5, 4, 2, 3, 4, 5] result = longest_sorted_sublist(lst) # Output: 4 (The sublist [2, 3, 4, 5] is the longest sorted sublist) lst = [10, 20, 30, 40, 50] result = longest_sorted_sublist(lst) # Output: 5 (The entire list is already sorted) lst = [5, 4, 3, 2, 1] result = longest_sorted_sublist(lst) # Output: 1 (The list is completely in descending order, so the longest increasing sublist is any single element) ``` **","solution":"def longest_sorted_sublist(lst): if not lst: return 0 max_len = 1 current_len = 1 for i in range(1, len(lst)): if lst[i] >= lst[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"You are tasked with creating a function `filter_and_save_even_odd(numbers)` that processes a list of integers, separates them into even and odd numbers, and writes each group of numbers into a separate file. **Requirements:** 1. The function takes a list of integers as input. 2. Separates the numbers into even and odd numbers. 3. Writes the even numbers to a file named `evens.txt`, with each number on a new line. 4. Writes the odd numbers to a file named `odds.txt`, with each number on a new line. 5. If there are no even or odd numbers, the respective file should be empty. 6. Handle any exceptions that may occur during file operations. **Function Signature:** ```python def filter_and_save_even_odd(numbers: list) -> None: ``` **Parameter:** - `numbers` (list): A list of integers to be processed. **Sample Input:** ```python numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] filter_and_save_even_odd(numbers) ``` **Expected Output:** Contents of `evens.txt`: ``` 2 4 6 8 10 ``` Contents of `odds.txt`: ``` 1 3 5 7 9 ``` **Notes:** - Ensure the numbers in the files are written as integers, not as strings. - Handle file opening and closing properly to avoid any resource leaks. - Think about how you would handle exceptions that might occur during file writing.","solution":"def filter_and_save_even_odd(numbers: list) -> None: Separate the numbers into even and odd, write them to \'evens.txt\' and \'odds.txt\' respectively. evens, odds = [], [] for num in numbers: if num % 2 == 0: evens.append(num) else: odds.append(num) try: with open(\'evens.txt\', \'w\') as evens_file: for even in evens: evens_file.write(f\\"{even}n\\") with open(\'odds.txt\', \'w\') as odds_file: for odd in odds: odds_file.write(f\\"{odd}n\\") except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"You are asked to write a function `sum_of_squares_of_digits(n: int) -> int` that computes the sum of the squares of digits in a given non-negative integer `n`. The function should accept an integer, break it down into its individual digits, square each digit, and then return the sum of these squares. **Function Signature:** ```python def sum_of_squares_of_digits(n: int) -> int: ``` **Input:** - `n` (int): A non-negative integer. **Output:** - (int): The sum of the squares of the digits of `n`. **Requirements:** - The function must handle single-digit and multi-digit integers. - The integer `n` will be non-negative, so no need to handle negative numbers. **Example:** ```python assert sum_of_squares_of_digits(123) == 14 # 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 assert sum_of_squares_of_digits(456) == 77 # 4^2 + 5^2 + 6^2 = 16 + 25 + 36 = 77 assert sum_of_squares_of_digits(0) == 0 # 0^2 = 0 assert sum_of_squares_of_digits(99) == 162 # 9^2 + 9^2 = 81 + 81 = 162 ```","solution":"def sum_of_squares_of_digits(n: int) -> int: Computes the sum of the squares of digits in a given non-negative integer n. Parameters: n (int): A non-negative integer whose digits\' squares are to be summed. Returns: int: The sum of the squares of the digits in n. return sum(int(digit) ** 2 for digit in str(n))"},{"question":"You need to write a function `find_high_temperatures(data: dict) -> dict` that takes a dictionary representing temperature readings from different cities as an input. The function should return a dictionary containing only the cities where the temperatures exceed a given threshold. The input dictionary contains city names as keys and their corresponding temperatures as values. The function should filter out cities where the temperature is above the specified threshold. **Function Signature:** ```python def find_high_temperatures(data: dict, threshold: int) -> dict: pass ``` To summarize, you need to: 1. Iterate through the input dictionary. 2. Check if the temperature for each city exceeds the threshold. 3. Construct a new dictionary containing only the cities that meet the condition. 4. Return the resultant dictionary. **Example:** ```python data = { \\"New York\\": 85, \\"Los Angeles\\": 78, \\"Chicago\\": 92, \\"Houston\\": 88, \\"Phoenix\\": 105 } threshold = 90 result = find_high_temperatures(data, threshold) print(result) # Output should be {\'Chicago\': 92, \'Phoenix\': 105} ``` **Note:** You can assume the input dictionary contains valid city names as string keys and temperatures as integer values.","solution":"def find_high_temperatures(data: dict, threshold: int) -> dict: Returns a dictionary of cities with temperatures exceeding the threshold. Args: data (dict): Dictionary with city names as keys and temperatures as values. threshold (int): The temperature threshold. Returns: dict: Dictionary containing only the cities where temperatures exceed the threshold. result = {city: temp for city, temp in data.items() if temp > threshold} return result"},{"question":"Context: Design a function that simulates a simplified version of the famous Conway\'s Game of Life. The Game of Life is a cellular automaton where cells evolve at each step based on a set of rules. Task: Create a function named `game_of_life` that simulates one step in Conway\'s Game of Life for a given grid. Requirements: 1. The function should take a 2D list of integers as input, where `1` represents a live cell, and `0` represents a dead cell. 2. Implement the following rules to update the grid: - Any live cell with fewer than two live neighbors dies, as if by underpopulation. - Any live cell with two or three live neighbors lives on to the next generation. - Any live cell with more than three live neighbors dies, as if by overpopulation. - Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. 3. The new state of each cell should be determined simultaneously, meaning that the next state should not affect the updates being made during this step. 4. The function should return the updated 2D list after applying the rules. Function Signature: ```python def game_of_life(board: list[list[int]]) -> list[list[int]]: pass ```","solution":"def game_of_life(board): def count_live_neighbors(board, row, col): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] live_neighbors = 0 for dr, dc in directions: r, c = row + dr, col + dc if 0 <= r < len(board) and 0 <= c < len(board[0]) and board[r][c] == 1: live_neighbors += 1 return live_neighbors rows, cols = len(board), len(board[0]) next_state = [[0] * cols for _ in range(rows)] for r in range(rows): for c in range(cols): live_neighbors = count_live_neighbors(board, r, c) if board[r][c] == 1: if live_neighbors == 2 or live_neighbors == 3: next_state[r][c] = 1 else: next_state[r][c] = 0 else: if live_neighbors == 3: next_state[r][c] = 1 return next_state"},{"question":"Objective You are required to implement a function `find_isomorphic_strings(s1, s2)` that determines whether two input strings are isomorphic. Two strings `s1` and `s2` are considered isomorphic if the characters in `s1` can be replaced to get `s2`. The replacement must be a one-to-one mapping between characters with no overlaps. Function Signature ```python def find_isomorphic_strings(s1, s2) ``` # Parameters - `s1`: A string of length `n`. - `s2`: A string of length `n`. # Returns - A boolean value `True` if the strings `s1` and `s2` are isomorphic. - A boolean value `False` otherwise. Methodology 1. **Length Check**: - If the lengths of `s1` and `s2` are not the same, return `False`. 2. **Mapping Characters**: - Use two dictionaries to map characters from `s1` to `s2` and vice versa. - For each character pair `(char1, char2)` from `s1` and `s2`, perform the following steps: - If `char1` is already in the dictionary mapping `s1` to `s2`, ensure it maps to `char2`. If not, return `False`. - If `char2` is already in the dictionary mapping `s2` to `s1`, ensure it maps to `char1`. If not, return `False`. - If neither character is mapped, create the mapping between `char1` and `char2` in both dictionaries. 3. **Return**: - If all character pairs are successfully mapped, return `True`. - Otherwise, the strings are not isomorphic and return `False`. Constraints - The function should handle empty strings as valid input and return `True` since two empty strings are trivially isomorphic. Examples ```python print(find_isomorphic_strings(\\"egg\\", \\"add\\")) # Expected output: True print(find_isomorphic_strings(\\"foo\\", \\"bar\\")) # Expected output: False print(find_isomorphic_strings(\\"paper\\", \\"title\\")) # Expected output: True print(find_isomorphic_strings(\\"\\", \\"\\")) # Expected output: True ``` The function should return `True` for the first and third examples where the mappings are consistent (`e` to `a`, `g` to `d` in the first, and respective characters in the second). It should return `False` for the second example where the mappings (`f` to `b`, `o` to `a` and `r`) are inconsistent. An empty string should always return `True`.","solution":"def find_isomorphic_strings(s1, s2): Determines if two strings are isomorphic. if len(s1) != len(s2): return False char_map_1_to_2 = {} char_map_2_to_1 = {} for char1, char2 in zip(s1, s2): if char1 in char_map_1_to_2: if char_map_1_to_2[char1] != char2: return False else: char_map_1_to_2[char1] = char2 if char2 in char_map_2_to_1: if char_map_2_to_1[char2] != char1: return False else: char_map_2_to_1[char2] = char1 return True"},{"question":"Create a function to perform linear regression on a 2D dataset and plot the results using `matplotlib`. This function should fit a linear model to the provided data points and visualize both the data and the fitted regression line. **Function Signature:** ```python def plot_linear_regression(x, y, line_color=\'red\', data_color=\'blue\'): Plots a 2D dataset and its linear regression line. Parameters: x (ndarray): A NumPy array of shape (n,) representing the x-coordinates of the data points. y (ndarray): A NumPy array of shape (n,) representing the y-coordinates of the data points. line_color (str, optional): Color of the regression line. data_color (str, optional): Color of the data points. ``` **Requirements:** 1. Use `numpy.polyfit` to compute the linear regression coefficients. 2. Use `matplotlib.pyplot.scatter` to plot the data points. 3. Use `matplotlib.pyplot.plot` to plot the regression line. 4. The function should handle optional parameters for the regression line color (`line_color`) and data points color (`data_color`). **Input:** - `x`: A NumPy array of shape (n,) representing the x-coordinates of the data points. - `y`: A NumPy array of shape (n,) representing the y-coordinates of the data points. - `line_color`: (Optional) Color of the regression line (default is \'red\'). - `data_color`: (Optional) Color of the data points (default is \'blue\'). **Output:** - A 2D scatter plot and the regression line displayed on screen. # Example: ```python import numpy as np # Sample data x = np.array([1, 2, 3, 4, 5]) y = np.array([2, 4, 5, 4, 5]) # Calling the plot_linear_regression function plot_linear_regression(x, y, line_color=\'green\', data_color=\'orange\') ``` This example should create and display a 2D scatter plot of the provided data points with an orange color, and a fitted linear regression line in green color.","solution":"import numpy as np import matplotlib.pyplot as plt def plot_linear_regression(x, y, line_color=\'red\', data_color=\'blue\'): Plots a 2D dataset and its linear regression line. Parameters: x (ndarray): A NumPy array of shape (n,) representing the x-coordinates of the data points. y (ndarray): A NumPy array of shape (n,) representing the y-coordinates of the data points. line_color (str, optional): Color of the regression line. data_color (str, optional): Color of the data points. # Compute the linear regression coefficients slope, intercept = np.polyfit(x, y, 1) # Regression line y values y_reg = slope * x + intercept # Plot the data points plt.scatter(x, y, color=data_color, label=\'Data Points\') # Plot the regression line plt.plot(x, y_reg, color=line_color, label=\'Regression Line\') # Adding labels and title plt.xlabel(\'X-axis\') plt.ylabel(\'Y-axis\') plt.title(\'Linear Regression\') plt.legend() # Show the plot plt.show()"},{"question":"You are tasked with creating a function called `find_cycle(graph: dict) -> bool`. This function takes a single parameter `graph`, which is a dictionary representing a directed graph. The keys are nodes and the values are lists of nodes to which there is a directed edge from the key node. The function should determine whether the graph contains any cycles. # Requirements 1. **Input Validation**: If `graph` is empty, return `False` as it cannot contain any cycles. 2. **Cycle Detection**: Use Depth-First Search (DFS) to detect whether there is a cycle in the graph. 3. **Algorithm Definition**: - Use a set called `visited` to keep track of all nodes that have been visited. - Use a set called `rec_stack` to keep track of the nodes currently in the recursion stack (i.e., the nodes being explored in the current path). 4. **DFS Implementation**: - Implement a helper function `dfs(node)` which: - Adds the node to `visited` and `rec_stack`. - Iterates through all adjacent nodes. - Calls itself recursively for any adjacent node that has not been visited. - If an adjacent node is already in `rec_stack`, a cycle is detected, and the function returns `True`. - After exploring all adjacent nodes, removes the node from `rec_stack` and returns `False` if no cycle is found. 5. **Initial Call**: For each node in `graph`, if it has not been visited, initiate a DFS from that node. 6. **Return Result**: If a cycle is detected during any DFS, return `True`. Otherwise, return `False`. # Example ```python graph = { \'A\': [\'B\'], \'B\': [\'C\'], \'C\': [\'A\'], \'D\': [\'E\'], \'E\': [] } ``` - In the example above, `find_cycle(graph)` should return `True` because there is a cycle A -> B -> C -> A. Implement the function `find_cycle(graph: dict) -> bool` with the constraints and details provided. Ensure to handle directed edges and include necessary error handling for robust implementation. **Note**: You do not need to insert import statements or define additional helper functions unless required by the algorithm.","solution":"def find_cycle(graph): Determines whether the directed graph contains a cycle. :param graph: A dictionary representing a directed graph where keys are nodes and values are lists of nodes to which there is a directed edge from the key node. :return: True if there is a cycle in the graph, otherwise False. if not graph: return False visited = set() rec_stack = set() def dfs(node): visited.add(node) rec_stack.add(node) for neighbor in graph.get(node, []): if neighbor not in visited: if dfs(neighbor): return True elif neighbor in rec_stack: return True rec_stack.remove(node) return False for node in graph: if node not in visited: if dfs(node): return True return False"},{"question":"# Task: Conway\'s Game of Life In this task, you will implement a function in Python to simulate one iteration of Conway\'s Game of Life. This problem is designed to help you understand cellular automata and practice with 2D arrays and neighbor analysis. Function Requirements: - **Function Name:** `game_of_life` - **Parameters:** `board` (a 2D list representing the game board, where 1 indicates a live cell and 0 indicates a dead cell) - **Returns:** A 2D list representing the board after one iteration Description: Your task is to implement the function `game_of_life(board)` which applies the rules of Conway\'s Game of Life to the given board and returns the board after one iteration. The rules are as follows: 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by overpopulation. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. Example: Here is an example to illustrate how your function should work: ```python initial_board = [ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ] next_board = game_of_life(initial_board) # next_board should be: # [ # [0, 0, 0], # [1, 0, 1], # [0, 1, 1], # [0, 1, 0] # ] ``` Constraints: - The input board will be a 2D list with dimensions `m x n` where `m` and `n` are between 1 and 100. - Each cell contains either a 0 or a 1. # Notes: - You do not need to handle boards smaller than 3x3 differently; the rules should naturally handle the edges and corners. - To avoid modifying the original board while calculating the next state, consider using a deep copy or working with an auxiliary board.","solution":"def game_of_life(board): Simulate one iteration of Conway\'s Game of Life. Parameters: board (list of list of int): 2D list representing the game board, where 1 indicates a live cell and 0 indicates a dead cell Returns: list of list of int: Updated 2D list representing the board after one iteration # Directions for the eight neighbors DIRECTIONS = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] # Get the number of rows and cols rows, cols = len(board), len(board[0]) # Create a copy of the board to store the next state next_board = [[0 for _ in range(cols)] for _ in range(rows)] # Helper function to count live neighbors def count_live_neighbors(r, c): count = 0 for dr, dc in DIRECTIONS: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and board[nr][nc] == 1: count += 1 return count # Apply the rules of the game to each cell for r in range(rows): for c in range(cols): live_neighbors = count_live_neighbors(r, c) if board[r][c] == 1: # Rule 1: Underpopulation # Rule 2: Live on to the next generation # Rule 3: Overpopulation if live_neighbors < 2 or live_neighbors > 3: next_board[r][c] = 0 else: next_board[r][c] = 1 else: # Rule 4: Reproduction if live_neighbors == 3: next_board[r][c] = 1 return next_board"},{"question":"Given an array of integers, write a function `find_peak_element(nums: List[int]) -> int` that finds a peak element and returns its index. A peak element is an element that is greater than its neighbors. - You can assume that `nums[-1]` and `nums[n]` are negative infinity (-∞), where `n` is the length of the array. - If the array contains multiple peaks, return the index of any one of the peaks. - Your solution should have logarithmic complexity. # Input - `nums`: A list of integers representing the array of numbers. # Output - Return an integer representing the index of a peak element. # Example ```python nums = [1, 2, 3, 1] print(find_peak_element(nums)) ``` # Explanation - In the given example, the peak element is `3`, which is greater than its neighbors `2` and `1`. Thus, the function should return the index `2`. # Note - The array can contain multiple peaks. For example, in the array `[1, 3, 2, 3, 1]`, both `3`s are peak elements, so the function can return `1` or `3`. - Try to solve the problem in `O(log n)` time complexity.","solution":"from typing import List def find_peak_element(nums: List[int]) -> int: Finds a peak element in the list and returns its index. A peak element is an element that is greater than its neighbors. :param nums: A list of integers. :return: An integer representing the index of a peak element. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 # Compare mid element with its right neighbor if nums[mid] < nums[mid + 1]: left = mid + 1 else: right = mid return left"},{"question":"You are asked to implement a function that generates all possible anagrams of a given input string. An anagram is a rearrangement of the letters in the input string into a new word or phrase. You need to ensure that each possible permutation of the string is unique and valid. **Function Specification:** - **Function Name:** `generate_anagrams` - **Input:** A single string `s` which is the input word. - **Output:** A list of strings where each string is a unique anagram of the input word `s`. **Detailed Steps:** 1. Use itertools to generate all permutations of the input string. 2. Convert the permutations into a set to ensure all anagrams are unique. 3. Convert the set back to a list and return it. **Constraints:** 1. The input string `s` will only contain alphabetical characters and will have a length between 1 and 8. 2. The function should handle both upper and lower case characters such that \'a\' and \'A\' are considered different characters. **Example:** ```python generate_anagrams(\\"abc\\") ``` will yield: ```python [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] ``` but the order of the anagrams in the list does not need to match the example exactly. #","solution":"import itertools def generate_anagrams(s): Generate all unique anagrams of the input string. :param s: The input string :return: A list of unique anagrams # Generate all permutations of the input string permutations = itertools.permutations(s) # Convert each permutation to a string and add to a set to ensure uniqueness unique_anagrams = set([\'\'.join(p) for p in permutations]) # Convert the set to a list and return return list(unique_anagrams)"},{"question":"--- You are required to simulate a simple ticket booking system for a movie theater. Each theater has a fixed number of seats arranged in a grid, represented by a 2D list. Your task is to write a Python function called `book_ticket` which processes a series of booking requests, updates the seating arrangement accordingly, and returns the updated seating map. The function will take two parameters: 1. `seats`: A 2D list representing the seats in the theater, where each element is either 0 (available seat) or 1 (booked seat). 2. `requests`: A list of tuples, where each tuple contains two integers `(row, col)` representing the indices of the seat to be booked. The function should iterate over each booking request in the `requests` list and: - If the seat at the specified `(row, col)` is available (0), mark it as booked (1). - If the seat is already booked (1), skip that request and proceed to the next. The function should return the updated 2D list of seats after processing all booking requests. Function Signature: ```python def book_ticket(seats, requests): ``` Example: ```python seats = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] requests = [(0, 0), (1, 1), (2, 2), (1, 2)] updated_seats = book_ticket(seats, requests) # Expected output: # [ # [1, 0, 0], # [0, 1, 1], # [0, 0, 1] # ] ```","solution":"def book_ticket(seats, requests): Processes a series of booking requests and updates the seating arrangement. Parameters: seats (list of list of int): A 2D list representing the seats in the theater. Each element is either 0 (available seat) or 1 (booked seat). requests (list of tuple of int): A list of tuples where each tuple contains two integers (row, col) representing the indices of the seat to be booked. Returns: list of list of int: The updated 2D seating map after processing all booking requests. for row, col in requests: if seats[row][col] == 0: seats[row][col] = 1 return seats"},{"question":"**Problem Statement:** In this problem, you are required to implement a function that performs matrix multiplication. Matrix multiplication is a fundamental operation in various domains of computer science and mathematics. Given two matrices, the function should return their product according to the rules of linear algebra. **Function Signature:** ```python def matrix_multiply(A: List[List[int]], B: List[List[int]]) -> List[List[int]]: ... ``` **Function Explanation:** - **Input:** - `A` (List[List[int]]): A list of lists representing a 2D matrix (m x n) of integers. - `B` (List[List[int]]): A list of lists representing a 2D matrix (n x p) of integers. - **Output:** - Returns a list of lists representing the resultant matrix (m x p) after multiplying `A` by `B`. **Instructions:** 1. Each element of the resulting matrix should be computed as the dot product of the corresponding row from `A` and the corresponding column from `B`. 2. Ensure that the matrix dimensions are compatible for multiplication; i.e., the number of columns in `A` must be equal to the number of rows in `B`. 3. Implement the multiplication inside the `matrix_multiply` function. **Requirements:** - You must not use any external libraries such as NumPy. - Implement standard nested loops for matrix multiplication. **Example:** ```python A = [ [1, 2, 3], [4, 5, 6] ] B = [ [7, 8], [9, 10], [11, 12] ] output = matrix_multiply(A, B) print(output) # Expected Output: # [ # [58, 64], # [139, 154] # ] ``` **Note:** 1. The resulting matrix will have dimensions `(m x p)`, where `m` is the number of rows of `A` and `p` is the number of columns of `B`. 2. Validate the input dimensions to ensure that matrix multiplication is possible, and handle edge cases as necessary.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B. Parameters: A (List[List[int]]): Matrix A of [m x n] B (List[List[int]]): Matrix B of [n x p] Returns: List[List[int]]: Resultant matrix of dimensions [m x p] # Number of rows in A m = len(A) # Number of columns in A (also number of rows in B) n = len(A[0]) # Number of columns in B p = len(B[0]) # Initialize the resultant matrix with zeros C = [[0 for _ in range(p)] for _ in range(m)] # Multiply the matrices for i in range(m): for j in range(p): for k in range(n): C[i][j] += A[i][k] * B[k][j] return C"},{"question":"You are required to write a Python function that generates a bar chart illustrating the distribution of scores for a set of students across different subjects. The data for scores in various subjects is provided. Your function needs to create a grouped bar chart where each group represents a student and each bar within a group represents a subject with corresponding scores. # Function Requirements - **Function Name:** `plot_score_distribution` - **Parameters:** - `scores`: A dictionary where the keys are student names and the values are dictionaries with subjects as keys and corresponding scores as values. - **Objective:** - Create a grouped bar chart where each group of bars represents a student. - Each bar within a group represents the score of the student in a specific subject. - Label the x-axis as \\"Students\\" and the y-axis as \\"Scores\\". - Add a legend to label each subject. - The plot should have an appropriate title. # Example Suppose you have the following scores: ```python scores = { \\"Alice\\": {\\"Math\\": 85, \\"Science\\": 90, \\"English\\": 78}, \\"Bob\\": {\\"Math\\": 70, \\"Science\\": 80, \\"English\\": 82}, \\"Charlie\\": {\\"Math\\": 95, \\"Science\\": 85, \\"English\\": 88} } ``` Calling `plot_score_distribution(scores)` should create a grouped bar chart visualizing the scores of each student in different subjects, with a legend indicating the subjects. # Constraints - Assume all students have scores for the same set of subjects. - Ensure the function uses `matplotlib` for plotting.","solution":"import matplotlib.pyplot as plt import numpy as np def plot_score_distribution(scores): Generates a grouped bar chart illustrating the distribution of scores for students across different subjects. Parameters: scores (dict): A dictionary where keys are student names and values are dictionaries of subjects and corresponding scores. # Extract student names and subjects students = list(scores.keys()) subjects = list(scores[students[0]].keys()) # Number of subjects and students n_subjects = len(subjects) n_students = len(students) # Create a figure and axis fig, ax = plt.subplots() # X positions for groups and bar width index = np.arange(n_students) bar_width = 0.15 # Plot each subject\'s scores for i, subject in enumerate(subjects): scores_for_subject = [scores[student][subject] for student in students] ax.bar(index + i * bar_width, scores_for_subject, bar_width, label=subject) # Labeling the plot ax.set_xlabel(\'Students\') ax.set_ylabel(\'Scores\') ax.set_title(\'Students Score Distribution Across Subjects\') ax.set_xticks(index + bar_width * (n_subjects - 1) / 2) ax.set_xticklabels(students) ax.legend() # Show the plot plt.show()"},{"question":"You are tasked with implementing a function named `most_frequent_char` that will determine the most frequently occurring character in a given string. The function should return a tuple containing the character and its frequency. If multiple characters have the same highest frequency, return the one that appears first in the string. **Function Signature:** ```python def most_frequent_char(s: str) -> (str, int): This function takes a single string s as input and returns a tuple containing the most frequent character and its frequency. ``` **Detailed Requirements:** 1. **Character Frequency Calculation:** - The function should count the occurrences of each character in the input string `s`. 2. **Handling Ties:** - If there are multiple characters with the same maximum frequency, the function should return the one that appears first in the string. 3. **String `s`:** - The input string `s` may contain letters, digits, and special characters. 4. **Input Parameters:** - The function receives a string `s`. 5. **Output:** - Return a tuple where the first element is the most frequent character and the second element is its frequency. If the input string is empty, return `None`.","solution":"def most_frequent_char(s: str) -> (str, int): This function takes a single string s as input and returns a tuple containing the most frequent character and its frequency. If the input string is empty, return None. if not s: return None char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 max_char = None max_count = 0 for char in s: if char_count[char] > max_count: max_char = char max_count = char_count[char] return (max_char, max_count)"},{"question":"You are implementing an optimization algorithm for a logistics company to minimize transportation costs using a Genetic Algorithm (GA). Your task is to optimize the route selection for delivering goods from a distribution center to multiple destinations. Each route has an associated cost, and the goal is to find the minimum cost route while covering all destinations. The cost matrix is provided as a 2D list, where `cost_matrix[i][j]` represents the cost of traveling from destination `i` to destination `j`. You need to find an optimal sequence of deliveries starting from the distribution center (considered as destination 0) and return back to the same point after visiting all other destinations exactly once. To implement this, you should simulate the GA using the following guidelines: - Define the population of routes. - Implement crossover and mutation operations. - Use a fitness function based on the total cost of the route. - Execute the algorithm for a pre-defined number of generations or until convergence. Write a function named `genetic_algorithm_route_optimization` that takes in a cost matrix and returns the optimal route sequence and the minimized cost as a tuple. # Function Signature ```python def genetic_algorithm_route_optimization(cost_matrix: list) -> tuple: ``` # Requirements 1. Initialize a random population of possible routes. 2. Implement selection, crossover, and mutation to evolve the population. 3. Define a fitness function that computes the total cost of each route. 4. Run the GA for a sufficient number of generations and return the best route found. # Assumptions and Constraints 1. The cost matrix is a square matrix of size `n x n` where `n` is the number of destinations including the distribution center. 2. All entries in the cost matrix are non-negative integers. 3. The number of destinations `n` is at least 2 and at most 20. 4. The algorithm should be designed to handle the stochastic nature of GA and employ random seed setting for reproducibility. # Example Input: ```python cost_matrix = [ [0, 29, 20, 21], [29, 0, 15, 17], [20, 15, 0, 28], [21, 17, 28, 0] ] ``` Output: ```python ([0, 2, 1, 3, 0], 85) ``` In this example, the optimal route starting from the distribution center (0) and covering all destinations with the minimum cost is `[0, 2, 1, 3, 0]`, resulting in a total cost of 85.","solution":"import random def calculate_route_cost(route, cost_matrix): total_cost = 0 for i in range(len(route) - 1): total_cost += cost_matrix[route[i]][route[i + 1]] return total_cost def initialize_population(pop_size, num_destinations): population = [] for _ in range(pop_size): route = list(range(1, num_destinations)) random.shuffle(route) route = [0] + route + [0] population.append(route) return population def crossover(parent1, parent2): size = len(parent1) start, end = sorted(random.sample(range(1, size-1), 2)) child_p1 = parent1[start:end] child = [item for item in parent2 if item not in child_p1] child = child[:start] + child_p1 + child[start:] child = [0] + [x for x in child if x != 0] + [0] return child def mutate(route, mutation_rate): for swapped in range(1, len(route) - 1): if random.random() < mutation_rate: swap_with = random.randint(1, len(route) - 2) route[swapped], route[swap_with] = route[swap_with], route[swapped] return route def genetic_algorithm_route_optimization(cost_matrix, pop_size=100, generations=500, mutation_rate=0.01): num_destinations = len(cost_matrix) population = initialize_population(pop_size, num_destinations) best_route = None best_cost = float(\'inf\') for generation in range(generations): fitness_scores = [(calculate_route_cost(route, cost_matrix), route) for route in population] fitness_scores.sort(key=lambda x: x[0]) if fitness_scores[0][0] < best_cost: best_cost = fitness_scores[0][0] best_route = fitness_scores[0][1] next_generation = [] for _ in range(pop_size // 2): parents = random.sample(fitness_scores[:50], 2) # Selecting top 50 for diversity parent1 = parents[0][1] parent2 = parents[1][1] child1 = mutate(crossover(parent1, parent2), mutation_rate) child2 = mutate(crossover(parent2, parent1), mutation_rate) next_generation.extend([child1, child2]) population = next_generation return best_route, best_cost"},{"question":"You are developing a system to evaluate students\' performance based on their scores across different subjects. Write a function named `evaluate_student_performance` that calculates and categorizes the average score of a student. The function should take in the following parameters: - `scores` (dict): A dictionary where keys are subject names (strings), and values are the corresponding scores (float) in the range from 0 to 100. The function should calculate the average score and return a string representing the performance category, according to the following criteria: - \\"Excellent\\" if the average score is 90 or above, - \\"Good\\" if the average score is 75 or above but less than 90, - \\"Average\\" if the average score is 50 or above but less than 75, - \\"Poor\\" if the average score is less than 50. The function should raise a ValueError if the input dictionary is empty or if any of the scores are outside the range from 0 to 100. # Function Signature ```python def evaluate_student_performance(scores: dict) -> str: ``` # Example Usage ```python scores = {\\"Math\\": 85.5, \\"English\\": 78.0, \\"Science\\": 92.0} print(evaluate_student_performance(scores)) # Output: \\"Good\\" scores = {\\"Math\\": 45.0, \\"English\\": 48.5, \\"Science\\": 49.0} print(evaluate_student_performance(scores)) # Output: \\"Poor\\" ```","solution":"def evaluate_student_performance(scores: dict) -> str: Calculate the average score from the scores dictionary and categorize the performance. Args: - scores (dict): Dictionary with subject names as keys and scores (0-100) as values. Returns: - str: Performance category (\\"Excellent\\", \\"Good\\", \\"Average\\", \\"Poor\\"). Raises: - ValueError: If dictionary is empty or scores are out of range (0 to 100). if not scores: raise ValueError(\\"The scores dictionary is empty\\") total_score = 0 count = 0 for subject, score in scores.items(): if not 0 <= score <= 100: raise ValueError(f\\"Invalid score {score} for subject {subject}. Score must be between 0 and 100.\\") total_score += score count += 1 average_score = total_score / count if average_score >= 90: return \\"Excellent\\" elif average_score >= 75: return \\"Good\\" elif average_score >= 50: return \\"Average\\" else: return \\"Poor\\""},{"question":"You are required to implement a dynamic programming algorithm that calculates the minimum cost to climb to the top of a staircase. The staircase has `n` steps, and you can either climb one or two steps at a time. Each step has an associated cost provided in a list. The algorithm should return the minimum cost to reach the top. Write a function called `min_cost_climbing_stairs` that takes in: - `cost`: a list of integers where `cost[i]` represents the cost of step `i`. The function should return an integer representing the minimum cost to reach the top. You can either start from step `0` or step `1`, and you reach the goal either by stepping onto the `n-1` step or by stepping onto the `n` step directly. Example: ```python cost = [10, 15, 20] print(min_cost_climbing_stairs(cost)) # Output: 15 cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] print(min_cost_climbing_stairs(cost)) # Output: 6 ``` ```python def min_cost_climbing_stairs(cost): # Your implementation here pass ```","solution":"def min_cost_climbing_stairs(cost): Calculates the minimum cost to reach the top of the staircase. Parameters: cost (list): A list of integers where cost[i] represents the cost of step i. Returns: int: The minimum cost to reach the top of the staircase. n = len(cost) if n == 0: return 0 if n == 1: return cost[0] dp = [0] * (n + 1) dp[0] = 0 dp[1] = 0 for i in range(2, n + 1): dp[i] = min(dp[i-1] + cost[i-1], dp[i-2] + cost[i-2]) return dp[n]"},{"question":"Write a function that reads a CSV file containing two columns: \\"Name\\" and \\"Age\\". Your function should compute and return the average age of the people listed in the file. The function signature should be: ```python def calculate_average_age(csv_path: str) -> float: ``` To maintain robustness: - Validate that the CSV file has the correct columns. - Ensure the \\"Age\\" column contains valid integer values. - Return 0 if there are no valid entries to calculate the average. Example CSV content: ``` Name,Age Alice,30 Bob,25 Charlie,35 ```","solution":"import csv def calculate_average_age(csv_path: str) -> float: Reads a CSV file containing two columns: \\"Name\\" and \\"Age\\". Computes and returns the average age of the people listed in the file. Returns 0 if there are no valid entries to calculate the average. total_age = 0 count = 0 try: with open(csv_path, mode=\'r\') as csvfile: reader = csv.DictReader(csvfile) # Check if the CSV has the correct columns if reader.fieldnames != [\'Name\', \'Age\']: return 0 for row in reader: try: age = int(row[\'Age\']) total_age += age count += 1 except ValueError: continue # Skip rows where Age is not a valid integer if count == 0: return 0 return total_age / count except FileNotFoundError: return 0"},{"question":"You are required to create a function to generate and display a bar plot using the matplotlib library. The goal is to practice creating bar plots, setting axis labels, and adding a title with the matplotlib library. The function should follow these specifications: **Function Name:** - `display_bar_plot` **Input Parameters:** 1. `categories`: A list of strings representing the names of the categories to be plotted on the x-axis. 2. `values`: A list of integers or floats representing the values corresponding to each category. 3. `x_label`: A string to label the x-axis. 4. `y_label`: A string to label the y-axis. 5. `title`: A string to set as the title of the bar plot. **Functionality:** - Use `matplotlib.pyplot.bar` to create a bar plot with `categories` on the x-axis and `values` on the y-axis. - Use `matplotlib.pyplot.xlabel` and `matplotlib.pyplot.ylabel` to set the x-axis and y-axis labels, respectively. - Use `matplotlib.pyplot.title` to set the title of the plot. - Use `matplotlib.pyplot.show` to display the final result.","solution":"import matplotlib.pyplot as plt def display_bar_plot(categories, values, x_label, y_label, title): Displays a bar plot with the provided category and value data. Args: categories (list of str): The names of the categories to be plotted on the x-axis. values (list of int/float): The values corresponding to each category. x_label (str): The label for the x-axis. y_label (str): The label for the y-axis. title (str): The title of the plot. plt.bar(categories, values) plt.xlabel(x_label) plt.ylabel(y_label) plt.title(title) plt.show()"},{"question":"In this exercise, you will write a Python function that takes a list of strings and a target string, then returns the total number of exact matches of the target string in the list. If the target string appears in the list multiple times, each occurrence should be counted separately. Function Specification You need to implement the function `count_occurrences(strings: List[str], target: str) -> int`, which takes a list of strings and a target string as inputs and returns an integer representing the total number of exact matches of the target string in the list. # Requirements 1. The function should iterate through the list and count the number of times the target string appears in the list. 2. The function should be case-sensitive, meaning `\'abc\'` and `\'ABC\'` are considered different strings. # Example For example, if the list of strings is `[\\"apple\\", \\"banana\\", \\"apple\\", \\"cherry\\", \\"apple\\"]` and the target string is `\\"apple\\"`, the function call would look like: ```python count = count_occurrences([\\"apple\\", \\"banana\\", \\"apple\\", \\"cherry\\", \\"apple\\"], \\"apple\\") print(f\\"Count: {count}\\") ``` # Notes - If the list is empty, the function should return `0`. - If the target string does not appear in the list, the function should also return `0`. # Example Output - For the input list `[\\"apple\\", \\"banana\\", \\"apple\\", \\"cherry\\", \\"apple\\"]` and target string `\\"apple\\"`, the function should return `3`. - For the input list `[\\"Apple\\", \\"banana\\", \\"APPLE\\", \\"cherry\\", \\"apple\\"]` and target string `\\"apple\\"`, the function should return `1` (due to case sensitivity).","solution":"from typing import List def count_occurrences(strings: List[str], target: str) -> int: Returns the number of times the target string appears in the list of strings. The function is case-sensitive. count = 0 for string in strings: if string == target: count += 1 return count"},{"question":"You are tasked with creating a Python function called `convert_to_title_case(filename, output_filename=None)` that processes text from a file and converts each line to title case. The function should perform the following operations: 1. Read each line from the specified input file. 2. Convert the entire content of each line to title case (first letter of each word is capitalized). 3. If an output filename is provided, write the transformed lines to the specified output file. If no output filename is given, output the transformed lines to the console. Specific requirements: - Use the `str.title` method to convert each line to title case. - Ensure the input file is read and the content is processed correctly. - Handle potential cases where the input file may not exist by catching and handling the IOError. Function Signature: ```python def convert_to_title_case(filename, output_filename=None): ``` Parameters: - `filename` (str): The path to the input file containing lines of text. - `output_filename` (str, optional): The path to the output file where transformed lines are to be saved. Defaults to None. Example Usage: Assume the file `text.txt` contains the following lines: ``` hello world python programming convert this text ``` Example function call: ```python convert_to_title_case(\'text.txt\') ``` Output: ``` Hello World Python Programming Convert This Text ``` Saving to an output file: ```python convert_to_title_case(\'text.txt\', output_filename=\'output.txt\') ``` This will create an `output.txt` file with the following content: ``` Hello World Python Programming Convert This Text ```","solution":"def convert_to_title_case(filename, output_filename=None): try: with open(filename, \'r\') as file: lines = file.readlines() title_cased_lines = [line.title() for line in lines] if output_filename: with open(output_filename, \'w\') as outfile: outfile.writelines(title_cased_lines) else: for line in title_cased_lines: print(line, end=\'\') except IOError as e: print(f\\"An error occurred trying to read the file: {e}\\")"},{"question":"Load a JSON file containing user data, perform data cleaning to remove any records with missing values, and use K-Nearest Neighbors (KNN) to predict categorical user segments. Assume the JSON file has a \'segment\' field to be used as the target variable. Output the accuracy score of the model. Note that: If the \'segment\' field is not found in the JSON file, the function raises a ValueError. The function should output: float: Accuracy score of the model\'s predictions. You should write self-contained code starting with: ``` import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import accuracy_score def task_func(json_file_path, target_field=\\"segment\\", test_size=0.2, n_neighbors=5): ```","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import accuracy_score def task_func(json_file_path, target_field=\\"segment\\", test_size=0.2, n_neighbors=5): # Load data from JSON file df = pd.read_json(json_file_path) # Check if target field exists if target_field not in df.columns: raise ValueError(f\\"\'{target_field}\' not found in JSON file.\\") # Drop rows with missing values df = df.dropna() # Split into features and target X = df.drop(columns=[target_field]) y = df[target_field] # Split data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42) # Normalize feature data scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Build KNN classifier knn = KNeighborsClassifier(n_neighbors=n_neighbors) knn.fit(X_train, y_train) # Predict on test data y_pred = knn.predict(X_test) # Calculate accuracy accuracy = accuracy_score(y_test, y_pred) return accuracy"},{"question":"You are tasked with working with the `itertools` module in Python to perform combinations and permutations. In this problem, you will write a function and perform specific operations to demonstrate your understanding of the `itertools` library. Tasks: 1. **Generate All Possible Combinations:** Write a function `generate_combinations(arr, n)` that takes a list `arr` and an integer `n`, and generates all possible combinations of `n` elements from the list. The function should return a list of tuples, where each tuple represents a combination. 2. **Generate All Possible Permutations:** Write a function `generate_permutations(arr, n)` that takes a list `arr` and an integer `n`, and generates all possible permutations of `n` elements from the list. The function should return a list of tuples, where each tuple represents a permutation. 3. **Main Logic:** - Use your `generate_combinations` function to generate and print all combinations of length 2 and length 3 from the list `[1, 2, 3, 4]`. - Use your `generate_permutations` function to generate and print all permutations of length 2 and length 3 from the list `[1, 2, 3, 4]`. Your function and main logic should adhere to the following structure: ```python from itertools import combinations, permutations def generate_combinations(arr, n): Generates all possible combinations of n elements from the list. Args: arr (list): The list of elements. n (int): The number of elements in each combination. Returns: list of tuples: A list of tuples representing all combinations. return list(combinations(arr, n)) def generate_permutations(arr, n): Generates all possible permutations of n elements from the list. Args: arr (list): The list of elements. n (int): The number of elements in each permutation. Returns: list of tuples: A list of tuples representing all permutations. return list(permutations(arr, n)) # Main logic if __name__ == \\"__main__\\": arr = [1, 2, 3, 4] # Generating combinations comb_2 = generate_combinations(arr, 2) comb_3 = generate_combinations(arr, 3) print(\\"Combinations of length 2:\\", comb_2) print(\\"Combinations of length 3:\\", comb_3) # Generating permutations perm_2 = generate_permutations(arr, 2) perm_3 = generate_permutations(arr, 3) print(\\"Permutations of length 2:\\", perm_2) print(\\"Permutations of length 3:\\", perm_3) ```","solution":"from itertools import combinations, permutations def generate_combinations(arr, n): Generates all possible combinations of n elements from the list. Args: arr (list): The list of elements. n (int): The number of elements in each combination. Returns: list of tuples: A list of tuples representing all combinations. return list(combinations(arr, n)) def generate_permutations(arr, n): Generates all possible permutations of n elements from the list. Args: arr (list): The list of elements. n (int): The number of elements in each permutation. Returns: list of tuples: A list of tuples representing all permutations. return list(permutations(arr, n)) # Main logic if __name__ == \\"__main__\\": arr = [1, 2, 3, 4] # Generating combinations comb_2 = generate_combinations(arr, 2) comb_3 = generate_combinations(arr, 3) print(\\"Combinations of length 2:\\", comb_2) print(\\"Combinations of length 3:\\", comb_3) # Generating permutations perm_2 = generate_permutations(arr, 2) perm_3 = generate_permutations(arr, 3) print(\\"Permutations of length 2:\\", perm_2) print(\\"Permutations of length 3:\\", perm_3)"},{"question":"Write a function that simulates the rolling of two six-sided dice a specified number of times. The function should return a dictionary where keys are the possible outcomes (sums of the two dice) and values are the counts of how often each outcome occurred. If the number of rolls is not a positive integer, raise a ValueError. The function should output with: dict: A dictionary with sums of dice rolls and their frequencies. You should write self-contained code starting with: ``` import random def roll_dice_simulation(rolls): ```","solution":"import random def roll_dice_simulation(rolls): Simulates rolling two six-sided dice a specified number of times. Parameters: rolls (int): The number of times to roll the dice. Raises: ValueError: If the number of rolls is not a positive integer. Returns: dict: A dictionary with sums of dice rolls and their frequencies. if not isinstance(rolls, int) or rolls <= 0: raise ValueError(\'The number of rolls must be a positive integer.\') outcomes = {i: 0 for i in range(2, 13)} for _ in range(rolls): die1 = random.randint(1, 6) die2 = random.randint(1, 6) outcome = die1 + die2 outcomes[outcome] += 1 return outcomes"},{"question":"# Task: Write a function `matrix_operations` that will perform various operations on a given two-dimensional matrix. The operations to be performed are transpose, rotate clockwise, and rotate counterclockwise. The function should use essential array and matrix operations from the `numpy` library. # Specifications: 1. **Parameters:** - `matrix`: The input 2D list representing the matrix. - `operation`: A string indicating the operation to be performed on the matrix. Takes values \\"transpose\\", \\"rotate_cw\\", and \\"rotate_ccw\\". 2. **Return Value:** - A 2D list representing the transformed matrix based on the specified operation. 3. **Matrix Operations:** - **Transpose**: Swap the rows with columns. - **Rotate Clockwise (rotate_cw)**: Rotate the matrix 90 degrees clockwise. - **Rotate Counterclockwise (rotate_ccw)**: Rotate the matrix 90 degrees counterclockwise. 4. **Constraints:** - Only the specified operations (\\"transpose\\", \\"rotate_cw\\", \\"rotate_ccw\\") will be valid. If an invalid operation is provided, raise a `ValueError` with the message \\"Invalid operation\\". # Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(matrix_operations(matrix, \\"transpose\\")) # Output: [[1, 4, 7], [2, 5, 8], [3, 6, 9]] print(matrix_operations(matrix, \\"rotate_cw\\")) # Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] print(matrix_operations(matrix, \\"rotate_ccw\\")) # Output: [[3, 6, 9], [2, 5, 8], [1, 4, 7]] ``` # Notes: - Use functions from the `numpy` library for matrix manipulations to ensure optimal performance. - Ensure the function works for non-square matrices as well.","solution":"import numpy as np def matrix_operations(matrix, operation): Performs matrix operations on the given 2D matrix. Parameters: - matrix (list of list of int): The input 2D matrix. - operation (str): The operation to perform (\\"transpose\\", \\"rotate_cw\\", \\"rotate_ccw\\"). Returns: - list of list of int: The transformed matrix. np_matrix = np.array(matrix) if operation == \\"transpose\\": result = np_matrix.T elif operation == \\"rotate_cw\\": result = np.rot90(np_matrix, -1) elif operation == \\"rotate_ccw\\": result = np.rot90(np_matrix) else: raise ValueError(\\"Invalid operation\\") return result.tolist()"},{"question":"# Evaluating Palindromic Subsequences In this problem, you are required to write a function to evaluate the number of unique palindromic subsequences in a given string. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Function Specifications: - **Function Name:** `count_unique_palindromic_subsequences` - **Parameters:** - `s` (str): A string consisting of lowercase English alphabet letters. Detailed Instructions: 1. Generate all possible subsequences of the given string `s`. 2. Identify which of these subsequences are palindromes. 3. Count the number of unique palindromic subsequences. The function should return an integer representing the number of unique palindromic subsequences. For instance, given the input string `\\"aab\\"`, the unique palindromic subsequences are `{\'a\', \'aa\', \'b\'}`, so the function should return `3`. Constraints: - The input string will have a length in the range `[1, 12]`. Here you are provided with a function signature: ```python def count_unique_palindromic_subsequences(s): pass ``` **Note:** - A palindromic string reads the same backward as forward. - Ensure your solution optimally handles the generation and checking of palindromic subsequences. **Example:** ```python print(count_unique_palindromic_subsequences(\\"aab\\")) # Output: 3 print(count_unique_palindromic_subsequences(\\"abc\\")) # Output: 3 ```","solution":"def is_palindrome(sub): return sub == sub[::-1] def generate_subsequences(s): subsequences = set() n = len(s) # There are 2^n possible subsequences for i in range(1, 1 << n): subseq = \\"\\" for j in range(n): if i & (1 << j): subseq += s[j] subsequences.add(subseq) return subsequences def count_unique_palindromic_subsequences(s): subsequences = generate_subsequences(s) unique_palindromic_subsequences = set() for subseq in subsequences: if is_palindrome(subseq): unique_palindromic_subsequences.add(subseq) return len(unique_palindromic_subsequences)"},{"question":"Write a function to find the \'nth\' Fibonacci number using a recursive approach and memoization to improve efficiency. The Fibonacci sequence is defined as follows: - F(0) = 0, F(1) = 1 - For n >= 2, F(n) = F(n-1) + F(n-2) The function should return the nth Fibonacci number. You should write self-contained code starting with: ``` def fibonacci(n): ```","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using recursion and memoization. if n in memo: return memo[n] if n == 0: return 0 elif n == 1: return 1 memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"You are tasked with writing a Python function that identifies the top `n` most common words in a given text and returns them in a sorted list by frequency. Ignore case and punctuation while counting word frequencies. Assume `n` will always be a positive integer less than or equal to the number of unique words in the text. 1. **Function Name**: `top_n_words` 2. **Parameters**: - `text`: A string containing the text to analyze. - `n`: An integer representing the number of top common words to return. 3. **Returns**: A list of the top `n` most common words, sorted by frequency in descending order. If two words have the same frequency, sort them alphabetically. # Example Usages ```python # Example 1: text = \\"Hello world! Hello everyone. This is a test. Hello world again.\\" result = top_n_words(text, 2) print(result) # Output: [\'hello\', \'world\'] # Example 2: text = \\"To be or not to be, that is the question.\\" result = top_n_words(text, 3) print(result) # Output: [\'be\', \'to\', \'not\'] ``` # Requirements 1. Treat words case-insensitively (i.e., \'Word\' and \'word\' should be considered the same word). 2. Ignore punctuation (e.g., \'word,\' and \'word\' should be considered the same word). 3. The returned list should contain words in descending order of their frequency. In case of a tie, words should be returned in alphabetical order. 4. Ensure efficient processing for longer texts, potentially by using collections. # Hints 1. You can use Python\'s `collections.Counter` to count the frequency of words. 2. Consider using `re` module to help with text processing for punctuation.","solution":"import re from collections import Counter def top_n_words(text, n): Returns the top `n` most common words in the given `text`. Parameters: text (str): The text to analyze. n (int): The number of top common words to return. Returns: list: A list of the top `n` most common words. # Remove punctuation and convert to lowercase text = re.sub(r\'[^ws]\', \'\', text).lower() # Split the text into words words = text.split() # Count the frequency of each word word_counts = Counter(words) # Sort words first by frequency (descending) and then alphabetically sorted_words = sorted(word_counts.items(), key=lambda x: (-x[1], x[0])) # Return the top `n` words return [word for word, count in sorted_words[:n]]"},{"question":"You are given a set of data representing the stock prices of various companies over a period of time. Your task is to write a function to determine the maximum profit that could have been made by buying and then later selling the stock on a single day. Assume you can hold only one share of the stock and you must buy before you can sell. **Function Requirements:** Write a function named `max_profit(filename)` which does the following: 1. **Read the Data:** The function should read data from the provided file `filename` that contains a single array `prices` which represents the stock prices for each day. 2. **Compute Maximum Profit:** - Iterate over the prices array to determine the highest possible profit that could be achieved by buying on one day and selling on another later day. - Ensure you handle the scenario where no profit can be made. 3. **Return the Maximum Profit:** The function should return the maximum profit as an integer. If no profit can be made, return 0. **Assumptions:** - The length of the array `prices` is guaranteed to be at least 2. **Function Signature:** ```python def max_profit(filename=\'stockPrices.npz\'): # Your code here ``` Example: Given the contents of `stockPrices.npz` as: ``` prices: [7, 1, 5, 3, 6, 4] ``` - The function should return `5`, which is the maximum profit achieved from buying at price `1` and selling at price `6`. Notes: - You should use the `numpy.load` function to read the data file. - Your implementation should be efficient, ideally with a time complexity of O(n).","solution":"import numpy as np def max_profit(filename=\'stockPrices.npz\'): Determines the maximum profit that could be made by buying and then later selling the stock on a single day. Assume you can hold only one share of the stock and you must buy before you can sell. Args: filename (str): The filename containing an array \'prices\' with the stock prices. Returns: int: The maximum profit that can be achieved. data = np.load(filename) prices = data[\'prices\'] if len(prices) == 0: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are asked to create a function that performs k-means clustering on a given set of two-dimensional data points. The objective is to find `k` cluster centroids that minimize the total distance between each data point and its corresponding centroid. Your function should be named `k_means_clustering` and take two parameters: - `data`: a NumPy array of shape `(n, 2)` where `n` is the number of data points. - `k`: an integer representing the number of clusters. The function should return: - `centroids`: a NumPy array of shape `(k, 2)`, where each row represents a centroid\'s coordinates. The k-means algorithm should follow these steps: 1. Randomly initialize the `k` centroids from the given data points. 2. Assign each data point to the nearest centroid. 3. Update the centroids by computing the mean of all points assigned to each centroid. 4. Repeat steps 2 and 3 until the centroids do not change significantly. # Requirements 1. Use NumPy for array operations and calculations. 2. Ensure your implementation can handle the stopping criteria when centroids do not change significantly. # Example ```python import numpy as np data = np.array([ [1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0], ]) k = 2 centroids = k_means_clustering(data, k) print(\\"Centroids:\\", centroids) ``` # Expected Output For the example given above, the function should print something like: ``` Centroids: [[1.16666667 1.46666667] [7.33333333 9. ]] ``` These values represent the final coordinates of the centroids after convergence. Note that the actual output might slightly vary due to the random initialization of centroids.","solution":"import numpy as np def k_means_clustering(data, k, max_iters=100, tol=1e-4): Perform k-means clustering on a given set of two-dimensional data points. Parameters: data (np.ndarray): A NumPy array of shape (n, 2) where n is the number of data points. k (int): The number of clusters. max_iters (int): The maximum number of iterations. tol (float): The tolerance to check for convergence. Returns: np.ndarray: A NumPy array of shape (k, 2), where each row represents a centroid\'s coordinates. # Randomly initialize the k centroids from the given data points n = data.shape[0] indices = np.random.choice(n, k, replace=False) centroids = data[indices] for _ in range(max_iters): # Assign each data point to the nearest centroid distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2) labels = np.argmin(distances, axis=1) # Compute new centroids new_centroids = np.array([data[labels == i].mean(axis=0) for i in range(k)]) # Check for convergence if np.all(np.linalg.norm(centroids - new_centroids, axis=1) < tol): break centroids = new_centroids return centroids"},{"question":"You are tasked with writing a function `sum_of_evens` that calculates the sum of all even numbers in a list. The function should be able to handle nested lists (lists within lists) of arbitrary depth. **Function Signature:** ```python def sum_of_evens(lst: list) -> int: pass ``` **Requirements:** 1. The function should recursively traverse through any level of nested lists. 2. Sum all the even numbers found within these lists and return the total sum. **Explanation:** 1. **Even numbers** are integers that are divisible by 2 with no remainder. 2. The list may contain nested lists, and the function needs to handle these appropriately by recursively traversing each sublist. **Output:** The function should return an integer representing the sum of all even numbers within the provided list and any nested sublists. **Examples:** ```python sum_of_evens([1, 2, [3, 4, [5, 6], 7], 8]) # Example output # 20 sum_of_evens([[2, 4], [6, [8], 10], 12]) # Example output # 42 sum_of_evens([1, 3, 5]) # Example output # 0 ``` **Hint:** - Use a helper function or a recursive approach to navigate through the nested lists.","solution":"def sum_of_evens(lst): Recursively sums all even numbers in a nested list of arbitrary depth. Parameters: lst (list): A list containing integers and/or nested lists of integers. Returns: int: Sum of all even numbers. total = 0 for elem in lst: if isinstance(elem, list): total += sum_of_evens(elem) # Recursive call for nested list elif isinstance(elem, int) and elem % 2 == 0: total += elem # Add to total if it\'s an even number return total"},{"question":"**Educational Objective**: Understand and practice the concepts of list manipulation, sorting, and custom comparator functions in Python. You are required to write a Python function named `reorder_people` that takes a list of dictionaries representing people and returns the list sorted based on the following criteria: 1. People with the same last name should be grouped together. 2. Within each last name group, people should be sorted in descending order by age. 3. If people have the same last name and age, they should be sorted by their first name in alphabetical order. **Function Signature**: ```python def reorder_people(people: List[Dict[str, Union[str, int]]]) -> List[Dict[str, Union[str, int]]]: ``` **Input**: - `people` (List[Dict[str, Union[str, int]]]): A list of dictionaries where each dictionary represents a person with keys `first_name`, `last_name`, and `age`. **Output**: - A list of dictionaries sorted as described above. **Example**: ```python people = [ {\\"first_name\\": \\"John\\", \\"last_name\\": \\"Doe\\", \\"age\\": 30}, {\\"first_name\\": \\"Jane\\", \\"last_name\\": \\"Smith\\", \\"age\\": 25}, {\\"first_name\\": \\"Alice\\", \\"last_name\\": \\"Doe\\", \\"age\\": 30}, {\\"first_name\\": \\"Bob\\", \\"last_name\\": \\"Smith\\", \\"age\\": 20}, {\\"first_name\\": \\"Charlie\\", \\"last_name\\": \\"Doe\\", \\"age\\": 25}, ] sorted_people = reorder_people(people) print(sorted_people) # Example output: # [ # {\'first_name\': \'Alice\', \'last_name\': \'Doe\', \'age\': 30}, # {\'first_name\': \'John\', \'last_name\': \'Doe\', \'age\': 30}, # {\'first_name\': \'Charlie\', \'last_name\': \'Doe\', \'age\': 25}, # {\'first_name\': \'Jane\', \'last_name\': \'Smith\', \'age\': 25}, # {\'first_name\': \'Bob\', \'last_name\': \'Smith\', \'age\': 20} # ] ``` # Constraints: 1. The input list `people` can contain any number of dictionaries. 2. Each person dictionary will always have the `first_name`, `last_name`, and `age` keys. 3. `first_name` and `last_name` are strings; `age` is an integer. 4. The function should handle ties according to the specified rules efficiently.","solution":"from typing import List, Dict, Union def reorder_people(people: List[Dict[str, Union[str, int]]]) -> List[Dict[str, Union[str, int]]]: return sorted(people, key=lambda x: (x[\'last_name\'], -x[\'age\'], x[\'first_name\']))"},{"question":"Design a function that calculates the overlap area of two rectangles on a 2D plane. Each rectangle is represented by a dictionary with keys \\"x\\", \\"y\\", \\"width\\", and \\"height\\", where (x, y) is the coordinate of the bottom-left corner of the rectangle. The function should be named `calculate_overlap_area(rect1: Dict[str, int], rect2: Dict[str, int]) -> int` and should return the area of the overlapping region. If the rectangles do not overlap, the function should return 0. To determine if two rectangles overlap, you can compare their edges. The edges of the rectangles can be derived from the given properties. Here is the function signature: ```python def calculate_overlap_area(rect1: Dict[str, int], rect2: Dict[str, int]) -> int: # Your code here ``` # Example Usage: ```python rect1 = {\\"x\\": 1, \\"y\\": 1, \\"width\\": 3, \\"height\\": 3} rect2 = {\\"x\\": 2, \\"y\\": 2, \\"width\\": 3, \\"height\\": 3} assert calculate_overlap_area(rect1, rect2) == 4 rect1 = {\\"x\\": 0, \\"y\\": 0, \\"width\\": 2, \\"height\\": 2} rect2 = {\\"x\\": 3, \\"y\\": 3, \\"width\\": 2, \\"height\\": 2} assert calculate_overlap_area(rect1, rect2) == 0 ``` # Explanation: For the first example, the rectangles (1, 1, 3, 3) and (2, 2, 3, 3) overlap in a 2x2 area. For the second example, the rectangles do not overlap, so the function returns 0.","solution":"def calculate_overlap_area(rect1, rect2): Returns the area of the overlapping region of two rectangles. Each rectangle is represented by a dictionary with keys \\"x\\", \\"y\\", \\"width\\", and \\"height\\". # Calculate the rightmost x and topmost y for both rectangles x1_max = rect1[\'x\'] + rect1[\'width\'] y1_max = rect1[\'y\'] + rect1[\'height\'] x2_max = rect2[\'x\'] + rect2[\'width\'] y2_max = rect2[\'y\'] + rect2[\'height\'] # Calculate the overlap coordinates overlap_x_min = max(rect1[\'x\'], rect2[\'x\']) overlap_y_min = max(rect1[\'y\'], rect2[\'y\']) overlap_x_max = min(x1_max, x2_max) overlap_y_max = min(y1_max, y2_max) # Calculate overlap width/height overlap_width = overlap_x_max - overlap_x_min overlap_height = overlap_y_max - overlap_y_min # If the rectangles do not overlap, return 0 if overlap_width <= 0 or overlap_height <= 0: return 0 # Calculate and return overlap area return overlap_width * overlap_height"},{"question":"You are required to write a function named `organize_students_files` which will organize student assignments into nested directories based on the given list of students and their corresponding assignments. Each student has their own directory, and within each student\'s directory, there are subdirectories for each subject they have assignments in. Within each subject directory, there are text files for each assignment containing information about the assignment. The function should take a list of dictionaries where each dictionary represents a student with their name and a list of subjects and assignments. Use the `os.mkdir` method from the Python `os` library to create the directories. Ensure your implementation checks if a directory already exists before trying to create it to avoid any unnecessary errors. Your function will: 1. Create a root directory named `\'Students\'`. 2. For each student in the list, create a subdirectory under the root directory named after the student. 3. For each subject of the student, create a subdirectory within the student\'s directory named after the subject. 4. For each assignment in the subject, create a text file named after the assignment within the subject\'s directory and write basic information about the assignment (student name, subject name, assignment name, and assignment due date) into this file. The structure of the list of students is as follows: ```python students = [ {\'name\': \'Student1\', \'subjects\': {\'Math\': [{\'assignment\': \'Homework1\', \'due_date\': \'01-01-2023\'}]}}, {\'name\': \'Student2\', \'subjects\': {\'Science\': [{\'assignment\': \'LabReport1\', \'due_date\': \'02-01-2023\'}]}}, ] ``` Example usage and expected behavior: ```python students = [ {\'name\': \'Student1\', \'subjects\': {\'Math\': [{\'assignment\': \'Homework1\', \'due_date\': \'01-01-2023\'}]}}, {\'name\': \'Student2\', \'subjects\': {\'Science\': [{\'assignment\': \'LabReport1\', \'due_date\': \'02-01-2023\'}]}}, ] organize_students_files(students) ``` After running the function, the file structure should be: ``` Students/ |-- Student1/ | |-- Math/ | |-- Homework1.txt |-- Student2/ |-- Science/ |-- LabReport1.txt ``` Each `.txt` file should contain the information about the assignment as described.","solution":"import os def organize_students_files(students): root_dir = \'Students\' # Create root directory if not os.path.exists(root_dir): os.mkdir(root_dir) for student in students: student_name = student[\'name\'] student_dir = os.path.join(root_dir, student_name) # Create student\'s directory if not os.path.exists(student_dir): os.mkdir(student_dir) for subject, assignments in student[\'subjects\'].items(): subject_dir = os.path.join(student_dir, subject) # Create directory for the subject if not os.path.exists(subject_dir): os.mkdir(subject_dir) for assignment in assignments: assignment_name = assignment[\'assignment\'] assignment_file_path = os.path.join(subject_dir, f\\"{assignment_name}.txt\\") # Write assignment information to the text file with open(assignment_file_path, \'w\') as file: file_content = f\\"Student: {student_name}nSubject: {subject}nAssignment: {assignment_name}nDue Date: {assignment[\'due_date\']}\\" file.write(file_content)"},{"question":"Write a function that takes a list of words and an integer N as input. The function should return a list of all the possible subsets of the words list that contain exactly N words, sorted in lexicographical order. Each subset should be a list of words sorted in lexicographical order. If there are no valid subsets, the function should return an empty list. You should write self-contained code starting with: ``` from itertools import combinations def generate_subsets(words, N): ``` # Example: ```python generate_subsets([\\"apple\\", \\"banana\\", \\"cherry\\"], 2) ``` should return: ```python [[\'apple\', \'banana\'], [\'apple\', \'cherry\'], [\'banana\', \'cherry\']] ``` # Constraints: - All words in the input list are unique. - 1 <= len(words) <= 10 - 1 <= N <= len(words) - Each word contains only lowercase alphabetical characters.","solution":"from itertools import combinations def generate_subsets(words, N): Generates all subsets of the given words list with exactly N words, sorted in lexicographical order. Parameters: words (list): List of words (strings). N (int): Number of words in each subset. Returns: List of subsets, each of which is a list of words sorted lexicographically. if not words or N > len(words): return [] sorted_words = sorted(words) subsets = list(combinations(sorted_words, N)) return [list(subset) for subset in subsets]"},{"question":"**Context**: In a recent project, you are working on organizing user data stored in JSON files. Each user JSON contains information like `username`, `age`, `country`, and a list of `tags`. You are required to filter and process these files to generate summary statistics and filtered datasets. **Task**: Write a function named `process_user_data` that takes no arguments and performs the following operations: 1. Create a directory named `./ProcessedUsersData/` if it doesn\'t exist. 2. Iterate through each JSON file in the directory `./UserData/`. 3. Read and parse the JSON file. 4. Filter out users who are under the age of 18. 5. For users aged 18 and above, add a field `tagCount` to each user object which represents the number of tags they have. 6. Create a summary statistics JSON file in `./ProcessedUsersData/` containing: - Total number of users processed. - Number of users filtered out. - Average age of the users retained. 7. For each user object retained, write it to a new JSON file named `<username>_processed.json` in the `./ProcessedUsersData/` directory. **Instructions**: - Use the `os` and `json` libraries for file and data handling. - Ensure to handle exceptions for file reading and writing. - Print meaningful progress messages, such as when a file is being processed or a summary has been written. - Assume that supplementary directories and files are correctly structured and valid JSON files are provided in the `./UserData/` directory.","solution":"import os import json def process_user_data(): input_directory = \'./UserData/\' output_directory = \'./ProcessedUsersData/\' if not os.path.exists(output_directory): os.makedirs(output_directory) total_users_processed = 0 users_filtered_out = 0 total_age = 0 retained_users = [] for filename in os.listdir(input_directory): if filename.endswith(\'.json\'): file_path = os.path.join(input_directory, filename) try: with open(file_path, \'r\') as file: user_data = json.load(file) if user_data[\'age\'] < 18: users_filtered_out += 1 else: user_data[\'tagCount\'] = len(user_data[\'tags\']) retained_users.append(user_data) total_age += user_data[\'age\'] total_users_processed += 1 except (json.JSONDecodeError, KeyError) as e: print(f\\"Error processing file {file_path}: {e}\\") if retained_users: average_age = total_age / len(retained_users) else: average_age = 0 summary = { \'totalUsersProcessed\': total_users_processed, \'usersFilteredOut\': users_filtered_out, \'averageAgeOfRetainedUsers\': average_age } summary_file_path = os.path.join(output_directory, \'summary_statistics.json\') with open(summary_file_path, \'w\') as summary_file: json.dump(summary, summary_file, indent=4) for user in retained_users: output_file_path = os.path.join(output_directory, f\\"{user[\'username\']}_processed.json\\") with open(output_file_path, \'w\') as output_file: json.dump(user, output_file, indent=4) print(f\\"Processed {total_users_processed} user(s), filtered out {users_filtered_out} user(s).\\") print(f\\"Summary statistics written to {summary_file_path}.\\")"},{"question":"Simulate the spread of a virus in a population over a period of time. Each person in the population can either be \'susceptible\', \'infected\', or \'recovered\'. Given a population, an initial number of infected individuals, infection rate, and recovery rate, simulate the spread of the virus over a fixed number of time steps. At each time step, each infected individual has a chance to recover based on the recovery rate, and each susceptible individual has a chance to become infected based on the infection rate and number of infected individuals they are in contact with. The contact between individuals can be modeled as random pairings. The function should return a list containing the number of susceptible, infected, and recovered individuals at each time step. You should write self-contained code starting with: ``` import random def simulate_virus_spread(population_size, initial_infected, infection_rate, recovery_rate, time_steps, seed=None): ```","solution":"import random def simulate_virus_spread(population_size, initial_infected, infection_rate, recovery_rate, time_steps, seed=None): if seed is not None: random.seed(seed) population = [\'susceptible\'] * (population_size - initial_infected) population.extend([\'infected\'] * initial_infected) results = [] for _ in range(time_steps): new_population = population[:] for i in range(population_size): if population[i] == \'infected\': if random.random() < recovery_rate: new_population[i] = \'recovered\' elif population[i] == \'susceptible\': infected_contacts = sum(1 for j in range(population_size) if random.random() < infection_rate and population[j] == \'infected\') if infected_contacts > 0: new_population[i] = \'infected\' population = new_population susceptible_count = population.count(\'susceptible\') infected_count = population.count(\'infected\') recovered_count = population.count(\'recovered\') results.append((susceptible_count, infected_count, recovered_count)) return results"},{"question":"You are required to create a library management system. Specifically, you need to implement a function called `check_book_availability` that retrieves and displays the availability status of a book based on the provided ISBN number. The book details are stored in a file named `books.data`, which is a binary file. The books are saved in a list, and each book is represented as an object with at least two attributes: 1. `isbn`: The International Standard Book Number. 2. `available`: A boolean indicating if the book is available for borrowing (True) or not (False). The function should: 1. Check if the `books.data` file exists. 2. If the file exists, load the list of book objects from the file using the `pickle.load` function. 3. Iterate through the list to find a book with the ISBN number that matches the provided input. 4. If a matching book is found, print the availability status. 5. If no matching book is found, print \\"No record found with this ISBN\\". If the file `books.data` does not exist, print \\"No book records available\\". You are specifically required to use the `pickle.load` function to load the list of book objects from the file. **Function Signature:** ```python def check_book_availability(isbn_number: str) -> None: ... ``` **Example Usage:** ```python # Assuming the books.data file exists and has appropriate data check_book_availability(\\"978-3-16-148410-0\\") # Output when book with ISBN number 978-3-16-148410-0 exists and is available: The book is available for borrowing. # Output when book with ISBN number 978-3-16-148410-0 exists and is not available: The book is currently not available. # Output when book with ISBN number 978-3-16-148410-0 does not exist: No record found with this ISBN check_book_availability(\\"978-1-86197-876-9\\") # Output when books.data file does not exist: No book records available ```","solution":"import os import pickle class Book: def __init__(self, isbn, available): self.isbn = isbn self.available = available def check_book_availability(isbn_number: str) -> None: if not os.path.exists(\\"books.data\\"): print(\\"No book records available\\") return with open(\\"books.data\\", \\"rb\\") as file: books = pickle.load(file) for book in books: if book.isbn == isbn_number: if book.available: print(\\"The book is available for borrowing.\\") else: print(\\"The book is currently not available.\\") return print(\\"No record found with this ISBN\\")"},{"question":"You are given a dataset containing information about various employees in a company. Your task is to analyze the dataset using Python and create a function, `analyze_employee_data`, that will: 1. Load the dataset from a CSV file. 2. Perform data cleaning by removing rows where any column has missing or null values. 3. Calculate the average salary by department and add a new column to the dataframe with these averages. 4. Visualize the average salary by department using a bar chart. **Function Signature:** ```python def analyze_employee_data(file_path: str) -> None: pass ``` **Requirements:** 1. **Input:** The function should take one input argument, `file_path`, which is a string representing the file path to the CSV file. 2. **Output:** The function should display a bar chart showing the average salary by department. 3. **Libraries to use:** - `pandas` for loading and handling the dataset. - `matplotlib` for plotting. **Assumptions:** - The CSV file contains at least the following columns: `employee_id`, `name`, `department`, and `salary`. - The `department` column represents the department in which the employee works. - The `salary` column represents the salary of the employee. **Instructions:** 1. Import the necessary libraries (`pandas` and `matplotlib.pyplot`). 2. Load the CSV file using the provided `file_path`. 3. Clean the dataset by removing rows with any missing or null values. 4. Group the data by `department` and calculate the average salary for each department. 5. Add a new column to the dataframe with the calculated average salary for each department. 6. Create a bar chart displaying the average salary by department. 7. Display the bar chart with appropriate labels and a title.","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_employee_data(file_path: str) -> None: # Load the dataset df = pd.read_csv(file_path) # Perform data cleaning by removing rows with any missing values df_cleaned = df.dropna() # Calculate the average salary by department avg_salary_by_dept = df_cleaned.groupby(\'department\')[\'salary\'].mean().reset_index() avg_salary_by_dept.rename(columns={\'salary\': \'avg_salary\'}, inplace=True) # Add the average salary column to the cleaned dataframe df_cleaned = pd.merge(df_cleaned, avg_salary_by_dept, on=\'department\') # Visualize the average salary by department using a bar chart plt.figure(figsize=(10, 6)) plt.bar(avg_salary_by_dept[\'department\'], avg_salary_by_dept[\'avg_salary\']) plt.xlabel(\'Department\') plt.ylabel(\'Average Salary\') plt.title(\'Average Salary by Department\') plt.xticks(rotation=45) plt.show()"},{"question":"Write a function that takes a list of numerical values representing the daily high temperatures over a month and returns the number of days with temperatures above the monthly average. Your function should calculate the average temperature for the month and count how many days exceeded this average. Do not use any external libraries. Ensure your function handles edge cases such as an empty input list. Additional Notes: - The function should return an integer representing the number of days above the average temperature. - You should write self-contained code starting with: ``` def count_days_above_average(temperatures): ```","solution":"def count_days_above_average(temperatures): Returns the number of days with temperatures above the monthly average. Args: temperatures (list of float): A list of daily high temperatures over a month. Returns: int: Number of days with temperatures above the average. if not temperatures: return 0 average_temp = sum(temperatures) / len(temperatures) count = 0 for temp in temperatures: if temp > average_temp: count += 1 return count"},{"question":"Write a function that reads JSON data from a provided URL endpoint, processes the data to extract specific information, and returns the desired output. The function should meet the following requirements: - Fetch the JSON data from the provided URL using the `requests` library. - Extract the values associated with the key \\"items\\". Assume \\"items\\" maps to a list of dictionaries, each containing \\"id\\" and \\"value\\". - Create a new dictionary where the keys are the \\"id\\" values and the values are the \\"value\\" values from the extracted data. - Return the newly created dictionary. - Raise an exception if the URL is unreachable or if the JSON data does not contain the \\"items\\" key. The function should output: dict: A dictionary with keys as \\"id\\" and values as \\"value\\". You should write self-contained code starting with: ``` import requests def fetch_and_process_data(url): ```","solution":"import requests def fetch_and_process_data(url): Fetches JSON data from the provided URL, processes it to extract specific information, and returns a dictionary with keys as \'id\' and values as \'value\'. Args: url (str): The URL endpoint to fetch the JSON data from. Returns: dict: A dictionary with keys as \'id\' and values as \'value\'. Raises: Exception: If the URL is unreachable or if the JSON data does not contain the \'items\' key. try: response = requests.get(url) response.raise_for_status() data = response.json() if \'items\' not in data: raise Exception(\\"The JSON data does not contain the \'items\' key\\") result = {item[\'id\']: item[\'value\'] for item in data[\'items\']} return result except requests.RequestException as e: raise Exception(f\\"Error fetching data from URL: {e}\\") except ValueError: raise Exception(\\"Invalid JSON data received\\")"},{"question":"You are designing a class called `Playlist` that manages a collection of songs. Each song in the playlist should have the following attributes: title, artist, and duration (in seconds). Your `Playlist` class should support the following functionalities: 1. **Initialization**: Create an empty playlist. 2. **Add Song**: Add a song to the playlist by specifying the title, artist, and duration. 3. **Remove Song**: Remove a song from the playlist by its title. 4. **Total Duration**: Return the total duration of all songs in the playlist. 5. **List Songs**: Display a list of all songs in the playlist, showing the title and artist of each song. Implement the `Playlist` class in Python with methods for each of the functionalities listed. Ensure your class handles edge cases, such as trying to remove a song that does not exist, and maintains proper encapsulation of its data.","solution":"class Song: def __init__(self, title, artist, duration): self.title = title self.artist = artist self.duration = duration class Playlist: def __init__(self): self.songs = [] def add_song(self, title, artist, duration): self.songs.append(Song(title, artist, duration)) def remove_song(self, title): for song in self.songs: if song.title == title: self.songs.remove(song) return raise ValueError(\\"Song not found in the playlist.\\") def total_duration(self): return sum(song.duration for song in self.songs) def list_songs(self): return [(song.title, song.artist) for song in self.songs]"},{"question":"Given an array of integers, your task is to implement the Quicksort algorithm to sort the array in ascending order. Quicksort is a classic divide-and-conquer algorithm that works by selecting a \'pivot\' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively. Your function, `quicksort(arr)`, should take one argument: 1. `arr`: A list of integers that needs to be sorted. Your function should not return anything. Instead, it should modify the input list in place to be sorted in ascending order. Here\'s a prototype of the function you need to implement: ```python def quicksort(arr): Sorts an array of integers in ascending order using the Quicksort algorithm :param arr: List of integers to sort (Example: [3, 6, 8, 10, 1, 2, 1]) :return: None, the input list is modified in place def _quicksort(items, low, high): if low < high: # Partition the array by setting the position of the pivot element pivot_index = partition(items, low, high) # Sort the elements before and after partition _quicksort(items, low, pivot_index - 1) _quicksort(items, pivot_index + 1, high) def partition(items, low, high): pivot = items[high] # Choosing the last element as the pivot i = low - 1 for j in range(low, high): if items[j] <= pivot: i += 1 items[i], items[j] = items[j], items[i] items[i + 1], items[high] = items[high], items[i + 1] return i + 1 _quicksort(arr, 0, len(arr) - 1) ```","solution":"def quicksort(arr): Sorts an array of integers in ascending order using the Quicksort algorithm. :param arr: List of integers to sort :return: None, the input list is modified in place def _quicksort(items, low, high): if low < high: # Partition the array by setting the position of the pivot element pivot_index = partition(items, low, high) # Sort the elements before and after partition _quicksort(items, low, pivot_index - 1) _quicksort(items, pivot_index + 1, high) def partition(items, low, high): pivot = items[high] # Choosing the last element as the pivot i = low - 1 # Index of smaller element for j in range(low, high): if items[j] <= pivot: i += 1 items[i], items[j] = items[j], items[i] items[i + 1], items[high] = items[high], items[i + 1] return i + 1 _quicksort(arr, 0, len(arr) - 1)"},{"question":"You are given a list of integers where each integer represents the height of a building. The `sunset_views` function computes the buildings that have a view of the sunset. The buildings are aligned in a straight line and face west. Given the list of building heights, the function should return a list of building indices (0-based) that have an unobstructed view of the sunset (assuming the sunset is to the west). To determine if a building has a sunset view, it must be taller than all the buildings to its right. Implement the function in such a way that its time complexity is O(n). Function signature: ```python def sunset_views(buildings: List[int]) -> List[int]: pass ``` **Example:** ```python print(sunset_views([3, 7, 8, 3, 6, 1])) # Output: [2, 4, 5] print(sunset_views([1, 2, 3, 2, 1])) # Output: [2, 3, 4] print(sunset_views([10, 9, 8, 7])) # Output: [0, 1, 2, 3] ``` **Constraints:** - Each height in `buildings` is a positive integer. - The input list `buildings` is non-empty.","solution":"from typing import List def sunset_views(buildings: List[int]) -> List[int]: Given a list of building heights aligned from east to west, returns the list of indices of buildings that have a view of the sunset. n = len(buildings) result = [] max_height = float(\'-inf\') for i in range(n - 1, -1, -1): if buildings[i] > max_height: result.append(i) max_height = buildings[i] return result[::-1]"},{"question":"You are required to implement a function `compress_string` that compresses a string using basic run-length encoding. The encoding should count consecutive characters and transform the string into a compressed version where each consecutive group of the same character is replaced by the character followed by the count of repetitions. Your function should follow the steps below: 1. Iterate through the input string and count repetitions of each character. 2. Construct a new compressed string where each character is followed by the number of times it repeats consecutively. 3. If the compressed string is not shorter than the original string, return the original string. 4. Handle edge cases such as an empty string or a string with only unique characters. This challenge will help you understand string manipulation and run-length encoding concepts, which are useful in data compression problems. Function signature: ```python def compress_string(s: str) -> str: ``` **Inputs:** - `s`: A string that needs to be compressed. **Outputs:** - A string that represents the compressed version of the input, or the original string if compression does not reduce the length. # Example: Calling the function with the following inputs should produce the corresponding outputs: ```python compress_string(\\"aabcccccaaa\\") ``` Output: ``` \\"a2b1c5a3\\" ``` ```python compress_string(\\"abc\\") ``` Output: ``` \\"abc\\" ``` ```python compress_string(\\"\\") ``` Output: ``` \\"\\" ``` # Constraints: 1. The input string can contain spaces and punctuation along with letter characters. 2. The input string length is between 0 and 10000 characters.","solution":"def compress_string(s: str) -> str: if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) # add the last group compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"You are tasked with implementing a function to calculate the Levenshtein distance between two strings. The Levenshtein distance is a measure of the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one string into another. Implement the function `levenshtein_distance(s1: str, s2: str) -> int`. This function should: - Accept two input strings, `s1` and `s2`. - Use dynamic programming to calculate the Levenshtein distance. - Initialize a matrix where the cell in row `i` and column `j` represents the Levenshtein distance between the first `i` characters of `s1` and the first `j` characters of `s2`. - Populate this matrix using the recurrence relation: - `D[i, j] = D[i-1, j] + 1` if `i > 0` (deletion) - `D[i, j] = D[i, j-1] + 1` if `j > 0` (insertion) - `D[i, j] = D[i-1, j-1] + cost` where `cost = 0` if `s1[i-1] == s2[j-1]` else `cost = 1` (substitution) - Return the value in the bottom-right cell of the matrix, which represents the Levenshtein distance between the entire strings `s1` and `s2`. Ensure your implementation efficiently handles edge cases, such as empty strings or strings of significantly different lengths.","solution":"def levenshtein_distance(s1: str, s2: str) -> int: Calculate the Levenshtein distance between two strings s1 and s2. if s1 == s2: return 0 len_s1, len_s2 = len(s1), len(s2) if len_s1 == 0: return len_s2 if len_s2 == 0: return len_s1 # Initialize the matrix dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)] for i in range(len_s1 + 1): dp[i][0] = i for j in range(len_s2 + 1): dp[0][j] = j for i in range(1, len_s1 + 1): for j in range(1, len_s2 + 1): if s1[i-1] == s2[j-1]: cost = 0 else: cost = 1 dp[i][j] = min(dp[i-1][j] + 1, # Deletion dp[i][j-1] + 1, # Insertion dp[i-1][j-1] + cost) # Substitution return dp[len_s1][len_s2]"},{"question":"You are given an undirected graph represented as an adjacency list. You need to determine the shortest path from a source node to a target node using Breadth-First Search (BFS). If there is no path from the source to the target, the function should return `None`. Write a function `shortest_path(graph, source, target)` that computes the shortest path in an unweighted graph. The function should: 1. Use the BFS algorithm to explore the graph. 2. Maintain a queue to manage the nodes to be explored next. 3. Track the paths from the source node to the current node. 4. Return the shortest path as a list of nodes from the source to the target. # Function Signature ```python def shortest_path(graph: dict, source: int, target: int) -> list: pass ``` # Parameters - `graph`: A dictionary representing the adjacency list of the graph. Keys are node identifiers and values are lists of neighboring nodes. - `source`: An integer representing the starting node. - `target`: An integer representing the destination node. # Returns - A list of integers representing the shortest path from `source` to `target` if such a path exists, otherwise `None`. # Example ```python graph = { 1: [2, 3], 2: [1, 4], 3: [1, 4], 4: [2, 3] } source = 1 target = 4 path = shortest_path(graph, source, target) print(\\"Shortest Path:\\", path) ``` Expected Output: ``` Shortest Path: [1, 2, 4] ``` # Notes - The implementation should handle cyclic graphs without getting stuck in an infinite loop. - The graph is unweighted, so all edges are treated equally when determining the shortest path. - If the source is the same as the target, the path should only include the source node (`[source]`).","solution":"from collections import deque def shortest_path(graph: dict, source: int, target: int) -> list: Finds the shortest path in an unweighted graph using BFS. Parameters: - graph: dict, an adjacency list representation of the graph - source: int, the starting node - target: int, the target node Returns: - list of integers representing the shortest path from source to target, or None if no path exists if source == target: return [source] # Queue for BFS, stores (current_node, path_from_source) queue = deque([(source, [source])]) visited = set() while queue: current, path = queue.popleft() if current in visited: continue visited.add(current) for neighbor in graph.get(current, []): if neighbor == target: return path + [neighbor] else: queue.append((neighbor, path + [neighbor])) return None"},{"question":"You are required to implement the function `cumulative_rainfall` which processes an array of daily rain measurements over a period. The function takes one parameter: `rain_measurements`, a list of integers where each element represents the amount of rainfall recorded on a given day. Your task is to calculate the cumulative amount of rainfall up to each day, resulting in a new list where each element at index `i` represents the total rainfall from the start up to day `i`. For example, given the input `[3, 1, 4, 0, 2, 5]`, the resultant list should be `[3, 4, 8, 8, 10, 15]`. You can use a loop to iterate through the list and compute the cumulative sum. Here is the function signature you should use: ```python def cumulative_rainfall(rain_measurements: list[int]) -> list[int]: ``` Ensure that your implementation is efficient and handles edge cases such as an empty list or list with one element correctly.","solution":"def cumulative_rainfall(rain_measurements: list[int]) -> list[int]: Returns a list of cumulative rainfall up to each day. cumulative = [] total = 0 for rain in rain_measurements: total += rain cumulative.append(total) return cumulative"},{"question":"In this task, you will implement a function named `analyze_word_frequency` that analyzes the frequency of words in a given text and determines the most common words. You will use the `collections.Counter` class to assist in counting the words. # Requirements: 1. **Function Name:** `analyze_word_frequency` 2. **Parameters:** This function takes two parameters: - `text` (str): The input text to be analyzed. - `top_n` (int): A positive integer representing the number of top frequent words to be returned. 3. **Return Type:** The function returns a list of tuples. - Each tuple contains the word and its frequency. - The list should be sorted by frequency in descending order. Words with the same frequency should be sorted alphabetically. # Steps: 1. **Normalize the Text:** - Convert all characters to lowercase to ensure case insensitivity. - Remove any punctuation or special characters to focus on words only. You can use regular expressions for this. 2. **Tokenize the Text:** - Split the text into words based on whitespace. 3. **Analyze Frequency:** - Use `collections.Counter` to count the frequency of each word. 4. **Sort and Select Top Words:** - Sort the words first by frequency (in descending order) and then alphabetically for words with the same frequency. - Return the top `top_n` words as a list of tuples. # Example: ```python text = \\"The quick brown fox jumps over the lazy dog. The fox was very quick.\\" top_n = 3 result = analyze_word_frequency(text, top_n) print(result) # Output might be: [(\'the\', 3), (\'fox\', 2), (\'quick\', 2)] ``` # Implementation Details: - Be sure to handle edge cases such as an empty string or a `top_n` value larger than the number of unique words. - You may assume that the function will not receive `top_n` less than 1. - Use regular expressions (`re` library) to remove punctuation. Write the function `analyze_word_frequency` as described above.","solution":"import re from collections import Counter def analyze_word_frequency(text, top_n): Analyzes the frequency of words in a given text and returns the top_n most common words. Parameters: - text (str): The input text to be analyzed. - top_n (int): A positive integer representing the number of top frequent words to be returned. Returns: - list of tuples: Each tuple contains a word and its frequency, sorted by frequency in descending order, and alphabetically for words with the same frequency. # Convert text to lowercase text = text.lower() # Remove punctuation and special characters text = re.sub(r\'[^ws]\', \'\', text) # Tokenize the text words = text.split() # Count the frequency of each word word_counts = Counter(words) # Sort the words first by frequency (descending) then alphabetically sorted_word_counts = sorted(word_counts.items(), key=lambda item: (-item[1], item[0])) # Return the top_n words return sorted_word_counts[:top_n]"},{"question":"You need to implement a function called `merge_sorted_arrays` that takes two sorted lists of integers and merges them into a single sorted list. The resulting list should be sorted in non-decreasing order. The function should not use Python\'s built-in sorting methods, but instead should merge the two lists by iterating through them. **Function Signature:** `def merge_sorted_arrays(arr1: list, arr2: list) -> list:` **Example:** ```python print(merge_sorted_arrays([1, 3, 5], [2, 4, 6])) # Should output: [1, 2, 3, 4, 5, 6] print(merge_sorted_arrays([1, 2, 2, 3], [2, 3, 4, 5])) # Should output: [1, 2, 2, 2, 3, 3, 4, 5] ```","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted lists into a single sorted list. Parameters: arr1 (list): The first sorted list. arr2 (list): The second sorted list. Returns: list: A merged and sorted list made from the elements of arr1 and arr2. merged = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 while i < len(arr1): merged.append(arr1[i]) i += 1 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"You are tasked with creating a function that parses a log file to calculate the total time spent on different activities for each user. The log file contains entries with timestamps, user IDs, and activity types. You will read the log entries, group them by user ID, and then calculate the total time spent on each activity by each user. Function Name: `calculate_activity_times` Function Signature: `def calculate_activity_times(log_file: str) -> dict:` The function will: 1. Accept a string `log_file` representing the path to a log file. 2. Read the log file line by line, where each line is in the format: `timestamp,user_id,activity,start`, and `timestamp,user_id,activity,end`. 3. For each user ID, track the start and end times of activities to calculate the total time spent on each activity. 4. Return a dictionary where the key is the user ID, and the value is another dictionary with activity types as keys and total time spent on each activity as values. Assume that the log file is well-formed, and each start entry has a corresponding end entry. Here is a sample structure and the requirements for the function: ```python import datetime def calculate_activity_times(log_file: str) -> dict: # Dictionary to store results users = {} with open(log_file, \'r\') as file: for line in file: timestamp, user_id, activity, action = line.strip().split(\',\') timestamp = datetime.datetime.strptime(timestamp, \'%Y-%m-%d %H:%M:%S\') if user_id not in users: users[user_id] = {} if activity not in users[user_id]: users[user_id][activity] = datetime.timedelta() if action == \'start\': users[user_id][f\'{activity}_start\'] = timestamp elif action == \'end\': start_time = users[user_id].pop(f\'{activity}_start\') users[user_id][activity] += (timestamp - start_time) # Convert timedelta objects to total seconds for final output for user_id in users: for activity in list(users[user_id].keys()): if not activity.endswith(\'_start\'): users[user_id][activity] = users[user_id][activity].total_seconds() return users ``` For example, given a log file with the following contents: ``` 2023-10-01 09:00:00,user_1,reading,start 2023-10-01 09:30:00,user_1,reading,end 2023-10-01 10:00:00,user_2,writing,start 2023-10-01 10:45:00,user_2,writing,end ``` The function `calculate_activity_times(\'log_file.txt\')` should return: ```python { \'user_1\': { \'reading\': 1800.0 }, \'user_2\': { \'writing\': 2700.0 } } ```","solution":"import datetime def calculate_activity_times(log_file: str) -> dict: Calculates the total time spent on different activities for each user. Args: log_file (str): Path to the log file containing entries with timestamps, user IDs, activity types, and action (start/end). Returns: dict: A dictionary where the key is the user ID, and the value is another dictionary with activity types as keys and total time spent on each activity as values. users = {} # Step through each line in the log file with open(log_file, \'r\') as file: for line in file: timestamp, user_id, activity, action = line.strip().split(\',\') timestamp = datetime.datetime.strptime(timestamp, \'%Y-%m-%d %H:%M:%S\') if user_id not in users: users[user_id] = {} if activity not in users[user_id]: users[user_id][activity] = datetime.timedelta() if action == \'start\': users[user_id][f\'{activity}_start\'] = timestamp elif action == \'end\': start_time = users[user_id].pop(f\'{activity}_start\') users[user_id][activity] += (timestamp - start_time) # Convert timedelta objects to total seconds for final output for user_id in users: for activity in list(users[user_id].keys()): if not activity.endswith(\'_start\'): users[user_id][activity] = users[user_id][activity].total_seconds() return users"},{"question":"In this exercise, you need to implement a function that calculates various metrics to evaluate a clustering algorithm. The function should compute the silhouette score, Davies-Bouldin index, and Calinski-Harabasz index for the clusters formed. Additionally, the function should summarize key statistics for each cluster, including the number of members, the mean, and the standard deviation of each feature. Implement a function called `evaluate_clustering` that takes the following parameters: - `X`: A Pandas DataFrame containing the features for the dataset. - `labels`: A list or a Pandas Series containing cluster labels for each instance in the dataset. - `cluster_centers`: A Pandas DataFrame where each row represents the center of a cluster. Your function should: 1. Calculate and print the silhouette score of the clustering. 2. Calculate and print the Davies-Bouldin index of the clustering. 3. Calculate and print the Calinski-Harabasz index of the clustering. 4. For each cluster, print the number of members, the mean, and the standard deviation of each feature. You are required to use the sklearn library to calculate the silhouette score, Davies-Bouldin index, and Calinski-Harabasz index. You can assume all necessary libraries such as sklearn, Pandas, NumPy, etc., are already imported and available for use. Here is an example function signature: ```python def evaluate_clustering(X, labels, cluster_centers): # Your implementation here # Example usage: # X: DataFrame of shape (n_samples, n_features) # labels: List or Series of length n_samples # cluster_centers: DataFrame of shape (n_clusters, n_features) evaluate_clustering(X, labels, cluster_centers) ``` Your task is to complete the `evaluate_clustering` function according to the instructions above.","solution":"import pandas as pd from sklearn.metrics import silhouette_score, davies_bouldin_score, calinski_harabasz_score def evaluate_clustering(X, labels, cluster_centers): Evaluate the clustering performance and print various metrics and statistics for the clusters. Parameters: X (pd.DataFrame): DataFrame containing the features for the dataset. labels (list or pd.Series): List or Series containing cluster labels for each instance in the dataset. cluster_centers (pd.DataFrame): DataFrame where each row represents the center of a cluster. # Calculate silhouette score silhouette = silhouette_score(X, labels) print(f\'Silhouette Score: {silhouette}\') # Calculate Davies-Bouldin index davies_bouldin = davies_bouldin_score(X, labels) print(f\'Davies-Bouldin Index: {davies_bouldin}\') # Calculate Calinski-Harabasz index calinski_harabasz = calinski_harabasz_score(X, labels) print(f\'Calinski-Harabasz Index: {calinski_harabasz}\') # Summarize statistics for each cluster for cluster_label in sorted(set(labels)): cluster_data = X[labels == cluster_label] n_members = cluster_data.shape[0] means = cluster_data.mean() std_devs = cluster_data.std() print(f\'Cluster {cluster_label}:\') print(f\' Number of Members: {n_members}\') print(f\' Means: n{means}\') print(f\' Standard Deviations: n{std_devs}\')"},{"question":"# Problem You are given a list of dictionaries, where each dictionary represents sales data for a product by month. Each dictionary has the following keys: - `product`: Name of the product (string). - `monthly_sales`: A list of integers representing monthly sales. Write a function `plot_product_sales(sales_data, product_filter=None, mode=\'total\')` that plots the monthly sales for each product. The function should include legends that clearly label each plotted line and distinguish between different products. The plot should support two modes: - `total`: Plot total monthly sales in absolute values. - `cumulative`: Plot cumulative sales over the months for each product. # Function Signature ```python def plot_product_sales(sales_data, product_filter=None, mode=\'total\'): Plots the monthly sales for each product in sales_data. Parameters: sales_data (list): A list of dictionaries with keys \'product\' and \'monthly_sales\'. product_filter (list, optional): A list of product names to plot. If None, plot all products. Default is None. mode (str, optional): The mode of plotting. \'total\' for total monthly sales, \'cumulative\' for cumulative sales. Default is \'total\'. Returns: None: The function should plot the graph. ``` # Input - `sales_data`: List of dictionaries where each dictionary has keys `product` and `monthly_sales`. - `product_filter`: A list of strings representing product names to plot. If None, plot all products. Default value is None. - `mode`: A string that specifies the mode for the plot (either \'total\' for total monthly sales or \'cumulative\' for cumulative sales). Default value is \'total\'. # Output - A plot showing the monthly sales with proper legends for each line. # Requirements 1. Use `matplotlib` for plotting. 2. Use `matplotlib.pyplot.legend` to add legends to your plot. 3. Ensure clearly labeled legends for each product showing in the plot. # Example Assume you have sales data as follows: ```python sales_data = [ {\'product\': \'Product A\', \'monthly_sales\': [10, 20, 30, 40, 50]}, {\'product\': \'Product B\', \'monthly_sales\': [5, 10, 15, 20, 25]}, {\'product\': \'Product C\', \'monthly_sales\': [2, 4, 6, 8, 10]} ] ``` Example usage: ```python # Plot total monthly sales for all products plot_product_sales(sales_data) # Plot cumulative sales for Product A and Product B plot_product_sales(sales_data, product_filter=[\'Product A\', \'Product B\'], mode=\'cumulative\') ``` The output should render a plot with clearly labeled legends showing the monthly sales for the specified products either in total or cumulative mode, as specified.","solution":"import matplotlib.pyplot as plt def plot_product_sales(sales_data, product_filter=None, mode=\'total\'): Plots the monthly sales for each product in sales_data. Parameters: sales_data (list): A list of dictionaries with keys \'product\' and \'monthly_sales\'. product_filter (list, optional): A list of product names to plot. If None, plot all products. Default is None. mode (str, optional): The mode of plotting. \'total\' for total monthly sales, \'cumulative\' for cumulative sales. Default is \'total\'. Returns: None: The function should plot the graph. for entry in sales_data: product = entry[\'product\'] sales = entry[\'monthly_sales\'] if product_filter and product not in product_filter: continue if mode == \'cumulative\': sales = [sum(sales[:i+1]) for i in range(len(sales))] plt.plot(sales, label=product) plt.xlabel(\'Month\') plt.ylabel(\'Sales\') plt.legend() plt.title(f\'Monthly Sales ({mode.capitalize()})\') plt.show()"},{"question":"**Background:** Sorting algorithms are fundamental to computer science and have various applications in data collation and management. One of the key sorting algorithms is **Merge Sort**, which uses the divide-and-conquer approach to efficiently sort an array. This problem focuses on implementing the Merge Sort algorithm and ensuring it works correctly for sorting a list of integers. **Problem Statement:** Write a Python function called `merge_sort` that sorts a given list of integers in ascending order using the Merge Sort algorithm. **Function Signature:** ```python def merge_sort(arr): # arr: a list of integers to be sorted. pass ``` **Instructions:** 1. If the given list is empty or contains a single element, return the list as it is already sorted. 2. Divide the list into two halves. 3. Recursively sort each half. 4. Merge the two sorted halves into a single sorted list. 5. Return the sorted list. **Example:** ```python arr = [38, 27, 43, 3, 9, 82, 10] result = merge_sort(arr) print(result) # This should print [3, 9, 10, 27, 38, 43, 82] ``` **Note:** - Ensure that the function is implemented using the divide-and-conquer approach. - The merge function should merge two sorted lists to produce a sorted list. - Avoid using built-in Python sorting functions (e.g., `sorted`, `list.sort()`). Implement the `merge_sort` function by breaking the problem into smaller parts, sorting them, and then combining the results.","solution":"def merge_sort(arr): Sorts a list of integers in ascending order using the Merge Sort algorithm. if len(arr) <= 1: return arr # Divide the list into two halves mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) # Merge the sorted halves return merge(left_half, right_half) def merge(left, right): Merges two sorted lists into a single sorted list. result = [] left_index, right_index = 0, 0 # Traverse both lists and append the smaller element to result while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: result.append(left[left_index]) left_index += 1 else: result.append(right[right_index]) right_index += 1 # Append the remaining elements from the left half (if any) result.extend(left[left_index:]) # Append the remaining elements from the right half (if any) result.extend(right[right_index:]) return result"},{"question":"Write a Python function that accepts a list of file paths and a string representing a specific content pattern. The function should search through the given files, identify which files contain the pattern, and return a list of the files that match. If no files contain the pattern, return an empty list. Assume all files are text files and the pattern is a simple substring. You should write self-contained code starting with: ``` import os def search_files(file_paths, pattern): ```","solution":"import os def search_files(file_paths, pattern): Searches for a specific pattern in a list of file paths and returns a list of files that contain the pattern. Parameters: - file_paths: List of file paths (strings) - pattern: The content pattern to search for (string) Returns: - List of file paths that contain the pattern (strings) matching_files = [] for file_path in file_paths: if os.path.isfile(file_path): with open(file_path, \'r\') as file: contents = file.read() if pattern in contents: matching_files.append(file_path) return matching_files"},{"question":"You need to write a function that merges two given lists of integers into one list, without using any built-in Python list methods such as `extend` or `+` operator. The merged list should maintain the order of the elements as they appear in the original lists. Your function should be named `merge_lists`. Here are the steps your function needs to follow: 1. Iterate through the first list and append each element to the result list. 2. Iterate through the second list and append each element to the result list. 3. Return the merged list. # Constraints: - You are not allowed to use any list concatenation operators or methods (e.g., `extend`, `+`). # Function Signature: ```python def merge_lists(list1: list[int], list2: list[int]) -> list[int]: ``` # Examples: Example 1: ```python list1 = [1, 3, 5] list2 = [2, 4, 6] print(merge_lists(list1, list2)) # Output: [1, 3, 5, 2, 4, 6] ``` Example 2: ```python list1 = [] list2 = [7, 8, 9] print(merge_lists(list1, list2)) # Output: [7, 8, 9] ``` Example 3: ```python list1 = [10, 20] list2 = [] print(merge_lists(list1, list2)) # Output: [10, 20] ```","solution":"def merge_lists(list1: list[int], list2: list[int]) -> list[int]: Merges two lists of integers into one list, preserving the order of the elements. merged_list = [] for elem in list1: merged_list.append(elem) for elem in list2: merged_list.append(elem) return merged_list"},{"question":"You are required to write a function called `count_palindromes` that will read a text file containing a list of words and count the number of palindromes. A palindrome is a word that reads the same backward as forward (e.g., \\"level\\" or \\"radar\\"). The function should: 1. Take as input the filename of the text file. 2. Read the file and extract all the words. Assume words are separated by whitespace or punctuation marks. 3. Check each word to determine if it is a palindrome. 4. Return the count of palindromic words found in the file. **Function Signature:** ```python def count_palindromes(filename: str) -> int: ``` # Constraints: - The filename provided will always be a string and the file it references will always be accessible and formatted correctly. - Words can be considered case-insensitively (e.g., \\"Level\\" should be considered a palindrome). - Assume that words in the text file may contain alphabetic characters only. # Example: Suppose the file `text.txt` contains the following text: ``` Radar book level racecar sample Civic bib ``` ```python count_palindromes(\\"text.txt\\") ``` After the function call, the result should be `5` because the palindromic words are: \\"Radar\\", \\"level\\", \\"racecar\\", \\"Civic\\", \\"bib\\" (case-insensitive).","solution":"def count_palindromes(filename: str) -> int: Counts the number of palindromic words in the given file. Arguments: filename -- the name of the file to read Returns: The number of palindromic words import re def is_palindrome(word: str) -> bool: word = word.lower() return word == word[::-1] with open(filename, \'r\') as file: text = file.read() words = re.findall(r\'bw+b\', text) palindrome_count = sum(1 for word in words if is_palindrome(word)) return palindrome_count"},{"question":"In this problem, you are asked to create a Python function named `find_median_rgb` that calculates the median RGB values from a given list of colors. Each color is represented as a tuple containing three integers (R, G, B), where each integer is in the range [0, 255]. The median should be computed separately for each color channel (R, G, and B). # Function Signature ```python def find_median_rgb(color_list): ``` # Parameters - `color_list`: A list of tuples, where each tuple contains three integers representing R, G, and B values. # Returns - A tuple of three integers representing the median R, G, and B values. # Example Usage ```python color_list = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (128, 128, 128)] median_rgb = find_median_rgb(color_list) print(median_rgb) # Output: (64, 64, 64) ``` # Requirements - Your function must handle cases where the number of colors in the input list is odd or even. - You must compute the median independently for each of the R, G, and B channels. - Assume `color_list` will have at least one color tuple. - Properly handle any potential edge cases, such as all colors being the same.","solution":"def find_median_rgb(color_list): Calculates the median RGB values from a given list of colors. Args: color_list (list of tuples): List of RGB tuples. Returns: tuple: A tuple containing the median R, G, and B values. if not color_list: raise ValueError(\\"The color list must contain at least one color.\\") # Separate the R, G, and B values into individual lists reds = [color[0] for color in color_list] greens = [color[1] for color in color_list] blues = [color[2] for color in color_list] # Function to find the median of a list def median(lst): n = len(lst) if n == 0: raise ValueError(\\"The list must contain at least one element.\\") sorted_lst = sorted(lst) midpoint = n // 2 if n % 2 == 1: # If odd, return the middle element return sorted_lst[midpoint] else: # If even, return the average of the middle elements return (sorted_lst[midpoint - 1] + sorted_lst[midpoint]) // 2 # Find the median for each color channel median_red = median(reds) median_green = median(greens) median_blue = median(blues) return (median_red, median_green, median_blue)"},{"question":"Write a function named `generate_playlist` that takes a list of songs and an integer representing the desired total duration of the playlist in seconds. Each song is a tuple containing the song\'s title (a string) and its duration in seconds (an integer). The function should select a combination of songs that best matches the desired total duration without exceeding it. If multiple combinations have the same total duration, return any one of them. If no combination can match the desired total duration, return an empty list. The function should follow this signature: ```python def generate_playlist(songs, total_duration): # Your code logic goes here ``` # Example: ```python songs = [ (\\"Song A\\", 180), (\\"Song B\\", 150), (\\"Song C\\", 200), (\\"Song D\\", 120), ] total_duration = 450 generate_playlist(songs, total_duration) ``` # Possible output: ```python [(\\"Song A\\", 180), (\\"Song B\\", 150), (\\"Song D\\", 120)] ```","solution":"def generate_playlist(songs, total_duration): Returns a list of songs that best matches the desired total duration without exceeding it. :param songs: List of tuples, each tuple contains (song_title, duration_in_seconds) :param total_duration: Integer representing the desired total duration in seconds :return: List of chosen songs (each song is represented as a tuple) from itertools import combinations best_playlist = [] best_duration = 0 # Generate all combinations of songs and find the one with the best duration for r in range(1, len(songs) + 1): for playlist in combinations(songs, r): duration = sum(song[1] for song in playlist) if best_duration < duration <= total_duration: best_duration = duration best_playlist = playlist return list(best_playlist)"},{"question":"# Problem Statement Create a function that downloads a text file from a given URL and computes the frequency of each word in the file. Return the top N most frequent words along with their counts. # Function Specification You need to implement a function named `top_n_frequent_words` that performs the following: 1. **Download File**: Use the `requests` library to download a text file from a given URL and read its content. 2. **Process Text**: Clean and split the text into individual words. You should handle punctuation and case sensitivity, treating \\"Word\\" and \\"word\\" as the same word. 3. **Compute Frequency**: Compute the frequency of each word in the text. 4. **Determine Top N Words**: Return the top N most frequent words and their counts. # Requirements - You **must** use the `requests` library to download the text file and the `collections.Counter` class from the `collections` module to compute word frequencies. - Ensure that your function handles potential issues, such as network errors, by adding appropriate error handling. - The function should be case-insensitive, and punctuation marks should not be counted as part of the words. # Function Definition ```python def top_n_frequent_words(url, n): # Your implementation here ``` # Example Usage ```python url = \\"https://www.gutenberg.org/files/11/11-0.txt\\" # Example URL to a text file n = 5 top_words = top_n_frequent_words(url, n) print(top_words) # This should print the top 5 most frequent words and their counts ``` You can assume the text file may contain a large amount of text, so consider performance and usability in your implementation.","solution":"import requests from collections import Counter import re def top_n_frequent_words(url, n): Downloads a text file from a given URL, computes the frequency of each word, and returns the top N most frequent words along with their counts. try: response = requests.get(url) response.raise_for_status() text = response.text # Normalize the text to lowercase and remove punctuation text = re.sub(r\'[^ws]\', \'\', text.lower()) words = text.split() # Compute word frequencies word_counts = Counter(words) # Get the top N most frequent words frequent_words = word_counts.most_common(n) return frequent_words except requests.RequestException as e: print(f\\"An error occurred while fetching the file: {e}\\") return []"},{"question":"Given a string of words separated by spaces, write a function that reverses the letters in each word but retains the original word order. If the string is empty, return an empty string. For example, if the input string is \\"hello world\\", the output should be \\"olleh dlrow\\". You should write self-contained code starting with: ``` def reverse_letters_in_words(input_string): ```","solution":"def reverse_letters_in_words(input_string): Reverses the letters in each word of a string while retaining the original word order. if not input_string: return \\"\\" words = input_string.split(\' \') reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"Given a list of integers, write a function that returns a dictionary with the longest increasing subsequence (LIS) in the list. The dictionary should have the length of the LIS as the key and the LIS itself as the value. The function should output: - a dictionary where the key is an integer (length of the LIS) and the value is a list (the LIS). You should write self-contained code starting with: ``` def find_longest_increasing_subsequence(arr): ```","solution":"def find_longest_increasing_subsequence(arr): Returns a dictionary with the length of the longest increasing subsequence (LIS) as the key and the LIS itself as the value. if not arr: return {0: []} n = len(arr) # LIS[i] will hold the longest increasing subsequence ending at index i LIS = [[num] for num in arr] for i in range(1, n): for j in range(i): if arr[i] > arr[j] and len(LIS[i]) < len(LIS[j]) + 1: LIS[i] = LIS[j] + [arr[i]] # Find the longest increasing subsequence longest_lis = max(LIS, key=len) return {len(longest_lis): longest_lis}"},{"question":"Extract and tally the frequency of each unique word in a given text file, ignoring case sensitivity and excluding punctuation. Return the results as a dictionary where the keys are words and the values are their respective counts. If the file does not exist, raise a FileNotFoundError. The function should output with: dict: A dictionary containing word frequency counts. You should write self-contained code starting with: ``` import os import string def word_count(file_path): ```","solution":"import os import string def word_count(file_path): Extract and tally the frequency of each unique word in a given text file, ignoring case sensitivity and excluding punctuation. Return the results as a dictionary where the keys are words and the values are their respective counts. :param file_path: Path to the text file :return: Dictionary with word counts :raises FileNotFoundError: If the file does not exist if not os.path.exists(file_path): raise FileNotFoundError(f\\"The file {file_path} does not exist.\\") word_freq = {} with open(file_path, \'r\', encoding=\'utf-8\') as file: content = file.read().lower() translator = str.maketrans(\'\', \'\', string.punctuation) content = content.translate(translator) words = content.split() for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 return word_freq"},{"question":"You are required to create a function, `process_and_plot_timeseries`, which takes in a Pandas Series `data_series` representing a time series of numerical data, and an integer `window_size` for smoothing the series using a rolling mean. The `process_and_plot_timeseries` function should: 1. Compute the rolling mean of the `data_series` using the provided `window_size`. 2. Plot the original time series data in blue and the smoothed (rolling mean) series in red using `matplotlib`. 3. Label the x-axis as \\"Time\\" and the y-axis as \\"Value\\". 4. Add a legend to the plot to differentiate between the original data and the smoothed data. Here\'s a brief example of how the function is expected to be used (you can assume the `time_series` Series already exists): ```python import matplotlib.pyplot as plt import pandas as pd time_series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) process_and_plot_timeseries(data_series=time_series, window_size=3) plt.show() ``` # Constraints: - The `window_size` should be a positive integer. - The legend labels should be \\"Original Data\\" for the raw time series and \\"Smoothed Data\\" for the rolling mean. # Function Signature: ```python def process_and_plot_timeseries(data_series: pd.Series, window_size: int) -> None: ```","solution":"import matplotlib.pyplot as plt import pandas as pd def process_and_plot_timeseries(data_series: pd.Series, window_size: int) -> None: Computes the rolling mean of the given time series data and plots both the original and the smoothed data. Parameters: data_series (pd.Series): The input time series data. window_size (int): The window size for computing the rolling mean. if window_size <= 0: raise ValueError(\\"window_size must be a positive integer\\") rolling_mean = data_series.rolling(window=window_size).mean() plt.figure(figsize=(10, 5)) plt.plot(data_series, label=\'Original Data\', color=\'blue\') plt.plot(rolling_mean, label=\'Smoothed Data\', color=\'red\') plt.xlabel(\'Time\') plt.ylabel(\'Value\') plt.legend() plt.title(\'Original Data vs Smoothed Data\') plt.show()"},{"question":"Create a Python function to simulate a simple banking system. The system should allow for user account creation, balance checking, deposits, and withdrawals. The user accounts should be stored in a dictionary where keys are usernames (strings) and values are dictionaries with keys \\"balance\\" and \\"pin\\". The balance should start at 0 for new accounts. Users should provide a username and pin to perform transactions. The function should have the following methods: 1. `create_account(username, pin)`: This method should create a new account with the given username and pin. If the username already exists, raise a ValueError. 2. `check_balance(username, pin)`: This method should return the current balance for the given username if the pin is correct. If the username does not exist or the pin is incorrect, raise a ValueError. 3. `deposit(username, pin, amount)`: This method should add the given amount to the user\'s balance if the pin is correct. If the username does not exist, the pin is incorrect, or the amount is not positive, raise a ValueError. 4. `withdraw(username, pin, amount)`: This method should subtract the given amount from the user\'s balance if the pin is correct and there\'s enough balance. If the username does not exist, the pin is incorrect, the amount is not positive, or there\'s insufficient balance, raise a ValueError. You should write self-contained code starting with: ``` class BankSystem: def __init__(self): self.accounts = {} def create_account(self, username, pin): if username in self.accounts: raise ValueError(\\"Account already exists.\\") self.accounts[username] = {\\"balance\\": 0, \\"pin\\": pin} def check_balance(self, username, pin): if username not in self.accounts or self.accounts[username][\\"pin\\"] != pin: raise ValueError(\\"Invalid username or pin.\\") return self.accounts[username][\\"balance\\"] def deposit(self, username, pin, amount): if username not in self.accounts or self.accounts[username][\\"pin\\"] != pin: raise ValueError(\\"Invalid username or pin.\\") if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.accounts[username][\\"balance\\"] += amount def withdraw(self, username, pin, amount): if username not in self.accounts or self.accounts[username][\\"pin\\"] != pin: raise ValueError(\\"Invalid username or pin.\\") if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if self.accounts[username][\\"balance\\"] < amount: raise ValueError(\\"Insufficient balance.\\") self.accounts[username][\\"balance\\"] -= amount ```","solution":"class BankSystem: def __init__(self): self.accounts = {} def create_account(self, username, pin): if username in self.accounts: raise ValueError(\\"Account already exists.\\") self.accounts[username] = {\\"balance\\": 0, \\"pin\\": pin} def check_balance(self, username, pin): if username not in self.accounts or self.accounts[username][\\"pin\\"] != pin: raise ValueError(\\"Invalid username or pin.\\") return self.accounts[username][\\"balance\\"] def deposit(self, username, pin, amount): if username not in self.accounts or self.accounts[username][\\"pin\\"] != pin: raise ValueError(\\"Invalid username or pin.\\") if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.accounts[username][\\"balance\\"] += amount def withdraw(self, username, pin, amount): if username not in self.accounts or self.accounts[username][\\"pin\\"] != pin: raise ValueError(\\"Invalid username or pin.\\") if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if self.accounts[username][\\"balance\\"] < amount: raise ValueError(\\"Insufficient balance.\\") self.accounts[username][\\"balance\\"] -= amount"},{"question":"Suppose you are working with a matrix of integers and you need to shift the elements upwards by a given number of rows. The elements that are shifted past the top should appear at the bottom of their respective columns (i.e., the operation should be cyclic). Create a function named `shift_matrix_up` that performs the following operations: 1. Accepts a 2D numpy array `matrix` of integers and an integer `num_shifts`. 2. Shifts the elements in the `matrix` upwards by `num_shifts` rows. 3. Elements that are shifted past the top should be reintroduced at the bottom in the same column. The function should return the updated matrix. Use the following `numpy` API in the implementation: - `numpy.roll` Requirements: - Function signature: `def shift_matrix_up(matrix: np.ndarray, num_shifts: int) -> np.ndarray:` - You must use `numpy.roll` to accomplish the cyclic shifting. # Example Input: ```python matrix = np.array([[1, 2], [3, 4], [5, 6], [7, 8]]) num_shifts = 2 ``` Output: ```python array([[5, 6], [7, 8], [1, 2], [3, 4]]) ``` Explanation: The elements are shifted up by 2 rows, causing the first two rows to appear at the bottom of the matrix.","solution":"import numpy as np def shift_matrix_up(matrix: np.ndarray, num_shifts: int) -> np.ndarray: Shifts the elements in the matrix upwards by num_shifts rows in a cyclic manner. Parameters: matrix (np.ndarray): 2D array of integers. num_shifts (int): Number of rows to shift the elements upwards. Returns: np.ndarray: The updated matrix after shifting the elements. return np.roll(matrix, -num_shifts, axis=0)"},{"question":"You are tasked with designing a function named `validate_json_data` that reads and validates JSON configuration data. The JSON file contains multiple configuration items, each of which needs to be validated based on predefined rules. Here are the steps your function should follow: 1. **Print Start Message**: Print a message indicating that the JSON data validation has started, with the name of the JSON file. 2. **Read the JSON File**: Read the JSON file into a variable. 3. **Validate JSON Structure**: Ensure the JSON data is a list of dictionaries. Raise a `ValueError` if the structure is incorrect. 4. **Validate Each Configuration Item**: For each item in the JSON data, check: 1. **Keys Presence**: Ensure each dictionary contains the keys `name`, `type`, and `value`. 2. **Valid Data Types**: - `name` should be a non-empty string. - `type` should be one of `[\\"string\\", \\"integer\\", \\"boolean\\"]`. - `value` should match the type specified in the `type` key. 5. **Print Success Message**: Print a message indicating that all configuration items are valid. You must use the `json` library for handling JSON files. The JSON file is assumed to be located at the provided file path. The function, `validate_json_data`, should have the following signature: ```python def validate_json_data(file_path: str) -> None: ... ``` Parameters: - `file_path` (str): The path to the JSON file to be validated. [Example of a valid JSON file] ```json [ {\\"name\\": \\"config1\\", \\"type\\": \\"string\\", \\"value\\": \\"some string\\"}, {\\"name\\": \\"config2\\", \\"type\\": \\"integer\\", \\"value\\": 42}, {\\"name\\": \\"config3\\", \\"type\\": \\"boolean\\", \\"value\\": true} ] ``` [Example Usage] ```python validate_json_data(\\"/path/to/config.json\\") # Expected Output: # Validating JSON data from config.json... # All configuration items are valid. ```","solution":"import json def validate_json_data(file_path: str) -> None: print(f\\"Validating JSON data from {file_path}...\\") # Read the JSON file with open(file_path, \'r\') as file: data = json.load(file) # Validate JSON structure if not isinstance(data, list) or not all(isinstance(item, dict) for item in data): raise ValueError(\\"JSON structure is invalid. It should be a list of dictionaries.\\") # Validate each configuration item for item in data: if not all(key in item for key in [\\"name\\", \\"type\\", \\"value\\"]): raise ValueError(f\\"Configuration item {item} is missing required keys.\\") if not isinstance(item[\\"name\\"], str) or not item[\\"name\\"]: raise ValueError(f\\"Invalid name in configuration item {item}. Name must be a non-empty string.\\") if item[\\"type\\"] not in [\\"string\\", \\"integer\\", \\"boolean\\"]: raise ValueError(f\\"Invalid type in configuration item {item}. Type must be \'string\', \'integer\', or \'boolean\'.\\") if (item[\\"type\\"] == \\"string\\" and not isinstance(item[\\"value\\"], str)) or (item[\\"type\\"] == \\"integer\\" and not isinstance(item[\\"value\\"], int)) or (item[\\"type\\"] == \\"boolean\\" and not isinstance(item[\\"value\\"], bool)): raise ValueError(f\\"Invalid value type in configuration item {item}.\\") print(\\"All configuration items are valid.\\")"},{"question":"You are required to write a Python function named `simulate_dice_rolls` that simulates rolling two six-sided dice and performs a statistical analysis on the results. This function should take one integer parameter: `rolls`. The `simulate_dice_rolls` function should operate as follows: 1. Simulate rolling two six-sided dice `rolls` times. 2. Track the sum of the two dice for each roll. 3. Calculate the frequency of each possible dice sum (2 through 12). 4. Compute and print the expected and actual probability for each dice sum to appear. 5. Calculate and print the lower quartile, median, and upper quartile of the frequencies of the sums. The statistical measures (lower quartile, median, upper quartile) should be calculated using a helper function `calculate_quartiles`, which will be provided for you. In addition to your implementation, use the following libraries: - The `random.randint` function to simulate dice rolls. - The `statistics.median` function to calculate the median after computing the expected frequencies. Write the `simulate_dice_rolls` function based on this template: ```python def simulate_dice_rolls(rolls: int) -> None: from random import randint from statistics import median def calculate_quartiles(values): # Given list of values, this function should return the lower quartile, # median, and upper quartile (Placeholder function, you can assume it\'s implemented) pass frequencies = {i: 0 for i in range(2, 13)} for _ in range(rolls): dice_sum = randint(1, 6) + randint(1, 6) frequencies[dice_sum] += 1 print(\\"nRESULTS:n\\") print(f\\"{\'Sum\':>4} | {\'Actual Freq\':>11} | {\'Expected Prob\':>14} | {\'Actual Prob\':>11}\\") for dice_sum in range(2, 13): actual_prob = frequencies[dice_sum] / rolls if dice_sum <= 7: expected_prob = (dice_sum - 1) / 36 else: expected_prob = (13 - dice_sum) / 36 print(f\\"{dice_sum:>4} | {frequencies[dice_sum]:>11} | {expected_prob:>14.6f} | {actual_prob:>11.6f}\\") lower_quartile, med, upper_quartile = calculate_quartiles(list(frequencies.values())) print(f\\"nLower quartile of frequencies: {lower_quartile}\\") print(f\\"Median of frequencies : {med}\\") print(f\\"Upper quartile of frequencies: {upper_quartile}\\") # You must implement `simulate_dice_rolls` using the requirements above. ```","solution":"def simulate_dice_rolls(rolls: int) -> None: from random import randint from statistics import median def calculate_quartiles(values): Calculates the lower quartile, median, and upper quartile for a list of values. values.sort() n = len(values) mid = n // 2 if n % 2 == 0: lower_q = median(values[:mid]) upper_q = median(values[mid:]) else: lower_q = median(values[:mid]) upper_q = median(values[mid+1:]) return lower_q, median(values), upper_q # Initialize frequency dictionary for sums from 2 to 12 frequencies = {i: 0 for i in range(2, 13)} # Simulate dice rolls and update frequencies for _ in range(rolls): dice_sum = randint(1, 6) + randint(1, 6) frequencies[dice_sum] += 1 # Print Results print(\\"nRESULTS:n\\") print(f\\"{\'Sum\':>4} | {\'Actual Freq\':>11} | {\'Expected Prob\':>14} | {\'Actual Prob\':>11}\\") for dice_sum in range(2, 13): actual_prob = frequencies[dice_sum] / rolls if dice_sum <= 7: expected_prob = (dice_sum - 1) / 36 else: expected_prob = (13 - dice_sum) / 36 print(f\\"{dice_sum:>4} | {frequencies[dice_sum]:>11} | {expected_prob:>14.6f} | {actual_prob:>11.6f}\\") lower_quartile, med, upper_quartile = calculate_quartiles(list(frequencies.values())) print(f\\"nLower quartile of frequencies: {lower_quartile}\\") print(f\\"Median of frequencies : {med}\\") print(f\\"Upper quartile of frequencies: {upper_quartile}\\")"},{"question":"Implement a function to generate a cosine signal and plot it. The function should produce a cosine wave based on a specified frequency, sample rate, and duration. It should then plot the resultant signal over the given time period. The function should output: - `time` (numpy.ndarray): The time values for the generated signal. - `signal` (numpy.ndarray): The computed cosine signal values. - `ax` (matplotlib.axes._axes.Axes): The Axes object of the plotted cosine signal. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt # Constants defining the frequency in Hz, sample rate, and the duration in seconds FREQUENCY = 3 SAMPLE_RATE = 800 DURATION = 3 def cosine_signal(frequency=FREQUENCY, sample_rate=SAMPLE_RATE, duration=DURATION): t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False) signal = np.cos(2 * np.pi * frequency * t) fig, ax = plt.subplots() ax.plot(t, signal) ax.set_title(\'Cosine Wave\') ax.set_xlabel(\'Time [s]\') ax.set_ylabel(\'Amplitude\') plt.show() return t, signal, ax ```","solution":"import numpy as np import matplotlib.pyplot as plt # Constants defining the frequency in Hz, sample rate, and the duration in seconds FREQUENCY = 3 SAMPLE_RATE = 800 DURATION = 3 def cosine_signal(frequency=FREQUENCY, sample_rate=SAMPLE_RATE, duration=DURATION): t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False) signal = np.cos(2 * np.pi * frequency * t) fig, ax = plt.subplots() ax.plot(t, signal) ax.set_title(\'Cosine Wave\') ax.set_xlabel(\'Time [s]\') ax.set_ylabel(\'Amplitude\') plt.show() return t, signal, ax"},{"question":"You need to write a function that takes a list of integers and returns a new list that contains all the elements of the original list, but with each element squared. This exercise aims to help you understand basic list operations and how to use list comprehensions in Python. Here is the signature of the function you need to implement: ```python def square_elements(input_list: List[int]) -> List[int]: Returns a list where each element is the square of the elements in the input list. Parameters: input_list (List[int]): A list of integers Returns: List[int]: A list of squared integers ``` **Requirements:** 1. Iterate over the input list and compute the square of each element. 2. Utilize a list comprehension for a more concise implementation. 3. Return the new list containing the squared values. **Example Usage:** ```python >>> square_elements([1, 2, 3, 4]) [1, 4, 9, 16] >>> square_elements([-1, -2, -3, -4]) [1, 4, 9, 16] ```","solution":"from typing import List def square_elements(input_list: List[int]) -> List[int]: Returns a list where each element is the square of the elements in the input list. Parameters: input_list (List[int]): A list of integers Returns: List[int]: A list of squared integers return [x ** 2 for x in input_list]"},{"question":"Create a function that generates a bar plot representing the frequency of randomly generated categorical data. Use random data as input, categorize them into a fixed set of categories, and count the occurrences of each category. The bar plot should display the categories on the x-axis and their frequencies on the y-axis. The function should output: figure (matplotlib.figure.Figure): The Figure object containing the plot. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from collections import Counter def task_func(num_points=100, categories=None, random_seed=42): ```","solution":"import numpy as np import matplotlib.pyplot as plt from collections import Counter def task_func(num_points=100, categories=None, random_seed=42): Generates a bar plot representing the frequency of randomly generated categorical data. Args: num_points (int): Number of data points to generate. categories (list): List of categories to randomly assign data points to. random_seed (int): Seed for the random number generator. Returns: figure (matplotlib.figure.Figure): The Figure object containing the plot. if categories is None: categories = [\'A\', \'B\', \'C\', \'D\', \'E\'] np.random.seed(random_seed) data = np.random.choice(categories, num_points) counts = Counter(data) fig, ax = plt.subplots() ax.bar(counts.keys(), counts.values()) ax.set_xlabel(\'Categories\') ax.set_ylabel(\'Frequency\') ax.set_title(\'Frequency of Randomly Generated Categorical Data\') return fig"},{"question":"Write a function `compute_max_profit` that calculates the maximum profit that can be achieved from a list of daily stock prices, given you are allowed to make multiple transactions (i.e., buy one and sell one share of the stock multiple times). Given: - An integer `n` indicating the number of days. - An array `prices` of length `n` where `prices[i]` represents the stock price on the ith day. The function should: 1. Traverse through the list of prices. 2. Track the potential profit by summing up the difference between the current day price and the previous day price if the current day price is higher than the previous day price. 3. Return the total accumulated profit. Here\'s the signature of the function you need to implement: ```python def compute_max_profit(n, prices): # implementation here ``` # Example ```python n = 6 prices = [7, 1, 5, 3, 6, 4] max_profit = compute_max_profit(n, prices) # Expected output: 7 # Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. # Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. # Total profit = 4 + 3 = 7 print(\\"Maximum Profit:\\", max_profit) ```","solution":"def compute_max_profit(n, prices): Calculates the maximum profit that can be achieved from a list of daily stock prices with multiple transactions allowed. Args: n (int): The number of days. prices (list): A list of integers representing the stock price on each day. Returns: int: The maximum profit possible. max_profit = 0 for i in range(1, n): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"Create a function that processes a list of strings, identifies and groups anagrams, and returns the results. An anagram is a word formed by rearranging the letters of another, such as \\"listen\\" and \\"silent\\". The function should implement `defaultdict` from the `collections` module to group the anagrams. Each group of anagrams should be sorted lexicographically within the group and sorted by the first word in the group for the final output. The function should output with: list: A list of lists, where each sublist contains words that are anagrams of each other, sorted lexicographically and grouped by the first word. You should write self-contained code starting with: ``` from collections import defaultdict def task_func(strings): ```","solution":"from collections import defaultdict def task_func(strings): Processes a list of strings, identifies and groups anagrams, and returns the results. :param strings: List of strings to be grouped as anagrams. :return: List of lists, where each sublist contains words that are anagrams of each other, sorted lexicographically. anagram_dict = defaultdict(list) for word in strings: sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) result = [] for value in anagram_dict.values(): result.append(sorted(value)) result.sort(key=lambda x: x[0]) return result"},{"question":"The goal of this problem is to help you become familiar with Python\'s `itertools` and `collections` libraries. You will create a function named `group_and_count` to analyze and group a list of items based on their properties. You are provided with a list of items, where each item is a tuple containing two elements: a category and a numerical value. Your task is to group these items by category and then compute the total sum of values for each category. The task: 1. Create the function `group_and_count` that takes one argument: `items`. 2. Use `itertools.groupby` to group the items by category. 3. Use `collections.defaultdict` to accumulate the sums of values for each category. 4. Return a dictionary where keys are categories and values are the total sums of the values for each category. Here is the formal function signature: ```python import itertools import collections def group_and_count(items): # Your implementation here ``` You can assume the input list `items` is already sorted by category. For example, given the input: ```python input_list = [(\'A\', 5), (\'A\', 10), (\'B\', 3), (\'B\', 7), (\'C\', 2)] ``` The output should be: ```python {\'A\': 15, \'B\': 10, \'C\': 2} ```","solution":"import itertools import collections def group_and_count(items): Function to group items by category and sum values for each category. Args: items (list of tuples): List of tuples where each tuple contains a category (str) and a numerical value (int). Returns: dict: a dictionary where keys are categories and values are the total sums of the values for each category. grouped_items = itertools.groupby(items, key=lambda x: x[0]) result = collections.defaultdict(int) for key, group in grouped_items: for item in group: result[key] += item[1] return dict(result)"},{"question":"# Binary Search on a Rotated Sorted Array In this problem, you will implement a function named `search_in_rotated_array` that searches for a target value in a rotated sorted array. An array is rotated if it is sorted in ascending order and then some number of elements from the beginning of the array are moved to the end. The goal is to find the index of the target value if it exists in the array; otherwise, return -1. Input: - **nums**: A list of integers representing the rotated sorted array. - **target**: An integer representing the value to search for in the array. Output: - An integer representing the index of the target value in the array, or -1 if the target is not present. Task: 1. Implement a binary search method that can handle the rotation by determining which portion of the array to search. 2. Return the index of the target value if found, otherwise return -1. # Example: 1. Example 1: ```python nums = [4, 5, 6, 7, 0, 1, 2] target = 0 result = search_in_rotated_array(nums, target) print(result) # Output: 4 ``` 2. Example 2: ```python nums = [4, 5, 6, 7, 0, 1, 2] target = 3 result = search_in_rotated_array(nums, target) print(result) # Output: -1 ``` 3. Example 3: ```python nums = [1] target = 0 result = search_in_rotated_array(nums, target) print(result) # Output: -1 ``` # Note: - You must use the binary search algorithm, which has a time complexity of O(log n). - Consider edge cases such as when the array is not rotated or has only one element. ```python def search_in_rotated_array(nums, target): left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 # If the target is found if nums[mid] == target: return mid # Determine which portion is properly sorted if nums[left] <= nums[mid]: # The left portion is sorted if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 else: # The right portion is sorted if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1 ```","solution":"def search_in_rotated_array(nums, target): Searches for the target value in a rotated sorted array. Returns the index of the target value if found, otherwise returns -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 # If the target is found if nums[mid] == target: return mid # Determine which portion is properly sorted if nums[left] <= nums[mid]: # The left portion is sorted if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 else: # The right portion is sorted if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Consider a database of employees at a company, where each employee has a `name`, `age`, `department`, and `salary`. You need to use `pandas` to perform various operations on the employee data. Here is the task breakdown: 1. Compute the average salary for each department and store it in a dictionary called `avg_salary_dept`, where the keys are department names and the values are the average salaries. 2. Identify the oldest employee in each department and store their information in a dictionary called `oldest_employee`, where the keys are department names and the values are tuples containing `(name, age, salary)`. 3. Sort the employees by their salary in descending order. Compute the median salary of the top 5 highest-paid employees. 4. Compute the normalized salary for each employee using Min-Max normalization. Create a new column in the DataFrame called `normalized_salary` containing these values. 5. Filter the employees who are older than 30 and have a normalized salary greater than 0.5. Create a new DataFrame containing these filtered employees. Implement this in a function named `process_employee_data`. **Function Signature:** ```python def process_employee_data(df: pd.DataFrame) -> (dict, dict, float, pd.DataFrame): pass ``` **Parameters:** - `df (pd.DataFrame)`: A Pandas DataFrame containing employee data with columns: `name`, `age`, `department`, `salary`. **Returns:** - A dictionary `avg_salary_dept` containing average salaries by department. - A dictionary `oldest_employee` containing the oldest employee information by department. - A float representing the median salary of the top 5 highest-paid employees. - A Pandas DataFrame containing the filtered employees (older than 30 and normalized salary > 0.5). **Assumptions:** - Use the `numpy` library for numerical operations. **Example:** ```python import pandas as pd import numpy as np def process_employee_data(df): # Your implementation here # Dummy data for testing data = { \'name\': [\'Alice\', \'Bob\', \'Charlie\', \'David\', \'Eva\', \'Frank\', \'Grace\'], \'age\': [25, 35, 45, 28, 50, 40, 34], \'department\': [\'HR\', \'Engineering\', \'HR\', \'Engineering\', \'HR\', \'Engineering\', \'HR\'], \'salary\': [50000, 80000, 60000, 70000, 90000, 75000, 65000] } df = pd.DataFrame(data) avg_salary_dept, oldest_employee, median_top5, filtered_df = process_employee_data(df) print(avg_salary_dept) print(oldest_employee) print(median_top5) print(filtered_df) ```","solution":"import pandas as pd import numpy as np def process_employee_data(df): # 1. Compute the average salary for each department avg_salary_dept = df.groupby(\'department\')[\'salary\'].mean().to_dict() # 2. Identify the oldest employee in each department idx_oldest = df.groupby(\'department\')[\'age\'].idxmax() oldest_employee_df = df.loc[idx_oldest] oldest_employee = oldest_employee_df.set_index(\'department\')[[\'name\', \'age\', \'salary\']].to_dict(orient=\'index\') # 3. Sort the employees by their salary in descending order and compute the median salary of the top 5 highest-paid employees top_5_highest_paid = df.nlargest(5, \'salary\') median_top5 = top_5_highest_paid[\'salary\'].median() # 4. Compute the normalized salary for each employee using Min-Max normalization salary_min = df[\'salary\'].min() salary_max = df[\'salary\'].max() df[\'normalized_salary\'] = (df[\'salary\'] - salary_min) / (salary_max - salary_min) # 5. Filter the employees who are older than 30 and have a normalized salary greater than 0.5 filtered_df = df[(df[\'age\'] > 30) & (df[\'normalized_salary\'] > 0.5)] return avg_salary_dept, oldest_employee, median_top5, filtered_df"},{"question":"Create a function that simulates rolling a pair of dice multiple times and then visualizes the results using a histogram. The function should roll the dice for a given number of times (\'num_rolls\') and plot the distribution of the sums of the two dice. Use Python\'s \'random\' module to simulate the dice rolls and \'matplotlib\' for plotting the histogram. Customize the plot with titles and labels for clarity. The function should output with: Axes: The matplotlib plot\'s Axes object. You should write self-contained code starting with: ``` import random import matplotlib.pyplot as plt def roll_dice_histogram(num_rolls=1000, random_seed=None): ```","solution":"import random import matplotlib.pyplot as plt def roll_dice_histogram(num_rolls=1000, random_seed=None): Simulates rolling a pair of dice \'num_rolls\' times and visualizes the results using a histogram. Args: num_rolls (int): The number of times to roll the pair of dice. random_seed (int, optional): Seed for the random number generator for reproducibility. Returns: matplotlib.axes._subplots.AxesSubplot: The matplotlib plot\'s Axes object. if random_seed is not None: random.seed(random_seed) rolls = [random.randint(1, 6) + random.randint(1, 6) for _ in range(num_rolls)] fig, ax = plt.subplots() ax.hist(rolls, bins=range(2, 14), edgecolor=\'black\', align=\'left\') ax.set_title(\'Histogram of Dice Sums\') ax.set_xlabel(\'Sum of Two Dice\') ax.set_ylabel(\'Frequency\') ax.set_xticks(range(2, 13)) return ax"},{"question":"# Context In many scientific and data processing scenarios, there is a frequent need to detect peaks in a dataset. Peaks are local maxima that are higher than their immediate neighbors. Detecting peaks can be useful in signal processing, financial data analysis, and various other domains. In this problem, you are tasked with implementing a function to detect peaks in a given list of integers. The function should return a list of indices where the peaks are found. A peak is defined as an element that is strictly greater than its immediate neighbors. # Requirements You need to implement a function called `detect_peaks` that follows these steps: 1. Traverse the list to check each element. 2. Determine if the current element is a peak: - An element at index `i` is a peak if it is greater than the element at `i-1` and `i+1`. - Handle edge cases where the peak could be at the start or end of the list. 3. Collect and return the indices of all peak elements found. # Function Signature ```python def detect_peaks(arr: list) -> list: pass ``` # Input - `arr` (list): A list of integers representing the dataset in which you need to detect peaks. # Output - (list): A list of integers representing the indices of the peak elements in the input list. # Example For input `arr = [1, 3, 2, 4, 1, 0, 5, 1]`: ```python >>> print(detect_peaks([1, 3, 2, 4, 1, 0, 5, 1])) [1, 3, 6] ``` In this example, the function identifies peaks at indices `1` (value `3`), `3` (value `4`), and `6` (value `5`). Implement `detect_peaks` ensuring accuracy, considering edge cases, and maintaining efficient performance.","solution":"def detect_peaks(arr): Detects peaks in a given list of integers and returns their indices. Parameters: arr (list): A list of integers. Returns: list: A list of integers representing the indices of the peak elements. if not arr: return [] peaks = [] n = len(arr) # Check the first element if n >= 2 and arr[0] > arr[1]: peaks.append(0) elif n == 1: peaks.append(0) # Check the middle elements for i in range(1, n - 1): if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: peaks.append(i) # Check the last element if n >= 2 and arr[n - 1] > arr[n - 2]: peaks.append(n - 1) return peaks"},{"question":"You need to write a function called `generate_fibonacci_matrix` that takes a single integer `n` as an input and returns an `n x n` matrix filled with the first `n * n` Fibonacci numbers, arranged in a row-major order. # Function Signature: ```python def generate_fibonacci_matrix(n: int) -> np.ndarray: ``` # Requirements: 1. The matrix should be of size `n x n`. 2. The Fibonacci sequence starts with 0, 1, 1, 2, 3, 5, 8, 13, ... 3. Fill the matrix in row-major order, which means filling rows one by one. 4. Use numpy to create and return the matrix. # Example: ```python generate_fibonacci_matrix(3) ``` The expected output is: ``` array([[ 0, 1, 1], [ 2, 3, 5], [ 8, 13, 21]]) ```","solution":"import numpy as np def generate_fibonacci_matrix(n: int) -> np.ndarray: Generates an n x n matrix filled with the first n*n Fibonacci numbers in row-major order. if n <= 0: return np.array([]) # Create an array to hold n*n Fibonacci numbers fib_nums = [0] * (n * n) # Initialize the first two Fibonacci numbers fib_nums[0] = 0 if n * n > 1: fib_nums[1] = 1 # Generate the Fibonacci sequence for i in range(2, n * n): fib_nums[i] = fib_nums[i - 1] + fib_nums[i - 2] # Convert the list into a numpy array and reshape it into an n x n matrix fib_matrix = np.array(fib_nums).reshape((n, n)) return fib_matrix"},{"question":"You are tasked with creating a function that checks for balanced parentheses in an arithmetic expression. The function should ensure that every opening parenthesis has a corresponding closing parenthesis in the correct order. This is crucial for validating the syntactical correctness of expressions before proceeding with evaluation. You need to define a function named `is_balanced()` with the following specifications: 1. The function should accept a single argument: a string representing the arithmetic expression. 2. The function should return `True` if the parentheses in the expression are balanced, otherwise `False`. 3. The algorithm should account for the following types of parentheses: `()`, `[]`, and `{}`. 4. Ignore all characters in the string that are not parentheses. 5. An empty string should be considered balanced. The approach should be implemented as follows: ```python def is_balanced(expression: str) -> bool: Check if parentheses in the given expression are balanced. # Your implementation here ``` **Hint:** Utilize a stack data structure to keep track of the opening parentheses and ensure they are properly closed.","solution":"def is_balanced(expression: str) -> bool: Check if parentheses in the given expression are balanced. stack = [] matching_parentheses = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in expression: if char in matching_parentheses.values(): # If it is an opening parenthesis stack.append(char) elif char in matching_parentheses.keys(): # If it is a closing parenthesis if stack == [] or stack.pop() != matching_parentheses[char]: return False return stack == []"},{"question":"In this problem, you are required to implement a function that performs matrix multiplication. Given two 2D NumPy arrays, representing matrices `A` and `B`, compute their matrix product. Matrix multiplication is defined as: [ (AB)_{ij} = sum_{k} A_{ik} B_{kj} ] To be valid for matrix multiplication, the number of columns in `A` must equal the number of rows in `B`. You are required to implement a function named `matrix_multiply` that takes two 2D NumPy arrays `A` and `B` as input and returns their matrix product. # Function Signature ```python def matrix_multiply(A: np.ndarray, B: np.ndarray) -> np.ndarray: pass ``` # Example ```python import numpy as np A = np.array([[1, 2, 3], [4, 5, 6]]) B = np.array([[7, 8], [9, 10], [11, 12]]) print(matrix_multiply(A, B)) ``` **Output:** ```python [[ 58, 64], [139, 154]] ``` # Constraints - Assume that both `A` and `B` are valid 2D NumPy arrays where the number of columns in `A` is equal to the number of rows in `B`. # Requirements Recap: 1. Implement matrix multiplication using NumPy. 2. Ensure the function checks for valid dimensions for matrix multiplication. 3. Return the matrix product as a NumPy array. # Learning Outcome: This problem helps in understanding how to perform matrix multiplication using NumPy, which is a fundamental operation in many numerical methods and algorithms in data science and machine learning.","solution":"import numpy as np def matrix_multiply(A: np.ndarray, B: np.ndarray) -> np.ndarray: Returns the matrix product of A and B. Parameters: A (np.ndarray): A 2D NumPy array. B (np.ndarray): A 2D NumPy array. Returns: np.ndarray: The matrix product of A and B. # Validate that the number of columns in A equals the number of rows in B if A.shape[1] != B.shape[0]: raise ValueError(\\"Number of columns in A must be equal to the number of rows in B\\") # Compute the matrix product return np.dot(A, B)"},{"question":"You are tasked with writing a function `cyclic_array_rotation(arr, k)` that rotates an array `arr` by `k` positions toward the right. The function takes in an array of integers `arr` and an integer `k` where `1 <= k <= len(arr)`, and produces an array where the elements have been shifted `k` steps to the right, with the elements at the end of the array wrapping around to the beginning. For example, given the array `arr = [1, 2, 3, 4, 5]` and `k = 2`, the result should be `[4, 5, 1, 2, 3]`. To achieve this, follow these steps: 1. First, determine the actual number of shifts needed by taking `k` modulo the length of the array. This handles cases where `k` is greater than the length of the array. 2. Slice the array into two parts: the last `k` elements and the rest of the array. 3. Concatenate the two parts such that the last `k` elements are moved to the front. Your function should handle arrays of any length between 1 and 1000 and produce the rotated array as per the given `k`. Here is the initial part of the code that you need to build upon: ```python def cyclic_array_rotation(arr, k): n = len(arr) k = k % n # in case k is larger than len(arr) return arr[-k:] + arr[:-k] ```","solution":"def cyclic_array_rotation(arr, k): Rotates an array arr by k positions to the right. :param arr: List of integers to be rotated. :param k: Number of positions to rotate the array. :return: Rotated list of integers. n = len(arr) k = k % n # in case k is larger than len(arr) return arr[-k:] + arr[:-k]"},{"question":"You are required to write a function `list_combinations` that takes in a list of lists and returns all possible combinations where each combination contains one element from each sublist. This exercise will test your ability to work with nested list structures and basic combinatorial logic. Function Signature ```python def list_combinations(input_lists: List[List[Any]]) -> List[List[Any]]: pass ``` Input Parameters - `input_lists`: A list of lists where each sublist contains elements of any data type. Output The function should return a list of lists, where each inner list represents a unique combination with one element from each sublist in the input. Constraints - The input list will contain at least one sublist. - Each sublist will contain at least one element. - The total number of combinations should not exceed 10^6. Sample Usage ```python input_lists = [[1, 2, 3], [\'a\', \'b\'], [True, False]] output = list_combinations(input_lists) # Sample output # [ # [1, \'a\', True], # [1, \'a\', False], # [1, \'b\', True], # [1, \'b\', False], # [2, \'a\', True], # [2, \'a\', False], # [2, \'b\', True], # [2, \'b\', False], # [3, \'a\', True], # [3, \'a\', False], # [3, \'b\', True], # [3, \'b\', False] # ] ``` Hint: You can use the `itertools.product` function to generate the combinations efficiently. #","solution":"from itertools import product from typing import List, Any def list_combinations(input_lists: List[List[Any]]) -> List[List[Any]]: Returns all possible combinations where each combination contains one element from each sublist. return [list(comb) for comb in product(*input_lists)]"},{"question":"Write a program to determine if a given string is a valid mathematical expression that contains balanced parentheses and correct usage of operators. A valid mathematical expression may contain numbers, parentheses, and the operators +, -, *, and / without any invalid characters or sequences. The program should evaluate the expression to ensure it\'s syntactically correct and return True if the expression is valid, otherwise return False. The function should output with: bool: True if the expression is valid, otherwise False. You should write self-contained code starting with: ``` def is_valid_expression(expression): ``` # Example Usage ``` print(is_valid_expression(\\"3 + (2 - 1) * 5\\")) # True print(is_valid_expression(\\"3 + (2 - 1)) * 5\\")) # False print(is_valid_expression(\\"3 + 5 *\\")) # False ```","solution":"def is_valid_expression(expression): Determine if the given string is a valid mathematical expression. # Remove spaces from expression expression = expression.replace(\\" \\", \\"\\") # Parentheses balance check stack = [] for char in expression: if char == \'(\': stack.append(\'(\') elif char == \')\': if not stack: return False stack.pop() if stack: return False # Invalid sequences and characters check allowed_chars = set(\'0123456789+-*/()\') prev_char = \\"\\" for char in expression: if char not in allowed_chars: return False if prev_char in \\"+-*/\\" and char in \\"+-*/\\": return False prev_char = char # Ensure no expression ends with an operator if expression[-1] in \'+-*/\': return False return True"},{"question":"Create a function named `sort_and_find_mode` in Python that processes a given list of integers. The function should have the following specifications: - Accept an input list of integers, `num_list`. - Sort the list in ascending order. - Find the mode (the most frequently occurring element) of the sorted list. - Return a tuple containing the sorted list and the mode. The function should do the following: 1. Sort the list of integers in ascending order using any efficient sorting algorithm. 2. Identify the mode of the sorted list, which is the number that appears the most times. If there are multiple modes, return the smallest one. 3. Return a tuple where the first element is the sorted list and the second element is the mode. Example: ```python >>> sort_and_find_mode([4, 1, 2, 2, 3, 4, 4, 1]) ([1, 1, 2, 2, 3, 4, 4, 4], 4) ``` **Note**: You must use sorting and mode-finding techniques such as sorting the list and iterating through elements to count frequencies.","solution":"def sort_and_find_mode(num_list): Sorts the given list of integers and finds the mode. Parameters: num_list (list of int): List of integers to be processed. Returns: tuple: A tuple where the first element is the sorted list and the second element is the mode. if not num_list: return ([], None) # Sort the list in ascending order sorted_list = sorted(num_list) # Dictionary to store frequency of each element frequency = {} for num in sorted_list: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 # Find the mode by locating the element with the highest frequency mode = min([key for key, value in frequency.items() if value == max(frequency.values())]) return (sorted_list, mode)"},{"question":"Implement a function to find the longest prefix of an array of strings that is also a palindrome. A prefix is the initial part of a string, and a palindrome is a sequence of characters that reads the same forward and backward. Your task is to find the longest prefix from the first string in the array that is also a palindrome and has the same prefix in all the subsequent strings of the array. **Function Specification** - **Function Name**: `longest_palindromic_prefix` - **Inputs**: - `words` (List[str]): A list of strings. - **Output**: A single string representing the longest prefix that is a palindrome and appears as a prefix in all the strings in the input list. **Instructions** 1. Extract the initial part of the first string in the array that forms a palindrome. 2. Ensure this palindrome prefix is also a prefix in all other strings in the list. 3. Return the longest such palindrome prefix. **Example** ```python def longest_palindromic_prefix(words): # Your implementation here # Example usage: words = [\\"racecarth\\", \\"racecarz\\", \\"racecar\\"] print(longest_palindromic_prefix(words)) # Output: \\"racecar\\" words2 = [\\"redderblue\\", \\"reddergreen\\", \\"redder\\"] print(longest_palindromic_prefix(words2)) # Output: \\"redder\\" words3 = [\\"abcdef\\", \\"ghijkl\\", \\"mnop\\"] print(longest_palindromic_prefix(words3)) # Output: \\"\\" ``` **Requirements**: - The solution should be efficient and able to handle edge cases. - Make sure to handle cases where no such palindromic prefix exists.","solution":"def longest_palindromic_prefix(words): Finds the longest palindromic prefix that is common in all strings in the list. if not words: return \\"\\" def is_palindrome(s): return s == s[::-1] first_word = words[0] longest_prefix = \\"\\" for i in range(len(first_word)): prefix = first_word[:i+1] if is_palindrome(prefix): if all(word.startswith(prefix) for word in words): longest_prefix = prefix else: break return longest_prefix"},{"question":"Write a function to analyze temperature data and find the maximum, minimum, and average temperatures for each week. The input will be a DataFrame containing daily temperature readings with columns \'Date\' and \'Temperature\'. The function should group the data by week (starting from the first available date) and calculate the weekly maximum, minimum, and average temperatures. The output should be a DataFrame containing columns \'Week\', \'MaxTemp\', \'MinTemp\', and \'AvgTemp\'. The function should raise an exception for: ValueError: If the input DataFrame does not have required columns or is empty. The function should output: pd.DataFrame: A DataFrame with weekly summary of temperatures. You should write self-contained code starting with: ``` import pandas as pd def weekly_temperature_summary(df): ```","solution":"import pandas as pd def weekly_temperature_summary(df): Analyze temperature data and find the maximum, minimum, and average temperatures for each week. Parameters: df (pd.DataFrame): DataFrame containing daily temperature readings with columns \'Date\' and \'Temperature\'. Returns: pd.DataFrame: DataFrame containing columns \'Week\', \'MaxTemp\', \'MinTemp\', and \'AvgTemp\'. if not set([\'Date\', \'Temperature\']).issubset(df.columns) or df.empty: raise ValueError(\\"Input DataFrame must have \'Date\' and \'Temperature\' columns and should not be empty\\") # Ensure \'Date\' column is datetime type df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Set the first available date as the origin of the week\'s indexing df[\'Week\'] = (df[\'Date\'] - df[\'Date\'].min()).dt.days // 7 # Group by \'Week\' and calculate max, min, and average temperatures weekly_summary = df.groupby(\'Week\').agg( MaxTemp=(\'Temperature\', \'max\'), MinTemp=(\'Temperature\', \'min\'), AvgTemp=(\'Temperature\', \'mean\') ).reset_index() return weekly_summary"},{"question":"**Title: Track Runner Performance Analysis** You are tasked with creating a Python function named `plot_runner_performance` to analyze and visualize the performance of track runners over multiple races. The function should generate a line plot which helps in comparing the times of different runners across races. The function should utilize the `matplotlib` library, specifically the `matplotlib.pyplot` functions, to create and display the plot. The function `read_runner_performance_file` is presumed to be provided and reads runner performance data into a Pandas DataFrame with the following columns: - `runner_name`: Name of the runner. - `race_id`: Identifier for the race. - `time_seconds`: Completion time in seconds for the race. The specific requirements for the function are as follows: 1. **Data Handling**: - Read the runner performance data from a file using the `read_runner_performance_file` function. - Focus on the performances of the following runners: \'Runner A\', \'Runner B\', \'Runner C\', \'Runner D\'. - Sort the data based on `race_id`. 2. **Plotting**: - Use `matplotlib.pyplot.subplots` to create a figure and axis. - Generate a line plot displaying the race times for each runner. - Each runner should have a distinct color and line style. - Add a legend to identify each runner. - Label the x-axis as \'Race ID\' and the y-axis as \'Time (seconds)\'. - Add a title to the chart: \'Track Runner Performance Over Races\'. - Ensure clarity in the plot by adjusting tick parameters and layout. Make sure to show the plot using `plt.show()`. **Function Signature:** ```python def plot_runner_performance(): pass ```","solution":"import matplotlib.pyplot as plt import pandas as pd def read_runner_performance_file(file_path): # Placeholder function; this function reads the performance data from a file and returns a DataFrame. pass def plot_runner_performance(file_path): This function reads runner performance data from a specified file, and plots the performance over multiple races for specific runners. # Read the runner performance data data = read_runner_performance_file(file_path) # Filter for the specific runners runners = [\'Runner A\', \'Runner B\', \'Runner C\', \'Runner D\'] filtered_data = data[data[\'runner_name\'].isin(runners)] # Sort data based on race_id sorted_data = filtered_data.sort_values(by=\'race_id\') # Group the data by runner_name grouped_data = sorted_data.groupby(\'runner_name\') # Create a figure and axis for the plot fig, ax = plt.subplots() # Plot the performance for each runner for runner_name, group in grouped_data: ax.plot(group[\'race_id\'], group[\'time_seconds\'], label=runner_name) # Add legend, labels, and title for clarity ax.legend() ax.set_xlabel(\'Race ID\') ax.set_ylabel(\'Time (seconds)\') ax.set_title(\'Track Runner Performance Over Races\') # Adjust tick parameters and layout for clarity ax.tick_params(axis=\'x\', rotation=45) plt.tight_layout() # Show plot plt.show()"},{"question":"You are building a word-guessing game where the program picks a random word from a predefined list of words, presents it to the user with blanks representing the letters, and allows the user to guess the letters one at a time. The game should keep track of the number of incorrect guesses and display a message when the user either correctly guesses the word or exhausts a set number of allowed incorrect guesses. You need to implement the `word_guessing_game(word_list: List[str], max_incorrect: int)` function with the following steps and requirements: 1. Choose a random word from the provided `word_list`. 2. Display the word with underscores (`_`) representing each letter. 3. Prompt the user to guess a letter. 4. If the guessed letter is in the word, reveal the letter(s) in the correct position(s). 5. If the guessed letter is not in the word, increment the incorrect guess counter. 6. If the user correctly guesses the word by filling in all letters, print a congratulatory message and end the game. 7. If the user reaches the maximum number of incorrect guesses (`max_incorrect`), display a game-over message and the correct word. 8. Continue the process until the user either wins or loses. Your function should follow this signature: ```python def word_guessing_game(word_list: List[str], max_incorrect: int) -> None: # Function implementation here ```","solution":"import random from typing import List def word_guessing_game(word_list: List[str], max_incorrect: int) -> None: # Step 1: Choose a random word from the word_list. word = random.choice(word_list) guessed_word = [\\"_\\"] * len(word) incorrect_guesses = 0 guessed_letters = set() print(\\"Welcome to the Word Guessing Game!\\") while incorrect_guesses < max_incorrect and \\"_\\" in guessed_word: # Display the current state of the guessed word print(\\"Current word: \\" + \\" \\".join(guessed_word)) guess = input(\\"Guess a letter: \\").lower() if len(guess) != 1 or not guess.isalpha(): print(\\"Invalid input! Please enter a single letter.\\") continue if guess in guessed_letters: print(\\"You\'ve already guessed that letter. Try again.\\") continue guessed_letters.add(guess) if guess in word: # Reveal the correct guessed letters in their positions for index, letter in enumerate(word): if letter == guess: guessed_word[index] = guess print(f\\"Good job! \'{guess}\' is in the word.\\") else: incorrect_guesses += 1 print(f\\"Sorry, \'{guess}\' is not in the word. You have {max_incorrect - incorrect_guesses} guesses left.\\") if \\"_\\" not in guessed_word: print(\\"Congratulations! You\'ve guessed the word: \\" + \\"\\".join(guessed_word)) else: print(f\\"Game over! You\'ve exhausted your guesses. The word was: {word}\\")"},{"question":"Your task is to implement a function called `generate_password` that generates a random password adhering to specific rules. The function should ensure that the generated password is both secure and memorable. Specifically, implement the function `generate_password(length)` which: 1. Takes one parameter: - `length` (int): the desired length of the password. 2. Generates a password consisting of a mix of uppercase letters, lowercase letters, digits, and special characters. 3. Ensures that the generated password contains at least one character from each of the following categories: - Uppercase letters - Lowercase letters - Digits - Special characters (choose from `!@#%^&*()-_=+`) 4. Shuffles the characters in the password to ensure randomness. 5. Returns the generated password as a string. Here\'s an outline of what your function might look like: ```python import random import string def generate_password(length): # Your implementation ``` Example: - `generate_password(10)` might return a password like `A3!b2@C4dE`. Note: - If `length` is less than 4, raise a `ValueError` indicating that the password length must be at least 4 for the password to meet the required complexity.","solution":"import random import string def generate_password(length): if length < 4: raise ValueError(\\"Password length must be at least 4\\") # Define the characters to be used upper = string.ascii_uppercase lower = string.ascii_lowercase digits = string.digits special = \\"!@#%^&*()-_=+\\" # Ensure at least one character from each category password = [ random.choice(upper), random.choice(lower), random.choice(digits), random.choice(special) ] # If length is more than 4, add random characters from all categories if length > 4: all_characters = upper + lower + digits + special password += random.choices(all_characters, k=length-4) # Shuffle the characters random.shuffle(password) return \'\'.join(password)"},{"question":"Design a function named `find_frequent_words` that analyzes a text document and identifies the n most frequent words along with their frequency counts. The function will take the file path of a text document and an integer n as inputs and return a list of tuples, each containing a word and its frequency count, sorted by frequency in descending order. The function signature should look like this: ```python def find_frequent_words(file_path: str, n: int) -> List[Tuple[str, int]]: ``` The input parameters are: - `file_path` (str): the file path of the text document to be analyzed. - `n` (int): the number of top frequent words to return. The function will: 1. Open and read the text document. 2. Clean the text by removing punctuation and converting all words to lowercase. 3. Tokenize the text into individual words. 4. Count the frequency of each word in the document. 5. Identify the n most frequent words and their frequency counts. 6. Return a list of tuples containing the words and their frequency counts, sorted by the frequency in descending order. You may assume that the text document is small enough to fit into memory. Use the `collections.Counter` class to help with word frequency counting. Here\'s an example usage of the function: ```python top_words = find_frequent_words(\'example.txt\', 5) print(top_words) # Output: [(\'the\', 50), (\'and\', 40), (\'to\', 30), (\'of\', 25), (\'a\', 20)] ``` The function should handle standard text file reading and basic text processing using Python\'s built-in libraries.","solution":"import string from typing import List, Tuple from collections import Counter def find_frequent_words(file_path: str, n: int) -> List[Tuple[str, int]]: Analyzes a text document and identifies the n most frequent words along with their frequency counts. :param file_path: The file path of the text document to be analyzed. :param n: The number of top frequent words to return. :return: A list of tuples, each containing a word and its frequency count, sorted by frequency in descending order. with open(file_path, \'r\') as file: text = file.read() # Clean the text by removing punctuation and converting to lowercase text = text.translate(str.maketrans(\'\', \'\', string.punctuation)).lower() # Tokenize the text into words words = text.split() # Count the frequency of each word word_counts = Counter(words) # Get the n most common words common_words = word_counts.most_common(n) return common_words"},{"question":"Write a Python function `nested_dict_search` that takes in two inputs: `dict_obj`, which is a nested dictionary, and `key`, which is a string representing the key to search for. The function should return the value associated with the first occurrence of the given key in the nested dictionary. If the key is not found, return `None`. The function must handle the possibility of the dictionary containing other dictionaries as values. # Example: ```python # Example 1 dict_obj = { \'a\': 1, \'b\': {\'c\': 2, \'d\': {\'e\': 3}}, \'f\': {\'g\': 4} } print(nested_dict_search(dict_obj, \'e\')) # Output: 3 # Example 2 dict_obj = { \'h\': {\'i\': {\'j\': 5}}, \'k\': 6 } print(nested_dict_search(dict_obj, \'j\')) # Output: 5 # Example 3 dict_obj = { \'l\': 7, \'m\': {\'n\': 8} } print(nested_dict_search(dict_obj, \'o\')) # Output: None ``` # Function Signature ```python def nested_dict_search(dict_obj: dict, key: str) -> any: pass ``` # Constraints: - You may assume the dictionary can be arbitrarily nested. - The depth of the nesting will not exceed 1000 levels. - The keys are unique within each level of the dictionary. - The function should return as soon as the key is found. - If the key does not exist, the function should return `None`. # Hints: - Consider using recursion to traverse the nested dictionary. - You might find it helpful to extract all dictionary values to navigate deeper levels. - Be mindful of the base case to prevent infinite recursion.","solution":"def nested_dict_search(dict_obj, key): Searches for a key in a nested dictionary and returns the value associated with the first occurrence of the key. Parameters: dict_obj (dict): The nested dictionary to search. key (str): The key to search for. Returns: The value associated with the key if found, otherwise None. if key in dict_obj: return dict_obj[key] for k, v in dict_obj.items(): if isinstance(v, dict): result = nested_dict_search(v, key) if result is not None: return result return None"},{"question":"You are tasked with creating a function named `matrix_snake` that takes an `n x n` matrix of integers and returns a list of its elements ordered from the top-left to bottom-right in a \\"snake-like\\" pattern. In this pattern, the first row should be read from left to right, the second row from right to left, and so on, alternating directions for each row. **Function Signature:** ```python def matrix_snake(matrix: List[List[int]]) -> List[int]: Parameters: - matrix (List[List[int]]): 2D list representing the n x n matrix of integers. Returns: - snake_list (List[int]): A list of matrix elements ordered in a snake-like pattern. ``` **Parameters**: 1. `matrix`: A 2D list of integers with shape `n x n`, where `n` is the number of rows and columns. **Output**: The function should return a 1D list consisting of the matrix elements traversed in a snake-like pattern. **Requirements**: - Use list comprehensions to simplify the process of creating the final list. - Take care of matrix boundaries while traversing in both directions. **Example Usage**: ```python # Example input data matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] # Get the snake-like order result = matrix_snake(matrix) print(result) # Outputs: [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13] ```","solution":"def matrix_snake(matrix): Returns a list of elements of the n x n matrix in a snake-like pattern. Parameters: - matrix (List[List[int]]): 2D list representing the n x n matrix of integers. Returns: - snake_list (List[int]): A list of matrix elements ordered in a snake-like pattern. snake_list = [] for i in range(len(matrix)): if i % 2 == 0: snake_list.extend(matrix[i]) else: snake_list.extend(matrix[i][::-1]) return snake_list"},{"question":"--- **Problem: Implementing a Custom Moving Average Calculator Using NumPy** In this task, you are required to implement a function named `moving_average_np` that calculates the moving average of a given numeric array using NumPy. The moving average is calculated for a specified window size. # Function Signature: ```python def moving_average_np(arr: np.ndarray, window_size: int) -> np.ndarray: ``` # Parameters: - `arr` (np.ndarray): A 1D array of numeric values. - `window_size` (int): The number of elements over which the moving average is calculated. # Returns: - `np.ndarray`: A 1D array containing the moving averages. # Requirements: 1. You **must** use `numpy.cumsum` to calculate the cumulative sum of the elements. 2. Handle cases where `window_size` is greater than the length of the input array by returning an empty array. 3. Ensure the output array has the same dtype as the input array. # Example: ```python >>> moving_average_np(np.array([1, 2, 3, 4, 5]), 3) array([2., 3., 4.]) ``` In this example, the function calculates the moving average for a window size of 3, resulting in an array of [2.0, 3.0, 4.0]. # Notes: - This problem is intended to help you understand and practice the usage of basic array manipulation and slicing in the NumPy library. - Make sure your implementation handles edge cases, such as empty arrays or very small arrays relative to the window size.","solution":"import numpy as np def moving_average_np(arr: np.ndarray, window_size: int) -> np.ndarray: if window_size > len(arr): return np.array([], dtype=arr.dtype) cumsum = np.cumsum(arr, dtype=float) cumsum[window_size:] = cumsum[window_size:] - cumsum[:-window_size] return cumsum[window_size - 1:] / window_size"},{"question":"**Create a Python function called `find_duplicated_numbers` that identifies all the duplicated numbers in a given list and returns them as a sorted list of integers. This function should handle various edge cases such as when the list is empty, contains no duplicates, or consists of only one element. The function should: - Accept a single list `numbers` of integers as input. - Detect and collect all numbers that appear more than once in the list. - Sort the duplicated numbers in ascending order. - Return the sorted list of duplicated numbers. **Specifications:** 1. The input list `numbers` can contain both positive and negative integers. 2. The function should handle lists with very large numbers of elements efficiently. 3. If no duplicates are found, the function should return an empty list. **Example:** ```python print(find_duplicated_numbers([1, 2, 3, 4, 5, 6, 2, 3, 5])) # Example output: [2, 3, 5] print(find_duplicated_numbers([1, 1, 1, 2, 2, 3])) # Example output: [1, 2] print(find_duplicated_numbers([10, -1, -1, 0, 10, 20])) # Example output: [-1, 10] print(find_duplicated_numbers([])) # Example output: [] ``` **Notes:** - The function should leverage Python\'s built-in data structures to optimize performance. - The `sorted` function can be used to sort the list of duplicated numbers before returning. **","solution":"def find_duplicated_numbers(numbers): Identifies all the duplicated numbers in a given list and returns them as a sorted list of integers. from collections import Counter # Count the occurrences of each number counts = Counter(numbers) # Collect numbers that appear more than once duplicates = [number for number, count in counts.items() if count > 1] # Return sorted list of duplicates return sorted(duplicates)"},{"question":"Implement a function `smooth_signal_with_noisy_outliers` that takes a noisy signal with occasional outliers, smooths the signal using a moving average, and identifies the outliers based on the difference from the smoothed signal. **Task:** 1. Generate a noisy signal with outliers. 2. Apply a moving average filter to the signal to smooth it. 3. Identify the outliers in the original signal based on a given threshold deviation from the smoothed signal. 4. Plot the original signal, the smoothed signal, and mark the outliers. **Specifications:** - The noisy signal is generated from the sine function with added Gaussian noise and random outliers. - The moving average is calculated over a window of size 5. - An outlier is defined as any point in the original signal that deviates from the smoothed signal by more than 2 standard deviations of the noise. - The function should take no parameters and generate the necessary plots for visualization purposes. **Requirements:** 1. Import necessary modules from `numpy` for signal generation and processing. 2. Use `matplotlib.pyplot` for plotting. 3. Ensure that your function correctly smooths the signal and identifies the outliers, followed by creating the specified plots. Your function should follow the structure: ```python def smooth_signal_with_noisy_outliers(): # Implement the tasks as described ```","solution":"import numpy as np import matplotlib.pyplot as plt def smooth_signal_with_noisy_outliers(): # Generate a noisy signal with outliers np.random.seed(0) t = np.arange(0, 10, 0.1) signal = np.sin(t) noise = np.random.normal(0, 0.5, len(t)) noisy_signal = signal + noise # Adding random outliers outlier_indices = np.random.choice(len(t), size=10, replace=False) noisy_signal[outlier_indices] += np.random.normal(5, 2, size=10) # Apply a moving average filter (with window size 5) to the noisy signal window_size = 5 smoothed_signal = np.convolve(noisy_signal, np.ones(window_size)/window_size, mode=\'valid\') padding = np.full(len(t) - len(smoothed_signal), np.nan) smoothed_signal = np.concatenate((padding, smoothed_signal)) # Identify outliers threshold = 2 * np.std(noise) outliers = np.abs(noisy_signal - smoothed_signal) > threshold # Plot the original signal, smoothed signal, and outliers plt.figure(figsize=(12, 6)) plt.plot(t, noisy_signal, label=\'Noisy Signal\', color=\'blue\') plt.plot(t, smoothed_signal, label=\'Smoothed Signal\', color=\'red\') plt.scatter(t[outliers], noisy_signal[outliers], color=\'green\', label=\'Outliers\', zorder=5) plt.legend() plt.xlabel(\'Time\') plt.ylabel(\'Amplitude\') plt.title(\'Noisy Signal with Outliers and Smoothed Signal\') plt.show()"},{"question":"**Background:** In a data processing system, tasks arrive randomly, and each task requires a random amount of processing time. Your goal is to write a function that simulates this process to determine the total time required to complete a given number of tasks, considering the system can process tasks concurrently with a fixed number of processors. **Problem:** You need to write a function `simulate_task_processing(arrival_times, processing_times, num_processors)` that simulates the random arrival and processing of tasks. **Function Arguments:** - `arrival_times`: A list of time points at which tasks arrive. - `processing_times`: A list of processing times for each corresponding task. - `num_processors`: The number of processors available to process tasks concurrently. **Function Output:** The function should return the total time required to complete all tasks. **Requirements:** 1. Assume each processor can handle only one task at a time. 2. Tasks are processed in the order they arrive. 3. If a processor is available, it starts processing the next available task immediately. The procedure involves: 1. Simulating the arrival and processing of tasks. 2. Maintaining a priority queue to track which processor will free up next. To achieve this, you can use a min-heap to keep track of the end times of tasks currently being processed. **Example:** ```python arrival_times = [0, 1, 2, 3] processing_times = [5, 6, 2, 4] num_processors = 2 simulate_task_processing(arrival_times, processing_times, num_processors) ```","solution":"import heapq def simulate_task_processing(arrival_times, processing_times, num_processors): Simulates the random arrival and processing of tasks to determine the total time required to complete a given number of tasks using a fixed number of processors. Args: arrival_times (list of int): List of time points at which tasks arrive. processing_times (list of int): List of processing times for each corresponding task. num_processors (int): Number of processors available to process tasks concurrently. Returns: int: The total time required to complete all tasks. if not arrival_times or not processing_times or num_processors <= 0: return 0 if len(arrival_times) != len(processing_times): raise ValueError(\\"The length of arrival_times and processing_times should be equal.\\") # Priority queue to keep track of end times of tasks pq = [] for arrival, processing in zip(arrival_times, processing_times): if len(pq) < num_processors: heapq.heappush(pq, arrival + processing) else: earliest_end_time = heapq.heappop(pq) heapq.heappush(pq, max(arrival, earliest_end_time) + processing) # Return the maximum end time in the priority queue return max(pq)"},{"question":"You are given a string `s` containing an equation that consists of two non-negative integers and one arithmetic operator (+, -, *, /), separated by spaces. Your task is to evaluate the expression and return the result as a floating point number. Write a function `evaluate_expression(s: str) -> float` to perform this task. **Function Signature:** ```python def evaluate_expression(s: str) -> float: ... ``` **Input:** - `s` (string): A string representing an equation of two integers and one of the operators (`+`, `-`, `*`, `/`). The two integers and the operator are each separated by a single space. **Output:** - Return the calculated result as a floating point number. **Example:** ```python evaluate_expression(\\"3 + 5\\") # should return 8.0 evaluate_expression(\\"10 - 2\\") # should return 8.0 evaluate_expression(\\"6 * 7\\") # should return 42.0 evaluate_expression(\\"16 / 4\\") # should return 4.0 evaluate_expression(\\"5 / 2\\") # should return 2.5 ``` **Requirements:** - The function should handle division properly, returning a floating point number. - Operator precedence is not a concern since there is only one operator. - The function should handle any potential edge cases, such as division by zero, gracefully and return an appropriate response.","solution":"def evaluate_expression(s: str) -> float: Evaluates an arithmetic expression given as a string. Parameters: s (str): A string containing two integers and an operator (+, -, *, /) separated by spaces. Returns: float: The result of the arithmetic operation. parts = s.split() num1 = int(parts[0]) operator = parts[1] num2 = int(parts[2]) if operator == \'+\': return float(num1 + num2) elif operator == \'-\': return float(num1 - num2) elif operator == \'*\': return float(num1 * num2) elif operator == \'/\': if num2 == 0: raise ValueError(\\"Division by zero is not allowed\\") return float(num1 / num2) else: raise ValueError(\\"Invalid operator\\") # Example use: # print(evaluate_expression(\\"3 + 5\\")) # Output: 8.0 # print(evaluate_expression(\\"10 - 2\\")) # Output: 8.0 # print(evaluate_expression(\\"6 * 7\\")) # Output: 42.0 # print(evaluate_expression(\\"16 / 4\\")) # Output: 4.0 # print(evaluate_expression(\\"5 / 2\\")) # Output: 2.5"},{"question":"Write a function named `generatePassword` that generates a random password based on the given criteria. The function should: 1. Accept three parameters: - `length` (integer): The required length of the password. - `use_special` (boolean): Whether to include special characters in the password. - `use_digits` (boolean): Whether to include digits in the password. 2. Generate a password that adheres to the specified length and includes at least one lowercase letter and one uppercase letter, along with special characters and digits where applicable. 3. Raise a ValueError with an appropriate message if the provided length is less than 2 or not sufficient to include the requested character sets. **Special characters allowed:** `!@#%^&*()-_+=` **Requirements:** 1. Use Python’s `random` module for generating the random characters. 2. Ensure that the generated password meets the required criteria based on the given parameters. # Example ```python generatePassword(8, True, True) ``` **Possible Output:** ``` aB3#kL9y ``` # Constraints - You may assume the input `length` will be an integer. - There should be no spaces in the password. - Special characters and digits should not be included if their respective flags are set to `False`. # Additional Notes - You can use the `string` module to simplify the selection of character sets. - Ensure the random selection of characters is uniform to maximize password uniqueness.","solution":"import random import string def generatePassword(length, use_special, use_digits): Generates a random password based on the given criteria. Parameters: length (int): The required length of the password. use_special (bool): Whether to include special characters in the password. use_digits (bool): Whether to include digits in the password. Returns: str: Generated password. Raises: ValueError: If the provided length is less than 2 or not sufficient to include the requested character sets. if length < 2: raise ValueError(\\"Password length must be at least 2.\\") special_characters = \\"!@#%^&*()-_+=\\" # Start with guaranteed buckets password_characters = [ random.choice(string.ascii_lowercase), random.choice(string.ascii_uppercase) ] # Adjust the minimal length requirement based on flags min_required_length = 2 if use_special: password_characters.append(random.choice(special_characters)) min_required_length += 1 if use_digits: password_characters.append(random.choice(string.digits)) min_required_length += 1 if length < min_required_length: raise ValueError(\\"Password length is not sufficient to include the requested character sets.\\") # Create the pool of characters to draw from based on flags character_pool = string.ascii_letters if use_special: character_pool += special_characters if use_digits: character_pool += string.digits # Fill the remaining length of the password while len(password_characters) < length: password_characters.append(random.choice(character_pool)) # Shuffle to ensure randomness random.shuffle(password_characters) return \'\'.join(password_characters)"},{"question":"Write a function that generates a DataFrame with random student grades, and then filters the DataFrame to display only the students who passed a specified subject. The DataFrame should include the following columns: \\"Student Name\\" (a string), \\"Subject\\" (chosen randomly from a predefined list), and \\"Grade\\" (an integer between 0 and 100). The function should output: list: A list of dictionaries where each dictionary represents a student who passed the specified subject. You should write self-contained code starting with: ``` import pandas as pd import random def generate_student_grades(subject, pass_mark, num_students=100): ```","solution":"import pandas as pd import random def generate_student_grades(subject, pass_mark, num_students=100): Generates a DataFrame with random student grades and filters it to display only the students who passed the specified subject. Args: subject (str): The subject to filter. pass_mark (int): The minimum grade required to pass. num_students (int, optional): The number of students to generate. Defaults to 100. Returns: list: A list of dictionaries representing the students who passed the specified subject. subjects = [\'Math\', \'English\', \'History\', \'Science\', \'Art\'] # Generate random data student_names = [f\'Student_{i}\' for i in range(1, num_students + 1)] random_subjects = [random.choice(subjects) for _ in range(num_students)] grades = [random.randint(0, 100) for _ in range(num_students)] # Create DataFrame df = pd.DataFrame({ \'Student Name\': student_names, \'Subject\': random_subjects, \'Grade\': grades }) # Filter DataFrame to only include students who passed the specified subject passed_students_df = df[(df[\'Subject\'] == subject) & (df[\'Grade\'] >= pass_mark)] # Convert the filtered DataFrame to list of dictionaries passed_students_list = passed_students_df.to_dict(orient=\'records\') return passed_students_list"},{"question":"You are given a grid representing a map of a rectangular island where land is represented by \'1\' and water is represented by \'0\'. The goal is to implement a function that calculates the perimeter of the island. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. The function signature should be: ```python def island_perimeter(grid: List[List[int]]) -> int: ``` # Input Parameters: - `grid`: A list of lists of integers representing the island map, where 1 represents land and 0 represents water. # Returns: - An integer representing the perimeter of the island. # Example: ```python grid = [ [0, 1, 0, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 0, 0] ] print(island_perimeter(grid)) # Output: 16 ``` # Specific Steps: 1. Initialize a variable to store the perimeter. 2. Iterate through each cell in the grid. 3. For each land cell, check its adjacent cells (up, down, left, right) to see if they are water or out of bounds. 4. Increment the perimeter count for each water or out-of-bounds neighbor. 5. Return the total perimeter after iterating through the grid. # Constraints: - The grid is rectangular (not empty or jagged). - The grid will have at most 50 rows and 50 columns. - Use Python lists and loops to achieve the solution.","solution":"from typing import List def island_perimeter(grid: List[List[int]]) -> int: rows, cols = len(grid), len(grid[0]) perimeter = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1: perimeter += 4 # Start with 4 sides if r > 0 and grid[r-1][c] == 1: # Check top perimeter -= 1 if r < rows - 1 and grid[r+1][c] == 1: # Check bottom perimeter -= 1 if c > 0 and grid[r][c-1] == 1: # Check left perimeter -= 1 if c < cols - 1 and grid[r][c+1] == 1: # Check right perimeter -= 1 return perimeter"},{"question":"You are working on a project that involves processing large datasets of textual data. One common task is to count the frequency of words in a given text file. Your task is to write a function `word_frequency` that reads a text file and returns a dictionary where the keys are words, and the values are the counts of how often each word appears in the text. To make it a bit more challenging, all characters should be considered case-insensitive (i.e., \\"Word\\" and \\"word\\" should be counted as the same word), and punctuation should be ignored (e.g., \\"word,\\" and \\"word\\" should be counted as the same word). **Function signature:** ```python def word_frequency(filename: str) -> dict: pass ``` **Parameters:** - `filename`: A string representing the path to the text file to be processed. **Returns:** - A dictionary where the keys are words (in lowercase) and the values are the frequency of those words. **Requirements:** 1. Use a regular expression to handle punctuation. 2. Convert all words to lowercase to ensure case-insensitivity. 3. Read the file line by line to handle large files efficiently. **Example:** Given a text file `sample.txt` containing the following text: ``` Hello world! This is a test. Hello again, world. ``` Calling `word_frequency(\'sample.txt\')` should return: ```python { \'hello\': 2, \'world\': 2, \'this\': 1, \'is\': 1, \'a\': 1, \'test\': 1, \'again\': 1 } ``` Note: You can assume the text file contains only alphabetical characters, spaces, and common punctuation marks.","solution":"import re def word_frequency(filename: str) -> dict: Reads a text file and returns a dictionary with word frequencies, ignoring case and punctuation. Parameters: filename (str): The path to the text file to be processed. Returns: dict: A dictionary where the keys are words in lowercase and the values are their frequency. word_count = {} with open(filename, \'r\', encoding=\'utf-8\') as file: for line in file: # Remove punctuation and make it lowercase line = re.sub(r\'[^ws]\', \'\', line).lower() words = line.split() for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"You need to create a function that converts a given string into its Pig Latin equivalent. Pig Latin is a made-up children\'s language that is typically used in English-speaking countries. The rules for converting a word to Pig Latin are as follows: 1. If the word starts with a consonant, move the first letter of the word to the end, then add \\"ay\\" to the end of the word. 2. If the word starts with a vowel (a, e, i, o, u), simply add \\"yay\\" to the end of the word. Write a function `to_pig_latin(sentence)` that takes a string input consisting of one or more words separated by spaces and converts each word to Pig Latin according to the above rules. The function should return the converted sentence as a single string. Assume that the input string will only contain lowercase alphabetical characters and spaces. Function Signature: ```python def to_pig_latin(sentence): ``` Function Requirements: 1. Convert each word in the input sentence to Pig Latin. 2. Return the converted sentence as a single string. Constraints: - Each word in the input sentence will consist only of lowercase alphabet characters (a-z). - The input sentence contains between 1 and 100 words. - Each word will be between 1 and 50 characters long. - Words are separated by a single space. Example Input and Output: Example 1: Input: \\"hello world\\" Output: \\"ellohay orldway\\" Example 2: Input: \\"i am an excellent coder\\" Output: \\"iyay amyay anyay excellentyay odercay\\" Example 3: Input: \\"programming is fun\\" Output: \\"rogrammingpay isyay unfay\\"","solution":"def to_pig_latin(sentence): def convert_word(word): if word[0] in \'aeiou\': # Check if the word begins with a vowel return word + \'yay\' else: # The word begins with a consonant return word[1:] + word[0] + \'ay\' words = sentence.split() # Split sentence into words pig_latin_words = [convert_word(word) for word in words] # Convert each word return \' \'.join(pig_latin_words) # Join them back into a sentence"},{"question":"Build a function `order_students(students)` which takes in a list of dictionaries representing students. Each dictionary contains information about a student with the fields: \\"name\\" (a string), \\"age\\" (an integer), and \\"grade\\" (an integer). Your task is to categorize these students into three different categories based on their age and sort them by their grades in descending order within each category. The categories are: - \\"Group A\\" for students aged below 13. - \\"Group B\\" for students aged from 13 to 18 (inclusive). - \\"Group C\\" for students aged above 18. The function should return a dictionary with three keys (\\"Group A\\", \\"Group B\\", and \\"Group C\\"). Each key should map to a list of student dictionaries sorted by grades in descending order. **Function Signature:** ```python def order_students(students: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]: ``` **Function Details:** 1. **Input:** - `students`: A list of dictionaries where each dictionary represents a student with keys \\"name\\", \\"age\\", and \\"grade\\". 2. **Processing Requirements:** - Categorize the students into three groups based on their ages. - Sort the students within each group by their grades in descending order. 3. **Output:** - Return a dictionary with keys \\"Group A\\", \\"Group B\\", and \\"Group C\\". Each key should map to the respective list of student dictionaries sorted by grades in descending order. **Example:** ```python students = [ {\\"name\\": \\"Alice\\", \\"age\\": 12, \\"grade\\": 85}, {\\"name\\": \\"Bob\\", \\"age\\": 14, \\"grade\\": 92}, {\\"name\\": \\"Charlie\\", \\"age\\": 19, \\"grade\\": 75}, {\\"name\\": \\"David\\", \\"age\\": 11, \\"grade\\": 88}, {\\"name\\": \\"Eva\\", \\"age\\": 17, \\"grade\\": 95}, {\\"name\\": \\"Frank\\", \\"age\\": 20, \\"grade\\": 80} ] ``` The output should be: ```python { \\"Group A\\": [ {\\"name\\": \\"David\\", \\"age\\": 11, \\"grade\\": 88}, {\\"name\\": \\"Alice\\", \\"age\\": 12, \\"grade\\": 85} ], \\"Group B\\": [ {\\"name\\": \\"Eva\\", \\"age\\": 17, \\"grade\\": 95}, {\\"name\\": \\"Bob\\", \\"age\\": 14, \\"grade\\": 92} ], \\"Group C\\": [ {\\"name\\": \\"Frank\\", \\"age\\": 20, \\"grade\\": 80}, {\\"name\\": \\"Charlie\\", \\"age\\": 19, \\"grade\\": 75} ] } ```","solution":"from typing import List, Dict, Any def order_students(students: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]: groups = { \\"Group A\\": [], \\"Group B\\": [], \\"Group C\\": [] } for student in students: if student[\\"age\\"] < 13: groups[\\"Group A\\"].append(student) elif student[\\"age\\"] <= 18: groups[\\"Group B\\"].append(student) else: groups[\\"Group C\\"].append(student) for group in groups: groups[group].sort(key=lambda x: x[\\"grade\\"], reverse=True) return groups"},{"question":"You are tasked with designing a simplified inventory management system for a warehouse. The system should allow for adding, removing, and finding items, as well as displaying the current inventory state. 1. **Setup**: - The inventory starts as an empty dictionary where keys are item names and values are quantities. 2. **Operations**: - **Add Item**: Take an item name and quantity, add the quantity to the item in the inventory. If the item doesn\'t exist, add it to the inventory with the given quantity. - **Remove Item**: Take an item name and quantity, subtract the quantity from the item in the inventory. If the quantity becomes zero or negative, remove the item from the inventory. - **Find Item**: Take an item name, check if it exists in the inventory, and return its quantity or indicate that it\'s not found. - **Display Inventory**: List all items in the inventory with their quantities. Write a function `manage_inventory(operations)` that accepts a list of operations to be performed on the inventory. Each operation is a tuple where the first element is the operation type (`\\"ADD\\"`, `\\"REMOVE\\"`, `\\"FIND\\"`, or `\\"DISPLAY\\"`) and the subsequent elements are the parameters for that operation. **Function Signature:** ```python def manage_inventory(operations: List[Tuple[str, Union[str, int]]]) -> List[Union[str, Tuple[str, int]]]: ``` **Inputs:** - `operations` (List[Tuple[str, Union[str, int]]]): A list of operations to be performed on the inventory. Each operation is a tuple where the first element is the operation type and the following elements are the parameters for that operation. **Outputs:** - A list where each element corresponds to the result of a `\\"FIND\\"` or `\\"DISPLAY\\"` operation. **Example:** ```python operations = [ (\\"ADD\\", \\"apple\\", 10), (\\"ADD\\", \\"banana\\", 5), (\\"REMOVE\\", \\"apple\\", 3), (\\"FIND\\", \\"apple\\"), (\\"DISPLAY\\",) ] result = manage_inventory(operations) # Expected Output: [7, (\\"apple\\", 7), (\\"banana\\", 5)] ``` #","solution":"from typing import List, Tuple, Union def manage_inventory(operations: List[Tuple[str, Union[str, int]]]) -> List[Union[str, Tuple[str, int]]]: inventory = {} results = [] for op in operations: if op[0] == \\"ADD\\": item, quantity = op[1], op[2] if item in inventory: inventory[item] += quantity else: inventory[item] = quantity elif op[0] == \\"REMOVE\\": item, quantity = op[1], op[2] if item in inventory: inventory[item] -= quantity if inventory[item] <= 0: del inventory[item] elif op[0] == \\"FIND\\": item = op[1] if item in inventory: results.append(inventory[item]) else: results.append(\\"Item not found\\") elif op[0] == \\"DISPLAY\\": for item, quantity in sorted(inventory.items()): # sorting to ensure consistent order in display results.append((item, quantity)) return results"},{"question":"Create a function that takes a JSON file containing sales data and generates a bar chart. The JSON file should have an array of objects, each with \'Product\', \'Date\', and \'Sales\' fields. The function should sum up the sales for each product and plot a bar chart with products on the x-axis and total sales on the y-axis. It should raise a ValueError if the JSON does not contain the necessary fields. The function should output: Axes object: A matplotlib.axes.Axes object representing the bar chart, with the title \'Total Sales per Product\', x label as \'Product\', and y label as \'Total Sales\'. You should write self-contained code starting with: ``` import json import pandas as pd import matplotlib.pyplot as plt def task_func(json_file_path): ```","solution":"import json import pandas as pd import matplotlib.pyplot as plt def task_func(json_file_path): Takes a JSON file containing sales data and generates a bar chart. :param json_file_path: path to the JSON file :return: matplotlib.axes.Axes object representing the bar chart # Load JSON data with open(json_file_path, \'r\') as file: data = json.load(file) # Validate JSON structure if not all(key in data[0] for key in (\'Product\', \'Date\', \'Sales\')): raise ValueError(\\"JSON file does not contain the necessary fields (\'Product\', \'Date\', \'Sales\').\\") # Create a DataFrame df = pd.DataFrame(data) # Sum up the sales for each product product_sales = df.groupby(\'Product\')[\'Sales\'].sum().reset_index() # Plot the bar chart fig, ax = plt.subplots() ax.bar(product_sales[\'Product\'], product_sales[\'Sales\']) ax.set_title(\'Total Sales per Product\') ax.set_xlabel(\'Product\') ax.set_ylabel(\'Total Sales\') return ax"},{"question":"In this problem, you need to implement a function called `sort_linked_list` that takes a singly linked list as input and returns a new singly linked list that contains the same elements, but sorted in ascending order. You should write a helper function `merge_sort` to perform the merge sort algorithm, which is well-suited for sorting linked lists due to its efficient O(n log n) time complexity. The ListNode class is provided, which represents a node in the singly linked list. Each node contains an integer value and a `next` pointer to the next node in the list. You need to sort the linked list based on the integer values of the nodes. Here is the definition of the ListNode class: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` Your task is to implement the following function: ```python def sort_linked_list(head: ListNode) -> ListNode: # Your code goes here ``` The `sort_linked_list` function should take the head of a linked list and return the head of the new sorted linked list. You should also implement the necessary helper functions, including `merge_sort` and any other functions required for the merge sort algorithm. # Example ```python # Example linked list: 4 -> 2 -> 1 -> 3 head = ListNode(4, ListNode(2, ListNode(1, ListNode(3)))) # Sorted Linked List: 1 -> 2 -> 3 -> 4 sorted_head = sort_linked_list(head) ``` # Constraints - The number of nodes in the linked list is in the range [0, 10^4]. - Each node\'s value is an integer in the range [-10^5, 10^5]. # Notes - You must not modify the values of the nodes directly; create new nodes if necessary. - Your solution should be efficient in terms of time complexity and should strive to use O(1) extra space.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_sort(head: ListNode) -> ListNode: if not head or not head.next: return head # Find the midpoint of the list slow, fast = head, head.next while fast and fast.next: slow, fast = slow.next, fast.next.next mid = slow.next slow.next = None # Split the list into two halves # Recursively sort the two halves left = merge_sort(head) right = merge_sort(mid) # Merge the two sorted halves return merge(left, right) def merge(left: ListNode, right: ListNode) -> ListNode: dummy = ListNode() tail = dummy while left and right: if left.val < right.val: tail.next = left left = left.next else: tail.next = right right = right.next tail = tail.next tail.next = left if left else right return dummy.next def sort_linked_list(head: ListNode) -> ListNode: return merge_sort(head)"},{"question":"You need to create a Linear Regression model to predict housing prices based on the provided dataset `housing_data.csv`. The dataset contains various features including `[\'Area\', \'Bedrooms\', \'Bathrooms\', \'Stories\', \'Parking\', \'Price\']`. Your objective is to preprocess the data, build the model using `LinearRegression` from sklearn, and evaluate its performance. This exercise will assist you in understanding the usage of `sklearn.linear_model.LinearRegression` for regression tasks. Please complete the implementation of the `train_and_evaluate_regression_model` function which should perform the following steps: 1. **Load the dataset** from a CSV file located at `\\"C:/path/to/your/dataset/housing_data.csv\\"`. 2. **Handle missing values** by filling them with the respective column means. 3. **Split the dataset** into features (`X`) and target (`y`), where the target column is `\'Price\'`. 4. **Standardize the features** using `StandardScaler`. 5. **Split the data** into training and testing sets using the `train_test_split` function. 6. **Build and train** a `LinearRegression` model. 7. **Evaluate** the model on the test set by calculating the Root Mean Squared Error (RMSE). Below is the structure of the function along with placeholders for each step: ```python import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error def train_and_evaluate_regression_model(): # Step 1: Load the dataset # Step 2: Fill missing values with column means # Step 3: Split the dataset into features and target # Step 4: Standardize the features # Step 5: Split data into train and test sets # Step 6: Build and train the LinearRegression model # Step 7: Evaluate the model and calculate RMSE # return the RMSE as a float pass ``` The function should return the RMSE as a float value. Ensure to use the `sklearn.linear_model.LinearRegression` from the `sklearn` package.","solution":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error def train_and_evaluate_regression_model(file_path): # Step 1: Load the dataset data = pd.read_csv(file_path) # Step 2: Fill missing values with column means data.fillna(data.mean(), inplace=True) # Step 3: Split the dataset into features and target X = data.drop(\'Price\', axis=1) y = data[\'Price\'] # Step 4: Standardize the features scaler = StandardScaler() X_scaled = scaler.fit_transform(X) # Step 5: Split data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42) # Step 6: Build and train the LinearRegression model model = LinearRegression() model.fit(X_train, y_train) # Step 7: Evaluate the model and calculate RMSE y_pred = model.predict(X_test) rmse = np.sqrt(mean_squared_error(y_test, y_pred)) # return the RMSE as a float return rmse"},{"question":"# K-Means Clustering with Scikit-Learn In this problem, you are asked to implement the K-Means clustering algorithm using the Scikit-Learn library. K-Means is an iterative algorithm that partitions a dataset into K predefined distinct non-overlapping subgroups (clusters) where each data point belongs to only one group. # Function Signature ```python def k_means_clustering(data, num_clusters): # Your implementation here ``` # Description 1. **Inputs:** - `data`: A 2D list or a NumPy array of shape (n_samples, n_features), representing the dataset. - `num_clusters`: An integer, representing the number of clusters to form. 2. **Outputs:** - The function should return two elements: - A NumPy array of shape (n_samples,) in which each element represents the cluster index for each data point. - A NumPy array of shape (num_clusters, n_features) representing the coordinates of the cluster centers. 3. **Algorithm Requirements:** - Use the KMeans class from `sklearn.cluster` to perform the clustering. - The function should fit the K-Means model to the input data and predict the clusters. # Requirements: - **Use `sklearn.cluster.KMeans`** to create and handle the K-Means model. - Ensure the function returns the cluster labels and the cluster centers. # Example ```python import numpy as np data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]]) num_clusters = 2 labels, centers = k_means_clustering(data, num_clusters) print(labels) print(centers) ``` The output should display the cluster labels for each data point and the coordinates of the cluster centers.","solution":"import numpy as np from sklearn.cluster import KMeans def k_means_clustering(data, num_clusters): Perform K-Means clustering on the dataset. Parameters: data (array-like or numpy array): The input data, should be a 2D list or a NumPy array of shape (n_samples, n_features). num_clusters (int): The number of clusters to form. Returns: tuple: A tuple containing: - A numpy array of shape (n_samples,) which are the cluster labels for each data point. - A numpy array of shape (num_clusters, n_features) representing the coordinates of the cluster centers. kmeans = KMeans(n_clusters=num_clusters) kmeans.fit(data) labels = kmeans.labels_ centers = kmeans.cluster_centers_ return labels, centers"},{"question":"You are required to write a function named `normalize_and_split_data` that processes a CSV file containing numerical data. This function should utilize the `pandas` and `sklearn` libraries to achieve the following: 1. **Read** the CSV file into a pandas DataFrame. 2. **Normalize** the data by scaling each feature to a given range (e.g., 0 to 1). 3. **Add** a new calculated feature: - Calculate the mean of all existing features for each row and include it as a new feature column named `mean_feature`. 4. **Split** the dataset into training and testing sets with a specified test size. 5. **Return** the training and testing data as pandas DataFrames. The function signature is as follows: ```python def normalize_and_split_data(csv_file: str, feature_range: tuple, test_size: float) -> (pd.DataFrame, pd.DataFrame): Read a CSV file, normalize the data, add a feature, and split into training and testing sets. :param csv_file: The path to the CSV file containing the data. :param feature_range: A tuple specifying the min and max values for scaling. :param test_size: The proportion of the dataset to include in the test split. :return: A tuple containing: - train_data: pandas DataFrame of the training set - test_data: pandas DataFrame of the testing set ``` Make sure the function adheres to the following specifications: - Use `pandas` to read the CSV file. - Utilize `sklearn.preprocessing.MinMaxScaler` to normalize the features. - Add the new `mean_feature` column to the DataFrame. - Use `sklearn.model_selection.train_test_split` to split the dataset. - Return the resulting training and testing DataFrames.","solution":"import pandas as pd from sklearn.preprocessing import MinMaxScaler from sklearn.model_selection import train_test_split def normalize_and_split_data(csv_file: str, feature_range: tuple, test_size: float) -> (pd.DataFrame, pd.DataFrame): Read a CSV file, normalize the data, add a feature, and split into training and testing sets. :param csv_file: The path to the CSV file containing the data. :param feature_range: A tuple specifying the min and max values for scaling. :param test_size: The proportion of the dataset to include in the test split. :return: A tuple containing: - train_data: pandas DataFrame of the training set - test_data: pandas DataFrame of the testing set # Step 1: Read the CSV file into a pandas DataFrame df = pd.read_csv(csv_file) # Step 2: Normalize the data by scaling each feature to a given range scaler = MinMaxScaler(feature_range=feature_range) df_scaled = pd.DataFrame(scaler.fit_transform(df), columns=df.columns) # Step 3: Calculate the mean of all existing features for each row and add as a new feature df_scaled[\'mean_feature\'] = df_scaled.mean(axis=1) # Step 4: Split the dataset into training and testing sets train_data, test_data = train_test_split(df_scaled, test_size=test_size, random_state=42) return train_data, test_data"},{"question":"You are given a JSON file containing data about various books in a library. Your task is to write a Python function named `filter_books_by_author` that filters books based on a given author and saves the filtered book data to an output file. The input data format is a JSON object with a nested structure, like so: ```json { \\"library\\": { \\"books\\": [ { \\"book_id\\": 101, \\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\" }, { \\"book_id\\": 102, \\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\" }, ... (more books) ... ] } } ``` # Function Definition `filter_books_by_author(books_filename: str, output_filename: str, author: str) -> None` **Parameters:** - `books_filename` (str): The name of the input JSON file containing book data. - `output_filename` (str): The name of the output JSON file where the filtered books will be saved. - `author` (str): The author by which to filter the books. Library Requirement You must use the `json.dump` function from Python’s `json` library to serialize the filtered book data into the output file. # Example Suppose the input file `books.json` contains the following data: ```json { \\"library\\": { \\"books\\": [ { \\"book_id\\": 101, \\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\" }, { \\"book_id\\": 102, \\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\" }, { \\"book_id\\": 103, \\"title\\": \\"Animal Farm\\", \\"author\\": \\"George Orwell\\" } ] } } ``` Running `filter_books_by_author(\\"books.json\\", \\"filtered_books.json\\", \\"George Orwell\\")` should create an output file `filtered_books.json` containing: ```json [ { \\"book_id\\": 102, \\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\" }, { \\"book_id\\": 103, \\"title\\": \\"Animal Farm\\", \\"author\\": \\"George Orwell\\" } ] ```","solution":"import json def filter_books_by_author(books_filename: str, output_filename: str, author: str) -> None: with open(books_filename, \'r\') as f: data = json.load(f) filtered_books = [book for book in data[\'library\'][\'books\'] if book[\'author\'] == author] with open(output_filename, \'w\') as f: json.dump(filtered_books, f, indent=4)"},{"question":"You are required to create a function `compress_string` that takes a string as input and returns its compressed version using the following run-length encoding algorithm: 1. If a character `c` appears consecutively `n` times in the string, it should be represented in the compressed format as `c` followed by `n`. 2. If a character appears only once, it should be represented by just the character without the number. Write code to implement this compression. **Function Signature:** ```python def compress_string(s): pass ``` **Example:** ```python compress_string(\\"aaabbccc\\") -> \\"a3b2c3\\" compress_string(\\"abcd\\") -> \\"abcd\\" compress_string(\\"aabbccddaa\\") -> \\"a2b2c2d2a2\\" compress_string(\\"\\") -> \\"\\" ``` **Constraints:** - Input string length can be up to 1000 characters.","solution":"def compress_string(s): Compresses the given string using run-length encoding. Parameters: s (str): The input string to be compressed. Returns: str: The compressed string. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(s[i-1] + (str(count) if count > 1 else \'\')) count = 1 compressed.append(s[-1] + (str(count) if count > 1 else \'\')) return \'\'.join(compressed)"},{"question":"In this task, you are required to write a function named `validate_student_records` that checks the validity of student records stored in a list of dictionaries. Each dictionary represents a student and contains the keys `name`, `id`, and `grades`. The `grades` key should map to a list of integers representing the student\'s grades. Your function should: 1. Accept a list of dictionaries as input. 2. Ensure each dictionary contains the keys `name`, `id`, and `grades`. 3. Validate that the `name` is a non-empty string. 4. Validate that the `id` is a non-empty string. 5. Validate that the `grades` is a list of integers. 6. If any of the records are invalid, return `False`. 7. If all records are valid, return `True`. Function Signature: ```python def validate_student_records(records: list) -> bool: pass ``` Example: ```python records = [ {\\"name\\": \\"Alice\\", \\"id\\": \\"A001\\", \\"grades\\": [85, 90, 78]}, {\\"name\\": \\"\\", \\"id\\": \\"A002\\", \\"grades\\": [80, 88, 92]}, {\\"name\\": \\"Bob\\", \\"id\\": \\"A003\\", \\"grades\\": [75, 85, 79]} ] is_valid = validate_student_records(records) print(is_valid) # This should print False because the second record has an invalid `name`. records = [ {\\"name\\": \\"Alice\\", \\"id\\": \\"A001\\", \\"grades\\": [85, 90, 78]}, {\\"name\\": \\"Eve\\", \\"id\\": \\"A002\\", \\"grades\\": [80, 88, 92]}, {\\"name\\": \\"Bob\\", \\"id\\": \\"A003\\", \\"grades\\": [75, 85, 79]} ] is_valid = validate_student_records(records) print(is_valid) # This should print True because all records are valid. ``` To complete this task, you might need to use the `type` function to check data types and iterate through the list of student records to validate each one.","solution":"def validate_student_records(records: list) -> bool: for record in records: # Check if all required keys are present if not all(key in record for key in [\\"name\\", \\"id\\", \\"grades\\"]): return False # Validate \'name\' is a non-empty string if not isinstance(record[\\"name\\"], str) or not record[\\"name\\"]: return False # Validate \'id\' is a non-empty string if not isinstance(record[\\"id\\"], str) or not record[\\"id\\"]: return False # Validate \'grades\' is a list of integers if not isinstance(record[\\"grades\\"], list) or not all(isinstance(grade, int) for grade in record[\\"grades\\"]): return False return True"},{"question":"Create a function to analyze a list of numbers and output a summary with: 1. The highest number. 2. The lowest number. 3. The mean value, rounded to two decimal places. 4. The median value. The function should output a dictionary with the keys: \'max\', \'min\', \'mean\', \'median\'. You should write self-contained code starting with: ``` def analyze_numbers(numbers: list) -> dict: ```","solution":"import statistics def analyze_numbers(numbers: list) -> dict: Analyzes a list of numbers and outputs a summary including: - The highest number. - The lowest number. - The mean value (rounded to two decimal places). - The median value. Returns a dictionary with the keys: \'max\', \'min\', \'mean\', \'median\'. if not numbers: raise ValueError(\\"The list of numbers is empty\\") summary = { \'max\': max(numbers), \'min\': min(numbers), \'mean\': round(statistics.mean(numbers), 2), \'median\': statistics.median(numbers) } return summary"},{"question":"You are given a list of positive integers `nums` and an integer `target`. Your task is to write a Python function `find_k_closest_numbers` that returns the `k` closest integers to `target` in the list. The result should be sorted in ascending order. You should use the `heapq` library to utilize efficient heap operations. **Function Signature:** ```python def find_k_closest_numbers(nums: List[int], target: int, k: int) -> List[int]: ``` **Parameters:** - `nums`: A list of positive integers. - `target`: An integer representing the target value. - `k`: An integer representing the number of closest integers to find. **Returns:** - A list of `k` closest integers to `target`, sorted in ascending order. **Constraints:** - The list `nums` has at least `k` elements. - The elements in the list and the target are all positive integers. - If there is a tie where two numbers are equally close to the target, the smaller number should be preferred. **Examples:** ```python assert find_k_closest_numbers([1, 2, 3, 4, 5], 3, 2) == [2, 3] assert find_k_closest_numbers([10, 15, 7, 3, 4], 8, 3) == [7, 10, 4] assert find_k_closest_numbers([100, 200, 300, 400], 250, 2) == [200, 300] ``` **Explanation:** The first example should return the two closest numbers to target 3, which are 2 and 3. The second example should return the three closest numbers to target 8, which are 7, 10, and 4 (with 4 preferred over 3 due to it being closer to 8 in terms of absolute difference). The third example returns the closest two numbers to target 250, which are 200 and 300.","solution":"from typing import List import heapq def find_k_closest_numbers(nums: List[int], target: int, k: int) -> List[int]: Returns the k closest integers to target in the nums list. heap = [] # Create max-heap such that we can keep track of k closest numbers for num in nums: # Use (absolute difference, num) as min-heap key heapq.heappush(heap, (abs(num - target), num)) # Extract k elements closest_numbers = [] for _ in range(k): closest_numbers.append(heapq.heappop(heap)[1]) # Sort the result in ascending order before returning return sorted(closest_numbers)"},{"question":"**Problem:** You are given a sequence of commands and a text. Each command can either add a character to the text, remove the last character from the text, or check if the text is a palindrome at that point. Your task is to implement a function that processes these commands and returns a list with results of the palindrome checks. **Function Name:** `process_text_commands` **Role of the Function:** This function will: 1. Take a list of strings, `commands`, where each command is either `\\"add <character>\\"`, `\\"remove\\"`, or `\\"check\\"`. 2. Maintain a text string that starts empty. 3. Apply each command in sequence: - `\\"add <character>\\"` adds the specified character to the end of the text. - `\\"remove\\"` removes the last character from the text (if the text isn\'t already empty). - `\\"check\\"` checks if the current text string is a palindrome and records the result. The function should return a list of boolean values, one for each `\\"check\\"` command, indicating whether or not the text at that point is a palindrome. **Function Signature:** ```python from typing import List def process_text_commands(commands: List[str]) -> List[bool]: # The implementation should be provided below pass ``` **Parameters:** 1. `commands`: A list of strings, each string being one of the three command types. **Returns:** A list of boolean values representing the results of each `\\"check\\"` command. **Example Usage:** ```python results = process_text_commands([ \\"add a\\", \\"add b\\", \\"add a\\", \\"check\\", \\"remove\\", \\"check\\" ]) print(results) # Output: [True, False] ``` **Notes:** - A palindrome is a string that reads the same backward as forward, e.g., \\"aba\\", \\"racecar\\", or \\"madam\\". - The implementation should efficiently handle the sequence of commands. - Edge cases to consider: adding and removing characters repeatedly, checking an empty string, etc.","solution":"from typing import List def process_text_commands(commands: List[str]) -> List[bool]: text = [] results = [] for command in commands: if command.startswith(\'add \'): _, char = command.split() text.append(char) elif command == \'remove\' and text: text.pop() elif command == \'check\': if text == text[::-1]: results.append(True) else: results.append(False) return results"},{"question":"You are tasked with creating a Python function that reads employee records from a CSV file and inserts them into an SQLite3 database. Each record contains the following fields: employee ID, name, department, and salary. The function should be named `import_employees_to_db` and it should accept two parameters: 1. `csv_path` (a string representing the path to the CSV file containing the employee records). 2. `database_path` (a string representing the path to the SQLite3 database file). The function should perform the following actions: 1. Open a connection to the SQLite database. 2. Read the CSV file and parse the employee records. 3. Insert each record into a table named `employees`. 4. If the table does not exist, create it first. The table should have columns: id (integer, primary key), name (text), department (text), and salary (real). 5. If the insertion is successful, print \\"Records inserted successfully!\\" Otherwise, handle any errors and print \\"Insertion failed!\\". 6. Ensure proper handling of database transactions and closing connections. Here is a structured approach to the function: 1. Verify the database connection. 2. Create the `employees` table if it does not exist. 3. Read and parse the CSV file. 4. Insert each employee record into the table. 5. Print appropriate success or error messages. 6. Ensure that the database connection is properly closed. Make use of the `sqlite3.connect` and `csv.reader` libraries for connecting to the database and reading the CSV file respectively.","solution":"import sqlite3 import csv def import_employees_to_db(csv_path, database_path): Reads employee records from a CSV file and inserts them into an SQLite3 database. Parameters: csv_path (str): The path to the CSV file containing the employee records. database_path (str): The path to the SQLite3 database file. try: # Establish a database connection conn = sqlite3.connect(database_path) cursor = conn.cursor() # Create the \'employees\' table if it doesn\'t exist cursor.execute(\'\'\' CREATE TABLE IF NOT EXISTS employees ( id INTEGER PRIMARY KEY, name TEXT, department TEXT, salary REAL ) \'\'\') # Read and insert employee records from the CSV file with open(csv_path, newline=\'\') as csvfile: reader = csv.reader(csvfile) next(reader) # Skip header row for row in reader: cursor.execute(\'INSERT INTO employees (id, name, department, salary) VALUES (?, ?, ?, ?)\', row) # Commit the transaction conn.commit() print(\\"Records inserted successfully!\\") except Exception as e: print(\\"Insertion failed!\\", e) finally: # Ensure the database connection is always closed conn.close()"}]'),R={name:"App",components:{PoemCard:C},data(){return{searchQuery:"",visibleCount:4,poemsData:F,isLoading:!1}},computed:{filteredPoems(){const a=this.searchQuery.trim().toLowerCase();return a?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(a)||e.solution&&e.solution.toLowerCase().includes(a)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(a=>setTimeout(a,1e3)),this.visibleCount+=4,this.isLoading=!1}}},I={class:"search-container"},D={class:"card-container"},P={key:0,class:"empty-state"},N=["disabled"],Y={key:0},z={key:1};function L(a,e,l,m,r,s){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",I,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):u("",!0)]),t("div",D,[(n(!0),i(b,null,w(s.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),s.displayedPoems.length===0?(n(),i("div",P,' No results found for "'+d(r.searchQuery)+'". ',1)):u("",!0)]),s.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>s.loadMore&&s.loadMore(...o))},[r.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",Y,"See more"))],8,N)):u("",!0)])}const j=c(R,[["render",L],["__scopeId","data-v-0e898d77"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/30.md","filePath":"chatai/30.md"}'),O={name:"chatai/30.md"},V=Object.assign(O,{setup(a){return(e,l)=>(n(),i("div",null,[x(j)]))}});export{M as __pageData,V as default};
