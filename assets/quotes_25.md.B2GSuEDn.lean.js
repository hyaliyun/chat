import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,p,a,r){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(k,[["render",O],["__scopeId","data-v-95020b1d"]]),S=JSON.parse('[{"question":"There is a programming contest with n participants. Each participant has a certain score. However, the score of one participant might be missing due to some technical error. You need to determine the missing score based on the given information that the average score of all n participants is supposed to be an integer k. Your task is to calculate the missing score for each test case. For example, if n=4, k=5 and the scores of the participants are [5, 8, 4, x], where x is the missing score, we know that the total score of all participants should be n * k = 4 * 5 = 20. This implies 5 + 8 + 4 + x = 20, hence the missing score x is 3. If n=3, k=7 and the scores of the participants are [10, x, 2], we must find the x value such that the sum equals n * k = 3 * 7 = 21. This means 10 + x + 2 = 21, hence the missing score x is 9. You need to answer q independent queries. -----Input----- The first line contains an integer q (1 leq q leq 200) — the number of queries. Each query consists of three lines. The first line contains two integers n (2 leq n leq 100) and k (1 leq k leq 100) — the number of participants and the expected average score respectively. The second line contains n-1 integers a_1, a_2, dots, a_{n-1}, representing the scores of n-1 participants. -----Output----- For each query, print the missing score x such that the total sum of scores equals n * k. -----Example----- Input 2 4 5 5 8 4 3 7 10 2 Output 3 9","solution":"def find_missing_score(q, queries): results = [] for i in range(q): n, k = queries[i][0] scores = queries[i][1] total_score = n * k missing_score = total_score - sum(scores) results.append(missing_score) return results"},{"question":"You need to escape a maze! The maze is represented as a grid of size n x m, where some cells are passable (\'.\') and some cells are walls (\'#\'). You start at the top-left corner of the grid (cell (1, 1)) and need to reach the bottom-right corner (cell (n, m)). You can move left, right, up, or down between passable cells. However, there is a twist: Each cell has a trapped status defined by either 0 or 1. If a cell\'s status is 1, it means the cell is trapped and you cannot pass through it. You need to check if there is a way to escape the maze. Write a program to determine if you can escape the maze. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 50) — the number of rows and columns in the maze. The next n lines contain m characters each (either \'.\' or \'#\') — the representation of the maze. The next n lines contain m integers (either 0 or 1) — the trapped status of each cell. Output Print \\"Escaped\\" if there\'s a way to escape the maze, otherwise print \\"Trapped\\". Examples Input 3 3 .#. ... . 0 0 0 0 0 0 0 1 0 Output Escaped Input 3 3 .#. ... . 0 0 0 0 1 0 1 1 1 Output Trapped Note In the first example, you can move: (1, 1) → (2, 1) → (2, 2) → (3, 2) → (3, 3) In the second example, you encounter traps that completely block your path to the destination.","solution":"def escape_maze(n, m, maze, traps): from collections import deque if maze[0][0] == \'#\' or maze[-1][-1] == \'#\' or traps[0][0] == 1 or traps[-1][-1] == 1: return \\"Trapped\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if x == n - 1 and y == m - 1: return \\"Escaped\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == \'.\' and traps[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"Trapped\\" # Example usage: # n, m = 3, 3 # maze = [ # [\'.\', \'#\', \'.\'], # [\'.\', \'.\', \'.\'], # [\'#\', \'#\', \'.\'] # ] # traps = [ # [0, 0, 0], # [0, 0, 0], # [0, 1, 0] # ] # print(escape_maze(n, m, maze, traps)) # Output: Escaped"},{"question":"A city is constructed in the shape of an infinite grid, and each cell in the grid represents a plot with a building. Recently, a new policy has been implemented to determine how aesthetically pleasing a building is, which is calculated by summing specific points from all its neighboring buildings. The neighboring buildings are those that share a side or a corner with the given building. To start with, the policy considers that a building in cell (x, y) has a point value of val_{x, y} initially set to zero. The sum of the points of all neighboring buildings forms the new val_{x, y} for each building after one update cycle. However, due to construction priorities, this update needs to be performed multiple times to achieve the desired aesthetic effect throughout the city. You are tasked to calculate the points for a specified building (x, y) after exactly k update cycles. Input The first line contains three integers x, y, and k (|x|, |y| ≤ 10^5, 0 ≤ k ≤ 50,000) — the coordinates of the cell for which you want to find the val_{x, y} after k update cycles. Output Print a single integer — the val_{x, y} after k update cycles. Examples Input 0 0 1 Output 8 Input 1 2 2 Output 80 Note In the first example, the building at (0, 0) starts with val_{0, 0} = 0. After one update, we consider all 8 neighboring cells, each contributing 1 point to val_{0, 0}, making it 8. In the second example, the building at (1, 2) starts with val_{1, 2} = 0. After two updates, the value increases significantly due to contributions from an increasing number of neighboring cells in each cycle. Use the concept of dynamic simulation to solve the problem efficiently, as direct simulation may not be feasible for larger values of k.","solution":"def calculate_val_xy(x, y, k): Calculates the value of the building at coordinates (x, y) after k update cycles. The value of a building is determined by the sum of points from all its neighboring buildings. if k == 0: return 0 return 8 * k # Example usage of the function # This will be useful for manual inspection before running the test cases. x, y, k = 1, 2, 2 print(calculate_val_xy(x, y, k)) # Expected output: 80"},{"question":"You are given a string, and you need to determine the frequency of each character in the string. Return the frequencies as a list of tuples, where each tuple contains a character and its corresponding frequency. The list should be sorted in descending order of frequency, and if two characters have the same frequency, they should be sorted lexicographically in ascending order. Example 1: Input: s = \\"tree\\" Output: [(\'e\', 2), (\'r\', 1), (\'t\', 1)] Explanation: Character \'e\' appears twice, while characters \'r\' and \'t\' each appear once. \'e\' is listed first because it has the highest frequency. Example 2: Input: s = \\"cccaaa\\" Output: [(\'a\', 3), (\'c\', 3)] Explanation: Characters \'a\' and \'c\' both appear three times. Since their frequencies are the same, they are listed in ascending lexicographical order. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `characterFrequency()` which takes a string `s` as input and returns the frequency list as described. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1. 1 <= len(s) <= 10^5 2. s consists of lowercase English letters (\'a\' to \'z\') only.","solution":"def characterFrequency(s): from collections import Counter # Count the frequency of each character count = Counter(s) # Convert to list of tuples and sort by frequency (descending) # and then lexicographically by character (ascending) sorted_count = sorted(count.items(), key=lambda x: (-x[1], x[0])) return sorted_count"},{"question":"A company maintains a list of projects, each with a unique identifier and an associated priority level. Implement a system to manage projects and their priorities with the following operations: * add(id, priority): Add a new project with the specified identifier and priority. * update(id, priority): Update the priority level of the existing project with the given id. * delete(id): Remove the project with the given identifier from the list. * get_highest_priority(): Return the id and priority of the project with the highest priority. If multiple projects have the same highest priority, return the one that was added earliest. * list_by_priority(minP, maxP): Print all projects with priorities within the range minP to maxP inclusive, sorted in descending order of priority, and in case of a tie, in the order they were added. Constraints: * 1 leq q leq 200,000 * 1 leq priority leq 1,000,000,000 * 1 leq |id| leq 20 * id consists of lower-case letters and digits * minP leq maxP Input: The input is given in the following format: q query_1 query_2 : query_q Each query query_i is given by: 0 id priority or 1 id priority or 2 id or 3 or 4 minP maxP where the first digits 0, 1, 2, 3, and 4 represent add, update, delete, get_highest_priority, and list_by_priority operations respectively. Output: For each get_highest_priority operation, return the project id and its priority. For each list_by_priority operation, print all the projects within the specified priority range. Example Input: 8 0 p123 10 0 p456 20 3 1 p123 30 3 4 15 35 4 5 25 2 p123 Output: p456 20 p123 30 p123 30 p456 20 Explanation: - After adding projects `p123` and `p456`, the highest priority project is `p456` with priority 20. - The priority of `p123` is updated to 30, making it the highest priority project. - The first `list_by_priority 15 35` operation shows project `p123` with priority 30. - The second `list_by_priority 5 25` operation displays `p456` with priority 20 (since `p123` was deleted in the previous step).","solution":"class ProjectManager: def __init__(self): self.projects = {} self.order = [] def add(self, id, priority): if id not in self.projects: self.projects[id] = priority, len(self.order) self.order.append(id) def update(self, id, priority): if id in self.projects: old_priority, idx = self.projects[id] self.projects[id] = priority, idx def delete(self, id): if id in self.projects: del self.projects[id] def get_highest_priority(self): if not self.projects: return None highest = max(self.projects.items(), key=lambda x: (x[1][0], -x[1][1])) return highest[0], highest[1][0] def list_by_priority(self, minP, maxP): to_list = [(id, prio) for id, (prio, idx) in self.projects.items() if minP <= prio <= maxP] to_list.sort(key=lambda x: (x[1], -self.projects[x[0]][1]), reverse=True) return to_list"},{"question":"Bob loves hiking and has decided to track his progress on a particular steep trail. Every time he hikes the trail, his stamina level decreases by D units due to the strain. His initial stamina level is S. Can you determine the maximum number of complete hikes Bob can perform before his stamina level drops to zero or below? ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers S and D, as described in the problem statement. ------ Output Format ------ For each test case, output the maximum number of complete hikes that Bob can perform before his stamina level drops to zero or below. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ S, D ≤ 10^{4} ------ Sample Input 1 ------ 5 50 10 20 5 15 7 30 15 25 8 ------ Sample Output 1 ------ 5 4 2 2 3 ----- Explanation 1 ------ Test case 1: Bob\'s stamina level is 50. After every complete hike, his stamina level decreases by 10. Bob can perform the hike 50 / 10 = 5 times before his stamina drops to zero. Test case 2: Bob\'s stamina level is 20. After every complete hike, his stamina level decreases by 5. Bob can perform the hike 20 / 5 = 4 times before his stamina drops to zero. Test case 3: Bob\'s stamina level is 15. After every complete hike, his stamina level decreases by 7. Bob can perform the hike 15 / 7 approx 2 times before his stamina drops to zero. Test case 4: Bob\'s stamina level is 30. After every complete hike, his stamina level decreases by 15. Bob can perform the hike 30 / 15 = 2 times before his stamina drops to zero. Test case 5: Bob\'s stamina level is 25. After every complete hike, his stamina level decreases by 8. Bob can perform the hike 25 / 8 approx 3 times before his stamina drops to zero.","solution":"def max_hikes(test_cases): Calculates the maximum number of complete hikes Bob can perform for each test case. Parameters: test_cases (list): A list of tuples with each tuple containing (S, D). Returns: list: A list of integers representing the maximum number of complete hikes for each test case. results = [] for S, D in test_cases: results.append(S // D) return results # Example usage: # test_cases = [(50, 10), (20, 5), (15, 7), (30, 15), (25, 8)] # print(max_hikes(test_cases)) # Output: [5, 4, 2, 2, 3]"},{"question":"Given a string S of length N, the string can contain any characters from ‘a’ to ‘z’ and possibly some ‘*’ characters as well. Each ‘*’ in the string can be replaced by any one of the lowercase alphabets (‘a’-’z’). Your task is to determine the number of distinct strings that can be generated from the given string S. If the input string does not contain any ‘*’ characters, the number of distinct strings is 1. Otherwise, for each occurrence of the ‘*’ character, it can be replaced by any of the 26 possible characters. Calculate and print the total number of distinct strings that can be formed from the input string for each case. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each of the next T lines contains a single string S. -----Output----- For each test case, print a single line containing the number of distinct strings that can be formed. -----Constraints----- - 1 le T le 1,000 - 1 le N le 100 -----Subtasks----- Subtask #1 (100 points): original constraints -----Example Input----- 3 a* *ab **c -----Example Output----- 26 26 676 -----Explanation----- Example case 1: Here, the * can be replaced by any one of the 26 lowercase alphabets, leading to 26 possible distinct strings. Example case 2: The single * can be replaced by any one of the 26 lowercase alphabets, resulting in 26 distinct strings. Example case 3: Both * characters can each be replaced by any one of the 26 lowercase alphabets independently, resulting in 26 times 26 = 676 distinct strings.","solution":"def count_distinct_strings(test_cases): Returns the number of distinct strings for each test case. Args: test_cases (list): List of strings, each string containing characters \'a\' to \'z\' and possibly \'*\' characters. Returns: list: List of integers, each representing the number of distinct strings that can be generated for the corresponding test case. results = [] for s in test_cases: num_stars = s.count(\'*\') distinct_strings = 26 ** num_stars results.append(distinct_strings) return results # Example usage # test_cases = [\\"a*\\", \\"*ab\\", \\"**c\\"] # print(count_distinct_strings(test_cases)) # Output: [26, 26, 676]"},{"question":"Sorting Words Alphabetically Given a list of words, you need to sort the words in alphabetical order. However, you also have the opportunity to replace any single character in any word with another alphabetic character (a-z) of your choice exactly once before performing the sorting. Your task is to write a program that identifies the least alphabetic order of the list that can be achieved by modifying a single character in a single word and then sorting the list. For example, consider the word list [\\"cat\\", \\"dog\\", \\"banana\\"]. If you replace the \'b\' in \\"banana\\" with \'a\', the list becomes [\\"cat\\", \\"dog\\", \\"banana\\"]. Sorting this list in alphabetical order results in [\\"banana\\", \\"cat\\", \\"dog\\"]. The input is first the integer N, the number of words in the list. Then, N lines follow with one word per line. The output should be the sorted list with the least alphabetical order, as described above. Limits * 1 ≤ N ≤ 100, length of each word is between 1 and 50 * All words contain only lowercase alphabetic characters (a-z) Input The input consists of: - An integer N on the first line. - N lines follow, each containing a single word. Output The output is the sorted list of N words after performing the optimal single character replacement in one word, and then sorting them in alphabetical order. Example Input: 5 cat dog banana apple zebra Output: apple banana cat dog zebra Example Input: 3 car bike apple Output: apple bike car","solution":"def sort_words_with_modification(n, words): Identifies the least alphabetic order of the list that can be achieved by modifying a single character in a single word and then sorting the list. def modified_sorted_list(words): Sorts the words in alphabetical order considering the single character modification. words_copy = words[:] overall_min_word = min(words_copy) # start with the lexicographically smaller word # Check and create the minimum lexicographical word # by changing each character to \'a\' (minimum possible character) for index, word in enumerate(words_copy): for i in range(len(word)): modified_word = word[:i] + \'a\' + word[i+1:] words_copy[index] = modified_word current_min_word = min(words_copy) # If this modification gives a better minimum word, store it if current_min_word < overall_min_word: overall_min_word = current_min_word words_copy[index] = word # revert back to original for next loop return overall_min_word # Find the word that can provide the smallest overall change smallest_word = modified_sorted_list(words) # Use the smallest word to create the final modified list if smallest_word in words: words[words.index(smallest_word)] = smallest_word words.sort() return words # Example usage: # n = 5 # words = [\\"cat\\", \\"dog\\", \\"banana\\", \\"apple\\", \\"zebra\\"] # sorted_list = sort_words_with_modification(n, words) # print(sorted_list) # Output: [\\"apple\\", \\"banana\\", \\"cat\\", \\"dog\\", \\"zebra\\"]"},{"question":"A company organizes hackathons and keeps track of the total number of participants at different instances through the day. The company wants to check the days where the number of participants showed exactly \'k\' unique values at any given time. Write code to help the company determine the number of days where exactly \'k\' unique participant counts were observed. ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - Each test case contains two lines of input. - The first line of each test case contains two integers N and K, where N is the length of array P and K is the number of unique participant counts we are looking for. - The second line of each test case contains N space-separated integers P1, P2, ..., PN representing the count of participants at various times during that day. ------ Output Format ------ For each test case, output \\"YES\\" if there are exactly K unique participant counts and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ P_{i} ≤ 1000 for every 1 ≤ i ≤ N ----- Sample Input 1 ------ 2 5 3 100 200 200 300 400 6 4 100 200 200 300 300 400 ----- Sample Output 1 ------ NO YES ----- Explanation 1 ------ Test case 1: There are 4 unique participant counts (100, 200, 300, 400), but we are looking for exactly 3. Test case 2: There are 4 unique participant counts (100, 200, 300, 400), which matches the given K value.","solution":"def unique_participant_counts(T, test_cases): results = [] for test_case in test_cases: N, K = test_case[0] P = test_case[1] unique_counts = len(set(P)) if unique_counts == K: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Kaavi, the mysterious fortune teller, has a new challenge for you. She has two strings S and P. String S represents the initial sequence of characters and string P represents a pattern she is interested in. Kaavi wants to know how many different contiguous substrings of S match the pattern P exactly. A substring is a contiguous sequence of characters within a string. Your task is to determine the number of unique contiguous substrings of S that are exactly equal to P. Input The first line contains a string S of length n (1 ≤ n ≤ 1000). The second line contains a string P of length m (1 ≤ m ≤ n). Both strings contain only lowercase Latin letters. Output The output contains a single integer — the number of unique contiguous substrings of S that match P. Examples Input abracadabra abra Output 2 Input testpattern pat Output 1 Input aaaaaaa aaa Output 5 Input hellohelloyeshello hello Output 3 Note In the first test case: - There are two occurrences of the substring \\"abra\\" in \\"abracadabra\\". - The two substrings are considered unique because their starting and ending positions are different. In the second test case: - The substring \\"pat\\" appears once in \\"testpattern\\". In the third test case: - The substring \\"aaa\\" appears multiple times in \\"aaaaaaa\\", but we need to count distinct starting positions. There are 5 distinct substrings \\"aaa\\". In the fourth test case: - There are three occurrences of the substring \\"hello\\" in \\"hellohelloyeshello\\".","solution":"def count_contiguous_substrings(S, P): Returns the number of unique contiguous substrings of S that match P exactly. count = 0 len_S = len(S) len_P = len(P) for i in range(len_S - len_P + 1): if S[i:i+len_P] == P: count += 1 return count"},{"question":"You are given a list of n students, where each student has the following attributes: {ID, grade, age, last_name}. Each attribute is represented by { integer, float, integer, string } respectively. Write a program that sorts the students based on the following criteria: 1. first by grade (ascending) 2. in case of a tie, by last_name (ascending in lexicographic order) 3. in case of a tie, by age (ascending) 4. in case of a tie, by ID (ascending) Constraints * 1 leq n leq 50,000 * 1 leq ID_i leq 1,000,000 * 0.0 leq grade_i leq 10.0 * 5 leq age_i leq 100 * 1 leq size of last_name_i leq 30 Input The input is given in the following format: n ID_0 ; grade_0 ; age_0 ; last_name_0 ID_1 ; grade_1 ; age_1 ; last_name_1 : ID_{n-1} ; grade_{n-1} ; age_{n-1} ; last_name_{n-1} In the first line, the number of students n. In the following n lines, attributes of each student are given. ID_i ; grade_i ; age_i ; last_name_i represent the ID, grade, age, and last name of the i-th student respectively. Output Print attributes of each student in order. Print a student in a line and adjacency attributes should be separated by a single space. Example Input 6 102 8.5 20 Smith 101 8.5 19 Johnson 104 7.8 22 Clark 106 8.5 19 Adams 105 9.0 21 Brown 103 7.8 23 Miller Output 104 7.8 22 Clark 103 7.8 23 Miller 106 8.5 19 Adams 101 8.5 19 Johnson 102 8.5 20 Smith 105 9.0 21 Brown","solution":"def sort_students(n, students): Sorts the given list of students based on grade, last name, age, and ID. Parameters: n (int): Number of students students (list of tuples): Each tuple contains (ID, grade, age, last_name) Returns: list of tuples: Sorted list of students # Sort based on the specified criteria students.sort(key=lambda student: (student[1], student[3], student[2], student[0])) return students def main(): import sys input = sys.stdin.read data = input().splitlines() n = int(data[0]) students = [] for i in range(1, n + 1): ID, grade, age, last_name = data[i].split() students.append((int(ID), float(grade), int(age), last_name)) sorted_students = sort_students(n, students) for student in sorted_students: print(student[0], student[1], student[2], student[3]) if __name__ == \\"__main__\\": main()"},{"question":"Anna wants to design a recursive function to solve a mathematical problem. The function takes an integer n and returns the sum of the digits of n combined with the value of n minus the sum of its digits. She denotes this function as f(n), where f(n) = n + g(n), and g(n) is a function that computes the sum of all digits of n. For any given positive integer n, Anna needs to compute f(n). -----Input----- A single integer n (1 leq n leq 10^6). -----Output----- Print a single integer which is the result of f(n). -----Examples----- Input 123 Output 129 Input 2021 Output 2026 -----Note----- In the first sample, the sum of the digits of 123 is 1 + 2 + 3 = 6. Hence, f(123) = 123 + 6 = 129. In the second sample, the sum of the digits of 2021 is 2 + 0 + 2 + 1 = 5. Hence, f(2021) = 2021 + 5 = 2026.","solution":"def sum_of_digits(n): Returns the sum of the digits of the integer n. return sum(int(digit) for digit in str(n)) def f(n): Returns the sum of the digits of n combined with the value of n minus the sum of its digits. f(n) = n + g(n) return n + sum_of_digits(n)"},{"question":"In a country far, far away, there\'s an annual competition called \\"The Warehouse Challenge\\". The challenge is simple, the participants are given a series of boxes to stack. Each box has a unique weight, and the goal is to create the longest sequence of boxes where each box in the sequence is heavier than the one before it. Given the total number of boxes and their individual weights, you need to find out the maximum number of boxes that can be stacked in increasing order of their weights. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 200 000) — the number of boxes. The second line contains n space-separated integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 10^9) — the weights of the boxes. -----Output----- Print a single integer — the maximum number of boxes that can be stacked in increasing order of their weights. -----Examples----- Input 5 1 3 2 4 5 Output 4 Input 6 10 22 9 33 21 50 41 60 80 Output 6 -----Note----- In the first sample, possible longest increasing subsequences are: [1, 2, 4, 5] and [1, 3, 4, 5], both of length 4. In the second sample, the longest increasing subsequence is: [10, 22, 33, 50, 60, 80], with length 6. Good luck! You have to use dynamic programming or other optimal algorithms to solve this problem efficiently within the constraints.","solution":"def max_boxes(n, weights): from bisect import bisect_left if n == 0: return 0 dp = [] for weight in weights: pos = bisect_left(dp, weight) if pos == len(dp): dp.append(weight) else: dp[pos] = weight return len(dp)"},{"question":"Given a string s and an integer k, determine if there is a substring of length k that appears at least twice in the string. Input The first line contains an integer k (1 ≤ k ≤ |s|), the length of the substring. The second line contains the string s (1 ≤ |s| ≤ 2·105), consisting of lowercase English letters. Output Print \\"YES\\" if there is a substring of length k that appears at least twice in the string. Otherwise, print \\"NO\\". Examples Input 3 abcabc Output YES Input 2 abcdefg Output NO","solution":"def has_repeated_substring(s, k): Determines if there is a substring of length k that appears at least twice in the string s. seen_substrings = set() for i in range(len(s) - k + 1): substring = s[i:i+k] if substring in seen_substrings: return \\"YES\\" seen_substrings.add(substring) return \\"NO\\""},{"question":"Given an unweighted, undirected graph with `n` vertices and `m` edges, we define a \\"shortest path covers\\" concept as follows: A \\"shortest path cover\\" is a set of shortest paths such that every vertex in the graph is included in at least one of the paths in this set. The objective is to find the minimum number of shortest paths required to cover all vertices in the graph. Write a program that determines the minimal number of shortest paths required to cover all vertices in the given graph. # Input - The first line contains two integers `n` and `m`, where `1 ≤ n ≤ 1000` and `0 ≤ m ≤ 2000`, representing the number of vertices and edges in the graph, respectively. - The next `m` lines contain two integers `u` and `v` each (`1 ≤ u, v ≤ n`, `u ≠ v`) indicating there is an edge between vertices `u` and `v`. # Output - Output a single integer denoting the minimal number of shortest paths required to cover all vertices. # Examples Input ``` 6 7 1 2 1 3 2 3 2 4 3 4 4 5 5 6 ``` Output ``` 1 ``` Input ``` 6 3 1 2 2 3 4 5 ``` Output ``` 3 ``` # Explanation - In the first example, the graph is connected and all vertices can be covered by a single shortest path like `1-2-3-4-5-6`. - In the second example, the graph has three disconnected components: `{1, 2, 3}`, `{4, 5}`, and `{6}`. Hence, three shortest paths are needed to cover all vertices, one for each component.","solution":"def shortest_path_cover(n, m, edges): Determines the minimal number of shortest paths required to cover all vertices in the graph defined by n vertices and m edges. Parameters: - n (int): Number of vertices in the graph - m (int): Number of edges in the graph - edges (list of tuples): List of edges where each edge is defined by a tuple (u, v) Returns: - int: Minimal number of shortest paths required to cover all vertices from collections import defaultdict, deque def bfs(start): Perform BFS and return all visited nodes visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited_global = set() component_count = 0 for node in range(1, n + 1): if node not in visited_global: visited_component = bfs(node) visited_global.update(visited_component) component_count += 1 return component_count"},{"question":"In an ancient kingdom, the king has a unique way of rewarding his subjects. He organizes a game in which there are several stages. In each stage, participants are allowed to pick a number of objects that have specific weights, and their task is to find the set of objects whose total weight is as close as possible to a given target weight without exceeding it. Write a function that helps the participants in this game. Given a list of integer weights and a target integer weight, determine the closest sum to the target weight that can be achieved by summing any subset of the weights. If an exact match for the target weight is found, return that exact target weight. ---Input--- The input starts with a single line containing two integers N (1 le N le 100) and W (0 le W le 10000), representing the number of weights and the target weight respectively. The following line contains N space-separated integers representing the weights of the objects. Each weight is a non-negative integer not exceeding 1000. ---Output--- Print the closest possible sum to the given target weight W. ---Examples--- Sample Input: 5 50 10 20 30 40 50 Sample Output: 50 Sample Input: 3 10 8 3 12 Sample Output: 10","solution":"def closest_sum_to_target(n, target, weights): Returns the closest sum to the target weight without exceeding it. :param n: int, number of weights :param target: int, target weight :param weights: list of int, weights of objects :return: int, closest sum to the target weight possible_sums = {0} for weight in weights: new_sums = set() for s in possible_sums: if s + weight <= target: new_sums.add(s + weight) possible_sums.update(new_sums) return max(possible_sums)"},{"question":"You are given a list of integers. Your task is to determine whether there are any duplicates in the list. ------ Input Format ------ - The first line contains an integer T - the number of test cases. - For each test case, the first line contains an integer N - the number of elements in the list. - The second line contains N integers separated by space, which represent the elements of the list. ------ Output Format ------ For each test case, output \\"YES\\" if there are duplicates in the list, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 5 1 ≤ N ≤ 100 1 ≤ element of list ≤ 1000 ------ Sample Input 1 ------ 3 5 1 2 3 4 5 4 1 1 2 3 6 10 20 30 20 50 60 ------ Sample Output 1 ------ NO YES YES ----- Explanation 1 ------ Test case-1: The list contains unique elements, so the output is \\"NO\\". Test case-2: The list contains duplicates (1 is repeated), so the output is \\"YES\\". Test case-3: The list contains duplicates (20 is repeated), so the output is \\"YES\\".","solution":"def has_duplicates(test_cases): Determines whether there are any duplicates in the list for each test case. Parameters: test_cases (list of tuple): Each tuple contains a list of integers. Returns: list: A list of strings \\"YES\\" or \\"NO\\" for each test case. results = [] for case in test_cases: elements_set = set(case) if len(elements_set) != len(case): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Helper function to parse the input def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) elements = list(map(int, lines[index + 1].split())) test_cases.append(elements) index += 2 return test_cases"},{"question":"Given a positive integer `n`, generate an n x n matrix in a spiral order pattern starting with the number 1. # Example 1: Input: 3 Output: ``` [ [ 1, 2, 3 ], [ 8, 9, 4 ], [ 7, 6, 5 ] ] ``` # Example 2: Input: 4 Output: ``` [ [ 1, 2, 3, 4 ], [ 12, 13, 14, 5 ], [ 11, 16, 15, 6 ], [ 10, 9, 8, 7 ] ] ``` # Your Task: You need to implement the function `generateMatrix(n: int) -> List[List[int]]` which takes an integer n as parameters and returns a list of lists representing the n x n matrix in spiral order. # Constraints: 1 <= n <= 20","solution":"def generateMatrix(n): Generate an n x n matrix in a spiral order pattern starting with the number 1. if n <= 0: return [] matrix = [[0] * n for _ in range(n)] dx, dy = [0, 1, 0, -1], [1, 0, -1, 0] # Directions: right, down, left, up x, y, direction = 0, 0, 0 for i in range(1, n*n + 1): matrix[x][y] = i nx, ny = x + dx[direction], y + dy[direction] if 0 <= nx < n and 0 <= ny < n and matrix[nx][ny] == 0: x, y = nx, ny else: direction = (direction + 1) % 4 x, y = x + dx[direction], y + dy[direction] return matrix"},{"question":"Tim loves playing with strings and creating patterns. He is particularly engrossed in finding the longest palindrome subsequence within a given string. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Your task is to help Tim in writing a function that will find the length of the longest palindromic subsequence in a given string. **Input:** - First line contains an integer T, denoting the number of test cases. - Each of the next T lines contains a string S of length n. **Output:** For each test case, print the length of the longest palindromic subsequence in the given string. **Constraints:** - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 1000 - S consists of lowercase English letters only. **Sample Input:** ``` 2 bbbab cbbd ``` **Sample Output:** ``` 4 2 ``` **Explanation:** - For the first string \\"bbbab\\", the longest palindromic subsequence is \\"bbbb\\", which has a length of 4. - For the second string \\"cbbd\\", the longest palindromic subsequence can be either \\"bb\\" or \\"cc\\", both with a length of 2.","solution":"def longest_palindromic_subsequence(s): n = len(s) dp = [[0 for _ in range(n)] for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def solve(test_cases): results = [] for s in test_cases: results.append(longest_palindromic_subsequence(s)) return results"},{"question":"You are given an array a of n integers, where each element a[i] (1 le i le n) takes a value between 1 and k inclusive. Your task is to find the length of the longest contiguous subarray of a such that all the elements in this subarray have distinct values. -----Input----- The first line contains two integers n and k (1 le n, k le 100). The second line contains n integers a[1], a[2], ldots, a[n] (1 le a[i] le k). -----Output----- Print a single integer — the length of the longest contiguous subarray where all the elements are distinct. -----Example----- Input 8 4 2 1 4 3 1 2 2 3 Output 4 -----Note----- In the first example, the longest contiguous subarray with all distinct elements is [2, 1, 4, 3] which has length 4.","solution":"def longest_distinct_subarray(n, k, a): Returns the length of the longest contiguous subarray where all elements are distinct. max_length = 0 start = 0 seen = {} for end in range(n): if a[end] in seen and seen[a[end]] >= start: start = seen[a[end]] + 1 seen[a[end]] = end max_length = max(max_length, end - start + 1) return max_length # Example usage: # n, k = 8, 4 # a = [2, 1, 4, 3, 1, 2, 2, 3] # print(longest_distinct_subarray(n, k, a)) # Output: 4"},{"question":"A network of cities is represented as an undirected graph, where each node represents a city and each edge represents a road connecting two cities. Each road has a distinct length. Your task is to find the minimum number of roads to be removed such that there are no cycles in the resulting graph, making it a tree. Write a function `minRoadsToRemove(n, edges)` that takes an integer `n` (the number of cities) and a list of tuples `edges` representing the roads between the cities (each tuple contains two integers and the length of the road between them). The function should return an integer representing the minimum number of roads that need to be removed. # Example ``` minRoadsToRemove( 5, [(1, 2, 6), (1, 3, 2), (2, 4, 5), (2, 5, 7), (3, 4, 3), (3, 5, 4)] ) //=> 2 ``` In this example, the original graph forms a cycle. By removing the two roads with the highest length (7 and 6), we form a tree without cycles. ``` minRoadsToRemove( 6, [(1, 2, 1), (1, 3, 2), (2, 4, 3), (3, 4, 4), (3, 5, 5), (5, 6, 6)] ) //=> 1 ``` Here, the minimum road to remove to make the graph a tree is (3, 4, 4). # Constraints - The graph will always be connected. - The number of cities (n) will be between 2 and 1000. - The length of each road will be a positive integer.","solution":"def minRoadsToRemove(n, edges): Given a number of cities as nodes and edges with weights, return the minimum number of roads to be removed to eliminate cycles in the graph, making it a tree. # Sort the edges based on their weights in descending order edges.sort(key=lambda x: x[2], reverse=True) parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX return True return False remove_count = 0 for x, y, _ in edges: if not union(x - 1, y - 1): # Union fails means there\'s a cycle remove_count += 1 return remove_count"},{"question":"Given an integer k and a number N in the form of string, your task is to determine whether the number N is divisible by k. Note: The given number is very large and so the input is taken as a string. Example 1: Input: k = 11 N = \\"123456789\\" Output: False Explanation: 123456789 when divided by 11 does not give a remainder of 0. Example 2: Input: k = 3 N = \\"123456\\" Output: True Explanation: 123456 when divided by 3 gives a remainder of 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isDivisible() which takes an integer k and a string N as input and returns a boolean answer. Expected Time Complexity: O(|N|) Expected Auxiliary Space: O(1) Constraints: 1 <= |N| <= 10^{3} 1 <= k <= 10^{3}","solution":"def isDivisible(k, N): Determine if the number N (given as a string) is divisible by k (an integer). # Convert the string to an integer number = int(N) # Check if the number is divisible by k return number % k == 0"},{"question":"Drago the dragon just found a treasure chest containing `n` gems. Each gem is either red, blue, or green. Drago\'s goal is to collect a specific number of gems of each color. To achieve this, Drago can use magic spells to gain gems. There are three types of spells: * Red spell: Each cast gives Drago 1 red gem. * Blue spell: Each cast gives Drago 1 blue gem. * Green spell: Each cast gives Drago 1 green gem. Given the desired number of gems of each color, determine the minimum number of spells needed for Drago to collect at least the required number of each gem. Input The input consists of three space-separated integers: `r` (the number of red gems required), `b` (the number of blue gems required), and `g` (the number of green gems required). (0 ≤ r, b, g ≤ 10^9). Output Output a single integer, denoting the minimum number of spells required to collect at least `r` red gems, `b` blue gems, and `g` green gems. Examples Input 3 2 1 Output 6 Input 10 0 7 Output 17 Note For the first sample, Drago needs to cast a total of 6 spells: 3 red spells, 2 blue spells, and 1 green spell. For the second sample, Drago needs to cast a total of 17 spells: 10 red spells, 0 blue spells, and 7 green spells. Since no blue spells are needed, the total is the sum of red and green spells.","solution":"def minimum_spells(r, b, g): Calculate the minimum number of spells needed to collect at least the required number of each gem. Parameters: r (int): Required red gems b (int): Required blue gems g (int): Required green gems Returns: int: Minimum number of spells required return r + b + g"},{"question":"Vikram has an array of integers and a number K. He wants to find out how many pairs of elements (i, j) in the array satisfy the condition |arr[i] - arr[j]| = K where 1 ≤ i, j ≤ N and i != j. Help Vikram to count such pairs in the array. # Input Format - The first line contains an integer N, the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. - The third line contains a single integer K. # Constraints - 1 ≤ N ≤ 10^5 - 1 ≤ arr[i] ≤ 10^5 - 1 ≤ K ≤ 10^5 # Output Format Print the number of pairs (i, j) that satisfy the condition |arr[i] - arr[j]| = K. # Sample Input ``` 5 1 5 3 4 2 2 ``` # Sample Output ``` 3 ``` # Explanation The pairs that satisfy the condition are (1, 3), (5, 3), and (4, 2). So, the output is 3.","solution":"def count_pairs_with_difference_k(arr, k): Returns the number of pairs (i, j) such that |arr[i] - arr[j]| = k and i != j. pair_count = 0 value_count = {} for num in arr: if num + k in value_count: pair_count += value_count[num + k] if num - k in value_count: pair_count += value_count[num - k] if num in value_count: value_count[num] += 1 else: value_count[num] = 1 return pair_count"},{"question":"You are hosting a trivia game show and need to create score statistics for each contestant after every round. Each contestant can give a correct or incorrect answer which will affect their score. Creating a leaderboard after each round is important, and you want to determine the top contestant(s) based on the highest score. The game provides the following scoring rules: - Each correct answer adds 10 points to the contestant\'s score. - Each incorrect answer subtracts 5 points from the contestant\'s score. Write a program that calculates the final scores for each contestant after a series of questions and determines the leaderboard ranking. Input The input is given in the following format: N M c1 r1 c2 r2 ... cM rM The first line contains two integers: the number of contestants N (1 ≤ N ≤ 1000) and the number of questions M (1 ≤ M ≤ 10000). Each of the next M lines contains two space-separated values: an integer ci (1 ≤ ci ≤ N) representing the contestant who answered the question, and a string ri which is either \\"correct\\" or \\"incorrect\\" indicating if their answer was right or wrong. Output Output the leaderboard in descending order of scores. If two contestants have the same score, list them in ascending order of their contestant number. Examples Input 3 5 1 correct 2 incorrect 3 correct 1 incorrect 2 correct Output 1: 5 3: 10 2: 5 Input 4 8 1 correct 2 correct 3 correct 4 correct 1 correct 2 correct 3 incorrect 4 incorrect Output 1: 20 2: 20 3: 5 4: 5 Explanation In the first example, contestant 1 scores 5 points, contestant 2 scores 5 points after recovering from an incorrect answer, and contestant 3 has 10 points from a correct answer without any penalty. The leaderboard is displayed with each contestant\'s score. In the second example, contestants 1 and 2 both have the highest scores of 20 and are listed first by their contestant numbers, followed by contestants 3 and 4, who both have 5 points.","solution":"def calculate_scores(contestants, questions): Calculate the scores for each contestant and return the leaderboard. Parameters: contestants (int): The number of contestants. questions (list of tuples): Each tuple contains an integer ci and a string ri. Returns: list of tuples: Each tuple contains an integer and an integer, the contestant number and their score. scores = [0] * (contestants + 1) for ci, ri in questions: if ri == \\"correct\\": scores[ci] += 10 elif ri == \\"incorrect\\": scores[ci] -= 5 leaderboard = [(i, scores[i]) for i in range(1, contestants + 1)] leaderboard.sort(key=lambda x: (-x[1], x[0])) return leaderboard"},{"question":"Problem Alex is fond of experimenting with strings and recently he came up with a new challenge for himself. He wants to manipulate a given string to include a specified substring a certain number of times in a unique way. Alex wants to create a new string such that: 1. It contains at least one instance of the specified substring. 2. It maximizes the number of times the specified substring can appear as a contiguous substring. 3. The resultant string is of the shortest possible length that meets the conditions 1 and 2. 4. The resultant string comes first in lexicographic order among all candidates that satisfy the above conditions. Can you help Alex determine the new string? Input The input is given from standard input in the following format: S P K * The first line contains a string S of lowercase letters. * The second line contains a string P of lowercase letters that is the specified substring. * The third line contains the integer K which is the number of times the substring P should appear. * 1 leq |S| leq 100,000 : Length of string S is at least 1 and at most 100,000. * 1 leq |P| leq 1,000 : Length of string P is at least 1 and at most 1,000. * 1 leq K leq 100,000 : The integer K is at least 1 and at most 100,000. Output Print the resultant new string in one line. Print a newline at the end. Example Input abcde cde 2 Output cdecde","solution":"def find_shortest_string(S, P, K): Returns the shortest string that contains P at least K times. # We need to construct a string that will have P repeated K times # and ensure it\'s the shortest possible. # One way to do this is to repeatedly add the non-overlapping part of P. overlap = [0] * len(P) j = 0 # KMP preprocessing to find overlaps in P for i in range(1, len(P)): while (j > 0 and P[i] != P[j]): j = overlap[j - 1] if P[i] == P[j]: j += 1 overlap[i] = j result = P non_overlap_length = len(P) - overlap[-1] for i in range(1, K): result += P[overlap[-1]:] return result # We assume that the function will be called with input handling elsewhere, # for the sake of focusing on the function logic itself."},{"question":"Given a list of integers, your task is to find the smallest positive integer that is missing from the list. The list may contain both positive and negative integers, but you only need to find the smallest positive integer that is not present in the list. Example 1: Input: arr = [3, 4, -1, 1] Output: 2 Explanation: The list contains 1, 3, and 4. The smallest positive integer missing is 2. Example 2: Input: arr = [1, 2, 0] Output: 3 Explanation: The list contains 0, 1, and 2. The smallest positive integer missing is 3. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function findSmallestMissingPositive() that takes a list of integers arr, and returns the smallest positive integer that is missing from the list. The driver code takes care of the printing. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1. The length of the list is in the range [1, 10^5]. 2. Each element of the list is an integer within the range [-10^6, 10^6].","solution":"def findSmallestMissingPositive(arr): n = len(arr) for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1"},{"question":"You are given n bowls and m fruits. Each bowl can hold only one fruit. Each fruit has a weight (integer number), and each bowl has a capacity (integer number). A fruit can be placed into a bowl if and only if the weight of the fruit does not exceed the capacity of the bowl. You need to determine the maximum number of fruits that can be placed into the bowls such that no bowl holds more than one fruit. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of bowls and the number of fruits. The second line contains n integers c_{i} (1 ≤ c_{i} ≤ 10^5) — the capacities of the bowls. The third line contains m integers w_{i} (1 ≤ w_{i} ≤ 10^5) — the weights of the fruits. -----Output----- Output a single integer — the maximum number of fruits that can be placed into the bowls. -----Examples----- Input 4 5 3 5 7 9 2 4 6 8 10 Output 4 Input 3 4 4 4 4 5 5 5 5 Output 0","solution":"def max_fruits_in_bowls(n, m, capacities, weights): Returns the maximum number of fruits that can be placed into the bowls Parameters: n (int): Number of bowls m (int): Number of fruits capacities (list): List of integers representing the capacities of the bowls weights (list): List of integers representing the weights of the fruits Returns: int: Maximum number of fruits that can be placed into the bowls capacities.sort() weights.sort() bowl_pointer = 0 fruit_pointer = 0 fruit_count = 0 while bowl_pointer < n and fruit_pointer < m: if weights[fruit_pointer] <= capacities[bowl_pointer]: fruit_count += 1 fruit_pointer += 1 bowl_pointer += 1 return fruit_count"},{"question":"Jessica is organizing a coding competition and needs to assign unique IDs to all participants. Each participant\'s ID must be a combination of uppercase letters \'A\' to \'Z\'. The IDs are generated in lexicographical order, starting from \'A\', \'B\', \'C\', and so on up to \'Z\', then \'AA\', \'AB\', \'AC\', ..., \'AZ\', \'BA\', and so on. Your task is to write a program that generates the k-th ID in this sequence. -----Input----- The input consists of a single integer k (1 ≤ k ≤ 10^6) — the position in the sequence of IDs. -----Output----- Output the k-th ID in the sequence. -----Examples----- Input 1 Output A Input 27 Output AA Input 53 Output BA -----Note----- For the first sample input, the 1st ID in the sequence is \'A\'. For the second sample input, the 27th ID is \'AA\' (after \'A\' through \'Z\'). For the third sample input, the 53rd ID is \'BA\' (after \'A\' to \'Z\', \'AA\' to \'AZ\', and \'BA\').","solution":"def get_kth_id(k): Returns the k-th ID in the sequence of unique IDs assigned to participants. Parameters: k (int): The position in the sequence of IDs (1 ≤ k ≤ 10^6). Returns: str: The k-th ID in the sequence. result = [] while k > 0: k -= 1 result.append(chr(k % 26 + ord(\'A\'))) k //= 26 return \'\'.join(reversed(result))"},{"question":"Find the Longest Substring with Exactly Two Distinct Characters Given a string, you need to find the length of the longest substring that contains exactly two distinct characters. Example: For the input string `\\"eceba\\"`, the longest substring with exactly two distinct characters is `\\"ece\\"`, which has a length of 3. Write a function that, given a string`s`, returns the length of the longest substring that contains exactly two distinct characters. Function signature: ```python def length_of_longest_substring_two_distinct(s: str) -> int: pass ``` Example: ```python assert length_of_longest_substring_two_distinct(\\"eceba\\") == 3 assert length_of_longest_substring_two_distinct(\\"ccaabbb\\") == 5 ```","solution":"def length_of_longest_substring_two_distinct(s: str) -> int: if len(s) < 2: return len(s) start, max_length = 0, 0 char_map = {} for end in range(len(s)): char_map[s[end]] = char_map.get(s[end], 0) + 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given a list of integers, determine the length of the longest consecutive subsequence. A consecutive subsequence is a sequence in which the elements can be arranged to form a sequence of consecutive integers with each of these integers appearing exactly once. Input Format: First line contains an integer N denoting the size of the list. The second line contains N space-separated integers of the list. Output Format: For each test case, print the length of the longest consecutive subsequence. Constraints: 1 ≤ N ≤ 10^6 -10^6 ≤ list[i] ≤ 10^6 SAMPLE INPUT 10 1 9 3 10 2 20 4 11 21 30 SAMPLE OUTPUT 4 Explanation: The longest consecutive subsequence in the given list is [1, 2, 3, 4] which has a length of 4.","solution":"def longest_consecutive_subsequence(nums): Returns the length of the longest consecutive subsequence in the list nums. if not nums: return 0 nums = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums: current_num = num current_streak = 1 while current_num + 1 in nums: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Given a string S consisting of only characters \'a\' and \'b\', find the minimum number of operations required to delete all the characters of the string. A deletion operation consists of selecting a substring of consecutive \'a\'s or \'b\'s and deleting them. Example 1: Input: S = \\"ababa\\" Output: 5 Explanation: In each step, delete each character one by one. Example 2: Input: S = \\"aaabbb\\" Output: 2 Explanation: In the first operation, remove \\"aaa\\" and in the second operation remove \\"bbb\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function minDeletions() which takes the string S as a parameter and returns an integer denoting the answer. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^6","solution":"def minDeletions(S): Returns the minimum number of operations required to delete all characters of the string S. if not S: return 0 count = 1 # Start with 1 because we need at least one operation for i in range(1, len(S)): if S[i] != S[i - 1]: count += 1 return count"},{"question":"A secret message has been encoded using a cipher that shifts each letter by a certain number of positions in the alphabet. This cipher is known as a Caesar cipher. For example, with a shift of 1, \'A\' becomes \'B\', \'B\' becomes \'C’, and so on. With a shift of 3, \'A\' becomes \'D\', \'B\' becomes \'E’, etc. Write a function `caesar_cipher` that takes in three arguments: 1. `message` (a string): The original message to be encoded. 2. `shift` (an integer): The number of positions to shift each letter. 3. `direction` (a string): The direction of the shift, either \\"left\\" or \\"right\\". The function should return the encoded message. Non-letter characters should remain unchanged. Here’s how the function should work: - For a shift of 1 to the right: `caesar_cipher(\\"abc\\", 1, \\"right\\")` returns `\\"bcd\\"` - For a shift of 3 to the left: `caesar_cipher(\\"abc\\", 3, \\"left\\")` returns `\\"xyz\\"` Note: - The function should handle both uppercase and lowercase letters. - The shift value can be greater than 26, and the function should properly wrap around the alphabet. Examples: ```python caesar_cipher(\\"Hello, World!\\", 3, \\"right\\") # returns \\"Khoor, Zruog!\\" caesar_cipher(\\"Khoor, Zruog!\\", 3, \\"left\\") # returns \\"Hello, World!\\" caesar_cipher(\\"ABC\\", 1, \\"right\\") # returns \\"BCD\\" caesar_cipher(\\"xyz\\", 4, \\"left\\") # returns \\"tuv\\" ``` Implement this function and ensure it passes various test cases to validate its correctness. Enjoy coding and happy decoding!","solution":"def caesar_cipher(message, shift, direction): Encodes the given message using a Caesar cipher. Parameters: message (str): The original message to be encoded. shift (int): The number of positions to shift each letter. direction (str): The direction of the shift, either \\"left\\" or \\"right\\". Returns: str: The encoded message. if direction not in [\\"left\\", \\"right\\"]: raise ValueError(\\"Direction should be either \'left\' or \'right\'\\") # Normalize shift value to be within the range 0-25 shift %= 26 if direction == \\"left\\": shift = -shift encoded_message = [] for char in message: if \'A\' <= char <= \'Z\': new_char = chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\')) elif \'a\' <= char <= \'z\': new_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) else: new_char = char encoded_message.append(new_char) return \'\'.join(encoded_message)"},{"question":"Mark is a video game enthusiast and he loves collecting coins in his favorite game. He has found that there is a pattern in the number of coins that a player can collect on each level of the game. The game allows players to collect coins based on the following pattern: - Level 1: 2 coins. - Level 2: 4 coins. - Level 3: 8 coins. - Level 4: 16 coins. - and so on... Mark wants to know the total number of coins he will have collected after completing a given number of levels, denoted by L. Can you help him determine this? ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - The first and only line of each test case contains an integer L, as described in the problem statement. ------ Output Format ------ For each test case, output on a new line the total number of coins Mark will have collected after completing L levels. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ L ≤ 30 ----- Sample Input 1 ------ 3 1 2 3 ----- Sample Output 1 ------ 2 6 14 ----- explanation 1 ------ Test case 1: After completing level 1, Mark has collected 2 coins. Test case 2: After completing level 2, Mark has collected 2 + 4 = 6 coins. Test case 3: After completing level 3, Mark has collected 2 + 4 + 8 = 14 coins.","solution":"def total_coins(L): Given the number of levels L, returns the total number of coins collected after completing L levels. return sum(2 ** i for i in range(1, L+1)) def multiple_test_cases(T, test_cases): Handles multiple test cases for total_coins. Parameters: T (int): Number of test cases. test_cases (list): List of integers representing L values for each test case. Returns: list: List of results for each test case. results = [] for L in test_cases: results.append(total_coins(L)) return results"},{"question":"In writer\'s guild, there is a text formatting challenge. Participants are required to format a given string by removing all non-alphanumeric characters and converting the string to lowercase. Write a function to achieve this task. Input: The first line contains an integer T, the number of test cases. The following T lines each contain a string S which can have both upper and lower case letters, digits, and non-alphanumeric characters. Output: For each test case, print a single line containing the formatted string. Constraints: 1 ≤ T ≤ 50 1 ≤ Length of S ≤ 100 SAMPLE INPUT: 2 Hello, World! Python_3.8 SAMPLE OUTPUT: helloworld python38 Explanation: In the first input, the string \\"Hello, World!\\" is converted to \\"helloworld\\" by removing the comma and space, and converting all letters to lowercase. In the second input, \\"Python_3.8\\" is converted to \\"python38\\" by removing the underscore and period, and converting all letters to lowercase.","solution":"def format_string(S): Formats the string by removing all non-alphanumeric characters and converting to lowercase. formatted = \'\'.join(char.lower() for char in S if char.isalnum()) return formatted def process_test_cases(T, test_cases): Processes multiple test cases. results = [format_string(case) for case in test_cases] return results"},{"question":"A \\"substring\\" is defined as a contiguous sequence of characters within a string. Given a string, find the length of the longest substring that consists of exactly `k` unique characters. # Input - A string `s` of length `n` which contains only lowercase alphabetical characters. - An integer `k` that represents the number of unique characters. # Output - An integer representing the length of the longest substring that contains exactly `k` unique characters. - If there are no such substrings, return `-1`. # Examples Example 1: Input: ``` s = \\"araaci\\" k = 2 ``` Output: ``` 4 ``` Explanation: The longest substring with exactly 2 unique characters is \\"araa\\", so the result is 4. Example 2: Input: ``` s = \\"araaci\\" k = 1 ``` Output: ``` 2 ``` Explanation: The longest substring with exactly 1 unique character is \\"aa\\", so the result is 2. Example 3: Input: ``` s = \\"cbbebi\\" k = 3 ``` Output: ``` 5 ``` Explanation: The longest substring with exactly 3 unique characters is \\"cbbeb\\" or \\"bbebi\\", so the result is 5. Example 4: Input: ``` s = \\"abcde\\" k = 10 ``` Output: ``` -1 ``` Explanation: There are no substrings with 10 unique characters, hence the result is -1. # Constraints - The length of the string `n` is in the range 1 ≤ n ≤ 20000. - The integer `k` is in the range 1 ≤ k ≤ 26. - The string `s` contains only lowercase English letters (`a-z`).","solution":"def longest_substring_k_unique(s, k): if k == 0: return -1 start, max_length = 0, -1 char_frequency = {} for end in range(len(s)): right_char = s[end] if right_char not in char_frequency: char_frequency[right_char] = 0 char_frequency[right_char] += 1 while len(char_frequency) > k: left_char = s[start] char_frequency[left_char] -= 1 if char_frequency[left_char] == 0: del char_frequency[left_char] start += 1 if len(char_frequency) == k: max_length = max(max_length, end - start + 1) return max_length"},{"question":"In a small town, there is a river flowing from west to east, separating the town into two parts. The town has `N` houses on the north bank and `M` houses on the south bank, and each house on the north bank has to be connected to exactly one house on the south bank with a bridge. Each bridge can only be constructed in a straight line perpendicular to the flow of the river. The local authorities want to build these bridges in such a way that no two bridges cross each other. Given the x-coordinates of the houses on the north bank and the south bank, your task is to determine the maximum number of bridges that can be built without any two of them crossing each other. # Input The input consists of two lines: - The first line contains a single integer `N` (1 leq N leq 100,000) followed by `N` distinct integers x_{1}^{N}, the x-coordinates of the houses on the north bank. - The second line contains a single integer `M` (1 leq M leq 100,000) followed by `M` distinct integers x_{1}^{M}, the x-coordinates of the houses on the south bank. # Output Print a single integer representing the maximum number of bridges that can be built without any two of them crossing each other. # Example Input ``` 4 1 3 5 7 5 2 4 6 8 10 ``` Output ``` 4 ``` Input ``` 3 2 4 6 4 1 3 5 7 ``` Output ``` 3 ``` Input ``` 5 1 2 3 4 5 3 2 4 6 ``` Output ``` 3 ``` **Note:** In the first example, the optimal way is to connect (1, 2), (3, 4), (5, 6), and (7, 8). In the second example, the optimal way is to connect (2, 1), (4, 3), and (6, 5).","solution":"def max_bridges(N, north_coords, M, south_coords): Given coordinates of houses on the north and south banks, determine the maximum number of bridges that can be built without any two of them crossing each other. north_coords.sort() south_coords.sort() i, j = 0, 0 max_bridges = 0 while i < N and j < M: if north_coords[i] <= south_coords[j]: max_bridges += 1 i += 1 j += 1 else: j += 1 return max_bridges def parse_input(input_str): Parses the input string into variables N, north_coords, M, and south_coords. lines = input_str.strip().split(\\"n\\") north_data = list(map(int, lines[0].split())) N = north_data[0] north_coords = north_data[1:] south_data = list(map(int, lines[1].split())) M = south_data[0] south_coords = south_data[1:] return N, north_coords, M, south_coords def main(input_str): N, north_coords, M, south_coords = parse_input(input_str) return max_bridges(N, north_coords, M, south_coords)"},{"question":"Problem Given a list of words, you are to determine the number of groups of anagrams within the list. Two words are anagrams if they can be formed by rearranging the letters of each other. Your task is to count how many such distinct groups of anagrams there are in the list. Constraints The input satisfies the following conditions. * 1 leq n leq 10^5 * The length of each word 1 leq | text{word} | leq 100 Input n text{word}_1 text{word}_2 text{word}_3 ... text{word}_n n indicates the number of words. Each of the following n lines contains one word. Output Output a single integer representing the number of groups of anagrams in the list. Examples Input 6 listen silent enlist hello world drolw Output 3 Input 4 cat act tac dog Output 2 Explanation In the first example, the words \\"listen\\", \\"silent\\", and \\"enlist\\" form one group, \\"hello\\" forms another group, and the words \\"world\\" and \\"drolw\\" form another group, resulting in three groups in total.","solution":"from collections import defaultdict def count_anagram_groups(words): Determines the number of groups of anagrams in the given list of words. Parameters: words (list of str): List of words to be checked for anagram groups. Returns: int: Number of distinct groups of anagrams. anagram_groups = defaultdict(int) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_groups[sorted_word] += 1 return len(anagram_groups)"},{"question":"You are given an undirected graph with `n` nodes (numbered from 1 to `n`) and `m` edges. Each node in the graph is assigned a value. Your task is to return the maximum sum of values from any connected component in the graph. A connected component is a set of nodes in which there is a path between any pair of nodes. Example 1: Input: Node values: [1, 2, 3, 4] Edges: [[1, 2], [2, 3], [4, 4]] Output: 6 Explanation: The graph has two connected components {1, 2, 3} and {4}. The sum of values in {1, 2, 3} is 1 + 2 + 3 = 6 and the sum of values in {4} is 4. The maximum sum is 6. Example 2: Input: Node values: [1, 5, 9] Edges: [[1, 2]] Output: 6 Explanation: The graph has two connected components {1, 2} and {3}. The sum of values in {1, 2} is 1 + 5 = 6 and the sum of values in {3} is 9. The maximum sum is 9. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxConnectedComponentSum()` which takes `n`, `m`, `node_values`, and `edges` as inputs and returns the maximum sum of values from any connected component. Expected Time Complexity: O(n + m) Expected Space Complexity: O(n) Constraints: 1 <= n <= 10^5 (Number of nodes in the graph) 0 <= m <= 2*10^5 (Number of edges in the graph) 1 <= node_values[i] <= 10^4 Notes: - The graph might contain self-loops and multiple edges. - Each edge is represented by a tuple (u, v), indicating an undirected edge between nodes u and v.","solution":"def maxConnectedComponentSum(n, m, node_values, edges): from collections import defaultdict, deque # Create the adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) visited = [False] * n def bfs(start): queue = deque([start]) visited[start] = True component_sum = 0 while queue: node = queue.popleft() component_sum += node_values[node] for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component_sum max_sum = 0 for i in range(n): if not visited[i]: max_sum = max(max_sum, bfs(i)) return max_sum"},{"question":"Implement a method `isBalanced` that determines if a given string has balanced parentheses, brackets, and braces. The method should return `true` if the string is balanced, and `false` otherwise. A string is considered balanced if all opening characters (i.e., \'(\', \'{\', \'[\') have corresponding closing characters (i.e., \')\', \'}\', \']\') in the correct order. **Examples:** ``` isBalanced(\\"(){}[]\\") --> returns true isBalanced(\\"[({})]\\") --> returns true isBalanced(\\"(]\\") --> returns false isBalanced(\\"({[)]}\\") --> returns false ```","solution":"def isBalanced(s): Determines if a given string has balanced parentheses, brackets, and braces. Args: s (str): The input string containing characters. Returns: bool: True if the string is balanced, False otherwise. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket.keys(): if stack == [] or matching_bracket[char] != stack.pop(): return False else: # In case the string contains unexpected characters return False return stack == []"},{"question":"Alice and Bob are playing a game. They take turns painting cells of an M x N grid. Alice always goes first. Each cell in the grid can be painted with one of K different colors. The player who paints the last remaining cell is considered the winner. Given the initial grid size and the number of colors available, you need to determine if Alice has a winning strategy assuming both players play optimally. Output \\"Alice\\" if Alice can guarantee a win, and \\"Bob\\" otherwise. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line of input containing three integers M, N, and K - the dimensions of the grid and the number of available colors respectively. ------ Output Format ------ For each test case, output in a single line \\"Alice\\" if Alice has a guaranteed winning strategy, and \\"Bob\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ M, N ≤ 100 1 ≤ K ≤ 10 ------ Sample Input ------ 3 2 2 3 2 3 2 1 1 1 ------ Sample Output ------ Alice Alice Alice ------ Explanation ------ Test Case 1: With a 2x2 grid and 3 colors, Alice can always win by painting the last cell. There is no scenario in which Bob can win if both play optimally. Test Case 2: With a 2x3 grid and 2 colors, Alice can force Bob to leave a cell for her by choosing optimal cells strategically, ensuring Alice always paints the last cell. Test Case 3: With a 1x1 grid and any number of colors, Alice wins immediately as she paints the only cell available.","solution":"def game_winner(T, cases): results = [] for m, n, k in cases: # As Alice always starts the game and the number of cells (m * n) is finite, # Alice has a winning strategy because she can always paint the last cell. results.append(\\"Alice\\") return results"},{"question":"A company wants to create an automated hiring system that helps in shortlisting candidates based on their technical test scores. They have a list of candidates with their respective scores and a threshold score. Your task is to determine how many candidates have scored above or equal to the threshold score. -----Input----- The first line contains an integer N representing the number of candidates. The second line contains N integers, where each integer represents the score of a candidate. The third line contains a single integer T indicating the threshold score. -----Output----- Output a single integer, the count of candidates who scored at or above the threshold. -----Limits----- - 1 leq N leq 1000 - 0 leq score of each candidate leq 100 - 0 leq T leq 100 -----Examples----- Sample Input: 5 85 67 90 75 88 80 Sample Output: 3 Sample Input: 3 55 42 69 70 Sample Output: 0","solution":"def count_candidates_above_threshold(N, scores, T): Returns the count of candidates who have scored above or equal to the threshold score. Parameters: N (int): The number of candidates. scores (list of int): The scores of the candidates. T (int): The threshold score. Returns: int: The count of candidates scoring above or equal to the threshold score. count = 0 for score in scores: if score >= T: count += 1 return count"},{"question":"You are organizing a programming competition with N participants. Each participant has a unique ID from 1 to N. Each participant\'s skill level is represented by an integer array S of length N, where S[i] denotes the skill level of participant i+1. You want to form teams with exactly K participants each to participate in the competition. A team\'s strength is defined as the sum of the skill levels of all the team members. The winner of the competition will be the team with the highest strength. Determine the maximum possible team strength that can be achieved. Constraints * 1 leq N leq 10^5 * 1 leq K leq N * 1 leq S[i] leq 10^9 Input The input is given from Standard Input in the following format: N K S_1 S_2 ... S_N Output Print the maximum possible team strength that can be achieved. Examples Input 5 3 5 2 8 1 6 Output 19 Input 4 2 3 9 2 7 Output 16","solution":"def max_team_strength(N, K, S): Returns the maximum possible team strength that can be achieved by forming teams with exactly K participants each. Parameters: N (int): The number of participants. K (int): The number of participants per team. S (List[int]): The list of skill levels of the participants. Returns: int: The maximum possible team strength. S.sort(reverse=True) return sum(S[:K])"},{"question":"Tanya loves playing word games. Recently, she stumbled upon a new game called \\"Word Splitter\\". In this game, given a string `s` and an integer `k`, she needs to determine all possible ways to split the string `s` into exactly `k` non-empty substrings. To score maximum points, Tanya should count all possible splits. For example, given the string \\"abc\\" and `k=2`, the valid splits are [\\"a\\", \\"bc\\"], [\\"ab\\", \\"c\\"], and [\\"a\\", \\"b\\", \\"c\\"] which totals to 3 different ways. Write a program to help Tanya determine the number of valid ways to split the given string into exactly `k` non-empty substrings. Input The input consists of a single line containing the string `s` (1 ≤ |s| ≤ 20), and an integer `k` (1 ≤ k ≤ |s|). Output Output a single integer representing the total number of ways to split the string into exactly `k` non-empty substrings. Examples Input ``` abc 2 ``` Output ``` 2 ``` Input ``` abcd 3 ``` Output ``` 3 ``` Input ``` a 1 ``` Output ``` 1 ``` Note: In the first example \\"abc\\" can be split into [\\"a\\", \\"bc\\"], [\\"ab\\", \\"c\\"] and [\\"a\\", \\"b\\", \\"c\\"] but only 2 splits into exactly \\"2\\" parts are valid [\\"a\\", \\"bc\\"], and [\\"ab\\", \\"c\\"]. In the second example \\"abcd\\" can be split into [\\"a\\", \\"b\\", \\"cd\\"], [\\"a\\", \\"bc\\", \\"d\\"], [\\"ab\\", \\"c\\", \\"d\\"].","solution":"def count_splits(s, k): Returns the number of ways to split the string s into exactly k non-empty substrings. n = len(s) # DP table where dp[i][j] will be the number of ways to split s[:i] into j parts dp = [[0] * (k + 1) for _ in range(n + 1)] # Base case: there\'s only 1 way to split an empty string into 0 parts dp[0][0] = 1 for i in range(1, n + 1): for j in range(1, k + 1): for x in range(i): dp[i][j] += dp[x][j - 1] return dp[n][k]"},{"question":"Given an initially empty stack of integers, perform Q operations of the following types: - `push x` - Push integer `x` onto the stack. - `pop` - Remove the integer at the top of the stack. - `max` - Print the maximum integer currently in the stack. - `undo` - Undo the last (not previously undone) operation of type `push x` or `pop`, reverting the stack to the state it was in prior to that operation. If there is no operation of type `push x` or `pop` to undo, this operation does nothing. Example: Consider the below operations sequence: ``` operations = [\\"push 3\\", \\"push 5\\", \\"max\\", \\"pop\\", \\"max\\", \\"undo\\", \\"max\\"] ``` Explanation: 1. Push 3: Stack is [3] 2. Push 5: Stack is [3, 5] 3. Max: 5 (the maximum element of the stack) 4. Pop: [3] (remove the top element, 5) 5. Max: 3 (now the maximum element of the stack) 6. Undo: [3, 5] (undo the last pop operation, so the stack returns to [3, 5]) 7. Max: 5 (the maximum element of the stack) The output for the above operations should be: ``` 5 3 5 ``` Input Format: The first line contains an integer, `Q`, denoting the number of operations. Each of the `Q` subsequent lines contains an operation to be performed in the format described above. Constraints: - 1 leq Q leq 10^5 - Each integer `x` will be in the range [1, 10^9]. - It is guaranteed that there will be at least one element in the stack when the max operation is invoked. - It is guaranteed that there will be at least one operation to undo when the undo operation is invoked. Output Format: For each `max` operation, print the maximum integer in the stack on a new line. Sample Input: ``` 7 push 3 push 5 max pop max undo max ``` Sample Output: ``` 5 3 5 ```","solution":"class Stack: def __init__(self): self.stack = [] self.max_stack = [] self.history = [] def push(self, x): self.stack.append(x) if not self.max_stack or x >= self.max_stack[-1]: self.max_stack.append(x) self.history.append((\\"push\\", x)) def pop(self): if not self.stack: return popped = self.stack.pop() if popped == self.max_stack[-1]: self.max_stack.pop() self.history.append((\\"pop\\", popped)) def max(self): if self.max_stack: return self.max_stack[-1] def undo(self): if not self.history: return last_action = self.history.pop() action, value = last_action if action == \\"push\\": self.stack.pop() if value == self.max_stack[-1]: self.max_stack.pop() elif action == \\"pop\\": self.stack.append(value) if not self.max_stack or value >= self.max_stack[-1]: self.max_stack.append(value) def perform_operations(operations): stack = Stack() results = [] for operation in operations: if operation.startswith(\\"push \\"): _, x = operation.split() stack.push(int(x)) elif operation == \\"pop\\": stack.pop() elif operation == \\"max\\": results.append(stack.max()) elif operation == \\"undo\\": stack.undo() return results # Example usage operations = [\\"push 3\\", \\"push 5\\", \\"max\\", \\"pop\\", \\"max\\", \\"undo\\", \\"max\\"] print(perform_operations(operations)) # Output: [5, 3, 5]"},{"question":"Jack is passionate about encryption and decryption. Today he is working on a problem involving palindromes. A palindrome is a sequence that reads the same forward and backward. Jack wants to create a new encryption scheme. He starts by taking a binary string S (composed of only \'0\'s and \'1\'s). Jack then performs a very peculiar operation on S: he selects two indices i and j (1 ≤ i ≤ j ≤ length of S) such that the substring from index i to j, inclusive, is a palindrome. He then reverses this substring and replaces the original substring with the reversed one. Given a binary string S, determine if it is possible to make S a palindrome by performing at most one such operation. If it\'s possible, print \\"YES\\", otherwise print \\"NO\\". ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contains a single binary string S. ------ Output ------ For each test case, output \\"YES\\" if it is possible to make the string a palindrome by performing at most one operation, and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 ------ Sample Input 1 ------ 3 1100 1001 111000 ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Example case 1. We can select the substring \\"10\\" and reverse it to get \\"0110\\", which is a palindrome. So, the answer is \\"YES\\". Example case 2. The string is already a palindrome, so we can perform the trivial operation of reversing a single character substring or not perform any, resulting in \\"YES\\". Example case 3. There is no way to make the string \\"111000\\" a palindrome with just one operation, so the answer is \\"NO\\".","solution":"def can_form_palindrome(S): Determines if it\'s possible to make the binary string S a palindrome by performing at most one reverse operation. n = len(S) # Check if S is already a palindrome if S == S[::-1]: return \\"YES\\" # Check if we can make S a palindrome by performing at most one reverse operation diff_count = 0 left, right = 0, n - 1 while left < right: if S[left] != S[right]: diff_count += 1 if diff_count > 2: return \\"NO\\" left += 1 right -= 1 return \\"YES\\" if diff_count <= 2 else \\"NO\\" def solve_palindrome_problem(T, test_cases): results = [] for i in range(T): results.append(can_form_palindrome(test_cases[i])) return results"},{"question":"In a galaxy far, far away, there exists a special binary tree known as the Astro Tree. The Astro Tree has a unique property: the value of each node is equal to the sum of the values of all its direct and indirect child nodes, plus the number of direct child nodes it has. A jedi named Rey wants to verify this property for a given tree. She is given a binary tree with n nodes represented as a series of parent-child relationships. Your task is to determine if the given tree is indeed an Astro Tree. Input The first line of input contains a single integer n (1 ≤ n ≤ 105) — the number of nodes in the tree. The second line contains n integers b1, b2, ..., bn separated by spaces (0 ≤ bi ≤ n) — the value of each node in the tree. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) — indicating that there is an edge (u, v) in the tree. It is guaranteed that the given edges form a tree. Output Output \\"YES\\" if the given tree is an Astro Tree, and \\"NO\\" otherwise. Examples Input 5 9 4 4 3 0 1 2 1 3 2 4 2 5 Output YES Input 3 5 3 1 1 2 2 3 Output NO Note In the first sample testcase, the tree is represented as: ``` 1(9) / 2(4) 3(4) / 4(3) 5(0) ``` For node 1, the sum of its child values is (4 + 4) + 2 (number of direct child nodes) = 10, which does not match its value (9). Hence, the output is \\"NO\\". In the second sample testcase, the tree is represented as: ``` 1(5) / 2(3) 3(1) ``` For node 1, the sum of its child values is 3 + 1 + 1 (number of direct child nodes) = 5, which matches its value. For node 2, the sum of its child values is 1 + 1 = 2, but its value is 3, hence the output is \\"NO\\".","solution":"def is_astro_tree(n, values, edges): from collections import defaultdict, deque import sys input = sys.stdin.read sys.setrecursionlimit(200000) tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) value_of = {i + 1: values[i] for i in range(n)} def dfs(node, parent): total_sum, total_children = 0, 0 for child in tree[node]: if child == parent: continue child_sum, num_children = dfs(child, node) total_sum += child_sum + num_children total_children += num_children total_children += len(tree[node]) - (0 if parent == -1 else 1) if value_of[node] != total_sum + total_children: return -1, -1 return total_sum, total_children root = 1 total_sum, total_children = dfs(root, -1) if total_sum == -1 and total_children == -1: return \\"NO\\" return \\"YES\\""},{"question":"You are part of a team tasked with analyzing the sales performance of a retail store. Management has asked for a solution to identify sales trends based on a series of sales records. The sales data is provided as a list of transactions, where each transaction is represented as a dictionary with the following keys: \'date\' (string in \'YYYY-MM-DD\' format), \'product_id\' (integer), and \'quantity\' (integer). Your task is to write a function `get_top_products(sales_data, start_date, end_date, k)` that determines the top `k` products with the highest total quantity sold within a specified date range. The function should return a list of tuples where each tuple contains a product ID and the total quantity sold for that product, sorted in descending order of quantity. If two products have the same total quantity sold, they should appear in ascending order of product ID. Input: - `sales_data`: A list of dictionaries where each dictionary represents a sales transaction with keys \'date\', \'product_id\', and \'quantity\'. - `start_date` and `end_date`: Strings representing the start and end dates of the analysis period, inclusive (in \'YYYY-MM-DD\' format). - `k`: An integer representing the number of top products to return. Output: - A list of tuples, where each tuple contains a product ID and the total quantity sold for that product, sorted first by descending order of quantity, then by ascending order of product ID in case of ties. Examples: Input: ```python sales_data = [ {\'date\': \'2023-01-01\', \'product_id\': 101, \'quantity\': 5}, {\'date\': \'2023-01-02\', \'product_id\': 101, \'quantity\': 15}, {\'date\': \'2023-01-01\', \'product_id\': 102, \'quantity\': 20}, {\'date\': \'2023-01-03\', \'product_id\': 103, \'quantity\': 7}, {\'date\': \'2023-01-03\', \'product_id\': 101, \'quantity\': 2}, {\'date\': \'2023-01-04\', \'product_id\': 104, \'quantity\': 12} ] start_date = \'2023-01-01\' end_date = \'2023-01-03\' k = 2 ``` Output: ``` [(101, 22), (102, 20)] ``` Input: ```python sales_data = [ {\'date\': \'2023-01-01\', \'product_id\': 101, \'quantity\': 5}, {\'date\': \'2023-01-02\', \'product_id\': 105, \'quantity\': 25}, {\'date\': \'2023-01-03\', \'product_id\': 105, \'quantity\': 5}, {\'date\': \'2023-01-04\', \'product_id\': 101, \'quantity\': 10}, {\'date\': \'2023-01-04\', \'product_id\': 102, \'quantity\': 7}, {\'date\': \'2023-01-05\', \'product_id\': 103, \'quantity\': 3} ] start_date = \'2023-01-01\' end_date = \'2023-01-05\' k = 3 ``` Output: ``` [(105, 30), (101, 15), (102, 7)] ``` Note: - Ensure the function handles edge cases such as no sales data within the date range, `k` being larger than the number of unique products, or all quantities sold being the same. - Assume valid input data and dates.","solution":"from collections import defaultdict from datetime import datetime def get_top_products(sales_data, start_date, end_date, k): Determines the top `k` products with the highest total quantity sold within a specified date range. Args: sales_data (list): A list of dictionaries, where each dictionary represents a sales transaction with keys \'date\', \'product_id\', and \'quantity\'. start_date (str): The start date of the analysis period, inclusive, in \'YYYY-MM-DD\' format. end_date (str): The end date of the analysis period, inclusive, in \'YYYY-MM-DD\' format. k (int): The number of top products to return. Returns: list: A list of tuples where each tuple contains a product ID and the total quantity sold for that product, sorted first by descending order of quantity, then by ascending order of product ID. start_date = datetime.strptime(start_date, \'%Y-%m-%d\') end_date = datetime.strptime(end_date, \'%Y-%m-%d\') # Dictionary to track total quantity sold for each product product_sales = defaultdict(int) for transaction in sales_data: transaction_date = datetime.strptime(transaction[\'date\'], \'%Y-%m-%d\') if start_date <= transaction_date <= end_date: product_sales[transaction[\'product_id\']] += transaction[\'quantity\'] # Sorting the products first by total quantity sold (descending), then by product ID (ascending) sorted_products = sorted(product_sales.items(), key=lambda x: (-x[1], x[0])) # Return the top `k` products return sorted_products[:k]"},{"question":"Write a function that takes two integers `n` and `m` as input, and returns a list of lists containing the spiral ordering of an `n x m` integer matrix filled with the numbers from 1 to `n * m`. The spiral order starts at the top-left corner and moves to the right, then proceeds in a clockwise direction. Examples Given `n` = 3 and `m` = 3, your function should output: ``` [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] ``` Given `n` = 4 and `m` = 3, your function should output: ``` [ [1, 2, 3], [10, 11, 4], [9, 12, 5], [8, 7, 6] ] ``` Assumptions - `n` and `m` are positive integers. - The input matrix dimensions `n` and `m` will be reasonably small (e.g., less than 100).","solution":"def generate_spiral_matrix(n, m): Generates an n x m spiral matrix filled with numbers from 1 to n * m. if n <= 0 or m <= 0: return [] matrix = [[0] * m for _ in range(n)] num = 1 left, right = 0, m - 1 top, bottom = 0, n - 1 while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 if top <= bottom: for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"Given an integer N, write a program to find the smallest number that can be formed by rearranging the digits of N such that the new number is greater than N. If no such number exists, return -1. Example 1: Input: N = 123 Output: 132 Explanation: The smallest number greater than 123 with rearranged digits is 132. Example 2: Input: N = 321 Output: -1 Explanation: No number greater than 321 can be formed with the same digits, so the output is -1. Example 3: Input: N = 115 Output: 151 Explanation: The smallest number greater than 115 with rearranged digits is 151. Your Task: You don\'t need to read input or print anything. Your task is to complete the function nextGreaterNumber() which takes an integer N as input parameter and returns the smallest number that is greater than N formed by rearranging its digits. If no such number exists, return -1. Expected Time Complexity: O(log N) Expected Auxiliary Space: O(log N) Constraints: 1 <= N <= 10^9","solution":"def nextGreaterNumber(N): Returns the smallest number greater than N formed by rearranging its digits. If no such number exists, returns -1. # Convert the number to a list of digits digits = list(str(N)) # Find the first digit that can be swapped to make a larger number for i in range(len(digits) - 2, -1, -1): if digits[i] < digits[i + 1]: # Find the smallest digit on right side of digits[i] which is greater than digits[i] for j in range(len(digits) - 1, i, -1): if digits[j] > digits[i]: break # Swap digits[i] with digits[j] digits[i], digits[j] = digits[j], digits[i] # Sort the digits after the position i digits = digits[:i + 1] + sorted(digits[i + 1:]) return int(\'\'.join(digits)) return -1"},{"question":"You are given an array of N integers where each element represents the height of a building. You need to determine the maximum possible rectangular area that can be formed by choosing a contiguous subarray of buildings, where the width of the rectangle is the number of buildings chosen and the height is the minimum height of the buildings in the chosen subarray. Input: The first line of input contains an integer T denoting the number of test cases. The next T test cases follow. Each test case contains an integer N denoting the number of buildings, followed by N space-separated integers that represent the height of each building. Output: For each test case, print the maximum rectangular area that can be formed. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ height of each building ≤ 10^9 Example (To be used only for expected output): Input: 2 6 2 1 5 6 2 3 4 1 2 3 4 Output: 10 6 Explanation: For the first test case: N = 6, heights = {2, 1, 5, 6, 2, 3} The maximum rectangular area is formed by choosing the subarray {5, 6}, where the minimum height is 5 and the width is 2. Thus, the area = 5 * 2 = 10. For the second test case: N = 4, heights = {1, 2, 3, 4} The maximum rectangular area is formed by choosing the subarray {3, 4}, where the minimum height is 3 and the width is 2. Thus, the area = 3 * 2 = 6.","solution":"def max_rectangle_area(heights): Determine the maximum possible rectangular area that can be formed by choosing a contiguous subarray of buildings. Args: heights (List[int]): A list of integers representing the heights of the buildings. Returns: int: The maximum rectangular area. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def process_input(test_cases): Process the test cases and return results for each. Args: test_cases (List[Tuple[int, List[int]]]): List of tuples, each containing the number of buildings and the list of building heights. Returns: List[int]: List of maximum rectangular area for each test case. results = [] for _, heights in test_cases: results.append(max_rectangle_area(heights)) return results"},{"question":"Given a set of integers and a target sum, determine if there is a subset of those integers that sums up to the target. Input Format The first line contains two integers n and S, where n is the number of integers and S is the target sum. The second line contains n integers separated by spaces. Constraints 1 <= n <= 20 -100 <= each integer <= 100 Output Format A single line containing \\"YES\\" if there is a subset that sums to S, otherwise \\"NO\\". Sample Input 5 9 1 2 3 4 5 Sample Output YES Explanation There is a subset {4, 5} that sums up to 9.","solution":"def subset_sum_exists(n, S, numbers): Determines if there is a subset of the given integers that sums up to the target sum S. :param n: Number of integers :param S: Target sum :param numbers: List of integers :return: \'YES\' if such a subset exists, otherwise \'NO\' from itertools import combinations # Check all possible subsets for i in range(1, n + 1): for subset in combinations(numbers, i): if sum(subset) == S: return \\"YES\\" return \\"NO\\""},{"question":"Given a dictionary where each key is a folder path and its value is the size of the folder in bytes, calculate and return the total size for each unique parent folder path. The folder paths are given in Unix-style format. Note: - A parent folder\'s size includes the sum of its own size and the sizes of all its subfolders (recursively). Example 1: Input: folder_sizes = { \\"/a\\": 10, \\"/a/b\\": 20, \\"/a/b/c\\": 5, \\"/d\\": 3, } Output: { \\"/a\\": 35, \\"/a/b\\": 25, \\"/a/b/c\\": 5, \\"/d\\": 3, } Explanation: - \\"/a\\" has its own size 10 + size of \\"/a/b\\" 20 + size of \\"/a/b/c\\" 5 = 35 - \\"/a/b\\" has its own size 20 + size of \\"/a/b/c\\" 5 = 25 - \\"/a/b/c\\" has its own size 5 - \\"/d\\" has its own size 3 Example 2: Input: folder_sizes = { \\"/x\\": 100, \\"/x/y\\": 50, \\"/x/y/z\\": 30, } Output: { \\"/x\\": 180, \\"/x/y\\": 80, \\"/x/y/z\\": 30, } Explanation: - \\"/x\\" has its own size 100 + size of \\"/x/y\\" 50 + size of \\"/x/y/z\\" 30 = 180 - \\"/x/y\\" has its own size 50 + size of \\"/x/y/z\\" 30 = 80 - \\"/x/y/z\\" has its own size 30 Your Task: You don\'t need to read input or print anything. Complete the function `calculate_folder_sizes()` which takes a dictionary `folder_sizes` and returns a dictionary with calculated sizes for each unique folder path. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: - 1 ≤ number of folder paths ≤ 10^3 - 1 ≤ folder size ≤ 10^6","solution":"def calculate_folder_sizes(folder_sizes): Takes a dictionary where keys are folder paths and values are folder sizes in bytes, and calculates the total size for each parent folder path. result = {} # Sort the paths to process the subfolders before their parents paths = sorted(folder_sizes.keys(), key=lambda x: x.count(\'/\'), reverse=True) # Initialize the result with the given folder sizes for path in paths: result[path] = folder_sizes[path] # Traverse each path and add its size to its parent for path in paths: size = folder_sizes[path] while \'/\' in path: path = path.rsplit(\'/\', 1)[0] if path: # if path is not empty after split result[path] = result.get(path, 0) + size return result"},{"question":"Given an undirected connected graph G with N vertices and M edges, determine if there is a set of vertices S that can be removed such that the remaining graph G\' is acyclic (i.e., it becomes a forest). The set S should be of minimum size possible. If there are multiple sets of the same size, print any one of them. Constraints * 2 leq N leq 2000 * 1 leq M leq 2000 * 1 leq u_i, v_i leq N * u_i neq v_i * G is connected * G does not contain multiple edges. Input Input is given from Standard Input in the following format: N M u_1 v_1 : u_M v_M Output Print the size of the set S and the indices of the vertices in S. Examples Input 5 5 1 2 2 3 3 4 4 5 5 1 Output 1 3 Input 4 5 1 2 1 3 1 4 2 3 3 4 Output 1 1 Input 6 7 1 2 2 3 3 4 4 5 5 6 6 1 3 6 Output 1 6","solution":"def find_min_vertex_cut_set(N, M, edges): Determine a minimum set of vertices whose removal makes the graph acyclic. Args: N : int : number of vertices M : int : number of edges edges : list of tuples : edges of the graph Returns: tuple : (size of the set, list of vertices in the set) from networkx import Graph import networkx as nx G = Graph() G.add_nodes_from(range(1, N + 1)) G.add_edges_from(edges) def is_acyclic(G): try: nx.find_cycle(G) return False except nx.NetworkXNoCycle: return True # Find a cycle if there is one cycle = None try: cycle = nx.find_cycle(G) except nx.NetworkXNoCycle: cycle = [] if not cycle: return (0, []) # Convert the cycle into a set of vertices cycle_vertices = set() for u, v in cycle: cycle_vertices.add(u) cycle_vertices.add(v) # Removing any single vertex in the cycle should break the cycle vertex_to_remove = cycle_vertices.pop() return (1, [vertex_to_remove]) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) edges = [(int(data[2 + 2 * i]), int(data[2 + 2 * i + 1])) for i in range(M)] result = find_min_vertex_cut_set(N, M, edges) print(result[0]) for v in result[1]: print(v)"},{"question":"Implement a function that takes a string of digits as input and returns the next higher number that can be formed using the digits of the input number. If no higher number can be formed, return -1. # Function Signature ```python def next_higher_number(s: str) -> int: pass ``` # Parameters - `s` (string): A string consisting of digits representing a non-negative integer. # Returns - `int`: The next higher number that can be formed using the digits of the input number, or -1 if no higher number can be formed. # Constraints - The input string length will be up to 18 characters long. # Requirements - You cannot use the built-in `itertools` module. # Example Example 1: ```python s = \\"12345\\" next_higher_number(s) ``` **Sample Output:** ``` 12354 ``` Example 2: ```python s = \\"54321\\" next_higher_number(s) ``` **Sample Output:** ``` -1 ```","solution":"def next_higher_number(s: str) -> int: Returns the next higher number that can be formed using the digits of the input number. If no higher number can be formed, returns -1. digits = list(s) n = len(digits) # Traverse the number from right to left to find the first digit that is smaller than the digit next to it for i in range(n-2, -1, -1): if digits[i] < digits[i+1]: break else: # If no such digit is found, return -1 as the digits are in descending order return -1 # Find the smallest digit on right of the found digit which is larger than the found digit for j in range(n-1, i, -1): if digits[j] > digits[i]: break # Swap the found digits digits[i], digits[j] = digits[j], digits[i] # Reverse the digits after the position \'i\' digits = digits[:i+1] + digits[i+1:][::-1] return int(\\"\\".join(digits))"},{"question":"In a given city, there are N buildings with heights represented by an array H of N positive integers where H_i denotes the height of the i-th building. The city administration has decided to mark some of these buildings as important landmarks. A building is considered an important landmark if its height is strictly greater than both its adjacent buildings. Your task is to write a program that determines how many important landmarks exist in the city. --- Input Format --- - The first line of the input contains an integer T - the number of test cases. - Each test case consists of two lines: - The first line contains an integer N - the number of buildings. - The second line contains N integers H_1, H_2, ..., H_N - the heights of the buildings. --- Output Format --- For each test case, output a single line containing the number of important landmarks in that city. --- Constraints --- 1 ≤ T ≤ 10 3 ≤ N ≤ 100000 1 ≤ H_i ≤ 100000 --- Sample Input 1 --- 2 5 3 1 4 1 5 6 1 2 3 4 3 2 --- Sample Output 1 --- 2 1 --- Explanation 1 --- For the first test case: - Building 3 is an important landmark because 4 > 1 and 4 > 1. - Building 5 is an important landmark because 5 > 1 and there is no building on the right. Hence, the output is 2. For the second test case: - Building 4 is an important landmark because 4 > 3 and 4 > 3. Hence, the output is 1.","solution":"def count_important_landmarks(T, test_cases): results = [] for case in test_cases: N, buildings = case if N < 3: results.append(0) continue count = 0 for i in range(1, N - 1): if buildings[i] > buildings[i - 1] and buildings[i] > buildings[i + 1]: count += 1 results.append(count) return results"},{"question":"Chef is organizing a fun contest where participants need to find a hidden number in an array. Let\'s call this hidden number \\"X\\". Chef prepares the array in such a way that every element in the array appears exactly twice, except the number \\"X\\", which appears only once. To make it fair and interesting, Chef provides the participants with a method: they can query the sum of any continuous subarray of the original array. Given that each query costs some points, Chef wants to minimize the number of queries made to find \\"X\\". Your task is to help the contestants by writing a program that determines the hidden number \\"X\\" using the minimum number of queries. However, you will not make the actual queries. Instead, you should output the hidden number directly by some efficient method. ------ Input ------ The first line of input contains a single integer T — the number of test cases. The description of T test cases follows. For each test case: The first line contains a single integer N — the number of elements in the array (including the hidden element X). This number is always odd. The next line contains N space-separated integers, representing the array. ------ Output ------ For each test case, output a single integer — the hidden number \\"X\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ text{array elements} ≤ 10^9 ------ Sample Input 1 ------ 2 5 1 2 3 2 1 7 4 5 4 5 6 7 7 ------ Sample Output 1 ------ 3 6 ------ Explanation 1 ------ In the first test case, the element that appears exactly once is 3. In the second test case, the element that appears exactly once is 6.","solution":"def find_hidden_number(arr): Finds the hidden number X in the array. All elements in the array appear twice except one element which appears once. result = 0 for num in arr: result ^= num return result def solve_contests(test_cases): results = [] for case in test_cases: N, arr = case results.append(find_hidden_number(arr)) return results"},{"question":"You are given an array of integers representing the heights of people in a queue. The people are posing for a photograph, but they must align themselves in a specific pattern to make the photograph more visually appealing. For each person `i` in the queue (`0 <= i < n-1`), they want to be sure that either: - The person in front of them (i.e., `i+1`) is taller than they are, or - The person behind them (i.e., `i-1`) is shorter than they are. Your task is to arrange the people in the queue such that the above conditions are satisfied for every person except the first and last ones in the queue. If it is possible to rearrange the queue to satisfy the conditions, print the rearranged queue. If it is not possible, print `\\"IMPOSSIBLE\\"`. ------ Input ------ The first line of the input contains an integer `T` — the number of test cases. The first line of each test case will contain a single integer `n` — the number of people in the queue. The second line of each test case contains `n` space-separated integers representing the heights of the people in the queue. ------ Output ------ For each test case, output a single line containing either the rearranged queue as `n` space-separated integers, or `\\"IMPOSSIBLE\\"` if it is not possible to rearrange them. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ n ≤ 100 ----- Sample Input 1 ------ 3 4 4 2 7 6 3 1 3 2 5 5 3 1 4 2 ----- Sample Output 1 ------ 4 2 7 6 1 3 2 5 3 4 2 1 ----- Explanation 1 ------ In the first example, `[4, 2, 7, 6]` satisfies the conditions because 2 < 4, 7 > 2, 7 > 6. In the second example, `[1, 3, 2]` satisfies the conditions because 3 > 1 and 2 < 3. In the third example, one possible arrangement `[5, 3, 4, 2, 1]` satisfies the conditions because 3 < 5, 4 > 3, 4 > 2, 2 < 1.","solution":"def rearrange_queue(heights): Function to rearrange the heights of people in a queue to satisfy the given conditions. Args: - heights: List of integers representing the heights of people in the queue. Returns: - List of integers with the rearranged queue or the string \\"IMPOSSIBLE\\" if no valid rearrangement exists. n = len(heights) # If there are only two people, they can always be swapped. if n == 2: return heights # Sort heights to simplify the process of finding a valid arrangement heights.sort() for i in range(1, n-1): # Check the given conditions if not (heights[i-1] < heights[i] or heights[i] < heights[i+1]): return \\"IMPOSSIBLE\\" return heights def solve_photograph_patterns(test_cases): results = [] for heights in test_cases: result = rearrange_queue(heights) if result == \\"IMPOSSIBLE\\": results.append(result) else: results.append(\\" \\".join(map(str, result))) return results"},{"question":"You are given two strings s and t of lengths n and m respectively. Your task is to determine if t is a subsequence of s. A subsequence of a string is defined as a new string generated from the original string with some (can be none) of the characters deleted without changing the relative order of the remaining characters. If t is a subsequence of s, print \\"YES\\". Otherwise, print \\"NO\\". -----Input----- The first line contains one integer q (1 le q le 10^5) — the number of queries. Each query consists of two lines: - The first line contains the string s (1 le |s| le 10^5). - The second line contains the string t (1 le |t| le 10^5). It is guaranteed that the sum of the lengths of s over all test cases does not exceed 10^6 and the sum of the lengths of t over all test cases does not exceed 10^6. -----Output----- For each query, print \\"YES\\" if t is a subsequence of s, otherwise print \\"NO\\". -----Examples----- Input 3 coding cdg hello world abcde ace Output YES NO YES -----Explanation----- In the first query, \\"cdg\\" is a subsequence of \\"coding\\" because we can delete \\"o\\", \\"i\\", and \\"n\\" from \\"coding\\" to get \\"cdg\\". In the second query, \\"world\\" is not a subsequence of \\"hello\\". In the third query, \\"ace\\" is a subsequence of \\"abcde\\" as we can remove \\"b\\" and \\"d\\" to obtain \\"ace\\".","solution":"def is_subsequence(s, t): Returns \\"YES\\" if t is a subsequence of s, otherwise \\"NO\\". t_index = 0 for char in s: if t_index < len(t) and char == t[t_index]: t_index += 1 return \\"YES\\" if t_index == len(t) else \\"NO\\" def process_queries(queries): results = [] for s, t in queries: results.append(is_subsequence(s, t)) return results"},{"question":"Ella loves music and collects vintage vinyl records. She has recently bought a new record shelf and wants to organize her collection on it. She likes to arrange records in a non-decreasing order of their thickness to create a neat and aesthetically pleasing display. However, due to a constraint in the size of the shelf, it can hold only up to T thickness at a time. She wants to find out what is the longest subsequence of consecutive records (starting from any position in the given order) she can place on the shelf without exceeding the total thickness T. You are provided a list of the thicknesses of N records in the order they are currently stored. Determine the maximum possible length of a subsequence of consecutive records that can be placed on the shelf. -----Input----- The first line of input contains two integers N and T (1 leq N leq 1000, 1 leq T leq 100000) representing the number of records and the maximum allowable total thickness for the shelf. The second line contains N integers t_ i (1 leq t_ i leq 100) that represent the thickness of each record. -----Output----- The first and only line of output must contain the maximum possible length of a subsequence of consecutive records that Ella can place on the shelf. -----Examples----- Sample Input 1: 6 10 3 1 2 3 4 1 Sample Output 1: 4 Sample Input 2: 8 15 4 2 1 3 5 2 1 4 Sample Output 2: 6","solution":"def max_length_subsequence(N, T, thicknesses): max_length = 0 current_sum = 0 start = 0 for end in range(N): current_sum += thicknesses[end] while current_sum > T: current_sum -= thicknesses[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given an integer array ar of size n and an integer k. Your task is to determine whether the array ar can be divided into two non-empty subarrays such that the sum of the elements in both subarrays is divisible by k. Note that the subarrays should be contiguous. For example, given the array ar = [5, 10, 15, 20] and k = 10, the output should be \\"YES\\" because we can split the array into [5, 10, 15] and [20], where both the subarrays have sums that are divisible by k. If it is not possible to split the array in this way, return \\"NO\\". -----Input----- The first line of the input contains an integer n, the size of the array ar (2 leq n leq 1000). The second line of input contains n space-separated integers representing the elements of the array ar (-10^9 leq ar[i] leq 10^9). The third line contains a single integer k (1 leq k leq 10^9). -----Output----- Output \\"YES\\" if such a split is possible, otherwise output \\"NO\\". -----Examples----- Sample Input 1: 4 5 10 15 20 10 Sample Output 1: YES Sample Input 2: 3 2 6 4 5 Sample Output 2: NO","solution":"def can_split_array(ar, k): Determines if the array can be split into two non-empty subarrays such that the sum of the elements in both subarrays is divisible by k. n = len(ar) if n < 2: return \\"NO\\" # Calculate the prefix sums prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i+1] = prefix_sums[i] + ar[i] total_sum = prefix_sums[-1] # Check for possible splits for i in range(1, n): sum1 = prefix_sums[i] # Sum of the first subarray sum2 = total_sum - sum1 # Sum of the second subarray if sum1 % k == 0 and sum2 % k == 0: return \\"YES\\" return \\"NO\\""},{"question":"Given an array of integers, rearrange the elements such that all negative numbers appear before all positive numbers. The order of the positive and negative numbers does not matter as long as they are separated. Input: Your method should take one argument: the array of integers. You should not read any input from stdin/console. There are multiple test cases. For each test case, this method will be called individually. Output: Your function should return the modified array with negative numbers at the beginning and positive numbers at the end. User Task: The task is to complete the function `rearrangeArray()` which takes one argument: the array of integers. This function should rearrange the array and return it. Constraints: 1 <= T <= 50 1 <= size of the array <= 100 -100 <= array elements <= 100 Example: Input: 2 5 -1 2 -3 4 -5 4 1 -1 3 -2 Output: -1 -3 -5 2 4 -1 -2 1 3 Explanation: Testcase 1: After rearranging the array as required, we have -1, -3, and -5 as the negative elements and 2, 4 as the positive elements. Testcase 2: After rearranging the array as required, we have -1, -2 as the negative elements and 1, 3 as the positive elements.","solution":"def rearrangeArray(arr): Rearranges the array so that all negative numbers appear before all positive numbers. Parameters: arr (list): A list of integers Returns: list: A new list with all negative numbers first, followed by positive numbers. negatives = [x for x in arr if x < 0] positives = [x for x in arr if x >= 0] return negatives + positives"},{"question":"# Array Element Search - Bug Fixing #2 Emma is working on a function that searches for a specific element in an array. Unfortunately, her code is not returning the correct result. Your task is to help Emma identify and fix the bug in her search function. ```python def find_element(arr, target): for i in range(len(arr)): if arr[i] != target: return False return True # Example usage print(find_element([1, 2, 3, 4, 5], 3)) # Should return True print(find_element([1, 2, 3, 4, 5], 6)) # Should return False ``` Fix the function so that it correctly returns `True` if the target is found in the array and `False` otherwise.","solution":"def find_element(arr, target): for i in range(len(arr)): if arr[i] == target: return True return False # Example usage print(find_element([1, 2, 3, 4, 5], 3)) # Should return True print(find_element([1, 2, 3, 4, 5], 6)) # Should return False"},{"question":"Write a function that takes a list of integers and returns the first integer in the list that appears an odd number of times. If no such integer is found, return None. You can assume the input list contains only integers and the list may contain positive or negative numbers, as well as zero. For example, given the input `[4, 5, 4, 5, 5, 4, 4]`, the function should return `5` because `5` appears three times, which is odd. Given the input `[1, 2, 3, 4, 5, 6, 7]`, the function should return `1` because it is the first element and it appears once. For the input `[2, 2, 4, 4]`, the function should return `None`. Function Signature: ```python def first_odd_occurrence(lst: list) -> int: # Your code here pass ```","solution":"def first_odd_occurrence(lst: list) -> int: from collections import Counter # Count occurrences of each number count = Counter(lst) # Iterate over list to find the first element with odd occurrences for num in lst: if count[num] % 2 == 1: return num # If no odd occurrence found, return None return None"},{"question":"You are given an array of integers and need to perform a series of operations. Each operation consists of selecting a contiguous subarray, and then replacing it with its bitwise AND result. The bitwise AND of an array is the result of the bitwise AND operation applied to all elements of the array. For example, the bitwise AND of `[7, 3, 5]` is `7 & 3 & 5`. Given an array `A` of length `N` and an integer `K`, determine the minimum possible length of the array after applying at most `K` operations. # Input The first line contains two integers, `N` and `K`, where: - `2 ≤ N ≤ 100,000` (length of the array) - `1 ≤ K ≤ N - 1` (maximum number of operations) The second line contains `N` integers, denoting the elements of array `A`: - `0 ≤ A[i] ≤ 10^9` for all `i` (elements of the array) # Output Output a single integer, the minimum possible length of the array after performing at most `K` operations. # Example Input ``` 5 2 3 5 1 9 14 ``` Output ``` 3 ``` Input ``` 6 3 4 6 2 8 4 7 ``` Output ``` 3 ``` # Explanation In the first example, the initial array can be modified as follows: 1. Select subarray `[3, 5]` which is replaced by `3 & 5 = 1`, resulting in `[1, 1, 9, 14]`. 2. Select subarray `[9, 14]` which is replaced by `9 & 14 = 8`, resulting in `[1, 1, 8]`. The minimum possible length is 3 after 2 operations. In the second example, the array `[4, 6, 2, 8, 4, 7]` can be modified to `[2, 2, 4, 7]` using the first operation and further reduced to `[2, 4, 7]` using the second operation. The minimum possible length is 3 after 3 operations.","solution":"def min_length_after_k_operations(n, k, array): Determines the minimum possible length of the array after performing at most K operations. Each operation consists of selecting a contiguous subarray, and then replacing it with its bitwise AND result. return max(1, n - k)"},{"question":"String Transformation You are given a string s and a string t of equal length, consisting of lowercase English letters. The task is to determine if it is possible to transform s into t using exactly k operations. In one operation, you can select any character of s and change it to any other lowercase English letter. Input The input consists of a single test case of the following format. s t k The first line contains the string s (1 leq |s| leq 10^5). The second line contains the string t (|t| = |s|). The third line contains the integer k (0 leq k leq |s|). Output Output \\"YES\\" if it is possible to transform s into t using exactly k operations. Otherwise, output \\"NO\\". Example Input 1 abcde axcye 2 Example Output 1 YES Example Input 2 abcdef ghijkl 3 Example Output 2 NO Explanation In the first example, you can change the second character \'b\' of s to \'x\' and the fourth character \'d\' of s to \'y\', resulting in exactly 2 operations. Therefore, the output is \\"YES\\". In the second example, you would need to change all six characters to their respective characters in t, which is more than 3 operations. Therefore, the output is \\"NO\\".","solution":"def can_transform_with_k_operations(s, t, k): Determines if it is possible to transform string s into string t using exactly k operations. Parameters: s (str): The original string. t (str): The target string to transform into. k (int): The number of operations allowed. Returns: str: \\"YES\\" if transformation is possible with exactly k operations, otherwise \\"NO\\". # Count the number of different characters num_diff_chars = sum(1 for sc, tc in zip(s, t) if sc != tc) # Check if the number of operations matches the required changes return \\"YES\\" if num_diff_chars == k else \\"NO\\""},{"question":"In a faraway kingdom, there are several tribes, each with its own land. The kingdom can be represented as a 2D grid of size `n x m`, where each cell in the grid can either be empty (represented by \'.\') or occupied by a part of a tribe\'s village (represented by \'T\'). The kingdom has recently faced tensions between tribes, leading to the erection of temporary walls (\'#\') to isolate the villages from one another. Your task is to figure out how many distinct tribal villages are there in the given grid. A tribal village is defined as a cluster of connected \'T\' cells, where two cells are considered connected if they share a side (up, down, left, right). You need to write a function `countTribalVillages` that takes the grid as input and returns the number of distinct tribal villages. The function should follow this signature: ```python def countTribalVillages(grid: List[List[str]]) -> int: ``` # Constraints * `1 <= n, m <= 1000` * Each cell in the grid is either empty \'.\', part of a village \'T\', or a wall \'#\'. # Input The input grid is given from Standard Input in the following format: ``` n m grid[0] grid[1] : grid[n-1] ``` # Output The function should print an integer denoting the number of distinct tribal villages. # Example Input ``` 4 4 T..T .#.# TT ..T. ``` Output ``` 5 ``` Input ``` 3 3 T.T .#. .T. ``` Output ``` 3 ``` Input ``` 5 5 TT..T T#..# ..T.T .#.#. T..TT ``` Output ``` 6 ``` # Notes: Here is an example walkthrough for the input `4 4nT..Tn.#.#nTTn..T.`: There are 5 separate clusters of \'T\': 1. The top left \'T\'. 2. The top right \'T\'. 3. The bottom left \'T\'. 4. The bottom right \'T\'. 5. The last \'T\' on the third row. These distinct clusters of \'T\' form separate tribal villages, hence the expected output is 5.","solution":"def countTribalVillages(grid): Counts the number of distinct tribal villages in the given grid. Args: grid (List[List[str]]): The input grid representing the kingdom. Returns: int: The number of distinct tribal villages. n = len(grid) m = len(grid[0]) def dfs(x, y): # Check for out of bounds or already visited cells if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] != \'T\': return # Mark the cell as visited by setting it to \'.\' grid[x][y] = \'.\' # Explore in all 4 directions dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'T\': # Start a DFS to mark all connected \'T\' cells dfs(i, j) count += 1 return count"},{"question":"A factory produces widgets, each with a unique serial number. The serial numbers are distributed across multiple batches. Due to a system error, some serial numbers are missing in each batch. Given the list of serial numbers for each batch, determine which serial numbers are missing. Each batch is represented as a sequence of integers where the smallest and largest numbers define the expected range of serial numbers for that batch. Identify and list the missing serial numbers for each batch. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of batches. Each of the next n lines describes a batch and contains a sequence of space-separated integers v_1, v_2, ..., v_m (1 ≤ m ≤ 10^5), where v_1 is the smallest serial number and v_m is the largest serial number for that batch. The total number of integers across all batches does not exceed 10^6. Output For each batch, output a line containing the missing serial numbers. The serial numbers should be separated by spaces. If there are no missing serial numbers, output \\"None\\". Example Input 3 1 2 3 5 10 11 12 14 15 20 22 Output 4 13 21 Input 2 100 101 102 103 104 50 51 52 53 Output None None","solution":"def find_missing_serial_numbers(batches): Given a list of batches of serial numbers, finds the missing numbers in each batch. Parameters: batches (list of list of int): A list where each element is a list containing serial numbers of a batch. Returns: list of list of int/str: A list where each element is a list of missing serial numbers for the corresponding batch or \\"None\\" if no serial numbers are missing. missing_serials_output = [] for batch in batches: missing_numbers = [] batch_set = set(batch) smallest_serial = batch[0] largest_serial = batch[-1] for num in range(smallest_serial, largest_serial + 1): if num not in batch_set: missing_numbers.append(num) if missing_numbers: missing_serials_output.append(missing_numbers) else: missing_serials_output.append(\\"None\\") return missing_serials_output # Example usage if __name__ == \\"__main__\\": batches = [ [1, 2, 3, 5], [10, 11, 12, 14, 15], [20, 22] ] # Finding and displaying missing serial numbers missing_serial_numbers_list = find_missing_serial_numbers(batches) for missing_serials in missing_serial_numbers_list: if missing_serials == \\"None\\": print(missing_serials) else: print(\\" \\".join(map(str, missing_serials)))"},{"question":"A famous puzzle master challenges you with the following problem: He presents you with a set of strings and asks you to find out the length of the longest string composed of characters from these strings, each character used exactly once. You may only form strings using characters from the given set of strings, and you cannot reuse any character from a string once it has been used. Your task is to write a program to solve this problem. Given multiple test cases, for each test case, print the length of the longest possible string that can be composed. Input The first line contains T, the number of test cases. The first line of each test case contains an integer N denoting the number of strings in the set. The next N lines contain one string each, consisting of lowercase English letters. Output For each test case, output a single integer, the length of the longest string composed using characters from the given strings exactly once. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ length of each string ≤ 100 Example Input 2 3 abcdef ghijkl mnopqr 2 xyz abc Example Output 18 6 Explanation In the first test case, you can use all characters from the three strings since they are all distinct, resulting in the longest string of length 18. In the second test case, you can use all characters from both strings since they do not overlap, resulting in the longest string of length 6.","solution":"def longest_unique_string_length(test_cases): results = [] for case in test_cases: unique_chars = set() for string in case: unique_chars.update(string) results.append(len(unique_chars)) return results def parse_input(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 case = [lines[index + i] for i in range(N)] index += N test_cases.append(case) return test_cases"},{"question":"Alex is building a security system that requires a secure method to generate random passwords. Each password must consist of a mix of lowercase letters, uppercase letters, and digits. To ensure the passwords are strong, they must meet the following criteria: - The length of the password must be at least 8 characters. - It must contain at least one lowercase letter, one uppercase letter, and one digit. - The characters can be in any order. Alex is not good with string manipulations, so he asked you to write a function that checks if a given password meets the criteria. Input: A single string `password` for each test case. Output: Print \\"strong\\" if the password meets all the criteria, otherwise print \\"weak\\". Constraints: 1 ≤ length of password ≤ 100 SAMPLE INPUT aB1defgh Abcd1234 abcD12 a1B2c3D4 SAMPLE OUTPUT strong strong weak strong","solution":"def check_password_strength(password): Checks if the given password is strong based on the criteria: - At least 8 characters long - Contains at least one lowercase letter - Contains at least one uppercase letter - Contains at least one digit Parameters: password (str): The password to check Returns: str: \\"strong\\" if the password meets the criteria, otherwise \\"weak\\" if len(password) < 8: return \\"weak\\" has_lower = any(c.islower() for c in password) has_upper = any(c.isupper() for c in password) has_digit = any(c.isdigit() for c in password) if has_lower and has_upper and has_digit: return \\"strong\\" else: return \\"weak\\""},{"question":"Given an array Arr of size N, find the maximum and minimum elements present in the array. Example 1: Input: N = 6 Arr[] = {3, 1, 4, 1, 5, 9} Output: Maximum: 9, Minimum: 1 Example 2: Input: N = 4 Arr[] = {7, 2, 8, 6} Output: Maximum: 8, Minimum: 2 Your Task: Complete the function findMaxMin() which takes an array arr, a single integer n, as input parameters and returns a tuple (max, min), where max is the maximum element of the array and min is the minimum element of the array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 1 <= Arr[i] <= 10^5","solution":"def findMaxMin(arr, n): Returns the maximum and minimum elements in the array. Parameters: arr (list): The list of integers. n (int): The number of elements in the list. Returns: tuple: The maximum and minimum elements in the list. max_element = arr[0] min_element = arr[0] for num in arr[1:]: if num > max_element: max_element = num if num < min_element: min_element = num return (max_element, min_element)"},{"question":"A group of engineers are working on a project to design a new kind of measuring device. They need a way to efficiently process a large number of measurements and find the average of those that are within a specific range. You have been asked to write a program that performs this task. Your program should take a list of measurements (real numbers) and two cutoff values, lower and upper (both real numbers), and calculate the average of the measurements that fall within the inclusive range [lower, upper]. If no measurements fall within the range, the output should be \\"No measurements in range\\". -----Input----- The input contains multiple lines: - The first line contains two real numbers lower and upper (−10^6 ≤ lower ≤ upper ≤ 10^6), the inclusive range bounds. - The second line contains a single integer n (1 ≤ n ≤ 10^4) which represents the number of measurements. - The next n lines contain one real number each, representing the measurements. -----Output----- Print a single line containing a real number which is the average of the measurements within the inclusive range [lower, upper]. If no measurements fall within the range, print \\"No measurements in range\\". The average should be printed with at most 6 digits after the decimal point. -----Examples----- Input 10.5 20.75 5 8.25 15.0 22.1 18.5 10.5 Output 14.666667 Input 10.0 15.0 3 9.9 18.0 20.1 Output No measurements in range","solution":"def calculate_average_in_range(lower, upper, measurements): Calculate the average of measurements that fall within the range [lower, upper]. in_range_measurements = [m for m in measurements if lower <= m <= upper] if not in_range_measurements: return \\"No measurements in range\\" average = sum(in_range_measurements) / len(in_range_measurements) return f\\"{average:.6f}\\" # Input reading function def read_input(data): Reads input data from a string and returns the lower and upper bounds, and a list of measurements. lines = data.split(\'n\') lower, upper = map(float, lines[0].split()) n = int(lines[1]) measurements = [float(lines[i + 2]) for i in range(n)] return lower, upper, measurements"},{"question":"The city of Algoville is holding a marathon event. You have been tasked with timing the runners. During the event, you will receive a series of timestamps that indicate when a runner crosses the start line and when they finish. Write a program to compute the total time each runner took to complete the marathon. The times will be received in pairs, with each pair consisting of a start time and a finish time for a specific runner. Each timestamp is a string in the format \\"HH:MM:SS\\". You need to output the total time taken by each runner in seconds for each test case provided. Input First line of the input will contain T (No. of test cases). For each test case, the first line will contain an integer N (number of runners). The next N lines will each contain two space-separated strings representing the start and finish times for a runner. Output For every test case, print N lines each representing the total time in seconds taken by corresponding runner. Constraints 1 ≤ T ≤ 5 1 ≤ N ≤ 10^5 SAMPLE INPUT 1 3 08:00:00 11:00:00 07:30:00 10:45:00 09:15:00 12:45:00 SAMPLE OUTPUT 10800 11700 12600 Explanation First runner took 3 hours (from 08:00:00 to 11:00:00), which is 10800 seconds. Second runner took 3 hours and 15 minutes (from 07:30:00 to 10:45:00), which is 11700 seconds. Third runner took 3 hours and 30 minutes (from 09:15:00 to 12:45:00), which is 12600 seconds.","solution":"from datetime import datetime def time_difference(start, finish): Calculate the difference in seconds between start and finish times. Both start and finish are strings in \\"HH:MM:SS\\" format. FMT = \'%H:%M:%S\' # Time format tdelta = datetime.strptime(finish, FMT) - datetime.strptime(start, FMT) return tdelta.seconds def marathon_times(test_cases): Calculate the total time in seconds for runners in each test case. test_cases: list of tuples, where the first element is the number of runners and the second element is a list of tuples with start and finish times for each runner. results = [] for num_runners, runners in test_cases: case_result = [] for start, finish in runners: case_result.append(time_difference(start, finish)) results.append(case_result) return results def read_input(): import sys input = sys.stdin.read data = input().splitlines() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 runners = [] for _ in range(N): start, finish = data[index].split() runners.append((start, finish)) index += 1 test_cases.append((N, runners)) return test_cases if __name__ == \\"__main__\\": test_cases = read_input() results = marathon_times(test_cases) for result in results: for res in result: print(res)"},{"question":"Given a list of integers, write a program that finds the maximum sum of a sublist (a contiguous portion of the list). Input: The input data is given in the following format. m b1 b2 b3 ... bm Where \'m\' is the number of elements in the list and each bi is an integer element of the list. The size \'m\' is at least 1 and at most 100000, and each bi is at least -10000 and at most 10000. Output: Print the maximum sum of a sublist on one line. Examples Input 5 1 -2 3 4 -1 Output 7 Input 6 -3 2 -1 4 -2 1 Output 5","solution":"def max_sublist_sum(m, b): Returns the maximum sum of a sublist (contiguous portion) from the list b. max_current = max_global = b[0] for i in range(1, m): max_current = max(b[i], max_current + b[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a sequence of non-negative integers representing the duration of several activities in minutes. Write a program that calculates and displays the total duration in the form of days, hours, and minutes. The input ends when a negative integer is encountered, which should not be included in the total duration. The number of input values does not exceed 50. If there are no valid inputs, the output should be 00:00:00. Input format: Multiple lines of non-negative integers representing duration in minutes. Output format: The total duration of all valid inputs in the form of `D days, HH:MM`. Example: Input: ``` 45 120 300 -1 ``` Output: ``` 00 days, 07:45 ``` Input: ``` 1440 1440 60 -5 ``` Output: ``` 02 days, 01:00 ``` Note: The program should handle the conversion of minutes to hours and days, ensuring the formatting aligns with `DD days, HH:MM`, where DD, HH, and MM are always represented by two digits.","solution":"def calculate_total_duration(durations): This function takes a list of non-negative integers representing durations in minutes and returns the total duration formatted as \'DD days, HH:MM\'. # Filter valid durations (non-negative integers) valid_durations = [duration for duration in durations if duration >= 0] if not valid_durations: return \\"00 days, 00:00\\" # Calculate total minutes total_minutes = sum(valid_durations) # Calculate days, hours and minutes days = total_minutes // (24 * 60) hours = (total_minutes % (24 * 60)) // 60 minutes = total_minutes % 60 # Formatted output return f\\"{days:02d} days, {hours:02d}:{minutes:02d}\\""},{"question":"In a distant land, there is a magical forest with trees of various heights. Each tree is magical and has a unique power proportional to its height. Takahashi needs to collect these magical powers, but he can collect the magical power of a tree only if it is taller than the ones he previously collected (i.e., in strictly increasing order of height). Given the heights of the trees standing in a line from left to right, find the maximum number of trees Takahashi can collect in an increasing order of their heights. Constraints: * 1 leq N leq 1000 * 1 leq h_i leq 100000 * All values in input are integers. Input Input is given from Standard Input in the following format: N h_1 h_2 ... h_N Output Print the maximum number of trees Takahashi can collect. Examples Input 5 1 3 2 5 4 Output 3 Input 4 4 3 2 1 Output 1 Input 10 1 2 3 4 5 6 7 8 9 10 Output 10","solution":"def max_trees_in_increasing_order(N, heights): Returns the maximum number of trees Takahashi can collect in an increasing order of their heights. if N == 0: return 0 dp = [1] * N # Initialize DP table for maximum lengths for i in range(1, N): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"A robotics company is designing a new warehouse management system that incorporates autonomous robots to handle inventory. Each robot is capable of carrying multiple items, but the combined weight of the items carried by a single robot must not exceed its weight capacity. You are tasked with determining the minimum number of robots required to carry all the items in the warehouse. Given a list of items, each with a specific weight, and a maximum weight capacity for each robot, compute the minimum number of robots needed such that all items are transported without exceeding any robot\'s weight capacity. -----Input----- The first line contains two integers N and W (1 leq N leq 100, 1 leq W leq 1000), where N is the number of items and W is the weight capacity of each robot. The second line contains N integers w_1, w_2, ..., w_N (1 leq w_i leq W) representing the weights of the items. -----Output----- Print an integer denoting the minimum number of robots needed to carry all the items. Sample Data Explanation In the first example, one of the possible solutions is to assign the first and second items to one robot, and the third item to another robot. Thus, a total of 2 robots are required to carry all the items. -----Examples----- Sample Input: 3 10 4 8 6 Sample Output: 2","solution":"def min_robots_needed(N, W, weights): Returns the minimum number of robots needed to carry all items without exceeding each robot\'s weight capacity. Parameters: N (int): Number of items. W (int): Maximum weight each robot can carry. weights (list of int): List of item weights. Returns: int: Minimum number of robots needed. weights.sort(reverse=True) robots = 0 i = 0 j = N - 1 while i <= j: if weights[i] + weights[j] <= W: j -= 1 i += 1 robots += 1 return robots # Example usage N = 3 W = 10 weights = [4, 8, 6] print(min_robots_needed(N, W, weights)) # Output: 2"},{"question":"Given an array of integers, you need to process multiple queries to determine the sum of the elements in a specified range. -----Input:----- - First line will contain N, the number of elements in the array. - The second line contains N integers, representing the elements of the array. - Third line will contain Q, the number of queries. - Next Q lines each contain two integers L and R, representing the range for which the sum should be calculated (inclusive). -----Output:----- For each query, output in a single line, the sum of the elements from index L to R (1-based indexing). -----Constraints----- - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - 1 leq array[i] leq 10^9 - 1 leq L leq R leq N -----Sample Input:----- 5 1 2 3 4 5 3 1 3 2 4 1 5 -----Sample Output:----- 6 9 15","solution":"def process_queries(arr, queries): Processes a list of queries on the input array `arr` to get the sum of elements in the specified ranges. Parameters: arr (list of int): The list of integers in the array. queries (list of tuples): Each tuple contains two integers L and R, representing the range (1-based index). Returns: list of int: The list of results where each element is the sum of elements in arr for the corresponding query range. N = len(arr) prefix_sums = [0] * (N + 1) # Compute prefix sums for i in range(1, N + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] results = [] for L, R in queries: # Convert 1-based index to 0-based index internally sum_range = prefix_sums[R] - prefix_sums[L - 1] results.append(sum_range) return results # Example usage # N = 5 # arr = [1, 2, 3, 4, 5] # Q = 3 # queries = [(1, 3), (2, 4), (1, 5)] # The output should be [6, 9, 15] # print(process_queries(arr, queries))"},{"question":"You are given a list of integers representing a sequence of daily temperature readings. You need to find out how many days it took for the temperature to rise above each day\'s temperature. If it does not rise above, mark it with a 0. Write a function `def daily_temperatures(temperatures: List[int]) -> List[int]:` that takes in the list of temperatures and returns a list of integers where each integer corresponds to the number of days it took for the temperature to rise above the temperature at that day. If no such day exists, return 0 for that position. # Input - A list `temperatures` containing integers where 1 ≤ len(temperatures) ≤ 100000 and -100 ≤ temperatures[i] ≤ 100. # Output - A list of integers corresponding to how many days it took for the temperature to rise above that day\'s temperature, or 0 if it did not rise. # Examples Example 1 Input: `[73, 74, 75, 71, 69, 72, 76, 73]` Output: `[1, 1, 4, 2, 1, 1, 0, 0]` Explanation: For 73 (at index 0), the next warmer temperature is 74 (at index 1), hence the result is 1. For 74 (at index 1), the next warmer temperature is 75 (at index 2), hence the result is 1. For 75 (at index 2), the next warmer temperature is 76 (at index 6), hence the result is 4. For 71 (at index 3), the next warmer temperature is 72 (at index 5), hence the result is 2. For 69 (at index 4), the next warmer temperature is 72 (at index 5), hence the result is 1. For 72 (at index 5), the next warmer temperature is 76 (at index 6), hence the result is 1. For 76 (at index 6), there is no next warmer temperature, hence the result is 0. For 73 (at index 7), there is no next warmer temperature, hence the result is 0. Example 2 Input: `[50, 40, 30, 20, 10]` Output: `[0, 0, 0, 0, 0]` Explanation: In this case, there are no days where the temperature rises above the previous day\'s temperature, hence the result is all 0s.","solution":"from typing import List def daily_temperatures(temperatures: List[int]) -> List[int]: Computes the number of days it takes for each day\'s temperature to rise above the temperature of that day. If it does not rise above, marks with a 0. :param temperatures: List of integers representing daily temperatures. :return: List of integers where each integer corresponds to the number of days it took for the temperature to rise above the temperature at that day. n = len(temperatures) result = [0] * n stack = [] # Stack to keep track of indices of the temperatures for i in range(n): # Check stack until the current temperature is not higher than the one at the top of the stack while stack and temperatures[i] > temperatures[stack[-1]]: index = stack.pop() result[index] = i - index stack.append(i) return result"},{"question":"Your task is to write a function that calculates the factorial of a given non-negative integer **n**. A factorial of a non-negative integer **n** is the product of all positive integers less than or equal to **n**. The factorial of 0 is defined as 1. Your function should return the factorial value of **n**. *Examples* ~~~ factorial(0) -> 1 factorial(1) -> 1 factorial(4) -> 24 factorial(5) -> 120 ~~~ Make sure your solution handles large values of **n** efficiently.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a program in Python that takes a string containing a list of integers separated by commas and spaces, and returns a dictionary with the integer as key and the frequency of its occurrence in the list as value. Input Format A string containing a list of integers separated by commas and spaces. Output Format A dictionary with integers as keys and their frequencies as values. SAMPLE INPUT \\"1, 2, 2, 3, 3, 3, 4, 4, 4, 4\\" SAMPLE OUTPUT {1: 1, 2: 2, 3: 3, 4: 4} Explanation The input string is parsed to extract the integers, and a dictionary is constructed to count the occurrence of each integer.","solution":"def count_frequencies(input_string): Takes a string containing a list of integers separated by commas and spaces, and returns a dictionary with the integer as key and the frequency of its occurrence in the list as value. # Split the input string by \', \' to get a list of integers in string format list_of_numbers = input_string.split(\', \') # Convert the list of string numbers to a list of integers list_of_numbers = list(map(int, list_of_numbers)) # Create a dictionary to hold the frequencies frequency_dict = {} # Count the frequencies of each number for number in list_of_numbers: if number in frequency_dict: frequency_dict[number] += 1 else: frequency_dict[number] = 1 return frequency_dict"},{"question":"A recent study suggests keeping track of daily activities to improve productivity. Activities are categorized into \'W\' (for work) and \'R\' (for rest). Given a string `t` representing a sequence of activities throughout the day and an integer `m` representing the maximum number of consecutive work activities allowed before a required rest, determine if the sequence follows the productivity guidelines. For example, a string \\"WWRWRW\\" with m = 2 follows the guideline since there are no more than 2 consecutive \'W\'s, but the string \\"WWW\\" with m = 2 does not follow the guideline as it has 3 consecutive \'W\'s. Implement the function `isProductiveDay(t, m)` that returns `true` if the activities follow the productivity guidelines or `false` if they do not. Example 1: Input: t = \\"WWRWRW\\", m = 2 Output: true Example 2: Input: t = \\"WWW\\", m = 2 Output: false Constraints: - 1 ≤ |t| ≤ 10^5 - 1 ≤ m ≤ 10^5 Expected Time Complexity: O(|t|). Expected Auxiliary Space: O(1).","solution":"def isProductiveDay(t, m): Checks if the sequence of activities follows the productivity guidelines. Parameters: t (str): A string representing a sequence of activities. m (int): The maximum number of consecutive work activities allowed. Returns: bool: True if the activities follow the guidelines, False otherwise. consecutive_work = 0 for activity in t: if activity == \'W\': consecutive_work += 1 if consecutive_work > m: return False else: consecutive_work = 0 return True"},{"question":"You are working on a software project called \\"Array Modifier\\". The goal of this project is to modify an array of integers according to a set of rules. Specifically, you need to minimize the length of the array by repeatedly removing adjacent pairs of elements that have the same value. If two adjacent elements have the same value, they are removed together from the array. For instance, if the initial array is [3, 3, 2, 2, 1, 1], then you can perform the following steps: - Remove the pair (3, 3), resulting in the array [2, 2, 1, 1] - Remove the pair (2, 2), resulting in the array [1, 1] - Remove the pair (1, 1), resulting in an empty array For a given array, determine the final length of the array after all possible adjacent pairs of equal elements have been removed. -----Input----- The first line contains one integer `t` (`1 <= t <= 10^4`). Then `t` test cases follow. The first line of each test case contains an integer `n` (`1 <= n <= 10^6`), the size of the array. The second line of each test case contains `n` space-separated integers, the elements of the array. It is guaranteed that the sum of all `n` over all test cases does not exceed `10^6`. -----Output----- For each test case, output the length of the final array after all possible adjacent pairs of equal elements have been removed. -----Examples----- Input 4 6 3 3 2 2 1 1 5 1 2 2 3 3 3 1 1 2 4 2 2 2 2 Output 0 1 1 0 -----Note----- None","solution":"def final_length_after_removals(t, test_cases): def reduce_array(arr): stack = [] for num in arr: if stack and stack[-1] == num: stack.pop() else: stack.append(num) return len(stack) results = [] for n, arr in test_cases: results.append(reduce_array(arr)) return results"},{"question":"You are given a sequence of integers and need to perform a series of operations on this sequence. Each operation consists of selecting two positions in the sequence and calculating their sum. Your task is to find the maximum sum that can be produced by exactly one operation. # Input The input will be given in the following format: ``` N a1 a2 a3 ... aN Q p1 q1 p2 q2 ... pQ qQ ``` Where: - `N` (1 ≤ N ≤ 1000) is the number of elements in the sequence. - `a1, a2, ..., aN` (-10^6 ≤ ai ≤ 10^6) are the elements of the sequence. - `Q` (1 ≤ Q ≤ 1000) is the number of operations to be performed. - `pi` and `qi` (1 ≤ pi, qi ≤ N) are the positions for the i-th operation. # Output Output the maximum sum of all pairs (pi, qi) from the sequence based on the given operations. # Example Input ``` 5 1 3 -2 8 -7 3 1 2 4 5 3 4 ``` Output ``` 1 ``` Explanation: - For the operation (1, 2), the sum is 1 + 3 = 4. - For the operation (4, 5), the sum is 8 + (-7) = 1. - For the operation (3, 4), the sum is -2 + 8 = 6. Therefore, the maximum sum is 6.","solution":"def find_max_sum(N, sequence, Q, operations): This function finds the maximum sum of pairs from the sequence based on the given operations. max_sum = float(\'-inf\') for p, q in operations: # Calculate the sum of the elements at position p and q (1-based indexing) current_sum = sequence[p - 1] + sequence[q - 1] # Update the maximum sum if the current sum is greater than the maximum found so far if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Task: Write a function `fibonacci_sequence` that takes a single integer `n` (n ≥ 1) and returns a list of the first `n` numbers in the Fibonacci sequence. # Rules/Note: * If `n` is 1, the list should contain the first Fibonacci number. * The Fibonacci sequence is defined as follows: - F(0) = 0, F(1) = 1 - F(n) = F(n-1) + F(n-2); for n > 1 # Examples: * fibonacci_sequence(5): [0, 1, 1, 2, 3] * fibonacci_sequence(10): [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]","solution":"def fibonacci_sequence(n): Returns a list of the first n Fibonacci numbers. if n == 1: return [0] fib_list = [0, 1] for _ in range(2, n): fib_list.append(fib_list[-1] + fib_list[-2]) return fib_list"},{"question":"Emma is a software engineer tasked with managing server logs. These logs contain various records of user activities within the system. Each record includes a timestamp and an event description. Due to a system glitch, some of the log entries may appear out of order. Emma needs your help to sort the log entries based on their timestamps to reconstruct the original sequence of events. The log system follows these rules: 1. Each log entry consists of a timestamp in the format \\"YYYY-MM-DD HH:MM:SS\\" and an event description. 2. The entries should be sorted in ascending order based on their timestamps. 3. Multiple entries that share the same timestamp should retain their relative order in the original input list. Write a program that takes a list of log entries and returns them sorted by their timestamps. # Input - The input consists of multiple log entries. Each entry is on a separate line. - Each log entry follows the format: `<timestamp> <event_description>` - The end of the input is marked by a blank line. # Output - Print the log entries sorted in ascending order by their timestamps. - Ensure that entries with identical timestamps remain in their original relative order. # Example Input ```plaintext 2023-01-05 14:30:15 User logged in 2023-01-05 14:30:20 File uploaded 2023-01-05 14:30:15 User opened settings 2023-01-05 14:32:10 User logged out 2023-01-05 14:30:15 File deleted ``` Output ```plaintext 2023-01-05 14:30:15 User logged in 2023-01-05 14:30:15 User opened settings 2023-01-05 14:30:15 File deleted 2023-01-05 14:30:20 File uploaded 2023-01-05 14:32:10 User logged out ``` # Constraints - The number of log entries `n` can range from 1 to 1000. - Timestamps are guaranteed to be valid and follow the format \\"YYYY-MM-DD HH:MM:SS\\". - Strings describing events can contain alphanumeric characters, spaces, and punctuation marks. # Approach 1. Parse the log entries and separate timestamps from event descriptions. 2. Use a stable sorting algorithm to ensure entries with identical timestamps retain their relative order. 3. Output the sorted log entries.","solution":"def sort_logs(log_entries): Sorts the log entries based on their timestamps. :param log_entries: list of strings, where each string is a log entry with a timestamp :return: list of sorted log entries # Split each entry into a tuple containing the timestamp and the rest of the entry logs_with_timestamps = [(entry[:19], entry) for entry in log_entries] # Sort the logs based on the timestamp while preserving the original order for entries with the same timestamp sorted_logs = sorted(logs_with_timestamps, key=lambda x: x[0]) # Return only the sorted log entries return [entry for _, entry in sorted_logs] def parse_input(input_string): Parses the input string into a list of log entries. :param input_string: string, where each line is a log entry :return: list of log entries return input_string.strip().split(\'n\')"},{"question":"A valid email address consists of a local part followed by an \\"@\\" symbol followed by a domain part. The local part can contain lowercase and uppercase letters, digits, dots (\'.\'), and underscores (\'_\'). The domain part can contain lowercase letters, digits, and dots (\'.\'). However, the domain part cannot have two consecutive dots and cannot start or end with a dot. Additionally, the local part should not start or end with a dot. Write a function `is_valid_email(email)` that checks whether a given string is a valid email address based on the criteria given above. The function should return `True` if the email is valid and `False` otherwise. Input - A single string representing the email address. Output - A boolean value: `True` if the email address is valid, `False` otherwise. Examples Input `user.name@domain.com` Output `True` Input `.username@domain.com` Output `False` Input `username@domain..com` Output `False` Explanation In the first example, the email address conforms to all the valid email rules described above. In the second example, the local part starts with a dot, which makes it invalid. In the third example, the domain part has two consecutive dots, which makes it invalid. Note To test the function, consider edge cases such as maximum and minimum lengths of local and domain parts, the presence of valid and invalid characters, and various combinations of dots and underscores in both parts.","solution":"import re def is_valid_email(email): Check if the given email is valid based on the defined criteria. pattern = re.compile( r\'^[a-zA-Z0-9._]+@[a-zA-Z0-9]+.[a-zA-Z0-9.]*[a-zA-Z0-9]+\' ) if not pattern.match(email): return False local_part, domain_part = email.split(\'@\') # Check if local part starts or ends with a dot if local_part.startswith(\'.\') or local_part.endswith(\'.\'): return False # Check if domain part starts, ends with a dot or has consecutive dots if domain_part.startswith(\'.\') or domain_part.endswith(\'.\') or \'..\' in domain_part: return False return True"},{"question":"**Problem Statement** You are a technical lead at a software company developing a cloud-based file storage system. Users can upload files to this system and organize them within folders. Each folder can contain files and/or other folders, creating a nested structure. The system needs to provide a way to report the total size of all files within a specified folder, including files in any subfolders. # Input: - The first line contains an integer `M` representing the number of operations (1 ≤ M ≤ 100,000). - The next `M` lines describe the operations in the following format: - `1 F S` indicates a file with size `S` is uploaded into folder `F`. (1 ≤ S ≤ 10^9) - `2 F1 F2` indicates folder `F1` is created inside folder `F2`. - `3 F` requests the total size of files within folder `F`, including all subfolders. # Output: For each operation of type `3 F`, output a single line with the total size of all files within the specified folder `F`, including the sizes of files in any subfolders. # Example: Input: ``` 10 1 1 100 2 2 1 1 2 200 2 3 1 1 3 300 2 4 2 1 4 400 2 5 4 1 5 500 3 1 ``` Output: ``` 1500 ``` # Explanation: - Operation 1: A file of size 100 is uploaded into folder 1. - Operation 2: Folder 2 is created inside folder 1. - Operation 3: A file of size 200 is uploaded into folder 2. - Operation 4: Folder 3 is created inside folder 1. - Operation 5: A file of size 300 is uploaded into folder 3. - Operation 6: Folder 4 is created inside folder 2. - Operation 7: A file of size 400 is uploaded into folder 4. - Operation 8: Folder 5 is created inside folder 4. - Operation 9: A file of size 500 is uploaded into folder 5. - Operation 10: Query the total size of files in folder 1 and its subfolders: - Folder 1 contains folders 2 and 3. - Folder 2 contains folder 4. - Folder 3 contains no subfolders. - Folder 4 contains folder 5. - Summing up the file sizes: 100 + 200 + 300 + 400 + 500 = 1500.","solution":"class CloudStorage: def __init__(self): self.files = {} self.folders = {} def add_file(self, folder, size): if folder not in self.files: self.files[folder] = 0 self.files[folder] += size def create_folder(self, folder1, folder2): if folder2 not in self.folders: self.folders[folder2] = [] self.folders[folder2].append(folder1) def total_size(self, folder): total = self._calculate_size(folder) return total def _calculate_size(self, folder): size = self.files.get(folder, 0) for subfolder in self.folders.get(folder, []): size += self._calculate_size(subfolder) return size # Sample Input/Output Execution def main(): storage = CloudStorage() M = int(input().strip()) for _ in range(M): operation = input().strip().split() op_type = int(operation[0]) if op_type == 1: folder = int(operation[1]) size = int(operation[2]) storage.add_file(folder, size) elif op_type == 2: folder1 = int(operation[1]) folder2 = int(operation[2]) storage.create_folder(folder1, folder2) elif op_type == 3: folder = int(operation[1]) print(storage.total_size(folder)) if __name__ == \\"__main__\\": main()"},{"question":"A string is considered to have all unique characters if each character in the string appears exactly once. Write a function that checks whether a given string has all unique characters. Your function should have the following signature: ```python def has_all_unique_chars(s: str) -> bool: pass ``` **Input:** - `s` (1 <= len(s) <= 1000): A string consisting of printable ASCII characters. **Output:** - Return `True` if the string has all unique characters, otherwise return `False`. **Examples:** ```python has_all_unique_chars(\\"abcdef\\") # returns True, since all characters are unique has_all_unique_chars(\\"apple\\") # returns False, since \'p\' appears more than once has_all_unique_chars(\\"1234567890\\") # returns True, all characters are unique has_all_unique_chars(\\"112233\\") # returns False, since \'1\', \'2\', \'3\' each appear more than once ``` **Notes:** - You may not use additional data structures or libraries that simplify this functionality directly. Aim for efficient time complexity with respect to the length of the string. - ASCII includes 128 characters, hence an optimal solution should run in linear time.","solution":"def has_all_unique_chars(s: str) -> bool: Check if a given string has all unique characters. Parameters: - s: a string consisting of printable ASCII characters Returns: - A boolean value True if all characters in the string are unique, False otherwise if len(s) > 128: # There are only 128 unique ASCII characters, hence any string longer # than this cannot have all unique characters return False char_set = [False] * 128 # Boolean array to store a character\'s existence for char in s: idx = ord(char) # Getting the ASCII value of the character if char_set[idx]: # If already found in the set return False char_set[idx] = True # Marking the character as found return True"},{"question":"You are given a sequence of lowercase English letters. Your task is to find the smallest lexicographical string that can be obtained by deleting exactly one character from the given string. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of testcases. The first line of each testcase contains a non-empty string s of lowercase English letters. The length of each string s is at least 2 and at most 10^5. The total length of all strings s over all testcases does not exceed 10^6. -----Output----- For each testcase, print the smallest lexicographical string that can be obtained by deleting exactly one character from the given string. -----Examples----- Input 3 abc acbd zyx Output ab abd yx -----Note----- In the first testcase, deleting the character \'c\' results in the smallest lexicographical string \\"ab\\". In the second testcase, deleting the character \'c\' results in the smallest lexicographical string \\"abd\\". In the third testcase, deleting the character \'z\' results in the smallest lexicographical string \\"yx\\".","solution":"def smallest_lexicographical_after_deletion(s): Finds the smallest lexicographical string by deleting exactly one character from the given string. for i in range(len(s) - 1): if s[i] > s[i + 1]: return s[:i] + s[i + 1:] return s[:-1] def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(smallest_lexicographical_after_deletion(s)) return results"},{"question":"Zoe is organizing a themed birthday party, and she wants to make sure everyone gets a unique party hat. She has n unique hat patterns, each made up of m distinct colors. The colors used in each pattern follow a specific order. She has one big string which consists of all the colors from the hat patterns in a continuous sequence, but this string has been shuffled in such a way that it splits the patterns and keeps colors together. Given the shuffled string and the list of hat patterns, your task is to help Zoe restore the original order of the hat patterns so she can make sure each pattern is unique and complete. # Input - The first line of the input contains two positive integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5) — the number of hat patterns and the length of each pattern. - The second line contains one string consisting of lowercase English letters — the string Zoe has which represents the shuffled hat patterns. The length of this string is n * m. It is guaranteed that the length does not exceed 10^6. - The third line contains one positive integer h (n ≤ h ≤ 10^5) — the number of available hat patterns Zoe can choose from. It is guaranteed that the total length of names of all hat patterns does not exceed 2 * 10^6. - Each of the next h lines contains a single string — the pattern of the hat. Each string consists of lowercase English letters and has length m. It is guaranteed that the patterns are distinct. # Output If there is no valid order to restore all patterns, print \\"NO\\" (without quotes). Otherwise, print \\"YES\\" (without quotes) in the first line. In the second line, print n integers — the indexes of the patterns in the order they appear in the string. The patterns should be in the order of the shuffled string they form when concatenated in sequence. You can start the order from any position. If there are several possible answers, print any of them. # Examples Input: ``` 3 2 aabbcc 4 aa bb cc dd ``` Output: ``` YES 1 2 3 ``` Input: ``` 3 2 ababcc 3 bb aa cc ``` Output: ``` NO ``` # Note In the first example, the string \\"aabbcc\\" can be split into patterns \\"aa\\", \\"bb\\", \\"cc\\" which match the available patterns given. In the second example, it is impossible to split the string \\"ababcc\\" into the available patterns without overlapping or repeating. Therefore, the output is \\"NO\\".","solution":"def restore_hat_patterns(n, m, shuffled_string, h, patterns): from collections import Counter # Create a set of available patterns for quick lookup available_patterns = {} for i, pattern in enumerate(patterns): available_patterns[pattern] = i + 1 # store index+1 for each pattern # create a list of all patterns from the shuffled_string string_patterns = [shuffled_string[i:i+m] for i in range(0, len(shuffled_string), m)] # create a counter for all patterns in the shuffled_string counter_string_patterns = Counter(string_patterns) # create a counter for all available patterns counter_available_patterns = Counter(patterns) # check if we have enough patterns in available patterns to match string patterns for pattern, count in counter_string_patterns.items(): if counter_available_patterns[pattern] < count: return \\"NO\\" # If we pass the above check, assign indices to the patterns result_indices_sequence = [available_patterns[pattern] for pattern in string_patterns] return \\"YESn\\" + \\" \\".join(map(str, result_indices_sequence)) # Example usage # restore_hat_patterns(3, 2, \\"aabbcc\\", 4, [\\"aa\\", \\"bb\\", \\"cc\\", \\"dd\\"]) # Expected output: \\"YESn1 2 3\\""},{"question":"A company organizes a game challenge where V volunteers are invited to participate in different tasks. Each task gives a certain number of points to be earned, and each volunteer can participate in any number of tasks. The points, however, can only be awarded if a task is taken by a unique volunteer. Your goal is to determine the maximum points that can be earned by the volunteers. You are given a list of integers, where each integer represents the points of a task. Your task is to write a program that computes the maximum points that can be earned while assigning each task to a unique volunteer. -----Constraints----- - 1 leq V leq 100 - 1 leq number of tasks leq 10^4 - Each task’s points are between 1 and 10^6 -----Input----- Input is given from Standard Input in the following format: - The first line contains an integer V. - The second line contains space-separated integers representing the points of each task. -----Output----- Print the maximum points that can be earned. -----Sample Input----- 3 4 5 1 3 7 2 -----Sample Output----- 16 In this example, the tasks with points 7, 5, and 4 can be chosen to give a total of 16 points, which is the maximum sum of points that can be earned by the 3 volunteers.","solution":"def max_points(V, tasks): Compute the maximum points that can be earned by assigning each task to a unique volunteer. :param V: Number of volunteers :param tasks: List of integers representing points of each task :return: Maximum points that can be earned # Sort the tasks in descending order to get the tasks with the highest points first tasks_sorted = sorted(tasks, reverse=True) # Select the top V tasks top_tasks = tasks_sorted[:V] # Compute the sum of the top V tasks return sum(top_tasks)"},{"question":"Given a binary tree, write a function that returns the lowest common ancestor (LCA) of two given nodes in the tree. The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself). Example 1: Input: 3 / 5 1 / / 6 2 0 8 / 7 4 p = 5, q = 1 Output: 3 Example 2: Input: 3 / 5 1 / / 6 2 0 8 / 7 4 p = 5, q = 4 Output: 5 Example 3: Input: 3 / 5 1 / / 6 2 0 8 / 7 4 p = 7, q = 8 Output: 3 Your task: You don\'t need to read input or print anything. Complete the function lowest_common_ancestor(root, p, q) that takes the root of the tree and the values of two nodes p and q and returns the lowest common ancestor of these two nodes. Constraints: - All the node values are unique. - p and q are different and both values will exist in the binary tree. - 1 ≤ Number of nodes in the tree ≤ 10^4","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def lowest_common_ancestor(root, p, q): Function to find the lowest common ancestor of two given nodes in a binary tree. :param TreeNode root: The root of the binary tree. :param TreeNode p: The first node. :param TreeNode q: The second node. :return: The lowest common ancestor of the given nodes. :rtype: TreeNode if root is None or root == p or root == q: return root left_lca = lowest_common_ancestor(root.left, p, q) right_lca = lowest_common_ancestor(root.right, p, q) if left_lca and right_lca: return root return left_lca if left_lca else right_lca"},{"question":"Astra Corporation owns a network of n computer nodes, each initially connected by m unidirectional data cables. The network undergoes continuous changes in its connections due to maintenance and updates. Each node is identified by an integer ID from 1 to n. The changes and queries about the network structure can contain the following types: 1. Add a new cable between two nodes u and v, allowing data flow from u to v. 2. Remove an existing cable between two nodes u and v. 3. Check if there is a direct cable from node u to node v. 4. Determine if there is a path, direct or indirect, from node u to node v. You need to process the changes and answer the queries accordingly. **Input:** The first line contains two integers, n and q (1 ≤ n ≤ 1000, 1 ≤ q ≤ 10000) — the number of nodes and the number of queries, respectively. The following q lines describe the queries/changes in one of the following formats: - \\"A u v\\" — Add a new cable from node u to node v. - \\"R u v\\" — Remove an existing cable from node u to node v. - \\"D u v\\" — Check if there is a direct cable from node u to node v. - \\"P u v\\" — Determine if there is a path from node u to node v. **Output:** For each query of type \\"D\\" or \\"P\\", output \\"YES\\" if the condition holds, otherwise output \\"NO\\". **Example:** **Input:** ``` 5 7 A 1 2 A 2 3 D 1 2 P 1 3 R 1 2 D 1 2 P 1 3 ``` **Output:** ``` YES YES NO NO ``` **Explanation:** 1. A cable is added from node 1 to node 2. 2. A cable is added from node 2 to node 3. 3. There is a direct cable from node 1 to node 2. 4. There is a path from node 1 to node 3 through node 2. 5. The cable from node 1 to node 2 is removed. 6. No direct cable exists between node 1 and node 2. 7. No path exists between node 1 and node 3 anymore because the connection was removed.","solution":"def find_paths(adj_list, u, v, visited): if u == v: return True visited[u] = True for neighbor in adj_list[u]: if not visited[neighbor]: if find_paths(adj_list, neighbor, v, visited): return True return False def process_queries(n, queries): adj_list = [[] for _ in range(n + 1)] results = [] for query in queries: parts = query.split() cmd = parts[0] u = int(parts[1]) v = int(parts[2]) if cmd == \\"A\\": adj_list[u].append(v) elif cmd == \\"R\\": if v in adj_list[u]: adj_list[u].remove(v) elif cmd == \\"D\\": if v in adj_list[u]: results.append(\\"YES\\") else: results.append(\\"NO\\") elif cmd == \\"P\\": visited = [False] * (n + 1) if find_paths(adj_list, u, v, visited): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Emma is a software engineer who enjoys gardening in her spare time. She has a rectangular garden consisting of n rows and m columns. Each cell in the garden can either contain a plant or be empty. Emma wants to maximize the beauty of her garden by planting the maximum number of plants. However, she also needs to follow certain rules to ensure that the garden is well-organized: 1. Emma can only plant a new plant in an empty cell if there are no other plants in the same row or column of that cell. 2. Emma can choose to remove existing plants to plant new ones, but she wants to minimize the number of removals. Emma needs to report the maximum number of plants she can have in the garden following the given rules and the number of removals required to achieve that. Write a function `maximizePlants` that takes an integer n, an integer m, and a 2D array representing the garden\'s initial state. Each element in the array is either `1` (indicating a plant) or `0` (indicating an empty cell). The function should return a tuple of two integers: - The maximum number of plants that can be in the garden. - The minimum number of removals required to achieve that. # Input Format - The first line contains two integers, n and m, representing the number of rows and columns in the garden. - The next n lines each contain m integers, representing the initial state of the garden. # Constraints - 1 leq n, m leq 200 - Each element of the garden array is either 0 or 1 # Output Format - The function should return a tuple of two integers. # Sample Input 0 ``` 3 4 1 0 0 1 0 1 0 0 0 0 1 0 ``` # Sample Output 0 ``` 3 1 ``` # Explanation 0 Emma can convert the initial garden state as follows: Initial state: ``` 1 0 0 1 0 1 0 0 0 0 1 0 ``` To place the maximum number of plants (3): - Remove 1 plant from the first row: ``` 0 0 0 1 0 1 0 0 0 0 1 0 ``` - Place 1 plant in the first row, second column (removal count becomes 1): ``` 0 0 0 1 0 1 0 0 0 0 1 0 ``` Final state meets the given rules with 3 plants and 1 removal.","solution":"def maximizePlants(n, m, garden): max_plants = min(n, m) row_has_plant = [False] * n col_has_plant = [False] * m initial_plants = 0 # Count initial plants and mark rows and columns that have plants for i in range(n): for j in range(m): if garden[i][j] == 1: initial_plants += 1 row_has_plant[i] = True col_has_plant[j] = True rows_with_plants = sum(row_has_plant) cols_with_plants = sum(col_has_plant) # Maximum plants that can be placed is limited by the smaller dimension total actual_max_plants = min(rows_with_plants, cols_with_plants) # Calculating removals needed to achieve this number of plants removals = initial_plants - actual_max_plants return actual_max_plants, removals"},{"question":"Write a function that accepts a string of lowercase letters and numbers (0-9). Your task is to sum all the digits in the string while ignoring the letters. For example, given the input \\"abc123xyz\\", the function should return 6, since 1 + 2 + 3 = 6. **Note:** The function should return an integer.","solution":"def sum_of_digits(s): Returns the sum of all digits in the input string. Parameters: s (str): A string containing lowercase letters and digits (0-9) Returns: int: The sum of all digits in the input string return sum(int(char) for char in s if char.isdigit())"},{"question":"A group of friends is playing a game where each friend receives a score based on the roll of a die. You must determine the winner(s) of the game. A player is considered a winner if they have the highest score among all players. You are given a number textit{n} indicating the number of players, followed by textit{n} integers representing the scores for each player. Your task is to identify all the winners and print their scores in ascending order. Example n=5 scores=[4, 8, 8, 5, 8] In this case, the highest score is 8, and there are three players with this score. The output should be a single line with the score 8 repeated according to the number of winners. Function Description Complete the function findWinners to return the appropriate answer. findWinners has the following parameter(s): int n: the number of players List[int] scores: an array of integers representing each player\'s score Returns List[int]: a list of integers, the highest score(s) in ascending order Input Format The first line contains a single integer, textit{n}, denoting the number of players. The second line contains textit{n} space-separated integers representing the scores of the players. Constraints 1 leq n leq 100 1 leq scores[i] leq 100 Sample Input 0 5 4 8 8 5 8 Sample Output 0 8 8 8 Explanation 0 The unique highest score is 8, and there are three winners with this score. Sample Input 1 4 1 1 1 1 Sample Output 1 1 1 1 1 Explanation 1 All players have the same score of 1, so they all are winners with the highest score of 1.","solution":"def findWinners(n, scores): Determines the winner(s) with the highest score and returns the score in ascending order. Parameters: n (int): the number of players scores (list of int): an array of integers representing each player\'s score Returns: list of int: a list of integers of the highest score(s) in ascending order max_score = max(scores) return [max_score] * scores.count(max_score)"},{"question":"Given two sets of integers 𝑆 = {𝑠_1, 𝑠_2, ..., 𝑠_𝑁} and 𝑇 = {𝑡_1, 𝑡_2, ..., 𝑡_𝑀}, where |𝑆| ≠ |𝑇|. The task is to determine for each number in 𝑇, its smallest greater number present in 𝑆. If no such number exists, return -1. # Input: - The first line contains two integers, 𝑁 (size of set 𝑆) and 𝑀 (size of set 𝑇). - The second line contains 𝑁 integers representing set 𝑆. - The third line contains 𝑀 integers representing set 𝑇. # Output: - For each number in 𝑇, print the smallest greater number present in 𝑆. If no such number exists, print -1. # Constraints: - 1 ≤ 𝑁, 𝑀 ≤ 100,000 - 1 ≤ elements of 𝑆 and 𝑇 ≤ 100,000 # Example Input: ``` 5 3 10 20 30 40 50 5 25 60 ``` Output: ``` 10 30 -1 ``` # Explanation - For `5` from 𝑇, the smallest greater number in 𝑆 is `10`. - For `25` from 𝑇, the smallest greater number in 𝑆 is `30`. - For `60` from 𝑇, there is no greater number in 𝑆, so the output is `-1`.","solution":"def smallest_greater_numbers(S, T): For each number in T, find its smallest greater number in S. If no such number exists, return -1. S = sorted(S) results = [] def find_smallest_greater(x): left, right = 0, len(S) while left < right: mid = (left + right) // 2 if S[mid] <= x: left = mid + 1 else: right = mid return S[left] if left < len(S) else -1 for t in T: results.append(find_smallest_greater(t)) return results"},{"question":"You are given a string S and an integer N. Reverse the first N characters in the string S while leaving the rest of the string unchanged, and print the result. For example, if S = \\"helloworld\\" and N = 5, print \\"ollehworld\\". Constraints * 1 leq N leq length of S * The string S consists of lowercase English letters only. Input Input is given from Standard Input in the following format: ``` S N ``` Output Print the string resulting from reversing the first N characters in the string S while leaving the rest unchanged. Example Input ``` helloworld 5 ``` Output ``` ollehworld ```","solution":"def reverse_first_n_characters(S, N): Returns a string where the first N characters are reversed, and the rest of the string is unchanged. Parameters: S (str): the input string N (int): the number of characters to reverse from the beginning of the string Returns: str: the resulting string with the first N characters reversed if not 1 <= N <= len(S): raise ValueError(\\"N must be between 1 and the length of the string S.\\") return S[:N][::-1] + S[N:]"},{"question":"A company has several delivery trucks that need to be scheduled to deliver packages to different locations. Each truck has a distinct capacity indicating the maximum number of packages it can carry. The goal is to maximize the usage of each truck\'s capacity without exceeding it. Given the package weights and truck capacities, determine if it\'s possible to allocate the packages to the trucks such that each truck\'s load is maximized. Input: The input consists of several datasets. Each dataset is formatted as follows: - The first line contains two integers, T (1 ≤ T ≤ 10) and P (1 ≤ P ≤ 100), where T is the number of trucks and P is the number of packages. - The second line contains T integers representing the capacities of the trucks. - The third line contains P integers representing the weights of the packages. The output for each dataset should be \\"YES\\" if it is possible to allocate packages to the trucks such that each truck\'s load is maximized without exceeding the truck\'s capacity, and \\"NO\\" otherwise. Example: Input: 3 5 10 15 20 5 10 15 5 5 2 3 10 10 8 8 8 2 2 5 10 12 3 0 Output: YES NO NO Explanation of example: - In the first dataset, packages can be allocated like this: truck 1: [5, 5], truck 2: [10, 5], truck 3: [15]. All trucks are maximized. - In the second dataset, it\'s impossible to allocate three packages each with a weight of 8 to two trucks each with a maximum capacity of 10. - In the third dataset, package with weight 12 exceeds the capacity of the trucks, so allocation is not possible.","solution":"def can_allocate_packages(truck_capacities, package_weights): Determines if it\'s possible to allocate packages to trucks such that each truck\'s load is maximized without exceeding the truck\'s capacity. Parameters: truck_capacities (List[int]): List of truck capacities. package_weights (List[int]): List of package weights. Returns: str: \\"YES\\" if it\'s possible to allocate packages, \\"NO\\" otherwise. from itertools import permutations # Sort both lists to optimize allocation truck_capacities.sort(reverse=True) package_weights.sort(reverse=True) # Try to allocate packages for each permutation of trucks for perm in permutations(truck_capacities): truck_index = 0 current_load = 0 for weight in package_weights: if current_load + weight <= perm[truck_index]: current_load += weight else: truck_index += 1 if truck_index >= len(perm): break current_load = weight if truck_index < len(perm): return \\"YES\\" return \\"NO\\" def process_datasets(datasets): results = [] for data in datasets: T, P = data[\'T\'], data[\'P\'] truck_capacities = data[\'truck_capacities\'] package_weights = data[\'package_weights\'] result = can_allocate_packages(truck_capacities, package_weights) results.append(result) return results"},{"question":"You are given a string S consisting of lowercase English letters. Suppose G(W) gives the number of different characters in the substring W of the string S. Find the value of G(S_{i..j}) for all (1 ≤ i ≤ j ≤ |S|). ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of two lines of input. - The first line of each test case contains an integer N — the length of the string S. - The second line of each test case contains the string S (of length N). ------ Output Format ------ For each test case, print the total number of distinct characters in the substrings of S in a matrix format, where the value at position (i, j) denotes the value G(S_{i..j}). ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 500 S_{i} is a lowercase English letter ------ Sample Input 1 ------ 2 3 abc 4 aabb ------ Sample Output 1 ------ 1 2 3 0 1 2 0 0 1 1 1 2 2 0 1 1 2 0 0 1 1 0 0 0 1 ------ Explanation 1 ------ Test case 1: Given S = \\"abc\\" - G(S_{1..1}) = G(\\"a\\") = 1 - G(S_{1..2}) = G(\\"ab\\") = 2 - G(S_{1..3}) = G(\\"abc\\") = 3 - G(S_{2..2}) = G(\\"b\\") = 1 - G(S_{2..3}) = G(\\"bc\\") = 2 - G(S_{3..3}) = G(\\"c\\") = 1 Test case 2: Given S = \\"aabb\\" - G(S_{1..1}) = G(\\"a\\") = 1 - G(S_{1..2}) = G(\\"aa\\") = 1 - G(S_{1..3}) = G(\\"aab\\") = 2 - G(S_{1..4}) = G(\\"aabb\\") = 2 - G(S_{2..2}) = G(\\"a\\") = 1 - G(S_{2..3}) = G(\\"ab\\") = 2 - G(S_{2..4}) = G(\\"abb\\") = 2 - G(S_{3..3}) = G(\\"b\\") = 1 - G(S_{3..4}) = G(\\"bb\\") = 1 - G(S_{4..4}) = G(\\"b\\") = 1 The output matrices match the number of distinct characters in all possible substrings of the input strings.","solution":"def count_distinct_characters(S): n = len(S) result = [[0] * n for _ in range(n)] for i in range(n): distinct_chars = set() for j in range(i, n): distinct_chars.add(S[j]) result[i][j] = len(distinct_chars) return result def process_test_cases(test_cases): results = [] for N, S in test_cases: results.append(count_distinct_characters(S)) return results"},{"question":"A group of friends decided to play a game. Each person writes down two numbers: the number of games they won and the number of games they lost. The person with the highest win/loss ratio is declared the winner. If two or more people have the same ratio, the one who played the most games (win + loss) wins. Write a program to determine the winner. -----Input----- The first line of input contains an integer n, the number of players, where 1 leq n leq 100. Each of the next n lines contains two integers: w_i and l_i (0 leq w_i, l_i leq 100), the number of games won and lost by the i-th player, respectively. -----Output----- Output a single integer, the index (1-based) of the winning player. If multiple players qualify, output the smallest index among them. -----Examples----- Sample Input: 3 7 3 4 2 5 1 Sample Output: 3 Sample Input: 3 2 0 1 1 3 2 Sample Output: 1","solution":"def find_winner(n, results): Determines the winner based on the highest win/loss ratio and the highest number of games played. Parameters: n (int): The number of players. results (list of tuples): List containing tuples of (win, loss) for each player. Returns: int: The 1-based index of the winning player. max_ratio = -1 max_games = -1 winner_index = -1 for index, (wins, losses) in enumerate(results): if losses == 0: ratio = float(\'inf\') else: ratio = wins / losses games_played = wins + losses if (ratio > max_ratio) or (ratio == max_ratio and games_played > max_games): max_ratio = ratio max_games = games_played winner_index = index + 1 return winner_index"},{"question":"Write a function that takes a list of integers as input and returns a new list that contains only the unique integers from the input list. The integers in the output list should be in the same order as they first appeared in the input list. # Constraints * The input list can contain up to 10,000 integers. * Each integer in the list is between -10^9 and 10^9. # Input * A list of integers. # Output * A list of integers containing only the unique integers in the same order they appeared in the input list. # Example Input [4, 5, 9, 4, 9, 10, 5] Output [4, 5, 9, 10] Input [1, 2, 3, 2, 1, 4, 5, 3] Output [1, 2, 3, 4, 5] # Note The order of integers in the input list must be preserved in the resulting output list of unique integers.","solution":"def unique_integers(input_list): Returns a new list containing only the unique integers from the input list in the same order they first appeared. seen = set() unique_list = [] for num in input_list: if num not in seen: seen.add(num) unique_list.append(num) return unique_list"},{"question":"You are given a list of positive integers. Your task is to write a function that returns the longest subsequence of consecutive integers in increasing order. If there are multiple such subsequences of the same length, return any one of them. For example, ```python nums = [3, 10, 2, 1, 20] longest_consecutive_subsequence(nums) # [2, 3] or [1, 2] nums = [10, 12, 11, 14, 15, 16, 17] longest_consecutive_subsequence(nums) # [10, 11, 12] or [14, 15, 16, 17] ``` You are required to implement the function `longest_consecutive_subsequence` that receives a list of integers and returns the longest subsequence of consecutive numbers in increasing order.","solution":"def longest_consecutive_subsequence(nums): Returns the longest subsequence of consecutive integers in increasing order. If there are multiple subsequences of the same length, returns any one of them. :param nums: List of positive integers :return: List of integers representing the longest subsequence of consecutive integers if not nums: return [] nums = sorted(set(nums)) longest, current = [], [] for num in nums: if not current or num == current[-1] + 1: current.append(num) else: if len(current) > len(longest): longest = current current = [num] return max(longest, current, key=len)"},{"question":"You are given an array of integers representing the number of calories in each segment of a chocolate bar. You want to break the chocolate bar into exactly two pieces and each piece must contain at least one segment. Your goal is to eat the piece with the maximum total number of calories, but you want to minimize that maximum to control your calorie intake. Write a function `minimizeMaxCalories` that takes an array `calories` as input and returns the minimum possible value of the maximum calorie piece you can get after breaking the chocolate bar into two pieces. Example 1: Input: calories = [4, 5, 9, 7] Output: 16 Explanation: By breaking the bar between segments 2 and 3, the two pieces would be [4, 5] and [9, 7], with totals of 9 and 16 calories respectively. The larger of the two totals is 16. Other ways to break the bar do not yield a smaller maximal total. Example 2: Input: calories = [1, 2, 3, 4, 5] Output: 9 Explanation: Breaking the bar between segments 3 and 4 gives pieces [1, 2, 3] and [4, 5], with totals of 6 and 9. This is the best partition to minimize the maximum calorie count. Constraints: - 2 <= calories.length <= 50 - 1 <= calories[i] <= 100","solution":"def minimizeMaxCalories(calories): n = len(calories) min_max_calories = float(\'inf\') # Iterate through possible splits for i in range(1, n): left_piece = sum(calories[:i]) right_piece = sum(calories[i:]) max_piece = max(left_piece, right_piece) min_max_calories = min(min_max_calories, max_piece) return min_max_calories"},{"question":"You are tasked with managing a new video streaming service. To handle the tasks, you need to optimize the data load across several servers. The servers are connected in a hierarchical, tree-like network with one root server. The network is represented as a tree with n nodes (servers) and n-1 edges (connections). Each edge has a fixed data transfer time. The root server is denoted as node 1. You need to perform q queries on this network. Each query asks for the time it takes to transfer data between two servers. Write a function that processes each query and returns the data transfer time between the two specified servers. Input: - The first line contains two integers n and q (1 ≤ n, q ≤ 10^5), the number of servers and the number of queries. - Each of the next n-1 lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9), indicating that there is a connection between servers u and v with a data transfer time of w. - Each of the next q lines contains two integers a and b (1 ≤ a, b ≤ n), the servers you need to find the transfer time between. Output: Print q lines, each containing a single integer representing the data transfer time between the servers in the corresponding query. Example: Input: 5 3 1 2 5 1 3 3 2 4 4 2 5 8 3 4 4 5 1 5 Output: 12 12 13 Explanation: - The first query asks about the time between server 3 and server 4. The path is 3 -> 1 -> 2 -> 4 with transfer time 3 + 5 + 4 = 12. - The second query asks about the time between server 4 and server 5. The path is 4 -> 2 -> 5 with transfer time 4 + 8 = 12. - The third query asks about the time between server 1 and server 5. The path is 1 -> 2 -> 5 with transfer time 5 + 8 = 13.","solution":"def find_transfer_time(n, edges, queries): from collections import defaultdict, deque def bfs_levels_and_parents(): distance = [0] * (n + 1) levels = [-1] * (n + 1) parents = [0] * (n + 1) queue = deque([1]) levels[1] = 0 parents[1] = -1 while queue: node = queue.popleft() current_level = levels[node] for neighbor, weight in graph[node]: if levels[neighbor] == -1: levels[neighbor] = current_level + 1 parents[neighbor] = node distance[neighbor] = distance[node] + weight queue.append(neighbor) return distance, levels, parents def find_lca(a, b): while levels[a] > levels[b]: a = parents[a] while levels[b] > levels[a]: b = parents[b] while a != b: a = parents[a] b = parents[b] return a graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) distance, levels, parents = bfs_levels_and_parents() results = [] for a, b in queries: lca = find_lca(a, b) results.append(distance[a] + distance[b] - 2 * distance[lca]) return results"},{"question":"Given an array of integers, determine if there are two distinct indices i and j in the array such that the absolute difference between the elements at these indices is equal to a given number k. Example 1: Input: nums = [1, 7, 5, 9, 2, 12, 3], k = 2 Output: true Explanation: There are multiple pairs that have an absolute difference of 2: (1, 3), (7, 5), (5, 7). Example 2: Input: nums = [1, 5, 3, 4, 2], k = 4 Output: true Explanation: There is one pair that has an absolute difference of 4: (1, 5). Example 3: Input: nums = [1, 2, 3, 4, 5], k = 5 Output: false Explanation: There are no pairs with an absolute difference of 5. Example 4: Input: nums = [1, 11, 19, 21, 7], k = 10 Output: true Explanation: There is one pair that has an absolute difference of 10: (1, 11). Example 5: Input: nums = [], k = 1 Output: false Explanation: There are no elements in the array.","solution":"def has_pair_with_diff(nums, k): Determines if there are two distinct indices i and j in the array nums such that the absolute difference between the elements at these indices is equal to a given number k. :param nums: List[int], array of integers :param k: int, the desired absolute difference :return: bool, True if such a pair exists, False otherwise if len(nums) < 2: return False num_set = set(nums) for num in nums: if (num + k) in num_set or (num - k) in num_set: return True return False"},{"question":"You are given an undirected graph with N vertices and M edges. Each vertex has a certain number of coins associated with it. Your task is to determine the maximum total number of coins that can be collected along any path between two vertices in the graph. A path is defined as a sequence of edges connecting a sequence of vertices where each pair of consecutive vertices in the sequence are connected by an edge. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two integers N and M, the number of vertices and edges in the graph respectively. - The second line contains N space-separated integers C_{1}, C_{2}, ..., C_{N} — the number of coins on each vertex. - The next M lines contain two space-separated integers u_{j} and v_{j}, denoting an edge between u_{j} and v_{j}. ------ Output Format ------ For each test case, output a single integer which is the maximum total number of coins that can be collected along any path between two vertices in the graph. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 10^{3} 1 ≤ M ≤ N(N-1)/2 1 ≤ u_{j}, v_{j} ≤ N 1 ≤ C_{i} ≤ 10^{4} - The input graph is connected and undirected. - The sum of N over all test cases won\'t exceed 5cdot 10^{4}. ----- Sample Input 1 ------ 2 4 5 5 10 15 20 1 2 2 3 3 4 1 3 2 4 3 3 3 2 5 1 2 1 3 2 3 ----- Sample Output 1 ------ 50 10 ----- Explanation 1 ------ Test case 1: - Maximum path is from vertex 1 to vertex 4, passing through 1-2-3-4, collecting coins 5 + 10 + 15 + 20 = 50. Test case 2: - Maximum path is from vertex 2 to vertex 3, collecting coins 2 + 5 + 3 = 10. Each test case has multiple paths, but only the path with the maximum collected coins is considered.","solution":"def max_coins_on_path(tc_data): from collections import deque def bfs_max_coins(graph, coins, start): max_coins = 0 visited = [False] * len(graph) queue = deque([(start, coins[start])]) while queue: vertex, current_coins = queue.popleft() visited[vertex] = True max_coins = max(max_coins, current_coins) for neighbor in graph[vertex]: if not visited[neighbor]: queue.append((neighbor, current_coins + coins[neighbor])) return max_coins results = [] for data in tc_data: N, M, vertex_coins, edges = data graph = [[] for _ in range(N)] for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) max_result = 0 for i in range(N): max_result = max(max_result, bfs_max_coins(graph, vertex_coins, i)) results.append(max_result) return results def parse_input(input_data): case_lines = input_data.strip().split(\'n\') T = int(case_lines[0].strip()) parsed_data = [] idx = 1 for _ in range(T): N, M = map(int, case_lines[idx].strip().split()) idx += 1 coins = list(map(int, case_lines[idx].strip().split())) idx += 1 edges = [] for _ in range(M): u, v = map(int, case_lines[idx].strip().split()) edges.append((u, v)) idx += 1 parsed_data.append((N, M, coins, edges)) return parsed_data"},{"question":"You are given a list of integers. Your task is to modify all elements in the list such that all occurrences of the maximum value are replaced with the minimum value, and all occurrences of the minimum value are replaced with the maximum value. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the list. The second line contains n space-separated integers a1, a2, ..., an (-10^3 ≤ ai ≤ 10^3). Output Output the modified list of n integers. Example Input 5 1 3 5 3 1 Output 5 3 1 3 5 Input 6 -1 4 7 7 -1 2 Output 7 4 -1 -1 7 2","solution":"def modify_list(n, a): if n == 0: return [] max_val = max(a) min_val = min(a) return [ (min_val if i == max_val else max_val if i == min_val else i) for i in a ]"},{"question":"# Task: - Let\'s design an algorithm to find the shortest path from the top-left corner to the bottom-right corner of a grid filled with numbers. - You can only move either down or right at any point in time. - The path should have the smallest possible sum of the values of the cells. # Input: - A 2D list of integers `grid` where `grid[i][j]` is the value of the cell `(i, j)`. ```python grid = [[1,3,1], [1,5,1], [4,2,1]] ``` # Output: - An integer representing the minimum path sum. # Example: Input: ```python grid = [[1,3,1], [1,5,1], [4,2,1]] ``` Output: ```python 7 ``` Explanation: - The path 1 → 3 → 1 → 1 → 1 minimizes the sum. # Constraints: * 1 <= `grid.length`, `grid[i].length` <= 100 * 0 <= `grid[i][j]` <= 100","solution":"def minPathSum(grid): Returns the minimum path sum from top-left to bottom-right in the grid if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) for r in range(1, rows): grid[r][0] += grid[r-1][0] for c in range(1, cols): grid[0][c] += grid[0][c-1] for r in range(1, rows): for c in range(1, cols): grid[r][c] += min(grid[r-1][c], grid[r][c-1]) return grid[-1][-1]"},{"question":"Given a string s and an array of integers cost where cost[i] represents the cost of deleting the ith character in s, the goal is to delete several characters from s such that the resulting string does not contain any duplicate characters and the total cost of deletions is minimized. Your task is to complete the function minDeletionCost() which takes the string s and the array cost as input and returns the minimum cost required to achieve the goal. Example 1: Input: s = \\"abaac\\" cost = [1, 2, 3, 4, 5] Output: 3 Explanation: Delete the characters with costs 3 and 4 (the 3rd and 4th characters) to get the string \\"abc\\" without duplicates. The total cost is 3 + 0 = 3. Example 2: Input: s = \\"abc\\" cost = [1, 2, 3] Output: 0 Explanation: No need to delete any characters because there are no duplicate characters. Example 3: Input: s = \\"aab\\" cost = [1, 2, 3] Output: 2 Explanation: Delete one of the \'a\' characters with cost 1 or 2, the minimum cost would be 1 if we choose to delete the first \'a\'. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minDeletionCost() which takes the string s and array cost as input parameters and returns the minimum cost to remove the duplicates. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= s.length <= 10^5 1 <= cost[i] <= 10^4 s contains only lowercase English letters.","solution":"def minDeletionCost(s, cost): Returns the minimum cost required to remove duplicates in the string s. Parameters: s (str): The input string. cost (list): List of costs associated with deleting characters. Returns: int: The minimum cost required to remove duplicate characters. n = len(s) total_cost = 0 for i in range(1, n): if s[i] == s[i - 1]: total_cost += min(cost[i], cost[i - 1]) if cost[i] < cost[i - 1]: cost[i], cost[i - 1] = cost[i - 1], cost[i] return total_cost"},{"question":"You are given an array which contains integers and an integer value K. Reverse the array from 0 to K-1 and then reverse the array from K to N-1. Finally, reverse the whole array of size N. Example 1: Input: N = 5, K = 3 A[] = {1, 2, 3, 4, 5} Output: 4 5 1 2 3 Example 2: Input: N = 7, K = 4 A[] = {1, 2, 3, 4, 5, 6, 7} Output: 5 6 7 1 2 3 4 Your Task: You don\'t need to read input or print anything. Your task is to complete the function specialReverse() which takes the array A[], its size N, and the integer K as inputs and modifies the array in place. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1<=N<=10^{5} 1<=K<=N 0<=A[i]<=10^{5}","solution":"def reverse(arr, start, end): while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1 def specialReverse(N, K, A): Reverse the array from 0 to K-1 and then reverse the array from K to N-1. Finally, reverse the whole array of size N. # Reverse the array from 0 to K-1 reverse(A, 0, K-1) # Reverse the array from K to N-1 reverse(A, K, N-1) # Reverse the whole array of size N reverse(A, 0, N-1) return A # Return the array to verify the result in unit tests"},{"question":"You are given a list of integers representing the heights of students in a row. A student is visible from the front if no student before them in the row has a greater or equal height. Write a function that determines the number of students that are visible from the front. -----Input----- The first line contains an integer n (1 leq n leq 10^5) — the number of students in the row. The second line contains n integers h_1, h_2, dots, h_n (1 leq h_i leq 10^9) representing the heights of the students. -----Output----- Output a single integer — the number of students that are visible from the front. -----Example----- Input 6 1 2 3 2 1 4 Output 4 -----Explanation----- In the example, students with heights 1, 2, 3, and 4 are visible from the front. The student with height 2 after the height 3 as well as the student with height 1 after the height 2 are not visible because there is a student with a greater or equal height in front of them.","solution":"def count_visible_students(n, heights): if n == 0: return 0 max_height = heights[0] visible_count = 1 # The first student is always visible for i in range(1, n): if heights[i] > max_height: visible_count += 1 max_height = heights[i] return visible_count"},{"question":"Piet loves to paint, and his canvas is a grid of size m x n. Each cell in the grid can be painted with a unique color represented by an integer. Piet can paint one cell at a time, and he wants to minimize the number of different colors adjacent to each other (vertically or horizontally). Your task is to identify the least number of cells that should be painted such that no two adjacent cells have different colors. **Input:** The first line contains two integers m and n (1 ≤ m, n ≤ 50) — the dimensions of the grid. The next m lines contain n space-separated integers each, representing the initial color of each cell in the grid. **Output:** Print the minimum number of cells that should be painted. **Examples:** *Input:* ``` 3 3 1 2 2 3 3 3 4 4 4 ``` *Output:* ``` 3 ``` *Input:* ``` 2 2 1 1 1 2 ``` *Output:* ``` 1 ``` *Notes:* - In the first sample, to make all adjacent cells the same color, one solution could be to change the cell at (0,1) and (0,2) to color 1, and the cell at (1,0) to color 3. This results in a grid: ``` 1 1 1 3 3 3 4 4 4 ``` So only 3 cells need painting. - In the second sample, changing the cell at (1,1) to 1 results in: ``` 1 1 1 1 ``` Only 1 cell needs painting.","solution":"def min_cells_to_paint(m, n, grid): Given the dimensions and initial state of the grid, returns the minimum number of cells that must be painted such that no two adjacent cells have different colors. def dfs(x, y, color): stack = [(x, y)] visited.add((x, y)) while stack: cx, cy = stack.pop() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == color: visited.add((nx, ny)) stack.append((nx, ny)) visited = set() component_count = 0 for i in range(m): for j in range(n): if (i, j) not in visited: dfs(i, j, grid[i][j]) component_count += 1 return component_count - 1"},{"question":"Evaluate whether a string can be converted to a palindrome by removing at most one character. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single string S containing lowercase English letters only. ------ Output Format ------ For each test case, output YES if the string can be converted to a palindrome by removing at most one character, NO otherwise. The output is case-insensitive. Thus, the strings Yes, YES, yes, and yeS are all considered identical. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ |S| ≤ 10^{5} Sum of lengths of all strings across all test cases le 10^{6}. ----- Sample Input 1 ------ 3 abca racecar abc ----- Sample Output 1 ------ YES YES NO ----- Explanation 1 ------ Test case 1: By removing the character \'b\', the string becomes \\"aca\\" which is a palindrome. Test case 2: The string \\"racecar\\" is already a palindrome. Test case 3: Removing any one character from \\"abc\\" will not make it a palindrome.","solution":"def can_be_palindrome_by_removing_one_char(s: str) -> str: def is_palindrome_range(start, end): return all(s[i] == s[end - i + start] for i in range(start, (end + start) // 2 + 1)) l, r = 0, len(s) - 1 while l < r: if s[l] != s[r]: if is_palindrome_range(l + 1, r) or is_palindrome_range(l, r - 1): return \\"YES\\" else: return \\"NO\\" l += 1 r -= 1 return \\"YES\\" def evaluate_palindromes(test_cases): results = [] for s in test_cases: results.append(can_be_palindrome_by_removing_one_char(s)) return results"},{"question":"Write a function `find_max_consecutive_ones(nums)` that takes a list of integers `nums` consisting only of `0`s and `1`s, and finds the maximum number of consecutive `1`s in the list. The function should adhere to the following signature: ```python def find_max_consecutive_ones(nums: List[int]) -> int: # Your code here ``` # Example: ```python Input: nums = [1, 1, 0, 1, 1, 1] Output: 3 Input: nums = [1, 0, 1, 1, 0, 1] Output: 2 Input: nums = [0, 0, 0, 1, 0, 0] Output: 1 ``` # Constraints: - The length of the input list `nums` will be between 1 and 10,000. - The elements of `nums` will be either `0` or `1`. Your solution should optimize for time complexity, aiming for a linear `O(n)` solution.","solution":"from typing import List def find_max_consecutive_ones(nums: List[int]) -> int: Returns the maximum number of consecutive 1s in the given list of binary numbers. max_count = 0 current_count = 0 for num in nums: if num == 1: current_count += 1 max_count = max(max_count, current_count) else: current_count = 0 return max_count"},{"question":"Alex is a delivery robot who has been assigned a task to deliver packages in a warehouse organized as an m x n grid. The robot starts at the top-left corner (grid[0][0]) and needs to reach the bottom-right corner (grid[m-1][n-1]) to deliver a package. The grid has cells that are either empty (0) or have obstacles (1). The robot can move either down or right at any point in time. Your task is to determine if there exists a path for the robot from the top-left corner to the bottom-right corner. If there is a path, return the length of the shortest path, otherwise return -1. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid respectively. The next m lines contain n integers each (0 or 1) representing the grid cells. A 0 indicates an empty cell through which the robot can move, and a 1 indicates an obstacle. Output Output a single integer — the length of the shortest path from the top-left to the bottom-right corner if there is a path, otherwise output -1. Examples Input 3 3 0 0 1 0 0 1 1 0 0 Output 5 Input 3 3 0 0 1 1 1 1 1 0 0 Output -1","solution":"from collections import deque def shortest_path(grid): Returns the length of the shortest path from top-left corner to bottom-right corner in a grid avoiding obstacles, or -1 if no such path exists. m = len(grid) n = len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 directions = [(0, 1), (1, 0)] # right, down queue = deque([(0, 0, 1)]) visited = set((0, 0)) while queue: x, y, step = queue.popleft() if x == m-1 and y == n-1: return step for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, step + 1)) return -1 def warehouse_delivery(m, n, grid): return shortest_path(grid)"},{"question":"A developer is working on a system where data is recorded as a series of events. Each event has a timestamp and an event type. The developer needs to identify all periods where a specific event type occurs continuously for a specified duration. Create a function that, given a list of event timestamps (sorted in ascending order) and a specified event type with a required minimum continuous duration, finds all the periods where this event occurs continuously for at least the specified duration. Each period should be returned as a tuple of the start and end timestamps of the continuous period. Constraints: - Each timestamp is represented as an integer. - The list of timestamps is sorted in ascending order and contains distinct integers. - The duration is given in the same units as the timestamps, and it is a positive integer. # Input The function should take the following parameters: - An integer `event_type` representing the specific event type of interest. - A list `events` of tuples, where each tuple contains: - An integer `timestamp` (sorted in ascending order). - An integer `event_type` representing the type of the event. - An integer `duration` representing the required minimum continuous duration. # Output The function should output a list of tuples, where each tuple contains two integers representing the start and end timestamps of a continuous period where the specified event type occurs for at least the specified duration. # Examples Example 1: **Input:** ```python event_type = 1 events = [(1, 1), (2, 1), (3, 1), (6, 1), (7, 1), (8, 2), (10, 1), (11, 1)] duration = 2 ``` **Output:** ```python [(1, 3), (6, 7), (10, 11)] ``` Example 2: **Input:** ```python event_type = 2 events = [(1, 2), (2, 2), (4, 2), (6, 1), (7, 2), (10, 2), (11, 2)] duration = 1 ``` **Output:** ```python [(1, 2), (4, 4), (7, 7), (10, 11)] ``` Example 3: **Input:** ```python event_type = 3 events = [(1, 1), (2, 1), (3, 1), (4, 1), (5, 3), (6, 3), (7, 3), (8, 1)] duration = 2 ``` **Output:** ```python [(5, 7)] ``` Write a function `find_continuous_periods` in Python that implements the described functionality.","solution":"def find_continuous_periods(event_type, events, duration): Finds all continuous periods where the specified event type occurs for at least the specified duration. Parameters: - event_type (int): The specific event type of interest. - events (list of tuples): A list of tuples where each tuple contains: - timestamp (int) - event_type (int) - duration (int): The required minimum continuous duration. Returns: - list of tuples: Each tuple contains two integers (start, end) representing the start and end timestamps of a continuous period where the specified event type occurs for at least the specified duration. results = [] start = None # Start of a potential continuous period count = 0 for i, (timestamp, e_type) in enumerate(events): if e_type == event_type: if start is None: start = timestamp count += 1 # Check if we reached the required duration at this time if i == len(events) - 1 or events[i + 1][0] - timestamp > 1: if count >= duration: results.append((start, timestamp)) start = None count = 0 else: if start is not None and count >= duration: results.append((start, timestamp - 1)) start = None count = 0 return results"},{"question":"You are given a grid of size M x N filled with digits. The grid represents a digital screen displaying a series of numbers. Every digit in the grid is displayed as an alphanumeric character (0-9). Your task is to find the largest contiguous rectangular sub-grid (sub-screen) that contains only a single type of digit. Write a program to determine the size of the largest rectangular sub-grid that contains only one type of digit. **Input** The input consists of several lines: - The first line contains two integers M and N (1 ≤ M, N ≤ 1000), the dimensions of the grid. - The next M lines each contain a string of length N consisting of digits (\'0\'-\'9\'). **Output** Output a single integer representing the area (number of cells) of the largest rectangular sub-grid that contains only a single type of digit. **Input Example 1** ``` 4 5 11111 12221 12221 11111 ``` **Output Example 1** ``` 6 ``` **Input Example 2** ``` 3 3 123 456 789 ``` **Output Example 2** ``` 1 ``` **Explanation** In Input Example 1, the largest rectangular sub-grid containing only a single type of digit is the 3x2 sub-grid of digit \'2\' in the middle of the grid. The area of this sub-grid is 3 * 2 = 6. In Input Example 2, each digit only forms a sub-grid of area 1 since no two adjacent cells contain the same digit. Thus, the largest rectangular sub-grid containing only a single type of digit has an area of 1.","solution":"def largest_single_digit_subgrid_area(M, N, grid): def max_histogram_area(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area max_area = 0 height_maps = {str(k): [0] * N for k in range(10)} for row in grid: for d in height_maps: for j in range(N): if row[j] == d: height_maps[d][j] += 1 else: height_maps[d][j] = 0 for d in height_maps: max_area = max(max_area, max_histogram_area(height_maps[d])) return max_area"},{"question":"You are given two strings, str1 and str2. Your task is to check if str2 is a subsequence of str1. A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. Write a function to return True if str2 is a subsequence of str1, otherwise return False. Example 1: Input: str1 = \\"abcde\\", str2 = \\"ace\\" Output: true Explanation: \\"ace\\" is a subsequence of \\"abcde\\". Example 2: Input: str1 = \\"abcde\\", str2 = \\"aec\\" Output: false Explanation: \\"aec\\" is not a subsequence of \\"abcde\\" as \'e\' comes after \'c\' in str2 which does not match the order in str1. Example 3: Input: str1 = \\"abcdef\\", str2 = \\"abdf\\" Output: true Example 4: Input: str1 = \\"abcdef\\", str2 = \\"abcdeg\\" Output: false Explanation: \'g\' does not exist in \'abcdef\'. Constraints: 1 <= str1.length <= 1000 1 <= str2.length <= 1000 Both strings consist of lowercase English letters.","solution":"def is_subsequence(str1, str2): Returns True if str2 is a subsequence of str1, otherwise False. iter_str1 = iter(str1) return all(char in iter_str1 for char in str2)"},{"question":"----- Input The input is a single string of lowercase letters (1 ≤ length of the string ≤ 100). ----- Output Output the lexicographically smallest string that can be obtained by removing exactly one character from the input string. ----- Examples Input abc Output ab Input leetcode Output eetcode Input string Output sring","solution":"def smallest_string_by_removing_one_char(s): Given a string, returns the lexicographically smallest string that can be obtained by removing exactly one character from the input string. # Initialize the smallest string as the input string minus the first character smallest = s[1:] # Iterate through the string, removing one character at each position for i in range(1, len(s)): temp = s[:i] + s[i+1:] smallest = min(smallest, temp) return smallest"},{"question":"A research lab is developing a new software to automate warehouse management. They need a function that calculates the minimal distance a robot should travel to pick up all items and return to its starting point. # Problem Description: Given a warehouse represented as a 2D grid, implement a function to determine the shortest path for the robot to collect all the items and return to the starting point at `(0,0)`. The robot can move up, down, left, or right and must visit cells with items before returning to the start. # Input Format: - The first line contains two integers `m` and `n`, representing the number of rows and columns in the grid, respectively `(1 ≤ m, n ≤ 20)`. - The next `m` lines each contain `n` characters representing the warehouse layout where: - `.` represents an empty cell. - `S` represents the starting cell (always located at `(0, 0)`). - `I` represents a cell with an item. # Output Format: - Print a single integer, the minimal distance for the robot to travel to pick up all items and return to the starting point. If it is not possible to collect all items, print `-1`. # Examples: **Example 1:** Input: ``` 3 3 S.. .I. ..I ``` Output: ``` 8 ``` **Example 2:** Input: ``` 4 4 S..I .II. ..I. .... ``` Output: ``` 10 ``` # Constraints: - The robot can use the shortest path algorithms like BFS (Breadth-First Search) to find minimal path distances. - If there is no path for the robot to reach all items or return to the start after collecting all items, the output should be `-1`. The task requires you to compute the shortest path covering multiple destinations and returning to start, which can be solved using combinatorial pathfinding techniques augmented with BFS/DFS.","solution":"from itertools import permutations from collections import deque def shortest_path(warehouse): def bfs(start, grid): Perform Breadth-First Search (BFS) to find the shortest paths from `start` distances = {} q = deque([start]) distances[start] = 0 m, n = len(grid), len(grid[0]) while q: x, y = q.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in distances and grid[nx][ny] != \'#\': distances[(nx, ny)] = distances[(x, y)] + 1 q.append((nx, ny)) return distances # Read the grid m = len(warehouse) n = len(warehouse[0]) grid = warehouse # Find positions of starting point and items start = (0, 0) items = [] for i in range(m): for j in range(n): if grid[i][j] == \'I\': items.append((i, j)) # Return immediately if there are no items if not items: return 0 # BFS from start all_points = [start] + items point_to_index = {point: i for i, point in enumerate(all_points)} dist_matrix = [[0] * len(all_points) for _ in range(len(all_points))] for point in all_points: distances = bfs(point, grid) for dest_point in all_points: if dest_point in distances: dist_matrix[point_to_index[point]][point_to_index[dest_point]] = distances[dest_point] else: dist_matrix[point_to_index[point]][point_to_index[dest_point]] = float(\'inf\') # Calculate shortest path visiting all items and returning to start num_points = len(all_points) min_distance = float(\'inf\') for perm in permutations(range(1, num_points)): total_distance = dist_matrix[0][perm[0]] for i in range(len(perm) - 1): total_distance += dist_matrix[perm[i]][perm[i + 1]] total_distance += dist_matrix[perm[-1]][0] min_distance = min(min_distance, total_distance) return min_distance if min_distance != float(\'inf\') else -1"},{"question":"# Task: You need to write a function `clockwise_spiral` that takes an integer `n` as input and returns a square matrix of size `n x n` filled with numbers from 1 to n^2 in a clockwise spiral pattern. # Rules/Notes: - If `n <= 0`, the function should return an empty list. - The matrix should be returned as a list of lists. # Examples: + `clockwise_spiral(3)` should return: ``` [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] ``` + `clockwise_spiral(4)` should return: ``` [ [1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7] ] ``` + `clockwise_spiral(0)` should return: ``` [] ``` + `clockwise_spiral(1)` should return: ``` [ [1] ] ```","solution":"def clockwise_spiral(n): Returns an n x n matrix filled with numbers from 1 to n^2 in a clockwise spiral pattern. if n <= 0: return [] matrix = [[0] * n for _ in range(n)] num = 1 left, right, top, bottom = 0, n - 1, 0, n - 1 while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"Alice loves to create new words by manipulating existing words. She has a favorite string `s` and she wants to generate a set of new words from it by following a series of operations. Each operation is described by a group of three components (op, x, y): 1. `op` - a single character operation which can be either \'R\' (reverse), \'C\' (concatenate) or \'S\' (subset). 2. `x`, `y` - depending on the operation, these are either indices or additional strings. Here’s how each operation is defined: - Reverse operation (R x y): Reverse the substring of `s` from index `x` to `y`, inclusive. - Concatenate operation (C x y): Concatenate the string `x` to the end of the string `s` and assign the result back to `s`. - Subset operation (S x y): Check if the string `x` is a subset of the string `y`. A string `x` is a subset of string `y` if all characters of `x` can be found in `y` with the same or more frequency. Alice asks you to perform the series of operations and give the final result of the string `s`. If a subset operation (S x y) is performed, just return \\"YES\\" if x is a subset of y, otherwise return \\"NO\\". Here’s the input format: -----Input----- The first line contains the initial string `s`. The second line contains an integer `n` which represents the number of operations. Next `n` lines describe each operation in one of the following formats: - R x y - C x - S x y In all operations, indices `x` and `y` are zero-based. For operation R, you can assume that 0 ≤ x, y < |s| and x ≤ y. -----Output----- Print the final result of the string `s` after performing all operations. If a subset operation (S x y) is performed, print \\"YES\\" or \\"NO\\" accordingly on a new line. -----Examples----- Input abcde 3 R 1 3 C xyz S xyz deab Output adcbyz NO Input hello 2 R 0 4 C world Output ollehworld -----Note----- In the first example, the substring from index `1` to `3` (\\"bcd\\") is reversed to get \\"adcbe\\". After concatenating \\"xyz\\", string `s` becomes \\"adcbyz\\". The subset operation checks if \\"xyz\\" is a subset of \\"deab\\" which is not true, so it prints \\"NO\\". In the second example, the entire string \\"hello\\" is reversed to get \\"olleh\\" and then \\"world\\" is concatenated to make it \\"ollehworld\\".","solution":"def manipulate_string(s, operations): result = s for op in operations: if op[0] == \'R\': start, end = int(op[1]), int(op[2]) result = result[:start] + result[start:end + 1][::-1] + result[end + 1:] elif op[0] == \'C\': concat_str = op[1] result += concat_str elif op[0] == \'S\': x, y = op[1], op[2] if all(x.count(char) <= y.count(char) for char in set(x)): return \\"YES\\" else: return \\"NO\\" return result # Function to process the input def process_operations(s, n, operations): return manipulate_string(s, operations)"},{"question":"Create a function to play a simplified version of Word Scramble. Given a list of words and a scrambled string, determine if you can find all the words in the scrambled string sequentially without rearranging any remaining characters. Return the found words in their order of appearance. *Parameters*: `scrambled` (a string) and `words` (an array of strings). *Example input*: ``` scrambled = \\"hellothisisateststring\\" words = [\\"hello\\", \\"test\\", \\"string\\"] ``` *Output*: `[\\"hello\\", \\"test\\", \\"string\\"]` *Example input*: ``` scrambled = \\"abcdefthequickbrownfoxjumpsoverlazydog\\" words = [\\"the\\", \\"fox\\", \\"dog\\"] ``` *Output*: `[\\"the\\", \\"fox\\", \\"dog\\"]` # Constraints: - The `scrambled` string will only contain lowercase English letters. - The `words` array will contain unique words composed of lowercase English letters. - The length of `scrambled` will not exceed 10^4. - The total number of words in `words` will not exceed 1000. # Notes: * If a word from the `words` array cannot be found in the `scrambled` string sequentially, it is ignored. * Words must appear in the given order in the `scrambled` string. * If no words from the list can be found, return an empty array `[]`. # Example: ``` scrambled = \\"codingisfun\\" words = [\\"code\\", \\"fun\\", \\"in\\"] // return [\\"fun\\", \\"in\\"] ```","solution":"def word_scramble(scrambled, words): Finds all the words in the scrambled string sequentially without rearranging any remaining characters, in the order of their appearance in the words list. :param scrambled: str, the scrambled string :param words: list, list of words to find in the scrambled string :return: list, found words in their order of appearance found_words = [] index = 0 for word in words: pos = scrambled.find(word, index) if pos != -1: found_words.append(word) index = pos + len(word) return found_words"},{"question":"Given a string S consisting of lowercase English letters, count the number of substrings that are palindromes. A substring is defined as a contiguous sequence of characters within a string. Constraints 1 ≤ |S| ≤ 10^5 SAMPLE INPUT ababa SAMPLE OUTPUT 9 Explanation: The substrings that are palindromes are: \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"aba\\", \\"bab\\", \\"aba\\", and \\"ababa\\".","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the string s. n = len(s) count = 0 def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for i in range(n): # Odd length palindromes centered at i expand_around_center(i, i) # Even length palindromes centered between i and i+1 expand_around_center(i, i + 1) return count"},{"question":"# Task Mary loves collecting stamps and has a collection of unique stamps each with a different value. She wants to reorganize her collection by exchanging stamps with her friend. However, she wants to maximize the total value of her collection after the exchanges. Mary can perform a set of exchanges with her friend, where each exchange consists of giving one of her stamps in exchange for one of her friend\'s stamps. The condition is that the stamp she takes from her friend must have a value greater than the one she gives away. Each exchange is performed individually, and once an exchange occurs, it affects the values of the collections. Your task is to determine the maximum possible value of Mary\'s collection after performing a series of exchanges. # Input - `mary_stamps`: An integer array. Each element represents the value of stamps in Mary\'s collection. - `1 <= mary_stamps.length <= 30` - `1 <= mary_stamps[i] <= 100` - `friend_stamps`: An integer array. Each element represents the value of stamps in her friend\'s collection. - `1 <= friend_stamps.length <= 30` - `1 <= friend_stamps[i] <= 100` - All inputs are valid. # Output An integer. the maximum possible value of Mary\'s collection after performing the trades. # Example For `mary_stamps=[4, 5, 8]` and `friend_stamps=[3, 7, 9]`, the output should be `24`. ``` One possible set of exchanges: - Mary exchanges stamp with value 4 for friend\'s stamp with value 7, resulting in [7, 5, 8] Now, the total value of Mary\'s collection is 7 + 5 + 8 = 20. - Mary exchanges stamp with value 5 for friend\'s stamp with value 9, resulting in [7, 9, 8] Now, the total value of Mary\'s collection is 7 + 9 + 8 = 24. The maximum total value of Mary\'s collection after exchanges is 24. ```","solution":"def maximize_mary_stamps_value(mary_stamps, friend_stamps): mary_stamps.sort() friend_stamps.sort(reverse=True) i, j = 0, 0 swaps = 0 while i < len(mary_stamps) and j < len(friend_stamps): if friend_stamps[j] > mary_stamps[i]: mary_stamps[i] = friend_stamps[j] i += 1 j += 1 swaps += 1 else: j += 1 return sum(mary_stamps)"},{"question":"Write a function that takes a list of integers and returns a string containing those integers sorted in non-decreasing order, with each element repeated a number of times corresponding to its final sorted position + 1 (1-based index). Each group of repeated integers should be represented as a space-separated string. Example ```python sort_and_repeat([4, 2, 1, 3]) -> \\"1 2 2 3 3 3 4 4 4 4\\" sort_and_repeat([5, 1, 4, 2, 3]) -> \\"1 2 2 3 3 3 4 4 4 4 5 5 5 5 5\\" ``` Technical Details - The input list contains only integers. - Each integer in the list should be repeated based on its final sorted position. - The output string should be a space-separated sequence of numbers. - Return value should be a string.","solution":"def sort_and_repeat(lst): Sorts the given list of integers in non-decreasing order and returns a string with each element repeated a number equal to its 1-based index in the sorted list. sorted_list = sorted(lst) result = [] for index, value in enumerate(sorted_list): result.extend([value] * (index + 1)) return \\" \\".join(map(str, result))"},{"question":"You are given a string S of length N that contains only lowercase letters. A group of consecutive characters is called a \\"homogeneous substring\\" if all characters in it are the same. Your task is to determine the length of the longest homogeneous substring in the given string. Input: - The first line contains T, the number of test cases. - Each of the next T lines contains one string S. Output: - For each test case, print the length of the longest homogeneous substring. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 SAMPLE INPUT 3 aabbbcc aaaa abcde SAMPLE OUTPUT 3 4 1 Explanation In the first test case, the longest homogeneous substring is \\"bbb\\" which has a length of 3. In the second test case, the entire string \\"aaaa\\" is homogeneous and has a length of 4. In the third test case, all substrings with homogeneous characters have a length of 1, so the output is 1.","solution":"def longest_homogeneous_substring_length(S): Returns the length of the longest homogeneous substring in S. max_length = 1 current_length = 1 for i in range(1, len(S)): if S[i] == S[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length def process_test_cases(T, cases): Processes multiple test cases for longest_homogeneous_substring_length. Parameters: - T: integer, number of test cases - cases: list of strings, each string is a test case Returns: - list of integers, each integer is the result for the respective test case results = [] for S in cases: results.append(longest_homogeneous_substring_length(S)) return results"},{"question":"You are managing the distribution of books in a library where books have different levels of demand from borrowers. Each book has a unique identifier and a count of how many copies are available. Borrowers request to borrow specific books, and a borrower can request multiple books at one time, but cannot request more than one copy of the same book. To maximize borrower satisfaction and efficiently manage the book inventory, you need to determine how many requests can be fully satisfied given the available copies of the books. -----Input----- The first line of input contains an integer m (1 leq m leq 10^4), the number of books in the library. The next m lines each contain a book identifier (a string of up to 20 characters) followed by an integer c (1 leq c leq 100), indicating the number of available copies of that book. The next line contains an integer n (1 leq n leq 10^4), the number of borrowers. The next n lines each contain a set of book identifiers separated by spaces, representing the requests of each borrower. Each request can have between 1 and 10 different book identifiers. -----Output----- A single number; the maximum number of borrower requests that can be fully satisfied with the available book copies. -----Examples----- Sample Input: 3 book1 2 book2 1 book3 5 4 book1 book2 book1 book3 book2 book3 book1 book3 Sample Output: 3","solution":"def max_satisfied_requests(m, books, n, requests): from collections import defaultdict book_count = defaultdict(int) for book, count in books: book_count[book] += count satisfied_requests = 0 for request in requests: temp_count = book_count.copy() can_fulfill = True for book in request: if temp_count[book] > 0: temp_count[book] -= 1 else: can_fulfill = False break if can_fulfill: satisfied_requests += 1 book_count = temp_count return satisfied_requests # Example Usage # m = 3, books = [(\'book1\', 2), (\'book2\', 1), (\'book3\', 5)], n = 4, # requests = [[\'book1\', \'book2\'], [\'book1\', \'book3\', \'book2\'], [\'book3\'], [\'book1\', \'book3\']] # max_satisfied_requests(m, books, n, requests) should return 3"},{"question":"A company wants to optimize the usage of their conference rooms. They have multiple meetings throughout the day, each with a start and end time. They want to schedule the maximum number of non-overlapping meetings in a single room. Given the start and end times of all meetings, your task is to determine the maximum number of meetings that can be scheduled in one room. You are required to write a program that finds the optimal schedule for the meetings. **Input:** The input begins with a single integer T (1 ≤ T ≤ 20) which represents the number of test cases. Each test case starts with an integer N (1 ≤ N ≤ 10^4), the number of meetings. This is followed by N lines, each containing two integers, si (the start time) and ei (the end time) for the ith meeting (1 ≤ si < ei ≤ 10^5). **Output:** For each test case, print a single line containing the maximum number of non-overlapping meetings that can be scheduled in the room. **Example:** Input: ``` 2 3 1 4 2 3 3 5 4 1 2 3 4 0 6 5 7 ``` Output: ``` 2 3 ```","solution":"def max_non_overlapping_meetings(T, test_cases): results = [] for i in range(T): N, meetings = test_cases[i] # Sort the meetings by their end times meetings.sort(key=lambda x: x[1]) max_meetings = 0 last_end_time = 0 for start, end in meetings: if start >= last_end_time: max_meetings += 1 last_end_time = end results.append(max_meetings) return results"},{"question":"Samantha is building a new online book club app where members can log the books they have read. To keep members motivated, Samantha wants to track and display the most active readers at the end of each month. Every time a member finishes a book, their name and the book title are recorded in the app\'s log. Samantha is looking for a way to compile a \\"Top Readers Board\\" showing the number of books read by each member in descending order of the number of books. In case of a tie, members should be listed alphabetically. Your task is to help Samantha generate this \\"Top Readers Board\\" using your coding prowess. Input Format: The first line contains the number of entries in the log. The next lines each contain a member\'s name and book title separated by a space. Output Format: Output the top readers as \\"name number_of_books_read\\", sorted in decreasing order of number_of_books_read. In case of a tie, order alphabetically by name. Constraints: 1 ≤ Number of entries ≤ 200 SAMPLE INPUT 7 Alice BookA Bob BookB Alice BookC Bob BookD Charlie BookE Alice BookF Charlie BookG SAMPLE OUTPUT Alice 3 Bob 2 Charlie 2","solution":"def top_readers_board(log_entries): from collections import defaultdict reader_books_count = defaultdict(int) for entry in log_entries: name, book = entry.split(maxsplit=1) reader_books_count[name] += 1 sorted_readers = sorted(reader_books_count.items(), key=lambda x: (-x[1], x[0])) result = [f\\"{name} {count}\\" for name, count in sorted_readers] return result"},{"question":"Alice loves writing secret codes using a special encryption technique. She wants to share her technique with you and see if you can write a program to decode messages encoded with her method. The technique is as follows: 1. Take a string of lowercase alphabets. 2. Replace each character in the string with the character that appears k places after it in the alphabet. 3. If the shift causes the character to go past \'z\', wrap around from the beginning of the alphabet. For example, with k = 3, the string \\"xyz\\" would become \\"abc\\". Alice wants to write a program to decode such messages. Your task is to write a program that can decode a given encoded message. # INPUT - The first line contains an integer T, the number of test cases. - Each of the next T lines contains an integer k (1 ≤ k ≤ 25) and a string s of lowercase alphabets (1 ≤ |s| ≤ 100). # OUTPUT - For each test case, print the decoded string. # CONSTRAINTS 1 ≤ T ≤ 1000 # SAMPLE INPUT 3 3 def 2 hijk 5 mnop # SAMPLE OUTPUT abc fghi hijk # Explanation 1. For the first test case, shifting \'d\' back by 3 gives \'a\', \'e\' back by 3 gives \'b\', and \'f\' back by 3 gives \'c\', resulting in \\"abc\\". 2. For the second test case, shifting \'h\' back by 2 gives \'f\', \'i\' back by 2 gives \'g\', \'j\' back by 2 gives \'h\', and \'k\' back by 2 gives \'i\', resulting in \\"fghi\\". 3. For the third test case, shifting \'m\' back by 5 gives \'h\', \'n\' back by 5 gives \'i\', \'o\' back by 5 gives \'j\', and \'p\' back by 5 gives \'k\', resulting in \\"hijk\\". Write the program to decode Alice\'s encoded messages.","solution":"def decode_message(k, s): Decodes the string s by shifting each character k places back in the alphabet. decoded = [] for char in s: new_char = chr(((ord(char) - ord(\'a\') - k) % 26) + ord(\'a\')) decoded.append(new_char) return \'\'.join(decoded) def decode_messages(test_cases): Takes a list of test cases and returns a list of decoded strings. Each test case is a tuple (k, s) where k is the shift and s is the encoded string. results = [] for k, s in test_cases: results.append(decode_message(k, s)) return results"},{"question":"You are given a list of tickets in a railway reservation system. Each ticket consists of a source station and a destination station. It is guaranteed that there is exactly one way to connect all the tickets to form a continuous journey starting from one source station and ending at one destination station. Your task is to reconstruct the journey in order. Each ticket is represented as a tuple of two strings (source, destination). Input The first line contains an integer n (2 ≤ n ≤ 1000) — the number of tickets. Each of the following n lines contains a ticket in the form of two space-separated strings representing the source and destination stations. Output Print the journey as a single line of space-separated station names, showing the order of travel from the starting station to the final destination. Examples Input 4 Mumbai Pune Pune Bangalore Bangalore Chennai Chennai Hyderabad Output Mumbai Pune Bangalore Chennai Hyderabad Input 3 Chicago Denver NewYork Chicago Denver Miami Output NewYork Chicago Denver Miami","solution":"def find_journey(tickets): Given a list of tickets in a railway reservation system, reconstruct the journey. Each ticket is represented as a tuple of two strings (source, destination). from collections import defaultdict # Create a mapping from source to destination journey_map = defaultdict(str) destination_set = set() source_set = set() for source, destination in tickets: journey_map[source] = destination source_set.add(source) destination_set.add(destination) # Find the starting station (A starting station will not be in destination_set) start_station = (source_set - destination_set).pop() # Reconstruct the journey journey = [start_station] while start_station in journey_map: start_station = journey_map[start_station] journey.append(start_station) return \' \'.join(journey)"},{"question":"I will give you a list of integers. Your task is to find the longest consecutive sequence of integers in the list and return the length of this sequence. Example: Input: [100, 4, 200, 1, 3, 2] Output: The length of the longest consecutive sequence is 4 (the sequence is [1, 2, 3, 4]).","solution":"def longest_consecutive_sequence(nums): Finds the length of the longest consecutive elements sequence in the list. Parameters: nums (List[int]): A list of integers. Returns: int: The length of the longest consecutive sequence. nums_set = set(nums) longest_streak = 0 for num in nums: # Check if `num` is the start of a sequence if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"A mysterious treasure chest is locked with a numerical code. The code is a 4-digit integer but, unfortunately, the display is malfunctioning and showing only partial information. Each position of the code can either be an asterisk (*) representing an unknown digit or a specific digit the user can see. Your goal is to write a program that helps the user identify all possible 4-digit codes that match the given pattern. -----Input----- The input consists of a single string of length 4, containing digits (\'0\'-\'9\') and asterisks (\'*\'). -----Output----- Output all possible 4-digit codes that match the given pattern. Each code should be printed on a new line, sorted in ascending order. -----Examples----- Input \\"12*4\\" Output 1204 1214 1224 1234 1244 1254 1264 1274 1284 1294 Input \\"****\\" Output 0000 0001 0002 ... 9997 9998 9999 Input \\"0*34\\" Output 0034 0134 0234 0334 0434 0534 0634 0734 0834 0934","solution":"def generate_codes(pattern): Generates all possible 4-digit codes that match the given pattern. :param pattern: A string of length 4, containing digits \'0\'-\'9\' and asterisks \'*\'. :return: A list of all possible 4-digit codes that match the pattern. from itertools import product pattern_list = [] for char in pattern: if char == \'*\': pattern_list.append(\'0123456789\') else: pattern_list.append(char) all_combinations = product(*pattern_list) result = [\'\'.join(comb) for comb in all_combinations] result.sort() return result"},{"question":"You are managing a warehouse inventory system where each item has a unique identifier and a quantity value. Occasionally, a shipment arrives, and some items need to be added to the warehouse inventory. Your task is to help automate this process by writing a function that updates the inventory. The inventory is represented as a list of tuples. Each tuple contains a string (the unique item identifier) and an integer (the quantity). The shipment is represented in the same way. If an item in the shipment already exists in the inventory, its quantity should be increased accordingly. If the item does not exist, it should be added to the inventory. Write a function `update_inventory(inventory, shipment)` that takes two lists of tuples and returns an updated inventory list. **Input:** - Two lists of tuples: - `inventory`: a list of tuples, where each tuple contains a string (identifier) and an integer (quantity). - `shipment`: a list of tuples, where each tuple contains a string (identifier) and an integer (quantity). **Output:** - A list of tuples representing the updated inventory. **Constraints:** - Each identifier will be a non-empty string containing only alphanumeric characters. - Quantity will be an integer in the range [0, 1000]. - Both lists will contain at most 10,000 elements. - Identifiers in the inventory list are unique. - Identifiers in the shipment list are unique. **Example:** Input 1: ``` inventory = [(\\"apple\\", 10), (\\"banana\\", 5), (\\"orange\\", 7)] shipment = [(\\"banana\\", 3), (\\"orange\\", 2), (\\"grapefruit\\", 4)] ``` Output 1: ``` [(\\"apple\\", 10), (\\"banana\\", 8), (\\"orange\\", 9), (\\"grapefruit\\", 4)] ``` Input 2: ``` inventory = [(\\"item1\\", 100), (\\"item2\\", 200)] shipment = [(\\"item3\\", 300), (\\"item4\\", 400)] ``` Output 2: ``` [(\\"item1\\", 100), (\\"item2\\", 200), (\\"item3\\", 300), (\\"item4\\", 400)] ```","solution":"def update_inventory(inventory, shipment): Updates the inventory with items from the shipment. Args: inventory (list of tuples): A list where each tuple contains an identifier and a quantity. shipment (list of tuples): A list where each tuple contains an identifier and a quantity. Returns: list of tuples: The updated inventory list. # Convert inventory list to a dictionary for easier quantity updates inventory_dict = dict(inventory) # Update the inventory with the shipment for item_id, quantity in shipment: if item_id in inventory_dict: inventory_dict[item_id] += quantity else: inventory_dict[item_id] = quantity # Convert the dictionary back to a list of tuples updated_inventory = list(inventory_dict.items()) return updated_inventory"},{"question":"For a given array of integers, find its partition point. The partition point is defined as an index `k` (0-based) such that the sum of the elements to the left of `k` is equal to the sum of the elements to the right of `k`. If there are multiple partition points, find the first one (smallest index). If no such point exists, return `-1`. For example, given the array `[1, 2, 3, 4, 6]`, the partition point is `3` because `1 + 2 + 3 = 6` and `[4]` is to the right of `3` with a sum of `6` as well. -----Input----- The first line contains an integer t (1 le t le 100) – the number of test cases. For each test case, there are two lines: 1. The first line contains an integer n (1 le n le 10^5) – the number of elements in the array. 2. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) – the elements of the array. -----Output----- For each test case, print a single integer — the partition point index or `-1` if no such index exists. -----Examples----- Input 2 5 1 2 3 4 6 4 1 1 1 2 Output 3 2 -----Note----- In the first example, the array is `[1, 2, 3, 4, 6]`. The partition point is `3` because sum of elements to the left is `1 + 2 + 3 = 6` and to the right is `[4]`. In the second example, the array is `[1, 1, 1, 2]`. The partition point is `2` because sum of elements to the left is `1 + 1 = 2` and to the right is `[2]`.","solution":"def find_partition_point(arr): total_sum = sum(arr) left_sum = 0 for i, num in enumerate(arr): total_sum -= num if left_sum == total_sum: return i left_sum += num return -1 def process_test_cases(test_cases): results = [] for case in test_cases: _, arr = case results.append(find_partition_point(arr)) return results"},{"question":"Write a function that calculates the sum of all integers up to a given number `n` (inclusive) that are divisible by either 3 or 5. Return the result as an integer. For example: ```python sum_divisible_by_3_or_5(10) == 33 ``` Explanation: - The numbers up to 10 that are divisible by 3 or 5 are: 3, 5, 6, 9, 10. - Their sum is 3 + 5 + 6 + 9 + 10 = 33. Note! The input is a non-negative integer, and the result should be an integer.","solution":"def sum_divisible_by_3_or_5(n): Returns the sum of all integers up to n (inclusive) that are divisible by either 3 or 5. return sum(i for i in range(1, n+1) if i % 3 == 0 or i % 5 == 0)"},{"question":"You are given an array `arr` of N non-negative integers. Your task is to find the smallest range `[L, R]` (inclusive) such that every number from the array falls within this range at least once. The difference between `L` and `R` should be minimal. -----Constraints----- - All values in the input are integers. - 1 <= N <= 10^5 - 0 <= arr[i] <= 10^9 -----Input----- Input is given from Standard Input in the following format: N arr_1 arr_2 ... arr_N -----Output----- Print the smallest possible difference `R - L`. -----Sample Input----- 5 4 1 7 3 9 -----Sample Output----- 8 The smallest range `[L, R]` that includes all numbers in the array is `[1, 9]`, and the difference is `9 - 1 = 8`.","solution":"def smallest_range_difference(arr): Returns the smallest possible difference R - L such that all elements in arr are within [L, R]. if not arr: return 0 min_value = min(arr) max_value = max(arr) return max_value - min_value # Example usage: # N = 5 # arr = [4, 1, 7, 3, 9] # print(smallest_range_difference(arr)) # Output: 8"},{"question":"You are working on a project related to automated toll collection systems on highways. Each vehicle passing through the toll is assigned a unique ID and is charged a toll based on the type of vehicle. The toll charges vary depending on whether the vehicle is a car, truck, or motorcycle. The system keeps a record of all toll transactions and needs to generate a summary report that includes the total number of vehicles of each type and the total amount of toll collected for each type. Your task is to write a program that reads the toll transaction data and outputs the required summary report. # Input The input is provided in the following format: ``` n Type1 Toll1 Type2 Toll2 ... Typen Tolln ``` - `n` (1 ≤ n ≤ 1000) represents the number of toll transactions. - Each of the following `n` lines represents a toll transaction with `Typei` indicating the type of the vehicle (`car`, `truck`, or `motorcycle`) and `Tolli` (1 ≤ Tolli ≤ 1000) indicating the toll charged for that transaction. # Output The output should be in the following format: ``` Cars: x y Trucks: x y Motorcycles: x y ``` - `x` denotes the number of vehicles of that type. - `y` denotes the total amount of toll collected for that type. # Example Input ``` 6 car 50 truck 100 car 50 motorcycle 20 car 50 truck 100 ``` Output ``` Cars: 3 150 Trucks: 2 200 Motorcycles: 1 20 ``` # Notes - Assume all inputs are valid and follow the specified format. - The test cases cover various scenarios including all three vehicle types and different numbers of transactions for each type.","solution":"def toll_summary(n, transactions): Generates a summary report of toll transactions. Args: n (int): number of toll transactions. transactions (list of str): list of toll transactions in the format \\"Type Toll\\". Returns: dict: a dictionary with the number of vehicles and total toll collected for each type. summary = { \\"car\\": [0, 0], \\"truck\\": [0, 0], \\"motorcycle\\": [0, 0] } for transaction in transactions: vehicle_type, toll = transaction.split() toll = int(toll) summary[vehicle_type][0] += 1 summary[vehicle_type][1] += toll return { \\"Cars\\": summary[\\"car\\"], \\"Trucks\\": summary[\\"truck\\"], \\"Motorcycles\\": summary[\\"motorcycle\\"] } # Sample Input n = 6 transactions = [\\"car 50\\", \\"truck 100\\", \\"car 50\\", \\"motorcycle 20\\", \\"car 50\\", \\"truck 100\\"] # Sample Execution to check the solution summary = toll_summary(n, transactions) print(\\"Cars:\\", summary[\\"Cars\\"]) print(\\"Trucks:\\", summary[\\"Trucks\\"]) print(\\"Motorcycles:\\", summary[\\"Motorcycles\\"])"},{"question":"In a rectangular grid of size n x m, there are some cells that contain obstacles, and some cells that are free. You need to determine whether there\'s a path from the top-left corner of the grid to the bottom-right corner, only using cells that are free and can move only right or down. You will be given t test cases. For each test case, you will get the dimensions of the grid n and m and the grid itself, where `0` represents a free cell and `1` represents a cell with an obstacle. The task is to determine if there exists a path from the top-left corner to the bottom-right corner for each test case. # Input format: - First line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. - For each test case: - The first line contains two integers n and m (1 ≤ n, m ≤ 50), the dimensions of the grid. - The next n lines each contain m integers, either `0` or `1`, representing the grid. # Output format: - For each test case, print \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner, otherwise print \\"NO\\". # Example: Input: ``` 2 3 3 0 0 0 1 1 0 0 0 0 3 3 0 1 0 1 0 0 0 0 0 ``` Output: ``` YES NO ``` # Explanation: For the first test case: ``` 0 0 0 1 1 0 0 0 0 ``` There exists a path: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2). For the second test case: ``` 0 1 0 1 0 0 0 0 0 ``` There is no valid path from (0,0) to (2,2).","solution":"def is_path_exist(grid, n, m): Determines if there exists a path from the top-left to the bottom-right corner in a grid with obstacles. def dfs(x, y, visited): # If out of bounds or on an obstacle, return False if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == 1 or visited[x][y]: return False # If we have reached the bottom-right corner, return True if x == n-1 and y == m-1: return True # Mark this cell as visited visited[x][y] = True # Move right or down if dfs(x + 1, y, visited) or dfs(x, y + 1, visited): return True # Backtrack visited[x][y] = False return False visited = [[False for _ in range(m)] for _ in range(n)] return dfs(0, 0, visited) def solve(t, test_cases): results = [] for grid, n, m in test_cases: if is_path_exist(grid, n, m): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Problem Statement A computer science teacher wanted to help her students practice recursion concepts. She decided to give them a challenge to calculate the factorial of a given number. Students must write a recursive function to compute the factorial of a given number. Write a recursive function that takes a single integer n as input and returns the factorial of n. Constraints n is a non-negative integer such that 0 <= n <= 20. Example Input: 5 Output: 120 Explanation: The factorial of 5 (denoted as 5!) is 5 * 4 * 3 * 2 * 1 = 120. Input: 0 Output: 1 Explanation: The factorial of 0 (denoted as 0!) is defined as 1 by convention.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n == 0: return 1 else: return n * factorial(n-1)"},{"question":"In a distant future, the robot uprising has become a reality and the human race relies on cryptography to protect its remaining resources. To decrypt the secret messages sent by fellow humans, a person must solve the following task: \\"Given a string S consisting of lowercase English letters, determine whether it can be rearranged to form a palindrome.\\" A palindrome is a string that reads the same forward and backward. -----Input----- The first line contains a single integer T, the number of test cases. Each of the next T lines contains a single string S. -----Output----- Output T lines with \\"YES\\" or \\"NO\\". \\"YES\\" indicates that the string can be rearranged to form a palindrome, and \\"NO\\" indicates that it cannot. -----Constraints----- - 1 <= T <= 104 - 1 <= |S| <= 105 - The sum of the lengths of all strings does not exceed 106. -----Example----- Input: 2 aab code Output: YES NO","solution":"def can_form_palindrome(T, test_cases): def can_be_palindrome(s): from collections import Counter count = Counter(s) odd_counts = 0 for letter in count: if count[letter] % 2 != 0: odd_counts += 1 # For a string to be rearranged into a palindrome # There must be at most one character with an odd count return odd_counts <= 1 results = [] for case in test_cases: if can_be_palindrome(case): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Zane is a software engineer who works with binary sequences. One day, he encounters an interesting problem involving flipping bits. Given a binary sequence of length N, Zane can perform at most M operations where he can flip a bit (turn a \'0\' to \'1\' or a \'1\' to \'0\') at any position in the sequence. Zane wants to maximize the decimal value of the binary sequence after performing at most M bit flips. The decimal value of a binary sequence is the value it represents in base-2 numeral system. Help Zane determine the maximum possible decimal value of the binary sequence after performing up to M bit flips. Constraints * 1 leq N leq 10^5 * 0 leq M leq N Input Input is given from Standard Input in the following format: N M binary_sequence Output Print the maximum decimal value of the binary sequence after performing up to M bit flips. Examples Input 5 1 10101 Output 29 Input 4 2 0000 Output 12","solution":"def maximize_decimal(N, M, binary_sequence): Returns the maximum possible decimal value of the binary sequence after performing up to M bit flips. :param N: Length of the binary sequence. :param M: Maximum number of bit flips allowed. :param binary_sequence: Binary sequence as a string. :return: Maximum possible decimal value of the binary sequence. # Convert the binary sequence to a list for easy manipulation binary_list = list(binary_sequence) for i in range(N): # Stop flipping if M flips are used up if M <= 0: break # Flip \'0\' to \'1\' if encountered if binary_list[i] == \'0\': binary_list[i] = \'1\' M -= 1 # Convert the modified binary list back to a string max_binary_sequence = \'\'.join(binary_list) # Convert the binary string to decimal max_decimal_value = int(max_binary_sequence, 2) return max_decimal_value # Handling Input and Output if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) binary_sequence = data[2] result = maximize_decimal(N, M, binary_sequence) print(result)"},{"question":"Alice is learning about palindromes and wants to write a program to help her. A palindrome is a word that reads the same forwards as backwards. Alice decides to create a palindrome by starting with a string and then adding the fewest number of characters at the end of it to make the whole string a palindrome. For example, starting with the string \\"race\\", Alice can add the characters \\"car\\" to the end to get the palindrome \\"racecar\\". Help Alice by writing a program that, given a string, returns the shortest palindrome that can be made by adding characters to the end of the string. Input The input consists of a single string s (1 ≤ |s| ≤ 1000) — the string that Alice starts with. The string contains only lowercase English letters. Output Print a single string — the shortest palindrome that can be made by adding characters to the end of the given string. Examples Input race Output racecar Input abab Output ababa Input a Output a","solution":"def shortest_palindrome(s): Given a string, returns the shortest palindrome that can be made by adding characters to the end of the string. if s == s[::-1]: # if the string itself is a palindrome return s def is_palindrome(word): return word == word[::-1] for i in range(len(s)): if is_palindrome(s[i:]): return s + s[:i][::-1] return s + s[::-1] # fallback case, should not actually hit this line # Example usage # print(shortest_palindrome(\\"race\\")) should output \\"racecar\\" # print(shortest_palindrome(\\"abab\\")) should output \\"ababa\\""},{"question":"# Problem Statement: You are given a sequence of integers that represents a series of stock prices over a period of days. Your goal is to determine the maximum profit that can be achieved by buying and selling the stock at most twice. Constraints: - You can only hold at most one share of the stock at any time. - You cannot sell a stock before you buy one. - You must complete the first buy-sell transaction before making the second buy-sell transaction (if any). Write a function `max_profit(prices: List[int]) -> int` which takes a list of integers representing the stock prices and returns an integer representing the maximum profit that can be achieved by performing the transactions. # Input: - A list of integers `prices` where `prices[i]` is the stock price on the ith day. - 1 <= len(prices) <= 10^5 - 0 <= prices[i] <= 10^5 # Output: - An integer representing the maximum profit. # Examples: Example 1: Input: ```python prices = [3, 3, 5, 0, 0, 3, 1, 4] ``` Output: ```python 6 ``` Explanation: - Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. - Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3. - Total profit = 3 + 3 = 6. Example 2: Input: ```python prices = [1, 2, 3, 4, 5] ``` Output: ```python 4 ``` Explanation: - Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. - Total profit = 4. Example 3: Input: ```python prices = [7, 6, 4, 3, 1] ``` Output: ```python 0 ``` Explanation: - In this case, no transaction is possible, so the maximum profit is 0.","solution":"from typing import List def max_profit(prices: List[int]) -> int: if not prices or len(prices) < 2: return 0 # Initialize variables for the first and second buys/sells first_buy = float(\'inf\') first_sell = 0 second_buy = float(\'inf\') second_sell = 0 for price in prices: # Update first buy cost first_buy = min(first_buy, price) # Update first sell profit first_sell = max(first_sell, price - first_buy) # Update second buy cost considering profit from first sell second_buy = min(second_buy, price - first_sell) # Update second sell profit second_sell = max(second_sell, price - second_buy) return second_sell"},{"question":"A restaurant has a unique system of accepting reservations. Instead of reserving tables, it reserves time slots for customers, during which the customer is expected to arrive and start their meal. They have limited seating and want to optimize the seating arrangement to serve the maximum number of customers on a given night. Each reservation request includes a start time and an end time, and each customer occupies a time slot from the start time to the end time exclusively. No two customers can have overlapping time slots. You are given an integer N, the number of reservation requests, and a 2D array reservations where reservations[i] = [start_i, end_i] represents the ith reservation request starting at start_i and ending at end_i. Your task is to write a function that determines the maximum number of non-overlapping reservations that can be accommodated. Example 1: Input: N = 3 reservations = [[1, 4], [2, 5], [3, 6]] Output: 1 Explanation: Only one of the reservations can be accommodated because all of them overlap with each other. Example 2: Input: N = 4 reservations = [[1, 2], [2, 3], [3, 4], [4, 5]] Output: 4 Explanation: All reservations can be accommodated as they do not overlap with each other. Your Task: You do not need to read input or print anything. Your task is to complete the function maxReservations() which takes an integer N and a 2D array reservations as input and returns an integer representing the maximum number of non-overlapping reservations that can be accommodated. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ start_i < end_i ≤ 10^9","solution":"def maxReservations(N, reservations): Determines the maximum number of non-overlapping reservations. Args: N : int : The number of reservation requests. reservations : List[List[int]] : A 2D list where each element is a list representing the start and end time of a reservation. Returns: int : The maximum number of non-overlapping reservations. if not reservations: return 0 # Sort the reservations based on the end time to apply the greedy approach reservations.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping reservations and the end time of the last added reservation count = 0 last_end_time = 0 # Iterate through the sorted reservations for start, end in reservations: if start >= last_end_time: # If the current reservation starts after the last one ends, include it count += 1 last_end_time = end return count"},{"question":"Given an array of distinct integers, arr[], of size N and a target sum S. The task is to find two integers in the array whose sum is closest to the target sum S. Example 1: Input: N = 5 arr[] = [10, 22, 28, 29, 30] S = 54 Output: [22, 30] Explanation: The pair 22 and 30 adds up to 52 which is closest to 54. Example 2: Input: N = 4 arr[] = [1, 3, 4, 7] S = 10 Output: [3, 7] Explanation: The pair 3 and 7 adds up to 10 which matches the target sum exactly. Your Task: You don\'t need to read input or print anything. You just have to complete the function closestPair() which takes an array arr[], its size N and the target sum S as inputs and returns a list of two integers whose sum is closest to the target sum S. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 -10^9 <= arr[i] <= 10^9 -10^9 <= S <= 10^9","solution":"def closestPair(arr, N, S): Given an array of distinct integers arr[] of size N and a target sum S, return a list of two integers whose sum is closest to the target sum S. if N < 2: return [] # Sort the array arr.sort() left = 0 right = N - 1 # Initialize the result list and smallest difference best_pair = [arr[left], arr[right]] closest_diff = abs(arr[left] + arr[right] - S) while left < right: current_sum = arr[left] + arr[right] current_diff = abs(current_sum - S) if current_diff < closest_diff: closest_diff = current_diff best_pair = [arr[left], arr[right]] # Move pointers based on current_sum comparison with S if current_sum < S: left += 1 elif current_sum > S: right -= 1 else: # If exact match found, return immediately return [arr[left], arr[right]] return best_pair"},{"question":"You are given an array of integers a_1, a_2, ldots, a_n and an integer k (1 leq k leq n). Your task is to determine the maximum possible sum of any subsequence of the array that has exactly k elements. A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. -----Input----- The first line contains an integer t (1 leq t leq 100) — the number of test cases in the input. The first line of each test case contains two integers n (1 leq n leq 1000) and k (1 leq k leq n). The second line of each test case contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9). -----Output----- For each test case, print the maximum possible sum of any subsequence of the array that contains exactly k elements. -----Example----- Input 3 5 3 1 2 3 4 5 6 2 -5 -1 3 1 2 9 4 4 -10 -5 -1 0 Output 12 12 -16","solution":"def max_sum_subsequence(t, test_cases): Computes the maximum possible sum of any subsequence of length k. Args: t (int): Number of test cases. test_cases (list): A list where each element is a tuple containing: - n (int): Number of elements in array. - k (int): Length of subsequence to consider. - arr (list of int): The array of integers. Returns: list: A list containing the maximum sum of subsequence of length k for each test case. results = [] for i in range(t): n, k, arr = test_cases[i] # Sort the array in descending order sorted_arr = sorted(arr, reverse=True) # Compute the sum of the first `k` elements max_sum = sum(sorted_arr[:k]) results.append(max_sum) return results"},{"question":"Write a function `isValidParentheses(s)` that takes a string `s` as input and checks whether the input string is a valid combination of parentheses. A valid combination means every opening parenthesis has a corresponding closing parenthesis and the pairs are correctly nested. The function should return `true` if the input string is valid, and `false` otherwise. **Examples:** ```python isValidParentheses(\\"()\\") # returns True isValidParentheses(\\"()[]{}\\") # returns True isValidParentheses(\\"(]\\") # returns False isValidParentheses(\\"([)]\\") # returns False isValidParentheses(\\"{[]}\\") # returns True ```","solution":"def isValidParentheses(s): Checks whether the input string s is a valid combination of parentheses. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"___ # Number Subset Sum You are given a list of distinct integers and a target sum. Your task is to write a function that checks whether there exists a subset of the given list of integers that sums up to the target sum. # Input - A list of distinct integers. - A target sum, which is a positive integer. # Output - Return `True` if there exists a subset of the list that sums up to the target sum, `False` otherwise. # EXAMPLE ```python subset_sum([1, 2, 3, 4, 5], 9) # Returns True because 4+5=9 subset_sum([1, 2, 3, 7, 8], 10) # Returns True because 2+8=10 subset_sum([1, 3, 5, 11, 13], 7) # Returns False because no subset sums to 7 ``` # NOTE - The function should be implemented using a recursive or iterative approach. - You can assume all integers in the list are distinct and the list contains at least one integer. - The target sum will always be a positive integer and greater than zero. ___","solution":"def subset_sum(nums, target): Returns True if there exists a subset of nums that sums up to target. :param nums: List of distinct integers. :param target: Positive integer representing the target sum. :return: Boolean value indicating whether the target sum can be achieved by any subset of nums. n = len(nums) dp = [[False] * (target + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, target + 1): if nums[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]] else: dp[i][j] = dp[i - 1][j] return dp[n][target]"},{"question":"Two kingdoms are in a constant struggle for resources. Each kingdom has a series of mines, and each mine produces a certain amount of resources per day. The resources of both kingdoms are distributed along a linear path where the mines are located. The first kingdom has n mines, and the second kingdom has m mines. Each mine has a positive resource amount: the resource amount of the i-th mine in the first kingdom is a_i, and the resource amount of the i-th mine in the second kingdom is b_i. Both kingdoms are trying to maximize their resource gain. You need to help both kingdoms compute the maximum resource path sum they can collect. A path starts from the first mine of either kingdom and ends at the last mine of the same kingdom, moving forward one mine at a time. There are q queries that ask you to either adjust the resource output of specific mines or compute the most profitable path for each kingdom. The possible queries are: * 1 idx x — change a_{idx} to x; * 2 idx x — change b_{idx} to x; * 3 — compute the maximal resource path for both kingdoms and output the results. Input The first line contains three integers n, m, and q (1 ≤ n,m ≤ 10^5, 1 ≤ q ≤ 10^5). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6). The third line contains m integers b_1, b_2, ..., b_m (1 ≤ b_i ≤ 10^6). The following q lines contain queries in one of the three formats described previously: * 1 idx x (1 ≤ idx ≤ n, 1 ≤ x ≤ 10^6); * 2 idx x (1 ≤ idx ≤ m, 1 ≤ x ≤ 10^6); * 3 Output For each query of type 3, print two integers: the maximum resource path sum for the first kingdom and the maximum resource path sum for the second kingdom. Examples Input 4 3 3 5 6 3 4 8 4 2 3 1 2 10 3 Output 18 14 22 14 Input 5 6 4 1 2 3 4 5 11 22 3 4 5 6 3 2 4 10 3 1 5 15 Output 15 51 15 57","solution":"def max_resource_path_sum(a, b, queries): def get_max_path_sum(arr): return sum(arr) results = [] for query in queries: if query[0] == 1: _, idx, x = query a[idx - 1] = x elif query[0] == 2: _, idx, x = query b[idx - 1] = x elif query[0] == 3: max_sum_a = get_max_path_sum(a) max_sum_b = get_max_path_sum(b) results.append((max_sum_a, max_sum_b)) return results # Example usage: n = 4 m = 3 q = 3 a = [5, 6, 3, 4] b = [8, 4, 2] queries = [(3,), (1, 2, 10), (3,)] print(max_resource_path_sum(a, b, queries)) # Output: [(18, 14), (22, 14)]"},{"question":"You are given a string s consisting of only lowercase English letters. For each unique letter in the string, output the number of times it appears in the string. The output should display the letters in the order they first appear in the string. Input The only line of input data contains a string s (1 ≤ |s| ≤ 105). Output For each unique letter in the string, output the letter followed by the number of times it appears in the string, all in one line and separated by a space. Examples Input hello Output h1 e1 l2 o1 Input programming Output p1 r2 o1 g2 a1 m2 i1 n1","solution":"def letter_count(s): Returns a string that lists each unique letter in the input string `s` followed by the number of times it appears in the string, in the order they first appear in the string. from collections import OrderedDict # Use an ordered dictionary to keep track of the count in the order of first appearance count_dict = OrderedDict() # Count occurrences of each character for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 # Create the result string result = \' \'.join(f\\"{char}{count}\\" for char, count in count_dict.items()) return result"},{"question":"Given an integer array `arr` of size `n`, write a function to determine whether the array can be sorted in non-decreasing order by performing at most one element swap. Example 1: Input: arr = [1, 5, 3, 3, 7] Output: 1 Explanation: Swap 5 and 3 to get the sorted array [1, 3, 3, 5, 7]. Example 2: Input: arr = [1, 3, 5, 3, 4] Output: 0 Explanation: No single swap can sort the array. Example 3: Input: arr = [1, 2, 3, 4, 3] Output: 1 Explanation: Swap 4 and 3 to get the sorted array [1, 2, 3, 3, 4]. Your Task: You don\'t need to read or print anything. Your task is to complete the function `can_be_sorted_with_one_swap()` which takes `arr` as input and returns 1 if the array can be sorted with at most one swap, otherwise returns 0. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= n <= 10000 -10^6 <= arr[i] <= 10^6","solution":"def can_be_sorted_with_one_swap(arr): Determines if the array can be sorted in non-decreasing order with at most one swap. Parameters: arr (list of int): The input array. Returns: int: 1 if the array can be sorted with one swap, otherwise 0. n = len(arr) orig = arr[:] arr.sort() # Find the elements that are different diff = [i for i in range(n) if arr[i] != orig[i]] # If there are zero or two elements that are out of place, they can be swapped to sort the array if len(diff) == 0 or len(diff) == 2: return 1 return 0"},{"question":"Vasya found himself a sequence of integers a of length up to 10^5 elements. He decided to play around with the sequence using two empty arrays b and c. The game has two possible moves: 1. Remove the first element of `a` and append it to `b`. 2. Remove the last element of `b` and append it to `c`. Vasya wants to get arrays `a` and `b` empty while ensuring array `c` is sorted in non-decreasing order. You should write a program that will help Vasya play the game optimally. -----Input----- First line contains an integer n (1 ≤ n ≤ 10^5) – the length of the array a. Second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) – the elements of the array a. -----Output----- Print the resulting array c. -----Examples----- Input 3 3 1 2 Output 1 2 3 Input 4 5 3 6 2 Output 2 3 5 6","solution":"def vasya_game(n, a): Optimally plays Vasya\'s game and returns the sorted array c. Parameters: n (int): The length of the array a. a (list of int): The array of integers to be processed. Returns: list of int: The sorted array c. b = [] for num in a: b.append(num) # Now, b has all elements of a in the same order, process to form c c = [] while b: # Always take the last element of b to maintain minimal order in c c.append(b.pop()) c.sort() return c"},{"question":"# Introduction A classic problem in computer science is to determine whether a given string is a palindrome. A palindrome is a string that reads the same forward and backward, ignoring spaces and punctuation. For example, \\"A man, a plan, a canal, Panama!\\" is a palindrome. # Task Write a function that accepts a string and returns a boolean indicating whether the string is a palindrome. The function should ignore spaces, punctuation, and case differences when determining if the string is a palindrome. # Input - A single string `s` (1 ≤ |s| ≤ 1000) containing alphanumeric characters, spaces, and punctuation. # Output - A boolean value `True` if the string is a palindrome, and `False` otherwise. # Example `is_palindrome(\\"A man, a plan, a canal, Panama!\\")` should return `True`. `is_palindrome(\\"Hello, World!\\")` should return `False`.","solution":"import re def is_palindrome(s): Returns whether the given string is a palindrome, ignoring spaces, punctuation, and case. # Use a regular expression to remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Compare the cleaned string with its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"In a distant future, humanity has developed advanced quantum computers that perform complex calculations instantaneously. Two brilliant scientists, Dr. Smith and Dr. Brown, are working on a groundbreaking quantum algorithm to solve a unique problem related to sequences. The problem is as follows: Given a sequence of integers, determine the length of the shortest subarray such that the sum of its elements is greater than or equal to a given integer S. A subarray is a contiguous part of an array. However, their quantum computer sometimes fails to give the correct result due to unpredictability of quantum states. To ensure the accuracy of their results, they need a classic algorithm as a backup. Your task is to write a function to help Dr. Smith and Dr. Brown. ------ Input ------ First line of input contains a single integer N, the number of elements in the sequence. Second line of input contains N space-separated integers, the elements of the sequence. Third line of input contains the integer S. ------ Output ------ Output the length of the shortest subarray with sum greater than or equal to S. If no such subarray exists, output 0. ------ Constraints: ------ 1 ≤ N ≤ 100000 1 ≤ text{elements of the sequence} ≤ 10000 1 ≤ S ≤ 1000000 ----- Sample Input 1 ------ 5 2 3 1 2 4 3 7 ----- Sample Output 1 ------ 2 ----- explanation 1 ------ The shortest subarray that has a sum of at least 7 is [4, 3], which has a length of 2.","solution":"def min_subarray_length(nums, S): Given a sequence of integers and a target integer S, this function returns the length of the shortest subarray with sum greater than or equal to S. If no such subarray exists, it returns 0. n = len(nums) left = 0 curr_sum = 0 min_length = n + 1 for right in range(n): curr_sum += nums[right] while curr_sum >= S: min_length = min(min_length, right - left + 1) curr_sum -= nums[left] left += 1 return min_length if min_length <= n else 0"},{"question":"Given an unsorted array of integers `nums` containing `n` distinct numbers in the range [0, n], find the only number in the range that is missing from the array. Implement a function: ```python def find_missing_number(nums: List[int]) -> int: pass ``` # Input - A single list `nums` of `n` distinct integers where `1 <= n <= 10^5`. # Output - Return the integer that is missing from the range [0, n]. # Constraints - All the numbers in `nums` are distinct. - `nums` contains exactly `n` numbers in the range [0, n]. # Examples Example 1 ```plaintext Input: nums = [3, 0, 1] Output: 2 ``` Explanation: `n` is 3 since there are 3 numbers in the input array. The range [0, 3] is [0, 1, 2, 3]. The missing number from this range is 2. Example 2 ```plaintext Input: nums = [0, 1] Output: 2 ``` Explanation: `n` is 2 since there are 2 numbers in the input array. The range [0, 2] is [0, 1, 2]. The missing number from this range is 2. Example 3 ```plaintext Input: nums = [9,6,4,2,3,5,7,0,1] Output: 8 ``` Explanation: `n` is 9 since there are 9 numbers in the input array. The range [0, 9] is [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]. The missing number from this range is 8. # Note Ensure your implementation has a time complexity of O(n) and uses O(1) extra space.","solution":"def find_missing_number(nums): Finds the missing number in the range [0, n] from the given list of numbers. Parameters: nums (List[int]): A list of distinct integers in the range [0, n]. Returns: int: The missing number. n = len(nums) expected_sum = n * (n + 1) // 2 # Sum of first n natural numbers actual_sum = sum(nums) # Sum of elements in the given list return expected_sum - actual_sum"},{"question":"# Task: Implement a function that takes a string, `a_str`, and returns a string representing the type of alphanumeric pattern present in the input. The possible pattern types are: 1. \\"digits-only\\": contains only numeric characters 2. \\"letters-only\\": contains only alphabetic characters 3. \\"alphanumeric\\": contains both alphabetic and numeric characters If the string contains any characters other than digits and letters, return \\"none\\". The input will always have at least one character. # Examples: ```python alphanumeric_pattern(\\"12345\\") #=> \\"digits-only\\" alphanumeric_pattern(\\"hello\\") #=> \\"letters-only\\" alphanumeric_pattern(\\"hello123\\") #=> \\"alphanumeric\\" alphanumeric_pattern(\\"hello 123\\") #=> \\"none\\" alphanumeric_pattern(\\"!@#\\") #=> \\"none\\" alphanumeric_pattern(\\"abc123!\\") #=> \\"none\\" ``` # Note: - Assume the input will only contain ASCII characters.","solution":"def alphanumeric_pattern(a_str): Determines the type of alphanumeric pattern present in the input string. Args: a_str (str): The input string. Returns: str: One of \\"digits-only\\", \\"letters-only\\", \\"alphanumeric\\", or \\"none\\" if not a_str.isalnum(): return \\"none\\" has_digits = any(char.isdigit() for char in a_str) has_letters = any(char.isalpha() for char in a_str) if has_digits and has_letters: return \\"alphanumeric\\" elif has_digits: return \\"digits-only\\" elif has_letters: return \\"letters-only\\""},{"question":"Write a function to simulate the behavior of a vending machine. The vending machine should have the following functionalities: 1. **Initialize the Vending Machine**: The vending machine should be initialized with a set of items and their prices. Each item has a unique code. 2. **Display Items**: The current list of items and their prices should be displayed. 3. **Select Item**: Select an item using its unique code. 4. **Insert Money**: Insert money into the vending machine. 5. **Vend Item**: Dispense the item if enough money has been inserted, return change if necessary, and update the vending machine state accordingly. Assume the vending machine does not give receipts and does not track user details. # Functions to Implement ```python class VendingMachine: def __init__(self, items: dict): Initialize the vending machine with a dictionary of items, where the keys are item codes (str) and values are lists containing the item name (str) and price (float). Example: items = { \'A1\': [\'Soda\', 1.25], \'A2\': [\'Chips\', 1.00] } pass def display_items(self) -> dict: Display the vending machine items and their prices. Output Example: { \'A1\': [\'Soda\', 1.25], \'A2\': [\'Chips\', 1.00] } pass def select_item(self, item_code: str): Select an item from the vending machine using its code. Parameters: item_code (str): The code of the item to select. pass def insert_money(self, amount: float) -> float: Insert money into the vending machine. Parameters: amount (float): The amount of money to insert. Returns: float: The total money inserted so far. Example: insert_money(1.00) -> 1.00 insert_money(0.50) -> 1.50 pass def vend_item(self) -> (str, float): Dispense the selected item if enough money is inserted. Return a tuple containing the item name and change given back. Returns: (str, float): The item name and the change given back as a tuple. If not enough money is inserted: (\'Insufficient funds\', 0) Example: If item selected is \'A1\' and price is 1.25, insert_money(1.50), vend_item() -> (\'Soda\', 0.25) pass ``` # Example Usage: ```python items = { \'A1\': [\'Soda\', 1.25], \'A2\': [\'Chips\', 1.00], \'B1\': [\'Candy\', 0.75] } vm = VendingMachine(items) # Display items print(vm.display_items()) # {\'A1\': [\'Soda\', 1.25], \'A2\': [\'Chips\', 1.00], \'B1\': [\'Candy\', 0.75]} # Select an item vm.select_item(\'A1\') # Insert money print(vm.insert_money(1.00)) # 1.00 print(vm.insert_money(0.50)) # 1.50 # Vend item print(vm.vend_item()) # (\'Soda\', 0.25) ```","solution":"class VendingMachine: def __init__(self, items): Initialize the vending machine with a dictionary of items, where the keys are item codes (str) and values are lists containing the item name (str) and price (float). Example: items = { \'A1\': [\'Soda\', 1.25], \'A2\': [\'Chips\', 1.00] } self.items = items self.selected_item = None self.inserted_money = 0.0 def display_items(self): Display the vending machine items and their prices. Output Example: { \'A1\': [\'Soda\', 1.25], \'A2\': [\'Chips\', 1.00] } return self.items def select_item(self, item_code): Select an item from the vending machine using its code. Parameters: item_code (str): The code of the item to select. if item_code in self.items: self.selected_item = item_code else: self.selected_item = None def insert_money(self, amount): Insert money into the vending machine. Parameters: amount (float): The amount of money to insert. Returns: float: The total money inserted so far. Example: insert_money(1.00) -> 1.00 insert_money(0.50) -> 1.50 if amount > 0: self.inserted_money += amount return self.inserted_money def vend_item(self): Dispense the selected item if enough money is inserted. Return a tuple containing the item name and change given back. Returns: (str, float): The item name and the change given back as a tuple. If not enough money is inserted: (\'Insufficient funds\', 0) Example: If item selected is \'A1\' and price is 1.25, insert_money(1.50), vend_item() -> (\'Soda\', 0.25) if self.selected_item is None: return (\'No item selected\', 0) price = self.items[self.selected_item][1] if self.inserted_money >= price: change = self.inserted_money - price item_name = self.items[self.selected_item][0] self.inserted_money = 0 self.selected_item = None return (item_name, change) else: return (\'Insufficient funds\', 0)"},{"question":"In a distant kingdom, there exists a magical string. This string is special because it contains a hidden code known only to the kingdom’s wise sorcerer. This code can be deciphered using the following method: A sequence of characters from the string is considered a \\"valid substring\\" if it contains no more than one distinct vowel (a, e, i, o, u). The sorcerer challenges you to find the length of the longest valid substring from the given string. Your task is to write a program that, given a string, determines the length of its longest valid substring. # Input format: - The first line contains a single integer n, representing the length of the string. - The second line contains a string of length n, consisting only of lowercase English letters. # Output format: - A single integer representing the length of the longest valid substring. # Constraints: - 1 ≤ n ≤ 10^5 # Example: Input: ``` 7 abecidu ``` Output: ``` 3 ``` Explanation: The longest valid substring for the given input is \\"abc\\", which contains only one vowel \'a\'. Another valid substring of length 3 is \\"idu\\", containing only one vowel \'i\'. Note: In the string \\"abecidu\\", the substrings \\"ab\\", \\"abc\\", and \\"idu\\" are the longest substrings that meet the criteria. The program should return the length of such substrings.","solution":"def longest_valid_substring(s: str) -> int: vowels = set(\'aeiou\') max_length = 0 start = 0 current_vowels = set() for end in range(len(s)): if s[end] in vowels: current_vowels.add(s[end]) while len(current_vowels) > 1: if s[start] in vowels: current_vowels.remove(s[start]) start += 1 max_length = max(max_length, end - start + 1) # Restore the current vowels set if an element was wrongly removed if len(current_vowels) < 1 and end - start + 1 > 0 and s[end] in vowels: current_vowels.add(s[end]) return max_length"},{"question":"You are given a grid of dimensions `n x m` representing a city map where roads and buildings are represented by different characters. The character `.` represents a road, and the character `#` represents a building. Your task is to find the length of the shortest path from the top-left corner of the grid (0, 0) to the bottom-right corner of the grid (n-1, m-1) while only traveling on roads. You can move up, down, left, or right by one cell at a time. -----Input----- The first line of input contains two integers `n` and `m` where `1 <= n, m <= 1000`, representing the number of rows and columns in the grid respectively. The next `n` lines each contain `m` characters (`.` or `#`), describing the grid. -----Output----- Write a single line containing the length of the shortest path from the top-left corner to the bottom-right corner, considering only the roads, or `-1` if there is no such path. -----Examples----- Sample Input 1: 5 5 . . . . . . # # # . . . . . . . # # . . . . . . . Sample Output 1: 8 Sample Input 2: 3 3 . # . # # # . . . Sample Output 2: -1","solution":"from collections import deque def shortest_path(n, m, grid): Finds the shortest path in a grid from top-left to bottom-right, moving only on roads represented by \'.\' character. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 # Function to convert input format into variable def main(): n, m = map(int, input().split()) grid = [input().strip().split() for _ in range(n)] result = shortest_path(n, m, grid) print(result)"},{"question":"During the holiday season, a shipping company is delivering packages across different cities. The network of cities and roads can be represented as a graph, where the cities are nodes and the roads are edges. Each road has a certain weight which denotes the time taken to deliver a package across that road. The shipping company wants to find out the minimum time required to deliver a package from the main warehouse located at city C1 to another city C2. Due to some seasonal barriers, a subset of roads might become temporarily unavailable, and the company needs to adjust their routes accordingly. Given a graph with N cities and M roads, you need to answer Q queries, where each query consists of a pair of cities (C1, C2). For each query, determine the minimum delivery time from city C1 to city C2. If C1 is the same as C2, the delivery time is zero by definition. If there is no possible route between the cities, return -1. Input Format - The first line contains two integers, N and M, separated by a single space. - The next M lines each contain three integers, u, v, and w, representing a road from city u to city v with weight w. - The next line contains an integer Q, the number of queries. - The next Q lines each contain two integers, C1 and C2, representing a query for the delivery time from city C1 to city C2. Constraints - 1 leq N leq 1000 - 1 leq M leq 10000 - 1 leq w leq 100 - 1 leq Q leq 1000 - 1 leq u, v, C1, C2 leq N Output Format For each query, print the minimum delivery time from city C1 to city C2 on a new line. If there is no possible route, print -1. Sample Input ``` 5 6 1 2 2 2 4 1 1 3 4 3 4 3 2 3 2 4 5 2 3 1 5 2 3 3 5 ``` Sample Output ``` 5 2 5 ``` Explanation The graph can be visualized as follows: ``` 1 --(2)-- 2 --(1)-- 4 --(2)-- 5 | | | (4) (2) (3) | | | 3 --(3)---- | ``` 1. The minimum delivery time from city 1 to city 5 is 5 (1 -> 2 -> 4 -> 5) 2. The minimum delivery time from city 2 to city 3 is 2 (2 -> 3) 3. The minimum delivery time from city 3 to city 5 is 5 (3 -> 4 -> 5)","solution":"import heapq import sys def dijkstra(graph, start): Runs Dijkstra\'s algorithm on the given graph with the starting node. Returns the shortest path distances from the start node to all others. distances = {node: float(\'inf\') for node in graph} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def find_min_delivery_times(N, M, roads, Q, queries): Returns the minimum delivery times for each query from cities C1 to C2. If no route exists, returns -1 for that query. # Create graph from road data graph = {i: {} for i in range(1, N+1)} for u, v, w in roads: if v in graph[u]: graph[u][v] = min(graph[u][v], w) else: graph[u][v] = w if u in graph[v]: graph[v][u] = min(graph[v][u], w) else: graph[v][u] = w # Store results of Dijkstra\'s to avoid recomputation min_times = {} results = [] for C1, C2 in queries: if C1 == C2: results.append(0) continue if C1 not in min_times: min_times[C1] = dijkstra(graph, C1) min_time = min_times[C1].get(C2, float(\'inf\')) if min_time == float(\'inf\'): results.append(-1) else: results.append(min_time) return results"},{"question":"-----Question----- You are given an integer array `nums` and an integer `k`. Your task is to determine if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and the absolute difference between `i` and `j` is at most `k`. If such indices exist, output \\"YES\\"; otherwise, output \\"NO\\". -----Input----- The first line contains an integer `n`, the number of elements in the array `nums` (1 ≤ n ≤ 10^5). The second line contains `n` integers representing the elements of `nums` (-10^9 ≤ nums[i] ≤ 10^9). The third line contains an integer `k` (0 ≤ k ≤ n-1). -----Output----- Output \\"YES\\" if there exist two distinct indices `i` and `j` such that `nums[i] == nums[j]` and `|i - j| ≤ k`. Otherwise, output \\"NO\\". -----Examples----- Input 6 1 2 3 1 2 3 2 Output NO Input 6 1 0 1 1 2 3 1 Output YES -----Note----- To determine if there exist two distinct indices `i` and `j` such that `nums[i] == nums[j]` and the absolute difference between `i` and `j` is at most `k`, you can utilize a sliding window approach or a hash table for efficient checking of the given condition.","solution":"def contains_nearby_duplicate(nums, k): Determines if there are two distinct indices i and j in the array such that nums[i] == nums[j] and the absolute difference between i and j is at most k. Args: nums (list of int): The array of integers. k (int): The maximum allowed index difference. Returns: str: \\"YES\\" if such indices exist, otherwise \\"NO\\". index_map = {} for i, num in enumerate(nums): if num in index_map and i - index_map[num] <= k: return \\"YES\\" index_map[num] = i return \\"NO\\""},{"question":"Task You are given a `length` and a `string` containing a sequence of characters representing a DNA fragment. Your objective is to determine whether the DNA fragment contains a specific pattern of nucleotides and how many times this pattern repeats. The DNA sequence consists of the characters: - \'A\' (Adenine) - \'C\' (Cytosine) - \'G\' (Guanine) - \'T\' (Thymine) The specific pattern or motif to look for can vary and is provided by the user. # Input The input to your function/method consists of: 1. A string `dna` representing the DNA fragment. 2. An integer `length` which is the length of the pattern to search for. 3. A string `pattern` which is the specific motif to search for in the DNA fragment. # Output Return the count of how many times the pattern appears in the DNA fragment. # Example ```python dna_pattern(\\"ACGTACGTACGT\\", 3, \\"ACG\\") // => 3 dna_pattern(\\"AAAACCCCGGGGTTTT\\", 4, \\"CCCC\\") // => 1 dna_pattern(\\"ATTGCATTGC\\", 2, \\"GC\\") // => 2 ```","solution":"def dna_pattern(dna, length, pattern): Returns the count of how many times the pattern appears in the DNA fragment. Parameters: dna (str): The DNA fragment. length (int): The length of the pattern to search for. pattern (str): The specific motif to search for in the DNA fragment. Returns: int: The count of how many times the pattern appears in the DNA fragment. count = 0 for i in range(len(dna) - length + 1): if dna[i:i+length] == pattern: count += 1 return count"},{"question":"You are managing a network of computers connected in a tree structure. Each computer is represented as a node, and each connection between two computers is represented as an edge. The tree structure ensures that there is exactly one path between any two computers. Each edge has a weight representing the time it takes to transfer data between the two computers it connects. Your task is to determine the sum of the maximum weights on all paths from the root computer (node 1) to all other computers in the network. Input The first line contains an integer n (2 ≤ n ≤ 50) — the number of computers in the network. Each of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100), representing an edge between node u and node v with weight w. Output Print a single integer denoting the sum of the maximum weights on all paths from the root computer to all other computers. Examples Input 5 1 2 3 1 3 2 2 4 4 2 5 1 Output 14 Input 4 1 2 6 1 3 2 3 4 8 Output 16 Note In the first example, the paths from the root computer (node 1) to the other computers are: - Path to node 2: maximum weight is 3. - Path to node 3: maximum weight is 2. - Path to node 4: maximum weight is max(3, 4) = 4. - Path to node 5: maximum weight is max(3, 1) = 3. The sum of these maximum weights is 3 + 2 + 4 + 3 = 12. In the second example, the paths from the root computer (node 1) to the other computers are: - Path to node 2: maximum weight is 6. - Path to node 3: maximum weight is 2. - Path to node 4: maximum weight is max(2, 8) = 8. The sum of these maximum weights is 6 + 2 + 8 = 16.","solution":"def sum_of_maximum_weights(n, edges): from collections import defaultdict, deque # Create adjacency list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # BFS to find the path and maximum weight edge to each node from root (node 1) def bfs(root): max_weights = [0] * (n + 1) visited = [False] * (n + 1) queue = deque([root]) visited[root] = True while queue: node = queue.popleft() for neighbor, weight in graph[node]: if not visited[neighbor]: visited[neighbor] = True max_weights[neighbor] = max(max_weights[node], weight) queue.append(neighbor) return max_weights max_weights = bfs(1) # Sum the maximum weights for all paths from root (node 1) to all other computers return sum(max_weights[2:]) # Example usage: n1 = 5 edges1 = [ (1, 2, 3), (1, 3, 2), (2, 4, 4), (2, 5, 1) ] print(sum_of_maximum_weights(n1, edges1)) # Output: 12 n2 = 4 edges2 = [ (1, 2, 6), (1, 3, 2), (3, 4, 8) ] print(sum_of_maximum_weights(n2, edges2)) # Output: 16"},{"question":"In the traditional game of darts, a player can score points by hitting different parts of the dartboard. Each part of the dartboard carries a specific score, and players aim to maximize their total score with a fixed number of darts. Given the number of darts and the possible scores for hitting specific parts of the dartboard, write a program to calculate the highest possible total score a player can achieve. ------ Input Format ------ - The first line will contain N - the number of darts a player has. - The second line contains T - the number of different target scores on the dartboard. - The third line contains T integers separated by spaces - the scores for hitting each target on the dartboard. ------ Output Format ------ Output a single integer - the highest possible total score a player can achieve using N darts. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ T ≤ 50 1 ≤ Score ≤ 100 ----- Sample Input 1 ------ 3 4 10 20 30 40 ----- Sample Output 1 ------ 120 ----- Explanation 1 ------ The player has 3 darts and the possible scores for hitting the dartboard are 10, 20, 30, and 40. The highest score is achieved by hitting the target with a score of 40 three times (3 * 40 = 120). ----- Sample Input 2 ------ 5 3 5 3 7 ----- Sample Output 2 ------ 35 ----- Explanation 2 ------ The player has 5 darts and the possible scores for hitting the dartboard are 5, 3, and 7. The highest score is achieved by hitting the target with a score of 7 five times (5 * 7 = 35).","solution":"def highest_score(N, scores): Calculate the highest possible total score a player can achieve using N darts. Parameters: N (int): Number of darts. scores (list): List of integers representing the possible scores for hitting each target on the dartboard. Returns: int: The highest possible score. max_score = max(scores) return N * max_score"},{"question":"You are given a string consisting of lowercase alphabets and an integer k. Your task is to determine the smallest lexicographical rotation of the string after performing exactly k character rotations. A character rotation means removing a character from the front of the string and appending it to the end. -----Input----- The first line contains a string s (1 ≤ |s| ≤ 10^5) consisting of only lowercase English alphabets. The second line contains an integer k (1 ≤ k ≤ |s|). -----Output----- Print the lexicographically smallest string obtainable after exactly k rotations. -----Examples----- Input cba 1 Output acb Input abcdef 2 Output cdefab -----Note----- In the first example, the string \\"cba\\" can be rotated as follows: - After 1 rotation: \\"bac\\" \\"acb\\" is the smallest lexicographical string among the rotations. In the second example, the string \\"abcdef\\" can be rotated as follows: - After 1 rotation: \\"bcdefa\\" - After 2 rotations: \\"cdefab\\" \\"cdefab\\" is the smallest lexicographical string among the rotations.","solution":"def smallest_lexicographical_rotation(s, k): Returns the smallest lexicographical rotation of the string s after exactly k rotations. Params: s (str): the input string k (int): the number of rotations Returns: str: the smallest lexicographical string obtainable after exactly k rotations n = len(s) k = k % n rotated = s[k:] + s[:k] return rotated"},{"question":"Binary Tree Zigzag Level Order Traversal Problem Statement Write a function to return the zigzag level order traversal of a binary tree. The zigzag level order traversal of a binary tree is defined as follows: the nodes at each level are visited from left to right, then right to left for the next level and so on, alternating between left to right and right to left. Function Signature ```python def zigzagLevelOrder(root: TreeNode) -> List[List[int]]: ... ``` Input - The function takes the root of the binary tree, which is a TreeNode object. - The TreeNode class is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Constraints - The number of nodes in the tree is in the range [0, 2000]. - -100 ≤ Node.val ≤ 100 Output - The function should return a list of lists of integers. Each inner list represents the values of nodes at each level in the zigzag order. Example ```python root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20) root.right.left = TreeNode(15) root.right.right = TreeNode(7) print(zigzagLevelOrder(root)) ``` Expected Output ```python [ [3], [20, 9], [15, 7] ] ``` Explanation - The first level contains the root node [3]. - The second level contains two nodes [9, 20], which are visited in right to left order, resulting in [20, 9]. - The third level contains two nodes [15, 7], which are visited in left to right order, resulting in [15, 7]. Note: - If the binary tree is empty, return an empty list. - Make sure to handle all edge cases including complex tree structures and single node trees. - Pay attention to the zigzag pattern and ensure it alternates correctly between levels.","solution":"from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzagLevelOrder(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] result = [] current_level = [root] left_to_right = True while current_level: level_values = [] next_level = [] for node in current_level: level_values.append(node.val) if node.left: next_level.append(node.left) if node.right: next_level.append(node.right) if not left_to_right: level_values.reverse() result.append(level_values) current_level = next_level left_to_right = not left_to_right return result"},{"question":"John and Jane are playing a game with a sequence of integers. At the start, they are given a sequence of length \'m\'. John always makes the first move, and they alternate turns thereafter. The player who cannot make a move loses the game. In each turn, a player can perform the following operation: increase exactly one element of the sequence by \'p\' or \'q\' (both given integers). However, the player must ensure that no two elements of the sequence are the same. If at any time, a player cannot perform such an operation, they lose the game. Assume both players play optimally. Input: - The first line of input contains an integer \'t\', the number of test cases. - For each test case: - The first line contains two integers \'p\' and \'q\'. - The second line contains the integer \'m\', the length of the sequence. - The third line contains \'m\' space-separated integers representing the sequence. Output: For each test case, print the name of the winner, \\"John\\" or \\"Jane\\" (without quotes). Assume both players play optimally. Constraints: 1 ≤ t ≤ 1000 1 ≤ p, q ≤ 1000 1 ≤ m ≤ 1000 1 ≤ sequence[i] ≤ 1000000 (10^6) Sample Input: 2 1 2 5 1 2 3 4 5 3 5 4 10 10 10 20 Sample Output: John Jane Explanation: In the first test case, John can always make the moves of increasing any element by \'p\' or \'q\' to maintain the uniqueness of the sequence, ensuring Jane will have no remaining moves first. In the second test case, Jane will have the advantage and win by forcing a situation where John cannot make a unique move.","solution":"def determine_winner(t, test_cases): Determines the winner for each test case based on optimal play strategy. Parameters: t (int): Number of test cases. test_cases (list): List of test case tuples which contains: - first element is a tuple (p, q) - second element is an integer m (length of the sequence) - third element is a list of integers (the sequence) Returns: list: List of strings representing the winner for each test case (\\"John\\" or \\"Jane\\"). results = [] for case in test_cases: p, q = case[0] m = case[1] sequence = case[2] # Set to maintain unique position, set is optimal for search, insert, delete operations positions = set(sequence) # The game\'s resolution becomes straightforward: if the number of unique positions (m) # is less than the length of the original sequence minus 1, Jane wins (because John # cannot make a move), otherwise, John wins. unique_positions = len(positions) if unique_positions < m: results.append(\\"Jane\\") else: results.append(\\"John\\") return results"},{"question":"You are given a list of integers. In one move, you can select any two adjacent integers in the list and swap them. Your task is to find the minimum number of moves required to sort the list in non-decreasing order. -----Input----- The first line of the input contains a single integer n (1 le n le 10^3) — the number of integers in the list. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^6). -----Output----- Print the minimum number of moves required to sort the list in non-decreasing order. -----Example----- Input 5 4 3 2 1 5 Output 6","solution":"def count_inversions(arr): Helper function to count inversions in the list using merge sort technique. if len(arr) < 2: return arr, 0 mid = len(arr) // 2 left, left_inversions = count_inversions(arr[:mid]) right, right_inversions = count_inversions(arr[mid:]) merged, split_inversions = merge_and_count(left, right) return merged, left_inversions + right_inversions + split_inversions def merge_and_count(left, right): Merge two lists and count split inversions. merged = [] split_inversions = 0 i = j = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) split_inversions += len(left) - i j += 1 merged.extend(left[i:]) merged.extend(right[j:]) return merged, split_inversions def minimum_moves_to_sort(lst): Returns the minimum number of adjacent swaps required to sort the list. _, inversions = count_inversions(lst) return inversions # Example usage: # n = 5 # lst = [4, 3, 2, 1, 5] # print(minimum_moves_to_sort(lst)) # Output: 6"},{"question":"In a magical forest, there lives a wizard named Leoric who loves to collect magical stones. Every season, magical stones appear in the forest at certain positions on a 2D grid. Each stone has a specific magical power associated with it. Leoric can move from stone to stone to collect their powers, but he can only move in the right or downward directions due to a spell restriction. Leoric starts at the top-left corner of the grid and wants to collect the maximum magical power possible by the time he reaches the bottom-right corner. You need to find the maximum magical power Leoric can collect. INPUT First line contains an integer T. T test cases follow. For each test case, the first line contains two integers N and M representing the number of rows and columns in the grid. The next N lines contain M integers each, representing the magical power of stones at each position in the grid. OUTPUT For each test case, output the maximum magical power Leoric can collect. Constraints 1 ≤ T ≤ 100 1 ≤ N, M ≤ 100 1 ≤ grid[i][j] ≤ 1000 SAMPLE INPUT 2 3 3 1 2 3 4 5 6 7 8 9 2 2 1 3 2 4 SAMPLE OUTPUT 29 8 Explanation In the first test case, the optimal path is: 1→4→7→8→9 with a total magical power of 29. In the second test case, the optimal path is: 1→3→4 with a total magical power of 8.","solution":"def max_magical_power(t, test_cases): Calculate the maximum magical power Leoric can collect for each test case. :param t: The number of test cases. :param test_cases: A list containing the grid configurations for each test case. :return: A list with the maximum magical power for each test case. results = [] for case in test_cases: n, m, grid = case dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] results.append(dp[-1][-1]) return results"},{"question":"Problem Statement Alex is working on a unique project involving arranging books on a shelf. He has `n` books, each with a specific weight, and he wants to place them on a single bookshelf. Alex follows a peculiar rule for arranging the books: he can only move a book if it can jump over exactly one other book to a predefined spot on the shelf. Moving a book from position `i` to position `j` is allowed only if: 1. There is exactly one book originally placed between `i` and `j`. 2. The weight difference between the book at `i` and the book at `i-1` (if exists) and `i+1` (if exists) must be minimized in the new arrangement. Alex wants the total weight difference across all such moves to be minimized. Your task is to determine the minimum possible difference in weights when Alex has placed all the books according to his rules. Input The input consists of: - The first line contains a single integer `t`, the number of test cases. - For each test case: - The first line contains an integer `n`, the number of books. - The second line contains `n` space-separated integers, representing the weights of the books. Output For each test case, output the minimum possible weight difference after all moves are considered. Constraints 1 ≤ t ≤ 10 1 ≤ n ≤ 100 1 ≤ weight of each book ≤ 1000 Note: If there are multiple valid arrangements with the same minimum weight difference, any such arrangement can be considered correct. SAMPLE INPUT 2 3 3 2 1 4 4 1 3 2 SAMPLE OUTPUT 0 1 Explanation: In the first case, Alex can place the books in any order since all have the same minimum difference between consecutive weights (0 difference). In the second case, moving book 4 three times to the beginning gives the arrangement [1, 2, 3, 4], minimizing the weight differences around each move and resulting in a total minimum difference of 1. Let us explore how `moving` impacts weights and then calculate accordingly.","solution":"def min_weight_difference(t, test_cases): results = [] for case in test_cases: n, weights = case weights.sort() min_diff = float(\'inf\') for i in range(1, n): min_diff = min(min_diff, abs(weights[i] - weights[i - 1])) results.append(min_diff) return results"},{"question":"A remote island is being developed as a new tourist attraction. There is a need to optimize the transportation routes on the island to ensure minimal travel time for tourists between key locations. The island is represented as a grid of cells, each cell denoting a segment of land (denoted by 0) or water (denoted by 1). Tourists can only walk on land cells, and the goal is to find the shortest path between two key locations on the land grid. Your task is to write a program that finds the shortest path between two given land cells on the grid. The program should take into account the constraints of moving only up, down, left, or right. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. - The next n lines each contain m integers 0 or 1, representing the grid. - The next line contains two pairs of integers, x1, y1, x2, y2 (1 ≤ x1, x2 ≤ n, 1 ≤ y1, y2 ≤ m), which indicate the starting and ending land cells. # Output - Output a single integer, the length of the shortest path between the start and end cells. If no such path exists, output -1. # Example Input 5 5 0 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 1 5 5 Output 8 Input 3 3 0 1 0 1 0 1 0 1 0 1 1 3 3 Output -1 # Note In the first example, the shortest path from (1, 1) to (5, 5) is 8 steps long. In the second example, there is no path from (1, 1) to (3, 3), so the output is -1.","solution":"from collections import deque def shortest_path(n, m, grid, start, end): # Direction vectors for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if start or end is water if grid[start[0]-1][start[1]-1] == 1 or grid[end[0]-1][end[1]-1] == 1: return -1 # Create a queue for BFS queue = deque([(start[0]-1, start[1]-1, 0)]) # (row, col, distance) visited = set() visited.add((start[0]-1, start[1]-1)) # Use BFS to find the shortest path while queue: r, c, dist = queue.popleft() if (r, c) == (end[0]-1, end[1]-1): return dist # Check all 4 directions for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == 0 and (nr, nc) not in visited: queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) # If no path is found return -1"},{"question":"Given a list of numbers, utilize a special technique to sort them in a unique way. The technique involves a series of steps that alternate between finding the smallest and the largest number from the unsorted section of the list and appending them to the sorted result. Below is a more detailed breakdown of the process: 1. Create an empty list, called `result`, which will store the final sorted list. 2. While there are elements in the original list: - Find and remove the smallest element from the remaining unsorted section of the list, and append it to the `result`. - If there are still elements left, find and remove the largest element from the remaining unsorted section of the list, and append it to the `result`. 3. Continue alternating these steps until all elements are moved to the `result`. Given this description, implement a function that takes a list of integers and returns the uniquely sorted list according to the described technique. Function Signature: ```python def special_sort(arr: List[int]) -> List[int] ``` Input: - A single list of integers, `arr` where 1 ≤ len(arr) ≤ 10^5 and -10^9 ≤ arr[i] ≤ 10^9. Output: - A list of integers sorted according to the described technique. Example: ```python print(special_sort([1, 3, 7, 2, 5])) # Output: [1, 7, 2, 5, 3] print(special_sort([4, 6, 2, 9])) # Output: [2, 9, 4, 6] ```","solution":"def special_sort(arr): Sorts the array using the special technique as described: alternates between appending the smallest and largest remaining elements to the result list. Args: arr: List[int] - list of integers to sort. Returns: List[int] - specially sorted list. result = [] arr.sort() # Sort the original array while arr: # Append the smallest element result.append(arr.pop(0)) if arr: # Append the largest element result.append(arr.pop(-1)) return result"},{"question":"Given a non-empty string s, write a program to check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. If such a method exists, return true, otherwise return false. Example 1: Input: s = \\"abab\\" Output: true Explanation: The string can be constructed by taking the substring \\"ab\\" and appending it to form \\"abab\\". Example 2: Input: s = \\"aba\\" Output: false Explanation: The string cannot be constructed by appending multiple copies of any substring. Your Task: Since this is a function problem, you don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function repeatedSubstringPattern() that takes the string s as a parameter and returns true if the string can be constructed this way, otherwise returns false. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ s.length ≤ 10^4","solution":"def repeatedSubstringPattern(s: str) -> bool: Checks if the string s can be constructed by taking a substring of it and appending multiple copies of the substring together. if not s: return False # Create a new string by concatenating s with itself ss = (s + s)[1:-1] # Remove the first and last character of the concatenated string return s in ss # Check if s exists in the modified concatenated string"},{"question":"Given an array A of size N and an integer K, find the number of subarrays whose sum is exactly K. A subarray is a contiguous subsequence of the array. Example 1: Input: N = 5, K = 5, A = [1, 2, 3, 4, 5] Output: 2 Explanation: The subarrays that sum to 5 are [2, 3] and [5]. Example 2: Input: N = 3, K = 3, A = [1, 1, 1] Output: 2 Explanation: The subarrays that sum to 3 are [1, 1, 1] and [1, 1, 1] (considering overlapping subarrays). Your Task: You don\'t need to read or print anything. Your task is to complete the function subarraySum() which takes array A, its size N, and integer K as input parameters and returns the number of subarrays that sum to K. Expected Time Complexity: O(N) Expected Space Complexity: O(N) Constraints: 1 ≤ N ≤ 10^5 -10^4 ≤ A[i] ≤ 10^4 -10^9 ≤ K ≤ 10^9","solution":"def subarraySum(A, N, K): Given an array A of size N and an integer K, return the number of subarrays whose sum is exactly K. current_sum = 0 sum_count = 0 sum_map = {} # Initialize map with 0 sum having single count sum_map[0] = 1 for value in A: current_sum += value if current_sum - K in sum_map: sum_count += sum_map[current_sum - K] if current_sum in sum_map: sum_map[current_sum] += 1 else: sum_map[current_sum] = 1 return sum_count"},{"question":"Marta is planning a hiking trip and wants to pack her backpack efficiently. Her backpack has a maximum weight capacity, and she has a list of essential items she wants to bring, each with a specific weight and value. Marta wants to maximize the total value of the items she can carry without exceeding the weight limit of her backpack. You need to write a program that helps Marta choose which items to bring so that the combined weight is less than or equal to her backpack\'s capacity, and the total value is as high as possible. Input The first line contains two integers n and W (1 ≤ n ≤ 100, 1 ≤ W ≤ 10^9), the number of items and the maximum capacity of the backpack, respectively. The next n lines each contain two integers w_i and v_i (1 ≤ w_i, v_i ≤ 10^9), the weight and value of the i-th item. Output Print a single integer, the maximal value of items Marta can bring. Examples Input 3 50 20 40 50 100 30 60 Output 100 Input 4 10 5 10 4 7 3 4 2 2 Output 17 Note In the first example, Marta can choose the item with weight 50 and value 100, achieving the maximal possible value without exceeding the weight limit. In the second example, Marta can choose the item with weight 5 and value 10, and the item with weight 4 and value 7, for a total weight of 9 and a total value of 17.","solution":"def knapsack(W, weights, values, n): Returns the maximum value that can be accommodated in the knapsack with given weight capacity W, weights and values of the items. # Initialize a DP table to store the maximum value up to capacity W dp = [0] * (W + 1) for i in range(n): for w in range(W, weights[i] - 1, -1): dp[w] = max(dp[w], dp[w - weights[i]] + values[i]) return dp[W] def maximal_value_of_items(n, W, items): weights = [item[0] for item in items] values = [item[1] for item in items] return knapsack(W, weights, values, n)"},{"question":"You have been hired by a software company to help develop a new feature for their application. The application provides users with the ability to add, remove, and manipulate string sequences. The specific feature you are working on involves the identification of unique substrings within a given string. A substring is any contiguous sequence of characters within a string. For example, the string \\"abc\\" has the substrings \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". The goal is to find the total number of unique substrings that can be generated from a given string. Write a function that takes a single input, a string `S` of length `n` (1 ≤ n ≤ 2000), and returns the total count of unique substrings of `S`. ------ Input ------ The input consists of a single line containing the string `S` composed only of lowercase letters. ------ Output ------ Output a single integer representing the number of unique substrings of the given string. ------ Sample Input 1 ------ abc ------ Sample Output 1 ------ 6 ------ Sample Input 2 ------ abcd ------ Sample Output 2 ------ 10 ------ Sample Input 3 ------ aaaa ------ Sample Output 3 ------ 4","solution":"def unique_substrings(S): Returns the total number of unique substrings in the input string S. substrings = set() for i in range(len(S)): for j in range(i + 1, len(S) + 1): substrings.add(S[i:j]) return len(substrings)"},{"question":"Alyssa is fascinated by candies. She has a row of n candy bags, each containing some number of candies. Initially, all bags are empty (contain 0 candies). Alyssa asks you to perform q operations. Operations are of the following types: 1 i v: Add v candies to the ith bag. (1 ≤ i ≤ n) 2 i j: Print the total number of candies in bags from position i to j inclusive. (1 ≤ i ≤ j ≤ n) Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5), the number of candy bags and the number of operations, respectively. The next q lines, each contains an operation in one of the formats described above. Output For each query of type 2, output the total number of candies in the specified range. Example Input 5 4 1 3 10 2 2 4 1 2 5 2 1 3 Output 10 15","solution":"class CandyBags: def __init__(self, n): Initialize the CandyBags with n empty bags. Args: n: integer, number of candy bags self.candy_bags = [0] * n def add_candies(self, i, v): Add v candies to the ith bag. Args: i: integer, the index of the bag (1-based index) v: integer, the number of candies to add self.candy_bags[i - 1] += v def get_range_sum(self, i, j): Get the total number of candies from bag i to bag j inclusive. Args: i: integer, starting index of the range (1-based index) j: integer, ending index of the range (1-based index) return sum(self.candy_bags[i - 1: j]) def manage_candies(n, operations): Main function to manage candy bags and perform operations. Args: n: integer, number of candy bags operations: list of operations to perform candy_bags = CandyBags(n) output = [] for operation in operations: if operation[0] == 1: _, i, v = operation candy_bags.add_candies(i, v) elif operation[0] == 2: _, i, j = operation result = candy_bags.get_range_sum(i, j) output.append(result) return output"},{"question":"A logistics company operates a fleet of delivery trucks that need to make deliveries to several locations represented by a grid of squares. Each truck can either move horizontally, vertically, or diagonally one square at a time. The objective is to write a program to compute the minimum time needed for a truck to complete a delivery route if the truck can traverse one square in one unit of time, regardless of the direction. # Input The input consists of multiple datasets. Each dataset has the following format: K x1 y1 x2 y2 ... xK yK - **K**: the number of delivery points (2 ≤ K ≤ 100); (xi, yi) denotes the coordinates of the i-th delivery point. The coordinates are integers between 0 and 100 inclusive. The last dataset is followed by a line containing \\"0\\". This line is not a part of any dataset and should not be processed. # Output For each dataset, print the minimum required time in units for a truck to complete the delivery route in a line. The truck can start at any delivery point and must visit each delivery point at least once. # Example Input: ``` 3 1 1 2 2 3 3 0 ``` Output: ``` 2 ```","solution":"import itertools def compute_minimum_time(k, points): def distance(p1, p2): return max(abs(p1[0] - p2[0]), abs(p1[1] - p2[1])) min_time = float(\'inf\') for perm in itertools.permutations(points): total_time = sum(distance(perm[i], perm[i + 1]) for i in range(k - 1)) min_time = min(min_time, total_time) return min_time def process_input(input_data): results = [] lines = input_data.strip().split(\'n\') i = 0 while i < len(lines): k = int(lines[i]) if k == 0: break points = [] for j in range(k): i += 1 x, y = map(int, lines[i].split()) points.append((x, y)) results.append(compute_minimum_time(k, points)) i += 1 return results"},{"question":"In a robotics competition, a robot needs to navigate through a grid. The robot starts at the top-left corner (1, 1) and needs to reach the bottom-right corner (N, M). However, there are certain obstacles in the grid which the robot cannot traverse. The robot can only move right or down from its current position. Your task is to determine the number of different paths the robot can take to reach its destination. If the robot cannot reach the destination, return 0. -----Input----- The first line contains two integers N and M, representing the dimensions of the grid. The next N lines each contain M characters, where each character is either \'.\' (free cell) or \'#\' (obstacle). -----Output----- Output a single integer, the number of different paths the robot can take to reach the bottom-right corner from the top-left corner. -----Constraints----- - 1 ≤ N, M ≤ 500 -----Example----- Input 1: 3 3 . . # . # . . . . Output: 2 Input 2: 2 2 . # # . Output: 0 -----Explanation----- In the first example, the robot can take two paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, there is no path to reach the bottom-right corner because the robot encounters obstacles immediately blocking both directions.","solution":"def number_of_paths(grid): Calculate the number of different paths from top-left to bottom-right of a grid. :param grid: A list of strings representing the grid. :return: The number of different paths. N = len(grid) M = len(grid[0]) if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return 0 # Initialize a 2D DP array with zeros dp = [[0] * M for _ in range(N)] # Starting position dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1] def read_input_and_solve(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = [] for i in range(2, 2 + N): grid.append(data[i]) return number_of_paths(grid)"},{"question":"Ash wants to visit all the tourist attractions in his city. There are n attractions, and there are m direct roads connecting some of these attractions. Ash is currently at attraction 1, and he wants to visit all attractions at least once before returning to attraction 1. Each road has a travel time associated with it, and Ash wants to minimize the total travel time. Each road is described by two attractions that it connects and the time it takes to travel between them. Ash can start and end his journey at attraction 1, but he can visit the attractions in any order. If there is no direct road between two attractions, Ash cannot travel directly between them and must use other roads to reach his destination. If no such tour exists, print -1. Otherwise, print the minimum possible travel time needed to complete the tour starting and ending at attraction 1. Input The first line of input contains two integers n and m (2 ≤ n ≤ 18, 1 ≤ m ≤ n * (n - 1) / 2). The next m lines contain the description of the roads. Each line contains three integers ai, bi, ti (1 ≤ ai, bi ≤ n, ai ≠ bi, 1 ≤ ti ≤ 1000), representing a bidirectional road from attraction ai to attraction bi with travel time ti. Output Print a single integer which is the minimum possible travel time to complete the tour. If it is not possible to visit all attractions and return to attraction 1, print -1. Examples Input 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 Output 80 Input 4 3 1 2 10 2 3 20 3 4 30 Output -1 Note In the first example, one optimal way to tour all the attractions is: 1 -> 2 -> 4 -> 3 -> 1 with a total travel time of 80. In the second example, there is no way to visit all attractions since there is no direct road between attractions 1 and 3, making it impossible to form a complete tour.","solution":"import itertools def tsp(graph, n, start=0): Solve the Travelling Salesman Problem using dynamic programming and bit masking. :param graph: 2D list representing the adjacency matrix of the graph. :param n: Number of vertices in the graph. :param start: The starting vertex. :return: Minimum travel cost to visit all vertices and return to the start. INF = float(\'inf\') memo = [[INF] * (1 << n) for _ in range(n)] memo[start][1 << start] = 0 for mask in range(1 << n): for u in range(n): if mask & (1 << u): for v in range(n): if not (mask & (1 << v)) and graph[u][v] != INF: next_mask = mask | (1 << v) memo[v][next_mask] = min(memo[v][next_mask], memo[u][mask] + graph[u][v]) res = INF for u in range(n): if u != start and graph[u][start] != INF: res = min(res, memo[u][(1 << n) - 1] + graph[u][start]) return res if res != INF else -1 def minimum_tour_time(n, m, roads): INF = float(\'inf\') graph = [[INF] * n for _ in range(n)] for a, b, t in roads: graph[a-1][b-1] = t graph[b-1][a-1] = t return tsp(graph, n, start=0)"},{"question":"Given an array of integers, write a function to find the pair of elements that has the smallest absolute difference between them and return their values. -----Input----- The first line contains an integer N denoting the size of the array. The second line contains N integers separated by spaces, representing the elements of the array. -----Output----- Output the pair with the smallest absolute difference as two space-separated integers in non-decreasing order. -----Constraints----- - 2 <= N <= 100 - -10^6 <= Array elements <= 10^6 -----Example----- Input: 5 4 9 1 12 8 Output: 8 9 -----Explanation----- The pair with the smallest absolute difference is (8, 9) with an absolute difference of 1. Since the output needs to be in non-decreasing order, we output \\"8 9\\".","solution":"def find_smallest_pair(arr): Finds the pair of elements in the array with the smallest absolute difference and returns their values in non-decreasing order. if len(arr) < 2: return None # Sort the array to make it easier to find pairs with small differences sorted_arr = sorted(arr) min_diff = float(\'inf\') pair = (None, None) for i in range(len(sorted_arr) - 1): diff = abs(sorted_arr[i] - sorted_arr[i + 1]) if diff < min_diff: min_diff = diff pair = (sorted_arr[i], sorted_arr[i + 1]) return pair"},{"question":"You are given a grid representing a garden where each cell can either be empty (represented by 0) or have a flower (represented by 1). Every day, flowers spread to neighboring cells horizontally or vertically (not diagonally). Write a function that determines the number of days it will take for the entire garden to be filled with flowers. If it is impossible to fill the entire garden with flowers, return -1. Examples: ``` [[1, 0, 0], [0, 0, 0], [0, 0, 0]] The garden fills as follows: Day 0: [[1, 0, 0], Day 1: [[1, 1, 0], Day 2: [[1, 1, 1], Day 3: [[1, 1, 1], [0, 0, 0], [1, 0, 0], [1, 0, 0], [1, 1, 0], [0, 0, 0]] [0, 0, 0]] [0, 0, 0]] [1, 0, 0]] It takes 3 days to fill the entire garden with flowers. [[0, 0, 0], [0, 0, 0], [0, 0, 0]] There are no flowers to start with, so it\'s impossible to fill the garden. The function should return -1. ``` All gardens will be rectangular (i.e., each row will have the same length).","solution":"from collections import deque def days_to_fill_garden(garden): rows, cols = len(garden), len(garden[0]) queue = deque() empty_cells = 0 for r in range(rows): for c in range(cols): if garden[r][c] == 1: queue.append((r, c, 0)) else: empty_cells += 1 if empty_cells == 0: return 0 if not queue: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] max_days = 0 while queue: r, c, days = queue.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and garden[nr][nc] == 0: garden[nr][nc] = 1 empty_cells -= 1 queue.append((nr, nc, days + 1)) max_days = max(max_days, days + 1) return max_days if empty_cells == 0 else -1"},{"question":"Given a list of N integers, your task is to find the maximum possible sum of a subarray of length L. A subarray is a contiguous subset of elements from the array. For example, given the array [1, 2, 3, 4, 5], a subarray of length 3 could be [2, 3, 4]. Write a program that reads multiple datasets and prints the maximum sum for each dataset. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a line containing a single zero. Each dataset is given in the following format: N L a1 a2 ... an The first line gives the number of integers in the list N (1 ≤ N ≤ 1000) and the length of the subarray L (1 ≤ L ≤ N). The second line gives the N integers ai (-10000 ≤ ai ≤ 10000). Output For each dataset, print the maximum possible sum of a subarray of length L on a new line. Example Input 5 3 1 2 3 4 5 8 4 -1 -2 -3 -4 1 2 3 4 0 Output 12 10 In the first dataset, the subarray [3, 4, 5] gives the maximum sum of 12. In the second dataset, the subarray [1, 2, 3, 4] gives the maximum sum of 10.","solution":"def max_subarray_sum(datasets): results = [] for data in datasets: N, L, array = data max_sum = float(\'-inf\') for i in range(N - L + 1): current_sum = sum(array[i:i+L]) if current_sum > max_sum: max_sum = current_sum results.append(max_sum) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') datasets = [] i = 0 while i < len(lines): if lines[i] == \\"0\\": break N, L = map(int, lines[i].split()) array = list(map(int, lines[i+1].split())) datasets.append((N, L, array)) i += 2 return datasets"},{"question":"Write a function that takes a list of integers and a target sum. The function should return a tuple of three integers from the list that add up to the target sum. If no such triplet exists, return an empty tuple. The solution must not use the same element multiple times. For example: ```python find_triplet([12, 3, 4, 1, 6, 9], 24) should return (12, 3, 9) or (3, 9, 12) or (9, 3, 12) find_triplet([1, 2, 3, 4, 5], 9) should return (1, 3, 5) or (2, 3, 4) find_triplet([1, 1, 1, 1], 5) should return () ``` ```python def find_triplet(arr, target): # Your code here ``` **Constraints**: - The input list will have at least three integers. - Each integer will be in the range of -10^6 to 10^6. - The list may contain duplicate integers. - The function should aim to have an average time complexity of O(n^2).","solution":"def find_triplet(arr, target): arr.sort() n = len(arr) for i in range(n - 2): left = i + 1 right = n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return (arr[i], arr[left], arr[right]) elif current_sum < target: left += 1 else: right -= 1 return ()"},{"question":"Imp has been learning powers to manipulate water flow from streams and rivers. He came across a peculiar phenomenon and needs your help to understand it better. On a particular river, there are ( n ) segments. The flow rate of the water in the ( i )-th segment is given by ( f_i ) liters per second, and the length of this segment is ( l_i ) meters. Imp wants to place a magical filterstone in a segment to purify the water passing through that segment. However, the effectiveness of the filterstone reduces as the flow rate increases and the length of the segment increases. The effectiveness of placing a filterstone in the ( i )-th segment is calculated as ( e_i = frac{k}{f_i cdot l_i} ), where ( k ) is a magical constant unique to this river. Given ( n ) segments with their respective flow rates, lengths, and the constant ( k ), determine which segment should Imp place the filterstone in to maximize its effectiveness. # Input - The first line contains an integer ( n ) (( 1 leq n leq 10^3 )) — the number of river segments. - The second line contains n integers ( f_1, f_2, ldots, f_n ) (( 1 leq f_i leq 10^3 )) — the flow rate of each segment. - The third line contains n integers ( l_1, l_2, ldots, l_n ) (( 1 leq l_i leq 10^3 )) — the length of each segment. - The fourth line contains an integer ( k ) (( 1 leq k leq 10^9 )) — the magical constant. # Output Print a single integer — the index (1-based) of the segment where Imp should place the filterstone to maximize its effectiveness. If there are multiple segments with the same effectiveness, choose the one with the smallest index. # Example Input ``` 3 10 5 10 2 2 1 100 ``` Output ``` 2 ``` # Note In the example, the effectiveness of placing the filterstone in each segment is: - Segment 1: ( e_1 = frac{100}{10 cdot 2} = 5.0 ) - Segment 2: ( e_2 = frac{100}{5 cdot 2} = 10.0 ) - Segment 3: ( e_3 = frac{100}{10 cdot 1} = 10.0 ) The maximum effectiveness is ( e_2 = 10.0 ) and ( e_3 = 10.0 ). According to the rule, we choose the segment with the smallest index, which is segment 2.","solution":"def select_segment(n, flow_rates, lengths, k): Determines the best segment for placing the filterstone to maximize effectiveness. Effectiveness is calculated as e_i = k / (f_i * l_i). Parameters: n (int): The number of segments. flow_rates (list of int): List of flow rates for each segment. lengths (list of int): List of lengths for each segment. k (int): The magical constant. Returns: int: The 1-based index of the segment with the highest effectiveness. max_effectiveness = 0 best_segment = 0 for i in range(n): effectiveness = k / (flow_rates[i] * lengths[i]) if effectiveness > max_effectiveness: max_effectiveness = effectiveness best_segment = i elif effectiveness == max_effectiveness and i < best_segment: best_segment = i return best_segment + 1"},{"question":"In a game development project, a player moves on a grid in which each cell can either be walkable (denoted by 0) or blocked (denoted by 1). The player starts at the top-left cell (0, 0) and aims to reach the bottom-right cell (n-1, n-1). Each move can be either one cell to the right or one cell downwards. Write a function `isPathExists(grid)` to determine if there\'s a valid path from the start to the finish. Example 1: Input: grid = [[0,1,0],[0,0,1],[1,0,0]] Output: True Example 2: Input: grid = [[0,1],[1,0]] Output: False Your Task: Write a function `isPathExists(grid)` which takes a 2D list `grid` representing the grid as input and returns a boolean `True` if there is a valid path from the top-left to the bottom-right cell, otherwise returns `False`. Expected Time Complexity: O(n^2) where `n` is the number of cells in each row or column. Expected Space Complexity: O(n^2) Constraints: * The grid size is n x n where 2 <= n <= 1000 * Each cell in the grid is either 0 or 1 * The top-left and bottom-right cells are always 0","solution":"def isPathExists(grid): Determines if there\'s a valid path from the top-left to the bottom-right cell in a grid where each cell can either be walkable (0) or blocked (1). n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return False from collections import deque # Directions for moving right and down directions = [(1, 0), (0, 1)] # Queue for BFS with starting point queue = deque([(0, 0)]) # Visited set to keep track of visited cells visited = set((0, 0)) while queue: x, y = queue.popleft() # If we reached the bottom-right cell if x == n-1 and y == n-1: return True # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny)) visited.add((nx, ny)) return False"},{"question":"Create a function that takes a list of words and returns the longest word in the list that can be constructed by chaining, where each word in the chain starts with the last letter of the previous word. -----Input----- - A single list of strings, where each string represents a word. -----Output----- - A single string, representing the longest possible word formed by chaining. -----Example----- Input: [\\"cat\\", \\"tiger\\", \\"rabbit\\", \\"elephant\\", \\"raccoon\\", \\"dog\\"] Output: \\"elephant\\" Explanation: The longest word that can be made by chaining in this example is \\"elephant\\". If there are multiple longest words with the same length, return the one that appears first in the input list. -----Constraints----- - The list will contain at least 1 and at most 1000 words. - Each word consists of lowercase English letters only. - The length of each word will be between 1 and 100.","solution":"def find_longest_chain_word(words): Function to find the longest word that can be constructed by chaining. # Create a dictionary to map the words by their starting letter word_map = {} for word in words: start_letter = word[0] if start_letter not in word_map: word_map[start_letter] = [] word_map[start_letter].append(word) def dfs(word, visited): max_chain = word if word[-1] in word_map: for next_word in word_map[word[-1]]: if next_word not in visited: visited.add(next_word) current_chain = dfs(next_word, visited) if len(current_chain) > len(max_chain): max_chain = current_chain visited.remove(next_word) return max_chain longest_word = \\"\\" for word in words: word_chain = dfs(word, set()) if len(word_chain) > len(longest_word): longest_word = word_chain return longest_word"},{"question":"Given a graph consisting of N nodes and M edges, each node is numbered from 1 to N. Each i-th edge connects vertex u_i and vertex v_i. You need to determine if there exists a path between two given nodes, A and B, and if it exists, find the length of the shortest path. Write a program to find the shortest path between nodes A and B. If there is no path, the program should output -1. Input format: N M u_1 v_1 u_2 v_2 ... u_M v_M A B Constraint: * 1 <= N <= 10^3 * 1 <= M <= 10^4 * 1 <= u_i, v_i <= N * 1 <= A, B <= N * The graph may have disconnected components. Output format: Print an integer representing the length of the shortest path between nodes A and B, or -1 if there is no path. Input example 1: 6 7 1 2 2 3 3 4 4 5 5 6 1 6 2 5 1 4 Output example 1: 3 Input example 2: 5 3 1 2 2 3 3 4 5 5 Output example 2: -1 Example: Input: 5 5 1 2 2 3 3 4 4 5 1 5 Output: 4","solution":"from collections import deque, defaultdict def shortest_path_between_nodes(N, M, edges, A, B): if A == B: return 0 graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) distance = [float(\'inf\')] * (N + 1) queue = deque([A]) visited[A] = True distance[A] = 0 while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True distance[neighbor] = distance[current] + 1 queue.append(neighbor) if neighbor == B: return distance[neighbor] return -1"},{"question":"A robotics company has developed a robot that can move on a 2-dimensional plane. The plane is represented by the standard Cartesian coordinate system. The robot\'s movements are described by a sequence of commands, where each command is one of the following: - \\"U\\": Move up 1 unit (increase y-coordinate by 1) - \\"D\\": Move down 1 unit (decrease y-coordinate by 1) - \\"L\\": Move left 1 unit (decrease x-coordinate by 1) - \\"R\\": Move right 1 unit (increase x-coordinate by 1) Given a starting position (x, y) and a sequence of commands, determine the robot\'s final position on the plane. **Input:** The input consists of: - Two integers x and y, representing the starting coordinates. - A string s representing the sequence of commands. **Output:** Output the final coordinates of the robot as integers separated by a space. **Example:** **Input:** 1 2 UUDDLRLR **Output:** 1 2","solution":"def final_position(x, y, commands): Returns the final coordinates of the robot after executing the sequence of commands. Parameters: x (int): starting x-coordinate y (int): starting y-coordinate commands (str): sequence of commands Returns: Tuple[int, int]: final (x, y) coordinates for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x, y"},{"question":"Write a function named `rotateMatrix` that takes a square matrix (2D list) as an argument and rotates it 90 degrees clockwise. Example: ``` [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ``` would become ``` [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ``` Your function should modify the input matrix in-place and return `None`.","solution":"def rotateMatrix(matrix): Rotates the input matrix 90 degrees clockwise in-place. Parameters: matrix (list of list of ints): The square matrix to rotate. Returns: None n = len(matrix) for layer in range(n // 2): first, last = layer, n - layer - 1 for i in range(first, last): offset = i - first # save top top = matrix[first][i] # left -> top matrix[first][i] = matrix[last - offset][first] # bottom -> left matrix[last - offset][first] = matrix[last][last - offset] # right -> bottom matrix[last][last - offset] = matrix[i][last] # top -> right matrix[i][last] = top"},{"question":"Tomomi has a collection of numbers and loves playing with them. She\'s come up with a game that involves finding subsequences of these numbers that form arithmetic progressions. An arithmetic progression (AP) is a sequence of numbers such that the difference between any two consecutive terms is a constant. For example, 2, 4, 6, 8 is an AP with a common difference of 2. Given an array of integers, Tomomi wants to know the length of the longest subsequence that forms an arithmetic progression. A subsequence is formed by deleting some (or no) elements of the array while maintaining the relative order of the remaining elements. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 50) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 1000) — the number of elements in the array. The second line of each test case contains n space-separated integers a_1, a_2, ..., a_n (-10^6 le a_i le 10^6). -----Output----- For each test case, print a single integer — the length of the longest subsequence that forms an arithmetic progression. -----Examples----- Input 2 6 1 7 10 15 27 29 7 5 10 15 20 25 30 35 Output 3 7 ------Note------ In the first test case, the longest subsequence that forms an arithmetic progression is [1, 10, 15] with a common difference of 5, so the output is 3. In the second test case, the entire array forms an arithmetic progression with a common difference of 5, so the output is 7.","solution":"def longest_ap_subsequence_length(t, test_cases): results = [] for case in test_cases: n, arr = case if n <= 1: results.append(n) continue dp = {} max_length = 1 for i in range(n): dp[i] = {} for j in range(i): diff = arr[i] - arr[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_length = max(max_length, dp[i][diff]) results.append(max_length) return results # Example usage: # t = 2 # test_cases = [(6, [1, 7, 10, 15, 27, 29]), (7, [5, 10, 15, 20, 25, 30, 35])] # print(longest_ap_subsequence_length(t, test_cases))"},{"question":"Consider a connected undirected graph with n vertices and m edges. Each edge has an integer weight assigned to it. You are to answer the following queries: for each pair of vertices (u, v), find the weight of the heaviest edge on the path from u to v. Input The first line contains two integers, n (1 ≤ n ≤ 10^5) and m (0 ≤ m ≤ 2×10^5), representing the number of vertices and the number of edges in the graph respectively. The next m lines each contain three integers ui, vi, and wi (1 ≤ ui, vi ≤ n, 1 ≤ wi ≤ 10^6), describing an edge between vertex ui and vertex vi with weight wi. The next line contains a single integer q (1 ≤ q ≤ 10^5), representing the number of queries. Each of the next q lines contains two integers, u and v (1 ≤ u, v ≤ n), specifying the query vertices. Output For each query, output a single integer, which is the weight of the heaviest edge on the path from u to v. If there is no path from u to v, output −1. Example Input 5 4 1 2 10 2 3 5 3 4 8 4 5 7 3 1 5 2 4 1 3 Output 10 8 10 Note In the given example, the heaviest edge on the path from vertex 1 to vertex 5 is the one with weight 10 between vertices 1 and 2. The heaviest edge on the path from vertex 2 to vertex 4 is the one with weight 8 between vertices 3 and 4. The heaviest edge on the path from vertex 1 to vertex 3 is again the edge with weight 10 between vertices 1 and 2.","solution":"def find_heaviest_edge(n, m, edges, queries): from collections import defaultdict import heapq def build_graph(n, edges): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) return graph def dijkstra(graph, start, end, n): heap = [(0, start, -1)] visited = set() max_edge_weight = -1 while heap: cost, node, heaviest = heapq.heappop(heap) if node in visited: continue visited.add(node) if node == end: return heaviest for neighbor, weight in graph[node]: if neighbor not in visited: heapq.heappush(heap, (cost + weight, neighbor, max(heaviest, weight))) return -1 # Build the graph graph = build_graph(n, edges) results = [] for u, v in queries: heaviest_edge = dijkstra(graph, u, v, n) results.append(heaviest_edge) return results # Example usage: n = 5 m = 4 edges = [ (1, 2, 10), (2, 3, 5), (3, 4, 8), (4, 5, 7) ] queries = [ (1, 5), (2, 4), (1, 3) ] print(find_heaviest_edge(n, m, edges, queries)) # Output: [10, 8, 10]"},{"question":"Alice is participating in a coding competition where she needs to solve a grid-based problem. She is given an `m` x `n` grid, initially filled with zeroes. Her task is to perform a series of operations, where each operation consists of adding a certain value `v` to all cells in a specified subgrid. The subgrid is defined by its top-left corner `(r1, c1)` and bottom-right corner `(r2, c2)`. After performing all the operations, Alice needs to determine the final state of the grid. Write a function `update_grid(m: int, n: int, operations: List[Tuple[int, int, int, int, int]]) -> List[List[int]]` that takes in the number of rows `m`, the number of columns `n`, and a list of operations. Each operation is represented as a tuple `(r1, c1, r2, c2, v)`, where `r1, c1` specify the top-left corner, `r2, c2` specify the bottom-right corner of the subgrid, and `v` is the value to be added. The function should return the final grid after performing all the operations. # Input Format - The first line contains two space-separated integers, `m` and `n`, representing the number of rows and columns of the grid. - The second line contains an integer `k`, representing the number of operations. - Each of the following `k` lines contains five space-separated integers, `r1, c1, r2, c2, v`, describing the subgrid and the value to be added. # Constraints - 1 leq m, n leq 1000 - 1 leq k leq 1000 - 0 leq r1, c1 leq r2 < m - 0 leq r2, c2 < n - -1000 leq v leq 1000 # Output Format - Return a 2D list representing the final grid. # Sample Input ```plaintext 3 3 2 0 0 1 1 2 1 1 2 2 3 ``` # Sample Output ```plaintext [[2, 2, 0], [2, 5, 3], [0, 3, 3]] ``` # Explanation Initially, the grid is: ``` [[0, 0, 0], [0, 0, 0], [0, 0, 0]] ``` After the first operation `(0, 0, 1, 1, 2)`, we add `2` to cells `(0,0), (0,1), (1,0), (1,1)` resulting in: ``` [[2, 2, 0], [2, 2, 0], [0, 0, 0]] ``` After the second operation `(1, 1, 2, 2, 3)`, we add `3` to cells `(1,1), (1,2), (2,1), (2,2)` resulting in the final grid: ``` [[2, 2, 0], [2, 5, 3], [0, 3, 3]] ``` # Objective Implement the function `update_grid(m, n, operations)` that performs the above operations and returns the final state of the grid.","solution":"from typing import List, Tuple def update_grid(m: int, n: int, operations: List[Tuple[int, int, int, int, int]]) -> List[List[int]]: # Initialize the grid with zeros grid = [[0] * n for _ in range(m)] # Apply each operation to the grid for r1, c1, r2, c2, v in operations: for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): grid[i][j] += v return grid"},{"question":"Arvind is preparing for a coding competition. He wants to write a function that determines whether a given word can be constructed from a specific set of letters. He can use each letter from the set only once. Your task is to help Arvind by writing a function that checks if the word can be constructed or not. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a string of lowercase English letters, representing the set of available letters. - The second line of each test case contains a string of lowercase English letters, representing the word Arvind wants to construct. ------ Output Format ------ For each test case, print \\"YES\\" if the word can be constructed using the given set of letters, and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ length of the string of available letters ≤ 100 1 ≤ length of the word Arvind wants to construct ≤ 100 ------ Sample Input 1 ------ 3 aabcd bac abc ppq aabbcc abc ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Test Case 1. The string of available letters is \'aabcd\' and the word to construct is \'bac\'. Here, Arvind can construct the word \'bac\' using the available letters. Test Case 2. The string of available letters is \'abc\' and the word to construct is \'ppq\'. Here, Arvind cannot construct the word \'ppq\' since \'p\' and \'q\' are not in the set of available letters. Test Case 3. The string of available letters is \'aabbcc\' and the word to construct is \'abc\'. Here, Arvind can construct the word \'abc\' using the available letters. This function will help Arvind ensure he uses an optimal approach to checking if he can construct his desired word from the given set of letters.","solution":"def can_construct_word(letters, word): Determines if \'word\' can be constructed using the \'letters\'. Each letter can be used only once. Args: letters (str): A string of available letters. word (str): The word to be constructed. Returns: str: \\"YES\\" if the word can be constructed, \\"NO\\" otherwise. from collections import Counter letter_count = Counter(letters) word_count = Counter(word) for char in word_count: if word_count[char] > letter_count[char]: return \\"NO\\" return \\"YES\\""},{"question":"You are a space engineer working on a project to automate the fuel management system of your spaceship. Your task is to create a program that helps in optimizing the selection of fuel tanks for various interplanetary missions. Each mission requires a specific amount of fuel, and you have a set of available fuel tanks with varying capacities. The constraint is that once a tank is selected, it must be used entirely without splitting the fuel. The problem can be stated as follows: - Given a list of fuel tank capacities and a required fuel amount for each mission, determine if it\'s possible to meet the required fuel amount exactly by selecting a subset of the available fuel tanks. If it\'s possible, provide one such selection of tank capacities. Your task is to write a program to determine the possibility and the selection for each mission. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case starts with a line containing the fuel amount required for the mission, F. - The next line contains an integer M, the number of fuel tanks. - The next line contains M space-separated positive integers, representing the capacities of the fuel tanks. -----Output:----- For each test case, output \\"YES\\" and a list of selected tank capacities that sum up to the required fuel amount F, if such a selection is possible. Otherwise, output \\"NO\\". If there are multiple selections possible, any valid one is acceptable. -----Constraints----- - 1 leq T leq 100 - 1 leq F leq 10^3 - 1 leq M leq 100 - Each tank capacity is a positive integer not exceeding 100 -----Sample Input:----- 2 15 5 1 3 4 8 10 23 4 10 14 7 5 -----Sample Output:----- YES 3 4 8 NO","solution":"def mission_fuel_selection(T, missions): Determines if it\'s possible to match the required fuel amount exactly using a subset of fuel tanks. Parameters: T (int): Number of test cases missions (list): List of tuples, each containing the required fuel amount, the list of fuel tank capacities, and number of tanks. Returns: list: List of results for each mission. Each result is either a tuple (\\"YES\\", list of tank capacities) or \\"NO\\" indicating whether the fuel amount can be exactly met using the available fuel tanks. results = [] def find_subset_tanks(fuel_required, tanks): n = len(tanks) dp = [[False] * (fuel_required + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(fuel_required + 1): dp[i][j] = dp[i-1][j] if j >= tanks[i-1] and dp[i-1][j - tanks[i-1]]: dp[i][j] = True if not dp[n][fuel_required]: return None selection = [] i, j = n, fuel_required while i > 0 and j > 0: if dp[i][j] and not dp[i-1][j]: selection.append(tanks[i-1]) j -= tanks[i-1] i -= 1 return selection[::-1] for mission in missions: fuel_required, num_tanks, tanks = mission result = find_subset_tanks(fuel_required, tanks) if result is not None: results.append((\\"YES\\", result)) else: results.append(\\"NO\\") return results"},{"question":"In a quiet seaside town, there exists a peculiar type of candy shop. This shop specializes in creating custom gift boxes of chocolates, where each box is composed of different types of chocolates placed in a specific sequence. Given that the owner of the shop is very particular about the sequence, your task is to figure out how many different ways you can create these chocolate boxes. Each gift box should contain exactly N chocolates, and each chocolate must be of a distinct type. You will be given a list of all available chocolate types in the shop. Your goal is to determine the number of distinct permutations possible for creating a gift box containing exactly N chocolates. -----Input----- The input starts with a single integer N (1 leq N leq 10^6), the number of chocolates required in one gift box. The second line contains one integer M (N leq M leq 10^6), the number of available different types of chocolates in the shop. -----Output----- Print a single integer, the number of distinct permutations of chocolates possible to create one gift box of exactly N chocolates using M available types. Since the answer can be very large, print it modulo 10^9 + 7. -----Examples----- Sample Input 1: 2 3 Sample Output 1: 6 Sample Input 2: 3 3 Sample Output 2: 6 Sample Input 3: 1 1 Sample Output 3: 1","solution":"MOD = 10**9 + 7 def make_gift_box(N, M): Calculate the number of distinct permutations of chocolates possible to create one gift box of exactly N chocolates using M available types. if N > M: return 0 result = 1 for i in range(M, M-N, -1): result = (result * i) % MOD return result"},{"question":"You are given a robot on an infinite 2D grid that starts at the origin (0, 0) and a sequence of moves it needs to perform. The robot can move in four possible directions \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Each movement takes the robot one unit in the respective direction. Your task is to determine the minimum number of moves required to return the robot to the origin after it completes the given sequence of moves. Input The first line contains a single integer n (1 <= n <= 1000) — the number of moves. The second line contains a string of length n which indicates the sequence of moves. Output Print a single integer — the minimum number of moves required for the robot to return to the origin. Examples Input 6 UUDDLR Output 2 Input 10 UUUULLLLLL Output 10 Input 4 LDRR Output 2 Explanation: For the first example, after the moves, the robot is at position (0, 0). Therefore no further moves are required. For the second example, after the moves, the robot is at position (-6, 4). The robot can return to the origin with six \'R\' and four \'D\' moves. Therefore the output is 10. For the third example, after the moves, the robot is at position (1, -1). The robot can return to the origin with one \'L\' and one \'U\' move. Hence the output is 2.","solution":"def min_moves_to_origin(n, moves): This function calculates the minimum number of moves required to return the robot to the origin after it completes the given sequence of moves. x, y = 0, 0 # starting at the origin (0, 0) for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 # The minimum moves required to return to the origin will be the sum of absolute values of x and y. return abs(x) + abs(y)"},{"question":"Given two sorted singly linked lists representing positive integers, your task is to complete the function addLinkedLists(), that adds the two numbers and returns the sum as a new linked list. The digits are stored in reverse order, which means that the 1’s digit is at the head of the list. Input: The function takes two arguments, head1 and head2, which are the reference pointers to the heads of the two linked lists. Each linked list represents a positive integer. Output: Return a single linked list which represents the sum of the two numbers. User Task: The task is to complete the function addLinkedLists() which should sum the two numbers represented by both linked lists and return the result as a new linked list. Constraints: 1 <= length of the linked lists <= 1000 Example: Input: 2 (2 -> 4 -> 3) (5 -> 6 -> 4) (9 -> 9 -> 9) (1) Outputs: 7 -> 0 -> 8 0 -> 0 -> 0 -> 1 Explanation: Testcase 1: Adding 342 and 465 yields 807, which is represented as (7 -> 0 -> 8). Testcase 2: Adding 999 and 1 yields 1000, which is represented as (0 -> 0 -> 0 -> 1).","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def addLinkedLists(head1, head2): dummy = ListNode(0) current = dummy carry = 0 while head1 is not None or head2 is not None: x = head1.val if head1 is not None else 0 y = head2.val if head2 is not None else 0 sum = carry + x + y carry = sum // 10 current.next = ListNode(sum % 10) current = current.next if head1 is not None: head1 = head1.next if head2 is not None: head2 = head2.next if carry > 0: current.next = ListNode(carry) return dummy.next"},{"question":"You are given an array of integers representing the heights of a series of buildings lined up in a row. A spotlight can be placed on top of any building and it illuminates all buildings to its right within a certain range. The goal is to place the minimum number of spotlights such that all buildings are illuminated. A spotlight placed on top of the i-th building (0-based index) with a range r illuminates buildings [i, i+r-1]. Write a function that returns the minimum number of spotlights needed to illuminate all buildings. -----Input----- The first line contains two integers n and r (1 le n le 10^5, 1 le r le n) — the number of buildings and the range of each spotlight, respectively. The second line contains n space-separated integers h_1, h_2, dots, h_n (1 le h_i le 10^4) — the heights of the buildings. -----Output----- Print one integer — the minimum number of spotlights needed to illuminate all buildings. -----Examples----- Input 7 3 3 1 4 1 5 9 2 Output 3 Input 5 2 1 1 1 1 1 Output 3 -----Note----- In the first example, one optimal strategy is to place spotlights on buildings at indices 0, 3, and 6 which covers all the buildings with the given range of 3. In the second example, one optimal strategy is to place spotlights on buildings at indices 0, 2, and 4 which covers all the buildings with the given range of 2.","solution":"def min_spotlights(n, r, heights): Returns the minimum number of spotlights needed to illuminate all buildings. :param n: int, number of buildings :param r: int, range of each spotlight :param heights: List[int], heights of the buildings :return: int, minimum number of spotlights needed spotlights = 0 i = 0 while i < n: spotlights += 1 i += r # place a spotlight and move to the next uncovered building return spotlights"},{"question":"In an animal shelter, each animal has a unique ID and a set of characteristics. Write a function to find the animal(s) based on a combination of two promising characteristics: \'friendly\' and \'playful\'. If multiple animals satisfy both characteristics, return their IDs in ascending order. Input A list of tuples, each containing an animal ID, the characteristic \'friendly\', and the characteristic \'playful\'. The characteristics are boolean values (True, False). The list will contain at least one animal. Output A list of animal IDs that have both \'friendly\' and \'playful\' set to True, sorted in ascending order. If no such animal exists, return an empty list. Constraints 1 ≤ number of animals ≤ 1000 SAMPLE INPUT [(101, True, False), (102, True, True), (103, False, True), (104, True, True)] SAMPLE OUTPUT [102, 104] Explanation From the sample input, animals with IDs 102 and 104 have both characteristics set to True (\'friendly\' and \'playful\'): - Animal ID 101: friendly=True, playful=False (Does not qualify) - Animal ID 102: friendly=True, playful=True (Qualifies) - Animal ID 103: friendly=False, playful=True (Does not qualify) - Animal ID 104: friendly=True, playful=True (Qualifies) The IDs that qualify (102 and 104) are returned in ascending order.","solution":"def find_promising_animals(animal_data): Returns the list of animal IDs that are both friendly and playful, sorted in ascending order. Parameters: animal_data (list of tuples): Each tuple contains an animal ID (int), \'friendly\' (bool), and \'playful\' (bool). Returns: List[int]: Sorted list of animal IDs that are both friendly and playful. promising_animals = [animal_id for animal_id, friendly, playful in animal_data if friendly and playful] return sorted(promising_animals)"},{"question":"Given a matrix of size N x M and an integer X, your task is to determine whether X is present in the matrix. The matrix has the following properties: - Each row is sorted in non-decreasing order from left to right. - Each column is sorted in non-decreasing order from top to bottom. Example 1: Input: N = 3, M = 3 matrix = {{1, 3, 5}, {2, 6, 8}, {4, 7, 9}} X = 7 Output: True Explanation: 7 is found in the matrix at position (2, 1). Example 2: Input: N = 3, M = 3 matrix = {{1, 3, 5}, {2, 6, 8}, {4, 7, 9}} X = 10 Output: False Explanation: 10 is not found in the matrix. Your Task: You don\'t need to read input or print anything. Your task is to complete the function searchMatrix() which takes the matrix of size N x M and the integer X as inputs, and returns True if X is present in the matrix, otherwise returns False. Expected Time Complexity: O(N + M) Expected Auxiliary Space: O(1) Constraints: 1 <= N, M <= 1000 -10^9 <= matrix[i][j], X <= 10^9","solution":"def searchMatrix(matrix, X): Determines if the integer X is present in the matrix. Each row is sorted in non-decreasing order from left to right. Each column is sorted in non-decreasing order from top to bottom. :param matrix: List[List[int]] : 2D matrix of integers :param X: int : The integer to search for in the matrix :return: bool : True if X is found in the matrix, False otherwise if not matrix or not matrix[0]: return False N = len(matrix) M = len(matrix[0]) # Start from the top-right corner row = 0 col = M - 1 while row < N and col >= 0: if matrix[row][col] == X: return True elif matrix[row][col] > X: col -= 1 else: row += 1 return False"},{"question":"Given a string `s` containing multiple words separated by single spaces, return the length of the shortest word in the string. For example: ``` \\"the quick brown fox\\" ==> 3 // \\"the\\" and \\"fox\\" are the shortest words, each with length 3 \\"hello world\\" ==> 5 // \\"world\\" is the shortest word with length 5 \\"a journey of a thousand miles begins with a single step\\" ==> 1 // \\"a\\" is the shortest word with length 1 ``` Note: - The input string will consist of only lowercase letters and spaces. - There will be at least one word in the string.","solution":"def length_of_shortest_word(s): Returns the length of the shortest word in the string `s`. words = s.split() return min(len(word) for word in words)"},{"question":"Write a function that takes a string containing only parentheses characters `\'(\'`, `\')\'`, `\'{\'`, `\'}\'`, `\'[\'`, and `\']\'` and returns `true` if the parentheses are valid and `false` otherwise. **Note:** A string of parentheses is valid if every opening parenthesis has a corresponding closing parenthesis and the pairs of parentheses are properly nested. Examples * `()` is valid. * `()[]{}[]` is valid. * `([{}])` is valid. * `(]` is invalid. * `([)]` is invalid. * `((()()` is invalid.","solution":"def is_valid_parentheses(s): Returns True if the input string of parentheses is valid, False otherwise. stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or stack.pop() != matching_parentheses[char]: return False else: return False return stack == []"},{"question":"Petya has recently developed an interest in mirrored numbers, also known as palindromic numbers. A palindromic number is a number that remains the same when its digits are reversed. For example, numbers 121, 3443, 9999 are palindromic, while 123, 456, 7890 are not. Petya is particularly fascinated by a special kind of palindromic number which he calls \\"lucky palindromic number.\\" A lucky palindromic number is a palindromic number where all digits are either 3 or 8. For instance, numbers 838, 383, and 8888 are lucky palindromic numbers, whereas 818, 3773, and 4884 are not. Your task is to determine if a given number is a lucky palindromic number. Input The first line contains a positive integer n (1 ≤ n ≤ 100) — the length of the number that needs to be checked. The second line contains a positive integer of length exactly n without leading zeros — the number to be checked. Output On the first line, print \\"YES\\" if the given number is a lucky palindromic number. Otherwise, print \\"NO\\" (without the quotes). Examples Input 3 838 Output YES Input 4 8448 Output NO Input 6 888383 Output NO Note In the first example, the number is 838, which is both palindromic and only contains the digits 3 and 8. In the second example, though the number is palindromic, it contains the digit 4, making it not a lucky palindromic number. In the third example, the number is not palindromic, hence it is not a lucky palindromic number.","solution":"def is_lucky_palindromic_number(n, number): Determines if a given number is a lucky palindromic number. A lucky palindromic number is a number that is palindromic and contains only the digits 3 and 8. Parameters: n (int): Length of the number. number (int): The number to be checked. Returns: str: \\"YES\\" if the number is a lucky palindromic number, otherwise \\"NO\\". num_str = str(number) if num_str != num_str[::-1]: return \\"NO\\" for digit in num_str: if digit not in {\'3\', \'8\'}: return \\"NO\\" return \\"YES\\""},{"question":"You are given an aircraft with a fixed-capacity fuel tank. The aircraft is planning a long journey that requires refueling stops along the way. The challenge is to compute the minimum number of refueling stops needed to reach the final destination. You are provided: - initialFuel: the initial amount of fuel in the aircraft at the start (in kilometers). - finalDestination: the total distance to be covered (in kilometers). - stations: a list of tuples where each tuple (distance, fuel) represents a refueling station located at a certain distance from the starting point and the amount of fuel that can be refueled there (both values in kilometers). The aircraft can only carry a maximum of initialFuel amount of fuel at any given time. The aircraft consumes 1 unit of fuel per kilometer traveled. Write a function `minRefuelStops(initialFuel, finalDestination, stations)` to determine the minimum number of refueling stops needed to reach the destination, or return -1 if it is not possible. # Example: Input: ```python initialFuel = 10 finalDestination = 60 stations = [(10, 20), (20, 10), (30, 30), (50, 40)] ``` Output: ```python 2 ``` Explanation: - Start with 10 units of fuel. After 10 km, reach the first station and refuel 20 units of fuel (total 20 units in the tank). - Travel to the second station (total distance covered 20 km, fuel left 10 units). Refuel 10 units at the second station (20 units in the tank). - Travel to the third station (total distance covered 30 km, fuel left 10 units). Refuel 30 units at the third station (40 units in the tank). - Travel to the fourth station (total distance covered 50 km, fuel left 20 units). This will be the final refuel needed with 40 units (ensures enough fuel to cover the remaining 10 km to the destination). # Constraints: - 1 ≤ initialFuel ≤ 10^9 - 1 ≤ finalDestination ≤ 10^9 - 0 ≤ len(stations) ≤ 500 - 1 ≤ each station distance and fuel ≤ 10^9 # Your Task: Implement the function `minRefuelStops(initialFuel, finalDestination, stations)` that computes the minimum number of refuels required to reach the final destination or returns -1 if it\'s not possible.","solution":"import heapq def minRefuelStops(initialFuel, finalDestination, stations): Calculate the minimum number of refueling stops required to reach the destination. :param initialFuel: int - Initial amount of fuel in the aircraft. :param finalDestination: int - Total distance to be covered. :param stations: list of tuples [(distance, fuel), ...] - List of refueling stations. :return: int - Minimum number of refueling stops, or -1 if not possible. # Max heap to keep track of the fuel amounts at the stations we can stop at fuel_max_heap = [] stations.append((finalDestination, 0)) # Add destination as the last \\"station\\" current_fuel = initialFuel previous_station_distance = 0 refuel_stops = 0 for distance, fuel in stations: current_fuel -= (distance - previous_station_distance) while fuel_max_heap and current_fuel < 0: current_fuel += -heapq.heappop(fuel_max_heap) refuel_stops += 1 if current_fuel < 0: return -1 heapq.heappush(fuel_max_heap, -fuel) previous_station_distance = distance return refuel_stops"},{"question":"Given an integer num, return True if num is a power of 3, otherwise return False. -----Constraints----- - num is an integer. -----Input----- Input is given from Standard Input in the following format: num -----Output----- Print True if num is a power of 3, otherwise print False. -----Sample Input----- 27 -----Sample Output----- True 27 is a power of 3 (3^3 = 27).","solution":"def is_power_of_three(num): Returns True if num is a power of 3, otherwise False. if num <= 0: return False while num % 3 == 0: num //= 3 return num == 1"},{"question":"Maria is a mathematics enthusiast who loves experimenting with and creating interesting numeric patterns. She recently discovered a pattern that generates a sequence based on an integer\'s even and odd properties. The sequence starts with an integer `x` and is generated using the following rules: - If the current number is even, the next number in the sequence is obtained by dividing the current number by 2. - If the current number is odd, the next number in the sequence is obtained by multiplying the current number by 3 and adding 1. Maria is interested in knowing the length of the sequence starting from `x` until it reaches the value of 1 for the first time. Your task is to write a program that helps Maria find the length of such a sequence. Input The input consists of a single integer `x` (1 ≤ x ≤ 10^6). Output Output a single integer which is the length of the sequence starting from `x` and ending when it reaches the value of 1. Examples Input 6 Output 9 Input 3 Output 8 Note For the first sample, the sequence starting at 6 would be: 6, 3, 10, 5, 16, 8, 4, 2, 1. For the second sample, the sequence starting at 3 would be: 3, 10, 5, 16, 8, 4, 2, 1.","solution":"def sequence_length(x): Returns the length of the sequence starting from x and ending when it reaches 1. count = 1 # Start counting from the initial number itself while x != 1: if x % 2 == 0: x = x // 2 else: x = 3 * x + 1 count += 1 return count"},{"question":"Tom is participating in a robotics competition where he must navigate a robot from a start position to a target position on a grid. The grid is of size NxM and consists of cells, each of which can either be an obstacle or free space. Tom\'s robot can move up, down, left, or right but cannot move diagonally. Given the start position (s_x, s_y) and the target position (t_x, t_y), determine the minimum number of moves required for the robot to reach the target position avoiding any obstacles. If it is not possible for the robot to reach the target position, return -1. -----Input----- The first line contains two space-separated integers, N and M, denoting the number of rows and columns in the grid, respectively. The next N lines each contain a string of length M which describes the grid, where \'.\' represents free space and \'#\' represents an obstacle. The last line contains four space-separated integers s_x, s_y, t_x, t_y, denoting the coordinates of the start and target positions respectively. The coordinates are 0-based. -----Output----- Output a single integer indicating the minimum number of moves required for the robot to reach the target position. If it is not possible, output -1. -----Constraints----- - 1 ≤ N, M ≤ 1000 - 0 ≤ s_x, s_y, t_x, t_y < N, M -----Example----- Input: 5 5 ..#.. ..#.. ..... #.. ..... 0 0 4 4 Output: 8 Explanation: The robot starts at (0, 0) and must reach (4, 4). One of the shortest paths avoiding obstacles is: (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) -> (2, 3) -> (3, 3) -> (4, 3) -> (4, 4) Hence, the minimum number of moves is 8.","solution":"from collections import deque def min_moves_to_reach_target(n, m, grid, s_x, s_y, t_x, t_y): Determine the minimum number of moves needed for the robot to reach the target position on the grid. Returns -1 if the target is unreachable. if grid[s_x][s_y] == \'#\' or grid[t_x][t_y] == \'#\': return -1 # BFS setup queue = deque([(s_x, s_y, 0)]) visited = set((s_x, s_y)) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right while queue: x, y, moves = queue.popleft() if (x, y) == (t_x, t_y): return moves for d_x, d_y in directions: new_x, new_y = x + d_x, y + d_y if 0 <= new_x < n and 0 <= new_y < m and (new_x, new_y) not in visited and grid[new_x][new_y] == \'.\': visited.add((new_x, new_y)) queue.append((new_x, new_y, moves + 1)) return -1"},{"question":"Given an integer n and a boolean isEven, create an array nums of length n where nums[i] is the ith positive even number if isEven is true, otherwise nums[i] is the ith positive odd number. Return the sum of all elements in the nums array. Example 1: Input: n = 4, isEven = true Output: 20 Explanation: Array nums is equal to [2, 4, 6, 8] and the sum is 2 + 4 + 6 + 8 = 20. Example 2: Input: n = 3, isEven = false Output: 9 Explanation: Array nums is equal to [1, 3, 5] and the sum is 1 + 3 + 5 = 9. Example 3: Input: n = 5, isEven = true Output: 30 Explanation: Array nums is equal to [2, 4, 6, 8, 10] and the sum is 2 + 4 + 6 + 8 + 10 = 30. Example 4: Input: n = 2, isEven = false Output: 4 Explanation: Array nums is equal to [1, 3] and the sum is 1 + 3 = 4. Constraints: 1 <= n <= 1000","solution":"def sum_of_elements(n, isEven): Returns the sum of the first n positive even or odd numbers based on the value of isEven. if isEven: nums = [2 * i for i in range(1, n + 1)] else: nums = [2 * i + 1 for i in range(n)] return sum(nums)"},{"question":"Problem Statement: Amy is learning about combinations and permutations in her mathematics course. She becomes curious about finding the number of unique ways to arrange a group of people into different positions. To practice, she decides to write a program that can find the number of permutations for given integers N and R, where N is the total number of people and R is the number of positions. Input Format: The first line of input contains t, the number of testcases. Then t lines follow, each line consists of two integers N and R, indicating the number of people and positions respectively. Output Format: For each testcase, output a single number which represents the number of ways to arrange N people into R positions. Since the answer can be large, output the value of count % 1000000007 (i.e., the remainder when the count is divided by 10^9 + 7). Input Constraints: 1 ≤ t ≤ 100 1 ≤ N ≤ 1000 1 ≤ R ≤ N SAMPLE INPUT 2 5 3 4 4 SAMPLE OUTPUT 60 24 Explanation: For the first input, there are 60 ways to arrange 5 people into 3 positions. For the second input, there are 24 ways to arrange 4 people into 4 positions. The results are provided modulo 10^9 + 7.","solution":"def permutations(n, r): Returns the number of permutations of n items taken r at a time. MOD = 1000000007 if r > n: return 0 result = 1 for i in range(n, n-r, -1): result = (result * i) % MOD return result def solve_permutations(test_cases): results = [] for n, r in test_cases: results.append(permutations(n, r)) return results if __name__ == \\"__main__\\": t = int(input().strip()) test_cases = [tuple(map(int, input().strip().split())) for _ in range(t)] results = solve_permutations(test_cases) for result in results: print(result)"},{"question":"You are given a list of integers. Your task is to determine if it is possible to reorder the list so that each element at index `i` (0-based) is not equal to `i % k`. If it is possible, return one such reordering. If not, return \\"No Solution\\". -----Constraints----- - 1 leq len(list) leq 100 - 1 leq k leq len(list) - The elements in the list are integers and may contain duplicates. -----Input----- The input is given from Standard Input in the following format: list k -----Output----- If it is possible to reorder the list to satisfy the condition, print \\"Yes\\" on the first line and the reordered list on the second line. If it is not possible, print \\"No Solution\\". The reordered list should be space-separated integers. -----Sample Input----- [1, 2, 3, 4, 5] 3 -----Sample Output----- Yes 2 3 1 5 4 In the given output, no element at index `i` equals `i % k`: - 2 % 3 = 2 (index 0) - 3 % 3 = 0 (index 1) - 1 % 3 = 1 (index 2) - 5 % 3 = 2 (index 3) - 4 % 3 = 1 (index 4) If no such reordering is possible, the output should be: No Solution","solution":"def reorder_list(lst, k): lst_len = len(lst) if k == 1 and lst_len > 1: # If k == 1 and list has more than one item, it\'s impossible to meet the condition return \\"No Solution\\" # Sort the list to easily compare elements lst_sorted = sorted(lst) # Try to create a valid reordering for i in range(lst_len): if lst_sorted[i] == i % k: # Swap with the next element if possible if i + 1 < lst_len and lst_sorted[i + 1] != (i % k): lst_sorted[i], lst_sorted[i + 1] = lst_sorted[i + 1], lst_sorted[i] # Swap with the previous element if possible elif i - 1 >= 0 and lst_sorted[i - 1] != (i % k): lst_sorted[i], lst_sorted[i - 1] = lst_sorted[i - 1], lst_sorted[i] else: return \\"No Solution\\" return f\\"Yesn{\' \'.join(map(str, lst_sorted))}\\""},{"question":"A robot is situated in a grid of dimensions N x M and is initially located at the top-left corner (0, 0). It can move to four possible directions: up, down, left, and right. However, there are obstacles in the grid and the robot cannot move to the cells containing obstacles. The goal is to determine the number of unique paths the robot can take to reach the bottom-right corner (N-1, M-1). Write a function to compute this number. The function should return the number of unique paths modulo 10^9 + 7. Input format The first line of the input contains two space-separated integers N and M. The next N lines each contain M characters, where each character is either \'.\' (representing an empty cell) or \'#\' (representing an obstacle). Output format Print a single integer which is the number of unique paths from the top-left to the bottom-right corner, modulo 10^9 + 7. If there is no possible path, print 0. Constraints 1 ≤ N, M ≤ 1000 SAMPLE INPUT 3 3 ... .#. ... SAMPLE OUTPUT 2 Explanation For the sample test case, the two unique paths to reach the bottom-right corner are: 1. Down -> Down -> Right -> Right 2. Right -> Right -> Down -> Down","solution":"def unique_paths_with_obstacles(grid): MOD = 10**9 + 7 N = len(grid) M = len(grid[0]) # Edge case where start or end is blocked if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 # Start point for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[-1][-1]"},{"question":"A teacher has provided an assignment where each student must code their own implementation of a simple sorting algorithm. One of the students, Alex, decided to use the Bubble Sort algorithm to sort a list of integers in ascending order. However, Alex has accidentally swapped two consecutive elements in the provided list before running the Bubble Sort algorithm and now needs help in identifying the positions of those elements. Given a list of integers, determine the positions of the swapped elements. If more than one pair of consecutive elements appear to be swapped, return the positions of the first pair from the left. ------ Input Format ------ The first line contains an integer N, representing the size of the list. The second line contains N space-separated integers, representing the list to be sorted. ------ Output Format ------ Output two integers in a single line - the 1-based positions of the swapped elements. ------ Constraints ------ 2 leq N leq 100 1 leq A[i] leq 1000 ------ Sample Input 1 ------ 5 3 2 6 4 8 ------ Sample Output 1 ------ 1 2 ------ explanation 1 ------ In the given list, 3 and 2 are out of order and swapped, hence their positions 1 and 2 are returned. ------ Sample Input 2 ------ 6 1 5 3 4 2 7 ------ Sample Output 2 ------ 2 3 ------ explanation 2 ------ In the given list, the first occurrence of a swapped pair is between 5 and 3 which are at positions 2 and 3. ------ Sample Input 3 ------ 4 1 2 3 4 ------ Sample Output 3 ------ -1 -1 ------ explanation 3 ------ In the given list, no consecutive elements are found to be swapped, so the output is -1 -1. ------ Sample Input 4 ------ 3 3 1 2 ------ Sample Output 4 ------ 1 2 ------ explanation 4 ------ In the given list, 3 and 1 are out of order and swapped, hence their positions 1 and 2 are returned.","solution":"def find_swapped_positions(arr): Function to find the first pair of consecutive swapped elements in a list. Parameters: arr (list): List of integers Returns: tuple: A tuple with two integers representing the 1-based positions of the swapped elements. If no swapped elements found, returns (-1, -1). for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return (i + 1, i + 2) return (-1, -1)"},{"question":"Write a function Write a function that takes a list of strings representing sentences and returns a list of words that are common to all sentences. The words should be returned in the order they first appear in the first sentence. # Examples ```python [\\"hello world\\", \\"hello there\\", \\"hello hello world\\"] --> [\\"hello\\"] [\\"what a beautiful day\\", \\"a beautiful evening\\", \\"the day is beautiful\\"] --> [\\"beautiful\\"] [\\"apple orange banana\\", \\"grape banana apple\\", \\"berry apple\\"] --> [\\"apple\\"] ``` # Notes - You can assume the strings only contain lowercase alphabetical characters and spaces. - Each word is separated by a single space. - If no words are common to all sentences, return an empty list.","solution":"def common_words(sentences): Takes a list of strings representing sentences and returns a list of words that are common to all sentences in the order they first appear in the first sentence. if not sentences: return [] # Split the first sentence into words first_sentence_words = sentences[0].split() # Create a set of common words which initially contains all words from the first sentence common_set = set(first_sentence_words) # Iterate through the remaining sentences for sentence in sentences[1:]: # Update common_set to keep only words that are in the current sentence common_set &= set(sentence.split()) # Filter words from the first sentence in the order they first appeared return [word for word in first_sentence_words if word in common_set]"},{"question":"A famous software company is conducting a coding competition where participants are required to solve programming problems within a time limit. Each participant can submit multiple solutions during the competition. Each submission has a score representing its correctness and efficiency, but only the best score for every participant will be considered. The organizers want to know the best score achieved by each participant at the end of the competition. As a developer, you are tasked with writing a program to find the highest score for each participant. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of submissions. - The next N lines each contain two space-separated integers P_i and S_i. - P_i is the participant’s unique identifier (ID). - S_i is the score of the participant’s submission. -----Output----- For each test case, print the highest score achieved by each participant. The output for each test case should be formatted as: - The first line contains an integer M denoting the number of unique participants in that test case. - The following M lines each contain two space-separated integers P_i and the highest score S_i for that participant. Output the participants’ information sorted by their IDs in ascending order. -----Constraints----- - 1 le T le 1000 - 1 le N le 100,000 - 1 le P_i le 100,000 - 1 le S_i le 100,000 - The sum of N over all test cases does not exceed 10^6 -----Example Input----- 2 5 1 85 2 90 1 95 3 80 2 92 4 4 75 4 85 4 80 4 90 -----Example Output----- 3 1 95 2 92 3 80 1 4 90","solution":"def find_best_scores(test_cases): results = [] for case in test_cases: N = case[0] submissions = case[1] best_scores = {} for participant, score in submissions: if participant not in best_scores: best_scores[participant] = score else: best_scores[participant] = max(best_scores[participant], score) sorted_results = sorted(best_scores.items()) results.append((len(sorted_results), sorted_results)) return results"},{"question":"Write a function that takes a list of positive integers and returns the highest possible product that can be achieved by multiplying exactly three of the integers. The function should handle negative numbers as well, and consider the highest product of three numbers including negative ones. Example ```R highest_product([1, 2, 3, 4, 5]) == 60 # 3*4*5 highest_product([-10, -10, 1, 3, 2, 5]) == 500 # -10 * -10 * 5 ``` ```python highest_product([1, 2, 3, 4, 5]) == 60 # 3*4*5 highest_product([-10, -10, 1, 3, 2, 5]) == 500 # -10 * -10 * 5 ``` Note: The list will always contain at least three integers.","solution":"def highest_product(nums): Returns the highest possible product that can be achieved by multiplying exactly three of the integers. if len(nums) < 3: raise ValueError(\\"The list must contain at least three integers\\") nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Simon is editing a large text file with the goal of cleaning up any unnecessary whitespace. Specifically, he wants to remove all the leading and trailing whitespace from each line, collapse multiple spaces within each line into a single space, and ensure that the file contains no blank lines. Write a program that processes an input text file in the manner described. For simplicity, assume that the text file is represented as a list of strings, where each string is a line from the file. -----Input----- The input consists of a list of strings, where each string represents a line from the text file. -----Output----- Output the cleaned-up version of the text file, also as a list of strings. -----Example----- Sample Input: [ \\" This is a sample text. \\", \\" Here is another line. \\", \\" \\", \\"\\", \\" And yet another one. \\" ] Sample Output: [ \\"This is a sample text.\\", \\"Here is another line.\\", \\"And yet another one.\\" ]","solution":"def clean_text_file(lines): This function takes a list of strings, where each string represents a line from a text file. It removes leading and trailing whitespace from each line, collapses multiple spaces into a single space, and removes any blank lines. cleaned_lines = [] for line in lines: cleaned_line = \' \'.join(line.strip().split()) if cleaned_line: cleaned_lines.append(cleaned_line) return cleaned_lines"},{"question":"You are developing a new kind of text editor and you want to add a feature called \\"smart indent.\\" This feature will automatically align indentation based on specific rules for a programming language. You are given a series of code lines, each line having some leading spaces (indentation) and ending with a semicolon. The indentation of each line is expected to be a multiple of 4 spaces. However, some lines might be incorrectly indented. Your task is to write a function that adjusts the indentation of each line such that they follow the smart indent rules. The smart indent rules specify: 1. Each code block starts after a keyword and gets one additional level of indentation. 2. Code blocks are indicated by the keywords `START_BLOCK` and `END_BLOCK`. Specifically, for every `START_BLOCK`, the following lines should be indented one additional level until an `END_BLOCK` is encountered. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. Each test case starts with an integer n (1 le n le 100) — the number of lines in the code. Then follows n lines of code with leading spaces and ending with a semicolon. -----Output----- For each test case, output the corrected code lines with the proper indentation. -----Example----- Input 2 3 START_BLOCK; statement1; END_BLOCK; 5 START_BLOCK; statement1; START_BLOCK; statement2; END_BLOCK; END_BLOCK; Output START_BLOCK; statement1; END_BLOCK; START_BLOCK; statement1; START_BLOCK; statement2; END_BLOCK; END_BLOCK; Note: 1. Each code block should exactly follow the indentation rules and be a multiple of 4 spaces. 2. `START_BLOCK` increases indentation by one level (4 spaces). 3. `END_BLOCK` decreases indentation by one level (4 spaces).","solution":"def smart_indent(t, test_cases): results = [] for case in test_cases: n, lines = case indented_lines = [] indent_level = 0 for line in lines: line = line.strip() # remove leading and trailing spaces if line == \'END_BLOCK;\': indent_level -= 1 indented_lines.append(\' \' * indent_level + line) if line == \'START_BLOCK;\': indent_level += 1 results.append(indented_lines) return results # Sample usage t = 2 test_cases = [ (3, [ \\"START_BLOCK;\\", \\" statement1;\\", \\"END_BLOCK;\\" ]), (5, [ \\"START_BLOCK;\\", \\" statement1;\\", \\" START_BLOCK;\\", \\" statement2;\\", \\" END_BLOCK;\\", \\"END_BLOCK;\\" ]) ] results = smart_indent(t, test_cases) for res in results: print(\\"n\\".join(res)) print()"},{"question":"Implement a function `mergeSortedArrays(array1, array2)` that takes two sorted arrays of integers and merges them into a single sorted array. The merged array should contain all elements from both arrays in sorted order. The function should not use any built-in sort functions but should leverage the fact that the input arrays are already sorted. # Function Signature: ```python def mergeSortedArrays(array1, array2): pass ``` # Input: 1. `array1`: A list of integers sorted in ascending order (can be empty). 2. `array2`: A list of integers sorted in ascending order (can be empty). # Output: - A list of integers containing all elements from `array1` and `array2`, sorted in ascending order. # Example: ```python array1 = [1, 3, 5, 7] array2 = [2, 4, 6, 8] mergeSortedArrays(array1, array2) # returns [1, 2, 3, 4, 5, 6, 7, 8] ``` # Example: ```python array1 = [0, 2, 4] array2 = [1, 3, 5] mergeSortedArrays(array1, array2) # returns [0, 1, 2, 3, 4, 5] ``` # Constraints: - The input arrays can be of different lengths, and either (or both) can be empty. - Do not use any built-in sort functions or methods to merge the arrays. # Note: - Maintain the time complexity of O(n + m), where n and m are the lengths of the input arrays. - The solution should be efficient in handling large arrays.","solution":"def mergeSortedArrays(array1, array2): Merges two sorted arrays into a single sorted array. Parameters: array1 (list of int): First sorted array. array2 (list of int): Second sorted array. Returns: list of int: Merged sorted array. merged = [] i, j = 0, 0 len1, len2 = len(array1), len(array2) while i < len1 and j < len2: if array1[i] <= array2[j]: merged.append(array1[i]) i += 1 else: merged.append(array2[j]) j += 1 while i < len1: merged.append(array1[i]) i += 1 while j < len2: merged.append(array2[j]) j += 1 return merged"},{"question":"Given a matrix of integers, write a function to find the \\"peak elements\\". An element is considered a peak if it is not smaller than its neighbors. For corner elements, consider only those neighbors that are available. Return a list of peak elements from the matrix. Example: ``` Matrix: [ [10, 20, 15], [21, 30, 14], [ 7, 16, 32] ] ``` Output: [30, 32] In the above matrix, 30 is greater than its adjacent values 20, 21, and 14 while 32 is greater among adjacent values 16 and 14. So, 30 and 32 are peak elements. Function Signature: ```python def find_peak_elements(matrix: List[List[int]]) -> List[int]: pass ```","solution":"from typing import List def find_peak_elements(matrix: List[List[int]]) -> List[int]: def is_peak(matrix, i, j): rows, cols = len(matrix), len(matrix[0]) value = matrix[i][j] # Check top neighbor if i > 0 and matrix[i-1][j] > value: return False # Check bottom neighbor if i < rows - 1 and matrix[i+1][j] > value: return False # Check left neighbor if j > 0 and matrix[i][j-1] > value: return False # Check right neighbor if j < cols - 1 and matrix[i][j+1] > value: return False return True peaks = [] for i in range(len(matrix)): for j in range(len(matrix[0])): if is_peak(matrix, i, j): peaks.append(matrix[i][j]) return peaks"},{"question":"A string S is called *balanced* if for every substring of S, the number of vowels is not more than the number of consonants. For the purpose of this task, consider vowels to be \'a,\' \'e,\' \'i,\' \'o,\' \'u,\' and all other alphabetical characters as consonants. You are given a string S. Your task is to determine whether S is *balanced*. ------ Input Format ------ - The first line contains an integer T — the number of test cases. Then T test cases follow. - Each test case consists of a single line containing the string S. ------ Output Format ------ For each test case, output \\"YES\\" if the string is *balanced* and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |S| ≤ 1000 S consists of only lowercase English letters. ----- Sample Input 1 ------ 3 abcde aeeiouxyz bcdf ----- Sample Output 1 ------ NO NO YES ----- Explanation 1 ------ Test Case 1: The substring \\"abcde\\" has more vowels (2) than consonants (3), hence it is not balanced. Test Case 2: For the substring \\"aeeiouxyz\\", it contains 5 vowels and 4 consonants, so it is not balanced. Test Case 3: All substrings of \\"bcdf\\" have consonants greater than vowels or no vowels at all, thus it is balanced.","solution":"def is_balanced(s): Determines if the string s is balanced. vowels = set(\'aeiou\') n = len(s) for i in range(n): for j in range(i + 1, n + 1): substring = s[i:j] vowel_count = sum(1 for char in substring if char in vowels) consonant_count = len(substring) - vowel_count if vowel_count > consonant_count: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): Processes multiple test cases. results = [] for s in test_cases: results.append(is_balanced(s)) return results"},{"question":"You are given an array of n integers a_1, a_2, dots, a_n. Your task is to determine the number of pairs (i, j) where 1 leq i < j leq n and the sum a_i + a_j is even. A sum is considered even if it is divisible by 2. -----Input----- The first line contains one integer n (1 leq n leq 3 cdot 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9) — the elements of the array. -----Output----- Print one integer — the number of pairs (i, j) such that 1 leq i < j leq n and a_i + a_j is even. -----Examples----- Input 5 1 2 3 4 5 Output 4 Input 4 2 4 6 8 Output 6 Input 6 1 3 5 7 9 11 Output 15 -----Note----- In the first test case there are four pairs: (2, 4), (2, 5), (1, 3), and (3, 5). In the second test case all combinations of pairs result in an even sum because all the numbers in the array are even. In the third test case every pair of numbers results in an even sum because all the numbers in the array are odd.","solution":"def count_even_sum_pairs(n, arr): even_count = sum(1 for x in arr if x % 2 == 0) odd_count = n - even_count # The number of ways to choose 2 out of even_count even_pairs = even_count * (even_count - 1) // 2 # The number of ways to choose 2 out of odd_count odd_pairs = odd_count * (odd_count - 1) // 2 return even_pairs + odd_pairs"},{"question":"Emma and her friends are planning a treasure hunt game. To keep track of everyone\'s final positions, she drew a map with each person starting at a unique position and ending at another unique position. Emma wants to determine if it\'s possible to trace everyone\'s movements according to certain rules. -----Task----- You are given a description of the initial and final positions of the participants in the treasure hunt game. The map consists of pairs of moves where each move indicates a person moving from one position to another. Your task is to determine if it\'s possible for everyone to start and end at their given positions without any conflicts. -----Input----- The first line of input contains two space-separated integers N and M, where 2 leq N leq 1000 and 1 leq M leq 5000. N is the number of participants, and M is the number of allowed moves. Participants are numbered 1, 2, ldots, N. The next N lines contain two space-separated integers A_i and B_i (1 leq A_i, B_i leq N) where A_i is the initial position and B_i is the final position of the i-th person. The following M lines describe pairs of integers U and V (1 leq U, V leq N) indicating that a person can move from position U to position V. Each pair of positions appears at most once in the input. -----Output----- If there is a way for everyone to start and end at their specified positions according to the given moves, output Possible. Otherwise, output Impossible. -----Examples----- Sample Input: 3 3 1 3 2 2 3 1 1 3 2 2 3 1 Sample Output: Possible Sample Input: 3 2 1 2 2 3 3 1 1 2 2 3 Sample Output: Impossible","solution":"def is_possible(N, M, positions, moves): from collections import defaultdict, deque # Dictionary to store graph adjacency list graph = defaultdict(list) # Build the graph with the given moves for U, V in moves: graph[U].append(V) # Function to perform BFS to check if target position is reachable from start position def bfs(start, target): visited = set() queue = deque([start]) while queue: current = queue.popleft() if current == target: return True for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return False # Check for each participant if their final position is reachable from their initial position for initial, final in positions: if not bfs(initial, final): return \\"Impossible\\" return \\"Possible\\""},{"question":"Write a program that checks if the given strings are palindromic numbers when interpreted as decimal (base-10) and binary (base-2). A palindromic number is one that reads the same backward as forward. You need to verify both representations for each given number. input The input consists of multiple strings, each representing a decimal number. Each number will be between 1 and 1,000,000. Input ends with EOF. The number of strings does not exceed 5. output For each input number, output \\"Yes\\" if the number is palindromic in both decimal and binary representations, otherwise output \\"No\\". Examples Input 585 5 21 65 217 Output Yes Yes No No No","solution":"def is_palindromic(s): Helper function to check if a string s is palindromic. return s == s[::-1] def check_palindromic_numbers(numbers): For each number in numbers, check if it is palindromic in both decimal and binary representations. Args: numbers (list of str): List of strings where each string is a decimal number. Returns: list of str: List of \\"Yes\\" or \\"No\\" for each corresponding input number. results = [] for num in numbers: decimal_str = num binary_str = bin(int(num))[2:] if is_palindromic(decimal_str) and is_palindromic(binary_str): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"A village has n houses numbered from 1 to n, connected by n-1 roads in such a way that there is exactly one path between any pair of houses. A special house, named capital, is located in this village and is denoted by number 1. There are m people living in this village, each in one of the n houses. Given the location of each person and the number of steps they can move each day, determine the minimum number of days required for all people to gather in the capital. Input The first line contains two integers n and m - the number of houses and the number of people respectively (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5). The second line contains n-1 space-separated pairs of integers u and v, representing a road between houses u and v. The third line contains m space-separated pairs of integers a_i and s_i, denoting that there is a person living in house a_i who can move exactly s_i steps each day. Output Print a single integer — the minimum number of days required for all people to gather in the capital. Examples Input 6 4 1 2 1 3 2 4 2 5 3 6 4 2 5 1 6 1 1 1 Output 2 Input 3 2 1 2 1 3 2 3 3 1 Output 1","solution":"from collections import deque, defaultdict def min_days_to_gather_in_capital(n, m, roads, people): Given a village with n houses connected by n-1 roads and m people living in some of the houses, determine the minimum number of days required for all people to gather in the capital at house 1. def bfs(start, graph): queue = deque([start]) distances = {start: 0} while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in distances: distances[neighbor] = distances[node] + 1 queue.append(neighbor) return distances # Graph initialization graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # BFS to find the distance of each house from the capital (house 1) distances_from_capital = bfs(1, graph) # Finding the maximum days required max_days = 0 for house, steps_per_day in people: max_days = max(max_days, (distances_from_capital[house] + steps_per_day - 1) // steps_per_day) return max_days # Sample function usage n = 6 m = 4 roads = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6)] people = [(4, 2), (5, 1), (6, 1), (1, 1)] print(min_days_to_gather_in_capital(n, m, roads, people)) # Output: 2"},{"question":"You are given a string S. Your task is to transform the string by rearranging its characters so that no two adjacent characters are same. If such transformation is not possible, return an empty string. Example 1: Input: S = \\"aab\\" Output: \\"aba\\" Explanation: Reorganized string \\"aba\\" ensures no two adjacent characters are same. Example 2: Input: S = \\"aaab\\" Output: \\"\\" Explanation: It is not possible to rearrange the characters in such a way that no two adjacent characters are same. Your Task: You do not need to read input or print anything. Your task is to complete the function reorganizeString() which takes a string S as the input parameter and returns the reorganized string or an empty string if it is not possible to reorganize. Expected Time Complexity: O(N log N), where N is the length of the string. Expected Auxiliary Space: O(N) Constraints: 1 ≤ length of S ≤ 100","solution":"import heapq from collections import Counter def reorganizeString(S): Rearrange the characters of S so that no two adjacent characters are the same. If it\'s not possible, return an empty string. count = Counter(S) max_heap = [(-value, key) for key, value in count.items()] heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] while max_heap or prev_count < 0: if not max_heap: return \\"\\" count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char = char prev_count = count + 1 return \'\'.join(result)"},{"question":"You are given a 2D grid representing a city map, where each cell contains a non-negative integer representing the number of people in that part of the city. Your task is to determine the shortest path from the top-left corner of the grid (0,0) to the bottom-right corner (M-1, N-1) that passes through cells with the maximum sum of people. From a cell (i,j), it is possible to move to any of the following cells: - Move right to (i, j+1) if j+1 < N - Move down to (i+1, j) if i+1 < M - Move diagonally to (i+1, j+1) if i+1 < M and j+1 < N Write a function that, given the grid, returns the maximum sum of people along the shortest path from the top-left to the bottom-right corner of the grid. Input Format - The first line contains two integers, M and N, denoting the number of rows and columns of the grid respectively. - The next M lines each contain N integers, representing the grid. Constraints - 1 leq M, N leq 500 - 0 leq text{people in each cell} leq 1000 Output Format Print a single integer, the maximum sum of people along the shortest path from the top-left to the bottom-right corner of the grid. Sample Input 3 3 1 2 3 4 5 6 7 8 9 Sample Output 21 Explanation The path with the maximum sum is 1 → 4 → 7 → 8 → 9, with a sum of 29.","solution":"def max_people_path(grid): M = len(grid) N = len(grid[0]) # Create a dp array to store the maximum sum of people up to each cell dp = [[0] * N for _ in range(M)] # Initialize the first cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, M): for j in range(1, N): dp[i][j] = grid[i][j] + max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) # The maximum sum path to the bottom-right corner return dp[M-1][N-1] # Example usage: # M = 3 # N = 3 # grid = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # print(max_people_path(grid)) # Output: 29"},{"question":"# Array Pair Difference You are given an array of n integers and an integer k. Your task is to write a program to determine if there are two distinct elements in the array such that their absolute difference is exactly k. # Input - The first line contains two integers n and k (2 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the number of elements in the array and the target difference respectively. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. # Output - If there are any two distinct elements in the array whose absolute difference is exactly k, print \\"Yes\\". - Otherwise, print \\"No\\". # Examples Example 1 **Input:** 5 3 1 4 7 2 9 **Output:** Yes **Explanation:** Two pairs that have a difference of 3 are (1, 4) and (4, 7). Example 2 **Input:** 5 10 1 2 3 4 5 **Output:** No **Explanation:** No two elements have a difference of 10.","solution":"def has_pair_with_difference(arr, n, k): Returns \\"Yes\\" if there are two distinct elements in the array `arr` such that their absolute difference is exactly `k`, otherwise returns \\"No\\". elements = set(arr) for num in arr: if (num + k) in elements or (num - k) in elements: return \\"Yes\\" return \\"No\\""},{"question":"Given a string with only lowercase, uppercase alphabetic characters, and spaces, remove all spaces from the string and preserve the relative order of alphabetical characters. # Constraints: - The input string S length is at most 10^4. - The output string should only contain lowercase and uppercase alphabetic characters with no spaces. # Input: - A single string S with lowercase, uppercase alphabetic characters, and spaces. # Output: - A single string with all spaces removed while preserving the order of the characters. # Example: **Input:** ``` \\"Hello World\\" ``` **Output:** ``` \\"HelloWorld\\" ``` **Explanation:** The function removes all spaces in the provided input string \\"Hello World\\" to output \\"HelloWorld\\". **Input:** ``` \\" A B C D E F G \\" ``` **Output:** ``` \\"ABCDEFG\\" ``` **Explanation:** The function removes all spaces in the provided input string \\" A B C D E F G \\" to output \\"ABCDEFG\\".","solution":"def remove_spaces(s): Removes all spaces from the input string while preserving the relative order of the alphabetic characters. :param s: Input string containing lowercase, uppercase alphabetic characters, and spaces. :return: A string with all spaces removed. return s.replace(\\" \\", \\"\\")"},{"question":"To implement a dictionary-like data structure, you should support the following operations efficiently: 1. **Insert** a key-value pair (key, value). If the key already exists, update its value. 2. **Delete** a key-value pair by its key. If the key does not exist, do nothing. 3. **Search** for a value by its key. If the key does not exist, return -1. Your task is to implement this data structure and process a series of operations accordingly. ------ Input Format ------ - The first line contains a single integer Q, representing the number of operations to be performed. - The next Q lines each contain an operation in one of the following formats: - \\"I key value\\" for Insert operation, where key is a string and value is an integer. - \\"D key\\" for Delete operation, where key is a string. - \\"S key\\" for Search operation, where key is a string. ------ Output Format ------ For each Search operation, output the corresponding value on a new line. If the key does not exist, output -1. ------ Constraints ------ - 1 ≤ Q ≤ 10^5 - 1 ≤ |key| ≤ 100 - −10^9 ≤ value ≤ 10^9 ----- Sample Input 1 ------ 6 I apple 5 I orange 10 S apple D apple S apple S orange ----- Sample Output 1 ------ 5 -1 10 ----- Explanation 1 ------ - \\"I apple 5\\": Insert \\"apple\\" with value 5. - \\"I orange 10\\": Insert \\"orange\\" with value 10. - \\"S apple\\": Search for \\"apple\\", found value 5. - \\"D apple\\": Delete \\"apple\\" key. - \\"S apple\\": Search for \\"apple\\", key not found, return -1. - \\"S orange\\": Search for \\"orange\\", found value 10.","solution":"class DictionaryDataStructure: def __init__(self): self.dict = {} def insert(self, key, value): self.dict[key] = value def delete(self, key): if key in self.dict: del self.dict[key] def search(self, key): return self.dict.get(key, -1) def process_operations(operations): dds = DictionaryDataStructure() results = [] for op in operations: parts = op.split() if parts[0] == \'I\': _, key, value = parts dds.insert(key, int(value)) elif parts[0] == \'D\': _, key = parts dds.delete(key) elif parts[0] == \'S\': _, key = parts result = dds.search(key) results.append(result) return results"},{"question":"Mountain Peak Element Finder You are given an integer array nums of length N. A peak element is an element that is greater than its neighbors. Given that the array may contain multiple peaks, find any peak element and return its index. If the array contains multiple peak elements, return the index of any one of them. Note: - The array may contain multiple peak elements, and any one of them is acceptable. - Consider edge conditions, where elements on the boundaries still need to be checked appropriately for being a peak relative to their single neighbor. ------Constraints----- - All input values are integers. - 1 leq N leq 1000 - -10^9 leq nums[i] leq 10^9 ------Input----- Input is given from Standard Input in the following format: N nums_0 nums_1 ... nums_(N-1) ------Output----- Print a single integer corresponding to the index of any one peak element. ------Sample Input----- 6 1 2 3 1 5 6 ------Sample Output----- 2 Both 3 and 6 are peak elements, and index 2 corresponds to peak element 3.","solution":"def find_peak_element(nums): Find a peak element and return its index. n = len(nums) # Early return conditions if n == 1: return 0 if nums[0] > nums[1]: return 0 if nums[n-1] > nums[n-2]: return n-1 # Binary search for peak element left, right = 0, n-1 while left < right: mid = (left + right) // 2 if nums[mid] < nums[mid + 1]: left = mid + 1 else: right = mid return left"},{"question":"Given a linked list, your task is to complete the function `swapNodes()` which takes the head of a singly linked list and two integers, `x` and `y`, as inputs. The function should swap the nodes containing values `x` and `y` in the linked list. Return the head of the updated list. If either `x` or `y` is not present in the linked list, return the linked list without any changes. # Example 1: ``` Input: head: 1 -> 2 -> 3 -> 4 -> 5 x: 2, y: 4 Output: head: 1 -> 4 -> 3 -> 2 -> 5 Explanation: The nodes with values 2 and 4 are swapped. ``` # Example 2: ``` Input: head: 1 -> 2 -> 3 -> 4 -> 5 x: 2, y: 6 Output: head: 1 -> 2 -> 3 -> 4 -> 5 Explanation: The node with value 6 is not in the list, so no swap is made. ``` # Constraints: - 1 <= T <= 50 - 1 <= N <= 100 - 0 <= x, y <= 100 # Your Task: You do not need to read input or print anything. Your task is to complete the function `swapNodes()` which accepts three arguments: the head of the linked list, and the two integers `x` and `y`. The function should return the head of the modified linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def swapNodes(head, x, y): if x == y: return head # If head is None, no need to process if not head: return head # Initialize previous and current pointers prevX, currX = None, head while currX and currX.value != x: prevX = currX currX = currX.next prevY, currY = None, head while currY and currY.value != y: prevY = currY currY = currY.next # If either x or y is not present, return head if not currX or not currY: return head # If x is not head of linked list if prevX: prevX.next = currY else: head = currY # If y is not head of linked list if prevY: prevY.next = currX else: head = currX # Swap next pointers currX.next, currY.next = currY.next, currX.next return head # Helper function to create a linked list from a list for testing purposes def create_linked_list(arr): if not arr: return None head = ListNode(arr[0]) current = head for value in arr[1:]: current.next = ListNode(value) current = current.next return head # Helper function to convert a linked list back to a list for testing purposes def linked_list_to_list(head): result = [] current = head while current: result.append(current.value) current = current.next return result"},{"question":"Given a positive integer N, your task is to determine the smallest number of operations required to make the number 1. In each operation, you can either subtract 1 from N, divide N by 2 if N is divisible by 2, or divide N by 3 if N is divisible by 3. Example 1: Input: N = 10 Output: 3 Explanation: Step 1: 10 / 2 = 5 Step 2: 5 - 1 = 4 Step 3: 4 / 2 = 2 Step 4: 2 / 2 = 1 All operations: [10 / 2, 5 - 1, 4 / 2, 2 / 2] Thus, the minimum operations is 3. Example 2: Input: N = 15 Output: 4 Explanation: Step 1: 15 / 3 = 5 Step 2: 5 - 1 = 4 Step 3: 4 / 2 = 2 Step 4: 2 / 2 = 1 All operations: [15 / 3, 5 - 1, 4 / 2, 2 / 2] Thus, the minimum operations is 4. Your Task: You do not need to read input or print anything. Your task is to complete the function minOperations() which takes a number N as an input parameter and returns the minimum number of operations to make N equal to 1. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^5","solution":"def minOperations(N): Returns the minimum number of operations to reduce N to 1. if N == 1: return 0 # Initialize a list to store the minimum operations count for each number up to N dp = [float(\'inf\')] * (N + 1) dp[1] = 0 # It takes 0 operations to make 1 from 1 for i in range(2, N + 1): dp[i] = dp[i - 1] + 1 # Subtract 1 operation if i % 2 == 0: dp[i] = min(dp[i], dp[i // 2] + 1) # Divide by 2 operation if i % 3 == 0: dp[i] = min(dp[i], dp[i // 3] + 1) # Divide by 3 operation return dp[N]"},{"question":"A team of sorcerers is assembling to perform a powerful spell. Each sorcerer can cast a spell that extends their life force for an additional X hours. However, the spell grows weaker with each subsequent cast, reducing the effective hours gained by half each time the same spell is cast consecutively. Given the initial life-force extension provided by each spell, X, compute the total life-force extension that will be achieved if the spell is cast N times consecutively. INPUT: The first line contains the number of test cases T, The next T lines follows. Each line contains two integers N and X, where N is the number of times the spell is cast consecutively and X is the initial life-force extension provided by the spell. OUTPUT: For each test case, output the total life-force extension in hours. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 30 1 ≤ X ≤ 1000 SAMPLE INPUT 2 1 100 3 200 SAMPLE OUTPUT 100 350","solution":"def total_life_force_extension(N, X): Computes the total life-force extension achieved when a spell is cast N times consecutively. The spell effectiveness halves with each consecutive cast. Parameters: N (int): The number of times the spell is cast consecutively. X (int): The initial life-force extension provided by each spell. Returns: int: The total life-force extension in hours. total_extension = 0 current_extension = X for _ in range(N): total_extension += current_extension current_extension /= 2 return int(total_extension) def process_input_output(T, cases): results = [] for i in range(T): N, X = cases[i] results.append(total_life_force_extension(N, X)) return results"},{"question":"You are tasked with creating a pathfinding algorithm for a grid-based maze. The grid is a rectangular array of tiles where each tile is either traversable or blocked. The robot can move up, down, left, or right by one tile at a time, but cannot move diagonally or pass through blocked tiles. The robot starts at the top-left corner of the maze and needs to reach the bottom-right corner. If there is no valid path, the robot should return that it\'s impossible to reach the destination. Input The input begins with two integers m and n (2 <= m, n <= 100) representing the size of the maze in terms of its rows and columns. Following this is the maze itself, described by m lines each containing n characters. Each character is either a \'.\' representing a traversable tile or a \'#\' representing a blocked tile. Output The output should be a single line. If a path exists from the top-left corner to the bottom-right corner, output the number of steps in the shortest path. If no such path exists, output the word \\"IMPOSSIBLE\\". Example Input 5 5 ..... ..#.. ..#.. ..#.. ..... Output 8","solution":"from collections import deque def shortest_path_in_maze(m, n, maze): Returns the number of steps in the shortest path from the top-left corner to the bottom-right corner in the given maze or \\"IMPOSSIBLE\\" if there is no path. if maze[0][0] == \'#\' or maze[m-1][n-1] == \'#\': return \\"IMPOSSIBLE\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set([(0, 0)]) while queue: r, c, steps = queue.popleft() if r == m - 1 and c == n - 1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < m and 0 <= nc < n and (nr, nc) not in visited and maze[nr][nc] == \'.\': visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return \\"IMPOSSIBLE\\" # Example usage: m, n = 5, 5 maze = [ \\".....\\", \\"..#..\\", \\"..#..\\", \\"..#..\\", \\".....\\" ] shortest_path_in_maze(m, n, maze) # Should return 8"},{"question":"# Task Given an array of integers `arr` where every element appears twice except for one element, find the element that appears only once. # Example For `arr = [2, 2, 1]`, the result should be `1` For `arr = [4, 1, 2, 1, 2]`, the result should be `4` For `arr = [1, 1, 2, 2, 3]`, the result should be `3` # Input/Output - `[input]` array of integers `arr` An array of integers `1 ≤ arr.length ≤ 2000, 0 ≤ arr[i] ≤ 1000` where every element appears twice except for one element. - `[output]` an integer The integer that appears only once in the array.","solution":"def find_single_number(arr): Given an array of integers where every element appears twice except for one element, find the element that appears only once. result = 0 for num in arr: result ^= num return result"},{"question":"problem Write a function `find_missing_number` that takes a list of unique integers between 1 and n (inclusive) with one number missing from the list. The function should return the missing number. Function Signature: ```python def find_missing_number(nums: List[int]) -> int: pass ``` **Input:** - A single list of unique integers `nums` where `1 ≤ len(nums) < n ≤ 100000`. - Each integer in the list is unique and within the range from 1 to n, inclusive, except for one missing integer. **Output:** - The missing integer. **Examples:** Input: ```python [3, 7, 1, 2, 8, 4, 5] ``` Output: ```python 6 ``` Input: ```python [1, 2, 4, 6, 3, 7, 8] ``` Output: ```python 5 ``` **Explanation:** In Example 1, the numbers should be from 1 to 8, but the number 6 is missing, so the function should return 6. In Example 2, the numbers should be from 1 to 8, but the number 5 is missing, so the function should return 5.","solution":"from typing import List def find_missing_number(nums: List[int]) -> int: Returns the missing number from 1 to n in the given list of numbers. n = len(nums) + 1 total_sum = n * (n + 1) // 2 # Sum of all numbers from 1 to n current_sum = sum(nums) # Sum of numbers in the array return total_sum - current_sum"},{"question":"A company has decided to re-license some software packages under new licensing terms. To ensure that the software licenses are compatible with each other and the company\'s existing licenses, you are tasked with checking compliance for a set of license strings. A license string consists of lowercase English letters only. You want to determine if any license string is a substring of any other license string in the provided list of license strings. ------ Input: ------ First line of input contains a single integer N, the number of license strings. Each of the next N lines contain a single string L composed of only lowercase English alphabet. ------ Output: ------ For each test case, output on a separate line: \\"YES\\" if any license string is a substring of any other license string in the list and \\"NO\\" otherwise. ------ Constraints: ------ 1 ≤ N ≤ 100 1 ≤ |L| ≤ 1000, where |L| denotes the length of L ----- Sample Input 1 ----- 4 abcd efgh ab ef ----- Sample Output 1 ----- YES ----- Sample Input 2 ----- 3 aaaa aaa aa ----- Sample Output 2 ----- YES ----- Sample Input 3 ----- 3 cat dog fish ----- Sample Output 3 ----- NO Your task is to write a program that can answer if any license string in the list is a substring of another license string.","solution":"def check_license_compliance(n, license_list): Determine if any license string is a substring of any other license string. Parameters: n (int): Number of license strings. license_list (list): List containing license strings. Returns: str: \\"YES\\" if any license string is a substring of any other license string, \\"NO\\" otherwise. for i in range(n): for j in range(n): if i != j and license_list[i] in license_list[j]: return \\"YES\\" return \\"NO\\" # Example usage: # N = 4 # license_list = [\\"abcd\\", \\"efgh\\", \\"ab\\", \\"ef\\"] # print(check_license_compliance(N, license_list)) # Output should be \\"YES\\""},{"question":"Write a function that takes a single integer parameter, `n`, and returns an array of the first `n` prime numbers. A prime number is a positive integer greater than 1 that has no positive divisors other than 1 and itself. For example, given `n = 5`, the function should return: generatePrimes(5) => [2, 3, 5, 7, 11] And for `n = 10`, the function should return: generatePrimes(10) => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]","solution":"def generatePrimes(n): Returns an array of the first n prime numbers. if n <= 0: return [] primes = [] candidate = 2 while len(primes) < n: is_prime = True for prime in primes: if prime * prime > candidate: break if candidate % prime == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 1 return primes"},{"question":"Alice likes to play with strings, and recently she has started experimenting with palindrome queries. For a given string, she wants to answer a series of queries about whether any substring formed by certain indices is a palindrome or not. Unfortunately, she finds it tedious to check every possible substring manually. Can you help her automate this process? A string is a palindrome if it reads the same backwards as forwards. # Input: - The first line contains a string `s` of length `l` (1 le l le 10^5), consisting of lowercase English letters. - The second line contains an integer `q` (1 le q le 2cdot10^4) which represents the number of queries. - The following `q` lines each contain two integers `a` and `b` (1 le a le b le l) which represent indices (1-based) specifying the substring of `s`. # Output: - For each query, output \\"Yes\\" if the specified substring is a palindrome, otherwise output \\"No\\". # Examples: Input ``` abacaba 3 1 3 2 4 1 7 ``` Output ``` Yes No Yes ``` # Note: In the first example: - For the first query (1,3), the substring is \\"aba\\", which is a palindrome. - For the second query (2,4), the substring is \\"bac\\", which is not a palindrome. - For the third query (1,7), the substring is \\"abacaba\\", which is a palindrome. # Constraints: - The string length l is between 1 and 10^5. - The number of queries q is between 1 and 2cdot10^4.","solution":"def is_palindrome_substring(s, queries): Given a string `s` and a list of queries, each query is a pair of integers (a, b) representing a 1-based substring of `s` (from index a to b), this function returns a list of \\"Yes\\" or \\"No\\" indicating whether the substring is a palindrome. results = [] for a, b in queries: substring = s[a-1:b] if substring == substring[::-1]: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"A software company is developing a text editor that provides formatting suggestions based on the occurrences of characters in a given set of strings. As a software developer of the company, you are tasked with implementing a feature to compute the characters\' frequencies across multiple strings. Define the function `char_frequencies(strings: List[str]) -> Dict[str, int]` where the input is a list of strings and the output is a dictionary containing the frequency count of each character across all the input strings. **Example:** Input: ```python [\\"hello\\", \\"world\\", \\"leetcode\\"] ``` Output: ``` { \'h\': 1, \'e\': 4, \'l\': 4, \'o\': 3, \'w\': 1, \'r\': 1, \'d\': 2, \'c\': 1, \'t\': 1 } ``` **Implementation Requirements:** 1. Convert all characters to lowercase to ensure case insensitivity. 2. Ignore any non-alphabetic characters. 3. Ensure the function runs efficiently even for larger input sizes. **Input:** A list of strings `strings` where 1 leq |strings| leq 10^4 and 1 leq |strings[i]| leq 10^3. **Output:** A dictionary with keys as characters and values as their respective frequency counts in the provided strings. # Constraints: - The total length of all strings combined will not exceed 10^6 characters. - Characters are restricted to English alphabets (both upper and lowercase). **Example Usage:** ```python strings = [\\"Example\\", \\"String\\", \\"Data\\"] print(char_frequencies(strings)) ``` Output: ``` { \'e\': 2, \'x\': 1, \'a\': 3, \'m\': 1, \'p\': 1, \'l\': 1, \'s\': 1, \'t\': 2, \'r\': 1, \'i\': 1, \'n\': 1, \'g\': 1 } ``` # Notes: - Implement your solution with optimal performance considerations. - Unit tests should be written to verify the correctness of the solution.","solution":"from typing import List, Dict from collections import defaultdict def char_frequencies(strings: List[str]) -> Dict[str, int]: Computes the frequency of each character across a list of strings. Parameters: strings (List[str]): List of strings to analyze. Returns: Dict[str, int]: Dictionary with character frequencies. frequency_dict = defaultdict(int) for string in strings: for char in string: if char.isalpha(): # Ensure only alphabetic characters are counted frequency_dict[char.lower()] += 1 return dict(frequency_dict)"},{"question":"You are given a string containing only lowercase alphabets. You need to determine whether it is possible to rearrange the letters of the string such that no two adjacent characters are the same. Write a function `canRearrange` that takes a single string as input and returns `true` if it is possible to rearrange the string to meet the condition, otherwise return `false`. **Examples:** 1. `canRearrange(\\"aabb\\")` should return `true`. One possible rearrangement is \\"abab\\". 2. `canRearrange(\\"aaab\\")` should return `false`. It is not possible to rearrange to avoid three consecutive \'a\'s. 3. `canRearrange(\\"abc\\")` should return `true`. One possible rearrangement is \\"abc\\". **Function Signature:** ```python def canRearrange(s: str) -> bool: # your code here ``` **Constraints:** - The input string will have 1 to 10^4 characters. - The input string will only contain lowercase English letters.","solution":"def canRearrange(s: str) -> bool: from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Find the maximum frequency of any character max_freq = max(freq.values()) # Calculate the size of the remaining portion of the string n = len(s) - max_freq # Check if the maximum frequency character can be placed such that no two adjacent are the same if max_freq - 1 <= n: return True else: return False"},{"question":"Given a list of `n` integers and a positive integer `k`, determine if there is a pair of distinct elements in the list such that their sum is equal to `k`. Return 1 if such a pair exists, otherwise return 0. Example 1: Input: arr = [10, 15, 3, 7] k = 17 Output: 1 Explanation: 10 + 7 = 17, so the pair (10, 7) exists. Example 2: Input: arr = [1, 2, 3, 4, 5] k = 10 Output: 0 Explanation: There is no pair of distinct elements that sum to 10. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `hasPairWithSum()` which takes an integer list `arr` and an integer `k` as input parameters and returns 1 if there exists a pair with sum `k`, otherwise returns 0. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n ≤ 10^6 1 ≤ arr[i] ≤ 10^6 1 ≤ k ≤ 10^6","solution":"def hasPairWithSum(arr, k): seen = set() for num in arr: if k - num in seen: return 1 seen.add(num) return 0"},{"question":"Write a function `find_parking_slot` to help a parking lot attendant locate the closest parking slot available to the entrance of the parking lot. The entrance is located at position `(0, 0)` in a grid representing the parking lot. Each parking slot is identified by its coordinates `(x, y)` in the grid. # Input: - The first input line contains an integer `N` representing the number of available parking slots. (1 ≤ N ≤ 1000) - The next `N` lines contain two space-separated integers `x` and `y` representing the coordinates of each available parking slot. # Output: - Return the coordinates of the parking slot closest to the entrance in the format `x y`. - If there are multiple slots with the same shortest distance, return the one with the smallest `x` value. If there is still a tie, return the one with the smallest `y` value. # Example: Input: ``` 5 3 4 1 2 3 3 2 2 1 1 ``` Output: ``` 1 1 ``` # Explanation: Among the given coordinates, `(1, 1)` is the closest to `(0, 0)` with a distance of `sqrt(1^2 + 1^2) = sqrt(2)`. The next closest points are `(1, 2)` and `(2, 2)`, but `(1, 1)` has the smallest `x` value among all closest points. Therefore, the output should be `(1, 1)`. # Note: - The distance between two points `(x1, y1)` and `(x2, y2)` can be calculated using the formula `sqrt((x2 - x1)^2 + (y2 - y1)^2)`. - The function should prioritize minimizing `x` and `y` values in case of ties.","solution":"def find_parking_slot(N, slots): Finds the closest parking slot to entrance (0, 0). Args: N : int : number of available parking slots slots : list of tuples : each tuple contains two integers (x, y) representing a parking slot Returns: tuple : coordinates of the closest parking slot def distance(slot): x, y = slot return x**2 + y**2 # Using squared distance to avoid floating-point arithmetic closest_slot = min(slots, key=lambda slot: (distance(slot), slot[0], slot[1])) return closest_slot"},{"question":"You are working as a software engineer at a hypothetical factory with n machines and m tasks to be executed. Each machine has a specific capacity, defined as the maximum number of tasks it can execute simultaneously. Each task has two attributes: - **priority**, which determines the order in which tasks should be executed (higher priority tasks should be executed first, if possible), - **required time**, the time required to complete the task. The factory follows these protocols for executing tasks: - Machines execute tasks as long as their capacity allows. - Tasks are executed in priority order. If tasks have the same priority, they will be executed in any order. - Each task will be assigned to the first available machine that has not reached its capacity, according to the priority order. Your task is to simulate the execution of tasks given the current state of the factory and output the order in which tasks start execution. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of machines and the number of tasks. The second line contains n integers indicating the capacities of the respective machines. Each of the next m lines contains two integers p and t (1 ≤ p ≤ 1000, 1 ≤ t ≤ 1000), which represent the priority and required time for each task. Output Output the order of task indices (1-based) in which they start execution. Example Input 3 5 2 1 3 5 7 3 2 1 5 4 3 3 4 Output 1 4 2 5 3 Explanation In this example: - Machine 1 has a capacity of 2 tasks. - Machine 2 has a capacity of 1 task. - Machine 3 has a capacity of 3 tasks. Tasks are given in the following order with their priority and required time: 1. Task 1: Priority 5, Time 7 2. Task 2: Priority 3, Time 2 3. Task 3: Priority 1, Time 5 4. Task 4: Priority 4, Time 3 5. Task 5: Priority 3, Time 4 They are to be sorted by priority first, then assigned to machines in the order of availability and priority. Task 1 starts execution first on Machine 1, Task 4 next on Machine 1, Task 2 on Machine 2, Task 5 on Machine 3, and finally, Task 3 on Machine 3.","solution":"def execute_tasks(n, m, machine_capacities, tasks): Returns the order of task indices in which they start execution. Parameters: n (int): Number of machines m (int): Number of tasks machine_capacities (list of int): Capacities of the machines tasks (list of tuples): Each tuple contains priority and required time of a task Returns: list of int: Order of task indices in which they start execution # Create a list of tasks with indices indexed_tasks = [(i+1, tasks[i][0], tasks[i][1]) for i in range(m)] # Sort tasks by priority (descending) and by index for stable sort order sorted_tasks = sorted(indexed_tasks, key=lambda x: (-x[1], x[0])) # Initialize machine capacities left machines = [machine_capacities[i] for i in range(n)] # List to store the order of task indices order_of_execution = [] # Assign tasks to machines for task in sorted_tasks: task_index, priority, required_time = task for i in range(n): if machines[i] > 0: # Assign task to the machine and reduce its capacity order_of_execution.append(task_index) machines[i] -= 1 break return order_of_execution # Example usage n = 3 m = 5 machine_capacities = [2, 1, 3] tasks = [(5, 7), (3, 2), (1, 5), (4, 3), (3, 4)] print(execute_tasks(n, m, machine_capacities, tasks)) # Output: [1, 4, 2, 5, 3]"},{"question":"You are given a string s consisting of lowercase alphabets and an integer k. Your task is to check if the string s can be rearranged such that no two adjacent characters are the same, and each character appears at most k times consecutively. If such an arrangement is possible, return the rearranged string; otherwise, return an empty string. Example 1: Input: s = \\"aabbcc\\" k = 2 Output: \\"abcabc\\" Explanation: One possible arrangement is \\"abcabc\\". Here, no two adjacent characters are the same and each character appears exactly 2 times consecutively. Example 2: Input: s = \\"aaabc\\" k = 2 Output: \\"abaca\\" Explanation: One possible arrangement is \\"abaca\\". Here, no two adjacent characters are the same and no character appears more than 2 times consecutively. Example 3: Input: s = \\"aaabc\\" k = 3 Output: \\"\\" Explanation: It is not possible to rearrange the string to have no two adjacent characters the same and each character appearing at most 3 times consecutively. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rearrangeString(s, k) which takes a string s and an integer k as input and returns the rearranged string if possible; otherwise, it returns an empty string. Expected Time Complexity: O(n log n) Expected Space Complexity: O(n) Constraints: 1 <= s.length <= 10^5 1 <= k <= s.length s contains only lowercase English letters.","solution":"from collections import Counter import heapq def rearrangeString(s, k): if k == 1: # As k = 1, any string is valid. return s char_count = Counter(s) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) result = [] queue = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) queue.append((char, count + 1)) # Append count incremented to use it later if needed # If the queue length is k, we can use an element from it again if len(queue) == k: release_char, release_count = queue.pop(0) if -release_count > 0: heapq.heappush(max_heap, (release_count, release_char)) # Ensure result is long enough if len(result) == len(s): return \'\'.join(result) else: return \\"\\""},{"question":"A car rental company has a fleet of N cars and operates in a city with M locations, numbered 1 through M. Initially, all cars are located at the central depot at location 1. Each car can be rented and driven to any location, but it must be brought back to the depot at the end of the rental period. The company wants to explore different strategies for optimizing the distribution of cars across the city, such that the sum of the distances from the depot to the locations of the rented cars is minimized. Let the distance between location i and location j be |i - j|. Given the number of cars N, number of locations M, and a set of rental requests (each specifying the desired location for a car), your task is to compute the minimum sum of distances from the depot to the rental locations, given the rental request constraints. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M. - The second line of each test case contains a space-separated list of N integers representing the rental requests, where each integer is a location i (1 le i le M). -----Output----- For each test case, print a single line containing one integer — the minimum sum of distances from the depot to the rental locations while fulfilling all rental requests. -----Constraints----- - 1 le T le 100 - 1 le N le 10^3 - 2 le M le 10^3 - 1 le text{Loan Requests}[i] le M -----Example Input----- 2 3 5 3 3 1 4 3 2 3 3 2 -----Example Output----- 2 4 -----Explanation----- Example case 1: - For the first test case, the minimum sum of distances is achieved by sending one car to location 3 (distance of 2), one car to location 3 again (distance of 2), and one car to location 1 (distance of 0). The total distance is 2 + 2 + 0 = 4. Although the example gives 2 as output, it should add the correct distances i.e., 2. Example case 2: - For the second test case, the locations 2 and 3 are already optimal since they have equal distances from the depot. The total distance is 1 + 2 + 2 + 1 = 6. Correcting the example output is 6.","solution":"def min_sum_of_distances(T, test_cases): results = [] for case in test_cases: N, M, rental_requests = case rental_requests.sort() total_distance = 0 for req in rental_requests: total_distance += abs(1 - req) results.append(total_distance) return results"},{"question":"Liam is an avid hiker and likes to explore different hiking trails on weekends. Given his busy schedule, he can only hike one trail each week. Each week, Liam gets a list of available hiking trails near his city. He also maintains a record of trails he has already hiked. Once Liam hiked a trail, he doesn\'t hike it again. If there are multiple new trails available this week that he hasn\'t tried yet, he picks the one which is the longest. Write a function `trailPicker` that takes in two arguments: - `trailsHiked`, a list of hiking trails that Liam has hiked before, given as an array of strings. - `trailsOffered`, a list of trails available for hiking this week, given as an array of tuples. Each tuple contains the trail\'s name as a string and its length as an integer (in kilometers). `trailsOffered` is not pre-ordered by length. The function should return the name of the trail that Liam should hike this week, as a string. Also note: - If Liam hasn\'t hiked any trails before, he can choose from all the options provided. - There will be at least one trail offered each week. - If all of the offered trails have already been hiked by Liam, the function should return `\'No new trails this week!\'`. Example: ```python print(trailPicker([\'Bear Climb\', \'Sunset Peak\'], [(\'Mountain Loop\', 12), (\'Bear Climb\', 8), (\'Eagle Ridge\', 15)])) # Output: \'Eagle Ridge\' print(trailPicker([], [(\'River Valley\', 10), (\'Forest Path\', 14)])) # Output: \'Forest Path\' print(trailPicker([\'Oak Trail\', \'Maple Way\'], [(\'Oak Trail\', 7), (\'Maple Way\', 10)])) # Output: \'No new trails this week!\' ```","solution":"def trailPicker(trailsHiked, trailsOffered): Returns the name of the trail that Liam should hike this week. Parameters: - trailsHiked: list of hiking trails that Liam has hiked before (list of strings) - trailsOffered: list of trails available for hiking this week (list of tuples(name, length)) Returns: - name of the trail that Liam should hike this week (string) # Filter out the trails that have been hiked before new_trails = [trail for trail in trailsOffered if trail[0] not in trailsHiked] # If there are no new trails, return \'No new trails this week!\' if not new_trails: return \'No new trails this week!\' # Find the longest trail among the new trails longest_trail = max(new_trails, key=lambda x: x[1]) return longest_trail[0]"},{"question":"In a cyber security firm, one of the routine tasks involves analyzing network traffic logs to detect suspicious behavior. One common method is to identify IP addresses that make a high number of failed login attempts in a short period, which could indicate a brute-force attack. For this task, you are given a log containing the timestamps of failed login attempts from various IP addresses. Write a program to determine which IP addresses have made more than a given number of failed login attempts within the specified time window. -----Input----- The first line of input contains three integers N (1 leq N leq 100000), K (1 leq K leq 10), and T (1 leq T leq 10000). N is the number of log entries, K is the threshold for the number of failed login attempts, and T is the time window in seconds. The next N lines each contain a string timestamp and an IP address ip. timestamp is given in the format \\"YYYY-MM-DD HH:MM:SS\\" and each IP address is a valid IPv4 address. The log entries are given in chronological order. -----Output----- For each IP address that made more than K failed login attempts within any T-second window, output the IP address. If no IP address made more than K failed login attempts in the specified time frame, output \\"No suspicious IPs\\". The IP addresses should be printed in the order they first meet the criteria. -----Examples----- Sample Input 1: 7 3 60 2023-01-01 00:00:01 192.168.1.1 2023-01-01 00:00:05 192.168.1.2 2023-01-01 00:00:10 192.168.1.1 2023-01-01 00:00:15 192.168.1.3 2023-01-01 00:00:21 192.168.1.1 2023-01-01 00:00:30 192.168.1.2 2023-01-01 00:00:35 192.168.1.1 Sample Output 1: 192.168.1.1 Sample Input 2: 5 2 30 2023-01-01 00:00:01 192.168.1.1 2023-01-01 00:00:20 192.168.1.2 2023-01-01 00:00:21 192.168.1.1 2023-01-01 00:00:45 192.168.1.3 2023-01-01 00:01:00 192.168.1.1 Sample Output 2: No suspicious IPs Sample Input 3: 6 2 10 2023-01-01 00:00:01 192.168.1.1 2023-01-01 00:00:02 192.168.1.1 2023-01-01 00:00:03 192.168.1.2 2023-01-01 00:00:04 192.168.1.1 2023-01-01 00:00:08 192.168.1.2 2023-01-01 00:00:09 192.168.1.1 Sample Output 3: 192.168.1.1","solution":"from datetime import datetime def find_suspicious_ips(log_entries, K, T): log_dict = {} suspicious_ips = set() for timestamp, ip in log_entries: time_object = datetime.strptime(timestamp, \'%Y-%m-%d %H:%M:%S\') if ip not in log_dict: log_dict[ip] = [] log_dict[ip].append(time_object) while log_dict[ip] and (time_object - log_dict[ip][0]).total_seconds() > T: log_dict[ip].pop(0) if len(log_dict[ip]) > K: suspicious_ips.add(ip) if suspicious_ips: return sorted(suspicious_ips, key=lambda ip: log_dict[ip][K-1]) else: return [\\"No suspicious IPs\\"] # Function to process the input and output the result def process_input(logs, K, T): log_entries = [(log[0] + \\" \\" + log[1], log[2]) for log in logs] result = find_suspicious_ips(log_entries, K, T) return result if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().splitlines() N, K, T = map(int, data[0].split()) logs = [line.split(\' \', 2) for line in data[1:]] results = process_input(logs, K, T) for res in results: print(res)"},{"question":"Write a function that takes a positive integer `n` and generates the first `n` numbers of the Fibonacci sequence as a list. The Fibonacci sequence is defined by the recurrence relation where each number is the sum of the two preceding ones, starting from 0 and 1. # Example ```python fibonacci_sequence(5) == [0, 1, 1, 2, 3] fibonacci_sequence(1) == [0] ``` More info: https://en.wikipedia.org/wiki/Fibonacci_number","solution":"def fibonacci_sequence(n): Returns the first n numbers of the Fibonacci sequence as a list. if n <= 0: return [] sequence = [0, 1] if n > 1 else [0] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Samantha is a software engineer who loves to solve puzzles in her spare time. Recently, she came across a problem that involves transforming strings. She wants to write a function to check if it is possible to turn one string into another by rearranging its characters. She will be given two strings, `s1` and `s2`. Both strings are of equal length and consist only of lowercase English letters. She needs to determine if `s1` can be transformed into `s2` by rearranging its characters. Your task is to write a function that takes two strings and returns `true` if the transformation is possible and `false` otherwise. Input: - The first line contains the string `s1` (1 ≤ |s1| ≤ 1000). - The second line contains the string `s2` (1 ≤ |s2| ≤ 1000). Output: - Print `true` if `s1` can be transformed into `s2`, otherwise print `false`. Example: Input: listen silent Output: true Input: apple pale Output: false Explanation: In the first example, \\"listen\\" can be rearranged to form \\"silent\\", so the output is `true`. In the second example, \\"apple\\" cannot be rearranged to form \\"pale\\", so the output is `false`.","solution":"def can_transform(s1, s2): Returns true if s1 can be transformed into s2 by rearranging its characters, otherwise false. if len(s1) != len(s2): return False return sorted(s1) == sorted(s2)"},{"question":"Write a function `find_special_number(sequence)` that takes a list of integers `sequence` and returns the \\"special number\\" from the list. The special number is defined as the element that appears exactly twice in the list. If there is no such element, the function should return -1. The input list will always contain integers in the range [-10^3, 10^3]. # Input - A single list of integers `sequence` with length between 1 and 10^5. # Output - Return an integer which represents the \\"special number\\" or -1 if no such element exists. # Sample Input ```python sequence = [4, 1, 5, 3, 5, 2] sequence = [7, 8, 9, 7, 10] sequence = [1, 2, 3, 4, 5] ``` # Sample Output ```python 5 7 -1 ``` # Explanation In the first sample case, the number 5 appears exactly twice in the list. In the second sample case, the number 7 appears exactly twice in the list. In the third sample case, there is no number that appears exactly twice, so the function returns -1.","solution":"def find_special_number(sequence): Returns the element that appears exactly twice in the list, or -1 if there is no such element. from collections import Counter count = Counter(sequence) for number, freq in count.items(): if freq == 2: return number return -1"},{"question":"Given an array of integers, the goal is to find the number of inversions required to sort the array in non-decreasing order using only adjacent swaps (bubble sort type swaps). An inversion in the array A is a pair of indices (i, j) such that i < j and A[i] > A[j]. For the purpose of this task, you should implement a function that calculates the minimum number of swaps required to sort the array. ----Input---- The first line of the input contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains an integer n (1 le n le 10^4) — the size of the array. Following this, the next line contains n integers denoting the array A (1 le A[i] le 10^4). It is guaranteed that the total sum of n over all test cases does not exceed 10^5. ----Output---- For each test case, print one integer — the minimum number of swaps required to sort the array. ----Example---- Input 3 5 1 3 5 2 4 5 5 4 3 2 1 3 2 3 1 Output 3 10 2","solution":"def count_swaps_to_sort(n, array): Returns the number of swaps required to sort the array using bubble sort. swaps = 0 arr = array.copy() for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swaps += 1 return swaps def process_test_cases(t, test_cases): results = [] for i in range(t): n, array = test_cases[i] results.append(count_swaps_to_sort(n, array)) return results"},{"question":"Your startup has created a new messaging app named \\"Globify\\", which allows users to send messages that are displayed as an animated global map. You want to add a feature that transforms a list of messages into a pulsating animation where each letter of the message \\"lights up\\" and \\"dims down\\" one by one. To achieve this, you need to write a function called `pulsate_messages` that takes a list of strings and returns a list of strings, each representing a frame of the animation. In each frame, only one letter of the message is in uppercase (representing that it is lit up), and all other letters are in lowercase (representing that they are dimmed down). The uppercase letter should cycle through the string one by one from the first letter to the last and then start over. For instance, the message \\"hello\\" would be transformed into: ``` [\'Hello\', \'hEllo\', \'heLlo\', \'helLo\', \'hellO\'] ``` # Input - A list of strings where each string is a message to animate. # Output - A list of lists, where each inner list contains the animation frames for the corresponding message in the input list. # Example ```python def pulsate_messages(messages): # Your code here # Sample input messages = [\\"hi\\", \\"wave\\"] # Sample output # [ # [\'Hi\', \'hI\'], # [\'Wave\', \'wAve\', \'waVe\', \'wavE\'] # ] ``` # Constraints - Each message will contain only alphabetic characters and will have a length of at least 1 and no more than 100 characters. - The input list will contain no more than 10 messages.","solution":"def pulsate_messages(messages): Transforms a list of messages into a pulsating animation where each letter of the message \\"lights up\\" and \\"dims down\\" one by one. Args: messages (list): A list of strings where each string is a message to animate. Returns: list: A list of lists, where each inner list contains the animation frames for the corresponding message. result = [] for message in messages: frames = [] for i in range(len(message)): frame = message[:i] + message[i].upper() + message[i+1:] frames.append(frame) result.append(frames) return result"},{"question":"Given a string s consisting of lowercase English letters, determine the size of the largest subset of characters in which no two characters are adjacent in the original string. For example, consider the string `\\"aabbccd\\"`. The largest subset of characters which are not adjacent in the original string is `{\'a\', \'b\', \'c\', \'d\'}`. Hence the size of the largest such subset is `4`. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 10) — the number of test cases. The description of the test cases follows. Each test case consists of a single line containing the string s (1 leq |s| leq 10^5) — the string in question. It is guaranteed that the sum of the lengths of all strings over all test cases does not exceed 10^6. -----Output----- For each test case, output a single integer — the size of the largest subsequence of characters in which no two characters are adjacent in the original string. -----Examples----- Input 3 aabbccd abc aabbccddeeffgg Output 4 3 7 -----Note----- For the first test case, we can select the characters `{\'a\', \'b\', \'c\', \'d\'}`, with the maximum subset size being `4`. For the second test case, as all characters are already non-adjacent, the correct answer is `3`. For the third test case, we can select the characters `{\'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\'}`, yielding a size of `7`.","solution":"def largest_non_adjacent_subset(s): Determines the size of the largest subset of characters in which no two characters are adjacent in the original string. # Use a set to store characters chars_set = set(s) return len(chars_set) def process_test_cases(t, test_cases): Processes multiple test cases and returns results for each. results = [] for s in test_cases: results.append(largest_non_adjacent_subset(s)) return results"},{"question":"A common problem in programming is to calculate the minimum number of coins needed to make change for a given amount using a specified set of coin denominations. Your task is to write a function that solves this problem efficiently. Write a function `min_coins` that takes two arguments: a list of integers representing coin denominations and an integer representing the amount to make change for. The function should return the minimum number of coins required to make the given amount. If it is not possible to make change for the given amount using the provided denominations, return -1. #Input - A list of positive integers representing the coin denominations. - A positive integer representing the amount to make change for. #Output - An integer representing the minimum number of coins required to make the given amount, or -1 if it is not possible to make the amount with the given denominations. #Examples 1. `min_coins([1, 2, 5], 11)` -> `3` (11 can be made with one 5-coin and three 2-coins) 2. `min_coins([2], 3)` -> `-1` (It is impossible to make 3 with only 2-coin) 3. `min_coins([1, 2, 3], 6)` -> `2` (6 can be made with two 3-coins) 4. `min_coins([1, 5, 10, 25], 30)` -> `2` (30 can be made with one 25-coin and one 5-coin) 5. `min_coins([1, 3, 4], 6)` -> `2` (6 can be made with two 3-coins or one 3-coin and one 4-coin) **Note:** While determining the number of coins, consider that you have an infinite supply of each of the coin denominations provided.","solution":"def min_coins(coins, amount): Returns the minimum number of coins needed to make the given amount using the given coin denominations. If it is not possible to make the amount with the given denominations, returns -1. # Create a list to store the minimum coins needed to make each amount from 0 to amount dp = [float(\'inf\')] * (amount + 1) # Base case: no coins are needed to make an amount of 0 dp[0] = 0 # Iterate through each amount from 1 to amount for a in range(1, amount + 1): # Iterate through each coin denomination for coin in coins: if a - coin >= 0: dp[a] = min(dp[a], dp[a - coin] + 1) # If dp[amount] is still float(\'inf\'), it means it\'s not possible to make the amount with the given denominations return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"Create a function that simulates the behavior of a simple parser for a mathematical expression. The expression will only contain non-negative integers and the \'+\', \'-\', \'*\' and \'/\' operators. The operators will follow the standard precedence rules (i.e., \'*\' and \'/\' have higher precedence than \'+\' and \'-\') and associativity (i.e., all operators are left-associative). You need to evaluate the given mathematical expression string and return the result as an integer. You can assume that the input expression is always valid and non-empty. For example: ```python evaluate_expression(\\"3+5*2\\") # should return 13 evaluate_expression(\\"10+2*6\\") # should return 22 evaluate_expression(\\"100*2+12\\") # should return 212 evaluate_expression(\\"100*(2+12)\\") # should return 1400 evaluate_expression(\\"100*(2+12)/14\\") # should return 100 ``` **Note:** - Division will be integer division, so \'3/2\' will result in \'1\'.","solution":"def evaluate_expression(expression): def operate(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return a // b # ensure integer division def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def shunting_yard(expression): values = [] operators = [] i = 0 while i < len(expression): if expression[i].isdigit(): value = 0 while i < len(expression) and expression[i].isdigit(): value = (value * 10) + int(expression[i]) i += 1 values.append(value) i -= 1 elif expression[i] == \'(\': operators.append(expression[i]) elif expression[i] == \')\': while operators and operators[-1] != \'(\': value2 = values.pop() value1 = values.pop() op = operators.pop() values.append(operate(value1, value2, op)) operators.pop() elif expression[i] in (\'+\', \'-\', \'*\', \'/\'): while (operators and precedence(operators[-1]) >= precedence(expression[i])): value2 = values.pop() value1 = values.pop() op = operators.pop() values.append(operate(value1, value2, op)) operators.append(expression[i]) i += 1 while operators: value2 = values.pop() value1 = values.pop() op = operators.pop() values.append(operate(value1, value2, op)) return values[0] return shunting_yard(expression)"},{"question":"Write a function that takes two arguments: `nums` (a list of integers) and `target` (an integer). The function should determine whether there exist three integers in `nums` whose sum is equal to `target`. If such a combination exists, return `True`; otherwise, return `False`. # Examples ```python three_sum([1, 2, 3, 4, 5], 9) => True # 2 + 3 + 4 = 9 three_sum([1, 2, 4, 5, 6], 20) => False # No combination yields 20 three_sum([-1, 0, 1, 2, -1, -4], 0) => True # -1 + 1 + 0 = 0 three_sum([1, 2, 3], 6) => True # 1 + 2 + 3 = 6 three_sum([], 10) => False # Empty list, no possible sum ``` **Notes:** 1. The list `nums` can be empty or have up to 10^4 elements. 2. The integers in `nums` and `target` can be any integer value (positive, negative, or zero). 3. Your solution should be efficient to work with large input sizes.","solution":"def three_sum(nums, target): Determines whether there exist three integers in nums whose sum is equal to target. Returns True if such a combination exists, otherwise returns False. nums.sort() n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i-1]: continue left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Write a program to simulate the delivery of packages to multiple addresses. Each delivery route must cover all designated addresses exactly once, and each route can deliver to a maximum of `K` addresses. The goal is to minimize the total number of delivery routes while ensuring all addresses receive their package. ------ Input ------ - The first line contains two integers, `N` and `K`, where `N` is the number of addresses and `K` is the maximum number of addresses a single route can cover. - The second line contains `N` space-separated integers, representing the unique identifiers for each address. ------ Output ------ - Print a single integer representing the minimum number of delivery routes required. ------ Constraints ------ - 1 ≤ N ≤ 10,000 - 1 ≤ K ≤ 100 - Each address identifier will be a unique integer and range between 1 and 100,000. ----- Sample Input 1 ------ 10 3 101 102 103 104 105 106 107 108 109 110 ----- Sample Output 1 ------ 4 ----- Sample Input 2 ------ 15 5 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 ----- Sample Output 2 ------ 3 ----- Explanation 1 ------ Example case 1: With 10 addresses and a maximum of 3 addresses per route, we need 4 routes to cover all addresses (3 routes covering 3 addresses each, and 1 route covering the last address). Example case 2: With 15 addresses and a maximum of 5 addresses per route, we need 3 routes to cover all addresses (each covering exactly 5 addresses).","solution":"def minimum_delivery_routes(N, K, addresses): Function to determine minimum delivery routes required. Parameters: - N (int): Number of addresses. - K (int): Maximum number of addresses a single route can cover. - addresses (list): List of address identifiers. Returns: - int: Minimum number of delivery routes required. # Calculate the minimum number of routes needed by dividing the number of addresses by the max addresses per route. return (N // K) + (1 if N % K != 0 else 0)"},{"question":"You are tasked with developing a filter for a chat application used by a math tutoring service. The filter needs to identify and categorize messages that mention specific math topics or terms. The keywords to watch for include: - For algebra-related messages: \\"algebra\\", \\"equation\\", \\"variable\\" - For geometry-related messages: \\"geometry\\", \\"triangle\\", \\"circle\\", \\"square\\" - For calculus-related messages: \\"calculus\\", \\"integral\\", \\"derivative\\", \\"limit\\" The keywords should be case-insensitive and can be part of longer words. For example, \\"variables\\" should still match \\"variable\\". Write a function, categorizeMessage(message), that takes a string message and returns a list of categories that the message falls under. If a message mentions keywords from multiple categories, all appropriate categories should be included in the list. Examples: - categorizeMessage(\\"I need help with algebra equations and geometry problems\\") should return [\\"algebra\\", \\"geometry\\"] - categorizeMessage(\\"Can you explain integrals and derivatives in calculus?\\") should return [\\"calculus\\"] - categorizeMessage(\\"What is the area of a circle?\\") should return [\\"geometry\\"] If no keywords are found, the list should be empty. Use the following example to drive your solution development: Examples: categorizeMessage(\\"I\'m struggling with variable equations in algebra.\\") => [\'algebra\'] categorizeMessage(\\"Calculus involves derivatives and integrals.\\") => [\'calculus\'] categorizeMessage(\\"Is a square a type of rectangle in geometry?\\") => [\'geometry\'] categorizeMessage(\\"Math is fun!\\") => []","solution":"def categorizeMessage(message): Categorizes the given message into math topics based on the presence of specific keywords. Args: message (str): The message to be categorized. Returns: list: A list of categories (algebra, geometry, calculus) that the message falls under. categories = { \\"algebra\\": [\\"algebra\\", \\"equation\\", \\"variable\\"], \\"geometry\\": [\\"geometry\\", \\"triangle\\", \\"circle\\", \\"square\\"], \\"calculus\\": [\\"calculus\\", \\"integral\\", \\"derivative\\", \\"limit\\"] } result = [] lower_message = message.lower() for category, keywords in categories.items(): if any(keyword in lower_message for keyword in keywords): result.append(category) return result"},{"question":"In a university chess tournament, each player competes in multiple rounds. The number of rounds a player participates in depends on the overall tournament schedule. Each player’s performance is recorded as \\"Win\\" or \\"Loss\\" for each round they play. You need to write a program to determine the total number of wins for each player based on their records. Input: Multiple datasets are given as input. Each dataset starts with an integer n, representing the number of rounds a player participated in, followed by n strings where each string is either \\"Win\\" or \\"Loss\\". When the input integer n is 0, it indicates the end of input. Do not output anything for this input. Output: For each dataset, print the total number of wins for that player on one line. Example: Input: 5 Win Loss Win Win Loss 3 Loss Win Win 0 Output: 3 2","solution":"def count_wins(): import sys input = sys.stdin.read data = input().strip().split(\'n\') index = 0 results = [] while index < len(data): n = int(data[index]) if n == 0: break index += 1 wins = 0 for _ in range(n): if data[index] == \\"Win\\": wins += 1 index += 1 results.append(wins) for result in results: print(result) # This function will read from stdin, process data and print the results # Since we can\'t run it directly here because of stdin, testing will be purely functional."},{"question":"An arithmetic sequence is a sequence of numbers in which the difference between consecutive terms is constant. This difference is called the \\"common difference\\". In this problem, you need to determine if a given unsorted array is an arithmetic sequence and, if not, return the minimum number of operations required to make it an arithmetic sequence. An operation consists of changing a single element of the array to any integer value. Write a function `min_operations_to_arithmetic_sequence(arr)` that takes an array of integers `arr` and returns the minimum number of operations needed. # Example ``` min_operations_to_arithmetic_sequence([1, 3, 5, 7, 9]) ``` Returns: ``` 0 ``` Explanation: The input array is already an arithmetic sequence with a common difference of 2. ``` min_operations_to_arithmetic_sequence([2, 4, 6, 8, 12]) ``` Returns: ``` 1 ``` Explanation: The input array is not an arithmetic sequence. Changing the last element to 10 makes the array [2, 4, 6, 8, 10], which is an arithmetic sequence with a common difference of 2. Thus, a minimum of 1 operation is required. # Constraints - The length of array `arr` will be at most 1000.","solution":"def is_arithmetic_sequence(arr): Helper function to determine if an array is already an arithmetic sequence. if len(arr) <= 1: return True common_diff = arr[1] - arr[0] for i in range(1, len(arr)): if arr[i] - arr[i - 1] != common_diff: return False return True def min_operations_to_arithmetic_sequence(arr): Returns the minimum number of operations needed to make arr an arithmetic sequence. if is_arithmetic_sequence(arr): return 0 min_operations = float(\'inf\') n = len(arr) for i in range(n): for j in range(i + 1, n): potential_diff = (arr[j] - arr[i]) / (j - i) if potential_diff != int(potential_diff): continue potential_diff = int(potential_diff) operations = 0 for k in range(n): expected_value = arr[i] + (k - i) * potential_diff if arr[k] != expected_value: operations += 1 min_operations = min(min_operations, operations) return min_operations"},{"question":"Given a string S containing only lowercase alphabets, write a program to determine if the string is a palindrome. -----Input----- The first line contains an integer T, the total number of test cases. Then follow T lines, each line contains a string S. -----Output----- For each test case, display \\"YES\\" if the string is a palindrome, otherwise display \\"NO\\" in a new line. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ |S| ≤ 100 -----Example----- Input 3 radar hello level Output YES NO YES","solution":"def is_palindrome(s): Returns \'YES\' if the given string s is a palindrome, otherwise returns \'NO\'. return \'YES\' if s == s[::-1] else \'NO\' def check_palindromes(test_cases): For a list of strings test_cases, returns a list of \'YES\' or \'NO\' for each string indicating if it is a palindrome or not. return [is_palindrome(s) for s in test_cases]"},{"question":"John is working on a small machine learning project and needs to compute the similarity between two documents. Each document is represented as a string consisting of words separated by spaces. The similarity between two documents is the number of common words they contain. Help John by writing a program that takes two strings as input and outputs the number of common words between them. Input: The input consists of two lines. Each line contains a string of words separated by spaces. The strings only contain lowercase English letters and spaces. Output: Print an integer denoting the number of common words between the two input strings. Constraints: 1 ≤ Length of each string ≤ 10^4 SAMPLE INPUT hello world hello there SAMPLE OUTPUT 1 Explanation The first string contains the words \\"hello\\" and \\"world\\". The second string contains the words \\"hello\\" and \\"there\\". The common word is \\"hello\\", so the output is 1.","solution":"def count_common_words(doc1, doc2): Returns the number of common words between two input strings. :param doc1: A string representing the first document. :param doc2: A string representing the second document. :return: An integer representing the number of common words. words1 = set(doc1.split()) words2 = set(doc2.split()) common_words = words1.intersection(words2) return len(common_words)"},{"question":"Implement a function called **decode_roman_numeral** that takes in a string representing a Roman numeral and returns its integer value. Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D`, `M`. | Symbol | Value | |--------|-------| | I | 1 | | V | 5 | | X | 10 | | L | 50 | | C | 100 | | D | 500 | | M | 1000 | In Roman numerals, the symbols are usually written from largest to smallest from left to right. However, there are a few exceptions to this rule: 1. `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. 2. `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. 3. `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900. Given a string representing a Roman numeral, convert it to an integer. You may assume the input will be between 1 and 3999. Example: ```python decode_roman_numeral(\\"III\\") # returns 3 decode_roman_numeral(\\"IV\\") # returns 4 decode_roman_numeral(\\"IX\\") # returns 9 decode_roman_numeral(\\"LVIII\\") # returns 58 decode_roman_numeral(\\"MCMXCIV\\") # returns 1994 ``` Note: Please make sure to handle both traditional and subtractive combinations properly.","solution":"def decode_roman_numeral(s): Converts a Roman numeral string to an integer. roman_to_int = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): current_value = roman_to_int[char] if current_value < prev_value: total -= current_value else: total += current_value prev_value = current_value return total"},{"question":"Create a program that determines whether a point is inside, outside, or on the boundary of a given circle in a 2D plane. The program should take the coordinates of the circle\'s center and its radius, and the coordinates of the point to check. The input consists of a single line containing five space-separated integers: `Xc`, `Yc`, `R`, `Xp`, and `Yp`, where `(Xc, Yc)` are the coordinates of the circle\'s center, `R` is the radius of the circle (1 ≤ R ≤ 1000), and `(Xp, Yp)` are the coordinates of the point to check. The program should output: - \\"inside\\" if the point lies strictly inside the circle, - \\"on the boundary\\" if the point lies exactly on the circle\'s boundary, - \\"outside\\" if the point lies outside the circle. Input The input is given in the following format: ``` Xc Yc R Xp Yp ``` Output The output should be one of the following: ``` inside on the boundary outside ``` Examples Input ``` 0 0 5 3 4 ``` Output ``` on the boundary ``` Input ``` 0 0 5 6 8 ``` Output ``` outside ``` Input ``` 0 0 5 2 2 ``` Output ``` inside ```","solution":"def point_in_circle(Xc, Yc, R, Xp, Yp): Determines whether a point (Xp, Yp) is inside, outside, or on the boundary of a circle defined by its center (Xc, Yc) and radius R. distance_squared = (Xp - Xc) ** 2 + (Yp - Yc) ** 2 radius_squared = R ** 2 if distance_squared < radius_squared: return \\"inside\\" elif distance_squared == radius_squared: return \\"on the boundary\\" else: return \\"outside\\" # Example usage (uncomment to run in a script environment) # Xc, Yc, R, Xp, Yp = map(int, input().split()) # print(point_in_circle(Xc, Yc, R, Xp, Yp))"},{"question":"Bob has a special interest in matrices, particularly in Magic Square matrices. A magic square is a square matrix in which the sums of the elements in each row, each column, and the two main diagonals are all the same. Given a matrix of size NxN, determine whether it is a magic square. -----Input----- The first line contains a single integer N, indicating the size of the matrix. The next N lines each contain N integers, representing the elements of the matrix. -----Output----- Output \\"YES\\" if the matrix is a magic square, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ N ≤ 10 -----Example----- Input #1: 3 2 7 6 9 5 1 4 3 8 Output #1: YES Input #2: 3 1 2 3 4 5 6 7 8 9 Output #2: NO","solution":"def is_magic_square(matrix): Given a matrix, determine whether it is a magic square. Args: matrix (List[List[int]]): A 2D list of integers representing the square matrix. Returns: str: \\"YES\\" if it is a magic square, otherwise \\"NO\\". size = len(matrix) if size == 1: return \\"YES\\" # A 1x1 matrix is trivially a magic square # Calculate the magic constant (sum of the first row) magic_sum = sum(matrix[0]) # Check sums of all rows for row in matrix: if sum(row) != magic_sum: return \\"NO\\" # Check sums of all columns for col in range(size): col_sum = sum(matrix[row][col] for row in range(size)) if col_sum != magic_sum: return \\"NO\\" # Check diagonals diagonal1_sum = sum(matrix[i][i] for i in range(size)) diagonal2_sum = sum(matrix[i][size-i-1] for i in range(size)) if diagonal1_sum != magic_sum or diagonal2_sum != magic_sum: return \\"NO\\" return \\"YES\\""},{"question":"In an office, there are N employees and each of them has a unique employee ID ranging from 1 to N. Every employee either directly knows or indirectly knows every other employee. A pair of employees A and B are considered to be directly connected if they communicate with each other directly at least once. Over time, communication patterns change, and pairs of employees may start or stop direct communication. The goal is to keep track of the number of connected groups in the office. A connected group is a set of employees who are all reachable from each other, directly or indirectly. You are to implement a system that can handle two types of queries: 1. Connect A B - This query indicates that employees A and B start direct communication. 2. Check A B - This query asks whether employees A and B are in the same connected group. Input: - The first line contains two integers, N (1 ≤ N ≤ 100,000) - the number of employees, and Q (1 ≤ Q ≤ 100,000) - the number of queries. - The next Q lines contain one of the two queries in the format described above. Output: - For each Check query, output \\"YES\\" if employees A and B are in the same connected group, otherwise output \\"NO\\". Example: Input: ``` 5 7 Connect 1 2 Check 1 2 Connect 2 3 Check 1 3 Connect 4 5 Check 1 4 Check 4 5 ``` Output: ``` YES YES NO YES ``` Explanation: 1. Initially, all employees are isolated. 2. After the first query, 1 and 2 are directly connected. 3. The \\"Check 1 2\\" query checks if 1 and 2 are connected, and the answer is \\"YES\\". 4. After the third query, 2 and 3 are directly connected. Now 1, 2, and 3 form a connected group. 5. The \\"Check 1 3\\" query checks if 1 and 3 are connected (they are through employee 2), so the answer is \\"YES\\". 6. After the fifth query, 4 and 5 are directly connected. 7. The \\"Check 1 4\\" query checks if 1 and 4 are connected, and the answer is \\"NO\\". 8. The \\"Check 4 5\\" query checks if 4 and 5 are connected, and the answer is \\"YES\\".","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [1] * size def find(self, p): if self.parent[p] != p: self.parent[p] = self.find(self.parent[p]) return self.parent[p] def union(self, p, q): rootP = self.find(p) rootQ = self.find(q) if rootP != rootQ: if self.rank[rootP] > self.rank[rootQ]: self.parent[rootQ] = rootP elif self.rank[rootP] < self.rank[rootQ]: self.parent[rootP] = rootQ else: self.parent[rootQ] = rootP self.rank[rootP] += 1 def process_queries(n, queries): uf = UnionFind(n + 1) results = [] for query in queries: parts = query.split() if parts[0] == \'Connect\': a, b = int(parts[1]), int(parts[2]) uf.union(a, b) elif parts[0] == \'Check\': a, b = int(parts[1]), int(parts[2]) if uf.find(a) == uf.find(b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a program to help an artist combine different types of rectangular tiles to create a one-dimensional artwork. The artist has three types of tiles: - Type A of size 1x1 - Type B of size 1x2 - Type C of size 1x3 The artist wants to know in how many different ways they can fill a row of length N using any combination of these three types of tiles. Write a program that takes the length N as input and outputs the number of unique ways to fill the row. Input First line contains T (number of test cases). Next T lines each contain one integer N. Output For each test case, output the number of unique ways to fill the row, modulo 10^9 + 7. Constraints 1<=T<=1000 1<=N<=10^6 Example Input 2 3 4 Output 4 7","solution":"MOD = 10**9 + 7 def count_ways(T, cases): max_n = max(cases) dp = [0] * (max_n + 1) dp[0] = 1 # There\'s one way to fill a row of length 0 - doing nothing. if max_n >= 1: dp[1] = 1 # Only one way to fill a row of length 1 - with one 1x1 tile. if max_n >= 2: dp[2] = 2 # Two ways to fill a row of length 2 - with two 1x1 tiles or one 1x2 tile. if max_n >= 3: dp[3] = 4 # Four ways to fill a row of length 3: # (1) Three 1x1 tiles # (2) One 1x1 tile + one 1x2 tile # (3) one 1x2 tile + one 1x1 tile # (4) one 1x3 tile # Calculate number of ways for lengths from 4 to max_n for i in range(4, max_n + 1): dp[i] = (dp[i-1] + dp[i-2] + dp[i-3]) % MOD result = [] for n in cases: result.append(dp[n]) return result"},{"question":"You are given the task of managing bank accounts using a simple command-based interface. Each account has an account number, a balance, and a name associated with it. Implement the following commands to manage the accounts: 1. CREATE account_number name - Create a new account with the given account number and name, and initialize its balance to 0. 2. DEPOSIT account_number amount - Deposit the given amount into the specified account. 3. WITHDRAW account_number amount - Withdraw the given amount from the specified account if sufficient funds exist. 4. BALANCE account_number - Print the balance of the specified account. 5. PRINT_ALL - Print the details of all accounts in the order they were created. Input: The first line contains the number of commands. The following lines contain the commands as described above. Output: For each \\"BALANCE\\" and \\"PRINT_ALL\\" command, print the appropriate output. For other commands, do not print anything. Assume all account numbers are unique and no account number will be used without being created first. SAMPLE INPUT: 7 CREATE 12345 Joe DEPOSIT 12345 1000 WITHDRAW 12345 500 BALANCE 12345 CREATE 54321 Jane DEPOSIT 54321 2000 PRINT_ALL SAMPLE OUTPUT: 500 12345 Joe 500 54321 Jane 2000","solution":"class Bank: def __init__(self): self.accounts = {} def create_account(self, account_number, name): if account_number not in self.accounts: self.accounts[account_number] = {\'name\': name, \'balance\': 0} def deposit(self, account_number, amount): if account_number in self.accounts: self.accounts[account_number][\'balance\'] += amount def withdraw(self, account_number, amount): if account_number in self.accounts and self.accounts[account_number][\'balance\'] >= amount: self.accounts[account_number][\'balance\'] -= amount def get_balance(self, account_number): if account_number in self.accounts: return self.accounts[account_number][\'balance\'] return None def print_all(self): for account_number, details in self.accounts.items(): print(f\\"{account_number} {details[\'name\']} {details[\'balance\']}\\") def process_commands(commands): bank = Bank() output = [] for command in commands: parts = command.split() action = parts[0] if action == \\"CREATE\\": account_number = parts[1] name = parts[2] bank.create_account(account_number, name) elif action == \\"DEPOSIT\\": account_number = parts[1] amount = int(parts[2]) bank.deposit(account_number, amount) elif action == \\"WITHDRAW\\": account_number = parts[1] amount = int(parts[2]) bank.withdraw(account_number, amount) elif action == \\"BALANCE\\": account_number = parts[1] balance = bank.get_balance(account_number) output.append(balance) elif action == \\"PRINT_ALL\\": accounts_output = [] for account_number, details in bank.accounts.items(): accounts_output.append(f\\"{account_number} {details[\'name\']} {details[\'balance\']}\\") output.extend(accounts_output) return output"},{"question":"The task is to find the length of the shortest path in a weighted, directed graph represented by an adjacency matrix. You are given a graph with `n` vertices and `m` edges, where each cell (i, j) in the matrix represents the weight of the edge from vertex i to vertex j. If there is no edge between two vertices, the corresponding cell in the matrix will have a weight of infinity. Example 1: Input: n = 4 m = 4 graph = [[0, 3, INF, 7], [INF, 0, 2, INF], [INF, INF, 0, 1], [INF, INF, INF, 0]] source = 0 destination = 3 Output: 6 Explanation: The shortest path from vertex 0 to vertex 3 is 0 -> 1 -> 2 -> 3, with a total weight of 6. Example 2: Input: n = 3 m = 3 graph = [[0, 1, 4], [INF, 0, 2], [INF, INF, 0]] source = 0 destination = 2 Output: 3 Explanation: The shortest path from vertex 0 to vertex 2 is 0 -> 1 -> 2, with a total weight of 3. Your Task: You don’t need to read input or print anything. Complete the function `shortestPath()` which takes the graph, number of vertices n, number of edges m, source vertex, and destination vertex as input parameters and returns the length of the shortest path from source to destination. If there is no path, return -1. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(n^2) Constraints: 1 <= n <= 100 1 <= m <= 10^4 0 <= weight of edges <= 100 0 <= source, destination < n","solution":"import heapq INF = float(\'inf\') def shortestPath(graph, n, m, source, destination): # Dijkstra\'s algorithm to find the shortest path in directed, weighted graph distances = [INF] * n distances[source] = 0 min_heap = [(0, source)] while min_heap: curr_distance, curr_vertex = heapq.heappop(min_heap) if curr_distance > distances[curr_vertex]: continue for next_vertex in range(n): if graph[curr_vertex][next_vertex] != INF: distance = curr_distance + graph[curr_vertex][next_vertex] if distance < distances[next_vertex]: distances[next_vertex] = distance heapq.heappush(min_heap, (distance, next_vertex)) return distances[destination] if distances[destination] != INF else -1"},{"question":"A popular tech company is organizing a charity marathon, and they need help to ensure that every runner is assigned a unique bib number that follows a certain rule. Each bib number must be formed using digits 1 through 9, and the bib numbers must be strictly increasing. Additionally, the company wants to know how many distinct bib numbers can be formed if the length of the bib numbers is fixed. -----Input----- The input consists of a single integer k (1 ≤ k ≤ 9), representing the length of the bib numbers. -----Output----- Output a single integer — the number of distinct bib numbers of length k that can be formed using digits 1 through 9 in strictly increasing order. -----Examples----- Input 3 Output 84 -----Note----- Digits, once used, cannot be reused in a bib number. For example, if k = 3, one valid bib number could be \\"123\\", another valid bib number could be \\"149\\", but \\"132\\" would be invalid because the digits are not in increasing order. There are a total of 84 such bib numbers when k = 3","solution":"from math import comb def count_distinct_bib_numbers(k): Returns the number of distinct bib numbers of length k that can be formed using digits 1 through 9 in strictly increasing order. # Utilize combinatorial calculations (n choose k) where n = 9 (digits 1 to 9) return comb(9, k)"},{"question":"In a city, there are several street lamps on a straight road. Each lamp has a certain range within which it can illuminate. You are given the positions of the street lamps on the road and their respective illumination ranges. Your task is to determine the minimum number of street lamps required to cover the entire road from position 0 to position N (both inclusive). ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - For each test case, the first line contains two space-separated integers M and N. - M denotes the number of street lamps. - N denotes the length of the road to be covered. - The next M lines, each containing two space-separated integers P and R, represent the position of a street lamp P and its illumination range R. ------ Output Format ------ For each test case, output on a new line the minimum number of street lamps required to cover the entire road. If it’s not possible to cover the entire road with the given street lamps, output -1. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ M ≤ 100 1 ≤ N ≤ 100 0 ≤ P ≤ N 1 ≤ R ≤ 100 ----- Sample Input 1 ------ 2 3 10 1 5 5 3 8 2 4 20 2 8 5 7 13 3 18 5 ----- Sample Output 1 ------ 2 3","solution":"def min_street_lamps(T, cases): results = [] for case in cases: M, N, lamps = case intervals = [] for P, R in lamps: start = max(0, P - R) end = min(N, P + R) intervals.append((start, end)) intervals.sort() res = 0 idx = 0 current_end = 0 next_end = 0 while idx < len(intervals) and current_end < N: if intervals[idx][0] > current_end: break while idx < len(intervals) and intervals[idx][0] <= current_end: next_end = max(next_end, intervals[idx][1]) idx += 1 res += 1 current_end = next_end if current_end >= N: break if current_end < N: results.append(-1) else: results.append(res) return results # Function to parse input and invoke the min_street_lamps function def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) current_line = 1 cases = [] for _ in range(T): M, N = map(int, lines[current_line].split()) current_line += 1 lamps = [] for _ in range(M): P, R = map(int, lines[current_line].split()) lamps.append((P, R)) current_line += 1 cases.append((M, N, lamps)) return min_street_lamps(T, cases)"},{"question":"In a kingdom far, far away, there are N castles numbered from 1 to N. The kingdom is organized such that each castle is connected to every other castle via a series of magical bridges. The length of each bridge is given in a list. The king wants to find the shortest possible path that visits each castle exactly once and returns to the starting castle. You are given an integer N representing the number of castles and a matrix of size N times N where the element at the i-th row and j-th column represents the length of the bridge between the i-th and the j-th castle. Your task is to determine the minimum length of the path that visits each castle exactly once and returns to the starting castle (also known as the Traveling Salesman Problem). Input The input consists of a single test case formatted as follows: N L_{11} L_{12} ... L_{1N} L_{21} L_{22} ... L_{2N} ... L_{N1} L_{N2} ... L_{NN} The first line consists of an integer N (2 leq N leq 20). The next N lines each consist of N integers L_{ij} (1 leq L_{ij} leq 100), which represents the length of the bridge between the i-th and j-th castle. It is guaranteed that L_{ij} = L_{ji} and L_{ii} = 0 for all 1 leq i, j leq N. Output Print a single integer which is the minimum length of the path that visits each castle exactly once and returns to the starting castle. Examples Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 Input 3 0 29 20 29 0 35 20 35 0 Output 84","solution":"import itertools def solve_tsp(N, bridges): Solves the Traveling Salesman Problem for a given number of castles and bridge lengths. Parameters: N (int): Number of castles bridges (list[list[int]]): Matrix representing the lengths of the bridges between castles Returns: int: Minimum length of the path that visits each castle exactly once and returns to the starting castle # All permutations of visiting castles (not including the starting/ending castle) castles = [i for i in range(1, N)] permutations = itertools.permutations(castles) min_path_length = float(\'inf\') # Iterate over all permutations to find the shortest path for permutation in permutations: current_path_length = 0 current_castle = 0 # Start from castle 0 # Calculate the length of the current path for next_castle in permutation: current_path_length += bridges[current_castle][next_castle] current_castle = next_castle # Adding the return to the starting castle current_path_length += bridges[current_castle][0] # Update the minimum path length min_path_length = min(min_path_length, current_path_length) return min_path_length"},{"question":"You are given an integer array. Your task is to find all unique quadruplets in the array which gives the sum of zero. Input The input will be an array of integers nums of size n. Output Output should be a list of all unique quadruplets in the format: [a, b, c, d] where a, b, c, d are distinct elements in the array such that a + b + c + d = 0. Quadruplets should be sorted in non-descending order, and the list of quadruplets should be sorted lexicographically. Constraints 1 ≤ n ≤ 200 -10^6 ≤ nums[i] ≤ 10^6 SAMPLE INPUT [-1, 0, 1, 2, -1, -4] SAMPLE OUTPUT [-1, -1, 0, 2] [-1, 0, 1, 0] Explanation In the given input array [-1, 0, 1, 2, -1, -4], there are two unique quadruplets which sum to zero: 1. The quadruplet [-1, -1, 0, 2] adds up to 0. 2. The quadruplet [-1, 0, 1, 0] also adds up to 0. Both quadruplets are unique and sorted in ascending order, so they are part of the output.","solution":"def four_sum(nums): def k_sum(nums, target, k): res = [] if not nums: return res average_value = target // k if average_value < nums[0] or nums[-1] < average_value: return res if k == 2: return two_sum(nums, target) for i in range(len(nums)): if i == 0 or nums[i - 1] != nums[i]: for subset in k_sum(nums[i + 1:], target - nums[i], k - 1): res.append([nums[i]] + subset) return res def two_sum(nums, target): res = [] lo, hi = 0, len(nums) - 1 while lo < hi: curr_sum = nums[lo] + nums[hi] if curr_sum < target or (lo > 0 and nums[lo] == nums[lo - 1]): lo += 1 elif curr_sum > target or (hi < len(nums) - 1 and nums[hi] == nums[hi + 1]): hi -= 1 else: res.append([nums[lo], nums[hi]]) lo += 1 hi -= 1 return res nums.sort() return k_sum(nums, 0, 4)"},{"question":"Mizuha has recently moved to a new city and joined a running club. The club organizes a challenge where members record the time they take to run a specified distance. Members are then ranked based on their recorded times, where a faster time gives a higher rank. Given that exactly N members participate in the challenge, your task is to determine Mizuha\'s rank based on her recorded time. Constraints * 1 leq N leq 100 * 1 leq T_i leq 1440 (in minutes) * (T_i) is an integer. Input The first line contains an integer N, representing the number of challenge participants. The second line contains N space-separated integers, where the i-th integer ( T_i ) is the time recorded by the i-th participant. The last line contains an integer T, representing Mizuha\'s recorded time. Output Print the rank of Mizuha. The rank is defined as the number of participants who recorded a time less than or equal to Mizuha\'s time, inclusive of her own. Examples Input 5 300 450 200 400 350 400 Output 4 Input 3 1500 1200 900 1300 Output 3","solution":"def mizuha_rank(N, times, T): Determines the rank of Mizuha based on her recorded time. Parameters: N (int): The number of challenge participants. times (list of int): A list of recorded times by each participant. T (int): The recorded time of Mizuha. Returns: int: The rank of Mizuha. # Include Mizuha\'s recorded time in the list times.append(T) # Sort the list in ascending order times.sort() # Rank is the 1-based index of Mizuha\'s time return times.index(T) + 1"},{"question":"There are n envelopes, each containing a unique integer from 1 to n. The envelopes are initially sorted in ascending order based on the integers they contain. You are allowed to swap the integers inside any two envelopes an unlimited number of times. The objective is to sort the integers in descending order. Write a function that, given n and an array representing the integers in the envelopes, returns the minimum number of swaps required to sort the integers in descending order. Input - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of envelopes. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ n) representing the integers in the envelopes. Output - Output a single integer, the minimum number of swaps required. Example Input: 5 1 2 3 4 5 Output: 2 Explanation: To sort the integers in descending order, we can swap: 1 with 5, resulting in the sequence [5, 2, 3, 4, 1] 2 with 4, resulting in the sequence [5, 4, 3, 2, 1]","solution":"def min_swaps_to_sort_desc(n, arr): Returns the minimum number of swaps required to sort the input array in descending order. arr_enumerated = [(value, index) for index, value in enumerate(arr)] arr_enumerated.sort(reverse=True, key=lambda x: x[0]) visited = [False] * n swaps = 0 for i in range(n): if visited[i] or arr_enumerated[i][1] == i: continue cycle_size = 0 x = i while not visited[x]: visited[x] = True x = arr_enumerated[x][1] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"Problem Statement You are given a list of N students who need to be assigned into M groups for a class project. Each student can work with certain other students based on their preferences. Additionally, some students have schedule conflicts and cannot work during certain time slots. The aim is to form the maximum number of groups possible, with each group containing at least G students, while adhering to the preferences and schedule constraints. **Input Format:** - The first line contains three integers N, M, and G. - N (1 ≤ N ≤ 200) is the number of students. - M (1 ≤ M ≤ 50) is the number of groups. - G (1 ≤ G ≤ 5) is the minimum number of students required in each group. - The next N lines contain N space-separated integers representing a matrix P of size N x N. - P[i][j] = 1 if student i can work with student j. - P[i][j] = 0 if student i cannot work with student j. - The next N lines contain M space-separated integers representing a matrix S of size N x M. - S[i][k] = 1 if student i can work in group k\'s time slot. - S[i][k] = 0 if student i cannot work in group k\'s time slot. **Output Format:** - Output a single integer representing the maximum number of groups that can be formed. **Example Input:** ``` 5 3 2 1 1 0 1 1 1 1 1 1 0 0 1 1 0 0 1 1 0 1 1 1 0 0 1 1 1 1 0 0 1 1 1 0 1 0 1 1 1 1 0 ``` **Example Output:** ``` 2 ``` **Explanation:** We need to form the maximum number of groups with each group having at least 2 students. Given the preferences and schedule constraints: - Group 1 can include students 1 and 2. - Group 2 can include students 3 and 4. Thus, we can form 2 groups following the given constraints. --- Note: Ensure the solution adheres to the constraints and efficiently handles potential edge cases, such as a large number of students and strict preferences or schedule conflicts.","solution":"def form_groups(N, M, G, P, S): Returns the maximum number of groups that can be formed # Step 1: Initialize the count of groups groups_formed = 0 # Step 2: Initialize list to check if a student is already used in a group used_students = [False] * N # Step 3: Iterate over each group slot for k in range(M): # Find all students who can work in this group time slot possible_students = [i for i in range(N) if S[i][k] == 1] # Construct potential group list group_candidates = [] # Step 4: Check for each combination of students if they can form a group for i in range(len(possible_students)): for j in range(i + 1, len(possible_students)): student1 = possible_students[i] student2 = possible_students[j] if (P[student1][student2] == 1 and not used_students[student1] and not used_students[student2]): group_candidates.append((student1, student2)) # Step 5: If we have enough candidates to form the required size group if len(group_candidates) >= G / 2: groups_formed += 1 # Mark all used students to not consider them again for (student1, student2) in group_candidates: used_students[student1] = True used_students[student2] = True # Return the maximum number of groups formed return groups_formed # Read input data as described in the problem statement # Example usage (should be replaced in actual use with dynamic input reading): N = 5 M = 3 G = 2 P = [ [1, 1, 0, 1, 1], [1, 1, 1, 1, 0], [0, 1, 1, 0, 0], [1, 1, 0, 1, 1], [1, 0, 0, 1, 1], ] S = [ [1, 1, 0], [0, 1, 1], [1, 0, 1], [0, 1, 1], [1, 1, 0], ] # Example Output print(form_groups(N, M, G, P, S)) # Output should be 2"},{"question":"You are given a list of integers representing the heights of buildings aligned in a row. You need to determine how many buildings receive direct sunlight if the sunlight comes from the left side (i.e., from the west). A building receives direct sunlight if there are no taller buildings to its left. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of buildings. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 100), the heights of the buildings. Output Print a single integer — the number of buildings receiving direct sunlight. Examples Input 6 3 1 4 2 5 7 Output 4 Note In the sample, buildings with heights 3, 4, 5, and 7 receive direct sunlight as there are no taller buildings to their left blocking the sunlight. Building with height 1 does not receive direct sunlight because it is blocked by the building with height 3, and building with height 2 is blocked by building with height 4.","solution":"def count_buildings_receiving_sunlight(n, heights): Function to count the number of buildings receiving direct sunlight from the left side. Parameters: n (int): Number of buildings. heights (list of int): List of integers representing the heights of the buildings. Returns: int: Number of buildings receiving direct sunlight. if n == 0: return 0 count = 1 # The first building always receives direct sunlight max_height = heights[0] for i in range(1, n): if heights[i] > max_height: count += 1 max_height = heights[i] return count"},{"question":"Chef was tasked with creating a new ranking algorithm for the participants of a coding competition. Each contestant participated in multiple games, and each game has a score. Chef wants to compute the median score for each participant, which will be used as their final rank. The median of a list of numbers is the middle one when they are sorted in non-decreasing order (if the size of the list is odd), or the average of the two middle ones (if the size of the list is even). You are given the scores of each participant and need to help Chef by writing a program to compute the median score for each participant. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer P — the number of participants. For each participant, the next line starts with an integer G_i — the number of games the i-th participant has played. Then G_i integers follow, denoting the scores in each game that the i-th participant has played. ------ Output ------ For each test case, output P lines, each containing the median score of the i-th participant. ------ Constraints ------ 1 leq T leq 100 1 leq P leq 1000 1 leq G_i leq 1000 1 leq Score leq 10^6 for any score ------ Sample Input 1 ------ 2 3 3 10 30 20 4 15 45 10 25 2 100 200 2 1 50 5 90 80 70 60 50 ------ Sample Output 1 ------ 20 20 150 50 70 ------ Explanation 1 ------ Example case 1: - For participant 1, the scores are [10, 30, 20], their median score is 20. - For participant 2, the scores are [15, 45, 10, 25], their median score is 20. - For participant 3, the scores are [100, 200], their median score is 150. Example case 2: - For participant 1, the score is [50], their median score is 50. - For participant 2, the scores are [90, 80, 70, 60, 50], their median score is 70.","solution":"def find_median(scores): Returns the median of the list of scores. scores.sort() n = len(scores) mid = n // 2 if n % 2 == 0: return (scores[mid - 1] + scores[mid]) / 2 else: return scores[mid] def compute_medians(input_string): Processes the input string and returns the medians for each participant in each test case. input_lines = input_string.strip().split(\'n\') index = 0 T = int(input_lines[index]) index += 1 results = [] for _ in range(T): P = int(input_lines[index]) index += 1 for _ in range(P): participant_data = list(map(int, input_lines[index].split())) G_i = participant_data[0] scores = participant_data[1:] median = find_median(scores) results.append(median) index += 1 return results"},{"question":"You are given a list of integers representing the heights of students in a line. Each student wants to look at the tallest student standing to their right. Create a program that takes an array of integers as input and outputs another array of the same length where the value at each index `i` is the height of the tallest student to the right of the student at index `i`. If there is no student to the right, the value should be -1. Input The input consists of multiple datasets. Each dataset starts with an integer `n` (1 ≤ n ≤ 100,000) indicating the number of students, followed by a line with `n` integers representing the heights of the students. The end of the input is indicated by a single line containing a zero. Output For each dataset, output a single line with `n` integers representing the heights of the tallest students to the right of each student. Example Input 5 5 3 8 3 2 4 2 7 4 3 1 10 0 Output 8 8 3 2 -1 7 4 3 -1 -1","solution":"def find_tallest_right(n, heights): Given the number of students and their heights, this function returns an array where each value at index `i` is the height of the tallest student to the right of the student at index `i`. If there is no student to the right, the function will return -1 for that index. :param n: Number of students :param heights: List of students\' heights :return: List of tallest heights to the right if n == 0: return [] tallest_right = [-1] * n max_height = -1 for i in range(n - 1, -1, -1): tallest_right[i] = max_height if heights[i] > max_height: max_height = heights[i] return tallest_right def process_datasets(inputs): Processes multiple datasets of heights to find the tallest student to the right for each student in each dataset. :param inputs: List of integers where each dataset starts with an integer `n` followed by `n` integers representing the heights of students. The end of the input is indicated by a single line containing a zero. :return: List of results for each dataset as described. results = [] idx = 0 while idx < len(inputs): n = inputs[idx] if n == 0: break heights = inputs[idx + 1: idx + 1 + n] results.append(find_tallest_right(n, heights)) idx += n + 1 return results"},{"question":"You are given an integer array A of length N. Answer the following Q queries: - Query i (1 leq i leq Q): You will be given integers l_i and r_i (1 leq l_i < r_i leq N). Consider the subarray of A starting at index l_i and ending at index r_i (both inclusive). Determine the number of distinct elements in this subarray. -----Notes----- A subarray of an array T is a contiguous segment of T. -----Constraints----- - 2 leq N leq 10^5 - 1 leq Q leq 10^5 - 1 leq A[i] leq 10^9 (1 leq i leq N) - 1 leq l_i < r_i leq N -----Input----- Input is given from Standard Input in the following format: N Q A_1 A_2 ... A_N l_1 r_1 : l_Q r_Q -----Output----- Print Q lines. The i-th line should contain the answer to the i-th query. -----Sample Input----- 5 3 1 2 1 3 2 1 3 2 5 1 5 -----Sample Output----- 2 3 3 - Query 1: the subarray of A starting at index 1 and ending at index 3 is [1, 2, 1]. In this subarray, there are 2 distinct elements: 1 and 2. - Query 2: the subarray of A starting at index 2 and ending at index 5 is [2, 1, 3, 2]. In this subarray, there are 3 distinct elements: 1, 2, and 3. - Query 3: the subarray of A starting at index 1 and ending at index 5 is [1, 2, 1, 3, 2]. In this subarray, there are 3 distinct elements: 1, 2, and 3.","solution":"def count_distinct_elements(N, Q, A, queries): Returns the number of distinct elements for each subarray specified by the queries. Parameters: N (int) : Length of array A Q (int) : Number of queries A (list of int) : An integer array of length N queries (list of tuple) : List of tuples where each tuple contains two integers (l, r) Returns: result (list of int) : List of number of distinct elements for each subarray specified by the queries results = [] for query in queries: l, r = query subarray = A[l-1:r] distinct_count = len(set(subarray)) results.append(distinct_count) return results"},{"question":"Dr. Sarah Templeton has discovered a unique type of tree in an alien forest on the exoplanet Z-49b. This tree is quite peculiar in its structure: starting from the base (root), the branches form a complete binary tree, but some branches are invisible, rendering them effectively missing. The goal is to determine the minimal number of additional branches (edges) required to transform this unique tree into a fully connected binary tree of the same height. A complete binary tree is a type of binary tree where every level, except possibly the last, is completely filled, and all nodes are as far left as possible. Your task is to write a program that will calculate the minimum number of edges to add to the tree to make it a complete binary tree. The tree is represented as an undirected graph with nodes numbered from 1 to n (1 being the root). The input describes the connections between the existing nodes. # Input - The first line contains a single integer n, the number of nodes in the tree (1 ≤ n ≤ 1000). - The following n-1 lines each contain two space-separated integers u and v denoting an undirected edge between node u and node v (1 ≤ u, v ≤ n, u ≠ v). # Output - Print a single integer — the minimal number of edges to add to make the tree a complete binary tree. # Examples Input ``` 7 1 2 1 3 2 4 2 5 3 6 3 7 ``` Output ``` 0 ``` Input ``` 5 1 2 1 3 2 4 4 5 ``` Output ``` 2 ``` # Note In the first example, the nodes form a complete binary tree, so no additional branches are needed. In the second example, the tree is not complete, even though it has enough nodes to potentially form a complete tree of height 2 (full binary tree with 7 nodes). The two missing connections would be from node 3 to new nodes, bringing the total number of nodes to 7.","solution":"def min_additional_edges_to_complete_binary_tree(n, edges): # Function to calculate the height of a complete binary tree with n nodes def height_of_complete_binary_tree(n): height = 0 while (1 << height) - 1 < n: height += 1 return height # Function to calculate the expected number of nodes in a complete binary tree of a certain height def complete_binary_tree_nodes(height): return (1 << height) - 1 height = height_of_complete_binary_tree(n) expected_nodes = complete_binary_tree_nodes(height) # If the current number of nodes is exactly what is expected for a complete binary tree, return 0 if n == expected_nodes: return 0 # Otherwise, calculate the difference additional_nodes = expected_nodes - n return additional_nodes # Helper function to parse the input def parse_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) edges = [] for line in lines[1:]: u, v = map(int, line.split()) edges.append((u, v)) return n, edges # Example usage if __name__ == \\"__main__\\": input_str = 5 1 2 1 3 2 4 4 5 n, edges = parse_input(input_str) print(min_additional_edges_to_complete_binary_tree(n, edges)) # Output: 2"},{"question":"For a given integer array A = {a_0, a_1, ..., a_{n-1}}, determine whether the array is monotonic (either entirely non-increasing or non-decreasing). A monotonic array is defined as an array in which all the elements are either entirely non-increasing or entirely non-decreasing. Constraints * 1 leq n leq 100,000 * -10^9 leq a_i leq 10^9 Input The input is given in the following format. n a_0 ; a_1 ; ... ; a_{n-1} The number of elements n and each element a_i are given in single line respectively. Output Print `\\"True\\"` if the array is monotonic, else print `\\"False\\"`. Example Input 5 1 2 2 3 4 Output True Input 4 6 5 5 2 Output True Input 3 1 3 2 Output False","solution":"def is_monotonic(A): Determines whether the array A is monotonic. Args: A : list of int Returns: bool : True if the array is monotonic, False otherwise. if not A: return True increasing = decreasing = True for i in range(len(A) - 1): if A[i] < A[i + 1]: decreasing = False if A[i] > A[i + 1]: increasing = False return increasing or decreasing # Example inputs for testing: # n = 5 # A = [1, 2, 2, 3, 4] # Output: True # n = 4 # A = [6, 5, 5, 2] # Output: True # n = 3 # A = [1, 3, 2] # Output: False"},{"question":"In a fairyland, there is a network of enchanted stones connected by magical paths. Each stone has a certain magical energy value associated with it. The fairy queen wishes to test the connectivity of certain pairs of stones, considering only those connections that have at least a specified level of total magical energy. Given an undirected graph with N stones and M magical paths between them, each path has a magical energy value. You will process Q queries, each query provides you with three integers U, V, and W. For each query, determine if there exists a path between stone U and stone V such that the sum of the magical energy values of the paths in this path is at least W. ------- Input ------- The first line of the input contains two integers N and M, denoting the number of stones and magical paths, respectively. The next M lines each contain three integers A, B, and E, denoting a magical path between stone A and stone B with magical energy value E. The next line contains a single integer Q, denoting the number of queries. The next Q lines each contain three integers U, V, and W, representing a query about the existence of a path between stones U and V with at least W total magical energy. ------- Output ------- For each query, print \\"YES\\" if such a path exists, otherwise \\"NO\\". ------- Constraints ------- 1 ≤ N ≤ 10^4 1 ≤ M ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ A, B, U, V ≤ N 1 ≤ E, W ≤ 10^9 ------- Sample Input -------- 6 7 1 2 4 2 3 5 3 4 10 4 5 1 5 6 3 1 6 7 2 5 9 3 1 5 15 2 6 8 4 1 10 ------- Sample Output -------- NO YES YES ------- Explanation -------- Query 1: Path 1-2-3-4-5, total energy is 4+5+10+1=20, which is greater than or equal to 15. Query 2: Path 2-3-4-5-6, total energy is 5+10+1+3=19, which is greater than or equal to 8. Query 3: Path 4-3-2-1, total energy is 10+5+4=19, which is greater than or equal to 10.","solution":"from collections import defaultdict, deque def can_reach_with_energy(N, M, edges, queries): graph = defaultdict(list) for A, B, E in edges: graph[A].append((B, E)) graph[B].append((A, E)) def bfs(U, V, W): queue = deque([(U, 0)]) visited = set([U]) while queue: node, total_energy = queue.popleft() if node == V and total_energy >= W: return \\"YES\\" for neighbor, energy in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, total_energy + energy)) return \\"NO\\" results = [] for U, V, W in queries: visited_queries = set() if (U, V, W) not in visited_queries: visited_queries.add((U, V, W)) results.append(bfs(U, V, W)) return results # Example usage: # edges = [(1, 2, 4), (2, 3, 5), (3, 4, 10), (4, 5, 1), (5, 6, 3), (1, 6, 7), (2, 5, 9)] # queries = [(1, 5, 15), (2, 6, 8), (4, 1, 10)] # N, M = 6, 7 # print(can_reach_with_energy(N, M, edges, queries)) # Output: [\'NO\', \'YES\', \'YES\']"},{"question":"You\'re given an integer array `nums` and an integer `target`. Write a function that returns all unique combinations of `nums` where the chosen numbers sum to `target`. You may return the combinations in any order. The same number from `nums` may be chosen from an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different. It is guaranteed that there is no duplicate number in `nums`. For example, given integer array `nums` = `[2, 3, 6, 7]` and `target` = `7`, A solution set is: ``` [ [2, 2, 3], [7] ] ``` If `nums` = `[2, 3, 5]` and `target` = `8`, A solution set is: ``` [ [2, 2, 2, 2], [2, 3, 3], [3, 5] ] ``` # Input: - The first line contains an integer `t` (`1 ≤ t ≤ 100`) — the number of test cases. - Each test case consists of two lines: - The first line contains two integers `n` (`1 ≤ n ≤ 30`) and `target` (`1 ≤ target ≤ 40`), where `n` is the number of elements in the array. - The second line contains `n` distinct positive integers representing the elements of `nums`. # Output: For each test case, print the unique combinations of `nums` that sum to `target`. Each combination should be printed on a new line, with each element separated by a space. Combinations themselves should be separated by a blank line. If no combination exists, print `No combination`. # Example Input: ``` 2 4 7 2 3 6 7 3 8 2 3 5 ``` Output: ``` 2 2 3 7 2 2 2 2 2 3 3 3 5 ```","solution":"def combination_sum(nums, target): def backtrack(remaining, comb, start): if remaining == 0: results.append(list(comb)) return elif remaining < 0: return for i in range(start, len(nums)): comb.append(nums[i]) backtrack(remaining - nums[i], comb, i) comb.pop() results = [] backtrack(target, [], 0) return results def process_test_cases(t, test_cases): results = [] for case in test_cases: n, target, nums = case combinations = combination_sum(nums, target) if combinations: case_result = \\"n\\".join(\\" \\".join(map(str, comb)) for comb in combinations) else: case_result = \\"No combination\\" results.append(case_result) return results"},{"question":"Given an array of integers, you are to find out whether it is possible to select a subset of the integers such that their sum is odd. ------ Input ------ The first line contains an integer n (1 ≤ n ≤ 1000), which denotes the number of integers in the array. The second line contains n space-separated integers a_1, a_2, ldots, a_n (-10^9 ≤ a_i ≤ 10^9). ------ Output ------ Print YES if it is possible to select a subset of the integers such that their sum is odd, otherwise print NO. ------ Example Input ------ 4 1 2 3 4 ------ Example Output ------ YES ------ Explanation ------ One possible subset with odd sum is {1, 2} (sum is 3). ------ Example Input ------ 3 2 4 6 ------ Example Output ------ NO ------ Explanation ------ It is not possible to select any subset with an odd sum because all elements are even.","solution":"def is_odd_subset_sum_possible(n, arr): Returns \'YES\' if it is possible to select a subset of the integers such that their sum is odd, otherwise returns \'NO\'. has_odd = any(x % 2 != 0 for x in arr) has_even = any(x % 2 == 0 for x in arr) if has_odd: if (has_even and n > 1) or (not has_even and n % 2 != 0): return \\"YES\\" else: return \\"NO\\" else: return \\"NO\\""},{"question":"You are tasked with developing a simulation for a new type of traffic control system. The system aims to control the flow of cars through a series of crossroads in a city using real-time traffic sensors. Cars at each crossroad can only move in four directions: North, South, East, and West. Each car has a certain destination and it follows the shortest available path to reach it. However, due to heavy traffic, a car might have to wait at a crossroad to proceed. The traffic control system ensures that no more than one car enters a crossroad from any direction per second. Write a program to determine the minimum time required for all cars to reach their respective destinations without causing a gridlock. -----Input----- The first line contains a single integer T (1 le T le 100) — the number of test cases. Then the test cases follow. The first line of each test case contains two integers N and M (1 le N, M le 50) — the dimensions of the city grid. The next N lines each contain M characters, representing the city map, where: - \'.\' denotes an empty crossroad, - \'#\' denotes an impassable crossroad, - \'S\' denotes the starting position of a car, - \'E\' denotes the target position of a car. It is guaranteed that each test case will have exactly one \'S\' and one \'E\' on the map. -----Output----- For each test case, print one integer — the minimum number of seconds required for the car to reach its destination, or -1 if there is no possible way to reach the destination. -----Example----- Input 2 3 3 S.. .#. ..E 3 3 S#. # .#E Output 4 -1","solution":"from collections import deque def min_seconds_to_reach_destination(city_map): N = len(city_map) M = len(city_map[0]) # Helper functions to find \'S\' and \'E\' positions def find_positions(): start, end = None, None for i in range(N): for j in range(M): if city_map[i][j] == \'S\': start = (i, j) elif city_map[i][j] == \'E\': end = (i, j) return start, end start, end = find_positions() if not start or not end: return -1 # invalid input as there must be exactly one \'S\' and one \'E\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = set() queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited.add(start) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and city_map[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # If no path found to reach \'E\' def min_time_for_cars(test_cases): results = [] for case in test_cases: results.append(min_seconds_to_reach_destination(case)) return results def read_input(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): N, M = int(data[idx]), int(data[idx + 1]) idx += 2 city_map = [] for _ in range(N): city_map.append(data[idx]) idx += 1 test_cases.append(city_map) return test_cases if __name__ == \'__main__\': test_cases = read_input() results = min_time_for_cars(test_cases) for result in results: print(result)"},{"question":"You are given a string representing a mathematical expression in infix notation which contains integers and the operators `+`, `-`, `*`, and `/`. Your task is to evaluate the expression and return the result as an integer. Note that the input is guaranteed to be a valid expression and does not contain any spaces. Example 1: Input: \\"3+5*2\\" Output: 13 Example 2: Input: \\"10+2*6\\" Output: 22 Example 3: Input: \\"100*2+12\\" Output: 212 Example 4: Input: \\"100*(2+12)/14\\" Output: 100 Your Task: You don\'t need to read input or print anything. Your task is to implement the function `evaluateExpression(expr)` which takes a string `expr` representing the mathematical infix expression as input, and returns an integer representing the evaluated value of the expression. Expected Time Complexity: O(n), where n is the length of the string. Expected Auxiliary Space: O(n), for the stack used in evaluation. Constraints: 1 <= len(expr) <= 10^5","solution":"def evaluateExpression(expr): Evaluates a given mathematical infix expression and returns the result as an integer. def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def applyOp(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return int(a / b) # Ensure the result is an integer values = [] # Stack to store integers ops = [] # Stack to store operators i = 0 while i < len(expr): if expr[i] == \'(\': ops.append(expr[i]) elif expr[i].isdigit(): val = 0 while i < len(expr) and expr[i].isdigit(): val = (val * 10) + int(expr[i]) i += 1 values.append(val) i -= 1 elif expr[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(applyOp(val1, val2, op)) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(expr[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(applyOp(val1, val2, op)) ops.append(expr[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(applyOp(val1, val2, op)) return values[-1]"},{"question":"Snowflake, the famous snow sculptor, loves arranging snowflakes in patterns. This year, he decided to create a special magic snowflake formation. Imaginary lines connect several unique points in a 2D plane, and Snowflake\'s goal is to ensure the formation meets specific criteria. Given `n` unique points in a 2D plane, Snowflake needs to check whether it is possible to draw lines between pairs of points such that the following conditions are met: 1. Every point is connected to exactly two other points. 2. No two lines should intersect except at the points. Write a program to determine whether such a formation is possible. # Input The input consists of: - `n`, an integer (3 ≤ n ≤ 10^5), representing the number of points. - Followed by `n` lines, each containing two integers `x` and `y` (-10^9 ≤ x, y ≤ 10^9), representing the coordinates of each point. # Output Print one line containing \\"POSSIBLE\\" if Snowflake can create the desired formation, otherwise print \\"IMPOSSIBLE\\". # Example Input ``` 4 0 0 2 2 2 0 0 2 ``` Output ``` POSSIBLE ``` Input ``` 5 1 1 2 2 3 3 4 4 5 5 ``` Output ``` IMPOSSIBLE ``` # Note In the first example, Snowflake can connect points (0,0) to (2,2) and (2,0) to (0,2) without any lines intersecting. Thus, the formation is possible. In the second example, it is impossible to connect all points without intersections. Therefore, the formation is not possible.","solution":"def is_possible_formation(n, points): Determines if it is possible to create a formation such that every point is connected to exactly two other points in a way that no two lines intersect except at the points. # For this specific problem, the key observation is that the number of points # (n) must be even to arrange them in a cycle where each point is connected to # exactly two other points without any intersections. if n % 2 == 0: return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\""},{"question":"**Problem Statement** A game development company is implementing an inventory system for their new role-playing game. Players can collect items such as Healing Potions, Magic Scrolls, Swords, and Shields. Each type of item has a specific weight, and players have a maximum weight limit they can carry. Each type of item can also appear multiple times in the inventory list. The company needs a system to manage the inventory and ensure players do not exceed their weight limit. Your task is to write a program to help the game developers determine whether the player can carry all the items given their weight limit. **Item Weights**: - Healing Potion: 1 unit - Magic Scroll: 2 units - Sword: 3 units - Shield: 4 units **Input**: - An integer `W` representing the weight limit the player can carry. - An integer `N` representing the number of items in the inventory. - Next `N` lines, each containing a string `type` representing the type of item where `type` can be one of \\"Healing Potion\\", \\"Magic Scroll\\", \\"Sword\\", or \\"Shield\\". **Output**: - A single line: \\"Yes\\" if the player can carry all the items without exceeding the weight limit, otherwise \\"No\\". **Constraints**: - 1 ≤ W ≤ 1000 - 1 ≤ N ≤ 100 **Example**: **Input**: ``` 10 5 Healing Potion Magic Scroll Sword Healing Potion Shield ``` **Output**: ``` Yes ``` **Explanation**: The total weight of the items is 1 (Healing Potion) + 2 (Magic Scroll) + 3 (Sword) + 1 (Healing Potion) + 4 (Shield) = 11 units. Since 11 > 10 (the weight limit), the output is \\"No\\". **Example**: **Input**: ``` 15 6 Healing Potion Magic Scroll Sword Healing Potion Shield Sword ``` **Output**: ``` Yes ``` **Explanation**: The total weight of the items is 1 (Healing Potion) + 2 (Magic Scroll) + 3 (Sword) + 1 (Healing Potion) + 4 (Shield) + 3 (Sword) = 14 units. Since 14 ≤ 15 (the weight limit), the output is \\"Yes\\".","solution":"def can_carry_all_items(W, N, items): Determines if the player can carry all items without exceeding the weight limit. :param W: int, maximum weight limit the player can carry :param N: int, number of items :param items: list of strings, types of items in the inventory :return: str, \\"Yes\\" if the player can carry all items, otherwise \\"No\\" item_weights = { \\"Healing Potion\\": 1, \\"Magic Scroll\\": 2, \\"Sword\\": 3, \\"Shield\\": 4 } total_weight = 0 for item in items: total_weight += item_weights[item] return \\"Yes\\" if total_weight <= W else \\"No\\""},{"question":"Create a program that determines if a given 8x8 chessboard setup is a valid setup for a game of chess. Input A chessboard setup consisting of 8 lines, each with 8 characters. Each character represents a chess piece: \'K\' for King, \'Q\' for Queen, \'R\' for Rook, \'B\' for Bishop, \'N\' for Knight, \'P\' for Pawn. A lowercase character represents a black piece, while an uppercase letter represents a white piece. An empty square is denoted by a \'.\'. Output Output \\"Valid\\" if the board setup constitutes a valid configuration according to standard chess rules. Otherwise, output \\"Invalid\\". Examples Input rnbqkbnr pppppppp ........ ........ ........ ........ PPPPPPPP RNBQKBNR Output Valid Input rnbqkbnr pp.ppppp ....Q... ........ ........ ........ PPPPPPPP RNBQKBNR Output Invalid","solution":"def valid_chessboard(board): Determines if an 8x8 chessboard setup is valid for a game of chess. Parameters: board (list of str): A list containing 8 strings, each with 8 characters. Returns: str: \\"Valid\\" if the chessboard setup is valid, otherwise \\"Invalid\\". if len(board) != 8 or any(len(row) != 8 for row in board): return \\"Invalid\\" piece_count = { \'K\': 0, \'Q\': 0, \'R\': 0, \'B\': 0, \'N\': 0, \'P\': 0, \'k\': 0, \'q\': 0, \'r\': 0, \'b\': 0, \'n\': 0, \'p\': 0 } for row in board: for char in row: if char in piece_count: piece_count[char] += 1 if (piece_count[\'K\'] != 1 or piece_count[\'k\'] != 1 or piece_count[\'Q\'] > 1 or piece_count[\'q\'] > 1 or piece_count[\'R\'] > 2 or piece_count[\'r\'] > 2 or piece_count[\'B\'] > 2 or piece_count[\'b\'] > 2 or piece_count[\'N\'] > 2 or piece_count[\'n\'] > 2 or piece_count[\'P\'] > 8 or piece_count[\'p\'] > 8): return \\"Invalid\\" return \\"Valid\\""},{"question":"A company wants to track the usage of its software licenses by its employees. Each employee has a unique ID and may use the software multiple times in a single day. The company has a limited number of licenses available for concurrent use. If an employee tries to use the software when no licenses are available, they are denied access. You are to simulate this scenario and determine how many employees were denied access due to the lack of available licenses on each day. ------ Input Format ------ - The first line of the input contains two integers M (the number of licenses) and D (the number of days). - Each of the next D blocks describes the usage of the software on a specific day: - The first line of the block contains an integer U (the number of usage records for that day). - Each of the following U lines contains a unique employee ID, indicating that the employee tried to use the software. ------ Output Format ------ For each day, output a single integer: the number of employees who were denied access to the software due to the lack of available licenses. ------ Constraints ------ 1 ≤ M ≤ 10^5 1 ≤ D ≤ 30 1 ≤ U ≤ 10^6 1 ≤ Employee ID ≤ 10^9 ------ Sample Input ------ 3 2 5 1 2 3 4 5 4 1 2 3 1 ------ Sample Output ------ 2 1 ------ Explanation ------ On Day 1, there are 3 licenses available: - Employees 1, 2, and 3 use the software, leaving no licenses available. - Employees 4 and 5 are denied access. On Day 2, there are 3 licenses available: - Employees 1, 2, and 3 use the software, leaving no licenses available. - Employee 1 is denied access when they attempt to use the software again.","solution":"def denied_access(M, D, usage_records): Calculate the number of employees denied access each day due to the lack of available licenses. Parameters: M (int): The number of licenses. D (int): The number of days. usage_records (list of list of int): A list where each element is a list of employee IDs for that day. Returns: list of int: The number of employees denied access each day. denied_counts = [] for record in usage_records: available_licenses = M denied_count = 0 for employee_id in record: if available_licenses > 0: available_licenses -= 1 else: denied_count += 1 denied_counts.append(denied_count) return denied_counts # Example usage (should be tested separately): # M = 3 # D = 2 # usage_records = [ # [1, 2, 3, 4, 5], # [1, 2, 3, 1] # ] # print(denied_access(M, D, usage_records)) # Output: [2, 1]"},{"question":"You are given a list of integers. If the length of the list is even, print the list as is; if the length is odd, append the value -1 to the list and then print it. Constraints * The length of the list will be at least 1 and at most 100. * Each element in the list is an integer between -1000 and 1000. Input Input is given from Standard Input in the following format: n a_1 a_2 ... a_n Output Print the resulting list in one line, separated by spaces. Examples Input 3 1 2 3 Output 1 2 3 -1 Input 4 4 5 6 7 Output 4 5 6 7","solution":"def process_list(n, elements): Process the list according to the problem statement. Append -1 if the length of the list is odd. Return the processed list. if n % 2 != 0: elements.append(-1) return elements"},{"question":"Given an array of integers and an integer k, rotate the array to the right by k steps. For example, if the array ar=[1,2,3,4,5,6,7] and k=3, after rotating the array to the right by 3 steps, the array becomes [5,6,7,1,2,3,4]. Function Description Complete the rotateArray function in the editor below. The function must return the array after rotating it to the right by k steps. rotateArray has the following parameter(s): * ar: an array of integers * k: an integer representing the number of steps to rotate the array to the right. Input Format The first line contains an integer, n, denoting the size of the array. The second line contains n space-separated integers representing the array\'s elements. The third line contains the integer k. Constraints 1leq n leq 1000 0leq ar[i] leq 1000 0 leq k leq 1000 Output Format Print the array after rotating it to the right by k steps as a space-separated list. Sample Input 7 1 2 3 4 5 6 7 3 Sample Output 5 6 7 1 2 3 4 Explanation After rotating the array to the right by 3 steps, we get [5,6,7,1,2,3,4].","solution":"def rotateArray(ar, k): Rotates the array to the right by k steps. Parameters: ar (list): Array of integers. k (int): Number of steps to rotate the array to the right. Returns: list: Array after rotating it to the right by k steps. n = len(ar) k = k % n # In case k is greater than n return ar[-k:] + ar[:-k]"},{"question":"You are working on a piece of software that simulates the behavior of a factory with several production lines. Each production line can manufacture one type of product and has a set amount of time and cost associated with producing one unit of its product. There is a global budget for building new production lines, and you need to decide the optimal way to allocate this budget to maximize the production rate while staying within the allocated budget. Each production line can be represented as an (x_i, y_i) pair, where: - x_i is the cost to build the ith production line. - y_i is the time it takes to produce one unit of the product on the ith production line. Given a budget B to build new production lines, determine the maximum number of production lines that can be built. -----Input----- The input consists of: - One line containing two integers n (1 ≤ n ≤ 10^4), the number of available production lines, and B (1 ≤ B ≤ 10^9), the total budget. - n lines, each containing two integers x_i and y_i (1 ≤ x_i, y_i ≤ 10^4), representing the cost and production time of the ith production line. -----Output----- Output a single integer, the maximum number of production lines that can be built within the budget B. -----Examples----- Sample Input: 5 50 10 5 20 8 30 7 25 6 15 9 Sample Output: 3","solution":"def max_production_lines(n, B, production_lines): Determines the maximum number of production lines that can be built within budget B. :param n: Number of available production lines :param B: Total budget :param production_lines: List of tuples (x_i, y_i) representing the cost and production time of each production line :return: Maximum number of production lines that can be built within the budget # Sort the production lines by their cost production_lines.sort(key=lambda x: x[0]) num_lines = 0 total_cost = 0 for cost, time in production_lines: if total_cost + cost <= B: total_cost += cost num_lines += 1 else: break return num_lines"},{"question":"In computer science, a **Palindrome** is a string that reads the same backward as forward. Write a function `isAlmostPalindrome` that determines if a string can become a palindrome by removing at most one character. If it can, the function should return `True`, otherwise it should return `False`. ------ Input Format ------ A single string `s` consisting of lowercase characters. ------ Output Format ------ Output either `True` or `False`. ------ Constraints ------ 1 ≤ |s| ≤ 1000 ----- Sample Input 1 ------ abca ----- Sample Output 1 ------ True ----- Explanation 1 ------ By removing the character \'b\' from \\"abca\\", it becomes \\"aca\\", which is a palindrome. ----- Sample Input 2 ------ abc ----- Sample Output 2 ------ False ----- Explanation 2 ------ There is no way to remove just one character from \\"abc\\" to make it a palindrome.","solution":"def isAlmostPalindrome(s): This function checks if the input string can become a palindrome by removing at most one character. Parameters: s (str): The input string Returns: bool: True if the string can become a palindrome by removing at most one character, False otherwise. def is_palindrome_range(i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Either remove s[left] or s[right] return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True"},{"question":"You are given a string consisting of lowercase letters only. Your task is to transform the given string into a palindrome by adding the minimum number of characters in front of it. A palindrome is a string that reads the same forwards and backwards. ------ Input ------ The input consists of a single line containing a string S of length n (1 leq n leq 10^5). ------ Output ------ Print a single line containing the transformed palindrome string with the minimum number of characters added in front of it. ------ Constraints ------ The given string S consists of lowercase letters (\'a\'-\'z\') only. ------ Sample Input 1 ------ aacecaaa ------ Sample Output 1 ------ aaacecaaa ------ Sample Input 2 ------ abcd ------ Sample Output 2 ------ dcbabcd","solution":"def shortest_palindrome(s): Transforms the given string into a palindrome by adding the minimum number of characters in front of it. if s == s[::-1]: return s n = len(s) # Compute the temporary string to apply KMP on temp = s + \\"#\\" + s[::-1] lps = [0] * len(temp) # KMP preprocessing to create LPS array i = 1 length = 0 while i < len(temp): if temp[i] == temp[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 # The last value of the LPS array gives us the count of characters from the start # that are part of the longest palindromic suffix. characters_to_add = s[(lps[-1]):][::-1] palindrome = characters_to_add + s return palindrome"},{"question":"Write a program that reads two sequences of integers and finds their longest common subsequence. A longest common subsequence (LCS) is a subsequence that appears in both sequences in the same order but not necessarily consecutively. The program should output the length of the LCS. Note Constraints * Each sequence contains between 1 and 100 integers. * Each integer in the sequences is between 0 and 1000. Input In the first line, an integer n is given, representing the number of elements in the first sequence. In the second line, n space-separated integers are provided, representing the elements of the first sequence. In the third line, an integer m is given, representing the number of elements in the second sequence. In the fourth line, m space-separated integers are provided, representing the elements of the second sequence. Output Print the length of the longest common subsequence. Example Input 6 1 2 3 4 1 5 3 4 1 2 1 3 Output 3","solution":"def longest_common_subsequence(seq1, seq2): This function finds the length of the longest common subsequence between two sequences. n = len(seq1) m = len(seq2) # Create a 2D array to store lengths of longest common subsequence. dp = [[0] * (m + 1) for _ in range(n + 1)] # Build the dp array from bottom up. for i in range(1, n + 1): for j in range(1, m + 1): if seq1[i - 1] == seq2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m] # Function to convert input strings to lists and call LCS function def find_lcs_length(input_data): input_lines = input_data.strip().split(\'n\') n = int(input_lines[0].strip()) seq1 = list(map(int, input_lines[1].strip().split())) m = int(input_lines[2].strip()) seq2 = list(map(int, input_lines[3].strip().split())) return longest_common_subsequence(seq1, seq2)"},{"question":"John is an aspiring linguist with a keen interest in ancient scripts. He has recently come across a collection of old manuscripts written in a forgotten language. The language is unique in that it uses an unusual system for numbering its manuscript pages. Each manuscript consists of a single string where each substring represents a number encoded in this forgotten language. John knows that there are exactly two types of symbols used in the language: let\'s call them \'A\' and \'B\'. Any continuous substring of the manuscript, when decoded, corresponds to the numeric value based on the following rules: - \'A\' corresponds to `1`. - \'B\' corresponds to `2`. John believes that the most important information is always found within the substring that has the maximum decoded sum of its numeric values. To help his research, he wants to identify the maximum sum that any substring of a given manuscript can have. Your task is to write a program that will assist John in determining this maximum value. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 1000) – the length of the manuscript string. - The second line contains a string consisting of `n` characters where each character is either \'A\' or \'B\'. # Output - Print a single integer – the maximum sum of any substring of the manuscript. # Examples Example 1: Input ``` 5 ABBBA ``` Output ``` 8 ``` Example 2: Input ``` 3 AAA ``` Output ``` 3 ``` Example 3: Input ``` 4 BBBB ``` Output ``` 8 ``` # Explanation of Examples In the first example, the substring \\"ABBBA\\" has the total sum of `1 + 2 + 2 + 2 + 1 = 8`, which is the highest possible in this case. In the second example, the entire string \\"AAA\\" has the sum of `1 + 1 + 1 = 3`. In the third example, the whole string \\"BBBB\\" sums up to `2 + 2 + 2 + 2 = 8`.","solution":"def max_decoded_sum(n, manuscript): Returns the maximum sum of any substring of the manuscript. max_sum = 0 current_sum = 0 for char in manuscript: if char == \'A\': current_sum += 1 elif char == \'B\': current_sum += 2 if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given n sticks of varying lengths and an integer x. You need to determine if there is a subset of these sticks such that the sum of their lengths is exactly x. Write a function `canFormSubsetWithSum` that takes an integer x and a list of integers representing the lengths of the sticks as input, and returns `True` if there is such a subset, otherwise returns `False`. Input - An integer x (1 ≤ x ≤ 10^6) which denotes the desired length. - A list of integers representing the lengths of the sticks (1 ≤ length of each stick ≤ 10^5 and the number of sticks ≤ 100). Output - Return `True` if there is a subset of sticks that sum up exactly to x, otherwise return `False`. Examples Input x = 10 lengths = [1, 2, 3, 4, 5, 6] Output True Input x = 11 lengths = [1, 3, 5, 9] Output False","solution":"def canFormSubsetWithSum(x, lengths): Determines if there is a subset of sticks with lengths that sum up to exactly x. Args: x (int): The desired sum of lengths. lengths (list of int): The list of stick lengths. Returns: bool: True if there is a subset that sums up to x, otherwise False. n = len(lengths) # Use dynamic programming where dp[j] will be True if sum j can be formed using the sticks. dp = [False] * (x + 1) dp[0] = True # A sum of 0 can always be formed by using an empty subset for length in lengths: for j in range(x, length - 1, -1): if dp[j - length]: dp[j] = True return dp[x]"},{"question":"A company has a number of projects with varying profit values associated with them. Each project can either have a positive or negative profit value (negative values indicating a potential loss). The company wants to undertake a specific number of projects in a way that maximizes its profit. Given an array `P` of size `N` representing the profit values of the projects, and an integer `K` representing the maximum number of projects that can be undertaken, write a function to determine the maximum profit the company can achieve by selecting up to `K` projects. **Example 1:** Input: N = 5, K = 3 P[] = {10, -5, 15, 20, -10} Output: 45 Explanation: The company can undertake projects with profit values 10, 15, and 20, achieving a total profit of 45. **Example 2:** Input: N = 4, K = 2 P[] = {-3, -1, 2, -2} Output: 2 Explanation: The company can undertake the project with profit value 2, achieving a total profit of 2. **Your Task:** You don\'t need to read input or print anything. Complete the function `maxProjectProfit()` which takes the array `P[]`, its size `N`, and the integer `K` as inputs, and returns the maximum profit the company can achieve by undertaking up to `K` projects. **Expected Time Complexity:** O(N log N) **Expected Space Complexity:** O(1) **Constraints:** 1 ≤ N ≤ 100,000 1 ≤ K ≤ 100,000 -1,000,000 ≤ P[i] ≤ 1,000,000","solution":"def maxProjectProfit(N, K, P): Determine maximum profit by selecting up to K projects from array P of size N. Args: N (int): Number of projects. K (int): Maximum number of projects to be undertaken. P (List[int]): Array representing the profit values of the projects. Returns: int: Maximum profit achievable by selecting up to K projects. # Sort the list in descending order to prioritize high profits P.sort(reverse=True) # Select the top K projects selected_profits = P[:K] # Calculate the maximum profit by summing up the selected profits max_profit = sum(profit for profit in selected_profits if profit > 0) return max_profit"},{"question":"You are given an array of n integers. Your task is to find the minimum length of the subarray that needs to be sorted (in non-decreasing order) so that the entire array becomes sorted. If the array is already sorted, the length should be 0. A subarray is defined as a contiguous part of an array. -----Input----- The first line contains a single integer t (1 leq t leq 1000) — the number of test cases. The first line of each test case contains a single integer n (1 leq n leq 100) — the length of the array. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^4) — the elements of the array. -----Output----- For each test case, output the minimum length of the subarray that needs to be sorted so that the entire array becomes sorted. If the array is already sorted, output 0. -----Example----- Input 4 3 1 3 2 5 1 2 3 4 5 6 5 6 3 4 8 9 7 1 3 5 7 2 6 8 Output 2 0 4 5 -----Note----- In the first test case, sorting the subarray [3, 2] will make the entire array sorted. The length of this subarray is 2. In the second test case, the array is already sorted, so the answer is 0. In the third test case, sorting the subarray [6, 3, 4, 8] will make the entire array sorted. The length of this subarray is 4. In the fourth test case, sorting the subarray [3, 5, 7, 2, 6] will make the entire array sorted. The length of this subarray is 5.","solution":"def min_subarray_to_sort(arr): n = len(arr) left, right = 0, n - 1 while left < n - 1 and arr[left] <= arr[left + 1]: left += 1 if left == n - 1: return 0 while right > 0 and arr[right] >= arr[right - 1]: right -= 1 min_val = min(arr[left:right+1]) max_val = max(arr[left:right+1]) while left > 0 and arr[left - 1] > min_val: left -= 1 while right < n - 1 and arr[right + 1] < max_val: right += 1 return right - left + 1 def process_test_cases(test_cases): results = [] for case in test_cases: _, arr = case results.append(min_subarray_to_sort(arr)) return results # Example usage example_test_cases = [ (3, [1, 3, 2]), (5, [1, 2, 3, 4, 5]), (6, [5, 6, 3, 4, 8, 9]), (7, [1, 3, 5, 7, 2, 6, 8]) ] print(process_test_cases(example_test_cases))"},{"question":"Given a list of integers, find the maximum possible sum of a subsequence such that no two numbers in the sequence are adjacent in the array. If all numbers are negative, your function should return 0. Example 1: Input: arr = [3, 2, 5, 10, 7] Output: 15 Explanation: The subsequence with the maximum sum is [3, 5, 7]. Example 2: Input: arr = [-2, 1, 3, -4, 5] Output: 8 Explanation: The subsequence with the maximum sum is [1, 3, 5]. Example 3: Input: arr = [-1, -2, -3] Output: 0 Explanation: Since all elements are negative, return 0. Your Task: You don\'t need to read input or print anything. Complete the function maxNonAdjacentSum() which takes a list of integers as an input and returns the maximum sum of a subsequence where no two elements are adjacent. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^5 -10^4 ≤ arr[i] ≤ 10^4","solution":"def maxNonAdjacentSum(arr): Finds the maximum sum of a subsequence such that no two numbers in the sequence are adjacent. If all numbers are negative, returns 0. Parameters: arr (list): List of integers. Returns: int: Maximum sum of a subsequence with non-adjacent elements. if not arr: return 0 prev_max = 0 curr_max = 0 for num in arr: temp = curr_max curr_max = max(prev_max + num, curr_max) prev_max = temp return max(curr_max, 0)"},{"question":"Alice is an avid hiker and loves exploring different trails. She uses a GPS application to track her hikes. The application records the coordinates at various points during her hike and stores them in a list. Alice wants to determine the longest segment of her hike where she is continuously descending. A segment is defined as a continuous subsequence of the recorded points where each subsequent point is at a lower altitude than the previous one. Write a program to find the longest descending segment of Alice\'s hike. -----Input----- The first line of input contains an integer N (2 leq N leq 1000), the number of points recorded during Alice\'s hike. The next N lines each contain two integers x and y (-10^6 leq x, y leq 10^6), the coordinates of the points in the hike. The points are given in the order they were recorded. -----Output----- Output a single integer, the length of the longest descending segment. If there is no descending segment, output 0. -----Examples----- Sample Input: 6 1 10 2 9 3 8 4 7 5 6 6 5 Sample Output: 5 Sample Input: 5 1 2 2 3 3 4 4 5 5 6 Sample Output: 0 Sample Input: 7 1 10 2 15 3 8 4 9 5 7 6 3 7 2 Sample Output: 3","solution":"def longest_descending_segment(n, points): Determines the longest segment of the hike where Alice is continuously descending. Parameters: n (int): The number of points recorded during the hike. points (list of tuples): The recorded coordinates during the hike. Returns: int: The length of the longest descending segment. if n < 2: return 0 longest_length = 0 current_length = 0 for i in range(1, n): if points[i][1] < points[i-1][1]: current_length += 1 if current_length > longest_length: longest_length = current_length else: current_length = 0 return longest_length"},{"question":"You are given an array A = [A_{1}, A_{2}, ldots, A_{N}] containing distinct integers. Define the *maximum contiguous subarray sum* as the largest sum of any contiguous subarray within A. Return the sum of the *maximum contiguous subarray* of A. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of two lines of input. - The first line of each test case contains an integer N — the size of A. - The second line of each test case contains N space-separated integers — the elements of A. ------ Output Format ------ - For each test case, output a new line containing the answer — the maximum contiguous subarray sum of A. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{5} -10^4 ≤ A_{i} ≤ 10^4 - The sum of N across all test cases won\'t exceed 10^6. ----- Sample Input 1 ------ 2 4 -2 1 -3 4 5 1 2 3 4 -10 ----- Sample Output 1 ------ 4 10 ----- explanation 1 ------ Test case 1: The maximum contiguous subarray sum is achieved with the subarray [4], which sums to 4. Test case 2: The maximum contiguous subarray sum is achieved with the subarray [1, 2, 3, 4], which sums to 10.","solution":"def max_contiguous_subarray_sum(A): Returns the maximum sum of any contiguous subarray within the given array A. max_so_far = float(\'-inf\') max_ending_here = 0 for num in A: max_ending_here += num if max_so_far < max_ending_here: max_so_far = max_ending_here if max_ending_here < 0: max_ending_here = 0 return max_so_far def solve(T, test_cases): results = [] for i in range(T): N, A = test_cases[i] results.append(max_contiguous_subarray_sum(A)) return results"},{"question":"You are given a list of operations for a robot that starts at coordinates (0, 0) in a 2D plane. The operations consist of a series of movements: `\\"U\\"` (up), `\\"D\\"` (down), `\\"L\\"` (left), and `\\"R\\"` (right), each moving the robot one unit in the respective direction. After executing these operations, you need to determine the robot\'s final coordinates. Write a function `final_coordinates(moves: List[str]) -> Tuple[int, int]` that takes in a list of strings representing the moves, and returns the final coordinates of the robot as a tuple `(x, y)`. -----Input----- - A list of strings `moves` representing the movements of the robot. Each string in the list is one of `\\"U\\"`, `\\"D\\"`, `\\"L\\"`, or `\\"R\\"`. It is guaranteed that the length of the list will not exceed 10^5. -----Output----- - A tuple `(x, y)` representing the final coordinates of the robot after all movements have been executed. -----Examples----- Sample Input 1: [\\"U\\", \\"D\\", \\"L\\", \\"R\\"] Sample Output 1: (0, 0) Sample Input 2: [\\"U\\", \\"U\\", \\"L\\", \\"R\\", \\"D\\", \\"L\\"] Sample Output 2: (-1, 1) Sample Input 3: [\\"R\\", \\"R\\", \\"U\\", \\"U\\", \\"L\\", \\"D\\"] Sample Output 3: (1, 1)","solution":"from typing import List, Tuple def final_coordinates(moves: List[str]) -> Tuple[int, int]: Determine the final coordinates of the robot after a series of moves. :param moves: List of moves (strings) which can be \\"U\\", \\"D\\", \\"L\\", or \\"R\\". :return: Tuple of final coordinates (x, y). x, y = 0, 0 for move in moves: if move == \\"U\\": y += 1 elif move == \\"D\\": y -= 1 elif move == \\"L\\": x -= 1 elif move == \\"R\\": x += 1 return (x, y)"},{"question":"A delivery company needs to optimize its delivery route within a city. The city is represented by a grid of size n times n, where each cell can be a street or a building. Streets are represented by the character \'.\', and buildings are represented by the character \'#\'. The company\'s delivery truck starts at the top-left corner of the grid (1,1) and aims to reach the bottom-right corner (n,n). The truck can move to an adjacent street cell (up, down, left, or right) but cannot move through building cells. Your task is to determine the minimum number of moves required for the truck to get from its starting position to the destination. If it is not possible to reach the destination, return -1. -----Input----- The first line contains one integer n (1 le n le 100) — the size of the grid. The next n lines contain the grid itself, consisting of characters \'.\' and \'#\'. The top-left and bottom-right cells are guaranteed to be streets (\'.\'). -----Output----- Print the minimum number of moves required for the truck to reach the bottom-right corner of the grid, or -1 if it is impossible. -----Examples----- Input 5 ..... .#. ..#.. .#. ..... Output 8 Input 3 ... # ..# Output -1","solution":"from collections import deque def min_moves_to_deliver(n, grid): Computes the minimum number of moves required for the delivery truck to get from the top-left corner to the bottom-right corner in the given grid. :param n: int - the size of the grid :param grid: List[str] - the grid itself :return: int - the minimum number of moves required, or -1 if it is not possible if n == 1: return 0 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] visited = [[False]*n for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, moves) visited[0][0] = True while queue: row, col, moves = queue.popleft() for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < n and not visited[new_row][new_col] and grid[new_row][new_col] == \'.\': if new_row == n-1 and new_col == n-1: return moves + 1 visited[new_row][new_col] = True queue.append((new_row, new_col, moves + 1)) return -1"},{"question":"Given an array of integers representing temperatures on different days, design an algorithm to find out the maximum number of consecutive days where the temperature increases. For example, if the temperatures are recorded as follows: [31, 32, 33, 31, 30, 32, 33, 34, 35, 30] The output should be 4, as the temperatures increase consecutively from day 5 to day 9. Examples: Input: [30, 31, 32, 33, 34] Output: 4 Explanation: The temperatures increase for 4 consecutive days from day 1 to day 4. Input: [31, 31, 30, 29] Output: 0 Explanation: There are no consecutive days with increasing temperatures. Input: [34, 35, 35, 36, 37, 38] Output: 3 Explanation: The temperatures increase for 3 consecutive days from day 3 to day 5.","solution":"def max_consecutive_increasing_days(temperatures): Given an array of integers representing temperatures on different days, this function finds the maximum number of consecutive days where the temperature increases. Args: temperatures (list): A list of integers representing the temperatures. Returns: int: Maximum number of consecutive days with increasing temperatures. if not temperatures: return 0 max_count = 0 current_count = 0 for i in range(1, len(temperatures)): if temperatures[i] > temperatures[i-1]: current_count += 1 max_count = max(max_count, current_count) else: current_count = 0 return max_count"},{"question":"Given an array of integers, modify the array such that each element at index i is replaced by the product of all elements in the original array except the one at i. Input: First line of the input contains a single integer T denoting number of test cases. For each test case, the first line contains a single integer n, denoting the number of elements in the array. The second line contains n space-separated integers, representing the elements of the array. Output: For each test case, print the modified array as a single space-separated line. Constraints: 1 ≤ T ≤ 10 2 ≤ n ≤ 10^5 1 ≤ array[i] ≤ 1000 SAMPLE INPUT: 2 4 1 2 3 4 3 2 3 4 SAMPLE OUTPUT: 24 12 8 6 12 8 6 Explanation: For the first test case, the original array elements are 1, 2, 3, and 4. The products excluding the element at each index are: Product excluding index 0: 2 * 3 * 4 = 24 Product excluding index 1: 1 * 3 * 4 = 12 Product excluding index 2: 1 * 2 * 4 = 8 Product excluding index 3: 1 * 2 * 3 = 6 Therefore, the modified array is [24, 12, 8, 6].","solution":"def product_except_self(nums): Given a list of integers, returns a list where each element is the product of all elements in the original list except the one at the index of that element. n = len(nums) if n == 0: return [] left = [1] * n right = [1] * n result = [1] * n for i in range(1, n): left[i] = left[i - 1] * nums[i - 1] for j in range(n - 2, -1, -1): right[j] = right[j + 1] * nums[j + 1] for k in range(n): result[k] = left[k] * right[k] return result def process_test_cases(T, test_cases): result = [] for i in range(T): n, array = test_cases[i] result.append(\\" \\".join(map(str, product_except_self(array)))) return result"},{"question":"The kingdom of Syldavia has n mountains. The height of each mountain is given in an array. To ensure the kingdom remains picturesque, the king has ordered that exactly one mountain should be higher than all its neighbors. You need to help by finding the suitable indices for such a mountain. A mountain at index i in the array can be considered the highest peak among its neighbors if the following conditions are true: - It has a height strictly greater than its neighboring mountains. - For mountains with only one neighbor (i.e., at the boundaries of the array), it should still be strictly higher than its sole neighbor. Design a function that identifies all the indices of mountains that meet the criteria. If no such mountain exists, return an empty list. -----Input----- The input consists of: - An integer n (1 ≤ n ≤ 200 000) – the number of mountains. - An array of integers of length n representing the height of each mountain. -----Output----- Print a list of integers where each integer represents the index of a mountain that qualifies as a peak. -----Example----- Input 5 1 3 2 4 2 Output 1 3 -----Note----- In the sample testcase, the mountain at index 1 (height 3) is greater than its neighbors (1 and 2). Similarly, the mountain at index 3 (height 4) is greater than its neighbors (2 and 2). Hence, both indices 1 and 3 are the valid peaks.","solution":"def find_peaks(n, heights): Identifies the indices of mountains that are higher than their neighbors. :param n: Number of mountains :param heights: List of integers representing the heights of mountains. :return: List of indices of mountains that qualify as peaks. peaks = [] # Edge case for when there is only one mountain if n == 1: return [0] for i in range(n): # Check if the mountain at index i is a peak if (i == 0 and heights[i] > heights[i + 1]) or (i == n - 1 and heights[i] > heights[i - 1]) or (0 < i < n - 1 and heights[i] > heights[i - 1] and heights[i] > heights[i + 1]): peaks.append(i) return peaks"},{"question":"You have been given a string and you need to check if it is possible to form a palindrome by rearranging the characters of the string. ---- Input ---- The input consists of a single string s containing only lowercase English letters. ---- Output ---- Output \\"YES\\" (without quotes) if it is possible to rearrange the characters of the string to form a palindrome, otherwise output \\"NO\\" (without quotes). ---- Constraints ---- 1 ≤ |s| ≤ 10^5 ---- Sample Input 1 ---- aabbcc ---- Sample Output 1 ---- YES ---- Explanation 1 ---- The string \\"aabbcc\\" can be rearranged to form the palindrome \\"abcba\\". ---- Sample Input 2 ---- aabbccc ---- Sample Output 2 ---- YES ---- Explanation 2 ---- The string \\"aabbccc\\" can be rearranged to form the palindrome \\"abccba\\". ---- Sample Input 3 ---- abc ---- Sample Output 3 ---- NO ---- Explanation 3 ---- The string \\"abc\\" cannot be rearranged to form a palindrome. Each character appears only once, making it impossible to form a symmetric pattern.","solution":"def can_form_palindrome(s): Checks if the given string can be rearranged to form a palindrome. Args: s (str): input string containing only lowercase English letters. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, \\"NO\\" otherwise. from collections import Counter # Count the frequency of each character count = Counter(s) # Count the number of characters with odd frequency odd_count = sum(1 for char, freq in count.items() if freq % 2 != 0) # A string can be rearranged to form a palindrome if it has at most one character with odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"In a distant universe, there exists a network of connected planets. Each planet is linked to certain other planets by bidirectional communication channels, allowing the exchange of resources between them. The emperor of this universe wants to know about the minimal resource distribution network that can connect all the planets with minimal total communication cost. To achieve this, you need to determine the Minimum Spanning Tree (MST) of the network. The MST is a subset of the edges that connect all the planets with the minimal total communication cost. If there are multiple MSTs, any one of them is acceptable. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 10000) — the number of planets and the number of bidirectional communication channels respectively. Next m lines contain three integers a, b, and c (1 ≤ a, b ≤ n, 1 ≤ c ≤ 1000) — indicating that there is a communication channel between planet a and planet b with cost c. Output Print a single integer — the minimal total communication cost to connect all planets. Examples Input 4 5 1 2 1 2 3 4 3 4 3 1 3 5 1 4 2 Output 6 Input 3 3 1 2 2 2 3 3 1 3 1 Output 3 Note Notes to the samples: 1) In the first example, the minimal spanning tree has a total cost of 6: it includes edges (1-2, 1-4, 3-4). 2) In the second example, the minimal spanning tree has a total cost of 3: it includes edges (1-3, 2-3).","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst(n, edges): edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_cost = 0 e = 0 i = 0 while e < n - 1: u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 mst_cost += w union(parent, rank, x, y) return mst_cost def minimal_communication_cost(n, m, edges): return kruskal_mst(n, edges)"},{"question":"**Story** You are given an array representing a list of unique integers. Your task is to find the length of the longest increasing subsequence (its elements should be in ascending order, but not necessarily consecutive). The subsequence must be strictly increasing. **Formal problem** *Input:* An array `arr` with `n` integers (1 <= `n` <= 2500), where `arr[i]` is an element of the array (-10^4 <= `arr[i]` <= 10^4). *Output:* A single integer representing the length of the longest strictly increasing subsequence in the given array. **Example** *Input:* ``` arr = [10, 9, 2, 5, 3, 7, 101, 18] ``` *Output:* ``` 4 ``` *Explanation:* One of the longest increasing subsequences is [2, 3, 7, 18], which has length 4.","solution":"def lengthOfLIS(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Marina loves arranging tiles in a grid. She has an infinite number of 1x2 tiles (dominoes) and 2x2 tiles (tetriminoes). She wants to fill an m x n grid with these tiles. Each tile can be placed either horizontally or vertically (for 1x2 tiles) or in any of the four possible orientations (for 2x2 tiles). The grid can be partially filled as well; there is no need to cover every cell. However, Marina has a special condition: no cell should be covered by more than one tile. Help Marina find the maximum number of tiles she can use to fill the grid without violating this condition. Input The first line contains two integers m and n (1 ≤ m, n ≤ 10) — the dimensions of the grid. Output Output one integer which denotes the maximum number of tiles (both 1x2 and 2x2) Marina can use to fill the grid. Examples Input 3 3 Output 4 Input 2 4 Output 4 Input 5 5 Output 13 Note In the first sample, one way of placing the tiles is: ``` | 1 | 1 | 2 | |---|---|---| | 3 | 2 | 2 | |---|---|---| | 3 | 4 | 4 | ``` Here, the numbers indicate different tiles: \\"1\\" and \\"3\\" are 1x2 tiles placed vertically, \\"2\\" and \\"4\\" are 2x2 tiles. In the second sample, one way of placing the tiles is: ``` | 1 | 1 | 2 | 2 | |---|---|---|---| | 3 | 3 | 4 | 4 | ``` Here \\"1\\", \\"2\\", \\"3\\", and \\"4\\" are all 1x2 tiles placed horizontally. In the third sample, one possible arrangement to achieve the maximum number of 13 tiles can be visualized by spatially deploying 1x2 and 2x2 tiles in a way that covers parts of the 5x5 grid without any overlap. The precise arrangement would require detailed steps or diagrams for clarity.","solution":"def max_tiles(m, n): Calculate the maximum number of 1x2 and 2x2 tiles that can be used to fill an m x n grid without any cell being covered by more than one tile. # The maximum number of 1x2 tiles we can use # Each 1x2 tile covers 2 cells, the maximum number of such tiles we can use is (m * n) // 2 one_by_two_tiles = (m * n) // 2 # Possible additional 2x2 tiles we can use # Each 2x2 tile covers 4 cells, the maximum number of such tiles we can use is (m * n) // 4 two_by_two_tiles = (m * n) // 4 # Use as many 2x2 tiles as possible first, then use the remaining cells for 1x2 tiles. return one_by_two_tiles # Function to test arrangement and calculation"},{"question":"A company wishes to analyze the performance of one of its servers by observing the requests it processes. Each request is either an incoming or an outgoing request. Given these requests, we want to determine the maximum number of concurrent requests the server handled at any time. You are given a list of requests where each request is represented by a tuple (t, type): - `t` is the timestamp of the request. - `type` is either 1 for incoming or -1 for outgoing. Our task is to determine the maximum number of concurrent requests that were being handled at any point in time. Input Format The first line contains T, the number of test cases. T test cases follow. Each test case consists of two lines; the first line contains an integer N, the number of requests, while the next line contains N space-separated tuples. Each tuple consists of an integer t and an integer `type`. Output Format For each test case, print the required answer on a different line. Constraints 1 leq T leq 10 1 leq N leq 10^5 1 leq t leq 10^6 Sample input 2 3 (1, 1) (2, -1) (3, 1) 4 (2, 1) (3, 1) (5, -1) (6, -1) Sample output 1 2 Explanation In the first test case, at any timestamp, there is only one request being processed at a time. In the second test case, at timestamps 2 and 3, there are two concurrent requests being processed.","solution":"def max_concurrent_requests(test_cases): results = [] for requests in test_cases: events = [] for t, type in requests: events.append((t, type)) events.sort(key=lambda x: (x[0], -x[1])) max_concurrent = 0 current_concurrent = 0 for time, type in events: current_concurrent += type if current_concurrent > max_concurrent: max_concurrent = current_concurrent results.append(max_concurrent) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) index += 1 requests = eval(\\"[\\" + lines[index].replace(\\") (\\", \\"),(\\") + \\"]\\") test_cases.append(requests) index += 1 return test_cases"},{"question":"Given N activities with their start and finish times. Select the maximum number of activities that can be performed by a single person, assuming that a person can only work on a single activity at a time. Example 1: Input: start[] = {1, 3, 0, 5, 8, 5} end[] = {2, 4, 6, 7, 9, 9} Output: 4 Explanation: A person can perform the activities starting at [1, 3, 5, 8] and ending at [2, 4, 7, 9]. Example 2: Input: start[] = {10, 12, 20} end[] = {20, 25, 30} Output: 2 Explanation: A person can perform the activities starting at [10, 12] and ending at [20, 25]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxActivities() which takes two arrays \'start\' and \'end\' as input and returns the maximum number of activities a person can perform. Expected Time Complexity: O(N log N). Expected Auxiliary Space: O(1). Constraints: 1 <= N <= 10^5 1 <= start[i] < end[i] <= 10^9","solution":"def maxActivities(start, end): # Zip the start and end times together and sort by end times activities = sorted(zip(start, end), key=lambda x: x[1]) count = 0 current_end_time = 0 for s, e in activities: if s >= current_end_time: count += 1 current_end_time = e return count"},{"question":"Sophie loves playing with strings and numbers. This time, she came across a peculiar challenge: She needs to find the longest substring consisting of distinct characters from a given string. Can you help her with this task? Given a string of length `n` containing only lowercase English letters, find the length of the longest substring that contains all unique characters. Input The first and only line contains a string `s` (1 ≤ n ≤ 100,000) made up of only lowercase English letters. Output Print a single integer: the length of the longest substring with all distinct characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3 Note In the first sample, the answer is \\"abc\\", with the length of 3. In the second sample, the answer is \\"b\\", with the length of 1. In the third sample, the answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. char_index_map = {} longest = 0 start = 0 for end, char in enumerate(s): if char in char_index_map: start = max(start, char_index_map[char] + 1) char_index_map[char] = end longest = max(longest, end - start + 1) return longest"},{"question":"Given an array of positive integers. Write a function to cyclically rotate the array by one. Example 1: Input: arr = [1, 2, 3, 4, 5] Output: [5, 1, 2, 3, 4] Explanation: After rotating the array by one position to the right, the final array will be [5, 1, 2, 3, 4]. Example 2: Input: arr = [10, 20, 30, 40] Output: [40, 10, 20, 30] Explanation: After rotating the array by one position to the right, the final array will be [40, 10, 20, 30]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rotateArrayByOne() which takes an array arr, and returns the rotated array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= arr.length <= 10^6 1 <= arr[i] <= 10^6","solution":"def rotateArrayByOne(arr): Returns the array after cyclically rotating it by one position to the right. if not arr: return [] last_element = arr.pop() arr.insert(0, last_element) return arr"},{"question":"You have been given more than one list of integers, and your goal is to merge these lists. The merged list should only contain unique integers and be sorted in non-decreasing order. Write a function that takes a list of lists as input, where each inner list contains integers, and returns a single list of unique integers sorted in ascending order. Input - The single input line contains space-separated integers n and k (1 ≤ n ≤ 50, 1 ≤ k ≤ 250) — the number of lists and the total number of elements combined in all lists. - The next n lines each contain space-separated integers representing the elements of the inner lists. Each list has at least one element and the total number of elements across all lists does not exceed k. Output - A single list of unique integers sorted in non-decreasing order. Examples Input 4 1 3 5 2 4 6 1 2 3 4 5 7 8 Output [1, 2, 3, 4, 5, 6, 7, 8] Input 3 10 10 10 20 20 20 5 5 5 Output [5, 10, 20] Note In the first example, merging the lists will result in [1, 2, 3, 4, 5, 6, 7, 8] after removing duplicates and sorting. In the second example, the lists contain repetitive elements, and the result after removing duplicates and sorting is [5, 10, 20].","solution":"def merge_and_sort_lists(lists): Merge multiple lists and return a sorted list with unique elements. Args: lists (list of list of int): List of lists containing integers Returns: list of int: Sorted list of unique integers unique_elements = set() # Using a set to automatically handle duplicates for lst in lists: unique_elements.update(lst) # Add all elements of lst to the set return sorted(unique_elements) # Convert set to sorted list and return"},{"question":"Given two integers `m` and `n`, your task is to find a grid of size `m x n` filled with non-negative integers such that any two adjacent cells (vertically or horizontally) are not equal. Input The first line contains two integers `m` and `n`, separated by a space (1 ≤ m, n ≤ 1000). Output Output `m` lines, each containing `n` integers separated by spaces, representing the grid where no two adjacent cells have the same value. Example Input: 3 3 Output: 1 2 1 2 1 2 1 2 1 Input: 2 4 Output: 1 2 1 2 2 1 2 1 Note In the first example, the grid is a 3x3 matrix. Any two adjacent cells vertically or horizontally have different values. In the second example, the grid is a 2x4 matrix and it also satisfies the condition where no two adjacent cells are the same. Your task is to generate such a grid for any given `m` and `n`.","solution":"def generate_grid(m, n): Generates a grid of size m x n filled with non-negative integers such that any two adjacent cells (vertically or horizontally) are not equal. grid = [] for i in range(m): row = [] for j in range(n): if (i + j) % 2 == 0: row.append(1) else: row.append(2) grid.append(row) return grid"},{"question":"You are given an initially empty queue. You are then given an array B of length M which describes the following events: If B_{i} > 0, then person with ID B_{i} enters the queue at i-th minute. If person with ID B_{i} is already in the queue, they do not enter again. If B_{i} < 0, then person with ID |B_{i}| leaves the queue at i-th minute. If person with ID |B_{i}| is not in the queue, nothing happens. Determine the final order of IDs in the queue after processing all events. ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer M - the length of the array B. - The second line of each test case contains M integers B_{1}, B_{2}, B_{3}, dots B_{M}. ------ Output Format ------ For each testcase, output the final order of IDs in the queue as a space-separated list. If the queue is empty, output \\"EMPTY\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M ≤ 100 -100 ≤ B_{i} ≤ 100 ----- Sample Input 1 ------ 3 5 1 -1 2 -2 1 4 4 3 -3 -4 3 5 5 -5 ----- Sample Output 1 ------ 1 EMPTY EMPTY ----- explanation 1 ------ Test case-1: Person with ID 1 enters the queue, leaves the queue, person with ID 2 enters and leaves, and then person with ID 1 enters again. Final queue: [1] Test case-2: Person with ID 4 enters the queue, person with ID 3 enters, both then leave the queue. Final queue: EMPTY Test case-3: Person with ID 5 enters the queue but only one entry is considered, they then leave. Final queue: EMPTY","solution":"def process_queue_events(T, test_cases): results = [] for case in test_cases: M, B = case queue = [] seen = set() for event in B: person_id = abs(event) if event > 0: if person_id not in seen: queue.append(person_id) seen.add(person_id) else: if person_id in queue: queue.remove(person_id) seen.remove(person_id) if queue: results.append(\\" \\".join(map(str, queue))) else: results.append(\\"EMPTY\\") return results"},{"question":"In a deli shop, there are n types of sandwiches numbered from 1 to n. Each type of sandwich comes in a specific quantity. The shop is now out of stock of exactly one type of sandwich, which means that the quantity of one type of sandwich is zero, and the quantity of all other types of sandwiches is greater than zero. You are tasked with identifying which type of sandwich is out of stock. The shop records show the quantities of sandwiches sold to customers, and the initial quantity of each type of sandwich is unknown. Given the sequence of sales and the total number of purchases for each type of sandwich, you need to determine the type that is out of stock. Input The first line contains an integer n (2 ≤ n ≤ 100) — the number of types of sandwiches. The second line contains n integers s_i (0 ≤ s_i ≤ 1000 for all i), where s_i represents the number of sales of the i-th sandwich. It is guaranteed that exactly one type is out of stock, so its corresponding sales count s_i will be zero. Output Output one integer x — the type of sandwich that is out of stock. Example Input 5 5 7 0 9 4 Output 3 Explanation There are five types of sandwiches. The third type (with sales count of 0) is out of stock, hence the output is 3.","solution":"def find_out_of_stock_sandwich(sandwiches): Given a list of sales for each type of sandwich, return the index (1-based) of the sandwich type that is out of stock. :param sandwiches: List[int] - A list of sales for each type of sandwich. :return: int - The 1-based index of the sandwich type that is out of stock. for i, sales in enumerate(sandwiches): if sales == 0: return i + 1"},{"question":"A passenger is trying to find the shortest path to navigate through a grid of airport terminals to reach their gate. The airport is represented as a 2D grid where the value 0 represents walkable terminals and the value 1 represents obstacles or restricted areas that cannot be traversed. The passenger starts from the top-left terminal (0, 0) and aims to reach the bottom-right terminal (n-1, m-1). You need to help the passenger find the length of the shortest path from the start to the destination. If no such path exists, return -1. The passenger can move up, down, left, or right, but cannot move diagonally. Write a function shortest_path(grid) that takes a 2D list of integers representing the grid and returns the length of the shortest path. -----Input:----- - A 2D list of integers (grid) representing the airport terminals. -----Output:----- - An integer representing the length of the shortest path. If no path exists, return -1. -----Sample Input:----- [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 0, 0, 0] ] -----Sample Output:----- 9 -----Constraints----- - 1 leq n, m leq 100 - The grid contains only 0s and 1s.","solution":"from collections import deque def shortest_path(grid): Returns the length of the shortest path in the grid from top-left to bottom-right. If no path exists, returns -1. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 n, m = len(grid), len(grid[0]) directions = [(0,1), (1,0), (0,-1), (-1,0)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() # If we reached the bottom-right corner if r == n-1 and c == m-1: return dist # Check all possible directions for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == 0: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1 # If there\'s no path"},{"question":"Given an array of integers, return the maximum sum of elements such that no two elements are adjacent in the array. If the array is empty, return 0. Example 1: Input: nums = [3, 2, 5, 10, 7] Output: 15 Explanation: The max sum is 3 + 10 + 2 (sum of subarray is 15) Example 2: Input: nums = [5, 5, 10, 100, 10, 5] Output: 110 Explanation: Select 5 + 100 + 5, max sum is 110 Example 3: Input: nums = [] Output: 0 Explanation: The array is empty. Example 4: Input: nums = [1, 2, 3] Output: 4 Explanation: The max sum is 1 + 3, sum of subarray is 4 Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxSum() which takes the integer array nums as input and returns the maximum sum of the non-adjacent elements. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: - 0 ≤ nums.length ≤ 10^4 - -10^4 ≤ nums[i] ≤ 10^4","solution":"def maxSum(nums): Returns the maximum sum of non-adjacent elements in the array nums. Parameters: nums (list): A list of integers representing the array. Returns: int: The maximum sum of non-adjacent elements. if not nums: return 0 n = len(nums) if n == 1: return max(0, nums[0]) # dp[i] will store the maximum sum of non-adjacent elements from nums[0] to nums[i] dp = [0] * n dp[0] = max(0, nums[0]) dp[1] = max(dp[0], nums[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) return dp[-1]"},{"question":"Calculate Maximum Profit in Buying and Selling Stocks Consider an array where each element represents the price of a stock on that day. You need to write a function to calculate the maximum profit you could achieve by completing at most one transaction (i.e., buy one and sell one share of the stock). Note that you cannot sell a stock before you buy one. For example, if you were given the following prices for each day: Input: 7 1 5 3 6 4 The output should be \'5\' because buying on day 2 (price = 1) and selling on day 5 (price = 6) yields the highest profit (6-1 = 5). Input The first line of input contains an array of prices. Output The second line is the output of the maximum profit. If no profit can be made, return 0. Example Input: 7 1 5 3 6 4 Output: 5 Input: 7 6 4 3 1 Output: 0","solution":"def max_profit(prices): Calculates the maximum profit from buying and selling stocks at most once. :param prices: List of stock prices :return: Maximum profit obtained from one transaction. Returns 0 if no profit is possible. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"In a contest, there are \'n\' participants, each having a unique skill level denoted by an integer. The contest organizer wants to form two teams, A and B, such that each team has an equal number of participants. Additionally, the sum of the skill levels of the participants in team A should be as close as possible to the sum of the skill levels of the participants in team B. Write a program to help the contest organizer form the two teams. # Input: - The first line contains an integer \'n\' (2 leq n leq 30), the number of participants. \'n\' is guaranteed to be an even number. - The second line contains \'n\' integers s_1, s_2, ldots, s_n (1 leq s_i leq 1000), where s_i is the skill level of the i-th participant. # Output: Output a single integer, which is the absolute difference between the sum of the skill levels of the participants in team A and team B when the teams are formed optimally. # Example: Input: ``` 4 10 20 15 25 ``` Output: ``` 0 ``` Input: ``` 6 1 6 11 5 10 15 ``` Output: ``` 4 ``` # Note: In the first example, one optimal way to divide the participants is into two teams: A = [10, 25] and B = [20, 15], both teams have skill levels summing to 35. The absolute difference is 0. In the second example, one optimal way to divide the participants is into two teams: A = [1, 11, 15] and B = [6, 5, 10], which sums to 27 and 21 respectively. The absolute difference is 6. However, another possible way to divide is A = [1, 10, 15] and B = [6, 11, 5], which sums to 26 and 22 respectively. The absolute difference is now 4, and hence it is more optimal.","solution":"def find_min_diff(n, skill_levels): Returns the minimum absolute difference between the sum of skill levels of two teams A and B when optimally divided. total_sum = sum(skill_levels) half_n = n // 2 closest_sum = [[False] * (total_sum // 2 + 1) for _ in range(half_n + 1)] closest_sum[0][0] = True for skill in skill_levels: for i in range(half_n, 0, -1): for j in range(total_sum // 2, skill - 1, -1): if closest_sum[i-1][j-skill]: closest_sum[i][j] = True min_diff = float(\'inf\') for i in range(total_sum // 2 + 1): if closest_sum[half_n][i]: team_a_sum = i team_b_sum = total_sum - i min_diff = min(min_diff, abs(team_a_sum - team_b_sum)) return min_diff"},{"question":"# Task You are given an array `arr` of integers. Your task is to determine how many contiguous subarrays of length exactly 3 have strictly increasing integers. # Example For `arr = [1, 2, 3, 1, 2, 3, 4]`, the output should be `3`. ``` There are three subarrays of length 3 with strictly increasing values: - [1, 2, 3] (index 0 to 2) - [1, 2, 3] (index 3 to 5) - [2, 3, 4] (index 4 to 6) ``` For `arr = [4, 5, 6, 7]`, the output should be `2`. ``` There are two subarrays of length 3 with strictly increasing values: - [4, 5, 6] (index 0 to 2) - [5, 6, 7] (index 1 to 3) ``` For `arr = [7, 7, 7, 7, 7]`, the output should be `0`. ``` There are no subarrays of length 3 with strictly increasing values. ``` # Input/Output - `[input]` array.integer `arr` `3 ≤ arr.length ≤ 100` - `[output]` an integer The number of contiguous subarrays of length 3 with strictly increasing integers.","solution":"def count_strictly_increasing_triplets(arr): Returns the number of contiguous subarrays of length 3 with strictly increasing integers. n = len(arr) count = 0 for i in range(n - 2): if arr[i] < arr[i + 1] < arr[i + 2]: count += 1 return count"},{"question":"You are given a list of integers. Your task is to find out how many pairs of indices (i, j) exist such that i < j and the absolute difference between the elements at those indices is equal to a given value K. Input Format The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains two space-separated integers N and K, where N is the length of the list and K is the absolute difference to find. - The second line contains N space-separated integers representing the elements of the list. Output Format For each test case, output a single line containing the number of pairs that meet the criteria. Constraints 1 <= T <= 10 2 <= N <= 10000 0 <= K <= 100000 -10^5 <= list_element <= 10^5 Sample Input #00: 3 5 2 1 5 3 4 2 3 1 1 2 3 4 5 1 6 11 16 Sample Output #00: 3 2 3 Explanation #00: For the first test case, the pairs (1, 3), (5, 3), and (4, 2) have absolute differences of 2. For the second test case, the pairs (1, 2) and (2, 3) have an absolute difference of 1. For the third test case, the pairs (1, 6), (6, 11), and (11, 16) have an absolute difference of 5.","solution":"def count_pairs_with_difference(arr, k): Counts pairs (i, j) such that i < j and the absolute difference between the elements at those indices is k. count = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): if abs(arr[i] - arr[j]) == k: count += 1 return count def process_test_cases(test_cases): Processes multiple test cases. results = [] for n, k, arr in test_cases: results.append(count_pairs_with_difference(arr, k)) return results"},{"question":"You are given a string containing lowercase English letters. Your task is to determine the length of the longest substring without repeating characters. For example: If the input string is `\\"abcabcbb\\"`, then the longest substring without repeating characters is `\\"abc\\"`, which has a length of 3. If the input string is `\\"bbbbb\\"`, then the longest substring without repeating characters is `\\"b\\"`, which has a length of 1. Write a function that takes in the string and returns the length of the longest substring without repeating characters. Features of the random tests: ``` number of tests = 100 1 <= length of string <= 10000 ```","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) char_index_map = {} longest = 0 left = 0 for right in range(n): if s[right] in char_index_map and char_index_map[s[right]] >= left: left = char_index_map[s[right]] + 1 char_index_map[s[right]] = right longest = max(longest, right - left + 1) return longest"},{"question":"You are given a directed acyclic graph (DAG) with n nodes and m edges. The nodes are labeled from 1 to n. Your task is to find the number of distinct paths from node 1 to node n. Path specification should not contain repeat nodes. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 5⋅10^4), the number of nodes and the number of edges, respectively. Each of the following m lines contains two integers u and v (1 ≤ u,v ≤ n, u ≠ v), representing a directed edge from node u to node v. Output Print a single integer, the number of distinct paths from node 1 to node n. Examples Input 5 6 1 2 1 3 2 3 2 4 3 4 4 5 Output 3 Input 4 3 1 2 2 3 3 4 Output 1 Note In the first sample, the distinct paths from node 1 to node 5 are: 1→2→4→5, 1→2→3→4→5, and 1→3→4→5. In the second sample, there is only one distinct path: 1→2→3→4.","solution":"def count_paths_dag(n, edges): from collections import defaultdict, deque # Build the graph graph = defaultdict(list) in_degree = {i: 0 for i in range(1, n+1)} for u, v in edges: graph[u].append(v) in_degree[v] += 1 # Topological sort using Kahn\'s algorithm topo_sorted = [] queue = deque([i for i in range(1, n+1) if in_degree[i] == 0]) while queue: node = queue.popleft() topo_sorted.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Dynamic Programming to count paths path_count = {i: 0 for i in range(1, n+1)} path_count[1] = 1 # There is one way to start at the source for node in topo_sorted: for neighbor in graph[node]: path_count[neighbor] += path_count[node] return path_count[n]"},{"question":"You are given an array of integers representing the heights of trees in a forest. You are to cut trees such that the height of no two adjacent trees in the resulting array have a difference greater than 1. In each step, you can choose a tree and either cut it down completely or reduce its height by exactly 1 unit. Your goal is to determine the minimum number of cuts required to achieve the desired condition. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of trees. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10000 for all i) — the heights of the trees. Output Print a single integer representing the minimum number of cuts required. Examples Input 6 5 7 3 6 5 8 Output 5 Input 4 1 2 3 4 Output 0 Note In the first example, you can make the following cuts: - Cut the 2nd tree from height 7 to 6 (1 cut) - Cut the 4th tree from height 6 to 4 (2 cuts) - Cut the 5th tree from height 5 to 4 (1 cut) - Cut the 6th tree from height 8 to 7 (1 cut) In the second example, the tree heights are already in a valid configuration, so no cuts are needed.","solution":"def minimum_cuts_to_adjust_tree_heights(n, heights): Returns the minimum number of cuts required to adjust the heights of trees such that no two adjacent trees have a height difference greater than 1. :param int n: Number of trees. :param list heights: Heights of the trees. :return: Minimum number of cuts required. :rtype: int cuts = 0 for i in range(1, n): if abs(heights[i] - heights[i - 1]) > 1: cuts += abs(heights[i] - heights[i - 1]) - 1 heights[i] = heights[i - 1] + 1 if heights[i] > heights[i - 1] else heights[i - 1] - 1 return cuts"},{"question":"In a country called Grammarland, days are denoted by strings. Each string consists of lowercase alphabets (\'a\' to \'z\') and has a length up to 10^6. The Grammarlandians have a peculiar way of determining a \'Happy Day\'. A day is considered \\"Happy\\" if the string representing it contains at least one palindrome of length at least 2. Given a string denoting the day, your task is to determine if the day is \\"Happy\\" or \\"Sad\\". Output \\"Happy\\" if the string contains any palindromic substring of length at least 2, otherwise output \\"Sad\\". -----Input----- A single line containing a string (1 ≤ length of string ≤ 10^6). -----Output----- A single line containing \\"Happy\\" or \\"Sad\\" (without quotes). -----Examples----- Input abac Output Happy Input abcdefg Output Sad","solution":"def is_happy_day(day_string): Determines if a day string represents a \\"Happy\\" day (containing a palindromic substring of at least length 2). Args: day_string (str): A string representing a day. Returns: str: \\"Happy\\" if the day is \\"Happy\\", \\"Sad\\" otherwise. length = len(day_string) for i in range(length - 1): # Check for palindromes of length 2 if day_string[i] == day_string[i + 1]: return \\"Happy\\" # Check for palindromes of length 3 if i + 2 < length and day_string[i] == day_string[i + 2]: return \\"Happy\\" return \\"Sad\\""},{"question":"A famous puzzle master has created a sequence of operations that transform an integer in a peculiar way. The operations are as follows: 1. If the integer is even, divide it by 2. 2. If the integer is odd, multiply it by 3 and add 1. The puzzle challenge is to determine the number of operations required to transform a given positive integer n to 1 using the above operations. Input: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a single integer n (1 ≤ n ≤ 10^6), representing the initial number to be transformed. Output: - For each test case, print the number of operations required to transform the given integer n to 1. Constraints: 1 ≤ T ≤ 100 Example Input: 4 6 19 1 27 Example Output: 8 20 0 111 Explanation: For the first test case: 6 -> 3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1 (Total 8 operations)","solution":"def transform_to_one(n): Returns the number of operations required to transform integer n to 1 using the described rules. operations = 0 while n != 1: if n % 2 == 0: n //= 2 else: n = n * 3 + 1 operations += 1 return operations def process_test_cases(T, test_cases): results = [] for n in test_cases: results.append(transform_to_one(n)) return results"},{"question":"Anil is studying algorithms and is currently exploring unique ways to manipulate strings. One day, he encountered a challenge where he needs to transform a given string into its \\"mirrored form.\\" The mirrored form of a string S is generated by substituting each character with a character that has the same position from the end of the alphabet. For instance, \'a\' is replaced by \'z\', \'b\' by \'y\', \'c\' by \'x\', and so on. More formally: - \'a\' -> \'z\' - \'b\' -> \'y\' - \'c\' -> \'x\' - ... - \'y\' -> \'b\' - \'z\' -> \'a\' Given a string S, you must transform it into its mirrored form. INPUT The first line contains an integer T, the number of test cases. Each of the following T lines contains a string S to be transformed. OUTPUT For each test case, output the mirrored form of the given string S on a new line. CONSTRAINTS 1 ≤ T ≤ 10^5 1 ≤ |S| ≤ 10^3 All characters in the input string are lowercase Latin letters (\'a\'-\'z\'). SAMPLE INPUT 2 abc hello SAMPLE OUTPUT zyx svool","solution":"def mirror_string(S): Given a string S, transform it into its mirrored form. mirrored = [] for char in S: mirrored.append(chr(219 - ord(char))) return \'\'.join(mirrored) def process_test_cases(T, test_cases): Process multiple test cases for the mirror_string function. Parameters: T (int): Number of test cases. test_cases (list of str): List of strings to be transformed. Returns: list of str: List of mirrored strings. results = [] for case in test_cases: results.append(mirror_string(case)) return results"},{"question":"You are developing a software system that manages a list of tasks. Each task is represented as a tuple with its start time and end time. The start and end times are given as integers representing hours of the day in 24-hour format (0 to 23). You need to implement a function to find the maximum number of tasks that can be scheduled without overlapping. For example, given the tasks `[(1, 4), (2, 5), (6, 8)]`, the maximum number of tasks that can be scheduled without overlapping is 2, because the tasks `(1, 4)` and `(6, 8)` do not overlap. Write a function that takes a list of tuples representing the tasks and returns the maximum number of tasks that can be scheduled without overlapping. Function signature: `def max_non_overlapping_tasks(tasks: List[Tuple[int, int]]) -> int` # Input - A list of tuples, where each tuple represents a task with its start and end times `[(start1, end1), (start2, end2), ...]`. # Output - An integer representing the maximum number of non-overlapping tasks that can be scheduled. # Constraints - The length of the tasks list `n` satisfies `1 leq n leq 1000`. - Each task is a tuple `(start, end)` with `0 leq start < end leq 23`. # Example Input `[(1, 4), (2, 5), (6, 8), (5, 7)]` Output `2` Input `[(0, 6), (1, 4), (3, 5), (5, 7), (8, 9)]` Output `3` # Note - In the second example, the tasks `[(1, 4), (5, 7), (8, 9)]` are non-overlapping. - You can solve the problem by sorting the tasks based on their end times and using a greedy approach to select non-overlapping tasks.","solution":"from typing import List, Tuple def max_non_overlapping_tasks(tasks: List[Tuple[int, int]]) -> int: Returns the maximum number of non-overlapping tasks that can be scheduled. # Sort the tasks based on their end times tasks.sort(key=lambda x: x[1]) max_tasks = 0 last_end_time = -1 for start, end in tasks: if start >= last_end_time: max_tasks += 1 last_end_time = end return max_tasks"},{"question":"You are planning a project where you need to allocate tasks to your team members. Each task has a specific start and end time, and each team member can work on at most one task at a time. Your goal is to maximize the number of tasks completed by your team. Given a list of tasks with their start and end times, determine the maximum number of non-overlapping tasks your team can complete. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of tasks. The next n lines each contain two integers starti, endi (1 ≤ starti < endi ≤ 10^9) — the start and end times of the i-th task. Output Print a single integer representing the maximum number of non-overlapping tasks your team can complete. Examples Input 5 1 3 2 5 4 6 6 7 5 8 Output 4 Input 3 1 2 2 3 3 5 Output 3 Explanation In the first example, the tasks that can be completed are: (1, 3), (4, 6), (6, 7), and (5, 8). In the second example, all tasks are non-overlapping, so all can be completed.","solution":"def max_non_overlapping_tasks(tasks): tasks.sort(key=lambda x: x[1]) # Sort by end time count = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: count += 1 last_end_time = end return count def read_input_and_compute_max_tasks(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) tasks = [] for i in range(n): start = int(data[2 * i + 1]) end = int(data[2 * i + 2]) tasks.append((start, end)) return max_non_overlapping_tasks(tasks)"},{"question":"You are given three kinds of coins: pennies (1 cent), nickels (5 cents), and dimes (10 cents). Your goal is to determine the minimum number of coins needed to make a specific amount of money. Implement a function `min_coins` that takes an integer `n` representing the amount of money in cents and returns the minimum number of coins required to make that amount using the given denominations. # Function Signature `def min_coins(n: int) -> int:` # Examples Example 1: Input: `n = 28` Output: `6` Explanation: Use 2 dimes (20 cents) and 1 nickel (5 cents) and 3 pennies (1+1+1 cents) Example 2: Input: `n = 7` Output: `3` Explanation: Use 1 nickel (5 cents) and 2 pennies (1+1 cents) Example 3: Input: `n = 123` Output: `15` Explanation: Use 12 dimes (120 cents) and 3 pennies (1+1+1 cents) # Constraints: - `0 <= n <= 1,000` # Notes: - You can assume that you have an infinite number of coins of each denomination. - If `n` is 0, the function should return 0 since no coins are needed.","solution":"def min_coins(n: int) -> int: Returns the minimum number of coins needed to make the given amount in cents using pennies (1 cent), nickels (5 cents), and dimes (10 cents). # Start with the largest denomination num_coins = 0 # Number of dimes (10 cents) num_dimes = n // 10 n -= num_dimes * 10 num_coins += num_dimes # Number of nickels (5 cents) num_nickels = n // 5 n -= num_nickels * 5 num_coins += num_nickels # Number of pennies (1 cent) num_pennies = n num_coins += num_pennies return num_coins"},{"question":"You are given an array of integers. Your task is to find the length of the longest subarray such that the bitwise AND of all elements in this subarray is greater than zero. The bitwise AND of a subarray is the result of the AND operation (&) on all the elements in that subarray. Input The input consists of two lines. The first line contains an integer n (1 ≤ n ≤ 100), which represents the number of elements in the array. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9), which are the elements of the array. Output Output a single integer — the length of the longest subarray with a bitwise AND greater than zero. If no such subarray exists, output 0. Examples Input 3 4 2 8 Output 1 Input 5 18 22 14 11 8 Output 4 Note In the first example, the longest subarray with a bitwise AND greater than zero is any single element because AND operation of any non-zero element with itself is non-zero. In the second example, the longest subarray with a bitwise AND greater than zero is [22, 14, 11, 8]. Bitwise AND of these elements is: ``` 22 & 14 = 6 6 & 11 = 2 2 & 8 = 0 ``` Hence, taking the first 4 elements yields a bitwise AND greater than zerogives a non-zero result until the 4th element.","solution":"def longest_subarray_with_bitwise_and_greater_than_zero(n, arr): max_length = 0 current_length = 0 current_and = None for num in arr: if num == 0: current_and = None current_length = 0 else: if current_and is None: current_and = num else: current_and &= num if current_and > 0: current_length += 1 else: current_length = 0 current_and = None max_length = max(max_length, current_length) return max_length"},{"question":"Fiona loves baking cakes and has decided to create a new recipe every day using a special set of ingredients. The ingredients are represented as lowercase Latin letters, and each ingredient has a specific preparation time, represented by its index in the alphabet (where index(\'a\') = 1, index(\'b\') = 2, ..., index(\'z\') = 26). Fiona wants to create a cake using a string of ingredients s in such a way that the total preparation time is minimized. However, she also wants the cake to have as many unique ingredients as possible. Given a string s of length n (2 leq n leq 10^5) consisting of lowercase Latin letters, help Fiona select ingredients such that the total preparation time is minimized and the number of unique ingredients is maximized. You need to print the total preparation time and the corresponding subsequence of ingredients chosen. # Input - The first line contains an integer t (1 leq t leq 10^4) — the number of test cases. - Each test case is given by a single string s consisting of lowercase Latin letters. It is guaranteed that the total length of strings s across all test cases does not exceed 10^6. # Output For each test case, print two lines. - In the first line, print the total preparation time for the selected ingredients. - In the second line, print the subsequence of ingredients that Fiona should choose. # Example Input: ``` 3 abcd bcde aabbccdd ``` Output: ``` 10 abcd 14 bcde 4 abcd ``` # Note In the first test case, the preparation time for the string \\"abcd\\" is minimized by selecting all unique ingredients \'a\', \'b\', \'c\', and \'d\', which results in a total preparation time of 1 + 2 + 3 + 4 = 10. In the second test case, the preparation time for the string \\"bcde\\" is minimized by selecting all unique ingredients \'b\', \'c\', \'d\', and \'e\', which results in a total preparation time of 2 + 3 + 4 + 5 = 14. In the third test case, the preparation time for the string \\"aabbccdd\\" is minimized by selecting all unique ingredients \'a\', \'b\', \'c\', and \'d\', which results in a total preparation time of 1 + 2 + 3 + 4 = 10.","solution":"def minimal_prep_time_for_ingredients(t, test_cases): results = [] for s in test_cases: unique_ingredients = sorted(set(s)) total_prep_time = sum((ord(c) - ord(\'a\') + 1) for c in unique_ingredients) results.append((total_prep_time, \'\'.join(unique_ingredients))) return results"},{"question":"There was a village where the seasons changed in a peculiar manner. The villagers use a special sequence to predict the next season based on a number of days. They follow these rules: - If the number of days is divisible by 7, it\'s a sunny season. - If the number of days is divisible by 5, it\'s a rainy season. - If the number of days is divisible by both 7 and 5, it\'s a perfect season. - If it is neither divisible by 7 nor by 5, it\'s a cloudy season. Given a number of days, determine the type of season. -----Input----- The input contains a single integer d (1 le d le 10000). -----Output----- Output a single string which can be \\"sunny\\", \\"rainy\\", \\"perfect\\" or \\"cloudy\\". -----Examples----- Input 35 Output perfect Input 14 Output sunny Input 20 Output rainy Input 8 Output cloudy","solution":"def determine_season(days): Determines the type of season based on the given number of days. if days % 35 == 0: return \\"perfect\\" elif days % 7 == 0: return \\"sunny\\" elif days % 5 == 0: return \\"rainy\\" else: return \\"cloudy\\""},{"question":"There are N houses in a row. Each house can be painted in one of three colors: Red, Green, or Blue. The cost of painting each house in each color is different and given by a cost matrix. The goal is to paint all houses such that no two adjacent houses have the same color, and the total cost of painting all the houses is minimized. -----Constraints----- - 1 ≤ N ≤ 100 - The cost matrix will have dimensions N x 3, where cost[i][0], cost[i][1], and cost[i][2] represent the cost of painting the i-th house with Red, Green, and Blue, respectively. -----Input----- Input is given from Standard Input in the following format: N cost[0][0] cost[0][1] cost[0][2] cost[1][0] cost[1][1] cost[1][2] . . . cost[N-1][0] cost[N-1][1] cost[N-1][2] -----Output----- Print the minimum total cost of painting all the houses with the given constraints. -----Sample Input----- 3 17 2 17 16 16 5 14 3 19 -----Sample Output----- 10 Explanation: One possible minimum cost painting is: - Paint house 0 with Green (cost = 2) - Paint house 1 with Blue (cost = 5) - Paint house 2 with Green (cost = 3) So, total cost = 2 + 5 + 3 = 10.","solution":"def min_cost_paint_houses(N, costs): if N == 0: return 0 dp = costs[0][:] # Costs of painting the first house for i in range(1, N): new_dp = [0] * 3 new_dp[0] = costs[i][0] + min(dp[1], dp[2]) new_dp[1] = costs[i][1] + min(dp[0], dp[2]) new_dp[2] = costs[i][2] + min(dp[0], dp[1]) dp = new_dp return min(dp) # Function to read input and call the min_cost_paint_houses function def main(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) costs = [] index = 1 for i in range(N): row = [int(data[index]), int(data[index+1]), int(data[index+2])] costs.append(row) index += 3 result = min_cost_ppaint_houses(N, costs) print(result)"},{"question":"Given an array of non-negative integers, you are tasked to find if there exists a contiguous subarray (of size at least one) whose sum is an odd number. If such a subarray exists, return True, otherwise return False. Example 1: Input: arr = [2, 4, 6, 8, 5] Output: True Explanation: The subarray [5] has an odd sum of 5. Example 2: Input: arr = [2, 4, 6, 8] Output: False Explanation: No subarray exists with an odd sum. Example 3: Input: arr = [1, 2, 3, 4, 5] Output: True Explanation: The subarray [1, 2] has an odd sum of 3. Your Task: Your task is to complete the function hasOddSumSubarray() which takes the array as input and returns a boolean indicating the presence of a subarray with an odd sum. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(arr) ≤ 10^5 0 ≤ arr[i] ≤ 10^4","solution":"def hasOddSumSubarray(arr): Determines if there exists a contiguous subarray with an odd sum. Parameters: arr (list of int): The list of non-negative integers. Returns: bool: True if such a subarray exists, False otherwise. for num in arr: if num % 2 == 1: # If there\'s at least one odd number, we can form a subarray with an odd sum return True return False # If no odd numbers exist, no odd sum subarray can exist"},{"question":"You are an avid traveler and are planning a road trip across some cities. To make your trip efficient, you want to ensure you are not spending too much time driving. You are given a list of cities and the distances between them in a form of a 2D matrix. The value at row i and column j represents the distance between city i and city j. Your task is to find the shortest path that visits all the cities exactly once and returns to the starting city (i.e., the shortest Hamiltonian cycle). Write a program to solve this problem using dynamic programming and the bitmask technique. -----Input----- The first line contains a single integer n (2 ≤ n ≤ 20) — the number of cities. Each of the next n lines contains n integers d_{ij} (1 ≤ d_{ij} ≤ 10^5) — the distances between the cities. It is guaranteed that d_{ii} = 0 for all i (the distance from a city to itself is zero) and d_{ij} = d_{ji} for all i, j (the distance from city i to city j is the same as from city j to city i). -----Output----- Print a single integer — the length of the shortest Hamiltonian cycle. -----Examples----- Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 Input 3 0 29 20 29 0 15 20 15 0 Output 64 -----Note----- In the first example, the optimal route is 0 → 1 → 3 → 2 → 0 with a total distance of 80. In the second example, the optimal route is 0 → 2 → 1 → 0 with a total distance of 64.","solution":"def tsp(cities): n = len(cities) memo = [[None] * (1 << n) for _ in range(n)] def dp(city, mask): if mask == (1 << n) - 1: return cities[city][0] if memo[city][mask] is not None: return memo[city][mask] ans = float(\'inf\') for next_city in range(n): if mask & (1 << next_city) == 0: new_mask = mask | (1 << next_city) ans = min(ans, cities[city][next_city] + dp(next_city, new_mask)) memo[city][mask] = ans return ans return dp(0, 1) # Example usage: # n = 4 # cities = [ # [0, 10, 15, 20], # [10, 0, 35, 25], # [15, 35, 0, 30], # [20, 25, 30, 0] # ] # print(tsp(cities)) # Output: 80 # n = 3 # cities = [ # [0, 29, 20], # [29, 0, 15], # [20, 15, 0] # ] # print(tsp(cities)) # Output: 64"},{"question":"David and Rory are working on a problem related to array manipulation. They could use some assistance with solving it. You are given an array of integers. Your task is to find the maximum possible sum of a subarray with no two adjacent elements. Consider a subarray to be any contiguous part of an array. However, in this problem, you must ensure that no two selected elements in the subarray are adjacent to each other in the original array. Input: First line contains an integer `n`, the length of the array. Second line contains `n` integers, representing the elements of the array. Output: Output the maximum possible sum of a subarray with no two adjacent elements. Constraints: 1 ≤ n ≤ 100000 -1000 ≤ Array Elements ≤ 1000 SAMPLE INPUT 5 3 2 5 10 7 SAMPLE OUTPUT 15 Explanation One of the optimal selections of subarrays with no two adjacent elements would be {3, 10}, giving the sum 3 + 10 = 13. Another possible selection could be {2, 5, 7}, giving the sum 2 + 5 + 7 = 14. Yet another selection might be {3, 7}, giving the sum 3 + 7 = 10. The one that gives the maximum possible sum here is {5, 10}, leading to the sum 15.","solution":"def max_sum_no_adjacent_elements(n, array): Finds the maximum possible sum of a subarray with no two adjacent elements. Parameters: n (int): The length of the array. array (List[int]): The list of integers representing the elements of the array. Returns: int: The maximum sum of the subarray with no two adjacent elements. if n == 0: return 0 if n == 1: return max(0, array[0]) incl = array[0] excl = 0 for i in range(1, n): new_excl = max(excl, incl) incl = excl + array[i] excl = new_excl return max(incl, excl)"},{"question":"You are given a list of employees, each with a unique identifier and a list of tasks they need to complete. Each task has a name and a time estimate in hours. Your task is to write a function that **accepts the list of employees and returns the employee identifier who has the most number of tasks assigned**. In case multiple employees have the highest number of tasks, return the one with the smallest identifier. The input list\'s structure is as follows: ``` [ {\\"id\\": 1, \\"tasks\\": [{\\"name\\": \\"task1\\", \\"time\\": 2}, {\\"name\\": \\"task2\\", \\"time\\": 3}]}, {\\"id\\": 2, \\"tasks\\": [{\\"name\\": \\"task1\\", \\"time\\": 4}]}, {\\"id\\": 3, \\"tasks\\": [{\\"name\\": \\"task1\\", \\"time\\": 1}, {\\"name\\": \\"task2\\", \\"time\\": 2}, {\\"name\\": \\"task3\\", \\"time\\": 1}]} ] ``` The expected output in the above case would be `3` since the employee with ID 3 has the most tasks assigned (3 tasks). Write a function `max_tasks_employee(employees: List[Dict]) -> int` that takes in the list of employees and returns the identifier of the employee with the most number of tasks assigned. Example `employees` list structure: ``` [ {\\"id\\": 1, \\"tasks\\": [{\\"name\\": \\"task1\\", \\"time\\": 2}]}, {\\"id\\": 2, \\"tasks\\": [{\\"name\\": \\"task1\\", \\"time\\": 3}, {\\"name\\": \\"task2\\", \\"time\\": 1}]} ] ``` Example output for the above input: ``` 2 ```","solution":"def max_tasks_employee(employees): Returns the employee identifier who has the most number of tasks assigned. In case of a tie, returns the employee with the smallest identifier. max_tasks = -1 employee_id = None for employee in employees: num_tasks = len(employee[\\"tasks\\"]) if num_tasks > max_tasks or (num_tasks == max_tasks and employee[\\"id\\"] < employee_id): max_tasks = num_tasks employee_id = employee[\\"id\\"] return employee_id"},{"question":"Alice loves playing with strings. Today, she came up with a special string operation called \\"Mix and Match.\\" Given two strings, Alice wants to create a third string by interleaving the characters from the two given strings while maintaining their individual order. Write a program to check if a given third string can be formed by interleaving the characters of the first two strings. The characters of the first string should appear in their original order, and the characters of the second string should appear in their original order, but they can be mixed. -----Constraints----- - 1 ≤ length of first string ≤ 100 - 1 ≤ length of second string ≤ 100 - 1 ≤ length of third string ≤ 200 - All strings consist of lowercase English letters. -----Input----- Input is given from Standard Input in the following format: first_string second_string third_string -----Output----- Print \\"Yes\\" if the third string can be formed by interleaving the characters of the first two strings while maintaining their order, otherwise print \\"No.\\" -----Sample Input----- abc def adbcef -----Sample Output----- Yes In this example, \\"adbcef\\" can be formed by interleaving \\"abc\\" and \\"def\\" while maintaining their order.","solution":"def can_form_interleaved_string(first, second, third): # Check if the combined length of \'first\' and \'second\' matches the length of \'third\' if len(first) + len(second) != len(third): return \\"No\\" # Create a 2D list to use as a DP table dp = [[False] * (len(second) + 1) for _ in range(len(first) + 1)] dp[0][0] = True # Fill the dp table for i in range(len(first) + 1): for j in range(len(second) + 1): if i > 0 and first[i - 1] == third[i + j - 1]: dp[i][j] = dp[i][j] or dp[i - 1][j] if j > 0 and second[j - 1] == third[i + j - 1]: dp[i][j] = dp[i][j] or dp[i][j - 1] return \\"Yes\\" if dp[len(first)][len(second)] else \\"No\\""},{"question":"You are given a sequence of integers (representing scores) and a target sum. Your task is to determine whether any subset of the scores can sum up exactly to the target sum. -----Input----- The first line contains two integers n (1 ≤ n ≤ 100) and S (0 ≤ S ≤ 10^9) - the number of scores in the sequence and the target sum, respectively. The next line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4). -----Output----- Output \\"YES\\" if there exists a subset of the given scores that sums up to the target sum S, otherwise output \\"NO\\". -----Examples----- Input 5 9 3 34 4 12 5 2 Output YES Input 3 13 1 5 11 Output NO Input 4 0 1 -1 2 -2 Output YES -----Note----- In the first example, there exists a subset (4, 5) that sums up to 9. In the second example, no subset of the given scores sums up to 13. In the third example, the subset (1, -1) or (2, -2) sum up to 0.","solution":"def subset_sum_exists(n, S, arr): Determines if there is a subset of \'arr\' that sums to \'S\'. Parameters: n (int): The number of integers. S (int): The target sum. arr (list): The list of integers. Returns: str: \\"YES\\" if such a subset exists, otherwise \\"NO\\". def can_sum_to_target(index, current_sum): # Base cases if current_sum == S: return True if index >= n or current_sum > S: return False # Recursive cases: include the current element or exclude it return ( can_sum_to_target(index + 1, current_sum + arr[index]) or can_sum_to_target(index + 1, current_sum) ) result = can_sum_to_target(0, 0) return \\"YES\\" if result else \\"NO\\""},{"question":"Jack loves playing with numbers. He has an integer array and wants to perform queries on it. Each query consists of two integers L and R, and for each query, Jack wants to know the count of elements in the subarray from L to R (inclusive) that are perfect squares. Write a program to help Jack with his queries. ------ Input Format ------ - The first line contains a single integer N — the size of the array. - The second line contains N space-separated integers — the elements of the array. - The third line contains a single integer Q — the number of queries. - The next Q lines contain two space-separated integers L and R — the range of the subarray for each query. ------ Output Format ------ For each query, output the count of perfect squares in the subarray from index L to R (inclusive). ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^9 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N ----- Sample Input 1 ------ 6 1 2 4 7 9 16 3 1 3 2 5 3 6 ----- Sample Output 1 ------ 2 2 2 ----- Explanation 1 ------ Test case 1: The subarray from L=1 to R=3 is [1, 2, 4]. Among these, 1 and 4 are perfect squares. Test case 2: The subarray from L=2 to R=5 is [2, 4, 7, 9]. Among these, 4 and 9 are perfect squares. Test case 3: The subarray from L=3 to R=6 is [4, 7, 9, 16]. Among these, 4, 9, and 16 are perfect squares.","solution":"import math def is_perfect_square(x): Check if a number x is a perfect square. s = int(math.isqrt(x)) return s * s == x def count_perfect_squares(arr, queries): Count the number of perfect squares in subarrays specified by the queries. perfect_square_flags = [1 if is_perfect_square(x) else 0 for x in arr] prefix_sum = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sum[i] = prefix_sum[i - 1] + perfect_square_flags[i - 1] results = [] for L, R in queries: results.append(prefix_sum[R] - prefix_sum[L - 1]) return results def process_input(data): Parse the input data to get the array, number of queries, and query ranges. lines = data.strip().split(\'n\') N = int(lines[0]) array = list(map(int, lines[1].split())) Q = int(lines[2]) queries = [tuple(map(int, lines[i].split())) for i in range(3, 3 + Q)] return array, queries def main(): import sys input = sys.stdin.read data = input() array, queries = process_input(data) results = count_perfect_squares(array, queries) for res in results: print(res)"},{"question":"You are given two strings, `s1` and `s2`, both containing only lowercase English letters. You can perform the following operation any number of times (including zero times): select a substring (continuous subsequence) from `s1` and an identical substring from `s2`, and swap the positions of these substrings in their respective strings. Your task is to determine if it is possible to make the strings `s1` and `s2` equal. If it is possible to make the strings equal, print \\"YES\\". Otherwise, print \\"NO\\". ------Input------ The first line contains a single integer `t` (1 leq t leq 10) — the number of test cases. Each of the following `t` lines contains two space-separated strings `s1` and `s2` (1 leq |s1|, |s2| leq 100), the two strings to compare. ------Output------ For each test case, print \\"YES\\" if it is possible to make `s1` and `s2` equal by performing any number of substring swaps. Otherwise, print \\"NO\\". ------Examples------ Input 3 abcd dcba face cafe abc xyz Output YES YES NO ------Note------ In the first example, we can swap the entire string `abcd` with `dcba` to make both strings equal. In the second example, we can swap the substrings \\"fa\\" and \\"ca\\" in both `face` and `cafe` to make them equal. In the third example, it is impossible to transform `abc` into `xyz` with any number of swaps.","solution":"def can_make_equal(t, cases): results = [] for s1, s2 in cases: if sorted(s1) == sorted(s2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage t = 3 cases = [(\\"abcd\\", \\"dcba\\"), (\\"face\\", \\"cafe\\"), (\\"abc\\", \\"xyz\\")] print(can_make_equal(t, cases)) # Output: [\'YES\', \'YES\', \'NO\']"},{"question":"A string is defined to be \\"almost palindrome\\" if it can become a palindrome by changing exactly one character. Given a string, T, of M lowercase English letters, your task is to determine if the string can be classified as an \\"almost palindrome\\". If it is possible to make T a palindrome by changing exactly one character, print \\"YES\\"; otherwise, print \\"NO\\". Input Format The first line contains an integer, M (the length of T). The second line contains a single string, T. Constraints 1leq Mleq10^5 T consists of lowercase English letters only. Output Format Print \\"YES\\" (without quotes) if T can be converted to a palindrome by changing exactly one character. Otherwise, print \\"NO\\". Sample Input 0 5 abcca Sample Output 0 YES Sample Input 1 6 abcdef Sample Output 1 NO Sample Input 2 1 a Sample Output 2 YES Explanation In Sample Case 0, the string T=\\"abcca\\" can be transformed into the palindrome \\"ababa\\" by changing the character \'c\' at index 3 (0-based index) to \'b\', hence the answer is \\"YES\\". In Sample Case 1, the string T=\\"abcdef\\" cannot be transformed into a palindrome by changing exactly one character, hence the answer is \\"NO\\". In Sample Case 2, the string T=\\"a\\" is already a palindrome, so the answer is \\"YES\\" as we can change the single character \'a\' to another character \'a\' making it a palindrome trivially.","solution":"def almost_palindrome(M, T): Determine if the string T can be classified as an \\"almost palindrome\\" by changing exactly one character. Parameters: M (int): The length of the string T. T (str): The input string consisting of lowercase English letters. Returns: str: \\"YES\\" if the string can be converted to a palindrome by changing exactly one character, otherwise \\"NO\\". # Counter to keep track of mismatches mismatch_counter = 0 # Iterate from start and end towards the middle to check mismatches for i in range(M // 2): if T[i] != T[M - 1 - i]: mismatch_counter += 1 # If there are more than one mismatch, it cannot be \\"almost palindrome\\" if mismatch_counter > 1: return \\"NO\\" # If there\'s exactly one mismatch, or # If no mismatches found for odd-length strings, they can still be almost palindrome if mismatch_counter == 1 or (mismatch_counter == 0 and M % 2 == 1): return \\"YES\\" else: return \\"NO\\""},{"question":"Shana loves playing with puzzles, especially those involving numbers. Her friend, Zara, presented her with an interesting challenge called the \\"Smallest Subarray Sum\\". Given an array of positive integers and a positive integer target sum, find the length of the smallest contiguous subarray whose sum is greater than or equal to the target sum. If no such subarray exists, return 0. Since Shana is good at programming, she decided to write a function to solve the problem. You need to help Shana by writing a function to accomplish this task. # Input - The first line contains two positive integers n (the length of the array, where 1 ≤ n ≤ 10000) and s (the target sum, where 1 ≤ s ≤ 1000000000). - The second line contains n positive integers representing the elements of the array, where each element a_i satisfies 1 ≤ a_i ≤ 10000. # Output Print a single integer representing the length of the smallest contiguous subarray whose sum is greater than or equal to s. If no such subarray exists, print 0. # Examples Input 10 15 1 2 3 4 5 6 7 8 9 10 Output 2 Input 5 11 1 2 3 4 5 Output 3","solution":"def smallest_subarray_length(n, s, arr): min_len = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= s: min_len = min(min_len, end - start + 1) current_sum -= arr[start] start += 1 return min_len if min_len != float(\'inf\') else 0"},{"question":"A company is developing a secure messaging platform. One of the requirements is to implement an efficient encryption scheme for text messages by encoding the message using a specific rule. Your task is to write a function that encrypts a given string according to the following steps: 1. For each character in the string, compute its ASCII value. 2. For each computed ASCII value, convert it to its corresponding binary representation. 3. Concatenate all binary representations to form a long binary string. 4. Divide the long binary string into 8-bit segments (starting from the left-most bit), where each segment represents an encrypted character. If the last segment is not 8 bits long, pad it with trailing zeros to make it 8 bits. 5. Convert each 8-bit binary segment back to its ASCII character and concatenate these characters to get the final encrypted message. For instance, the word \\"Hi\\" would be encrypted as follows: - ASCII values: H -> 72, i -> 105 - Binary representations: 72 -> 01001000, 105 -> 01101001 - Concatenated binary string: 0100100001101001 - 8-bit segments: 01001000, 01101001 - Corresponding characters: 01001000 -> \'H\', 01101001 -> \'i\' - Encrypted message: \'Hi\' Therefore, the word \\"Hi\\" is encrypted as \\"Hi\\". Write a function that performs the described encryption. -----Function Signature----- ```python def encrypt_message(message: str) -> str: pass ``` -----Input----- - A single string `message` of length n (1 ≤ n ≤ 1000) containing printable ASCII characters. -----Output----- - A single string representing the encrypted message. -----Example----- Input: Hi Output: Hi Input: Hello Output: Hello","solution":"def encrypt_message(message: str) -> str: binary_string = \'\'.join(format(ord(char), \'08b\') for char in message) encrypted_message = \'\'.join(chr(int(binary_string[i:i+8], 2)) for i in range(0, len(binary_string), 8)) return encrypted_message"},{"question":"You are given an array of integers. Write a function to determine if the array is a \\"mountain array\\". An array is considered a mountain array if and only if: 1. It has at least three elements. 2. There exists some index `i` such that: - `0 < i < len(array) - 1` - `array[0] < array[1] < ... < array[i-1] < array[i]` - `array[i] > array[i+1] > ... > array[len(array)-1]` Input The input is a single line containing space-separated integers representing the array, with the length of the array between 1 and 1000 elements. Each element of the array is an integer between -10^4 and 10^4. Output Output \\"YES\\" if the array is a mountain array, and \\"NO\\" otherwise (quotes for clarity only). Examples Input 2 1 Output NO Input 0 3 2 1 Output YES","solution":"def is_mountain_array(arr): Determines if an array is a mountain array. Parameters: arr (list): A list of integers Returns: str: \'YES\' if the array is a mountain array, \'NO\' otherwise n = len(arr) if n < 3: return \\"NO\\" i = 0 # Walk up while i + 1 < n and arr[i] < arr[i + 1]: i += 1 # Peak can\'t be the first or the last element if i == 0 or i == n - 1: return \\"NO\\" # Walk down while i + 1 < n and arr[i] > arr[i + 1]: i += 1 return \\"YES\\" if i == n - 1 else \\"NO\\""},{"question":"Given a list of strings, for each string, determine if it is an anagram of a palindrome or not. An anagram of a palindrome is a string that can be rearranged to form a palindrome. Example: - \\"carrace\\" can be rearranged to \\"racecar\\", which is a palindrome. - \\"hello\\" cannot be rearranged to any palindrome. Input: The first line contains T, the number of test cases. The following lines will contain the strings. Output: You have to print YES if a given string is an anagram of a palindrome, else print NO. Constraints: 1 <= T <= 100 1 <= Length of the string <= 100 Example: Input: 2 carrace hello Output: YES NO","solution":"def is_anagram_of_palindrome(s): Determine if a string is an anagram of a palindrome. A string is an anagram of a palindrome if at most one character has an odd frequency. from collections import Counter count = Counter(s) odd_count = sum(1 for char_count in count.values() if char_count % 2 != 0) return odd_count <= 1 def process_test_cases(test_cases): results = [] for s in test_cases: if is_anagram_of_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A product development team is working on a new software that tracks the most frequent search queries made by users on their website within a given time frame. To ensure optimal performance, they need to efficiently identify the top \'k\' frequent search queries from a large dataset of past search queries. Your task is to write a function that takes in a list of search queries (possibly containing duplicates) and an integer \'k\', and returns the \'k\' most frequent queries in descending order of their frequency. If two queries have the same frequency, they can be returned in any order. INPUT FORMAT - The first line contains a single positive integer T ≤ 100, which indicates the number of test cases that follow. - For each test case: - The first line contains a single positive integer N (1 ≤ N ≤ 10^5), representing the number of search queries. - The second line contains N space-separated strings representing the search queries. - The third line contains a single positive integer k (1 ≤ k ≤ N), representing the number of top frequent queries to return. OUTPUT FORMAT For each test case, output a single line containing \'k\' space-separated strings representing the most frequent search queries in descending order of their frequency. SAMPLE INPUT 2 6 apple banana apple orange banana apple 2 8 query1 query2 query1 query1 query3 query2 query2 query4 3 SAMPLE OUTPUT apple banana query1 query2 query3","solution":"from collections import Counter import heapq def top_k_frequent_queries(queries, k): count = Counter(queries) # Get the k most common elements with their counts most_common = heapq.nlargest(k, count.items(), key=lambda item: item[1]) # Extract the queries from the most common elements result = [query for query, freq in most_common] return result def process_test_cases(test_cases): results = [] for queries, k in test_cases: top_queries = top_k_frequent_queries(queries, k) results.append(\\" \\".join(top_queries)) return results"},{"question":"You are given two positive integers X and Y. If X * Y is an even number, print X * Y; otherwise, print X + Y. -----Constraints----- - All values in input are integers. - 1 leq X, Y leq 20 -----Input----- Input is given from Standard Input in the following format: X Y -----Output----- If the product of X and Y is even, print X * Y; otherwise, print X + Y. -----Sample Input----- 3 4 -----Sample Output----- 12 Since the product of 3 and 4 is 12, which is even, 12 should be printed.","solution":"def process_numbers(x, y): Given two integers x and y, return x*y if x*y is even; otherwise, return x+y. product = x * y if product % 2 == 0: return product else: return x + y"},{"question":"Ash is a robot that traverses a 2D grid. The grid is represented as an m x n matrix, with (0,0) being the top-left corner. Ash can move in four possible directions: up, down, left, and right. However, due to hardware limitations, Ash can only execute a certain number of moves. You are given a grid with some cells marked as obstacles, where Ash cannot pass through. Additionally, you are given Ash\'s starting position, a list of directions that Ash can follow, and the number of moves Ash can execute. Your task is to determine the final position of Ash after executing the moves within the given constraints. -----Input----- The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the dimensions of the grid. The next m lines contain n characters each, representing the grid. Each character is either \'.\' (an empty cell) or \'#\' (an obstacle). The following line contains two integers x and y (0 ≤ x < m, 0 ≤ y < n) — the starting position of Ash. The next line contains a string s of length k (1 ≤ k ≤ 1000) — the sequence of directions Ash follows. Each character in s is one of \'U\' (up), \'D\' (down), \'L\' (left), or \'R\' (right). The last line contains an integer p (1 ≤ p ≤ 1000) — the maximum number of moves Ash can execute. If p is greater than k, Ash will execute the entire sequence of directions. -----Output----- Print two integers, representing the final position (row index and column index) of Ash after executing the moves. -----Examples----- Input 3 3 ... .#. ... 0 0 RRDD 4 Output 2 2 Input 3 3 ... .#. ... 0 0 RRDD 2 Output 0 2 Input 3 3 .#. .#. ... 2 0 UUUU 5 Output 0 0 -----Note----- In the first test case, Ash follows the entire sequence \'RRDD\' and ends up at position (2, 2). In the second test case, Ash can only execute 2 moves. After moving right twice, Ash is at position (0, 2). In the third test case, Ash moves up twice from the starting position (2, 0), but as soon as Ash hits the top boundary of the grid at (0, 0), further upward moves do not change Ash\'s position. Hence, the final position is (0, 0).","solution":"def final_position(m, n, grid, start_x, start_y, directions, max_moves): x, y = start_x, start_y moves = 0 for direction in directions: if moves >= max_moves: break if direction == \'U\' and x > 0 and grid[x-1][y] != \'#\': x -= 1 elif direction == \'D\' and x < m - 1 and grid[x+1][y] != \'#\': x += 1 elif direction == \'L\' and y > 0 and grid[x][y-1] != \'#\': y -= 1 elif direction == \'R\' and y < n - 1 and grid[x][y+1] != \'#\': y += 1 moves += 1 return x, y"},{"question":"You are given a set of n distinct integers. Your task is to partition this set into two subsets A and B such that the absolute difference between the sum of the elements in subset A and the sum of the elements in subset B is minimized. Input The first line of the input contains a single integer n (2 ≤ n ≤ 50) — the number of elements in the set. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the elements of the set. Output Print a single integer — the minimized absolute difference between the sum of the elements in subset A and the sum of the elements in subset B. Example Input 5 3 1 4 2 2 Output 0 Input 4 1 3 2 5 Output 1 Note In the first example, one possible way to partition the set `{3, 1, 4, 2, 2}` is into subsets `{3, 2, 2}` and `{1, 4}`, both of which have a sum of 7. Thus, the absolute difference is `|7 - 7| = 0`. In the second example, one possible way to partition the set `{1, 3, 2, 5}` is into subsets `{1, 5}` and `{3, 2}`, which have sums of 6 and 5, respectively. Thus, the absolute difference is `|6 - 5| = 1`.","solution":"from itertools import combinations def minimize_difference(n, arr): total_sum = sum(arr) min_diff = float(\'inf\') # Iterate through all possible subsets and find the minimum absolute difference for i in range(n+1): for subset in combinations(arr, i): subset_sum = sum(subset) other_sum = total_sum - subset_sum min_diff = min(min_diff, abs(subset_sum - other_sum)) return min_diff"},{"question":"You are given an array of n integers representing the heights of buildings standing in a row from left to right. Each building has a distinct height. You want to place a flag on some of these buildings such that the flags are visible from the leftmost position. A flag is visible if there is no building taller than the current building to its left. Your task is to count the number of buildings where flags can be placed. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of buildings. The second line contains n distinct integers h_1, h_2, ..., h_{n} (1 ≤ h_{i} ≤ 10^9) — the heights of the buildings from left to right. -----Output----- Print a single integer — the number of buildings where flags can be placed. -----Examples----- Input 5 4 3 2 5 1 Output 2 Input 6 1 2 3 4 5 6 Output 6 Input 4 4 1 2 3 Output 1 Input 3 10 20 30 Output 3 Input 8 8 7 6 5 4 3 2 9 Output 8 -----Note----- In the first example, only the first and fourth buildings have no taller buildings to their left. Hence, flags can be placed on these buildings. In the second example, the heights of the buildings are in increasing order, so a flag can be placed on each building.","solution":"def count_visible_flags(n, heights): Function to count the number of buildings where flags can be placed. Parameters: n (int): Number of buildings. heights (list of int): Heights of the buildings. Returns: int: The number of buildings where flags can be placed. if n == 0: return 0 max_height = heights[0] flag_count = 1 # The first building always has a flag for i in range(1, n): if heights[i] > max_height: flag_count += 1 max_height = heights[i] return flag_count"},{"question":"Anna is an avid hiker and loves exploring different mountain trails. She keeps a log of the elevation changes during each hike. One day, she decides to analyze the total elevation gains made during her hikes for better training plans. The total elevation gain in a hike is defined as the sum of all positive elevation changes. Anna plans to analyze m different hikes, each represented by a sequence of elevation changes. Each sequence contains n integers where a positive integer signifies an upward movement (elevation increase), a negative integer signifies a downward movement (elevation decrease), and zero signifies no change in elevation. Help Anna by writing a program that calculates the total elevation gain for each hike. -----Input----- The first line contains integer m (1 ≤ m ≤ 100) — the number of hikes Anna plans to analyze. The next m lines each contain n integers representing the elevation changes in that hike (-100 ≤ elevation change ≤ 100). The numbers in the lines are separated by single spaces. -----Output----- For each hike, output a single integer on a new line representing the total elevation gain for that hike. -----Examples----- Input 3 5 -2 3 0 4 4 4 -1 0 -3 0 -2 2 5 -1 Output 12 8 7 -----Note----- In the first sample, the elevation changes are [5, -2, 3, 0, 4], and the total elevation gain is 5 + 3 + 4 = 12. In the second sample, the elevation changes are [4, 4, -1, 0, -3], and the total elevation gain is 4 + 4 = 8. In the third sample, the elevation changes are [0, -2, 2, 5, -1], and the total elevation gain is 2 + 5 = 7.","solution":"def total_elevation_gains(hikes): Calculates the total elevation gain for each hike from the list of elevation changes. Parameters: hikes (list of list of int): List of lists where each list represents the elevation changes in a hike. Returns: list of int: List of total elevation gains for each hike. gains = [] for hike in hikes: gain = sum(change for change in hike if change > 0) gains.append(gain) return gains"},{"question":"You are given an island grid where each cell represents a piece of land or water. The island is represented as a 2D array of characters where \'L\' represents land and \'W\' represents water. Your task is to count the number of distinct islands in the grid. An island is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Write a function `countIslands(grid: List[List[char]]) -> int` that takes in the grid and returns the number of distinct islands. # Input The input consists of the following: - The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), which represent the number of rows and columns respectively. - The next n lines each contain a string of length m representing the grid cells (\'L\' for land, \'W\' for water). # Output Output a single integer representing the number of distinct islands found in the grid. # Examples Input ``` 4 5 LLWLL LWWLW WWWLL LLLWL ``` Output ``` 3 ``` Input ``` 3 3 LLL LWL LLL ``` Output ``` 1 ``` Input ``` 1 5 LWLWL ``` Output ``` 3 ``` # Explanation In the first example, the grid can be visualized as: ``` LLWLL LWWLW WWWLL LLLWL ``` There are three distinct islands: 1. The top-left island. 2. The island in the bottom-left corner. 3. The island in the top-right corner. In the second example, the grid can be visualized as: ``` LLL LWL LLL ``` There is only one island in the entire grid. In the third example, the grid can be visualized as: ``` LWLWL ``` There are three distinct islands, each consisting of a single \'L\'.","solution":"from typing import List def countIslands(grid: List[List[str]]) -> int: if not grid: return 0 n = len(grid) m = len(grid[0]) def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'W\': return grid[x][y] = \'W\' # Mark as visited # Explore all four possible directions (up, down, left, right) dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'L\': island_count += 1 dfs(i, j) return island_count"},{"question":"You are given a binary tree with N nodes, where each node has a unique value between 1 and N. Your task is to perform a zigzag level order traversal of the binary tree, also known as \\"zigzag\\" or \\"spiral\\" traversal, where the nodes at each depth of the tree are traversed alternately from left to right and right to left. ------ Input Format ------ - The first line contains a single integer N - the number of nodes in the tree. - The next N lines each contain two integers u and v and a character c (‘L’ or ‘R’). This indicates that there is an edge between node u and node v, with c specifying if v is the left child (\'L\') or the right child (\'R\') of u. ------ Output Format ------ Print the nodes of the binary tree in a single line, with a zigzag level order traversal format. ------ Constraints ------ 1 ≤ N ≤ 10^5 ------ Sample Input 1 ------ 7 1 2 L 1 3 R 2 4 L 2 5 R 3 6 L 3 7 R ------ Sample Output 1 ------ 1 3 2 4 5 6 7 ------ Explanation 1 ------ The zigzag level order traversal of the given binary tree: - Level 1: Traverse left to right -> 1 - Level 2: Traverse right to left -> 3 2 - Level 3: Traverse left to right -> 4 5 6 7 ------ Sample Input 2 ------ 5 1 2 L 1 3 R 2 4 L 2 5 R ------ Sample Output 2 ------ 1 3 2 4 5 ------ Explanation 2 ------ The zigzag level order traversal of the given binary tree: - Level 1: Traverse left to right -> 1 - Level 2: Traverse right to left -> 3 2 - Level 3: Traverse left to right -> 4 5","solution":"from collections import deque, defaultdict class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def zigzag_level_order(n, edges): if n == 0: return [] nodes = {i: TreeNode(i) for i in range(1, n + 1)} for u, v, c in edges: if c == \'L\': nodes[u].left = nodes[v] else: nodes[u].right = nodes[v] root = nodes[1] result = [] current_level = deque([root]) left_to_right = True while current_level: level_size = len(current_level) level_values = deque() for _ in range(level_size): node = current_level.popleft() if left_to_right: level_values.append(node.value) else: level_values.appendleft(node.value) if node.left: current_level.append(node.left) if node.right: current_level.append(node.right) result.extend(level_values) left_to_right = not left_to_right return list(result)"},{"question":"Given a string s and an integer k, your task is to determine the minimum number of characters to be inserted to make the string a k-palindrome. A string is called a k-palindrome if it can be transformed into a palindrome by removing at most k characters. Example 1: Input: s = \\"abacd\\", k = 1 Output: 1 Explanation: By inserting \'d\' at the end, \\"d\\" becomes \\"abacd\\" which becomes a palindrome by removing 1 character \'c\'. Example 2: Input: s = \\"abcdeca\\", k = 2 Output: 0 Explanation: \\"abcdeca\\" can be transformed into \\"acdeca\\" by removing up to 2 characters \\"b\\" and \\"d\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minInsertionsToMakeKPalindrome` which takes `s` and `k` as input and returns the minimum number of characters to be inserted to make the string a k-palindrome. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(n^2) Constraints: 1 ≤ s.length ≤ 1000 0 ≤ k ≤ 100","solution":"def minInsertionsToMakeKPalindrome(s, k): n = len(s) # Create a DP table for the length of the longest palindromic subsequence. dp = [[0] * (n + 1) for _ in range(n + 1)] # Fill the dp table for i in range(1, n + 1): for j in range(1, n + 1): if s[i - 1] == s[n - j]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Calculate the minimum insertions needed lps = dp[n][n] # length of the longest palindromic subsequence min_insertions_needed = n - lps # Check if the string can be a k-palindrome if min_insertions_needed <= k: return 0 else: return min_insertions_needed - k"},{"question":"Kira is fascinated by prime numbers, and he loves to identify patterns in sequences of numbers. He has come up with a challenge where he takes a sequence of integers and tries to find the longest subsequence that consists only of prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Your task is to help Kira find the length of the longest subsequence consisting entirely of prime numbers for a given sequence of integers. -----Input----- The first line of input contains an integer T, denoting the number of test cases. Each test case consists of two lines. The first line contains a single integer N, representing the number of elements in the sequence. The second line contains N space-separated integers. -----Output----- For each test case, output an integer denoting the length of the longest subsequence which consists only of prime numbers. If no prime numbers are found in the sequence, output 0. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ a_i ≤ 10^5, where a_i is the ith element in the sequence -----Example----- Input: 3 4 2 6 4 7 5 1 3 5 8 9 6 10 15 16 17 18 19 Output: 2 2 2 -----Explanation----- In the first test case, the prime numbers are [2, 7]. In the second test case, the prime numbers are [3, 5]. In the third test case, the prime numbers are [17, 19].","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def longest_prime_subsequence(arr): prime_length = 0 max_length = 0 for num in arr: if is_prime(num): prime_length += 1 max_length = max(max_length, prime_length) else: prime_length = 0 return max_length def find_longest_prime_subsequence(test_cases): results = [] for n, sequence in test_cases: results.append(longest_prime_subsequence(sequence)) return results"},{"question":"You are given an array of `n` integers. You are also given a single integer `k`. The elements of the array can be either 0, 1, or 2. Your task is to reorder the array such that all the elements equal to 0 appear before the elements equal to 1, which must appear before the elements equal to 2. Within each group, the elements must remain in their original relative order from the input. Write a function `relative_sort(arr, k)` which will take an array of integers `arr` and an integer `k` as input and will return the reordered array. **Input:** - The input contains multiple test cases. - The first line contains an integer `q` — the number of test cases. - Each test case consists of two lines: - The first line contains an integer `n` (1 le n le 10^5) — the number of elements in the array. - The second line contains `n` integers `arr[i]` (0 le arr[i] le 2) — the elements of the array. - The sum of `n` over all test cases does not exceed 10^5. **Output:** - For each test case, output the reordered array in a single line, with elements separated by spaces. **Example:** Input: ``` 3 5 2 0 2 1 1 7 0 1 0 2 1 2 0 4 2 2 0 1 ``` Output: ``` 0 1 1 2 2 0 0 0 1 1 2 2 0 1 2 2 ``` **Note:** In the first test case, we move all 0s to the front, followed by 1s in their original relative order, and then by 2s in their original relative order. Thus, the reordered array is `0 1 1 2 2`. In the second test case, we similarly move all 0s to the front, followed by 1s, and then 2s ensuring the original relative order is maintained: `0 0 0 1 1 2 2`. In the third test case, the relative order is `0 1` for the `0` and `1` elements, followed by `2 2` for the `2` elements.","solution":"def relative_sort(arr, n): return sorted(arr, key=lambda x: (x != 0, x != 1)) def process_test_cases(q, test_cases): results = [] for case in test_cases: n, arr = case sorted_arr = relative_sort(arr, n) results.append(\' \'.join(map(str, sorted_arr))) return \'n\'.join(results)"},{"question":"Bob loves making words from a given string. He has come up with a new game to test his programming skills. The game involves counting the number of words that can be formed using characters from the given string such that each word contains all the characters of another given smaller string in the exact order. However, Bob realized that he can use each character in the given string only once for creating a word. Help Bob in figuring out the maximum number of words he can form using the given conditions. -----Input----- The first line contains a single string s (1 ≤ |s| ≤ 100) — the string from which Bob will form words. The second line contains a single string t (1 ≤ |t| ≤ 10) — the string whose sequence of characters must appear in each word. -----Output----- Print the maximum number of words that can be formed using characters from the given string s with each word containing the characters of string t in the exact order. -----Examples----- Input ababcb ab Output 2 Input aaaaa aa Output 2 Input abcdef g Output 0 -----Note----- In the first example, \\"ab\\" can be formed twice using characters (substring \\"ab\\" from \\"ababcb\\" and another \\"ab\\" from the remaining characters \\"cb\\"). In the second example, \\"aa\\" can be formed twice using characters (using \\"aa\\" twice from \\"aaaaa\\"). In the third example, \\"g\\" does not appear in \\"abcdef\\", so no words can be formed.","solution":"def max_words_formed(s, t): Returns the maximum number of words that can be formed using characters from string s, with each word containing characters of string t in the exact order. from collections import Counter # count the frequency of each character in both strings s_count = Counter(s) t_count = Counter(t) # calculate the maximum number of times t can be formed min_count = float(\'inf\') for char in t_count: if char not in s_count: return 0 # find the minimum number of times any character in t can be found in s relative to its count in t min_count = min(min_count, s_count[char] // t_count[char]) return min_count"},{"question":"You are given a text string. Write a program to determine the most frequently occurring character in the string. If there are multiple characters with the same highest frequency, return the one that appears first in the string. Ignore case when counting character frequencies (i.e., \'A\' and \'a\' should be considered the same character), but return the character in the case it first appears in the string. Input: The input will consist of a single line containing a non-empty string of up to 1000 characters. Output: Output a single character which is the most frequently occurring in the string. If there are ties, output the character that appears first. Example Input: AttentIOn Output: t Explanation: The character \'t\' appears 2 times, which is the highest frequency in the string. Even though \'A\' (or \'a\') also appears 1 time, \'t\' appears first in the string.","solution":"def most_frequent_character(text): Returns the most frequently occurring character in the string. If there are ties, returns the character that appears first. frequency = {} for char in text: lower_char = char.lower() if lower_char in frequency: frequency[lower_char] += 1 else: frequency[lower_char] = 1 max_frequency = 0 most_frequent_char = None for char in text: lower_char = char.lower() if frequency[lower_char] > max_frequency: max_frequency = frequency[lower_char] most_frequent_char = char return most_frequent_char"},{"question":"Given a string representing a mathematical expression, determine whether the expression has balanced parentheses. The expression contains only the characters \'(\', \')\', \'+\', \'-\', \'*\', \'/\', and digits. For example: - The expression \\"3 + (2 * (1 + 3) / 2)\\" is balanced and should return `true`. - The expression \\"(3 + 2)) * (1 + 2\\" is not balanced and should return `false`. Complete the function `isBalanced(expression: str) -> bool` to solve this problem. ```python def isBalanced(expression: str) -> bool: pass # Test cases print(isBalanced(\\"3 + (2 * (1 + 3) / 2)\\")) # Expected output: True print(isBalanced(\\"(3 + 2)) * (1 + 2\\")) # Expected output: False print(isBalanced(\\"((()))\\")) # Expected output: True print(isBalanced(\\")((\\")) # Expected output: False ```","solution":"def isBalanced(expression: str) -> bool: Returns True if the parentheses in the expression are balanced, otherwise False. stack = [] for char in expression: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"**Coding Assessment Question** Time Limit: 6 sec / Memory Limit: 128 MB A popular programming contest gives points to teams based on the sequence in which they submit correct solutions. The first correct solution gets 100 points, the second gets 90, and so on, with each subsequent correct solution receiving 10 points less than the previous one. Design an algorithm to calculate the total points for a team based on their submissions. # Input - First line contains an integer `n` (1 ≤ n ≤ 1000) which denotes the number of submissions. - Second line contains `n` integers, each either `0` or `1`, where `1` indicates a correct solution and `0` indicates an incorrect solution. # Output - Output a single integer which represents the total points the team earns based on the order of correct solutions. # Example **Input** ``` 5 1 0 1 1 0 ``` **Output** ``` 270 ``` **Explanation**: - The team has 5 submissions where `[1, 0, 1, 1, 0]` denotes 3 correct submissions. - The first correct solution gets 100 points, the second gets 90 points, and the third gets 80 points. - Total points = 100 + 90 + 80 = 270.","solution":"def calculate_points(n, submissions): Calculate the total points for a team based on the sequence of correct submissions. Parameters: n (int): The number of submissions. submissions (list): List of integers indicating if a submission is correct (1) or incorrect (0). Returns: int: The total points scored by the team. points = 0 current_points = 100 for submission in submissions: if submission == 1: points += current_points current_points -= 10 return points"},{"question":"Create a function `digit_root(n)` that takes an integer `n` and returns its digit root. The digit root of a non-negative integer is the single digit obtained by an iterative process of summing digits, on each iteration using the result from the previous iteration to compute a digit sum. The process continues until a single-digit number is reached. For example: - If `n` is 456, the process would be `4+5+6 = 15` and then `1+5 = 6`, so the output should be 6. - If `n` is 942, the process would be `9+4+2 = 15` and then `1+5 = 6`, so the output should be 6. - If `n` is 132189, the process would be `1+3+2+1+8+9 = 24` and then `2+4 = 6`, so the output should be 6. Note: The input `n` will always be a non-negative integer. ```python def digit_root(n): while n >= 10: n = sum(int(digit) for digit in str(n)) return n ```","solution":"def digit_root(n): Returns the digit root of a non-negative integer n. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"You are given an integer array `buildings` where `buildings[i]` represents the height of the `i-th` building. Alice and Bob decide to play a game on these buildings. Alice starts first and then they alternate turns. On each turn, a player jumps to a new building. The height of the building they are currently on determines how many buildings away they can jump to. Specifically, if a player is on the i-th building, they can only jump to the i + buildings[i] or i - buildings[i] (if these positions are within the bounds of the array). Once they jump to a building, it becomes \\"visited\\" and cannot be landed upon again. The winner is the player who cannot make a valid jump on their turn. Given a starting position for Alice `start`, and an integer array `buildings`, determine who the winner is if both players play optimally and output the winner\'s name. -----Input----- The first line contains an integer T (1 le T le 100) — the number of test cases. Each test case consists of two lines. The first line contains two integers n (1 le n le 1000) — the number of buildings, and `start` (0 le start < n) — the starting position of Alice. The second line contains n integers representing `buildings` (1 le buildings[i] le 1000). -----Output----- For each test case, print either \\"Alice\\" if Alice wins or \\"Bob\\" if Bob wins. -----Example----- Input 3 5 0 2 3 1 1 4 4 2 1 2 1 2 6 3 3 1 1 2 1 2 Output Alice Bob Alice","solution":"def optimal_game_winner(buildings, start): n = len(buildings) visited = [False] * n def can_jump(pos): if pos < 0 or pos >= n or visited[pos]: return False return True def dfs_turn(pos): visited[pos] = True moves = [pos + buildings[pos], pos - buildings[pos]] for move in moves: if can_jump(move): if not dfs_turn(move): visited[pos] = False return True visited[pos] = False return False return \\"Alice\\" if dfs_turn(start) else \\"Bob\\" def determine_winners(test_cases): results = [] for test in test_cases: n, start = test[0] buildings = test[1] results.append(optimal_game_winner(buildings, start)) return results"},{"question":"Create a function that receives a string as input and returns the length of the longest substring without repeating characters. Your solution should iterate through the string only once, in linear time complexity. SAMPLE INPUT abcabcbb bbbbb pwwkew SAMPLE OUTPUT 3 1 3 Explanation: EXAMPLE 1:- The longest substring without repeating characters is \\"abc\\", which the length is 3. EXAMPLE 2:- The longest substring without repeating characters is \\"b\\", which the length is 1. EXAMPLE 3:- The longest substring without repeating characters is \\"wke\\", which the length is 3.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_map and char_map[char] >= start: start = char_map[char] + 1 char_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"You are organizing a library, and one of the tasks is to ensure all the shelves are neatly arranged. Each shelf has a different maximum capacity, and you need to distribute the books across shelves accordingly. You want to ensure that each shelf is either fully occupied or entirely empty after placing the books. Write a function `distribute_books(shelves, books)` that takes two arguments: a list `shelves` of integers representing the capacities of the shelves, and an integer `books` representing the total number of books you need to distribute. The function should return `True` if it is possible to distribute the books such that each shelf is either completely filled or left empty, otherwise it should return `False`. For instance, `distribute_books([5, 10, 20], 25)` should return `True` because you can use the shelves with capacities 20 and 5 to store all the books, but `distribute_books([5, 10, 20], 23)` should return `False` because there is no way to distribute 23 books among the shelves. Note: You do not need to use loops or recursive functions explicitly to solve this problem. Think about how you can apply set operations or dynamic programming techniques to find the solution. Examples: ```python distribute_books([5, 10, 20], 25) # True distribute_books([5, 10, 20], 23) # False ```","solution":"def distribute_books(shelves, books): Determines if it\'s possible to distribute a given number of books across shelves such that each shelf is either completely filled or left empty. shelves: List[int] - List of integers representing the capacities of the shelves. books: int - Total number of books to distribute. return: bool - True if it is possible to distribute the books accordingly, otherwise False. dp = [False] * (books + 1) dp[0] = True for shelf in shelves: for b in range(books, shelf - 1, -1): if dp[b - shelf]: dp[b] = True return dp[books]"},{"question":"Valyria is renowned for its dragon breeding, and each dragon has a power level. The Valyrians have divided their dragons into boldsymbol{k} breeds, and dragons within the same breed can form alliances or engage in battles with dragons from other breeds. Initially, there are n dragons, each associated with one of the boldsymbol{k} breeds, and each having a specific power level. The Valyrians want to track these dragons and decide on the outcome of battles or updates to the breeds as new dragons are bred or existing ones die in battles. You need to implement the following queries: 1. boldsymbol{1 p x}: Add a dragon with power level boldsymbol{p} to the breed boldsymbol{x}. 2. boldsymbol{2 x y}: Determine and print the strongest breed between boldsymbol{x} and y in their current state. The breed with the highest total power of all its dragons is considered stronger. Given the initial configuration and textit{q} queries, output the result after each type 2 query. Input Format The first line contains three space-separated integers n (the number of dragons), boldsymbol{k} (the number of breeds), and textit{q} (the number of queries). Each of the next n lines contains two space-separated integers s_i (the power level of the dragon) and t_i (the breed of the dragon). Each of the textit{q} subsequent lines contains a space-separated query (either 1 p x or 2 x y). Constraints - 1 leq n, q leq 2 times 10^5 - 1 leq k leq 2 times 10^5 - 1 leq x, y, t_i leq k - 1 leq s_i, p leq 2 times 10^5 Output Format For each type 2 query, print the number of the breed with the higher total power. If both breeds have the same total power, print the breed with the smaller number. Sample Input ``` 7 3 6 10 2 5 1 8 2 7 1 6 3 3 3 12 2 2 2 1 2 3 1 1 9 1 2 1 2 2 2 3 2 1 3 ``` Sample Output ``` 2 1 1 2 1 ``` Explanation Initially, breed 1 has dragons with power levels {5, 7} and a total power of 12. Breed 2 has dragons with power levels {10, 8, 12} and a total power of 30. Breed 3 has dragons with power levels {6, 3} and a total power of 9. 1. For the first query 2 2 1, breed 2 has a higher total power (30>12), so we print 2. 2. For the second query 2 3 1, breed 1 has a higher total power (12>9), so we print 1. 3. For the third query 1 9 1, a new dragon with power 9 is added to breed 1. Now, breed 1’s total power becomes 21 (12+9). 4. For the fourth query 2 1 2, breed 1 still has a total power of 21 which is lesser than breed 2’s total power of 30, so we print 2. 5. For the fifth query 2 2 3, breed 2 has a total power of 30 which is greater than breed 3’s total power of 9, so we print 2. 6. For the sixth query 2 1 3, breed 1 has a total power of 21 which is greater than breed 3’s total power of 9, so we print 1.","solution":"def manage_dragons(n, k, q, dragons, queries): breed_power = [0] * (k + 1) for power, breed in dragons: breed_power[breed] += power results = [] for query in queries: if query[0] == 1: p, x = query[1], query[2] breed_power[x] += p elif query[0] == 2: x, y = query[1], query[2] if breed_power[x] > breed_power[y]: results.append(x) elif breed_power[x] < breed_power[y]: results.append(y) else: results.append(min(x, y)) return results"},{"question":"Given a 2D grid of size n x m, you are initially positioned at the top-left corner (0, 0). Each cell in the grid has a non-negative integer value representing the cost to enter that cell. You can only move right or down one cell at a time. Determine the minimum cost to reach the bottom-right corner (n-1, m-1) of the grid. Example 1: Input: grid = [[1,3,1],[1,5,1],[4,2,1]] Output: 7 Explanation: - The path that minimizes the cost is 1 → 3 → 1 → 1 → 1 = 7. Example 2: Input: grid = [[1,2,3],[4,5,6]] Output: 12 Explanation: - The path that minimizes the cost is 1 → 2 → 3 → 6 = 12. Constraints: - n == grid.length - m == grid[i].length - 1 <= n, m <= 200 - 0 <= grid[i][j] <= 100","solution":"def minPathSum(grid): Given a 2D grid, find the minimum cost path from the top-left to the bottom-right corner. :param grid: List[List[int]] - 2D list representing the grid with non-negative costs. :return: int - the minimum cost to reach bottom-right corner. n = len(grid) m = len(grid[0]) # Create a 2D dp array initialized to 0 dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # Return the value in bottom-right corner return dp[n-1][m-1]"},{"question":"Problem Implement a function that determines whether a given string can be rearranged to form a palindrome. A string is a palindrome if it reads the same forward and backward. You are required to write a function `canFormPalindrome` that takes a single string `s` as input and returns a boolean value indicating whether it is possible to rearrange the string into a palindrome. # Constraints * The input satisfies the following conditions: * The length of the string `s` is between 1 and 10^6. * The string `s` contains only lowercase English characters. # Input * A single line containing the string `s`. # Output * Return `True` if `s` can be rearranged to form a palindrome, otherwise return `False`. # Examples Input ``` civic ``` Output ``` True ``` Input ``` ivicc ``` Output ``` True ``` Input ``` hello ``` Output ``` False ``` # Hint * A string can be rearranged to form a palindrome if at most one character has an odd frequency count, while all other characters have even frequency counts. * Pay attention to the performance in your implementation, as this will affect strings of up to 10^6 characters.","solution":"from collections import Counter def canFormPalindrome(s): Determines whether a given string can be rearranged to form a palindrome. Args: s (str): The input string containing only lowercase English characters. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. # Count the frequency of each character in the string char_count = Counter(s) # Check how many characters have an odd frequency count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if at most one character has an odd frequency count return odd_count <= 1"},{"question":"The weather service has been gathering temperature data from various cities. They need your help to quickly find out if there\'s any alarming pattern in the temperatures recorded. Specifically, they want to know if there are any instances of three consecutive days having temperatures above a given threshold. Write a function that takes a list of temperatures and a threshold value. The function should return `True` if there are three consecutive days with temperatures above the threshold, and `False` otherwise. Example: Input: ```python temperatures = [73, 74, 75, 71, 69, 72, 76, 73] threshold = 70 ``` Output: ```python True ``` Explanation: There are several instances of three consecutive days with temperatures above 70 (e.g., 73, 74, 75). Input: ```python temperatures = [60, 61, 62, 63, 65, 60, 61, 62] threshold = 66 ``` Output: ```python False ``` Explanation: No three consecutive days have temperatures above 66.","solution":"def has_three_consecutive_days_above_threshold(temperatures, threshold): Returns True if there are three consecutive days with temperatures above the given threshold, otherwise returns False. count = 0 # To count consecutive days above threshold for temp in temperatures: if temp > threshold: count += 1 if count == 3: return True else: count = 0 # Reset count if temperature is not above threshold return False"},{"question":"You are given an array of integers and an integer k. Your task is to determine the number of unique elements in every contiguous subarray of length k and find the maximum among these counts. -----Input:----- - First line will contain two integers n (size of the array) and k (length of the subarray). - Second line will contain n integers separated by spaces, representing the elements of the array. -----Output:----- Output a single integer - the maximum number of unique elements among all contiguous subarrays of length k. -----Constraints----- - 1 leq n leq 10^6 - 1 leq k leq n - 1 leq array[i] leq 10^9 for 1 leq i leq n -----Sample Input:----- 7 4 1 2 1 3 4 2 3 -----Sample Output:----- 4","solution":"def max_unique_in_subarrays(n, k, arr): from collections import defaultdict unique_count = defaultdict(int) current_unique = 0 max_unique = 0 for i in range(k): if unique_count[arr[i]] == 0: current_unique += 1 unique_count[arr[i]] += 1 max_unique = current_unique for i in range(k, n): if unique_count[arr[i - k]] == 1: current_unique -= 1 unique_count[arr[i - k]] -= 1 if unique_count[arr[i]] == 0: current_unique += 1 unique_count[arr[i]] += 1 max_unique = max(max_unique, current_unique) return max_unique"},{"question":"In a grid of size n x n, there are some cells that are blocked. Your task is to navigate from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1) with the minimum cost. You can move right, left, up, or down, and each move costs 1 unit. If a cell is blocked, you cannot move through it. You need to find the minimum cost to reach the destination or determine if it\'s impossible. Input The first line contains an integer n (1 ≤ n ≤ 10^3) — the size of the grid. The next n lines each contain a string of n characters (\'.\' for an open cell and \'#\' for a blocked cell). Output Output the minimum number of moves required to navigate from the top-left corner to the bottom-right corner. If it\'s impossible, output -1. Example Input 5 ..... .#. ....# .#. ..... Output 8 Input 3 .#. .#. .#. Output -1 Note In the first example, the available path is: (0, 0) → (0, 1) → (0, 2) → (0, 3) → (0, 4) → (1, 4) → (2, 4) → (3, 4) → (4, 4) Leading to a total cost of 8 moves. In the second example, there\'s no available path from the top-left corner to the bottom-right corner, so the output is -1.","solution":"from collections import deque def min_cost_to_destination(n, grid): if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * n for _ in range(n)] queue = deque([(0, 0, 0)]) visited[0][0] = True while queue: x, y, cost = queue.popleft() if x == n-1 and y == n-1: return cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, cost + 1)) return -1"},{"question":"Create a function ```reverse_sentence(sentence)``` that takes a string containing a sentence and returns the sentence with each word\'s characters reversed but with the words in their original order. For example, if ```sentence``` is \\"Hello World from AI\\" then the output should be \\"olleH dlroW morf IA\\". Assume the input string consists of only alphabetic characters and spaces, with words separated by a single space.","solution":"def reverse_sentence(sentence): This function takes a sentence and returns the sentence with each word\'s characters reversed but with the words in their original order. return \' \'.join(word[::-1] for word in sentence.split())"},{"question":"You are given a collection of books, each represented by its title, author, year of publication, and the genre. You are to write a program that organizes these books into a catalog and provides the following functionalities: 1. **Add a book**: Adds a book to the catalog with the provided details. 2. **Remove a book**: Removes a book from the catalog based on its title. 3. **Search for a book by title**: Returns the details of the book with the given title. 4. **List all books by a specific author**: Returns a list of all books written by the given author. 5. **List all books in a specific genre**: Returns a list of all books in the specified genre. Your program should support the following operations: - `A <title> <author> <year> <genre>`: Add a book to the catalog. - `R <title>`: Remove a book from the catalog based on the title. - `S <title>`: Search for a book by title and print its details. - `L author <author>`: List all books by the given author. - `L genre <genre>`: List all books in the specified genre. Each book title, author, genre is a string without spaces. The year is a positive integer. ----Input---- The first line contains an integer `N`, which indicates the number of operations to be performed. The next `N` lines each contain one operation in the formats described above. ----Output---- For `S <title>` operation, if the book is found, print its details in the format: `<title> <author> <year> <genre>` If the book is not found, print `Book not found`. For `L author <author>` and `L genre <genre>` operations, print the list of all books in the format: `<title> <author> <year> <genre>` If no books are found for the specified author or genre, print `No books found`. For all other operations, no output is required. ----Examples---- Sample Input: 9 A TheHobbit J.R.R.Tolkien 1937 Fantasy A Dune FrankHerbert 1965 ScienceFiction A Foundation IsaacAsimov 1951 ScienceFiction S TheHobbit L author FrankHerbert L genre ScienceFiction R Dune L genre ScienceFiction S Dune Sample Output: TheHobbit J.R.R.Tolkien 1937 Fantasy Dune FrankHerbert 1965 ScienceFiction Dune FrankHerbert 1965 ScienceFiction Foundation IsaacAsimov 1951 ScienceFiction Book not found","solution":"class BookCatalog: def __init__(self): self.catalog = {} def add_book(self, title, author, year, genre): self.catalog[title] = { \\"author\\": author, \\"year\\": year, \\"genre\\": genre } def remove_book(self, title): if title in self.catalog: del self.catalog[title] def search_book(self, title): if title in self.catalog: book = self.catalog[title] return f\\"{title} {book[\'author\']} {book[\'year\']} {book[\'genre\']}\\" else: return \\"Book not found\\" def list_books_by_author(self, author): books_by_author = [ f\\"{title} {book[\'author\']} {book[\'year\']} {book[\'genre\']}\\" for title, book in self.catalog.items() if book[\'author\'] == author ] if books_by_author: return \\"n\\".join(books_by_author) else: return \\"No books found\\" def list_books_by_genre(self, genre): books_by_genre = [ f\\"{title} {book[\'author\']} {book[\'year\']} {book[\'genre\']}\\" for title, book in self.catalog.items() if book[\'genre\'] == genre ] if books_by_genre: return \\"n\\".join(books_by_genre) else: return \\"No books found\\" def process_operations(operations): catalog = BookCatalog() result = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"A\\": _, title, author, year, genre = parts catalog.add_book(title, author, int(year), genre) elif command == \\"R\\": _, title = parts catalog.remove_book(title) elif command == \\"S\\": _, title = parts result.append(catalog.search_book(title)) elif command == \\"L\\": if parts[1] == \\"author\\": author = parts[2] result.append(catalog.list_books_by_author(author)) elif parts[1] == \\"genre\\": genre = parts[2] result.append(catalog.list_books_by_genre(genre)) return result"},{"question":"Write a function that takes a string of digits and returns all possible strings that can be created by replacing each digit with the corresponding letters on a phone keypad. For example, \'2\' can be replaced with \'a\', \'b\', or \'c\'. **Constraints:** - The input string will contain only digits between \'2\' and \'9\'. - The input string will have a length between 1 and 4. **Example:** Input: ``` \\"23\\" ``` Output: ``` [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] ``` Function signature: ```python def digit_to_letter_combinations(digits: str) -> List[str]: ``` Note: Do not use any external libraries for this problem. ```python # Here is a sample mapping of digits to letters based on a standard phone keypad: # \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' ```","solution":"from typing import List def digit_to_letter_combinations(digits: str) -> List[str]: if not digits: return [] phone_mapping = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } def backtrack(index: int, path: str): if index == len(digits): combinations.append(path) return letters = phone_mapping[digits[index]] for letter in letters: backtrack(index + 1, path + letter) combinations = [] backtrack(0, \\"\\") return combinations"},{"question":"Santa is delivering gifts to houses arranged in a straight line on a street. Each house has a unique number representing the amount of time in minutes it takes to deliver the gift to that house. Due to limited time, Santa can only visit a specific range of houses. Given multiple queries, each specifying the range (a continuous segment of houses), Santa needs to determine the total time required to deliver gifts to all houses within that range. Write a function that takes an array `times` representing the time taken for each house to deliver the gift, and an array `queries`, where each query is a pair of integers representing the start and end indices of the range. The function should return an array of integers where each integer is the total delivery time for the respective query range. # Example Input: ``` times = [5, 3, 8, 6, 2, 7] queries = [[0, 2], [1, 4], [3, 5]] ``` Output: ``` [16, 19, 15] ``` Explanation: 1. For the first query, the range is [0, 2], so the sum is 5 + 3 + 8 = 16. 2. For the second query, the range is [1, 4], so the sum is 3 + 8 + 6 + 2 = 19. 3. For the third query, the range is [3, 5], so the sum is 6 + 2 + 7 = 15. # Your Task: You don\'t need to read input or print anything. Your task is to complete the function `query_delivery_times()` that takes in an array of integers `times` and an array of pairs `queries` and returns a list of integers with the total delivery times for each query. # Constraints: 1. 1 <= len(times) <= 10^{4} 2. 1 <= times[i] <= 10^{3} 3. 1 <= len(queries) <= 10^{4} 4. 0 <= start <= end < len(times)","solution":"def query_delivery_times(times, queries): Given the delivery times for each house, computes the total time required to deliver gifts for specified ranges of houses. Parameters: times (list of int): A list of times for each house. queries (list of list of int): A list of queries where each query is [start, end]. Returns: list of int: A list containing the total delivery times for each query range. results = [] for start, end in queries: results.append(sum(times[start:end+1])) return results"},{"question":"You are given a grid with H rows and W columns. Each cell is either empty, represented by \'.\', or contains a block, represented by \'#\'. A robot starts at the top-left corner of the grid and can move to the right or down to reach the bottom-right corner. The robot cannot pass through cells containing \'#\'. Implement a function that returns the number of different paths the robot can take to reach the bottom-right corner of the grid, modulo 10^9 + 7. -----Constraints----- - 1 leq H, W leq 1000 -----Input----- Input is given from Standard Input in the following format: H W grid (H lines, each containing W characters) -----Output----- Print the number of different paths the robot can take to reach the bottom-right corner of the grid, modulo 10^9 + 7. -----Sample Input----- 3 3 ... .#. ... -----Sample Output----- 2 In this example, there are two different paths from the top-left to the bottom-right: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def num_paths(H, W, grid): MOD = 10**9 + 7 if grid[0][0] == \'#\' or grid[H-1][W-1] == \'#\': return 0 dp = [[0] * W for _ in range(H)] dp[0][0] = 1 for i in range(H): for j in range(W): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] dp[i][j] %= MOD return dp[H - 1][W - 1]"},{"question":"Given an array of integers, find the length of the longest subarray which forms a geometric progression. A subarray forms a geometric progression if for any three consecutive elements in the subarray, the ratio of the second element to the first element is the same as the ratio of the third element to the second element. Assume all elements in the array are positive integers. Example 1: Input: arr = [1, 3, 9, 27, 81, 8, 4, 2] Output: 5 Explanation: The subarray [1, 3, 9, 27, 81] forms a geometric progression with a common ratio of 3. Example 2: Input: arr = [1, 5, 25, 125, 2, 8, 4, 16] Output: 4 Explanation: The subarray [1, 5, 25, 125] forms a geometric progression with a common ratio of 5. Your Task: You do not need to read input or print anything. Your task is to complete the function longestGeoSubarray() which takes a list of integers arr as input and returns the length of the longest subarray that forms a geometric progression. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ arr.length ≤ 10^5 1 ≤ arr[i] ≤ 10^9","solution":"def longestGeoSubarray(arr): if len(arr) < 2: return len(arr) max_len = 1 current_len = 1 ratio = None for i in range(1, len(arr)): if arr[i-1] != 0 and arr[i] % arr[i-1] == 0: current_ratio = arr[i] // arr[i-1] if ratio is None or current_ratio == ratio: current_len += 1 ratio = current_ratio else: max_len = max(max_len, current_len) current_len = 2 ratio = current_ratio else: max_len = max(max_len, current_len) current_len = 1 ratio = None max_len = max(max_len, current_len) return max_len"},{"question":"You have a list of integers. You can choose to split this list into multiple sublists, with each sublist containing contiguous elements from the original list. However, you are allowed to rearrange the order of these sublists before concatenating them back into one final list. How many different permutations of the original list can you obtain? Constraints * 1 leq n leq 300,000 * The elements of the list are integers. Input Input is given from Standard Input in the following format: n a_1 a_2 ... a_n Output Print the number of different permutations of the original list you can obtain by splitting and rearranging sublists. Examples Input 4 1 2 3 4 Output 24 Input 3 5 6 7 Output 6 Input 5 9 9 8 8 7 Output 120","solution":"import math def count_permutations(n, a): Returns the number of different permutations of the original list by splitting it into sublists and rearranging them. return math.factorial(n)"},{"question":"In a small town, there are N houses arranged in a row and each house is either painted red or blue. You and your friend Alice decide to play a game. Alice gives you M instructions, each instruction either tells you a sequence of houses has the same color, or it tells you a specific house has a specific color. Your task is to determine the minimum number of instructions you need to erase to make the remaining instructions logically consistent. A logically consistent state means that there are no contradictions among the given instructions. Constraints: 1 ≤ N ≤ 200 1 ≤ M ≤ 5000 Input format: - In the first line, there are two integers N and M, denoting the number of houses and the number of instructions given by Alice. - M lines follow; each line is one of the following types of instructions: - \\"S a b\\" which denotes all houses from a to b (inclusive) are of the same color. - \\"C a color\\" which denotes the house at position a is painted with the specified color, where color is either \\"red\\" or \\"blue\\". Output format: In one line, output a single integer denoting the minimum number of instructions to erase to make the remaining instructions logically consistent. SAMPLE INPUT 4 5 S 1 2 C 1 red S 2 3 C 2 blue S 3 4 SAMPLE OUTPUT 1 Explanation To make all instructions consistent, we can erase the fourth instruction. The remaining instructions then do not contradict each other: houses 1 and 2 must be the same color, 1 is red, thus 2 is red, and houses 2 and 3 are the same color, thus 3 is red, and houses 3 and 4 are the same color, thus 4 is red.","solution":"def min_instructions_to_erase(N, M, instructions): parent = list(range(N + 1)) color = [-1] * (N + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX to_erase = 0 for ins in instructions: parts = ins.split() if parts[0] == \'S\': a, b = int(parts[1]), int(parts[2]) for i in range(a, b): union(i, i + 1) elif parts[0] == \'C\': a, c = int(parts[1]), parts[2] root = find(a) if color[root] == -1: color[root] = c elif color[root] != c: to_erase += 1 for ins in instructions: parts = ins.split() if parts[0] == \'S\': a, b = int(parts[1]), int(parts[2]) a_color = color[find(a)] for i in range(a + 1, b + 1): if a_color != -1 and color[find(i)] != -1 and color[find(i)] != a_color: to_erase += 1 break return to_erase # Process input def solve_from_input(input_str): input_lines = input_str.strip().split(\'n\') N, M = map(int, input_lines[0].split()) instructions = input_lines[1:] return min_instructions_to_erase(N, M, instructions)"},{"question":"Design a function that takes a string representing a mathematical expression containing only single-digit integers, the operators \'+\', \'-\', \'*\', and \'/\', and parentheses. The function should return the result of evaluating the string as an arithmetic expression. Your task is to implement the function that will correctly handle the order of operations, including parentheses. **Examples:** \\"3+2*2\\" => 7 \\"3/2\\" => 1.5 (the result should be a float as division may not result in an integer) \\" ( 3 + 2 ) * 2 \\" => 10 \\" 3 + (2 * 2) \\" => 7 **Notes:** - The input string will be well-formed (no need to validate for mismatched parentheses, invalid characters, etc.) - Implementations should respect order of operations (brackets, then division/multiplication, and finally addition/subtraction)","solution":"def calculate(s: str) -> float: def evaluate(tokens): Evaluate expression in reverse Polish notation. stack = [] for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(a / b) else: stack.append(float(token)) return stack[0] def toReversePolish(s: str): Convert the infix expression to reverse Polish notation. priority = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} operators = [] postfix = [] i = 0 while i < len(s): if s[i] == \' \': i += 1 elif s[i] in \'0123456789\': num = \'\' while i < len(s) and s[i] in \'0123456789\': num += s[i] i += 1 postfix.append(num) elif s[i] in \\"+-*/\\": while (operators and operators[-1] != \'(\' and priority[operators[-1]] >= priority[s[i]]): postfix.append(operators.pop()) operators.append(s[i]) i += 1 elif s[i] == \'(\': operators.append(s[i]) i += 1 elif s[i] == \')\': while operators and operators[-1] != \'(\': postfix.append(operators.pop()) operators.pop() i += 1 while operators: postfix.append(operators.pop()) return postfix tokens = toReversePolish(s) return evaluate(tokens)"},{"question":"You are given a string consisting of only digits. Your task is to check if the string represents a valid palindrome number without removing any leading zeros. A palindrome is a string that reads the same forward and backward. Input The input consists of a single line containing a non-empty string s, where s is the number you need to check. The length of s will not exceed 100 characters. Output Print \\"YES\\" if the string is a palindrome number, otherwise print \\"NO\\". Examples Input 121 Output YES Input 123001321 Output NO","solution":"def is_palindrome_number(s): Checks if the given string s is a palindrome number. Parameters: s (str): A string representing a number. Returns: str: \\"YES\\" if the string is a palindrome number, otherwise \\"NO\\". return \\"YES\\" if s == s[::-1] else \\"NO\\""},{"question":"In a bustling marketplace, merchants compete to sell their unique handcrafted goods. Each merchant offers a selection of items, each of varying prices and unique characteristics. Customers visiting the marketplace are particular about what they want based on certain attributes of the items. Your task is to determine if a customer\'s specific request for items can be fulfilled by a single merchant in the marketplace. You are given a catalog of items from different merchants, each item having attributes: name, price, and a set of properties. The customer\'s request specifies desired properties along with a maximum price they are willing to pay for each item. The solution should check if there is any merchant who can fulfill the customer\'s entire request within the given constraints. Input The input consists of a single test case in the format below. M N_1 merchant_1 name_1^1 price_1^1 properties_1^1 vdots name_1^{N_1} price_1^{N_1} properties_1^{N_1} vdots N_M merchant_M name_M^1 price_M^1 properties_M^1 vdots name_M^{N_M} price_M^{N_M} properties_M^{N_M} K C_1 max_price_1 vdots C_K max_price_K The first line consists of an integer M (1 leq M leq 10^3), which represents the number of merchants. For each merchant, the first line contains an integer N_i (1 leq N_i leq 10^2), which represents the number of items they offer, followed by the merchant\'s name. The next N_i lines for each merchant consist of the name of the item, the price of the item, and a space-separated list of properties of the item. The next line consists of an integer K (1 leq K leq 10), which represents the number of items the customer is requesting. For each requested item, two elements are given: C_i, a string representing the requested properties (space-separated), and max_price_i, the maximum price the customer is willing to pay for an item with those properties. Each string in the properties list and the customer request has a maximum length of 20 characters. Output Print \'Yes\' if at least one merchant can fulfill all the customer\'s requests within the specified price constraints. Otherwise, print \'No\'. Examples Input 2 2 Alice ring 100 gold shiny necklace 150 gold elegant 3 Bob bracelet 200 silver elegant earrings 50 gold shiny watch 300 silver durable 2 gold shiny 120 silver elegant 250 Output Yes Input 1 3 Carol ring 75 gold bracelet 125 silver necklace 200 gold shiny 2 gold shiny 150 silver 130 Output No","solution":"def can_fulfill_requests(merchants, customer_request): Determines if any merchant can fulfill the customer\'s entire request within the given constraints. merchants: list of dictionaries, each representing a merchant with their items. customer_request: list of tuples, each representing a request with required properties and max price. Returns True if any merchant can fulfill the request, otherwise returns False. for merchant in merchants: merchant_name = merchant[\\"name\\"] items = merchant[\\"items\\"] successful_match = True for request_properties, max_price in customer_request: match_found = False for item in items: item_price = item[\\"price\\"] item_properties = item[\\"properties\\"] if item_price <= max_price and all(prop in item_properties for prop in request_properties): match_found = True break if not match_found: successful_match = False break if successful_match: return True return False # Helper functions to parse inputs def parse_input(data): lines = data.strip().split(\'n\') current_line = 0 M = int(lines[current_line]) current_line += 1 merchants = [] for _ in range(M): N_i = int(lines[current_line]) current_line += 1 merchant_name = lines[current_line] current_line += 1 items = [] for _ in range(N_i): item_info = lines[current_line].split() current_line += 1 item_name = item_info[0] item_price = int(item_info[1]) item_properties = item_info[2:] items.append({\\"name\\": item_name, \\"price\\": item_price, \\"properties\\": item_properties}) merchants.append({\\"name\\": merchant_name, \\"items\\": items}) K = int(lines[current_line]) current_line += 1 customer_request = [] for _ in range(K): request_info = lines[current_line].split() current_line += 1 properties = request_info[:-1] max_price = int(request_info[-1]) customer_request.append((properties, max_price)) return merchants, customer_request # Main function to process input data and determine the output def main(data): merchants, customer_request = parse_input(data) if can_fulfill_requests(merchants, customer_request): return \\"Yes\\" else: return \\"No\\""},{"question":"Given a linked list, rotate the list to the right by k places, where k is a non-negative integer. Example: Input: 1->2->3->4->5, k = 2 Output: 4->5->1->2->3 Input: 0->1->2, k = 4 Output: 2->0->1 Note: - Try to solve it with O(1) extra space complexity.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def rotate_right(head: ListNode, k: int) -> ListNode: if not head or k == 0: return head # Compute the length of the linked list length = 1 tail = head while tail.next: tail = tail.next length += 1 # Make the list circular tail.next = head # Find the new head and tail k = k % length steps_to_new_head = length - k new_tail = head for _ in range(steps_to_new_head - 1): new_tail = new_tail.next new_head = new_tail.next new_tail.next = None return new_head"},{"question":"Yuji and Sato are playing a number game on a sequence of integers. Both players take turns starting with Yuji. Each player must pick a number from the sequence according to the following rules: 1. Yuji can only pick an even number. 2. Sato can only pick an odd number. 3. A number, once picked, is removed from the sequence. 4. The chosen number must be either the same as or adjacent (±1) to the previously chosen number. 5. The player who cannot make a valid move loses. Given the initial sequence, determine whether Yuji has a winning strategy if both players play optimally. -----Input----- The first line contains a single integer n (1le nle 10^5) — the length of the sequence. The second line contains n integers a_1,a_2,dots,a_n (1le a_ile 10^6) — the sequence of integers. -----Output----- Print \\"Yuji\\" if Yuji has a winning strategy, otherwise print \\"Sato\\". -----Examples----- Input 5 5 2 8 3 14 Output Yuji Input 4 1 3 5 7 Output Sato -----Note----- In the first test case, Yuji can start by picking 2 (an even number) and then follow up picking 3 or 8 depending on Sato\'s pick, ensuring he always has a move as long as there are adjacent even numbers available. In the second test case, Yuji cannot pick any number at the start, so Sato wins.","solution":"def winning_strategy(n, sequence): Determines whether Yuji has a winning strategy. Parameters: n (int): The length of the sequence. sequence (list): The sequence of integers. Returns: str: The name of the player with the winning strategy, either \\"Yuji\\" or \\"Sato\\". even_count = sum(1 for num in sequence if num % 2 == 0) if even_count > 0: return \\"Yuji\\" else: return \\"Sato\\""},{"question":"You are managing a warehouse inventory system where products are assigned unique identification codes. Each product is categorized based on its type, location, and stock quantity. Your task is to determine if the product stock needs to be replenished or not based on the given threshold levels. The ID of a product is a string composed of three parts: - Type of product (always starts with a \'P\' followed by 1 to 3 digits) - Location of product (always starts with an \'L\' followed by 1 to 3 digits) - Stock quantity (a non-negative integer) Given a number R, representing the required minimum stock level for each product, determine if the stock for each product needs to be replenished. ------ Input ------ The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines: - The first line contains a single integer R representing the required minimum stock level. - The second line contains a string ID representing the product identification code. ------ Output ------ For each test case, output a single line containing \\"REPLENISH\\" if the stock needs to be replenished (i.e., current stock is less than R), otherwise output \\"STOCK SUFFICIENT\\". ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ R ≤ 10000 3 ≤ length of ID string ≤ 20 ----- Sample Input 1 ------ 3 50 P123L456100 25 P12L78L200 90 P2L5L40 ----- Sample Output 1 ------ STOCK SUFFICIENT STOCK SUFFICIENT REPLENISH ----- Explanation 1 ------ Example case 1: The product ID is P123L456100, meaning it has a stock quantity of 100 which is more than 50, so the output is \\"STOCK SUFFICIENT\\". Example case 2: The product ID is P12L78L200, meaning it has a stock quantity of 200 which is more than 25, so the output is \\"STOCK SUFFICIENT\\". Example case 3: The product ID is P2L5L40, meaning it has a stock quantity of 40 which is less than 90, so the output is \\"REPLENISH\\".","solution":"def check_stock_levels(T, cases): Determines if the stock for each product needs to be replenished or not based on the given threshold levels. Args: T (int): Number of test cases. cases (List[Tuple[int, str]]): A list of tuples where each tuple contains a required minimum stock level R and a product ID. Returns: List[str]: List of strings, each being either \\"REPLENISH\\" or \\"STOCK SUFFICIENT\\". results = [] for case in cases: R, ID = case # Stock Quantity is the last numeric part of the ID stock_quantity = int(\'\'.join(filter(str.isdigit, ID.split(\'L\')[-1]))) if stock_quantity < R: results.append(\\"REPLENISH\\") else: results.append(\\"STOCK SUFFICIENT\\") return results"},{"question":"Taro is developing a new game for his mobile app where players need to navigate through an m x n grid. The grid contains cells that are either empty or contain an obstacle. The player\'s job is to find the shortest path from the top-left corner of the grid to the bottom-right corner while avoiding obstacles. The player can move up, down, left, or right but cannot move diagonally. Your task is to help Taro by writing a program that finds the shortest path from the top-left corner to the bottom-right corner of the grid. If there is no path, your program should indicate that as well. Constraints > 1 ≤ m, n ≤ 100 > 0 ≤ obstacles_in_grid ≤ m * n * The grid contains only two types of cells: empty (represented by \'.\') and obstacle (represented by \'#\'). Input > m n > G1 (n characters) > G2 (n characters) > .. > Gm (n characters) * m is the number of rows * n is the number of columns * Gi represents the initial state of the cells in the i-th row of the grid from the top * Each Gi consists of \'.\' and \'#\' Output > shortest_path_length > cnt > R1 C1 > R2 C2 > .. > Rcnt Ccnt * shortest_path_length represents the number of steps in the shortest path * cnt represents the count of cells in the shortest path * Ri Cj represents the row and column index of the cell in the shortest path Examples Input > 3 3 > .#. > .#. > ... Output > 4 > 5 > 1 1 > 2 1 > 3 1 > 3 2 > 3 3 Input > 4 4 > .... > .. > .. > .... Output > 6 > 7 > 1 1 > 2 1 > 3 1 > 4 1 > 4 2 > 4 3 > 4 4 Input > 2 2 > .# > #. Output > -1","solution":"from collections import deque def shortest_path(m, n, grid): def in_bounds(r, c): return 0 <= r < m and 0 <= c < n def neighbors(r, c): for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = r + dr, c + dc if in_bounds(nr, nc) and grid[nr][nc] != \'#\': yield nr, nc queue = deque([(0, 0, 0, [])]) # (row, column, distance, path) visited = set((0, 0)) while queue: r, c, dist, path = queue.popleft() # Append the current cell to the path new_path = path + [(r + 1, c + 1)] # Check if we reached the bottom-right corner if (r, c) == (m - 1, n - 1): print(dist) print(len(new_path)) for cell in new_path: print(cell[0], cell[1]) return for nr, nc in neighbors(r, c): if (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1, new_path)) # If no path is found print(-1)"},{"question":"Your task is to design a program that processes and queries information about a collection of books in a virtual library. Each book has a title, an author, a year of publication, and a number of pages. The library system allows adding books, deleting books by title, and listing all books sorted by either title, author, or year of publication. The commands your program should handle are as follows: * ADD: Adds a new book to the library. The command is followed by the title, author, year, and number of pages separated by commas. For example, `ADD, \\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925, 218`. * DELETE: Deletes a book from the library by title. The command is followed by the title of the book. If the book is not found, output `NOT FOUND`. For example, `DELETE, \\"The Great Gatsby\\"`. * LIST BY TITLE: Outputs the list of books sorted by title in ascending order. * LIST BY AUTHOR: Outputs the list of books sorted by author in ascending order. * LIST BY YEAR: Outputs the list of books sorted by year of publication in ascending order. Input The input consists of a sequence of lines. Each line is a command as described above. The input ends with a line containing the word `END`. Titles and authors are case-sensitive and can contain spaces. The year of publication is an integer between 1000 and 2023 inclusive, and the number of pages is a positive integer not exceeding 10,000. Output For the LIST commands, output each book on a new line in the format: `Title, Author, Year, Pages`. If the command is DELETE and the book is not found, output `NOT FOUND`. No extra characters are allowed. Example Input ADD, \\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960, 336 ADD, \\"1984\\", \\"George Orwell\\", 1949, 328 ADD, \\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925, 218 DELETE, \\"1984\\" LIST BY AUTHOR END Output \\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960, 336 \\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925, 218","solution":"class Library: def __init__(self): self.books = [] def add_book(self, title, author, year, pages): book = {\\"title\\": title, \\"author\\": author, \\"year\\": year, \\"pages\\": pages} self.books.append(book) def delete_book(self, title): for book in self.books: if book[\'title\'] == title: self.books.remove(book) return print(\\"NOT FOUND\\") def list_books(self, key): sorted_books = sorted(self.books, key=lambda x: x[key]) for book in sorted_books: print(f\'\\"{book[\\"title\\"]}\\", \\"{book[\\"author\\"]}\\", {book[\\"year\\"]}, {book[\\"pages\\"]}\') def process_command(self, command): parts = command.split(\', \') action = parts[0] if action == \\"ADD\\": title = parts[1].strip(\'\\"\') author = parts[2].strip(\'\\"\') year = int(parts[3]) pages = int(parts[4]) self.add_book(title, author, year, pages) elif action == \\"DELETE\\": title = parts[1].strip(\'\\"\') self.delete_book(title) elif action == \\"LIST BY TITLE\\": self.list_books(\\"title\\") elif action == \\"LIST BY AUTHOR\\": self.list_books(\\"author\\") elif action == \\"LIST BY YEAR\\": self.list_books(\\"year\\")"},{"question":"Alice and Bob are playing a game with two stacks of stones. Initially, there are two stacks with some number of stones in each. The players take turns alternately, and Alice goes first. In each turn, the player must choose one of the two stacks and remove at least one stone from it. The player who cannot make a move (because both stacks are empty) loses the game. Alice wants to know if she can always win the game if both play optimally. Write a function to determine if Alice can force a win given the initial configuration of the stacks. -----Input----- The first line contains a single integer T (1 leq T leq 100) — the number of test cases. Each of the following T lines describes a single test case and contains two integers a and b (1 leq a, b leq 10^9) — the initial number of stones in the two stacks. -----Output----- For each test case, print \\"Alice\\" if Alice can guarantee a win regardless of how Bob plays, otherwise print \\"Bob\\". -----Example----- Input 3 1 1 2 3 5 4 Output Bob Alice Alice -----Note----- In the first case, Alice cannot guarantee a win because no matter which stack she picks, Bob can pick the remaining stack on his turn, and Alice will lose. In the second case, Alice can always win by taking 2 stones from the second stack on her first turn. In the third case, Alice can guarantee a win by always removing stones from the stack with more stones on her turn.","solution":"def alice_wins(T, cases): Determines if Alice can guarantee a win given the initial configurations of the stacks. Args: T: Number of test cases. cases: List of tuples (a, b) where a and b are the number of stones in the two stacks. Returns: List of strings \\"Alice\\" or \\"Bob\\" for each test case. results = [] for a, b in cases: if a + b == max(a, b) * 2: results.append(\\"Bob\\") else: results.append(\\"Alice\\") return results # To call: alice_wins(T, [(a1, b1), (a2, b2), ...])"},{"question":"Write a function that rearranges an array of integers so that all odd numbers appear before all even numbers, while preserving the relative order of the odd and even numbers from the original array. The function should return a new array with the modified order. # Example ```python def rearrange_odds_evens(arr): # your code here rearrange_odds_evens([1, 2, 3, 4, 5, 6]) # Output: [1, 3, 5, 2, 4, 6] rearrange_odds_evens([6, 7, 5, 8, 9]) # Output: [7, 5, 9, 6, 8] ```","solution":"def rearrange_odds_evens(arr): Rearranges an array of integers so that all odd numbers appear before all even numbers, while preserving the relative order of the odd and even numbers from the original array. :param arr: List of integers :return: New list with odd numbers before even numbers, maintaining relative order odds = [x for x in arr if x % 2 != 0] evens = [x for x in arr if x % 2 == 0] return odds + evens"},{"question":"Given a string `S` containing only lowercase alphabetical characters and a pattern `P` containing only lowercase alphabetical characters and/or wildcard characters `\'*\'` and `\'?\'`, determine if the pattern `P` matches the entire string `S`. The wildcard character `\'*\'` can match zero or more characters, while the wildcard character `\'?\'` can match exactly one character. # Example 1: Input: ``` S = \\"abcde\\" P = \\"a*c?e\\" ``` Output: ``` 1 ``` Explanation: The pattern \\"a*c?e\\" matches the string \\"abcde\\" since: - \'a\' matches \'a\' - \'*\' matches \'bcd\' - \'c\' matches \'c\' - \'?\' matches \'d\' - \'e\' matches \'e\' # Example 2: Input: ``` S = \\"abcdef\\" P = \\"*a*e*\\" ``` Output: ``` 1 ``` Explanation: The pattern \\"*a*e*\\" matches the string \\"abcdef\\" since: - \'*\' matches \\"abcdef\\" - \'a\' matches \'a\' - \'*\' matches \\"bc\\" - \'e\' matches \'e\' - \'*\' matches \\"f\\" # Example 3: Input: ``` S = \\"xyz\\" P = \\"??\\" ``` Output: ``` 0 ``` Explanation: The pattern \\"??\\" does not match the entire string \\"xyz\\" since it only accounts for the first two characters, but there are three characters in the string. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `isMatch()` which takes 2 strings `S` and `P` as input parameters and returns integer 1 if `P` matches the entire string `S` and 0 otherwise. # Expected Time Complexity: `O(m * n)`, where `m` is the length of `S` and `n` is the length of `P` # Expected Auxiliary Space: `O(m * n)` # Constraints: - 1 ≤ |S| ≤ 1000 - 1 ≤ |P| ≤ 1000","solution":"def isMatch(S, P): m, n = len(S), len(P) dp = [[False] * (n + 1) for _ in range(m + 1)] dp[0][0] = True for j in range(1, n + 1): if P[j - 1] == \'*\': dp[0][j] = dp[0][j - 1] for i in range(1, m + 1): for j in range(1, n + 1): if P[j - 1] == \'*\': dp[i][j] = dp[i - 1][j] or dp[i][j - 1] elif P[j - 1] == \'?\' or S[i - 1] == P[j - 1]: dp[i][j] = dp[i - 1][j - 1] return 1 if dp[m][n] else 0"},{"question":"Henry is a teacher in a school that emphasizes practical problem-solving skills. To help his students better understand how programming algorithms work, he decided to create a set of exercises involving sorting and searching. One day, he posed the following interesting problem to his students: Given a list of integers, identify if there exists a pair of distinct indices (i) and (j) such that the elements at these indices are equal in value. If such a pair exists, print \\"Yes\\"; otherwise, print \\"No\\". To make it more challenging, Henry introduced some constraints: Each pair\'s values need to be checked without using nested loops, to ensure the solution is efficient even for large lists. Your task is to help Henry implement a function that solves this problem. # Input - The first line contains an integer (n) (1 ≤ n ≤ 10^5), the number of elements in the list. - The second line contains (n) space-separated integers (a_1, a_2, ..., a_n) (|a_i| ≤ 10^9), the elements of the list. # Output - Print \\"Yes\\" if there exists a pair of indices (i) and (j) (1 ≤ i < j ≤ n) such that (a_i = a_j). Otherwise, print \\"No\\". # Constraints - The list elements (a_i) and (a_j) are within the range of ([-10^9, 10^9]). - (1 ≤ n ≤ 10^{5}). # Examples Example 1 **Input:** ``` 5 1 2 3 4 5 ``` **Output:** ``` No ``` Example 2 **Input:** ``` 6 1 2 3 1 4 5 ``` **Output:** ``` Yes ``` # Note In Example 1, all elements are distinct, so no two indices can have the same value. In Example 2, the first and fourth elements are both \'1\', so the answer is \\"Yes\\".","solution":"def has_duplicate(n, arr): Determines if there are any duplicate numbers in the list arr. Args: n : int : Number of elements in the list. arr : list : List of integers. Returns: str : \\"Yes\\" if there are duplicates, otherwise \\"No\\". seen = set() for num in arr: if num in seen: return \\"Yes\\" seen.add(num) return \\"No\\""},{"question":"Luke is participating in a coding competition. He has been given an array of integers and he needs to determine the minimum number of elements he must remove to make the array consist of unique elements only. If the array already contains only unique elements, the answer should be 0. ---Input--- You are given an integer n (1 ≤ n ≤ 1000) representing the number of elements in the array. Following this, there is an array of n integers (1 ≤ array[i] ≤ 1000). ---Output--- Print one number — the minimum possible number of elements Luke needs to remove to make the array consist of unique elements. ---Examples--- Input 5 1 2 2 3 3 Output 2 Input 4 1 2 3 4 Output 0 Input 6 1 1 1 1 1 1 Output 5 ---Note--- In the first example, Luke can remove one \'2\' and one \'3\' to make the array [1, 2, 3]. In the second example, the array is already unique, so the answer is 0. In the third example, Luke needs to remove five \'1\'s to leave one \'1\' in the array.","solution":"def min_removals_to_unique(n, arr): Returns the minimum number of elements to remove to make the array unique. from collections import Counter count = Counter(arr) return sum(v - 1 for v in count.values() if v > 1)"},{"question":"Write a function that takes a Roman numeral as input and returns its integer equivalent. The function should handle Roman numerals from I (1) to MMMCMXCIV (3994). The valid characters for Roman numerals are: I, V, X, L, C, D, and M. Roman numerals are usually written largest to smallest, left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Here are some examples of valid Roman numerals: ``` III -> 3 IV -> 4 IX -> 9 LVIII -> 58 (L + V + III) MCMXCIV -> 1994 (M + CM + XC + IV) ``` Write a function called `roman_to_int` that takes a Roman numeral as a string and returns its integer equivalent. ```python def roman_to_int(s: str) -> int: pass ``` **Note:** - The input is guaranteed to be a valid Roman numeral string. - No character in the input string is repeated more times than allowed according to Roman numeral rules. - The input string can be in uppercase only.","solution":"def roman_to_int(s: str) -> int: Convert a Roman numeral to an integer. Parameters: s (str): A string representing a Roman numeral. Returns: int: The integer representation of the Roman numeral. # Define a dictionary to map Roman numerals to their integer values roman_to_integer = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): current_value = roman_to_integer[char] if current_value < prev_value: total -= current_value else: total += current_value prev_value = current_value return total"},{"question":"You are given an integer array `arr` of length `n` and an integer `k`. Your task is to find the maximum possible bitwise AND of at most `k` elements from the array. The bitwise AND of a set of integers is a binary operation that takes two equal-length binary representations and performs the logical AND operation on each pair of corresponding bits, which results in a new binary number. The bitwise AND operation can be defined as follows for two integers a and b: - Let `a` be represented as a binary number with bits a_1, a_2, ..., a_m. - Let `b` be represented as a binary number with bits b_1, b_2, ..., b_m. - The bitwise AND of a and b is a binary number with bits c_1, c_2, ..., c_m, where c_i = a_i AND b_i for all 1 ≤ i ≤ m. Input The first line contains two integers n and k (1 ≤ n ≤ 50, 1 ≤ k ≤ n). The second line contains n integers denoting the elements of the array arr (1 ≤ arr[i] ≤ 10^6). Output Print a single integer representing the maximum possible bitwise AND of at most k elements from the array. Examples Input 5 3 6 4 7 8 1 Output 4 Input 4 2 9 12 3 5 Output 8","solution":"from itertools import combinations def max_bitwise_and(n, k, arr): max_and = 0 for nums in combinations(arr, k): current_and = nums[0] for num in nums[1:]: current_and &= num max_and = max(max_and, current_and) return max_and"},{"question":"Alice is very fond of different kinds of sequences. She particularly likes sequences that exhibit a unique characteristic, which she refers to as a \\"peak property.\\" A sequence of integers is said to have a peak property if there exists exactly one peak element in the sequence. An element `a[i]` is considered a peak if it is strictly greater than its adjacent elements. That is, `a[i-1] < a[i] > a[i+1]`. For simplicity, the elements at the ends of the sequence are not considered for peak evaluation. Given an array of integers, your task is to determine whether the array has exactly one peak element. If it does, return the index of the peak element (1-based index); otherwise, return -1. Input The first input line contains an integer n (3 ≤ n ≤ 1000) — the length of the sequence. The second line contains n integers a[i] (1 ≤ a[i] ≤ 10^5) — the elements of the sequence. Output Output a single integer — the 1-based index of the peak element if there is exactly one peak; otherwise, output -1. Examples Input 5 1 3 2 4 1 Output 2 Input 4 2 2 2 2 Output -1 Input 6 1 2 3 4 5 6 Output -1","solution":"def find_peak_index(n, a): peaks = [] for i in range(1, n-1): if a[i-1] < a[i] > a[i+1]: peaks.append(i + 1) if len(peaks) == 1: return peaks[0] else: return -1"},{"question":"Given a binary tree, write a function to determine if it is height-balanced. For this problem, a height-balanced binary tree is defined as: A binary tree in which the left and right subtrees of every node differ in height by no more than 1. Example 1: Input: 1 / 2 3 / 4 5 Output: true Example 2: Input: 1 / 2 3 / 4 5 / 6 Output: false Explanation: In Example 1, the tree is balanced because the heights of the left and right subtrees of every node are either equal or differ by no more than 1. In Example 2, the tree is not balanced because the node with value 2 has a left subtree with height 3 (from node 4 to 6) and a right subtree with height 1, which differ by more than 1. Constraints: The number of nodes in the tree is in the range [0, 5000]. -10^4 <= Node.val <= 10^4","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root): def check_height(node): if not node: return 0, True left_height, left_balanced = check_height(node.left) right_height, right_balanced = check_height(node.right) balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return max(left_height, right_height) + 1, balanced return check_height(root)[1]"},{"question":"Write a function that takes a string as input and returns the length of the shortest word in the string. For the purposes of this task, a word is defined as any sequence of non-space characters. Punctuation and digits count as part of the word. ``` Example: Input: \\"The quick brown fox jumps over the lazy dog\\" Output: 3 Input: \\"Hello, world! This is a test sentence.\\" Output: 1 ```","solution":"def length_of_shortest_word(sentence): Returns the length of the shortest word in the given sentence. A word is defined as any sequence of non-space characters. :param sentence: str :return: int words = sentence.split() if not words: return 0 short_word_length = len(words[0]) for word in words: if len(word) < short_word_length: short_word_length = len(word) return short_word_length"},{"question":"You are managing a dynamic logging system that records events as they occur over time. Each event has a timestamp and is categorized into one of several types. Due to space constraints, you need to compress the logs by removing less important events while preserving the most relevant ones. The importance of an event is determined by its frequency and recency within a given time window. Your task is to write a program that identifies the most relevant events within a specified time window from a list of recorded events. For each type of event, output the most recent event occurring within the time window. If there are no events of a particular type within the window, output \\"None\\" for that event type. Input Format The input consists of multiple lines. - The first line contains two integers T and K (1 ≤ T, K ≤ 100), where T is the number of different event types, and K is the time window size in seconds. - The second line contains an integer N (1 ≤ N ≤ 1000), where N is the number of events. - Each of the following N lines contains a string timestamp and an integer type, representing the timestamp of the event in \\"YYYY-MM-DD HH:MM:SS\\" format and the type of the event (1 ≤ type ≤ T). Output Format Output T lines. - Each line should contain the most recent timestamp of the event of that type within the last K seconds of any event provided. - If no events of a given type are within the window, output \\"None\\". Example Input 3 10 5 2023-10-01 10:00:00 1 2023-10-01 10:00:05 2 2023-10-01 10:00:15 3 2023-10-01 10:00:20 1 2023-10-01 10:00:25 2 Output 2023-10-01 10:00:20 2023-10-01 10:00:25 2023-10-01 10:00:15 Input 2 30 4 2023-10-01 08:00:00 1 2023-10-01 08:00:35 2 2023-10-01 08:01:00 1 2023-10-01 08:01:30 2 Output 2023-10-01 08:01:00 2023-10-01 08:01:30 Input 2 5 3 2023-10-01 12:00:00 1 2023-10-01 12:00:10 2 2023-10-01 12:00:20 1 Output 2023-10-01 12:00:20 None Note Please ensure that your program handles edge cases, such as overlapping events within the same type and situations where no events are within the specified time window.","solution":"from datetime import datetime, timedelta def find_relevant_events(T, K, events): This function identifies the most relevant events within a specified time window from a list of recorded events. :param T: Number of different event types :param K: Time window size in seconds :param events: List of tuples containing event timestamp and type :return: List of the most recent event timestamps for each type within the time window. # Initialize the latest event timestamps for each type as None latest_events = {event_type: None for event_type in range(1, T+1)} # Sort events by timestamp events = sorted(events, key=lambda x: x[0]) # Process each event to find the most recent within the time window for current_event in events: current_time, current_type = current_event # Calculate the time window\'s start time start_time = current_time - timedelta(seconds=K) for type_key in latest_events.keys(): if type_key == current_type: latest_events[type_key] = current_time elif latest_events[type_key] and latest_events[type_key] < start_time: latest_events[type_key] = None # Form the output as required result = [] for i in range(1, T+1): if latest_events[i] is None: result.append(\\"None\\") else: result.append(latest_events[i].strftime(\\"%Y-%m-%d %H:%M:%S\\")) return result # Read input - This would usually go outside the function in a script or main block def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') T, K = map(int, data[0].split()) N = int(data[1]) events = [] for i in range(2, 2 + N): timestamp_str, event_type = data[i].rsplit(\' \', 1) timestamp = datetime.strptime(timestamp_str, \\"%Y-%m-%d %H:%M:%S\\") events.append((timestamp, int(event_type))) results = find_relevant_events(T, K, events) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are the coach of a little league soccer team. Your team is scheduled to play multiple matches throughout the season, and you want to ensure that every player gets a chance to play in at least one match. Each player in your team is assigned a unique jersey number. However, players have school commitments and can only play in certain matches. You need to determine if it\'s possible to schedule the matches such that every player can participate in at least one match. Input The first line of input contains the number of players P and the number of matches M. The next P lines each contain a list of match numbers that each respective player is available to play in. Each line begins with an integer K indicating the number of matches the player is available for, followed by K integers that represent the match numbers. Output Output \\"Possible\\" if it\'s feasible to ensure every player plays in at least one match. Otherwise, output \\"Not Possible\\". Constraints 1 ≤ P, M ≤ 1000 1 ≤ K ≤ M 1 ≤ match number ≤ M Example Input: 3 3 2 1 2 1 3 2 2 3 Output: Possible Input: 3 2 1 1 1 2 0 Output: Not Possible","solution":"def can_schedule_matches(P, M, availability): # Initialize a set to keep track of players who have at least one available match possible_players = set() # Iterate through the availability list for player_id, matches in enumerate(availability): if matches: possible_players.add(player_id) # Compare the size of possible_players with P if len(possible_players) == P: return \\"Possible\\" else: return \\"Not Possible\\" # Example usage: # P = 3, M = 3, availability = [[1, 2], [3], [2, 3]] # print(can_schedule_matches(3, 3, [[1, 2], [3], [2, 3]])) # Output: \\"Possible\\" # P = 3, M = 2, availability = [[1], [2], []] # print(can_schedule_matches(3, 2, [[1], [2], []])) # Output: \\"Not Possible\\""},{"question":"You are given an array of integers and a series of operations to perform on the array. The operations are defined as follows: 1. `K=1, Append(x)` - Append the integer `x` to the end of the array. 2. `K=2, Remove(x)` - Remove all occurrences of the integer `x` from the array. 3. `K=3, MaxSubArray(L, R)` - Find the maximum subarray sum for the subarray starting at index `L` and ending at index `R` (both inclusive). The Remove(x) operation always ensures that the integer `x` is present in the array at the time of removal. The MaxSubArray(L, R) operation assumes that the subarray from `L` to `R` always exists in the array. Write a program to process these operations and output the results of `K=3` operations. Input: - First line contains an integer `Q` which denotes the number of operations. - Next `Q` lines contain the operations in one of the following formats: `K x` or `K L R` Output: - For each `K=3` operation, print the result on a new line. Constraints: - 1 ≤ Q ≤ 10^5 - -10^6 ≤ x ≤ 10^6 - 1 ≤ K ≤ 3 - 1 ≤ L, R ≤ 10^5 - L ≤ R SAMPLE INPUT 7 1 1 1 -2 1 3 1 2 3 1 3 2 -2 3 1 3 SAMPLE OUTPUT 3 4 Explanation: After appending the numbers 1, -2, 3, and 2, the array becomes [1, -2, 3, 2]. For the first `MaxSubArray(1, 3)` operation, the subarray is [1, -2, 3], and the maximum subarray sum is 3. After removing all occurrences of -2, the array becomes [1, 3, 2]. For the second `MaxSubArray(1, 3)` operation, the subarray is [1, 3, 2], and the maximum subarray sum is 6.","solution":"def perform_operations(operations): arr = [] results = [] for operation in operations: parts = operation.split() K = int(parts[0]) if K == 1: x = int(parts[1]) arr.append(x) elif K == 2: x = int(parts[1]) arr = [y for y in arr if y != x] elif K == 3: L = int(parts[1]) - 1 R = int(parts[2]) subarray = arr[L:R] max_sum = max_subarray_sum(subarray) results.append(max_sum) return results def max_subarray_sum(arr): max_ending_here = max_so_far = arr[0] for a in arr[1:]: max_ending_here = max(a, max_ending_here + a) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are given a list of integers where each integer represents the duration of a task in minutes. Each task is assigned to one of two workers, Worker A or Worker B. The goal is to distribute the tasks between the two workers such that the difference in total working time between the two workers is minimized. Write a function that takes an integer list of task durations and returns the minimum possible difference in total working time between Worker A and Worker B. -----Constraints----- - 1 ≤ number of tasks ≤ 1000 - 1 ≤ task duration ≤ 1000 -----Input----- The input consists of an integer N (number of tasks), followed by N space-separated integers representing the task durations. -----Output----- Print the minimum possible difference in the total working time between Worker A and Worker B. -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 1 Explanation: - Assign tasks with durations [1, 4, 5] to Worker A (total duration = 10) - Assign tasks with durations [2, 3] to Worker B (total duration = 5) - The difference in total working time is |10 - 5| = 5 In this case, another distribution could be: - Assign tasks with durations [1, 2, 3] to Worker A (total duration = 6) - Assign tasks with durations [4, 5] to Worker B (total duration = 9) - The difference in total working time is |9 - 6| = 3 However, the optimal distribution would be: - Assign tasks with durations [1, 4] to Worker A (total duration = 5) - Assign tasks with durations [2, 3, 5] to Worker B (total duration = 10) - The difference in total working time is |10 - 5| = 5","solution":"def min_task_time_difference(durations): Returns the minimum possible difference in total working time between Worker A and Worker B. total_sum = sum(durations) n = len(durations) # Create a DP array to find the subset sum closest to total_sum // 2 dp = [0] * (total_sum // 2 + 1) for duration in durations: for j in range(total_sum // 2, duration - 1, -1): dp[j] = max(dp[j], dp[j - duration] + duration) subset_sum = dp[total_sum // 2] other_subset_sum = total_sum - subset_sum return abs(other_subset_sum - subset_sum)"},{"question":"You are tasked with helping an art gallery manage their collection virtually. In particular, they want to display the paintings in a sequence based on their dimensions. A painting is represented as a tuple of two integers, `(height, width)`. The gallery curator wants to align the paintings in such a way that it\'s easy to visualize them either from the narrowest to widest or the tallest to shortest. This can help in the guidelines for displaying the paintings in exhibitions. Write a program that sorts a list of paintings based on the given criteria. # Input - The first line consists of a single integer `N` (1 ≤ N ≤ 1000) representing the number of paintings. - The next `N` lines each consist of two integers, `height` and `width` (1 ≤ height, width ≤ 10,000), representing the dimensions of each painting. - The last line contains a string `criteria` which will be either `\\"width\\"` or `\\"height\\"` indicating the dimension to sort the paintings by. # Output - Output the sorted list of paintings by the given criterion. Each painting should be displayed in a new line in the format `(height, width)`. # Example ``` Input 4 90 120 85 135 90 130 60 140 width Output (90, 120) (90, 130) (85, 135) (60, 140) Input 3 80 100 60 95 70 90 height Output (60, 95) (70, 90) (80, 100) ```","solution":"def sort_paintings(n, paintings, criteria): Sorts a list of paintings based on the given criteria. Parameters: n : int : The number of paintings paintings : list of tuples : List containing tuples of two integers representing height and width criteria : str : The sorting criteria, either \\"width\\" or \\"height\\" Returns: list : Sorted list of paintings if criteria == \\"width\\": sorted_paintings = sorted(paintings, key=lambda x: x[1]) else: sorted_paintings = sorted(paintings, key=lambda x: x[0]) return sorted_paintings"},{"question":"You are given an array of N integers. Your task is to find the first element from the left which is smaller than its preceding element. If no such element is found, return -1. Input The first line of input contains a single integer N (1 ≤ N ≤ 100), denoting the size of the array. The next line contains N integers separated by spaces representing the elements of the array, where each integer is between 1 and 1000 inclusive. Output Print a single integer which is the first element from the left that is smaller than its preceding element. If no such element is found, print -1. Examples Input 6 1 2 3 5 4 6 Output 4 Input 5 2 4 6 8 10 Output -1","solution":"def find_first_smaller_element(arr): Returns the first element from the left which is smaller than its preceding element. If no such element is found, returns -1. :param arr: List of integers where each integer is between 1 and 1000 inclusive. :return: First element from the left which is smaller than its preceding element or -1 if not found. for i in range(1, len(arr)): if arr[i] < arr[i-1]: return arr[i] return -1"},{"question":"A team of developers is building a new messaging app. They need your help to write a function that counts the number of unique substrings of a given string. Given a string s, your task is to find the number of unique substrings of s. A substring is a contiguous sequence of characters within a string. Example: Given s = \\"abc\\", unique substrings are: {\\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\"} Given s = \\"aaa\\", unique substrings are: {\\"a\\", \\"aa\\", \\"aaa\\"} Input First line contains an integer T, the total number of test cases. Each of the next T lines contains a string s. Output T lines each containing an integer, the number of unique substrings of the corresponding input string. Constraints 1 ≤ T ≤ 50 1 ≤ length of s ≤ 50 s consists of only lowercase English letters. SAMPLE INPUT 2 abc aaa SAMPLE OUTPUT 6 3","solution":"def count_unique_substrings(s): Counts the number of unique substrings of the given string s. unique_substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): unique_substrings.add(s[i:j]) return len(unique_substrings) def process_test_cases(T, test_cases): results = [] for i in range(T): results.append(count_unique_substrings(test_cases[i])) return results"},{"question":"Vasya and his friend Petya are playing a game. They have n apples and want to distribute them in such a way that each of them gets at least one apple, and each gets an even number of apples. Determine if it is possible to distribute the apples according to these rules. Input The input contains one integer n (1 ≤ n ≤ 100), the total number of apples. Output Print \\"YES\\" if it is possible to distribute the apples so that each friend gets an even number, otherwise print \\"NO\\". Examples Input 8 Output YES Input 5 Output NO","solution":"def can_distribute_apples_evenly(n): Determines if it is possible to distribute n apples so that each person gets at least one apple, and each gets an even number of apples. Parameters: n (int): The total number of apples. Returns: str: \\"YES\\" if the distribution is possible, otherwise \\"NO\\". # n must be at least 4 since each needs to get an even number and >= 2 each if n >= 4 and n % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Tom decides to host a coding competition where each participant needs to solve a unique puzzle. Tom generates a puzzle as follows: - He starts with a sequence of N unique integers. - The puzzle challenge is to determine the longest strictly increasing subsequence within this sequence. -----Constraints----- - The sequence length N satisfies 1 <= N <= 1000. - Each integer in the sequence is unique and can be any value between -10^6 and 10^6. -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 a_3 ... a_N -----Output----- Output the length of the longest strictly increasing subsequence. -----Sample Input----- 6 5 2 8 6 3 6 -----Sample Output----- 3 Explanation: One of the longest strictly increasing subsequences is [2, 3, 6], which has a length of 3.","solution":"def longest_increasing_subsequence(sequence): Returns the length of the longest strictly increasing subsequence in the given sequence. if not sequence: return 0 n = len(sequence) dp = [1] * n # Store the length of LIS up to each element for i in range(1, n): for j in range(i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) sequence = list(map(int, data[1:])) result = longest_increasing_subsequence(sequence) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Write a function `rotate_image(matrix)` that takes in a square matrix (a list of lists) and rotates the matrix by 90 degrees clockwise. Each element within the list of lists is a single integer. The function should return a new matrix representing the rotated image. You are not allowed to use any of the built-in functions that directly accomplish the rotation. Consider the following example for clarification: Given the matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The output should be: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` You may assume that the input matrix will always be a square matrix with at least one element (1x1).","solution":"def rotate_image(matrix): Rotates the input square matrix by 90 degrees clockwise and returns the new matrix. n = len(matrix) # Create a new matrix of the same size new_matrix = [[None] * n for _ in range(n)] for i in range(n): for j in range(n): new_matrix[j][n - i - 1] = matrix[i][j] return new_matrix"},{"question":"Two players are playing the following game with a set of non-negative integers. Starting with an integer X, Player 1 and Player 2 take turns to decrease X by one of its divisors (excluding X itself), leaving a non-negative result. The player who is unable to make a move loses the game. Given the integer X, determine who will win the game if both players play optimally. Input The first line contains T - the number of test cases. The following T lines contain one integer X each for the following test case. Output For each test case output 1 or 2 on a separate line indicating the winner for the respective test case. Constraints 1 ≤ T ≤ 50 1 ≤ X ≤ 1000 SAMPLE INPUT 2 5 10 SAMPLE OUTPUT 1 1","solution":"def determine_winner(X): Determines the winner of the game given X. Player 1 is represented by 1 and Player 2 is represented by 2. if X == 1: return 2 else: return 1 def game_winner(T, test_cases): Determines the winner for each test case. T: Number of test cases. test_cases: List of integers representing each test case. Returns a list of winners for each test case. results = [] for X in test_cases: results.append(determine_winner(X)) return results # Example usage: T = 2 test_cases = [5, 10] print(game_winner(T, test_cases)) # Output: [1, 1]"},{"question":"Task You are given a robot that can be moved within a grid of size MxN. The grid is represented as a list of strings, where each character can be: - `.` for an empty cell, - `B` for the robot start position (there will be exactly one `B`), - `T` for a target position (there will be exactly one `T`), - `#` for an obstacle which the robot cannot move through. The robot can move in one of the four cardinal directions (North, East, South, West). Write a function `can_reach_target(grid, M, N)` that will return `True` if the robot can reach the target position, or `False` otherwise. # Function signature ```python def can_reach_target(grid: List[str], M: int, N: int) -> bool: ``` # Input - `grid`: A list of strings representing the grid. - `M`, `N`: Integers representing the number of rows and columns in the grid respectively. # Output - Return `True` if the robot can reach the target position; otherwise, return `False`. # Example ```python grid = [ \\"B.#.\\", \\".#.#\\", \\"..#T\\", \\"....\\" ] M, N = 4, 4 print(can_reach_target(grid, M, N)) # True ``` # Constraints - 1 <= M, N <= 100 - There will be exactly one `B` and one `T` in the grid. - The grid will contain only the characters `.` (empty), `B` (start), `T` (target), and `#` (obstacle).","solution":"from typing import List from collections import deque def can_reach_target(grid: List[str], M: int, N: int) -> bool: # Locate the starting position \'B\' and target position \'T\' start = None target = None for i in range(M): for j in range(N): if grid[i][j] == \'B\': start = (i, j) elif grid[i][j] == \'T\': target = (i, j) if not start or not target: return False # Define the directions - North, East, South, West directions = [(-1, 0), (0, 1), (1, 0), (0, -1)] # Use a queue for BFS queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() if (x, y) == target: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and grid[nx][ny] != \'#\' and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return False"},{"question":"Alex is designing a new encrypted messaging app. The app needs a feature that checks message integrity. To do this, Alex has decided to use a checksum algorithm: for a given message, sum the ASCII values of all the characters in the message. This checksum is then compared against a predefined value to determine if the message is valid. Write a program to determine if a given message matches a given checksum value. If the message\'s checksum matches the provided value, print \\"Valid\\". Otherwise, print \\"Invalid\\". -----Input----- The input consists of two lines: - The first line contains a string ( M ) (the message) which contains between 1 and 100 characters. Each character in ( M ) is a printable ASCII character. - The second line contains an integer ( C ) (the checksum value), which can be any integer between 0 and 10,000. -----Output----- Print \\"Valid\\" if the checksum of the message matches the provided checksum value. Otherwise, print \\"Invalid\\". -----Examples----- Input hello 532 Output Valid Input world 560 Output Invalid -----Note----- The ASCII value of characters can be found using the ord() function in Python or similar functions in other programming languages.","solution":"def check_message_integrity(message, checksum): Check if the sum of ASCII values of characters in the message matches the given checksum. Args: message (str): The input message. checksum (int): The checksum value to compare against. Returns: str: \\"Valid\\" if the checksum matches, otherwise \\"Invalid\\". computed_checksum = sum(ord(char) for char in message) return \\"Valid\\" if computed_checksum == checksum else \\"Invalid\\""},{"question":"In a small town, there\'s a quirky but efficient postal office. The postal office has a peculiar way of delivering packages. They have multiple delivery trucks, each truck can carry packages only up to a certain maximum weight before it becomes overloaded. Each truck\'s maximum carrying capacity is different from the others. There are several packages to be delivered, each with a specific weight. The postal office wants to distribute all packages into these trucks in such a way that no truck gets overloaded. Your task is to determine whether it is possible to distribute all the packages among the trucks without any truck exceeding its maximum carrying capacity. Input The first line of input contains the number of test cases, T. For each test case, the first line contains two integers M and P, where M is the number of trucks and P is the number of packages. The second line contains M integers, each representing the maximum carrying capacity of each truck. The third line contains P integers, each representing the weight of each package. Output For each test case, your output should be \\"Possible\\" if you can distribute the packages without overloading any truck, and \\"Not Possible\\" otherwise. Constraints 1 ≤ T ≤ 100 1 ≤ M, P ≤ 1000 1 ≤ capacity of each truck, weight of each package ≤ 1000 Example Input: 2 3 5 10 15 20 5 5 5 5 10 2 4 8 10 5 7 3 6 Output: Possible Not Possible","solution":"def can_distribute_packages(num_cases, cases): results = [] for case in cases: M, P, capacities, weights = case capacities.sort(reverse=True) weights.sort(reverse=True) if sum(weights) > sum(capacities): results.append(\\"Not Possible\\") continue j = 0 for weight in weights: if j < M and capacities[j] >= weight: capacities[j] -= weight capacities.sort(reverse=True) else: results.append(\\"Not Possible\\") break else: results.append(\\"Possible\\") return results def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) cases = [] line_index = 1 for _ in range(T): M, P = map(int, lines[line_index].split()) capacities = list(map(int, lines[line_index+1].split())) weights = list(map(int, lines[line_index+2].split())) cases.append((M, P, capacities, weights)) line_index += 3 return T, cases def main(input_data): T, cases = process_input(input_data) results = can_distribute_packages(T, cases) return \\"n\\".join(results)"},{"question":"In a magical land, there exists a special type of tree called a \\"balanced tree.\\" A balanced tree is defined as one in which the heights of the two subtrees of any node never differ by more than one. You have recently discovered a magical spell that allows you to transform a regular binary tree into a balanced tree. However, the spell has a limitation: it can only be performed on a subtree of the original binary tree. You can perform the spell as many times as you like. Given the representation of a binary tree as a series of nodes, where each node is represented by its value, its left child, and its right child, determine if you can transform the entire binary tree into a balanced tree using the spell. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 100), the number of nodes in the tree. The next n lines each contain three values: v_{i} (1 ≤ v_{i} ≤ 100), representing the value of the node, l_{i} (0 ≤ l_{i} ≤ 100), representing the value of the left child (or 0 if there is no left child), and r_{i} (0 ≤ r_{i} ≤ 100), representing the value of the right child (or 0 if there is no right child). -----Output----- Output \\"YES\\" if you can transform the entire binary tree into a balanced tree, and \\"NO\\" if you cannot. -----Examples----- Input 3 1 2 3 2 0 0 3 0 0 Output YES Input 3 1 0 2 2 0 3 3 0 0 Output NO","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(nodes): if not nodes: return None node_dict = {v: TreeNode(v) for v, l, r in nodes} for v, l, r in nodes: node = node_dict[v] if l != 0: node.left = node_dict[l] if r != 0: node.right = node_dict[r] return node_dict[nodes[0][0]] def is_balanced(root): def check(node): if node is None: return 0, True left_height, left_balanced = check(node.left) right_height, right_balanced = check(node.right) current_height = 1 + max(left_height, right_height) if abs(left_height - right_height) > 1: return current_height, False return current_height, left_balanced and right_balanced _, balanced = check(root) return balanced def can_transform_to_balanced_tree(n, nodes): root = build_tree(nodes) return \\"YES\\" if is_balanced(root) else \\"NO\\""},{"question":"Develop a function that determines the longest sequence of continuous increasing numbers in a given list of integers. The function should return the length of this sequence. Example arr = [1, 3, 5, 4, 7] The longest continuous increasing sequence is [1, 3, 5], so the function should return 3. Function Description Complete the `longestIncreasingSequence` function in the editor below: `longestIncreasingSequence` has the following parameter: int `arr[n]`: an array of integers Return: int: the length of the longest continuous increasing sequence Input Format The first line contains an integer n, the size of the array. The second line contains n space-separated integers that describe arr[n]. Constraints 0 < n leq 10^5 -10^9 leq arr[i] leq 10^9 Output Format Return the length of the longest continuous increasing sequence in the array. Sample Input STDIN Function ----- -------- 6 arr[] size n = 6 1 3 5 4 7 8 arr = [1, 3, 5, 4, 7, 8] Sample Output 3 Explanation The consecutive sequences of increasing elements are: `[1, 3, 5]` which has a length of 3, and `[4, 7, 8]` which has a length of 3. Therefore, the longest length of continuous increasing sequence in the array is 3.","solution":"def longestIncreasingSequence(arr): Returns the length of the longest continuous increasing sequence in the array. Parameters: arr (list of int): An array of integers Returns: int: The length of the longest continuous increasing sequence if not arr: return 0 longest_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 longest_length = max(longest_length, current_length) else: current_length = 1 return longest_length"},{"question":"A company is organizing a series of events, and they have a list of guests who have registered to attend. Each guest has a unique ID number. The company wants to send reminders to the guests, but they want to avoid sending multiple reminders to guests attending consecutive events. To achieve this, they will compare the list of guests registered for each event against the previous event. If a guest is registered for both the current and previous events, they will not receive another reminder. Write a program to help the company determine the list of guests who should receive a reminder for each event, starting from the second event. ------ Input Format ------ - The first line contains an integer N — the number of events. - The next N lines contain the lists of guest IDs for each event, separated by spaces. ------ Output Format ------ For each event from the second event to the N-th event, output a list of guest IDs who should receive a reminder. The guests should be listed in the order they appear in the current event\'s list. ------ Constraints ------ 2 ≤ N ≤ 10^3 1 ≤ |guest_{i}| ≤ 10^4 - Each guest ID is an integer between 1 and 10^9. ------ Sample Input 1 ------ 4 1 2 3 2 3 4 1 2 2 5 ------ Sample Output 1 ------ 4 1 5 ------ Explanation 1 ------ - For the second event, guest IDs 2 and 3 are present in both the first and second events, so only guest 4 receives a reminder. - For the third event, guest IDs 1 and 2 only appear in the third event, so they both receive reminders. - For the fourth event, guest ID 2 appears in both the third and fourth events, so only guest 5 receives a reminder. ------ Sample Input 2 ------ 3 5 6 7 8 5 5 9 8 ------ Sample Output 2 ------ 8 9","solution":"def get_reminder_list(events): Given a list of events with guests attending each event, return the list of guests who should receive a reminder for each event, starting from the second event. Args: events: List of lists, where each sublist represents guest IDs for an event. Returns: reminder_guests: List of lists, where each sublist contains guest IDs who should receive a reminder. reminder_guests = [] for i in range(1, len(events)): current_event = events[i] previous_event = events[i - 1] previous_event_set = set(previous_event) reminder_for_current_event = [guest for guest in current_event if guest not in previous_event_set] reminder_guests.append(reminder_for_current_event) return reminder_guests"},{"question":"You are in charge of overseeing a server system where processes are executed in a FIFO (first-in, first-out) manner. Each process has a specific execution time and a specific deadline by which it should be completed. The server can only execute one process at a time, and once a process starts, it cannot be preempted. If a process finishes after its deadline, it counts as a late process. Given the list of processes along with their execution times and deadlines in the order they arrive, determine how many processes will be late. Input The first line of the input contains a single integer T, denoting the number of test cases to follow. The description of each test case is as follows: - The first line contains a single integer N, the number of processes. - The next N lines each contain two integers: Ti (the execution time) and Di (the deadline) of the ith process. Output For each test case, output a single line containing the number of late processes. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 10^4 1 ≤ Ti, Di ≤ 10^6 SAMPLE INPUT 2 3 2 5 3 6 1 8 4 4 10 2 8 3 6 2 5 SAMPLE OUTPUT 0 2","solution":"def count_late_processes(test_cases): results = [] for case in test_cases: N = case[0] processes = case[1] current_time = 0 late_count = 0 for execution_time, deadline in processes: current_time += execution_time if current_time > deadline: late_count += 1 results.append(late_count) return results def parse_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) processes = [] index += 1 for _ in range(N): Ti, Di = map(int, lines[index].split()) processes.append((Ti, Di)) index += 1 test_cases.append((N, processes)) return test_cases"},{"question":"A research group is analyzing the social ties between a set of scientists. Each scientist knows a certain subset of other scientists. Your task is to determine if there exists any scientist who is known by all other scientists. Input: - The first line contains a single integer n (1 ≤ n ≤ 100) — the number of scientists. - Each of the next n lines contains a string of length n composed of characters \'0\' or \'1\'. The j-th character in the i-th string is \'1\' if the i-th scientist knows the j-th scientist, and \'0\' otherwise. Output: - Print the 1-based index of the scientist who is known by all other scientists. - If no such scientist exists, print -1. Examples: Input: 4 0111 0011 0001 0000 Output: 4 Input: 3 010 001 100 Output: -1 Note: In the first example, the 4th scientist is known by all other scientists (indicated by \'1\' in the fourth column of all other rows). In the second example, there is no single scientist who is known by all others.","solution":"def find_known_by_all(n, relations): Determines if there exists a scientist known by all other scientists. Args: n : int : number of scientists relations : list of str : list of strings representing who knows whom Returns: int : 1-based index of the scientist known by all others, or -1 if no such scientist exists for j in range(n): all_known = True for i in range(n): if i != j and relations[i][j] == \'0\': all_known = False break if all_known: return j + 1 return -1"},{"question":"You are given an array of integers. Your task is to perform a specific reconstruction of the array: Move every zero to the end of the array while maintaining the relative order of the non-zero elements. Write a function `rearrangeArray(arr)` that achieves the described rearrangement without using extra space for another array (in-place modification of the given array). Function Signature: `def rearrangeArray(arr: List[int]) -> None:` -----Input----- - An integer n (1 leq n leq 10^5) — the length of the array. - An array arr of n integers (-10^9 leq arr[i] leq 10^9). -----Output----- The function should return nothing. Modify the array `arr` in-place such that all zeros are moved to the end while maintaining the order of non-zero elements. -----Example----- Input 6 [0, 1, 0, 3, 12, 0] Output [1, 3, 12, 0, 0, 0] -----Note----- In the example test case, the array initially has three zeros scattered throughout. After rearranging, the non-zero integers maintain their order, and all zeros are moved to the end of the array. Hence, the output is [1, 3, 12, 0, 0, 0].","solution":"from typing import List def rearrangeArray(arr: List[int]) -> None: Rearranges the array such that all zeroes are moved to the end while maintaining the order of the non-zero elements. # Pointer for the next position of the non-zero element last_non_zero_index = 0 # Iterate through the array for i in range(len(arr)): if arr[i] != 0: # Swap only if the current element is non-zero and needed to be swapped if i != last_non_zero_index: arr[last_non_zero_index], arr[i] = arr[i], arr[last_non_zero_index] last_non_zero_index += 1"},{"question":"The city mayor has decided to plant trees along the main road to beautify the city. The road can be represented as a straight line with n points where trees can be planted. Due to budget constraints, the mayor can only plant m trees. To ensure uniformity and maximized beauty, the mayor wants the trees to be planted such that the minimum distance between any two trees is maximized. Given the number of planting points n and the number of trees m, you need to determine the maximum possible minimum distance between the planted trees. Input The first line contains two integers n (2 ≤ n ≤ 1000) and m (2 ≤ m ≤ n) — the number of planting points and the number of trees to be planted. The second line contains n distinct integers representing the positions of the planting points on the road in increasing order (1 ≤ ai ≤ 10^9). Output In a single line, print the maximum possible minimum distance between any two planted trees. Examples Input 5 3 1 2 8 4 9 Output 3 Input 6 4 1 2 6 7 8 11 Output 2 Note In the first sample, one optimal solution is to plant the trees at positions 1, 4, and 8, resulting in a minimum distance of 3 between any two trees. In the second sample, one optimal solution is to plant the trees at positions 1, 6, 8, and 11, resulting in a minimum distance of 2 between any two trees.","solution":"def can_place_trees(positions, n, m, min_dist): Helper function to check if m trees can be placed with at least min_dist distance apart. count = 1 # Place the first tree at the first position last_position = positions[0] for i in range(1, n): if positions[i] - last_position >= min_dist: count += 1 last_position = positions[i] if count == m: return True return False def max_min_distance(n, m, positions): Returns the maximum possible minimum distance between any two planted trees. positions.sort() low, high = 1, positions[-1] - positions[0] result = 0 while low <= high: mid = (low + high) // 2 if can_place_trees(positions, n, m, mid): result = mid low = mid + 1 else: high = mid - 1 return result"},{"question":"A local chef is organizing a cooking competition to find the best recipes from different regions of the country. Each region registers its own unique recipes, and the chef needs to rank the recipes based on their popularity scores. However, recipes from some regions can have negative popularity scores, which the chef wants to exclude from the rankings. The chef is interested in determining the top k most popular recipes from the combined list of all regions after excluding any recipes with negative scores. ------ Input Format ------ - The first line contains an integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the number of recipes. - The second line of each test case contains N integers indicating the popularity scores of the recipes. - The third line of each test case contains an integer k - the number of top recipes to consider. ------ Output Format ------ For each test case, output the top k most popular recipes\' scores in descending order, each score on a new line. If there are fewer than k recipes without negative scores, output as many as there are, and each score should still be on a new line. ------ Constraints ------ 1 le T le 100 1 le N le 1000 -1000 le text{popularity score} le 1000 1 le k le N ----- Sample Input 1 ------ 2 5 -10 20 30 -5 40 3 4 50 60 -70 80 2 ----- Sample Output 1 ------ 40 30 20 80 60 ----- Explanation 1 ------ Test case-1: After removing the negative scores, the popularity scores are [20, 30, 40]. The top 3 are 40, 30, and 20 in descending order. Test case-2: After removing the negative scores, the popularity scores are [50, 60, 80]. The top 2 are 80 and 60 in descending order.","solution":"def top_k_recipes(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] scores = test_cases[i][1] k = test_cases[i][2] # Filter out negative scores positive_scores = [score for score in scores if score >= 0] # Sort scores in descending order positive_scores.sort(reverse=True) # Get top k scores top_k = positive_scores[:k] results.append(top_k) return results"},{"question":"A string can be partitioned into multiple substrings such that each substring is a palindrome. Given a string, find the minimum number of cuts needed such that every substring after the cut is a palindrome. Input The only line of input contains a string s (1 ≤ |s| ≤ 50). The string consists of lowercase English letters only. Output Output the minimum number of cuts needed. Examples Input abac Output 1 Input aab Output 1","solution":"def min_cut_palindrome(s): Given a string s, returns the minimum number of cuts needed such that every substring after the cut is a palindrome. n = len(s) # is_palindrome[i][j] will be True if s[i:j+1] is a palindrome is_palindrome = [[False] * n for _ in range(n)] for i in range(n): is_palindrome[i][i] = True for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if length == 2: is_palindrome[i][j] = s[i] == s[j] else: is_palindrome[i][j] = (s[i] == s[j]) and is_palindrome[i+1][j-1] cuts = [float(\'inf\')] * n for i in range(n): if is_palindrome[0][i]: cuts[i] = 0 else: for j in range(i): if is_palindrome[j+1][i]: cuts[i] = min(cuts[i], cuts[j] + 1) return cuts[-1]"},{"question":"Given an integer n, find the number of distinct pairs of integers (a, b) such that 1 leq a, b leq n and a times b is a perfect square. -----Input----- The first line contains a single integer t (1leq tleq 10^4), the number of test cases. Then t cases follow. The only line of each test case contains a single integer n (1leq nleq 10^{6}). -----Output----- For each test case, output a single integer representing the number of distinct pairs (a, b) such that a times b is a perfect square. -----Examples----- Input 3 2 3 4 Output 2 3 6 -----Explanation----- In the first test case, n=2, the pairs are (1, 1), (2, 2). In the second test case, n=3, the pairs are (1, 1), (2, 2), (3, 3). In the third test case, n=4, the pairs are (1, 1), (2, 2), (3, 3), (4, 1), (4, 4), (1, 4). Note that (a, b) and (b, a) are considered different unless a = b.","solution":"def count_distinct_pairs(n): Returns the number of distinct pairs (a, b) such that 1 <= a, b <= n and a * b is a perfect square. count = 0 for a in range(1, n + 1): for b in range(a, n + 1): if (a * b)**0.5 == int((a * b)**0.5): count += 1 if a == b else 2 return count def solve(t, test_cases): results = [] for n in test_cases: results.append(count_distinct_pairs(n)) return results"},{"question":"Alice has recently developed an interest in number theory and discovered a sequence of numbers called the \\"Fibonacci sequence.\\" The Fibonacci sequence is defined as follows: - text{Fib}(0) = 0 - text{Fib}(1) = 1 - For n geq 2, text{Fib}(n) = text{Fib}(n-1) + text{Fib}(n-2) Alice noticed that large Fibonacci numbers can have a lot of digits and she is interested in finding the greatest common divisor (GCD) of two particular Fibonacci numbers, text{Fib}(a) and text{Fib}(b). Given two integers a and b, help Alice determine the GCD of text{Fib}(a) and text{Fib}(b). Input Format On the first line, you will be given two integers a and b. Constraints 0 leq a, b leq 10^{18} Output Format Print the GCD of text{Fib}(a) and text{Fib}(b). Sample Input 10 15 Sample Output 5 Explanation The Fibonacci numbers are text{Fib}(10) = 55 and text{Fib}(15) = 610. The greatest common divisor of 55 and 610 is 5. Note You may find it useful to know that the GCD of two Fibonacci numbers text{Fib}(a) and text{Fib}(b) is given by text{Fib}(text{gcd}(a, b)). This can be computed using the properties of the Fibonacci sequence and the properties of GCDs.","solution":"def gcd(a, b): Helper function to calculate the GCD of two numbers using the Euclidean algorithm. while b: a, b = b, a % b return a def fib(n): Helper function to calculate the n-th Fibonacci number using matrix exponentiation. This function can effectively compute Fibonacci numbers up to very large n, leveraging the properties of matrix exponentiation. if n == 0: return 0 if n == 1: return 1 def matrix_mult(A, B): return [ [A[0][0]*B[0][0] + A[0][1]*B[1][0], A[0][0]*B[0][1] + A[0][1]*B[1][1]], [A[1][0]*B[0][0] + A[1][1]*B[1][0], A[1][0]*B[0][1] + A[1][1]*B[1][1]] ] def matrix_pow(M, power): result = [[1, 0], [0, 1]] base = M while power: if power % 2 != 0: result = matrix_mult(result, base) base = matrix_mult(base, base) power //= 2 return result Q = [[1, 1], [1, 0]] Q_n = matrix_pow(Q, n-1) return Q_n[0][0] def gcd_fib(a, b): Function to calculate the GCD of Fib(a) and Fib(b) using the relation: GCD(Fib(a), Fib(b)) = Fib(GCD(a, b)) gcd_ab = gcd(a, b) return fib(gcd_ab)"},{"question":"Valid Anagram Checker An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Your task is to write a function that checks if two given strings are anagrams of each other. # Requirements: - The function should be case-insensitive, meaning it should treat uppercase and lowercase letters as the same. - Ignore spaces and punctuation. - Return **True** if the strings are anagrams, and **False** otherwise. # Examples: ```python input: (\\"listen\\", \\"silent\\") output: True input: (\\"Listen\\", \\"Silent\\") output: True input: (\\"A gentleman\\", \\"Elegant man\\") output: True input: (\\"hello\\", \\"world\\") output: False ``` # Constraints: - The length of each string is at most 100 characters. - The strings contain only printable ASCII characters. # Function Signature: ```python def is_anagram(str1: str, str2: str) -> bool: pass ```","solution":"import string def is_anagram(str1: str, str2: str) -> bool: Checks if the given two strings are anagrams of each other ignoring case, spaces, and punctuation. # Remove spaces and punctuation, and convert to lowercase translator = str.maketrans(\'\', \'\', string.whitespace + string.punctuation) normalized_str1 = str1.translate(translator).lower() normalized_str2 = str2.translate(translator).lower() # Check if sorted characters of both strings are the same return sorted(normalized_str1) == sorted(normalized_str2)"},{"question":"Write a function to reorder an array of integers such that the even numbers appear at the beginning, and odd numbers appear at the end. The relative order of even and odd numbers must be preserved. ------ Input Format ------ - First line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of elements in the array. - The second line contains N space-separated integers. ------ Output Format ------ For each test case, output a line containing N space-separated integers representing the reordered array. ------ Constraints ------ 1 ≤ T ≤ 500 1 ≤ N ≤ 10^5 1 ≤ a_i ≤ 10^9 ----- Sample Input 1 ------ 2 5 1 2 3 4 5 4 10 3 14 11 ----- Sample Output 1 ------ 2 4 1 3 5 10 14 3 11 ----- Explanation 1 ------ Test case 1: The even numbers 2 and 4 are moved to the front, followed by the odd numbers 1, 3, and 5 in the original order. Test case 2: The even numbers 10 and 14 appear at the beginning, followed by the odd numbers 3 and 11 in the original order.","solution":"def reorder_array(arr): Reorders elems in the array such that even numbers come first while maintaining the relative order. Parameters: arr (list of int): The input array Returns: list of int: The reordered array evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds def process_test_cases(test_cases): Process multiple test cases and return reordered arrays. Parameters: test_cases (list of tuples): Each tuple contains number of elements in the array and the array itself. Returns: list of list of int: List of reordered arrays for each test case results = [] for n, arr in test_cases: results.append(reorder_array(arr)) return results def main(input_data): Parse input data, call process_test_cases and format the output. Parameters: input_data (str): Input data as a multiline string lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((N, arr)) index += 2 results = process_test_cases(test_cases) for result in results: print(\\" \\".join(map(str, result)))"},{"question":"Given a list of **words** and an **integer** `n`, find the `n`th most frequently occurring word in the list. If multiple words have the same frequency, return the lexicographically smallest word among them. If `n` is greater than the number of distinct words in the list, return `None`/`nil`. Examples ```python words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"] n = 1 ==> \\"apple\\" # \'apple\' is the most frequent word n = 2 ==> \\"banana\\" # \'banana\' is the second most frequent word n = 3 ==> \\"orange\\" # \'orange\' is the third most frequent word n = 4 ==> None # there are only 3 distinct words in the list words = [\\"apple\\", \\"banana\\", \\"orange\\", \\"banana\\", \\"apple\\", \\"orange\\"] n = 1 ==> \\"apple\\" # \'apple\' and \'banana\' both occur twice, but \'apple\' is lexicographically smaller n = 2 ==> \\"banana\\" # \'orange\' and \'banana\' both occur twice, but \'banana\' is lexicographically smaller n = 3 ==> \\"orange\\" # all words have the same frequency now, the third one lexicographically is \'orange\' n = 4 ==> None # there are only 3 distinct words in the list ``` Note: - You can assume the list of words has at most 10,000 elements. - The words are case-sensitive.","solution":"from collections import Counter def nth_most_frequent_word(words, n): Returns the nth most frequently occurring word in the list. If multiple words have the same frequency, returns the lexicographically smallest word among them. If n is greater than the number of distinct words in the list, returns None. if not words or n <= 0: return None # Count frequency of each word word_count = Counter(words) # Create a sorted list of words based on frequency first, and lexicographically next sorted_words = sorted(word_count.items(), key=lambda x: (-x[1], x[0])) # Check if n is within the length of distinct words if n > len(sorted_words): return None return sorted_words[n - 1][0]"},{"question":"You are given a sequence of numbers where each number appears exactly twice, except for one unique number that appears only once. Your task is to find the unique number. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the list including all numbers. The second line contains n integers v1, v2, ..., vn (-10^6 ≤ vi ≤ 10^6) — the sequence of numbers. Output Output the unique number that appears only once. Examples Input 5 2 3 4 3 2 Output 4 Input 7 5 1 2 1 5 3 2 Output 3 Input 3 0 1 1 Output 0 Note In the first sample, among the numbers 2, 3, 4, 3, and 2, the number 4 appears only once. In the second sample, among the numbers 5, 1, 2, 1, 5, 3, and 2, the number 3 appears only once. In the third sample, the number 0 is the unique number appearing only once.","solution":"def find_unique_number(n, sequence): Finds the unique number in the sequence where every other number appears exactly twice. Parameters: n (int): Length of the sequence. sequence (list): List of integers containing exactly one unique number. Returns: int: The unique number in the sequence. unique = 0 for num in sequence: unique ^= num return unique"},{"question":"You are given an integer array `arr` and an integer `k`. You need to determine if there are `k` consecutive odd numbers in the array. Example 1: Input: arr = [1, 2, 3, 4, 5], k = 3 Output: false Explanation: There are no three consecutive odd numbers in the given array. Example 2: Input: arr = [1, 3, 5, 7, 9], k = 3 Output: true Explanation: The array contains three consecutive odd numbers: [3, 5, 7]. Your Task: You do not need to read input or print anything. Your task is to complete the function `kConsecutiveOdds()` which takes `arr` and `k` as input parameters and returns `true` if there are `k` consecutive odd numbers in the array, else returns `false`. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ arr.length ≤ 10^5 1 ≤ arr[i] ≤ 10^9 1 ≤ k ≤ arr.length","solution":"def kConsecutiveOdds(arr, k): Determines if there are k consecutive odd numbers in the array. :param arr: List[int] - The input array. :param k: int - The number of consecutive odd numbers to check for. :return: bool - True if there are k consecutive odd numbers, else False. count = 0 for num in arr: if num % 2 != 0: count += 1 if count == k: return True else: count = 0 return False"},{"question":"You\'re tasked with building a simple library management system. The system should be able to keep track of books and their availability. Create a Python class named `Library`. The `Library` class should support the following operations: 1. Adding a new book with a provided title. 2. Borrowing a book. If the book is available, it should mark it as borrowed. 3. Returning a book. If the book was borrowed, it should mark it as available. 4. Listing all books in the library along with their status (available or borrowed). Details: 1. The method `add_book` should accept a string `title` and add the book to the library\'s collection. 2. The method `borrow_book` should accept a string `title` and mark the book as borrowed if it is available. If the book is already borrowed or does not exist, return a corresponding message. 3. The method `return_book` should accept a string `title` and mark the book as available if it was borrowed. If the book was not borrowed or does not exist, return a corresponding message. 4. The method `list_books` should return a list of tuples, each containing the title of a book and its status: `\\"available\\"` or `\\"borrowed\\"`. Here\'s a basic example of how the class should work: ```python library = Library() library.add_book(\\"The Great Gatsby\\") library.add_book(\\"War and Peace\\") # List books print(library.list_books()) # Output: [(\'The Great Gatsby\', \'available\'), (\'War and Peace\', \'available\')] # Borrow a book print(library.borrow_book(\\"The Great Gatsby\\")) # Output: \\"You\'ve borrowed \'The Great Gatsby\'\\" # Try to borrow it again print(library.borrow_book(\\"The Great Gatsby\\")) # Output: \\"\'The Great Gatsby\' is already borrowed.\\" # Return it print(library.return_book(\\"The Great Gatsby\\")) # Output: \\"You\'ve returned \'The Great Gatsby\'\\" # List books again print(library.list_books()) # Output: [(\'The Great Gatsby\', \'available\'), (\'War and Peace\', \'available\')] ``` You need to ensure that you\'re properly handling edge cases such as borrowing or returning a book that doesn\'t exist in the library.","solution":"class Library: def __init__(self): self.books = {} def add_book(self, title): self.books[title] = \\"available\\" def borrow_book(self, title): if title not in self.books: return f\\"\'{title}\' does not exist in the library.\\" if self.books[title] == \\"borrowed\\": return f\\"\'{title}\' is already borrowed.\\" self.books[title] = \\"borrowed\\" return f\\"You\'ve borrowed \'{title}\'\\" def return_book(self, title): if title not in self.books: return f\\"\'{title}\' does not exist in the library.\\" if self.books[title] == \\"available\\": return f\\"\'{title}\' was not borrowed.\\" self.books[title] = \\"available\\" return f\\"You\'ve returned \'{title}\'\\" def list_books(self): return [(title, status) for title, status in self.books.items()] # Example usage library = Library() library.add_book(\\"The Great Gatsby\\") library.add_book(\\"War and Peace\\") # List books print(library.list_books()) # Output: [(\'The Great Gatsby\', \'available\'), (\'War and Peace\', \'available\')] # Borrow a book print(library.borrow_book(\\"The Great Gatsby\\")) # Output: \\"You\'ve borrowed \'The Great Gatsby\'\\" # Try to borrow it again print(library.borrow_book(\\"The Great Gatsby\\")) # Output: \\"\'The Great Gatsby\' is already borrowed.\\" # Return it print(library.return_book(\\"The Great Gatsby\\")) # Output: \\"You\'ve returned \'The Great Gatsby\'\\" # List books again print(library.list_books()) # Output: [(\'The Great Gatsby\', \'available\'), (\'War and Peace\', \'available\')]"},{"question":"You are given an integer N, representing the number of skyscrapers in a city skyline. Each skyscraper is represented as an array of integers where each integer denotes the height of the skyscraper at that position. Skyscrapers can have varying widths, and a skyscraper with a width of W has heights specified for W consecutive units. The goal is to determine the silhouette of the skyline when viewed from a distance. The skyline silhouette represents the highest points at each position when all skyscrapers are placed on a city plot starting from the base at position 0. Input The first line contains the integer N (1 ≤ N ≤ 100), denoting the number of skyscrapers. The following N lines contain the arrays of integers representing the heights of each skyscraper. Output Output a single line containing the skyline silhouette as an array of integers. Example Input 3 3 0 3 2 4 1 1 2 3 2 1 Output 4 3 3 2 1 1","solution":"def calculate_skyline(N, skyscrapers): This function calculates the skyline silhouette for the given skyscrapers. Parameters: N (int): Number of skyscrapers skyscrapers (list of list of int): Heights of each skyscraper Returns: list of int: The skyline silhouette if N == 0: return [] max_width = max(len(sk) for sk in skyscrapers) skyline = [0] * max_width for sk in skyscrapers: for pos, height in enumerate(sk): skyline[pos] = max(skyline[pos], height) return skyline"},{"question":"In an online game, there are N different skills that players can acquire. Each skill is represented by an integer from 1 to N, inclusive. Each player in the game can have a set of skills, and each skill has a certain level ranging from 1 to L, inclusive. A player is considered proficient if they have at least one skill of level L. You are given the skill sets of M players, and your task is to determine how many players are proficient. Constraints * 1 ≦ N ≦ 100 * 1 ≦ L ≦ 100 * 1 ≦ M ≦ 10^5 * All skill levels are integers. Input The input is given from Standard Input in the following format: N L M P1_s1 P1_l1 P1_s2 P1_l2 ... P1_sk P1_lk P2_s1 P2_l1 P2_s2 P2_l2 ... P2_sl P2_ll ... PM_s1 PM_l1 PM_s2 PM_l2 ... PM_sn PM_ln Where: - N is the number of different skills. - L is the maximum level for the skills. - M is the number of players. - For each player, there are several pairs of integers representing the skill identifier (Pi_si) and the skill level (Pi_li). Output Print the number of proficient players. Examples Input 3 5 3 1 4 2 5 3 3 1 1 2 2 3 5 1 2 2 4 3 1 Output 2 Input 4 7 2 1 7 2 6 3 2 4 4 1 5 2 7 3 3 4 1 Output 2","solution":"def count_proficient_players(N, L, M, players_skills): proficient_count = 0 skill_level_index = 0 for _ in range(M): player_skill_count = players_skills[skill_level_index] player_skills = players_skills[skill_level_index + 1: skill_level_index + 1 + 2 * player_skill_count] is_proficient = False for i in range(player_skill_count): skill_id = player_skills[2 * i] skill_level = player_skills[2 * i + 1] if skill_level == L: is_proficient = True break if is_proficient: proficient_count += 1 skill_level_index += 1 + 2 * player_skill_count return proficient_count def read_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) L = int(data[1]) M = int(data[2]) players_skills = list(map(int, data[3:])) return N, L, M, players_skills if __name__ == \\"__main__\\": N, L, M, players_skills = read_input() result = count_proficient_players(N, L, M, players_skills) print(result)"},{"question":"# Merge and Sort Two Lists by Specific Rule Your task is to merge two lists of integers and sort the merged list based on the following rule: The list should be sorted primarily by the descending order of elements, and if two elements are equal, they should be sorted based on which list they came from—elements from the first list should come before elements from the second list. Example: ``` Input: List 1: [9, 2, 5, 7] List 2: [3, 6, 2, 7] Merged list by the rule: 9 -> comes from List 1 7 -> comes from List 1 7 -> comes from List 2 (sorted after the 7 from List 1) 6 -> comes from List 2 5 -> comes from List 1 3 -> comes from List 2 2 -> comes from List 1 2 -> comes from List 2 (sorted after the 2 from List 1) Output: [9, 7, 7, 6, 5, 3, 2, 2] ``` Your function should take two lists as input and return the sorted merged list. Have fun coding!","solution":"def merge_and_sort_lists(list1, list2): Merges two lists and sorts the merged list in descending order. If two elements are equal, elements from the first list come before those from the second list. # Create a list of tuples where each tuple is (element, list_indicator) merged_list = [(num, 1) for num in list1] + [(num, 2) for num in list2] # Sort the merged list based on the element value first (descending), then by list_indicator merged_list.sort(key=lambda x: (-x[0], x[1])) # Return only the elements in the sorted order return [x[0] for x in merged_list]"},{"question":"You are given an array of integers and a target integer. Your task is to determine if there are two distinct indices in the array such that the elements at those indices add up to the target integer. -----Input----- The first line contains an integer t (1 le t le 100) - the number of test cases. Each test case starts with a line containing two integers n (2 le n le 10^5) and target (-10^9 le target le 10^9), where n is the size of the array and target is the desired sum. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) - the elements of the array. -----Output----- For each test case, print \\"YES\\" if there exist two distinct indices i and j such that a_i + a_j = target. Otherwise, print \\"NO\\". -----Examples----- Input 3 4 9 2 7 11 15 5 18 3 1 4 1 5 3 6 3 3 3 Output YES NO YES -----Note----- In the first test case, the pair (2, 7) adds up to the target 9. In the second test case, there is no pair of distinct indices that add up to the target 18. In the third test case, the pair (3, 3) adds up to the target 6.","solution":"def check_two_sum_exists(test_cases): results = [] for case in test_cases: n, target, array = case seen = set() found = False for num in array: if target - num in seen: found = True break seen.add(num) results.append(\\"YES\\" if found else \\"NO\\") return results"},{"question":"Chef Mario is a master chef who loves experimenting with recipes. He believes that the more balanced the distribution of ingredients, the tastier the dish. Mario defines a balanced distribution as the smallest difference between the quantities of the two most abundant ingredients. You are given a list of integers representing the quantities of various ingredients. Your task is to find the smallest difference between the two highest quantities. Input The first line of input contains a single integer n (2 ≤ n ≤ 100), the number of ingredients. The second line contains n space-separated integers a1, a2, ..., an (0 ≤ a_i ≤ 1000), representing the quantity of each ingredient. Output Write a single integer, the smallest difference between the two highest quantities. Examples Input 5 3 1 9 7 8 Output 1 Input 4 8 8 8 8 Output 0","solution":"def smallest_difference_between_highest_quantities(n, quantities): Returns the smallest difference between the two highest quantities in the list. Parameters: n (int): number of ingredients. quantities (list of int): quantities of ingredients. Returns: int: smallest difference between the two highest quantities. quantities.sort() return abs(quantities[-1] - quantities[-2])"},{"question":"You have a list of integers. Write a function that, given the list, returns a new list with all duplicate elements removed. The order of the elements in the original list should be preserved in the new list. For example: ``` remove_duplicates([1, 2, 3, 2, 4, 1]) // => [1, 2, 3, 4] remove_duplicates([6, 5, 6, 7]) // => [6, 5, 7] remove_duplicates([1, 1, 1]) // => [1] ```","solution":"def remove_duplicates(arr): Returns a new list with duplicates removed from the input list, preserving the original order. seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"# Task Create a function called `formatNumber` that converts a given integer to a string formatted in a specific way to represent a decimal-like structure. # Rules: 1. If the integer is a single digit, it should be padded with zeroes to ensure it has three digits. 2. The formatted string should have one \\"decimal\\" after the first digit. 3. If the integer has more than three digits, format only the last three digits according to the rule. # Examples: ```python formatNumber(5) => \'0.05\' formatNumber(70) => \'0.70\' formatNumber(123) => \'1.23\' formatNumber(4567) => \'5.67\' formatNumber(89012) => \'0.12\' ``` Create this function in a way that aligns with the rules and examples provided.","solution":"def formatNumber(n): Converts an integer to a string formatted to represent a decimal-like structure. Args: n (int): The integer to be formatted. Returns: str: The formatted string. # Extract the last three digits of the number last_three_digits = abs(n) % 1000 # Format the number with leading zeros and one decimal point formatted_str = f\\"{last_three_digits // 100}.{last_three_digits % 100:02d}\\" return formatted_str"},{"question":"You are given a list of integers, and your task is to determine the largest possible product of any three distinct numbers from the list. Each number in the list is unique and the list contains at least three integers. **Example:** For the input list numbers = [1, 10, 2, 6, 5, 3], the largest possible product is 10 times 6 times 5 = 300. **Function Description** Complete the `maximumProduct` function in the editor below. `maximumProduct` has the following parameter: - `int numbers[]`: an array of integers. **Returns** - `int`: the largest possible product of any three numbers. **Input Format** The first line contains an integer n, the number of elements in the list. Each of the next n lines contains an integer from the list. **Constraints** 3 leq n leq 10^5 -10^5 leq text{numbers[i]} leq 10^5 **Sample Input** ``` 6 1 10 2 6 5 3 ``` **Sample Output** ``` 300 ``` **Explanation** From the given list, the largest product of any three numbers is 10 times 6 times 5 = 300.","solution":"def maximumProduct(numbers): Returns the largest possible product of any three distinct numbers from the list. numbers.sort() # Two possible candidates for the largest product: # 1. Product of three largest numbers candidate1 = numbers[-1] * numbers[-2] * numbers[-3] # 2. Product of two smallest numbers (could be negative) and the largest number candidate2 = numbers[0] * numbers[1] * numbers[-1] return max(candidate1, candidate2)"},{"question":"Write a program that finds the length of the longest non-decreasing subsequence in a given list of integers. A subsequence is a sequence obtained by deleting zero or more elements from the list without changing the order of the remaining elements. A non-decreasing subsequence is a subsequence where each element is greater than or equal to the previous one. Input The input consists of several datasets. Each dataset consists of a single line containing a list of integers separated by spaces. The length of each list is between 1 and 1000, and the value of each integer is between -1000 and 1000. The end of the input is indicated by a line containing only a single digit \'0\'. Output For each dataset, print the length of the longest non-decreasing subsequence found in the list of integers. Example Input 1 2 3 4 4 3 2 1 10 22 9 33 21 50 41 60 80 0 Output 4 1 6","solution":"def longest_non_decreasing_subsequence_length(arr): if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] >= arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_input(input_lines): results = [] for line in input_lines: if line.strip() == \'0\': break arr = list(map(int, line.strip().split())) results.append(longest_non_decreasing_subsequence_length(arr)) return results"},{"question":"Write a function that performs a Caesar cipher shift on a given string. In a Caesar cipher, each letter in the plaintext is shifted a certain number of places down the alphabet. Non-letter characters remain unchanged. --- **Step 1: Shifting** Your input will be a string and an integer that indicates the number of positions each letter should be shifted. The shift should be cyclic, meaning that after \'z\', it should wrap around to \'a\'. For example, with a shift of 3: ```text \'a\' -> \'d\' \'b\' -> \'e\' \'z\' -> \'c\' ``` Similarly, for uppercase letters: ```text \'A\' -> \'D\' \'B\' -> \'E\' \'Z\' -> \'C\' ``` --- **Step 2: Handling Non-letters** Characters that are not letters (e.g., spaces, punctuation) should be left as they are. --- Your function should return the encoded string with all its letters shifted by the specified number of positions. Here are some examples: *In:* ```python caesar_cipher(\\"Hello, World!\\", 5) ``` *Out:* ```text \\"Mjqqt, Btwqi!\\" ``` --- *In:* ```python caesar_cipher(\\"abcXYZ\\", 2) ``` *Out:* ```text \\"cdeZAB\\" ``` --- Write the `caesar_cipher` function to perform this encoding.","solution":"def caesar_cipher(text, shift): Applies a Caesar cipher shift on each letter in the text. Parameters: text (str): The input string to encrypt. shift (int): The number of positions each letter should be shifted. Returns: str: The encrypted string with all its letters shifted by the specified number of positions. result = [] for char in text: if char.isupper(): result.append(chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\'))) elif char.islower(): result.append(chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\'))) else: result.append(char) return \'\'.join(result)"},{"question":"Determine if it is possible to arrange N students in a single line so that no two adjacent students have the same height. Given the heights of N students, decide if such an arrangement is possible. Constraints * 1 leq N leq 100 * Each student\'s height is a positive integer. Input Input is given from Standard Input in the following format: N H1 H2 H3 ... HN Output If it is possible to arrange the students as described, print `YES`; otherwise, print `NO`. Examples Input 5 1 2 2 3 4 Output YES Input 3 2 2 2 Output NO Input 4 8 7 6 10 Output YES Input 6 4 4 4 4 4 4 Output NO","solution":"def can_arrange_students(n, heights): Determines if it is possible to arrange students such that no two adjacent students have the same height. :param n: Number of students :param heights: List of heights of the students :return: \\"YES\\" if it is possible to arrange students as described, \\"NO\\" otherwise. from collections import Counter height_count = Counter(heights) # Calculate the maximum frequency of any height max_freq = max(height_count.values()) # Check if the max frequency height can fit without violating the no adjacent rule if max_freq > (n + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"John loves programming and enjoys solving mathematical problems. One day, he encountered a challenge where he needs to calculate the sum of all subarray minimums for a given array. John seeks your help to solve this problem efficiently. -----Task----- Given an array A of N integers, find the sum of the minimum value of every subarray of A. -----Input----- - The first line of input contains an integer T denoting the number of test cases. - The first line of each test case consists of a single integer N, the size of the array. - The second line contains N space-separated integers A1, A2, ..., AN. -----Output----- For each test case, output a single line containing one integer, the sum of the minimum values of every subarray of A. Since the output can be very large, return it modulo 10^9 + 7. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ Ai ≤ 10^9 -----Example----- Input: 2 3 1 2 3 4 4 3 2 1 Output: 10 20 -----Explanation----- Example 1: The subarrays of [1, 2, 3] are: [1], [2], [3], [1, 2], [2, 3], [1, 2, 3]. The minimum values for these subarrays are: 1, 2, 3, 1, 2, 1. The sum is 1+2+3+1+2+1 = 10. Example 2: The subarrays of [4, 3, 2, 1] are: [4], [3], [2], [1], [4, 3], [3, 2], [2, 1], [4, 3, 2], [3, 2, 1], [4, 3, 2, 1]. The minimum values for these subarrays are: 4, 3, 2, 1, 3, 2, 1, 2, 1, 1. The sum is 4+3+2+1+3+2+1+2+1+1 = 20.","solution":"def sum_of_subarray_minimums(T, test_cases): MOD = 10**9 + 7 def calculate_subarray_mins(arr): n = len(arr) left = [0] * n right = [0] * n stack = [] # Finding previous less element for i in range(n): while stack and arr[stack[-1]] >= arr[i]: stack.pop() if stack: left[i] = stack[-1] else: left[i] = -1 stack.append(i) stack = [] # Finding next less element for i in range(n - 1, -1, -1): while stack and arr[stack[-1]] > arr[i]: stack.pop() if stack: right[i] = stack[-1] else: right[i] = n stack.append(i) result = 0 for i in range(n): result += arr[i] * (i - left[i]) * (right[i] - i) result %= MOD return result results = [] for t in range(T): N = test_cases[t][0] A = test_cases[t][1] results.append(calculate_subarray_mins(A)) return results"},{"question":"Max works as a software developer, and he has been given the task of optimizing the runtime of a particular function. The function receives a list of integers as input, and returns a modified list based on the following transformation: For each element in the list, replace it with the product of all the other elements in the list. Max has to ensure that his solution is efficient even for large input sizes. Input The first line of input contains a single integer N, representing the number of elements in the list (1 ≤ N ≤ 100,000). The second line of input contains N space-separated integers, representing the elements of the list ( -1,000 ≤ list[i] ≤ 1,000). Output Output a single line containing N space-separated integers, representing the resulting list after applying the transformation. Example Input 4 1 2 3 4 Output 24 12 8 6 Input 5 5 0 2 1 3 Output 0 30 0 0 0 Note In the first example, the transformed list is obtained by calculating the following products: - 2 * 3 * 4 = 24 - 1 * 3 * 4 = 12 - 1 * 2 * 4 = 8 - 1 * 2 * 3 = 6 In the second example, since there is a zero in the list, all products will include that zero except for the position where the zero is initially located, hence producing a list where the product at the position of the zero is the product of all other elements, (5*2*1*3=30) and the rest are zero. Max should take care to implement this function efficiently, avoiding the n² time complexity of naive solutions.","solution":"def transform_list(nums): Given a list of integers, returns a new list such that each element at index i of the new list is the product of all the numbers in the original array except the one at i. n = len(nums) if n == 1: return [0] # If there\'s only one number, the product of all other numbers is zero # Initialize arrays to store the prefix and suffix products prefix_products = [1] * n suffix_products = [1] * n # Calculate prefix products for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * nums[i - 1] # Calculate suffix products for i in range(n - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * nums[i + 1] # Calculate the result by multiplying the prefix and suffix products result = [prefix_products[i] * suffix_products[i] for i in range(n)] return result"},{"question":"Jane has a collection of unique items, each with a specific weight w_{i}. She wants to pack these items into the minimum number of boxes. Each box can hold items with a combined weight of no more than a given maximum weight limit, W. Jane wants to know the minimum number of boxes required to pack all items. -----Input----- The first line contains two space-separated integers n and W (1 ≤ n ≤ 10^5, 1 ≤ W ≤ 10^9). The second line contains n space-separated integers w_{i} (1 ≤ w_{i} ≤ 10^9). -----Output----- Output the minimum number of boxes required to pack all items. If it\'s impossible to pack an item because its weight exceeds W, output -1. -----Examples----- Input 5 10 2 5 4 7 1 Output 2 Input 3 8 9 2 3 Output -1 -----Note----- For the first sample, we can pack the items in two boxes: [7, 2, 1] and [5, 4]. For the second sample, item with weight 9 exceeds the box limit 8, so it\'s impossible to pack.","solution":"from typing import List, Tuple def min_number_of_boxes(n: int, W: int, weights: List[int]) -> int: Return the minimum number of boxes required to pack all items with given weight each box can hold. Return -1 if any item weight exceeds the permissible box weight. # Check if any item exceeds the box weight limit for weight in weights: if weight > W: return -1 # Sort weights in descending order weights.sort(reverse=True) # Use a list to track current weight in each used box boxes = [] for weight in weights: placed = False # Try to place each item in an existing box for i in range(len(boxes)): if boxes[i] + weight <= W: boxes[i] += weight placed = True break # If not placed in any existing box, create a new one if not placed: boxes.append(weight) return len(boxes)"},{"question":"Valera has decided to work on a new algorithm to find the sum of all integers in an array that are divisible by a given integer. Valera has already written the code to read an array of n integers and an integer d, and he needs help to complete the function that will calculate the sum of all elements in the array that are divisible by d. Valera\'s incomplete code is given below. ```python def sum_divisible_by_d(arr, d): total_sum = 0 for num in arr: # Find out if num is divisible by d if ______________: total_sum += num return total_sum # Input reading is handled externally ``` Valera has seen that his code is incomplete and needs your help to finish it. Given an array of integers and an integer d, complete the function `sum_divisible_by_d` that returns the sum of all integers in the array that are divisible by d. If no such elements exist in the array, the function should return 0. Input - The first line of the input contains two integers n and d (1 ≤ n ≤ 100, 1 ≤ d ≤ 1000) — the number of elements in the array and the integer d. - The second line of the input contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 10000) — the elements of the array. Output - Print a single integer — the sum of all elements of the array that are divisible by d. If no elements are divisible by d, print 0. Example Input 5 3 1 2 3 4 6 Output 9 Input 4 5 10 15 20 25 Output 70 Input 3 7 1 2 3 Output 0","solution":"def sum_divisible_by_d(arr, d): total_sum = 0 for num in arr: # Find out if num is divisible by d if num % d == 0: total_sum += num return total_sum"},{"question":"Given an array A of N integers and an integer K, your task is to determine the number of contiguous subarrays for which the product of all elements in the subarray is less than K. ------ Input Format ------ - The first line of input contains a single integer T - the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N - the length of the array A. - The second line of each test case contains N space-separated integers A_{1},A_{2},...,A_{N} representing the array A. - The third line of each test case contains a single integer K. ------ Output Format ------ For each test case, output the number of contiguous subarrays of array A whose product of all elements is less than K. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^{5} 1 ≤ A_{i} ≤ 1000 1 ≤ K ≤ 10^{18} - Sum of N does not exceed 2cdot 10^{5} over all test cases. ------ Sample Input 1 ------ 2 4 10 5 2 6 100 3 1 2 3 0 ------ Sample Output 1 ------ 8 0 ------ Explanation 1 ------ - Test Case 1: The continuous subarrays and their products are: [10] = 10 [10, 5] = 50 [10, 5, 2] = 100 [5] = 5 [5, 2] = 10 [5, 2, 6] = 60 [2] = 2 [2, 6] = 12 [6] = 6 The subarrays that meet the condition product < 100 are: [10], [10, 5], [5], [5, 2], [5, 2, 6], [2], [2, 6], [6] Thus, the number of such subarrays is 8. - Test Case 2: Since the product of any positive integer subarray will always be greater than 0, there are no subarrays with a product less than 0. Thus, the output is 0.","solution":"def count_subarrays_with_product_less_than_k(arr, k): if k <= 1: return 0 count = 0 product = 1 left = 0 for right in range(len(arr)): product *= arr[right] while product >= k and left <= right: product //= arr[left] left += 1 count += right - left + 1 return count def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr, k = test_cases[i] result = count_subarrays_with_product_less_than_k(arr, k) results.append(result) return results"},{"question":"A farmer owns a rectangular field that is divided into a grid of m rows and n columns. Some cells are fertile where crops can be grown, while others are barren where no crops can be grown. The farmer wants to grow the maximum number of contiguous crops in any rectangular block of fertile cells. Your task is to determine the area of the largest contiguous rectangular block of fertile cells. -----Input----- The first line of input contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the field, respectively. The next m lines each contain n characters, where each character is either \'F\' representing a fertile cell or \'B\' representing a barren cell. -----Output----- Print a single integer representing the area of the largest contiguous rectangular block of fertile cells. -----Examples----- Input 4 4 FFFF FFBF FFFF FBFF Output 6 Input 5 6 FFFFFF FFFFBF FFBBFF FFFFFF BBFFFF Output 8 Input 3 3 FBF BFB FBF Output 1 -----Note----- In the first example, the largest block of fertile cells is formed by the submatrix from (1, 1) to (3, 3) excluding the barren cell at (2, 3), having an area of 6. In the second example, the largest block of fertile cells is formed by the submatrix from (4, 2) to (5, 5), having an area of 8. In the third example, the largest block of fertile cells is just a single \'F\' cell, thus the area is 1.","solution":"def max_fertile_area(m, n, field): Returns the area of the largest contiguous rectangular block of fertile cells. # Create a height array to store the height of \'F\' (fertile) cells. height = [0] * n max_area = 0 for i in range(m): for j in range(n): if field[i][j] == \'F\': height[j] += 1 else: height[j] = 0 # Now calculate the max area for the histogram formed by the heights max_area = max(max_area, largest_rectangle_area(height)) return max_area def largest_rectangle_area(heights): Helper function to find the largest rectangle area in a histogram. stack = [] max_area = 0 heights.append(0) # Sentinel value to pop all elements from stack at the end for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) heights.pop() # Remove the sentinel return max_area"},{"question":"You are given a string s of length n consisting of lowercase English letters and a string t of length m consisting of lowercase English letters. You can perform the following operation on t any number of times (even zero times): select any character in t and replace it with any lowercase English letter. Your goal is to determine whether you can convert t into a substring of s using any number of operations. ---Input--- The first line contains an integer q (1 le q le 10^4) — the number of queries. The next 2*q lines contain the descriptions of the queries. Each query consists of: * A string s (1 leq n leq 10^5). * A string t (1 leq m leq 10^3). The sum of lengths of all strings in all queries does not exceed 10^6. ---Output--- For each query, output \\"YES\\" if t can be converted into a substring of s by performing the described operation any number of times, otherwise print \\"NO\\". ---Examples--- Input 4 abacaba cab mississippi sip abcdefgh xyz applepie ppi Output YES YES NO NO ---Note--- In the first query, \\"cab\\" can be modified to match the substring \\"aba\\" in \\"abacaba\\". In the second query, \\"sip\\" is already a substring of \\"mississippi\\". In the third query, \\"xyz\\" cannot be converted into any substring of \\"abcdefgh\\" with any number of operations. In the fourth query, \\"ppi\\" cannot be converted into any substring of \\"applepie\\" with any number of operations.","solution":"def can_convert_to_substring(q, queries): results = [] for i in range(q): s = queries[2 * i] t = queries[2 * i + 1] # Check lengths if len(t) > len(s): results.append(\\"NO\\") continue found = False n, m = len(s), len(t) for j in range(n - m + 1): all_match = True for k in range(m): if s[j + k] == t[k] or t[k] == \'?\': continue all_match = False break if all_match: found = True break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given three sides of a triangle a, b, and c. Determine if a triangle is valid with these side lengths and if valid, calculate the area of the triangle using Heron\'s formula. If the triangle is not valid, print \\"Invalid\\". -----Constraints----- - 1≤a≤100 - 1≤b≤100 - 1≤c≤100 - All input values are integers. -----Input----- The input is given from Standard Input in the following format: a b c -----Output----- If the triangle is valid, print the area of the triangle rounded to 2 decimal places. Otherwise, print \\"Invalid\\". -----Sample Input----- 3 4 5 -----Sample Output----- 6.00 Explanation: The sides form a valid triangle, and its area calculated using Heron\'s formula is 6.00. -----Sample Input----- 1 1 3 -----Sample Output----- Invalid Explanation: The sides do not form a valid triangle because the sum of any two sides is not greater than the third side.","solution":"import math def is_valid_triangle(a, b, c): # Check if sum of any two sides is greater than the third side if a + b > c and a + c > b and b + c > a: return True else: return False def calculate_area(a, b, c): if is_valid_triangle(a, b, c): # Using Heron\'s formula to calculate the area of the triangle s = (a + b + c) / 2 area = math.sqrt(s * (s - a) * (s - b) * (s - c)) return round(area, 2) else: return \\"Invalid\\""},{"question":"Amit taught his friend Bina about arithmetic progressions (AP) and its properties. Bina claims that she understands everything about arithmetic progressions. Amit decides to test Bina\'s knowledge by asking the following question: \\"Given the first term A, the common difference D, and an integer N, can you find the Nth term of the AP and the sum of the first N terms?\\" Bina is unsure how to approach the problem. Can you help Bina by writing a function that calculates the Nth term and the sum of the first N terms of the AP based on the input provided? ----Input---- The first line of the input contains a single integer, T, which denotes the number of test cases. T test cases follow. For each test case, there will be a single line containing three space-separated integers A (the first term), D (the common difference), and N (the number of terms). ----Output---- For each test case, output two space-separated integers: the Nth term of the AP and the sum of the first N terms of the AP. ----Constraints---- - 1 ≤ T ≤ 1000 - -10^9 ≤ A, D ≤ 10^9 - 1 ≤ N ≤ 10^6 ----Example---- Input: 3 1 1 5 2 3 4 -1 -2 3 Output: 5 15 11 26 -5 -9","solution":"def find_ap_properties(T, test_cases): Given the first term A, common difference D, and the number of terms N of an arithmetic progression (AP), the function calculates the Nth term and the sum of the first N terms of the AP for each test case. Parameters: T (int): Number of test cases. test_cases (list of tuples): List of tuples where each tuple contains three integers (A, D, N). Returns: list of tuples: Each tuple contains two integers - the Nth term and the sum of the first N terms of the AP. results = [] for case in test_cases: A, D, N = case Nth_term = A + (N-1) * D sum_of_first_N_terms = (N * (2 * A + (N - 1) * D)) // 2 results.append((Nth_term, sum_of_first_N_terms)) return results"},{"question":"Sarah loves collecting old books, and she has an extensive collection in her home library. Recently, Sarah bought a new bookshelf with a unique design that can only accommodate books of certain widths. Sarah wants to arrange the books on this new shelf such that every book in a specific arrangement satisfies the shelf\'s restrictions. However, to maintain the aesthetics of her collection, Sarah decided to never place two books with the same width next to each other. Given the widths of the books Sarah has and the maximum width the shelf can accommodate, help Sarah by determining the maximum number of books she can place on the shelf without violating any of the restrictions. -----Input----- The first line contains two integers n and w (1 leq n leq 10^4, 1 leq w leq 10^4) — the number of books and the maximum width the shelf can accommodate. The second line contains n integers b_1, b_2, ..., b_n (1 leq b_i leq 10^4) — the widths of the books in Sarah\'s collection. -----Output----- Output a single integer — the maximum number of books Sarah can place on the shelf under the given conditions. -----Examples----- Input 5 10 1 2 3 4 5 Output 5 Input 7 4 5 5 5 2 2 2 3 Output 3 -----Note----- In the first example, Sarah can place all 5 books on the shelf because their widths are all different and do not exceed the maximum width the shelf can accommodate. In the second example, Sarah can only place 3 books: one of width 2, one of width 3, and one of width 1. Any other arrangement would violate the condition of not having two books with the same width next to each other.","solution":"def max_books_on_shelf(n, w, book_widths): Finds the maximum number of books that can be placed on the shelf such that no two books next to each other have the same width. Parameters: n (int): The number of books. w (int): The maximum width the shelf can accommodate. book_widths (list of int): Widths of the books. Returns: int: The maximum number of books that can be arranged on the shelf. # Using a set to track the unique widths that can be accommodated unique_widths = set() # Iterate through book widths, adding unique widths to the set for width in book_widths: if width <= w: unique_widths.add(width) return len(unique_widths)"},{"question":"A restaurant keeps track of its daily earnings in order to better understand its performance. Each day, at the end of the day, the earnings are noted down. The manager is interested in knowing how many days the earnings were higher than the previous day’s earnings. Given an array of integers representing the daily earnings, write a program that outputs the count of days on which the earnings were higher than the previous day. For example, if the earnings over a week are given as [200, 250, 180, 300, 350, 400, 320], the days on which the earnings were higher than the previous day are 2, 4, 5, and 6 (days are considered to be 1-indexed). Input Format The first line contains a single integer N, the number of days. The next line contains N integers representing the daily earnings. Output Format Print a single integer representing the count of days on which the earnings were higher than the previous day. Constraints 1 ≤ N ≤ 1000 0 ≤ earnings ≤ 10000 SAMPLE INPUT 7 200 250 180 300 350 400 320 SAMPLE OUTPUT 4","solution":"def count_higher_earnings_days(earnings): Returns the count of days on which the earnings were higher than the previous day. count = 0 for i in range(1, len(earnings)): if earnings[i] > earnings[i - 1]: count += 1 return count"},{"question":"A sequence of perfectly balanced brackets is called \\"well-formed\\". Given a string containing just the characters `\'(\'`, `\')\'`, `\'{\'`, `\'}\'`, `\'[\'`, and `\']\'`, write a function that determines if the input string is well-formed. A well-formed string must satisfy the following rules: 1. Every opening bracket `\'(\'`, `\'{\'`, `\'[\'` must have a corresponding closing bracket `\')\'`, `\'}\'`, `\']\'` in the correct order. 2. A closing bracket must not appear before its matching opening bracket. Write a function `is_well_formed(s)` that takes a single argument: - `s` (string): a string consisting only of the characters `\'(\'`, `\')\'`, `\'{\'`, `\'}\'`, `\'[\'`, and `\']\'`. The function should return a boolean value (`True` or `False`): - `True` if the string is well-formed. - `False` if the string is not well-formed. For example: ``` is_well_formed(\\"()\\") # Should return True is_well_formed(\\"()[]{}\\") # Should return True is_well_formed(\\"(]\\") # Should return False is_well_formed(\\"([)]\\") # Should return False is_well_formed(\\"{[]}\\") # Should return True ``` Your solution should aim for efficiency, with an optimal time complexity of O(n).","solution":"def is_well_formed(s): Determines if the input string s is well-formed with regards to brackets. :param s: A string consisting of \'(\', \')\', \'{\', \'}\', \'[\' and \']\' :return: True if the string is well-formed, False otherwise stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Given an integer n, your task is to determine whether n is a \\"prime-like\\" number. A number is considered \\"prime-like\\" if it contains exactly three distinct prime factors. -----Input:----- - n — the integer to check if it contains exactly three distinct prime factors. -----Output:----- Return \\"YES\\" if the number is prime-like, otherwise return \\"NO\\". -----Constraints----- - 1 leq n leq 10^6 -----Sample Input:----- 30 -----Sample Output:----- YES -----Sample Input:----- 15 -----Sample Output:----- NO","solution":"def is_prime_like(n): Returns \\"YES\\" if the number n contains exactly three distinct prime factors, otherwise \\"NO\\". def prime_factors(n): i = 2 factors = set() while i * i <= n: if n % i: i += 1 else: n //= i factors.add(i) if n > 1: factors.add(n) return factors primes = prime_factors(n) return \\"YES\\" if len(primes) == 3 else \\"NO\\""},{"question":"Maria loves playing with strings and numbers. She feels that certain strings are more \\"magical\\" than others. To determine the magical property of a string, Maria follows these rules: 1. A string is considered magical if the difference between the ASCII values of any two consecutive characters is at most 1. 2. Maria loves substring operations. Given a string s, a substring s[i:j] is defined as the contiguous sequence of characters from index i to j (inclusive) of the original string. Maria often checks different substrings to see if they are magical. Your task is to help Maria find out if given substrings are magical. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). The first line of each test case consists of a string s of length n (1 le n le 10^5), and an integer q (1 le q le 10^5) — the number of substrings to be checked. The next q lines of each test case contain two integers i and j (1 le i le j le n) — the starting and ending indices (1-based) of the substring Maria wants to check. It is guaranteed that the sum of n across all test cases and the sum of q across all test cases does not exceed 10^5 (sum n, sum q le 10^5). -----Output----- Print q lines for each test case, each containing either \\"Yes\\" if the corresponding substring is magical, or \\"No\\" if it is not. -----Examples----- Input 2 abcdefg 3 1 5 3 7 1 7 zxyab 2 1 3 2 5 Output Yes Yes Yes Yes No -----Note----- Explanation of the first test case: 1. The string is \\"abcdefg\\". 2. The substrings requested are \\"abcde\\", \\"cdefg\\", and \\"abcdefg\\". 3. All substrings consist of consecutive characters with the ASCII value difference at most 1. Explanation of the second test case: 1. The string is \\"zxyab\\". 2. The substrings requested are \\"zxy\\" and \\"xyab\\". 3. The substring \\"zxy\\" is magical as \'z\' (ASCII 122) and \'x\' (ASCII 120) differ by 2 which is not allowed. 4. The substring \\"xyab\\" is not magical as the characters from different groups with difference more than 1.","solution":"def is_magical(s, i, j): Check if the substring s[i:j+1] is magical. for k in range(i, j): if abs(ord(s[k]) - ord(s[k + 1])) > 1: return \\"No\\" return \\"Yes\\" def process_test_cases(t, test_cases): results = [] for case in test_cases: s, queries = case[\'string\'], case[\'queries\'] res = [] for (start, end) in queries: res.append(is_magical(s, start-1, end-1)) results.append(res) return results"},{"question":"Computer networks often use **packet switching** to enable efficient and reliable data transmission. To simulate this in a simplified manner, imagine a network consisting of a single directed graph with n nodes and m edges. Each node represents a router, and each edge represents a possible data link between routers. Data packets are sent from a source node to a destination node, and each link has a certain probability of being reliable. Given the graph\'s structure and the reliability probabilities of the links, we want to estimate the maximum probability of successfully transmitting a packet from a given source node to a given destination node. Write a program to calculate the maximum reliability of a packet\'s successful transmission from the source node to the destination node. Input The first line contains three integers n, m, and k (2 ≤ n ≤ 1000, 1 ≤ m ≤ 2000, 0 ≤ k ≤ 100000). The next m lines each contain three values u, v, p (1 ≤ u, v ≤ n, 0 ≤ p ≤ 1), where u and v represent directed edges between nodes u and v and p is the reliability probability of that edge (inclusive). The last k lines each contain two integers s and t (1 ≤ s, t ≤ n), representing a query where you need to find the maximum reliability from node s to node t. Output For each query, print a single real number — the maximum reliability probability with an absolute or relative error of at most 10^-6. Example Input 4 4 2 1 2 0.5 2 3 0.5 3 4 0.5 4 1 0.5 1 3 1 4 Output 0.125000 0.062500 Explanation The network contains 4 nodes and 4 edges with respective reliability probabilities between them. To find the maximum reliability from node 1 to node 3, the most reliable path is 1 → 2 → 3, with an overall reliability of 0.5 * 0.5 = 0.25. For node 1 to node 4, the most reliable path will be 1 → 2 → 3 → 4, with an overall reliability of 0.5 * 0.5 * 0.5 = 0.125. Note that this is a simplified explanation; your task is to compute these probabilities accurately.","solution":"import heapq def max_reliability(n, m, k, edges, queries): # Create adjacency list graph = {i: [] for i in range(1, n + 1)} for u, v, p in edges: graph[u].append((v, p)) def dijkstra(source, target): # Max heap with initial node having reliability 1 priority_queue = [(-1.0, source)] # Distances dict to store max reliability to reach each node max_reliability = {i: 0 for i in graph} max_reliability[source] = 1.0 while priority_queue: current_reliability, u = heapq.heappop(priority_queue) current_reliability = -current_reliability if u == target: return current_reliability for v, reliability in graph[u]: new_reliability = current_reliability * reliability if new_reliability > max_reliability[v]: max_reliability[v] = new_reliability heapq.heappush(priority_queue, (-new_reliability, v)) return 0 results = [] for s, t in queries: result = dijkstra(s, t) results.append(result) return results"},{"question":"The journey of a package through a logistics company\'s delivery system can be tracked automatically using \\"checkpoints\\". Each checkpoint corresponds to a specific location and time where the package was scanned. The system tracks all the checkpoints and provides the following details: the name of the location and the timestamp at which the scan was done. A package’s journey starts at a source location and ends at a destination location. Sometimes, the package may not arrive at the destination within the expected time due to various reasons, which could be identified by missing checkpoints. Your task is to write a program that tracks the package\'s journey through a given list of checkpoints and determines the total time taken and identifies any missing checkpoints. Each checkpoint is represented by a tuple (location, timestamp), where: - location is a string representing the name of the checkpoint location. - timestamp is an integer denoting the time in minutes from the start of the day. Checkpoints are provided to you in the order they were recorded. If a checkpoint is missing (i.e., the package should pass through a specific checkpoint but it is not in the list), it will be considered as an error in the package tracking system. The challenge is to: 1. Calculate the total travel time of the package from the first to the last recorded checkpoint. 2. Identify any missing checkpoints from the given expected sequence. -----Input----- - The first line contains an integer, n, the number of checkpoints recorded. - The following n lines contain two entries: a string and an integer, representing the location and timestamp. - The last line contains a space-separated string of expected checkpoint locations. All timestamps are unique and represent the order of package scanning. Timestamps and the number of checkpoints n will be between 1 and 1000. -----Output----- - The first line should display the total travel time in minutes from the first to the last recorded checkpoint. - The next line should list all the missing checkpoints in the order they were expected, if there are any. If all expected checkpoints are present, display \\"All checkpoints accounted for\\". -----Examples----- Sample Input: 5 Warehouse 10 Checkpoint_1 30 Checkpoint_3 50 Checkpoint_4 70 Destination 100 Warehouse Checkpoint_1 Checkpoint_2 Checkpoint_3 Checkpoint_4 Destination Sample Output: 90 Checkpoint_2 Sample Input: 3 Start 5 Midway 25 End 45 Start Midway End Sample Output: 40 All checkpoints accounted for","solution":"def track_package(n, checkpoints, expected_checkpoints): recorded_locations = {loc: timestamp for loc, timestamp in checkpoints} total_travel_time = checkpoints[-1][1] - checkpoints[0][1] missing_checkpoints = [loc for loc in expected_checkpoints if loc not in recorded_locations] result_time = total_travel_time result_missing = \\"All checkpoints accounted for\\" if not missing_checkpoints else \' \'.join(missing_checkpoints) return result_time, result_missing def main(): import sys input = sys.stdin.read data = input().splitlines() n = int(data[0]) checkpoints = [] for i in range(1, n + 1): loc, time = data[i].split() checkpoints.append((loc, int(time))) expected_checkpoints = data[n + 1].split() result_time, result_missing = track_package(n, checkpoints, expected_checkpoints) print(result_time) print(result_missing)"},{"question":"In a distant future, on an uncharted island, there is a massive grid of treasure chests. Each treasure chest is located at specific coordinates, and each can hold a varying amount of gold and items. Treasure hunters have to answer queries related to the distribution of gold and items in the grid within specified ranges. You are given a grid of treasures with dimensions n x m. Each cell in the grid (i, j) contains two values: g(i, j) representing the amount of gold and i(i, j) representing the number of items. You need to process q queries where each query specifies a rectangular sub-grid and asks for the sum of gold and number of items in that sub-grid. Input The first line contains three integers n, m, and q (1≤ n,m≤ 500, 1≤ q≤ 10^4) — the dimensions of the grid and the number of queries, respectively. Each of the next n lines contains m pairs of integers g(i, j) and i(i, j). Each of the next q lines describes a query with four integers r1, c1, r2, c2 (1≤ r1≤ r2≤ n, 1≤ c1≤ c2≤ m) — the top-left and bottom-right coordinates of the rectangular sub-grid (inclusive). Output For each query, print two integers: the sum of gold and the total number of items in the specified sub-grid. Example Input 3 3 2 1 5 2 3 3 7 4 2 5 1 6 4 7 3 8 2 9 5 1 1 2 2 2 2 3 3 Output 12 10 18 17 Note In the first query, the sub-grid from (1,1) to (2,2) includes cells (1,1), (1,2), (2,1), and (2,2). The sum of gold is 1+2+4+5=12, and the total number of items is 5+3+2+6=10. In the second query, the sub-grid from (2,2) to (3,3) includes cells (2,2), (2,3), (3,2), and (3,3). The sum of gold is 5+1+8+2=18, and the total number of items is 6+4+9+5=24. Your task is to write a program that efficiently processes these queries and provides the required sum of gold and total number of items for each sub-grid.","solution":"def preprocess(grid, n, m): gold_prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] items_prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): gold_prefix_sum[i][j] = gold_prefix_sum[i - 1][j] + gold_prefix_sum[i][j - 1] - gold_prefix_sum[i - 1][j - 1] + grid[i - 1][j - 1][0] items_prefix_sum[i][j] = items_prefix_sum[i - 1][j] + items_prefix_sum[i][j - 1] - items_prefix_sum[i - 1][j - 1] + grid[i - 1][j - 1][1] return gold_prefix_sum, items_prefix_sum def query_sums(gold_prefix_sum, items_prefix_sum, r1, c1, r2, c2): gold_sum = gold_prefix_sum[r2][c2] - gold_prefix_sum[r1 - 1][c2] - gold_prefix_sum[r2][c1 - 1] + gold_prefix_sum[r1 - 1][c1 - 1] items_sum = items_prefix_sum[r2][c2] - items_prefix_sum[r1 - 1][c2] - items_prefix_sum[r2][c1 - 1] + items_prefix_sum[r1 - 1][c1 - 1] return gold_sum, items_sum def process_treasure_queries(n, m, q, treasure_grid, queries): gold_prefix_sum, items_prefix_sum = preprocess(treasure_grid, n, m) results = [] for query in queries: r1, c1, r2, c2 = query gold_sum, items_sum = query_sums(gold_prefix_sum, items_prefix_sum, r1, c1, r2, c2) results.append((gold_sum, items_sum)) return results"},{"question":"A word is called an anagram of another word if it uses the same letters in the same frequency but rearranged. Given two strings, determine whether one is an anagram of the other. -----Constraints----- - The strings contain only lowercase alphabets. - 1 ≤ length of both strings ≤ 10^5 - The strings might have different lengths. -----Input----- Input is given from Standard Input in the following format: String1 String2 -----Output----- Print \\"Yes\\" if one string is an anagram of the other; print \\"No\\" otherwise. -----Sample Input----- listen silent -----Sample Output----- Yes Since both \\"listen\\" and \\"silent\\" contain the same letters with the same frequency, they are anagrams.","solution":"def are_anagrams(str1, str2): Determines if two strings are anagrams of each other. Args: str1 (str): The first string. str2 (str): The second string. Returns: str: \\"Yes\\" if the strings are anagrams, otherwise \\"No\\". # Early exit if lengths are not the same if len(str1) != len(str2): return \\"No\\" # Count frequencies of each character in both strings from collections import Counter return \\"Yes\\" if Counter(str1) == Counter(str2) else \\"No\\""},{"question":"Alyssa loves arranging her collection of books on a shelf. She has a bookshelf containing `n` books, each with a certain height. Her goal is to rearrange the books so that the shelf looks aesthetically pleasing. A shelf is considered aesthetically pleasing if the books are arranged in a non-decreasing order of their heights. To achieve this, Alyssa can perform any number of operations. In one operation, she can choose a contiguous subarray of books and reverse their order. Alyssa is curious to find out the minimum number of operations needed to arrange the books in non-decreasing order. Write a program to help Alyssa determine the minimum number of operations required. -----Input----- The first line contains a single integer `n` (1 ≤ n ≤ 300), the number of books on the shelf. The second line contains `n` integers `h1, h2, ..., hn` (1 ≤ hi ≤ 1000), where `hi` is the height of the i-th book. -----Output----- Print the minimum number of operations Alyssa needs to perform to arrange the books in non-decreasing order of their heights. -----Examples----- Input: 5 3 2 1 4 5 Output: 1 Input: 6 4 3 1 2 5 6 Output: 2 Input: 4 1 2 3 4 Output: 0 -----Note----- In the first example, Alyssa can select the subarray [3, 2, 1] and reverse it to get [1, 2, 3, 4, 5] using only one operation. In the second example, Alyssa can first select the subarray [4, 3, 1, 2] and reverse it to get [2, 1, 3, 4, 5, 6], and then reverse the subarray [2, 1] to get [1, 2, 3, 4, 5, 6]. In the third example, the books are already in non-decreasing order, so no operations are necessary.","solution":"def min_operations_to_sort_books(n, heights): Returns the minimum number of operations needed to sort the books in non-decreasing order. sorted_heights = sorted(heights) if heights == sorted_heights: return 0 # Identify the segments that are out of order start, end = 0, n - 1 while start < n and heights[start] == sorted_heights[start]: start += 1 while end >= 0 and heights[end] == sorted_heights[end]: end -= 1 if heights[start:end + 1] == sorted_heights[start:end + 1][::-1]: return 1 return 2"},{"question":"Task The function `encode_message` takes two parameters: a string `message` and an integer `shift`. The function should encode the message using a Caesar cipher with the given shift value and return the encoded message. The Caesar cipher is a type of substitution cipher in which each letter in the plaintext is shifted by a fixed number of positions down the alphabet. If the shift takes you past the end of the alphabet, just rotate back to the start. Capital letters should remain capitalized, and lowercase letters should remain lowercase. Non-alphabetic characters should remain unchanged. **Function Signature** `def encode_message(message: str, shift: int) -> str:` **Input** - `message` (1 <= len(message) <= 100): a string consisting of uppercase/lowercase letters and possibly special characters (e.g. punctuation marks, spaces, etc.). - `shift` (0 <= shift <= 25): an integer representing the number of positions each letter in the message is shifted. **Output** - Return a string representing the encoded message. **Example** ```python assert encode_message(\\"Hello, World!\\", 3) == \\"Khoor, Zruog!\\" assert encode_message(\\"abcXYZ\\", 1) == \\"bcdYZA\\" assert encode_message(\\"Attack at dawn!\\", 5) == \\"Fyyfhp fy ifbs!\\" ``` **Notes** - The function should retain the case of each letter. - Non-alphabetic characters must remain unchanged. - The function only needs to handle English alphabet characters.","solution":"def encode_message(message: str, shift: int) -> str: def shift_char(c, shift): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + shift) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + shift) % 26 + ord(\'A\')) else: return c return \'\'.join(shift_char(c, shift) for c in message)"},{"question":"Alice and Bob are playing a game on a 2D grid. The grid consists of M rows and N columns, where each cell of the grid contains an integer value. Alice starts at the top-left corner of the grid (cell (0, 0)) and wants to reach the bottom-right corner (cell (M-1, N-1)). Move from any cell to adjacent cells in one of the four possible directions: up, down, left, and right. The value of each cell represents the amount of coins in that cell. However, Alice has a peculiar way of playing. She will move in such a way that she collects an odd number of coins in total. Bob challenges Alice to find such a path or prove that it is impossible. Write a program to determine if Alice can collect an odd number of coins by the time she reaches the bottom-right corner. If it\'s possible, print \\"Yes\\". Otherwise, print \\"No\\". Input The first line contains two integers M and N (1 ≤ M, N ≤ 1000) representing the number of rows and columns in the grid. Each of the next M lines contains N integers (0 ≤ grid[i][j] ≤ 1000), where grid[i][j] represents the number of coins in the (i, j) cell. Output Print “Yes” if it is possible for Alice to collect an odd number of coins, otherwise print “No”. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output Yes Input 2 2 2 4 6 8 Output No Note In the first sample, one possible path would be (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2), resulting in coins collected being 1 + 2 + 5 + 8 + 9 = 25, which is odd. In the second sample, no matter which path Alice takes, the sum of coins will always be even, so the result is \\"No\\".","solution":"def can_collect_odd_coins(grid): Determines if Alice can collect an odd number of coins by the time she reaches the bottom-right corner. M = len(grid) N = len(grid[0]) # Sum all the coins in the grid for precursory odd/even check. total_coins = sum(sum(row) for row in grid) if total_coins % 2 == 1: return \\"Yes\\" return \\"No\\""},{"question":"A company has hired you to test an encryption algorithm. Their algorithm works as follows: For a given string, it replaces each character in the string by the character that is the same distance from the end of the alphabet as the original character is from the beginning. For example, the character \'a\' (distance 0 from the beginning) is replaced by \'z\' (distance 0 from the end), \'b\' (distance 1 from the beginning) is replaced by \'y\' (distance 1 from the end), and so on. Your task is to write a program that takes a string and returns the encrypted version of that string using the described algorithm. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. Output Print the encrypted string. Examples Input abcz Output zyxb Input hello Output svool Note In the first example, the characters \'a\', \'b\', \'c\', and \'z\' are replaced by \'z\', \'y\', \'x\', and \'a\', respectively. In the second example, the characters \'h\', \'e\', \'l\', \'l\', and \'o\' are replaced by \'s\', \'v\', \'o\', \'o\', and \'l\', respectively.","solution":"def encrypt(s): Encrypts the given string using the described algorithm. Parameters: s (str): The input string consisting of lowercase English letters. Returns: str: The encrypted string. # Mapping each letter to its \'mirrored\' counterpart encrypted = \'\'.join(chr(219 - ord(char)) for char in s) return encrypted"},{"question":"Given a string S consisting of lowercase and uppercase alphabet characters. Your task is to calculate the frequency of the most occurring character in the string. Note that the string can contain both uppercase and lowercase letters, and they will be considered distinct characters. Example 1: Input: S = \\"aabBBcc\\" Output: 2 Explanation: The most frequently occurring characters are \'a\' and \'B\', both occurring 2 times. Example 2: Input: S = \\"xyzXYZ\\" Output: 1 Explanation: All characters in the string occur only once. Your Task: You do not need to read input or print anything. Your task is to complete the function mostFrequentChar() which takes a string S as input and returns an integer representing the frequency of the most occurring character. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) [assuming a fixed character set of 52 alphabetic characters] Constraints: 1 <= |S| <= 10^5 S contains only lowercase and uppercase English alphabet characters.","solution":"from collections import Counter def mostFrequentChar(S): Returns the frequency of the most occurring character in the string S. # Count the frequency of each character in the string char_count = Counter(S) # Find and return the maximum frequency return max(char_count.values())"},{"question":"Find the longest contiguous subarray with equal number of 1\'s and 0\'s. Given a binary array, you need to find the length of the longest contiguous subarray that contains an equal number of 1\'s and 0\'s. Input Format: - The first line of the input will contain an integer T, denoting the number of test cases. - Each of the next T lines represents a test case and will contain a binary array separated by space. Output Format: - For each test case, output the length of the longest contiguous subarray with equal number of 1\'s and 0\'s. Constraints: 1 ≤ T ≤ 10 1 ≤ Length of binary array ≤ 10^5 The binary array contains only 0\'s and 1\'s. SAMPLE INPUT 3 1 0 1 1 0 1 1 1 1 1 0 0 1 1 0 1 0 SAMPLE OUTPUT 4 0 6 Explanation: In the first sample, the longest subarray with equal number of 1\'s and 0\'s is [0, 1, 1, 0], which has length 4. In the second sample, there is no subarray that contains both 1\'s and 0\'s equally. In the third sample, the entire array [0, 0, 1, 1, 0, 1, 0] itself is the longest subarray with equal number of 1\'s and 0\'s, which has a length of 6.","solution":"def find_longest_subarray_with_equal_ones_zeros(arr): Finds the length of the longest contiguous subarray with equal number of 1\'s and 0\'s. count_map = {} count = 0 max_length = 0 # Initialize the map with count 0 at index -1 to take care of cases where subarray starts from index 0. count_map[0] = -1 for index, num in enumerate(arr): # Increment/decrement the count based on the value of num if num == 0: count -= 1 else: count += 1 if count in count_map: max_length = max(max_length, index - count_map[count]) else: count_map[count] = index return max_length def process_input(test_cases): results = [] for test_case in test_cases: binary_array = list(map(int, test_case.split())) results.append(find_longest_subarray_with_equal_ones_zeros(binary_array)) return results"},{"question":"You are given a string containing digits from \'2\' to \'9\' inclusive. Each digit maps to a set of letters as per the telephone buttons (2 maps to \\"abc\\", 3 maps to \\"def\\", etc.). Write a function that returns all possible letter combinations that the number could represent. Return the combinations in lexicographical order. ```python letter_combinations(\'23\') => [\'ad\', \'ae\', \'af\', \'bd\', \'be\', \'bf\', \'cd\', \'ce\', \'cf\'] letter_combinations(\'7\') => [\'p\', \'q\', \'r\', \'s\'] letter_combinations(\'\') => [] ``` *Note: The ordering of the combinations should be sorted lexicographically (i.e., if the combinations are being generated correctly, they should already be in this order).*","solution":"from itertools import product def letter_combinations(digits): Given a string containing digits from \'2\' to \'9\', this function returns all possible letter combinations that the number could represent. if not digits: return [] digit_to_char = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } # Generate lists of characters for each digit in the input char_lists = [digit_to_char[digit] for digit in digits] # Use itertools.product to create combinations of letters combinations = [\'\'.join(chars) for chars in product(*char_lists)] return combinations"},{"question":"Given a binary string s of length n, for each contiguous subsequence, determine if it contains more \'1\'s than \'0\'s. Print \\"YES\\" if it\'s possible to find such subsequence, otherwise print \\"NO\\". Constraints * 1 leq n leq 10^5 * s consists of only \'0\'s and \'1\'s Input Input is given from Standard Input in the following format: n s Output Print \\"YES\\" if there exists a contiguous subsequence with more \'1\'s than \'0\'s, otherwise print \\"NO\\". Examples Input 5 11001 Output YES Input 4 0000 Output NO Input 3 101 Output YES Input 2 00 Output NO","solution":"def has_more_ones_than_zeros(n, s): Determines if there exists a contiguous subsequence in a binary string that contains more \'1\'s than \'0\'s. Parameters: - n: The length of the binary string. - s: The binary string. Returns: - \\"YES\\" if such subsequence exists, otherwise \\"NO\\". count_ones = s.count(\'1\') if count_ones > n // 2: return \\"YES\\" return \\"NO\\" # Example Usage: # n = 5 # s = \\"11001\\" # print(has_more_ones_than_zeros(n, s)) # Output: \\"YES\\" # n = 4 # s = \\"0000\\" # print(has_more_ones_than_zeros(n, s)) # Output: \\"NO\\""},{"question":"Anna has a collection of beautiful necklaces, where each necklace is composed of a sequence of beads of various colors. She often wears these necklaces, and while doing so, she noticed something interesting. Each necklace forms a cyclic sequence, meaning the end of the necklace is connected to the beginning, forming a loop. Anna wants to identify all the unique sequences within these necklaces, considering the cyclic nature. For example, the sequences \\"abc\\", \\"bca\\", and \\"cab\\" are all the same in her view since rotating the beads forms the same loop. Help Anna determine the number of unique necklaces in her collection. Input The first line of input contains an integer n (1 ≤ n ≤ 100 000) — the number of necklaces in Anna\'s collection. Each of the next n lines contains a string s (1 ≤ |s| ≤ 100) — the sequence of beads in each necklace. Each string consists of lowercase English letters only. Output Print a single integer — the number of unique necklaces in Anna\'s collection. Example Input 5 abc bca cab xyz yyy Output 3 Explanation The sequences \\"abc\\", \\"bca\\", and \\"cab\\" are considered the same necklace because one can be rotated to match another. \\"xyz\\" and \\"yyy\\" are distinct necklaces. Thus, there are 3 unique necklaces in total.","solution":"def rotate_string(s): Returns all cyclic rotations of the string \'s\'. return [s[i:] + s[:i] for i in range(len(s))] def canonical_form(s): Returns the canonical form of the string \'s\' by finding the lexicographically smallest rotation of \'s\'. rotations = rotate_string(s) return min(rotations) def count_unique_necklaces(n, necklaces): Returns the number of unique cyclic sequences in the list of necklaces. unique_forms = set() for necklace in necklaces: canonical = canonical_form(necklace) unique_forms.add(canonical) return len(unique_forms)"},{"question":"Given a list of 2D coordinate points, write a program to find and print the point that is closest to the origin (0, 0). If there are multiple points that are equally close to the origin, output all such points. The distance between two points (x1, y1) and (x2, y2) is calculated using the Euclidean distance formula: [ text{distance} = sqrt{(x2 - x1)^2 + (y2 - y1)^2} ] Input Format The first line contains a single integer, ( n ), representing the number of points. Each of the next ( n ) lines contains two space-separated integers ( x_i ) and ( y_i ), representing the coordinates of the ( i^{th} ) point. Constraints [ 1 leq n leq 100 ] [ -100 leq x_i, y_i leq 100 ] Output Format Print the coordinates of the point(s) closest to the origin. Each coordinate pair should be printed on a new line. Sample Input 4 1 2 -2 -1 3 4 2 1 Sample Output 1 2 2 1 Explanation The distance from (0, 0) to (1, 2) is: [ sqrt{1^2 + 2^2} = sqrt{5} ] The distance from (0, 0) to (-2, -1) is: [ sqrt{(-2)^2 + (-1)^2} = sqrt{5} ] The distance from (0, 0) to (3, 4) is: [ sqrt{3^2 + 4^2} = sqrt{25} ] The distance from (0, 0) to (2, 1) is: [ sqrt{2^2 + 1^2} = sqrt{5} ] Here, points (1, 2) and (2, 1) are both at a distance (sqrt{5}) from the origin, which is the minimum distance, so we print both points.","solution":"import math def closest_points_to_origin(points): Given a list of 2D coordinate points, returns the point(s) that are closest to the origin (0, 0). :param points: List of tuples, where each tuple represents a point (x, y) :return: List of tuples, the point(s) closest to the origin min_distance = float(\'inf\') closest_points = [] for x, y in points: distance = math.sqrt(x ** 2 + y ** 2) if distance < min_distance: min_distance = distance closest_points = [(x, y)] elif distance == min_distance: closest_points.append((x, y)) return closest_points # Example usage if __name__ == \\"__main__\\": points = [(1, 2), (-2, -1), (3, 4), (2, 1)] result = closest_points_to_origin(points) for point in result: print(point)"},{"question":"You are given an array b of m integers. You are also given p queries of three types: 1. Increment the j-th element in the array by integer y. 2. Multiply each element in the array by integer y. 3. Find the maximum element in the array. After performing each query you have to output either the updated array or the maximum element after that query. -----Input----- The first line contains two integers m and p (1 le m, p le 100,000) — the number of elements in the array and the number of queries, respectively. The second line contains m integers b_1, ldots, b_m (1 le b_i le 10^9) — elements of the array b. Each of the following p lines contains a description of the corresponding query. Description begins with integer t (t in {1, 2, 3}) which denotes a type of the query: If t = 1, then two integers j and y follow (1 le j le m, 1 le y le 10^9) — position of the element to be incremented and the value to be added. If t = 2, then integer y follows (1 le y le 10^6) — the value with which each element is multiplied. If t = 3, no more integers follow — this query requests the maximum element in the array. -----Output----- Print the result after performing each query. If t = 1 or t = 2, print the updated array as space-separated integers in a single line. If t = 3, print a single integer representing the maximum value in the array. -----Examples----- Input 4 5 1 3 2 4 1 2 3 2 2 3 1 4 5 3 Output 1 6 2 4 2 12 4 8 12 2 12 4 13 13 -----Note----- Consider array from the example and the result of performing each query: Initial array is [1, 3, 2, 4]. After performing the first query, array equals to [1, 6, 2, 4]. After performing the second query, array equals to [2, 12, 4, 8]. After performing the third query, the maximum element in the array is 12. After performing the fourth query, array equals to [2, 12, 4, 13]. After performing the fifth query, the maximum element in the array is 13.","solution":"def perform_queries(m, p, b, queries): outputs = [] for query in queries: if query[0] == 1: j, y = query[1], query[2] b[j-1] += y outputs.append(\\" \\".join(map(str, b))) elif query[0] == 2: y = query[1] b = [bi * y for bi in b] outputs.append(\\" \\".join(map(str, b))) elif query[0] == 3: outputs.append(str(max(b))) return outputs"},{"question":"You are given an array of N positive integers and Q queries. Each query consists of two integers L and R, and you need to calculate the GCD (Greatest Common Divisor) of the elements in the subarray from index L to R (inclusive). The GCD of a sequence of numbers is the largest positive integer that divides all the numbers in the sequence. Input The first line contains an integer N, representing the size of the array. The second line contains N space-separated positive integers representing the array elements. The third line contains an integer Q, representing the number of queries. The following Q lines each contain two space-separated integers L and R, representing the indices (1-based) of the subarray for which you need to compute the GCD. Output For each query, output the GCD of the elements in the specified subarray. Constraints 1 ≤ N, Q ≤ 10^5 1 ≤ array elements ≤ 10^6 1 ≤ L ≤ R ≤ N SAMPLE INPUT 5 12 15 18 24 30 3 1 3 2 4 1 5 SAMPLE OUTPUT 3 3 3","solution":"import math def gcd_of_subarray(array, queries): result = [] for L, R in queries: subarray = array[L-1:R] gcd_result = subarray[0] for num in subarray[1:]: gcd_result = math.gcd(gcd_result, num) if gcd_result == 1: # Early stopping if GCD is 1 break result.append(gcd_result) return result"},{"question":"Rosie is a digital garden enthusiast who wants to automate her garden\'s water-sprinkling system. The system uses data from soil moisture sensors, which return a sequence of integers representing the moisture levels of different sections of the garden. Rosie wants the system to activate sprinklers in sections where the moisture level is below a certain threshold. Write a program that processes this data and outputs the sections that need watering. -----Input----- The first line of input contains an integer T (number of test cases). The first line of each test case contains an integer N (number of sections) and an integer M (moisture level threshold). The second line contains N integers representing the moisture levels of different sections. -----Output----- For each test case, output a space-separated list of section indices (0-based) that need watering. If no sections need watering, output \\"None\\". -----Example----- Input: 2 5 30 40 20 35 25 45 4 50 55 60 45 50 Output: 1 3 2","solution":"def sections_to_water(T, test_cases): This function takes the number of test cases and a list of test cases. Each test case is a tuple with the number of sections, moisture level threshold, and the list of moisture levels in those sections. It returns a list of strings where each string represents the section indices that need watering for the respective test case. results = [] for case in test_cases: N, M, moisture_levels = case sections = [str(i) for i, level in enumerate(moisture_levels) if level < M] results.append(\\" \\".join(sections) if sections else \\"None\\") return results"},{"question":"Given a 2D grid of integers where -1 represents an obstacle and any non-negative integer represents a position you can step on, write a program to find the minimum distance from the top-left corner to the bottom-right corner of the grid. You can only move up, down, left, or right at each step. If there is no valid path, return -1. Example 1: Input: [[0, 0, 0], [0, -1, 0], [0, 0, 0]] Output: 4 Explanation: The shortest path is to move right -> right -> down -> down. Example 2: Input: [[0, -1], [-1, 0]] Output: -1 Explanation: There is no valid path from the top-left corner to the bottom-right corner. Notes: - The grid dimensions are at least 1x1 and at most 100x100. - The input grid is given as a list of lists in python, where grid[i][j] represents the element at row i and column j.","solution":"from collections import deque def min_distance(grid): Returns the minimum distance from the top-left corner to the bottom-right corner in a 2D grid, or -1 if no valid path exists. rows, cols = len(grid), len(grid[0]) if grid[0][0] == -1 or grid[rows-1][cols-1] == -1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == rows-1 and c == cols-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] != -1 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1 # Example usage: # grid = [[0, 0, 0], [0, -1, 0], [0, 0, 0]] # print(min_distance(grid)) # Output: 4"},{"question":"HELP! Emily has been given the task to organize the company\'s employee data. She needs to filter out inactive employees and sort the list of active employees by their employee ID in ascending order. Write a function that takes a list of dictionaries, where each dictionary represents an employee with keys \\"name\\", \\"employee_id\\", and \\"is_active\\". The function should return a list of dictionaries for active employees only, sorted by their \\"employee_id\\". Example Input: ```python [ {\\"name\\": \\"John Doe\\", \\"employee_id\\": 3, \\"is_active\\": False}, {\\"name\\": \\"Jane Smith\\", \\"employee_id\\": 1, \\"is_active\\": True}, {\\"name\\": \\"Alice Brown\\", \\"employee_id\\": 2, \\"is_active\\": True} ] ``` Example Output: ```python [ {\\"name\\": \\"Jane Smith\\", \\"employee_id\\": 1, \\"is_active\\": True}, {\\"name\\": \\"Alice Brown\\", \\"employee_id\\": 2, \\"is_active\\": True} ] ```","solution":"def filter_and_sort_employees(employees): Filters out inactive employees and sorts the list of active employees by their employee ID. Parameters: employees (list of dict): The list of employees. Returns: list of dict: A list of active employees sorted by their employee ID. active_employees = [employee for employee in employees if employee[\'is_active\']] active_employees_sorted = sorted(active_employees, key=lambda x: x[\'employee_id\']) return active_employees_sorted"},{"question":"You are given a grid of size `n x n` filled with integers. You need to find the maximum sum of the elements located in any \\"hourglass\\" shape in the grid. An hourglass in a grid is defined as: ``` a b c d e f g ``` Given the constraints of the problem, the dimensions of the grid will always be sufficient to fit at least one hourglass. Input The first line contains a single integer `n` (3 ≤ n ≤ 20) representing the size of the grid. The next `n` lines contain `n` space-separated integers each representing the grid elements. Output Output a single integer, the maximum sum of the grid\'s hourglass shapes. Examples Input ``` 4 1 1 1 0 0 1 0 0 1 1 1 0 0 0 0 0 ``` Output ``` 7 ``` Note In the provided example, the grid looks like: ``` 1 1 1 0 0 1 0 0 1 1 1 0 0 0 0 0 ``` The hourglass shapes and their sums are: ``` 1 1 1 1 1 0 1 0 1 1 1 1 1 0 => 1+1+1+1+1+1+1 = 7 => 1+1+0+0+0+1+0 = 3 0 1 0 1 0 0 0 => 0+1+0+1+0+0+0 = 2 And so on. The maximum sum of an hourglass in this example is 7. ``` Additional Context: - The grid contains only integers, and can also include negative numbers. - Handling edge cases where all numbers might be negative or zero is defacto lower boundary testing. - Make sure to consider all possible hourglass shapes within the grid of size `n x n`.","solution":"def max_hourglass_sum(grid): Returns the maximum hourglass sum in a given n x n grid. An hourglass shape is defined as: a b c d e f g n = len(grid) max_sum = float(\'-inf\') for i in range(n - 2): for j in range(n - 2): # Sum for the current hourglass top = grid[i][j] + grid[i][j+1] + grid[i][j+2] mid = grid[i+1][j+1] bot = grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2] hourglass_sum = top + mid + bot if hourglass_sum > max_sum: max_sum = hourglass_sum return max_sum"},{"question":"You are given a string consisting of lowercase English letters. You need to determine the lexicographically smallest string that can be obtained by reversing exactly one substring (possibly the entire string or the empty substring) of the given string. The reversed substring should be a contiguous part of the string. For example, if the input string is `acb`, we can reverse the substring `cb` to get the string `abc`, which is the smallest possible string we can obtain. -----Input----- The first line of the input contains a single integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 100) consisting of lowercase English letters. -----Output----- For each test case, output the lexicographically smallest string that can be obtained by reversing exactly one substring of the given string. -----Examples----- Input 3 acb aab bab Output abc aab abb -----Note----- In the first example, reversing the substring `cb` results in the lexicographically smallest string `abc`. In the second example, the string `aab` is already the smallest possible string, so reversing any part of it doesn\'t change the string. In the third example, reversing the substring `ab` gives us the smallest possible string `abb`.","solution":"def smallest_string_by_reversing_substring(t, test_cases): For each input string, return the lexicographically smallest string by reversing exactly one substring. Parameters: t (int): number of test cases. test_cases (list of str): list of strings to process. Returns: list of str: list of results for each test case. results = [] for s in test_cases: n = len(s) smallest = s for i in range(n): for j in range(i+1, n+1): reversed_substring = s[:i] + s[i:j][::-1] + s[j:] if reversed_substring < smallest: smallest = reversed_substring results.append(smallest) return results"},{"question":"In a large mansion, there are several rooms. Each room has a certain amount of gold coins stored in it. You are given the information about the mansion\'s layout in the form of a binary matrix where a cell value of \'1\' indicates that there is a door connected between two rooms, and a cell value of \'0\' indicates there is no direct door. Additionally, you are given an array of integers where the value at each index represents the number of gold coins in the corresponding room. Your task is to write a function that finds the maximum total value of gold coins that can be collected from any connected group of rooms in the mansion. Two rooms are considered part of the same group if there is a path of doors directly or indirectly connecting them. -----Input----- - The first line of input contains a single integer n (2 leq n leq 50), the number of rooms in the mansion. - The next n lines each contain n integers forming the binary matrix representing the layout of the mansion. - The final line contains n integers representing the number of gold coins in each room. -----Output----- - Output a single integer representing the maximum total value of gold coins that can be collected from any connected group of rooms. -----Example----- Sample Input 1: 4 0 1 0 0 1 0 1 0 0 1 0 0 0 0 0 0 10 20 30 40 Sample Output 1: 60 Sample Input 2: 3 0 1 0 1 0 1 0 1 0 5 10 15 Sample Output 2: 30","solution":"def max_gold_coins(n, matrix, coins): def dfs(room, visited): visited.add(room) total = coins[room] for next_room in range(n): if matrix[room][next_room] == 1 and next_room not in visited: total += dfs(next_room, visited) return total max_gold = 0 visited = set() for i in range(n): if i not in visited: max_gold = max(max_gold, dfs(i, visited)) return max_gold"},{"question":"You are given an array of N integers A_1, A_2, ..., A_N. You are allowed to perform the following operation any number of times: - Select two indices i and j (1 ≤ i, j ≤ N, i ≠ j) and add A_j to A_i. Determine the minimum number of operations required to make all elements in the array equal. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ A_i ≤ 100 -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print the minimum number of operations required to make all elements equal. -----Sample Input----- 4 1 2 3 4 -----Sample Output----- 3 Explanation: The sequence of operations to make all elements equal can be: 1. Add A_1 to A_2 -> [1, 3, 3, 4] 2. Add A_1 to A_3 -> [1, 3, 4, 7] 3. Add A_1 to A_4 -> [1, 3, 4, 10] At this point, one can see that in 3 steps we might need to equal another number by choosing wisely and making all numbers equal with similar possible sequences.","solution":"def min_operations_to_equal_elements(N, A): Determine the minimum number of operations required to make all elements in the array equal. Parameter: N (int): The number of elements in the array A (list): A list of integers Returns: int: Minimum number of operations required # To make all elements equal, we can count the frequency of each element from collections import Counter frequency = Counter(A) # The most frequent element in the array is the one we should aim to make all other elements equal to max_frequency = max(frequency.values()) # The number of operations needed to make all elements equal to the most frequent element return N - max_frequency"},{"question":"You are given two strings, s and t, both of length n. You can convert string s into string t using some number of operations. In each operation, you can pick any two different indices i and j (1 ≤ i, j ≤ n), and swap the characters s[i] and s[j]. Your task is to determine the minimum number of operations required to convert string s into string t. If it is impossible to convert string s into string t, output -1. Input The first line contains an integer n (1 ≤ n ≤ 100) — the length of the strings s and t. The second line contains a string s of length n. The third line contains a string t of length n. Output Print the minimum number of operations required to convert string s into string t, or -1 if it is impossible. Examples Input 4 abcd dcba Output 2 Input 5 aabbc ababc Output 1 Input 3 abc def Output -1 Note In the first example, s can be converted into t by the following operations: 1. Swap s[1] and s[4], changing s from \\"abcd\\" to \\"dbca\\". 2. Swap s[2] and s[3], changing s from \\"dbca\\" to \\"dcba\\". In the second example, s can be converted into t by swapping s[4] and s[5] exactly once. In the third example, it is impossible to convert s into t.","solution":"def min_operations_to_convert(n, s, t): Returns the minimum number of operations required to convert string s into string t or -1 if it is impossible. # Check if s can be converted to t by comparing sorted versions if sorted(s) != sorted(t): return -1 # Count mismatch positions mismatch_positions = [] for i in range(n): if s[i] != t[i]: mismatch_positions.append(i) # Return half of the number of mismatch positions since each swap fixes two positions return len(mismatch_positions) // 2"},{"question":"In an ancient magical kingdom, there is a library that contains an infinite number of books, indexed sequentially by positive integers starting from 1. Each book is enchanted with a magic number, defined as follows: - The magic number of book i (considering 1-based indexing) equals the number of unique prime factors of i. The kingdom\'s wizard has been given `q` tasks, where each task corresponds to a range of books and asks for the sum of the magic numbers of all books within that range inclusive. The wizard is busy with other magical duties and needs your help to compute these sums. Input The first line contains an integer `q` (1 ≤ q ≤ 10^5) — the number of tasks. Each of the next `q` lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ 10^6) — the range of book indices for each task. Output Output `q` lines. The `i-th` line should contain the sum of the magic numbers of books from index `l` to index `r` inclusive, computed for the `i-th` task. Example Input 4 1 1 2 4 10 15 1000 1002 Output 0 3 10 6 Explanation In the first query, the range is [1, 1]. The only book in this range is book 1, which has 0 unique prime factors (since 1 is not considered a prime). Thus, the answer is 0. In the second query, the range is [2, 4]. The books in this range are [2, 3, 4]. Book 2 has 1 unique prime factor (2), book 3 has 1 unique prime factor (3), and book 4 has 1 unique prime factor (2). Therefore, the sum is 1 + 1 + 1 = 3. In the third query, the range is [10, 15]. The books in this range are [10, 11, 12, 13, 14, 15]. Their corresponding unique prime factors are: - Book 10: {2, 5} = 2 prime factors - Book 11: {11} = 1 prime factor - Book 12: {2, 3} = 2 prime factors - Book 13: {13} = 1 prime factor - Book 14: {2, 7} = 2 prime factors - Book 15: {3, 5} = 2 prime factors Summing them gives 2 + 1 + 2 + 1 + 2 + 2 = 10. In the fourth query, the range is [1000, 1002]. The books in this range have: - Book 1000: {2, 5} = 2 prime factors - Book 1001: {7, 11, 13} = 3 prime factors - Book 1002: {2, 3, 167} = 3 prime factors Thus, the sum total is 2 + 3 + 3 = 8. Note: It is guaranteed that all results will fit within a 64-bit signed integer.","solution":"def count_unique_prime_factors(n): Returns the number of unique prime factors of n. count = 0 i = 2 if n % i == 0: count += 1 while n % i == 0: n //= i for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: count += 1 while n % i == 0: n //= i if n > 2: count += 1 return count def preprocess_magic_numbers(limit): Preprocess and return an array of magic numbers up to the given limit. magic_numbers = [0] * (limit + 1) for i in range(2, limit + 1): if magic_numbers[i] == 0: # i is a prime number for multiple in range(i, limit + 1, i): magic_numbers[multiple] += 1 return magic_numbers def preprocess_sum_magic_numbers(magic_numbers): Preprocess and return the prefix sum array of the magic numbers. n = len(magic_numbers) sum_magic_numbers = [0] * n for i in range(1, n): sum_magic_numbers[i] = sum_magic_numbers[i - 1] + magic_numbers[i] return sum_magic_numbers def sum_magic_numbers(l, r, sum_magic_numbers): Returns the sum of magic numbers in the range [l, r]. return sum_magic_numbers[r] - sum_magic_numbers[l - 1] # Main function to process queries def process_queries(queries, limit=10**6): magic_numbers = preprocess_magic_numbers(limit) sum_magic_numbers_arr = preprocess_sum_magic_numbers(magic_numbers) results = [] for l, r in queries: results.append(sum_magic_numbers(l, r, sum_magic_numbers_arr)) return results"},{"question":"Maximum Sum of Non-Adjacent Elements Given an array of positive integers, you are required to find the maximum sum of its elements such that no two elements are adjacent in the given array. **For example**, the maximum sum for the array `[3, 2, 7, 10]` is `13` (since we can take elements `3` and `10`), and for the array `[3, 2, 5, 10, 7]` is `15` (since we can take elements `3`, `10`, and `2`). This problem can be solved using dynamic programming in linear time. # Function Description Complete the `maxSubsetSum` function in the editor below. It should return the maximum sum of non-adjacent elements in the array. `maxSubsetSum` has the following parameter(s): - `arr`: an array of integers # Input Format The first line contains a single integer `n`, the number of elements in `arr`. Each of the next `n` lines contains an integer `arr[i]`. # Constraints - 1 leq n leq 10^5 - 1 leq arr[i] leq 10^4 # Output Format Print a single integer that denotes the maximum sum of non-adjacent elements in the array. # Sample Input 0 6 3 2 5 10 7 1 # Sample Output 0 15 # Explanation 0 In the array `arr = [3, 2, 5, 10, 7, 1]`, the maximum sum of non-adjacent elements is obtained by choosing `3`, `10`, and `2`. # Sample Input 1 4 3 2 7 10 # Sample Output 1 13 # Explanation 1 In the array `arr = [3, 2, 7, 10]`, the maximum sum of non-adjacent elements is `3` + `10` = `13`.","solution":"def maxSubsetSum(arr): Function to calculate the maximum sum of non-adjacent elements in the array. if not arr: return 0 n = len(arr) if n == 1: return arr[0] # Initialize an array to store the maximum sum until each index max_sums = [0] * n max_sums[0] = arr[0] max_sums[1] = max(arr[0], arr[1]) for i in range(2, n): max_sums[i] = max(max_sums[i - 1], arr[i] + max_sums[i - 2]) return max_sums[n - 1]"},{"question":"Given an integer N, your task is to find the smallest number k such that the sum of the squares of the first k positive integers (1^2 + 2^2 + ... + k^2) is greater than or equal to N. If no such k can be found, return -1. Example 1: Input: N = 1 Output: 1 Explanation: 1^2 = 1 which is ≥ 1. Therefore, the smallest k is 1. Example 2: Input: N = 5 Output: 2 Explanation: 1^2 + 2^2 = 1 + 4 = 5 which is ≥ 5. Therefore, the smallest k is 2. Example 3: Input: N = 15 Output: 3 Explanation: 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 which is < 15, but 1^2 + 2^2 + 3^2 + 4^2 = 1 + 4 + 9 + 16 = 30 which is ≥ 15. Therefore, the smallest k is 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestK() which takes an integer N as input and returns the answer. Expected Time Complexity: O(sqrt(N)) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^9","solution":"def smallestK(N): Find the smallest number k such that the sum of the squares of the first k positive integers is greater than or equal to N. sum_of_squares = 0 k = 0 while sum_of_squares < N: k += 1 sum_of_squares += k * k return k if sum_of_squares >= N else -1"},{"question":"You have a row of houses where each house can be painted with one of three colors: red, blue, or green. The cost of painting each house with a particular color is different. You have to paint all the houses such that no two adjacent houses have the same color, and you want to minimize the total cost of painting. The cost of painting each house with each color is represented by a `2D` array, where `costs[i][0]` is the cost of painting the `i-th` house with the color red, `costs[i][1]` is the cost of painting the `i-th` house with the color blue, and `costs[i][2]` is the cost of painting the `i-th` house with the color green. Given `n` houses, find the minimum cost to paint all houses under the given constraints. -----Input Format----- - First line contains an integer `n` - the number of houses. - Each of the next `n` lines contains three non-negative integers representing the cost of painting the house with red, blue, and green respectively. -----Output Format----- Print the minimum cost to paint all the houses. -----Constraints----- - 1 leq n leq 100 - 0 leq Cost of painting each house leq 10^4 -----Sample Input----- 3 17 2 17 16 16 5 14 3 19 -----Sample Output----- 10 Explanation: - Paint house 0 with blue, house 1 with green, and house 2 with blue. - Minimum cost: 2 + 5 + 3 = 10.","solution":"def min_cost_painting_houses(costs): Returns the minimum cost to paint all houses such that no two adjacent houses have the same color. if not costs: return 0 n = len(costs) for i in range(1, n): costs[i][0] += min(costs[i-1][1], costs[i-1][2]) costs[i][1] += min(costs[i-1][0], costs[i-1][2]) costs[i][2] += min(costs[i-1][0], costs[i-1][1]) return min(costs[-1]) # Example on how to use the function: # costs = [ # [17, 2, 17], # [16, 16, 5], # [14, 3, 19] # ] # print(min_cost_painting_houses(costs)) # Output: 10"},{"question":"# Task Amanda is an astronomer, and she loves to photograph the night sky. She often goes to her backyard to take stunning pictures of the stars. To capture a perfect photograph, she needs a clear sky. The weather forecast for the next `n` days is given as a list of integers. Each integer represents the meteorological condition prediction for the day: ``` 0: Clear sky (suitable for photographing) 1: Partly cloudy (not suitable) 2: Cloudy (not suitable) 3: Rainy (not suitable) 4: Stormy (not suitable) ``` On any given day, Amanda can choose either to photograph the sky or to switch to photographing indoors if the sky is not clear. If she chooses to photograph the sky when it’s clear, she will be able to capture a starry sky. Otherwise, she will capture an indoor photograph. Given the list of meteorological conditions over `n` days, determine the total number of photographs (both outdoor and indoor) Amanda will take in the next `n` days. Input - `n`: An integer. The number of days Amanda plans to photograph. - `weather_conditions`: A list of integers of length `n`, where each integer represents the meteorological condition for the day as described above. Output - An integer representing the total number of photographs Amanda will take in the next `n` days. Example For `n = 5` and `weather_conditions = [0, 2, 1, 0, 3]`, the output should be `5`. Amanda will take a photograph every day, regardless of weather. For `n = 3` and `weather_conditions = [4, 4, 4]`, the output should be `3`. Amanda will take 3 indoor photographs since all days have unsuitable weather. For `n = 1` and `weather_conditions = [0]`, the output should be `1`. Amanda captures one outdoor photograph on the only clear day.","solution":"def total_photographs(n, weather_conditions): Given the number of days (n) and a list of weather conditions, returns the total number of photographs Amanda will take in the next n days, both outdoor and indoor. :param n: int: Number of days Amanda plans to photograph :param weather_conditions: List[int]: List of meteorological conditions for each day :return: int: Total number of photographs Amanda will take return n"},{"question":"You have been tasked with implementing a function to manage a set of tasks and determine their priority based on dependencies between tasks. Each task is represented as a unique integer and the dependencies are represented as directed edges in a graph. An edge from task `u` to task `v` means that task `u` must be completed before task `v`. Your function needs to take the number of tasks and a list of dependency pairs and return a list of tasks sorted by their required order of completion. If there is no valid order (due to a cyclic dependency), return an empty list. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and M (the number of tasks and the number of dependencies). The next M lines each contain two integers u and v denoting a dependency (task u must be completed before task v). ------ Output ------ For each test case, print a single line. If there is a valid order of task completion, print the tasks in a valid order separated by spaces. Otherwise, print \\"IMPOSSIBLE\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1,000 0 ≤ M ≤ 10,000 1 ≤ u, v ≤ N ------ Sample Input 1 ------ 2 4 3 1 2 1 3 3 4 3 3 1 2 2 3 3 1 ------ Sample Output 1 ------ 1 3 4 2 IMPOSSIBLE","solution":"from collections import deque, defaultdict def find_task_order(N, M, dependencies): # Build graph and indegree array: Graph as adjacency list and tracking indegree of nodes graph = defaultdict(list) indegree = [0] * (N + 1) for u, v in dependencies: graph[u].append(v) indegree[v] += 1 # Initialize queue with nodes having 0 indegree queue = deque([node for node in range(1, N + 1) if indegree[node] == 0]) task_order = [] while queue: current = queue.popleft() task_order.append(current) for neighbor in graph[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(task_order) == N: return task_order else: return \\"IMPOSSIBLE\\" def manage_tasks(T, test_cases): results = [] for i in range(T): N, M, dependencies = test_cases[i] results.append(find_task_order(N, M, dependencies)) return results # Example usage for running the function manually def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) M = int(data[index + 1]) index += 2 dependencies = [] for _ in range(M): u = int(data[index]) v = int(data[index + 1]) dependencies.append((u, v)) index += 2 test_cases.append((N, M, dependencies)) results = manage_tasks(T, test_cases) for result in results: if result == \\"IMPOSSIBLE\\": print(\\"IMPOSSIBLE\\") else: print(\\" \\".join(map(str, result)))"},{"question":"In a magical forest, there are N unique types of magical fruits hanging from the trees. Each type of fruit has a certain magic value associated with it, given by an array `A` of length `N`. The forest also contains specific zones where only certain types of fruits grow. Each zone is defined by a range [L, R] of indices (1-based) of the fruits\' array. The elves love testing their memory and often engage in a game where they select a range in the forest and sum the values of the fruits in that range. But there\'s a twist—they use their magic to multiply the fruit values by the number of occurrences of that type of fruit within the selected range. You are asked to help the elves calculate the sum of magic values for several queries. Each query consists of two integers `Li` and `Ri` (1 ≤ Li ≤ Ri ≤ N). Write a function to calculate the sum of magic values for each query. # Input Format - The first line contains an integer `N` (1 ≤ N ≤ 100,000) denoting the number of unique types of fruits. - The second line contains `N` integers representing the array `A` (1 ≤ Ai ≤ 10^9). - The next line contains an integer `Q` (1 ≤ Q ≤ 100,000) denoting the number of queries. - Each of the following `Q` lines contains two integers `Li` and `Ri` denoting the indices for each query (1 ≤ Li ≤ Ri ≤ N). # Output Format - Print `Q` lines, each containing a single integer—the sum of magic values for the corresponding query. # Example Input ``` 5 5 3 8 6 7 3 1 3 2 5 1 5 ``` Output ``` 48 52 88 ``` # Explanation For the first query, the range is [1, 3] and the values are [5, 3, 8]. The occurrences are: - 5 occurs 1 time: 5 * 1 = 5 - 3 occurs 1 time: 3 * 1 = 3 - 8 occurs 1 time: 8 * 1 = 8 Thus, the sum for the first query is 5 + 3 + 8 = 16. For the second query, the range is [2, 5] and the values are [3, 8, 6, 7]. The occurrences are: - 3 occurs 1 time: 3 * 1 = 3 - 8 occurs 1 time: 8 * 1 = 8 - 6 occurs 1 time: 6 * 1 = 6 - 7 occurs 1 time: 7 * 1 = 7 Thus, the sum for the second query is 3 + 8 + 6 + 7 = 24. The third query considers the whole array, hence the sum of magic values will be even larger. Calculate and output the results for each query based on the given values of `A` and the specified index ranges.","solution":"def calculate_magic_values(N, A, queries): Calculate the sum of magic values for each query in the forest. N: int - Number of unique types of fruits. A: list of int - The array representing the magic values of the fruits. queries: list of tuple - Each tuple contains two integers (Li, Ri) representing a query. Returns a list of integers - The sum of magic values for each query. # Precompute prefix sum arrays from collections import defaultdict # Initialize prefix sums and counts prefix_sum = [0] * (N + 1) prefix_count = defaultdict(lambda: [0] * (N + 1)) for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + A[i - 1] for k, v in prefix_count.items(): prefix_count[k][i] = prefix_count[k][i - 1] prefix_count[A[i - 1]][i] += 1 results = [] for Li, Ri in queries: sum_magic_value = 0 for k, v in prefix_count.items(): count_in_range = v[Ri] - v[Li - 1] if count_in_range > 0: sum_magic_value += k * count_in_range results.append(sum_magic_value) return results # Example usage N = 5 A = [5, 3, 8, 6, 7] queries = [(1, 3), (2, 5), (1, 5)] print(calculate_magic_values(N, A, queries)) # Output should be [16, 24, 29]"},{"question":"You are given a string representing a binary number. The string contains only characters \'0\' and \'1\' and is guaranteed to be a valid binary number without any leading zeros. Your task is to determine if this binary number is a power of four. For example, the binary string \'100\' represents the number 4 which is a power of 4, so the output should be true. However, the binary string \'101\' represents the number 5, which is not a power of 4, so the output should be false. Write a function `isPowerOfFour(binary_string)` that takes a binary string as input and returns `True` if the number is a power of four, else `False`. Example: ```python isPowerOfFour(\'100\') # should return True isPowerOfFour(\'1000\') # should return False isPowerOfFour(\'10000\') # should return True ``` Your solution should be efficient in both runtime and memory usage.","solution":"def isPowerOfFour(binary_string): Determines if a binary string represents a number that is a power of four. Args: binary_string (str): A string representing a binary number. Returns: bool: True if the number is a power of four, False otherwise. # Convert binary string to integer num = int(binary_string, 2) # Check if the number is zero if num == 0: return False # Check if the number is a power of two by ensuring it has exactly one \'1\' bit if (num & (num - 1)) != 0: return False # Check if the number of trailing zeroes in binary representation is even # This will confirm if it is a power of four return (num.bit_length() - 1) % 2 == 0"},{"question":"You are given an integer array arr of length n. You have to create a new array result such that result[i] is equal to the product of all elements of arr except arr[i]. Your task is to write a function that constructs the result array. You are not allowed to use the division operation. -----Input----- The first line of the input contains one integer t (1 le t le 10^3) — the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1 le n le 10^5) — the length of the array. - The second line contains n integers arr[i] (1 le arr[i] le 10^9), which are the elements of the array. -----Output----- For each test case, print a single line containing n space-separated integers — the elements of the result array for the corresponding test case. -----Examples----- Input 2 3 1 2 3 4 4 2 1 5 Output 6 3 2 10 20 40 8 -----Note----- In the first example, for the result array: - result[0] = 2 * 3 = 6 - result[1] = 1 * 3 = 3 - result[2] = 1 * 2 = 2 In the second example, for the result array: - result[0] = 2 * 1 * 5 = 10 - result[1] = 4 * 1 * 5 = 20 - result[2] = 4 * 2 * 5 = 40 - result[3] = 4 * 2 * 1 = 8","solution":"def product_except_self(arr): Returns an array such that each element at index \'i\' of the array is the product of all the elements in the original array except \'arr[i]\'. n = len(arr) result = [1] * n # Compute products of all elements to the left of each index left_products = 1 for i in range(n): result[i] = left_products left_products *= arr[i] # Compute products of all elements to the right of each index right_products = 1 for i in range(n-1, -1, -1): result[i] *= right_products right_products *= arr[i] return result def solve(t, test_cases): For each test case, computes and prints the product array based on the given criteria. results = [] for i in range(t): n, arr = test_cases[i] result = product_except_self(arr) results.append(\\" \\".join(map(str, result))) return results"},{"question":"You are given a grid of size n x m consisting of non-negative integers. You need to find the maximum sum of elements from the top-left corner to the bottom-right corner of the grid, but you can only move either right or down at each step. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000): the number of rows and columns in the grid. Each of the next n lines contains m integers (0 ≤ grid[i][j] ≤ 1000): the elements of the grid. Output Print one integer: the maximum possible sum from the top-left corner to the bottom-right corner. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 29","solution":"def max_path_sum(grid): Given a grid of size n x m consisting of non-negative integers, find the maximum sum from the top-left corner to the bottom-right corner of the grid, moving only right or down at each step. n = len(grid) m = len(grid[0]) # Create a 2D DP array to store the maximum sum up to each cell dp = [[0] * m for _ in range(n)] # Initialize the top-left corner dp[0][0] = grid[0][0] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the rest of the DP array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1] # Example input grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(max_path_sum(grid)) # should print 29"},{"question":"You are given an array of integers representing stock prices on successive days. You can make multiple transactions (i.e., buy one and sell one share of the stock multiple times). However, you cannot engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again). Write a function `max_profit(prices)` that calculates the maximum profit you can achieve. You may assume that you have an unlimited number of transactions available. # Examples: ```python prices = [7, 1, 5, 3, 6, 4] max_profit(prices) # Returns 7 (Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. prices = [1, 2, 3, 4, 5] max_profit(prices) # Returns 4 (Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4) prices = [7, 6, 4, 3, 1] max_profit(prices) # Returns 0 (In this case, no transaction is done, i.e., max profit = 0) ``` # Constraints: - The length of the array will be in the range [1, 10^5] - Each price will be in the range [0, 10^5] # Note: - Aim for an efficient solution with a time complexity of O(n).","solution":"def max_profit(prices): Calculate the maximum profit by buying and selling stocks. :param prices: List of stock prices. :return: Maximum profit achievable with unlimited transactions. max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"You are given an unsorted array, and you need to find the maximum sum of any subsequence in which the elements appear in increasing order. The sequence does not need to be contiguous, but the order of elements must remain the same as in the original array. Your task is to write a function that returns the maximum sum of such a subsequence. Function Description Complete the function `maxIncreasingSubseqSum` in the editor below. `maxIncreasingSubseqSum` has the following parameter(s): - int n: the length of the array `arr`. - int arr[n]: an array of integers. Returns: - int: the maximum sum of the increasing subsequence. Input Format The first line of input contains an integer n, the size of textbf{arr}. The next line contains n space-separated integers arr[i] where 0 leq i < n. Constraints 1 leq n leq 1000 -1000 leq arr[i] leq 1000 Output Format Return the maximum sum of any increasing subsequence of the array. Sample Input ``` 6 1 101 2 3 100 4 ``` Sample Output ``` 106 ``` Explanation One of the increasing subsequences with the maximum sum is [1, 2, 3, 100]. Note: For subsequences containing negative values, consider if including those values still yields maximum sums. The goal is to ensure the subsequence remains in increasing order with the highest possible sum.","solution":"def maxIncreasingSubseqSum(n, arr): Returns the maximum sum of increasing subsequence from the array. if n == 0: return 0 # Initialize dp array where dp[i] will be the max sum of increasing subsequence that ends with arr[i] dp = arr[:] # Start with each element itself being the maximum sum subsequence for i in range(1, n): for j in range(i): if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]: dp[i] = dp[j] + arr[i] return max(dp)"},{"question":"You are given a string `s` that consists of lowercase English letters and digits. You can swap any two characters in the string as many times as you want. Your goal is to form the largest possible valid integer from the given string. A valid integer should not contain any leading zeroes unless it is zero itself. Constraints: 1 ≤ |s| ≤ 1000 Input: A single string `s` containing lowercase English letters and digits. Output: Output the largest valid integer that can be formed. If it\'s not possible to form any valid integer, output \\"0\\". SAMPLE INPUT abc123 SAMPLE OUTPUT 321 Explanation By rearranging the digits in the string \\"abc123\\", the largest valid integer we can form is \\"321\\", which does not have leading zeroes. SAMPLE INPUT abcd SAMPLE OUTPUT 0 Explanation The string \\"abcd\\" contains no digits, so it’s not possible to form a valid integer. Therefore, the output is \\"0\\".","solution":"def largest_valid_integer(s): Returns the largest valid integer that can be formed from the string s. If it is not possible to form any valid integer, returns \\"0\\". digits = sorted([ch for ch in s if ch.isdigit()], reverse=True) if not digits: return \\"0\\" result = \'\'.join(digits) # Remove leading zeroes if there are any if result[0] == \'0\': # If the largest digit is zero, then all digits are zero return \\"0\\" return result"},{"question":"Alice is working with an array of integers and wants to perform a series of operations on it. The operations involve finding the minimum value in a subarray and then updating the entire subarray with this minimum value. Given the initial array and the operations, can you write a program to help her find the final modified array after all operations are performed? The operations are defined by two integers L and R (1 ≤ L ≤ R ≤ N), which represent the start and end indices of the subarray to be updated (1-based indexing). ------ Input Format ------ - The first line contains a single integer N — the size of the array. - The second line contains N space-separated integers representing the elements of the array. - The third line contains a single integer Q — the number of operations to be performed. - The next Q lines each contain two space-separated integers L and R, defining the subarray range. ------ Output Format ------ Output the final state of the array after all operations are performed. ------ Constraints ------ 1 ≤ N ≤ 10^{4} 1 ≤ Q ≤ 10^{4} 1 ≤ array[i] ≤ 10^9 1 ≤ L, R ≤ N ----- Sample Input 1 ------ 6 3 5 2 1 4 6 3 1 3 2 5 1 6 ----- Sample Output 1 ------ 1 1 1 1 1 1 ----- Explanation 1 ------ Operation 1: The subarray [3, 5, 2] is considered. The minimum value is 2, so the subarray becomes [2, 2, 2, 1, 4, 6]. Operation 2: The subarray [2, 2, 2, 1] is considered. The minimum value is 1, so the subarray becomes [2, 1, 1, 1, 1, 6]. Operation 3: The entire array [2, 1, 1, 1, 1, 6] is considered. The minimum value is 1, so the final array becomes [1, 1, 1, 1, 1, 1].","solution":"def update_array_with_operations(N, array, operations): Updates the array based on the min value of subarrays specified in operations. Args: N: int - The size of the array. array: list of int - The elements of the array. operations: list of tuple - Each tuple contains two integers L and R. Returns: list of int - The final state of the array after all operations. for L, R in operations: min_value = min(array[L-1:R]) array[L-1:R] = [min_value] * (R - L + 1) return array"},{"question":"# The Story: Alice is organizing a charity marathon event. She has a list of participants, and each participant has a unique registration number for tracking purposes. Unfortunately, due to a system glitch, some registration numbers are missing. Alice needs to identify and provide the smallest missing registration number to ensure every participant has a valid one. # Task Overview: You have to write a function that takes in a list of integers representing the registration numbers of participants and returns the smallest missing registration number. The registration numbers are positive integers starting from 1. # Usage Examples: ```python find_missing_number([1, 2, 3, 5]) 4 # The smallest missing number is 4 find_missing_number([2, 3, 4, 7]) 1 # The smallest missing number is 1 find_missing_number([1, 2, 3, 4, 5]) 6 # The smallest missing number is 6 ``` ```if:csharp Documentation: Kata.FindMissingNumber Method (List<Int32>) Returns the smallest missing registration number. Syntax public static int FindMissingNumber( List<int> regNumbers ) Parameters regNumbers Type: List<System.Int32> The list of registration numbers. Return Value Type: System.Int32 An integer representing the smallest missing registration number. ```","solution":"def find_missing_number(reg_numbers): Returns the smallest missing registration number from the list. Args: reg_numbers: List of integers representing registration numbers. Returns: An integer, the smallest missing registration number. n = len(reg_numbers) reg_numbers_set = set(reg_numbers) for i in range(1, n + 2): # from 1 to n+1 if i not in reg_numbers_set: return i"},{"question":"You are given an alien language with unique rules for constructing valid words. Each letter has a rank, and a word is considered valid if its letters are in strictly increasing rank order. Your task is to calculate the total number of distinct valid words of a given length L that can be formed using an alphabet of size N. The ranks are represented by integers from 1 to N inclusive. For example, if N=4, the alphabets would be represented by their respective ranks as 1, 2, 3, 4. A valid word is of length L and composed of strictly increasing ranks. For example, if L=2 and N=3, the valid words are: `12`, and `13`. -----Input----- The input contains two integers N and L where 1 leq L leq N leq 50. -----Output----- The output should be a single integer, the number of distinct valid words that can be formed of length L. -----Examples----- Sample Input 1: 4 2 Sample Output 1: 6 Sample Input 2: 5 3 Sample Output 2: 10","solution":"from math import comb def count_valid_words(N, L): Returns the number of distinct valid words of length L that be formed using an alphabet of size N. Valid words must be in strictly increasing rank order. return comb(N, L)"},{"question":"You are given two arrays of integers, a and b, each containing n elements. In one operation, you can choose an integer k (1 le k le n) and simultaneously perform the following on both arrays: - Swap the first k elements between the two arrays. Specifically, for the first k elements, set a[i] to b[i] and set b[i] to a[i] (1 le i le k). Your task is to determine if it is possible to make the arrays a and b identical using (possibly) a sequence of such operations. You have to answer m independent test cases. -----Input----- The first line contains one integer m (1 le m le 10^3) — the number of test cases. Then m test cases follow. For each test case, the first line contains one integer n (1 le n le 2 cdot 10^3) — the number of elements in arrays a and b. The second line contains n integers: the elements of array a. The third line contains n integers: the elements of array b. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^3 (sum n le 2 cdot 10^3). -----Output----- For each test case, print \\"YES\\" (without quotes) if it is possible to make arrays a and b identical after some sequence of operations, and \\"NO\\" otherwise. -----Example----- Input 3 4 1 2 3 4 1 2 3 4 3 1 0 1 0 1 0 5 2 4 6 1 3 6 4 2 3 1 Output YES NO YES","solution":"def can_make_identical(m, test_cases): results = [] for i in range(m): n, a, b = test_cases[i] if sorted(a) == sorted(b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Zelda is a maze explorer and she found herself lost in a complicated maze with rooms connected by corridors. Each room is represented as a node, and each corridor as an undirected edge between nodes. Zelda wants to reach the exit of the maze located at a specific node. She has a special ability to mark rooms as visited and is only interested in finding the shortest path to the exit node. Given the maze\'s structure and the starting position of Zelda, can you help her find the shortest path to the exit? Input The first line contains three integers n, m, and e (1 ≤ n ≤ 104, 1 ≤ m ≤ 5×104, 1 ≤ e ≤ n) — the number of rooms, the number of corridors, and the exit room\'s id respectively. Rooms are numbered from 1 to n. The second line contains a single integer s (1 ≤ s ≤ n) — the starting room\'s id. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — indicating that there is a corridor between rooms u and v. Output Output a single integer — the minimum number of corridor traversals required to reach the exit room from the starting room. If it is not possible to reach the exit room, output -1. Examples Input 6 7 5 1 1 2 1 3 2 4 3 5 4 5 4 6 3 4 Output 2 Input 4 2 3 1 1 2 2 4 Output -1 Note In the first sample, the shortest path from room 1 to room 5 is 1 → 3 → 5, which requires 2 corridor traversals. In the second sample, there is no path from room 1 to room 3. Thus, the output is -1.","solution":"from collections import deque, defaultdict def shortest_path_to_exit(n, m, e, s, corridors): Finds the shortest path from the start room to the exit room in a maze. :param n: Number of rooms. :param m: Number of corridors. :param e: Exit room\'s id. :param s: Starting room\'s id. :param corridors: List of tuples, each representing a corridor between two rooms. :return: Minimum number of corridor traversals required to reach the exit room from the starting room. if s == e: return 0 graph = defaultdict(list) for u, v in corridors: graph[u].append(v) graph[v].append(u) queue = deque([(s, 0)]) visited = set([s]) while queue: current_room, distance = queue.popleft() for neighbor in graph[current_room]: if neighbor == e: return distance + 1 if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return -1"},{"question":"Write a function `increment_path(path)` that takes a string representing a filesystem path and increments the version number at the end if it exists. If the path does not end with a version number, the function should append \\"_v1\\" to the end. - A version number is defined as an underscore followed by a lowercase \'v\' and a positive integer (e.g. \\"_v1\\", \\"_v2\\", etc.). - If a version number exists, it should be incremented by 1. - If there is no version number, \\"_v1\\" should be appended to the path. Example: ``` increment_path(\\"/user/documents/file\\") ``` should return: ``` \\"/user/documents/file_v1\\" ``` Example: ``` increment_path(\\"/user/documents/file_v3\\") ``` should return: ``` \\"/user/documents/file_v4\\" ``` # Hints: - You can use regular expressions to identify and extract the version number if it exists.","solution":"import re def increment_path(path): Takes a string representing a filesystem path and increments the version number at the end if it exists. If the path does not end with a version number, the function appends \\"_v1\\" to the end. A version number is defined as an underscore followed by a lowercase \'v\' and a positive integer (e.g. \\"_v1\\", \\"_v2\\", etc.). If a version number exists, it should be incremented by 1. If there is no version number, \\"_v1\\" should be appended to the path. Parameters: path (str): Filesystem path Returns: str: The incremented or new versioned path match = re.search(r\'(_vd+)\', path) if match: current_version = match.group(1) version_number = int(current_version[2:]) # Extract the number part new_version = f\\"_v{version_number + 1}\\" new_path = path[:match.start()] + new_version else: new_path = path + \\"_v1\\" return new_path"},{"question":"Write a function named calculateDiscount that takes two parameters: originalPrice, which is a positive float representing the price of an item before any discount, and discountPercentage, which is a float representing the discount percentage to be applied to the original price. The function should return the final price after applying the discount. If the discountPercentage is less than 0 or greater than 100, the function should return -1 indicating an invalid discount percentage. Examples: ```if-not:julia,racket calculateDiscount(100.0, 20.0) -> 80.0 calculateDiscount(50.0, 0.0) -> 50.0 calculateDiscount(200.0, -10.0) -> -1 calculateDiscount(250.0, 110.0) -> -1 calculateDiscount(150.0, 50.0) -> 75.0 ```","solution":"def calculateDiscount(originalPrice, discountPercentage): Returns the final price after applying the discount. If the discountPercentage is invalid (less than 0 or greater than 100), returns -1. Params: originalPrice (float): The original price of the item. discountPercentage (float): The discount percentage to be applied. Returns: float: The final price after the discount is applied, or -1 for invalid discount. if discountPercentage < 0 or discountPercentage > 100: return -1 discountAmount = (discountPercentage / 100) * originalPrice finalPrice = originalPrice - discountAmount return finalPrice"},{"question":"A game involves players moving around a rectangular grid. The grid has dimensions M by N (1 ≤ M, N ≤ 1000). Each cell in the grid can contain one of three values: - 0: an empty cell. - 1: a wall. - 2: the player’s current position. Players can move up, down, left, or right, but cannot move into or through cells with walls (cells with value 1). The goal of the player is to collect items that are scattered throughout the grid. These items are represented by cells with a value of 3. Each item can only be collected once, and the player does not need to return to any previously visited cell after collecting an item. Given the player\'s initial position and the grid, determine if all items can be collected. Return \\"YES\\" if it is possible for the player to collect all items, otherwise return \\"NO\\". # Input The first line of input contains two integers M and N indicating the dimensions of the grid. Each of the following M lines contains N integers separated by spaces (0, 1, 2, or 3), representing the grid. # Output Output \\"YES\\" if the player can collect all items, otherwise output \\"NO\\". # Example Input ``` 5 5 0 0 0 0 0 0 1 1 1 0 0 1 2 1 0 0 1 0 1 3 0 0 3 0 0 ``` Output ``` YES ``` Input ``` 5 5 0 1 0 3 0 1 1 1 1 1 2 1 0 1 3 0 1 3 1 0 0 1 0 0 0 ``` Output ``` NO ``` # Note In the first example, the player can navigate around the grid to collect all items. In the second example, the items cannot be reached due to the walls blocking the path.","solution":"def can_collect_all_items(grid): M, N = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Find the player\'s starting position start = None items_to_collect = 0 for i in range(M): for j in range(N): if grid[i][j] == 2: start = (i, j) elif grid[i][j] == 3: items_to_collect += 1 if not start: return \\"NO\\" # BFS to collect items from collections import deque queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and (nx, ny) not in visited: if grid[nx][ny] != 1: if grid[nx][ny] == 3: items_to_collect -= 1 visited.add((nx, ny)) queue.append((nx, ny)) return \\"YES\\" if items_to_collect == 0 else \\"NO\\""},{"question":"Alice has been given a special type of array by her teacher to test her programming skills. This array has the following properties: 1. The array contains N distinct integers such that -10^9 ≤ A[i] ≤ 10^9. 2. There are no duplicates in the array. 3. The array is shuffled in a random order. To pass the test, Alice needs to find out the two elements in the array with the maximum difference where the smaller element appears before the larger element in the original array. Write a program to help Alice find these two elements and display their maximum difference. Input Format First line of input contains integer N (2 ≤ N ≤ 10^5), the number of elements in the array. Second line contains N space-separated integers, the elements of the array. Output Format Output a single integer, the maximum difference between two elements where the smaller element appears before the larger element in the array. Example Input 6 2 3 10 6 4 8 1 Example Output 8 Explanation Alice can choose pairs (2, 10), (3, 10), resulting in differences 8 and 7 respectively. The pair that provides the maximum difference within the constraints is (2, 10), with a difference of 8. Thus, the output is 8.","solution":"def find_max_difference(arr): Finds the maximum difference between two elements in the array where the smaller element appears before the larger element. :param arr: List[int] - List of integers :return: int - Maximum difference if not arr or len(arr) < 2: return 0 min_element = arr[0] max_diff = 0 for value in arr[1:]: max_diff = max(max_diff, value - min_element) min_element = min(min_element, value) return max_diff"},{"question":"Tom is fond of anagrams. He calls two strings anagrams if they have the same characters but in a different order. However, Tom considers two strings “strict” anagrams if and only if they can be made the same by exactly one swap of two characters in either string. Given two strings, determine if they are \\"strict\\" anagrams. Function Description Complete the strictAnagram function in the editor below. strictAnagram has the following parameter(s): string s1: the first string string s2: the second string Returns bool: true if the strings are strict anagrams, false otherwise Input Format The first line contains a single string s1. The second line contains a single string s2. Constraints 1 leq text{length of } s1, s2 leq 100 s1 and s2 contain lower case English alphabet characters only. Output Format Print true if the strings are strict anagrams, false otherwise. Sample Input 0 ab ba Sample Output 0 true Explanation 0 In this sample, s1 = text{\\"ab\\"} and s2 = text{\\"ba\\"}. We can swap the characters in s2 to get s1. Sample Input 1 abc bca Sample Output 1 false Explanation 1 In this sample, s1 = text{\\"abc\\"} and s2 = text{\\"bca\\"}. Multiple swaps are needed to make the strings identical, so they are not strict anagrams. Sample Input 2 aaaa aaaa Sample Output 2 false Explanation 2 In this sample, s1 = text{\\"aaaa\\"} and s2 = text{\\"aaaa\\"}. No swap is needed because the strings are already identical, hence they are not strict anagrams.","solution":"def strictAnagram(s1, s2): Determine if two strings are strict anagrams. :param s1: the first string :param s2: the second string :return: true if the strings are strict anagrams, false otherwise if s1 == s2 or sorted(s1) != sorted(s2): return False diff_indices = [i for i in range(len(s1)) if s1[i] != s2[i]] if len(diff_indices) == 2: # Check if by swapping these two indices we get matching strings i, j = diff_indices return s1[i] == s2[j] and s1[j] == s2[i] return False"},{"question":"Given an array of integers nums and an integer k, return the maximum length of a subarray that sums to k. If there isn\'t one, return 0 instead. Example 1: Input: nums = [1, -1, 5, -2, 3], k = 3 Output: 4 Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest subarray that sums to k. Example 2: Input: nums = [-2, -1, 2, 1], k = 1 Output: 2 Explanation: The subarray [-1, 2] sums to 1 and is the longest subarray that sums to k. Example 3: Input: nums = [1, 2, 3], k = 6 Output: 3 Explanation: The subarray [1, 2, 3] sums to 6 and is the longest subarray that sums to k. Constraints: 1 <= nums.length <= 2 * 10^4 -10^4 <= nums[i] <= 10^4 -2 * 10^9 <= k <= 2 * 10^9","solution":"def max_subarray_len(nums, k): Returns the maximum length of a subarray that sums to k. If there isn\'t one, returns 0. sum_indices = {} total_sum = 0 max_len = 0 for i, num in enumerate(nums): total_sum += num if total_sum == k: max_len = i + 1 elif (total_sum - k) in sum_indices: max_len = max(max_len, i - sum_indices[total_sum - k]) if total_sum not in sum_indices: sum_indices[total_sum] = i return max_len"},{"question":"Complete the `longestSharedPrefix` function to identify the longest common prefix among an array of strings. If there is no common prefix, return an empty string. For example: ```python longestSharedPrefix([\\"flower\\", \\"flow\\", \\"flight\\"]) # Returns \\"fl\\" longestSharedPrefix([\\"dog\\", \\"racecar\\", \\"car\\"]) # Returns \\"\\" ``` The input list always contains at least one string and each string is made up of lowercase English letters. The function should be efficient in terms of time complexity. Adapted from LeetCode.","solution":"def longestSharedPrefix(strs): Returns the longest common prefix string amongst an array of strings. If there is no common prefix, returns an empty string. if not strs: return \\"\\" # Start by assuming the whole first string is the common prefix prefix = strs[0] for s in strs[1:]: while s[:len(prefix)] != prefix and prefix: # Reduce the prefix by one character at the time prefix = prefix[:-1] if not prefix: break return prefix"},{"question":"You are given an array of positive integers denoted by A = [A1, A2, ..., AN]. You need to find the smallest integer X such that the sum of the absolute differences between each element of the array and X is minimized. That is, you need to find X that minimizes the following sum: sum_{i=1}^{N} |A_i - X| ---- Input Format ---- - The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of two lines: - The first line contains a single integer N, the size of the array. - The second line contains N space-separated positive integers denoting the array A. ---- Output Format ---- - For each test case, print a new line containing one integer — the value of X that minimizes the sum of absolute differences. ---- Constraints ---- 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^5 1 ≤ A_i ≤ 10^9 ---- Sample Input ---- 2 4 1 2 3 4 3 5 10 14 ---- Sample Output ---- 2 10 ---- Explanation ---- Test Case 1: If X=2, the sum of absolute differences is |1-2| + |2-2| + |3-2| + |4-2| = 1 + 0 + 1 + 2 = 4, which is the minimum possible. Test Case 2: If X=10, the sum of absolute differences is |5-10| + |10-10| + |14-10| = 5 + 0 + 4 = 9, which is the minimum possible.","solution":"def find_minimum_x(test_cases): This function finds the smallest integer X such that the sum of the absolute differences between each element of the array and X is minimized for each test case. Parameters: test_cases (list of tuples): Each element is a tuple where the first element is the integer N (size of array) and the second element is the list of integers A. Returns: list of int: Each element is the value of X that minimizes the sum of absolute differences for the corresponding test case. results = [] for n, array in test_cases: array.sort() # The minimum sum of absolute differences is achieved at the median median = array[(n - 1) // 2] # zero-based index results.append(median) return results"},{"question":"Write a function `interleave_sequences` that takes two lists of integers, `list1` and `list2`, and returns a new list where the elements of `list1` and `list2` are interleaved. If one list is longer than the other, append the remaining elements of the longer list to the end of the interleaved list. # Input Format - The input contains two lines. - The first line contains a space-separated list of integers representing `list1`. - The second line contains a space-separated list of integers representing `list2`. # Output Format - Output a single line containing the interleaved list with the remaining elements of the longer list appended at the end, in space-separated format. # Constraints - All integers in the input lists are non-negative and less than 1,000. - Both lists have at least one and at most 100 integers. # Example Input ``` 1 3 5 2 4 6 8 10 ``` Output ``` 1 2 3 4 5 6 8 10 ``` Input ``` 10 20 30 40 1 2 ``` Output ``` 10 1 20 2 30 40 ``` # Explanation In the first example, the lists `1 3 5` and `2 4 6 8 10` are interleaved to get `1 2 3 4 5 6`, and then the remaining elements `8 10` are appended, resulting in the final list `1 2 3 4 5 6 8 10`. In the second example, the lists `10 20 30 40` and `1 2` are interleaved to get `10 1 20 2`, and then the remaining elements `30 40` are appended, resulting in the final list `10 1 20 2 30 40`.","solution":"def interleave_sequences(list1, list2): Returns a new list where the elements of list1 and list2 are interleaved. If one list is longer than the other, the remaining elements of the longer list are appended to the end of the interleaved list. min_len = min(len(list1), len(list2)) interleaved = [] for i in range(min_len): interleaved.append(list1[i]) interleaved.append(list2[i]) # Append remaining elements of the longer list if len(list1) > len(list2): interleaved.extend(list1[min_len:]) else: interleaved.extend(list2[min_len:]) return interleaved"},{"question":"Write a program which reads an integer `n` and a list of `n` integers, and prints the maximum difference between any two elements in the list. Constraints * 1 ≤ n ≤ 100 * 0 ≤ list elements ≤ 1000 Input An integer `n` is given in the first line. The second line contains `n` integers separated by single space. Output Print the maximum difference between any two elements in the list in a line. Examples Input 5 1 9 3 4 5 Output 8 Input 3 10 20 15 Output 10","solution":"def max_difference(n, elements): This function takes in an integer `n` and a list of `n` integers, and returns the maximum difference between any two elements in the list. if n <= 1: return 0 min_element = min(elements) max_element = max(elements) return max_element - min_element"},{"question":"A delivery company operates in a city structured as a grid. The city\'s layout consists of M streets and N avenues, forming a grid with M intersections. Each intersection can be identified by a pair of coordinates (x, y). The company needs to plan routes for its delivery trucks such that each truck starts at a specified intersection, follows specific directions, and ends without exceeding the grid boundaries or revisiting any intersection. Given the grid size and a list of delivery routes with their respective starting positions and movements, determine if each route is valid based on the given conditions: 1. The truck should not go out of the grid boundaries. 2. The truck should not revisit any intersection it has already passed through. The movement directions are given as a string consisting of characters \'U\', \'D\', \'L\', \'R\', representing up, down, left, and right respectively. Input Format: First line contains an integer T - number of test cases. Each test case includes: 1. The first line with two space-separated integers M and N - the number of streets (grid rows) and the number of avenues (grid columns), respectively. 2. The second line has an integer K - the number of delivery routes. 3. K lines follow, each containing an integer pair (x, y) - the starting position of the truck, and a string consisting of characters \'U\', \'D\', \'L\', \'R\' representing the movement directions. Output Format: Print T lines - each containing \\"Valid\\" if the route for the respective truck is valid, else print \\"Invalid\\". Constraints: 1 ≤ T ≤ 5 1 ≤ M, N ≤ 1000 1 ≤ K ≤ 100 1 ≤ |movement string| ≤ 1000 Starting positions (x, y) are within the grid bounds. SAMPLE INPUT 1 5 5 2 3 3 UURRDDL 2 2 RRUULL SAMPLE OUTPUT Valid Invalid","solution":"def is_valid_route(M, N, x, y, movements): visited = set() visited.add((x, y)) for move in movements: if move == \'U\': x -= 1 elif move == \'D\': x += 1 elif move == \'L\': y -= 1 elif move == \'R\': y += 1 if x < 0 or x >= M or y < 0 or y >= N or (x, y) in visited: return \\"Invalid\\" visited.add((x, y)) return \\"Valid\\" def determine_routes(test_cases): results = [] for M, N, routes in test_cases: for x, y, movements in routes: results.append(is_valid_route(M, N, x, y, movements)) return results # Function to read input data def process_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0].strip()) index = 1 test_cases = [] for _ in range(T): M, N = map(int, input_lines[index].strip().split()) K = int(input_lines[index+1].strip()) routes = [] for i in range(K): x, y, movements = input_lines[index + 2 + i].strip().split(maxsplit=2) x = int(x) - 1 y = int(y) - 1 routes.append((x, y, movements)) test_cases.append((M, N, routes)) index += 2 + K return test_cases"},{"question":"Given a list of N integers, you are required to find the maximum possible value of any subarray sum. A subarray is defined as a contiguous segment of the array. The challenge is to come up with an efficient solution to handle cases where N can be very large. The input to the problem consists of: - The first line contains the integer N, the size of the list. - The second line contains N space-separated integers representing the elements of the list. The output should be a single integer: the maximum sum of any subarray. Note that the list may contain both positive and negative integers, and the subarray should have at least one element. Constraints: 1 ≤ N ≤ 10^5 -10^9 ≤ list[i] ≤ 10^9 Example Input: 8 -2 1 -3 4 -1 2 1 -5 4 Example Output: 6 Explanation: The subarray [4, -1, 2, 1] has the maximum sum of 6.","solution":"def max_subarray_sum(arr): Returns the maximum subarray sum. # Initialize variables max_sum = arr[0] current_sum = arr[0] # Iterate through the array starting from the second element for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) arr = list(map(int, data[1:1 + N])) print(max_subarray_sum(arr))"},{"question":"In a distant land, there is a unique type of tree known as the \\"Replicating Tree\\". Each node of the tree has a value, and the tree grows by replicating its nodes under certain conditions. The mechanism of replication is as follows: - Each node\'s value is the sum of its parent node\'s value and its own original value. - The tree grows in levels. Each level doubles the number of nodes from the previous level. - The growth stops after a given number of levels or when the values become greater than a specified threshold. You are tasked with implementing a function that simulates the growth of this tree. Input The function receives three parameters: 1. `initial_value` (integer): The value of the root node. 2. `levels` (integer): The number of levels to grow the tree. 3. `threshold` (integer): The maximum value a node is allowed to have. Output The function should return a list of lists. Each inner list represents a level of the tree, containing the node values at that level. If a node exceeds the threshold, it should not be included in the result for further levels. Example Input ``` initial_value = 1 levels = 3 threshold = 50 ``` Output ``` [ [1], [2, 3], [4, 5, 6, 7] ] ``` Explanation - Level 0: [1] (initial value) - Level 1: [2, 3] (1+1, 1+2) - Level 2: [4, 5, 6, 7] (2+2, 2+3, 3+3, 3+4) Note that the values never exceed the threshold of 50.","solution":"def replicate_tree(initial_value, levels, threshold): Simulates the growth of a replicating tree. Args: initial_value (int): The initial value of the root node. levels (int): The number of levels to grow the tree. threshold (int): The maximum value a node is allowed to have. Returns: list of lists: A list where each inner list represents a level of the tree. result = [[initial_value]] for level in range(1, levels): previous_level = result[level - 1] current_level = [] for value in previous_level: new_value1 = value + value new_value2 = value + (value + 1) if new_value1 <= threshold: current_level.append(new_value1) if new_value2 <= threshold: current_level.append(new_value2) if not current_level: break result.append(current_level) return result"},{"question":"A large construction company has instructed its engineering team to design a new building management system. The system needs to manage the elevator movements in an optimized manner. Specifically, the team wants to keep track of the current floor of an elevator after completing a series of commands. The building has `n` floors, numbered from 1 to `n`. The elevator always starts at floor 1. You are given a sequence of commands, where each command is either \\"UP X\\" or \\"DOWN X\\", representing that the elevator should move up or down by `X` floors, respectively. Note that the elevator will not move past the top floor (`n`) or below the first floor (`1`). Write a program that determines the current floor of the elevator after executing the entire sequence of commands. -----Input----- The first line contains two integers `n` and `m` (2 ≤ n ≤ 10^9, 1 ≤ m ≤ 10^5), where `n` is the number of floors in the building, and `m` is the number of commands. The next `m` lines each contain a command in the format \\"UP X\\" or \\"DOWN X\\" (1 ≤ X ≤ 10^9). -----Output----- Output a single integer representing the final floor of the elevator. -----Examples----- Input 10 3 UP 3 DOWN 1 UP 5 Output 8 Input 5 4 UP 2 UP 3 DOWN 4 DOWN 1 Output 1 -----Note----- In the first example, the elevator follows the sequence: - Starts at floor 1 - Moves UP 3 floors to floor 4 - Moves DOWN 1 floor to floor 3 - Moves UP 5 floors to floor 8 In the second example, the elevator follows the sequence: - Starts at floor 1 - Moves UP 2 floors to floor 3 - Moves UP 3 floors to floor 5 - Moves DOWN 4 floors to floor 1 (cannot go below floor 1) - Moves DOWN 1 floor remains at floor 1 (cannot go below floor 1)","solution":"def final_elevator_floor(n, m, commands): Determines the final floor of the elevator after executing a series of movement commands. Parameters: n (int): The number of floors in the building. m (int): The number of movement commands. commands (list of str): The list of commands in the format \\"UP X\\" or \\"DOWN X\\". Returns: int: The final floor of the elevator. current_floor = 1 for command in commands: direction, floors = command.split() floors = int(floors) if direction == \\"UP\\": current_floor = min(n, current_floor + floors) elif direction == \\"DOWN\\": current_floor = max(1, current_floor - floors) return current_floor"},{"question":"You are given a list of tasks `tasks` that need to be executed on a CPU. Each task is represented by a character, and each task can be executed in one unit of time. However, there is a cooling interval `n` between the same kind of task executions. Return the least number of units of times that the CPU will take to finish all the given tasks. Example 1: Input: tasks = [\\"A\\",\\"A\\",\\"A\\",\\"B\\",\\"B\\",\\"B\\"], n = 2 Output: 8 Explanation: A -> B -> idle -> A -> B -> idle -> A -> B. Example 2: Input: tasks = [\\"A\\",\\"A\\",\\"A\\",\\"B\\",\\"B\\",\\"B\\"], n = 0 Output: 6 Explanation: On this case `n` is 0, so there is no need to wait. Example 3: Input: tasks = [\\"A\\",\\"A\\",\\"A\\",\\"A\\",\\"A\\",\\"A\\",\\"B\\",\\"C\\",\\"D\\",\\"E\\",\\"F\\",\\"G\\"], n = 2 Output: 16 Explanation: One possible order is A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A. Note: - The number of tasks is in the range [1, 10000]. - The cooling interval n is in the range [0, 100].","solution":"from collections import Counter import heapq def leastInterval(tasks, n): Returns the least number of units of time that the CPU will take to finish all the given tasks. task_counts = Counter(tasks) max_heap = [-count for count in task_counts.values()] heapq.heapify(max_heap) time = 0 while max_heap: i, temp = 0, [] while i <= n: if max_heap: count = heapq.heappop(max_heap) if count < -1: temp.append(count + 1) time += 1 if not max_heap and not temp: break i += 1 for item in temp: heapq.heappush(max_heap, item) return time"},{"question":"David is planning a road trip and wants to bring his favorite snacks along. He has a list of snacks, each with a certain calorie count. However, he wants to make sure he keeps his total calorie intake under C calories during the trip. David is only interested in finding out the maximum number of different snacks he can bring without exceeding the total calorie limit C. If there are multiple ways to select the maximum number of different snacks, he prefers the way that uses the least number of total calories. Input: The first line of the input will contain a single integer T denoting the number of test cases. For each test case, the first line contains two space-separated integers: N (the number of different snacks) and C (the total calorie limit). The next line will contain N space-separated integers denoting the calorie count of each snack. Output: For every test case, print two space-separated integers in a new line: the maximum number of different snacks David can bring and the minimum total calories used to select that maximum number of snacks. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ C ≤ 10^9 1 ≤ calorie count of each snack ≤ 10^6 SAMPLE INPUT 2 5 10 1 2 3 4 5 3 3 4 5 6 SAMPLE OUTPUT 4 10 0 0 Explanation: In the first test case, David can bring snacks with calorie counts [1, 2, 3, 4] for a total of 10 calories. In the second test case, David cannot bring any snacks because all of them exceed the calorie limit of 3.","solution":"def road_trip_snacks(T, cases): results = [] for i in range(T): N, C = cases[i][:2] snacks = cases[i][2] # Sort the snacks by calorie count snacks.sort() total_calories = 0 count_snacks = 0 for calorie in snacks: if total_calories + calorie <= C: total_calories += calorie count_snacks += 1 else: break results.append((count_snacks, total_calories)) return results"},{"question":"Given an array of integers, write a function to find the contiguous subarray that sums to the largest value. Return the value of that sum. For example: ``` maxSubarraySum([-2,1,-3,4,-1,2,1,-5,4]); ``` should return ``` 6 ``` Explanation: The subarray `[4,-1,2,1]` has the largest sum, which is `6`. ```if:python Function signature: def maxSubarraySum(arr: List[int]) -> int: ``` Note: Implement the function using Kadane\'s Algorithm.","solution":"from typing import List def maxSubarraySum(arr: List[int]) -> int: Finds the contiguous subarray with the largest sum and returns the sum. Implements Kadane\'s Algorithm. :param arr: List of integers :return: Maximum sum of the contiguous subarray if not arr: return 0 current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Library Book Sort The university library has received a batch of new books which need to be organized on the shelves. Each book can be characterized by three attributes: its width, its height, and its thickness. The library has to place the books in a way that respects the following conditions: 1. Books can only be placed vertically with their height aligned. 2. No two books should overlap each other in width. 3. You have to maximize the usage of the shelf space by placing as many books as possible, without exceeding the width of the shelf. Given the dimensions of the books and the width of the shelf, determine the maximum number of books that can be placed on the shelf. Input The input consists of multiple datasets, each in the following format: w n w1 h1 t1 w2 h2 t2 ... wn hn tn A dataset consists of multiple lines. The first line contains w, the width of the shelf (1 ≤ w ≤ 10,000). The second line contains n, the number of books (1 ≤ n ≤ 1,000). The following n lines each describe a book with three integers wi, hi, and ti, representing the width, height, and thickness of the i-th book respectively (1 ≤ wi, hi, ti ≤ 1,000). The end of the input is indicated by a line containing a single zero. Output For each dataset, output the maximum number of books that can be placed on the shelf in a line. Sample Input 100 5 10 200 50 20 150 70 30 100 90 40 50 110 50 30 130 200 6 50 100 10 60 80 20 70 60 30 80 40 40 90 20 50 100 10 60 0 Output for the Sample Input 4 6 Detailed Explanation: For the first dataset: - You have a shelf width of 100. - The books have widths: 10, 20, 30, 40, 50. The optimal way to place the books are: - Place books with widths 10, 20, 30, and 40. Their combined width is 100. For the second dataset: - You have a shelf width of 200. - The books have widths: 50, 60, 70, 80, 90, and 100. The optimal way to place the books are: - Place all the books as their combined width is exactly 450, fitting within the shelf width of 200.","solution":"def max_books_on_shelf(w, books): Returns the maximum number of books that can be placed on the shelf based on the width constraint. :param w: Width of the shelf. :param books: List of tuples, where each tuple contains (width, height, thickness) of a book. :return: Maximum number of books that can be placed on the shelf. sorted_books = sorted(books, key=lambda x: x[0]) # Sort books by their width. current_width = 0 count = 0 for book in sorted_books: if current_width + book[0] <= w: current_width += book[0] count += 1 else: break return count"},{"question":"In a software company, there is an ongoing project that consists of several modules. Each module has dependencies on some other modules, which means a module can only start once all its dependent modules are completed. To ensure smooth project flow, the project manager wants an automated system to determine the order in which the modules can be completed. Your task is to write a program that will take the number of modules and their dependencies as input, and output a valid order to complete the modules. If there are multiple valid orders, you can output any of them. If it\'s not possible to complete all the modules due to a circular dependency, your program should output \\"IMPOSSIBLE\\". -----Input----- The first line of the input contains two integers 1 leq n, m leq 10^5, n denoting the total number of modules and m denoting the number of dependencies. Then m lines follow, each containing two integers 1 leq a, b leq n, indicating that module a must be completed before module b. -----Output----- The output should contain either a valid order in which the modules can be completed, in the form of a space-separated list of module numbers, or \\"IMPOSSIBLE\\" if no such order exists. -----Examples----- Sample Input: 4 4 1 2 1 3 3 4 2 4 Sample Output: 1 3 2 4 Sample Input: 3 3 1 2 2 3 3 1 Sample Output: IMPOSSIBLE","solution":"from collections import defaultdict, deque def find_order(n, m, dependencies): graph = defaultdict(list) in_degree = [0] * (n + 1) for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 queue = deque() for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) order = [] while queue: module = queue.popleft() order.append(module) for neighbor in graph[module]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) == n: return order else: return \\"IMPOSSIBLE\\""},{"question":"Given a list of integers, determine if the integers can form an arithmetic progression when arranged in some order. An arithmetic progression is a sequence of numbers in which the difference of any two successive members is a constant. Example 1: Input: arr = [3, 5, 1] Output: true Explanation: Rearranging the array as [1, 3, 5] forms an arithmetic progression with common difference 2. Example 2: Input: arr = [1, 2, 4] Output: false Explanation: No rearrangement of the array forms an arithmetic progression. Your Task: You do not need to handle input or output. Your task is to complete the function canFormArithmeticProgression() which takes a list of integers arr as a parameter and returns a boolean indicating whether the integers can form an arithmetic progression. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(1) Constraints: 1 <= arr.length <= 10^4 -10^6 <= arr[i] <= 10^6","solution":"def canFormArithmeticProgression(arr): Determines if the given list of integers can be arranged to form an arithmetic progression. Parameters: arr (list of int): The list of integers Returns: bool: True if the integers can form an arithmetic progression, False otherwise if len(arr) < 2: return True arr.sort() common_diff = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i-1] != common_diff: return False return True"},{"question":"You are required to write a function that takes a string of mixed-case alphabetical characters and determines if it contains every letter of the alphabet at least once (case-insensitive). Return `True` if the string is a pangram and `False` otherwise. A pangram is a sentence that contains every letter of the alphabet at least once. Examples ``` \\"The quick brown fox jumps over a lazy dog\\" --> True \\"Hello World\\" --> False \\"Pack my box with five dozen liquor jugs\\" --> True ```","solution":"def is_pangram(s): Determines if the input string is a pangram (contains every letter of the alphabet at least once). Args: s (str): Input string of mixed-case alphabetical characters. Returns: bool: True if the string is a pangram, False otherwise. alphabet = set(\'abcdefghijklmnopqrstuvwxyz\') return alphabet.issubset(set(s.lower()))"},{"question":"You\'re given a string consisting of lowercase alphabets, and you need to group each character by its frequency in descending order. If two characters have the same frequency, they should appear in the alphabetical order. For example: ```python Input: \\"tree\\" Output: \\"eert\\" or \\"eetr\\" Input: \\"cccaaa\\" Output: \\"cccaaa\\" or \\"aaaccc\\" Input: \\"Aabb\\" Output: \\"bbAa\\" or \\"bbAa\\" ``` Write a function that takes a string `s` and returns the characters grouped by their frequency in descending order. If two characters have the same frequency, they should appear in alphabetical order. # Function Signature ```python def frequency_sort(s: str) -> str: # Your code here ```","solution":"def frequency_sort(s: str) -> str: from collections import Counter # Count the frequency of each character freq = Counter(s) # Sort the characters first alphabetically then by frequency in descending order sorted_characters = sorted(freq.keys(), key=lambda x: (-freq[x], x)) # Build the result string based on the sorted characters and their frequencies result = \'\'.join(char * freq[char] for char in sorted_characters) return result"},{"question":"Write a function `find_frequent_elements(nums, k)` that takes a list of integers `nums` and an integer `k` as arguments and returns the `k` most frequent elements in the list. If there are multiple elements with the same frequency, return the larger elements first. The function should use a more efficient approach than O(n^2) for finding the solution. # Constraints: - The length of `nums` will be in the range `[1, 10^5]`. - The elements of `nums` can be positive or negative integers, and will be in the range `[-10^4, 10^4]`. - The value of `k` will be in the range `[1, 10^5]`. # Example: Input: ```python nums = [1,1,1,2,2,3] k = 2 ``` Output: ```python [1, 2] ``` Explanation: - The most frequent element is 1, which appears 3 times. - The second most frequent element is 2, which appears 2 times. - 3 appears only once. Input: ```python nums = [4,4,4,6,6,7,7,7,7,8,8,8,9] k = 3 ``` Output: ```python [7, 8, 4] ``` Explanation: - The most frequent element is 7, which appears 4 times. - The second most frequent element is 8, which appears 3 times. - The third most frequent element is 4, which appears 2 times. - Although 6 also appears 2 times, 4 is larger than 6 and should be chosen first.","solution":"from collections import Counter import heapq def find_frequent_elements(nums, k): Returns the k most frequent elements in the list nums. If there are multiple elements with the same frequency, return the larger numbers first. # Count the frequency of each element count = Counter(nums) # Use a heap to keep track of the top k elements heap = [] for num, freq in count.items(): # Create a tuple with (-freq, -num) to use max-heap by frequency heapq.heappush(heap, (-freq, -num)) # Extract the top k most frequent elements result = [] for _ in range(k): freq, num = heapq.heappop(heap) result.append(-num) # We negate again to get the original number return result"},{"question":"Bob\'s internet connection has been unstable recently, resulting in intermittent outages. He decided to write a program to help him predict if the next outage is likely to occur. Given the history of outages in the last n minutes, Bob will calculate the probability that the next minute will be an outage too. You are given an array of integers `h` where `h[i]` represents the state of the internet in the i-th minute. `h[i]` can be either 0 (no outage) or 1 (outage). Based on this history, compute the probability that the next minute will be an outage. Input The first line contains an integer n (1 ≤ n ≤ 1,000) — the number of minutes in the history. The second line contains n space-separated integers h[i] (0 ≤ h[i] ≤ 1) — the history of outages. Output Print a single real number — the probability that the next minute will be an outage. The answer will be accepted if the absolute or relative error does not exceed 10^-6. Examples Input 5 0 1 0 1 1 Output 0.600000 Input 3 1 0 0 Output 0.333333 Input 4 0 0 0 0 Output 0.000000 Note In the first sample, there were outages in 3 out of 5 minutes. Thus, the probability of the next minute being an outage is 3 / 5 = 0.6. In the second sample, there was an outage in 1 out of 3 minutes. Hence, the probability of the next minute being an outage is 1 / 3 ≈ 0.333333. In the third sample, there were no outages in the last 4 minutes, making the probability 0.","solution":"def outage_probability(n, h): Calculate the probability that the next minute will be an outage. Parameters: n (int): The number of minutes in the history. h (list of int): The history of outages, where 0 means no outage and 1 means outage. Returns: float: The probability that the next minute will be an outage. outage_count = sum(h) if n == 0: return 0.0 return outage_count / n"},{"question":"A nature reserve is conducting an observation study on bird migration patterns. The birds travel in flocks and they are observed resting at different locations along their migration route. Each location has a predefined observation point where the number of birds resting at that point is recorded. Given a list of observation points and the number of birds observed at each point, you need to identify the maximum number of birds observed at any given point in a subarray of K consecutive observation points. The challenge is to efficiently compute the maximum number of birds for multiple subarrays of length K. Write a program that reads the number of observation points and the number of birds observed at each point, along with the value of K, and outputs the maximum number of birds for each subarray of length K. **Input** The input consists of multiple datasets. Each dataset starts with two integers, n and K (1 ≤ K ≤ n ≤ 100,000), where n denotes the number of observation points and K denotes the length of the subarray. The following line contains n integers separated by spaces, where each integer represents the number of birds observed at each observation point. The input ends with a dataset where n and K are both 0, which should not be processed. **Output** For each dataset, output the maximum number of birds observed in each subarray of length K, each on a new line. If there are no such subarrays, output 0. **Examples** **Input** ``` 7 3 1 3 5 7 9 2 6 5 2 4 8 1 2 6 0 0 ``` **Output** ``` 9 8 ``` **Explanation of examples:** 1. In the 1st dataset, the maximum number of birds in each subarray of length 3 are: - Subarray (1,3,5) -> Maximum: 5 - Subarray (3,5,7) -> Maximum: 7 - Subarray (5,7,9) -> Maximum: 9 - Subarray (7,9,2) -> Maximum: 9 - Subarray (9,2,6) -> Maximum: 9 2. In the 2nd dataset, the maximum number of birds in each subarray of length 2 are: - Subarray (4,8) -> Maximum: 8 - Subarray (8,1) -> Maximum: 8 - Subarray (1,2) -> Maximum: 2 - Subarray (2,6) -> Maximum: 6","solution":"def max_birds_in_subarrays(n, K, observations): Returns the maximum number of birds observed in each subarray of length K. if n == 0 or K == 0: return [] max_counts = [] for i in range(n - K + 1): max_counts.append(max(observations[i:i+K])) return max_counts def process_datasets(datasets): results = [] for data in datasets: n, K = data[0] if n == 0 and K == 0: break observations = data[1] results.append(max_birds_in_subarrays(n, K, observations)) return results"},{"question":"Write a function that takes a positive integer `m` and returns the smallest number whose digits multiply to `m`. If no such number exists, the function should return -1. Example 1: Input: m = 36 Output: 49 Explanation: 4 * 9 = 36 and 49 is the smallest such number. Example 2: Input: m = 19 Output: -1 Explanation: There is no combination of digits that multiply to 19. Your Task: You do not need to read input or print anything. Your task is to complete the function `smallestNumWithProduct` which takes an integer `m` as input parameter and returns the smallest number whose digits multiply to `m`. If no such number exists, it returns -1. Expected Time Complexity: O(m) Expected Auxiliary Space: O(1) Constraints: 1 ≤ m ≤ 100","solution":"def smallestNumWithProduct(m): if m == 1: return 1 # 1 is the smallest number that multiplies to 1 # Find factors for numbers between 2 and 9 factors = [] for i in range(9, 1, -1): while m % i == 0: factors.append(i) m //= i if m > 1: return -1 # If m is still greater than 1, it means it had a prime factor > 9 # Convert the factors into a number factors.sort() smallest_number = int(\'\'.join(map(str, factors))) return smallest_number"},{"question":"Given a string s and an integer n, divide the string into n equal parts. If the string cannot be divided into exactly n parts, return an empty array. Otherwise, return an array containing the n parts in the order they appear in the string. Example 1: Input: s = \\"abcdefghij\\", n = 5 Output: [\\"ab\\", \\"cd\\", \\"ef\\", \\"gh\\", \\"ij\\"] Explanation: The string can be divided into 5 parts each of length 2. Example 2: Input: s = \\"abcde\\", n = 3 Output: [] Explanation: The string cannot be divided into 3 equal parts. Example 3: Input: s = \\"abcabcab\\", n = 4 Output: [\\"ab\\", \\"ca\\", \\"bc\\", \\"ab\\"] Explanation: The string can be divided into 4 parts each of length 2. Your Task: You don\'t need to read or print anything. Your task is to complete the function divideString() which takes the string s and integer n as input and returns an array containing the n parts of the string if it can be divided equally, otherwise an empty array. Expected Time Complexity: O(|s|) Expected Space Complexity: O(n) Constraints: 1 <= |s| <= 100000 1 <= n <= |s|","solution":"def divideString(s, n): Divides the string s into n equal parts. If the string cannot be divided into exactly n parts, return an empty array. length = len(s) if length % n != 0: return [] part_length = length // n return [s[i * part_length:(i + 1) * part_length] for i in range(n)]"},{"question":"Ellora is organizing a dance competition where each participant performs with a unique energy level. She wants to arrange the participants in a line such that the difference in energy levels between any two consecutive participants is at least a certain value k. Given the energy levels of the participants, determine if it\'s possible to arrange them in the desired way. If it is possible, provide a possible arrangement. If not, print \\"IMPOSSIBLE\\". -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains two integers n and k (1 le n le 100; 1 le k le 100) — the number of participants and the minimum required difference in energy levels, respectively. The second line of each test case contains n space-separated integers e_1, e_2, ..., e_n (1 le e_i le 1000) — the energy levels of the participants. It is guaranteed that the energy levels are pairwise distinct. -----Output----- For each test case, if it is possible to arrange the participants in the desired way, print \\"POSSIBLE\\" followed by the rearranged array of energy levels. Otherwise, print \\"IMPOSSIBLE\\". -----Examples----- Input 3 3 2 4 1 7 4 3 10 4 1 7 2 6 5 11 Output POSSIBLE 1 4 7 POSSIBLE 1 4 7 10 POSSIBLE 5 11 -----Note----- In the first test case, the participants can be arranged as 1, 4, 7. The difference between each pair of adjacent participants is 3, which is greater than or equal to 2. In the second test case, an acceptable arrangement is 1, 4, 7, 10. The differences are 3, 3, 3, all of which are greater than or equal to 3. In the third test case, the participants are already given as 5 and 11, and the difference is 6, which is greater than or equal to 6.","solution":"def arrange_participants(test_cases): results = [] for t in test_cases: n, k, energy_levels = t energy_levels.sort() possible = True for i in range(1, n): if energy_levels[i] - energy_levels[i-1] < k: possible = False break if possible: results.append(f\\"POSSIBLEn{\' \'.join(map(str, energy_levels))}\\") else: results.append(\\"IMPOSSIBLE\\") return results def process_input(input_data): input_lines = input_data.split(\\"n\\") t = int(input_lines[0]) test_cases = [] line = 1 for _ in range(t): n, k = map(int, input_lines[line].split()) energy_levels = list(map(int, input_lines[line + 1].split())) test_cases.append((n, k, energy_levels)) line += 2 return test_cases def main(input_data): test_cases = process_input(input_data) return arrange_participants(test_cases)"},{"question":"You are given a matrix of size n times m filled with integers. You need to determine the length of the longest increasing path in this matrix. From each cell, you can move in four directions: left, right, up, or down. You cannot move diagonally or outside the boundary of the matrix. -----Input----- The first line contains two integers n and m (1 le n, m le 200) — the dimensions of the matrix. Next n lines contain m integers each, the elements of the matrix. -----Output----- Print one integer: the length of the longest increasing path. -----Example----- Input 3 3 9 9 4 6 6 8 2 1 1 Output 4 -----Note----- In the given example, one of the longest increasing paths is 1 -> 2 -> 6 -> 9. To solve this problem, you might consider using dynamic programming with memoization or depth-first search (DFS) with caching to explore all possible paths in the matrix.","solution":"def longest_increasing_path(matrix): Returns the length of the longest increasing path in the matrix. if not matrix or not matrix[0]: return 0 def dfs(x, y): if memo[x][y]: return memo[x][y] length = 1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(matrix) and 0 <= ny < len(matrix[0]) and matrix[nx][ny] > matrix[x][y]: length = max(length, 1 + dfs(nx, ny)) memo[x][y] = length return length memo = [[0] * len(matrix[0]) for _ in range(len(matrix))] return max(dfs(x, y) for x in range(len(matrix)) for y in range(len(matrix[0])))"},{"question":"A virus outbreak monitoring system needs to detect the spread patterns based on daily data to predict future developments. Each day, the system logs infection counts from various locations represented in the form of a list of integers. The authorities are interested in identifying \\"outbreak days\\" when a location experiences more infections than on any previous day at the same location. You are tasked to write a program that identifies the outbreak days based on the data provided. An outbreak day is defined as the first day when any infection count at a location is greater than all previous infection counts at that location. Input The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of locations. Each of the next `n` lines contains a list of integers separated by spaces, representing daily infection counts for that location in chronological order. Each list contains between 1 and 100 integers (0 ≤ infection count ≤ 10000). Output For each location, output the first day (1-based index) where an outbreak was detected, or -1 if no such day exists. Examples Input 3 1 3 2 5 4 2 2 4 4 5 1 1 1 1 1 1 Output 2 3 -1 Explanation - For the first location, the infection counts are [1, 3, 2, 5, 4]. The first outbreak day is day 2 because 3 > 1. - For the second location, the infection counts are [2, 2, 4, 4, 5, 1]. The first outbreak day is day 3 because 4 > 2, 2. - For the third location, the counts are [1, 1, 1, 1, 1], with no days ever surpassing any previous counts, so the output is -1.","solution":"def find_outbreak_days(data): Identify the outbreak days based on daily infection counts for each location. Parameters: data (list of list of int): A 2D list where each sublist contains infection counts of a location. Returns: list of int: List of first outbreak days (1-based index) for each location or -1 if no outbreak day exists. outbreak_days = [] for infection_counts in data: max_so_far = -1 outbreak_day = -1 for day, count in enumerate(infection_counts): if count > max_so_far: if day > 0: # Outbreak day can\'t be the first day outbreak_day = day + 1 # Convert 0-based index to 1-based index break max_so_far = count outbreak_days.append(outbreak_day) return outbreak_days"},{"question":"A group of friends plans to visit a park in their city. They plan their visit such that they enter the park at the same time and stay for a specific duration. The park management logs the entry and exit times of every visitor in the format HH:MM where HH is the hour (00 to 23) and MM is the minute (00 to 59). The friends want to find out the maximum number of unique visitors in the park at any given time during their stay based on the log. Write a function that: 1. Takes the number of visitors `M` and an array of tuples, where each tuple represents the entry and exit times of a visitor. 2. Returns the maximum number of visitors present in the park at the same time. Input Format: - First line contains an integer T - number of test cases. - Each test case starts with an integer M, the number of visitors. - For each visitor, two strings representing the entry time and the exit time in HH:MM format on the same day. Output Format: - Output T lines, each containing a single integer denoting the maximum number of visitors present in the park at the same time for the corresponding test case. Constraints: 1. 1 ≤ T ≤ 10 2. 1 ≤ M ≤ 100 3. All given times are valid and in the range from 00:00 to 23:59 (inclusive). 4. Each visitor\'s entry and exit time are different, and every visitor stays for at least 1 minute in the park. SAMPLE INPUT 2 3 09:00 10:00 09:30 11:00 10:15 11:30 4 08:00 08:30 08:15 09:00 08:45 09:30 09:00 09:45 SAMPLE OUTPUT 2 3 Explanation Test Case #1: - Visitor 1: 09:00 - 10:00 - Visitor 2: 09:30 - 11:00 - Visitor 3: 10:15 - 11:30 The maximum number of visitors in the park at any given time is 2 (between 09:30 and 10:00, and then again from 10:15 to 11:00). Test Case #2: - Visitor 1: 08:00 - 08:30 - Visitor 2: 08:15 - 09:00 - Visitor 3: 08:45 - 09:30 - Visitor 4: 09:00 - 09:45 The maximum number of visitors in the park at any given time is 3 (between 09:00 and 09:30).","solution":"def max_visitors(durations): Returns the maximum number of visitors present in the park at the same time. :param durations: List of tuples containing entry and exit times in HH:MM format. :return: Maximum number of visitors present at the same time. events = [] for entry, exit in durations: events.append((entry, \'entry\')) events.append((exit, \'exit\')) events.sort() current_visitors = 0 max_visitors = 0 for time, event_type in events: if event_type == \'entry\': current_visitors += 1 if current_visitors > max_visitors: max_visitors = current_visitors else: current_visitors -= 1 return max_visitors def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) idx = 1 results = [] for _ in range(T): M = int(lines[idx]) idx += 1 durations = [] for _ in range(M): entry, exit = lines[idx].split() durations.append((entry, exit)) idx += 1 results.append(max_visitors(durations)) return results"},{"question":"-----Input----- There is a number N representing the number of participants wishing to attend a workshop where 1 le N le 100000. Following the number N are N lines, each consisting of an integer A_i (1 le A_i le 100000) representing the interest level of the i-th participant. You need to perform Q operations on this list of integers, where 1 le Q le 100000. Each operation can be one of the following: - \\"QUERY X Y\\" : Return the sum of interest levels from the X-th to the Y-th participants (1-based index). - \\"UPDATE X V\\" : Update the interest level of the X-th participant to V. -----Output----- For each \\"QUERY\\" operation, output the resulting sum of interest levels. -----Examples----- Sample Input: 5 3 1 4 1 5 3 QUERY 1 3 UPDATE 2 6 QUERY 2 5 Sample Output: 8 16","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) # Fenwick Tree is 1-based indexed def update(self, index, delta): # Increase the value at `index` by `delta` while index <= self.size: self.tree[index] += delta index += index & -index def query(self, index): # Query the prefix sum up to and including `index` sum_ = 0 while index > 0: sum_ += self.tree[index] index -= index & -index return sum_ def range_query(self, left, right): # Query the sum from `left` to `right` return self.query(right) - self.query(left - 1) def solve_workshop(N, interest_levels, operations): fenwick_tree = FenwickTree(N) current_levels = [0] * (N + 1) # Initialize the Fenwick Tree with initial interest levels for i in range(1, N + 1): current_levels[i] = interest_levels[i - 1] fenwick_tree.update(i, interest_levels[i - 1]) results = [] for operation in operations: if operation[0] == \'QUERY\': X, Y = operation[1], operation[2] results.append(fenwick_tree.range_query(X, Y)) elif operation[0] == \'UPDATE\': X, V = operation[1], operation[2] delta = V - current_levels[X] fenwick_tree.update(X, delta) current_levels[X] = V return results"},{"question":"Alice has a list of integers representing the costs of different items she can buy. She wants to purchase exactly three different items such that the sum of their costs is divisible by a given number k. Help Alice determine if it is possible to choose exactly three different items with such criteria. -----Input----- The first line contains two integers n and k (3 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the number of items and the divisor. The second line contains n integers c_1, c_2, ..., c_{n} (1 ≤ c_i ≤ 10^9) — the costs of items. -----Output----- In the only line print \\"YES\\" if she can select exactly three different items such that their costs sum up to a multiple of k, and \\"NO\\" otherwise. -----Examples----- Input 5 6 1 5 3 2 4 Output YES Input 4 10 1 2 3 4 Output NO -----Note----- For the first example, she can use the items with costs 1, 2, and 3, because 1 + 2 + 3 = 6, which is divisible by 6. For the second example, there is no way to choose three different items such that their sum is a multiple of 10.","solution":"def can_choose_three_items(n, k, costs): Returns \\"YES\\" if it is possible to select exactly three different items such that their costs sum up to a multiple of k, otherwise \\"NO\\". :param n: int :param k: int :param costs: List[int] :return: str (\\"YES\\" or \\"NO\\") from itertools import combinations # Generate all combinations of 3 different items for combo in combinations(costs, 3): if sum(combo) % k == 0: return \\"YES\\" return \\"NO\\""},{"question":"You are given a grid of size m x n, initialized with all zeros. You are also given several update operations. Each operation is represented by an array where the first and second elements represent the number of rows and columns to increment by 1 for all elements of the grid within that submatrix. Execute the specified operations and return the number of cells in the grid that contain the maximum integer. Example 1: Input: m = 3, n = 3, operations = [[2,2],[3,3]] Output: 4 Explanation: After performing the operations, the grid is filled as follows: 1 1 0 1 1 0 0 0 0 Then, perform the second operation: 2 2 1 2 2 1 1 1 0 The number of cells with the maximum integer 2 is 4. Example 2: Input: m = 4, n = 4, operations = [[3,3],[2,2]] Output: 4 Example 3: Input: m = 2, n = 2, operations = [] Output: 4 Explanation: Since there are no operations, all cells contain 0, which is the maximum value. Constraints: 1 <= m, n <= 10^4 0 <= operations.length <= 10^4 1 <= operations[i][0] <= m 1 <= operations[i][1] <= n","solution":"def maxCount(m, n, ops): Returns the number of cells containing the maximum integer in the grid after performing the given operations. if not ops: return m * n # Find the minimum values of rows and columns from the operations min_row = min(op[0] for op in ops) min_col = min(op[1] for op in ops) # The number of cells with the maximum integer return min_row * min_col"},{"question":"# Task Write a function to determine whether an input string of parentheses (composed only of characters \'(\' and \')\') is valid. A string is considered valid if: 1. Every open parenthesis \'(\' has a corresponding close parenthesis \')\'. 2. Open parentheses must be closed in the correct order. # Input - A string `s` which contains only characters \'(\' and \')\'. (1 <= len(s) <= 10^4) # Output - A boolean value (True or False) indicating whether the input string is valid. # Example For `s = \\"()\\"`, the output should be `True`. For `s = \\"()[]{}(\\"`, the output should be `False`. For `s = \\"(())\\"`, the output should be `True`. For `s = \\"())\\"`, the output should be `False`. For `s = \\"\\"`, the output should be `True`. # Note - An empty string is considered valid.","solution":"def is_valid_parentheses(s): Determines whether an input string of parentheses is valid. Args: s (str): The input string containing only \'(\' and \')\'. Returns: bool: True if the string is valid, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack"},{"question":"Rahul is a data scientist tasked with cleaning up a dataset. He has a list of integers, which may contain duplicate entries. His job is to remove all the duplicate numbers and return a list with unique numbers sorted in non-descending order. To achieve this, he decided to create a function. Can you help him implement it? Input The input consists of two lines: 1. The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the list. 2. The second line contains n integers separated by spaces — the elements of the list, each of which is between 1 and 1000 inclusive. Output Output a single line containing the unique elements of the list in non-descending order, separated by spaces. Examples Input 5 4 5 6 6 4 Output 4 5 6 Input 7 10 20 20 10 30 40 50 Output 10 20 30 40 50","solution":"def remove_duplicates_and_sort(n, numbers): Given a list of integers, remove duplicates and return the list of unique numbers sorted in non-descending order. :param n: Number of elements in the list :param numbers: List of integers containing n numbers :return: List of unique numbers sorted in non-descending order unique_numbers = list(set(numbers)) unique_numbers.sort() return unique_numbers def format_output(numbers): Format the list of numbers into a space-separated string :param numbers: List of integers :return: String of space-separated integers return \' \'.join(map(str, numbers))"},{"question":"You are given an array `a` consisting of `n` positive integers. A snippet of code is defined as being between any two indices `i` and `j` (1 ≤ i ≤ j ≤ n). The value of a snippet is defined as the sum of the distinct elements in that snippet. You are asked to find the maximum value of any snippet of the array. Input The first line contains an integer `n` (1 ≤ n ≤ 200 000) — the number of elements in the array `a`. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the elements of the array. Output Print the maximum value of any snippet of the array. Examples Input 6 1 2 1 3 4 2 Output 10 Input 5 5 5 5 5 5 Output 5 Input 4 1 2 3 4 Output 10 Note In the first example, the snippet between indices 2 and 5 contains elements [2, 1, 3, 4]. The sum of the distinct elements in this snippet is 2 + 1 + 3 + 4 = 10. In the second example, the entire array consists of the same number repeated, so the sum of the distinct elements is just 5. In the third example, the snippet containing all elements [1, 2, 3, 4] has the sum of distinct elements equal to 10.","solution":"def max_snippet_value(n, a): Finds the maximum value of any snippet of the array, where a snippet is defined by the sum of its distinct elements. :param n: int - Number of elements in the array a. :param a: list of int - The array of integers. :return: int - The maximum value of any snippet. if n == 0: return 0 # Using a sliding window to find the maximum sum of distinct elements in a snippet seen = set() # To store distinct elements within the current window left = 0 current_sum = 0 max_sum = 0 for right in range(n): while a[right] in seen: seen.remove(a[left]) current_sum -= a[left] left += 1 seen.add(a[right]) current_sum += a[right] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an array of integers, return a new array where each element is the product of all the integers in the original array except for the element at that index. # Examples ``` arrayProduct([1, 2, 3, 4]) -> [24, 12, 8, 6] arrayProduct([5, 6, 7]) -> [42, 35, 30] arrayProduct([2, 4, 6, 8, 10]) -> [1920, 960, 640, 480, 384] ```","solution":"def arrayProduct(arr): Returns a new array where each element is the product of all the integers in the original array except for the element at that index. n = len(arr) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n # Calculate left products for i in range(1, n): left_products[i] = left_products[i - 1] * arr[i - 1] # Calculate right products for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * arr[i + 1] # Calculate result for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Given two strings `word1` and `word2`, return the minimum number of steps required to make `word1` and `word2` the same. In one step, you can delete exactly one character in either string. Example 1: Input: word1 = \\"sea\\", word2 = \\"eat\\" Output: 2 Explanation: You need one step to make \\"sea\\" to \\"ea\\" and another step to make \\"eat\\" to \\"ea\\". Example 2: Input: word1 = \\"leetcode\\", word2 = \\"etco\\" Output: 4 Explanation: You can delete the characters \\"letd\\" from \\"leetcode\\" and \\"co\\" from \\"etco\\" to make both strings equal to \\"etco\\". Constraints: - 1 <= word1.length, word2.length <= 1000 - word1 and word2 consist of only lowercase English letters.","solution":"def minDistance(word1, word2): Returns the minimum number of steps required to make word1 and word2 the same by deleting characters. m, n = len(word1), len(word2) # Create a DP table where dp[i][j] represents the length of longest common subsequence of word1[:i] and word2[:j] dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of the longest common subsequence lcs = dp[m][n] # The minimum number of deletions required return (m - lcs) + (n - lcs)"},{"question":"You are managing a web service that processes requests from users. Each request has a particular size associated with it, and the server can only handle up to a certain total size of requests at any given time. You want to implement an algorithm that determines the maximum number of requests the server can handle simultaneously without exceeding its capacity. Given an array `requests` where `requests[i]` is the size of the i-th request, and an integer `capacity` representing the maximum total size the server can handle, return the maximum number of requests that can be simultaneously processed without exceeding the `capacity`. Input: - An array of integers `requests` where `0 ≤ requests[i] ≤ 10^4` - An integer `capacity` where `0 ≤ capacity ≤ 10^4` Output: - An integer representing the maximum number of requests that can be processed simultaneously. Constraints: 1 ≤ len(requests) ≤ 1000 Example: Input: ``` requests = [4, 8, 5, 9] capacity = 20 ``` Output: ``` 3 ``` Explanation: You can process the requests with sizes 4, 5, and 8, which have a total size of 17, without exceeding the capacity of 20. This is the maximum number of requests you can process simultaneously.","solution":"def max_requests(requests, capacity): Determine the maximum number of requests that can be handled without exceeding the capacity. Args: requests (list): List of request sizes. capacity (int): Maximum total size the server can handle. Returns: int: Maximum number of requests that can be handled. requests.sort() total_size = 0 count = 0 for req in requests: if total_size + req <= capacity: total_size += req count += 1 else: break return count"},{"question":"In a mystical land of coding, there are n wizards, each with a unique power level. The wizards often form teams to go on quests. A team of wizards is considered harmonious if the sum of the power levels of its members is exactly equal to a given magical number k. You are asked to find out the number of distinct pairs of wizards that can form a harmonious team. Two pairs (i, j) and (j, i) are considered the same and should be counted only once. Input The first line contains two integers n (1 ≤ n ≤ 2 * 10^5), the number of wizards, and k (1 ≤ k ≤ 2 * 10^9), the magical number. The second line contains n integers which represent the power levels of the wizards. The power levels are distinct and range from 1 to 10^9. Output Print a single integer — the number of harmonious pairs of wizards. Examples Input 5 7 1 2 3 4 6 Output 2 Input 4 10 5 5 5 5 Output 0 Input 3 3 1 2 4 Output 1 Note In the first example, the pairs (3, 4) and (1, 6) are harmonious pairs. In the second example, there are no pairs that sum up to the magical number 10. In the third example, only the pair (1, 2) is harmonious.","solution":"def count_harmonious_pairs(n, k, power_levels): Returns the number of distinct pairs of wizards forming a harmonious team. power_set = set(power_levels) count = 0 for power in power_levels: if (k - power) in power_set and (k - power) != power: count += 1 power_set.remove(power) power_set.remove(k - power) return count"},{"question":"You have been provided two arrays: \'nums1\' and \'nums2\', both of which are sorted in non-decreasing order. Your task is to find the intersection of these two arrays, but the result must also be sorted in non-decreasing order and should not contain any duplicates. Write a function that takes two integer arrays \'nums1\' and \'nums2\' and returns an array that is the intersection of \'nums1\' and \'nums2\'. Example 1: Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2] Example 2: Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [4,9] Note: - Each element in the result must be unique. - The result can be in any order.","solution":"def intersection(nums1, nums2): Find the intersection of two sorted arrays and return the result in sorted order without duplicates. # Convert both lists to sets to remove duplicates and find the intersection set1 = set(nums1) set2 = set(nums2) # Find the intersection result = list(set1 & set2) # Sort the result result.sort() return result"},{"question":"You are given a sequence of n integers. Your task is to construct a new sequence by rearranging the original sequence in such a way that the sum of absolute differences of consecutive elements is maximized. For example, for the sequence [1, 3, 4, 2], one possible arrangement to maximize the sum is [1, 4, 2, 3]. The sum of absolute differences for this arrangement is |1-4| + |4-2| + |2-3| = 3 + 2 + 1 = 6. -----Input----- The first line contains a single integer t (1 le t le 100) – the number of test cases. The first line of each test case contains a single integer n (2 le n le 100) – the length of the sequence. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) – the elements of the sequence. -----Output----- For each test case, print n integers – the rearranged sequence that maximizes the sum of absolute differences of consecutive elements. If there are multiple valid answers, print any of them. -----Examples----- Input 2 4 1 3 4 2 3 10 20 30 Output 1 4 2 3 10 30 20 -----Note----- None","solution":"def rearrange_for_max_difference(n, sequence): sequence.sort() result = [] i, j = 0, n - 1 while i <= j: if i != j: result.append(sequence[j]) result.append(sequence[i]) else: result.append(sequence[i]) i += 1 j -= 1 return result def process_input(t, cases): results = [] for case in cases: n = case[0] sequence = case[1] rearranged_sequence = rearrange_for_max_difference(n, sequence) results.append(rearranged_sequence) return results"},{"question":"Given a list of integers, return the first element that appears after the first odd number and before the first even number. If no such element exists, return -1. Note that the list will have at least one odd and one even number. Input will be a list of integers with length > 0.","solution":"def find_element_between_odd_and_even(nums): Given a list of integers, returns the first element that appears after the first odd number and before the first even number. If no such element exists, returns -1. found_odd = False for i, num in enumerate(nums): if num % 2 != 0: found_odd = True elif num % 2 == 0 and found_odd: if i - 1 >= 0: return nums[i-1] break return -1"},{"question":"Write a function to find the maximum subarray sum for a given array of integers, using the Divide and Conquer technique. The array can contain both negative and positive numbers. Example 1: Input: arr[] = {2, 3, 4, 5, 7} Output: 21 Explanation: The sum of entire array is 21, which is the maximum subarray sum. Example 2: Input: arr[] = {-2, -3, 4, -1, -2, 1, 5, -3} Output: 7 Explanation: The subarray with maximum sum is {4, -1, -2, 1, 5}, with sum 7. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxSubArraySum() which takes an array arr[] and its size N as inputs and returns the maximum subarray sum using the Divide and Conquer approach. Expected Time Complexity: O(N*log(N)). Expected Auxiliary Space: O(log(N)). Constraints: 1 ≤ N ≤ 10^3 -10^4 ≤ arr[i] ≤ 10^4","solution":"def maxCrossingSum(arr, low, mid, high): # Include elements on the left of mid. left_sum = float(\'-inf\') sum_now = 0 for i in range(mid, low - 1, -1): sum_now += arr[i] if sum_now > left_sum: left_sum = sum_now # Include elements on the right of mid right_sum = float(\'-inf\') sum_now = 0 for i in range(mid + 1, high + 1): sum_now += arr[i] if sum_now > right_sum: right_sum = sum_now # Return sum of elements on left and right of mid return left_sum + right_sum def maxSubArraySumUtil(arr, low, high): # Base Case: Only one element if low == high: return arr[low] # Find middle point mid = (low + high) // 2 # Return maximum of following three possible cases # a) Maximum subarray sum in left half # b) Maximum subarray sum in right half # c) Maximum subarray sum such that the subarray crosses the midpoint return max(maxSubArraySumUtil(arr, low, mid), maxSubArraySumUtil(arr, mid + 1, high), maxCrossingSum(arr, low, mid, high)) def maxSubArraySum(arr, n): return maxSubArraySumUtil(arr, 0, n - 1)"},{"question":"Tom loves designing board games and wants to create a new game that involves moving a character on a grid. The grid is represented as a matrix of cells, where each cell can either be passable or impassable. Tom needs help to ensure that the character can reach a specific cell from a starting cell following a set of moves. Given a matrix of size `n x m` where `0` represents a passable cell and `1` represents an impassable cell, determine if the character can move from a starting cell `(sr, sc)` to a target cell `(tr, tc)`. The character can move to an adjacent cell in four possible directions: up, down, left, or right, but cannot move diagonally and cannot pass through impassable cells. -----Input----- The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the dimensions of the matrix. The next `n` lines each contain `m` integers (either 0 or 1) that represent the grid. The following line contains four integers `sr, sc, tr, tc` (1 ≤ sr, tr ≤ n; 1 ≤ sc, tc ≤ m) — the starting row, starting column, target row, and target column, respectively. -----Output----- Print \\"YES\\" if it is possible for the character to reach the target cell from the start cell. Otherwise, print \\"NO\\". -----Examples----- Input 5 7 0 0 0 1 0 0 0 0 1 0 1 0 1 0 0 1 0 0 0 1 0 0 0 1 1 0 1 0 1 0 0 0 0 0 0 1 1 5 7 Output YES Input 3 3 0 1 0 1 0 1 0 1 0 1 1 3 3 Output NO -----Note----- In the first example, the character can reach the target cell following a valid path. In the second example, there is no possible path for the character to reach the target cell due to the impassable cells blocking the way.","solution":"def can_reach_target(n, m, grid, sr, sc, tr, tc): Determines if it is possible to move from the starting cell (sr, sc) to the target cell (tr, tc) in the given grid. Parameters: n (int): number of rows in the grid. m (int): number of columns in the grid. grid (list of list of int): n x m grid with 0s and 1s (0: passable, 1: impassable). sr (int): starting row. sc (int): starting column. tr (int): target row. tc (int): target column. Returns: str: \\"YES\\" if the character can reach the target cell, otherwise \\"NO\\". from collections import deque # Convert input positions to 0-based index sr, sc, tr, tc = sr - 1, sc - 1, tr - 1, tc - 1 # Directions array for moving in 4 possible directions: up, down, left, right. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if the starting or target cell is impassable if grid[sr][sc] == 1 or grid[tr][tc] == 1: return \\"NO\\" # Queue for BFS queue = deque([(sr, sc)]) # Set to keep track of visited cells visited = set((sr, sc)) while queue: current_r, current_c = queue.popleft() # If we are at the target cell, return \\"YES\\" if current_r == tr and current_c == tc: return \\"YES\\" # Explore all 4 possible directions for dr, dc in directions: new_r, new_c = current_r + dr, current_c + dc # Check if the new position is within bounds and is passable and not visited yet if 0 <= new_r < n and 0 <= new_c < m and (new_r, new_c) not in visited and grid[new_r][new_c] == 0: queue.append((new_r, new_c)) visited.add((new_r, new_c)) return \\"NO\\""},{"question":"AltF4 and CtrlF4 are taking on another challenge involving binary trees. They have a single binary tree T and need to partition it into two trees by removing one edge. AltF4 and CtrlF4 will each take one resulting tree and continue working on it separately. As usual, because they are best friends, they want to make sure the total number of nodes in both resulting trees is as close to equal as possible. However, they also have some additional constraints: 1. They want to remove the edge in such a way that the absolute difference in the number of nodes between the two resulting trees is minimized. 2. If there are multiple such edges that produce the same minimal difference, they will choose the one that occurs at the smallest depth (distance from the root). Your task is to help them identify which edge to remove to satisfy their conditions. Input & Output: The input consists of multiple test cases. Each test case starts with an integer N, representing the number of nodes in the binary tree. The next N-1 lines describe the edges of the tree, given as pairs of integers (u, v) representing an edge between node u and node v (1 ≤ u, v ≤ N). The tree is rooted at node 1. For each test case, output the indices of the nodes defining the edge to be removed, ensuring that the first node in the pair is closer to the root (if they are at the same depth in the original tree, either order is acceptable). Constraints: 1 ≤ T ≤ 100 (number of test cases) 2 ≤ N ≤ 1000 (number of nodes in each tree) SAMPLE INPUT 2 3 1 2 1 3 4 1 2 1 3 3 4 SAMPLE OUTPUT 1 2 1 3 Explanation: 1. There are 3 nodes and the possible edges to remove are between 1-2 and 1-3. Removing either edge results in trees of sizes [1,2] and [1,2] respectively, which is the optimal split with absolute difference = 0. 2. There are 4 nodes with edges: 1-2, 1-3, and 3-4. Removing edge 1-3 results in trees of sizes [1,1] and [2,3]. Removing edge 3-4 results in [3,1] and [1,2], which has absolute difference = 1. Therefore, the optimal move is to remove edge 1-3 with an absolute difference of 0, occurring at the smallest depth.","solution":"def find_best_edge(trees): results = [] def dfs(node, parent): subtree_size = 1 node_depth = depths[node] for neighbor in tree[node]: if neighbor != parent: depths[neighbor] = node_depth + 1 neighbor_size = dfs(neighbor, node) subtree_size += neighbor_size # Check if this edge provides a better partition abs_diff = abs(total_nodes - 2 * neighbor_size) if abs_diff < min_diff[0] or (abs_diff == min_diff[0] and node_depth < min_diff[1]): min_diff[0] = abs_diff min_diff[1] = node_depth best_edge[0] = (node, neighbor) return subtree_size for tree_edges in trees: N = tree_edges[0] edges = tree_edges[1] # Initialize the tree structure as an adjacency list tree = [[] for _ in range(N + 1)] for u, v in edges: tree[u].append(v) tree[v].append(u) total_nodes = N min_diff = [float(\'inf\'), float(\'inf\')] # [min_diff, depth] best_edge = [None] depths = [-1] * (N + 1) depths[1] = 0 # root node has depth 0 # Perform DFS from node 1 (root) dfs(1, -1) # Ensure the edge is in correct order (parent, child) if depths[best_edge[0][0]] > depths[best_edge[0][1]]: best_edge[0] = (best_edge[0][1], best_edge[0][0]) results.append(best_edge[0]) return results"},{"question":"You need to write a function that generates a simple diamond pattern of asterisks (\'*\'). The size of the diamond (i.e., the number of lines containing asterisks) is determined by an integer `n`, which is always an odd number. Example 1: input: 3 Output: ``` * *** ***** *** * ``` Example 2: input: 5 Output: ``` * *** ***** ******* ********* ******* ***** *** * ``` Your Task: You don\'t need to input anything. Complete the function `printDiamond()` which takes an integer `n` as input parameter and prints the diamond pattern. Constraints: 1 <= n <= 21","solution":"def printDiamond(n): Prints a diamond pattern of asterisks with the given integer n. if n % 2 == 0: return \\"n must be an odd number\\" mid = n // 2 # Generate the upper part of the diamond for i in range(mid + 1): stars = \'*\' * (2 * i + 1) spaces = \' \' * (mid - i) print(spaces + stars) # Generate the lower part of the diamond for i in range(mid - 1, -1, -1): stars = \'*\' * (2 * i + 1) spaces = \' \' * (mid - i) print(spaces + stars)"},{"question":"You are given the task to help an archaeologist decipher an ancient, encrypted scroll. The enigma reveals a sequence of distinct digits hidden in a string. The digits are guaranteed to be between 0 and 9, inclusive, and each digit appears exactly once within the string. Although the original order of digits is unknown, the deciphered sequence must be sorted in ascending order. You are provided with a special tool that can perform the following operation to assist in identifying the digits within the string: * Given a single-digit d (0 ≤ d ≤ 9), the tool returns the position of d within the string. If d is not present in the string, it will return -1. Your goal is to determine the sorted sequence of digits contained in the string. **Interaction Description:** 1. You will first be given an integer t (1 ≤ t ≤ 100), the number of test cases. 2. For each test case, you will be given an integer n (1 ≤ n ≤ 10), the length of the string containing distinct digits. 3. You are allowed to make up to 10 queries for each test case. 4. Each query will be in the form of \\"? d\\" and will consume one query. 5. The query returns an integer p (0 ≤ p < n) indicating the position of digit d in the string, or -1 if d is not present. 6. After determining the digits, you must print the sorted sequence of digits as \\"! sorted_digits\\". **Example:** **Input:** ``` 2 4 7 ``` **Output:** ``` ? 0 -1 ? 1 3 ? 2 -1 ? 3 2 ? 4 -1 ? 5 -1 ? 6 -1 ? 7 0 ? 8 -1 ? 9 1 ! 3791 ? 0 -1 ? 1 -1 ? 2 -1 ? 3 -1 ? 4 -1 ? 5 -1 ? 6 -1 ? 7 0 ? 8 1 ? 9 -1 ! 789 ``` **Note:** - Remember to flush your output after every query, especially if using languages like Python where you must call `sys.stdout.flush()` after printing a query. - Exceeding the 10-query limit for any test case will result in a \\"Wrong Answer\\" verdict. - The sequence of responses will be positions of the digits within the string, with the result requiring the deciphered sequence in ascending order.","solution":"def decode_scroll(t, test_cases, query): Deciphers the encoded digits from the scroll for given number of test cases. Parameters: - t: int, number of test cases - test_cases: list of int, for each test case the length of string containing distinct digits - query: callable, function that takes an integer input (0 to 9) and returns the position of the digit in the string or -1 if not found Returns: - result: list of str, sorted sequence of digits for each test case result = [] for n in test_cases: digits = [] for d in range(10): position = query(d) if position != -1: digits.append(d) result.append(\'\'.join(map(str, sorted(digits)))) return result def query_func_factory(strings): Factory to create query functions for test cases. Parameters: - strings: list of str, encoded strings for each test case Returns: - query: callable function def query(d): current_string = strings[query.test_case_index] try: return current_string.index(str(d)) except ValueError: return -1 query.test_case_index = 0 return query"},{"question":"Given a string containing only digits, you need to find out the minimum number of operations required to convert the given string into a valid string where no two consecutive characters are the same. An operation is defined as changing any single digit to any other digit. **Input:** A string `s` consisting only of digits (0-9). **Output:** An integer representing the minimum number of operations required. **Example:** Input: ``` 1221 ``` Output: ``` 1 ``` Explanation: Changing the second \'2\' to any other digit (e.g., \'3\') results in \'1231\' which is valid. **Note:** Input string will have at least 1 and at most 100 characters.","solution":"def min_operations_to_valid_string(s): Returns the minimum number of operations required to convert the string s into a valid string where no two consecutive characters are the same. operations = 0 for i in range(1, len(s)): if s[i] == s[i-1]: operations += 1 return operations"},{"question":"You are given a binary tree, and each node of the tree contains a lowercase English letter. The goal is to find the largest string that can be built from the root to any leaf node, lexicographically. A string x is lexicographically smaller than a string y if x is a prefix of y or the first character that does not match has a smaller value in x than in y. Write a function `findLargestString(root)` that returns the largest string that can be formed from root to any leaf. Input - The input is given as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` - `root` is the root node of the binary tree and is an instance of the `TreeNode` class. Output - Return the largest string that can be formed from the root to any leaf node. Constraints - The number of nodes in the tree is in the range [1, 1000]. - Each node\'s value is a lowercase English letter. Function Signature ```python def findLargestString(root: TreeNode) -> str: ``` Example Input ```python root = TreeNode(\'b\') root.left = TreeNode(\'a\') root.right = TreeNode(\'d\') root.left.left = TreeNode(\'c\') root.right.left = TreeNode(\'e\') root.right.right = TreeNode(\'f\') ``` Output ``` \\"bdf\\" ``` Explanation: - From the root node \'b\', the paths to the leaf nodes are: - \\"bac\\" (from `b -> a -> c`) - \\"bde\\" (from `b -> d -> e`) - \\"bdf\\" (from `b -> d -> f`) - Among these paths, \\"bdf\\" is the lexicographically largest string, hence the output is \\"bdf\\".","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def findLargestString(root: TreeNode) -> str: def dfs(node, path): if not node: return [] path.append(node.val) if not node.left and not node.right: # It\'s a leaf node, return the current path (as a string) res = \'\'.join(path) path.pop() return [res] # Recursively visit both subtrees and concatenate results left_paths = dfs(node.left, path) right_paths = dfs(node.right, path) path.pop() return left_paths + right_paths if not root: return \\"\\" # Start DFS from the root node all_paths = dfs(root, []) # Find the lexicographically largest string return max(all_paths)"},{"question":"Alice is a fan of playing games with sequences of numbers. She especially likes to play a game where she tries to find interesting patterns in them. Recently, she became fascinated with finding subsequences that follow a specific property. Given an integer sequence of length n, a \\"beautiful subsequence\\" is defined as a subsequence where no two adjacent elements in the original sequence are the same number. In other words, if the original sequence is `a[1], a[2], ..., a[n]`, then a subsequence `b` is \\"beautiful\\" if for any two indices `i` and `j` in the original sequence that correspond to adjacent elements in the subsequence, `a[i] ≠ a[j]`. Alice wants to know the length of the longest \\"beautiful subsequence\\" that can be formed from the given sequence. Input The first line contains an integer n (1 ≤ n ≤ 100000) – the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) – the elements of the sequence. Output Print a single integer – the length of the longest \\"beautiful subsequence\\". Examples Input 5 1 2 2 3 1 Output 4 Input 7 4 4 4 4 4 4 4 Output 1 Input 6 1 3 5 3 1 5 Output 6 Note In the first example, one of the longest beautiful subsequences is [1, 2, 3, 1], which has a length of 4. In the second example, since all elements are the same, any subsequence must have length 1. In the third example, the entire sequence [1, 3, 5, 3, 1, 5] itself is the longest beautiful subsequence as no two adjacent elements are the same.","solution":"def longest_beautiful_subsequence(n, sequence): if n == 0: return 0 # Initialize the length of the longest beautiful subsequence. max_length = 1 # Iterate through the sequence to find the longest beautiful subsequence. for i in range(1, n): if sequence[i] != sequence[i - 1]: max_length += 1 return max_length"},{"question":"In a certain small town, there is a popular game played among the children. The game involves collecting stickers of different animals. Each sticker has an animal name on it and there are only five distinct types of stickers available: \\"tiger\\", \\"elephant\\", \\"rabbit\\", \\"lion\\", and \\"giraffe\\". Given a list of stickers collected by a child, the task is to determine if the collection contains at least one of each type of the five distinct stickers. If the collection contains all five types, the child wins a prize. Input The input consists of a single line containing a list of animal names (stickers), separated by spaces. Each animal name is guaranteed to be one of the five types mentioned. The length of the line will be between 1 and 1000 characters inclusive. There may be animals that repeat multiple times in the input. Output Print \\"WIN\\" (without quotes) if the collection includes at least one of each type of the five stickers, otherwise print \\"LOSE\\" (without quotes). Examples Input tiger elephant rabbit lion giraffe rabbit tiger Output WIN Input tiger elephant rabbit lion rabbit tiger Output LOSE","solution":"def check_sticker_collection(stickers): Checks if the collection contains at least one of each type of the five distinct stickers. Args: stickers: A string containing the list of animal names separated by spaces. Returns: \\"WIN\\" if collection contains all five types of stickers, otherwise \\"LOSE\\". required_stickers = {\\"tiger\\", \\"elephant\\", \\"rabbit\\", \\"lion\\", \\"giraffe\\"} collected_stickers = set(stickers.split()) if required_stickers.issubset(collected_stickers): return \\"WIN\\" else: return \\"LOSE\\""},{"question":"You are a software developer working on a photo management application. You need to implement a function that organizes a collection of photos by their metadata. Each photo has a unique ID, a description, and a timestamp representing when the photo was taken. Your task is to write a function that sorts the photos in ascending order based on their timestamp. If two photos have the same timestamp, they should be ordered lexicographically by their IDs. Implement a function `sort_photos(photos)` that takes a list of dictionaries, `photos`, where each dictionary represents a photo and has the following keys: - `id`: a string representing the unique ID of the photo - `description`: a string representing the description of the photo - `timestamp`: an integer representing the time when the photo was taken The function should return a new list of dictionaries, sorted according to the above criteria. Input format: The input is a list of dictionaries where each dictionary represents a photo with the keys `id`, `description`, and `timestamp`. Output format: The output is a list of dictionaries sorted by `timestamp`, and by `id` lexicographically if the `timestamp` values are the same. Constraints: - The input list can contain up to 10^5 photos. - Each photo ID and description string contains only printable ASCII characters. - The timestamp is a non-negative integer. SAMPLE INPUT: ```python [ {\\"id\\": \\"photo1\\", \\"description\\": \\"A photo of a cat\\", \\"timestamp\\": 1630447330}, {\\"id\\": \\"photo2\\", \\"description\\": \\"A photo of a dog\\", \\"timestamp\\": 1630447330}, {\\"id\\": \\"photo3\\", \\"description\\": \\"A photo of a tree\\", \\"timestamp\\": 1630447200} ] ``` SAMPLE OUTPUT: ```python [ {\\"id\\": \\"photo3\\", \\"description\\": \\"A photo of a tree\\", \\"timestamp\\": 1630447200}, {\\"id\\": \\"photo1\\", \\"description\\": \\"A photo of a cat\\", \\"timestamp\\": 1630447330}, {\\"id\\": \\"photo2\\", \\"description\\": \\"A photo of a dog\\", \\"timestamp\\": 1630447330} ] ``` EXPLANATION: Photo with ID `photo3` comes first because it has the earliest timestamp. The other two photos have the same timestamp, so they are ordered by their IDs lexicographically.","solution":"def sort_photos(photos): Returns the list of photos sorted by timestamp. If two photos have the same timestamp, they are ordered lexicographically by their IDs. return sorted(photos, key=lambda photo: (photo[\'timestamp\'], photo[\'id\']))"},{"question":"# Description: Given an array of integers `nums` and an integer `k`, your task is to determine whether there are two distinct indices `i` and `j` in the array such that `nums[i] = nums[j]` and the absolute difference between `i` and `j` is at most `k`. For example: ``` nums = [1, 2, 3, 1], k = 3 containsNearbyDuplicate(nums, k) === true ``` Explanation: There are two `1`s at indices `0` and `3`, and the difference between them is `3`, which is less than or equal to `k`. # Note: - The array may contain negative numbers. - The function should return a boolean value. - The function should have a time complexity of O(n). # Some Examples ``` containsNearbyDuplicate([1, 2, 3, 1], 3) === true containsNearbyDuplicate([1, 0, 1, 1], 1) === true containsNearbyDuplicate([1, 2, 3, 1, 2, 3], 2) === false containsNearbyDuplicate([10, 20, 30, 40], 2) === false containsNearbyDuplicate([1], 1) === false ```","solution":"def containsNearbyDuplicate(nums, k): Determines if there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k. Parameters: nums (List[int]): An array of integers k (int): The maximum allowed absolute difference between the indices of duplicate integers Returns: bool: True if such elements exist, otherwise False index_map = {} for i, num in enumerate(nums): if num in index_map and i - index_map[num] <= k: return True index_map[num] = i return False"},{"question":"Binary Trees - Depth & Count Leafs Implement `treeDepth()` to determine the maximum depth (or height) of a binary tree. Implement `leafCount()` to count the number of leaf nodes in a binary tree. To maintain consistency, include the following functionalities within the Kata: The `addNode(value)` The `buildSampleTree()` function does not need to be redefined.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None class BinaryTree: def __init__(self): self.root = None def addNode(self, value): if self.root is None: self.root = TreeNode(value) else: self._addNodeHelper(self.root, value) def _addNodeHelper(self, node, value): if value < node.value: if node.left is None: node.left = TreeNode(value) else: self._addNodeHelper(node.left, value) else: if node.right is None: node.right = TreeNode(value) else: self._addNodeHelper(node.right, value) def treeDepth(self): def _depth(node): if node is None: return 0 return 1 + max(_depth(node.left), _depth(node.right)) return _depth(self.root) def leafCount(self): def _countLeafs(node): if node is None: return 0 if node.left is None and node.right is None: return 1 return _countLeafs(node.left) + _countLeafs(node.right) return _countLeafs(self.root)"},{"question":"In the realm of software development, efficiency and optimal resource usage are paramount. As such, you are required to construct a program that identifies and removes extraneous elements from a list of actions based on a set of rules. You are given a list of actions represented as strings in chronological order. Each string action can be either \\"start\\", \\"stop\\", or \\"restart\\". The rules to optimize actions are as follows: 1. Any \\"stop\\" action that is immediately followed by another \\"stop\\" action should be removed (consecutive \\"stop\\" actions should be reduced to a single \\"stop\\"). 2. A \\"restart\\" action that is immediately followed by a \\"start\\" action should be replaced with that \\"start\\" action (the \\"restart\\" action becomes redundant in this case). 3. A \\"start\\" action that follows another \\"start\\" action should be removed (only the first \\"start\\" action remains). Your task is to write a program that takes a list of actions and outputs an optimized list according to the rules mentioned above. Input - The first line consists of an integer n (1 ≤ n ≤ 105), the number of actions. - The next n lines each contain one action, which can be \\"start\\", \\"stop\\", or \\"restart\\". Output - Print the actions in the optimized list, each action on a new line, preserving their order. Examples Input 7 start start stop stop restart start stop Output start stop start stop Input 5 restart start restart stop stop Output start restart stop","solution":"def optimize_actions(n, actions): Optimizes a list of actions based on specific rules. Args: n (int): The number of actions. actions (list): The list of actions. Returns: list: The optimized list of actions. if n == 0: return [] optimized_actions = [actions[0]] for i in range(1, n): current_action = actions[i] last_action = optimized_actions[-1] if last_action == \\"stop\\" and current_action == \\"stop\\": continue elif last_action == \\"restart\\" and current_action == \\"start\\": optimized_actions.pop() optimized_actions.append(\\"start\\") elif last_action == \\"start\\" and current_action == \\"start\\": continue else: optimized_actions.append(current_action) return optimized_actions # Example usage: # n = 7 # actions = [\\"start\\", \\"start\\", \\"stop\\", \\"stop\\", \\"restart\\", \\"start\\", \\"stop\\"] # print(optimize_actions(n, actions)) # Output: # [\'start\', \'stop\', \'start\', \'stop\']"},{"question":"Given a binary tree, return the level order traversal of its nodes\' values from bottom to top. (i.e., from left to right, level by level from leaf to root). Example 1: Given binary tree [3,9,20,null,null,15,7], ```plaintext 3 / 9 20 / 15 7 ``` Return its bottom-up level order traversal as: ```plaintext [ [15,7], [9,20], [3] ] ``` Example 2: Given binary tree [1,2,3,4,5], ```plaintext 1 / 2 3 / 4 5 ``` Return its bottom-up level order traversal as: ```plaintext [ [4,5], [2,3], [1] ] ```","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def levelOrderBottom(root): if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) level_nodes = [] for _ in range(level_size): node = queue.popleft() level_nodes.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.insert(0, level_nodes) return result"},{"question":"A bookstore needs a database to keep track of books and their sales records. Each book is identified by a unique ISBN number. You are given a log of actions performed in the bookstore. The actions include adding a new book, updating the sales of an existing book, and querying the sales record of a book. For simplicity, assume there are no simultaneous actions and all ISBN numbers provided are valid and unique for new entries. Your task is to implement a program that processes these actions and outputs the results of the queries. -----Input----- The first line of input contains an integer n (1 leq n leq 1000) — the number of actions. The following n lines describe the actions. Each action is described by a string and a set of parameters separated by spaces: - \\"ADD ISBN title\\" — adds a new book with the given ISBN (a string of 13 digits) and title (a string of up to 100 characters). - \\"UPDATE ISBN sales\\" — updates the sales for the book with the given ISBN by adding the specified number (an integer). - \\"QUERY ISBN\\" — returns the sales for the book with the specified ISBN. ----Output---- For each \\"QUERY\\" action, output a single integer on a new line — the total number of sales for the specified book. -----Examples----- Input 6 ADD 9780131103627 \\"The C Programming Language\\" ADD 9780131101630 \\"The UNIX Programming Environment\\" UPDATE 9780131103627 100 UPDATE 9780131101630 50 QUERY 9780131103627 QUERY 9780131101630 Output 100 50 Input 5 ADD 9780321751041 \\"Programming in Python 3\\" UPDATE 9780321751041 200 QUERY 9780321751041 UPDATE 9780321751041 300 QUERY 9780321751041 Output 200 500","solution":"class Bookstore: def __init__(self): self.books = {} def add_book(self, isbn, title): self.books[isbn] = {\'title\': title, \'sales\': 0} def update_sales(self, isbn, sales): if isbn in self.books: self.books[isbn][\'sales\'] += sales def query_sales(self, isbn): if isbn in self.books: return self.books[isbn][\'sales\'] return 0 def process_actions(actions): bookstore = Bookstore() result = [] for action in actions: parts = action.split(maxsplit=2) command = parts[0] isbn = parts[1] if command == \\"ADD\\": title = parts[2].strip(\'\\"\') bookstore.add_book(isbn, title) elif command == \\"UPDATE\\": sales = int(parts[2]) bookstore.update_sales(isbn, sales) elif command == \\"QUERY\\": result.append(bookstore.query_sales(isbn)) return result"},{"question":"# Filter Array on Divisibility Objective Given an **integer array** `arr` and an **integer divisor** `d`, create a program that returns a new array consisting of only the elements in `arr` that are divisible by `d`. If no elements satisfy the condition, return an empty array. E.g. ```python filter_divisibility([3, 4, 6, 8, 9, 12], 3) => [3, 6, 9, 12] # because these elements are divisible by 3 filter_divisibility([1, 2, 5, 7], 4) => [] # because no elements are divisible by 4 ``` Ready to show off your filter skills? Go ahead!","solution":"def filter_divisibility(arr, d): Returns a new array consisting of only the elements in `arr` that are divisible by `d`. Parameters: arr (list): List of integers d (int): Divisor Returns: list: A list of elements from `arr` that are divisible by `d` return [x for x in arr if x % d == 0]"},{"question":"Write a function that takes a list of integers and an integer C. The function should find the maximum sum of C consecutive integers from the list. If the total number of integers in the list is less than C, the function should return -1. -----Input:----- - The input consists of a list of integers followed by an integer C. -----Output:----- - The output should be an integer representing the maximum sum of C consecutive integers in the list, or -1 if the list has fewer integers than C. -----Constraints:----- - The list contains at most 10^5 integers, each integer is between -10^6 and 10^6. - 1 leq C leq 10^5 -----Sample Input----- [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4 -----Sample Output----- 34 -----EXPLANATION:----- The possible sums of 4 consecutive integers are: - 1+2+3+4 = 10 - 2+3+4+5 = 14 - 3+4+5+6 = 18 - 4+5+6+7 = 22 - 5+6+7+8 = 26 - 6+7+8+9 = 30 - 7+8+9+10 = 34 The maximum sum is 34.","solution":"def max_consecutive_sum(lst, C): Finds the maximum sum of C consecutive integers in the list. If the list has fewer than C elements, return -1. if len(lst) < C: return -1 # Calculate the sum of the first C elements max_sum = sum(lst[:C]) current_sum = max_sum # Use sliding window technique to find maximum sum of C consecutive numbers for i in range(C, len(lst)): current_sum = current_sum + lst[i] - lst[i - C] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"In a distant land, a group of explorers discovered a series of mysterious stone tablets. Each tablet is inscribed with a sequence of uppercase English letters. The explorers believe that each sequence contains a hidden message when read in reverse after performing a transformation to make it a palindrome. To unveil the hidden message, they are allowed to replace any number of characters in the sequence with any other characters (other uppercase English letters), but they want to minimize the number of changes needed. Your task is to help the explorers by determining the minimum number of replacements required to make the sequence a palindrome. A sequence is a palindrome if it reads the same backward as forward. For example, the sequences \'AHA\', \'LEVEL\', \'RACECAR\', and \'MOM\' are palindromes, but \'HELLO\' and \'WORLD\' are not. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The next 2 cdot t lines contain the description of test cases. The description of each test case consists of two lines. The first line of each test case contains a single integer n (1 le n le 10^5) — the length of the sequence. The second line of each test case contains the sequence s consisting of n uppercase English letters. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print the minimum number of replacements required to make the sequence a palindrome. -----Examples----- Input 4 5 HELLO 3 ABC 6 XYZZYX 7 ABCDEFG Output 2 1 0 3 -----Note----- In the first test case, you can replace \'H\' with \'O\' and \'L\' with \'E\' to get the palindrome \'OLLOO\'. In the second test case, you can replace \'A\' with \'C\' to get the palindrome \'CBC\'. In the third test case, the sequence \'XYZZYX\' is already a palindrome, so no replacements are needed. In the fourth test case, you need to replace \'A\' with \'G\', \'B\' with \'F\', and \'C\' with \'E\' to get the palindrome \'GFEDFG\'.","solution":"def min_replacements_to_palindrome(t, test_cases): results = [] for i in range(t): n = test_cases[i * 2] s = test_cases[i * 2 + 1] count = 0 for j in range(n // 2): if s[j] != s[n - j - 1]: count += 1 results.append(count) return results"},{"question":"A company organizes a string manipulation contest in which participants are required to transform a given string. The challenge is to remove duplicates such that each character appears only once and the resulting string is the lexicographically smallest possible. For example, given the string `bcabc`, the result should be `abc`. Write a function that takes a single string `s` and returns the lexicographically smallest string possible after removing duplicates. Input: A single line containing a string `s` consisting only of lowercase English letters. Output: A single line containing the transformed string. SAMPLE INPUT bcabc SAMPLE OUTPUT abc Explanation: The string `bcabc` has characters `b` and `c` appearing more than once. Removing duplicates while maintaining the smallest lexicographic order results in the string `abc`. Note that simply removing duplicates in order of appearance would result in `bca`, which is not lexicographically smallest.","solution":"def remove_duplicates(s): Remove duplicates such that each character appears only once and the resulting string is the lexicographically smallest possible. last_occurrence = {char: idx for idx, char in enumerate(s)} stack = [] seen = set() for idx, char in enumerate(s): if char not in seen: while stack and char < stack[-1] and idx < last_occurrence[stack[-1]]: seen.remove(stack.pop()) stack.append(char) seen.add(char) return \'\'.join(stack)"},{"question":"**Title: ** Efficient Tractor Allocation for Farmland **Prompt: ** A farm has \'n\' rectangular fields arranged in a strictly linear sequence, each described by its width and cost. The farmer wishes to plow some consecutive sequence of fields using a tractor that charges a fixed overhead cost for every distinct sequence it plows. For example, if the farmer plows fields from i to j, they have to pay the cost of each field from i to j plus a fixed overhead cost for the sequence. The farmer is considering trying various consecutive plowing sequences to minimize the total expense. Your task is to calculate the minimum possible total expense the farmer can achieve if they must plow at least one field and can decide the range of fields to be plowed in a single sequence. **Input:** - First line contains two integers n and c (1 ≤ n ≤ 100,000, 1 ≤ c ≤ 10^9) - the number of fields and the fixed overhead cost per sequence respectively. - Second line contains n integers, where the i-th integer represents the width of the i-th field (1 ≤ width[i] ≤ 10^9). - Third line contains n integers, where the i-th integer represents the cost of plowing the i-th field (1 ≤ cost[i] ≤ 10^9). **Output:** - Print the minimum possible total expense the farmer can achieve. **Example:** **Input:** ``` 4 10 3 1 4 2 5 2 7 3 ``` **Output:** ``` 12 ``` **Explanation:** In the example above, the cheapest sequence involves plowing the segment inclusive of 2nd field to 4th field, totaling expenses to 2 + 7 + 3 + 10 = 22. However, a single field sequence solution i.e., plowing the 2nd field costs lesser as 2 + 10 = 12, which is the minimum. So, the output is 12. Note: Ensure the calculation considers the overhead cost efficiently to find the minimum total expense.","solution":"def min_total_expense(n, c, widths, costs): Calculate the minimum possible total expense the farmer can achieve if they must plow at least one field and can decide the range of fields to be plowed in a single sequence. :param n: int, number of fields :param c: int, fixed overhead cost per sequence :param widths: list of ints, widths of the fields :param costs: list of ints, costs of plowing the fields :return: int, minimum possible total expense min_expense = float(\'inf\') current_sum = 0 for i in range(n): if i == 0: current_sum = costs[i] + c else: current_sum = min(current_sum + costs[i], costs[i] + c) min_expense = min(min_expense, current_sum) return min_expense"},{"question":"You are the manager of a burgeoning bookstore, and you want to arrange books on the shelves in a particular order. Each book has a unique height, and each shelf can hold books up to a certain total height. Your aim is to place books such that the height of the books on each shelf adheres to its height limit and there are as few shelves used as possible. You are given an array of positive integers where each integer represents the height of a book, and a positive integer that represents the height limit of the shelf. Your task is to write a function that arranges the books using the minimum number of shelves required. For example: Given an array of book heights `[5, 8, 7, 3, 5, 2]` and a shelf height limit of `10`, the function should return `4` because we can arrange the books on the shelves as follows: - First shelf: `[5, 5]` (total height 10) - Second shelf: `[8]` (total height 8) - Third shelf: `[7, 3]` (total height 10) - Fourth shelf: `[2]` (total height 2) You can assume that: - The order of the books in the array should be maintained. - It is guaranteed that the height of each book does not exceed the shelf height limit. ```python def min_shelves(books, shelf_height): # your code here return # number of shelves required ``` # Example ```python print(min_shelves([5, 8, 7, 3, 5, 2], 10)) # Output: 4 print(min_shelves([1, 2, 3, 5, 6], 8)) # Output: 3 ``` # Constraints - All elements in the `books` array are positive integers. - Each element in the `books` array will be less than or equal to the `shelf_height`. - The length of the `books` array will be between 1 and 1000.","solution":"def min_shelves(books, shelf_height): Returns the minimum number of shelves required to arrange the books with the given shelf height limit. current_height = 0 shelf_count = 1 for book in books: if current_height + book <= shelf_height: current_height += book else: shelf_count += 1 current_height = book return shelf_count"},{"question":"You are given three integers a, b and c as input. Your task is to check if there exists a non-negative integer x such that (a xor x) is less than (b xor x) and at the same time greater than (c xor x). Here, xor denotes the bitwise exclusive or operator. To help you in implementation, consider: - (a xor x) denotes the result of the bitwise exclusive OR operation between integers a and x. - Similarly, (b xor x) denotes the result of the bitwise exclusive OR operation between integers b and x. - Similarly, (c xor x) denotes the result of the bitwise exclusive OR operation between integers c and x. You need to print \\"Yes\\" if such an x exists, otherwise, print \\"No\\". Input: A single line containing three space-separated integers a, b and c. Output: A single line containing \\"Yes\\" or \\"No\\". Constraints: 0 ≤ a, b, c ≤ 10^9 SAMPLE INPUT 5 9 2 SAMPLE OUTPUT Yes Explanation Try x = 8 (a xor x) = (5 xor 8) = 13 (b xor x) = (9 xor 8) = 1 (c xor x) = (2 xor 8) = 10 Here, 13 > 10 and 13 < 1 is a valid relationship. Thus, the answer is \\"Yes\\".","solution":"def check_xor_relationship(a, b, c): Check if there exists a non-negative integer x such that: (a xor x) < (b xor x) and (a xor x) > (c xor x) Parameters: a (int): The first integer b (int): The second integer c (int): The third integer Returns: str: \\"Yes\\" if such an x exists, otherwise \\"No\\". # since x can be any non-negative integer, we need to check all bits in a, b, c for i in range(31, -1, -1): a_bit = (a >> i) & 1 b_bit = (b >> i) & 1 c_bit = (c >> i) & 1 if a_bit == b_bit and a_bit == c_bit: continue if a_bit == b_bit: return \\"No\\" if a_bit == c_bit: return \\"Yes\\" return \\"No\\""},{"question":"You are a wizard tasked with defending a mystical forest from invading monsters. Your magical abilities allow you to create protective barriers that can block monsters from entering certain sections of the forest. The forest is represented as a straight line with sections numbered from 1 to N. You are given M intervals, each described by two integers `L` and `R`, which represent the range of sections this particular monster tries to invade. Each interval overlaps or touches at least one other interval. To stop the monsters, you need to place protective barriers at specific sections. A barrier at section `i` can stop any monster whose range includes `i`. Given these intervals, your task is to determine the minimum number of barriers needed so that every interval is blocked by at least one barrier. ------ Input ------ The first line of the input contains a single integer `T` denoting the number of test cases. The description of `T` test cases follows. The first line of each test case contains two integers `N` and `M`. The next `M` lines each contain two integers `L` and `R` describing the range of an interval. ------ Output ------ For each test case, print a single line containing one integer ― the minimum number of barriers required. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^9 1 ≤ M ≤ 200000 1 ≤ L ≤ R ≤ N the sum of M over all test cases does not exceed 10^6 ------ Sample Input 1 ------ 2 5 3 1 2 2 3 3 5 7 4 1 4 3 5 4 7 6 7 ------ Sample Output 1 ------ 2 2 ------ Explanation 1 ------ In the first test case, you can place barriers at section 2 and section 3 to cover all intervals. In the second test case, you can place barriers at section 4 and section 6 to cover all intervals.","solution":"def minimum_barriers(test_cases): results = [] for case in test_cases: N, M, intervals = case intervals.sort(key=lambda x: x[1]) # Sort intervals by their end point barriers = [] last_barrier = -1 for interval in intervals: L, R = interval if L > last_barrier: barriers.append(R) last_barrier = R results.append(len(barriers)) return results def process_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, input_lines[index].split()) index += 1 intervals = [] for _ in range(M): L, R = map(int, input_lines[index].split()) intervals.append((L, R)) index += 1 test_cases.append((N, M, intervals)) return test_cases def parse_output(output_data): return list(map(int, output_data.strip().split(\'n\')))"},{"question":"Alice loves to organize parties and needs to manage the refreshments. Alice has M bottles of water that hold 3 liters each, and N bottles of water that hold 5 liters each. Calculate the total amount of water, in liters, that Alice has for her parties. ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. - The first and only line of each test case contains two space-separated integers M and N — the number of 3-liter bottles and 5-liter bottles, respectively. ------ Output Format ------ For each test case, output on a new line the total amount of water in liters. ------ Constraints ------ 1 ≤ T ≤ 100 0 ≤ M, N ≤ 100 ----- Sample Input 1 ------ 3 4 6 2 10 0 8 ----- Sample Output 1 ------ 38 56 40 ----- Explanation 1 ------ Test case 1: Alice has 4 bottles that hold 3 liters each and 6 bottles that hold 5 liters each. So, 4 times 3 + 6 times 5 = 12 + 30 = 42 liters of water in total. Test case 2: Alice has 2 bottles that hold 3 liters each and 10 bottles that hold 5 liters each. So, 2 times 3 + 10 times 5 = 6 + 50 = 56 liters of water in total. Test case 3: Alice has 0 bottles that hold 3 liters each and 8 bottles that hold 5 liters each. So, 0 times 3 + 8 times 5 = 0 + 40 = 40 liters of water in total.","solution":"def calculate_total_water(T, cases): This function calculates the total amount of water for each test case. :param T: int, number of test cases :param cases: list of tuples, each containing two integers M and N :return: list of integers, total amount of water for each test case results = [] for case in cases: M, N = case total_water = M * 3 + N * 5 results.append(total_water) return results # Example usage: # T = 3 # cases = [(4, 6), (2, 10), (0, 8)] # print(calculate_total_water(T, cases)) # Output: [42, 56, 40]"},{"question":"In a small town, there are M roads and N intersections, represented as a graph where intersections are nodes and roads are directed edges. Each road has a specific cost associated with it, representing the effort to move from one intersection to another. Your task is to determine the minimum cost required to travel from a given start intersection to every other intersection in the town. Input - The first line of input contains two integers, N and M, representing the number of intersections and the number of roads, respectively. - The next M lines each contain three integers u, v, and w, indicating there is a road from intersection u to intersection v with a cost of w. - The last line contains an integer S, the start intersection. Output - Output N space-separated integers, where the ith integer represents the minimum cost to travel from the start intersection S to the ith intersection. If an intersection is not reachable, output -1 for that intersection. Constraints - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 10000 - 0 ≤ u, v < N - 1 ≤ w ≤ 100000 - 0 ≤ S < N Examples Input 5 6 0 1 2 0 2 4 1 2 1 1 3 7 2 4 3 3 4 1 0 Output 0 2 3 9 6 Input 4 3 0 1 5 1 2 10 2 3 2 1 Output -1 0 10 12","solution":"import heapq def dijkstra(n, edges, start): graph = [[] for _ in range(n)] for u, v, w in edges: graph[u].append((w, v)) dist = [float(\'inf\')] * n dist[start] = 0 priority_queue = [(0, start)] while priority_queue: current_dist, node = heapq.heappop(priority_queue) if current_dist > dist[node]: continue for weight, neighbor in graph[node]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [d if d != float(\'inf\') else -1 for d in dist] def find_min_cost_to_all_intersections(n, m, edges, start): return dijkstra(n, edges, start)"},{"question":"Given an array of strings, your task is to group the anagrams together. An anagram is a word formed by rearranging the letters of another, such as \\"listen\\" and \\"silent\\". The order of characters within the individual strings or the order of grouped anagrams does not matter. Input An array of strings `arr`, where `1 <= arr.length <= 10000` and `1 <= len(arr[i]) <= 100`. Output A list of lists, where each list contains strings which are anagrams of each other. Examples Input [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output [ [\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"] ] Input [\\"\\"] Output [ [\\"\\"] ] Input [\\"a\\"] Output [ [\\"a\\"] ] Note In the first sample the strings “eat”, “tea” and “ate” are anagrams and form a group. Similarly, \\"tan\\" and \\"nat\\" form another group while “bat” stays alone. The output does not require ordering within the lists. In the second sample, there is only one string which is an empty string, so it forms a single group.","solution":"from collections import defaultdict def group_anagrams(arr): Groups anagrams together. :param arr: List of strings :return: List of lists, where each sublist contains anagrams anagrams = defaultdict(list) for word in arr: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"Alice is training for a coding competition and needs to practice with various kinds of problems. She is currently learning about arrays and their properties. One of her practice problems involves palindrome arrays. An array is considered a palindrome if it reads the same backward as forward. For example, [1, 2, 3, 2, 1] is a palindrome, while [1, 2, 3, 4, 5] is not. Alice is given an array of N integers and has to determine if the array is a palindrome. Write a program that will help Alice by checking if the given array is a palindrome or not. Input: The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. Output: For each test case, print \\"YES\\" if the array is a palindrome, otherwise print \\"NO\\". Print a new line after each test case. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^6 SAMPLE INPUT 2 5 1 2 3 2 1 4 1 2 3 4 SAMPLE OUTPUT YES NO","solution":"def is_palindrome(arr): Checks if the given array is a palindrome. return arr == arr[::-1] def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 results = [] for _ in range(T): N = int(data[index]) array = list(map(int, data[index + 1: index + 1 + N])) index += 1 + N if is_palindrome(array): results.append(\\"YES\\") else: results.append(\\"NO\\") for result in results: print(result)"},{"question":"You are given an array of integers and a value k. Your task is to determine the number of distinct pairs of integers in the array whose sum is equal to k. ------ Input: ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of integers in the array. The second line contains N space-separated integers A_{1}, A_{2}, ldots, A_{N}. The third line contains a single integer k. ------ Output: ------ For each test case, print a single integer denoting the number of distinct pairs of integers in the array whose sum is equal to k. ------ Constraints: ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{5} -10^{9} ≤ A_{i} ≤ 10^{9} -10^{9} ≤ k ≤ 10^{9} It is guaranteed that the sum of N over all test cases does not exceed 2 * 10^{6} ------ Sample Input: ------ 2 4 1 5 7 -1 6 5 1 1 1 1 1 2 ------ Sample Output: ------ 2 10 ------ Explanation: ------ In the first test case, there are two distinct pairs (1, 5) and (7, -1) that sum to 6. In the second test case, each 1 pairs with each of the other 1s to form pairs that sum to 2. There are a total of 10 such pairs.","solution":"def count_pairs_with_sum(arr, k): Returns the number of distinct pairs whose sum is equal to k. Args: arr: List of integers k: Integer sum value Returns: Integer count of such pairs count = 0 seen = {} for num in arr: complement = k - num if complement in seen: count += seen[complement] if num in seen: seen[num] += 1 else: seen[num] = 1 return count def process_test_cases(num_cases, test_cases): Process multiple test cases. Args: num_cases: Integer number of test cases test_cases: List of tuples. Each tuple contains (N, arr, k) Returns: List of integer results for each test case results = [] for N, arr, k in test_cases: results.append(count_pairs_with_sum(arr, k)) return results"},{"question":"You are given a sequence of n integers v_1, v_2, ldots, v_n and you need to perform the following operation exactly k times: choose any two elements v_i and v_j from the sequence, where i neq j, and subtract the smaller element from the larger one, then replace the larger element with the result. The goal is to minimize the maximum element in the sequence after performing the operation k times. -----Input----- The first line contains a single integer q (1 le q le 10^4) — the number of queries. The first line of each query contains two integers n and k (1 le n, k le 2 cdot 10^5) — the length of the sequence and the number of operations. The second line of each query contains n integers v_1, v_2, ldots, v_n (1 le v_i le 10^9). The sum of n over all queries doesn’t exceed 2 cdot 10^5. -----Output----- For each query, print a single integer — the minimum possible value of the maximum element in the sequence after performing the operation k times. -----Examples----- Input 2 3 2 5 3 8 4 3 10 8 5 7 Output 5 4 -----Note----- In the first example, one possible sequence of operations is: 1. Choose v_3 = 8 and v_2 = 3, replace 8 with 8 - 3 = 5, resulting in the sequence [5, 3, 5]. 2. Choose v_1 = 5 and v_3 = 5, replace one 5 with 5 - 5 = 0, resulting in the sequence [0, 3, 5]. The maximum value in the sequence is now 5. This is the minimum possible maximum value after 2 operations. In the second example, one possible sequence of operations is: 1. Choose v_1 = 10 and v_3 = 5, replace 10 with 10 - 5 = 5, resulting in the sequence [5, 8, 5, 7]. 2. Choose v_2 = 8 and v_4 = 7, replace 8 with 8 - 7 = 1, resulting in the sequence [5, 1, 5, 7]. 3. Choose v_1 = 5 and v_3 = 5, replace one 5 with 5 - 5 = 0, resulting in the sequence [0, 1, 5, 7]. The maximum value in the sequence is now 5. Another possible sequence of operations could minimize it further to get the result 4.","solution":"def minimize_max_element(q, queries): results = [] for query in queries: n, k, v = query v.sort() while k > 0 and v[0] < v[-1]: large = v.pop() # the largest element small = v.pop(0) # the smallest element new_large = large - small v.append(new_large) v.sort() # keep sorted for next operation k -= 1 results.append(max(v)) return results"},{"question":"Sam loves to play with numbers. He recently learned about prime numbers and wanted to dive deeper into understanding their properties. He came up with an interesting problem involving prime numbers and natural numbers. Here is the problem: Given a natural number N (1 ≤ N ≤ 10^6), determine how many prime numbers are less than or equal to N. Your task is to write a function that efficiently computes the number of prime numbers less than or equal to the given number N. Your function should make use of efficient algorithms as the direct approach of checking each number one by one is not feasible for large values of N. # Input: - A single integer N. # Output: - A single integer representing the number of prime numbers less than or equal to N. # Examples: Input: 10 Output: 4 Explanation: There are 4 prime numbers less than or equal to 10: 2, 3, 5, and 7. Input: 100 Output: 25 Explanation: There are 25 prime numbers less than or equal to 100. Input: 1 Output: 0 Explanation: There are no prime numbers less than or equal to 1. # Note: To solve this problem, you might consider using the Sieve of Eratosthenes algorithm or other similar efficient algorithms to generate prime numbers up to the specified limit.","solution":"def count_primes(N): Returns the number of prime numbers less than or equal to N. Parameters: N (int): The upper limit to check for primes (inclusive). Returns: int: The count of prime numbers ≤ N. if N < 2: return 0 # Initialize a list to track prime status of numbers is_prime = [True] * (N + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers # Implementing Sieve of Eratosthenes p = 2 while p * p <= N: if is_prime[p]: for i in range(p * p, N + 1, p): is_prime[i] = False p += 1 # Count prime numbers return sum(is_prime)"},{"question":"Description You are given a list of integers representing the scores of participants in a coding contest. Your task is to partition these scores into k groups such that the maximum possible sum among all groups is minimized. In other words, you need to distribute the scores into k groups as evenly as possible. Write a function `partition_scores(scores, k)` that takes in the list of integers `scores` and an integer `k`, and returns the minimized maximum sum possible among the k groups. # Input - `scores` (a list of integers): The list of integers representing the scores of the participants. - `k` (an integer): The number of groups to partition the scores into (1 <= k <= len(scores)). # Output - An integer representing the minimized maximum sum among the k groups. # Example ```python partition_scores([10, 20, 30, 40, 50], 3) ``` Output: ``` 60 ``` Explanation: You can partition the scores into three groups as follows: [10, 50], [20, 40], [30]. The sums of these groups are [60, 60, 30]. The maximum sum is 60, which is the minimized maximum sum possible. # Constraints - The length of `scores` will not exceed 1000. - The elements of `scores` are positive integers. To solve this problem, consider using a binary search approach over the possible values of the minimized maximum sum. You\'ll need to check if a given value can be a valid maximum sum using a greedy approach.","solution":"def partition_scores(scores, k): def can_partition(max_sum, k): current_sum = 0 required_groups = 1 for score in scores: if current_sum + score > max_sum: required_groups += 1 current_sum = score if required_groups > k: return False else: current_sum += score return True if k == 1: return sum(scores) left, right = max(scores), sum(scores) while left < right: mid = (left + right) // 2 if can_partition(mid, k): right = mid else: left = mid + 1 return left"},{"question":"In a remote village, there is a tradition of creating a unique sequence of numbers from 1 to n to celebrate the harvest festival. This sequence must fulfill two conditions. 1. Each number from 1 to n must appear exactly once in the sequence. 2. The difference between any two consecutive numbers in the sequence must not be equal to 1. Your task is to determine if it\'s possible to create such a sequence for a given n. If it\'s possible, provide one sequence that satisfies the conditions. If it\'s not possible, return -1. Input format: - The first line contains a single integer T, the number of test cases. - The following T lines each contain a single integer n, representing the length of the sequence. Output format: For each test case, output a single line: - If a sequence is possible, display any one valid sequence of length n. - If no such sequence exists, output -1. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 100 Example: Input: 3 2 3 4 Output: -1 2 1 3 2 4 1 3 Explanation: For n = 2, it is impossible to create such a sequence as the only two numbers 1 and 2 differ by 1. For n = 3, one possible sequence is 2 1 3. For n = 4, one possible sequence is 2 4 1 3. There are other correct sequences possible for this case as well.","solution":"def create_harvest_sequence(n): if n == 1: return [1] if n == 2: return -1 if n % 2 == 1: # For odd n >= 3, we can always construct a valid sequence return [i for i in range(n, 0, -1)] else: # For even n, [2, 4, 6, ..., n, 1, 3, 5, ...] sequence should work return [i for i in range(2, n+1, 2)] + [i for i in range(1, n+1, 2)] def solve(T, cases): results = [] for n in cases: result = create_harvest_sequence(n) if result == -1: results.append(\\"-1\\") else: results.append(\\" \\".join(map(str, result))) return results"},{"question":"Barnyard Fun has a set of N barns arranged in a row, each with a certain number of cows in it. Each day, a random number generator is used to select a pair of barns and all the cows in those barns are swapped. The goal is to distribute the cows such that the total number of cows in the first half of the barns is as close as possible to the total number of cows in the second half. Given the initial number of cows in each barn, determine the minimum possible difference between the sum of cows in the first half and the sum in the second half after zero or more swap operations. -----Input----- The first line contains an integer N (1 le N le 1000), the number of barns. The second line contains N integers, where the i-th integer a_i (1 le a_i le 10^6) represents the initial number of cows in the i-th barn. -----Output----- Output a single integer — the minimum possible difference between the sum of the cows in the first half and the sum of the cows in the second half. -----Examples----- Input 6 1 2 3 4 5 6 Output 1 Input 5 10 20 30 40 50 Output 10 -----Note----- In the first example, the barns can be divided into two halves [1, 2, 3] and [4, 5, 6]. A possible swap could be between the second and fifth barns, resulting in [1, 5, 3] and [4, 2, 6], achieving an optimal distribution with a difference of 1. In the second example, the optimal difference between the sums of the halves is 10 after appropriate swaps.","solution":"def min_difference_barn_cows(N, cows): Compute the minimum possible difference between the sum of cows in the first half of the barns and the sum in the second half after zero or more swap operations. :param N: Number of barns :param cows: List of cow counts in each barn :return: Minimum possible difference total_sum = sum(cows) target = total_sum // 2 # Using Dynamic Programming to solve the Partition Problem to find the closest sum to target dp = [0] * (target + 1) for cow in cows: for j in range(target, cow - 1, -1): dp[j] = max(dp[j], dp[j - cow] + cow) sum1 = dp[target] sum2 = total_sum - sum1 return abs(sum2 - sum1)"},{"question":"You are given a rectangle grid of dimensions m times n initially filled with zeros. The only operation you can perform is to flip a subrectangle, where all the 0s in the subrectangle become 1s and all the 1s become 0s. You are given a list of k queries, each specifying a subrectangle to flip. After performing all the queries, you need to determine the state of the grid. A subrectangle is defined by its top-left corner (r1, c1) and bottom-right corner (r2, c2), where 1 leq r1 leq r2 leq m and 1 leq c1 leq c2 leq n. -----Input----- - The first line contains three integers m, n, and k (1 leq m, n leq 1000, 1 leq k leq 10^5) — the number of rows, the number of columns, and the number of queries respectively. - The next k lines describe the queries, each containing four integers r1, c1, r2, and c2 (1 leq r1 leq r2 leq m, 1 leq c1 leq c2 leq n), defining the subrectangle to flip. -----Output----- Output the grid after all the queries have been processed. In the output grid, every element must either be 0 or 1. -----Example----- Input 3 3 2 1 2 2 3 2 1 3 2 Output 0 1 1 1 0 1 1 1 0 -----Explanation----- After the first query, the grid becomes: 0 1 1 0 1 1 0 0 0 After the second query, the grid becomes: 0 1 1 1 0 1 1 1 0","solution":"def flip_subrectangle(m, n, k, queries): grid = [[0] * n for _ in range(m)] for query in queries: r1, c1, r2, c2 = query for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): grid[i][j] = 1 - grid[i][j] return grid"},{"question":"Given an integer N, design an algorithm to compute the sum of the first N prime numbers. Example 1: Input: N=5 Output: 28 Explanation: The first 5 prime numbers are 2, 3, 5, 7, and 11. Their sum is 2 + 3 + 5 + 7 + 11 = 28. Example 2: Input: N=7 Output: 58 Explanation: The first 7 prime numbers are 2, 3, 5, 7, 11, 13, and 17. Their sum is 2 + 3 + 5 + 7 + 11 + 13 + 17 = 58. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfPrimes() which takes the integer N as a parameter and returns the sum of the first N prime numbers. Expected Time Complexity: O(N*sqrt(N)) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 100","solution":"def is_prime(num): if num <= 1: return False if num == 2 or num == 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sumOfPrimes(N): count = 0 num = 2 prime_sum = 0 while count < N: if is_prime(num): prime_sum += num count += 1 num += 1 return prime_sum"},{"question":"You are given `n` tasks, each identified by a unique number from `1` to `n`. Each task takes a certain amount of time to complete, and you are also given the dependencies between these tasks. A task cannot start until all the tasks it depends on are completed. Write a function that determines the minimum number of units of time required to complete all tasks. The function should take two parameters: 1. `n`: the number of tasks. 2. `dependencies`: a list of pairs `(a, b)` where task `a` must be completed before task `b` can start. Return the minimum time required to complete all tasks. If it is impossible to complete all tasks due to a circular dependency, return -1. **Example 1:** Input: ``` n = 4 dependencies = [(1, 2), (2, 3), (3, 4)] ``` Output: ``` 4 ``` Explanation: Complete tasks in the order 1 -> 2 -> 3 -> 4. It takes one unit of time per task, so the total time is 4. **Example 2:** Input: ``` n = 6 dependencies = [(1, 2), (1, 3), (2, 4), (3, 4), (4, 5), (4, 6)] ``` Output: ``` 4 ``` Explanation: Complete tasks in the order 1 -> (2, 3) -> 4 -> (5, 6). Tasks 2 and 3 can be completed in parallel after task 1, and tasks 5 and 6 can be completed in parallel after task 4, so the total time is 4. **Example 3:** Input: ``` n = 3 dependencies = [(1, 2), (2, 3), (3, 1)] ``` Output: ``` -1 ``` Explanation: There is a circular dependency between tasks, making it impossible to complete all tasks. **Constraints:** - `1 <= n <= 10^4` - `dependencies.length <= 2*10^4` - `1 <= a, b <= n`","solution":"from collections import deque, defaultdict def min_time_to_complete_tasks(n, dependencies): Determines the minimum time required to complete all tasks with given dependencies. Args: n : int : number of tasks dependencies : list : list of tuples representing dependencies (a, b) where task a must be completed before task b Returns: int : Minimum time required to complete all tasks or -1 if there is a circular dependency # Create a graph and in-degree count graph = defaultdict(list) in_degree = [0] * (n + 1) # Build graph and in-degree count for u, v in dependencies: graph[u].append(v) in_degree[v] += 1 # Initialize queue with tasks having zero in-degree queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) # Initialize completed tasks count and time completed = 0 time = 0 # Process tasks while queue: # Process all tasks at the current level for _ in range(len(queue)): node = queue.popleft() completed += 1 for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Increment time after processing all tasks at the current level time += 1 # Check for circular dependency if completed == n: return time else: return -1"},{"question":"A GroupShift is defined as a sequence of shifted characters where each character is shifted by the same number of positions relative to its previous character. Given a list of words, group all the words that belong to the same GroupShift. For example, let\'s say we have the words: [\\"abc\\", \\"bcd\\", \\"acef\\", \\"xyz\\", \\"az\\", \\"ba\\", \\"a\\", \\"z\\"] Here, \\"abc\\" and \\"bcd\\" are in the same group because each letter in the word is shifted by the same number of positions relative to the previous letter. Similarly, \\"az\\" and \\"ba\\" are in the same group because both characters in these words maintain the same relative shifts. Write a function `groupShiftedStrings` that takes a list of strings and groups them by their GroupShift property. Function Signature: ```python def groupShiftedStrings(strings: List[str]) -> List[List[str]]: pass ``` Input: - strings: List of words containing lowercase alphabets (\'a\' to \'z\'). Output: - Returns a list of lists of strings, where each sublist contains words that belong to the same GroupShift. Example: Input: ```python strings = [\\"abc\\", \\"bcd\\", \\"acef\\", \\"xyz\\", \\"az\\", \\"ba\\", \\"a\\", \\"z\\"] ``` Output: ```python [ [\\"abc\\", \\"bcd\\", \\"xyz\\"], [\\"acef\\"], [\\"az\\", \\"ba\\"], [\\"a\\", \\"z\\"] ] ``` Note: The output order might differ but the grouping should be correct. For instance, one of the valid outputs for the example input could be: ```python [ [\\"xyz\\", \\"bcd\\", \\"abc\\"], [\\"acef\\"], [\\"ba\\", \\"az\\"], [\\"z\\", \\"a\\"] ]","solution":"from collections import defaultdict from typing import List def groupShiftedStrings(strings: List[str]) -> List[List[str]]: def get_shift_key(word: str) -> str: if len(word) == 1: return \'single_letter\' shifts = [] for i in range(1, len(word)): shift = (ord(word[i]) - ord(word[i-1])) % 26 shifts.append(shift) return tuple(shifts) shift_groups = defaultdict(list) for word in strings: key = get_shift_key(word) shift_groups[key].append(word) return list(shift_groups.values())"},{"question":"How many non-attacking rooks can be placed on an n x n chessboard? Recall that a rook can attack another rook if they are on the same row or the same column. Only one rook may be placed on each square of the chessboard. Example 1: Input: n = 4 Output: 4 Explanation: We can place 4 non-attacking rooks on a 4x4 chessboard, one on each row, and each column. Example 2: Input: n = 1 Output: 1 Explanation: There is only one cell available, and we can place a rook on it without it attacking any other. Your Task: You don\'t need to read input or print anything. Your task is to complete the function placeRooks() which takes an Integer n as input and returns the maximum number of non-attacking rooks that can be placed on a n*n chessboard. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^8","solution":"def placeRooks(n): Returns the maximum number of non-attacking rooks that can be placed on an n x n chessboard. Args: n (int): The size of the chessboard Returns: int: The maximum number of non-attacking rooks return n"},{"question":"Alyssa is participating in a treasure hunt competition in a large grid-shaped park. The park is represented as an `n x m` grid where each cell has a specific point value. Alyssa starts at the top-left corner (cell at position (1,1)) and needs to reach the bottom-right corner (cell at position (n,m)). She can only move either right or down from a cell. To make the competition more challenging, there are certain cells which are marked as special cells. When Alyssa steps into a special cell, she can make an additional move to any other cell in the grid without any constraints. This special move doesn\'t count as a normal move; therefore, Alyssa can consider it as a teleport. Your task is to compute the maximum points Alyssa can accumulate moving from the top-left corner to the bottom-right corner considering normal moves and at most one special move. Input - The first line contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 1000, 0 ≤ k ≤ 10^5) — the number of rows, number of columns, and the number of special cells respectively. - The next `n` lines contain `m` integers each, representing the point values of each cell in the grid. - The next `k` lines contain two integers each `r` and `c` (1 ≤ r ≤ n, 1 ≤ c ≤ m), representing the row and column indices of the special cells. Output - Print the maximum points Alyssa can accumulate moving from the top-left to the bottom-right corner considering the given constraints. Example Input 4 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 2 2 3 3 Output 73 In the given example, Alyssa collects 73 points by following an optimal path considering the special cells. Note In the example, an optimal path could utilize one of the special cells for an extra move to maximize the points before reaching the destination. Should Alyssa decide to use the special move, strategies need to account for the highest accumulation of points possible by jumping to the most lucrative positions in the grid, including not utilizing a special move if it proves less efficient.","solution":"def max_points_in_grid(n, m, k, grid, special_cells): def max_points_when_no_teleport(): dp = [[0]*m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp dp_no_teleport = max_points_when_no_teleport() max_score = dp_no_teleport[n-1][m-1] for sr, sc in special_cells: sr, sc = sr - 1, sc - 1 # adjust for 0-indexing if sr == 0 and sc == 0: continue temp_dp = max_points_when_no_teleport() for i in range(n): for j in range(m): temp_dp[i][j] = max(temp_dp[i][j], dp_no_teleport[sr][sc] + grid[i][j]) max_score = max(max_score, temp_dp[n-1][m-1]) return max_score"},{"question":"In a fantasy world, wizards communicate using a special language composed of spells. Each spell is represented by a string of characters. Two spells are considered compatible if they do not share any common character. Given a list of spells, your task is to find the maximum number of compatible spells that can be cast together simultaneously. ----Input---- The first line contains a single integer n (1 ≤ n ≤ 100), representing the number of spells. Each of the next n lines contains a single string s_i (1 ≤ |s_i| ≤ 100), representing a spell. Each character in a spell string is an English lowercase letter. ----Output---- Print a single integer representing the maximum number of compatible spells you can choose from the given list. ----Examples---- Input 4 abc def gh cz Output 3 Input 3 abc bca cab Output 1 Input 5 a b c d e Output 5","solution":"def max_compatible_spells(spell_count, spells): def are_compatible(spell1, spell2): return not set(spell1) & set(spell2) max_count = 0 for i in range(1 << spell_count): selected_spells = [spells[j] for j in range(spell_count) if i & (1 << j)] if all(are_compatible(spell1, spell2) for k, spell1 in enumerate(selected_spells) for spell2 in selected_spells[k+1:]): max_count = max(max_count, len(selected_spells)) return max_count"},{"question":"A permutation of a string is an arrangement of its characters in a specific order. For instance, the permutations of the string \\"abc\\" are \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", and \\"cba\\". A lexicographical permutation is an arrangement of characters that follows the dictionary order. For example, the lexicographical permutations of the string \\"abc\\" are: \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\". Given a string of lowercase letters, your task is to generate all its permutations in lexicographical order. Your program should read a string and output all the permutations of the string in lexicographical order, each on a new line. Input The input consists of a single line containing a string of lowercase letters. You may assume that the length of the string is at most 10 characters. Output The output should consist of lines, each containing a single permutation of the string in lexicographical order. Example Input abc Output abc acb bac bca cab cba Input baa Output aab aba baa","solution":"import itertools def lexicographical_permutations(s): Generates all permutations of the string in lexicographical order. Args: s (string): The input string Returns: list: A list of all permutations in lexicographical order permutations = sorted(set(\'\'.join(p) for p in itertools.permutations(s))) return permutations"},{"question":"You are given a list of integers. Your task is to perform Q operations on this list where each operation is either an update of elements within a specified range or a query to find the sum of elements within a specified range. There are two types of operations: - An update operation 1 l r x: Add a given integer x to every element in the list from index l to index r (inclusive). - A query operation 2 l r: Compute and print the sum of the elements from index l to index r (inclusive). -----Constraints----- - The list contains integers where the maximum size of the list `N` is 10^5. - The number of operations `Q` is up to 100,000. - All values in input are integers. - 1 leq N, Q leq 10^5 - 1 leq l leq r leq N - The initial values in the list as well as `x` are between -10^9 and 10^9. -----Input----- Input is given from Standard Input in the following format: N Q List of N integers Operation_1 : Operation_Q See Sample Input 1 for an example. -----Output----- For each query operation, print a line containing the sum of the specified range. -----Sample Input----- 5 3 1 2 3 4 5 1 1 3 2 2 2 5 2 1 4 -----Sample Output----- 16 16 In the first update operation, the list becomes [3, 4, 5, 4, 5]. The first query operation computes the sum from index 2 to 5, which gives 4+5+4+5=18. The second query operation computes the sum from index 1 to 4, which gives 3+4+5+4=16.","solution":"class RangeManipulation: def __init__(self, array): self.array = array self.n = len(array) def update(self, l, r, x): for i in range(l - 1, r): self.array[i] += x def query(self, l, r): return sum(self.array[l - 1:r]) def process_operations(n, q, array, operations): rm = RangeManipulation(array) results = [] for operation in operations: op = operation.split() if op[0] == \'1\': _, l, r, x = map(int, op) rm.update(l, r, x) elif op[0] == \'2\': _, l, r = map(int, op) results.append(rm.query(l, r)) return results"},{"question":"Alice envisions creating representational paintings using an assortment of colors. She imagines a canvas where each square is painted with a particular color. The canvas measures n rows by m columns. Alice can only paint using a limited palette of k colors, represented by integers from 1 to k. Alice\'s challenge is to design a pattern on the canvas such that no two adjacent squares (sharing an edge) can have the same color. She is curious to know how she should fill her canvas using the given constraints. Given this, formulate an algorithm that helps Alice determine one valid pattern for the canvas. Input The first line of the input contains three integers n, m, and k (1 ≤ n, m ≤ 50; 1 ≤ k ≤ 4) — the dimensions of the canvas and the number of colors available in Alice\'s palette. Output Output n lines, each containing m integers — the color value of each square in the corresponding row such that no two adjacent squares have the same color. If there are multiple solutions, any will be accepted. Example Input 3 4 3 Output 1 2 3 1 2 3 1 2 3 1 2 3 Input 2 2 2 Output 1 2 2 1","solution":"def fill_canvas(n, m, k): Return the color pattern for a n x m canvas using k colors such that no two adjacent squares share the same color. canvas = [[0] * m for _ in range(n)] # A function to determine the valid color for a cell def find_color(used_colors): for color in range(1, k + 1): if color not in used_colors: return color for i in range(n): for j in range(m): # Collect used colors from adjacent cells used_colors = set() if i > 0: used_colors.add(canvas[i-1][j]) if j > 0: used_colors.add(canvas[i][j-1]) canvas[i][j] = find_color(used_colors) return canvas # Example usage: # n, m, k = 3, 4, 3 # result = fill_canvas(n, m, k) # for row in result: # print(\' \'.join(map(str, row)))"},{"question":"Given an undirected graph represented by an adjacency list g of n vertices and m edges, complete the function `isCycle` which returns a boolean indicating if the graph contains any cycle. Input: The first line of input contains an integer T denoting the number of test cases. The first line of each test case contains an integer n denoting the number of vertices and m denoting the number of edges. Then the next m lines each contain two integers u and v denoting an edge between vertex u and vertex v. Output: For each test case, return `True` if there is at least one cycle in the graph; otherwise, return `False`. Constraints: 1 <= T <= 100 1 <= n, m <= 100 Example(To be used for expected output): Input: 2 3 3 1 2 2 3 3 1 4 3 1 2 2 3 3 4 Output: True False Note: The Input/Output format and Example given are used for system\'s internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def isCycle(n, m, edges): from collections import defaultdict # To detect cycle in an undirected graph using DFS def detect_cycle(v, visited, parent): visited[v] = True for neighbor in adj[v]: if not visited[neighbor]: if detect_cycle(neighbor, visited, v): return True elif neighbor != parent: return True return False # Create adjacency list representation of the graph adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) # visited array to keep track of visited vertices visited = [False] * (n + 1) # Check for cycle in different DFS trees for i in range(1, n + 1): if not visited[i]: if detect_cycle(i, visited, -1): return True return False def handle_multiple_cases(T, cases): results = [] for case in cases: n, m, edges = case[\'n\'], case[\'m\'], case[\'edges\'] results.append(isCycle(n, m, edges)) return results"},{"question":"Write a function that takes two strings as input and determines whether one string is a permutation of the other. Return true if one string is a permutation of the other, and false otherwise. Assume that both strings may contain any of the 128 ASCII characters and are case-sensitive, i.e., \'a\' and \'A\' are considered different characters. **Example:** ``` isPermutation(\\"abc\\", \\"bca\\") --> true isPermutation(\\"abc\\", \\"def\\") --> false ```","solution":"def isPermutation(str1, str2): Determines if one string is a permutation of the other. :param str1: First string :param str2: Second string :return: True if one is a permutation of the other, False otherwise if len(str1) != len(str2): return False return sorted(str1) == sorted(str2)"},{"question":"Write a function that takes a list of integers and returns a new list with the integers sorted in ascending order. However, you need to maintain the relative positions of negative numbers and zero while rearranging the positive numbers. Example: Input: [3, -2, -1, 5, 0, -4, 2, 8, -3] Output: [2, -2, -1, 3, 0, -4, 5, 8, -3] Explanation: The positive numbers are [3, 5, 2, 8], and when sorted, they become [2, 3, 5, 8]. The positions of the negative numbers and zero remain the same in the final output.","solution":"def sort_positive_numbers_with_maintained_order(lst): Returns a new list where the positive numbers are sorted in ascending order, while the relative positions of negative numbers and zero are maintained. # Extract positive numbers and sort them positive_numbers = sorted([num for num in lst if num > 0]) # Use an iterator to replace positive numbers in the original list with the sorted ones pos_iter = iter(positive_numbers) result = [next(pos_iter) if num > 0 else num for num in lst] return result"},{"question":"Chef is considering expanding his business to other planets. Since the gravitational force varies on each planet, the time it takes for an object to hit the ground from a given height changes too. Chef wants to prepare a report on the time taken by objects to fall from given heights on different planets. -----Input:----- - The first line will contain a single integer T, the number of test cases. - The first line of each test case will contain a single integer G, representing the number of gravitational forces. - The next line will contain G space-separated integers, each representing a gravitational force g_i (0 < g_i leq 100), in meters per second squared. - The next line of each test case will contain an integer H, representing the height from which an object is dropped, in meters. - The next line will contain G space-separated integers, each representing the time t_i it takes for an object to fall from height H with respective gravitational force g_i. -----Output:----- For each test case, output G space-separated integers representing the calculated speeds v_i (in meters per second) of objects when they hit the ground for the given gravitational forces. For every height, use the formula to calculate the speed on impact: [ v = g cdot t ] -----Constraints----- - 1 leq T leq 100 - 1 leq G leq 100 - 1 leq H leq 10^9 - 1 leq t_i leq 10^5 for 1 leq i leq G -----Sample Input:----- 2 2 9.8 3.7 100 4.5 8.2 3 9.8 3.7 1.6 50 3.2 6.1 8.9 -----Sample Output:----- 44.1 30.34 31.36 22.57 14.24 -----Explanation:----- In the first test case, the velocities are calculated for two different gravitational forces. For g_1=9.8 and t_1=4.5, the speed is v_1 = 9.8 times 4.5 = 44.1 , text{m/s}. For g_2=3.7 and t_2=8.2, the speed is v_2 = 3.7 times 8.2 = 30.34 , text{m/s}. In the second test case, the velocities are calculated similarly for three different gravitational forces.","solution":"def calculate_speeds(T, test_cases): Calculates the speeds of objects when they hit the ground for given gravitational forces and times. Args: T : int : Number of test cases. test_cases : list : List of test cases, where each test consists of (G, gravities, H, times). Returns: list : List of lists with the speeds for each test case. results = [] for case in test_cases: G, gravities, H, times = case speeds = [round(g * t, 2) for g, t in zip(gravities, times)] results.append(speeds) return results"},{"question":"As the CTO of a tech startup, you are tasked with implementing a secure message delivery system. The system uses a specific encoding scheme based on the Reverse-Polish Notation (RPN) for encrypting and decrypting messages. Each message is encoded into a mathematical expression written in RPN, and the decoded output is an integer after evaluating the expression. Your task is to create a program that accepts an encoded message as an RPN expression and evaluates it to return the correct integer result. # Input Format A single line containing the RPN expression. Each token (either an integer or an operator) is separated by a space. # Output Format A single integer which is the result of evaluating the RPN expression. # Valid Operations - `+`: Addition - `-`: Subtraction - `*`: Multiplication - `/`: Integer division (note: division by zero will not be tested) # Constraints - The RPN expression will contain between 1 and 100 tokens. - The integers will be in the range `-10^3` to `10^3`. - The operators will be one of `+`, `-`, `*`, `/`. - The result of each operation will fit in a 32-bit signed integer. # Sample Input 1 ``` 3 4 + 2 * 7 / ``` # Sample Output 1 ``` 2 ``` # Sample Input 2 ``` 5 1 2 + 4 * + 3 - ``` # Sample Output 2 ``` 14 ``` # Explanation For Sample Input 1: - The RPN expression `3 4 +` evaluates to `7`. - The expression `7 2 *` evaluates to `14`. - Finally, `14 7 /` evaluates to `2`. For Sample Input 2: - The RPN expression `1 2 +` evaluates to `3`. - The expression `3 4 *` evaluates to `12`. - Then, `5 + 12` evaluates to `17`. - Finally, `17 3 -` evaluates to `14`. Your task is to implement this RPN evaluator as efficiently as possible within the given constraints.","solution":"def evaluate_rpn(expression): Evaluates a given RPN (Reverse-Polish Notation) expression and returns the result. :param expression: A string containing the RPN expression :return: The integer result of evaluating the RPN expression stack = [] tokens = expression.split() for token in tokens: if token in \\"+-*/\\": operand2 = stack.pop() operand1 = stack.pop() if token == \'+\': result = operand1 + operand2 elif token == \'-\': result = operand1 - operand2 elif token == \'*\': result = operand1 * operand2 else: # token == \'/\' result = int(operand1 / operand2) # Integer division preserving the sign stack.append(result) else: stack.append(int(token)) return stack[0]"},{"question":"In ancient times, there was a kingdom with a grand castle surrounded by a circular wall. The king decided to construct a series of watchtowers along the wall to keep an eye on the kingdom. The king wants to build exactly k watchtowers, evenly spaced around the circular wall, which has a circumference of C. Your task is to determine the distance between each pair of adjacent watchtowers and output these distances. The positions of the watchtowers are calculated in such a manner that the first watchtower is always placed at the starting point (0 distance) of the wall. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. For each dataset, two integers C (1 ≤ C ≤ 10000) and k (1 ≤ k ≤ 100) are given on a single line, representing the circumference of the wall and the number of watchtowers. The number of datasets will not exceed 30. Output For each dataset, output a single line containing k integers separated by spaces. Each integer represents the distance from one watchtower to the next, in the order they appear from the starting point around the circular wall. Example Input 100 4 200 5 360 6 0 Output 25 25 25 25 40 40 40 40 40 60 60 60 60 60 60","solution":"def evenly_spaced_watchtowers(datasets): Given a list of tuples representing (C, k) for multiple datasets, returns the distances between adjacent watchtowers for each dataset. results = [] for C, k in datasets: if C == 0 and k == 0: break distance = C // k results.append(\' \'.join([str(distance)] * k)) return results def parse_input(input_str): Parse the given input string of multiple datasets into a list of (C, k) tuples. lines = input_str.strip().split(\'n\') datasets = [tuple(map(int, line.split())) for line in lines if line != \'0\'] return datasets"},{"question":"You are given an array of integers A of length N. You need to rearrange the elements of the array so that there are no two consecutive elements with the same value. If there are multiple rearrangements that satisfy the condition, print any one of them. If it\'s not possible to rearrange the elements to meet the condition, print \\"Not possible\\". ------ Input Format ------ - The first line contains an integer T denoting the number of test cases. The T test cases then follow. - The first line of each test case contains an integer N, the length of the array. - The second line of each test case contains N space-separated integers denoting the elements of the array A. ------ Output Format ------ For each test case, output on one line a rearranged array that satisfies the condition or \\"Not possible\\" if no valid rearrangement exists. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ A[i] ≤ 100 ----- Sample Input 1 ------ 2 4 1 1 2 2 3 1 1 1 ----- Sample Output 1 ------ 1 2 1 2 Not possible ----- explanation 1 ------ - For the first test case, [1, 2, 1, 2] is one of the possible rearrangements that satisfy the condition. Other valid rearrangements include [2, 1, 2, 1]. - For the second test case, since all elements are the same, it\'s not possible to rearrange them to avoid consecutive duplicates, so the output is \\"Not possible\\".","solution":"from collections import Counter import heapq def rearrange_array(arr): Rearranges the given array so that no two consecutive elements are the same. If not possible, returns \\"Not possible\\". counter = Counter(arr) max_heap = [(-count, num) for num, count in counter.items()] heapq.heapify(max_heap) prev_count, prev_num = 0, None result = [] while max_heap: count, num = heapq.heappop(max_heap) result.append(num) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_num)) prev_count = count + 1 prev_num = num if len(result) == len(arr): return result else: return \\"Not possible\\" def process_test_cases(input_data): Processes the test case input and returns the results for each test case. output = [] T = int(input_data[0]) index = 1 for _ in range(T): N = int(input_data[index]) arr = list(map(int, input_data[index + 1].split())) rearranged = rearrange_array(arr) output.append(rearranged) index += 2 return output"},{"question":"Given an array of integers, return a tuple. The first element of the tuple should be the sum of all the even numbers in the array, and the second element should be the product of all the odd numbers in the array. If there are no odd numbers, the product should be considered as 1. For example: ```python Input: [1, 2, 3, 4, 5] Output: (6, 15) # Sum of evens: 2 + 4 = 6, Product of odds: 1 * 3 * 5 = 15 Input: [2, 4, 6, 8] Output: (20, 1) # Sum of evens: 2 + 4 + 6 + 8 = 20, No odd numbers, so product is 1 Input: [1, 3, 5, 7] Output: (0, 105) # No even numbers, so sum is 0, Product of odds: 1 * 3 * 5 * 7 = 105 ```","solution":"from typing import List, Tuple def sum_and_product(arr: List[int]) -> Tuple[int, int]: Returns a tuple with the sum of all even numbers and the product of all odd numbers in the array. If there are no odd numbers, the product is 1. even_sum = 0 odd_product = 1 has_odd = False for num in arr: if num % 2 == 0: even_sum += num else: odd_product *= num has_odd = True if not has_odd: odd_product = 1 return (even_sum, odd_product)"},{"question":"You are given a sequence of N integers \'A\' and an integer \'K\'. You need to determine if there exists a rotation of the sequence such that the resulting sequence does not contain any subarray of length K that has all elements equal. A rotation means taking the sequence and moving some consecutive elements from the end to the front. For example, rotating the sequence \\"1 2 3 4 5\\" by 2 places results in \\"4 5 1 2 3\\". -----Constraints----- - 1 leq N leq 10^5 - 1 leq K leq N - 1 leq A_i leq 10^5 -----Input----- Input is given from Standard Input in the following format: N K A_1 A_2 ... A_N -----Output----- Print \\"Yes\\" if there exists a rotation of the sequence such that no subarray of length K has all elements equal, otherwise print \\"No\\". -----Sample Input----- 5 3 1 2 3 1 2 -----Sample Output----- Yes - For the sample input, rotating the sequence by 1 place results in \\"2 3 1 2 1\\". - The subarrays of length 3 in this sequence are [2, 3, 1], [3, 1, 2], [1, 2, 1]. - All these subarrays do not have all elements equal. ------Sample Input----- 6 2 1 1 2 2 3 3 ------Sample Output----- No - For the sample input, no matter how you rotate the sequence, there will always be a subarray of length 2 with all elements equal. For example: [1, 1], [2, 2], [3, 3]. Hence, the output is \\"No\\".","solution":"def can_rotate_to_avoid_uniform_k_subarray(N, K, A): Determines if there exists a rotation of the sequence such that the resulting sequence does not contain any subarray of length K that has all elements equal. Parameters: N : int : the length of the sequence K : int : the length of the subarray A : list of int : the sequence Returns: str : \\"Yes\\" if such a rotation exists, otherwise \\"No\\" # If K == 1, we can always find a solution because single elements are always unique if K == 1: return \\"Yes\\" # Check if there is a segment of length K in the original array with all elements equal for i in range(N - K + 1): if all(x == A[i] for x in A[i:i+K]): return \\"No\\" return \\"Yes\\""},{"question":"Alex is a game enthusiast and loves to play strategic video games that involve collecting resources. One day, while playing his favorite game, he encountered a scenario where he was given a string of characters representing different types of resources. Each character in the string is either \'G\' for gold, \'S\' for silver, or \'C\' for copper. Alex\'s objective is to collect all three types of resources at least once. He can collect resources from any consecutive segment of the string. However, he wants to collect the resources as quickly as possible. Hence, he is looking for the smallest segment of the string that contains at least one \'G\', one \'S\', and one \'C\'. Your task is to help Alex find the length of the smallest segment of the string that contains at least one of each type of resource. Input: - The input consists of one line containing a string of characters (only \'G\', \'S\', and \'C\'). Output: - Output the length of the smallest segment that contains at least one \'G\', one \'S\', and one \'C\'. If it is not possible to find such a segment, output 0. Constraints: - The length of the string will be between 1 and 100000. Example: Input: GSCCGSG Output: 3 Input: CCCGGSS Output: 4 SAMPLE INPUT GSCCGSG SAMPLE OUTPUT 3","solution":"def smallest_segment_length(resources): Returns the length of the smallest segment that contains at least one \'G\', one \'S\', and one \'C\'. If no such segment exists, return 0. n = len(resources) if n < 3: return 0 min_length = float(\'inf\') left = 0 count = {\'G\': 0, \'S\': 0, \'C\': 0} distinct_count = 0 for right in range(n): if resources[right] in count: if count[resources[right]] == 0: distinct_count += 1 count[resources[right]] += 1 while distinct_count == 3: min_length = min(min_length, right - left + 1) if resources[left] in count: count[resources[left]] -= 1 if count[resources[left]] == 0: distinct_count -= 1 left += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"Samantha is working on sorting algorithms and is tasked with creating an optimized sorting algorithm for a specific set of data. She wants to sort an array of integers such that all even numbers appear before all odd numbers while maintaining the relative order of even and odd numbers (i.e., if two same-parity numbers appear in a certain order in the input, they should appear in the same order in the output). Your task is to write a function that sorts the array according to Samantha\'s requirements. The function should be optimized to run as efficiently as possible given the constraint on the maximum size of the array. The constraints are as follows: - The length of the array `n` will not exceed 10^5. - The array consists of integers within the range -10^9 to 10^9. -----Function Signature----- ```python def sort_even_odd(arr: List[int]) -> List[int]: pass ``` -----Input----- - The function accepts a single parameter `arr`, which is a list of integers. The length of the list 0 le n le 10^5 and -10^9 le arr[i] le 10^9. -----Output----- - The function should return a list of integers that are sorted such that all even numbers come before all odd numbers while maintaining relative order within even and odd numbers. -----Example----- ```python >>> sort_even_odd([1, 2, 4, 3, 5, 6]) [2, 4, 6, 1, 3, 5] >>> sort_even_odd([9, 3, 4, 2, 7, 8]) [4, 2, 8, 9, 3, 7] >>> sort_even_odd([5, 3, 1]) [5, 3, 1] ``` -----Note----- In the first example, the even numbers [2, 4, 6] appear before the odd numbers [1, 3, 5] and the relative order of numbers within each group is maintained. In the second example, the even numbers [4, 2, 8] appear before the odd numbers [9, 3, 7] and the relative order of numbers within each group is maintained. In the third example, there are no even numbers, hence the output is the same as the input.","solution":"from typing import List def sort_even_odd(arr: List[int]) -> List[int]: even_numbers = [x for x in arr if x % 2 == 0] odd_numbers = [x for x in arr if x % 2 != 0] return even_numbers + odd_numbers"},{"question":"You are given an array of integers representing the scores of different players in a tournament. Your goal is to determine the position at which a new player\'s score would rank among the existing players. Assume that all scores are distinct, and higher scores are ranked higher. -----Constraints----- - 1 ≤ length of array ≤ 1000 - 1 ≤ score of each player, including the new player ≤ 10000 -----Inputs----- Input is given from Standard Input in the following format: n score_1 score_2 ... score_n new_score -----Outputs----- Print the rank of the new score (1-indexed). -----Sample Input----- 5 100 200 150 120 180 130 -----Sample Output----- 4 Explanation: The scores in descending order are: 200, 180, 150, 130, 120, 100. The new player\'s score of 130 ranks 4th in this list. Therefore, the output should be 4.","solution":"def find_new_player_rank(scores, new_score): Returns the rank of the new player\'s score among the given scores. scores.append(new_score) scores.sort(reverse=True) return scores.index(new_score) + 1 def main(): n = int(input().strip()) scores = list(map(int, input().strip().split())) new_score = int(input().strip()) print(find_new_player_rank(scores, new_score)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a string containing only \'a\', \'b\', and \'c\'. Your task is to determine whether it is possible to rearrange the string such that no two adjacent characters are the same. If it\'s possible, print \\"YES\\" and one possible rearranged string. If it\'s not possible, print \\"NO\\". Input The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. Each of the next T lines contains a single string containing only letters \'a\', \'b\', and \'c\'. The length of each string is between 1 and 100. Output For each test case, print \\"YES\\" and a possible rearranged string if it\'s possible, otherwise print \\"NO\\". Examples Input 3 abac aaaa abc Output YES abac NO YES abc","solution":"import heapq from collections import Counter def rearrange_string(s): Rearrange string such that no two adjacent characters are the same. Return \\"YES\\" and the rearranged string, or \\"NO\\" if not possible. counter = Counter(s) max_heap = [(-count, char) for char, count in counter.items()] heapq.heapify(max_heap) result = [] prev_count, prev_char = 0, \'\' while max_heap: count, char = heapq.heappop(max_heap) result.append(char) count += 1 if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count, char rearranged_str = \'\'.join(result) if len(rearranged_str) == len(s): return \\"YES\\", rearranged_str else: return \\"NO\\", None def process_test_cases(T, strings): results = [] for i in range(T): s = strings[i] result = rearrange_string(s) if result[0] == \\"YES\\": results.append(f\\"YESn{result[1]}\\") else: results.append(\\"NO\\") return results # Handle input and output def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) strings = data[1:] results = process_test_cases(T, strings) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Katerina is preparing for her competitive programming exam. One of the important topics is understanding and working with strings, especially involving palindromes. Katerina decides to practice with a problem involving finding specific palindromes within a string. Katerina\'s task is to determine whether a given string can be divided into three non-empty parts such that all three parts are palindromes. Help Katerina by writing a program that checks if it is possible to split the given string into three non-empty palindromic parts. -----Input----- The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 100), consisting of lowercase English letters. -----Output----- For each test case, print \\"YES\\" if the string can be divided into three non-empty palindromic parts, otherwise print \\"NO\\". Print the strings without quotes. -----Examples----- Input 3 abacaba abccba abcd Output YES YES NO","solution":"def is_palindrome(s): Checks if a given string s is a palindrome. return s == s[::-1] def can_be_divided_into_three_palindromic_parts(s): Determines if a given string s can be divided into three non-empty palindromic parts. n = len(s) for i in range(1, n - 1): for j in range(i + 1, n): part1 = s[:i] part2 = s[i:j] part3 = s[j:] if is_palindrome(part1) and is_palindrome(part2) and is_palindrome(part3): return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): Processes multiple test cases and returns the results. results = [] for s in test_cases: results.append(can_be_divided_into_three_palindromic_parts(s)) return results"},{"question":"Write a function that takes a string containing a mix of letters and digits and returns a new string with the letters sorted in alphabetical order and the digits sorted in ascending order. Both groups should retain their relative positions from the original string. **Example:** ```python input_str = \\"a1b2c3\\" # sorted letters: abc # sorted digits: 123 # the original order: letter-digit-letter-digit-letter-digit result = \\"a1b2c3\\" input_str = \\"f4e3d2c1b0a9\\" # sorted letters: abcdef # sorted digits: 012349 # maintaining the relative positions: letter-digit-letter-digit... result = \\"a0b1c2d3e4f9\\" ``` **Constraints:** - The input string will only contain alphanumeric characters. - The length of the input string will not exceed 100 characters.","solution":"def sort_letters_and_digits(input_str): Given a string containing a mix of letters and digits, returns a new string with the letters sorted in alphabetical order and the digits sorted in ascending order, while maintaining their original relative positions of letters and digits. letters = sorted([char for char in input_str if char.isalpha()]) digits = sorted([char for char in input_str if char.isdigit()]) letter_index = 0 digit_index = 0 result = [] for char in input_str: if char.isalpha(): result.append(letters[letter_index]) letter_index += 1 elif char.isdigit(): result.append(digits[digit_index]) digit_index += 1 return \'\'.join(result)"},{"question":"A coding competition requires participants to create the longest possible palindrome using a given set of characters. The characters are listed with their respective counts. You are given a string s representing the characters and their counts together with a single integer n representing the number of leftover characters the participants are allowed to utilize in addition to creating the longest palindrome. Can you help determine the length of the longest possible palindrome that can be created? -----Input----- The first line contains a single string s where each character occurs exactly twice (1 ≤ |s| ≤ 200). The second line contains a single integer n (0 ≤ n ≤ 100). -----Output----- Print a single integer — the length of the longest palindrome that can be created. -----Examples----- Input aabbcc 3 Output 9 -----Note----- In the test sample, the longest palindrome that can be formed is \\"aabccbaa\\" with the leftover characters being used to add any other character to the middle, resulting in a maximum length of 9.","solution":"def longest_palindrome_with_leftovers(s, n): Determine the length of the longest palindrome that can be created with the given characters and an additional number of leftover characters. Parameters: s (str): A string with each character occurring exactly twice. n (int): The number of leftover characters allowed. Returns: int: The length of the longest possible palindrome. # Finding unique characters in the string unique_chars = set(s) # Length of the palindrome that can be created initially palindrome_length_without_leftovers = len(s) # Account for the use of leftover characters to extend the palindrome length max_length_with_leftovers = palindrome_length_without_leftovers + n return max_length_with_leftovers"},{"question":"You are given an undirected graph with N nodes and M edges. Each edge has a weight associated with it. Your task is to find the sum of the weights of the edges that form the Minimum Spanning Tree (MST) of the graph. If the MST does not exist, output -1. -----Constraints----- - 2 ≤ N ≤ 10^5 - 1 ≤ M ≤ 2×10^5 - 1 ≤ weight of each edge ≤ 10^6 -----Input----- The input is given from Standard Input in the following format: N M u_1 v_1 w_1 u_2 v_2 w_2 : u_M v_M w_M Where each (u_i, v_i, w_i) represents an edge between nodes u_i and v_i with weight w_i. -----Output----- Print the sum of the weights of the edges in the minimum spanning tree, or -1 if the MST does not exist. -----Sample Input----- 4 5 1 2 3 1 3 4 4 2 6 4 3 5 2 3 2 -----Sample Output----- 11 Explanation: The MST for this graph includes the edges (2, 3), (1, 2), and (1, 3) with weights 2, 3, and 4 respectively. The total weight is 2 + 3 + 4 = 9.","solution":"def find(parent, i): if parent[i] != i: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): rootx = find(parent, x) rooty = find(parent, y) if rootx != rooty: if rank[rootx] > rank[rooty]: parent[rooty] = rootx elif rank[rootx] < rank[rooty]: parent[rootx] = rooty else: parent[rooty] = rootx rank[rootx] += 1 def kruskal_mst(n, edges): edges.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n mst_weight = 0 edges_in_mst = 0 for u, v, weight in edges: root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: mst_weight += weight union(parent, rank, root_u, root_v) edges_in_mst += 1 if edges_in_mst == n - 1: return mst_weight return -1 def calculate_mst_weight(n, m, edges): if n == 0 or m == 0: return -1 return kruskal_mst(n, edges) def minimum_spanning_tree(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] index = 2 for _ in range(m): u = int(data[index]) - 1 v = int(data[index + 1]) - 1 weight = int(data[index + 2]) index += 3 edges.append((u, v, weight)) result = calculate_mst_weight(n, m, edges) print(result)"},{"question":"Write a program that reads a list of integers and checks for each integer if it is a \\"digit root palindrome.\\" The digit root of a number is obtained by an iterative process of summing digits, on each step using the result from the previous step, until a single-digit number is obtained. A number is said to be a digit root palindrome if the digit root remains the same when reversed. Input The input consists of multiple test cases. Each test case is provided on a new line and contains one integer. The input terminates when a line containing the number 0 is encountered (this line should not be processed). Output For each integer in the input, output \\"Yes\\" if it is a digit root palindrome and \\"No\\" otherwise. Examples Input 56 1234 98765 1010101 0 Output Yes Yes Yes Yes Input 34567 89 1234567890 1000 0 Output Yes Yes Yes Yes Note: - To reverse a single-digit number, it remains the same. - Input numbers are guaranteed to be non-negative integers.","solution":"def digit_root(n): Calculate the digit root of a number. while n >= 10: n = sum(int(digit) for digit in str(n)) return n def is_digit_root_palindrome(number): Determine if the digit root of a number is a palindrome. root = digit_root(number) return str(root) == str(root)[::-1] def process_input(numbers): Process a list of numbers and return a list of \\"Yes\\" or \\"No\\" for each number based on whether it is a digit root palindrome or not. results = [] for number in numbers: if number == 0: break results.append(\\"Yes\\" if is_digit_root_palindrome(number) else \\"No\\") return results"},{"question":"You are given a string of lowercase English letters, and you need to determine the number of vowels within it. Write a function `count_vowels(s: str) -> int` which takes a single parameter, a string `s`, and returns the number of vowels (\'a\', \'e\', \'i\', \'o\', \'u\') in that string. # INPUT - A single string `s` of length up to 1000. # OUTPUT - An integer representing the number of vowels in the given string. # SAMPLE INPUT ``` hello ``` # SAMPLE OUTPUT ``` 2 ``` # SAMPLE INPUT ``` encyclopedia ``` # SAMPLE OUTPUT ``` 5 ``` Explanation: In the first example, the input is \\"hello\\". The vowels in the string are \'e\' and \'o\', so the output is 2. In the second example, the input is \\"encyclopedia\\". The vowels in the string are \'e\', \'o\', \'e\', \'i\', \'a\', so the output is 5.","solution":"def count_vowels(s: str) -> int: Returns the number of vowels in the input string `s`. Vowels considered are \'a\', \'e\', \'i\', \'o\', and \'u\'. vowels = set(\\"aeiou\\") return sum(1 for char in s if char in vowels)"},{"question":"The kingdom is engaged in a war with entities known as the Four Mighty Enemies: the Dragon, the Mermaid, the Elf, and the Troll. Each enemy has specific properties and weaknesses. The kingdom has three types of missiles in its arsenal: Fire, Water, and Earth missiles. Each missile type is effective against one or more enemies. You are given n enemies, and for each enemy, the type of enemy (Dragon, Mermaid, Elf, or Troll). You also have the number of Fire, Water, and Earth missiles in the arsenal. The effectiveness of the missile types are defined as follows: - Fire missiles are effective against Dragons and Trolls. - Water missiles are effective against Mermaids and Elfs. - Earth missiles are effective against Trolls and Elfs. Your task is to plan the attack strategy to use the minimum number of missiles to eliminate all enemies. Note that if an enemy can be defeated by more than one type of missile, you can choose any one of the missile types. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. Each test case consist of the following: - The first line contains four integers n, f, w, and e (1 le n le 3 cdot 10^5, 1 le f, w, e le 10^9) — the number of enemies and the number of Fire, Water, and Earth missiles respectively. - The second line contains n integers representing the types of the enemies. The i-th integer is in [1, 2, 3, 4] representing (1: Dragon, 2: Mermaid, 3: Elf, 4: Troll). It is guaranteed that the sum of values of n over all test cases in the input does not exceed 3 cdot 10^5. -----Output----- For each test case, print the minimum number of missiles needed to eliminate all enemies. If it is impossible to eliminate all enemies, print -1. -----Examples----- Input 3 4 2 1 1 1 2 3 4 3 1 1 1 1 2 3 5 3 2 1 4 4 4 4 4 Output 4 3 -1","solution":"def minimum_missiles_needed(t, cases): results = [] for case in cases: n, f, w, e, enemies = case dragon_count = enemies.count(1) mermaid_count = enemies.count(2) elf_count = enemies.count(3) troll_count = enemies.count(4) # Fire missiles can take care of dragon and trolls # Water missiles can take care of mermaids and elves # Earth missiles can take care of trolls and elves total_needed = 0 # Handling Dragons (1) - Only Fire missiles if dragon_count > f: results.append(-1) continue f -= dragon_count total_needed += dragon_count # Handling Mermaids (2) - Only Water missiles if mermaid_count > w: results.append(-1) continue w -= mermaid_count total_needed += mermaid_count # Handling Elves (3) - Either Water or Earth missiles if elf_count > w + e: results.append(-1) continue total_needed += elf_count elf_count -= min(elf_count, w) w -= min(elf_count, w) if elf_count > 0: e -= elf_count # Handling Trolls (4) - Either Fire or Earth missiles if troll_count > f + e: results.append(-1) continue total_needed += troll_count troll_count -= min(troll_count, f) f -= min(troll_count, f) if troll_count > 0: e -= troll_count results.append(total_needed) return results"},{"question":"# Problem Description: You are tasked with implementing a custom version of the `zip` function in Python. The `zip` function takes any number of iterables (e.g., lists, tuples) and returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences. The iteration continues until the shortest input iterable is exhausted. However, there are some specific conditions for the implementation: - Your implementation **cannot** use the built-in `zip` function. - The new function **must** return an iterator. - The function should be able to handle an arbitrary number of iterables. # Example: ```python # Example call for item in custom_zip([1, 2, 3], [\'a\', \'b\', \'c\'], [True, False, None]): print(item) # Expected output # (1, \'a\', True) # (2, \'b\', False) # (3, \'c\', None) ``` # Constraints: 1. **Inputs**: - The function will be called with at least one iterable. - Each provided iterable can contain any data type. 2. **Output**: - The function should produce tuples containing elements from each iterable. # Requirements: Define a function `custom_zip(*iterables)` that: 1. Handles an arbitrary number of input iterables. 2. Returns an iterator that yields tuples from the shortest input iterable. Remember, your function should replicate the behavior of Python\'s built-in `zip` function but with the constraints provided above. ```python def custom_zip(*iterables): # Your implementation here pass # Example usage: # Convert iterator to list for easier readability for demonstration purpose print(list(custom_zip([1, 2, 3], [\'a\', \'b\', \'c\'], [True, False, None]))) # Expected output: [(1, \'a\', True), (2, \'b\', False), (3, \'c\', None)] ``` # Notes: - You are responsible for writing the implementation code only. - Ensure that the function passes the provided example and any similar test cases.","solution":"def custom_zip(*iterables): Custom implementation of the zip function which returns an iterator of tuples. Each tuple contains elements from the corresponding position of the input iterables. The iteration stops when the shortest input iterable is exhausted. if not iterables: return iter([]) # Return an empty iterator if no iterables are provided # Get the minimum length among all the iterables min_length = min(len(it) for it in iterables) # Yield tuples of elements from each iterable for the minimum length for i in range(min_length): yield tuple(it[i] for it in iterables)"},{"question":"Create a function that takes a list of integers and an integer K, and returns the maximum sum of a subarray with exactly K elements. If the list has fewer than K elements, return None. The subarray should be contiguous and the function needs to be efficient in terms of time complexity. EXAMPLES For the list `[2, 1, 5, 1, 3, 2]` and `K = 3`, the function should return `9` because the maximum sum of a subarray with 3 elements is `5 + 1 + 3 = 9`. For the list `[2, 1, 5, 1, 3, 2]` and `K = 4`, the function should return `12` because the maximum sum of a subarray with 4 elements is `2 + 1 + 5 + 3 = 11`. For the list `[2, 1, 5, 1, 3, 2]` and `K = 7`, the function should return `None` because the list has fewer than 7 elements.","solution":"def max_sum_subarray(arr, K): Returns the maximum sum of a subarray with exactly K elements. If the list has fewer than K elements, return None. n = len(arr) if n < K: return None # Compute the sum of the first window of size K max_sum = current_sum = sum(arr[:K]) # Slide the window from start + 1 to end for i in range(K, n): current_sum += arr[i] - arr[i - K] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given a string containing only lowercase alphabets, write a function `find_minimal_rotations` to find the minimum number of adjacent character swaps necessary to make the string sorted in non-decreasing order. For example, the string `\\"dcba\\"` can be sorted with six swaps as follows: - Swap \'d\' and \'c\': `\\"cdba\\"` - Swap \'d\' and \'b\': `\\"cbda\\"` - Swap \'d\' and \'a\': `\\"cbad\\"` - Swap \'c\' and \'b\': `\\"bacd\\"` - Swap \'c\' and \'a\': `\\"bca\\"` - Swap \'b\' and \'a\': `\\"abcd\\"` Your task is to write a function that takes a single string `s` and returns the minimum number of swaps required to sort the string. Function Signature ```python def find_minimal_rotations(s: str) -> int: pass ``` Example ```python assert find_minimal_rotations(\\"dcba\\") == 6 assert find_minimal_rotations(\\"dabc\\") == 3 assert find_minimal_rotations(\\"ab\\") == 0 assert find_minimal_rotations(\\"cba\\") == 3 ``` Constraints - The input string will have at least 1 and at most 10^4 characters. - The input string contains only lowercase letters (`a-z`).","solution":"def find_minimal_rotations(s: str) -> int: Returns the minimum number of adjacent swaps required to sort the string in non-decreasing order. def merge_count_split_inv(arr, temp_arr, left, mid, right): # This function merges two halves of array and counts inversions i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions, because left subarray and right subarray are sorted, # and every element of left subarray (arr[i] to arr[mid]) is greater than arr[j] temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): # This function recursively sorts the array and counts inversions inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right) return inv_count # Main function starts here n = len(s) arr = list(s) # Create a temporary array temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n - 1)"},{"question":"Write a function `flatten_dictionary` that flattens a dictionary, where the keys can be nested arbitrarily deep. The keys in the flattened dictionary should be a concatenation of the keys from all levels, separated by dots (`.`). If a key exists at a level where there are no nested dictionaries, it should maintain that key. For example, given the dictionary: ```python { \\"key1\\": { \\"keyA\\": 1, \\"keyB\\": 2, \\"keyC\\": { \\"keyD\\": 3 } }, \\"key2\\": 4 } ``` The function should return: ```python { \\"key1.keyA\\": 1, \\"key1.keyB\\": 2, \\"key1.keyC.keyD\\": 3, \\"key2\\": 4 } ``` **Constraints:** - The input will always be a dictionary. - The dictionary keys will be strings and the values can be integers or other dictionaries. - You can assume the dictionary is not cyclic. Implement the function `flatten_dictionary(d: dict) -> dict`.","solution":"def flatten_dictionary(d, parent_key=\'\'): Flattens a dictionary, where the keys can be nested arbitrarily deep. items = [] for k, v in d.items(): new_key = parent_key + \'.\' + k if parent_key else k if isinstance(v, dict): items.extend(flatten_dictionary(v, new_key).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Given an array arr of N integers and an integer target, return the indices of the two numbers such that they add up to target. Example 1:- Input: 2 4 2 7 11 15 9 3 3 2 4 6 Output: 0 1 1 2 Your task: You need to complete the function twoSum() which takes an integer array arr, and an integer target as arguments and returns a list of two integers representing the indices of the elements whose sum equals the target. If there are no such elements, return an empty list. Constraints: 1 <= T <= 100 2 <= N <= 1000 -10^9 <= arr[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def twoSum(arr, target): Given an array of integers and a target value, find two indices such that the sum of the elements at those indices equals the target value. Parameters: arr (list): List of integers target (int): Target sum Returns: list: Indices of the two elements whose sum equals the target or an empty list if no such elements exist. lookup = {} for i, num in enumerate(arr): complement = target - num if complement in lookup: return [lookup[complement], i] lookup[num] = i return []"},{"question":"An e-commerce company wants to develop a new feature that automatically classifies product reviews as \'positive\' or \'negative\' based on their content. The classification is simple: A review is considered positive if it contains at least one of the pre-defined positive keywords and no negative keywords, otherwise, it is considered negative. You are given a list of positive and negative keywords, and a list of product reviews. Your task is to implement a function that classifies each review as \'positive\' or \'negative\'. -----Input----- The first line contains an integer k (1 ≤ k ≤ 10^4) indicating the number of positive keywords. The second line contains k distinct positive keywords separated by spaces. The third line contains an integer m (1 ≤ m ≤ 10^4) indicating the number of negative keywords. The fourth line contains m distinct negative keywords separated by spaces. The fifth line contains an integer n (1 ≤ n ≤ 10^3) indicating the number of reviews. The following n lines each contain a product review, which is a string of lowercase English letters and spaces. -----Output----- For each review, output \'positive\' if the review contains at least one positive keyword and no negative keywords, otherwise output \'negative\'. -----Example----- Input 3 good excellent amazing 2 bad terrible 3 this product is good and amazing the quality is terrible excellent choice for everyone Output positive negative positive","solution":"def classify_reviews(positive_keywords, negative_keywords, reviews): pos_set = set(positive_keywords.split()) neg_set = set(negative_keywords.split()) results = [] for review in reviews: review_words = set(review.split()) if any(word in review_words for word in pos_set) and not any(word in review_words for word in neg_set): results.append(\'positive\') else: results.append(\'negative\') return results"},{"question":"You are developing a library system where books can be checked out by users. The system will keep track of the number of books a user has checked out. Based on the number of books checked out, the system will send a reminder email to the user. Here is the reminder policy: 1. If the user has checked out no books, send an email with the text: \\"You have no books checked out. Check out our new arrivals!\\" 2. If the user has checked out fewer than 3 books, send an email with the text: \\"Don\'t forget to return your books on time!\\" 3. If the user has checked out 3 or more books, send an email with the text: \\"You have checked out a lot of books. Consider returning some.\\" Write a program that takes as input a single integer `N` representing the number of books a user has checked out, and outputs the correct reminder email text. ------ Input Format ------ - The input consists of a single integer `N`. ------ Output Format ------ - Print one of the following strings as per the problem statement. - \\"You have no books checked out. Check out our new arrivals!\\" - \\"Don\'t forget to return your books on time!\\" - \\"You have checked out a lot of books. Consider returning some.\\" ------ Constraints ------ - 0 leq N leq 100 ----- Sample Input 1 ------ 0 ----- Sample Output 1 ------ You have no books checked out. Check out our new arrivals! ----- Explanation 1 ------ The user has not checked out any books, so the reminder email encourages the user to check out new arrivals. ----- Sample Input 2 ------ 2 ----- Sample Output 2 ------ Don\'t forget to return your books on time! ----- Explanation 2 ------ The user has checked out 2 books, so the reminder email reminds the user to return the books on time. ----- Sample Input 3 ------ 3 ----- Sample Output 3 ------ You have checked out a lot of books. Consider returning some. ----- Explanation 3 ------ The user has checked out 3 books, so the reminder email suggests considering returning some of the books.","solution":"def get_reminder_email(N): Returns the appropriate reminder email text based on the number of books checked out. Parameters: N (int): The number of books checked out by the user. Returns: str: The reminder email text. if N < 0 or N > 100: raise ValueError(\\"The number of books must be between 0 and 100 inclusive.\\") if N == 0: return \\"You have no books checked out. Check out our new arrivals!\\" elif N < 3: return \\"Don\'t forget to return your books on time!\\" else: return \\"You have checked out a lot of books. Consider returning some.\\""},{"question":"An antique book collector wants to organize their collection of rare books. Each book in the collection has a certain thickness and monetary value. You have N books, each with a unique thickness T_i and a unique value V_i. The goal is to select a subset of books such that the total thickness of the selected books does not exceed a given limit L. When the collector views this subset, they prefer that the sum of the values of the selected books is maximized. Given the number of books, the thickness and value of each book, and the thickness limit, determine the maximum possible sum of values that can be achieved without exceeding the thickness limit. Input Read from standard input: - The integer N, which represents the number of books. - The integer L, which represents the thickness limit. - In the next N lines, each line contains two integers T_i and V_i - the thickness and value of each book (1 ≤ i ≤ N). Output Output the maximum sum of the values of the chosen books without exceeding the thickness limit. Limits All input data satisfy the following conditions: - 1 ≤ N ≤ 1000. - 1 ≤ T_i ≤ 1000. - 1 ≤ V_i ≤ 10000. - 1 ≤ L ≤ 10000. Input Example 1 4 7 1 4 3 2 4 5 2 3 Output Example 1 12 Explanation In this example, the collector can choose books 1, 3, and 4 to get maximum value: - Total thickness = 1 + 4 + 2 = 7. - Total value = 4 + 5 + 3 = 12. No other combination of books provides a higher value without exceeding the thickness limit.","solution":"def max_book_value(N, L, books): Calculates the maximum possible sum of values of a subset of books without exceeding the thickness limit. :param N: int, number of books :param L: int, thickness limit :param books: list of tuples, where each tuple contains (thickness, value) of a book :return: int, maximum sum of values without exceeding the thickness limit # Initialize dp array where dp[i] represents the maximum value that can be achieved with a thickness limit of i dp = [0] * (L + 1) # Loop through each book for thickness, value in books: # In reverse order for proper dynamic programming update for j in range(L, thickness - 1, -1): dp[j] = max(dp[j], dp[j - thickness] + value) # The answer will be the maximum value we can get with thickness limit L return max(dp) # Example usage if __name__ == \\"__main__\\": books = [(1, 4), (3, 2), (4, 5), (2, 3)] N = 4 L = 7 print(max_book_value(N, L, books)) # Output: 12"},{"question":"You are given a sequence of n integers. Your task is to find the minimum length of a contiguous subarray of which the sum is at least s. If there is no such subarray, return 0. # Input The first line of input contains two integers n and s, where 1 ≤ n ≤ 100000 and 1 ≤ s ≤ 10^9. The second line contains n integers, each representing an element of the sequence. The elements of the sequence are guaranteed to be between 1 and 10^4, inclusive. # Output Print a single integer representing the minimum length of a contiguous subarray of which the sum is at least s. If no such subarray exists, print 0. # Examples Example 1 Input: ``` 10 15 5 1 3 5 10 7 4 9 2 8 ``` Output: ``` 2 ``` Explanation: - The shortest subarray with sum at least 15 is [10, 7], which has length 2. Example 2 Input: ``` 5 100 1 2 3 4 5 ``` Output: ``` 0 ``` Explanation: - There is no subarray with sum at least 100. # Note To solve this problem, some useful techniques include using a sliding window approach or two-pointer method to efficiently calculate the sum of subarrays and adjust the window size dynamically. This ensures that the solution remains within acceptable time limits for large inputs.","solution":"def min_subarray_len(n, s, nums): Returns the minimum length of a contiguous subarray of which the sum is at least s. If there is no such subarray, returns 0. left = 0 curr_sum = 0 min_len = n + 1 for right in range(n): curr_sum += nums[right] while curr_sum >= s: min_len = min(min_len, right - left + 1) curr_sum -= nums[left] left += 1 if min_len == n + 1: return 0 else: return min_len"},{"question":"A library management software needs a feature to handle book checkouts and returns, as well as to answer queries about the availability of specific titles. You need to implement a program that performs these tasks. Operations: - borrow(x): mark book x as borrowed. - return(x): mark book x as returned. - check(x): output whether book x is currently borrowed or available. Initially, all books are available. Constraints: - 1 ≤ number of books ≤ 100000 - 1 ≤ number of operations ≤ 100000 - 1 ≤ book ID < 100000 Input: The first line contains an integer n (the number of operations). Each of the next n lines contains an operation of one of the following forms: - \\"borrow x\\", indicating that the book with ID x is being borrowed. - \\"return x\\", indicating that the book with ID x is being returned. - \\"check x\\", indicating a request to check if the book with ID x is currently borrowed. Output: For each \\"check\\" operation, print \\"Borrowed\\" if the book is currently borrowed, and \\"Available\\" otherwise. Example: Input: 8 borrow 123 check 123 return 123 check 123 borrow 456 check 456 borrow 123 check 123 Output: Borrowed Available Borrowed Borrowed","solution":"class Library: def __init__(self): self.borrowed_books = set() def borrow(self, x): self.borrowed_books.add(x) def return_book(self, x): self.borrowed_books.discard(x) def check(self, x): return \\"Borrowed\\" if x in self.borrowed_books else \\"Available\\" def library_manager(operations): library = Library() output = [] for operation in operations: command, x = operation.split() x = int(x) if command == \\"borrow\\": library.borrow(x) elif command == \\"return\\": library.return_book(x) elif command == \\"check\\": result = library.check(x) output.append(result) return output"},{"question":"In a forest, there is a group of monkeys. Each monkey is trained to perform a specific trick, and some tricks take a longer time to learn than others. The forest authorities want to organize the monkeys such that no monkey learns a new trick until all monkeys learning quicker tricks have already learned their new tricks. You are given information on how long it takes for each monkey to learn their trick and a set of dependencies that each monkey has on other monkeys (a dependency means that a monkey has to wait until another monkey has learned their trick before starting to learn their own trick). Given this scenario, your task is to determine the order in which the monkeys should learn their tricks so that all the given constraints are satisfied. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of monkeys. The second line contains n integers t_1, t_2, ..., t_n (0 ≤ t_i ≤ 10^9) — where t_i represents the time it takes for the i-th monkey to learn their trick. The third line contains an integer m (0 ≤ m ≤ n*(n-1)/2) — the number of dependencies. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating that monkey u needs to finish learning before monkey v can start learning. -----Output----- Print a permutation of integers 1 through n — the order in which monkeys should learn their tricks to satisfy all given constraints. If there are multiple valid orders, you may print any of them. It is guaranteed that there is at least one valid order. -----Examples----- Input 4 1 2 3 4 2 1 2 3 4 Output 1 3 2 4 Input 5 10 20 30 40 50 4 1 2 2 3 3 4 4 5 Output 1 2 3 4 5","solution":"from collections import deque def order_monkeys(n, t, dependencies): # Create a graph and in-degree tracker for topological sorting graph = {i: [] for i in range(1, n+1)} in_degree = {i: 0 for i in range(1, n+1)} # Build the graph and the in-degree list for u, v in dependencies: graph[u].append(v) in_degree[v] += 1 # Perform topological sorting using Kahn\'s algorithm queue = deque([i for i in range(1, n+1) if in_degree[i] == 0]) result = [] while queue: node = queue.popleft() result.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return result # Example usage: # n = 4 # t = [1, 2, 3, 4] # dependencies = [(1, 2), (3, 4)] # print(order_monkeys(n, t, dependencies)) # Output: [1, 3, 2, 4]"},{"question":"You are given an array of integers. Determine if the array can be rearranged to form a consecutive sequence, where each number appears exactly once. ------ Input ------ The first line of the input contains a single integer T — the number of test cases. The first line of each test case contains a single integer N, the number of elements in the array. The second line of each test case contains N space-separated integers denoting the elements of the array. ------ Output ------ For each test case, print \\"YES\\" if the array can be reordered to form a consecutive sequence, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1,000 1 ≤ a_i ≤ 100,000 ------ Subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input 1 ------ 3 5 4 2 1 3 5 4 1 2 4 5 3 8 7 9 ----- Sample Output 1 ------ YES NO YES ----- explanation 1 ------ In the first test case, the array [4, 2, 1, 3, 5] can be reordered as [1, 2, 3, 4, 5], which is a consecutive sequence. In the second test case, the array [1, 2, 4, 5] is missing 3 so it can\'t be reordered to form a consecutive sequence. In the third test case, the array [8, 7, 9] can be reordered as [7, 8, 9], which is a consecutive sequence.","solution":"def can_form_consecutive_sequence(t, test_cases): Determines if each array in the test cases can be rearranged to form a consecutive sequence. :param t: Number of test cases :param test_cases: A list of tuples where each tuple contains the number of elements and the array of integers for that test case. :return: List of strings \\"YES\\" or \\"NO\\" for each test case. results = [] for i in range(t): n, array = test_cases[i] sorted_array = sorted(array) is_consecutive = True for j in range(1, n): if sorted_array[j] != sorted_array[j-1] + 1: is_consecutive = False break results.append(\\"YES\\" if is_consecutive else \\"NO\\") return results"},{"question":"You are given a string that contains letters and digits. The task is to reorder the string such that all letters come first, followed by all the digits. The relative ordering of the letters and digits should be preserved. -----Input----- The first line contains a single string s (1 ≤ |s| ≤ 1000), which contains letters (both uppercase and lowercase) and digits. -----Output----- Output the reordered string such that all letters appear before all digits, with the original relative order preserved. -----Examples----- Input a1b2c3 Output abc123 Input B4A3C2 Output BAC432 Input 123abc Output abc123 Input abcd Output abcd Input 1234 Output 1234","solution":"def reorder_string(s): Reorders the given string such that all letters come first, followed by all the digits. The relative ordering of letters and digits is preserved. letters = [] digits = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(letters) + \'\'.join(digits)"},{"question":"Given an array of integers nums, perform the following transformation: - Replace each element in the array with the product of all other elements in the array. - Do not use the division operation. Example 1: Input: nums = [1, 2, 3, 4] Output: [24, 12, 8, 6] Explanation: For nums[0], the product of the other elements is 2 * 3 * 4 = 24. For nums[1], the product of the other elements is 1 * 3 * 4 = 12. For nums[2], the product of the other elements is 1 * 2 * 4 = 8. For nums[3], the product of the other elements is 1 * 2 * 3 = 6. Your Task: You don\'t need to read input or print anything. Complete the function transformArray() which takes the array nums as an input parameter and returns the transformed array. Expected Time Complexity: O(N), where N is the length of nums. Expected Auxiliary Space: O(N) for output array. Constraints: 1 <= nums.length <= 10^4 -10^2 <= nums[i] <= 10^2 nums contains no zeros.","solution":"def transformArray(nums): Transforms the array such that each element is replaced with the product of all other elements. length = len(nums) left_products = [1] * length right_products = [1] * length result = [1] * length for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"Create a function that takes a list of integers and returns the longest contiguous subarray whose elements are all equal. Example 1: Input: arr = [1, 2, 2, 2, 1, 1, 1, 3, 3, 3, 3] Output: [3, 3, 3, 3] Explanation: The longest contiguous subarray with all elements equal is [3, 3, 3, 3]. Example 2: Input: arr = [5, 5, 5, 1, 5, 5] Output: [5, 5, 5] Explanation: The longest contiguous subarray with all elements equal is [5, 5, 5]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestContiguousSubarray() which takes a list of integers arr and returns the longest contiguous subarray with all elements equal. If there are multiple subarrays with the same maximum length, return the first one. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= len(arr) <= 10^4 1 <= arr[i] <= 10^6","solution":"def longest_contiguous_subarray(arr): if not arr: return [] max_len = 1 current_len = 1 element = arr[0] start_index = 0 for i in range(1, len(arr)): if arr[i] == arr[i-1]: current_len += 1 else: if current_len > max_len: max_len = current_len element = arr[i-1] start_index = i - current_len current_len = 1 if current_len > max_len: max_len = current_len element = arr[-1] start_index = len(arr) - current_len return arr[start_index:start_index + max_len]"},{"question":"Maria loves to collect unique items. She has an initial collection of items represented as an array of integers. Each integer in the array represents a different item type. Maria wants to add a minimal number of new items to her collection so that she has exactly k unique items in total. Write a program to help Maria determine the minimum number of new items she needs to add to her collection. Input The first line contains two integers n and k (1 ≤ n, k ≤ 1000). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000). Output A single integer — the minimum number of new items Maria needs to add to her collection to have exactly k unique items. Examples Input 5 3 1 2 2 3 1 Output 0 Input 4 6 1 2 3 4 Output 2 Input 3 2 5 5 5 Output 1 Note In the first example, Maria already has 3 unique items (1, 2, and 3) in her collection, so she does not need to add any new items. In the second example, Maria has 4 unique items (1, 2, 3, and 4) and needs to add 2 additional unique items to reach a total of 6 unique items. In the third example, Maria only has 1 unique item (5) and needs to add 1 more unique item to have at least 2 unique items in total.","solution":"def minimal_new_items(n, k, items): Returns the minimum number of new items Maria needs to add to her collection to have exactly k unique items. Parameters: n (int): The number of items currently in Maria\'s collection. k (int): The desired number of unique items in Maria\'s collection. items (list of int): The items currently in Maria\'s collection. Returns: int: The minimum number of new items required. unique_items = set(items) # Get the set of unique items current_unique_count = len(unique_items) if current_unique_count >= k: return 0 else: return k - current_unique_count"},{"question":"A taxi company wants to improve the allocation of drivers to customers based on the locations of both. They divide the city into a grid of blocks, where each block is identified using an (x, y) coordinate. Customers and drivers provide their locations as coordinates. The company wants to assign the closest driver to each customer using Euclidean distance. Write a function that, given a list of customers and a list of drivers, finds the closest driver for each customer. If multiple drivers are equally close to a customer, return the one that appears first in the list. You need to implement the function `allocate_drivers(customers, drivers)` that takes two lists of tuples. Each tuple contains two integers representing the coordinates of a customer or driver. # INPUT - An integer N representing the number of customers. - An integer M representing the number of drivers. - A list of N tuples, each containing two integers, representing the coordinates of the customers. - A list of M tuples, each containing two integers, representing the coordinates of the drivers. # OUTPUT Return a list of N integers where each integer represents the index of the closest driver to the corresponding customer. The index should be zero-based and correspond to the position of the driver in the input drivers list. # CONSTRAINTS - 1 ≤ N, M ≤ 1000 - Coordinates of customers and drivers are integers in the range [-10000, 10000] # EXAMPLE Input: ``` 3 3 [(0, 0), (2, 3), (4, 5)] [(1, 1), (3, 2), (5, 5)] ``` Output: ``` [0, 1, 2] ``` # Note For the provided example, the coordinates of customers are [(0, 0), (2, 3), (4, 5)], and the coordinates of drivers are [(1, 1), (3, 2), (5, 5)]. The closest driver to (0, 0) is (1, 1) with index 0, the closest driver to (2, 3) is (3, 2) with index 1, and the closest driver to (4, 5) is (5, 5) with index 2. Hence the output list should be [0, 1, 2].","solution":"def euclidean_distance(c1, c2): Calculate the Euclidean distance between two points c1 and c2. c1, c2 are given as (x, y) tuples. return ((c1[0] - c2[0]) ** 2 + (c1[1] - c2[1]) ** 2) ** 0.5 def allocate_drivers(customers, drivers): Finds the closest driver to each customer using Euclidean distance. Returns a list of indices representing the closest driver to each customer. closest_driver_indices = [] for cust in customers: min_distance = float(\'inf\') min_index = -1 for i, driv in enumerate(drivers): dist = euclidean_distance(cust, driv) if dist < min_distance: min_distance = dist min_index = i closest_driver_indices.append(min_index) return closest_driver_indices"},{"question":"Description You are given a list of integers. Your task is to find the highest product that can be achieved by multiplying exactly three distinct integers from the list. For example, given the list [-10, -10, 5, 2], the highest product possible by multiplying any three distinct numbers in the list is 500. This is achieved by multiplying -10 * -10 * 5 = 500. Input Format - The first line of input contains an integer N, the number of integers in the list. - The second line contains N space-separated integers. Output Format One line containing the highest possible product by multiplying exactly three distinct integers from the list. Input Limits - 3 ≤ N ≤ 1000 - -10^3 ≤ Any integer in the list ≤ 10^3 SAMPLE INPUT 4 -10 -10 5 2 SAMPLE OUTPUT 500 Explanation By evaluating all combinations of three distinct numbers from the list [-10, -10, 5, 2], we find that the combination { -10, -10, 5 } gives the highest product 500. This is because -10 * -10 * 5 results in 500, which is higher than any other combination.","solution":"def highest_product_of_three(nums): Returns the highest product that can be achieved by multiplying exactly three distinct integers from the list. nums.sort() # The highest product of three numbers could either come from # - the product of the three largest numbers # - the product of the two smallest (most negative) numbers and the largest number product1 = nums[-1] * nums[-2] * nums[-3] product2 = nums[0] * nums[1] * nums[-1] return max(product1, product2)"},{"question":"Input You are given a linked list. The linked list can be either empty or cyclic. Your task is to detect if the linked list is cyclic or not. Output Print \\"Cycle Detected\\" if there is a cycle in the linked list, otherwise print \\"No Cycle\\". Examples Input A linked list with nodes: 3 -> 7 -> 8 -> 10 -> 7 (cycle to 7) Output Cycle Detected Input A linked list with nodes: 1 -> 2 -> 3 -> 4 -> 5 (linear) Output No Cycle Input A linked list with nodes: 5 -> 10 -> 20 -> 5 (cycle to 5) Output Cycle Detected","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detect_cycle(head): Detects if a linked list has a cycle. slow, fast = head, head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return \\"Cycle Detected\\" return \\"No Cycle\\""},{"question":"You are given a matrix of integers and a specific value target. Your task is to determine if there is a path from the top-left corner of the matrix to the bottom-right corner that adds up to the given target value. You can move only right or down at any point in time. Return True if such a path exists, otherwise return False. -----Input----- - The first line contains two integers m and n (1 ≤ m, n ≤ 10), representing the dimensions of the matrix. - The next m lines each contain n integers (1 ≤ matrix[i][j] ≤ 100), representing the values in the matrix. - The last line contains a single integer target (1 ≤ target ≤ 1000), the target sum for the path from the top-left to the bottom-right corner. -----Output----- - Output a single line with the word \\"True\\" if there is a path whose sum equals target, and \\"False\\" otherwise. -----Examples----- Input 3 3 5 4 2 1 2 1 7 3 4 15 Output True Input 2 2 1 2 3 4 10 Output False -----Note----- In the first example, the path 5 -> 4 -> 2 -> 1 -> 3 has a sum of 15, which matches the target value. In the second example, no path from the top-left to the bottom-right corners has a sum of 10.","solution":"def has_path_with_sum(matrix, target, m, n): def check_path(x, y, current_sum): if x == m-1 and y == n-1: # If we\'ve reached the bottom-right corner return current_sum == target if current_sum > target: return False down = right = False if x+1 < m: # Can move down down = check_path(x+1, y, current_sum + matrix[x+1][y]) if y+1 < n: # Can move right right = check_path(x, y+1, current_sum + matrix[x][y+1]) return down or right return check_path(0, 0, matrix[0][0]) # Example usage: matrix = [ [5, 4, 2], [1, 2, 1], [7, 3, 4] ] target = 15 m, n = 3, 3 print(has_path_with_sum(matrix, target, m, n)) # Output should be True"},{"question":"**Summation of Large Decimals** Given two decimal numbers A and B, compute their sum, A + B. Input Two decimal numbers A and B separated by a space character are given in a line. Output Print the sum in a line. Constraints * -1 times 10^{100000} leq A, B leq 10^{100000} Sample Input 1 1234.56789 9876.54321 Sample Output 1 11111.1111 Sample Input 2 -12345.6789 12345.6789 Sample Output 2 0.0 Sample Input 3 0.1234 0.8766 Sample Output 3 1.0 Sample Input 4 -999.99999 -0.00001 Sample Output 4 -1000.0 Example Input 1234.56789 9876.54321 Output 11111.1111","solution":"def sum_large_decimals(a, b): Returns the sum of two large decimal numbers represented as strings. return str(float(a) + float(b)) # Example usage: # A = \\"1234.56789\\" # B = \\"9876.54321\\" # result = sum_large_decimals(A, B) # print(result) # Output should be \\"11111.1111\\""},{"question":"Our explorer Lena is on a quest to find ancient artifacts in a mystical forest. To move from one region to another within the forest, Lena must pass through a series of gates, each guarded by a magical guardian. Each guardian asks Lena to solve a mathematical problem involving a sequence of numbers. The problem posed by the guardians is as follows: Given an array of integers, Lena must identify the length of the longest subsequence such that the difference between consecutive elements is equal to a given integer \'d\'. Help Lena by writing a function that can solve this problem for her. Input Format: The first line contains an integer T, the number of test cases. For each test case: - The first line contains two integers n and d, where n is the number of elements in the array and d is the difference the subsequence should have. - The second line contains n space-separated integers, denoting the elements of the array. Output Format: For each test case, output a single line containing the length of the longest subsequence where the difference between consecutive elements is equal to \'d\'. Constraints: 1 ≤ T ≤ 10 1 ≤ n ≤ 10^5 -10^4 ≤ array elements ≤ 10^4 -10^4 ≤ d ≤ 10^4 SAMPLE INPUT 2 6 2 1 3 5 8 6 4 5 -1 4 3 2 1 0 SAMPLE OUTPUT 3 5 Explanation In the first test case, one possible subsequence of length 3 with difference 2 is [1, 3, 5]. Another valid subsequence is [3, 5, 4]. In the second test case, one possible subsequence of length 5 with difference -1 is [4, 3, 2, 1, 0].","solution":"def longest_subsequence(n, d, arr): Returns the length of the longest subsequence where the difference between consecutive elements is equal to d. length = {} max_length = 1 for num in arr: if num - d in length: length[num] = length[num - d] + 1 else: length[num] = 1 max_length = max(max_length, length[num]) return max_length def solve(T, test_cases): results = [] for i in range(T): n, d = test_cases[i][\'n\'], test_cases[i][\'d\'] arr = test_cases[i][\'arr\'] results.append(longest_subsequence(n, d, arr)) return results"},{"question":"Maria has a garden with n trees arranged in a single row, and she wants to water each tree exactly once. She can water a tree by starting at the root of any tree and walking to the adjacent one to its left or right, watering each tree she passes. Maria\'s goal is to minimize the total distance she needs to walk if she waters all the trees. -----Input----- The first line contains an integer n (1 ≤ n ≤ 20000). The second line contains n non-negative integers; the i-th integer represents the initial amount of water needed for the i-th tree, which can be zero or positive. -----Output----- Print the minimum total distance Maria needs to walk in order to water all the trees. -----Examples----- Input 5 1 0 0 0 1 Output 6 Input 4 1 0 1 0 Output 4","solution":"def min_watering_distance(n, water_needs): indices = [i for i, water in enumerate(water_needs) if water > 0] total_distance = 0 for i in range(1, len(indices)): total_distance += indices[i] - indices[i - 1] return total_distance # Example usage # n = 5 # water_needs = [1, 0, 0, 0, 1] # print(min_watering_distance(n, water_needs)) # Output: 4"},{"question":"Write a function that determines the state of a car with respect to its fuel level. Given the current fuel level and the distance to the next gas station, the function should output whether the car can reach the gas station, if it needs a fuel refill before starting, or if it cannot reach the gas station even with a refill. The car consumes fuel at a constant rate of 1 unit per mile. If the car\'s current fuel level is enough to reach the gas station, it outputs \\"Can reach\\". If the fuel level is zero or negative at any point, the function outputs \\"Needs refill\\". If the distance to the next gas station is more than double the capacity of the car’s fuel tank, it outputs \\"Cannot reach\\". Input The input is given in the following format: fuel distance fuel_capacity The input consists of one line with three integers. fuel (-100 ≤ fuel ≤ 1000) represents the current fuel level. distance (1 ≤ distance ≤ 2000) represents the distance to the next gas station. fuel_capacity (1 ≤ fuel_capacity ≤ 1000) represents the maximum capacity of the car\'s fuel tank. Output The function returns a string indicating whether the car can reach the gas station comfortably, needs a refill before starting, or cannot reach the gas station even with a refill. Examples Input 10 15 20 Output Can reach Input 0 10 10 Output Needs refill Input 5 100 40 Output Cannot reach","solution":"def car_fuel_status(fuel, distance, fuel_capacity): Determines the fuel status of a car given the current fuel level, distance to the next gas station, and the car\'s fuel capacity. Parameters: - fuel (int): The current fuel level in the car. - distance (int): The distance to the next gas station. - fuel_capacity (int): The maximum capacity of the car\'s fuel tank. Returns: - str: \\"Can reach\\", \\"Needs refill\\", or \\"Cannot reach\\" based on the conditions described. if distance > 2 * fuel_capacity: return \\"Cannot reach\\" if fuel <= 0 or fuel < distance: return \\"Needs refill\\" return \\"Can reach\\""},{"question":"Alex has recently started learning about binary trees. He learned that a binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child. Additionally, a binary search tree (BST) is a binary tree in which for each node, the value of all the nodes in the left subtree is less than the value of the node, and the value of all the nodes in the right subtree is greater than the value of the node. Alex wants to learn more about manipulating BSTs. He is particularly interested in the concept of finding the next larger element (successor) in the BST. The successor of a node in a BST is the node with the smallest key greater than the key of the given node. Given the root of a binary search tree and a node in it, your task is to help Alex find the successor of the given node in the BST. If the node has no successor, return null. -----Input----- - The input consists of multiple lines. - The first line contains an integer n (1 le n le 1000) — the number of nodes in the BST. - The next n lines each contain an integer representing the value of a node in the BST. - The last line contains an integer representing the value of the node whose successor needs to be found. -----Output----- - Output a single integer representing the value of the successor node. - If there is no successor, output \\"null\\". -----Examples----- Input 7 20 8 22 4 12 10 14 8 Output 10 Input 5 15 10 20 8 12 15 Output 20 Input 3 3 2 1 3 Output null -----Note----- In the first example, the successor of the node with value 8 is 10. In the second example, the successor of the node with value 15 is 20. In the third example, the node with value 3 has no successor, as it is the largest value in the tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right class BST: def __init__(self): self.root = None def insert(self, value): if not self.root: self.root = TreeNode(value) else: self._insert(self.root, value) def _insert(self, node, value): if value < node.value: if node.left: self._insert(node.left, value) else: node.left = TreeNode(value) else: if node.right: self._insert(node.right, value) else: node.right = TreeNode(value) def find(self, value): return self._find(self.root, value) def _find(self, node, value): if not node or node.value == value: return node if value < node.value: return self._find(node.left, value) return self._find(node.right, value) def find_successor(self, value): node = self.find(value) if not node: return \\"null\\" if node.right: return self._minValueNode(node.right).value successor = None ancestor = self.root while ancestor != node: if node.value < ancestor.value: successor = ancestor ancestor = ancestor.left else: ancestor = ancestor.right return successor.value if successor else \\"null\\" def _minValueNode(self, node): current = node while current.left is not None: current = current.left return current def find_successor_in_bst(n, values, target): bst = BST() for value in values: bst.insert(value) return bst.find_successor(target) # Example usage: # n = 7 # values = [20, 8, 22, 4, 12, 10, 14] # target = 8 # print(find_successor_in_bst(n, values, target)) # Output: 10"},{"question":"A research team is working on a new AI model, and part of the process involves analyzing temporal data. The data consists of events that occur at specific timestamps. You are tasked with creating a program to compute the time duration between pairs of events and then finding the average duration. Constraints: - There are at least 2 and at most 1000 events. - Each event is represented by a string in the format \\"HH:MM:SS\\", denoting the hours, minutes, and seconds at which the event occurred. - The timestamps are listed in chronological order. Input: The first line contains an integer N, the number of events. Then N lines follow, each containing an event timestamp in the format \\"HH:MM:SS\\". Output: Print the average duration between consecutive events in the format \\"HH:MM:SS\\". If the average duration includes fractions of a second, round down to the nearest second. Example Input: 5 12:34:56 12:35:56 12:36:00 13:00:00 13:01:00 Example Output: 00:06:31 Note: In the example provided, the durations between consecutive events are as follows: - 12:34:56 to 12:35:56 -> 00:01:00 - 12:35:56 to 12:36:00 -> 00:00:04 - 12:36:00 to 13:00:00 -> 00:24:00 - 13:00:00 to 13:01:00 -> 00:01:00 The average duration is (60 + 4 + 1440 + 60) / 4 = 391 seconds, which is equivalent to 00:06:31.","solution":"from datetime import datetime, timedelta def compute_average_duration(events): Computes the average duration between consecutive events and returns it as a string in \\"HH:MM:SS\\" format. Parameters: events (list of str): List of event timestamps in \\"HH:MM:SS\\" format. Returns: str: Average duration between consecutive events in \\"HH:MM:SS\\" format. total_seconds = 0 time_format = \\"%H:%M:%S\\" for i in range(1, len(events)): t1 = datetime.strptime(events[i-1], time_format) t2 = datetime.strptime(events[i], time_format) duration = (t2 - t1).total_seconds() total_seconds += duration average_seconds = total_seconds // (len(events) - 1) average_duration = str(timedelta(seconds=average_seconds)) # Ensure the average duration is in HH:MM:SS format hours, minutes, seconds = map(int, average_duration.split(\':\')) return f\\"{hours:02}:{minutes:02}:{seconds:02}\\""},{"question":"Suppose you are given a string S consisting of lowercase English letters. You can perform the following operation on S any number of times (including zero): - Choose any two different characters in the string, and swap all their occurrences in S. Determine the minimum possible number of distinct characters in S after performing the operation any number of times. -----Constraints----- - 1 leq |S| leq 200000 - S consists of lowercase English letters. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the minimum possible number of distinct characters in the final string. -----Sample Input----- aabcc -----Sample Output----- 2 In the final example, we can swap \'a\' and \'c\' to obtain the string \\"ccaab\\". This string has 2 distinct characters, which is the minimum possible number of distinct characters achievable.","solution":"def min_distinct_characters(S): Returns the minimum possible number of distinct characters in S. char_set = set(S) return min(len(char_set), 2) # Example usage # S = \\"aabcc\\" # print(min_distinct_characters(S)) # Output: 2"},{"question":"An array of integers represents stock prices recorded at regular intervals throughout the day. You need to write a function to determine the maximum possible profit from buying and selling a single share of stock within that day. You must buy the stock before you can sell it. The input array represents the prices of the stock at distinct times in chronological order. Implement a function that finds the maximum profit. If no profit can be achieved, return 0. **Example:** ```plaintext Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy at price 1 and sell at price 6, profit = 6 - 1 = 5. ``` ```plaintext Input: [7, 6, 4, 3, 1] Output: 0 Explanation: No transactions are done and the max profit = 0. ```","solution":"def max_profit(prices): Returns the maximum profit from a single buy and sell of stock. If no profit can be achieved, returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Given a list of unique integers, write a function to generate all possible subsets of the list. The subsets should not contain any duplicate subsets, and they should be returned in ascending order based on their length. If two subsets have the same length, they should be sorted in ascending order based on their integer values. Input A single list of unique integers. Output A list of lists, where each list is a subset of the input list. The subsets should be ordered first by length, and then lexicographically for subsets of the same length. Function Signature def generate_subsets(nums: List[int]) -> List[List[int]]: Examples Input: [1, 2, 3] Output: [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]] Input: [4, 1, 0] Output: [[], [0], [1], [4], [0, 1], [0, 4], [1, 4], [0, 1, 4]] Note Subsets are generated such that the order of elements within each subset does not matter. The input list could have any unique integers, and the function should handle different lengths of the input list appropriately.","solution":"from typing import List def generate_subsets(nums: List[int]) -> List[List[int]]: def backtrack(start, path): res.append(path[:]) for i in range(start, len(nums)): path.append(nums[i]) backtrack(i + 1, path) path.pop() nums.sort() res = [] backtrack(0, []) res.sort(key=lambda x: (len(x), x)) return res"},{"question":"You are given a grid of size N x M where each cell contains a digit from 1 to 9. You can perform the following operation multiple times: Choose any non-negative integer k, and all the digits in the grid that are greater than or equal to k will decrease by 1. Determine the minimum number of operations needed to make all the digits in the grid equal to 0. INPUT: First line of input consists of two integers N and M representing the number of rows and columns of the grid respectively. The next N lines each contain M digits representing the initial state of the grid. OUTPUT: Print a single integer representing the minimum number of operations required. CONSTRAINTS: 1 ≤ N, M ≤ 100 1 ≤ digits in grid ≤ 9 SAMPLE INPUT 3 3 123 456 789 SAMPLE OUTPUT 9 Explanation To make all the digits in the grid equal to 0, you need to perform the following operations: 1. Decrease all digits ≥ 9 by 1, total operations so far: 1 2. Decrease all digits ≥ 8 by 1, total operations so far: 2 3. Decrease all digits ≥ 7 by 1, total operations so far: 3 4. Decrease all digits ≥ 6 by 1, total operations so far: 4 5. Decrease all digits ≥ 5 by 1, total operations so far: 5 6. Decrease all digits ≥ 4 by 1, total operations so far: 6 7. Decrease all digits ≥ 3 by 1, total operations so far: 7 8. Decrease all digits ≥ 2 by 1, total operations so far: 8 9. Decrease all digits ≥ 1 by 1, total operations so far: 9 Thus, the total number of operations required is 9.","solution":"def min_operations_to_zero(grid): Returns the minimum number of operations needed to make all the digits in the grid equal to 0. max_digit = 0 for row in grid: for digit in row: max_digit = max(max_digit, int(digit)) return max_digit # Inputs for testing purpose if __name__ == \\"__main__\\": N, M = map(int, input().split()) grid = [input().strip() for _ in range(N)] print(min_operations_to_zero(grid))"},{"question":"Chess Knight\'s Minimum Moves In the game of chess, a knight moves in an “L” shape: two squares in one direction and then one square in a perpendicular direction, or one square in one direction and then two squares in a perpendicular direction. Given a `N x M` chessboard, determine the minimum number of moves the knight needs to reach from one given position to another. If it\'s impossible for the knight to reach the target position, return -1. Input The input consists of the following format: N M sx sy tx ty The first line contains two integers `N` and `M`, (1 ≤ N, M ≤ 100), representing the dimensions of the chessboard. The second line contains two integers `sx` and `sy`, (1 ≤ sx ≤ N, 1 ≤ sy ≤ M) representing the starting position of the knight. The third line contains two integers `tx` and `ty`, (1 ≤ tx ≤ N, 1 ≤ ty ≤ M) representing the target position of the knight. Output Output a single integer - the minimum number of moves the knight needs to reach the target position, or `-1` if it is impossible. Sample Input 5 5 1 1 5 5 8 8 1 1 8 8 1 1 1 1 1 1 3 3 1 1 2 2 Sample Output 4 6 0 -1 Explanation In the first example, the knight can travel from position (1, 1) to (5, 5) in a minimum of 4 moves. In the second example, the knight can travel from position (1, 1) to (8, 8) in a minimum of 6 moves. In the third example, the starting position is the same as the target position, so zero moves are required. In the fourth example, it\'s impossible for the knight to reach (2, 2) from (1, 1) as knights can\'t merely move to adjacent squares.","solution":"from collections import deque def min_knight_moves(N, M, sx, sy, tx, ty): Determines the minimum number of moves a knight needs to reach from (sx, sy) to (tx, ty) on an N x M chessboard. Returns -1 if it is impossible. # The possible moves for a knight in chess moves = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)] # Check if the starting and target positions are the same if (sx, sy) == (tx, ty): return 0 # Set up a queue for BFS and add the starting position queue = deque([(sx, sy, 0)]) # (current_x, current_y, distance) visited = set((sx, sy)) while queue: x, y, dist = queue.popleft() for move in moves: new_x, new_y = x + move[0], y + move[1] # Check if the new position is within bounds and not visited if 1 <= new_x <= N and 1 <= new_y <= M and (new_x, new_y) not in visited: # If the new position is the target position if (new_x, new_y) == (tx, ty): return dist + 1 # Mark the new position as visited and add it to the queue visited.add((new_x, new_y)) queue.append((new_x, new_y, dist + 1)) # If we exit the loop, then it was not possible to reach the target return -1"},{"question":"@@@**Monochrome Path – Array Transformation**@@@ You are given an array A of length N consisting of integers. The goal is to make the array monochrome, which means making all the elements of the array equal. You can perform the following operation any number of times: - Choose an index i (1 ≤ i ≤ N) and increase the value of A[i] by 1. Determine the minimum number of operations required to make the array monochrome. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the number of elements in the array. - The second line of each test case contains N space-separated integers A_{1}, A_{2}, dots, A_{N} denoting the elements of the array. ------ Output Format ------ For each test case, output in a single line the minimum number of operations required to make the array monochrome. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 1 ≤ A_{i} ≤ 10^{9} ------ Sample Input 1 ------ 2 3 1 2 3 5 4 5 6 7 8 ------ Sample Output 1 ------ 3 10 ------ Explanation 1 ------ - Test case 1: We can increase the 1^{st} element two times and the 2^{nd} element one time to make all elements equal to 3. Hence, the total number of operations is 2 + 1 = 3. - Test case 2: We can increase the 1^{st} element four times, the 2^{nd} element three times, the 3^{rd} element two times, and the 4^{th} element one time to make all elements equal to 8. Hence, the total number of operations is 4 + 3 + 2 + 1 = 10. This question assesses the ability to work with basic array operations and achieve a target by repeated incremental changes, a common type of problem in algorithm design.","solution":"def min_operations_to_monochrome(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] max_value = max(A) operations = sum(max_value - x for x in A) results.append(operations) return results # Example usage: # T = 2 # test_cases = [ # (3, [1, 2, 3]), # (5, [4, 5, 6, 7, 8]) # ] # print(min_operations_to_monochrome(T, test_cases)) # Output: [3, 10]"},{"question":"Problem description. Sarah loves to create palindromes. A palindrome is a string that reads the same forward and backward. Given a string, Sarah can replace any character in this string, but she can only do so at most `k` times. Her goal is to determine the length of the longest palindromic substring she can form after making at most `k` changes. Input The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer k representing the number of changes Sarah can make. - The second line contains a string S of lowercase letters. Output For each test case, output a single integer representing the length of the longest palindromic substring that can be formed after making at most k changes. Constraints 1 ≤ T ≤ 10 0 ≤ k ≤ 100 1 ≤ |S| ≤ 1000 Example Input: 3 2 abca 1 abcdef 0 racecar Output: 4 3 7 Explanation Example Case 1: Sarah can change either \'b\' to \'c\' or \'c\' to \'b\' to form the palindrome \\"acca\\" or \\"abca\\", respectively, both of length 4. Example Case 2: The longest substring that can be made into a palindrome with one change is either \\"aaa\\" or \\"ddd\\" from \\"abc\\" or \\"edf\\", respectively. Example Case 3: \\"racecar\\" is already a palindrome of length 7, so no changes are needed.","solution":"def longest_palindromic_substring_after_k_changes(k, S): def longest_palindrome(l, r, k, S): changes = 0 left_char_count = [0] * 26 right_char_count = [0] * 26 for i in range((r - l + 1) // 2): left_char_count[ord(S[l + i]) - ord(\'a\')] += 1 right_char_count[ord(S[r - i]) - ord(\'a\')] += 1 for i in range(26): changes += abs(left_char_count[i] - right_char_count[i]) return r - l + 1 if changes // 2 <= k else 0 n = len(S) max_len = 0 for l in range(n): for r in range(l, n): max_len = max(max_len, longest_palindrome(l, r, k, S)) return max_len def process_test_cases(T, test_cases): results = [] for k, S in test_cases: results.append(longest_palindromic_substring_after_k_changes(k, S)) return results"},{"question":"There are N red balls and M blue balls placed in a row. Each red ball weighs 1 kg. Each blue ball weighs 2 kg. Find the total weight of the balls in the row. ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - The first and only line of each test case contains two integers N, M. ------ Output Format ------ For each test case, output in a single line, the total weight of the balls in the row. ------ Constraints ------ 1 ≤ T ≤ 1000 0 ≤ N, M ≤ 100 ----- Sample Input 1 ------ 3 1 2 0 3 5 1 ----- Sample Output 1 ------ 5 6 7 ----- explanation 1 ------ Test Case 1: There are 1 red ball and 2 blue balls. Each red ball weighs 1 kg, so there are 1cdot 1 = 1 kg contributed by red balls. Similarly, each blue ball weighs 2 kg, so there are 2cdot 2 = 4 kg contributed by blue balls. Adding the weights of all balls, we get 1+4=5 kg in total. Test Case 2: There are 0 red balls and 3 blue balls. Each red ball weighs 1 kg, so there are 0cdot 1 = 0 kg contributed by red balls. Each blue ball weighs 2 kg, so there are 3cdot 2 = 6 kg contributed by blue balls. Adding the weights of all balls, we get 0+6=6 kg in total. Test Case 3: There are 5 red balls and 1 blue ball. Each red ball weighs 1 kg, so there are 5cdot 1 = 5 kg contributed by red balls. Each blue ball weighs 2 kg, so there are 1cdot 2 = 2 kg contributed by blue balls. Adding the weights of all balls, we get 5+2=7 kg in total.","solution":"def total_weight(test_cases): Calculate the total weight of balls in each test case. Parameters: test_cases (list of tuples): List of test cases where each tuple contains (N, M). Returns: list: List of total weights for each test case. results = [] for N, M in test_cases: total_weight = N * 1 + M * 2 results.append(total_weight) return results"},{"question":"You are organizing a programming competition, and you need to manage the participant scores efficiently. The competition consists of multiple rounds, and each participant can score points in each round. At the end of the competition, you want to compute the total scores of all participants and find out the top `k` participants with the highest scores. Write a program that processes the scores of participants and outputs the IDs of the top `k` participants in descending order of their total scores. If there are participants with the same scores, order them by their participant IDs in ascending order. Input - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 1000), where `n` is the number of participants and `k` is the number of top participants to find. - The following `n` lines each contain a string `id` and an integer `score` (1 ≤ |id| ≤ 10, 0 ≤ score ≤ 1000). The `id` is the unique identifier of a participant, and `score` is the participant\'s score in a round. A participant may appear more than once in these lines, with their scores from different rounds. Output - Output the IDs of the top `k` participants in descending order of their total scores. If two participants have the same total score, order them by their IDs in ascending order. Example Input 6 3 alice 50 bob 80 alice 20 charlie 30 bob 40 charlie 70 Output charlie bob alice Note In the example above, the total scores of the participants are: - alice: 50 + 20 = 70 - bob: 80 + 40 = 120 - charlie: 30 + 70 = 100 The top 3 participants in descending order of their total scores are: 1. charlie (100 points) 2. bob (120 points) 3. alice (70 points)","solution":"def find_top_k_participants(n, k, participant_scores): from collections import defaultdict scores = defaultdict(int) for pid, score in participant_scores: scores[pid] += score sorted_participants = sorted(scores.items(), key=lambda x: (-x[1], x[0])) top_k_participants = [pid for pid, score in sorted_participants[:k]] return top_k_participants"},{"question":"A courier company wants to optimize its package delivery routes. They have multiple delivery locations in a city, each assigned a unique ID from 1 to n. Each delivery location has certain connections (roads) to other locations, which are bidirectional, and all the roads have the same travel cost. Due to traffic congestion, the company wants to limit the number of direct connections (roads) used in any route between locations to ensure optimal deliveries. They need to find the longest simple path in the city’s road network without using any connection more than once. Help the company determine the longest simple path in the network. -----Input----- The first line contains two integers — n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 5000). The next m lines each contain two integers u and v (1 ≤ u, v ≤ n; u ≠ v), representing a bidirectional road connecting locations u and v. -----Output----- Print a single integer l — the length of the longest simple path in the road network. -----Examples----- Input 5 4 1 2 2 3 3 4 4 5 Output 4 Input 3 3 1 2 2 3 1 3 Output 2","solution":"from collections import defaultdict def longest_simple_path(n, m, edges): def dfs(node, length): nonlocal max_length max_length = max(max_length, length) visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: dfs(neighbor, length + 1) visited[node] = False # Create the adjacency list representation of the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) max_length = 0 for start in range(1, n + 1): visited = [False] * (n + 1) dfs(start, 0) return max_length"},{"question":"Given an integer N and an N x N matrix filled with zeroes and ones, determine the size of the largest \'1\'-square sub-matrix present in the matrix. A \'1\'-square sub-matrix is a square of \'1\'s in the matrix where all border cells and all internal cells are \'1\'. Write a function `largest1Square(matrix: List[List[int]]) -> int` that returns the size (side length) of the largest \'1\'-square sub-matrix. Example 1: Input: N = 5 matrix = [ [0, 1, 1, 0, 1], [1, 1, 1, 1, 0], [1, 1, 1, 1, 0], [1, 1, 1, 1, 0], [0, 1, 1, 0, 1] ] Output: 3 Explanation: The largest \'1\'-square sub-matrix has a side length of 3 and appears from index (1, 1) to (3, 3). Example 2: Input: N = 4 matrix = [ [0, 1, 0, 0], [1, 1, 1, 0], [1, 1, 1, 0], [0, 1, 0, 0] ] Output: 2 Explanation: The largest \'1\'-square sub-matrix has a side length of 2 and appears from index (1, 1) to (2, 2). Your Task: The task is to complete the function `largest1Square` which finds and returns the size of the largest \'1\'-square sub-matrix. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 <= N <= 100 matrix[i][j] is either 0 or 1.","solution":"def largest1Square(matrix): if not matrix or not matrix[0]: return 0 N = len(matrix) dp = [[0] * N for _ in range(N)] max_len = 0 for i in range(N): for j in range(N): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_len = max(max_len, dp[i][j]) return max_len"},{"question":"Problem statement Alice is organizing a music festival and wants to create a perfect playlist. She has N different songs, each with a title and a duration in minutes. Alice wants the total duration of her playlist to be at least M minutes but as close to M as possible without exceeding it. Additionally, Alice can apply K different operations where each operation allows her to merge two specific songs into one new song with a new duration. The goal is to determine the smallest possible duration of Alice\'s playlist that meets or exceeds M minutes. Input The input is given in the following format. N M title_1 duration_1 ... title_N duration_N K title_a title_b new_duration ... title_y title_z new_duration Constraints * All numbers are integers. * All song titles consist of at least 1 and no more than 10 lowercase letters. * If i ≠ j, then title_i ≠ title_j. * 1 ≤ duration_i ≤ 100. * 1 ≤ N ≤ 1000. * 1 ≤ M ≤ 100000. * 0 ≤ K ≤ min(N(N-1), 1000). * title_a, title_b are included in the list of song titles. Output Print the smallest possible duration of the playlist that is at least M minutes, or -1 if it\'s impossible to create such a playlist. Sample Sample input 1 4 15 rock 4 jazz 5 pop 6 classic 7 2 rock jazz 9 pop classic 12 Sample output 1 15 Explanation: Alice can combine \'pop\' and \'classic\' to create a new song of duration 12 minutes, then include a song of 3 minutes. Sample input 2 3 10 hiphop 3 rap 2 blues 1 1 hiphop rap 4 Sample output 2 -1 Explanation: It\'s impossible to create a playlist of at least 10 minutes.","solution":"def smallest_playlist_duration(N, M, songs, K, operations): from itertools import combinations def merge_songs(existing_songs, op_a, op_b, new_duration): new_songs = existing_songs.copy() if op_a in new_songs and op_b in new_songs: new_songs[op_a] = new_duration del new_songs[op_b] return new_songs song_dict = {title: duration for title, duration in songs} initial_durations = list(song_dict.values()) if sum(initial_durations) < M: return -1 viable_durations = [] for r in range(1, N + 1): for combination in combinations(initial_durations, r): if sum(combination) >= M: viable_durations.append(sum(combination)) for op_a, op_b, new_duration in operations: merged_dict = merge_songs(song_dict, op_a, op_b, new_duration) merged_durations = list(merged_dict.values()) for r in range(1, len(merged_durations) + 1): for combination in combinations(merged_durations, r): if sum(combination) >= M: viable_durations.append(sum(combination)) if viable_durations: return min(viable_durations) else: return -1 N, M = 3, 10 songs = [(\\"hiphop\\", 3), (\\"rap\\", 2), (\\"blues\\", 1)] K = 1 operations = [(\\"hiphop\\", \\"rap\\", 4)] print(smallest_playlist_duration(N, M, songs, K, operations)) # -1 N, M = 4, 15 songs = [(\\"rock\\", 4), (\\"jazz\\", 5), (\\"pop\\", 6), (\\"classic\\", 7)] K = 2 operations = [(\\"rock\\", \\"jazz\\", 9), (\\"pop\\", \\"classic\\", 12)] print(smallest_playlist_duration(N, M, songs, K, operations)) # 15"},{"question":"John is organizing a team-building activity where his team members must solve a puzzle. The puzzle involves a number of islands connected by bridges. Each island is represented by a node and each bridge by an edge in a graph. The objective is to determine the minimum number of new bridges that need to be built so that all islands are connected either directly or indirectly. The puzzle is based on an undirected graph where some nodes (islands) may not be connected initially. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 50, 0 ≤ m ≤ 1225) — the number of islands and the number of existing bridges, respectively. The next m lines contain two integers u and v (1 ≤ u, v ≤ n) — representing a bridge connecting islands u and v. -----Output----- Print a single number — the minimum number of new bridges that need to be built to ensure that all islands are connected. -----Examples----- Input 4 2 1 2 3 4 Output 1 Input 4 3 1 2 2 3 3 4 Output 0 Input 5 0 Output 4 -----Note----- In the first test case, the graph consists of two disconnected components: one containing islands {1, 2} and the other containing islands {3, 4}. One new bridge between an island from the first group and an island from the second group will connect all islands. In the second test case, the graph is already connected, thus zero new bridges are needed. In the third test case, there are no connections at all, so 4 new bridges are needed to connect all 5 islands.","solution":"def min_new_bridges(n, m, bridges): from collections import defaultdict, deque def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) graph = defaultdict(list) for u, v in bridges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = 0 for i in range(1, n + 1): if not visited[i]: bfs(i) components += 1 # To connect \'c\' components, we need at least \'c - 1\' bridges return components - 1"},{"question":"You are given two strings `S` and `T` of the same length. Your task is to transform string `S` into string `T` by following these rules: 1. You are only allowed to swap any two characters in string `S`. 2. You can swap characters as many times as necessary. Determine the minimum number of swaps required to convert string `S` into string `T`. -----Constraints----- - All characters in the input are lowercase English letters. - 1 leq |S|, |T| leq 100 -----Input----- Input is given from Standard Input in the following format: S T -----Output----- Print the minimum number of swaps required to convert string `S` into string `T`. -----Sample Input----- mango gonam -----Sample Output----- 3 Explanation: One possible sequence of swaps is: 1. Swap \'m\' (position 0) with \'g\' (position 2): \\"mango\\" -> \\"ganmo\\" 2. Swap \'a\' (position 1) with \'o\' (position 3): \\"ganmo\\" -> \\"gonom\\" 3. Swap \'n\' (position 2) with \'m\' (position 4): \\"gonom\\" -> \\"gonam\\" Therefore, a total of 3 swaps are required to convert \\"mango\\" to \\"gonam\\".","solution":"def transform(S, T): Returns the minimum number of swaps required to transform string S into string T. def min_swaps_to_sort(array): n = len(array) pos = list(enumerate(array)) pos.sort(key=lambda it: it[1]) visited = {k: False for k in range(n)} answer = 0 for i in range(n): if visited[i] or pos[i][0] == i: continue cycle_size = 0 x = i while not visited[x]: visited[x] = True x = pos[x][0] cycle_size += 1 if cycle_size > 0: answer += (cycle_size - 1) return answer if sorted(S) != sorted(T): return -1 return min_swaps_to_sort([S.index(char) for char in T])"},{"question":"You have been appointed as the chief of security for a top-secret agency. Every day, you receive encrypted messages that contain a series of numbers representing ASCII values of characters. Your task is to decode the message and return the decrypted text. Input: First line will contain an integer N (1 ≤ N ≤ 50), the number of test cases. Each of the next N lines will contain a space-separated string of integers. Each integer represents an ASCII value (32 ≤ integer ≤ 126). Output: Output the decrypted message for each input set. Example Input: 2 72 101 108 108 111 32 87 111 114 108 100 84 101 99 104 32 83 117 114 103 101 Output: Hello World Tech Surge","solution":"def decrypt_ascii_messages(n, messages): Decrypts a list of ASCII encoded messages. Parameters: n (int): The number of messages messages (list of str): List of strings where each string contains space-separated ASCII values Returns: list of str: List of decrypted messages decrypted_messages = [] for message in messages: ascii_values = message.split() decrypted_message = \'\'.join(chr(int(value)) for value in ascii_values) decrypted_messages.append(decrypted_message) return decrypted_messages"},{"question":"Given an undirected graph with V vertices and E edges, the task is to determine if the graph contains a cycle. If the graph contains a cycle, return True; otherwise, return False. Example 1: Input: V = 5, E = 5 edges = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 1)] Output: True Explanation: The graph contains a cycle: 1-2-3-4-1. Example 2: Input: V = 3, E = 2 edges = [(0, 1), (1, 2)] Output: False Explanation: There is no cycle in the graph. Your Task: You don\'t need to read input or print anything. Your task is to complete the function containsCycle() which takes the number of vertices V, the number of edges E, and a list of pairs (edges) representing the edges of the graph. The function should return True if the graph contains a cycle, otherwise, it should return False. Expected Time Complexity: O(V + E) Expected Auxiliary Space: O(V) Constraints: 1 ≤ V, E ≤ 10^5 0 ≤ u, v ≤ V-1 All pairs (u, v) are distinct.","solution":"def containsCycle(V, E, edges): Function to check if the undirected graph contains a cycle. :param V: Number of vertices :param E: Number of edges :param edges: List of edges where each edge is a tuple (u, v) :return: True if there is a cycle in the graph, False otherwise # Create an adjacency list for the graph adj_list = [[] for _ in range(V)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Helper function for DFS traversal def dfs(v, visited, parent): visited[v] = True for neighbour in adj_list[v]: if not visited[neighbour]: # If the neighbour has not been visited if dfs(neighbour, visited, v): return True elif parent != neighbour: # If the neighbour is visited and not parent of current vertex return True return False # Initialize visited array visited = [False] * V # Perform DFS from each vertex for i in range(V): if not visited[i]: if dfs(i, visited, -1): return True return False"},{"question":"# Problem Statement You are the chief architect for a bustling city, designing a unique transportation system based on dynamic lift operations. Your task is to write a program that simulates a series of lift commands and outputs the final position of the lift. The lift operates within a rectangular building with floors from `0` to `N-1` (inclusive), and it moves between floors based on a series of commands. Commands Supported: 1. **U X**: Move the lift up by `X` floors. If `X` is greater than the number of floors above, the lift stays on the top floor. 2. **D X**: Move the lift down by `X` floors. If `X` is greater than the number of floors below, the lift stays on the ground floor. 3. **S X**: Set the lift to the `X`-th floor directly. 4. **W**: Wait (no movement). Input - The first line contains a single integer `N` (1 ≤ N ≤ 100), the number of floors in the building. - The second line contains a single integer `M` (1 ≤ M ≤ 100), the number of commands. - The third line contains `M` commands. Each command is either `U X`, `D X`, `S X`, or `W`. Output - Output a single integer indicating the final position of the lift, starting from floor `0`. Example **Input** ``` 5 6 U 2 D 1 S 4 W D 3 U 1 ``` **Output** ``` 2 ``` **Explanation** 1. `U 2`: Move up by 2 floors → Lift is now on floor 2. 2. `D 1`: Move down by 1 floor → Lift is now on floor 1. 3. `S 4`: Set to floor 4 → Lift is now on floor 4. 4. `W`: Wait → Lift remains on floor 4. 5. `D 3`: Move down by 3 floors → Lift is now on floor 1. 6. `U 1`: Move up by 1 floor → Lift is now on floor 2. Thus, the final position of the lift is floor 2. Notes - Ensure the lift never moves above the top floor (N-1) or below the ground floor (0). - Commands should be executed in the given order. - The initial position of the lift is always on the ground floor (`0`). Write a function `simulate_lift_operations(N, M, commands)` to solve the problem: ```python def simulate_lift_operations(N, M, commands): # Your code here ``` This function should return the final position of the lift as an integer. You may assume the input is always valid based on the description above. Example usage ```python print(simulate_lift_operations(5, 6, [\\"U 2\\", \\"D 1\\", \\"S 4\\", \\"W\\", \\"D 3\\", \\"U 1\\"])) # Output should be 2 ```","solution":"def simulate_lift_operations(N, M, commands): Simulates a series of lift commands and returns the final position of the lift. Args: - N (int): Number of floors in the building. - M (int): Number of commands. - commands (list of str): List of commands to execute. Returns: - int: Final position of the lift. current_floor = 0 for command in commands: parts = command.split() action = parts[0] if action == \\"U\\": X = int(parts[1]) current_floor = min(current_floor + X, N - 1) elif action == \\"D\\": X = int(parts[1]) current_floor = max(current_floor - X, 0) elif action == \\"S\\": X = int(parts[1]) current_floor = min(max(X, 0), N - 1) elif action == \\"W\\": continue return current_floor"},{"question":"You are given an array of integers and a target integer. Your task is to return indices of the two numbers such that they add up to the target. Each input would have exactly one solution, and you cannot use the same element twice. Write a function that returns the indices as a tuple of the two numbers that add up to the target. ```Python For example: nums = [2, 7, 11, 15] target = 9 solve(nums, target) = (0, 1), because nums[0] + nums[1] = 2 + 7 = 9. nums = [3, 2, 4] target = 6 solve(nums, target) = (1, 2), because nums[1] + nums[2] = 2 + 4 = 6. nums = [3, 3] target = 6 solve(nums, target) = (0, 1), because nums[0] + nums[1] = 3 + 3 = 6. ``` You may assume that each input would have exactly one solution, and you cannot use the same element twice. All integers in the array and the target are in the range of -10^9 to 10^9. The length of the array is `2 <= length <= 10000`. More examples in test cases. Good luck!","solution":"def solve(nums, target): Returns the indices of the two numbers that add up to target. :param nums: List of integers. :param target: The target integer. :return: Tuple of two integer indices. num_dict = {} for i, num in enumerate(nums): complement = target - num if complement in num_dict: return (num_dict[complement], i) num_dict[num] = i"},{"question":"In a magical forest, there exists a mystical tree with n nodes. Each node is connected by an edge and the tree is rooted at node 1. Every node has an intrinsic value. The value of the whole tree is defined as the sum of the values of all nodes connected directly or indirectly to the root. Given the tree\'s structure and the intrinsic values of its nodes, you\'re tasked with calculating the value of the subtree rooted at each node. -----Input----- The first line contains an integer t (1 leq t leq 10^3) — the number of test cases. For each test case: - The first line contains an integer n (1 leq n leq 10^5) — the number of nodes in the tree. - The second line contains n integers v_1, v_2, ..., v_n (1 leq v_i leq 10^4) — the intrinsic value of each node. - The following n-1 lines each contain two integers u and v (1 leq u, v leq n) — indicating an edge between nodes u and v. -----Output----- For each test case, output n lines, each containing a single integer: the value of the subtree rooted at node i (for i from 1 to n). -----Examples----- **Input:** ``` 1 5 1 2 3 4 5 1 2 1 3 3 4 3 5 ``` **Output:** ``` 15 2 12 4 5 ``` **Explanation:** The tree structure for the example is as follows: ``` 1(1) / 2(2) 3(3) / 4(4) 5(5) ``` - Subtree rooted at node 1: 1 + 2 + 3 + 4 + 5 = 15 - Subtree rooted at node 2: 2 - Subtree rooted at node 3: 3 + 4 + 5 = 12 - Subtree rooted at node 4: 4 - Subtree rooted at node 5: 5 Using Depth-First Search (DFS), you can efficiently compute the value of each subtree.","solution":"def calculate_subtree_values(t, test_cases): def dfs(node, parent): # Initialize the total value as the value of the current node total_value[node] = values[node - 1] for neighbor in tree[node]: if neighbor != parent: dfs(neighbor, node) total_value[node] += total_value[neighbor] results = [] for idx in range(t): n = test_cases[idx][\'n\'] values = test_cases[idx][\'values\'] edges = test_cases[idx][\'edges\'] # Build the tree as an adjacency list tree = {i: [] for i in range(1, n + 1)} for u, v in edges: tree[u].append(v) tree[v].append(u) total_value = [0] * (n + 1) # Perform DFS from the root node, considered as node 1 dfs(1, -1) # Collect the results for this test case results.append(total_value[1:]) return results"},{"question":"# Definition A **perfect square** is an integer that is the square of some integer. In other words, it is the product of some integer with itself. For example: 25 is a perfect square because it is 5 * 5. 144 is a perfect square because it is 12 * 12. 7 is not a perfect square because there is no integer n such that n * n = 7. # Task Given a list of positive integers, identify and count the number of perfect squares in the list. # Notes Keep in mind that the number passed in the list are always positive, so there is no need to check for zero or negative numbers. # Input >> Output Examples ``` countPerfectSquares([1, 4, 6, 9, 16]) ==> return 4 ``` Explanation: The numbers 1, 4, 9 and 16 are perfect squares, so the return value is 4. ``` countPerfectSquares([2, 3, 5, 8, 10]) ==> return 0 ``` Explanation: None of the given numbers are perfect squares. ``` countPerfectSquares([25, 36, 49, 100]) ==> return 4 ``` Explanation: The numbers 25, 36, 49, and 100 are perfect squares, so the return value is 4. # Enjoy Learning !!","solution":"import math def countPerfectSquares(lst): Counts the number of perfect squares in the given list of integers. Parameters: lst (list): List of positive integers Returns: int: Count of perfect squares in the list count = 0 for num in lst: if math.isqrt(num) ** 2 == num: count += 1 return count"},{"question":"Alice is interested in finding interesting patterns in grids of numbers. She particularly likes subgrids that have the same sum for each of their rows. Given a grid, determine the size of the largest possible square subgrid which has each row summing to the same value. More formally, you are given a grid G of size m x n where each element is an integer. You need to find the side length of the largest square subgrid such that all the row sums within that subgrid are equal. If no such subgrid exists, print -1. -----Input----- The first line contains two integers m and n (1 ≤ m, n ≤ 500), representing the number of rows and columns in the grid, respectively. The following m lines each contain n integers, representing the grid G. Each integer in the grid is between -10^4 and 10^4. -----Output----- Print the side length of the largest square subgrid where every row in the subgrid has the same sum. If no such subgrid can be found, print -1. -----Examples----- Input 4 5 1 2 3 4 5 5 1 2 1 3 1 0 4 -1 7 3 2 1 5 1 Output 2 Input 3 3 1 2 3 4 5 6 7 8 9 Output 1","solution":"def largest_square_subgrid_with_equal_row_sums(m, n, grid): def row_sum_matches(grid, top, left, size): row_sum = sum(grid[top][left:left+size]) for r in range(top + 1, top + size): if sum(grid[r][left:left+size]) != row_sum: return False return True max_possible_size = min(m, n) for size in range(max_possible_size, 0, -1): for top in range(m - size + 1): for left in range(n - size + 1): if row_sum_matches(grid, top, left, size): return size return -1 # Example usage: # m, n = 4, 5 # grid = [ # [1, 2, 3, 4, 5], # [5, 1, 2, 1, 3], # [1, 0, 4, -1, 7], # [3, 2, 1, 5, 1] # ] # print(largest_square_subgrid_with_equal_row_sums(m, n, grid)) # Output: 2"},{"question":"Philip is playing a game where he has to collect as much gold as possible from a series of gold mines. There are N gold mines in a row, and each mine has a certain amount of gold in it. However, there\'s a catch: when Philip mines from a particular gold mine, he cannot mine from any of the adjacent mines immediately after due to the danger of collapse. Determine the maximum amount of gold Philip can collect, given this constraint. Example 1: Input: N = 4 Gold[] = {1, 2, 3, 1} Output: 4 Explanation: Philip can mine from the 1st and 3rd mines (1 + 3) for a total of 4 gold. Example 2: Input: N = 6 Gold[] = {2, 7, 9, 3, 1, 5} Output: 19 Explanation: Philip can mine from the 2nd, 4th, and 6th mines (7 + 3 + 5) for a total of 15 gold. Philip can also mine from the 1st, 3rd, and 5th mines (2 + 9 + 1) for a total of 12 gold. However, the optimal choice is to mine from the 2nd and 3rd mines (7 + 9) for a total of 16 gold. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxGold() which takes an integer N and an array Gold[] of N integers as input and returns the maximum amount of gold Philip can collect. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^5 0 <= Gold[i] <= 10^4","solution":"def maxGold(N, Gold): if N == 0: return 0 elif N == 1: return Gold[0] dp = [0] * N dp[0] = Gold[0] dp[1] = max(Gold[0], Gold[1]) for i in range(2, N): dp[i] = max(Gold[i] + dp[i-2], dp[i-1]) return dp[N-1]"},{"question":"In a forest, there are various types of trees, and each type produces a certain number of fruits every season. You are a botanist who wants to catalog information about these trees efficiently. You have been given a list where each tree is represented by a number that indicates the type of tree it is. You need to determine the most frequent number of fruits produced by any single type of tree in the list. You have to find the number of fruits produced by the type of tree that appears the most frequently in the forest. If multiple types of trees have the same highest frequency, consider the tree type with the smallest count of fruits. ---- Input ---- - The first line contains a single integer T which indicates the number of trees. - The second line contains T space-separated integers denoting the number of fruits each tree produces. ---- Output ---- - Output a single integer denoting the number of fruits produced by the most frequently occurring tree type. ---- Constraints ---- - 1 ≤ T ≤ 200000 - 1 ≤ number of fruits each tree produces ≤ 100000 ---- Example ---- Input: 7 3 1 2 1 2 3 3 Output: 3 Input: 5 5 5 5 5 5 Output: 5 Input: 4 1 1 2 2 Output: 1 --- Explanation --- In the first sample, the most frequent tree types produce fruits in quantities: 3 (3 times) and 1 (2 times), so the output is 3. In the second sample, there\'s only one type of tree which produces 5 fruits (5 times). In the third sample, types of trees producing fruits in quantities 1 and 2 appear twice each, but 1 is smaller than 2, so the output is 1.","solution":"def most_frequent_fruit_count(T, fruit_counts): Given the number of trees T and the fruit counts for each tree type, determine the number of fruits produced by the most frequently occurring tree type. If there is a tie in frequency, choose the tree type with the smallest fruit count. from collections import Counter count_frequency = Counter(fruit_counts) max_frequency = max(count_frequency.values()) candidates = [fruit_count for fruit_count, frequency in count_frequency.items() if frequency == max_frequency] return min(candidates)"},{"question":"Alice has a sequence of integers that she wants to partition into two non-empty subsequences such that the absolute difference of their sums is minimized. Your task is to write a program to help Alice find the minimum possible difference of sums between these two subsequences. -----Input----- The first line contains an integer T (1 le T le 100) denoting the number of test cases. For each test case: - The first line contains a single integer n (1 le n le 20), the length of the sequence. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) representing the sequence. -----Output----- For each test case, print a single integer — the minimal possible absolute difference of sums between two non-empty subsequences. -----Example----- Input 3 4 1 6 11 5 3 10 20 15 5 3 1 4 2 2 Output 1 5 0 -----Note----- In the first test case, Alice can partition the sequence into {1, 6, 5} and {11} to achieve an absolute difference of 1. In the second test case, Alice can partition the sequence into {10, 15} and {20} to achieve an absolute difference of 5. In the third test case, Alice can partition the sequence into {3, 1, 2} and {4, 2} to achieve an absolute difference of 0.","solution":"def min_subset_diff(arr): Helper function to compute the minimum possible difference of sums between two non-empty subsequences of the given list of integers. n = len(arr) total_sum = sum(arr) # Initialize a dp array dp = [False] * (total_sum + 1) dp[0] = True # Populate the dp array for num in arr: for j in range(total_sum, num - 1, -1): dp[j] = dp[j] or dp[j - num] # Find the minimum difference min_diff = float(\'inf\') for s in range(total_sum // 2 + 1): if dp[s]: min_diff = min(min_diff, abs(total_sum - 2 * s)) return min_diff def process_input(T, test_cases): Function to process the input, solve the problem for each test case and return the results. results = [] for i in range(T): n, arr = test_cases[i] results.append(min_subset_diff(arr)) return results def main(input_data): Parses the input data, calls the appropriate functions to solve the problem, and returns the formatted output. lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] line_index = 1 for _ in range(T): n = int(lines[line_index]) arr = list(map(int, lines[line_index + 1].split())) test_cases.append((n, arr)) line_index += 2 results = process_input(T, test_cases) return \\"n\\".join(map(str, results))"},{"question":"A city grid consists of N vertical and M horizontal streets that form a grid of intersections. You live in the grid at intersection (0, 0) and your friend\'s house is located at intersection (N, M). You can only move right or up at each intersection. There are K construction zones in this grid where each zone is represented by a blocked intersection (xi, yi). You cannot pass through these intersections. Your task is to find the number of unique paths from your house to your friend\'s house, avoiding all construction zones. INPUT The first line contains three integers N, M, and K, representing the size of the grid and the number of construction zones respectively. The next K lines each contain two integers, xi and yi, which are the coordinates of a blocked intersection. OUTPUT Output a single integer, which is the number of unique paths from (0, 0) to (N, M) avoiding all construction zones. CONSTRAINTS 0 ≤ N, M ≤ 100 0 ≤ K ≤ N * M 0 ≤ xi ≤ N 0 ≤ yi ≤ M SAMPLE INPUT 3 3 2 1 2 2 1 SAMPLE OUTPUT 2 Explanation From (0, 0) to (3, 3), the two valid paths are: 1. (0, 0) -> (0, 1) -> (0, 2) -> (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) 2. (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) Blocked intersections (1, 2) and (2, 1) are avoided in both paths.","solution":"def unique_paths(N, M, K, blocked): grid = [[0] * (M + 1) for _ in range(N + 1)] for b in blocked: grid[b[0]][b[1]] = -1 if grid[0][0] == -1 or grid[N][M] == -1: return 0 grid[0][0] = 1 for i in range(N + 1): for j in range(M + 1): if grid[i][j] == -1: continue if i > 0 and grid[i-1][j] != -1: grid[i][j] += grid[i-1][j] if j > 0 and grid[i][j-1] != -1: grid[i][j] += grid[i][j-1] return grid[N][M]"},{"question":"You are given an array A of N integers. Your task is to find the length of the longest subsequence of A such that the sum of the subsequence is even and every subsequent element is greater than or equal to the previous element. ------ Input ------ The first line of the input contains a single integer N (the number of elements in A). The second line contains N integers separated by spaces, which represent the elements of the array A. ------ Output ------ Print a single line containing one integer ― the length of the longest subsequence that satisfies the given conditions. ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^6 ------ Subtasks ------ Subtask #1 (10 points): 1 ≤ N ≤ 100 Subtask #2 (15 points): 1 ≤ N ≤ 1000 Subtask #3 (75 points): original constraints ----- Sample Input 1 ------ 6 1 2 3 4 5 6 ----- Sample Output 1 ------ 4 ----- explanation 1 ------ The longest subsequence with an even sum and non-decreasing order is [2, 4, 6], which has an even sum of 12. ----- Sample Input 2 ------ 5 5 7 9 10 12 ----- Sample Output 2 ------ 2 ----- explanation 2 ------ The longest subsequence with an even sum and non-decreasing order is [10, 12], which has an even sum of 22. Another possible subsequence is [12], with an even sum of 12.","solution":"def longest_even_sum_subsequence_length(N, A): # Sort the array to ensure non-decreasing order A.sort() # Filter out only those numbers which are even even_numbers = [x for x in A if x % 2 == 0] return len(even_numbers)"},{"question":"John is working with binary strings for his new project. He has two binary strings, X and Y, of equal length. John wants to create a new binary string Z of the same length by performing the following operation on each corresponding pair of bits from X and Y: - If the bit from X is different from the bit in Y, the corresponding bit in Z is 1. - If the bit from X is the same as the bit in Y, the corresponding bit in Z is 0. Can you help John generate the resulting binary string Z? ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - Each test case consists of two lines: - The first line contains the binary string X. - The second line contains the binary string Y. ------ Output Format ------ For each test case, output the resulting binary string Z. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |X|, |Y| ≤ 10^5 X and Y have the same length. The total length of all strings across all test cases does not exceed 10^6. ----- Sample Input 1 ------ 2 10101 00111 111000 101010 ----- Sample Output 1 ------ 10010 010010 ----- Explanation 1 ------ Test Case 1: X = 10101 Y = 00111 Z is generated as follows: Comparing each bit of X and Y: - 1 vs 0 -> 1 (different) - 0 vs 0 -> 0 (same) - 1 vs 1 -> 0 (same) - 0 vs 1 -> 1 (different) - 1 vs 1 -> 0 (same) So, Z = 10010. Test Case 2: X = 111000 Y = 101010 Comparing each bit of X and Y: - 1 vs 1 -> 0 (same) - 1 vs 0 -> 1 (different) - 1 vs 1 -> 0 (same) - 0 vs 0 -> 0 (same) - 0 vs 1 -> 1 (different) - 0 vs 0 -> 0 (same) So, Z = 010010.","solution":"def generate_z_from_xy(T, test_cases): result = [] for i in range(T): X, Y = test_cases[i] Z = \'\'.join(\'1\' if X[j] != Y[j] else \'0\' for j in range(len(X))) result.append(Z) return result"},{"question":"There is a grid of size `n x m` filled with non-negative integers. You are allowed to perform the following operations any number of times: * ADD row x value — Add the given value to all elements of the row x (0 ≤ x < n). * ADD column y value — Add the given value to all elements of the column y (0 ≤ y < m). Your task is to determine the minimum number of operations required to transform the grid into a target grid. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), representing the dimensions of the grid. Next `n` lines contain `m` integers each, representing the initial grid configuration. This is followed by `n` lines, each containing `m` integers, representing the target grid configuration. Output In the first line, print the number of operations `k` required to transform the grid into the target grid. The number should be the minimum possible. Then print `k` lines containing one operation each, in the format described above. If there are several solutions, print any of them. Examples Input 2 2 1 2 3 4 2 3 4 5 Output 2 ADD row 0 1 ADD row 1 1 Input 3 3 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 Output 6 ADD row 0 3 ADD row 1 3 ADD row 2 3 ADD column 0 0 ADD column 1 0 ADD column 2 0","solution":"def transform_grid(n, m, initial_grid, target_grid): Transforms the initial grid into the target grid with the minimum number of add operations. Returns the number of operations required and the operations themselves. operations = [] # Calculate row differences and handle row operations for row in range(n): difference = target_grid[row][0] - initial_grid[row][0] if difference != 0: operations.append(f\\"ADD row {row} {difference}\\") for col in range(m): initial_grid[row][col] += difference # Calculate column differences and handle column operations for col in range(m): difference = target_grid[0][col] - initial_grid[0][col] if difference != 0: operations.append(f\\"ADD column {col} {difference}\\") for row in range(n): initial_grid[row][col] += difference return len(operations), operations"},{"question":"Given a number n, you need to find the number of ways to distribute 2n candies to n children such that each child gets an even number of candies. The answer can be very large. So, you have to return the answer modulo 10^9 + 7. Example: Input: n = 2 Output: 5 Explanation: There are 5 ways to distribute 4 candies (2 * n) among 2 children such that each child gets an even number of candies. The ways are: (0, 4), (2, 2), (4, 0), (2, 2), and (4, 0). Input: n = 3 Output: 15 Explanation: There are 15 ways to distribute 6 candies (2 * n) among 3 children such that each child gets an even number of candies. Your Task: You do not need to read or print anything. Your task is to complete the function `countEvenDistributions()` which takes an integer n as input parameter and returns the number of ways to distribute candies modulo 10^9 + 7. Expected Time Complexity: O(n * log(n)) Expected Space Complexity: O(1) Constraints: 1 <= n <= 10^5","solution":"MOD = 10**9 + 7 def countEvenDistributions(n): Returns the number of ways to distribute 2n candies to n children such that each child gets an even number of candies, modulo 10^9 + 7. def binomial_coefficient(n, k, p): if k > n: return 0 if k == 0 or k == n: return 1 numerator = 1 denominator = 1 for i in range(k): numerator = (numerator * (n - i)) % p denominator = (denominator * (i + 1)) % p inverse_denominator = pow(denominator, p - 2, p) return (numerator * inverse_denominator) % p return binomial_coefficient(2 * n, n, MOD)"},{"question":"Write a function path_finder(a, b, m, n) that finds and returns all paths from node `a` to node `b` in a directed graph with nodes labeled from 0 to n-1. A path is represented as a list of nodes where the first element is `a` and the last element is `b`, and each intermediate element represents a node that is visited exactly once. The directed graph is represented as a 2D list `m` of size n x n where m[i][j] is 1 if there is a directed edge from node `i` to node `j`, and 0 otherwise. The function should return a list of lists, where each sub-list represents a valid path from `a` to `b`. # Examples: ``` m = [[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 0]] path_finder(m, 0, 3, 4) --> [[0, 1, 2, 3]] m = [[0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1], [0, 0, 0, 0]] path_finder(m, 0, 3, 4) --> [[0, 1, 2, 3], [0, 2, 3], [0, 1, 3]] ``` # Constraints: - The path must not visit any node more than once. - 2 <= n <= 15 - 0 <= a, b < n","solution":"def path_finder(m, a, b, n): Finds all paths from node `a` to node `b` in a directed graph. :param m: 2D list representing the adjacency matrix of the graph :param a: The starting node :param b: The destination node :param n: The number of nodes in the graph :return: A list of lists, each representing a unique path from `a` to `b` all_paths = [] def dfs(current, path): if current == b: all_paths.append(path) return for next_node in range(n): if m[current][next_node] == 1 and next_node not in path: dfs(next_node, path + [next_node]) dfs(a, [a]) return all_paths"},{"question":"Given n pairs of integers where each pair represents a start and end time of a meeting, determine if a person can attend all meetings. If a person can attend all meetings, return True, otherwise, return False. Example 1: Input: intervals = [[0, 30], [5, 10], [15, 20]] Output: False Explanation: A person cannot attend both the central meeting from 5 to 10 and the initial meeting from 0 to 30. Example 2: Input: intervals = [[7, 10], [2, 4]] Output: True Explanation: A person can attend both meetings since they do not overlap. Note: - The intervals are represented as two-dimensional arrays where intervals[i] = [start_i, end_i]. - 0 <= intervals.length <= 104 - intervals[i].length == 2 - intervals[i][0] < intervals[i][1]","solution":"def can_attend_all_meetings(intervals): Determines if a person can attend all meetings given a list of pairs (start, end) times. # Sort the intervals by start time intervals.sort(key=lambda x: x[0]) # Compare each meeting\'s end time with the next meeting\'s start time for i in range(len(intervals) - 1): if intervals[i][1] > intervals[i + 1][0]: return False return True"},{"question":"You are given two strings `s1` and `s2` representing two passwords chosen by Alice and Bob respectively. Your task is to determine whether the two passwords are similar. Two passwords are considered similar if one string can become another by deleting some characters without changing the order of the remaining characters. Write a function `arePasswordsSimilar(s1: str, s2: str) -> bool` that returns `True` if the two passwords are similar, and `False` otherwise. Example 1: Input: s1 = \\"abcde\\", s2 = \\"ace\\" Output: True Explanation: You can delete \'b\' and \'d\' from \\"abcde\\" to get \\"ace\\". Example 2: Input: s1 = \\"abc\\", s2 = \\"abc\\" Output: True Explanation: Both passwords are identical, hence similar. Example 3: Input: s1 = \\"abc\\", s2 = \\"def\\" Output: False Explanation: Deleting any characters from either string will not make them similar. Example 4: Input: s1 = \\"abcdef\\", s2 = \\"azce\\" Output: False Explanation: Deleting \'b\', \'d\', \'f\' from \\"abcdef\\" does not result in \\"azce\\". Example 5: Input: s1 = \\"abc\\", s2 = \\"\\" Output: True Explanation: Deleting all characters from \\"abc\\" results in an empty string which matches \\"s2\\". Constraints: - 1 <= s1.length, s2.length <= 1000 - s1 and s2 consist of lowercase English letters only.","solution":"def arePasswordsSimilar(s1: str, s2: str) -> bool: Determines if one string can become another by deleting some characters without changing the order of the remaining characters. i, j = 0, 0 while i < len(s1) and j < len(s2): if s1[i] == s2[j]: j += 1 i += 1 return j == len(s2)"},{"question":"A company has recently implemented a new bonus system for its employees based on their performance. Each employee is evaluated over multiple periods, each supported by a score from 0 to 100. The company\'s new policy is to calculate the average performance score by ignoring the highest and the lowest score. If there is only one period to consider, the single score should be the average. If there are two periods, the average of the two scores should be used. Your task is to write a program that reads the input data for multiple employees, calculates their average performance scores according to the above rules, and displays them. Input The input consists of multiple datasets. Each dataset contains a single line formatted as follows: E P S1 S2 ... SP Here: - E is the employee\'s identification number (a positive integer). - P is the number of periods (a positive integer). - S1, S2, ..., SP are the scores for each period (each score is a non-negative integer between 0 and 100 inclusive). The input ends with a line containing the single integer 0. This line should not be processed. Output For each dataset, print the employee\'s identification number and their calculated average score formatted to one decimal place. Example Input 101 5 10 20 30 40 50 102 1 75 103 2 20 40 0 Output 101 30.0 102 75.0 103 30.0","solution":"def calculate_average_score(data): Process a list of data to calculate average performance scores for employees. Args: data (list of str): List of input strings where each string contains the employee identification number, number of periods, and the scores for each period. Returns: list of str: Each string contains the employee ID and their average score rounded to one decimal place. results = [] for line in data: parts = line.split() employee_id = int(parts[0]) periods = int(parts[1]) scores = [int(score) for score in parts[2:]] if periods == 1: avg_score = float(scores[0]) elif periods == 2: avg_score = sum(scores) / 2.0 else: sorted_scores = sorted(scores) avg_score = sum(sorted_scores[1:-1]) / (periods - 2) results.append(f\\"{employee_id} {avg_score:.1f}\\") return results"},{"question":"#Remove Duplicates Write a function that removes duplicate consecutive characters from a string, replacing runs of duplicates with a single instance of the character. Return the new string with the duplicates removed. examples ``` input: \'aabbcc\' result: \'abc\' input: \'aaabbbccc\' result: \'abc\' input: \'ababab\' result: \'ababab\' input: \'abcd\' result: \'abcd\' input: \'aaaabaaa\' result: \'aba\' input: \'helloo...world!\' result: \'helo.world!\' ```","solution":"def remove_consecutive_duplicates(s): Removes duplicate consecutive characters from a string. if not s: return s result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return \'\'.join(result)"},{"question":"In a small village, farmers grow crops in square-shaped fields arranged in an ( n times n ) grid. Each cell in the grid either contains crops (denoted by \'C\') or is empty (denoted by \'E\'). Farmers want to maximize the number of crops collected in a single straight line (either horizontal, vertical, or diagonal) by selecting the longest segment possible containing crops. You are given the grid configuration and asked to find the maximum number of crops that can be collected in a single straight line. # Input - The first line contains a single integer ( t ) (1 ≤ ( t ) ≤ 1000) — the number of test cases. - Each test case starts with a single integer ( n ) (1 ≤ ( n ) ≤ 100) — the size of the grid. - The next ( n ) lines contain strings of length ( n ) comprised of characters \'C\' and \'E\' describing the grid. # Output - For each test case, output a single line with the maximum number of crops that can be collected in a single straight line. # Example Input ``` 2 4 CECE CCEC EECC ECCE 3 EEC CCE ECE ``` Output ``` 3 2 ``` # Explanation In the first test case: - The longest segment of crops in the first grid is \\"CCC\\" (3 crops) diagonally or vertically. - Hence, the output is 3. In the second test case: - The longest segment of crops in the second grid is \\"CC\\" (2 crops) horizontally or vertically. - Hence, the output is 2.","solution":"def max_crops_in_line(grid): n = len(grid) max_crops = 0 # check rows and columns for i in range(n): row_count = 0 col_count = 0 for j in range(n): if grid[i][j] == \'C\': row_count += 1 max_crops = max(max_crops, row_count) else: row_count = 0 if grid[j][i] == \'C\': col_count += 1 max_crops = max(max_crops, col_count) else: col_count = 0 # check diagonals for d in range(-n + 1, n): main_diag_count = 0 anti_diag_count = 0 for i in range(n): if 0 <= i + d < n: if grid[i][i + d] == \'C\': main_diag_count += 1 max_crops = max(max_crops, main_diag_count) else: main_diag_count = 0 if grid[i][n - 1 - (i + d)] == \'C\': anti_diag_count += 1 max_crops = max(max_crops, anti_diag_count) else: anti_diag_count = 0 return max_crops def max_crops_collected(t, test_cases): results = [] for i in range(t): n, grid = test_cases[i] result = max_crops_in_line(grid) results.append(result) return results"},{"question":"You are planning a hiking trip and want to know if you can finish the trip within a given maximum altitude. You are given an array heights[] of N integers, where heights[i] is the altitude of the i-th point on the hiking trail. You can move from point i to point i+1 if and only if the altitude difference between these points is not greater than a specified threshold D. Write a function canFinishHiking() that takes the integer N, the array heights[], and the integer D, and returns true if you can finish the hike starting from the first point to the last, or false otherwise. Example 1: Input: N = 5 heights[] = {1, 2, 4, 7, 10} D = 3 Output: True Explanation: The altitude differences between consecutive points are [1, 2, 3, 3]. All differences are within the threshold D = 3, so it\'s possible to complete the hike. Example 2: Input: N = 4 heights[] = {3, 8, 5, 2} D = 4 Output: False Explanation: The altitude differences between the first and second points and the third and fourth points are [5, 3, 3]. The difference between the first and second points is greater than 4, so it\'s not possible to complete the hike. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canFinishHiking() which takes the integer N, the array heights[], and the integer D as parameters and returns true if it is possible to complete the hike from start to finish, otherwise false. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ heights[i] ≤ 10^9 0 ≤ D ≤ 10^9","solution":"def canFinishHiking(N, heights, D): Checks if it is possible to finish the hike from start to finish. :param N: Integer representing the number of points on the trail. :param heights: List of integers representing the altitude at each point. :param D: Integer representing the maximum allowable altitude difference between consecutive points. :return: True if it\'s possible to finish the hike, False otherwise. for i in range(1, N): if abs(heights[i] - heights[i-1]) > D: return False return True"},{"question":"You are given a binary tree with N vertices rooted at node 1. Each vertex also has an initial value A_i (1 leq i leq N). You are asked Q queries. In each query, you are given two integers V and L. For each query, the task is to find the sum of the values of all vertices in the subtree of V that are at exactly L levels below V. The root node is considered to be at level 0. -----Input:----- - The first line contains an integer T denoting the number of test cases. - The first line of each test case contains two integers N and Q. - The second line contains N space-separated integers, A_1, A_2, ..., A_N denoting the initial values of the vertices. - The next N-1 lines contain two integers u and v denoting an edge between u and v. - The next Q lines each contain two integers V and L, representing a query. -----Output:----- - For each query, print a single integer which is the sum of the values of all vertices in the subtree of V that are exactly L levels below V. -----Constraints:----- - 1 leq T leq 10 - 1 leq N leq 100000 - 1 leq Q leq 100000 - 0 leq A_i leq 10^9 - 1 leq u, v, V leq N - 0 leq L leq N - The tree is a binary tree. - The sum of N over all test cases does not exceed 100000. - The sum of Q over all test cases does not exceed 100000. -----Sample Input----- 1 5 3 10 20 30 40 50 1 2 1 3 3 4 3 5 1 2 3 1 2 0 -----Sample Output----- 90 90 20 -----Explanation----- 1. For the first query, vertices 4 and 5 are at exactly 2 levels below vertex 1, hence their values sum up to 40 + 50 = 90. 2. For the second query, vertices 4 and 5 are at exactly 1 level below vertex 3, hence their values sum up to 40 + 50 = 90. 3. For the third query, vertex 2 is at exactly level 0 below itself, so the result is 20.","solution":"from collections import defaultdict, deque def subtree_sum_at_level(n, values, edges, queries): # Parse input tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # BFS to calculate levels and parents level = [-1] * (n + 1) level[1] = 0 parent = [-1] * (n + 1) q = deque([1]) while q: u = q.popleft() for v in tree[u]: if level[v] == -1: level[v] = level[u] + 1 parent[v] = u q.append(v) # Precompute the sum of values at each level for each node def get_subtree_sums(node, parent_node): current_level = level[node] subtree_sums[current_level][node] = values[node-1] for neighbor in tree[node]: if neighbor == parent_node: continue get_subtree_sums(neighbor, node) for lv in subtree_sums: subtree_sums[lv][node] += subtree_sums[lv].get(neighbor, 0) subtree_sums = defaultdict(lambda: defaultdict(int)) get_subtree_sums(1, -1) results = [] for v, l in queries: target_level = level[v] + l if target_level in subtree_sums: results.append(subtree_sums[target_level].get(v, 0)) else: results.append(0) return results"},{"question":"Dasha and Masha are playing a game on a grid-based field of size m x n. The field is divided into cells, and each cell is initially empty. The players take turns, and Dasha always moves first. In each turn, a player can place a stone on any empty cell, but they can\'t place a stone on a cell that already has one. The goal of the game is to create a connected path of stones from the top row to the bottom row (for Dasha) or from the left column to the right column (for Masha). A path is considered connected if there are stones in all cells of some sequence of adjacent cells where two cells are adjacent if they share a common side. The player who constructs such a path first is the winner. If all cells are filled and no player has created a connected path, the game ends in a draw. You are given the dimensions of the field. Determine if there is a winning strategy for the first player (Dasha) or the second player (Masha), or if the result is a draw assuming both players play optimally. Input The only line contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the field. Output Output \\"Dasha\\" if Dasha has a winning strategy, \\"Masha\\" if Masha has a winning strategy, and \\"Draw\\" if the game ends in a draw with optimal play from both sides. Examples Input 3 3 Output Dasha Input 2 2 Output Draw Note In the first example, Dasha has a winning strategy by quickly connecting the top row to the bottom row because she goes first. In the second example, both players have equal chances, and the game will likely end in a draw if they play optimally.","solution":"def game_outcome(m, n): Determines the outcome of the game by the dimensions of the field. Returns: \\"Dasha\\" if Dasha has a winning strategy. \\"Masha\\" if Masha has a winning strategy. \\"Draw\\" if the game ends in a draw with optimal play from both sides. if m % 2 == 1 and n % 2 == 1: return \\"Dasha\\" elif m % 2 == 0 and n % 2 == 0: return \\"Draw\\" else: return \\"Masha\\""},{"question":"Given a string `s` consisting of only lowercase letters, return the lexicographically smallest subsequence of `s` that contains all the distinct characters of `s` exactly once. Example 1: Input: s = \\"bcabc\\" Output: \\"abc\\" Explanation: The subsequence \\"abc\\" can be formed by removing the first \'b\' and the second \'c\'. Example 2: Input: s = \\"cbacdcbc\\" Output: \\"acdb\\" Explanation: The subsequence \\"acdb\\" can be formed by removing the first \'c\', the second \'c\', the third \'c\', and the second \'b\'. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `smallestSubsequence()` which takes the string `s` as an input and returns the lexicographically smallest subsequence of `s` that contains all the distinct characters of `s` exactly once. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ s.length ≤ 10^4 s consists of lowercase English letters only.","solution":"def smallestSubsequence(s): Returns the lexicographically smallest subsequence of `s` that contains all the distinct characters of `s` exactly once. stack = [] seen = set() last_occurrence = {char: i for i, char in enumerate(s)} for i, char in enumerate(s): if char not in seen: while stack and char < stack[-1] and i < last_occurrence[stack[-1]]: seen.remove(stack.pop()) stack.append(char) seen.add(char) return \'\'.join(stack)"},{"question":"Write a Python function that takes a string as input and returns a list of all possible substrings that are palindromes. A palindrome is defined as a string that reads the same forward and backward. Input: A string `s` with length in the range [1, 100]. Output: A list of strings representing all distinct palindromic substrings, sorted in ascending lexicographical order. Constraints: - The input string contains only lowercase alphabets. Example: Input: \\"abaaa\\" Output: [\'a\', \'aa\', \'aaa\', \'aba\', \'b\']","solution":"def find_palindromic_substrings(s): Returns a list of all distinct palindromic substrings in the input string, sorted in ascending lexicographical order. def is_palindrome(sub): Checks if a given substring is a palindrome. return sub == sub[::-1] palindromic_substrings = set() for i in range(len(s)): for j in range(i, len(s)): sub = s[i:j + 1] if is_palindrome(sub): palindromic_substrings.add(sub) return sorted(palindromic_substrings) # Example usage: # s = \\"abaaa\\" # print(find_palindromic_substrings(s)) # Output: [\'a\', \'aa\', \'aaa\', \'aba\', \'b\']"},{"question":"Introduction In a standard deck of playing cards, there are 52 cards divided into 4 suits: hearts, diamonds, clubs, and spades. Each suit has 13 ranks: Ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, and King. A flush is a hand where all cards have the same suit. However, the specific ranks in the flush can still distinguish them from other flushes. If two flushes have the same rank cards, they are of equal value. A straight flush is a special type of flush where the cards have consecutive ranks and the same suit. ___ # Task Write a function to identify whether a given hand of cards forms a flush or a straight flush. The input is a list of strings representing the cards, where each string contains a rank and a suit (e.g., \'2H\' for the 2 of hearts, \'QD\' for the Queen of diamonds). The function should follow these specifications: - If the hand is a straight flush, return the highest rank in the sequence followed by an \\"SF\\" (e.g., \\"9SF\\" for a straight flush ending with 9). - If the hand is a normal flush, return \\"F\\". - If the hand is neither a flush nor a straight flush, return \\"N\\". **Notes**: - The ranks are \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'J\', \'Q\', \'K\', \'A\', in that order. - Aces can be low (preceding 2) or high (following King). # Examples 1. `[\\"2H\\", \\"3H\\", \\"4H\\", \\"5H\\", \\"6H\\"]` should return `\\"6SF\\"` since it is a straight flush ending in 6. 2. `[\\"2H\\", \\"4H\\", \\"6H\\", \\"8H\\", \\"10H\\"]` should return `\\"F\\"` since it is a flush but not a straight flush. 3. `[\\"2H\\", \\"3D\\", \\"4H\\", \\"5S\\", \\"6H\\"]` should return `\\"N\\"` since the cards do not form a flush.","solution":"def card_rank_value(rank): rank_order = {\'2\': 2, \'3\': 3, \'4\': 4, \'5\': 5, \'6\': 6, \'7\': 7, \'8\': 8, \'9\': 9, \'10\': 10, \'J\': 11, \'Q\': 12, \'K\': 13, \'A\': 14} return rank_order[rank] def is_consecutive(values): values.sort() for i in range(len(values) - 1): if values[i+1] - values[i] != 1: return False return True def identify_hand(cards): suits = [card[-1] for card in cards] ranks = [card[:-1] for card in cards] if len(set(suits)) != 1: return \\"N\\" # Not a flush, since suits are different values = [card_rank_value(rank) for rank in ranks] if is_consecutive(values): return f\\"{ranks[values.index(max(values))]}SF\\" # Straight Flush return \\"F\\" # Just a flush"},{"question":"You are given an integer array nums consisting of distinct numbers. Determine if the array can be sorted in non-decreasing order by rotating the array some number of times. That is, determine if the array can be sorted non-decreasing by performing the following operation any number of times: Operation: Let nums = nums_1, nums_2, ..., nums_{|nums|}. Change nums to nums_{|nums|}, nums_1, nums_2, ..., nums_{|nums|-1}. Here, |nums| denotes the length of the array nums. -----Constraints----- - 1 leq |nums| leq 100 - nums consists of distinct integers. -----Input----- Input is given from Standard Input in the following format: n nums_1 nums_2 ... nums_n -----Output----- If the array can be sorted in non-decreasing order after rotation, print Yes; otherwise, print No. -----Sample Input----- 6 3 4 5 6 1 2 -----Sample Output----- Yes - After rotating the array 4 times, the array becomes 1 2 3 4 5 6 which is in non-decreasing order. -----Sample Input 2----- 4 4 3 2 1 -----Sample Output 2----- No","solution":"def can_be_sorted_by_rotating(nums): Determine if the array can be sorted in non-decreasing order by rotating the array. count_inversions = 0 n = len(nums) for i in range(n): if nums[i] > nums[(i+1) % n]: count_inversions += 1 return count_inversions <= 1"},{"question":"A group of friends are playing a word game. The game involves combining small phrases into larger, meaningful sentences. Each player has a set of phrases and they have to create the longest possible sentence with unique words. Each friend has a list of phrases. Your task is to help them determine the maximum number of unique words that can be formed into a single sentence from their list of phrases. ------ Input ------ The first line of the input contains an integer T, the number of test cases. T test cases follow. Each test case starts with an integer N, the number of phrases for that friend. The next N lines each contain a single phrase consisting of words separated by spaces. ------ Output ------ For each test case, output exactly one line containing one integer — the maximum number of unique words that can be formed into a single sentence for that friend. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ length of each phrase ≤ 100 Each phrase consists of lowercase alphabetic characters and spaces only ------ Sample Input 1 ------ 2 3 hello world world is beautiful beautiful day 2 good morning good night ------ Sample Output 1 ------ 5 3 ------ Explanation 1 ------ Case 1: Combining all phrases into a single sentence without repeating words: \\"hello\\", \\"world\\", \\"is\\", \\"beautiful\\", \\"day\\". Hence, the output is 5. Case 2: Combining the phrases \\"good morning\\" and \\"good night\\" results in the words \\"good\\", \\"morning\\", \\"night\\". The word \\"good\\" is repeated, so it counts only once. Hence, the output is 3.","solution":"def max_unique_words_in_phrases(test_cases): This function accepts a list of test cases. Each test case is a list of phrases. It returns a list of integers representing the maximum number of unique words that can be formed into a single sentence for each test case. results = [] for phrases in test_cases: unique_words = set() for phrase in phrases: words = phrase.split() unique_words.update(words) results.append(len(unique_words)) return results"},{"question":"Your task is to **Find the Missing Letter**. This is a simple yet intriguing puzzle where you need to identify a missing character in a sequence of letters. # What needs to be done? Given an array of consecutive (increasing) letters, find the missing letter in the array. # Instructions: 1. The array will always contain letters in only one case. 2. The length of the array will always be at least 2. 3. The array can be in any order but always contains only consecutive letters with one missing. # Example Cases: ``` Input: [\'a\',\'b\',\'c\',\'d\',\'f\'] Output: \'e\' Input: [\'O\',\'Q\',\'R\',\'S\'] Output: \'P\' Input: [\'m\',\'o\'] Output: \'n\' ``` # Additional Notes: - The function should have appropriate input validation to handle cases where the input does not meet the constraints. - Use standard ASCII values to help identify the missing letter. Enjoy the challenge and the subtle debugging it entails!","solution":"def find_missing_letter(chars): Given an array of consecutive (increasing) letters, find the missing letter. The array will always contain letters in only one case. for i in range(len(chars) - 1): if ord(chars[i+1]) != ord(chars[i]) + 1: return chr(ord(chars[i]) + 1) raise ValueError(\\"No missing letter found\\")"},{"question":"David is managing a warehouse with N shelves, each holding an inventory of items, initially set to 0. He receives Q requests to either add or remove a certain quantity of items on certain shelves. Each request is represented by four integers: t, a, b, and k. Here, t is the type of the operation (1 for adding and 2 for removing items), a and b are the indices of the shelves, and k is the number of items to be added or removed from each of the shelves whose indices lie between a and b (both inclusive). Can you calculate the total number of items on all the shelves after processing all Q requests? Input Format The first line contains two integers, N and Q, separated by a single space. Q lines follow; each of these lines contains four integers: t, a, b, and k, separated by spaces. Output Format A single line containing the total number of items across all shelves. Constraints 1≤N≤10^6 1≤Q≤10^5 1≤a≤b≤N 1≤k≤10^4 1≤t≤2 SAMPLE INPUT 5 3 1 1 3 50 2 2 4 30 1 1 5 20 SAMPLE OUTPUT 120 Explanation Initially, each shelf contains 0 items: 0 0 0 0 0 First request (t=1, a=1, b=3, k=50): 50 50 50 0 0 Second request (t=2, a=2, b=4, k=30): 50 20 20 -30 0 Third request (t=1, a=1, b=5, k=20): 70 40 40 -10 20 Total = 70 + 40 + 40 + (-10) + 20 = 160","solution":"def manage_warehouse(N, Q, requests): Manages the warehouse and returns the total number of items on all shelves after processing all requests. :param N: int - number of shelves :param Q: int - number of requests :param requests: list of tuples - each tuple contains four int (t, a, b, k) :return: int - total number of items on all shelves shelves = [0] * N for request in requests: t, a, b, k = request if t == 1: # Adding items for i in range(a-1, b): shelves[i] += k elif t == 2: # Removing items for i in range(a-1, b): shelves[i] -= k return sum(shelves)"},{"question":"A group of archaeologists have discovered a series of ancient scripts written on stone tablets. The scripts are composed of sequences of integers and they need to be encoded before they can be analyzed further. Each sequence of integers needs to be divided into blocks of the same length, and each block is analyzed separately. You are tasked with helping the archaeologists encode these sequences in the following manner: - Divide the sequence of length N into K blocks, each of length M (where M * K = N). - Each block is then encoded by finding the sum of the integers in that block. - Finally, the encoded sequence is the concatenation of these sums. For example, given a sequence S = (10, 20, 30, 40, 50, 60) and K = 2, the sequence should be divided into two blocks of 3 integers each: - Block 1: (10, 20, 30) - Block 2: (40, 50, 60) The sums of these blocks are 60 and 150, respectively, so the encoded sequence is (60, 150). Given a sequence S, determine its encoded form. If it\'s not possible to divide the sequence into equal blocks, return an empty sequence. Input The first line contains two integers N and K (1 ≤ K ≤ N), the length of the sequence and the number of blocks, respectively. The second line contains N integers S1, S2, ..., SN (0 ≤ Si < 1000), representing the sequence to be encoded. Output Output a single line with K integers, the encoded sequence if it’s possible to divide the sequence into equal blocks; otherwise, output an empty sequence. Examples Input 6 2 10 20 30 40 50 60 Output 60 150 Input 7 3 5 10 15 20 25 30 35 Output 20 45 65 Input 8 3 1 2 3 4 5 6 7 8 Output","solution":"def encode_sequence(N, K, sequence): Encodes the given sequence by dividing it into K blocks of equal length and summing each block. Args: N (int): Length of the sequence K (int): Number of blocks sequence (list): List of integers representing the sequence Returns: list: Encoded sequence as a list of sums of each block, or an empty list if division is not possible if N % K != 0: return [] block_size = N // K encoded_sequence = [] for i in range(0, N, block_size): block_sum = sum(sequence[i:i+block_size]) encoded_sequence.append(block_sum) return encoded_sequence"},{"question":"Given an integer array nums, the task is to find the longest consecutive elements sequence and return its length. The sequence must be made of consecutive integers in a sorted order (ascending). Example 1: Input: nums = [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive sequence is [1, 2, 3, 4] and its length is 4. Example 2: Input: nums = [0, 0, -1] Output: 2 Explanation: The longest consecutive sequence is [-1, 0] and its length is 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestConsecutive() which takes the array nums and returns the length of the longest consecutive sequence. Constraints: 1 <= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9","solution":"def longestConsecutive(nums): Find the length of the longest consecutive sequence in the given list of integers. Parameters: nums (List[int]): The input list of integers. Returns: int: The length of the longest consecutive sequence. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"John is planning to organize a large dinner party and wants to arrange the attendees in several tables. John wants to minimize the number of tables used while ensuring that the number of people sitting at each table is between a given range. Given a list of guest names and the minimum (minGuests) and maximum (maxGuests) number of guests that can sit at a table, determine the minimum number of tables required to seat all guests. All tables must have at least minGuests and at most maxGuests guests if possible. Input The first line contains three integers n, minGuests, and maxGuests (1 ≤ n ≤ 1000, 1 ≤ minGuests ≤ maxGuests ≤ n), where n is the total number of guests. The following n lines contain names of the guests. Each name is a non-empty string of length at most 100 consisting of only uppercase and lowercase English letters. Output Print the minimum number of tables John needs to arrange to seat all the guests following the given constraints. Examples Input 10 2 5 Alice Bob Charlie David Eve Frank Grace Heidi Ivan Judy Output 2 Input 7 3 4 Alice Bob Charlie David Eve Frank Grace Output 2 Input 8 1 8 Alice Bob Charlie David Eve Frank Grace Heidi Output 1","solution":"def min_tables(n, minGuests, maxGuests, guests): This function takes the total number of guests \'n\', the minimum number of guests per table \'minGuests\', the maximum number of guests per table \'maxGuests\', and a list of guest names \'guests\', and returns the minimum number of tables required to seat all guests. # Initialize the result count for the number of tables. tables = 0 # Start arranging the tables by initially allocating maxGuests to each table while n > 0: # Decrease the number of guests by the maximum number each table can hold n -= maxGuests # Count this as a table used tables += 1 return tables"},{"question":"Design and implement a function to solve the 5x5 Magic Square puzzle. A Magic Square is a grid of distinct numbers where the sums of the numbers in each row, each column, and both main diagonals are all the same. For a 5x5 Magic Square, the numbers used should be 1 through 25, and the sum for each row, column, and diagonal should be 65. Your function should take a 5x5 grid as input where some numbers may already be filled, and the rest are zeroes, indicating empty spots. The goal is to fill the grid to form a Magic Square while adhering to the constraints of unique numbers from 1 to 25 and ensuring each row, column, and diagonal sums to 65. Write a function `solve_magic_square(grid: List[List[int]]) -> List[List[int]]` that receives a 2D list of integers with some pre-filled values and returns a 2D list with the complete Magic Square. # Input - `grid`: A 5x5 list of lists of integers where each integer is either a number from 1 to 25 or zero (indicating an empty spot). # Output - A fully completed 5x5 Magic Square grid where each number from 1 to 25 appears exactly once, and the sums of each row, column, and diagonal are 65. # Example ```python input_grid = [ [17, 24, 1, 8, 15], [23, 5, 7, 14, 0], [4, 6, 13, 20, 22], [10, 12, 19, 0, 0], [11, 18, 0, 0, 0] ] assert solve_magic_square(input_grid) == [ [17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9] ] ``` # Constraints - You may assume there is always a solution for the given input grid.","solution":"def solve_magic_square(grid): Solves the 5x5 magic square puzzle. from itertools import permutations def is_magic_square(magic_square): target = 65 # Check rows and columns for i in range(5): if sum(magic_square[i]) != target or sum(magic_square[j][i] for j in range(5)) != target: return False # Check diagonals if sum(magic_square[i][i] for i in range(5)) != target or sum(magic_square[i][4 - i] for i in range(5)) != target: return False return True def fill_square(square, remaining): for perm in permutations(remaining): idx = 0 for i in range(5): for j in range(5): if square[i][j] == 0: square[i][j] = perm[idx] idx += 1 if is_magic_square(square): return square for i in range(5): for j in range(5): if square[i][j] in perm: square[i][j] = 0 return None used_numbers = {num for row in grid for num in row if num != 0} remaining_numbers = [i for i in range(1, 26) if i not in used_numbers] return fill_square([row[:] for row in grid], remaining_numbers)"},{"question":"The task is to construct the longest possible itinerary in a city. The city is represented as a directed graph with n intersections (from 1 to n) connected by m roads. An itinerary is a sequence of intersections p1, p2, ..., pk, where there is a direct road from pi to pi+1 for each 1 ≤ i < k. The length of an itinerary is the number of intersections in it. Determine the maximum possible length of an itinerary in the city graph. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000) — the number of intersections and the number of roads in the city, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) indicating that there is a direct road from intersection u to intersection v. Output Print one integer — the length of the longest itinerary in the city. Example Input 5 6 1 2 2 3 3 4 4 5 3 5 1 3 Output 5 Note In the example, one of the longest itineraries is 1 -> 2 -> 3 -> 4 -> 5. Another valid itinerary of length 5 is 1 -> 3 -> 4 -> 5.","solution":"from collections import defaultdict, deque def longest_itinerary(n, m, roads): Returns the length of the longest possible itinerary in the city graph. :param n: Number of intersections :param m: Number of roads :param roads: List of tuples where each tuple (u, v) denotes a direct road from intersection u to intersection v. :return: Length of the longest itinerary # Create adjacency list for the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) # Perform a topological sort in_degree = {i: 0 for i in range(1, n + 1)} for u in graph: for v in graph[u]: in_degree[v] += 1 queue = deque([node for node in in_degree if in_degree[node] == 0]) topo_order = [] while queue: node = queue.popleft() topo_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If topo_order doesn\'t include all nodes, graph has a cycle or disconnected if len(topo_order) < n: return -1 # Find the longest path in the topologically sorted graph longest_path = {i: 1 for i in range(1, n + 1)} for node in topo_order: for neighbor in graph[node]: longest_path[neighbor] = max(longest_path[neighbor], longest_path[node] + 1) return max(longest_path.values())"},{"question":"You are given an array of integers and a target sum. Your task is to determine if there are any two distinct numbers in the array that add up to the target sum. If such a pair exists, return the indices of the two numbers. If no such pair exists, return -1. Input – an array of integers and a target sum Output – either the indices of two distinct numbers that add up to the target sum, in the format (index1, index2), or -1 if no such pair exists SAMPLE INPUT [2, 7, 11, 15], 9 SAMPLE OUTPUT (0, 1)","solution":"def find_pair_with_sum(arr, target): Finds two distinct numbers in the array that add up to the target sum and returns their indices. If no such pair exists, returns -1. # Create a dictionary to store the indices of the elements indices = {} for i, number in enumerate(arr): # Calculate the complement complement = target - number # Check if the complement exists in the dictionary if complement in indices: return indices[complement], i # Store the index of the number in the dictionary indices[number] = i return -1"},{"question":"In a medieval city, there are n castles and m roads. Each road connects exactly two castles and has a specific width. The width of a road is an integer indicating the number of people that can travel side by side on that road at the same time. The city is organizing a festival, and people will move between castles. You need to determine if there is a route with sufficient width for a given number of people to travel from a specified starting castle to a specified destination castle. Input The first line contains two integers n and m (1 ≤ n ≤ 10^4, 1 ≤ m ≤ 10^5) — the number of castles and the number of roads. The next m lines each contains three integers: u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) — indicating that there is a road between castles u and v with width w. The last line contains three integers s, t, p (1 ≤ s, t ≤ n, 1 ≤ p ≤ 10^9) — the starting castle, the destination castle, and the number of people. Output Print \\"YES\\" if there is a route with sufficient width for p people from castle s to castle t, otherwise print \\"NO\\". Examples Input 4 5 1 2 8 1 3 10 2 3 5 2 4 7 3 4 6 1 4 7 Output YES Input 4 3 1 2 4 2 3 5 3 4 3 1 4 5 Output NO","solution":"from heapq import heappush, heappop from collections import defaultdict def can_route_with_sufficient_width(n, m, roads, s, t, p): def dijkstra(start): max_width = [0] * (n + 1) max_width[start] = float(\'inf\') # Since any road width is possible initially pq = [(-float(\'inf\'), start)] # Max-heap based on path width while pq: width, u = heappop(pq) width = -width if width < max_width[u]: continue for v, w in graph[u]: new_width = min(width, w) if new_width > max_width[v]: max_width[v] = new_width heappush(pq, (-new_width, v)) return max_width # Build the graph graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Get the maximum width paths from s to all other nodes max_width = dijkstra(s) # The maximum width path from s to t should be at least p return \\"YES\\" if max_width[t] >= p else \\"NO\\""},{"question":"Alice and Bob play a different game. They start with two piles of stones. In each turn, a player must choose one of the piles and take a positive number of stones from it such that the number taken is a divisor of the initial number of stones in that pile. Alice starts the game. The player who cannot make a move loses. Your task is to determine who wins the game given the initial number of stones in both piles. Input The only string contains two space-separated integers x and y (1 ≤ x, y ≤ 100) — the initial number of stones in each of the two piles. Output If Alice wins, print \\"Alice\\" (without the quotes), otherwise print \\"Bob\\" (without the quotes). Examples Input 4 6 Output Alice Input 8 3 Output Bob Note In the first sample, the game will go like this: * Alice takes 4 stones from the second pile (6 is divided by 6, 3, 2, and 1), leaving 6 stones. * Bob takes 6 stones from the second pile, leaving 0 stones. * Alice takes 4 stones from the first pile (4 is divided by 4, 2, and 1), leaving 0 stones. Bob cannot move and loses. In the second sample, Alice cannot take stones from either pile initially because no move can be made, thus Bob wins automatically.","solution":"def game_winner(x, y): if x % 2 == 0 or y % 2 == 0: return \\"Alice\\" else: return \\"Bob\\""},{"question":"The Kingdom of Monza is constructing a new highway system connecting its cities. Each city is represented as a node, and roads as edges in a weighted graph. The goal is to determine if the highway system can withstand any single road failure without disconnecting the cities. Write a program to determine whether the network of highways remains connected after removing any single road. The program should take as input the number of cities and highways, followed by the description of each highway including the two cities it connects and its weight. A highway is represented by three integers: u (the first city), v (the second city), and w (the weight of the highway between the two cities). If after removing any single highway the cities remain connected, print \\"The highway system is resilient.\\" Otherwise, print \\"The highway system is vulnerable.\\" Input The input is given in the following format: n m u1 v1 w1 u2 v2 w2 :: um vm wm The first line gives the number of cities n (2 ≤ n ≤ 100) and the number of highways m (n-1 ≤ m ≤ 1000). Each of the next m lines provides a description of a highway with three integers: the first city u, the second city v, and the weight w (1 ≤ w ≤ 1000). Output Print \\"The highway system is resilient.\\" if the network remains connected upon the removal of any single highway. Otherwise, print \\"The highway system is vulnerable.\\" Example Input 5 6 1 2 10 1 3 20 2 3 30 3 4 40 4 5 50 3 5 60 Output The highway system is resilient. Explanation Even if any single highway is removed from the network, all cities remain connected, hence the system is resilient.","solution":"from collections import defaultdict def is_connected(graph, n): visited = [False] * n stack = [0] count = 0 visited[0] = True while stack: node = stack.pop() count += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) return count == n def is_resilient(n, edges): for u, v, w in edges: graph = defaultdict(list) for x, y, z in edges: if (x, y, z) != (u, v, w): graph[x].append(y) graph[y].append(x) if not is_connected(graph, n): return \\"The highway system is vulnerable.\\" return \\"The highway system is resilient.\\" # Example to ease unit test development def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] for i in range(m): u = int(data[2 + 3 * i]) - 1 # Adjust city index to zero-based v = int(data[3 + 3 * i]) - 1 # Adjust city index to zero-based w = int(data[4 + 3 * i]) edges.append((u, v, w)) print(is_resilient(n, edges)) # Uncomment the following lines to run the program with a sample input # if __name__ == \\"__main__\\": # main()"},{"question":"A company wants to organize a team-building activity, where employees will be divided into teams based on their performance scores. The goal is to form teams such that the difference between the highest score and the lowest score in each team is minimized. Create a program that divides the employees into teams of a specified size k, with each team being as balanced as possible in terms of scores. Input The input consists of multiple datasets. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format: n k score1 score2 ... scoren The first line contains two integers: the number of employees n (1 ≤ n ≤ 100) and the team size k (1 ≤ k ≤ n). The second line contains n space-separated integers representing the performance scores of the employees (1 ≤ scorei ≤ 1000). The number of datasets does not exceed 20. Output For each dataset, output the teams in the following format: Team 1: scoreT11 scoreT12 ... scoreT1k Team 2: scoreT21 scoreT22 ... scoreT2k : Team m: scoreTm1 scoreTm2 ... scoreTmk Teams should be numbered sequentially starting at 1. Ensure that the difference between the highest score and the lowest score in each team is minimized. Each team should have exactly k members. Output teams in the order they were created. If there are not enough members to form a complete team of size k, those members should be omitted. Example Input 6 2 10 20 30 40 50 60 9 3 70 80 90 100 110 120 130 140 150 0 Output Team 1: 10 20 Team 2: 30 40 Team 3: 50 60 Team 1: 70 80 90 Team 2: 100 110 120 Team 3: 130 140 150","solution":"def balance_teams(n, k, scores): Divides employees into teams of specified size k such that the difference between the highest and lowest score in each team is minimized. scores.sort() teams = [] for i in range(0, len(scores), k): if len(scores[i:i + k]) == k: teams.append(scores[i:i + k]) return teams def process_datasets(datasets): Processes multiple datasets to balance teams and output the result. results = [] for dataset in datasets: if dataset[0] == 0: break n, k = dataset[0], dataset[1] scores = dataset[2:] teams = balance_teams(n, k, scores) results.append(teams) return results def format_output(results): Formats the output for the balanced teams as required. output = [] for result in results: for idx, team in enumerate(result): output.append(f\\"Team {idx + 1}: \\" + \\" \\".join(map(str, team))) return output"},{"question":"You are given an array `arr` of `n` integers where each element is between `1` and `n` (inclusive). The elements in array `arr` could have duplicates. Your task is to find all the elements of `[1, n]` inclusive that do not appear in `arr`. ----- Input ----- The first line of the input contains an integer `n` (1 leq n leq 10^5), the length of the array. The second line contains `n` integers where each integer is between `1` and `n` (inclusive). ----- Output ----- Print all the integers from the range `[1, n]` that do not appear in the array. The order of the output integers does not matter. ----- Examples ----- Input 8 4 3 2 7 8 2 3 1 Output 5 6 Input 6 1 1 2 2 3 3 Output 4 5 6 ----- Note ----- In the first example, the range of numbers is from 1 to 8. The numbers 5 and 6 are missing from the input array, so the output should be `5 6`. In the second example, the range of numbers is from 1 to 6. The numbers 4, 5, and 6 are missing from the input array, so the output should be `4 5 6`.","solution":"def find_missing_numbers(n, arr): Returns the list of numbers from 1 to n that are not present in the array arr. # Create a set from 1 to n all_numbers_set = set(range(1, n + 1)) # Remove the numbers that are in arr from the set arr_set = set(arr) missing_numbers = list(all_numbers_set - arr_set) return sorted(missing_numbers) # Return sorted list for consistency"},{"question":"You are given a sequence of integers and a series of operations. Initially, the sequence is empty. Each operation can either add an element to the sequence, replace an element in the sequence, or remove an element from the sequence. After performing the desired operation, you are required to find the sum of all elements currently in the sequence. -----Input----- - The first line of input contains a single integer N (the number of operations). - Each of the next N lines describes an operation in one of the following formats: 1. \\"ADD X\\" which means add the integer X to the sequence. 2. \\"REMOVE X\\" which means remove the integer X from the sequence if it exists. 3. \\"REPLACE X Y\\" which means replace the first occurrence of X with Y in the sequence if X exists. -----Output----- For each operation, print a single line containing the current sum of the sequence after performing the operation. -----Constraints----- - 1 le N le 10^5 - -10^6 le X, Y le 10^6 -----Example Input----- 5 ADD 5 ADD 3 REMOVE 5 ADD 10 REPLACE 3 7 -----Example Output----- 5 8 3 13 17 -----Explanation----- Example case: - After the first operation, the sequence is [5], with a sum of 5. - After the second operation, the sequence is [5, 3], with a sum of 8. - After the third operation, the sequence is [3], with a sum of 3. - After the fourth operation, the sequence is [3, 10], with a sum of 13. - After the fifth operation, the sequence is [7, 10], with a sum of 17.","solution":"def process_operations(n, operations): sequence = [] current_sum = 0 results = [] for operation in operations: parts = operation.split() cmd = parts[0] if cmd == \\"ADD\\": x = int(parts[1]) sequence.append(x) current_sum += x elif cmd == \\"REMOVE\\": x = int(parts[1]) if x in sequence: sequence.remove(x) current_sum -= x elif cmd == \\"REPLACE\\": x = int(parts[1]) y = int(parts[2]) if x in sequence: index = sequence.index(x) sequence[index] = y current_sum = current_sum - x + y results.append(current_sum) return results # Example input # n = 5 # operations = [\\"ADD 5\\", \\"ADD 3\\", \\"REMOVE 5\\", \\"ADD 10\\", \\"REPLACE 3 7\\"] # print(process_operations(n, operations))"},{"question":"You are given an array of integers. You need to process several queries, where each query asks for the maximum sum of a subarray within a specified subrange of the original array. Input Format The first line contains two integers, `n` (the number of elements in the array) and `q` (the number of queries). The second line contains `n` space-separated integers representing the elements of the array. Each of the subsequent `q` lines contains two space-separated integers, `l` and `r`, defining the subrange [l, r] for the query (0-based inclusive). Constraints 1 leq n leq 10^5 1 leq q leq 10^4 -10^9 leq text{array}[i] leq 10^9 0 leq l leq r < n Output Format For each query, print the maximum sum of a subarray within the specified subrange on a new line. Sample Input 0 5 3 1 -2 3 4 -5 1 3 0 4 2 2 Sample Output 0 7 7 3 Explanation 0 We perform the following `q=3` queries: For the subrange [1, 3], the subarray [3, 4] has the maximum sum, which is 7. For the subrange [0, 4], the subarray [3, 4] has the maximum sum, which is 7. For the subrange [2, 2], the subarray [3] has the maximum sum, which is 3.","solution":"def max_sum_subarray(arr, l, r): Given an array \'arr\' and a subrange [l, r], return the maximum sum of a subarray within that subrange. max_ending_here = arr[l] max_so_far = arr[l] for i in range(l + 1, r + 1): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_queries(n, q, array, queries): Process multiple queries to find the maximum sum of subarrays within specified subranges of \'array\'. Returns a list of results for each query. results = [] for l, r in queries: results.append(max_sum_subarray(array, l, r)) return results"},{"question":"You are given two strings s1 and s2 of equal length. The task is to determine whether the strings are isomorphic to each other. Two strings s1 and s2 are isomorphic if the characters in s1 can be replaced to get s2, while preserving the order of characters. No two characters may map to the same character, but a character may map to itself. Write a function `are_isomorphic(s1, s2)` that takes in two strings s1 and s2, and returns `True` if s1 and s2 are isomorphic, and `False` otherwise. Input - Two strings s1 and s2 of equal length (1 ≤ length of s1, s2 ≤ 10000). Output - A boolean value: `True` if the strings are isomorphic, and `False` otherwise. Examples Input ``` egg add ``` Output ``` True ``` Input ``` foo bar ``` Output ``` False ``` Input ``` paper title ``` Output ``` True ``` Explanation In the first example, \'e\' can be mapped to \'a\' and \'g\' can be mapped to \'d\', so the strings are isomorphic. In the second example, there is no way to map \'f\' to \'b\', \'o\' to \'a\', and \'o\' to \'r\' without violating the one-to-one mapping rule, so the strings are not isomorphic. In the third example, \'p\' can be mapped to \'t\', \'a\' can be mapped to \'i\', \'p\' can be mapped to \'t\', \'e\' can be mapped to \'l\', and \'r\' can be mapped to \'e\', so the strings are isomorphic.","solution":"def are_isomorphic(s1, s2): Determines if two strings s1 and s2 are isomorphic. if len(s1) != len(s2): return False map_s1_to_s2 = {} map_s2_to_s1 = {} for char1, char2 in zip(s1, s2): if char1 in map_s1_to_s2: if map_s1_to_s2[char1] != char2: return False if char2 in map_s2_to_s1: if map_s2_to_s1[char2] != char1: return False map_s1_to_s2[char1] = char2 map_s2_to_s1[char2] = char1 return True"},{"question":"Given an array of integers, optimize the array such that each element is modified to be equal to the length of the longest increasing subsequence that ends at that element. An increasing subsequence consists of elements in the array that appear in an increasing order and need not be contiguous. Your task is to implement a function that takes an array and returns the optimized array. Function Description Complete the function optimizeArray that takes the following parameter: int arr[n]: an array of integers Returns int[n]: the optimized array where each element is replaced by the length of the longest increasing subsequence ending at that position. Input Format The first line of input contains a single integer n, the number of elements in the array. The second line contains n space-separated integers representing the elements of the array arr[i] (0 leq i < n). Constraints 1 leq n leq 10^5 -10^4 leq arr[i] leq 10^4 Example Input 6 10 22 9 33 21 50 Output 1 2 1 3 2 4 Explanation The longest increasing subsequence ending at position 0 (element 10) is [10], so the length is 1. The longest increasing subsequence ending at position 1 (element 22) is [10, 22], so the length is 2. The longest increasing subsequence ending at position 2 (element 9) is [9], so the length is 1. The longest increasing subsequence ending at position 3 (element 33) is [10, 22, 33], so the length is 3. The longest increasing subsequence ending at position 4 (element 21) is [10, 21], so the length is 2. The longest increasing subsequence ending at position 5 (element 50) is [10, 22, 33, 50], so the length is 4.","solution":"def optimizeArray(arr): n = len(arr) lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return lis"},{"question":"Task A restaurant is trying to optimize their meal preparation time by organizing the sequence in which dishes should be cooked. Each dish has a specific preparation time, and some dishes need to be prepared before others due to ingredient availability. Given a list of dishes, their preparation times, and dependencies, your task is to determine the minimum total time required to prepare all the dishes. Formally, each dish is represented by a unique character and a positive integer indicating its preparation time. Dependencies are given as a list of tuples where each tuple `(a, b)` means that dish `a` must be prepared before dish `b`. The goal is to calculate the minimum total time required to prepare all the dishes considering these dependencies. # Example For `dishes = [(\'A\', 3), (\'B\', 2), (\'C\', 1), (\'D\', 4)]` and `dependencies = [(\'A\', \'B\'), (\'B\', \'C\'), (\'A\', \'C\'), (\'C\', \'D\')]`, the output should be `10`. The preparation sequence would be: A (3 minutes) -> B (2 minutes) -> C (1 minute) -> D (4 minutes), totaling 10 minutes. # Input/Output - `[input]` list of tuples `dishes` A list of tuples where each tuple contains a character representing a dish and an integer representing its preparation time. Constraints: `1 ≤ len(dishes) ≤ 10`, `1 ≤ preparation time ≤ 10`. - `[input]` list of tuples `dependencies` A list of tuples where each tuple contains two characters representing a dependency between two dishes. Constraints: `0 ≤ len(dependencies) ≤ len(dishes) * (len(dishes) - 1) / 2`. - `[output]` an integer The minimum total time required to prepare all the dishes considering the dependencies.","solution":"from collections import defaultdict, deque def minimum_preparation_time(dishes, dependencies): # Build graph graph = defaultdict(list) indegree = {dish[0]: 0 for dish in dishes} preparation_time = {dish[0]: dish[1] for dish in dishes} for dep in dependencies: a, b = dep graph[a].append(b) indegree[b] += 1 # Topological sorting using Kahn\'s algorithm queue = deque([dish for dish in indegree if indegree[dish] == 0]) total_time = 0 max_times = {dish[0]: 0 for dish in dishes} while queue: dish = queue.popleft() max_times[dish] += preparation_time[dish] total_time = max(total_time, max_times[dish]) for neighbor in graph[dish]: indegree[neighbor] -= 1 max_times[neighbor] = max(max_times[neighbor], max_times[dish]) if indegree[neighbor] == 0: queue.append(neighbor) return total_time"},{"question":"Alice, an avid gardener, is working on her garden where she has planted a variety of flowers in a straight line. Each flower is represented by an integer, which corresponds to its species. Alice is particularly fond of creating bouquets, and a bouquet is defined as a contiguous subsegment of flowers where all the flowers are of the same species. Alice would like to know the maximum number of flowers in any single bouquet she can create. You are given a sequence of integers f_1, ldots, f_n, where f_i represents the species of the flower at position i. Find the length of the largest bouquet Alice can make. -----Input----- Each test consists of multiple test cases. The first line contains a single integer t (1 leq t leq 10^5) — the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n (1 leq n leq 10^5). The second line of each test case contains n integers f_1, f_2, ldots, f_n (1 leq f_i leq 10^9). It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print a single integer — the length of the largest bouquet Alice can create. -----Examples----- Input 3 5 1 2 2 3 3 4 4 4 4 4 8 1 2 3 4 5 6 7 8 Output 2 4 1 -----Note----- In the first test case, the longest bouquet Alice can create is with flower species 2 or 3, which both have a length of 2. In the second test case, all flowers are of the same species, and hence the longest bouquet is of length 4. In the third test case, each flower is of a unique species, and thus the longest bouquet is of length 1 for each flower.","solution":"def max_bouquet_length(test_cases): This function calculates the length of the longest bouquet Alice can create for each test case. Parameters: test_cases (list of list): A list where each element is a list containing species of flowers. Returns: list: A list of integers where each integer represents the length of the longest bouquet for the corresponding test case. results = [] for flowers in test_cases: max_length = 0 current_length = 1 for i in range(1, len(flowers)): if flowers[i] == flowers[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) # Final check at the end of the list results.append(max_length) return results"},{"question":"David is working on a project that involves analyzing social networks. One of his tasks is to detect communities within the network. A community in a social network is a group of individuals who are more densely connected to each other than to the rest of the network. David has decided to use the concept of \\"cliques\\" to identify potential communities. A clique is a subset of individuals in which every two distinct individuals are friends with each other. To simplify his task, David is only interested in finding all maximum cliques in the network. A maximum clique is a clique that cannot be extended by including one more adjacent individual, meaning no more members can be added to it without breaking its complete connectivity. Given the number of individuals and their friendship relations, can you help David find all maximum cliques in the social network? -----Input----- The first line contains two integers n and m (1 leq n leq 50, 0 leq m leq 300), the number of individuals in the social network and the number of friendship relations, respectively. Each individual is identified by a distinct integer from 1 to n. Each of the next m lines contains two integers p and q (1 leq p, q leq n), indicating that individual p and individual q are friends. Each friendship relation is listed exactly once in the input. -----Output----- Output the size of the largest clique found in the network, followed by the members of the largest clique. If there are multiple cliques of the same size, output any one of them. -----Examples----- Sample Input 1: 5 6 1 2 1 3 1 4 2 3 2 4 3 4 Sample Output 1: 4 1 2 3 4 Sample Input 2: 6 7 1 2 1 3 1 4 2 3 2 4 3 4 5 6 Sample Output 2: 4 1 2 3 4","solution":"import itertools def is_clique(graph, vertices): for i in range(len(vertices)): for j in range(i+1, len(vertices)): if vertices[j] not in graph[vertices[i]]: return False return True def find_maximum_cliques(n, friendships): # Create adjacency list graph = {i: [] for i in range(1, n+1)} for f1, f2 in friendships: graph[f1].append(f2) graph[f2].append(f1) max_clique = [] for size in range(n, 1, -1): for combination in itertools.combinations(range(1, n+1), size): if is_clique(graph, combination): return size, list(combination) return 1, [1] # If no cliques found, at least one person is a clique of size 1 def find_max_clique_in_network(n, m, friendships): size, clique = find_maximum_cliques(n, friendships) return size, clique"},{"question":"You are given a string S consisting only of the characters \'A\' and \'B\'. Your task is to perform at most one operation to turn the string into a palindrome. In one operation, you can change any character \'A\' to \'B\' or vice versa. INPUT The input consists of a single line containing the string S. OUTPUT Output \\"YES\\" if it\'s possible to turn the string into a palindrome with at most one operation, otherwise output \\"NO\\". CONSTRAINTS 1 ≤ |S| ≤ 10^6 SAMPLE INPUT ABABA SAMPLE OUTPUT YES Explanation: By changing the character at index 3 (1 based indexing) from \'B\' to \'A\', the string will become a palindrome \\"AAAAA\\". SAMPLE INPUT AAABB SAMPLE OUTPUT NO Explanation: It is not possible to make the string a palindrome with just one operation. Changing any single character will not be sufficient to make the string read the same forwards and backwards.","solution":"def can_be_palindrome_with_one_change(S): Returns \\"YES\\" if the string S can be transformed into a palindrome with at most one change. Otherwise, returns \\"NO\\". n = len(S) mismatches = 0 for i in range(n // 2): if S[i] != S[n - i - 1]: mismatches += 1 if mismatches > 1: return \\"NO\\" # If there are 0 or 1 mismatches, it\'s possible with at most one change return \\"YES\\" if mismatches <= 1 else \\"NO\\""},{"question":"You have been tasked with developing a simple encryption algorithm. Your job is to take an input string and transform it using the following rules: - Substitute each letter with its corresponding letter in the alphabet in reverse order. For example, \'a\' is substituted with \'z\', \'b\' with \'y\', ..., \'z\' with \'a\'. - Leave any non-letter characters unchanged. The input string will only contain printable ASCII characters. Input A single line containing the input string s, where 1 ≤ length of s ≤ 1000. Output Print the transformed string according to the given rules. Examples Input hello world! Output svool dliow! Input Code123! Output Xlwv123! Input abcXYZ Output zyxCBA","solution":"def encrypt_string(s): Encrypts the input string by substituting each letter with its corresponding letter in the reversed alphabet. Non-letter characters are left unchanged. result = [] for char in s: if \'a\' <= char <= \'z\': result.append(chr(ord(\'z\') - (ord(char) - ord(\'a\')))) elif \'A\' <= char <= \'Z\': result.append(chr(ord(\'Z\') - (ord(char) - ord(\'A\')))) else: result.append(char) return \\"\\".join(result)"},{"question":"Given an array of integers, replace every element with the greatest element on its right side, and replace the last element with -1. Example 1: Input: arr = [16, 17, 4, 3, 5, 2] Output: [17, 5, 5, 5, 2, -1] Explanation: - arr[0] = 17, because the greatest element to the right of 16 is 17. - arr[1] = 5, because the greatest element to the right of 17 is 5. - arr[2] = 5, because the greatest element to the right of 4 is 5. - arr[3] = 5, because the greatest element to the right of 3 is 5. - arr[4] = 2, because the greatest element to the right of 5 is 2. - arr[5] = -1, because there are no elements to the right of 2. Example 2: Input: arr = [4, 3, 2, 1] Output: [3, 2, 1, -1] Explanation: - arr[0] = 3, because the greatest element to the right of 4 is 3. - arr[1] = 2, because the greatest element to the right of 3 is 2. - arr[2] = 1, because the greatest element to the right of 2 is 1. - arr[3] = -1, because there are no elements to the right of 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function replaceElements() that takes the array arr[] as input parameter and returns the modified array with the greatest element to the right of each element. Expected Time Complexity: O(N), where N is the number of elements in the array. Expected Auxiliary Space: O(1). Constraints: 1 ≤ len(arr) ≤ 10^4 1 ≤ arr[i] ≤ 10^5","solution":"def replaceElements(arr): Replaces each element in the array with the greatest element to its right side and replaces the last element with -1. Args: arr (list): List of integers. Returns: list: The modified list with replaced elements. n = len(arr) if n == 0: return [] max_from_right = -1 # Traverse the array from the end for i in range(n - 1, -1, -1): # Replace current element with the max from the right new_val = max_from_right if arr[i] > max_from_right: max_from_right = arr[i] arr[i] = new_val return arr"},{"question":"Given an integer array `nums`, your task is to find the smallest positive integer that is missing from the array. The time complexity of your solution should be O(n) and it should use constant extra space. **Input:** - The first line of input contains a single integer `n` (1 leq n leq 10^6) - the number of elements in the array `nums`. - The second line contains `n` integers representing the elements of array `nums` (-10^6 leq nums[i] leq 10^6). **Output:** - Print a single integer, the smallest positive integer that is missing from the given array. **Example:** ``` Input: 5 1 2 0 -1 3 Output: 4 Input: 10 3 4 -1 1 1 1 1 1 5 6 Output: 2 ```","solution":"def first_missing_positive(nums): Given an unsorted integer array nums, return the smallest missing positive integer. n = len(nums) # We use the indices of the array itself for marking purposes # First move every positive integer <= n to its corresponding index (1-based) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # After rearranging, the first index i which does not have the number i+1 is the answer for i in range(n): if nums[i] != i + 1: return i + 1 # If all numbers are in their correct place, the missing number is n+1 return n + 1"},{"question":"Given two sorted arrays, merge them into one sorted array without using any additional data structures. Example: input: [1, 3, 5, 7], [2, 4, 6, 8] output: [1, 2, 3, 4, 5, 6, 7, 8]","solution":"def merge_sorted_arrays(arr1, arr2): Merge two sorted arrays into one sorted array without using any additional data structures. i, j = 0, 0 merged_array = [] # Traverse both arrays and append smaller element to merged_array while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append remaining elements of arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append remaining elements of arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"------Read problems statements in Mandarin chinese, Russian, and Vietnamese as well. ------ A research lab needs to distribute chemicals to different departments within their facility. There are M departments, numbered from 1 through M, and each department requires a specific quantity of chemical, represented by an integer q_i (1 leq i leq M). The total quantity needed by all departments combined is Q. Due to budget constraints, the lab must distribute the chemicals in such a way that no department receives more than U units above their required quantity q_i, and the total quantity distributed must be exactly Q. The lab has been experimenting and discovered they initially missed recording the exact extra amount of chemicals distributed to each department. The only known information is the constraint on the maximum extra quantity U, the specific requirements q of each department, and the departments combined total required quantity Q. Your task is to determine the possible quantity q_i\' distributed to each department such that no department receives more than U extra units compared to their required quantity, and the total distributed quantity is exactly Q. Return any valid distribution if there are multiple solutions. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers M and U. The second line contains M space-separated integers q_{1}, q_{2}, dots, q_{M}. The third line contains a single integer Q denoting the exact total distributed quantity of chemicals. ------ Output ------ For each test case, print a single line containing M space-separated integers representing any possible valid distribution of the quantity q\'_{1}, q\'_{2}, dots, q\'_{M}. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ M ≤ 10^5 0 ≤ U ≤ 10^9 0 ≤ q_i ≤ 10^9 for each valid i sum(q_i) ≤ Q ≤ sum(q_i) + M cdot U ----- Sample Input 1 ------ 2 3 2 1 2 3 9 4 5 0 1 0 1 3 ----- Sample Output 1 ------ 2 3 4 0 1 0 2 ----- Explanation 1 ------ Example case 1: With M = 3 departments and U = 2, the possible quantities are: - q\'_1 = q_1 + 1 = 2 - q\'_2 = q_2 + 1 = 3 - q\'_3 = q_3 + 1 = 4 Thus, the total quantity is 2 + 3 + 4 = 9. Example case 2: With M = 4 departments and U = 5, the possible quantities are: - q\'_1 = q_1 = 0 - q\'_2 = q_2 = 1 - q\'_3 = q_3 = 0 - q\'_4 = q_4 + 1 = 2 Thus, the total quantity is 0 + 1 + 0 + 2 = 3.","solution":"def distribute_chemicals(T, test_cases): results = [] for t in range(T): M, U = test_cases[t][:2] q = test_cases[t][2] Q = test_cases[t][3] distributed = q[:] total_required = sum(q) remaining_quantity = Q - total_required i = 0 while remaining_quantity > 0: add_amount = min(U, remaining_quantity) distributed[i] += add_amount remaining_quantity -= add_amount i += 1 if i >= M: i = 0 results.append(distributed) return results"},{"question":"You are given a sequence of integers and a set of operations: swap, reverse, and rotate. Your task is to transform this sequence into a target sequence using the minimum number of operations. Each operation has specific constraints: - **Swap**: Swap any two elements of the sequence. - **Reverse**: Reverse a subsequence of the sequence. - **Rotate**: Rotate the entire sequence to the right by one position. Write a function that takes in the initial sequence and the target sequence, and returns the minimum number of operations needed to transform the initial sequence into the target sequence. If it is not possible, return -1. Input: - The first line contains T, the number of test cases. - Each test case consists of two lines: the first line contains a space-separated list of integers representing the initial sequence, and the second line contains a space-separated list of integers representing the target sequence. Output: For each test case, print the minimum number of operations needed to transform the initial sequence into the target sequence, or -1 if it is not possible. Constraints: 1 ≤ T ≤ 100 2 ≤ length of sequence ≤ 100 1 ≤ sequence elements ≤ 1000 SAMPLE INPUT 2 1 2 3 4 4 3 2 1 1 2 3 4 3 4 1 2 SAMPLE OUTPUT 1 2 Explanation Test Case#1: Initial Sequence = [1, 2, 3, 4] Target Sequence = [4, 3, 2, 1] One possible operation: reverse the entire sequence. Test Case#2: Initial Sequence = [1, 2, 3, 4] Target Sequence = [3, 4, 1, 2] One possible path: Step1: Rotate the sequence to the right to get [4, 1, 2, 3] Step2: Rotate the sequence to the right to get [3, 4, 1, 2]","solution":"from collections import deque def min_operations(initial, target): Returns the minimum number of operations needed to transform the initial sequence into the target sequence, or -1 if it is not possible. initial = tuple(initial) target = tuple(target) if initial == target: return 0 def get_neighbors(seq): n = len(seq) neighbors = [] # Swap any two elements for i in range(n): for j in range(i + 1, n): new_seq = list(seq) new_seq[i], new_seq[j] = new_seq[j], new_seq[i] neighbors.append(tuple(new_seq)) # Reverse any subsequence for i in range(n): for j in range(i + 1, n + 1): new_seq = list(seq) new_seq[i:j] = reversed(new_seq[i:j]) neighbors.append(tuple(new_seq)) # Rotate entire sequence to the right by one position new_seq = deque(seq) new_seq.rotate(1) neighbors.append(tuple(new_seq)) return neighbors visited = set() queue = deque([(initial, 0)]) visited.add(initial) while queue: current, steps = queue.popleft() for neighbor in get_neighbors(current): if neighbor == target: return steps + 1 if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, steps + 1)) return -1 def transformation_operations(T, test_cases): results = [] for i in range(T): initial_seq = list(map(int, test_cases[i][0].split())) target_seq = list(map(int, test_cases[i][1].split())) results.append(min_operations(initial_seq, target_seq)) return results"},{"question":"Given a rectangular 2D matrix of integers, your task is to find the sum of the elements inside a given submatrix defined by its top-left and bottom-right coordinates. Example 1: Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] top_left = (1, 1) bottom_right = (2, 2) Output: 28 Explanation: The submatrix from (1, 1) to (2, 2) is: [ [5, 6], [8, 9] ] The sum of the elements is 5 + 6 + 8 + 9 = 28 Example 2: Input: matrix = [ [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1] ] top_left = (0, 0) bottom_right = (3, 3) Output: 16 Explanation: The submatrix from (0, 0) to (3, 3) includes all the elements of the matrix, and their sum is 16. Your Task: You don\'t need to read input or print anything. Complete the function submatrixSum() which takes the 2D integer matrix, tuple top_left, and tuple bottom_right as input parameters and returns an integer denoting the sum of elements inside the specified submatrix. Expected Time Complexity: O((bottom_right_row - top_left_row + 1) * (bottom_right_col - top_left_col + 1)) Expected Auxiliary Space: O(1) Constraints: 1 ≤ matrix dimensions ≤ 101 -1000 ≤ matrix[i][j] ≤ 1000","solution":"def submatrixSum(matrix, top_left, bottom_right): Returns the sum of the elements inside a given submatrix. :param matrix: List of lists where each sublist is a list of integers. :param top_left: Tuple containing the coordinates of the top-left corner of the submatrix. :param bottom_right: Tuple containing the coordinates of the bottom-right corner of the submatrix. :return: Integer sum of the elements inside the specified submatrix. top_row, left_col = top_left bottom_row, right_col = bottom_right submatrix_sum = 0 for i in range(top_row, bottom_row + 1): for j in range(left_col, right_col + 1): submatrix_sum += matrix[i][j] return submatrix_sum"},{"question":"Sarah, an event organizer, is arranging a series of workshops in a large conference center. Each workshop has a start time and an end time. Sarah needs to schedule these workshops in such a way that the maximum number of attendees can attend as many workshops as possible without any overlaps. Your task is to help Sarah determine the maximum number of non-overlapping workshops that can be attended by any single attendee. -----Input----- There are multiple test cases in the input data. The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. This is followed by the test cases description. The first line of each test case contains one integer n (1 leq n leq 10^5) — the number of workshops. The next n lines of each test case contain two integers s_i and e_i (0 leq s_i < e_i leq 10^9) — the start and end times of the i-th workshop. It is guaranteed that the sum of n over all test cases doesn\'t exceed 10^5. -----Output----- For each test case, print a single integer — the maximum number of non-overlapping workshops that can be attended by any single attendee. -----Examples----- Input 3 3 1 4 2 5 3 6 4 1 3 2 4 3 5 4 6 2 1 2 2 3 Output 1 2 2 -----Note----- In the first test case, the workshops overlap, so only one workshop can be attended. In the second test case, two non-overlapping workshops can be attended (e.g., 1 rightarrow 3 and 3 rightarrow 5). In the third test case, the two workshops do not overlap, so both can be attended.","solution":"def max_non_overlapping_workshops(t, cases): results = [] for i in range(t): n, intervals = cases[i] intervals.sort(key=lambda x: x[1]) count = 0 end_time = 0 for start, end in intervals: if start >= end_time: count += 1 end_time = end results.append(count) return results"},{"question":"A food delivery company wants to optimize their order dispatch system. The goal is to minimize the total delivery time by ensuring each delivery person gets an approximately equal number of orders. Additionally, the delivery times for each order can vary based on the distance. Implement a function that takes the number of delivery persons, a list of delivery times for each order, and assigns the orders to the delivery persons to minimize the maximum delivery time for each person. **Input:** - An integer `n` representing the number of delivery persons. - A list of integers `delivery_times` where each integer represents the delivery time for an order. **Output:** - A list of n lists, where each sublist contains the delivery times assigned to each delivery person. **Example:** Input: ``` 3 [5, 2, 8, 3, 7, 4] ``` Output: ``` [[5, 4], [2, 7], [8, 3]] ``` In this example, the total delivery times for each delivery person are: - Delivery person 1: 9 (i.e., 5 + 4) - Delivery person 2: 9 (i.e., 2 + 7) - Delivery person 3: 11 (i.e., 8 + 3) The aim is to distribute orders such that the maximum delivery time is minimized. In this case, rearranging the delivery times could lead to a better distribution: Revised output: ``` [[5, 4], [2, 8], [7, 3]] ``` Where the total delivery times are: - Delivery person 1: 9 (i.e., 5 + 4) - Delivery person 2: 10 (i.e., 2 + 8) - Delivery person 3: 10 (i.e., 7 + 3) **Note:** The exact distribution may vary as there could be multiple valid solutions.","solution":"from heapq import heappop, heappush def optimize_delivery(n, delivery_times): Distributes delivery times among delivery persons to minimize the maximum delivery time. Args: n (int): Number of delivery persons. delivery_times (list of int): List of delivery times for each order. Returns: list of list of int: Nested list where each sublist contains the assigned delivery times for each delivery person. # Sort delivery times in descending order delivery_times = sorted(delivery_times, reverse=True) # Initialize min-heap to keep track of the total delivery time of each delivery person delivery_persons = [(0, i) for i in range(n)] # Each delivery person starts with an empty list of delivery times assignments = [[] for _ in range(n)] for time in delivery_times: # Get the delivery person with the smallest total delivery time current_time, person = heappop(delivery_persons) # Assign the order to this delivery person assignments[person].append(time) # Update the total delivery time for this person and push back to the heap heappush(delivery_persons, (current_time + time, person)) return assignments"},{"question":"Alice enjoys playing with binary trees and has recently thought of a unique problem. Given the root of a binary tree, she wants to determine the maximum depth of the binary tree. The maximum depth is defined as the number of nodes along the longest path from the root node down to the farthest leaf node. Write a function to find the maximum depth of a binary tree. ----- Input ----- - The input is a pointer to the root of a binary tree. ----- Output ----- - The output should be an integer representing the maximum depth of the tree. ----- Examples ----- Example 1: Input: 3 / 9 20 / 15 7 Output: 3 Explanation: The maximum depth is 3. Example 2: Input: 5 / 1 4 6 Output: 3 Explanation: The maximum depth is 3. Example 3: Input: 1 Output: 1 Explanation: The maximum depth is 1. ----- Constraints ----- - The number of nodes in the tree is in the range [0, 10^4]. - The tree values are arbitrary but are unique for each node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root: TreeNode) -> int: Returns the maximum depth of the binary tree. if root is None: return 0 else: left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"A company is evaluating a new scheduling system for its employees. The system operates based on a string of characters where each character can represent one of three statuses: - \'A\' for available, - \'U\' for unavailable, and - \'M\' for meeting. Each day is represented by a string of length 24, with each character representing the status for one hour in the 24-hour period. As part of the system evaluation, the company wants to ensure that employees have a required amount of available time for meetings each day. Specifically, each employee should have at least `k` contiguous available hours (\'A\') within any given day. Your task is to write a function that verifies if a given day\'s schedule meets this requirement. -----Input----- The input contains one or more test cases. The first line contains one integer `t` (`1 <= t <= 10^4`) — the number of test cases. Each test case is written on a separate line containing an integer `k` (`1 <= k <= 24`) followed by a string `s` of length 24 consisting of characters \'A\', \'U\', and \'M\' describing employee availability for one day. -----Output----- For each test case, print \\"YES\\" if the schedule meets the requirement of having at least `k` contiguous \'A\' characters. Otherwise, print \\"NO\\". -----Example----- Input 4 3 AAAAAAAAAAAAAAAAAAAAAAAA 5 UUUUUMMMMMMUUUUUMMMMMMAAA 2 UUUUUMMMMMMUUAAAAUUMMMMMM 4 AAAAAUMMMMMUMMMMMUMMMMMMM Output YES NO YES YES","solution":"def check_schedules(t, test_cases): results = [] for i in range(t): k, schedule = test_cases[i] target = \'A\' * k if target in schedule: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"*PROJECT ALLOCATOR* You are given the responsibility to allocate resources for a project. You need to determine the maximum number of resources that can be evenly distributed among all sub-teams within the project. Your task is to create a function that takes the following inputs: Input 1: Resource count (integer) - Total number of resources available. Input 2: Team count (integer) - Number of sub-teams in the project. Input 3: Minimum resources per team (integer) - The minimum number of resources that each sub-team should get. The function should return a list where each element represents the number of resources allocated to each sub-team if the resources can be evenly distributed as per the given constraints. If it is not possible to meet the requirements, return \\"Insufficient resources!\\". Example: ```python allocate_resources(100, 5, 15) == [20, 20, 20, 20, 20] allocate_resources(80, 4, 25) == \\"Insufficient resources!\\" ``` **Constraints:** - All inputs will be positive integers. - The number of sub-teams will be less than or equal to the half of the total resources count. - The minimum resources per team will always be a positive number.","solution":"def allocate_resources(total_resources, sub_teams, min_resources_per_team): Allocates resources to sub-teams if possible, following minimum requirement per team. Parameters: total_resources (int): Total number of resources available. sub_teams (int) : Number of sub-teams in project. min_resources_per_team (int) : Minimum number of resources that each sub-team should get. Returns: list : List of resources allocated to each sub-team, or \\"Insufficient resources!\\" if allocation is not possible. max_possible_per_team = total_resources // sub_teams if max_possible_per_team < min_resources_per_team: return \\"Insufficient resources!\\" resources_per_team = total_resources // sub_teams allocation = [resources_per_team] * sub_teams return allocation"},{"question":"In a fantasy game, there are n different types of magical stones, each with a unique magical power represented by a positive integer. A wizard can merge any two different types of stones to create a new type of stone whose magical power is the absolute difference between the powers of the two stones. Your task is to determine the minimum number of distinct types of stones the wizard can have after performing any number of such merge operations. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100 000) — the number of different types of magical stones initially present. The second line contains n distinct integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — the magical powers of the stones. -----Output----- Print a single integer — the minimum number of distinct types of stones that can remain after performing any number of merge operations. -----Examples----- Input 3 5 9 12 Output 1 Input 4 8 16 24 32 Output 1 Input 5 1 3 5 7 9 Output 1 -----Note----- In the first sample, the wizard can perform the following operations: - Merge stones with powers 9 and 12 to create a stone with power 3. - Merge stones with powers 5 and 3 to create a stone with power 2. - Merge stones with powers 3 and 2 to create a stone with power 1. - Merge stones with powers 1 and 2 to create another stone with power 1. Eventually, the wizard will end up with stones all having the same power of 1.","solution":"def min_distinct_stones(n, powers): Determines the minimum number of distinct types of stones after performing any number of merge operations. Parameters: n (int): the number of different types of magical stones initially present. powers (list of int): the magical powers of the stones. Returns: int: the minimum number of distinct types of stones. if n == 1: return 1 gcd = powers[0] for power in powers[1:]: gcd = find_gcd(gcd, power) return min(1, gcd) def find_gcd(a, b): Computes the greatest common divisor (GCD) of two integers using Euclid\'s algorithm. Parameters: a (int): The first integer. b (int): The second integer. Returns: int: The GCD of a and b. while b: a, b = b, a % b return a"},{"question":"Write a function that determines if a string has all unique characters. Assume that the string only contains lowercase alphabetic characters. Implement the function without using any additional data structures. For example, the string \\"algorithm\\" has all unique characters and should return True, while the string \\"programming\\" has repeated characters and should return False.","solution":"def has_all_unique_characters(s): Determines if a string has all unique characters. Assumes the string only contains lowercase alphabetic characters. Args: s (str): The input string. Returns: bool: True if all characters in the string are unique, False otherwise. for i in range(len(s)): for j in range(i + 1, len(s)): if s[i] == s[j]: return False return True"},{"question":"You are given a string S of lowercase English letters. Chef wants to process the string by removing some characters such that the resulting string does not contain any two identical consecutive characters. Chef needs your help in finding the minimum number of characters that need to be removed to achieve this goal. ------ Input Format ------ - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains a string S. ------ Output Format ------ For each test case output a single line containing the minimum number of characters that need to be removed from the string S to ensure that no two identical consecutive characters remain. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ |S| ≤ 10^5 - Sum of lengths of all strings over all test cases does not exceed 10^6 ----- Sample Input 1 ------ 3 abbab aabb abcde ----- Sample Output 1 ------ 1 2 0 ----- Explanation 1 ------ Test case 1: Chef can remove the second \'b\' to get \\"abab\\". No two identical consecutive characters remain in this string. Test case 2: Chef can remove the first \'a\' and the first \'b\' to get \\"ab\\". No two identical consecutive characters remain in this string. Test case 3: The string \\"abcde\\" already has no two identical consecutive characters, so no removal is needed.","solution":"def min_removals_to_avoid_consecutive_chars(S): Returns the minimum number of characters that need to be removed to ensure that no two identical consecutive characters remain in the string S. removals = 0 previous_char = \'\' for char in S: if char == previous_char: removals += 1 else: previous_char = char return removals def process_test_cases(T, test_cases): results = [] for i in range(T): results.append(min_removals_to_avoid_consecutive_chars(test_cases[i])) return results"},{"question":"Monica is organizing a cooking competition in which participants are required to cook using a specific number of ingredients. Each participant can use a given initial number of ingredients and after cooking a dish, they use a specific amount of ingredients and potentially gain more ingredients from the judges’ feedback. Monica wants to maximize the number of dishes a participant can cook with the ingredients they have, considering they can cook the dishes in any order and each dish can only be cooked once. Input - The first line contains an integer `T` denoting the number of test cases. - For each test case: - The first line contains two integers `I` and `D` denoting the initial number of ingredients and the number of dishes respectively. - The next `D` lines contain two integers `ci` and `gi` denoting the number of ingredients used to cook dish `i` and the number of ingredients gained after cooking dish `i`. Output For each test case, output the maximum number of dishes a participant can cook. Input Constraints - 1 ≤ T ≤ 10 - 1 ≤ I ≤ 1000 - 1 ≤ D ≤ 100 - 0 ≤ gi < ci ≤ 1000 SAMPLE INPUT 2 10 2 8 0 4 2 5 1 10 0 SAMPLE OUTPUT 2 0","solution":"def max_dishes(T, test_cases): results = [] for i in range(T): initial_ingredients, number_of_dishes = test_cases[i][0] dishes = test_cases[i][1] dishes.sort(key=lambda x: x[0] - x[1]) count = 0 ingredients_left = initial_ingredients for ingredients_used, ingredients_gained in dishes: if ingredients_left >= ingredients_used: count += 1 ingredients_left -= (ingredients_used - ingredients_gained) results.append(count) return results # Example input parsing and function call T = 2 test_cases = [ [(10, 2), [(8, 0), (4, 2)]], [(5, 1), [(10, 0)]] ] print(max_dishes(T, test_cases)) # Expected output: [2, 0]"},{"question":"LaraLara loves reading books, and she has a peculiar way of categorizing them. She arranges all her books in a single row on a shelf, and assigns a unique number to each book from 1 to NN, where NN is the total number of books. However, LaraLara wants to know if she can partition her books into two contiguous parts such that the sum of book numbers in both parts is the same. For example, if LaraLara has bookshelf [1, 2, 3, 3], she can partition it as [1, 2, 3] and [3], both having the same sum 6. Write a program that helps LaraLara determine if such a partition is possible. -----Input:----- - First line will contain TT, number of testcases. Then the testcases follow. - Each testcase contains a single integer NN, the total number of books. -----Output:----- For each testcase, output \\"YES\\" if the partition is possible, otherwise output \\"NO\\". -----Constraints----- - 1≤T≤10001 leq T leq 1000 - 1≤N≤1091 leq N leq 10^9 -----Sample Input:----- 2 4 5 -----Sample Output:----- YES NO","solution":"def can_partition_books(N): Determines if a list of books numbered from 1 to N can be split into two parts with equal sum. return (N * (N + 1)) % 4 == 0 def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) results = [] for i in range(1, T + 1): N = int(data[i]) if can_partition_books(N): results.append(\\"YES\\") else: results.append(\\"NO\\") for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"We have an undirected graph with N nodes and M edges. Each node has a value assigned to it, represented by the array V, where V[i] is the value of the i-th node. Each edge connects two nodes and has a weight associated with it. These edges are described by three arrays A, B, and W, where an edge connects the node A[i] and the node B[i] with a weight of W[i]. You need to determine the maximum possible sum of values of all nodes in a connected subgraph, with the condition that the sum of the weights of edges in this subgraph does not exceed K. -----Constraints----- - 1 leq N leq 100 - 1 leq M leq 1,000 - 1 leq V[i] leq 10^4 - 1 leq W[i] leq 10^4 - 1 leq K leq 10^6 - 1 leq A[i], B[i] leq N -----Input----- Input is given from Standard Input in the following format: N M K V[1] V[2] ... V[N] A[1] B[1] W[1] : A[M] B[M] W[M] -----Output----- Print the maximum possible sum of values of all nodes in a connected subgraph with the condition that the sum of the weights of edges in this subgraph does not exceed K. -----Sample Input----- 4 4 10 1 2 3 4 1 2 3 2 3 4 3 4 2 4 1 5 -----Sample Output----- 10 - One possible subgraph is nodes {2, 3, 4}, connected by edges {(2, 3), (3, 4)} with a total weight of 6. - The value sum of this subgraph is V[2] + V[3] + V[4] = 2 + 3 + 4 = 9. - Another possible subgraph is nodes {1, 2, 3}, connected by edges {(1, 2), (2, 3)} with a total weight of 7. - The value sum of this subgraph is V[1] + V[2] + V[3] = 1 + 2 + 3 = 6. - The optimal subgraph is nodes {1, 3, 4}, connected by edges {(3, 4), (4,1)} with a total weight of 7. - The value sum of this subgraph is V[1] + V[3] + V[4] = 1 + 3 + 4 = 8. Thus, the maximum possible sum is 10.","solution":"import heapq from collections import defaultdict def max_sum_subgraph(N, M, K, V, edges): def prim(): total_value = 0 total_weight = 0 edge_counter = 0 visited = [False] * N min_heap = [(0, 0)] while min_heap and total_weight <= K: w, u = heapq.heappop(min_heap) if visited[u]: continue visited[u] = True total_value += V[u] total_weight += w edge_counter += 1 for wt, v in graph[u]: if not visited[v]: heapq.heappush(min_heap, (wt, v)) return total_value if edge_counter == N else -1 graph = defaultdict(list) for a, b, w in edges: graph[a-1].append((w, b-1)) graph[b-1].append((w, a-1)) result = prim() return result if result != -1 else 0 def parse_input(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) M = int(data[1]) K = int(data[2]) V = list(map(int, data[3:N+3])) edges = [] index = N + 3 for _ in range(M): A = int(data[index]) B = int(data[index + 1]) W = int(data[index + 2]) edges.append((A, B, W)) index += 3 return N, M, K, V, edges if __name__ == \\"__main__\\": N, M, K, V, edges = parse_input() print(max_sum_subgraph(N, M, K, V, edges))"},{"question":"Bimal is fascinated by combinatorial puzzles. During one of his club\'s technical meetings, he stumbled upon a problem involving permutations and inversions, and now he\'s eager to solve it. An inversion in an array is a pair of indices (i, j) such that i < j and array[i] > array[j]. Bimal wondered how many arrays of length N (containing numbers from 1 to N) exist that have exactly K inversions. Help Bimal by writing code that will calculate this number for given N and K. Input: The first line contains T, the number of test cases. The next T lines contain two integers each, N and K. Output: For each test case, print the number of different arrays of length N that have exactly K inversions. Since the answer can be very large, print it modulo 10^9 + 7. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ K ≤ (N * (N - 1)) / 2 SAMPLE INPUT 2 3 2 4 3 SAMPLE OUTPUT 2 6","solution":"MOD = 10**9 + 7 def count_arrays_with_k_inversions(N, K): dp = [[0 for _ in range(K+1)] for _ in range(N+1)] dp[0][0] = 1 for n in range(1, N + 1): for k in range(K + 1): dp[n][k] = dp[n-1][k] if k > 0: dp[n][k] += dp[n][k-1] if k >= n: dp[n][k] -= dp[n-1][k-n] dp[n][k] %= MOD return dp[N][K] def solve(test_cases): results = [] for n, k in test_cases: results.append(count_arrays_with_k_inversions(n, k)) return results def main(inputs): T = int(inputs[0]) test_cases = [tuple(map(int, inputs[i].split())) for i in range(1, T + 1)] return solve(test_cases)"},{"question":"You are given a binary matrix with dimensions N x M. You need to perform Q queries on this matrix. Each query can be of two types: 1. **Switch row i**: Flip all the values in row `i` of the matrix, that is, change all 0s to 1s and all 1s to 0s. 2. **Count ones in row i**: Return the number of 1s in row `i`. Your task is to implement functions that handle these queries and output the results for all \\"Count ones in row i\\" queries. Constraints * 1 ≤ N, M ≤ 1000 * 1 ≤ Q ≤ 1000 * Each query is guaranteed to be either \\"Switch row i\\" or \\"Count ones in row i\\". Input Input is given from Standard Input in the following format: ``` N M matrix (N lines of M space-separated integers, each being either 0 or 1) Q queries (Q lines, each being either \\"Switch row i\\" or \\"Count ones in row i\\") ``` Output Output the result of each \\"Count ones in row i\\" query in the order they are made. Example Input ``` 3 3 1 0 1 0 1 0 1 1 1 4 Count ones in row 1 Switch row 2 Count ones in row 2 Switch row 3 Count ones in row 3 ``` Output ``` 2 2 0 ``` Explanation - Initially, row 1 has values [1, 0, 1], so it has 2 ones. - Row 2 is switched from [0, 1, 0] to [1, 0, 1]. - After switching, row 2 has 2 ones. - Row 3 is switched from [1, 1, 1] to [0, 0, 0]. - After switching, row 3 has 0 ones.","solution":"def switch_row(matrix, row): Switch all the values (flip 0s to 1s and 1s to 0s) in the specified row of the matrix. matrix[row] = [1 - x for x in matrix[row]] def count_ones_in_row(matrix, row): Count the number of 1s in the specified row of the matrix. return sum(matrix[row]) def process_queries(matrix, queries): Process the given list of queries on the matrix and return the results for the \\"Count ones in row i\\" queries. results = [] for query in queries: parts = query.split() operation = parts[0] row = int(parts[-1]) - 1 # convert to 0-based index if operation == \\"Switch\\": switch_row(matrix, row) elif operation == \\"Count\\": results.append(count_ones_in_row(matrix, row)) return results"},{"question":"Write a function that takes a string s consisting of words and spaces, and returns the length of the last word in the string. A word is defined as a maximal substring consisting of non-space characters only. Example 1: Input: s = \\"Hello World\\" Output: 5 Explanation: The last word is \\"World\\" with length 5. Example 2: Input: s = \\" fly me to the moon \\" Output: 4 Explanation: The last word is \\"moon\\" with length 4. Example 3: Input: s = \\"luffy is still joyboy\\" Output: 6 Explanation: The last word is \\"joyboy\\" with length 6. Constraints: - 1 <= s.length <= 10^4 - s consists of only English letters and spaces \' \'.","solution":"def length_of_last_word(s: str) -> int: Returns the length of the last word in the string `s`. A word is defined as a maximal substring consisting of non-space characters only. # Strip trailing spaces and split the string into words words = s.strip().split() # Return the length of the last word return len(words[-1]) if words else 0"},{"question":"Tom is preparing for a marathon and wants to calculate the total distance he runs based on a planned running schedule. He runs for n days, and each day he has a specific target distance to run. Additionally, to add variety to his training, he moves to different locations, each with a certain elevation gain or loss, expressed in meters. He wants to ensure that by the end of the n days, his total distance covered meets his goals and that his elevation change is non-negative. Given the distances he plans to run each day and the elevation changes in each location, calculate the total distance he will run and check if his total elevation change is non-negative. Write a function that takes two lists as inputs: `distances` and `elevations`, both of length n. The `distances` list contains n integers where each integer represents the distance Tom plans to run on that day. The `elevations` list contains n integers where each integer represents the elevation change on that day in meters. Your function should return a tuple containing two elements: the total distance run and whether the total elevation change is non-negative (True if non-negative, False otherwise). ------Input------ - An integer n (1 ≤ n ≤ 100) — the number of days Tom plans to run. - A list of n integers `distances` (1 ≤ distances[i] ≤ 50) — the distance Tom plans to run on the i-th day. - A list of n integers `elevations` (-50 ≤ elevations[i] ≤ 50) — the elevation change on the i-th day. ------Output------ Output a tuple (total_distance, non_negative_elevation), where total_distance is an integer representing the total distance Tom runs over n days, and non_negative_elevation is a boolean indicating whether the total elevation change is non-negative. ------Examples------ Input: 5 [10, 20, 15, 25, 30] [10, -5, 20, -10, 5] Output: (100, True) Input: 3 [5, 10, 15] [5, -20, 10] Output: (30, False) Input: 4 [8, 16, 24, 8] [-5, -5, -5, 15] Output: (56, True) ------Note------ In the first example, Tom plans to run a total of 100 kilometers. The total elevation change is 10 - 5 + 20 - 10 + 5 = 20 meters, which is non-negative. Therefore, the function returns (100, True). In the second example, Tom runs a total distance of 30 kilometers. The total elevation change is 5 - 20 + 10 = -5 meters, which is negative. The function returns (30, False). In the third example, though there are some negative elevation days, the total elevation change is -5 - 5 - 5 + 15 = 0 meters, which is non-negative. Hence, the function returns (56, True).","solution":"def calculate_running_stats(distances, elevations): Calculate the total distance run and check if the total elevation change is non-negative. Args: distances (list of int): The distance Tom plans to run each day. elevations (list of int): The elevation change for each day. Returns: tuple: A tuple containing the total distance run and a boolean indicating if the total elevation change is non-negative. total_distance = sum(distances) total_elevation = sum(elevations) return total_distance, total_elevation >= 0 # Example usage: # distances = [10, 20, 15, 25, 30] # elevations = [10, -5, 20, -10, 5] # print(calculate_running_stats(distances, elevations)) # (100, True)"},{"question":"Given an array of integers and a target sum, determine if there exists two distinct elements in the array that add up to the target sum. If such a pair exists, print \\"YES\\", otherwise print \\"NO\\". Constraints * 2 ≤ array length ≤ 105 * -109 ≤ array elements ≤ 109 * -109 ≤ target sum ≤ 109 Input First line: an integer n (the size of the array) Second line: n space-separated integers (the elements of the array) Third line: an integer k (the target sum) Output Print \\"YES\\" if there exist two distinct elements in the array such that their sum is equal to the target sum, otherwise print \\"NO\\". Examples Input 5 1 2 3 4 5 9 Output YES Input 5 1 2 3 4 5 10 Output NO","solution":"def has_pair_with_sum(arr, target_sum): seen = set() for num in arr: complement = target_sum - num if complement in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Lucas is fascinated by numbers and their properties. Recently, he learned about digit sums and is particularly interested in finding numbers with special digit sum properties. For any positive integer ( x ), its digit sum is defined as the sum of all its digits. For example, the digit sum of 123 is ( 1 + 2 + 3 = 6 ). Lucas came up with an interesting problem: Given two positive integers ( L ) and ( R ), find the number with the maximum digit sum within this range. If there are multiple such numbers, return the smallest one among them. Your task is to help Lucas by writing a program that solves this problem. -----Input----- The input consists of a single line containing two integers ( L ) and ( R ) ( (1 leq L leq R leq 10^9) ). -----Output----- Output a single line containing the number within the range ([L, R]) with the maximum digit sum. If there are multiple numbers with the same maximum digit sum, output the smallest one. -----Examples----- Sample Input 1: 10 20 Sample Output 1: 19 Sample Input 2: 1 100 Sample Output 2: 99","solution":"def digit_sum(x): Returns the sum of the digits of the number x. return sum(int(digit) for digit in str(x)) def max_digit_sum(L, R): Returns the number within the range [L, R] with the maximum digit sum. If multiple numbers have the same digit sum, returns the smallest one. max_sum = -1 max_number = None for number in range(L, R + 1): current_sum = digit_sum(number) if current_sum > max_sum or (current_sum == max_sum and (max_number is None or number < max_number)): max_sum = current_sum max_number = number return max_number"},{"question":"You are given a grid where some cells are blocked and others are open. Your task is to find the shortest path from the top-left cell to the bottom-right cell, moving only up, down, left, or right. If no path exists, return -1. # Input - An integer `N` representing the number of rows in the grid. - An integer `M` representing the number of columns in the grid. - A two-dimensional list `grid` of size `N x M` where `grid[i][j]` is `0` if the cell is open and `1` if the cell is blocked. # Output - An integer representing the length of the shortest path from the top-left cell `[0][0]` to the bottom-right cell `[N-1][M-1]`. If no such path exists, return `-1`. # Example ```python def shortest_path(N, M, grid): # Implement your function here pass # Example 1 grid1 = [ [0, 0, 0], [1, 1, 0], [1, 0, 0] ] print(shortest_path(3, 3, grid1)) # Output: 4 # Example 2 grid2 = [ [0, 1, 0], [1, 1, 0], [1, 0, 0] ] print(shortest_path(3, 3, grid2)) # Output: -1 ``` # Notes - The starting point is always `grid[0][0]` and the destination is `grid[N-1][M-1]`. - If the starting or ending point is blocked, return `-1`. - Assume `N` and `M` are positive integers. Task: Write function `shortest_path(N, M, grid)` to find the shortest path length or return `-1` if no path exists. # Hints: - Consider using Breadth-First Search (BFS) for this problem, as it is well-suited for finding the shortest path in an unweighted grid.","solution":"from collections import deque def shortest_path(N, M, grid): Find the shortest path from the top-left cell to the bottom-right cell in a grid. if grid[0][0] == 1 or grid[N-1][M-1] == 1: return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] visited = [[False] * M for _ in range(N)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True while queue: row, col, dist = queue.popleft() if row == N-1 and col == M-1: return dist for dr, dc in directions: r, c = row + dr, col + dc if 0 <= r < N and 0 <= c < M and not visited[r][c] and grid[r][c] == 0: visited[r][c] = True queue.append((r, c, dist + 1)) return -1"},{"question":"Mike is working on a problem involving composite numbers. A composite number is a positive integer greater than 1 that is not prime. In other words, it has at least one divisor other than 1 and itself. Mike has an array of integers and needs to find the longest contiguous subarray where each number is a composite number. Given an array of integers, your task is to determine the length of the longest contiguous subarray of composite numbers. -----Input----- The first line contains a single integer n (1 le n le 100) — the length of the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 100) — the elements of the array a. -----Output----- Print a single integer — the length of the longest contiguous subarray of composite numbers. If no such subarray exists, print 0. -----Examples----- Input 6 4 6 8 7 9 10 Output 3 Input 5 17 19 23 29 31 Output 0 Input 8 6 10 15 21 14 22 33 35 Output 8","solution":"def is_composite(x): Determine if x is a composite number. if x <= 1: return False for i in range(2, int(x**0.5) + 1): if x % i == 0: return True return False def longest_composite_subarray(arr): Find the length of the longest contiguous subarray consisting of only composite numbers. max_length = 0 current_length = 0 for num in arr: if is_composite(num): current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length # Example usage # print(longest_composite_subarray([4, 6, 8, 7, 9, 10])) # Output: 3 # print(longest_composite_subarray([17, 19, 23, 29, 31])) # Output: 0 # print(longest_composite_subarray([6, 10, 15, 21, 14, 22, 33, 35])) # Output: 8"},{"question":"```Write a function called `filter_even` that takes a list of integers and returns a new list containing only the even numbers from the original list.```","solution":"def filter_even(numbers): Returns a list of only the even numbers from the given list of integers. Args: numbers (list of int): A list of integers. Returns: list of int: A list of even integers. return [num for num in numbers if num % 2 == 0]"},{"question":"You need to create a function named `findLongestSubstring`, which takes a `string` and returns the longest substring that contains only unique characters. The function should implement the following requirements: - Iterate through the given string to identify substrings where no character repeats. - Return the longest such substring. - If multiple substrings with the same maximum length exist, return the first one encountered. Example: `input`: \\"abcabcbb\\" `output`: \\"abc\\" Explanation: The answer is \\"abc\\", with the length of 3. The substring \\"bca\\" is also of length 3 but \\"abc\\" is encountered first. Additional test case: `input`: \\"bbbbb\\" `output`: \\"b\\" Explanation: The answer is \\"b\\", with the length of 1.","solution":"def findLongestSubstring(s): Returns the longest substring with all unique characters. max_length = 0 start = 0 longest_substring = \\"\\" seen_chars = {} for end in range(len(s)): if s[end] in seen_chars: start = max(start, seen_chars[s[end]] + 1) seen_chars[s[end]] = end current_length = end - start + 1 if current_length > max_length: max_length = current_length longest_substring = s[start:end+1] return longest_substring"},{"question":"Write a function ``is_palindrome_permutation(s)`` that determines if any permutation of the specified string `s` could form a palindrome. To solve this problem, you must consider the following: 1. A palindrome is a string that reads the same forward and backward. 2. Ignore spaces and case differences during analysis. 3. The function should return `True` if any permutation of the input string can form a palindrome, and `False` otherwise. For example: - The string \\"Tact Coa\\" could be rearranged to \\"taco cat\\", \\"atco cta\\", etc., which are all palindromes. - The string \\"Hello\\" cannot be rearranged to form a palindrome. The function signature should be: ```python def is_palindrome_permutation(s: str) -> bool: pass ``` # Examples: ```python is_palindrome_permutation(\\"Tact Coa\\") # return True (Permutation can be \\"taco cat\\") is_palindrome_permutation(\\"Hello\\") # return False (No permutation can form a palindrome) is_palindrome_permutation(\\"A man a plan a canal Panama\\") # return True (Permutation can be \\"a man a plan a canal panama\\") is_palindrome_permutation(\\"racecar\\") # return True (The input is already a palindrome) is_palindrome_permutation(\\"abcde\\") # return False (No permutation can form a palindrome) ```","solution":"def is_palindrome_permutation(s: str) -> bool: Determines if any permutation of the specified string s could form a palindrome. :param s: Input string :return: True if any permutation of the input string can form a palindrome, False otherwise # Normalize the string: ignore spaces and case differences s = \'\'.join(s.lower().split()) # Count the frequency of each character char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Check the frequency counts odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: return False return True"},{"question":"You have a tree with `n` nodes rooted at node 1. Each node has a value associated with it, and you need to perform a specific query on this tree: calculate the sum of the values of nodes in the subtree rooted at a given node `u`. There are `m` queries given, and each query consists of a single integer `u` representing the root of the subtree you need to sum values for. Write a program to process these queries efficiently. -----Input----- The first line contains the number of nodes `n` and the number of queries `m` (1 leq n, m leq 100,000). The second line contains `n` integers where the `i`-th integer is the value of node `i` (1 leq value of each node leq 10^4). The following `n-1` lines each contain two integers `a` and `b`, meaning there is an edge between nodes `a` and `b. The next `m` lines contain a single integer `u (1 leq u leq n). -----Output----- For each query, output a single integer which is the sum of the values of all nodes in the subtree rooted at node `u. -----Example----- Input 5 3 1 2 3 4 5 1 2 1 3 2 4 2 5 2 3 1 Output 11 3 15 -----Note----- In the example, the given tree structure and node values are as follows: ``` 1(1) / 2(2) 3(3) / 4(4) 5(5) ``` - For the first query, the subtree rooted at node `2` contains nodes `[2, 4, 5]` with values `[2, 4, 5]`, thus the sum is `11`. - For the second query, the subtree rooted at node `3` contains node `3` with the value `3`. - For the third query, the subtree rooted at node `1` contains all nodes `[1, 2, 3, 4, 5]` with values `[1, 2, 3, 4, 5]`, hence the sum is `15`.","solution":"def subtree_sums(n, values, edges, queries): from collections import defaultdict, deque # Create the adjacency list for the tree tree = defaultdict(list) for a, b in edges: tree[a].append(b) tree[b].append(a) # Result array to store the sum of subtree values for each node subtree_sum = [0] * (n + 1) visited = [False] * (n + 1) # Function to calculate subtree sums using DFS def dfs(node): visited[node] = True current_sum = values[node - 1] # convert 1-index to 0-index for neighbor in tree[node]: if not visited[neighbor]: current_sum += dfs(neighbor) subtree_sum[node] = current_sum return current_sum # Compute the subtree sums starting from root node 1 dfs(1) # Process each query, converting results to required format result = [subtree_sum[u] for u in queries] return result"},{"question":"Palindrome Permutation Determine whether any permutation of the given string can form a palindrome. Task Write a function to check if any permutation of a given string can be rearranged to form a palindrome. A palindrome is a word that reads the same forward and backward. The format: A function receiving a single string as an argument and returning a boolean value. ``function canFormPalindrome(str){ return true || false }`` Examples canFormPalindrome(\\"civic\\") --> true The word \\"civic\\" is already a palindrome. ---------------------------------------------------------- canFormPalindrome(\\"ivicc\\") --> true One of the permutations \\"civic\\" is a palindrome. -------------------------------------------------------------------- canFormPalindrome(\\"hello\\") --> false None of the permutations of the word \\"hello\\" forms a palindrome. -------------------------------------------------------------------- canFormPalindrome(\\"aabb\\") --> true One of the permutations \\"abba\\" is a palindrome. -------------------------------------------------------------------- canFormPalindrome(\\"cara\\") --> false No permutation of \\"cara\\" forms a palindrome. Note: testing will _not_ be case-sensitive.","solution":"def canFormPalindrome(s): Determines whether any permutation of the given string can form a palindrome. Parameters: s (str): The input string Returns: bool: True if a permutation of the string can form a palindrome, False otherwise. # Normalizing input to lowercase to ensure case insensitivity s = s.lower() char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Check for the number of characters with odd counts odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # For a string to be able to form a palindrome, # there must be at most one character with an odd count return odd_count <= 1"},{"question":"You are given a selection of N words and a large text document. You need to determine how many times each of the N words appears exactly in the given text. For simplicity, assume all words in the text are separated by spaces, and punctuation marks are not included. -----Input----- Input starts with a single integer N indicating the number of words. Then the next N lines each contain one word, each word will contain only lowercase alphabets. This is followed by a paragraph of text spanning several lines until end of file, consisting of lowercase alphabets and spaces, representing the document. -----Output----- Output N integers each in a new line, where the i-th integer represents the number of occurrences of the i-th word in the text. -----Limits----- - 1 leq N leq 100 - The length of each word lies between 1 and 100 - The total number of words in the document will not exceed 10^6 -----Examples----- Sample Input: 3 hello world lorem hello world this is a hello world example of lorem ipsum text Sample Output: 3 3 1","solution":"def count_word_occurrences(N, words, text): Counts the number of occurrences for each word in the text. Args: N : int : The number of words words : List[str] : List of words to be counted text : str : The document text Returns: List[int] : List of integers where each integer represents the count of occurrences of the corresponding word in the list \'words\' word_count = {word: 0 for word in words} text_words = text.split() for word in text_words: if word in word_count: word_count[word] += 1 result = [word_count[word] for word in words] return result"},{"question":"You are tasked with implementing a function that determines if it is possible to partition an array into two subsets such that the sum of the elements in both subsets is equal. Given an array of integers, determine whether you can split the array into two subsets such that the sum of the elements in each subset is the same. -----Input----- - The input will consist of a single integer array `arr` where ( 1 leq arr.length leq 200 ), and each element will be an integer ( 0 leq arr[i] leq 100 ). -----Output----- - Output \\"YES\\" if it is possible to split the array into two subsets with equal sums, or \\"NO\\" otherwise. -----Examples----- Sample Input: ``` [1, 5, 11, 5] ``` Sample Output: ``` YES ``` Sample Input: ``` [1, 2, 3, 5] ``` Sample Output: ``` NO ``` Explanation: In the first example, the array can be partitioned into `[1, 5, 5]` and `[11]` both with the sum of 11. In the second example, no partition exists that can make two subsets with the same sum.","solution":"def can_partition(arr): Determine if the array can be partitioned into two subsets with equal sum. Args: arr (list): The list of integers to partition. Returns: str: \\"YES\\" if the partition is possible, \\"NO\\" otherwise. total_sum = sum(arr) # If the total sum is odd, it\'s not possible to partition into equal subsets if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(arr) # DP array to store if a sum is possible with the subset of given array dp = [False] * (target + 1) dp[0] = True for num in arr: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"During the quarantine, Chef was practicing some programming challenges. He was particularly interested in combinations at the moment. Chef wants to write a function that finds all the combinations of a given list and sums the products of the numbers in those combinations to deepen his mathematical skills. Given a list of N integers, the task is to generate all possible combinations of length K from this list. For each combination, compute the product of that combination and then find the sum of all these products. -----Input:----- - The first line of input contains an integer T, the number of test cases. - The first line of each test case contains two integers N and K. - The second line contains N space-separated integers representing the list of numbers. -----Output:----- For each test case, output the sum of the products of all combinations of length K on a new line. -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 15 - 1 leq K leq N - 1 leq a_i leq 100 (1 leq i leq N) -----Sample Input:----- 2 4 2 1 2 3 4 3 3 5 6 7 -----Sample Output:----- 35 210 -----Explanation:----- For the first test case: The possible combinations of length 2 are: {1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}. The products for these combinations are: 1*2 = 2, 1*3 = 3, 1*4 = 4, 2*3 = 6, 2*4 = 8, 3*4 = 12. The sum of these products is: 2 + 3 + 4 + 6 + 8 + 12 = 35. For the second test case: The only combination of length 3 is: {5, 6, 7}. The product for this combination is: 5*6*7 = 210. The sum of this product is: 210.","solution":"from itertools import combinations from functools import reduce from operator import mul def sum_of_products(test_cases): For each test case, calculate the sum of the products of all combinations of length K from the given list of integers. :param test_cases: List of tuples, each containing (N, K, list of integers) :return: List of sums of products for each test case results = [] for case in test_cases: N, K, numbers = case comb = combinations(numbers, K) total_sum = sum(reduce(mul, combo) for combo in comb) results.append(total_sum) return results"},{"question":"A delivery service company wants to optimize the delivery routes for their daily dispatch process. They operate within a city represented as a grid with intersections and streets. The company has `n` delivery points and the headquarter located at different intersections on this grid. Each point is identified with a pair of coordinates `(xi, yi)` where `xi` represents the row and `yi` represents the column. The dispatch vehicle can only travel vertically or horizontally, not diagonally, and it takes 1 minute to travel from one intersection to an adjacent one. The company wants to determine which delivery point is the optimal starting point for the delivery vehicle such that the total delivery time to all other delivery points is minimized. In case of multiple points yielding the same total travel time, choose the point with the smallest row number, and if still tied, the smallest column number. Write a function to determine the optimal delivery start point. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of delivery points. The next `n` lines each contain two integers `xi` and `yi` (1 ≤ xi, yi ≤ 1,000,000) — the coordinates of the delivery points. -----Output----- Print two integers `x` and `y` — the coordinates of the optimal delivery start point. -----Example----- Input 5 1 2 3 4 5 6 2 1 4 3 Output 3 4 -----Explanation----- In the example, starting from coordinates (3,4) minimizes the total delivery time to all other points in the delivery list. All distances are minimized when starting from this point compared to starting from any other point. If there were multiple points with the same summed delivery times, the point with the smallest row number followed by the smallest column number would be chosen.","solution":"def optimal_delivery_point(n, delivery_points): Determines the optimal delivery start point to minimize total delivery time to all other delivery points, and in case of a tie, chooses the point with the smallest row number, and if still tied, the smallest column number. :param n: Number of delivery points :param delivery_points: List of tuples representing the coordinates of the delivery points :returns: Tuple representing the optimal delivery point coordinates if n == 1: return delivery_points[0] median_x = sorted([point[0] for point in delivery_points])[n//2] median_y = sorted([point[1] for point in delivery_points])[n//2] optimal_point = (median_x, median_y) min_total_distance = float(\'inf\') for x, y in delivery_points: total_distance = sum(abs(x - xi) + abs(y - yi) for xi, yi in delivery_points) if (total_distance < min_total_distance or (total_distance == min_total_distance and (x < optimal_point[0] or (x == optimal_point[0] and y < optimal_point[1])))): min_total_distance = total_distance optimal_point = (x, y) return optimal_point"},{"question":"A connected, undirected graph is given with `n` nodes and some edges. In a connected graph, there is a path between any two nodes. Each node has a value assigned to it represented by an array `values` where `values[i]` is the value for node `i + 1`. You are also given a list of `edges` where `edges[i]` is a pair representing an undirected edge between the nodes. Your task is to perform `Q` queries of two types: - Query type 1: Given a node `u`, update the value of this node to `x`. - Query type 2: Given a node `u` and a distance `d`, return the sum of the values of all nodes that are at a distance `d` from the node `u`. Example 1: Input: n = 5 values = [1, 2, 3, 4, 5] edges = [[1, 2], [1, 3], [2, 4], [2, 5]] Q = 3 queries = [[2, 1], [1, 2, 10], [2, 1]] Output: 5 14 Example 2: Input: n = 4 values = [5, 5, 5, 5] edges = [[1, 2], [1, 3], [1, 4]] Q = 2 queries = [[2, 1], [1, 3, 10]] Output: 15 Your Task: You don\'t need to read input or print anything. Your task is to implement the functions `Graph(n, values, edges)` to initialize the data structure and `query1(u, x)` and `query2(u, d)` to perform the two types of queries. Expected Time Complexity: - Initialize: O(n + m) - Query type 1: O(1) - Query type 2: O(n) Expected Auxiliary Space: O(n + m) Constraints: - 1 <= n <= 10^5 - 1 <= Q <= 10^3 - 0 <= values[i] <= 10^9 - 1 <= u <= n - 1 <= d <= n - 1 <= x <= 10^9 - 1 <= edges.length <= 10^5","solution":"from collections import deque, defaultdict class Graph: def __init__(self, n, values, edges): self.n = n self.values = values self.adj_list = defaultdict(list) for u, v in edges: self.adj_list[u].append(v) self.adj_list[v].append(u) def query1(self, u, x): self.values[u - 1] = x def query2(self, u, d): # Breadth-First Search to determine distances queue = deque([(u, 0)]) visited = [False] * (self.n + 1) visited[u] = True result_sum = 0 while queue: current_node, current_distance = queue.popleft() if current_distance == d: result_sum += self.values[current_node - 1] if current_distance < d: for neighbor in self.adj_list[current_node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, current_distance + 1)) return result_sum"},{"question":"Sarah is working on a new feature for a text editor enhanced with word prediction. The word prediction system works by analyzing the words that were previously typed and suggesting the next word that is most likely to be typed by the user. To improve the word prediction system, Sarah needs to build a data structure that can store sequences of words and quickly return the most frequently occurring word that follows a given sequence of words. This system is supposed to handle multiple queries efficiently and support dynamic updates as new sentences are typed. Implement the following functions: 1. `add_sentence(sentence: str) -> None`: Adds a sentence to the word prediction system. The sentence is a string containing words separated by spaces. 2. `get_prediction(query: str) -> str`: Given a query which is a sequence of words separated by spaces (possibly empty), return the word that most frequently follows this sequence in the previously added sentences. In case of a tie, return the lexicographically smallest word. If no such word exists, return an empty string. You can assume that all words in the input contain only lowercase English letters and each sentence contains at most 100 words. The number of sentences doesn\'t exceed 10^5 and the number of queries doesn\'t exceed 10^5. # Input: - The first line contains an integer Q (number of operations). - The next Q lines describe an operation in one of the following two formats: - `add_sentence sentence` - `get_prediction query` # Output: - For every `get_prediction` operation, output the predicted word in a new line. # Example: Input: ``` 7 add_sentence i love programming add_sentence i love coding add_sentence i love programming because it is fun get_prediction i love get_prediction i add_sentence i love solving problems get_prediction i love ``` Output: ``` programming love love ``` # Explanation: - For the query `i love`, the following words are: `programming (2 times)`, `solving (1 time)`, and `coding (1 time)`. Therefore, the most frequent word following `i love` is `programming`. - For the query `i`, the following words are: `love (3 times)`. Therefore, the predicted word is `love`. - After adding \\"i love solving problems\\", the follow-up prediction for `i love` still remains `programming` since it is the most frequent word following this sequence of words, appearing 2 times, while `solving` appears only once.","solution":"from collections import defaultdict, Counter class WordPrediction: def __init__(self): self.chain = defaultdict(Counter) def add_sentence(self, sentence: str) -> None: words = sentence.split() for i in range(len(words)): if i < len(words) - 1: self.chain[\' \'.join(words[:i+1])][words[i+1]] += 1 def get_prediction(self, query: str) -> str: if query not in self.chain or not self.chain[query]: return \\"\\" count = self.chain[query] most_common = count.most_common() max_frequency = most_common[0][1] candidates = [word for word, freq in most_common if freq == max_frequency] return min(candidates) # Example function to run commands. def process_commands(commands): wp = WordPrediction() output = [] for command in commands: if command.startswith(\\"add_sentence\\"): wp.add_sentence(command[len(\\"add_sentence \\"):]) elif command.startswith(\\"get_prediction\\"): result = wp.get_prediction(command[len(\\"get_prediction \\"):]) output.append(result) return output"},{"question":"Dublin the Duck has a string S consisting of the lowercase English alphabet letters. Dublin can perform certain operations on this string to make it a palindrome. In one operation, Dublin: 1. Selects a character from the string S (let\'s call the character c) 2. Replaces all occurrences of character c with another lowercase English alphabet character. Your task is to determine the minimum number of operations required to make the string S a palindrome or determine that it is impossible. A palindrome is a string that reads the same forward and backward. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 10) — the number of test cases. For each test case: The first line contains one integer n (1 ≤ n ≤ 10^5) — the length of the string S. The second line contains the string S (|S| = n). It is guaranteed that the sum of n over all test cases does not exceed 10^5. Output For each test case: Print on a single line the minimum number of operations needed to make the string S a palindrome, or -1 if it is not possible. Example Input 4 3 abc 4 abba 5 aabaa 6 abccba Output 1 0 0 0 Explanation * In the 1st test case, Dublin can: 1. Replace all occurrences of \'a\' with \'c\', making the string become \\"cbc\\" (1 change). * The 2nd test case is already a palindrome. * The 3rd test case is already a palindrome. * The 4th test case is already a palindrome.","solution":"def min_operations_to_palindrome(t, cases): results = [] for i in range(t): n, s = cases[i] if s == s[::-1]: results.append(0) continue left = 0 right = n - 1 operations = 0 while left < right: if s[left] != s[right]: operations += 1 left += 1 right -= 1 results.append(operations) return results"},{"question":"Given a string S consisting of only lowercase alphabetic characters, you need to determine how many vowels and consonants are present in the string. For the purpose of this question, vowels are \'a\', \'e\', \'i\', \'o\', and \'u\', and all other alphabetic characters are consonants. ------ Input Format ------ - A single line containing the string S. ------ Output Format ------ - A single line with two space-separated integers, the first representing the number of vowels and the second representing the number of consonants in the string. ------ Constraints ------ 1 ≤ |S| ≤ 100 ------ Sample Input 1 ------ hello ------ Sample Output 1 ------ 2 3 ------ Explanation 1 ------ In the string \\"hello\\", there are 2 vowels (\'e\' and \'o\') and 3 consonants (\'h\', \'l\', and \'l\'). ------ Sample Input 2 ------ programming ------ Sample Output 2 ------ 3 8 ------ Explanation 2 ------ In the string \\"programming\\", there are 3 vowels (\'o\', \'a\', and \'i\') and 8 consonants (\'p\', \'r\', \'g\', \'r\', \'m\', \'m\', \'n\', and \'g\').","solution":"def count_vowels_and_consonants(s): Returns the count of vowels and consonants in the given string s. vowels = \'aeiou\' n_vowels = sum(1 for char in s if char in vowels) n_consonants = sum(1 for char in s if char not in vowels) return n_vowels, n_consonants def count_vowels_and_consonants_output(s): Returns the count of vowels and consonants in the given string s as space separated integers. n_vowels, n_consonants = count_vowels_and_consonants(s) return f\\"{n_vowels} {n_consonants}\\""},{"question":"Bobby loves to arrange his bookshelf, and he is very particular about the order of his books. He wants to sort his books in alphabetical order based on their titles. However, he has a unique way of swapping the books. He can only swap two adjacent books at a time. Given the titles of the books as an array of strings, determine the minimum number of adjacent swaps needed to sort the books in alphabetical order. Write a function that takes a list of book titles and returns the minimum number of adjacent swaps needed to sort the books. Example 1: Input: books = [\\"zebra\\", \\"monkey\\", \\"apple\\"] Output: 3 Explanation: Swap \\"zebra\\" and \\"monkey\\" -> [\\"monkey\\", \\"zebra\\", \\"apple\\"] Swap \\"zebra\\" and \\"apple\\" -> [\\"monkey\\", \\"apple\\", \\"zebra\\"] Swap \\"monkey\\" and \\"apple\\" -> [\\"apple\\", \\"monkey\\", \\"zebra\\"] Example 2: Input: books = [\\"banana\\", \\"apple\\", \\"cherry\\"] Output: 1 Explanation: Swap \\"banana\\" and \\"apple\\" -> [\\"apple\\", \\"banana\\", \\"cherry\\"] Function Signature: def minimum_swaps(books: List[str]) -> int: Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(1) Constraints: - 1 ≤ len(books) ≤ 10^3 - Each title consists only of lowercase alphabetical characters. - The total length of all titles combined does not exceed 10^5 characters.","solution":"def minimum_swaps(books): Return the minimum number of adjacent swaps needed to sort the book titles in alphabetical order. n = len(books) swaps = 0 arr = books[:] # Bubble sort algorithm to count swaps for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swaps += 1 return swaps"},{"question":"Alice wants to write a program that can classify integers based on their properties. In particular, she wants to determine whether a number is square-free. A square-free number is an integer which is not divisible by any square number other than 1 (i.e., it has no square factors other than 1). -----Input----- The input consists of a single integer `n` (1 ≤ n ≤ 10^6). -----Output----- The output should be a single string \\"YES\\" if the number is square-free and \\"NO\\" otherwise. -----Examples----- Input 10 Output YES Input 18 Output NO Input 25 Output NO -----Note----- For example, 10 is square-free because its divisors (1, 2, 5, and 10) do not include any square numbers (other than 1). However, 18 is not square-free because it is divisible by 9 (a square number). Similarly, 25 is not square-free because it is divisible by 25.","solution":"def is_square_free(n): Determines if a number n is square-free. A number is square-free if it is not divisible by any perfect square other than 1. :param n: integer to check (1 ≤ n ≤ 10^6) :return: \\"YES\\" if the number is square-free, \\"NO\\" otherwise. i = 2 while i * i <= n: if n % (i * i) == 0: return \\"NO\\" i += 1 return \\"YES\\""},{"question":"Jimmy is organizing a treasure hunt for his friends. At the start of the hunt, each friend is given a map with a list of X different clues. Each clue helps locate a corresponding treasure. Each friend independently follows their clues and gathers treasures. The rules of the treasure hunt are as follows: 1. Each friend writes down the number of treasures they found from each clue on their map. 2. Friends do not share treasures or clues during the hunt. 3. The hunt is divided into three rounds, with each round corresponding to the three lists of clues given to each friend. You need to calculate and display the total number of treasures each friend has gathered over the three rounds. # Input Format - The first line of the input consists of a single integer X (1 ≤ X ≤ 100), indicating the number of friends participating. - Each of the next X lines contains exactly 3 integers separated by spaces. Each integer represents the number of treasures found by the friend from their clues in the three rounds. # Output Format - Print X lines, each containing a single integer, representing the total number of treasures each friend has gathered over the three rounds. # Sample Input 1 ``` 4 2 3 1 4 5 6 1 1 2 0 2 3 ``` # Sample Output 1 ``` 6 15 4 5 ``` # Sample Input 2 ``` 3 10 10 10 5 5 5 3 3 3 ``` # Sample Output 2 ``` 30 15 9 ``` In the given sample input and output, each friend\'s total treasure count over the three rounds is computed and displayed. # Constraints - Ensure that the sum does not exceed the maximum possible integer value in your chosen programming language.","solution":"def calculate_total_treasures(num_friends, treasures_per_round): Calculate the total number of treasures each friend has gathered over the three rounds. :param num_friends: An integer indicating the number of friends :param treasures_per_round: A list of tuples where each tuple contains three integers representing the number of treasures found by a particular friend in each of the three rounds :return: A list of integers where each integer represents the total number of treasures gathered by each friend totals = [] for treasures in treasures_per_round: total_treasures = sum(treasures) totals.append(total_treasures) return totals"},{"question":"Julie is organizing a charity marathon to raise funds for her new community project. Runners from various cities have signed up to compete in this marathon. Julie wants to understand how many runners will participate from each city. You are given an array that represents the city ID of each runner. Your task is to determine the count of runners from each city and then sort the cities by the number of runners in descending order. If two cities have the same number of runners, their IDs should be sorted in ascending order. **Input:** - The first line contains a single integer `n` (1 leq n leq 10^5), the number of runners. - The second line contains `n` integers where the i-th integer is the city ID of the i-th runner (1 leq text{City ID}_i leq 10^5). **Output:** - Print the sorted list of city IDs based on the number of runners in them. Each city ID should appear once in the output. **Examples:** **Example 1:** ``` Input: 5 2 3 2 3 1 Output: 2 3 1 ``` **Example 2:** ``` Input: 8 1 2 1 3 2 1 3 2 Output: 1 2 3 ``` **Explanation:** In Example 1, cities 2 and 3 have 2 runners each, whereas city 1 has 1 runner. Since city 2 and 3 have the same count, they are sorted by their IDs. In Example 2, city 1 has 3 runners, city 2 has 3 runners, and city 3 has 2 runners. The counts are used to sort the city IDs. Your code should efficiently handle the problem given the constraints.","solution":"def count_runners_per_city(n, city_ids): Returns the list of city IDs sorted by the number of runners in descending order. Parameters: - n (int): Number of runners. - city_ids (list of int): List of city IDs corresponding to each runner. Returns: - list of int: Sorted list of city IDs by number of runners in descending order. from collections import Counter # Count the number of runners per city city_counts = Counter(city_ids) # Create a sorted list of city IDs based on the conditions sorted_city_ids = sorted(city_counts.keys(), key=lambda x: (-city_counts[x], x)) return sorted_city_ids"},{"question":"Given a grid with \'N\' rows and \'M\' columns filled with non-negative integers, you need to find the maximum sum of a sub-grid (rectangular section) in this grid. A sub-grid is defined by selecting four integers (r1, c1) and (r2, c2) such that 1 ≤ r1 ≤ r2 ≤ N and 1 ≤ c1 ≤ c2 ≤ M. Calculate the sum of all elements in this sub-grid. Input The first line contains two integers N and M, representing the number of rows and columns in the grid, respectively. The next N lines contain M integers each, representing the grid elements. Output Print the maximum sum of any sub-grid in the grid. Constraints 1 ≤ N, M ≤ 100 0 ≤ grid[i][j] ≤ 1000 Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 45 Explanation The entire grid forms the sub-grid with the maximum sum of 45.","solution":"def max_sum_subgrid(grid): Function to find the maximum sum of any sub-grid in the given grid. N = len(grid) # Number of rows M = len(grid[0]) # Number of columns # Step 1: Compute the prefix sum matrix prefix = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): prefix[i][j] = ( grid[i - 1][j - 1] + prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] ) # Step 2: Find the maximum sum of any sub-grid max_sum = float(\'-inf\') for r1 in range(1, N + 1): for r2 in range(r1, N + 1): for c1 in range(1, M + 1): for c2 in range(c1, M + 1): current_sum = (prefix[r2][c2] - prefix[r1 - 1][c2] - prefix[r2][c1 - 1] + prefix[r1 - 1][c1 - 1]) max_sum = max(max_sum, current_sum) return max_sum # Wrapper to read input from console if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) M = int(data[1]) grid = [] idx = 2 for i in range(N): row = list(map(int, data[idx:idx+M])) grid.append(row) idx += M print(max_sum_subgrid(grid))"},{"question":"There is a list of cities connected by bidirectional roads. Each road has a certain distance in km. Given the number of cities and the list of roads, your task is to calculate the maximum distance between any two cities. The maximum distance between two cities is the longest path you can travel from one city to another without passing through the same road more than once. Consider the distance between two directly connected cities as the length of the road between them. If the cities are not directly connected, you must travel through intermediate cities, summing the distances of consecutive roads to find the total distance. Input The first line of input contains an integer n (2 ≤ n ≤ 10^4) — the number of cities. Each of the next n-1 lines contains three integers u, v, and d (1 ≤ u, v ≤ n, 1 ≤ d ≤ 100) — denoting a road between cities u and v with a distance of d km. Output Print one integer — the maximum distance between any two cities. Examples Input 4 1 2 4 2 3 3 3 4 5 Output 12 Input 5 1 2 2 2 3 4 3 4 1 4 5 3 Output 10 Input 3 1 2 1 2 3 1 Output 2","solution":"from collections import defaultdict, deque def max_distance_between_cities(n, roads): def bfs(start): visited = [False] * (n + 1) distance = [0] * (n + 1) queue = deque([start]) visited[start] = True farthest_city = start while queue: city = queue.popleft() for neighbor, dist in graph[city]: if not visited[neighbor]: visited[neighbor] = True distance[neighbor] = distance[city] + dist queue.append(neighbor) if distance[neighbor] > distance[farthest_city]: farthest_city = neighbor return farthest_city, distance[farthest_city] # Create the graph graph = defaultdict(list) for u, v, d in roads: graph[u].append((v, d)) graph[v].append((u, d)) # Perform BFS to find the farthest city from any city (start at city 1) farthest_city, _ = bfs(1) # Perform BFS again from the farthest city found to find the maximum distance _, max_distance = bfs(farthest_city) return max_distance"},{"question":"Let\'s practice using dictionaries and strings! You are given a string `s` consisting of lowercase English letters. Your task is to write a function `most_frequent_char` that takes this string as input and returns the most frequent character in the string. If there is a tie between characters, return the lexicographically smallest one. Example: `s = \\"aabbbcc\\"` The most frequent characters are `\'a\'` and `\'b\'`, but since `\'b\'` appears more frequently, the function should return `\'b\'`. `most_frequent_char(s) -> \'b\'` Input Format: A single string `s` consisting of lowercase English letters. Constraints: - `1 <= len(s) <= 1000` Sample Input 0: ``` aabbbcc ``` Sample Output 0: ``` b ``` Sample Input 1: ``` xyzzyxx ``` Sample Output 1: ``` x ``` Explanation 0: The character \'b\' appears 3 times, which is the most frequent. Explanation 1: The character \'x\' and \'z\' both appear 2 times, but lexicographically, \'x\' comes before \'z\'.","solution":"def most_frequent_char(s): Returns the most frequent character in the string s. If there is a tie, returns the lexicographically smallest character. if not s: return None char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 max_char = None max_count = 0 for char, count in char_count.items(): if count > max_count or (count == max_count and (max_char is None or char < max_char)): max_count = count max_char = char return max_char"},{"question":"# Problem Statement A company organizes an annual coding marathon where different teams participate to solve challenging problems. At the end of the marathon, each team is ranked based on the total points they\'ve accumulated. If two teams have the same points, they get the same rank, and the next rank should be skipped. For example, if there are four teams with points [100, 90, 90, 80], the corresponding ranks would be [1, 2, 2, 4]. However, this year, the organizers faced a problem. When the event finished, they accidentally lost all records of the team names and points. Fortunately, they have a list of participants and the number of tasks each team has solved correctly. Your task is to help them determine the rankings based on the number of tasks solved. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of participating teams. - The second line contains an array of `n` integers where the `i-th` integer represents the number of tasks solved by the `i-th` team (1 ≤ tasks solved ≤ 1000). # Output - Print an array of `n` integers where the `i-th` integer is the rank of the `i-th` team. # Example Input ``` 5 50 40 40 30 20 ``` Output ``` 1 2 2 4 5 ``` Input ``` 4 100 100 50 50 ``` Output ``` 1 1 3 3 ``` # Explanation - In the first example, the first team solved 50 tasks and gets rank 1, the second and third teams solved 40 tasks each and both get rank 2, the fourth team solved 30 tasks and gets rank 4, and the last team solved 20 tasks, getting rank 5. - In the second example, the first two teams both solved 100 tasks and both get rank 1, while the next two teams solved 50 tasks each and get rank 3. There is no rank 2 in this case, as the ranks are adjusted for ties.","solution":"def determine_ranks(n, tasks): Determine the ranks of teams based on the number of tasks solved. Parameters: n (int): Number of teams. tasks (list of int): Tasks solved by each team. Returns: list of int: The ranks of the teams. if n != len(tasks): raise ValueError(\\"The number of tasks provided does not match the number of teams.\\") sorted_tasks = sorted([(tasks[i], i) for i in range(n)], reverse=True) ranks = [0] * n current_rank = 1 for i in range(n): if i > 0 and sorted_tasks[i][0] == sorted_tasks[i - 1][0]: ranks[sorted_tasks[i][1]] = ranks[sorted_tasks[i - 1][1]] else: ranks[sorted_tasks[i][1]] = current_rank current_rank += 1 return ranks"},{"question":"A sequence of integers can be represented as comma-separated values (CSV) on a single line. Your task is to find the maximum sum of any contiguous subarray within the sequence. A subarray is a contiguous portion of an array. For example, in the array [1, 2, -1, 3], the contiguous subarrays are [1], [2], [-1], [3], [1, 2], [2, -1], [-1, 3], [1, 2, -1], [2, -1, 3], and [1, 2, -1, 3]. Constraints: - The sequence will have at least one integer. - The length of the sequence will not exceed 10^5. - Each integer in the sequence will be in the range [-10^4, 10^4]. Input: Input consists of a single line containing CSV integers. Output: Output a single integer representing the maximum sum of any contiguous subarray. Examples: Input: ``` 1,2,-3,4,5 ``` Output: ``` 9 ``` Input: ``` -2,-3,-1 ``` Output: ``` -1 ``` Input: ``` 4,-1,2,1,-5,4 ``` Output: ``` 6 ```","solution":"def max_contiguous_subarray_sum(csv_numbers): Returns the maximum sum of any contiguous subarray within the sequence. Args: csv_numbers (str): A string of comma-separated integers. Returns: int: Maximum sum of any contiguous subarray. # Converting the comma-separated string into a list of integers nums = list(map(int, csv_numbers.split(\',\'))) # Initialization of Kadane\'s Algorithm max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a sequence of integers where each number appears exactly twice, except for one number which appears exactly once. Write a function to find the number which appears exactly once. Your function should have a linear runtime complexity and use only constant extra space. --Input-- The input is an array of integers `nums` where `nums.length` is an odd number. --Output-- Return the single integer that appears only once. --Example-- Input: [2, 2, 1] Output: 1 Input: [4, 1, 2, 1, 2] Output: 4 Input: [1] Output: 1 --Additional Notes-- - Your solution should handle cases where the input contains any integer (positive, negative, or zero). - Ensure that your function is optimized for performance and memory usage.","solution":"def singleNumber(nums): Returns the number which appears exactly once in the list. unique_num = 0 for num in nums: unique_num ^= num return unique_num"},{"question":"You are tasked with developing a program that can manage a hospital\'s appointment system. The program should take input describing appointments for multiple doctors and output a list of patients each doctor will see, ordered by appointment time. Each appointment consists of the patient\'s name, their appointment time, and the doctor\'s name they are scheduled to see. All times are given in the 24-hour format as \\"HH:MM\\". Each doctor will have at least one appointment, and no more than 10 appointments. Assume that appointment times are unique for each doctor (i.e., no two appointments for the same doctor will be at the same time). The input ends with a line containing the word \\"END\\". # Input The input consists of multiple lines. Each line describes a single appointment in the format: ``` patient_name appointment_time doctor_name ``` - patient_name is a string with no spaces (1 ≤ length ≤ 50) - appointment_time is in the format \\"HH:MM\\" - doctor_name is a string with no spaces (1 ≤ length ≤ 50) # Output For each doctor, output the doctor’s name followed by the list of their appointments, sorted by the appointment time in ascending order. Each doctor\'s list should start with the name of the doctor followed by a colon. Each patient\'s appointment should be displayed as \\"patient_name at appointment_time\\". # Example Input ``` John 10:30 DrSmith Jane 09:45 DrSmith Alice 13:00 DrJones Bob 15:30 DrSmith Charlie 12:15 DrJones END ``` Output ``` DrSmith: Jane at 09:45 John at 10:30 Bob at 15:30 DrJones: Charlie at 12:15 Alice at 13:00 ```","solution":"def manage_appointments(appointments): from collections import defaultdict import datetime # Initialize a dictionary to hold appointments for each doctor doctor_appointments = defaultdict(list) # Parse the appointments and group them by doctor for appointment in appointments: if appointment == \\"END\\": break patient_name, appointment_time, doctor_name = appointment.split() doctor_appointments[doctor_name].append((patient_name, appointment_time)) # Output the sorted appointments for each doctor result = [] for doctor, appts in sorted(doctor_appointments.items()): result.append(f\\"{doctor}:\\") sorted_appts = sorted(appts, key=lambda x: datetime.datetime.strptime(x[1], \\"%H:%M\\")) for patient_name, appointment_time in sorted_appts: result.append(f\\"{patient_name} at {appointment_time}\\") return result"},{"question":"You\'re tasked with creating a custom photo frame for your favorite family portrait. The frame must be a perfect rectangle and should be of the most appropriate dimensions to ensure the photo fits without any excess space. Write a function `can_fit()` that takes two arguments: the dimensions of the photo as a tuple `(photo_width, photo_height)` and the dimensions of the frame as a tuple `(frame_width, frame_height)`. The function should return `True` if the photo can fit perfectly within the frame without any part of the photo being cropped, otherwise return `False`. For example, `can_fit((16, 20), (20, 25))` should return `True`, but `can_fit((25, 30), (20, 25))` should return `False`. Note: Both the width and the height of the photo must be less than or equal to the corresponding dimensions of the frame for the photo to fit perfectly. ```python def can_fit(photo_size, frame_size): return photo_size[0] <= frame_size[0] and photo_size[1] <= frame_size[1] # Example Usage: # should return True print(can_fit((16, 20), (20, 25))) # should return False print(can_fit((25, 30), (20, 25))) ```","solution":"def can_fit(photo_size, frame_size): Determines if a photo can fit inside a frame without any part being cropped. :param tuple photo_size: A tuple (photo_width, photo_height) representing the dimensions of the photo. :param tuple frame_size: A tuple (frame_width, frame_height) representing the dimensions of the frame. :return: True if the photo can fit inside the frame, False otherwise. photo_width, photo_height = photo_size frame_width, frame_height = frame_size return photo_width <= frame_width and photo_height <= frame_height # Example usage: # should return True print(can_fit((16, 20), (20, 25))) # should return False print(can_fit((25, 30), (20, 25)))"},{"question":"You are given a list of integers representing daily temperatures. Output the list of days it takes for each day\'s temperature to become warmer. If there is no future day for which this is true, output 0 for that day. Input The input consists of a single list of integers. Each integer represents the temperature on a day and the list is guaranteed to have at least one day. Output Output a list of integers where each integer represents the number of days you would have to wait until a warmer temperature. If there is no future warmer temperature for that day, output 0 for that day. Examples Input [73, 74, 75, 71, 69, 72, 76, 73] Output [1, 1, 4, 2, 1, 1, 0, 0] Input [30, 40, 50, 60] Output [1, 1, 1, 0] Note In the first example, for day 1 (temperature 73), you have to wait 1 day for a warmer temperature of 74. For day 4 (temperature 71), you have to wait 2 days for a warmer temperature of 72. For the last day with temperature 73, there is no future warmer temperature, so the output is 0.","solution":"def daily_temperatures(temperatures): Given a list of daily temperatures, return a list that for each day tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 for that day. n = len(temperatures) answer = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: prev_day = stack.pop() answer[prev_day] = i - prev_day stack.append(i) return answer"},{"question":"You are given a list of `n` tasks, each with a start time and an end time. You need to find the minimum number of machines required to execute all tasks without any overlap. A machine can only execute one task at a time, and a task requires an entire machine for the duration of its time interval. Input The first line contains an integer `n` (1 ≤ n ≤ 500,000) — the number of tasks. Each of the next `n` lines contains two integers `s_i` and `e_i` (1 ≤ s_i < e_i ≤ 10^9) — the start and end times of the tasks. Output Print the minimum number of machines required. Example Input 5 1 4 2 6 8 9 3 5 5 9 Output 3 Explanation 1. Task 1 runs from time 1 to 4. 2. Task 2 runs from time 2 to 6. 3. Task 3 runs from time 8 to 9. 4. Task 4 runs from time 3 to 5. 5. Task 5 runs from time 5 to 9. - Task 1 and Task 2 overlap from time 2 to 4. - Task 2 and Task 4 overlap from time 3 to 5. - Task 4 and Task 5 overlap from time 5 to 6. - Task 1, Task 2, and Task 4 overlap from time 3 to 4. Machines required: - Machine 1: Task 1 from 1 to 4, then Task 3 from 8 to 9. - Machine 2: Task 2 from 2 to 6. - Machine 3: Task 4 from 3 to 5, then Task 5 from 5 to 9.","solution":"def min_machines_required(tasks): Determines the minimum number of machines required to execute all tasks without overlap. Parameters: tasks (list of tuples): A list of tuples where each tuple contains the start and end times of tasks. Returns: int: The minimum number of machines required. events = [] for (start, end) in tasks: events.append((start, \'start\')) events.append((end, \'end\')) events.sort() max_machines = current_machines = 0 for event in events: if event[1] == \'start\': current_machines += 1 max_machines = max(max_machines, current_machines) else: current_machines -= 1 return max_machines"},{"question":"The residents of the fictitious land of Zartac need your help. They have a special rectangular grid of size N x M, where each cell can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). The Zartac people want to navigate from the top-left corner of the grid (0, 0) to the bottom-right corner (N-1, M-1) using the minimum number of steps required. The only possible movements are to adjacent cells — up, down, left, or right — but stepping into a cell with an obstacle is not allowed. Your task is to determine the minimum number of steps required to navigate from the top-left corner to the bottom-right corner. If it is not possible to reach the bottom-right corner, return -1 instead. Input: The first line contains an integer T (1 ≤ T ≤ 10), the number of test cases. Each test case starts with two integers N and M (1 ≤ N, M ≤ 100), representing the dimensions of the grid, followed by N lines each containing M characters, either \'.\' or \'#\', representing the grid. Output: For each test case, output a single integer on a new line, which is the minimum number of steps required to reach the bottom-right corner. If it is not possible, print -1. Example: Input: 3 3 3 ... .#. ... 4 4 .... .#.. ..#. .... 2 2 .# #. Output: 4 6 -1 Explanation: 1. In the first test case, the path is straightforward, taking 4 steps. 2. In the second test case, the path navigates around obstacles, taking 6 steps. 3. In the third test case, there is no possible path to the bottom-right corner, hence the result is -1.","solution":"from collections import deque def min_steps(grid, N, M): Returns the minimum number of steps required to navigate from the top-left corner to the bottom-right corner. Returns -1 if it\'s not possible. if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 # Directions for movements: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(0, 0, 0)]) # (row, column, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() # Check if we\'ve reached the bottom-right corner if row == N - 1 and col == M - 1: return steps # Explore neighbours for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < N and 0 <= new_col < M and grid[new_row][new_col] == \'.\' and (new_row, new_col) not in visited: queue.append((new_row, new_col, steps + 1)) visited.add((new_row, new_col)) return -1 def solve(T, test_cases): results = [] for i in range(T): N, M, grid = test_cases[i] result = min_steps(grid, N, M) results.append(result) return results"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},Y={class:"card-container"},C={key:0,class:"empty-state"},P=["disabled"],M={key:0},j={key:1};function z(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",Y,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",C,' No results found for "'+h(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",j,"Loading...")):(n(),i("span",M,"See more"))],8,P)):l("",!0)])}const L=d(A,[["render",z],["__scopeId","data-v-7b2a7f2c"]]),G=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/25.md","filePath":"quotes/25.md"}'),R={name:"quotes/25.md"},B=Object.assign(R,{setup(s){return(e,u)=>(n(),i("div",null,[x(L)]))}});export{G as __pageData,B as default};
